// eslint.config.cjs
const js = require('@eslint/js');
const tsParser = require('@typescript-eslint/parser');
const tsPlugin = require('@typescript-eslint/eslint-plugin');
const reactPlugin = require('eslint-plugin-react');
const reactHooks = require('eslint-plugin-react-hooks');
const importPlugin = require('eslint-plugin-import');
const globals = require('globals');

module.exports = [
  js.configs.recommended,
  {
    files: ['src/**/*.{ts,tsx,js,jsx}'],
    languageOptions: {
      parser: tsParser,
      ecmaVersion: 2021,
      sourceType: 'module',
      parserOptions: {
        ecmaFeatures: {
          jsx: true,
        },
      },
      globals: {
        ...globals.browser,
        ...globals.node,
        ...globals.jest,
        // Add additional globals to prevent no-undef errors
        Set: 'readonly',
        Map: 'readonly',
        Promise: 'readonly',
        console: 'readonly',
        process: 'readonly',
        setTimeout: 'readonly',
        clearTimeout: 'readonly',
        setInterval: 'readonly',
        clearInterval: 'readonly',
        exports: 'writable',
        module: 'readonly',
        require: 'readonly',
        global: 'readonly',
        window: 'readonly',
        document: 'readonly',
        __dirname: 'readonly',
        __filename: 'readonly',
      },
    },
    plugins: {
      '@typescript-eslint': tsPlugin,
      react: reactPlugin,
      'react-hooks': reactHooks,
      import: importPlugin,
    },
    rules: {
      // React specific rules
      'react/react-in-jsx-scope': 'off',
      'react/jsx-uses-react': 'off',
      'react/jsx-uses-vars': 'error',
      'react/prop-types': 'off',

      // TypeScript rules
      '@typescript-eslint/no-unused-vars': [
        'warn',
        {
          argsIgnorePattern: '^_',
          varsIgnorePattern: '^_',
          caughtErrorsIgnorePattern: '^_',
        },
      ],
      '@typescript-eslint/no-explicit-any': 'warn',
      'no-undef': 'off', // TypeScript handles this

      // React Hooks rules
      'react-hooks/rules-of-hooks': 'error',
      'react-hooks/exhaustive-deps': 'warn',

      // General JavaScript rules
      'no-unused-vars': 'off', // Handled by @typescript-eslint/no-unused-vars
      'no-console': ['warn', { allow: ['warn', 'error'] }],
      'no-var': 'error',
      'prefer-const': 'error',
      eqeqeq: 'error',

      // Import rules
      'import/no-unresolved': 'warn',
      'import/named': 'warn',
      'import/default': 'warn',
      'import/namespace': 'warn',
      'import/no-duplicates': 'error',
    },
    settings: {
      react: {
        version: 'detect',
      },
    },
  },
  {
    ignores: [
      'node_modules/',
      'dist/',
      'build/',
      '.next/',
      '.astro/',
      'coverage/',
      '*.config.js',
      '*.config.mjs',
      '*.config.cjs',
      // Ignore all root-level scripts and test files
      '*.cjs',
      '*.mjs',
      'test*.js',
      'tests/',
      'temp/',
      '__tests__/',
      'backend/',
      'database/',
      'docs/',
      'extracted*/',
      'Alchm*/',
      // Ignore all the campaign and utility scripts
      '*-*.cjs',
      '*-*.js',
      'fix-*.cjs',
      'fix-*.js',
      'analyze-*.cjs',
      'analyze-*.js',
      'emergency-*.cjs',
      'emergency-*.js',
      'comprehensive-*.cjs',
      'comprehensive-*.js',
      'aggressive-*.cjs',
      'aggressive-*.js',
      'automated-*.cjs',
      'automated-*.js',
      'conservative-*.cjs',
      'conservative-*.js',
      'enhanced-*.cjs',
      'enhanced-*.js',
      'epsilon-*.cjs',
      'epsilon-*.js',
      'targeted-*.cjs',
      'targeted-*.js',
      'ultimate-*.cjs',
      'ultimate-*.js',
      'unintentional-*.cjs',
      'unintentional-*.js',
      'unused-*.cjs',
      'unused-*.js',
      'validate-*.cjs',
      'validate-*.js',
      'warning-*.cjs',
      'warning-*.js',
      'wave-*.cjs',
      'wave-*.js',
      'delta-*.cjs',
      'delta-*.js',
      'first-*.cjs',
      'first-*.js',
      'final-*.cjs',
      'final-*.js',
      'third-*.cjs',
      'third-*.js',
      'add-*.cjs',
      'add-*.js',
      'extract*.cjs',
      'extract*.js',
      'task-*.cjs',
      'task-*.js',
      'convert-*.js',
      'analyze-*.js',
      'ci-*.js',
      'demo-*.ts',
      'clean-*.sh',
      'deploy-*.sh',
      'docker-*.sh',
      'test-*.sh',
      'open-*.js',
      'update-*.ts',
      'batch-*.ts',
      'batch-*.js',
      'performance-*.ts',
      'dashboard-*.ts',
      'dashboard-*.js',
      'zero-*.ts',
      'zero-*.js',
      'run-*.ts',
      'run-*.js',
      'check-*.cjs',
      'check-*.js',
      'rename-*.cjs',
      'rename-*.js',
      'fix-*.js',
      'test-*.js',
      'copy-*.md',
      'CONTINUATION-*.md',
      'CAMPAIGN-*.md',
      'PHASE*.md',
      'FINAL_*.md',
      'ADVANCED_*.json',
      'FINAL_*.json',
      'eslint-*.json',
      'comprehensive-*.json',
      'current-*.log',
      'constants-*.log',
      'build*.log',
      'eslint-*.log',
      'current-*.json',
      'current-*.log',
      'error-*.json',
      'error-*.md',
      'emergency-*.json',
      'emergency-*.md',
      'eslint-*.json',
      'eslint-*.md',
      'eslint-*.log',
      'enhanced-*.json',
      'enhanced-*.md',
      'confidential-scoring-analysis.json',
      'alchemizer-*.json',
      'api-comparison-*.json',
      'extracted_*.json',
      'analyzed_*.json',
      'restored_*.json',
      'confidence-*.json',
      'baseline-*.txt',
      '*.patch',
      '0001-*.patch',
      'bfg.jar',
      '*.ipynb',
      'analyze-api-response.js',
      'demo-cross-backend-rectification.ts',
    ],
  },
  {
    files: ['src/**/*.test.{ts,tsx}', 'src/**/*.spec.{ts,tsx}'],
    languageOptions: {
      globals: {
        ...globals.jest,
        console: 'readonly',
        process: 'readonly',
      },
    },
    rules: {
      'max-lines': 'off',
      'max-depth': 'off',
      'max-nested-callbacks': 'off',
    },
  },
  {
    // Allow console.log in src scripts directory if it exists
    files: ['src/scripts/**/*.{ts,js}'],
    rules: {
      'no-console': 'off',
    },
  },
  {
    // Configuration for .cjs files (CommonJS scripts)
    files: ['**/*.cjs'],
    languageOptions: {
      ecmaVersion: 2021,
      sourceType: 'commonjs',
      globals: {
        ...globals.node,
        console: 'readonly',
        process: 'readonly',
        setTimeout: 'readonly',
        clearTimeout: 'readonly',
        setInterval: 'readonly',
        clearInterval: 'readonly',
        Buffer: 'readonly',
        __dirname: 'readonly',
        __filename: 'readonly',
        exports: 'writable',
        module: 'readonly',
        require: 'readonly',
        global: 'readonly',
      },
    },
    rules: {
      'no-console': 'off',
      'no-undef': 'error',
      '@typescript-eslint/no-unused-vars': 'off',
      'no-unused-vars': ['warn', {
        argsIgnorePattern: '^_',
        varsIgnorePattern: '^_',
        caughtErrorsIgnorePattern: '^_',
      }],
    },
  },
];
