/**
 * expandable.css
 * 
 * Provides consistent styling, transitions, and visual cues
 * for all expandable components in the application.
 */

/* Common styles for all expandable elements */
[data-expandable="true"] {
  position: relative;
  cursor: pointer;
  transition: all 0.3s ease;
}

/* Add subtle indication that element is clickable */
[data-expandable="true"]:hover {
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  transform: translateY(-2px);
}

/* Visual indication that element is clicked */
[data-expandable="true"]:active {
  transform: translateY(0);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
}

/* Style for elements that are currently expanded */
[data-expandable="true"].expanded {
  border-left: 3px solid rgba(107, 70, 193, 0.8);
}

/* Smooth height transition for expandable content */
.expandable-content {
  overflow: hidden;
  transition: max-height 0.5s ease, opacity 0.3s ease;
  max-height: 0;
  opacity: 0;
}

.expandable-content.expanded {
  max-height: 5000px; /* High enough to fit any content */
  opacity: 1;
}

/* Consistent chevron indicator styling */
.expand-indicator {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  transition: transform 0.3s ease;
}

.expanded .expand-indicator {
  transform: rotate(180deg);
}

/* Fade-in animation for newly displayed content */
.fade-in {
  animation: fadeIn 0.3s ease forwards;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Focus styles for accessibility */
[data-expandable="true"]:focus {
  outline: 2px solid rgba(107, 70, 193, 0.5);
  outline-offset: 2px;
}

/* Z-index fix for overlapping elements */
[data-expandable="true"] {
  z-index: 1;
}

[data-expandable="true"].expanded {
  z-index: 2;
}

/* Fix for click events - ensure clickable area is properly sized */
[data-expandable="true"] {
  display: block;
  position: relative;
}

/* Ensure child elements don't steal clicks from parent */
[data-expandable="true"] > * {
  pointer-events: none;
}

/* But allow specific child elements to have their own click events */
[data-expandable="true"] button,
[data-expandable="true"] a,
[data-expandable="true"] [role="button"],
[data-expandable="true"] input,
[data-expandable="true"] select,
[data-expandable="true"] [data-expandable="true"] {
  pointer-events: auto;
} 