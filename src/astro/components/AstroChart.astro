---
// AstroChart.astro - A component for displaying astrological charts
import IconProvider from './icons/IconProvider.astro';
import { getZodiacSign, calculateElementalBalance, calculateAlchemicalPrinciples } from '../../utils/simplified-astrology';

// Import necessary interfaces
interface Props {
  planetaryPositions: Record<string, number>;
  aspectsData?: any[];
  risingDegree?: number;
  title?: string;
  showAspects?: boolean;
  size?: number;
  elementalBalance?: Record<string, number>; // Fire, Water, Earth, Air percentages
  alchemicalInfo?: Record<string, number>; // Spirit, Essence, Matter, Substance values
}

// Destructure props with defaults
const { 
  planetaryPositions, 
  aspectsData = [], 
  risingDegree = 0,
  title = "Current Astrological Chart", 
  showAspects = true,
  size = 400,
  elementalBalance = { Fire: 25, Earth: 25, Air: 25, Water: 25 },
  alchemicalInfo = { Spirit: 0, Essence: 0, Matter: 0, Substance: 0 }
} = Astro.props;

// Calculate zodiac sign positions (every 30 degrees)
const zodiacSigns = [
  { name: 'Aries', symbol: '♈', start: 0, element: 'Fire' },
  { name: 'Taurus', symbol: '♉', start: 30, element: 'Earth' },
  { name: 'Gemini', symbol: '♊', start: 60, element: 'Air' },
  { name: 'Cancer', symbol: '♋', start: 90, element: 'Water' },
  { name: 'Leo', symbol: '♌', start: 120, element: 'Fire' },
  { name: 'Virgo', symbol: '♍', start: 150, element: 'Earth' },
  { name: 'Libra', symbol: '♎', start: 180, element: 'Air' },
  { name: 'Scorpio', symbol: '♏', start: 210, element: 'Water' },
  { name: 'Sagittarius', symbol: '♐', start: 240, element: 'Fire' },
  { name: 'Capricorn', symbol: '♑', start: 270, element: 'Earth' },
  { name: 'Aquarius', symbol: '♒', start: 300, element: 'Air' },
  { name: 'Pisces', symbol: '♓', start: 330, element: 'Water' }
];

// Element colors
const elementColors = {
  'Fire': '#ff5722',
  'Earth': '#4caf50',
  'Air': '#03a9f4',
  'Water': '#9c27b0'
};

// Planet symbols
const planetSymbols: Record<string, string> = {
  'Sun': '☉',
  'Moon': '☽',
  'Mercury': '☿',
  'Venus': '♀',
  'Mars': '♂',
  'Jupiter': '♃',
  'Saturn': '♄',
  'Uranus': '♅',
  'Neptune': '♆',
  'Pluto': '♇',
  'Rising': 'ASC'
};

// Chart dimensions
const centerX = size / 2;
const centerY = size / 2;
const radius = (size / 2) - 40;

// Function to convert degrees to radians
const toRadians = (degrees: number) => (degrees * Math.PI) / 180;

// Function to calculate position on chart
const calculatePosition = (degree: number, distance: number = radius) => {
  // In astrological charts, 0 degrees is at the 9 o'clock position (east)
  // and degrees increase counterclockwise
  const adjustedDegree = 90 - degree;
  const radian = toRadians(adjustedDegree);
  const x = centerX + distance * Math.cos(radian);
  const y = centerY - distance * Math.sin(radian);
  return { x, y };
};

// Get sign for a degree
const getSignForDegree = (degree: number) => {
  const normalizedDegree = degree % 360;
  const signIndex = Math.floor(normalizedDegree / 30);
  return zodiacSigns[signIndex];
};

// Get the degree within a sign (0-29)
const getDegreeInSign = (degree: number) => {
  return Math.floor(degree % 30);
};

// Filter for only major aspects
const majorAspects = aspectsData.filter(aspect => 
  ['conjunction', 'opposition', 'trine', 'square'].includes(aspect.type) &&
  // Filter out aspects involving non-planet points (except Rising/ASC)
  (
    ['Sun', 'Moon', 'Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune', 'Pluto', 'Rising'].includes(aspect.planet1) &&
    ['Sun', 'Moon', 'Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune', 'Pluto', 'Rising'].includes(aspect.planet2)
  )
);

// Add rising sign to planetary positions if not already included
const allPositions = {...planetaryPositions};
if (!allPositions.Rising && risingDegree !== undefined) {
  allPositions.Rising = risingDegree;
}

// Calculate elemental totals based on planet positions
const calculateElementalBalance = () => {
  const elements = { Fire: 0, Earth: 0, Air: 0, Water: 0 };
  let total = 0;
  
  Object.entries(planetaryPositions).forEach(([planet, degree]) => {
    const sign = getSignForDegree(degree);
    // Weight planets differently
    let weight = 1;
    if (planet === 'Sun' || planet === 'Moon') weight = 3;
    if (planet === 'Rising') weight = 2;
    
    elements[sign.element] += weight;
    total += weight;
  });
  
  // Convert to percentages
  return {
    Fire: Math.round((elements.Fire / total) * 100),
    Earth: Math.round((elements.Earth / total) * 100),
    Air: Math.round((elements.Air / total) * 100),
    Water: Math.round((elements.Water / total) * 100),
  };
};

// Use provided elemental balance or calculate it
const elemBalance = elementalBalance || calculateElementalBalance();

// Calculate alchemical principles based on elemental balance
const calculateAlchemicalPrinciples = (elemBal: Record<string, number>) => {
  return {
    Spirit: Math.round((elemBal.Fire + elemBal.Air) / 2),
    Essence: Math.round((elemBal.Fire + elemBal.Water) / 2),
    Matter: Math.round((elemBal.Earth + elemBal.Water) / 2),
    Substance: Math.round((elemBal.Earth + elemBal.Air) / 2)
  };
};

// Use provided alchemical info or calculate it
const alchemicalPrinciples = alchemicalInfo.Spirit > 0 ? 
  alchemicalInfo : 
  calculateAlchemicalPrinciples(elemBalance);
---

<div class="astro-chart-container">
  <h3>{title}</h3>
  
  <div class="chart-with-info">
    <div class="chart-svg-container">
      <svg width={size} height={size} viewBox={`0 0 ${size} ${size}`} xmlns="http://www.w3.org/2000/svg">
        <!-- Outer circle -->
        <circle cx={centerX} cy={centerY} r={radius} fill="none" stroke="#ccc" stroke-width="1" />
        
        <!-- Middle circle for planets -->
        <circle cx={centerX} cy={centerY} r={radius - 20} fill="none" stroke="#eee" stroke-width="0.5" />
        
        <!-- Zodiac sign divisions (every 30 degrees) -->
        {zodiacSigns.map(sign => {
          const startPos = calculatePosition(sign.start);
          return (
            <>
              <line 
                x1={centerX} 
                y1={centerY} 
                x2={startPos.x} 
                y2={startPos.y} 
                stroke="#ddd" 
                stroke-width="0.5" 
              />
              <text 
                x={calculatePosition(sign.start + 15, radius + 20).x} 
                y={calculatePosition(sign.start + 15, radius + 20).y} 
                font-size="12" 
                text-anchor="middle" 
                dominant-baseline="middle"
                fill={elementColors[sign.element]}
              >
                {sign.symbol}
              </text>
            </>
          );
        })}
        
        <!-- Aspects (only major ones) -->
        {showAspects && majorAspects.map(aspect => {
          const pos1 = calculatePosition(planetaryPositions[aspect.planet1], radius - 25);
          const pos2 = calculatePosition(planetaryPositions[aspect.planet2], radius - 25);
          
          // Different colors for different aspects
          let strokeColor = "#ccc";
          let strokeStyle = "1";
          
          switch(aspect.type) {
            case "conjunction":
              strokeColor = "#ff9900";
              break;
            case "opposition":
              strokeColor = "#ff3366";
              strokeStyle = "1, 1";
              break;
            case "trine":
              strokeColor = "#33cc33";
              break;
            case "square":
              strokeColor = "#cc3366";
              strokeStyle = "3, 3";
              break;
          }
          
          return (
            <line 
              x1={pos1.x} 
              y1={pos1.y} 
              x2={pos2.x} 
              y2={pos2.y} 
              stroke={strokeColor} 
              stroke-width="0.75" 
              stroke-dasharray={strokeStyle}
              stroke-opacity={aspect.strength || 0.7}
            />
          );
        })}
        
        <!-- Planets -->
        {Object.entries(allPositions).map(([planet, degree]) => {
          const planetPos = calculatePosition(degree, radius - 25);
          const sign = getSignForDegree(degree);
          const signColor = elementColors[sign.element];
          return (
            <g>
              <!-- Planet symbol -->
              <circle 
                cx={planetPos.x} 
                cy={planetPos.y} 
                r="10" 
                fill="white" 
                stroke={signColor} 
                stroke-width="1.5" 
              />
              <text 
                x={planetPos.x} 
                y={planetPos.y} 
                font-size="10" 
                text-anchor="middle" 
                dominant-baseline="middle"
                font-family="Arial Unicode MS, sans-serif"
                fill={planet === 'Rising' ? '#ff6b6b' : '#333'}
              >
                {planetSymbols[planet] || planet.charAt(0)}
              </text>
              
              <!-- Planet degree indicator on outer circle -->
              <circle 
                cx={calculatePosition(degree).x} 
                cy={calculatePosition(degree).y} 
                r="2" 
                fill={signColor} 
              />
            </g>
          );
        })}
        
        <!-- Center point -->
        <circle cx={centerX} cy={centerY} r="3" fill="#333" />
      </svg>
    </div>
    
    <div class="chart-info">
      <div class="info-section">
        <h4>Elemental Balance</h4>
        <div class="elemental-bars">
          {Object.entries(elemBalance).map(([element, percentage]) => (
            <div class="element-bar-wrapper">
              <div class="element-label">
                <IconProvider name={element.toLowerCase()} size={16} color={elementColors[element]} />
                <span>{element}</span>
              </div>
              <div class="element-bar-container">
                <div 
                  class="element-bar" 
                  style={`width: ${percentage}%; background-color: ${elementColors[element]};`}
                ></div>
                <span class="element-percentage">{percentage}%</span>
              </div>
            </div>
          ))}
        </div>
      </div>
      
      <div class="info-section">
        <h4>Alchemical Principles</h4>
        <div class="alchemical-grid">
          {Object.entries(alchemicalPrinciples).map(([principle, value]) => (
            <div class="alchemical-item">
              <div class="alchemical-name">{principle}</div>
              <div class="alchemical-value">{value}</div>
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>
  
  <!-- Legend -->
  <div class="chart-legend">
    {Object.entries(allPositions).map(([planet, degree]) => {
      const sign = getSignForDegree(degree);
      const signDegree = getDegreeInSign(degree);
      return (
        <div class="legend-item" style={`--element-color: ${elementColors[sign.element]};`}>
          <span class="planet-symbol">{planetSymbols[planet] || planet.charAt(0)}</span>
          <span class="planet-name">{planet}</span>
          <span class="planet-position">
            {sign.symbol} {signDegree}° ({sign.name})
          </span>
        </div>
      );
    })}
  </div>
</div>

<style>
  .astro-chart-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 1rem;
    font-family: system-ui, sans-serif;
    width: 100%;
    max-width: 900px;
    margin: 0 auto;
  }
  
  h3 {
    margin-bottom: 1rem;
    font-weight: 500;
    text-align: center;
  }
  
  h4 {
    font-size: 1rem;
    margin: 0 0 0.75rem 0;
    color: #333;
  }
  
  .chart-with-info {
    display: flex;
    flex-direction: row;
    width: 100%;
    gap: 1rem;
    align-items: flex-start;
    margin-bottom: 1rem;
  }
  
  .chart-svg-container {
    flex: 1;
    min-width: 0;
    display: flex;
    justify-content: center;
  }
  
  .chart-info {
    width: 200px;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }
  
  .info-section {
    background-color: #f9f9fb;
    border-radius: 8px;
    padding: 1rem;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  }
  
  .elemental-bars {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  
  .element-bar-wrapper {
    width: 100%;
  }
  
  .element-label {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    margin-bottom: 0.25rem;
    font-size: 0.85rem;
  }
  
  .element-bar-container {
    width: 100%;
    height: 8px;
    background-color: #eee;
    border-radius: 4px;
    position: relative;
    overflow: hidden;
  }
  
  .element-bar {
    height: 100%;
    border-radius: 4px;
    transition: width 0.3s ease;
  }
  
  .element-percentage {
    position: absolute;
    right: 0;
    top: -18px;
    font-size: 0.7rem;
    color: #666;
  }
  
  .alchemical-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 0.5rem;
  }
  
  .alchemical-item {
    background-color: #fff;
    border-radius: 6px;
    padding: 0.5rem;
    text-align: center;
    box-shadow: 0 1px 2px rgba(0,0,0,0.05);
  }
  
  .alchemical-name {
    font-size: 0.75rem;
    color: #666;
    margin-bottom: 0.25rem;
  }
  
  .alchemical-value {
    font-size: 1rem;
    font-weight: 600;
  }
  
  .chart-legend {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: 0.5rem;
    margin-top: 1rem;
    max-width: 100%;
    width: 100%;
    border-top: 1px solid #eee;
    padding-top: 1rem;
  }
  
  .legend-item {
    display: flex;
    align-items: center;
    font-size: 0.875rem;
    padding: 0.35rem 0.5rem;
    border-radius: 4px;
    border-left: 3px solid var(--element-color, #ccc);
    background-color: #f9f9fb;
  }
  
  .planet-symbol {
    font-size: 1.1rem;
    margin-right: 0.25rem;
    width: 1.5rem;
    text-align: center;
  }
  
  .planet-name {
    margin-right: 0.5rem;
    font-weight: 500;
    width: 60px;
  }
  
  .planet-position {
    color: #555;
    font-variant-numeric: tabular-nums;
  }
  
  @media (max-width: 768px) {
    .chart-with-info {
      flex-direction: column;
    }
    
    .chart-info {
      width: 100%;
    }
    
    .chart-legend {
      grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    }
  }
</style> 