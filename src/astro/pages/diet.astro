---
// A simplified page showing dietary recommendations based on astrology

import { 
  getAccuratePlanetaryPositions,
  validatePositions
} from '../../../src/utils/accurateAstronomy';

// Get current moment data
const currentDate = new Date();
const planetPositions = getAccuratePlanetaryPositions(currentDate);
validatePositions(planetPositions);

// Get zodiac sign for a degree
const getZodiacSign = (degree) => {
  const signs = [
    { name: 'aries', symbol: '♈', start: 0, element: 'Fire', foods: ['Red meat', 'Spicy foods', 'Red peppers', 'Garlic', 'Onions'] },
    { name: 'taurus', symbol: '♉', start: 30, element: 'Earth', foods: ['Root vegetables', 'Dairy products', 'Bread', 'Pasta', 'Rice'] },
    { name: 'gemini', symbol: '♊', start: 60, element: 'Air', foods: ['Leafy greens', 'Nuts', 'Seeds', 'Beans', 'Light grains'] },
    { name: 'cancer', symbol: '♋', start: 90, element: 'Water', foods: ['Seafood', 'Soups', 'Melons', 'Cucumber', 'Squash'] },
    { name: 'leo', symbol: '♌', start: 120, element: 'Fire', foods: ['Sunflower seeds', 'Citrus fruits', 'Corn', 'Olive oil', 'Honey'] },
    { name: 'virgo', symbol: '♍', start: 150, element: 'Earth', foods: ['Whole grains', 'Yogurt', 'Nuts', 'Seeds', 'Vegetables'] },
    { name: 'Libra', symbol: '♎', start: 180, element: 'Air', foods: ['Apples', 'Berries', 'Chocolate', 'Wine', 'Balanced meals'] },
    { name: 'Scorpio', symbol: '♏', start: 210, element: 'Water', foods: ['Dark chocolate', 'Red wine', 'Beets', 'Tomatoes', 'Fermented foods'] },
    { name: 'sagittarius', symbol: '♐', start: 240, element: 'Fire', foods: ['Exotic spices', 'International cuisine', 'Proteins', 'Fruits', 'Vegetables'] },
    { name: 'capricorn', symbol: '♑', start: 270, element: 'Earth', foods: ['Root vegetables', 'Potatoes', 'Mushrooms', 'Hearty grains', 'Slow-cooked meals'] },
    { name: 'aquarius', symbol: '♒', start: 300, element: 'Air', foods: ['Alternative foods', 'Plant proteins', 'Unique vegetables', 'Fermented drinks', 'Novel foods'] },
    { name: 'pisces', symbol: '♓', start: 330, element: 'Water', foods: ['Fish', 'Seaweed', 'Water-rich fruits', 'Hydrating vegetables', 'Herbal teas'] }
  ];
  
  const signIndex = Math.floor((degree % 360) / 30);
  return signs[signIndex];
};

// Calculate the current lunar phase (simplified)
const getLunarPhase = () => {
  const today = new Date();
  const dayOfYear = Math.floor((today - new Date(today.getFullYear(), 0, 0)) / (1000 * 60 * 60 * 24));
  const phaseNum = (dayOfYear % 29.5) / 29.5;
  
  if (phaseNum < 0.125) return { name: "New Moon", diet: "Light foods, fasting, cleansing" };
  if (phaseNum < 0.25) return { name: "Waxing Crescent", diet: "Seeds, sprouts, leafy greens" };
  if (phaseNum < 0.375) return { name: "First Quarter", diet: "Proteins, nuts, whole grains" };
  if (phaseNum < 0.5) return { name: "Waxing Gibbous", diet: "Hearty meals, root vegetables" };
  if (phaseNum < 0.625) return { name: "Full Moon", diet: "Balanced meals, hydration" };
  if (phaseNum < 0.75) return { name: "Waning Gibbous", diet: "Fruits, vegetables, fiber" };
  if (phaseNum < 0.875) return { name: "Last Quarter", diet: "Soups, stews, warm foods" };
  return { name: "Waning Crescent", diet: "Light meals, herbal teas" };
};

// Calculate elemental balance
const calculateElementalBalance = () => {
  const elements = { Fire: 0, Earth: 0, Air: 0, Water: 0 };
  let total = 0;
  
  Object.entries(planetPositions).forEach(([planet, degree]) => {
    const sign = getZodiacSign(degree);
    let weight = 1;
    if (planet === 'Sun' || planet === 'Moon') weight = 3;
    
    elements[sign.element] += weight;
    total += weight;
  });
  
  return {
    Fire: Math.round((elements.Fire / total) * 100),
    Earth: Math.round((elements.Earth / total) * 100),
    Air: Math.round((elements.Air / total) * 100),
    Water: Math.round((elements.Water / total) * 100),
  };
};

const elementalBalance = calculateElementalBalance();
const lunarPhase = getLunarPhase();

// Get dietary recommendations based on elemental balance
const getDietaryRecommendations = () => {
  const recommendations = [];
  
  // Find dominant element
  const sortedElements = Object.entries(elementalBalance).sort((a, b) => b[1] - a[1]);
  const dominantElement = sortedElements[0][0];
  const lowestElement = sortedElements[3][0];
  
  // Element-based recommendations
  const elementFoods = {
    Fire: ["Warm spices", "Protein-rich foods", "Cooked vegetables", "Stimulating herbs", "Red and orange foods"],
    Earth: ["Root vegetables", "Grains", "Nuts", "Seeds", "Hearty meals"],
    Air: ["Leafy greens", "Raw foods", "Light snacks", "Aromatic herbs", "Colorful vegetables"],
    Water: ["Soups", "Stews", "Hydrating fruits", "Fish", "Seaweed"]
  };
  
  recommendations.push({
    title: `Focus on ${dominantElement} Element Foods`,
    description: `With ${dominantElement} being your dominant element (${elementalBalance[dominantElement]}%), focus on these foods:`,
    items: elementFoods[dominantElement]
  });
  
  recommendations.push({
    title: `Balance with ${lowestElement} Element Foods`,
    description: `Your ${lowestElement} element is low (${elementalBalance[lowestElement]}%), include some of these foods:`,
    items: elementFoods[lowestElement]
  });
  
  // Sun sign recommendation
  const sunSign = getZodiacSign(planetPositions['Sun']);
  recommendations.push({
    title: `${sunSign.name} Sun Sign Foods`,
    description: `As a ${sunSign.name} sun sign, these foods resonate with your core energy:`,
    items: sunSign.foods
  });
  
  // Moon sign recommendation
  const moonSign = getZodiacSign(planetPositions['Moon']);
  recommendations.push({
    title: `${moonSign.name} Moon Sign Foods`,
    description: `Your moon is in ${moonSign.name}, nourish your emotional self with:`,
    items: moonSign.foods
  });
  
  // Lunar phase recommendation
  recommendations.push({
    title: `${lunarPhase.name} Phase Diet`,
    description: `During the current ${lunarPhase.name} phase, focus on:`,
    items: lunarPhase.diet.split(', ')
  });
  
  return recommendations;
};

const dietaryRecommendations = getDietaryRecommendations();

// Format date for display
const formattedDate = new Intl.DateTimeFormat('en-US', {
  weekday: 'long',
  year: 'numeric',
  month: 'long',
  day: 'numeric',
}).format(new Date());

// Planet symbols
const planetSymbols = {
  'Sun': '☉',
  'Moon': '☽',
  'Mercury': '☿',
  'Venus': '♀',
  'Mars': '♂',
  'Jupiter': '♃',
  'Saturn': '♄'
};
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Astrological Dietary Recommendations</title>
  </head>
  <body>
    <header>
      <h1>What to Eat Next?</h1>
      <p class="subtitle">Astrological Dietary Recommendations</p>
      <p class="date">{formattedDate}</p>
    </header>
    
    <main>
      <section class="lunar-phase">
        <h2>Current Lunar Phase</h2>
        <div class="phase-info">
          <div class="phase-name">{lunarPhase.name}</div>
          <div class="phase-recommendation">{lunarPhase.diet}</div>
        </div>
      </section>
      
      <section class="elemental-balance">
        <h2>Your Elemental Balance</h2>
        <div class="elements-grid">
          <div class="element-bar" data-element="fire">
            <div class="element-label">Fire</div>
            <div class="bar-container">
              <div class="bar" style={`width: ${elementalBalance.Fire}%`}></div>
            </div>
            <div class="element-percentage">{elementalBalance.Fire}%</div>
          </div>
          <div class="element-bar" data-element="earth">
            <div class="element-label">Earth</div>
            <div class="bar-container">
              <div class="bar" style={`width: ${elementalBalance.Earth}%`}></div>
            </div>
            <div class="element-percentage">{elementalBalance.Earth}%</div>
          </div>
          <div class="element-bar" data-element="air">
            <div class="element-label">Air</div>
            <div class="bar-container">
              <div class="bar" style={`width: ${elementalBalance.Air}%`}></div>
            </div>
            <div class="element-percentage">{elementalBalance.Air}%</div>
          </div>
          <div class="element-bar" data-element="water">
            <div class="element-label">Water</div>
            <div class="bar-container">
              <div class="bar" style={`width: ${elementalBalance.Water}%`}></div>
            </div>
            <div class="element-percentage">{elementalBalance.Water}%</div>
          </div>
        </div>
      </section>
      
      <section class="planetary-positions">
        <h2>Key Planetary Positions</h2>
        <div class="planets-grid">
          {Object.entries(planetPositions).slice(0, 4).map(([planet, degree]) => {
            const sign = getZodiacSign(degree);
            const degreeInSign = Math.floor(degree % 30);
            return (
              <div class="planet-card" data-element={sign.element.toLowerCase()}>
                <div class="planet-header">
                  <span class="planet-symbol">{planetSymbols[planet]}</span>
                  <span class="planet-name">{planet}</span>
                </div>
                <div class="planet-position">
                  <span class="sign-symbol">{sign.symbol}</span>
                  <span class="sign-name">{sign.name}</span>
                  <span class="degree">{degreeInSign}°</span>
                </div>
                <div class="element">{sign.element}</div>
              </div>
            );
          })}
        </div>
      </section>
      
      <section class="dietary-recommendations">
        <h2>Your Dietary Recommendations</h2>
        <div class="recommendations-grid">
          {dietaryRecommendations.map((rec) => (
            <div class="recommendation-card">
              <h3>{rec.title}</h3>
              <p>{rec.description}</p>
              <ul>
                {rec.items.map((item) => (
                  <li>{item}</li>
                ))}
              </ul>
            </div>
          ))}
        </div>
      </section>
    </main>
    
    <footer>
      <div class="footer-content">
        <p>All recommendations are based on simplified astrological calculations</p>
        <nav>
          <a href="/astro/current-chart">View Full Chart</a>
        </nav>
      </div>
    </footer>
    
    <style>
      :root {
        --color-fire: #ff5722;
        --color-earth: #4caf50;
        --color-air: #03a9f4;
        --color-water: #9c27b0;
        
        --color-bg: #f8f9fa;
        --color-card: #fff;
        --color-text: #333;
      }
      
      * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      }
      
      body {
        font-family: system-ui, sans-serif;
        background-color: var(--color-bg);
        color: var(--color-text);
        line-height: 1.6;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
      }
      
      header {
        background: linear-gradient(135deg, #5762d5, #8f44fd);
        color: white;
        padding: 2rem;
        border-radius: 12px;
        text-align: center;
        margin-bottom: 2rem;
      }
      
      h1 {
        margin-bottom: 0.25rem;
      }
      
      .subtitle {
        font-size: 1.2rem;
        margin-bottom: 0.5rem;
      }
      
      .date {
        opacity: 0.9;
        font-size: 0.9rem;
      }
      
      section {
        background-color: var(--color-card);
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        margin-bottom: 2rem;
      }
      
      h2 {
        margin-bottom: 1rem;
        color: #5762d5;
        text-align: center;
      }
      
      h3 {
        color: #5762d5;
        margin-bottom: 0.5rem;
      }
      
      .phase-info {
        text-align: center;
      }
      
      .phase-name {
        font-size: 1.5rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
      }
      
      .phase-recommendation {
        font-style: italic;
      }
      
      .elements-grid {
        display: grid;
        gap: 1rem;
      }
      
      .element-bar {
        display: flex;
        align-items: center;
        gap: 0.5rem;
      }
      
      .element-label {
        width: 50px;
        font-weight: bold;
      }
      
      .bar-container {
        flex: 1;
        height: 10px;
        background-color: #eee;
        border-radius: 5px;
        overflow: hidden;
      }
      
      .bar {
        height: 100%;
        border-radius: 5px;
      }
      
      .element-bar[data-element="fire"] .bar {
        background-color: var(--color-fire);
      }
      
      .element-bar[data-element="earth"] .bar {
        background-color: var(--color-earth);
      }
      
      .element-bar[data-element="air"] .bar {
        background-color: var(--color-air);
      }
      
      .element-bar[data-element="water"] .bar {
        background-color: var(--color-water);
      }
      
      .element-percentage {
        width: 40px;
        text-align: right;
        font-size: 0.9rem;
      }
      
      .planets-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 1rem;
      }
      
      .planet-card {
        border-radius: 8px;
        padding: 1rem;
        border-left: 3px solid #ccc;
        background-color: #f9f9fb;
      }
      
      .planet-card[data-element="fire"] {
        border-left-color: var(--color-fire);
      }
      
      .planet-card[data-element="earth"] {
        border-left-color: var(--color-earth);
      }
      
      .planet-card[data-element="air"] {
        border-left-color: var(--color-air);
      }
      
      .planet-card[data-element="water"] {
        border-left-color: var(--color-water);
      }
      
      .planet-header {
        display: flex;
        align-items: center;
        margin-bottom: 0.5rem;
      }
      
      .planet-symbol {
        font-size: 1.2rem;
        margin-right: 0.5rem;
      }
      
      .planet-name {
        font-weight: bold;
      }
      
      .planet-position {
        display: flex;
        align-items: center;
        margin-bottom: 0.25rem;
      }
      
      .sign-symbol {
        margin-right: 0.5rem;
      }
      
      .sign-name {
        margin-right: 0.5rem;
      }
      
      .recommendations-grid {
        display: grid;
        grid-template-columns: 1fr;
        gap: 1.5rem;
      }
      
      @media (min-width: 768px) {
        .recommendations-grid {
          grid-template-columns: repeat(2, 1fr);
        }
      }
      
      .recommendation-card {
        background-color: #f9f9fb;
        border-radius: 8px;
        padding: 1.25rem;
      }
      
      .recommendation-card p {
        margin-bottom: 1rem;
      }
      
      ul {
        padding-left: 1.5rem;
      }
      
      li {
        margin-bottom: 0.25rem;
      }
      
      footer {
        text-align: center;
        margin-top: 2rem;
        padding: 1.5rem;
        color: #666;
        font-size: 0.9rem;
        border-top: 1px solid #eee;
      }
      
      a {
        color: #5762d5;
        text-decoration: none;
      }
      
      a:hover {
        text-decoration: underline;
      }
    </style>
  </body>
</html> 