'use client';
import React from 'react';

import { planetaryPositionsService } from '@/services/PlanetaryPositionsService';
import { TelemetryDev } from '@/services/TelemetryDev';
import type { Season } from '@/types/alchemy';
import type { PlanetaryPosition } from '@/types/celestial';
import { getAlchemicalStateWithVectors } from '@/utils';
import { calculateAspects } from '@/utils/astrologyUtils';
import { createLogger } from '@/utils/logger';
import { VECTOR_CONFIG } from '@/utils/signVectors';

type Props = {
  planetaryPositions?: Record<string, PlanetaryPosition>
  aspects?: Array<{
    planet1: string,
    planet2: string,
    type?: string;
    aspectType?: string;
    orb?: number
  }>
  season?: Season;
  governing?: 'sun' | 'moon' | 'dominant' | 'ensemble'
};

export default function SignVectorPanel({
  planetaryPositions: propPositions,
  aspects,
  season,
  governing = 'dominant',
}: Props) {
  const [positions, setPositions] = React.useState<Record<string, PlanetaryPosition> | null>(
    propPositions || null,
  );
  const [mode, setMode] = React.useState<'sun' | 'moon' | 'dominant' | 'ensemble'>(governing);
  const [loading, setLoading] = React.useState<boolean>(!propPositions);
  const [alpha, setAlpha] = React.useState<number>(VECTOR_CONFIG.blendWeightAlpha);
  const logger = React.useMemo(() => createLogger('SignVectorPanel'), []);

  React.useEffect(() => {
    let mounted = true;
    if (!propPositions) {
      setLoading(true);
      planetaryPositionsService
        .getCurrent()
        .then(p => {
          if (mounted) setPositions(p as unknown as Record<string, PlanetaryPosition>);
        })
        .finally(() => {
          if (mounted) setLoading(false);
        });
    } else {
      setPositions(propPositions);
    }
    return () => {
      mounted = false;
    };
  }, [propPositions]);

  const state = React.useMemo(() => {
    if (!positions) return null;
    // Compute aspects from current positions if not provided
    let realAspects = aspects as any;
    try {
      if (!realAspects) {
        const minimal = Object.fromEntries(
          Object.entries(positions).map(([k, v]) => [
            k,
            { sign: (v as any).sign, degree: (v as any).degree }
          ]),
        ) as Record<string, { sign: string, degree: number }>
        const { aspects: computed } = calculateAspects(minimal);
        realAspects = computed as any;
      }
    } catch (_e) {
      // aspects remain undefined on failure
    }
    // Apply dev alpha to global config
    if (process.env.NODE_ENV !== 'production') {
      VECTOR_CONFIG.blendWeightAlpha = alpha;
    }
    const res = getAlchemicalStateWithVectors({
      planetaryPositions: positions,
      aspects: realAspects,
      season,
      governing: mode
    });
    // Dev, instrumentation: log deltas
    if (process.env.NODE_ENV !== 'production') {
      const base = res.base.alchemical;
      const blended = res.blendedAlchemical;
      const deltas = {
        Spirit: Number((blended.Spirit - base.Spirit).toFixed(4)),
        Essence: Number((blended.Essence - base.Essence).toFixed(4)),
        Matter: Number((blended.Matter - base.Matter).toFixed(4)),
        Substance: Number((blended.Substance - base.Substance).toFixed(4))
      };
      TelemetryDev.recordVectorBlend(
        res.selected.sign,
        alpha,
        deltas as any,
        res.thermodynamics as any,
      );
    }
    return res;
  }, [positions, aspects, season, mode, alpha, logger]);

  if (loading || !state) {
    return (
      <div style={{ border: '1px solid #444', borderRadius: 8, padding: 12, marginTop: 12 }}>
        <div style={{ fontWeight: 600, marginBottom: 8 }}>Current Sign Expression</div>
        <div>Loading planetary positions…</div>
      </div>
    );
  }

  const { selected, blendedAlchemical, thermodynamics } = state;

  return (
    <div style={{ border: '1px solid #444', borderRadius: 8, padding: 12, marginTop: 12 }}>
      <div style={{ fontWeight: 600, marginBottom: 8 }}>Current Sign Expression</div>
      <div style={{ marginBottom: 8 }}>
        <label htmlFor='governing' style={{ marginRight: 8 }}>
          Governing:
        </label>
        
        <select id='governing' value={mode} onChange={e => setMode(e.target.value as any)}>
          <option value='dominant'>dominant</option><option value='sun'>sun</option>
          <option value='moon'>moon</option><option value='ensemble'>ensemble</option>
        </select>
      </div>
      {process.env.NODE_ENV !== 'production' && (
        <div style={{ marginBottom: 8 }}>
          <label htmlFor='alpha' style={{ marginRight: 8 }}>
            Blend α: </label>
          <input
            id='alpha'
            type='range'
            min={0}
            max={0.5}
            step={0.01}
            value={alpha}
            onChange={e => setAlpha(Number(e.target.value))}
          />
          <span style={{ marginLeft: 8 }}>{alpha.toFixed(2)}</span>
        </div>
      )}
      <div>Sign: {selected.sign}</div>
      <div>Direction: {selected.direction}</div>
      <div>Magnitude: {(selected.magnitude * 100).toFixed(1)}%</div>
      <div style={{ marginTop: 8, fontWeight: 600 }}>Vector-Adjusted ESMS</div>
      <div>Spirit: {blendedAlchemical.Spirit.toFixed(3)}</div>
      <div>Essence: {blendedAlchemical.Essence.toFixed(3)}</div>
      <div>Matter: {blendedAlchemical.Matter.toFixed(3)}</div>
      <div>Substance: {blendedAlchemical.Substance.toFixed(3)}</div>
      <div style={{ marginTop: 8, fontWeight: 600 }}>Thermodynamics</div>
      <div>Heat: {thermodynamics.heat.toFixed(4)}</div>
      <div>Entropy: {thermodynamics.entropy.toFixed(4)}</div>
      <div>Reactivity: {thermodynamics.reactivity.toFixed(4)}</div>
      <div>Greg&apos;s Energy: {thermodynamics.gregsEnergy.toFixed(4)}</div>
      <div>Kalchm: {thermodynamics.kalchm.toFixed(4)}</div>
      <div>
        Monica: {Number.isFinite(thermodynamics.monica) ? thermodynamics.monica.toFixed(4) : 'NaN'}
      </div>
    </div>
  );
}