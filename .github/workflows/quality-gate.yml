name: Quality Gate
on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

jobs:
  quality-gate:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for trend analysis

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Run Build Validation
      id: build-validation
      run: |
        echo "Running build validation..."
        if yarn build; then
          echo "Build successful"
          echo "build_success=true" >> $GITHUB_OUTPUT
        else
          echo "Build failed"
          echo "build_success=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Run Quality Assurance Suite
      id: quality-assurance
      if: steps.build-validation.outputs.build_success == 'true'
      run: |
        echo "Running comprehensive quality assurance..."
        node src/scripts/quality-gates/ci-cd-orchestrator.js full-suite --dry-run

    - name: Generate Quality Report
      id: quality-report
      run: |
        echo "Generating quality report..."
        node src/scripts/quality-gates/ci-cd-orchestrator.js status > quality-report.json
        cat quality-report.json

    - name: Upload Quality Report
      uses: actions/upload-artifact@v4
      with:
        name: quality-report-${{ github.run_number }}
        path: quality-report.json

    - name: Quality Gate Validation
      id: quality-gate-check
      run: |
        echo "Validating quality gates..."

        # Parse quality report
        PASSED=$(node -e "
          const fs = require('fs');
          try {
            const report = JSON.parse(fs.readFileSync('quality-report.json', 'utf8'));
            console.log(report.passed ? 'true' : 'false');
          } catch (e) {
            console.log('false');
          }
        ")

        if [ "$PASSED" = "true" ]; then
          echo "✅ All quality gates passed"
          echo "quality_passed=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Quality gates failed"
          echo "quality_passed=false" >> $GITHUB_OUTPUT

          # Show recommendations
          echo "Recommendations:"
          node -e "
            const fs = require('fs');
            try {
              const report = JSON.parse(fs.readFileSync('quality-report.json', 'utf8'));
              if (report.recommendations && report.recommendations.length > 0) {
                report.recommendations.forEach(rec => console.log('• ' + rec));
              }
            } catch (e) {
              console.log('Failed to parse recommendations');
            }
          "

          exit 1
        fi

    - name: Automated Error Processing (Optional)
      id: automated-processing
      if: failure() && github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
      run: |
        echo "Running automated error processing on main branch..."
        node src/scripts/quality-gates/ci-cd-orchestrator.js process --confirm

    - name: Create Commit for Automated Fixes
      id: create-commit
      if: steps.automated-processing.outcome == 'success'
      run: |
        echo "Checking for changes after automated processing..."

        if git diff --quiet; then
          echo "No changes to commit"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "Committing automated fixes..."
          git config --global user.name 'Phase 4 Quality Bot'
          git config --global user.email 'quality-bot@whattoeatnext.com'
          git add .
          git commit -m "🤖 Phase 4: Automated error fixes

Applied automated processors for TypeScript errors:
- TS1003, TS1005, TS1109, TS1121, TS1128
- TS1131, TS1135, TS1136
- TS1134, TS1180, TS1434, TS1442

Quality gates: ✅ PASSED"
          git push
          echo "has_changes=true" >> $GITHUB_OUTPUT
        fi

    - name: Notify on Quality Gate Failure
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## ❌ Quality Gate Failed

The automated quality assurance checks have failed. Please review the following:

### 🔍 Issues Found
- Build validation may have failed
- TypeScript errors exceed acceptable thresholds
- Code quality standards not met

### 💡 Recommendations
Check the quality report artifact for detailed analysis and specific recommendations.

### 🛠️ Automated Fixes
For main/master branches, automated processors may attempt to fix common errors. If this is a feature branch, please:

1. Run \`node src/scripts/quality-gates/ci-cd-orchestrator.js analyze\` locally
2. Address the reported issues
3. Commit the fixes

### 📊 Quality Metrics
- **Target:** <1,000 total errors
- **Critical Errors:** Must be 0
- **Auto-fixable:** 70%+ of ESLint issues

For more details, see the [Phase 4 Quality Assurance Guide](docs/phase4-quality-assurance.md).`
          })

    - name: Success Notification
      if: success()
      run: |
        echo "🎉 Quality gates passed successfully!"
        echo "✅ Build: Passed"
        echo "✅ Quality Checks: Passed"
        echo "✅ Error Thresholds: Met"
        echo "🚀 Ready for deployment"

  performance-monitoring:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    needs: quality-gate

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Performance Benchmarking
      run: |
        echo "Running performance benchmarks..."

        # Build performance
        BUILD_START=$(date +%s)
        yarn build
        BUILD_END=$(date +%s)
        BUILD_TIME=$((BUILD_END - BUILD_START))

        # Lint performance
        LINT_START=$(date +%s)
        yarn lint --quiet
        LINT_END=$(date +%s)
        LINT_TIME=$((LINT_END - LINT_START))

        # Type check performance
        TSC_START=$(date +%s)
        yarn tsc --noEmit
        TSC_END=$(date +%s)
        TSC_TIME=$((TSC_END - TSC_START))

        # Output metrics
        echo "build_time_seconds=$BUILD_TIME" >> $GITHUB_ENV
        echo "lint_time_seconds=$LINT_TIME" >> $GITHUB_ENV
        echo "tsc_time_seconds=$TSC_TIME" >> $GITHUB_ENV

        echo "Performance Metrics:"
        echo "• Build Time: ${BUILD_TIME}s"
        echo "• Lint Time: ${LINT_TIME}s"
        echo "• Type Check Time: ${TSC_TIME}s"

    - name: Upload Performance Metrics
      uses: actions/upload-artifact@v4
      with:
        name: performance-metrics-${{ github.run_number }}
        path: |
          .quality-gates/metrics/
          .quality-gates/reports/

  trend-analysis:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    needs: quality-gate

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Trend Analysis
      run: |
        echo "Analyzing error trends..."

        # Get recent commits
        RECENT_COMMITS=$(git log --oneline -10 --pretty=format:"%h %s")

        # Analyze error patterns over time
        echo "Recent commits:"
        echo "$RECENT_COMMITS"

        # Check for error introduction patterns
        if echo "$RECENT_COMMITS" | grep -q "error\|fix\|bug"; then
          echo "⚠️ Recent commits contain error-related changes"
          echo "trend_alert=true" >> $GITHUB_ENV
        else
          echo "✅ No recent error-related commits detected"
          echo "trend_alert=false" >> $GITHUB_ENV
        fi

    - name: Quality Trend Alert
      if: env.trend_alert == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '📊 Quality Trend Alert: Error Patterns Detected',
            body: `## Quality Trend Alert

Recent commits show patterns that may indicate quality degradation:

### 🔍 Detected Patterns
- Error-related commits in recent history
- Potential increase in error introduction rate

### 📈 Trend Analysis
- **Recent Activity:** Multiple error/bug fix commits detected
- **Risk Level:** Medium - Monitor closely

### 💡 Recommendations
1. Review recent changes for error introduction patterns
2. Consider additional training on Phase 4 processors
3. Monitor error rates over next few commits

### 🛠️ Automated Actions
The quality assurance system will continue monitoring and may trigger automated fixes if error thresholds are exceeded.

---
*Generated by Phase 4 Quality Assurance Pipeline*`,
            labels: ['quality-alert', 'trend-analysis']
          })

  dependency-security:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Security Audit
      run: |
        echo "Running dependency security audit..."
        yarn audit --audit-level moderate

    - name: Outdated Dependencies Check
      run: |
        echo "Checking for outdated dependencies..."
        yarn outdated || true

    - name: Upload Security Report
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-${{ github.run_number }}
        path: |
          yarn-audit-results.json
          yarn-outdated-results.json
