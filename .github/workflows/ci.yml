name: CI/CD - Advanced Pipeline

on:
  push:
    branches: [main, develop, cancer]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_ENV: test
  NEXT_PUBLIC_ENABLE_ASTRO_DEBUG: false
  NEXT_PUBLIC_API_CACHE_TIME: 3600
  CI: true
  NODE_OPTIONS: "--max-old-space-size=4096"

jobs:
  # Security and dependency scanning
  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile --network-timeout 300000

      - name: Run yarn audit
        run: yarn audit --level moderate || echo "Audit completed with warnings"

      - name: Run security check
        run: yarn security:check || echo "Security check completed with warnings"

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Linting and code quality
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile --network-timeout 300000

      - name: Run ESLint
        run: yarn lint

      - name: Run enhanced linting
        run: yarn lint:enhanced-v3 --dry-run || echo "Enhanced linting completed"

      - name: Run AI-assisted pattern detection
        run: yarn lint:ai-analyze || echo "AI analysis completed"

      - name: Run Prettier check
        run: yarn format --check || echo "Prettier check completed"

  # TypeScript checking (regular and strict)
  type-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile --network-timeout 300000

      - name: Run TypeScript type checking
        run: yarn type-check

      - name: Run strict TypeScript checking
        run: yarn type-check:strict || echo "Strict type checking completed with warnings"

      - name: Generate error report
        run: |
          echo "## TypeScript Error Report" >> $GITHUB_STEP_SUMMARY
          echo "Regular type check errors:" >> $GITHUB_STEP_SUMMARY
          yarn tsc --noEmit --skipLibCheck 2>&1 | grep -c "error TS" || echo "0" >> $GITHUB_STEP_SUMMARY

  # Testing with coverage
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile --network-timeout 300000

      - name: Create test environment
        run: |
          echo "NEXT_PUBLIC_ENABLE_ASTRO_DEBUG=false" > .env.local
          echo "NEXT_PUBLIC_API_CACHE_TIME=3600" >> .env.local
          echo "NODE_ENV=test" >> .env.local

      - name: Run tests with coverage
        run: yarn test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  # Build and optimization
  build:
    runs-on: ubuntu-latest
    needs: [lint, type-check, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile --network-timeout 300000

      - name: Create build environment
        run: |
          echo "NEXT_PUBLIC_ENABLE_ASTRO_DEBUG=false" > .env.local
          echo "NEXT_PUBLIC_API_CACHE_TIME=3600" >> .env.local
          echo "NODE_ENV=production" >> .env.local

      - name: Build application
        run: yarn build

      - name: Build status check
        run: yarn build:status || echo "Build status check completed"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: .next/
          retention-days: 7

      - name: Generate build report
        run: |
          echo "## Build Report" >> $GITHUB_STEP_SUMMARY
          echo "Build completed successfully!" >> $GITHUB_STEP_SUMMARY
          ls -la .next/ >> $GITHUB_STEP_SUMMARY

  # Turborepo build (enhanced build system)
  turbo-build:
    runs-on: ubuntu-latest
    needs: [lint, type-check, test]
    if: contains(github.event.head_commit.message, '[turbo]') || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile --network-timeout 300000

      - name: Run Turbo builds
        run: |
          yarn turbo:build || echo "Turbo build completed"
          yarn turbo:lint || echo "Turbo lint completed"
          yarn turbo:type-check || echo "Turbo type-check completed"

  # Docker build and test
  docker-build:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and test Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile
          target: test
          push: false
          tags: whattoeatnext:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build production Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile
          push: false
          tags: whattoeatnext:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker container
        run: |
          docker run --name test-container -d -p 3000:3000 whattoeatnext:latest
          sleep 10
          docker logs test-container
          docker stop test-container
          docker rm test-container

  # Deployment to Vercel (Preview)
  deploy-preview:
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.event_name == 'pull_request'
    environment: preview
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel (Preview)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ github.repository_owner }}

      - name: Comment deployment URL
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 Preview deployment completed! Check the Vercel dashboard for the URL.'
            })

  # Deployment to Vercel (Production)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, security, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ github.repository_owner }}

  # Performance monitoring with Lighthouse
  lighthouse:
    runs-on: ubuntu-latest
    needs: [deploy-preview, deploy-production]
    if: always() && (needs.deploy-preview.result == 'success' || needs.deploy-production.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for deployment
        run: sleep 30

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://what-to-eat-next.vercel.app
            https://what-to-eat-next.vercel.app/what-to-eat-next
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Error monitoring and reporting
  error-monitoring:
    runs-on: ubuntu-latest
    needs: [build, type-check]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Generate comprehensive error report
        run: |
          echo "# 📊 Comprehensive Error Analysis" >> error-report.md
          echo "## TypeScript Errors" >> error-report.md
          yarn tsc --noEmit --skipLibCheck 2>&1 | grep -c "error TS" || echo "0" >> error-report.md
          echo "## Lint Warnings" >> error-report.md
          yarn lint 2>&1 | grep -c "warning" || echo "0" >> error-report.md
          echo "## Build Status" >> error-report.md
          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ Build: SUCCESS" >> error-report.md
          else
            echo "❌ Build: FAILED" >> error-report.md
          fi

      - name: Upload error report
        uses: actions/upload-artifact@v4
        with:
          name: error-report
          path: error-report.md 