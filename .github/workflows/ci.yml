name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, master]
  pull_request:
    branches: [main, develop, master]

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  lint-and-test:
    name: 🔍 Lint and Test
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: 🔧 Enable Corepack
        run: corepack enable

      - name: 📚 Install dependencies
        run: yarn install --frozen-lockfile

      - name: ⚡ Install Turbo globally
        run: yarn global add turbo

      - name: 💾 Cache Turbo
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: 🔍 Run linting
        run: yarn turbo run lint --continue || true

      - name: 🔎 Run type checking
        run: yarn turbo run type-check --continue || true

      - name: 🧪 Run tests
        run: yarn turbo run test --continue || true

  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: 🔧 Enable Corepack
        run: corepack enable

      - name: 📚 Install dependencies
        run: yarn install --frozen-lockfile

      - name: ⚡ Install Turbo globally
        run: yarn global add turbo

      - name: 🏗️ Build application
        run: yarn build

  deploy-preview:
    name: 🚀 Deploy Preview
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: 🔧 Enable Corepack
        run: corepack enable

      - name: 📚 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🌐 Install Vercel CLI
        run: yarn global add vercel@latest

      - name: 🔗 Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🏗️ Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🚀 Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview_url=$url" >> $GITHUB_OUTPUT

      - name: 💬 Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 **Preview deployment ready!**\n\n✨ **Live Preview:** ${{ steps.deploy.outputs.preview_url }}\n\n---\n*Deployed from commit ${{ github.sha }}*'
            })

  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: 🔧 Enable Corepack
        run: corepack enable

      - name: 📚 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🌐 Install Vercel CLI
        run: yarn global add vercel@latest

      - name: 🔗 Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🏗️ Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🌟 Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }} 