name: Release

on:
  push:
    tags:
      - 'v*'

env:
  NODE_ENV: production
  CI: true

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile --network-timeout 300000

      - name: Create release environment
        run: |
          echo "NEXT_PUBLIC_ENABLE_ASTRO_DEBUG=false" > .env.local
          echo "NEXT_PUBLIC_API_CACHE_TIME=3600" >> .env.local
          echo "NODE_ENV=production" >> .env.local

      - name: Run tests
        run: yarn test --passWithNoTests

      - name: Build application
        run: yarn build

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from commits since last tag
          git log $(git describe --tags --abbrev=0)..HEAD --oneline > CHANGELOG.md
          echo "## What's Changed" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"- %s" >> CHANGELOG.md
          
          # Read the changelog content for the next step
          CHANGELOG_CONTENT=$(cat CHANGELOG.md)
          echo "changelog_content<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update Release with changelog
        run: |
          # Update the release with changelog using GitHub API
          RELEASE_ID="${{ steps.create_release.outputs.id }}"
          CHANGELOG_CONTENT="${{ steps.changelog.outputs.changelog_content }}"
          
          curl -X PATCH \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID \
            -d "{
              \"body\": \"## What's Changed\\n\\n$CHANGELOG_CONTENT\\n\\n## Installation\\n\\n\`\`\`bash\\nyarn install\\nyarn build\\nyarn start\\n\`\`\`\"
            }"

  # Deploy to production after release
  deploy-release:
    runs-on: ubuntu-latest
    needs: release
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel (Production Release)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

  # Notify stakeholders
  notify:
    runs-on: ubuntu-latest
    needs: [release, deploy-release]
    if: always()
    steps:
      - name: Notify release completion
        run: |
          echo "Release ${{ github.ref }} has been deployed successfully!"
          echo "Production URL: https://what-to-eat-next.vercel.app"
          echo "Release Notes: https://github.com/gregcastro23/WhatToEatNext/releases/tag/${{ github.ref }}" 