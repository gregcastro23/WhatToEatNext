# Production Deployment Pipeline for alchm.kitchen
# Comprehensive CI/CD with security scanning, testing, and automated deployment

name: Production Deploy

on:
  push:
    branches: [main, master]
    tags: ['v*']
  pull_request:
    branches: [main, master]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: alchm-kitchen

jobs:
  # ==========================================
  # CODE QUALITY AND SECURITY CHECKS
  # ==========================================
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run security audit
        run: yarn audit --level high

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript,typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Run ESLint Security
        run: |
          yarn add --dev eslint-plugin-security
          yarn eslint --ext .ts,.js --config .eslintrc.security.json src/

  dependency-check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # ==========================================
  # BUILD AND TEST
  # ==========================================
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [alchemical-core, kitchen-intelligence, websocket-service]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run TypeScript compilation
        run: yarn build

      - name: Run unit tests
        run: yarn test --coverage --verbose
        env:
          NODE_ENV: test

      - name: Run integration tests
        run: yarn test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: ${{ matrix.service }}

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            dist/
            node_modules/
          key: build-${{ matrix.service }}-${{ github.sha }}

  # ==========================================
  # CONTAINER BUILD AND SECURITY SCAN
  # ==========================================
  container-build:
    name: Build and Scan Containers
    runs-on: ubuntu-latest
    needs: [build-and-test, security-audit]
    strategy:
      matrix:
        service: [alchemical-core, kitchen-intelligence, websocket-service]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build container image
        uses: docker/build-push-action@v5
        with:
          context: ./backend/${{ matrix.service }}_service
          file: ./backend/${{ matrix.service }}_service/Dockerfile.production
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            BUILD_COMMIT=${{ github.sha }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run container structure test
        run: |
          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
          chmod +x container-structure-test-linux-amd64
          ./container-structure-test-linux-amd64 test --image ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}:${{ github.sha }} --config .github/container-tests/${{ matrix.service }}.yaml

      - name: Push container image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: ./backend/${{ matrix.service }}_service
          file: ./backend/${{ matrix.service }}_service/Dockerfile.production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ==========================================
  # INFRASTRUCTURE VALIDATION
  # ==========================================
  infrastructure-test:
    name: Infrastructure Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Init
        run: terraform init
        working-directory: ./infrastructure

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./infrastructure

      - name: Terraform Plan
        run: terraform plan -no-color
        working-directory: ./infrastructure
        env:
          TF_VAR_environment: staging

      - name: Run Checkov security scan
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ./infrastructure
          framework: terraform
          soft_fail: false
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov-results.sarif

  # ==========================================
  # PERFORMANCE TESTING
  # ==========================================
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [container-build]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup performance test environment
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: Run load tests with k6
        uses: grafana/k6-action@v0.3.0
        with:
          filename: tests/performance/load-test.js
        env:
          API_BASE_URL: http://localhost:8000

      - name: Run stress tests
        run: |
          npm install -g artillery
          artillery run tests/performance/stress-test.yml

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: tests/performance/results/

      - name: Cleanup test environment
        if: always()
        run: docker-compose -f docker-compose.test.yml down

  # ==========================================
  # STAGING DEPLOYMENT
  # ==========================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [container-build, infrastructure-test]
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config

      - name: Deploy to staging
        run: |
          kubectl apply -f k8s/staging/
          kubectl set image deployment/alchemical-core alchemical-core=${{ env.REGISTRY }}/${{ github.repository }}/alchemical-core:${{ github.sha }}
          kubectl set image deployment/kitchen-intelligence kitchen-intelligence=${{ env.REGISTRY }}/${{ github.repository }}/kitchen-intelligence:${{ github.sha }}
          kubectl set image deployment/websocket-service websocket-service=${{ env.REGISTRY }}/${{ github.repository }}/websocket-service:${{ github.sha }}

      - name: Wait for deployment
        run: |
          kubectl rollout status deployment/alchemical-core --timeout=300s
          kubectl rollout status deployment/kitchen-intelligence --timeout=300s
          kubectl rollout status deployment/websocket-service --timeout=300s

      - name: Run smoke tests
        run: |
          sleep 60
          yarn test:smoke
        env:
          API_BASE_URL: https://staging-api.alchm.kitchen

  # ==========================================
  # PRODUCTION DEPLOYMENT
  # ==========================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging, performance-test]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.PROD_KUBE_CONFIG }}" | base64 -d > ~/.kube/config

      - name: Blue-Green Deployment
        run: |
          # Deploy to green environment
          kubectl apply -f k8s/production/green/
          kubectl set image deployment/alchemical-core-green alchemical-core=${{ env.REGISTRY }}/${{ github.repository }}/alchemical-core:${{ github.sha }}
          kubectl set image deployment/kitchen-intelligence-green kitchen-intelligence=${{ env.REGISTRY }}/${{ github.repository }}/kitchen-intelligence:${{ github.sha }}
          kubectl set image deployment/websocket-service-green websocket-service=${{ env.REGISTRY }}/${{ github.repository }}/websocket-service:${{ github.sha }}

      - name: Wait for green deployment
        run: |
          kubectl rollout status deployment/alchemical-core-green --timeout=600s
          kubectl rollout status deployment/kitchen-intelligence-green --timeout=600s
          kubectl rollout status deployment/websocket-service-green --timeout=600s

      - name: Health check green environment
        run: |
          sleep 60
          yarn test:health-check
        env:
          API_BASE_URL: https://green-api.alchm.kitchen

      - name: Switch traffic to green
        run: |
          kubectl patch service alchemical-core -p '{"spec":{"selector":{"version":"green"}}}'
          kubectl patch service kitchen-intelligence -p '{"spec":{"selector":{"version":"green"}}}'
          kubectl patch service websocket-service -p '{"spec":{"selector":{"version":"green"}}}'

      - name: Monitor production health
        run: |
          sleep 120
          yarn test:production-health
        env:
          API_BASE_URL: https://api.alchm.kitchen

      - name: Cleanup blue environment
        run: |
          kubectl delete deployment alchemical-core-blue || true
          kubectl delete deployment kitchen-intelligence-blue || true
          kubectl delete deployment websocket-service-blue || true

  # ==========================================
  # NOTIFICATION AND MONITORING
  # ==========================================
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            Production deployment ${{ job.status }}!
            Version: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Update monitoring dashboards
        run: |
          curl -X POST "${{ secrets.GRAFANA_API_URL }}/api/annotations" \
            -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "text": "Production deployment: ${{ github.ref_name }}",
              "tags": ["deployment", "production"],
              "time": ${{ github.event.head_commit.timestamp }}
            }'