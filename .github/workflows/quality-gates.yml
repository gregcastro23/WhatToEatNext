name: Quality Gates CI/CD

on:
  push:
    branches: [main, cancer, develop]
  pull_request:
    branches: [main, cancer]

env:
  NODE_ENV: test
  NEXT_PUBLIC_ENABLE_ASTRO_DEBUG: false
  NEXT_PUBLIC_API_CACHE_TIME: 3600
  CI: true
  NODE_OPTIONS: "--max-old-space-size=4096"

jobs:
  quality-validation:
    runs-on: ubuntu-latest
    name: Quality Gates Validation

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup safe directory
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'

      - name: Enable Yarn
        run: corepack enable && corepack prepare yarn@stable --activate

      - name: Create environment file
        run: |
          echo "NEXT_PUBLIC_ENABLE_ASTRO_DEBUG=false" > .env.local
          echo "NEXT_PUBLIC_API_CACHE_TIME=3600" >> .env.local
          echo "NODE_ENV=test" >> .env.local

      - name: Install dependencies
        run: yarn install --network-timeout 300000

      - name: Cache ESLint results
        uses: actions/cache@v4
        with:
          path: |
            .eslintcache
            .eslintcache-fast
            .eslint-results.json
          key: eslint-${{ runner.os }}-${{ hashFiles('**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx') }}
          restore-keys: |
            eslint-${{ runner.os }}-

      # Quality Gate 1: TypeScript Compilation
      - name: Quality Gate 1 - TypeScript Compilation
        id: typescript-check
        run: |
          echo "üîß Checking TypeScript compilation..."

          # Count TypeScript errors
          TS_ERRORS=$(yarn tsc --noEmit --skipLibCheck 2>&1 | grep -c "error TS" || echo "0")
          echo "typescript_errors=$TS_ERRORS" >> $GITHUB_OUTPUT

          echo "TypeScript Errors: $TS_ERRORS"

          # Quality gate threshold: < 100 errors (critical threshold)
          if [ "$TS_ERRORS" -gt 100 ]; then
            echo "‚ùå TypeScript Quality Gate FAILED: $TS_ERRORS errors (threshold: 100)"
            echo "typescript_gate=FAILED" >> $GITHUB_OUTPUT
            exit 1
          elif [ "$TS_ERRORS" -gt 50 ]; then
            echo "‚ö†Ô∏è  TypeScript Quality Gate WARNING: $TS_ERRORS errors (target: 0)"
            echo "typescript_gate=WARNING" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ TypeScript Quality Gate PASSED: $TS_ERRORS errors"
            echo "typescript_gate=PASSED" >> $GITHUB_OUTPUT
          fi

      # Quality Gate 2: ESLint Errors
      - name: Quality Gate 2 - ESLint Errors
        id: eslint-errors
        run: |
          echo "üßπ Checking ESLint errors..."

          # Run ESLint and capture output
          LINT_OUTPUT=$(yarn lint:ci 2>&1 || true)

          # Extract error and warning counts
          LINT_ERRORS=$(echo "$LINT_OUTPUT" | grep -o '[0-9]\+ errors' | grep -o '[0-9]\+' || echo "0")
          LINT_WARNINGS=$(echo "$LINT_OUTPUT" | grep -o '[0-9]\+ warnings' | grep -o '[0-9]\+' || echo "0")

          echo "eslint_errors=$LINT_ERRORS" >> $GITHUB_OUTPUT
          echo "eslint_warnings=$LINT_WARNINGS" >> $GITHUB_OUTPUT

          echo "ESLint Errors: $LINT_ERRORS"
          echo "ESLint Warnings: $LINT_WARNINGS"

          # Quality gate threshold: < 50 errors (critical threshold)
          if [ "$LINT_ERRORS" -gt 50 ]; then
            echo "‚ùå ESLint Errors Quality Gate FAILED: $LINT_ERRORS errors (threshold: 50)"
            echo "eslint_errors_gate=FAILED" >> $GITHUB_OUTPUT
            exit 1
          elif [ "$LINT_ERRORS" -gt 10 ]; then
            echo "‚ö†Ô∏è  ESLint Errors Quality Gate WARNING: $LINT_ERRORS errors (target: 0)"
            echo "eslint_errors_gate=WARNING" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ ESLint Errors Quality Gate PASSED: $LINT_ERRORS errors"
            echo "eslint_errors_gate=PASSED" >> $GITHUB_OUTPUT
          fi

      # Quality Gate 3: Build Validation
      - name: Quality Gate 3 - Build Validation
        id: build-check
        run: |
          echo "üèóÔ∏è  Validating build process..."

          # Attempt build and capture exit code
          if yarn build; then
            echo "‚úÖ Build Quality Gate PASSED"
            echo "build_gate=PASSED" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Build Quality Gate FAILED"
            echo "build_gate=FAILED" >> $GITHUB_OUTPUT
            exit 1
          fi

      # Quality Gate 4: Test Suite
      - name: Quality Gate 4 - Test Suite
        id: test-check
        run: |
          echo "üß™ Running test suite..."

          if yarn test --passWithNoTests --watchAll=false; then
            echo "‚úÖ Test Suite Quality Gate PASSED"
            echo "test_gate=PASSED" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Test Suite Quality Gate FAILED"
            echo "test_gate=FAILED" >> $GITHUB_OUTPUT
            exit 1
          fi

      # Quality Gate 5: Performance Validation
      - name: Quality Gate 5 - Performance Validation
        id: performance-check
        run: |
          echo "‚ö° Checking linting performance..."

          # Measure linting performance
          start_time=$(date +%s)
          yarn lint:quick > /dev/null 2>&1 || true
          end_time=$(date +%s)

          lint_duration=$((end_time - start_time))
          echo "lint_duration=$lint_duration" >> $GITHUB_OUTPUT

          echo "Linting Duration: ${lint_duration}s"

          # Performance threshold: < 60 seconds
          if [ "$lint_duration" -gt 60 ]; then
            echo "‚ö†Ô∏è  Performance Quality Gate WARNING: ${lint_duration}s (target: <30s)"
            echo "performance_gate=WARNING" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Performance Quality Gate PASSED: ${lint_duration}s"
            echo "performance_gate=PASSED" >> $GITHUB_OUTPUT
          fi

      # Generate Quality Report
      - name: Generate Quality Report
        if: always()
        run: |
          echo "## üìä Quality Gates Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Gate | Metric | Count | Status | Threshold |" >> $GITHUB_STEP_SUMMARY
          echo "|--------------|--------|-------|--------|-----------|" >> $GITHUB_STEP_SUMMARY

          # TypeScript Gate
          TS_STATUS="${{ steps.typescript-check.outputs.typescript_gate }}"
          TS_ERRORS="${{ steps.typescript-check.outputs.typescript_errors }}"
          TS_ICON="‚ùì"
          case "$TS_STATUS" in
            "PASSED") TS_ICON="‚úÖ" ;;
            "WARNING") TS_ICON="‚ö†Ô∏è" ;;
            "FAILED") TS_ICON="‚ùå" ;;
          esac
          echo "| TypeScript Compilation | Errors | $TS_ERRORS | $TS_ICON $TS_STATUS | < 100 |" >> $GITHUB_STEP_SUMMARY

          # ESLint Gate
          ESLINT_STATUS="${{ steps.eslint-errors.outputs.eslint_errors_gate }}"
          ESLINT_ERRORS="${{ steps.eslint-errors.outputs.eslint_errors }}"
          ESLINT_WARNINGS="${{ steps.eslint-errors.outputs.eslint_warnings }}"
          ESLINT_ICON="‚ùì"
          case "$ESLINT_STATUS" in
            "PASSED") ESLINT_ICON="‚úÖ" ;;
            "WARNING") ESLINT_ICON="‚ö†Ô∏è" ;;
            "FAILED") ESLINT_ICON="‚ùå" ;;
          esac
          echo "| ESLint Errors | Errors | $ESLINT_ERRORS | $ESLINT_ICON $ESLINT_STATUS | < 50 |" >> $GITHUB_STEP_SUMMARY
          echo "| ESLint Warnings | Warnings | $ESLINT_WARNINGS | ‚ÑπÔ∏è Info | < 1000 |" >> $GITHUB_STEP_SUMMARY

          # Build Gate
          BUILD_STATUS="${{ steps.build-check.outputs.build_gate }}"
          BUILD_ICON="‚ùì"
          case "$BUILD_STATUS" in
            "PASSED") BUILD_ICON="‚úÖ" ;;
            "FAILED") BUILD_ICON="‚ùå" ;;
          esac
          echo "| Build Process | Success | - | $BUILD_ICON $BUILD_STATUS | Must Pass |" >> $GITHUB_STEP_SUMMARY

          # Test Gate
          TEST_STATUS="${{ steps.test-check.outputs.test_gate }}"
          TEST_ICON="‚ùì"
          case "$TEST_STATUS" in
            "PASSED") TEST_ICON="‚úÖ" ;;
            "FAILED") TEST_ICON="‚ùå" ;;
          esac
          echo "| Test Suite | Success | - | $TEST_ICON $TEST_STATUS | Must Pass |" >> $GITHUB_STEP_SUMMARY

          # Performance Gate
          PERF_STATUS="${{ steps.performance-check.outputs.performance_gate }}"
          PERF_DURATION="${{ steps.performance-check.outputs.lint_duration }}"
          PERF_ICON="‚ùì"
          case "$PERF_STATUS" in
            "PASSED") PERF_ICON="‚úÖ" ;;
            "WARNING") PERF_ICON="‚ö†Ô∏è" ;;
          esac
          echo "| Linting Performance | Duration (s) | $PERF_DURATION | $PERF_ICON $PERF_STATUS | < 60s |" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Quality Improvement Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "$TS_ERRORS" -gt 0 ]; then
            echo "- üîß **TypeScript Errors**: Run \`yarn lint:fix:any\` to auto-fix TypeScript issues" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "$ESLINT_ERRORS" -gt 0 ]; then
            echo "- üßπ **ESLint Errors**: Run \`yarn lint:fix\` to auto-fix linting issues" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "$ESLINT_WARNINGS" -gt 1000 ]; then
            echo "- ‚ö†Ô∏è  **ESLint Warnings**: Consider running \`yarn lint:campaign\` for systematic cleanup" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "$PERF_DURATION" -gt 30 ]; then
            echo "- ‚ö° **Performance**: Consider running \`yarn lint:cache:clear\` to reset caches" >> $GITHUB_STEP_SUMMARY
          fi

      # Campaign Integration (if available)
      - name: Campaign System Integration
        if: always()
        continue-on-error: true
        run: |
          echo "üöÄ Checking campaign system integration..."

          if [ -f "src/scripts/linting-campaign-cli.cjs" ]; then
            echo "Campaign system available - generating deployment readiness report"
            yarn lint:campaign:deploy || true

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üèóÔ∏è Deployment Readiness" >> $GITHUB_STEP_SUMMARY
            echo "Campaign system integration available for automated quality improvement." >> $GITHUB_STEP_SUMMARY
          else
            echo "Campaign system not available"
          fi

  # Deployment Gate (only for main branch)
  deployment-gate:
    runs-on: ubuntu-latest
    needs: quality-validation
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    name: Deployment Quality Gate

    steps:
      - name: Deployment Readiness Check
        run: |
          echo "üöÄ Deployment Quality Gate"
          echo "All quality gates passed - deployment approved"
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üöÄ Deployment Approved" >> $GITHUB_STEP_SUMMARY
          echo "All quality gates have passed. The application is ready for deployment." >> $GITHUB_STEP_SUMMARY
