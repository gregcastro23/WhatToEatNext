// Script to fix the UnifiedIngredient interface in src/data/unified/ingredients.ts
// This script replaces only the interface definition at the top of the file,
// keeping all the data intact.

import fs from 'fs';
import path from 'path';

// Paths
const ingredientsPath = path.join(process.cwd(), 'src/data/unified/ingredients.ts');
const backupPath = path.join(process.cwd(), 'src/data/unified/ingredients.ts.bak');

// Replacement interface definition
const newInterfaceDefinition = `// ===== UNIFIED INGREDIENTS SYSTEM =====
// Generated by ingredient consolidation script
// Phase 2 of WhatToEatNext Data Consolidation
// 
// This file consolidates all ingredient data with Kalchm integration
// while maintaining backward compatibility and elemental self-reinforcement principles.

import type { 
  IngredientMapping,
  ElementalProperties,
  AlchemicalProperties,
  NutritionalProfile,
  Season,
  Element,
  PlanetName,
  ZodiacSign,
  ThermodynamicMetrics,
  ThermodynamicProperties
} from '@/types/alchemy';
import { enhanceIngredientWithAlchemy } from './alchemicalCalculations.js';
import { createElementalProperties } from '@/utils/elemental/elementalUtils';


export interface UnifiedIngredient {
  // Core Properties required by multiple interfaces
  name: string;
  category: string;
  subcategory?: string;
  amount?: number;
  unit?: string;
  element?: Element;
  
  // Elemental Properties (Self-Reinforcement Compliant)
  elementalProperties: ElementalProperties;
  
  // Alchemical Properties (Core Metrics)
  alchemicalProperties: AlchemicalProperties;
  
  // Kalchm Value (Intrinsic Alchemical Equilibrium)
  kalchm: number;      // K_alchm = (Spirit^Spirit * Essence^Essence) / (Matter^Matter * Substance^Substance)
  monica?: number;
  
  // Enhanced Properties
  flavorProfile?: Record<string, number>;
  nutritionalProfile?: NutritionalProfile;
  astrologicalProfile?: {
    elementalAffinity?: {
      base: string;
      secondary?: string;
    };
    rulingPlanets?: PlanetName[] | string[];
    favorableZodiac?: ZodiacSign[] | string[];
    zodiacAffinity?: ZodiacSign[] | string[];
  };
  
  // Energy properties
  energyProfile?: ThermodynamicMetrics;
  energyValues?: ThermodynamicProperties;
  
  // Additional properties for compatibility
  culinaryProperties?: any;
  storage?: any;
  preparation?: any;
  qualities?: string[];
  origin?: string[];
  affinities?: string[];
  healthBenefits?: string[];
  seasonality?: Season[];
  season?: Season[];
  score?: number;
  intensity?: number;
  complexity?: number;
  swaps?: string[];
  culturalOrigins?: string[] | unknown;
  elementalAffinity?: {
    base: string;
    secondary?: string;
  };
  tags?: string[];
  pAiringRecommendations?: string[];
  preparationMethods?: string[];
  description?: string;
  planetaryRuler?: PlanetName;
  
  // Metadata
  metadata?: {
    sourceFile: string;
    enhancedAt: string;
    kalchmCalculated: boolean;
  };
  
  // Allow additional properties
  [key: string]: unknown;
}


// ===== CONSOLIDATED INGREDIENT DATA =====`;

// Main function to run the script
async function fixUnifiedIngredientInterface() {
  console.log('Reading ingredients.ts file...');
  
  try {
    // Read the entire file
    const fileContent = fs.readFileSync(ingredientsPath, 'utf8');
    
    // Create a backup
    fs.writeFileSync(backupPath, fileContent, 'utf8');
    console.log('Backup created at:', backupPath);
    
    // Find the start of the data section
    const dataStartIndex = fileContent.indexOf('export const unifiedIngredients');
    
    if (dataStartIndex === -1) {
      console.error('Could not find the data section in the file!');
      return;
    }
    
    // Get the data section
    const dataSection = fileContent.substring(dataStartIndex);
    
    // Create the updated file content
    const updatedContent = newInterfaceDefinition + '\n' + dataSection;
    
    // Create a dry run mode that just outputs the first 100 lines
    if (process.argv.includes('--dry-run')) {
      console.log('=== DRY RUN MODE ===');
      console.log('First 100 lines of the updated file:');
      console.log(updatedContent.split('\n').slice(0, 100).join('\n'));
      console.log('=== END DRY RUN ===');
      return;
    }
    
    // Write the updated content back to the file
    fs.writeFileSync(ingredientsPath, updatedContent, 'utf8');
    console.log('Successfully updated UnifiedIngredient interface in:', ingredientsPath);
  } catch (error) {
    console.error('Error:', error.message);
  }
}

// Run the script
fixUnifiedIngredientInterface(); 