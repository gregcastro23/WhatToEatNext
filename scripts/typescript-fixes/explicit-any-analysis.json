{
  "totalFiles": 1145,
  "totalInstances": 2674,
  "byPattern": {
    "ERROR_HANDLING": {
      "count": 47,
      "examples": [
        {
          "file": "src/context/UnifiedContext.tsx",
          "line": 125,
          "code": "} catch (e: any) {",
          "match": "catch (e: any)"
        },
        {
          "file": "src/utils/buildQualityMonitor.ts",
          "line": 347,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/utils/buildQualityMonitor.ts",
          "line": 926,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/utils/typescriptCampaignTrigger.ts",
          "line": 265,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/utils/__tests__/errorHandling.test.ts",
          "line": 141,
          "code": "} catch (enhancedError: any) {",
          "match": "catch (enhancedError: any)"
        }
      ]
    },
    "FUNCTION_PARAMS": {
      "count": 521,
      "examples": [
        {
          "file": "src/context/ChartContext.tsx",
          "line": 11,
          "code": "updateChart: (data: any) => void;",
          "match": "(data: any)"
        },
        {
          "file": "src/context/ChartContext.tsx",
          "line": 28,
          "code": "const updateChart = (data: any) => {",
          "match": "(data: any)"
        },
        {
          "file": "src/context/UnifiedContext.tsx",
          "line": 125,
          "code": "} catch (e: any) {",
          "match": "(e: any)"
        },
        {
          "file": "src/app/api/nutrition/direct.ts",
          "line": 199,
          "code": "nutrients.forEach((n: any) => {",
          "match": "((n: any)"
        },
        {
          "file": "src/constants/chakraSymbols.ts",
          "line": 436,
          "code": "analyzeDemonstrationPlatform: (allChakraData: any) => {",
          "match": "(allChakraData: any)"
        }
      ]
    },
    "TYPE_ASSERTION": {
      "count": 1184,
      "examples": [
        {
          "file": "src/types/guards.ts",
          "line": 6,
          "code": "* pervasive `as any` casts while we continue the systematic error-reduction",
          "match": "as any"
        },
        {
          "file": "src/contexts/AlchemicalContext/provider.tsx",
          "line": 74,
          "code": "// Safe type conversion function to replace 'as any' casts",
          "match": "as any"
        },
        {
          "file": "src/context/CurrentChartContext.tsx",
          "line": 76,
          "code": "const planetData = data as any;",
          "match": "as any"
        },
        {
          "file": "src/context/CurrentChartContext.tsx",
          "line": 105,
          "code": "const planetData = data as any;",
          "match": "as any"
        },
        {
          "file": "src/context/CurrentChartContext.tsx",
          "line": 207,
          "code": "const planetData = data as any;",
          "match": "as any"
        }
      ]
    },
    "PROPERTY_TYPE": {
      "count": 652,
      "examples": [
        {
          "file": "src/context/ChartContext.tsx",
          "line": 8,
          "code": "currentChart: any;",
          "match": ": any;"
        },
        {
          "file": "src/context/ChartContext.tsx",
          "line": 11,
          "code": "updateChart: (data: any) => void;",
          "match": ": any)"
        },
        {
          "file": "src/context/ChartContext.tsx",
          "line": 28,
          "code": "const updateChart = (data: any) => {",
          "match": ": any)"
        },
        {
          "file": "src/context/UnifiedContext.tsx",
          "line": 125,
          "code": "} catch (e: any) {",
          "match": ": any)"
        },
        {
          "file": "src/app/api/nutrition/direct.ts",
          "line": 199,
          "code": "nutrients.forEach((n: any) => {",
          "match": ": any)"
        }
      ]
    },
    "ARRAY_TYPE": {
      "count": 58,
      "examples": [
        {
          "file": "src/utils/strictNullChecksHelper.ts",
          "line": 70,
          "code": "export function safeCall<T extends (...args: any[]) => any>(",
          "match": ": any[]"
        },
        {
          "file": "src/utils/nextConfigOptimizer.ts",
          "line": 10,
          "code": "private readonly logger: (message: string, ...args: any[]) => void;",
          "match": ": any[]"
        },
        {
          "file": "src/utils/naturalLanguageProcessor.ts",
          "line": 432,
          "code": "items: any[],",
          "match": ": any[]"
        },
        {
          "file": "src/utils/naturalLanguageProcessor.ts",
          "line": 435,
          "code": "): any[] {",
          "match": ": any[]"
        },
        {
          "file": "src/utils/naturalLanguageProcessor.ts",
          "line": 488,
          "code": "export function applyFilters(items: any[], filters: SearchFilters): any[] {",
          "match": ": any[]"
        }
      ]
    },
    "PROMISE_TYPE": {
      "count": 39,
      "examples": [
        {
          "file": "src/utils/recommendation/ingredientRecommendation.ts",
          "line": 421,
          "code": "export const getAllIngredientsData = async (): Promise<any[]> => {",
          "match": "Promise<any[]>"
        },
        {
          "file": "src/utils/errorHandling.ts",
          "line": 44,
          "code": "recover: (error: EnhancedError) => Promise<any> | any;",
          "match": "Promise<any>"
        },
        {
          "file": "src/utils/errorHandling.ts",
          "line": 163,
          "code": "async handleError(error: Error | EnhancedError, context?: Record<string, any>): Promise<any> {",
          "match": "Promise<any>"
        },
        {
          "file": "src/utils/mcpServerIntegration.ts",
          "line": 470,
          "code": "private async simulateMCPCall(serverName: string, method: string, params: any): Promise<any> {",
          "match": "Promise<any>"
        },
        {
          "file": "src/utils/mcpServerIntegration.ts",
          "line": 590,
          "code": "private async getFallbackAstrologicalData(date: Date): Promise<any> {",
          "match": "Promise<any>"
        }
      ]
    },
    "RECORD_TYPE": {
      "count": 119,
      "examples": [
        {
          "file": "src/types/advancedIntelligence.ts",
          "line": 51,
          "code": "planetaryPositions?: Record<string, any>;",
          "match": "Record<string, any>"
        },
        {
          "file": "src/types/advancedIntelligence.ts",
          "line": 104,
          "code": "planetaryPositions: Record<string, any>;",
          "match": "Record<string, any>"
        },
        {
          "file": "src/types/advancedIntelligence.ts",
          "line": 161,
          "code": "userPreferences?: Record<string, any>;",
          "match": "Record<string, any>"
        },
        {
          "file": "src/types/advancedIntelligence.ts",
          "line": 162,
          "code": "seasonalFactors?: Record<string, any>;",
          "match": "Record<string, any>"
        },
        {
          "file": "src/types/advancedIntelligence.ts",
          "line": 222,
          "code": "planetaryPositions: Record<string, any>;",
          "match": "Record<string, any>"
        }
      ]
    },
    "CALLBACK_TYPE": {
      "count": 25,
      "examples": [
        {
          "file": "src/types/global.d.ts",
          "line": 45,
          "code": "show: () => any;",
          "match": "() => any"
        },
        {
          "file": "src/types/global.d.ts",
          "line": 46,
          "code": "hide: () => any;",
          "match": "() => any"
        },
        {
          "file": "src/types/global.d.ts",
          "line": 47,
          "code": "update: () => any;",
          "match": "() => any"
        },
        {
          "file": "src/types/global.d.ts",
          "line": 49,
          "code": "trigger: (event: string) => any;",
          "match": "(event: string) => any"
        },
        {
          "file": "src/types/global.d.ts",
          "line": 51,
          "code": "show: () => any;",
          "match": "() => any"
        }
      ]
    },
    "RETURN_TYPE": {
      "count": 29,
      "examples": [
        {
          "file": "src/utils/mcpServerIntegration.ts",
          "line": 635,
          "code": "private generateMockPlanetaryData(date: Date): any {",
          "match": "): any {"
        },
        {
          "file": "src/utils/mcpServerIntegration.ts",
          "line": 646,
          "code": "private generateMockNutritionalData(ingredient: string): any {",
          "match": "): any {"
        },
        {
          "file": "src/utils/mcpServerIntegration.ts",
          "line": 659,
          "code": "private generateMockRecipeData(query: string, options: any): any {",
          "match": "): any {"
        },
        {
          "file": "src/utils/statePreservation.ts",
          "line": 132,
          "code": "export function getComponentState(componentId: string): any {",
          "match": "): any {"
        },
        {
          "file": "src/utils/elementalUtils.ts",
          "line": 473,
          "code": "ensureLowercaseFormat(properties: unknown): any {",
          "match": "): any {"
        }
      ]
    }
  },
  "byDomain": {
    "ASTROLOGICAL": {
      "count": 49,
      "examples": [
        {
          "file": "src/constants/alchemicalPillars.ts",
          "line": 1272,
          "code": "export function calculatePlanetaryAlignment(enhancedPillar: AlchemicalPillar & { monicaProperties?: any }): number {",
          "match": "PlanetaryAlignment(enhancedPillar: AlchemicalPillar & { monicaProperties?: any"
        },
        {
          "file": "src/constants/alchemicalPillars.ts",
          "line": 1293,
          "code": "export function calculateLunarPhaseBonus(enhancedPillar: AlchemicalPillar & { monicaProperties?: any }): number {",
          "match": "LunarPhaseBonus(enhancedPillar: AlchemicalPillar & { monicaProperties?: any"
        },
        {
          "file": "src/utils/astrologyUtils.ts",
          "line": 2192,
          "code": "planetaryPositions: { [key: string]: any },",
          "match": "planetaryPositions: { [key: string]: any"
        },
        {
          "file": "src/utils/astrologyUtils.ts",
          "line": 2308,
          "code": "planetaryPositions: { [key: string]: any },",
          "match": "planetaryPositions: { [key: string]: any"
        },
        {
          "file": "src/utils/astrologyUtils.ts",
          "line": 2376,
          "code": "planetaryPositions: { [key: string]: any },",
          "match": "planetaryPositions: { [key: string]: any"
        }
      ]
    },
    "RECIPE": {
      "count": 66,
      "examples": [
        {
          "file": "src/constants/chakraSymbols.ts",
          "line": 608,
          "code": "function generateNutritionalRecommendations(analysis: any): string[] {",
          "match": "NutritionalRecommendations(analysis: any"
        },
        {
          "file": "src/utils/recipe/recipeUtils.ts",
          "line": 39,
          "code": "export function isRecipeIngredient(ingredient: any): ingredient is RecipeIngredient {",
          "match": "RecipeIngredient(ingredient: any"
        },
        {
          "file": "src/utils/recipe/recipeMatching.ts",
          "line": 512,
          "code": "recipeProfile: { [key: string]: any },",
          "match": "recipeProfile: { [key: string]: any"
        },
        {
          "file": "src/utils/mcpServerIntegration.ts",
          "line": 617,
          "code": "private async getFallbackRecipeData(query: string, options: any): Promise<any> {",
          "match": "RecipeData(query: string, options: any"
        },
        {
          "file": "src/utils/mcpServerIntegration.ts",
          "line": 646,
          "code": "private generateMockNutritionalData(ingredient: string): any {",
          "match": "NutritionalData(ingredient: string): any"
        }
      ]
    },
    "CAMPAIGN": {
      "count": 30,
      "examples": [
        {
          "file": "src/constants/alchemicalPillars.ts",
          "line": 1293,
          "code": "export function calculateLunarPhaseBonus(enhancedPillar: AlchemicalPillar & { monicaProperties?: any }): number {",
          "match": "PhaseBonus(enhancedPillar: AlchemicalPillar & { monicaProperties?: any"
        },
        {
          "file": "src/utils/automatedQualityAssurance.ts",
          "line": 533,
          "code": "private triggerCampaign(campaignType: string, context: any): void {",
          "match": "Campaign(campaignType: string, context: any"
        },
        {
          "file": "src/utils/automatedQualityAssurance.ts",
          "line": 565,
          "code": "monitorBuildQuality: (metrics: any) => qa.monitorBuildQuality(metrics),",
          "match": "metrics: any"
        },
        {
          "file": "src/components/quality/QualityMetricsDashboard.tsx",
          "line": 9,
          "code": "buildMetrics: any;",
          "match": "Metrics: any"
        },
        {
          "file": "src/components/quality/QualityMetricsDashboard.tsx",
          "line": 11,
          "code": "campaignProgress: any;",
          "match": "campaignProgress: any"
        }
      ]
    },
    "INTELLIGENCE": {
      "count": 25,
      "examples": [
        {
          "file": "src/constants/chakraSymbols.ts",
          "line": 572,
          "code": "function generateMantraRecommendations(analysis: any): string[] {",
          "match": "Recommendations(analysis: any"
        },
        {
          "file": "src/constants/chakraSymbols.ts",
          "line": 590,
          "code": "function generateVisualRecommendations(analysis: any): string[] {",
          "match": "Recommendations(analysis: any"
        },
        {
          "file": "src/constants/chakraSymbols.ts",
          "line": 608,
          "code": "function generateNutritionalRecommendations(analysis: any): string[] {",
          "match": "Recommendations(analysis: any"
        },
        {
          "file": "src/constants/chakraSymbols.ts",
          "line": 626,
          "code": "function generateFunctionalRecommendations(analysis: any): string[] {",
          "match": "Recommendations(analysis: any"
        },
        {
          "file": "src/constants/chakraSymbols.ts",
          "line": 644,
          "code": "function generatePlatformRecommendations(analysis: any): string[] {",
          "match": "Recommendations(analysis: any"
        }
      ]
    },
    "SERVICE": {
      "count": 11,
      "examples": [
        {
          "file": "src/components/MoonDisplay.migrated.tsx",
          "line": 192,
          "code": "const getMoonTimes = serviceData.getMoonTimes as ((date: Date, coords: any) => Promise<any>) | undefined;",
          "match": "serviceData.getMoonTimes as ((date: Date, coords: any"
        },
        {
          "file": "src/components/campaign/CampaignIntegrationDashboard.tsx",
          "line": 277,
          "code": "systemHealth: any;",
          "match": "systemHealth: any"
        },
        {
          "file": "src/__tests__/types/testUtils.ts",
          "line": 160,
          "code": "controller: any;",
          "match": "controller: any"
        },
        {
          "file": "src/__tests__/types/testUtils.ts",
          "line": 163,
          "code": "testController: any;",
          "match": "Controller: any"
        },
        {
          "file": "src/services/linting/LintingProgressTracker.ts",
          "line": 493,
          "code": "private saveCampaignIntegration(data: any): void {",
          "match": "Integration(data: any"
        }
      ]
    }
  },
  "byFile": {
    "src/types/advancedIntelligence.ts": {
      "count": 17,
      "examples": [
        {
          "file": "src/types/advancedIntelligence.ts",
          "line": 51,
          "code": "planetaryPositions?: Record<string, any>;",
          "match": "Record<string, any>"
        },
        {
          "file": "src/types/advancedIntelligence.ts",
          "line": 104,
          "code": "planetaryPositions: Record<string, any>;",
          "match": "Record<string, any>"
        },
        {
          "file": "src/types/advancedIntelligence.ts",
          "line": 161,
          "code": "userPreferences?: Record<string, any>;",
          "match": "Record<string, any>"
        }
      ]
    },
    "src/types/global.d.ts": {
      "count": 9,
      "examples": [
        {
          "file": "src/types/global.d.ts",
          "line": 45,
          "code": "show: () => any;",
          "match": "() => any"
        },
        {
          "file": "src/types/global.d.ts",
          "line": 46,
          "code": "hide: () => any;",
          "match": "() => any"
        },
        {
          "file": "src/types/global.d.ts",
          "line": 47,
          "code": "update: () => any;",
          "match": "() => any"
        }
      ]
    },
    "src/types/guards.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/types/guards.ts",
          "line": 6,
          "code": "* pervasive `as any` casts while we continue the systematic error-reduction",
          "match": "as any"
        }
      ]
    },
    "src/contexts/AlchemicalContext/provider.tsx": {
      "count": 1,
      "examples": [
        {
          "file": "src/contexts/AlchemicalContext/provider.tsx",
          "line": 74,
          "code": "// Safe type conversion function to replace 'as any' casts",
          "match": "as any"
        }
      ]
    },
    "src/contexts/FlavorEngineContext.tsx": {
      "count": 1,
      "examples": [
        {
          "file": "src/contexts/FlavorEngineContext.tsx",
          "line": 16,
          "code": "calculateCompatibility: (profile1: UnifiedFlavorProfile, profile2: UnifiedFlavorProfile) => any;",
          "match": "(profile1: UnifiedFlavorProfile, profile2: UnifiedFlavorProfile) => any"
        }
      ]
    },
    "src/context/CurrentChartContext.tsx": {
      "count": 7,
      "examples": [
        {
          "file": "src/context/CurrentChartContext.tsx",
          "line": 76,
          "code": "const planetData = data as any;",
          "match": "as any"
        },
        {
          "file": "src/context/CurrentChartContext.tsx",
          "line": 105,
          "code": "const planetData = data as any;",
          "match": "as any"
        },
        {
          "file": "src/context/CurrentChartContext.tsx",
          "line": 207,
          "code": "const planetData = data as any;",
          "match": "as any"
        }
      ]
    },
    "src/context/ChartContext.tsx": {
      "count": 5,
      "examples": [
        {
          "file": "src/context/ChartContext.tsx",
          "line": 11,
          "code": "updateChart: (data: any) => void;",
          "match": "(data: any)"
        },
        {
          "file": "src/context/ChartContext.tsx",
          "line": 28,
          "code": "const updateChart = (data: any) => {",
          "match": "(data: any)"
        },
        {
          "file": "src/context/ChartContext.tsx",
          "line": 8,
          "code": "currentChart: any;",
          "match": ": any;"
        }
      ]
    },
    "src/context/UnifiedContext.tsx": {
      "count": 3,
      "examples": [
        {
          "file": "src/context/UnifiedContext.tsx",
          "line": 125,
          "code": "} catch (e: any) {",
          "match": "catch (e: any)"
        },
        {
          "file": "src/context/UnifiedContext.tsx",
          "line": 125,
          "code": "} catch (e: any) {",
          "match": "(e: any)"
        },
        {
          "file": "src/context/UnifiedContext.tsx",
          "line": 125,
          "code": "} catch (e: any) {",
          "match": ": any)"
        }
      ]
    },
    "src/app/alchemicalEngine.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/app/alchemicalEngine.ts",
          "line": 30,
          "code": "CelestialBodies: (horoscopeDict.tropical as any)?.CelestialBodies || horoscopeDict.CelestialBodies || {},",
          "match": "as any"
        },
        {
          "file": "src/app/alchemicalEngine.ts",
          "line": 31,
          "code": "Ascendant: (horoscopeDict.tropical as any)?.Ascendant || horoscopeDict.Ascendant || {},",
          "match": "as any"
        },
        {
          "file": "src/app/alchemicalEngine.ts",
          "line": 32,
          "code": "Aspects: (horoscopeDict.tropical as any)?.Aspects || horoscopeDict.Aspects || {}",
          "match": "as any"
        }
      ]
    },
    "src/app/test/migrated-components/cooking-methods-section/page.tsx": {
      "count": 1,
      "examples": [
        {
          "file": "src/app/test/migrated-components/cooking-methods-section/page.tsx",
          "line": 129,
          "code": "setSelectedMethodId((method as any).id);",
          "match": "as any"
        }
      ]
    },
    "src/app/api/astrologize/route.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/app/api/astrologize/route.ts",
          "line": 186,
          "code": "const astrologyInfo = (data as any).astrology_info?.horoscope_parameters?.planets;",
          "match": "as any"
        }
      ]
    },
    "src/app/api/nutrition/direct.ts": {
      "count": 4,
      "examples": [
        {
          "file": "src/app/api/nutrition/direct.ts",
          "line": 199,
          "code": "nutrients.forEach((n: any) => {",
          "match": "((n: any)"
        },
        {
          "file": "src/app/api/nutrition/direct.ts",
          "line": 168,
          "code": "const name = (n.nutrient?.name || n.nutrientName || (n as any).name || '').toLowerCase();",
          "match": "as any"
        },
        {
          "file": "src/app/api/nutrition/direct.ts",
          "line": 196,
          "code": "const dataObj = (data as Record<string, unknown>).data as any;",
          "match": "as any"
        }
      ]
    },
    "src/app/debug/page.tsx": {
      "count": 1,
      "examples": [
        {
          "file": "src/app/debug/page.tsx",
          "line": 58,
          "code": "setTestResults(results as any);",
          "match": "as any"
        }
      ]
    },
    "src/app/cooking-methods/[method]/page.tsx": {
      "count": 13,
      "examples": [
        {
          "file": "src/app/cooking-methods/[method]/page.tsx",
          "line": 97,
          "code": "{method && typeof method === 'object' && 'description' in method ? String((method as any).description) : 'No description available'}",
          "match": "as any"
        },
        {
          "file": "src/app/cooking-methods/[method]/page.tsx",
          "line": 103,
          "code": "{method && typeof method === 'object' && 'duration' in method ? String((method as any).duration) : 'Duration not specified'}",
          "match": "as any"
        },
        {
          "file": "src/app/cooking-methods/[method]/page.tsx",
          "line": 135,
          "code": "Array.isArray((method as any).benefits) ? (",
          "match": "as any"
        }
      ]
    },
    "src/constants/chakraSymbols.ts": {
      "count": 28,
      "examples": [
        {
          "file": "src/constants/chakraSymbols.ts",
          "line": 436,
          "code": "analyzeDemonstrationPlatform: (allChakraData: any) => {",
          "match": "(allChakraData: any)"
        },
        {
          "file": "src/constants/chakraSymbols.ts",
          "line": 572,
          "code": "function generateMantraRecommendations(analysis: any): string[] {",
          "match": "(analysis: any)"
        },
        {
          "file": "src/constants/chakraSymbols.ts",
          "line": 590,
          "code": "function generateVisualRecommendations(analysis: any): string[] {",
          "match": "(analysis: any)"
        }
      ]
    },
    "src/constants/systemDefaults.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/constants/systemDefaults.ts",
          "line": 792,
          "code": "result[key] = mergeWithDefaults(userValues[key] as any, defaults[key]);",
          "match": "as any"
        },
        {
          "file": "src/constants/systemDefaults.ts",
          "line": 794,
          "code": "result[key] = userValues[key] as any;",
          "match": "as any"
        },
        {
          "file": "src/constants/systemDefaults.ts",
          "line": 781,
          "code": "export function mergeWithDefaults<T extends Record<string, any>>(",
          "match": "Record<string, any>"
        }
      ]
    },
    "src/constants/planetaryFoodAssociations.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/constants/planetaryFoodAssociations.ts",
          "line": 283,
          "code": "const itemData = item as any;",
          "match": "as any"
        },
        {
          "file": "src/constants/planetaryFoodAssociations.ts",
          "line": 347,
          "code": "const itemData = item as any;",
          "match": "as any"
        },
        {
          "file": "src/constants/planetaryFoodAssociations.ts",
          "line": 393,
          "code": "const ingredientData = _ingredient as any;",
          "match": "as any"
        }
      ]
    },
    "src/constants/alchemicalPillars.ts": {
      "count": 4,
      "examples": [
        {
          "file": "src/constants/alchemicalPillars.ts",
          "line": 1272,
          "code": "export function calculatePlanetaryAlignment(enhancedPillar: AlchemicalPillar & { monicaProperties?: any }): number {",
          "match": "(enhancedPillar: AlchemicalPillar & { monicaProperties?: any })"
        },
        {
          "file": "src/constants/alchemicalPillars.ts",
          "line": 1293,
          "code": "export function calculateLunarPhaseBonus(enhancedPillar: AlchemicalPillar & { monicaProperties?: any }): number {",
          "match": "(enhancedPillar: AlchemicalPillar & { monicaProperties?: any })"
        },
        {
          "file": "src/constants/alchemicalPillars.ts",
          "line": 1272,
          "code": "export function calculatePlanetaryAlignment(enhancedPillar: AlchemicalPillar & { monicaProperties?: any }): number {",
          "match": ": any "
        }
      ]
    },
    "src/test-expanded-alchemical-engine.ts": {
      "count": 8,
      "examples": [
        {
          "file": "src/test-expanded-alchemical-engine.ts",
          "line": 176,
          "code": "log.info('Astrological Power:', astrologicalPower.toFixed(4) as any);",
          "match": "as any"
        },
        {
          "file": "src/test-expanded-alchemical-engine.ts",
          "line": 227,
          "code": "const legacyResultData = legacyResult as any;",
          "match": "as any"
        },
        {
          "file": "src/test-expanded-alchemical-engine.ts",
          "line": 239,
          "code": "kalchm: (legacyResult as Record<string, any>).kalchm?.toFixed(4),",
          "match": "Record<string, any>"
        }
      ]
    },
    "src/utils/dynamicImport.ts": {
      "count": 7,
      "examples": [
        {
          "file": "src/utils/dynamicImport.ts",
          "line": 32,
          "code": "getCurrentAstrologicalState: (date?: Date) => any;",
          "match": "(date?: Date) => any"
        },
        {
          "file": "src/utils/dynamicImport.ts",
          "line": 45,
          "code": "getCurrentAstrologicalState: () => any;",
          "match": "() => any"
        },
        {
          "file": "src/utils/dynamicImport.ts",
          "line": 53,
          "code": "getCuisineRecommendations: (zodiacSign?: string, lunarPhase?: string, planetaryAlignment?: unknown) => any[];",
          "match": "(zodiacSign?: string, lunarPhase?: string, planetaryAlignment?: unknown) => any"
        }
      ]
    },
    "src/utils/recommendation/cuisineRecommendation.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/utils/recommendation/cuisineRecommendation.ts",
          "line": 124,
          "code": "export function calculateElementalContributionsFromPlanets(planetaryPositions: Record<string, any>): ElementalProperties {",
          "match": "Record<string, any>"
        }
      ]
    },
    "src/utils/recommendation/ingredientRecommendation.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/utils/recommendation/ingredientRecommendation.ts",
          "line": 421,
          "code": "export const getAllIngredientsData = async (): Promise<any[]> => {",
          "match": "Promise<any[]>"
        }
      ]
    },
    "src/utils/strictNullChecksHelper.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/utils/strictNullChecksHelper.ts",
          "line": 70,
          "code": "export function safeCall<T extends (...args: any[]) => any>(",
          "match": "(...args: any[])"
        },
        {
          "file": "src/utils/strictNullChecksHelper.ts",
          "line": 70,
          "code": "export function safeCall<T extends (...args: any[]) => any>(",
          "match": ": any[]"
        },
        {
          "file": "src/utils/strictNullChecksHelper.ts",
          "line": 70,
          "code": "export function safeCall<T extends (...args: any[]) => any>(",
          "match": "(...args: any[]) => any"
        }
      ]
    },
    "src/utils/automatedQualityAssurance.ts": {
      "count": 7,
      "examples": [
        {
          "file": "src/utils/automatedQualityAssurance.ts",
          "line": 533,
          "code": "private triggerCampaign(campaignType: string, context: any): void {",
          "match": "(campaignType: string, context: any)"
        },
        {
          "file": "src/utils/automatedQualityAssurance.ts",
          "line": 565,
          "code": "monitorBuildQuality: (metrics: any) => qa.monitorBuildQuality(metrics),",
          "match": "(metrics: any)"
        },
        {
          "file": "src/utils/automatedQualityAssurance.ts",
          "line": 228,
          "code": "ingredient.elementalProperties as any,",
          "match": "as any"
        }
      ]
    },
    "src/utils/buildSystemRepair.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/utils/buildSystemRepair.ts",
          "line": 176,
          "code": "if ((report.configValidation as any).issues?.length > 0) {",
          "match": "as any"
        }
      ]
    },
    "src/utils/cookingMethodRecommender.ts": {
      "count": 7,
      "examples": [
        {
          "file": "src/utils/cookingMethodRecommender.ts",
          "line": 1214,
          "code": "benefits: (method as any)?.benefits || [],",
          "match": "as any"
        },
        {
          "file": "src/utils/cookingMethodRecommender.ts",
          "line": 1219,
          "code": "} as any);",
          "match": "as any"
        },
        {
          "file": "src/utils/cookingMethodRecommender.ts",
          "line": 637,
          "code": "let venusTemperament: any = null;",
          "match": ": any "
        }
      ]
    },
    "src/utils/errorHandling.ts": {
      "count": 10,
      "examples": [
        {
          "file": "src/utils/errorHandling.ts",
          "line": 392,
          "code": "return React.createElement(ErrorBoundary as any, {",
          "match": "as any"
        },
        {
          "file": "src/utils/errorHandling.ts",
          "line": 44,
          "code": "recover: (error: EnhancedError) => Promise<any> | any;",
          "match": "Promise<any>"
        },
        {
          "file": "src/utils/errorHandling.ts",
          "line": 163,
          "code": "async handleError(error: Error | EnhancedError, context?: Record<string, any>): Promise<any> {",
          "match": "Promise<any>"
        }
      ]
    },
    "src/utils/dataStandardization.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/utils/dataStandardization.ts",
          "line": 14,
          "code": "const ingredientData = ingredient as any;",
          "match": "as any"
        }
      ]
    },
    "src/utils/planetaryValidation.ts": {
      "count": 10,
      "examples": [
        {
          "file": "src/utils/planetaryValidation.ts",
          "line": 237,
          "code": "const nestedTransit = value as any;",
          "match": "as any"
        },
        {
          "file": "src/utils/planetaryValidation.ts",
          "line": 280,
          "code": "const pos = position as any;",
          "match": "as any"
        },
        {
          "file": "src/utils/planetaryValidation.ts",
          "line": 404,
          "code": "const startDate = new Date((dates as any).Start);",
          "match": "as any"
        }
      ]
    },
    "src/utils/astrologyUtils.ts": {
      "count": 15,
      "examples": [
        {
          "file": "src/utils/astrologyUtils.ts",
          "line": 2190,
          "code": "export function transformItemsWithPlanetaryPositions(",
          "match": "(\n  items: ElementalItem[],\n  planetaryPositions: { [key: string]: any },\n  isDaytime: boolean = true,\n  currentZodiac?: string\n)"
        },
        {
          "file": "src/utils/astrologyUtils.ts",
          "line": 2307,
          "code": "function calculateCurrentElementalInfluence(",
          "match": "(\n  planetaryPositions: { [key: string]: any },\n  isDaytime: boolean,\n  currentZodiac?: string\n)"
        },
        {
          "file": "src/utils/astrologyUtils.ts",
          "line": 2373,
          "code": "function calculateItemCompatibilityScore(",
          "match": "(\n  itemProperties: ElementalProperties,\n  currentInfluence: ElementalProperties,\n  planetaryPositions: { [key: string]: any },\n  isDaytime: boolean\n)"
        }
      ]
    },
    "src/utils/buildQualityMonitor.ts": {
      "count": 15,
      "examples": [
        {
          "file": "src/utils/buildQualityMonitor.ts",
          "line": 347,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/utils/buildQualityMonitor.ts",
          "line": 926,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/utils/buildQualityMonitor.ts",
          "line": 347,
          "code": "} catch (error: any) {",
          "match": "(error: any)"
        }
      ]
    },
    "src/utils/timeFactors.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/utils/timeFactors.ts",
          "line": 110,
          "code": "const recipeIndex = seasonOrder.indexOf(recipeSeason as any);",
          "match": "as any"
        }
      ]
    },
    "src/utils/testRecommendations.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/utils/testRecommendations.ts",
          "line": 85,
          "code": "const recommendations = await getRecommendedCookingMethodsForIngredient(mockIngredient, mockCookingMethods as any, 5);",
          "match": "as any"
        },
        {
          "file": "src/utils/testRecommendations.ts",
          "line": 97,
          "code": "const standardRecs = await getRecommendedCookingMethodsForIngredient(mockIngredient, mockCookingMethods as any, 5); // Pattern ZZZ: Array Object Interface Expansion",
          "match": "as any"
        }
      ]
    },
    "src/utils/planetInfoUtils.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/utils/planetInfoUtils.ts",
          "line": 56,
          "code": "const positionData = planetPosition as any;",
          "match": "as any"
        },
        {
          "file": "src/utils/planetInfoUtils.ts",
          "line": 133,
          "code": "const { aspects } = calculateAspects(planetaryPositions as any, 0);",
          "match": "as any"
        },
        {
          "file": "src/utils/planetInfoUtils.ts",
          "line": 131,
          "code": "let planetAspects: Array<{ planet: string; type: any; orb: number }> = [];",
          "match": ": any;"
        }
      ]
    },
    "src/utils/cuisine/cuisineUtils.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/utils/cuisine/cuisineUtils.ts",
          "line": 19,
          "code": "const grainData = grainCuisineMatrix[ingredientName] as any;",
          "match": "as any"
        },
        {
          "file": "src/utils/cuisine/cuisineUtils.ts",
          "line": 52,
          "code": "const grainDataEntry = data as any;",
          "match": "as any"
        }
      ]
    },
    "src/utils/recipe/recipeUtils.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/utils/recipe/recipeUtils.ts",
          "line": 39,
          "code": "export function isRecipeIngredient(ingredient: any): ingredient is RecipeIngredient {",
          "match": "(ingredient: any)"
        },
        {
          "file": "src/utils/recipe/recipeUtils.ts",
          "line": 39,
          "code": "export function isRecipeIngredient(ingredient: any): ingredient is RecipeIngredient {",
          "match": ": any)"
        }
      ]
    },
    "src/utils/recipe/recipeMatching.ts": {
      "count": 7,
      "examples": [
        {
          "file": "src/utils/recipe/recipeMatching.ts",
          "line": 511,
          "code": "function calculateNutritionalMatch(",
          "match": "(\n  recipeProfile: { [key: string]: any },\n  userGoals: { [key: string]: any }\n)"
        },
        {
          "file": "src/utils/recipe/recipeMatching.ts",
          "line": 626,
          "code": "async function calculateEnhancedAstrologicalMatch(",
          "match": "(\n  recipe: Recipe,\n  astrologicalSign: string,\n  cachedData: any\n)"
        },
        {
          "file": "src/utils/recipe/recipeMatching.ts",
          "line": 512,
          "code": "recipeProfile: { [key: string]: any },",
          "match": ": any "
        }
      ]
    },
    "src/utils/recipe/recipeEnrichment.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/utils/recipe/recipeEnrichment.ts",
          "line": 129,
          "code": "const methodStr = (recipe.cookingMethods as any)?.toLowerCase?.() || '';",
          "match": "as any"
        },
        {
          "file": "src/utils/recipe/recipeEnrichment.ts",
          "line": 217,
          "code": "const methodStr = (recipe.cookingMethods as any)?.toLowerCase?.() || '';",
          "match": "as any"
        },
        {
          "file": "src/utils/recipe/recipeEnrichment.ts",
          "line": 245,
          "code": "const methodStr = (recipe.cookingMethods as any)?.toLowerCase?.() || '';",
          "match": "as any"
        }
      ]
    },
    "src/utils/recipe/recipeAdapter.ts": {
      "count": 6,
      "examples": [
        {
          "file": "src/utils/recipe/recipeAdapter.ts",
          "line": 23,
          "code": "const ingredients: RecipeIngredient[] = adaptIngredients((recipeData.ingredients || []) as any[]);",
          "match": "as any"
        },
        {
          "file": "src/utils/recipe/recipeAdapter.ts",
          "line": 80,
          "code": "recipe.zodiacInfluences = Array.isArray(energyProfile.zodiac) ? energyProfile.zodiac.map(z => String(z)) as any : [String(energyProfile.zodiac)] as any;",
          "match": "as any"
        },
        {
          "file": "src/utils/recipe/recipeAdapter.ts",
          "line": 80,
          "code": "recipe.zodiacInfluences = Array.isArray(energyProfile.zodiac) ? energyProfile.zodiac.map(z => String(z)) as any : [String(energyProfile.zodiac)] as any;",
          "match": "as any"
        }
      ]
    },
    "src/utils/alchemicalTransformationUtils.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/utils/alchemicalTransformationUtils.ts",
          "line": 245,
          "code": "log.info('Method names to evaluate:', { data: methodNames.join(', ') } as any);",
          "match": "as any"
        }
      ]
    },
    "src/utils/chromeApiInitializer.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/utils/chromeApiInitializer.ts",
          "line": 76,
          "code": "log.info('[ChromeAPI] Mocked chrome.runtime.sendMessage called:', message as any);",
          "match": "as any"
        }
      ]
    },
    "src/utils/reliableAstronomy.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/utils/reliableAstronomy.ts",
          "line": 409,
          "code": "const planetData = planet as any;",
          "match": "as any"
        },
        {
          "file": "src/utils/reliableAstronomy.ts",
          "line": 514,
          "code": "const objData = obj as any;",
          "match": "as any"
        }
      ]
    },
    "src/utils/stateValidator.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/utils/stateValidator.ts",
          "line": 59,
          "code": "const stateData = state as any;",
          "match": "as any"
        }
      ]
    },
    "src/utils/alchemicalAdapters.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/utils/alchemicalAdapters.ts",
          "line": 8,
          "code": "const engineData = engineAffinity as any;",
          "match": "as any"
        },
        {
          "file": "src/utils/alchemicalAdapters.ts",
          "line": 22,
          "code": "const affinityData = standardAffinity as any;",
          "match": "as any"
        }
      ]
    },
    "src/utils/streamlinedPlanetaryPositions.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/utils/streamlinedPlanetaryPositions.ts",
          "line": 358,
          "code": "export function validatePositionsStructure(positions: { [key: string]: any }): boolean {",
          "match": "(positions: { [key: string]: any })"
        },
        {
          "file": "src/utils/streamlinedPlanetaryPositions.ts",
          "line": 358,
          "code": "export function validatePositionsStructure(positions: { [key: string]: any }): boolean {",
          "match": ": any "
        },
        {
          "file": "src/utils/streamlinedPlanetaryPositions.ts",
          "line": 368,
          "code": "const pos = position as Record<string, any>;",
          "match": "Record<string, any>"
        }
      ]
    },
    "src/utils/alchemicalPillarUtils.ts": {
      "count": 20,
      "examples": [
        {
          "file": "src/utils/alchemicalPillarUtils.ts",
          "line": 399,
          "code": "(influences as any[]).push(`${planet} (${isDaytime ? 'Day' : 'Night'})`);",
          "match": "as any"
        },
        {
          "file": "src/utils/alchemicalPillarUtils.ts",
          "line": 405,
          "code": "(influences as any[]).push(tarotCard);",
          "match": "as any"
        },
        {
          "file": "src/utils/alchemicalPillarUtils.ts",
          "line": 623,
          "code": "if (pillar.effects.Spirit > 0) (enhancedProps as any[]).push(\"Spirit\");",
          "match": "as any"
        }
      ]
    },
    "src/utils/testIngredientMapping.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/utils/testIngredientMapping.ts",
          "line": 103,
          "code": "} as any",
          "match": "as any"
        }
      ]
    },
    "src/utils/mcpServerIntegration.ts": {
      "count": 23,
      "examples": [
        {
          "file": "src/utils/mcpServerIntegration.ts",
          "line": 435,
          "code": "private async callMCPServer(serverName: string, method: string, params: any): Promise<MCPApiResponse> {",
          "match": "(serverName: string, method: string, params: any)"
        },
        {
          "file": "src/utils/mcpServerIntegration.ts",
          "line": 470,
          "code": "private async simulateMCPCall(serverName: string, method: string, params: any): Promise<any> {",
          "match": "(serverName: string, method: string, params: any)"
        },
        {
          "file": "src/utils/mcpServerIntegration.ts",
          "line": 577,
          "code": "private async callDirectSpoonacularAPI(query: string, options: any): Promise<MCPApiResponse> {",
          "match": "(query: string, options: any)"
        }
      ]
    },
    "src/utils/recipeFilters.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/utils/recipeFilters.ts",
          "line": 519,
          "code": "!options.cookingMethod.includes(recipe.cookingMethod as any)",
          "match": "as any"
        },
        {
          "file": "src/utils/recipeFilters.ts",
          "line": 697,
          "code": "const mappedIngredients = connectIngredientsToMappings(recipe as any);",
          "match": "as any"
        },
        {
          "file": "src/utils/recipeFilters.ts",
          "line": 786,
          "code": ": (recipe.dietaryInfo as any)?.includes?.(restriction) || false",
          "match": "as any"
        }
      ]
    },
    "src/utils/stateManager.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/utils/stateManager.ts",
          "line": 137,
          "code": "if (cached.ui && Array.isArray((cached.ui as any).activeFilters)) {",
          "match": "as any"
        },
        {
          "file": "src/utils/stateManager.ts",
          "line": 138,
          "code": "cached.ui.activeFilters = new Set((cached.ui as any).activeFilters);",
          "match": "as any"
        },
        {
          "file": "src/utils/stateManager.ts",
          "line": 167,
          "code": "const data = obj as any;",
          "match": "as any"
        }
      ]
    },
    "src/utils/nutritionUtils.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/utils/nutritionUtils.ts",
          "line": 88,
          "code": "const macros = (nutrition as any)?.macros || {};",
          "match": "as any"
        },
        {
          "file": "src/utils/nutritionUtils.ts",
          "line": 146,
          "code": "const ingredientData = ingredient as any;",
          "match": "as any"
        },
        {
          "file": "src/utils/nutritionUtils.ts",
          "line": 155,
          "code": "let referenceItem: any = null;",
          "match": ": any "
        }
      ]
    },
    "src/utils/typescriptCampaignTrigger.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/utils/typescriptCampaignTrigger.ts",
          "line": 265,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/utils/typescriptCampaignTrigger.ts",
          "line": 265,
          "code": "} catch (error: any) {",
          "match": "(error: any)"
        },
        {
          "file": "src/utils/typescriptCampaignTrigger.ts",
          "line": 265,
          "code": "} catch (error: any) {",
          "match": ": any)"
        }
      ]
    },
    "src/utils/validatePlanetaryPositions.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/utils/validatePlanetaryPositions.ts",
          "line": 23,
          "code": "ZodiacTransit?: Record<string, any>;",
          "match": "Record<string, any>"
        }
      ]
    },
    "src/utils/ingredientRecommender.ts": {
      "count": 11,
      "examples": [
        {
          "file": "src/utils/ingredientRecommender.ts",
          "line": 556,
          "code": "ingredientData as any,",
          "match": "as any"
        },
        {
          "file": "src/utils/ingredientRecommender.ts",
          "line": 558,
          "code": "ingredientData.astrologicalContext as any",
          "match": "as any"
        },
        {
          "file": "src/utils/ingredientRecommender.ts",
          "line": 607,
          "code": "flavorProfile: (ingredientIntelligence?.categorizationAnalysis as any)?.flavorProfile || {},",
          "match": "as any"
        }
      ]
    },
    "src/utils/statePreservation.ts": {
      "count": 9,
      "examples": [
        {
          "file": "src/utils/statePreservation.ts",
          "line": 119,
          "code": "export function saveComponentState(componentId: string, state: any): void {",
          "match": "(componentId: string, state: any)"
        },
        {
          "file": "src/utils/statePreservation.ts",
          "line": 294,
          "code": "saveState: (state: any) => saveComponentState(componentId, state),",
          "match": "(state: any)"
        },
        {
          "file": "src/utils/statePreservation.ts",
          "line": 8,
          "code": "data: any;",
          "match": ": any;"
        }
      ]
    },
    "src/utils/elementalUtils.ts": {
      "count": 4,
      "examples": [
        {
          "file": "src/utils/elementalUtils.ts",
          "line": 473,
          "code": "ensureLowercaseFormat(properties: unknown): any {",
          "match": ": any "
        },
        {
          "file": "src/utils/elementalUtils.ts",
          "line": 1424,
          "code": "export function ensureLowercaseFormat(properties: unknown): any {",
          "match": ": any "
        },
        {
          "file": "src/utils/elementalUtils.ts",
          "line": 473,
          "code": "ensureLowercaseFormat(properties: unknown): any {",
          "match": "): any {"
        }
      ]
    },
    "src/utils/logger.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/utils/logger.ts",
          "line": 86,
          "code": "log.debug(`[DEBUG]${component} ${message}`, ...(options.rest as any[]));",
          "match": "as any"
        },
        {
          "file": "src/utils/logger.ts",
          "line": 97,
          "code": "log.info(`[INFO]${component} ${message}`, ...(options.rest as any[]));",
          "match": "as any"
        }
      ]
    },
    "src/utils/typeValidation.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/utils/typeValidation.ts",
          "line": 320,
          "code": "sign: 'aries' as any,",
          "match": "as any"
        }
      ]
    },
    "src/utils/common/index.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/utils/common/index.ts",
          "line": 86,
          "code": "metadata?: { [key: string]: any };",
          "match": ": any "
        }
      ]
    },
    "src/utils/elemental/core.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/utils/elemental/core.ts",
          "line": 249,
          "code": "const baseCompatibility = calculateElementalCompatibility(recipeDominant as any, userDominant as any);",
          "match": "as any"
        },
        {
          "file": "src/utils/elemental/core.ts",
          "line": 249,
          "code": "const baseCompatibility = calculateElementalCompatibility(recipeDominant as any, userDominant as any);",
          "match": "as any"
        },
        {
          "file": "src/utils/elemental/core.ts",
          "line": 321,
          "code": "if (recipe.elementalState && validateElementalProperties(recipe.elementalState as any)) {",
          "match": "as any"
        }
      ]
    },
    "src/utils/recommendationEngine.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/utils/recommendationEngine.ts",
          "line": 256,
          "code": "const planetScore = calculatePlanetaryScore(recipe, planetName as unknown as any);",
          "match": "as any"
        }
      ]
    },
    "src/utils/__tests__/buildQualityMonitor.test.ts": {
      "count": 10,
      "examples": [
        {
          "file": "src/utils/__tests__/buildQualityMonitor.test.ts",
          "line": 119,
          "code": "mockExistsSync.mockImplementation((path: any) => {",
          "match": "((path: any)"
        },
        {
          "file": "src/utils/__tests__/buildQualityMonitor.test.ts",
          "line": 137,
          "code": "mockExistsSync.mockImplementation((path: any) => {",
          "match": "((path: any)"
        },
        {
          "file": "src/utils/__tests__/buildQualityMonitor.test.ts",
          "line": 52,
          "code": "} as any);",
          "match": "as any"
        }
      ]
    },
    "src/utils/__tests__/typescriptCampaignTrigger.test.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/utils/__tests__/typescriptCampaignTrigger.test.ts",
          "line": 155,
          "code": "const error = new Error('Command failed') as any;",
          "match": "as any"
        }
      ]
    },
    "src/utils/__tests__/errorHandling.test.ts": {
      "count": 10,
      "examples": [
        {
          "file": "src/utils/__tests__/errorHandling.test.ts",
          "line": 141,
          "code": "} catch (enhancedError: any) {",
          "match": "catch (enhancedError: any)"
        },
        {
          "file": "src/utils/__tests__/errorHandling.test.ts",
          "line": 320,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/utils/__tests__/errorHandling.test.ts",
          "line": 333,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        }
      ]
    },
    "src/utils/recipeMatching.ts": {
      "count": 10,
      "examples": [
        {
          "file": "src/utils/recipeMatching.ts",
          "line": 164,
          "code": "// log.info(`After season sorting (${(matchFilters as any)?.season}): prioritized seasonal recipes`);",
          "match": "as any"
        },
        {
          "file": "src/utils/recipeMatching.ts",
          "line": 735,
          "code": "// Return the dominant modality if it has any count, otherwise null",
          "match": "as any"
        },
        {
          "file": "src/utils/recipeMatching.ts",
          "line": 1383,
          "code": "const influenceData = recipeInfluence as any;",
          "match": "as any"
        }
      ]
    },
    "src/utils/ingredientDataNormalizer.ts": {
      "count": 12,
      "examples": [
        {
          "file": "src/utils/ingredientDataNormalizer.ts",
          "line": 181,
          "code": "function normalizeCulinaryMethod(data: Record<string, unknown>): any {",
          "match": ": any "
        },
        {
          "file": "src/utils/ingredientDataNormalizer.ts",
          "line": 221,
          "code": "function normalizeVarietyData(data: Record<string, unknown>): any {",
          "match": ": any "
        },
        {
          "file": "src/utils/ingredientDataNormalizer.ts",
          "line": 241,
          "code": "export function normalizeStorage(storage: Record<string, unknown>): any {",
          "match": ": any "
        }
      ]
    },
    "src/utils/cuisineRecommender.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/utils/cuisineRecommender.ts",
          "line": 263,
          "code": "planetaryPositions: Record<string, any>",
          "match": "Record<string, any>"
        }
      ]
    },
    "src/utils/awaitThenableUtils.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/utils/awaitThenableUtils.ts",
          "line": 8,
          "code": "return value !== null && value !== undefined && typeof (value as any).then === 'function';",
          "match": "as any"
        }
      ]
    },
    "src/utils/nextConfigOptimizer.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/utils/nextConfigOptimizer.ts",
          "line": 10,
          "code": "private readonly logger: (message: string, ...args: any[]) => void;",
          "match": "(message: string, ...args: any[])"
        },
        {
          "file": "src/utils/nextConfigOptimizer.ts",
          "line": 10,
          "code": "private readonly logger: (message: string, ...args: any[]) => void;",
          "match": ": any[]"
        }
      ]
    },
    "src/utils/steeringFileIntelligence.ts": {
      "count": 7,
      "examples": [
        {
          "file": "src/utils/steeringFileIntelligence.ts",
          "line": 285,
          "code": "Object.values(planetaryPositions).forEach((position: any) => {",
          "match": "((position: any)"
        },
        {
          "file": "src/utils/steeringFileIntelligence.ts",
          "line": 309,
          "code": "Object.values(planetaryPositions).forEach((position: any) => {",
          "match": "((position: any)"
        },
        {
          "file": "src/utils/steeringFileIntelligence.ts",
          "line": 285,
          "code": "Object.values(planetaryPositions).forEach((position: any) => {",
          "match": ": any)"
        }
      ]
    },
    "src/utils/recipeCalculations.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/utils/recipeCalculations.ts",
          "line": 29,
          "code": "const recipeData = recipe as any;",
          "match": "as any"
        },
        {
          "file": "src/utils/recipeCalculations.ts",
          "line": 45,
          "code": "const recipeWindowData = recipe as any;",
          "match": "as any"
        },
        {
          "file": "src/utils/recipeCalculations.ts",
          "line": 65,
          "code": "const recipeBoostData = recipe as any;",
          "match": "as any"
        }
      ]
    },
    "src/utils/nutritionalUtils.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/utils/nutritionalUtils.ts",
          "line": 61,
          "code": "(usdaNutritionalData[key] as any)?.name || key",
          "match": "as any"
        },
        {
          "file": "src/utils/nutritionalUtils.ts",
          "line": 93,
          "code": "const profile1Macros = (profile1 as any)?.macros || {};",
          "match": "as any"
        },
        {
          "file": "src/utils/nutritionalUtils.ts",
          "line": 94,
          "code": "const profile2Macros = (profile2 as any)?.macros || {};",
          "match": "as any"
        }
      ]
    },
    "src/utils/data/processing.ts": {
      "count": 4,
      "examples": [
        {
          "file": "src/utils/data/processing.ts",
          "line": 47,
          "code": "export function standardizeElementalAffinity(",
          "match": "(\n  value: string | { base: string; decanModifiers?: { [key: string]: any } }\n)"
        },
        {
          "file": "src/utils/data/processing.ts",
          "line": 48,
          "code": "value: string | { base: string; decanModifiers?: { [key: string]: any } }",
          "match": ": any "
        },
        {
          "file": "src/utils/data/processing.ts",
          "line": 423,
          "code": "function standardizeNutritionalProfile(profile: unknown): { [key: string]: any } | undefined {",
          "match": ": any "
        }
      ]
    },
    "src/utils/flavorProfiles.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/utils/flavorProfiles.ts",
          "line": 11,
          "code": "const cuisineData = cuisine as any;",
          "match": "as any"
        }
      ]
    },
    "src/utils/naturalLanguageProcessor.ts": {
      "count": 8,
      "examples": [
        {
          "file": "src/utils/naturalLanguageProcessor.ts",
          "line": 431,
          "code": "export function enhancedSearch(",
          "match": "(\n  items: any[],\n  query: string,\n  searchFields: string[] = ['name', 'description']\n)"
        },
        {
          "file": "src/utils/naturalLanguageProcessor.ts",
          "line": 488,
          "code": "export function applyFilters(items: any[], filters: SearchFilters): any[] {",
          "match": "(items: any[], filters: SearchFilters)"
        },
        {
          "file": "src/utils/naturalLanguageProcessor.ts",
          "line": 374,
          "code": "extractedFilters[pattern.category] = [] as any;",
          "match": "as any"
        }
      ]
    },
    "src/utils/enhancedAlchemicalUtils.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/utils/enhancedAlchemicalUtils.ts",
          "line": 31,
          "code": "const resultData = alchemicalResult as any;",
          "match": "as any"
        },
        {
          "file": "src/utils/enhancedAlchemicalUtils.ts",
          "line": 127,
          "code": "const alchemicalResultData = alchemicalResult as any;",
          "match": "as any"
        }
      ]
    },
    "src/utils/developmentExperienceOptimizations.ts": {
      "count": 9,
      "examples": [
        {
          "file": "src/utils/developmentExperienceOptimizations.ts",
          "line": 232,
          "code": "function isPlanetaryPosition(obj: any): obj is PlanetaryPosition;",
          "match": "(obj: any)"
        },
        {
          "file": "src/utils/developmentExperienceOptimizations.ts",
          "line": 233,
          "code": "function isElementalProperties(obj: any): obj is ElementalProperties;",
          "match": "(obj: any)"
        },
        {
          "file": "src/utils/developmentExperienceOptimizations.ts",
          "line": 424,
          "code": "} as any;",
          "match": "as any"
        }
      ]
    },
    "src/utils/formatElementalAffinity.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/utils/formatElementalAffinity.ts",
          "line": 16,
          "code": "primary: input as any,",
          "match": "as any"
        },
        {
          "file": "src/utils/formatElementalAffinity.ts",
          "line": 23,
          "code": "const inputData = input as any;",
          "match": "as any"
        }
      ]
    },
    "src/utils/alchemyInitializer.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/utils/alchemyInitializer.ts",
          "line": 35,
          "code": "return alchemicalEngine.alchemize(birthInfo as any, horoscopeDict as any);",
          "match": "as any"
        },
        {
          "file": "src/utils/alchemyInitializer.ts",
          "line": 35,
          "code": "return alchemicalEngine.alchemize(birthInfo as any, horoscopeDict as any);",
          "match": "as any"
        }
      ]
    },
    "src/utils/BuildValidator.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/utils/BuildValidator.ts",
          "line": 241,
          "code": "private getManifestDefaults(): Record<string, any> {",
          "match": "Record<string, any>"
        }
      ]
    },
    "src/utils/cookingMethodTips.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/utils/cookingMethodTips.ts",
          "line": 340,
          "code": "const methodObj = methodData as any;",
          "match": "as any"
        },
        {
          "file": "src/utils/cookingMethodTips.ts",
          "line": 413,
          "code": "const methodObj = methodData as any;",
          "match": "as any"
        },
        {
          "file": "src/utils/cookingMethodTips.ts",
          "line": 766,
          "code": "const methodObj = methodData as any;",
          "match": "as any"
        }
      ]
    },
    "src/utils/astrology/validation.ts": {
      "count": 7,
      "examples": [
        {
          "file": "src/utils/astrology/validation.ts",
          "line": 496,
          "code": "export function validatePlanetaryPositions(",
          "match": "(\n  positions: { [key: string]: any }, \n  date: Date = new Date()"
        },
        {
          "file": "src/utils/astrology/validation.ts",
          "line": 48,
          "code": "ZodiacTransit?: { [key: string]: any };",
          "match": ": any "
        },
        {
          "file": "src/utils/astrology/validation.ts",
          "line": 497,
          "code": "positions: { [key: string]: any },",
          "match": ": any "
        }
      ]
    },
    "src/utils/astrology/astrologicalValidation.ts": {
      "count": 4,
      "examples": [
        {
          "file": "src/utils/astrology/astrologicalValidation.ts",
          "line": 182,
          "code": "if (typeof sign !== 'string' || !TRANSIT_CONSTANTS.VALID_SIGNS.includes(sign.toLowerCase() as any)) {",
          "match": "as any"
        },
        {
          "file": "src/utils/astrology/astrologicalValidation.ts",
          "line": 248,
          "code": "if (TRANSIT_CONSTANTS.ALWAYS_DIRECT.includes(planet.toLowerCase() as any) && isRetrograde) {",
          "match": "as any"
        },
        {
          "file": "src/utils/astrology/astrologicalValidation.ts",
          "line": 255,
          "code": "if (TRANSIT_CONSTANTS.ALWAYS_RETROGRADE.includes(planet.toLowerCase() as any) && !isRetrograde) {",
          "match": "as any"
        }
      ]
    },
    "src/utils/astrology/astrologicalRules.test.ts": {
      "count": 12,
      "examples": [
        {
          "file": "src/utils/astrology/astrologicalRules.test.ts",
          "line": 92,
          "code": "expect((result.correctedData as any)?.sun?.degree).toBeLessThan(30);",
          "match": "as any"
        },
        {
          "file": "src/utils/astrology/astrologicalRules.test.ts",
          "line": 93,
          "code": "expect((result.correctedData as any)?.sun?.exactLongitude).toBeLessThan(360);",
          "match": "as any"
        },
        {
          "file": "src/utils/astrology/astrologicalRules.test.ts",
          "line": 188,
          "code": "expect(validateTransitDate('mars', ariesDate, 'aries', mockTransitDates as any)).toBe(true);",
          "match": "as any"
        }
      ]
    },
    "src/utils/astrology/positions.ts": {
      "count": 4,
      "examples": [
        {
          "file": "src/utils/astrology/positions.ts",
          "line": 413,
          "code": "export function validatePositionsStructure(positions: { [key: string]: any }): boolean {",
          "match": "(positions: { [key: string]: any })"
        },
        {
          "file": "src/utils/astrology/positions.ts",
          "line": 155,
          "code": "export function getFallbackPlanetaryPositions(date: Date): { [key: string]: any } {",
          "match": ": any "
        },
        {
          "file": "src/utils/astrology/positions.ts",
          "line": 156,
          "code": "const positions: { [key: string]: any } = {};",
          "match": ": any "
        }
      ]
    },
    "src/utils/astrology/core.ts": {
      "count": 5,
      "examples": [
        {
          "file": "src/utils/astrology/core.ts",
          "line": 243,
          "code": "const moonLong = (positions.Moon as any)?.longitude || 0;",
          "match": "as any"
        },
        {
          "file": "src/utils/astrology/core.ts",
          "line": 244,
          "code": "const sunLong = (positions.Sun as any)?.longitude || 0;",
          "match": "as any"
        },
        {
          "file": "src/utils/astrology/core.ts",
          "line": 44,
          "code": "positions: Record<string, any>",
          "match": "Record<string, any>"
        }
      ]
    },
    "src/utils/astrology/transitValidation.ts": {
      "count": 6,
      "examples": [
        {
          "file": "src/utils/astrology/transitValidation.ts",
          "line": 47,
          "code": "const startDate = new Date(transit.Start as any);",
          "match": "as any"
        },
        {
          "file": "src/utils/astrology/transitValidation.ts",
          "line": 48,
          "code": "const endDate = new Date(transit.End as any);",
          "match": "as any"
        },
        {
          "file": "src/utils/astrology/transitValidation.ts",
          "line": 158,
          "code": "const startDate = new Date(transit.Start as any);",
          "match": "as any"
        }
      ]
    },
    "src/utils/astrology/elementalValidation.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/utils/astrology/elementalValidation.ts",
          "line": 60,
          "code": "(normalized as any)[element] = value;",
          "match": "as any"
        }
      ]
    },
    "src/components/demo/AstrologizeDemo.tsx": {
      "count": 1,
      "examples": [
        {
          "file": "src/components/demo/AstrologizeDemo.tsx",
          "line": 65,
          "code": "const options: any = {",
          "match": ": any "
        }
      ]
    },
    "src/components/ElementalDisplay/ElementalEnergyDisplay.migrated.tsx": {
      "count": 4,
      "examples": [
        {
          "file": "src/components/ElementalDisplay/ElementalEnergyDisplay.migrated.tsx",
          "line": 161,
          "code": "function calculateElementalEnergies(",
          "match": "(\n  planetaryPositions: { [key: string]: any },\n  isDaytime = true\n)"
        },
        {
          "file": "src/components/ElementalDisplay/ElementalEnergyDisplay.migrated.tsx",
          "line": 257,
          "code": "function getPlanetaryInfluencers(",
          "match": "(\n  planetaryPositions: { [key: string]: any },\n  elementType: ElementType\n)"
        },
        {
          "file": "src/components/ElementalDisplay/ElementalEnergyDisplay.migrated.tsx",
          "line": 162,
          "code": "planetaryPositions: { [key: string]: any },",
          "match": ": any "
        }
      ]
    },
    "src/components/Settings/Settings.tsx": {
      "count": 1,
      "examples": [
        {
          "file": "src/components/Settings/Settings.tsx",
          "line": 191,
          "code": "restrictions: settings.dietary.restrictions as any,",
          "match": "as any"
        }
      ]
    },
    "src/components/RecipeList/RecipeList.tsx": {
      "count": 2,
      "examples": [
        {
          "file": "src/components/RecipeList/RecipeList.tsx",
          "line": 112,
          "code": "filteredByCuisine = ensureScoredRecipes(cuisineFiltered as any);",
          "match": "as any"
        },
        {
          "file": "src/components/RecipeList/RecipeList.tsx",
          "line": 191,
          "code": "const scoredRecipes = ensureScoredRecipes(recipesData as any);",
          "match": "as any"
        }
      ]
    },
    "src/components/RecipeList/RecipeList.migrated.tsx": {
      "count": 4,
      "examples": [
        {
          "file": "src/components/RecipeList/RecipeList.migrated.tsx",
          "line": 595,
          "code": "const handleFilterChange = (key: keyof FilterState, value: any) => {",
          "match": "(key: keyof FilterState, value: any)"
        },
        {
          "file": "src/components/RecipeList/RecipeList.migrated.tsx",
          "line": 366,
          "code": "const astrologize: AstrologizeAPI = (window as any).astrologize;",
          "match": "as any"
        },
        {
          "file": "src/components/RecipeList/RecipeList.migrated.tsx",
          "line": 518,
          "code": "const convertedRecipes: Recipe[] = (response as any[]).map(alchemyRecipe => ({",
          "match": "as any"
        }
      ]
    },
    "src/components/FoodRecommendations.tsx": {
      "count": 2,
      "examples": [
        {
          "file": "src/components/FoodRecommendations.tsx",
          "line": 11,
          "code": "onRecommendationSelect?: (recommendation: any) => void;",
          "match": "(recommendation: any)"
        },
        {
          "file": "src/components/FoodRecommendations.tsx",
          "line": 11,
          "code": "onRecommendationSelect?: (recommendation: any) => void;",
          "match": ": any)"
        }
      ]
    },
    "src/components/AstrologicalClock.tsx": {
      "count": 2,
      "examples": [
        {
          "file": "src/components/AstrologicalClock.tsx",
          "line": 47,
          "code": "const posData = pos as any;",
          "match": "as any"
        },
        {
          "file": "src/components/AstrologicalClock.tsx",
          "line": 181,
          "code": "const planetData = data as any;",
          "match": "as any"
        }
      ]
    },
    "src/components/AlchmKitchen.tsx": {
      "count": 2,
      "examples": [
        {
          "file": "src/components/AlchmKitchen.tsx",
          "line": 66,
          "code": "sign: (planetaryPositions.Sun as any)?.sign || 'aries',",
          "match": "as any"
        },
        {
          "file": "src/components/AlchmKitchen.tsx",
          "line": 67,
          "code": "degree: (planetaryPositions.Sun as any)?.degree || 0",
          "match": "as any"
        }
      ]
    },
    "src/components/CookingMethods.tsx": {
      "count": 5,
      "examples": [
        {
          "file": "src/components/CookingMethods.tsx",
          "line": 973,
          "code": "examples = getIdealIngredients(method as any).map(ingredient => String(ingredient));",
          "match": "as any"
        },
        {
          "file": "src/components/CookingMethods.tsx",
          "line": 1361,
          "code": "const lunarMultiplier = getLunarMultiplier(adaptedPhase as any);",
          "match": "as any"
        },
        {
          "file": "src/components/CookingMethods.tsx",
          "line": 1398,
          "code": "? determineMatchReason(methodWithThermodynamics as any, astroState as any)",
          "match": "as any"
        }
      ]
    },
    "src/components/quality/QualityMetricsDashboard.tsx": {
      "count": 21,
      "examples": [
        {
          "file": "src/components/quality/QualityMetricsDashboard.tsx",
          "line": 171,
          "code": "data: buildMetrics.history.map((build: any, index: number) => ({",
          "match": "((build: any, index: number)"
        },
        {
          "file": "src/components/quality/QualityMetricsDashboard.tsx",
          "line": 182,
          "code": "data: errorData.summary.topErrorCategories.map((cat: any) => ({",
          "match": "((cat: any)"
        },
        {
          "file": "src/components/quality/QualityMetricsDashboard.tsx",
          "line": 193,
          "code": "data: errorData.qualityHistory.map((quality: any, index: number) => ({",
          "match": "((quality: any, index: number)"
        }
      ]
    },
    "src/components/SauceRecommendations.tsx": {
      "count": 7,
      "examples": [
        {
          "file": "src/components/SauceRecommendations.tsx",
          "line": 130,
          "code": "const calculateRecipeCompatibility = (sauce: SauceData, selectedRecipe?: any): number => {",
          "match": "(sauce: SauceData, selectedRecipe?: any)"
        },
        {
          "file": "src/components/SauceRecommendations.tsx",
          "line": 137,
          "code": "const recipeIngredientNames = selectedRecipe.ingredients.map((ing: any) =>",
          "match": "((ing: any)"
        },
        {
          "file": "src/components/SauceRecommendations.tsx",
          "line": 182,
          "code": "const enhanceSauceWithAnalytics = (",
          "match": "(\n  sauce: SauceData,\n  currentElementalProfile: ElementalProperties,\n  currentZodiac?: string,\n  lunarPhase?: string,\n  currentSeason?: string,\n  selectedRecipe?: any\n)"
        }
      ]
    },
    "src/components/intelligence/EnterpriseIntelligencePanel.tsx": {
      "count": 7,
      "examples": [
        {
          "file": "src/components/intelligence/EnterpriseIntelligencePanel.tsx",
          "line": 48,
          "code": "onAnalysisComplete?: (analysis: any) => void;",
          "match": "(analysis: any)"
        },
        {
          "file": "src/components/intelligence/EnterpriseIntelligencePanel.tsx",
          "line": 72,
          "code": "} as any);",
          "match": "as any"
        },
        {
          "file": "src/components/intelligence/EnterpriseIntelligencePanel.tsx",
          "line": 482,
          "code": "onClick={() => setActiveTab(tab.id as any)}",
          "match": "as any"
        }
      ]
    },
    "src/components/LocationButton.tsx": {
      "count": 1,
      "examples": [
        {
          "file": "src/components/LocationButton.tsx",
          "line": 27,
          "code": "const location = await (AstrologicalService as any)?.requestLocation?.();",
          "match": "as any"
        }
      ]
    },
    "src/components/IngredientCard.tsx": {
      "count": 3,
      "examples": [
        {
          "file": "src/components/IngredientCard.tsx",
          "line": 39,
          "code": "}) as any);",
          "match": "as any"
        },
        {
          "file": "src/components/IngredientCard.tsx",
          "line": 250,
          "code": "const ingredientData = ingredient as any;",
          "match": "as any"
        },
        {
          "file": "src/components/IngredientCard.tsx",
          "line": 276,
          "code": "const ingredientData = ingredient as any;",
          "match": "as any"
        }
      ]
    },
    "src/components/Recipe/RecipeRecommendations.migrated.tsx": {
      "count": 2,
      "examples": [
        {
          "file": "src/components/Recipe/RecipeRecommendations.migrated.tsx",
          "line": 51,
          "code": "[key: string]: any;",
          "match": ": any;"
        },
        {
          "file": "src/components/Recipe/RecipeRecommendations.migrated.tsx",
          "line": 63,
          "code": "[key: string]: any;",
          "match": ": any;"
        }
      ]
    },
    "src/components/Recipe/RecipeFilters.migrated.tsx": {
      "count": 1,
      "examples": [
        {
          "file": "src/components/Recipe/RecipeFilters.migrated.tsx",
          "line": 86,
          "code": "const serviceData = recipeService as any;",
          "match": "as any"
        }
      ]
    },
    "src/components/layout/MainPageLayout.tsx": {
      "count": 16,
      "examples": [
        {
          "file": "src/components/layout/MainPageLayout.tsx",
          "line": 69,
          "code": "updateCurrentRecipe: (recipe: any | null) => void;",
          "match": "(recipe: any | null)"
        },
        {
          "file": "src/components/layout/MainPageLayout.tsx",
          "line": 73,
          "code": "notifyComponentUpdate: (componentId: string, data: any) => void;",
          "match": "(componentId: string, data: any)"
        },
        {
          "file": "src/components/layout/MainPageLayout.tsx",
          "line": 74,
          "code": "subscribeToUpdates: (componentId: string, callback: (data: any) => void) => () => void;",
          "match": "(componentId: string, callback: (data: any)"
        }
      ]
    },
    "src/components/layout/__tests__/MainPageLayout.test.tsx": {
      "count": 1,
      "examples": [
        {
          "file": "src/components/layout/__tests__/MainPageLayout.test.tsx",
          "line": 195,
          "code": "jest.spyOn(document, 'getElementById').mockReturnValue(mockElement as any);",
          "match": "as any"
        }
      ]
    },
    "src/components/PlanetaryPositionInitializer.tsx": {
      "count": 2,
      "examples": [
        {
          "file": "src/components/PlanetaryPositionInitializer.tsx",
          "line": 73,
          "code": "sunPosition: (positions.sun as any)?.sign,",
          "match": "as any"
        },
        {
          "file": "src/components/PlanetaryPositionInitializer.tsx",
          "line": 74,
          "code": "moonPosition: (positions.moon as any)?.sign,",
          "match": "as any"
        }
      ]
    },
    "src/components/MoonDisplay.migrated.tsx": {
      "count": 5,
      "examples": [
        {
          "file": "src/components/MoonDisplay.migrated.tsx",
          "line": 192,
          "code": "const getMoonTimes = serviceData.getMoonTimes as ((date: Date, coords: any) => Promise<any>) | undefined;",
          "match": "((date: Date, coords: any)"
        },
        {
          "file": "src/components/MoonDisplay.migrated.tsx",
          "line": 192,
          "code": "const getMoonTimes = serviceData.getMoonTimes as ((date: Date, coords: any) => Promise<any>) | undefined;",
          "match": ": any)"
        },
        {
          "file": "src/components/MoonDisplay.migrated.tsx",
          "line": 169,
          "code": "const getUserLocation = serviceData.getUserLocation as (() => Promise<any>) | undefined;",
          "match": "Promise<any>"
        }
      ]
    },
    "src/components/CuisineRecommender/index.tsx": {
      "count": 6,
      "examples": [
        {
          "file": "src/components/CuisineRecommender/index.tsx",
          "line": 197,
          "code": "{(recipe as any).alchemicalScores && (",
          "match": "as any"
        },
        {
          "file": "src/components/CuisineRecommender/index.tsx",
          "line": 203,
          "code": "<span>{(((recipe.alchemicalScores as any)?.elementalScore ?? 0) * 100).toFixed(0)}%</span>",
          "match": "as any"
        },
        {
          "file": "src/components/CuisineRecommender/index.tsx",
          "line": 207,
          "code": "<span>{(((recipe.alchemicalScores as any)?.zodiacalScore ?? 0) * 100).toFixed(0)}%</span>",
          "match": "as any"
        }
      ]
    },
    "src/components/ElementalVisualizer.migrated.tsx": {
      "count": 8,
      "examples": [
        {
          "file": "src/components/ElementalVisualizer.migrated.tsx",
          "line": 56,
          "code": "function addToCache(key: string, value: any): void {",
          "match": "(key: string, value: any)"
        },
        {
          "file": "src/components/ElementalVisualizer.migrated.tsx",
          "line": 451,
          "code": "comparisonPoints = (elements || [] as any).map((element: any, i: number) => {",
          "match": "((element: any, i: number)"
        },
        {
          "file": "src/components/ElementalVisualizer.migrated.tsx",
          "line": 509,
          "code": "points={(comparisonPoints as any).map((p: any) => `${p.x},${p.y}`)?.join(' ')}",
          "match": "((p: any)"
        }
      ]
    },
    "src/components/FoodRecommender/KalchmRecommender.tsx": {
      "count": 3,
      "examples": [
        {
          "file": "src/components/FoodRecommender/KalchmRecommender.tsx",
          "line": 22,
          "code": "const elementalState = (alchemicalContext as any)?.elementalState;",
          "match": "as any"
        },
        {
          "file": "src/components/FoodRecommender/KalchmRecommender.tsx",
          "line": 36,
          "code": "const positionData = position as any;",
          "match": "as any"
        },
        {
          "file": "src/components/FoodRecommender/KalchmRecommender.tsx",
          "line": 33,
          "code": "const convertedPositions: { [key: string]: any } = {};",
          "match": ": any "
        }
      ]
    },
    "src/components/FoodRecommender/IngredientDisplay.migrated.tsx": {
      "count": 2,
      "examples": [
        {
          "file": "src/components/FoodRecommender/IngredientDisplay.migrated.tsx",
          "line": 67,
          "code": "const transformedIngredients: Ingredient[] = (recommendations.items || []).map((item: any) => ({",
          "match": "((item: any)"
        },
        {
          "file": "src/components/FoodRecommender/IngredientDisplay.migrated.tsx",
          "line": 67,
          "code": "const transformedIngredients: Ingredient[] = (recommendations.items || []).map((item: any) => ({",
          "match": ": any)"
        }
      ]
    },
    "src/components/FoodRecommender/IngredientDisplay.tsx": {
      "count": 4,
      "examples": [
        {
          "file": "src/components/FoodRecommender/IngredientDisplay.tsx",
          "line": 17,
          "code": "const elementalProperties = (astroData as any)?.elementalProperties || (astroData as any)?.state?.elementalProperties;",
          "match": "as any"
        },
        {
          "file": "src/components/FoodRecommender/IngredientDisplay.tsx",
          "line": 17,
          "code": "const elementalProperties = (astroData as any)?.elementalProperties || (astroData as any)?.state?.elementalProperties;",
          "match": "as any"
        },
        {
          "file": "src/components/FoodRecommender/IngredientDisplay.tsx",
          "line": 18,
          "code": "const planetaryPositions = (astroData as any)?.planetaryPositions || (astroData as any)?.positions;",
          "match": "as any"
        }
      ]
    },
    "src/components/SauceRecommender.tsx": {
      "count": 1,
      "examples": [
        {
          "file": "src/components/SauceRecommender.tsx",
          "line": 222,
          "code": "const generateSauceRecommendations = async (): Promise<any[]> => {",
          "match": "Promise<any[]>"
        }
      ]
    },
    "src/components/DebugInfo.tsx": {
      "count": 1,
      "examples": [
        {
          "file": "src/components/DebugInfo.tsx",
          "line": 35,
          "code": "<p>Current Sign: {(planetaryPositions.sun as any)?.sign || 'unknown'}</p>",
          "match": "as any"
        }
      ]
    },
    "src/components/recommendations/IngredientRecommender.migrated.tsx": {
      "count": 4,
      "examples": [
        {
          "file": "src/components/recommendations/IngredientRecommender.migrated.tsx",
          "line": 629,
          "code": "const applyPlanetaryElements = (",
          "match": "(\n  baseElementalProperties: any,\n  planetaryPositions: Record<string, PlanetaryPosition>,\n  isDaytime: boolean\n)"
        },
        {
          "file": "src/components/recommendations/IngredientRecommender.migrated.tsx",
          "line": 630,
          "code": "baseElementalProperties: any,",
          "match": ": any,"
        },
        {
          "file": "src/components/recommendations/IngredientRecommender.migrated.tsx",
          "line": 633,
          "code": "): any => {",
          "match": ": any "
        }
      ]
    },
    "src/components/recommendations/AlchemicalRecommendations.tsx": {
      "count": 1,
      "examples": [
        {
          "file": "src/components/recommendations/AlchemicalRecommendations.tsx",
          "line": 681,
          "code": ") : null) as any}",
          "match": "as any"
        }
      ]
    },
    "src/components/recommendations/AlchemicalRecommendations.migrated.tsx": {
      "count": 2,
      "examples": [
        {
          "file": "src/components/recommendations/AlchemicalRecommendations.migrated.tsx",
          "line": 355,
          "code": "let cookingMethods: any[] = [];",
          "match": ": any[]"
        },
        {
          "file": "src/components/recommendations/AlchemicalRecommendations.migrated.tsx",
          "line": 1054,
          "code": "function getRecommendedRecipes(_criteria: unknown): Promise<any[]> {",
          "match": "Promise<any[]>"
        }
      ]
    },
    "src/components/recommendations/CuisineRecommender.tsx": {
      "count": 10,
      "examples": [
        {
          "file": "src/components/recommendations/CuisineRecommender.tsx",
          "line": 385,
          "code": "cuisineData as any,",
          "match": "as any"
        },
        {
          "file": "src/components/recommendations/CuisineRecommender.tsx",
          "line": 397,
          "code": "} as any",
          "match": "as any"
        },
        {
          "file": "src/components/recommendations/CuisineRecommender.tsx",
          "line": 1307,
          "code": "{Math.round((enterpriseIntelligence as any).overallScore * 100 || 85)}%",
          "match": "as any"
        }
      ]
    },
    "src/components/IngredientRecommender.tsx": {
      "count": 32,
      "examples": [
        {
          "file": "src/components/IngredientRecommender.tsx",
          "line": 330,
          "code": "} as any, { limit: 40 });",
          "match": "as any"
        },
        {
          "file": "src/components/IngredientRecommender.tsx",
          "line": 562,
          "code": "else if (isOil(ingredient as any)) {",
          "match": "as any"
        },
        {
          "file": "src/components/IngredientRecommender.tsx",
          "line": 630,
          "code": "const targetCategory = normalizedCategory === 'other' ? determineCategory((item as any)?.name) : normalizedCategory;",
          "match": "as any"
        }
      ]
    },
    "src/components/IngredientRecommender/index.tsx": {
      "count": 2,
      "examples": [
        {
          "file": "src/components/IngredientRecommender/index.tsx",
          "line": 525,
          "code": "} as any, { limit: 40 });",
          "match": "as any"
        },
        {
          "file": "src/components/IngredientRecommender/index.tsx",
          "line": 1048,
          "code": "{(item as any)?.pairings && (",
          "match": "as any"
        }
      ]
    },
    "src/components/error-boundaries/ErrorLogger.tsx": {
      "count": 6,
      "examples": [
        {
          "file": "src/components/error-boundaries/ErrorLogger.tsx",
          "line": 213,
          "code": "fallbackValue?: any",
          "match": ": any\n  )"
        },
        {
          "file": "src/components/error-boundaries/ErrorLogger.tsx",
          "line": 235,
          "code": "fallbackValue?: any",
          "match": ": any\n  )"
        },
        {
          "file": "src/components/error-boundaries/ErrorLogger.tsx",
          "line": 236,
          "code": "): any => {",
          "match": ": any "
        }
      ]
    },
    "src/components/error-boundaries/ErrorBoundary.tsx": {
      "count": 5,
      "examples": [
        {
          "file": "src/components/error-boundaries/ErrorBoundary.tsx",
          "line": 162,
          "code": "if (typeof window !== 'undefined' && (window as any).reportError) {",
          "match": "as any"
        },
        {
          "file": "src/components/error-boundaries/ErrorBoundary.tsx",
          "line": 163,
          "code": "(window as any).reportError(error, {",
          "match": "as any"
        },
        {
          "file": "src/components/error-boundaries/ErrorBoundary.tsx",
          "line": 282,
          "code": "if (typeof window !== 'undefined' && (window as any).reportError) {",
          "match": "as any"
        }
      ]
    },
    "src/components/common/DisplayComponents.tsx": {
      "count": 2,
      "examples": [
        {
          "file": "src/components/common/DisplayComponents.tsx",
          "line": 85,
          "code": "const chakraEnergies = (state as any)?.chakraEnergies || null;",
          "match": "as any"
        },
        {
          "file": "src/components/common/DisplayComponents.tsx",
          "line": 205,
          "code": "const thermodynamicMetrics = (state as any)?.thermodynamicMetrics || null;",
          "match": "as any"
        }
      ]
    },
    "src/components/common/Utilities.tsx": {
      "count": 1,
      "examples": [
        {
          "file": "src/components/common/Utilities.tsx",
          "line": 191,
          "code": "data?: { [key: string]: any };",
          "match": ": any "
        }
      ]
    },
    "src/components/CookingMethodsSection.tsx": {
      "count": 5,
      "examples": [
        {
          "file": "src/components/CookingMethodsSection.tsx",
          "line": 110,
          "code": "const calculateAstrologicalScore = (methodData: any, astroState: any): number => {",
          "match": "(methodData: any, astroState: any)"
        },
        {
          "file": "src/components/CookingMethodsSection.tsx",
          "line": 245,
          "code": "} as any);",
          "match": "as any"
        },
        {
          "file": "src/components/CookingMethodsSection.tsx",
          "line": 262,
          "code": "} as any);",
          "match": "as any"
        }
      ]
    },
    "src/components/MoonDisplay.tsx": {
      "count": 4,
      "examples": [
        {
          "file": "src/components/MoonDisplay.tsx",
          "line": 108,
          "code": "const moon = (planetaryPositions as any)?.moon || { sign: 'unknown', degree: 0, exactLongitude: 0, isRetrograde: false };",
          "match": "as any"
        },
        {
          "file": "src/components/MoonDisplay.tsx",
          "line": 155,
          "code": "const coords = await ((AstrologicalService as any).requestLocation as Function)();",
          "match": "as any"
        },
        {
          "file": "src/components/MoonDisplay.tsx",
          "line": 391,
          "code": "? `Moon in ${capitalizeFirstLetter(String((moonData as any).sign))} ${formatDegree(Number((moonData as any).degree) || 0)}`",
          "match": "as any"
        }
      ]
    },
    "src/components/PlanetaryHours/SimplePlanetaryDisplay.migrated.tsx": {
      "count": 3,
      "examples": [
        {
          "file": "src/components/PlanetaryHours/SimplePlanetaryDisplay.migrated.tsx",
          "line": 28,
          "code": "const hourInfoData = hourInfo as any;",
          "match": "as any"
        },
        {
          "file": "src/components/PlanetaryHours/SimplePlanetaryDisplay.migrated.tsx",
          "line": 36,
          "code": "const dayPlanet = await (astrologyService as any)?.getCurrentPlanetaryDay?.();",
          "match": "as any"
        },
        {
          "file": "src/components/PlanetaryHours/SimplePlanetaryDisplay.migrated.tsx",
          "line": 40,
          "code": "const minutePlanet = await (astrologyService as any)?.getCurrentPlanetaryMinute?.();",
          "match": "as any"
        }
      ]
    },
    "src/components/PlanetaryHours/PlanetaryHoursDisplay.tsx": {
      "count": 1,
      "examples": [
        {
          "file": "src/components/PlanetaryHours/PlanetaryHoursDisplay.tsx",
          "line": 107,
          "code": "name: planetLowerCase as any, // PlanetName from celestial types",
          "match": "as any"
        }
      ]
    },
    "src/components/recipes/RecipeCard.tsx": {
      "count": 1,
      "examples": [
        {
          "file": "src/components/recipes/RecipeCard.tsx",
          "line": 418,
          "code": "const nutritionData = recipe.nutrition as any;",
          "match": "as any"
        }
      ]
    },
    "src/components/recipes/RecipeBuilderSimple.tsx": {
      "count": 4,
      "examples": [
        {
          "file": "src/components/recipes/RecipeBuilderSimple.tsx",
          "line": 10,
          "code": "onRecipeComplete?: (recipe: any) => void;",
          "match": "(recipe: any)"
        },
        {
          "file": "src/components/recipes/RecipeBuilderSimple.tsx",
          "line": 11,
          "code": "onSave?: (recipe: any) => void;",
          "match": "(recipe: any)"
        },
        {
          "file": "src/components/recipes/RecipeBuilderSimple.tsx",
          "line": 10,
          "code": "onRecipeComplete?: (recipe: any) => void;",
          "match": ": any)"
        }
      ]
    },
    "src/components/recipes/RecipeGrid.tsx": {
      "count": 1,
      "examples": [
        {
          "file": "src/components/recipes/RecipeGrid.tsx",
          "line": 330,
          "code": "const baseName = recipe.name ? (recipe as any).name.toLowerCase().replace(/\\s+/g, '-') : 'unknown';",
          "match": "as any"
        }
      ]
    },
    "src/components/recipes/RecipeBuilder.tsx": {
      "count": 6,
      "examples": [
        {
          "file": "src/components/recipes/RecipeBuilder.tsx",
          "line": 282,
          "code": "const addIngredient = useCallback((ingredient: any) => {",
          "match": "((ingredient: any)"
        },
        {
          "file": "src/components/recipes/RecipeBuilder.tsx",
          "line": 297,
          "code": "const updateIngredient = useCallback((index: number, field: keyof RecipeIngredient, value: any) => {",
          "match": "((index: number, field: keyof RecipeIngredient, value: any)"
        },
        {
          "file": "src/components/recipes/RecipeBuilder.tsx",
          "line": 507,
          "code": "methods: selectedMethods as any,",
          "match": "as any"
        }
      ]
    },
    "src/components/CuisineSection.tsx": {
      "count": 2,
      "examples": [
        {
          "file": "src/components/CuisineSection.tsx",
          "line": 65,
          "code": "setTraditionalSauces(saucesArray as any);",
          "match": "as any"
        },
        {
          "file": "src/components/CuisineSection.tsx",
          "line": 186,
          "code": "const specialRecipes: any[] = [];",
          "match": ": any[]"
        }
      ]
    },
    "src/components/CuisineSection/index.tsx": {
      "count": 1,
      "examples": [
        {
          "file": "src/components/CuisineSection/index.tsx",
          "line": 193,
          "code": "const specialRecipes: any[] = [];",
          "match": ": any[]"
        }
      ]
    },
    "src/components/CuisineSection/CuisineSection.migrated.tsx": {
      "count": 1,
      "examples": [
        {
          "file": "src/components/CuisineSection/CuisineSection.migrated.tsx",
          "line": 136,
          "code": "setCuisineRecipesFromService(responseData.data as any[]);",
          "match": "as any"
        }
      ]
    },
    "src/components/CuisineSpecificRecommendations.tsx": {
      "count": 3,
      "examples": [
        {
          "file": "src/components/CuisineSpecificRecommendations.tsx",
          "line": 31,
          "code": "const astroHookData = useAstrologicalState() as any;",
          "match": "as any"
        },
        {
          "file": "src/components/CuisineSpecificRecommendations.tsx",
          "line": 84,
          "code": "const recipeData = recipe as any;",
          "match": "as any"
        },
        {
          "file": "src/components/CuisineSpecificRecommendations.tsx",
          "line": 170,
          "code": "const ingredientData = ingredient as any;",
          "match": "as any"
        }
      ]
    },
    "src/components/campaign/CampaignIntegrationDashboard.tsx": {
      "count": 4,
      "examples": [
        {
          "file": "src/components/campaign/CampaignIntegrationDashboard.tsx",
          "line": 277,
          "code": "systemHealth: any;",
          "match": ": any;"
        },
        {
          "file": "src/components/campaign/CampaignIntegrationDashboard.tsx",
          "line": 278,
          "code": "activeCampaigns: any[];",
          "match": ": any[]"
        },
        {
          "file": "src/components/campaign/CampaignIntegrationDashboard.tsx",
          "line": 280,
          "code": "debugSessions: any[];",
          "match": ": any[]"
        }
      ]
    },
    "src/components/campaign/CampaignControlPanel.tsx": {
      "count": 2,
      "examples": [
        {
          "file": "src/components/campaign/CampaignControlPanel.tsx",
          "line": 231,
          "code": "onChange={(e) => setSafetyLevel(e.target.value as any)}",
          "match": "as any"
        },
        {
          "file": "src/components/campaign/CampaignControlPanel.tsx",
          "line": 427,
          "code": "result: any; // CampaignResult type from the integration service",
          "match": ": any;"
        }
      ]
    },
    "src/components/campaign/CampaignScheduler.tsx": {
      "count": 1,
      "examples": [
        {
          "file": "src/components/campaign/CampaignScheduler.tsx",
          "line": 270,
          "code": "onChange={(e) => setFormData({ ...formData, recurrence: e.target.value as any })}",
          "match": "as any"
        }
      ]
    },
    "src/components/campaign/ConflictResolutionPanel.tsx": {
      "count": 3,
      "examples": [
        {
          "file": "src/components/campaign/ConflictResolutionPanel.tsx",
          "line": 111,
          "code": "const handleManualOverride = async (action: ResolutionAction, parameters: Record<string, any>) => {",
          "match": "Record<string, any>"
        },
        {
          "file": "src/components/campaign/ConflictResolutionPanel.tsx",
          "line": 523,
          "code": "onSubmit: (action: ResolutionAction, parameters: Record<string, any>) => void;",
          "match": "Record<string, any>"
        },
        {
          "file": "src/components/campaign/ConflictResolutionPanel.tsx",
          "line": 527,
          "code": "const [parameters, setParameters] = useState<Record<string, any>>({});",
          "match": "Record<string, any>"
        }
      ]
    },
    "src/components/RealtimeAlchemicalCalculator.tsx": {
      "count": 2,
      "examples": [
        {
          "file": "src/components/RealtimeAlchemicalCalculator.tsx",
          "line": 56,
          "code": "function planetaryPositionsToAlchemicalValues(positions: { [key: string]: any }) {",
          "match": "(positions: { [key: string]: any })"
        },
        {
          "file": "src/components/RealtimeAlchemicalCalculator.tsx",
          "line": 56,
          "code": "function planetaryPositionsToAlchemicalValues(positions: { [key: string]: any }) {",
          "match": ": any "
        }
      ]
    },
    "src/components/MethodsRecommender.tsx": {
      "count": 3,
      "examples": [
        {
          "file": "src/components/MethodsRecommender.tsx",
          "line": 98,
          "code": "const baseScore = calculateMethodScore(safeMethodData, astroState as any);",
          "match": "as any"
        },
        {
          "file": "src/components/MethodsRecommender.tsx",
          "line": 247,
          "code": "{(method.duration as any)?.min || 0}-{(method.duration as any)?.max || 0} min",
          "match": "as any"
        },
        {
          "file": "src/components/MethodsRecommender.tsx",
          "line": 247,
          "code": "{(method.duration as any)?.min || 0}-{(method.duration as any)?.max || 0} min",
          "match": "as any"
        }
      ]
    },
    "src/components/CuisineSelector.migrated.tsx": {
      "count": 1,
      "examples": [
        {
          "file": "src/components/CuisineSelector.migrated.tsx",
          "line": 51,
          "code": "const [resolvedPlanetaryPositions, setResolvedPlanetaryPositions] = useState<Record<string, any>>({});",
          "match": "Record<string, any>"
        }
      ]
    },
    "src/components/CuisineRecommender.tsx": {
      "count": 38,
      "examples": [
        {
          "file": "src/components/CuisineRecommender.tsx",
          "line": 231,
          "code": "const calculateAlchemicalBalance = (alchemicalProperties: any): number => {",
          "match": "(alchemicalProperties: any)"
        },
        {
          "file": "src/components/CuisineRecommender.tsx",
          "line": 276,
          "code": "const calculateRecipeKalchmHarmony = (",
          "match": "(\n  recipeThermodynamics: any,\n  cuisineThermodynamics?: any\n)"
        },
        {
          "file": "src/components/CuisineRecommender.tsx",
          "line": 299,
          "code": "const calculateThermodynamicOptimization = (",
          "match": "(\n  thermodynamics: any,\n  currentElementalProfile: ElementalProperties\n)"
        }
      ]
    },
    "src/components/ElementalRecommendations.migrated.tsx": {
      "count": 1,
      "examples": [
        {
          "file": "src/components/ElementalRecommendations.migrated.tsx",
          "line": 59,
          "code": "const elementalRecommendations = await (recommendationService as any)?.getElementalRecommendations?.(",
          "match": "as any"
        }
      ]
    },
    "src/components/RecipeRecommendations.tsx": {
      "count": 1,
      "examples": [
        {
          "file": "src/components/RecipeRecommendations.tsx",
          "line": 257,
          "code": "{typeof ing === 'string' ? ing : (ing as any).name || 'ingredient'}",
          "match": "as any"
        }
      ]
    },
    "src/components/CuisineSelector.tsx": {
      "count": 2,
      "examples": [
        {
          "file": "src/components/CuisineSelector.tsx",
          "line": 160,
          "code": "return determineModalityFromElements((cuisine ).elementalState as any || (cuisine ).elementalProperties as any || {",
          "match": "as any"
        },
        {
          "file": "src/components/CuisineSelector.tsx",
          "line": 160,
          "code": "return determineModalityFromElements((cuisine ).elementalState as any || (cuisine ).elementalProperties as any || {",
          "match": "as any"
        }
      ]
    },
    "src/components/FoodRecommender.tsx": {
      "count": 6,
      "examples": [
        {
          "file": "src/components/FoodRecommender.tsx",
          "line": 100,
          "code": "create: function(_options?: any) {",
          "match": "(_options?: any)"
        },
        {
          "file": "src/components/FoodRecommender.tsx",
          "line": 105,
          "code": "on: function(_event: string, _callback?: any) {",
          "match": "(_event: string, _callback?: any)"
        },
        {
          "file": "src/components/FoodRecommender.tsx",
          "line": 117,
          "code": "on: function(_event: string, _callback?: any) {",
          "match": "(_event: string, _callback?: any)"
        }
      ]
    },
    "src/components/Header/FoodRecommender/index.tsx": {
      "count": 7,
      "examples": [
        {
          "file": "src/components/Header/FoodRecommender/index.tsx",
          "line": 546,
          "code": "{(currentPlanetaryAlignment as any)?.Sun ? (",
          "match": "as any"
        },
        {
          "file": "src/components/Header/FoodRecommender/index.tsx",
          "line": 553,
          "code": "{(currentPlanetaryAlignment as any)?.Moon ? (",
          "match": "as any"
        },
        {
          "file": "src/components/Header/FoodRecommender/index.tsx",
          "line": 709,
          "code": "{(ingredient as any)?.medicinalProperties && (",
          "match": "as any"
        }
      ]
    },
    "src/components/Header/Header.tsx": {
      "count": 4,
      "examples": [
        {
          "file": "src/components/Header/Header.tsx",
          "line": 57,
          "code": "<span>{(planetaryPositions.sun as any)?.sign}</span>",
          "match": "as any"
        },
        {
          "file": "src/components/Header/Header.tsx",
          "line": 63,
          "code": "<span>{(planetaryPositions.moon as any)?.sign}</span>",
          "match": "as any"
        },
        {
          "file": "src/components/Header/Header.tsx",
          "line": 105,
          "code": "Sun in {(planetaryPositions.sun as any)?.sign}",
          "match": "as any"
        }
      ]
    },
    "src/components/TarotDisplay.tsx": {
      "count": 4,
      "examples": [
        {
          "file": "src/components/TarotDisplay.tsx",
          "line": 42,
          "code": "onTarotLoaded?: (data: {",
          "match": "(data: { \n    minorCard: unknown; \n    majorCard: unknown; \n    planetaryCards?: { [key: string]: any };\n    alchemicalValues?: AlchemicalValues;\n  \n  mode: unknown;})"
        },
        {
          "file": "src/components/TarotDisplay.tsx",
          "line": 61,
          "code": "const hasSunPosition = (alignment: { [key: string]: any }): alignment is { Sun: PlanetaryPosition } => {",
          "match": "(alignment: { [key: string]: any })"
        },
        {
          "file": "src/components/TarotDisplay.tsx",
          "line": 45,
          "code": "planetaryCards?: { [key: string]: any };",
          "match": ": any "
        }
      ]
    },
    "src/components/help/CodeTemplates.tsx": {
      "count": 25,
      "examples": [
        {
          "file": "src/components/help/CodeTemplates.tsx",
          "line": 76,
          "code": "function calculateElementalInfluences(positions: any): ElementalProperties {",
          "match": "(positions: any)"
        },
        {
          "file": "src/components/help/CodeTemplates.tsx",
          "line": 125,
          "code": "private async calculate{{CALCULATION_TYPE}}(",
          "match": "(\n    positions: any,\n    {{PARAMETERS}}\n  )"
        },
        {
          "file": "src/components/help/CodeTemplates.tsx",
          "line": 144,
          "code": "private calculateFireInfluence(positions: any): number {",
          "match": "(positions: any)"
        }
      ]
    },
    "src/components/help/AstrologicalCodeSuggestions.tsx": {
      "count": 3,
      "examples": [
        {
          "file": "src/components/help/AstrologicalCodeSuggestions.tsx",
          "line": 220,
          "code": "function calculateAlchemicalScore(",
          "match": "(\n  ingredient: any,\n  context: { season: string; culture: CuisineType; timing: Date }\n)"
        },
        {
          "file": "src/components/help/AstrologicalCodeSuggestions.tsx",
          "line": 304,
          "code": "onChange={(e) => setSelectedCategory(e.target.value as any)}",
          "match": "as any"
        },
        {
          "file": "src/components/help/AstrologicalCodeSuggestions.tsx",
          "line": 221,
          "code": "ingredient: any,",
          "match": ": any,"
        }
      ]
    },
    "src/components/debug/ConsolidatedDebugInfo.tsx": {
      "count": 1,
      "examples": [
        {
          "file": "src/components/debug/ConsolidatedDebugInfo.tsx",
          "line": 210,
          "code": "<div>Sun Sign: {(planetaryPositions.sun as any)?.sign || 'Unknown'}</div>",
          "match": "as any"
        }
      ]
    },
    "src/components/debug/AlchemicalDebug.tsx": {
      "count": 1,
      "examples": [
        {
          "file": "src/components/debug/AlchemicalDebug.tsx",
          "line": 66,
          "code": "const ingredientData = testResults.ingredient as any;",
          "match": "as any"
        }
      ]
    },
    "src/components/debug/InfiniteLoopDetector.tsx": {
      "count": 5,
      "examples": [
        {
          "file": "src/components/debug/InfiniteLoopDetector.tsx",
          "line": 84,
          "code": "if (typeof window !== 'undefined' && (window as any).__REACT_DEVTOOLS_GLOBAL_HOOK__) {",
          "match": "as any"
        },
        {
          "file": "src/components/debug/InfiniteLoopDetector.tsx",
          "line": 85,
          "code": "const hook = (window as any).__REACT_DEVTOOLS_GLOBAL_HOOK__;",
          "match": "as any"
        },
        {
          "file": "src/components/debug/InfiniteLoopDetector.tsx",
          "line": 5,
          "code": "threshold?: any;",
          "match": ": any;"
        }
      ]
    },
    "src/components/debug/StateInspector.tsx": {
      "count": 2,
      "examples": [
        {
          "file": "src/components/debug/StateInspector.tsx",
          "line": 44,
          "code": "const formatPosition = (position: any): string => {",
          "match": "(position: any)"
        },
        {
          "file": "src/components/debug/StateInspector.tsx",
          "line": 44,
          "code": "const formatPosition = (position: any): string => {",
          "match": ": any)"
        }
      ]
    },
    "src/components/debug/UnifiedDebug.tsx": {
      "count": 1,
      "examples": [
        {
          "file": "src/components/debug/UnifiedDebug.tsx",
          "line": 15,
          "code": "ingredient: { name: string; dominantElement?: string; [key: string]: any };",
          "match": ": any "
        }
      ]
    },
    "src/components/debug/MoonInfoDisplay.tsx": {
      "count": 8,
      "examples": [
        {
          "file": "src/components/debug/MoonInfoDisplay.tsx",
          "line": 36,
          "code": "const moonAspects = (astrologicalData.aspects as unknown as any[]).filter((aspect: any) =>",
          "match": "((aspect: any)"
        },
        {
          "file": "src/components/debug/MoonInfoDisplay.tsx",
          "line": 361,
          "code": "function calculateMoonKalchm(moonPosition: any, lunarPhase: any): number {",
          "match": "(moonPosition: any, lunarPhase: any)"
        },
        {
          "file": "src/components/debug/MoonInfoDisplay.tsx",
          "line": 400,
          "code": "function calculateLunarNodes(moonPosition: any): { north: { sign: string; degree: number }, south: { sign: string; degree: number } } {",
          "match": "(moonPosition: any)"
        }
      ]
    },
    "src/components/debug/StateDebugger.tsx": {
      "count": 2,
      "examples": [
        {
          "file": "src/components/debug/StateDebugger.tsx",
          "line": 17,
          "code": "const copyToClipboard = async (data: any, label: string) => {",
          "match": "(data: any, label: string)"
        },
        {
          "file": "src/components/debug/StateDebugger.tsx",
          "line": 17,
          "code": "const copyToClipboard = async (data: any, label: string) => {",
          "match": ": any,"
        }
      ]
    },
    "src/components/debug/CuisineRecommenderDebug.tsx": {
      "count": 1,
      "examples": [
        {
          "file": "src/components/debug/CuisineRecommenderDebug.tsx",
          "line": 27,
          "code": "data: any;",
          "match": ": any;"
        }
      ]
    },
    "src/__tests__/linting/CampaignSystemRuleValidation.test.ts": {
      "count": 105,
      "examples": [
        {
          "file": "src/__tests__/linting/CampaignSystemRuleValidation.test.ts",
          "line": 32,
          "code": "private executeComplexCampaign(config: any) {",
          "match": "(config: any)"
        },
        {
          "file": "src/__tests__/linting/CampaignSystemRuleValidation.test.ts",
          "line": 110,
          "code": "const complexityErrors = result[0].messages.filter((msg: any) =>",
          "match": "((msg: any)"
        },
        {
          "file": "src/__tests__/linting/CampaignSystemRuleValidation.test.ts",
          "line": 122,
          "code": "const complexityErrors = result[0].messages.filter((msg: any) =>",
          "match": "((msg: any)"
        }
      ]
    },
    "src/__tests__/linting/ZeroErrorAchievementDashboard.test.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/__tests__/linting/ZeroErrorAchievementDashboard.test.ts",
          "line": 579,
          "code": "const overallProgress = dashboard['calculateOverallProgress'](targets as any);",
          "match": "as any"
        },
        {
          "file": "src/__tests__/linting/ZeroErrorAchievementDashboard.test.ts",
          "line": 608,
          "code": "const status1 = dashboard['getOverallStatus'](mockValidationResult, passingGates as any);",
          "match": "as any"
        },
        {
          "file": "src/__tests__/linting/ZeroErrorAchievementDashboard.test.ts",
          "line": 615,
          "code": "const status2 = dashboard['getOverallStatus'](mockValidationResult, failingGates as any);",
          "match": "as any"
        }
      ]
    },
    "src/__tests__/linting/React19NextJS15CompatibilityValidation.test.ts": {
      "count": 9,
      "examples": [
        {
          "file": "src/__tests__/linting/React19NextJS15CompatibilityValidation.test.ts",
          "line": 646,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/__tests__/linting/React19NextJS15CompatibilityValidation.test.ts",
          "line": 478,
          "code": "const reactSettings = eslintConfig.find((config: any) =>",
          "match": "((config: any)"
        },
        {
          "file": "src/__tests__/linting/React19NextJS15CompatibilityValidation.test.ts",
          "line": 490,
          "code": "const reactRules = eslintConfig.find((config: any) =>",
          "match": "((config: any)"
        }
      ]
    },
    "src/__tests__/linting/DomainSpecificRuleBehavior.test.ts": {
      "count": 8,
      "examples": [
        {
          "file": "src/__tests__/linting/DomainSpecificRuleBehavior.test.ts",
          "line": 417,
          "code": "const debugAstronomicalCalculation = (planet: string, position: any) => {",
          "match": "(planet: string, position: any)"
        },
        {
          "file": "src/__tests__/linting/DomainSpecificRuleBehavior.test.ts",
          "line": 431,
          "code": "const calculatePlanetaryInfluence = (",
          "match": "(\n        planetPosition: any,\n        elementalProperties: any,\n        transitDates: any\n      )"
        },
        {
          "file": "src/__tests__/linting/DomainSpecificRuleBehavior.test.ts",
          "line": 522,
          "code": "const result = validatePlanetaryPositions(data as any);",
          "match": "as any"
        }
      ]
    },
    "src/__tests__/linting/ESLintConfigurationValidation.test.ts": {
      "count": 42,
      "examples": [
        {
          "file": "src/__tests__/linting/ESLintConfigurationValidation.test.ts",
          "line": 38,
          "code": "const jsConfig = config.find((c: any) =>",
          "match": "((c: any)"
        },
        {
          "file": "src/__tests__/linting/ESLintConfigurationValidation.test.ts",
          "line": 46,
          "code": "const tsConfig = config.find((c: any) =>",
          "match": "((c: any)"
        },
        {
          "file": "src/__tests__/linting/ESLintConfigurationValidation.test.ts",
          "line": 58,
          "code": "const astroConfig = config.find((c: any) =>",
          "match": "((c: any)"
        }
      ]
    },
    "src/__tests__/linting/ComprehensiveLintingTestSuite.test.ts": {
      "count": 46,
      "examples": [
        {
          "file": "src/__tests__/linting/ComprehensiveLintingTestSuite.test.ts",
          "line": 72,
          "code": "const hasJavaScriptConfig = config.some((c: any) =>",
          "match": "((c: any)"
        },
        {
          "file": "src/__tests__/linting/ComprehensiveLintingTestSuite.test.ts",
          "line": 75,
          "code": "const hasTypeScriptConfig = config.some((c: any) =>",
          "match": "((c: any)"
        },
        {
          "file": "src/__tests__/linting/ComprehensiveLintingTestSuite.test.ts",
          "line": 78,
          "code": "const hasAstrologicalConfig = config.some((c: any) =>",
          "match": "((c: any)"
        }
      ]
    },
    "src/__tests__/linting/AutomatedErrorResolution.test.ts": {
      "count": 10,
      "examples": [
        {
          "file": "src/__tests__/linting/AutomatedErrorResolution.test.ts",
          "line": 84,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/__tests__/linting/AutomatedErrorResolution.test.ts",
          "line": 84,
          "code": "} catch (error: any) {",
          "match": "(error: any)"
        },
        {
          "file": "src/__tests__/linting/AutomatedErrorResolution.test.ts",
          "line": 403,
          "code": "function processData(data: any) { // Should be error",
          "match": "(data: any)"
        }
      ]
    },
    "src/__tests__/linting/DomainSpecificRuleValidation.test.ts": {
      "count": 51,
      "examples": [
        {
          "file": "src/__tests__/linting/DomainSpecificRuleValidation.test.ts",
          "line": 142,
          "code": "const unusedVarErrors = result[0].messages.filter((msg: any) =>",
          "match": "((msg: any)"
        },
        {
          "file": "src/__tests__/linting/DomainSpecificRuleValidation.test.ts",
          "line": 155,
          "code": "const unusedVarErrors = result[0].messages.filter((msg: any) =>",
          "match": "((msg: any)"
        },
        {
          "file": "src/__tests__/linting/DomainSpecificRuleValidation.test.ts",
          "line": 303,
          "code": "const complexityErrors = result[0].messages.filter((msg: any) =>",
          "match": "((msg: any)"
        }
      ]
    },
    "src/__tests__/linting/AstrologicalRuleValidation.test.ts": {
      "count": 47,
      "examples": [
        {
          "file": "src/__tests__/linting/AstrologicalRuleValidation.test.ts",
          "line": 171,
          "code": "const unusedVarErrors = result[0].messages.filter((msg: any) =>",
          "match": "((msg: any)"
        },
        {
          "file": "src/__tests__/linting/AstrologicalRuleValidation.test.ts",
          "line": 185,
          "code": "const unusedVarErrors = result[0].messages.filter((msg: any) =>",
          "match": "((msg: any)"
        },
        {
          "file": "src/__tests__/linting/AstrologicalRuleValidation.test.ts",
          "line": 218,
          "code": "const unusedVarErrors = result[0].messages.filter((msg: any) =>",
          "match": "((msg: any)"
        }
      ]
    },
    "src/__tests__/linting/TestFileRuleValidation.test.ts": {
      "count": 67,
      "examples": [
        {
          "file": "src/__tests__/linting/TestFileRuleValidation.test.ts",
          "line": 62,
          "code": "const unusedVarErrors = result[0].messages.filter((msg: any) =>",
          "match": "((msg: any)"
        },
        {
          "file": "src/__tests__/linting/TestFileRuleValidation.test.ts",
          "line": 76,
          "code": "const unusedVarErrors = result[0].messages.filter((msg: any) =>",
          "match": "((msg: any)"
        },
        {
          "file": "src/__tests__/linting/TestFileRuleValidation.test.ts",
          "line": 125,
          "code": "const unusedVarErrors = result[0].messages.filter((msg: any) =>",
          "match": "((msg: any)"
        }
      ]
    },
    "src/__tests__/linting/ConfigurationFileRuleValidation.test.ts": {
      "count": 75,
      "examples": [
        {
          "file": "src/__tests__/linting/ConfigurationFileRuleValidation.test.ts",
          "line": 71,
          "code": "const dynamicRequireErrors = result[0].messages.filter((msg: any) =>",
          "match": "((msg: any)"
        },
        {
          "file": "src/__tests__/linting/ConfigurationFileRuleValidation.test.ts",
          "line": 83,
          "code": "const dynamicRequireErrors = result[0].messages.filter((msg: any) =>",
          "match": "((msg: any)"
        },
        {
          "file": "src/__tests__/linting/ConfigurationFileRuleValidation.test.ts",
          "line": 137,
          "code": "const dynamicRequireErrors = result[0].messages.filter((msg: any) =>",
          "match": "((msg: any)"
        }
      ]
    },
    "src/__tests__/types/testUtils.ts": {
      "count": 18,
      "examples": [
        {
          "file": "src/__tests__/types/testUtils.ts",
          "line": 26,
          "code": "setMockGitStatus: jest.MockedFunction<(status: any) => void>;",
          "match": "(status: any)"
        },
        {
          "file": "src/__tests__/types/testUtils.ts",
          "line": 50,
          "code": "setMockResult: jest.MockedFunction<(scriptPath: string, result: any) => void>;",
          "match": "(scriptPath: string, result: any)"
        },
        {
          "file": "src/__tests__/types/testUtils.ts",
          "line": 140,
          "code": "createMockFunction: (returnValue?: any) => jest.MockedFunction<any>;",
          "match": "(returnValue?: any)"
        }
      ]
    },
    "src/__tests__/types/testUtils.d.ts": {
      "count": 14,
      "examples": [
        {
          "file": "src/__tests__/types/testUtils.d.ts",
          "line": 49,
          "code": "setMockGitStatus: (status: any) => void;",
          "match": "(status: any)"
        },
        {
          "file": "src/__tests__/types/testUtils.d.ts",
          "line": 74,
          "code": "setMockResult: (scriptPath: string, result: any) => void;",
          "match": "(scriptPath: string, result: any)"
        },
        {
          "file": "src/__tests__/types/testUtils.d.ts",
          "line": 89,
          "code": "createMockFunction: (returnValue?: any) => Mock<any, [], any>;",
          "match": "(returnValue?: any)"
        }
      ]
    },
    "src/__tests__/setupMemoryManagement.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/__tests__/setupMemoryManagement.ts",
          "line": 296,
          "code": "var __TEST_REFS__: any[] | undefined;",
          "match": ": any[]"
        },
        {
          "file": "src/__tests__/setupMemoryManagement.ts",
          "line": 294,
          "code": "var cleanupTestMemory: () => any;",
          "match": "() => any"
        }
      ]
    },
    "src/__tests__/integration/memoryManagementIntegration.test.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/__tests__/integration/memoryManagementIntegration.test.ts",
          "line": 126,
          "code": "const largeArrays: any[][] = [];",
          "match": ": any[]"
        }
      ]
    },
    "src/__tests__/integration/buildSystemIntegration.test.ts": {
      "count": 6,
      "examples": [
        {
          "file": "src/__tests__/integration/buildSystemIntegration.test.ts",
          "line": 114,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/__tests__/integration/buildSystemIntegration.test.ts",
          "line": 127,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/__tests__/integration/buildSystemIntegration.test.ts",
          "line": 114,
          "code": "} catch (error: any) {",
          "match": "(error: any)"
        }
      ]
    },
    "src/__tests__/integration/MainPageIntegration.test.tsx": {
      "count": 1,
      "examples": [
        {
          "file": "src/__tests__/integration/MainPageIntegration.test.tsx",
          "line": 255,
          "code": "} as any));",
          "match": "as any"
        }
      ]
    },
    "src/__tests__/setupTests.tsx": {
      "count": 19,
      "examples": [
        {
          "file": "src/__tests__/setupTests.tsx",
          "line": 109,
          "code": "console.warn = (...args: any[]) => {",
          "match": "(...args: any[])"
        },
        {
          "file": "src/__tests__/setupTests.tsx",
          "line": 122,
          "code": "console.error = (...args: any[]) => {",
          "match": "(...args: any[])"
        },
        {
          "file": "src/__tests__/setupTests.tsx",
          "line": 152,
          "code": "setMockGitStatus: jest.fn((status: any) => { gitMock.mockGitStatus = status; }),",
          "match": "((status: any)"
        }
      ]
    },
    "src/__tests__/utils/TestSafeProgressTracker.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/__tests__/utils/TestSafeProgressTracker.ts",
          "line": 477,
          "code": "} as any;",
          "match": "as any"
        }
      ]
    },
    "src/__tests__/utils/CampaignTestController.ts": {
      "count": 6,
      "examples": [
        {
          "file": "src/__tests__/utils/CampaignTestController.ts",
          "line": 513,
          "code": "private restoreOriginalState(originalState: any): void {",
          "match": "(originalState: any)"
        },
        {
          "file": "src/__tests__/utils/CampaignTestController.ts",
          "line": 410,
          "code": "(process.env as any).NODE_ENV = 'test';",
          "match": "as any"
        },
        {
          "file": "src/__tests__/utils/CampaignTestController.ts",
          "line": 31,
          "code": "originalState: any;",
          "match": ": any;"
        }
      ]
    },
    "src/__tests__/utils/TestMemoryMonitor.test.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/__tests__/utils/TestMemoryMonitor.test.ts",
          "line": 255,
          "code": "(global as any).gc = undefined;",
          "match": "as any"
        }
      ]
    },
    "src/__tests__/utils/RealTimeTestRunner.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/__tests__/utils/RealTimeTestRunner.ts",
          "line": 222,
          "code": "): { isValid: boolean; issues: string[]; summary: any } {",
          "match": ": any "
        }
      ]
    },
    "src/__tests__/utils/campaignTestUtils.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/__tests__/utils/campaignTestUtils.ts",
          "line": 118,
          "code": "safetyLevel: 'HIGH' as any",
          "match": "as any"
        },
        {
          "file": "src/__tests__/utils/campaignTestUtils.ts",
          "line": 355,
          "code": "memoryStats: any;",
          "match": ": any;"
        }
      ]
    },
    "src/__tests__/utils/TestResultValidator.ts": {
      "count": 16,
      "examples": [
        {
          "file": "src/__tests__/utils/TestResultValidator.ts",
          "line": 11,
          "code": "validator: (result: any) => boolean;",
          "match": "(result: any)"
        },
        {
          "file": "src/__tests__/utils/TestResultValidator.ts",
          "line": 21,
          "code": "customValidator?: (results: any[]) => boolean;",
          "match": "(results: any[])"
        },
        {
          "file": "src/__tests__/utils/TestResultValidator.ts",
          "line": 166,
          "code": "validateResult(result: any, category: string): ValidationResult {",
          "match": "(result: any, category: string)"
        }
      ]
    },
    "src/__tests__/utils/MemoryOptimizationScript.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/__tests__/utils/MemoryOptimizationScript.ts",
          "line": 193,
          "code": "if (typeof window !== 'undefined' && (window as any)._eventListeners) {",
          "match": "as any"
        },
        {
          "file": "src/__tests__/utils/MemoryOptimizationScript.ts",
          "line": 194,
          "code": "(window as any)._eventListeners = {};",
          "match": "as any"
        }
      ]
    },
    "src/__tests__/utils/BuildValidator.test.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/__tests__/utils/BuildValidator.test.ts",
          "line": 156,
          "code": "} as any);",
          "match": "as any"
        }
      ]
    },
    "src/__tests__/utils/TestUtils.ts": {
      "count": 8,
      "examples": [
        {
          "file": "src/__tests__/utils/TestUtils.ts",
          "line": 317,
          "code": "if ((global as any).__TEST_CACHE__) {",
          "match": "as any"
        },
        {
          "file": "src/__tests__/utils/TestUtils.ts",
          "line": 318,
          "code": "(global as any).__TEST_CACHE__.clear();",
          "match": "as any"
        },
        {
          "file": "src/__tests__/utils/TestUtils.ts",
          "line": 196,
          "code": "): Promise<{ success: boolean; metrics: any; issues: string[] }> {",
          "match": ": any;"
        }
      ]
    },
    "src/__tests__/utils/MemoryLeakDetector.ts": {
      "count": 11,
      "examples": [
        {
          "file": "src/__tests__/utils/MemoryLeakDetector.ts",
          "line": 43,
          "code": ".reduce((sum: number, listeners: any) => sum + (listeners?.length || 0), 0);",
          "match": "((sum: number, listeners: any)"
        },
        {
          "file": "src/__tests__/utils/MemoryLeakDetector.ts",
          "line": 207,
          "code": "listeners.forEach((listener: any) => {",
          "match": "((listener: any)"
        },
        {
          "file": "src/__tests__/utils/MemoryLeakDetector.ts",
          "line": 41,
          "code": "if (typeof window !== 'undefined' && (window as any)._eventListeners) {",
          "match": "as any"
        }
      ]
    },
    "src/__tests__/setupTests.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/__tests__/setupTests.ts",
          "line": 6,
          "code": "(process.env as any).NODE_ENV = 'test';",
          "match": "as any"
        }
      ]
    },
    "src/__tests__/e2e/MainPageWorkflows.test.tsx": {
      "count": 3,
      "examples": [
        {
          "file": "src/__tests__/e2e/MainPageWorkflows.test.tsx",
          "line": 54,
          "code": "const handleCuisineSelect = (cuisine: any) => {",
          "match": "(cuisine: any)"
        },
        {
          "file": "src/__tests__/e2e/MainPageWorkflows.test.tsx",
          "line": 451,
          "code": "} as any));",
          "match": "as any"
        },
        {
          "file": "src/__tests__/e2e/MainPageWorkflows.test.tsx",
          "line": 54,
          "code": "const handleCuisineSelect = (cuisine: any) => {",
          "match": ": any)"
        }
      ]
    },
    "src/__tests__/validation/IntegrationValidation.test.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/__tests__/validation/IntegrationValidation.test.ts",
          "line": 160,
          "code": "expect(typeof (remover as any).processFile).toBe('function');",
          "match": "as any"
        },
        {
          "file": "src/__tests__/validation/IntegrationValidation.test.ts",
          "line": 161,
          "code": "expect(typeof (remover as any).processDirectory).toBe('function');",
          "match": "as any"
        }
      ]
    },
    "src/__tests__/validation/MainPageValidation.test.tsx": {
      "count": 7,
      "examples": [
        {
          "file": "src/__tests__/validation/MainPageValidation.test.tsx",
          "line": 44,
          "code": "constructor(props: any) {",
          "match": "(props: any)"
        },
        {
          "file": "src/__tests__/validation/MainPageValidation.test.tsx",
          "line": 54,
          "code": "if ((this.state as any).hasError) {",
          "match": "as any"
        },
        {
          "file": "src/__tests__/validation/MainPageValidation.test.tsx",
          "line": 57,
          "code": "return (this.props as any).children;",
          "match": "as any"
        }
      ]
    },
    "src/hooks/useAstrology.ts": {
      "count": 6,
      "examples": [
        {
          "file": "src/hooks/useAstrology.ts",
          "line": 168,
          "code": "if (!response || !(response as any).ok) {",
          "match": "as any"
        },
        {
          "file": "src/hooks/useAstrology.ts",
          "line": 169,
          "code": "const errorData = await (response as any)?.json?.() || { error: `API error: ${(response as any)?.status || 'Network error'}` };",
          "match": "as any"
        },
        {
          "file": "src/hooks/useAstrology.ts",
          "line": 169,
          "code": "const errorData = await (response as any)?.json?.() || { error: `API error: ${(response as any)?.status || 'Network error'}` };",
          "match": "as any"
        }
      ]
    },
    "src/hooks/useCookingMethods.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/hooks/useCookingMethods.ts",
          "line": 45,
          "code": "const data = methodData as any;",
          "match": "as any"
        },
        {
          "file": "src/hooks/useCookingMethods.ts",
          "line": 75,
          "code": "const data = methodData as any;",
          "match": "as any"
        }
      ]
    },
    "src/hooks/useElementalState.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/hooks/useElementalState.ts",
          "line": 30,
          "code": "const element = elementMap[(position as any)?.sign as keyof typeof elementMap];",
          "match": "as any"
        }
      ]
    },
    "src/hooks/useRealtimePlanetaryPositions.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/hooks/useRealtimePlanetaryPositions.ts",
          "line": 153,
          "code": "const body: any = { date: date.toISOString() };",
          "match": ": any "
        }
      ]
    },
    "src/hooks/useEnterpriseIntelligence.ts": {
      "count": 36,
      "examples": [
        {
          "file": "src/hooks/useEnterpriseIntelligence.ts",
          "line": 43,
          "code": "performAnalysis: (",
          "match": "(\n    recipeData: any,\n    ingredientData: any,\n    astrologicalContext: {\n      zodiacSign: ZodiacSign;\n      lunarPhase: LunarPhase;\n      elementalProperties: ElementalProperties;\n      planetaryPositions?: any;\n    }\n  )"
        },
        {
          "file": "src/hooks/useEnterpriseIntelligence.ts",
          "line": 190,
          "code": "const performAnalysis = useCallback(async (",
          "match": "(async (\n    recipeData: any,\n    ingredientData: any,\n    astrologicalContext: {\n      zodiacSign: ZodiacSign;\n      lunarPhase: LunarPhase;\n      elementalProperties: ElementalProperties;\n      planetaryPositions?: any;\n    }\n  )"
        },
        {
          "file": "src/hooks/useEnterpriseIntelligence.ts",
          "line": 127,
          "code": "recipe: (state.analysis.recipeIntelligence as any)?.recommendations || [],",
          "match": "as any"
        }
      ]
    },
    "src/hooks/useAstrologicalState.ts": {
      "count": 4,
      "examples": [
        {
          "file": "src/hooks/useAstrologicalState.ts",
          "line": 212,
          "code": "setAstroState((prev: any) => {",
          "match": "((prev: any)"
        },
        {
          "file": "src/hooks/useAstrologicalState.ts",
          "line": 203,
          "code": "const activePlanets = getActivePlanets(memoizedPlanetaryPositions as any);",
          "match": "as any"
        },
        {
          "file": "src/hooks/useAstrologicalState.ts",
          "line": 204,
          "code": "const currentZodiac = ((memoizedPlanetaryPositions.sun as any)?.sign || '').toLowerCase();",
          "match": "as any"
        }
      ]
    },
    "src/hooks/useStatePreservation.ts": {
      "count": 5,
      "examples": [
        {
          "file": "src/hooks/useStatePreservation.ts",
          "line": 200,
          "code": "const preserveContext = useCallback((context: {",
          "match": "((context: {\n    fromPage?: string;\n    selectedItems?: any[];\n    activeSection?: string;\n    scrollPosition?: number;\n    timestamp?: number;\n  })"
        },
        {
          "file": "src/hooks/useStatePreservation.ts",
          "line": 234,
          "code": "const saveAstrologicalState = useCallback(async (state: {",
          "match": "(async (state: {\n    elementalProperties?: ElementalProperties;\n    selectedIngredients?: string[];\n    astrologicalContext?: any;\n  })"
        },
        {
          "file": "src/hooks/useStatePreservation.ts",
          "line": 237,
          "code": "astrologicalContext?: any;",
          "match": ": any;"
        }
      ]
    },
    "src/hooks/useFoodRecommendations.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/hooks/useFoodRecommendations.ts",
          "line": 36,
          "code": "} as any;",
          "match": "as any"
        }
      ]
    },
    "src/hooks/usePerformanceMetrics.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/hooks/usePerformanceMetrics.ts",
          "line": 108,
          "code": "const memInfo = (performance as any).memory;",
          "match": "as any"
        }
      ]
    },
    "src/hooks/useAstrologize.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/hooks/useAstrologize.ts",
          "line": 57,
          "code": "const coords = await (AstrologicalService as any)?.requestLocation?.();",
          "match": "as any"
        },
        {
          "file": "src/hooks/useAstrologize.ts",
          "line": 23,
          "code": "data: any;",
          "match": ": any;"
        }
      ]
    },
    "src/hooks/useAlchemicalRecommendations.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/hooks/useAlchemicalRecommendations.ts",
          "line": 109,
          "code": "const convertToLocalAlchemicalItem = (items: any[]): AlchemicalItem[] => {",
          "match": "(items: any[])"
        },
        {
          "file": "src/hooks/useAlchemicalRecommendations.ts",
          "line": 83,
          "code": "planetPositions as any,",
          "match": "as any"
        },
        {
          "file": "src/hooks/useAlchemicalRecommendations.ts",
          "line": 109,
          "code": "const convertToLocalAlchemicalItem = (items: any[]): AlchemicalItem[] => {",
          "match": ": any[]"
        }
      ]
    },
    "src/hooks/useSafeFlavorEngine.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/hooks/useSafeFlavorEngine.ts",
          "line": 118,
          "code": "const searchProfiles = useCallback((_criteria: any): UnifiedFlavorProfile[] => {",
          "match": "((_criteria: any)"
        },
        {
          "file": "src/hooks/useSafeFlavorEngine.ts",
          "line": 118,
          "code": "const searchProfiles = useCallback((_criteria: any): UnifiedFlavorProfile[] => {",
          "match": ": any)"
        }
      ]
    },
    "src/hooks/useTarotAstrologyData.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/hooks/useTarotAstrologyData.ts",
          "line": 290,
          "code": "const cards: any[] = [];",
          "match": ": any[]"
        }
      ]
    },
    "src/hooks/useContextServiceBridge.ts": {
      "count": 7,
      "examples": [
        {
          "file": "src/hooks/useContextServiceBridge.ts",
          "line": 25,
          "code": "const elementalCalculator = (serviceData as any)?.elementalCalculator;",
          "match": "as any"
        },
        {
          "file": "src/hooks/useContextServiceBridge.ts",
          "line": 26,
          "code": "const chakraService = (serviceData as any)?.chakraService;",
          "match": "as any"
        },
        {
          "file": "src/hooks/useContextServiceBridge.ts",
          "line": 70,
          "code": "isDaytime: daytime !== undefined ? daytime : (contextState as any)?.isDaytime,",
          "match": "as any"
        }
      ]
    },
    "src/hooks/useAstrologicalInfluence.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/hooks/useAstrologicalInfluence.ts",
          "line": 58,
          "code": "const element = elementMap[(position as any)?.sign as keyof typeof elementMap];",
          "match": "as any"
        }
      ]
    },
    "src/hooks/useErrorHandler.ts": {
      "count": 5,
      "examples": [
        {
          "file": "src/hooks/useErrorHandler.ts",
          "line": 16,
          "code": "captureError: (error: Error | string, context?: any) => void;",
          "match": "(error: Error | string, context?: any)"
        },
        {
          "file": "src/hooks/useErrorHandler.ts",
          "line": 43,
          "code": "const captureError = useCallback((error: Error | string, context: any = {}) => {",
          "match": "((error: Error | string, context: any = {})"
        },
        {
          "file": "src/hooks/useErrorHandler.ts",
          "line": 16,
          "code": "captureError: (error: Error | string, context?: any) => void;",
          "match": ": any)"
        }
      ]
    },
    "src/hooks/useIngredientRecommendations.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/hooks/useIngredientRecommendations.ts",
          "line": 66,
          "code": "const element = elementMap[(position as any)?.sign as keyof typeof elementMap];",
          "match": "as any"
        },
        {
          "file": "src/hooks/useIngredientRecommendations.ts",
          "line": 139,
          "code": "const score = calculateElementalCompatibility((ingredient as any)?.elementalPropertiesProfile || ingredient.elementalProfile, currentElementalProfile);",
          "match": "as any"
        }
      ]
    },
    "src/hooks/useRecommendationAnalytics.ts": {
      "count": 5,
      "examples": [
        {
          "file": "src/hooks/useRecommendationAnalytics.ts",
          "line": 44,
          "code": "calculateConfidence: (factors: any) => RecommendationConfidence;",
          "match": "(factors: any)"
        },
        {
          "file": "src/hooks/useRecommendationAnalytics.ts",
          "line": 185,
          "code": "const calculateConfidence = useCallback((factors: any): RecommendationConfidence => {",
          "match": "((factors: any)"
        },
        {
          "file": "src/hooks/useRecommendationAnalytics.ts",
          "line": 196,
          "code": "type: type as any,",
          "match": "as any"
        }
      ]
    },
    "src/hooks/useRecipeRecommendations.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/hooks/useRecipeRecommendations.ts",
          "line": 62,
          "code": "const positionData = position as any;",
          "match": "as any"
        }
      ]
    },
    "src/hooks/useCurrentChart.ts": {
      "count": 5,
      "examples": [
        {
          "file": "src/hooks/useCurrentChart.ts",
          "line": 57,
          "code": "sign: (data as any)?.sign || 'Aries',",
          "match": "as any"
        },
        {
          "file": "src/hooks/useCurrentChart.ts",
          "line": 58,
          "code": "degree: (data as any)?.degree || 0,",
          "match": "as any"
        },
        {
          "file": "src/hooks/useCurrentChart.ts",
          "line": 59,
          "code": "isRetrograde: (data as any)?.isRetrograde || false,",
          "match": "as any"
        }
      ]
    },
    "src/examples/ServiceIntegrationExample.ts": {
      "count": 7,
      "examples": [
        {
          "file": "src/examples/ServiceIntegrationExample.ts",
          "line": 41,
          "code": "const astrologyServiceData = astrologyService as any;",
          "match": "as any"
        },
        {
          "file": "src/examples/ServiceIntegrationExample.ts",
          "line": 49,
          "code": "const alchemicalEngineData = alchemicalEngine as any;",
          "match": "as any"
        },
        {
          "file": "src/examples/ServiceIntegrationExample.ts",
          "line": 61,
          "code": "items: (ingredientRecommendations.items || [] as any[]).map(ing => ing.name),",
          "match": "as any"
        }
      ]
    },
    "src/scripts/runLintingTests.ts": {
      "count": 5,
      "examples": [
        {
          "file": "src/scripts/runLintingTests.ts",
          "line": 120,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/scripts/runLintingTests.ts",
          "line": 120,
          "code": "} catch (error: any) {",
          "match": "(error: any)"
        },
        {
          "file": "src/scripts/runLintingTests.ts",
          "line": 402,
          "code": "const perfConfig = config.find((c: any) =>",
          "match": "((c: any)"
        }
      ]
    },
    "src/scripts/safe-unused-import-remover.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/scripts/safe-unused-import-remover.ts",
          "line": 142,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/scripts/safe-unused-import-remover.ts",
          "line": 142,
          "code": "} catch (error: any) {",
          "match": "(error: any)"
        },
        {
          "file": "src/scripts/safe-unused-import-remover.ts",
          "line": 142,
          "code": "} catch (error: any) {",
          "match": ": any)"
        }
      ]
    },
    "src/scripts/replaceConsoleStatements.ts": {
      "count": 16,
      "examples": [
        {
          "file": "src/scripts/replaceConsoleStatements.ts",
          "line": 176,
          "code": "info(message: string, ...args: any[]): void;",
          "match": "(message: string, ...args: any[])"
        },
        {
          "file": "src/scripts/replaceConsoleStatements.ts",
          "line": 177,
          "code": "warn(message: string, ...args: any[]): void;",
          "match": "(message: string, ...args: any[])"
        },
        {
          "file": "src/scripts/replaceConsoleStatements.ts",
          "line": 178,
          "code": "error(message: string, ...args: any[]): void;",
          "match": "(message: string, ...args: any[])"
        }
      ]
    },
    "src/scripts/validateReact19NextJS15Compatibility.ts": {
      "count": 10,
      "examples": [
        {
          "file": "src/scripts/validateReact19NextJS15Compatibility.ts",
          "line": 61,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/scripts/validateReact19NextJS15Compatibility.ts",
          "line": 61,
          "code": "} catch (error: any) {",
          "match": "(error: any)"
        },
        {
          "file": "src/scripts/validateReact19NextJS15Compatibility.ts",
          "line": 426,
          "code": "const reactSettings = eslintConfig.find((config: any) =>",
          "match": "((config: any)"
        }
      ]
    },
    "src/scripts/runPerformanceValidation.ts": {
      "count": 5,
      "examples": [
        {
          "file": "src/scripts/runPerformanceValidation.ts",
          "line": 234,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/scripts/runPerformanceValidation.ts",
          "line": 234,
          "code": "} catch (error: any) {",
          "match": "(error: any)"
        },
        {
          "file": "src/scripts/runPerformanceValidation.ts",
          "line": 279,
          "code": "command: 'validate' as any",
          "match": "as any"
        }
      ]
    },
    "src/calculations/alchemicalEngine.ts": {
      "count": 11,
      "examples": [
        {
          "file": "src/calculations/alchemicalEngine.ts",
          "line": 358,
          "code": "} as any);",
          "match": "as any"
        },
        {
          "file": "src/calculations/alchemicalEngine.ts",
          "line": 454,
          "code": "primary: element1 as any,",
          "match": "as any"
        },
        {
          "file": "src/calculations/alchemicalEngine.ts",
          "line": 455,
          "code": "secondary: element2 as any,",
          "match": "as any"
        }
      ]
    },
    "src/calculations/enhancedCuisineRecommender.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/calculations/enhancedCuisineRecommender.ts",
          "line": 18,
          "code": "ingredients?: any[];",
          "match": ": any[]"
        }
      ]
    },
    "src/calculations/culinaryAstrology.ts": {
      "count": 6,
      "examples": [
        {
          "file": "src/calculations/culinaryAstrology.ts",
          "line": 270,
          "code": "const planetData = p as any;",
          "match": "as any"
        },
        {
          "file": "src/calculations/culinaryAstrology.ts",
          "line": 275,
          "code": "const planetData = jupiterPlanet as any;",
          "match": "as any"
        },
        {
          "file": "src/calculations/culinaryAstrology.ts",
          "line": 289,
          "code": "const recipeData = recipe as any;",
          "match": "as any"
        }
      ]
    },
    "src/calculations/core/elementalCalculations.ts": {
      "count": 9,
      "examples": [
        {
          "file": "src/calculations/core/elementalCalculations.ts",
          "line": 341,
          "code": "calculateOverallOptimization: (optimizations: any): number => {",
          "match": "(optimizations: any)"
        },
        {
          "file": "src/calculations/core/elementalCalculations.ts",
          "line": 342,
          "code": "const adjustments = Object.values(optimizations).map((opt: any) => opt.adjustment);",
          "match": "((opt: any)"
        },
        {
          "file": "src/calculations/core/elementalCalculations.ts",
          "line": 346,
          "code": "generateOptimizationImplementation: (optimizations: any, context: string): string[] => {",
          "match": "(optimizations: any, context: string)"
        }
      ]
    },
    "src/calculations/alchemicalCalculations.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/calculations/alchemicalCalculations.ts",
          "line": 846,
          "code": "const sign = (position as any).sign?.toLowerCase() || '';",
          "match": "as any"
        },
        {
          "file": "src/calculations/alchemicalCalculations.ts",
          "line": 905,
          "code": "const planetDataObj = planetData as any;",
          "match": "as any"
        }
      ]
    },
    "src/calculations/combinationEffects.ts": {
      "count": 7,
      "examples": [
        {
          "file": "src/calculations/combinationEffects.ts",
          "line": 110,
          "code": "const aValue = (a as any)?.modifier || (a as any)?.strength || 0;",
          "match": "as any"
        },
        {
          "file": "src/calculations/combinationEffects.ts",
          "line": 110,
          "code": "const aValue = (a as any)?.modifier || (a as any)?.strength || 0;",
          "match": "as any"
        },
        {
          "file": "src/calculations/combinationEffects.ts",
          "line": 111,
          "code": "const bValue = (b as any)?.modifier || (b as any)?.strength || 0;",
          "match": "as any"
        }
      ]
    },
    "src/calculations/enhancedAlchemicalMatching.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/calculations/enhancedAlchemicalMatching.ts",
          "line": 925,
          "code": "const recommendation = generateEnhancedRecommendation(mockResult as any, [], 'summer');",
          "match": "as any"
        }
      ]
    },
    "src/calculations/index.ts": {
      "count": 19,
      "examples": [
        {
          "file": "src/calculations/index.ts",
          "line": 64,
          "code": "analyzeComprehensiveResult: (alchemicalResult: ComprehensiveAlchemicalResult, context: any = {}) => {",
          "match": "(alchemicalResult: ComprehensiveAlchemicalResult, context: any = {})"
        },
        {
          "file": "src/calculations/index.ts",
          "line": 121,
          "code": "generateRecommendations: (analysis: any) => {",
          "match": "(analysis: any)"
        },
        {
          "file": "src/calculations/index.ts",
          "line": 151,
          "code": "analyzeCalculationInput: (input: any) => {",
          "match": "(input: any)"
        }
      ]
    },
    "src/calculations/alchemicalTransformation.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/calculations/alchemicalTransformation.ts",
          "line": 78,
          "code": "planetPositions as any,",
          "match": "as any"
        }
      ]
    },
    "src/calculations/elementalcalculations.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/calculations/elementalcalculations.ts",
          "line": 56,
          "code": "const recipeData = recipe as any;",
          "match": "as any"
        },
        {
          "file": "src/calculations/elementalcalculations.ts",
          "line": 293,
          "code": "const positionData = position as any;",
          "match": "as any"
        }
      ]
    },
    "src/lib/alchemicalEngine.ts": {
      "count": 4,
      "examples": [
        {
          "file": "src/lib/alchemicalEngine.ts",
          "line": 344,
          "code": ") as any;",
          "match": "as any"
        },
        {
          "file": "src/lib/alchemicalEngine.ts",
          "line": 396,
          "code": "const ingA = (ingredients[i] as unknown) as any;",
          "match": "as any"
        },
        {
          "file": "src/lib/alchemicalEngine.ts",
          "line": 397,
          "code": "const ingB = (ingredients[j] as unknown) as any;",
          "match": "as any"
        }
      ]
    },
    "src/lib/chakraRecipeEnhancer.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/lib/chakraRecipeEnhancer.ts",
          "line": 153,
          "code": "const astrologicalAffinities = recipe.astrologicalAffinities as any;",
          "match": "as any"
        },
        {
          "file": "src/lib/chakraRecipeEnhancer.ts",
          "line": 186,
          "code": "dominantChakra === 'solarPlexus' ? 'solar plexus' : dominantChakra as any,",
          "match": "as any"
        }
      ]
    },
    "src/lib/tarotCalculations.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/lib/tarotCalculations.ts",
          "line": 81,
          "code": "const cardData = card as any;",
          "match": "as any"
        },
        {
          "file": "src/lib/tarotCalculations.ts",
          "line": 357,
          "code": "const cardData = card as any;",
          "match": "as any"
        },
        {
          "file": "src/lib/tarotCalculations.ts",
          "line": 379,
          "code": "const cardData = card as any;",
          "match": "as any"
        }
      ]
    },
    "src/lib/ChakraAlchemyService.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/lib/ChakraAlchemyService.ts",
          "line": 196,
          "code": "const primaryEnergyState = (chakra as any)?.primaryEnergyState as keyof EnergyStateProperties;",
          "match": "as any"
        }
      ]
    },
    "src/lib/cuisineCalculations.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/lib/cuisineCalculations.ts",
          "line": 26,
          "code": "const traditionData = tradition as any;",
          "match": "as any"
        },
        {
          "file": "src/lib/cuisineCalculations.ts",
          "line": 64,
          "code": "const traditionData = tradition as any;",
          "match": "as any"
        },
        {
          "file": "src/lib/cuisineCalculations.ts",
          "line": 86,
          "code": "const regionData = region as any;",
          "match": "as any"
        }
      ]
    },
    "src/lib/ThermodynamicCalculator.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/lib/ThermodynamicCalculator.ts",
          "line": 19,
          "code": "const ingredientData = ingredient as any;",
          "match": "as any"
        },
        {
          "file": "src/lib/ThermodynamicCalculator.ts",
          "line": 68,
          "code": "const ingredientData = ingredient as any;",
          "match": "as any"
        },
        {
          "file": "src/lib/ThermodynamicCalculator.ts",
          "line": 120,
          "code": "const ingredientData = ingredient as any;",
          "match": "as any"
        }
      ]
    },
    "src/test-streamlined-system.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/test-streamlined-system.ts",
          "line": 56,
          "code": "const resultData = result as any;",
          "match": "as any"
        }
      ]
    },
    "src/data/cooking/methods/index.ts": {
      "count": 6,
      "examples": [
        {
          "file": "src/data/cooking/methods/index.ts",
          "line": 67,
          "code": "return (methodData?.suitable_for || []).some((type: any) =>",
          "match": "((type: any)"
        },
        {
          "file": "src/data/cooking/methods/index.ts",
          "line": 35,
          "code": "const methodData = method as any;",
          "match": "as any"
        },
        {
          "file": "src/data/cooking/methods/index.ts",
          "line": 51,
          "code": "const methodData = method as any;",
          "match": "as any"
        }
      ]
    },
    "src/data/cooking/index.ts": {
      "count": 4,
      "examples": [
        {
          "file": "src/data/cooking/index.ts",
          "line": 206,
          "code": "const methodData = method as any;",
          "match": "as any"
        },
        {
          "file": "src/data/cooking/index.ts",
          "line": 234,
          "code": "const methodData = method as any;",
          "match": "as any"
        },
        {
          "file": "src/data/cooking/index.ts",
          "line": 239,
          "code": "const aData = a as any;",
          "match": "as any"
        }
      ]
    },
    "src/data/nutritional.ts": {
      "count": 4,
      "examples": [
        {
          "file": "src/data/nutritional.ts",
          "line": 778,
          "code": "elementalBalance: (signData as any)?.elementalNeeds as Record<string, number>,",
          "match": "as any"
        },
        {
          "file": "src/data/nutritional.ts",
          "line": 779,
          "code": "focusNutrients: (signData as any)?.nutritionalFocus as string[],",
          "match": "as any"
        },
        {
          "file": "src/data/nutritional.ts",
          "line": 947,
          "code": "element: (seasonData as any)?.elementalEmphasis as string,",
          "match": "as any"
        }
      ]
    },
    "src/data/recipes.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/data/recipes.ts",
          "line": 51,
          "code": "nutrition?: any;",
          "match": ": any;"
        },
        {
          "file": "src/data/recipes.ts",
          "line": 105,
          "code": "elementalProperties?: any;",
          "match": ": any;"
        },
        {
          "file": "src/data/recipes.ts",
          "line": 41,
          "code": "substitutions?: Record<string, any>;",
          "match": "Record<string, any>"
        }
      ]
    },
    "src/data/unified/unifiedFlavorEngine.ts": {
      "count": 7,
      "examples": [
        {
          "file": "src/data/unified/unifiedFlavorEngine.ts",
          "line": 625,
          "code": "private generateAdvice(",
          "match": "(\n    scores: Omit<UnifiedFlavorCompatibility, 'breakdown' | 'recommendations' | 'warnings' | 'optimizations'>,\n    _profile1: UnifiedFlavorProfile,\n    _profile2: UnifiedFlavorProfile,\n    _context?: any\n  )"
        },
        {
          "file": "src/data/unified/unifiedFlavorEngine.ts",
          "line": 209,
          "code": "acc[(profile as any)?.category] = (acc[(profile as any)?.category] || 0) + 1;",
          "match": "as any"
        },
        {
          "file": "src/data/unified/unifiedFlavorEngine.ts",
          "line": 209,
          "code": "acc[(profile as any)?.category] = (acc[(profile as any)?.category] || 0) + 1;",
          "match": "as any"
        }
      ]
    },
    "src/data/unified/nutritional.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/data/unified/nutritional.ts",
          "line": 308,
          "code": "const variance = values.reduce((sum, val) => sum + Math.pow((val) as any - mean, 2), 0) / values.length;",
          "match": "as any"
        }
      ]
    },
    "src/data/unified/enhancedIngredients.ts": {
      "count": 10,
      "examples": [
        {
          "file": "src/data/unified/enhancedIngredients.ts",
          "line": 292,
          "code": "ingredient.culinaryProperties.seasonality.peak.includes(criteria.seasonalAlignment as any) ||",
          "match": "as any"
        },
        {
          "file": "src/data/unified/enhancedIngredients.ts",
          "line": 293,
          "code": "ingredient.culinaryProperties.seasonality.optimal.includes(criteria.seasonalAlignment as any)",
          "match": "as any"
        },
        {
          "file": "src/data/unified/enhancedIngredients.ts",
          "line": 308,
          "code": "ingredient.culinaryProperties.cookingMethods.includes(method as any)",
          "match": "as any"
        }
      ]
    },
    "src/data/unified/flavorProfileMigration.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/data/unified/flavorProfileMigration.ts",
          "line": 50,
          "code": "[key: string]: any;",
          "match": ": any;"
        }
      ]
    },
    "src/data/unified/cuisineIntegrations.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/data/unified/cuisineIntegrations.ts",
          "line": 581,
          "code": "createCuisineAstrologicalBridge(cuisineProfile: any, astrologicalData: any) {",
          "match": "(cuisineProfile: any, astrologicalData: any)"
        },
        {
          "file": "src/data/unified/cuisineIntegrations.ts",
          "line": 581,
          "code": "createCuisineAstrologicalBridge(cuisineProfile: any, astrologicalData: any) {",
          "match": ": any,"
        },
        {
          "file": "src/data/unified/cuisineIntegrations.ts",
          "line": 581,
          "code": "createCuisineAstrologicalBridge(cuisineProfile: any, astrologicalData: any) {",
          "match": ": any)"
        }
      ]
    },
    "src/data/unified/recipes.ts": {
      "count": 10,
      "examples": [
        {
          "file": "src/data/unified/recipes.ts",
          "line": 113,
          "code": "static calculateRecipeKalchm(ingredients: any[]): {",
          "match": "(ingredients: any[])"
        },
        {
          "file": "src/data/unified/recipes.ts",
          "line": 223,
          "code": "static calculateElementalBalance(breakdown: any[]): ElementalProperties {",
          "match": "(breakdown: any[])"
        },
        {
          "file": "src/data/unified/recipes.ts",
          "line": 329,
          "code": "static generateThermodynamicRecommendations(",
          "match": "(\n    thermodynamics: any,\n    elementalBalance: ElementalProperties,\n    monica: number | null\n  )"
        }
      ]
    },
    "src/data/unified/recipeBuilding.ts": {
      "count": 46,
      "examples": [
        {
          "file": "src/data/unified/recipeBuilding.ts",
          "line": 1669,
          "code": "private calculateEnergeticProfile(recipe: MonicaOptimizedRecipe, alignment: any): {",
          "match": "(recipe: MonicaOptimizedRecipe, alignment: any)"
        },
        {
          "file": "src/data/unified/recipeBuilding.ts",
          "line": 475,
          "code": "original: (adj as any)?.method || '',",
          "match": "as any"
        },
        {
          "file": "src/data/unified/recipeBuilding.ts",
          "line": 476,
          "code": "adjusted: (adj as any)?.adjustment || '',",
          "match": "as any"
        }
      ]
    },
    "src/data/unified/seasonal.ts": {
      "count": 6,
      "examples": [
        {
          "file": "src/data/unified/seasonal.ts",
          "line": 1022,
          "code": "if (targetMonica !== undefined && !isNaN((method as any)?.monicaConstant)) {",
          "match": "as any"
        },
        {
          "file": "src/data/unified/seasonal.ts",
          "line": 1023,
          "code": "const monicaDifference = Math.abs((method as any).monicaConstant - targetMonica);",
          "match": "as any"
        },
        {
          "file": "src/data/unified/seasonal.ts",
          "line": 1028,
          "code": "const methodElement = (method as any)?.alchemicalPillar?.elementalAssociations?.primary;",
          "match": "as any"
        }
      ]
    },
    "src/data/unified/alchemicalCalculations.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/data/unified/alchemicalCalculations.ts",
          "line": 160,
          "code": "export function enhanceIngredientWithAlchemy(",
          "match": "(\n  ingredient: {\n    name: string;\n    category: string;\n    subcategory?: string;\n    elementalProperties: ElementalProperties;\n    [key: string]: any;\n  }\n)"
        },
        {
          "file": "src/data/unified/alchemicalCalculations.ts",
          "line": 166,
          "code": "[key: string]: any;",
          "match": ": any;"
        }
      ]
    },
    "src/data/unified/flavorCompatibilityLayer.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/data/unified/flavorCompatibilityLayer.ts",
          "line": 189,
          "code": "): Array<{ profile: any; compatibility: number }> {",
          "match": ": any;"
        }
      ]
    },
    "src/data/unified/cuisines.ts": {
      "count": 13,
      "examples": [
        {
          "file": "src/data/unified/cuisines.ts",
          "line": 166,
          "code": "for (const [season, dishes] of Object.entries(mealData as { [key: string]: any })) {",
          "match": "(const [season, dishes] of Object.entries(mealData as { [key: string]: any })"
        },
        {
          "file": "src/data/unified/cuisines.ts",
          "line": 426,
          "code": "(kalchmAnalysis.cookingMethodInfluence as any)?.primaryMethods",
          "match": "as any"
        },
        {
          "file": "src/data/unified/cuisines.ts",
          "line": 444,
          "code": "ingredientKalchmProfile: kalchmAnalysis.ingredientKalchmProfile as any,",
          "match": "as any"
        }
      ]
    },
    "src/data/unified/unifiedTypes.ts": {
      "count": 4,
      "examples": [
        {
          "file": "src/data/unified/unifiedTypes.ts",
          "line": 61,
          "code": "culinaryProperties?: any;",
          "match": ": any;"
        },
        {
          "file": "src/data/unified/unifiedTypes.ts",
          "line": 62,
          "code": "storage?: any;",
          "match": ": any;"
        },
        {
          "file": "src/data/unified/unifiedTypes.ts",
          "line": 63,
          "code": "preparation?: any;",
          "match": ": any;"
        }
      ]
    },
    "src/data/integrations/seasonalUsage.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/data/integrations/seasonalUsage.ts",
          "line": 159,
          "code": "} as unknown as Record<Season, any>;",
          "match": "Record<Season, any>"
        }
      ]
    },
    "src/data/enhancedDishes.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/data/enhancedDishes.ts",
          "line": 187,
          "code": "...(originalDish as any),",
          "match": "as any"
        }
      ]
    },
    "src/data/recipes/index.ts": {
      "count": 8,
      "examples": [
        {
          "file": "src/data/recipes/index.ts",
          "line": 9,
          "code": "const flattenCuisineRecipes = (cuisines: any) => {",
          "match": "(cuisines: any)"
        },
        {
          "file": "src/data/recipes/index.ts",
          "line": 13,
          "code": "Object.values(cuisines).forEach((cuisine: any) => {",
          "match": "((cuisine: any)"
        },
        {
          "file": "src/data/recipes/index.ts",
          "line": 16,
          "code": "Object.values(cuisine.dishes).forEach((mealType: any) => {",
          "match": "((mealType: any)"
        }
      ]
    },
    "src/data/cuisines.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/data/cuisines.ts",
          "line": 50,
          "code": "const propsData = props as any;",
          "match": "as any"
        },
        {
          "file": "src/data/cuisines.ts",
          "line": 67,
          "code": "const cuisineData = cuisine as any;",
          "match": "as any"
        }
      ]
    },
    "src/data/cuisines/indian.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/data/cuisines/indian.ts",
          "line": 1217,
          "code": "} as any,",
          "match": "as any"
        }
      ]
    },
    "src/data/ingredients/oils/index.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/data/ingredients/oils/index.ts",
          "line": 63,
          "code": "(typeof value.smokePoint === 'object' && value.smokePoint !== null && 'fahrenheit' in value.smokePoint && (value.smokePoint as any).fahrenheit >= 400) ||",
          "match": "as any"
        }
      ]
    },
    "src/data/ingredients/seasonings/vinegars.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/data/ingredients/seasonings/vinegars.ts",
          "line": 6,
          "code": "function createIngredientMapping(",
          "match": "(\n  id: string,\n  properties: any\n)"
        },
        {
          "file": "src/data/ingredients/seasonings/vinegars.ts",
          "line": 8,
          "code": "properties: any",
          "match": ": any\n)"
        }
      ]
    },
    "src/data/ingredients/seasonings/index.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/data/ingredients/seasonings/index.ts",
          "line": 70,
          "code": "export const categorizedSalts = updateSaltCategory(salts as any);",
          "match": "as any"
        },
        {
          "file": "src/data/ingredients/seasonings/index.ts",
          "line": 104,
          "code": "(app as any)?.timing === timing",
          "match": "as any"
        },
        {
          "file": "src/data/ingredients/seasonings/index.ts",
          "line": 137,
          "code": ".some(modifier => (modifier as any)?.elementalBoost?.[element as keyof ElementalProperties])",
          "match": "as any"
        }
      ]
    },
    "src/data/ingredients/vegetables/leafyGreens.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/data/ingredients/vegetables/leafyGreens.ts",
          "line": 410,
          "code": "export const leafyGreens: Record<string, IngredientMapping> = fixIngredientMappings(rawLeafyGreens as any) as Record<string, IngredientMapping>;",
          "match": "as any"
        }
      ]
    },
    "src/data/ingredients/proteins/index.ts": {
      "count": 5,
      "examples": [
        {
          "file": "src/data/ingredients/proteins/index.ts",
          "line": 80,
          "code": "const meetsProtein = (value.nutritionalContent as any)?.protein >= minProtein;",
          "match": "as any"
        },
        {
          "file": "src/data/ingredients/proteins/index.ts",
          "line": 81,
          "code": "const meetsFat = maxFat ? (value.nutritionalContent as any)?.fat <= maxFat : true;",
          "match": "as any"
        },
        {
          "file": "src/data/ingredients/proteins/index.ts",
          "line": 121,
          "code": "((value.nutritionalContent as any)?.protein - (protein.nutritionalContent as any)?.protein) /",
          "match": "as any"
        }
      ]
    },
    "src/data/ingredients/proteins/plantBased.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/data/ingredients/proteins/plantBased.ts",
          "line": 12,
          "code": "properties: Partial<IngredientMapping> & Record<string, any>",
          "match": "Record<string, any>"
        }
      ]
    },
    "src/data/ingredients/proteins/legumes.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/data/ingredients/proteins/legumes.ts",
          "line": 302,
          "code": "export const legumes: Record<string, IngredientMapping> = fixIngredientMappings(rawLegumes as any);",
          "match": "as any"
        }
      ]
    },
    "src/data/ingredients/flavorProfiles.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/data/ingredients/flavorProfiles.ts",
          "line": 19,
          "code": "if (!(ingredient as any)?.flavorProfile) {",
          "match": "as any"
        },
        {
          "file": "src/data/ingredients/flavorProfiles.ts",
          "line": 20,
          "code": "(ingredient as any).flavorProfile = getFlavorProfileForIngredient(ingredient.name);",
          "match": "as any"
        },
        {
          "file": "src/data/ingredients/flavorProfiles.ts",
          "line": 28,
          "code": "const ingredientFlavorMap: Record<string, IngredientFlavorProfile & Record<string, any>> = {",
          "match": "Record<string, any>"
        }
      ]
    },
    "src/data/ingredients/spices/warmSpices.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/data/ingredients/spices/warmSpices.ts",
          "line": 17,
          "code": "} as any,",
          "match": "as any"
        }
      ]
    },
    "src/data/ingredients/spices/index.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/data/ingredients/spices/index.ts",
          "line": 317,
          "code": "} as any) as Record<string, IngredientMapping>;",
          "match": "as any"
        }
      ]
    },
    "src/data/planets/mars.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/data/planets/mars.ts",
          "line": 64,
          "code": "} as any,",
          "match": "as any"
        }
      ]
    },
    "src/data/foodTypes.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/data/foodTypes.ts",
          "line": 154,
          "code": "recommendations.push(dish as any);",
          "match": "as any"
        }
      ]
    },
    "src/data/cuisineFlavorProfiles.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/data/cuisineFlavorProfiles.ts",
          "line": 978,
          "code": "const allRecipes: any[] = [];",
          "match": ": any[]"
        }
      ]
    },
    "src/pages/recipes/[id].tsx": {
      "count": 2,
      "examples": [
        {
          "file": "src/pages/recipes/[id].tsx",
          "line": 184,
          "code": ": (ingredient as any)?.name === (selectedIngredient as any)?.name);",
          "match": "as any"
        },
        {
          "file": "src/pages/recipes/[id].tsx",
          "line": 184,
          "code": ": (ingredient as any)?.name === (selectedIngredient as any)?.name);",
          "match": "as any"
        }
      ]
    },
    "src/pages/cuisines/[id].tsx": {
      "count": 4,
      "examples": [
        {
          "file": "src/pages/cuisines/[id].tsx",
          "line": 73,
          "code": "const matchingRecipe = elementalMatchedRecipes.find((r: any) => r?.name === recipe1Data?.name);",
          "match": "((r: any)"
        },
        {
          "file": "src/pages/cuisines/[id].tsx",
          "line": 72,
          "code": "const recipe1Data = recipe1 as any;",
          "match": "as any"
        },
        {
          "file": "src/pages/cuisines/[id].tsx",
          "line": 92,
          "code": "const recipeData = recipe as any;",
          "match": "as any"
        }
      ]
    },
    "src/pages/sauces/[cuisine]/[id].tsx": {
      "count": 1,
      "examples": [
        {
          "file": "src/pages/sauces/[cuisine]/[id].tsx",
          "line": 72,
          "code": "...(cuisinesMap[cuisineKey].traditionalSauces as Record<string, any>)[sauceId],",
          "match": "Record<string, any>"
        }
      ]
    },
    "src/services/QualityGatesValidation.ts": {
      "count": 22,
      "examples": [
        {
          "file": "src/services/QualityGatesValidation.ts",
          "line": 764,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/services/QualityGatesValidation.ts",
          "line": 800,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/services/QualityGatesValidation.ts",
          "line": 1110,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        }
      ]
    },
    "src/services/astrologyApi.ts": {
      "count": 4,
      "examples": [
        {
          "file": "src/services/astrologyApi.ts",
          "line": 94,
          "code": "const astroService = AstrologicalService as unknown as any;",
          "match": "as any"
        },
        {
          "file": "src/services/astrologyApi.ts",
          "line": 124,
          "code": "const astroService = AstrologicalService as unknown as any;",
          "match": "as any"
        },
        {
          "file": "src/services/astrologyApi.ts",
          "line": 196,
          "code": "const astroService = AstrologicalService as unknown as any;",
          "match": "as any"
        }
      ]
    },
    "src/services/linting/LintingErrorAnalyzer.ts": {
      "count": 11,
      "examples": [
        {
          "file": "src/services/linting/LintingErrorAnalyzer.ts",
          "line": 279,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/services/linting/LintingErrorAnalyzer.ts",
          "line": 279,
          "code": "} catch (error: any) {",
          "match": "(error: any)"
        },
        {
          "file": "src/services/linting/LintingErrorAnalyzer.ts",
          "line": 315,
          "code": "private analyzeIssue(rawIssue: any): LintingIssue {",
          "match": "(rawIssue: any)"
        }
      ]
    },
    "src/services/linting/demo.ts": {
      "count": 7,
      "examples": [
        {
          "file": "src/services/linting/demo.ts",
          "line": 161,
          "code": "const recommendations = detector.getDomainLintingRecommendations(mockAnalysis.domainContext as any);",
          "match": "as any"
        },
        {
          "file": "src/services/linting/demo.ts",
          "line": 188,
          "code": "domainContext: { type: 'component', confidence: 0.9 } as any,",
          "match": "as any"
        },
        {
          "file": "src/services/linting/demo.ts",
          "line": 189,
          "code": "fileAnalysis: { filePath: 'src/App.tsx', riskFactors: [], preservationRequirements: [] } as any,",
          "match": "as any"
        }
      ]
    },
    "src/services/linting/SafeUnusedImportRemover.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/services/linting/SafeUnusedImportRemover.ts",
          "line": 365,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/services/linting/SafeUnusedImportRemover.ts",
          "line": 365,
          "code": "} catch (error: any) {",
          "match": "(error: any)"
        },
        {
          "file": "src/services/linting/SafeUnusedImportRemover.ts",
          "line": 365,
          "code": "} catch (error: any) {",
          "match": ": any)"
        }
      ]
    },
    "src/services/linting/LintingAlertingSystem.ts": {
      "count": 9,
      "examples": [
        {
          "file": "src/services/linting/LintingAlertingSystem.ts",
          "line": 361,
          "code": "(actions as any[]).push({",
          "match": "as any"
        },
        {
          "file": "src/services/linting/LintingAlertingSystem.ts",
          "line": 370,
          "code": "(actions as any[]).push({",
          "match": "as any"
        },
        {
          "file": "src/services/linting/LintingAlertingSystem.ts",
          "line": 379,
          "code": "(actions as any[]).push({",
          "match": "as any"
        }
      ]
    },
    "src/services/linting/LintingCampaignIntegration.ts": {
      "count": 5,
      "examples": [
        {
          "file": "src/services/linting/LintingCampaignIntegration.ts",
          "line": 514,
          "code": "private saveCampaignReport(report: any): void {",
          "match": "(report: any)"
        },
        {
          "file": "src/services/linting/LintingCampaignIntegration.ts",
          "line": 476,
          "code": "private getActiveCampaign(): any {",
          "match": ": any "
        },
        {
          "file": "src/services/linting/LintingCampaignIntegration.ts",
          "line": 514,
          "code": "private saveCampaignReport(report: any): void {",
          "match": ": any)"
        }
      ]
    },
    "src/services/linting/UnusedVariableProcessor.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/services/linting/UnusedVariableProcessor.ts",
          "line": 148,
          "code": "private parseUnusedVariableMessage(filePath: string, message: any): UnusedVariableIssue | null {",
          "match": "(filePath: string, message: any)"
        },
        {
          "file": "src/services/linting/UnusedVariableProcessor.ts",
          "line": 148,
          "code": "private parseUnusedVariableMessage(filePath: string, message: any): UnusedVariableIssue | null {",
          "match": ": any)"
        }
      ]
    },
    "src/services/linting/LintingValidationDashboard.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/services/linting/LintingValidationDashboard.ts",
          "line": 219,
          "code": "private parseLintResults(lintResults: any[]): LintingMetrics {",
          "match": "(lintResults: any[])"
        },
        {
          "file": "src/services/linting/LintingValidationDashboard.ts",
          "line": 631,
          "code": "let value: any = metrics;",
          "match": ": any "
        },
        {
          "file": "src/services/linting/LintingValidationDashboard.ts",
          "line": 219,
          "code": "private parseLintResults(lintResults: any[]): LintingMetrics {",
          "match": ": any[]"
        }
      ]
    },
    "src/services/linting/UnusedImportProcessor.ts": {
      "count": 6,
      "examples": [
        {
          "file": "src/services/linting/UnusedImportProcessor.ts",
          "line": 84,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/services/linting/UnusedImportProcessor.ts",
          "line": 119,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/services/linting/UnusedImportProcessor.ts",
          "line": 84,
          "code": "} catch (error: any) {",
          "match": "(error: any)"
        }
      ]
    },
    "src/services/linting/__tests__/LintingProgressTracker.test.ts": {
      "count": 8,
      "examples": [
        {
          "file": "src/services/linting/__tests__/LintingProgressTracker.test.ts",
          "line": 81,
          "code": "const mockError = new Error('ESLint failed') as any;",
          "match": "as any"
        },
        {
          "file": "src/services/linting/__tests__/LintingProgressTracker.test.ts",
          "line": 257,
          "code": "jest.spyOn(tracker as any, 'getLatestMetrics').mockReturnValue(mockMetrics);",
          "match": "as any"
        },
        {
          "file": "src/services/linting/__tests__/LintingProgressTracker.test.ts",
          "line": 287,
          "code": "jest.spyOn(tracker as any, 'getLatestMetrics').mockReturnValue(mockMetrics);",
          "match": "as any"
        }
      ]
    },
    "src/services/linting/__tests__/LintingCampaignIntegration.test.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/services/linting/__tests__/LintingCampaignIntegration.test.ts",
          "line": 307,
          "code": "const mockError = new Error('ESLint failed') as any;",
          "match": "as any"
        }
      ]
    },
    "src/services/linting/__tests__/AutomatedLintingIntegration.test.ts": {
      "count": 18,
      "examples": [
        {
          "file": "src/services/linting/__tests__/AutomatedLintingIntegration.test.ts",
          "line": 67,
          "code": "typescript: [{ rule: '@typescript-eslint/no-unused-vars' } as any],",
          "match": "as any"
        },
        {
          "file": "src/services/linting/__tests__/AutomatedLintingIntegration.test.ts",
          "line": 68,
          "code": "import: [{ rule: 'import/order' } as any]",
          "match": "as any"
        },
        {
          "file": "src/services/linting/__tests__/AutomatedLintingIntegration.test.ts",
          "line": 101,
          "code": "mockAnalysisService.performComprehensiveAnalysis.mockResolvedValue(mockAnalysis as any);",
          "match": "as any"
        }
      ]
    },
    "src/services/linting/__tests__/LintingErrorAnalyzer.test.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/services/linting/__tests__/LintingErrorAnalyzer.test.ts",
          "line": 145,
          "code": "(error as any).stdout = '[]';",
          "match": "as any"
        }
      ]
    },
    "src/services/linting/__tests__/LintingAnalysisService.test.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/services/linting/__tests__/LintingAnalysisService.test.ts",
          "line": 41,
          "code": "readFileSync: jest.fn().mockReturnValue(`",
          "match": "(`\nimport React, { useState } from 'react';\n    \n    const component: any = {};\n    \n    function TestComponent()"
        },
        {
          "file": "src/services/linting/__tests__/LintingAnalysisService.test.ts",
          "line": 166,
          "code": "(error as any).stdout = '[]'; // Empty results",
          "match": "as any"
        },
        {
          "file": "src/services/linting/__tests__/LintingAnalysisService.test.ts",
          "line": 44,
          "code": "const component: any = {};",
          "match": ": any "
        }
      ]
    },
    "src/services/linting/PerformanceMonitoringService.ts": {
      "count": 7,
      "examples": [
        {
          "file": "src/services/linting/PerformanceMonitoringService.ts",
          "line": 93,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/services/linting/PerformanceMonitoringService.ts",
          "line": 93,
          "code": "} catch (error: any) {",
          "match": "(error: any)"
        },
        {
          "file": "src/services/linting/PerformanceMonitoringService.ts",
          "line": 522,
          "code": "this.metrics = parsed.map((m: any) => ({",
          "match": "((m: any)"
        }
      ]
    },
    "src/services/linting/LintingQualityGates.ts": {
      "count": 12,
      "examples": [
        {
          "file": "src/services/linting/LintingQualityGates.ts",
          "line": 477,
          "code": "private determineOverallTrend(trends: any): 'improving' | 'stable' | 'degrading' {",
          "match": "(trends: any)"
        },
        {
          "file": "src/services/linting/LintingQualityGates.ts",
          "line": 487,
          "code": "private generateTrendRecommendations(trends: any): string[] {",
          "match": "(trends: any)"
        },
        {
          "file": "src/services/linting/LintingQualityGates.ts",
          "line": 505,
          "code": "private calculateAlertLevel(trends: any): 'none' | 'low' | 'medium' | 'high' {",
          "match": "(trends: any)"
        }
      ]
    },
    "src/services/linting/ZeroErrorAchievementDashboard.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/services/linting/ZeroErrorAchievementDashboard.ts",
          "line": 802,
          "code": "let value: any = metrics;",
          "match": ": any "
        }
      ]
    },
    "src/services/linting/LintingProgressTracker.ts": {
      "count": 11,
      "examples": [
        {
          "file": "src/services/linting/LintingProgressTracker.ts",
          "line": 231,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/services/linting/LintingProgressTracker.ts",
          "line": 231,
          "code": "} catch (error: any) {",
          "match": "(error: any)"
        },
        {
          "file": "src/services/linting/LintingProgressTracker.ts",
          "line": 256,
          "code": "results.forEach((file: any) => {",
          "match": "((file: any)"
        }
      ]
    },
    "src/services/CampaignDebugger.ts": {
      "count": 4,
      "examples": [
        {
          "file": "src/services/CampaignDebugger.ts",
          "line": 125,
          "code": "value: any;",
          "match": ": any;"
        },
        {
          "file": "src/services/CampaignDebugger.ts",
          "line": 45,
          "code": "output: Record<string, any>;",
          "match": "Record<string, any>"
        },
        {
          "file": "src/services/CampaignDebugger.ts",
          "line": 84,
          "code": "parameters: Record<string, any>;",
          "match": "Record<string, any>"
        }
      ]
    },
    "src/services/LoggingService.ts": {
      "count": 20,
      "examples": [
        {
          "file": "src/services/LoggingService.ts",
          "line": 67,
          "code": "public debug(message: string, context?: LogContext, data?: any): void {",
          "match": "(message: string, context?: LogContext, data?: any)"
        },
        {
          "file": "src/services/LoggingService.ts",
          "line": 71,
          "code": "public info(message: string, context?: LogContext, data?: any): void {",
          "match": "(message: string, context?: LogContext, data?: any)"
        },
        {
          "file": "src/services/LoggingService.ts",
          "line": 75,
          "code": "public warn(message: string, context?: LogContext, data?: any): void {",
          "match": "(message: string, context?: LogContext, data?: any)"
        }
      ]
    },
    "src/services/CurrentMomentManager.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/services/CurrentMomentManager.ts",
          "line": 208,
          "code": "const codeCell = notebook.cells.find((cell: any) =>",
          "match": "((cell: any)"
        },
        {
          "file": "src/services/CurrentMomentManager.ts",
          "line": 208,
          "code": "const codeCell = notebook.cells.find((cell: any) =>",
          "match": ": any)"
        }
      ]
    },
    "src/services/IntelligentBatchProcessor.ts": {
      "count": 4,
      "examples": [
        {
          "file": "src/services/IntelligentBatchProcessor.ts",
          "line": 767,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/services/IntelligentBatchProcessor.ts",
          "line": 767,
          "code": "} catch (error: any) {",
          "match": "(error: any)"
        },
        {
          "file": "src/services/IntelligentBatchProcessor.ts",
          "line": 1341,
          "code": "} as any;",
          "match": "as any"
        }
      ]
    },
    "src/services/QualityMetricsService.ts": {
      "count": 11,
      "examples": [
        {
          "file": "src/services/QualityMetricsService.ts",
          "line": 91,
          "code": "private subscribers: Set<(data: any) => void> = new Set();",
          "match": "(data: any)"
        },
        {
          "file": "src/services/QualityMetricsService.ts",
          "line": 539,
          "code": "private estimateEffort(pattern: any): number {",
          "match": "(pattern: any)"
        },
        {
          "file": "src/services/QualityMetricsService.ts",
          "line": 654,
          "code": "private calculateOverallScore(buildSummary: any, errorSummary: any, qualityMetrics: any): number {",
          "match": "(buildSummary: any, errorSummary: any, qualityMetrics: any)"
        }
      ]
    },
    "src/services/ServicesManager.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/services/ServicesManager.ts",
          "line": 352,
          "code": "} as any;",
          "match": "as any"
        },
        {
          "file": "src/services/ServicesManager.ts",
          "line": 361,
          "code": "} as any;",
          "match": "as any"
        }
      ]
    },
    "src/services/DirectRecipeService.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/services/DirectRecipeService.ts",
          "line": 249,
          "code": "if (ingredientData && (ingredientData as any).alchemicalProperties) {",
          "match": "as any"
        },
        {
          "file": "src/services/DirectRecipeService.ts",
          "line": 250,
          "code": "const ingredientKalchm = calculateKalchm((ingredientData as any).alchemicalProperties);",
          "match": "as any"
        }
      ]
    },
    "src/services/AstrologicalService.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/services/AstrologicalService.ts",
          "line": 132,
          "code": "static async testCalculations(testData?: any): Promise<AstrologicalCalculationResponse> {",
          "match": "(testData?: any)"
        },
        {
          "file": "src/services/AstrologicalService.ts",
          "line": 132,
          "code": "static async testCalculations(testData?: any): Promise<AstrologicalCalculationResponse> {",
          "match": ": any)"
        }
      ]
    },
    "src/services/AstrologizeApiCache.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/services/AstrologizeApiCache.ts",
          "line": 219,
          "code": "sign: (String(planetData.sign) || 'aries') as any,",
          "match": "as any"
        }
      ]
    },
    "src/services/ConsolidatedRecommendationService.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/services/ConsolidatedRecommendationService.ts",
          "line": 365,
          "code": "} as any);",
          "match": "as any"
        }
      ]
    },
    "src/services/PerformanceMetricsAnalytics.ts": {
      "count": 10,
      "examples": [
        {
          "file": "src/services/PerformanceMetricsAnalytics.ts",
          "line": 616,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/services/PerformanceMetricsAnalytics.ts",
          "line": 757,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/services/PerformanceMetricsAnalytics.ts",
          "line": 616,
          "code": "} catch (error: any) {",
          "match": "(error: any)"
        }
      ]
    },
    "src/services/unifiedNutritionalService.ts": {
      "count": 5,
      "examples": [
        {
          "file": "src/services/unifiedNutritionalService.ts",
          "line": 683,
          "code": "return (legacyServiceData.calculateNutritionalScore as (nutrition: any) => Promise<number>)(nutrition);",
          "match": "(legacyServiceData.calculateNutritionalScore as (nutrition: any)"
        },
        {
          "file": "src/services/unifiedNutritionalService.ts",
          "line": 100,
          "code": "if ((regularIngredient as any)?.nutritionalProfile) {",
          "match": "as any"
        },
        {
          "file": "src/services/unifiedNutritionalService.ts",
          "line": 102,
          "code": "const alchemyProfile = (regularIngredient as any).nutritionalProfile;",
          "match": "as any"
        }
      ]
    },
    "src/services/EnhancedRecommendationService.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/services/EnhancedRecommendationService.ts",
          "line": 342,
          "code": "flavorCompatibility: flavorCompatibility as any,",
          "match": "as any"
        }
      ]
    },
    "src/services/UnusedVariableDetector.ts": {
      "count": 14,
      "examples": [
        {
          "file": "src/services/UnusedVariableDetector.ts",
          "line": 538,
          "code": "private analyzeVariableUsage(declaration: any, content: string): UnusedVariable['usage'] {",
          "match": "(declaration: any, content: string)"
        },
        {
          "file": "src/services/UnusedVariableDetector.ts",
          "line": 910,
          "code": "private determineScope(declaration: any, content: string): UnusedVariable['scope'] {",
          "match": "(declaration: any, content: string)"
        },
        {
          "file": "src/services/UnusedVariableDetector.ts",
          "line": 933,
          "code": "private getContainingFunction(declaration: any, content: string): string | undefined {",
          "match": "(declaration: any, content: string)"
        }
      ]
    },
    "src/services/MLIntelligenceService.ts": {
      "count": 5,
      "examples": [
        {
          "file": "src/services/MLIntelligenceService.ts",
          "line": 338,
          "code": "(recipe as any)?.elementalProperties ?? {},",
          "match": "as any"
        },
        {
          "file": "src/services/MLIntelligenceService.ts",
          "line": 339,
          "code": "(_astrologicalContext as any)?.elementalProperties ?? {}",
          "match": "as any"
        },
        {
          "file": "src/services/MLIntelligenceService.ts",
          "line": 373,
          "code": "const substitution = this.findOptimalSubstitution(ingredient as any, __astrologicalContext);",
          "match": "as any"
        }
      ]
    },
    "src/services/recipeData.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/services/recipeData.ts",
          "line": 8,
          "code": "astrologicalProfile?: Record<string, any>;",
          "match": "Record<string, any>"
        }
      ]
    },
    "src/services/KiroCampaignIntegration.ts": {
      "count": 17,
      "examples": [
        {
          "file": "src/services/KiroCampaignIntegration.ts",
          "line": 539,
          "code": "private generateNextSteps(intelligence: any): string[] {",
          "match": "(intelligence: any)"
        },
        {
          "file": "src/services/KiroCampaignIntegration.ts",
          "line": 118,
          "code": "this.intelligenceSystem = CampaignIntelligenceSystem as any;",
          "match": "as any"
        },
        {
          "file": "src/services/KiroCampaignIntegration.ts",
          "line": 264,
          "code": "type: 'BUILD_FAILURE' as any,",
          "match": "as any"
        }
      ]
    },
    "src/services/EnhancedAstrologyService.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/services/EnhancedAstrologyService.ts",
          "line": 26,
          "code": "seasonalTransit?: any;",
          "match": ": any;"
        }
      ]
    },
    "src/services/UnifiedScoringService.ts": {
      "count": 6,
      "examples": [
        {
          "file": "src/services/UnifiedScoringService.ts",
          "line": 664,
          "code": "private transformAstrologizeResponse(data: any): Partial<AstrologicalData> {",
          "match": "(data: any)"
        },
        {
          "file": "src/services/UnifiedScoringService.ts",
          "line": 99,
          "code": "currentTransits?: any;",
          "match": ": any;"
        },
        {
          "file": "src/services/UnifiedScoringService.ts",
          "line": 112,
          "code": "[key: string]: any;",
          "match": ": any;"
        }
      ]
    },
    "src/services/BuildPerformanceMonitor.ts": {
      "count": 10,
      "examples": [
        {
          "file": "src/services/BuildPerformanceMonitor.ts",
          "line": 52,
          "code": "private subscribers: Set<(data: any) => void> = new Set();",
          "match": "(data: any)"
        },
        {
          "file": "src/services/BuildPerformanceMonitor.ts",
          "line": 514,
          "code": "private estimateCalculationAccuracy(result: any): number {",
          "match": "(result: any)"
        },
        {
          "file": "src/services/BuildPerformanceMonitor.ts",
          "line": 542,
          "code": "public subscribe(callback: (data: any) => void) {",
          "match": "(callback: (data: any)"
        }
      ]
    },
    "src/services/recipeRecommendations.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/services/recipeRecommendations.ts",
          "line": 40,
          "code": "throw createEnhancedError('Empty recipe list', 'VALIDATION' as any);",
          "match": "as any"
        }
      ]
    },
    "src/services/adapters/LegacyRecommendationAdapter.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/services/adapters/LegacyRecommendationAdapter.ts",
          "line": 236,
          "code": "planetaryPositions as any,",
          "match": "as any"
        },
        {
          "file": "src/services/adapters/LegacyRecommendationAdapter.ts",
          "line": 238,
          "code": "cookingMethods as any",
          "match": "as any"
        },
        {
          "file": "src/services/adapters/LegacyRecommendationAdapter.ts",
          "line": 273,
          "code": "recipe as any,",
          "match": "as any"
        }
      ]
    },
    "src/services/adapters/NutritionalDataAdapter.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/services/adapters/NutritionalDataAdapter.ts",
          "line": 110,
          "code": "return calculateNutritionalBalance(ingredients as any) as unknown as import('@/types/alchemy').NutritionalProfile;",
          "match": "as any"
        },
        {
          "file": "src/services/adapters/NutritionalDataAdapter.ts",
          "line": 341,
          "code": "return evaluateNutritionalElementalBalance(profile as any, legacyTargetElements);",
          "match": "as any"
        }
      ]
    },
    "src/services/adapters/UnifiedDataAdapter.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/services/adapters/UnifiedDataAdapter.ts",
          "line": 71,
          "code": "return searchIngredients(criteria as any);",
          "match": "as any"
        }
      ]
    },
    "src/services/adapters/IngredientServiceAdapter.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/services/adapters/IngredientServiceAdapter.ts",
          "line": 75,
          "code": "} as any",
          "match": "as any"
        }
      ]
    },
    "src/services/adapters/LegacyIngredientAdapter.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/services/adapters/LegacyIngredientAdapter.ts",
          "line": 118,
          "code": "const result: unknown = unifiedIngredientService.filterIngredients(filter as any); // Pattern UUU: Import Path Interface Resolution",
          "match": "as any"
        },
        {
          "file": "src/services/adapters/LegacyIngredientAdapter.ts",
          "line": 132,
          "code": "const result: unknown = unifiedIngredientService.getIngredientsByElement({ element: elementalFilter } as any);",
          "match": "as any"
        },
        {
          "file": "src/services/adapters/LegacyIngredientAdapter.ts",
          "line": 137,
          "code": "return this.legacyService.getIngredientsByElement({ element: elementalFilter } as any);",
          "match": "as any"
        }
      ]
    },
    "src/services/adapters/FoodAlchemySystemAdapter.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/services/adapters/FoodAlchemySystemAdapter.ts",
          "line": 165,
          "code": "return enhancedIngredientSystem.getRecommendedIngredients(stateRecord as any, options);",
          "match": "as any"
        },
        {
          "file": "src/services/adapters/FoodAlchemySystemAdapter.ts",
          "line": 240,
          "code": "...(state as any)",
          "match": "as any"
        }
      ]
    },
    "src/services/SpoonacularService.ts": {
      "count": 5,
      "examples": [
        {
          "file": "src/services/SpoonacularService.ts",
          "line": 3,
          "code": "get: async (_url: string, _config?: any) => ({ data: {} as Record<string, unknown> }),",
          "match": "(_url: string, _config?: any)"
        },
        {
          "file": "src/services/SpoonacularService.ts",
          "line": 4,
          "code": "post: async (_url: string, _data?: any, _config?: any) => ({ data: {} as Record<string, unknown> })",
          "match": "(_url: string, _data?: any, _config?: any)"
        },
        {
          "file": "src/services/SpoonacularService.ts",
          "line": 3,
          "code": "get: async (_url: string, _config?: any) => ({ data: {} as Record<string, unknown> }),",
          "match": ": any)"
        }
      ]
    },
    "src/services/RecommendationAdapter.ts": {
      "count": 4,
      "examples": [
        {
          "file": "src/services/RecommendationAdapter.ts",
          "line": 663,
          "code": "const elementalBalance = (alchemicalData.elementalBalance as any) || {};",
          "match": "as any"
        },
        {
          "file": "src/services/RecommendationAdapter.ts",
          "line": 687,
          "code": "const elementalBalance = (alchemicalData.elementalBalance as any) || {};",
          "match": "as any"
        },
        {
          "file": "src/services/RecommendationAdapter.ts",
          "line": 711,
          "code": "const elementalBalance = (alchemicalData.elementalBalance as any) || {};",
          "match": "as any"
        }
      ]
    },
    "src/services/__tests__/EnterpriseIntelligenceIntegration.test.ts": {
      "count": 16,
      "examples": [
        {
          "file": "src/services/__tests__/EnterpriseIntelligenceIntegration.test.ts",
          "line": 40,
          "code": "} as any; // Type assertion for test compatibility",
          "match": "as any"
        },
        {
          "file": "src/services/__tests__/EnterpriseIntelligenceIntegration.test.ts",
          "line": 110,
          "code": "expect((result as any).optimizationRecommendations || result.optimizationIntelligence).toBeDefined();",
          "match": "as any"
        },
        {
          "file": "src/services/__tests__/EnterpriseIntelligenceIntegration.test.ts",
          "line": 111,
          "code": "expect((result as any).overallScore || 0.8).toBeGreaterThan(0);",
          "match": "as any"
        }
      ]
    },
    "src/services/__tests__/AlertingSystem.test.ts": {
      "count": 9,
      "examples": [
        {
          "file": "src/services/__tests__/AlertingSystem.test.ts",
          "line": 53,
          "code": "alertingSystem = new (AlertingSystem as any)();",
          "match": "as any"
        },
        {
          "file": "src/services/__tests__/AlertingSystem.test.ts",
          "line": 178,
          "code": "(alertingSystem as any).evaluateRule(rule);",
          "match": "as any"
        },
        {
          "file": "src/services/__tests__/AlertingSystem.test.ts",
          "line": 213,
          "code": "(alertingSystem as any).evaluateRule(rule);",
          "match": "as any"
        }
      ]
    },
    "src/services/RecipeCuisineConnector.ts": {
      "count": 6,
      "examples": [
        {
          "file": "src/services/RecipeCuisineConnector.ts",
          "line": 132,
          "code": "dishArray.forEach((dish: any) => {",
          "match": "((dish: any)"
        },
        {
          "file": "src/services/RecipeCuisineConnector.ts",
          "line": 169,
          "code": "private normalizeIngredients(ingredients: any[]): CuisineRecipe['ingredients'] {",
          "match": "(ingredients: any[])"
        },
        {
          "file": "src/services/RecipeCuisineConnector.ts",
          "line": 85,
          "code": "this.cuisineDatabase = cuisinesMap as any;",
          "match": "as any"
        }
      ]
    },
    "src/services/IngredientFilterService.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/services/IngredientFilterService.ts",
          "line": 444,
          "code": "const aScore = this.calculateNutritionalScore(aNutrition as any);",
          "match": "as any"
        },
        {
          "file": "src/services/IngredientFilterService.ts",
          "line": 445,
          "code": "const bScore = this.calculateNutritionalScore(bNutrition as any);",
          "match": "as any"
        }
      ]
    },
    "src/services/ingredientMappingService.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/services/ingredientMappingService.ts",
          "line": 24,
          "code": "return connectIngredientsToMappings(recipe as any);",
          "match": "as any"
        },
        {
          "file": "src/services/ingredientMappingService.ts",
          "line": 75,
          "code": "allRecipes.push(...(seasonalDishes as any[]));",
          "match": "as any"
        }
      ]
    },
    "src/services/UnifiedIngredientService.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/services/UnifiedIngredientService.ts",
          "line": 863,
          "code": "? _ingredient.seasonality.includes(season as any)",
          "match": "as any"
        },
        {
          "file": "src/services/UnifiedIngredientService.ts",
          "line": 864,
          "code": ": _ingredient.seasonality === (season as any)",
          "match": "as any"
        }
      ]
    },
    "src/services/examples/UnifiedScoringExample.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/services/examples/UnifiedScoringExample.ts",
          "line": 303,
          "code": "} as any",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/ConsoleStatementRemovalSystem.test.ts": {
      "count": 20,
      "examples": [
        {
          "file": "src/services/campaign/ConsoleStatementRemovalSystem.test.ts",
          "line": 60,
          "code": "const statements = (removalSystem as any).analyzeFileConsoleStatements('/test/file.ts', content);",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/ConsoleStatementRemovalSystem.test.ts",
          "line": 77,
          "code": "const statements = (removalSystem as any).analyzeFileConsoleStatements('/test/file.ts', content);",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/ConsoleStatementRemovalSystem.test.ts",
          "line": 87,
          "code": "const isCritical = (removalSystem as any).isConsoleStatementCritical(",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/SafetyProtocol.ts": {
      "count": 7,
      "examples": [
        {
          "file": "src/services/campaign/SafetyProtocol.ts",
          "line": 359,
          "code": "(this as any).monitoringInterval = monitoringInterval;",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/SafetyProtocol.ts",
          "line": 366,
          "code": "if ((this as any).monitoringInterval) {",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/SafetyProtocol.ts",
          "line": 367,
          "code": "clearInterval((this as any).monitoringInterval);",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/FinalValidationSystem.ts": {
      "count": 6,
      "examples": [
        {
          "file": "src/services/campaign/FinalValidationSystem.ts",
          "line": 179,
          "code": "const errorOutput = (error as any).stdout || (error as any).message || '';",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/FinalValidationSystem.ts",
          "line": 179,
          "code": "const errorOutput = (error as any).stdout || (error as any).message || '';",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/FinalValidationSystem.ts",
          "line": 244,
          "code": "const errorOutput = (error as any).stdout || (error as any).message || '';",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/BundleSizeOptimizer.test.ts": {
      "count": 10,
      "examples": [
        {
          "file": "src/services/campaign/BundleSizeOptimizer.test.ts",
          "line": 44,
          "code": "mockFs.readdirSync.mockReturnValue(['main.js', 'vendor.js', 'lazy-component.js'] as any);",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/BundleSizeOptimizer.test.ts",
          "line": 45,
          "code": "mockFs.statSync.mockReturnValue({ size: 50 * 1024 } as any); // 50kB files",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/BundleSizeOptimizer.test.ts",
          "line": 147,
          "code": "mockFs.readdirSync.mockReturnValue(['large-chunk.js'] as any);",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/UnusedExportAnalyzer.test.ts": {
      "count": 39,
      "examples": [
        {
          "file": "src/services/campaign/UnusedExportAnalyzer.test.ts",
          "line": 128,
          "code": "expect(exports.find((e: any) => e.exportName === 'testConst')).toBeDefined();",
          "match": "(exports.find((e: any)"
        },
        {
          "file": "src/services/campaign/UnusedExportAnalyzer.test.ts",
          "line": 129,
          "code": "expect(exports.find((e: any) => e.exportName === 'testFunction')).toBeDefined();",
          "match": "(exports.find((e: any)"
        },
        {
          "file": "src/services/campaign/UnusedExportAnalyzer.test.ts",
          "line": 130,
          "code": "expect(exports.find((e: any) => e.exportName === 'TestClass')).toBeDefined();",
          "match": "(exports.find((e: any)"
        }
      ]
    },
    "src/services/campaign/ValidationFramework.test.ts": {
      "count": 5,
      "examples": [
        {
          "file": "src/services/campaign/ValidationFramework.test.ts",
          "line": 52,
          "code": "mockFs.statSync.mockReturnValue({ size: 400 * 1024 } as any); // 400KB",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/ValidationFramework.test.ts",
          "line": 147,
          "code": "return new Promise(resolve => setTimeout(() => resolve(''), 100)) as any;",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/ValidationFramework.test.ts",
          "line": 151,
          "code": "return new Promise(resolve => setTimeout(() => resolve(''), 100)) as any;",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/EnterpriseIntelligenceGenerator.test.ts": {
      "count": 35,
      "examples": [
        {
          "file": "src/services/campaign/EnterpriseIntelligenceGenerator.test.ts",
          "line": 243,
          "code": "expect(capabilities.some((cap: any) => cap.name === 'analyzeFunction')).toBe(true);",
          "match": "(capabilities.some((cap: any)"
        },
        {
          "file": "src/services/campaign/EnterpriseIntelligenceGenerator.test.ts",
          "line": 267,
          "code": "expect(capabilities.some((cap: any) => cap.name === 'analyzeClassStructure')).toBe(true);",
          "match": "(capabilities.some((cap: any)"
        },
        {
          "file": "src/services/campaign/EnterpriseIntelligenceGenerator.test.ts",
          "line": 290,
          "code": "expect(capabilities.some((cap: any) => cap.name === 'generateAdvancedInsights')).toBe(true);",
          "match": "(capabilities.some((cap: any)"
        }
      ]
    },
    "src/services/campaign/CodeQualityAutomationSystem.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/services/campaign/CodeQualityAutomationSystem.ts",
          "line": 57,
          "code": "result: any;",
          "match": ": any;"
        }
      ]
    },
    "src/services/campaign/MakefileIntegration.test.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/services/campaign/MakefileIntegration.test.ts",
          "line": 97,
          "code": "const error = new Error('Make failed') as any;",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/CampaignController.ts": {
      "count": 5,
      "examples": [
        {
          "file": "src/services/campaign/CampaignController.ts",
          "line": 330,
          "code": "private async executeTool(tool: any): Promise<any> {",
          "match": "(tool: any)"
        },
        {
          "file": "src/services/campaign/CampaignController.ts",
          "line": 275,
          "code": "safetyLevel: 'MAXIMUM' as any",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/CampaignController.ts",
          "line": 292,
          "code": "safetyLevel: 'HIGH' as any",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/TerminalFreezePreventionSystem.ts": {
      "count": 7,
      "examples": [
        {
          "file": "src/services/campaign/TerminalFreezePreventionSystem.ts",
          "line": 62,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/services/campaign/TerminalFreezePreventionSystem.ts",
          "line": 50,
          "code": "async safeExecSync(command: string, options: any = {}): Promise<string> {",
          "match": "(command: string, options: any = {})"
        },
        {
          "file": "src/services/campaign/TerminalFreezePreventionSystem.ts",
          "line": 62,
          "code": "} catch (error: any) {",
          "match": "(error: any)"
        }
      ]
    },
    "src/services/campaign/ValidationFramework.ts": {
      "count": 42,
      "examples": [
        {
          "file": "src/services/campaign/ValidationFramework.ts",
          "line": 117,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/services/campaign/ValidationFramework.ts",
          "line": 157,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/services/campaign/ValidationFramework.ts",
          "line": 198,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        }
      ]
    },
    "src/services/campaign/EmergencyRecoverySystem.test.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/services/campaign/EmergencyRecoverySystem.test.ts",
          "line": 60,
          "code": "} as any);",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/EmergencyRecoverySystem.test.ts",
          "line": 402,
          "code": "severity: 'HIGH' as any,",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/ExplicitAnyEliminationSystem.test.ts": {
      "count": 11,
      "examples": [
        {
          "file": "src/services/campaign/ExplicitAnyEliminationSystem.test.ts",
          "line": 38,
          "code": "const buildMethod = (system as any).buildFixerArguments.bind(system);",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/ExplicitAnyEliminationSystem.test.ts",
          "line": 54,
          "code": "const buildMethod = (system as any).buildFixerArguments.bind(system);",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/ExplicitAnyEliminationSystem.test.ts",
          "line": 97,
          "code": "const parseMethod = (system as any).parseFixerOutput.bind(system);",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/ImportCleanupSystem.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/services/campaign/ImportCleanupSystem.ts",
          "line": 405,
          "code": "modifiedLine = modifiedLine.replace(pattern.regex, pattern.replacement as any);",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/ScriptIntegrationSystem.ts": {
      "count": 6,
      "examples": [
        {
          "file": "src/services/campaign/ScriptIntegrationSystem.ts",
          "line": 192,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/services/campaign/ScriptIntegrationSystem.ts",
          "line": 482,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/services/campaign/ScriptIntegrationSystem.ts",
          "line": 192,
          "code": "} catch (error: any) {",
          "match": "(error: any)"
        }
      ]
    },
    "src/services/campaign/UnusedVariablesCleanupSystem.test.ts": {
      "count": 16,
      "examples": [
        {
          "file": "src/services/campaign/UnusedVariablesCleanupSystem.test.ts",
          "line": 53,
          "code": "await expect((cleanupSystem as any).validatePreConditions()).rejects.toThrow('Unused variables script not found');",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/UnusedVariablesCleanupSystem.test.ts",
          "line": 59,
          "code": "await expect((cleanupSystem as any).validatePreConditions()).resolves.not.toThrow();",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/UnusedVariablesCleanupSystem.test.ts",
          "line": 70,
          "code": "await expect((cleanupSystem as any).validatePreConditions()).resolves.not.toThrow();",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/DependencySecurityMonitor.test.ts": {
      "count": 5,
      "examples": [
        {
          "file": "src/services/campaign/DependencySecurityMonitor.test.ts",
          "line": 135,
          "code": "const error = new Error('npm outdated found updates') as any;",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/DependencySecurityMonitor.test.ts",
          "line": 424,
          "code": "const outdatedError = new Error('Updates available') as any;",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/DependencySecurityMonitor.test.ts",
          "line": 465,
          "code": "const determineUpdateType = (monitor as any).determineUpdateType;",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/run-linting-formatting.ts": {
      "count": 7,
      "examples": [
        {
          "file": "src/services/campaign/run-linting-formatting.ts",
          "line": 213,
          "code": "private printViolationSummary(violations: any[]): void {",
          "match": "(violations: any[])"
        },
        {
          "file": "src/services/campaign/run-linting-formatting.ts",
          "line": 231,
          "code": "private printDetailedViolations(violations: any[]): void {",
          "match": "(violations: any[])"
        },
        {
          "file": "src/services/campaign/run-linting-formatting.ts",
          "line": 250,
          "code": "private printResults(result: any): void {",
          "match": "(result: any)"
        }
      ]
    },
    "src/services/campaign/run-import-cleanup.ts": {
      "count": 4,
      "examples": [
        {
          "file": "src/services/campaign/run-import-cleanup.ts",
          "line": 207,
          "code": "private groupUnusedImportsByFile(unusedImports: any[]): Record<string, any[]> {",
          "match": "(unusedImports: any[])"
        },
        {
          "file": "src/services/campaign/run-import-cleanup.ts",
          "line": 217,
          "code": "private printResults(result: any): void {",
          "match": "(result: any)"
        },
        {
          "file": "src/services/campaign/run-import-cleanup.ts",
          "line": 217,
          "code": "private printResults(result: any): void {",
          "match": ": any)"
        }
      ]
    },
    "src/services/campaign/ProgressReportingSystem.test.ts": {
      "count": 10,
      "examples": [
        {
          "file": "src/services/campaign/ProgressReportingSystem.test.ts",
          "line": 37,
          "code": "(reportingSystem as any).metricsCollector = mockMetricsCollector;",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/ProgressReportingSystem.test.ts",
          "line": 38,
          "code": "(reportingSystem as any).validationSystem = mockValidationSystem;",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/ProgressReportingSystem.test.ts",
          "line": 73,
          "code": "metrics: {} as any, criteria: [], failureReasons: [], recommendations: [] }",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/MakefileIntegration.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/services/campaign/MakefileIntegration.ts",
          "line": 358,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/services/campaign/MakefileIntegration.ts",
          "line": 358,
          "code": "} catch (error: any) {",
          "match": "(error: any)"
        },
        {
          "file": "src/services/campaign/MakefileIntegration.ts",
          "line": 358,
          "code": "} catch (error: any) {",
          "match": ": any)"
        }
      ]
    },
    "src/services/campaign/MilestoneValidationSystem.test.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/services/campaign/MilestoneValidationSystem.test.ts",
          "line": 33,
          "code": "(validationSystem as any).metricsCollector = mockMetricsCollector;",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/CodeQualityAutomationSystem.test.ts": {
      "count": 4,
      "examples": [
        {
          "file": "src/services/campaign/CodeQualityAutomationSystem.test.ts",
          "line": 41,
          "code": "} as any;",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/CodeQualityAutomationSystem.test.ts",
          "line": 45,
          "code": "} as any;",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/CodeQualityAutomationSystem.test.ts",
          "line": 49,
          "code": "} as any;",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/EnterpriseIntelligenceGenerator.ts": {
      "count": 20,
      "examples": [
        {
          "file": "src/services/campaign/EnterpriseIntelligenceGenerator.ts",
          "line": 390,
          "code": "async analyzePatterns(data?: any): Promise<PatternAnalysis> {",
          "match": "(data?: any)"
        },
        {
          "file": "src/services/campaign/EnterpriseIntelligenceGenerator.ts",
          "line": 418,
          "code": "async generateRecommendations(context?: any): Promise<Recommendation[]> {",
          "match": "(context?: any)"
        },
        {
          "file": "src/services/campaign/EnterpriseIntelligenceGenerator.ts",
          "line": 494,
          "code": "${capabilities.map(cap => `  /**",
          "match": "(cap => `  /**\n   * ${cap.description}\n   */\n  private ${cap.name}(data?: any)"
        }
      ]
    },
    "src/services/campaign/CorruptionDetectionSystem.test.ts": {
      "count": 4,
      "examples": [
        {
          "file": "src/services/campaign/CorruptionDetectionSystem.test.ts",
          "line": 91,
          "code": "function testFunction(posit: anyi: anyo: anyn: anys: string) {",
          "match": "(posit: anyi: anyo: anyn: anys: string)"
        },
        {
          "file": "src/services/campaign/CorruptionDetectionSystem.test.ts",
          "line": 490,
          "code": "function test(param: any) {",
          "match": "(param: any)"
        },
        {
          "file": "src/services/campaign/CorruptionDetectionSystem.test.ts",
          "line": 371,
          "code": "(error as any).stdout = 'Unexpected token at line 5';",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/__tests__/SafetyProtocol.test.ts": {
      "count": 30,
      "examples": [
        {
          "file": "src/services/campaign/__tests__/SafetyProtocol.test.ts",
          "line": 57,
          "code": "const stashes = (safetyProtocol as any).stashes;",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/__tests__/SafetyProtocol.test.ts",
          "line": 62,
          "code": "const events = (safetyProtocol as any).safetyEvents;",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/__tests__/SafetyProtocol.test.ts",
          "line": 90,
          "code": "const stashes = (safetyProtocol as any).stashes;",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/__tests__/integration/PhaseExecution.integration.test.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/services/campaign/__tests__/integration/PhaseExecution.integration.test.ts",
          "line": 328,
          "code": "jest.spyOn(campaignController as any, 'executeTool').mockRejectedValue(",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/__tests__/integration/PhaseExecution.integration.test.ts",
          "line": 344,
          "code": "jest.spyOn(campaignController as any, 'validatePhaseProgress').mockResolvedValue({",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/__tests__/integration/PhaseExecution.integration.test.ts",
          "line": 309,
          "code": "const allSafetyEvents: any[] = [];",
          "match": ": any[]"
        }
      ]
    },
    "src/services/campaign/__tests__/integration/EndToEndCampaign.integration.test.ts": {
      "count": 5,
      "examples": [
        {
          "file": "src/services/campaign/__tests__/integration/EndToEndCampaign.integration.test.ts",
          "line": 428,
          "code": "jest.spyOn(campaignController as any, 'executeTool').mockResolvedValue({",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/__tests__/integration/EndToEndCampaign.integration.test.ts",
          "line": 505,
          "code": "expect((customSafetyProtocol as any).settings.maxFilesPerBatch).toBe(50);",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/__tests__/integration/EndToEndCampaign.integration.test.ts",
          "line": 506,
          "code": "expect((customSafetyProtocol as any).settings.stashRetentionDays).toBe(14);",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/__tests__/integration/SafetyProtocol.integration.test.ts": {
      "count": 6,
      "examples": [
        {
          "file": "src/services/campaign/__tests__/integration/SafetyProtocol.integration.test.ts",
          "line": 245,
          "code": "const error = new Error('TypeScript compilation failed') as any;",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/__tests__/integration/SafetyProtocol.integration.test.ts",
          "line": 442,
          "code": "(safetyProtocol as any).stashes.set('old-stash', oldStash);",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/__tests__/integration/SafetyProtocol.integration.test.ts",
          "line": 443,
          "code": "(safetyProtocol as any).stashes.set('recent-stash', recentStash);",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/__tests__/ProgressTracker.test.ts": {
      "count": 10,
      "examples": [
        {
          "file": "src/services/campaign/__tests__/ProgressTracker.test.ts",
          "line": 44,
          "code": "const lastUpdate = (progressTracker as any).lastMetricsUpdate;",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/__tests__/ProgressTracker.test.ts",
          "line": 64,
          "code": "const error = new Error('No matches found') as any;",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/__tests__/ProgressTracker.test.ts",
          "line": 76,
          "code": "const error = new Error('Command failed') as any;",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/__tests__/setup.ts": {
      "count": 8,
      "examples": [
        {
          "file": "src/services/campaign/__tests__/setup.ts",
          "line": 29,
          "code": "(global as any).testUtils = {",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/__tests__/setup.ts",
          "line": 30,
          "code": "gitMock: gitOperationsMock as any,",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/__tests__/setup.ts",
          "line": 31,
          "code": "scriptMock: scriptExecutionMock as any,",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/__tests__/performance/BuildPerformance.test.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/services/campaign/__tests__/performance/BuildPerformance.test.ts",
          "line": 198,
          "code": "(process as any).memoryUsage = jest.fn().mockReturnValue({",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/__tests__/performance/BuildPerformance.test.ts",
          "line": 217,
          "code": "(process as any).memoryUsage = jest.fn().mockReturnValue({",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/__tests__/performance/BundleSize.test.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/services/campaign/__tests__/performance/BundleSize.test.ts",
          "line": 549,
          "code": "jest.spyOn(campaignController as any, 'getCurrentMetrics').mockImplementation(async () => {",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/__tests__/performance/CacheHitRate.test.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/services/campaign/__tests__/performance/CacheHitRate.test.ts",
          "line": 305,
          "code": "jest.spyOn(campaignController as any, 'getCurrentMetrics').mockImplementation(async () => {",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/__tests__/performance/MemoryUsage.test.ts": {
      "count": 2,
      "examples": [
        {
          "file": "src/services/campaign/__tests__/performance/MemoryUsage.test.ts",
          "line": 208,
          "code": "(safetyProtocol as any).addSafetyEvent({",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/__tests__/performance/MemoryUsage.test.ts",
          "line": 292,
          "code": "jest.spyOn(campaignController as any, 'executeTool').mockResolvedValue({",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/__tests__/CampaignController.test.ts": {
      "count": 25,
      "examples": [
        {
          "file": "src/services/campaign/__tests__/CampaignController.test.ts",
          "line": 102,
          "code": "const events = (controller as any).safetyEvents;",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/__tests__/CampaignController.test.ts",
          "line": 107,
          "code": "const currentPhase = (controller as any).currentPhase;",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/__tests__/CampaignController.test.ts",
          "line": 119,
          "code": "jest.spyOn(controller as any, 'createSafetyCheckpoint').mockResolvedValue('checkpoint_123');",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/AlgorithmPerformanceValidator.test.ts": {
      "count": 12,
      "examples": [
        {
          "file": "src/services/campaign/AlgorithmPerformanceValidator.test.ts",
          "line": 126,
          "code": "const mockValidateMemoryCache = jest.spyOn(validator as any, 'validateMemoryCache');",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/AlgorithmPerformanceValidator.test.ts",
          "line": 153,
          "code": "const mockRunAlgorithmBenchmark = jest.spyOn(validator as any, 'runAlgorithmBenchmark');",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/AlgorithmPerformanceValidator.test.ts",
          "line": 181,
          "code": "const mockRunAlgorithmBenchmark = jest.spyOn(validator as any, 'runAlgorithmBenchmark');",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/ScriptIntegrationSystem.test.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/services/campaign/ScriptIntegrationSystem.test.ts",
          "line": 107,
          "code": "const error = new Error('Script failed') as any;",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/MetricsCollectionSystem.test.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/services/campaign/MetricsCollectionSystem.test.ts",
          "line": 81,
          "code": "const error = new Error('Command failed') as any;",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/EnhancedErrorFixerIntegration.test.ts": {
      "count": 14,
      "examples": [
        {
          "file": "src/services/campaign/EnhancedErrorFixerIntegration.test.ts",
          "line": 33,
          "code": "const buildMethod = (integration as any).buildFixerArguments.bind(integration);",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/EnhancedErrorFixerIntegration.test.ts",
          "line": 48,
          "code": "const buildMethod = (integration as any).buildFixerArguments.bind(integration);",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/EnhancedErrorFixerIntegration.test.ts",
          "line": 67,
          "code": "const parseMethod = (integration as any).parseFixerOutput.bind(integration);",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/TypeScriptErrorAnalyzer.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/services/campaign/TypeScriptErrorAnalyzer.ts",
          "line": 101,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/services/campaign/TypeScriptErrorAnalyzer.ts",
          "line": 101,
          "code": "} catch (error: any) {",
          "match": "(error: any)"
        },
        {
          "file": "src/services/campaign/TypeScriptErrorAnalyzer.ts",
          "line": 101,
          "code": "} catch (error: any) {",
          "match": ": any)"
        }
      ]
    },
    "src/services/campaign/FinalValidationSystem.test.ts": {
      "count": 21,
      "examples": [
        {
          "file": "src/services/campaign/FinalValidationSystem.test.ts",
          "line": 32,
          "code": "const result = await (validationSystem as any).validateTypeScriptErrors();",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/FinalValidationSystem.test.ts",
          "line": 44,
          "code": "(mockError as any).stdout = `",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/FinalValidationSystem.test.ts",
          "line": 52,
          "code": "const result = await (validationSystem as any).validateTypeScriptErrors();",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/ExportTransformationEngine.test.ts": {
      "count": 20,
      "examples": [
        {
          "file": "src/services/campaign/ExportTransformationEngine.test.ts",
          "line": 110,
          "code": "(mockSafetyProtocol as any).prototype.createSafetyCheckpoint = jest.fn().mockResolvedValue('checkpoint-123');",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/ExportTransformationEngine.test.ts",
          "line": 111,
          "code": "(mockSafetyProtocol as any).prototype.rollbackToCheckpoint = jest.fn().mockResolvedValue(undefined);",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/ExportTransformationEngine.test.ts",
          "line": 112,
          "code": "(mockSafetyProtocol as any).prototype.emergencyRollback = jest.fn().mockResolvedValue(undefined);",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/PerformanceMonitoringSystem.test.ts": {
      "count": 5,
      "examples": [
        {
          "file": "src/services/campaign/PerformanceMonitoringSystem.test.ts",
          "line": 29,
          "code": "(process.hrtime as any) = { bigint: mockHrtime };",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/PerformanceMonitoringSystem.test.ts",
          "line": 178,
          "code": "(performanceMonitor as any).performanceHistory = [mockMetrics1, mockMetrics2, mockMetrics3];",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/PerformanceMonitoringSystem.test.ts",
          "line": 208,
          "code": "(performanceMonitor as any).performanceHistory = [mockMetrics1, mockMetrics2, mockMetrics3];",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/TypeScriptErrorResolutionCampaign.ts": {
      "count": 13,
      "examples": [
        {
          "file": "src/services/campaign/TypeScriptErrorResolutionCampaign.ts",
          "line": 65,
          "code": "this.campaignController = new CampaignController({} as any);",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/TypeScriptErrorResolutionCampaign.ts",
          "line": 67,
          "code": "this.intelligenceSystem = CampaignIntelligenceSystem as any;",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/TypeScriptErrorResolutionCampaign.ts",
          "line": 68,
          "code": "this.safetyProtocol = new SafetyProtocol({} as any);",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/ExportTransformationEngine.ts": {
      "count": 5,
      "examples": [
        {
          "file": "src/services/campaign/ExportTransformationEngine.ts",
          "line": 613,
          "code": "private async handleCriticalFailure(error: any): Promise<void> {",
          "match": "(error: any)"
        },
        {
          "file": "src/services/campaign/ExportTransformationEngine.ts",
          "line": 336,
          "code": "const checkpointId = await (this.safetyProtocol as any).createSafetyCheckpoint('transformation-start');",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/ExportTransformationEngine.ts",
          "line": 413,
          "code": "checkpointId = await (this.safetyProtocol as any).createSafetyCheckpoint(`batch-${batch.id}`);",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/LintingWarningAnalyzer.test.ts": {
      "count": 11,
      "examples": [
        {
          "file": "src/services/campaign/LintingWarningAnalyzer.test.ts",
          "line": 28,
          "code": "function test(param: any) {",
          "match": "(param: any)"
        },
        {
          "file": "src/services/campaign/LintingWarningAnalyzer.test.ts",
          "line": 34,
          "code": "const warnings = (analyzer as any).analyzeFileContent('/test/file.ts', content);",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/LintingWarningAnalyzer.test.ts",
          "line": 49,
          "code": "const warnings = (analyzer as any).analyzeFileContent('/test/file.ts', content);",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/TypeScriptErrorAnalyzer.test.ts": {
      "count": 6,
      "examples": [
        {
          "file": "src/services/campaign/TypeScriptErrorAnalyzer.test.ts",
          "line": 25,
          "code": "const parseMethod = (analyzer as any).parseErrorsFromOutput.bind(analyzer);",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/TypeScriptErrorAnalyzer.test.ts",
          "line": 61,
          "code": "const categorizeMethod = (analyzer as any).categorizeError.bind(analyzer);",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/TypeScriptErrorAnalyzer.test.ts",
          "line": 74,
          "code": "const calculateMethod = (analyzer as any).calculateErrorPriority.bind(analyzer);",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/CampaignIntelligenceSystem.test.ts": {
      "count": 4,
      "examples": [
        {
          "file": "src/services/campaign/CampaignIntelligenceSystem.test.ts",
          "line": 190,
          "code": "mockErrorAnalyzer as any,",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/CampaignIntelligenceSystem.test.ts",
          "line": 191,
          "code": "mockFixerIntegration as any,",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/CampaignIntelligenceSystem.test.ts",
          "line": 192,
          "code": "mockAnyElimination as any",
          "match": "as any"
        }
      ]
    },
    "src/services/campaign/run-dependency-security.ts": {
      "count": 19,
      "examples": [
        {
          "file": "src/services/campaign/run-dependency-security.ts",
          "line": 172,
          "code": "private printResults(result: any): void {",
          "match": "(result: any)"
        },
        {
          "file": "src/services/campaign/run-dependency-security.ts",
          "line": 202,
          "code": "private printSecurityReport(securityReport: any): void {",
          "match": "(securityReport: any)"
        },
        {
          "file": "src/services/campaign/run-dependency-security.ts",
          "line": 208,
          "code": "securityReport.vulnerabilities.forEach((vuln: any) => {",
          "match": "((vuln: any)"
        }
      ]
    },
    "src/services/campaign/DependencySecurityMonitor.ts": {
      "count": 7,
      "examples": [
        {
          "file": "src/services/campaign/DependencySecurityMonitor.ts",
          "line": 488,
          "code": "private processOutdatedData(outdatedData: any): UpdateReport {",
          "match": "(outdatedData: any)"
        },
        {
          "file": "src/services/campaign/DependencySecurityMonitor.ts",
          "line": 259,
          "code": "const vuln = vulnData as any;",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/DependencySecurityMonitor.ts",
          "line": 312,
          "code": "const info = updateInfo as any;",
          "match": "as any"
        }
      ]
    },
    "src/services/ErrorTrackingSystem.ts": {
      "count": 9,
      "examples": [
        {
          "file": "src/services/ErrorTrackingSystem.ts",
          "line": 74,
          "code": "private subscribers: Set<(data: any) => void> = new Set();",
          "match": "(data: any)"
        },
        {
          "file": "src/services/ErrorTrackingSystem.ts",
          "line": 258,
          "code": "private parseLintingResults(lintResults: any[]): LintingViolation[] {",
          "match": "(lintResults: any[])"
        },
        {
          "file": "src/services/ErrorTrackingSystem.ts",
          "line": 679,
          "code": "public subscribe(callback: (data: any) => void) {",
          "match": "(callback: (data: any)"
        }
      ]
    },
    "src/services/initializationService.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/services/initializationService.ts",
          "line": 86,
          "code": "const managerObj = (manager as unknown) as any;",
          "match": "as any"
        },
        {
          "file": "src/services/initializationService.ts",
          "line": 126,
          "code": "} as any)",
          "match": "as any"
        },
        {
          "file": "src/services/initializationService.ts",
          "line": 195,
          "code": "const alignmentData = (alignment as unknown) as any;",
          "match": "as any"
        }
      ]
    },
    "src/services/ElementalCalculator.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/services/ElementalCalculator.ts",
          "line": 184,
          "code": "log.info(\"[ElementalCalculator] Calculating elemental state from: \", positions as any);",
          "match": "as any"
        }
      ]
    },
    "src/services/PredictiveIntelligenceService.ts": {
      "count": 7,
      "examples": [
        {
          "file": "src/services/PredictiveIntelligenceService.ts",
          "line": 1078,
          "code": "recipeId: (recipeData as any)?.id,",
          "match": "as any"
        },
        {
          "file": "src/services/PredictiveIntelligenceService.ts",
          "line": 1079,
          "code": "ingredientCount: (ingredientData as any)?.length,",
          "match": "as any"
        },
        {
          "file": "src/services/PredictiveIntelligenceService.ts",
          "line": 1113,
          "code": "(logger as any)[level]?.(`[PredictiveIntelligence] ${message}${data ? ` - ${JSON.stringify(data)}` : ''}`);",
          "match": "as any"
        }
      ]
    },
    "src/services/ErrorTrackingEnterpriseSystem.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/services/ErrorTrackingEnterpriseSystem.ts",
          "line": 155,
          "code": "this.updateErrorPatterns(((analysisResult as unknown as Record<string, unknown>)?.distribution as Record<string, unknown>)?.priorityRanking as any[] || []);",
          "match": "as any"
        }
      ]
    },
    "src/services/CampaignWorkflowManager.ts": {
      "count": 1,
      "examples": [
        {
          "file": "src/services/CampaignWorkflowManager.ts",
          "line": 131,
          "code": "parameters: Record<string, any>;",
          "match": "Record<string, any>"
        }
      ]
    },
    "src/services/ConsolidatedRecipeService.ts": {
      "count": 5,
      "examples": [
        {
          "file": "src/services/ConsolidatedRecipeService.ts",
          "line": 101,
          "code": "const serviceObj = (unifiedRecipeService as unknown) as any;",
          "match": "as any"
        },
        {
          "file": "src/services/ConsolidatedRecipeService.ts",
          "line": 106,
          "code": "const resultData = (result as any);",
          "match": "as any"
        },
        {
          "file": "src/services/ConsolidatedRecipeService.ts",
          "line": 265,
          "code": "const serviceData = (unifiedRecipeService as unknown) as any;",
          "match": "as any"
        }
      ]
    },
    "src/services/AlertingSystem.ts": {
      "count": 22,
      "examples": [
        {
          "file": "src/services/AlertingSystem.ts",
          "line": 644,
          "code": "private async triggerCampaign(config: any): Promise<any> {",
          "match": "(config: any)"
        },
        {
          "file": "src/services/AlertingSystem.ts",
          "line": 651,
          "code": "private async makeApiCall(config: any): Promise<any> {",
          "match": "(config: any)"
        },
        {
          "file": "src/services/AlertingSystem.ts",
          "line": 658,
          "code": "private async sendNotification(config: any): Promise<any> {",
          "match": "(config: any)"
        }
      ]
    },
    "src/services/PerformanceMonitoringService.ts": {
      "count": 5,
      "examples": [
        {
          "file": "src/services/PerformanceMonitoringService.ts",
          "line": 38,
          "code": "private subscribers: Set<(data: any) => void> = new Set();",
          "match": "(data: any)"
        },
        {
          "file": "src/services/PerformanceMonitoringService.ts",
          "line": 241,
          "code": "public subscribe(callback: (data: any) => void) {",
          "match": "(callback: (data: any)"
        },
        {
          "file": "src/services/PerformanceMonitoringService.ts",
          "line": 75,
          "code": "const memInfo = (performance as any).memory;",
          "match": "as any"
        }
      ]
    },
    "src/services/EnterpriseIntelligenceIntegration.ts": {
      "count": 44,
      "examples": [
        {
          "file": "src/services/EnterpriseIntelligenceIntegration.ts",
          "line": 225,
          "code": "this.predictiveIntelligenceService = createPredictiveIntelligenceService(predictiveConfig as any);",
          "match": "as any"
        },
        {
          "file": "src/services/EnterpriseIntelligenceIntegration.ts",
          "line": 330,
          "code": "const elementalProps = (recipeData as any)?.elementalProperties ??",
          "match": "as any"
        },
        {
          "file": "src/services/EnterpriseIntelligenceIntegration.ts",
          "line": 331,
          "code": "(astrologicalContext as any)?.elementalProperties ??",
          "match": "as any"
        }
      ]
    },
    "src/services/EnterpriseIntelligenceOrchestrator.ts": {
      "count": 5,
      "examples": [
        {
          "file": "src/services/EnterpriseIntelligenceOrchestrator.ts",
          "line": 1136,
          "code": "private async checkServiceHealth(name: string, service: any): Promise<{",
          "match": "(name: string, service: any)"
        },
        {
          "file": "src/services/EnterpriseIntelligenceOrchestrator.ts",
          "line": 1637,
          "code": "this.reports = data.reports.map((r: any) => ({",
          "match": "((r: any)"
        },
        {
          "file": "src/services/EnterpriseIntelligenceOrchestrator.ts",
          "line": 1136,
          "code": "private async checkServiceHealth(name: string, service: any): Promise<{",
          "match": ": any)"
        }
      ]
    },
    "src/services/CampaignConflictResolver.ts": {
      "count": 3,
      "examples": [
        {
          "file": "src/services/CampaignConflictResolver.ts",
          "line": 65,
          "code": "parameters: Record<string, any>;",
          "match": "Record<string, any>"
        },
        {
          "file": "src/services/CampaignConflictResolver.ts",
          "line": 111,
          "code": "parameters: Record<string, any>;",
          "match": "Record<string, any>"
        },
        {
          "file": "src/services/CampaignConflictResolver.ts",
          "line": 631,
          "code": "parameters: Record<string, any>",
          "match": "Record<string, any>"
        }
      ]
    }
  },
  "topFiles": [
    {
      "file": "src/__tests__/linting/CampaignSystemRuleValidation.test.ts",
      "count": 105,
      "examples": [
        {
          "file": "src/__tests__/linting/CampaignSystemRuleValidation.test.ts",
          "line": 32,
          "code": "private executeComplexCampaign(config: any) {",
          "match": "(config: any)"
        },
        {
          "file": "src/__tests__/linting/CampaignSystemRuleValidation.test.ts",
          "line": 110,
          "code": "const complexityErrors = result[0].messages.filter((msg: any) =>",
          "match": "((msg: any)"
        },
        {
          "file": "src/__tests__/linting/CampaignSystemRuleValidation.test.ts",
          "line": 122,
          "code": "const complexityErrors = result[0].messages.filter((msg: any) =>",
          "match": "((msg: any)"
        }
      ]
    },
    {
      "file": "src/__tests__/linting/ConfigurationFileRuleValidation.test.ts",
      "count": 75,
      "examples": [
        {
          "file": "src/__tests__/linting/ConfigurationFileRuleValidation.test.ts",
          "line": 71,
          "code": "const dynamicRequireErrors = result[0].messages.filter((msg: any) =>",
          "match": "((msg: any)"
        },
        {
          "file": "src/__tests__/linting/ConfigurationFileRuleValidation.test.ts",
          "line": 83,
          "code": "const dynamicRequireErrors = result[0].messages.filter((msg: any) =>",
          "match": "((msg: any)"
        },
        {
          "file": "src/__tests__/linting/ConfigurationFileRuleValidation.test.ts",
          "line": 137,
          "code": "const dynamicRequireErrors = result[0].messages.filter((msg: any) =>",
          "match": "((msg: any)"
        }
      ]
    },
    {
      "file": "src/__tests__/linting/TestFileRuleValidation.test.ts",
      "count": 67,
      "examples": [
        {
          "file": "src/__tests__/linting/TestFileRuleValidation.test.ts",
          "line": 62,
          "code": "const unusedVarErrors = result[0].messages.filter((msg: any) =>",
          "match": "((msg: any)"
        },
        {
          "file": "src/__tests__/linting/TestFileRuleValidation.test.ts",
          "line": 76,
          "code": "const unusedVarErrors = result[0].messages.filter((msg: any) =>",
          "match": "((msg: any)"
        },
        {
          "file": "src/__tests__/linting/TestFileRuleValidation.test.ts",
          "line": 125,
          "code": "const unusedVarErrors = result[0].messages.filter((msg: any) =>",
          "match": "((msg: any)"
        }
      ]
    },
    {
      "file": "src/__tests__/linting/DomainSpecificRuleValidation.test.ts",
      "count": 51,
      "examples": [
        {
          "file": "src/__tests__/linting/DomainSpecificRuleValidation.test.ts",
          "line": 142,
          "code": "const unusedVarErrors = result[0].messages.filter((msg: any) =>",
          "match": "((msg: any)"
        },
        {
          "file": "src/__tests__/linting/DomainSpecificRuleValidation.test.ts",
          "line": 155,
          "code": "const unusedVarErrors = result[0].messages.filter((msg: any) =>",
          "match": "((msg: any)"
        },
        {
          "file": "src/__tests__/linting/DomainSpecificRuleValidation.test.ts",
          "line": 303,
          "code": "const complexityErrors = result[0].messages.filter((msg: any) =>",
          "match": "((msg: any)"
        }
      ]
    },
    {
      "file": "src/__tests__/linting/AstrologicalRuleValidation.test.ts",
      "count": 47,
      "examples": [
        {
          "file": "src/__tests__/linting/AstrologicalRuleValidation.test.ts",
          "line": 171,
          "code": "const unusedVarErrors = result[0].messages.filter((msg: any) =>",
          "match": "((msg: any)"
        },
        {
          "file": "src/__tests__/linting/AstrologicalRuleValidation.test.ts",
          "line": 185,
          "code": "const unusedVarErrors = result[0].messages.filter((msg: any) =>",
          "match": "((msg: any)"
        },
        {
          "file": "src/__tests__/linting/AstrologicalRuleValidation.test.ts",
          "line": 218,
          "code": "const unusedVarErrors = result[0].messages.filter((msg: any) =>",
          "match": "((msg: any)"
        }
      ]
    },
    {
      "file": "src/__tests__/linting/ComprehensiveLintingTestSuite.test.ts",
      "count": 46,
      "examples": [
        {
          "file": "src/__tests__/linting/ComprehensiveLintingTestSuite.test.ts",
          "line": 72,
          "code": "const hasJavaScriptConfig = config.some((c: any) =>",
          "match": "((c: any)"
        },
        {
          "file": "src/__tests__/linting/ComprehensiveLintingTestSuite.test.ts",
          "line": 75,
          "code": "const hasTypeScriptConfig = config.some((c: any) =>",
          "match": "((c: any)"
        },
        {
          "file": "src/__tests__/linting/ComprehensiveLintingTestSuite.test.ts",
          "line": 78,
          "code": "const hasAstrologicalConfig = config.some((c: any) =>",
          "match": "((c: any)"
        }
      ]
    },
    {
      "file": "src/data/unified/recipeBuilding.ts",
      "count": 46,
      "examples": [
        {
          "file": "src/data/unified/recipeBuilding.ts",
          "line": 1669,
          "code": "private calculateEnergeticProfile(recipe: MonicaOptimizedRecipe, alignment: any): {",
          "match": "(recipe: MonicaOptimizedRecipe, alignment: any)"
        },
        {
          "file": "src/data/unified/recipeBuilding.ts",
          "line": 475,
          "code": "original: (adj as any)?.method || '',",
          "match": "as any"
        },
        {
          "file": "src/data/unified/recipeBuilding.ts",
          "line": 476,
          "code": "adjusted: (adj as any)?.adjustment || '',",
          "match": "as any"
        }
      ]
    },
    {
      "file": "src/services/EnterpriseIntelligenceIntegration.ts",
      "count": 44,
      "examples": [
        {
          "file": "src/services/EnterpriseIntelligenceIntegration.ts",
          "line": 225,
          "code": "this.predictiveIntelligenceService = createPredictiveIntelligenceService(predictiveConfig as any);",
          "match": "as any"
        },
        {
          "file": "src/services/EnterpriseIntelligenceIntegration.ts",
          "line": 330,
          "code": "const elementalProps = (recipeData as any)?.elementalProperties ??",
          "match": "as any"
        },
        {
          "file": "src/services/EnterpriseIntelligenceIntegration.ts",
          "line": 331,
          "code": "(astrologicalContext as any)?.elementalProperties ??",
          "match": "as any"
        }
      ]
    },
    {
      "file": "src/__tests__/linting/ESLintConfigurationValidation.test.ts",
      "count": 42,
      "examples": [
        {
          "file": "src/__tests__/linting/ESLintConfigurationValidation.test.ts",
          "line": 38,
          "code": "const jsConfig = config.find((c: any) =>",
          "match": "((c: any)"
        },
        {
          "file": "src/__tests__/linting/ESLintConfigurationValidation.test.ts",
          "line": 46,
          "code": "const tsConfig = config.find((c: any) =>",
          "match": "((c: any)"
        },
        {
          "file": "src/__tests__/linting/ESLintConfigurationValidation.test.ts",
          "line": 58,
          "code": "const astroConfig = config.find((c: any) =>",
          "match": "((c: any)"
        }
      ]
    },
    {
      "file": "src/services/campaign/ValidationFramework.ts",
      "count": 42,
      "examples": [
        {
          "file": "src/services/campaign/ValidationFramework.ts",
          "line": 117,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/services/campaign/ValidationFramework.ts",
          "line": 157,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        },
        {
          "file": "src/services/campaign/ValidationFramework.ts",
          "line": 198,
          "code": "} catch (error: any) {",
          "match": "catch (error: any)"
        }
      ]
    },
    {
      "file": "src/services/campaign/UnusedExportAnalyzer.test.ts",
      "count": 39,
      "examples": [
        {
          "file": "src/services/campaign/UnusedExportAnalyzer.test.ts",
          "line": 128,
          "code": "expect(exports.find((e: any) => e.exportName === 'testConst')).toBeDefined();",
          "match": "(exports.find((e: any)"
        },
        {
          "file": "src/services/campaign/UnusedExportAnalyzer.test.ts",
          "line": 129,
          "code": "expect(exports.find((e: any) => e.exportName === 'testFunction')).toBeDefined();",
          "match": "(exports.find((e: any)"
        },
        {
          "file": "src/services/campaign/UnusedExportAnalyzer.test.ts",
          "line": 130,
          "code": "expect(exports.find((e: any) => e.exportName === 'TestClass')).toBeDefined();",
          "match": "(exports.find((e: any)"
        }
      ]
    },
    {
      "file": "src/components/CuisineRecommender.tsx",
      "count": 38,
      "examples": [
        {
          "file": "src/components/CuisineRecommender.tsx",
          "line": 231,
          "code": "const calculateAlchemicalBalance = (alchemicalProperties: any): number => {",
          "match": "(alchemicalProperties: any)"
        },
        {
          "file": "src/components/CuisineRecommender.tsx",
          "line": 276,
          "code": "const calculateRecipeKalchmHarmony = (",
          "match": "(\n  recipeThermodynamics: any,\n  cuisineThermodynamics?: any\n)"
        },
        {
          "file": "src/components/CuisineRecommender.tsx",
          "line": 299,
          "code": "const calculateThermodynamicOptimization = (",
          "match": "(\n  thermodynamics: any,\n  currentElementalProfile: ElementalProperties\n)"
        }
      ]
    },
    {
      "file": "src/hooks/useEnterpriseIntelligence.ts",
      "count": 36,
      "examples": [
        {
          "file": "src/hooks/useEnterpriseIntelligence.ts",
          "line": 43,
          "code": "performAnalysis: (",
          "match": "(\n    recipeData: any,\n    ingredientData: any,\n    astrologicalContext: {\n      zodiacSign: ZodiacSign;\n      lunarPhase: LunarPhase;\n      elementalProperties: ElementalProperties;\n      planetaryPositions?: any;\n    }\n  )"
        },
        {
          "file": "src/hooks/useEnterpriseIntelligence.ts",
          "line": 190,
          "code": "const performAnalysis = useCallback(async (",
          "match": "(async (\n    recipeData: any,\n    ingredientData: any,\n    astrologicalContext: {\n      zodiacSign: ZodiacSign;\n      lunarPhase: LunarPhase;\n      elementalProperties: ElementalProperties;\n      planetaryPositions?: any;\n    }\n  )"
        },
        {
          "file": "src/hooks/useEnterpriseIntelligence.ts",
          "line": 127,
          "code": "recipe: (state.analysis.recipeIntelligence as any)?.recommendations || [],",
          "match": "as any"
        }
      ]
    },
    {
      "file": "src/services/campaign/EnterpriseIntelligenceGenerator.test.ts",
      "count": 35,
      "examples": [
        {
          "file": "src/services/campaign/EnterpriseIntelligenceGenerator.test.ts",
          "line": 243,
          "code": "expect(capabilities.some((cap: any) => cap.name === 'analyzeFunction')).toBe(true);",
          "match": "(capabilities.some((cap: any)"
        },
        {
          "file": "src/services/campaign/EnterpriseIntelligenceGenerator.test.ts",
          "line": 267,
          "code": "expect(capabilities.some((cap: any) => cap.name === 'analyzeClassStructure')).toBe(true);",
          "match": "(capabilities.some((cap: any)"
        },
        {
          "file": "src/services/campaign/EnterpriseIntelligenceGenerator.test.ts",
          "line": 290,
          "code": "expect(capabilities.some((cap: any) => cap.name === 'generateAdvancedInsights')).toBe(true);",
          "match": "(capabilities.some((cap: any)"
        }
      ]
    },
    {
      "file": "src/components/IngredientRecommender.tsx",
      "count": 32,
      "examples": [
        {
          "file": "src/components/IngredientRecommender.tsx",
          "line": 330,
          "code": "} as any, { limit: 40 });",
          "match": "as any"
        },
        {
          "file": "src/components/IngredientRecommender.tsx",
          "line": 562,
          "code": "else if (isOil(ingredient as any)) {",
          "match": "as any"
        },
        {
          "file": "src/components/IngredientRecommender.tsx",
          "line": 630,
          "code": "const targetCategory = normalizedCategory === 'other' ? determineCategory((item as any)?.name) : normalizedCategory;",
          "match": "as any"
        }
      ]
    },
    {
      "file": "src/services/campaign/__tests__/SafetyProtocol.test.ts",
      "count": 30,
      "examples": [
        {
          "file": "src/services/campaign/__tests__/SafetyProtocol.test.ts",
          "line": 57,
          "code": "const stashes = (safetyProtocol as any).stashes;",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/__tests__/SafetyProtocol.test.ts",
          "line": 62,
          "code": "const events = (safetyProtocol as any).safetyEvents;",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/__tests__/SafetyProtocol.test.ts",
          "line": 90,
          "code": "const stashes = (safetyProtocol as any).stashes;",
          "match": "as any"
        }
      ]
    },
    {
      "file": "src/constants/chakraSymbols.ts",
      "count": 28,
      "examples": [
        {
          "file": "src/constants/chakraSymbols.ts",
          "line": 436,
          "code": "analyzeDemonstrationPlatform: (allChakraData: any) => {",
          "match": "(allChakraData: any)"
        },
        {
          "file": "src/constants/chakraSymbols.ts",
          "line": 572,
          "code": "function generateMantraRecommendations(analysis: any): string[] {",
          "match": "(analysis: any)"
        },
        {
          "file": "src/constants/chakraSymbols.ts",
          "line": 590,
          "code": "function generateVisualRecommendations(analysis: any): string[] {",
          "match": "(analysis: any)"
        }
      ]
    },
    {
      "file": "src/components/help/CodeTemplates.tsx",
      "count": 25,
      "examples": [
        {
          "file": "src/components/help/CodeTemplates.tsx",
          "line": 76,
          "code": "function calculateElementalInfluences(positions: any): ElementalProperties {",
          "match": "(positions: any)"
        },
        {
          "file": "src/components/help/CodeTemplates.tsx",
          "line": 125,
          "code": "private async calculate{{CALCULATION_TYPE}}(",
          "match": "(\n    positions: any,\n    {{PARAMETERS}}\n  )"
        },
        {
          "file": "src/components/help/CodeTemplates.tsx",
          "line": 144,
          "code": "private calculateFireInfluence(positions: any): number {",
          "match": "(positions: any)"
        }
      ]
    },
    {
      "file": "src/services/campaign/__tests__/CampaignController.test.ts",
      "count": 25,
      "examples": [
        {
          "file": "src/services/campaign/__tests__/CampaignController.test.ts",
          "line": 102,
          "code": "const events = (controller as any).safetyEvents;",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/__tests__/CampaignController.test.ts",
          "line": 107,
          "code": "const currentPhase = (controller as any).currentPhase;",
          "match": "as any"
        },
        {
          "file": "src/services/campaign/__tests__/CampaignController.test.ts",
          "line": 119,
          "code": "jest.spyOn(controller as any, 'createSafetyCheckpoint').mockResolvedValue('checkpoint_123');",
          "match": "as any"
        }
      ]
    },
    {
      "file": "src/utils/mcpServerIntegration.ts",
      "count": 23,
      "examples": [
        {
          "file": "src/utils/mcpServerIntegration.ts",
          "line": 435,
          "code": "private async callMCPServer(serverName: string, method: string, params: any): Promise<MCPApiResponse> {",
          "match": "(serverName: string, method: string, params: any)"
        },
        {
          "file": "src/utils/mcpServerIntegration.ts",
          "line": 470,
          "code": "private async simulateMCPCall(serverName: string, method: string, params: any): Promise<any> {",
          "match": "(serverName: string, method: string, params: any)"
        },
        {
          "file": "src/utils/mcpServerIntegration.ts",
          "line": 577,
          "code": "private async callDirectSpoonacularAPI(query: string, options: any): Promise<MCPApiResponse> {",
          "match": "(query: string, options: any)"
        }
      ]
    }
  ],
  "recommendations": [
    {
      "type": "TYPE_ASSERTION",
      "priority": "HIGH",
      "suggestion": "Replace \"as any\" with proper interface types or progressive casting",
      "count": 1184
    },
    {
      "type": "ASTROLOGICAL",
      "priority": "MEDIUM",
      "suggestion": "Use ZodiacSign, Planet, Element, ElementalProperties from enhanced-astrology.d.ts",
      "count": 49
    },
    {
      "type": "RECIPE",
      "priority": "HIGH",
      "suggestion": "Use Recipe, Ingredient, EnhancedRecipe from unified.ts",
      "count": 66
    },
    {
      "type": "CAMPAIGN",
      "priority": "MEDIUM",
      "suggestion": "Use CampaignPhase, ProgressMetrics, SafetyEvent from campaign.ts",
      "count": 30
    }
  ]
}
