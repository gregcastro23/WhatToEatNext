{
  "timestamp": "2025-07-04T19:48:41.040Z",
  "extendedInterfaces": {
    "instances": [
      {
        "file": "src/components/CookingMethods.tsx",
        "interfaceName": "ExtendedAlchemicalItem",
        "baseInterface": "AlchemicalItem",
        "body": "astrologicalInfluences?: AstrologicalInfluence;\n  culturalOrigin?: string;\n  bestFor?: string[];\n  duration?: {\n    min: number;\n    max: number;",
        "hasFlexibleProperty": false,
        "lineNumber": 180
      },
      {
        "file": "src/components/Header/FoodRecommender/IngredientRecommendations.tsx",
        "interfaceName": "ExtendedIngredient",
        "baseInterface": "Ingredient",
        "body": "nutritionalProfile?: NutritionalProfile;",
        "hasFlexibleProperty": false,
        "lineNumber": 6
      },
      {
        "file": "src/components/IngredientRecommender/index.tsx",
        "interfaceName": "ExtendedIngredientRecommendation",
        "baseInterface": "IngredientRecommendation",
        "body": "culinaryApplications?: Record<string, {\n    notes?: string[];\n    techniques?: string[];",
        "hasFlexibleProperty": false,
        "lineNumber": 12
      },
      {
        "file": "src/types/ExtendedRecipe.ts",
        "interfaceName": "ExtendedRecipeIngredient",
        "baseInterface": "RecipeIngredient",
        "body": "id?: string;\n  preparation?: string;\n  optional?: boolean;\n  notes?: string;\n  function?: string;\n  cookingPoint?: string;\n  substitutes?: string[];",
        "hasFlexibleProperty": false,
        "lineNumber": 24
      },
      {
        "file": "src/types/ExtendedRecipe.ts",
        "interfaceName": "ExtendedRecipe",
        "baseInterface": "Recipe",
        "body": "// Ensure core properties exist\n  id: string;\n  tags?: string[];\n  notes?: string;\n  preparation?: string;\n  preparationNotes?: string;\n  preparationSteps?: string[];\n  procedure?: string | string[];\n  prepTime?: string;\n  preparation_time?: string;\n  prep_time?: string;\n  idealTimeOfDay?: string;\n  \n  // Enhanced ingredient support\n  ingredients: ExtendedRecipeIngredient[];\n  \n  // Additional instruction variations\n  instructions: string[];\n  \n  // Elemental properties with proper casing (Fire, Water, Earth, Air)\n  elementalProperties: ElementalProperties;\n  \n  // Enhanced properties commonly accessed\n  course?: string[];\n  dishType?: string[];\n  cookingMethod?: string[];\n  cookingTechniques?: string[];\n  equipmentNeeded?: string[];\n  skillsRequired?: string[];\n  \n  // Flavor and texture\n  flavorProfile?: {\n    primary?: string[];\n    accent?: string[];\n    base?: string[];\n    tasteBalance?: {\n      sweet: number;\n      salty: number;\n      sour: number;\n      bitter: number;\n      umami: number;",
        "hasFlexibleProperty": false,
        "lineNumber": 37
      },
      {
        "file": "src/types/ExtendedRecipe.ts",
        "interfaceName": "ExtendedScoredRecipe",
        "baseInterface": "ExtendedRecipe",
        "body": "score: number;\n  alchemicalScores?: {\n    elementalScore: number;\n    zodiacalScore: number;\n    lunarScore: number;\n    planetaryScore: number;\n    seasonalScore: number;",
        "hasFlexibleProperty": false,
        "lineNumber": 131
      },
      {
        "file": "src/types/thermodynamic.ts",
        "interfaceName": "ExtendedThermodynamicProperties",
        "baseInterface": "ThermodynamicProperties",
        "body": "resonance: number;   // Energy alignment/harmony (0-1)\n  potential: number;   // Stored energetic potential (0-1)\n  stability: number;   // Resistance to transformation (0-1)\n  dynamism: number;    // Rate of energy exchange (0-1)",
        "hasFlexibleProperty": false,
        "lineNumber": 30
      }
    ],
    "patterns": [
      {
        "pattern": "StrictExtended",
        "domain": "general",
        "features": {
          "flexible": false,
          "optional": true,
          "arrays": true
        }
      },
      {
        "pattern": "StrictExtended",
        "domain": "culinary",
        "features": {
          "flexible": false,
          "optional": true,
          "arrays": false
        }
      },
      {
        "pattern": "StrictExtended",
        "domain": "culinary",
        "features": {
          "flexible": false,
          "optional": true,
          "arrays": true
        }
      },
      {
        "pattern": "StrictExtended",
        "domain": "culinary",
        "features": {
          "flexible": false,
          "optional": true,
          "arrays": true
        }
      },
      {
        "pattern": "StrictExtended",
        "domain": "culinary",
        "features": {
          "flexible": false,
          "optional": true,
          "arrays": true
        }
      },
      {
        "pattern": "StrictExtended",
        "domain": "culinary",
        "features": {
          "flexible": false,
          "optional": true,
          "arrays": false
        }
      },
      {
        "pattern": "StrictExtended",
        "domain": "general",
        "features": {
          "flexible": false,
          "optional": false,
          "arrays": false
        }
      }
    ],
    "analysis": {
      "total": 7,
      "withFlexibleProperty": 0,
      "domains": {
        "general": 2,
        "culinary": 5
      },
      "effectiveness": {
        "flexibleUsageRate": 0,
        "domainCoverage": 2,
        "averageComplexity": 9.857142857142858
      }
    }
  },
  "safetyPatterns": {
    "optionalChaining": {
      "description": "Optional chaining for safe property access",
      "instances": [
        {
          "file": "src/app/api/nutrition/direct.ts",
          "count": 3,
          "examples": [
            "?.name",
            "?.foodNutrients",
            "?.name"
          ]
        },
        {
          "file": "src/app/api/nutrition/route.ts",
          "count": 1,
          "examples": [
            "?.name"
          ]
        },
        {
          "file": "src/app/api/planetary-positions/route.ts",
          "count": 1,
          "examples": [
            "?.planetaryPositions"
          ]
        },
        {
          "file": "src/app/cooking-methods-demo/page.tsx",
          "count": 1,
          "examples": [
            "?.id"
          ]
        },
        {
          "file": "src/app/planet-test/layout.tsx",
          "count": 2,
          "examples": [
            "?.join",
            "?.join"
          ]
        },
        {
          "file": "src/app/test/migrated-components/cooking-methods-section/page.tsx",
          "count": 1,
          "examples": [
            "?.name"
          ]
        },
        {
          "file": "src/app/test/migrated-components/cuisine-section/page.tsx",
          "count": 12,
          "examples": [
            "?.Fire",
            "?.Water",
            "?.Earth"
          ]
        },
        {
          "file": "src/app/test/migrated-components/page.tsx",
          "count": 1,
          "examples": [
            "?.then"
          ]
        },
        {
          "file": "src/calculations/alchemicalCalculations.ts",
          "count": 11,
          "examples": [
            "?.includes",
            "?.toLowerCase",
            "?.toLowerCase"
          ]
        },
        {
          "file": "src/calculations/alchemicalEngine.ts",
          "count": 33,
          "examples": [
            "?.toLowerCase",
            "?.activePlanets",
            "?.seasonalVariations"
          ]
        },
        {
          "file": "src/calculations/alchemicalTransformation.ts",
          "count": 2,
          "examples": [
            "?.toLowerCase",
            "?.toLowerCase"
          ]
        },
        {
          "file": "src/calculations/combinationEffects.ts",
          "count": 8,
          "examples": [
            "?.modifier",
            "?.strength",
            "?.modifier"
          ]
        },
        {
          "file": "src/calculations/core/alchemicalEngine.ts",
          "count": 2,
          "examples": [
            "?.Alchemy",
            "?.Element"
          ]
        },
        {
          "file": "src/calculations/core/elementalCalculations.ts",
          "count": 17,
          "examples": [
            "?.toLowerCase",
            "?.toLowerCase",
            "?.toLowerCase"
          ]
        },
        {
          "file": "src/calculations/core/kalchmEngine.ts",
          "count": 15,
          "examples": [
            "?.charAt",
            "?.slice",
            "?.toLowerCase"
          ]
        },
        {
          "file": "src/calculations/core/planetaryInfluences.ts",
          "count": 41,
          "examples": [
            "?.toLowerCase",
            "?.toLowerCase",
            "?.toLowerCase"
          ]
        },
        {
          "file": "src/calculations/culinary/cuisineRecommendations.ts",
          "count": 10,
          "examples": [
            "?.slice",
            "?.push",
            "?.push"
          ]
        },
        {
          "file": "src/calculations/culinary/recipeMatching.ts",
          "count": 1,
          "examples": [
            "?.includes"
          ]
        },
        {
          "file": "src/calculations/culinary/seasonalAdjustments.ts",
          "count": 11,
          "examples": [
            "?.toLowerCase",
            "?.toLowerCase",
            "?.toLowerCase"
          ]
        },
        {
          "file": "src/calculations/culinaryAstrology.ts",
          "count": 19,
          "examples": [
            "?.toLowerCase",
            "?.dominantPlanets",
            "?.reduce"
          ]
        },
        {
          "file": "src/calculations/elementalcalculations.ts",
          "count": 2,
          "examples": [
            "?.elementalProperties",
            "?.sign"
          ]
        },
        {
          "file": "src/calculations/enhancedAlchemicalMatching.ts",
          "count": 8,
          "examples": [
            "?.Element",
            "?.Element",
            "?.Modality"
          ]
        },
        {
          "file": "src/calculations/enhancedCuisineRecommender.ts",
          "count": 7,
          "examples": [
            "?.includes",
            "?.length",
            "?.toLowerCase"
          ]
        },
        {
          "file": "src/calculations/index.ts",
          "count": 13,
          "examples": [
            "?.slice",
            "?.toISOString",
            "?.alchemicalProperties"
          ]
        },
        {
          "file": "src/calculations/seasonalCalculations.ts",
          "count": 3,
          "examples": [
            "?.length",
            "?.toLowerCase",
            "?.toLowerCase"
          ]
        },
        {
          "file": "src/components/AlchemicalRecommendations.tsx",
          "count": 10,
          "examples": [
            "?.sign",
            "?.astrologicalState",
            "?.zodiacSign"
          ]
        },
        {
          "file": "src/components/AlchmKitchen.tsx",
          "count": 9,
          "examples": [
            "?.sunSign",
            "?.planetaryHour",
            "?.lunarPhase"
          ]
        },
        {
          "file": "src/components/AstroErrorBoundary.tsx",
          "count": 1,
          "examples": [
            "?.message"
          ]
        },
        {
          "file": "src/components/AstrologicalClock.tsx",
          "count": 6,
          "examples": [
            "?.sign",
            "?.degree",
            "?.sign"
          ]
        },
        {
          "file": "src/components/AstrologyChart/AstrologyChart.migrated.tsx",
          "count": 4,
          "examples": [
            "?.x",
            "?.y",
            "?.x"
          ]
        },
        {
          "file": "src/components/BridgeExampleComponent.tsx",
          "count": 3,
          "examples": [
            "?.toLowerCase",
            "?.toUpperCase",
            "?.slice"
          ]
        },
        {
          "file": "src/components/CelestialDisplay/CelestialDisplay.tsx",
          "count": 6,
          "examples": [
            "?.Sun",
            "?.sign",
            "?.Moon"
          ]
        },
        {
          "file": "src/components/ChakraDisplay.migrated.tsx",
          "count": 1,
          "examples": [
            "?.join"
          ]
        },
        {
          "file": "src/components/ChromeAPITest.tsx",
          "count": 2,
          "examples": [
            "?.url",
            "?.url"
          ]
        },
        {
          "file": "src/components/CookingMethods.tsx",
          "count": 180,
          "examples": [
            "?.planetaryPositions",
            "?.planetaryPositions",
            "?.elementalBalance"
          ]
        },
        {
          "file": "src/components/CookingMethodsSection.migrated.tsx",
          "count": 11,
          "examples": [
            "?.slice",
            "?.trim",
            "?.sort"
          ]
        },
        {
          "file": "src/components/CookingMethodsSection.tsx",
          "count": 5,
          "examples": [
            "?.length",
            "?.some",
            "?.primary"
          ]
        },
        {
          "file": "src/components/CuisineRecommender/index.tsx",
          "count": 14,
          "examples": [
            "?.dominantPlanets",
            "?.toFixed",
            "?.elementalState"
          ]
        },
        {
          "file": "src/components/CuisineRecommender.tsx",
          "count": 52,
          "examples": [
            "?.toLowerCase",
            "?.toLowerCase",
            "?.toLowerCase"
          ]
        },
        {
          "file": "src/components/CuisineSection/CuisineSection.migrated.tsx",
          "count": 27,
          "examples": [
            "?.success",
            "?.data",
            "?.toLowerCase"
          ]
        },
        {
          "file": "src/components/CuisineSection/index.tsx",
          "count": 59,
          "examples": [
            "?.toLowerCase",
            "?.traditionalSauces",
            "?.cuisine"
          ]
        },
        {
          "file": "src/components/CuisineSection.tsx",
          "count": 49,
          "examples": [
            "?.find",
            "?.toLowerCase",
            "?.toLowerCase"
          ]
        },
        {
          "file": "src/components/CuisineSelector.migrated.tsx",
          "count": 21,
          "examples": [
            "?.getCurrentLunarPhase",
            "?.reduce",
            "?.getZodiacSignForDegree"
          ]
        },
        {
          "file": "src/components/CuisineSelector.tsx",
          "count": 3,
          "examples": [
            "?.includes",
            "?.includes",
            "?.includes"
          ]
        },
        {
          "file": "src/components/CuisineSpecificRecommendations.tsx",
          "count": 6,
          "examples": [
            "?.astroState",
            "?.loading",
            "?.error"
          ]
        },
        {
          "file": "src/components/DebugInfo.tsx",
          "count": 21,
          "examples": [
            "?.sun",
            "?.sign",
            "?.astrologicalState"
          ]
        },
        {
          "file": "src/components/ElementalAlchemicalDisplay.tsx",
          "count": 2,
          "examples": [
            "?.alchemicalValues",
            "?.elementalState"
          ]
        },
        {
          "file": "src/components/ElementalDisplay/ElementalEnergyDisplay.migrated.tsx",
          "count": 6,
          "examples": [
            "?.toLowerCase",
            "?.sign",
            "?.toLowerCase"
          ]
        },
        {
          "file": "src/components/ElementalEnergyDisplay.tsx",
          "count": 14,
          "examples": [
            "?.alchemicalValues",
            "?.alchemicalValues",
            "?.Spirit"
          ]
        },
        {
          "file": "src/components/ElementalRecommendations.migrated.tsx",
          "count": 3,
          "examples": [
            "?.getElementalRecommendations",
            "?.toUpperCase",
            "?.slice"
          ]
        },
        {
          "file": "src/components/ElementalVisualizer.migrated.tsx",
          "count": 22,
          "examples": [
            "?.next",
            "?.prototype",
            "?.hasOwnProperty"
          ]
        },
        {
          "file": "src/components/ErrorBoundary/ApiErrorBoundary.tsx",
          "count": 1,
          "examples": [
            "?.message"
          ]
        },
        {
          "file": "src/components/FoodRecommender/IngredientDisplay.migrated.tsx",
          "count": 3,
          "examples": [
            "?.items",
            "?.toLowerCase",
            "?.message"
          ]
        },
        {
          "file": "src/components/FoodRecommender/IngredientDisplay.tsx",
          "count": 5,
          "examples": [
            "?.elementalProperties",
            "?.state",
            "?.elementalProperties"
          ]
        },
        {
          "file": "src/components/FoodRecommender/IngredientRecommendations.tsx",
          "count": 3,
          "examples": [
            "?.elementalAffinity",
            "?.elementalAffinity",
            "?.rulingPlanets"
          ]
        },
        {
          "file": "src/components/FoodRecommender/KalchmRecommender.tsx",
          "count": 7,
          "examples": [
            "?.planetaryPositions",
            "?.elementalState",
            "?.sign"
          ]
        },
        {
          "file": "src/components/FoodRecommender/NutritionalRecommender.tsx",
          "count": 24,
          "examples": [
            "?.highProtein",
            "?.lowCarb",
            "?.lowFat"
          ]
        },
        {
          "file": "src/components/FoodRecommender/index.tsx",
          "count": 5,
          "examples": [
            "?.planetaryPositions",
            "?.elementalProperties",
            "?.activePlanets"
          ]
        },
        {
          "file": "src/components/FoodRecommender/utils.ts",
          "count": 12,
          "examples": [
            "?.elementalAffinity",
            "?.astrologicalPropertiesProfile",
            "?.elementalAffinity"
          ]
        },
        {
          "file": "src/components/GlobalPopup.js",
          "count": 3,
          "examples": [
            "?.toLowerCase",
            "?.toLowerCase",
            "?.includes"
          ]
        },
        {
          "file": "src/components/Header/FoodRecommender/IngredientRecommendations.tsx",
          "count": 11,
          "examples": [
            "?.calories",
            "?.macros",
            "?.vitamins"
          ]
        },
        {
          "file": "src/components/Header/FoodRecommender/components/Cuisinegroup.tsx",
          "count": 8,
          "examples": [
            "?.toLowerCase",
            "?.toLowerCase",
            "?.toLowerCase"
          ]
        },
        {
          "file": "src/components/Header/FoodRecommender/index.tsx",
          "count": 67,
          "examples": [
            "?.toLowerCase",
            "?.id",
            "?.name"
          ]
        },
        {
          "file": "src/components/Header/Header.tsx",
          "count": 8,
          "examples": [
            "?.sun",
            "?.sign",
            "?.moon"
          ]
        },
        {
          "file": "src/components/IngredientCard.tsx",
          "count": 2,
          "examples": [
            "?.qualities",
            "?.seasonality"
          ]
        },
        {
          "file": "src/components/IngredientDisplay.tsx",
          "count": 21,
          "examples": [
            "?.description",
            "?.energyProfile",
            "?.zodiac"
          ]
        },
        {
          "file": "src/components/IngredientMapper.tsx",
          "count": 3,
          "examples": [
            "?.matchedTo",
            "?.name",
            "?.confidence"
          ]
        },
        {
          "file": "src/components/IngredientRecommendations.tsx",
          "count": 15,
          "examples": [
            "?.planetaryPositions",
            "?.moonPhase",
            "?.aspects"
          ]
        },
        {
          "file": "src/components/IngredientRecommender/index.tsx",
          "count": 16,
          "examples": [
            "?.chakraEnergies",
            "?.planetaryPositions",
            "?.isLoading"
          ]
        },
        {
          "file": "src/components/IngredientRecommender.tsx",
          "count": 31,
          "examples": [
            "?.chakraEnergies",
            "?.planetaryPositions",
            "?.isLoading"
          ]
        },
        {
          "file": "src/components/LocationButton.tsx",
          "count": 1,
          "examples": [
            "?.requestLocation"
          ]
        },
        {
          "file": "src/components/MethodsRecommender.tsx",
          "count": 18,
          "examples": [
            "?.sign",
            "?.phase",
            "?.sign"
          ]
        },
        {
          "file": "src/components/MoonDisplay.migrated.tsx",
          "count": 27,
          "examples": [
            "?.moon",
            "?.NorthNode",
            "?.NorthNode"
          ]
        },
        {
          "file": "src/components/MoonDisplay.tsx",
          "count": 22,
          "examples": [
            "?.moon",
            "?.northnode",
            "?.northNode"
          ]
        },
        {
          "file": "src/components/NutritionalDataFetcher.tsx",
          "count": 10,
          "examples": [
            "?.name",
            "?.name",
            "?.macros"
          ]
        },
        {
          "file": "src/components/NutritionalDisplay.tsx",
          "count": 20,
          "examples": [
            "?.name",
            "?.calories",
            "?.macros"
          ]
        },
        {
          "file": "src/components/PlanetInfoModal.tsx",
          "count": 2,
          "examples": [
            "?.name",
            "?.sign"
          ]
        },
        {
          "file": "src/components/PlanetaryDisplay.tsx",
          "count": 5,
          "examples": [
            "?.toLowerCase",
            "?.toUpperCase",
            "?.slice"
          ]
        },
        {
          "file": "src/components/PlanetaryHours/SimplePlanetaryDisplay.migrated.tsx",
          "count": 3,
          "examples": [
            "?.planet",
            "?.getCurrentPlanetaryDay",
            "?.getCurrentPlanetaryMinute"
          ]
        },
        {
          "file": "src/components/PlanetaryPositionDisplay.migrated.tsx",
          "count": 5,
          "examples": [
            "?.toLowerCase",
            "?.toUpperCase",
            "?.slice"
          ]
        },
        {
          "file": "src/components/PlanetaryPositionInitializer.tsx",
          "count": 2,
          "examples": [
            "?.sign",
            "?.sign"
          ]
        },
        {
          "file": "src/components/RealtimeAlchemicalCalculator.tsx",
          "count": 6,
          "examples": [
            "?.toLowerCase",
            "?.includes",
            "?.sign"
          ]
        },
        {
          "file": "src/components/Recipe/RecipeFilters.migrated.tsx",
          "count": 6,
          "examples": [
            "?.getCuisineTypes",
            "?.getMealTypes",
            "?.getDietaryRestrictions"
          ]
        },
        {
          "file": "src/components/Recipe/RecipeRecommendations.migrated.tsx",
          "count": 14,
          "examples": [
            "?.toLowerCase",
            "?.elementalCalculator",
            "?.elementalCalculator"
          ]
        },
        {
          "file": "src/components/Recipe/index.tsx",
          "count": 2,
          "examples": [
            "?.map",
            "?.map"
          ]
        },
        {
          "file": "src/components/RecipeList/RecipeList.migrated.tsx",
          "count": 6,
          "examples": [
            "?.toLowerCase",
            "?.total",
            "?.success"
          ]
        },
        {
          "file": "src/components/RecipeRecommendations.tsx",
          "count": 5,
          "examples": [
            "?.includes",
            "?.includes",
            "?.length"
          ]
        },
        {
          "file": "src/components/SauceRecommender.tsx",
          "count": 15,
          "examples": [
            "?.traditionalSauces",
            "?.planets",
            "?.planets"
          ]
        },
        {
          "file": "src/components/Settings/Settings.tsx",
          "count": 7,
          "examples": [
            "?.servingSize",
            "?.maxPrepTime",
            "?.complexity"
          ]
        },
        {
          "file": "src/components/SunDisplay.tsx",
          "count": 5,
          "examples": [
            "?.requestLocation",
            "?.sign",
            "?.degree"
          ]
        },
        {
          "file": "src/components/SwissEphemerisDemo.tsx",
          "count": 7,
          "examples": [
            "?.toFixed",
            "?.toFixed",
            "?.map"
          ]
        },
        {
          "file": "src/components/TarotDisplay.tsx",
          "count": 20,
          "examples": [
            "?.split",
            "?.toLowerCase",
            "?.toLowerCase"
          ]
        },
        {
          "file": "src/components/TarotFoodDisplay.tsx",
          "count": 19,
          "examples": [
            "?.sign",
            "?.degree",
            "?.name"
          ]
        },
        {
          "file": "src/components/common/DisplayComponents.tsx",
          "count": 6,
          "examples": [
            "?.chakraEnergies",
            "?.elementalState",
            "?.thermodynamicMetrics"
          ]
        },
        {
          "file": "src/components/common/Utilities.tsx",
          "count": 7,
          "examples": [
            "?.toString",
            "?.toString",
            "?.toString"
          ]
        },
        {
          "file": "src/components/debug/AlchemicalDebug.tsx",
          "count": 3,
          "examples": [
            "?.name",
            "?.element",
            "?.elementalCharacter"
          ]
        },
        {
          "file": "src/components/debug/AlchemicalDebugger.tsx",
          "count": 10,
          "examples": [
            "?.substring",
            "?.state",
            "?.astrologicalState"
          ]
        },
        {
          "file": "src/components/debug/CuisineRecommenderDebug.tsx",
          "count": 8,
          "examples": [
            "?.isDaytime",
            "?.planetaryPositions",
            "?.state"
          ]
        },
        {
          "file": "src/components/debug/InfiniteLoopDetector.tsx",
          "count": 4,
          "examples": [
            "?.stack",
            "?.split",
            "?.trim"
          ]
        },
        {
          "file": "src/components/debug/MoonInfoDisplay.tsx",
          "count": 7,
          "examples": [
            "?.Moon",
            "?.filter",
            "?.sign"
          ]
        },
        {
          "file": "src/components/debug/StateDebugger.tsx",
          "count": 6,
          "examples": [
            "?.alchemicalValues",
            "?.Spirit",
            "?.Essence"
          ]
        },
        {
          "file": "src/components/debug/StateInspector.tsx",
          "count": 9,
          "examples": [
            "?.planetaryPositions",
            "?.Sun",
            "?.Moon"
          ]
        },
        {
          "file": "src/components/debug/UnifiedDebug.tsx",
          "count": 9,
          "examples": [
            "?.getHours",
            "?.Spirit",
            "?.Essence"
          ]
        },
        {
          "file": "src/components/debug/UpdateDebugger.tsx",
          "count": 7,
          "examples": [
            "?.slice",
            "?.slice",
            "?.getTime"
          ]
        },
        {
          "file": "src/components/demo/AstrologizeDemo.tsx",
          "count": 3,
          "examples": [
            "?._celestialBodies",
            "?.toLocaleString",
            "?.ayanamsa"
          ]
        },
        {
          "file": "src/components/error-handling/FlavorEngineErrorBoundary.tsx",
          "count": 3,
          "examples": [
            "?.includes",
            "?.includes",
            "?.message"
          ]
        },
        {
          "file": "src/components/layout/Header.tsx",
          "count": 4,
          "examples": [
            "?.sun",
            "?.degree",
            "?.moon"
          ]
        },
        {
          "file": "src/components/layout/UnifiedLayout.tsx",
          "count": 1,
          "examples": [
            "?.getFullYear"
          ]
        },
        {
          "file": "src/components/recipes/RecipeBuilder.tsx",
          "count": 4,
          "examples": [
            "?.toLowerCase",
            "?.toLowerCase",
            "?.alchemicalRecommendations"
          ]
        },
        {
          "file": "src/components/recipes/RecipeCard.tsx",
          "count": 13,
          "examples": [
            "?.planetaryDay",
            "?.planetaryDay",
            "?.planetaryHour"
          ]
        },
        {
          "file": "src/components/recipes/RecipeGrid.tsx",
          "count": 12,
          "examples": [
            "?.name",
            "?.step",
            "?.elementalState"
          ]
        },
        {
          "file": "src/components/recommendations/AlchemicalRecommendations.migrated.tsx",
          "count": 47,
          "examples": [
            "?.elementalCalculator",
            "?.getCurrentLunarPhase",
            "?.toLowerCase"
          ]
        },
        {
          "file": "src/components/recommendations/AlchemicalRecommendations.tsx",
          "count": 16,
          "examples": [
            "?.length",
            "?.isDaytime",
            "?.astrologicalState"
          ]
        },
        {
          "file": "src/components/recommendations/CuisineRecommender.tsx",
          "count": 93,
          "examples": [
            "?.find",
            "?.toLowerCase",
            "?.toLowerCase"
          ]
        },
        {
          "file": "src/components/recommendations/IngredientRecommender.migrated.tsx",
          "count": 23,
          "examples": [
            "?.isLoading",
            "?.error",
            "?.astrologyService"
          ]
        },
        {
          "file": "src/components/recommendations/IngredientRecommender.tsx",
          "count": 79,
          "examples": [
            "?.chakraEnergies",
            "?.planetaryPositions",
            "?.isLoading"
          ]
        },
        {
          "file": "src/components/test/UnifiedScoringIntegrationTest.tsx",
          "count": 2,
          "examples": [
            "?.rulingPlanets",
            "?.join"
          ]
        },
        {
          "file": "src/components/ui/SystemStatusIndicator.tsx",
          "count": 3,
          "examples": [
            "?.isLoading",
            "?.sign",
            "?.degree"
          ]
        },
        {
          "file": "src/constants/alchemicalPillars.ts",
          "count": 1,
          "examples": [
            "?.some"
          ]
        },
        {
          "file": "src/constants/elementalCore.ts",
          "count": 3,
          "examples": [
            "?.reduce",
            "?.reduce",
            "?.every"
          ]
        },
        {
          "file": "src/constants/planetaryFoodAssociations.ts",
          "count": 1,
          "examples": [
            "?.includes"
          ]
        },
        {
          "file": "src/constants/systemDefaults.ts",
          "count": 2,
          "examples": [
            "?.push",
            "?.push"
          ]
        },
        {
          "file": "src/context/CurrentChartContext.tsx",
          "count": 13,
          "examples": [
            "?.sign",
            "?.sign",
            "?.sign"
          ]
        },
        {
          "file": "src/contexts/AlchemicalContext/provider.tsx",
          "count": 6,
          "examples": [
            "?.alchemicalValues",
            "?.sign",
            "?.sign"
          ]
        },
        {
          "file": "src/contexts/ChartContext/provider.tsx",
          "count": 8,
          "examples": [
            "?.sign",
            "?.sign",
            "?.sign"
          ]
        },
        {
          "file": "src/contexts/PopupContext/provider.tsx",
          "count": 3,
          "examples": [
            "?.includes",
            "?.primaryElement",
            "?.sunSign"
          ]
        },
        {
          "file": "src/data/cooking/index.ts",
          "count": 6,
          "examples": [
            "?.includes",
            "?.includes",
            "?.optimalTemperatures"
          ]
        },
        {
          "file": "src/data/cooking/methods/index.ts",
          "count": 13,
          "examples": [
            "?.astrologicalInfluences",
            "?.favorableZodiac",
            "?.includes"
          ]
        },
        {
          "file": "src/data/cuisineFlavorProfiles.ts",
          "count": 32,
          "examples": [
            "?.length",
            "?.length",
            "?.length"
          ]
        },
        {
          "file": "src/data/cuisines/index.ts",
          "count": 15,
          "examples": [
            "?.all",
            "?.spring",
            "?.summer"
          ]
        },
        {
          "file": "src/data/cuisines.ts",
          "count": 4,
          "examples": [
            "?.Fire",
            "?.Water",
            "?.Earth"
          ]
        },
        {
          "file": "src/data/foodTypes.ts",
          "count": 2,
          "examples": [
            "?.protein",
            "?.protein"
          ]
        },
        {
          "file": "src/data/ingredients/flavorProfiles.ts",
          "count": 1,
          "examples": [
            "?.flavorProfile"
          ]
        },
        {
          "file": "src/data/ingredients/fruits/index.ts",
          "count": 3,
          "examples": [
            "?.rulingPlanets",
            "?.includes",
            "?.elementalAffinity"
          ]
        },
        {
          "file": "src/data/ingredients/index.ts",
          "count": 11,
          "examples": [
            "?.qualities",
            "?.astrologicalCorrespondence",
            "?.pairingRecommendations"
          ]
        },
        {
          "file": "src/data/ingredients/oils/index.ts",
          "count": 12,
          "examples": [
            "?.elementalAffinity",
            "?.base",
            "?.elementalAffinity"
          ]
        },
        {
          "file": "src/data/ingredients/proteins/index.ts",
          "count": 5,
          "examples": [
            "?.protein",
            "?.fat",
            "?.protein"
          ]
        },
        {
          "file": "src/data/ingredients/seasonings/index.ts",
          "count": 5,
          "examples": [
            "?.includes",
            "?.timing",
            "?.lunarPhaseModifiers"
          ]
        },
        {
          "file": "src/data/ingredients/spices/index.ts",
          "count": 11,
          "examples": [
            "?.heatLevel",
            "?.elementalProperties",
            "?.Fire"
          ]
        },
        {
          "file": "src/data/integrations/elementalBalance.ts",
          "count": 1,
          "examples": [
            "?.elementalProperties"
          ]
        },
        {
          "file": "src/data/integrations/seasonalPatterns.ts",
          "count": 5,
          "examples": [
            "?.tarotInfluences",
            "?.tarotInfluences",
            "?.ingredients"
          ]
        },
        {
          "file": "src/data/integrations/seasonalUsage.ts",
          "count": 6,
          "examples": [
            "?.tarotAssociations",
            "?.cookingRecommendations",
            "?.tarotAssociations"
          ]
        },
        {
          "file": "src/data/nutritional.ts",
          "count": 18,
          "examples": [
            "?.description",
            "?.id",
            "?.number"
          ]
        },
        {
          "file": "src/data/recipes/elementalMappings.ts",
          "count": 4,
          "examples": [
            "?.astrologicalInfluences",
            "?.braising",
            "?.steaming"
          ]
        },
        {
          "file": "src/data/recipes.ts",
          "count": 102,
          "examples": [
            "?.culinaryAffinity",
            "?.flavorProfiles",
            "?.name"
          ]
        },
        {
          "file": "src/data/seasons.ts",
          "count": 3,
          "examples": [
            "?.primary",
            "?.strength",
            "?.compatibility"
          ]
        },
        {
          "file": "src/data/transits/comprehensiveTransitDatabase.ts",
          "count": 3,
          "examples": [
            "?.retrogradePeriods",
            "?.eclipseSeasons",
            "?.majorTransits"
          ]
        },
        {
          "file": "src/data/unified/constants/planetaryFoodAssociations.js",
          "count": 1,
          "examples": [
            "?.includes"
          ]
        },
        {
          "file": "src/data/unified/cuisineIntegrations.ts",
          "count": 67,
          "examples": [
            "?.trim",
            "?.trim",
            "?.push"
          ]
        },
        {
          "file": "src/data/unified/cuisines.ts",
          "count": 30,
          "examples": [
            "?.toLowerCase",
            "?.dishes",
            "?.push"
          ]
        },
        {
          "file": "src/data/unified/data/cuisines/index.js",
          "count": 10,
          "examples": [
            "?.breakfast",
            "?.lunch",
            "?.dinner"
          ]
        },
        {
          "file": "src/data/unified/data/cuisines.js",
          "count": 4,
          "examples": [
            "?.Fire",
            "?.Water",
            "?.Earth"
          ]
        },
        {
          "file": "src/data/unified/data/ingredients/fruits/index.js",
          "count": 3,
          "examples": [
            "?.rulingPlanets",
            "?.includes",
            "?.elementalAffinity"
          ]
        },
        {
          "file": "src/data/unified/data/ingredients/oils/index.js",
          "count": 13,
          "examples": [
            "?.elementalAffinity",
            "?.base",
            "?.elementalAffinity"
          ]
        },
        {
          "file": "src/data/unified/data/ingredients/proteins/index.js",
          "count": 6,
          "examples": [
            "?.includes",
            "?.includes",
            "?.includes"
          ]
        },
        {
          "file": "src/data/unified/data/ingredients/seasonings/index.js",
          "count": 5,
          "examples": [
            "?.includes",
            "?.some",
            "?.includes"
          ]
        },
        {
          "file": "src/data/unified/data/ingredients/spices/index.js",
          "count": 4,
          "examples": [
            "?.some",
            "?.includes",
            "?.some"
          ]
        },
        {
          "file": "src/data/unified/data/unified/cuisineIntegrations.js",
          "count": 13,
          "examples": [
            "?.monicaModifiers",
            "?.temperatureAdjustment",
            "?.monicaModifiers"
          ]
        },
        {
          "file": "src/data/unified/data/unified/ingredients.js",
          "count": 1,
          "examples": [
            "?.toLowerCase"
          ]
        },
        {
          "file": "src/data/unified/data/unified/recipes.js",
          "count": 14,
          "examples": [
            "?.toLowerCase",
            "?.toLowerCase",
            "?.toLowerCase"
          ]
        },
        {
          "file": "src/data/unified/data/unified/seasonal.js",
          "count": 7,
          "examples": [
            "?.primary",
            "?.tarotProfile",
            "?.tarotProfile"
          ]
        },
        {
          "file": "src/data/unified/enhancedIngredients.ts",
          "count": 63,
          "examples": [
            "?.ingredients",
            "?.ingredients",
            "?.length"
          ]
        },
        {
          "file": "src/data/unified/flavorCompatibilityLayer.ts",
          "count": 12,
          "examples": [
            "?.toLowerCase",
            "?.replace",
            "?.toLowerCase"
          ]
        },
        {
          "file": "src/data/unified/flavorProfileMigration.ts",
          "count": 23,
          "examples": [
            "?.push",
            "?.push",
            "?.push"
          ]
        },
        {
          "file": "src/data/unified/flavorProfiles.ts",
          "count": 16,
          "examples": [
            "?.sweet",
            "?.sour",
            "?.salty"
          ]
        },
        {
          "file": "src/data/unified/ingredients.ts",
          "count": 17,
          "examples": [
            "?.Spirit",
            "?.Essence",
            "?.Matter"
          ]
        },
        {
          "file": "src/data/unified/nutritional.ts",
          "count": 19,
          "examples": [
            "?.elementalNutrients",
            "?.totalElementalValue",
            "?.totalElementalValue"
          ]
        },
        {
          "file": "src/data/unified/recipeBuilding.ts",
          "count": 5,
          "examples": [
            "?.monicaConstant",
            "?.monicaOptimization",
            "?.averageKalchm"
          ]
        },
        {
          "file": "src/data/unified/recipes.ts",
          "count": 22,
          "examples": [
            "?.toLowerCase",
            "?.push",
            "?.replace"
          ]
        },
        {
          "file": "src/data/unified/seasonal.ts",
          "count": 48,
          "examples": [
            "?.getMonth",
            "?.ingredients",
            "?.ingredients"
          ]
        },
        {
          "file": "src/data/unified/services/ElementalCalculator.js",
          "count": 1,
          "examples": [
            "?.toString"
          ]
        },
        {
          "file": "src/data/unified/services/errorHandler.js",
          "count": 1,
          "examples": [
            "?.componentStack"
          ]
        },
        {
          "file": "src/data/unified/unifiedFlavorEngine.ts",
          "count": 42,
          "examples": [
            "?.then",
            "?.category",
            "?.category"
          ]
        },
        {
          "file": "src/data/unified/utils/astrology/validation.js",
          "count": 6,
          "examples": [
            "?.exactLongitude",
            "?.exactLongitude",
            "?.exactLongitude"
          ]
        },
        {
          "file": "src/data/unified/utils/cuisine/cuisineUtils.js",
          "count": 1,
          "examples": [
            "?.cuisines"
          ]
        },
        {
          "file": "src/data/unified/utils/elemental/elementalUtils.js",
          "count": 12,
          "examples": [
            "?.Fire",
            "?.Water",
            "?.Earth"
          ]
        },
        {
          "file": "src/data/unified/utils/elementalUtils.js",
          "count": 2,
          "examples": [
            "?.ingredients",
            "?.length"
          ]
        },
        {
          "file": "src/examples/ServiceIntegrationExample.ts",
          "count": 10,
          "examples": [
            "?.calculateElementalProperties",
            "?.calculateThermodynamicMetrics",
            "?.items"
          ]
        },
        {
          "file": "src/hooks/useAstrologicalInfluence.ts",
          "count": 2,
          "examples": [
            "?.sign",
            "?.reduce"
          ]
        },
        {
          "file": "src/hooks/useAstrologicalState.ts",
          "count": 5,
          "examples": [
            "?.planetName",
            "?.sign",
            "?.toLowerCase"
          ]
        },
        {
          "file": "src/hooks/useAstrologize.ts",
          "count": 1,
          "examples": [
            "?.requestLocation"
          ]
        },
        {
          "file": "src/hooks/useChakraInfluencedFood.ts",
          "count": 22,
          "examples": [
            "?.aspects",
            "?.tarotElementBoosts",
            "?.tarotPlanetaryBoosts"
          ]
        },
        {
          "file": "src/hooks/useContextServiceBridge.ts",
          "count": 4,
          "examples": [
            "?.elementalCalculator",
            "?.chakraService",
            "?.isDaytime"
          ]
        },
        {
          "file": "src/hooks/useCurrentChart.ts",
          "count": 5,
          "examples": [
            "?.sign",
            "?.degree",
            "?.isRetrograde"
          ]
        },
        {
          "file": "src/hooks/useElementalState.ts",
          "count": 3,
          "examples": [
            "?.sign",
            "?.reduce",
            "?.reduce"
          ]
        },
        {
          "file": "src/hooks/useFoodRecommendations.ts",
          "count": 26,
          "examples": [
            "?.zodiacSign",
            "?.lunarPhase",
            "?.currentPlanetaryAlignment"
          ]
        },
        {
          "file": "src/hooks/useIngredientRecommendations.ts",
          "count": 3,
          "examples": [
            "?.sign",
            "?.reduce",
            "?.elementalPropertiesProfile"
          ]
        },
        {
          "file": "src/hooks/useRealtimePlanetaryPositions.ts",
          "count": 4,
          "examples": [
            "?.latitude",
            "?.longitude",
            "?.includes"
          ]
        },
        {
          "file": "src/hooks/useRecipeRecommendations.ts",
          "count": 3,
          "examples": [
            "?.sign",
            "?.Sign",
            "?.reduce"
          ]
        },
        {
          "file": "src/hooks/useServices.ts",
          "count": 6,
          "examples": [
            "?.alchemicalEngine",
            "?.astrologyService",
            "?.ingredientService"
          ]
        },
        {
          "file": "src/hooks/useTarotAstrologyData.ts",
          "count": 6,
          "examples": [
            "?.sun",
            "?.minorCard",
            "?.majorCard"
          ]
        },
        {
          "file": "src/lib/ChakraAlchemyService.ts",
          "count": 1,
          "examples": [
            "?.primaryEnergyState"
          ]
        },
        {
          "file": "src/lib/FoodAlchemySystem.ts",
          "count": 5,
          "examples": [
            "?.dignityEffect",
            "?.dignityEffect",
            "?.decanEffects"
          ]
        },
        {
          "file": "src/lib/ThermodynamicCalculator.ts",
          "count": 14,
          "examples": [
            "?.spiciness",
            "?.elementalProperties",
            "?.cookingTemperature"
          ]
        },
        {
          "file": "src/lib/alchemicalEngine.ts",
          "count": 13,
          "examples": [
            "?.sunDegree",
            "?.ruler",
            "?.moonSignElement"
          ]
        },
        {
          "file": "src/lib/chakraRecipeEnhancer.ts",
          "count": 1,
          "examples": [
            "?.planets"
          ]
        },
        {
          "file": "src/lib/cuisineCalculations.ts",
          "count": 8,
          "examples": [
            "?.description",
            "?.elementalAlignment",
            "?.elementalAlignment"
          ]
        },
        {
          "file": "src/lib/elementalSystem.ts",
          "count": 3,
          "examples": [
            "?.toLowerCase",
            "?.Moon",
            "?.sign"
          ]
        },
        {
          "file": "src/lib/recipeEngine.ts",
          "count": 3,
          "examples": [
            "?.length",
            "?.ingredients",
            "?.length"
          ]
        },
        {
          "file": "src/lib/recipeFilter.ts",
          "count": 6,
          "examples": [
            "?.toLowerCase",
            "?.toLowerCase",
            "?.includes"
          ]
        },
        {
          "file": "src/lib/tarotCalculations.ts",
          "count": 8,
          "examples": [
            "?.associatedRecipes",
            "?.element",
            "?.quantum"
          ]
        },
        {
          "file": "src/pages/_document.tsx",
          "count": 1,
          "examples": [
            "?.url"
          ]
        },
        {
          "file": "src/pages/cuisines/[id].tsx",
          "count": 18,
          "examples": [
            "?.name",
            "?.name",
            "?.matchScore"
          ]
        },
        {
          "file": "src/pages/cuisines/index.tsx",
          "count": 5,
          "examples": [
            "?.parentCuisine",
            "?.regionalVariants",
            "?.regionalVariants"
          ]
        },
        {
          "file": "src/pages/recipes/[id].tsx",
          "count": 4,
          "examples": [
            "?.map",
            "?.name",
            "?.name"
          ]
        },
        {
          "file": "src/pages/sauce-explorer.tsx",
          "count": 4,
          "examples": [
            "?.forProtein",
            "?.forVegetable",
            "?.forCookingMethod"
          ]
        },
        {
          "file": "src/pages/sauces/index.tsx",
          "count": 5,
          "examples": [
            "?.name",
            "?.description",
            "?.base"
          ]
        },
        {
          "file": "src/scripts/gasGiantsTest.js",
          "count": 2,
          "examples": [
            "?.find",
            "?.find"
          ]
        },
        {
          "file": "src/scripts/testGasGiantInfluences.ts",
          "count": 2,
          "examples": [
            "?.find",
            "?.find"
          ]
        },
        {
          "file": "src/services/AlchemicalRecommendationService.ts",
          "count": 35,
          "examples": [
            "?.rulingPlanets",
            "?.elementalState",
            "?.push"
          ]
        },
        {
          "file": "src/services/AlchemicalService.ts",
          "count": 13,
          "examples": [
            "?.sign",
            "?.toFixed",
            "?.slice"
          ]
        },
        {
          "file": "src/services/AlchemicalTransformationService.ts",
          "count": 7,
          "examples": [
            "?.forEach",
            "?.cookingMethods",
            "?.forEach"
          ]
        },
        {
          "file": "src/services/AstrologizeApiCache.ts",
          "count": 18,
          "examples": [
            "?.elementalBalance",
            "?.heat",
            "?.entropy"
          ]
        },
        {
          "file": "src/services/ConsolidatedIngredientService.ts",
          "count": 76,
          "examples": [
            "?.toLowerCase",
            "?.find",
            "?.toLowerCase"
          ]
        },
        {
          "file": "src/services/ConsolidatedRecipeService.ts",
          "count": 8,
          "examples": [
            "?.generateRecipe",
            "?.recipe",
            "?.generateFusionRecipe"
          ]
        },
        {
          "file": "src/services/ConsolidatedRecommendationService.ts",
          "count": 32,
          "examples": [
            "?.elementalState",
            "?.elementalProperties",
            "?.elementalState"
          ]
        },
        {
          "file": "src/services/DirectRecipeService.ts",
          "count": 41,
          "examples": [
            "?.toLowerCase",
            "?.toLowerCase",
            "?.toLowerCase"
          ]
        },
        {
          "file": "src/services/ElementalCalculator.ts",
          "count": 9,
          "examples": [
            "?.CelestialBodies",
            "?.label",
            "?.Sign"
          ]
        },
        {
          "file": "src/services/ElementalRecommendationService.ts",
          "count": 8,
          "examples": [
            "?.getFlavorProfileRecommendations",
            "?.getHealthBenefits",
            "?.moodEffects"
          ]
        },
        {
          "file": "src/services/EnhancedAstrologyService.ts",
          "count": 2,
          "examples": [
            "?.specialEvents",
            "?.keyAspects"
          ]
        },
        {
          "file": "src/services/EnhancedRecommendationService.ts",
          "count": 39,
          "examples": [
            "?.dailyCard",
            "?.element",
            "?.cookingApproach"
          ]
        },
        {
          "file": "src/services/EnhancedTransitAnalysisService.ts",
          "count": 4,
          "examples": [
            "?.finalInfluence",
            "?.FoodAssociations",
            "?.culinaryRecommendations"
          ]
        },
        {
          "file": "src/services/FoodAlchemySystem.ts",
          "count": 6,
          "examples": [
            "?.dignityEffect",
            "?.dignityEffect",
            "?.dignityEffect"
          ]
        },
        {
          "file": "src/services/IngredientFilterService.ts",
          "count": 2,
          "examples": [
            "?.toString",
            "?.map"
          ]
        },
        {
          "file": "src/services/IngredientService.ts",
          "count": 89,
          "examples": [
            "?.alchemicalProperties",
            "?.Spirit",
            "?.Spirit"
          ]
        },
        {
          "file": "src/services/LocalRecipeService.ts",
          "count": 77,
          "examples": [
            "?.breakfast",
            "?.all",
            "?.length"
          ]
        },
        {
          "file": "src/services/NutritionService.ts",
          "count": 3,
          "examples": [
            "?.value",
            "?.value",
            "?.includes"
          ]
        },
        {
          "file": "src/services/PerformanceCache.ts",
          "count": 28,
          "examples": [
            "?.push",
            "?.push",
            "?.shift"
          ]
        },
        {
          "file": "src/services/RealAlchemizeService.ts",
          "count": 2,
          "examples": [
            "?.sign",
            "?.sign"
          ]
        },
        {
          "file": "src/services/RecipeFinder.ts",
          "count": 5,
          "examples": [
            "?.join",
            "?.id",
            "?.id"
          ]
        },
        {
          "file": "src/services/RecommendationAdapter.ts",
          "count": 37,
          "examples": [
            "?.sign",
            "?.body1",
            "?.body2"
          ]
        },
        {
          "file": "src/services/RecommendationService.ts",
          "count": 8,
          "examples": [
            "?.sign",
            "?.compatibilityScore",
            "?.compatibilityScore"
          ]
        },
        {
          "file": "src/services/ServicesManager.ts",
          "count": 12,
          "examples": [
            "?.push",
            "?.push",
            "?.push"
          ]
        },
        {
          "file": "src/services/SpoonacularElementalMapper.ts",
          "count": 2,
          "examples": [
            "?.toString",
            "?.name"
          ]
        },
        {
          "file": "src/services/SpoonacularService.ts",
          "count": 21,
          "examples": [
            "?.toLowerCase",
            "?.some",
            "?.nutrients"
          ]
        },
        {
          "file": "src/services/SwissEphemerisService.ts",
          "count": 2,
          "examples": [
            "?.toLowerCase",
            "?.sidereal_time"
          ]
        },
        {
          "file": "src/services/UnifiedIngredientService.ts",
          "count": 66,
          "examples": [
            "?.toLowerCase",
            "?.trim",
            "?.toLowerCase"
          ]
        },
        {
          "file": "src/services/UnifiedRecipeService.ts",
          "count": 1,
          "examples": [
            "?.slice"
          ]
        },
        {
          "file": "src/services/UnifiedRecommendationService.ts",
          "count": 43,
          "examples": [
            "?.elementalState",
            "?.elementalProperties",
            "?.toLowerCase"
          ]
        },
        {
          "file": "src/services/UnifiedScoringAdapter.ts",
          "count": 1,
          "examples": [
            "?.rulingPlanets"
          ]
        },
        {
          "file": "src/services/UnifiedScoringService.ts",
          "count": 7,
          "examples": [
            "?.complexityPreference",
            "?.isRetrograde",
            "?.weights"
          ]
        },
        {
          "file": "src/services/adapters/FoodAlchemySystemAdapter.ts",
          "count": 5,
          "examples": [
            "?.sign",
            "?.toUpperCase",
            "?.slice"
          ]
        },
        {
          "file": "src/services/adapters/IngredientServiceAdapter.ts",
          "count": 17,
          "examples": [
            "?.elements",
            "?.elementalPreference",
            "?.currentSeason"
          ]
        },
        {
          "file": "src/services/adapters/LegacyRecipeAdapter.ts",
          "count": 16,
          "examples": [
            "?.query",
            "?.query",
            "?.toLowerCase"
          ]
        },
        {
          "file": "src/services/adapters/NutritionalDataAdapter.ts",
          "count": 10,
          "examples": [
            "?.logError",
            "?.logError",
            "?.logError"
          ]
        },
        {
          "file": "src/services/astrologizeApi.ts",
          "count": 5,
          "examples": [
            "?.latitude",
            "?.longitude",
            "?.toLowerCase"
          ]
        },
        {
          "file": "src/services/astrologyApi.ts",
          "count": 13,
          "examples": [
            "?.degree",
            "?.getStateForDate",
            "?.getStateForDate"
          ]
        },
        {
          "file": "src/services/celestialCalculations.ts",
          "count": 4,
          "examples": [
            "?.Element",
            "?.toLowerCase",
            "?.calculateLunarPhase"
          ]
        },
        {
          "file": "src/services/ingredientMappingService.ts",
          "count": 1,
          "examples": [
            "?.dishes"
          ]
        },
        {
          "file": "src/services/initializationService.ts",
          "count": 12,
          "examples": [
            "?.sun",
            "?.moon",
            "?.Fire"
          ]
        },
        {
          "file": "src/services/recipeData.ts",
          "count": 98,
          "examples": [
            "?.name",
            "?.name",
            "?.name"
          ]
        },
        {
          "file": "src/services/recipeRecommendations.ts",
          "count": 5,
          "examples": [
            "?.Fire",
            "?.Water",
            "?.Earth"
          ]
        },
        {
          "file": "src/services/unifiedNutritionalService.ts",
          "count": 35,
          "examples": [
            "?.getInstance",
            "?.nutritionalProfile",
            "?.nutritionalProfile"
          ]
        },
        {
          "file": "src/test-expanded-alchemical-engine.ts",
          "count": 34,
          "examples": [
            "?.score",
            "?.toFixed",
            "?.elementalProperties"
          ]
        },
        {
          "file": "src/test-kalchm-monica-debug.ts",
          "count": 5,
          "examples": [
            "?.toFixed",
            "?.toFixed",
            "?.toFixed"
          ]
        },
        {
          "file": "src/test-streamlined-system.ts",
          "count": 76,
          "examples": [
            "?.kalchm",
            "?.thermodynamics",
            "?.kalchm"
          ]
        },
        {
          "file": "src/types/ExtendedRecipe.ts",
          "count": 1,
          "examples": [
            "?.id"
          ]
        },
        {
          "file": "src/types/standardizedIngredient.ts",
          "count": 10,
          "examples": [
            "?.vitamins",
            "?.minerals",
            "?.vitamins"
          ]
        },
        {
          "file": "src/types/validators.ts",
          "count": 1,
          "examples": [
            "?.toLowerCase"
          ]
        },
        {
          "file": "src/utils/ElementalCalculator.ts",
          "count": 6,
          "examples": [
            "?.preferHigherContrast",
            "?.season",
            "?.mealType"
          ]
        },
        {
          "file": "src/utils/alchemicalAdapters.ts",
          "count": 6,
          "examples": [
            "?.element",
            "?.strength",
            "?.source"
          ]
        },
        {
          "file": "src/utils/alchemicalPillarUtils.ts",
          "count": 86,
          "examples": [
            "?.id",
            "?.elementalAssociations",
            "?.elementalAssociations"
          ]
        },
        {
          "file": "src/utils/astrology/core.ts",
          "count": 16,
          "examples": [
            "?.sign",
            "?.toLowerCase",
            "?.sign"
          ]
        },
        {
          "file": "src/utils/astrology/positions.ts",
          "count": 6,
          "examples": [
            "?.toLowerCase",
            "?.tt",
            "?.toLowerCase"
          ]
        },
        {
          "file": "src/utils/astrology/validation.ts",
          "count": 13,
          "examples": [
            "?.exactLongitude",
            "?.exactLongitude",
            "?.exactLongitude"
          ]
        },
        {
          "file": "src/utils/astrologyDataProvider.ts",
          "count": 4,
          "examples": [
            "?.toLowerCase",
            "?.toLowerCase",
            "?.getDominantElement"
          ]
        },
        {
          "file": "src/utils/astrologyUtils.ts",
          "count": 11,
          "examples": [
            "?.degree",
            "?.planets",
            "?.longitude"
          ]
        },
        {
          "file": "src/utils/astrologyValidation.ts",
          "count": 24,
          "examples": [
            "?.sign",
            "?.degree",
            "?.degree"
          ]
        },
        {
          "file": "src/utils/chakraFoodUtils.ts",
          "count": 2,
          "examples": [
            "?.includes",
            "?.includes"
          ]
        },
        {
          "file": "src/utils/chromeApiInitializer.ts",
          "count": 1,
          "examples": [
            "?.url"
          ]
        },
        {
          "file": "src/utils/common/arrayUtils.ts",
          "count": 1,
          "examples": [
            "?.join"
          ]
        },
        {
          "file": "src/utils/common/index.ts",
          "count": 2,
          "examples": [
            "?.url",
            "?.env"
          ]
        },
        {
          "file": "src/utils/commonUtils.ts",
          "count": 6,
          "examples": [
            "?.toUpperCase",
            "?.slice",
            "?.toUpperCase"
          ]
        },
        {
          "file": "src/utils/cookingMethodRecommender.ts",
          "count": 228,
          "examples": [
            "?.favorableZodiac",
            "?.unfavorableZodiac",
            "?.dominantPlanets"
          ]
        },
        {
          "file": "src/utils/cuisine/cuisineUtils.ts",
          "count": 4,
          "examples": [
            "?.cuisines",
            "?.cuisines",
            "?.push"
          ]
        },
        {
          "file": "src/utils/cuisineRecommender.ts",
          "count": 8,
          "examples": [
            "?.elementalProperties",
            "?.planetaryInfluences",
            "?.flavorProfile"
          ]
        },
        {
          "file": "src/utils/data/processing.ts",
          "count": 49,
          "examples": [
            "?.qualities",
            "?.cookingMethods",
            "?.pAirings"
          ]
        },
        {
          "file": "src/utils/dataStandardization.js",
          "count": 70,
          "examples": [
            "?.protein",
            "?.carbs",
            "?.fat"
          ]
        },
        {
          "file": "src/utils/dataStandardization.ts",
          "count": 1,
          "examples": [
            "?.astrologicalProfile"
          ]
        },
        {
          "file": "src/utils/databaseCleanup.ts",
          "count": 8,
          "examples": [
            "?.name",
            "?.elementalProperties",
            "?.elementalProperties"
          ]
        },
        {
          "file": "src/utils/elemental/core.ts",
          "count": 5,
          "examples": [
            "?.Fire",
            "?.toLowerCase",
            "?.toLowerCase"
          ]
        },
        {
          "file": "src/utils/elemental/elementCompatibility.ts",
          "count": 3,
          "examples": [
            "?.reduce",
            "?.reduce",
            "?.reduce"
          ]
        },
        {
          "file": "src/utils/elemental/elementalUtils.ts",
          "count": 16,
          "examples": [
            "?.Fire",
            "?.Water",
            "?.Earth"
          ]
        },
        {
          "file": "src/utils/elemental/transformations.ts",
          "count": 20,
          "examples": [
            "?.toLowerCase",
            "?.toLowerCase",
            "?.Spirit"
          ]
        },
        {
          "file": "src/utils/elementalUtils.ts",
          "count": 21,
          "examples": [
            "?.ingredients",
            "?.length",
            "?.length"
          ]
        },
        {
          "file": "src/utils/enhancedAlchemicalUtils.ts",
          "count": 4,
          "examples": [
            "?.dominant",
            "?.element",
            "?.dominant"
          ]
        },
        {
          "file": "src/utils/fixAssignmentError.js",
          "count": 5,
          "examples": [
            "?.tropical",
            "?.CelestialBodies",
            "?.sun"
          ]
        },
        {
          "file": "src/utils/flavorProfiles.ts",
          "count": 7,
          "examples": [
            "?.id",
            "?.name",
            "?.astrologicalInfluences"
          ]
        },
        {
          "file": "src/utils/foodRecommender.ts",
          "count": 32,
          "examples": [
            "?.toLowerCase",
            "?.toLowerCase",
            "?.toLowerCase"
          ]
        },
        {
          "file": "src/utils/foodRecommenderFix.js",
          "count": 6,
          "examples": [
            "?.url",
            "?.tropical",
            "?.CelestialBodies"
          ]
        },
        {
          "file": "src/utils/formatElementalAffinity.ts",
          "count": 4,
          "examples": [
            "?.primary",
            "?.element",
            "?.primary"
          ]
        },
        {
          "file": "src/utils/globalErrorHandler.ts",
          "count": 2,
          "examples": [
            "?.toString",
            "?.toString"
          ]
        },
        {
          "file": "src/utils/herbUtils.ts",
          "count": 2,
          "examples": [
            "?.culinary_traditions",
            "?.cuisines"
          ]
        },
        {
          "file": "src/utils/ingredientDataNormalizer.ts",
          "count": 2,
          "examples": [
            "?.nutritionalProfile",
            "?.nutritionalProfile"
          ]
        },
        {
          "file": "src/utils/ingredientRecommender.ts",
          "count": 279,
          "examples": [
            "?.astrologicalProfile",
            "?.rulingPlanets",
            "?.some"
          ]
        },
        {
          "file": "src/utils/ingredientUtils.ts",
          "count": 12,
          "examples": [
            "?.name",
            "?.amount",
            "?.unit"
          ]
        },
        {
          "file": "src/utils/lunarPhaseUtils.ts",
          "count": 1,
          "examples": [
            "?.elements"
          ]
        },
        {
          "file": "src/utils/nutritionUtils.ts",
          "count": 5,
          "examples": [
            "?.macros",
            "?.vitaminC",
            "?.iron"
          ]
        },
        {
          "file": "src/utils/nutritionalUtils.ts",
          "count": 3,
          "examples": [
            "?.name",
            "?.macros",
            "?.macros"
          ]
        },
        {
          "file": "src/utils/patchAlchemicalEngine.js",
          "count": 8,
          "examples": [
            "?.Fire",
            "?.Fire",
            "?.Water"
          ]
        },
        {
          "file": "src/utils/planetCalculations.ts",
          "count": 6,
          "examples": [
            "?.calculateLunarNodes",
            "?.northNode",
            "?.southNode"
          ]
        },
        {
          "file": "src/utils/planetInfoUtils.ts",
          "count": 5,
          "examples": [
            "?.sign",
            "?.degree",
            "?.isRetrograde"
          ]
        },
        {
          "file": "src/utils/recipe/recipeAdapter.ts",
          "count": 34,
          "examples": [
            "?.elementalState",
            "?.timeToMake",
            "?.servingSize"
          ]
        },
        {
          "file": "src/utils/recipe/recipeCore.ts",
          "count": 43,
          "examples": [
            "?.toLowerCase",
            "?.toLowerCase",
            "?.toLowerCase"
          ]
        },
        {
          "file": "src/utils/recipe/recipeEnrichment.ts",
          "count": 59,
          "examples": [
            "?.toLowerCase",
            "?.includes",
            "?.toLowerCase"
          ]
        },
        {
          "file": "src/utils/recipe/recipeFiltering.ts",
          "count": 113,
          "examples": [
            "?.currentSeason",
            "?.season",
            "?.length"
          ]
        },
        {
          "file": "src/utils/recipe/recipeMatching.ts",
          "count": 39,
          "examples": [
            "?.length",
            "?.kalchm",
            "?.kalchm"
          ]
        },
        {
          "file": "src/utils/recipe/recipeUtils.ts",
          "count": 48,
          "examples": [
            "?.elementalState",
            "?.elementalMapping",
            "?.elementalState"
          ]
        },
        {
          "file": "src/utils/recipeCalculations.ts",
          "count": 3,
          "examples": [
            "?.name",
            "?.name",
            "?.name"
          ]
        },
        {
          "file": "src/utils/recipeFilters.ts",
          "count": 35,
          "examples": [
            "?.includes",
            "?.includes",
            "?.length"
          ]
        },
        {
          "file": "src/utils/recipeMatching.ts",
          "count": 53,
          "examples": [
            "?.length",
            "?.maxCookingTime",
            "?.dietaryRestrictions"
          ]
        },
        {
          "file": "src/utils/recommendation/foodRecommendation.ts",
          "count": 13,
          "examples": [
            "?.toLowerCase",
            "?.toLowerCase",
            "?.includes"
          ]
        },
        {
          "file": "src/utils/recommendation/ingredientRecommendation.ts",
          "count": 8,
          "examples": [
            "?.astrologicalProfile",
            "?.base",
            "?.rulingPlanets"
          ]
        },
        {
          "file": "src/utils/recommendation/methodRecommendation.ts",
          "count": 68,
          "examples": [
            "?.reduce",
            "?.id",
            "?.min"
          ]
        },
        {
          "file": "src/utils/recommendationEngine.ts",
          "count": 3,
          "examples": [
            "?.toLowerCase",
            "?.toLowerCase",
            "?.name"
          ]
        },
        {
          "file": "src/utils/reliableAstronomy.ts",
          "count": 7,
          "examples": [
            "?.name",
            "?.longitude",
            "?.isRetrograde"
          ]
        },
        {
          "file": "src/utils/scriptReplacer.js",
          "count": 2,
          "examples": [
            "?.url",
            "?.url"
          ]
        },
        {
          "file": "src/utils/seasonalCalculations.ts",
          "count": 2,
          "examples": [
            "?.forEach",
            "?.length"
          ]
        },
        {
          "file": "src/utils/stateManager.ts",
          "count": 11,
          "examples": [
            "?.recipes",
            "?.celestial",
            "?.user"
          ]
        },
        {
          "file": "src/utils/stateValidator.ts",
          "count": 1,
          "examples": [
            "?.celestialPositions"
          ]
        },
        {
          "file": "src/utils/streamlinedPlanetaryPositions.ts",
          "count": 7,
          "examples": [
            "?.toISOString",
            "?.toUpperCase",
            "?.slice"
          ]
        },
        {
          "file": "src/utils/tarotUtils.ts",
          "count": 2,
          "examples": [
            "?.element",
            "?.element"
          ]
        },
        {
          "file": "src/utils/testIngredientMapping.ts",
          "count": 4,
          "examples": [
            "?.ingredients",
            "?.matchedTo",
            "?.elementalProperties"
          ]
        }
      ],
      "totalUsage": 5190,
      "fileCount": 323
    },
    "recordTypes": {
      "description": "Safe Record<string, unknown> type usage",
      "instances": [
        {
          "file": "src/app/alchemicalEngine.ts",
          "count": 2,
          "examples": [
            "Record<string, unknown>",
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/app/api/nutrition/direct.ts",
          "count": 4,
          "examples": [
            "Record<string, unknown>",
            "Record<string, unknown>",
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/app/api/nutrition/route.ts",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/app/cooking-methods/methods/index.ts",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/app/cooking-methods/page.tsx",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/app/cooking-methods-demo/page.tsx",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/calculations/alchemicalEngine.ts",
          "count": 7,
          "examples": [
            "Record<string, unknown>",
            "Record<string, unknown>",
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/calculations/elementalcalculations.ts",
          "count": 2,
          "examples": [
            "Record<string, unknown>",
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/calculations/enhancedAlchemicalMatching.ts",
          "count": 5,
          "examples": [
            "Record<string, unknown>",
            "Record<string, unknown>",
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/components/CookingMethods.tsx",
          "count": 4,
          "examples": [
            "Record<string, unknown>",
            "Record<string, unknown>",
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/components/CuisineRecommender.tsx",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/components/CuisineSection/CuisineSection.migrated.tsx",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/components/CuisineSelector.tsx",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/components/ElementalEnergyDisplay.tsx",
          "count": 2,
          "examples": [
            "Record<string, unknown>",
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/components/FoodRecommendations.tsx",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/components/FoodRecommender/NutritionalRecommender.tsx",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/components/Header/FoodRecommender/components/FoodBalanceTracker.tsx",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/components/MoonDisplay.tsx",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/components/RecipeRecommendations.tsx",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/components/TarotFoodDisplay.tsx",
          "count": 5,
          "examples": [
            "Record<string, unknown>",
            "Record<string, unknown>",
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/components/recommendations/AlchemicalRecommendations.migrated.tsx",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/constants/planetaryFoodAssociations.ts",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/context/CurrentChartContext.tsx",
          "count": 7,
          "examples": [
            "Record<string, unknown>",
            "Record<string, unknown>",
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/context/UnifiedContext.tsx",
          "count": 11,
          "examples": [
            "Record<string, unknown>",
            "Record<string, unknown>",
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/contexts/AlchemicalContext/provider.tsx",
          "count": 5,
          "examples": [
            "Record<string, unknown>",
            "Record<string, unknown>",
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/contexts/AlchemicalContext/types.ts",
          "count": 3,
          "examples": [
            "Record<string, unknown>",
            "Record<string, unknown>",
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/contexts/ChartContext/provider.tsx",
          "count": 2,
          "examples": [
            "Record<string, unknown>",
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/contexts/ChartContext/types.ts",
          "count": 3,
          "examples": [
            "Record<string, unknown>",
            "Record<string, unknown>",
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/data/ingredients/index.ts",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/data/ingredients/types.ts",
          "count": 7,
          "examples": [
            "Record<string, unknown>",
            "Record<string, unknown>",
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/data/integrations/medicinalCrossReference.ts",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/data/planets/types.ts",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/data/recipes.ts",
          "count": 2,
          "examples": [
            "Record<string, unknown>",
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/data/unified/cuisines.ts",
          "count": 4,
          "examples": [
            "Record<string, unknown>",
            "Record<string, unknown>",
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/hooks/useCurrentChart.ts",
          "count": 2,
          "examples": [
            "Record<string, unknown>",
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/jest-dom.d.ts",
          "count": 2,
          "examples": [
            "Record<string, unknown>",
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/lib/alchemicalEngine.ts",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/lib/logger.ts",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/services/ConsolidatedIngredientService.ts",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/services/IngredientService.ts",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/services/RecommendationAdapter.ts",
          "count": 2,
          "examples": [
            "Record<string, unknown>",
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/services/astrologyApi.ts",
          "count": 3,
          "examples": [
            "Record<string, unknown>",
            "Record<string, unknown>",
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/services/errorHandler.ts",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/types/ExtendedRecipe.ts",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/types/alchemical.ts",
          "count": 3,
          "examples": [
            "Record<string, unknown>",
            "Record<string, unknown>",
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/types/alchemy.ts",
          "count": 4,
          "examples": [
            "Record<string, unknown>",
            "Record<string, unknown>",
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/types/celestial.ts",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/types/cooking.ts",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/types/cuisine.ts",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/types/ingredient.ts",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/types/standardizedIngredient.ts",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/types/testing-library__jest-dom.d.ts",
          "count": 2,
          "examples": [
            "Record<string, unknown>",
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/utils/alchemicalPillarUtils.ts",
          "count": 2,
          "examples": [
            "Record<string, unknown>",
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/utils/astrologyUtils.ts",
          "count": 3,
          "examples": [
            "Record<string, unknown>",
            "Record<string, unknown>",
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/utils/astrologyValidation.ts",
          "count": 8,
          "examples": [
            "Record<string, unknown>",
            "Record<string, unknown>",
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/utils/calculationCache.ts",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/utils/dataStandardization.ts",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/utils/dynamicImport.ts",
          "count": 2,
          "examples": [
            "Record<string, unknown>",
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/utils/elementalUtils.ts",
          "count": 3,
          "examples": [
            "Record<string, unknown>",
            "Record<string, unknown>",
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/utils/error.ts",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/utils/errorHandling.ts",
          "count": 2,
          "examples": [
            "Record<string, unknown>",
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/utils/feedback.ts",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/utils/foodRecommender.ts",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/utils/ingredientDataNormalizer.ts",
          "count": 30,
          "examples": [
            "Record<string, unknown>",
            "Record<string, unknown>",
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/utils/ingredientRecommender.ts",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/utils/nutritionUtils.ts",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/utils/planetInfoUtils.ts",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/utils/recipe/recipeMatching.ts",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/utils/recipeMatching.ts",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/utils/recommendation/ingredientRecommendation.ts",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/utils/reliableAstronomy.ts",
          "count": 10,
          "examples": [
            "Record<string, unknown>",
            "Record<string, unknown>",
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/utils/safeAccess.ts",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/utils/stateValidator.ts",
          "count": 1,
          "examples": [
            "Record<string, unknown>"
          ]
        },
        {
          "file": "src/utils/typeGuards.ts",
          "count": 2,
          "examples": [
            "Record<string, unknown>",
            "Record<string, unknown>"
          ]
        }
      ],
      "totalUsage": 196,
      "fileCount": 74
    },
    "typeGuards": {
      "description": "Type guard functions",
      "instances": [
        {
          "file": "src/calculations/culinary/recipeMatching.ts",
          "count": 1,
          "examples": [
            "is element ("
          ]
        },
        {
          "file": "src/components/CookingMethods.tsx",
          "count": 1,
          "examples": [
            "is essential ("
          ]
        },
        {
          "file": "src/components/ElementalVisualizer.migrated.tsx",
          "count": 1,
          "examples": [
            "is element ("
          ]
        },
        {
          "file": "src/components/Header/FoodRecommender/index.tsx",
          "count": 1,
          "examples": [
            "is categorized ("
          ]
        },
        {
          "file": "src/constants/alchemicalPillars.ts",
          "count": 1,
          "examples": [
            "is day ("
          ]
        },
        {
          "file": "src/data/cooking/methods/dry/baking.ts",
          "count": 1,
          "examples": [
            "is critical ("
          ]
        },
        {
          "file": "src/data/cuisines.ts",
          "count": 1,
          "examples": [
            "is\n  if ("
          ]
        },
        {
          "file": "src/data/unified/constants/alchemicalPillars.js",
          "count": 1,
          "examples": [
            "is day ("
          ]
        },
        {
          "file": "src/data/unified/data/cuisines.js",
          "count": 1,
          "examples": [
            "is\n    if ("
          ]
        },
        {
          "file": "src/data/unified/flavorProfileMigration.ts",
          "count": 1,
          "examples": [
            "is available ("
          ]
        },
        {
          "file": "src/data/unified/utils/astrology/positions.js",
          "count": 2,
          "examples": [
            "is retrograde (",
            "is decreasing ("
          ]
        },
        {
          "file": "src/hooks/useSafeFlavorEngine.ts",
          "count": 1,
          "examples": [
            "is ready ("
          ]
        },
        {
          "file": "src/lib/ChakraAlchemyService.ts",
          "count": 1,
          "examples": [
            "is low ("
          ]
        },
        {
          "file": "src/lib/FoodAlchemySystem.ts",
          "count": 1,
          "examples": [
            "is element ("
          ]
        },
        {
          "file": "src/pages/sauces/index.tsx",
          "count": 1,
          "examples": [
            "is element ("
          ]
        },
        {
          "file": "src/services/EnhancedAstrologyService.ts",
          "count": 1,
          "examples": [
            "is data ("
          ]
        },
        {
          "file": "src/services/IngredientService.ts",
          "count": 1,
          "examples": [
            "is 2 ("
          ]
        },
        {
          "file": "src/utils/accurateAstronomy.ts",
          "count": 1,
          "examples": [
            "is decreasing ("
          ]
        },
        {
          "file": "src/utils/alchemicalPillarUtils.ts",
          "count": 4,
          "examples": [
            "is neutral (",
            "is day (",
            "is day ("
          ]
        },
        {
          "file": "src/utils/astrology/core.ts",
          "count": 1,
          "examples": [
            "is aspect ("
          ]
        },
        {
          "file": "src/utils/astrology/positions.ts",
          "count": 2,
          "examples": [
            "is retrograde (",
            "is decreasing ("
          ]
        },
        {
          "file": "src/utils/astrologyUtils.ts",
          "count": 2,
          "examples": [
            "is aspect (",
            "is positive ("
          ]
        }
      ],
      "totalUsage": 28,
      "fileCount": 22
    },
    "errorHandling": {
      "description": "Error handling patterns",
      "instances": [
        {
          "file": "src/App.tsx",
          "count": 1,
          "examples": [
            "catch (error) {\n      handleSetupError(error instanceof Error ? error : new Error('Unknown setup error'));\n    }"
          ]
        },
        {
          "file": "src/app/alchemicalEngine.ts",
          "count": 6,
          "examples": [
            "catch (error) {\n      console.error('Error in alchemize:', error);\n      \n      // Special handling for 'Assignment to constant variable' error\n      if (error instanceof TypeError && error.message.includes('Assignment to constant')) {\n        console.error('Assignment to constant variable detected!');\n        console.error('Error stack:', error.stack);\n        \n        // Try to extract the variable name from the error message\n        const match = error.message.match(/Assignment to constant variable: (.+)/);\n        if (match && match[1]) {\n          console.error(`Attempted to reassign constant variable: ${match[1]}",
            "catch (error) {\n      console.error('Error calculating planetary positions:', error);\n      // Return a safe fallback\n      return {\n        Sun: { Sign: { label: 'Aries' }",
            "catch (error) {\n      console.error('Error calculating zodiac energies:', error);\n      // Return a safe fallback with equal distribution\n      return {\n        aries: 0.0833,\n        taurus: 0.0833,\n        gemini: 0.0833,\n        cancer: 0.0833,\n        leo: 0.0833,\n        virgo: 0.0833,\n        libra: 0.0833,\n        scorpio: 0.0833,\n        sagittarius: 0.0833,\n        capricorn: 0.0833,\n        aquarius: 0.0833,\n        pisces: 0.0833\n      }"
          ]
        },
        {
          "file": "src/app/alchemize-demo/page.tsx",
          "count": 1,
          "examples": [
            "catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to load alchemical data');\n      }"
          ]
        },
        {
          "file": "src/app/api/astrologize/route.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n    console.error('Error calling astrologize API:', error);\n    return NextResponse.json(\n      { error: 'Failed to get astrological data' }"
          ]
        },
        {
          "file": "src/app/api/nutrition/direct.ts",
          "count": 5,
          "examples": [
            "catch (error) {\n      results.foodEndpoint = { error: 'Failed to fetch from food endpoint' }",
            "catch (error) {\n      results.fullFormatEndpoint = { error: 'Failed to fetch from full format endpoint' }",
            "catch (error) {\n      results.abridgedListEndpoint = { error: 'Failed to fetch from abridged list endpoint' }"
          ]
        },
        {
          "file": "src/app/api/nutrition/route.ts",
          "count": 4,
          "examples": [
            "catch (error) {\n      console.warn('Error fetching from foods/list endpoint:', error);\n    }",
            "catch (error) {\n      console.warn('Error fetching from food endpoint with format=full:', error);\n    }",
            "catch (error) {\n      console.warn('Error fetching from basic food endpoint:', error);\n    }"
          ]
        },
        {
          "file": "src/app/api/planetary-positions/route.ts",
          "count": 2,
          "examples": [
            "catch (error) {\n    console.error('API Error:', error);\n    return NextResponse.json(\n      { error: 'Failed to calculate positions', fallback: true }",
            "catch (error) {\n    console.error('Error calculating planetary positions:', error);\n    return NextResponse.json({ \n      message: 'Error calculating planetary positions',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    }"
          ]
        },
        {
          "file": "src/app/api/recipes/route.ts",
          "count": 2,
          "examples": [
            "catch (error) {\n    console.error('Recipe API Error:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch recipes' }",
            "catch (error) {\n    console.error('Recipe submission error:', error);\n    return NextResponse.json(\n      { error: 'Failed to process recipe' }"
          ]
        },
        {
          "file": "src/app/debug/page.tsx",
          "count": 1,
          "examples": [
            "catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error');\n      console.error('Test failed:', err);\n    }"
          ]
        },
        {
          "file": "src/app/template.tsx",
          "count": 1,
          "examples": [
            "catch (error) {\n      errorHandler.handleError(error, {\n        context: 'Template',\n        action: 'hydration'\n      }"
          ]
        },
        {
          "file": "src/app/test/migrated-components/cuisine-section/page.tsx",
          "count": 1,
          "examples": [
            "catch (err) {\n        logger.error('Error loading recipes:', err);\n        setError(err instanceof Error ? err : new Error('Error loading recipes'));\n        setRecipes([]);\n      }"
          ]
        },
        {
          "file": "src/calculations/alchemicalCalculations.ts",
          "count": 1,
          "examples": [
            "catch (err) {\n    // If planet doesn't match RulingPlanet type, ignore this part\n    debugLog(`Could not get planetary element for ${planet}"
          ]
        },
        {
          "file": "src/calculations/alchemicalEngine.ts",
          "count": 34,
          "examples": [
            "catch (error) {\n    ErrorHandler.log(error, {\n      context: 'alchemicalEngine:safeGetElementValue',\n      data: { element, props }",
            "catch (error) {\n      ErrorHandler.log(error, {\n        context: 'alchemicalEngine:getCuisineCompatibility',\n        data: { cuisine, season }",
            "catch (error) {\n      ErrorHandler.log(error, {\n        context: 'AlchemicalEngineAdvanced:calculateAstrologicalPower',\n        data: { recipeSunSign, astrologicalState }"
          ]
        },
        {
          "file": "src/calculations/alchemicalTransformation.ts",
          "count": 8,
          "examples": [
            "catch (error) {\n    logger.error(`Error transforming item ${item.name}",
            "catch (error) {\n    logger.error('Error transforming multiple items:', error);\n    // Return the original items with minimal transformation if batch processing fails\n    return items.map(item => ({\n      ...item,\n      alchemicalProperties: {\n        Spirit: 0.25,\n        Essence: 0.25,\n        Matter: 0.25,\n        Substance: 0.25\n      }",
            "catch (error) {\n    logger.error('Error transforming elemental properties:', error);\n    // Return the original properties if there's an error\n    return { ...originalProperties }"
          ]
        },
        {
          "file": "src/calculations/combinationEffects.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n    console.error('Error calculating combination effects:', error);\n    return [];\n  }"
          ]
        },
        {
          "file": "src/calculations/enhancedAlchemicalMatching.ts",
          "count": 6,
          "examples": [
            "catch (error) {\n    decanTest.info = `Error: ${error instanceof Error ? error.message : String(error)}",
            "catch (error) {\n    degreeTest.info = `Error: ${error instanceof Error ? error.message : String(error)}",
            "catch (error) {\n    tarotTest.info = `Error: ${error instanceof Error ? error.message : String(error)}"
          ]
        },
        {
          "file": "src/calculations/index.ts",
          "count": 3,
          "examples": [
            "catch (error) {\n    console.error('Error in comprehensive alchemical calculation:', error);\n    \n    // Return fallback result\n    return await getFallbackResult(input, cacheKey);\n  }",
            "catch (error) {\n    console.error('Error calculating recipe compatibility:', error);\n    return {\n      compatibilityScore: 0.7,\n      kalchmAlignment: 0.7,\n      elementalAlignment: 0.7,\n      planetaryAlignment: 0.7,\n      recommendations: ['Recipe compatibility could not be fully calculated']\n    }",
            "catch (astrologizeError) {\n    console.warn('Astrologize API also failed in fallback, using static fallback:', astrologizeError);\n    \n    // Only use static fallback as last resort\n    const fallbackElemental: ElementalProperties = { \n      Fire: 0.25, \n      Water: 0.25, \n      Air: 0.25,\n      Earth: 0.25\n    }"
          ]
        },
        {
          "file": "src/components/AlchmKitchen.tsx",
          "count": 1,
          "examples": [
            "catch (err) {\n                logger.error('Error fetching recipe data', err);\n                setError(err instanceof Error ? err.message : 'Failed to load data');\n                setLoading(false);\n            }"
          ]
        },
        {
          "file": "src/components/AstroDebug.tsx",
          "count": 1,
          "examples": [
            "catch (error) {\n                console.error('SunCalc test failed:', error);\n              }"
          ]
        },
        {
          "file": "src/components/AstrologyChart/AstrologyChart.migrated.tsx",
          "count": 2,
          "examples": [
            "catch (err) {\n        console.error('Error loading astrological data:', err);\n      }",
            "catch (err) {\n      console.error('Error calculating elemental balance:', err);\n      return { Fire: 25, Earth: 25, Air: 25, Water: 25 }"
          ]
        },
        {
          "file": "src/components/CelestialDisplay/CelestialDisplay.tsx",
          "count": 1,
          "examples": [
            "catch (error) {\n      logger.error('Error drawing celestial chart:', error);\n    }"
          ]
        },
        {
          "file": "src/components/ChakraDisplay.migrated.tsx",
          "count": 1,
          "examples": [
            "catch (err) {\n        console.error('Error loading chakra data:', err);\n      }"
          ]
        },
        {
          "file": "src/components/ChromeAPITest.tsx",
          "count": 2,
          "examples": [
            "catch (e) {\n              console.warn('Error opening URL:', typeof e === 'object' && e && 'message' in e ? (e as { message?: string }",
            "catch (error) {\n      console.error('Error opening FormSwift:', error);\n      // Fallback\n      window.open(\"https://formswift.com / (sem || 1) / (edit || 1)-pdf\", \"_blank\");\n    }"
          ]
        },
        {
          "file": "src/components/CookingMethods.tsx",
          "count": 4,
          "examples": [
            "catch (error) {\n    console.error('Error in alchemize function:', error);\n    // Fallback to simple implementation if there's an error\n    return {\n      ...elements,\n      alchemicalProperties: {}",
            "catch (error) {\n      console.error(\"Error initializing culture map:\", error);\n      return map;\n    }",
            "catch (err) {\n            console.error(`Error processing method ${(method as any)?.name}"
          ]
        },
        {
          "file": "src/components/CookingMethodsSection.migrated.tsx",
          "count": 2,
          "examples": [
            "catch (err) {\n            logger.error(`Error calculating compatibility for method ${method.name}",
            "catch (err) {\n      logger.error('Error calculating ingredient compatibility:', err);\n      setError('Error calculating compatibility. Please try again.');\n    }"
          ]
        },
        {
          "file": "src/components/CuisineRecommender/index.tsx",
          "count": 1,
          "examples": [
            "catch (err) {\n      console.error('Error loading recommendations:', err);\n      setError('Failed to load recipe recommendations');\n    }"
          ]
        },
        {
          "file": "src/components/CuisineRecommender.tsx",
          "count": 4,
          "examples": [
            "catch (error) {\n      logger.error('Error generating sauce recommendations:', error);\n    }",
            "catch (error) {\n          logger.error('Error loading recipes:', error);\n          // Continue without recipes if there was an error\n        }",
            "catch (error) {\n      logger.error('Error loading cuisines:', error);\n      // Apply safe type casting for error access\n      const errorData = error as { message?: string }"
          ]
        },
        {
          "file": "src/components/CuisineSection/CuisineSection.migrated.tsx",
          "count": 1,
          "examples": [
            "catch (err) {\n        logger.error('Error loading cuisine data:', err);\n        setError(err instanceof Error ? err : new Error('Failed to load cuisine data'));\n        setTraditionalSauces([]);\n        setCuisineRecipesFromService([]);\n      }"
          ]
        },
        {
          "file": "src/components/CuisineSection/index.tsx",
          "count": 4,
          "examples": [
            "catch (error) {\n        setTraditionalSauces([]);\n      }",
            "catch (error) {\n        // Error handled silently\n      }",
            "catch (error) {\n          // If getRelatedCuisines fails, just continue with basic matching\n        }"
          ]
        },
        {
          "file": "src/components/CuisineSection.tsx",
          "count": 4,
          "examples": [
            "catch (error) {\n        setTraditionalSauces([]);\n      }",
            "catch (error) {\n        // Error handled silently\n      }",
            "catch (error) {\n          // If getRelatedCuisines fails, just continue with basic matching\n        }"
          ]
        },
        {
          "file": "src/components/CuisineSelector.migrated.tsx",
          "count": 3,
          "examples": [
            "catch (err) {\n        console.error('Error loading astrological data:', err);\n        setError(err instanceof Error ? err : new Error('Error loading astrological data'));\n      }",
            "catch (err) {\n        console.error('Error loading cuisines:', err);\n        setError(err instanceof Error ? err : new Error('Error loading cuisines'));\n      }",
            "catch (err) {\n      console.error('Error fetching recipes for cuisine:', err);\n      // Still update the selected cuisine even if recipe fetch fails\n      onRecipesChange([]);\n    }"
          ]
        },
        {
          "file": "src/components/CuisineSpecificRecommendations.tsx",
          "count": 1,
          "examples": [
            "catch (err) {\n      setError(`Error getting recommendations: ${err instanceof Error ? err.message : String(err)}"
          ]
        },
        {
          "file": "src/components/ElementalDisplay/ElementalEnergyDisplay.migrated.tsx",
          "count": 1,
          "examples": [
            "catch (err) {\n        console.error('Error loading planetary data:', err);\n      }"
          ]
        },
        {
          "file": "src/components/ElementalDisplay/ElementalEnergyDisplay.tsx",
          "count": 1,
          "examples": [
            "catch (error) {\n      console.error('Error calculating elemental energies:', error);\n      return [];\n    }"
          ]
        },
        {
          "file": "src/components/ElementalEnergyDisplay.tsx",
          "count": 4,
          "examples": [
            "catch (error) {\n        logger.error('Error calculating initial alchemical values:', error);\n      }",
            "catch (error) {\n      logger.error('Error in alchemical calculation:', error);\n    }",
            "catch (error) {\n      logger.error('Error updating alchemical values from context:', error);\n    }"
          ]
        },
        {
          "file": "src/components/ElementalRecommendations.migrated.tsx",
          "count": 1,
          "examples": [
            "catch (err) {\n        console.error('Error loading elemental data:', err);\n      }"
          ]
        },
        {
          "file": "src/components/FoodRecommender/IngredientDisplay.migrated.tsx",
          "count": 1,
          "examples": [
            "catch (err) {\n        console.error('Error loading ingredients:', err);\n        setError(err instanceof Error ? err : new Error('Error loading ingredients'));\n      }"
          ]
        },
        {
          "file": "src/components/FoodRecommender/IngredientDisplay.tsx",
          "count": 1,
          "examples": [
            "catch (error) {\n        console.error('Error loading ingredients:', error);\n      }"
          ]
        },
        {
          "file": "src/components/FoodRecommender/KalchmRecommender.tsx",
          "count": 2,
          "examples": [
            "catch (err) {\n      console.error('Error calculating kalchm results:', err);\n      return null;\n    }",
            "catch (err) {\n        console.error('Error getting recommendations:', err);\n        setError('Failed to load ingredient recommendations');\n      }"
          ]
        },
        {
          "file": "src/components/FoodRecommender/NutritionalRecommender.tsx",
          "count": 2,
          "examples": [
            "catch (error) {\n      // console.error(`Error fetching enhanced data for ${ingredientName}",
            "catch (error) {\n        // console.error(\"Error fetching recipe recommendations:\", error);\n      }"
          ]
        },
        {
          "file": "src/components/FoodRecommender/utils.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n        console.error('Error fetching recommendations:', error);\n        setRecommendedIngredients([]);\n      }"
          ]
        },
        {
          "file": "src/components/Header/FoodRecommender/IngredientRecommendations.tsx",
          "count": 1,
          "examples": [
            "catch (e) {\n                        console.warn(`Could not calculate score for ${ingredient.name}"
          ]
        },
        {
          "file": "src/components/Header/FoodRecommender/components/Cuisinegroup.tsx",
          "count": 1,
          "examples": [
            "catch (error) {\n            console.error(`Error scoring ${recipe.name}"
          ]
        },
        {
          "file": "src/components/Header/FoodRecommender/components/FilterSection.tsx",
          "count": 1,
          "examples": [
            "catch (error) {\n        logger.error('Error calculating natural influences:', error);\n      }"
          ]
        },
        {
          "file": "src/components/Header/FoodRecommender/index.tsx",
          "count": 3,
          "examples": [
            "catch (err: unknown) {\n                const errorData = err as any;\n                setError(`Error getting recommendations: ${errorData?.message || 'Unknown error'}",
            "catch (error) {\n            console.error('Error calculating ingredient properties:', error);\n            return {\n                alchemical: { spirit: 0, essence: 0, matter: 0, substance: 0 }",
            "catch (error) {\n            console.error('Error during manual refresh:', error);\n            setError(`Failed to refresh celestial data: ${error instanceof Error ? error.message : 'Unknown error'}"
          ]
        },
        {
          "file": "src/components/Header/Header.tsx",
          "count": 1,
          "examples": [
            "catch (error) {\n      logger.error('Error updating servings:', error);\n    }"
          ]
        },
        {
          "file": "src/components/LocationButton.tsx",
          "count": 1,
          "examples": [
            "catch (error) {\n      setLocationStatus('Failed to get location. Using New York.');\n      setTimeout(() => setLocationStatus(''), 2000);\n    }"
          ]
        },
        {
          "file": "src/components/MoonDisplay.migrated.tsx",
          "count": 4,
          "examples": [
            "catch (err) {\n          errorLog('Failed to fetch planetary positions:', err);\n        }",
            "catch (error) {\n          errorLog('Failed to get location, using default:', error);\n        }",
            "catch (error: unknown) {\n          errorLog('Error in calculateTimes:', error);\n          // Even in case of error, set calculating to false to avoid endless loading\n          setMoonTimes({\n            calculating: false,\n            rise: undefined,\n            set: undefined\n          }"
          ]
        },
        {
          "file": "src/components/MoonDisplay.tsx",
          "count": 3,
          "examples": [
            "catch (error) {\n        errorLog('Failed to get location, using default:', error);\n      }",
            "catch (error: unknown) {\n        errorLog('Error in calculateTimes:', error);\n        // Even in case of error, set calculating to false to avoid endless loading\n        setMoonTimes({\n          calculating: false,\n          rise: undefined,\n          set: undefined\n        }",
            "catch (error) {\n        errorLog('Error calculating lunar phase:', error);\n        // Don't use fallback values, but require proper calculation\n        throw new Error('Failed to calculate lunar phase. Please check the implementation.');\n      }"
          ]
        },
        {
          "file": "src/components/Navigation/Navigation.tsx",
          "count": 1,
          "examples": [
            "catch (error) {\n        console.error('Failed to initialize state manager:', error);\n      }"
          ]
        },
        {
          "file": "src/components/NutritionalDataFetcher.tsx",
          "count": 1,
          "examples": [
            "catch (err) {\n      console.error('Error in nutritional search:', err);\n      setError('Error fetching nutritional data. Please try again or try a different food name.');\n      setNutritionalData(null);\n      setElementalData(null);\n    }"
          ]
        },
        {
          "file": "src/components/PlanetInfoModal.tsx",
          "count": 1,
          "examples": [
            "catch (err) {\n        console.error(`Error in PlanetInfoModal for ${planetName}"
          ]
        },
        {
          "file": "src/components/PlanetaryDisplay.tsx",
          "count": 2,
          "examples": [
            "catch (error) {\n      console.error(\"Failed to get time factors:\", error);\n      // Return default values if there's an error\n      return {\n        currentDate: new Date(),\n        planetaryDay: { day: 'Sunday', planet: 'Sun' }",
            "catch (error) {\n      console.error(\"Failed to get time factors:\", error);\n      // Return default values if there's an error\n      return {\n        currentDate: new Date(),\n        planetaryDay: { day: 'Sunday', planet: 'Sun' }"
          ]
        },
        {
          "file": "src/components/PlanetaryHours/PlanetaryHoursDisplay.tsx",
          "count": 1,
          "examples": [
            "catch (error) {\n      console.error('Error calculating planetary information:', error);\n    }"
          ]
        },
        {
          "file": "src/components/PlanetaryHours/SimplePlanetaryDisplay.migrated.tsx",
          "count": 1,
          "examples": [
            "catch (err) {\n        const errorMessage = err instanceof Error ? err.message : 'Unknown error';\n        setError(`Error updating planetary info: ${errorMessage}"
          ]
        },
        {
          "file": "src/components/PlanetaryHours/SimplePlanetaryDisplay.tsx",
          "count": 2,
          "examples": [
            "catch (err) {\n          setError(`Error updating planetary info: ${err instanceof Error ? err.message : String(err)}",
            "catch (err) {\n      setError(`Error initializing calculator: ${err instanceof Error ? err.message : String(err)}"
          ]
        },
        {
          "file": "src/components/PlanetaryPositionInitializer.tsx",
          "count": 3,
          "examples": [
            "catch (error) {\n      const errorMessage = error instanceof Error \n        ? error.message \n        : 'Unknown error fetching planetary positions';\n      \n      logger.error(`Attempt #${retryStatus.count + 1}",
            "catch (error) {\n      logger.error('Failed to apply fallback positions:', error);\n      // Even with a failure here, we still want to mark fallback as applied\n      // to prevent infinite retry loops\n      setRetryStatus(prev => ({\n        ...prev,\n        usingFallback: true,\n        needsFallback: false\n      }",
            "catch (error) {\n      logger.error('Error during component initialization:', error);\n      // Make sure fallback is applied even if initialization fails\n      applyFallbackPositions();\n    }"
          ]
        },
        {
          "file": "src/components/Recipe/RecipeFilters.migrated.tsx",
          "count": 1,
          "examples": [
            "catch (err) {\n        logger.error('Error loading reference data:', err);\n        setError(err instanceof Error ? err : new Error('Failed to load filter options'));\n        \n        // Use defaults if there's an error\n        setAvailableCuisines({\n          'Italian': true,\n          'Mexican': true,\n          'Chinese': true,\n          'Japanese': true,\n          'Indian': true,\n          'Thai': true,\n          'Mediterranean': true,\n          'American': true,\n          'French': true\n        }"
          ]
        },
        {
          "file": "src/components/Recipe/RecipeRecommendations.migrated.tsx",
          "count": 5,
          "examples": [
            "catch (err) {\n        const errorMessage = err instanceof Error ? err.message : 'Unknown error';\n        setError(`Failed to load astrological data: ${errorMessage}",
            "catch (err) {\n        const errorMessage = err instanceof Error ? err.message : 'Unknown error';\n        setError(`Failed to load astrological data: ${errorMessage}",
            "catch (err) {\n        const errorMessage = err instanceof Error ? err.message : 'Unknown error';\n        setError(`Failed to load cuisines data: ${errorMessage}"
          ]
        },
        {
          "file": "src/components/RecipeList/RecipeList.migrated.tsx",
          "count": 2,
          "examples": [
            "catch (err) {\n        console.error('Failed to load astrological data:', err);\n      }",
            "catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error';\n      setError(`Failed to load recipes: ${errorMessage}"
          ]
        },
        {
          "file": "src/components/RecipeList/RecipeList.tsx",
          "count": 3,
          "examples": [
            "catch (error) {\n      logger.error('Error filtering recipes:', error);\n      return recipes;\n    }",
            "catch (error) {\n      logger.error('Error grouping recipes:', error);\n      return { other: filteredRecipes }",
            "catch (error) {\n        logger.error('Error loading recipes:', error);\n        setRecipes([]);\n      }"
          ]
        },
        {
          "file": "src/components/RecipeRecommendations.tsx",
          "count": 3,
          "examples": [
            "catch (err) {\n        setError('Failed to load astrological data');\n      }",
            "catch (err) {\n        console.error('Error loading recipe recommendations:', err);\n        setError('Failed to load recipe recommendations');\n      }",
            "catch (err) {\n      console.error('Error calculating recipe recommendations:', err);\n      return [];\n    }"
          ]
        },
        {
          "file": "src/components/SauceRecommender.tsx",
          "count": 1,
          "examples": [
            "catch (error) {\n        console.error(\"Error generating sauce recommendations:\", error);\n      }"
          ]
        },
        {
          "file": "src/components/ScriptLoader.tsx",
          "count": 1,
          "examples": [
            "catch (error) {\n        console.error('[ScriptLoader] Error loading scripts:', error);\n      }"
          ]
        },
        {
          "file": "src/components/Settings/Settings.tsx",
          "count": 3,
          "examples": [
            "catch (error) {\n      logger.error('Error loading settings:', error);\n      const manager = await stateManager;\n      manager.addNotification('error', 'Failed to load settings');\n    }",
            "catch (error) {\n      logger.error('Error saving settings:', error);\n      const manager = await stateManager;\n      manager.addNotification('error', 'Failed to save settings');\n    }",
            "catch (error) {\n      logger.error('Error resetting settings:', error);\n      const manager = await stateManager;\n      manager.addNotification('error', 'Failed to reset settings');\n    }"
          ]
        },
        {
          "file": "src/components/SunDisplay.tsx",
          "count": 2,
          "examples": [
            "catch (error) {\n        console.error('Failed to get location, using default:', error);\n      }",
            "catch (error) {\n        console.error('Error calculating sun data:', error);\n        setSunTimes(prev => ({\n          ...prev,\n          calculating: false\n        }"
          ]
        },
        {
          "file": "src/components/SwissEphemerisDemo.tsx",
          "count": 1,
          "examples": [
            "catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error occurred');\n    }"
          ]
        },
        {
          "file": "src/components/TarotCardDisplay.tsx",
          "count": 1,
          "examples": [
            "catch (err) {\n            setError('Failed to load tarot cards');\n            console.error(err);\n        }"
          ]
        },
        {
          "file": "src/components/TarotDisplay.tsx",
          "count": 1,
          "examples": [
            "catch (err) {\n      setError('Failed to load tarot cards');\n      console.error(err);\n    }"
          ]
        },
        {
          "file": "src/components/TarotFoodDisplay.tsx",
          "count": 1,
          "examples": [
            "catch (err) {\n      setError('Failed to load tarot cards');\n      console.error(err);\n    }"
          ]
        },
        {
          "file": "src/components/ThemeScript.tsx",
          "count": 1,
          "examples": [
            "catch (e) {\n            document.documentElement.setAttribute('data-theme', 'light');\n          }"
          ]
        },
        {
          "file": "src/components/common/Utilities.tsx",
          "count": 1,
          "examples": [
            "catch (e) {\n            document.documentElement.setAttribute('data-theme', 'light');\n          }"
          ]
        },
        {
          "file": "src/components/debug/AlchemicalDebug.tsx",
          "count": 1,
          "examples": [
            "catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error');\n      console.error('Test failed:', err);\n    }"
          ]
        },
        {
          "file": "src/components/debug/AlchemicalDebugger.tsx",
          "count": 1,
          "examples": [
            "catch (error) {\n    return 'Error stringifying object';\n  }"
          ]
        },
        {
          "file": "src/components/debug/CuisineRecommenderDebug.tsx",
          "count": 8,
          "examples": [
            "catch (err) {\n        console.error('Error calculating planetary contributions:', err);\n        updateStep(2, null, true, err instanceof Error ? err.message : 'Unknown error');\n        planetaryElementContributions = { Fire: 0, Water: 0, Earth: 0, Air: 0 }",
            "catch (err) {\n        console.error('Error getting cuisine recommendations:', err);\n        updateStep(3, null, true, err instanceof Error ? err.message : 'Unknown error');\n        recs = [];\n      }",
            "catch (err) {\n        console.error('Error transforming cuisines:', err);\n        updateStep(4, null, true, err instanceof Error ? err.message : 'Unknown error');\n        transformedCuisines = recs;\n      }"
          ]
        },
        {
          "file": "src/components/debug/InfiniteLoopDetector.tsx",
          "count": 1,
          "examples": [
            "catch (e) {\n      // Ignore errors from stack trace generation\n    }"
          ]
        },
        {
          "file": "src/components/debug/StateDebugger.tsx",
          "count": 2,
          "examples": [
            "catch (error) {\n      console.error('Error calculating planetary hour:', error)\n      setPlanetaryHour('Unknown')\n    }",
            "catch (error) {\n      console.error('Error calculating lunar phase:', error)\n      setLunarPhase('Unknown')\n    }"
          ]
        },
        {
          "file": "src/components/debug/UnifiedDebug.tsx",
          "count": 3,
          "examples": [
            "catch (error) {\n      console.error('Error calculating planetary hour:', error);\n      setPlanetaryHour('Unknown');\n    }",
            "catch (error) {\n      console.error('Error calculating lunar phase:', error);\n      setLunarPhase('Unknown');\n    }",
            "catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error');\n      console.error('Test failed:', err);\n    }"
          ]
        },
        {
          "file": "src/components/demo/UnifiedScoringDemo.tsx",
          "count": 1,
          "examples": [
            "catch (error) {\n      console.error('Error running scoring:', error);\n    }"
          ]
        },
        {
          "file": "src/components/layout/Header.tsx",
          "count": 1,
          "examples": [
            "catch (error) {\n        console.error('Error fetching astro data:', error);\n      }"
          ]
        },
        {
          "file": "src/components/layout/Layout.tsx",
          "count": 1,
          "examples": [
            "catch (error) {\n        logger.error('Error initializing layout:', error);\n        setError('Failed to initialize application');\n        setIsLoading(false);\n      }"
          ]
        },
        {
          "file": "src/components/recipes/RecipeBuilder.tsx",
          "count": 1,
          "examples": [
            "catch (err) {\n        console.error('Failed to load time factors:', err);\n      }"
          ]
        },
        {
          "file": "src/components/recipes/RecipeCard.tsx",
          "count": 2,
          "examples": [
            "catch (err) {\n        logger.error('Error loading time factors:', err);\n      }",
            "catch (error) {\n      logger.error('Error toggling favorite:', error);\n    }"
          ]
        },
        {
          "file": "src/components/recipes/RecipeGrid.tsx",
          "count": 3,
          "examples": [
            "catch (error) {\n        logger.error('Error loading time factors:', error);\n      }",
            "catch (error) {\n      logger.error('Error loading favorites:', error);\n    }",
            "catch (error) {\n      logger.error('Error saving favorites:', error);\n    }"
          ]
        },
        {
          "file": "src/components/recommendations/AlchemicalRecommendations.migrated.tsx",
          "count": 4,
          "examples": [
            "catch (err) {\n        console.error('Error loading astrological data:', err);\n        setError(err instanceof Error ? err : new Error('Error loading astrological data'));\n      }",
            "catch (err) {\n        console.error('Error loading ingredient data:', err);\n        setError(err instanceof Error ? err : new Error('Error loading ingredient data'));\n      }",
            "catch (err) {\n        console.error('Error loading cooking and cuisine data:', err);\n        setError(err instanceof Error ? err : new Error('Error loading cooking and cuisine data'));\n      }"
          ]
        },
        {
          "file": "src/components/recommendations/AlchemicalRecommendations.tsx",
          "count": 1,
          "examples": [
            "catch (err) {\n        setError('Failed to load astrological data');\n      }"
          ]
        },
        {
          "file": "src/components/recommendations/CuisineRecommender.tsx",
          "count": 4,
          "examples": [
            "catch (error) {\n          console.error('Error generating sauce recommendations:', error);\n        }",
            "catch (error) {\n            console.error('Error generating sauce recommendations:', error);\n          }",
            "catch (err) {\n      console.error('Error loading cuisine recommendations:', err);\n      setError('Failed to load cuisine recommendations. Please try again.');\n      setLoading(false);\n    }"
          ]
        },
        {
          "file": "src/components/recommendations/IngredientRecommender.migrated.tsx",
          "count": 3,
          "examples": [
            "catch (err) {\n        console.error('Error loading astrological data:', err);\n      }",
            "catch (err) {\n        console.error('Error loading ingredient data:', err);\n      }",
            "catch (err) {\n        console.error('Error loading ingredient recommendations:', err);\n        setIsComponentLoading(false);\n      }"
          ]
        },
        {
          "file": "src/components/recommendations/IngredientRecommender.tsx",
          "count": 4,
          "examples": [
            "catch (err) {\n        console.error('Error loading enhanced recommendations:', err);\n      }",
            "catch (error) {\n          console.warn('Error getting chakra recommendations:', error);\n          chakraRecommendations = {}",
            "catch (error) {\n      console.error('Error generating recommendations:', error);\n    }"
          ]
        },
        {
          "file": "src/components/test/UnifiedScoringIntegrationTest.tsx",
          "count": 1,
          "examples": [
            "catch (err) {\n      console.error('❌ Test failed:', err);\n      setError(err instanceof Error ? err.message : 'Unknown error');\n    }"
          ]
        },
        {
          "file": "src/constants/alchemicalEnergyMapping.ts",
          "count": 3,
          "examples": [
            "catch (error) {\n    logger.error('Error calculating alchemical distribution:', error);\n    return {\n      Spirit: 0.25,\n      Essence: 0.25,\n      Matter: 0.25,\n      Substance: 0.25\n    }",
            "catch (error) {\n    logger.error('Error converting to elemental properties:', error);\n    return {\n      Fire: 0.25,\n      Water: 0.25,\n      Earth: 0.25,\n      Air: 0.25\n    }",
            "catch (error) {\n    logger.error('Error calculating thermodynamic properties:', error);\n    return {\n      heat: 0.5,\n      entropy: 0.5,\n      reactivity: 0.5,\n      gregsEnergy: 0.5 - (0.5 * 0.5) // Default Greg's Energy calculation\n    }"
          ]
        },
        {
          "file": "src/context/AstrologicalContext.tsx",
          "count": 1,
          "examples": [
            "catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error occurred');\n    }"
          ]
        },
        {
          "file": "src/context/ChartContext.tsx",
          "count": 2,
          "examples": [
            "catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error updating chart');\n    }",
            "catch (err) {\n        setError(err instanceof Error ? err.message : 'Unknown error loading chart');\n      }"
          ]
        },
        {
          "file": "src/context/CurrentChartContext.tsx",
          "count": 2,
          "examples": [
            "catch (posError) {\n          console.error('Error calculating planetary positions:', posError);\n          // Use alchemicalPositions from context as fallback, or empty object if not available\n          positions = alchemicalPositions || {}",
            "catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to update chart');\n      console.error('Error updating chart:', err);\n    }"
          ]
        },
        {
          "file": "src/context/UnifiedContext.tsx",
          "count": 1,
          "examples": [
            "catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred'\n      logger.error('❌ Error refreshing unified data:', errorMessage)\n      setState(prev => ({\n        ...prev,\n        isLoading: false,\n        error: errorMessage\n      }"
          ]
        },
        {
          "file": "src/contexts/AlchemicalContext/provider.tsx",
          "count": 3,
          "examples": [
            "catch (error) {\n    logger.error('Error calculating active planets:', error);\n    // Return at least the sun and moon as fallback (capitalized)\n    return ['Sun', 'Moon'];\n  }",
            "catch (error) {\n        logger.error('Error syncing ElementalCalculator state:', error);\n      }",
            "catch (error) {\n      logger.error('Error refreshing planetary positions:', error);\n      dispatch({\n        type: 'SET_ERROR',\n        payload: { message: 'Failed to refresh planetary positions' }"
          ]
        },
        {
          "file": "src/contexts/ChartContext/provider.tsx",
          "count": 2,
          "examples": [
            "catch (posError) {\n          console.error('Error calculating planetary positions:', posError);\n          // Use alchemicalPositions from context as fallback, or empty object if not available\n          positions = alchemicalPositions || {}",
            "catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to update chart');\n      console.error('Error updating chart:', err);\n    }"
          ]
        },
        {
          "file": "src/contexts/FlavorEngineContext.tsx",
          "count": 1,
          "examples": [
            "catch (err) {\n          const error = err instanceof Error ? err : new Error('Unknown error initializing flavor engine');\n          console.error('Failed to initialize flavor engine:', err);\n          \n          // Update global state\n          globalInitState.error = error;\n          globalInitState.isLoading = false;\n          \n          // Update component state if mounted\n          if (isMountedRef.current) {\n            setState({\n              isInitialized: false,\n              isLoading: false,\n              error,\n              profileCount: 0,\n              categories: {}"
          ]
        },
        {
          "file": "src/data/cuisineFlavorProfiles.ts",
          "count": 5,
          "examples": [
            "catch (importError) {\n          console.error(`Error importing special cuisine data for ${cuisineName}",
            "catch (error) {\n        console.error(`Error in special handling for ${cuisineName}",
            "catch (error) {\n        console.error(`Error fetching recipes from LocalRecipeService for ${cuisineName}"
          ]
        },
        {
          "file": "src/data/ingredients/index.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n      console.warn(`Skipping invalid ingredient ${key}"
          ]
        },
        {
          "file": "src/data/nutritional.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n    console.error('Error fetching nutritional data:', error);\n    return null;\n  }"
          ]
        },
        {
          "file": "src/data/recipes.ts",
          "count": 6,
          "examples": [
            "catch (error) {\n      console.error(`Error processing cuisine ${cuisineName}",
            "catch (error) {\n      console.error(\"Error using enhanced getRecipesForCuisineMatch:\", error);\n    }",
            "catch (error) {\n        console.error(\"Error using LocalRecipeService directly:\", error);\n      }"
          ]
        },
        {
          "file": "src/data/unified/flavorCompatibilityLayer.ts",
          "count": 7,
          "examples": [
            "catch (error) {\n    console.warn('Legacy compatibility layer error:', error);\n    // Fallback to simple calculation\n    return {\n      compatibility: 0.7,\n      elementalHarmony: 0.7,\n      kalchmResonance: 0.7,\n      monicaOptimization: 0.7,\n      seasonalAlignment: 0.7,\n      recommendations: ['Using fallback compatibility calculation'],\n      warnings: ['Could not use advanced compatibility engine']\n    }",
            "catch (error) {\n    console.warn('Legacy cuisine flavor match error:', error);\n    return 0.5;\n  }",
            "catch (error) {\n    console.warn('Legacy planetary flavor match error:', error);\n    return 0.5;\n  }"
          ]
        },
        {
          "file": "src/data/unified/flavorProfileMigration.ts",
          "count": 6,
          "examples": [
            "catch (error) {\n      this.migrationErrors?.push(`Migration failed: ${error}",
            "catch (error) {\n        this.migrationErrors?.push(`Failed to migrate unified profile ${id}",
            "catch (error) {\n        this.migrationErrors?.push(`Failed to migrate cuisine profile ${cuisineName}"
          ]
        },
        {
          "file": "src/data/unified/services/errorHandler.js",
          "count": 4,
          "examples": [
            "catch (error) {\n            this.log(error, { context }",
            "catch (error) {\n            this.log(error, { context }",
            "catch (error) {\n        ErrorHandler.handlePropertyAccessError(error, properties.join('.'), context);\n        return defaultValue;\n    }"
          ]
        },
        {
          "file": "src/data/unified/unifiedFlavorEngine.ts",
          "count": 2,
          "examples": [
            "catch (error) {\n        console.error('Error during synchronous initialization:', error);\n      }",
            "catch (error) {\n      console.error('Error during synchronous initialization:', error);\n      setGlobalState(this, false, false);\n    }"
          ]
        },
        {
          "file": "src/data/unified/utils/astrology/core.js",
          "count": 5,
          "examples": [
            "catch (error) {\n        errorLog('Error in calculateLunarPhase:', error instanceof Error ? error.message : String(error));\n        return 0; // Default to new Moon\n    }",
            "catch (error) {\n        errorLog('Error in getmoonIllumination:', error instanceof Error ? error.message : String(error));\n        return 0.5; // Default to 50% illumination\n    }",
            "catch (error) {\n        errorLog('Error calculating Moon sign:', error instanceof Error ? error.message : String(error));\n        return 'cancer'; // Default to cancer as moon's ruling sign\n    }"
          ]
        },
        {
          "file": "src/data/unified/utils/astrology/positions.js",
          "count": 5,
          "examples": [
            "catch (error) {\n        debugLog('Error calculating lunar nodes:', error instanceof Error ? error.message : String(error));\n        // Return current position for March 2024 (late pisces)\n        return { NorthNode: 356.54, isRetrograde: true }",
            "catch (error) {\n                debugLog(`Error calculating position for ${planet}",
            "catch (error) {\n            debugLog('Error calculating lunar nodes:', error instanceof Error ? error.message : String(error));\n        }"
          ]
        },
        {
          "file": "src/data/unified/utils/astrology/validation.js",
          "count": 4,
          "examples": [
            "catch (error) {\n        errorLog('Error in safe calculateLunarPhase:', error instanceof Error ? error.message : String(error));\n        return 0; // Default to new Moon\n    }",
            "catch (error) {\n        errorLog('Error in safe getmoonIllumination:', error instanceof Error ? error.message : String(error));\n        return 0.5; // Default to 50%\n    }",
            "catch (error) {\n        errorLog('Error in getCurrentAstrologicalState:', error instanceof Error ? error.message : String(error));\n        // Return minimal default state\n        return {\n            sunSign: 'aries',\n            moonSign: 'cancer',\n            lunarPhase: 'new moon',\n            activePlanets: ['Sun', 'Moon'],\n            dominantElement: 'Fire',\n            error: error instanceof Error ? error.message : String(error)\n        }"
          ]
        },
        {
          "file": "src/data/unified/utils/dateUtils.js",
          "count": 1,
          "examples": [
            "catch (error) {\n        console.error(`Error getting recommendations for ${cuisineId}"
          ]
        },
        {
          "file": "src/examples/ServiceIntegrationExample.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n    console.error('Error in Service Integration Example:', error);\n  }"
          ]
        },
        {
          "file": "src/hooks/useAlchemical.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n      setState(prev => ({\n        ...prev,\n        isLoading: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }"
          ]
        },
        {
          "file": "src/hooks/useAlchemicalRecommendations.ts",
          "count": 1,
          "examples": [
            "catch (err) {\n        setError(err instanceof Error ? err : new Error('Unknown error occurred'));\n      }"
          ]
        },
        {
          "file": "src/hooks/useAstrologicalInfluence.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n        console.error('Failed to get astrological state:', error);\n      }"
          ]
        },
        {
          "file": "src/hooks/useAstrologicalState.ts",
          "count": 3,
          "examples": [
            "catch (error) {\n      logger.error('Error calculating active planets', error);\n    }",
            "catch (error) {\n      logger.error('Failed to update astrological state', error);\n    }",
            "catch (error) {\n      logger.error('Failed to calculate planetary hour', error);\n      setCurrentPlanetaryHour(null);\n      return () => {\n        // Intentionally empty - no cleanup needed in error case\n      }"
          ]
        },
        {
          "file": "src/hooks/useAstrologize.ts",
          "count": 2,
          "examples": [
            "catch (locationError) {\n          console.warn('Failed to get location, using default:', locationError);\n          // Use default location (coordinates will be provided by the API)\n          setLocation(null);\n        }",
            "catch (fetchError) {\n      console.error('Error fetching from Astrologize API:', fetchError);\n      setError(fetchError instanceof Error ? fetchError : new Error('Unknown error'));\n    }"
          ]
        },
        {
          "file": "src/hooks/useChakraInfluencedFood.ts",
          "count": 3,
          "examples": [
            "catch (error) {\n      console.error('Error getting planetary hour:', error);\n    }",
            "catch (err) {\n        console.error('Error fetching chakra-influenced food recommendations:', err);\n        setError(err instanceof Error ? err.message : 'Unknown error occurred');\n        setRecommendations([]);\n      }",
            "catch (err) {\n      console.error('Error refreshing chakra-influenced food recommendations:', err);\n      setError(err instanceof Error ? err.message : 'Unknown error occurred');\n    }"
          ]
        },
        {
          "file": "src/hooks/useContextServiceBridge.ts",
          "count": 4,
          "examples": [
            "catch (err) {\n          console.error('Error in useAlchemicalBridge:', err);\n        }",
            "catch (err) {\n          console.error('Error in useChakraBridge:', err);\n        }",
            "catch (err) {\n          console.error('Error in usePlanetaryHoursBridge:', err);\n        }"
          ]
        },
        {
          "file": "src/hooks/useCurrentChart.ts",
          "count": 1,
          "examples": [
            "catch (err) {\n        setError(err instanceof Error ? err.message : 'Error processing chart data');\n        console.error('Chart processing error:', err);\n      }"
          ]
        },
        {
          "file": "src/hooks/useFoodRecommendations.ts",
          "count": 2,
          "examples": [
            "catch (err) {\n        console.error('Error fetching ingredient recommendations:', err);\n        setError(err instanceof Error ? err.message : 'Unknown error occurred');\n        setRecommendations([]);\n      }",
            "catch (err) {\n      console.error('Error refreshing ingredient recommendations:', err);\n      setError(err instanceof Error ? err.message : 'Unknown error occurred');\n    }"
          ]
        },
        {
          "file": "src/hooks/useIngredientMapping.ts",
          "count": 5,
          "examples": [
            "catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred';\n      setError(errorMessage);\n      return [];\n    }",
            "catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred';\n      setError(errorMessage);\n      return [];\n    }",
            "catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred';\n      setError(errorMessage);\n      return {\n        success: false,\n        message: errorMessage,\n        suggestions: []\n      }"
          ]
        },
        {
          "file": "src/hooks/useIngredientRecommendations.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n        setState(prev => ({\n          ...prev,\n          isLoading: false,\n          error: error instanceof Error ? error.message : 'Unknown error'\n        }"
          ]
        },
        {
          "file": "src/hooks/usePlanetaryHours.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n        setData(prev => ({\n          ...prev,\n          isLoading: false,\n          error: error instanceof Error ? error.message : 'Unknown error'\n        }"
          ]
        },
        {
          "file": "src/hooks/useRealtimePlanetaryPositions.ts",
          "count": 4,
          "examples": [
            "catch (astrologizeError) {\n        console.warn('Astrologize API failed, falling back to API endpoint:', astrologizeError);\n        \n        // Fallback to our API endpoint\n        const params = new URLSearchParams();\n        if (location?.latitude) params.set('latitude', location.latitude.toString());\n        if (location?.longitude) params.set('longitude', location.longitude.toString());\n\n        const url = `/api/planetary-positions${params.toString() ? `?${params.toString()}",
            "catch (error) {\n      setState(prev => ({\n        ...prev,\n        loading: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }",
            "catch (astrologizeError) {\n        console.warn('Astrologize API failed for custom date, falling back to API endpoint:', astrologizeError);\n        \n        // Fallback to our API endpoint\n        const body: any = { date: date.toISOString() }"
          ]
        },
        {
          "file": "src/hooks/useRecipeRecommendations.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n        setState(prev => ({\n          ...prev,\n          isLoading: false,\n          error: error instanceof Error ? error.message : 'Unknown error'\n        }"
          ]
        },
        {
          "file": "src/hooks/useSafeFlavorEngine.ts",
          "count": 3,
          "examples": [
            "catch (err) {\n      // logger.error('Error getting flavor profile:', err);\n      return undefined;\n    }",
            "catch (err) {\n      // logger.error('Error searching flavor profiles:', err);\n      return [];\n    }",
            "catch (err) {\n      // logger.error('Error calculating compatibility:', err);\n      return null;\n    }"
          ]
        },
        {
          "file": "src/hooks/useServices.ts",
          "count": 1,
          "examples": [
            "catch (err) {\n        const error = err instanceof Error ? err : new Error(String(err));\n        logger.error('Error initializing services:', error);\n        \n        if (isMounted) {\n          setError(error);\n          setIsLoading(false);\n          setStatus(InitializationStatus.FAILED);\n        }"
          ]
        },
        {
          "file": "src/hooks/useTarotAstrologyData.ts",
          "count": 8,
          "examples": [
            "catch (error) {\n      logger.error('Error converting lunar phase', error);\n      return null;\n    }",
            "catch (error) {\n      logger.error(`Error calculating planetary energy for ${planet}",
            "catch (err) {\n      setTarotError('Failed to load tarot cards');\n      logger.error('Error loading tarot cards:', err);\n      // Set fallback values\n      setTarotCards({ minorCard: null, majorCard: null }"
          ]
        },
        {
          "file": "src/lib/alchemicalEngine.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n      // console.error('Error calculating planetary positions:', error);\n      // Return empty object as fallback\n      return {}"
          ]
        },
        {
          "file": "src/lib/chakraRecipeEnhancer.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n      console.error('Error getting planetary hour:', error);\n    }"
          ]
        },
        {
          "file": "src/lib/cuisineCalculations.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n        console.error('Error getting cuisine recommendations:', error);\n        return [];\n    }"
          ]
        },
        {
          "file": "src/lib/recipeCalculations.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n    console.error(\"Error getting recipes for tarot card:\", error);\n    return defaultRecipes;\n  }"
          ]
        },
        {
          "file": "src/lib/recipeEngine.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n            return 0;\n        }"
          ]
        },
        {
          "file": "src/pages/_app.tsx",
          "count": 2,
          "examples": [
            "catch (e) {\n            console.warn('[App] Error initializing Chrome APIs:', e);\n          }",
            "catch (e) {\n      console.warn('[App] Error during initial Chrome API initialization:', e);\n    }"
          ]
        },
        {
          "file": "src/pages/_document.tsx",
          "count": 1,
          "examples": [
            "catch (e) {\n                  console.error('[CriticalInit] Error during initialization:', e);\n                }"
          ]
        },
        {
          "file": "src/pages/api/health.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n    res.status(503).json({\n      status: 'error',\n      timestamp: new Date().toISOString(),\n      error: error instanceof Error ? error.message : 'Unknown error'\n    }"
          ]
        },
        {
          "file": "src/pages/api/test/cooking-recommendations.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n    // console.error('Error in test endpoint:', error);\n    res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error',\n      message: 'Test failed',\n    }"
          ]
        },
        {
          "file": "src/pages/sauces/[cuisine]/[id].tsx",
          "count": 1,
          "examples": [
            "catch (error) {\n        // console.error('Error finding sauce:', error);\n        setSauce(null);\n      }"
          ]
        },
        {
          "file": "src/providers/RecoveryProvider.tsx",
          "count": 1,
          "examples": [
            "catch (error) {\n      logger.error('Failed to reset app:', error)\n    }"
          ]
        },
        {
          "file": "src/scripts/downloadEphemeris.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n    // console.error('Failed to download ephemeris files:', error);\n    process.exit(1);\n  }"
          ]
        },
        {
          "file": "src/scripts/fetchVegetablesFromSpoonacular.js",
          "count": 1,
          "examples": [
            "catch (error) {\n      // console.error(`Error fetching data for ${vegetableName}"
          ]
        },
        {
          "file": "src/scripts/fix-const-assign.js",
          "count": 5,
          "examples": [
            "catch (error) {\n  console.error(`Failed to create backup: ${error.message}",
            "catch (error) {\n    console.log(`Note: Could not format file with prettier: ${error.message}",
            "catch (error) {\n    console.error(`Error verifying fix: ${error.message}"
          ]
        },
        {
          "file": "src/scripts/fix-linting-issues.js",
          "count": 10,
          "examples": [
            "catch (error) {\n    log(`Error backing up file ${filePath}",
            "catch (error) {\n    log(`Error reading file ${filePath}",
            "catch (error) {\n    log(`Error writing file ${filePath}"
          ]
        },
        {
          "file": "src/scripts/fix-unused-vars.js",
          "count": 6,
          "examples": [
            "catch (error) {\n  console.error(`Failed to create backup: ${error.message}",
            "catch (e) {\n          console.warn(`Could not extract variable name from message: ${message.message}",
            "catch (error) {\n    console.log(`Note: Could not format file with prettier: ${error.message}"
          ]
        },
        {
          "file": "src/scripts/fix-unused-vars.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n    // console.error('Error running ESLint:', error);\n    return [];\n  }"
          ]
        },
        {
          "file": "src/scripts/gasGiantsTest.js",
          "count": 1,
          "examples": [
            "catch (error) {\n    console.error('Error running test:', error);\n  }"
          ]
        },
        {
          "file": "src/scripts/updateAllIngredients.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n      console.error(`Error updating ${category}"
          ]
        },
        {
          "file": "src/scripts/updateIngredientFiles.js",
          "count": 1,
          "examples": [
            "catch (error) {\n    // console.log(`Note: Prettier formatting failed for ${filename}"
          ]
        },
        {
          "file": "src/services/AlchemicalRecommendationService.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n          // Fallback to basic elemental compatibility\n          return {\n            ingredient,\n            score: this.engine.calculateElementalCompatibility(\n              elementalProperties,\n              ingredient.elementalProperties\n            ),\n            confidence: 0.5,\n            dominantEffects: ['fallback']\n          }"
          ]
        },
        {
          "file": "src/services/AlchemicalService.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n      logger.error('Failed to initialize from current positions:', error);\n      return createErrorResponse(`Failed to initialize: ${error instanceof Error ? error.message : 'Unknown error'}"
          ]
        },
        {
          "file": "src/services/AstrologicalService.ts",
          "count": 7,
          "examples": [
            "catch (e) {\n    logger.warn(`Error checking ephemeris file ${fileName}",
            "catch (error) {\n      return createErrorResponse(`Calculation test failed: ${error instanceof Error ? error.message : 'Unknown error'}",
            "catch (error) {\n      return createErrorResponse(`Verification failed: ${error instanceof Error ? error.message : 'Unknown error'}"
          ]
        },
        {
          "file": "src/services/AstrologizeApiCache.ts",
          "count": 2,
          "examples": [
            "catch (error) {\n      console.warn('Failed to save astrologize cache to localStorage:', error);\n    }",
            "catch (error) {\n      console.warn('Failed to load astrologize cache from localStorage:', error);\n    }"
          ]
        },
        {
          "file": "src/services/AstrologyService.ts",
          "count": 3,
          "examples": [
            "catch (error) {\n      console.warn('Astrologize API failed, using cached data:', error);\n      if (forceRefresh || !this.currentState.isReady) {\n        await this.refreshAstrologicalState();\n      }",
            "catch (apiError) {\n        console.warn('Astrologize API failed, using fallback calculations:', apiError);\n        planetaryAlignment = this.calculatePlanetaryPositions(currentDate);\n      }",
            "catch (error) {\n      console.error(\"Failed to refresh astrological state\", error);\n    }"
          ]
        },
        {
          "file": "src/services/ConsolidatedIngredientService.ts",
          "count": 20,
          "examples": [
            "catch (error) {\n      errorHandler.logError(error, {\n        type: ErrorType.DATA,\n        severity: ErrorSeverity.ERROR,\n        context: 'ConsolidatedIngredientService',\n        data: { action: 'getAllIngredients' }",
            "catch (error) {\n      errorHandler.logError(error, {\n        type: ErrorType.DATA,\n        severity: ErrorSeverity.ERROR,\n        context: 'ConsolidatedIngredientService',\n        data: { action: 'getAllIngredientsFlat' }",
            "catch (error) {\n      errorHandler.logError(error, {\n        type: ErrorType.DATA,\n        severity: ErrorSeverity.ERROR,\n        context: 'ConsolidatedIngredientService',\n        data: { action: 'getIngredientByName', name }"
          ]
        },
        {
          "file": "src/services/ConsolidatedRecipeService.ts",
          "count": 16,
          "examples": [
            "catch (error) {\n      ErrorHandler.log((error as unknown as Error), {\n        component: 'ConsolidatedRecipeService',\n        context: { action: 'getAllRecipes' }",
            "catch (error) {\n      ErrorHandler.log((error as unknown as Error), {\n        component: 'ConsolidatedRecipeService',\n        context: { action: 'searchRecipes', criteria }",
            "catch (error) {\n      ErrorHandler.log((error as unknown as Error), {\n        component: 'ConsolidatedRecipeService',\n        context: { action: 'getRecipesByCuisine', cuisine }"
          ]
        },
        {
          "file": "src/services/ConsolidatedRecommendationService.ts",
          "count": 4,
          "examples": [
            "catch (error) {\n      console.error('Error getting recommended recipes:', error);\n      return {\n        items: [],\n        scores: {}",
            "catch (error) {\n      console.error('Error getting recommended ingredients:', error);\n      return {\n        items: [],\n        scores: {}",
            "catch (error) {\n      console.error('Error getting recommended cuisines:', error);\n      return {\n        items: [],\n        scores: {}"
          ]
        },
        {
          "file": "src/services/DirectRecipeService.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n      console.error('Error fetching celestial alignment:', error);\n      \n      // Fall back to celestial calculator if API fails\n      if (!this.currentCelestialAlignment) {\n        this.currentCelestialAlignment = celestialCalculator.calculateCurrentInfluences();\n        this.lastAlignmentUpdate = now;\n      }"
          ]
        },
        {
          "file": "src/services/ElementalCalculator.ts",
          "count": 3,
          "examples": [
            "catch (error) {\n      console.error(\"[ElementalCalculator] Error calculating elemental state:\", error);\n      return { ...DEFAULT_ELEMENTAL_PROPERTIES }",
            "catch (error) {\n      console.error(\"[ElementalCalculator] Error processing planet data:\", error);\n    }",
            "catch (error) {\n      console.error(\"[ElementalCalculator] Error processing ascendant data:\", error);\n    }"
          ]
        },
        {
          "file": "src/services/EnhancedAstrologyService.ts",
          "count": 4,
          "examples": [
            "catch (error) {\n      logger.error('Error getting enhanced planetary positions:', error);\n      throw error;\n    }",
            "catch (error) {\n        logger.warn('Astrologize API unavailable, trying Swiss Ephemeris');\n      }",
            "catch (error) {\n        logger.warn('Swiss Ephemeris unavailable, using fallback calculations');\n      }"
          ]
        },
        {
          "file": "src/services/EnhancedRecommendationService.ts",
          "count": 4,
          "examples": [
            "catch (error) {\n      console.error('Error in enhanced recommendations:', error);\n      \n      // Fallback to base recommendations with interface compliance\n      const baseRecommendations = await getRecommendedIngredients(astroState);\n      const fallbackRecommendations: EnhancedRecommendation[] = baseRecommendations.slice(0, 10).map(ingredient => ({\n        ingredient,\n        score: (ingredient as any)?.score || 0.5,\n        reasons: ['Base astrological alignment'],\n        chakraAlignment: {\n          dominantChakra: 'heart',\n          energyLevel: 0.5,\n          balanceState: 'balanced' as const\n        }",
            "catch (error) {\n      // Return default properties if service fails\n      return {\n        magicalAttributes: ['nourishing', 'grounding'],\n        planetaryRulers: ['Earth']\n      }",
            "catch (error) {\n      console.warn('Error calculating unified flavor compatibility:', error);\n      endTiming();\n      return null;\n    }"
          ]
        },
        {
          "file": "src/services/IngredientFilterService.ts",
          "count": 3,
          "examples": [
            "catch (error) {\n      console.error('Error fetching enhanced nutrition data:', error);\n      return null;\n    }",
            "catch (err) {\n          console.error(`Error fetching nutrition for recipe ${recipe.id}",
            "catch (error) {\n      console.error('Error fetching recipe recommendations:', error);\n      return [];\n    }"
          ]
        },
        {
          "file": "src/services/IngredientService.ts",
          "count": 34,
          "examples": [
            "catch (error) {\n      logger.error('Error converting to unified ingredients:', error);\n      // Return empty object if conversion fails\n      return {}",
            "catch (error) {\n      logger.error('Error flattening unified ingredients:', error);\n      return [];\n    }",
            "catch (error) {\n      logger.error(`Error getting ingredient by name ${name}"
          ]
        },
        {
          "file": "src/services/LocalRecipeService.ts",
          "count": 8,
          "examples": [
            "catch (error) {\n      logger.error(\"Error getting all recipes:\", error);\n      return [];\n    }",
            "catch (error) {\n          logger.error(`Error importing ${normalizedName}",
            "catch (error) {\n      logger.error(`Error getting recipes for cuisine ${cuisineName}"
          ]
        },
        {
          "file": "src/services/RealAlchemizeService.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n    console.warn('Error loading planetary positions from file, using fallback data:', error);\n    return getFallbackPlanetaryPositions();\n  }"
          ]
        },
        {
          "file": "src/services/RecipeElementalService.ts",
          "count": 2,
          "examples": [
            "catch (error) {\n      logger.error('Error standardizing recipe elements:', error);\n      // Return recipe with current elemental state if there's an error\n      return {\n        ...recipe,\n        elementalProperties: elementalUtils.getCurrentElementalState()\n      }",
            "catch (error) {\n      logger.error('Error deriving elemental properties', error);\n    }"
          ]
        },
        {
          "file": "src/services/RecipeFinder.ts",
          "count": 18,
          "examples": [
            "catch (error) {\n      errorHandler.log(error instanceof Error ? error : new Error(String(error)), { context: { service: 'RecipeFinder', action: 'getAllRecipes', data: {}",
            "catch (error) {\n      errorHandler.log(error instanceof Error ? error : new Error(String(error)), { context: { service: 'RecipeFinder', action: 'searchRecipes', data: params.criteria }",
            "catch (error) {\n      errorHandler.log(error instanceof Error ? error : new Error(String(error)), { context: { service: 'RecipeFinder', action: 'getRecipesByCuisine', data: params.cuisine }"
          ]
        },
        {
          "file": "src/services/RecommendationAdapter.ts",
          "count": 3,
          "examples": [
            "catch (error) {\n      logger.error('Error initializing from current positions:', error);\n    }",
            "catch (error) {\n      logger.error('Error transforming items with planetary positions:', error);\n    }",
            "catch (error) {\n      logger.error('Error transforming items:', error);\n      \n      // Create empty transformed arrays\n      this.transformedIngredients = [];\n      this.transformedMethods = [];\n      this.transformedCuisines = [];\n    }"
          ]
        },
        {
          "file": "src/services/RecommendationService.ts",
          "count": 7,
          "examples": [
            "catch (error) {\n      logger.error('Failed to initialize from current positions', error);\n      throw error;\n    }",
            "catch (error) {\n      logger.error('Error transforming items:', error);\n    }",
            "catch (error) {\n      logger.error('Error recommending recipes:', error);\n      return [this.getFallbackRecipe()];\n    }"
          ]
        },
        {
          "file": "src/services/ServicesManager.ts",
          "count": 7,
          "examples": [
            "catch (error) {\n      this._initializationError = error instanceof Error ? error : new Error(String(error));\n      this._initializationStatus = InitializationStatus.FAILED;\n      logger.error('Error initializing services:', this._initializationError);\n      throw this._initializationError;\n    }",
            "catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error('Error initializing AlchemicalEngine:', errorMessage);\n      \n      this._serviceResults?.push({\n        success: false,\n        serviceName: 'AlchemicalEngine',\n        message: 'Failed to initialize engine',\n        error: error instanceof Error ? error : new Error(String(error)),\n        timestamp: Date.now()\n      }",
            "catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error('Error initializing AstrologyService:', errorMessage);\n      \n      this._serviceResults?.push({\n        success: false,\n        serviceName: 'AstrologyService',\n        message: 'Failed to initialize service',\n        error: error instanceof Error ? error : new Error(String(error)),\n        timestamp: Date.now()\n      }"
          ]
        },
        {
          "file": "src/services/SpoonacularElementalMapper.ts",
          "count": 2,
          "examples": [
            "catch (error) {\n      logger.error('Error mapping Spoonacular ingredient:', error);\n      return { \n        name: spoonacularIngredient?.name || 'Unknown',\n        elementalProperties: this.getDefaultElements()\n      }",
            "catch (error) {\n      logger.error('Error mapping nutritional data to elemental properties:', error);\n      return elements;\n    }"
          ]
        },
        {
          "file": "src/services/SpoonacularService.ts",
          "count": 5,
          "examples": [
            "catch (error) {\n      console.error('Error fetching recipes from Spoonacular API:', error);\n      // In case of API error, return any local recipes we found\n      return localRecipes;\n    }",
            "catch (error) {\n      console.error('Error searching local recipes:', error);\n      return [];\n    }",
            "catch (error) {\n      console.error('Error fetching bulk recipe information:', error);\n      return [];\n    }"
          ]
        },
        {
          "file": "src/services/SwissEphemerisService.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n      logger.error('Error getting Swiss Ephemeris positions:', error);\n      throw error;\n    }"
          ]
        },
        {
          "file": "src/services/UnifiedRecipeService.ts",
          "count": 5,
          "examples": [
            "catch (error) {\n      errorHandler.log(error, { context: 'UnifiedRecipeService.getAllRecipes' }",
            "catch (error) {\n      errorHandler.log(error, { context: 'UnifiedRecipeService.getRecipeById' }",
            "catch (error) {\n      errorHandler.log(error, { context: 'UnifiedRecipeService.searchRecipes' }"
          ]
        },
        {
          "file": "src/services/UnifiedScoringService.ts",
          "count": 4,
          "examples": [
            "catch (error) {\n      console.error('Error in scoring calculation:', error);\n      \n      // Return fallback result\n      return {\n        score: 0.5,\n        confidence: 0.1,\n        breakdown: { base: 0.5 }",
            "catch (error) {\n      console.warn('Astrologize API unavailable, falling back to Swiss Ephemeris');\n    }",
            "catch (error) {\n      console.warn('Swiss Ephemeris unavailable, using minimal fallback data');\n      \n      // Last resort: basic fallback data\n      return this.getMinimalFallbackData(context);\n    }"
          ]
        },
        {
          "file": "src/services/adapters/FoodAlchemySystemAdapter.ts",
          "count": 2,
          "examples": [
            "catch (error) {\n      logger.error('Error getting recommended recipes', error);\n      return [];\n    }",
            "catch (error) {\n      logger.error('Error getting recipes for planetary alignment', error);\n      return [];\n    }"
          ]
        },
        {
          "file": "src/services/adapters/IngredientServiceAdapter.ts",
          "count": 4,
          "examples": [
            "catch (error) {\n      logger.error('Error getting recommended ingredients', error);\n      return [];\n    }",
            "catch (error) {\n      logger.error('Error getting ingredients by planetary influence', error);\n      return [];\n    }",
            "catch (error) {\n      logger.error('Error finding complementary ingredients', error);\n      return [];\n    }"
          ]
        },
        {
          "file": "src/services/adapters/LegacyIngredientAdapter.ts",
          "count": 11,
          "examples": [
            "catch (error) {\n      logger.error('Error in getAllIngredients:', error);\n      // Fall back to original implementation if needed\n      return this.legacyService.getAllIngredients();\n    }",
            "catch (error) {\n      logger.error('Error in getAllIngredientsFlat:', error);\n      // Fall back to original implementation if needed\n      return this.legacyService.getAllIngredientsFlat();\n    }",
            "catch (error) {\n      logger.error(`Error in getIngredientByName for \"${name}"
          ]
        },
        {
          "file": "src/services/adapters/LegacyRecipeAdapter.ts",
          "count": 11,
          "examples": [
            "catch (error) {\n      logger.error('Error in getAllRecipes:', error);\n      // Fall back to LocalRecipeService if needed\n      const recipes = await LocalRecipeService.getAllRecipes();\n      return recipes as unknown as Recipe[];\n    }",
            "catch (error) {\n      logger.error('Error in searchRecipes:', error);\n      // ✅ Pattern MM-1: Safe argument type conversion for string parameter\n      const queryValue = (criteria as any)?.query;\n      if (queryValue && typeof queryValue === 'string') {\n        const recipes = await LocalRecipeService.searchRecipes(queryValue);\n        return recipes as unknown as Recipe[];\n      }",
            "catch (error) {\n      logger.error(`Error in getRecipesByCuisine for \"${cuisine}"
          ]
        },
        {
          "file": "src/services/adapters/LegacyRecommendationAdapter.ts",
          "count": 10,
          "examples": [
            "catch (error) {\n      logger.error('Error in getRecommendedRecipes:', error);\n      // Return minimal result\n      return {\n        items: [],\n        scores: {}",
            "catch (error) {\n      logger.error('Error in getRecommendedIngredients:', error);\n      // Return minimal result\n      return {\n        items: [],\n        scores: {}",
            "catch (error) {\n      logger.error('Error in getRecommendedCuisines:', error);\n      // Return minimal result\n      return {\n        items: [],\n        scores: {}"
          ]
        },
        {
          "file": "src/services/adapters/NutritionalDataAdapter.ts",
          "count": 8,
          "examples": [
            "catch (error) {\n      // Use safe type casting for errorHandler service access\n      const errorHandlerService = errorHandler as any;\n      errorHandlerService?.logError?.(error, {\n        context: 'NutritionalDataAdapter',\n        action: 'getNutritionalData',\n        foodName\n      }",
            "catch (error) {\n      // Use safe type casting for errorHandler service access\n      const errorHandlerService = errorHandler as any;\n      errorHandlerService?.logError?.(error, {\n        context: 'NutritionalDataAdapter',\n        action: 'calculateNutritionalBalance'\n      }",
            "catch (error) {\n      // Use safe type casting for errorHandler service access\n      const errorHandlerService = errorHandler as any;\n      errorHandlerService?.logError?.(error, {\n        context: 'NutritionalDataAdapter',\n        action: 'convertNutritionalToElemental'\n      }"
          ]
        },
        {
          "file": "src/services/adapters/UnifiedDataAdapter.ts",
          "count": 7,
          "examples": [
            "catch (error) {\n      console.error(`Error getting ingredient ${name}",
            "catch (error) {\n      console.error(`Error getting ingredients in category ${category}",
            "catch (error) {\n      console.error('Error searching ingredients:', error);\n      return [];\n    }"
          ]
        },
        {
          "file": "src/services/apiClients.ts",
          "count": 2,
          "examples": [
            "catch (error) {\n      console.error('Error fetching food data:', error);\n      // Return a minimal valid structure if the API call fails\n      return {\n        fdcId,\n        description: 'Data unavailable',\n        foodNutrients: []\n      }",
            "catch (error) {\n      console.error('Error searching foods:', error);\n      return [];\n    }"
          ]
        },
        {
          "file": "src/services/astrologizeApi.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n    console.error('Astrologize API test failed:', error);\n    return false;\n  }"
          ]
        },
        {
          "file": "src/services/astrologyApi.ts",
          "count": 5,
          "examples": [
            "catch (error) {\n        console.error('Error fetching celestial positions:', error);\n        return getFallbackPositions();\n    }",
            "catch (error) {\n        console.error('Error calculating positions for date:', error);\n        return getFallbackPositions(date);\n    }",
            "catch (error) {\n        console.error('Error calling AstrologicalService:', error);\n        return getFallbackPositions();\n    }"
          ]
        },
        {
          "file": "src/services/celestialCalculations.ts",
          "count": 5,
          "examples": [
            "catch (error) {\n        // Fallback to default positions if we can't calculate them\n        planetaryPositions = {\n          'sun': { sign: zodiacSign.toLowerCase(), degree: 15 }",
            "catch (error) {\n      logger.error('Error calculating celestial influences', error);\n      \n      // Return fallback alignment to avoid breaking the application\n      return this.getFallbackAlignment();\n    }",
            "catch (error) {\n      // If all else fails, default to Cancer (traditionally ruled by the Moon)\n      return 'cancer';\n    }"
          ]
        },
        {
          "file": "src/services/errorHandler.ts",
          "count": 4,
          "examples": [
            "catch (error) {\n      this.log(error, { context }",
            "catch (error) {\n      this.log(error, { context }",
            "catch (error) {\n    handlePropertyAccessError(error, properties.join('.'), context);\n    return defaultValue;\n  }"
          ]
        },
        {
          "file": "src/services/examples/UnifiedScoringExample.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n      console.error('Error in comprehensive example:', error);\n    }"
          ]
        },
        {
          "file": "src/services/initializationService.ts",
          "count": 4,
          "examples": [
            "catch (error) {\n      errorHandler.handleError(error, {\n        context: 'InitializationService',\n        action: 'initialize',\n        attempt: this.retryCount + 1\n      }",
            "catch (error) {\n      logger.error('Failed to initialize recipes:', error)\n      throw error\n    }",
            "catch (error) {\n      logger.warn('Failed to load user state, using defaults:', error)\n      return { recipes: { favorites: [] }"
          ]
        },
        {
          "file": "src/services/recipeData.ts",
          "count": 7,
          "examples": [
            "catch (error) {\n      logger.error('Error loading recipes:', error)\n      // Initialize with an empty array to prevent further errors\n      this.recipes = []\n      this.initialized = true\n    }",
            "catch (error) {\n      errorHandler.handleError(error, {\n        context: 'RecipeData',\n        action: 'getAllRecipes'\n      }",
            "catch (error) {\n      errorHandler.handleError(error, {\n        context: 'RecipeData',\n        action: 'getRecipeByCuisine',\n        cuisine\n      }"
          ]
        },
        {
          "file": "src/services/recipeRecommendations.ts",
          "count": 3,
          "examples": [
            "catch (error) {\n      logger.error('Error recommending recipes:', error);\n      return [this.getFallbackRecipe()];\n    }",
            "catch (error) {\n      logger.error('Error calculating recipe score:', error);\n      return 0;\n    }",
            "catch (error) {\n      logger.error('Failed to fetch Spoonacular recommendations:', error);\n      return [];\n    }"
          ]
        },
        {
          "file": "src/services/tarotService.ts",
          "count": 2,
          "examples": [
            "catch (error) {\n        console.error('Error fetching tarot card:', error);\n        return null;\n    }",
            "catch (error) {\n        console.error('Error fetching random tarot card:', error);\n        return null;\n    }"
          ]
        },
        {
          "file": "src/services/unifiedNutritionalService.ts",
          "count": 9,
          "examples": [
            "catch (error) {\n      logger.error('Error getting enhanced nutritional profile:', error);\n      return null;\n    }",
            "catch (error) {\n      logger.error('Error analyzing nutritional compatibility:', error);\n      return {\n        kalchmHarmony: 0,seasonalAlignment: 0,\n        planetaryResonance: 0,\n        overallCompatibility: 0,\n        recommendations: ['Error analyzing compatibility']\n      }",
            "catch (error) {\n      logger.error('Error getting nutritional recommendations:', error);\n      return {\n        ingredients: [],\n        nutritionalProfiles: [],\n        cookingMethods: [],\n        seasonalOptimization: 0,\n        kalchmHarmony: 0,\n        monicaOptimization: 0,\n        healthBenefits: [],\n        warnings: ['Error generating recommendations']\n      }"
          ]
        },
        {
          "file": "src/test-expanded-alchemical-engine.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n    console.error('❌ Test failed:', error);\n    console.error('Stack trace:', error instanceof Error ? error.stack : 'No stack trace available');\n  }"
          ]
        },
        {
          "file": "src/test-streamlined-system.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n    console.error('❌ Error in streamlined system test:', error);\n  }"
          ]
        },
        {
          "file": "src/utils/ElementalCalculator.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n        // Ignore errors from importing cuisine profiles\n      }"
          ]
        },
        {
          "file": "src/utils/accurateAstronomy.ts",
          "count": 4,
          "examples": [
            "catch (error) {\n    debugLog('Error calculating lunar nodes:', error instanceof Error ? error.message : String(error));\n    // Return current position for March 2024 (late pisces)\n    return { northNode: 356.54, isRetrograde: true }",
            "catch (error) {\n        debugLog(`Error calculating position for ${planet}",
            "catch (error) {\n    debugLog('Error calculating planetary positions:', error instanceof Error ? error.message : String(error));\n    // Fall back to approximate calculations\n    return getFallbackPlanetaryPositions(date);\n  }"
          ]
        },
        {
          "file": "src/utils/alchemicalPillarUtils.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n    logger.error(\"Error loading cooking method data:\", error);\n    return {}"
          ]
        },
        {
          "file": "src/utils/alchemyInitializer.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n    console.error(\"Failed to initialize alchemize function:\", error);\n  }"
          ]
        },
        {
          "file": "src/utils/apiCircuitBreaker.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n      this.onFailure();\n      \n      if (fallback) {\n        return fallback();\n      }"
          ]
        },
        {
          "file": "src/utils/astrology/core.ts",
          "count": 6,
          "examples": [
            "catch (error) {\n    errorLog('Error calculating active planets', error);\n  }",
            "catch (error) {\n    errorLog('Error in calculateLunarPhase:', error instanceof Error ? error.message : String(error));\n    return 0; // Default to new Moon\n  }",
            "catch (error) {\n    errorLog('Error in getmoonIllumination:', error instanceof Error ? error.message : String(error));\n    return 0.5; // Default to 50% illumination\n  }"
          ]
        },
        {
          "file": "src/utils/astrology/positions.ts",
          "count": 5,
          "examples": [
            "catch (error) {\n    debugLog('Error calculating lunar nodes:', error instanceof Error ? error.message : String(error));\n    // Return current position for March 2024 (late pisces)\n    return { NorthNode: 356.54, isRetrograde: true }",
            "catch (error) {\n        debugLog(`Error calculating position for ${planet}",
            "catch (error) {\n      debugLog('Error calculating lunar nodes:', error instanceof Error ? error.message : String(error));\n    }"
          ]
        },
        {
          "file": "src/utils/astrology/validation.ts",
          "count": 4,
          "examples": [
            "catch (error) {\n    errorLog('Error in safe calculateLunarPhase:', error instanceof Error ? error.message : String(error));\n    return 0; // Default to new Moon\n  }",
            "catch (error) {\n    errorLog('Error in safe getmoonIllumination:', error instanceof Error ? error.message : String(error));\n    return 0.5; // Default to 50%\n  }",
            "catch (error) {\n    errorLog('Error in getCurrentAstrologicalState:', error instanceof Error ? error.message : String(error));\n    \n    // Fallback default state\n    return {\n      sunSign: 'aries',\n      moonSign: 'cancer',\n      lunarPhase: 'new moon',\n      activePlanets: ['Sun', 'Moon', 'Jupiter'],\n      dominantElement: 'Fire',\n      loading: false,\n    }"
          ]
        },
        {
          "file": "src/utils/astrologyDataProvider.ts",
          "count": 2,
          "examples": [
            "catch (error) {\n    logger.warn('Error fetching from API:', error);\n    return null;\n  }",
            "catch (error) {\n    logger.warn('Error reading transit files:', error);\n    return null;\n  }"
          ]
        },
        {
          "file": "src/utils/astrologyUtils.ts",
          "count": 22,
          "examples": [
            "catch (error) {\n    errorLog('Error in calculateLunarPhase:', error instanceof Error ? error.message : String(error));\n    return 0; // Default to new moon\n  }",
            "catch (error) {\n    errorLog('Error calculating moon illumination:', error);\n    \n    // Fallback calculation using lunar phase\n    try {\n      const phase = await calculateLunarPhase(date);\n      const phaseName = getLunarPhaseName(phase);\n      \n      // Approximate illumination based on phase name\n      switch (phaseName) {\n        case 'new moon': return 0;\n        case 'waxing crescent': return 25;\n        case 'first quarter': return 50;\n        case 'waxing gibbous': return 75;\n        case 'full moon': return 100;\n        case 'waning gibbous': return 75;\n        case 'last quarter': return 50;\n        case 'waning crescent': return 25;\n        default: return 50;\n      }",
            "catch (_fallbackError) {\n      errorLog('Fallback moon illumination calculation failed');\n      return 50; // Default to half-illuminated\n    }"
          ]
        },
        {
          "file": "src/utils/astrologyValidation.ts",
          "count": 2,
          "examples": [
            "catch (error) {\n    console.error(\"Error validating planetary positions:\", error);\n    return {\n      accurate: false,\n      differences: { error: String(error) }",
            "catch (error) {\n    console.error('Error fetching latest positions:', error);\n    return {}"
          ]
        },
        {
          "file": "src/utils/astronomiaCalculator.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n    console.error('Error calculating planetary positions:', error);\n    \n    // If anything fails, just return the current positions\n    return { ...CURRENT_POSITIONS }"
          ]
        },
        {
          "file": "src/utils/calculationCache.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n    console.error(`Error in cached calculation ${cacheKey}"
          ]
        },
        {
          "file": "src/utils/chromeApiInitializer.ts",
          "count": 2,
          "examples": [
            "catch (e) {\n              console.warn('[ChromeAPI] Error opening URL:', e);\n            }",
            "catch (error) {\n    console.warn('[ChromeAPI] Error initializing Chrome APIs:', error);\n  }"
          ]
        },
        {
          "file": "src/utils/common/index.ts",
          "count": 4,
          "examples": [
            "catch (error) {\n      logger.error('Error initializing theme:', error);\n      this.updateTheme('light');\n      return 'light';\n    }",
            "catch (error) {\n      logger.error('Error getting theme:', error);\n      return { mode: 'light', accent: 'blue' }",
            "catch (error) {\n    console.error('Invalid environment variables:', error);\n    process.exit(1);\n  }"
          ]
        },
        {
          "file": "src/utils/cookingMethodTips.ts",
          "count": 3,
          "examples": [
            "catch (error) {\n        // Fallback if import fails\n        tips.push(`Maintain appropriate temperature control for ${methodName}",
            "catch (error) {\n        return `${methodName}",
            "catch (error) {\n        // Generic fallback if import fails\n        ingredients.push(\"Ingredients traditionally used with this method\");\n        ingredients.push(\"Foods that benefit from this method's properties\");\n        ingredients.push(\"Items with complementary flavors and textures\");\n        ingredients.push(\"Local, seasonal produce\");\n        ingredients.push(\"Proteins suited to this cooking technique\");\n      }"
          ]
        },
        {
          "file": "src/utils/cssModuleResolver.js",
          "count": 1,
          "examples": [
            "catch (e) {\n    console.warn(`CSS Module not found: ${modulePath}"
          ]
        },
        {
          "file": "src/utils/data/processing.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n      result.errors++;\n      result.warnings?.push(`Ingredient ${index}"
          ]
        },
        {
          "file": "src/utils/databaseCleanup.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n    logger.error('Error during database cleanup:', error);\n    return { success: false, error }"
          ]
        },
        {
          "file": "src/utils/dateUtils.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n    console.error(`Error getting recommendations for ${cuisineId}"
          ]
        },
        {
          "file": "src/utils/dynamicImport.ts",
          "count": 7,
          "examples": [
            "catch (error) {\n    errorLog(`Import and execute failed for ${functionName}",
            "catch (error) {\n    errorLog(`Import failed for ${functionName}",
            "catch (error) {\n    errorLog('Failed to import astronomia:', error);\n    return null;\n  }"
          ]
        },
        {
          "file": "src/utils/env.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n    console.error('Invalid environment variables:', error);\n    process.exit(1);\n  }"
          ]
        },
        {
          "file": "src/utils/ephemerisParser.ts",
          "count": 2,
          "examples": [
            "catch (error) {\n      console.warn(`Could not parse position string: ${posStr}",
            "catch (error) {\n        console.warn(`Error parsing line ${index + 1}"
          ]
        },
        {
          "file": "src/utils/feedback.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n    logger.error('Error processing feedback', error);\n    return {\n      success: false,\n      message: 'Failed to process feedback. Please try again later.'\n    }"
          ]
        },
        {
          "file": "src/utils/fixAssignmentError.js",
          "count": 2,
          "examples": [
            "catch (error) {\n    console.error('[safeAlchemize] Error:', error);\n    return {\n      sunSign: 'aries',\n      dominantElement: 'Fire',\n      elementalBalance: {\n        Fire: 0.25,\n        Water: 0.25,\n        Earth: 0.25,\n        Air: 0.25\n      }",
            "catch (e) {\n      console.error(`[FixAssignmentError] Error patching ${objName}"
          ]
        },
        {
          "file": "src/utils/foodRecommenderFix.js",
          "count": 2,
          "examples": [
            "catch (e) {\n        console.error('[FoodRecommenderFix] Error in safeAlchemize:', e);\n        return {\n          'Sun Sign': 'Aries',\n          'Dominant Element': 'Fire', \n          'Total Effect Value': {\n            'Fire': 1,\n            'Water': 1,\n            'Air': 1,\n            'Earth': 1\n          }",
            "catch (e) {\n        console.error('[FoodRecommenderFix] Error in getBalancedRecommendations:', e);\n        // Return empty but valid result\n        return {}"
          ]
        },
        {
          "file": "src/utils/globalInitializer.js",
          "count": 3,
          "examples": [
            "catch (error) {\n        console.error('[SafeElemental] getElementRanking error:', error);\n        return { 1: 'Fire', 2: 'Water', 3: 'Earth', 4: 'Air' }",
            "catch (error) {\n        console.error('[SafeElemental] combineElementObjects error:', error);\n        return { 'Fire': 0, 'Water': 0, 'Air': 0, 'Earth': 0 }",
            "catch (error) {\n        console.error('[SafeElemental] getAbsoluteElementValue error:', error);\n        return 0;\n      }"
          ]
        },
        {
          "file": "src/utils/ingredientDataNormalizer.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n    // console.warn(`Error accessing nutritional field ${field}"
          ]
        },
        {
          "file": "src/utils/lockdown-mitigation.js",
          "count": 2,
          "examples": [
            "catch (e) {\n            // Fall back to direct assignment if defineProperty fails\n            window[obj.name] = obj.fallback;\n          }",
            "catch (e) {\n    console.error('[LockdownMitigation] Error installing mitigations:', e);\n  }"
          ]
        },
        {
          "file": "src/utils/moonTimes.ts",
          "count": 3,
          "examples": [
            "catch (error) {\n    console.error('Error calculating moon times:', error);\n    \n    // Return empty object if calculation fails\n    return {}",
            "catch (error) {\n    console.error('Error calculating moon illumination:', error);\n    return 0.5; // Default to half moon\n  }",
            "catch (error) {\n    console.error('Error calculating moon position:', error);\n    return { altitude: 0, azimuth: 0 }"
          ]
        },
        {
          "file": "src/utils/patchAlchemicalEngine.js",
          "count": 2,
          "examples": [
            "catch (error) {\n        console.warn('[PatchAlchemicalEngine] Error in getElementRanking:', error);\n        // Provide a safe fallback\n        return {1: 'Fire', 2: '', 3: '', 4: ''}",
            "catch (error) {\n    console.error('[PatchAlchemicalEngine] Failed to apply patches:', error);\n  }"
          ]
        },
        {
          "file": "src/utils/patchGlobalElementRanking.js",
          "count": 3,
          "examples": [
            "catch (error) {\n      console.error('[ElementRankingPatch] Safely handled error in getElementRanking:', error);\n      return { 1: 'Fire', 2: 'Water', 3: 'Earth', 4: 'Air' }",
            "catch (error) {\n      console.error('[ElementRankingPatch] Safely handled error in alchemize:', error);\n      return {\n        'Dominant Element': 'Fire',\n        'Total Effect Value': { 'Fire': 32, 'Water': 28, 'Earth': 18, 'Air': 22 }",
            "catch (error) {\n          console.error(`[ElementRankingPatch] Safely handled error in ${functionName}"
          ]
        },
        {
          "file": "src/utils/performance.ts",
          "count": 2,
          "examples": [
            "catch (error) {\n    logger.error('Failed to apply performance optimizations', error);\n    return { \n      success: false, \n      optimizations: appliedOptimizations \n    }",
            "catch (error) {\n    logger.error('Error collecting performance metrics', error);\n    return metrics;\n  }"
          ]
        },
        {
          "file": "src/utils/planetCalculations.ts",
          "count": 2,
          "examples": [
            "catch (error) {\n    // If that fails, fall back to the simplified calculation\n    try {\n      const lunarNodes = astrologyUtils.calculateLunarNodes(date);\n      northNode = (lunarNodes as any)?.northNode;\n      southNode = (lunarNodes as any)?.southNode;\n    }",
            "catch (fallbackError) {\n      // Ultimate fallback with hardcoded values (current positions as of 2024)\n      northNode = {\n        sign: 'aries',\n        degree: 27,\n        exactLongitude: 27,\n        isRetrograde: true\n      }"
          ]
        },
        {
          "file": "src/utils/planetInfoPatcher.js",
          "count": 1,
          "examples": [
            "catch (e) {\n      console.error('[PlanetInfoPatcher] Error applying patches:', e);\n    }"
          ]
        },
        {
          "file": "src/utils/planetInfoUtils.ts",
          "count": 3,
          "examples": [
            "catch (error) {\n        console.error(`Error getting dignity for ${normalizedPlanetName}",
            "catch (error) {\n      console.error(`Error calculating aspects for ${planetName}",
            "catch (error) {\n    console.error('Error in getPlanetInfo:', error);\n    return null;\n  }"
          ]
        },
        {
          "file": "src/utils/recipe/recipeCore.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n    logger.error(`Error scoring ${recipe.name}"
          ]
        },
        {
          "file": "src/utils/recipe/recipeFiltering.ts",
          "count": 7,
          "examples": [
            "catch (error) {\n      logger.error('Error filtering recipes:', error);\n      return this.getFallbackRecipes(recipes);\n    }",
            "catch (error) {\n        logger.error('Error filtering recipe:', { recipe, error }",
            "catch (error) {\n        logger.error('Error applying enhanced filters:', { recipe, error }"
          ]
        },
        {
          "file": "src/utils/recipe/recipeMatching.ts",
          "count": 2,
          "examples": [
            "catch (error) {\n    console.warn('Kalchm calculation failed:', error);\n  }",
            "catch (error) {\n      return []; // Return empty array if we can't fetch recipes\n    }"
          ]
        },
        {
          "file": "src/utils/recipeFilters.ts",
          "count": 11,
          "examples": [
            "catch (error) {\n      logger.error('Error filtering recipes:', error);\n      return this.getFallbackRecipes(recipes);\n    }",
            "catch (error) {\n        logger.error('Error filtering recipe:', { recipe, error }",
            "catch (error) {\n        logger.error('Error scoring recipe:', { recipe, error }"
          ]
        },
        {
          "file": "src/utils/recipeMatching.ts",
          "count": 4,
          "examples": [
            "catch (error) {\n      // console.error('Error fetching recipes from LocalRecipeService:', error);\n      return []; // Return empty array if we can't fetch recipes\n    }",
            "catch (e) {\n      // console.debug('localStorage not available:', e);\n    }",
            "catch (e) {\n      // console.error('Error parsing ingredient mapping cache:', e);\n    }"
          ]
        },
        {
          "file": "src/utils/recommendation/ingredientRecommendation.ts",
          "count": 16,
          "examples": [
            "catch (error) {\n      console.error('Error loading vegetables:', error);\n    }",
            "catch (error) {\n      console.error('Error loading fruits:', error);\n    }",
            "catch (error) {\n      console.error('Error loading herbs:', error);\n    }"
          ]
        },
        {
          "file": "src/utils/recommendation/methodRecommendation.ts",
          "count": 2,
          "examples": [
            "catch (error) {\n    console.error('Error in getHolisticCookingRecommendations:', error);\n    // Return empty array as fallback\n    return [];\n  }",
            "catch (error) {\n    console.error('Error in getRecommendedCookingMethodsForIngredient:', error);\n    // Return empty array as fallback\n    return [];\n  }"
          ]
        },
        {
          "file": "src/utils/reliableAstronomy.ts",
          "count": 13,
          "examples": [
            "catch (error) {\n      logger.error('Error fetching from NASA JPL Horizons:', error);\n      // Continue to secondary API\n    }",
            "catch (error) {\n      logger.error('Error fetching from public API:', error);\n      // Continue to third API\n    }",
            "catch (error) {\n        logger.error('Error fetching from TimeAndDate.com API:', error);\n        // Continue to fallback\n      }"
          ]
        },
        {
          "file": "src/utils/safeAccess.ts",
          "count": 2,
          "examples": [
            "catch (error) {\n    logger.warn('Error in safeGet', { path, error }",
            "catch (error) {\n    if (logError) {\n      logger.warn('Error in safeExecute', { error }"
          ]
        },
        {
          "file": "src/utils/safePopupImplementation.js",
          "count": 1,
          "examples": [
            "catch (error) {\n        console.warn('[SafePopupImpl] Original popup.create failed, using fallback:', error);\n        return standalonePopup.create.apply(standalonePopup, arguments);\n      }"
          ]
        },
        {
          "file": "src/utils/security.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n    logger.error('Failed to initialize security enhancements', error);\n    return false;\n  }"
          ]
        },
        {
          "file": "src/utils/solarPositions.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n    console.error('Error calculating sun position:', error);\n    return {\n      azimuth: 0,\n      altitude: 0,\n      declination: 0,\n      rightAscension: 0\n    }"
          ]
        },
        {
          "file": "src/utils/stateManager.ts",
          "count": 4,
          "examples": [
            "catch (error) {\n      logger.error('Error loading state:', error);\n      return this.getDefaultState();\n    }",
            "catch (error) {\n      console.error('Error initializing state:', error);\n    }",
            "catch (error) {\n      logger.error('Error updating celestial data:', error);\n    }"
          ]
        },
        {
          "file": "src/utils/stateValidator.ts",
          "count": 2,
          "examples": [
            "catch (error) {\n      errorHandler.handleError(error, {\n        context: 'StateValidator',\n        action: 'validateState',\n        state: JSON.stringify(state)\n      }",
            "catch (error) {\n      errorHandler.handleError(error, {\n        context: 'StateValidator',\n        action: 'validateRecipe',\n        recipe: JSON.stringify(recipe)\n      }"
          ]
        },
        {
          "file": "src/utils/streamlinedPlanetaryPositions.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n      logger.warn(`Error validating transit for ${planetName}"
          ]
        },
        {
          "file": "src/utils/sunTimes.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n    console.error('Error calculating sun times:', error);\n    return {\n      sunrise: null,\n      sunset: null,\n      solarNoon: null,\n      goldenHour: null,\n      goldenHourEnd: null,\n      dawn: null,\n      dusk: null,\n      nauticalDawn: null,\n      nauticalDusk: null,\n      nightEnd: null,\n      night: null,\n      nadir: null\n    }"
          ]
        },
        {
          "file": "src/utils/testRecommendations.ts",
          "count": 2,
          "examples": [
            "catch (error) {\n    console.error('ERROR GETTING HOLISTIC RECOMMENDATIONS:', error);\n    if (error instanceof Error && error.stack) {\n      console.error(error.stack);\n    }",
            "catch (error) {\n    console.error('ERROR GETTING RECOMMENDATIONS:', error);\n    if (error instanceof Error && error.stack) {\n      console.error(error.stack);\n    }"
          ]
        },
        {
          "file": "src/utils/theme.ts",
          "count": 2,
          "examples": [
            "catch (error) {\n      logger.error('Error initializing theme:', error);\n      this.updateTheme('light');\n      return 'light';\n    }",
            "catch (error) {\n      logger.error('Error getting theme:', error);\n      return { mode: 'light', accent: 'blue' }"
          ]
        },
        {
          "file": "src/utils/themeScript.ts",
          "count": 1,
          "examples": [
            "catch (e) {\n      document.documentElement.setAttribute('data-theme', 'light');\n    }"
          ]
        },
        {
          "file": "src/utils/validation.ts",
          "count": 1,
          "examples": [
            "catch (error) {\n    logUnexpectedValue('validateOrDefault', { value, error }"
          ]
        }
      ],
      "totalUsage": 804,
      "fileCount": 250
    },
    "nullishCoalescing": {
      "description": "Nullish coalescing operator usage",
      "instances": [
        {
          "file": "src/app/test/migrated-components/cuisine-section/page.tsx",
          "count": 12,
          "examples": [
            "??",
            "??",
            "??"
          ]
        },
        {
          "file": "src/components/CuisineRecommender.tsx",
          "count": 3,
          "examples": [
            "??",
            "??",
            "??"
          ]
        },
        {
          "file": "src/components/Header/FoodRecommender/components/Cuisinegroup.tsx",
          "count": 7,
          "examples": [
            "??",
            "??",
            "??"
          ]
        },
        {
          "file": "src/components/IngredientDisplay.tsx",
          "count": 1,
          "examples": [
            "??"
          ]
        },
        {
          "file": "src/components/MoonDisplay.migrated.tsx",
          "count": 6,
          "examples": [
            "??",
            "??",
            "??"
          ]
        },
        {
          "file": "src/components/MoonDisplay.tsx",
          "count": 6,
          "examples": [
            "??",
            "??",
            "??"
          ]
        },
        {
          "file": "src/components/debug/CuisineRecommenderDebug.tsx",
          "count": 3,
          "examples": [
            "??",
            "??",
            "??"
          ]
        },
        {
          "file": "src/components/recommendations/AlchemicalRecommendations.tsx",
          "count": 1,
          "examples": [
            "??"
          ]
        },
        {
          "file": "src/components/recommendations/CuisineRecommender.tsx",
          "count": 3,
          "examples": [
            "??",
            "??",
            "??"
          ]
        },
        {
          "file": "src/data/cuisines.ts",
          "count": 2,
          "examples": [
            "??",
            "??"
          ]
        },
        {
          "file": "src/data/unified/data/cuisines.js",
          "count": 2,
          "examples": [
            "??",
            "??"
          ]
        },
        {
          "file": "src/data/unified/flavorProfiles.ts",
          "count": 6,
          "examples": [
            "??",
            "??",
            "??"
          ]
        },
        {
          "file": "src/data/unified/ingredients.ts",
          "count": 4,
          "examples": [
            "??",
            "??",
            "??"
          ]
        },
        {
          "file": "src/data/unified/utils/elemental/elementalUtils.js",
          "count": 17,
          "examples": [
            "??",
            "??",
            "??"
          ]
        },
        {
          "file": "src/data/unified/utils/elementalUtils.js",
          "count": 6,
          "examples": [
            "??",
            "??",
            "??"
          ]
        },
        {
          "file": "src/hooks/useRealtimePlanetaryPositions.ts",
          "count": 2,
          "examples": [
            "??",
            "??"
          ]
        },
        {
          "file": "src/services/ConsolidatedIngredientService.ts",
          "count": 5,
          "examples": [
            "??",
            "??",
            "??"
          ]
        },
        {
          "file": "src/services/RecipeFinder.ts",
          "count": 1,
          "examples": [
            "??"
          ]
        },
        {
          "file": "src/services/RecommendationAdapter.ts",
          "count": 3,
          "examples": [
            "??",
            "??",
            "??"
          ]
        },
        {
          "file": "src/services/UnifiedIngredientService.ts",
          "count": 1,
          "examples": [
            "??"
          ]
        },
        {
          "file": "src/services/astrologizeApi.ts",
          "count": 2,
          "examples": [
            "??",
            "??"
          ]
        },
        {
          "file": "src/services/initializationService.ts",
          "count": 1,
          "examples": [
            "??"
          ]
        },
        {
          "file": "src/services/recipeData.ts",
          "count": 4,
          "examples": [
            "??",
            "??",
            "??"
          ]
        },
        {
          "file": "src/utils/cookingMethodRecommender.ts",
          "count": 8,
          "examples": [
            "??",
            "??",
            "??"
          ]
        },
        {
          "file": "src/utils/dataStandardization.js",
          "count": 24,
          "examples": [
            "??",
            "??",
            "??"
          ]
        },
        {
          "file": "src/utils/databaseCleanup.ts",
          "count": 1,
          "examples": [
            "??"
          ]
        },
        {
          "file": "src/utils/elemental/elementalUtils.ts",
          "count": 17,
          "examples": [
            "??",
            "??",
            "??"
          ]
        },
        {
          "file": "src/utils/elementalUtils.ts",
          "count": 10,
          "examples": [
            "??",
            "??",
            "??"
          ]
        },
        {
          "file": "src/utils/recipe/recipeCore.ts",
          "count": 7,
          "examples": [
            "??",
            "??",
            "??"
          ]
        },
        {
          "file": "src/utils/recipe/recipeMatching.ts",
          "count": 4,
          "examples": [
            "??",
            "??",
            "??"
          ]
        },
        {
          "file": "src/utils/recommendation/methodRecommendation.ts",
          "count": 8,
          "examples": [
            "??",
            "??",
            "??"
          ]
        }
      ],
      "totalUsage": 177,
      "fileCount": 31
    },
    "safeAssertions": {
      "description": "Safe type assertions",
      "instances": [
        {
          "file": "src/components/CookingMethods.tsx",
          "count": 1,
          "examples": [
            "as Record<string, unknown>"
          ]
        },
        {
          "file": "src/components/TarotFoodDisplay.tsx",
          "count": 2,
          "examples": [
            "as Record<string, unknown>",
            "as Record<string, unknown>"
          ]
        },
        {
          "file": "src/context/CurrentChartContext.tsx",
          "count": 1,
          "examples": [
            "as Record<string, unknown>"
          ]
        },
        {
          "file": "src/contexts/AlchemicalContext/provider.tsx",
          "count": 3,
          "examples": [
            "as Record<string, unknown>",
            "as Record<string, unknown>",
            "as Record<string, unknown>"
          ]
        },
        {
          "file": "src/data/integrations/medicinalCrossReference.ts",
          "count": 1,
          "examples": [
            "as Record<string, unknown>"
          ]
        },
        {
          "file": "src/data/recipes.ts",
          "count": 2,
          "examples": [
            "as Record<string, unknown>",
            "as Record<string, unknown>"
          ]
        },
        {
          "file": "src/data/unified/cuisines.ts",
          "count": 4,
          "examples": [
            "as Record<string, unknown>",
            "as Record<string, unknown>",
            "as Record<string, unknown>"
          ]
        },
        {
          "file": "src/hooks/useCurrentChart.ts",
          "count": 1,
          "examples": [
            "as Record<string, unknown>"
          ]
        },
        {
          "file": "src/services/RecommendationAdapter.ts",
          "count": 1,
          "examples": [
            "as Record<string, unknown>"
          ]
        },
        {
          "file": "src/services/astrologyApi.ts",
          "count": 1,
          "examples": [
            "as Record<string, unknown>"
          ]
        },
        {
          "file": "src/services/errorHandler.ts",
          "count": 1,
          "examples": [
            "as Record<string, unknown>"
          ]
        },
        {
          "file": "src/types/ExtendedRecipe.ts",
          "count": 1,
          "examples": [
            "as Record<string, unknown>"
          ]
        },
        {
          "file": "src/utils/alchemicalPillarUtils.ts",
          "count": 1,
          "examples": [
            "as Record<string, unknown>"
          ]
        },
        {
          "file": "src/utils/astrologyUtils.ts",
          "count": 2,
          "examples": [
            "as Record<string, unknown>",
            "as Record<string, unknown>"
          ]
        },
        {
          "file": "src/utils/ingredientDataNormalizer.ts",
          "count": 18,
          "examples": [
            "as Record<string, unknown>",
            "as Record<string, unknown>",
            "as Record<string, unknown>"
          ]
        },
        {
          "file": "src/utils/safeAccess.ts",
          "count": 1,
          "examples": [
            "as Record<string, unknown>"
          ]
        },
        {
          "file": "src/utils/typeGuards.ts",
          "count": 1,
          "examples": [
            "as Record<string, unknown>"
          ]
        }
      ],
      "totalUsage": 42,
      "fileCount": 17
    }
  },
  "methodologyPatterns": {
    "phaseApproach": {
      "description": "Systematic phase-based approach",
      "instances": [
        {
          "file": "docs/NEXT_SESSION_CONTINUATION_PROMPT.md",
          "keywords": [
            "Phase",
            "Campaign",
            "systematic"
          ],
          "relevance": 0.75
        },
        {
          "file": "docs/TYPESCRIPT_ANY_TYPE_CAMPAIGN_SUMMARY.md",
          "keywords": [
            "Phase",
            "Stage",
            "Campaign",
            "systematic"
          ],
          "relevance": 1
        },
        {
          "file": "docs/implementation/TYPESCRIPT_PHASES_TRACKER.ipynb",
          "keywords": [
            "Phase",
            "Campaign",
            "systematic"
          ],
          "relevance": 0.75
        }
      ],
      "coverage": 1,
      "strength": 0.8333333333333334
    },
    "safetyProtocols": {
      "description": "Safety-first protocols",
      "instances": [
        {
          "file": "docs/NEXT_SESSION_CONTINUATION_PROMPT.md",
          "keywords": [
            "safety",
            "rollback",
            "stash",
            "validation",
            "corruption"
          ],
          "relevance": 1
        },
        {
          "file": "docs/TYPESCRIPT_ANY_TYPE_CAMPAIGN_SUMMARY.md",
          "keywords": [
            "safety",
            "rollback",
            "stash",
            "validation",
            "corruption"
          ],
          "relevance": 1
        },
        {
          "file": "docs/implementation/TYPESCRIPT_PHASES_TRACKER.ipynb",
          "keywords": [
            "safety",
            "rollback",
            "validation",
            "corruption"
          ],
          "relevance": 0.8
        }
      ],
      "coverage": 1,
      "strength": 0.9333333333333332
    },
    "buildValidation": {
      "description": "Continuous build validation",
      "instances": [
        {
          "file": "docs/NEXT_SESSION_CONTINUATION_PROMPT.md",
          "keywords": [
            "build",
            "validate",
            "success"
          ],
          "relevance": 0.75
        },
        {
          "file": "docs/TYPESCRIPT_ANY_TYPE_CAMPAIGN_SUMMARY.md",
          "keywords": [
            "build",
            "validate",
            "success"
          ],
          "relevance": 0.75
        },
        {
          "file": "docs/implementation/TYPESCRIPT_PHASES_TRACKER.ipynb",
          "keywords": [
            "build",
            "validate",
            "compile",
            "success"
          ],
          "relevance": 1
        }
      ],
      "coverage": 1,
      "strength": 0.8333333333333334
    },
    "patternLibrary": {
      "description": "Pattern library development",
      "instances": [
        {
          "file": "docs/NEXT_SESSION_CONTINUATION_PROMPT.md",
          "keywords": [
            "pattern"
          ],
          "relevance": 0.3333333333333333
        },
        {
          "file": "docs/TYPESCRIPT_ANY_TYPE_CAMPAIGN_SUMMARY.md",
          "keywords": [
            "pattern",
            "Extended Interface",
            "Record<string, unknown>"
          ],
          "relevance": 1
        },
        {
          "file": "docs/implementation/TYPESCRIPT_PHASES_TRACKER.ipynb",
          "keywords": [
            "pattern",
            "Extended Interface",
            "Record<string, unknown>"
          ],
          "relevance": 1
        }
      ],
      "coverage": 1,
      "strength": 0.7777777777777777
    }
  },
  "innovativePatterns": {
    "unique": [
      {
        "name": "Extended Interface with Flexible Properties",
        "innovation": "Combines inheritance with flexible property access",
        "instances": [
          {
            "file": "src/types/ExtendedRecipe.ts",
            "matches": 1,
            "examples": [
              "interface ExtendedRecipeIngredient extends RecipeIngredient {\n  id?: string;\n  preparation?: string;"
            ]
          }
        ],
        "totalUsage": 1,
        "reusabilityScore": 0,
        "scalabilityScore": 0.01
      }
    ],
    "reusable": [],
    "scalable": []
  },
  "recommendations": [
    {
      "category": "pattern-scaling",
      "priority": "high",
      "title": "Scale Extended Interface Pattern",
      "description": "Only 7 Extended Interfaces found, but pattern shows high effectiveness",
      "suggestion": "Systematically apply Extended Interface pattern to remaining 385 any-type instances",
      "impact": "High - Could eliminate remaining any-type warnings systematically"
    },
    {
      "category": "pattern-optimization",
      "priority": "medium",
      "title": "Safety Pattern Optimization",
      "description": "Excellent safety pattern usage (6437 instances)",
      "suggestion": "Create automated pattern application tools to maintain consistency",
      "impact": "Medium - Improved development velocity and consistency"
    },
    {
      "category": "knowledge-transfer",
      "priority": "high",
      "title": "Methodology Publication",
      "description": "Exceptional methodology strength (84.4%)",
      "suggestion": "Document and publish methodology for community benefit",
      "impact": "High - Industry leadership and team knowledge preservation"
    }
  ]
}