// Add at the top of the file, before imports
declare global {
  interface Window {
    alchemize?: any;
  }
}

'use client';

import React, { createContext, useContext, useReducer, useEffect, useState, useCallback } from 'react';
import type { ElementalProperties } from '@/types/alchemy';
import { calculateSeasonalElements } from '@/calculations/seasonalCalculations';
import { AlchemicalEngine } from '@/calculations/alchemicalEngine';
import { 
  getCurrentAstrologicalState,
  calculateLunarPhase,
  calculateSunSign,
  getZodiacElement,
  getLunarPhaseName,
  calculateLunarNodes
} from '@/utils/astrologyUtils';
import { logger } from '@/utils/logger';
import { initializeAlchemicalEngine, staticAlchemize } from '@/utils/alchemyInitializer';
import { calculateTokenizedValues } from '@/utils/planetaryCycles';
import { logPlanetaryConsistencyCheck } from '@/utils/planetaryConsistencyCheck';
import { calculateBasicPlanetaryPositions } from '@/utils/planetCalculations';
import { safeImportFunction, safeImportAndExecute } from '@/utils/dynamicImport';

// Additional interfaces for alchemical values
interface AlchemicalValues {
  Spirit: number;
  Essence: number;
  Matter: number;
  Substance: number;
}

interface AstrologicalState {
  sunSign: string;
  moonSign: string;
  lunarPhase: string;
  timeOfDay: string;
  isDaytime: boolean;
  planetaryHour: string;
  zodiacSign: string;
  activePlanets: string[];
  activeAspects: any[];
  dominantElement: string;
  alchemicalValues?: AlchemicalValues;
  calculationError: boolean;
}

interface AlchemicalState {
  currentSeason: string;
  timeOfDay: string;
  astrologicalState: AstrologicalState | null;
  currentEnergy: {
    zodiacEnergy: string;
    lunarEnergy: string;
    planetaryEnergy: string | string[];
  };
  elementalPreference: ElementalProperties;
  lunarPhase?: string;
  error: boolean;
  errorMessage: string;
  errors: string[];
}

// Define all planets for complete planetary positions tracking
interface PlanetaryPositionsType {
  sun?: { sign: string; degree: number; exactLongitude?: number; isRetrograde?: boolean };
  moon?: { sign: string; degree: number; exactLongitude?: number; isRetrograde?: boolean };
  mercury?: { sign: string; degree: number; exactLongitude?: number; isRetrograde?: boolean };
  venus?: { sign: string; degree: number; exactLongitude?: number; isRetrograde?: boolean };
  mars?: { sign: string; degree: number; exactLongitude?: number; isRetrograde?: boolean };
  jupiter?: { sign: string; degree: number; exactLongitude?: number; isRetrograde?: boolean };
  saturn?: { sign: string; degree: number; exactLongitude?: number; isRetrograde?: boolean };
  uranus?: { sign: string; degree: number; exactLongitude?: number; isRetrograde?: boolean };
  neptune?: { sign: string; degree: number; exactLongitude?: number; isRetrograde?: boolean };
  pluto?: { sign: string; degree: number; exactLongitude?: number; isRetrograde?: boolean };
  northNode?: { sign: string; degree: number; exactLongitude?: number; isRetrograde?: boolean };
  southNode?: { sign: string; degree: number; exactLongitude?: number; isRetrograde?: boolean };
  [key: string]: any;
}

export interface AlchemicalContextType {
  state: AlchemicalState;
  dispatch: React.Dispatch<any>;
  planetaryPositions: PlanetaryPositionsType;
  isDaytime: boolean;
  updatePlanetaryPositions: (positions: PlanetaryPositionsType) => void;
  refreshPlanetaryPositions: () => void;
  setDaytime: (isDaytime: boolean) => void;
  updateState: (newState: any) => void;
}

const getCurrentSeason = (): string => {
  const month = new Date().getMonth();
  if (month >= 2 && month <= 4) return 'spring';
  if (month >= 5 && month <= 7) return 'summer';
  if (month >= 8 && month <= 10) return 'autumn';
  return 'winter';
};

const getTimeOfDay = (): string => {
  const hour = new Date().getHours();
  if (hour >= 5 && hour < 12) return 'morning';
  if (hour >= 12 && hour < 17) return 'afternoon';
  if (hour >= 17 && hour < 21) return 'evening';
  return 'night';
};

const getDayOfYear = (): number => {
  const now = new Date();
  const start = new Date(now.getFullYear(), 0, 0);
  const diff = now.getTime() - start.getTime();
  return Math.floor(diff / (1000 * 60 * 60 * 24));
};

const calculateInitialBalance = (): ElementalProperties => {
  const season = getCurrentSeason();
  return calculateSeasonalElements({
    Fire: 0.25,
    Water: 0.25,
    Earth: 0.25,
    Air: 0.25
  }, season);
};

const defaultState: AlchemicalState = {
  currentSeason: getCurrentSeason(),
  timeOfDay: getTimeOfDay(),
  astrologicalState: null,
  currentEnergy: {
    zodiacEnergy: '',
    lunarEnergy: '',
    planetaryEnergy: ''
  },
  elementalPreference: {
    Fire: 0.25,
    Water: 0.25, 
    Earth: 0.25,
    Air: 0.25
  },
  error: false,
  errorMessage: '',
  errors: [],
};

const AlchemicalContext = createContext<AlchemicalContextType>({
  state: defaultState,
  dispatch: () => {},
  planetaryPositions: {},
  isDaytime: true,
  updatePlanetaryPositions: () => {},
  refreshPlanetaryPositions: () => {},
  setDaytime: () => {},
  updateState: () => {}
});

const AlchemicalProvider: React.FC<{children: React.ReactNode}> = ({ children }) => {
  const [state, dispatch] = useReducer(alchemicalReducer, defaultState);
  const [planetaryPositions, setPlanetaryPositions] = useState<PlanetaryPositionsType>({});
  const [isDaytime, setIsDaytime] = useState(true);

  const updatePlanetaryPositions = useCallback((positions: PlanetaryPositionsType) => {
    console.log('Updating planetary positions:', positions);
    setPlanetaryPositions(positions);
  }, []);

  const refreshPlanetaryPositions = useCallback(async () => {
    try {
      const positions = await safeImportAndExecute<Record<string, any>>(
        '@/utils/accurateAstronomy', 
        'getAccuratePlanetaryPositions', 
        [new Date()]
      );

      // Validate core structure
      if (!positions || typeof positions !== 'object') {
        throw new Error('Invalid planetary positions format');
      }

      // Process positions with validation
      const validatedPositions: PlanetaryPositionsType = {};
      const requiredPlanets = ['Sun', 'Moon', 'Mercury', 'Venus', 'Mars', 
                              'Jupiter', 'Saturn', 'Uranus', 'Neptune', 'Pluto'];

      requiredPlanets.forEach(planet => {
        const pData = positions[planet];
        if (!pData || !pData.sign || typeof pData.exactLongitude !== 'number') {
          console.error(`Invalid data for ${planet}`, pData);
          throw new Error(`Invalid data for ${planet}`);
        }

        validatedPositions[planet] = {
          sign: pData.sign.toLowerCase(),
          degree: pData.exactLongitude % 30,
          exactLongitude: pData.exactLongitude,
          isRetrograde: !!pData.isRetrograde
        };
      });

      // Process lunar nodes with fallback
      const nodeFallback = () => {
        const currentYear = new Date().getFullYear();
        const baseNode = (currentYear - 2020) * 19.5; // Approximate yearly movement
        return {
          northNode: baseNode % 360,
          southNode: (baseNode + 180) % 360
        };
      };

      validatedPositions.northNode = positions.northNode || {
        ...getSignFromLongitude(nodeFallback().northNode),
        exactLongitude: nodeFallback().northNode,
        isRetrograde: true
      };

      validatedPositions.southNode = positions.southNode || {
        ...getSignFromLongitude(nodeFallback().southNode),
        exactLongitude: nodeFallback().southNode,
        isRetrograde: true
      };

      setPlanetaryPositions(validatedPositions);

    } catch (error) {
      console.error('Failed to refresh positions:', error);
      // Set error state but maintain previous positions
      dispatch({
        type: 'INITIALIZE_ERROR_STATE',
        payload: {
          error: true,
          errorMessage: 'Failed to update positions. Using last valid data.'
        }
      });
    }
  }, [updatePlanetaryPositions]);

  const setDaytime = useCallback((value: boolean) => {
    setIsDaytime(value);
  }, []);

  const value = {
    state,
    dispatch,
    planetaryPositions,
    isDaytime,
    updatePlanetaryPositions,
    refreshPlanetaryPositions,
    setDaytime,
    updateState: () => {}
  };

  useEffect(() => {
    const initializeEnergy = async () => {
      try {
        console.log('Initializing astrological energy...');
        
        // Default astrologicalState with fallback values
        let astrologicalState = {
          sunSign: 'unknown',
          moonSign: 'unknown',
          lunarPhase: 'unknown',
          timeOfDay: new Date().getHours() >= 6 && new Date().getHours() < 18 ? 'day' : 'night',
          isDaytime: new Date().getHours() >= 6 && new Date().getHours() < 18,
          planetaryHour: 'unknown',
          zodiacSign: 'unknown',
          activePlanets: [],
          activeAspects: [],
          dominantElement: 'unknown',
          calculationError: false
        };
        
        // Wrap this in a try/catch since it's causing errors
        try {
          // Use safe import for getCurrentAstrologicalState
          const getCurrentAstroState = await safeImportFunction<() => AstrologicalState>(
            '@/utils/astrologyUtils', 
            'getCurrentAstrologicalState'
          );
          
          if (getCurrentAstroState) {
            // Safely call the function with proper error handling
            try {
              const result = getCurrentAstroState();
              if (result) {
                astrologicalState = {
                  ...astrologicalState, // Keep fallbacks
                  ...result, // Override with actual values
                  calculationError: false
                };
                console.log('Astrological state loaded successfully');
              }
            } catch (callError) {
              console.error('Error calling getCurrentAstrologicalState:', callError);
              astrologicalState.calculationError = true;
            }
          } else {
            console.error('Failed to import getCurrentAstrologicalState');
            astrologicalState.calculationError = true;
          }
        } catch (astroError) {
          console.error('Error getting astrological state:', astroError);
          astrologicalState.calculationError = true;
        }
        
        // Import zodiac calculation functions
        try {
          // Try to calculate sun sign and lunar phase using safe imports
          const calculateSunSignFn = await safeImportFunction<(date?: Date) => string>(
            '@/utils/astrologyUtils', 
            'calculateSunSign'
          );
          
          const calculateLunarPhaseFn = await safeImportFunction<(date?: Date) => number>(
            '@/utils/astrologyUtils', 
            'calculateLunarPhase'
          );
          
          const getLunarPhaseNameFn = await safeImportFunction<(phase: number) => string>(
            '@/utils/astrologyUtils', 
            'getLunarPhaseName'
          );
          
          if (calculateSunSignFn && calculateLunarPhaseFn && getLunarPhaseNameFn) {
            // Get current sun sign and lunar phase
            const sunSign = calculateSunSignFn(new Date());
            const phaseValue = calculateLunarPhaseFn(new Date());
            const lunarPhase = getLunarPhaseNameFn(phaseValue);
            
            // Update zodiac energy and lunar phase
            if (sunSign) astrologicalState.sunSign = sunSign;
            if (lunarPhase) astrologicalState.lunarPhase = lunarPhase;
          }
        } catch (error) {
          console.error('Error calculating sun sign or lunar phase:', error);
          // Don't override the whole astrologicalState, just let the fallbacks be used
        }
        
        const currentEnergy = {
          zodiacEnergy: astrologicalState.sunSign || '',
          lunarEnergy: astrologicalState.lunarPhase || 'new_moon',
          planetaryEnergy: astrologicalState.activePlanets || [],
          timeEnergy: astrologicalState.timeOfDay || 'day'
        };

        dispatch({
          type: 'INITIALIZE_STATE',
          payload: {
            astrologicalState,
            currentEnergy
          }
        });
        
        // Update lunar phase separately to ensure it's displayed
        if (astrologicalState.lunarPhase && astrologicalState.lunarPhase !== 'unknown') {
          dispatch({
            type: 'UPDATE_LUNAR_PHASE',
            payload: { lunarPhase: astrologicalState.lunarPhase }
          });
        }
        
        // Initialize planetary positions after setting state
        refreshPlanetaryPositions();
      } catch (error) {
        console.error('Error in initializeEnergy:', error);
        // Instead of throwing, display a warning and continue with limited functionality
        dispatch({
          type: 'INITIALIZE_ERROR_STATE',
          payload: {
            error: true,
            errorMessage: 'Failed to initialize astrological data. Some features may not work correctly.'
          }
        });
        
        // Initialize planetary positions anyway to prevent further errors
        refreshPlanetaryPositions();
      }
    };

    initializeEnergy();
  }, [refreshPlanetaryPositions]);

  useEffect(() => {
    // Initialize the alchemical engine
    initializeAlchemicalEngine();
    
    // Refresh planetary positions immediately on mount
    refreshPlanetaryPositions();
    
    // Set up interval to refresh positions periodically
    const intervalId = setInterval(() => {
      refreshPlanetaryPositions();
    }, 15 * 60 * 1000); // every 15 minutes
    
    return () => clearInterval(intervalId);
  }, [refreshPlanetaryPositions]);

  // Add a new effect to update alchemical values when planetary positions change
  useEffect(() => {
    if (Object.keys(planetaryPositions).length > 0) {
      try {
        // Get current date for calculations
        const currentDate = new Date();
        
        // Create fake birth info for alchemizer - we're calculating "now" energy
        const birthInfo = {
          year: currentDate.getFullYear(),
          month: currentDate.getMonth() + 1,
          day: currentDate.getDate(),
          hour: currentDate.getHours(),
          minute: currentDate.getMinutes()
        };
        
        // Format planetary positions for the alchemizer engine
        const horoscopeData = {
          tropical: {
            Ascendant: { Sign: { label: calculateSunSign(currentDate) }},
            CelestialBodies: { 
              all: Object.entries(planetaryPositions).map(([planet, data]: any) => {
                // Skip metadata entries and ensure the planet name is valid
                if (planet.startsWith('_') || !data || !data.sign) return null;
                
                return {
                  label: planet.charAt(0).toUpperCase() + planet.slice(1),
                  Sign: { label: data.sign },
                  House: { label: '1' } // Simplified for now
                };
              }).filter(Boolean),
            }
          }
        };
        
        // Pass to alchemizer engine
        const engine = typeof window !== 'undefined' && window.alchemize ? window.alchemize : staticAlchemize;
        const alchemicalResult = engine(birthInfo, horoscopeData);
        
        console.log('Alchemical result:', alchemicalResult);
        
        // Calculate tokenized values based on planetary cycles
        const tokenValues = calculateTokenizedValues(currentDate);
        console.log('Tokenized values:', tokenValues);
        
        // Combine base values from alchemizer with tokenized values
        const baseSpirit = alchemicalResult['Alchemy Effects']['Total Spirit'] || 0;
        const baseEssence = alchemicalResult['Alchemy Effects']['Total Essence'] || 0;
        const baseMatter = alchemicalResult['Alchemy Effects']['Total Matter'] || 0;
        const baseSubstance = alchemicalResult['Alchemy Effects']['Total Substance'] || 0;
        
        // Apply tokenized scaling factor to base values - no fallbacks
        const tokenizedValues = {
          Spirit: baseSpirit * tokenValues.Spirit,
          Essence: baseEssence * tokenValues.Essence,
          Matter: baseMatter * tokenValues.Matter,
          Substance: baseSubstance * tokenValues.Substance
        };
        
        // Log values for debugging
        console.log('Base alchemical values:', { baseSpirit, baseEssence, baseMatter, baseSubstance });
        console.log('Token multipliers:', tokenValues);
        console.log('Final tokenized values:', tokenizedValues);
        
        // Update state with calculated tokenized values
        dispatch({
          type: 'UPDATE_ALCHEMICAL_VALUES',
          payload: {
            alchemicalValues: tokenizedValues
          }
        });
        
        // Update elemental balance based on the dominant element
        if (alchemicalResult['Total Effect Value']) {
          const elementalBalance: ElementalProperties = {
            Fire: alchemicalResult['Total Effect Value']['Fire'] || 0,
            Water: alchemicalResult['Total Effect Value']['Water'] || 0,
            Earth: alchemicalResult['Total Effect Value']['Earth'] || 0,
            Air: alchemicalResult['Total Effect Value']['Air'] || 0
          };
          
          // Normalize to percentages
          const total = Object.values(elementalBalance).reduce((sum, val) => sum + val, 0);
          if (total > 0) {
            Object.keys(elementalBalance).forEach(key => {
              elementalBalance[key as keyof ElementalProperties] /= total;
            });
          }
          
          dispatch({
            type: 'UPDATE_ELEMENTAL_BALANCE',
            payload: { elementalPreference: elementalBalance }
          });
        }
      } catch (error) {
        console.error('Error calculating alchemical values:', error);
      }
    }
  }, [planetaryPositions]);

  useEffect(() => {
    if (process.env.NODE_ENV !== 'production') {
      logPlanetaryConsistencyCheck();
    }
  }, []);

  return (
    <AlchemicalContext.Provider value={value}>
      {children}
    </AlchemicalContext.Provider>
  );
};

function useAlchemical() {
  const context = useContext(AlchemicalContext);
  if (!context) {
    throw new Error('useAlchemical must be used within an AlchemicalProvider');
  }
  return context;
}

export { AlchemicalProvider, useAlchemical };
export default AlchemicalProvider;

function alchemicalReducer(state: AlchemicalState, action: any) {
  switch (action.type) {
    case 'SET_ELEMENTAL_PREFERENCE':
      return {
        ...state,
        elementalPreference: action.payload
      };
    case 'UPDATE_ELEMENTAL_BALANCE':
      return {
        ...state,
        elementalPreference: action.payload.elementalPreference
      };
    case 'UPDATE_TIME':
      return {
        ...state,
        currentSeason: action.payload.season,
        timeOfDay: action.payload.timeOfDay,
        elementalState: action.payload.elementalState
      };
    case 'INITIALIZE_STATE':
      return {
        ...state,
        astrologicalState: action.payload.astrologicalState,
        currentEnergy: action.payload.currentEnergy
      };
    case 'UPDATE_LUNAR_PHASE':
      return {
        ...state,
        lunarPhase: action.payload.lunarPhase
      };
    case 'UPDATE_ALCHEMICAL_VALUES':
      return {
        ...state,
        astrologicalState: {
          ...state.astrologicalState,
          alchemicalValues: action.payload.alchemicalValues
        }
      };
    case 'INITIALIZE_ERROR_STATE':
      return {
        ...state,
        error: action.payload.error,
        errorMessage: action.payload.errorMessage
      };
    case 'ADD_ERROR':
      return {
        ...state,
        errors: [...state.errors, action.payload.error]
      };
    default:
      return state;
  }
}