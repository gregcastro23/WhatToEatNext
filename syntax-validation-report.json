{
  "totalFilesScanned": 1000,
  "filesWithIssues": 479,
  "issuesByType": {
    "generalSyntaxIssues": [
      {
        "file": "src/app/alchemicalEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 34,
        "column": 8,
        "context": "efined;\\n      const extendedHoroscope = {\\n        ...horoscopeDict,\\n        tropical: {\\n          Ce"
      },
      {
        "file": "src/app/alchemize-demo/page.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 36,
        "column": 78,
        "context": "-xl text-white'>üîÆ Loading alchemical calculations...</div>;\\n      </div>\\n    );\\n  }\\n\\n  if (error) {"
      },
      {
        "file": "src/app/alchm-kitchen/SignVectorPanel.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 47,
        "column": 37,
        "context": ".then(p => {\\n          if (mounted) setPositions(p as unknown as Record<string, PlanetaryPosition>);"
      },
      {
        "file": "src/app/alchm-kitchen/page.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 27,
        "column": 33,
        "context": "nter space-y-4'>\\n        ;<p>Loading Alchm Kitchen...</p>\\n        <div className='text-xs text-gray-"
      },
      {
        "file": "src/app/api/error.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 41,
        "column": 6,
        "context": "tResponse.json(\\n    {\\n      error: message,\\n      ...(details ? { details } : {}),\\n    },\\n    { stat"
      },
      {
        "file": "src/app/cooking-methods/[method]/page.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 90,
        "column": 32,
        "context": "gn: 'center' }}>,\\n          Loading cooking method...\\n        </Typography>\\n      </Container>\\n    )"
      },
      {
        "file": "src/app/cooking-methods/[method]/page.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 75,
        "column": 28,
        "context": "odId.toLowerCase()) {\\n          foundMethod = data as unknown as CookingMethodInfo;\\n          foundK"
      },
      {
        "file": "src/app/cooking-methods/[method]/page.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 143,
        "column": 32,
        "context": "ption' in method;\\n                ? String((method as unknown as { description?: string }).descripti"
      },
      {
        "file": "src/app/cooking-methods/[method]/page.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 151,
        "column": 34,
        "context": "ion' in method;\\n                  ? String((method as unknown as { duration?: string }).duration)\\n  "
      },
      {
        "file": "src/app/cooking-methods/[method]/page.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 184,
        "column": 39,
        "context": "ethod ? (;\\n                  Array.isArray((method as unknown as { benefits?: string[] }).benefits) "
      },
      {
        "file": "src/app/cooking-methods/[method]/page.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 185,
        "column": 27,
        "context": "ing[] }).benefits) ? (\\n                    (method as unknown as { benefits: string[] }).benefits.ma"
      },
      {
        "file": "src/app/cooking-methods/[method]/page.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 194,
        "column": 37,
        "context": " paragraph>;\\n                      {String((method as unknown as { benefits?: string | string[] }).b"
      },
      {
        "file": "src/app/cooking-methods/[method]/page.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 213,
        "column": 39,
        "context": " method &&\\n                  Array.isArray((method as unknown as { suitable_for?: string[] }).suitab"
      },
      {
        "file": "src/app/cooking-methods/[method]/page.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 214,
        "column": 25,
        "context": "ng[] }).suitable_for) &&\\n                  (method as unknown as { suitable_for: string[] }).suitabl"
      },
      {
        "file": "src/app/cooking-methods/[method]/page.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 226,
        "column": 23,
        "context": " 'variations' in method &&\\n                (method as unknown as { variations?: string[] }).variatio"
      },
      {
        "file": "src/app/cooking-methods/[method]/page.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 233,
        "column": 44,
        "context": "List>\\n                      {Array.isArray((method as unknown as { variations?: string[] }).variatio"
      },
      {
        "file": "src/app/cooking-methods/[method]/page.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 234,
        "column": 31,
        "context": " }).variations) &&\\n                        (method as unknown as { variations: string[] }).variation"
      },
      {
        "file": "src/app/cooking-methods/[method]/page.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 436,
        "column": 23,
        "context": " 'time_range' in method &&\\n                (method as unknown as { time_range?: { min?: number, max?"
      },
      {
        "file": "src/app/cooking-methods/[method]/page.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 442,
        "column": 30,
        "context": "ange:</strong>{' '}\\n                      {(method as unknown as { time_range?: { min?: number, max?"
      },
      {
        "file": "src/app/cooking-methods/[method]/page.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 445,
        "column": 30,
        "context": "                  -\\n                      {(method as unknown as { time_range?: { min?: number, max?"
      },
      {
        "file": "src/app/cooking-methods-demo/page.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 22,
        "column": 6,
        "context": "ferent categories\\n    const demoMethods = [\\n      ..._formatMethodsForComponent(dryCookingMethods as"
      },
      {
        "file": "src/app/cooking-methods-demo/page.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 23,
        "column": 6,
        "context": "Component(dryCookingMethods as any, 'dry'),\\n      ..._formatMethodsForComponent(wetCookingMethods as"
      },
      {
        "file": "src/app/cooking-methods-demo/page.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 24,
        "column": 6,
        "context": "Component(wetCookingMethods as any, 'wet'),\\n      ..._formatMethodsForComponent(molecularCookingMeth"
      },
      {
        "file": "src/app/cooking-methods-demo/page.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 110,
        "column": 58,
        "context": "<Typography align='center'>Loading cooking methods...</Typography>\\n      )}\\n\\n      {selectedMethod &"
      },
      {
        "file": "src/app/debug/page.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 43,
        "column": 30,
        "context": "'p-4 text-center'>;\\n        <p>Loading debug tools...</p>\\n      </div>\\n    )\\n  }\\n\\n  return <>{childr"
      },
      {
        "file": "src/app/debug/page.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 61,
        "column": 59,
        "context": ".info('Running cooking method recommendations test...');\\n      const results = testCookingMethodReco"
      },
      {
        "file": "src/app/debug/page.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 97,
        "column": 36,
        "context": ",\\n          >\\n            {loading ? 'Running Test...' : 'Test Cooking Method Recommendations'}\\n    "
      },
      {
        "file": "src/app/loading.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 13,
        "column": 73,
        "context": "mb-2 animate-pulse'>‚è≥</div>;<div>{text || 'Loading...'}</div>\\n    </div>\\n  </div>\\n);\\n\\ninterface Load"
      },
      {
        "file": "src/app/loading.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 27,
        "column": 17,
        "context": " = false,\\n  variant = 'spinner',\\n  text = 'Loading...',\\n}) => {\\n  return <LoadingComponent fullScree"
      },
      {
        "file": "src/app/planet-test/layout.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 17,
        "column": 21,
        "context": " originalLog = console.log;\\n\\n    console.error = (...args) => {\\n      setErrors(prev => [...prev, ar"
      },
      {
        "file": "src/app/planet-test/layout.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 18,
        "column": 25,
        "context": "e.error = (...args) => {\\n      setErrors(prev => [...prev, args.join(' ')]);\\n      originalError(..."
      },
      {
        "file": "src/app/planet-test/layout.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 19,
        "column": 20,
        "context": "> [...prev, args.join(' ')]);\\n      originalError(...args);\\n    };\\n\\n    console.log = (...args) => {"
      },
      {
        "file": "src/app/planet-test/layout.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 22,
        "column": 19,
        "context": "riginalError(...args);\\n    };\\n\\n    console.log = (...args) => {\\n      setLogs(prev => [...prev, args"
      },
      {
        "file": "src/app/planet-test/layout.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 23,
        "column": 23,
        "context": "nsole.log = (...args) => {\\n      setLogs(prev => [...prev, args.join(' ')]);\\n      originalLog(...ar"
      },
      {
        "file": "src/app/planet-test/layout.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 24,
        "column": 18,
        "context": " => [...prev, args.join(' ')]);\\n      originalLog(...args);\\n    };\\n\\n    return () => {\\n      console"
      },
      {
        "file": "src/app/planet-test/page.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 24,
        "column": 55,
        "context": "   <Suspense fallback={<div>Loading simple display...</div>}>;\\n          <SimplePlanetaryDisplay />\\n"
      },
      {
        "file": "src/app/planet-test/page.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 31,
        "column": 55,
        "context": "   <Suspense fallback={<div>Loading full component...</div>}>;\\n          <PlanetaryHoursTest />\\n    "
      },
      {
        "file": "src/app/template.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 20,
        "column": 28,
        "context": "imate-pulse'>‚è≥</div>;\\n      <div>{text || 'Loading...'}</div>\\n    </div>\\n  </div>\\n);\\n\\ninterface Temp"
      },
      {
        "file": "src/app/template.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 90,
        "column": 74,
        "context": "Screen variant='spinner' text='Loading application...' />;\\n  }\\n\\n  return (\\n    <div id='app-root' cl"
      },
      {
        "file": "src/app/test/migrated-components/cuisine-selector-test.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 60,
        "column": 26,
        "context": " || []).length > 5 && (\\n                      <li>...and {(originalRecipes || []).length - 5} more</"
      },
      {
        "file": "src/app/test/migrated-components/cuisine-selector-test.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 91,
        "column": 26,
        "context": " || []).length > 5 && (\\n                      <li>...and {(migratedRecipes || []).length - 5} more</"
      },
      {
        "file": "src/app/test/migrated-components/recipe-filters/page.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 43,
        "column": 34,
        "context": "terState>) => {\\n    setOriginalFilters(prev => ({ ...prev, ...updates }));\\n    logger.info('Original"
      },
      {
        "file": "src/app/test/migrated-components/recipe-filters/page.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 43,
        "column": 43,
        "context": ") => {\\n    setOriginalFilters(prev => ({ ...prev, ...updates }));\\n    logger.info('Original filters "
      },
      {
        "file": "src/app/test/migrated-components/recipe-filters/page.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 56,
        "column": 34,
        "context": "terState>) => {\\n    setMigratedFilters(prev => ({ ...prev, ...updates }));\\n    logger.info('Migrated"
      },
      {
        "file": "src/app/test/migrated-components/recipe-filters/page.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 56,
        "column": 43,
        "context": ") => {\\n    setMigratedFilters(prev => ({ ...prev, ...updates }));\\n    logger.info('Migrated filters "
      },
      {
        "file": "src/app/test/migrated-components/recipe-recommender-test.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 19,
        "column": 26,
        "context": "me, value } = e.target;\\n    setFilters(prev => ({ ...prev, [name]: value }));\\n  };\\n\\n  return (\\n    <"
      },
      {
        "file": "src/calculations/alchemicalCalculations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 168,
        "column": 36,
        "context": "or production\\nconst debugLog = (_message: string, ..._args: unknown[]): void => {\\n  // Comment out c"
      },
      {
        "file": "src/calculations/alchemicalCalculations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 170,
        "column": 23,
        "context": " to avoid linting warnings\\n  // log.info(message, ...args)\\n};\\n\\n/**\\n * Calculate all alchemical prope"
      },
      {
        "file": "src/calculations/alchemicalEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 40,
        "column": 36,
        "context": "roduction\\n */\\nconst debugLog = (_message: string, ..._args: unknown[]): void => {\\n  // Comment out c"
      },
      {
        "file": "src/calculations/alchemicalEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 42,
        "column": 23,
        "context": " to avoid linting warnings\\n  // log.info(message, ...args)\\n};\\n\\n// Silent mode flag for debugging\\ncon"
      },
      {
        "file": "src/calculations/alchemicalEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 908,
        "column": 19,
        "context": "    // Create defensive copies\\n    const obj1 = { ...elementObject1 };\\n    const obj2 = { ...element"
      },
      {
        "file": "src/calculations/alchemicalEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 909,
        "column": 19,
        "context": " obj1 = { ...elementObject1 };\\n    const obj2 = { ...elementObject2 };\\n\\n    return {\\n      Fire: (ob"
      },
      {
        "file": "src/calculations/alchemicalEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1301,
        "column": 57,
        "context": "     // Continue with the rest of the calculations...\\n            // (I'm not showing all the calcul"
      },
      {
        "file": "src/calculations/alchemicalEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 497,
        "column": 22,
        "context": "iac || 'aries') ?? 'aries',\\n      element: element as unknown as Element,\\n      strength: this.seaso"
      },
      {
        "file": "src/calculations/alchemicalEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1413,
        "column": 20,
        "context": " }\\n\\n    // Return the results\\n    return alchmInfo as unknown as AlchemicalResult;\\n  } catch (error)"
      },
      {
        "file": "src/calculations/alchemicalEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2069,
        "column": 56,
        "context": "nst dominantElement = (getElementFromSign(sunSign) as unknown as Element) || 'Fire';\\n\\n    // Determi"
      },
      {
        "file": "src/calculations/alchemicalEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2073,
        "column": 21,
        "context": "phase\\n    const lunarPhase =\\n      (((moonPosition as unknown as any).phase).toLowerCase() as LunarP"
      },
      {
        "file": "src/calculations/alchemicalEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2120,
        "column": 5,
        "context": "ominantElement,\\n      season,\\n      moonSign\\n    } as unknown as AstrologicalState;\\n  } catch (error"
      },
      {
        "file": "src/calculations/alchemicalEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2182,
        "column": 7,
        "context": "         'Total Substance': 0.25\\n        }\\n      } as unknown as AlchemicalResult;\\n    }\\n  },\\n  calc"
      },
      {
        "file": "src/calculations/alchemicalTransformation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 63,
        "column": 6,
        "context": "ze input values\\n    const sanitizedItem = {\\n      ...item;\\n      elementalProperties: Object.fromEnt"
      },
      {
        "file": "src/calculations/alchemicalTransformation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 219,
        "column": 6,
        "context": "t: ${planetaryBoost}`,\\n    );\\n\\n    return {\\n      ...sanitizedItem;\\n      alchemicalProperties: alch"
      },
      {
        "file": "src/calculations/alchemicalTransformation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 236,
        "column": 6,
        "context": "with original values preserved\\n    return {\\n      ...item;\\n      alchemicalProperties: {\\n        Spi"
      },
      {
        "file": "src/calculations/alchemicalTransformation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 243,
        "column": 40,
        "context": "\\n      },\\n      transformedElementalProperties: { ...item.elementalProperties },\\n      heat: 0.5,\\n  "
      },
      {
        "file": "src/calculations/alchemicalTransformation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 281,
        "column": 6,
        "context": "ssing fails\\n    return items.map(item => ({\\n      ...item;\\n      alchemicalProperties: {\\n        Spi"
      },
      {
        "file": "src/calculations/alchemicalTransformation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 288,
        "column": 40,
        "context": "\\n      },\\n      transformedElementalProperties: { ...item.elementalProperties },\\n      heat: 0.5,\\n  "
      },
      {
        "file": "src/calculations/alchemicalTransformation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 314,
        "column": 72,
        "context": "roperties: Record<ElementalCharacter, number> = { ...originalProperties };\\n\\n    // Calculate base en"
      },
      {
        "file": "src/calculations/alchemicalTransformation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 375,
        "column": 13,
        "context": "ginal properties if there's an error\\n    return { ...originalProperties };\\n  }\\n};\\n\\n/**\\n * Apply zodi"
      },
      {
        "file": "src/calculations/combinationEffects.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 53,
        "column": 5,
        "context": "0.1 },\\n    notes: 'Warming spice blend'\\n  },\\n  // ... other rules remain the same\\n];\\n\\n// Create a no"
      },
      {
        "file": "src/calculations/combinationEffects.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 110,
        "column": 17,
        "context": " // Check elemental interactions\\n    effects.push(...calculateElementalInteractions(ingredients));\\n\\n"
      },
      {
        "file": "src/calculations/core/elementalCalculations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 329,
        "column": 35,
        "context": "): number => {\\n    const dominantValue = Math.max(...Object.values(properties));\\n    return dominant"
      },
      {
        "file": "src/calculations/core/elementalCalculations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 565,
        "column": 35,
        "context": "): number => {\\n    const dominantValue = Math.max(...Object.values(modifiers));\\n    const seasonalFa"
      },
      {
        "file": "src/calculations/culinary/recipeMatching.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 299,
        "column": 4,
        "context": "5, 1.33];\\n  const resonanceScore = Math.max(;\\n    ...simpleRatios.map(ratio => 1 - Math.abs(energyRa"
      },
      {
        "file": "src/calculations/culinaryAstrology.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 245,
        "column": 37,
        "context": "ets') || [];\\n        const planetaryActivators = [...recipe.astrologicalProfile.rulingPlanets];\\n    "
      },
      {
        "file": "src/calculations/elementalcalculations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 33,
        "column": 32,
        "context": "or.getInstance();\\n    instance.currentBalance = { ...DEFAULT_ELEMENTAL_PROPERTIES };\\n    instance.in"
      },
      {
        "file": "src/calculations/elementalcalculations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 81,
        "column": 28,
        "context": "ElementalProperties {\\n    const baseModifiers = { ...DEFAULT_ELEMENTAL_PROPERTIES };\\n\\n    // Normali"
      },
      {
        "file": "src/calculations/elementalcalculations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 166,
        "column": 25,
        "context": "with the base properties\\n    const properties = { ...baseProperties };\\n\\n    // Create default season"
      },
      {
        "file": "src/calculations/enhancedAlchemicalMatching.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 108,
        "column": 20,
        "context": "  if (Array.isArray(decan)) {\\n        rulers.push(...decan);\\n      }\\n    });\\n    return rulers;\\n  };"
      },
      {
        "file": "src/calculations/enhancedAlchemicalMatching.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 815,
        "column": 12,
        "context": "st: [], extraAvoid: [] };\\n\\n  return {\\n    boost: [...baseAdjust.boost, ...elementAdjust.extraBoost],"
      },
      {
        "file": "src/calculations/enhancedAlchemicalMatching.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 815,
        "column": 33,
        "context": "] };\\n\\n  return {\\n    boost: [...baseAdjust.boost, ...elementAdjust.extraBoost],\\n    avoid: [...baseA"
      },
      {
        "file": "src/calculations/enhancedAlchemicalMatching.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 816,
        "column": 12,
        "context": ".boost, ...elementAdjust.extraBoost],\\n    avoid: [...baseAdjust.avoid, ...elementAdjust.extraAvoid]\\n"
      },
      {
        "file": "src/calculations/enhancedAlchemicalMatching.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 816,
        "column": 33,
        "context": "ust.extraBoost],\\n    avoid: [...baseAdjust.avoid, ...elementAdjust.extraAvoid]\\n  };\\n}\\n\\n/**\\n * Enhanc"
      },
      {
        "file": "src/calculations/enhancedCuisineRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 268,
        "column": 26,
        "context": "Array(seasonRecipes)) {\\n          allRecipes.push(...seasonRecipes);\\n        }\\n      }\\n\\n      // Add"
      },
      {
        "file": "src/calculations/enhancedCuisineRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 276,
        "column": 26,
        "context": "ay(allSeasonRecipes)) {\\n          allRecipes.push(...allSeasonRecipes);\\n        }\\n      }\\n    });\\n\\n "
      },
      {
        "file": "src/calculations/gregsEnergy.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 9,
        "column": 36,
        "context": "roduction\\n */\\nconst debugLog = (_message: string, ..._args: unknown[]): void => {\\n  // Comment out c"
      },
      {
        "file": "src/calculations/gregsEnergy.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 11,
        "column": 23,
        "context": " to avoid linting warnings\\n  // log.info(message, ...args)\\n};\\n\\n/**\\n * Interface representing the cou"
      },
      {
        "file": "src/calculations/gregsEnergy.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 510,
        "column": 4,
        "context": "] += value;\\n      });\\n    }\\n  });\\n\\n  return {\\n    ...elementalCounts;\\n    ...alchemicalCounts\\n  };\\n}"
      },
      {
        "file": "src/calculations/gregsEnergy.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 511,
        "column": 4,
        "context": "  }\\n  });\\n\\n  return {\\n    ...elementalCounts;\\n    ...alchemicalCounts\\n  };\\n};\\n\\n// Add utility functi"
      },
      {
        "file": "src/calculations/gregsEnergy.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 524,
        "column": 2,
        "context": "micalCounts,\\n): ElementalAlchemicalCounts => ({\\n  ...counts;\\n  Spirit: Math.max(counts.Spirit, 0.1),"
      },
      {
        "file": "src/calculations/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 103,
        "column": 6,
        "context": "racy\\n        }\\n      }\\n    };\\n\\n    return {\\n      ...analysis;\\n      timestamp: new Date().toISOStri"
      },
      {
        "file": "src/calculations/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 299,
        "column": 6,
        "context": "lity\\n        }\\n      }\\n    };\\n\\n    return {\\n      ...compatibilityAnalysis;\\n      timestamp: new Dat"
      },
      {
        "file": "src/calculations/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 566,
        "column": 6,
        "context": "commendations\\n    const recommendations = [\\n      ...recipeResult.recommendations;\\n      ...generate"
      },
      {
        "file": "src/calculations/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 567,
        "column": 6,
        "context": " = [\\n      ...recipeResult.recommendations;\\n      ...generateDetailedCompatibilityRecommendations(\\n "
      },
      {
        "file": "src/calculations/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 720,
        "column": 6,
        "context": "  const enhancedInput: CalculationInput = {\\n      ...input;\\n      planetaryPositions: realPositions "
      },
      {
        "file": "src/calculations/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 802,
        "column": 26,
        "context": "const adjustment = 0.1;\\n  const adjustedProps = { ...elementalProperties };\\n\\n  switch (season.toLowe"
      },
      {
        "file": "src/calculations/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 829,
        "column": 26,
        "context": "onst adjustment = 0.05;\\n  const adjustedProps = { ...elementalProperties };\\n\\n  switch (lunarPhase.to"
      },
      {
        "file": "src/calculations/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 721,
        "column": 39,
        "context": " ...input;\\n      planetaryPositions: realPositions as unknown as Record<string, PlanetaryPosition>\\n "
      },
      {
        "file": "src/config/defaults.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 11,
        "column": 1,
        "context": "'any',\\n  seasonality: null,\\n  difficulty: 'any',\\n} as unknown as FilterOptions;\\n\\n// Separate dietary"
      },
      {
        "file": "src/config/signVectorConfig.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 89,
        "column": 2,
        "context": "st DEV_SIGN_VECTOR_CONFIG: SignVectorConfig = {\\n  ...DEFAULT_SIGN_VECTOR_CONFIG;\\n  blendWeightAlpha:"
      },
      {
        "file": "src/config/signVectorConfig.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 105,
        "column": 4,
        "context": "ectorConfig>\\n): SignVectorConfig {\\n  return {\\n    ...base;\\n    ...overrides;\\n    elementalToESMS: {\\n"
      },
      {
        "file": "src/config/signVectorConfig.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 106,
        "column": 4,
        "context": "): SignVectorConfig {\\n  return {\\n    ...base;\\n    ...overrides;\\n    elementalToESMS: {\\n      ...base"
      },
      {
        "file": "src/config/signVectorConfig.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 108,
        "column": 6,
        "context": "e;\\n    ...overrides;\\n    elementalToESMS: {\\n      ...base.elementalToESMS;\\n      ...(overrides.eleme"
      },
      {
        "file": "src/config/signVectorConfig.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 109,
        "column": 6,
        "context": "talToESMS: {\\n      ...base.elementalToESMS;\\n      ...(overrides.elementalToESMS || {})\\n    },\\n    mo"
      },
      {
        "file": "src/config/signVectorConfig.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 112,
        "column": 6,
        "context": "lToESMS || {})\\n    },\\n    modalityBoosts: {\\n      ...base.modalityBoosts;\\n      ...(overrides.modali"
      },
      {
        "file": "src/config/signVectorConfig.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 113,
        "column": 6,
        "context": "lityBoosts: {\\n      ...base.modalityBoosts;\\n      ...(overrides.modalityBoosts || {})\\n    },\\n    pla"
      },
      {
        "file": "src/config/signVectorConfig.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 116,
        "column": 6,
        "context": "oosts || {})\\n    },\\n    planetaryWeights: {\\n      ...base.planetaryWeights;\\n      ...(overrides.plan"
      },
      {
        "file": "src/config/signVectorConfig.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 117,
        "column": 6,
        "context": "yWeights: {\\n      ...base.planetaryWeights;\\n      ...(overrides.planetaryWeights || {})\\n    },\\n    a"
      },
      {
        "file": "src/config/signVectorConfig.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 120,
        "column": 6,
        "context": "eights || {})\\n    },\\n    aspectModifiers: {\\n      ...base.aspectModifiers;\\n      ...(overrides.aspec"
      },
      {
        "file": "src/config/signVectorConfig.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 121,
        "column": 6,
        "context": "Modifiers: {\\n      ...base.aspectModifiers;\\n      ...(overrides.aspectModifiers || {})\\n    },\\n    se"
      },
      {
        "file": "src/config/signVectorConfig.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 124,
        "column": 6,
        "context": "iers || {})\\n    },\\n    seasonalAlignment: {\\n      ...base.seasonalAlignment;\\n      ...(overrides.sea"
      },
      {
        "file": "src/config/signVectorConfig.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 125,
        "column": 6,
        "context": "ignment: {\\n      ...base.seasonalAlignment;\\n      ...(overrides.seasonalAlignment || {})\\n    },\\n    "
      },
      {
        "file": "src/config/signVectorConfig.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 128,
        "column": 6,
        "context": "nment || {})\\n    },\\n    magnitudeScaling: {\\n      ...base.magnitudeScaling;\\n      ...(overrides.magn"
      },
      {
        "file": "src/config/signVectorConfig.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 129,
        "column": 6,
        "context": "eScaling: {\\n      ...base.magnitudeScaling;\\n      ...(overrides.magnitudeScaling || {})\\n    }\\n  };\\n}"
      },
      {
        "file": "src/config/signVectorConfig.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 150,
        "column": 11,
        "context": "SignVectorConfig(): SignVectorConfig {\\n  return { ...currentConfig };\\n}\\n\\nexport function resetSignVe"
      },
      {
        "file": "src/constants/alchemicalPillars.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1228,
        "column": 10,
        "context": "ingMethods(): EnhancedCookingMethod[] {\\n  return [...ENHANCED_COOKING_METHODS]\\n}\\n\\n// getMonicaCompat"
      },
      {
        "file": "src/constants/alchemicalPillars.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1510,
        "column": 4,
        "context": "rMonicaModifiers(monicaConstant);\\n\\n  return {\\n    ...pillar;\\n    monicaProperties: {\\n      kalchm,\\n "
      },
      {
        "file": "src/constants/chakraSymbols.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 162,
        "column": 6,
        "context": "ness\\n        }\\n      }\\n    };\\n\\n    return {\\n      ...mantraAnalysis,\\n      timestamp: new Date().toI"
      },
      {
        "file": "src/constants/chakraSymbols.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 261,
        "column": 6,
        "context": "sion\\n        }\\n      }\\n    };\\n\\n    return {\\n      ...visualAnalysis,\\n      timestamp: new Date().toI"
      },
      {
        "file": "src/constants/chakraSymbols.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 354,
        "column": 6,
        "context": "ance\\n        }\\n      }\\n    };\\n\\n    return {\\n      ...nutritionalAnalysis,\\n      timestamp: new Date("
      },
      {
        "file": "src/constants/chakraSymbols.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 437,
        "column": 6,
        "context": "sion\\n        }\\n      }\\n    };\\n\\n    return {\\n      ...functionalAnalysis,\\n      timestamp: new Date()"
      },
      {
        "file": "src/constants/chakraSymbols.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 529,
        "column": 6,
        "context": "sion\\n        }\\n      }\\n    };\\n\\n    return {\\n      ...platformAnalysis,\\n      timestamp: new Date().t"
      },
      {
        "file": "src/constants/chakraSymbols.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 177,
        "column": 17,
        "context": "recommendations: string[] = [];\\n\\n    if ((analysis as unknown as any)?.effectiveness?.pronunciationA"
      },
      {
        "file": "src/constants/chakraSymbols.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 194,
        "column": 16,
        "context": "onance');\\n    }\\n\\n    if (\\n      (\\n        analysis as unknown as {\\n          advancedVibrations?: { "
      },
      {
        "file": "src/constants/chakraSymbols.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 199,
        "column": 16,
        "context": "amental !== undefined &&\\n      ((\\n        analysis as unknown as {\\n          advancedVibrations?: { "
      },
      {
        "file": "src/constants/elementalCore.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 309,
        "column": 13,
        "context": "val || 0), 0),\\n\\n  if (total === 0) {\\n    return { ...DEFAULT_ELEMENTAL_PROPERTIES };\\n  }\\n\\n  return {"
      },
      {
        "file": "src/constants/lunar.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 38,
        "column": 5,
        "context": "'saut√©ing', 'stir-frying', 'grilling'],\\n  },\\n  // ... continues with all lunar phases\\n};\\n\\nexport con"
      },
      {
        "file": "src/constants/seasonalModifiers.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 74,
        "column": 2,
        "context": "gns to the seasonal modifiers for direct access\\n  ...ZODIAC_MODIFIERS\\n};\\n\\n// Influence of seasonal f"
      },
      {
        "file": "src/constants/systemDefaults.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 752,
        "column": 64,
        "context": "faultObject || []).map(item => cloneDefault(item)) as unknown as T;\\n  }\\n\\n  const cloned = {} as T;\\n "
      },
      {
        "file": "src/constants/typeDefaults.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 108,
        "column": 2,
        "context": "DefaultAlchemicalState: AlchemicalStateType = {\\n  ...BalancedAlchemicalProperties;\\n  ...BalancedElem"
      },
      {
        "file": "src/constants/typeDefaults.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 109,
        "column": 2,
        "context": "tateType = {\\n  ...BalancedAlchemicalProperties;\\n  ...BalancedElementalProperties\\n} as const;\\n\\n/**\\n *"
      },
      {
        "file": "src/constants/typeDefaults.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 117,
        "column": 2,
        "context": "hemicalResult: CompleteAlchemicalResultType = {\\n  ...DefaultAlchemicalState;\\n  ...DefaultThermodynam"
      },
      {
        "file": "src/constants/typeDefaults.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 118,
        "column": 2,
        "context": "icalResultType = {\\n  ...DefaultAlchemicalState;\\n  ...DefaultThermodynamicMetrics\\n} as const;\\n\\n/**\\n *"
      },
      {
        "file": "src/context/AstrologicalContext.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 123,
        "column": 27,
        "context": "lculateChakraEnergies(\\n        elementalProperties as unknown as Record<string, number>,\\n      );\\n\\n "
      },
      {
        "file": "src/context/CurrentChartContext.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 177,
        "column": 32,
        "context": "null);\\n\\n    try {\\n      log.info('Refreshing chart...');\\n\\n      // Use alchemicalPositions if availa"
      },
      {
        "file": "src/context/UnifiedContext.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 48,
        "column": 52,
        "context": "  logger.info('UnifiedContext: Refreshing all data...');\\n\\n    try {\\n      // 1. Fetch Astrological D"
      },
      {
        "file": "src/context/UnifiedContext.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 110,
        "column": 24,
        "context": "        positionsForRecs,\\n        ingredientsArray as unknown as UnifiedIngredient[],\\n        cookin"
      },
      {
        "file": "src/context/UnifiedContext.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 111,
        "column": 27,
        "context": "s UnifiedIngredient[],\\n        cookingMethodsArray as unknown as CookingMethod[],\\n      );\\n      set"
      },
      {
        "file": "src/contexts/AlchemicalContext/provider.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 87,
        "column": 8,
        "context": "Preserve any additional properties safely\\n        ...position,\\n      };\\n    }\\n  });\\n\\n  return conver"
      },
      {
        "file": "src/contexts/AlchemicalContext/provider.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 135,
        "column": 8,
        "context": "t state\\n      const updatedAstroState = {\\n        ...state.astrologicalState,\\n        alchemicalValu"
      },
      {
        "file": "src/contexts/AlchemicalContext/provider.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 169,
        "column": 50,
        "context": "      logger.debug('Refreshing planetary positions...');\\n\\n      // Use reliable hardcoded positions\\n"
      },
      {
        "file": "src/contexts/AlchemicalContext/reducer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 37,
        "column": 8,
        "context": "case 'SET_SEASONAL_STATE':\\n      return {\\n        ...state,\\n        currentSeason: action.payload.se"
      },
      {
        "file": "src/contexts/AlchemicalContext/reducer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 44,
        "column": 8,
        "context": "SET_ELEMENTAL_PREFERENCE':\\n      return {\\n        ...state,\\n        elementalPreference: {\\n         "
      },
      {
        "file": "src/contexts/AlchemicalContext/reducer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 50,
        "column": 10,
        "context": ",\\n          Earth: 0,\\n          Air: 0,\\n          ...state.elementalPreference,\\n          [action.pa"
      },
      {
        "file": "src/contexts/AlchemicalContext/reducer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 58,
        "column": 8,
        "context": "ase 'SET_ELEMENTAL_STATE':\\n      return {\\n        ...state;\\n        elementalState: action.payload,\\n"
      },
      {
        "file": "src/contexts/AlchemicalContext/reducer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 65,
        "column": 8,
        "context": " case 'SET_ZODIAC_ENERGY':\\n      return {\\n        ...state;\\n        zodiacEnergy: action.payload,\\n  "
      },
      {
        "file": "src/contexts/AlchemicalContext/reducer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 77,
        "column": 8,
        "context": "  case 'SET_LUNAR_ENERGY':\\n      return {\\n        ...state;\\n        lunarEnergy: action.payload,\\n   "
      },
      {
        "file": "src/contexts/AlchemicalContext/reducer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 89,
        "column": 8,
        "context": "se 'SET_PLANETARY_ENERGY':\\n      return {\\n        ...state;\\n        planetaryEnergy: action.payload,"
      },
      {
        "file": "src/contexts/AlchemicalContext/reducer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 101,
        "column": 8,
        "context": " 'SET_ASTROLOGICAL_STATE':\\n      return {\\n        ...state;\\n        astrologicalState: {\\n          c"
      },
      {
        "file": "src/contexts/AlchemicalContext/reducer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 108,
        "column": 10,
        "context": "        activePlanets: ['sun', 'moon'],\\n          ...(action.payload && typeof action.payload === 'o"
      },
      {
        "file": "src/contexts/AlchemicalContext/reducer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 115,
        "column": 8,
        "context": " };\\n\\n    case 'SET_ERROR':\\n      return {\\n        ...state;\\n        error: true,\\n        errorMessag"
      },
      {
        "file": "src/contexts/AlchemicalContext/reducer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 118,
        "column": 17,
        "context": "Message: action.payload.message,\\n        errors: [...state.errors, action.payload.message],\\n        "
      },
      {
        "file": "src/contexts/AlchemicalContext/reducer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 124,
        "column": 8,
        "context": ";\\n\\n    case 'CLEAR_ERROR':\\n      return {\\n        ...state;\\n        error: false,\\n        errorMessa"
      },
      {
        "file": "src/contexts/AlchemicalContext/reducer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 132,
        "column": 8,
        "context": " };\\n\\n    case 'ADD_ERROR':\\n      return {\\n        ...state;\\n        errors: [...state.errors, action"
      },
      {
        "file": "src/contexts/AlchemicalContext/reducer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 133,
        "column": 17,
        "context": "      return {\\n        ...state;\\n        errors: [...state.errors, action.payload],\\n        lastUpda"
      },
      {
        "file": "src/contexts/AlchemicalContext/reducer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 139,
        "column": 8,
        "context": "\\n\\n    case 'UPDATE_STATE':\\n      return {\\n        ...state;\\n        ...action.payload;\\n        lastU"
      },
      {
        "file": "src/contexts/AlchemicalContext/reducer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 140,
        "column": 8,
        "context": "_STATE':\\n      return {\\n        ...state;\\n        ...action.payload;\\n        lastUpdated: new Date()"
      },
      {
        "file": "src/contexts/AlchemicalContext/reducer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 146,
        "column": 8,
        "context": "e 'SET_ALCHEMICAL_VALUES':\\n      return {\\n        ...state;\\n        alchemicalValues: action.payload"
      },
      {
        "file": "src/contexts/AlchemicalContext/reducer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 153,
        "column": 8,
        "context": "   case 'SET_LUNAR_PHASE':\\n      return {\\n        ...state;\\n        lunarPhase: action.payload,\\n    "
      },
      {
        "file": "src/contexts/ChartContext/provider.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 117,
        "column": 32,
        "context": "null);\\n\\n    try {\\n      log.info('Refreshing chart...');\\n\\n      // Use alchemicalPositions if availa"
      },
      {
        "file": "src/contexts/PopupContext/provider.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 88,
        "column": 26,
        "context": " season\\n      }\\n    };\\n\\n    setPopups(current => [...current, newPopup]);\\n\\n    // Handle animation t"
      },
      {
        "file": "src/contexts/UserContext/index.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 21,
        "column": 47,
        "context": " {\\n    return { userId: profile.userId || 'mock', ...profile } as UserProfile;\\n  },\\n};\\n\\ninterface Us"
      },
      {
        "file": "src/contexts/UserContext/index.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 69,
        "column": 8,
        "context": "ile = await userService.saveUserProfile({\\n        ...data,\\n        userId: currentUser.userId,\\n     "
      },
      {
        "file": "src/data/cooking/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 77,
        "column": 23,
        "context": "with base elemental effect\\n  const baseEffect = { ...methodData.elementalEffect };\\n\\n  // Apply durat"
      },
      {
        "file": "src/data/cooking/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 203,
        "column": 38,
        "context": "  })\\n    })\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n}\\n\\n/**\\n * Get cookin"
      },
      {
        "file": "src/data/cooking/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 31,
        "column": 45,
        "context": "=> {\\n  const methodData = allCookingMethods[method as unknown as keyof typeof allCookingMethods];\\n  "
      },
      {
        "file": "src/data/cooking/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 71,
        "column": 45,
        "context": "=> {\\n  const methodData = allCookingMethods[method as unknown as keyof typeof allCookingMethods];\\n  "
      },
      {
        "file": "src/data/cooking/methods/dry/frying.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 413,
        "column": 3,
        "context": "rimary: 'Fire',\\n      secondary: 'Earth'\\n    }\\n  } as unknown as Record<string, Record<string, strin"
      },
      {
        "file": "src/data/cooking/methods/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 16,
        "column": 2,
        "context": "tegories\\n */\\nexport const allCookingMethods = {\\n  ...dryCookingMethods;\\n  ...wetCookingMethods;\\n  .."
      },
      {
        "file": "src/data/cooking/methods/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 17,
        "column": 2,
        "context": "t allCookingMethods = {\\n  ...dryCookingMethods;\\n  ...wetCookingMethods;\\n  ...molecularCookingMethods"
      },
      {
        "file": "src/data/cooking/methods/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 18,
        "column": 2,
        "context": "  ...dryCookingMethods;\\n  ...wetCookingMethods;\\n  ...molecularCookingMethods;\\n  ...traditionalCookin"
      },
      {
        "file": "src/data/cooking/methods/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 19,
        "column": 2,
        "context": "etCookingMethods;\\n  ...molecularCookingMethods;\\n  ...traditionalCookingMethods;\\n  ...rawCookingMetho"
      },
      {
        "file": "src/data/cooking/methods/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 20,
        "column": 2,
        "context": "CookingMethods;\\n  ...traditionalCookingMethods;\\n  ...rawCookingMethods;\\n  // Add other method catego"
      },
      {
        "file": "src/data/cooking/methods/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 22,
        "column": 2,
        "context": "other method categories as they are implemented\\n  ...transformationMethods\\n};\\n\\n/**\\n * Get cooking me"
      },
      {
        "file": "src/data/cooking/methods/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 37,
        "column": 38,
        "context": "gn);\\n    })\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\n/**\\n * Get cooki"
      },
      {
        "file": "src/data/cooking/methods/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 56,
        "column": 38,
        "context": "old;\\n    })\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\n/**\\n * Get cooki"
      },
      {
        "file": "src/data/cooking/methods/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 75,
        "column": 38,
        "context": "   )\\n    })\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\n/**\\n * Get cooki"
      },
      {
        "file": "src/data/cooking/methods/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 93,
        "column": 38,
        "context": "   )\\n    })\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\n// Export indivi"
      },
      {
        "file": "src/data/cooking/methods/template.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 29,
        "column": 54,
        "context": "favorableZodiac: ['zodiac1', 'zodiac2', 'zodiac3'] as unknown as any[], // Zodiac signs that enhance"
      },
      {
        "file": "src/data/cooking/methods/template.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 30,
        "column": 56,
        "context": "favorableZodiac: ['zodiac4', 'zodiac5', 'zodiac6'] as unknown as any[], // Zodiac signs that diminis"
      },
      {
        "file": "src/data/cooking/methods/transformation/smoking.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 64,
        "column": 1,
        "context": "d cancer risk',\\n    'Often high in sodium',\\n  ],\\n} as unknown as CookingMethodData;\\n"
      },
      {
        "file": "src/data/cooking/methods/wet/braising.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 210,
        "column": 3,
        "context": "ted gregsEnergy: heat - (entropy * reactivity)\\n  } as unknown as ThermodynamicProperties,\\n\\n  // Addi"
      },
      {
        "file": "src/data/cooking/methods/wet/braising.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 350,
        "column": 1,
        "context": "ooking process to preserve brightness'\\n    ]\\n  }\\n} as unknown as CookingMethodData;\\n"
      },
      {
        "file": "src/data/cooking/methods/wet/poaching.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 248,
        "column": 3,
        "context": "ted gregsEnergy: heat - (entropy * reactivity)\\n  } as unknown as ThermodynamicProperties,\\n\\n  // Addi"
      },
      {
        "file": "src/data/cooking/methods/wet/poaching.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 413,
        "column": 1,
        "context": " aromatics for visual and flavor connection'\\n  }\\n} as unknown as CookingMethodData;\\n"
      },
      {
        "file": "src/data/cooking/methods/wet/sous-vide.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 156,
        "column": 3,
        "context": "ted gregsEnergy: heat - (entropy * reactivity)\\n  } as unknown as ThermodynamicProperties,\\n\\n  // Addi"
      },
      {
        "file": "src/data/cooking/methods/wet/sous-vide.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 263,
        "column": 1,
        "context": "thod as alternative to vacuum sealing'\\n    ]\\n  }\\n} as unknown as CookingMethodData;\\n"
      },
      {
        "file": "src/data/cooking/methods/wet/stewing.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 169,
        "column": 3,
        "context": "ted gregsEnergy: heat - (entropy * reactivity)\\n  } as unknown as ThermodynamicProperties,\\n\\n  // Addi"
      },
      {
        "file": "src/data/cooking/methods/wet/stewing.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 355,
        "column": 1,
        "context": "ally managed through addition timing.'\\n    }\\n  }\\n} as unknown as CookingMethodData;\\n"
      },
      {
        "file": "src/data/cuisineFlavorProfiles.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 477,
        "column": 28,
        "context": "me-vegetarian']\\n  },\\n\\n  // More cuisines as needed...\\n};\\n\\n/**\\n * Calculate match between recipe's fl"
      },
      {
        "file": "src/data/cuisineFlavorProfiles.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 611,
        "column": 10,
        "context": ";\\n\\n  // Combine and sort by match score\\n  return [...results, ...regionalResults]\\n    .sort((a, b) ="
      },
      {
        "file": "src/data/cuisineFlavorProfiles.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 611,
        "column": 22,
        "context": "ine and sort by match score\\n  return [...results, ...regionalResults]\\n    .sort((a, b) => b.matchSco"
      },
      {
        "file": "src/data/cuisineFlavorProfiles.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 652,
        "column": 4,
        "context": " // Fusion suggestions\\n  const techniques = [\\n    ...new Set([\\n      ...profile1.signatureTechniques"
      },
      {
        "file": "src/data/cuisineFlavorProfiles.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 653,
        "column": 6,
        "context": "ons\\n  const techniques = [\\n    ...new Set([\\n      ...profile1.signatureTechniques.slice(0, 2),\\n     "
      },
      {
        "file": "src/data/cuisineFlavorProfiles.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 654,
        "column": 6,
        "context": "..profile1.signatureTechniques.slice(0, 2),\\n      ...profile2.signatureTechniques.slice(0, 2)\\n    ])"
      },
      {
        "file": "src/data/cuisineFlavorProfiles.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 659,
        "column": 4,
        "context": "ce(0, 2)\\n    ])\\n  ];\\n\\n  const ingredients = [\\n    ...new Set([\\n      ...profile1.signatureIngredient"
      },
      {
        "file": "src/data/cuisineFlavorProfiles.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 660,
        "column": 6,
        "context": ";\\n\\n  const ingredients = [\\n    ...new Set([\\n      ...profile1.signatureIngredients.slice(0, 3),\\n    "
      },
      {
        "file": "src/data/cuisineFlavorProfiles.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 661,
        "column": 6,
        "context": ".profile1.signatureIngredients.slice(0, 3),\\n      ...profile2.signatureIngredients.slice(0, 3)\\n    ]"
      },
      {
        "file": "src/data/cuisineFlavorProfiles.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 813,
        "column": 14,
        "context": "cipes\\n            .map(recipe => ({\\n              ...recipe;\\n              matchScore: 0.85 + Math.r"
      },
      {
        "file": "src/data/cuisineFlavorProfiles.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 837,
        "column": 16,
        "context": "].all.map((recipe: unknown) => ({\\n                ...(recipe as object);\\n                cuisine: cu"
      },
      {
        "file": "src/data/cuisineFlavorProfiles.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 844,
        "column": 30,
        "context": "              }));\\n\\n              allRecipes.push(...mealRecipes);\\n            }\\n\\n            // Als"
      },
      {
        "file": "src/data/cuisineFlavorProfiles.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 859,
        "column": 18,
        "context": "on].map((recipe: unknown) => ({\\n                  ...(recipe as object);\\n                  cuisine: "
      },
      {
        "file": "src/data/cuisineFlavorProfiles.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 867,
        "column": 32,
        "context": "            }));\\n\\n                allRecipes.push(...seasonalRecipes);\\n              }\\n            }"
      },
      {
        "file": "src/data/cuisineFlavorProfiles.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 904,
        "column": 14,
        "context": "cipes\\n            .map(recipe => ({\\n              ...recipe;\\n              matchScore: 0.8 + Math.ra"
      },
      {
        "file": "src/data/cuisineFlavorProfiles.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1045,
        "column": 14,
        "context": "            }\\n\\n            return {\\n              ...(recipe );\\n              matchScore: finalScore"
      },
      {
        "file": "src/data/cuisineFlavorProfiles.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1052,
        "column": 14,
        "context": ", scoreError);\\n            return {\\n              ...(recipe );\\n              matchScore: 0.5,\\n     "
      },
      {
        "file": "src/data/cuisineFlavorProfiles.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1066,
        "column": 6,
        "context": "ional, then others\\n    const allMatches = [\\n      ...exactCuisineMatches.map(recipe => ({\\n        .."
      },
      {
        "file": "src/data/cuisineFlavorProfiles.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1067,
        "column": 8,
        "context": "  ...exactCuisineMatches.map(recipe => ({\\n        ...(recipe );\\n        matchScore: 0.9 + Math.rando"
      },
      {
        "file": "src/data/cuisineFlavorProfiles.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1071,
        "column": 6,
        "context": ".9 + Math.random() * 0.1) * 100)\\n      })),\\n      ...regionalMatches.map(recipe => ({\\n        ...(re"
      },
      {
        "file": "src/data/cuisineFlavorProfiles.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1072,
        "column": 8,
        "context": "      ...regionalMatches.map(recipe => ({\\n        ...(recipe );\\n        matchScore: 0.8 + Math.rando"
      },
      {
        "file": "src/data/cuisineFlavorProfiles.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1076,
        "column": 6,
        "context": ".8 + Math.random() * 0.1) * 100)\\n      })),\\n      ...scoredOtherRecipes.slice(0, limit - exactCuisin"
      },
      {
        "file": "src/data/cuisineFlavorProfiles.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1229,
        "column": 8,
        "context": "   : 0.2\\n          : 0.2;\\n\\n      return {\\n        ...recipe;\\n        score: nameSimilarity\\n      };\\n"
      },
      {
        "file": "src/data/cuisines/greek.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1116,
        "column": 11,
        "context": "  ]\\n    },\\n    dessert: {\\n      all: [\\n        // ... dessert dishes\\n      ]\\n    }\\n  },\\n  traditiona"
      },
      {
        "file": "src/data/cuisines/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 73,
        "column": 25,
        "context": "<Cuisine>): Cuisine => {\\n  if (!cuisine) return { ...baseCuisine };\\n\\n  // Helper to combine 'all' re"
      },
      {
        "file": "src/data/cuisines/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 87,
        "column": 15,
        "context": "? mealData.all : [];\\n\\n    return {\\n      spring: [...(Array.isArray(mealData.spring) ? mealData.spri"
      },
      {
        "file": "src/data/cuisines/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 87,
        "column": 75,
        "context": "isArray(mealData.spring) ? mealData.spring : []), ...allRecipes],\\n      summer: [...(Array.isArray(m"
      },
      {
        "file": "src/data/cuisines/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 88,
        "column": 15,
        "context": "Data.spring : []), ...allRecipes],\\n      summer: [...(Array.isArray(mealData.summer) ? mealData.summ"
      },
      {
        "file": "src/data/cuisines/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 88,
        "column": 75,
        "context": "isArray(mealData.summer) ? mealData.summer : []), ...allRecipes],\\n      autumn: [...(Array.isArray(m"
      },
      {
        "file": "src/data/cuisines/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 89,
        "column": 15,
        "context": "Data.summer : []), ...allRecipes],\\n      autumn: [...(Array.isArray(mealData.autumn) ? mealData.autu"
      },
      {
        "file": "src/data/cuisines/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 89,
        "column": 75,
        "context": "isArray(mealData.autumn) ? mealData.autumn : []), ...allRecipes],\\n      winter: [...(Array.isArray(m"
      },
      {
        "file": "src/data/cuisines/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 90,
        "column": 15,
        "context": "Data.autumn : []), ...allRecipes],\\n      winter: [...(Array.isArray(mealData.winter) ? mealData.wint"
      },
      {
        "file": "src/data/cuisines/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 90,
        "column": 75,
        "context": "isArray(mealData.winter) ? mealData.winter : []), ...allRecipes],\\n    };\\n  };\\n\\n  // Ensure the cuisi"
      },
      {
        "file": "src/data/cuisines/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 121,
        "column": 43,
        "context": "ies ||\\n      (cuisine as any).elementalState || { ...baseCuisine.elementalProperties }, // For backw"
      },
      {
        "file": "src/data/cuisines/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 133,
        "column": 40,
        "context": "uisine>),\\n  Chinese: processCuisineRecipes(chinese as unknown as Partial<Cuisine>),\\n  French: proces"
      },
      {
        "file": "src/data/cuisines/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 140,
        "column": 40,
        "context": "uisine>),\\n  Mexican: processCuisineRecipes(mexican as unknown as Partial<Cuisine>),\\n  'Middle Easter"
      },
      {
        "file": "src/data/cuisines.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 78,
        "column": 4,
        "context": " {\\n  const cuisineData = cuisine ;\\n  return {\\n    ...cuisineData;\\n    // Convert elementalProperties"
      },
      {
        "file": "src/data/enhancedDishes.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 57,
        "column": 4,
        "context": ": string, originalDish: unknown) {\\n  return {\\n    ...originalDish,\\n    properties: getDishProperties"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 13,
        "column": 2,
        "context": "g, IngredientMapping> = fixIngredientMappings({\\n  ...citrus;\\n  ...berries;\\n  ...tropical;\\n  ...stone"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 14,
        "column": 2,
        "context": "Mapping> = fixIngredientMappings({\\n  ...citrus;\\n  ...berries;\\n  ...tropical;\\n  ...stoneFruit;\\n  ...p"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 15,
        "column": 2,
        "context": "IngredientMappings({\\n  ...citrus;\\n  ...berries;\\n  ...tropical;\\n  ...stoneFruit;\\n  ...pome;\\n  ...melo"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 16,
        "column": 2,
        "context": "ngs({\\n  ...citrus;\\n  ...berries;\\n  ...tropical;\\n  ...stoneFruit;\\n  ...pome;\\n  ...melons\\n});\\n\\n// Expo"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 17,
        "column": 2,
        "context": ";\\n  ...berries;\\n  ...tropical;\\n  ...stoneFruit;\\n  ...pome;\\n  ...melons\\n});\\n\\n// Export individual cat"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 18,
        "column": 2,
        "context": "ies;\\n  ...tropical;\\n  ...stoneFruit;\\n  ...pome;\\n  ...melons\\n});\\n\\n// Export individual categories\\nexp"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 32,
        "column": 38,
        "context": "'');\\n    })\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\nexport const get"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 43,
        "column": 38,
        "context": "'));\\n    })\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\nexport const get"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 54,
        "column": 38,
        "context": "'')]\\n    })\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\nexport const fin"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 97,
        "column": 38,
        "context": "'));\\n    })\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\nexport const get"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 118,
        "column": 38,
        "context": "   }\\n    })\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\n// Add new valid"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 217,
        "column": 10,
        "context": " 1);\\n        maxCategorySize: Math.max(\\n          ...testCategories.map(cat => Number(Object.keys(su"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 220,
        "column": 10,
        "context": "  ),\\n        minCategorySize: Math.min(\\n          ...testCategories.map(cat => Number(Object.keys(su"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 225,
        "column": 12,
        "context": "e:\\n          1 -\\n          (Math.max(\\n            ...testCategories.map(cat => Number(Object.keys(su"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 228,
        "column": 14,
        "context": "          ) -\\n            Math.min(\\n              ...testCategories.map(cat => Number(Object.keys(su"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 317,
        "column": 10,
        "context": "gth;\\n        maxSeasonalSize: Math.max(\\n          ...testSeasons.map(season => Object.keys(seasonalF"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 320,
        "column": 10,
        "context": "  ),\\n        minSeasonalSize: Math.min(\\n          ...testSeasons.map(season => Object.keys(seasonalF"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 324,
        "column": 20,
        "context": "easonalBalance:\\n          1 -\\n          (Math.max(...testSeasons.map(season => Object.keys(seasonalF"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 325,
        "column": 21,
        "context": "nalFunc(season)).length)) -;\\n            Math.min(...testSeasons.map(season => Object.keys(seasonalF"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 416,
        "column": 10,
        "context": ";\\n        maxPreparationSize: Math.max(\\n          ...testMethods.map(method => Object.keys(preparati"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 419,
        "column": 10,
        "context": ",\\n        minPreparationSize: Math.min(\\n          ...testMethods.map(method => Object.keys(preparati"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 423,
        "column": 20,
        "context": "arationBalance:\\n          1 -\\n          (Math.max(...testMethods.map(method => Object.keys(preparati"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 424,
        "column": 21,
        "context": "ionFunc(method)).length)) -;\\n            Math.min(...testMethods.map(method => Object.keys(preparati"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 502,
        "column": 10,
        "context": "ength;\\n        maxMethodSize: Math.max(\\n          ...testMethods.map(method => Object.keys(getFruits"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 505,
        "column": 10,
        "context": "    ),\\n        minMethodSize: Math.min(\\n          ...testMethods.map(method => Object.keys(getFruits"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 510,
        "column": 12,
        "context": "e:\\n          1 -\\n          (Math.max(\\n            ...testMethods.map(method => Object.keys(getFruits"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 513,
        "column": 14,
        "context": "          ) -\\n            Math.min(\\n              ...testMethods.map(method => Object.keys(getFruits"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 597,
        "column": 10,
        "context": "length,\\n        maxIntegrity: Math.max(\\n          ...testMethods.map(method => {\\n            const r"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 603,
        "column": 10,
        "context": "     ),\\n        minIntegrity: Math.min(\\n          ...testMethods.map(method => {\\n            const r"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 611,
        "column": 12,
        "context": "e:\\n          1 -\\n          (Math.max(\\n            ...testMethods.map(method => {\\n              const"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 617,
        "column": 14,
        "context": "          ) -\\n            Math.min(\\n              ...testMethods.map(method => {\\n                con"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 698,
        "column": 10,
        "context": ".length;\\n        maxTypeSize: Math.max(\\n          ...fruitTypes.map(type => Object.keys(getFruitsByS"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 701,
        "column": 10,
        "context": "      ),\\n        minTypeSize: Math.min(\\n          ...fruitTypes.map(type => Object.keys(getFruitsByS"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 705,
        "column": 20,
        "context": "   typeBalance:\\n          1 -\\n          (Math.max(...fruitTypes.map(type => Object.keys(getFruitsByS"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 706,
        "column": 21,
        "context": "bCategory(type)).length)) -;\\n            Math.min(...fruitTypes.map(type => Object.keys(getFruitsByS"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 795,
        "column": 33,
        "context": "leFruits.length;\\n        maxConnections: Math.max(...sampleFruits.map(fruit => compatibilityFunc(fru"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 796,
        "column": 33,
        "context": "fruit).length)),\\n        minConnections: Math.min(...sampleFruits.map(fruit => compatibilityFunc(fru"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 974,
        "column": 18,
        "context": "  planetaryBalance:\\n        1 -\\n        (Math.max(...astrologicalAnalysis.planetaryAnalysis.map(p =>"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 975,
        "column": 19,
        "context": "sis.map(p => p.fruitCount)) -;\\n          Math.min(...astrologicalAnalysis.planetaryAnalysis.map(p =>"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 979,
        "column": 18,
        "context": "  elementalBalance:\\n        1 -\\n        (Math.max(...astrologicalAnalysis.elementalAnalysis.map(e =>"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 980,
        "column": 19,
        "context": "sis.map(e => e.fruitCount)) -;\\n          Math.min(...astrologicalAnalysis.elementalAnalysis.map(e =>"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1188,
        "column": 6,
        "context": "ionStructure.validationBalance = Math.min(;\\n      ...[\\n        validationStructure.corePropertyCover"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 29,
        "column": 29,
        "context": "er(([_, value]) => {\\n      const fruitData = value as unknown as any;\\n      return String(fruitData."
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 39,
        "column": 29,
        "context": "er(([_, value]) => {\\n      const fruitData = value as unknown as any;\\n      const seasonData = fruit"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 50,
        "column": 29,
        "context": "er(([_, value]) => {\\n      const fruitData = value as unknown as any;\\n      const preparationData = "
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 61,
        "column": 25,
        "context": "  if (!fruit) return [];\\n  const fruitData = fruit as unknown as any;\\n  const affinitiesData = fruit"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 92,
        "column": 29,
        "context": "er(([_, value]) => {\\n      const fruitData = value as unknown as any;\\n      const astroProfile = fru"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 106,
        "column": 29,
        "context": "er(([_, value]) => {\\n      const fruitData = value as unknown as any;\\n      const astroProfile = fru"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 130,
        "column": 29,
        "context": "lementalAffinity'];\\n\\n  const profileData = profile as unknown as any;\\n  return requiredProperties.ev"
      },
      {
        "file": "src/data/ingredients/fruits/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 150,
        "column": 35,
        "context": "storage'\\n  ];\\n\\n  const ingredientData = ingredient as unknown as any;\\n  return requiredProperties.ev"
      },
      {
        "file": "src/data/ingredients/grains/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 10,
        "column": 2,
        "context": "g, IngredientMapping> = fixIngredientMappings({\\n  ...wholeGrains,\\n  ...refinedGrains,\\n  ...pseudoGra"
      },
      {
        "file": "src/data/ingredients/grains/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 11,
        "column": 2,
        "context": "ng> = fixIngredientMappings({\\n  ...wholeGrains,\\n  ...refinedGrains,\\n  ...pseudoGrains,\\n});\\n\\n// Fix t"
      },
      {
        "file": "src/data/ingredients/grains/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 12,
        "column": 2,
        "context": "appings({\\n  ...wholeGrains,\\n  ...refinedGrains,\\n  ...pseudoGrains,\\n});\\n\\n// Fix the raw grains object"
      },
      {
        "file": "src/data/ingredients/grains/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 17,
        "column": 2,
        "context": "ngredient mapping structure\\nconst rawGrains = {\\n  ...wholeGrains,\\n  ...refinedGrains,\\n  ...pseudoGra"
      },
      {
        "file": "src/data/ingredients/grains/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 18,
        "column": 2,
        "context": "structure\\nconst rawGrains = {\\n  ...wholeGrains,\\n  ...refinedGrains,\\n  ...pseudoGrains,\\n};\\n\\n// Apply "
      },
      {
        "file": "src/data/ingredients/grains/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 19,
        "column": 2,
        "context": "rains = {\\n  ...wholeGrains,\\n  ...refinedGrains,\\n  ...pseudoGrains,\\n};\\n\\n// Apply the fix to ensure al"
      },
      {
        "file": "src/data/ingredients/grains/pseudoGrains/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 11,
        "column": 2,
        "context": "doGrains: Record<string, IngredientMapping> = {\\n  ...quinoa,\\n  ...amaranth,\\n  ...buckwheat,\\n  ...chi"
      },
      {
        "file": "src/data/ingredients/grains/pseudoGrains/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 12,
        "column": 2,
        "context": "ord<string, IngredientMapping> = {\\n  ...quinoa,\\n  ...amaranth,\\n  ...buckwheat,\\n  ...chia,\\n  ...flaxs"
      },
      {
        "file": "src/data/ingredients/grains/pseudoGrains/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 13,
        "column": 2,
        "context": "redientMapping> = {\\n  ...quinoa,\\n  ...amaranth,\\n  ...buckwheat,\\n  ...chia,\\n  ...flaxseed,\\n};\\n\\n// Exp"
      },
      {
        "file": "src/data/ingredients/grains/pseudoGrains/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 14,
        "column": 2,
        "context": "= {\\n  ...quinoa,\\n  ...amaranth,\\n  ...buckwheat,\\n  ...chia,\\n  ...flaxseed,\\n};\\n\\n// Export individual p"
      },
      {
        "file": "src/data/ingredients/grains/pseudoGrains/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 15,
        "column": 2,
        "context": "inoa,\\n  ...amaranth,\\n  ...buckwheat,\\n  ...chia,\\n  ...flaxseed,\\n};\\n\\n// Export individual pseudo grain"
      },
      {
        "file": "src/data/ingredients/herbs/freshHerbs.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 282,
        "column": 35,
        "context": "']\\n    }\\n  },\\n\\n  // More herbs would be added here...\\n};\\n\\n// ‚úÖ Pattern MM-1: Type assertion for Zodi"
      },
      {
        "file": "src/data/ingredients/herbs/freshHerbs.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 287,
        "column": 15,
        "context": "eshHerbs = fixIngredientMappings(,\\n  rawFreshHerbs as unknown as Record<string, Partial<IngredientMa"
      },
      {
        "file": "src/data/ingredients/herbs/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 88,
        "column": 4,
        "context": "ops,\\n    category: properties.category || '',\\n    ...herbValues;\\n    ...properties\\n  } as Ingredient"
      },
      {
        "file": "src/data/ingredients/herbs/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 89,
        "column": 4,
        "context": "properties.category || '',\\n    ...herbValues;\\n    ...properties\\n  } as IngredientMapping;\\n}\\n\\n// Comb"
      },
      {
        "file": "src/data/ingredients/herbs/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 95,
        "column": 2,
        "context": "g, IngredientMapping> = fixIngredientMappings({\\n  ...freshHerbs;\\n  ...driedHerbs;\\n  ...aromaticHerbs"
      },
      {
        "file": "src/data/ingredients/herbs/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 96,
        "column": 2,
        "context": "ing> = fixIngredientMappings({\\n  ...freshHerbs;\\n  ...driedHerbs;\\n  ...aromaticHerbs;\\n  ...medicinalH"
      },
      {
        "file": "src/data/ingredients/herbs/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 97,
        "column": 2,
        "context": "entMappings({\\n  ...freshHerbs;\\n  ...driedHerbs;\\n  ...aromaticHerbs;\\n  ...medicinalHerbs;\\n\\n  // Custo"
      },
      {
        "file": "src/data/ingredients/herbs/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 98,
        "column": 2,
        "context": "reshHerbs;\\n  ...driedHerbs;\\n  ...aromaticHerbs;\\n  ...medicinalHerbs;\\n\\n  // Custom herbs\\n  basil: cre"
      },
      {
        "file": "src/data/ingredients/herbs/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 321,
        "column": 2,
        "context": "export const allHerbs = fixIngredientMappings({\\n  ...freshHerbs;\\n  ...driedHerbs;\\n  ...aromaticHerbs"
      },
      {
        "file": "src/data/ingredients/herbs/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 322,
        "column": 2,
        "context": "erbs = fixIngredientMappings({\\n  ...freshHerbs;\\n  ...driedHerbs;\\n  ...aromaticHerbs;\\n  ...medicinalH"
      },
      {
        "file": "src/data/ingredients/herbs/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 323,
        "column": 2,
        "context": "entMappings({\\n  ...freshHerbs;\\n  ...driedHerbs;\\n  ...aromaticHerbs;\\n  ...medicinalHerbs\\n});\\n\\n// Expo"
      },
      {
        "file": "src/data/ingredients/herbs/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 324,
        "column": 2,
        "context": "reshHerbs;\\n  ...driedHerbs;\\n  ...aromaticHerbs;\\n  ...medicinalHerbs\\n});\\n\\n// Export a list of herb na"
      },
      {
        "file": "src/data/ingredients/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 38,
        "column": 2,
        "context": "/vinegars/vinegars';\\n\\nexport const proteins = {\\n  ...meatsData;\\n  ...poultryData;\\n  ...seafoodData;\\n"
      },
      {
        "file": "src/data/ingredients/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 39,
        "column": 2,
        "context": "rs';\\n\\nexport const proteins = {\\n  ...meatsData;\\n  ...poultryData;\\n  ...seafoodData;\\n  ...plantBasedD"
      },
      {
        "file": "src/data/ingredients/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 40,
        "column": 2,
        "context": " proteins = {\\n  ...meatsData;\\n  ...poultryData;\\n  ...seafoodData;\\n  ...plantBasedData\\n};\\n\\n// Calcula"
      },
      {
        "file": "src/data/ingredients/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 41,
        "column": 2,
        "context": ".meatsData;\\n  ...poultryData;\\n  ...seafoodData;\\n  ...plantBasedData\\n};\\n\\n// Calculate elemental prope"
      },
      {
        "file": "src/data/ingredients/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 197,
        "column": 4,
        "context": "  whenCooked: { Fire: 0.1, Air: 0.05 }\\n    },\\n    ...ingredientData\\n  });\\n\\n  return standardized as "
      },
      {
        "file": "src/data/ingredients/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 255,
        "column": 10,
        "context": "string, number]);\\n\\n        acc[key] = {\\n          ...processedIngredient;\\n          alchemicalProper"
      },
      {
        "file": "src/data/ingredients/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 283,
        "column": 2,
        "context": "picesCollection = processIngredientCollection({\\n  ...spices;\\n  ...warmSpices\\n});\\nexport const _veget"
      },
      {
        "file": "src/data/ingredients/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 284,
        "column": 2,
        "context": "on = processIngredientCollection({\\n  ...spices;\\n  ...warmSpices\\n});\\nexport const _vegetablesCollecti"
      },
      {
        "file": "src/data/ingredients/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 381,
        "column": 32,
        "context": "ts is initialized\\nexport const ingredientsMap = { ...allIngredients };\\n\\n// Function to get all ingre"
      },
      {
        "file": "src/data/ingredients/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 70,
        "column": 42,
        "context": "ailable\\n  const ingredientDataObj = ingredientData as unknown as any;\\n  if (ingredientDataObj.astrol"
      },
      {
        "file": "src/data/ingredients/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 184,
        "column": 35,
        "context": "the ingredient\\n  const ingredientData = ingredient as unknown as any;\\n  const standardized = standar"
      },
      {
        "file": "src/data/ingredients/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 189,
        "column": 20,
        "context": "calculateElementalProperties(\\n      ingredientData as unknown as Ingredient | UnifiedIngredient,\\n   "
      },
      {
        "file": "src/data/ingredients/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 214,
        "column": 29,
        "context": "chemicalProperties(;\\n          processedIngredient as unknown as Ingredient,\\n        ),\\n        cons"
      },
      {
        "file": "src/data/ingredients/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 218,
        "column": 31,
        "context": "  alchemicalProps,\\n          ((processedIngredient as unknown as any).elementalProperties as Element"
      },
      {
        "file": "src/data/ingredients/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 228,
        "column": 31,
        "context": "gredientModality(;\\n          ((processedIngredient as unknown as any).qualities as string[]) || [],\\n"
      },
      {
        "file": "src/data/ingredients/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 229,
        "column": 31,
        "context": "s string[]) || [],\\n          ((processedIngredient as unknown as any).elementalProperties as Element"
      },
      {
        "file": "src/data/ingredients/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 239,
        "column": 30,
        "context": " = Object.entries(;\\n          (processedIngredient as unknown as any).elementalProperties || {\\n     "
      },
      {
        "file": "src/data/ingredients/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 261,
        "column": 58,
        "context": "  astrologicalCorrespondence: (processedIngredient as unknown as any).astrologicalCorrespondence || "
      },
      {
        "file": "src/data/ingredients/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 263,
        "column": 32,
        "context": "gRecommendations:\\n            (processedIngredient as unknown as any).pairingRecommendations || unde"
      },
      {
        "file": "src/data/ingredients/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 264,
        "column": 46,
        "context": "ed,\\n          celestialBoost: (processedIngredient as unknown as any).celestialBoost || undefined,\\n "
      },
      {
        "file": "src/data/ingredients/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 266,
        "column": 32,
        "context": "anetaryInfluence:\\n            (processedIngredient as unknown as any).planetaryInfluence || undefine"
      },
      {
        "file": "src/data/ingredients/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 267,
        "column": 9,
        "context": " as any).planetaryInfluence || undefined\\n        } as unknown as Ingredient;\\n      } catch (error) {"
      },
      {
        "file": "src/data/ingredients/oils/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 17,
        "column": 36,
        "context": "= 'cooking');\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\nexport const _finis"
      },
      {
        "file": "src/data/ingredients/oils/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 21,
        "column": 36,
        "context": "'finishing');\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\nexport const _suppl"
      },
      {
        "file": "src/data/ingredients/oils/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 25,
        "column": 36,
        "context": "supplement');\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\nexport const _speci"
      },
      {
        "file": "src/data/ingredients/oils/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 35,
        "column": 36,
        "context": "lement');\\n  )\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\n// Export by elemen"
      },
      {
        "file": "src/data/ingredients/oils/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 45,
        "column": 36,
        "context": " 'Fire'),\\n  )\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\nexport const _water"
      },
      {
        "file": "src/data/ingredients/oils/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 54,
        "column": 36,
        "context": "'Water'),\\n  )\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\nexport const _earth"
      },
      {
        "file": "src/data/ingredients/oils/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 63,
        "column": 36,
        "context": "'Earth'),\\n  )\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\nexport const _airOi"
      },
      {
        "file": "src/data/ingredients/oils/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 72,
        "column": 36,
        "context": "= 'Air'),\\n  )\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\n// Export by culina"
      },
      {
        "file": "src/data/ingredients/oils/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 85,
        "column": 36,
        "context": "epfrying;\\n  )\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\nexport const _bakin"
      },
      {
        "file": "src/data/ingredients/oils/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 89,
        "column": 36,
        "context": "ions?.baking)\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\nexport const _dress"
      },
      {
        "file": "src/data/ingredients/oils/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 93,
        "column": 36,
        "context": "s?.dressings)\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\nexport const _nutOi"
      },
      {
        "file": "src/data/ingredients/oils/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 103,
        "column": 36,
        "context": "peanut');\\n  )\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\n// For backward com"
      },
      {
        "file": "src/data/ingredients/proteins/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 15,
        "column": 2,
        "context": "g, IngredientMapping> = fixIngredientMappings({\\n  ...seafood;\\n  ...poultry;\\n  ...plantBased;\\n  ...me"
      },
      {
        "file": "src/data/ingredients/proteins/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 16,
        "column": 2,
        "context": "apping> = fixIngredientMappings({\\n  ...seafood;\\n  ...poultry;\\n  ...plantBased;\\n  ...meats;\\n  ...legu"
      },
      {
        "file": "src/data/ingredients/proteins/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 17,
        "column": 2,
        "context": "ngredientMappings({\\n  ...seafood;\\n  ...poultry;\\n  ...plantBased;\\n  ...meats;\\n  ...legumes;\\n  ...eggs"
      },
      {
        "file": "src/data/ingredients/proteins/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 18,
        "column": 2,
        "context": "({\\n  ...seafood;\\n  ...poultry;\\n  ...plantBased;\\n  ...meats;\\n  ...legumes;\\n  ...eggs;\\n  ...dairy\\n});\\n"
      },
      {
        "file": "src/data/ingredients/proteins/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 19,
        "column": 2,
        "context": "ood;\\n  ...poultry;\\n  ...plantBased;\\n  ...meats;\\n  ...legumes;\\n  ...eggs;\\n  ...dairy\\n});\\n\\n// Export i"
      },
      {
        "file": "src/data/ingredients/proteins/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 20,
        "column": 2,
        "context": "try;\\n  ...plantBased;\\n  ...meats;\\n  ...legumes;\\n  ...eggs;\\n  ...dairy\\n});\\n\\n// Export individual cate"
      },
      {
        "file": "src/data/ingredients/proteins/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 21,
        "column": 2,
        "context": "lantBased;\\n  ...meats;\\n  ...legumes;\\n  ...eggs;\\n  ...dairy\\n});\\n\\n// Export individual categories\\nexpo"
      },
      {
        "file": "src/data/ingredients/proteins/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 53,
        "column": 38,
        "context": "es(season))\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {} as IngredientMapping);"
      },
      {
        "file": "src/data/ingredients/proteins/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 59,
        "column": 38,
        "context": "(minScore))\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {} as IngredientMapping);"
      },
      {
        "file": "src/data/ingredients/proteins/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 68,
        "column": 38,
        "context": "ion);\\n    )\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {} as IngredientMapping);"
      },
      {
        "file": "src/data/ingredients/proteins/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 75,
        "column": 38,
        "context": " category),\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {} as IngredientMapping);"
      },
      {
        "file": "src/data/ingredients/proteins/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 83,
        "column": 38,
        "context": "hod),\\n    )\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {} as IngredientMapping);"
      },
      {
        "file": "src/data/ingredients/proteins/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 93,
        "column": 38,
        "context": "sFat\\n    })\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {} as IngredientMapping);"
      },
      {
        "file": "src/data/ingredients/proteins/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 380,
        "column": 38,
        "context": "bCategory),\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {} as IngredientMapping);"
      },
      {
        "file": "src/data/ingredients/proteins/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 386,
        "column": 38,
        "context": "s('vegan'))\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {} as IngredientMapping);"
      },
      {
        "file": "src/data/ingredients/proteins/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 280,
        "column": 41,
        "context": "]\\n} => {\\n  const protein = _proteins[_proteinName] as unknown as Ingredient;\\n  if (!protein) throw n"
      },
      {
        "file": "src/data/ingredients/proteins/plantBased.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 20,
        "column": 4,
        "context": "  },\\n    category: properties.category || '';\\n    ...properties\\n  };\\n}\\n\\nconst rawPlantBased: Record<"
      },
      {
        "file": "src/data/ingredients/seasonings/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 14,
        "column": 2,
        "context": "g, IngredientMapping> = fixIngredientMappings({\\n  ...spices;\\n  ...salts;\\n  ...peppers;\\n  ...herbs;\\n "
      },
      {
        "file": "src/data/ingredients/seasonings/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 15,
        "column": 2,
        "context": "Mapping> = fixIngredientMappings({\\n  ...spices;\\n  ...salts;\\n  ...peppers;\\n  ...herbs;\\n  ...aromatics"
      },
      {
        "file": "src/data/ingredients/seasonings/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 16,
        "column": 2,
        "context": "ixIngredientMappings({\\n  ...spices;\\n  ...salts;\\n  ...peppers;\\n  ...herbs;\\n  ...aromatics\\n});\\n\\n// Exp"
      },
      {
        "file": "src/data/ingredients/seasonings/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 17,
        "column": 2,
        "context": "ppings({\\n  ...spices;\\n  ...salts;\\n  ...peppers;\\n  ...herbs;\\n  ...aromatics\\n});\\n\\n// Export individual"
      },
      {
        "file": "src/data/ingredients/seasonings/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 18,
        "column": 2,
        "context": "..spices;\\n  ...salts;\\n  ...peppers;\\n  ...herbs;\\n  ...aromatics\\n});\\n\\n// Export individual categories,"
      },
      {
        "file": "src/data/ingredients/seasonings/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 52,
        "column": 6,
        "context": "e((acc, [key, value]) => {\\n    acc[key] = {\\n      ...value;\\n      category: 'seasoning',\\n      subCa"
      },
      {
        "file": "src/data/ingredients/seasonings/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 67,
        "column": 38,
        "context": " category),\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {} as IngredientMapping);"
      },
      {
        "file": "src/data/ingredients/seasonings/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 73,
        "column": 38,
        "context": "intensity))\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {} as IngredientMapping);"
      },
      {
        "file": "src/data/ingredients/seasonings/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 100,
        "column": 38,
        "context": "ng),,\\n    )\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {} as IngredientMapping);"
      },
      {
        "file": "src/data/ingredients/seasonings/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 114,
        "column": 29,
        "context": "s[key] = [];\\n      }\\n      combinations[key].push(...value.traditionalCombinations);\\n    }\\n  });\\n\\n  "
      },
      {
        "file": "src/data/ingredients/seasonings/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 124,
        "column": 38,
        "context": "s?.[phase])\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {} as IngredientMapping);"
      },
      {
        "file": "src/data/ingredients/seasonings/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 136,
        "column": 38,
        "context": "   ),\\n    )\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {} as IngredientMapping);"
      },
      {
        "file": "src/data/ingredients/seasonings/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 77,
        "column": 45,
        "context": "=> {\\n  const seasoning = seasonings[seasoningName] as unknown as Ingredient;\\n  if (!seasoning) retur"
      },
      {
        "file": "src/data/ingredients/seasonings/vinegars.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 16,
        "column": 4,
        "context": "  },\\n    category: properties.category || '',\\n    ...properties\\n  };\\n}\\n\\nconst rawVinegars = {\\n  rice"
      },
      {
        "file": "src/data/ingredients/spices/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 35,
        "column": 6,
        "context": "ties).reduce(\\n    (acc, [key, value]) => ({\\n      ...acc;\\n      [key]: value / (sum || 1)\\n    }),\\n  "
      },
      {
        "file": "src/data/ingredients/spices/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 62,
        "column": 6,
        "context": "yBase + Math.random() * 2))),\\n\\n    return {\\n      ...acc;\\n      [key]: {\\n        ...spice;\\n        e"
      },
      {
        "file": "src/data/ingredients/spices/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 64,
        "column": 8,
        "context": "    return {\\n      ...acc;\\n      [key]: {\\n        ...spice;\\n        elementalProperties: normalizedP"
      },
      {
        "file": "src/data/ingredients/spices/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 76,
        "column": 2,
        "context": "g, IngredientMapping> = fixIngredientMappings({\\n  ...wholeSpices;\\n  ...groundSpices;\\n  ...spiceBlend"
      },
      {
        "file": "src/data/ingredients/spices/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 77,
        "column": 2,
        "context": "ng> = fixIngredientMappings({\\n  ...wholeSpices;\\n  ...groundSpices;\\n  ...spiceBlends;\\n  cumin: {\\n    "
      },
      {
        "file": "src/data/ingredients/spices/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 78,
        "column": 2,
        "context": "Mappings({\\n  ...wholeSpices;\\n  ...groundSpices;\\n  ...spiceBlends;\\n  cumin: {\\n    name: 'cumin',\\n    "
      },
      {
        "file": "src/data/ingredients/spices/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 309,
        "column": 38,
        "context": "bCategory),\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\nexport const _ge"
      },
      {
        "file": "src/data/ingredients/spices/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 320,
        "column": 38,
        "context": "gin;\\n    })\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\nexport const _ge"
      },
      {
        "file": "src/data/ingredients/spices/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 329,
        "column": 38,
        "context": "inStrength)\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\nexport const _ge"
      },
      {
        "file": "src/data/ingredients/spices/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 386,
        "column": 38,
        "context": "od);\\n    })\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\nexport const _ge"
      },
      {
        "file": "src/data/ingredients/spices/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 396,
        "column": 38,
        "context": "ion],\\n    )\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\nexport const _ge"
      },
      {
        "file": "src/data/ingredients/spices/warmSpices.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 64,
        "column": 7,
        "context": "   source: 'USDA FoodData Central',\\n    },\\n    // ... rest of cinnamon properties\\n  },\\n  // ... othe"
      },
      {
        "file": "src/data/ingredients/spices/warmSpices.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 66,
        "column": 5,
        "context": "\\n    // ... rest of cinnamon properties\\n  },\\n  // ... other warm spices\\n};\\n\\n// Fix the ingredient ma"
      },
      {
        "file": "src/data/ingredients/vegetables/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 15,
        "column": 2,
        "context": "g, IngredientMapping> = fixIngredientMappings({\\n  ...leafyGreens;\\n  ...roots;\\n  ...cruciferous;\\n  .."
      },
      {
        "file": "src/data/ingredients/vegetables/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 16,
        "column": 2,
        "context": "ng> = fixIngredientMappings({\\n  ...leafyGreens;\\n  ...roots;\\n  ...cruciferous;\\n  ...nightshades;\\n  .."
      },
      {
        "file": "src/data/ingredients/vegetables/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 17,
        "column": 2,
        "context": "redientMappings({\\n  ...leafyGreens;\\n  ...roots;\\n  ...cruciferous;\\n  ...nightshades;\\n  ...alliums;\\n  "
      },
      {
        "file": "src/data/ingredients/vegetables/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 18,
        "column": 2,
        "context": "  ...leafyGreens;\\n  ...roots;\\n  ...cruciferous;\\n  ...nightshades;\\n  ...alliums;\\n  ...squash;\\n  ...st"
      },
      {
        "file": "src/data/ingredients/vegetables/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 19,
        "column": 2,
        "context": "  ...roots;\\n  ...cruciferous;\\n  ...nightshades;\\n  ...alliums;\\n  ...squash;\\n  ...starchyVegetables;\\n "
      },
      {
        "file": "src/data/ingredients/vegetables/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 20,
        "column": 2,
        "context": "...cruciferous;\\n  ...nightshades;\\n  ...alliums;\\n  ...squash;\\n  ...starchyVegetables;\\n  ...legumes\\n})"
      },
      {
        "file": "src/data/ingredients/vegetables/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 21,
        "column": 2,
        "context": "s;\\n  ...nightshades;\\n  ...alliums;\\n  ...squash;\\n  ...starchyVegetables;\\n  ...legumes\\n});\\n\\n// Create "
      },
      {
        "file": "src/data/ingredients/vegetables/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 22,
        "column": 2,
        "context": "..alliums;\\n  ...squash;\\n  ...starchyVegetables;\\n  ...legumes\\n});\\n\\n// Create enhanced vegetables with"
      },
      {
        "file": "src/data/ingredients/vegetables/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 49,
        "column": 38,
        "context": "bCategory),\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\nexport const _ge"
      },
      {
        "file": "src/data/ingredients/vegetables/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 55,
        "column": 38,
        "context": "es(season))\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\nexport const _ge"
      },
      {
        "file": "src/data/ingredients/vegetables/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 63,
        "column": 38,
        "context": "hod),\\n    )\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\nexport default r"
      },
      {
        "file": "src/data/ingredients/vegetables/leafyGreens.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 64,
        "column": 4,
        "context": "mented',\\n      'juiced',\\n      'soup',\\n    ],\\n    ...generateVegetableAttributes({\\n      water: 84,\\n"
      },
      {
        "file": "src/data/ingredients/vegetables/leafyGreens.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 349,
        "column": 4,
        "context": "ookingMethods: ['raw', 'steamed', 'saut√©ed'],\\n    ...generateVegetableAttributes({\\n      water: 91,\\n"
      },
      {
        "file": "src/data/ingredients/vegetables/leafyGreens.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 411,
        "column": 4,
        "context": "ngMethods: ['steamed', 'saut√©ed', 'braised'],\\n    ...generateVegetableAttributes({\\n      water: 87,\\n"
      },
      {
        "file": "src/data/ingredients/vegetables/starchy.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 198,
        "column": 22,
        "context": "g> = fixIngredientMappings(\\n  rawStarchyVegetables as unknown as Record<string, Partial<IngredientMa"
      },
      {
        "file": "src/data/ingredients/vinegars/consolidated_vinegars.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 221,
        "column": 13,
        "context": "entMapping> = fixIngredientMappings(\\n  rawVinegars as unknown as Record<string, Partial<IngredientMa"
      },
      {
        "file": "src/data/ingredients/vinegars/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 15,
        "column": 36,
        "context": " === 'wine');\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\nexport const _fruit"
      },
      {
        "file": "src/data/ingredients/vinegars/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 19,
        "column": 36,
        "context": "=== 'fruit');\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\nexport const _grain"
      },
      {
        "file": "src/data/ingredients/vinegars/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 23,
        "column": 36,
        "context": "=== 'grain');\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\nexport const _speci"
      },
      {
        "file": "src/data/ingredients/vinegars/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 35,
        "column": 36,
        "context": "'grain');\\n  )\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n"
      },
      {
        "file": "src/data/ingredients/vinegars/vinegars.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 315,
        "column": 2,
        "context": "rt const _allVinegars = fixIngredientMappings({\\n  ...rawVinegars,\\n  ...rawArtisanalVinegars,\\n  ...ad"
      },
      {
        "file": "src/data/ingredients/vinegars/vinegars.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 316,
        "column": 2,
        "context": "ars = fixIngredientMappings({\\n  ...rawVinegars,\\n  ...rawArtisanalVinegars,\\n  ...additionalVinegars,\\n"
      },
      {
        "file": "src/data/ingredients/vinegars/vinegars.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 317,
        "column": 2,
        "context": "({\\n  ...rawVinegars,\\n  ...rawArtisanalVinegars,\\n  ...additionalVinegars,\\n});\\n\\n// Export default for "
      },
      {
        "file": "src/data/integrations/elementalBalance.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 27,
        "column": 15,
        "context": "|| 0), 0),\\n\\n    if (total === 0) {\\n      return { ...DEFAULT_ELEMENTAL_PROPERTIES };\\n    }\\n\\n    retu"
      },
      {
        "file": "src/data/integrations/elementalBalance.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 32,
        "column": 8,
        "context": "EMENTS.reduce(\\n      (acc, element) => ({\\n        ...acc;\\n        [element]: (properties[element] ||"
      },
      {
        "file": "src/data/integrations/elementalBalance.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 98,
        "column": 8,
        "context": "NTS.reduce(\\n      (status, element) => ({\\n        ...status;\\n        [element]:\\n          normalized"
      },
      {
        "file": "src/data/integrations/medicinalCrossReference.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 22,
        "column": 7,
        "context": ") {\\n  // Implement the function\\n  return {\\n    /* ... */\\n  };\\n}\\n"
      },
      {
        "file": "src/data/integrations/seasonalUsage.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 208,
        "column": 1,
        "context": " for experimental cooking',\\n      ],\\n    },\\n  },\\n} as unknown as Record<Season, unknown>;\\n\\n// Helper"
      },
      {
        "file": "src/data/nutritional.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 766,
        "column": 26,
        "context": "    if (dayInfluence) {\\n      focusNutrients.push(...dayInfluence.nutrientRulership);\\n      healthAr"
      },
      {
        "file": "src/data/nutritional.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 767,
        "column": 23,
        "context": "luence.nutrientRulership);\\n      healthAreas.push(...dayInfluence.healthDomain);\\n      recommendedFo"
      },
      {
        "file": "src/data/nutritional.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 768,
        "column": 28,
        "context": "luence.healthDomain);\\n      recommendedFoods.push(...dayInfluence.beneficialFoods);\\n    }\\n  }\\n\\n  // "
      },
      {
        "file": "src/data/nutritional.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 785,
        "column": 26,
        "context": "   if (hourInfluence) {\\n      focusNutrients.push(...hourInfluence.nutrientRulership);\\n      healthA"
      },
      {
        "file": "src/data/nutritional.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 786,
        "column": 23,
        "context": "luence.nutrientRulership);\\n      healthAreas.push(...hourInfluence.healthDomain);\\n      recommendedF"
      },
      {
        "file": "src/data/nutritional.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 787,
        "column": 28,
        "context": "luence.healthDomain);\\n      recommendedFoods.push(...hourInfluence.beneficialFoods);\\n    }\\n  }\\n\\n  //"
      },
      {
        "file": "src/data/nutritional.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 802,
        "column": 21,
        "context": "tes\\n  return {\\n    elements,\\n    focusNutrients: [...new Set(focusNutrients)],\\n    healthAreas: [..."
      },
      {
        "file": "src/data/nutritional.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 803,
        "column": 18,
        "context": ": [...new Set(focusNutrients)],\\n    healthAreas: [...new Set(healthAreas)],\\n    recommendedFoods: [."
      },
      {
        "file": "src/data/nutritional.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 804,
        "column": 23,
        "context": "[...new Set(healthAreas)],\\n    recommendedFoods: [...new Set(recommendedFoods)]\\n  };\\n}\\n\\n/**\\n * Get n"
      },
      {
        "file": "src/data/nutritional.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 825,
        "column": 26,
        "context": "];\\n    if (influence) {\\n      focusNutrients.push(...influence.nutrientRulership);\\n      healthAreas"
      },
      {
        "file": "src/data/nutritional.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 826,
        "column": 23,
        "context": "luence.nutrientRulership);\\n      healthAreas.push(...influence.healthDomain);\\n      recommendedFoods"
      },
      {
        "file": "src/data/nutritional.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 827,
        "column": 28,
        "context": "luence.healthDomain);\\n      recommendedFoods.push(...influence.beneficialFoods);\\n    }\\n  });\\n\\n  // R"
      },
      {
        "file": "src/data/nutritional.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 833,
        "column": 21,
        "context": "Remove duplicates\\n  return {\\n    focusNutrients: [...new Set(focusNutrients)],\\n    healthAreas: [..."
      },
      {
        "file": "src/data/nutritional.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 834,
        "column": 18,
        "context": ": [...new Set(focusNutrients)],\\n    healthAreas: [...new Set(healthAreas)],\\n    recommendedFoods: [."
      },
      {
        "file": "src/data/nutritional.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 835,
        "column": 23,
        "context": "[...new Set(healthAreas)],\\n    recommendedFoods: [...new Set(recommendedFoods)]\\n  };\\n}\\n\\n/**\\n * Get s"
      },
      {
        "file": "src/data/planetaryFlavorProfiles.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 438,
        "column": 9,
        "context": "ofiles)[typeof planet]['flavorProfiles']\\n        ] as unknown as number,\\n        if (planetaryEmphas"
      },
      {
        "file": "src/data/planetaryFlavorProfiles.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 455,
        "column": 60,
        "context": "recipeElements = recipeFlavors.elementalProperties as unknown as Record<string, number>,\\n\\n    // Get"
      },
      {
        "file": "src/data/planets/locationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 602,
        "column": 8,
        "context": "    if (influence > 1.2) {\\n      return [\\n        ...baseRecommendations;\\n        `Emphasize ${plane"
      },
      {
        "file": "src/data/planets/locationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 604,
        "column": 8,
        "context": "{planet.toLowerCase()}-associated foods`,\\n        ...foodAssociations.slice(0, 3)\\n      ];\\n    } els"
      },
      {
        "file": "src/data/planets/locationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 607,
        "column": 61,
        "context": "n [`Moderate ${planet.toLowerCase()} influences`, ...baseRecommendations.slice(0, 2)];\\n    } else {\\n"
      },
      {
        "file": "src/data/planets/locationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 609,
        "column": 14,
        "context": "ndations.slice(0, 2)];\\n    } else {\\n      return [...baseRecommendations.slice(0, 3), ...foodAssocia"
      },
      {
        "file": "src/data/planets/locationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 609,
        "column": 50,
        "context": "      return [...baseRecommendations.slice(0, 3), ...foodAssociations.slice(0, 2)]\\n    }\\n  }\\n\\n  priv"
      },
      {
        "file": "src/data/planets/locationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 645,
        "column": 8,
        "context": "0, 3),\\n\\n    return {\\n      ingredients: [\\n        ...seasonalIngredients;\\n        ...topInfluences.f"
      },
      {
        "file": "src/data/planets/locationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 646,
        "column": 8,
        "context": "dients: [\\n        ...seasonalIngredients;\\n        ...topInfluences.flatMap(inf => inf.culinaryRecomm"
      },
      {
        "file": "src/data/planets/locationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 649,
        "column": 8,
        "context": "  ].slice(0, 12),\\n      cookingMethods: [\\n        ...regionalProfile.traditionalCookingMethods;\\n    "
      },
      {
        "file": "src/data/planets/locationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 650,
        "column": 8,
        "context": "egionalProfile.traditionalCookingMethods;\\n        ...this.getMethodsForClimate(regionalProfile.clima"
      },
      {
        "file": "src/data/planets/locationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 761,
        "column": 12,
        "context": "', 'Dense calories']\\n          : [];\\n\\n    return [...baseNutrition[season as keyof typeof baseNutrit"
      },
      {
        "file": "src/data/planets/locationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 761,
        "column": 68,
        "context": "eNutrition[season as keyof typeof baseNutrition], ...climateModifications];\\n  }\\n}\\n\\n// Export conveni"
      },
      {
        "file": "src/data/recipes/elementalMappings.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 128,
        "column": 4,
        "context": "with any recipe-specific overrides\\n  return {\\n    ...baseRecommendation;\\n    cookingTechniques: reci"
      },
      {
        "file": "src/data/recipes/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 20,
        "column": 28,
        "context": "y.isArray(recipes)) {\\n            allRecipes.push(...recipes);\\n          }\\n        });\\n      });\\n   "
      },
      {
        "file": "src/data/recipes.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 199,
        "column": 54,
        "context": "                const dishPlanetaryInfluences = { ...primaryPlanetaryInfluences };\\n\\n                "
      },
      {
        "file": "src/data/recipes.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 404,
        "column": 6,
        "context": "ecipe.flavorProfile);\\n    .map(recipe => ({\\n      ...recipe;\\n      matchScore: recipe.flavorProfile\\n"
      },
      {
        "file": "src/data/recipes.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 432,
        "column": 12,
        "context": "uisineProfile?.signatureTechniques) {\\n    return [...cuisineProfile.signatureTechniques]\\n  }\\n\\n  // F"
      },
      {
        "file": "src/data/recipes.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 491,
        "column": 8,
        "context": "larity / totalWeight : 0;\\n\\n      return {\\n        ...recipe;\\n        matchScore\\n      };\\n    })\\n    "
      },
      {
        "file": "src/data/recipes.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 512,
        "column": 40,
        "context": " cuisines\\n  const relatedCuisines = [cuisineName, ...getRelatedCuisines(cuisineName)];\\n\\n  return rec"
      },
      {
        "file": "src/data/recipes.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 539,
        "column": 8,
        "context": "atchScore = 0.75;\\n      }\\n\\n      return {\\n        ...recipe;\\n        matchScore\\n      };\\n    })\\n    "
      },
      {
        "file": "src/data/recipes.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 557,
        "column": 26,
        "context": " Start with all recipes\\n  let candidateRecipes = [...(await getRecipes())];\\n  logger.debug(`Starting"
      },
      {
        "file": "src/data/recipes.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 630,
        "column": 14,
        "context": "\\n            },\\n            tags: [\\n              ...(Array.isArray(recipeData.mealType)\\n           "
      },
      {
        "file": "src/data/recipes.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 636,
        "column": 14,
        "context": "ype => String(type).toLowerCase()),\\n              ...(Array.isArray(recipeData.season)\\n             "
      },
      {
        "file": "src/data/recipes.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 719,
        "column": 16,
        "context": "         },\\n              tags: [\\n                ...(Array.isArray(mealType)\\n                  ? me"
      },
      {
        "file": "src/data/recipes.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 725,
        "column": 16,
        "context": "e => String(type).toLowerCase()),\\n                ...(Array.isArray(season)\\n                  ? seas"
      },
      {
        "file": "src/data/recipes.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 847,
        "column": 8,
        "context": "atchScore !== undefined) {\\n      return {\\n        ...recipe;\\n        // Add matchPercentage if it do"
      },
      {
        "file": "src/data/recipes.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 953,
        "column": 6,
        "context": "Math.round(finalScore * 100);\\n\\n    return {\\n      ...recipe;\\n      matchScore: finalScore,\\n      mat"
      },
      {
        "file": "src/data/recipes.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1053,
        "column": 4,
        "context": " // Fusion suggestions\\n  const techniques = [\\n    ...new Set([\\n      ...profile1.signatureTechniques"
      },
      {
        "file": "src/data/recipes.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1054,
        "column": 6,
        "context": "ons\\n  const techniques = [\\n    ...new Set([\\n      ...profile1.signatureTechniques.slice(0, 2),\\n     "
      },
      {
        "file": "src/data/recipes.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1055,
        "column": 6,
        "context": "..profile1.signatureTechniques.slice(0, 2),\\n      ...profile2.signatureTechniques.slice(0, 2)\\n    ])"
      },
      {
        "file": "src/data/recipes.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1060,
        "column": 4,
        "context": "ce(0, 2)\\n    ])\\n  ];\\n\\n  const ingredients = [\\n    ...new Set([\\n      ...profile1.signatureIngredient"
      },
      {
        "file": "src/data/recipes.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1061,
        "column": 6,
        "context": ";\\n\\n  const ingredients = [\\n    ...new Set([\\n      ...profile1.signatureIngredients.slice(0, 3),\\n    "
      },
      {
        "file": "src/data/recipes.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1062,
        "column": 6,
        "context": ".profile1.signatureIngredients.slice(0, 3),\\n      ...profile2.signatureIngredients.slice(0, 3)\\n    ]"
      },
      {
        "file": "src/data/recipes.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 648,
        "column": 11,
        "context": "ipeData.matchPercentage) / 100 : 0.85)\\n          } as unknown as RecipeData;\\n        });\\n\\n        ca"
      },
      {
        "file": "src/data/recipes.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 735,
        "column": 13,
        "context": "centage: 85, // For display purposes\\n            } as unknown as RecipeData;\\n          });\\n\\n        "
      },
      {
        "file": "src/data/recipes.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1106,
        "column": 10,
        "context": "regionalCuisine: recipe.regionalCuisine\\n        }) as unknown as Recipe,\\n    );\\n  } catch (error) {\\n"
      },
      {
        "file": "src/data/sauces.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 504,
        "column": 2,
        "context": "port const allSauces: Record<string, Sauce> = {\\n  ...italianSauces;\\n  ...mexicanSauces;\\n  ...asianSa"
      },
      {
        "file": "src/data/sauces.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 505,
        "column": 2,
        "context": ": Record<string, Sauce> = {\\n  ...italianSauces;\\n  ...mexicanSauces;\\n  ...asianSauces;\\n  // Add other"
      },
      {
        "file": "src/data/sauces.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 506,
        "column": 2,
        "context": "ce> = {\\n  ...italianSauces;\\n  ...mexicanSauces;\\n  ...asianSauces;\\n  // Add other cuisine sauces as t"
      },
      {
        "file": "src/data/transits/comprehensiveTransitDatabase.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 451,
        "column": 28,
        "context": "/ Collect key aspects\\n            keyAspects.push(...season.keyAspects);\\n\\n            // Collect ret"
      },
      {
        "file": "src/data/transits/comprehensiveTransitDatabase.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 454,
        "column": 35,
        "context": "ograde planets\\n            retrogradePlanets.push(...season.retrogradePlanets);\\n          }\\n        "
      },
      {
        "file": "src/data/transits/comprehensiveTransitDatabase.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 472,
        "column": 26,
        "context": "ents,\\n      keyAspects,\\n      retrogradePlanets: [...new Set(retrogradePlanets)], // Remove duplicat"
      },
      {
        "file": "src/data/unified/alchemicalCalculations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 130,
        "column": 4,
        "context": "ermodynamics.reactivity, kalchm);\\n\\n  return {\\n    ...thermodynamics,\\n    kalchm,\\n    monica\\n  };\\n}\\n\\n"
      },
      {
        "file": "src/data/unified/alchemicalCalculations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 178,
        "column": 4,
        "context": "lateKalchm(alchemicalProperties);\\n\\n  return {\\n    ...ingredient,\\n    alchemicalProperties,\\n    kalch"
      },
      {
        "file": "src/data/unified/constants/alchemicalPillars.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 516,
        "column": 4,
        "context": "arMonicaModifiers(monicaConstant);\\n  return {\\n    ...pillar,\\n    monicaProperties: {\\n      kalchm,\\n "
      },
      {
        "file": "src/data/unified/constants/alchemicalPillars.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 577,
        "column": 6,
        "context": "ties.monicaConstant,\\n    monicaModifiers: {\\n      ...enhancedPillar.monicaProperties.monicaModifiers"
      },
      {
        "file": "src/data/unified/constants/alchemicalPillars.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 583,
        "column": 6,
        "context": "perties.kalchm,\\n    thermodynamicProfile: {\\n      ...enhancedPillar.monicaProperties.thermodynamicPr"
      },
      {
        "file": "src/data/unified/constants/elementalCore.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 289,
        "column": 13,
        "context": "(val || 0), 0);\\n  if (total === 0) {\\n    return { ...exports.DEFAULT_ELEMENTAL_PROPERTIES };\\n  }\\n  r"
      },
      {
        "file": "src/data/unified/cuisineIntegrations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1106,
        "column": 27,
        "context": " * (1 - blendRatio));\\n\\n    fusionIngredients.push(...uniqueIngredients1.slice(0, count1));\\n    fusio"
      },
      {
        "file": "src/data/unified/cuisineIntegrations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1107,
        "column": 27,
        "context": "ts1.slice(0, count1));\\n    fusionIngredients.push(...uniqueIngredients2.slice(0, count2));\\n\\n    retu"
      },
      {
        "file": "src/data/unified/cuisineIntegrations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1433,
        "column": 18,
        "context": "    if (cuisines?.[cuisine1]) {\\n      dishes.push(...cuisines[cuisine1].dishes)\\n    }\\n\\n    // Get di"
      },
      {
        "file": "src/data/unified/cuisineIntegrations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1438,
        "column": 18,
        "context": "ine2 && cuisines?.[cuisine2]) {\\n      dishes.push(...cuisines[cuisine2].dishes)\\n    }\\n\\n    return (d"
      },
      {
        "file": "src/data/unified/cuisineIntegrations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1929,
        "column": 48,
        "context": "{\\n        min: kalchmValues.length > 0 ? Math.min(...kalchmValues) : 0,\\n        max: kalchmValues.le"
      },
      {
        "file": "src/data/unified/cuisineIntegrations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1930,
        "column": 48,
        "context": ",\\n        max: kalchmValues.length > 0 ? Math.max(...kalchmValues) : 0\\n      },\\n      kalchmDistribu"
      },
      {
        "file": "src/data/unified/cuisineIntegrations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 2066,
        "column": 22,
        "context": "ngredientMap[ingredient]) {\\n        cuisines.push(...ingredientMap[ingredient])\\n      }\\n    }\\n\\n    /"
      },
      {
        "file": "src/data/unified/cuisineIntegrations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 2071,
        "column": 12,
        "context": "    }\\n    }\\n\\n    // Remove duplicates\\n    return [...new Set(cuisines)];\\n  }\\n\\n  /**\\n   * Get cuisine"
      },
      {
        "file": "src/data/unified/cuisineIntegrations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 679,
        "column": 48,
        "context": ",\\n      sharedCookingMethods: sharedCookingMethods as unknown as CookingMethod[],\\n      elementalAli"
      },
      {
        "file": "src/data/unified/cuisineIntegrations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1320,
        "column": 53,
        "context": "       adaptedCookingMethods: fusionCookingMethods as unknown as CookingMethod[],\\n          seasonal"
      },
      {
        "file": "src/data/unified/cuisineIntegrations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1366,
        "column": 46,
        "context": "ts,\\n        adaptedCookingMethods: seasonalMethods as unknown as CookingMethod[],\\n        seasonalMo"
      },
      {
        "file": "src/data/unified/cuisineIntegrations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1588,
        "column": 50,
        "context": "      adaptedCookingMethods: adaptedCookingMethods as unknown as CookingMethod[],\\n      seasonalModi"
      },
      {
        "file": "src/data/unified/cuisines.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 173,
        "column": 14,
        "context": ".name) {\\n            recipes.push({\\n              ...dish;\\n              mealType,\\n              sea"
      },
      {
        "file": "src/data/unified/cuisines.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 210,
        "column": 26,
        "context": "length > 0;\\n        ? {\\n            min: Math.min(...kalchmValues),\\n            max: Math.max(...kal"
      },
      {
        "file": "src/data/unified/cuisines.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 211,
        "column": 26,
        "context": "h.min(...kalchmValues),\\n            max: Math.max(...kalchmValues),\\n            average: kalchmValue"
      },
      {
        "file": "src/data/unified/cuisines.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 270,
        "column": 24,
        "context": "t primary methods (top 5)\\n    primaryMethods.push(...sortedMethods.slice(0, 5).map(([method]) => met"
      },
      {
        "file": "src/data/unified/cuisines.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 447,
        "column": 6,
        "context": "XISTING DATA)\\n    const enhancedCuisine = {\\n      ...(cuisine as unknown as any), // Preserve ALL ex"
      },
      {
        "file": "src/data/unified/cuisines.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 618,
        "column": 28,
        "context": "gth > 0\\n          ? {\\n              min: Math.min(...kalchmValues),\\n              max: Math.max(...k"
      },
      {
        "file": "src/data/unified/cuisines.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 619,
        "column": 28,
        "context": "min(...kalchmValues),\\n              max: Math.max(...kalchmValues),\\n              average: kalchmVal"
      },
      {
        "file": "src/data/unified/cuisines.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 655,
        "column": 8,
        "context": "on with compatibility data\\n      return {\\n        ...cuisine;\\n        cuisineOptimization: {\\n       "
      },
      {
        "file": "src/data/unified/cuisines.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 657,
        "column": 10,
        "context": "cuisine;\\n        cuisineOptimization: {\\n          ...cuisine.cuisineOptimization;\\n          kalchmCo"
      },
      {
        "file": "src/data/unified/cuisines.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 112,
        "column": 31,
        "context": "ck cooking methods\\n      const recipeData = recipe as unknown as any;\\n      if (recipeData.cookingMe"
      },
      {
        "file": "src/data/unified/cuisines.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 311,
        "column": 31,
        "context": "cipe of recipes) {\\n      const recipeData = recipe as unknown as any;\\n      if (recipeData.elemental"
      },
      {
        "file": "src/data/unified/cuisines.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 381,
        "column": 37,
        "context": "ount seasons\\n      const recipeSeasonData = recipe as unknown as any;\\n      if (recipeSeasonData.cur"
      },
      {
        "file": "src/data/unified/cuisines.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 391,
        "column": 30,
        "context": "lanetary affinities\\n      const astroData = recipe as unknown as any;\\n      if (astroData.astrologic"
      },
      {
        "file": "src/data/unified/cuisines.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 447,
        "column": 17,
        "context": "A)\\n    const enhancedCuisine = {\\n      ...(cuisine as unknown as any), // Preserve ALL existing prop"
      },
      {
        "file": "src/data/unified/data/cuisines/greek.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1091,
        "column": 11,
        "context": " ],\\n    },\\n    dessert: {\\n      all: [\\n        // ... dessert dishes\\n      ],\\n    },\\n  },\\n  traditio"
      },
      {
        "file": "src/data/unified/data/cuisines/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 67,
        "column": 25,
        "context": "neRecipes = cuisine => {\\n  if (!cuisine) return { ...baseCuisine };\\n  // Helper to combine \"all\" rec"
      },
      {
        "file": "src/data/unified/data/cuisines/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 75,
        "column": 15,
        "context": " ? mealType.all : [];\\n    return {\\n      spring: [...(Array.isArray(mealType.spring) ? mealType.spri"
      },
      {
        "file": "src/data/unified/data/cuisines/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 75,
        "column": 75,
        "context": "isArray(mealType.spring) ? mealType.spring : []), ...allRecipes],\\n      summer: [...(Array.isArray(m"
      },
      {
        "file": "src/data/unified/data/cuisines/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 76,
        "column": 15,
        "context": "Type.spring : []), ...allRecipes],\\n      summer: [...(Array.isArray(mealType.summer) ? mealType.summ"
      },
      {
        "file": "src/data/unified/data/cuisines/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 76,
        "column": 75,
        "context": "isArray(mealType.summer) ? mealType.summer : []), ...allRecipes],\\n      autumn: [...(Array.isArray(m"
      },
      {
        "file": "src/data/unified/data/cuisines/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 77,
        "column": 15,
        "context": "Type.summer : []), ...allRecipes],\\n      autumn: [...(Array.isArray(mealType.autumn) ? mealType.autu"
      },
      {
        "file": "src/data/unified/data/cuisines/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 77,
        "column": 75,
        "context": "isArray(mealType.autumn) ? mealType.autumn : []), ...allRecipes],\\n      winter: [...(Array.isArray(m"
      },
      {
        "file": "src/data/unified/data/cuisines/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 78,
        "column": 15,
        "context": "Type.autumn : []), ...allRecipes],\\n      winter: [...(Array.isArray(mealType.winter) ? mealType.wint"
      },
      {
        "file": "src/data/unified/data/cuisines/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 78,
        "column": 75,
        "context": "isArray(mealType.winter) ? mealType.winter : []), ...allRecipes],\\n    };\\n  };\\n  // Ensure the cuisin"
      },
      {
        "file": "src/data/unified/data/cuisines/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 107,
        "column": 34,
        "context": "alProperties ||\\n      cuisine.elementalState || { ...baseCuisine.elementalProperties }, // For backw"
      },
      {
        "file": "src/data/unified/data/cuisines.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 71,
        "column": 4,
        "context": "t\\nfunction adaptCuisine(cuisine) {\\n  return {\\n    ...cuisine,\\n    // Convert elementalProperties if "
      },
      {
        "file": "src/data/unified/data/ingredients/fruits/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 63,
        "column": 2,
        "context": "Combine all fruit categories\\nexports.fruits = {\\n  ...citrus_1.citrus,\\n  ...berries_1.berries,\\n  ...t"
      },
      {
        "file": "src/data/unified/data/ingredients/fruits/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 64,
        "column": 2,
        "context": "gories\\nexports.fruits = {\\n  ...citrus_1.citrus,\\n  ...berries_1.berries,\\n  ...tropical_1.tropical,\\n  "
      },
      {
        "file": "src/data/unified/data/ingredients/fruits/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 65,
        "column": 2,
        "context": "{\\n  ...citrus_1.citrus,\\n  ...berries_1.berries,\\n  ...tropical_1.tropical,\\n  ...stoneFruit_1.stoneFru"
      },
      {
        "file": "src/data/unified/data/ingredients/fruits/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 66,
        "column": 2,
        "context": "...berries_1.berries,\\n  ...tropical_1.tropical,\\n  ...stoneFruit_1.stoneFruit,\\n  ...pome_1.pome,\\n  .."
      },
      {
        "file": "src/data/unified/data/ingredients/fruits/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 67,
        "column": 2,
        "context": "pical_1.tropical,\\n  ...stoneFruit_1.stoneFruit,\\n  ...pome_1.pome,\\n  ...melons_1.melons,\\n};\\n// Helper"
      },
      {
        "file": "src/data/unified/data/ingredients/fruits/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 68,
        "column": 2,
        "context": "  ...stoneFruit_1.stoneFruit,\\n  ...pome_1.pome,\\n  ...melons_1.melons,\\n};\\n// Helper functions\\nconst g"
      },
      {
        "file": "src/data/unified/data/ingredients/fruits/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 74,
        "column": 38,
        "context": "ubCategory)\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getFruits"
      },
      {
        "file": "src/data/unified/data/ingredients/fruits/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 80,
        "column": 38,
        "context": "es(season))\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getSeason"
      },
      {
        "file": "src/data/unified/data/ingredients/fruits/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 86,
        "column": 38,
        "context": "on[method])\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getFruits"
      },
      {
        "file": "src/data/unified/data/ingredients/fruits/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 99,
        "column": 38,
        "context": "es(planet))\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getFruits"
      },
      {
        "file": "src/data/unified/data/ingredients/fruits/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 113,
        "column": 38,
        "context": "   }\\n    })\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getFruits"
      },
      {
        "file": "src/data/unified/data/ingredients/grains/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 36,
        "column": 2,
        "context": "= (0, elementalUtils_1.fixIngredientMappings)({\\n  ...wholeGrains_1.wholeGrains,\\n  ...refinedGrains_1"
      },
      {
        "file": "src/data/unified/data/ingredients/grains/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 37,
        "column": 2,
        "context": "ientMappings)({\\n  ...wholeGrains_1.wholeGrains,\\n  ...refinedGrains_1.refinedGrains,\\n  ...pseudoGrain"
      },
      {
        "file": "src/data/unified/data/ingredients/grains/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 38,
        "column": 2,
        "context": "holeGrains,\\n  ...refinedGrains_1.refinedGrains,\\n  ...pseudoGrains_1.pseudoGrains,\\n});\\n// Fix the raw"
      },
      {
        "file": "src/data/unified/data/ingredients/grains/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 51,
        "column": 4,
        "context": " name: 'Whole Grains',\\n    category: 'grain',\\n    ...wholeGrains_1.wholeGrains,\\n  },\\n  refined: {\\n  "
      },
      {
        "file": "src/data/unified/data/ingredients/grains/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 62,
        "column": 4,
        "context": "ame: 'Refined Grains',\\n    category: 'grain',\\n    ...refinedGrains_1.refinedGrains,\\n  },\\n  pseudo: {"
      },
      {
        "file": "src/data/unified/data/ingredients/grains/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 73,
        "column": 4,
        "context": "name: 'Pseudo Grains',\\n    category: 'grain',\\n    ...pseudoGrains_1.pseudoGrains,\\n  },\\n};\\n// Apply t"
      },
      {
        "file": "src/data/unified/data/ingredients/grains/pseudoGrains/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 47,
        "column": 2,
        "context": " a consolidated object\\nexports.pseudoGrains = {\\n  ...quinoa_1.quinoa,\\n  ...amaranth_1.amaranth,\\n  .."
      },
      {
        "file": "src/data/unified/data/ingredients/grains/pseudoGrains/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 48,
        "column": 2,
        "context": "\\nexports.pseudoGrains = {\\n  ...quinoa_1.quinoa,\\n  ...amaranth_1.amaranth,\\n  ...buckwheat_1.buckwheat"
      },
      {
        "file": "src/data/unified/data/ingredients/grains/pseudoGrains/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 49,
        "column": 2,
        "context": "  ...quinoa_1.quinoa,\\n  ...amaranth_1.amaranth,\\n  ...buckwheat_1.buckwheat,\\n  ...chia_1.chia,\\n  ...f"
      },
      {
        "file": "src/data/unified/data/ingredients/grains/pseudoGrains/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 50,
        "column": 2,
        "context": "maranth_1.amaranth,\\n  ...buckwheat_1.buckwheat,\\n  ...chia_1.chia,\\n  ...flaxseed_1.flaxseed,\\n};\\n"
      },
      {
        "file": "src/data/unified/data/ingredients/grains/pseudoGrains/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 51,
        "column": 2,
        "context": ",\\n  ...buckwheat_1.buckwheat,\\n  ...chia_1.chia,\\n  ...flaxseed_1.flaxseed,\\n};\\n"
      },
      {
        "file": "src/data/unified/data/ingredients/herbs/freshHerbs.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 276,
        "column": 35,
        "context": "],\\n    },\\n  },\\n  // More herbs would be added here...\\n};\\nexports.freshHerbs = (0, elementalUtils_1.f"
      },
      {
        "file": "src/data/unified/data/ingredients/herbs/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 107,
        "column": 4,
        "context": "ops,\\n    category: properties.category || '',\\n    ...herbValues,\\n    ...properties,\\n  };\\n}\\n// Combin"
      },
      {
        "file": "src/data/unified/data/ingredients/herbs/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 108,
        "column": 4,
        "context": "properties.category || '',\\n    ...herbValues,\\n    ...properties,\\n  };\\n}\\n// Combine all herbs into on"
      },
      {
        "file": "src/data/unified/data/ingredients/herbs/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 113,
        "column": 2,
        "context": "= (0, elementalUtils_1.fixIngredientMappings)({\\n  ...freshHerbs_1.freshHerbs,\\n  ...driedHerbs_1.drie"
      },
      {
        "file": "src/data/unified/data/ingredients/herbs/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 114,
        "column": 2,
        "context": "edientMappings)({\\n  ...freshHerbs_1.freshHerbs,\\n  ...driedHerbs_1.driedHerbs,\\n  ...aromatic_1.aromat"
      },
      {
        "file": "src/data/unified/data/ingredients/herbs/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 115,
        "column": 2,
        "context": "rbs_1.freshHerbs,\\n  ...driedHerbs_1.driedHerbs,\\n  ...aromatic_1.aromaticHerbs,\\n  ...medicinalHerbs_1"
      },
      {
        "file": "src/data/unified/data/ingredients/herbs/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 116,
        "column": 2,
        "context": "bs_1.driedHerbs,\\n  ...aromatic_1.aromaticHerbs,\\n  ...medicinalHerbs_1.medicinalHerbs,\\n  // Custom he"
      },
      {
        "file": "src/data/unified/data/ingredients/herbs/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 343,
        "column": 2,
        "context": "= (0, elementalUtils_1.fixIngredientMappings)({\\n  ...freshHerbs_1.freshHerbs,\\n  ...driedHerbs_1.drie"
      },
      {
        "file": "src/data/unified/data/ingredients/herbs/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 344,
        "column": 2,
        "context": "edientMappings)({\\n  ...freshHerbs_1.freshHerbs,\\n  ...driedHerbs_1.driedHerbs,\\n  ...aromatic_1.aromat"
      },
      {
        "file": "src/data/unified/data/ingredients/herbs/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 345,
        "column": 2,
        "context": "rbs_1.freshHerbs,\\n  ...driedHerbs_1.driedHerbs,\\n  ...aromatic_1.aromaticHerbs,\\n  ...medicinalHerbs_1"
      },
      {
        "file": "src/data/unified/data/ingredients/herbs/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 346,
        "column": 2,
        "context": "bs_1.driedHerbs,\\n  ...aromatic_1.aromaticHerbs,\\n  ...medicinalHerbs_1.medicinalHerbs,\\n});\\n// Export "
      },
      {
        "file": "src/data/unified/data/ingredients/oils/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 34,
        "column": 36,
        "context": "== 'cooking')\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\nexports.finishingOil"
      },
      {
        "file": "src/data/unified/data/ingredients/oils/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 37,
        "column": 36,
        "context": " 'finishing')\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\nexports.supplementOi"
      },
      {
        "file": "src/data/unified/data/ingredients/oils/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 40,
        "column": 36,
        "context": "'supplement')\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\nexports.specialtyOil"
      },
      {
        "file": "src/data/unified/data/ingredients/oils/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 49,
        "column": 36,
        "context": "lement'),\\n  )\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n// Export by element"
      },
      {
        "file": "src/data/unified/data/ingredients/oils/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 57,
        "column": 36,
        "context": "= 'Fire',\\n  )\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\nexports.waterOils = "
      },
      {
        "file": "src/data/unified/data/ingredients/oils/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 64,
        "column": 36,
        "context": " 'Water',\\n  )\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\nexports.earthOils = "
      },
      {
        "file": "src/data/unified/data/ingredients/oils/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 71,
        "column": 36,
        "context": " 'Earth',\\n  )\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\nexports.AirOils = Ob"
      },
      {
        "file": "src/data/unified/data/ingredients/oils/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 78,
        "column": 36,
        "context": "== 'Air',\\n  )\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n// Export by culinar"
      },
      {
        "file": "src/data/unified/data/ingredients/oils/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 87,
        "column": 36,
        "context": "epfrying,\\n  )\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\nexports.bakingOils ="
      },
      {
        "file": "src/data/unified/data/ingredients/oils/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 90,
        "column": 36,
        "context": "ions?.baking)\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\nexports.dressingOils"
      },
      {
        "file": "src/data/unified/data/ingredients/oils/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 93,
        "column": 36,
        "context": "s?.dressings)\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\nexports.nutOils = Ob"
      },
      {
        "file": "src/data/unified/data/ingredients/oils/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 102,
        "column": 36,
        "context": "peanut'),\\n  )\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n// For backward comp"
      },
      {
        "file": "src/data/unified/data/ingredients/proteins/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 76,
        "column": 2,
        "context": "ine all protein categories\\nexports.proteins = {\\n  ...seafood_1.seafood,\\n  ...poultry_1.poultry,\\n  .."
      },
      {
        "file": "src/data/unified/data/ingredients/proteins/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 77,
        "column": 2,
        "context": "es\\nexports.proteins = {\\n  ...seafood_1.seafood,\\n  ...poultry_1.poultry,\\n  ...plantBased_1.plantBased"
      },
      {
        "file": "src/data/unified/data/ingredients/proteins/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 78,
        "column": 2,
        "context": "  ...seafood_1.seafood,\\n  ...poultry_1.poultry,\\n  ...plantBased_1.plantBased,\\n  ...meat_1.meats,\\n  ."
      },
      {
        "file": "src/data/unified/data/ingredients/proteins/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 79,
        "column": 2,
        "context": "oultry_1.poultry,\\n  ...plantBased_1.plantBased,\\n  ...meat_1.meats,\\n  ...legumes_1.legumes,\\n  ...eggs"
      },
      {
        "file": "src/data/unified/data/ingredients/proteins/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 80,
        "column": 2,
        "context": " ...plantBased_1.plantBased,\\n  ...meat_1.meats,\\n  ...legumes_1.legumes,\\n  ...eggs_1.eggs,\\n  ...dAiry"
      },
      {
        "file": "src/data/unified/data/ingredients/proteins/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 81,
        "column": 2,
        "context": "sed,\\n  ...meat_1.meats,\\n  ...legumes_1.legumes,\\n  ...eggs_1.eggs,\\n  ...dAiry_1.dAiry,\\n};\\n// Implemen"
      },
      {
        "file": "src/data/unified/data/ingredients/proteins/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 82,
        "column": 2,
        "context": "eats,\\n  ...legumes_1.legumes,\\n  ...eggs_1.eggs,\\n  ...dAiry_1.dAiry,\\n};\\n// Implemented helper functio"
      },
      {
        "file": "src/data/unified/data/ingredients/proteins/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 88,
        "column": 38,
        "context": "es(season))\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getProtei"
      },
      {
        "file": "src/data/unified/data/ingredients/proteins/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 94,
        "column": 38,
        "context": "= minScore)\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getProtei"
      },
      {
        "file": "src/data/unified/data/ingredients/proteins/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 100,
        "column": 38,
        "context": "es(region))\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getProtei"
      },
      {
        "file": "src/data/unified/data/ingredients/proteins/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 107,
        "column": 38,
        "context": "= category)\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getProtei"
      },
      {
        "file": "src/data/unified/data/ingredients/proteins/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 113,
        "column": 38,
        "context": "?.(method))\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getProtei"
      },
      {
        "file": "src/data/unified/data/ingredients/proteins/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 123,
        "column": 38,
        "context": "Fat;\\n    })\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getProtei"
      },
      {
        "file": "src/data/unified/data/ingredients/proteins/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 274,
        "column": 38,
        "context": "ubCategory)\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getProtei"
      },
      {
        "file": "src/data/unified/data/ingredients/proteins/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 280,
        "column": 38,
        "context": ".('vegan'))\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getVeganP"
      },
      {
        "file": "src/data/unified/data/ingredients/proteins/plantBased.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 17,
        "column": 4,
        "context": "  },\\n    category: properties.category || '',\\n    ...properties,\\n  };\\n}\\nconst rawPlantBased = {\\n  te"
      },
      {
        "file": "src/data/unified/data/ingredients/seasonings/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 55,
        "column": 2,
        "context": "xclude oils and vinegars\\nexports.seasonings = {\\n  ...spices_1.spices,\\n  ...salts_1.salts,\\n  ...peppe"
      },
      {
        "file": "src/data/unified/data/ingredients/seasonings/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 56,
        "column": 2,
        "context": "rs\\nexports.seasonings = {\\n  ...spices_1.spices,\\n  ...salts_1.salts,\\n  ...peppers_1.peppers,\\n  ...her"
      },
      {
        "file": "src/data/unified/data/ingredients/seasonings/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 57,
        "column": 2,
        "context": "s = {\\n  ...spices_1.spices,\\n  ...salts_1.salts,\\n  ...peppers_1.peppers,\\n  ...herbs_1.herbs,\\n  ...aro"
      },
      {
        "file": "src/data/unified/data/ingredients/seasonings/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 58,
        "column": 2,
        "context": "es,\\n  ...salts_1.salts,\\n  ...peppers_1.peppers,\\n  ...herbs_1.herbs,\\n  ...aromatics_1.aromatics,\\n};\\n/"
      },
      {
        "file": "src/data/unified/data/ingredients/seasonings/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 59,
        "column": 2,
        "context": "ts,\\n  ...peppers_1.peppers,\\n  ...herbs_1.herbs,\\n  ...aromatics_1.aromatics,\\n};\\n// Update salts categ"
      },
      {
        "file": "src/data/unified/data/ingredients/seasonings/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 65,
        "column": 6,
        "context": "e((acc, [key, value]) => {\\n    acc[key] = {\\n      ...value,\\n      category: 'seasoning',\\n      subCa"
      },
      {
        "file": "src/data/unified/data/ingredients/seasonings/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 78,
        "column": 38,
        "context": "= category)\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getSeason"
      },
      {
        "file": "src/data/unified/data/ingredients/seasonings/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 84,
        "column": 38,
        "context": "intensity))\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getSeason"
      },
      {
        "file": "src/data/unified/data/ingredients/seasonings/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 106,
        "column": 38,
        "context": "ing),\\n    )\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getSeason"
      },
      {
        "file": "src/data/unified/data/ingredients/seasonings/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 116,
        "column": 29,
        "context": "s[key] = [];\\n      }\\n      combinations[key].push(...value.traditionalCombinations);\\n    }\\n  });\\n  r"
      },
      {
        "file": "src/data/unified/data/ingredients/seasonings/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 125,
        "column": 38,
        "context": "s?.[phase])\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getSeason"
      },
      {
        "file": "src/data/unified/data/ingredients/seasonings/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 137,
        "column": 38,
        "context": "   ),\\n    )\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getSeason"
      },
      {
        "file": "src/data/unified/data/ingredients/spices/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 52,
        "column": 6,
        "context": "ties).reduce(\\n    (acc, [key, value]) => ({\\n      ...acc,\\n      [key]: value / (sum || 1),\\n    }),\\n "
      },
      {
        "file": "src/data/unified/data/ingredients/spices/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 75,
        "column": 6,
        "context": "cyBase + Math.random() * 2)));\\n    return {\\n      ...acc,\\n      [key]: {\\n        ...spice,\\n        e"
      },
      {
        "file": "src/data/unified/data/ingredients/spices/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 77,
        "column": 8,
        "context": "    return {\\n      ...acc,\\n      [key]: {\\n        ...spice,\\n        elementalProperties: normalizedP"
      },
      {
        "file": "src/data/unified/data/ingredients/spices/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 89,
        "column": 2,
        "context": " categories with heat levels\\nexports.spices = {\\n  ...wholespices_1.wholeSpices,\\n  ...groundspices_1."
      },
      {
        "file": "src/data/unified/data/ingredients/spices/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 90,
        "column": 2,
        "context": "orts.spices = {\\n  ...wholespices_1.wholeSpices,\\n  ...groundspices_1.groundSpices,\\n  ...spiceBlends_1"
      },
      {
        "file": "src/data/unified/data/ingredients/spices/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 91,
        "column": 2,
        "context": ".wholeSpices,\\n  ...groundspices_1.groundSpices,\\n  ...spiceBlends_1.spiceBlends,\\n  cumin: {\\n    name:"
      },
      {
        "file": "src/data/unified/data/ingredients/spices/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 313,
        "column": 38,
        "context": "ubCategory)\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getSpices"
      },
      {
        "file": "src/data/unified/data/ingredients/spices/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 321,
        "column": 38,
        "context": "igin,\\n    )\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getSpices"
      },
      {
        "file": "src/data/unified/data/ingredients/spices/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 327,
        "column": 38,
        "context": "inStrength)\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getSpices"
      },
      {
        "file": "src/data/unified/data/ingredients/spices/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 363,
        "column": 38,
        "context": "es(method))\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getSpices"
      },
      {
        "file": "src/data/unified/data/ingredients/spices/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 373,
        "column": 38,
        "context": "ion],\\n    )\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getTradit"
      },
      {
        "file": "src/data/unified/data/ingredients/vegetables/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 76,
        "column": 2,
        "context": "all vegetable categories\\nexports.vegetables = {\\n  ...leafyGreens_1.leafyGreens,\\n  ...roots_1.roots,\\n"
      },
      {
        "file": "src/data/unified/data/ingredients/vegetables/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 77,
        "column": 2,
        "context": ".vegetables = {\\n  ...leafyGreens_1.leafyGreens,\\n  ...roots_1.roots,\\n  ...cruciferous_1.cruciferous,\\n"
      },
      {
        "file": "src/data/unified/data/ingredients/vegetables/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 78,
        "column": 2,
        "context": ".leafyGreens_1.leafyGreens,\\n  ...roots_1.roots,\\n  ...cruciferous_1.cruciferous,\\n  ...nightshades_1.n"
      },
      {
        "file": "src/data/unified/data/ingredients/vegetables/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 79,
        "column": 2,
        "context": ".roots_1.roots,\\n  ...cruciferous_1.cruciferous,\\n  ...nightshades_1.nightshades,\\n  ...alliums_1.alliu"
      },
      {
        "file": "src/data/unified/data/ingredients/vegetables/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 80,
        "column": 2,
        "context": "_1.cruciferous,\\n  ...nightshades_1.nightshades,\\n  ...alliums_1.alliums,\\n  ...squash_1.squash,\\n  ...s"
      },
      {
        "file": "src/data/unified/data/ingredients/vegetables/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 81,
        "column": 2,
        "context": "htshades_1.nightshades,\\n  ...alliums_1.alliums,\\n  ...squash_1.squash,\\n  ...starchy_1.starchyVegetabl"
      },
      {
        "file": "src/data/unified/data/ingredients/vegetables/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 82,
        "column": 2,
        "context": ",\\n  ...alliums_1.alliums,\\n  ...squash_1.squash,\\n  ...starchy_1.starchyVegetables,\\n  ...legumes_1.leg"
      },
      {
        "file": "src/data/unified/data/ingredients/vegetables/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 83,
        "column": 2,
        "context": "ash_1.squash,\\n  ...starchy_1.starchyVegetables,\\n  ...legumes_1.legumes,\\n};\\n// Create enhanced vegeta"
      },
      {
        "file": "src/data/unified/data/ingredients/vegetables/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 93,
        "column": 38,
        "context": "ubCategory)\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getVegeta"
      },
      {
        "file": "src/data/unified/data/ingredients/vegetables/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 99,
        "column": 38,
        "context": "es(season))\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getSeason"
      },
      {
        "file": "src/data/unified/data/ingredients/vegetables/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 107,
        "column": 38,
        "context": "hod),\\n    )\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getVegeta"
      },
      {
        "file": "src/data/unified/data/ingredients/vegetables/leafyGreens.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 63,
        "column": 4,
        "context": "mented',\\n      'juiced',\\n      'soup',\\n    ],\\n    ...generateVegetableAttributes({\\n      Water: 84,\\n"
      },
      {
        "file": "src/data/unified/data/ingredients/vegetables/leafyGreens.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 398,
        "column": 4,
        "context": "ngMethods: ['steamed', 'saut√©ed', 'braised'],\\n    ...generateVegetableAttributes({\\n      Water: 87,\\n"
      },
      {
        "file": "src/data/unified/data/ingredients/vinegars/vinegars.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 311,
        "column": 2,
        "context": "= (0, elementalUtils_1.fixIngredientMappings)({\\n  ...rawVinegars,\\n  ...rawArtisanalVinegars,\\n  ...ad"
      },
      {
        "file": "src/data/unified/data/ingredients/vinegars/vinegars.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 312,
        "column": 2,
        "context": "ls_1.fixIngredientMappings)({\\n  ...rawVinegars,\\n  ...rawArtisanalVinegars,\\n  ...additionalVinegars,\\n"
      },
      {
        "file": "src/data/unified/data/ingredients/vinegars/vinegars.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 313,
        "column": 2,
        "context": "({\\n  ...rawVinegars,\\n  ...rawArtisanalVinegars,\\n  ...additionalVinegars,\\n});\\n// Export default for c"
      },
      {
        "file": "src/data/unified/data/unified/alchemicalCalculations.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 87,
        "column": 4,
        "context": "hermodynamics.reactivity, kalchm);\\n  return {\\n    ...thermodynamics,\\n    kalchm,\\n    monica,\\n  };\\n}\\n"
      },
      {
        "file": "src/data/unified/data/unified/alchemicalCalculations.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 122,
        "column": 4,
        "context": "ulateKalchm(alchemicalProperties);\\n  return {\\n    ...ingredient,\\n    alchemicalProperties,\\n    kalch"
      },
      {
        "file": "src/data/unified/data/unified/cuisineIntegrations.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 819,
        "column": 27,
        "context": "h * (1 - blendRatio));\\n    fusionIngredients.push(...uniqueIngredients1.slice(0, count1));\\n    fusio"
      },
      {
        "file": "src/data/unified/data/unified/cuisineIntegrations.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 820,
        "column": 27,
        "context": "ts1.slice(0, count1));\\n    fusionIngredients.push(...uniqueIngredients2.slice(0, count2));\\n    retur"
      },
      {
        "file": "src/data/unified/data/unified/cuisineIntegrations.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1060,
        "column": 18,
        "context": "alProfile.cuisines[cuisine1]) {\\n      dishes.push(...seasonalProfile.cuisines[cuisine1].dishes);\\n   "
      },
      {
        "file": "src/data/unified/data/unified/cuisineIntegrations.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1064,
        "column": 18,
        "context": "alProfile.cuisines[cuisine2]) {\\n      dishes.push(...seasonalProfile.cuisines[cuisine2].dishes);\\n   "
      },
      {
        "file": "src/data/unified/data/unified/cuisineIntegrations.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1455,
        "column": 22,
        "context": "ength,\\n      kalchmRange: {\\n        min: Math.min(...kalchmValues),\\n        max: Math.max(...kalchmV"
      },
      {
        "file": "src/data/unified/data/unified/cuisineIntegrations.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1456,
        "column": 22,
        "context": " Math.min(...kalchmValues),\\n        max: Math.max(...kalchmValues),\\n      },\\n      kalchmDistributio"
      },
      {
        "file": "src/data/unified/data/unified/cuisineIntegrations.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1558,
        "column": 22,
        "context": "ngredientMap[ingredient]) {\\n        cuisines.push(...ingredientMap[ingredient]);\\n      }\\n    }\\n    /"
      },
      {
        "file": "src/data/unified/data/unified/cuisineIntegrations.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1562,
        "column": 12,
        "context": "     }\\n    }\\n    // Remove duplicates\\n    return [...new Set(cuisines)];\\n  }\\n  /**\\n   * Get cuisine "
      },
      {
        "file": "src/data/unified/data/unified/ingredients.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 36,
        "column": 2,
        "context": "// Combine all protein types\\nconst proteins = {\\n  ...proteins_1.meats,\\n  ...proteins_1.poultry,\\n  .."
      },
      {
        "file": "src/data/unified/data/unified/ingredients.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 37,
        "column": 2,
        "context": "types\\nconst proteins = {\\n  ...proteins_1.meats,\\n  ...proteins_1.poultry,\\n  ...proteins_1.seafood,\\n  "
      },
      {
        "file": "src/data/unified/data/unified/ingredients.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 38,
        "column": 2,
        "context": "  ...proteins_1.meats,\\n  ...proteins_1.poultry,\\n  ...proteins_1.seafood,\\n  ...proteins_1.plantBased,"
      },
      {
        "file": "src/data/unified/data/unified/ingredients.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 39,
        "column": 2,
        "context": "...proteins_1.poultry,\\n  ...proteins_1.seafood,\\n  ...proteins_1.plantBased,\\n};\\n/**\\n * Calculate Kalc"
      },
      {
        "file": "src/data/unified/data/unified/ingredients.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 136,
        "column": 2,
        "context": "fied collections\\nexports.unifiedIngredients = {\\n  ...exports.unifiedFruits,\\n  ...exports.unifiedVege"
      },
      {
        "file": "src/data/unified/data/unified/ingredients.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 137,
        "column": 2,
        "context": "fiedIngredients = {\\n  ...exports.unifiedFruits,\\n  ...exports.unifiedVegetables,\\n  ...exports.unified"
      },
      {
        "file": "src/data/unified/data/unified/ingredients.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 138,
        "column": 2,
        "context": ".unifiedFruits,\\n  ...exports.unifiedVegetables,\\n  ...exports.unifiedHerbs,\\n  ...exports.unifiedSpice"
      },
      {
        "file": "src/data/unified/data/unified/ingredients.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 139,
        "column": 2,
        "context": "s.unifiedVegetables,\\n  ...exports.unifiedHerbs,\\n  ...exports.unifiedSpices,\\n  ...exports.unifiedGrai"
      },
      {
        "file": "src/data/unified/data/unified/ingredients.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 140,
        "column": 2,
        "context": "ports.unifiedHerbs,\\n  ...exports.unifiedSpices,\\n  ...exports.unifiedGrains,\\n  ...exports.unifiedOils"
      },
      {
        "file": "src/data/unified/data/unified/ingredients.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 141,
        "column": 2,
        "context": "orts.unifiedSpices,\\n  ...exports.unifiedGrains,\\n  ...exports.unifiedOils,\\n  ...exports.unifiedVinega"
      },
      {
        "file": "src/data/unified/data/unified/ingredients.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 142,
        "column": 2,
        "context": "xports.unifiedGrains,\\n  ...exports.unifiedOils,\\n  ...exports.unifiedVinegars,\\n  ...exports.unifiedSe"
      },
      {
        "file": "src/data/unified/data/unified/ingredients.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 143,
        "column": 2,
        "context": "orts.unifiedOils,\\n  ...exports.unifiedVinegars,\\n  ...exports.unifiedSeasonings,\\n  ...exports.unified"
      },
      {
        "file": "src/data/unified/data/unified/ingredients.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 144,
        "column": 2,
        "context": "nifiedVinegars,\\n  ...exports.unifiedSeasonings,\\n  ...exports.unifiedProteins,\\n};\\n// Helper functions"
      },
      {
        "file": "src/data/unified/data/unified/recipes.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 308,
        "column": 6,
        "context": "EXISTING DATA)\\n    const enhancedRecipe = {\\n      ...recipe,\\n      // ADD new alchemical properties\\n"
      },
      {
        "file": "src/data/unified/data/unified/recipes.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 404,
        "column": 22,
        "context": "ength,\\n      kalchmRange: {\\n        min: Math.min(...kalchmValues),\\n        max: Math.max(...kalchmV"
      },
      {
        "file": "src/data/unified/data/unified/recipes.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 405,
        "column": 22,
        "context": " Math.min(...kalchmValues),\\n        max: Math.max(...kalchmValues),\\n        average: kalchmValues.re"
      },
      {
        "file": "src/data/unified/data/unified/seasonal.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1086,
        "column": 6,
        "context": "(([season, profile]) => [\\n    season,\\n    {\\n      ...profile.ingredients,\\n      elementalInfluence: "
      },
      {
        "file": "src/data/unified/enhancedIngredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 577,
        "column": 12,
        "context": "sonal with some out-of-season options\\n    return [...seasonal, ...this.findSubstitutions(ingredients"
      },
      {
        "file": "src/data/unified/enhancedIngredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 577,
        "column": 25,
        "context": "me out-of-season options\\n    return [...seasonal, ...this.findSubstitutions(ingredients)].slice(\\n   "
      },
      {
        "file": "src/data/unified/enhancedIngredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 602,
        "column": 12,
        "context": "son' ingredients with highest quality\\n    return [...transitionIngredients, ...toSeasonIngredients]\\n"
      },
      {
        "file": "src/data/unified/enhancedIngredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 602,
        "column": 38,
        "context": "est quality\\n    return [...transitionIngredients, ...toSeasonIngredients]\\n      .sort((a, b) => {\\n  "
      },
      {
        "file": "src/data/unified/enhancedIngredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 731,
        "column": 6,
        "context": " // Create enhanced ingredient\\n    return {\\n      ...ingredient;\\n      culinaryProperties,\\n      ast"
      },
      {
        "file": "src/data/unified/enhancedIngredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 913,
        "column": 28,
        "context": "   if (seasonality) {\\n        const allSeasons = [...(seasonality.peak || []), ...(seasonality.optim"
      },
      {
        "file": "src/data/unified/enhancedIngredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 913,
        "column": 57,
        "context": " const allSeasons = [...(seasonality.peak || []), ...(seasonality.optimal || [])];\\n\\n        (allSeas"
      },
      {
        "file": "src/data/unified/enhancedIngredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1002,
        "column": 25,
        "context": "ient }) => ingredient);\\n\\n      substitutions.push(...sameCategory);\\n    });\\n\\n    // Return unique su"
      },
      {
        "file": "src/data/unified/enhancedIngredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1056,
        "column": 14,
        "context": "ifferentCategories || []).length),\\n\\n      return [...fromDifferentCategories, ...kalchmMatches]\\n    "
      },
      {
        "file": "src/data/unified/enhancedIngredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1056,
        "column": 42,
        "context": "ngth),\\n\\n      return [...fromDifferentCategories, ...kalchmMatches]\\n    }\\n\\n    return fromDifferentC"
      },
      {
        "file": "src/data/unified/enhancedIngredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1120,
        "column": 31,
        "context": "urn unique methods\\n    return Array.from(new Set([...baseMethods, ...elementMethods]));\\n  }\\n\\n  /**\\n "
      },
      {
        "file": "src/data/unified/enhancedIngredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1120,
        "column": 47,
        "context": "ds\\n    return Array.from(new Set([...baseMethods, ...elementMethods]));\\n  }\\n\\n  /**\\n   * Get storage "
      },
      {
        "file": "src/data/unified/enhancedIngredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 314,
        "column": 70,
        "context": ".culinaryProperties.cookingMethods.includes(method as unknown as CookingMethod);\\n        ),\\n      )\\n"
      },
      {
        "file": "src/data/unified/enhancedIngredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 397,
        "column": 13,
        "context": "    umami: 0,\\n              spicy: 0\\n            } as unknown as UnifiedFlavorProfile),\\n          in"
      },
      {
        "file": "src/data/unified/enhancedIngredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 413,
        "column": 13,
        "context": "    umami: 0,\\n              spicy: 0\\n            } as unknown as UnifiedFlavorProfile),\\n          a."
      },
      {
        "file": "src/data/unified/enhancedIngredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 422,
        "column": 13,
        "context": "    umami: 0,\\n              spicy: 0\\n            } as unknown as UnifiedFlavorProfile),\\n        ).co"
      },
      {
        "file": "src/data/unified/enhancedIngredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 434,
        "column": 13,
        "context": "    umami: 0,\\n              spicy: 0\\n            } as unknown as UnifiedFlavorProfile),\\n          b."
      },
      {
        "file": "src/data/unified/enhancedIngredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 443,
        "column": 13,
        "context": "    umami: 0,\\n              spicy: 0\\n            } as unknown as UnifiedFlavorProfile),\\n        ).co"
      },
      {
        "file": "src/data/unified/enhancedIngredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 760,
        "column": 7,
        "context": "\\n        category,\\n        elementalProps,\\n      ) as unknown as CookingMethod[],\\n      pairings: in"
      },
      {
        "file": "src/data/unified/enhancedIngredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 786,
        "column": 10,
        "context": "rForElement(\\n          dominantElement,\\n        )) as unknown as import('@/types/celestial').Planet;"
      },
      {
        "file": "src/data/unified/flavorCompatibilityLayer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 312,
        "column": 3,
        "context": "ags || ['legacy'],\\n    lastUpdated: new Date()\\n  } as unknown as UnifiedFlavorProfile;\\n}\\n\\nfunction c"
      },
      {
        "file": "src/data/unified/flavorProfileMigration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 90,
        "column": 15,
        "context": "pleted && _cachedMigrationStats) {\\n      return { ..._cachedMigrationStats };\\n    }\\n\\n    // If migra"
      },
      {
        "file": "src/data/unified/flavorProfileMigration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 99,
        "column": 22,
        "context": "earInterval(checkInterval);\\n            resolve({ ..._cachedMigrationStats });\\n          }\\n        }"
      },
      {
        "file": "src/data/unified/flavorProfileMigration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 110,
        "column": 58,
        "context": "info('üîÑ Starting Phase 4 flavor profile migration...');\\n\\n    try {\\n      // 1. Migrate unified flav"
      },
      {
        "file": "src/data/unified/flavorProfileMigration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 137,
        "column": 17,
        "context": "yStats(),\\n        migrationTime,\\n        errors: [...this.migrationErrors],\\n        warnings: [...th"
      },
      {
        "file": "src/data/unified/flavorProfileMigration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 138,
        "column": 19,
        "context": "rs: [...this.migrationErrors],\\n        warnings: [...this.migrationWarnings]\\n      };\\n\\n      // Cach"
      },
      {
        "file": "src/data/unified/flavorProfileMigration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 151,
        "column": 15,
        "context": "     _isMigrationRunning = false;\\n\\n      return { ..._cachedMigrationStats };\\n    } catch (error) {\\n"
      },
      {
        "file": "src/data/unified/flavorProfileMigration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 162,
        "column": 50,
        "context": "    log.info('üì¶ Migrating unified flavor profiles...');\\n\\n    for (const [id, profile] of Object.ent"
      },
      {
        "file": "src/data/unified/flavorProfileMigration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 214,
        "column": 51,
        "context": "   log.info('üçΩÔ∏è Migrating cuisine flavor profiles...');\\n\\n    // Check if cuisineFlavorProfiles is a"
      },
      {
        "file": "src/data/unified/flavorProfileMigration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 290,
        "column": 52,
        "context": "  log.info('ü™ê Migrating planetary flavor profiles...');\\n\\n    // Check if planetaryFlavorProfiles is"
      },
      {
        "file": "src/data/unified/flavorProfileMigration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 362,
        "column": 54,
        "context": "log.info('üîó Migrating integration flavor profiles...');\\n\\n    // Check if integrationFlavorProfiles "
      },
      {
        "file": "src/data/unified/flavorProfileMigration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 441,
        "column": 53,
        "context": " log.info('ü•¨ Migrating ingredient flavor profiles...');\\n\\n    // Check if ingredientFlavorMap is ava"
      },
      {
        "file": "src/data/unified/flavorProfileMigration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 828,
        "column": 8,
        "context": "xistingProfile.pairingRecommendations = [\\n        ...new Set([\\n          ...existingProfile.pairingR"
      },
      {
        "file": "src/data/unified/flavorProfileMigration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 829,
        "column": 10,
        "context": "ecommendations = [\\n        ...new Set([\\n          ...existingProfile.pairingRecommendations;\\n       "
      },
      {
        "file": "src/data/unified/flavorProfileMigration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 830,
        "column": 10,
        "context": "existingProfile.pairingRecommendations;\\n          ...cuisineData.signatureIngredients\\n        ])\\n   "
      },
      {
        "file": "src/data/unified/flavorProfileMigration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 839,
        "column": 64,
        "context": "üîß Generating missing data and optimizing profiles...');\\n\\n    for (const [id, profile] of this.migra"
      },
      {
        "file": "src/data/unified/flavorProfileMigration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 922,
        "column": 13,
        "context": "tionStats && !_isMigrationRunning) {\\n    return { ..._cachedMigrationStats };\\n  }\\n\\n  return await _m"
      },
      {
        "file": "src/data/unified/flavorProfileMigration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 256,
        "column": 37,
        "context": "uisineData),\\n      elementalFlavors: ((cuisineData as unknown as any).elementalState as ElementalPro"
      },
      {
        "file": "src/data/unified/flavorProfileMigration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 305,
        "column": 20,
        "context": "ofile(;\\n          planetName,\\n          planetData as unknown as any,\\n        ),\\n        this.migrat"
      },
      {
        "file": "src/data/unified/flavorProfileMigration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 327,
        "column": 58,
        "context": "seNotes: this.extractPlanetaryBaseNotes(planetData as unknown as Planet),\\n      elementalFlavors: (p"
      },
      {
        "file": "src/data/unified/flavorProfileMigration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 341,
        "column": 64,
        "context": "Peak: this.extractPlanetarySeasonalPeak(planetData as unknown as Planet),\\n      seasonalModifiers: t"
      },
      {
        "file": "src/data/unified/flavorProfileMigration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 377,
        "column": 20,
        "context": "ofile(;\\n          flavorName,\\n          flavorData as unknown as any,\\n        ),\\n        this.migrat"
      },
      {
        "file": "src/data/unified/flavorProfileMigration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 601,
        "column": 37,
        "context": "e): number {\\n    const cuisineRecord = cuisineData as unknown as any;\\n    const intensity = cuisineR"
      },
      {
        "file": "src/data/unified/flavorProfileMigration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 615,
        "column": 37,
        "context": "e): number {\\n    const cuisineRecord = cuisineData as unknown as any;\\n    const complexity = cuisine"
      },
      {
        "file": "src/data/unified/flavorProfileMigration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 627,
        "column": 37,
        "context": ": Season[] {\\n    const cuisineRecord = cuisineData as unknown as any;\\n    const seasonalPeak = cuisi"
      },
      {
        "file": "src/data/unified/flavorProfileMigration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 638,
        "column": 35,
        "context": "eFlavorNotes {\\n    const planetRecord = planetData as unknown as any;\\n    const flavorProfiles = pla"
      },
      {
        "file": "src/data/unified/flavorProfileMigration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 655,
        "column": 35,
        "context": "t): Season[] {\\n    const planetRecord = planetData as unknown as any;\\n    const seasonalPeak = plane"
      },
      {
        "file": "src/data/unified/ingredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 29,
        "column": 2,
        "context": "// Combine all protein types\\nconst proteins = {\\n  ...meats;\\n  ...poultry;\\n  ...seafood;\\n  ...plantBa"
      },
      {
        "file": "src/data/unified/ingredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 30,
        "column": 2,
        "context": "ll protein types\\nconst proteins = {\\n  ...meats;\\n  ...poultry;\\n  ...seafood;\\n  ...plantBased\\n};\\n\\n/**\\n"
      },
      {
        "file": "src/data/unified/ingredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 31,
        "column": 2,
        "context": "es\\nconst proteins = {\\n  ...meats;\\n  ...poultry;\\n  ...seafood;\\n  ...plantBased\\n};\\n\\n/**\\n * Calculate K"
      },
      {
        "file": "src/data/unified/ingredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 32,
        "column": 2,
        "context": "ins = {\\n  ...meats;\\n  ...poultry;\\n  ...seafood;\\n  ...plantBased\\n};\\n\\n/**\\n * Calculate Kalchm value ba"
      },
      {
        "file": "src/data/unified/ingredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 206,
        "column": 2,
        "context": "ients: { [key: string]: UnifiedIngredient } = {\\n  ...unifiedFruits;\\n  ...unifiedVegetables;\\n  ...uni"
      },
      {
        "file": "src/data/unified/ingredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 207,
        "column": 2,
        "context": "g]: UnifiedIngredient } = {\\n  ...unifiedFruits;\\n  ...unifiedVegetables;\\n  ...unifiedHerbs;\\n  ...unif"
      },
      {
        "file": "src/data/unified/ingredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 208,
        "column": 2,
        "context": "= {\\n  ...unifiedFruits;\\n  ...unifiedVegetables;\\n  ...unifiedHerbs;\\n  ...unifiedSpices;\\n  ...unifiedG"
      },
      {
        "file": "src/data/unified/ingredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 209,
        "column": 2,
        "context": "its;\\n  ...unifiedVegetables;\\n  ...unifiedHerbs;\\n  ...unifiedSpices;\\n  ...unifiedGrains;\\n  ...unified"
      },
      {
        "file": "src/data/unified/ingredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 210,
        "column": 2,
        "context": "etables;\\n  ...unifiedHerbs;\\n  ...unifiedSpices;\\n  ...unifiedGrains;\\n  ...unifiedOils;\\n  ...unifiedVi"
      },
      {
        "file": "src/data/unified/ingredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 211,
        "column": 2,
        "context": "dHerbs;\\n  ...unifiedSpices;\\n  ...unifiedGrains;\\n  ...unifiedOils;\\n  ...unifiedVinegars;\\n  ...unified"
      },
      {
        "file": "src/data/unified/ingredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 212,
        "column": 2,
        "context": "edSpices;\\n  ...unifiedGrains;\\n  ...unifiedOils;\\n  ...unifiedVinegars;\\n  ...unifiedSeasonings;\\n  ...u"
      },
      {
        "file": "src/data/unified/ingredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 213,
        "column": 2,
        "context": "Grains;\\n  ...unifiedOils;\\n  ...unifiedVinegars;\\n  ...unifiedSeasonings;\\n  ...unifiedProteins\\n};\\n\\n// "
      },
      {
        "file": "src/data/unified/ingredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 214,
        "column": 2,
        "context": ";\\n  ...unifiedVinegars;\\n  ...unifiedSeasonings;\\n  ...unifiedProteins\\n};\\n\\n// Helper functions for wor"
      },
      {
        "file": "src/data/unified/ingredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 65,
        "column": 35,
        "context": "ynamics access\\n  const thermoData = thermodynamics as unknown as any;\\n  const reactivity = Number(th"
      },
      {
        "file": "src/data/unified/ingredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 93,
        "column": 56,
        "context": "t alchemicalData = ingredient.alchemicalProperties as unknown as any;\\n  const alchemicalProperties: "
      },
      {
        "file": "src/data/unified/ingredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 116,
        "column": 18,
        "context": "= calculateMonica(;\\n    kalchm,\\n    thermodynamics as unknown as ThermodynamicProperties | Thermodyn"
      },
      {
        "file": "src/data/unified/nutritional.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 497,
        "column": 6,
        "context": "talNutrientMapping.Air\\n    };\\n\\n    return {\\n      ...baseProfile;\\n      alchemicalProperties,\\n      "
      },
      {
        "file": "src/data/unified/nutritional.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 570,
        "column": 10,
        "context": "onData.fiber || 0),\\n        vitamins: {\\n          ...acc.vitamins;\\n          ...((nutritionData.vita"
      },
      {
        "file": "src/data/unified/nutritional.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 571,
        "column": 10,
        "context": " vitamins: {\\n          ...acc.vitamins;\\n          ...((nutritionData.vitamins ) || {})\\n        },\\n  "
      },
      {
        "file": "src/data/unified/nutritional.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 574,
        "column": 10,
        "context": ") || {})\\n        },\\n        minerals: {\\n          ...acc.minerals;\\n          ...((nutritionData.mine"
      },
      {
        "file": "src/data/unified/nutritional.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 575,
        "column": 10,
        "context": " minerals: {\\n          ...acc.minerals;\\n          ...((nutritionData.minerals ) || {})\\n        }\\n   "
      },
      {
        "file": "src/data/unified/nutritional.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 510,
        "column": 32,
        "context": " as PlanetName[],\\n        favorableZodiac: ['Leo'] as unknown as any[],\\n        seasonalPeak: ['Summ"
      },
      {
        "file": "src/data/unified/nutritional.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 511,
        "column": 32,
        "context": "unknown as any[],\\n        seasonalPeak: ['Summer'] as unknown as Season[],\\n        elementalAffinity"
      },
      {
        "file": "src/data/unified/recipeBuilding.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 74,
        "column": 26,
        "context": " of the original recipe\\n  const adaptedRecipe = { ...recipe };\\n\\n  // Update name and description\\n  a"
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 216,
        "column": 48,
        "context": ";\\n      ? methodsArray.reduce((acc, method) => ({ ...acc, [method.id || method.name]: method }), {})"
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 252,
        "column": 6,
        "context": " optimizedRecipe: MonicaOptimizedRecipe = {\\n      ...enhancedRecipe;\\n      monicaOptimization,\\n     "
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 477,
        "column": 10,
        "context": ": ingredientSubstitutions.map(sub => ({\\n          ...sub;\\n          seasonalImprovement: 0.1\\n       "
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 545,
        "column": 6,
        "context": "nst fusionRecipe: MonicaOptimizedRecipe = {\\n      ...enhancedFusionRecipe;\\n      monicaOptimization,"
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 684,
        "column": 57,
        "context": "ditional utility methods would be implemented here...\\n  // (Temperature adjustments, timing calculat"
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1411,
        "column": 35,
        "context": "ly alternative\\n      const dietaryAlternative = { ...recipe };\\n      dietaryAlternative.name = `${re"
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1418,
        "column": 35,
        "context": "ed alternative\\n      const cuisineAlternative = { ...recipe };\\n      cuisineAlternative.name = `${re"
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1425,
        "column": 36,
        "context": "l alternative\\n      const seasonalAlternative = { ...recipe };\\n      seasonalAlternative.name = `${r"
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1432,
        "column": 31,
        "context": "tionScore < 0.9) {\\n      const monicaEnhanced = { ...recipe };\\n      monicaEnhanced.name = `${recipe"
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1556,
        "column": 67,
        "context": "laceholder methods for comprehensive functionality...\\n  private selectIngredientsFromCriteria(_crite"
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1647,
        "column": 4,
        "context": "ptationsToRecipe(\\n    recipe: EnhancedRecipe,\\n    ..._adaptations: Array<Record<string, unknown>>\\n  "
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 328,
        "column": 5,
        "context": "asonalRecommendations(;\\n      currentSeason,\\n    ) as unknown as SeasonalRecommendations;\\n\\n    // Ca"
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 432,
        "column": 5,
        "context": "easonalRecommendations(;\\n      targetSeason,\\n    ) as unknown as SeasonalRecommendations;\\n\\n    // Ge"
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 481,
        "column": 24,
        "context": "Adjustments.map(adj => ({\\n          original: (adj as unknown as MethodAdjustment)?.method || '',\\n  "
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 482,
        "column": 24,
        "context": "djustment)?.method || '',\\n          adjusted: (adj as unknown as MethodAdjustment)?.adjustment || ''"
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 483,
        "column": 22,
        "context": "ustment)?.adjustment || '',\\n          reason: (adj as unknown as MethodAdjustment)?.reason || '',\\n  "
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 487,
        "column": 44,
        "context": "ts: {\\n          prepTimeChange: (timingAdjustments as unknown as TimingAdjustment)?.cookingTime || 0"
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 488,
        "column": 44,
        "context": "|| 0,\\n          cookTimeChange: (timingAdjustments as unknown as TimingAdjustment)?.cookingTime || 0"
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 489,
        "column": 44,
        "context": "|| 0,\\n          restTimeChange: (timingAdjustments as unknown as TimingAdjustment)?.restTime || 0,\\n "
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 491,
        "column": 30,
        "context": ",\\n          reason:\\n            (timingAdjustments as unknown as TimingAdjustment)?.reason ||\\n      "
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 495,
        "column": 52,
        "context": "        temperatureChange: (temperatureAdjustments as unknown as TemperatureAdjustment)?.temperature"
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 497,
        "column": 35,
        "context": "       reason:\\n            (temperatureAdjustments as unknown as TemperatureAdjustment)?.reason ||\\n "
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1018,
        "column": 31,
        "context": "nalIngredient = (;\\n        seasonalRecommendations as unknown as {\\n          getSeasonalEquivalent?:"
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1023,
        "column": 22,
        "context": "ient !== ingredient.name) {\\n        (substitutions as unknown as Array<unknown>).push({\\n          or"
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1047,
        "column": 31,
        "context": "nalAdjustment = (;\\n        seasonalRecommendations as unknown as {\\n          getCookingMethodAdjustm"
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1052,
        "column": 20,
        "context": "    if (seasonalAdjustment) {\\n        (adjustments as unknown as MethodAdjustment[]).push({\\n        "
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1093,
        "column": 25,
        "context": "(ingredient: string) =>;\\n      (cuisineIngredients as unknown as string[]).includes(ingredient),\\n   "
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1130,
        "column": 12,
        "context": " if (recipeIngredients.length > 10) {\\n      (notes as unknown as string[]).push(\\n        'Complex in"
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1141,
        "column": 12,
        "context": "ethod => method?.includes('slow'))) {\\n      (notes as unknown as string[]).push('Slow cooking method"
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1765,
        "column": 32,
        "context": "ngredients.push({\\n          ingredient: ingredient as unknown as UnifiedIngredient,\\n          source"
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1796,
        "column": 24,
        "context": "     fusionMethods.push({\\n          method: method as unknown as EnhancedCookingMethod,\\n          so"
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1943,
        "column": 3,
        "context": "ateFusionRecipe(\\n    _cuisines,\\n    _criteria,\\n  ) as unknown as MonicaOptimizedRecipe\\n}\\n\\nexport fun"
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1962,
        "column": 3,
        "context": ".generateMonicaOptimizedRecipe(\\n    _criteria,\\n  ) as unknown as MonicaOptimizedRecipe\\n}\\n\\nexport fun"
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1968,
        "column": 3,
        "context": "ystem.getSeasonalRecommendations(\\n    _season,\\n  ) as unknown as MonicaOptimizedRecipe[]\\n}\\n\\nexport f"
      },
      {
        "file": "src/data/unified/recipeBuilding.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1974,
        "column": 3,
        "context": "ystem.analyzeCuisineIngredients(\\n    _cuisine,\\n  ) as unknown as MonicaOptimizedRecipe[]\\n}\\n"
      },
      {
        "file": "src/data/unified/recipes.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 552,
        "column": 6,
        "context": "   const enhancedRecipe: EnhancedRecipe = {\\n      ...recipe, // Preserve ALL existing properties\\n\\n  "
      },
      {
        "file": "src/data/unified/recipes.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 683,
        "column": 22,
        "context": "ength,\\n      kalchmRange: {\\n        min: Math.min(...kalchmValues),\\n        max: Math.max(...kalchmV"
      },
      {
        "file": "src/data/unified/recipes.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 684,
        "column": 22,
        "context": " Math.min(...kalchmValues),\\n        max: Math.max(...kalchmValues),\\n        average: kalchmValues.re"
      },
      {
        "file": "src/data/unified/seasonal.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1363,
        "column": 6,
        "context": "(([season, profile]) => [\\n    season,\\n    {\\n      ...profile.ingredients;\\n      elementalInfluence: "
      },
      {
        "file": "src/data/unified/seasonal.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 187,
        "column": 35,
        "context": "ring_greens'],\\n          cookingMethod: 'grilling' as unknown as CookingMethod\\n        },\\n        '3"
      },
      {
        "file": "src/data/unified/seasonal.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 193,
        "column": 35,
        "context": "s', 'morels'],\\n          cookingMethod: 'roasting' as unknown as CookingMethod\\n        },\\n        '4"
      },
      {
        "file": "src/data/unified/seasonal.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 199,
        "column": 33,
        "context": "'new_potatoes'],\\n          cookingMethod: 'baking' as unknown as CookingMethod\\n        },\\n        '5"
      },
      {
        "file": "src/data/unified/seasonal.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 205,
        "column": 36,
        "context": "fava_beans'],\\n          cookingMethod: 'simmering' as unknown as CookingMethod\\n        },\\n        do"
      },
      {
        "file": "src/data/unified/seasonal.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 284,
        "column": 30,
        "context": "lon', 'cucumbers'],\\n          cookingMethod: 'raw' as unknown as CookingMethod\\n        },\\n        '3"
      },
      {
        "file": "src/data/unified/seasonal.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 290,
        "column": 37,
        "context": " 'peaches'],\\n          cookingMethod: 'fermenting' as unknown as CookingMethod\\n        },\\n        '5"
      },
      {
        "file": "src/data/unified/seasonal.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 296,
        "column": 35,
        "context": "ell_peppers'],\\n          cookingMethod: 'grilling' as unknown as CookingMethod\\n        },\\n        '6"
      },
      {
        "file": "src/data/unified/seasonal.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 302,
        "column": 35,
        "context": "mmer_squash'],\\n          cookingMethod: 'roasting' as unknown as CookingMethod\\n        },\\n        do"
      },
      {
        "file": "src/data/unified/seasonal.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 381,
        "column": 33,
        "context": "ples', 'pears'],\\n          cookingMethod: 'baking' as unknown as CookingMethod\\n        },\\n        '5"
      },
      {
        "file": "src/data/unified/seasonal.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 387,
        "column": 35,
        "context": "ies', 'figs'],\\n          cookingMethod: 'poaching' as unknown as CookingMethod\\n        },\\n        '6"
      },
      {
        "file": "src/data/unified/seasonal.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 393,
        "column": 35,
        "context": "et_potatoes'],\\n          cookingMethod: 'roasting' as unknown as CookingMethod\\n        },\\n        '8"
      },
      {
        "file": "src/data/unified/seasonal.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 399,
        "column": 35,
        "context": " 'mushrooms'],\\n          cookingMethod: 'sauteing' as unknown as CookingMethod\\n        },\\n        do"
      },
      {
        "file": "src/data/unified/seasonal.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 479,
        "column": 33,
        "context": "ples', 'pears'],\\n          cookingMethod: 'baking' as unknown as CookingMethod\\n        },\\n        '5"
      },
      {
        "file": "src/data/unified/seasonal.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 485,
        "column": 35,
        "context": "ies', 'figs'],\\n          cookingMethod: 'poaching' as unknown as CookingMethod\\n        },\\n        '6"
      },
      {
        "file": "src/data/unified/seasonal.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 491,
        "column": 35,
        "context": "et_potatoes'],\\n          cookingMethod: 'roasting' as unknown as CookingMethod\\n        },\\n        '8"
      },
      {
        "file": "src/data/unified/seasonal.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 497,
        "column": 35,
        "context": " 'mushrooms'],\\n          cookingMethod: 'sauteing' as unknown as CookingMethod\\n        },\\n        do"
      },
      {
        "file": "src/data/unified/seasonal.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 576,
        "column": 35,
        "context": "nter_squash'],\\n          cookingMethod: 'braising' as unknown as CookingMethod\\n        },\\n        '3"
      },
      {
        "file": "src/data/unified/seasonal.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 582,
        "column": 34,
        "context": "ale', 'leeks'],\\n          cookingMethod: 'stewing' as unknown as CookingMethod\\n        },\\n        '8"
      },
      {
        "file": "src/data/unified/seasonal.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 588,
        "column": 35,
        "context": "omegranates'],\\n          cookingMethod: 'poaching' as unknown as CookingMethod\\n        },\\n        '9"
      },
      {
        "file": "src/data/unified/seasonal.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 594,
        "column": 36,
        "context": "ranberries'],\\n          cookingMethod: 'simmering' as unknown as CookingMethod\\n        },\\n        do"
      },
      {
        "file": "src/data/unified/seasonal.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 680,
        "column": 35,
        "context": "ic', 'herbs'],\\n          cookingMethod: 'sauteing' as unknown as CookingMethod\\n        },\\n        ac"
      },
      {
        "file": "src/data/unified/seasonal.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 686,
        "column": 36,
        "context": ", 'carrots'],\\n          cookingMethod: 'simmering' as unknown as CookingMethod\\n        },\\n        ac"
      },
      {
        "file": "src/data/unified/seasonal.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 692,
        "column": 35,
        "context": ", 'potatoes'],\\n          cookingMethod: 'roasting' as unknown as CookingMethod\\n        },\\n        ac"
      },
      {
        "file": "src/data/unified/seasonal.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 698,
        "column": 33,
        "context": "les', 'grains'],\\n          cookingMethod: 'baking' as unknown as CookingMethod\\n        },\\n        do"
      },
      {
        "file": "src/data/unified/seasonal.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 719,
        "column": 64,
        "context": "cedCookingMethods = getAllEnhancedCookingMethods() as unknown as {\\n      [key: string]: EnhancedCook"
      },
      {
        "file": "src/data/unified/services/ElementalCalculator.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 36,
        "column": 6,
        "context": "instance.currentBalance = initialState || {\\n      ...elementalCore_1.DEFAULT_ELEMENTAL_PROPERTIES,\\n "
      },
      {
        "file": "src/data/unified/services/ElementalCalculator.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 43,
        "column": 32,
        "context": "or.getInstance();\\n    instance.currentBalance = { ...newState };\\n    logger.debug('ElementalCalculat"
      },
      {
        "file": "src/data/unified/services/ElementalCalculator.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 422,
        "column": 21,
        "context": " specific zodiac adjustments\\n    const result = { ...seasonalModifiers };\\n    Object.entries(specifi"
      },
      {
        "file": "src/data/unified/services/ElementalCalculator.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 492,
        "column": 12,
        "context": "present\\n          const planetObj = {\\n            ...obj[key],\\n            name: isPlanetKey,\\n      "
      },
      {
        "file": "src/data/unified/services/errorHandler.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 89,
        "column": 85,
        "context": "tion(error, { extra: { type, severity, component, ...context } });\\n    return {\\n      error,\\n      t"
      },
      {
        "file": "src/data/unified/types/chakra.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 450,
        "column": 4,
        "context": "chakraEnergies, position, value) {\\n  return {\\n    ...chakraEnergies,\\n    [position]: value,\\n  };\\n}\\ne"
      },
      {
        "file": "src/data/unified/types/zodiac.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 184,
        "column": 4,
        "context": "createZodiacAffinity(affinities) {\\n  return {\\n    ...exports.DEFAULT_ZODIAC_AFFINITY,\\n    ...affinit"
      },
      {
        "file": "src/data/unified/types/zodiac.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 185,
        "column": 4,
        "context": "urn {\\n    ...exports.DEFAULT_ZODIAC_AFFINITY,\\n    ...affinities,\\n  };\\n}\\nexports.createZodiacAffinity"
      },
      {
        "file": "src/data/unified/unifiedFlavorEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 506,
        "column": 34,
        "context": "lculate overlap\\n    const intersection = new Set([...origins1].filter(x => origins2.has(x)));\\n    co"
      },
      {
        "file": "src/data/unified/unifiedFlavorEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 507,
        "column": 27,
        "context": " => origins2.has(x)));\\n    const union = new Set([...origins1, ...origins2]);\\n\\n    const baseCompati"
      },
      {
        "file": "src/data/unified/unifiedFlavorEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 507,
        "column": 40,
        "context": "has(x)));\\n    const union = new Set([...origins1, ...origins2]);\\n\\n    const baseCompatibility = inte"
      },
      {
        "file": "src/data/unified/unifiedFlavorEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 559,
        "column": 34,
        "context": " method overlap\\n    const intersection = new Set([...methods1].filter(x => methods2.has(x)));\\n    co"
      },
      {
        "file": "src/data/unified/unifiedFlavorEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 560,
        "column": 27,
        "context": " => methods2.has(x)));\\n    const union = new Set([...methods1, ...methods2]);\\n\\n    const baseCompati"
      },
      {
        "file": "src/data/unified/unifiedFlavorEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 560,
        "column": 40,
        "context": "has(x)));\\n    const union = new Set([...methods1, ...methods2]);\\n\\n    const baseCompatibility = inte"
      },
      {
        "file": "src/data/unified/unifiedFlavorEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 683,
        "column": 12,
        "context": "s || []).map(o => o.toLowerCase()));\\n\\n    return [...new Set([...origins1].filter(x => origins2.has("
      },
      {
        "file": "src/data/unified/unifiedFlavorEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 683,
        "column": 24,
        "context": "(o => o.toLowerCase()));\\n\\n    return [...new Set([...origins1].filter(x => origins2.has(x)))];\\n  }\\n\\n"
      },
      {
        "file": "src/data/unified/unifiedFlavorEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1004,
        "column": 53,
        "context": " log.info('üî• Warming up UnifiedFlavorEngine cache...');\\n\\n    const profiles = Array.from(this.profi"
      },
      {
        "file": "src/data/unified/utils/astrology/core.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 32,
        "column": 28,
        "context": "led in production\\n */\\nconst debugLog = (_message, ...args) => {\\n  // Comment out console.log to avoi"
      },
      {
        "file": "src/data/unified/utils/astrology/core.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 34,
        "column": 23,
        "context": " to avoid linting warnings\\n  // log.info(message, ...args);\\n};\\n/**\\n * A utility function for logging"
      },
      {
        "file": "src/data/unified/utils/astrology/core.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 40,
        "column": 28,
        "context": "led in production\\n */\\nconst errorLog = (_message, ...args) => {\\n  // Comment out console.error to av"
      },
      {
        "file": "src/data/unified/utils/astrology/core.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 42,
        "column": 28,
        "context": "void linting warnings\\n  // console.error(message, ...args);\\n};\\n// Add type assertion for zodiac sign"
      },
      {
        "file": "src/data/unified/utils/astrology/core.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 265,
        "column": 43,
        "context": "/ 30);\\n  // Calculate degree within sign (0-29.999...)\\n  const degree = normalizedLong % 30;\\n  // Ge"
      },
      {
        "file": "src/data/unified/utils/astrology/positions.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 19,
        "column": 28,
        "context": "led in production\\n */\\nconst debugLog = (_message, ...args) => {\\n  // Comment out console.log to avoi"
      },
      {
        "file": "src/data/unified/utils/astrology/positions.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 21,
        "column": 23,
        "context": " to avoid linting warnings\\n  // log.info(message, ...args);\\n};\\n// Updated reference data for July 2,"
      },
      {
        "file": "src/data/unified/utils/astrology/positions.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 391,
        "column": 43,
        "context": "/ 30);\\n  // Calculate degree within sign (0-29.999...)\\n  const degree = normalizedLongitude % 30;\\n  "
      },
      {
        "file": "src/data/unified/utils/astrology/validation.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 24,
        "column": 29,
        "context": "ed in production\\n */\\nconst _debugLog = (_message, ...args) => {\\n  // Comment out console.log to avoi"
      },
      {
        "file": "src/data/unified/utils/astrology/validation.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 26,
        "column": 23,
        "context": " to avoid linting warnings\\n  // log.info(message, ...args);\\n};\\n/**\\n * A utility function for logging"
      },
      {
        "file": "src/data/unified/utils/astrology/validation.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 32,
        "column": 28,
        "context": "led in production\\n */\\nconst errorLog = (_message, ...args) => {\\n  // Comment out console.error to av"
      },
      {
        "file": "src/data/unified/utils/astrology/validation.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 34,
        "column": 28,
        "context": "void linting warnings\\n  // console.error(message, ...args);\\n};\\n// Cache for reliable positions\\nlet r"
      },
      {
        "file": "src/data/unified/utils/astrology/validation.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 507,
        "column": 25,
        "context": "ect' && data !== null) {\\n      const position = { ...data };\\n      // Convert sign to lowercase if i"
      },
      {
        "file": "src/data/unified/utils/dateUtils.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 21,
        "column": 28,
        "context": "led in production\\n */\\nconst debugLog = (_message, ...args) => {\\n  // Comment out console.log to avoi"
      },
      {
        "file": "src/data/unified/utils/dateUtils.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 23,
        "column": 23,
        "context": " to avoid linting warnings\\n  // log.info(message, ...args);\\n};\\n/**\\n * Get the current season based o"
      },
      {
        "file": "src/data/unified/utils/dateUtils.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 171,
        "column": 23,
        "context": "y.isArray(seasonDishes)) {\\n          allDishes = [...allDishes, ...seasonDishes];\\n        }\\n      })"
      },
      {
        "file": "src/data/unified/utils/dateUtils.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 171,
        "column": 37,
        "context": "onDishes)) {\\n          allDishes = [...allDishes, ...seasonDishes];\\n        }\\n      });\\n    }\\n  });\\n"
      },
      {
        "file": "src/data/unified/utils/dateUtils.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 205,
        "column": 28,
        "context": "eDishes[season] : [];\\n    const combinedDishes = [...allSeasonDishes, ...seasonalDishes];\\n    debugL"
      },
      {
        "file": "src/data/unified/utils/dateUtils.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 205,
        "column": 48,
        "context": ";\\n    const combinedDishes = [...allSeasonDishes, ...seasonalDishes];\\n    debugLog(`Found ${combined"
      },
      {
        "file": "src/data/unified/utils/elementalUtils.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 73,
        "column": 13,
        "context": "properties', 'normalizeProperties');\\n    return { ...elementalCore_1.DEFAULT_ELEMENTAL_PROPERTIES };"
      },
      {
        "file": "src/data/unified/utils/elementalUtils.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 86,
        "column": 13,
        "context": "(sum is 0)', 'normalizeProperties');\\n    return { ...elementalCore_1.DEFAULT_ELEMENTAL_PROPERTIES };"
      },
      {
        "file": "src/data/unified/utils/elementalUtils.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 99,
        "column": 6,
        "context": "perties');\\n      }\\n      return acc;\\n    },\\n    { ...elementalCore_1.DEFAULT_ELEMENTAL_PROPERTIES },"
      },
      {
        "file": "src/data/unified/utils/elementalUtils.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 114,
        "column": 29,
        "context": "ents');\\n    return {\\n      elementalProperties: { ...elementalCore_1.DEFAULT_ELEMENTAL_PROPERTIES },"
      },
      {
        "file": "src/data/unified/utils/elementalUtils.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 121,
        "column": 6,
        "context": "or.getCurrentElementalState();\\n    return {\\n      ...recipe,\\n      elementalProperties: currentState"
      },
      {
        "file": "src/data/unified/utils/elementalUtils.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 127,
        "column": 4,
        "context": "properties to ensure they sum to 1\\n  return {\\n    ...recipe,\\n    elementalProperties: (0, exports.no"
      },
      {
        "file": "src/data/unified/utils/elementalUtils.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 170,
        "column": 22,
        "context": "fe default balance to start\\n    const balance = { ...elementalCore_1.DEFAULT_ELEMENTAL_PROPERTIES };"
      },
      {
        "file": "src/data/unified/utils/elementalUtils.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 246,
        "column": 30,
        "context": "e dominant element?\\n    const maxValue = Math.max(...values);\\n    const intensity = maxValue / 0.25 "
      },
      {
        "file": "src/data/unified/utils/elementalUtils.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 253,
        "column": 17,
        "context": "\\n      balance,\\n      intensity,\\n      profile: { ...properties },\\n    };\\n  },\\n  getSuggestedCooking"
      },
      {
        "file": "src/data/unified/utils/elementalUtils.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 266,
        "column": 25,
        "context": "nt) {\\n      case 'Fire':\\n        suggestions.push(...fireTechniques.slice(0, 3));\\n        break;\\n   "
      },
      {
        "file": "src/data/unified/utils/elementalUtils.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 269,
        "column": 25,
        "context": "eak;\\n      case 'Water':\\n        suggestions.push(...waterTechniques.slice(0, 3));\\n        break;\\n  "
      },
      {
        "file": "src/data/unified/utils/elementalUtils.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 272,
        "column": 25,
        "context": "eak;\\n      case 'Earth':\\n        suggestions.push(...earthTechniques.slice(0, 3));\\n        break;\\n  "
      },
      {
        "file": "src/data/unified/utils/elementalUtils.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 275,
        "column": 25,
        "context": "break;\\n      case 'Air':\\n        suggestions.push(...AirTechniques.slice(0, 3));\\n        break;\\n    "
      },
      {
        "file": "src/data/unified/utils/elementalUtils.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 334,
        "column": 12,
        "context": "ecommendations.push('anytime');\\n    }\\n    return [...new Set(recommendations)]; // Remove duplicates"
      },
      {
        "file": "src/data/unified/utils/elementalUtils.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 337,
        "column": 13,
        "context": "\\n  getDefaultElementalProperties() {\\n    return { ...elementalCore_1.DEFAULT_ELEMENTAL_PROPERTIES };"
      },
      {
        "file": "src/data/unified/utils/elementalUtils.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 382,
        "column": 31,
        "context": "anetary influences\\n    const transformedProps = { ...elemProps };\\n    let totalPlanetaryInfluence = "
      },
      {
        "file": "src/data/unified/utils/elementalUtils.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 459,
        "column": 6,
        "context": "ence + uniqueness) / 3,\\n    );\\n    return {\\n      ...item,\\n      elementalProperties: transformedPro"
      },
      {
        "file": "src/data/unified/utils/elementalUtils.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 543,
        "column": 3,
        "context": "trengtheningElement = getStrengtheningElement;\\n// ... rest of the file ...\\n// Fix the function decla"
      },
      {
        "file": "src/data/unified/utils/elementalUtils.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 543,
        "column": 24,
        "context": " getStrengtheningElement;\\n// ... rest of the file ...\\n// Fix the function declarations to use proper"
      },
      {
        "file": "src/data/unified/utils/elementalUtils.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 546,
        "column": 5,
        "context": "nhanceVegetableTransformations(vegetables) {\\n  // ... implementation ...\\n  return vegetables;\\n}\\nexpo"
      },
      {
        "file": "src/data/unified/utils/elementalUtils.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 546,
        "column": 24,
        "context": "sformations(vegetables) {\\n  // ... implementation ...\\n  return vegetables;\\n}\\nexports.enhanceVegetabl"
      },
      {
        "file": "src/data/unified/utils/elementalUtils.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 551,
        "column": 5,
        "context": "tions;\\nfunction enhanceOilProperties(oils) {\\n  // ... implementation ...\\n  return oils;\\n}\\nexports.en"
      },
      {
        "file": "src/data/unified/utils/elementalUtils.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 551,
        "column": 24,
        "context": "anceOilProperties(oils) {\\n  // ... implementation ...\\n  return oils;\\n}\\nexports.enhanceOilProperties "
      },
      {
        "file": "src/data/unified/utils/elementalUtils.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 556,
        "column": 5,
        "context": "tion fixIngredientMappings(rawIngredients) {\\n  // ... implementation ...\\n  return rawIngredients;\\n}\\n"
      },
      {
        "file": "src/data/unified/utils/elementalUtils.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 556,
        "column": 24,
        "context": "appings(rawIngredients) {\\n  // ... implementation ...\\n  return rawIngredients;\\n}\\nexports.fixIngredie"
      },
      {
        "file": "src/examples/ServiceIntegrationExample.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 18,
        "column": 40,
        "context": " services\\n    log.info('\\n1. Initializing services...');\\n    await servicesManager.initialize();\\n\\n  "
      },
      {
        "file": "src/examples/ServiceIntegrationExample.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 22,
        "column": 45,
        "context": "ager\\n    log.info('\\n2. Getting service references...');\\n    const {\\n      alchemicalEngine,\\n      a"
      },
      {
        "file": "src/examples/ServiceIntegrationExample.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 32,
        "column": 54,
        "context": "log.info('\\n3. Getting current planetary positions...');\\n    const planetaryPositions = await astrol"
      },
      {
        "file": "src/examples/ServiceIntegrationExample.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 37,
        "column": 76,
        "context": "ting elemental properties from planetary positions...');\\n    // Apply surgical type casting with var"
      },
      {
        "file": "src/examples/ServiceIntegrationExample.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 47,
        "column": 52,
        "context": "  log.info('\\n5. Calculating thermodynamic metrics...');\\n    // Apply surgical type casting with var"
      },
      {
        "file": "src/examples/ServiceIntegrationExample.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 57,
        "column": 53,
        "context": " log.info('\\n6. Getting ingredient recommendations...');\\n    const ingredientRecommendations = await"
      },
      {
        "file": "src/examples/ServiceIntegrationExample.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 70,
        "column": 49,
        "context": "\\n    log.info('\\n7. Getting recipe recommendations...');\\n    const recipeRecommendations = await rec"
      },
      {
        "file": "src/examples/ServiceIntegrationExample.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 83,
        "column": 57,
        "context": ".info('\\n8. Getting cooking method recommendations...');\\n    const cookingMethodRecommendations = aw"
      },
      {
        "file": "src/examples/ServiceIntegrationExample.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 96,
        "column": 70,
        "context": "alculating elemental compatibility between recipes...');\\n    // For this example, we'll create mock "
      },
      {
        "file": "src/examples/ServiceIntegrationExample.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 122,
        "column": 46,
        "context": "ipe\\n    log.info('\\n10. Generating a fusion recipe...');\\n    // Apply surgical type casting with var"
      },
      {
        "file": "src/hooks/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 56,
        "column": 4,
        "context": "ce as any)?.Air || 0) * 0.2,\\n  };\\n\\n  return {\\n    ...combinedState,\\n    tarotInfluence,\\n    astrolog"
      },
      {
        "file": "src/hooks/useAgentHooks.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 49,
        "column": 24,
        "context": "al: 5, // 5 minutes\\n  };\\n\\n  const finalConfig = { ...defaultConfig, ...config };\\n  const qa = getAut"
      },
      {
        "file": "src/hooks/useAgentHooks.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 49,
        "column": 42,
        "context": "s\\n  };\\n\\n  const finalConfig = { ...defaultConfig, ...config };\\n  const qa = getAutomatedQualityAssur"
      },
      {
        "file": "src/hooks/useAgentHooks.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 66,
        "column": 28,
        "context": "te.isActive) return;\\n\\n    setHookState(prev => ({ ...prev, isActive: true }));\\n\\n    // Set up valida"
      },
      {
        "file": "src/hooks/useAgentHooks.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 95,
        "column": 14,
        "context": "            setHookState(prev => ({\\n              ...prev;\\n              lastValidation: Date.now(),"
      },
      {
        "file": "src/hooks/useAgentHooks.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 97,
        "column": 35,
        "context": "n: Date.now(),\\n              validationResults: { ...prev.validationResults, ...results },\\n         "
      },
      {
        "file": "src/hooks/useAgentHooks.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 97,
        "column": 62,
        "context": "  validationResults: { ...prev.validationResults, ...results },\\n              campaignTriggers: qa.g"
      },
      {
        "file": "src/hooks/useAgentHooks.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 121,
        "column": 28,
        "context": "urrent = null;\\n    }\\n\\n    setHookState(prev => ({ ...prev, isActive: false }));\\n    logger.info('Age"
      },
      {
        "file": "src/hooks/useAgentHooks.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 139,
        "column": 14,
        "context": "            setHookState(prev => ({\\n              ...prev;\\n              campaignTriggers: [...prev."
      },
      {
        "file": "src/hooks/useAgentHooks.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 140,
        "column": 33,
        "context": "        ...prev;\\n              campaignTriggers: [...prev.campaignTriggers, trigger]\\n            }))"
      },
      {
        "file": "src/hooks/useAgentHooks.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 146,
        "column": 10,
        "context": "     }\\n\\n        setHookState(prev => ({\\n          ...prev;\\n          lastValidation: Date.now(),\\n   "
      },
      {
        "file": "src/hooks/useAgentHooks.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 148,
        "column": 31,
        "context": "ation: Date.now(),\\n          validationResults: { ...prev.validationResults, ...results },\\n         "
      },
      {
        "file": "src/hooks/useAgentHooks.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 148,
        "column": 58,
        "context": "  validationResults: { ...prev.validationResults, ...results },\\n          qualityMetrics: qa.getQual"
      },
      {
        "file": "src/hooks/useAlchemical.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 22,
        "column": 26,
        "context": "async () => {\\n    try {\\n      setState(prev => ({ ...prev, isLoading: true, error: null }));\\n\\n      "
      },
      {
        "file": "src/hooks/useAlchemical.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 44,
        "column": 8,
        "context": "catch (error) {\\n      setState(prev => ({\\n        ...prev,\\n        isLoading: false,\\n        error: "
      },
      {
        "file": "src/hooks/useAlchemical.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 56,
        "column": 4,
        "context": "\\n  }, [fetchPlanetaryPositions]);\\n\\n  return {\\n    ...state,\\n    refresh: fetchPlanetaryPositions,\\n  "
      },
      {
        "file": "src/hooks/useAlchemicalRecommendations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 117,
        "column": 14,
        "context": "            const convertedItem = {\\n              ...item;\\n              // Ensure all required Alch"
      },
      {
        "file": "src/hooks/useAstrologicalInfluence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 104,
        "column": 4,
        "context": "gicalState, planetaryPositions]);\\n\\n  return {\\n    ...influence;\\n    isLoading: isLoading || !astrolo"
      },
      {
        "file": "src/hooks/useAstrologicalState.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 203,
        "column": 14,
        "context": "      }\\n\\n      // Ensure uniqueness\\n      return [...new Set(activePlanets)];\\n    },\\n    [],\\n  ),\\n\\n "
      },
      {
        "file": "src/hooks/useAstrologicalState.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 244,
        "column": 12,
        "context": " prev\\n          }\\n\\n          return {\\n            ...prev;\\n            currentZodiac,\\n            cu"
      },
      {
        "file": "src/hooks/useAstrologicalState.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 289,
        "column": 4,
        "context": " the astro state with isReady flag\\n  return {\\n    ...astroState;\\n    isReady,\\n    isDaytime: isDayti"
      },
      {
        "file": "src/hooks/useAstrologicalState.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 296,
        "column": 42,
        "context": "gnment:\\n      astroState.currentPlanetaryAlignment as unknown as PlanetaryAlignment,\\n    lunarPhase:"
      },
      {
        "file": "src/hooks/useAstrologize.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 99,
        "column": 10,
        "context": "        minute,\\n          zodiacSystem,\\n          ...(location && { latitude: location.latitude, lon"
      },
      {
        "file": "src/hooks/useAstrology.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 96,
        "column": 28,
        "context": "gitude are required';\\n        setState(prev => ({ ...prev, error, loading: false }));\\n        return"
      },
      {
        "file": "src/hooks/useAstrology.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 102,
        "column": 28,
        "context": " between -90 and 90';\\n        setState(prev => ({ ...prev, error, loading: false }));\\n        return"
      },
      {
        "file": "src/hooks/useAstrology.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 108,
        "column": 28,
        "context": "etween -180 and 180';\\n        setState(prev => ({ ...prev, error, loading: false }));\\n        return"
      },
      {
        "file": "src/hooks/useAstrology.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 121,
        "column": 26,
        "context": "xistingRequest\\n      }\\n\\n      setState(prev => ({ ...prev, loading: true, error: null }));\\n\\n      //"
      },
      {
        "file": "src/hooks/useAstrology.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 172,
        "column": 14,
        "context": ") {\\n            setState(prev => ({\\n              ...prev;\\n              loading: false,\\n           "
      },
      {
        "file": "src/hooks/useAstrology.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 194,
        "column": 14,
        "context": ") {\\n            setState(prev => ({\\n              ...prev;\\n              loading: false,\\n           "
      },
      {
        "file": "src/hooks/useAstrology.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 272,
        "column": 16,
        "context": "              setState(prev => ({\\n                ...prev;\\n                data: {\\n                 "
      },
      {
        "file": "src/hooks/useAstrology.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 274,
        "column": 18,
        "context": "..prev;\\n                data: {\\n                  ...prev.data;\\n                  elementalBalance: "
      },
      {
        "file": "src/hooks/useAstrology.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 398,
        "column": 12,
        "context": "prev: AstrologyState) =>\\n          ({\\n            ...prev;\\n            loading: false,\\n            e"
      },
      {
        "file": "src/hooks/useAstrology.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 402,
        "column": 14,
        "context": " to API error',\\n            data: {\\n              ...prev.data;\\n              planetaryPositions: po"
      },
      {
        "file": "src/hooks/useAstrology.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 488,
        "column": 10,
        "context": ".current) {\\n        setState(prev => ({\\n          ...prev;\\n          data: {\\n            ...prev.dat"
      },
      {
        "file": "src/hooks/useAstrology.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 490,
        "column": 12,
        "context": "\\n          ...prev;\\n          data: {\\n            ...prev.data;\\n            elementalBalance\\n       "
      },
      {
        "file": "src/hooks/useAstrology.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 553,
        "column": 4,
        "context": " longitude, fetchAstrologyData]);\\n\\n  return {\\n    ...state;\\n    fetchAstrologyData,\\n    calculateEle"
      },
      {
        "file": "src/hooks/useCampaignMonitoring.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 86,
        "column": 26,
        "context": "async () => {\\n    try {\\n      setState(prev => ({ ...prev, loading: true, error: null }));\\n\\n      co"
      },
      {
        "file": "src/hooks/useCampaignMonitoring.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 91,
        "column": 8,
        "context": "ontrolPanel();\\n\\n      setState(prev => ({\\n        ...prev;\\n        controlPanel,\\n        activeCampa"
      },
      {
        "file": "src/hooks/useCampaignMonitoring.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 132,
        "column": 8,
        "context": "campaign data';\\n      setState(prev => ({\\n        ...prev;\\n        loading: false,\\n        error: er"
      },
      {
        "file": "src/hooks/useCampaignMonitoring.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 152,
        "column": 28,
        "context": "d to start campaign';\\n        setState(prev => ({ ...prev, error: errorMessage }));\\n        throw er"
      },
      {
        "file": "src/hooks/useCampaignMonitoring.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 170,
        "column": 28,
        "context": "d to pause campaign';\\n        setState(prev => ({ ...prev, error: errorMessage }));\\n        return f"
      },
      {
        "file": "src/hooks/useCampaignMonitoring.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 188,
        "column": 28,
        "context": " to resume campaign';\\n        setState(prev => ({ ...prev, error: errorMessage }));\\n        return f"
      },
      {
        "file": "src/hooks/useCampaignMonitoring.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 207,
        "column": 28,
        "context": "ed to stop campaign';\\n        setState(prev => ({ ...prev, error: errorMessage }));\\n        return f"
      },
      {
        "file": "src/hooks/useCampaignMonitoring.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 222,
        "column": 28,
        "context": "get campaign status';\\n        setState(prev => ({ ...prev, error: errorMessage }));\\n        return n"
      },
      {
        "file": "src/hooks/useCampaignMonitoring.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 236,
        "column": 28,
        "context": "o schedule campaign';\\n        setState(prev => ({ ...prev, error: errorMessage }));\\n        throw er"
      },
      {
        "file": "src/hooks/useChakraInfluencedFood.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 322,
        "column": 14,
        "context": "s scoreDetails\\n            return {\\n              ...ingredient;\\n              scoreDetails: {\\n     "
      },
      {
        "file": "src/hooks/useChakraInfluencedFood.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 324,
        "column": 16,
        "context": "nt;\\n              scoreDetails: {\\n                ...(ingredient.scoreDetails || {}),\\n              "
      },
      {
        "file": "src/hooks/useChakraInfluencedFood.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 451,
        "column": 12,
        "context": "    }\\n          }\\n\\n          return {\\n            ...ingredient;\\n            scoreDetails: {\\n       "
      },
      {
        "file": "src/hooks/useChakraInfluencedFood.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 453,
        "column": 14,
        "context": "edient;\\n            scoreDetails: {\\n              ...(ingredient.scoreDetails || {}),\\n              "
      },
      {
        "file": "src/hooks/useChakraInfluencedFood.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 69,
        "column": 66,
        "context": "ryHour, setPlanetaryHour] = useState<Planet>('sun' as unknown as Planet);\\n\\n  // Create service insta"
      },
      {
        "file": "src/hooks/useChakraInfluencedFood.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 95,
        "column": 37,
        "context": "anetName)) {\\n          setPlanetaryHour(planetName as unknown as Planet);\\n        }\\n      }\\n    } ca"
      },
      {
        "file": "src/hooks/useChakraInfluencedFood.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 113,
        "column": 34,
        "context": "iac || 'aries',\\n      planetaryHour: planetaryHour as unknown as Planet,\\n      aspects: state.astrol"
      },
      {
        "file": "src/hooks/useChakraInfluencedFood.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 117,
        "column": 5,
        "context": "astrologicalState.tarotPlanetaryBoosts || {}\\n    } as unknown as AstrologicalState;\\n  }, [\\n    curre"
      },
      {
        "file": "src/hooks/useChakraInfluencedFood.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 143,
        "column": 39,
        "context": "e() : p)),\\n          : ['sun', 'moon', 'mercury']) as unknown as Planet[],\\n        planetaryHour,\\n  "
      },
      {
        "file": "src/hooks/useChakraInfluencedFood.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 264,
        "column": 40,
        "context": ") * 0.3 +\\n                ((Number((chakraEnergies as unknown as any).thirdEye) || chakraEnergies.th"
      },
      {
        "file": "src/hooks/useChakraInfluencedFood.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 305,
        "column": 44,
        "context": "re +;\\n                    ((Number((chakraEnergies as unknown as any).thirdEye) ||\\n                 "
      },
      {
        "file": "src/hooks/useChakraInfluencedFood.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 358,
        "column": 39,
        "context": "e() : p)),\\n          : ['sun', 'moon', 'mercury']) as unknown as Planet[],\\n        planetaryHour,\\n  "
      },
      {
        "file": "src/hooks/useChakraInfluencedFood.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 394,
        "column": 38,
        "context": "10) * 0.3 +\\n              ((Number((chakraEnergies as unknown as any).thirdEye) || chakraEnergies.th"
      },
      {
        "file": "src/hooks/useChakraInfluencedFood.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 436,
        "column": 42,
        "context": "core +;\\n                  ((Number((chakraEnergies as unknown as any).thirdEye) || chakraEnergies.th"
      },
      {
        "file": "src/hooks/useContextServiceBridge.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 52,
        "column": 4,
        "context": "es when available\\n  const mergedPositions = {\\n    ...contextPositions,\\n    ...servicePositions,\\n  };"
      },
      {
        "file": "src/hooks/useContextServiceBridge.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 53,
        "column": 4,
        "context": " mergedPositions = {\\n    ...contextPositions,\\n    ...servicePositions,\\n  };\\n\\n  return {\\n    // Basic"
      },
      {
        "file": "src/hooks/useContextServiceBridge.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 201,
        "column": 30,
        "context": "useCustomBridge() {\\n    const { isLoading, error, ...services } = useServices();\\n    const service ="
      },
      {
        "file": "src/hooks/useCookingMethods.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 107,
        "column": 26,
        "context": "and deduplicate methods\\n      const allMethods = [...convertedMethods, ...additionalMethods];\\n      "
      },
      {
        "file": "src/hooks/useCookingMethods.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 107,
        "column": 47,
        "context": "ds\\n      const allMethods = [...convertedMethods, ...additionalMethods];\\n      const uniqueMethods ="
      },
      {
        "file": "src/hooks/useDebugSettings.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 39,
        "column": 22,
        "context": "tings = JSON.parse(stored);\\n        setSettings({ ...DEFAULT_SETTINGS, ...parsedSettings });\\n      }"
      },
      {
        "file": "src/hooks/useDebugSettings.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 39,
        "column": 43,
        "context": "ored);\\n        setSettings({ ...DEFAULT_SETTINGS, ...parsedSettings });\\n      }\\n    } catch (error) "
      },
      {
        "file": "src/hooks/useDebugSettings.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 49,
        "column": 32,
        "context": "ugSettings>) => {\\n      const updatedSettings = { ...settings, ...newSettings };\\n      setSettings(u"
      },
      {
        "file": "src/hooks/useDebugSettings.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 49,
        "column": 45,
        "context": "=> {\\n      const updatedSettings = { ...settings, ...newSettings };\\n      setSettings(updatedSetting"
      },
      {
        "file": "src/hooks/useElementalState.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 75,
        "column": 6,
        "context": "ariance * 4); // Scale to 0-1\\n\\n    return {\\n      ...normalized;\\n      dominant,\\n      balance\\n    }"
      },
      {
        "file": "src/hooks/useElementalState.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 82,
        "column": 4,
        "context": "ties;\\n  }, [planetaryPositions]);\\n\\n  return {\\n    ...elementalState;\\n    isLoading\\n  };\\n}\\n"
      },
      {
        "file": "src/hooks/useElementalState.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 25,
        "column": 7,
        "context": "    dominant: 'Fire',\\n        balance: 1.0\\n      } as unknown as ElementalProperties;\\n    }\\n\\n    // "
      },
      {
        "file": "src/hooks/useElementalState.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 78,
        "column": 5,
        "context": "...normalized;\\n      dominant,\\n      balance\\n    } as unknown as ElementalProperties;\\n  }, [planetar"
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 145,
        "column": 8,
        "context": "ecommendations || [],\\n      validation: [\\n        ...((\\n          state.analysis\\n            .valida"
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 149,
        "column": 8,
        "context": "\\n        )?.dataIntegrity?.issues || []),\\n        ...((\\n          state.analysis\\n            .valida"
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 153,
        "column": 8,
        "context": "?.astrologicalConsistency?.issues || []),\\n        ...((\\n          state.analysis.validationIntellige"
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 163,
        "column": 8,
        "context": "ckStrategies || [],\\n      optimization: [\\n        ...((\\n          state.analysis as unknown as {\\n   "
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 173,
        "column": 8,
        "context": "ons?.performance?.recommendations || []),\\n        ...((\\n          state.analysis as unknown as {\\n   "
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 178,
        "column": 8,
        "context": "ations?.accuracy?.recommendations || []),\\n        ...((\\n          state.analysis as unknown as {\\n   "
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 183,
        "column": 8,
        "context": "?.userExperience?.recommendations || []),\\n        ...((\\n          state.analysis as unknown as {\\n   "
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 204,
        "column": 6,
        "context": "ysis = state.analysis;\\n    const issues = [\\n      ...((\\n        analysis.validationIntelligence as u"
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 209,
        "column": 6,
        "context": "?.overallValidation?.criticalIssues || []),\\n      ...((analysis.safetyIntelligence as { riskAssessme"
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 218,
        "column": 6,
        "context": "       : [])\\n    ];\\n\\n    const warnings = [\\n      ...((\\n        analysis.validationIntelligence as u"
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 225,
        "column": 6,
        "context": " }\\n      )?.dataIntegrity?.warnings || []),\\n      ...((\\n        analysis.validationIntelligence as u"
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 230,
        "column": 6,
        "context": "?.astrologicalConsistency?.warnings || []),\\n      ...((analysis.validationIntelligence as { elementa"
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 232,
        "column": 6,
        "context": "       ?.elementalHarmony?.warnings || []),\\n      ...((analysis.safetyIntelligence as { monitoringAl"
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 275,
        "column": 8,
        "context": "lt | null> => {\\n      setState(prev => ({\\n        ...prev;\\n        isAnalyzing: true,\\n        error:"
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 299,
        "column": 10,
        "context": "Metrics();\\n\\n        setState(prev => ({\\n          ...prev;\\n          analysis,\\n          isAnalyzing"
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 322,
        "column": 10,
        "context": "occurred';\\n\\n        setState(prev => ({\\n          ...prev;\\n          isAnalyzing: false,\\n          e"
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 337,
        "column": 6,
        "context": "useCallback(() => {\\n    setState(prev => ({\\n      ...prev;\\n      analysis: null,\\n      error: null,\\n"
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 362,
        "column": 6,
        "context": "ice.resetMetrics();\\n    setState(prev => ({\\n      ...prev;\\n      performanceMetrics: {\\n        analy"
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 418,
        "column": 8,
        "context": "manceMetrics();\\n      setState(prev => ({\\n        ...prev;\\n        performanceMetrics: metrics\\n     "
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 492,
        "column": 6,
        "context": "mo(() => {\\n    const allRecommendations = [\\n      ...recommendations.recipe.map(r => ({ type: 'recip"
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 493,
        "column": 6,
        "context": " 'recipe', text: r, priority: 'medium' })),\\n      ...recommendations.ingredient.map(r => ({ type: 'i"
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 494,
        "column": 6,
        "context": "gredient', text: r, priority: 'medium' })),\\n      ...recommendations.validation.map(r => ({ type: 'v"
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 495,
        "column": 6,
        "context": "alidation', text: r, priority: 'high' })),,\\n      ...recommendations.safety.map(r => ({ type: 'safet"
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 496,
        "column": 6,
        "context": ": 'safety', text: r, priority: 'high' })),,\\n      ...recommendations.optimization.map(r => ({\\n      "
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 137,
        "column": 31,
        "context": "    state.analysis\\n            .recipeIntelligence as unknown as EnterpriseIntelligenceAnalysisState"
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 142,
        "column": 35,
        "context": "state.analysis\\n            .ingredientIntelligence as unknown as EnterpriseIntelligenceAnalysisState"
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 147,
        "column": 35,
        "context": "state.analysis\\n            .validationIntelligence as unknown as EnterpriseIntelligenceAnalysisState"
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 151,
        "column": 35,
        "context": "state.analysis\\n            .validationIntelligence as unknown as EnterpriseIntelligenceAnalysisState"
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 154,
        "column": 47,
        "context": "((\\n          state.analysis.validationIntelligence as unknown as {\\n            elementalHarmony?: { "
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 164,
        "column": 24,
        "context": "mization: [\\n        ...((\\n          state.analysis as unknown as {\\n            optimizationRecommend"
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 174,
        "column": 24,
        "context": "ons || []),\\n        ...((\\n          state.analysis as unknown as {\\n            optimizationRecommend"
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 179,
        "column": 24,
        "context": "ons || []),\\n        ...((\\n          state.analysis as unknown as {\\n            optimizationRecommend"
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 184,
        "column": 24,
        "context": "ons || []),\\n        ...((\\n          state.analysis as unknown as {\\n            optimizationRecommend"
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 205,
        "column": 39,
        "context": "     ...((\\n        analysis.validationIntelligence as unknown as {\\n          overallValidation?: { c"
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 219,
        "column": 39,
        "context": "     ...((\\n        analysis.validationIntelligence as unknown as {\\n          dataIntegrity?: { warni"
      },
      {
        "file": "src/hooks/useEnterpriseIntelligence.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 226,
        "column": 39,
        "context": "     ...((\\n        analysis.validationIntelligence as unknown as {\\n          astrologicalConsistency"
      },
      {
        "file": "src/hooks/useIngredientRecommendations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 93,
        "column": 26,
        "context": "if (isLoading) return,\\n\\n      setState(prev => ({ ...prev, isLoading: true, error: null }));\\n\\n      "
      },
      {
        "file": "src/hooks/useIngredientRecommendations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 154,
        "column": 19,
        "context": "ElementalProfile,\\n          ),\\n          return { ...ingredient, score };\\n        });\\n\\n        // Ap"
      },
      {
        "file": "src/hooks/useIngredientRecommendations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 195,
        "column": 10,
        "context": "ndations);\\n\\n        setState(prev => ({\\n          ...prev;\\n          ingredients: filteredIngredient"
      },
      {
        "file": "src/hooks/useIngredientRecommendations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 201,
        "column": 10,
        "context": "h (error) {\\n        setState(prev => ({\\n          ...prev;\\n          isLoading: false,\\n          err"
      },
      {
        "file": "src/hooks/useIngredientRecommendations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 213,
        "column": 6,
        "context": "a['filters']>) => {\\n    setState(prev => ({\\n      ...prev;\\n      filters: { ...prev.filters, ...newF"
      },
      {
        "file": "src/hooks/useIngredientRecommendations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 214,
        "column": 17,
        "context": "tState(prev => ({\\n      ...prev;\\n      filters: { ...prev.filters, ...newFilters }\\n    }));\\n  };\\n\\n  "
      },
      {
        "file": "src/hooks/useIngredientRecommendations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 214,
        "column": 34,
        "context": "\\n      ...prev;\\n      filters: { ...prev.filters, ...newFilters }\\n    }));\\n  };\\n\\n  return {\\n    ...s"
      },
      {
        "file": "src/hooks/useIngredientRecommendations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 219,
        "column": 4,
        "context": "rs, ...newFilters }\\n    }));\\n  };\\n\\n  return {\\n    ...state;\\n    recommendations,\\n    updateFilters,\\n"
      },
      {
        "file": "src/hooks/useIngredientSearch.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 49,
        "column": 10,
        "context": "    try {\\n        const ingredients = [\\n          ...(getAllVegetables() as unknown as Ingredient[])"
      },
      {
        "file": "src/hooks/useIngredientSearch.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 50,
        "column": 10,
        "context": "getables() as unknown as Ingredient[]),\\n          ...(getAllProteins() as unknown as Ingredient[]),\\n"
      },
      {
        "file": "src/hooks/useIngredientSearch.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 51,
        "column": 10,
        "context": "Proteins() as unknown as Ingredient[]),\\n          ...(getAllHerbs() as unknown as Ingredient[]),\\n   "
      },
      {
        "file": "src/hooks/useIngredientSearch.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 52,
        "column": 10,
        "context": "AllHerbs() as unknown as Ingredient[]),\\n          ...(getAllSpices() as unknown as Ingredient[]),\\n  "
      },
      {
        "file": "src/hooks/useIngredientSearch.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 53,
        "column": 10,
        "context": "llSpices() as unknown as Ingredient[]),\\n          ...(getAllGrains() as unknown as Ingredient[]),\\n  "
      },
      {
        "file": "src/hooks/useIngredientSearch.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 54,
        "column": 10,
        "context": "llGrains() as unknown as Ingredient[]),\\n          ...(Object.values(ingredientsMap || {}).filter(Boo"
      },
      {
        "file": "src/hooks/useIngredientSearch.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 109,
        "column": 8,
        "context": "edients.slice(0, 20).map(ingredient => ({\\n        ...ingredient;\\n        searchScore: 1,\\n        mat"
      },
      {
        "file": "src/hooks/useIngredientSearch.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 143,
        "column": 12,
        "context": "operties match');\\n\\n          return {\\n            ...ingredient;\\n            searchScore: totalScore"
      },
      {
        "file": "src/hooks/useIngredientSearch.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 156,
        "column": 6,
        "context": "gredients.slice(0, 50).map(ingredient => ({\\n      ...ingredient;\\n      searchScore: 1,\\n      matchRe"
      },
      {
        "file": "src/hooks/useIngredientSearch.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 216,
        "column": 10,
        "context": "   ) /\\n            4;\\n\\n        return {\\n          ...ingredient;\\n          searchScore: harmony,\\n   "
      },
      {
        "file": "src/hooks/useIngredientSearch.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 49,
        "column": 32,
        "context": "t ingredients = [\\n          ...(getAllVegetables() as unknown as Ingredient[]),\\n          ...(getAll"
      },
      {
        "file": "src/hooks/useIngredientSearch.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 50,
        "column": 30,
        "context": "n as Ingredient[]),\\n          ...(getAllProteins() as unknown as Ingredient[]),\\n          ...(getAll"
      },
      {
        "file": "src/hooks/useIngredientSearch.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 51,
        "column": 27,
        "context": "nown as Ingredient[]),\\n          ...(getAllHerbs() as unknown as Ingredient[]),\\n          ...(getAll"
      },
      {
        "file": "src/hooks/useIngredientSearch.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 52,
        "column": 28,
        "context": "own as Ingredient[]),\\n          ...(getAllSpices() as unknown as Ingredient[]),\\n          ...(getAll"
      },
      {
        "file": "src/hooks/useIngredientSearch.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 53,
        "column": 28,
        "context": "own as Ingredient[]),\\n          ...(getAllGrains() as unknown as Ingredient[]),\\n          ...(Object"
      },
      {
        "file": "src/hooks/useIngredientSearch.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 54,
        "column": 65,
        "context": "bject.values(ingredientsMap || {}).filter(Boolean) as unknown as Ingredient[])\\n        ] as Ingredie"
      },
      {
        "file": "src/hooks/useIngredientSearch.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 131,
        "column": 25,
        "context": "  const qualitiesScore =\\n            (((ingredient as unknown as any).qualities as string[]) || []);"
      },
      {
        "file": "src/hooks/usePerformanceMetrics.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 64,
        "column": 6,
        "context": ".current.length;\\n\\n    setMetrics(prev => ({\\n      ...prev;\\n      renderTime,\\n      componentRenderCo"
      },
      {
        "file": "src/hooks/usePerformanceMetrics.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 82,
        "column": 10,
        "context": "artTime;\\n\\n        setMetrics(prev => ({\\n          ...prev;\\n          dataFetchTime: fetchTime,\\n     "
      },
      {
        "file": "src/hooks/usePerformanceMetrics.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 93,
        "column": 10,
        "context": "nt += 1;\\n\\n        setMetrics(prev => ({\\n          ...prev;\\n          dataFetchTime: fetchTime,\\n     "
      },
      {
        "file": "src/hooks/usePerformanceMetrics.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 117,
        "column": 8,
        "context": "ory;\\n      }\\n\\n      setMetrics(prev => ({\\n        ...prev;\\n        memoryUsage: currentMemory,\\n     "
      },
      {
        "file": "src/hooks/usePerformanceMetrics.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 131,
        "column": 8,
        "context": "urrent += 1;\\n\\n      setMetrics(prev => ({\\n        ...prev;\\n        errorCount: errorCountRef.current"
      },
      {
        "file": "src/hooks/usePlanetaryHours.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 58,
        "column": 10,
        "context": "ch (error) {\\n        setData(prev => ({\\n          ...prev,\\n          isLoading: false,\\n          err"
      },
      {
        "file": "src/hooks/useRealtimePlanetaryPositions.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 46,
        "column": 24,
        "context": "useCallback(async () => {\\n    setState(prev => ({ ...prev, loading: true, error: null }));\\n\\n    try "
      },
      {
        "file": "src/hooks/useRealtimePlanetaryPositions.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 67,
        "column": 8,
        "context": "catch (error) {\\n      setState(prev => ({\\n        ...prev;\\n        loading: false,\\n        error: er"
      },
      {
        "file": "src/hooks/useRealtimePlanetaryPositions.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 95,
        "column": 4,
        "context": "etchPositions, refreshInterval]);\\n\\n  return {\\n    ...state;\\n    refresh: forceRefresh,\\n    isRealtim"
      },
      {
        "file": "src/hooks/useRealtimePlanetaryPositions.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 117,
        "column": 24,
        "context": "useCallback(async () => {\\n    setState(prev => ({ ...prev, loading: true, error: null }));\\n\\n    try "
      },
      {
        "file": "src/hooks/useRealtimePlanetaryPositions.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 137,
        "column": 8,
        "context": "catch (error) {\\n      setState(prev => ({\\n        ...prev;\\n        loading: false,\\n        error: er"
      },
      {
        "file": "src/hooks/useRealtimePlanetaryPositions.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 149,
        "column": 4,
        "context": "itions();\\n  }, [fetchPositions]);\\n\\n  return {\\n    ...state;\\n    refresh: fetchPositions,\\n    isRealt"
      },
      {
        "file": "src/hooks/useRealtimePlanetaryPositions.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 53,
        "column": 8,
        "context": "(\\n        location,\\n        zodiacSystem,\\n      )) as unknown as { [key: string]: PlanetPosition };\\n"
      },
      {
        "file": "src/hooks/useRealtimePlanetaryPositions.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 125,
        "column": 8,
        "context": ",\\n        location,\\n        zodiacSystem,\\n      )) as unknown as { [key: string]: PlanetPosition };\\n"
      },
      {
        "file": "src/hooks/useRecipeRecommendations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 42,
        "column": 6,
        "context": " null,\\n    filters: {\\n      maxResults: 10,\\n      ...initialFilters\\n    }\\n  });\\n\\n  const currentElem"
      },
      {
        "file": "src/hooks/useRecipeRecommendations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 92,
        "column": 26,
        "context": "(astroLoading) return,\\n\\n      setState(prev => ({ ...prev, isLoading: true, error: null }));\\n\\n      "
      },
      {
        "file": "src/hooks/useRecipeRecommendations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 132,
        "column": 19,
        "context": "ElementalProfile,\\n          ),\\n          return { ...recipe, score };\\n        });\\n\\n        // Apply "
      },
      {
        "file": "src/hooks/useRecipeRecommendations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 154,
        "column": 10,
        "context": "ts || 10);\\n\\n        setState(prev => ({\\n          ...prev;\\n          recipes: filteredRecipes,\\n     "
      },
      {
        "file": "src/hooks/useRecipeRecommendations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 160,
        "column": 10,
        "context": "h (error) {\\n        setState(prev => ({\\n          ...prev;\\n          isLoading: false,\\n          err"
      },
      {
        "file": "src/hooks/useRecipeRecommendations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 172,
        "column": 6,
        "context": "a['filters']>) => {\\n    setState(prev => ({\\n      ...prev;\\n      filters: { ...prev.filters, ...newF"
      },
      {
        "file": "src/hooks/useRecipeRecommendations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 173,
        "column": 17,
        "context": "tState(prev => ({\\n      ...prev;\\n      filters: { ...prev.filters, ...newFilters }\\n    }));\\n  };\\n\\n  "
      },
      {
        "file": "src/hooks/useRecipeRecommendations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 173,
        "column": 34,
        "context": "\\n      ...prev;\\n      filters: { ...prev.filters, ...newFilters }\\n    }));\\n  };\\n\\n  return {\\n    ...s"
      },
      {
        "file": "src/hooks/useRecipeRecommendations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 178,
        "column": 4,
        "context": "rs, ...newFilters }\\n    }));\\n  };\\n\\n  return {\\n    ...state;\\n    updateFilters,\\n    currentElementalP"
      },
      {
        "file": "src/hooks/useRecipeValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 139,
        "column": 30,
        "context": "severity: 'medium',\\n        affectedIngredients: [...acidic.map(i => i.name), ...dairy.map(i => i.na"
      },
      {
        "file": "src/hooks/useRecipeValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 139,
        "column": 58,
        "context": "affectedIngredients: [...acidic.map(i => i.name), ...dairy.map(i => i.name)],,\\n      });\\n    }\\n\\n    "
      },
      {
        "file": "src/hooks/useRecipeValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 247,
        "column": 34,
        "context": "emental balance\\n    const maxElemental = Math.max(...Object.values(elementalBalance));\\n    const min"
      },
      {
        "file": "src/hooks/useRecipeValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 248,
        "column": 34,
        "context": "entalBalance));\\n    const minElemental = Math.min(...Object.values(elementalBalance));\\n\\n    if (maxE"
      },
      {
        "file": "src/hooks/useRecipeValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 259,
        "column": 16,
        "context": "}\\n\\n    // Check incompatibilities\\n    errors.push(...checkIncompatibilities(ingredients));\\n\\n    // G"
      },
      {
        "file": "src/hooks/useRecipeValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 56,
        "column": 16,
        "context": "   ing.category === 'protein' ||;\\n          (((ing as unknown as any).qualities as string[]) || [])."
      },
      {
        "file": "src/hooks/useRecipeValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 68,
        "column": 16,
        "context": "ingredients.some(\\n        ing =>;\\n          (((ing as unknown as any).qualities as string[]) || [])."
      },
      {
        "file": "src/hooks/useRecipeValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 76,
        "column": 16,
        "context": "       ing.category === 'oil' ||;\\n          (((ing as unknown as any).qualities as string[]) || [])."
      },
      {
        "file": "src/hooks/useRecipeValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 122,
        "column": 14,
        "context": " ingredients.filter(;\\n      ing =>;\\n        (((ing as unknown as any).qualities as string[]) || [])."
      },
      {
        "file": "src/hooks/useRecipeValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 201,
        "column": 14,
        "context": " = ingredients.some(;\\n      ing =>;\\n        (((ing as unknown as any).qualities as string[]) || [])."
      },
      {
        "file": "src/hooks/useRecommendationAnalytics.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 115,
        "column": 26,
        "context": "async () => {\\n    try {\\n      setState(prev => ({ ...prev, isLoading: true, error: null }));\\n\\n      "
      },
      {
        "file": "src/hooks/useRecommendationAnalytics.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 123,
        "column": 10,
        "context": ".current) {\\n        setState(prev => ({\\n          ...prev;\\n          metrics,\\n          cacheStats: "
      },
      {
        "file": "src/hooks/useRecommendationAnalytics.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 142,
        "column": 10,
        "context": ".current) {\\n        setState(prev => ({\\n          ...prev;\\n          error: error instanceof Error ?"
      },
      {
        "file": "src/hooks/useStatePreservation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 165,
        "column": 29,
        "context": "() || initialValues;\\n      const updatedState = { ...currentState, ...values };\\n      saveState(upda"
      },
      {
        "file": "src/hooks/useStatePreservation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 165,
        "column": 46,
        "context": "es;\\n      const updatedState = { ...currentState, ...values };\\n      saveState(updatedState);\\n    },"
      },
      {
        "file": "src/hooks/useStatePreservation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 173,
        "column": 22,
        "context": " const stored = getState();\\n    return stored ? { ...initialValues, ...stored } : initialValues;\\n  }"
      },
      {
        "file": "src/hooks/useStatePreservation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 173,
        "column": 40,
        "context": "tState();\\n    return stored ? { ...initialValues, ...stored } : initialValues;\\n  }, [getState, initi"
      },
      {
        "file": "src/hooks/useStatePreservation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 225,
        "column": 8,
        "context": "rentState = getState();\\n      saveState({\\n        ...currentState;\\n        ...context;\\n        navig"
      },
      {
        "file": "src/hooks/useStatePreservation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 226,
        "column": 8,
        "context": "     saveState({\\n        ...currentState;\\n        ...context;\\n        navigationHistory: [\\n         "
      },
      {
        "file": "src/hooks/useStatePreservation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 228,
        "column": 10,
        "context": "..context;\\n        navigationHistory: [\\n          ...(currentState.navigationHistory || []);\\n       "
      },
      {
        "file": "src/hooks/useStatePreservation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 264,
        "column": 10,
        "context": "for now\\n        const enhancedState = {\\n          ...state;\\n          timestamp: Date.now();\\n       "
      },
      {
        "file": "src/hooks/useTarotAstrologyData.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 103,
        "column": 57,
        "context": " currentPlanetaryAlignment = rawPlanetaryAlignment as unknown as Record<;\\n    string,\\n    {\\n      si"
      },
      {
        "file": "src/hooks/useTarotAstrologyData.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 117,
        "column": 52,
        "context": "      ? adaptLunarPhase(foodAssociationsLunarPhase as unknown as FoodAssociationsLunarPhase)\\n       "
      },
      {
        "file": "src/jest-dom.d.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 21,
        "column": 18,
        "context": "r: string, value?: unknown): R;\\n      toHaveClass(...classNames: string[]): R;\\n      toHaveFocus(): "
      },
      {
        "file": "src/lib/ChakraAlchemyService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 252,
        "column": 25,
        "context": "Object.values(energies);\\n    const max = Math.max(...values);\\n\\n    if (max === 0) return energies, /"
      },
      {
        "file": "src/lib/ChakraAlchemyService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 256,
        "column": 41,
        "context": "y zero;\\n\\n    const normalized: ChakraEnergies = { ...energies };\\n\\n    Object.keys(energies).forEach("
      },
      {
        "file": "src/lib/ChakraAlchemyService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 134,
        "column": 31,
        "context": "nst energyStates =\\n      planetEnergyStates[planet as unknown as keyof typeof planetEnergyStates] ||"
      },
      {
        "file": "src/lib/alchemicalEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 409,
        "column": 8,
        "context": "  return recipes\\n      .map(_recipe => ({\\n        ..._recipe;\\n        seasonalScore: (() => {\\n      "
      },
      {
        "file": "src/lib/alchemicalEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 444,
        "column": 8,
        "context": "duce(\\n      (acc, [element, value]) => ({\\n        ...acc;\\n        [element]: 1 - value\\n      }),\\n   "
      },
      {
        "file": "src/lib/alchemicalEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 496,
        "column": 7,
        "context": "\\n  calculateRecipeEffect(recipe: Recipe) {\\n    // ... implementation ...\\n  }\\n\\n  /**\\n   * Finds optim"
      },
      {
        "file": "src/lib/alchemicalEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 496,
        "column": 26,
        "context": "ffect(recipe: Recipe) {\\n    // ... implementation ...\\n  }\\n\\n  /**\\n   * Finds optimal recipes based on"
      },
      {
        "file": "src/lib/alchemicalEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 323,
        "column": 24,
        "context": "eIngredientInteractions(;\\n      recipe.ingredients as unknown as Ingredient[], // Pattern VVV: Array"
      },
      {
        "file": "src/lib/chakraRecipeEnhancer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 109,
        "column": 37,
        "context": "anetary hour\\n    let planetaryHour: Planet = 'Sun' as unknown as Planet;\\n    try {\\n      const hourI"
      },
      {
        "file": "src/lib/chakraRecipeEnhancer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 113,
        "column": 42,
        "context": "ing') {\\n        const planetName = hourInfo.planet as unknown as string;\\n        // Ensure the plane"
      },
      {
        "file": "src/lib/chakraRecipeEnhancer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 129,
        "column": 52,
        "context": "        return validPlanets.includes(name) ? (name as unknown as Planet) : null;\\n        };\\n\\n       "
      },
      {
        "file": "src/lib/chakraRecipeEnhancer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 134,
        "column": 41,
        "context": "lanet) {\\n          planetaryHour = validatedPlanet as unknown as Planet;\\n        }\\n      }\\n    } cat"
      },
      {
        "file": "src/lib/cuisineCalculations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 26,
        "column": 39,
        "context": "ion]) => {\\n        const traditionData = tradition as unknown as {\\n          description?: string;\\n "
      },
      {
        "file": "src/lib/elementalSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 58,
        "column": 10,
        "context": "TS.reduce(\\n        (acc, element) => ({\\n          ...acc;\\n          [element]: IDEAL_PROPORTION\\n    "
      },
      {
        "file": "src/lib/elementalSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 67,
        "column": 8,
        "context": "EMENTS.reduce(\\n      (acc, element) => ({\\n        ...acc;\\n        [element]: (properties[element] ||"
      },
      {
        "file": "src/lib/elementalSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 129,
        "column": 8,
        "context": "MENTS.reduce(;\\n      (acc, element) => ({\\n        ...acc;\\n        [element]: elements.includes(eleme"
      },
      {
        "file": "src/lib/recipeEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 73,
        "column": 8,
        "context": "n availableRecipes\\n      .map(other => ({\\n        ...other;\\n        harmonyScore: this.calculateHarm"
      },
      {
        "file": "src/lib/recipeEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 85,
        "column": 8,
        "context": "   return recipes\\n      .map(recipe => ({\\n        ...recipe;\\n        seasonalScore: this.calculateSe"
      },
      {
        "file": "src/lib/recipeEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 142,
        "column": 12,
        "context": "ecipesForElement(card.element) : [];\\n\\n    return [...new Set([...associatedRecipes, ...elementBasedR"
      },
      {
        "file": "src/lib/recipeEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 142,
        "column": 24,
        "context": "ment(card.element) : [];\\n\\n    return [...new Set([...associatedRecipes, ...elementBasedRecipes])]\\n  "
      },
      {
        "file": "src/lib/recipeEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 142,
        "column": 46,
        "context": "];\\n\\n    return [...new Set([...associatedRecipes, ...elementBasedRecipes])]\\n  }\\n\\n  /**\\n   * Get reci"
      },
      {
        "file": "src/lib/recipeFilter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 31,
        "column": 27,
        "context": "): Promise<Recipe[]> {\\n    let filteredRecipes = [...recipes];\\n\\n    // Apply search filter\\n    if (f"
      },
      {
        "file": "src/lib/recipeFilter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 111,
        "column": 12,
        "context": " 0.25\\n          },\\n          return {\\n            ...recipe;\\n            matchScore: calculateElemen"
      },
      {
        "file": "src/lib/tarotCalculations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 491,
        "column": 26,
        "context": " // Add keywords safely\\n    filters.keywords.push(...(tarotCards.minorCard.keywords || []));\\n\\n    //"
      },
      {
        "file": "src/lib/tarotCalculations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 498,
        "column": 37,
        "context": "pes)\\n    ) {\\n      filters.associatedRecipes.push(...tarotCards.minorCard.associatedRecipes);\\n    }\\n"
      },
      {
        "file": "src/lib/tarotCalculations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 77,
        "column": 23,
        "context": "pe casting for card access\\n  const cardData = card as unknown as {\\n    name?: string;\\n    element?: "
      },
      {
        "file": "src/lib/tarotCalculations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 456,
        "column": 23,
        "context": "pe casting for card access\\n  const cardData = card as unknown as {\\n    name?: string;\\n    element?: "
      },
      {
        "file": "src/pages/_app.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 138,
        "column": 18,
        "context": "calEngine.js' />;\\n      </Head>\\n      <Component {...pageProps} />\\n    </>\\n  );\\n}\\n"
      },
      {
        "file": "src/pages/cuisines/[id].tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 46,
        "column": 6,
        "context": " 0.25, Air: 0.25 };\\n    setElementalState({\\n      ...currentState;\\n      season: 'spring', // Defaul"
      },
      {
        "file": "src/pages/cuisines/[id].tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 111,
        "column": 10,
        "context": "or;\\n        ),\\n\\n        combined.push({\\n          ...recipe1Data;\\n          matchScore: enhancedScor"
      },
      {
        "file": "src/pages/cuisines/[id].tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 128,
        "column": 10,
        "context": "Factor, 0.35),\\n\\n        combined.push({\\n          ...recipeData;\\n          matchScore: Math.min(fina"
      },
      {
        "file": "src/pages/cuisines/[id].tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 146,
        "column": 10,
        "context": ", 0.3), 0.85),\\n\\n        combined.push({\\n          ...recipeData;\\n          matchScore: finalScore,\\n "
      },
      {
        "file": "src/pages/cuisines/[id].tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 162,
        "column": 23,
        "context": " cuisine data\\n  if (!id) {\\n    return <div>Loading...</div>;\\n  }\\n\\n  if (!cuisine) {\\n    return (\\n   "
      },
      {
        "file": "src/pages/cuisines/index.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 34,
        "column": 6,
        "context": " 0.25, Air: 0.25 };\\n    setElementalState({\\n      ...currentState;\\n      season: 'spring', // Defaul"
      },
      {
        "file": "src/pages/cuisines/index.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 43,
        "column": 4,
        "context": "s(cuisines).map(([id, cuisine]) => ({\\n    id,\\n    ...cuisine\\n  }));\\n\\n  // Get main cuisines (excludi"
      },
      {
        "file": "src/pages/recipes/[id].tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 44,
        "column": 6,
        "context": " 0.25, Air: 0.25 };\\n    setElementalState({\\n      ...currentState;\\n      season: 'spring', // Defaul"
      },
      {
        "file": "src/pages/recipes/index.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 26,
        "column": 6,
        "context": " 0.25, Air: 0.25 };\\n    setElementalState({\\n      ...currentState;\\n      season: 'spring', // Defaul"
      },
      {
        "file": "src/pages/recipes/index.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 95,
        "column": 41,
        "context": "ue-500';\\n              placeholder='Search by name...';\\n              value={searchTerm},\\n          "
      },
      {
        "file": "src/pages/sauce-explorer.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 97,
        "column": 25,
        "context": " to ensure they sum to 1\\n    const newProfile = { ...elementalProfile, [element]: value };\\n    const"
      },
      {
        "file": "src/pages/sauce-explorer.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 91,
        "column": 27,
        "context": "mexicanCuisine\\n    };\\n\\n    setAllCuisines(cuisines as unknown as CuisineRecord);\\n  }, []);\\n\\n  // Han"
      },
      {
        "file": "src/pages/sauces/[cuisine]/[id].tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 43,
        "column": 6,
        "context": " 0.25, Air: 0.25 };\\n    setElementalState({\\n      ...currentState;\\n      season: 'spring', // Defaul"
      },
      {
        "file": "src/pages/sauces/[cuisine]/[id].tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 72,
        "column": 14,
        "context": "auce = {\\n              id: sauceId,\\n              ...(cuisinesMap[cuisineKey].traditionalSauces as a"
      },
      {
        "file": "src/pages/sauces/index.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 37,
        "column": 6,
        "context": " 0.25, Air: 0.25 };\\n    setElementalState({\\n      ...currentState;\\n      season: 'spring', // Defaul"
      },
      {
        "file": "src/pages/sauces/index.tsx",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 146,
        "column": 56,
        "context": "        placeholder='Search by name or description...';\\n              value={searchTerm},\\n          "
      },
      {
        "file": "src/scripts/add-serving-sizes.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 40,
        "column": 40,
        "context": "lePath) {\\n  // console.log(`Processing ${filePath}...`);\\n\\n  // Read the file\\n  const content = fs.re"
      },
      {
        "file": "src/scripts/add-serving-sizes.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 203,
        "column": 70,
        "context": "arting to add serving sizes to protein ingredients...');\\n\\n  if (!fs.existsSync(PROTEINS_DIR)) {\\n    "
      },
      {
        "file": "src/scripts/batch-processing/BatchProcessingOrchestrator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 85,
        "column": 6,
        "context": "eports: true,\\n      interactiveMode: false,\\n      ...config\\n    };\\n\\n    this.batchProcessor = new Sa"
      },
      {
        "file": "src/scripts/batch-processing/BatchProcessingOrchestrator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 101,
        "column": 64,
        "context": "ole.log('üìã Creating comprehensive processing plan...');\\n\\n    const assessments = files.map(file =>;"
      },
      {
        "file": "src/scripts/batch-processing/BatchProcessingOrchestrator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 186,
        "column": 87,
        "context": "ssing ${automaticFiles.length} files automatically...`);\\n        const batchResults = await this.bat"
      },
      {
        "file": "src/scripts/batch-processing/EnhancedSafetyProtocols.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 69,
        "column": 6,
        "context": "n: true,\\n      createDetailedBackups: true,\\n      ...config\\n    };\\n  }\\n\\n  /**\\n   * Assess risk level"
      },
      {
        "file": "src/scripts/batch-processing/EnhancedSafetyProtocols.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 212,
        "column": 27,
        "context": "result.passed = false;\\n        result.errors.push(...compilationResult.errors);\\n        result.requi"
      },
      {
        "file": "src/scripts/batch-processing/EnhancedSafetyProtocols.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 221,
        "column": 29,
        "context": "sult.passed = false;\\n          result.errors.push(...serviceValidation.errors);\\n        }\\n        re"
      },
      {
        "file": "src/scripts/batch-processing/EnhancedSafetyProtocols.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 223,
        "column": 29,
        "context": "n.errors);\\n        }\\n        result.warnings.push(...serviceValidation.warnings);\\n      }\\n\\n      // "
      },
      {
        "file": "src/scripts/batch-processing/EnhancedSafetyProtocols.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 231,
        "column": 29,
        "context": "sult.passed = false;\\n          result.errors.push(...calculationValidation.errors);\\n          result"
      },
      {
        "file": "src/scripts/batch-processing/EnhancedSafetyProtocols.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 239,
        "column": 29,
        "context": "Validation.passed) {\\n        result.warnings.push(...dependencyValidation.warnings);\\n        if (dep"
      },
      {
        "file": "src/scripts/batch-processing/EnhancedSafetyProtocols.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 242,
        "column": 29,
        "context": "sult.passed = false;\\n          result.errors.push(...dependencyValidation.errors);\\n        }\\n      }"
      },
      {
        "file": "src/scripts/batch-processing/EnhancedSafetyProtocols.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 249,
        "column": 29,
        "context": "teRuntime(filePath);\\n        result.warnings.push(...runtimeValidation.warnings);\\n        result.rec"
      },
      {
        "file": "src/scripts/batch-processing/EnhancedSafetyProtocols.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 250,
        "column": 36,
        "context": "on.warnings);\\n        result.recommendations.push(...runtimeValidation.recommendations);\\n      }\\n\\n  "
      },
      {
        "file": "src/scripts/batch-processing/EnhancedSafetyProtocols.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 273,
        "column": 12,
        "context": "ualReviews(): ManualReviewRequest[] {\\n    return [...this.manualReviewQueue]\\n  }\\n\\n  /**\\n   * Approve"
      },
      {
        "file": "src/scripts/batch-processing/SafeBatchProcessor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 76,
        "column": 6,
        "context": "eateGitStash: true,\\n      logLevel: 'info',\\n      ...config\\n    };\\n  }\\n\\n  /**\\n   * Process files in "
      },
      {
        "file": "src/scripts/batch-processing/SafeBatchProcessor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 188,
        "column": 62,
        "context": ".log('info', `üîç Validating TypeScript compilation...`);\\n        result.compilationPassed = await th"
      },
      {
        "file": "src/scripts/batch-processing/SafeBatchProcessor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 428,
        "column": 12,
        "context": "tyCheckpoints(): SafetyCheckpoint[] {\\n    return [...this.checkpoints]\\n  }\\n\\n  /**\\n   * Log message w"
      },
      {
        "file": "src/scripts/batch-processing/cli.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 132,
        "column": 58,
        "context": " // console.log('üìã Creating batch processing plan...');\\n\\n      const files = this.loadAnalysisRepor"
      },
      {
        "file": "src/scripts/batch-processing/cli.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 155,
        "column": 62,
        "context": "console.log('üöÄ Starting batch processing campaign...');\\n\\n      // Configure orchestrator based on o"
      },
      {
        "file": "src/scripts/batch-processing/integration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 44,
        "column": 6,
        "context": "tion: false,\\n      skipManualReview: false,\\n      ...config\\n    };\\n\\n    this.orchestrator = new Batc"
      },
      {
        "file": "src/scripts/batch-processing/integration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 72,
        "column": 80,
        "context": "ting complete unused variable elimination workflow...\\n');\\n\\n    try {\\n      // Step 1: Run analysis "
      },
      {
        "file": "src/scripts/batch-processing/integration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 77,
        "column": 62,
        "context": "/ console.log('üìä Running unused variable analysis...');\\n        await this.runAnalysis();\\n      } e"
      },
      {
        "file": "src/scripts/batch-processing/integration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 80,
        "column": 60,
        "context": " // console.log('üìÑ Using existing analysis report...');\\n      }\\n\\n      // Step 2: Load analysis res"
      },
      {
        "file": "src/scripts/batch-processing/integration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 88,
        "column": 54,
        "context": "  // // console.log('\\nüìã Creating processing plan...');\\n      const plan = await this.orchestrator."
      },
      {
        "file": "src/scripts/batch-processing/integration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 96,
        "column": 67,
        "context": "sole.log('\\nüîÑ Executing batch processing campaign...');\\n        const campaign = await this.orchest"
      },
      {
        "file": "src/scripts/batch-processing/integration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 226,
        "column": 30,
        "context": "uired.length > 5) {\\n        // // console.log(`   ... and ${plan.manualReviewRequired.length - 5} mo"
      },
      {
        "file": "src/scripts/comprehensive-linting-workflow.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 39,
        "column": 6,
        "context": " true,\\n      phase: options.phase || 'all',\\n      ...options,\\n    };\\n\\n    this.metrics = {\\n      sta"
      },
      {
        "file": "src/scripts/comprehensive-linting-workflow.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 69,
        "column": 43,
        "context": "turn;\\n\\n    this.log('Creating comprehensive backup...');\\n    try {\\n      execSync(`cp -r src ${this."
      },
      {
        "file": "src/scripts/comprehensive-linting-workflow.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 80,
        "column": 48,
        "context": "{\\n    this.log('Collecting current linting metrics...');\\n    try {\\n      const output = execSync('ya"
      },
      {
        "file": "src/scripts/comprehensive-linting-workflow.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 120,
        "column": 43,
        "context": "    }\\n\\n      this.log('Running import organization...');\\n      execSync('yarn lint:fix --rule import"
      },
      {
        "file": "src/scripts/comprehensive-linting-workflow.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 147,
        "column": 49,
        "context": "\\n        this.log('Running SafeUnusedImportRemover...');\\n        execSync(`node ${removerPath} --aut"
      },
      {
        "file": "src/scripts/comprehensive-linting-workflow.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 183,
        "column": 53,
        "context": "     this.log('Running TypeScript Error Fixer v3.0...');\\n        execSync(`node ${fixerPath} --max-f"
      },
      {
        "file": "src/scripts/comprehensive-linting-workflow.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 219,
        "column": 50,
        "context": "        this.log('Running Explicit-Any Elimination...');\\n        execSync(`node ${anyFixerPath} --ma"
      },
      {
        "file": "src/scripts/comprehensive-linting-workflow.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 244,
        "column": 40,
        "context": "    try {\\n      this.log('Running build validation...');\\n      execSync('make check', { stdio: 'inhe"
      },
      {
        "file": "src/scripts/comprehensive-linting-workflow.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 247,
        "column": 39,
        "context": "erit' });\\n\\n      this.log('Running test validation...');\\n      execSync('make test', { stdio: 'inher"
      },
      {
        "file": "src/scripts/comprehensive-linting-workflow.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 250,
        "column": 35,
        "context": "'inherit' });\\n\\n      this.log('Final linting check...');\\n      const finalMetrics = await this.getLi"
      },
      {
        "file": "src/scripts/comprehensive-linting-workflow.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 308,
        "column": 55,
        "context": " this.log('Starting Comprehensive Linting Workflow...');\\n\\n      // Initial metrics\\n      const initi"
      },
      {
        "file": "src/scripts/comprehensive-linting-workflow.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 352,
        "column": 51,
        "context": "       this.log('Attempting to restore from backup...');\\n        try {\\n          execSync(`rm -rf sr"
      },
      {
        "file": "src/scripts/downloadEphemeris.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 37,
        "column": 91,
        "context": "lename} not found at primary source, trying backup...`);\\n          if (BACKUP_FILES.includes(filenam"
      },
      {
        "file": "src/scripts/downloadEphemeris.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 59,
        "column": 68,
        "context": " console.log(`Trying backup source for ${filename}...`);\\n          downloadFile(filename, BACKUP_URL"
      },
      {
        "file": "src/scripts/fix-ingredient-scripts.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 22,
        "column": 66,
        "context": "Starting to fix bug in ingredient category scripts...');\\n\\n// Process each target file\\nTARGET_FILES.f"
      },
      {
        "file": "src/scripts/fix-ingredient-scripts.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 33,
        "column": 40,
        "context": "urn;\\n  }\\n\\n  // console.log(`Processing ${filename}...`);\\n\\n  // Read the target file\\n  const content "
      },
      {
        "file": "src/scripts/fix-ingredient-scripts.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 47,
        "column": 57,
        "context": "console.log(`No bug found in ${filename}, skipping...`);\\n  }\\n});\\n\\n// console.log('\\nAll files have b"
      },
      {
        "file": "src/scripts/fix-linting-issues.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 303,
        "column": 36,
        "context": "reBackups() {\\n  log('Starting restore from backups...');\\n\\n  // Find all backups\\n  const backupFiles "
      },
      {
        "file": "src/scripts/fix-linting-issues.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 316,
        "column": 34,
        "context": "relativePath);\\n\\n    log(`Restoring ${relativePath}...`);\\n\\n    try {\\n      // Ensure the target direc"
      },
      {
        "file": "src/scripts/fix-linting-issues.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 348,
        "column": 29,
        "context": "();\\n    return;\\n  }\\n\\n  log('Starting linting fixes...');\\n\\n  // Find all files to process\\n  const fil"
      },
      {
        "file": "src/scripts/fix-linting-issues.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 361,
        "column": 35,
        "context": "(), filePath);\\n    log(`Processing ${relativePath}...`);\\n\\n    // Read file content\\n    const content"
      },
      {
        "file": "src/scripts/fix-regex-corruption.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 44,
        "column": 65,
        "context": "('üîß Starting Regex Corruption and Duplication Fix...\\n');\\n\\n    if (dryRun) {\\n      console.log('üîç "
      },
      {
        "file": "src/scripts/fix-regex-corruption.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 61,
        "column": 91,
        "context": "${i + 1}/${batches.length} (${batch.length} files)...`);\\n\\n        // Analyze each file in the batch\\n"
      },
      {
        "file": "src/scripts/fix-regex-corruption.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 607,
        "column": 40,
        "context": "anges() {\\n    console.log('\\nüîç Validating changes...');\\n\\n    try {\\n      execSync('yarn tsc --noEmi"
      },
      {
        "file": "src/scripts/fix-unused-vars.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 74,
        "column": 52,
        "context": "// // // console.log('Identifying unused variables...');\\n  const unusedVars = getUnusedVariables();\\n"
      },
      {
        "file": "src/scripts/fix-unused-vars.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 79,
        "column": 49,
        "context": "\\n    // // // console.log('Fixing unused variables...');\\n    fixUnusedVariables(unusedVars);\\n  }\\n}\\n\\n"
      },
      {
        "file": "src/scripts/fixElementalProperties.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 10,
        "column": 40,
        "context": "lePath) {\\n  // console.log(`Processing ${filePath}...`);\\n\\n  // Read the file\\n  const content = fs.re"
      },
      {
        "file": "src/scripts/fixImportOrganization.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 63,
        "column": 49,
        "context": "\\n    // // console.log('üîç Analyzing import issues...');\\n\\n    try {\\n      // Run ESLint with JSON ou"
      },
      {
        "file": "src/scripts/fixImportOrganization.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 207,
        "column": 50,
        "context": "    // // console.log('üîß Fixing duplicate imports...');\\n    let fixedCount = 0;\\n\\n    for (const fil"
      },
      {
        "file": "src/scripts/fixImportOrganization.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 255,
        "column": 36,
        "context": ".length > 0);\\n                group?.imports.push(...namedImports);\\n              }\\n            }\\n\\n "
      },
      {
        "file": "src/scripts/fixImportOrganization.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 277,
        "column": 26,
        "context": "let hasChanges = false;\\n        const newLines = [...lines];\\n\\n        for (const [source, group] of "
      },
      {
        "file": "src/scripts/fixImportOrganization.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 303,
        "column": 37,
        "context": "tes and sort\\n              const uniqueImports = [...new Set(group.imports)].sort();\\n              p"
      },
      {
        "file": "src/scripts/fixImportOrganization.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 327,
        "column": 45,
        "context": "r> {\\n    // // console.log('üîß Fixing import order...');\\n\\n    try {\\n      // Use ESLint's --fix to a"
      },
      {
        "file": "src/scripts/fixImportOrganization.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 409,
        "column": 26,
        "context": "s.builtin.length > 0) {\\n          newImports.push(...categorizedImports.builtin, '')\\n        }\\n     "
      },
      {
        "file": "src/scripts/fixImportOrganization.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 412,
        "column": 26,
        "context": ".external.length > 0) {\\n          newImports.push(...categorizedImports.external, '')\\n        }\\n    "
      },
      {
        "file": "src/scripts/fixImportOrganization.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 415,
        "column": 26,
        "context": ".internal.length > 0) {\\n          newImports.push(...categorizedImports.internal, '')\\n        }\\n    "
      },
      {
        "file": "src/scripts/fixImportOrganization.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 418,
        "column": 26,
        "context": ".relative.length > 0) {\\n          newImports.push(...categorizedImports.relative, '')\\n        }\\n\\n   "
      },
      {
        "file": "src/scripts/fixImportOrganization.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 428,
        "column": 10,
        "context": "port section\\n        const newLines = [\\n          ...lines.slice(0, importStartIndex),\\n          ..."
      },
      {
        "file": "src/scripts/fixImportOrganization.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 429,
        "column": 10,
        "context": "   ...lines.slice(0, importStartIndex),\\n          ...newImports;\\n          ...lines.slice(importEndI"
      },
      {
        "file": "src/scripts/fixImportOrganization.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 430,
        "column": 10,
        "context": "rtStartIndex),\\n          ...newImports;\\n          ...lines.slice(importEndIndex + 1)\\n        ];\\n\\n   "
      },
      {
        "file": "src/scripts/fixImportOrganization.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 447,
        "column": 57,
        "context": "// console.log('üîç Detecting circular dependencies...');\\n\\n    const files = this.getAllTypeScriptFil"
      },
      {
        "file": "src/scripts/fixImportOrganization.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 505,
        "column": 37,
        "context": "endencies) {\\n        if (detectCycle(dependency, [...path, node])) {\\n          // Continue to find a"
      },
      {
        "file": "src/scripts/fixImportOrganization.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 524,
        "column": 61,
        "context": "onsole.log('üîç Validating build after import fixes...');\\n\\n    try {\\n      execSync('yarn tsc --noEmi"
      },
      {
        "file": "src/scripts/linting-campaign-cli.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 52,
        "column": 50,
        "context": "  // // console.log('üîç Collecting linting metrics...');\\n\\n  const tracker = new LintingProgressTrack"
      },
      {
        "file": "src/scripts/linting-campaign-cli.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 89,
        "column": 50,
        "context": "  // // console.log('üìà Generating progress report...');\\n\\n  const tracker = new LintingProgressTrack"
      },
      {
        "file": "src/scripts/linting-campaign-cli.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 179,
        "column": 48,
        "context": "{\\n  // // console.log('üö™ Evaluating quality gates...');\\n\\n  const gates = new LintingQualityGates();"
      },
      {
        "file": "src/scripts/linting-campaign-cli.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 233,
        "column": 53,
        "context": "/ // console.log('üö¢ Checking deployment readiness...');\\n\\n  const gates = new LintingQualityGates();"
      },
      {
        "file": "src/scripts/linting-campaign-cli.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 287,
        "column": 49,
        "context": "\\n  // // console.log('üìà Monitoring quality trends...');\\n\\n  const gates = new LintingQualityGates();"
      },
      {
        "file": "src/scripts/linting-campaign-cli.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 322,
        "column": 45,
        "context": "]) {\\n  // // console.log('üîÑ Creating CI/CD report...');\\n\\n  const gates = new LintingQualityGates();"
      },
      {
        "file": "src/scripts/linting-excellence-dashboard.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 77,
        "column": 60,
        "context": "e.log('üîç Running comprehensive linting validation...\\n');\\n\\n    const startTime = Date.now();\\n    co"
      },
      {
        "file": "src/scripts/linting-excellence-dashboard.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 524,
        "column": 38,
        "context": " },\\n    ];\\n\\n    console.log('Running health checks...\\n');\\n\\n    let allPassed = true;\\n\\n    for (cons"
      },
      {
        "file": "src/scripts/linting-excellence-dashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 110,
        "column": 66,
        "context": "e.log('üîç Running comprehensive linting validation...\\n');\\n\\n    const startTime = Date.now();\\n    co"
      },
      {
        "file": "src/scripts/linting-excellence-dashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 224,
        "column": 53,
        "context": " // // console.log('üìä Starting linting monitoring...\\n');\\n\\n    if (options.watch) {\\n      // // con"
      },
      {
        "file": "src/scripts/linting-excellence-dashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 227,
        "column": 71,
        "context": "og('üëÄ Watch mode enabled - monitoring for changes...');\\n\\n      // Simple watch implementation\\n     "
      },
      {
        "file": "src/scripts/linting-excellence-dashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 394,
        "column": 44,
        "context": "  ];\\n\\n    // // console.log('Running health checks...\\n');\\n\\n    let allPassed = true;\\n\\n    for (cons"
      },
      {
        "file": "src/scripts/linting-excellence-dashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 424,
        "column": 56,
        "context": " // console.log('üîß Running maintenance procedures...\\n');\\n\\n    const procedures = [\\n      {\\n       "
      },
      {
        "file": "src/scripts/linting-excellence-dashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 484,
        "column": 47,
        "context": " {\\n        // // console.log(`üîß ${procedure.name}...`);\\n        const success = await procedure.act"
      },
      {
        "file": "src/scripts/quality-gates/AutomatedDocumentationGenerator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 139,
        "column": 52,
        "context": "  this.log('üîç Scanning for undocumented any types...', 'info');\\n\\n    const occurrences: AnyTypeOccu"
      },
      {
        "file": "src/scripts/quality-gates/AutomatedDocumentationGenerator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 150,
        "column": 23,
        "context": "his.analyzeFile(filePath);\\n      occurrences.push(...fileOccurrences);\\n    }\\n\\n    this.log(`üìä Found"
      },
      {
        "file": "src/scripts/quality-gates/AutomatedDocumentationGenerator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 355,
        "column": 35,
        "context": " any type line\\n        lines.splice(lineIndex, 0, ...documentationLines)\\n      }\\n\\n      // Write the"
      },
      {
        "file": "src/scripts/quality-gates/AutomatedDocumentationGenerator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 373,
        "column": 72,
        "context": "ating documentation for all undocumented any types...', 'info');\\n    this.log('='.repeat(60), 'info'"
      },
      {
        "file": "src/scripts/quality-gates/AutomatedDocumentationGenerator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 505,
        "column": 50,
        "context": "    this.log('üîç Validating any type documentation...', 'info');\\n\\n    const occurrences = await this"
      },
      {
        "file": "src/scripts/quality-gates/KnowledgeTransferSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 445,
        "column": 71,
        "context": "og('üëã New user detected. Starting with the basics...');\\n      await this.showTrainingPath();\\n    } "
      },
      {
        "file": "src/scripts/quality-gates/KnowledgeTransferSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 579,
        "column": 57,
        "context": " await this.askQuestion('\\nPress Enter to continue...');\\n      }\\n    }\\n\\n    // Offer assessment\\n    "
      },
      {
        "file": "src/scripts/quality-gates/QualityGatesSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 112,
        "column": 51,
        "context": "   this.log('üìä Collecting current quality metrics...', 'info'),\\n\\n    const metrics: QualityMetrics "
      },
      {
        "file": "src/scripts/quality-gates/QualityGatesSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 474,
        "column": 54,
        "context": "this.log('üìö Generating developer education report...', 'info');\\n\\n    const metrics = await this.col"
      },
      {
        "file": "src/scripts/quality-gates/QualityGatesSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 591,
        "column": 45,
        "context": "d> {\\n    this.log('üîß Setting up CI/CD integration...', 'info'),\\n\\n    // Create GitHub Actions workf"
      },
      {
        "file": "src/scripts/quality-gates/QualityGatesSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 675,
        "column": 8,
        "context": " 'utf8')),\\n\\n      packageJson.scripts = {\\n        ...packageJson.scripts;\\n        'quality:gates': '"
      },
      {
        "file": "src/scripts/quality-gates/QualityGatesSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 689,
        "column": 50,
        "context": "    this.log('‚è∞ Setting up periodic quality audits...', 'info');\\n\\n    // Create cron job script for "
      },
      {
        "file": "src/scripts/quality-gates/QualityGatesSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 697,
        "column": 40,
        "context": "via cron\\n\\necho 'üîç Starting periodic quality audit...'\\necho 'Timestamp: $(date)'\\n\\n# Run quality gate"
      },
      {
        "file": "src/scripts/quality-gates/QualityGatesSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 712,
        "column": 53,
        "context": "cho 'Triggering emergency any elimination campaign...'\\n  node src/scripts/unintentional-any-eliminat"
      },
      {
        "file": "src/scripts/quality-gates/SystemValidationSuite.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 42,
        "column": 66,
        "context": "e.log('üöÄ Starting comprehensive system validation...\\n');\\n\\n    // Core System Components\\n    await "
      },
      {
        "file": "src/scripts/quality-gates/SystemValidationSuite.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 74,
        "column": 58,
        "context": "/ console.log('üß† Validating Classification Engine...');\\n\\n    try {\\n      // Test classification acc"
      },
      {
        "file": "src/scripts/quality-gates/SystemValidationSuite.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 125,
        "column": 55,
        "context": "/ // console.log('üîß Validating Replacement Engine...');\\n\\n    try {\\n      // Test replacement patter"
      },
      {
        "file": "src/scripts/quality-gates/SystemValidationSuite.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 177,
        "column": 54,
        "context": "// // console.log('üõ°Ô∏è Validating Safety Protocols...');\\n\\n    try {\\n      const safetyTests = [\\n    "
      },
      {
        "file": "src/scripts/quality-gates/SystemValidationSuite.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 197,
        "column": 52,
        "context": "        testResults.push({ name: safetyTest.name, ...result });\\n        } catch (error) {\\n          "
      },
      {
        "file": "src/scripts/quality-gates/SystemValidationSuite.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 243,
        "column": 50,
        "context": "    // // console.log('üö™ Validating Quality Gates...');\\n\\n    try {\\n      // Test quality gate funct"
      },
      {
        "file": "src/scripts/quality-gates/SystemValidationSuite.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 264,
        "column": 35,
        "context": "++\\n          }\\n          gateResults.push({ gate, ...result });\\n        } catch (error) {\\n          "
      },
      {
        "file": "src/scripts/quality-gates/SystemValidationSuite.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 309,
        "column": 54,
        "context": "// // console.log('üìä Validating Monitoring System...');\\n\\n    try {\\n      // Test monitoring capabil"
      },
      {
        "file": "src/scripts/quality-gates/SystemValidationSuite.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 330,
        "column": 52,
        "context": "        monitoringResults.push({ name: test.name, ...result });\\n        } catch (error) {\\n          "
      },
      {
        "file": "src/scripts/quality-gates/SystemValidationSuite.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 375,
        "column": 57,
        "context": "// console.log('üîó Validating Campaign Integration...');\\n\\n    try {\\n      // Test campaign system in"
      },
      {
        "file": "src/scripts/quality-gates/SystemValidationSuite.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 413,
        "column": 54,
        "context": "// // console.log('üîÑ Validating CI/CD Integration...');\\n\\n    try {\\n      // Check CI/CD configurati"
      },
      {
        "file": "src/scripts/quality-gates/SystemValidationSuite.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 449,
        "column": 58,
        "context": "/ console.log('üë®‚Äçüíª Validating Developer Workflow...');\\n\\n    try {\\n      // Test developer workflow"
      },
      {
        "file": "src/scripts/quality-gates/SystemValidationSuite.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 469,
        "column": 50,
        "context": "          workflowResults.push({ name: test.name, ...result });\\n        } catch (error) {\\n          "
      },
      {
        "file": "src/scripts/quality-gates/SystemValidationSuite.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 514,
        "column": 52,
        "context": "  // // console.log('üóÑÔ∏è Validating Data Integrity...');\\n\\n    try {\\n      // Test data integrity\\n   "
      },
      {
        "file": "src/scripts/quality-gates/SystemValidationSuite.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 534,
        "column": 51,
        "context": "         integrityResults.push({ name: test.name, ...result });\\n        } catch (error) {\\n          "
      },
      {
        "file": "src/scripts/quality-gates/SystemValidationSuite.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 581,
        "column": 51,
        "context": "   // // console.log('üíæ Validating Backup Systems...');\\n\\n    try {\\n      // Test backup functionali"
      },
      {
        "file": "src/scripts/quality-gates/SystemValidationSuite.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 614,
        "column": 50,
        "context": "    // // console.log('üìö Validating Documentation...');\\n\\n    try {\\n      // Test documentation comp"
      },
      {
        "file": "src/scripts/quality-gates/SystemValidationSuite.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 635,
        "column": 45,
        "context": "   }\\n          docResults.push({ name: test.name, ...result });\\n        } catch (error) {\\n          "
      },
      {
        "file": "src/scripts/quality-gates/SystemValidationSuite.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 680,
        "column": 47,
        "context": " {\\n    // // console.log('‚ö° Validating Performance...');\\n\\n    try {\\n      // Test system performance"
      },
      {
        "file": "src/scripts/quality-gates/SystemValidationSuite.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 714,
        "column": 48,
        "context": "{\\n    // // console.log('üîí Validating Reliability...');\\n\\n    try {\\n      // Test system reliability"
      },
      {
        "file": "src/scripts/quality-gates/SystemValidationSuite.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 748,
        "column": 48,
        "context": "{\\n    // // console.log('üìà Validating Scalability...');\\n\\n    try {\\n      // Test system scalability"
      },
      {
        "file": "src/scripts/quality-gates/SystemValidationSuite.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1075,
        "column": 28,
        "context": "ult.criticalIssues) {\\n        criticalIssues.push(...result.criticalIssues);\\n      }\\n\\n      if (!res"
      },
      {
        "file": "src/scripts/quality-gates/SystemValidationSuite.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1083,
        "column": 29,
        "context": "t.recommendations) {\\n        recommendations.push(...result.recommendations);\\n      }\\n    });\\n\\n    c"
      },
      {
        "file": "src/scripts/replaceConsoleStatements.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 181,
        "column": 24,
        "context": "export interface Logger {\\n  info(message: string, ...args: unknown[]): void,\\n  warn(message: string,"
      },
      {
        "file": "src/scripts/replaceConsoleStatements.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 182,
        "column": 24,
        "context": "..args: unknown[]): void,\\n  warn(message: string, ...args: unknown[]): void,\\n  error(message: string"
      },
      {
        "file": "src/scripts/replaceConsoleStatements.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 183,
        "column": 25,
        "context": ".args: unknown[]): void,\\n  error(message: string, ...args: unknown[]): void,\\n  debug(message: string"
      },
      {
        "file": "src/scripts/replaceConsoleStatements.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 184,
        "column": 25,
        "context": ".args: unknown[]): void,\\n  debug(message: string, ...args: unknown[]): void\\n}\\n\\nclass LoggingService "
      },
      {
        "file": "src/scripts/replaceConsoleStatements.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 190,
        "column": 24,
        "context": "E_ENV === 'development';\\n\\n  info(message: string, ...args: unknown[]): void {\\n    if (this.isDevelop"
      },
      {
        "file": "src/scripts/replaceConsoleStatements.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 192,
        "column": 48,
        "context": "{\\n      // // console.log(\\`[INFO] \\${message}\\`, ...args);\\n    }\\n  }\\n\\n  warn(message: string, ...ar"
      },
      {
        "file": "src/scripts/replaceConsoleStatements.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 196,
        "column": 24,
        "context": "}\\`, ...args);\\n    }\\n  }\\n\\n  warn(message: string, ...args: unknown[]): void {\\n    console.warn(\\`[WA"
      },
      {
        "file": "src/scripts/replaceConsoleStatements.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 197,
        "column": 41,
        "context": ": void {\\n    console.warn(\\`[WARN] \\${message}\\`, ...args);\\n  }\\n\\n  error(message: string, ...args: u"
      },
      {
        "file": "src/scripts/replaceConsoleStatements.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 200,
        "column": 25,
        "context": "ssage}\\`, ...args);\\n  }\\n\\n  error(message: string, ...args: unknown[]): void {\\n    console.error(\\`[E"
      },
      {
        "file": "src/scripts/replaceConsoleStatements.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 201,
        "column": 43,
        "context": "void {\\n    console.error(\\`[ERROR] \\${message}\\`, ...args);\\n  }\\n\\n  debug(message: string, ...args: u"
      },
      {
        "file": "src/scripts/replaceConsoleStatements.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 204,
        "column": 25,
        "context": "ssage}\\`, ...args);\\n  }\\n\\n  debug(message: string, ...args: unknown[]): void {\\n    if (this.isDevelop"
      },
      {
        "file": "src/scripts/replaceConsoleStatements.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 206,
        "column": 49,
        "context": "\\n      // // console.log(\\`[DEBUG] \\${message}\\`, ...args);\\n    }\\n  }\\n}\\n\\nexport const logger = new L"
      },
      {
        "file": "src/scripts/runLintingTests.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 62,
        "column": 67,
        "context": ".log('üöÄ Starting Comprehensive Linting Test Suite...\\n');\\n\\n    const results: TestResult[] = [];\\n  "
      },
      {
        "file": "src/scripts/runLintingTests.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 68,
        "column": 47,
        "context": " {\\n      // // console.log(`üìã Running ${testFile}...`);\\n      const result = await this.runSingleTe"
      },
      {
        "file": "src/scripts/runLintingTests.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 323,
        "column": 53,
        "context": " // // console.log('üîç Validating System Readiness...\\n');\\n\\n    const checks = [\\n      this.checkESL"
      },
      {
        "file": "src/scripts/runPerformanceValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 58,
        "column": 70,
        "context": "g('üìä Running comprehensive performance validation...\\n');\\n\\n    try {\\n      await this.validator.val"
      },
      {
        "file": "src/scripts/runPerformanceValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 70,
        "column": 57,
        "context": "// console.log('üìà Starting performance monitoring...\\n');\\n\\n    const interval = options.interval ||"
      },
      {
        "file": "src/scripts/runPerformanceValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 93,
        "column": 82,
        "context": "inuous monitoring every ${interval / 1000} seconds...\\n`);\\n\\n      const monitorLoop = async () => {\\n"
      },
      {
        "file": "src/scripts/runPerformanceValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 98,
        "column": 60,
        "context": "  // // console.log(`üìä Measuring: ${command.name}...`);\\n            const metrics = await this.moni"
      },
      {
        "file": "src/scripts/runPerformanceValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 137,
        "column": 58,
        "context": "  // // console.log(`üìä Measuring: ${command.name}...`);\\n          const metrics = await this.monito"
      },
      {
        "file": "src/scripts/runPerformanceValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 153,
        "column": 55,
        "context": "/ // console.log('üìã Generating performance report...\\n');\\n\\n    const report = this.monitor.generate"
      },
      {
        "file": "src/scripts/runPerformanceValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 244,
        "column": 62,
        "context": "nsole.log('üß™ Running performance validation tests...\\n');\\n\\n    try {\\n      // // console.log('üìä Ru"
      },
      {
        "file": "src/scripts/runPerformanceValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 247,
        "column": 73,
        "context": "('üìä Running Jest tests for performance validation...');\\n      const output = execSync(;\\n        'ya"
      },
      {
        "file": "src/scripts/safe-unused-import-remover.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 74,
        "column": 50,
        "context": "    // // console.log('üîç Analyzing unused imports...\\n');\\n\\n    // Get ESLint output for unused impo"
      },
      {
        "file": "src/scripts/safe-unused-import-remover.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 124,
        "column": 54,
        "context": "// // console.log('üöÄ Removing safe unused imports...\\n');\\n    this.performImportRemoval(analysis.sa"
      },
      {
        "file": "src/scripts/safe-unused-import-remover.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 402,
        "column": 46,
        "context": "d {\\n    // // console.log('\\nüìã Organizing imports...');\\n\\n    try {\\n      execSync('yarn lint --fix "
      },
      {
        "file": "src/scripts/safe-unused-import-remover.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 419,
        "column": 46,
        "context": "n {\\n    // // console.log('\\nüîç Validating changes...');\\n\\n    try {\\n      execSync('yarn build', {\\n "
      },
      {
        "file": "src/scripts/unintentional-any-elimination/UnintentionalAnyCampaignController.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 88,
        "column": 6,
        "context": ",\\n      enableProgressiveImprovement: true,\\n      ...config\\n    };\\n\\n    this.metrics = {\\n      total"
      },
      {
        "file": "src/scripts/unintentional-any-elimination/execute-full-campaign.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 115,
        "column": 46,
        "context": "y {\\n      this.log('üîç Validating TypeScript build...', 'info'),\\n      execSync('yarn tsc --noEmit -"
      },
      {
        "file": "src/scripts/unintentional-any-elimination/execute-full-campaign.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 126,
        "column": 63,
        "context": "'üìä Analyzing codebase for unintentional any types...', 'info'),\\n\\n    const totalExplicitAny = this."
      },
      {
        "file": "src/scripts/unintentional-any-elimination/execute-full-campaign.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 186,
        "column": 57,
        "context": "s.log('üîç Analyzing domain-specific any type usage...', 'info'),\\n\\n    const domains = [\\n      {\\n    "
      },
      {
        "file": "src/scripts/unintentional-any-elimination/execute-full-campaign.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 247,
        "column": 54,
        "context": "    this.log('Phase 1 completed - checking results...', 'info');\\n\\n        // Extract fixes from outp"
      },
      {
        "file": "src/scripts/unintentional-any-elimination/execute-full-campaign.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 262,
        "column": 55,
        "context": "his.log('\\nüîß Executing advanced type replacements...', 'info'),\\n\\n    return new Promise(resolve => "
      },
      {
        "file": "src/scripts/unintentional-any-elimination/execute-full-campaign.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 368,
        "column": 52,
        "context": "  this.log('\\nüìù Documenting intentional any types...', 'info'),\\n\\n    return new Promise(resolve => "
      },
      {
        "file": "src/scripts/unused-vars/cli.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 32,
        "column": 18,
        "context": "ate;\\n}\\n\\nfunction main(): void {\\n  const [command, ...rest] = process.argv.slice(2);\\n  switch (comman"
      },
      {
        "file": "src/scripts/unused-vars/progressReporter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 58,
        "column": 4,
        "context": "toISOString(),\\n    };\\n  }\\n  const updated = {\\n    ...current,\\n    ...metrics,\\n    lastUpdated: new D"
      },
      {
        "file": "src/scripts/unused-vars/progressReporter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 59,
        "column": 4,
        "context": "   };\\n  }\\n  const updated = {\\n    ...current,\\n    ...metrics,\\n    lastUpdated: new Date().toISOStrin"
      },
      {
        "file": "src/scripts/updateIngredientFiles.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 35,
        "column": 62,
        "context": "og('Starting to update ingredient category scripts...');\\n\\n// Process each target file\\nTARGET_FILES.f"
      },
      {
        "file": "src/scripts/updateIngredientFiles.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 46,
        "column": 42,
        "context": "n;\\n  }\\n\\n  // console.log(`\\nProcessing ${filename}...`);\\n\\n  // Read the target file\\n  const content "
      },
      {
        "file": "src/scripts/validateDomainSpecificRules.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 28,
        "column": 66,
        "context": "e.log('üîç Starting Domain-Specific Rule Validation...\\n');\\n\\n    try {\\n      // Validate astrological"
      },
      {
        "file": "src/scripts/validateDomainSpecificRules.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 48,
        "column": 67,
        "context": ".log('üåü Validating Astrological Calculation Files...');\\n\\n    const astroFiles = [\\n      'src/calcul"
      },
      {
        "file": "src/scripts/validateDomainSpecificRules.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 64,
        "column": 58,
        "context": "/ console.log('üöÄ Validating Campaign System Files...');\\n\\n    const campaignFiles = [\\n      'src/ser"
      },
      {
        "file": "src/scripts/validateDomainSpecificRules.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 79,
        "column": 47,
        "context": " {\\n    // // console.log('üß™ Validating Test Files...');\\n\\n    try {\\n      const testCount = execSync"
      },
      {
        "file": "src/scripts/validateLintingPerformance.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 39,
        "column": 65,
        "context": "le.log('üöÄ Starting Linting Performance Validation...\\n');\\n\\n    try {\\n      // 1. Establish baseline"
      },
      {
        "file": "src/scripts/validateLintingPerformance.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 66,
        "column": 67,
        "context": ".log('üìä Establishing baseline performance metrics...');\\n\\n    // Clear all caches to get true baseli"
      },
      {
        "file": "src/scripts/validateLintingPerformance.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 109,
        "column": 65,
        "context": "le.log('üîÑ Validating enhanced caching performance...');\\n\\n    // First run to populate cache\\n    // "
      },
      {
        "file": "src/scripts/validateLintingPerformance.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 112,
        "column": 41,
        "context": "te cache\\n    // // console.log('  Populating cache...');\\n    try {\\n      execSync('yarn lint:fast --"
      },
      {
        "file": "src/scripts/validateLintingPerformance.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 120,
        "column": 61,
        "context": "le.warn('  Cache population had issues, continuing...')\\n    }\\n\\n    // Second run to measure cache pe"
      },
      {
        "file": "src/scripts/validateLintingPerformance.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 184,
        "column": 68,
        "context": "log('‚ö° Validating parallel processing optimization...');\\n\\n    const startTime = Date.now();\\n    cons"
      },
      {
        "file": "src/scripts/validateLintingPerformance.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 250,
        "column": 71,
        "context": "('üíæ Validating memory optimization (4096MB limit)...');\\n\\n    const startTime = Date.now();\\n    let "
      },
      {
        "file": "src/scripts/validateLintingPerformance.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 266,
        "column": 15,
        "context": ": 'pipe',\\n        timeout: 120000,\\n        env: { ...process.env, NODE_OPTIONS: '--max-old-space-siz"
      },
      {
        "file": "src/scripts/validateLintingPerformance.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 324,
        "column": 80,
        "context": "ating incremental linting (sub-10 second feedback)...');\\n\\n    try {\\n      // Create a test file chan"
      },
      {
        "file": "src/scripts/validateReact19NextJS15Compatibility.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 66,
        "column": 60,
        "context": "e.log('üîç Validating React 19 Modern JSX Transform...');\\n\\n    // Test 1: Component without React imp"
      },
      {
        "file": "src/scripts/validateReact19NextJS15Compatibility.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 122,
        "column": 60,
        "context": "e.log('üîç Validating Next.js 15 App Router Support...');\\n\\n    // Test 1: App Router page component\\n "
      },
      {
        "file": "src/scripts/validateReact19NextJS15Compatibility.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 228,
        "column": 56,
        "context": "nsole.log('üîç Validating React Concurrent Features...');\\n\\n    // Test 1: Suspense and lazy loading\\n "
      },
      {
        "file": "src/scripts/validateReact19NextJS15Compatibility.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 239,
        "column": 36,
        "context": " {\\n  return (\\n    <Suspense fallback={<div>Loading...</div>}>\\n      <LazyComponent />\\n    </Suspense"
      },
      {
        "file": "src/scripts/validateReact19NextJS15Compatibility.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 276,
        "column": 29,
        "context": "isabled={isPending}>\\n        {isPending ? 'Loading...' : 'Click me'}\\n      </button>\\n      <p>Deferr"
      },
      {
        "file": "src/scripts/validateReact19NextJS15Compatibility.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 301,
        "column": 57,
        "context": "sole.log('üîç Validating Enhanced React Hooks Rules...');\\n\\n    // Test 1: Standard exhaustive-deps va"
      },
      {
        "file": "src/scripts/validateReact19NextJS15Compatibility.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 366,
        "column": 53,
        "context": " console.log('üîç Validating Configuration Settings...');\\n\\n    try {\\n      // Check package.json vers"
      },
      {
        "file": "src/scripts/validateReact19NextJS15Compatibility.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 501,
        "column": 24,
        "context": "ole.log('='.repeat(80));\\n\\n    const categories = [...new Set(this.results.map(r => r.category))];\\n  "
      },
      {
        "file": "src/scripts/validateReact19NextJS15Compatibility.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 82,
        "column": 66,
        "context": "e.log('üîç Validating React 19 Modern JSX Transform...');\\n\\n    // Test 1: Component without React imp"
      },
      {
        "file": "src/scripts/validateReact19NextJS15Compatibility.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 138,
        "column": 66,
        "context": "e.log('üîç Validating Next.js 15 App Router Support...');\\n\\n    // Test 1: App Router page component\\n "
      },
      {
        "file": "src/scripts/validateReact19NextJS15Compatibility.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 244,
        "column": 62,
        "context": "nsole.log('üîç Validating React Concurrent Features...');\\n\\n    // Test 1: Suspense and lazy loading\\n "
      },
      {
        "file": "src/scripts/validateReact19NextJS15Compatibility.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 255,
        "column": 36,
        "context": " {\\n  return (\\n    <Suspense fallback={<div>Loading...</div>}>;\\n      <LazyComponent />\\n    </Suspens"
      },
      {
        "file": "src/scripts/validateReact19NextJS15Compatibility.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 292,
        "column": 29,
        "context": "sabled={isPending}>;\\n        {isPending ? 'Loading...' : 'Click me'}\\n      </button>\\n      <p>Deferr"
      },
      {
        "file": "src/scripts/validateReact19NextJS15Compatibility.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 317,
        "column": 63,
        "context": "sole.log('üîç Validating Enhanced React Hooks Rules...');\\n\\n    // Test 1: Standard exhaustive-deps va"
      },
      {
        "file": "src/scripts/validateReact19NextJS15Compatibility.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 382,
        "column": 59,
        "context": " console.log('üîç Validating Configuration Settings...');\\n\\n    try {\\n      // Check package.json vers"
      },
      {
        "file": "src/scripts/validateReact19NextJS15Compatibility.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 520,
        "column": 24,
        "context": "ole.log('='.repeat(80));\\n\\n    const categories = [...new Set(this.results.map(r => r.category))];\\n  "
      },
      {
        "file": "src/scripts/validation/ComprehensiveValidationFramework.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 94,
        "column": 6,
        "context": "     maxRetries: 2,\\n      logLevel: 'info',\\n      ...config\\n    };\\n  }\\n\\n  /**\\n   * Perform comprehen"
      },
      {
        "file": "src/scripts/validation/ComprehensiveValidationFramework.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 137,
        "column": 31,
        "context": "edFiles, batchId);\\n        validationResults.push(...componentResults);\\n        const failedComponen"
      },
      {
        "file": "src/scripts/validation/ComprehensiveValidationFramework.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 148,
        "column": 31,
        "context": "edFiles, batchId);\\n        validationResults.push(...serviceResults);\\n        const failedServices ="
      },
      {
        "file": "src/scripts/validation/ComprehensiveValidationFramework.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 234,
        "column": 59,
        "context": "log('debug', 'üîç Validating TypeScript compilation...');\\n\\n    for (let retry = 0, retry <= this.conf"
      },
      {
        "file": "src/scripts/validation/ComprehensiveValidationFramework.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 268,
        "column": 93,
        "context": "ompilation failed (attempt ${retry + 1}), retrying...`);\\n          await this.delay(1000); // Wait 1"
      },
      {
        "file": "src/scripts/validation/ComprehensiveValidationFramework.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 301,
        "column": 47,
        "context": ";\\n\\n    this.log('debug', 'üß™ Validating test suite...');\\n\\n    try {\\n      // Find related test files"
      },
      {
        "file": "src/scripts/validation/ComprehensiveValidationFramework.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 361,
        "column": 78,
        "context": "lidating ${componentFiles.length} React components...`);\\n\\n    for (const componentFile of componentF"
      },
      {
        "file": "src/scripts/validation/ComprehensiveValidationFramework.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 460,
        "column": 80,
        "context": "dating ${serviceFiles.length} service integrations...`);\\n\\n    for (const serviceFile of serviceFiles"
      },
      {
        "file": "src/scripts/validation/ComprehensiveValidationFramework.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 552,
        "column": 50,
        "context": "    this.log('debug', 'üèóÔ∏è Validating build system...');\\n\\n    try {\\n      // Test Next.js build proc"
      },
      {
        "file": "src/scripts/validation/ComprehensiveValidationFramework.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 884,
        "column": 27,
        "context": "es detected');\\n      }\\n      recommendations.push(...result.recommendations);\\n    }\\n\\n    return {\\n  "
      },
      {
        "file": "src/scripts/validation/ComprehensiveValidationFramework.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 893,
        "column": 23,
        "context": "\\n      totalExecutionTime,\\n      criticalIssues: [...new Set(criticalIssues)],\\n      recommendations"
      },
      {
        "file": "src/scripts/validation/ComprehensiveValidationFramework.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 894,
        "column": 24,
        "context": "new Set(criticalIssues)],\\n      recommendations: [...new Set(recommendations)]\\n    };\\n  }\\n\\n  private"
      },
      {
        "file": "src/scripts/validation/ComprehensiveValidationFramework.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 911,
        "column": 41,
        "context": ") || [];\\n    this.validationHistory.set(batchId, [...existing, ...validationResults])\\n  }\\n\\n  /**\\n   "
      },
      {
        "file": "src/scripts/validation/ComprehensiveValidationFramework.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 911,
        "column": 54,
        "context": "this.validationHistory.set(batchId, [...existing, ...validationResults])\\n  }\\n\\n  /**\\n   * Get validat"
      },
      {
        "file": "src/scripts/validation/QualityAssuranceDashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 115,
        "column": 6,
        "context": "ticReporting: true,\\n      logLevel: 'info',\\n      ...config\\n    };\\n\\n    this.validationFramework = n"
      },
      {
        "file": "src/scripts/validation/QualityAssuranceDashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 167,
        "column": 52,
        "context": "  this.log('debug', 'üìä Collecting quality metrics...');\\n\\n    try {\\n      // Get validation statisti"
      },
      {
        "file": "src/scripts/validation/QualityAssuranceDashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 257,
        "column": 66,
        "context": "fo', 'üìä Generating comprehensive dashboard report...');\\n\\n    const currentMetrics = await this.coll"
      },
      {
        "file": "src/scripts/validation/QualityAssuranceDashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 501,
        "column": 24,
        "context": "}\\n\\n    // Critical issues\\n    criticalIssues.push(...readiness.blockers);\\n\\n    // Next steps\\n    nex"
      },
      {
        "file": "src/scripts/validation/QualityAssuranceDashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 504,
        "column": 19,
        "context": ".blockers);\\n\\n    // Next steps\\n    nextSteps.push(...readiness.requiredActions.critical);\\n    nextSt"
      },
      {
        "file": "src/scripts/validation/QualityAssuranceDashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 505,
        "column": 19,
        "context": "ess.requiredActions.critical);\\n    nextSteps.push(...readiness.requiredActions.important.slice(0, 3)"
      },
      {
        "file": "src/scripts/validation/QualityAssuranceDashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 540,
        "column": 19,
        "context": "te actions (critical blockers)\\n    immediate.push(...readiness.requiredActions.critical);\\n\\n    // Sh"
      },
      {
        "file": "src/scripts/validation/QualityAssuranceDashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 543,
        "column": 19,
        "context": "tions (important improvements)\\n    shortTerm.push(...readiness.requiredActions.important);\\n\\n    // A"
      },
      {
        "file": "src/scripts/validation/QualityAssuranceDashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 555,
        "column": 18,
        "context": "actions (optional improvements)\\n    longTerm.push(...readiness.requiredActions.optional);\\n    longTe"
      },
      {
        "file": "src/scripts/validation/QualityAssuranceDashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 561,
        "column": 18,
        "context": "ing monitoring');\\n\\n    return {\\n      immediate: [...new Set(immediate)],\\n      shortTerm: [...new S"
      },
      {
        "file": "src/scripts/validation/QualityAssuranceDashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 562,
        "column": 18,
        "context": "diate: [...new Set(immediate)],\\n      shortTerm: [...new Set(shortTerm)],\\n      longTerm: [...new Se"
      },
      {
        "file": "src/scripts/validation/QualityAssuranceDashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 563,
        "column": 17,
        "context": "rtTerm: [...new Set(shortTerm)],\\n      longTerm: [...new Set(longTerm)]\\n    };\\n  }\\n\\n  /**\\n   * Estim"
      },
      {
        "file": "src/scripts/validation/QualityAssuranceDashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 668,
        "column": 6,
        "context": "}`,\\n      '',\\n      '### Key Achievements',\\n      ...report.executiveSummary.keyAchievements.map(ach"
      },
      {
        "file": "src/scripts/validation/QualityAssuranceDashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 671,
        "column": 6,
        "context": "}`),\\n      '',\\n      '### Critical Issues',\\n      ...report.executiveSummary.criticalIssues.map(issu"
      },
      {
        "file": "src/scripts/validation/QualityAssuranceDashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 674,
        "column": 6,
        "context": "ssue}`),,\\n      '',\\n      '### Next Steps',\\n      ...report.executiveSummary.nextSteps.map(step => `"
      },
      {
        "file": "src/scripts/validation/QualityAssuranceDashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 692,
        "column": 17,
        "context": "     lines.push('### Blockers');\\n      lines.push(...report.productionReadiness.blockers.map(blocker"
      },
      {
        "file": "src/scripts/validation/QualityAssuranceDashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 698,
        "column": 17,
        "context": "     lines.push('### Warnings');\\n      lines.push(...report.productionReadiness.warnings.map(warning"
      },
      {
        "file": "src/scripts/validation/QualityAssuranceDashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 713,
        "column": 6,
        "context": "',\\n      '',\\n      '### Immediate Actions',\\n      ...report.recommendations.immediate.map(action => "
      },
      {
        "file": "src/scripts/validation/QualityAssuranceDashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 716,
        "column": 6,
        "context": ",\\n      '',\\n      '### Short-term Actions',\\n      ...report.recommendations.shortTerm.map(action => "
      },
      {
        "file": "src/scripts/validation/QualityAssuranceDashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 719,
        "column": 6,
        "context": "),\\n      '',\\n      '### Long-term Actions',\\n      ...report.recommendations.longTerm.map(action => `"
      },
      {
        "file": "src/scripts/validation/QualityAssuranceDashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 736,
        "column": 12,
        "context": "tQualityHistory(): QualityMetrics[] {\\n    return [...this.qualityHistory]\\n  }\\n\\n  /**\\n   * Clear qual"
      },
      {
        "file": "src/scripts/validation/ServiceIntegrationValidator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 122,
        "column": 6,
        "context": "ld stability target\\n      logLevel: 'info',\\n      ...config\\n    };\\n  }\\n\\n  /**\\n   * Validate service "
      },
      {
        "file": "src/scripts/validation/ServiceIntegrationValidator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 148,
        "column": 26,
        "context": "(serviceFile, batchId);\\n      serviceResults.push(...results);\\n    }\\n\\n    // Calculate quality metri"
      },
      {
        "file": "src/scripts/validation/ServiceIntegrationValidator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 273,
        "column": 33,
        "context": "gs.length > 0) {\\n            result.warnings.push(...endpointValidation.warnings);\\n          }\\n     "
      },
      {
        "file": "src/scripts/validation/ServiceIntegrationValidator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 335,
        "column": 33,
        "context": "gs.length > 0) {\\n            result.warnings.push(...methodValidation.warnings);\\n          }\\n       "
      },
      {
        "file": "src/scripts/validation/ServiceIntegrationValidator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 885,
        "column": 27,
        "context": "t of serviceResults) {\\n      recommendations.push(...result.recommendations);\\n    }\\n\\n    // Add qual"
      },
      {
        "file": "src/scripts/validation/ServiceIntegrationValidator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 898,
        "column": 12,
        "context": "ty');\\n    }\\n\\n    // Remove duplicates\\n    return [...new Set(recommendations)]\\n  }\\n\\n  // Utility met"
      },
      {
        "file": "src/scripts/validation/ValidationIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 65,
        "column": 6,
        "context": "     reportingPath: './validation-reports',\\n      ...config\\n    };\\n\\n    this.validationFramework = n"
      },
      {
        "file": "src/scripts/validation/ValidationIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 78,
        "column": 54,
        "context": "const integratedResult: IntegratedBatchResult = { ...batchResult };\\n\\n    if (!this.config.enableAuto"
      },
      {
        "file": "src/scripts/validation/ValidationIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 154,
        "column": 27,
        "context": "les to cumulative list\\n      cumulativeFiles.push(...batchFiles);\\n\\n      // // console.log(`\\nüîç Val"
      },
      {
        "file": "src/scripts/validation/ValidationIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 202,
        "column": 39,
        "context": "Rollback;\\n\\n    const recommendations: string[] = [...validationResult.summary.recommendations];\\n\\n   "
      },
      {
        "file": "src/scripts/validation/ValidationIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 234,
        "column": 24,
        "context": "lt,\\n      overallQuality,\\n      recommendations: [...new Set(recommendations)],\\n      actionRequired"
      },
      {
        "file": "src/scripts/validation/ValidationIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 409,
        "column": 20,
        "context": "onIntegrationConfig>): void {\\n    this.config = { ...this.config, ...newConfig };\\n\\n    // Update val"
      },
      {
        "file": "src/scripts/validation/ValidationIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 409,
        "column": 36,
        "context": "fig>): void {\\n    this.config = { ...this.config, ...newConfig };\\n\\n    // Update validation framewor"
      },
      {
        "file": "src/scripts/validation/ValidationIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 414,
        "column": 8,
        "context": " = new ComprehensiveValidationFramework({\\n        ...this.config.validationConfig;\\n        ...newCon"
      },
      {
        "file": "src/scripts/validation/ValidationIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 415,
        "column": 8,
        "context": "\\n        ...this.config.validationConfig;\\n        ...newConfig.validationConfig\\n      });\\n    }\\n  }\\n"
      },
      {
        "file": "src/scripts/validation/validation-cli.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 103,
        "column": 59,
        "context": " console.log('üîç Starting comprehensive validation...');\\n\\n    if (!options.files || options.files.le"
      },
      {
        "file": "src/scripts/validation/validation-cli.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 182,
        "column": 54,
        "context": "// // console.log('üìÑ Generating validation report...');\\n\\n    try {\\n      const report = options.bat"
      },
      {
        "file": "src/scripts/zero-error-dashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 92,
        "column": 69,
        "context": "og('üéØ Generating Zero-Error Achievement Dashboard...\\n');\\n\\n    await this.dashboard.generateDashboa"
      },
      {
        "file": "src/scripts/zero-error-dashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 121,
        "column": 68,
        "context": "log(`üëÄ Starting Zero-Error Achievement Monitoring...\\n`);\\n    // // console.log(`üìä Monitoring inte"
      },
      {
        "file": "src/services/AdvancedAnalyticsIntelligenceService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 119,
        "column": 6,
        "context": "Usage: 200 * 1024 * 1024, // 200MB\\n      },\\n      ...config\\n    };\\n\\n    this.cache = new Map();\\n    "
      },
      {
        "file": "src/services/AdvancedAnalyticsIntelligenceService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1062,
        "column": 25,
        "context": "Object.values(elements);\\n    const max = Math.max(...values);\\n    const min = Math.min(...values);\\n "
      },
      {
        "file": "src/services/AdvancedAnalyticsIntelligenceService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1063,
        "column": 25,
        "context": "x = Math.max(...values);\\n    const min = Math.min(...values);\\n    const range = max - min;\\n\\n    // L"
      },
      {
        "file": "src/services/AdvancedAnalyticsIntelligenceService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1674,
        "column": 20,
        "context": "dIntelligenceConfig>): void {\\n    this.config = { ...this.config, ...newConfig };\\n    this.log('info"
      },
      {
        "file": "src/services/AdvancedAnalyticsIntelligenceService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1674,
        "column": 36,
        "context": "fig>): void {\\n    this.config = { ...this.config, ...newConfig };\\n    this.log('info', 'Advanced Ana"
      },
      {
        "file": "src/services/AlchemicalRecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 171,
        "column": 18,
        "context": "\\n          elementalProperties,\\n          ((method as unknown as any).elementalState as ElementalPro"
      },
      {
        "file": "src/services/AlchemicalRecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 227,
        "column": 45,
        "context": "ies'\\n    const thermodynamicsData = thermodynamics as unknown as any;\\n    if ((thermodynamicsData.ka"
      },
      {
        "file": "src/services/AlchemicalService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 223,
        "column": 38,
        "context": " properties\\n      this.planetPositions = positions as unknown as PlanetaryPositionsType;\\n      this."
      },
      {
        "file": "src/services/AlchemicalService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 335,
        "column": 26,
        "context": "      this.ingredients;\\n      this.planetPositions as unknown as Record<RulingPlanet, number>,\\n     "
      },
      {
        "file": "src/services/AlchemicalService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 338,
        "column": 21,
        "context": "e;\\n      this.currentZodiac;\\n      this.lunarPhase as unknown as LunarPhaseWithSpaces\\n    )\\n  }\\n\\n  /"
      },
      {
        "file": "src/services/AlchemicalService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 348,
        "column": 26,
        "context": "   this.cookingMethods;\\n      this.planetPositions as unknown as Record<RulingPlanet, number>,\\n     "
      },
      {
        "file": "src/services/AlchemicalService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 351,
        "column": 21,
        "context": "e;\\n      this.currentZodiac;\\n      this.lunarPhase as unknown as LunarPhaseWithSpaces\\n    )\\n  }\\n\\n  /"
      },
      {
        "file": "src/services/AlchemicalService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 361,
        "column": 26,
        "context": "s(\\n      this.cuisines;\\n      this.planetPositions as unknown as Record<RulingPlanet, number>,\\n     "
      },
      {
        "file": "src/services/AlchemicalService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 364,
        "column": 21,
        "context": "e;\\n      this.currentZodiac;\\n      this.lunarPhase as unknown as LunarPhaseWithSpaces\\n    )\\n  }\\n\\n  /"
      },
      {
        "file": "src/services/AlchemicalService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 441,
        "column": 67,
        "context": "t: this.getSeasonalRecommendations(dominantElement as unknown as Element),\\n      moodEffects: ((prof"
      },
      {
        "file": "src/services/AlchemicalService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 510,
        "column": 33,
        "context": "entalSimilarity(\\n      (ingredient1.elementalState as unknown as ElementalProperties) || {\\n        F"
      },
      {
        "file": "src/services/AlchemicalService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 516,
        "column": 33,
        "context": " Air: 0\\n      },\\n      (ingredient2.elementalState as unknown as ElementalProperties) || {\\n        F"
      },
      {
        "file": "src/services/AlchemicalService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 599,
        "column": 30,
        "context": "ly Summer']\\n    };\\n\\n    return seasonalMap[element as unknown as string] || ['Any season'];\\n  }\\n}\\n\\ne"
      },
      {
        "file": "src/services/AlchemicalTransformationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 170,
        "column": 21,
        "context": "e;\\n      this.currentZodiac;\\n      this.lunarPhase as unknown as LunarPhaseWithSpaces\\n    )\\n  }\\n\\n  /"
      },
      {
        "file": "src/services/AlchemicalTransformationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 183,
        "column": 21,
        "context": "e;\\n      this.currentZodiac;\\n      this.lunarPhase as unknown as LunarPhaseWithSpaces\\n    )\\n  }\\n\\n  /"
      },
      {
        "file": "src/services/AlchemicalTransformationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 196,
        "column": 21,
        "context": "e;\\n      this.currentZodiac;\\n      this.lunarPhase as unknown as LunarPhaseWithSpaces\\n    )\\n  }\\n\\n  /"
      },
      {
        "file": "src/services/AlchemicalTransformationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 294,
        "column": 31,
        "context": " methodCount = 0;\\n\\n      const recipeData = recipe as unknown as any;\\n      const cookingMethods = ("
      },
      {
        "file": "src/services/AlchemicalTransformationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 458,
        "column": 29,
        "context": "e: Recipe): number {\\n    const recipeData = recipe as unknown as any;\\n    const astrologicalAffiniti"
      },
      {
        "file": "src/services/AlchemicalTransformationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 480,
        "column": 29,
        "context": "e: Recipe): number {\\n    const recipeData = recipe as unknown as any;\\n    const astrologicalAffiniti"
      },
      {
        "file": "src/services/AlertingSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 854,
        "column": 33,
        "context": "-${Date.now()}`;\\n    const newRule: AlertRule = { ...rule, id };\\n\\n    this.alertRules.push(newRule);"
      },
      {
        "file": "src/services/AlertingSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 866,
        "column": 35,
        "context": "return false;\\n\\n    this.alertRules[ruleIndex] = { ...this.alertRules[ruleIndex], ...updates };\\n    t"
      },
      {
        "file": "src/services/AlertingSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 866,
        "column": 66,
        "context": "les[ruleIndex] = { ...this.alertRules[ruleIndex], ...updates };\\n    this.saveConfiguration();\\n\\n    r"
      },
      {
        "file": "src/services/AstrologicalService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 105,
        "column": 6,
        "context": "ith default state\\n    this.currentState = {\\n      ...DefaultAstrologicalState;\\n      elementalInflue"
      },
      {
        "file": "src/services/AstrologicalService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 127,
        "column": 52,
        "context": "    logger.info('Testing astrological calculations...');\\n\\n      const mockCalculationResult = {\\n    "
      },
      {
        "file": "src/services/AstrologicalService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 158,
        "column": 48,
        "context": "{\\n      logger.info('Verifying planetary positions...');\\n\\n      if (!positions || Object.keys(positi"
      },
      {
        "file": "src/services/AstrologicalService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 199,
        "column": 44,
        "context": "try {\\n      logger.info('Testing astrological APIs...');\\n\\n      const endpoints = apiEndpoints || [\\n"
      },
      {
        "file": "src/services/AstrologicalService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 242,
        "column": 28,
        "context": "calState> {\\n    try {\\n      this.currentState = { ...this.currentState, ...newState };\\n      return "
      },
      {
        "file": "src/services/AstrologicalService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 242,
        "column": 50,
        "context": "      this.currentState = { ...this.currentState, ...newState };\\n      return createSuccessResponse("
      },
      {
        "file": "src/services/AstrologizeApiCache.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 396,
        "column": 28,
        "context": "e: this.maxCacheSize,\\n      oldestEntry: Math.min(...Array.from(this.cache.values()).map(v => v.time"
      },
      {
        "file": "src/services/AstrologizeApiCache.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 397,
        "column": 28,
        "context": "p(v => v.timestamp)),\\n      newestEntry: Math.max(...Array.from(this.cache.values()).map(v => v.time"
      },
      {
        "file": "src/services/AstrologizeApiCache.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 77,
        "column": 39,
        "context": "lResult) {\\n    const resultData = alchemicalResult as unknown as any;\\n    const elementalBalance = ("
      },
      {
        "file": "src/services/AstrologizeApiCache.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 120,
        "column": 39,
        "context": "properties\\n    const resultData = alchemicalResult as unknown as any;\\n\\n    const cachedData: CachedA"
      },
      {
        "file": "src/services/AstrologizeApiCache.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 218,
        "column": 33,
        "context": "aryPositions)) {\\n      const planetData = position as unknown as any;\\n      predictedPositions[plane"
      },
      {
        "file": "src/services/AstrologyService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 86,
        "column": 13,
        "context": "is.refreshAstrologicalState();\\n    }\\n    return { ...this.currentState };\\n  }\\n\\n  /**\\n   * Get the cu"
      },
      {
        "file": "src/services/CampaignConflictResolver.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 227,
        "column": 32,
        "context": "activeCampaigns);\\n    void detectedConflicts.push(...resourceConflicts);\\n\\n    // Check for dependenc"
      },
      {
        "file": "src/services/CampaignConflictResolver.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 231,
        "column": 32,
        "context": "activeCampaigns);\\n    void detectedConflicts.push(...dependencyConflicts);\\n\\n    // Check for priorit"
      },
      {
        "file": "src/services/CampaignConflictResolver.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 235,
        "column": 32,
        "context": "activeCampaigns);\\n    void detectedConflicts.push(...priorityConflicts);\\n\\n    // Check for safety vi"
      },
      {
        "file": "src/services/CampaignConflictResolver.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 239,
        "column": 32,
        "context": "activeCampaigns);\\n    void detectedConflicts.push(...safetyConflicts);\\n\\n    // Store detected confli"
      },
      {
        "file": "src/services/CampaignConflictResolver.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 462,
        "column": 38,
        "context": "mpaigns)) {\\n          void affectedCampaigns.push(...(step.parameters.affectedCampaigns as string[])"
      },
      {
        "file": "src/services/CampaignConflictResolver.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 478,
        "column": 28,
        "context": "       executionTime,\\n        affectedCampaigns: [...new Set(affectedCampaigns)],\\n        sideEffect"
      },
      {
        "file": "src/services/CampaignConflictResolver.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 640,
        "column": 30,
        "context": "licts.length > 0) {\\n          void conflicts.push(...potentialConflicts);\\n          void deferred.pu"
      },
      {
        "file": "src/services/CampaignConflictResolver.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 669,
        "column": 20,
        "context": "    action: resolutionAction,\\n      parameters: { ...parameters, overrideBy, overrideReason },\\n     "
      },
      {
        "file": "src/services/CampaignDebugger.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 348,
        "column": 22,
        "context": "(step, session.campaignId);\\n        findings.push(...stepFindings);\\n\\n        step.status = DebugStep"
      },
      {
        "file": "src/services/CampaignDebugger.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 586,
        "column": 22,
        "context": "epType.CONFIGURATION_CHECK:\\n        findings.push(...(await this.checkConfiguration(campaignId)));\\n "
      },
      {
        "file": "src/services/CampaignDebugger.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 589,
        "column": 22,
        "context": "epType.DEPENDENCY_ANALYSIS:\\n        findings.push(...(await this.analyzeDependencies(campaignId)));\\n"
      },
      {
        "file": "src/services/CampaignDebugger.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 592,
        "column": 22,
        "context": "pType.PERFORMANCE_ANALYSIS:\\n        findings.push(...(await this.analyzePerformance(campaignId)));\\n "
      },
      {
        "file": "src/services/CampaignWorkflowManager.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 237,
        "column": 24,
        "context": "!workflow) return false;\\n\\n    workflow.config = { ...workflow.config, ...configUpdates };\\n    workfl"
      },
      {
        "file": "src/services/CampaignWorkflowManager.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 237,
        "column": 44,
        "context": "lse;\\n\\n    workflow.config = { ...workflow.config, ...configUpdates };\\n    workflow.updatedAt = new D"
      },
      {
        "file": "src/services/CampaignWorkflowManager.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 378,
        "column": 26,
        "context": "ool as unknown as any);\\n        wouldProcess.push(...analysis.files);\\n        estimatedChanges += an"
      },
      {
        "file": "src/services/CampaignWorkflowManager.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 380,
        "column": 29,
        "context": "+= analysis.changes;\\n        potentialIssues.push(...analysis.issues);\\n        safetyScore = Math.mi"
      },
      {
        "file": "src/services/CampaignWorkflowManager.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 940,
        "column": 32,
        "context": "ck implementation\\n    log.info('Rebuilding project...');\\n  }\\n\\n  private async validateRollback(param"
      },
      {
        "file": "src/services/CampaignWorkflowManager.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 377,
        "column": 58,
        "context": "const analysis = await this.analyzeToolImpact(tool as unknown as any);\\n        wouldProcess.push(..."
      },
      {
        "file": "src/services/ConfigurationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 83,
        "column": 13,
        "context": "ration:', error)\\n    }\\n\\n    return {\\n      api: { ...config.api },\\n      astrology: { ...config.astr"
      },
      {
        "file": "src/services/ConfigurationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 84,
        "column": 19,
        "context": "\\n      api: { ...config.api },\\n      astrology: { ...config.astrology },\\n      debug: config.debug\\n "
      },
      {
        "file": "src/services/ConfigurationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 111,
        "column": 6,
        "context": "deThreshold\\n    );\\n    const aspectOrbs = {\\n      ...config.astrology.aspectOrbs;\\n      ...((storedA"
      },
      {
        "file": "src/services/ConfigurationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 112,
        "column": 6,
        "context": "s = {\\n      ...config.astrology.aspectOrbs;\\n      ...((storedAstrology.aspectOrbs as Record<string, "
      },
      {
        "file": "src/services/ConfigurationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 166,
        "column": 13,
        "context": "onfiguration(): ConfigurationState {\\n    return { ...this.currentConfig };\\n  }\\n\\n  /**\\n   * Get speci"
      },
      {
        "file": "src/services/ConfigurationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 175,
        "column": 15,
        "context": "object' && sectionData !== null) {\\n      return { ...sectionData } as ConfigurationState[K];\\n    }\\n "
      },
      {
        "file": "src/services/ConfigurationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 382,
        "column": 17,
        "context": "{\\n        this.currentConfig = {\\n          api: { ...config.api },\\n          astrology: { ...config."
      },
      {
        "file": "src/services/ConfigurationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 383,
        "column": 23,
        "context": "   api: { ...config.api },\\n          astrology: { ...config.astrology },\\n          debug: config.deb"
      },
      {
        "file": "src/services/ConfigurationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 471,
        "column": 18,
        "context": "dateUpdate('api', key, value),;\\n      errors.push(...validation.errors);\\n    });\\n\\n    // Validate as"
      },
      {
        "file": "src/services/ConfigurationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 478,
        "column": 20,
        "context": "te('astrology', key, value),;\\n        errors.push(...validation.errors);\\n      }\\n    });\\n\\n    return"
      },
      {
        "file": "src/services/ConfigurationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 521,
        "column": 12,
        "context": "getHistory(): ConfigurationUpdate[] {\\n    return [...this.configHistory]\\n  }\\n\\n  /**\\n   * Clear confi"
      },
      {
        "file": "src/services/ConfigurationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 571,
        "column": 21,
        "context": "his.configHistory.length > 0\\n          ? Math.max(...this.configHistory.map(h => h.timestamp));\\n    "
      },
      {
        "file": "src/services/ConfigurationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 226,
        "column": 21,
        "context": "    if (section === 'api') {\\n          (config.api as unknown as any)[key] = value;\\n        } else i"
      },
      {
        "file": "src/services/ConfigurationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 228,
        "column": 27,
        "context": "ion === 'astrology') {\\n          (config.astrology as unknown as any)[key] = value;\\n        } else i"
      },
      {
        "file": "src/services/ConsolidatedIngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 253,
        "column": 24,
        "context": "redients in this category\\n        let filtered = [...allIngredients[category]];\\n\\n        // Apply nu"
      },
      {
        "file": "src/services/ConsolidatedIngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 492,
        "column": 29,
        "context": "s from both profiles\\n    const allKeys = new Set([...Object.keys(profile1), ...Object.keys(profile2)"
      },
      {
        "file": "src/services/ConsolidatedIngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 492,
        "column": 55,
        "context": "onst allKeys = new Set([...Object.keys(profile1), ...Object.keys(profile2)]);\\n\\n    let dotProduct = "
      },
      {
        "file": "src/services/ConsolidatedIngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 577,
        "column": 8,
        "context": "ice(0, (maxResults) || 10).map(item => ({\\n        ...item.ingredient;\\n        score: item.score\\n    "
      },
      {
        "file": "src/services/ConsolidatedIngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1427,
        "column": 31,
        "context": "r create a new one\\n      const baseIngredient = { ...ingredient } as UnifiedIngredient;\\n\\n      // En"
      },
      {
        "file": "src/services/ConsolidatedIngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 617,
        "column": 21,
        "context": "\\n        const gregsEnergy =\\n          (energyData as unknown as any).gregsEnergy || (energyData as "
      },
      {
        "file": "src/services/ConsolidatedIngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 617,
        "column": 67,
        "context": "Data as unknown as any).gregsEnergy || (energyData as unknown as any).energy || 0;\\n\\n        return {"
      },
      {
        "file": "src/services/ConsolidatedRecipeService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 96,
        "column": 45,
        "context": "rmat\\n      const serviceObj = unifiedRecipeService as unknown as {\\n        searchRecipes: (criteria:"
      },
      {
        "file": "src/services/ConsolidatedRecipeService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 105,
        "column": 8,
        "context": " return resultData?.recipe || resultData;\\n      }) as unknown as Recipe[];\\n    } catch (error) {\\n   "
      },
      {
        "file": "src/services/ConsolidatedRecipeService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 136,
        "column": 23,
        "context": "Zodiac(currentZodiacSign);\\n      return recipeData as unknown as Recipe[];\\n    } catch (error) {\\n   "
      },
      {
        "file": "src/services/ConsolidatedRecipeService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 152,
        "column": 23,
        "context": "tRecipesForSeason(season);\\n      return recipeData as unknown as Recipe[];\\n    } catch (error) {\\n   "
      },
      {
        "file": "src/services/ConsolidatedRecipeService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 168,
        "column": 23,
        "context": "ForLunarPhase(lunarPhase);\\n      return recipeData as unknown as Recipe[];\\n    } catch (error) {\\n   "
      },
      {
        "file": "src/services/ConsolidatedRecipeService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 204,
        "column": 8,
        "context": "anetaryInfluences,\\n        minMatchScore,\\n      )) as unknown as Recipe[];\\n    } catch (error) {\\n   "
      },
      {
        "file": "src/services/ConsolidatedRecipeService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 225,
        "column": 8,
        "context": "    flavorProfile,\\n        minMatchScore,\\n      )) as unknown as Recipe[];\\n    } catch (error) {\\n   "
      },
      {
        "file": "src/services/ConsolidatedRecipeService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 252,
        "column": 58,
        "context": "turn (await getBestRecipeMatches(criteria, limit)) as unknown as Recipe[];\\n    } catch (error) {\\n   "
      },
      {
        "file": "src/services/ConsolidatedRecipeService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 268,
        "column": 46,
        "context": "ion\\n      const serviceData = unifiedRecipeService as unknown as {\\n        recommendRecipes: (criter"
      },
      {
        "file": "src/services/ConsolidatedRecipeService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 289,
        "column": 46,
        "context": "ion\\n      const serviceData = unifiedRecipeService as unknown as {\\n        recommendRecipes: (criter"
      },
      {
        "file": "src/services/ConsolidatedRecipeService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 312,
        "column": 46,
        "context": "ion\\n      const serviceData = unifiedRecipeService as unknown as {\\n        recommendRecipes: (criter"
      },
      {
        "file": "src/services/ConsolidatedRecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 207,
        "column": 14,
        "context": "         Air: 0.25\\n              },\\n              ...itemData\\n            } as Ingredient;\\n         "
      },
      {
        "file": "src/services/ConsolidatedRecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 398,
        "column": 10,
        "context": ": String(methodData.description || ''),\\n          ...methodData\\n        } as CookingMethod;\\n      })"
      },
      {
        "file": "src/services/ConsolidatedRecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 86,
        "column": 35,
        "context": "er(recipe => {\\n          const recipeData = recipe as unknown as any;\\n          return recipeData.co"
      },
      {
        "file": "src/services/ConsolidatedRecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 405,
        "column": 33,
        "context": "Each(method => {\\n        const methodData = method as unknown as any;\\n        const methodScore = me"
      },
      {
        "file": "src/services/ConsolidatedRecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 406,
        "column": 34,
        "context": "unknown as any;\\n        const methodScore = method as unknown as any;\\n        const methodName = Str"
      },
      {
        "file": "src/services/CulturalAnalyticsService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 208,
        "column": 43,
        "context": "sine);\\n      const allCuisines = [primaryCuisine, ...secondaryCuisines];\\n\\n      // Base synergy calc"
      },
      {
        "file": "src/services/CulturalAnalyticsService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 455,
        "column": 34,
        "context": "mentalProfile);\\n    const balance = 1 - (Math.max(...elementalValues) - Math.min(...elementalValues)"
      },
      {
        "file": "src/services/CulturalAnalyticsService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 455,
        "column": 65,
        "context": "ce = 1 - (Math.max(...elementalValues) - Math.min(...elementalValues));\\n\\n    return Math.max(0.5, Ma"
      },
      {
        "file": "src/services/CulturalAnalyticsService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 477,
        "column": 6,
        "context": "{cuisine} techniques`];\\n    }\\n\\n    return [\\n      ...context.modernEvolution;\\n      ...context.globa"
      },
      {
        "file": "src/services/CulturalAnalyticsService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 478,
        "column": 6,
        "context": " return [\\n      ...context.modernEvolution;\\n      ...context.globalAdaptations.map(adaptation => `Gl"
      },
      {
        "file": "src/services/CurrentMomentManager.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 87,
        "column": 59,
        "context": "d logger.info('Update already in progress, waiting...'),\\n      // Wait for current update to complet"
      },
      {
        "file": "src/services/CurrentMomentManager.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 105,
        "column": 54,
        "context": "  void logger.info('Starting current moment update...');\\n\\n      const targetDate = customDateTime ||"
      },
      {
        "file": "src/services/CurrentMomentManager.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 140,
        "column": 10,
        "context": "'short'\\n        }),\\n        location: {\\n          ...location;\\n          timezone: this.getTimezone("
      },
      {
        "file": "src/services/CurrentMomentManager.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 591,
        "column": 13,
        "context": "manceMetrics(): PerformanceMetrics {\\n    return { ...this.performanceMetrics };\\n  }\\n\\n  /**\\n   * Rese"
      },
      {
        "file": "src/services/DirectRecipeService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 82,
        "column": 23,
        "context": ".isArray(seasonRecipes)) {\\n          recipes.push(...seasonRecipes);\\n        }\\n      });\\n\\n      // P"
      },
      {
        "file": "src/services/DirectRecipeService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 89,
        "column": 23,
        "context": ".isArray(seasonRecipes)) {\\n          recipes.push(...seasonRecipes);\\n        }\\n      });\\n\\n      // P"
      },
      {
        "file": "src/services/DirectRecipeService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 96,
        "column": 23,
        "context": ".isArray(seasonRecipes)) {\\n          recipes.push(...seasonRecipes);\\n        }\\n      });\\n\\n      // P"
      },
      {
        "file": "src/services/DirectRecipeService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 103,
        "column": 23,
        "context": ".isArray(seasonRecipes)) {\\n          recipes.push(...seasonRecipes);\\n        }\\n      });\\n    });\\n\\n  "
      },
      {
        "file": "src/services/DirectRecipeService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 149,
        "column": 10,
        "context": "mat\\n        const enhancedAlignment = {\\n          ..._alignment;\\n          planetaryPositions: plane"
      },
      {
        "file": "src/services/DirectRecipeService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 398,
        "column": 8,
        "context": "Score(recipe);\\n      scoredRecipes.push({\\n        ...recipe;\\n        score: alchemicalScore.score,\\n "
      },
      {
        "file": "src/services/DirectRecipeService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 428,
        "column": 8,
        "context": "Score(recipe);\\n      scoredRecipes.push({\\n        ...recipe;\\n        score: alchemicalScore.score,\\n "
      },
      {
        "file": "src/services/DirectRecipeService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 461,
        "column": 8,
        "context": "Score(recipe);\\n      scoredRecipes.push({\\n        ...recipe;\\n        score: alchemicalScore.score,\\n "
      },
      {
        "file": "src/services/DirectRecipeService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 491,
        "column": 8,
        "context": "Score(recipe);\\n      scoredRecipes.push({\\n        ...recipe;\\n        score: alchemicalScore.score,\\n "
      },
      {
        "file": "src/services/DirectRecipeService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 514,
        "column": 28,
        "context": "tart with all recipes\\n    let candidateRecipes = [...this.allRecipes];\\n\\n    // Apply basic filters b"
      },
      {
        "file": "src/services/DirectRecipeService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 616,
        "column": 8,
        "context": " 0.2;\\n      }\\n\\n      scoredRecipes.push({\\n        ...recipe;\\n        score: Math.min(1, finalScore),"
      },
      {
        "file": "src/services/DirectRecipeService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 155,
        "column": 58,
        "context": "this.currentCelestialAlignment = enhancedAlignment as unknown as CelestialAlignment;\\n      } else {\\n"
      },
      {
        "file": "src/services/DirectRecipeService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 201,
        "column": 12,
        "context": "nance || _alignment.elementalBalance;\\n      recipe as unknown as Recipe,\\n    ),\\n\\n    // Perform full"
      },
      {
        "file": "src/services/DirectRecipeService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 206,
        "column": 12,
        "context": "nalysis = performAlchemicalAnalysis(;\\n      recipe as unknown as Recipe,\\n      _alignment.elementalS"
      },
      {
        "file": "src/services/DirectRecipeService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 598,
        "column": 32,
        "context": "alCompatibility(;\\n          criteriaElementalState as unknown as ElementalProperties,\\n          reci"
      },
      {
        "file": "src/services/DirectRecipeService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 599,
        "column": 30,
        "context": "lementalProperties,\\n          recipeElementalState as unknown as ElementalProperties,\\n        ),\\n   "
      },
      {
        "file": "src/services/ElementalCalculator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 53,
        "column": 6,
        "context": "instance.currentBalance = initialState || {\\n      ...DEFAULT_ELEMENTAL_PROPERTIES\\n    };\\n    instanc"
      },
      {
        "file": "src/services/ElementalCalculator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 61,
        "column": 32,
        "context": "or.getInstance();\\n    instance.currentBalance = { ...newState };\\n    logger.debug('ElementalCalculat"
      },
      {
        "file": "src/services/ElementalCalculator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 186,
        "column": 15,
        "context": "returning default values')\\n      }\\n      return { ...DEFAULT_ELEMENTAL_PROPERTIES };\\n    }\\n\\n    // T"
      },
      {
        "file": "src/services/ElementalCalculator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 236,
        "column": 17,
        "context": "rning default values')\\n        }\\n        return { ...DEFAULT_ELEMENTAL_PROPERTIES };\\n      }\\n\\n      "
      },
      {
        "file": "src/services/ElementalCalculator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 242,
        "column": 15,
        "context": "ulating elemental state:', error),\\n      return { ...DEFAULT_ELEMENTAL_PROPERTIES };\\n    }\\n  }\\n\\n  //"
      },
      {
        "file": "src/services/ElementalCalculator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 265,
        "column": 31,
        "context": "ataRecord = data ;\\n          const planetData = { ...dataRecord, name, label: name } as unknown as P"
      },
      {
        "file": "src/services/ElementalCalculator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 302,
        "column": 12,
        "context": " ;\\n          const enhancedPlanet = {\\n            ...planetRecord;\\n            name: planetName,\\n   "
      },
      {
        "file": "src/services/ElementalCalculator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 371,
        "column": 12,
        "context": "nown>,;\\n          const planetObj = {\\n            ...objKey;\\n            name: isPlanetKey,\\n        "
      },
      {
        "file": "src/services/ElementalCalculator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 687,
        "column": 21,
        "context": " specific zodiac adjustments\\n    const result = { ...seasonalModifiers };\\n    Object.entries(specifi"
      },
      {
        "file": "src/services/ElementalCalculator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 265,
        "column": 65,
        "context": " planetData = { ...dataRecord, name, label: name } as unknown as Planet;\\n          this.processPlane"
      },
      {
        "file": "src/services/ElementalCalculator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 279,
        "column": 45,
        "context": "=> {\\n        if (body) this.processPlanetData(body as unknown as Planet, elementalValues)\\n      });\\n"
      },
      {
        "file": "src/services/ElementalCalculator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 305,
        "column": 11,
        "context": "netName,\\n            label: planetName\\n          } as unknown as Planet;\\n          this.processPlane"
      },
      {
        "file": "src/services/ElementalCalculator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 374,
        "column": 11,
        "context": "netKey,\\n            label: isPlanetKey\\n          } as unknown as Planet;\\n          this.processPlane"
      },
      {
        "file": "src/services/ElementalCalculator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 404,
        "column": 33,
        "context": "ract planet info\\n      const planetRecord = planet as unknown as any;\\n      const planetName = Strin"
      },
      {
        "file": "src/services/ElementalCalculator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 809,
        "column": 71,
        "context": "tEffect = this.processPlanetElementalEffect(planet as unknown as Planet, sign),;\\n\\n          // Combi"
      },
      {
        "file": "src/services/ElementalCalculator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 840,
        "column": 69,
        "context": "tEffect = this.processPlanetElementalEffect(planet as unknown as Planet, sign),;\\n\\n        // Combine"
      },
      {
        "file": "src/services/ElementalRecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 40,
        "column": 55,
        "context": "   const characteristics = profile.characteristics as unknown as any;\\n        return Array.isArray(c"
      },
      {
        "file": "src/services/ElementalRecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 46,
        "column": 55,
        "context": "   const characteristics = profile.characteristics as unknown as any;\\n        return Array.isArray(c"
      },
      {
        "file": "src/services/EnhancedAstrologyService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 378,
        "column": 34,
        "context": " 0.2 }\\n      },\\n      // Add more months as needed...\\n    };\\n\\n    return seasonalData[month as keyof"
      },
      {
        "file": "src/services/EnhancedAstrologyService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 108,
        "column": 34,
        "context": ";\\n\\n    return {\\n      currentSeason: currentSeason as unknown as Season,\\n      upcomingTransits: (up"
      },
      {
        "file": "src/services/EnhancedAstrologyService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 109,
        "column": 50,
        "context": "      upcomingTransits: (upcomingAnalysis?.seasons as unknown as Element[]) || [],\\n      dominantEle"
      },
      {
        "file": "src/services/EnhancedAstrologyService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 111,
        "column": 47,
        "context": "},\\n      keyAspects: (seasonalAnalysis?.keyAspects as unknown as Planet[]) || [],\\n      retrogradePl"
      },
      {
        "file": "src/services/EnhancedAstrologyService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 147,
        "column": 37,
        "context": "    return {\\n      seasonalThemes: ((currentSeason as unknown as any).seasonalThemes as string[]) ||"
      },
      {
        "file": "src/services/EnhancedAstrologyService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 148,
        "column": 41,
        "context": ") || [],\\n      culinaryInfluences: ((currentSeason as unknown as any).culinaryInfluences as string[]"
      },
      {
        "file": "src/services/EnhancedAstrologyService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 150,
        "column": 23,
        "context": "],\\n      dominantElements:\\n        ((currentSeason as unknown as any).dominantElements as Record<str"
      },
      {
        "file": "src/services/EnhancedAstrologyService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 152,
        "column": 23,
        "context": "is.getRecommendedCuisines(\\n        ((currentSeason as unknown as any).dominantElements as Record<str"
      },
      {
        "file": "src/services/EnhancedAstrologyService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 155,
        "column": 23,
        "context": "RecommendedCookingMethods(\\n        ((currentSeason as unknown as any).dominantElements as Record<str"
      },
      {
        "file": "src/services/EnhancedAstrologyService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 158,
        "column": 23,
        "context": "     alchemicalProperties:\\n        ((currentSeason as unknown as any).alchemicalProperties as Record"
      },
      {
        "file": "src/services/EnhancedAstrologyService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 174,
        "column": 41,
        "context": "e(date);\\n      primaryPositions = servicePositions as unknown as Record<string, CelestialPosition>;\\n"
      },
      {
        "file": "src/services/EnhancedAstrologyService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 209,
        "column": 51,
        "context": "   const keyAspects = (seasonalTransit?.keyAspects as unknown as Planet[]) || [];\\n\\n    return {\\n    "
      },
      {
        "file": "src/services/EnhancedRecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 183,
        "column": 12,
        "context": "cedIngredient: EnhancedIngredient = {\\n            ...ingredient;\\n            name: ingredient.name |"
      },
      {
        "file": "src/services/EnhancedRecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 348,
        "column": 21,
        "context": "zations || []).length > 0) {\\n        reasons.push(...flavorCompatibility.optimizations.slice(0, 2)),"
      },
      {
        "file": "src/services/EnhancedRecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 669,
        "column": 10,
        "context": "          umami: 0,\\n          spicy: 0,\\n          ...(Array.isArray(ingredientData.baseNotes)\\n      "
      },
      {
        "file": "src/services/EnhancedRecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 159,
        "column": 27,
        "context": "rPreferenceFiltering(;\\n        baseRecommendations as unknown as EnhancedIngredient[],\\n        userP"
      },
      {
        "file": "src/services/EnhancedRecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 181,
        "column": 43,
        "context": "dation\\n          const ingredientData = ingredient as unknown as any;\\n          const enhancedIngred"
      },
      {
        "file": "src/services/EnhancedRecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 254,
        "column": 32,
        "context": "      ingredient,\\n              score: (ingredient as unknown as any).score || 0.5,\\n              re"
      },
      {
        "file": "src/services/EnhancedRecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 261,
        "column": 14,
        "context": "'balanced' as const\\n              }\\n            }) as unknown as EnhancedRecommendation,\\n        );\\n"
      },
      {
        "file": "src/services/EnhancedRecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 273,
        "column": 25,
        "context": "eady present in fallback\\n          element: 'Fire' as unknown as Element,\\n          cookingApproach:"
      },
      {
        "file": "src/services/EnhancedRecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 546,
        "column": 7,
        "context": "yInfluence: 0.1,\\n      lunarInfluence: 0.1\\n    })) as unknown as SignEnergyState[];\\n  }\\n\\n  /**\\n   * "
      },
      {
        "file": "src/services/EnhancedRecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 655,
        "column": 39,
        "context": "rty access\\n      const ingredientData = ingredient as unknown as any;\\n\\n      // Create basic flavor "
      },
      {
        "file": "src/services/EnhancedRecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 701,
        "column": 20,
        "context": "Data.monica) || 0.5\\n      };\\n\\n      return profile as unknown as UnifiedFlavorProfile;\\n    } catch ("
      },
      {
        "file": "src/services/EnhancedRecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 736,
        "column": 34,
        "context": "property access\\n      const astroData = astroState as unknown as any;\\n      const elementalProps = a"
      },
      {
        "file": "src/services/EnhancedRecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 778,
        "column": 20,
        "context": "        monica: 0.5\\n      };\\n\\n      return profile as unknown as UnifiedFlavorProfile;\\n    } catch ("
      },
      {
        "file": "src/services/EnhancedRecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 807,
        "column": 7,
        "context": ",\\n        kalchm: 0.5,\\n        monica: 0.5\\n      } as unknown as UnifiedFlavorProfile;\\n    }\\n  }\\n\\n  "
      },
      {
        "file": "src/services/EnhancedTransitAnalysisService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 252,
        "column": 8,
        "context": "sociations) {\\n      recommendations.push(\\n        ...((planetData as unknown as any).FoodAssociation"
      },
      {
        "file": "src/services/EnhancedTransitAnalysisService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 269,
        "column": 27,
        "context": "naryRecommendations) {\\n      recommendations.push(...locationInfluence.culinaryRecommendations.slice"
      },
      {
        "file": "src/services/EnhancedTransitAnalysisService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 349,
        "column": 21,
        "context": " // Add seasonal ingredients\\n    ingredients.push(...season.culinaryInfluences.slice(0, 3)),\\n\\n    //"
      },
      {
        "file": "src/services/EnhancedTransitAnalysisService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 353,
        "column": 23,
        "context": "edients[season.sunSign]) {\\n      ingredients.push(...regionalProfile.seasonalIngredients[season.sunS"
      },
      {
        "file": "src/services/EnhancedTransitAnalysisService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 361,
        "column": 25,
        "context": "    .forEach(planet => {\\n        ingredients.push(...planet.culinaryRecommendations.slice(0, 1))\\n   "
      },
      {
        "file": "src/services/EnhancedTransitAnalysisService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 365,
        "column": 24,
        "context": " regional cooking methods\\n    cookingMethods.push(...regionalProfile.traditionalCookingMethods.slice"
      },
      {
        "file": "src/services/EnhancedTransitAnalysisService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 371,
        "column": 28,
        "context": "y.isArray(effects)) {\\n        cookingMethods.push(...effects.slice(0, 1))\\n      }\\n    });\\n\\n    // Ge"
      },
      {
        "file": "src/services/EnhancedTransitAnalysisService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 393,
        "column": 20,
        "context": "e}`);\\n      });\\n\\n    return {\\n      ingredients: [...new Set(ingredients)].slice(0, 8),\\n      cookin"
      },
      {
        "file": "src/services/EnhancedTransitAnalysisService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 394,
        "column": 23,
        "context": "ingredients)].slice(0, 8),\\n      cookingMethods: [...new Set(cookingMethods)].slice(0, 6),\\n      fla"
      },
      {
        "file": "src/services/EnhancedTransitAnalysisService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 395,
        "column": 23,
        "context": "kingMethods)].slice(0, 6),\\n      flavorProfiles: [...new Set(flavorProfiles)].slice(0, 4),\\n      tim"
      },
      {
        "file": "src/services/EnhancedTransitAnalysisService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 396,
        "column": 15,
        "context": " Set(flavorProfiles)].slice(0, 4),\\n      timing: [...new Set(timing)].slice(0, 6)\\n    };\\n  }\\n\\n  /**\\n"
      },
      {
        "file": "src/services/EnhancedTransitAnalysisService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 117,
        "column": 22,
        "context": "(;\\n      enhancedPositions,\\n      aspectInfluences as unknown as PlanetaryPosition[],\\n      season,\\n"
      },
      {
        "file": "src/services/EnhancedTransitAnalysisService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 126,
        "column": 22,
        "context": "(;\\n      enhancedPositions,\\n      aspectInfluences as unknown as PlanetaryPosition[],\\n      season,\\n"
      },
      {
        "file": "src/services/EnhancedTransitAnalysisService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 162,
        "column": 16,
        "context": "anetaryStrength(;\\n        planet,\\n        position as unknown as import('@/types/alchemy').Planetary"
      },
      {
        "file": "src/services/EnhancedTransitAnalysisService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 250,
        "column": 19,
        "context": "commendations from planet data\\n    if ((planetData as unknown as any).FoodAssociations) {\\n      reco"
      },
      {
        "file": "src/services/EnhancedTransitAnalysisService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 252,
        "column": 23,
        "context": "     recommendations.push(\\n        ...((planetData as unknown as any).FoodAssociations as string[])."
      },
      {
        "file": "src/services/EnhancedTransitAnalysisService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 369,
        "column": 38,
        "context": "luence => {\\n      const effects = (aspectInfluence as unknown as any).culinaryEffects as string[];\\n "
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 213,
        "column": 6,
        "context": "cacheResults: true,\\n      logLevel: 'info',\\n      ...config\\n    };\\n\\n    this.cache = new Map();\\n    "
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 397,
        "column": 8,
        "context": "endations\\n      const recommendations = [\\n        ...((compatibilityAnalysis as { recommendations?: "
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 398,
        "column": 8,
        "context": "ns?: string[] })?.recommendations ?? []),\\n        ...this.generateRecipeIntelligenceRecommendations("
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 760,
        "column": 8,
        "context": "core) / 3;\\n      const criticalIssues = [\\n        ...dataIntegrity.issues.filter(issue => issue.incl"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 761,
        "column": 8,
        "context": "er(issue => issue.includes('critical')),;\\n        ...astrologicalConsistency.issues.filter(issue => "
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 762,
        "column": 8,
        "context": "r(issue => issue.includes('critical')),,;\\n        ...elementalHarmony.issues.filter(issue => issue.i"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1720,
        "column": 13,
        "context": "cs\\n   */\\n  getPerformanceMetrics() {\\n    return { ...this.performanceMetrics }\\n  }\\n\\n  /**\\n   * Updat"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1727,
        "column": 20,
        "context": "eIntelligenceConfig>): void {\\n    this.config = { ...this.config, ...newConfig };\\n    this.log('info"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1727,
        "column": 36,
        "context": "fig>): void {\\n    this.config = { ...this.config, ...newConfig };\\n    this.log('info', 'Configuratio"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1926,
        "column": 19,
        "context": "lementalBalance:\\n          1 -\\n          Math.max(...Object.values(elementalProperties).map(v => v))"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1927,
        "column": 19,
        "context": "talProperties).map(v => v)) +;\\n          Math.min(...Object.values(elementalProperties).map(v => v))"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 2114,
        "column": 8,
        "context": "nce.toFixed(2)}`,\\n      );\\n      return {\\n        ...result;\\n        ingredientCompatibility: (\\n    "
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 231,
        "column": 22,
        "context": "ictiveIntelligenceService(;\\n      predictiveConfig as unknown as AdvancedIntelligenceConfig,\\n    );\\n"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 381,
        "column": 19,
        "context": "m\\n      const elementalProps =\\n        (recipeData as unknown as RecipeAnalysisData)?.elementalPrope"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 382,
        "column": 28,
        "context": "ementalProperties ??;\\n        (astrologicalContext as unknown as AstrologicalAnalysisContext)?.eleme"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 386,
        "column": 27,
        "context": "       elementalProps,\\n        astrologicalContext as unknown as ComprehensiveAlchemicalResult,\\n    "
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 407,
        "column": 34,
        "context": "lCompatibility:\\n            (compatibilityAnalysis as unknown as CompatibilityAnalysisResult)?.coreM"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 410,
        "column": 34,
        "context": "lCompatibility:\\n            (compatibilityAnalysis as unknown as CompatibilityAnalysisResult)?.coreM"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 413,
        "column": 34,
        "context": "lCompatibility:\\n            (compatibilityAnalysis as unknown as CompatibilityAnalysisResult)?.coreM"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 416,
        "column": 34,
        "context": "lCompatibility:\\n            (compatibilityAnalysis as unknown as CompatibilityAnalysisResult)?.coreM"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 496,
        "column": 31,
        "context": "atibilityAnalysis:\\n          compatibilityAnalysis as unknown as import('@/types/enterpriseIntellige"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 506,
        "column": 31,
        "context": "atibilityAnalysis:\\n          compatibilityAnalysis as unknown as import('@/types/enterpriseIntellige"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 515,
        "column": 31,
        "context": "atibilityAnalysis:\\n          compatibilityAnalysis as unknown as import('@/types/enterpriseIntellige"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 609,
        "column": 25,
        "context": "isineOptimizationScore(;\\n        analysesForScores as unknown as {\\n          culturalAnalysis: {\\n   "
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 624,
        "column": 42,
        "context": "Score({\\n        culturalAnalysis: culturalAnalysis as unknown as {\\n          culturalSynergy?: numbe"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 629,
        "column": 38,
        "context": "\\n        },\\n        fusionAnalysis: fusionAnalysis as unknown as {\\n          fusionPotential?: numbe"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 633,
        "column": 42,
        "context": "     },\\n        seasonalAnalysis: seasonalAnalysis as unknown as {\\n          seasonalRelevance?: num"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 637,
        "column": 52,
        "context": "      compatibilityAnalysis: compatibilityAnalysis as unknown as {\\n          overallCompatibility?: "
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 641,
        "column": 44,
        "context": "er },\\n        validationResults: validationResults as unknown as {\\n          validationScore?: numbe"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 649,
        "column": 25,
        "context": "ligenceRecommendations(;\\n        analysesForScores as unknown as {\\n          culturalAnalysis: {\\n   "
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 665,
        "column": 25,
        "context": "ulateCuisineConfidence(;\\n        analysesForScores as unknown as {\\n          culturalAnalysis: {\\n   "
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 680,
        "column": 42,
        "context": "eturn {\\n        culturalAnalysis: culturalAnalysis as unknown as import('@/types/enterpriseIntellige"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 688,
        "column": 42,
        "context": "     },\\n        seasonalAnalysis: seasonalAnalysis as unknown as import('@/types/enterpriseIntellige"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 701,
        "column": 50,
        "context": "        astrologicalAnalysis: astrologicalAnalysis as unknown as import('@/types/enterpriseIntellige"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 743,
        "column": 48,
        "context": "n\\n      const typedRecipeData = (recipeData || {}) as unknown as RecipeDataWithElementalProperties;\\n"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1226,
        "column": 16,
        "context": "ibility');\\n    }\\n    if (\\n      (\\n        analysis as unknown as {\\n          advancedAnalysis?: { te"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1231,
        "column": 16,
        "context": "levance !== undefined &&\\n      ((\\n        analysis as unknown as {\\n          advancedAnalysis?: { te"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1260,
        "column": 39,
        "context": "own>) => {\\n      const harmonyInterface = analysis as unknown as {\\n        categoryHarmony?: { overa"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2069,
        "column": 18,
        "context": "eneratePredictiveIntelligence(;\\n        recipeData as unknown as import('@/types/recipe').Recipe;\\n  "
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2070,
        "column": 30,
        "context": "es/recipe').Recipe;\\n        (ingredientData || []) as unknown as import('@/types/unified').Ingredien"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2072,
        "column": 27,
        "context": "cord<string, unknown>,\\n        astrologicalContext as unknown as import('@/types/predictiveIntellige"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2103,
        "column": 18,
        "context": "ervice.generateMLIntelligence(;\\n        recipeData as unknown as import('@/types/unified').Recipe;\\n "
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2104,
        "column": 30,
        "context": "s/unified').Recipe;\\n        (ingredientData || []) as unknown as import('@/types/unified').Ingredien"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2106,
        "column": 27,
        "context": "cord<string, unknown>,\\n        astrologicalContext as unknown as import('@/types/mlIntelligence').ML"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2139,
        "column": 28,
        "context": "alyticsIntelligence(;\\n          (recipeData || {}) as unknown as import('@/types/unified').Recipe,\\n "
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2140,
        "column": 32,
        "context": "unified').Recipe,\\n          (ingredientData || []) as unknown as import('@/types/unified').Ingredien"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2200,
        "column": 48,
        "context": "{\\n        predictiveIntelligence: predictiveResult as unknown as import('@/types/advancedIntelligenc"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2320,
        "column": 5,
        "context": "5,\\n      timestamp: new Date().toISOString()\\n    } as unknown as import('@/types/predictiveIntellige"
      },
      {
        "file": "src/services/EnterpriseIntelligenceIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2438,
        "column": 69,
        "context": "elligence: this.getDefaultPredictiveIntelligence() as unknown as import('@/types/advancedIntelligenc"
      },
      {
        "file": "src/services/EnterpriseIntelligenceOrchestrator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 260,
        "column": 10,
        "context": "ies: 3,\\n          healthThreshold: 0.8,\\n          ...config.services?.errorTracking\\n        },\\n     "
      },
      {
        "file": "src/services/EnterpriseIntelligenceOrchestrator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 268,
        "column": 10,
        "context": ": 0.7,\\n          predictionHorizon: 60,\\n          ...config.services?.patternRecognition\\n        },\\n"
      },
      {
        "file": "src/services/EnterpriseIntelligenceOrchestrator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 276,
        "column": 10,
        "context": "k: 90 },\\n          retentionPeriod: 30,\\n          ...config.services?.performanceMetrics\\n        },\\n"
      },
      {
        "file": "src/services/EnterpriseIntelligenceOrchestrator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 284,
        "column": 10,
        "context": "        optimizationStrategy: 'hybrid',\\n          ...config.services?.batchProcessing\\n        },\\n   "
      },
      {
        "file": "src/services/EnterpriseIntelligenceOrchestrator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 292,
        "column": 10,
        "context": "d: false,\\n          safetyChecks: true,\\n          ...config.services?.unusedVariableDetection\\n      "
      },
      {
        "file": "src/services/EnterpriseIntelligenceOrchestrator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 300,
        "column": 10,
        "context": "n: true,\\n          timeoutSeconds: 600,\\n          ...config.services?.qualityGates\\n        }\\n      }"
      },
      {
        "file": "src/services/EnterpriseIntelligenceOrchestrator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 309,
        "column": 8,
        "context": "covery: true,\\n        healthChecks: true,\\n        ...config.integration\\n      },\\n      reporting: {\\n"
      },
      {
        "file": "src/services/EnterpriseIntelligenceOrchestrator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 318,
        "column": 8,
        "context": "alerting: true,\\n        dashboards: true,\\n        ...config.reporting\\n      }\\n    };\\n  }\\n\\n  /**\\n   *"
      },
      {
        "file": "src/services/EnterpriseIntelligenceOrchestrator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 332,
        "column": 66,
        "context": " Initializing Enterprise Intelligence Orchestrator...');\\n\\n    try {\\n      // Initialize services\\n   "
      },
      {
        "file": "src/services/EnterpriseIntelligenceOrchestrator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 363,
        "column": 62,
        "context": "('üìã Initializing enterprise intelligence services...');\\n\\n    // Initialize Error Tracking System\\n  "
      },
      {
        "file": "src/services/EnterpriseIntelligenceOrchestrator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 433,
        "column": 50,
        "context": "    log.info('üìä Setting up integration monitoring...');\\n\\n    // Setup cross-service event coordinat"
      },
      {
        "file": "src/services/EnterpriseIntelligenceOrchestrator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 510,
        "column": 45,
        "context": "d> {\\n    log.info('üè• Setting up health monitoring...');\\n\\n    if (!this.config.integration.healthChe"
      },
      {
        "file": "src/services/EnterpriseIntelligenceOrchestrator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 529,
        "column": 37,
        "context": "mise<void> {\\n    log.info('üìà Setting up reporting...');\\n\\n    if (!this.config.reporting.enabled) re"
      },
      {
        "file": "src/services/EnterpriseIntelligenceOrchestrator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 570,
        "column": 42,
        "context": "lt[]> {\\n    log.info('üß™ Running integration tests...');\\n\\n    const testResults: IntegrationTestResu"
      },
      {
        "file": "src/services/EnterpriseIntelligenceOrchestrator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1132,
        "column": 57,
        "context": ".info('üîÑ Triggering automatic recovery mechanisms...');\\n\\n    // Could implement:\\n    // - Automatic"
      },
      {
        "file": "src/services/EnterpriseIntelligenceOrchestrator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1270,
        "column": 46,
        "context": "gic\\n    log.info('üîß Optimizing system performance...');\\n\\n    // Could implement:\\n    // - Resource "
      },
      {
        "file": "src/services/EnterpriseIntelligenceOrchestrator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1550,
        "column": 67,
        "context": "Shutting down Enterprise Intelligence Orchestrator...');\\n\\n    // Stop monitoring intervals\\n    if (t"
      },
      {
        "file": "src/services/EnterpriseIntelligenceOrchestrator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1691,
        "column": 14,
        "context": "ons?: string[]\\n            }) => ({\\n              ...r;\\n              timestamp: new Date(r.timestam"
      },
      {
        "file": "src/services/ErrorTrackingEnterpriseSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 152,
        "column": 52,
        "context": "  log.info('üîç Performing automated error analysis...');\\n\\n    // Get current error state\\n    const a"
      },
      {
        "file": "src/services/ErrorTrackingEnterpriseSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 710,
        "column": 10,
        "context": "p((item: Record<string, unknown>) => ({\\n          ...item;\\n          timestamp: new Date(item.timest"
      },
      {
        "file": "src/services/ErrorTrackingEnterpriseSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 722,
        "column": 14,
        "context": "=> [\\n            key,\\n            {\\n              ...value;\\n              lastSeen: new Date(value.l"
      },
      {
        "file": "src/services/ErrorTrackingEnterpriseSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 779,
        "column": 6,
        "context": ",\\n      '',\\n      'üî• Top Error Patterns:',\\n      ...snapshot.patterns\\n        .sort((a, b) => b.fre"
      },
      {
        "file": "src/services/ErrorTrackingEnterpriseSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 788,
        "column": 6,
        "context": "    ),\\n      '',\\n      'üìà Active Trends:',\\n      ...snapshot.trends\\n        .filter(t => t.trendDir"
      },
      {
        "file": "src/services/ErrorTrackingEnterpriseSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 794,
        "column": 6,
        "context": "\\n      '',\\n      'üí° Top Recommendations:',\\n      ...snapshot.recommendations\\n        .slice(0, 3)\\n "
      },
      {
        "file": "src/services/ErrorTrackingEnterpriseSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 810,
        "column": 49,
        "context": "\\n    log.info('üîÑ Forcing immediate error analysis...');\\n    return await this.performAutomatedAnaly"
      },
      {
        "file": "src/services/ErrorTrackingEnterpriseSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 159,
        "column": 56,
        "context": "nst metrics = this.calculateMetrics(analysisResult as unknown as any, currentErrorCount);\\n\\n    // Up"
      },
      {
        "file": "src/services/ErrorTrackingEnterpriseSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 163,
        "column": 23,
        "context": " this.updateErrorPatterns(\\n      (((analysisResult as unknown as any)?.distribution as any)\\n        "
      },
      {
        "file": "src/services/ErrorTrackingEnterpriseSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 172,
        "column": 20,
        "context": "eIntelligentRecommendations(;\\n      analysisResult as unknown as any,\\n      metrics,\\n      trends,\\n "
      },
      {
        "file": "src/services/ErrorTrackingSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 339,
        "column": 6,
        "context": " {\\n    const buildFailure: BuildFailure = {\\n      ...failure;\\n      timestamp: new Date()\\n    };\\n\\n  "
      },
      {
        "file": "src/services/IngredientFilterService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 110,
        "column": 35,
        "context": "tegory]).map(;\\n        ([name, data]) => ({ name, ...data }) as unknown as IngredientMapping,\\n      "
      },
      {
        "file": "src/services/IngredientFilterService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 114,
        "column": 22,
        "context": "ly all filters sequentially\\n      let filtered = [...categoryIngredients];\\n\\n      // Apply nutrition"
      },
      {
        "file": "src/services/IngredientFilterService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 466,
        "column": 22,
        "context": "eteness (if data available)\\n      const sorted = [...ingredients].sort((a, b) => {\\n        const aNu"
      },
      {
        "file": "src/services/IngredientFilterService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 595,
        "column": 44,
        "context": "   },\\n          usedIngredients: [mainIngredient, ...otherIngredients]\\n        };\\n\\n        // Apply "
      },
      {
        "file": "src/services/IngredientFilterService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 110,
        "column": 45,
        "context": "ap(;\\n        ([name, data]) => ({ name, ...data }) as unknown as IngredientMapping,\\n      );\\n\\n      "
      },
      {
        "file": "src/services/IngredientFilterService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 252,
        "column": 59,
        "context": "st elementalProps = ingredient.elementalProperties as unknown as ElementalProperties;\\n\\n      // Chec"
      },
      {
        "file": "src/services/IngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 199,
        "column": 12,
        "context": "          name,\\n            category,\\n            ...data;\\n            elementalProperties: (data.el"
      },
      {
        "file": "src/services/IngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 243,
        "column": 18,
        "context": "orEach(categoryIngredients => {\\n        flat.push(...categoryIngredients);\\n      });\\n    } catch (er"
      },
      {
        "file": "src/services/IngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 350,
        "column": 24,
        "context": "redients in this category\\n        let filtered = [...categoryIngredients];\\n\\n        // Apply nutriti"
      },
      {
        "file": "src/services/IngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 990,
        "column": 35,
        "context": "ritional score\\n        const sortedIngredients = [...ingredients].sort((a, b) => {\\n          // Appl"
      },
      {
        "file": "src/services/IngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1110,
        "column": 28,
        "context": "g for seasonal dishes\\n            allRecipes.push(...(seasonalDishes as unknown as Recipe[]))\\n      "
      },
      {
        "file": "src/services/IngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1481,
        "column": 8,
        "context": "t mergedIngredient: UnifiedIngredient = {\\n        ...baseIngredient;\\n        ...ingredient;\\n        "
      },
      {
        "file": "src/services/IngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1482,
        "column": 8,
        "context": "Ingredient = {\\n        ...baseIngredient;\\n        ...ingredient;\\n        elementalProperties:\\n      "
      },
      {
        "file": "src/services/IngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1962,
        "column": 32,
        "context": "redients to score\\n      let ingredientsToScore = [...this.unifiedIngredientsFlat];\\n\\n      // Filter "
      },
      {
        "file": "src/services/IngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 2048,
        "column": 10,
        "context": "re\\n        const enhancedIngredient = {\\n          ...ingredient;\\n          score\\n        };\\n\\n       "
      },
      {
        "file": "src/services/IngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 206,
        "column": 17,
        "context": "Earth: 0,\\n                Air: 0\\n              })) as unknown as ElementalProperties,\\n            al"
      },
      {
        "file": "src/services/IngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 518,
        "column": 33,
        "context": "er compatibility\\n        const safeFilter = filter as unknown as import('../types/elemental').Elemen"
      },
      {
        "file": "src/services/IngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 993,
        "column": 40,
        "context": "alScore(;\\n            (a.nutritionalProfile || {}) as unknown as NutritionData,\\n          );\\n       "
      },
      {
        "file": "src/services/IngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 996,
        "column": 40,
        "context": "alScore(;\\n            (b.nutritionalProfile || {}) as unknown as NutritionData,\\n          );\\n       "
      },
      {
        "file": "src/services/IngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1058,
        "column": 46,
        "context": "ngs\\n    return connectIngredientsToMappings(recipe as unknown as _Recipe)\\n  }\\n\\n  /**\\n   * Find recip"
      },
      {
        "file": "src/services/IngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1110,
        "column": 46,
        "context": "hes\\n            allRecipes.push(...(seasonalDishes as unknown as Recipe[]))\\n          }\\n        });\\n"
      },
      {
        "file": "src/services/IngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1119,
        "column": 16,
        "context": "ype casting for TS2345 resolution\\n      allRecipes as unknown as _Recipe[],\\n      options.elementalT"
      },
      {
        "file": "src/services/IntelligentBatchProcessor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 283,
        "column": 84,
        "context": "ent batches using ${optimizationStrategy} strategy...`);\\n\\n    const optimization = this.optimization"
      },
      {
        "file": "src/services/IntelligentBatchProcessor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 800,
        "column": 24,
        "context": "imit to prevent overflow;\\n    const errorCodes = [...new Set(job.errors.map(e => e.code))].join(',')"
      },
      {
        "file": "src/services/IntelligentBatchProcessor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1176,
        "column": 13,
        "context": "queue: BatchQueue = {\\n      queueId,\\n      jobs: [...jobs],\\n      concurrency: 0,\\n      maxConcurren"
      },
      {
        "file": "src/services/IntelligentBatchProcessor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1266,
        "column": 19,
        "context": "ord => words2.includes(word));\\n    const union = [...new Set([...words1, ...words2])],;\\n\\n    return "
      },
      {
        "file": "src/services/IntelligentBatchProcessor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1266,
        "column": 31,
        "context": "2.includes(word));\\n    const union = [...new Set([...words1, ...words2])],;\\n\\n    return intersection"
      },
      {
        "file": "src/services/IntelligentBatchProcessor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1266,
        "column": 42,
        "context": "word));\\n    const union = [...new Set([...words1, ...words2])],;\\n\\n    return intersection.length / u"
      },
      {
        "file": "src/services/IntelligentBatchProcessor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1407,
        "column": 34,
        "context": "optimization) {\\n      optimization.parameters = { ...optimization.parameters, ...parameters };\\n     "
      },
      {
        "file": "src/services/IntelligentBatchProcessor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1407,
        "column": 62,
        "context": "zation.parameters = { ...optimization.parameters, ...parameters };\\n      optimization.adaptations++;"
      },
      {
        "file": "src/services/IntelligentPatternRecognition.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 108,
        "column": 18,
        "context": "] = [];\\n\\n    // Syntax features\\n    features.push(...this.extractSyntaxFeatures(error));\\n\\n    // Sem"
      },
      {
        "file": "src/services/IntelligentPatternRecognition.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 111,
        "column": 18,
        "context": "or));\\n\\n    // Semantic features\\n    features.push(...this.extractSemanticFeatures(error));\\n\\n    // S"
      },
      {
        "file": "src/services/IntelligentPatternRecognition.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 114,
        "column": 18,
        "context": "));\\n\\n    // Structural features\\n    features.push(...this.extractStructuralFeatures(error));\\n\\n    //"
      },
      {
        "file": "src/services/IntelligentPatternRecognition.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 117,
        "column": 18,
        "context": "));\\n\\n    // Contextual features\\n    features.push(...this.extractContextualFeatures(error));\\n\\n    re"
      },
      {
        "file": "src/services/IntelligentPatternRecognition.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 617,
        "column": 21,
        "context": "is.createTrendPredictions();\\n    predictions.push(...trendPredictions);\\n\\n    // Anomaly-based predic"
      },
      {
        "file": "src/services/IntelligentPatternRecognition.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 621,
        "column": 21,
        "context": ".createAnomalyPredictions();\\n    predictions.push(...anomalyPredictions);\\n\\n    this.predictions = pr"
      },
      {
        "file": "src/services/IntelligentPatternRecognition.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 858,
        "column": 18,
        "context": "[];\\n\\n    // Clustering insights\\n    insights.push(...this.generateClusteringInsights());\\n\\n    // Pre"
      },
      {
        "file": "src/services/IntelligentPatternRecognition.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 861,
        "column": 18,
        "context": "));\\n\\n    // Prediction insights\\n    insights.push(...this.generatePredictionInsights());\\n\\n    // Evo"
      },
      {
        "file": "src/services/IntelligentPatternRecognition.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 864,
        "column": 18,
        "context": "());\\n\\n    // Evolution insights\\n    insights.push(...this.generateEvolutionInsights());\\n\\n    // Anom"
      },
      {
        "file": "src/services/IntelligentPatternRecognition.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 867,
        "column": 18,
        "context": "ts());\\n\\n    // Anomaly insights\\n    insights.push(...this.generateAnomalyInsights());\\n\\n    return in"
      },
      {
        "file": "src/services/KiroCampaignIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 269,
        "column": 33,
        "context": "ogressMetrics();\\n        status.safetyEvents.push(...result.safetyEvents);\\n\\n        if (!result.succ"
      },
      {
        "file": "src/services/KiroCampaignIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 373,
        "column": 6,
        "context": " CampaignSchedule = {\\n      id: scheduleId,\\n      ...schedule;\\n      nextRun: this.calculateNextRun("
      },
      {
        "file": "src/services/KiroCampaignIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 526,
        "column": 6,
        "context": "sed on request\\n    const safetySettings = {\\n      ...baseConfig.safetySettings;\\n      maxFilesPerBat"
      },
      {
        "file": "src/services/KiroCampaignIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 539,
        "column": 6,
        "context": "lidationFrequency = 10;\\n    }\\n\\n    return {\\n      ...baseConfig;\\n      phases: requestedPhases,\\n    "
      },
      {
        "file": "src/services/KiroCampaignIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 118,
        "column": 56,
        "context": "is.intelligenceSystem = CampaignIntelligenceSystem as unknown as {\\n      initialize: (config: Record"
      },
      {
        "file": "src/services/KiroCampaignIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 446,
        "column": 29,
        "context": "elligence = await (;\\n      this.intelligenceSystem as unknown as {\\n        generateComprehensiveInte"
      },
      {
        "file": "src/services/LocalRecipeService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 120,
        "column": 23,
        "context": "isine as ExtendedCuisine);\\n          recipes.push(...cuisineRecipes);\\n        }\\n      }\\n\\n      logge"
      },
      {
        "file": "src/services/LocalRecipeService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 475,
        "column": 12,
        "context": "  return this.getRecipesFromCuisine({\\n            ...cuisine;\\n            dishes: cuisine.dishes.dis"
      },
      {
        "file": "src/services/LoggingService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 179,
        "column": 12,
        "context": "  public getLogBuffer(): LogEntry[] {\\n    return [...this.logBuffer];\\n  }\\n\\n  public clearLogBuffer()"
      },
      {
        "file": "src/services/MLIntelligenceService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 90,
        "column": 6,
        "context": "Usage: 150 * 1024 * 1024, // 150MB\\n      },\\n      ...config\\n    };\\n\\n    this.cache = new Map();\\n    "
      },
      {
        "file": "src/services/MLIntelligenceService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 446,
        "column": 25,
        "context": "rologicalContext,\\n    );\\n    recommendations.push(...elementalRecommendations);\\n\\n    return recommen"
      },
      {
        "file": "src/services/MLIntelligenceService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 479,
        "column": 23,
        "context": "strologicalContext,\\n    );\\n    optimizations.push(...elementalOptimizations);\\n\\n    return optimizati"
      },
      {
        "file": "src/services/MLIntelligenceService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 497,
        "column": 23,
        "context": "rologicalContext,\\n      ),\\n      suggestions.push(...flavorEnhancements);\\n    }\\n\\n    // Add astrolog"
      },
      {
        "file": "src/services/MLIntelligenceService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 505,
        "column": 21,
        "context": "_astrologicalContext,\\n    );\\n    suggestions.push(...astrologicalFlavorEnhancements);\\n\\n    // Add se"
      },
      {
        "file": "src/services/MLIntelligenceService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 512,
        "column": 21,
        "context": "_astrologicalContext,\\n    );\\n    suggestions.push(...seasonalFlavorSuggestions);\\n\\n    return suggest"
      },
      {
        "file": "src/services/MLIntelligenceService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 530,
        "column": 25,
        "context": "logicalContext,\\n      ),\\n      optimizations.push(...nutritionalOptimizations);\\n    }\\n\\n    // Add as"
      },
      {
        "file": "src/services/MLIntelligenceService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 538,
        "column": 23,
        "context": "strologicalContext,\\n    );\\n    optimizations.push(...astrologicalNutritionalOptimizations);\\n\\n    ret"
      },
      {
        "file": "src/services/MLIntelligenceService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 744,
        "column": 20,
        "context": "Data, __astrologicalContext);\\n    techniques.push(...fusionTechniques);\\n\\n    // Add astrological fus"
      },
      {
        "file": "src/services/MLIntelligenceService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 751,
        "column": 20,
        "context": "__astrologicalContext,\\n    );\\n    techniques.push(...astrologicalFusionTechniques);\\n\\n    return tech"
      },
      {
        "file": "src/services/MLIntelligenceService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 841,
        "column": 22,
        "context": "   _culinaryContext,\\n    );\\n    enhancements.push(...cosmicEnhancements);\\n\\n    // Add ML-specific en"
      },
      {
        "file": "src/services/MLIntelligenceService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 848,
        "column": 22,
        "context": "   _culinaryContext,\\n    );\\n    enhancements.push(...mlEnhancements);\\n\\n    return enhancements.slice"
      },
      {
        "file": "src/services/MLIntelligenceService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1429,
        "column": 20,
        "context": "dIntelligenceConfig>): void {\\n    this.config = { ...this.config, ...newConfig };\\n    this.log('info"
      },
      {
        "file": "src/services/MLIntelligenceService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1429,
        "column": 36,
        "context": "fig>): void {\\n    this.config = { ...this.config, ...newConfig };\\n    this.log('info', 'ML Intellige"
      },
      {
        "file": "src/services/MLIntelligenceService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 666,
        "column": 18,
        "context": "his.calculateInnovationFactor(;\\n      _cuisineData as unknown as Recipe,\\n      __astrologicalContext"
      },
      {
        "file": "src/services/MLIntelligenceService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1349,
        "column": 13,
        "context": "d {\\n    if (this.shouldLog(level)) {\\n      (logger as unknown as Record<string, (msg: string) => voi"
      },
      {
        "file": "src/services/NutritionService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 43,
        "column": 10,
        "context": " (acc: Record<string, number>, n) => ({\\n          ...acc,\\n          [n.nutrientName || '']: n.value "
      },
      {
        "file": "src/services/NutritionService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 9,
        "column": 25,
        "context": "Central.getFood(fdcId);\\n\\n    const foodData = data as unknown as FoodDataCentralFood;\\n\\n    return {\\n"
      },
      {
        "file": "src/services/PerformanceCache.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 367,
        "column": 43,
        "context": "nTime:\\n        metricsArray.length > 0 ? Math.max(...metricsArray.map(m => m.calculationTime)) : 0,;"
      },
      {
        "file": "src/services/PerformanceCache.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 369,
        "column": 43,
        "context": "tRate:\\n        metricsArray.length > 0 ? Math.max(...metricsArray.map(m => m.cacheHitRate)) : 0,;\\n  "
      },
      {
        "file": "src/services/PerformanceCache.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 370,
        "column": 54,
        "context": "  memoryUsage: metricsArray.length > 0 ? Math.max(...metricsArray.map(m => m.memoryUsage)) : 0,;\\n   "
      },
      {
        "file": "src/services/PerformanceCache.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 372,
        "column": 43,
        "context": "Count:\\n        metricsArray.length > 0 ? Math.max(...metricsArray.map(m => m.recommendationCount)) :"
      },
      {
        "file": "src/services/PerformanceCache.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 374,
        "column": 43,
        "context": "eTime:\\n        metricsArray.length > 0 ? Math.max(...metricsArray.map(m => m.averageResponseTime)) :"
      },
      {
        "file": "src/services/PerformanceCache.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 376,
        "column": 43,
        "context": "Usage:\\n        metricsArray.length > 0 ? Math.max(...metricsArray.map(m => m.peakMemoryUsage)) : 0,,"
      },
      {
        "file": "src/services/PerformanceCache.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 379,
        "column": 47,
        "context": ";\\n\\n    return { current, average, peak, history: [...this.metrics] };\\n  }\\n\\n  /**\\n   * Clear metrics "
      },
      {
        "file": "src/services/PerformanceCache.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 404,
        "column": 56,
        "context": "info('üî• Warming up caches for optimal performance...');\\n\\n  // This will be implemented with actual "
      },
      {
        "file": "src/services/PerformanceMetricsAnalytics.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 264,
        "column": 47,
        "context": ");\\n    log.info('üìä Capturing performance snapshot...');\\n\\n    const [systemMetrics, processMetrics, "
      },
      {
        "file": "src/services/PerformanceMetricsAnalytics.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1521,
        "column": 10,
        "context": "pshots = data.map((item: unknown) => ({\\n          ...item;\\n          timestamp: new Date(item.timest"
      },
      {
        "file": "src/services/PerformanceMetricsAnalytics.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1530,
        "column": 10,
        "context": "alerts = data.map((item: unknown) => ({\\n          ...item;\\n          timestamp: new Date(item.timest"
      },
      {
        "file": "src/services/PerformanceMonitoringService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 81,
        "column": 6,
        "context": "e system metrics\\n    this.systemMetrics = {\\n      ...this.systemMetrics;\\n      totalMemoryUsage: tot"
      },
      {
        "file": "src/services/PerformanceMonitoringService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 195,
        "column": 8,
        "context": "his.componentMetrics.set(componentName, {\\n        ...existing;\\n        renderCount: newRenderCount,\\n"
      },
      {
        "file": "src/services/PerformanceMonitoringService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 221,
        "column": 8,
        "context": "his.componentMetrics.set(componentName, {\\n        ...existing;\\n        errorCount: existing.errorCou"
      },
      {
        "file": "src/services/PredictiveIntelligenceService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 121,
        "column": 6,
        "context": "Usage: 100 * 1024 * 1024, // 100MB\\n      },\\n      ...config\\n    };\\n\\n    this.cache = new Map();\\n    "
      },
      {
        "file": "src/services/PredictiveIntelligenceService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1313,
        "column": 20,
        "context": "dIntelligenceConfig>): void {\\n    this.config = { ...this.config, ...newConfig };\\n    this.log('info"
      },
      {
        "file": "src/services/PredictiveIntelligenceService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1313,
        "column": 36,
        "context": "fig>): void {\\n    this.config = { ...this.config, ...newConfig };\\n    this.log('info', 'Predictive I"
      },
      {
        "file": "src/services/PredictiveIntelligenceService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1002,
        "column": 40,
        "context": "itions) {\\n      const planets = planetaryPositions as unknown as Record<string, Record<string, unkno"
      },
      {
        "file": "src/services/PredictiveIntelligenceService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1240,
        "column": 13,
        "context": "d {\\n    if (this.shouldLog(level)) {\\n      (logger as unknown as Record<string, (msg: string) => voi"
      },
      {
        "file": "src/services/QualityGatesValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 567,
        "column": 49,
        "context": "\\n    log.info('üö¶ Starting quality gates execution...');\\n\\n    const startTime = Date.now();\\n    cons"
      },
      {
        "file": "src/services/QualityGatesValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 587,
        "column": 25,
        "context": "cuteQualityGate(gate)));\\n        gateResults.push(...results);\\n      } else {\\n        // Execute seq"
      },
      {
        "file": "src/services/QualityGatesValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 616,
        "column": 33,
        "context": "// Store results\\n      this.executionHistory.push(...gateResults);\\n      this.persistResults();\\n\\n   "
      },
      {
        "file": "src/services/QualityGatesValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1064,
        "column": 42,
        "context": "void> {\\n    log.info('üîÑ Executing rollback action...');\\n    // Rollback implementation would go her"
      },
      {
        "file": "src/services/QualityGatesValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1077,
        "column": 38,
        "context": "ise<void> {\\n    log.info('üõë Executing stop action...');\\n    // Stop implementation would go here\\n  "
      },
      {
        "file": "src/services/QualityGatesValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1090,
        "column": 37,
        "context": "mise<void> {\\n    log.info('üîß Executing fix action...');\\n    // Fix implementation would go here\\n   "
      },
      {
        "file": "src/services/QualityMetricsService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 369,
        "column": 23,
        "context": "}\\n\\n    // Add new insights\\n    this.insights.push(...newInsights);\\n\\n    // Keep only recent insights"
      },
      {
        "file": "src/services/QualityMetricsService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 759,
        "column": 22,
        "context": "erity === 'info',,;\\n    ),\\n\\n    achievements.push(...recentInsights.map(i => i.title));\\n\\n    return "
      },
      {
        "file": "src/services/QualityMetricsService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 826,
        "column": 27,
        "context": " actionableInsights) {\\n      recommendations.push(...insight.suggestedActions.slice(0, 2))\\n    }\\n\\n  "
      },
      {
        "file": "src/services/QualityMetricsService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 832,
        "column": 29,
        "context": "ations.length > 0) {\\n        recommendations.push(...prediction.recommendations.slice(0, 1))\\n      }"
      },
      {
        "file": "src/services/QualityMetricsService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 844,
        "column": 12,
        "context": "rogress)}% complete`,\\n      );\\n    }\\n\\n    return [...new Set(recommendations)].slice(0, 8); // Remov"
      },
      {
        "file": "src/services/QualityMetricsService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 912,
        "column": 6,
        "context": "now()}`;\\n    const newGoal: QualityGoal = {\\n      ...goal;\\n      id,\\n      progress: 0,\\n      onTrac"
      },
      {
        "file": "src/services/QualityMetricsService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 928,
        "column": 30,
        "context": " -1) return false;\\n\\n    this.goals[goalIndex] = { ...this.goals[goalIndex], ...updates };\\n    this.s"
      },
      {
        "file": "src/services/QualityMetricsService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 928,
        "column": 56,
        "context": "is.goals[goalIndex] = { ...this.goals[goalIndex], ...updates };\\n    this.saveHistoricalData();\\n\\n    "
      },
      {
        "file": "src/services/RecipeChakraService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 33,
        "column": 29,
        "context": "the recipe to modify\\n    const enhancedRecipe = { ...recipe };\\n\\n    // Add chakra-balancing ingredie"
      },
      {
        "file": "src/services/RecipeCuisineConnector.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 98,
        "column": 10,
        "context": "       this.recipeCache.set(recipeId, {\\n          ...recipe;\\n          id: recipeId,\\n          cuisi"
      },
      {
        "file": "src/services/RecipeCuisineConnector.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 431,
        "column": 12,
        "context": " both cuisines for fusion inspiration\\n    return [...primaryRecipes.slice(0, 3), ...secondaryRecipes"
      },
      {
        "file": "src/services/RecipeCuisineConnector.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 431,
        "column": 43,
        "context": "ration\\n    return [...primaryRecipes.slice(0, 3), ...secondaryRecipes.slice(0, 3)];\\n  }\\n\\n  /**\\n   * "
      },
      {
        "file": "src/services/RecipeCuisineConnector.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 85,
        "column": 38,
        "context": "tructor() {\\n    this.cuisineDatabase = cuisinesMap as unknown as any;\\n    this.recipeCache = new Map"
      },
      {
        "file": "src/services/RecipeElementalService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 42,
        "column": 8,
        "context": " state if there's an error\\n      return {\\n        ...recipe,\\n        elementalProperties: { Fire: 0."
      },
      {
        "file": "src/services/RecipeFinder.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 375,
        "column": 8,
        "context": "ipe[] = recipes.map((recipe, index) => ({\\n        ...recipe;\\n        score: recipe.score ?? 1 - inde"
      },
      {
        "file": "src/services/RecommendationAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 129,
        "column": 12,
        "context": "            degree: data.degree || 0,\\n            ...(data.isRetrograde !== undefined ? { isRetrogra"
      },
      {
        "file": "src/services/RecommendationAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 545,
        "column": 6,
        "context": " boost = boosts[item.id] || 1;\\n    return {\\n      ...item;\\n      elementalProperties: {\\n        Fire"
      },
      {
        "file": "src/services/RecommendationAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 652,
        "column": 6,
        "context": "r AlchemicalItem compatibility\\n    return {\\n      ...ingredient;\\n      alchemicalProperties: {\\n     "
      },
      {
        "file": "src/services/RecommendationAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 156,
        "column": 64,
        "context": "narPhaseFormatted = convertToLunarPhase(lunarPhase as unknown as LunarPhase);\\n\\n      // Calculate if"
      },
      {
        "file": "src/services/RecommendationAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 224,
        "column": 31,
        "context": "sult = alchemize(;\\n        this.convertedPositions as unknown as Record<string, PlanetaryPosition>,\\n"
      },
      {
        "file": "src/services/RecommendationAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 230,
        "column": 36,
        "context": "tus\\n      );\\n\\n      this.alchemicalResult = result as unknown as Record<string, number>,;\\n\\n      // "
      },
      {
        "file": "src/services/RecommendationAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 233,
        "column": 31,
        "context": " result properties\\n      const resultData = result as unknown as any;\\n\\n      // Prepare alchemical p"
      },
      {
        "file": "src/services/RecommendationAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 311,
        "column": 35,
        "context": "roperty access\\n          const aspectData = aspect as unknown as any;\\n          const body1 = aspect"
      },
      {
        "file": "src/services/RecommendationAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 435,
        "column": 40,
        "context": "erCase();\\n    return (planetInfo[planetKey] || {}) as unknown as any;\\n  }\\n\\n  /**\\n   * Get recommende"
      },
      {
        "file": "src/services/RecommendationAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 663,
        "column": 5,
        "context": "     reactivity,\\n        gregsEnergy\\n      }\\n    } as unknown as AlchemicalItem;\\n  }\\n\\n  /**\\n   * Get"
      },
      {
        "file": "src/services/RecommendationAnalyticsService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 247,
        "column": 6,
        "context": " const fullInteraction: UserInteraction = {\\n      ...interaction;\\n      timestamp: Date.now()\\n    };"
      },
      {
        "file": "src/services/RecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 149,
        "column": 12,
        "context": "            degree: data.degree || 0,\\n            ...(data.isRetrograde !== undefined ? { isRetrogra"
      },
      {
        "file": "src/services/RecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 292,
        "column": 10,
        "context": "        }\\n        });\\n\\n        return {\\n          ...(item as any);\\n          elementalProperties: p"
      },
      {
        "file": "src/services/RecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 338,
        "column": 12,
        "context": "], limit: number): AlchemicalItem[] {\\n    return [...items]\\n      .sort((a, b) => {\\n        // Sort "
      },
      {
        "file": "src/services/RecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 412,
        "column": 10,
        "context": "cipes || []);\\n        .map(recipe => ({\\n          ...recipe;\\n          score: this.calculateRecipeSc"
      },
      {
        "file": "src/services/RecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 414,
        "column": 12,
        "context": ": this.calculateRecipeScore(recipe, {\\n            ...criteria;\\n            celestialInfluence\\n      "
      },
      {
        "file": "src/services/RecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 514,
        "column": 51,
        "context": "   // Additional scoring factors can be added here...\\n\\n    // Normalize score to 0-1 range\\n    retur"
      },
      {
        "file": "src/services/RecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 400,
        "column": 30,
        "context": "[]).length === 0) {\\n        throw new (createError as unknown as new (\\n          message: string,\\n  "
      },
      {
        "file": "src/services/ServicesManager.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 82,
        "column": 12,
        "context": "ts(): ServiceInitializationResult[] {\\n    return [...this._serviceResults]\\n  }\\n\\n  /**\\n   * Initializ"
      },
      {
        "file": "src/services/ServicesManager.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 102,
        "column": 40,
        "context": "lts = [];\\n      logger.info('Initializing services...');\\n\\n      // Initialize AlchemicalEngine first"
      },
      {
        "file": "src/services/ServicesManager.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 132,
        "column": 48,
        "context": "{\\n      logger.info('Initializing AlchemicalEngine...');\\n\\n      // The engine is already initialized"
      },
      {
        "file": "src/services/ServicesManager.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 182,
        "column": 48,
        "context": "{\\n      logger.info('Initializing AstrologyService...');\\n\\n      // The astrologyService is already i"
      },
      {
        "file": "src/services/ServicesManager.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 220,
        "column": 49,
        "context": "\\n      logger.info('Initializing IngredientService...');\\n\\n      // The unifiedIngredientService is a"
      },
      {
        "file": "src/services/ServicesManager.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 256,
        "column": 45,
        "context": "ry {\\n      logger.info('Initializing RecipeService...');\\n\\n      // The unifiedRecipeService is alrea"
      },
      {
        "file": "src/services/ServicesManager.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 292,
        "column": 53,
        "context": "   logger.info('Initializing RecommendationService...');\\n\\n      // The unifiedRecommendationService "
      },
      {
        "file": "src/services/ServicesManager.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 335,
        "column": 63,
        "context": "info('Initializing AlchemicalRecommendationService...');\\n\\n      // Ensure the service is initialized"
      },
      {
        "file": "src/services/SwissEphemerisService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 664,
        "column": 26,
        "context": " // Collect key aspects\\n          keyAspects.push(...transit.keyAspects);\\n        }\\n      });\\n    })"
      },
      {
        "file": "src/services/SwissEphemerisService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 785,
        "column": 6,
        "context": "t approximatedEntry: SwissEphemerisData = {\\n      ...baseEntry;\\n      day: date.getDate(),\\n      dat"
      },
      {
        "file": "src/services/SwissEphemerisService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 798,
        "column": 26,
        "context": "e % 360) + 360) % 360;\\n\\n        (approximatedEntry as unknown as any)[planetCode] = newLongitude;\\n\\n "
      },
      {
        "file": "src/services/UnifiedIngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 107,
        "column": 26,
        "context": "dientCache.entries()) {\\n      result[category] = [...ingredients];\\n    }\\n\\n    return result;\\n  }\\n\\n  "
      },
      {
        "file": "src/services/UnifiedIngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 119,
        "column": 31,
        "context": "tCache.values()) {\\n      void allIngredients.push(...ingredients);\\n    }\\n    return allIngredients;\\n"
      },
      {
        "file": "src/services/UnifiedIngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 149,
        "column": 16,
        "context": "rCase() === normalizedCategory) {\\n        return [...ingredients]\\n      }\\n    }\\n\\n    return [];\\n  }\\n"
      },
      {
        "file": "src/services/UnifiedIngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 166,
        "column": 23,
        "context": "izedSubCategory,;\\n      ),\\n      void result.push(...matching);\\n    }\\n    return result;\\n  }\\n\\n  /**\\n"
      },
      {
        "file": "src/services/UnifiedIngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 551,
        "column": 6,
        "context": "t enhancedIngredient: UnifiedIngredient = {\\n      ...(ingredient as UnifiedIngredient);\\n      elemen"
      },
      {
        "file": "src/services/UnifiedIngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1005,
        "column": 32,
        "context": " },\\n  ): number {\\n    const allFlavors = new Set([...Object.keys(profile1), ...Object.keys(profile2)"
      },
      {
        "file": "src/services/UnifiedIngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1005,
        "column": 58,
        "context": "t allFlavors = new Set([...Object.keys(profile1), ...Object.keys(profile2)]);\\n\\n    let similarity = "
      },
      {
        "file": "src/services/UnifiedIngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 193,
        "column": 28,
        "context": " filteredIngredients,\\n        filter.currentSeason as unknown as string[] | Season[],\\n      )\\n    }\\n"
      },
      {
        "file": "src/services/UnifiedIngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 936,
        "column": 42,
        "context": "(signs)\\n        ? signs.includes(currentZodiacSign as unknown as Record<string, Record<string, strin"
      },
      {
        "file": "src/services/UnifiedIngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 937,
        "column": 38,
        "context": ", string>>)\\n        : signs === (currentZodiacSign as unknown as Record<string, Record<string, strin"
      },
      {
        "file": "src/services/UnifiedIngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 955,
        "column": 33,
        "context": "isArray(planets)\\n        ? planets.includes(planet as unknown as Record<string, Record<string, strin"
      },
      {
        "file": "src/services/UnifiedIngredientService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 956,
        "column": 29,
        "context": "rd<string, string>>)\\n        : planets === (planet as unknown as Record<string, Record<string, strin"
      },
      {
        "file": "src/services/UnifiedRecipeService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 78,
        "column": 21,
        "context": "=== targetCuisine;\\n      });\\n      return filtered as unknown as ExtendedRecipe[];\\n    } catch (erro"
      },
      {
        "file": "src/services/UnifiedRecipeService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 100,
        "column": 20,
        "context": "s = allRecipes.slice(0, 10),;\\n      return matches as unknown as ExtendedRecipe[]\\n    } catch (error"
      },
      {
        "file": "src/services/UnifiedRecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 203,
        "column": 37,
        "context": "ts.includes(\\n              criteria.planetaryRuler as unknown as Record<string, Record<string, strin"
      },
      {
        "file": "src/services/UnifiedRecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 206,
        "column": 36,
        "context": " planets ===;\\n            (criteria.planetaryRuler as unknown as Record<string, Record<string, strin"
      },
      {
        "file": "src/services/UnifiedRecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 255,
        "column": 68,
        "context": "tedIngredients || []).map(item => item.ingredient) as unknown as Ingredient[], // TODO: Review this "
      },
      {
        "file": "src/services/UnifiedRecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 476,
        "column": 36,
        "context": "ach(item => {\\n      const methodData = item.method as unknown as any;\\n      const methodId = String("
      },
      {
        "file": "src/services/UnifiedRecommendationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 500,
        "column": 49,
        "context": "\\n    const alchemicalEngineData = alchemicalEngine as unknown as any;\\n    if (typeof alchemicalEngin"
      },
      {
        "file": "src/services/UnifiedScoringAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 141,
        "column": 18,
        "context": "|| {},\\n        culturalOrigins:\\n          ((recipe as unknown as any).culturalOrigins as string[]) |"
      },
      {
        "file": "src/services/UnifiedScoringAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 142,
        "column": 25,
        "context": "lOrigins as string[]) ||\\n          [String((recipe as unknown as any).cuisine || '')].filter(Boolean"
      },
      {
        "file": "src/services/UnifiedScoringAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 181,
        "column": 37,
        "context": "ing_method',\\n        elementalProperties: ((method as unknown as any)\\n          .elementalEffect as "
      },
      {
        "file": "src/services/UnifiedScoringAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 188,
        "column": 29,
        "context": "Air: 0.25\\n        },\\n        seasonality: ((method as unknown as any).seasonality as Season[]) || []"
      },
      {
        "file": "src/services/UnifiedScoringAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 189,
        "column": 33,
        "context": "Season[]) || [],\\n        planetaryRulers: ((method as unknown as any).planetaryRulers as Planet[]) |"
      },
      {
        "file": "src/services/UnifiedScoringAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 190,
        "column": 31,
        "context": "s Planet[]) || [],\\n        flavorProfile: ((method as unknown as any).flavorProfile as Record<string"
      },
      {
        "file": "src/services/UnifiedScoringAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 191,
        "column": 33,
        "context": " number>) || {},\\n        culturalOrigins: ((method as unknown as any).culturalOrigins as string[]) |"
      },
      {
        "file": "src/services/UnifiedScoringService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 684,
        "column": 10,
        "context": "if (astrologizeData) {\\n        return {\\n          ...astrologizeData;\\n          source: 'astrologize"
      },
      {
        "file": "src/services/UnifiedScoringService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 697,
        "column": 8,
        "context": "AstrologicalData(context);\\n      return {\\n        ...fallbackData;\\n        source: 'swiss_ephemeris'"
      },
      {
        "file": "src/services/UnifiedScoringService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 751,
        "column": 8,
        "context": " (context.aspects || []).map(aspect => ({\\n        ...aspect;\\n        strength: 0.5, // Default stren"
      },
      {
        "file": "src/services/UnusedVariableDetector.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 208,
        "column": 28,
        "context": "<DetectionResult[]> {\\n    const mergedOptions = { ...this.DEFAULT_OPTIONS, ...options };\\n\\n    if (th"
      },
      {
        "file": "src/services/UnusedVariableDetector.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 208,
        "column": 53,
        "context": " const mergedOptions = { ...this.DEFAULT_OPTIONS, ...options };\\n\\n    if (this.isAnalyzing) {\\n      t"
      },
      {
        "file": "src/services/UnusedVariableDetector.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 215,
        "column": 65,
        "context": "\udd0d Starting comprehensive unused variable detection...');\\n\\n    try {\\n      // Build file list\\n      c"
      },
      {
        "file": "src/services/UnusedVariableDetector.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 220,
        "column": 50,
        "context": "      log.info(`üìÅ Analyzing ${files.length} files...`);\\n\\n      // Build global symbol table\\n      a"
      },
      {
        "file": "src/services/UnusedVariableDetector.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 298,
        "column": 45,
        "context": "d> {\\n    log.info('üîç Building global symbol table...');\\n\\n    this.globalSymbolTable.clear();\\n    th"
      },
      {
        "file": "src/services/UnusedVariableDetector.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1300,
        "column": 47,
        "context": " {\\n    log.info('üîç Performing cross-file analysis...');\\n\\n    // Update usage counts based on cross-"
      },
      {
        "file": "src/services/UnusedVariableDetector.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1322,
        "column": 57,
        "context": ".info('üí° Generating comprehensive recommendations...');\\n\\n    // Could add cross-file recommendation"
      },
      {
        "file": "src/services/UnusedVariableDetector.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1346,
        "column": 45,
        "context": "n) {\\n      log.info('üß™ Performing dry run cleanup...');\\n    } else {\\n      log.info('üîß Performing "
      },
      {
        "file": "src/services/UnusedVariableDetector.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1348,
        "column": 47,
        "context": " {\\n      log.info('üîß Performing automated cleanup...');\\n    }\\n\\n    try {\\n      const content = fs.r"
      },
      {
        "file": "src/services/UnusedVariableDetector.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1482,
        "column": 28,
        "context": "  results.length > 0;\\n        ? new Date(Math.max(...results.map(r => r.timestamp.getTime())));\\n    "
      },
      {
        "file": "src/services/adapters/FoodAlchemySystemAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 81,
        "column": 8,
        "context": "pe service\\n      const recipeCriteria = {\\n        ...criteria;\\n        flavorProfile,\\n        elemen"
      },
      {
        "file": "src/services/adapters/FoodAlchemySystemAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 243,
        "column": 6,
        "context": "     // Add other relevant state properties\\n      ...(state as unknown)\\n    };\\n  }\\n\\n  /**\\n   * Creat"
      },
      {
        "file": "src/services/adapters/FoodAlchemySystemAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 88,
        "column": 20,
        "context": "tches(recipeCriteria, limit);\\n      return recipes as unknown as ScoredRecipe[];\\n    } catch (error)"
      },
      {
        "file": "src/services/adapters/FoodAlchemySystemAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 140,
        "column": 20,
        "context": "      minMatchScore,\\n      );\\n      return recipes as unknown as Recipe[];\\n    } catch (error) {\\n   "
      },
      {
        "file": "src/services/adapters/IngredientServiceAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 200,
        "column": 21,
        "context": "IngredientsByPlanet(planet);\\n        results.push(...planetaryIngredients);\\n      });\\n\\n      // Remo"
      },
      {
        "file": "src/services/adapters/IngredientServiceAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 233,
        "column": 30,
        "context": "ltering\\n        ),\\n\\n        allComplementary.push(...complementary);\\n      });\\n\\n      // Filter out "
      },
      {
        "file": "src/services/adapters/IngredientServiceAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 274,
        "column": 8,
        "context": "onst combinedFilter: IngredientFilter = {\\n        ...filter;\\n        season: [season]\\n      };\\n\\n    "
      },
      {
        "file": "src/services/adapters/IngredientServiceAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 171,
        "column": 29,
        "context": " Air: 0.25 };\\n    }\\n\\n    const stateRecord = state as unknown as any;\\n    const elements = stateReco"
      },
      {
        "file": "src/services/adapters/LegacyIngredientAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 218,
        "column": 14,
        "context": "cyService.analyzeRecipeIngredients(\\n        recipe as unknown as import('@/types/unified').Recipe;\\n "
      },
      {
        "file": "src/services/adapters/LegacyRecipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 250,
        "column": 34,
        "context": "teria if needed\\n      const criteriaWithLimit = { ...criteria, maxResults: limit };\\n      const matc"
      },
      {
        "file": "src/services/adapters/LegacyRecipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 68,
        "column": 20,
        "context": "ecipeService.getAllRecipes();\\n      return recipes as unknown as Recipe[];\\n    } catch (error) {\\n   "
      },
      {
        "file": "src/services/adapters/LegacyRecipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 73,
        "column": 20,
        "context": "ecipeService.getAllRecipes();\\n      return recipes as unknown as Recipe[];\\n    }\\n  }\\n\\n  /**\\n   * Sea"
      },
      {
        "file": "src/services/adapters/LegacyRecipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 86,
        "column": 35,
        "context": "earch criteria\\n      const criteriaData = criteria as unknown as any;\\n      const searchQuery = Stri"
      },
      {
        "file": "src/services/adapters/LegacyRecipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 89,
        "column": 20,
        "context": "e.searchRecipes(searchQuery);\\n      return recipes as unknown as Recipe[];\\n    } catch (error) {\\n   "
      },
      {
        "file": "src/services/adapters/LegacyRecipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 93,
        "column": 35,
        "context": "ring parameter\\n      const criteriaData = criteria as unknown as any;\\n      const queryValue = crite"
      },
      {
        "file": "src/services/adapters/LegacyRecipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 97,
        "column": 22,
        "context": ".searchRecipes(queryValue);\\n        return recipes as unknown as Recipe[];\\n      } else if (criteria"
      },
      {
        "file": "src/services/adapters/LegacyRecipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 102,
        "column": 22,
        "context": "earchRecipes(searchString);\\n        return recipes as unknown as Recipe[];\\n      }\\n      return [];\\n"
      },
      {
        "file": "src/services/adapters/LegacyRecipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 115,
        "column": 20,
        "context": "etRecipesForCuisine(cuisine);\\n      return recipes as unknown as Recipe[];\\n    } catch (error) {\\n   "
      },
      {
        "file": "src/services/adapters/LegacyRecipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 120,
        "column": 20,
        "context": "getRecipesByCuisine(cuisine);\\n      return recipes as unknown as Recipe[];\\n    }\\n  }\\n\\n  /**\\n   * Get"
      },
      {
        "file": "src/services/adapters/LegacyRecipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 132,
        "column": 20,
        "context": "e.searchRecipes(searchQuery);\\n      return recipes as unknown as Recipe[];\\n    } catch (error) {\\n   "
      },
      {
        "file": "src/services/adapters/LegacyRecipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 142,
        "column": 21,
        "context": "Case());\\n        ),\\n      );\\n      return filtered as unknown as Recipe[];\\n    }\\n  }\\n\\n  /**\\n   * Get"
      },
      {
        "file": "src/services/adapters/LegacyRecipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 152,
        "column": 46,
        "context": "ess\\n      const serviceData = unifiedRecipeService as unknown as any;\\n      // ‚úÖ Pattern GG-6: Safe "
      },
      {
        "file": "src/services/adapters/LegacyRecipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 159,
        "column": 22,
        "context": "= await methodCall(season);\\n        return recipes as unknown as Recipe[];\\n      }\\n      // ‚úÖ Patter"
      },
      {
        "file": "src/services/adapters/LegacyRecipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 164,
        "column": 20,
        "context": "e.searchRecipes(searchQuery);\\n      return recipes as unknown as Recipe[];\\n    } catch (error) {\\n   "
      },
      {
        "file": "src/services/adapters/LegacyRecipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 169,
        "column": 20,
        "context": "e.getRecipesBySeason(season);\\n      return recipes as unknown as Recipe[];\\n    }\\n  }\\n\\n  /**\\n   * Get"
      },
      {
        "file": "src/services/adapters/LegacyRecipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 179,
        "column": 46,
        "context": "pe)\\n      const serviceData = unifiedRecipeService as unknown as any;\\n      // ‚úÖ Pattern GG-6: Safe "
      },
      {
        "file": "src/services/adapters/LegacyRecipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 186,
        "column": 22,
        "context": "it lunarMethod(lunarPhase);\\n        return recipes as unknown as Recipe[];\\n      }\\n      // ‚úÖ Patter"
      },
      {
        "file": "src/services/adapters/LegacyRecipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 191,
        "column": 20,
        "context": "e.searchRecipes(searchQuery);\\n      return recipes as unknown as Recipe[];\\n    } catch (error) {\\n   "
      },
      {
        "file": "src/services/adapters/LegacyRecipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 201,
        "column": 21,
        "context": "', '')),\\n        ),\\n      );\\n      return filtered as unknown as Recipe[];\\n    }\\n  }\\n\\n  /**\\n   * Get"
      },
      {
        "file": "src/services/adapters/LegacyRecipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 211,
        "column": 46,
        "context": "ess\\n      const serviceData = unifiedRecipeService as unknown as any;\\n      // ‚úÖ Pattern GG-6: Safe "
      },
      {
        "file": "src/services/adapters/LegacyRecipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 218,
        "column": 22,
        "context": "await mealMethod(mealType);\\n        return recipes as unknown as Recipe[];\\n      }\\n      // ‚úÖ Patter"
      },
      {
        "file": "src/services/adapters/LegacyRecipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 223,
        "column": 20,
        "context": "e.searchRecipes(searchQuery);\\n      return recipes as unknown as Recipe[];\\n    } catch (error) {\\n   "
      },
      {
        "file": "src/services/adapters/LegacyRecipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 228,
        "column": 20,
        "context": "tRecipesByMealType(mealType);\\n      return recipes as unknown as Recipe[];\\n    }\\n  }\\n\\n  /**\\n   * Get"
      },
      {
        "file": "src/services/adapters/LegacyRecipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 252,
        "column": 20,
        "context": "peMatches(criteriaWithLimit);\\n      return matches as unknown as ScoredRecipe[];\\n    } catch (error)"
      },
      {
        "file": "src/services/adapters/LegacyRecipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 265,
        "column": 46,
        "context": "ess\\n      const serviceData = unifiedRecipeService as unknown as any;\\n      // ‚úÖ Pattern GG-6: Safe "
      },
      {
        "file": "src/services/adapters/LegacyRecipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 274,
        "column": 35,
        "context": "riteria search\\n      const criteriaData = criteria as unknown as any;\\n      const searchQuery = Stri"
      },
      {
        "file": "src/services/adapters/LegacyRecipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 295,
        "column": 46,
        "context": "ess\\n      const serviceData = unifiedRecipeService as unknown as any;\\n      // ‚úÖ Pattern GG-6: Safe "
      },
      {
        "file": "src/services/adapters/LegacyRecipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 337,
        "column": 46,
        "context": "ess\\n      const serviceData = unifiedRecipeService as unknown as any;\\n      // ‚úÖ Pattern GG-6: Safe "
      },
      {
        "file": "src/services/adapters/LegacyRecommendationAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 87,
        "column": 8,
        "context": "RecommendedIngredients(\\n        criteria,\\n      )) as unknown as RecommendationResult<UnifiedIngredi"
      },
      {
        "file": "src/services/adapters/NutritionalDataAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 309,
        "column": 8,
        "context": "ecommendations(seasonStr);\\n      return {\\n        ...result,\\n        element: result.element as Elem"
      },
      {
        "file": "src/services/adapters/NutritionalDataAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 92,
        "column": 8,
        "context": "t fetchNutritionalData(\\n        foodName,\\n      )) as unknown as import('@/types/alchemy').Nutrition"
      },
      {
        "file": "src/services/adapters/NutritionalDataAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 95,
        "column": 46,
        "context": "ess\\n      const errorHandlerService = errorHandler as unknown as any;\\n      const logError = errorHa"
      },
      {
        "file": "src/services/adapters/NutritionalDataAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 115,
        "column": 7,
        "context": "alBalance(\\n        ingredients as unknown,\\n      ) as unknown as import('@/types/alchemy').Nutrition"
      },
      {
        "file": "src/services/adapters/NutritionalDataAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 118,
        "column": 46,
        "context": "ess\\n      const errorHandlerService = errorHandler as unknown as any;\\n      const logError = errorHa"
      },
      {
        "file": "src/services/adapters/NutritionalDataAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 156,
        "column": 46,
        "context": "ess\\n      const errorHandlerService = errorHandler as unknown as any;\\n      const logError = errorHa"
      },
      {
        "file": "src/services/adapters/NutritionalDataAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 191,
        "column": 46,
        "context": "ess\\n      const errorHandlerService = errorHandler as unknown as any;\\n      const logError = errorHa"
      },
      {
        "file": "src/services/adapters/NutritionalDataAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 223,
        "column": 46,
        "context": "ess\\n      const errorHandlerService = errorHandler as unknown as any;\\n      const logError = errorHa"
      },
      {
        "file": "src/services/adapters/NutritionalDataAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 276,
        "column": 46,
        "context": "ess\\n      const errorHandlerService = errorHandler as unknown as any;\\n      const logError = errorHa"
      },
      {
        "file": "src/services/adapters/NutritionalDataAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 354,
        "column": 46,
        "context": "ess\\n      const errorHandlerService = errorHandler as unknown as any;\\n      const logError = errorHa"
      },
      {
        "file": "src/services/astrologizeApi.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 176,
        "column": 6,
        "context": "st requestData: LocalAstrologizeRequest = {\\n      ...defaultDateTime,\\n      ...customDateTime,\\n    }"
      },
      {
        "file": "src/services/astrologizeApi.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 177,
        "column": 6,
        "context": "logizeRequest = {\\n      ...defaultDateTime,\\n      ...customDateTime,\\n    };\\n\\n    log.info('Calling l"
      },
      {
        "file": "src/services/astrologizeApi.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 284,
        "column": 4,
        "context": ">> {\\n  return await fetchPlanetaryPositions({\\n    ...location,\\n    zodiacSystem,\\n  });\\n}\\n\\n/**\\n * Get"
      },
      {
        "file": "src/services/astrologizeApi.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 304,
        "column": 4,
        "context": " minute: date.getMinutes(),\\n    zodiacSystem,\\n    ...location,\\n  });\\n}\\n\\n/**\\n * Test the astrologize "
      },
      {
        "file": "src/services/astrologyApi.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 61,
        "column": 22,
        "context": "mber';\\n          ? position\\n          : ((position as unknown as any).degree) || 0;\\n\\n      const sig"
      },
      {
        "file": "src/services/astrologyApi.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 99,
        "column": 44,
        "context": "ccess\\n    const astroService = AstrologicalService as unknown as {\\n      getStateForDate?: (date: Da"
      },
      {
        "file": "src/services/astrologyApi.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 131,
        "column": 44,
        "context": "ccess\\n    const astroService = AstrologicalService as unknown as {\\n      getStateForDate?: (date: Da"
      },
      {
        "file": "src/services/campaign/AlgorithmPerformanceValidator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 101,
        "column": 59,
        "context": " // console.log('üöÄ Running performance benchmarks...');\\n\\n    const benchmarks: PerformanceBenchmark"
      },
      {
        "file": "src/services/campaign/AlgorithmPerformanceValidator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 107,
        "column": 22,
        "context": "ithm performance benchmarks\\n      benchmarks.push(...(await this.benchmarkAlgorithms()));\\n\\n      // "
      },
      {
        "file": "src/services/campaign/AlgorithmPerformanceValidator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 110,
        "column": 22,
        "context": "ache performance benchmarks\\n      benchmarks.push(...(await this.benchmarkCacheOperations()));\\n\\n    "
      },
      {
        "file": "src/services/campaign/AlgorithmPerformanceValidator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 113,
        "column": 22,
        "context": "base performance benchmarks\\n      benchmarks.push(...(await this.benchmarkDatabaseOperations()));\\n\\n "
      },
      {
        "file": "src/services/campaign/AlgorithmPerformanceValidator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 116,
        "column": 22,
        "context": " API performance benchmarks\\n      benchmarks.push(...(await this.benchmarkApiOperations()));\\n\\n      "
      },
      {
        "file": "src/services/campaign/AlgorithmPerformanceValidator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 119,
        "column": 22,
        "context": "/ UI performance benchmarks\\n      benchmarks.push(...(await this.benchmarkUiOperations()));\\n\\n      /"
      },
      {
        "file": "src/services/campaign/AlgorithmPerformanceValidator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 122,
        "column": 33,
        "context": "marks in history\\n      this.benchmarkHistory.push(...benchmarks);\\n\\n      // Keep only recent history"
      },
      {
        "file": "src/services/campaign/AlgorithmPerformanceValidator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 141,
        "column": 61,
        "context": "/ console.log('üíæ Validating 3-tier caching system...');\\n\\n    try {\\n      // Tier 1: Memory cache va"
      },
      {
        "file": "src/services/campaign/AlgorithmPerformanceValidator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 207,
        "column": 62,
        "context": " console.log('üîç Detecting performance regressions...');\\n\\n    const regressionTests: RegressionTestR"
      },
      {
        "file": "src/services/campaign/AlgorithmPerformanceValidator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 281,
        "column": 67,
        "context": "ole.log('üìà Validating 50% improvement maintenance...');\\n\\n    try {\\n      if (this.benchmarkHistory."
      },
      {
        "file": "src/services/campaign/AlgorithmPerformanceValidator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 388,
        "column": 15,
        "context": "Maintained,\\n      recommendations,\\n      alerts: [...this.alerts]\\n    }\\n  }\\n\\n  // Private helper met"
      },
      {
        "file": "src/services/campaign/AlgorithmPerformanceValidator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 747,
        "column": 12,
        "context": "CurrentAlerts(): PerformanceAlert[] {\\n    return [...this.alerts]\\n  }\\n\\n  /**\\n   * Clear all alerts\\n "
      },
      {
        "file": "src/services/campaign/AlgorithmPerformanceValidator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 782,
        "column": 12,
        "context": "rkHistory(): PerformanceBenchmark[] {\\n    return [...this.benchmarkHistory]\\n  }\\n}\\n"
      },
      {
        "file": "src/services/campaign/BundleSizeOptimizer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 89,
        "column": 49,
        "context": "\\n      // // console.log('üì¶ Analyzing bundle size...');\\n\\n      // Get bundle information from build"
      },
      {
        "file": "src/services/campaign/BundleSizeOptimizer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 348,
        "column": 21,
        "context": "nc('package.json', 'utf8'));\\n      const deps = { ...packageJson.dependencies, ...packageJson.devDep"
      },
      {
        "file": "src/services/campaign/BundleSizeOptimizer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 348,
        "column": 50,
        "context": "      const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };\\n\\n      // Analyz"
      },
      {
        "file": "src/services/campaign/BundleSizeOptimizer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 392,
        "column": 66,
        "context": "ole.log('üîÑ Validating lazy loading implementation...');\\n\\n      const componentsAnalyzed = await thi"
      },
      {
        "file": "src/services/campaign/BundleSizeOptimizer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 479,
        "column": 12,
        "context": "moving ${dep.name} if not essential`,\\n            ...dep.alternatives.map(alt => `Consider lighter a"
      },
      {
        "file": "src/services/campaign/BundleSizeOptimizer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 519,
        "column": 25,
        "context": "ad time',\\n      )\\n    }\\n\\n    recommendations.push(...analysis.recommendations);\\n\\n    return {\\n      "
      },
      {
        "file": "src/services/campaign/BundleSizeOptimizer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 525,
        "column": 15,
        "context": "ysis,\\n      lazyLoadingValidation,\\n      alerts: [...this.alerts],\\n      overallScore,\\n      targetC"
      },
      {
        "file": "src/services/campaign/BundleSizeOptimizer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 545,
        "column": 21,
        "context": "   if (stat.isDirectory()) {\\n          files.push(...this.getAllFiles(fullPath));\\n        } else {\\n "
      },
      {
        "file": "src/services/campaign/BundleSizeOptimizer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 759,
        "column": 12,
        "context": "Alerts(): BundleOptimizationAlert[] {\\n    return [...this.alerts]\\n  }\\n\\n  /**\\n   * Clear all alerts\\n "
      },
      {
        "file": "src/services/campaign/CampaignController.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 84,
        "column": 23,
        "context": "ed,\\n        executionTime,\\n        safetyEvents: [...this.safetyEvents]\\n      };\\n\\n      this.addSafe"
      },
      {
        "file": "src/services/campaign/CampaignController.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 120,
        "column": 23,
        "context": " 0,\\n        executionTime,\\n        safetyEvents: [...this.safetyEvents]\\n      };\\n    }\\n  }\\n\\n  /**\\n  "
      },
      {
        "file": "src/services/campaign/CampaignIntelligenceSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 347,
        "column": 6,
        "context": "s\\n    const intelligenceRecommendations = [\\n      ...ERROR_PATTERN_INTELLIGENCE.generateErrorIntelli"
      },
      {
        "file": "src/services/campaign/CampaignIntelligenceSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 348,
        "column": 6,
        "context": "rateErrorIntelligenceReport(errorPatterns);\\n      ...CAMPAIGN_PROGRESS_INTELLIGENCE.generateProgress"
      },
      {
        "file": "src/services/campaign/CampaignIntelligenceSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 302,
        "column": 49,
        "context": "\\n      analysisResult.distribution.priorityRanking as unknown as any[],\\n    );\\n\\n    const progressAn"
      },
      {
        "file": "src/services/campaign/CodeQualityAutomationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 152,
        "column": 29,
        "context": "sult.phasesFailed++;\\n          result.errors.push(...phaseResult.errors);\\n\\n          if (phase.criti"
      },
      {
        "file": "src/services/campaign/ConsoleStatementRemovalSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 81,
        "column": 6,
        "context": "batchSize: 8,\\n      selectiveRemoval: true,\\n      ...config\\n    };\\n  }\\n\\n  /**\\n   * Execute console s"
      },
      {
        "file": "src/services/campaign/ConsoleStatementRemovalSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 89,
        "column": 67,
        "context": ".log('üîá Starting Console Statement Removal System...');\\n\\n    try {\\n      // Pre-execution validatio"
      },
      {
        "file": "src/services/campaign/ConsoleStatementRemovalSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 135,
        "column": 80,
        "context": "ing batch processing for console statement removal...');\\n\\n    const batchResult: BatchRemovalResult "
      },
      {
        "file": "src/services/campaign/ConsoleStatementRemovalSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 162,
        "column": 71,
        "context": ".log(`\\nüîÑ Processing batch ${i + 1}/${batchCount}...`);\\n\\n        try {\\n          const batchConfig "
      },
      {
        "file": "src/services/campaign/ConsoleStatementRemovalSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 166,
        "column": 12,
        "context": "try {\\n          const batchConfig = {\\n            ...this.config;\\n            maxFiles: this.config."
      },
      {
        "file": "src/services/campaign/ConsoleStatementRemovalSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 186,
        "column": 78,
        "context": "g('‚è∏Ô∏è Pausing 2 seconds between batches for safety...');\\n            await this.sleep(2000);\\n       "
      },
      {
        "file": "src/services/campaign/ConsoleStatementRemovalSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 216,
        "column": 80,
        "context": "yzing console statements for critical preservation...');\\n\\n    const statements: ConsoleStatement[] ="
      },
      {
        "file": "src/services/campaign/ConsoleStatementRemovalSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 226,
        "column": 24,
        "context": "atements(file, content),;\\n        statements.push(...fileStatements);\\n      } catch (error) {\\n      "
      },
      {
        "file": "src/services/campaign/ConsoleStatementRemovalSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 358,
        "column": 19,
        "context": "try.name !== 'node_modules') {\\n        files.push(...this.getAllSourceFiles(fullPath));\\n      } else"
      },
      {
        "file": "src/services/campaign/ConsoleStatementRemovalSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 465,
        "column": 31,
        "context": "Statements.length;\\n      result.preservedFiles = [...new Set(criticalStatements.map(s => s.file))];\\n"
      },
      {
        "file": "src/services/campaign/ConsoleStatementRemovalSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 496,
        "column": 66,
        "context": "ole.log('üîç Validating build after console removal...');\\n\\n      const startTime = Date.now();\\n      "
      },
      {
        "file": "src/services/campaign/DependencySecurityMonitor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 183,
        "column": 50,
        "context": "          result.updateReport.appliedUpdates.push(...securityUpdates);\\n        } catch (error) {\\n   "
      },
      {
        "file": "src/services/campaign/DependencySecurityMonitor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 196,
        "column": 50,
        "context": "          result.updateReport.appliedUpdates.push(...safeUpdates);\\n        } catch (error) {\\n       "
      },
      {
        "file": "src/services/campaign/EmergencyRecoverySystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 71,
        "column": 77,
        "context": "nitiating emergency rollback with advanced options...');\\n\\n    try {\\n      // Create backup before re"
      },
      {
        "file": "src/services/campaign/EmergencyRecoverySystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 206,
        "column": 60,
        "context": "/ console.log('üîÑ Step 1: Resetting git repository...');\\n      const resetCommit = options.resetToCo"
      },
      {
        "file": "src/services/campaign/EmergencyRecoverySystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 222,
        "column": 61,
        "context": " console.log('üßπ Step 2: Clearing campaign metrics...');\\n      if (!options.preserveMetrics) {\\n     "
      },
      {
        "file": "src/services/campaign/EmergencyRecoverySystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 229,
        "column": 53,
        "context": "   // // console.log('üóëÔ∏è Step 3: Managing stashes...');\\n      if (!options.preserveStashes) {\\n     "
      },
      {
        "file": "src/services/campaign/EmergencyRecoverySystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 235,
        "column": 70,
        "context": "log('üèóÔ∏è Step 4: Resetting campaign infrastructure...');\\n      await this.resetCampaignInfrastructur"
      },
      {
        "file": "src/services/campaign/EmergencyRecoverySystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 239,
        "column": 59,
        "context": "// console.log('‚úÖ Step 5: Validating nuclear reset...');\\n      if (options.validateAfterRecovery !=="
      },
      {
        "file": "src/services/campaign/EmergencyRecoverySystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 292,
        "column": 85,
        "context": "g selective recovery for ${targets.length} targets...`);\\n\\n    try {\\n      // If no stash specified, "
      },
      {
        "file": "src/services/campaign/EmergencyRecoverySystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 400,
        "column": 59,
        "context": "// console.log('üîç Validating git repository state...');\\n      const gitValidation = await this.vali"
      },
      {
        "file": "src/services/campaign/EmergencyRecoverySystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 403,
        "column": 27,
        "context": "tValidation.success) {\\n        result.errors.push(...gitValidation.errors);\\n        result.success ="
      },
      {
        "file": "src/services/campaign/EmergencyRecoverySystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 406,
        "column": 27,
        "context": "ccess = false;\\n      }\\n      result.warnings.push(...gitValidation.warnings);\\n\\n      // 2. Count res"
      },
      {
        "file": "src/services/campaign/EmergencyRecoverySystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 412,
        "column": 51,
        "context": "     // // console.log('üîç Validating build system...');\\n      try {\\n        execSync('yarn build', "
      },
      {
        "file": "src/services/campaign/EmergencyRecoverySystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 430,
        "column": 50,
        "context": "      // // console.log('üîç Validating test system...');\\n      try {\\n        execSync('yarn test --r"
      },
      {
        "file": "src/services/campaign/EmergencyRecoverySystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 448,
        "column": 66,
        "context": "ole.log('üîç Checking for corruption after recovery...');\\n      const corruptionReport = await this.d"
      },
      {
        "file": "src/services/campaign/EmergencyRecoverySystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 536,
        "column": 12,
        "context": " getRecoveryEvents(): SafetyEvent[] {\\n    return [...this.recoveryEvents]\\n  }\\n\\n  // Private helper m"
      },
      {
        "file": "src/services/campaign/EnhancedErrorFixerIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 56,
        "column": 71,
        "context": "('üöÄ Starting Enhanced TypeScript Error Fixer v3.0...');\\n\\n    // Prepare command arguments\\n    const"
      },
      {
        "file": "src/services/campaign/EnhancedErrorFixerIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 101,
        "column": 93,
        "context": "ocessing with ${options.batchSize} files per batch...`);\\n\\n    const results: FixerResult[] = [];\\n   "
      },
      {
        "file": "src/services/campaign/EnhancedErrorFixerIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 113,
        "column": 78,
        "context": "\udce6 Processing Batch ${batchNumber}/${maxIterations}...`),\\n\\n      // Check execution time limit\\n      "
      },
      {
        "file": "src/services/campaign/EnhancedErrorFixerIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 171,
        "column": 92,
        "context": "uild validation after ${totalFilesProcessed} files...`);\\n        const buildValid = await this.valid"
      },
      {
        "file": "src/services/campaign/EnhancedErrorFixerIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 238,
        "column": 50,
        "context": "      const fullArgs = [this.ENHANCED_FIXER_PATH, ...args],;\\n\\n      // // console.log(`üîß Executing:"
      },
      {
        "file": "src/services/campaign/EnhancedErrorFixerIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 276,
        "column": 12,
        "context": "\\n        } else {\\n          resolve({\\n            ...result;\\n            success: false,\\n           "
      },
      {
        "file": "src/services/campaign/EnhancedErrorFixerIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 278,
        "column": 21,
        "context": "\\n            success: false,\\n            errors: [...result.errors, `Process exited with code ${code"
      },
      {
        "file": "src/services/campaign/EnhancedErrorFixerIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 334,
        "column": 20,
        "context": "g);\\n    if (warningMatches) {\\n      warnings.push(...warningMatches);\\n    }\\n\\n    // Extract errors\\n "
      },
      {
        "file": "src/services/campaign/EnhancedErrorFixerIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 340,
        "column": 18,
        "context": "n]*/g);\\n    if (errorMatches) {\\n      errors.push(...errorMatches);\\n    }\\n\\n    return {\\n      succes"
      },
      {
        "file": "src/services/campaign/EnhancedErrorFixerIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 359,
        "column": 44,
        "context": "try {\\n      // // console.log('üîç Validating build...');\\n\\n      const startTime = Date.now();\\n      "
      },
      {
        "file": "src/services/campaign/EnhancedErrorFixerIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 402,
        "column": 65,
        "context": "sole.log('üìä Fetching Enhanced Error Fixer metrics...');\\n\\n      const result = await this.runFixerCo"
      },
      {
        "file": "src/services/campaign/EnhancedErrorFixerIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 426,
        "column": 47,
        "context": " {\\n      // // console.log('üõ°Ô∏è  Validating safety...');\\n\\n      const result = await this.runFixerCo"
      },
      {
        "file": "src/services/campaign/EnhancedErrorFixerIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 456,
        "column": 80,
        "context": "ecuting Enhanced Error Fixer with safety protocols...');\\n\\n    // First, validate safety\\n    const sa"
      },
      {
        "file": "src/services/campaign/EnterpriseIntelligenceGenerator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 98,
        "column": 69,
        "context": "og('üß† Starting enterprise intelligence generation...');\\n\\n    const results: GenerationResult[] = []"
      },
      {
        "file": "src/services/campaign/EnterpriseIntelligenceGenerator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 184,
        "column": 30,
        "context": "genceCapability[] {\\n    const baseCapabilities = [...template.capabilities];\\n    const exportType = "
      },
      {
        "file": "src/services/campaign/EnterpriseIntelligenceGenerator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 369,
        "column": 6,
        "context": "cacheResults: true,\\n      logLevel: 'info',\\n      ...config\\n    };\\n\\n    this.analytics = {\\n      usa"
      },
      {
        "file": "src/services/campaign/EnterpriseIntelligenceGenerator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 514,
        "column": 13,
        "context": "nalytics(): ${systemName}Analytics {\\n    return { ...this.analytics };\\n  }\\n\\n  /**\\n   * Update config"
      },
      {
        "file": "src/services/campaign/EnterpriseIntelligenceGenerator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 521,
        "column": 20,
        "context": "${systemName}Config>): void {\\n    this.config = { ...this.config, ...newConfig };\\n  }\\n\\n  /**\\n   * Cl"
      },
      {
        "file": "src/services/campaign/EnterpriseIntelligenceGenerator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 521,
        "column": 36,
        "context": "fig>): void {\\n    this.config = { ...this.config, ...newConfig };\\n  }\\n\\n  /**\\n   * Clear cache\\n   */\\n"
      },
      {
        "file": "src/services/campaign/EnterpriseIntelligenceGenerator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 978,
        "column": 6,
        "context": "',\\n      '// Add to your main application',\\n      ...results\\n        .slice(0, 5)\\n        .map(\\n    "
      },
      {
        "file": "src/services/campaign/EnterpriseIntelligenceGenerator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 988,
        "column": 6,
        "context": ",\\n      'const _intelligenceSystems = [',,;\\n      ...results.slice(0, 5).map(r => `  ${r.systemName."
      },
      {
        "file": "src/services/campaign/EnterpriseIntelligenceGenerator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 995,
        "column": 6,
        "context": "to your dashboard:',\\n      '```typescript',\\n      ...results\\n        .slice(0, 3)\\n        .map(r => "
      },
      {
        "file": "src/services/campaign/EnterpriseIntelligenceGenerator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1004,
        "column": 6,
        "context": "e systems via API:',\\n      '```typescript',\\n      ...results\\n        .slice(0, 3)\\n        .map(r => "
      },
      {
        "file": "src/services/campaign/EnterpriseIntelligenceGenerator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1012,
        "column": 6,
        "context": ",\\n      '## System Capabilities',\\n      '',\\n      ...results\\n        .slice(0, 10)\\n        .map(r =>"
      },
      {
        "file": "src/services/campaign/ExplicitAnyEliminationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 60,
        "column": 66,
        "context": "e.log('üéØ Starting Explicit-Any Elimination System...');\\n\\n    // Get baseline count\\n    const initia"
      },
      {
        "file": "src/services/campaign/ExplicitAnyEliminationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 117,
        "column": 75,
        "context": " Starting systematic explicit-any batch processing...`);\\n\\n    const results: ExplicitAnyResult[] = ["
      },
      {
        "file": "src/services/campaign/ExplicitAnyEliminationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 132,
        "column": 91,
        "context": "Explicit-Any Batch ${batchNumber}/${maxIterations}...`),\\n\\n      // Check execution time limit\\n      "
      },
      {
        "file": "src/services/campaign/ExplicitAnyEliminationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 268,
        "column": 54,
        "context": "  const fullArgs = [this.EXPLICIT_ANY_FIXER_PATH, ...args],;\\n\\n      // // console.log(`üîß Executing:"
      },
      {
        "file": "src/services/campaign/ExplicitAnyEliminationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 346,
        "column": 20,
        "context": "g);\\n    if (warningMatches) {\\n      warnings.push(...warningMatches);\\n    }\\n\\n    // Extract errors\\n "
      },
      {
        "file": "src/services/campaign/ExplicitAnyEliminationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 352,
        "column": 18,
        "context": "n]*/g);\\n    if (errorMatches) {\\n      errors.push(...errorMatches);\\n    }\\n\\n    return {\\n      succes"
      },
      {
        "file": "src/services/campaign/ExplicitAnyEliminationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 369,
        "column": 44,
        "context": "try {\\n      // // console.log('üîç Validating build...');\\n\\n      const startTime = Date.now();\\n      "
      },
      {
        "file": "src/services/campaign/ExplicitAnyEliminationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 425,
        "column": 10,
        "context": " 100\\n            : 0,\\n\\n        return {\\n          ...progress;\\n          totalExplicitAnyRemaining: "
      },
      {
        "file": "src/services/campaign/ExplicitAnyEliminationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 464,
        "column": 8,
        "context": "nst updatedProgress: CampaignProgress = {\\n        ...progress;\\n        totalExplicitAnyRemaining: cu"
      },
      {
        "file": "src/services/campaign/ExplicitAnyEliminationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 528,
        "column": 74,
        "context": "\udfaf Continuing 75.5% Explicit-Any Reduction Campaign...');\\n\\n    // Show current progress\\n    const pro"
      },
      {
        "file": "src/services/campaign/ExportTransformationEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 130,
        "column": 6,
        "context": ",\\n      maxRetries: 3,\\n      dryRun: false,\\n      ...config\\n    };\\n\\n    this.analyzer = new UnusedEx"
      },
      {
        "file": "src/services/campaign/ExportTransformationEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 152,
        "column": 65,
        "context": "le.log('üöÄ Starting Export Transformation Campaign...\\n');\\n\\n    const startTime = Date.now();\\n\\n    t"
      },
      {
        "file": "src/services/campaign/ExportTransformationEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 158,
        "column": 61,
        "context": " console.log('üìä Phase 1: Analyzing unused exports...');\\n      const analysisResult = await this.per"
      },
      {
        "file": "src/services/campaign/ExportTransformationEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 162,
        "column": 68,
        "context": "e.log('üìã Phase 2: Planning transformation batches...');\\n      const batches = await this.planTransf"
      },
      {
        "file": "src/services/campaign/ExportTransformationEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 166,
        "column": 65,
        "context": "sole.log('üõ°Ô∏è  Phase 3: Preparing safety protocols...');\\n      await this.prepareSafetyProtocols();\\n"
      },
      {
        "file": "src/services/campaign/ExportTransformationEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 170,
        "column": 68,
        "context": "e.log('‚ö° Phase 4: Executing transformation batches...');\\n      const results = await this.executeBat"
      },
      {
        "file": "src/services/campaign/ExportTransformationEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 174,
        "column": 64,
        "context": "nsole.log('‚úÖ Phase 5: Final validation and cleanup...');\\n      await this.performFinalValidation();\\n"
      },
      {
        "file": "src/services/campaign/ExportTransformationEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 235,
        "column": 17,
        "context": "ority.HIGH;\\n      'high',\\n    );\\n    batches.push(...highPriorityBatches);\\n\\n    // Create batches fo"
      },
      {
        "file": "src/services/campaign/ExportTransformationEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 243,
        "column": 17,
        "context": "y.MEDIUM;\\n      'medium',\\n    );\\n    batches.push(...mediumPriorityBatches);\\n\\n    // Create batches "
      },
      {
        "file": "src/services/campaign/ExportTransformationEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 251,
        "column": 17,
        "context": "riority.LOW;\\n      'low',\\n    ),\\n    batches.push(...lowPriorityBatches);\\n\\n    // // console.log(`‚úÖ "
      },
      {
        "file": "src/services/campaign/ExportTransformationEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 450,
        "column": 80,
        "context": "DRY RUN: Simulating intelligence system generation...');\\n        result.systemsGenerated = batch.tra"
      },
      {
        "file": "src/services/campaign/ExportTransformationEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 454,
        "column": 60,
        "context": " // console.log('‚ö° Generating intelligence systems...');\\n        const generationResults = await thi"
      },
      {
        "file": "src/services/campaign/ExportTransformationEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 463,
        "column": 63,
        "context": " console.log('üîç Validating build after generation...');\\n        const validation = await this.valid"
      },
      {
        "file": "src/services/campaign/ExportTransformationEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 495,
        "column": 51,
        "context": "         // // console.log('üîÑ Attempting rollback...');\\n          // ‚úÖ Pattern MM-1: Safe method ca"
      },
      {
        "file": "src/services/campaign/ExportTransformationEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 533,
        "column": 61,
        "context": " console.log('üîç Performing final build validation...');\\n      const buildValidation = await this.va"
      },
      {
        "file": "src/services/campaign/ExportTransformationEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 541,
        "column": 62,
        "context": "/ console.log('üß™ Performing final test validation...');\\n        const testValidation = await this.v"
      },
      {
        "file": "src/services/campaign/ExportTransformationEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 640,
        "column": 80,
        "context": " failure detected, initiating emergency procedures...');\\n\\n    try {\\n      if (!this.config.dryRun) {"
      },
      {
        "file": "src/services/campaign/ExportTransformationEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 804,
        "column": 13,
        "context": " getConfig(): TransformationConfig {\\n    return { ...this.config };\\n  }\\n\\n  /**\\n   * Get transformati"
      },
      {
        "file": "src/services/campaign/ExportTransformationEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 811,
        "column": 12,
        "context": "rmationLog(): TransformationError[] {\\n    return [...this.transformationLog]\\n  }\\n\\n  /**\\n   * Clear t"
      },
      {
        "file": "src/services/campaign/FinalValidationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 150,
        "column": 54,
        "context": "// // console.log('üîß Validating TypeScript Errors...');\\n\\n    try {\\n      const output = execSync('y"
      },
      {
        "file": "src/services/campaign/FinalValidationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 166,
        "column": 14,
        "context": "nt} TypeScript compilation errors`,\\n              ...errorLines.slice(0, 10).map(line => `  ${line.t"
      },
      {
        "file": "src/services/campaign/FinalValidationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 167,
        "column": 14,
        "context": ".map(line => `  ${line.trim()}`),,;\\n              ...(errorLines.length > 10\\n                ? [`  ."
      },
      {
        "file": "src/services/campaign/FinalValidationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 168,
        "column": 22,
        "context": " ...(errorLines.length > 10\\n                ? [`  ... and ${errorLines.length - 10} more errors`]\\n  "
      },
      {
        "file": "src/services/campaign/FinalValidationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 205,
        "column": 10,
        "context": "rCount} TypeScript compilation errors`,\\n          ...errorLines.slice(0, 10).map((line: string) => `"
      },
      {
        "file": "src/services/campaign/FinalValidationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 206,
        "column": 10,
        "context": "((line: string) => `  ${line.trim()}`),\\n          ...(errorLines.length > 10 ? [`  ... and ${errorLi"
      },
      {
        "file": "src/services/campaign/FinalValidationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 206,
        "column": 43,
        "context": "()}`),\\n          ...(errorLines.length > 10 ? [`  ... and ${errorLines.length - 10} more errors`] : "
      },
      {
        "file": "src/services/campaign/FinalValidationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 220,
        "column": 52,
        "context": "  // // console.log('‚ú® Validating Linting Warnings...');\\n\\n    try {\\n      const output = execSync('y"
      },
      {
        "file": "src/services/campaign/FinalValidationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 245,
        "column": 14,
        "context": "ment warnings: ${consoleWarnings}`,\\n              ...warningLines.slice(0, 5).map(line => `  ${line."
      },
      {
        "file": "src/services/campaign/FinalValidationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 246,
        "column": 14,
        "context": ".map(line => `  ${line.trim()}`),,;\\n              ...(warningLines.length > 5\\n                ? [`  "
      },
      {
        "file": "src/services/campaign/FinalValidationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 247,
        "column": 22,
        "context": "...(warningLines.length > 5\\n                ? [`  ... and ${warningLines.length - 5} more warnings`]"
      },
      {
        "file": "src/services/campaign/FinalValidationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 283,
        "column": 10,
        "context": "ound ${warningCount} linting warnings`,\\n          ...warningLines.slice(0, 10).map((line: string) =>"
      },
      {
        "file": "src/services/campaign/FinalValidationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 295,
        "column": 68,
        "context": "log('üß† Validating Enterprise Intelligence Systems...');\\n\\n    try {\\n      const output = execSync('g"
      },
      {
        "file": "src/services/campaign/FinalValidationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 362,
        "column": 55,
        "context": "/ // console.log('‚ö° Validating Performance Targets...');\\n\\n    try {\\n      // Measure build time\\n    "
      },
      {
        "file": "src/services/campaign/FinalValidationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 415,
        "column": 12,
        "context": "lIssues = !performanceOk;\\n        ? [\\n            ...(buildTime >= this.BUILD_TIME_TARGET\\n          "
      },
      {
        "file": "src/services/campaign/FinalValidationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 418,
        "column": 12,
        "context": "e.toFixed(1)}s`]\\n              : []),\\n            ...(memoryUsage >= this.MEMORY_USAGE_TARGET\\n      "
      },
      {
        "file": "src/services/campaign/FinalValidationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 452,
        "column": 63,
        "context": "sole.log('üèóÔ∏è  Validating Build and Test Stability...');\\n\\n    let buildSuccess = false;\\n    let test"
      },
      {
        "file": "src/services/campaign/ImportCleanupSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 132,
        "column": 27,
        "context": "portsInFile(filePath);\\n        unusedImports.push(...fileUnusedImports);\\n      } catch (error) {\\n   "
      },
      {
        "file": "src/services/campaign/ImportCleanupSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 459,
        "column": 6,
        "context": ".length - 1].index;\\n\\n    const newLines = [\\n      ...lines.slice(0, firstImportIndex),\\n      ...orga"
      },
      {
        "file": "src/services/campaign/ImportCleanupSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 460,
        "column": 6,
        "context": "\\n      ...lines.slice(0, firstImportIndex),\\n      ...organizedImports;\\n      ...lines.slice(lastImpo"
      },
      {
        "file": "src/services/campaign/ImportCleanupSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 461,
        "column": 6,
        "context": "rstImportIndex),\\n      ...organizedImports;\\n      ...lines.slice(lastImportIndex + 1)\\n    ];\\n\\n    fs"
      },
      {
        "file": "src/services/campaign/ImportCleanupSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 495,
        "column": 23,
        "context": "es.groupExternalImports) {\\n        organized.push(...externalTypeImports.map(imp => imp.line));\\n    "
      },
      {
        "file": "src/services/campaign/ImportCleanupSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 499,
        "column": 23,
        "context": "nd value imports\\n        }\\n        organized.push(...externalValueImports.map(imp => imp.line));\\n\\n  "
      },
      {
        "file": "src/services/campaign/ImportCleanupSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 511,
        "column": 23,
        "context": "es.groupInternalImports) {\\n        organized.push(...internalTypeImports.map(imp => imp.line));\\n    "
      },
      {
        "file": "src/services/campaign/ImportCleanupSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 515,
        "column": 23,
        "context": "nd value imports\\n        }\\n        organized.push(...internalValueImports.map(imp => imp.line));\\n   "
      },
      {
        "file": "src/services/campaign/ImportCleanupSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 520,
        "column": 23,
        "context": "es.groupExternalImports) {\\n        organized.push(...sortImports(externalImports).map(imp => imp.lin"
      },
      {
        "file": "src/services/campaign/ImportCleanupSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 527,
        "column": 23,
        "context": "es.groupInternalImports) {\\n        organized.push(...sortImports(internalImports).map(imp => imp.lin"
      },
      {
        "file": "src/services/campaign/ImportCleanupSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 629,
        "column": 23,
        "context": "eanupResult {\\n    return {\\n      filesProcessed: [...total.filesProcessed, ...batch.filesProcessed],"
      },
      {
        "file": "src/services/campaign/ImportCleanupSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 629,
        "column": 48,
        "context": "{\\n      filesProcessed: [...total.filesProcessed, ...batch.filesProcessed],\\n      unusedImportsRemov"
      },
      {
        "file": "src/services/campaign/ImportCleanupSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 634,
        "column": 15,
        "context": "ed && batch.buildValidationPassed,\\n      errors: [...total.errors, ...batch.errors],\\n      warnings:"
      },
      {
        "file": "src/services/campaign/ImportCleanupSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 634,
        "column": 32,
        "context": "ValidationPassed,\\n      errors: [...total.errors, ...batch.errors],\\n      warnings: [...total.warnin"
      },
      {
        "file": "src/services/campaign/ImportCleanupSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 635,
        "column": 17,
        "context": ".total.errors, ...batch.errors],\\n      warnings: [...total.warnings, ...batch.warnings]\\n    };\\n  }\\n}"
      },
      {
        "file": "src/services/campaign/ImportCleanupSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 635,
        "column": 36,
        "context": "atch.errors],\\n      warnings: [...total.warnings, ...batch.warnings]\\n    };\\n  }\\n}\\n\\n/**\\n * Default co"
      },
      {
        "file": "src/services/campaign/InfrastructurePreparation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 100,
        "column": 82,
        "context": "ng Infrastructure Preparation and Safety Protocols...\\n');\\n\\n    const status: InfrastructureStatus ="
      },
      {
        "file": "src/services/campaign/InfrastructurePreparation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 141,
        "column": 71,
        "context": "('üîß Validating Dual ESLint Configuration Strategy...');\\n\\n    const fastConfigPath = join(this.proje"
      },
      {
        "file": "src/services/campaign/InfrastructurePreparation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 227,
        "column": 77,
        "context": "etting up Automated Backup and Rollback Mechanisms...');\\n\\n    const backupSystem: BackupSystem = {\\n "
      },
      {
        "file": "src/services/campaign/InfrastructurePreparation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 291,
        "column": 87,
        "context": " Build Stability Monitoring and Checkpoint Systems...');\\n\\n    const buildMonitoring: BuildMonitoring"
      },
      {
        "file": "src/services/campaign/InfrastructurePreparation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 400,
        "column": 91,
        "context": "h Processing Infrastructure with Safety Validation...');\\n\\n    const batchProcessing: BatchProcessing"
      },
      {
        "file": "src/services/campaign/InfrastructurePreparation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 459,
        "column": 67,
        "context": "og(\\`üîç Validating batch of \\${files.length} files...\\`);\\n\\n  try {\\n    // Syntax check\\n    // // con"
      },
      {
        "file": "src/services/campaign/InfrastructurePreparation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 463,
        "column": 44,
        "context": "check\\n    // // console.log('   üìù Checking syntax...');\\n    execSync('yarn tsc --noEmit --skipLibCh"
      },
      {
        "file": "src/services/campaign/InfrastructurePreparation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 467,
        "column": 42,
        "context": "e check\\n    // // console.log('   üîç Type checking...');\\n    execSync('yarn tsc --noEmit', { stdio: "
      },
      {
        "file": "src/services/campaign/InfrastructurePreparation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 471,
        "column": 43,
        "context": "d test\\n    // // console.log('   üèóÔ∏è Testing build...');\\n    execSync('yarn build', { stdio: 'pipe' "
      },
      {
        "file": "src/services/campaign/InfrastructurePreparation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 475,
        "column": 35,
        "context": " // Lint check\\n    // // console.log('   ‚ú® Linting...');\\n    execSync('yarn lint:quick', { stdio: 'p"
      },
      {
        "file": "src/services/campaign/InfrastructurePreparation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 499,
        "column": 85,
        "context": "p Progress Tracking and Metrics Collection Systems...');\\n\\n    const progressTracking: ProgressTracki"
      },
      {
        "file": "src/services/campaign/LintingFormattingSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 177,
        "column": 22,
        "context": "ESLintOutput(eslintOutput);\\n      violations.push(...parsedViolations);\\n    } catch (error) {\\n      "
      },
      {
        "file": "src/services/campaign/LintingFormattingSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 432,
        "column": 27,
        "context": "= content.split('\\n');\\n    const modifiedLines = [...lines];\\n    let fixesApplied = 0;\\n\\n    const { "
      },
      {
        "file": "src/services/campaign/LintingFormattingSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 598,
        "column": 23,
        "context": "ttingResult {\\n    return {\\n      filesProcessed: [...total.filesProcessed, ...batch.filesProcessed],"
      },
      {
        "file": "src/services/campaign/LintingFormattingSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 598,
        "column": 48,
        "context": "{\\n      filesProcessed: [...total.filesProcessed, ...batch.filesProcessed],\\n      lintingViolationsF"
      },
      {
        "file": "src/services/campaign/LintingFormattingSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 603,
        "column": 15,
        "context": "ed && batch.buildValidationPassed,\\n      errors: [...total.errors, ...batch.errors],\\n      warnings:"
      },
      {
        "file": "src/services/campaign/LintingFormattingSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 603,
        "column": 32,
        "context": "ValidationPassed,\\n      errors: [...total.errors, ...batch.errors],\\n      warnings: [...total.warnin"
      },
      {
        "file": "src/services/campaign/LintingFormattingSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 604,
        "column": 17,
        "context": ".total.errors, ...batch.errors],\\n      warnings: [...total.warnings, ...batch.warnings],\\n      viola"
      },
      {
        "file": "src/services/campaign/LintingFormattingSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 604,
        "column": 36,
        "context": "atch.errors],\\n      warnings: [...total.warnings, ...batch.warnings],\\n      violationBreakdown: {\\n  "
      },
      {
        "file": "src/services/campaign/LintingWarningAnalyzer.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 30,
        "column": 46,
        "context": ") {\\n    console.log('üîç Analyzing linting warnings...');\\n    try {\\n      // Try to get linting outpu"
      },
      {
        "file": "src/services/campaign/LintingWarningAnalyzer.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 63,
        "column": 22,
        "context": "FileContent(file, content);\\n        warnings.push(...fileWarnings);\\n      } catch (error) {\\n        "
      },
      {
        "file": "src/services/campaign/LintingWarningAnalyzer.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 82,
        "column": 19,
        "context": "try.name !== 'node_modules') {\\n        files.push(...this.getAllSourceFiles(fullPath));\\n      } else"
      },
      {
        "file": "src/services/campaign/LintingWarningAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 80,
        "column": 52,
        "context": "  // // console.log('üîç Analyzing linting warnings...');\\n\\n    try {\\n      // Try to get linting outp"
      },
      {
        "file": "src/services/campaign/LintingWarningAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 119,
        "column": 22,
        "context": "ileContent(file, content),;\\n        warnings.push(...fileWarnings);\\n      } catch (error) {\\n        "
      },
      {
        "file": "src/services/campaign/LintingWarningAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 144,
        "column": 19,
        "context": "try.name !== 'node_modules') {\\n        files.push(...this.getAllSourceFiles(fullPath));\\n      } else"
      },
      {
        "file": "src/services/campaign/MakefileIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 114,
        "column": 48,
        "context": "[\\n        '@echo 'üîç Validating Phase 1 completion...'';\\n        '@ERRORS=$$(yarn tsc --noEmit --ski"
      },
      {
        "file": "src/services/campaign/MakefileIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 130,
        "column": 48,
        "context": "[\\n        '@echo 'üîç Validating Phase 2 completion...'';\\n        '@WARNINGS=$$(yarn lint 2>&1 | grep"
      },
      {
        "file": "src/services/campaign/MakefileIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 146,
        "column": 48,
        "context": "[\\n        '@echo 'üîç Validating Phase 3 completion...'';\\n        '@SYSTEMS=$$(grep -r 'INTELLIGENCE_"
      },
      {
        "file": "src/services/campaign/MakefileIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 162,
        "column": 48,
        "context": "[\\n        '@echo 'üîç Validating Phase 4 completion...'';\\n        '@BUILD_TIME=$$(time yarn build 2>&"
      },
      {
        "file": "src/services/campaign/MakefileIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 204,
        "column": 50,
        "context": "        '@echo 'üéØ Determining next campaign phase...'';\\n        '@if ! make campaign-validate-phase"
      },
      {
        "file": "src/services/campaign/MakefileIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 279,
        "column": 43,
        "context": "o ''',\\n        '@echo '1. Checking for git stashes...'';\\n        '@git stash list | head -5',\\n      "
      },
      {
        "file": "src/services/campaign/MetricsCollectionSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 121,
        "column": 53,
        "context": " // // console.log('üìä Collecting metrics snapshot...');\\n\\n    const metrics = await this.collectDeta"
      },
      {
        "file": "src/services/campaign/MetricsCollectionSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 590,
        "column": 12,
        "context": "  getSnapshots(): MetricsSnapshot[] {\\n    return [...this.snapshots]\\n  }\\n\\n  getLatestSnapshot(): Met"
      },
      {
        "file": "src/services/campaign/MilestoneValidationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 768,
        "column": 17,
        "context": " failedMilestones.forEach(m => {\\n      steps.push(...m.recommendations);\\n    });\\n\\n    return [...new"
      },
      {
        "file": "src/services/campaign/MilestoneValidationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 771,
        "column": 12,
        "context": ".push(...m.recommendations);\\n    });\\n\\n    return [...new Set(steps)]; // Remove duplicates\\n  }\\n\\n  pr"
      },
      {
        "file": "src/services/campaign/MilestoneValidationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 782,
        "column": 17,
        "context": " failedMilestones.forEach(m => {\\n      steps.push(...m.recommendations);\\n    });\\n\\n    return [...new"
      },
      {
        "file": "src/services/campaign/MilestoneValidationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 785,
        "column": 12,
        "context": ".push(...m.recommendations);\\n    });\\n\\n    return [...new Set(steps)];\\n  }\\n\\n  private generatePhase3N"
      },
      {
        "file": "src/services/campaign/MilestoneValidationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 796,
        "column": 17,
        "context": " failedMilestones.forEach(m => {\\n      steps.push(...m.recommendations);\\n    });\\n\\n    return [...new"
      },
      {
        "file": "src/services/campaign/MilestoneValidationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 799,
        "column": 12,
        "context": ".push(...m.recommendations);\\n    });\\n\\n    return [...new Set(steps)];\\n  }\\n\\n  private generatePhase4N"
      },
      {
        "file": "src/services/campaign/MilestoneValidationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 810,
        "column": 17,
        "context": " failedMilestones.forEach(m => {\\n      steps.push(...m.recommendations);\\n    });\\n\\n    return [...new"
      },
      {
        "file": "src/services/campaign/MilestoneValidationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 813,
        "column": 12,
        "context": ".push(...m.recommendations);\\n    });\\n\\n    return [...new Set(steps)];\\n  }\\n\\n  /**\\n   * Validate all p"
      },
      {
        "file": "src/services/campaign/MilestoneValidationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 820,
        "column": 67,
        "context": ".log('üîç Running comprehensive campaign validation...');\\n\\n    const results = await Promise.all([\\n  "
      },
      {
        "file": "src/services/campaign/MilestoneValidationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 845,
        "column": 12,
        "context": "ionHistory(): MilestoneValidation[] {\\n    return [...this.validationHistory]\\n  }\\n\\n  /**\\n   * Export "
      },
      {
        "file": "src/services/campaign/MilestoneValidationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 709,
        "column": 22,
        "context": " const bundleSize: number =\\n      Number(((metrics as unknown as any).buildMetrics ).bundleSize) || "
      },
      {
        "file": "src/services/campaign/PerformanceMonitoringSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 83,
        "column": 48,
        "context": "{\\n      // // console.log('üìä Measuring build time...');\\n\\n      // Use time command to measure build"
      },
      {
        "file": "src/services/campaign/PerformanceMonitoringSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 478,
        "column": 15,
        "context": "estamp: new Date(),\\n      metrics,\\n      alerts: [...this.alerts],\\n      regressionDetected,\\n      o"
      },
      {
        "file": "src/services/campaign/PerformanceMonitoringSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 546,
        "column": 12,
        "context": "CurrentAlerts(): PerformanceAlert[] {\\n    return [...this.alerts]\\n  }\\n\\n  /**\\n   * Clear all alerts\\n "
      },
      {
        "file": "src/services/campaign/PerformanceMonitoringSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 561,
        "column": 12,
        "context": "anceHistory(): PerformanceMetrics[] {\\n    return [...this.performanceHistory]\\n  }\\n}\\n"
      },
      {
        "file": "src/services/campaign/ProgressReportingSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 187,
        "column": 74,
        "context": "\udcca Generating comprehensive campaign summary report...');\\n\\n    const [currentMetrics, phaseValidation"
      },
      {
        "file": "src/services/campaign/ProgressReportingSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 233,
        "column": 75,
        "context": " Generating phase completion report for ${phaseId}...`);\\n\\n    const currentMetrics = await this.metr"
      },
      {
        "file": "src/services/campaign/ProgressReportingSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 281,
        "column": 55,
        "context": "/ // console.log('üìä Generating visualization data...');\\n\\n    const snapshots = this.metricsCollecto"
      },
      {
        "file": "src/services/campaign/ProgressReportingSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 792,
        "column": 21,
        "context": "blockers.join(', ')\\n    ]),\\n\\n    return [headers, ...rows].map(row => row.join(',')).join('\\n'),;\\n  "
      },
      {
        "file": "src/services/campaign/ProgressReportingSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 879,
        "column": 12,
        "context": "tHistory(): CampaignSummaryReport[] {\\n    return [...this.reportHistory]\\n  }\\n\\n  /**\\n   * Clear repor"
      },
      {
        "file": "src/services/campaign/ProgressTracker.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 471,
        "column": 12,
        "context": "MetricsHistory(): ProgressMetrics[] {\\n    return [...this.metricsHistory]\\n  }\\n\\n  /**\\n   * Get metric"
      },
      {
        "file": "src/services/campaign/SafetyProtocol.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 213,
        "column": 81,
        "context": "zing ${files.length} files for corruption patterns...`);\\n\\n    for (const filePath of files) {\\n      "
      },
      {
        "file": "src/services/campaign/SafetyProtocol.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 227,
        "column": 34,
        "context": "push(filePath);\\n          corruptionPatterns.push(...fileCorruption.patterns);\\n\\n          // // cons"
      },
      {
        "file": "src/services/campaign/SafetyProtocol.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 299,
        "column": 85,
        "context": " import/export corruption in ${files.length} files...`);\\n\\n    for (const filePath of files) {\\n      "
      },
      {
        "file": "src/services/campaign/SafetyProtocol.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 312,
        "column": 34,
        "context": "push(filePath);\\n          corruptionPatterns.push(...importExportCorruption.patterns);\\n\\n          if"
      },
      {
        "file": "src/services/campaign/SafetyProtocol.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 349,
        "column": 92,
        "context": "me corruption monitoring for ${files.length} files...`);\\n\\n    const monitoringInterval = setInterval"
      },
      {
        "file": "src/services/campaign/SafetyProtocol.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 374,
        "column": 91,
        "context": "corruption detected! Triggering emergency rollback...`);\\n              clearInterval(monitoringInter"
      },
      {
        "file": "src/services/campaign/SafetyProtocol.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 411,
        "column": 94,
        "context": "with TypeScript compiler for ${files.length} files...`);\\n\\n    try {\\n      // Run TypeScript compiler"
      },
      {
        "file": "src/services/campaign/SafetyProtocol.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 641,
        "column": 48,
        "context": "=\\n      timestamps.length > 0 ? new Date(Math.min(...timestamps.map(t => t.getTime()))) : undefined;"
      },
      {
        "file": "src/services/campaign/SafetyProtocol.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 643,
        "column": 48,
        "context": "=\\n      timestamps.length > 0 ? new Date(Math.max(...timestamps.map(t => t.getTime()))) : undefined;"
      },
      {
        "file": "src/services/campaign/SafetyProtocol.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 657,
        "column": 12,
        "context": "\\n  getSafetyEvents(): SafetyEvent[] {\\n    return [...this.safetyEvents]\\n  }\\n\\n  // Private helper met"
      },
      {
        "file": "src/services/campaign/SafetyProtocol.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 967,
        "column": 12,
        "context": "  };\\n          this.stashes.set(id, {\\n            ...stash;\\n            timestamp: new Date(stash.ti"
      },
      {
        "file": "src/services/campaign/ScriptIntegrationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 165,
        "column": 28,
        "context": "options with defaults\\n    const mergedOptions = { ...config.defaultOptions, ...options };\\n\\n    // Va"
      },
      {
        "file": "src/services/campaign/ScriptIntegrationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 165,
        "column": 54,
        "context": "const mergedOptions = { ...config.defaultOptions, ...options };\\n\\n    // Validate safety requirements"
      },
      {
        "file": "src/services/campaign/TerminalFreezePreventionSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 43,
        "column": 20,
        "context": "{} as ProcessMonitorConfig) {\\n    this.config = { ...this.DEFAULT_CONFIG, ...config };\\n    this.star"
      },
      {
        "file": "src/services/campaign/TerminalFreezePreventionSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 43,
        "column": 44,
        "context": "ig) {\\n    this.config = { ...this.DEFAULT_CONFIG, ...config };\\n    this.startMonitoring();\\n  }\\n\\n  /*"
      },
      {
        "file": "src/services/campaign/TerminalFreezePreventionSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 52,
        "column": 6,
        "context": "Promise<string> {\\n    const safeOptions = {\\n      ...options;\\n      timeout: options.timeout || this"
      },
      {
        "file": "src/services/campaign/TerminalFreezePreventionSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 85,
        "column": 8,
        "context": "     const child = spawn(command, args, {\\n        ...options;\\n        stdio: ['pipe', 'pipe', 'pipe'"
      },
      {
        "file": "src/services/campaign/TypeScriptErrorAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 75,
        "column": 53,
        "context": " // // console.log('üîç Analyzing TypeScript errors...');\\n\\n    const errors = await this.getTypeScrip"
      },
      {
        "file": "src/services/campaign/TypeScriptErrorAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 240,
        "column": 29,
        "context": "ate priority ranking\\n    const priorityRanking = [...errors].sort((a, b) => b.priority - a.priority)"
      },
      {
        "file": "src/services/campaign/TypeScriptErrorAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 248,
        "column": 21,
        "context": "rorCount: fileErrors.length,\\n        categories: [...new Set(fileErrors.map(e => e.category))],,;\\n  "
      },
      {
        "file": "src/services/campaign/TypeScriptErrorResolutionCampaign.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 182,
        "column": 81,
        "context": "zing unused variables with enterprise intelligence...');\\n\\n    const unusedVariables: UnusedVariableI"
      },
      {
        "file": "src/services/campaign/TypeScriptErrorResolutionCampaign.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 225,
        "column": 81,
        "context": "ing enterprise-intelligent unused variable cleanup...');\\n\\n    const unusedVariables = await this.ana"
      },
      {
        "file": "src/services/campaign/TypeScriptErrorResolutionCampaign.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 94,
        "column": 29,
        "context": "e system\\n    await (\\n      this.intelligenceSystem as unknown as {\\n        initialize: (config: Reco"
      },
      {
        "file": "src/services/campaign/TypeScriptErrorResolutionCampaign.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 105,
        "column": 25,
        "context": "ty protocols\\n    await (\\n      this.safetyProtocol as unknown as {\\n        initialize: (config: Reco"
      },
      {
        "file": "src/services/campaign/UnusedExportAnalyzer.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 68,
        "column": 51,
        "context": "   console.log('üîç Starting unused export analysis...');\\n    const files = await this.getAllSourceFi"
      },
      {
        "file": "src/services/campaign/UnusedExportAnalyzer.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 99,
        "column": 17,
        "context": "       absolute: true,\\n      });\\n      files.push(...matches);\\n    }\\n    return [...new Set(files)];"
      },
      {
        "file": "src/services/campaign/UnusedExportAnalyzer.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 101,
        "column": 12,
        "context": ";\\n      files.push(...matches);\\n    }\\n    return [...new Set(files)]; // Remove duplicates\\n  }\\n  /**"
      },
      {
        "file": "src/services/campaign/UnusedExportAnalyzer.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 132,
        "column": 10,
        "context": "t === 0) {\\n        unusedExports.push({\\n          ...exportInfo,\\n          usageCount,\\n          com"
      },
      {
        "file": "src/services/campaign/UnusedExportAnalyzer.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 449,
        "column": 6,
        "context": " priority level\\n    const topCandidates = [\\n      ...analysis.highPriorityFiles.slice(0, 5),\\n      ."
      },
      {
        "file": "src/services/campaign/UnusedExportAnalyzer.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 450,
        "column": 6,
        "context": " ...analysis.highPriorityFiles.slice(0, 5),\\n      ...analysis.mediumPriorityFiles.slice(0, 5),\\n     "
      },
      {
        "file": "src/services/campaign/UnusedExportAnalyzer.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 451,
        "column": 6,
        "context": "..analysis.mediumPriorityFiles.slice(0, 5),\\n      ...analysis.lowPriorityFiles.slice(0, 5),\\n    ];\\n "
      },
      {
        "file": "src/services/campaign/UnusedExportAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 122,
        "column": 57,
        "context": "// console.log('üîç Starting unused export analysis...');\\n\\n    const files = await this.getAllSourceF"
      },
      {
        "file": "src/services/campaign/UnusedExportAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 158,
        "column": 17,
        "context": "        absolute: true\\n      });\\n      files.push(...matches);\\n    }\\n\\n    return [...new Set(files)]"
      },
      {
        "file": "src/services/campaign/UnusedExportAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 161,
        "column": 12,
        "context": "\\n      files.push(...matches);\\n    }\\n\\n    return [...new Set(files)]; // Remove duplicates\\n  }\\n\\n  /*"
      },
      {
        "file": "src/services/campaign/UnusedExportAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 196,
        "column": 10,
        "context": "t === 0) {\\n        unusedExports.push({\\n          ...exportInfo;\\n          usageCount,\\n          com"
      },
      {
        "file": "src/services/campaign/UnusedExportAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 575,
        "column": 6,
        "context": " priority level\\n    const topCandidates = [\\n      ...analysis.highPriorityFiles.slice(0, 5),\\n      ."
      },
      {
        "file": "src/services/campaign/UnusedExportAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 576,
        "column": 6,
        "context": " ...analysis.highPriorityFiles.slice(0, 5),\\n      ...analysis.mediumPriorityFiles.slice(0, 5),\\n     "
      },
      {
        "file": "src/services/campaign/UnusedExportAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 577,
        "column": 6,
        "context": "..analysis.mediumPriorityFiles.slice(0, 5),\\n      ...analysis.lowPriorityFiles.slice(0, 5)\\n    ];\\n\\n "
      },
      {
        "file": "src/services/campaign/UnusedVariablesCleanupSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 71,
        "column": 6,
        "context": "buildValidation: true,\\n      batchSize: 15,\\n      ...config\\n    };\\n  }\\n\\n  /**\\n   * Execute unused va"
      },
      {
        "file": "src/services/campaign/UnusedVariablesCleanupSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 79,
        "column": 66,
        "context": "e.log('üßπ Starting Unused Variables Cleanup System...');\\n\\n    try {\\n      // Pre-execution validatio"
      },
      {
        "file": "src/services/campaign/UnusedVariablesCleanupSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 122,
        "column": 79,
        "context": "ting batch processing for unused variables cleanup...');\\n\\n    const batchResult: BatchProcessingResu"
      },
      {
        "file": "src/services/campaign/UnusedVariablesCleanupSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 150,
        "column": 71,
        "context": ".log(`\\nüîÑ Processing batch ${i + 1}/${batchCount}...`);\\n\\n        try {\\n          const batchConfig "
      },
      {
        "file": "src/services/campaign/UnusedVariablesCleanupSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 154,
        "column": 12,
        "context": "try {\\n          const batchConfig = {\\n            ...this.config;\\n            maxFiles: this.config."
      },
      {
        "file": "src/services/campaign/UnusedVariablesCleanupSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 175,
        "column": 78,
        "context": "g('‚è∏Ô∏è Pausing 2 seconds between batches for safety...');\\n            await this.sleep(2000);\\n       "
      },
      {
        "file": "src/services/campaign/UnusedVariablesCleanupSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 350,
        "column": 58,
        "context": " // console.log('üîç Validating build after cleanup...');\\n\\n      const startTime = Date.now();\\n      "
      },
      {
        "file": "src/services/campaign/ValidationFramework.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 759,
        "column": 65,
        "context": "le.log(`üîç Validating ${phaseValidation.phaseName}...`);\\n\\n    const startTime = Date.now();\\n    cons"
      },
      {
        "file": "src/services/campaign/ValidationFramework.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 934,
        "column": 12,
        "context": "tory(): MilestoneValidationResult[] {\\n    return [...this.validationHistory]\\n  }\\n\\n  /**\\n   * Get ava"
      },
      {
        "file": "src/services/campaign/analyze-typescript-errors.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 22,
        "column": 47,
        "context": " {\\n    console.log('üîç Analyzing TypeScript errors...');\\n\\n    const errors = await this.getTypeScrip"
      },
      {
        "file": "src/services/campaign/analyze-typescript-errors.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 152,
        "column": 29,
        "context": ".push(error);\\n    }\\n\\n    const priorityRanking = [...errors].sort((a, b) => b.priority - a.priority)"
      },
      {
        "file": "src/services/campaign/analyze-typescript-errors.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 159,
        "column": 21,
        "context": "rorCount: fileErrors.length,\\n        categories: [...new Set(fileErrors.map(e => e.category))],\\n    "
      },
      {
        "file": "src/services/campaign/analyze-typescript-errors.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 337,
        "column": 54,
        "context": "console.log('üöÄ Starting TypeScript Error Analysis...');\\n    const result = await analyzer.analyzeEr"
      },
      {
        "file": "src/services/campaign/analyze-typescript-errors.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 65,
        "column": 60,
        "context": "console.log('üöÄ Starting TypeScript Error Analysis...');\\n    const result = await analyzer.analyzeEr"
      },
      {
        "file": "src/services/campaign/autoLintFixer.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 60,
        "column": 43,
        "context": " try {\\n    console.log('üîç Running ESLint auto-fix...');\\n\\n    execSync(`yarn eslint \"${filePath}\" --"
      },
      {
        "file": "src/services/campaign/autoLintFixer.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 79,
        "column": 48,
        "context": "{\\n  console.log('üõ†Ô∏è Running additional safe fixes...');\\n\\n  let content = fs.readFileSync(filePath, "
      },
      {
        "file": "src/services/campaign/autoLintFixer.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 140,
        "column": 36,
        "context": "th) {\\n  try {\\n    console.log('üîç Validating fixes...');\\n\\n    // Check if file is still valid JavaSc"
      },
      {
        "file": "src/services/campaign/campaignProgressTracker.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 13,
        "column": 44,
        "context": "s() {\\n  console.log('üìä Tracking campaign progress...');\\n\\n  try {\\n    // Check for active campaign t"
      },
      {
        "file": "src/services/campaign/campaignProgressTracker.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 52,
        "column": 17,
        "context": "readFileSync(filePath, 'utf8'));\\n        return { ...content, filePath, fileName: file };\\n      } ca"
      },
      {
        "file": "src/services/campaign/campaignProgressTracker.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 84,
        "column": 59,
        "context": "onsole.log(`‚è≥ Campaign ${trigger.type} in progress...`);\\n        await updateCampaignProgress(trigge"
      },
      {
        "file": "src/services/campaign/campaignProgressTracker.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 275,
        "column": 4,
        "context": "igger.fileName);\\n  const completedTrigger = {\\n    ...trigger,\\n    completedAt: new Date().toISOStrin"
      },
      {
        "file": "src/services/campaign/campaignProgressTracker.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 289,
        "column": 4,
        "context": " phase information\\n  const updatedTrigger = {\\n    ...trigger,\\n    lastMetrics: metrics,\\n    phaseAdv"
      },
      {
        "file": "src/services/campaign/campaignProgressTracker.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 303,
        "column": 4,
        "context": "ith latest metrics\\n  const updatedTrigger = {\\n    ...trigger,\\n    lastMetrics: metrics,\\n    lastUpda"
      },
      {
        "file": "src/services/campaign/checkTypeScriptErrors.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 13,
        "column": 44,
        "context": "s() {\\n  console.log('üîç Checking TypeScript errors...');\\n\\n  try {\\n    // Get current error count\\n   "
      },
      {
        "file": "src/services/campaign/checkTypeScriptErrors.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 35,
        "column": 70,
        "context": "'üöÄ Triggering TypeScript error reduction campaign...');\\n        await triggerErrorReductionCampaign"
      },
      {
        "file": "src/services/campaign/importOptimizer.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 281,
        "column": 28,
        "context": "xternal.length > 0) {\\n      organizedImports.push(...categorizedImports.external.map(imp => imp.stat"
      },
      {
        "file": "src/services/campaign/importOptimizer.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 287,
        "column": 28,
        "context": "nternal.length > 0) {\\n      organizedImports.push(...categorizedImports.internal.map(imp => imp.stat"
      },
      {
        "file": "src/services/campaign/importOptimizer.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 293,
        "column": 28,
        "context": "elative.length > 0) {\\n      organizedImports.push(...categorizedImports.relative.map(imp => imp.stat"
      },
      {
        "file": "src/services/campaign/parallelDevelopmentAccelerator.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 33,
        "column": 61,
        "context": ".log('üöÄ Starting Parallel Development Accelerator...');\\n\\n    try {\\n      // Initialize system state"
      },
      {
        "file": "src/services/campaign/parallelDevelopmentAccelerator.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 63,
        "column": 45,
        "context": "() {\\n    console.log('üîç Initializing system state...');\\n\\n    // Check current project health\\n    co"
      },
      {
        "file": "src/services/campaign/parallelDevelopmentAccelerator.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 194,
        "column": 57,
        "context": "sole.log('üê≥ Ensuring Docker environment readiness...');\\n\\n    try {\\n      // Check if Docker is runn"
      },
      {
        "file": "src/services/campaign/parallelDevelopmentAccelerator.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 272,
        "column": 73,
        "context": "Ô∏è Building ${buildPromises.length} Docker image(s)...`);\\n        await Promise.all(buildPromises);\\n "
      },
      {
        "file": "src/services/campaign/parallelDevelopmentAccelerator.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 320,
        "column": 48,
        "context": "{\\n    console.log('üéØ Orchestrating parallel tasks...');\\n\\n    const tasks = [\\n      {\\n        id: 'i"
      },
      {
        "file": "src/services/campaign/parallelDevelopmentAccelerator.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 387,
        "column": 50,
        "context": "    console.log('‚ö° Executing parallel improvements...');\\n\\n    // Execute tasks in batches to respect"
      },
      {
        "file": "src/services/campaign/parallelDevelopmentAccelerator.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 521,
        "column": 49,
        "context": "\\n    console.log('üê≥ Optimizing Docker environment...');\\n\\n    try {\\n      // Clean up unused Docker "
      },
      {
        "file": "src/services/campaign/parallelDevelopmentAccelerator.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 624,
        "column": 50,
        "context": "    console.log('üìä Generating acceleration report...');\\n\\n    const finalHealth = await this.assessS"
      },
      {
        "file": "src/services/campaign/planetaryDataRefresh.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 20,
        "column": 51,
        "context": "   console.log('üåü Starting planetary data refresh...');\\n\\n    try {\\n      // Get current planetary p"
      },
      {
        "file": "src/services/campaign/planetaryDataRefresh.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 51,
        "column": 56,
        "context": "nsole.log('üîç Fetching current planetary positions...');\\n\\n    try {\\n      // Try to use the reliable"
      },
      {
        "file": "src/services/campaign/planetaryDataRefresh.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 181,
        "column": 44,
        "context": "ns) {\\n    console.log('üîç Validating transit dates...');\\n\\n    const validationResults = {};\\n    cons"
      },
      {
        "file": "src/services/campaign/planetaryDataRefresh.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 261,
        "column": 43,
        "context": "ons) {\\n    console.log('üíæ Updating position cache...');\\n\\n    try {\\n      const cacheDir = path.join"
      },
      {
        "file": "src/services/campaign/planetaryDataRefresh.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 294,
        "column": 45,
        "context": "s) {\\n    console.log('üìä Generating refresh report...');\\n\\n    try {\\n      const report = {\\n        t"
      },
      {
        "file": "src/services/campaign/run-dependency-security.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 38,
        "column": 64,
        "context": "nsole.log('üîí Starting Dependency Security Monitor...\\n');\\n\\n      // Load configuration\\n      const "
      },
      {
        "file": "src/services/campaign/run-dependency-security.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 75,
        "column": 19,
        "context": "se<DependencySecurityConfig> {\\n    let config = { ...DEFAULT_DEPENDENCY_SECURITY_CONFIG };\\n\\n    // A"
      },
      {
        "file": "src/services/campaign/run-dependency-security.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 87,
        "column": 33,
        "context": "cludePackages) {\\n      config.excludedPackages = [...config.excludedPackages, ...this.options.exclud"
      },
      {
        "file": "src/services/campaign/run-dependency-security.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 87,
        "column": 61,
        "context": "g.excludedPackages = [...config.excludedPackages, ...this.options.excludePackages],;\\n    }\\n\\n    if ("
      },
      {
        "file": "src/services/campaign/run-dependency-security.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 107,
        "column": 19,
        "context": "ileSync(configPath, 'utf8')),;\\n        config = { ...config, ...configFile };\\n        // // console."
      },
      {
        "file": "src/services/campaign/run-dependency-security.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 107,
        "column": 30,
        "context": "figPath, 'utf8')),;\\n        config = { ...config, ...configFile };\\n        // // console.log(`üìã Loa"
      },
      {
        "file": "src/services/campaign/run-dependency-security.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 123,
        "column": 69,
        "context": "og('üîÑ Running full dependency security monitoring...');\\n\\n    const result = await securityMonitor.e"
      },
      {
        "file": "src/services/campaign/run-dependency-security.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 130,
        "column": 66,
        "context": "e.log('üîç Running security vulnerability scan only...');\\n\\n    const securityReport = await securityM"
      },
      {
        "file": "src/services/campaign/run-dependency-security.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 137,
        "column": 62,
        "context": "nsole.log('üì¶ Running dependency update check only...');\\n\\n    const updateReport = await securityMon"
      },
      {
        "file": "src/services/campaign/run-dependency-security.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 356,
        "column": 47,
        "context": " {\\n          options.severityThreshold = threshold as unknown as any;\\n        }\\n        break;\\n     "
      },
      {
        "file": "src/services/campaign/run-import-cleanup.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 39,
        "column": 58,
        "context": " // console.log('üßπ Starting Import Cleanup System...\\n');\\n\\n      // Load configuration\\n      const "
      },
      {
        "file": "src/services/campaign/run-import-cleanup.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 85,
        "column": 19,
        "context": "Promise<ImportCleanupConfig> {\\n    let config = { ...DEFAULT_IMPORT_CLEANUP_CONFIG };\\n\\n    // Apply "
      },
      {
        "file": "src/services/campaign/run-import-cleanup.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 101,
        "column": 19,
        "context": "ileSync(configPath, 'utf8')),;\\n        config = { ...config, ...configFile };\\n        // // console."
      },
      {
        "file": "src/services/campaign/run-import-cleanup.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 101,
        "column": 30,
        "context": "figPath, 'utf8')),;\\n        config = { ...config, ...configFile };\\n        // // console.log(`üìã Loa"
      },
      {
        "file": "src/services/campaign/run-import-cleanup.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 133,
        "column": 53,
        "context": " // // console.log('üîÑ Running full import cleanup...');\\n\\n    if (this.options.dryRun) {\\n      // //"
      },
      {
        "file": "src/services/campaign/run-import-cleanup.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 149,
        "column": 57,
        "context": "// console.log('üóëÔ∏è  Running unused import cleanup...');\\n\\n    if (this.options.dryRun) {\\n      const"
      },
      {
        "file": "src/services/campaign/run-import-cleanup.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 173,
        "column": 53,
        "context": " // // console.log('üìã Running import organization...');\\n\\n    if (this.options.dryRun) {\\n      // //"
      },
      {
        "file": "src/services/campaign/run-import-cleanup.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 188,
        "column": 58,
        "context": "/ console.log('üé® Running import style enforcement...');\\n\\n    if (this.options.dryRun) {\\n      // //"
      },
      {
        "file": "src/services/campaign/run-linting-formatting.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 41,
        "column": 66,
        "context": "ole.log('üîß Starting Linting and Formatting System...\\n');\\n\\n      // Load configuration\\n      const "
      },
      {
        "file": "src/services/campaign/run-linting-formatting.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 87,
        "column": 19,
        "context": "ise<LintingFormattingConfig> {\\n    let config = { ...DEFAULT_LINTING_FORMATTING_CONFIG };\\n\\n    // Ap"
      },
      {
        "file": "src/services/campaign/run-linting-formatting.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 115,
        "column": 19,
        "context": "ileSync(configPath, 'utf8')),;\\n        config = { ...config, ...configFile };\\n        // // console."
      },
      {
        "file": "src/services/campaign/run-linting-formatting.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 115,
        "column": 30,
        "context": "figPath, 'utf8')),;\\n        config = { ...config, ...configFile };\\n        // // console.log(`üìã Loa"
      },
      {
        "file": "src/services/campaign/run-linting-formatting.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 147,
        "column": 61,
        "context": "onsole.log('üîÑ Running full linting and formatting...');\\n\\n    if (this.options.dryRun) {\\n      // //"
      },
      {
        "file": "src/services/campaign/run-linting-formatting.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 163,
        "column": 52,
        "context": "  // // console.log('üîç Running linting fixes only...');\\n\\n    if (this.options.dryRun) {\\n      const"
      },
      {
        "file": "src/services/campaign/run-linting-formatting.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 181,
        "column": 54,
        "context": "// // console.log('üé® Running code formatting only...');\\n\\n    if (this.options.dryRun) {\\n      // //"
      },
      {
        "file": "src/services/campaign/run-linting-formatting.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 196,
        "column": 58,
        "context": "/ console.log('üîß Running pattern-based fixes only...');\\n\\n    if (this.options.dryRun) {\\n      // //"
      },
      {
        "file": "src/services/campaign/terminal-freeze-diagnostic.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 58,
        "column": 50,
        "context": "    console.log('\\nüîç Checking for stuck processes...');\\n\\n    try {\\n      // Check for long-running "
      },
      {
        "file": "src/services/campaign/terminal-freeze-diagnostic.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 119,
        "column": 49,
        "context": "\\n    console.log('\\nüîç Checking for infinite loops...');\\n\\n    try {\\n      // Check for processes run"
      },
      {
        "file": "src/services/campaign/terminal-freeze-diagnostic.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 155,
        "column": 47,
        "context": " {\\n    console.log('\\nüîç Checking for memory leaks...');\\n\\n    try {\\n      // Check for high memory u"
      },
      {
        "file": "src/services/campaign/terminal-freeze-diagnostic.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 183,
        "column": 52,
        "context": "  console.log('\\nüîç Checking for file system locks...');\\n\\n    const lockFiles = [\\n      '.explicit-a"
      },
      {
        "file": "src/services/campaign/terminal-freeze-diagnostic.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 225,
        "column": 46,
        "context": ") {\\n    console.log('\\nüîç Checking campaign states...');\\n\\n    const campaignFiles = [\\n      '.explic"
      },
      {
        "file": "src/services/campaign/terminal-freeze-diagnostic.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 254,
        "column": 48,
        "context": "{\\n    console.log('\\nüí° Generating recommendations...');\\n\\n    if (this.diagnosticResults.stuckProces"
      },
      {
        "file": "src/services/campaign/terminal-freeze-diagnostic.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 327,
        "column": 50,
        "context": "      console.log('üõë Killing TypeScript processes...');\\n      try {\\n        execSync('pkill -f \"tsc"
      },
      {
        "file": "src/services/campaign/terminal-freeze-diagnostic.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 335,
        "column": 44,
        "context": "esses\\n      console.log('üõë Killing lint processes...');\\n      try {\\n        execSync('pkill -f \"yar"
      },
      {
        "file": "src/services/campaign/terminal-freeze-diagnostic.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 343,
        "column": 48,
        "context": "s\\n      console.log('üõë Killing campaign processes...');\\n      try {\\n        execSync('pkill -f \"cam"
      },
      {
        "file": "src/services/campaign/terminal-freeze-diagnostic.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 351,
        "column": 47,
        "context": "es\\n      console.log('üßπ Clearing stale lock files...');\\n      const lockFiles = [\\n        '.explici"
      },
      {
        "file": "src/services/campaign/terminal-freeze-diagnostic.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 376,
        "column": 44,
        "context": "cache\\n      console.log('üßπ Clearing Node.js cache...');\\n      try {\\n        execSync('rm -rf node_m"
      },
      {
        "file": "src/services/campaign/terminal-freeze-diagnostic.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 398,
        "column": 49,
        "context": "\\n    console.log('üìä Setting up process monitoring...');\\n\\n    // Create monitoring script\\n    const "
      },
      {
        "file": "src/services/campaign/test-campaign-intelligence.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 168,
        "column": 66,
        "context": "'üß† Generating Comprehensive Campaign Intelligence...');\\n\\n    // Gather data from all systems\\n    co"
      },
      {
        "file": "src/services/campaign/test-campaign-intelligence.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 341,
        "column": 62,
        "context": "log('\\nüîç Demonstrating Error Pattern Intelligence...');\\n    const errorPatternDemo = this.analyzeEr"
      },
      {
        "file": "src/services/campaign/test-campaign-intelligence.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 353,
        "column": 66,
        "context": "'\\nüìà Demonstrating Progress Analysis Intelligence...');\\n    const progressAnalysisDemo = this.analy"
      },
      {
        "file": "src/services/campaign/test-campaign-intelligence.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 474,
        "column": 77,
        "context": "ating Comprehensive Campaign Intelligence Analysis...');\\n      const result = await intelligence.gen"
      },
      {
        "file": "src/services/campaign/test-campaign-intelligence.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 481,
        "column": 56,
        "context": "console.log('üîç Testing Error Pattern Intelligence...');\\n      const sampleErrors = [\\n        { code"
      },
      {
        "file": "src/services/campaign/test-campaign-intelligence.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 493,
        "column": 60,
        "context": "ole.log('üìà Testing Progress Analysis Intelligence...');\\n      const progress = intelligence.analyze"
      },
      {
        "file": "src/services/campaign/test-campaign-intelligence.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 505,
        "column": 80,
        "context": "fault Comprehensive Campaign Intelligence Analysis...');\\n    const result = await intelligence.gener"
      },
      {
        "file": "src/services/campaign/test-console-removal.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 13,
        "column": 58,
        "context": "e.log('üß™ Testing Console Statement Removal System...\\n');\\n\\n  try {\\n    // Test 1: Console statement"
      },
      {
        "file": "src/services/campaign/test-console-removal.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 27,
        "column": 48,
        "context": "\\n\\n    console.log('üîç Analyzing console statements...');\\n    const consoleAnalysis = await analysisS"
      },
      {
        "file": "src/services/campaign/test-console-removal.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 59,
        "column": 37,
        "context": "ing\\n    });\\n\\n    console.log('üîç Executing dry run...');\\n    const dryRunResult = await dryRunSystem"
      },
      {
        "file": "src/services/campaign/test-console-removal.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 177,
        "column": 62,
        "context": "log('üîÑ Simulating batch processing with 2 batches...');\\n    try {\\n      const batchResult = await b"
      },
      {
        "file": "src/services/campaign/test-enhanced-fixer-integration.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 24,
        "column": 65,
        "context": "('üöÄ Starting Enhanced TypeScript Error Fixer v3.0...');\\n\\n    const args = this.buildFixerArguments("
      },
      {
        "file": "src/services/campaign/test-enhanced-fixer-integration.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 93,
        "column": 50,
        "context": "      const fullArgs = [this.ENHANCED_FIXER_PATH, ...args];\\n\\n      console.log(`üîß Executing: ${comm"
      },
      {
        "file": "src/services/campaign/test-enhanced-fixer-integration.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 129,
        "column": 12,
        "context": "\\n        } else {\\n          resolve({\\n            ...result,\\n            success: false,\\n           "
      },
      {
        "file": "src/services/campaign/test-enhanced-fixer-integration.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 131,
        "column": 21,
        "context": "\\n            success: false,\\n            errors: [...result.errors, `Process exited with code ${code"
      },
      {
        "file": "src/services/campaign/test-enhanced-fixer-integration.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 172,
        "column": 20,
        "context": "g);\\n    if (warningMatches) {\\n      warnings.push(...warningMatches);\\n    }\\n\\n    // Extract errors\\n "
      },
      {
        "file": "src/services/campaign/test-enhanced-fixer-integration.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 178,
        "column": 18,
        "context": "n]*/g);\\n    if (errorMatches) {\\n      errors.push(...errorMatches);\\n    }\\n\\n    return {\\n      succes"
      },
      {
        "file": "src/services/campaign/test-enhanced-fixer-integration.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 194,
        "column": 38,
        "context": "{\\n    try {\\n      console.log('üîç Validating build...');\\n\\n      const startTime = Date.now();\\n      "
      },
      {
        "file": "src/services/campaign/test-enhanced-fixer-integration.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 228,
        "column": 59,
        "context": "sole.log('üìä Fetching Enhanced Error Fixer metrics...');\\n\\n      const result = await this.runFixerCo"
      },
      {
        "file": "src/services/campaign/test-enhanced-fixer-integration.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 244,
        "column": 41,
        "context": "   try {\\n      console.log('üõ°Ô∏è  Validating safety...');\\n\\n      const result = await this.runFixerCo"
      },
      {
        "file": "src/services/campaign/test-enhanced-fixer-integration.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 267,
        "column": 74,
        "context": "ecuting Enhanced Error Fixer with safety protocols...');\\n\\n    const safetyCheck = await this.validat"
      },
      {
        "file": "src/services/campaign/test-enhanced-fixer-integration.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 365,
        "column": 60,
        "context": "e.log(`üß™ Testing Enhanced Error Fixer Integration...`);\\n    console.log(`   Max Files: ${maxFiles}`"
      },
      {
        "file": "src/services/campaign/test-enterprise-intelligence-generator.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 13,
        "column": 59,
        "context": ".log('üß† Testing Enterprise Intelligence Generator...\\n');\\n\\n  try {\\n    // First, analyze unused exp"
      },
      {
        "file": "src/services/campaign/test-enterprise-intelligence-generator.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 17,
        "column": 44,
        "context": "dates\\n    console.log('üìä Analyzing unused exports...');\\n    const analyzer = new UnusedExportAnalyz"
      },
      {
        "file": "src/services/campaign/test-enterprise-intelligence-generator.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 27,
        "column": 6,
        "context": "too many systems)\\n    const sampleFiles = [\\n      ...analysisResult.highPriorityFiles.slice(0, 2),\\n "
      },
      {
        "file": "src/services/campaign/test-enterprise-intelligence-generator.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 28,
        "column": 6,
        "context": "alysisResult.highPriorityFiles.slice(0, 2),\\n      ...analysisResult.mediumPriorityFiles.slice(0, 3),"
      },
      {
        "file": "src/services/campaign/test-enterprise-intelligence-generator.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 29,
        "column": 6,
        "context": "ysisResult.mediumPriorityFiles.slice(0, 3),\\n      ...analysisResult.lowPriorityFiles.slice(0, 2),\\n  "
      },
      {
        "file": "src/services/campaign/test-enterprise-intelligence-generator.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 37,
        "column": 70,
        "context": "\udfd7Ô∏è  Initializing Enterprise Intelligence Generator...');\\n    const generator = new EnterpriseIntelli"
      },
      {
        "file": "src/services/campaign/test-enterprise-intelligence-generator.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 41,
        "column": 51,
        "context": "   console.log('üöÄ Generating intelligence systems...');\\n    const startTime = Date.now();\\n\\n    cons"
      },
      {
        "file": "src/services/campaign/test-enterprise-intelligence-generator.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 91,
        "column": 24,
        "context": "e}`);\\n        }\\n      });\\n      console.log('     ...');\\n    });\\n\\n    // Generate and save integrati"
      },
      {
        "file": "src/services/campaign/test-enterprise-intelligence-generator.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 95,
        "column": 50,
        "context": "    console.log('\\nüìö Generating integration guide...');\\n    const integrationGuide = generator.gene"
      },
      {
        "file": "src/services/campaign/test-enterprise-intelligence-generator.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 115,
        "column": 19,
        "context": "tart(3)}: ${line}`);\\n      });\\n      console.log('...');\\n    }\\n\\n    // Verify files were created\\n   "
      },
      {
        "file": "src/services/campaign/test-enterprise-intelligence-generator.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 119,
        "column": 47,
        "context": "ed\\n    console.log('\\nüîç Verifying generated files...');\\n    let filesCreated = 0;\\n    for (const re"
      },
      {
        "file": "src/services/campaign/test-explicit-any-elimination.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 25,
        "column": 60,
        "context": "e.log('üéØ Starting Explicit-Any Elimination System...');\\n\\n    const initialCount = await this.getCur"
      },
      {
        "file": "src/services/campaign/test-explicit-any-elimination.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 104,
        "column": 54,
        "context": "  const fullArgs = [this.EXPLICIT_ANY_FIXER_PATH, ...args];\\n\\n      console.log(`üîß Executing: ${comm"
      },
      {
        "file": "src/services/campaign/test-explicit-any-elimination.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 166,
        "column": 20,
        "context": "g);\\n    if (warningMatches) {\\n      warnings.push(...warningMatches);\\n    }\\n\\n    // Extract errors\\n "
      },
      {
        "file": "src/services/campaign/test-explicit-any-elimination.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 172,
        "column": 18,
        "context": "n]*/g);\\n    if (errorMatches) {\\n      errors.push(...errorMatches);\\n    }\\n\\n    return {\\n      succes"
      },
      {
        "file": "src/services/campaign/test-explicit-any-elimination.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 186,
        "column": 38,
        "context": "{\\n    try {\\n      console.log('üîç Validating build...');\\n\\n      const startTime = Date.now();\\n      "
      },
      {
        "file": "src/services/campaign/test-explicit-any-elimination.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 232,
        "column": 10,
        "context": " 100\\n            : 0;\\n\\n        return {\\n          ...progress,\\n          totalExplicitAnyRemaining: "
      },
      {
        "file": "src/services/campaign/test-explicit-any-elimination.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 356,
        "column": 59,
        "context": "le.log(`üß™ Testing Explicit-Any Elimination System...`);\\n    console.log(`   Max Files: ${maxFiles}`"
      },
      {
        "file": "src/services/campaign/test-export-transformation-engine.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 8,
        "column": 52,
        "context": "nsole.log('üöÄ Testing Export Transformation Engine...\\n');\\n\\n// Mock the transformation engine functi"
      },
      {
        "file": "src/services/campaign/test-export-transformation-engine.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 23,
        "column": 6,
        "context": "',\\n      maxRetries: 3,\\n      dryRun: true,\\n      ...config,\\n    };\\n\\n    this.transformationLog = []"
      },
      {
        "file": "src/services/campaign/test-export-transformation-engine.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 30,
        "column": 52,
        "context": "  console.log('üîÑ Starting transformation campaign...');\\n    const startTime = Date.now();\\n\\n    try "
      },
      {
        "file": "src/services/campaign/test-export-transformation-engine.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 35,
        "column": 55,
        "context": " console.log('üìä Phase 1: Analyzing unused exports...');\\n      const analysisResult = await this.per"
      },
      {
        "file": "src/services/campaign/test-export-transformation-engine.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 39,
        "column": 62,
        "context": "e.log('üìã Phase 2: Planning transformation batches...');\\n      const batches = await this.planTransf"
      },
      {
        "file": "src/services/campaign/test-export-transformation-engine.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 43,
        "column": 59,
        "context": "sole.log('üõ°Ô∏è  Phase 3: Preparing safety protocols...');\\n      await this.prepareSafetyProtocols();\\n"
      },
      {
        "file": "src/services/campaign/test-export-transformation-engine.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 47,
        "column": 62,
        "context": "e.log('‚ö° Phase 4: Executing transformation batches...');\\n      const results = await this.executeBat"
      },
      {
        "file": "src/services/campaign/test-export-transformation-engine.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 51,
        "column": 58,
        "context": "nsole.log('‚úÖ Phase 5: Final validation and cleanup...');\\n      await this.performFinalValidation();\\n"
      },
      {
        "file": "src/services/campaign/test-export-transformation-engine.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 137,
        "column": 6,
        "context": " const batches = [];\\n    const allFiles = [\\n      ...analysisResult.highPriorityFiles,\\n      ...anal"
      },
      {
        "file": "src/services/campaign/test-export-transformation-engine.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 138,
        "column": 6,
        "context": "\\n      ...analysisResult.highPriorityFiles,\\n      ...analysisResult.mediumPriorityFiles,\\n      ...an"
      },
      {
        "file": "src/services/campaign/test-export-transformation-engine.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 139,
        "column": 6,
        "context": "     ...analysisResult.mediumPriorityFiles,\\n      ...analysisResult.lowPriorityFiles,\\n    ];\\n\\n    fo"
      },
      {
        "file": "src/services/campaign/test-export-transformation-engine.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 307,
        "column": 13,
        "context": "unt}`);\\n    });\\n  }\\n\\n  getConfig() {\\n    return { ...this.config };\\n  }\\n\\n  getTransformationLog() {\\n"
      },
      {
        "file": "src/services/campaign/test-export-transformation-engine.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 311,
        "column": 12,
        "context": "ig };\\n  }\\n\\n  getTransformationLog() {\\n    return [...this.transformationLog];\\n  }\\n\\n  delay(ms) {\\n   "
      },
      {
        "file": "src/services/campaign/test-export-transformation-engine.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 321,
        "column": 61,
        "context": ".log('üß™ Initializing Export Transformation Engine...');\\n\\n    const engine = new MockExportTransform"
      },
      {
        "file": "src/services/campaign/test-export-transformation-engine.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 339,
        "column": 54,
        "context": "console.log('\\nüöÄ Starting transformation campaign...');\\n    const summary = await engine.executeTra"
      },
      {
        "file": "src/services/campaign/test-final-validation.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 23,
        "column": 62,
        "context": "log('üìã Testing Final Validation System Components...');\\n\\n    // Test 1: Verify TypeScript compilati"
      },
      {
        "file": "src/services/campaign/test-final-validation.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 26,
        "column": 52,
        "context": "  console.log('\\n1. Testing TypeScript Compilation...');\\n    try {\\n      execSync('npx tsc --noEmit "
      },
      {
        "file": "src/services/campaign/test-final-validation.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 38,
        "column": 50,
        "context": "    console.log('\\n2. Testing System Instantiation...');\\n    try {\\n      // Use require to test the "
      },
      {
        "file": "src/services/campaign/test-final-validation.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 50,
        "column": 60,
        "context": "e.log('\\n3. Testing Current Project State Analysis...');\\n\\n    // TypeScript error count\\n    let tsEr"
      },
      {
        "file": "src/services/campaign/test-final-validation.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 103,
        "column": 47,
        "context": "ce\\n    console.log('\\n4. Testing Build Performance...');\\n    try {\\n      const buildStart = Date.now"
      },
      {
        "file": "src/services/campaign/test-final-validation.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 120,
        "column": 58,
        "context": "ole.log('\\n5. Testing Validation Report Generation...');\\n    try {\\n      // Create mock validation r"
      },
      {
        "file": "src/services/campaign/test-final-validation.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 202,
        "column": 54,
        "context": "console.log('\\n6. Test Summary and Recommendations...');\\n\\n    const perfectCodebase =\\n      tsErrorC"
      },
      {
        "file": "src/services/campaign/test-intelligence-simple.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 8,
        "column": 71,
        "context": "ng Enterprise Intelligence Generator (Simple Test)...\\n');\\n\\n// Test the core functionality by creati"
      },
      {
        "file": "src/services/campaign/test-intelligence-simple.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 73,
        "column": 6,
        "context": "cacheResults: true,\\n      logLevel: 'info',\\n      ...config\\n    };\\n\\n    this.analytics = {\\n      usa"
      },
      {
        "file": "src/services/campaign/test-intelligence-simple.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 170,
        "column": 13,
        "context": "\\n    };\\n  }\\n\\n  getAnalytics(): any {\\n    return { ...this.analytics };\\n  }\\n\\n  private updatePerforma"
      },
      {
        "file": "src/services/campaign/test-intelligence-simple.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 200,
        "column": 58,
        "context": "ole.log('üìä Testing intelligence system generation...');\\n\\n    const candidate = mockFileAnalysis.tra"
      },
      {
        "file": "src/services/campaign/test-intelligence-simple.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 215,
        "column": 17,
        "context": "padStart(3)}: ${line}`);\\n    });\\n    console.log('...');\\n\\n    // Test the generated system structure"
      },
      {
        "file": "src/services/campaign/test-linting-analyzer.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 13,
        "column": 50,
        "context": "  console.log('üß™ Testing Linting Warning Analyzer...\\n');\\n\\n  try {\\n    const analyzer = new Linting"
      },
      {
        "file": "src/services/campaign/test-linting-analyzer.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 18,
        "column": 44,
        "context": "r();\\n\\n    console.log('üìä Running linting analysis...');\\n    const result = await analyzer.analyzeLi"
      },
      {
        "file": "src/services/campaign/test-linting-analyzer.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 36,
        "column": 48,
        "context": "\\n\\n    console.log('\\nüìã Generating detailed report...');\\n    const report = analyzer.generateReport("
      },
      {
        "file": "src/services/campaign/test-unused-export-analyzer.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 12,
        "column": 48,
        "context": "{\\n  console.log('üß™ Testing Unused Export Analyzer...\\n');\\n\\n  try {\\n    const analyzer = new UnusedE"
      },
      {
        "file": "src/services/campaign/test-unused-export-analyzer.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 17,
        "column": 37,
        "context": "zer('src');\\n\\n    console.log('üìä Starting analysis...');\\n    const startTime = Date.now();\\n\\n    cons"
      },
      {
        "file": "src/services/campaign/test-unused-export-analyzer.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 48,
        "column": 6,
        "context": "================');\\n\\n    const allFiles = [\\n      ...result.highPriorityFiles,\\n      ...result.mediu"
      },
      {
        "file": "src/services/campaign/test-unused-export-analyzer.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 49,
        "column": 6,
        "context": "iles = [\\n      ...result.highPriorityFiles,\\n      ...result.mediumPriorityFiles,\\n      ...result.low"
      },
      {
        "file": "src/services/campaign/test-unused-export-analyzer.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 50,
        "column": 6,
        "context": "Files,\\n      ...result.mediumPriorityFiles,\\n      ...result.lowPriorityFiles,\\n    ];\\n    const topCa"
      },
      {
        "file": "src/services/campaign/test-unused-export-analyzer.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 76,
        "column": 48,
        "context": "t\\n    console.log('\\nüìÑ Generating detailed report...');\\n    const report = analyzer.generateReport("
      },
      {
        "file": "src/services/campaign/test-unused-variables-cleanup.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 13,
        "column": 57,
        "context": "le.log('üß™ Testing Unused Variables Cleanup System...\\n');\\n\\n  try {\\n    // Test 1: Dry run execution"
      },
      {
        "file": "src/services/campaign/test-unused-variables-cleanup.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 27,
        "column": 37,
        "context": "ing\\n    });\\n\\n    console.log('üîç Executing dry run...');\\n    const dryRunResult = await dryRunSystem"
      },
      {
        "file": "src/services/campaign/test-unused-variables-cleanup.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 81,
        "column": 62,
        "context": "log('üîÑ Simulating batch processing with 2 batches...');\\n    try {\\n      const batchResult = await b"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/AnalysisTools.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 41,
        "column": 64,
        "context": "ole.log('Analyzing any type distribution by domain...');\\n\\n    const anyTypeOccurrences = await this."
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/AnalysisTools.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 124,
        "column": 64,
        "context": "ole.log('Generating classification accuracy report...');\\n\\n    const anyTypeOccurrences = await this."
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/AnalysisTools.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 190,
        "column": 68,
        "context": "log('Generating success rate analysis and trending...');\\n\\n    const currentMetrics = await this.getC"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/AnalysisTools.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 222,
        "column": 63,
        "context": "sole.log('Generating manual review recommendations...');\\n\\n    const anyTypeOccurrences = await this."
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/AnalysisTools.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 265,
        "column": 63,
        "context": "sole.log('Generating comprehensive analysis report...');\\n\\n    const [domainDistribution, accuracyRep"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/AnyTypeClassifier.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 65,
        "column": 6,
        "context": "ny/,\\n        /compat\\w*\\s*:\\s*any/\\n      ],\\n      ...rules\\n    },\\n\\n    // Initialize confidence weig"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/AnyTypeClassifier.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 448,
        "column": 33,
        "context": "text): boolean {\\n    const codeWithSurrounding = [...context.surroundingLines, context.codeSnippet]."
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/AnyTypeClassifier.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 454,
        "column": 33,
        "context": "text): boolean {\\n    const codeWithSurrounding = [...context.surroundingLines, context.codeSnippet]."
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/AnyTypeClassifier.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 460,
        "column": 33,
        "context": "text): boolean {\\n    const codeWithSurrounding = [...context.surroundingLines, context.codeSnippet]."
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/AnyTypeClassifier.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1154,
        "column": 12,
        "context": "ext: ClassificationContext): string {\\n    return [...context.surroundingLines, context.codeSnippet]."
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/AutoDocumentationGenerator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 348,
        "column": 26,
        "context": "Index = lineNumber - 1;\\n    const updatedLines = [...lines];\\n    const indentation = this.getIndenta"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/CampaignIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 43,
        "column": 6,
        "context": "ONSERVATIVE',\\n      validationFrequency: 5,\\n      ...unintentionalAnyConfig\\n    };\\n\\n    this.uninten"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/CampaignIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 161,
        "column": 8,
        "context": "   // Include existing phases if provided\\n        ...(baseConfig?.phases || []),\\n        // Add unin"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/CampaignIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 163,
        "column": 8,
        "context": " Add unintentional any elimination phases\\n        ...unintentionalAnyPhases\\n      ],\\n      safetySet"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/CampaignIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 172,
        "column": 8,
        "context": "led: true,\\n        stashRetentionDays: 7,\\n        ...baseConfig?.safetySettings\\n      },\\n      progr"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/CampaignIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 179,
        "column": 8,
        "context": "Time: 10,\\n        enterpriseSystems: 200,\\n        ...baseConfig?.progressTargets\\n      },\\n      tool"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/CampaignIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 187,
        "column": 8,
        "context": "nt-fixes/fix-console-statements-only.js',\\n        ...baseConfig?.toolConfiguration\\n      }\\n    };\\n\\n "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/CampaignIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 244,
        "column": 6,
        "context": "getUnintentionalAnyMetrics();\\n\\n    return {\\n      ...baseMetrics;\\n      unintentionalAnyMetrics\\n    "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/CampaignIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 293,
        "column": 20,
        "context": "ntentional any elimination');\\n        errors.push(...buildValidation.errors);\\n      }\\n\\n      return "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/CampaignIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 373,
        "column": 36,
        "context": "fig>): void {\\n    this.unintentionalAnyConfig = { ...this.unintentionalAnyConfig, ...newConfig };\\n  "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/CampaignIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 373,
        "column": 68,
        "context": "onalAnyConfig = { ...this.unintentionalAnyConfig, ...newConfig };\\n    this.unintentionalAnyCampaign."
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/CampaignIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 381,
        "column": 13,
        "context": "nyConfig(): UnintentionalAnyConfig {\\n    return { ...this.unintentionalAnyConfig };\\n  }\\n}\\n\\n/**\\n * Fa"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/CampaignIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 417,
        "column": 6,
        "context": "paign.createCampaignPhases();\\n\\n    return {\\n      ...existingConfig;\\n      phases: [...existingConfi"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/CampaignIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 418,
        "column": 15,
        "context": " return {\\n      ...existingConfig;\\n      phases: [...existingConfig.phases, ...unintentionalAnyPhase"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/CampaignIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 418,
        "column": 41,
        "context": "gConfig;\\n      phases: [...existingConfig.phases, ...unintentionalAnyPhases]\\n    };\\n  }\\n\\n  /**\\n   * "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/CampaignIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 456,
        "column": 33,
        "context": "fetySettings = {\\n      maxFilesPerBatch: Math.min(...campaigns.map(c => c.safetySettings.maxFilesPer"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/CampaignIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 458,
        "column": 8,
        "context": "      buildValidationFrequency: Math.min(\\n        ...campaigns.map(c => c.safetySettings.buildValida"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/CampaignIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 461,
        "column": 8,
        "context": "\\n      testValidationFrequency: Math.min(\\n        ...campaigns.map(c => c.safetySettings.testValidat"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/CampaignIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 465,
        "column": 35,
        "context": "ackEnabled),,;\\n      stashRetentionDays: Math.max(...campaigns.map(c => c.safetySettings.stashRetent"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/CampaignIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 472,
        "column": 26,
        "context": "id.includes(priority));\\n        mergedPhases.push(...priorityPhases);\\n      }\\n    }\\n\\n    return {\\n  "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/CampaignIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 481,
        "column": 8,
        "context": "ogressTargets,\\n      toolConfiguration: {\\n        ...sortedCampaigns[0].toolConfiguration,\\n        ."
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/CampaignIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 482,
        "column": 8,
        "context": " ...sortedCampaigns[0].toolConfiguration,\\n        ...UnintentionalAnyIntegrationHelper.createAutomat"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/ConservativeReplacementPilot.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 54,
        "column": 6,
        "context": "Frequency: 1, // Validate after every batch\\n      ...config\\n    };\\n\\n    this.classifier = new AnyTyp"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/ConservativeReplacementPilot.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 72,
        "column": 65,
        "context": "le.log('üöÄ Starting Conservative Replacement Pilot...');\\n    // // console.log(\\n      `Configuration"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/ConservativeReplacementPilot.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 117,
        "column": 71,
        "context": "('üîç Identifying high-confidence replacement cases...');\\n\\n    const highConfidenceCases: TypeReplace"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/ConservativeReplacementPilot.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 175,
        "column": 76,
        "context": "Starting batch processing of ${cases.length} cases...`);\\n\\n    let totalProcessed = 0;\\n    let totalS"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/ConservativeReplacementPilot.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 189,
        "column": 63,
        "context": " console.log(`\\nüì¶ Processing Batch ${batchNumber}...`),\\n\\n        // Select files for this batch\\n   "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/ConservativeReplacementPilot.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 282,
        "column": 82,
        "context": "ng batch ${batchNumber} with ${cases.length} cases...`);\\n\\n    try {\\n      // Pre-batch validation\\n  "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/ConservativeReplacementPilot.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 311,
        "column": 80,
        "context": "batch build validation failed, performing rollback...');\\n        // The SafeTypeReplacer should have"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/ConservativeReplacementPilot.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 361,
        "column": 57,
        "context": "// console.log('üîç Performing real-time validation...');\\n\\n    try {\\n      // Build stability check\\n "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/ConservativeReplacementPilot.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 422,
        "column": 72,
        "context": "'üîó Validating campaign infrastructure integration...');\\n\\n    try {\\n      // Mock campaign integrati"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/ConservativeReplacementPilot.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 464,
        "column": 49,
        "context": "\\n    // // console.log('üìÑ Generating pilot report...');\\n\\n    const reportPath = '.kiro/campaign-rep"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/DocumentationQualityAssurance.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 74,
        "column": 6,
        "context": "        good: 70,\\n        fair: 50\\n      },\\n      ...config\\n    };\\n  }\\n\\n  /**\\n   * Perform comprehen"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/DocumentationQualityAssurance.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 132,
        "column": 26,
        "context": "      qualityBreakdown,\\n      undocumentedFiles: [...new Set(undocumentedTypes.map(t => t.filePath))"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/DocumentationQualityAssurance.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 261,
        "column": 17,
        "context": "ursively(dir, ['.ts', '.tsx']),;\\n      files.push(...dirFiles);\\n    }\\n\\n    // Filter out excluded pa"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/DocumentationQualityAssurance.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 287,
        "column": 21,
        "context": "vely(fullPath, extensions),;\\n          files.push(...subFiles);\\n        } else if (entry.isFile()) {"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/DocumentationQualityAssurance.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 720,
        "column": 50,
        "context": "        `Priority files needing documentation: ${[...new Set(criticalFiles)].slice(0, 5).join(', ')}"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/DomainContextAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 58,
        "column": 6,
        "context": "Suggestions(context, domain);\\n\\n    return [\\n      ...new Set([\\n        ...contextualSuggestions, // "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/DomainContextAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 59,
        "column": 8,
        "context": "domain);\\n\\n    return [\\n      ...new Set([\\n        ...contextualSuggestions, // Prioritize contextual"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/DomainContextAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 60,
        "column": 8,
        "context": "ons, // Prioritize contextual suggestions\\n        ...variableNameSuggestions, // Then variable name "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/DomainContextAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 61,
        "column": 8,
        "context": "stions, // Then variable name suggestions\\n        ...patternBasedSuggestions, // Then pattern-based "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/DomainContextAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 62,
        "column": 8,
        "context": "stions, // Then pattern-based suggestions\\n        ...baseSuggestions, // Finally base suggestions\\n  "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/DomainContextAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 313,
        "column": 46,
        "context": "n {\\n    const codeContent = [context.codeSnippet, ...context.surroundingLines].join('\\n').toLowerCas"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/DomainContextAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 344,
        "column": 46,
        "context": "n {\\n    const codeContent = [context.codeSnippet, ...context.surroundingLines].join('\\n');\\n\\n    // L"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/DomainContextAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 350,
        "column": 24,
        "context": "^''`]+)[''`]\\)/g) || [];\\n\\n    const allImports = [...importMatches, ...requireMatches].join(' ').toL"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/DomainContextAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 350,
        "column": 42,
        "context": "|| [];\\n\\n    const allImports = [...importMatches, ...requireMatches].join(' ').toLowerCase();\\n\\n    /"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/DomainContextAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 414,
        "column": 46,
        "context": "');\\n    const codeContent = [context.codeSnippet, ...context.surroundingLines].join('\\n').toLowerCas"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/DomainContextAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 542,
        "column": 25,
        "context": "CodeDomain.ASTROLOGICAL:\\n        suggestions.push(...this.getAstrologicalTypeSuggestions(allContent,"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/DomainContextAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 546,
        "column": 25,
        "context": " case CodeDomain.RECIPE:\\n        suggestions.push(...this.getRecipeTypeSuggestions(allContent, conte"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/DomainContextAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 550,
        "column": 25,
        "context": "ase CodeDomain.CAMPAIGN:\\n        suggestions.push(...this.getCampaignTypeSuggestions(allContent, con"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/DomainContextAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 554,
        "column": 25,
        "context": "case CodeDomain.SERVICE:\\n        suggestions.push(...this.getServiceTypeSuggestions(allContent, cont"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/DomainContextAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 558,
        "column": 25,
        "context": "se CodeDomain.COMPONENT:\\n        suggestions.push(...this.getComponentTypeSuggestions(allContent, co"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/DomainContextAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 562,
        "column": 25,
        "context": "case CodeDomain.UTILITY:\\n        suggestions.push(...this.getUtilityTypeSuggestions(allContent, cont"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/DomainContextAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 566,
        "column": 25,
        "context": "   case CodeDomain.TEST:\\n        suggestions.push(...this.getTestTypeSuggestions(allContent, context"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/DomainContextAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 570,
        "column": 12,
        "context": "ent, context));\\n        break;\\n    }\\n\\n    return [...new Set(suggestions)]; // Remove duplicates\\n  }"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/FullCampaignExecutor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 56,
        "column": 6,
        "context": "uration: 4 * 60 * 60 * 1000, // 4 hours max\\n      ...config\\n    };\\n\\n    this.classifier = new AnyTyp"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/FullCampaignExecutor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 480,
        "column": 33,
        "context": "E),;\\n        ),\\n\\n        highConfidenceCases.push(...highConfidence);\\n      } catch (error) {\\n      "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/FullCampaignExecutor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 929,
        "column": 19,
        "context": ".confidence >= 0.6\\n        ),\\n\\n        cases.push(...categoryCases);\\n      } catch (error) {\\n       "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/MetricsIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 112,
        "column": 6,
        "context": "getUnintentionalAnyMetrics();\\n\\n    return {\\n      ...baseMetrics;\\n      unintentionalAnyMetrics\\n    "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/MetricsIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 270,
        "column": 6,
        "context": "nalAnyMetrics)\\n      }\\n    ],\\n\\n    return {\\n      ...baseReport;\\n      unintentionalAnyMetrics,\\n    "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/MetricsIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 363,
        "column": 12,
        "context": "istory(): UnintentionalAnyMetrics[] {\\n    return [...this.metricsHistory]\\n  }\\n\\n  /**\\n   * Calculate "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/PilotCampaignAnalysis.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 43,
        "column": 6,
        "context": "|| '.kiro/campaign-reports/pilot-analysis',\\n      ...config\\n    };\\n\\n    this.analysisTools = new Ana"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/PilotCampaignAnalysis.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 63,
        "column": 79,
        "context": " Step 1: Executing comprehensive codebase analysis...');\\n      const codebaseAnalysis = await this.e"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/PilotCampaignAnalysis.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 67,
        "column": 72,
        "context": "g('\\nüîç Step 2: Validating classification accuracy...');\\n      const accuracyValidation = await this"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/PilotCampaignAnalysis.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 71,
        "column": 81,
        "context": "tep 3: Generating baseline metrics and predictions...');\\n      const baselineMetrics = await this.ge"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/PilotCampaignAnalysis.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 75,
        "column": 70,
        "context": "log('\\n‚öôÔ∏è Step 4: Tuning classification algorithms...');\\n      const tuningResults = await this.tune"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/PilotCampaignAnalysis.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 79,
        "column": 75,
        "context": "\\nüìã Step 5: Generating comprehensive pilot report...');\\n      const pilotReport = await this.genera"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/PilotCampaignAnalysis.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 136,
        "column": 75,
        "context": "alyzing current codebase for any type distribution...');\\n\\n    // Get current TypeScript error count "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/PilotCampaignAnalysis.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 147,
        "column": 6,
        "context": "cific analysis\\n    const enhancedReport = {\\n      ...analysisReport;\\n      pilotSpecific: {\\n        "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/PilotCampaignAnalysis.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 172,
        "column": 79,
        "context": "ting classification accuracy with enhanced testing...');\\n\\n    // Generate base accuracy report\\n    c"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/PilotCampaignAnalysis.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 181,
        "column": 6,
        "context": "cedReport: ClassificationAccuracyReport = {\\n      ...baseAccuracyReport;\\n      pilotEnhancements: {\\n"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/PilotCampaignAnalysis.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 200,
        "column": 79,
        "context": "ting baseline metrics and success rate predictions...');\\n\\n    const successRateAnalysis = await this"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/PilotCampaignAnalysis.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 233,
        "column": 68,
        "context": "e.log('‚è≠Ô∏è Classification tuning disabled, skipping...'),\\n      return {\\n        tuningPerformed: fal"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/PilotCampaignAnalysis.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 240,
        "column": 78,
        "context": "g classification algorithms based on pilot results...');\\n\\n    const tuningResults: ClassificationTun"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/PilotCampaignAnalysis.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 273,
        "column": 62,
        "context": "/ console.log('Re-validating accuracy after tuning...');\\n        const postTuningAccuracy = await th"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/PilotCampaignAnalysis.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 311,
        "column": 60,
        "context": "console.log('Generating comprehensive pilot report...');\\n\\n    const pilotReport: AnalysisReport = {\\n"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/PilotCampaignAnalysis.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 314,
        "column": 6,
        "context": "\\n\\n    const pilotReport: AnalysisReport = {\\n      ...data.codebaseAnalysis;\\n      pilotPhase: {\\n    "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/ProgressMonitoringSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 31,
        "column": 6,
        "context": "\\n      progressStallThreshold: 24, // hours\\n      ...alertThresholds\\n    };\\n\\n    this.loadAlertHisto"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/ProgressMonitoringSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 108,
        "column": 60,
        "context": "console.log('Collecting real-time progress metrics...');\\n\\n    try {\\n      const currentReport = awai"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/ProgressMonitoringSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 318,
        "column": 20,
        "context": "ry(limit?: number): Alert[] {\\n    const alerts = [...this.alertHistory].reverse(), // Most recent fi"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/ProgressMonitoringSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 326,
        "column": 21,
        "context": "r): BuildStabilityRecord[] {\\n    const history = [...this.buildStabilityHistory].reverse(), // Most "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/ProgressMonitoringSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 343,
        "column": 29,
        "context": "Thresholds>): void {\\n    this.alertThresholds = { ...this.alertThresholds, ...newThresholds };\\n    t"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/ProgressMonitoringSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 343,
        "column": 54,
        "context": "this.alertThresholds = { ...this.alertThresholds, ...newThresholds };\\n    this.emit('alert_threshold"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/ProgressMonitoringSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 351,
        "column": 13,
        "context": "AlertThresholds(): AlertThresholds {\\n    return { ...this.alertThresholds };\\n  }\\n\\n  // Private metho"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/ProgressMonitoringSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 358,
        "column": 48,
        "context": "{\\n      // // console.log('Updating dashboard data...');\\n\\n      const [analysisReport, progressMetri"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/ProgressMonitoringSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 549,
        "column": 10,
        "context": "historyData).map((alert: unknown) => ({\\n          ...alert;\\n          timestamp: new Date(alert.time"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/ProgressMonitoringSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 584,
        "column": 10,
        "context": "istoryData).map((record: unknown) => ({\\n          ...record;\\n          timestamp: new Date(record.ti"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/ProgressiveImprovementEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 143,
        "column": 12,
        "context": "  getBatchHistory(): BatchMetrics[] {\\n    return [...this.batchHistory]\\n  }\\n\\n  /**\\n   * Get current "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/ProgressiveImprovementEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 150,
        "column": 13,
        "context": "veConfig(): UnintentionalAnyConfig {\\n    return { ...this.adaptiveConfig };\\n  }\\n\\n  /**\\n   * Set real"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/ProgressiveImprovementEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 464,
        "column": 39,
        "context": "ded config\\n    const effectiveConfig = config ? { ...this.adaptiveConfig, ...config } : this.adaptiv"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/ProgressiveImprovementEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 464,
        "column": 63,
        "context": "ectiveConfig = config ? { ...this.adaptiveConfig, ...config } : this.adaptiveConfig;\\n\\n    const batc"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/ProgressiveImprovementEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 590,
        "column": 39,
        "context": "ded config\\n    const effectiveConfig = config ? { ...this.adaptiveConfig, ...config } : this.adaptiv"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/ProgressiveImprovementEngine.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 590,
        "column": 63,
        "context": "ectiveConfig = config ? { ...this.adaptiveConfig, ...config } : this.adaptiveConfig;\\n\\n    const init"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/SafeTypeReplacer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 178,
        "column": 35,
        "context": "Replacements);\\n          appliedReplacements.push(...result.applied);\\n          failedReplacements.p"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/SafeTypeReplacer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 179,
        "column": 34,
        "context": "esult.applied);\\n          failedReplacements.push(...result.failed);\\n\\n          if (result.failed.le"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/SafeTypeReplacer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 182,
        "column": 35,
        "context": ".length > 0) {\\n            compilationErrors.push(...result.errors);\\n          }\\n        } catch (er"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/SafeTypeReplacer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 185,
        "column": 34,
        "context": "catch (error) {\\n          failedReplacements.push(...fileReplacements);\\n          compilationErrors."
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/SafeTypeReplacer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 217,
        "column": 31,
        "context": "ion.canRollback) {\\n        compilationErrors.push(...rollbackValidation.rollbackErrors);\\n        com"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/SafeTypeReplacer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 484,
        "column": 18,
        "context": "mark all replacements as failed\\n      failed.push(...replacements);\\n      errors.push(error instance"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/SafeTypeReplacer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 657,
        "column": 12,
        "context": "Strategies(): ReplacementStrategy[] {\\n    return [...this.strategies].sort((a, b) => a.priority - b."
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/SafeTypeReplacer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 726,
        "column": 37,
        "context": "unding lines\\n    const allContext = [codeSnippet, ...surroundingLines].join(' ');\\n    if (allContext"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/SafeTypeReplacer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 779,
        "column": 37,
        "context": "unding lines\\n    const allContext = [codeSnippet, ...surroundingLines].join(' ');\\n\\n    // Check for "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/SafeTypeReplacer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 859,
        "column": 39,
        "context": "ction body\\n      const allContext = [codeSnippet, ...surroundingLines].join(' '),;\\n      if (allCont"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/SafeTypeReplacer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 898,
        "column": 37,
        "context": "unding lines\\n    const allContext = [codeSnippet, ...surroundingLines].join(' '),;\\n\\n    // Check for"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/SafeTypeReplacer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1018,
        "column": 37,
        "context": "ent patterns\\n    const allContext = [codeSnippet, ...surroundingLines].join(' ');\\n    if (allContext"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/SafeTypeReplacer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1091,
        "column": 37,
        "context": "} = context;\\n    const allContext = [codeSnippet, ...surroundingLines].join(' ').toLowerCase();\\n\\n   "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/SafeTypeReplacer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1106,
        "column": 37,
        "context": "} = context;\\n    const allContext = [codeSnippet, ...surroundingLines].join(' ').toLowerCase();\\n\\n   "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/SafeTypeReplacer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1122,
        "column": 37,
        "context": "} = context;\\n    const allContext = [codeSnippet, ...surroundingLines].join(' ').toLowerCase();\\n\\n   "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/SafetyValidator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 71,
        "column": 6,
        "context": " 30 seconds\\n      minimumTestCoverage: 0.8,\\n      ...safetyThresholds\\n    };\\n    this.buildCommand ="
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/SafetyValidator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 143,
        "column": 47,
        "context": "e;\\n      compilationResult.compilationErrors.push(...performanceValid.validationErrors);\\n    }\\n\\n    "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/SafetyValidator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 218,
        "column": 18,
        "context": "core + contextScore.score) / 2;\\n    warnings.push(...contextScore.warnings);\\n    recommendations.pus"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/SafetyValidator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 219,
        "column": 25,
        "context": ".contextScore.warnings);\\n    recommendations.push(...contextScore.recommendations);\\n\\n    // Replacem"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/SafetyValidator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 224,
        "column": 18,
        "context": "core + patternScore.score) / 2;\\n    warnings.push(...patternScore.warnings);\\n\\n    // File type safet"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/SafetyValidator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 229,
        "column": 18,
        "context": "tyScore + fileScore.score) / 2;\\n    warnings.push(...fileScore.warnings);\\n\\n    // Validation require"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/SafetyValidator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 552,
        "column": 13,
        "context": "fetyThresholds(): SafetyThresholds {\\n    return { ...this.safetyThresholds };\\n  }\\n\\n  /**\\n   * Update"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/SafetyValidator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 559,
        "column": 30,
        "context": "hresholds>): void {\\n    this.safetyThresholds = { ...this.safetyThresholds, ...newThresholds };\\n  }\\n"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/SafetyValidator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 559,
        "column": 56,
        "context": "is.safetyThresholds = { ...this.safetyThresholds, ...newThresholds };\\n  }\\n}\\n\\nexport interface Safety"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/UnintentionalAnyEliminationCampaign.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 39,
        "column": 6,
        "context": "ONSERVATIVE',\\n      validationFrequency: 5,\\n      ...config\\n    };\\n\\n    this.engine = new Progressiv"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/UnintentionalAnyEliminationCampaign.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 323,
        "column": 6,
        "context": " analysis only\\n    const analysisConfig = {\\n      ...this.config;\\n      maxFilesPerBatch: Math.min(t"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/UnintentionalAnyEliminationCampaign.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 375,
        "column": 81,
        "context": "mentation coverage below 80%, adding documentation...'),\\n\\n        // This would typically iterate th"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/UnintentionalAnyEliminationCampaign.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 435,
        "column": 13,
        "context": "etConfig(): UnintentionalAnyConfig {\\n    return { ...this.config }\\n  }\\n\\n  /**\\n   * Update configurat"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/UnintentionalAnyEliminationCampaign.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 442,
        "column": 20,
        "context": "ntentionalAnyConfig>): void {\\n    this.config = { ...this.config, ...newConfig };\\n  }\\n\\n  /**\\n   * Ge"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/UnintentionalAnyEliminationCampaign.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 442,
        "column": 36,
        "context": "fig>): void {\\n    this.config = { ...this.config, ...newConfig };\\n  }\\n\\n  /**\\n   * Get documentation "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/cli/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 102,
        "column": 38,
        "context": " 'analyze':\\n      executeTool('main', ['analyze', ...remainingArgs]);\\n      break;\\n    case 'classif"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/cli/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 105,
        "column": 39,
        "context": "classify':\\n      executeTool('main', ['classify', ...remainingArgs]);\\n      break;\\n    case 'process"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/cli/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 108,
        "column": 39,
        "context": "'process':\\n      executeTool('batch', ['process', ...remainingArgs]);\\n      break;\\n    case 'watch':"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/cli/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 111,
        "column": 39,
        "context": "e 'watch':\\n      executeTool('monitor', ['start', ...remainingArgs]);\\n      break;\\n    case 'diagnos"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/cli/index.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 114,
        "column": 38,
        "context": "'diagnose':\\n      executeTool('debug', ['system', ...remainingArgs]);\\n      break;\\n    case 'help':\\n"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/config/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 236,
        "column": 24,
        "context": "lAnyConfig {\\n    return {\\n      classification: { ...DEFAULT_CONFIG.classification, ...loadedConfig."
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/config/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 236,
        "column": 58,
        "context": "assification: { ...DEFAULT_CONFIG.classification, ...loadedConfig.classification },\\n      domain: { "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/config/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 237,
        "column": 16,
        "context": "...loadedConfig.classification },\\n      domain: { ...DEFAULT_CONFIG.domain, ...loadedConfig.domain }"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/config/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 237,
        "column": 42,
        "context": "tion },\\n      domain: { ...DEFAULT_CONFIG.domain, ...loadedConfig.domain },\\n      safety: { ...DEFAU"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/config/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 238,
        "column": 16,
        "context": "domain, ...loadedConfig.domain },\\n      safety: { ...DEFAULT_CONFIG.safety, ...loadedConfig.safety }"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/config/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 238,
        "column": 42,
        "context": "main },\\n      safety: { ...DEFAULT_CONFIG.safety, ...loadedConfig.safety },\\n      targets: { ...DEFA"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/config/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 239,
        "column": 17,
        "context": "afety, ...loadedConfig.safety },\\n      targets: { ...DEFAULT_CONFIG.targets, ...loadedConfig.targets"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/config/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 239,
        "column": 44,
        "context": "ty },\\n      targets: { ...DEFAULT_CONFIG.targets, ...loadedConfig.targets },\\n      version: loadedCo"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/config/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 266,
        "column": 13,
        "context": "etConfig(): UnintentionalAnyConfig {\\n    return { ...this.config };\\n  }\\n\\n  /**\\n   * Update configura"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/config/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 273,
        "column": 43,
        "context": "void {\\n    this.config = this.mergeWithDefaults({ ...this.config, ...updates });\\n    this.saveConfig"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/config/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 273,
        "column": 59,
        "context": "config = this.mergeWithDefaults({ ...this.config, ...updates });\\n    this.saveConfig();\\n  }\\n\\n  /**\\n "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/config/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 281,
        "column": 13,
        "context": "tionConfig(): ClassificationConfig {\\n    return { ...this.config.classification };\\n  }\\n\\n  /**\\n   * U"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/config/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 288,
        "column": 35,
        "context": "nfig>): void {\\n    this.config.classification = { ...this.config.classification, ...updates };\\n    t"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/config/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 288,
        "column": 66,
        "context": "classification = { ...this.config.classification, ...updates };\\n    this.saveConfig();\\n  }\\n\\n  /**\\n  "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/config/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 296,
        "column": 13,
        "context": "\\n  getDomainConfig(): DomainConfig {\\n    return { ...this.config.domain };\\n  }\\n\\n  /**\\n   * Update do"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/config/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 303,
        "column": 27,
        "context": "DomainConfig>): void {\\n    this.config.domain = { ...this.config.domain, ...updates };\\n    this.save"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/config/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 303,
        "column": 50,
        "context": "    this.config.domain = { ...this.config.domain, ...updates };\\n    this.saveConfig();\\n  }\\n\\n  /**\\n  "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/config/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 311,
        "column": 13,
        "context": "\\n  getSafetyConfig(): SafetyConfig {\\n    return { ...this.config.safety };\\n  }\\n\\n  /**\\n   * Update sa"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/config/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 318,
        "column": 27,
        "context": "SafetyConfig>): void {\\n    this.config.safety = { ...this.config.safety, ...updates };\\n    this.save"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/config/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 318,
        "column": 50,
        "context": "    this.config.safety = { ...this.config.safety, ...updates };\\n    this.saveConfig();\\n  }\\n\\n  /**\\n  "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/config/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 326,
        "column": 13,
        "context": "\\n  getTargetConfig(): TargetConfig {\\n    return { ...this.config.targets };\\n  }\\n\\n  /**\\n   * Update t"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/config/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 333,
        "column": 28,
        "context": "argetConfig>): void {\\n    this.config.targets = { ...this.config.targets, ...updates };\\n    this.sav"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/config/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 333,
        "column": 52,
        "context": "  this.config.targets = { ...this.config.targets, ...updates };\\n    this.saveConfig();\\n  }\\n\\n  /**\\n  "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/config/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 341,
        "column": 20,
        "context": "/\\n  resetToDefaults(): void {\\n    this.config = { ...DEFAULT_CONFIG };\\n    this.saveConfig();\\n  }\\n\\n "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/config/loader.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 89,
        "column": 19,
        "context": "n, source: unknown): unknown {\\n  const result = { ...target };\\n\\n  for (const key in source) {\\n    if"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/config/loader.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 149,
        "column": 14,
        "context": " = configManager.validateConfig();\\n\\n  errors.push(...validation.errors);\\n\\n  return {\\n    isValid: er"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/deployment/cli.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 72,
        "column": 77,
        "context": " Starting Unintentional Any Elimination deployment...');\\n\\n      let phases = createStandardDeploymen"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/deployment/cli.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 153,
        "column": 59,
        "context": "// console.log('üîç Validating deployment readiness...');\\n\\n      if (options.phase) {\\n        const p"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/deployment/cli.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 167,
        "column": 10,
        "context": " await deploymentManager.executePhase({\\n          ...phase;\\n          tasks: [], // Skip tasks, only"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/deployment/cli.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 258,
        "column": 55,
        "context": " // // console.log('üîÑ Starting rollback procedure...');\\n\\n      if (options.phase) {\\n        // // c"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/deployment/cli.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 267,
        "column": 57,
        "context": " // // console.log('Rolling back entire deployment...');\\n        // Implement full rollback\\n      }\\n"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/deployment/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 199,
        "column": 27,
        "context": "teriaResult.success) {\\n        result.errors.push(...criteriaResult.errors);\\n      }\\n    } catch (er"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/deployment/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 232,
        "column": 15,
        "context": "= spawn(task.command, task.args, {\\n        env: { ...process.env, ...task.environment },\\n        std"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/deployment/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 232,
        "column": 31,
        "context": "mand, task.args, {\\n        env: { ...process.env, ...task.environment },\\n        stdio: 'pipe'\\n     "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/deployment/index.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 439,
        "column": 12,
        "context": "  */\\n  getDeploymentLog(): string[] {\\n    return [...this.deploymentLog]\\n  }\\n\\n  /**\\n   * Save deploy"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/deployment/setup-monitoring.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 496,
        "column": 12,
        "context": " getMetricsHistory(): MetricsData[] {\\n    return [...this.metricsHistory]\\n  }\\n\\n  /**\\n   * Get curren"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/deployment/setup-monitoring.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 581,
        "column": 58,
        "context": "console.log('\\\\nShutting down monitoring dashboard...');\\n  monitoringService.stop();\\n  process.exit("
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/deployment/setup-monitoring.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 596,
        "column": 89,
        "context": "ing and alerting for Unintentional Any Elimination...');\\n\\n  try {\\n    // Setup directories\\n    setup"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/deployment/setup-monitoring.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 619,
        "column": 55,
        "context": "'Starting Unintentional Any Elimination Monitoring...'\\n\\n# Start monitoring service in background\\nnpx"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/deployment/validate-monitoring.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 42,
        "column": 15,
        "context": "\\n  // Check health check endpoints\\n  results.push(...(await validateHealthChecks()));\\n\\n  return resu"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/deployment/validate-monitoring.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 359,
        "column": 61,
        "context": "sole.log('Validating monitoring and alerting setup...\\n');\\n\\n  try {\\n    const results = await valida"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/integration-check.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 6,
        "column": 75,
        "context": "Unintentional Any Elimination Campaign Integration...');\\n\\ntry {\\n  // Check if the main exports work\\n"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/verify-integration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 14,
        "column": 84,
        "context": "Unintentional Any Elimination Campaign Integration...');\\n\\n  try {\\n    // Test 1: Create campaign con"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/verify-integration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 18,
        "column": 52,
        "context": "  // // console.log('\\n1. Testing factory function...');\\n    const controller = createUnintentionalA"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/verify-integration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 28,
        "column": 67,
        "context": ".log('\\n2. Testing campaign configuration creation...');\\n    const campaignConfig =\\n      Unintentio"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/verify-integration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 37,
        "column": 67,
        "context": ".log('\\n3. Testing automation script compatibility...');\\n    const compatibility = UnintentionalAnyI"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/verify-integration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 44,
        "column": 57,
        "context": "// console.log('\\n4. Testing configuration updates...');\\n    const customConfig: Partial<Unintention"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/verify-integration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 60,
        "column": 53,
        "context": " // // console.log('\\n5. Testing metrics retrieval...');\\n    try {\\n      const metrics = await contr"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/verify-integration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 73,
        "column": 50,
        "context": "    // // console.log('\\n6. Testing phase creation...');\\n    const campaign = controller.getUnintent"
      },
      {
        "file": "src/services/celestialCalculations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 178,
        "column": 15,
        "context": "fluences = cached.dominantPlanets;\\n            ? [...cached.dominantPlanets.map(p => p.name), cached"
      },
      {
        "file": "src/services/celestialCalculations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 231,
        "column": 8,
        "context": "and tarot\\n      const astroInfluences = [\\n        ...dominantPlanets.map(p => p.name),,;\\n        zod"
      },
      {
        "file": "src/services/celestialCalculations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 233,
        "column": 8,
        "context": "s.map(p => p.name),,;\\n        zodiacSign,\\n        ...tarotInfluences.map(t => t.name),,;\\n        'al"
      },
      {
        "file": "src/services/celestialCalculations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 454,
        "column": 8,
        "context": " safeAlignment.astrologicalInfluences = [\\n        ...(safeAlignment.dominantPlanets?.map(p => p.name"
      },
      {
        "file": "src/services/celestialCalculations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 733,
        "column": 12,
        "context": "        dominantPlanets[sunIndex] = {\\n            ...dominantPlanets[sunIndex],\\n            effect: "
      },
      {
        "file": "src/services/celestialCalculations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 767,
        "column": 10,
        "context": "      dominantPlanets[jupiterIndex] = {\\n          ...dominantPlanets[jupiterIndex],\\n          influe"
      },
      {
        "file": "src/services/celestialCalculations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 785,
        "column": 10,
        "context": "       dominantPlanets[saturnIndex] = {\\n          ...dominantPlanets[saturnIndex],\\n          influen"
      },
      {
        "file": "src/services/celestialCalculations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1093,
        "column": 45,
        "context": "text\\n      const balance: ElementalProperties = { ...alignment.elementalBalance } as ElementalProper"
      },
      {
        "file": "src/services/celestialCalculations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1579,
        "column": 57,
        "context": "/ Similar mappings for cups, swords, and pentacles...\\n      cups: {\\n        upright: [\\n          'Lo"
      },
      {
        "file": "src/services/celestialCalculations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 255,
        "column": 7,
        "context": "nt and includes tarot influences and 'all'\\n      } as unknown as CelestialAlignment;\\n\\n      // Cache"
      },
      {
        "file": "src/services/celestialCalculations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 408,
        "column": 5,
        "context": "lInfluences: ['Sun', 'Moon', 'libra', 'all']\\n    } as unknown as CelestialAlignment;\\n\\n    // Overrid"
      },
      {
        "file": "src/services/celestialCalculations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 483,
        "column": 5,
        "context": "Ensure this is always present and has values\\n    } as unknown as CelestialAlignment;\\n  }\\n\\n  /**\\n   *"
      },
      {
        "file": "src/services/errorHandler.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 98,
        "column": 85,
        "context": "tion(error, { extra: { type, severity, component, ...context } });\\n\\n    return {\\n      error,\\n      "
      },
      {
        "file": "src/services/examples/UnifiedScoringExample.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 319,
        "column": 8,
        "context": "{\\n      const context: ScoringContext = {\\n        ...baseContext,\\n        item,\\n      };\\n\\n      cons"
      },
      {
        "file": "src/services/ingredientMappingService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 74,
        "column": 28,
        "context": "ay(seasonalDishes)) {\\n            allRecipes.push(...(seasonalDishes as unknown as Recipe[]))\\n      "
      },
      {
        "file": "src/services/ingredientMappingService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 289,
        "column": 32,
        "context": "kest combinations\\n    const sortedCombinations = [...combinations].sort((a, b) => b.compatibility - "
      },
      {
        "file": "src/services/ingredientMappingService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 74,
        "column": 46,
        "context": ") {\\n            allRecipes.push(...(seasonalDishes as unknown as Recipe[]))\\n          }\\n        });\\n"
      },
      {
        "file": "src/services/ingredientMappingService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 82,
        "column": 16,
        "context": "ilterRecipesByIngredientMappings(\\n      allRecipes as unknown as Recipe[],\\n      options.elementalTa"
      },
      {
        "file": "src/services/ingredientMappingService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 130,
        "column": 48,
        "context": ";\\n          originalIngredient.elementalProperties as unknown as ElementalProperties;\\n          mapp"
      },
      {
        "file": "src/services/ingredientMappingService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 131,
        "column": 37,
        "context": "lProperties;\\n          mapping.elementalProperties as unknown as ElementalProperties\\n        ),\\n\\n   "
      },
      {
        "file": "src/services/ingredientMappingService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 139,
        "column": 48,
        "context": "(\\n          originalIngredient.elementalProperties as unknown as ElementalProperties;\\n          mapp"
      },
      {
        "file": "src/services/ingredientMappingService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 140,
        "column": 37,
        "context": "lProperties;\\n          mapping.elementalProperties as unknown as ElementalProperties\\n        ),\\n    "
      },
      {
        "file": "src/services/ingredientMappingService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 180,
        "column": 34,
        "context": "talSimilarity(;\\n      mapping1.elementalProperties as unknown as ElementalProperties;\\n      mapping2"
      },
      {
        "file": "src/services/ingredientMappingService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 181,
        "column": 34,
        "context": "ntalProperties;\\n      mapping2.elementalProperties as unknown as ElementalProperties\\n    );\\n\\n    // "
      },
      {
        "file": "src/services/ingredientMappingService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 267,
        "column": 26,
        "context": "alculateCompatibility(;\\n            ing1.matchedTo as unknown as IngredientMapping;\\n            ing2"
      },
      {
        "file": "src/services/ingredientMappingService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 268,
        "column": 26,
        "context": "n as IngredientMapping;\\n            ing2.matchedTo as unknown as IngredientMapping\\n          ),\\n\\n   "
      },
      {
        "file": "src/services/initializationService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 209,
        "column": 6,
        "context": "ipe[] {\\n    return recipes.map(recipe => ({\\n      ...recipe,\\n      score: this.calculateRecipeScore("
      },
      {
        "file": "src/services/linting/AutomatedLintingFixer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 131,
        "column": 6,
        "context": "logical*',\\n        '**/*campaign*'\\n      ],\\n      ...safetyProtocols\\n    };\\n  }\\n\\n  /**\\n   * Apply au"
      },
      {
        "file": "src/services/linting/AutomatedLintingFixer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 143,
        "column": 71,
        "context": "ting automated linting fixes with safety protocols...');\\n\\n    const batchOptions: BatchProcessingOpt"
      },
      {
        "file": "src/services/linting/AutomatedLintingFixer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 152,
        "column": 6,
        "context": "  createBackups: true,\\n      dryRun: false,\\n      ...options\\n    };\\n\\n    const result: AutomatedFixR"
      },
      {
        "file": "src/services/linting/AutomatedLintingFixer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 178,
        "column": 47,
        "context": " {\\n        log.info('üîç Running pre-fix validation...');\\n        const preValidation = await this.ru"
      },
      {
        "file": "src/services/linting/AutomatedLintingFixer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 180,
        "column": 38,
        "context": "lidation();\\n        result.validationResults.push(...preValidation);\\n\\n        if (preValidation.some"
      },
      {
        "file": "src/services/linting/AutomatedLintingFixer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 189,
        "column": 36,
        "context": "leRollback) {\\n        log.info('üíæ Creating backup...');\\n        this.currentRollbackInfo = await th"
      },
      {
        "file": "src/services/linting/AutomatedLintingFixer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 215,
        "column": 37,
        "context": "ailedIssues;\\n          result.processedFiles.push(...batchResult.processedFiles);\\n          result.e"
      },
      {
        "file": "src/services/linting/AutomatedLintingFixer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 216,
        "column": 29,
        "context": "ult.processedFiles);\\n          result.errors.push(...batchResult.errors);\\n\\n          // Validate aft"
      },
      {
        "file": "src/services/linting/AutomatedLintingFixer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 221,
        "column": 42,
        "context": "tion();\\n            result.validationResults.push(...batchValidation);\\n\\n            if (batchValidat"
      },
      {
        "file": "src/services/linting/AutomatedLintingFixer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 256,
        "column": 44,
        "context": "ix) {\\n        log.info('‚úÖ Running final validation...');\\n        const finalValidation = await this."
      },
      {
        "file": "src/services/linting/AutomatedLintingFixer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 258,
        "column": 38,
        "context": "lidation();\\n        result.validationResults.push(...finalValidation);\\n\\n        const buildSuccess ="
      },
      {
        "file": "src/services/linting/AutomatedLintingFixer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 285,
        "column": 50,
        "context": "        log.info('üîÑ Performing emergency rollback...');\\n        await this.performRollback();\\n     "
      },
      {
        "file": "src/services/linting/AutomatedLintingFixer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 310,
        "column": 42,
        "context": "sult> {\\n    log.info('üßπ Handling unused variables...');\\n\\n    const fixOptions: UnusedVariableFixOpt"
      },
      {
        "file": "src/services/linting/AutomatedLintingFixer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 318,
        "column": 6,
        "context": "tFiles: false,\\n      skipDomainFiles: true,\\n      ...options\\n    };\\n\\n    const unusedVarIssues = iss"
      },
      {
        "file": "src/services/linting/AutomatedLintingFixer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 407,
        "column": 45,
        "context": "t> {\\n    log.info('üì¶ Optimizing import statements...');\\n\\n    const importOptions: ImportOptimizatio"
      },
      {
        "file": "src/services/linting/AutomatedLintingFixer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 415,
        "column": 6,
        "context": "rveComments: true,\\n      sortImports: true,\\n      ...options\\n    };\\n\\n    const importIssues = issues"
      },
      {
        "file": "src/services/linting/AutomatedLintingFixer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 499,
        "column": 44,
        "context": "lt> {\\n    log.info('üè∑Ô∏è Improving type annotations...');\\n\\n    const typeOptions: TypeAnnotationOptio"
      },
      {
        "file": "src/services/linting/AutomatedLintingFixer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 506,
        "column": 6,
        "context": "lanets/**'],\\n      maxComplexity: 'simple',\\n      ...options\\n    };\\n\\n    const typeIssues = issues.f"
      },
      {
        "file": "src/services/linting/AutomatedLintingFixer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 589,
        "column": 49,
        "context": "\\n    log.info('üîç Running comprehensive validation...');\\n    return await this.runValidation();\\n  }\\n"
      },
      {
        "file": "src/services/linting/AutomatedLintingIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 99,
        "column": 52,
        "context": "  log.info('üöÄ Starting automated linting workflow...');\\n\\n    try {\\n      // Step 1: Comprehensive A"
      },
      {
        "file": "src/services/linting/AutomatedLintingIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 109,
        "column": 8,
        "context": ": true,\\n        generateStrategies: true,\\n        ...options.analysisOptions\\n      });\\n\\n      const "
      },
      {
        "file": "src/services/linting/AutomatedLintingIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 169,
        "column": 47,
        "context": " {\\n    log.info('‚ö° Executing quick automated fixes...');\\n\\n    try {\\n      // Quick analysis to ident"
      },
      {
        "file": "src/services/linting/AutomatedLintingIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 236,
        "column": 50,
        "context": "    log.info('üßπ Executing unused variable cleanup...');\\n\\n    try {\\n      // Analyze for unused vari"
      },
      {
        "file": "src/services/linting/AutomatedLintingIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 313,
        "column": 46,
        "context": "> {\\n    log.info('üì¶ Executing import optimization...');\\n\\n    try {\\n      // Analyze for import-rela"
      },
      {
        "file": "src/services/linting/AutomatedLintingIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 404,
        "column": 6,
        "context": "*campaign*',\\n        '**/test*/**'\\n      ],\\n      ...options.safetyProtocols\\n    };\\n  }\\n\\n  private a"
      },
      {
        "file": "src/services/linting/AutomatedLintingIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 419,
        "column": 6,
        "context": "rue,\\n      dryRun: options.dryRun || false,\\n      ...options.batchProcessingOptions\\n    };\\n\\n    // M"
      },
      {
        "file": "src/services/linting/AutomatedLintingIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 440,
        "column": 64,
        "context": "fo('üßπ Running specialized unused variable cleanup...');\\n        fixResults.unusedVariables = await "
      },
      {
        "file": "src/services/linting/AutomatedLintingIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 454,
        "column": 60,
        "context": "g.info('üì¶ Running specialized import optimization...');\\n        fixResults.imports = await this.aut"
      },
      {
        "file": "src/services/linting/AutomatedLintingIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 468,
        "column": 58,
        "context": "log.info('üè∑Ô∏è Running type annotation improvements...');\\n        fixResults.typeAnnotations = await "
      },
      {
        "file": "src/services/linting/DomainContextDetector.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 206,
        "column": 24,
        "context": "ileContent(absolutePath);\\n        indicators.push(...contentAnalysis.indicators);\\n        confidence"
      },
      {
        "file": "src/services/linting/ErrorClassificationSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 567,
        "column": 23,
        "context": "  ): ErrorClassification {\\n    const enhanced = { ...classification };\\n\\n    // Update auto-fix capab"
      },
      {
        "file": "src/services/linting/LintingAlertingSystem.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 90,
        "column": 60,
        "context": "console.log(`üö® Processing ${alerts.length} alerts...`);\\n\\n    // Filter alerts based on cooldown and"
      },
      {
        "file": "src/services/linting/LintingAnalysisService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 98,
        "column": 56,
        "context": "g.info('üöÄ Starting comprehensive linting analysis...');\\n\\n    try {\\n      // Step 1: Analyze all lin"
      },
      {
        "file": "src/services/linting/LintingAnalysisService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 102,
        "column": 43,
        "context": "issues\\n      log.info('üìä Analyzing linting issues...');\\n      const categorizedErrors = await this."
      },
      {
        "file": "src/services/linting/LintingAnalysisService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 106,
        "column": 37,
        "context": "led analysis\\n      log.info('üîç Classifying errors...');\\n      const classifications = await this.cl"
      },
      {
        "file": "src/services/linting/LintingAnalysisService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 112,
        "column": 47,
        "context": " {\\n        log.info('üèóÔ∏è Analyzing domain contexts...');\\n        fileAnalyses = await this.analyzeFi"
      },
      {
        "file": "src/services/linting/LintingAnalysisService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 121,
        "column": 53,
        "context": "     log.info('üéØ Generating resolution strategies...');\\n        const strategyResult = await this.g"
      },
      {
        "file": "src/services/linting/LintingAnalysisService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 133,
        "column": 45,
        "context": "ions\\n      log.info('üìã Generating recommendations...');\\n      const summary = this.generateSummary("
      },
      {
        "file": "src/services/linting/LintingAnalysisService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 184,
        "column": 49,
        "context": "\\n    log.info('‚ö° Performing quick linting analysis...');\\n\\n    const categorizedErrors = await this.e"
      },
      {
        "file": "src/services/linting/LintingAnalysisService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 291,
        "column": 6,
        "context": "derate',\\n      timeConstraints: 'moderate',\\n      ...projectContext\\n    };\\n\\n    for (const issue of "
      },
      {
        "file": "src/services/linting/LintingAnalysisService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 519,
        "column": 20,
        "context": "confidenceScores.length || 0;\\n    const sorted = [...confidenceScores].sort((a, b) => a - b);\\n    co"
      },
      {
        "file": "src/services/linting/LintingCampaignIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 184,
        "column": 20,
        "context": "await this.executeTool(tool);\\n        issues.push(...result.issues);\\n        recommendations.push(.."
      },
      {
        "file": "src/services/linting/LintingCampaignIntegration.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 185,
        "column": 29,
        "context": "h(...result.issues);\\n        recommendations.push(...result.recommendations);\\n      } catch (error) "
      },
      {
        "file": "src/services/linting/LintingErrorAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 122,
        "column": 67,
        "context": "('üîç Starting comprehensive linting error analysis...');\\n\\n    try {\\n      // Run ESLint to get all i"
      },
      {
        "file": "src/services/linting/LintingErrorAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 151,
        "column": 48,
        "context": "{\\n    void log.info('üéØ Generating resolution plan...');\\n\\n    const phases: ResolutionPhase[] = [];\\n"
      },
      {
        "file": "src/services/linting/LintingErrorAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 172,
        "column": 6,
        "context": "edium risk)\\n    const importStyleIssues = [\\n      ...(categorizedErrors.byCategory['import'] || []),"
      },
      {
        "file": "src/services/linting/LintingErrorAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 173,
        "column": 6,
        "context": "egorizedErrors.byCategory['import'] || []),\\n      ...(categorizedErrors.byCategory['style'] || [])\\n "
      },
      {
        "file": "src/services/linting/LintingErrorAnalyzer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 290,
        "column": 12,
        "context": "t.messages) {\\n          issues.push({\\n            ...message;\\n            filePath: fileResult.fileP"
      },
      {
        "file": "src/services/linting/LintingProgressTracker.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 87,
        "column": 45,
        "context": "ry {\\n      logger.info('Collecting linting metrics...');\\n\\n      // Run ESLint with JSON output\\n     "
      },
      {
        "file": "src/services/linting/LintingProgressTracker.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 96,
        "column": 8,
        "context": "    const fullMetrics: LintingMetrics = {\\n        ...metrics;\\n        timestamp: new Date(),\\n       "
      },
      {
        "file": "src/services/linting/LintingQualityGates.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 348,
        "column": 10,
        "context": ".length > 0) {\\n        violations.push(\\n          ...parserErrors.map(error => ({\\n            type: "
      },
      {
        "file": "src/services/linting/LintingValidationDashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 124,
        "column": 67,
        "context": ".log('üîç Starting comprehensive linting validation...');\\n\\n    const startTime = Date.now();\\n    cons"
      },
      {
        "file": "src/services/linting/PerformanceMonitoringService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 58,
        "column": 6,
        "context": "      minPerformanceImprovement: 60, // 60%\\n      ...thresholds\\n    };\\n\\n    this.loadExistingMetrics"
      },
      {
        "file": "src/services/linting/PerformanceMonitoringService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 449,
        "column": 21,
        "context": "alTime}ms)`\\n      });\\n    }\\n\\n    this.alerts.push(...alerts);\\n\\n    // Keep only last 50 alerts\\n    i"
      },
      {
        "file": "src/services/linting/PerformanceMonitoringService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 563,
        "column": 10,
        "context": "metrics = parsed.map((m: unknown) => ({\\n          ...m;\\n          timestamp: new Date(m.timestamp)\\n "
      },
      {
        "file": "src/services/linting/PerformanceMonitoringService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 579,
        "column": 10,
        "context": ".alerts = parsed.map((a: unknown) => ({\\n          ...a;\\n          timestamp: new Date(a.timestamp)\\n "
      },
      {
        "file": "src/services/linting/ResolutionStrategyGenerator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 164,
        "column": 23,
        "context": "tial<ResolutionStrategy> {\\n    const enhanced = { ...baseStrategy };\\n\\n    // Get domain-specific enh"
      },
      {
        "file": "src/services/linting/ResolutionStrategyGenerator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 170,
        "column": 24,
        "context": "rge domain-specific steps\\n      enhanced.steps = [...(enhanced.steps || []), ...(domainStrategy.step"
      },
      {
        "file": "src/services/linting/ResolutionStrategyGenerator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 170,
        "column": 51,
        "context": "     enhanced.steps = [...(enhanced.steps || []), ...(domainStrategy.steps || [])];\\n\\n      // Merge "
      },
      {
        "file": "src/services/linting/ResolutionStrategyGenerator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 174,
        "column": 8,
        "context": "quisites\\n      enhanced.prerequisites = [\\n        ...(enhanced.prerequisites || []),\\n        ...(dom"
      },
      {
        "file": "src/services/linting/ResolutionStrategyGenerator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 175,
        "column": 8,
        "context": "       ...(enhanced.prerequisites || []),\\n        ...(domainStrategy.prerequisites || [])\\n      ];\\n\\n"
      },
      {
        "file": "src/services/linting/ResolutionStrategyGenerator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 180,
        "column": 8,
        "context": "      enhanced.validationRequirements = [\\n        ...(enhanced.validationRequirements || []),\\n      "
      },
      {
        "file": "src/services/linting/ResolutionStrategyGenerator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 181,
        "column": 8,
        "context": ".(enhanced.validationRequirements || []),\\n        ...(domainStrategy.validationRequirements || [])\\n "
      },
      {
        "file": "src/services/linting/ResolutionStrategyGenerator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 212,
        "column": 23,
        "context": "tial<ResolutionStrategy> {\\n    const adjusted = { ...strategy };\\n\\n    // Adjust based on risk tolera"
      },
      {
        "file": "src/services/linting/ResolutionStrategyGenerator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 235,
        "column": 8,
        "context": "s = (adjusted.steps || []).map(step => ({\\n        ...step;\\n        automatable: step.automatable || "
      },
      {
        "file": "src/services/linting/ResolutionStrategyGenerator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 613,
        "column": 20,
        "context": "level, then by estimated time\\n    const sorted = [...strategies].sort((a, b) => {\\n      const priori"
      },
      {
        "file": "src/services/linting/SafeUnusedImportRemover.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 76,
        "column": 53,
        "context": " log.info('üîç Starting Safe Unused Import Analysis...\\n');\\n\\n    const result: ImportRemovalResult = "
      },
      {
        "file": "src/services/linting/SafeUnusedImportRemover.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 143,
        "column": 53,
        "context": " log.info('üîç Analyzing unused imports from ESLint...');\\n\\n    try {\\n      const lintOutput = execSyn"
      },
      {
        "file": "src/services/linting/SafeUnusedImportRemover.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 201,
        "column": 53,
        "context": " log.info('üìã Categorizing imports by safety level...');\\n\\n    const categorized = {\\n      safe: [] a"
      },
      {
        "file": "src/services/linting/SafeUnusedImportRemover.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 321,
        "column": 21,
        "context": "ized.preserve.length > 10) {\\n        log.info(`   ... and ${categorized.preserve.length - 10} more`)"
      },
      {
        "file": "src/services/linting/SafeUnusedImportRemover.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 329,
        "column": 21,
        "context": "gorized.review.length > 5) {\\n        log.info(`   ... and ${categorized.review.length - 5} more`);\\n "
      },
      {
        "file": "src/services/linting/SafeUnusedImportRemover.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 360,
        "column": 71,
        "context": "Removing ${safeImports.length} safe unused imports...`);\\n\\n    try {\\n      // Run ESLint auto-fix wit"
      },
      {
        "file": "src/services/linting/SafeUnusedImportRemover.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 387,
        "column": 37,
        "context": "e<boolean> {\\n    log.info('\\nüîç Validating changes...');\\n\\n    try {\\n      // Check TypeScript compil"
      },
      {
        "file": "src/services/linting/UnusedImportProcessor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 39,
        "column": 42,
        "context": "sult> {\\n    log.info('üßπ Processing import cleanup...\\n');\\n\\n    const result: ImportCleanupResult = "
      },
      {
        "file": "src/services/linting/UnusedImportProcessor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 69,
        "column": 35,
        "context": "romise<void> {\\n    log.info('üìã Organizing imports...');\\n\\n    try {\\n      const output = execSync('y"
      },
      {
        "file": "src/services/linting/UnusedImportProcessor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 99,
        "column": 42,
        "context": "void> {\\n    log.info('üóëÔ∏è  Removing unused imports...');\\n\\n    try {\\n      // Create a focused ESLint"
      },
      {
        "file": "src/services/linting/UnusedImportProcessor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 194,
        "column": 44,
        "context": "an> {\\n    log.info('\\nüîç Validating import changes...');\\n\\n    try {\\n      // Check TypeScript compil"
      },
      {
        "file": "src/services/linting/UnusedVariableProcessor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 64,
        "column": 51,
        "context": "   log.info('üîç Analyzing unused variable warnings...');\\n\\n    const issues = await this.detectUnused"
      },
      {
        "file": "src/services/linting/UnusedVariableProcessor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 85,
        "column": 38,
        "context": "ed.skipped;\\n        result.preservedCritical.push(...processed.preserved);\\n      } catch (error) {\\n "
      },
      {
        "file": "src/services/linting/UnusedVariableProcessor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 396,
        "column": 37,
        "context": " {\\n    try {\\n      log.info('üîç Validating changes...');\\n\\n      // Check if TypeScript compilation s"
      },
      {
        "file": "src/services/linting/UnusedVariableProcessor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 430,
        "column": 20,
        "context": "servedCritical.length > 10) {\\n        log.info(`  ... and ${result.preservedCritical.length - 10} mo"
      },
      {
        "file": "src/services/linting/UnusedVariableTargetedFixer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 47,
        "column": 50,
        "context": "    log.info('üîß Fixing unused function parameters...\\n');\\n\\n    const result: FixResult = {\\n      fi"
      },
      {
        "file": "src/services/linting/UnusedVariableTargetedFixer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 95,
        "column": 53,
        "context": " log.info('üîß Fixing unused destructured variables...\\n');\\n\\n    const result: FixResult = {\\n      fi"
      },
      {
        "file": "src/services/linting/UnusedVariableTargetedFixer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 142,
        "column": 40,
        "context": "Result> {\\n    log.info('üîß Removing unused imports...\\n');\\n\\n    const result: FixResult = {\\n      fi"
      },
      {
        "file": "src/services/linting/UnusedVariableTargetedFixer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 349,
        "column": 37,
        "context": "e<boolean> {\\n    log.info('\\nüîç Validating changes...');\\n\\n    try {\\n      execSync('yarn build', {\\n "
      },
      {
        "file": "src/services/linting/ZeroErrorAchievementDashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 97,
        "column": 69,
        "context": "og('üéØ Generating Zero-Error Achievement Dashboard...\\n');\\n\\n    const startTime = Date.now();\\n\\n    /"
      },
      {
        "file": "src/services/linting/ZeroErrorAchievementDashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 138,
        "column": 93,
        "context": "e monitoring (${intervalMinutes} minute intervals)...\\n`);\\n\\n    let lastMetrics: LintingMetrics | nu"
      },
      {
        "file": "src/services/linting/ZeroErrorAchievementDashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 281,
        "column": 8,
        "context": "ine\\n      ),\\n\\n      updatedTargets.push({\\n        ...defaultTarget;\\n        currentValue,\\n        pr"
      },
      {
        "file": "src/services/linting/ZeroErrorAchievementDashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 285,
        "column": 8,
        "context": "   progress,\\n        estimatedCompletion,\\n        ...(existingTarget && { deadline: existingTarget.d"
      },
      {
        "file": "src/services/linting/ZeroErrorAchievementDashboard.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 388,
        "column": 68,
        "context": "ole.log(`üîß Running maintenance: ${procedure.name}...`);\\n\\n        try {\\n          const result = awa"
      },
      {
        "file": "src/services/linting/demo.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 187,
        "column": 25,
        "context": "// Run the demonstration\\n// Starting demonstration...\\n\\ntry {\\n  demonstrateErrorClassification();\\n  d"
      },
      {
        "file": "src/services/linting/demo.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 195,
        "column": 34,
        "context": "commendations(;\\n        mockAnalysis.domainContext as unknown as {\\n          type: string,\\n         "
      },
      {
        "file": "src/services/linting/runUnusedVariableCleanup.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 31,
        "column": 33,
        "context": "anizeImports() {\\n  log.info('üìã Organizing imports...');\\n\\n  try {\\n    execSync('yarn lint --fix --ru"
      },
      {
        "file": "src/services/linting/runUnusedVariableCleanup.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 46,
        "column": 54,
        "context": "g.info('üîß Applying targeted unused variable fixes...');\\n\\n  // Create a temporary ESLint config that"
      },
      {
        "file": "src/services/linting/runUnusedVariableCleanup.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 116,
        "column": 31,
        "context": " validateBuild() {\\n  log.info('üîç Validating build...');\\n\\n  try {\\n    execSync('yarn build', {\\n     "
      },
      {
        "file": "src/services/linting/runUnusedVariableCleanup.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 28,
        "column": 32,
        "context": " // Create backup\\n    log.info('üíæ Creating backup...');\\n    execSync('git stash push -m 'Pre unused"
      },
      {
        "file": "src/services/linting/runUnusedVariableCleanup.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 41,
        "column": 55,
        "context": " log.info('\\n‚ùå Validation failed, restoring backup...'),\\n      execSync('git stash pop', { stdio: 'i"
      },
      {
        "file": "src/services/loadingStateManager.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 14,
        "column": 26,
        "context": " {\\n    isLoading: true,\\n    message: 'Initializing...',\\n    progress: 0,\\n    stage: 'initial',\\n  };\\n"
      },
      {
        "file": "src/services/loadingStateManager.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 20,
        "column": 50,
        "context": "    initial: { progress: 0, message: 'Initializing...' },\\n    recipes: { progress: 25, message: 'Loa"
      },
      {
        "file": "src/services/loadingStateManager.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 21,
        "column": 54,
        "context": "recipes: { progress: 25, message: 'Loading recipes...' },\\n    celestial: { progress: 50, message: 'C"
      },
      {
        "file": "src/services/loadingStateManager.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 22,
        "column": 73,
        "context": "ss: 50, message: 'Calculating celestial alignments...' },\\n    processing: { progress: 75, message: '"
      },
      {
        "file": "src/services/loadingStateManager.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 23,
        "column": 57,
        "context": "cessing: { progress: 75, message: 'Processing data...' },\\n    complete: { progress: 100, message: 'C"
      },
      {
        "file": "src/services/loadingStateManager.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 34,
        "column": 26,
        "context": "artial<LoadingState>) {\\n    this.currentState = { ...this.currentState, ...updates };\\n    this.notif"
      },
      {
        "file": "src/services/loadingStateManager.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 34,
        "column": 48,
        "context": "{\\n    this.currentState = { ...this.currentState, ...updates };\\n    this.notifySubscribers();\\n  }\\n\\n "
      },
      {
        "file": "src/services/loadingStateManager.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 47,
        "column": 6,
        "context": "  this.updateState({\\n      isLoading: true,\\n      ...stageData,\\n      stage,\\n    });\\n  }\\n\\n  updatePr"
      },
      {
        "file": "src/services/loadingStateManager.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 55,
        "column": 6,
        "context": "g) {\\n    this.updateState({\\n      progress,\\n      ...(message ? { message } : {}),\\n    });\\n  }\\n\\n  se"
      },
      {
        "file": "src/services/loadingStateManager.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 71,
        "column": 6,
        "context": " this.updateState({\\n      isLoading: false,\\n      ...this.STAGES.complete,\\n      stage: 'complete',\\n"
      },
      {
        "file": "src/services/loadingStateManager.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 79,
        "column": 6,
        "context": "  this.updateState({\\n      isLoading: true,\\n      ...this.STAGES.initial,\\n      stage: 'initial',\\n  "
      },
      {
        "file": "src/services/recipeData.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 309,
        "column": 38,
        "context": "{\\n    try {\\n      logger.info('Loading recipe data...');\\n\\n      // Create recipes from mappings safe"
      },
      {
        "file": "src/services/recipeData.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 324,
        "column": 12,
        "context": "([id, mapping]) => ({\\n            id,\\n            ...mapping\\n          }));\\n\\n      this.recipes = ma"
      },
      {
        "file": "src/services/recipeData.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 419,
        "column": 8,
        "context": "lid\\n      return ensureRecipeProperties({\\n        ...recipe;\\n        elementalProperties: ((withElem"
      },
      {
        "file": "src/services/recipeData.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 442,
        "column": 58,
        "context": "logger.info('Waiting for recipe data to initialize...');\\n        if (this.initPromise) {\\n          a"
      },
      {
        "file": "src/services/recipeRecommendations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 51,
        "column": 10,
        "context": "es = recipes;\\n        .map(recipe => ({\\n          ...recipe;\\n          score: this.calculateRecipeSc"
      },
      {
        "file": "src/services/unifiedNutritionalService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 102,
        "column": 14,
        "context": "\\n            nutritionalProfile = {\\n              ...unifiedProfile;\\n              // Convert phyton"
      },
      {
        "file": "src/services/unifiedNutritionalService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 108,
        "column": 44,
        "context": "duce(\\n                      (acc, nutrient) => ({ ...acc, [nutrient]: 1.0 }),\\n                      "
      },
      {
        "file": "src/services/unifiedNutritionalService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 131,
        "column": 16,
        "context": "           nutritionalProfile = {\\n                ...alchemyProfile;\\n                // Convert phyt"
      },
      {
        "file": "src/services/unifiedNutritionalService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 137,
        "column": 46,
        "context": "ce(\\n                        (acc, nutrient) => ({ ...acc, [nutrient]: 1.0 }),\\n                      "
      },
      {
        "file": "src/services/unifiedNutritionalService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 188,
        "column": 8,
        "context": "Profile: AlchemicalNutritionalProfile = {\\n        ...enhanced;\\n        // Ensure all required Alchem"
      },
      {
        "file": "src/services/unifiedNutritionalService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 330,
        "column": 6,
        "context": "ommendations({\\n      season: currentSeason,\\n      ...additionalCriteria\\n    });\\n  }\\n\\n  /**\\n   * Get "
      },
      {
        "file": "src/services/unifiedNutritionalService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 347,
        "column": 6,
        "context": "lRecommendations({\\n      currentZodiacSign,\\n      ...additionalCriteria\\n    });\\n  }\\n\\n  /**\\n   * Get "
      },
      {
        "file": "src/services/unifiedNutritionalService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 364,
        "column": 6,
        "context": "ionalRecommendations({\\n      planetaryHour,\\n      ...additionalCriteria\\n    });\\n  }\\n\\n  // ===== NUTR"
      },
      {
        "file": "src/services/unifiedNutritionalService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 115,
        "column": 13,
        "context": "g, number>)\\n                    : {}\\n            } as unknown as NutritionalProfile;\\n          }\\n   "
      },
      {
        "file": "src/services/unifiedNutritionalService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 144,
        "column": 15,
        "context": "umber>)\\n                      : {}\\n              } as unknown as NutritionalProfile;\\n            }\\n "
      },
      {
        "file": "src/services/unifiedNutritionalService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 175,
        "column": 49,
        "context": "\\n      const systemData = unifiedNutritionalSystem as unknown as any;\\n      const enhanceMethod = sy"
      },
      {
        "file": "src/services/unifiedNutritionalService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 184,
        "column": 29,
        "context": "nalProfile, context)\\n        : (nutritionalProfile as unknown as AlchemicalNutritionalProfile);\\n\\n   "
      },
      {
        "file": "src/services/unifiedNutritionalService.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 223,
        "column": 47,
        "context": "on\\n    const systemData = unifiedNutritionalSystem as unknown as any;\\n    const calculateKalchmMetho"
      },
      {
        "file": "src/services/utils/apiResponseUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 34,
        "column": 6,
        "context": "mp: Date.now(),\\n      version: API_VERSION,\\n      ...metadata\\n    }\\n  };\\n}\\n\\n/**\\n * Creates a success"
      },
      {
        "file": "src/tests/mockData.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 5,
        "column": 5,
        "context": " {\\n  phase: 'waxing_crescent' as LunarPhase,\\n  // ... other properties\\n};\\n"
      },
      {
        "file": "src/types/ExtendedRecipe.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 154,
        "column": 4,
        "context": "(recipe: Recipe): ExtendedRecipe {\\n  return {\\n    ...recipe;\\n    id: recipe.id || 'recipe-' + Date.n"
      },
      {
        "file": "src/types/ExtendedRecipe.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 163,
        "column": 8,
        "context": "redient as unknown as any;\\n      return {\\n        ...ingredient;\\n        id:\\n          typeof extend"
      },
      {
        "file": "src/types/ExtendedRecipe.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 161,
        "column": 43,
        "context": "t => {\\n      const extendedIngredient = ingredient as unknown as any;\\n      return {\\n        ...ingr"
      },
      {
        "file": "src/types/alchemy.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1277,
        "column": 24,
        "context": "re', value: 0 },\\n      ),\\n      balance: Math.max(...Object.values(prop)) - Math.min(...Object.value"
      },
      {
        "file": "src/types/alchemy.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1277,
        "column": 59,
        "context": "ance: Math.max(...Object.values(prop)) - Math.min(...Object.values(prop))\\n    }));\\n\\n    // Analyze i"
      },
      {
        "file": "src/types/alchemy.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1471,
        "column": 24,
        "context": "ot', value: 0 },\\n      ),\\n      balance: Math.max(...Object.values(chakra)) - Math.min(...Object.val"
      },
      {
        "file": "src/types/alchemy.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1471,
        "column": 61,
        "context": "ce: Math.max(...Object.values(chakra)) - Math.min(...Object.values(chakra))\\n    }));\\n\\n    // Analyze"
      },
      {
        "file": "src/types/alchemy.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1328,
        "column": 23,
        "context": "   scoreRange: calc.score,\\n      confidence: (calc as unknown as AlchemicalCalculationResult).confid"
      },
      {
        "file": "src/types/alchemy.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1329,
        "column": 24,
        "context": "nResult).confidence || 0,\\n      factorCount: (calc as unknown as AlchemicalCalculationResult).factor"
      },
      {
        "file": "src/types/alchemy.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1435,
        "column": 36,
        "context": "ition.degree,\\n      hasExactLongitude: !!(position as unknown as any).exactLongitude,\\n      hasEleme"
      },
      {
        "file": "src/types/alchemy.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1591,
        "column": 7,
        "context": "s: [],\\n          energyFlow: 0.7\\n        }\\n      ] as unknown as CelestialAlignment[],\\n      positio"
      },
      {
        "file": "src/types/astrological.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 2,
        "column": 27,
        "context": "e PlanetaryPositions {\\n  // Existing planet fields...\\n\\n  northNode?: {\\n    sign: string,\\n    degree:"
      },
      {
        "file": "src/types/culinary.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 575,
        "column": 5,
        "context": "ategory;\\n  culinaryProfile: CulinaryProfile;\\n  // ... other existing properties\\n}\\n\\n/**\\n * Cuisine co"
      },
      {
        "file": "src/types/enhanced-astrology.d.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 58,
        "column": 42,
        "context": "n: any;\\n      /** Degree within the sign (0-29.999...) */\\n      degree: number;\\n      /** Exact long"
      },
      {
        "file": "src/types/enhanced-astrology.d.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 60,
        "column": 47,
        "context": "r;\\n      /** Exact longitude in degrees (0-359.999...) */\\n      exactLongitude: number;\\n      /** Wh"
      },
      {
        "file": "src/types/global.d.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 75,
        "column": 39,
        "context": ") => void,\\n        on: (event: string, callback: (...args: unknown[]) => void) => { off: () => void "
      },
      {
        "file": "src/types/global.d.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 81,
        "column": 37,
        "context": " () => void,\\n      on: (event: string, callback: (...args: unknown[]) => void) => { off: () => void "
      },
      {
        "file": "src/types/recipeIngredient.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 99,
        "column": 4,
        "context": "eIngredient {\\n  return {\\n    optional: false,\\n    ...partial\\n  };\\n}\\n\\nexport default RecipeIngredient"
      },
      {
        "file": "src/types/testing-library__jest-dom.d.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 24,
        "column": 18,
        "context": "g, value?: string | RegExp): R;\\n      toHaveClass(...classNames: string[]): R;\\n      toHaveFocus(): "
      },
      {
        "file": "src/types/testing-library__jest-dom.d.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 36,
        "column": 9,
        "context": "ccessibleName(text: string | RegExp): R;\\n      // ... add any other matchers that might be missing\\n "
      },
      {
        "file": "src/types/thermodynamic.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 108,
        "column": 13,
        "context": "s {\\n  if (propsArray.length === 0) {\\n    return { ...DEFAULT_THERMODYNAMIC_PROPERTIES };\\n  }\\n\\n  if ("
      },
      {
        "file": "src/types/thermodynamic.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 112,
        "column": 13,
        "context": " }\\n\\n  if (propsArray.length === 1) {\\n    return { ...propsArray[0] };\\n  }\\n\\n  // Use equal weights if"
      },
      {
        "file": "src/types/zodiacAffinity.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 56,
        "column": 4,
        "context": "ZodiacAffinity>): ZodiacAffinity {\\n  return {\\n    ...DEFAULT_ZODIAC_AFFINITY,\\n    ...affinities,\\n  }"
      },
      {
        "file": "src/types/zodiacAffinity.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 57,
        "column": 4,
        "context": " {\\n  return {\\n    ...DEFAULT_ZODIAC_AFFINITY,\\n    ...affinities,\\n  };\\n}\\n\\n/**\\n * Get the modality com"
      },
      {
        "file": "src/utils/BuildValidator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 13,
        "column": 45,
        "context": "g[];\\n  private readonly logger: (message: string, ...args: unknown[]) => void;\\n\\n  constructor(buildD"
      },
      {
        "file": "src/utils/BuildValidator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 213,
        "column": 50,
        "context": "          this.logger(`Retrying build in 5 seconds...`);\\n          await new Promise(resolve => setT"
      },
      {
        "file": "src/utils/BuildValidator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 350,
        "column": 29,
        "context": "alidation.isValid) {\\n          report.issues.push(...validation.missingFiles.map(file => `Missing: $"
      },
      {
        "file": "src/utils/BuildValidator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 351,
        "column": 29,
        "context": "Missing: ${file}`));\\n          report.issues.push(...validation.corruptedFiles.map(file => `Corrupte"
      },
      {
        "file": "src/utils/accurateAstronomy.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 9,
        "column": 36,
        "context": "roduction\\n */\\nconst debugLog = (_message: string, ...args: unknown[]): void => {\\n  // Comment out co"
      },
      {
        "file": "src/utils/accurateAstronomy.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 11,
        "column": 23,
        "context": " to avoid linting warnings\\n  // log.info(message, ...args);\\n};\\n\\n// Updated reference data based on a"
      },
      {
        "file": "src/utils/accurateAstronomy.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 519,
        "column": 43,
        "context": " 30);\\n\\n  // Calculate degree within sign (0-29.999...)\\n  const degree = normalizedLong % 30;\\n\\n  // G"
      },
      {
        "file": "src/utils/alchemicalAdapters.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 15,
        "column": 4,
        "context": "ata?.source,\\n    // Preserve other properties\\n    ...engineData,\\n  };\\n}\\n\\n// Convert standardized for"
      },
      {
        "file": "src/utils/alchemicalAdapters.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 25,
        "column": 4,
        "context": "ta = standardAffinity as unknown;\\n\\n  return {\\n    ...standardAffinity,\\n    element: affinityData?.ba"
      },
      {
        "file": "src/utils/alchemicalAdapters.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 5,
        "column": 46,
        "context": "y {\\n  if (!engineAffinity) return { base: 'Fire' } as unknown as ElementalAffinity; // Default value"
      },
      {
        "file": "src/utils/alchemicalPillarUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 127,
        "column": 28,
        "context": "odifying the original\\n  const transformedItem = { ...item };\\n\\n  // Get the alchemical effects of the"
      },
      {
        "file": "src/utils/alchemicalPillarUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 300,
        "column": 28,
        "context": "odifying the original\\n  const transformedItem = { ...item };\\n\\n  // Get the alchemical effects of the"
      },
      {
        "file": "src/utils/alchemicalPillarUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 370,
        "column": 28,
        "context": "odifying the original\\n  const transformedItem = { ...item };\\n\\n  // Get the alchemical effects of the"
      },
      {
        "file": "src/utils/alchemicalPillarUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 435,
        "column": 26,
        "context": " modifying the original\\n  let transformedItem = { ...item };\\n  const influences: string[] = [];\\n\\n  /"
      },
      {
        "file": "src/utils/alchemicalPillarUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 646,
        "column": 61,
        "context": "bug('\\nTransforming ingredient based on influences...');\\n  const transformedItem = transformIngredie"
      },
      {
        "file": "src/utils/alchemicalPillarUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 737,
        "column": 25,
        "context": "mpatibility (descending)\\n  const sortedResults = [...compatibility].sort((a, b) => b.compatibility -"
      },
      {
        "file": "src/utils/alchemicalPillarUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1093,
        "column": 8,
        "context": "    .then(([dry, wet, traditional]) => ({\\n        ...dry;\\n        ...wet;\\n        ...traditional\\n   "
      },
      {
        "file": "src/utils/alchemicalPillarUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1094,
        "column": 8,
        "context": " wet, traditional]) => ({\\n        ...dry;\\n        ...wet;\\n        ...traditional\\n      }))\\n      .ca"
      },
      {
        "file": "src/utils/alchemicalPillarUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1095,
        "column": 8,
        "context": "l]) => ({\\n        ...dry;\\n        ...wet;\\n        ...traditional\\n      }))\\n      .catch(error => {\\n "
      },
      {
        "file": "src/utils/alchemicalPillarUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 85,
        "column": 29,
        "context": "perfectly compatible\\n  if (pillarA.id === (pillarB as unknown as any).id) return 1.0;\\n\\n  // Calculat"
      },
      {
        "file": "src/utils/alchemicalPillarUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 212,
        "column": 29,
        "context": "entalAssociations) {\\n    const pillarData = pillar as unknown as any;\\n    const elementalAssociation"
      },
      {
        "file": "src/utils/alchemicalPillarUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 487,
        "column": 13,
        "context": "ame} (ID: ${(pillar as any).id})`);\\n\\n  if ((pillar as unknown as any).elementalAssociations) {\\n    c"
      },
      {
        "file": "src/utils/alchemicalPillarUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 488,
        "column": 41,
        "context": "tions) {\\n    const elementalAssociations = (pillar as unknown as any).elementalAssociations as unkno"
      },
      {
        "file": "src/utils/alchemicalPillarUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 513,
        "column": 49,
        "context": "\\n  if ((transformedItem as any).element && (pillar as unknown as any).elementalAssociations) {\\n    c"
      },
      {
        "file": "src/utils/alchemicalPillarUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 514,
        "column": 41,
        "context": "tions) {\\n    const elementalAssociations = (pillar as unknown as any).elementalAssociations as unkno"
      },
      {
        "file": "src/utils/alchemicalPillarUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 557,
        "column": 49,
        "context": "\\n  if ((transformedItem as any).element && (pillar as unknown as any).elementalAssociations) {\\n    c"
      },
      {
        "file": "src/utils/alchemicalPillarUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 558,
        "column": 41,
        "context": "tions) {\\n    const elementalAssociations = (pillar as unknown as any).elementalAssociations as unkno"
      },
      {
        "file": "src/utils/alchemicalPillarUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 675,
        "column": 21,
        "context": " specified\\n  const methods =\\n    (availableMethods as unknown as CookingMethod[]).length > 0;\\n      "
      },
      {
        "file": "src/utils/alchemicalPillarUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 680,
        "column": 147,
        "context": "od[]).length <= 10 ? methods.join(', ') : (methods as unknown as CookingMethod[]).length + ' methods"
      },
      {
        "file": "src/utils/alchemicalPillarUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 718,
        "column": 17,
        "context": "   // Add elemental associations\\n      if ((pillar as unknown as any).elementalAssociations) {\\n     "
      },
      {
        "file": "src/utils/alchemicalPillarUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 719,
        "column": 33,
        "context": "lAssociations) {\\n        const pillarData = pillar as unknown as any;\\n        const elementalAssocia"
      },
      {
        "file": "src/utils/alchemicalPillarUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 784,
        "column": 39,
        "context": " to string\\n              const methodData = method as unknown as any;\\n              return String(me"
      },
      {
        "file": "src/utils/alchemicalPillarUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 898,
        "column": 39,
        "context": " to string\\n              const methodData = method as unknown as any;\\n              return String(me"
      },
      {
        "file": "src/utils/alchemicalPillarUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1100,
        "column": 8,
        "context": "method data:', error),\\n        return {};\\n      }) as unknown as any;\\n  } catch (error) {\\n    logger"
      },
      {
        "file": "src/utils/alchemicalTransformationUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 119,
        "column": 12,
        "context": "y\\n  if (!targetElementalProperties) {\\n    return [...items].sort((a, b) => (b.gregsEnergy || 0) - (a"
      },
      {
        "file": "src/utils/alchemicalTransformationUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 146,
        "column": 15,
        "context": "mNorm === 0 || targetNorm === 0) {\\n      return { ...item, compatibilityScore: 0.5 }; // Neutral mat"
      },
      {
        "file": "src/utils/alchemicalTransformationUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 159,
        "column": 6,
        "context": "ilarity * 0.8 + energyBonus);\\n\\n    return {\\n      ...item;\\n      compatibilityScore\\n    };\\n  });\\n\\n  "
      },
      {
        "file": "src/utils/alchemicalTransformationUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 204,
        "column": 10,
        "context": " by gregsEnergy for basic compatibility\\n  return [...items].sort((a, b) => (b.gregsEnergy || 0) - (a"
      },
      {
        "file": "src/utils/alchemicalTransformationUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 242,
        "column": 80,
        "context": "ds with holistic cooking recommendations algorithm...');\\n  const holisticRecommendations = await get"
      },
      {
        "file": "src/utils/alchemicalTransformationUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 38,
        "column": 19,
        "context": "aryPositions(\\n    ingredients,\\n    planetPositions as unknown as Record<string, CelestialPosition>, "
      },
      {
        "file": "src/utils/alchemicalTransformationUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 66,
        "column": 19,
        "context": "netaryPositions(;\\n    methods,\\n    planetPositions as unknown as Record<string, CelestialPosition>,\\n"
      },
      {
        "file": "src/utils/alchemicalTransformationUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 99,
        "column": 19,
        "context": "netaryPositions(\\n    cuisines,\\n    planetPositions as unknown as Record<string, CelestialPosition>, "
      },
      {
        "file": "src/utils/apiCircuitBreaker.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 29,
        "column": 6,
        "context": "     monitoringWindow: 300000, // 5 minutes\\n      ...options\\n    };\\n  }\\n\\n  async call<T>(fn: () => P"
      },
      {
        "file": "src/utils/aspectCalculator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 189,
        "column": 43,
        "context": " 30);\\n\\n  // Calculate degree within sign (0-29.999...)\\n  const degree = normalizedLong % 30;\\n\\n  retu"
      },
      {
        "file": "src/utils/astrology/astrologicalValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 68,
        "column": 24,
        "context": "northNode', 'southNode'];\\n    const allPlanets = [...requiredPlanets, ...optionalPlanets];\\n\\n    // C"
      },
      {
        "file": "src/utils/astrology/astrologicalValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 68,
        "column": 44,
        "context": "de'];\\n    const allPlanets = [...requiredPlanets, ...optionalPlanets];\\n\\n    // Check for required pl"
      },
      {
        "file": "src/utils/astrology/astrologicalValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 81,
        "column": 20,
        "context": "   if (!validation.isValid) {\\n        errors.push(...validation.errors);\\n      }\\n\\n      // Always co"
      },
      {
        "file": "src/utils/astrology/astrologicalValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 85,
        "column": 20,
        "context": "nings, regardless of validity\\n      warnings.push(...validation.warnings);\\n\\n      if (validation.cor"
      },
      {
        "file": "src/utils/astrology/astrologicalValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 100,
        "column": 24,
        "context": "        if (strictMode) {\\n            errors.push(...validation.errors);\\n          } else {\\n        "
      },
      {
        "file": "src/utils/astrology/astrologicalValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 102,
        "column": 26,
        "context": "rs);\\n          } else {\\n            warnings.push(...validation.errors);\\n          }\\n        }\\n\\n    "
      },
      {
        "file": "src/utils/astrology/astrologicalValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 107,
        "column": 22,
        "context": "ngs, regardless of validity\\n        warnings.push(...validation.warnings);\\n\\n        if (validation.c"
      },
      {
        "file": "src/utils/astrology/astrologicalValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 412,
        "column": 18,
        "context": "t.planetaryPositions, options);\\n      errors.push(...positionValidation.errors);\\n      warnings.push"
      },
      {
        "file": "src/utils/astrology/astrologicalValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 413,
        "column": 20,
        "context": "..positionValidation.errors);\\n      warnings.push(...positionValidation.warnings);\\n\\n      if (positi"
      },
      {
        "file": "src/utils/astrology/astrologicalValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 446,
        "column": 18,
        "context": "  'calculation input',\\n      );\\n      errors.push(...elementalValidation.errors);\\n      warnings.pus"
      },
      {
        "file": "src/utils/astrology/astrologicalValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 447,
        "column": 20,
        "context": ".elementalValidation.errors);\\n      warnings.push(...elementalValidation.warnings);\\n\\n      if (eleme"
      },
      {
        "file": "src/utils/astrology/astrologicalValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 457,
        "column": 18,
        "context": "icalConstants(input.constants);\\n      errors.push(...constantsValidation.errors);\\n      warnings.pus"
      },
      {
        "file": "src/utils/astrology/astrologicalValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 458,
        "column": 20,
        "context": ".constantsValidation.errors);\\n      warnings.push(...constantsValidation.warnings);\\n    }\\n\\n    retur"
      },
      {
        "file": "src/utils/astrology/astrologicalValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 502,
        "column": 2,
        "context": "ants\\n */\\nexport const _VALIDATION_CONSTANTS = {\\n  ...ELEMENTAL_CONSTANTS;\\n  ...TRANSIT_CONSTANTS;\\n  "
      },
      {
        "file": "src/utils/astrology/astrologicalValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 503,
        "column": 2,
        "context": "IDATION_CONSTANTS = {\\n  ...ELEMENTAL_CONSTANTS;\\n  ...TRANSIT_CONSTANTS;\\n  VALIDATION_TIMEOUT: 5000,\\n"
      },
      {
        "file": "src/utils/astrology/core.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 30,
        "column": 36,
        "context": "in production\\nconst debugLog = (_message: string, ..._args: unknown[]): void => {\\n  // No-op for pro"
      },
      {
        "file": "src/utils/astrology/core.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 35,
        "column": 36,
        "context": "in production\\nconst errorLog = (_message: string, ..._args: unknown[]): void => {\\n  // No-op for pro"
      },
      {
        "file": "src/utils/astrology/core.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 59,
        "column": 72,
        "context": "t letter, lowercase rest (e.g., Sun, Moon, Mercury...)\\n    if (planet.length > 1) {\\n      planet = p"
      },
      {
        "file": "src/utils/astrology/core.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 213,
        "column": 10,
        "context": "s', error);\\n  }\\n\\n  // Ensure uniqueness\\n  return [...new Set(activePlanets)]\\n}\\n\\n/**\\n * Get the modif"
      },
      {
        "file": "src/utils/astrology/core.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 441,
        "column": 65,
        "context": "gn = (positions.Sun.sign.toLowerCase() || 'aries') as unknown as any;\\n    const moonSign = (position"
      },
      {
        "file": "src/utils/astrology/core.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 442,
        "column": 68,
        "context": " = (positions.moon.sign.toLowerCase() || 'taurus') as unknown as any;\\n\\n    // Get active planets\\n   "
      },
      {
        "file": "src/utils/astrology/core.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 770,
        "column": 13,
        "context": "      earth: 0,\\n              air: 0\\n            } as unknown as LowercaseElementalProperties\\n      "
      },
      {
        "file": "src/utils/astrology/elementalValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 167,
        "column": 21,
        "context": "DominantElement(properties);\\n  const enhanced = { ...properties };\\n\\n  // Self-reinforcement: boost t"
      },
      {
        "file": "src/utils/astrology/positions.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 10,
        "column": 36,
        "context": "roduction\\n */\\nconst debugLog = (_message: string, ..._args: unknown[]): void => {\\n  // Comment out c"
      },
      {
        "file": "src/utils/astrology/positions.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 12,
        "column": 23,
        "context": " to avoid linting warnings\\n  // log.info(message, ...args);\\n};\\n\\n// Updated reference data for July 2"
      },
      {
        "file": "src/utils/astrology/positions.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 474,
        "column": 43,
        "context": " 30);\\n\\n  // Calculate degree within sign (0-29.999...)\\n  const degree = normalizedLongitude % 30;\\n\\n "
      },
      {
        "file": "src/utils/astrology/validation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 15,
        "column": 37,
        "context": "oduction\\n */\\nconst _debugLog = (_message: string, ..._args: unknown[]): void => {\\n  // No-op for pro"
      },
      {
        "file": "src/utils/astrology/validation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 23,
        "column": 36,
        "context": "roduction\\n */\\nconst errorLog = (_message: string, ..._args: unknown[]): void => {\\n  // No-op for pro"
      },
      {
        "file": "src/utils/astrologyDataProvider.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 41,
        "column": 55,
        "context": "ogger.debug('Fetching planetary positions from API...');\\n\\n    // Try to fetch from API endpoint\\n    "
      },
      {
        "file": "src/utils/astrologyDataProvider.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 103,
        "column": 64,
        "context": "ug('Getting planetary positions from transit files...');\\n\\n    // For now, we'll just use the same ha"
      },
      {
        "file": "src/utils/astrologyUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 42,
        "column": 35,
        "context": "production\\n */\\nconst debugLog = (message: string, ..._args: unknown[]): void => {\\n  // Use the log s"
      },
      {
        "file": "src/utils/astrologyUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 51,
        "column": 35,
        "context": "production\\n */\\nconst errorLog = (message: string, ..._args: unknown[]): void => {\\n  // Use the log s"
      },
      {
        "file": "src/utils/astrologyUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1121,
        "column": 2,
        "context": " */\\nexport function combineElementalProperties(\\n  ...properties: LowercaseElementalProperties[]\\n): L"
      },
      {
        "file": "src/utils/astrologyUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 2417,
        "column": 8,
        "context": "compliance\\n      const alchemicalItem = {\\n        ...item;\\n        compatibilityScore,\\n        domin"
      },
      {
        "file": "src/utils/astrologyUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 2423,
        "column": 42,
        "context": "perties\\n        transformedElementalProperties: { ...item.elementalProperties } as Record<\\n         "
      },
      {
        "file": "src/utils/astrologyUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 2457,
        "column": 8,
        "context": "th all required properties\\n      return {\\n        ...item;\\n        // Required AlchemicalItem proper"
      },
      {
        "file": "src/utils/astrologyUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 2465,
        "column": 42,
        "context": "umber>,\\n        transformedElementalProperties: { ...item.elementalProperties } as Record<\\n         "
      },
      {
        "file": "src/utils/astrologyUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1539,
        "column": 69,
        "context": "Hour = hourCalculator.calculatePlanetaryHour(date) as unknown as Planet;\\n    const _planetaryDay = h"
      },
      {
        "file": "src/utils/astrologyUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1540,
        "column": 62,
        "context": "lanetaryDay = hourCalculator.getPlanetaryDay(date) as unknown as Planet;\\n    const _planetaryMinute "
      },
      {
        "file": "src/utils/astrologyUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1541,
        "column": 68,
        "context": "ryMinute = hourCalculator.getPlanetaryMinute(date) as unknown as Planet;\\n\\n    // Convert planetary p"
      },
      {
        "file": "src/utils/astrologyUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2441,
        "column": 7,
        "context": "alculateSeasonalResonance(dominantElement)\\n      } as unknown as AlchemicalItem;\\n\\n      return alche"
      },
      {
        "file": "src/utils/astrologyValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 95,
        "column": 39,
        "context": "properties\\n      const calculatedData = calculated as unknown as any;\\n\\n      // Convert our formatti"
      },
      {
        "file": "src/utils/automatedQualityAssurance.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 107,
        "column": 6,
        "context": "ing: true,\\n      thresholds: QA_THRESHOLDS,\\n      ...config\\n    };\\n\\n    this.metrics = this.initiali"
      },
      {
        "file": "src/utils/automatedQualityAssurance.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 232,
        "column": 36,
        "context": "ate too much)\\n        const maxElement = Math.max(...Object.values(ingredient.elementalProperties));"
      },
      {
        "file": "src/utils/automatedQualityAssurance.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 395,
        "column": 13,
        "context": "etQualityMetrics(): QualityMetrics {\\n    return { ...this.metrics };\\n  }\\n\\n  /**\\n   * Get active camp"
      },
      {
        "file": "src/utils/automatedQualityAssurance.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 411,
        "column": 20,
        "context": "lityAssuranceConfig>): void {\\n    this.config = { ...this.config, ...newConfig };\\n    logger.debug('"
      },
      {
        "file": "src/utils/automatedQualityAssurance.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 411,
        "column": 36,
        "context": "fig>): void {\\n    this.config = { ...this.config, ...newConfig };\\n    logger.debug('Quality assuranc"
      },
      {
        "file": "src/utils/calculationCache.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 48,
        "column": 53,
        "context": "og.info(`‚ö° Cache miss for ${cacheKey}, calculating...`);\\n\\n  try {\\n    // Perform the calculation\\n   "
      },
      {
        "file": "src/utils/calculationCache.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 112,
        "column": 46,
        "context": "ys,\\n    oldestEntry: timestamps.length ? Math.min(...timestamps) : 0,\\n    newestEntry: timestamps.le"
      },
      {
        "file": "src/utils/calculationCache.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 113,
        "column": 46,
        "context": " 0,\\n    newestEntry: timestamps.length ? Math.max(...timestamps) : 0\\n  };\\n}\\n"
      },
      {
        "file": "src/utils/chakraFoodUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 352,
        "column": 35,
        "context": "tal properties\\n  let result = Array.from(new Set([...recommendations, ...specificFoods]));\\n\\n  if (re"
      },
      {
        "file": "src/utils/chakraFoodUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 352,
        "column": 55,
        "context": " result = Array.from(new Set([...recommendations, ...specificFoods]));\\n\\n  if (result.length === 0) {"
      },
      {
        "file": "src/utils/chromeApiInitializer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 118,
        "column": 25,
        "context": "            if (!keys) {\\n              result = { ...mockStorage };\\n            } else if (Array.isA"
      },
      {
        "file": "src/utils/chromeApiInitializer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 40,
        "column": 29,
        "context": "ess with type guards\\n    const chromeObj = (window as unknown as any).chrome as any;\\n    if (!chrome"
      },
      {
        "file": "src/utils/chromeApiInitializer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 132,
        "column": 46,
        "context": ") {\\n              setTimeout(() => callback(result as unknown as Record<string, string[]>), 0);\\n    "
      },
      {
        "file": "src/utils/common/styleUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 8,
        "column": 19,
        "context": " duplicates and conflicts.\\n */\\nexport function cn(...inputs: ClassValue[]) {\\n  return twMerge(clsx(i"
      },
      {
        "file": "src/utils/commonUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 74,
        "column": 37,
        "context": " return str;\\n  return str.substring(0, length) + '...';\\n}\\n\\n/**\\n * Removes HTML tags from a string\\n *"
      },
      {
        "file": "src/utils/cookingMethodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 132,
        "column": 2,
        "context": " {\\n  // Convert allCookingMethods to our format\\n  ...Object.entries(allCookingMethods || {}).reduce("
      },
      {
        "file": "src/utils/cookingMethodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 158,
        "column": 2,
        "context": "o variations if they're related to main methods\\n  ...culturalCookingMethods.reduce((methods: Cooking"
      },
      {
        "file": "src/utils/cookingMethodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 170,
        "column": 12,
        "context": "d.relatedToMainMethod].variations = [\\n            ...existingVariations;\\n            {\\n             "
      },
      {
        "file": "src/utils/cookingMethodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 566,
        "column": 6,
        "context": "dsCombined);\\n    .map(([_id, method]) => ({\\n      ...method;\\n      score: 0\\n    }))\\n    // Filter ou"
      },
      {
        "file": "src/utils/cookingMethodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 135,
        "column": 31,
        "context": "ase cooking method\\n      const baseMethod = method as unknown as BaseCookingMethod;\\n      acc[id] = "
      },
      {
        "file": "src/utils/cookingMethodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 160,
        "column": 33,
        "context": " cultural method\\n    const culturalMethod = method as unknown as CulturalMethod;\\n\\n    // Check if th"
      },
      {
        "file": "src/utils/cookingMethodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 255,
        "column": 27,
        "context": "od with thermodynamics\\n  const methodData = method as unknown as MethodWithThermodynamics;\\n  const m"
      },
      {
        "file": "src/utils/cookingMethodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 485,
        "column": 32,
        "context": "mental properties\\n  const methodWithProps = method as unknown as MethodWithElementalProperties;\\n  co"
      },
      {
        "file": "src/utils/cookingMethodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 496,
        "column": 27,
        "context": "for method data access\\n  const methodData = method as unknown as MethodWithElementalProperties;\\n  if"
      },
      {
        "file": "src/utils/cookingMethodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 527,
        "column": 32,
        "context": "mental properties\\n  const methodWithProps = method as unknown as MethodWithElementalProperties;\\n  co"
      },
      {
        "file": "src/utils/cookingMethodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 537,
        "column": 31,
        "context": "d hour data access\\n  const methodHourData = method as unknown as MethodWithElementalProperties;\\n  if"
      },
      {
        "file": "src/utils/cookingMethodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 689,
        "column": 36,
        "context": "gittarius'];\\n\\n    const venusDataTyped = venusData as unknown as PlanetaryDataStructure;\\n    const t"
      },
      {
        "file": "src/utils/cookingMethodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 710,
        "column": 34,
        "context": "o', 'pisces'];\\n\\n    const marsDataTyped = marsData as unknown as PlanetaryDataStructure;\\n    const t"
      },
      {
        "file": "src/utils/cookingMethodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 727,
        "column": 40,
        "context": "icorn'];\\n\\n    const mercuryDataTyped = mercuryData as unknown as PlanetaryDataStructure;\\n    const t"
      },
      {
        "file": "src/utils/cookingMethodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 744,
        "column": 40,
        "context": "arius'];\\n\\n    const jupiterDataTyped = jupiterData as unknown as PlanetaryDataStructure;\\n    const t"
      },
      {
        "file": "src/utils/cookingMethodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 761,
        "column": 38,
        "context": "quarius'];\\n\\n    const saturnDataTyped = saturnData as unknown as PlanetaryDataStructure;\\n    const t"
      },
      {
        "file": "src/utils/cookingMethodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 783,
        "column": 34,
        "context": "ntal properties\\n    const methodWithProps = method as unknown as MethodWithElementalProperties;\\n    "
      },
      {
        "file": "src/utils/cookingMethodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 864,
        "column": 18,
        "context": "alculatePlanetaryDayInfluence(;\\n            method as unknown as CookingMethodProfile,\\n            p"
      },
      {
        "file": "src/utils/cookingMethodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 899,
        "column": 18,
        "context": "lculatePlanetaryHourInfluence(;\\n            method as unknown as CookingMethodProfile,\\n            p"
      },
      {
        "file": "src/utils/cookingMethodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1361,
        "column": 27,
        "context": "h safe property access\\n  const methodData = method as unknown as any;\\n  const properties = methodDat"
      },
      {
        "file": "src/utils/cookingMethodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1409,
        "column": 29,
        "context": "safe property access\\n    const methodData = method as unknown as any;\\n    const _sensoryProfile = me"
      },
      {
        "file": "src/utils/cookingMethodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1458,
        "column": 27,
        "context": "for method data access\\n  const methodData = method as unknown as any;\\n  const astrologicalInfluence "
      },
      {
        "file": "src/utils/cookingMethodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1500,
        "column": 27,
        "context": " for elemental profile\\n  const methodData = method as unknown as any;\\n  return (\\n    (methodData.ele"
      },
      {
        "file": "src/utils/cookingMethodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1520,
        "column": 30,
        "context": "e elemental profile\\n  const astroData = astroState as unknown as any;\\n  if (astroData.elementalProfi"
      },
      {
        "file": "src/utils/cookingMethodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1584,
        "column": 30,
        "context": " astrological state\\n  const astroData = astroState as unknown as any;\\n  const currentElementalProper"
      },
      {
        "file": "src/utils/cookingMethodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1596,
        "column": 45,
        "context": "=> {\\n    const score = calculateMethodScore(method as unknown as CookingMethodProfile, astroState),;"
      },
      {
        "file": "src/utils/cookingMethodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1598,
        "column": 20,
        "context": "e, astroState),;\\n    return {\\n      method: method as unknown as CookingMethod,\\n      score,\\n      r"
      },
      {
        "file": "src/utils/cookingMethodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1615,
        "column": 7,
        "context": "      method,\\n      score,\\n      reasoning\\n    })) as unknown as MethodRecommendation[];\\n}\\n\\n/**\\n * H"
      },
      {
        "file": "src/utils/cuisineRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 114,
        "column": 6,
        "context": "0.3 + flavorMatchScore * 0.2;\\n\\n    return {\\n      ...sauce;\\n      id: name.replace(/\\s+/g, '-').toLo"
      },
      {
        "file": "src/utils/cuisineRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 161,
        "column": 4,
        "context": "lues(cuisineFlavorProfiles).map(cuisine => ({\\n    ...cuisine;\\n    id: cuisine.id || cuisine.name.toL"
      },
      {
        "file": "src/utils/cuisineRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 224,
        "column": 6,
        "context": "alScore = Math.min(1, score);\\n\\n    return {\\n      ...cuisine;\\n      id: cuisine.id || cuisine.name.t"
      },
      {
        "file": "src/utils/cuisineRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 208,
        "column": 32,
        "context": "c, [planet]) => {\\n            if ((planetaryRulers as unknown as string[]).includes(planet)) {\\n     "
      },
      {
        "file": "src/utils/cuisineRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 236,
        "column": 36,
        "context": "coredCuisines\\n    : scoredCuisines.filter(c => !(c as unknown as any).parentCuisine);\\n\\n  return filt"
      },
      {
        "file": "src/utils/cuisineResolver.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 176,
        "column": 4,
        "context": ",\\n    'Fusion'\\n  ];\\n\\n  const suggestions = [;\\n    ...allCuisines.filter(cuisine => cuisine.includes("
      },
      {
        "file": "src/utils/cuisineResolver.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 177,
        "column": 4,
        "context": "er(cuisine => cuisine.includes(normalized)),;\\n    ...primaryCuisines.filter(cuisine => cuisine.toLow"
      },
      {
        "file": "src/utils/cuisineResolver.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 180,
        "column": 10,
        "context": "werCase().includes(normalized)),;\\n  ];\\n\\n  return [...new Set(suggestions)]; // Remove duplicates\\n}\\n\\n"
      },
      {
        "file": "src/utils/culturalMethodsAggregator.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 242,
        "column": 10,
        "context": "      method.astrologicalInfluences = {\\n          ...method.astrologicalInfluences;\\n          favora"
      },
      {
        "file": "src/utils/data/processing.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 171,
        "column": 18,
        "context": "!elementalValidation.isValid) {\\n      errors.push(...elementalValidation.errors);\\n    }\\n  } else {\\n "
      },
      {
        "file": "src/utils/data/processing.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 184,
        "column": 20,
        "context": " (!astroValidation.isValid) {\\n      warnings.push(...astroValidation.errors);\\n    }\\n  }\\n\\n  return {\\n"
      },
      {
        "file": "src/utils/data/processing.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 261,
        "column": 20,
        "context": "lementalValidation.isValid) {\\n      warnings.push(...elementalValidation.errors);\\n    }\\n  } else {\\n "
      },
      {
        "file": "src/utils/data/processing.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 258,
        "column": 27,
        "context": "eElementalProperties(;\\n      recipe.elementalState as unknown as ElementalProperties\\n    ),\\n    if ("
      },
      {
        "file": "src/utils/data/processing.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 419,
        "column": 5,
        "context": "rulingPlanets: [],\\n      favorableZodiac: []\\n    } as unknown as AstrologicalProfile;\\n  }\\n  const pr"
      },
      {
        "file": "src/utils/data/processing.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 430,
        "column": 3,
        "context": ".favorableZodiac || []).map(String)\\n      : []\\n  } as unknown as AstrologicalProfile;\\n}\\n\\nfunction st"
      },
      {
        "file": "src/utils/dataStandardization.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 28,
        "column": 10,
        "context": "perties(ingredient.elementalProperties)\\n      : { ...DEFAULT_ELEMENTAL_PROPERTIES },\\n\\n    // Ensure "
      },
      {
        "file": "src/utils/dataStandardization.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 58,
        "column": 4,
        "context": "other properties from the original ingredient\\n    ...ingredient,\\n  };\\n\\n  // Standardize category-spe"
      },
      {
        "file": "src/utils/dataStandardization.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 100,
        "column": 13,
        "context": " default values\\n  if (sum < 0.001) {\\n    return { ...DEFAULT_ELEMENTAL_PROPERTIES };\\n  }\\n\\n  // Norma"
      },
      {
        "file": "src/utils/dataStandardization.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 130,
        "column": 4,
        "context": "source: profile.source || 'Estimated values',\\n    ...(profile || {}),\\n  };\\n}\\n\\n/**\\n * Standardize the"
      },
      {
        "file": "src/utils/dataStandardization.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 168,
        "column": 4,
        "context": "ofile?.texture?.silky ?? defaultValue,\\n    },\\n    ...(profile || {}),\\n  };\\n}\\n\\n/**\\n * Standardize sto"
      },
      {
        "file": "src/utils/dataStandardization.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 184,
        "column": 4,
        "context": "ay.isArray(storage.tips) ? storage.tips : [],\\n    ...(storage || {}),\\n  };\\n}\\n\\n/**\\n * Standardize pre"
      },
      {
        "file": "src/utils/dataStandardization.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 199,
        "column": 4,
        "context": "?? false,\\n    notes: preparation.notes || '',\\n    ...(preparation || {}),\\n  };\\n}\\n\\n/**\\n * Standardize"
      },
      {
        "file": "src/utils/dataStandardization.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 225,
        "column": 4,
        "context": "   techniques: applications.techniques || {},\\n    ...(applications || {}),\\n  };\\n}\\n\\n/**\\n * Standardiz"
      },
      {
        "file": "src/utils/dataStandardization.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 237,
        "column": 4,
        "context": " standardizeVegetable(vegetable) {\\n  return {\\n    ...vegetable,\\n    seasonality: Array.isArray(veget"
      },
      {
        "file": "src/utils/dataStandardization.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 243,
        "column": 6,
        "context": "oneness) ? vegetable.cooking.doneness : [],\\n      ...(vegetable.cooking || {}),\\n    },\\n  };\\n}\\n\\n/**\\n "
      },
      {
        "file": "src/utils/dataStandardization.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 256,
        "column": 4,
        "context": "tion standardizeProtein(protein) {\\n  return {\\n    ...protein,\\n    cuts: protein.cuts || {},\\n    cook"
      },
      {
        "file": "src/utils/dataStandardization.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 264,
        "column": 6,
        "context": "in.cookingTips.commonMistakes\\n        : [],\\n      ...(protein.cookingTips || {}),\\n    },\\n    sustain"
      },
      {
        "file": "src/utils/dataStandardization.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 274,
        "column": 6,
        "context": "n.sustainability.alternatives\\n        : [],\\n      ...(protein.sustainability || {}),\\n    },\\n  };\\n}\\n\\n"
      },
      {
        "file": "src/utils/dataStandardization.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 287,
        "column": 4,
        "context": "ndardizeHerbOrSpice(herbOrSpice) {\\n  return {\\n    ...herbOrSpice,\\n    potency: herbOrSpice.potency |"
      },
      {
        "file": "src/utils/dataStandardization.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 295,
        "column": 6,
        "context": "rbOrSpice.aroma.mainCompounds\\n        : [],\\n      ...(herbOrSpice.aroma || {}),\\n    },\\n    drying: {"
      },
      {
        "file": "src/utils/dataStandardization.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 300,
        "column": 6,
        "context": "herbOrSpice.drying?.flavorRetention || 0.5,\\n      ...(herbOrSpice.drying || {}),\\n    },\\n    timing: "
      },
      {
        "file": "src/utils/dataStandardization.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 306,
        "column": 6,
        "context": "    notes: herbOrSpice.timing?.notes || '',\\n      ...(herbOrSpice.timing || {}),\\n    },\\n    substitu"
      },
      {
        "file": "src/utils/dataStandardization.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 320,
        "column": 4,
        "context": "function standardizeGrain(grain) {\\n  return {\\n    ...grain,\\n    cookingRatio: grain.cookingRatio || "
      },
      {
        "file": "src/utils/dataStandardization.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 328,
        "column": 6,
        "context": "lse,\\n      time: grain.soaking?.time || '',\\n      ...(grain.soaking || {}),\\n    },\\n    sprouting: {\\n"
      },
      {
        "file": "src/utils/dataStandardization.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 333,
        "column": 6,
        "context": "e,\\n      time: grain.sprouting?.time || '',\\n      ...(grain.sprouting || {}),\\n    },\\n  };\\n}\\n\\n/**\\n * "
      },
      {
        "file": "src/utils/dataStandardization.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 348,
        "column": 4,
        "context": " oilOrVinegar.category === 'oil';\\n\\n  return {\\n    ...oilOrVinegar,\\n    ...(isOil ? { smokePoint: oil"
      },
      {
        "file": "src/utils/dataStandardization.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 349,
        "column": 4,
        "context": "y === 'oil';\\n\\n  return {\\n    ...oilOrVinegar,\\n    ...(isOil ? { smokePoint: oilOrVinegar.smokePoint "
      },
      {
        "file": "src/utils/dataStandardization.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 350,
        "column": 4,
        "context": "Point: oilOrVinegar.smokePoint || {} } : {}),\\n    ...(!isOil ? { acidity: oilOrVinegar.acidity || 5 "
      },
      {
        "file": "src/utils/dataStandardization.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 362,
        "column": 6,
        "context": "ilOrVinegar.bestUses.infusing\\n        : [],\\n      ...(oilOrVinegar.bestUses || {}),\\n    },\\n  };\\n}\\n\\ne"
      },
      {
        "file": "src/utils/dataStandardization.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 24,
        "column": 4,
        "context": "ile) {\\n    return ingredient;\\n  }\\n\\n  return {\\n    ...ingredientData,\\n    astrologicalProfile: {\\n    "
      },
      {
        "file": "src/utils/dataStandardization.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 26,
        "column": 6,
        "context": ".ingredientData,\\n    astrologicalProfile: {\\n      ...astrologicalProfile,\\n      elementalAffinity: s"
      },
      {
        "file": "src/utils/dataStandardization.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 8,
        "column": 26,
        "context": "f value === 'string') {\\n    return { base: value } as unknown as ElementalAffinity;\\n  }\\n  return val"
      },
      {
        "file": "src/utils/dataStandardization.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 10,
        "column": 14,
        "context": "s unknown as ElementalAffinity;\\n  }\\n  return value as unknown as ElementalAffinity;\\n}\\n\\n// Helper fun"
      },
      {
        "file": "src/utils/databaseCleanup.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 28,
        "column": 50,
        "context": "        const ingredientWithAstrology = ingredient as unknown as IngredientWithAstrology;\\n\\n        /"
      },
      {
        "file": "src/utils/databaseCleanup.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 31,
        "column": 44,
        "context": "rtion\\n        const data = ingredientWithAstrology as unknown as any;\\n        const name = data.name"
      },
      {
        "file": "src/utils/dateUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 9,
        "column": 36,
        "context": "roduction\\n */\\nconst debugLog = (_message: string, ..._args: unknown[]): void => {\\n  // Comment out c"
      },
      {
        "file": "src/utils/dateUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 11,
        "column": 23,
        "context": " to avoid linting warnings\\n  // log.info(message, ...args);\\n};\\n\\n/**\\n * Get the current season based "
      },
      {
        "file": "src/utils/dateUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 123,
        "column": 23,
        "context": "y.isArray(seasonDishes)) {\\n          allDishes = [...allDishes, ...(seasonDishes as unknown as Dish["
      },
      {
        "file": "src/utils/dateUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 123,
        "column": 37,
        "context": "onDishes)) {\\n          allDishes = [...allDishes, ...(seasonDishes as unknown as Dish[])];\\n        }"
      },
      {
        "file": "src/utils/dateUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 168,
        "column": 28,
        "context": "Dishes[season] : [];\\n\\n    const combinedDishes = [...allSeasonDishes, ...seasonalDishes];\\n    debugL"
      },
      {
        "file": "src/utils/dateUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 168,
        "column": 48,
        "context": "\\n\\n    const combinedDishes = [...allSeasonDishes, ...seasonalDishes];\\n    debugLog(`Found ${combined"
      },
      {
        "file": "src/utils/dateUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 123,
        "column": 53,
        "context": "       allDishes = [...allDishes, ...(seasonDishes as unknown as Dish[])];\\n        }\\n      });\\n    }"
      },
      {
        "file": "src/utils/dateUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 171,
        "column": 25,
        "context": "hes for ${cuisineId}`);\\n\\n    return combinedDishes as unknown as Dish[];\\n  } catch (error) {\\n    con"
      },
      {
        "file": "src/utils/dependencyValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 51,
        "column": 16,
        "context": "for (const dep of dependencies) {\\n      dfs(dep, [...path, node]);\\n    }\\n\\n    recursionStack.delete("
      },
      {
        "file": "src/utils/dependencyValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 89,
        "column": 17,
        "context": " module ${barrelPath}:`, error);\\n    invalid.push(...exports);\\n  }\\n\\n  return { valid, invalid };\\n}\\n\\n"
      },
      {
        "file": "src/utils/dependencyValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 175,
        "column": 18,
        "context": "ent(importStatement, filePath);\\n    warnings.push(...patternValidation.warnings);\\n\\n    // Try to val"
      },
      {
        "file": "src/utils/dependencyValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 268,
        "column": 23,
        "context": "   invalidFiles++\\n      }\\n\\n      allWarnings.push(...validation.warnings);\\n\\n      // Build module gr"
      },
      {
        "file": "src/utils/dependencyValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 242,
        "column": 45,
        "context": "h');\\n  const glob = (await import('glob')).default as unknown as {\\n    sync: (pattern: string, optio"
      },
      {
        "file": "src/utils/developmentExperienceOptimizations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 322,
        "column": 12,
        "context": "ts(usedImports)\\n      : usedImports;\\n\\n    return [...sortedImports, '', ...otherLines].join('\\n');\\n "
      },
      {
        "file": "src/utils/developmentExperienceOptimizations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 322,
        "column": 34,
        "context": ": usedImports;\\n\\n    return [...sortedImports, '', ...otherLines].join('\\n');\\n  }\\n\\n  /**\\n   * Real-ti"
      },
      {
        "file": "src/utils/developmentExperienceOptimizations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 389,
        "column": 21,
        "context": "DevelopmentMetrics>): void {\\n    this.metrics = { ...this.metrics, ...newMetrics, lastOptimization: "
      },
      {
        "file": "src/utils/developmentExperienceOptimizations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 389,
        "column": 38,
        "context": "s>): void {\\n    this.metrics = { ...this.metrics, ...newMetrics, lastOptimization: Date.now() };\\n\\n  "
      },
      {
        "file": "src/utils/developmentExperienceOptimizations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 400,
        "column": 13,
        "context": "pmentMetrics(): DevelopmentMetrics {\\n    return { ...this.metrics };\\n  }\\n\\n  /**\\n   * Generate perfor"
      },
      {
        "file": "src/utils/developmentExperienceOptimizations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 608,
        "column": 6,
        "context": "(importLine);\\n      }\\n    });\\n\\n    return [\\n      ...externalImports.sort(),\\n      ...(externalImpor"
      },
      {
        "file": "src/utils/developmentExperienceOptimizations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 609,
        "column": 6,
        "context": "  return [\\n      ...externalImports.sort(),\\n      ...(externalImports.length > 0 && internalImports."
      },
      {
        "file": "src/utils/developmentExperienceOptimizations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 610,
        "column": 6,
        "context": "&& internalImports.length > 0 ? [''] : []),\\n      ...internalImports.sort()\\n    ];\\n  }\\n\\n  private st"
      },
      {
        "file": "src/utils/dynamicImport.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 10,
        "column": 36,
        "context": "roduction\\n */\\nconst debugLog = (_message: string, ..._args: unknown[]): void => {\\n  // Comment out c"
      },
      {
        "file": "src/utils/dynamicImport.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 12,
        "column": 23,
        "context": " to avoid linting warnings\\n  // log.info(message, ...args);\\n};\\n\\n/**\\n * A utility function for loggin"
      },
      {
        "file": "src/utils/dynamicImport.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 19,
        "column": 36,
        "context": "roduction\\n */\\nconst errorLog = (_message: string, ..._args: unknown[]): void => {\\n  // Comment out c"
      },
      {
        "file": "src/utils/dynamicImport.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 21,
        "column": 28,
        "context": "void linting warnings\\n  // console.error(message, ...args);\\n};\\n\\n// Define interfaces for known modul"
      },
      {
        "file": "src/utils/dynamicImport.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 142,
        "column": 16,
        "context": "ath}`);\\n      return null;\\n    }\\n\\n    return func(..._args) as R;\\n  } catch (error) {\\n    errorLog(`"
      },
      {
        "file": "src/utils/dynamicImport.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 152,
        "column": 57,
        "context": "async function safeImportFunctionKnown<T extends (...args: unknown[]) => unknown>(\\n  path: KnownModu"
      },
      {
        "file": "src/utils/dynamicImport.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 233,
        "column": 59,
        "context": " func = (importedModule as any)[functionName] as (...args: A) => R;\\n    return func(..._args);\\n  } c"
      },
      {
        "file": "src/utils/dynamicImport.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 234,
        "column": 16,
        "context": "nctionName] as (...args: A) => R;\\n    return func(..._args);\\n  } catch (error) {\\n    errorLog(`Safe "
      },
      {
        "file": "src/utils/dynamicImport.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 277,
        "column": 52,
        "context": "port async function safeImportFunction<T extends (...args: unknown[]) => unknown>(\\n  path: string,\\n "
      },
      {
        "file": "src/utils/dynamicImport.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 320,
        "column": 13,
        "context": "sync function dynamicImportFunction<\\n  T extends (...args: unknown[]) => unknown;\\n  F extends (...ar"
      },
      {
        "file": "src/utils/dynamicImport.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 321,
        "column": 13,
        "context": "nds (...args: unknown[]) => unknown;\\n  F extends (...args: unknown[]) => unknown = T,;\\n>(path: strin"
      },
      {
        "file": "src/utils/dynamicImport.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 331,
        "column": 17,
        "context": "unctionName: string,\\n  _args: A,\\n  _fallbackFn: ((...args: A) => F) | null = null,;\\n): Promise<R | F"
      },
      {
        "file": "src/utils/dynamicImport.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 99,
        "column": 36,
        "context": "Utils': () =>\\n    import('@/utils/astrologyUtils') as unknown as Promise<AstrologyUtilsModule>,\\n  '@"
      },
      {
        "file": "src/utils/dynamicImport.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 101,
        "column": 39,
        "context": "my': () =>\\n    import('@/utils/accurateAstronomy') as unknown as Promise<AccurateAstronomyModule>,\\n "
      },
      {
        "file": "src/utils/dynamicImport.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 103,
        "column": 35,
        "context": "rology': () =>\\n    import('@/utils/safeAstrology') as unknown as Promise<SafeAstrologyModule>,\\n  '@/"
      },
      {
        "file": "src/utils/dynamicImport.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 104,
        "column": 56,
        "context": "tils/moonTimes': () => import('@/utils/moonTimes') as unknown as Promise<MoonTimesModule>;\\n  '@/lib/"
      },
      {
        "file": "src/utils/dynamicImport.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 106,
        "column": 39,
        "context": "ns': () =>\\n    import('@/lib/cuisineCalculations') as unknown as Promise<CuisineCalculationsModule>,"
      },
      {
        "file": "src/utils/dynamicImport.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 107,
        "column": 54,
        "context": "/utils/sunTimes': () => import('@/utils/sunTimes') as unknown as Promise<SunTimesModule>;\\n  '@/utils"
      },
      {
        "file": "src/utils/dynamicImport.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 109,
        "column": 36,
        "context": "tions': () =>\\n    import('@/utils/solarPositions') as unknown as Promise<SolarPositionsModule>,\\n  '@"
      },
      {
        "file": "src/utils/elemental/core.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 548,
        "column": 4,
        "context": ": 0.25, Earth: 0.25, Air: 0.25 };\\n\\n  return {\\n    ...recipe;\\n    elementalProperties\\n  };\\n}\\n\\nexport "
      },
      {
        "file": "src/utils/elemental/elementCompatibility.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 80,
        "column": 53,
        "context": "onst enhancedProfile: Record<Element, number> = { ...profile };\\n\\n  // Find the strongest element\\n  l"
      },
      {
        "file": "src/utils/elemental/transformations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 183,
        "column": 4,
        "context": "Elemental, planetaryInfluences),;\\n\\n  return {\\n    ...item;\\n    elementalProperties: transformedEleme"
      },
      {
        "file": "src/utils/elemental/transformations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 255,
        "column": 4,
        "context": "mber(planetaryStrength || 0)\\n  };\\n\\n  return {\\n    ...item;\\n    elementalProperties: transformedEleme"
      },
      {
        "file": "src/utils/elemental/transformations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 260,
        "column": 6,
        "context": "influences array\\n    planetaryInfluences: [\\n      ...(Array.isArray((item as unknown as any).planeta"
      },
      {
        "file": "src/utils/elemental/transformations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 437,
        "column": 24,
        "context": "\\n): ElementalProperties {\\n  const transformed = { ...baseElemental };\\n\\n  // Apply planetary influenc"
      },
      {
        "file": "src/utils/elemental/transformations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 164,
        "column": 10,
        "context": "ental = applyElementalTransformations(;\\n    ((item as unknown as any).elementalProperties as Element"
      },
      {
        "file": "src/utils/elemental/transformations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 186,
        "column": 22,
        "context": ",\\n    alchemicalProperties,\\n    uniqueness: ((item as unknown as any).uniqueness) || uniqueness,\\n   "
      },
      {
        "file": "src/utils/elemental/transformations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 188,
        "column": 12,
        "context": " uniqueness,\\n    planetaryInfluences:\\n      ((item as unknown as any).planetaryInfluences as string["
      },
      {
        "file": "src/utils/elemental/transformations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 193,
        "column": 3,
        "context": "rmationScore(alchemicalProperties, uniqueness)\\n  } as unknown as AlchemicalItem;\\n}\\n\\n/**\\n * Apply pla"
      },
      {
        "file": "src/utils/elemental/transformations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 260,
        "column": 29,
        "context": "anetaryInfluences: [\\n      ...(Array.isArray((item as unknown as any).planetaryInfluences)\\n        ?"
      },
      {
        "file": "src/utils/elemental/transformations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 261,
        "column": 16,
        "context": "nown as any).planetaryInfluences)\\n        ? ((item as unknown as any).planetaryInfluences as string["
      },
      {
        "file": "src/utils/elemental/transformations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 267,
        "column": 18,
        "context": "onScore(\\n      alchemicalBoost,\\n      Number((item as unknown as any).uniqueness) || 0.5;\\n    )\\n  } "
      },
      {
        "file": "src/utils/elemental/transformations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 269,
        "column": 3,
        "context": "m as unknown as any).uniqueness) || 0.5;\\n    )\\n  } as unknown as AlchemicalItem;\\n}\\n\\n/**\\n * Sort item"
      },
      {
        "file": "src/utils/elemental/transformations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 285,
        "column": 31,
        "context": ").sort((a, b) => {\\n      const scoreB = Number(((b as unknown as any).transformations ).score || 0);"
      },
      {
        "file": "src/utils/elemental/transformations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 286,
        "column": 31,
        "context": "ons ).score || 0);\\n      const scoreA = Number(((a as unknown as any).transformations ).score || 0);"
      },
      {
        "file": "src/utils/elemental/transformations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 575,
        "column": 19,
        "context": "ccess for transformation score\\n  score += ((((item as unknown as any).transformations ).score) || 0."
      },
      {
        "file": "src/utils/elementalMappings/ingredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 18,
        "column": 4,
        "context": ".25,\\n      Fire: 0.25,\\n      Air: 0.25\\n    },\\n    ...properties\\n  } as IngredientMapping;\\n}\\n\\nexport "
      },
      {
        "file": "src/utils/elementalMappings/ingredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 415,
        "column": 19,
        "context": "culateElementalCompatibility(;\\n        baseElement as unknown as 'Fire' | 'Water' | 'Earth' | 'Air',"
      },
      {
        "file": "src/utils/elementalMappings/ingredients.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 416,
        "column": 28,
        "context": "r' | 'Earth' | 'Air',\\n        complementaryElement as unknown as 'Fire' | 'Water' | 'Earth' | 'Air',"
      },
      {
        "file": "src/utils/elementalUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 112,
        "column": 13,
        "context": " undefined in normalizeProperties');\\n    return { ...DEFAULT_ELEMENTAL_PROPERTIES };\\n  }\\n\\n  // Fill "
      },
      {
        "file": "src/utils/elementalUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 128,
        "column": 13,
        "context": "s sum is 0 in normalizeProperties');\\n    return { ...DEFAULT_ELEMENTAL_PROPERTIES };\\n  }\\n\\n  // Norma"
      },
      {
        "file": "src/utils/elementalUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 142,
        "column": 6,
        "context": "perties`);\\n      }\\n      return acc;\\n    },\\n    { ...DEFAULT_ELEMENTAL_PROPERTIES },\\n  );\\n};\\n\\n/**\\n *"
      },
      {
        "file": "src/utils/elementalUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 161,
        "column": 29,
        "context": "ents');\\n    return {\\n      elementalProperties: { ...DEFAULT_ELEMENTAL_PROPERTIES }\\n    } as T & { e"
      },
      {
        "file": "src/utils/elementalUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 169,
        "column": 6,
        "context": ".25, Earth: 0.25, Air: 0.25 };\\n    return {\\n      ...recipe;\\n      elementalProperties: currentState"
      },
      {
        "file": "src/utils/elementalUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 176,
        "column": 4,
        "context": "properties to ensure they sum to 1\\n  return {\\n    ...recipe;\\n    elementalProperties: normalizePrope"
      },
      {
        "file": "src/utils/elementalUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 225,
        "column": 43,
        "context": " start\\n    const balance: ElementalProperties = { ...DEFAULT_ELEMENTAL_PROPERTIES };\\n\\n    // Get tot"
      },
      {
        "file": "src/utils/elementalUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 367,
        "column": 22,
        "context": "perties.Fire > threshold) {\\n      techniques.push(...ELEMENTAL_CHARACTERISTICS.Fire.cookingTechnique"
      },
      {
        "file": "src/utils/elementalUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 371,
        "column": 22,
        "context": "erties.Water > threshold) {\\n      techniques.push(...ELEMENTAL_CHARACTERISTICS.Water.cookingTechniqu"
      },
      {
        "file": "src/utils/elementalUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 375,
        "column": 22,
        "context": "erties.Earth > threshold) {\\n      techniques.push(...ELEMENTAL_CHARACTERISTICS.Earth.cookingTechniqu"
      },
      {
        "file": "src/utils/elementalUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 379,
        "column": 22,
        "context": "operties.Air > threshold) {\\n      techniques.push(...ELEMENTAL_CHARACTERISTICS.Air.cookingTechniques"
      },
      {
        "file": "src/utils/elementalUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 399,
        "column": 27,
        "context": "ies.Fire * 10), i++) {\\n        weightedTimes.push(...ELEMENTAL_CHARACTERISTICS.Fire.timeOfDay);\\n    "
      },
      {
        "file": "src/utils/elementalUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 405,
        "column": 27,
        "context": "es.Water * 10), i++) {\\n        weightedTimes.push(...ELEMENTAL_CHARACTERISTICS.Water.timeOfDay);\\n   "
      },
      {
        "file": "src/utils/elementalUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 411,
        "column": 27,
        "context": "es.Earth * 10), i++) {\\n        weightedTimes.push(...ELEMENTAL_CHARACTERISTICS.Earth.timeOfDay);\\n   "
      },
      {
        "file": "src/utils/elementalUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 417,
        "column": 27,
        "context": "ties.Air * 10), i++) {\\n        weightedTimes.push(...ELEMENTAL_CHARACTERISTICS.Air.timeOfDay);\\n     "
      },
      {
        "file": "src/utils/elementalUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 821,
        "column": 23,
        "context": "e;\\n      return acc\\n    }\\n\\n    const enhanced = { ...vegetable };\\n\\n    // Create transformation if i"
      },
      {
        "file": "src/utils/elementalUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1156,
        "column": 26,
        "context": "t with the original oil\\n    const enhancedOil = { ...oil };\\n\\n    // Ensure basic properties exist\\n  "
      },
      {
        "file": "src/utils/elementalUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1225,
        "column": 14,
        "context": "tring(\\n            JSON.stringify({\\n              ...(application as any);\\n              elementalEf"
      },
      {
        "file": "src/utils/elementalUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1260,
        "column": 10,
        "context": "ons = String(;\\n        JSON.stringify({\\n          ...(isHighHeat\\n            ? {\\n                fry"
      },
      {
        "file": "src/utils/elementalUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1270,
        "column": 10,
        "context": "   }\\n              }\\n            : {}),\\n          ...(isMediumHeat\\n            ? {\\n                c"
      },
      {
        "file": "src/utils/elementalUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1280,
        "column": 10,
        "context": "   }\\n              }\\n            : {}),\\n          ...(isLowHeat || isFinishing\\n            ? {\\n     "
      },
      {
        "file": "src/utils/elementalUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1290,
        "column": 10,
        "context": "   }\\n              }\\n            : {}),\\n          ...(enhancedOil.subCategory === 'baking' || key.to"
      },
      {
        "file": "src/utils/elementalUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1449,
        "column": 4,
        "context": "    favorableZodiac: []\\n    };\\n  }\\n  return {\\n    ...mapping;\\n    name: mapping.name || formattedNam"
      },
      {
        "file": "src/utils/elementalUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1503,
        "column": 6,
        "context": "estElement\\n      };\\n    }\\n\\n    acc[key] = {\\n      ...(value as unknown);\\n      name: valueData.name "
      },
      {
        "file": "src/utils/elementalUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 329,
        "column": 45,
        "context": "cs {\\n    return ELEMENTAL_CHARACTERISTICS[element] as unknown as ElementalCharacteristics\\n  },\\n\\n  /*"
      },
      {
        "file": "src/utils/elementalUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 668,
        "column": 5,
        "context": "   dominantPlanets,\\n      planetaryDignities\\n    } as unknown as AlchemicalItem;\\n  });\\n}\\n\\n// New dif"
      },
      {
        "file": "src/utils/elementalUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 715,
        "column": 40,
        "context": " string {\\n  const affinityData = elementalAffinity as unknown as any;\\n  return (affinityData.base ||"
      },
      {
        "file": "src/utils/elementalUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 721,
        "column": 40,
        "context": " number {\\n  const affinityData = elementalAffinity as unknown as any;\\n  const strength = affinityDat"
      },
      {
        "file": "src/utils/elementalUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1247,
        "column": 51,
        "context": "     const smokePointData = enhancedOil.smokePoint as unknown as any;\\n      const smokePoint = Numbe"
      },
      {
        "file": "src/utils/elementalUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1339,
        "column": 51,
        "context": "     const smokePointData = enhancedOil.smokePoint as unknown as any;\\n      const smokePoint = Numbe"
      },
      {
        "file": "src/utils/elementalUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1356,
        "column": 51,
        "context": "     const smokePointData = enhancedOil.smokePoint as unknown as any;\\n      const smokePoint = Numbe"
      },
      {
        "file": "src/utils/errorHandler.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 59,
        "column": 85,
        "context": "tion(error, { extra: { type, severity, component, ...context } });\\n\\n    return {\\n      error,\\n      "
      },
      {
        "file": "src/utils/foodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 31,
        "column": 36,
        "context": "y === 'egg');\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\nconst dairy = Objec"
      },
      {
        "file": "src/utils/foodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 35,
        "column": 36,
        "context": "=== 'dairy');\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\nexport interface En"
      },
      {
        "file": "src/utils/foodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 123,
        "column": 8,
        "context": "   category: category.name.toLowerCase();\\n        ...(data )\\n      } as EnhancedIngredient;\\n\\n      /"
      },
      {
        "file": "src/utils/foodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 183,
        "column": 19,
        "context": "s of filtered ingredients:', {\\n      categories: [...new Set(filteredOut.map(ing => ing.category))]."
      },
      {
        "file": "src/utils/foodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 196,
        "column": 25,
        "context": "d modifying the original\\n  const standardized = { ...ingredient };\\n\\n  // Ensure elementalProperties "
      },
      {
        "file": "src/utils/foodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 205,
        "column": 6,
        "context": " {\\n    standardized.elementalProperties = {\\n      ...standardized.elementalProperties;\\n      Earth: "
      },
      {
        "file": "src/utils/foodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1006,
        "column": 6,
        "context": "5 +\\n      aspectScore * 0.05;\\n\\n    return {\\n      ...standardized;\\n      score: finalScore,\\n      sc"
      },
      {
        "file": "src/utils/foodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1209,
        "column": 38,
        "context": ";\\n        }\\n        categoryGroups[category].push(...missingVegetableItems);\\n      }\\n\\n      // Find "
      },
      {
        "file": "src/utils/foodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1247,
        "column": 36,
        "context": "= [];\\n      }\\n      categoryGroups[category].push(...additionalItems);\\n    }\\n  });\\n\\n  // First, take"
      },
      {
        "file": "src/utils/foodRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1256,
        "column": 6,
        "context": "ategory] || [];\\n    resultIngredients.push(\\n      ...categoryItems.slice(0, Math.max(minItemsPerCate"
      },
      {
        "file": "src/utils/foodRecommenderFix.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 139,
        "column": 74,
        "context": "terService.getBalancedRecommendations = function (...args) {\\n      try {\\n        return originalMeth"
      },
      {
        "file": "src/utils/globalDominantElement.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 25,
        "column": 43,
        "context": " };\\n}\\n\\nconst ensureGlobalFn = (name: string, fn: (...args: unknown[]) => unknown) => {\\n  if (typeof "
      },
      {
        "file": "src/utils/globalInitializer.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 61,
        "column": 15,
        "context": "e methods\\n    return function () {\\n      return { ...popupMethods };\\n    };\\n  };\\n\\n  // Create our sa"
      },
      {
        "file": "src/utils/houseEffects.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 12,
        "column": 36,
        "context": "roduction\\n */\\nconst debugLog = (_message: string, ..._args: unknown[]): void => {\\n  // Comment out c"
      },
      {
        "file": "src/utils/houseEffects.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 14,
        "column": 23,
        "context": " to avoid linting warnings\\n  // log.info(message, ...args);\\n};\\n\\n/**\\n * Interface for house data in a"
      },
      {
        "file": "src/utils/ingredientDataNormalizer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 327,
        "column": 4,
        "context": "unknown )\\n      : {};\\n\\n  const normalized = {\\n    ...ingredient;\\n    nutritionalProfile:\\n      typeo"
      },
      {
        "file": "src/utils/ingredientDataNormalizer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 331,
        "column": 12,
        "context": "ritionalProfile !== null;\\n        ? {\\n            ...(nutritionalProfile || {}),\\n            vitamin"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 233,
        "column": 2,
        "context": " real ingredients data\\nconst allIngredients = [\\n  ...Object.values(vegetables);\\n  ...Object.values(f"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 234,
        "column": 2,
        "context": "Ingredients = [\\n  ...Object.values(vegetables);\\n  ...Object.values(fruits);\\n  ...Object.values(herbs"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 235,
        "column": 2,
        "context": "values(vegetables);\\n  ...Object.values(fruits);\\n  ...Object.values(herbs);\\n  ...Object.values(spices"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 236,
        "column": 2,
        "context": "ject.values(fruits);\\n  ...Object.values(herbs);\\n  ...Object.values(spices);\\n  ...Object.values(prote"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 237,
        "column": 2,
        "context": "ject.values(herbs);\\n  ...Object.values(spices);\\n  ...Object.values(proteins);\\n  ...Object.values(gra"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 238,
        "column": 2,
        "context": "t.values(spices);\\n  ...Object.values(proteins);\\n  ...Object.values(grains);\\n  ...Object.values(seaso"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 239,
        "column": 2,
        "context": "t.values(proteins);\\n  ...Object.values(grains);\\n  ...Object.values(seasonings);\\n  ...Object.values(o"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 240,
        "column": 2,
        "context": "values(grains);\\n  ...Object.values(seasonings);\\n  ...Object.values(oils)\\n].filter(Boolean);\\n\\n// Fall"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 264,
        "column": 8,
        "context": "file: ingredientData.astrologicalProfile,\\n        ...ingredientData\\n      } as unknown as Ingredient"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 571,
        "column": 8,
        "context": "alProperties);\\n        ),\\n\\n      return {\\n        ...ingredient;\\n        score: totalScore,\\n        "
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 654,
        "column": 10,
        "context": "nt.modality,\\n        recommendations: [\\n          ...safeGetStringArray(ingredientData.recommendatio"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 655,
        "column": 10,
        "context": "gArray(ingredientData.recommendations);\\n          ...(ingredientIntelligence?.recommendations ?? [])"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 656,
        "column": 10,
        "context": "3), // Top 3 enterprise recommendations\\n          ...((validationIntelligence?.overallValidation?.cr"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1019,
        "column": 10,
        "context": "    `Supports ${chakra} chakra energy`,\\n          ...(nutritionalCorrelations.filter(\\n            co"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 2282,
        "column": 8,
        "context": "{};\\n      ingredientData.scoreDetails = {\\n        ...existingDetails;\\n        mercuryAffinity: mercu"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 3209,
        "column": 3,
        "context": "uence.`,\\n      );\\n    }\\n  }\\n\\n  return recs;\\n}\\n\\n// ... existing code ...\\n\\n// At the top of the file, "
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 3209,
        "column": 21,
        "context": "    }\\n  }\\n\\n  return recs;\\n}\\n\\n// ... existing code ...\\n\\n// At the top of the file, add the re-export\\n"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 3214,
        "column": 3,
        "context": " './recommendation/ingredientRecommendation';\\n\\n// ... existing code ...\\n\\n// ... existing code ...\\n//"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 3214,
        "column": 21,
        "context": "/ingredientRecommendation';\\n\\n// ... existing code ...\\n\\n// ... existing code ...\\n// ... existing code"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 3216,
        "column": 3,
        "context": "entRecommendation';\\n\\n// ... existing code ...\\n\\n// ... existing code ...\\n// ... existing code ...\\n"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 3216,
        "column": 21,
        "context": ";\\n\\n// ... existing code ...\\n\\n// ... existing code ...\\n// ... existing code ...\\n"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 3217,
        "column": 3,
        "context": ".. existing code ...\\n\\n// ... existing code ...\\n// ... existing code ...\\n"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 3217,
        "column": 21,
        "context": "..\\n\\n// ... existing code ...\\n// ... existing code ...\\n"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 248,
        "column": 31,
        "context": "type compatibility\\n    return getIngredientsUtil() as unknown as Ingredient[]\\n  }\\n\\n  // Otherwise, u"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 257,
        "column": 33,
        "context": "ame, data]) => {\\n      const ingredientData = data as unknown as BaseIngredient;\\n      allIngredient"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 265,
        "column": 7,
        "context": "ologicalProfile,\\n        ...ingredientData\\n      } as unknown as Ingredient);\\n    });\\n  });\\n\\n  retur"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 298,
        "column": 43,
        "context": " array\\n  let filteredIngredients = (allIngredients as unknown as EnhancedIngredient[]).filter(;\\n    "
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 301,
        "column": 39,
        "context": "are active\\n      const baseIngredient = ingredient as unknown as BaseIngredient;\\n      return baseIn"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 310,
        "column": 41,
        "context": "=== 0) {\\n    filteredIngredients = (allIngredients as unknown as EnhancedIngredient[]).slice(0, 20),"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 317,
        "column": 51,
        "context": "   enhanceVenusIngredientBatch(filteredIngredients as unknown as Ingredient[], astroState);\\n  }\\n\\n  /"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 324,
        "column": 52,
        "context": "  enhanceMarsIngredientScoring(filteredIngredients as unknown as Ingredient[], astroState);\\n  }\\n\\n  /"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 331,
        "column": 55,
        "context": "nhanceMercuryIngredientScoring(filteredIngredients as unknown as Ingredient[], astroState);\\n  }\\n\\n  /"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 337,
        "column": 27,
        "context": "ients.sort((a, b) => {\\n      const ingredientA = a as unknown as BaseIngredient;\\n      const ingredi"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 338,
        "column": 27,
        "context": "own as BaseIngredient;\\n      const ingredientB = b as unknown as BaseIngredient;\\n      const aValue "
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 371,
        "column": 27,
        "context": "ients.sort((a, b) => {\\n      const ingredientA = a as unknown as BaseIngredient;\\n      const ingredi"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 372,
        "column": 27,
        "context": "own as BaseIngredient;\\n      const ingredientB = b as unknown as BaseIngredient;\\n\\n      let aHasAffi"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 526,
        "column": 50,
        "context": "            safeGetElementalProperties((ingredient as unknown as any).elementalProperties);\\n        "
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 537,
        "column": 46,
        "context": "e(;\\n        safeGetElementalProperties((ingredient as unknown as any).elementalProperties);\\n        "
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 567,
        "column": 48,
        "context": ";\\n          safeGetElementalProperties((ingredient as unknown as any).elementalProperties);\\n        "
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 636,
        "column": 39,
        "context": "patibility\\n      const ingredientData = ingredient as unknown as any;\\n\\n      // Enterprise Intellige"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 791,
        "column": 18,
        "context": "lt score if no seasonality data\\n  if (!(ingredient as unknown as any).seasonality) return 0.5;\\n\\n  //"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 809,
        "column": 33,
        "context": "r current season\\n  const seasonScore = (ingredient as unknown as any).seasonality?.[currentSeason] |"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 824,
        "column": 18,
        "context": "lingPlanet: string,\\n): number {\\n  if (!(ingredient as unknown as any).astrologicalProfile) return 0."
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 830,
        "column": 35,
        "context": "s extra weight\\n  const ingredientData = ingredient as unknown as any;\\n  const astrologicalProfile = "
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 978,
        "column": 39,
        "context": "dient => {\\n      const ingredientData = ingredient as unknown as any;\\n      const ingredientName = s"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 999,
        "column": 39,
        "context": "dient => {\\n      const ingredientData = ingredient as unknown as any;\\n      const ingredientType = s"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1193,
        "column": 35,
        "context": "us association\\n  const ingredientData = ingredient as unknown as any;\\n  const ingredientName = safeG"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1241,
        "column": 29,
        "context": "th Venus preferences\\n  const texture = (ingredient as unknown as any).texture;\\n  if (texture) {\\n    "
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1254,
        "column": 34,
        "context": "nique alignment\\n  const culinaryUses = (ingredient as unknown as any).culinaryUses;\\n  if (venusData."
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1268,
        "column": 39,
        "context": "r pairings\\n    const harmonyPairings = (ingredient as unknown as any).harmonyPairings;\\n    const har"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1284,
        "column": 42,
        "context": "ncement\\n    const aromaticProperties = (ingredient as unknown as any).aromaticProperties;\\n    if (ar"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1310,
        "column": 41,
        "context": "rCase();\\n      const ingredientName = ((ingredient as unknown as any).name || '').toString().toLower"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1315,
        "column": 39,
        "context": "eywords) {\\n        const description = (ingredient as unknown as any).description;\\n        const cul"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1316,
        "column": 40,
        "context": "cription;\\n        const culinaryUses = (ingredient as unknown as any).culinaryUses;\\n        if (\\n   "
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1346,
        "column": 39,
        "context": "ient match\\n      const ingredientData = ingredient as unknown as BaseIngredient;\\n      if (\\n        "
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1363,
        "column": 41,
        "context": "nt match\\n      const ingredientRecord = ingredient as unknown as any;\\n      const relatedIngredients"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1376,
        "column": 43,
        "context": " match\\n      const ingredientDataComp = ingredient as unknown as any;\\n      const complementaryIngre"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1425,
        "column": 46,
        "context": "3);\\n        const ingredientDataEarth = ingredient as unknown as any;\\n        const description = in"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1485,
        "column": 44,
        "context": "> 3);\\n        const ingredientDataAir = ingredient as unknown as any;\\n        const description = in"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1547,
        "column": 46,
        "context": "ess\\n        const ingredientDataWater = ingredient as unknown as any;\\n        const ingredientName ="
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1607,
        "column": 45,
        "context": "cess\\n        const ingredientDataFire = ingredient as unknown as any;\\n        const ingredientName ="
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1639,
        "column": 37,
        "context": "g retrograde\\n    const ingredientData = ingredient as unknown as any;\\n    const preservationMethods "
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1711,
        "column": 32,
        "context": "e property access\\n  const venusDataAny = venusData as unknown as any;\\n  const lunarConnection = venu"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1774,
        "column": 37,
        "context": "e ingredient\\n    const ingredientData = ingredient as unknown as any;\\n    ingredientData.venusScore "
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1780,
        "column": 19,
        "context": "  ingredients.sort((a, b) => {\\n    const aData = a as unknown as any;\\n    const bData = b as unknown"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1781,
        "column": 19,
        "context": "t aData = a as unknown as any;\\n    const bData = b as unknown as any;\\n    const aScore = safeGetNumb"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1799,
        "column": 35,
        "context": "for comparison\\n  const ingredientData = ingredient as unknown as any;\\n  const name = safeGetString(i"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1933,
        "column": 37,
        "context": "perty access\\n    const ingredientData = ingredient as unknown as any;\\n    const ingredientName = ing"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1958,
        "column": 19,
        "context": "  ingredients.sort((a, b) => {\\n    const aData = a as unknown as any;\\n    const bData = b as unknown"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1959,
        "column": 19,
        "context": "t aData = a as unknown as any;\\n    const bData = b as unknown as any;\\n    const aScore = safeGetNumb"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2076,
        "column": 35,
        "context": "ed ingredients\\n  const ingredientData = ingredient as unknown as any;\\n  const astrologicalProfile = "
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2202,
        "column": 37,
        "context": "if available\\n    const ingredientData = ingredient as unknown as any;\\n    const elementalProperties "
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2261,
        "column": 37,
        "context": "manipulation\\n    const ingredientData = ingredient as unknown as any;\\n\\n    // Apply Mercury score as"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2279,
        "column": 39,
        "context": "redient) {\\n      const ingredientData = ingredient as unknown as any;\\n      const existingDetails = "
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2669,
        "column": 35,
        "context": "tal properties\\n  const ingredientData = ingredient as unknown as any;\\n  const elementalProperties = "
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2764,
        "column": 35,
        "context": "tal properties\\n  const ingredientData = ingredient as unknown as any;\\n  const elementalProperties = "
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2862,
        "column": 32,
        "context": "for type/category\\n      const ingredientData = ing as unknown as any;\\n      const ingredientType = S"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2871,
        "column": 32,
        "context": "s.filter(ing => {\\n      const ingredientData = ing as unknown as any;\\n      const ingredientName = S"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2880,
        "column": 32,
        "context": "s.filter(ing => {\\n      const ingredientData = ing as unknown as any;\\n      const ingredientName = S"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2971,
        "column": 37,
        "context": "(45% weight)\\n    const ingredientData = ingredient as unknown as any;\\n    const elementalScore = cal"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 3050,
        "column": 41,
        "context": "tibility\\n    const recommendationData = ingredient as unknown as any;\\n    const ingredientRecommenda"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 3118,
        "column": 39,
        "context": "daySign];\\n\\n      const ingredientData = ingredient as unknown as any;\\n      const astrologicalProfil"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 3137,
        "column": 39,
        "context": "ourSign];\\n\\n      const ingredientData = ingredient as unknown as any;\\n      const astrologicalProfil"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 3163,
        "column": 43,
        "context": "Hour);\\n          const ingredientData = ingredient as unknown as any;\\n          const astrologicalPr"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 3176,
        "column": 43,
        "context": "Hour);\\n          const ingredientData = ingredient as unknown as any;\\n          const astrologicalPr"
      },
      {
        "file": "src/utils/ingredientRecommender.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 3190,
        "column": 35,
        "context": "recommendation\\n  const ingredientData = ingredient as unknown as any;\\n  const astrologicalProfile = "
      },
      {
        "file": "src/utils/ingredientUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 386,
        "column": 31,
        "context": "as unknown) || '',\\n    category: (mapping.category as unknown as IngredientCategory) || 'culinary_he"
      },
      {
        "file": "src/utils/ingredientUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 387,
        "column": 53,
        "context": " elementalProperties: (mapping.elementalProperties as unknown as ElementalProperties) || {\\n      Fir"
      },
      {
        "file": "src/utils/ingredientUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 393,
        "column": 33,
        "context": "Air: 0.25\\n    },\\n    qualities: (mapping.qualities as unknown as string[]) || [],\\n    storage: (mapp"
      },
      {
        "file": "src/utils/ingredientUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 404,
        "column": 3,
        "context": "ingPlanets: [],\\n      zodiacAffinity: []\\n    }\\n  } as unknown as Ingredient;\\n\\n  // Add any additiona"
      },
      {
        "file": "src/utils/ingredientValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 78,
        "column": 16,
        "context": "it validateElementalProperties();\\n    errors.push(...elementalValidation.errors);\\n    warnings.push("
      },
      {
        "file": "src/utils/ingredientValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 79,
        "column": 18,
        "context": "...elementalValidation.errors);\\n    warnings.push(...elementalValidation.warnings);\\n\\n    // 2. Check"
      },
      {
        "file": "src/utils/ingredientValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 83,
        "column": 16,
        "context": "it validateCompatibilityScores();\\n    errors.push(...compatibilityValidation.errors);\\n    warnings.p"
      },
      {
        "file": "src/utils/ingredientValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 84,
        "column": 18,
        "context": "ompatibilityValidation.errors);\\n    warnings.push(...compatibilityValidation.warnings);\\n\\n    // 3. V"
      },
      {
        "file": "src/utils/ingredientValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 88,
        "column": 16,
        "context": "ait validateAlchemicalMappings();\\n    errors.push(...alchemicalValidation.errors);\\n    warnings.push"
      },
      {
        "file": "src/utils/ingredientValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 89,
        "column": 18,
        "context": "..alchemicalValidation.errors);\\n    warnings.push(...alchemicalValidation.warnings);\\n\\n    // 4. Run "
      },
      {
        "file": "src/utils/ingredientValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 94,
        "column": 16,
        "context": "gredientTestResults(testResults);\\n    errors.push(...testValidation.errors);\\n    warnings.push(...te"
      },
      {
        "file": "src/utils/ingredientValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 95,
        "column": 18,
        "context": "push(...testValidation.errors);\\n    warnings.push(...testValidation.warnings);\\n\\n    // 5. Validate d"
      },
      {
        "file": "src/utils/ingredientValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 99,
        "column": 16,
        "context": "await validateDataCompleteness();\\n    errors.push(...completenessValidation.errors);\\n    warnings.pu"
      },
      {
        "file": "src/utils/ingredientValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 100,
        "column": 18,
        "context": "completenessValidation.errors);\\n    warnings.push(...completenessValidation.warnings);\\n\\n    const du"
      },
      {
        "file": "src/utils/ingredientValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 153,
        "column": 20,
        "context": "Properties(name, ingredient);\\n        errors.push(...validation.errors);\\n        warnings.push(...va"
      },
      {
        "file": "src/utils/ingredientValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 154,
        "column": 22,
        "context": "push(...validation.errors);\\n        warnings.push(...validation.warnings);\\n      } catch (error) {\\n "
      },
      {
        "file": "src/utils/ingredientValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 250,
        "column": 6,
        "context": "be > 0.3)\\n    const maxElement = Math.max(;\\n      ...elements.map(el => {\\n        const value = prop"
      },
      {
        "file": "src/utils/ingredientValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 415,
        "column": 22,
        "context": "sistency(name, ingredient);\\n          errors.push(...validation.errors);\\n          warnings.push(..."
      },
      {
        "file": "src/utils/ingredientValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 416,
        "column": 24,
        "context": "sh(...validation.errors);\\n          warnings.push(...validation.warnings);\\n        } else {\\n        "
      },
      {
        "file": "src/utils/ingredientValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 963,
        "column": 18,
        "context": "\\n    if (warnings.length > 5) {\\n      summary += `... and ${warnings.length - 5} more warnings\\n`;\\n "
      },
      {
        "file": "src/utils/ingredientValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 413,
        "column": 23,
        "context": "ngredients)) {\\n      try {\\n        if ((ingredient as unknown as any).alchemicalProperties) {\\n      "
      },
      {
        "file": "src/utils/ingredientValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 458,
        "column": 37,
        "context": "[];\\n\\n  try {\\n    const ingredientData = ingredient as unknown as any;\\n    if (!ingredientData.alchem"
      },
      {
        "file": "src/utils/ingredientValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 782,
        "column": 39,
        "context": "dients)) {\\n      const ingredientData = ingredient as unknown as any;\\n      if (ingredientData.alche"
      },
      {
        "file": "src/utils/logger.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 40,
        "column": 31,
        "context": "nt);\\n\\n    return {\\n      debug: (message: string, ...args: unknown[]): void => {\\n        try {\\n     "
      },
      {
        "file": "src/utils/logger.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 48,
        "column": 29,
        "context": ";\\n        }\\n      },\\n      log: (message: string, ...args: unknown[]): void => {\\n        try {\\n     "
      },
      {
        "file": "src/utils/logger.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 55,
        "column": 30,
        "context": "\\n        }\\n      },\\n      info: (message: string, ...args: unknown[]): void => {\\n        try {\\n     "
      },
      {
        "file": "src/utils/logger.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 62,
        "column": 30,
        "context": "\\n        }\\n      },\\n      warn: (message: string, ...args: unknown[]): void => {\\n        try {\\n     "
      },
      {
        "file": "src/utils/logger.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 69,
        "column": 31,
        "context": "        }\\n      },\\n      error: (message: string, ...args: unknown[]): void => {\\n        try {\\n     "
      },
      {
        "file": "src/utils/logger.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 82,
        "column": 25,
        "context": "ly in development)\\n   */\\n  debug(message: string, ...args: unknown[]): void {\\n    if (this.shouldLog"
      },
      {
        "file": "src/utils/logger.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 86,
        "column": 50,
        "context": "      log.debug(`[DEBUG]${component} ${message}`, ...options.rest);\\n    }\\n  }\\n\\n  /**\\n   * Log genera"
      },
      {
        "file": "src/utils/logger.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 93,
        "column": 24,
        "context": "general information\\n   */\\n  info(message: string, ...args: unknown[]): void {\\n    if (this.shouldLog"
      },
      {
        "file": "src/utils/logger.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 97,
        "column": 48,
        "context": ";\\n      log.info(`[INFO]${component} ${message}`, ...options.rest);\\n    }\\n  }\\n\\n  /**\\n   * Log warnin"
      },
      {
        "file": "src/utils/logger.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 104,
        "column": 24,
        "context": "*\\n   * Log warnings\\n   */\\n  warn(message: string, ...args: unknown[]): void {\\n    if (this.shouldLog"
      },
      {
        "file": "src/utils/logger.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 108,
        "column": 52,
        "context": "    console.warn(`[WARN]${component} ${message}`, ...options.rest);\\n    }\\n  }\\n\\n  /**\\n   * Log errors"
      },
      {
        "file": "src/utils/logger.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 115,
        "column": 25,
        "context": "**\\n   * Log errors\\n   */\\n  error(message: string, ...args: unknown[]): void {\\n    if (this.shouldLog"
      },
      {
        "file": "src/utils/logger.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 119,
        "column": 54,
        "context": "  console.error(`[ERROR]${component} ${message}`, ...options.rest);\\n\\n      // Store error for summar"
      },
      {
        "file": "src/utils/logger.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 177,
        "column": 12,
        "context": "s\\n   */\\n  getComponents(): string[] {\\n    return [...this.componentLoggers];\\n  }\\n\\n  /**\\n   * Check i"
      },
      {
        "file": "src/utils/logger.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 211,
        "column": 43,
        "context": "ility)\\nexport const _debugLog = (message: string, ...args: unknown[]): void =>;\\n  logger.debug(messa"
      },
      {
        "file": "src/utils/logger.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 212,
        "column": 24,
        "context": "rgs: unknown[]): void =>;\\n  logger.debug(message, ...args);\\nexport const _infoLog = (message: string"
      },
      {
        "file": "src/utils/logger.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 213,
        "column": 42,
        "context": ".args);\\nexport const _infoLog = (message: string, ...args: unknown[]): void => logger.info(message, "
      },
      {
        "file": "src/utils/logger.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 213,
        "column": 92,
        "context": "...args: unknown[]): void => logger.info(message, ...args);\\nexport const _warnLog = (message: string"
      },
      {
        "file": "src/utils/logger.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 214,
        "column": 42,
        "context": ".args);\\nexport const _warnLog = (message: string, ...args: unknown[]): void => logger.warn(message, "
      },
      {
        "file": "src/utils/logger.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 214,
        "column": 92,
        "context": "...args: unknown[]): void => logger.warn(message, ...args);\\nexport const _errorLog = (message: strin"
      },
      {
        "file": "src/utils/logger.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 215,
        "column": 43,
        "context": "args);\\nexport const _errorLog = (message: string, ...args: unknown[]): void =>;\\n  logger.error(messa"
      },
      {
        "file": "src/utils/logger.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 216,
        "column": 24,
        "context": "rgs: unknown[]): void =>;\\n  logger.error(message, ...args);\\n"
      },
      {
        "file": "src/utils/lunarPhaseUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 305,
        "column": 38,
        "context": "): string {\\n  // First do your existing formatting...\\n  const formattedPhase = formatLunarPhase(phas"
      },
      {
        "file": "src/utils/lunarPhaseUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 46,
        "column": 1,
        "context": " Water: 0.1, Earth: 0.1, Fire: 0.0, Air: 0.0 } }\\n} as unknown as Record<\\n  LunarPhaseWithUnderscores"
      },
      {
        "file": "src/utils/lunarPhaseUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 407,
        "column": 12,
        "context": "APPING[phase as LunarPhaseWithSpaces]\\n    : (phase as unknown as LunarPhaseWithUnderscores),\\n\\n  retu"
      },
      {
        "file": "src/utils/naturalLanguageProcessor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 253,
        "column": 2,
        "context": "\\n    weight: 0.9\\n  }\\n];\\n\\nconst ALL_PATTERNS = [\\n  ...DIETARY_KEYWORDS;\\n  ...DIFFICULTY_KEYWORDS;\\n  ."
      },
      {
        "file": "src/utils/naturalLanguageProcessor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 254,
        "column": 2,
        "context": "\\n\\nconst ALL_PATTERNS = [\\n  ...DIETARY_KEYWORDS;\\n  ...DIFFICULTY_KEYWORDS;\\n  ...TIME_KEYWORDS;\\n  ...C"
      },
      {
        "file": "src/utils/naturalLanguageProcessor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 255,
        "column": 2,
        "context": " ...DIETARY_KEYWORDS;\\n  ...DIFFICULTY_KEYWORDS;\\n  ...TIME_KEYWORDS;\\n  ...CUISINE_KEYWORDS;\\n  ...MEAL"
      },
      {
        "file": "src/utils/naturalLanguageProcessor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 256,
        "column": 2,
        "context": ";\\n  ...DIFFICULTY_KEYWORDS;\\n  ...TIME_KEYWORDS;\\n  ...CUISINE_KEYWORDS;\\n  ...MEAL_KEYWORDS;\\n  ...SPIC"
      },
      {
        "file": "src/utils/naturalLanguageProcessor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 257,
        "column": 2,
        "context": "RDS;\\n  ...TIME_KEYWORDS;\\n  ...CUISINE_KEYWORDS;\\n  ...MEAL_KEYWORDS;\\n  ...SPICE_KEYWORDS\\n];\\n\\n// ====="
      },
      {
        "file": "src/utils/naturalLanguageProcessor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 258,
        "column": 2,
        "context": "RDS;\\n  ...CUISINE_KEYWORDS;\\n  ...MEAL_KEYWORDS;\\n  ...SPICE_KEYWORDS\\n];\\n\\n// ========== UTILITY FUNCTI"
      },
      {
        "file": "src/utils/naturalLanguageProcessor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 368,
        "column": 26,
        "context": " breakfast ideas'\\n  ];\\n\\n  const allSuggestions = [...cuisineSuggestions, ...dietarySuggestions, ...t"
      },
      {
        "file": "src/utils/naturalLanguageProcessor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 368,
        "column": 49,
        "context": "\\n  const allSuggestions = [...cuisineSuggestions, ...dietarySuggestions, ...timeSuggestions];\\n\\n  for"
      },
      {
        "file": "src/utils/naturalLanguageProcessor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 368,
        "column": 72,
        "context": " = [...cuisineSuggestions, ...dietarySuggestions, ...timeSuggestions];\\n\\n  for (const suggestion of a"
      },
      {
        "file": "src/utils/naturalLanguageProcessor.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 520,
        "column": 21,
        "context": "   if (averageScore > 0.3) {\\n      results.push({ ...((item as any) || {}), searchScore: averageScor"
      },
      {
        "file": "src/utils/nextConfigOptimizer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 9,
        "column": 45,
        "context": "ing,\\n  private readonly logger: (message: string, ...args: unknown[]) => void,\\n\\n  constructor(\\n    c"
      },
      {
        "file": "src/utils/nextConfigOptimizer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 13,
        "column": 30,
        "context": "'next.config.js',,;\\n    logger: (message: string, ...args: unknown[]) => void = console.log,;\\n  ) {\\n"
      },
      {
        "file": "src/utils/nextConfigOptimizer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 81,
        "column": 6,
        "context": "ule resolution\\n    config.resolve.alias = {\\n      ...config.resolve.alias;\\n      '@': path.resolve(_"
      },
      {
        "file": "src/utils/nextConfigOptimizer.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 88,
        "column": 8,
        "context": "rver) {\\n      config.resolve.fallback = {\\n        ...config.resolve.fallback;\\n        fs: false,\\n   "
      },
      {
        "file": "src/utils/nutritionalUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 43,
        "column": 4,
        "context": "emy types\\n  const alchemyProfile: unknown = {\\n    ...profile;\\n    // Convert phytonutrients from Rec"
      },
      {
        "file": "src/utils/patchAlchemicalEngine.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 19,
        "column": 54,
        "context": "log.info('[PatchAlchemicalEngine] Applying patches...');\\n\\n    // PATCH 1: Fix the getElementRanking "
      },
      {
        "file": "src/utils/patchGlobalElementRanking.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 84,
        "column": 39,
        "context": "nction') {\\n      window[functionName] = function (...args) {\\n        try {\\n          return original"
      },
      {
        "file": "src/utils/performance.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 43,
        "column": 33,
        "context": "bounce = () => {\\n        const debounce = (func: (...args: unknown[]) => void, wait: number) => {\\n  "
      },
      {
        "file": "src/utils/performance.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 45,
        "column": 43,
        "context": "eout>;\\n          return function executedFunction(...args: unknown[]) {\\n            const later = ()"
      },
      {
        "file": "src/utils/performance.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 48,
        "column": 19,
        "context": "        clearTimeout(timeout);\\n              func(...args);\\n            };\\n            clearTimeout("
      },
      {
        "file": "src/utils/planetCalculations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 44,
        "column": 42,
        "context": "  };\\n}\\n\\n// Add similar functions for other planets...\\n\\n// Helper function to get sign from longitude"
      },
      {
        "file": "src/utils/planetCalculations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 72,
        "column": 39,
        "context": "ion(date);\\n  // Add calculations for other planets...\\n\\n  // Try to get lunar nodes from the most acc"
      },
      {
        "file": "src/utils/planetCalculations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 149,
        "column": 20,
        "context": "  sun,\\n    moon,\\n    mercury,\\n    // Other planets...\\n    northNode,\\n    southNode\\n  };\\n}\\n"
      },
      {
        "file": "src/utils/planetInfoPatcher.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 85,
        "column": 77,
        "context": "foPatcher] Found planetInfo object, applying fixes...');\\n\\n        // Create a proxy around planetInf"
      },
      {
        "file": "src/utils/planetaryValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 66,
        "column": 16,
        "context": "n = await validateTransitDates();\\n    errors.push(...transitValidation.errors);\\n    warnings.push(.."
      },
      {
        "file": "src/utils/planetaryValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 67,
        "column": 18,
        "context": "h(...transitValidation.errors);\\n    warnings.push(...transitValidation.warnings);\\n\\n    // 2. Check p"
      },
      {
        "file": "src/utils/planetaryValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 71,
        "column": 16,
        "context": "it validatePositionConsistency();\\n    errors.push(...positionValidation.errors);\\n    warnings.push(."
      },
      {
        "file": "src/utils/planetaryValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 72,
        "column": 18,
        "context": "(...positionValidation.errors);\\n    warnings.push(...positionValidation.warnings);\\n\\n    // 3. Run as"
      },
      {
        "file": "src/utils/planetaryValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 77,
        "column": 16,
        "context": " analyzeTestResults(testResults);\\n    errors.push(...testValidation.errors);\\n    warnings.push(...te"
      },
      {
        "file": "src/utils/planetaryValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 78,
        "column": 18,
        "context": "push(...testValidation.errors);\\n    warnings.push(...testValidation.warnings);\\n\\n    // 4. Validate e"
      },
      {
        "file": "src/utils/planetaryValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 82,
        "column": 16,
        "context": "it validateElementalProperties();\\n    errors.push(...elementalValidation.errors);\\n    warnings.push("
      },
      {
        "file": "src/utils/planetaryValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 83,
        "column": 18,
        "context": "...elementalValidation.errors);\\n    warnings.push(...elementalValidation.warnings);\\n\\n    const durat"
      },
      {
        "file": "src/utils/planetaryValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 144,
        "column": 22,
        "context": "ransitDates, currentDate);\\n\\n          errors.push(...validation.errors);\\n          warnings.push(..."
      },
      {
        "file": "src/utils/planetaryValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 145,
        "column": 24,
        "context": "sh(...validation.errors);\\n          warnings.push(...validation.warnings);\\n        } else {\\n        "
      },
      {
        "file": "src/utils/planetaryValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 322,
        "column": 22,
        "context": "ionChange(planetName, pos);\\n          errors.push(...positionValidation.errors);\\n          warnings."
      },
      {
        "file": "src/utils/planetaryValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 323,
        "column": 24,
        "context": "sitionValidation.errors);\\n          warnings.push(...positionValidation.warnings);\\n        }\\n      }"
      },
      {
        "file": "src/utils/planetaryValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 887,
        "column": 18,
        "context": "\\n    if (warnings.length > 5) {\\n      summary += `... and ${warnings.length - 5} more warnings\\n`;\\n "
      },
      {
        "file": "src/utils/planetaryValidation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 288,
        "column": 28,
        "context": " position !== null) {\\n        const pos = position as unknown as {\\n          degree: number,\\n       "
      },
      {
        "file": "src/utils/popup-interceptor.js",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 37,
        "column": 13,
        "context": "Property(window, '__popup_backup', {\\n    value: { ...failsafePopup },\\n    writable: false,\\n    confi"
      },
      {
        "file": "src/utils/recipe/recipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 249,
        "column": 4,
        "context": "recipe\\n  const scoredRecipe: ScoredRecipe = {\\n    ...adaptedRecipe;\\n    score,\\n    alchemicalScores:"
      },
      {
        "file": "src/utils/recipe/recipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 17,
        "column": 34,
        "context": "aptIngredients(\\n    (recipeData.ingredients || []) as unknown as Recipe[],\\n  );\\n\\n  // Create a base "
      },
      {
        "file": "src/utils/recipe/recipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 26,
        "column": 37,
        "context": " desired.'],\\n    elementalProperties: ((recipeData as unknown as any).elementalState as ElementalPro"
      },
      {
        "file": "src/utils/recipe/recipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 48,
        "column": 34,
        "context": "ated properties\\n  const recipeDataAny = recipeData as unknown as any;\\n  if (recipeDataAny.timeToMake"
      },
      {
        "file": "src/utils/recipe/recipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 89,
        "column": 24,
        "context": "String(z).toLowerCase());\\n        .filter(Boolean) as unknown as import('@/types/alchemy').ZodiacSig"
      },
      {
        "file": "src/utils/recipe/recipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 98,
        "column": 24,
        "context": "String(l).toLowerCase());\\n        .filter(Boolean) as unknown as import('@/types/alchemy').LunarPhas"
      },
      {
        "file": "src/utils/recipe/recipeAdapter.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 294,
        "column": 34,
        "context": "talProperties {\\n  const recipeDataAny = recipeData as unknown as any;\\n  if (recipeDataAny.elementalS"
      },
      {
        "file": "src/utils/recipe/recipeCore.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 654,
        "column": 49,
        "context": "\\n    const cookingMethodStr = recipe.cookingMethod as unknown as any;\\n    if (typeof cookingMethodSt"
      },
      {
        "file": "src/utils/recipe/recipeCore.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 669,
        "column": 46,
        "context": "ess\\n    const ingredientsData = recipe.ingredients as unknown as any;\\n    let ingredientText = '';\\n\\n"
      },
      {
        "file": "src/utils/recipe/recipeCore.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 826,
        "column": 43,
        "context": "season\\n  const season: Season = getCurrentSeason() as unknown as Season;\\n\\n  // Determine weekday\\n  c"
      },
      {
        "file": "src/utils/recipe/recipeCore.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 843,
        "column": 35,
        "context": " day: weekDay,\\n    planet: getDayPlanet(dayOfWeek) as unknown as PlanetName\\n  };\\n\\n  // Create planet"
      },
      {
        "file": "src/utils/recipe/recipeCore.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 848,
        "column": 31,
        "context": " PlanetaryHour = {\\n    planet: getHourPlanet(hour) as unknown as PlanetName,\\n    hourOfDay: hour\\n  }"
      },
      {
        "file": "src/utils/recipe/recipeEnrichment.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 217,
        "column": 10,
        "context": "s);\\n    }\\n  });\\n\\n  // Remove duplicates\\n  return [...new Set(normalizedSeasons)];\\n}\\n\\n/**\\n * Derive c"
      },
      {
        "file": "src/utils/recipe/recipeEnrichment.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 356,
        "column": 11,
        "context": "OfServings ?? 1),\\n      )\\n    });\\n  }\\n\\n  return { ...recipe, nutrition: estimatedNutrition };\\n}\\n"
      },
      {
        "file": "src/utils/recipe/recipeFiltering.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 288,
        "column": 12,
        "context": "asonalScore = this.getSeasonalScore({\\n            ...recipe;\\n            score: 1\\n          } as Sco"
      },
      {
        "file": "src/utils/recipe/recipeFiltering.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 319,
        "column": 10,
        "context": " ingredient\\n        }\\n\\n        return {\\n          ...recipe;\\n          score: Math.max(0.1, Math.min"
      },
      {
        "file": "src/utils/recipe/recipeFiltering.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 325,
        "column": 10,
        "context": "', { recipe, error });\\n        return {\\n          ...recipe;\\n          score: 0.5\\n        } as Score"
      },
      {
        "file": "src/utils/recipe/recipeFiltering.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 626,
        "column": 6,
        "context": "ecipes || []).slice(0, 10).map(recipe => ({\\n      ...recipe;\\n      score: 0.5\\n    }));\\n  }\\n\\n  /**\\n  "
      },
      {
        "file": "src/utils/recipe/recipeFiltering.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 637,
        "column": 33,
        "context": "=> {\\n      try {\\n        const recipeData = recipe as unknown as any;\\n\\n        const checkMatch = (d"
      },
      {
        "file": "src/utils/recipe/recipeFiltering.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 694,
        "column": 31,
        "context": "rn 0.5;\\n\\n    try {\\n      const recipeData = recipe as unknown as any;\\n\\n      const checkMatch = (dis"
      },
      {
        "file": "src/utils/recipe/recipeFiltering.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 774,
        "column": 31,
        "context": "oolean {\\n    try {\\n      const recipeData = recipe as unknown as any;\\n      const ingredients = reci"
      },
      {
        "file": "src/utils/recipe/recipeFiltering.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 824,
        "column": 31,
        "context": "oolean {\\n    try {\\n      const recipeData = recipe as unknown as any;\\n      const ingredients = reci"
      },
      {
        "file": "src/utils/recipe/recipeFiltering.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 868,
        "column": 33,
        "context": "lter(recipe => {\\n        const recipeData = recipe as unknown as any;\\n        const recipeName = Str"
      },
      {
        "file": "src/utils/recipe/recipeMatching.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 294,
        "column": 25,
        "context": "fying the original array\\n  let filteredRecipes = [...recipes];\\n\\n  // Apply filters\\n  filteredRecipes"
      },
      {
        "file": "src/utils/recipe/recipeMatching.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 385,
        "column": 17,
        "context": "ntrast) {\\n      const contrast =\\n        Math.max(...(dominantElements || []).map(([_, value]) => va"
      },
      {
        "file": "src/utils/recipe/recipeMatching.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 386,
        "column": 17,
        "context": ").map(([_, value]) => value)) -;\\n        Math.min(...(dominantElements || []).map(([_, value]) => va"
      },
      {
        "file": "src/utils/recipe/recipeMatching.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 247,
        "column": 36,
        "context": "method access\\n  const cacheData = astrologizeCache as unknown as any;\\n  const getLatestData = cacheD"
      },
      {
        "file": "src/utils/recipe/recipeMatching.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 287,
        "column": 58,
        "context": "cipes = (await LocalRecipeService.getAllRecipes()) as unknown as Recipe[];\\n    } catch (error) {\\n   "
      },
      {
        "file": "src/utils/recipe/recipeMatching.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 378,
        "column": 44,
        "context": " type\\n      const nutritionInfo = recipe.nutrition as unknown as any;\\n      score += (await calculat"
      },
      {
        "file": "src/utils/recipe/recipeMatching.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 776,
        "column": 9,
        "context": "Case() === ingredientName.toLowerCase();\\n        ) as unknown as IngredientMapping,\\n\\n        if (exa"
      },
      {
        "file": "src/utils/recipe/recipeMatching.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 793,
        "column": 9,
        "context": "es(String(mapping.name).toLowerCase()));\\n        ) as unknown as IngredientMapping[];\\n\\n        if (("
      },
      {
        "file": "src/utils/recipe/recipeUtils.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 345,
        "column": 4,
        "context": "core !== undefined ? score : 0.5;\\n\\n  return {\\n    ...recipe;\\n    score: defaultScore\\n  } as ScoredRe"
      },
      {
        "file": "src/utils/recipeCalculations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 8,
        "column": 36,
        "context": "roduction\\n */\\nconst debugLog = (_message: string, ..._args: unknown[]): void => {\\n  // Comment out c"
      },
      {
        "file": "src/utils/recipeCalculations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 10,
        "column": 23,
        "context": " to avoid linting warnings\\n  // log.info(message, ...args)\\n};\\n\\n/**\\n * Utility functions for recipe c"
      },
      {
        "file": "src/utils/recipeCalculations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 45,
        "column": 6,
        "context": "ing): string[] {\\n    const optimalTimes = [\\n      ...recipe.astrologicalProfile.rulingPlanets.map(p "
      },
      {
        "file": "src/utils/recipeCalculations.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 46,
        "column": 6,
        "context": "gPlanets.map(p => `${p} dominant hours`),,;\\n      ...recipe.cuisine.astrologicalProfile.aspectEnhanc"
      },
      {
        "file": "src/utils/recipeFilters.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 175,
        "column": 10,
        "context": "ore *= 1.2;\\n        }\\n\\n        return {\\n          ...recipe;\\n          score\\n        };\\n      } catc"
      },
      {
        "file": "src/utils/recipeFilters.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 180,
        "column": 17,
        "context": "ng recipe:', { recipe, error });\\n        return { ...recipe, score: 0 };\\n      }\\n    });\\n  }\\n\\n  priv"
      },
      {
        "file": "src/utils/recipeFilters.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 187,
        "column": 14,
        "context": "ptions): ScoredRecipe[] {\\n    try {\\n      return [...recipes].sort((a, b) => {\\n        let compariso"
      },
      {
        "file": "src/utils/recipeFilters.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 370,
        "column": 6,
        "context": "return recipes.slice(0, 3).map(recipe => ({\\n      ...recipe;\\n      score: 0.5\\n    }));\\n  }\\n\\n  filter"
      },
      {
        "file": "src/utils/recipeFilters.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 424,
        "column": 27,
        "context": "ecipe => {\\n      try {\\n        // Previous filters...\\n\\n        // Cuisine type filter\\n        if (op"
      },
      {
        "file": "src/utils/recipeFilters.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 381,
        "column": 56,
        "context": "    const cuisine: Cuisine = cuisines[cuisineType] as unknown as Cuisine;\\n          if (!cuisine || "
      },
      {
        "file": "src/utils/recipeFilters.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 641,
        "column": 7,
        "context": "     matchedIngredients: mappedIngredients\\n      } as unknown as {\\n        recipe: Recipe,\\n        s"
      },
      {
        "file": "src/utils/recipeFilters.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 671,
        "column": 9,
        "context": "   matchedIngredients: mappedIngredients\\n        } as unknown as {\\n          recipe: Recipe,\\n       "
      },
      {
        "file": "src/utils/recipeFilters.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 699,
        "column": 9,
        "context": "   matchedIngredients: mappedIngredients\\n        } as unknown as {\\n          recipe: Recipe,\\n       "
      },
      {
        "file": "src/utils/recipeFilters.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 770,
        "column": 5,
        "context": "\\n      matchedIngredients: mappedIngredients\\n    } as unknown as {\\n      recipe: Recipe,\\n      score"
      },
      {
        "file": "src/utils/recipeMatching.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 105,
        "column": 25,
        "context": "fying the original array\\n  let filteredRecipes = [...recipes];\\n\\n  // Apply filters\\n  if (matchFilter"
      },
      {
        "file": "src/utils/recipeMatching.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 96,
        "column": 58,
        "context": "cipes = (await LocalRecipeService.getAllRecipes()) as unknown as Recipe[];\\n      // log.info(`Fetche"
      },
      {
        "file": "src/utils/recipeMatching.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 472,
        "column": 15,
        "context": "tyScore = calculateModalityScore(;\\n      qualities as unknown as string[],\\n      preferredModality a"
      },
      {
        "file": "src/utils/recipeMatching.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 482,
        "column": 19,
        "context": "    recipe.astrologicalEnergy;\\n      currentEnergy as unknown as EnergyData,\\n    ),\\n    score += ast"
      },
      {
        "file": "src/utils/recipeMatching.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1007,
        "column": 32,
        "context": "      similarity,\\n          ingredient: ingredient as unknown as IngredientMapping\\n        };\\n      "
      },
      {
        "file": "src/utils/recommendation/foodRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 491,
        "column": 59,
        "context": " recipeElementalProperties = recipe.elementalState as unknown as ElementalProperties;\\n    const elem"
      },
      {
        "file": "src/utils/recommendation/ingredientRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 412,
        "column": 10,
        "context": "name,\\n          category: categoryName,\\n          ...(data as unknown)\\n        }) as EnhancedIngredi"
      },
      {
        "file": "src/utils/recommendation/ingredientRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 416,
        "column": 21,
        "context": " EnhancedIngredient,\\n    );\\n\\n    ingredients.push(...categoryIngredients);\\n\\n    if (limit && ingredi"
      },
      {
        "file": "src/utils/recommendation/ingredientRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 494,
        "column": 38,
        "context": "=== 'egg');\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\n  const dairy = Obj"
      },
      {
        "file": "src/utils/recommendation/ingredientRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 498,
        "column": 38,
        "context": "= 'dairy');\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\n  // Define all cat"
      },
      {
        "file": "src/utils/recommendation/ingredientRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 526,
        "column": 8,
        "context": "   category: category.name.toLowerCase();\\n        ...(data )\\n      } as EnhancedIngredient;\\n\\n      /"
      },
      {
        "file": "src/utils/recommendation/ingredientRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 736,
        "column": 10,
        "context": "culturalScore * 0.05;\\n\\n        return {\\n          ...ingredient;\\n          matchScore: totalScore,\\n "
      },
      {
        "file": "src/utils/recommendation/ingredientRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 751,
        "column": 10,
        "context": "cores in case of error\\n        return {\\n          ...ingredient;\\n          matchScore: 0.5,\\n        "
      },
      {
        "file": "src/utils/recommendation/ingredientRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 817,
        "column": 6,
        "context": "iacMatch) score += 0.2;\\n    }\\n\\n    return {\\n      ...ingredient;\\n      score,\\n      // Add required "
      },
      {
        "file": "src/utils/recommendation/ingredientRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1053,
        "column": 30,
        "context": "f (categoryItems) {\\n      allRecommendations.push(...categoryItems);\\n    }\\n  });\\n\\n  return allRecomm"
      },
      {
        "file": "src/utils/recommendation/ingredientRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 365,
        "column": 50,
        "context": "      result.vegetables = (await loadVegetables()) as unknown as Ingredient;\\n    }\\n    if (categorie"
      },
      {
        "file": "src/utils/recommendation/ingredientRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 368,
        "column": 42,
        "context": "ts')) {\\n      result.fruits = (await loadFruits()) as unknown as Ingredient;\\n    }\\n    if (categorie"
      },
      {
        "file": "src/utils/recommendation/ingredientRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 371,
        "column": 40,
        "context": "erbs')) {\\n      result.herbs = (await loadHerbs()) as unknown as Ingredient;\\n    }\\n    if (categorie"
      },
      {
        "file": "src/utils/recommendation/ingredientRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 374,
        "column": 42,
        "context": "es')) {\\n      result.spices = (await loadSpices()) as unknown as Ingredient;\\n    }\\n    if (categorie"
      },
      {
        "file": "src/utils/recommendation/ingredientRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 377,
        "column": 46,
        "context": ") {\\n      result.proteins = (await loadProteins()) as unknown as Ingredient;\\n    }\\n    if (categorie"
      },
      {
        "file": "src/utils/recommendation/ingredientRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 380,
        "column": 42,
        "context": "ns')) {\\n      result.grains = (await loadGrains()) as unknown as Ingredient;\\n    }\\n    if (categorie"
      },
      {
        "file": "src/utils/recommendation/ingredientRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 383,
        "column": 50,
        "context": "      result.seasonings = (await loadSeasonings()) as unknown as Ingredient;\\n    }\\n    if (categorie"
      },
      {
        "file": "src/utils/recommendation/ingredientRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 386,
        "column": 38,
        "context": "('oils')) {\\n      result.oils = (await loadOils()) as unknown as Ingredient;\\n    }\\n    if (categorie"
      },
      {
        "file": "src/utils/recommendation/ingredientRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 389,
        "column": 46,
        "context": ") {\\n      result.vinegars = (await loadVinegars()) as unknown as Ingredient;\\n    }\\n  } catch (error)"
      },
      {
        "file": "src/utils/recommendation/ingredientRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 567,
        "column": 48,
        "context": "&\\n      (ing.astrologicalProfile.elementalAffinity as unknown as any).base &&\\n      ing.astrological"
      },
      {
        "file": "src/utils/recommendation/ingredientRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 655,
        "column": 28,
        "context": "- aValue\\n    });\\n  }\\n\\n  return filteredIngredients as unknown as Ingredient[];\\n}\\n\\nexport async funct"
      },
      {
        "file": "src/utils/recommendation/ingredientRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 705,
        "column": 20,
        "context": "wait calculateSeasonalScore(;\\n          ingredient as unknown as Ingredient,\\n          _elementalPro"
      },
      {
        "file": "src/utils/recommendation/ingredientRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 873,
        "column": 35,
        "context": "  : 'winter',\\n\\n  const ingredientData = ingredient as unknown as any;\\n  if (ingredientData.season &&"
      },
      {
        "file": "src/utils/recommendation/ingredientRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1037,
        "column": 18,
        "context": " getIngredientRecommendations(;\\n    elementalProps as unknown as ElementalProperties & {\\n      times"
      },
      {
        "file": "src/utils/recommendation/methodRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 112,
        "column": 2,
        "context": " {\\n  // Convert allCookingMethods to our format\\n  ...Object.entries(allCookingMethods).reduce((acc: "
      },
      {
        "file": "src/utils/recommendation/methodRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 116,
        "column": 6,
        "context": "s unknown as any;\\n    acc[id] = {\\n      id,\\n      ...methodData;\\n      elementalEffect:\\n        (met"
      },
      {
        "file": "src/utils/recommendation/methodRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 131,
        "column": 2,
        "context": "/ Add cultural methods with proper organization\\n  ...culturalCookingMethods.reduce((methods: Cooking"
      },
      {
        "file": "src/utils/recommendation/methodRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 142,
        "column": 12,
        "context": "       methods[mainId].variations = [\\n            ...existingVariationsArray;\\n            {\\n        "
      },
      {
        "file": "src/utils/recommendation/methodRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 113,
        "column": 29,
        "context": ", [id, method]) => {\\n    const methodData = method as unknown as any;\\n    acc[id] = {\\n      id,\\n    "
      },
      {
        "file": "src/utils/recommendation/methodRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 132,
        "column": 29,
        "context": "ionary, method) => {\\n    const methodData = method as unknown as any;\\n    // Check if this method is"
      },
      {
        "file": "src/utils/recommendation/methodRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 209,
        "column": 40,
        "context": "perties {\\n  const methodNameLower = String((method as unknown as any).name).toLowerCase() || '';\\n\\n  "
      },
      {
        "file": "src/utils/recommendation/methodRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 224,
        "column": 27,
        "context": "ermodynamic properties\\n  const methodData = method as unknown as any;\\n  const thermodynamicPropertie"
      },
      {
        "file": "src/utils/recommendation/methodRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 380,
        "column": 27,
        "context": "ment', 'pickle']\\n  };\\n\\n  const methodData = method as unknown as any;\\n  const methodName = String(me"
      },
      {
        "file": "src/utils/recommendation/methodRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 409,
        "column": 27,
        "context": "age', 'ferment']\\n  };\\n\\n  const methodData = method as unknown as any;\\n  const methodName = String(me"
      },
      {
        "file": "src/utils/recommendation/methodRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 452,
        "column": 29,
        "context": "ibility (40% weight)\\n    const methodData = method as unknown as any;\\n    const elementalEffect = me"
      },
      {
        "file": "src/utils/recommendation/methodRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 515,
        "column": 57,
        "context": "st thermodynamics = getMethodThermodynamics(method as unknown as CookingMethodProfile);\\n\\n    recomme"
      },
      {
        "file": "src/utils/recommendation/methodRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 555,
        "column": 27,
        "context": "cooking', 'raw']\\n  };\\n\\n  const methodData = method as unknown as any;\\n  const methodName = String(me"
      },
      {
        "file": "src/utils/recommendation/methodRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 577,
        "column": 29,
        "context": "let affinity = 0.5;\\n\\n    const methodData = method as unknown as any;\\n    const methodName = String("
      },
      {
        "file": "src/utils/recommendation/methodRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 627,
        "column": 12,
        "context": "nity = calculateLunarMethodAffinity(;\\n      method as unknown as CookingMethodData,\\n      astroState"
      },
      {
        "file": "src/utils/recommendation/methodRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 637,
        "column": 24,
        "context": "ateAspectMethodAffinity(;\\n      astroState.aspects as unknown as PlanetaryAspect[],\\n      method as "
      },
      {
        "file": "src/utils/recommendation/methodRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 638,
        "column": 12,
        "context": "ects as unknown as PlanetaryAspect[],\\n      method as unknown as CookingMethodData,\\n    ),\\n    score"
      },
      {
        "file": "src/utils/recommendation/methodRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 647,
        "column": 27,
        "context": " ElementalProperties {\\n  const methodData = method as unknown as any;\\n  const elementalEffect = meth"
      },
      {
        "file": "src/utils/recommendation/methodRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 712,
        "column": 45,
        "context": "=> {\\n    const score = calculateMethodScore(method as unknown as CookingMethodProfile, astroState);\\n"
      },
      {
        "file": "src/utils/recommendation/methodRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 715,
        "column": 29,
        "context": " variable extraction\\n    const methodData = method as unknown as any;\\n    const methodId = String(me"
      },
      {
        "file": "src/utils/recommendation/methodRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 733,
        "column": 5,
        "context": "  score: score,\\n      reasons: [description]\\n    } as unknown as MethodRecommendation;\\n  });\\n\\n  cons"
      },
      {
        "file": "src/utils/recommendation/methodRecommendation.ts",
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 736,
        "column": 31,
        "context": "mmendation;\\n  });\\n\\n  const limit = Number((options as unknown as any).limit) || 5;\\n  return scoredMe"
      }
    ],
    "templateLiteralIssues": [
      {
        "file": "src/contexts/ChartContext/provider.tsx",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`<svg width='300' height='300' viewBox='0 0 300 300'>,\n        <circle cx='150' cy='150' r='140' fill='none' stroke='#333' stroke-width='1'/>;\n        <text x='150' y='20' text-anchor='middle'>Current Chart</text>;\n        ${Object.entries(formattedPlanets)\n          .map(([planet, planetInfo], index) => {\n            const angle = (index * 30) % 360;\n            const x = 150 + 120 * Math.cos((angle * Math.PI) / 180);\n            const y = 150 + 120 * Math.sin((angle * Math.PI) / 180);\n            return `<text x='${x}' y='${y}",
        "line": 194,
        "column": 18,
        "context": " ascendantData.sign || 'Libra',\\n      svgContent: `<svg width='300' height='300' viewBox='0 0 300 30"
      },
      {
        "file": "src/contexts/ChartContext/provider.tsx",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`<svg width='300' height='300' viewBox='0 0 300 300'>,\n        <circle cx='150' cy='150' r='140' fill='none' stroke='#333' stroke-width='1'/>;\n        <text x='150' y='20' text-anchor='middle'>Current Chart</text>;\n        ${Object.entries(formattedPlanets)\n          .map(([planet, planetInfo], index) => {\n            const angle = (index * 30) % 360;\n            const x = 150 + 120 * Math.cos((angle * Math.PI) / 180);\n            const y = 150 + 120 * Math.sin((angle * Math.PI) / 180);\n            return `<text x='${x}' y='${y}' text-anchor='middle'>${planet}: ${planetInfo.sign}</text>`;\n          }",
        "line": 194,
        "column": 18,
        "context": " ascendantData.sign || 'Libra',\\n      svgContent: `<svg width='300' height='300' viewBox='0 0 300 30"
      },
      {
        "file": "src/contexts/ChartContext/provider.tsx",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${Object.entries(formattedPlanets)\n          .map(([planet, planetInfo], index) => {\n            const angle = (index * 30) % 360;\n            const x = 150 + 120 * Math.cos((angle * Math.PI) / 180);\n            const y = 150 + 120 * Math.sin((angle * Math.PI) / 180);\n            return `<text x='${",
        "line": 197,
        "column": 8,
        "context": "ext-anchor='middle'>Current Chart</text>;\\n        ${Object.entries(formattedPlanets)\\n          .map("
      },
      {
        "file": "src/hooks/useCurrentChart.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`;\n            })\n            .join('')}\n        </g>\n        \n        <!-- Degree circles -->\n        <circle cx='160' cy='160' r='120' fill='none' stroke='#ccc' stroke-width='0.5' stroke-dasharray='2,2'/>;\n        <circle cx='160' cy='160' r='80' fill='none' stroke='#ccc' stroke-width='0.5' stroke-dasharray='2,2'/>;\n        <circle cx='160' cy='160' r='40' fill='none' stroke='#ccc' stroke-width='0.5' stroke-dasharray='2,2'/>;\n        \n        <!-- Ascendant marker -->\n        ${\n          chartData.ascendant\n            ? (() => {\n                // Get the sign index\n                const signIndex = Object.keys(zodiacSymbols).findIndex(;\n                  sign => sign === chartData.ascendant\n                );\n                const ascAngle = ((signIndex * 30 - 90) * Math.PI) / 180; // Start from top\n                const ascX = 160 + 155 * Math.cos(ascAngle);\n                const ascY = 160 + 155 * Math.sin(ascAngle);\n\n                return `\n            <line x1='160' y1='160' x2='${ascX}' y2='${ascY}",
        "line": 226,
        "column": 12,
        "context": "cSymbols[sign]}\\n              </text>\\n            `;\\n            })\\n            .join('')}\\n        <"
      },
      {
        "file": "src/hooks/useCurrentChart.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`;\n              })()\n            : ''\n        }\n        \n        <!-- North Node (outside the circle at the top) -->\n        <g class='node north-node'>;\n          <circle cx='160' cy='30' r='15' fill='#7272f7' fill-opacity='0.2' stroke='#7272f7' stroke-width='0.5' />;\n          <text x='160' y='30' text-anchor='middle' dominant-baseline='middle' fill='#7272f7' font-size='14' font-weight='bold'>;\n            ‚òä\n          </text>\n          <text x='160' y='50' text-anchor='middle' dominant-baseline='middle' fill='#7272f7' font-size='10'>;\n            North Node\n          </text>\n        </g>\n        \n        <!-- South Node (outside the circle at the bottom) -->\n        <g class='node south-node'>;\n          <circle cx='160' cy='290' r='15' fill='#e06c75' fill-opacity='0.2' stroke='#e06c75' stroke-width='0.5' />;\n          <text x='160' y='290' text-anchor='middle' dominant-baseline='middle' fill='#e06c75' font-size='14' font-weight='bold'>;\n            ‚òã\n          </text>\n          <text x='160' y='310' text-anchor='middle' dominant-baseline='middle' fill='#e06c75' font-size='10'>;\n            South Node\n          </text>\n        </g>\n        \n        <!-- Planets and their connections to signs -->\n        <g class='planets'>;\n          ${planetPositions\n            .map(p => {\n              // Skip the North and South Nodes as they're now drawn separately\n              if (p.planet === 'NorthNode' || p.planet === 'SouthNode') return '';\n\n              return `\n              <g class='planet' filter='url(#glow)'>;\n                <circle cx='${p.x}' cy='${p.y}",
        "line": 257,
        "column": 10,
        "context": ";\\n              ASC\\n            </text>\\n          `;\\n              })()\\n            : ''\\n        }\\n "
      },
      {
        "file": "src/hooks/useCurrentChart.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`;\n            })\n            .join('')}\n        </g>\n        \n        <!-- Degree circles -->\n        <circle cx='160' cy='160' r='120' fill='none' stroke='#ccc' stroke-width='0.5' stroke-dasharray='2,2'/>;\n        <circle cx='160' cy='160' r='80' fill='none' stroke='#ccc' stroke-width='0.5' stroke-dasharray='2,2'/>;\n        <circle cx='160' cy='160' r='40' fill='none' stroke='#ccc' stroke-width='0.5' stroke-dasharray='2,2'/>;\n        \n        <!-- Ascendant marker -->\n        ${\n          chartData.ascendant\n            ? (() => {\n                // Get the sign index\n                const signIndex = Object.keys(zodiacSymbols).findIndex(;\n                  sign => sign === chartData.ascendant\n                );\n                const ascAngle = ((signIndex * 30 - 90) * Math.PI) / 180; // Start from top\n                const ascX = 160 + 155 * Math.cos(ascAngle);\n                const ascY = 160 + 155 * Math.sin(ascAngle);\n\n                return `\n            <line x1='160' y1='160' x2='${ascX}' y2='${ascY}' ;\n                  stroke='#ff4d4d' stroke-width='2' stroke-dasharray='5,3' />;\n            <text x='${160 + 165 * Math.cos(ascAngle)}' ;\n                  y='${160 + 165 * Math.sin(ascAngle)}' ;\n                  text-anchor='middle' dominant-baseline='middle' ;\n                  fill='#ff4d4d' font-weight='bold' font-size='12'>;\n              ASC\n            </text>\n          `;\n              }",
        "line": 226,
        "column": 12,
        "context": "cSymbols[sign]}\\n              </text>\\n            `;\\n            })\\n            .join('')}\\n        <"
      },
      {
        "file": "src/hooks/useCurrentChart.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n          chartData.ascendant\n            ? (() => {\n                // Get the sign index\n                const signIndex = Object.keys(zodiacSymbols).findIndex(;\n                  sign => sign === chartData.ascendant\n                );\n                const ascAngle = ((signIndex * 30 - 90) * Math.PI) / 180; // Start from top\n                const ascX = 160 + 155 * Math.cos(ascAngle);\n                const ascY = 160 + 155 * Math.sin(ascAngle);\n\n                return `\n            <line x1='160' y1='160' x2='${",
        "line": 237,
        "column": 8,
        "context": "       \\n        <!-- Ascendant marker -->\\n        ${\\n          chartData.ascendant\\n            ? (()"
      },
      {
        "file": "src/hooks/useCurrentChart.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${planetPositions\n            .map(p => {\n              // Skip the North and South Nodes as they're now drawn separately\n              if (p.planet === 'NorthNode' || p.planet === 'SouthNode') return '';\n\n              return `\n              <g class='planet' filter='url(#glow)'>;\n                <circle cx='${",
        "line": 286,
        "column": 10,
        "context": " signs -->\\n        <g class='planets'>;\\n          ${planetPositions\\n            .map(p => {\\n        "
      },
      {
        "file": "src/scripts/batch-processing/BatchProcessingOrchestrator.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`# Batch Processing Campaign Report\n\n## Campaign Overview\n- **Campaign ID**: ${campaign.campaignId}\n- **Start Time**: ${campaign.startTime.toISOString()}\n- **End Time**: ${campaign.endTime?.toISOString() || 'In Progress'}\n- **Status**: ${campaign.status.toUpperCase()}\n- **Duration**: ${this.formatDuration(Math.floor(duration / 60000))}\n\n## Processing Plan\n- **Total Files**: ${campaign.processingPlan.totalFiles}\n- **Automatic Processing**: ${campaign.processingPlan.automaticProcessing.length}\n- **Manual Review Required**: ${campaign.processingPlan.manualReviewRequired.length}\n- **Estimated Batches**: ${campaign.processingPlan.estimatedBatches}\n\n## Risk Distribution\n- **Low Risk**: ${campaign.processingPlan.riskSummary.low} files\n- **Medium Risk**: ${campaign.processingPlan.riskSummary.medium} files\n- **High Risk**: ${campaign.processingPlan.riskSummary.high} files\n- **Critical Risk**: ${campaign.processingPlan.riskSummary.critical} files\n\n## Final Statistics\n- **Total Processed**: ${campaign.finalStats.totalProcessed}\n- **Total Eliminated**: ${campaign.finalStats.totalEliminated}\n- **Total Preserved**: ${campaign.finalStats.totalPreserved}\n- **Success Rate**: ${campaign.finalStats.successRate.toFixed(1)}%\n- **Elimination Rate**: ${campaign.finalStats.totalProcessed > 0 ? ((campaign.finalStats.totalEliminated / campaign.finalStats.totalProcessed) * 100).toFixed(1) : 0}%\n\n## Batch Results\n${campaign.batchResults\n  .map(\n    (batch, index) => `\n### Batch ${index + 1}: ${batch.batchId}",
        "line": 407,
        "column": 11,
        "context": "mpaign.startTime.getTime()\\n      : 0,\\n\\n    return `# Batch Processing Campaign Report\\n\\n## Campaign O"
      },
      {
        "file": "src/scripts/batch-processing/BatchProcessingOrchestrator.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`,\n  )\n  .join('')}\n\n## Manual Reviews\n${\n  campaign.manualReviews.length > 0\n    ? campaign.manualReviews\n        .map(\n          review => `;\n### ${path.relative(process.cwd(), review.filePath)}\n- **Unused Variables**: ${review.unusedVariableCount}",
        "line": 449,
        "column": 0,
        "context": "backPerformed ? '- **Rollback**: Performed' : ''}\\n`,\\n  )\\n  .join('')}\\n\\n## Manual Reviews\\n${\\n  campai"
      },
      {
        "file": "src/scripts/batch-processing/BatchProcessingOrchestrator.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`,\n        )\n        .join('')\n    : 'No manual reviews required.'\n}\n\n## Recommendations\n${campaign.recommendations.map(rec => `- ${rec}`).join('\\n')}",
        "line": 463,
        "column": 0,
        "context": "ired**: ${review.approvalRequired ? 'Yes' : 'No'}\\n`,\\n        )\\n        .join('')\\n    : 'No manual re"
      },
      {
        "file": "src/scripts/batch-processing/BatchProcessingOrchestrator.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`;\n### ${checkpoint.id}\n- **Timestamp**: ${checkpoint.timestamp.toISOString()}\n- **Compilation Status**: ${checkpoint.compilationStatus ? '‚úÖ' : '‚ùå'}\n- **Error Count**: ${checkpoint.errorCount}\n${checkpoint.stashId ? `- **Stash ID**: ${checkpoint.stashId}` : ''}",
        "line": 476,
        "column": 18,
        "context": ".getSafetyCheckpoints()\\n  .map(\\n    checkpoint => `;\\n### ${checkpoint.id}\\n- **Timestamp**: ${checkpo"
      },
      {
        "file": "src/scripts/batch-processing/BatchProcessingOrchestrator.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`# Batch Processing Campaign Report\n\n## Campaign Overview\n- **Campaign ID**: ${campaign.campaignId}\n- **Start Time**: ${campaign.startTime.toISOString()}\n- **End Time**: ${campaign.endTime?.toISOString() || 'In Progress'}\n- **Status**: ${campaign.status.toUpperCase()}\n- **Duration**: ${this.formatDuration(Math.floor(duration / 60000))}\n\n## Processing Plan\n- **Total Files**: ${campaign.processingPlan.totalFiles}\n- **Automatic Processing**: ${campaign.processingPlan.automaticProcessing.length}\n- **Manual Review Required**: ${campaign.processingPlan.manualReviewRequired.length}\n- **Estimated Batches**: ${campaign.processingPlan.estimatedBatches}\n\n## Risk Distribution\n- **Low Risk**: ${campaign.processingPlan.riskSummary.low} files\n- **Medium Risk**: ${campaign.processingPlan.riskSummary.medium} files\n- **High Risk**: ${campaign.processingPlan.riskSummary.high} files\n- **Critical Risk**: ${campaign.processingPlan.riskSummary.critical} files\n\n## Final Statistics\n- **Total Processed**: ${campaign.finalStats.totalProcessed}\n- **Total Eliminated**: ${campaign.finalStats.totalEliminated}\n- **Total Preserved**: ${campaign.finalStats.totalPreserved}\n- **Success Rate**: ${campaign.finalStats.successRate.toFixed(1)}%\n- **Elimination Rate**: ${campaign.finalStats.totalProcessed > 0 ? ((campaign.finalStats.totalEliminated / campaign.finalStats.totalProcessed) * 100).toFixed(1) : 0}%\n\n## Batch Results\n${campaign.batchResults\n  .map(\n    (batch, index) => `\n### Batch ${index + 1}: ${batch.batchId}\n- **Files**: ${batch.files.length}\n- **Success**: ${batch.success ? '‚úÖ' : '‚ùå'}\n- **Processed**: ${batch.processedCount}\n- **Eliminated**: ${batch.eliminatedCount}\n- **Preserved**: ${batch.preservedCount}\n- **Compilation**: ${batch.compilationPassed ? '‚úÖ' : '‚ùå'}\n- **Processing Time**: ${batch.processingTime}ms\n${batch.errors.length > 0 ? `- **Errors**: ${batch.errors.join(', ')}",
        "line": 407,
        "column": 11,
        "context": "mpaign.startTime.getTime()\\n      : 0,\\n\\n    return `# Batch Processing Campaign Report\\n\\n## Campaign O"
      },
      {
        "file": "src/scripts/batch-processing/BatchProcessingOrchestrator.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`,\n  )\n  .join('')}\n\n## Manual Reviews\n${\n  campaign.manualReviews.length > 0\n    ? campaign.manualReviews\n        .map(\n          review => `;\n### ${path.relative(process.cwd(), review.filePath)}\n- **Unused Variables**: ${review.unusedVariableCount}\n- **Risk Factors**: ${review.riskFactors.join(', ')}\n- **Approval Required**: ${review.approvalRequired ? 'Yes' : 'No'}\n`,\n        )\n        .join('')\n    : 'No manual reviews required.'\n}",
        "line": 449,
        "column": 0,
        "context": "backPerformed ? '- **Rollback**: Performed' : ''}\\n`,\\n  )\\n  .join('')}\\n\\n## Manual Reviews\\n${\\n  campai"
      },
      {
        "file": "src/scripts/batch-processing/BatchProcessingOrchestrator.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`).join('\\n')};\n\n## Safety Checkpoints\n${this.batchProcessor\n  .getSafetyCheckpoints()\n  .map(\n    checkpoint => `;\n### ${checkpoint.id}\n- **Timestamp**: ${checkpoint.timestamp.toISOString()}\n- **Compilation Status**: ${checkpoint.compilationStatus ? '‚úÖ' : '‚ùå'}\n- **Error Count**: ${checkpoint.errorCount}\n${checkpoint.stashId ? `- **Stash ID**: ${checkpoint.stashId}",
        "line": 470,
        "column": 47,
        "context": "ns\\n${campaign.recommendations.map(rec => `- ${rec}`).join('\\n')};\\n\\n## Safety Checkpoints\\n${this.batc"
      },
      {
        "file": "src/scripts/batch-processing/BatchProcessingOrchestrator.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${campaign.batchResults\n  .map(\n    (batch, index) => `\n### Batch ${",
        "line": 436,
        "column": 0,
        "context": "cessed) * 100).toFixed(1) : 0}%\\n\\n## Batch Results\\n${campaign.batchResults\\n  .map(\\n    (batch, index)"
      },
      {
        "file": "src/scripts/batch-processing/BatchProcessingOrchestrator.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${batch.errors.length > 0 ? `- **Errors**: ${",
        "line": 447,
        "column": 0,
        "context": "\\n- **Processing Time**: ${batch.processingTime}ms\\n${batch.errors.length > 0 ? `- **Errors**: ${batch"
      },
      {
        "file": "src/scripts/batch-processing/BatchProcessingOrchestrator.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n  campaign.manualReviews.length > 0\n    ? campaign.manualReviews\n        .map(\n          review => `;\n### ${",
        "line": 454,
        "column": 0,
        "context": "med' : ''}\\n`,\\n  )\\n  .join('')}\\n\\n## Manual Reviews\\n${\\n  campaign.manualReviews.length > 0\\n    ? campa"
      },
      {
        "file": "src/scripts/batch-processing/BatchProcessingOrchestrator.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${campaign.recommendations.map(rec => `- ${",
        "line": 470,
        "column": 0,
        "context": "o manual reviews required.'\\n}\\n\\n## Recommendations\\n${campaign.recommendations.map(rec => `- ${rec}`)."
      },
      {
        "file": "src/scripts/batch-processing/BatchProcessingOrchestrator.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${this.batchProcessor\n  .getSafetyCheckpoints()\n  .map(\n    checkpoint => `;\n### ${",
        "line": 473,
        "column": 0,
        "context": "> `- ${rec}`).join('\\n')};\\n\\n## Safety Checkpoints\\n${this.batchProcessor\\n  .getSafetyCheckpoints()\\n  "
      },
      {
        "file": "src/scripts/batch-processing/BatchProcessingOrchestrator.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${checkpoint.stashId ? `- **Stash ID**: ${",
        "line": 481,
        "column": 0,
        "context": " '‚ùå'}\\n- **Error Count**: ${checkpoint.errorCount}\\n${checkpoint.stashId ? `- **Stash ID**: ${checkpoi"
      },
      {
        "file": "src/scripts/gasGiantsTest.js",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`${planet.name}: influence = ${planet.influence}${planet.effect ? `, effect = ${planet.effect}` : ''}",
        "line": 28,
        "column": 10,
        "context": "orEach(planet => {\\n        console.log(\\n          `${planet.name}: influence = ${planet.influence}${"
      },
      {
        "file": "src/scripts/gasGiantsTest.js",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`${planet.name}: influence = ${planet.influence}${planet.effect ? `, effect = ${planet.effect}` : ''}",
        "line": 28,
        "column": 10,
        "context": "orEach(planet => {\\n        console.log(\\n          `${planet.name}: influence = ${planet.influence}${"
      },
      {
        "file": "src/scripts/gasGiantsTest.js",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${planet.effect ? `, effect = ${",
        "line": 28,
        "column": 58,
        "context": "  `${planet.name}: influence = ${planet.influence}${planet.effect ? `, effect = ${planet.effect}` : "
      },
      {
        "file": "src/scripts/linting-campaign-cli.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`     File: ${violation.file}${violation.line ? `:${violation.line}` : ''}",
        "line": 203,
        "column": 26,
        "context": "  if (violation.file) {\\n        // // console.log(`     File: ${violation.file}${violation.line ? `:"
      },
      {
        "file": "src/scripts/linting-campaign-cli.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`     File: ${violation.file}${violation.line ? `:${violation.line}` : ''}",
        "line": 203,
        "column": 26,
        "context": "  if (violation.file) {\\n        // // console.log(`     File: ${violation.file}${violation.line ? `:"
      },
      {
        "file": "src/scripts/linting-campaign-cli.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${violation.line ? `:${",
        "line": 203,
        "column": 55,
        "context": "   // // console.log(`     File: ${violation.file}${violation.line ? `:${violation.line}` : ''}`);\\n "
      },
      {
        "file": "src/scripts/linting-excellence-dashboard.js",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`# Linting Excellence Dashboard Report\n\nGenerated: ${new Date().toISOString()}\n\n## üìä Overall Status\n\n- **Validation Status**: ${result.passed ? '‚úÖ PASSED' : '‚ùå FAILED'}\n- **Quality Score**: ${result.metrics.qualityScore}/100\n- **Total Issues**: ${result.metrics.totalIssues}\n- **Validation Duration**: ${duration}ms\n\n## üîç Detailed Metrics\n\n### Error Breakdown\n- **Parser Errors**: ${result.metrics.parserErrors} ${result.metrics.parserErrors === 0 ? '‚úÖ' : 'üö®'}\n- **TypeScript Errors**: ${result.metrics.errors}\n- **Explicit Any Errors**: ${result.metrics.explicitAnyErrors} ${result.metrics.explicitAnyErrors < 100 ? '‚úÖ' : '‚ö°'}\n- **Warnings**: ${result.metrics.warnings}\n\n### Code Quality Issues\n- **Import Order Issues**: ${result.metrics.importOrderIssues}\n- **Unused Variables**: ${result.metrics.unusedVariables}\n- **React Hooks Issues**: ${result.metrics.reactHooksIssues}\n- **Console Statements**: ${result.metrics.consoleStatements}\n\n### Performance Metrics\n- **Linting Duration**: ${result.metrics.performanceMetrics.lintingDuration}ms\n- **Memory Usage**: ${result.metrics.performanceMetrics.memoryUsage.toFixed(1)}MB\n- **Files Processed**: ${result.metrics.performanceMetrics.filesProcessed}\n\n## üö® Active Alerts\n\n${\n  result.alerts.length === 0\n    ? 'No active alerts ‚úÖ'\n    : result.alerts\n        .map(\n          alert =>\n            `- **${alert.severity.toUpperCase()}**: ${alert.message}",
        "line": 418,
        "column": 19,
        "context": "linting-dashboard-report.md';\\n\\n    const report = `# Linting Excellence Dashboard Report\\n\\nGenerated:"
      },
      {
        "file": "src/scripts/linting-excellence-dashboard.js",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`,\n        )\n        .join('\\n')\n}\n\n## üí° Recommendations\n\n${result.recommendations.map(rec => `- ${rec}`).join('\\n')}",
        "line": 456,
        "column": 114,
        "context": "age} (${alert.currentValue} vs ${alert.threshold})`,\\n        )\\n        .join('\\n')\\n}\\n\\n## üí° Recommen"
      },
      {
        "file": "src/scripts/linting-excellence-dashboard.js",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`# Linting Excellence Dashboard Report\n\nGenerated: ${new Date().toISOString()}\n\n## üìä Overall Status\n\n- **Validation Status**: ${result.passed ? '‚úÖ PASSED' : '‚ùå FAILED'}\n- **Quality Score**: ${result.metrics.qualityScore}/100\n- **Total Issues**: ${result.metrics.totalIssues}\n- **Validation Duration**: ${duration}ms\n\n## üîç Detailed Metrics\n\n### Error Breakdown\n- **Parser Errors**: ${result.metrics.parserErrors} ${result.metrics.parserErrors === 0 ? '‚úÖ' : 'üö®'}\n- **TypeScript Errors**: ${result.metrics.errors}\n- **Explicit Any Errors**: ${result.metrics.explicitAnyErrors} ${result.metrics.explicitAnyErrors < 100 ? '‚úÖ' : '‚ö°'}\n- **Warnings**: ${result.metrics.warnings}\n\n### Code Quality Issues\n- **Import Order Issues**: ${result.metrics.importOrderIssues}\n- **Unused Variables**: ${result.metrics.unusedVariables}\n- **React Hooks Issues**: ${result.metrics.reactHooksIssues}\n- **Console Statements**: ${result.metrics.consoleStatements}\n\n### Performance Metrics\n- **Linting Duration**: ${result.metrics.performanceMetrics.lintingDuration}ms\n- **Memory Usage**: ${result.metrics.performanceMetrics.memoryUsage.toFixed(1)}MB\n- **Files Processed**: ${result.metrics.performanceMetrics.filesProcessed}\n\n## üö® Active Alerts\n\n${\n  result.alerts.length === 0\n    ? 'No active alerts ‚úÖ'\n    : result.alerts\n        .map(\n          alert =>\n            `- **${alert.severity.toUpperCase()}**: ${alert.message} (${alert.currentValue} vs ${alert.threshold})`,\n        )\n        .join('\\n')\n}",
        "line": 418,
        "column": 19,
        "context": "linting-dashboard-report.md';\\n\\n    const report = `# Linting Excellence Dashboard Report\\n\\nGenerated:"
      },
      {
        "file": "src/scripts/linting-excellence-dashboard.js",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n  result.alerts.length === 0\n    ? 'No active alerts ‚úÖ'\n    : result.alerts\n        .map(\n          alert =>\n            `- **${",
        "line": 450,
        "column": 0,
        "context": "anceMetrics.filesProcessed}\\n\\n## üö® Active Alerts\\n\\n${\\n  result.alerts.length === 0\\n    ? 'No active a"
      },
      {
        "file": "src/scripts/linting-excellence-dashboard.js",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${result.recommendations.map(rec => `- ${",
        "line": 463,
        "column": 0,
        "context": "  )\\n        .join('\\n')\\n}\\n\\n## üí° Recommendations\\n\\n${result.recommendations.map(rec => `- ${rec}`).jo"
      },
      {
        "file": "src/scripts/quality-gates/AutomatedDocumentationGenerator.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`# Any Type Documentation Report;\n\n## Summary\n\n- **Total Any Types:** ${totalOccurrences}\n- **Documented:** ${documented}\n- **Undocumented:** ${undocumented}\n- **Coverage:** ${coveragePercent}%\n\n## Category Breakdown\n\n${Array.from(categoryBreakdown.entries())\n  .map(([category, stats]) => {\n    const categoryPercent =\n      stats.total > 0 ? ((stats.documented / stats.total) * 100).toFixed(1) : '0.0';\n    return `### ${category.replace(/_/g, ' ').toUpperCase()}\n- Total: ${stats.total}",
        "line": 435,
        "column": 19,
        "context": "documented++;\\n      }\\n    });\\n\\n    const report = `# Any Type Documentation Report;\\n\\n## Summary\\n\\n- *"
      },
      {
        "file": "src/scripts/quality-gates/AutomatedDocumentationGenerator.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`;\n  })\n  .join('\\n\\n')}\n\n## Documentation Templates\n\n${Array.from(this.documentationTemplates.entries())\n  .map(\n    ([category, template]) => `\n### ${category.replace(/_/g, ' ').toUpperCase()}\n\\`\\`\\`typescript\n${template.eslintComment}",
        "line": 453,
        "column": 31,
        "context": "{stats.documented}\\n- Coverage: ${categoryPercent}%`;\\n  })\\n  .join('\\n\\n')}\\n\\n## Documentation Templat"
      },
      {
        "file": "src/scripts/quality-gates/AutomatedDocumentationGenerator.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`,\n  )\n  .join('\\n')}\n\n## Recommendations\n\n${\n  undocumented > 0\n    ? `\n### Immediate Actions Required\n- Document ${undocumented} remaining any types\n- Run: \\`node src/scripts/quality-gates/AutomatedDocumentationGenerator.ts generate\\`\n- Review and customize generated documentation as needed\n`\n    : ''\n}",
        "line": 468,
        "column": 0,
        "context": "explanation}\\n${template.todoComment || ''}\\n\\`\\`\\`\\n`,\\n  )\\n  .join('\\n')}\\n\\n## Recommendations\\n\\n${\\n  un"
      },
      {
        "file": "src/scripts/quality-gates/AutomatedDocumentationGenerator.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`# Any Type Documentation Report;\n\n## Summary\n\n- **Total Any Types:** ${totalOccurrences}\n- **Documented:** ${documented}\n- **Undocumented:** ${undocumented}\n- **Coverage:** ${coveragePercent}%\n\n## Category Breakdown\n\n${Array.from(categoryBreakdown.entries())\n  .map(([category, stats]) => {\n    const categoryPercent =\n      stats.total > 0 ? ((stats.documented / stats.total) * 100).toFixed(1) : '0.0';\n    return `### ${category.replace(/_/g, ' ').toUpperCase()}\n- Total: ${stats.total}\n- Documented: ${stats.documented}\n- Coverage: ${categoryPercent}%`;\n  }",
        "line": 435,
        "column": 19,
        "context": "documented++;\\n      }\\n    });\\n\\n    const report = `# Any Type Documentation Report;\\n\\n## Summary\\n\\n- *"
      },
      {
        "file": "src/scripts/quality-gates/AutomatedDocumentationGenerator.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`,\n  )\n  .join('\\n')}\n\n## Recommendations\n\n${\n  undocumented > 0\n    ? `\n### Immediate Actions Required\n- Document ${undocumented} remaining any types\n- Run: \\`node src/scripts/quality-gates/AutomatedDocumentationGenerator.ts generate\\`\n- Review and customize generated documentation as needed\n`\n    : ''\n}",
        "line": 468,
        "column": 0,
        "context": "explanation}\\n${template.todoComment || ''}\\n\\`\\`\\`\\n`,\\n  )\\n  .join('\\n')}\\n\\n## Recommendations\\n\\n${\\n  un"
      },
      {
        "file": "src/scripts/quality-gates/AutomatedDocumentationGenerator.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${Array.from(categoryBreakdown.entries())\n  .map(([category, stats]) => {\n    const categoryPercent =\n      stats.total > 0 ? ((stats.documented / stats.total) * 100).toFixed(1) : '0.0';\n    return `### ${",
        "line": 446,
        "column": 0,
        "context": "ge:** ${coveragePercent}%\\n\\n## Category Breakdown\\n\\n${Array.from(categoryBreakdown.entries())\\n  .map(("
      },
      {
        "file": "src/scripts/quality-gates/AutomatedDocumentationGenerator.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${Array.from(this.documentationTemplates.entries())\n  .map(\n    ([category, template]) => `\n### ${",
        "line": 459,
        "column": 0,
        "context": " })\\n  .join('\\n\\n')}\\n\\n## Documentation Templates\\n\\n${Array.from(this.documentationTemplates.entries()"
      },
      {
        "file": "src/scripts/quality-gates/AutomatedDocumentationGenerator.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n  undocumented > 0\n    ? `\n### Immediate Actions Required\n- Document ${",
        "line": 474,
        "column": 0,
        "context": "\\`\\`\\`\\n`,\\n  )\\n  .join('\\n')}\\n\\n## Recommendations\\n\\n${\\n  undocumented > 0\\n    ? `\\n### Immediate Action"
      },
      {
        "file": "src/scripts/quality-gates/EnhancedPreCommitHook.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`)\n  .join('\\n')}\n\n## Staged Files\n${\n  this.stagedFiles.length > 0\n    ? this.stagedFiles.map(file => `- ${file}`).join('\\n');\n    : 'No eligible files staged'\n}",
        "line": 526,
        "column": 81,
        "context": "*${fix}**: ${enabled ? '‚úÖ Enabled' : '‚ùå Disabled'}`)\\n  .join('\\n')}\\n\\n## Staged Files\\n${\\n  this.stage"
      },
      {
        "file": "src/scripts/quality-gates/EnhancedPreCommitHook.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`)\n  .join('\\n')}\n\n## Staged Files\n${\n  this.stagedFiles.length > 0\n    ? this.stagedFiles.map(file => `- ${file}`).join('\\n');\n    : 'No eligible files staged'\n}",
        "line": 526,
        "column": 81,
        "context": "*${fix}**: ${enabled ? '‚úÖ Enabled' : '‚ùå Disabled'}`)\\n  .join('\\n')}\\n\\n## Staged Files\\n${\\n  this.stage"
      },
      {
        "file": "src/scripts/quality-gates/EnhancedPreCommitHook.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n  this.stagedFiles.length > 0\n    ? this.stagedFiles.map(file => `- ${",
        "line": 530,
        "column": 0,
        "context": ": '‚ùå Disabled'}`)\\n  .join('\\n')}\\n\\n## Staged Files\\n${\\n  this.stagedFiles.length > 0\\n    ? this.staged"
      },
      {
        "file": "src/scripts/quality-gates/KnowledgeTransferSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`# Certificate of Completion\n\n## Unintentional Any Elimination System Specialist\n\n**Awarded to:** ${userId}\n**Date:** ${completionDate}\n**Certificate ID:** UAE-${userId}-${Date.now()}\n\n### Training Completion Summary\n\n**Modules Completed:** ${progress.completedModules.length}/${this.trainingModules.size}\n**Average Assessment Score:** ${averageScore.toFixed(1)}%\n**Training Duration:** Approximately 3.5 hours\n\n### Competencies Demonstrated\n\n‚úÖ **System Architecture Understanding**\n- Comprehensive knowledge of the 36.78% achievement\n- Understanding of classification and replacement engines\n- Knowledge of safety protocols and quality gates\n\n‚úÖ **Any Type Classification Mastery**\n- Ability to distinguish intentional vs unintentional any types\n- Knowledge of all 5 intentional categories\n- Understanding of replacement strategies\n\n‚úÖ **Safe Replacement Techniques**\n- Mastery of high-confidence patterns (90%+ success rate)\n- Understanding of medium-confidence patterns (70-89% success rate)\n- Knowledge of risk assessment and mitigation\n\n‚úÖ **Safety Protocol Expertise**\n- Emergency recovery procedures\n- Backup and rollback mechanisms\n- System integrity validation\n\n‚úÖ **Quality Gates Proficiency**\n- Continuous monitoring systems\n- Threshold management\n- CI/CD integration\n\n### Assessment Scores\n\n${progress.completedModules\n  .map(moduleId => {\n    const module = this.trainingModules.get(moduleId);\n    const score = progress.scores[moduleId] || 0;\n    return `- **${module?.name}**: ${score}",
        "line": 779,
        "column": 11,
        "context": "bject.values(progress.scores).length;\\n\\n    return `# Certificate of Completion\\n\\n## Unintentional Any"
      },
      {
        "file": "src/scripts/quality-gates/KnowledgeTransferSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`# Certificate of Completion\n\n## Unintentional Any Elimination System Specialist\n\n**Awarded to:** ${userId}\n**Date:** ${completionDate}\n**Certificate ID:** UAE-${userId}-${Date.now()}\n\n### Training Completion Summary\n\n**Modules Completed:** ${progress.completedModules.length}/${this.trainingModules.size}\n**Average Assessment Score:** ${averageScore.toFixed(1)}%\n**Training Duration:** Approximately 3.5 hours\n\n### Competencies Demonstrated\n\n‚úÖ **System Architecture Understanding**\n- Comprehensive knowledge of the 36.78% achievement\n- Understanding of classification and replacement engines\n- Knowledge of safety protocols and quality gates\n\n‚úÖ **Any Type Classification Mastery**\n- Ability to distinguish intentional vs unintentional any types\n- Knowledge of all 5 intentional categories\n- Understanding of replacement strategies\n\n‚úÖ **Safe Replacement Techniques**\n- Mastery of high-confidence patterns (90%+ success rate)\n- Understanding of medium-confidence patterns (70-89% success rate)\n- Knowledge of risk assessment and mitigation\n\n‚úÖ **Safety Protocol Expertise**\n- Emergency recovery procedures\n- Backup and rollback mechanisms\n- System integrity validation\n\n‚úÖ **Quality Gates Proficiency**\n- Continuous monitoring systems\n- Threshold management\n- CI/CD integration\n\n### Assessment Scores\n\n${progress.completedModules\n  .map(moduleId => {\n    const module = this.trainingModules.get(moduleId);\n    const score = progress.scores[moduleId] || 0;\n    return `- **${module?.name}**: ${score}%`;\n  }",
        "line": 779,
        "column": 11,
        "context": "bject.values(progress.scores).length;\\n\\n    return `# Certificate of Completion\\n\\n## Unintentional Any"
      },
      {
        "file": "src/scripts/quality-gates/KnowledgeTransferSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${progress.completedModules\n  .map(moduleId => {\n    const module = this.trainingModules.get(moduleId);\n    const score = progress.scores[moduleId] || 0;\n    return `- **${",
        "line": 822,
        "column": 0,
        "context": "ement\\n- CI/CD integration\\n\\n### Assessment Scores\\n\\n${progress.completedModules\\n  .map(moduleId => {\\n "
      },
      {
        "file": "src/scripts/quality-gates/QualityGatesSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`## Quality Gates Report;\n\n            - **Explicit Any Count:** \\${metrics.explicitAnyCount}\n            - **TypeScript Errors:** \\${metrics.typescriptErrors}\n            - **Linting Warnings:** \\${metrics.lintingWarnings}\n            - **Documentation Coverage:** \\${metrics.documentationCoverage.toFixed(1)}%\n\n            \\${metrics.explicitAnyCount <= 280 ? '‚úÖ' : '‚ùå'} Explicit Any Prevention\n            \\${metrics.typescriptErrors === 0 ? '‚úÖ' : '‚ùå'} TypeScript Error Prevention;\n            \\${metrics.lintingWarnings <= 4950 ? '‚úÖ' : '‚ùå'} Linting Quality\n            \\${",
        "line": 643,
        "column": 29,
        "context": "tricsPath, 'utf8')),\\n            const comment = \\`## Quality Gates Report;\\n\\n            - **Explici"
      },
      {
        "file": "src/scripts/replaceConsoleStatements.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`;\n# Console Statement Replacement Report\n\n## Summary\n- **Files Processed**: ${this.processedFiles}\n- **Total Replacements**: ${this.replacements.length}\n\n## Replacements Made\n${this.replacements\n  .map(\n    r =>;\n      `- **${path.relative(this.srcDir, r.file)}:${r.line}",
        "line": 221,
        "column": 19,
        "context": "ivate generateReport(): void {\\n    const report = `;\\n# Console Statement Replacement Report\\n\\n## Summ"
      },
      {
        "file": "src/scripts/replaceConsoleStatements.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`;\n# Console Statement Replacement Report\n\n## Summary\n- **Files Processed**: ${this.processedFiles}\n- **Total Replacements**: ${this.replacements.length}\n\n## Replacements Made\n${this.replacements\n  .map(\n    r =>;\n      `- **${path.relative(this.srcDir, r.file)}:${r.line}**\n  - Before: \\`${r.original.trim()}",
        "line": 221,
        "column": 19,
        "context": "ivate generateReport(): void {\\n    const report = `;\\n# Console Statement Replacement Report\\n\\n## Summ"
      },
      {
        "file": "src/scripts/replaceConsoleStatements.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${this.replacements\n  .map(\n    r =>;\n      `- **${",
        "line": 229,
        "column": 0,
        "context": "${this.replacements.length}\\n\\n## Replacements Made\\n${this.replacements\\n  .map(\\n    r =>;\\n      `- **$"
      },
      {
        "file": "src/scripts/replaceConsoleStatements.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`[INFO] \\${",
        "line": 192,
        "column": 25,
        "context": "f (this.isDevelopment) {\\n      // // console.log(\\`[INFO] \\${message}\\`, ...args);\\n    }\\n  }\\n\\n  warn"
      },
      {
        "file": "src/scripts/replaceConsoleStatements.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`[WARN] \\${",
        "line": 197,
        "column": 18,
        "context": "ng, ...args: unknown[]): void {\\n    console.warn(\\`[WARN] \\${message}\\`, ...args);\\n  }\\n\\n  error(mess"
      },
      {
        "file": "src/scripts/replaceConsoleStatements.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`[ERROR] \\${",
        "line": 201,
        "column": 19,
        "context": "g, ...args: unknown[]): void {\\n    console.error(\\`[ERROR] \\${message}\\`, ...args);\\n  }\\n\\n  debug(mes"
      },
      {
        "file": "src/scripts/replaceConsoleStatements.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`[DEBUG] \\${",
        "line": 206,
        "column": 25,
        "context": "f (this.isDevelopment) {\\n      // // console.log(\\`[DEBUG] \\${message}\\`, ...args);\\n    }\\n  }\\n}\\n\\nexp"
      },
      {
        "file": "src/scripts/runLintingTests.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`# Comprehensive Linting Test Suite Report\n\n## Executive Summary\n\n- **Total Tests**: ${report.totalTests}\n- **Passed**: ${report.passedTests}\n- **Failed**: ${report.failedTests}\n- **Success Rate**: ${successRate}%\n- **Total Duration**: ${report.totalDuration}ms\n- **Average Duration**: ${avgDuration}ms per test\n\n## Test Categories\n\n### ‚úÖ Configuration Validation\n- **Status**: ${report.summary.configurationValidation ? 'PASSED' : 'FAILED'}\n- **Purpose**: Validates ESLint configuration structure, rule definitions, and plugin integration\n- **Coverage**: Base configuration, TypeScript rules, React 19 compatibility, domain-specific rules\n\n### ‚úÖ Astrological Rules Validation\n- **Status**: ${report.summary.astrologicalRules ? 'PASSED' : 'FAILED'}\n- **Purpose**: Tests custom astrological ESLint rules for planetary calculations\n- **Coverage**: Planetary constants, position structures, elemental properties, transit validation\n\n### ‚úÖ Domain-Specific Rule Behavior\n- **Status**: ${report.summary.domainSpecificBehavior ? 'PASSED' : 'FAILED'}\n- **Purpose**: Validates specialized rule behavior for different file types\n- **Coverage**: Astrological files, campaign system, test files, scripts, Next.js pages\n\n### ‚úÖ Performance Testing\n- **Status**: ${report.summary.performanceTests ? 'PASSED' : 'FAILED'}\n- **Purpose**: Tests linting speed, memory usage, and caching effectiveness\n- **Coverage**: Execution speed, memory optimization, cache performance, scalability\n\n### ‚úÖ Integration Testing\n- **Status**: ${report.summary.integrationTests ? 'PASSED' : 'FAILED'}\n- **Purpose**: Tests automated error resolution and workflow integration\n- **Coverage**: Auto-fix, import organization, unused variables, console statements\n\n### ‚úÖ Comprehensive Validation\n- **Status**: ${report.summary.comprehensiveValidation ? 'PASSED' : 'FAILED'}\n- **Purpose**: Overall system validation and quality assurance\n- **Coverage**: End-to-end validation, integration points, maintenance procedures\n\n## Detailed Results\n\n${report.results\n  .map(\n    result => `;\n### ${result.testFile}\n- **Status**: ${result.passed ? '‚úÖ PASSED' : '‚ùå FAILED'}",
        "line": 189,
        "column": 11,
        "context": "t.totalDuration / report.totalTests);\\n\\n    return `# Comprehensive Linting Test Suite Report\\n\\n## Exe"
      },
      {
        "file": "src/scripts/runLintingTests.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`- **Errors**: ${result.errors.length}\\n${result.errors.map(e => `  - ${e}`).join('\\n')}",
        "line": 240,
        "column": 29,
        "context": "${result.duration}ms\\n${result.errors.length > 0 ? `- **Errors**: ${result.errors.length}\\n${result.e"
      },
      {
        "file": "src/scripts/runLintingTests.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "` : ''};\n${result.warnings.length > 0 ? `- **Warnings**: ${result.warnings.length}\\n${result.warnings.map(w => `  - ${w}",
        "line": 240,
        "column": 117,
        "context": "\\n${result.errors.map(e => `  - ${e}`).join('\\n')}` : ''};\\n${result.warnings.length > 0 ? `- **Warni"
      },
      {
        "file": "src/scripts/runLintingTests.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`,\n  )\n  .join('\\n')}\n\n## Quality Metrics\n\n### Performance Benchmarks\n- **Target Execution Time**: < 30 seconds per test\n- **Target Memory Usage**: < 512MB\n- **Target Cache Hit Rate**: > 80%\n- **Target Success Rate**: > 95%\n\n### Coverage Areas\n- ‚úÖ ESLint Configuration Structure\n- ‚úÖ Custom Astrological Rules\n- ‚úÖ Domain-Specific File Handling\n- ‚úÖ React 19 & Next.js 15 Compatibility\n- ‚úÖ TypeScript Strict Mode Integration\n- ‚úÖ Import Resolution & Organization\n- ‚úÖ Performance Optimization\n- ‚úÖ Memory Management\n- ‚úÖ Caching Effectiveness\n- ‚úÖ Error Resolution Workflows\n\n## Recommendations\n\n${\n  report.failedTests > 0\n    ? `\n### üö® Failed Tests Require Attention\n${report.results\n  .filter(r => !r.passed);\n  .map(r => `- Fix issues in ${r.testFile}`);\n  .join('\\n')}",
        "line": 242,
        "column": 0,
        "context": "warnings.map(w => `  - ${w}`).join('\\n')}` : ''};\\n`,\\n  )\\n  .join('\\n')}\\n\\n## Quality Metrics\\n\\n### Per"
      },
      {
        "file": "src/scripts/runLintingTests.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`# Comprehensive Linting Test Suite Report\n\n## Executive Summary\n\n- **Total Tests**: ${report.totalTests}\n- **Passed**: ${report.passedTests}\n- **Failed**: ${report.failedTests}\n- **Success Rate**: ${successRate}%\n- **Total Duration**: ${report.totalDuration}ms\n- **Average Duration**: ${avgDuration}ms per test\n\n## Test Categories\n\n### ‚úÖ Configuration Validation\n- **Status**: ${report.summary.configurationValidation ? 'PASSED' : 'FAILED'}\n- **Purpose**: Validates ESLint configuration structure, rule definitions, and plugin integration\n- **Coverage**: Base configuration, TypeScript rules, React 19 compatibility, domain-specific rules\n\n### ‚úÖ Astrological Rules Validation\n- **Status**: ${report.summary.astrologicalRules ? 'PASSED' : 'FAILED'}\n- **Purpose**: Tests custom astrological ESLint rules for planetary calculations\n- **Coverage**: Planetary constants, position structures, elemental properties, transit validation\n\n### ‚úÖ Domain-Specific Rule Behavior\n- **Status**: ${report.summary.domainSpecificBehavior ? 'PASSED' : 'FAILED'}\n- **Purpose**: Validates specialized rule behavior for different file types\n- **Coverage**: Astrological files, campaign system, test files, scripts, Next.js pages\n\n### ‚úÖ Performance Testing\n- **Status**: ${report.summary.performanceTests ? 'PASSED' : 'FAILED'}\n- **Purpose**: Tests linting speed, memory usage, and caching effectiveness\n- **Coverage**: Execution speed, memory optimization, cache performance, scalability\n\n### ‚úÖ Integration Testing\n- **Status**: ${report.summary.integrationTests ? 'PASSED' : 'FAILED'}\n- **Purpose**: Tests automated error resolution and workflow integration\n- **Coverage**: Auto-fix, import organization, unused variables, console statements\n\n### ‚úÖ Comprehensive Validation\n- **Status**: ${report.summary.comprehensiveValidation ? 'PASSED' : 'FAILED'}\n- **Purpose**: Overall system validation and quality assurance\n- **Coverage**: End-to-end validation, integration points, maintenance procedures\n\n## Detailed Results\n\n${report.results\n  .map(\n    result => `;\n### ${result.testFile}\n- **Status**: ${result.passed ? '‚úÖ PASSED' : '‚ùå FAILED'}\n- **Duration**: ${result.duration}ms\n${result.errors.length > 0 ? `- **Errors**: ${result.errors.length}",
        "line": 189,
        "column": 11,
        "context": "t.totalDuration / report.totalTests);\\n\\n    return `# Comprehensive Linting Test Suite Report\\n\\n## Exe"
      },
      {
        "file": "src/scripts/runLintingTests.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "` : ''};\n${result.warnings.length > 0 ? `- **Warnings**: ${result.warnings.length}\\n${result.warnings.map(w => `  - ${w}",
        "line": 240,
        "column": 117,
        "context": "\\n${result.errors.map(e => `  - ${e}`).join('\\n')}` : ''};\\n${result.warnings.length > 0 ? `- **Warni"
      },
      {
        "file": "src/scripts/runLintingTests.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`,\n  )\n  .join('\\n')}\n\n## Quality Metrics\n\n### Performance Benchmarks\n- **Target Execution Time**: < 30 seconds per test\n- **Target Memory Usage**: < 512MB\n- **Target Cache Hit Rate**: > 80%\n- **Target Success Rate**: > 95%\n\n### Coverage Areas\n- ‚úÖ ESLint Configuration Structure\n- ‚úÖ Custom Astrological Rules\n- ‚úÖ Domain-Specific File Handling\n- ‚úÖ React 19 & Next.js 15 Compatibility\n- ‚úÖ TypeScript Strict Mode Integration\n- ‚úÖ Import Resolution & Organization\n- ‚úÖ Performance Optimization\n- ‚úÖ Memory Management\n- ‚úÖ Caching Effectiveness\n- ‚úÖ Error Resolution Workflows\n\n## Recommendations\n\n${\n  report.failedTests > 0\n    ? `\n### üö® Failed Tests Require Attention\n${report.results\n  .filter(r => !r.passed);\n  .map(r => `- Fix issues in ${r.testFile}`);\n  .join('\\n')}",
        "line": 242,
        "column": 0,
        "context": "warnings.map(w => `  - ${w}`).join('\\n')}` : ''};\\n`,\\n  )\\n  .join('\\n')}\\n\\n## Quality Metrics\\n\\n### Per"
      },
      {
        "file": "src/scripts/runLintingTests.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${report.results\n  .map(\n    result => `;\n### ${",
        "line": 234,
        "column": 0,
        "context": "nts, maintenance procedures\\n\\n## Detailed Results\\n\\n${report.results\\n  .map(\\n    result => `;\\n### ${re"
      },
      {
        "file": "src/scripts/runLintingTests.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${result.errors.length > 0 ? `- **Errors**: ${",
        "line": 240,
        "column": 0,
        "context": " '‚ùå FAILED'}\\n- **Duration**: ${result.duration}ms\\n${result.errors.length > 0 ? `- **Errors**: ${resu"
      },
      {
        "file": "src/scripts/runLintingTests.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${result.errors.map(e => `  - ${",
        "line": 240,
        "column": 69,
        "context": "gth > 0 ? `- **Errors**: ${result.errors.length}\\n${result.errors.map(e => `  - ${e}`).join('\\n')}` "
      },
      {
        "file": "src/scripts/runLintingTests.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${result.warnings.length > 0 ? `- **Warnings**: ${",
        "line": 241,
        "column": 0,
        "context": "t.errors.map(e => `  - ${e}`).join('\\n')}` : ''};\\n${result.warnings.length > 0 ? `- **Warnings**: ${"
      },
      {
        "file": "src/scripts/runLintingTests.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${result.warnings.map(w => `  - ${",
        "line": 241,
        "column": 75,
        "context": "> 0 ? `- **Warnings**: ${result.warnings.length}\\n${result.warnings.map(w => `  - ${w}`).join('\\n')}"
      },
      {
        "file": "src/scripts/runLintingTests.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n  report.failedTests > 0\n    ? `\n### üö® Failed Tests Require Attention\n${report.results\n  .filter(r => !r.passed);\n  .map(r => `- Fix issues in ${",
        "line": 268,
        "column": 0,
        "context": "‚úÖ Error Resolution Workflows\\n\\n## Recommendations\\n\\n${\\n  report.failedTests > 0\\n    ? `\\n### üö® Failed "
      },
      {
        "file": "src/scripts/unintentional-any-elimination/UnintentionalAnyCampaignController.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`# Unintentional Any Elimination Campaign - Final Report;\n\n## Campaign Summary\n\n**Execution Date:** ${this.startTime.toISOString()}\n**Duration:** ${Math.round((Date.now() - this.startTime.getTime()) / 1000)} seconds\n**Target Reduction:** ${this.config.targetReductionPercentage}%\n**Actual Reduction:** ${this.metrics.reductionPercentage.toFixed(2)}%\n\n## Metrics Overview\n\n### Before and After\n- **Initial explicit-any count:** ${initialCount}\n- **Final explicit-any count:** ${finalCount}\n- **Total reduction:** ${actualReduction} any types\n- **Reduction percentage:** ${this.metrics.reductionPercentage.toFixed(2)}%\n\n### Processing Statistics\n- **Files processed:** ${this.metrics.filesProcessed}\n- **Batches completed:** ${this.metrics.batchesCompleted}\n- **Total any types analyzed:** ${this.metrics.totalAnyTypes}\n- **Classified as intentional:** ${this.metrics.classifiedIntentional}\n- **Classified as unintentional:** ${this.metrics.classifiedUnintentional}\n\n### Replacement Results\n- **Successful replacements:** ${this.metrics.successfulReplacements}\n- **Failed replacements:** ${this.metrics.failedReplacements}\n- **Documented intentional types:** ${this.metrics.documentedIntentional}\n- **Build stability score:** ${this.metrics.buildStabilityScore.toFixed(1)}%\n\n## Achievement Analysis\n\n### Target Achievement\n${\n  this.metrics.reductionPercentage >= this.config.targetReductionPercentage\n    ? '‚úÖ **TARGET ACHIEVED** - Exceeded target reduction percentage'\n    : `‚ö†Ô∏è **TARGET PARTIAL** - Achieved ${this.metrics.reductionPercentage.toFixed(1)}% of ${this.config.targetReductionPercentage}",
        "line": 644,
        "column": 19,
        "context": "on/final-campaign-report.md`;\\n\\n    const report = `# Unintentional Any Elimination Campaign - Final "
      },
      {
        "file": "src/scripts/unintentional-any-elimination/UnintentionalAnyCampaignController.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`# Unintentional Any Elimination Campaign - Final Report;\n\n## Campaign Summary\n\n**Execution Date:** ${this.startTime.toISOString()}\n**Duration:** ${Math.round((Date.now() - this.startTime.getTime()) / 1000)} seconds\n**Target Reduction:** ${this.config.targetReductionPercentage}%\n**Actual Reduction:** ${this.metrics.reductionPercentage.toFixed(2)}%\n\n## Metrics Overview\n\n### Before and After\n- **Initial explicit-any count:** ${initialCount}\n- **Final explicit-any count:** ${finalCount}\n- **Total reduction:** ${actualReduction} any types\n- **Reduction percentage:** ${this.metrics.reductionPercentage.toFixed(2)}%\n\n### Processing Statistics\n- **Files processed:** ${this.metrics.filesProcessed}\n- **Batches completed:** ${this.metrics.batchesCompleted}\n- **Total any types analyzed:** ${this.metrics.totalAnyTypes}\n- **Classified as intentional:** ${this.metrics.classifiedIntentional}\n- **Classified as unintentional:** ${this.metrics.classifiedUnintentional}\n\n### Replacement Results\n- **Successful replacements:** ${this.metrics.successfulReplacements}\n- **Failed replacements:** ${this.metrics.failedReplacements}\n- **Documented intentional types:** ${this.metrics.documentedIntentional}\n- **Build stability score:** ${this.metrics.buildStabilityScore.toFixed(1)}%\n\n## Achievement Analysis\n\n### Target Achievement\n${\n  this.metrics.reductionPercentage >= this.config.targetReductionPercentage\n    ? '‚úÖ **TARGET ACHIEVED** - Exceeded target reduction percentage'\n    : `‚ö†Ô∏è **TARGET PARTIAL** - Achieved ${this.metrics.reductionPercentage.toFixed(1)}% of ${this.config.targetReductionPercentage}% target`\n}",
        "line": 644,
        "column": 19,
        "context": "on/final-campaign-report.md`;\\n\\n    const report = `# Unintentional Any Elimination Campaign - Final "
      },
      {
        "file": "src/scripts/unintentional-any-elimination/UnintentionalAnyCampaignController.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n  this.metrics.reductionPercentage >= this.config.targetReductionPercentage\n    ? '‚úÖ **TARGET ACHIEVED** - Exceeded target reduction percentage'\n    : `‚ö†Ô∏è **TARGET PARTIAL** - Achieved ${",
        "line": 677,
        "column": 0,
        "context": "\\n\\n## Achievement Analysis\\n\\n### Target Achievement\\n${\\n  this.metrics.reductionPercentage >= this.conf"
      },
      {
        "file": "src/scripts/unintentional-any-elimination/execute-full-campaign.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`\n- **Risk Level:** Low\n- **Results:** High success rate with minimal rollbacks\n\n### Phase 2: Advanced Type Replacements\n- **Strategy:** Replace Record types and object structures\n- **Risk Level:** Medium\n- **Results:** Selective replacements with safety validation\n\n### Phase 3: Documentation Pass\n- **Strategy:** Document remaining intentional any types\n- **Risk Level:** Low\n- **Results:** Comprehensive documentation with ESLint disable comments\n\n## Achievement Analysis\n\n### Target Achievement Status\n${\n  reductionPercentage >= 15\n    ? `‚úÖ **SUCCESS** - Achieved ${reductionPercentage.toFixed(1)}% reduction, exceeding minimum 15% target`\n    : `‚ö†Ô∏è **PARTIAL SUCCESS** - Achieved ${reductionPercentage.toFixed(1)}",
        "line": 596,
        "column": 51,
        "context": " **Strategy:** Replace \\`any[]\\` with \\`unknown[]\\`\\n- **Risk Level:** Low\\n- **Results:** High succes"
      },
      {
        "file": "src/scripts/unintentional-any-elimination/execute-full-campaign.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`\n}\n\n### Quality Metrics\n- **Type Safety Improvement:** ${totalReductions} any types replaced with more specific types\n- **Code Documentation:** ${totalDocumented} intentional any types properly documented with explanations\n- **Build Stability:** 100% - No compilation errors introduced\n- **Rollback Events:** Minimal - All handled automatically with safety protocols\n\n## Domain-Specific Results\n\n### High-Risk Domains (Preserved)\n- **Astrological Calculations:** Preserved flexibility for astronomical data compatibility\n- **Campaign System:** Maintained dynamic configuration capabilities\n- **Intelligence Systems:** Preserved flexible typing for adaptive behavior\n\n### Medium-Risk Domains (Selective Improvement)\n- **Recipe & Ingredient System:** Improved type safety where possible\n- **Service Layer:** Enhanced interface definitions\n- **API Integration:** Maintained external compatibility\n\n### Low-Risk Domains (Aggressive Improvement)\n- **React Components:** Improved prop type safety\n- **Utility Functions:** Enhanced with generic type parameters\n- **Helper Functions:** Replaced with specific types\n\n## Technical Implementation\n\n### Safety Protocols Used\n- **Automatic Backup Creation:** All modified files backed up before changes\n- **Incremental Validation:** TypeScript compilation checked after each phase\n- **Automatic Rollback:** Failed changes automatically reverted\n- **Batch Processing:** Limited file processing for stability\n\n### Classification Algorithm\n- **Intentional Detection:** Comments, error handling, external APIs\n- **Unintentional Detection:** Simple arrays, basic records, variable declarations\n- **Confidence Scoring:** 0.5-0.95 confidence range for decision making\n- **Domain Context:** Specialized analysis for astrological and campaign code\n\n## Recommendations\n\n### Immediate Actions\n${\n  reductionPercentage >= 15\n    ? '- Monitor for new unintentional any types in development\\n- Consider expanding to test files in future campaigns\\n- Implement prevention measures in development workflow'\n    : '- Review remaining high-confidence cases for manual intervention\\n- Consider additional targeted campaigns for specific domains\\n- Analyze failed replacements for pattern improvements'\n}\n\n### Long-term Strategy\n- **Prevention Integration:** Add pre-commit hooks to detect new unintentional any types\n- **Continuous Monitoring:** Regular automated analysis of any type usage\n- **Developer Education:** Share best practices for avoiding unintentional any types\n- **Tool Enhancement:** Improve classification algorithms based on campaign learnings\n\n### Future Campaign Opportunities\n- **Test File Campaign:** Apply similar strategies to test files with appropriate safety measures\n- **Function Parameter Campaign:** Targeted improvement of function parameter types\n- **External API Integration:** Improve typing for external service integrations\n\n## Technical Artifacts\n\n### Generated Documentation\n- All intentional any types now include explanatory comments\n- ESLint disable comments added with specific reasoning\n- Consistent documentation format across codebase\n\n### Backup and Recovery\n- Campaign backups preserved for rollback if needed\n- All changes tracked with timestamps and reasoning\n- Recovery procedures documented for emergency use\n\n## Conclusion\n\n${\n  reductionPercentage >= 15\n    ? `The Unintentional Any Elimination Campaign successfully achieved its target of 15-20% reduction in explicit-any warnings. The campaign improved type safety by replacing ${totalReductions} unintentional any types with more specific types while properly documenting ${totalDocumented}",
        "line": 616,
        "column": 108,
        "context": "tage.toFixed(1)}% reduction of 15-20% target range`\\n}\\n\\n### Quality Metrics\\n- **Type Safety Improveme"
      },
      {
        "file": "src/scripts/unintentional-any-elimination/execute-full-campaign.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`\n- **Risk Level:** Low\n- **Results:** High success rate with minimal rollbacks\n\n### Phase 2: Advanced Type Replacements\n- **Strategy:** Replace Record types and object structures\n- **Risk Level:** Medium\n- **Results:** Selective replacements with safety validation\n\n### Phase 3: Documentation Pass\n- **Strategy:** Document remaining intentional any types\n- **Risk Level:** Low\n- **Results:** Comprehensive documentation with ESLint disable comments\n\n## Achievement Analysis\n\n### Target Achievement Status\n${\n  reductionPercentage >= 15\n    ? `‚úÖ **SUCCESS** - Achieved ${reductionPercentage.toFixed(1)}% reduction, exceeding minimum 15% target`\n    : `‚ö†Ô∏è **PARTIAL SUCCESS** - Achieved ${reductionPercentage.toFixed(1)}",
        "line": 596,
        "column": 51,
        "context": " **Strategy:** Replace \\`any[]\\` with \\`unknown[]\\`\\n- **Risk Level:** Low\\n- **Results:** High succes"
      },
      {
        "file": "src/scripts/unintentional-any-elimination/execute-full-campaign.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`\n}\n\n### Quality Metrics\n- **Type Safety Improvement:** ${totalReductions} any types replaced with more specific types\n- **Code Documentation:** ${totalDocumented} intentional any types properly documented with explanations\n- **Build Stability:** 100% - No compilation errors introduced\n- **Rollback Events:** Minimal - All handled automatically with safety protocols\n\n## Domain-Specific Results\n\n### High-Risk Domains (Preserved)\n- **Astrological Calculations:** Preserved flexibility for astronomical data compatibility\n- **Campaign System:** Maintained dynamic configuration capabilities\n- **Intelligence Systems:** Preserved flexible typing for adaptive behavior\n\n### Medium-Risk Domains (Selective Improvement)\n- **Recipe & Ingredient System:** Improved type safety where possible\n- **Service Layer:** Enhanced interface definitions\n- **API Integration:** Maintained external compatibility\n\n### Low-Risk Domains (Aggressive Improvement)\n- **React Components:** Improved prop type safety\n- **Utility Functions:** Enhanced with generic type parameters\n- **Helper Functions:** Replaced with specific types\n\n## Technical Implementation\n\n### Safety Protocols Used\n- **Automatic Backup Creation:** All modified files backed up before changes\n- **Incremental Validation:** TypeScript compilation checked after each phase\n- **Automatic Rollback:** Failed changes automatically reverted\n- **Batch Processing:** Limited file processing for stability\n\n### Classification Algorithm\n- **Intentional Detection:** Comments, error handling, external APIs\n- **Unintentional Detection:** Simple arrays, basic records, variable declarations\n- **Confidence Scoring:** 0.5-0.95 confidence range for decision making\n- **Domain Context:** Specialized analysis for astrological and campaign code\n\n## Recommendations\n\n### Immediate Actions\n${\n  reductionPercentage >= 15\n    ? '- Monitor for new unintentional any types in development\\n- Consider expanding to test files in future campaigns\\n- Implement prevention measures in development workflow'\n    : '- Review remaining high-confidence cases for manual intervention\\n- Consider additional targeted campaigns for specific domains\\n- Analyze failed replacements for pattern improvements'\n}\n\n### Long-term Strategy\n- **Prevention Integration:** Add pre-commit hooks to detect new unintentional any types\n- **Continuous Monitoring:** Regular automated analysis of any type usage\n- **Developer Education:** Share best practices for avoiding unintentional any types\n- **Tool Enhancement:** Improve classification algorithms based on campaign learnings\n\n### Future Campaign Opportunities\n- **Test File Campaign:** Apply similar strategies to test files with appropriate safety measures\n- **Function Parameter Campaign:** Targeted improvement of function parameter types\n- **External API Integration:** Improve typing for external service integrations\n\n## Technical Artifacts\n\n### Generated Documentation\n- All intentional any types now include explanatory comments\n- ESLint disable comments added with specific reasoning\n- Consistent documentation format across codebase\n\n### Backup and Recovery\n- Campaign backups preserved for rollback if needed\n- All changes tracked with timestamps and reasoning\n- Recovery procedures documented for emergency use\n\n## Conclusion\n\n${\n  reductionPercentage >= 15\n    ? `The Unintentional Any Elimination Campaign successfully achieved its target of 15-20% reduction in explicit-any warnings. The campaign improved type safety by replacing ${totalReductions} unintentional any types with more specific types while properly documenting ${totalDocumented} intentional uses. Build stability was maintained throughout the process with zero compilation errors introduced.`\n    : `The Unintentional Any Elimination Campaign made significant progress toward the 15-20% reduction target, achieving ${reductionPercentage.toFixed(1)}",
        "line": 616,
        "column": 108,
        "context": "tage.toFixed(1)}% reduction of 15-20% target range`\\n}\\n\\n### Quality Metrics\\n- **Type Safety Improveme"
      },
      {
        "file": "src/scripts/unintentional-any-elimination/execute-full-campaign.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n  reductionPercentage >= 15\n    ? `‚úÖ **SUCCESS** - Achieved ${",
        "line": 613,
        "column": 0,
        "context": "hievement Analysis\\n\\n### Target Achievement Status\\n${\\n  reductionPercentage >= 15\\n    ? `‚úÖ **SUCCESS*"
      },
      {
        "file": "src/scripts/unintentional-any-elimination/execute-full-campaign.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n  reductionPercentage >= 15\n    ? `The Unintentional Any Elimination Campaign successfully achieved its target of 15-20% reduction in explicit-any warnings. The campaign improved type safety by replacing ${",
        "line": 690,
        "column": 0,
        "context": "ures documented for emergency use\\n\\n## Conclusion\\n\\n${\\n  reductionPercentage >= 15\\n    ? `The Unintent"
      },
      {
        "file": "src/scripts/unintentional-any-elimination/execute-full-campaign.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Record<\\${",
        "line": 307,
        "column": 18,
        "context": "pe) => {\\n          fileFixes++,\\n          return \\`Record<\\${keyType}, unknown>\\`;\\n        });\\n\\n    "
      },
      {
        "file": "src/scripts/unintentional-any-elimination/execute-full-campaign.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`\\${filePath}.backup-\\${",
        "line": 318,
        "column": 30,
        "context": "   // Create backup\\n          const backupPath = \\`\\${filePath}.backup-\\${Date.now()}\\`;\\n          f"
      },
      {
        "file": "src/scripts/unintentional-any-elimination/execute-full-campaign.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`‚úÖ Applied \\${fileFixes} advanced fixes to \\${",
        "line": 327,
        "column": 31,
        "context": " stdio: 'pipe' });\\n            // // console.log(\\`‚úÖ Applied \\${fileFixes} advanced fixes to \\${file"
      },
      {
        "file": "src/scripts/unintentional-any-elimination/execute-full-campaign.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`‚ùå Rolled back \\${",
        "line": 334,
        "column": 31,
        "context": "kSync(backupPath);\\n            // // console.log(\\`‚ùå Rolled back \\${filePath} due to compilation err"
      },
      {
        "file": "src/scripts/unintentional-any-elimination/execute-full-campaign.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Error processing \\${filePath}: \\${",
        "line": 338,
        "column": 27,
        "context": "     } catch (error) {\\n        // // console.log(\\`Error processing \\${filePath}: \\${error.message}\\"
      },
      {
        "file": "src/scripts/unintentional-any-elimination/execute-full-campaign.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Advanced replacement error: \\${",
        "line": 344,
        "column": 23,
        "context": "Fixes;\\n  } catch (error) {\\n    // // console.log(\\`Advanced replacement error: \\${error.message}\\`);"
      },
      {
        "file": "src/scripts/unintentional-any-elimination/execute-full-campaign.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`\\${indent}// eslint-disable-next-line @typescript-eslint/no-explicit-any -- \\${",
        "line": 443,
        "column": 31,
        "context": "\\s*)/)?.[1] || '';\\n              const comment = \\`\\${indent}// eslint-disable-next-line @typescript"
      },
      {
        "file": "src/scripts/unintentional-any-elimination/execute-full-campaign.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`üìù Added \\${addedComments} documentation comments to \\${",
        "line": 453,
        "column": 29,
        "context": " lines.join('\\\\n')),\\n          // // console.log(\\`üìù Added \\${addedComments} documentation comments"
      },
      {
        "file": "src/scripts/unintentional-any-elimination/execute-full-campaign.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Error documenting \\${filePath}: \\${",
        "line": 457,
        "column": 27,
        "context": "     } catch (error) {\\n        // // console.log(\\`Error documenting \\${filePath}: \\${error.message}"
      },
      {
        "file": "src/scripts/unintentional-any-elimination/execute-full-campaign.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Documentation error: \\${",
        "line": 463,
        "column": 23,
        "context": "ented;\\n  } catch (error) {\\n    // // console.log(\\`Documentation error: \\${error.message}\\`);\\n    re"
      },
      {
        "file": "src/scripts/updateIngredientFiles.js",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Failed API request after \\${",
        "line": 84,
        "column": 78,
        "context": "equest\\(url, cacheKey\\) {[\\s\\S]+?throw new Error\\(`Failed API request after \\${maxRetries} retries`\\"
      },
      {
        "file": "src/services/MLIntelligenceService.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`[MLIntelligence] ${message}${data ? ` - ${JSON.stringify(data)}` : ''}",
        "line": 1350,
        "column": 8,
        "context": "d<string, (msg: string) => void>)[level](\\n        `[MLIntelligence] ${message}${data ? ` - ${JSON.st"
      },
      {
        "file": "src/services/MLIntelligenceService.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`[MLIntelligence] ${message}${data ? ` - ${JSON.stringify(data)}` : ''}",
        "line": 1350,
        "column": 8,
        "context": "d<string, (msg: string) => void>)[level](\\n        `[MLIntelligence] ${message}${data ? ` - ${JSON.st"
      },
      {
        "file": "src/services/MLIntelligenceService.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${data ? ` - ${",
        "line": 1350,
        "column": 36,
        "context": "oid>)[level](\\n        `[MLIntelligence] ${message}${data ? ` - ${JSON.stringify(data)}` : ''}`,\\n    "
      },
      {
        "file": "src/services/PredictiveIntelligenceService.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`[PredictiveIntelligence] ${message}${data ? ` - ${JSON.stringify(data)}` : ''}",
        "line": 1241,
        "column": 8,
        "context": "string, (msg: string) => void>)[level]?.(\\n        `[PredictiveIntelligence] ${message}${data ? ` - $"
      },
      {
        "file": "src/services/PredictiveIntelligenceService.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`[PredictiveIntelligence] ${message}${data ? ` - ${JSON.stringify(data)}` : ''}",
        "line": 1241,
        "column": 8,
        "context": "string, (msg: string) => void>)[level]?.(\\n        `[PredictiveIntelligence] ${message}${data ? ` - $"
      },
      {
        "file": "src/services/PredictiveIntelligenceService.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${data ? ` - ${",
        "line": 1241,
        "column": 44,
        "context": "l]?.(\\n        `[PredictiveIntelligence] ${message}${data ? ` - ${JSON.stringify(data)}` : ''}`,\\n    "
      },
      {
        "file": "src/services/campaign/ConsoleStatementRemovalSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`\n# Console Statement Removal Report\nGenerated: ${new Date().toISOString()}\n\n## Execution Summary\n- **Success**: ${result.success ? '‚úÖ' : '‚ùå'}\n- **Files Processed**: ${result.filesProcessed}\n- **Console Statements Removed**: ${result.consoleStatementsRemoved}\n- **Console Statements Preserved**: ${result.consoleStatementsPreserved}\n- **Build Time**: ${result.buildTime}ms\n- **Files with Preserved Statements**: ${result.preservedFiles.length}\n\n## Configuration\n- **Max Files**: ${this.config.maxFiles}\n- **Dry Run**: ${this.config.dryRun}\n- **Preserve Debug Critical**: ${this.config.preserveDebugCritical}\n- **Selective Removal**: ${this.config.selectiveRemoval}\n- **Build Validation**: ${this.config.buildValidation}\n- **Git Stash**: ${this.config.enableGitStash}\n\n## Preserved Files\n${\n  result.preservedFiles.length > 0\n    ? result.preservedFiles.map(f => `- ${f}`).join('\\n');\n    : 'No files had critical console statements preserved'\n}",
        "line": 587,
        "column": 11,
        "context": "esult: ConsoleRemovalResult): string {\\n    return `\\n# Console Statement Removal Report\\nGenerated: ${"
      },
      {
        "file": "src/services/campaign/ConsoleStatementRemovalSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`).join('\\n') : 'No errors'};\n${result.warnings.length > 0 ? '### Warnings\\n' + result.warnings.map(w => `- ${w}`).join('\\n') : 'No warnings'}",
        "line": 615,
        "column": 76,
        "context": " ? '### Errors\\n' + result.errors.map(e => `- ${e}`).join('\\n') : 'No errors'};\\n${result.warnings.le"
      },
      {
        "file": "src/services/campaign/ConsoleStatementRemovalSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`\n# Console Statement Batch Removal Report\nGenerated: ${new Date().toISOString()}\n\n## Batch Summary\n- **Total Batches**: ${result.totalBatches}\n- **Successful Batches**: ${result.successfulBatches}\n- **Failed Batches**: ${result.failedBatches}\n- **Success Rate**: ${((result.successfulBatches / result.totalBatches) * 100).toFixed(1)}%\n\n## Processing Summary\n- **Total Files Processed**: ${result.totalFilesProcessed}\n- **Total Console Statements Processed**: ${result.totalConsoleStatementsProcessed}\n- **Critical Statements Preserved**: ${result.preservedCriticalStatements}\n- **Average Build Time**: ${result.averageBuildTime.toFixed(0)}ms\n\n## Batch Configuration\n- **Batch Size**: ${this.config.batchSize} files per batch\n- **Preserve Debug Critical**: ${this.config.preserveDebugCritical}\n- **Selective Removal**: ${this.config.selectiveRemoval}\n- **Build Validation**: ${this.config.buildValidation}\n\n## Issues\n${result.errors.length > 0 ? '### Batch Errors\\n' + result.errors.map(e => `- ${e}`).join('\\n') : 'No batch errors'}",
        "line": 631,
        "column": 11,
        "context": "(result: BatchRemovalResult): string {\\n    return `\\n# Console Statement Batch Removal Report\\nGenerat"
      },
      {
        "file": "src/services/campaign/ConsoleStatementRemovalSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`\n# Console Statement Removal Report\nGenerated: ${new Date().toISOString()}\n\n## Execution Summary\n- **Success**: ${result.success ? '‚úÖ' : '‚ùå'}\n- **Files Processed**: ${result.filesProcessed}\n- **Console Statements Removed**: ${result.consoleStatementsRemoved}\n- **Console Statements Preserved**: ${result.consoleStatementsPreserved}\n- **Build Time**: ${result.buildTime}ms\n- **Files with Preserved Statements**: ${result.preservedFiles.length}\n\n## Configuration\n- **Max Files**: ${this.config.maxFiles}\n- **Dry Run**: ${this.config.dryRun}\n- **Preserve Debug Critical**: ${this.config.preserveDebugCritical}\n- **Selective Removal**: ${this.config.selectiveRemoval}\n- **Build Validation**: ${this.config.buildValidation}\n- **Git Stash**: ${this.config.enableGitStash}\n\n## Preserved Files\n${\n  result.preservedFiles.length > 0\n    ? result.preservedFiles.map(f => `- ${f}`).join('\\n');\n    : 'No files had critical console statements preserved'\n}",
        "line": 587,
        "column": 11,
        "context": "esult: ConsoleRemovalResult): string {\\n    return `\\n# Console Statement Removal Report\\nGenerated: ${"
      },
      {
        "file": "src/services/campaign/ConsoleStatementRemovalSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`).join('\\n') : 'No errors'};\n${result.warnings.length > 0 ? '### Warnings\\n' + result.warnings.map(w => `- ${w}`).join('\\n') : 'No warnings'}",
        "line": 615,
        "column": 76,
        "context": " ? '### Errors\\n' + result.errors.map(e => `- ${e}`).join('\\n') : 'No errors'};\\n${result.warnings.le"
      },
      {
        "file": "src/services/campaign/ConsoleStatementRemovalSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`\n# Console Statement Batch Removal Report\nGenerated: ${new Date().toISOString()}\n\n## Batch Summary\n- **Total Batches**: ${result.totalBatches}\n- **Successful Batches**: ${result.successfulBatches}\n- **Failed Batches**: ${result.failedBatches}\n- **Success Rate**: ${((result.successfulBatches / result.totalBatches) * 100).toFixed(1)}%\n\n## Processing Summary\n- **Total Files Processed**: ${result.totalFilesProcessed}\n- **Total Console Statements Processed**: ${result.totalConsoleStatementsProcessed}\n- **Critical Statements Preserved**: ${result.preservedCriticalStatements}\n- **Average Build Time**: ${result.averageBuildTime.toFixed(0)}ms\n\n## Batch Configuration\n- **Batch Size**: ${this.config.batchSize} files per batch\n- **Preserve Debug Critical**: ${this.config.preserveDebugCritical}\n- **Selective Removal**: ${this.config.selectiveRemoval}\n- **Build Validation**: ${this.config.buildValidation}\n\n## Issues\n${result.errors.length > 0 ? '### Batch Errors\\n' + result.errors.map(e => `- ${e}`).join('\\n') : 'No batch errors'}",
        "line": 631,
        "column": 11,
        "context": "(result: BatchRemovalResult): string {\\n    return `\\n# Console Statement Batch Removal Report\\nGenerat"
      },
      {
        "file": "src/services/campaign/ConsoleStatementRemovalSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n  result.preservedFiles.length > 0\n    ? result.preservedFiles.map(f => `- ${",
        "line": 608,
        "column": 0,
        "context": "${this.config.enableGitStash}\\n\\n## Preserved Files\\n${\\n  result.preservedFiles.length > 0\\n    ? result"
      },
      {
        "file": "src/services/campaign/ConsoleStatementRemovalSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${result.errors.length > 0 ? '### Errors\\n' + result.errors.map(e => `- ${",
        "line": 615,
        "column": 0,
        "context": "itical console statements preserved'\\n}\\n\\n## Issues\\n${result.errors.length > 0 ? '### Errors\\n' + resu"
      },
      {
        "file": "src/services/campaign/ConsoleStatementRemovalSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${result.warnings.length > 0 ? '### Warnings\\n' + result.warnings.map(w => `- ${",
        "line": 616,
        "column": 0,
        "context": "ors.map(e => `- ${e}`).join('\\n') : 'No errors'};\\n${result.warnings.length > 0 ? '### Warnings\\n' + "
      },
      {
        "file": "src/services/campaign/ConsoleStatementRemovalSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${result.errors.length > 0 ? '### Batch Errors\\n' + result.errors.map(e => `- ${",
        "line": 654,
        "column": 0,
        "context": "tion**: ${this.config.buildValidation}\\n\\n## Issues\\n${result.errors.length > 0 ? '### Batch Errors\\n' "
      },
      {
        "file": "src/services/campaign/EnterpriseIntelligenceGenerator.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`,\n          implementation: 'Add validation, error handling, and logging',\n          estimatedImpact: 60\n        }\n      ];\n\n      this.analytics.recommendations = recommendations;\n      this.updatePerformanceMetrics(startTime);\n      \n      return recommendations;\n    } catch (error) {\n      this.handleError('generateRecommendations', error),\n      return []\n    }\n  }\n\n  /**\n   * Demonstrate system capabilities\n   */\n  async demonstrateCapabilities(): Promise<Record<string, unknown>> {\n    if (!this.config.enableDemonstrations) {\n      return {};\n    }\n\n    const startTime = performance.now();\n    \n    try {\n      const demonstration = {\n        systemName: '${systemName}',\n        originalExport: '${originalName}',\n        capabilities: [\n${capabilities.map(cap => `          '${cap.name}': '${cap.description}",
        "line": 452,
        "column": 75,
        "context": "Enhance \\${originalName} with additional features\\`,\\n          implementation: 'Add validation, erro"
      },
      {
        "file": "src/services/campaign/EnterpriseIntelligenceGenerator.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`).join(',\\n')},;\n        ],\n        sampleAnalysis: await this.analyzePatterns({ sample: true }),\n        sampleRecommendations: await this.generateRecommendations({ sample: true }),\n        performanceMetrics: this.analytics.performanceMetrics,\n        configuration: this.config\n      };\n\n      this.updatePerformanceMetrics(startTime);\n      return demonstration;\n    } catch (error) {\n      this.handleError('demonstrateCapabilities', error),\n      return {};\n    }\n  }\n\n${capabilities\n  .map(\n    cap => `  /**;\n   * ${cap.description}\n   */\n  private ${cap.name}",
        "line": 483,
        "column": 72,
        "context": " => `          '${cap.name}': '${cap.description}'`).join(',\\n')},;\\n        ],\\n        sampleAnalysi"
      },
      {
        "file": "src/services/campaign/EnterpriseIntelligenceGenerator.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`,\n          implementation: 'Add validation, error handling, and logging',\n          estimatedImpact: 60\n        }\n      ];\n\n      this.analytics.recommendations = recommendations;\n      this.updatePerformanceMetrics(startTime);\n      \n      return recommendations;\n    } catch (error) {\n      this.handleError('generateRecommendations', error),\n      return []\n    }\n  }\n\n  /**\n   * Demonstrate system capabilities\n   */\n  async demonstrateCapabilities(): Promise<Record<string, unknown>> {\n    if (!this.config.enableDemonstrations) {\n      return {};\n    }\n\n    const startTime = performance.now();\n    \n    try {\n      const demonstration = {\n        systemName: '${systemName}',\n        originalExport: '${originalName}',\n        capabilities: [\n${capabilities.map(cap => `          '${cap.name}': '${cap.description}'`).join(',\\n')}",
        "line": 452,
        "column": 75,
        "context": "Enhance \\${originalName} with additional features\\`,\\n          implementation: 'Add validation, erro"
      },
      {
        "file": "src/services/campaign/EnterpriseIntelligenceGenerator.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${capabilities.map(cap => `          '${",
        "line": 483,
        "column": 0,
        "context": "xport: '${originalName}',\\n        capabilities: [\\n${capabilities.map(cap => `          '${cap.name}'"
      },
      {
        "file": "src/services/campaign/EnterpriseIntelligenceGenerator.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${capabilities\n  .map(\n    cap => `  /**;\n   * ${",
        "line": 499,
        "column": 0,
        "context": "apabilities', error),\\n      return {};\\n    }\\n  }\\n\\n${capabilities\\n  .map(\\n    cap => `  /**;\\n   * ${c"
      },
      {
        "file": "src/services/campaign/EnterpriseIntelligenceGenerator.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`rec-\\${",
        "line": 433,
        "column": 15,
        "context": "ns: Recommendation[] = [\\n        {\\n          id: \\`rec-\\${Date.now()}-1\\`,\\n          type: 'optimiza"
      },
      {
        "file": "src/services/campaign/EnterpriseIntelligenceGenerator.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Optimize \\${",
        "line": 436,
        "column": 24,
        "context": "      priority: 'medium',\\n          description: \\`Optimize \\${originalName} usage patterns\\`,\\n     "
      },
      {
        "file": "src/services/campaign/EnterpriseIntelligenceGenerator.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`rec-\\${",
        "line": 441,
        "column": 15,
        "context": "tedImpact: 75\\n        },\\n        {\\n          id: \\`rec-\\${Date.now()}-2\\`,\\n          type: 'integrat"
      },
      {
        "file": "src/services/campaign/EnterpriseIntelligenceGenerator.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Integrate \\${",
        "line": 444,
        "column": 24,
        "context": "        priority: 'high',\\n          description: \\`Integrate \\${originalName} with monitoring system"
      },
      {
        "file": "src/services/campaign/EnterpriseIntelligenceGenerator.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`rec-\\${",
        "line": 449,
        "column": 15,
        "context": "tedImpact: 85\\n        },\\n        {\\n          id: \\`rec-\\${Date.now()}-3\\`,\\n          type: 'enhancem"
      },
      {
        "file": "src/services/campaign/EnterpriseIntelligenceGenerator.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Enhance \\${",
        "line": 452,
        "column": 24,
        "context": "         priority: 'low',\\n          description: \\`Enhance \\${originalName} with additional features"
      },
      {
        "file": "src/services/campaign/EnterpriseIntelligenceGenerator.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`\\${",
        "line": 585,
        "column": 7,
        "context": " generate actionable insights\\n    return [\\n      \\`\\${originalName} shows potential for optimization"
      },
      {
        "file": "src/services/campaign/EnterpriseIntelligenceGenerator.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`\\${systemName}.\\${",
        "line": 602,
        "column": 21,
        "context": "nfig.logLevel === 'error') {\\n      console.error(\\`\\${systemName}.\\${method} error:\\`, error);\\n    }"
      },
      {
        "file": "src/services/campaign/FinalValidationSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`# Perfect Codebase Campaign - Certification;\n\n## Campaign Completion Certificate\n\n**Project**: WhatToEatNext\n**Campaign**: Perfect Codebase Campaign\n**Certification Level**: ${report.certificationStatus.certificationLevel}\n**Certification Date**: ${report.certificationStatus.certificationDate}\n**Validation Timestamp**: ${report.timestamp}\n\n## Achievement Summary\n\n‚úÖ **Zero TypeScript Errors**: ${report.campaignSummary.finalState.errors} errors (Target: 0)\n‚úÖ **Zero Linting Warnings**: ${report.campaignSummary.finalState.warnings} warnings (Target: 0)\n‚úÖ **Enterprise Intelligence**: ${report.campaignSummary.finalState.intelligence} systems (Target: 200+)\n‚úÖ **Performance Optimized**: ${report.performanceMetrics.buildTime.toFixed(1)}s build time (Target: <10s)\n\n## Campaign Improvements\n\n- **Error Elimination**: ${report.campaignSummary.improvements.errorReduction} TypeScript errors eliminated\n- **Warning Elimination**: ${report.campaignSummary.improvements.warningReduction} linting warnings eliminated\n- **Intelligence Creation**: ${report.campaignSummary.improvements.intelligenceIncrease} enterprise intelligence systems created\n\n## Performance Metrics\n\n- **Build Time**: ${report.performanceMetrics.buildTime.toFixed(1)} seconds\n- **Memory Usage**: ${report.performanceMetrics.memoryUsage.toFixed(1)} MB\n- **Bundle Size**: ${report.performanceMetrics.bundleSize}\n- **Test Coverage**: ${report.performanceMetrics.testCoverage}%\n\n## Certification Status\n\n- ‚úÖ **Perfect Codebase Achieved**: Zero errors, zero warnings\n- ‚úÖ **Enterprise Ready**: Optimal performance and intelligence systems\n- ‚úÖ **Production Deployment Ready**: Comprehensive validation passed\n\n## Validation Results\n\n${report.validationResults\n  .map(\n    result =>;\n      `### ${result.category}\\n**Status**: ${result.passed ? '‚úÖ PASSED' : '‚ùå FAILED'}",
        "line": 724,
        "column": 33,
        "context": " Promise<void> {\\n    const certificationContent = `# Perfect Codebase Campaign - Certification;\\n\\n## "
      },
      {
        "file": "src/services/campaign/FinalValidationSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`# Perfect Codebase Campaign - Certification;\n\n## Campaign Completion Certificate\n\n**Project**: WhatToEatNext\n**Campaign**: Perfect Codebase Campaign\n**Certification Level**: ${report.certificationStatus.certificationLevel}\n**Certification Date**: ${report.certificationStatus.certificationDate}\n**Validation Timestamp**: ${report.timestamp}\n\n## Achievement Summary\n\n‚úÖ **Zero TypeScript Errors**: ${report.campaignSummary.finalState.errors} errors (Target: 0)\n‚úÖ **Zero Linting Warnings**: ${report.campaignSummary.finalState.warnings} warnings (Target: 0)\n‚úÖ **Enterprise Intelligence**: ${report.campaignSummary.finalState.intelligence} systems (Target: 200+)\n‚úÖ **Performance Optimized**: ${report.performanceMetrics.buildTime.toFixed(1)}s build time (Target: <10s)\n\n## Campaign Improvements\n\n- **Error Elimination**: ${report.campaignSummary.improvements.errorReduction} TypeScript errors eliminated\n- **Warning Elimination**: ${report.campaignSummary.improvements.warningReduction} linting warnings eliminated\n- **Intelligence Creation**: ${report.campaignSummary.improvements.intelligenceIncrease} enterprise intelligence systems created\n\n## Performance Metrics\n\n- **Build Time**: ${report.performanceMetrics.buildTime.toFixed(1)} seconds\n- **Memory Usage**: ${report.performanceMetrics.memoryUsage.toFixed(1)} MB\n- **Bundle Size**: ${report.performanceMetrics.bundleSize}\n- **Test Coverage**: ${report.performanceMetrics.testCoverage}%\n\n## Certification Status\n\n- ‚úÖ **Perfect Codebase Achieved**: Zero errors, zero warnings\n- ‚úÖ **Enterprise Ready**: Optimal performance and intelligence systems\n- ‚úÖ **Production Deployment Ready**: Comprehensive validation passed\n\n## Validation Results\n\n${report.validationResults\n  .map(\n    result =>;\n      `### ${result.category}\\n**Status**: ${result.passed ? '‚úÖ PASSED' : '‚ùå FAILED'}\\n**Current**: ${result.current} | **Target**: ${result.target}\\n`,\n  )\n  .join('\\n')}",
        "line": 724,
        "column": 33,
        "context": " Promise<void> {\\n    const certificationContent = `# Perfect Codebase Campaign - Certification;\\n\\n## "
      },
      {
        "file": "src/services/campaign/FinalValidationSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${report.validationResults\n  .map(\n    result =>;\n      `### ${",
        "line": 762,
        "column": 0,
        "context": "hensive validation passed\\n\\n## Validation Results\\n\\n${report.validationResults\\n  .map(\\n    result =>;\\n"
      },
      {
        "file": "src/services/campaign/InfrastructurePreparation.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`;\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Infrastructure Preparation Report</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        .header { background: #f0f0f0; padding: 20px; border-radius: 5px; }\n        .section { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }\n        .success { color: green; }\n        .warning { color: orange; }\n        .error { color: red; }\n        .score { font-size: 24px; font-weight: bold; }\n        .recommendations { background: #fff3cd; padding: 15px; border-radius: 5px; }\n    </style>\n</head>\n<body>\n    <div class='header'>;\n        <h1>üöÄ Infrastructure Preparation Report</h1>\n        <p>Generated: ${new Date().toLocaleString()}</p>\n        <div class='score ${status.overallReadiness ? 'success' : 'warning'}'>;\n            Readiness Score: ${status.readinessScore}%\n        </div>\n    </div>\n\n    <div class='section'>;\n        <h2>üìä Component Status</h2>\n        <ul>\n            <li class='${status.eslintConfig.fastConfig.functional ? 'success' : 'error'}'>;\n                Fast ESLint Config: ${status.eslintConfig.fastConfig.functional ? '‚úÖ Functional' : '‚ùå Issues'}\n            </li>\n            <li class='${status.eslintConfig.typeAwareConfig.functional ? 'success' : 'error'}'>;\n                Type-Aware ESLint Config: ${status.eslintConfig.typeAwareConfig.functional ? '‚úÖ Functional' : '‚ùå Issues'}\n            </li>\n            <li class='${status.backupSystem.rollbackMechanismTested ? 'success' : 'warning'}'>;\n                Backup System: ${status.backupSystem.rollbackMechanismTested ? '‚úÖ Ready' : '‚ö†Ô∏è Needs Testing'}\n            </li>\n            <li class='${status.buildMonitoring.buildStabilityChecks ? 'success' : 'error'}'>;\n                Build Monitoring: ${status.buildMonitoring.buildStabilityChecks ? '‚úÖ Stable' : '‚ùå Unstable'}\n            </li>\n            <li class='${status.batchProcessing.safetyValidationEnabled ? 'success' : 'warning'}'>;\n                Batch Processing: ${status.batchProcessing.safetyValidationEnabled ? '‚úÖ Configured' : '‚ö†Ô∏è Basic'}\n            </li>\n            <li class='${status.progressTracking.metricsCollectionEnabled ? 'success' : 'warning'}'>;\n                Progress Tracking: ${status.progressTracking.metricsCollectionEnabled ? '‚úÖ Enabled' : '‚ö†Ô∏è Limited'}\n            </li>\n        </ul>\n    </div>\n\n    ${\n      status.recommendations.length > 0\n        ? `\n    <div class='section recommendations'>;\n        <h2>üìã Recommendations</h2>\n        <ol>\n            ${status.recommendations.map(rec => `<li>${rec}</li>`).join('')}",
        "line": 861,
        "column": 23,
        "context": ", 2));\\n\\n    // HTML Report\\n    const htmlReport = `;\\n<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Infras"
      },
      {
        "file": "src/services/campaign/InfrastructurePreparation.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`;\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Infrastructure Preparation Report</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        .header { background: #f0f0f0; padding: 20px; border-radius: 5px; }\n        .section { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }\n        .success { color: green; }\n        .warning { color: orange; }\n        .error { color: red; }\n        .score { font-size: 24px; font-weight: bold; }\n        .recommendations { background: #fff3cd; padding: 15px; border-radius: 5px; }\n    </style>\n</head>\n<body>\n    <div class='header'>;\n        <h1>üöÄ Infrastructure Preparation Report</h1>\n        <p>Generated: ${new Date().toLocaleString()}</p>\n        <div class='score ${status.overallReadiness ? 'success' : 'warning'}'>;\n            Readiness Score: ${status.readinessScore}%\n        </div>\n    </div>\n\n    <div class='section'>;\n        <h2>üìä Component Status</h2>\n        <ul>\n            <li class='${status.eslintConfig.fastConfig.functional ? 'success' : 'error'}'>;\n                Fast ESLint Config: ${status.eslintConfig.fastConfig.functional ? '‚úÖ Functional' : '‚ùå Issues'}\n            </li>\n            <li class='${status.eslintConfig.typeAwareConfig.functional ? 'success' : 'error'}'>;\n                Type-Aware ESLint Config: ${status.eslintConfig.typeAwareConfig.functional ? '‚úÖ Functional' : '‚ùå Issues'}\n            </li>\n            <li class='${status.backupSystem.rollbackMechanismTested ? 'success' : 'warning'}'>;\n                Backup System: ${status.backupSystem.rollbackMechanismTested ? '‚úÖ Ready' : '‚ö†Ô∏è Needs Testing'}\n            </li>\n            <li class='${status.buildMonitoring.buildStabilityChecks ? 'success' : 'error'}'>;\n                Build Monitoring: ${status.buildMonitoring.buildStabilityChecks ? '‚úÖ Stable' : '‚ùå Unstable'}\n            </li>\n            <li class='${status.batchProcessing.safetyValidationEnabled ? 'success' : 'warning'}'>;\n                Batch Processing: ${status.batchProcessing.safetyValidationEnabled ? '‚úÖ Configured' : '‚ö†Ô∏è Basic'}\n            </li>\n            <li class='${status.progressTracking.metricsCollectionEnabled ? 'success' : 'warning'}'>;\n                Progress Tracking: ${status.progressTracking.metricsCollectionEnabled ? '‚úÖ Enabled' : '‚ö†Ô∏è Limited'}\n            </li>\n        </ul>\n    </div>\n\n    ${\n      status.recommendations.length > 0\n        ? `\n    <div class='section recommendations'>;\n        <h2>üìã Recommendations</h2>\n        <ol>\n            ${status.recommendations.map(rec => `<li>${rec}</li>`).join('')}",
        "line": 861,
        "column": 23,
        "context": ", 2));\\n\\n    // HTML Report\\n    const htmlReport = `;\\n<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Infras"
      },
      {
        "file": "src/services/campaign/InfrastructurePreparation.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n      status.recommendations.length > 0\n        ? `\n    <div class='section recommendations'>;\n        <h2>üìã Recommendations</h2>\n        <ol>\n            ${status.recommendations.map(rec => `<li>${",
        "line": 910,
        "column": 4,
        "context": "}\\n            </li>\\n        </ul>\\n    </div>\\n\\n    ${\\n      status.recommendations.length > 0\\n       "
      },
      {
        "file": "src/services/campaign/InfrastructurePreparation.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`üîç Validating batch of \\${",
        "line": 459,
        "column": 21,
        "context": "ction validateBatch(files) {\\n  // // console.log(\\`üîç Validating batch of \\${files.length} files...\\"
      },
      {
        "file": "src/services/campaign/InfrastructurePreparation.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`   ‚ùå Batch validation failed: \\${",
        "line": 481,
        "column": 23,
        "context": " true;\\n  } catch (error) {\\n    // // console.log(\\`   ‚ùå Batch validation failed: \\${error.message}\\`"
      },
      {
        "file": "src/services/campaign/InfrastructurePreparation.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`\nüìä Infrastructure Status Dashboard\n================================;\n\nüïí Last Updated: \\${latest.timestamp}\nüìà TypeScript Errors: \\${latest.typescript}\n‚ö†Ô∏è  ESLint Warnings: \\${latest.eslint}\nüèóÔ∏è Build Time: \\${latest.buildTime}ms\n‚ö° Processing Speed: \\${latest.processingSpeed} files/min\n‚úÖ Success Rate: \\${latest.successRate}%\n\nüìä Trend Analysis:\n- Total Metrics Collected: \\${metrics.length}\n- Data Collection Period: \\${",
        "line": 678,
        "column": 12,
        "context": "atest = metrics[metrics.length - 1];\\n\\n    return \\`\\nüìä Infrastructure Status Dashboard\\n============="
      },
      {
        "file": "src/services/campaign/InfrastructurePreparation.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`\\${",
        "line": 702,
        "column": 12,
        "context": "((last - first) / (1000 * 60 * 60));\\n\\n    return \\`\\${diffHours} hours\\`;\\n  }\\n}\\n\\nif (require.main =="
      },
      {
        "file": "src/services/campaign/LintingWarningAnalyzer.js",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`\n# Linting Warning Analysis Report\nGenerated: ${new Date().toISOString()}\n\n## Summary\n- **Total Warnings**: ${distribution.total}\n- **Explicit Any**: ${distribution.explicitAny.count} warnings in ${distribution.explicitAny.files.length} files\n- **Unused Variables**: ${distribution.unusedVariables.count} warnings in ${distribution.unusedVariables.files.length} files  \n- **Console Statements**: ${distribution.consoleStatements.count} warnings in ${distribution.consoleStatements.files.length} files\n- **Other**: ${distribution.other.count} warnings in ${distribution.other.files.length} files\n\n## Priority Distribution\n- **High Priority Files**: ${prioritizedFiles.highPriority.length} files\n- **Medium Priority Files**: ${prioritizedFiles.mediumPriority.length} files\n- **Low Priority Files**: ${prioritizedFiles.lowPriority.length} files\n\n## Recommendations\n${recommendations.map(rec => `- ${rec}`).join('\\n')}",
        "line": 329,
        "column": 19,
        "context": "s, recommendations } = result;\\n    const report = `\\n# Linting Warning Analysis Report\\nGenerated: ${n"
      },
      {
        "file": "src/services/campaign/LintingWarningAnalyzer.js",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`\n# Linting Warning Analysis Report\nGenerated: ${new Date().toISOString()}\n\n## Summary\n- **Total Warnings**: ${distribution.total}\n- **Explicit Any**: ${distribution.explicitAny.count} warnings in ${distribution.explicitAny.files.length} files\n- **Unused Variables**: ${distribution.unusedVariables.count} warnings in ${distribution.unusedVariables.files.length} files  \n- **Console Statements**: ${distribution.consoleStatements.count} warnings in ${distribution.consoleStatements.files.length} files\n- **Other**: ${distribution.other.count} warnings in ${distribution.other.files.length} files\n\n## Priority Distribution\n- **High Priority Files**: ${prioritizedFiles.highPriority.length} files\n- **Medium Priority Files**: ${prioritizedFiles.mediumPriority.length} files\n- **Low Priority Files**: ${prioritizedFiles.lowPriority.length} files\n\n## Recommendations\n${recommendations.map(rec => `- ${rec}`).join('\\n')}",
        "line": 329,
        "column": 19,
        "context": "s, recommendations } = result;\\n    const report = `\\n# Linting Warning Analysis Report\\nGenerated: ${n"
      },
      {
        "file": "src/services/campaign/LintingWarningAnalyzer.js",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${recommendations.map(rec => `- ${",
        "line": 346,
        "column": 0,
        "context": "les.lowPriority.length} files\\n\\n## Recommendations\\n${recommendations.map(rec => `- ${rec}`).join('\\n'"
      },
      {
        "file": "src/services/campaign/LintingWarningAnalyzer.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`;\n# Linting Warning Analysis Report\nGenerated: ${new Date().toISOString()}\n\n## Summary\n- **Total Warnings**: ${distribution.total}\n- **Explicit Any**: ${distribution.explicitAny.count} warnings in ${distribution.explicitAny.files.length} files\n- **Unused Variables**: ${distribution.unusedVariables.count} warnings in ${distribution.unusedVariables.files.length} files  \n- **Console Statements**: ${distribution.consoleStatements.count} warnings in ${distribution.consoleStatements.files.length} files\n- **Other**: ${distribution.other.count} warnings in ${distribution.other.files.length} files\n\n## Priority Distribution\n- **High Priority Files**: ${prioritizedFiles.highPriority.length} files\n- **Medium Priority Files**: ${prioritizedFiles.mediumPriority.length} files\n- **Low Priority Files**: ${prioritizedFiles.lowPriority.length} files\n\n## Recommendations\n${recommendations.map(rec => `- ${rec}`).join('\\n')}",
        "line": 436,
        "column": 19,
        "context": ", recommendations } = result;\\n\\n    const report = `;\\n# Linting Warning Analysis Report\\nGenerated: ${"
      },
      {
        "file": "src/services/campaign/LintingWarningAnalyzer.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`;\n# Linting Warning Analysis Report\nGenerated: ${new Date().toISOString()}\n\n## Summary\n- **Total Warnings**: ${distribution.total}\n- **Explicit Any**: ${distribution.explicitAny.count} warnings in ${distribution.explicitAny.files.length} files\n- **Unused Variables**: ${distribution.unusedVariables.count} warnings in ${distribution.unusedVariables.files.length} files  \n- **Console Statements**: ${distribution.consoleStatements.count} warnings in ${distribution.consoleStatements.files.length} files\n- **Other**: ${distribution.other.count} warnings in ${distribution.other.files.length} files\n\n## Priority Distribution\n- **High Priority Files**: ${prioritizedFiles.highPriority.length} files\n- **Medium Priority Files**: ${prioritizedFiles.mediumPriority.length} files\n- **Low Priority Files**: ${prioritizedFiles.lowPriority.length} files\n\n## Recommendations\n${recommendations.map(rec => `- ${rec}`).join('\\n')}",
        "line": 436,
        "column": 19,
        "context": ", recommendations } = result;\\n\\n    const report = `;\\n# Linting Warning Analysis Report\\nGenerated: ${"
      },
      {
        "file": "src/services/campaign/LintingWarningAnalyzer.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${recommendations.map(rec => `- ${",
        "line": 453,
        "column": 0,
        "context": "les.lowPriority.length} files\\n\\n## Recommendations\\n${recommendations.map(rec => `- ${rec}`).join('\\n'"
      },
      {
        "file": "src/services/campaign/ProgressReportingSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Perfect Codebase Campaign Report</title>\n    <style>\n        body { font-family: Arial, sans-serif, margin: 40px, }\n        .header { background: #f5f5f5, padding: 20px, border-radius: 8px, }\n        .status-${report.overallStatus.toLowerCase()} { color: ${this.getStatusColor(report.overallStatus)}; }\n        .progress-bar { background: #e0e0e0, height: 20px, border-radius: 10px, overflow: hidden, }\n        .progress-fill { background: #4caf50, height: 100%, transition: width 0.3s, }\n        .phase { margin: 20px 0, padding: 15px, border: 1px solid #ddd, border-radius: 5px, }\n        .achievement { background: #e8f5e8, padding: 10px, margin: 5px 0, border-radius: 5px, }\n        .issue { background: #ffe8e8, padding: 10px, margin: 5px 0, border-radius: 5px, }\n    </style>\n</head>\n<body>\n    <div class='header'>;\n        <h1>Perfect Codebase Campaign Report</h1>\n        <p>Generated: ${report.generatedAt.toLocaleString()}</p>\n        <p class='status-${report.overallStatus.toLowerCase()}'>Status: ${report.overallStatus}</p>;\n        <div class='progress-bar'>;\n            <div class='progress-fill' style='width: ${report.overallProgress}%'></div>;\n        </div>\n        <p>Progress: ${report.overallProgress}%</p>\n    </div>\n\n    <h2>Executive Summary</h2>\n    <p>${report.executiveSummary}</p>\n\n    <h2>Phase Progress</h2>\n    ${report.phases\n      .map(\n        phase => `;\n        <div class='phase'>;\n            <h3>${phase.phaseName}</h3>\n            <p>Status: ${phase.status}",
        "line": 651,
        "column": 11,
        "context": "port: CampaignSummaryReport): string {\\n    return `\\n<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Perfect"
      },
      {
        "file": "src/services/campaign/ProgressReportingSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`,\n      )\n      .join('')}\n\n    <h2>Key Achievements</h2>\n    ${report.keyAchievements\n      .map(\n        achievement => `;\n        <div class='achievement'>;\n            <h4>${achievement.title}</h4>\n            <p>${achievement.description}",
        "line": 691,
        "column": 4,
        "context": "ckers.join(', ') : 'None'}</p>\\n        </div>\\n    `,\\n      )\\n      .join('')}\\n\\n    <h2>Key Achieveme"
      },
      {
        "file": "src/services/campaign/ProgressReportingSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`,\n      )\n      .join('')}\n\n    <h2>Critical Issues</h2>\n    ${report.criticalIssues\n      .map(\n        issue => `;\n        <div class='issue'>;\n            <h4>${issue.title}</h4>\n            <p>${issue.description}",
        "line": 704,
        "column": 4,
        "context": "act: ${achievement.impact}</p>\\n        </div>\\n    `,\\n      )\\n      .join('')}\\n\\n    <h2>Critical Issu"
      },
      {
        "file": "src/services/campaign/ProgressReportingSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`# Perfect Codebase Campaign Report\n\n**Generated:** ${report.generatedAt.toISOString()}\n**Status:** ${report.overallStatus}\n**Progress:** ${report.overallProgress}%\n\n## Executive Summary\n\n${report.executiveSummary}\n\n## Phase Progress\n\n${report.phases\n  .map(\n    phase => `;\n### ${phase.phaseName}\n- **Status:** ${phase.status}",
        "line": 725,
        "column": 11,
        "context": "port: CampaignSummaryReport): string {\\n    return `# Perfect Codebase Campaign Report\\n\\n**Generated:*"
      },
      {
        "file": "src/services/campaign/ProgressReportingSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`,\n  )\n  .join('')}\n\n## Key Achievements\n\n${report.keyAchievements\n  .map(\n    achievement => `;\n### ${achievement.title}\n${achievement.description}",
        "line": 744,
        "column": 0,
        "context": ".length > 0 ? phase.blockers.join(', ') : 'None'}\\n`,\\n  )\\n  .join('')}\\n\\n## Key Achievements\\n\\n${report"
      },
      {
        "file": "src/services/campaign/ProgressReportingSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`,\n  )\n  .join('')}\n\n## Critical Issues\n\n${report.criticalIssues\n  .map(\n    issue => `;\n### ${issue.title}\n${issue.description}",
        "line": 757,
        "column": 0,
        "context": "evement.impact}\\n- **Phase:** ${achievement.phase}\\n`,\\n  )\\n  .join('')}\\n\\n## Critical Issues\\n\\n${report."
      },
      {
        "file": "src/services/campaign/ProgressReportingSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Perfect Codebase Campaign Report</title>\n    <style>\n        body { font-family: Arial, sans-serif, margin: 40px, }\n        .header { background: #f5f5f5, padding: 20px, border-radius: 8px, }\n        .status-${report.overallStatus.toLowerCase()} { color: ${this.getStatusColor(report.overallStatus)}; }\n        .progress-bar { background: #e0e0e0, height: 20px, border-radius: 10px, overflow: hidden, }\n        .progress-fill { background: #4caf50, height: 100%, transition: width 0.3s, }\n        .phase { margin: 20px 0, padding: 15px, border: 1px solid #ddd, border-radius: 5px, }\n        .achievement { background: #e8f5e8, padding: 10px, margin: 5px 0, border-radius: 5px, }\n        .issue { background: #ffe8e8, padding: 10px, margin: 5px 0, border-radius: 5px, }\n    </style>\n</head>\n<body>\n    <div class='header'>;\n        <h1>Perfect Codebase Campaign Report</h1>\n        <p>Generated: ${report.generatedAt.toLocaleString()}</p>\n        <p class='status-${report.overallStatus.toLowerCase()}'>Status: ${report.overallStatus}</p>;\n        <div class='progress-bar'>;\n            <div class='progress-fill' style='width: ${report.overallProgress}%'></div>;\n        </div>\n        <p>Progress: ${report.overallProgress}%</p>\n    </div>\n\n    <h2>Executive Summary</h2>\n    <p>${report.executiveSummary}</p>\n\n    <h2>Phase Progress</h2>\n    ${report.phases\n      .map(\n        phase => `;\n        <div class='phase'>;\n            <h3>${phase.phaseName}</h3>\n            <p>Status: ${phase.status}</p>\n            <p>Progress: ${phase.progress}%</p>\n            <p>Blockers: ${phase.blockers.length > 0 ? phase.blockers.join(', ') : 'None'}</p>\n        </div>\n    `,\n      )\n      .join('')}",
        "line": 651,
        "column": 11,
        "context": "port: CampaignSummaryReport): string {\\n    return `\\n<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Perfect"
      },
      {
        "file": "src/services/campaign/ProgressReportingSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`,\n      )\n      .join('')}\n\n    <h2>Critical Issues</h2>\n    ${report.criticalIssues\n      .map(\n        issue => `;\n        <div class='issue'>;\n            <h4>${issue.title}</h4>\n            <p>${issue.description}</p>\n            <p>Severity: ${issue.severity}</p>\n        </div>\n    `,\n      )\n      .join('')}",
        "line": 704,
        "column": 4,
        "context": "act: ${achievement.impact}</p>\\n        </div>\\n    `,\\n      )\\n      .join('')}\\n\\n    <h2>Critical Issu"
      },
      {
        "file": "src/services/campaign/ProgressReportingSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`# Perfect Codebase Campaign Report\n\n**Generated:** ${report.generatedAt.toISOString()}\n**Status:** ${report.overallStatus}\n**Progress:** ${report.overallProgress}%\n\n## Executive Summary\n\n${report.executiveSummary}\n\n## Phase Progress\n\n${report.phases\n  .map(\n    phase => `;\n### ${phase.phaseName}\n- **Status:** ${phase.status}\n- **Progress:** ${phase.progress}%\n- **Blockers:** ${phase.blockers.length > 0 ? phase.blockers.join(', ') : 'None'}\n`,\n  )\n  .join('')}",
        "line": 725,
        "column": 11,
        "context": "port: CampaignSummaryReport): string {\\n    return `# Perfect Codebase Campaign Report\\n\\n**Generated:*"
      },
      {
        "file": "src/services/campaign/ProgressReportingSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`,\n  )\n  .join('')}\n\n## Critical Issues\n\n${report.criticalIssues\n  .map(\n    issue => `;\n### ${issue.title}\n${issue.description}\n- **Severity:** ${issue.severity}\n- **Phase:** ${issue.phase}\n`,\n  )\n  .join('')}",
        "line": 757,
        "column": 0,
        "context": "evement.impact}\\n- **Phase:** ${achievement.phase}\\n`,\\n  )\\n  .join('')}\\n\\n## Critical Issues\\n\\n${report."
      },
      {
        "file": "src/services/campaign/ProgressReportingSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${report.phases\n      .map(\n        phase => `;\n        <div class='phase'>;\n            <h3>${",
        "line": 682,
        "column": 4,
        "context": "tiveSummary}</p>\\n\\n    <h2>Phase Progress</h2>\\n    ${report.phases\\n      .map(\\n        phase => `;\\n  "
      },
      {
        "file": "src/services/campaign/ProgressReportingSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${report.keyAchievements\n      .map(\n        achievement => `;\n        <div class='achievement'>;\n            <h4>${",
        "line": 696,
        "column": 4,
        "context": "    .join('')}\\n\\n    <h2>Key Achievements</h2>\\n    ${report.keyAchievements\\n      .map(\\n        achie"
      },
      {
        "file": "src/services/campaign/ProgressReportingSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${report.criticalIssues\n      .map(\n        issue => `;\n        <div class='issue'>;\n            <h4>${",
        "line": 709,
        "column": 4,
        "context": "     .join('')}\\n\\n    <h2>Critical Issues</h2>\\n    ${report.criticalIssues\\n      .map(\\n        issue "
      },
      {
        "file": "src/services/campaign/ProgressReportingSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${report.phases\n  .map(\n    phase => `;\n### ${",
        "line": 737,
        "column": 0,
        "context": "y\\n\\n${report.executiveSummary}\\n\\n## Phase Progress\\n\\n${report.phases\\n  .map(\\n    phase => `;\\n### ${phas"
      },
      {
        "file": "src/services/campaign/ProgressReportingSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${report.keyAchievements\n  .map(\n    achievement => `;\n### ${",
        "line": 750,
        "column": 0,
        "context": "'None'}\\n`,\\n  )\\n  .join('')}\\n\\n## Key Achievements\\n\\n${report.keyAchievements\\n  .map(\\n    achievement ="
      },
      {
        "file": "src/services/campaign/ProgressReportingSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${report.criticalIssues\n  .map(\n    issue => `;\n### ${",
        "line": 763,
        "column": 0,
        "context": "t.phase}\\n`,\\n  )\\n  .join('')}\\n\\n## Critical Issues\\n\\n${report.criticalIssues\\n  .map(\\n    issue => `;\\n##"
      },
      {
        "file": "src/services/campaign/UnusedVariablesCleanupSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`\n# Unused Variables Cleanup Report\nGenerated: ${new Date().toISOString()}\n\n## Execution Summary\n- **Success**: ${result.success ? '‚úÖ' : '‚ùå'}\n- **Files Processed**: ${result.filesProcessed}\n- **Variables Removed**: ${result.variablesRemoved}\n- **Variables Prefixed**: ${result.variablesPrefixed}\n- **Build Time**: ${result.buildTime}ms\n- **Safety Score**: ${result.safetyScore}\n\n## Configuration\n- **Max Files**: ${this.config.maxFiles}\n- **Auto Fix**: ${this.config.autoFix}\n- **Dry Run**: ${this.config.dryRun}\n- **Build Validation**: ${this.config.buildValidation}\n- **Git Stash**: ${this.config.enableGitStash}\n\n## Issues\n${result.errors.length > 0 ? '### Errors\\n' + result.errors.map(e => `- ${e}`).join('\\n') : 'No errors'}",
        "line": 440,
        "column": 11,
        "context": "sult: UnusedVariablesResult): string {\\n    return `\\n# Unused Variables Cleanup Report\\nGenerated: ${n"
      },
      {
        "file": "src/services/campaign/UnusedVariablesCleanupSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`\n# Unused Variables Batch Cleanup Report\nGenerated: ${new Date().toISOString()}\n\n## Batch Summary\n- **Total Batches**: ${result.totalBatches}\n- **Successful Batches**: ${result.successfulBatches}\n- **Failed Batches**: ${result.failedBatches}\n- **Success Rate**: ${((result.successfulBatches / result.totalBatches) * 100).toFixed(1)}%\n\n## Processing Summary\n- **Total Files Processed**: ${result.totalFilesProcessed}\n- **Total Variables Processed**: ${result.totalVariablesProcessed}\n- **Average Build Time**: ${result.averageBuildTime.toFixed(0)}ms\n- **Overall Safety Score**: ${result.overallSafetyScore.toFixed(1)}\n\n## Batch Configuration\n- **Batch Size**: ${this.config.batchSize} files per batch\n- **Auto Fix**: ${this.config.autoFix}\n- **Build Validation**: ${this.config.buildValidation}\n- **Safety Protocols**: ${this.config.validateSafety}\n\n## Issues\n${result.errors.length > 0 ? '### Batch Errors\\n' + result.errors.map(e => `- ${e}`).join('\\n') : 'No batch errors'}",
        "line": 476,
        "column": 11,
        "context": "sult: BatchProcessingResult): string {\\n    return `\\n# Unused Variables Batch Cleanup Report\\nGenerate"
      },
      {
        "file": "src/services/campaign/UnusedVariablesCleanupSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`\n# Unused Variables Cleanup Report\nGenerated: ${new Date().toISOString()}\n\n## Execution Summary\n- **Success**: ${result.success ? '‚úÖ' : '‚ùå'}\n- **Files Processed**: ${result.filesProcessed}\n- **Variables Removed**: ${result.variablesRemoved}\n- **Variables Prefixed**: ${result.variablesPrefixed}\n- **Build Time**: ${result.buildTime}ms\n- **Safety Score**: ${result.safetyScore}\n\n## Configuration\n- **Max Files**: ${this.config.maxFiles}\n- **Auto Fix**: ${this.config.autoFix}\n- **Dry Run**: ${this.config.dryRun}\n- **Build Validation**: ${this.config.buildValidation}\n- **Git Stash**: ${this.config.enableGitStash}\n\n## Issues\n${result.errors.length > 0 ? '### Errors\\n' + result.errors.map(e => `- ${e}`).join('\\n') : 'No errors'}",
        "line": 440,
        "column": 11,
        "context": "sult: UnusedVariablesResult): string {\\n    return `\\n# Unused Variables Cleanup Report\\nGenerated: ${n"
      },
      {
        "file": "src/services/campaign/UnusedVariablesCleanupSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`\n# Unused Variables Batch Cleanup Report\nGenerated: ${new Date().toISOString()}\n\n## Batch Summary\n- **Total Batches**: ${result.totalBatches}\n- **Successful Batches**: ${result.successfulBatches}\n- **Failed Batches**: ${result.failedBatches}\n- **Success Rate**: ${((result.successfulBatches / result.totalBatches) * 100).toFixed(1)}%\n\n## Processing Summary\n- **Total Files Processed**: ${result.totalFilesProcessed}\n- **Total Variables Processed**: ${result.totalVariablesProcessed}\n- **Average Build Time**: ${result.averageBuildTime.toFixed(0)}ms\n- **Overall Safety Score**: ${result.overallSafetyScore.toFixed(1)}\n\n## Batch Configuration\n- **Batch Size**: ${this.config.batchSize} files per batch\n- **Auto Fix**: ${this.config.autoFix}\n- **Build Validation**: ${this.config.buildValidation}\n- **Safety Protocols**: ${this.config.validateSafety}\n\n## Issues\n${result.errors.length > 0 ? '### Batch Errors\\n' + result.errors.map(e => `- ${e}`).join('\\n') : 'No batch errors'}",
        "line": 476,
        "column": 11,
        "context": "sult: BatchProcessingResult): string {\\n    return `\\n# Unused Variables Batch Cleanup Report\\nGenerate"
      },
      {
        "file": "src/services/campaign/UnusedVariablesCleanupSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${result.errors.length > 0 ? '### Errors\\n' + result.errors.map(e => `- ${",
        "line": 460,
        "column": 0,
        "context": "Stash**: ${this.config.enableGitStash}\\n\\n## Issues\\n${result.errors.length > 0 ? '### Errors\\n' + resu"
      },
      {
        "file": "src/services/campaign/UnusedVariablesCleanupSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${result.warnings.length > 0 ? '### Warnings\\n' + result.warnings.map(w => `- ${",
        "line": 461,
        "column": 0,
        "context": "ors.map(e => `- ${e}`).join('\\n') : 'No errors'};\\n${result.warnings.length > 0 ? '### Warnings\\n' + "
      },
      {
        "file": "src/services/campaign/UnusedVariablesCleanupSystem.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${result.errors.length > 0 ? '### Batch Errors\\n' + result.errors.map(e => `- ${",
        "line": 499,
        "column": 0,
        "context": "ocols**: ${this.config.validateSafety}\\n\\n## Issues\\n${result.errors.length > 0 ? '### Batch Errors\\n' "
      },
      {
        "file": "src/services/campaign/test-intelligence-simple.js",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`rec-\\${",
        "line": 128,
        "column": 13,
        "context": "   const recommendations = [\\n      {\\n        id: \\`rec-\\${Date.now()}-1\\`,\\n        type: 'optimizati"
      },
      {
        "file": "src/services/campaign/test-intelligence-simple.js",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Optimize \\${",
        "line": 131,
        "column": 22,
        "context": "        priority: 'medium',\\n        description: \\`Optimize \\${originalName} usage patterns\\`,\\n     "
      },
      {
        "file": "src/services/campaign/test-intelligence-simple.js",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`rec-\\${",
        "line": 136,
        "column": 13,
        "context": "estimatedImpact: 75\\n      },\\n      {\\n        id: \\`rec-\\${Date.now()}-2\\`,\\n        type: 'integratio"
      },
      {
        "file": "src/services/campaign/test-intelligence-simple.js",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Integrate \\${",
        "line": 139,
        "column": 22,
        "context": ",\\n        priority: 'high',\\n        description: \\`Integrate \\${originalName} with monitoring system"
      },
      {
        "file": "src/services/campaign/test-intelligence-simple.js",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`\\${systemName}.\\${",
        "line": 184,
        "column": 21,
        "context": "nfig.logLevel === 'error') {\\n      console.error(\\`\\${systemName}.\\${method} error:\\`, error);\\n    }"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/AnyTypeClassifier.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`Explicitly documented as intentional${surroundingContext.contextualClues.length > 0 ? ` (${surroundingContext.contextualClues.join(', ')})` : ''}",
        "line": 111,
        "column": 21,
        "context": "\\n          confidence: 0.95,\\n          reasoning: `Explicitly documented as intentional${surrounding"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/AnyTypeClassifier.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`Explicitly documented as intentional${surroundingContext.contextualClues.length > 0 ? ` (${surroundingContext.contextualClues.join(', ')})` : ''}",
        "line": 111,
        "column": 21,
        "context": "\\n          confidence: 0.95,\\n          reasoning: `Explicitly documented as intentional${surrounding"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/AnyTypeClassifier.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${surroundingContext.contextualClues.length > 0 ? ` (${",
        "line": 111,
        "column": 58,
        "context": "  reasoning: `Explicitly documented as intentional${surroundingContext.contextualClues.length > 0 ? "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/ConservativeReplacementPilot.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`# Conservative Replacement Pilot Report\n\n## Executive Summary\n\n**Pilot Status**: ${(report as any)?.results?.success ? '‚úÖ SUCCESS' : '‚ùå FAILED'}\n**Execution Time**: ${Math.round((report as any)?.executionTime / 1000)}s\n**Target Achievement**: ${(report as any)?.results?.targetAchieved ? '‚úÖ YES' : '‚ùå NO'}\n\n## Key Metrics\n\n- **Cases Processed**: ${(report as any)?.results?.totalCasesProcessed}\n- **Successful Replacements**: ${(report as any)?.results?.totalSuccessfulReplacements}\n- **Success Rate**: ${((report as any)?.results?.successRate * 100).toFixed(1)}% (Target: ${((report as any)?.configuration?.targetSuccessRate * 100).toFixed(1)}%)\n- **Batches Executed**: ${(report as any)?.results?.batchesExecuted}\n- **Build Failures**: ${(report as any)?.results?.buildFailures} (Target: 0)\n- **Rollbacks Performed**: ${(report as any)?.results?.rollbacksPerformed}\n- **Safety Score**: ${(report as any)?.results?.safetyScore?.toFixed(2)} (Threshold: ${(report as any)?.configuration?.safetyThreshold})\n\n## Batch Results\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any -- High-risk domain requiring flexibility\n// eslint-disable-next-line @typescript-eslint/no-explicit-any -- High-risk domain requiring flexibility\n${(report as any)?.batchResults\n  ?.map(\n    (batch: any, index: number) => `\n### Batch ${batch?.batchNumber}\n- **Cases**: ${batch.casesProcessed}",
        "line": 893,
        "column": 11,
        "context": "kdownReport(report: unknown): string {\\n    return `# Conservative Replacement Pilot Report\\n\\n## Execu"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/ConservativeReplacementPilot.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`,\n  )\n  .join('')}\n\n## Safety Metrics\n\n- **Build Failures**: ${(report as any)?.safetyMetrics?.buildFailures}\n- **Rollbacks Performed**: ${(report as any)?.safetyMetrics?.rollbacksPerformed}\n- **Batch Failures**: ${(report as any)?.safetyMetrics?.batchFailures}\n- **Compilation Errors**: ${(report as any)?.safetyMetrics?.compilationErrors}\n\n## Recommendations\n\n${(report as any)?.recommendations?.map((rec: string) => `- ${rec}`).join('\\n')}",
        "line": 924,
        "column": 0,
        "context": "*: ${batch.rollbackPerformed ? '‚ö†Ô∏è YES' : '‚úÖ NO'}\\n`,\\n  )\\n  .join('')}\\n\\n## Safety Metrics\\n\\n- **Build "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/ConservativeReplacementPilot.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`# Conservative Replacement Pilot Report\n\n## Executive Summary\n\n**Pilot Status**: ${(report as any)?.results?.success ? '‚úÖ SUCCESS' : '‚ùå FAILED'}\n**Execution Time**: ${Math.round((report as any)?.executionTime / 1000)}s\n**Target Achievement**: ${(report as any)?.results?.targetAchieved ? '‚úÖ YES' : '‚ùå NO'}\n\n## Key Metrics\n\n- **Cases Processed**: ${(report as any)?.results?.totalCasesProcessed}\n- **Successful Replacements**: ${(report as any)?.results?.totalSuccessfulReplacements}\n- **Success Rate**: ${((report as any)?.results?.successRate * 100).toFixed(1)}% (Target: ${((report as any)?.configuration?.targetSuccessRate * 100).toFixed(1)}%)\n- **Batches Executed**: ${(report as any)?.results?.batchesExecuted}\n- **Build Failures**: ${(report as any)?.results?.buildFailures} (Target: 0)\n- **Rollbacks Performed**: ${(report as any)?.results?.rollbacksPerformed}\n- **Safety Score**: ${(report as any)?.results?.safetyScore?.toFixed(2)} (Threshold: ${(report as any)?.configuration?.safetyThreshold})\n\n## Batch Results\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any -- High-risk domain requiring flexibility\n// eslint-disable-next-line @typescript-eslint/no-explicit-any -- High-risk domain requiring flexibility\n${(report as any)?.batchResults\n  ?.map(\n    (batch: any, index: number) => `\n### Batch ${batch?.batchNumber}\n- **Cases**: ${batch.casesProcessed}\n- **Successful**: ${batch?.successfulReplacements}\n- **Failed**: ${batch.failedReplacements}\n- **Build Stable**: ${batch?.buildStable ? '‚úÖ' : '‚ùå'}\n- **Rollback**: ${batch.rollbackPerformed ? '‚ö†Ô∏è YES' : '‚úÖ NO'}\n`,\n  )\n  .join('')}",
        "line": 893,
        "column": 11,
        "context": "kdownReport(report: unknown): string {\\n    return `# Conservative Replacement Pilot Report\\n\\n## Execu"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/ConservativeReplacementPilot.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${(report as any)?.batchResults\n  ?.map(\n    (batch: any, index: number) => `\n### Batch ${",
        "line": 915,
        "column": 0,
        "context": "cit-any -- High-risk domain requiring flexibility\\n${(report as any)?.batchResults\\n  ?.map(\\n    (batc"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/ConservativeReplacementPilot.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${(report as any)?.recommendations?.map((rec: string) => `- ${",
        "line": 937,
        "column": 0,
        "context": "yMetrics?.compilationErrors}\\n\\n## Recommendations\\n\\n${(report as any)?.recommendations?.map((rec: stri"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/PilotCampaignAnalysis.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`# Pilot Campaign Analysis - Failed\n\n## Error\n${results.error}\n\n## Recommendations\n${results.recommendations.map(r => `- ${r}`).join('\\n')}",
        "line": 816,
        "column": 13,
        "context": "string {\\n    if (!results.success) {\\n      return `# Pilot Campaign Analysis - Failed\\n\\n## Error\\n${re"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/PilotCampaignAnalysis.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`# Pilot Campaign Analysis Results\n\n## Executive Summary\n- **Execution Time**: ${(results.executionTime / 1000).toFixed(2)} seconds\n- **Total Any Types**: ${results.codebaseAnalysis?.summary.totalAnyTypes || 'N/A'}\n- **Classification Accuracy**: ${results.accuracyValidation?.overallAccuracy.toFixed(1) || 'N/A'}%\n- **Projected Success Rate**: ${results.baselineMetrics?.projectedSuccessRate.toFixed(1) || 'N/A'}%\n\n## Key Findings\n- **Unintentional Any Types**: ${results.codebaseAnalysis?.summary.unintentionalCount || 'N/A'}\n- **Manual Review Cases**: ${results.codebaseAnalysis?.summary.manualReviewCases || 'N/A'}\n- **Top Domain**: ${results.codebaseAnalysis?.summary.topDomain || 'N/A'}\n- **Top Category**: ${results.codebaseAnalysis?.summary.topCategory || 'N/A'}\n\n## Readiness Assessment\n- **Overall Readiness**: ${results.pilotReport?.pilotPhase?.readinessAssessment?.overallReadiness?.toFixed(1) || 'N/A'}%\n- **Readiness Level**: ${results.pilotReport?.pilotPhase?.readinessAssessment?.readinessLevel || 'N/A'}\n\n## Recommendations\n${results.recommendations.map(r => `- ${r}`).join('\\n')}",
        "line": 829,
        "column": 11,
        "context": "(s => `- ${s}`).join('\\n')};\\n`;\\n    }\\n\\n    return `# Pilot Campaign Analysis Results\\n\\n## Executive S"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/PilotCampaignAnalysis.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`).join('\\n')};\n\n## Tuning Results\n${\n  results.tuningResults?.tuningPerformed\n    ? `- Tuning performed: ${results.tuningResults.adjustmentsMade.length} adjustments made\n- Accuracy improvement: ${results.tuningResults.improvementPercentage?.toFixed(1) || 'N/A'}",
        "line": 851,
        "column": 36,
        "context": "## Next Steps\\n${results.nextSteps.map(s => `- ${s}`).join('\\n')};\\n\\n## Tuning Results\\n${\\n  results.tu"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/PilotCampaignAnalysis.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`# Pilot Campaign Analysis - Failed\n\n## Error\n${results.error}\n\n## Recommendations\n${results.recommendations.map(r => `- ${r}`).join('\\n')}",
        "line": 816,
        "column": 13,
        "context": "string {\\n    if (!results.success) {\\n      return `# Pilot Campaign Analysis - Failed\\n\\n## Error\\n${re"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/PilotCampaignAnalysis.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`# Pilot Campaign Analysis Results\n\n## Executive Summary\n- **Execution Time**: ${(results.executionTime / 1000).toFixed(2)} seconds\n- **Total Any Types**: ${results.codebaseAnalysis?.summary.totalAnyTypes || 'N/A'}\n- **Classification Accuracy**: ${results.accuracyValidation?.overallAccuracy.toFixed(1) || 'N/A'}%\n- **Projected Success Rate**: ${results.baselineMetrics?.projectedSuccessRate.toFixed(1) || 'N/A'}%\n\n## Key Findings\n- **Unintentional Any Types**: ${results.codebaseAnalysis?.summary.unintentionalCount || 'N/A'}\n- **Manual Review Cases**: ${results.codebaseAnalysis?.summary.manualReviewCases || 'N/A'}\n- **Top Domain**: ${results.codebaseAnalysis?.summary.topDomain || 'N/A'}\n- **Top Category**: ${results.codebaseAnalysis?.summary.topCategory || 'N/A'}\n\n## Readiness Assessment\n- **Overall Readiness**: ${results.pilotReport?.pilotPhase?.readinessAssessment?.overallReadiness?.toFixed(1) || 'N/A'}%\n- **Readiness Level**: ${results.pilotReport?.pilotPhase?.readinessAssessment?.readinessLevel || 'N/A'}\n\n## Recommendations\n${results.recommendations.map(r => `- ${r}`).join('\\n')}",
        "line": 829,
        "column": 11,
        "context": "(s => `- ${s}`).join('\\n')};\\n`;\\n    }\\n\\n    return `# Pilot Campaign Analysis Results\\n\\n## Executive S"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/PilotCampaignAnalysis.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`).join('\\n')};\n\n## Tuning Results\n${\n  results.tuningResults?.tuningPerformed\n    ? `- Tuning performed: ${results.tuningResults.adjustmentsMade.length} adjustments made\n- Accuracy improvement: ${results.tuningResults.improvementPercentage?.toFixed(1) || 'N/A'}%`\n    : '- No tuning performed or needed'\n}",
        "line": 851,
        "column": 36,
        "context": "## Next Steps\\n${results.nextSteps.map(s => `- ${s}`).join('\\n')};\\n\\n## Tuning Results\\n${\\n  results.tu"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/PilotCampaignAnalysis.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${results.recommendations.map(r => `- ${",
        "line": 822,
        "column": 0,
        "context": "ed\\n\\n## Error\\n${results.error}\\n\\n## Recommendations\\n${results.recommendations.map(r => `- ${r}`).join("
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/PilotCampaignAnalysis.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${results.nextSteps.map(s => `- ${",
        "line": 825,
        "column": 0,
        "context": "ns.map(r => `- ${r}`).join('\\n')};\\n\\n## Next Steps\\n${results.nextSteps.map(s => `- ${s}`).join('\\n')}"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/PilotCampaignAnalysis.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${results.recommendations.map(r => `- ${",
        "line": 848,
        "column": 0,
        "context": "ent?.readinessLevel || 'N/A'}\\n\\n## Recommendations\\n${results.recommendations.map(r => `- ${r}`).join("
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/PilotCampaignAnalysis.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${results.nextSteps.map(s => `- ${",
        "line": 851,
        "column": 0,
        "context": "ns.map(r => `- ${r}`).join('\\n')};\\n\\n## Next Steps\\n${results.nextSteps.map(s => `- ${s}`).join('\\n')}"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/PilotCampaignAnalysis.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n  results.tuningResults?.tuningPerformed\n    ? `- Tuning performed: ${",
        "line": 854,
        "column": 0,
        "context": "ap(s => `- ${s}`).join('\\n')};\\n\\n## Tuning Results\\n${\\n  results.tuningResults?.tuningPerformed\\n    ? "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/deployment/setup-monitoring.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`[ALERT] \\${condition.severity.toUpperCase()}: \\${",
        "line": 388,
        "column": 25,
        "context": "\\n        case 'console':\\n          console.error(\\`[ALERT] \\${condition.severity.toUpperCase()}: \\${"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/deployment/setup-monitoring.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Description: \\${",
        "line": 389,
        "column": 25,
        "context": ": \\${condition.name}\\`);\\n          console.error(\\`Description: \\${condition.description}\\`);\\n      "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/deployment/setup-monitoring.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Metrics: \\${",
        "line": 390,
        "column": 25,
        "context": "ndition.description}\\`);\\n          console.error(\\`Metrics: \\${JSON.stringify(metrics, null, 2)}\\`);"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/deployment/setup-monitoring.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`[\\${alert.timestamp.toISOString()}] \\${condition.severity.toUpperCase()}: \\${condition.name} - \\${",
        "line": 395,
        "column": 28,
        "context": "iro/logs/alerts.log';\\n          const logEntry = \\`[\\${alert.timestamp.toISOString()}] \\${condition."
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/deployment/setup-monitoring.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`\\${endpoint.command} \\${",
        "line": 441,
        "column": 20,
        "context": "ks.endpoints) {\\n        try {\\n          execSync(\\`\\${endpoint.command} \\${endpoint.args.join(' ')}\\"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/deployment/setup-monitoring.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Health Check Failed: \\${",
        "line": 461,
        "column": 19,
        "context": "int\\n          this.sendAlert({\\n            name: \\`Health Check Failed: \\${endpoint.name}\\`,\\n       "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/deployment/setup-monitoring.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Health check for \\${",
        "line": 463,
        "column": 26,
        "context": "   severity: 'warning',\\n            description: \\`Health check for \\${endpoint.name} failed\\`\\n     "
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/deployment/setup-monitoring.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`\\\\nSystem Status: \\${",
        "line": 549,
        "column": 23,
        "context": "rvice.getCurrentStatus();\\n\\n    // // console.log(\\`\\\\nSystem Status: \\${status.healthy ? 'üü¢ HEALTHY"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/deployment/setup-monitoring.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Timestamp: \\${",
        "line": 550,
        "column": 23,
        "context": "THY' : 'üî¥ UNHEALTHY'}\\`);\\n    // // console.log(\\`Timestamp: \\${status.metrics.timestamp.toISOStrin"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/deployment/setup-monitoring.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`TypeScript Errors: \\${",
        "line": 553,
        "column": 23,
        "context": "log('\\\\n--- METRICS ---');\\n    // // console.log(\\`TypeScript Errors: \\${status.metrics.typescriptEr"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/deployment/setup-monitoring.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Success Rate: \\${",
        "line": 554,
        "column": 23,
        "context": "rics.typescriptErrors}\\`);\\n    // // console.log(\\`Success Rate: \\${(status.metrics.successRate * 10"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/deployment/setup-monitoring.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Build Status: \\${",
        "line": 555,
        "column": 23,
        "context": "te * 100).toFixed(1)}%\\`);\\n    // // console.log(\\`Build Status: \\${status.metrics.buildStatus.toUpp"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/deployment/setup-monitoring.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Config Valid: \\${",
        "line": 556,
        "column": 23,
        "context": "dStatus.toUpperCase()}\\`);\\n    // // console.log(\\`Config Valid: \\${status.metrics.configValid ? 'YE"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/deployment/setup-monitoring.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Campaign Active: \\${",
        "line": 557,
        "column": 23,
        "context": "gValid ? 'YES' : 'NO'}\\`);\\n    // // console.log(\\`Campaign Active: \\${status.metrics.campaignActive"
      },
      {
        "file": "src/services/campaign/unintentional-any-elimination/deployment/setup-monitoring.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`\\${time}: Errors=\\${metric.typescriptErrors}, Success=\\${(metric.successRate * 100).toFixed(1)}%, Build=\\${",
        "line": 563,
        "column": 25,
        "context": "mp.toLocaleTimeString();\\n      // // console.log(\\`\\${time}: Errors=\\${metric.typescriptErrors}, Suc"
      },
      {
        "file": "src/services/linting/LintingValidationDashboard.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`# Linting Excellence Dashboard Report;\n\nGenerated: ${new Date().toISOString()}\n\n## üìä Overall Status\n\n- **Validation Status**: ${result.passed ? '‚úÖ PASSED' : '‚ùå FAILED'}\n- **Quality Score**: ${result.metrics.qualityScore}/100\n- **Total Issues**: ${result.metrics.totalIssues}\n- **Regression Detected**: ${result.regressionAnalysis.detected ? '‚ö†Ô∏è YES' : '‚úÖ NO'}\n\n## üîç Detailed Metrics\n\n### Error Breakdown\n- **Parser Errors**: ${result.metrics.parserErrors} ${result.metrics.parserErrors === 0 ? '‚úÖ' : 'üö®'};\n- **TypeScript Errors**: ${result.metrics.errors}\n- **Explicit Any Errors**: ${result.metrics.explicitAnyErrors} ${result.metrics.explicitAnyErrors < 100 ? '‚úÖ' : '‚ö°'}\n- **Warnings**: ${result.metrics.warnings}\n\n### Code Quality Issues\n- **Import Order Issues**: ${result.metrics.importOrderIssues}\n- **Unused Variables**: ${result.metrics.unusedVariables}\n- **React Hooks Issues**: ${result.metrics.reactHooksIssues}\n- **Console Statements**: ${result.metrics.consoleStatements}\n\n### Domain-Specific Issues\n- **Astrological Calculations**: ${result.metrics.domainSpecificIssues.astrologicalCalculations}\n- **Campaign System**: ${result.metrics.domainSpecificIssues.campaignSystem}\n- **Test Files**: ${result.metrics.domainSpecificIssues.testFiles}\n\n### Performance Metrics\n- **Linting Duration**: ${result.metrics.performanceMetrics.lintingDuration}ms\n- **Cache Hit Rate**: ${(result.metrics.performanceMetrics.cacheHitRate * 100).toFixed(1)}%\n- **Memory Usage**: ${result.metrics.performanceMetrics.memoryUsage.toFixed(1)}MB\n- **Files Processed**: ${result.metrics.performanceMetrics.filesProcessed}\n\n## üö® Active Alerts\n\n${\n  result.alerts.length === 0;\n    ? 'No active alerts ‚úÖ'\n    : result.alerts\n        .map(\n          alert =>;\n            `- **${alert.severity.toUpperCase()}**: ${alert.message}",
        "line": 492,
        "column": 19,
        "context": "linting-dashboard-report.md';\\n\\n    const report = `# Linting Excellence Dashboard Report;\\n\\nGenerated"
      },
      {
        "file": "src/services/linting/LintingValidationDashboard.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`,\n        )\n        .join('\\n')\n}\n\n## üìà Regression Analysis\n\n${\n  result.regressionAnalysis.detected\n    ? `\n**Regression Detected**: ${result.regressionAnalysis.severity.toUpperCase()}\n- **Affected Metrics**: ${result.regressionAnalysis.affectedMetrics.join(', ')}",
        "line": 536,
        "column": 113,
        "context": "sage} (${alert.currentValue} > ${alert.threshold})`,\\n        )\\n        .join('\\n')\\n}\\n\\n## üìà Regressi"
      },
      {
        "file": "src/services/linting/LintingValidationDashboard.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`\n    : '**No Regression Detected** ‚úÖ'\n}\n\n## üí° Recommendations\n\n${result.recommendations.map(rec => `- ${rec}`).join('\\n')}",
        "line": 549,
        "column": 0,
        "context": "storicalComparison.changePercentage.toFixed(1)}%)\\n`\\n    : '**No Regression Detected** ‚úÖ'\\n}\\n\\n## üí° Re"
      },
      {
        "file": "src/services/linting/LintingValidationDashboard.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`# Linting Excellence Dashboard Report;\n\nGenerated: ${new Date().toISOString()}\n\n## üìä Overall Status\n\n- **Validation Status**: ${result.passed ? '‚úÖ PASSED' : '‚ùå FAILED'}\n- **Quality Score**: ${result.metrics.qualityScore}/100\n- **Total Issues**: ${result.metrics.totalIssues}\n- **Regression Detected**: ${result.regressionAnalysis.detected ? '‚ö†Ô∏è YES' : '‚úÖ NO'}\n\n## üîç Detailed Metrics\n\n### Error Breakdown\n- **Parser Errors**: ${result.metrics.parserErrors} ${result.metrics.parserErrors === 0 ? '‚úÖ' : 'üö®'};\n- **TypeScript Errors**: ${result.metrics.errors}\n- **Explicit Any Errors**: ${result.metrics.explicitAnyErrors} ${result.metrics.explicitAnyErrors < 100 ? '‚úÖ' : '‚ö°'}\n- **Warnings**: ${result.metrics.warnings}\n\n### Code Quality Issues\n- **Import Order Issues**: ${result.metrics.importOrderIssues}\n- **Unused Variables**: ${result.metrics.unusedVariables}\n- **React Hooks Issues**: ${result.metrics.reactHooksIssues}\n- **Console Statements**: ${result.metrics.consoleStatements}\n\n### Domain-Specific Issues\n- **Astrological Calculations**: ${result.metrics.domainSpecificIssues.astrologicalCalculations}\n- **Campaign System**: ${result.metrics.domainSpecificIssues.campaignSystem}\n- **Test Files**: ${result.metrics.domainSpecificIssues.testFiles}\n\n### Performance Metrics\n- **Linting Duration**: ${result.metrics.performanceMetrics.lintingDuration}ms\n- **Cache Hit Rate**: ${(result.metrics.performanceMetrics.cacheHitRate * 100).toFixed(1)}%\n- **Memory Usage**: ${result.metrics.performanceMetrics.memoryUsage.toFixed(1)}MB\n- **Files Processed**: ${result.metrics.performanceMetrics.filesProcessed}\n\n## üö® Active Alerts\n\n${\n  result.alerts.length === 0;\n    ? 'No active alerts ‚úÖ'\n    : result.alerts\n        .map(\n          alert =>;\n            `- **${alert.severity.toUpperCase()}**: ${alert.message} (${alert.currentValue} > ${alert.threshold})`,\n        )\n        .join('\\n')\n}",
        "line": 492,
        "column": 19,
        "context": "linting-dashboard-report.md';\\n\\n    const report = `# Linting Excellence Dashboard Report;\\n\\nGenerated"
      },
      {
        "file": "src/services/linting/LintingValidationDashboard.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`\n    : '**No Regression Detected** ‚úÖ'\n}\n\n## üí° Recommendations\n\n${result.recommendations.map(rec => `- ${rec}`).join('\\n')}",
        "line": 549,
        "column": 0,
        "context": "storicalComparison.changePercentage.toFixed(1)}%)\\n`\\n    : '**No Regression Detected** ‚úÖ'\\n}\\n\\n## üí° Re"
      },
      {
        "file": "src/services/linting/LintingValidationDashboard.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n  result.alerts.length === 0;\n    ? 'No active alerts ‚úÖ'\n    : result.alerts\n        .map(\n          alert =>;\n            `- **${",
        "line": 530,
        "column": 0,
        "context": "anceMetrics.filesProcessed}\\n\\n## üö® Active Alerts\\n\\n${\\n  result.alerts.length === 0;\\n    ? 'No active "
      },
      {
        "file": "src/services/linting/LintingValidationDashboard.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n  result.regressionAnalysis.detected\n    ? `\n**Regression Detected**: ${",
        "line": 543,
        "column": 0,
        "context": "        .join('\\n')\\n}\\n\\n## üìà Regression Analysis\\n\\n${\\n  result.regressionAnalysis.detected\\n    ? `\\n**"
      },
      {
        "file": "src/services/linting/LintingValidationDashboard.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${result.recommendations.map(rec => `- ${",
        "line": 555,
        "column": 0,
        "context": "egression Detected** ‚úÖ'\\n}\\n\\n## üí° Recommendations\\n\\n${result.recommendations.map(rec => `- ${rec}`).jo"
      },
      {
        "file": "src/services/linting/ZeroErrorAchievementDashboard.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`# üéØ Zero-Error Achievement Dashboard;\n\nGenerated: ${new Date().toISOString()}  \nGeneration Time: ${data.generationTime}ms\n\n## üìä Executive Summary\n\n- **Overall Status**: ${this.getOverallStatus(data.validationResult, data.qualityGates)}\n- **Quality Score**: ${data.validationResult.metrics.qualityScore}/100 ${this.getScoreIcon(data.validationResult.metrics.qualityScore)}\n- **Zero-Error Progress**: ${this.calculateOverallProgress(data.targets)}%\n- **Quality Gates**: ${data.qualityGates.filter(g => g.status === 'passing').length}/${data.qualityGates.length} passing;\n- **Critical Issues**: ${this.identifyCriticalIssues(data.validationResult.metrics).length}\n\n## üéØ Zero-Error Targets\n\n${data.targets\n  .map(\n    target => `;\n### ${target.metric.charAt(0).toUpperCase() + target.metric.slice(1)}\n- **Current**: ${target.currentValue}",
        "line": 430,
        "column": 19,
        "context": "-achievement-dashboard.md'),;\\n\\n    const report = `# üéØ Zero-Error Achievement Dashboard;\\n\\nGenerated"
      },
      {
        "file": "src/services/linting/ZeroErrorAchievementDashboard.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`,\n  )\n  .join('')}\n\n## üìà Trend Analysis\n\n${\n  data.trendAnalysis.length === 0;\n    ? 'Insufficient data for trend analysis (need 3+ data points)'\n    : data.trendAnalysis\n        .map(\n          trend => `;\n### ${trend.metric}\n- **Trend**: ${trend.trend.toUpperCase()}",
        "line": 456,
        "column": 0,
        "context": "eDateString()}\\n- **Strategy**: ${target.strategy}\\n`,\\n  )\\n  .join('')}\\n\\n## üìà Trend Analysis\\n\\n${\\n  da"
      },
      {
        "file": "src/services/linting/ZeroErrorAchievementDashboard.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`,\n        )\n        .join('')\n}\n\n## üö¶ Quality Gates\n\n${data.qualityGates\n  .map(\n    gate => `;\n### ${gate.name}\n- **Status**: ${gate.status.toUpperCase()}",
        "line": 474,
        "column": 0,
        "context": "idence**: ${(trend.confidence * 100).toFixed(0)}%\\n`,\\n        )\\n        .join('')\\n}\\n\\n## üö¶ Quality Ga"
      },
      {
        "file": "src/services/linting/ZeroErrorAchievementDashboard.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`,\n  )\n  .join('')}\n\n## üîç Current Metrics Breakdown\n\n### Critical Issues\n- **Parser Errors**: ${data.validationResult.metrics.parserErrors} ${data.validationResult.metrics.parserErrors === 0 ? '‚úÖ' : 'üö®'};\n- **TypeScript Errors**: ${data.validationResult.metrics.errors}\n- **Explicit Any Errors**: ${data.validationResult.metrics.explicitAnyErrors} ${data.validationResult.metrics.explicitAnyErrors < 100 ? '‚úÖ' : '‚ö°'}\n\n### Code Quality\n- **Import Order Issues**: ${data.validationResult.metrics.importOrderIssues}\n- **Unused Variables**: ${data.validationResult.metrics.unusedVariables}\n- **React Hooks Issues**: ${data.validationResult.metrics.reactHooksIssues}\n- **Console Statements**: ${data.validationResult.metrics.consoleStatements}\n\n### Domain-Specific\n- **Astrological Calculations**: ${data.validationResult.metrics.domainSpecificIssues.astrologicalCalculations}\n- **Campaign System**: ${data.validationResult.metrics.domainSpecificIssues.campaignSystem}\n- **Test Files**: ${data.validationResult.metrics.domainSpecificIssues.testFiles}\n\n### Performance\n- **Linting Duration**: ${data.validationResult.metrics.performanceMetrics.lintingDuration}ms\n- **Cache Hit Rate**: ${(data.validationResult.metrics.performanceMetrics.cacheHitRate * 100).toFixed(1)}%\n- **Memory Usage**: ${data.validationResult.metrics.performanceMetrics.memoryUsage.toFixed(1)}MB\n- **Files Processed**: ${data.validationResult.metrics.performanceMetrics.filesProcessed}\n\n## üö® Active Alerts\n\n${\n  data.validationResult.alerts.length === 0;\n    ? '‚úÖ No active alerts'\n    : data.validationResult.alerts\n        .map(\n          alert =>;\n            `- **${alert.severity.toUpperCase()}**: ${alert.message}",
        "line": 489,
        "column": 0,
        "context": "*Last Check**: ${gate.lastCheck.toLocaleString()}\\n`,\\n  )\\n  .join('')}\\n\\n## üîç Current Metrics Breakdo"
      },
      {
        "file": "src/services/linting/ZeroErrorAchievementDashboard.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`,\n        )\n        .join('\\n')\n}\n\n## üîß Maintenance Status\n\n${\n  data.maintenanceResults.size === 0;\n    ? 'No maintenance procedures run this cycle'\n    : Array.from(data.maintenanceResults.entries())\n        .map(\n          ([id, result]) => `\n### ${this.maintenanceProcedures.get(id)?.name || id}\n- **Status**: ${result.success ? '‚úÖ SUCCESS' : '‚ùå FAILED'}",
        "line": 525,
        "column": 111,
        "context": "essage} (${alert.currentValue}/${alert.threshold})`,\\n        )\\n        .join('\\n')\\n}\\n\\n## üîß Maintena"
      },
      {
        "file": "src/services/linting/ZeroErrorAchievementDashboard.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`# üéØ Zero-Error Achievement Dashboard;\n\nGenerated: ${new Date().toISOString()}  \nGeneration Time: ${data.generationTime}ms\n\n## üìä Executive Summary\n\n- **Overall Status**: ${this.getOverallStatus(data.validationResult, data.qualityGates)}\n- **Quality Score**: ${data.validationResult.metrics.qualityScore}/100 ${this.getScoreIcon(data.validationResult.metrics.qualityScore)}\n- **Zero-Error Progress**: ${this.calculateOverallProgress(data.targets)}%\n- **Quality Gates**: ${data.qualityGates.filter(g => g.status === 'passing').length}/${data.qualityGates.length} passing;\n- **Critical Issues**: ${this.identifyCriticalIssues(data.validationResult.metrics).length}\n\n## üéØ Zero-Error Targets\n\n${data.targets\n  .map(\n    target => `;\n### ${target.metric.charAt(0).toUpperCase() + target.metric.slice(1)}\n- **Current**: ${target.currentValue}\n- **Target**: ${target.targetValue}\n- **Progress**: ${target.progress}% ${this.getProgressBar(target.progress)}\n- **Priority**: ${target.priority.toUpperCase()} ${this.getPriorityIcon(target.priority)}\n- **Deadline**: ${target.deadline.toLocaleDateString()}\n- **Est. Completion**: ${target.estimatedCompletion.toLocaleDateString()}\n- **Strategy**: ${target.strategy}\n`,\n  )\n  .join('')}",
        "line": 430,
        "column": 19,
        "context": "-achievement-dashboard.md'),;\\n\\n    const report = `# üéØ Zero-Error Achievement Dashboard;\\n\\nGenerated"
      },
      {
        "file": "src/services/linting/ZeroErrorAchievementDashboard.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`,\n        )\n        .join('')\n}\n\n## üö¶ Quality Gates\n\n${data.qualityGates\n  .map(\n    gate => `;\n### ${gate.name}\n- **Status**: ${gate.status.toUpperCase()} ${this.getGateStatusIcon(gate.status)}\n- **Condition**: \\`${gate.condition}",
        "line": 474,
        "column": 0,
        "context": "idence**: ${(trend.confidence * 100).toFixed(0)}%\\n`,\\n        )\\n        .join('')\\n}\\n\\n## üö¶ Quality Ga"
      },
      {
        "file": "src/services/linting/ZeroErrorAchievementDashboard.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`,\n  )\n  .join('')}\n\n## üîç Current Metrics Breakdown\n\n### Critical Issues\n- **Parser Errors**: ${data.validationResult.metrics.parserErrors} ${data.validationResult.metrics.parserErrors === 0 ? '‚úÖ' : 'üö®'};\n- **TypeScript Errors**: ${data.validationResult.metrics.errors}\n- **Explicit Any Errors**: ${data.validationResult.metrics.explicitAnyErrors} ${data.validationResult.metrics.explicitAnyErrors < 100 ? '‚úÖ' : '‚ö°'}\n\n### Code Quality\n- **Import Order Issues**: ${data.validationResult.metrics.importOrderIssues}\n- **Unused Variables**: ${data.validationResult.metrics.unusedVariables}\n- **React Hooks Issues**: ${data.validationResult.metrics.reactHooksIssues}\n- **Console Statements**: ${data.validationResult.metrics.consoleStatements}\n\n### Domain-Specific\n- **Astrological Calculations**: ${data.validationResult.metrics.domainSpecificIssues.astrologicalCalculations}\n- **Campaign System**: ${data.validationResult.metrics.domainSpecificIssues.campaignSystem}\n- **Test Files**: ${data.validationResult.metrics.domainSpecificIssues.testFiles}\n\n### Performance\n- **Linting Duration**: ${data.validationResult.metrics.performanceMetrics.lintingDuration}ms\n- **Cache Hit Rate**: ${(data.validationResult.metrics.performanceMetrics.cacheHitRate * 100).toFixed(1)}%\n- **Memory Usage**: ${data.validationResult.metrics.performanceMetrics.memoryUsage.toFixed(1)}MB\n- **Files Processed**: ${data.validationResult.metrics.performanceMetrics.filesProcessed}\n\n## üö® Active Alerts\n\n${\n  data.validationResult.alerts.length === 0;\n    ? '‚úÖ No active alerts'\n    : data.validationResult.alerts\n        .map(\n          alert =>;\n            `- **${alert.severity.toUpperCase()}**: ${alert.message} (${alert.currentValue}/${alert.threshold})`,\n        )\n        .join('\\n')\n}",
        "line": 489,
        "column": 0,
        "context": "*Last Check**: ${gate.lastCheck.toLocaleString()}\\n`,\\n  )\\n  .join('')}\\n\\n## üîç Current Metrics Breakdo"
      },
      {
        "file": "src/services/linting/ZeroErrorAchievementDashboard.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${data.targets\n  .map(\n    target => `;\n### ${",
        "line": 445,
        "column": 0,
        "context": "esult.metrics).length}\\n\\n## üéØ Zero-Error Targets\\n\\n${data.targets\\n  .map(\\n    target => `;\\n### ${targ"
      },
      {
        "file": "src/services/linting/ZeroErrorAchievementDashboard.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n  data.trendAnalysis.length === 0;\n    ? 'Insufficient data for trend analysis (need 3+ data points)'\n    : data.trendAnalysis\n        .map(\n          trend => `;\n### ${",
        "line": 462,
        "column": 0,
        "context": "ategy}\\n`,\\n  )\\n  .join('')}\\n\\n## üìà Trend Analysis\\n\\n${\\n  data.trendAnalysis.length === 0;\\n    ? 'Insuf"
      },
      {
        "file": "src/services/linting/ZeroErrorAchievementDashboard.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${data.qualityGates\n  .map(\n    gate => `;\n### ${",
        "line": 481,
        "column": 0,
        "context": "      )\\n        .join('')\\n}\\n\\n## üö¶ Quality Gates\\n\\n${data.qualityGates\\n  .map(\\n    gate => `;\\n### ${g"
      },
      {
        "file": "src/services/linting/ZeroErrorAchievementDashboard.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n  data.validationResult.alerts.length === 0;\n    ? '‚úÖ No active alerts'\n    : data.validationResult.alerts\n        .map(\n          alert =>;\n            `- **${",
        "line": 519,
        "column": 0,
        "context": "anceMetrics.filesProcessed}\\n\\n## üö® Active Alerts\\n\\n${\\n  data.validationResult.alerts.length === 0;\\n  "
      },
      {
        "file": "src/services/linting/ZeroErrorAchievementDashboard.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n  data.maintenanceResults.size === 0;\n    ? 'No maintenance procedures run this cycle'\n    : Array.from(data.maintenanceResults.entries())\n        .map(\n          ([id, result]) => `\n### ${",
        "line": 532,
        "column": 0,
        "context": "\\n        .join('\\n')\\n}\\n\\n## üîß Maintenance Status\\n\\n${\\n  data.maintenanceResults.size === 0;\\n    ? 'No"
      },
      {
        "file": "src/utils/astrology/astrologicalValidation.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`Invalid elemental properties${context ? ` in ${context}` : ''}",
        "line": 297,
        "column": 18,
        "context": "mentalProperties(properties)) {\\n      errors.push(`Invalid elemental properties${context ? ` in ${co"
      },
      {
        "file": "src/utils/astrology/astrologicalValidation.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`Invalid elemental properties${context ? ` in ${context}` : ''}",
        "line": 297,
        "column": 18,
        "context": "mentalProperties(properties)) {\\n      errors.push(`Invalid elemental properties${context ? ` in ${co"
      },
      {
        "file": "src/utils/astrology/astrologicalValidation.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${context ? ` in ${",
        "line": 297,
        "column": 47,
        "context": " {\\n      errors.push(`Invalid elemental properties${context ? ` in ${context}` : ''}`);\\n\\n      // Tr"
      },
      {
        "file": "src/utils/ingredientValidation.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`Test failed: ${test.testName}${test.error ? ` - ${test.error}` : ''}",
        "line": 910,
        "column": 17,
        "context": "TE',\\n        severity: severity,\\n        message: `Test failed: ${test.testName}${test.error ? ` - $"
      },
      {
        "file": "src/utils/ingredientValidation.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`Test failed: ${test.testName}${test.error ? ` - ${test.error}` : ''}",
        "line": 910,
        "column": 17,
        "context": "TE',\\n        severity: severity,\\n        message: `Test failed: ${test.testName}${test.error ? ` - $"
      },
      {
        "file": "src/utils/ingredientValidation.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${test.error ? ` - ${",
        "line": 910,
        "column": 47,
        "context": "y,\\n        message: `Test failed: ${test.testName}${test.error ? ` - ${test.error}` : ''}`,\\n        "
      },
      {
        "file": "src/utils/nextConfigOptimizer.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`build-\\${",
        "line": 100,
        "column": 36,
        "context": "async () => {\\n    return process.env.BUILD_ID || \\`build-\\${Date.now()}\\`;\\n  }\\n};\\n\\n  export default "
      },
      {
        "file": "src/utils/planetaryValidation.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`Test failed: ${test.testName}${test.error ? ` - ${test.error}` : ''}",
        "line": 834,
        "column": 17,
        "context": "RE',\\n        severity: severity,\\n        message: `Test failed: ${test.testName}${test.error ? ` - $"
      },
      {
        "file": "src/utils/planetaryValidation.ts",
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`Test failed: ${test.testName}${test.error ? ` - ${test.error}` : ''}",
        "line": 834,
        "column": 17,
        "context": "RE',\\n        severity: severity,\\n        message: `Test failed: ${test.testName}${test.error ? ` - $"
      },
      {
        "file": "src/utils/planetaryValidation.ts",
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${test.error ? ` - ${",
        "line": 834,
        "column": 47,
        "context": "y,\\n        message: `Test failed: ${test.testName}${test.error ? ` - ${test.error}` : ''}`,\\n        "
      }
    ]
  },
  "issuesByFile": {
    "src/app/alchemicalEngine.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 34,
        "column": 8,
        "context": "efined;\\n      const extendedHoroscope = {\\n        ...horoscopeDict,\\n        tropical: {\\n          Ce"
      }
    ],
    "src/app/alchemize-demo/page.tsx": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 36,
        "column": 78,
        "context": "-xl text-white'>üîÆ Loading alchemical calculations...</div>;\\n      </div>\\n    );\\n  }\\n\\n  if (error) {"
      }
    ],
    "src/app/alchm-kitchen/SignVectorPanel.tsx": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 47,
        "column": 37,
        "context": ".then(p => {\\n          if (mounted) setPositions(p as unknown as Record<string, PlanetaryPosition>);"
      }
    ],
    "src/app/alchm-kitchen/page.tsx": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 27,
        "column": 33,
        "context": "nter space-y-4'>\\n        ;<p>Loading Alchm Kitchen...</p>\\n        <div className='text-xs text-gray-"
      }
    ],
    "src/app/api/error.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 41,
        "column": 6,
        "context": "tResponse.json(\\n    {\\n      error: message,\\n      ...(details ? { details } : {}),\\n    },\\n    { stat"
      }
    ],
    "src/app/cooking-methods/[method]/page.tsx": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 90,
        "column": 32,
        "context": "gn: 'center' }}>,\\n          Loading cooking method...\\n        </Typography>\\n      </Container>\\n    )"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 75,
        "column": 28,
        "context": "odId.toLowerCase()) {\\n          foundMethod = data as unknown as CookingMethodInfo;\\n          foundK"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 143,
        "column": 32,
        "context": "ption' in method;\\n                ? String((method as unknown as { description?: string }).descripti"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 151,
        "column": 34,
        "context": "ion' in method;\\n                  ? String((method as unknown as { duration?: string }).duration)\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 184,
        "column": 39,
        "context": "ethod ? (;\\n                  Array.isArray((method as unknown as { benefits?: string[] }).benefits) "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 185,
        "column": 27,
        "context": "ing[] }).benefits) ? (\\n                    (method as unknown as { benefits: string[] }).benefits.ma"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 194,
        "column": 37,
        "context": " paragraph>;\\n                      {String((method as unknown as { benefits?: string | string[] }).b"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 213,
        "column": 39,
        "context": " method &&\\n                  Array.isArray((method as unknown as { suitable_for?: string[] }).suitab"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 214,
        "column": 25,
        "context": "ng[] }).suitable_for) &&\\n                  (method as unknown as { suitable_for: string[] }).suitabl"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 226,
        "column": 23,
        "context": " 'variations' in method &&\\n                (method as unknown as { variations?: string[] }).variatio"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 233,
        "column": 44,
        "context": "List>\\n                      {Array.isArray((method as unknown as { variations?: string[] }).variatio"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 234,
        "column": 31,
        "context": " }).variations) &&\\n                        (method as unknown as { variations: string[] }).variation"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 436,
        "column": 23,
        "context": " 'time_range' in method &&\\n                (method as unknown as { time_range?: { min?: number, max?"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 442,
        "column": 30,
        "context": "ange:</strong>{' '}\\n                      {(method as unknown as { time_range?: { min?: number, max?"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 445,
        "column": 30,
        "context": "                  -\\n                      {(method as unknown as { time_range?: { min?: number, max?"
      }
    ],
    "src/app/cooking-methods-demo/page.tsx": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 22,
        "column": 6,
        "context": "ferent categories\\n    const demoMethods = [\\n      ..._formatMethodsForComponent(dryCookingMethods as"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 23,
        "column": 6,
        "context": "Component(dryCookingMethods as any, 'dry'),\\n      ..._formatMethodsForComponent(wetCookingMethods as"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 24,
        "column": 6,
        "context": "Component(wetCookingMethods as any, 'wet'),\\n      ..._formatMethodsForComponent(molecularCookingMeth"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 110,
        "column": 58,
        "context": "<Typography align='center'>Loading cooking methods...</Typography>\\n      )}\\n\\n      {selectedMethod &"
      }
    ],
    "src/app/debug/page.tsx": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 43,
        "column": 30,
        "context": "'p-4 text-center'>;\\n        <p>Loading debug tools...</p>\\n      </div>\\n    )\\n  }\\n\\n  return <>{childr"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 61,
        "column": 59,
        "context": ".info('Running cooking method recommendations test...');\\n      const results = testCookingMethodReco"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 97,
        "column": 36,
        "context": ",\\n          >\\n            {loading ? 'Running Test...' : 'Test Cooking Method Recommendations'}\\n    "
      }
    ],
    "src/app/loading.tsx": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 13,
        "column": 73,
        "context": "mb-2 animate-pulse'>‚è≥</div>;<div>{text || 'Loading...'}</div>\\n    </div>\\n  </div>\\n);\\n\\ninterface Load"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 27,
        "column": 17,
        "context": " = false,\\n  variant = 'spinner',\\n  text = 'Loading...',\\n}) => {\\n  return <LoadingComponent fullScree"
      }
    ],
    "src/app/planet-test/layout.tsx": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 17,
        "column": 21,
        "context": " originalLog = console.log;\\n\\n    console.error = (...args) => {\\n      setErrors(prev => [...prev, ar"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 18,
        "column": 25,
        "context": "e.error = (...args) => {\\n      setErrors(prev => [...prev, args.join(' ')]);\\n      originalError(..."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 19,
        "column": 20,
        "context": "> [...prev, args.join(' ')]);\\n      originalError(...args);\\n    };\\n\\n    console.log = (...args) => {"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 22,
        "column": 19,
        "context": "riginalError(...args);\\n    };\\n\\n    console.log = (...args) => {\\n      setLogs(prev => [...prev, args"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 23,
        "column": 23,
        "context": "nsole.log = (...args) => {\\n      setLogs(prev => [...prev, args.join(' ')]);\\n      originalLog(...ar"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 24,
        "column": 18,
        "context": " => [...prev, args.join(' ')]);\\n      originalLog(...args);\\n    };\\n\\n    return () => {\\n      console"
      }
    ],
    "src/app/planet-test/page.tsx": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 24,
        "column": 55,
        "context": "   <Suspense fallback={<div>Loading simple display...</div>}>;\\n          <SimplePlanetaryDisplay />\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 31,
        "column": 55,
        "context": "   <Suspense fallback={<div>Loading full component...</div>}>;\\n          <PlanetaryHoursTest />\\n    "
      }
    ],
    "src/app/template.tsx": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 20,
        "column": 28,
        "context": "imate-pulse'>‚è≥</div>;\\n      <div>{text || 'Loading...'}</div>\\n    </div>\\n  </div>\\n);\\n\\ninterface Temp"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 90,
        "column": 74,
        "context": "Screen variant='spinner' text='Loading application...' />;\\n  }\\n\\n  return (\\n    <div id='app-root' cl"
      }
    ],
    "src/app/test/migrated-components/cuisine-selector-test.tsx": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 60,
        "column": 26,
        "context": " || []).length > 5 && (\\n                      <li>...and {(originalRecipes || []).length - 5} more</"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 91,
        "column": 26,
        "context": " || []).length > 5 && (\\n                      <li>...and {(migratedRecipes || []).length - 5} more</"
      }
    ],
    "src/app/test/migrated-components/recipe-filters/page.tsx": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 43,
        "column": 34,
        "context": "terState>) => {\\n    setOriginalFilters(prev => ({ ...prev, ...updates }));\\n    logger.info('Original"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 43,
        "column": 43,
        "context": ") => {\\n    setOriginalFilters(prev => ({ ...prev, ...updates }));\\n    logger.info('Original filters "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 56,
        "column": 34,
        "context": "terState>) => {\\n    setMigratedFilters(prev => ({ ...prev, ...updates }));\\n    logger.info('Migrated"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 56,
        "column": 43,
        "context": ") => {\\n    setMigratedFilters(prev => ({ ...prev, ...updates }));\\n    logger.info('Migrated filters "
      }
    ],
    "src/app/test/migrated-components/recipe-recommender-test.tsx": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 19,
        "column": 26,
        "context": "me, value } = e.target;\\n    setFilters(prev => ({ ...prev, [name]: value }));\\n  };\\n\\n  return (\\n    <"
      }
    ],
    "src/calculations/alchemicalCalculations.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 168,
        "column": 36,
        "context": "or production\\nconst debugLog = (_message: string, ..._args: unknown[]): void => {\\n  // Comment out c"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 170,
        "column": 23,
        "context": " to avoid linting warnings\\n  // log.info(message, ...args)\\n};\\n\\n/**\\n * Calculate all alchemical prope"
      }
    ],
    "src/calculations/alchemicalEngine.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 40,
        "column": 36,
        "context": "roduction\\n */\\nconst debugLog = (_message: string, ..._args: unknown[]): void => {\\n  // Comment out c"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 42,
        "column": 23,
        "context": " to avoid linting warnings\\n  // log.info(message, ...args)\\n};\\n\\n// Silent mode flag for debugging\\ncon"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 908,
        "column": 19,
        "context": "    // Create defensive copies\\n    const obj1 = { ...elementObject1 };\\n    const obj2 = { ...element"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 909,
        "column": 19,
        "context": " obj1 = { ...elementObject1 };\\n    const obj2 = { ...elementObject2 };\\n\\n    return {\\n      Fire: (ob"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1301,
        "column": 57,
        "context": "     // Continue with the rest of the calculations...\\n            // (I'm not showing all the calcul"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 497,
        "column": 22,
        "context": "iac || 'aries') ?? 'aries',\\n      element: element as unknown as Element,\\n      strength: this.seaso"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1413,
        "column": 20,
        "context": " }\\n\\n    // Return the results\\n    return alchmInfo as unknown as AlchemicalResult;\\n  } catch (error)"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2069,
        "column": 56,
        "context": "nst dominantElement = (getElementFromSign(sunSign) as unknown as Element) || 'Fire';\\n\\n    // Determi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2073,
        "column": 21,
        "context": "phase\\n    const lunarPhase =\\n      (((moonPosition as unknown as any).phase).toLowerCase() as LunarP"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2120,
        "column": 5,
        "context": "ominantElement,\\n      season,\\n      moonSign\\n    } as unknown as AstrologicalState;\\n  } catch (error"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2182,
        "column": 7,
        "context": "         'Total Substance': 0.25\\n        }\\n      } as unknown as AlchemicalResult;\\n    }\\n  },\\n  calc"
      }
    ],
    "src/calculations/alchemicalTransformation.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 63,
        "column": 6,
        "context": "ze input values\\n    const sanitizedItem = {\\n      ...item;\\n      elementalProperties: Object.fromEnt"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 219,
        "column": 6,
        "context": "t: ${planetaryBoost}`,\\n    );\\n\\n    return {\\n      ...sanitizedItem;\\n      alchemicalProperties: alch"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 236,
        "column": 6,
        "context": "with original values preserved\\n    return {\\n      ...item;\\n      alchemicalProperties: {\\n        Spi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 243,
        "column": 40,
        "context": "\\n      },\\n      transformedElementalProperties: { ...item.elementalProperties },\\n      heat: 0.5,\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 281,
        "column": 6,
        "context": "ssing fails\\n    return items.map(item => ({\\n      ...item;\\n      alchemicalProperties: {\\n        Spi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 288,
        "column": 40,
        "context": "\\n      },\\n      transformedElementalProperties: { ...item.elementalProperties },\\n      heat: 0.5,\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 314,
        "column": 72,
        "context": "roperties: Record<ElementalCharacter, number> = { ...originalProperties };\\n\\n    // Calculate base en"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 375,
        "column": 13,
        "context": "ginal properties if there's an error\\n    return { ...originalProperties };\\n  }\\n};\\n\\n/**\\n * Apply zodi"
      }
    ],
    "src/calculations/combinationEffects.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 53,
        "column": 5,
        "context": "0.1 },\\n    notes: 'Warming spice blend'\\n  },\\n  // ... other rules remain the same\\n];\\n\\n// Create a no"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 110,
        "column": 17,
        "context": " // Check elemental interactions\\n    effects.push(...calculateElementalInteractions(ingredients));\\n\\n"
      }
    ],
    "src/calculations/core/elementalCalculations.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 329,
        "column": 35,
        "context": "): number => {\\n    const dominantValue = Math.max(...Object.values(properties));\\n    return dominant"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 565,
        "column": 35,
        "context": "): number => {\\n    const dominantValue = Math.max(...Object.values(modifiers));\\n    const seasonalFa"
      }
    ],
    "src/calculations/culinary/recipeMatching.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 299,
        "column": 4,
        "context": "5, 1.33];\\n  const resonanceScore = Math.max(;\\n    ...simpleRatios.map(ratio => 1 - Math.abs(energyRa"
      }
    ],
    "src/calculations/culinaryAstrology.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 245,
        "column": 37,
        "context": "ets') || [];\\n        const planetaryActivators = [...recipe.astrologicalProfile.rulingPlanets];\\n    "
      }
    ],
    "src/calculations/elementalcalculations.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 33,
        "column": 32,
        "context": "or.getInstance();\\n    instance.currentBalance = { ...DEFAULT_ELEMENTAL_PROPERTIES };\\n    instance.in"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 81,
        "column": 28,
        "context": "ElementalProperties {\\n    const baseModifiers = { ...DEFAULT_ELEMENTAL_PROPERTIES };\\n\\n    // Normali"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 166,
        "column": 25,
        "context": "with the base properties\\n    const properties = { ...baseProperties };\\n\\n    // Create default season"
      }
    ],
    "src/calculations/enhancedAlchemicalMatching.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 108,
        "column": 20,
        "context": "  if (Array.isArray(decan)) {\\n        rulers.push(...decan);\\n      }\\n    });\\n    return rulers;\\n  };"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 815,
        "column": 12,
        "context": "st: [], extraAvoid: [] };\\n\\n  return {\\n    boost: [...baseAdjust.boost, ...elementAdjust.extraBoost],"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 815,
        "column": 33,
        "context": "] };\\n\\n  return {\\n    boost: [...baseAdjust.boost, ...elementAdjust.extraBoost],\\n    avoid: [...baseA"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 816,
        "column": 12,
        "context": ".boost, ...elementAdjust.extraBoost],\\n    avoid: [...baseAdjust.avoid, ...elementAdjust.extraAvoid]\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 816,
        "column": 33,
        "context": "ust.extraBoost],\\n    avoid: [...baseAdjust.avoid, ...elementAdjust.extraAvoid]\\n  };\\n}\\n\\n/**\\n * Enhanc"
      }
    ],
    "src/calculations/enhancedCuisineRecommender.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 268,
        "column": 26,
        "context": "Array(seasonRecipes)) {\\n          allRecipes.push(...seasonRecipes);\\n        }\\n      }\\n\\n      // Add"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 276,
        "column": 26,
        "context": "ay(allSeasonRecipes)) {\\n          allRecipes.push(...allSeasonRecipes);\\n        }\\n      }\\n    });\\n\\n "
      }
    ],
    "src/calculations/gregsEnergy.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 9,
        "column": 36,
        "context": "roduction\\n */\\nconst debugLog = (_message: string, ..._args: unknown[]): void => {\\n  // Comment out c"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 11,
        "column": 23,
        "context": " to avoid linting warnings\\n  // log.info(message, ...args)\\n};\\n\\n/**\\n * Interface representing the cou"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 510,
        "column": 4,
        "context": "] += value;\\n      });\\n    }\\n  });\\n\\n  return {\\n    ...elementalCounts;\\n    ...alchemicalCounts\\n  };\\n}"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 511,
        "column": 4,
        "context": "  }\\n  });\\n\\n  return {\\n    ...elementalCounts;\\n    ...alchemicalCounts\\n  };\\n};\\n\\n// Add utility functi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 524,
        "column": 2,
        "context": "micalCounts,\\n): ElementalAlchemicalCounts => ({\\n  ...counts;\\n  Spirit: Math.max(counts.Spirit, 0.1),"
      }
    ],
    "src/calculations/index.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 103,
        "column": 6,
        "context": "racy\\n        }\\n      }\\n    };\\n\\n    return {\\n      ...analysis;\\n      timestamp: new Date().toISOStri"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 299,
        "column": 6,
        "context": "lity\\n        }\\n      }\\n    };\\n\\n    return {\\n      ...compatibilityAnalysis;\\n      timestamp: new Dat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 566,
        "column": 6,
        "context": "commendations\\n    const recommendations = [\\n      ...recipeResult.recommendations;\\n      ...generate"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 567,
        "column": 6,
        "context": " = [\\n      ...recipeResult.recommendations;\\n      ...generateDetailedCompatibilityRecommendations(\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 720,
        "column": 6,
        "context": "  const enhancedInput: CalculationInput = {\\n      ...input;\\n      planetaryPositions: realPositions "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 802,
        "column": 26,
        "context": "const adjustment = 0.1;\\n  const adjustedProps = { ...elementalProperties };\\n\\n  switch (season.toLowe"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 829,
        "column": 26,
        "context": "onst adjustment = 0.05;\\n  const adjustedProps = { ...elementalProperties };\\n\\n  switch (lunarPhase.to"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 721,
        "column": 39,
        "context": " ...input;\\n      planetaryPositions: realPositions as unknown as Record<string, PlanetaryPosition>\\n "
      }
    ],
    "src/config/defaults.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 11,
        "column": 1,
        "context": "'any',\\n  seasonality: null,\\n  difficulty: 'any',\\n} as unknown as FilterOptions;\\n\\n// Separate dietary"
      }
    ],
    "src/config/signVectorConfig.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 89,
        "column": 2,
        "context": "st DEV_SIGN_VECTOR_CONFIG: SignVectorConfig = {\\n  ...DEFAULT_SIGN_VECTOR_CONFIG;\\n  blendWeightAlpha:"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 105,
        "column": 4,
        "context": "ectorConfig>\\n): SignVectorConfig {\\n  return {\\n    ...base;\\n    ...overrides;\\n    elementalToESMS: {\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 106,
        "column": 4,
        "context": "): SignVectorConfig {\\n  return {\\n    ...base;\\n    ...overrides;\\n    elementalToESMS: {\\n      ...base"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 108,
        "column": 6,
        "context": "e;\\n    ...overrides;\\n    elementalToESMS: {\\n      ...base.elementalToESMS;\\n      ...(overrides.eleme"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 109,
        "column": 6,
        "context": "talToESMS: {\\n      ...base.elementalToESMS;\\n      ...(overrides.elementalToESMS || {})\\n    },\\n    mo"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 112,
        "column": 6,
        "context": "lToESMS || {})\\n    },\\n    modalityBoosts: {\\n      ...base.modalityBoosts;\\n      ...(overrides.modali"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 113,
        "column": 6,
        "context": "lityBoosts: {\\n      ...base.modalityBoosts;\\n      ...(overrides.modalityBoosts || {})\\n    },\\n    pla"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 116,
        "column": 6,
        "context": "oosts || {})\\n    },\\n    planetaryWeights: {\\n      ...base.planetaryWeights;\\n      ...(overrides.plan"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 117,
        "column": 6,
        "context": "yWeights: {\\n      ...base.planetaryWeights;\\n      ...(overrides.planetaryWeights || {})\\n    },\\n    a"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 120,
        "column": 6,
        "context": "eights || {})\\n    },\\n    aspectModifiers: {\\n      ...base.aspectModifiers;\\n      ...(overrides.aspec"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 121,
        "column": 6,
        "context": "Modifiers: {\\n      ...base.aspectModifiers;\\n      ...(overrides.aspectModifiers || {})\\n    },\\n    se"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 124,
        "column": 6,
        "context": "iers || {})\\n    },\\n    seasonalAlignment: {\\n      ...base.seasonalAlignment;\\n      ...(overrides.sea"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 125,
        "column": 6,
        "context": "ignment: {\\n      ...base.seasonalAlignment;\\n      ...(overrides.seasonalAlignment || {})\\n    },\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 128,
        "column": 6,
        "context": "nment || {})\\n    },\\n    magnitudeScaling: {\\n      ...base.magnitudeScaling;\\n      ...(overrides.magn"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 129,
        "column": 6,
        "context": "eScaling: {\\n      ...base.magnitudeScaling;\\n      ...(overrides.magnitudeScaling || {})\\n    }\\n  };\\n}"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 150,
        "column": 11,
        "context": "SignVectorConfig(): SignVectorConfig {\\n  return { ...currentConfig };\\n}\\n\\nexport function resetSignVe"
      }
    ],
    "src/constants/alchemicalPillars.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1228,
        "column": 10,
        "context": "ingMethods(): EnhancedCookingMethod[] {\\n  return [...ENHANCED_COOKING_METHODS]\\n}\\n\\n// getMonicaCompat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1510,
        "column": 4,
        "context": "rMonicaModifiers(monicaConstant);\\n\\n  return {\\n    ...pillar;\\n    monicaProperties: {\\n      kalchm,\\n "
      }
    ],
    "src/constants/chakraSymbols.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 162,
        "column": 6,
        "context": "ness\\n        }\\n      }\\n    };\\n\\n    return {\\n      ...mantraAnalysis,\\n      timestamp: new Date().toI"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 261,
        "column": 6,
        "context": "sion\\n        }\\n      }\\n    };\\n\\n    return {\\n      ...visualAnalysis,\\n      timestamp: new Date().toI"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 354,
        "column": 6,
        "context": "ance\\n        }\\n      }\\n    };\\n\\n    return {\\n      ...nutritionalAnalysis,\\n      timestamp: new Date("
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 437,
        "column": 6,
        "context": "sion\\n        }\\n      }\\n    };\\n\\n    return {\\n      ...functionalAnalysis,\\n      timestamp: new Date()"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 529,
        "column": 6,
        "context": "sion\\n        }\\n      }\\n    };\\n\\n    return {\\n      ...platformAnalysis,\\n      timestamp: new Date().t"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 177,
        "column": 17,
        "context": "recommendations: string[] = [];\\n\\n    if ((analysis as unknown as any)?.effectiveness?.pronunciationA"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 194,
        "column": 16,
        "context": "onance');\\n    }\\n\\n    if (\\n      (\\n        analysis as unknown as {\\n          advancedVibrations?: { "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 199,
        "column": 16,
        "context": "amental !== undefined &&\\n      ((\\n        analysis as unknown as {\\n          advancedVibrations?: { "
      }
    ],
    "src/constants/elementalCore.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 309,
        "column": 13,
        "context": "val || 0), 0),\\n\\n  if (total === 0) {\\n    return { ...DEFAULT_ELEMENTAL_PROPERTIES };\\n  }\\n\\n  return {"
      }
    ],
    "src/constants/lunar.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 38,
        "column": 5,
        "context": "'saut√©ing', 'stir-frying', 'grilling'],\\n  },\\n  // ... continues with all lunar phases\\n};\\n\\nexport con"
      }
    ],
    "src/constants/seasonalModifiers.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 74,
        "column": 2,
        "context": "gns to the seasonal modifiers for direct access\\n  ...ZODIAC_MODIFIERS\\n};\\n\\n// Influence of seasonal f"
      }
    ],
    "src/constants/systemDefaults.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 752,
        "column": 64,
        "context": "faultObject || []).map(item => cloneDefault(item)) as unknown as T;\\n  }\\n\\n  const cloned = {} as T;\\n "
      }
    ],
    "src/constants/typeDefaults.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 108,
        "column": 2,
        "context": "DefaultAlchemicalState: AlchemicalStateType = {\\n  ...BalancedAlchemicalProperties;\\n  ...BalancedElem"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 109,
        "column": 2,
        "context": "tateType = {\\n  ...BalancedAlchemicalProperties;\\n  ...BalancedElementalProperties\\n} as const;\\n\\n/**\\n *"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 117,
        "column": 2,
        "context": "hemicalResult: CompleteAlchemicalResultType = {\\n  ...DefaultAlchemicalState;\\n  ...DefaultThermodynam"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 118,
        "column": 2,
        "context": "icalResultType = {\\n  ...DefaultAlchemicalState;\\n  ...DefaultThermodynamicMetrics\\n} as const;\\n\\n/**\\n *"
      }
    ],
    "src/context/AstrologicalContext.tsx": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 123,
        "column": 27,
        "context": "lculateChakraEnergies(\\n        elementalProperties as unknown as Record<string, number>,\\n      );\\n\\n "
      }
    ],
    "src/context/CurrentChartContext.tsx": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 177,
        "column": 32,
        "context": "null);\\n\\n    try {\\n      log.info('Refreshing chart...');\\n\\n      // Use alchemicalPositions if availa"
      }
    ],
    "src/context/UnifiedContext.tsx": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 48,
        "column": 52,
        "context": "  logger.info('UnifiedContext: Refreshing all data...');\\n\\n    try {\\n      // 1. Fetch Astrological D"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 110,
        "column": 24,
        "context": "        positionsForRecs,\\n        ingredientsArray as unknown as UnifiedIngredient[],\\n        cookin"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 111,
        "column": 27,
        "context": "s UnifiedIngredient[],\\n        cookingMethodsArray as unknown as CookingMethod[],\\n      );\\n      set"
      }
    ],
    "src/contexts/AlchemicalContext/provider.tsx": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 87,
        "column": 8,
        "context": "Preserve any additional properties safely\\n        ...position,\\n      };\\n    }\\n  });\\n\\n  return conver"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 135,
        "column": 8,
        "context": "t state\\n      const updatedAstroState = {\\n        ...state.astrologicalState,\\n        alchemicalValu"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 169,
        "column": 50,
        "context": "      logger.debug('Refreshing planetary positions...');\\n\\n      // Use reliable hardcoded positions\\n"
      }
    ],
    "src/contexts/AlchemicalContext/reducer.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 37,
        "column": 8,
        "context": "case 'SET_SEASONAL_STATE':\\n      return {\\n        ...state,\\n        currentSeason: action.payload.se"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 44,
        "column": 8,
        "context": "SET_ELEMENTAL_PREFERENCE':\\n      return {\\n        ...state,\\n        elementalPreference: {\\n         "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 50,
        "column": 10,
        "context": ",\\n          Earth: 0,\\n          Air: 0,\\n          ...state.elementalPreference,\\n          [action.pa"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 58,
        "column": 8,
        "context": "ase 'SET_ELEMENTAL_STATE':\\n      return {\\n        ...state;\\n        elementalState: action.payload,\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 65,
        "column": 8,
        "context": " case 'SET_ZODIAC_ENERGY':\\n      return {\\n        ...state;\\n        zodiacEnergy: action.payload,\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 77,
        "column": 8,
        "context": "  case 'SET_LUNAR_ENERGY':\\n      return {\\n        ...state;\\n        lunarEnergy: action.payload,\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 89,
        "column": 8,
        "context": "se 'SET_PLANETARY_ENERGY':\\n      return {\\n        ...state;\\n        planetaryEnergy: action.payload,"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 101,
        "column": 8,
        "context": " 'SET_ASTROLOGICAL_STATE':\\n      return {\\n        ...state;\\n        astrologicalState: {\\n          c"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 108,
        "column": 10,
        "context": "        activePlanets: ['sun', 'moon'],\\n          ...(action.payload && typeof action.payload === 'o"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 115,
        "column": 8,
        "context": " };\\n\\n    case 'SET_ERROR':\\n      return {\\n        ...state;\\n        error: true,\\n        errorMessag"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 118,
        "column": 17,
        "context": "Message: action.payload.message,\\n        errors: [...state.errors, action.payload.message],\\n        "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 124,
        "column": 8,
        "context": ";\\n\\n    case 'CLEAR_ERROR':\\n      return {\\n        ...state;\\n        error: false,\\n        errorMessa"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 132,
        "column": 8,
        "context": " };\\n\\n    case 'ADD_ERROR':\\n      return {\\n        ...state;\\n        errors: [...state.errors, action"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 133,
        "column": 17,
        "context": "      return {\\n        ...state;\\n        errors: [...state.errors, action.payload],\\n        lastUpda"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 139,
        "column": 8,
        "context": "\\n\\n    case 'UPDATE_STATE':\\n      return {\\n        ...state;\\n        ...action.payload;\\n        lastU"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 140,
        "column": 8,
        "context": "_STATE':\\n      return {\\n        ...state;\\n        ...action.payload;\\n        lastUpdated: new Date()"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 146,
        "column": 8,
        "context": "e 'SET_ALCHEMICAL_VALUES':\\n      return {\\n        ...state;\\n        alchemicalValues: action.payload"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 153,
        "column": 8,
        "context": "   case 'SET_LUNAR_PHASE':\\n      return {\\n        ...state;\\n        lunarPhase: action.payload,\\n    "
      }
    ],
    "src/contexts/ChartContext/provider.tsx": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`<svg width='300' height='300' viewBox='0 0 300 300'>,\n        <circle cx='150' cy='150' r='140' fill='none' stroke='#333' stroke-width='1'/>;\n        <text x='150' y='20' text-anchor='middle'>Current Chart</text>;\n        ${Object.entries(formattedPlanets)\n          .map(([planet, planetInfo], index) => {\n            const angle = (index * 30) % 360;\n            const x = 150 + 120 * Math.cos((angle * Math.PI) / 180);\n            const y = 150 + 120 * Math.sin((angle * Math.PI) / 180);\n            return `<text x='${x}' y='${y}",
        "line": 194,
        "column": 18,
        "context": " ascendantData.sign || 'Libra',\\n      svgContent: `<svg width='300' height='300' viewBox='0 0 300 30"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`<svg width='300' height='300' viewBox='0 0 300 300'>,\n        <circle cx='150' cy='150' r='140' fill='none' stroke='#333' stroke-width='1'/>;\n        <text x='150' y='20' text-anchor='middle'>Current Chart</text>;\n        ${Object.entries(formattedPlanets)\n          .map(([planet, planetInfo], index) => {\n            const angle = (index * 30) % 360;\n            const x = 150 + 120 * Math.cos((angle * Math.PI) / 180);\n            const y = 150 + 120 * Math.sin((angle * Math.PI) / 180);\n            return `<text x='${x}' y='${y}' text-anchor='middle'>${planet}: ${planetInfo.sign}</text>`;\n          }",
        "line": 194,
        "column": 18,
        "context": " ascendantData.sign || 'Libra',\\n      svgContent: `<svg width='300' height='300' viewBox='0 0 300 30"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${Object.entries(formattedPlanets)\n          .map(([planet, planetInfo], index) => {\n            const angle = (index * 30) % 360;\n            const x = 150 + 120 * Math.cos((angle * Math.PI) / 180);\n            const y = 150 + 120 * Math.sin((angle * Math.PI) / 180);\n            return `<text x='${",
        "line": 197,
        "column": 8,
        "context": "ext-anchor='middle'>Current Chart</text>;\\n        ${Object.entries(formattedPlanets)\\n          .map("
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 117,
        "column": 32,
        "context": "null);\\n\\n    try {\\n      log.info('Refreshing chart...');\\n\\n      // Use alchemicalPositions if availa"
      }
    ],
    "src/contexts/PopupContext/provider.tsx": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 88,
        "column": 26,
        "context": " season\\n      }\\n    };\\n\\n    setPopups(current => [...current, newPopup]);\\n\\n    // Handle animation t"
      }
    ],
    "src/contexts/UserContext/index.tsx": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 21,
        "column": 47,
        "context": " {\\n    return { userId: profile.userId || 'mock', ...profile } as UserProfile;\\n  },\\n};\\n\\ninterface Us"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 69,
        "column": 8,
        "context": "ile = await userService.saveUserProfile({\\n        ...data,\\n        userId: currentUser.userId,\\n     "
      }
    ],
    "src/data/cooking/index.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 77,
        "column": 23,
        "context": "with base elemental effect\\n  const baseEffect = { ...methodData.elementalEffect };\\n\\n  // Apply durat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 203,
        "column": 38,
        "context": "  })\\n    })\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n}\\n\\n/**\\n * Get cookin"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 31,
        "column": 45,
        "context": "=> {\\n  const methodData = allCookingMethods[method as unknown as keyof typeof allCookingMethods];\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 71,
        "column": 45,
        "context": "=> {\\n  const methodData = allCookingMethods[method as unknown as keyof typeof allCookingMethods];\\n  "
      }
    ],
    "src/data/cooking/methods/dry/frying.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 413,
        "column": 3,
        "context": "rimary: 'Fire',\\n      secondary: 'Earth'\\n    }\\n  } as unknown as Record<string, Record<string, strin"
      }
    ],
    "src/data/cooking/methods/index.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 16,
        "column": 2,
        "context": "tegories\\n */\\nexport const allCookingMethods = {\\n  ...dryCookingMethods;\\n  ...wetCookingMethods;\\n  .."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 17,
        "column": 2,
        "context": "t allCookingMethods = {\\n  ...dryCookingMethods;\\n  ...wetCookingMethods;\\n  ...molecularCookingMethods"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 18,
        "column": 2,
        "context": "  ...dryCookingMethods;\\n  ...wetCookingMethods;\\n  ...molecularCookingMethods;\\n  ...traditionalCookin"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 19,
        "column": 2,
        "context": "etCookingMethods;\\n  ...molecularCookingMethods;\\n  ...traditionalCookingMethods;\\n  ...rawCookingMetho"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 20,
        "column": 2,
        "context": "CookingMethods;\\n  ...traditionalCookingMethods;\\n  ...rawCookingMethods;\\n  // Add other method catego"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 22,
        "column": 2,
        "context": "other method categories as they are implemented\\n  ...transformationMethods\\n};\\n\\n/**\\n * Get cooking me"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 37,
        "column": 38,
        "context": "gn);\\n    })\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\n/**\\n * Get cooki"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 56,
        "column": 38,
        "context": "old;\\n    })\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\n/**\\n * Get cooki"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 75,
        "column": 38,
        "context": "   )\\n    })\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\n/**\\n * Get cooki"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 93,
        "column": 38,
        "context": "   )\\n    })\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\n// Export indivi"
      }
    ],
    "src/data/cooking/methods/template.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 29,
        "column": 54,
        "context": "favorableZodiac: ['zodiac1', 'zodiac2', 'zodiac3'] as unknown as any[], // Zodiac signs that enhance"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 30,
        "column": 56,
        "context": "favorableZodiac: ['zodiac4', 'zodiac5', 'zodiac6'] as unknown as any[], // Zodiac signs that diminis"
      }
    ],
    "src/data/cooking/methods/transformation/smoking.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 64,
        "column": 1,
        "context": "d cancer risk',\\n    'Often high in sodium',\\n  ],\\n} as unknown as CookingMethodData;\\n"
      }
    ],
    "src/data/cooking/methods/wet/braising.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 210,
        "column": 3,
        "context": "ted gregsEnergy: heat - (entropy * reactivity)\\n  } as unknown as ThermodynamicProperties,\\n\\n  // Addi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 350,
        "column": 1,
        "context": "ooking process to preserve brightness'\\n    ]\\n  }\\n} as unknown as CookingMethodData;\\n"
      }
    ],
    "src/data/cooking/methods/wet/poaching.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 248,
        "column": 3,
        "context": "ted gregsEnergy: heat - (entropy * reactivity)\\n  } as unknown as ThermodynamicProperties,\\n\\n  // Addi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 413,
        "column": 1,
        "context": " aromatics for visual and flavor connection'\\n  }\\n} as unknown as CookingMethodData;\\n"
      }
    ],
    "src/data/cooking/methods/wet/sous-vide.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 156,
        "column": 3,
        "context": "ted gregsEnergy: heat - (entropy * reactivity)\\n  } as unknown as ThermodynamicProperties,\\n\\n  // Addi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 263,
        "column": 1,
        "context": "thod as alternative to vacuum sealing'\\n    ]\\n  }\\n} as unknown as CookingMethodData;\\n"
      }
    ],
    "src/data/cooking/methods/wet/stewing.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 169,
        "column": 3,
        "context": "ted gregsEnergy: heat - (entropy * reactivity)\\n  } as unknown as ThermodynamicProperties,\\n\\n  // Addi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 355,
        "column": 1,
        "context": "ally managed through addition timing.'\\n    }\\n  }\\n} as unknown as CookingMethodData;\\n"
      }
    ],
    "src/data/cuisineFlavorProfiles.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 477,
        "column": 28,
        "context": "me-vegetarian']\\n  },\\n\\n  // More cuisines as needed...\\n};\\n\\n/**\\n * Calculate match between recipe's fl"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 611,
        "column": 10,
        "context": ";\\n\\n  // Combine and sort by match score\\n  return [...results, ...regionalResults]\\n    .sort((a, b) ="
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 611,
        "column": 22,
        "context": "ine and sort by match score\\n  return [...results, ...regionalResults]\\n    .sort((a, b) => b.matchSco"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 652,
        "column": 4,
        "context": " // Fusion suggestions\\n  const techniques = [\\n    ...new Set([\\n      ...profile1.signatureTechniques"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 653,
        "column": 6,
        "context": "ons\\n  const techniques = [\\n    ...new Set([\\n      ...profile1.signatureTechniques.slice(0, 2),\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 654,
        "column": 6,
        "context": "..profile1.signatureTechniques.slice(0, 2),\\n      ...profile2.signatureTechniques.slice(0, 2)\\n    ])"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 659,
        "column": 4,
        "context": "ce(0, 2)\\n    ])\\n  ];\\n\\n  const ingredients = [\\n    ...new Set([\\n      ...profile1.signatureIngredient"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 660,
        "column": 6,
        "context": ";\\n\\n  const ingredients = [\\n    ...new Set([\\n      ...profile1.signatureIngredients.slice(0, 3),\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 661,
        "column": 6,
        "context": ".profile1.signatureIngredients.slice(0, 3),\\n      ...profile2.signatureIngredients.slice(0, 3)\\n    ]"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 813,
        "column": 14,
        "context": "cipes\\n            .map(recipe => ({\\n              ...recipe;\\n              matchScore: 0.85 + Math.r"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 837,
        "column": 16,
        "context": "].all.map((recipe: unknown) => ({\\n                ...(recipe as object);\\n                cuisine: cu"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 844,
        "column": 30,
        "context": "              }));\\n\\n              allRecipes.push(...mealRecipes);\\n            }\\n\\n            // Als"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 859,
        "column": 18,
        "context": "on].map((recipe: unknown) => ({\\n                  ...(recipe as object);\\n                  cuisine: "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 867,
        "column": 32,
        "context": "            }));\\n\\n                allRecipes.push(...seasonalRecipes);\\n              }\\n            }"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 904,
        "column": 14,
        "context": "cipes\\n            .map(recipe => ({\\n              ...recipe;\\n              matchScore: 0.8 + Math.ra"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1045,
        "column": 14,
        "context": "            }\\n\\n            return {\\n              ...(recipe );\\n              matchScore: finalScore"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1052,
        "column": 14,
        "context": ", scoreError);\\n            return {\\n              ...(recipe );\\n              matchScore: 0.5,\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1066,
        "column": 6,
        "context": "ional, then others\\n    const allMatches = [\\n      ...exactCuisineMatches.map(recipe => ({\\n        .."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1067,
        "column": 8,
        "context": "  ...exactCuisineMatches.map(recipe => ({\\n        ...(recipe );\\n        matchScore: 0.9 + Math.rando"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1071,
        "column": 6,
        "context": ".9 + Math.random() * 0.1) * 100)\\n      })),\\n      ...regionalMatches.map(recipe => ({\\n        ...(re"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1072,
        "column": 8,
        "context": "      ...regionalMatches.map(recipe => ({\\n        ...(recipe );\\n        matchScore: 0.8 + Math.rando"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1076,
        "column": 6,
        "context": ".8 + Math.random() * 0.1) * 100)\\n      })),\\n      ...scoredOtherRecipes.slice(0, limit - exactCuisin"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1229,
        "column": 8,
        "context": "   : 0.2\\n          : 0.2;\\n\\n      return {\\n        ...recipe;\\n        score: nameSimilarity\\n      };\\n"
      }
    ],
    "src/data/cuisines/greek.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1116,
        "column": 11,
        "context": "  ]\\n    },\\n    dessert: {\\n      all: [\\n        // ... dessert dishes\\n      ]\\n    }\\n  },\\n  traditiona"
      }
    ],
    "src/data/cuisines/index.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 73,
        "column": 25,
        "context": "<Cuisine>): Cuisine => {\\n  if (!cuisine) return { ...baseCuisine };\\n\\n  // Helper to combine 'all' re"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 87,
        "column": 15,
        "context": "? mealData.all : [];\\n\\n    return {\\n      spring: [...(Array.isArray(mealData.spring) ? mealData.spri"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 87,
        "column": 75,
        "context": "isArray(mealData.spring) ? mealData.spring : []), ...allRecipes],\\n      summer: [...(Array.isArray(m"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 88,
        "column": 15,
        "context": "Data.spring : []), ...allRecipes],\\n      summer: [...(Array.isArray(mealData.summer) ? mealData.summ"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 88,
        "column": 75,
        "context": "isArray(mealData.summer) ? mealData.summer : []), ...allRecipes],\\n      autumn: [...(Array.isArray(m"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 89,
        "column": 15,
        "context": "Data.summer : []), ...allRecipes],\\n      autumn: [...(Array.isArray(mealData.autumn) ? mealData.autu"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 89,
        "column": 75,
        "context": "isArray(mealData.autumn) ? mealData.autumn : []), ...allRecipes],\\n      winter: [...(Array.isArray(m"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 90,
        "column": 15,
        "context": "Data.autumn : []), ...allRecipes],\\n      winter: [...(Array.isArray(mealData.winter) ? mealData.wint"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 90,
        "column": 75,
        "context": "isArray(mealData.winter) ? mealData.winter : []), ...allRecipes],\\n    };\\n  };\\n\\n  // Ensure the cuisi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 121,
        "column": 43,
        "context": "ies ||\\n      (cuisine as any).elementalState || { ...baseCuisine.elementalProperties }, // For backw"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 133,
        "column": 40,
        "context": "uisine>),\\n  Chinese: processCuisineRecipes(chinese as unknown as Partial<Cuisine>),\\n  French: proces"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 140,
        "column": 40,
        "context": "uisine>),\\n  Mexican: processCuisineRecipes(mexican as unknown as Partial<Cuisine>),\\n  'Middle Easter"
      }
    ],
    "src/data/cuisines.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 78,
        "column": 4,
        "context": " {\\n  const cuisineData = cuisine ;\\n  return {\\n    ...cuisineData;\\n    // Convert elementalProperties"
      }
    ],
    "src/data/enhancedDishes.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 57,
        "column": 4,
        "context": ": string, originalDish: unknown) {\\n  return {\\n    ...originalDish,\\n    properties: getDishProperties"
      }
    ],
    "src/data/ingredients/fruits/index.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 13,
        "column": 2,
        "context": "g, IngredientMapping> = fixIngredientMappings({\\n  ...citrus;\\n  ...berries;\\n  ...tropical;\\n  ...stone"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 14,
        "column": 2,
        "context": "Mapping> = fixIngredientMappings({\\n  ...citrus;\\n  ...berries;\\n  ...tropical;\\n  ...stoneFruit;\\n  ...p"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 15,
        "column": 2,
        "context": "IngredientMappings({\\n  ...citrus;\\n  ...berries;\\n  ...tropical;\\n  ...stoneFruit;\\n  ...pome;\\n  ...melo"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 16,
        "column": 2,
        "context": "ngs({\\n  ...citrus;\\n  ...berries;\\n  ...tropical;\\n  ...stoneFruit;\\n  ...pome;\\n  ...melons\\n});\\n\\n// Expo"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 17,
        "column": 2,
        "context": ";\\n  ...berries;\\n  ...tropical;\\n  ...stoneFruit;\\n  ...pome;\\n  ...melons\\n});\\n\\n// Export individual cat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 18,
        "column": 2,
        "context": "ies;\\n  ...tropical;\\n  ...stoneFruit;\\n  ...pome;\\n  ...melons\\n});\\n\\n// Export individual categories\\nexp"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 32,
        "column": 38,
        "context": "'');\\n    })\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\nexport const get"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 43,
        "column": 38,
        "context": "'));\\n    })\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\nexport const get"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 54,
        "column": 38,
        "context": "'')]\\n    })\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\nexport const fin"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 97,
        "column": 38,
        "context": "'));\\n    })\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\nexport const get"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 118,
        "column": 38,
        "context": "   }\\n    })\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\n// Add new valid"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 217,
        "column": 10,
        "context": " 1);\\n        maxCategorySize: Math.max(\\n          ...testCategories.map(cat => Number(Object.keys(su"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 220,
        "column": 10,
        "context": "  ),\\n        minCategorySize: Math.min(\\n          ...testCategories.map(cat => Number(Object.keys(su"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 225,
        "column": 12,
        "context": "e:\\n          1 -\\n          (Math.max(\\n            ...testCategories.map(cat => Number(Object.keys(su"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 228,
        "column": 14,
        "context": "          ) -\\n            Math.min(\\n              ...testCategories.map(cat => Number(Object.keys(su"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 317,
        "column": 10,
        "context": "gth;\\n        maxSeasonalSize: Math.max(\\n          ...testSeasons.map(season => Object.keys(seasonalF"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 320,
        "column": 10,
        "context": "  ),\\n        minSeasonalSize: Math.min(\\n          ...testSeasons.map(season => Object.keys(seasonalF"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 324,
        "column": 20,
        "context": "easonalBalance:\\n          1 -\\n          (Math.max(...testSeasons.map(season => Object.keys(seasonalF"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 325,
        "column": 21,
        "context": "nalFunc(season)).length)) -;\\n            Math.min(...testSeasons.map(season => Object.keys(seasonalF"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 416,
        "column": 10,
        "context": ";\\n        maxPreparationSize: Math.max(\\n          ...testMethods.map(method => Object.keys(preparati"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 419,
        "column": 10,
        "context": ",\\n        minPreparationSize: Math.min(\\n          ...testMethods.map(method => Object.keys(preparati"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 423,
        "column": 20,
        "context": "arationBalance:\\n          1 -\\n          (Math.max(...testMethods.map(method => Object.keys(preparati"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 424,
        "column": 21,
        "context": "ionFunc(method)).length)) -;\\n            Math.min(...testMethods.map(method => Object.keys(preparati"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 502,
        "column": 10,
        "context": "ength;\\n        maxMethodSize: Math.max(\\n          ...testMethods.map(method => Object.keys(getFruits"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 505,
        "column": 10,
        "context": "    ),\\n        minMethodSize: Math.min(\\n          ...testMethods.map(method => Object.keys(getFruits"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 510,
        "column": 12,
        "context": "e:\\n          1 -\\n          (Math.max(\\n            ...testMethods.map(method => Object.keys(getFruits"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 513,
        "column": 14,
        "context": "          ) -\\n            Math.min(\\n              ...testMethods.map(method => Object.keys(getFruits"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 597,
        "column": 10,
        "context": "length,\\n        maxIntegrity: Math.max(\\n          ...testMethods.map(method => {\\n            const r"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 603,
        "column": 10,
        "context": "     ),\\n        minIntegrity: Math.min(\\n          ...testMethods.map(method => {\\n            const r"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 611,
        "column": 12,
        "context": "e:\\n          1 -\\n          (Math.max(\\n            ...testMethods.map(method => {\\n              const"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 617,
        "column": 14,
        "context": "          ) -\\n            Math.min(\\n              ...testMethods.map(method => {\\n                con"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 698,
        "column": 10,
        "context": ".length;\\n        maxTypeSize: Math.max(\\n          ...fruitTypes.map(type => Object.keys(getFruitsByS"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 701,
        "column": 10,
        "context": "      ),\\n        minTypeSize: Math.min(\\n          ...fruitTypes.map(type => Object.keys(getFruitsByS"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 705,
        "column": 20,
        "context": "   typeBalance:\\n          1 -\\n          (Math.max(...fruitTypes.map(type => Object.keys(getFruitsByS"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 706,
        "column": 21,
        "context": "bCategory(type)).length)) -;\\n            Math.min(...fruitTypes.map(type => Object.keys(getFruitsByS"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 795,
        "column": 33,
        "context": "leFruits.length;\\n        maxConnections: Math.max(...sampleFruits.map(fruit => compatibilityFunc(fru"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 796,
        "column": 33,
        "context": "fruit).length)),\\n        minConnections: Math.min(...sampleFruits.map(fruit => compatibilityFunc(fru"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 974,
        "column": 18,
        "context": "  planetaryBalance:\\n        1 -\\n        (Math.max(...astrologicalAnalysis.planetaryAnalysis.map(p =>"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 975,
        "column": 19,
        "context": "sis.map(p => p.fruitCount)) -;\\n          Math.min(...astrologicalAnalysis.planetaryAnalysis.map(p =>"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 979,
        "column": 18,
        "context": "  elementalBalance:\\n        1 -\\n        (Math.max(...astrologicalAnalysis.elementalAnalysis.map(e =>"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 980,
        "column": 19,
        "context": "sis.map(e => e.fruitCount)) -;\\n          Math.min(...astrologicalAnalysis.elementalAnalysis.map(e =>"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1188,
        "column": 6,
        "context": "ionStructure.validationBalance = Math.min(;\\n      ...[\\n        validationStructure.corePropertyCover"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 29,
        "column": 29,
        "context": "er(([_, value]) => {\\n      const fruitData = value as unknown as any;\\n      return String(fruitData."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 39,
        "column": 29,
        "context": "er(([_, value]) => {\\n      const fruitData = value as unknown as any;\\n      const seasonData = fruit"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 50,
        "column": 29,
        "context": "er(([_, value]) => {\\n      const fruitData = value as unknown as any;\\n      const preparationData = "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 61,
        "column": 25,
        "context": "  if (!fruit) return [];\\n  const fruitData = fruit as unknown as any;\\n  const affinitiesData = fruit"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 92,
        "column": 29,
        "context": "er(([_, value]) => {\\n      const fruitData = value as unknown as any;\\n      const astroProfile = fru"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 106,
        "column": 29,
        "context": "er(([_, value]) => {\\n      const fruitData = value as unknown as any;\\n      const astroProfile = fru"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 130,
        "column": 29,
        "context": "lementalAffinity'];\\n\\n  const profileData = profile as unknown as any;\\n  return requiredProperties.ev"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 150,
        "column": 35,
        "context": "storage'\\n  ];\\n\\n  const ingredientData = ingredient as unknown as any;\\n  return requiredProperties.ev"
      }
    ],
    "src/data/ingredients/grains/index.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 10,
        "column": 2,
        "context": "g, IngredientMapping> = fixIngredientMappings({\\n  ...wholeGrains,\\n  ...refinedGrains,\\n  ...pseudoGra"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 11,
        "column": 2,
        "context": "ng> = fixIngredientMappings({\\n  ...wholeGrains,\\n  ...refinedGrains,\\n  ...pseudoGrains,\\n});\\n\\n// Fix t"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 12,
        "column": 2,
        "context": "appings({\\n  ...wholeGrains,\\n  ...refinedGrains,\\n  ...pseudoGrains,\\n});\\n\\n// Fix the raw grains object"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 17,
        "column": 2,
        "context": "ngredient mapping structure\\nconst rawGrains = {\\n  ...wholeGrains,\\n  ...refinedGrains,\\n  ...pseudoGra"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 18,
        "column": 2,
        "context": "structure\\nconst rawGrains = {\\n  ...wholeGrains,\\n  ...refinedGrains,\\n  ...pseudoGrains,\\n};\\n\\n// Apply "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 19,
        "column": 2,
        "context": "rains = {\\n  ...wholeGrains,\\n  ...refinedGrains,\\n  ...pseudoGrains,\\n};\\n\\n// Apply the fix to ensure al"
      }
    ],
    "src/data/ingredients/grains/pseudoGrains/index.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 11,
        "column": 2,
        "context": "doGrains: Record<string, IngredientMapping> = {\\n  ...quinoa,\\n  ...amaranth,\\n  ...buckwheat,\\n  ...chi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 12,
        "column": 2,
        "context": "ord<string, IngredientMapping> = {\\n  ...quinoa,\\n  ...amaranth,\\n  ...buckwheat,\\n  ...chia,\\n  ...flaxs"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 13,
        "column": 2,
        "context": "redientMapping> = {\\n  ...quinoa,\\n  ...amaranth,\\n  ...buckwheat,\\n  ...chia,\\n  ...flaxseed,\\n};\\n\\n// Exp"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 14,
        "column": 2,
        "context": "= {\\n  ...quinoa,\\n  ...amaranth,\\n  ...buckwheat,\\n  ...chia,\\n  ...flaxseed,\\n};\\n\\n// Export individual p"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 15,
        "column": 2,
        "context": "inoa,\\n  ...amaranth,\\n  ...buckwheat,\\n  ...chia,\\n  ...flaxseed,\\n};\\n\\n// Export individual pseudo grain"
      }
    ],
    "src/data/ingredients/herbs/freshHerbs.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 282,
        "column": 35,
        "context": "']\\n    }\\n  },\\n\\n  // More herbs would be added here...\\n};\\n\\n// ‚úÖ Pattern MM-1: Type assertion for Zodi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 287,
        "column": 15,
        "context": "eshHerbs = fixIngredientMappings(,\\n  rawFreshHerbs as unknown as Record<string, Partial<IngredientMa"
      }
    ],
    "src/data/ingredients/herbs/index.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 88,
        "column": 4,
        "context": "ops,\\n    category: properties.category || '',\\n    ...herbValues;\\n    ...properties\\n  } as Ingredient"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 89,
        "column": 4,
        "context": "properties.category || '',\\n    ...herbValues;\\n    ...properties\\n  } as IngredientMapping;\\n}\\n\\n// Comb"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 95,
        "column": 2,
        "context": "g, IngredientMapping> = fixIngredientMappings({\\n  ...freshHerbs;\\n  ...driedHerbs;\\n  ...aromaticHerbs"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 96,
        "column": 2,
        "context": "ing> = fixIngredientMappings({\\n  ...freshHerbs;\\n  ...driedHerbs;\\n  ...aromaticHerbs;\\n  ...medicinalH"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 97,
        "column": 2,
        "context": "entMappings({\\n  ...freshHerbs;\\n  ...driedHerbs;\\n  ...aromaticHerbs;\\n  ...medicinalHerbs;\\n\\n  // Custo"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 98,
        "column": 2,
        "context": "reshHerbs;\\n  ...driedHerbs;\\n  ...aromaticHerbs;\\n  ...medicinalHerbs;\\n\\n  // Custom herbs\\n  basil: cre"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 321,
        "column": 2,
        "context": "export const allHerbs = fixIngredientMappings({\\n  ...freshHerbs;\\n  ...driedHerbs;\\n  ...aromaticHerbs"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 322,
        "column": 2,
        "context": "erbs = fixIngredientMappings({\\n  ...freshHerbs;\\n  ...driedHerbs;\\n  ...aromaticHerbs;\\n  ...medicinalH"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 323,
        "column": 2,
        "context": "entMappings({\\n  ...freshHerbs;\\n  ...driedHerbs;\\n  ...aromaticHerbs;\\n  ...medicinalHerbs\\n});\\n\\n// Expo"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 324,
        "column": 2,
        "context": "reshHerbs;\\n  ...driedHerbs;\\n  ...aromaticHerbs;\\n  ...medicinalHerbs\\n});\\n\\n// Export a list of herb na"
      }
    ],
    "src/data/ingredients/index.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 38,
        "column": 2,
        "context": "/vinegars/vinegars';\\n\\nexport const proteins = {\\n  ...meatsData;\\n  ...poultryData;\\n  ...seafoodData;\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 39,
        "column": 2,
        "context": "rs';\\n\\nexport const proteins = {\\n  ...meatsData;\\n  ...poultryData;\\n  ...seafoodData;\\n  ...plantBasedD"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 40,
        "column": 2,
        "context": " proteins = {\\n  ...meatsData;\\n  ...poultryData;\\n  ...seafoodData;\\n  ...plantBasedData\\n};\\n\\n// Calcula"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 41,
        "column": 2,
        "context": ".meatsData;\\n  ...poultryData;\\n  ...seafoodData;\\n  ...plantBasedData\\n};\\n\\n// Calculate elemental prope"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 197,
        "column": 4,
        "context": "  whenCooked: { Fire: 0.1, Air: 0.05 }\\n    },\\n    ...ingredientData\\n  });\\n\\n  return standardized as "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 255,
        "column": 10,
        "context": "string, number]);\\n\\n        acc[key] = {\\n          ...processedIngredient;\\n          alchemicalProper"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 283,
        "column": 2,
        "context": "picesCollection = processIngredientCollection({\\n  ...spices;\\n  ...warmSpices\\n});\\nexport const _veget"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 284,
        "column": 2,
        "context": "on = processIngredientCollection({\\n  ...spices;\\n  ...warmSpices\\n});\\nexport const _vegetablesCollecti"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 381,
        "column": 32,
        "context": "ts is initialized\\nexport const ingredientsMap = { ...allIngredients };\\n\\n// Function to get all ingre"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 70,
        "column": 42,
        "context": "ailable\\n  const ingredientDataObj = ingredientData as unknown as any;\\n  if (ingredientDataObj.astrol"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 184,
        "column": 35,
        "context": "the ingredient\\n  const ingredientData = ingredient as unknown as any;\\n  const standardized = standar"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 189,
        "column": 20,
        "context": "calculateElementalProperties(\\n      ingredientData as unknown as Ingredient | UnifiedIngredient,\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 214,
        "column": 29,
        "context": "chemicalProperties(;\\n          processedIngredient as unknown as Ingredient,\\n        ),\\n        cons"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 218,
        "column": 31,
        "context": "  alchemicalProps,\\n          ((processedIngredient as unknown as any).elementalProperties as Element"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 228,
        "column": 31,
        "context": "gredientModality(;\\n          ((processedIngredient as unknown as any).qualities as string[]) || [],\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 229,
        "column": 31,
        "context": "s string[]) || [],\\n          ((processedIngredient as unknown as any).elementalProperties as Element"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 239,
        "column": 30,
        "context": " = Object.entries(;\\n          (processedIngredient as unknown as any).elementalProperties || {\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 261,
        "column": 58,
        "context": "  astrologicalCorrespondence: (processedIngredient as unknown as any).astrologicalCorrespondence || "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 263,
        "column": 32,
        "context": "gRecommendations:\\n            (processedIngredient as unknown as any).pairingRecommendations || unde"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 264,
        "column": 46,
        "context": "ed,\\n          celestialBoost: (processedIngredient as unknown as any).celestialBoost || undefined,\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 266,
        "column": 32,
        "context": "anetaryInfluence:\\n            (processedIngredient as unknown as any).planetaryInfluence || undefine"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 267,
        "column": 9,
        "context": " as any).planetaryInfluence || undefined\\n        } as unknown as Ingredient;\\n      } catch (error) {"
      }
    ],
    "src/data/ingredients/oils/index.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 17,
        "column": 36,
        "context": "= 'cooking');\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\nexport const _finis"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 21,
        "column": 36,
        "context": "'finishing');\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\nexport const _suppl"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 25,
        "column": 36,
        "context": "supplement');\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\nexport const _speci"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 35,
        "column": 36,
        "context": "lement');\\n  )\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\n// Export by elemen"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 45,
        "column": 36,
        "context": " 'Fire'),\\n  )\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\nexport const _water"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 54,
        "column": 36,
        "context": "'Water'),\\n  )\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\nexport const _earth"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 63,
        "column": 36,
        "context": "'Earth'),\\n  )\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\nexport const _airOi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 72,
        "column": 36,
        "context": "= 'Air'),\\n  )\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\n// Export by culina"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 85,
        "column": 36,
        "context": "epfrying;\\n  )\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\nexport const _bakin"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 89,
        "column": 36,
        "context": "ions?.baking)\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\nexport const _dress"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 93,
        "column": 36,
        "context": "s?.dressings)\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\nexport const _nutOi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 103,
        "column": 36,
        "context": "peanut');\\n  )\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\n// For backward com"
      }
    ],
    "src/data/ingredients/proteins/index.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 15,
        "column": 2,
        "context": "g, IngredientMapping> = fixIngredientMappings({\\n  ...seafood;\\n  ...poultry;\\n  ...plantBased;\\n  ...me"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 16,
        "column": 2,
        "context": "apping> = fixIngredientMappings({\\n  ...seafood;\\n  ...poultry;\\n  ...plantBased;\\n  ...meats;\\n  ...legu"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 17,
        "column": 2,
        "context": "ngredientMappings({\\n  ...seafood;\\n  ...poultry;\\n  ...plantBased;\\n  ...meats;\\n  ...legumes;\\n  ...eggs"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 18,
        "column": 2,
        "context": "({\\n  ...seafood;\\n  ...poultry;\\n  ...plantBased;\\n  ...meats;\\n  ...legumes;\\n  ...eggs;\\n  ...dairy\\n});\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 19,
        "column": 2,
        "context": "ood;\\n  ...poultry;\\n  ...plantBased;\\n  ...meats;\\n  ...legumes;\\n  ...eggs;\\n  ...dairy\\n});\\n\\n// Export i"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 20,
        "column": 2,
        "context": "try;\\n  ...plantBased;\\n  ...meats;\\n  ...legumes;\\n  ...eggs;\\n  ...dairy\\n});\\n\\n// Export individual cate"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 21,
        "column": 2,
        "context": "lantBased;\\n  ...meats;\\n  ...legumes;\\n  ...eggs;\\n  ...dairy\\n});\\n\\n// Export individual categories\\nexpo"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 53,
        "column": 38,
        "context": "es(season))\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {} as IngredientMapping);"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 59,
        "column": 38,
        "context": "(minScore))\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {} as IngredientMapping);"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 68,
        "column": 38,
        "context": "ion);\\n    )\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {} as IngredientMapping);"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 75,
        "column": 38,
        "context": " category),\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {} as IngredientMapping);"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 83,
        "column": 38,
        "context": "hod),\\n    )\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {} as IngredientMapping);"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 93,
        "column": 38,
        "context": "sFat\\n    })\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {} as IngredientMapping);"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 380,
        "column": 38,
        "context": "bCategory),\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {} as IngredientMapping);"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 386,
        "column": 38,
        "context": "s('vegan'))\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {} as IngredientMapping);"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 280,
        "column": 41,
        "context": "]\\n} => {\\n  const protein = _proteins[_proteinName] as unknown as Ingredient;\\n  if (!protein) throw n"
      }
    ],
    "src/data/ingredients/proteins/plantBased.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 20,
        "column": 4,
        "context": "  },\\n    category: properties.category || '';\\n    ...properties\\n  };\\n}\\n\\nconst rawPlantBased: Record<"
      }
    ],
    "src/data/ingredients/seasonings/index.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 14,
        "column": 2,
        "context": "g, IngredientMapping> = fixIngredientMappings({\\n  ...spices;\\n  ...salts;\\n  ...peppers;\\n  ...herbs;\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 15,
        "column": 2,
        "context": "Mapping> = fixIngredientMappings({\\n  ...spices;\\n  ...salts;\\n  ...peppers;\\n  ...herbs;\\n  ...aromatics"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 16,
        "column": 2,
        "context": "ixIngredientMappings({\\n  ...spices;\\n  ...salts;\\n  ...peppers;\\n  ...herbs;\\n  ...aromatics\\n});\\n\\n// Exp"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 17,
        "column": 2,
        "context": "ppings({\\n  ...spices;\\n  ...salts;\\n  ...peppers;\\n  ...herbs;\\n  ...aromatics\\n});\\n\\n// Export individual"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 18,
        "column": 2,
        "context": "..spices;\\n  ...salts;\\n  ...peppers;\\n  ...herbs;\\n  ...aromatics\\n});\\n\\n// Export individual categories,"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 52,
        "column": 6,
        "context": "e((acc, [key, value]) => {\\n    acc[key] = {\\n      ...value;\\n      category: 'seasoning',\\n      subCa"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 67,
        "column": 38,
        "context": " category),\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {} as IngredientMapping);"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 73,
        "column": 38,
        "context": "intensity))\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {} as IngredientMapping);"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 100,
        "column": 38,
        "context": "ng),,\\n    )\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {} as IngredientMapping);"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 114,
        "column": 29,
        "context": "s[key] = [];\\n      }\\n      combinations[key].push(...value.traditionalCombinations);\\n    }\\n  });\\n\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 124,
        "column": 38,
        "context": "s?.[phase])\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {} as IngredientMapping);"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 136,
        "column": 38,
        "context": "   ),\\n    )\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {} as IngredientMapping);"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 77,
        "column": 45,
        "context": "=> {\\n  const seasoning = seasonings[seasoningName] as unknown as Ingredient;\\n  if (!seasoning) retur"
      }
    ],
    "src/data/ingredients/seasonings/vinegars.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 16,
        "column": 4,
        "context": "  },\\n    category: properties.category || '',\\n    ...properties\\n  };\\n}\\n\\nconst rawVinegars = {\\n  rice"
      }
    ],
    "src/data/ingredients/spices/index.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 35,
        "column": 6,
        "context": "ties).reduce(\\n    (acc, [key, value]) => ({\\n      ...acc;\\n      [key]: value / (sum || 1)\\n    }),\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 62,
        "column": 6,
        "context": "yBase + Math.random() * 2))),\\n\\n    return {\\n      ...acc;\\n      [key]: {\\n        ...spice;\\n        e"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 64,
        "column": 8,
        "context": "    return {\\n      ...acc;\\n      [key]: {\\n        ...spice;\\n        elementalProperties: normalizedP"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 76,
        "column": 2,
        "context": "g, IngredientMapping> = fixIngredientMappings({\\n  ...wholeSpices;\\n  ...groundSpices;\\n  ...spiceBlend"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 77,
        "column": 2,
        "context": "ng> = fixIngredientMappings({\\n  ...wholeSpices;\\n  ...groundSpices;\\n  ...spiceBlends;\\n  cumin: {\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 78,
        "column": 2,
        "context": "Mappings({\\n  ...wholeSpices;\\n  ...groundSpices;\\n  ...spiceBlends;\\n  cumin: {\\n    name: 'cumin',\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 309,
        "column": 38,
        "context": "bCategory),\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\nexport const _ge"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 320,
        "column": 38,
        "context": "gin;\\n    })\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\nexport const _ge"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 329,
        "column": 38,
        "context": "inStrength)\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\nexport const _ge"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 386,
        "column": 38,
        "context": "od);\\n    })\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\nexport const _ge"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 396,
        "column": 38,
        "context": "ion],\\n    )\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\nexport const _ge"
      }
    ],
    "src/data/ingredients/spices/warmSpices.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 64,
        "column": 7,
        "context": "   source: 'USDA FoodData Central',\\n    },\\n    // ... rest of cinnamon properties\\n  },\\n  // ... othe"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 66,
        "column": 5,
        "context": "\\n    // ... rest of cinnamon properties\\n  },\\n  // ... other warm spices\\n};\\n\\n// Fix the ingredient ma"
      }
    ],
    "src/data/ingredients/vegetables/index.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 15,
        "column": 2,
        "context": "g, IngredientMapping> = fixIngredientMappings({\\n  ...leafyGreens;\\n  ...roots;\\n  ...cruciferous;\\n  .."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 16,
        "column": 2,
        "context": "ng> = fixIngredientMappings({\\n  ...leafyGreens;\\n  ...roots;\\n  ...cruciferous;\\n  ...nightshades;\\n  .."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 17,
        "column": 2,
        "context": "redientMappings({\\n  ...leafyGreens;\\n  ...roots;\\n  ...cruciferous;\\n  ...nightshades;\\n  ...alliums;\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 18,
        "column": 2,
        "context": "  ...leafyGreens;\\n  ...roots;\\n  ...cruciferous;\\n  ...nightshades;\\n  ...alliums;\\n  ...squash;\\n  ...st"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 19,
        "column": 2,
        "context": "  ...roots;\\n  ...cruciferous;\\n  ...nightshades;\\n  ...alliums;\\n  ...squash;\\n  ...starchyVegetables;\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 20,
        "column": 2,
        "context": "...cruciferous;\\n  ...nightshades;\\n  ...alliums;\\n  ...squash;\\n  ...starchyVegetables;\\n  ...legumes\\n})"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 21,
        "column": 2,
        "context": "s;\\n  ...nightshades;\\n  ...alliums;\\n  ...squash;\\n  ...starchyVegetables;\\n  ...legumes\\n});\\n\\n// Create "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 22,
        "column": 2,
        "context": "..alliums;\\n  ...squash;\\n  ...starchyVegetables;\\n  ...legumes\\n});\\n\\n// Create enhanced vegetables with"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 49,
        "column": 38,
        "context": "bCategory),\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\nexport const _ge"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 55,
        "column": 38,
        "context": "es(season))\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\nexport const _ge"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 63,
        "column": 38,
        "context": "hod),\\n    )\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\n\\nexport default r"
      }
    ],
    "src/data/ingredients/vegetables/leafyGreens.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 64,
        "column": 4,
        "context": "mented',\\n      'juiced',\\n      'soup',\\n    ],\\n    ...generateVegetableAttributes({\\n      water: 84,\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 349,
        "column": 4,
        "context": "ookingMethods: ['raw', 'steamed', 'saut√©ed'],\\n    ...generateVegetableAttributes({\\n      water: 91,\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 411,
        "column": 4,
        "context": "ngMethods: ['steamed', 'saut√©ed', 'braised'],\\n    ...generateVegetableAttributes({\\n      water: 87,\\n"
      }
    ],
    "src/data/ingredients/vegetables/starchy.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 198,
        "column": 22,
        "context": "g> = fixIngredientMappings(\\n  rawStarchyVegetables as unknown as Record<string, Partial<IngredientMa"
      }
    ],
    "src/data/ingredients/vinegars/consolidated_vinegars.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 221,
        "column": 13,
        "context": "entMapping> = fixIngredientMappings(\\n  rawVinegars as unknown as Record<string, Partial<IngredientMa"
      }
    ],
    "src/data/ingredients/vinegars/index.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 15,
        "column": 36,
        "context": " === 'wine');\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\nexport const _fruit"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 19,
        "column": 36,
        "context": "=== 'fruit');\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\nexport const _grain"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 23,
        "column": 36,
        "context": "=== 'grain');\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\nexport const _speci"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 35,
        "column": 36,
        "context": "'grain');\\n  )\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n"
      }
    ],
    "src/data/ingredients/vinegars/vinegars.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 315,
        "column": 2,
        "context": "rt const _allVinegars = fixIngredientMappings({\\n  ...rawVinegars,\\n  ...rawArtisanalVinegars,\\n  ...ad"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 316,
        "column": 2,
        "context": "ars = fixIngredientMappings({\\n  ...rawVinegars,\\n  ...rawArtisanalVinegars,\\n  ...additionalVinegars,\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 317,
        "column": 2,
        "context": "({\\n  ...rawVinegars,\\n  ...rawArtisanalVinegars,\\n  ...additionalVinegars,\\n});\\n\\n// Export default for "
      }
    ],
    "src/data/integrations/elementalBalance.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 27,
        "column": 15,
        "context": "|| 0), 0),\\n\\n    if (total === 0) {\\n      return { ...DEFAULT_ELEMENTAL_PROPERTIES };\\n    }\\n\\n    retu"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 32,
        "column": 8,
        "context": "EMENTS.reduce(\\n      (acc, element) => ({\\n        ...acc;\\n        [element]: (properties[element] ||"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 98,
        "column": 8,
        "context": "NTS.reduce(\\n      (status, element) => ({\\n        ...status;\\n        [element]:\\n          normalized"
      }
    ],
    "src/data/integrations/medicinalCrossReference.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 22,
        "column": 7,
        "context": ") {\\n  // Implement the function\\n  return {\\n    /* ... */\\n  };\\n}\\n"
      }
    ],
    "src/data/integrations/seasonalUsage.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 208,
        "column": 1,
        "context": " for experimental cooking',\\n      ],\\n    },\\n  },\\n} as unknown as Record<Season, unknown>;\\n\\n// Helper"
      }
    ],
    "src/data/nutritional.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 766,
        "column": 26,
        "context": "    if (dayInfluence) {\\n      focusNutrients.push(...dayInfluence.nutrientRulership);\\n      healthAr"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 767,
        "column": 23,
        "context": "luence.nutrientRulership);\\n      healthAreas.push(...dayInfluence.healthDomain);\\n      recommendedFo"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 768,
        "column": 28,
        "context": "luence.healthDomain);\\n      recommendedFoods.push(...dayInfluence.beneficialFoods);\\n    }\\n  }\\n\\n  // "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 785,
        "column": 26,
        "context": "   if (hourInfluence) {\\n      focusNutrients.push(...hourInfluence.nutrientRulership);\\n      healthA"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 786,
        "column": 23,
        "context": "luence.nutrientRulership);\\n      healthAreas.push(...hourInfluence.healthDomain);\\n      recommendedF"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 787,
        "column": 28,
        "context": "luence.healthDomain);\\n      recommendedFoods.push(...hourInfluence.beneficialFoods);\\n    }\\n  }\\n\\n  //"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 802,
        "column": 21,
        "context": "tes\\n  return {\\n    elements,\\n    focusNutrients: [...new Set(focusNutrients)],\\n    healthAreas: [..."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 803,
        "column": 18,
        "context": ": [...new Set(focusNutrients)],\\n    healthAreas: [...new Set(healthAreas)],\\n    recommendedFoods: [."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 804,
        "column": 23,
        "context": "[...new Set(healthAreas)],\\n    recommendedFoods: [...new Set(recommendedFoods)]\\n  };\\n}\\n\\n/**\\n * Get n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 825,
        "column": 26,
        "context": "];\\n    if (influence) {\\n      focusNutrients.push(...influence.nutrientRulership);\\n      healthAreas"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 826,
        "column": 23,
        "context": "luence.nutrientRulership);\\n      healthAreas.push(...influence.healthDomain);\\n      recommendedFoods"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 827,
        "column": 28,
        "context": "luence.healthDomain);\\n      recommendedFoods.push(...influence.beneficialFoods);\\n    }\\n  });\\n\\n  // R"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 833,
        "column": 21,
        "context": "Remove duplicates\\n  return {\\n    focusNutrients: [...new Set(focusNutrients)],\\n    healthAreas: [..."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 834,
        "column": 18,
        "context": ": [...new Set(focusNutrients)],\\n    healthAreas: [...new Set(healthAreas)],\\n    recommendedFoods: [."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 835,
        "column": 23,
        "context": "[...new Set(healthAreas)],\\n    recommendedFoods: [...new Set(recommendedFoods)]\\n  };\\n}\\n\\n/**\\n * Get s"
      }
    ],
    "src/data/planetaryFlavorProfiles.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 438,
        "column": 9,
        "context": "ofiles)[typeof planet]['flavorProfiles']\\n        ] as unknown as number,\\n        if (planetaryEmphas"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 455,
        "column": 60,
        "context": "recipeElements = recipeFlavors.elementalProperties as unknown as Record<string, number>,\\n\\n    // Get"
      }
    ],
    "src/data/planets/locationService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 602,
        "column": 8,
        "context": "    if (influence > 1.2) {\\n      return [\\n        ...baseRecommendations;\\n        `Emphasize ${plane"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 604,
        "column": 8,
        "context": "{planet.toLowerCase()}-associated foods`,\\n        ...foodAssociations.slice(0, 3)\\n      ];\\n    } els"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 607,
        "column": 61,
        "context": "n [`Moderate ${planet.toLowerCase()} influences`, ...baseRecommendations.slice(0, 2)];\\n    } else {\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 609,
        "column": 14,
        "context": "ndations.slice(0, 2)];\\n    } else {\\n      return [...baseRecommendations.slice(0, 3), ...foodAssocia"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 609,
        "column": 50,
        "context": "      return [...baseRecommendations.slice(0, 3), ...foodAssociations.slice(0, 2)]\\n    }\\n  }\\n\\n  priv"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 645,
        "column": 8,
        "context": "0, 3),\\n\\n    return {\\n      ingredients: [\\n        ...seasonalIngredients;\\n        ...topInfluences.f"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 646,
        "column": 8,
        "context": "dients: [\\n        ...seasonalIngredients;\\n        ...topInfluences.flatMap(inf => inf.culinaryRecomm"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 649,
        "column": 8,
        "context": "  ].slice(0, 12),\\n      cookingMethods: [\\n        ...regionalProfile.traditionalCookingMethods;\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 650,
        "column": 8,
        "context": "egionalProfile.traditionalCookingMethods;\\n        ...this.getMethodsForClimate(regionalProfile.clima"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 761,
        "column": 12,
        "context": "', 'Dense calories']\\n          : [];\\n\\n    return [...baseNutrition[season as keyof typeof baseNutrit"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 761,
        "column": 68,
        "context": "eNutrition[season as keyof typeof baseNutrition], ...climateModifications];\\n  }\\n}\\n\\n// Export conveni"
      }
    ],
    "src/data/recipes/elementalMappings.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 128,
        "column": 4,
        "context": "with any recipe-specific overrides\\n  return {\\n    ...baseRecommendation;\\n    cookingTechniques: reci"
      }
    ],
    "src/data/recipes/index.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 20,
        "column": 28,
        "context": "y.isArray(recipes)) {\\n            allRecipes.push(...recipes);\\n          }\\n        });\\n      });\\n   "
      }
    ],
    "src/data/recipes.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 199,
        "column": 54,
        "context": "                const dishPlanetaryInfluences = { ...primaryPlanetaryInfluences };\\n\\n                "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 404,
        "column": 6,
        "context": "ecipe.flavorProfile);\\n    .map(recipe => ({\\n      ...recipe;\\n      matchScore: recipe.flavorProfile\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 432,
        "column": 12,
        "context": "uisineProfile?.signatureTechniques) {\\n    return [...cuisineProfile.signatureTechniques]\\n  }\\n\\n  // F"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 491,
        "column": 8,
        "context": "larity / totalWeight : 0;\\n\\n      return {\\n        ...recipe;\\n        matchScore\\n      };\\n    })\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 512,
        "column": 40,
        "context": " cuisines\\n  const relatedCuisines = [cuisineName, ...getRelatedCuisines(cuisineName)];\\n\\n  return rec"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 539,
        "column": 8,
        "context": "atchScore = 0.75;\\n      }\\n\\n      return {\\n        ...recipe;\\n        matchScore\\n      };\\n    })\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 557,
        "column": 26,
        "context": " Start with all recipes\\n  let candidateRecipes = [...(await getRecipes())];\\n  logger.debug(`Starting"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 630,
        "column": 14,
        "context": "\\n            },\\n            tags: [\\n              ...(Array.isArray(recipeData.mealType)\\n           "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 636,
        "column": 14,
        "context": "ype => String(type).toLowerCase()),\\n              ...(Array.isArray(recipeData.season)\\n             "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 719,
        "column": 16,
        "context": "         },\\n              tags: [\\n                ...(Array.isArray(mealType)\\n                  ? me"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 725,
        "column": 16,
        "context": "e => String(type).toLowerCase()),\\n                ...(Array.isArray(season)\\n                  ? seas"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 847,
        "column": 8,
        "context": "atchScore !== undefined) {\\n      return {\\n        ...recipe;\\n        // Add matchPercentage if it do"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 953,
        "column": 6,
        "context": "Math.round(finalScore * 100);\\n\\n    return {\\n      ...recipe;\\n      matchScore: finalScore,\\n      mat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1053,
        "column": 4,
        "context": " // Fusion suggestions\\n  const techniques = [\\n    ...new Set([\\n      ...profile1.signatureTechniques"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1054,
        "column": 6,
        "context": "ons\\n  const techniques = [\\n    ...new Set([\\n      ...profile1.signatureTechniques.slice(0, 2),\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1055,
        "column": 6,
        "context": "..profile1.signatureTechniques.slice(0, 2),\\n      ...profile2.signatureTechniques.slice(0, 2)\\n    ])"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1060,
        "column": 4,
        "context": "ce(0, 2)\\n    ])\\n  ];\\n\\n  const ingredients = [\\n    ...new Set([\\n      ...profile1.signatureIngredient"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1061,
        "column": 6,
        "context": ";\\n\\n  const ingredients = [\\n    ...new Set([\\n      ...profile1.signatureIngredients.slice(0, 3),\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1062,
        "column": 6,
        "context": ".profile1.signatureIngredients.slice(0, 3),\\n      ...profile2.signatureIngredients.slice(0, 3)\\n    ]"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 648,
        "column": 11,
        "context": "ipeData.matchPercentage) / 100 : 0.85)\\n          } as unknown as RecipeData;\\n        });\\n\\n        ca"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 735,
        "column": 13,
        "context": "centage: 85, // For display purposes\\n            } as unknown as RecipeData;\\n          });\\n\\n        "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1106,
        "column": 10,
        "context": "regionalCuisine: recipe.regionalCuisine\\n        }) as unknown as Recipe,\\n    );\\n  } catch (error) {\\n"
      }
    ],
    "src/data/sauces.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 504,
        "column": 2,
        "context": "port const allSauces: Record<string, Sauce> = {\\n  ...italianSauces;\\n  ...mexicanSauces;\\n  ...asianSa"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 505,
        "column": 2,
        "context": ": Record<string, Sauce> = {\\n  ...italianSauces;\\n  ...mexicanSauces;\\n  ...asianSauces;\\n  // Add other"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 506,
        "column": 2,
        "context": "ce> = {\\n  ...italianSauces;\\n  ...mexicanSauces;\\n  ...asianSauces;\\n  // Add other cuisine sauces as t"
      }
    ],
    "src/data/transits/comprehensiveTransitDatabase.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 451,
        "column": 28,
        "context": "/ Collect key aspects\\n            keyAspects.push(...season.keyAspects);\\n\\n            // Collect ret"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 454,
        "column": 35,
        "context": "ograde planets\\n            retrogradePlanets.push(...season.retrogradePlanets);\\n          }\\n        "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 472,
        "column": 26,
        "context": "ents,\\n      keyAspects,\\n      retrogradePlanets: [...new Set(retrogradePlanets)], // Remove duplicat"
      }
    ],
    "src/data/unified/alchemicalCalculations.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 130,
        "column": 4,
        "context": "ermodynamics.reactivity, kalchm);\\n\\n  return {\\n    ...thermodynamics,\\n    kalchm,\\n    monica\\n  };\\n}\\n\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 178,
        "column": 4,
        "context": "lateKalchm(alchemicalProperties);\\n\\n  return {\\n    ...ingredient,\\n    alchemicalProperties,\\n    kalch"
      }
    ],
    "src/data/unified/constants/alchemicalPillars.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 516,
        "column": 4,
        "context": "arMonicaModifiers(monicaConstant);\\n  return {\\n    ...pillar,\\n    monicaProperties: {\\n      kalchm,\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 577,
        "column": 6,
        "context": "ties.monicaConstant,\\n    monicaModifiers: {\\n      ...enhancedPillar.monicaProperties.monicaModifiers"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 583,
        "column": 6,
        "context": "perties.kalchm,\\n    thermodynamicProfile: {\\n      ...enhancedPillar.monicaProperties.thermodynamicPr"
      }
    ],
    "src/data/unified/constants/elementalCore.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 289,
        "column": 13,
        "context": "(val || 0), 0);\\n  if (total === 0) {\\n    return { ...exports.DEFAULT_ELEMENTAL_PROPERTIES };\\n  }\\n  r"
      }
    ],
    "src/data/unified/cuisineIntegrations.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1106,
        "column": 27,
        "context": " * (1 - blendRatio));\\n\\n    fusionIngredients.push(...uniqueIngredients1.slice(0, count1));\\n    fusio"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1107,
        "column": 27,
        "context": "ts1.slice(0, count1));\\n    fusionIngredients.push(...uniqueIngredients2.slice(0, count2));\\n\\n    retu"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1433,
        "column": 18,
        "context": "    if (cuisines?.[cuisine1]) {\\n      dishes.push(...cuisines[cuisine1].dishes)\\n    }\\n\\n    // Get di"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1438,
        "column": 18,
        "context": "ine2 && cuisines?.[cuisine2]) {\\n      dishes.push(...cuisines[cuisine2].dishes)\\n    }\\n\\n    return (d"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1929,
        "column": 48,
        "context": "{\\n        min: kalchmValues.length > 0 ? Math.min(...kalchmValues) : 0,\\n        max: kalchmValues.le"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1930,
        "column": 48,
        "context": ",\\n        max: kalchmValues.length > 0 ? Math.max(...kalchmValues) : 0\\n      },\\n      kalchmDistribu"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 2066,
        "column": 22,
        "context": "ngredientMap[ingredient]) {\\n        cuisines.push(...ingredientMap[ingredient])\\n      }\\n    }\\n\\n    /"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 2071,
        "column": 12,
        "context": "    }\\n    }\\n\\n    // Remove duplicates\\n    return [...new Set(cuisines)];\\n  }\\n\\n  /**\\n   * Get cuisine"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 679,
        "column": 48,
        "context": ",\\n      sharedCookingMethods: sharedCookingMethods as unknown as CookingMethod[],\\n      elementalAli"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1320,
        "column": 53,
        "context": "       adaptedCookingMethods: fusionCookingMethods as unknown as CookingMethod[],\\n          seasonal"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1366,
        "column": 46,
        "context": "ts,\\n        adaptedCookingMethods: seasonalMethods as unknown as CookingMethod[],\\n        seasonalMo"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1588,
        "column": 50,
        "context": "      adaptedCookingMethods: adaptedCookingMethods as unknown as CookingMethod[],\\n      seasonalModi"
      }
    ],
    "src/data/unified/cuisines.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 173,
        "column": 14,
        "context": ".name) {\\n            recipes.push({\\n              ...dish;\\n              mealType,\\n              sea"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 210,
        "column": 26,
        "context": "length > 0;\\n        ? {\\n            min: Math.min(...kalchmValues),\\n            max: Math.max(...kal"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 211,
        "column": 26,
        "context": "h.min(...kalchmValues),\\n            max: Math.max(...kalchmValues),\\n            average: kalchmValue"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 270,
        "column": 24,
        "context": "t primary methods (top 5)\\n    primaryMethods.push(...sortedMethods.slice(0, 5).map(([method]) => met"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 447,
        "column": 6,
        "context": "XISTING DATA)\\n    const enhancedCuisine = {\\n      ...(cuisine as unknown as any), // Preserve ALL ex"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 618,
        "column": 28,
        "context": "gth > 0\\n          ? {\\n              min: Math.min(...kalchmValues),\\n              max: Math.max(...k"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 619,
        "column": 28,
        "context": "min(...kalchmValues),\\n              max: Math.max(...kalchmValues),\\n              average: kalchmVal"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 655,
        "column": 8,
        "context": "on with compatibility data\\n      return {\\n        ...cuisine;\\n        cuisineOptimization: {\\n       "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 657,
        "column": 10,
        "context": "cuisine;\\n        cuisineOptimization: {\\n          ...cuisine.cuisineOptimization;\\n          kalchmCo"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 112,
        "column": 31,
        "context": "ck cooking methods\\n      const recipeData = recipe as unknown as any;\\n      if (recipeData.cookingMe"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 311,
        "column": 31,
        "context": "cipe of recipes) {\\n      const recipeData = recipe as unknown as any;\\n      if (recipeData.elemental"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 381,
        "column": 37,
        "context": "ount seasons\\n      const recipeSeasonData = recipe as unknown as any;\\n      if (recipeSeasonData.cur"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 391,
        "column": 30,
        "context": "lanetary affinities\\n      const astroData = recipe as unknown as any;\\n      if (astroData.astrologic"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 447,
        "column": 17,
        "context": "A)\\n    const enhancedCuisine = {\\n      ...(cuisine as unknown as any), // Preserve ALL existing prop"
      }
    ],
    "src/data/unified/data/cuisines/greek.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1091,
        "column": 11,
        "context": " ],\\n    },\\n    dessert: {\\n      all: [\\n        // ... dessert dishes\\n      ],\\n    },\\n  },\\n  traditio"
      }
    ],
    "src/data/unified/data/cuisines/index.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 67,
        "column": 25,
        "context": "neRecipes = cuisine => {\\n  if (!cuisine) return { ...baseCuisine };\\n  // Helper to combine \"all\" rec"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 75,
        "column": 15,
        "context": " ? mealType.all : [];\\n    return {\\n      spring: [...(Array.isArray(mealType.spring) ? mealType.spri"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 75,
        "column": 75,
        "context": "isArray(mealType.spring) ? mealType.spring : []), ...allRecipes],\\n      summer: [...(Array.isArray(m"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 76,
        "column": 15,
        "context": "Type.spring : []), ...allRecipes],\\n      summer: [...(Array.isArray(mealType.summer) ? mealType.summ"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 76,
        "column": 75,
        "context": "isArray(mealType.summer) ? mealType.summer : []), ...allRecipes],\\n      autumn: [...(Array.isArray(m"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 77,
        "column": 15,
        "context": "Type.summer : []), ...allRecipes],\\n      autumn: [...(Array.isArray(mealType.autumn) ? mealType.autu"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 77,
        "column": 75,
        "context": "isArray(mealType.autumn) ? mealType.autumn : []), ...allRecipes],\\n      winter: [...(Array.isArray(m"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 78,
        "column": 15,
        "context": "Type.autumn : []), ...allRecipes],\\n      winter: [...(Array.isArray(mealType.winter) ? mealType.wint"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 78,
        "column": 75,
        "context": "isArray(mealType.winter) ? mealType.winter : []), ...allRecipes],\\n    };\\n  };\\n  // Ensure the cuisin"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 107,
        "column": 34,
        "context": "alProperties ||\\n      cuisine.elementalState || { ...baseCuisine.elementalProperties }, // For backw"
      }
    ],
    "src/data/unified/data/cuisines.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 71,
        "column": 4,
        "context": "t\\nfunction adaptCuisine(cuisine) {\\n  return {\\n    ...cuisine,\\n    // Convert elementalProperties if "
      }
    ],
    "src/data/unified/data/ingredients/fruits/index.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 63,
        "column": 2,
        "context": "Combine all fruit categories\\nexports.fruits = {\\n  ...citrus_1.citrus,\\n  ...berries_1.berries,\\n  ...t"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 64,
        "column": 2,
        "context": "gories\\nexports.fruits = {\\n  ...citrus_1.citrus,\\n  ...berries_1.berries,\\n  ...tropical_1.tropical,\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 65,
        "column": 2,
        "context": "{\\n  ...citrus_1.citrus,\\n  ...berries_1.berries,\\n  ...tropical_1.tropical,\\n  ...stoneFruit_1.stoneFru"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 66,
        "column": 2,
        "context": "...berries_1.berries,\\n  ...tropical_1.tropical,\\n  ...stoneFruit_1.stoneFruit,\\n  ...pome_1.pome,\\n  .."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 67,
        "column": 2,
        "context": "pical_1.tropical,\\n  ...stoneFruit_1.stoneFruit,\\n  ...pome_1.pome,\\n  ...melons_1.melons,\\n};\\n// Helper"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 68,
        "column": 2,
        "context": "  ...stoneFruit_1.stoneFruit,\\n  ...pome_1.pome,\\n  ...melons_1.melons,\\n};\\n// Helper functions\\nconst g"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 74,
        "column": 38,
        "context": "ubCategory)\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getFruits"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 80,
        "column": 38,
        "context": "es(season))\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getSeason"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 86,
        "column": 38,
        "context": "on[method])\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getFruits"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 99,
        "column": 38,
        "context": "es(planet))\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getFruits"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 113,
        "column": 38,
        "context": "   }\\n    })\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getFruits"
      }
    ],
    "src/data/unified/data/ingredients/grains/index.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 36,
        "column": 2,
        "context": "= (0, elementalUtils_1.fixIngredientMappings)({\\n  ...wholeGrains_1.wholeGrains,\\n  ...refinedGrains_1"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 37,
        "column": 2,
        "context": "ientMappings)({\\n  ...wholeGrains_1.wholeGrains,\\n  ...refinedGrains_1.refinedGrains,\\n  ...pseudoGrain"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 38,
        "column": 2,
        "context": "holeGrains,\\n  ...refinedGrains_1.refinedGrains,\\n  ...pseudoGrains_1.pseudoGrains,\\n});\\n// Fix the raw"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 51,
        "column": 4,
        "context": " name: 'Whole Grains',\\n    category: 'grain',\\n    ...wholeGrains_1.wholeGrains,\\n  },\\n  refined: {\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 62,
        "column": 4,
        "context": "ame: 'Refined Grains',\\n    category: 'grain',\\n    ...refinedGrains_1.refinedGrains,\\n  },\\n  pseudo: {"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 73,
        "column": 4,
        "context": "name: 'Pseudo Grains',\\n    category: 'grain',\\n    ...pseudoGrains_1.pseudoGrains,\\n  },\\n};\\n// Apply t"
      }
    ],
    "src/data/unified/data/ingredients/grains/pseudoGrains/index.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 47,
        "column": 2,
        "context": " a consolidated object\\nexports.pseudoGrains = {\\n  ...quinoa_1.quinoa,\\n  ...amaranth_1.amaranth,\\n  .."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 48,
        "column": 2,
        "context": "\\nexports.pseudoGrains = {\\n  ...quinoa_1.quinoa,\\n  ...amaranth_1.amaranth,\\n  ...buckwheat_1.buckwheat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 49,
        "column": 2,
        "context": "  ...quinoa_1.quinoa,\\n  ...amaranth_1.amaranth,\\n  ...buckwheat_1.buckwheat,\\n  ...chia_1.chia,\\n  ...f"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 50,
        "column": 2,
        "context": "maranth_1.amaranth,\\n  ...buckwheat_1.buckwheat,\\n  ...chia_1.chia,\\n  ...flaxseed_1.flaxseed,\\n};\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 51,
        "column": 2,
        "context": ",\\n  ...buckwheat_1.buckwheat,\\n  ...chia_1.chia,\\n  ...flaxseed_1.flaxseed,\\n};\\n"
      }
    ],
    "src/data/unified/data/ingredients/herbs/freshHerbs.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 276,
        "column": 35,
        "context": "],\\n    },\\n  },\\n  // More herbs would be added here...\\n};\\nexports.freshHerbs = (0, elementalUtils_1.f"
      }
    ],
    "src/data/unified/data/ingredients/herbs/index.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 107,
        "column": 4,
        "context": "ops,\\n    category: properties.category || '',\\n    ...herbValues,\\n    ...properties,\\n  };\\n}\\n// Combin"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 108,
        "column": 4,
        "context": "properties.category || '',\\n    ...herbValues,\\n    ...properties,\\n  };\\n}\\n// Combine all herbs into on"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 113,
        "column": 2,
        "context": "= (0, elementalUtils_1.fixIngredientMappings)({\\n  ...freshHerbs_1.freshHerbs,\\n  ...driedHerbs_1.drie"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 114,
        "column": 2,
        "context": "edientMappings)({\\n  ...freshHerbs_1.freshHerbs,\\n  ...driedHerbs_1.driedHerbs,\\n  ...aromatic_1.aromat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 115,
        "column": 2,
        "context": "rbs_1.freshHerbs,\\n  ...driedHerbs_1.driedHerbs,\\n  ...aromatic_1.aromaticHerbs,\\n  ...medicinalHerbs_1"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 116,
        "column": 2,
        "context": "bs_1.driedHerbs,\\n  ...aromatic_1.aromaticHerbs,\\n  ...medicinalHerbs_1.medicinalHerbs,\\n  // Custom he"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 343,
        "column": 2,
        "context": "= (0, elementalUtils_1.fixIngredientMappings)({\\n  ...freshHerbs_1.freshHerbs,\\n  ...driedHerbs_1.drie"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 344,
        "column": 2,
        "context": "edientMappings)({\\n  ...freshHerbs_1.freshHerbs,\\n  ...driedHerbs_1.driedHerbs,\\n  ...aromatic_1.aromat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 345,
        "column": 2,
        "context": "rbs_1.freshHerbs,\\n  ...driedHerbs_1.driedHerbs,\\n  ...aromatic_1.aromaticHerbs,\\n  ...medicinalHerbs_1"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 346,
        "column": 2,
        "context": "bs_1.driedHerbs,\\n  ...aromatic_1.aromaticHerbs,\\n  ...medicinalHerbs_1.medicinalHerbs,\\n});\\n// Export "
      }
    ],
    "src/data/unified/data/ingredients/oils/index.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 34,
        "column": 36,
        "context": "== 'cooking')\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\nexports.finishingOil"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 37,
        "column": 36,
        "context": " 'finishing')\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\nexports.supplementOi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 40,
        "column": 36,
        "context": "'supplement')\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\nexports.specialtyOil"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 49,
        "column": 36,
        "context": "lement'),\\n  )\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n// Export by element"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 57,
        "column": 36,
        "context": "= 'Fire',\\n  )\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\nexports.waterOils = "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 64,
        "column": 36,
        "context": " 'Water',\\n  )\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\nexports.earthOils = "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 71,
        "column": 36,
        "context": " 'Earth',\\n  )\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\nexports.AirOils = Ob"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 78,
        "column": 36,
        "context": "== 'Air',\\n  )\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n// Export by culinar"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 87,
        "column": 36,
        "context": "epfrying,\\n  )\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\nexports.bakingOils ="
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 90,
        "column": 36,
        "context": "ions?.baking)\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\nexports.dressingOils"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 93,
        "column": 36,
        "context": "s?.dressings)\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\nexports.nutOils = Ob"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 102,
        "column": 36,
        "context": "peanut'),\\n  )\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n// For backward comp"
      }
    ],
    "src/data/unified/data/ingredients/proteins/index.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 76,
        "column": 2,
        "context": "ine all protein categories\\nexports.proteins = {\\n  ...seafood_1.seafood,\\n  ...poultry_1.poultry,\\n  .."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 77,
        "column": 2,
        "context": "es\\nexports.proteins = {\\n  ...seafood_1.seafood,\\n  ...poultry_1.poultry,\\n  ...plantBased_1.plantBased"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 78,
        "column": 2,
        "context": "  ...seafood_1.seafood,\\n  ...poultry_1.poultry,\\n  ...plantBased_1.plantBased,\\n  ...meat_1.meats,\\n  ."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 79,
        "column": 2,
        "context": "oultry_1.poultry,\\n  ...plantBased_1.plantBased,\\n  ...meat_1.meats,\\n  ...legumes_1.legumes,\\n  ...eggs"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 80,
        "column": 2,
        "context": " ...plantBased_1.plantBased,\\n  ...meat_1.meats,\\n  ...legumes_1.legumes,\\n  ...eggs_1.eggs,\\n  ...dAiry"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 81,
        "column": 2,
        "context": "sed,\\n  ...meat_1.meats,\\n  ...legumes_1.legumes,\\n  ...eggs_1.eggs,\\n  ...dAiry_1.dAiry,\\n};\\n// Implemen"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 82,
        "column": 2,
        "context": "eats,\\n  ...legumes_1.legumes,\\n  ...eggs_1.eggs,\\n  ...dAiry_1.dAiry,\\n};\\n// Implemented helper functio"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 88,
        "column": 38,
        "context": "es(season))\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getProtei"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 94,
        "column": 38,
        "context": "= minScore)\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getProtei"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 100,
        "column": 38,
        "context": "es(region))\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getProtei"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 107,
        "column": 38,
        "context": "= category)\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getProtei"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 113,
        "column": 38,
        "context": "?.(method))\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getProtei"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 123,
        "column": 38,
        "context": "Fat;\\n    })\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getProtei"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 274,
        "column": 38,
        "context": "ubCategory)\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getProtei"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 280,
        "column": 38,
        "context": ".('vegan'))\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getVeganP"
      }
    ],
    "src/data/unified/data/ingredients/proteins/plantBased.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 17,
        "column": 4,
        "context": "  },\\n    category: properties.category || '',\\n    ...properties,\\n  };\\n}\\nconst rawPlantBased = {\\n  te"
      }
    ],
    "src/data/unified/data/ingredients/seasonings/index.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 55,
        "column": 2,
        "context": "xclude oils and vinegars\\nexports.seasonings = {\\n  ...spices_1.spices,\\n  ...salts_1.salts,\\n  ...peppe"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 56,
        "column": 2,
        "context": "rs\\nexports.seasonings = {\\n  ...spices_1.spices,\\n  ...salts_1.salts,\\n  ...peppers_1.peppers,\\n  ...her"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 57,
        "column": 2,
        "context": "s = {\\n  ...spices_1.spices,\\n  ...salts_1.salts,\\n  ...peppers_1.peppers,\\n  ...herbs_1.herbs,\\n  ...aro"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 58,
        "column": 2,
        "context": "es,\\n  ...salts_1.salts,\\n  ...peppers_1.peppers,\\n  ...herbs_1.herbs,\\n  ...aromatics_1.aromatics,\\n};\\n/"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 59,
        "column": 2,
        "context": "ts,\\n  ...peppers_1.peppers,\\n  ...herbs_1.herbs,\\n  ...aromatics_1.aromatics,\\n};\\n// Update salts categ"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 65,
        "column": 6,
        "context": "e((acc, [key, value]) => {\\n    acc[key] = {\\n      ...value,\\n      category: 'seasoning',\\n      subCa"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 78,
        "column": 38,
        "context": "= category)\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getSeason"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 84,
        "column": 38,
        "context": "intensity))\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getSeason"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 106,
        "column": 38,
        "context": "ing),\\n    )\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getSeason"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 116,
        "column": 29,
        "context": "s[key] = [];\\n      }\\n      combinations[key].push(...value.traditionalCombinations);\\n    }\\n  });\\n  r"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 125,
        "column": 38,
        "context": "s?.[phase])\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getSeason"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 137,
        "column": 38,
        "context": "   ),\\n    )\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getSeason"
      }
    ],
    "src/data/unified/data/ingredients/spices/index.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 52,
        "column": 6,
        "context": "ties).reduce(\\n    (acc, [key, value]) => ({\\n      ...acc,\\n      [key]: value / (sum || 1),\\n    }),\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 75,
        "column": 6,
        "context": "cyBase + Math.random() * 2)));\\n    return {\\n      ...acc,\\n      [key]: {\\n        ...spice,\\n        e"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 77,
        "column": 8,
        "context": "    return {\\n      ...acc,\\n      [key]: {\\n        ...spice,\\n        elementalProperties: normalizedP"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 89,
        "column": 2,
        "context": " categories with heat levels\\nexports.spices = {\\n  ...wholespices_1.wholeSpices,\\n  ...groundspices_1."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 90,
        "column": 2,
        "context": "orts.spices = {\\n  ...wholespices_1.wholeSpices,\\n  ...groundspices_1.groundSpices,\\n  ...spiceBlends_1"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 91,
        "column": 2,
        "context": ".wholeSpices,\\n  ...groundspices_1.groundSpices,\\n  ...spiceBlends_1.spiceBlends,\\n  cumin: {\\n    name:"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 313,
        "column": 38,
        "context": "ubCategory)\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getSpices"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 321,
        "column": 38,
        "context": "igin,\\n    )\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getSpices"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 327,
        "column": 38,
        "context": "inStrength)\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getSpices"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 363,
        "column": 38,
        "context": "es(method))\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getSpices"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 373,
        "column": 38,
        "context": "ion],\\n    )\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getTradit"
      }
    ],
    "src/data/unified/data/ingredients/vegetables/index.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 76,
        "column": 2,
        "context": "all vegetable categories\\nexports.vegetables = {\\n  ...leafyGreens_1.leafyGreens,\\n  ...roots_1.roots,\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 77,
        "column": 2,
        "context": ".vegetables = {\\n  ...leafyGreens_1.leafyGreens,\\n  ...roots_1.roots,\\n  ...cruciferous_1.cruciferous,\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 78,
        "column": 2,
        "context": ".leafyGreens_1.leafyGreens,\\n  ...roots_1.roots,\\n  ...cruciferous_1.cruciferous,\\n  ...nightshades_1.n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 79,
        "column": 2,
        "context": ".roots_1.roots,\\n  ...cruciferous_1.cruciferous,\\n  ...nightshades_1.nightshades,\\n  ...alliums_1.alliu"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 80,
        "column": 2,
        "context": "_1.cruciferous,\\n  ...nightshades_1.nightshades,\\n  ...alliums_1.alliums,\\n  ...squash_1.squash,\\n  ...s"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 81,
        "column": 2,
        "context": "htshades_1.nightshades,\\n  ...alliums_1.alliums,\\n  ...squash_1.squash,\\n  ...starchy_1.starchyVegetabl"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 82,
        "column": 2,
        "context": ",\\n  ...alliums_1.alliums,\\n  ...squash_1.squash,\\n  ...starchy_1.starchyVegetables,\\n  ...legumes_1.leg"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 83,
        "column": 2,
        "context": "ash_1.squash,\\n  ...starchy_1.starchyVegetables,\\n  ...legumes_1.legumes,\\n};\\n// Create enhanced vegeta"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 93,
        "column": 38,
        "context": "ubCategory)\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getVegeta"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 99,
        "column": 38,
        "context": "es(season))\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getSeason"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 107,
        "column": 38,
        "context": "hod),\\n    )\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n};\\nexports.getVegeta"
      }
    ],
    "src/data/unified/data/ingredients/vegetables/leafyGreens.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 63,
        "column": 4,
        "context": "mented',\\n      'juiced',\\n      'soup',\\n    ],\\n    ...generateVegetableAttributes({\\n      Water: 84,\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 398,
        "column": 4,
        "context": "ngMethods: ['steamed', 'saut√©ed', 'braised'],\\n    ...generateVegetableAttributes({\\n      Water: 87,\\n"
      }
    ],
    "src/data/unified/data/ingredients/vinegars/vinegars.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 311,
        "column": 2,
        "context": "= (0, elementalUtils_1.fixIngredientMappings)({\\n  ...rawVinegars,\\n  ...rawArtisanalVinegars,\\n  ...ad"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 312,
        "column": 2,
        "context": "ls_1.fixIngredientMappings)({\\n  ...rawVinegars,\\n  ...rawArtisanalVinegars,\\n  ...additionalVinegars,\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 313,
        "column": 2,
        "context": "({\\n  ...rawVinegars,\\n  ...rawArtisanalVinegars,\\n  ...additionalVinegars,\\n});\\n// Export default for c"
      }
    ],
    "src/data/unified/data/unified/alchemicalCalculations.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 87,
        "column": 4,
        "context": "hermodynamics.reactivity, kalchm);\\n  return {\\n    ...thermodynamics,\\n    kalchm,\\n    monica,\\n  };\\n}\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 122,
        "column": 4,
        "context": "ulateKalchm(alchemicalProperties);\\n  return {\\n    ...ingredient,\\n    alchemicalProperties,\\n    kalch"
      }
    ],
    "src/data/unified/data/unified/cuisineIntegrations.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 819,
        "column": 27,
        "context": "h * (1 - blendRatio));\\n    fusionIngredients.push(...uniqueIngredients1.slice(0, count1));\\n    fusio"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 820,
        "column": 27,
        "context": "ts1.slice(0, count1));\\n    fusionIngredients.push(...uniqueIngredients2.slice(0, count2));\\n    retur"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1060,
        "column": 18,
        "context": "alProfile.cuisines[cuisine1]) {\\n      dishes.push(...seasonalProfile.cuisines[cuisine1].dishes);\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1064,
        "column": 18,
        "context": "alProfile.cuisines[cuisine2]) {\\n      dishes.push(...seasonalProfile.cuisines[cuisine2].dishes);\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1455,
        "column": 22,
        "context": "ength,\\n      kalchmRange: {\\n        min: Math.min(...kalchmValues),\\n        max: Math.max(...kalchmV"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1456,
        "column": 22,
        "context": " Math.min(...kalchmValues),\\n        max: Math.max(...kalchmValues),\\n      },\\n      kalchmDistributio"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1558,
        "column": 22,
        "context": "ngredientMap[ingredient]) {\\n        cuisines.push(...ingredientMap[ingredient]);\\n      }\\n    }\\n    /"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1562,
        "column": 12,
        "context": "     }\\n    }\\n    // Remove duplicates\\n    return [...new Set(cuisines)];\\n  }\\n  /**\\n   * Get cuisine "
      }
    ],
    "src/data/unified/data/unified/ingredients.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 36,
        "column": 2,
        "context": "// Combine all protein types\\nconst proteins = {\\n  ...proteins_1.meats,\\n  ...proteins_1.poultry,\\n  .."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 37,
        "column": 2,
        "context": "types\\nconst proteins = {\\n  ...proteins_1.meats,\\n  ...proteins_1.poultry,\\n  ...proteins_1.seafood,\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 38,
        "column": 2,
        "context": "  ...proteins_1.meats,\\n  ...proteins_1.poultry,\\n  ...proteins_1.seafood,\\n  ...proteins_1.plantBased,"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 39,
        "column": 2,
        "context": "...proteins_1.poultry,\\n  ...proteins_1.seafood,\\n  ...proteins_1.plantBased,\\n};\\n/**\\n * Calculate Kalc"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 136,
        "column": 2,
        "context": "fied collections\\nexports.unifiedIngredients = {\\n  ...exports.unifiedFruits,\\n  ...exports.unifiedVege"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 137,
        "column": 2,
        "context": "fiedIngredients = {\\n  ...exports.unifiedFruits,\\n  ...exports.unifiedVegetables,\\n  ...exports.unified"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 138,
        "column": 2,
        "context": ".unifiedFruits,\\n  ...exports.unifiedVegetables,\\n  ...exports.unifiedHerbs,\\n  ...exports.unifiedSpice"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 139,
        "column": 2,
        "context": "s.unifiedVegetables,\\n  ...exports.unifiedHerbs,\\n  ...exports.unifiedSpices,\\n  ...exports.unifiedGrai"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 140,
        "column": 2,
        "context": "ports.unifiedHerbs,\\n  ...exports.unifiedSpices,\\n  ...exports.unifiedGrains,\\n  ...exports.unifiedOils"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 141,
        "column": 2,
        "context": "orts.unifiedSpices,\\n  ...exports.unifiedGrains,\\n  ...exports.unifiedOils,\\n  ...exports.unifiedVinega"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 142,
        "column": 2,
        "context": "xports.unifiedGrains,\\n  ...exports.unifiedOils,\\n  ...exports.unifiedVinegars,\\n  ...exports.unifiedSe"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 143,
        "column": 2,
        "context": "orts.unifiedOils,\\n  ...exports.unifiedVinegars,\\n  ...exports.unifiedSeasonings,\\n  ...exports.unified"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 144,
        "column": 2,
        "context": "nifiedVinegars,\\n  ...exports.unifiedSeasonings,\\n  ...exports.unifiedProteins,\\n};\\n// Helper functions"
      }
    ],
    "src/data/unified/data/unified/recipes.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 308,
        "column": 6,
        "context": "EXISTING DATA)\\n    const enhancedRecipe = {\\n      ...recipe,\\n      // ADD new alchemical properties\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 404,
        "column": 22,
        "context": "ength,\\n      kalchmRange: {\\n        min: Math.min(...kalchmValues),\\n        max: Math.max(...kalchmV"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 405,
        "column": 22,
        "context": " Math.min(...kalchmValues),\\n        max: Math.max(...kalchmValues),\\n        average: kalchmValues.re"
      }
    ],
    "src/data/unified/data/unified/seasonal.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1086,
        "column": 6,
        "context": "(([season, profile]) => [\\n    season,\\n    {\\n      ...profile.ingredients,\\n      elementalInfluence: "
      }
    ],
    "src/data/unified/enhancedIngredients.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 577,
        "column": 12,
        "context": "sonal with some out-of-season options\\n    return [...seasonal, ...this.findSubstitutions(ingredients"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 577,
        "column": 25,
        "context": "me out-of-season options\\n    return [...seasonal, ...this.findSubstitutions(ingredients)].slice(\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 602,
        "column": 12,
        "context": "son' ingredients with highest quality\\n    return [...transitionIngredients, ...toSeasonIngredients]\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 602,
        "column": 38,
        "context": "est quality\\n    return [...transitionIngredients, ...toSeasonIngredients]\\n      .sort((a, b) => {\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 731,
        "column": 6,
        "context": " // Create enhanced ingredient\\n    return {\\n      ...ingredient;\\n      culinaryProperties,\\n      ast"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 913,
        "column": 28,
        "context": "   if (seasonality) {\\n        const allSeasons = [...(seasonality.peak || []), ...(seasonality.optim"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 913,
        "column": 57,
        "context": " const allSeasons = [...(seasonality.peak || []), ...(seasonality.optimal || [])];\\n\\n        (allSeas"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1002,
        "column": 25,
        "context": "ient }) => ingredient);\\n\\n      substitutions.push(...sameCategory);\\n    });\\n\\n    // Return unique su"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1056,
        "column": 14,
        "context": "ifferentCategories || []).length),\\n\\n      return [...fromDifferentCategories, ...kalchmMatches]\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1056,
        "column": 42,
        "context": "ngth),\\n\\n      return [...fromDifferentCategories, ...kalchmMatches]\\n    }\\n\\n    return fromDifferentC"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1120,
        "column": 31,
        "context": "urn unique methods\\n    return Array.from(new Set([...baseMethods, ...elementMethods]));\\n  }\\n\\n  /**\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1120,
        "column": 47,
        "context": "ds\\n    return Array.from(new Set([...baseMethods, ...elementMethods]));\\n  }\\n\\n  /**\\n   * Get storage "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 314,
        "column": 70,
        "context": ".culinaryProperties.cookingMethods.includes(method as unknown as CookingMethod);\\n        ),\\n      )\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 397,
        "column": 13,
        "context": "    umami: 0,\\n              spicy: 0\\n            } as unknown as UnifiedFlavorProfile),\\n          in"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 413,
        "column": 13,
        "context": "    umami: 0,\\n              spicy: 0\\n            } as unknown as UnifiedFlavorProfile),\\n          a."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 422,
        "column": 13,
        "context": "    umami: 0,\\n              spicy: 0\\n            } as unknown as UnifiedFlavorProfile),\\n        ).co"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 434,
        "column": 13,
        "context": "    umami: 0,\\n              spicy: 0\\n            } as unknown as UnifiedFlavorProfile),\\n          b."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 443,
        "column": 13,
        "context": "    umami: 0,\\n              spicy: 0\\n            } as unknown as UnifiedFlavorProfile),\\n        ).co"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 760,
        "column": 7,
        "context": "\\n        category,\\n        elementalProps,\\n      ) as unknown as CookingMethod[],\\n      pairings: in"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 786,
        "column": 10,
        "context": "rForElement(\\n          dominantElement,\\n        )) as unknown as import('@/types/celestial').Planet;"
      }
    ],
    "src/data/unified/flavorCompatibilityLayer.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 312,
        "column": 3,
        "context": "ags || ['legacy'],\\n    lastUpdated: new Date()\\n  } as unknown as UnifiedFlavorProfile;\\n}\\n\\nfunction c"
      }
    ],
    "src/data/unified/flavorProfileMigration.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 90,
        "column": 15,
        "context": "pleted && _cachedMigrationStats) {\\n      return { ..._cachedMigrationStats };\\n    }\\n\\n    // If migra"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 99,
        "column": 22,
        "context": "earInterval(checkInterval);\\n            resolve({ ..._cachedMigrationStats });\\n          }\\n        }"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 110,
        "column": 58,
        "context": "info('üîÑ Starting Phase 4 flavor profile migration...');\\n\\n    try {\\n      // 1. Migrate unified flav"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 137,
        "column": 17,
        "context": "yStats(),\\n        migrationTime,\\n        errors: [...this.migrationErrors],\\n        warnings: [...th"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 138,
        "column": 19,
        "context": "rs: [...this.migrationErrors],\\n        warnings: [...this.migrationWarnings]\\n      };\\n\\n      // Cach"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 151,
        "column": 15,
        "context": "     _isMigrationRunning = false;\\n\\n      return { ..._cachedMigrationStats };\\n    } catch (error) {\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 162,
        "column": 50,
        "context": "    log.info('üì¶ Migrating unified flavor profiles...');\\n\\n    for (const [id, profile] of Object.ent"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 214,
        "column": 51,
        "context": "   log.info('üçΩÔ∏è Migrating cuisine flavor profiles...');\\n\\n    // Check if cuisineFlavorProfiles is a"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 290,
        "column": 52,
        "context": "  log.info('ü™ê Migrating planetary flavor profiles...');\\n\\n    // Check if planetaryFlavorProfiles is"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 362,
        "column": 54,
        "context": "log.info('üîó Migrating integration flavor profiles...');\\n\\n    // Check if integrationFlavorProfiles "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 441,
        "column": 53,
        "context": " log.info('ü•¨ Migrating ingredient flavor profiles...');\\n\\n    // Check if ingredientFlavorMap is ava"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 828,
        "column": 8,
        "context": "xistingProfile.pairingRecommendations = [\\n        ...new Set([\\n          ...existingProfile.pairingR"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 829,
        "column": 10,
        "context": "ecommendations = [\\n        ...new Set([\\n          ...existingProfile.pairingRecommendations;\\n       "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 830,
        "column": 10,
        "context": "existingProfile.pairingRecommendations;\\n          ...cuisineData.signatureIngredients\\n        ])\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 839,
        "column": 64,
        "context": "üîß Generating missing data and optimizing profiles...');\\n\\n    for (const [id, profile] of this.migra"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 922,
        "column": 13,
        "context": "tionStats && !_isMigrationRunning) {\\n    return { ..._cachedMigrationStats };\\n  }\\n\\n  return await _m"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 256,
        "column": 37,
        "context": "uisineData),\\n      elementalFlavors: ((cuisineData as unknown as any).elementalState as ElementalPro"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 305,
        "column": 20,
        "context": "ofile(;\\n          planetName,\\n          planetData as unknown as any,\\n        ),\\n        this.migrat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 327,
        "column": 58,
        "context": "seNotes: this.extractPlanetaryBaseNotes(planetData as unknown as Planet),\\n      elementalFlavors: (p"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 341,
        "column": 64,
        "context": "Peak: this.extractPlanetarySeasonalPeak(planetData as unknown as Planet),\\n      seasonalModifiers: t"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 377,
        "column": 20,
        "context": "ofile(;\\n          flavorName,\\n          flavorData as unknown as any,\\n        ),\\n        this.migrat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 601,
        "column": 37,
        "context": "e): number {\\n    const cuisineRecord = cuisineData as unknown as any;\\n    const intensity = cuisineR"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 615,
        "column": 37,
        "context": "e): number {\\n    const cuisineRecord = cuisineData as unknown as any;\\n    const complexity = cuisine"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 627,
        "column": 37,
        "context": ": Season[] {\\n    const cuisineRecord = cuisineData as unknown as any;\\n    const seasonalPeak = cuisi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 638,
        "column": 35,
        "context": "eFlavorNotes {\\n    const planetRecord = planetData as unknown as any;\\n    const flavorProfiles = pla"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 655,
        "column": 35,
        "context": "t): Season[] {\\n    const planetRecord = planetData as unknown as any;\\n    const seasonalPeak = plane"
      }
    ],
    "src/data/unified/ingredients.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 29,
        "column": 2,
        "context": "// Combine all protein types\\nconst proteins = {\\n  ...meats;\\n  ...poultry;\\n  ...seafood;\\n  ...plantBa"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 30,
        "column": 2,
        "context": "ll protein types\\nconst proteins = {\\n  ...meats;\\n  ...poultry;\\n  ...seafood;\\n  ...plantBased\\n};\\n\\n/**\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 31,
        "column": 2,
        "context": "es\\nconst proteins = {\\n  ...meats;\\n  ...poultry;\\n  ...seafood;\\n  ...plantBased\\n};\\n\\n/**\\n * Calculate K"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 32,
        "column": 2,
        "context": "ins = {\\n  ...meats;\\n  ...poultry;\\n  ...seafood;\\n  ...plantBased\\n};\\n\\n/**\\n * Calculate Kalchm value ba"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 206,
        "column": 2,
        "context": "ients: { [key: string]: UnifiedIngredient } = {\\n  ...unifiedFruits;\\n  ...unifiedVegetables;\\n  ...uni"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 207,
        "column": 2,
        "context": "g]: UnifiedIngredient } = {\\n  ...unifiedFruits;\\n  ...unifiedVegetables;\\n  ...unifiedHerbs;\\n  ...unif"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 208,
        "column": 2,
        "context": "= {\\n  ...unifiedFruits;\\n  ...unifiedVegetables;\\n  ...unifiedHerbs;\\n  ...unifiedSpices;\\n  ...unifiedG"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 209,
        "column": 2,
        "context": "its;\\n  ...unifiedVegetables;\\n  ...unifiedHerbs;\\n  ...unifiedSpices;\\n  ...unifiedGrains;\\n  ...unified"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 210,
        "column": 2,
        "context": "etables;\\n  ...unifiedHerbs;\\n  ...unifiedSpices;\\n  ...unifiedGrains;\\n  ...unifiedOils;\\n  ...unifiedVi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 211,
        "column": 2,
        "context": "dHerbs;\\n  ...unifiedSpices;\\n  ...unifiedGrains;\\n  ...unifiedOils;\\n  ...unifiedVinegars;\\n  ...unified"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 212,
        "column": 2,
        "context": "edSpices;\\n  ...unifiedGrains;\\n  ...unifiedOils;\\n  ...unifiedVinegars;\\n  ...unifiedSeasonings;\\n  ...u"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 213,
        "column": 2,
        "context": "Grains;\\n  ...unifiedOils;\\n  ...unifiedVinegars;\\n  ...unifiedSeasonings;\\n  ...unifiedProteins\\n};\\n\\n// "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 214,
        "column": 2,
        "context": ";\\n  ...unifiedVinegars;\\n  ...unifiedSeasonings;\\n  ...unifiedProteins\\n};\\n\\n// Helper functions for wor"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 65,
        "column": 35,
        "context": "ynamics access\\n  const thermoData = thermodynamics as unknown as any;\\n  const reactivity = Number(th"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 93,
        "column": 56,
        "context": "t alchemicalData = ingredient.alchemicalProperties as unknown as any;\\n  const alchemicalProperties: "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 116,
        "column": 18,
        "context": "= calculateMonica(;\\n    kalchm,\\n    thermodynamics as unknown as ThermodynamicProperties | Thermodyn"
      }
    ],
    "src/data/unified/nutritional.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 497,
        "column": 6,
        "context": "talNutrientMapping.Air\\n    };\\n\\n    return {\\n      ...baseProfile;\\n      alchemicalProperties,\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 570,
        "column": 10,
        "context": "onData.fiber || 0),\\n        vitamins: {\\n          ...acc.vitamins;\\n          ...((nutritionData.vita"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 571,
        "column": 10,
        "context": " vitamins: {\\n          ...acc.vitamins;\\n          ...((nutritionData.vitamins ) || {})\\n        },\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 574,
        "column": 10,
        "context": ") || {})\\n        },\\n        minerals: {\\n          ...acc.minerals;\\n          ...((nutritionData.mine"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 575,
        "column": 10,
        "context": " minerals: {\\n          ...acc.minerals;\\n          ...((nutritionData.minerals ) || {})\\n        }\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 510,
        "column": 32,
        "context": " as PlanetName[],\\n        favorableZodiac: ['Leo'] as unknown as any[],\\n        seasonalPeak: ['Summ"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 511,
        "column": 32,
        "context": "unknown as any[],\\n        seasonalPeak: ['Summer'] as unknown as Season[],\\n        elementalAffinity"
      }
    ],
    "src/data/unified/recipeBuilding.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 74,
        "column": 26,
        "context": " of the original recipe\\n  const adaptedRecipe = { ...recipe };\\n\\n  // Update name and description\\n  a"
      }
    ],
    "src/data/unified/recipeBuilding.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 216,
        "column": 48,
        "context": ";\\n      ? methodsArray.reduce((acc, method) => ({ ...acc, [method.id || method.name]: method }), {})"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 252,
        "column": 6,
        "context": " optimizedRecipe: MonicaOptimizedRecipe = {\\n      ...enhancedRecipe;\\n      monicaOptimization,\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 477,
        "column": 10,
        "context": ": ingredientSubstitutions.map(sub => ({\\n          ...sub;\\n          seasonalImprovement: 0.1\\n       "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 545,
        "column": 6,
        "context": "nst fusionRecipe: MonicaOptimizedRecipe = {\\n      ...enhancedFusionRecipe;\\n      monicaOptimization,"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 684,
        "column": 57,
        "context": "ditional utility methods would be implemented here...\\n  // (Temperature adjustments, timing calculat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1411,
        "column": 35,
        "context": "ly alternative\\n      const dietaryAlternative = { ...recipe };\\n      dietaryAlternative.name = `${re"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1418,
        "column": 35,
        "context": "ed alternative\\n      const cuisineAlternative = { ...recipe };\\n      cuisineAlternative.name = `${re"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1425,
        "column": 36,
        "context": "l alternative\\n      const seasonalAlternative = { ...recipe };\\n      seasonalAlternative.name = `${r"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1432,
        "column": 31,
        "context": "tionScore < 0.9) {\\n      const monicaEnhanced = { ...recipe };\\n      monicaEnhanced.name = `${recipe"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1556,
        "column": 67,
        "context": "laceholder methods for comprehensive functionality...\\n  private selectIngredientsFromCriteria(_crite"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1647,
        "column": 4,
        "context": "ptationsToRecipe(\\n    recipe: EnhancedRecipe,\\n    ..._adaptations: Array<Record<string, unknown>>\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 328,
        "column": 5,
        "context": "asonalRecommendations(;\\n      currentSeason,\\n    ) as unknown as SeasonalRecommendations;\\n\\n    // Ca"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 432,
        "column": 5,
        "context": "easonalRecommendations(;\\n      targetSeason,\\n    ) as unknown as SeasonalRecommendations;\\n\\n    // Ge"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 481,
        "column": 24,
        "context": "Adjustments.map(adj => ({\\n          original: (adj as unknown as MethodAdjustment)?.method || '',\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 482,
        "column": 24,
        "context": "djustment)?.method || '',\\n          adjusted: (adj as unknown as MethodAdjustment)?.adjustment || ''"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 483,
        "column": 22,
        "context": "ustment)?.adjustment || '',\\n          reason: (adj as unknown as MethodAdjustment)?.reason || '',\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 487,
        "column": 44,
        "context": "ts: {\\n          prepTimeChange: (timingAdjustments as unknown as TimingAdjustment)?.cookingTime || 0"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 488,
        "column": 44,
        "context": "|| 0,\\n          cookTimeChange: (timingAdjustments as unknown as TimingAdjustment)?.cookingTime || 0"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 489,
        "column": 44,
        "context": "|| 0,\\n          restTimeChange: (timingAdjustments as unknown as TimingAdjustment)?.restTime || 0,\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 491,
        "column": 30,
        "context": ",\\n          reason:\\n            (timingAdjustments as unknown as TimingAdjustment)?.reason ||\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 495,
        "column": 52,
        "context": "        temperatureChange: (temperatureAdjustments as unknown as TemperatureAdjustment)?.temperature"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 497,
        "column": 35,
        "context": "       reason:\\n            (temperatureAdjustments as unknown as TemperatureAdjustment)?.reason ||\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1018,
        "column": 31,
        "context": "nalIngredient = (;\\n        seasonalRecommendations as unknown as {\\n          getSeasonalEquivalent?:"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1023,
        "column": 22,
        "context": "ient !== ingredient.name) {\\n        (substitutions as unknown as Array<unknown>).push({\\n          or"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1047,
        "column": 31,
        "context": "nalAdjustment = (;\\n        seasonalRecommendations as unknown as {\\n          getCookingMethodAdjustm"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1052,
        "column": 20,
        "context": "    if (seasonalAdjustment) {\\n        (adjustments as unknown as MethodAdjustment[]).push({\\n        "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1093,
        "column": 25,
        "context": "(ingredient: string) =>;\\n      (cuisineIngredients as unknown as string[]).includes(ingredient),\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1130,
        "column": 12,
        "context": " if (recipeIngredients.length > 10) {\\n      (notes as unknown as string[]).push(\\n        'Complex in"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1141,
        "column": 12,
        "context": "ethod => method?.includes('slow'))) {\\n      (notes as unknown as string[]).push('Slow cooking method"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1765,
        "column": 32,
        "context": "ngredients.push({\\n          ingredient: ingredient as unknown as UnifiedIngredient,\\n          source"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1796,
        "column": 24,
        "context": "     fusionMethods.push({\\n          method: method as unknown as EnhancedCookingMethod,\\n          so"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1943,
        "column": 3,
        "context": "ateFusionRecipe(\\n    _cuisines,\\n    _criteria,\\n  ) as unknown as MonicaOptimizedRecipe\\n}\\n\\nexport fun"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1962,
        "column": 3,
        "context": ".generateMonicaOptimizedRecipe(\\n    _criteria,\\n  ) as unknown as MonicaOptimizedRecipe\\n}\\n\\nexport fun"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1968,
        "column": 3,
        "context": "ystem.getSeasonalRecommendations(\\n    _season,\\n  ) as unknown as MonicaOptimizedRecipe[]\\n}\\n\\nexport f"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1974,
        "column": 3,
        "context": "ystem.analyzeCuisineIngredients(\\n    _cuisine,\\n  ) as unknown as MonicaOptimizedRecipe[]\\n}\\n"
      }
    ],
    "src/data/unified/recipes.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 552,
        "column": 6,
        "context": "   const enhancedRecipe: EnhancedRecipe = {\\n      ...recipe, // Preserve ALL existing properties\\n\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 683,
        "column": 22,
        "context": "ength,\\n      kalchmRange: {\\n        min: Math.min(...kalchmValues),\\n        max: Math.max(...kalchmV"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 684,
        "column": 22,
        "context": " Math.min(...kalchmValues),\\n        max: Math.max(...kalchmValues),\\n        average: kalchmValues.re"
      }
    ],
    "src/data/unified/seasonal.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1363,
        "column": 6,
        "context": "(([season, profile]) => [\\n    season,\\n    {\\n      ...profile.ingredients;\\n      elementalInfluence: "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 187,
        "column": 35,
        "context": "ring_greens'],\\n          cookingMethod: 'grilling' as unknown as CookingMethod\\n        },\\n        '3"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 193,
        "column": 35,
        "context": "s', 'morels'],\\n          cookingMethod: 'roasting' as unknown as CookingMethod\\n        },\\n        '4"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 199,
        "column": 33,
        "context": "'new_potatoes'],\\n          cookingMethod: 'baking' as unknown as CookingMethod\\n        },\\n        '5"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 205,
        "column": 36,
        "context": "fava_beans'],\\n          cookingMethod: 'simmering' as unknown as CookingMethod\\n        },\\n        do"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 284,
        "column": 30,
        "context": "lon', 'cucumbers'],\\n          cookingMethod: 'raw' as unknown as CookingMethod\\n        },\\n        '3"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 290,
        "column": 37,
        "context": " 'peaches'],\\n          cookingMethod: 'fermenting' as unknown as CookingMethod\\n        },\\n        '5"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 296,
        "column": 35,
        "context": "ell_peppers'],\\n          cookingMethod: 'grilling' as unknown as CookingMethod\\n        },\\n        '6"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 302,
        "column": 35,
        "context": "mmer_squash'],\\n          cookingMethod: 'roasting' as unknown as CookingMethod\\n        },\\n        do"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 381,
        "column": 33,
        "context": "ples', 'pears'],\\n          cookingMethod: 'baking' as unknown as CookingMethod\\n        },\\n        '5"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 387,
        "column": 35,
        "context": "ies', 'figs'],\\n          cookingMethod: 'poaching' as unknown as CookingMethod\\n        },\\n        '6"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 393,
        "column": 35,
        "context": "et_potatoes'],\\n          cookingMethod: 'roasting' as unknown as CookingMethod\\n        },\\n        '8"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 399,
        "column": 35,
        "context": " 'mushrooms'],\\n          cookingMethod: 'sauteing' as unknown as CookingMethod\\n        },\\n        do"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 479,
        "column": 33,
        "context": "ples', 'pears'],\\n          cookingMethod: 'baking' as unknown as CookingMethod\\n        },\\n        '5"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 485,
        "column": 35,
        "context": "ies', 'figs'],\\n          cookingMethod: 'poaching' as unknown as CookingMethod\\n        },\\n        '6"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 491,
        "column": 35,
        "context": "et_potatoes'],\\n          cookingMethod: 'roasting' as unknown as CookingMethod\\n        },\\n        '8"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 497,
        "column": 35,
        "context": " 'mushrooms'],\\n          cookingMethod: 'sauteing' as unknown as CookingMethod\\n        },\\n        do"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 576,
        "column": 35,
        "context": "nter_squash'],\\n          cookingMethod: 'braising' as unknown as CookingMethod\\n        },\\n        '3"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 582,
        "column": 34,
        "context": "ale', 'leeks'],\\n          cookingMethod: 'stewing' as unknown as CookingMethod\\n        },\\n        '8"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 588,
        "column": 35,
        "context": "omegranates'],\\n          cookingMethod: 'poaching' as unknown as CookingMethod\\n        },\\n        '9"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 594,
        "column": 36,
        "context": "ranberries'],\\n          cookingMethod: 'simmering' as unknown as CookingMethod\\n        },\\n        do"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 680,
        "column": 35,
        "context": "ic', 'herbs'],\\n          cookingMethod: 'sauteing' as unknown as CookingMethod\\n        },\\n        ac"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 686,
        "column": 36,
        "context": ", 'carrots'],\\n          cookingMethod: 'simmering' as unknown as CookingMethod\\n        },\\n        ac"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 692,
        "column": 35,
        "context": ", 'potatoes'],\\n          cookingMethod: 'roasting' as unknown as CookingMethod\\n        },\\n        ac"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 698,
        "column": 33,
        "context": "les', 'grains'],\\n          cookingMethod: 'baking' as unknown as CookingMethod\\n        },\\n        do"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 719,
        "column": 64,
        "context": "cedCookingMethods = getAllEnhancedCookingMethods() as unknown as {\\n      [key: string]: EnhancedCook"
      }
    ],
    "src/data/unified/services/ElementalCalculator.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 36,
        "column": 6,
        "context": "instance.currentBalance = initialState || {\\n      ...elementalCore_1.DEFAULT_ELEMENTAL_PROPERTIES,\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 43,
        "column": 32,
        "context": "or.getInstance();\\n    instance.currentBalance = { ...newState };\\n    logger.debug('ElementalCalculat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 422,
        "column": 21,
        "context": " specific zodiac adjustments\\n    const result = { ...seasonalModifiers };\\n    Object.entries(specifi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 492,
        "column": 12,
        "context": "present\\n          const planetObj = {\\n            ...obj[key],\\n            name: isPlanetKey,\\n      "
      }
    ],
    "src/data/unified/services/errorHandler.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 89,
        "column": 85,
        "context": "tion(error, { extra: { type, severity, component, ...context } });\\n    return {\\n      error,\\n      t"
      }
    ],
    "src/data/unified/types/chakra.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 450,
        "column": 4,
        "context": "chakraEnergies, position, value) {\\n  return {\\n    ...chakraEnergies,\\n    [position]: value,\\n  };\\n}\\ne"
      }
    ],
    "src/data/unified/types/zodiac.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 184,
        "column": 4,
        "context": "createZodiacAffinity(affinities) {\\n  return {\\n    ...exports.DEFAULT_ZODIAC_AFFINITY,\\n    ...affinit"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 185,
        "column": 4,
        "context": "urn {\\n    ...exports.DEFAULT_ZODIAC_AFFINITY,\\n    ...affinities,\\n  };\\n}\\nexports.createZodiacAffinity"
      }
    ],
    "src/data/unified/unifiedFlavorEngine.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 506,
        "column": 34,
        "context": "lculate overlap\\n    const intersection = new Set([...origins1].filter(x => origins2.has(x)));\\n    co"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 507,
        "column": 27,
        "context": " => origins2.has(x)));\\n    const union = new Set([...origins1, ...origins2]);\\n\\n    const baseCompati"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 507,
        "column": 40,
        "context": "has(x)));\\n    const union = new Set([...origins1, ...origins2]);\\n\\n    const baseCompatibility = inte"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 559,
        "column": 34,
        "context": " method overlap\\n    const intersection = new Set([...methods1].filter(x => methods2.has(x)));\\n    co"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 560,
        "column": 27,
        "context": " => methods2.has(x)));\\n    const union = new Set([...methods1, ...methods2]);\\n\\n    const baseCompati"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 560,
        "column": 40,
        "context": "has(x)));\\n    const union = new Set([...methods1, ...methods2]);\\n\\n    const baseCompatibility = inte"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 683,
        "column": 12,
        "context": "s || []).map(o => o.toLowerCase()));\\n\\n    return [...new Set([...origins1].filter(x => origins2.has("
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 683,
        "column": 24,
        "context": "(o => o.toLowerCase()));\\n\\n    return [...new Set([...origins1].filter(x => origins2.has(x)))];\\n  }\\n\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1004,
        "column": 53,
        "context": " log.info('üî• Warming up UnifiedFlavorEngine cache...');\\n\\n    const profiles = Array.from(this.profi"
      }
    ],
    "src/data/unified/utils/astrology/core.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 32,
        "column": 28,
        "context": "led in production\\n */\\nconst debugLog = (_message, ...args) => {\\n  // Comment out console.log to avoi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 34,
        "column": 23,
        "context": " to avoid linting warnings\\n  // log.info(message, ...args);\\n};\\n/**\\n * A utility function for logging"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 40,
        "column": 28,
        "context": "led in production\\n */\\nconst errorLog = (_message, ...args) => {\\n  // Comment out console.error to av"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 42,
        "column": 28,
        "context": "void linting warnings\\n  // console.error(message, ...args);\\n};\\n// Add type assertion for zodiac sign"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 265,
        "column": 43,
        "context": "/ 30);\\n  // Calculate degree within sign (0-29.999...)\\n  const degree = normalizedLong % 30;\\n  // Ge"
      }
    ],
    "src/data/unified/utils/astrology/positions.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 19,
        "column": 28,
        "context": "led in production\\n */\\nconst debugLog = (_message, ...args) => {\\n  // Comment out console.log to avoi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 21,
        "column": 23,
        "context": " to avoid linting warnings\\n  // log.info(message, ...args);\\n};\\n// Updated reference data for July 2,"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 391,
        "column": 43,
        "context": "/ 30);\\n  // Calculate degree within sign (0-29.999...)\\n  const degree = normalizedLongitude % 30;\\n  "
      }
    ],
    "src/data/unified/utils/astrology/validation.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 24,
        "column": 29,
        "context": "ed in production\\n */\\nconst _debugLog = (_message, ...args) => {\\n  // Comment out console.log to avoi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 26,
        "column": 23,
        "context": " to avoid linting warnings\\n  // log.info(message, ...args);\\n};\\n/**\\n * A utility function for logging"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 32,
        "column": 28,
        "context": "led in production\\n */\\nconst errorLog = (_message, ...args) => {\\n  // Comment out console.error to av"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 34,
        "column": 28,
        "context": "void linting warnings\\n  // console.error(message, ...args);\\n};\\n// Cache for reliable positions\\nlet r"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 507,
        "column": 25,
        "context": "ect' && data !== null) {\\n      const position = { ...data };\\n      // Convert sign to lowercase if i"
      }
    ],
    "src/data/unified/utils/dateUtils.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 21,
        "column": 28,
        "context": "led in production\\n */\\nconst debugLog = (_message, ...args) => {\\n  // Comment out console.log to avoi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 23,
        "column": 23,
        "context": " to avoid linting warnings\\n  // log.info(message, ...args);\\n};\\n/**\\n * Get the current season based o"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 171,
        "column": 23,
        "context": "y.isArray(seasonDishes)) {\\n          allDishes = [...allDishes, ...seasonDishes];\\n        }\\n      })"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 171,
        "column": 37,
        "context": "onDishes)) {\\n          allDishes = [...allDishes, ...seasonDishes];\\n        }\\n      });\\n    }\\n  });\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 205,
        "column": 28,
        "context": "eDishes[season] : [];\\n    const combinedDishes = [...allSeasonDishes, ...seasonalDishes];\\n    debugL"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 205,
        "column": 48,
        "context": ";\\n    const combinedDishes = [...allSeasonDishes, ...seasonalDishes];\\n    debugLog(`Found ${combined"
      }
    ],
    "src/data/unified/utils/elementalUtils.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 73,
        "column": 13,
        "context": "properties', 'normalizeProperties');\\n    return { ...elementalCore_1.DEFAULT_ELEMENTAL_PROPERTIES };"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 86,
        "column": 13,
        "context": "(sum is 0)', 'normalizeProperties');\\n    return { ...elementalCore_1.DEFAULT_ELEMENTAL_PROPERTIES };"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 99,
        "column": 6,
        "context": "perties');\\n      }\\n      return acc;\\n    },\\n    { ...elementalCore_1.DEFAULT_ELEMENTAL_PROPERTIES },"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 114,
        "column": 29,
        "context": "ents');\\n    return {\\n      elementalProperties: { ...elementalCore_1.DEFAULT_ELEMENTAL_PROPERTIES },"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 121,
        "column": 6,
        "context": "or.getCurrentElementalState();\\n    return {\\n      ...recipe,\\n      elementalProperties: currentState"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 127,
        "column": 4,
        "context": "properties to ensure they sum to 1\\n  return {\\n    ...recipe,\\n    elementalProperties: (0, exports.no"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 170,
        "column": 22,
        "context": "fe default balance to start\\n    const balance = { ...elementalCore_1.DEFAULT_ELEMENTAL_PROPERTIES };"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 246,
        "column": 30,
        "context": "e dominant element?\\n    const maxValue = Math.max(...values);\\n    const intensity = maxValue / 0.25 "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 253,
        "column": 17,
        "context": "\\n      balance,\\n      intensity,\\n      profile: { ...properties },\\n    };\\n  },\\n  getSuggestedCooking"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 266,
        "column": 25,
        "context": "nt) {\\n      case 'Fire':\\n        suggestions.push(...fireTechniques.slice(0, 3));\\n        break;\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 269,
        "column": 25,
        "context": "eak;\\n      case 'Water':\\n        suggestions.push(...waterTechniques.slice(0, 3));\\n        break;\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 272,
        "column": 25,
        "context": "eak;\\n      case 'Earth':\\n        suggestions.push(...earthTechniques.slice(0, 3));\\n        break;\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 275,
        "column": 25,
        "context": "break;\\n      case 'Air':\\n        suggestions.push(...AirTechniques.slice(0, 3));\\n        break;\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 334,
        "column": 12,
        "context": "ecommendations.push('anytime');\\n    }\\n    return [...new Set(recommendations)]; // Remove duplicates"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 337,
        "column": 13,
        "context": "\\n  getDefaultElementalProperties() {\\n    return { ...elementalCore_1.DEFAULT_ELEMENTAL_PROPERTIES };"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 382,
        "column": 31,
        "context": "anetary influences\\n    const transformedProps = { ...elemProps };\\n    let totalPlanetaryInfluence = "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 459,
        "column": 6,
        "context": "ence + uniqueness) / 3,\\n    );\\n    return {\\n      ...item,\\n      elementalProperties: transformedPro"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 543,
        "column": 3,
        "context": "trengtheningElement = getStrengtheningElement;\\n// ... rest of the file ...\\n// Fix the function decla"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 543,
        "column": 24,
        "context": " getStrengtheningElement;\\n// ... rest of the file ...\\n// Fix the function declarations to use proper"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 546,
        "column": 5,
        "context": "nhanceVegetableTransformations(vegetables) {\\n  // ... implementation ...\\n  return vegetables;\\n}\\nexpo"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 546,
        "column": 24,
        "context": "sformations(vegetables) {\\n  // ... implementation ...\\n  return vegetables;\\n}\\nexports.enhanceVegetabl"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 551,
        "column": 5,
        "context": "tions;\\nfunction enhanceOilProperties(oils) {\\n  // ... implementation ...\\n  return oils;\\n}\\nexports.en"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 551,
        "column": 24,
        "context": "anceOilProperties(oils) {\\n  // ... implementation ...\\n  return oils;\\n}\\nexports.enhanceOilProperties "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 556,
        "column": 5,
        "context": "tion fixIngredientMappings(rawIngredients) {\\n  // ... implementation ...\\n  return rawIngredients;\\n}\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 556,
        "column": 24,
        "context": "appings(rawIngredients) {\\n  // ... implementation ...\\n  return rawIngredients;\\n}\\nexports.fixIngredie"
      }
    ],
    "src/examples/ServiceIntegrationExample.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 18,
        "column": 40,
        "context": " services\\n    log.info('\\n1. Initializing services...');\\n    await servicesManager.initialize();\\n\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 22,
        "column": 45,
        "context": "ager\\n    log.info('\\n2. Getting service references...');\\n    const {\\n      alchemicalEngine,\\n      a"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 32,
        "column": 54,
        "context": "log.info('\\n3. Getting current planetary positions...');\\n    const planetaryPositions = await astrol"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 37,
        "column": 76,
        "context": "ting elemental properties from planetary positions...');\\n    // Apply surgical type casting with var"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 47,
        "column": 52,
        "context": "  log.info('\\n5. Calculating thermodynamic metrics...');\\n    // Apply surgical type casting with var"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 57,
        "column": 53,
        "context": " log.info('\\n6. Getting ingredient recommendations...');\\n    const ingredientRecommendations = await"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 70,
        "column": 49,
        "context": "\\n    log.info('\\n7. Getting recipe recommendations...');\\n    const recipeRecommendations = await rec"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 83,
        "column": 57,
        "context": ".info('\\n8. Getting cooking method recommendations...');\\n    const cookingMethodRecommendations = aw"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 96,
        "column": 70,
        "context": "alculating elemental compatibility between recipes...');\\n    // For this example, we'll create mock "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 122,
        "column": 46,
        "context": "ipe\\n    log.info('\\n10. Generating a fusion recipe...');\\n    // Apply surgical type casting with var"
      }
    ],
    "src/hooks/index.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 56,
        "column": 4,
        "context": "ce as any)?.Air || 0) * 0.2,\\n  };\\n\\n  return {\\n    ...combinedState,\\n    tarotInfluence,\\n    astrolog"
      }
    ],
    "src/hooks/useAgentHooks.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 49,
        "column": 24,
        "context": "al: 5, // 5 minutes\\n  };\\n\\n  const finalConfig = { ...defaultConfig, ...config };\\n  const qa = getAut"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 49,
        "column": 42,
        "context": "s\\n  };\\n\\n  const finalConfig = { ...defaultConfig, ...config };\\n  const qa = getAutomatedQualityAssur"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 66,
        "column": 28,
        "context": "te.isActive) return;\\n\\n    setHookState(prev => ({ ...prev, isActive: true }));\\n\\n    // Set up valida"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 95,
        "column": 14,
        "context": "            setHookState(prev => ({\\n              ...prev;\\n              lastValidation: Date.now(),"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 97,
        "column": 35,
        "context": "n: Date.now(),\\n              validationResults: { ...prev.validationResults, ...results },\\n         "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 97,
        "column": 62,
        "context": "  validationResults: { ...prev.validationResults, ...results },\\n              campaignTriggers: qa.g"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 121,
        "column": 28,
        "context": "urrent = null;\\n    }\\n\\n    setHookState(prev => ({ ...prev, isActive: false }));\\n    logger.info('Age"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 139,
        "column": 14,
        "context": "            setHookState(prev => ({\\n              ...prev;\\n              campaignTriggers: [...prev."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 140,
        "column": 33,
        "context": "        ...prev;\\n              campaignTriggers: [...prev.campaignTriggers, trigger]\\n            }))"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 146,
        "column": 10,
        "context": "     }\\n\\n        setHookState(prev => ({\\n          ...prev;\\n          lastValidation: Date.now(),\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 148,
        "column": 31,
        "context": "ation: Date.now(),\\n          validationResults: { ...prev.validationResults, ...results },\\n         "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 148,
        "column": 58,
        "context": "  validationResults: { ...prev.validationResults, ...results },\\n          qualityMetrics: qa.getQual"
      }
    ],
    "src/hooks/useAlchemical.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 22,
        "column": 26,
        "context": "async () => {\\n    try {\\n      setState(prev => ({ ...prev, isLoading: true, error: null }));\\n\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 44,
        "column": 8,
        "context": "catch (error) {\\n      setState(prev => ({\\n        ...prev,\\n        isLoading: false,\\n        error: "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 56,
        "column": 4,
        "context": "\\n  }, [fetchPlanetaryPositions]);\\n\\n  return {\\n    ...state,\\n    refresh: fetchPlanetaryPositions,\\n  "
      }
    ],
    "src/hooks/useAlchemicalRecommendations.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 117,
        "column": 14,
        "context": "            const convertedItem = {\\n              ...item;\\n              // Ensure all required Alch"
      }
    ],
    "src/hooks/useAstrologicalInfluence.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 104,
        "column": 4,
        "context": "gicalState, planetaryPositions]);\\n\\n  return {\\n    ...influence;\\n    isLoading: isLoading || !astrolo"
      }
    ],
    "src/hooks/useAstrologicalState.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 203,
        "column": 14,
        "context": "      }\\n\\n      // Ensure uniqueness\\n      return [...new Set(activePlanets)];\\n    },\\n    [],\\n  ),\\n\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 244,
        "column": 12,
        "context": " prev\\n          }\\n\\n          return {\\n            ...prev;\\n            currentZodiac,\\n            cu"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 289,
        "column": 4,
        "context": " the astro state with isReady flag\\n  return {\\n    ...astroState;\\n    isReady,\\n    isDaytime: isDayti"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 296,
        "column": 42,
        "context": "gnment:\\n      astroState.currentPlanetaryAlignment as unknown as PlanetaryAlignment,\\n    lunarPhase:"
      }
    ],
    "src/hooks/useAstrologize.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 99,
        "column": 10,
        "context": "        minute,\\n          zodiacSystem,\\n          ...(location && { latitude: location.latitude, lon"
      }
    ],
    "src/hooks/useAstrology.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 96,
        "column": 28,
        "context": "gitude are required';\\n        setState(prev => ({ ...prev, error, loading: false }));\\n        return"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 102,
        "column": 28,
        "context": " between -90 and 90';\\n        setState(prev => ({ ...prev, error, loading: false }));\\n        return"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 108,
        "column": 28,
        "context": "etween -180 and 180';\\n        setState(prev => ({ ...prev, error, loading: false }));\\n        return"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 121,
        "column": 26,
        "context": "xistingRequest\\n      }\\n\\n      setState(prev => ({ ...prev, loading: true, error: null }));\\n\\n      //"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 172,
        "column": 14,
        "context": ") {\\n            setState(prev => ({\\n              ...prev;\\n              loading: false,\\n           "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 194,
        "column": 14,
        "context": ") {\\n            setState(prev => ({\\n              ...prev;\\n              loading: false,\\n           "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 272,
        "column": 16,
        "context": "              setState(prev => ({\\n                ...prev;\\n                data: {\\n                 "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 274,
        "column": 18,
        "context": "..prev;\\n                data: {\\n                  ...prev.data;\\n                  elementalBalance: "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 398,
        "column": 12,
        "context": "prev: AstrologyState) =>\\n          ({\\n            ...prev;\\n            loading: false,\\n            e"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 402,
        "column": 14,
        "context": " to API error',\\n            data: {\\n              ...prev.data;\\n              planetaryPositions: po"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 488,
        "column": 10,
        "context": ".current) {\\n        setState(prev => ({\\n          ...prev;\\n          data: {\\n            ...prev.dat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 490,
        "column": 12,
        "context": "\\n          ...prev;\\n          data: {\\n            ...prev.data;\\n            elementalBalance\\n       "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 553,
        "column": 4,
        "context": " longitude, fetchAstrologyData]);\\n\\n  return {\\n    ...state;\\n    fetchAstrologyData,\\n    calculateEle"
      }
    ],
    "src/hooks/useCampaignMonitoring.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 86,
        "column": 26,
        "context": "async () => {\\n    try {\\n      setState(prev => ({ ...prev, loading: true, error: null }));\\n\\n      co"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 91,
        "column": 8,
        "context": "ontrolPanel();\\n\\n      setState(prev => ({\\n        ...prev;\\n        controlPanel,\\n        activeCampa"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 132,
        "column": 8,
        "context": "campaign data';\\n      setState(prev => ({\\n        ...prev;\\n        loading: false,\\n        error: er"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 152,
        "column": 28,
        "context": "d to start campaign';\\n        setState(prev => ({ ...prev, error: errorMessage }));\\n        throw er"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 170,
        "column": 28,
        "context": "d to pause campaign';\\n        setState(prev => ({ ...prev, error: errorMessage }));\\n        return f"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 188,
        "column": 28,
        "context": " to resume campaign';\\n        setState(prev => ({ ...prev, error: errorMessage }));\\n        return f"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 207,
        "column": 28,
        "context": "ed to stop campaign';\\n        setState(prev => ({ ...prev, error: errorMessage }));\\n        return f"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 222,
        "column": 28,
        "context": "get campaign status';\\n        setState(prev => ({ ...prev, error: errorMessage }));\\n        return n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 236,
        "column": 28,
        "context": "o schedule campaign';\\n        setState(prev => ({ ...prev, error: errorMessage }));\\n        throw er"
      }
    ],
    "src/hooks/useChakraInfluencedFood.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 322,
        "column": 14,
        "context": "s scoreDetails\\n            return {\\n              ...ingredient;\\n              scoreDetails: {\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 324,
        "column": 16,
        "context": "nt;\\n              scoreDetails: {\\n                ...(ingredient.scoreDetails || {}),\\n              "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 451,
        "column": 12,
        "context": "    }\\n          }\\n\\n          return {\\n            ...ingredient;\\n            scoreDetails: {\\n       "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 453,
        "column": 14,
        "context": "edient;\\n            scoreDetails: {\\n              ...(ingredient.scoreDetails || {}),\\n              "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 69,
        "column": 66,
        "context": "ryHour, setPlanetaryHour] = useState<Planet>('sun' as unknown as Planet);\\n\\n  // Create service insta"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 95,
        "column": 37,
        "context": "anetName)) {\\n          setPlanetaryHour(planetName as unknown as Planet);\\n        }\\n      }\\n    } ca"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 113,
        "column": 34,
        "context": "iac || 'aries',\\n      planetaryHour: planetaryHour as unknown as Planet,\\n      aspects: state.astrol"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 117,
        "column": 5,
        "context": "astrologicalState.tarotPlanetaryBoosts || {}\\n    } as unknown as AstrologicalState;\\n  }, [\\n    curre"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 143,
        "column": 39,
        "context": "e() : p)),\\n          : ['sun', 'moon', 'mercury']) as unknown as Planet[],\\n        planetaryHour,\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 264,
        "column": 40,
        "context": ") * 0.3 +\\n                ((Number((chakraEnergies as unknown as any).thirdEye) || chakraEnergies.th"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 305,
        "column": 44,
        "context": "re +;\\n                    ((Number((chakraEnergies as unknown as any).thirdEye) ||\\n                 "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 358,
        "column": 39,
        "context": "e() : p)),\\n          : ['sun', 'moon', 'mercury']) as unknown as Planet[],\\n        planetaryHour,\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 394,
        "column": 38,
        "context": "10) * 0.3 +\\n              ((Number((chakraEnergies as unknown as any).thirdEye) || chakraEnergies.th"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 436,
        "column": 42,
        "context": "core +;\\n                  ((Number((chakraEnergies as unknown as any).thirdEye) || chakraEnergies.th"
      }
    ],
    "src/hooks/useContextServiceBridge.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 52,
        "column": 4,
        "context": "es when available\\n  const mergedPositions = {\\n    ...contextPositions,\\n    ...servicePositions,\\n  };"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 53,
        "column": 4,
        "context": " mergedPositions = {\\n    ...contextPositions,\\n    ...servicePositions,\\n  };\\n\\n  return {\\n    // Basic"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 201,
        "column": 30,
        "context": "useCustomBridge() {\\n    const { isLoading, error, ...services } = useServices();\\n    const service ="
      }
    ],
    "src/hooks/useCookingMethods.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 107,
        "column": 26,
        "context": "and deduplicate methods\\n      const allMethods = [...convertedMethods, ...additionalMethods];\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 107,
        "column": 47,
        "context": "ds\\n      const allMethods = [...convertedMethods, ...additionalMethods];\\n      const uniqueMethods ="
      }
    ],
    "src/hooks/useCurrentChart.ts": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`;\n            })\n            .join('')}\n        </g>\n        \n        <!-- Degree circles -->\n        <circle cx='160' cy='160' r='120' fill='none' stroke='#ccc' stroke-width='0.5' stroke-dasharray='2,2'/>;\n        <circle cx='160' cy='160' r='80' fill='none' stroke='#ccc' stroke-width='0.5' stroke-dasharray='2,2'/>;\n        <circle cx='160' cy='160' r='40' fill='none' stroke='#ccc' stroke-width='0.5' stroke-dasharray='2,2'/>;\n        \n        <!-- Ascendant marker -->\n        ${\n          chartData.ascendant\n            ? (() => {\n                // Get the sign index\n                const signIndex = Object.keys(zodiacSymbols).findIndex(;\n                  sign => sign === chartData.ascendant\n                );\n                const ascAngle = ((signIndex * 30 - 90) * Math.PI) / 180; // Start from top\n                const ascX = 160 + 155 * Math.cos(ascAngle);\n                const ascY = 160 + 155 * Math.sin(ascAngle);\n\n                return `\n            <line x1='160' y1='160' x2='${ascX}' y2='${ascY}",
        "line": 226,
        "column": 12,
        "context": "cSymbols[sign]}\\n              </text>\\n            `;\\n            })\\n            .join('')}\\n        <"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`;\n              })()\n            : ''\n        }\n        \n        <!-- North Node (outside the circle at the top) -->\n        <g class='node north-node'>;\n          <circle cx='160' cy='30' r='15' fill='#7272f7' fill-opacity='0.2' stroke='#7272f7' stroke-width='0.5' />;\n          <text x='160' y='30' text-anchor='middle' dominant-baseline='middle' fill='#7272f7' font-size='14' font-weight='bold'>;\n            ‚òä\n          </text>\n          <text x='160' y='50' text-anchor='middle' dominant-baseline='middle' fill='#7272f7' font-size='10'>;\n            North Node\n          </text>\n        </g>\n        \n        <!-- South Node (outside the circle at the bottom) -->\n        <g class='node south-node'>;\n          <circle cx='160' cy='290' r='15' fill='#e06c75' fill-opacity='0.2' stroke='#e06c75' stroke-width='0.5' />;\n          <text x='160' y='290' text-anchor='middle' dominant-baseline='middle' fill='#e06c75' font-size='14' font-weight='bold'>;\n            ‚òã\n          </text>\n          <text x='160' y='310' text-anchor='middle' dominant-baseline='middle' fill='#e06c75' font-size='10'>;\n            South Node\n          </text>\n        </g>\n        \n        <!-- Planets and their connections to signs -->\n        <g class='planets'>;\n          ${planetPositions\n            .map(p => {\n              // Skip the North and South Nodes as they're now drawn separately\n              if (p.planet === 'NorthNode' || p.planet === 'SouthNode') return '';\n\n              return `\n              <g class='planet' filter='url(#glow)'>;\n                <circle cx='${p.x}' cy='${p.y}",
        "line": 257,
        "column": 10,
        "context": ";\\n              ASC\\n            </text>\\n          `;\\n              })()\\n            : ''\\n        }\\n "
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`;\n            })\n            .join('')}\n        </g>\n        \n        <!-- Degree circles -->\n        <circle cx='160' cy='160' r='120' fill='none' stroke='#ccc' stroke-width='0.5' stroke-dasharray='2,2'/>;\n        <circle cx='160' cy='160' r='80' fill='none' stroke='#ccc' stroke-width='0.5' stroke-dasharray='2,2'/>;\n        <circle cx='160' cy='160' r='40' fill='none' stroke='#ccc' stroke-width='0.5' stroke-dasharray='2,2'/>;\n        \n        <!-- Ascendant marker -->\n        ${\n          chartData.ascendant\n            ? (() => {\n                // Get the sign index\n                const signIndex = Object.keys(zodiacSymbols).findIndex(;\n                  sign => sign === chartData.ascendant\n                );\n                const ascAngle = ((signIndex * 30 - 90) * Math.PI) / 180; // Start from top\n                const ascX = 160 + 155 * Math.cos(ascAngle);\n                const ascY = 160 + 155 * Math.sin(ascAngle);\n\n                return `\n            <line x1='160' y1='160' x2='${ascX}' y2='${ascY}' ;\n                  stroke='#ff4d4d' stroke-width='2' stroke-dasharray='5,3' />;\n            <text x='${160 + 165 * Math.cos(ascAngle)}' ;\n                  y='${160 + 165 * Math.sin(ascAngle)}' ;\n                  text-anchor='middle' dominant-baseline='middle' ;\n                  fill='#ff4d4d' font-weight='bold' font-size='12'>;\n              ASC\n            </text>\n          `;\n              }",
        "line": 226,
        "column": 12,
        "context": "cSymbols[sign]}\\n              </text>\\n            `;\\n            })\\n            .join('')}\\n        <"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n          chartData.ascendant\n            ? (() => {\n                // Get the sign index\n                const signIndex = Object.keys(zodiacSymbols).findIndex(;\n                  sign => sign === chartData.ascendant\n                );\n                const ascAngle = ((signIndex * 30 - 90) * Math.PI) / 180; // Start from top\n                const ascX = 160 + 155 * Math.cos(ascAngle);\n                const ascY = 160 + 155 * Math.sin(ascAngle);\n\n                return `\n            <line x1='160' y1='160' x2='${",
        "line": 237,
        "column": 8,
        "context": "       \\n        <!-- Ascendant marker -->\\n        ${\\n          chartData.ascendant\\n            ? (()"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${planetPositions\n            .map(p => {\n              // Skip the North and South Nodes as they're now drawn separately\n              if (p.planet === 'NorthNode' || p.planet === 'SouthNode') return '';\n\n              return `\n              <g class='planet' filter='url(#glow)'>;\n                <circle cx='${",
        "line": 286,
        "column": 10,
        "context": " signs -->\\n        <g class='planets'>;\\n          ${planetPositions\\n            .map(p => {\\n        "
      }
    ],
    "src/hooks/useDebugSettings.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 39,
        "column": 22,
        "context": "tings = JSON.parse(stored);\\n        setSettings({ ...DEFAULT_SETTINGS, ...parsedSettings });\\n      }"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 39,
        "column": 43,
        "context": "ored);\\n        setSettings({ ...DEFAULT_SETTINGS, ...parsedSettings });\\n      }\\n    } catch (error) "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 49,
        "column": 32,
        "context": "ugSettings>) => {\\n      const updatedSettings = { ...settings, ...newSettings };\\n      setSettings(u"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 49,
        "column": 45,
        "context": "=> {\\n      const updatedSettings = { ...settings, ...newSettings };\\n      setSettings(updatedSetting"
      }
    ],
    "src/hooks/useElementalState.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 75,
        "column": 6,
        "context": "ariance * 4); // Scale to 0-1\\n\\n    return {\\n      ...normalized;\\n      dominant,\\n      balance\\n    }"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 82,
        "column": 4,
        "context": "ties;\\n  }, [planetaryPositions]);\\n\\n  return {\\n    ...elementalState;\\n    isLoading\\n  };\\n}\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 25,
        "column": 7,
        "context": "    dominant: 'Fire',\\n        balance: 1.0\\n      } as unknown as ElementalProperties;\\n    }\\n\\n    // "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 78,
        "column": 5,
        "context": "...normalized;\\n      dominant,\\n      balance\\n    } as unknown as ElementalProperties;\\n  }, [planetar"
      }
    ],
    "src/hooks/useEnterpriseIntelligence.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 145,
        "column": 8,
        "context": "ecommendations || [],\\n      validation: [\\n        ...((\\n          state.analysis\\n            .valida"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 149,
        "column": 8,
        "context": "\\n        )?.dataIntegrity?.issues || []),\\n        ...((\\n          state.analysis\\n            .valida"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 153,
        "column": 8,
        "context": "?.astrologicalConsistency?.issues || []),\\n        ...((\\n          state.analysis.validationIntellige"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 163,
        "column": 8,
        "context": "ckStrategies || [],\\n      optimization: [\\n        ...((\\n          state.analysis as unknown as {\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 173,
        "column": 8,
        "context": "ons?.performance?.recommendations || []),\\n        ...((\\n          state.analysis as unknown as {\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 178,
        "column": 8,
        "context": "ations?.accuracy?.recommendations || []),\\n        ...((\\n          state.analysis as unknown as {\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 183,
        "column": 8,
        "context": "?.userExperience?.recommendations || []),\\n        ...((\\n          state.analysis as unknown as {\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 204,
        "column": 6,
        "context": "ysis = state.analysis;\\n    const issues = [\\n      ...((\\n        analysis.validationIntelligence as u"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 209,
        "column": 6,
        "context": "?.overallValidation?.criticalIssues || []),\\n      ...((analysis.safetyIntelligence as { riskAssessme"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 218,
        "column": 6,
        "context": "       : [])\\n    ];\\n\\n    const warnings = [\\n      ...((\\n        analysis.validationIntelligence as u"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 225,
        "column": 6,
        "context": " }\\n      )?.dataIntegrity?.warnings || []),\\n      ...((\\n        analysis.validationIntelligence as u"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 230,
        "column": 6,
        "context": "?.astrologicalConsistency?.warnings || []),\\n      ...((analysis.validationIntelligence as { elementa"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 232,
        "column": 6,
        "context": "       ?.elementalHarmony?.warnings || []),\\n      ...((analysis.safetyIntelligence as { monitoringAl"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 275,
        "column": 8,
        "context": "lt | null> => {\\n      setState(prev => ({\\n        ...prev;\\n        isAnalyzing: true,\\n        error:"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 299,
        "column": 10,
        "context": "Metrics();\\n\\n        setState(prev => ({\\n          ...prev;\\n          analysis,\\n          isAnalyzing"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 322,
        "column": 10,
        "context": "occurred';\\n\\n        setState(prev => ({\\n          ...prev;\\n          isAnalyzing: false,\\n          e"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 337,
        "column": 6,
        "context": "useCallback(() => {\\n    setState(prev => ({\\n      ...prev;\\n      analysis: null,\\n      error: null,\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 362,
        "column": 6,
        "context": "ice.resetMetrics();\\n    setState(prev => ({\\n      ...prev;\\n      performanceMetrics: {\\n        analy"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 418,
        "column": 8,
        "context": "manceMetrics();\\n      setState(prev => ({\\n        ...prev;\\n        performanceMetrics: metrics\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 492,
        "column": 6,
        "context": "mo(() => {\\n    const allRecommendations = [\\n      ...recommendations.recipe.map(r => ({ type: 'recip"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 493,
        "column": 6,
        "context": " 'recipe', text: r, priority: 'medium' })),\\n      ...recommendations.ingredient.map(r => ({ type: 'i"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 494,
        "column": 6,
        "context": "gredient', text: r, priority: 'medium' })),\\n      ...recommendations.validation.map(r => ({ type: 'v"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 495,
        "column": 6,
        "context": "alidation', text: r, priority: 'high' })),,\\n      ...recommendations.safety.map(r => ({ type: 'safet"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 496,
        "column": 6,
        "context": ": 'safety', text: r, priority: 'high' })),,\\n      ...recommendations.optimization.map(r => ({\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 137,
        "column": 31,
        "context": "    state.analysis\\n            .recipeIntelligence as unknown as EnterpriseIntelligenceAnalysisState"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 142,
        "column": 35,
        "context": "state.analysis\\n            .ingredientIntelligence as unknown as EnterpriseIntelligenceAnalysisState"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 147,
        "column": 35,
        "context": "state.analysis\\n            .validationIntelligence as unknown as EnterpriseIntelligenceAnalysisState"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 151,
        "column": 35,
        "context": "state.analysis\\n            .validationIntelligence as unknown as EnterpriseIntelligenceAnalysisState"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 154,
        "column": 47,
        "context": "((\\n          state.analysis.validationIntelligence as unknown as {\\n            elementalHarmony?: { "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 164,
        "column": 24,
        "context": "mization: [\\n        ...((\\n          state.analysis as unknown as {\\n            optimizationRecommend"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 174,
        "column": 24,
        "context": "ons || []),\\n        ...((\\n          state.analysis as unknown as {\\n            optimizationRecommend"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 179,
        "column": 24,
        "context": "ons || []),\\n        ...((\\n          state.analysis as unknown as {\\n            optimizationRecommend"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 184,
        "column": 24,
        "context": "ons || []),\\n        ...((\\n          state.analysis as unknown as {\\n            optimizationRecommend"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 205,
        "column": 39,
        "context": "     ...((\\n        analysis.validationIntelligence as unknown as {\\n          overallValidation?: { c"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 219,
        "column": 39,
        "context": "     ...((\\n        analysis.validationIntelligence as unknown as {\\n          dataIntegrity?: { warni"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 226,
        "column": 39,
        "context": "     ...((\\n        analysis.validationIntelligence as unknown as {\\n          astrologicalConsistency"
      }
    ],
    "src/hooks/useIngredientRecommendations.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 93,
        "column": 26,
        "context": "if (isLoading) return,\\n\\n      setState(prev => ({ ...prev, isLoading: true, error: null }));\\n\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 154,
        "column": 19,
        "context": "ElementalProfile,\\n          ),\\n          return { ...ingredient, score };\\n        });\\n\\n        // Ap"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 195,
        "column": 10,
        "context": "ndations);\\n\\n        setState(prev => ({\\n          ...prev;\\n          ingredients: filteredIngredient"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 201,
        "column": 10,
        "context": "h (error) {\\n        setState(prev => ({\\n          ...prev;\\n          isLoading: false,\\n          err"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 213,
        "column": 6,
        "context": "a['filters']>) => {\\n    setState(prev => ({\\n      ...prev;\\n      filters: { ...prev.filters, ...newF"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 214,
        "column": 17,
        "context": "tState(prev => ({\\n      ...prev;\\n      filters: { ...prev.filters, ...newFilters }\\n    }));\\n  };\\n\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 214,
        "column": 34,
        "context": "\\n      ...prev;\\n      filters: { ...prev.filters, ...newFilters }\\n    }));\\n  };\\n\\n  return {\\n    ...s"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 219,
        "column": 4,
        "context": "rs, ...newFilters }\\n    }));\\n  };\\n\\n  return {\\n    ...state;\\n    recommendations,\\n    updateFilters,\\n"
      }
    ],
    "src/hooks/useIngredientSearch.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 49,
        "column": 10,
        "context": "    try {\\n        const ingredients = [\\n          ...(getAllVegetables() as unknown as Ingredient[])"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 50,
        "column": 10,
        "context": "getables() as unknown as Ingredient[]),\\n          ...(getAllProteins() as unknown as Ingredient[]),\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 51,
        "column": 10,
        "context": "Proteins() as unknown as Ingredient[]),\\n          ...(getAllHerbs() as unknown as Ingredient[]),\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 52,
        "column": 10,
        "context": "AllHerbs() as unknown as Ingredient[]),\\n          ...(getAllSpices() as unknown as Ingredient[]),\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 53,
        "column": 10,
        "context": "llSpices() as unknown as Ingredient[]),\\n          ...(getAllGrains() as unknown as Ingredient[]),\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 54,
        "column": 10,
        "context": "llGrains() as unknown as Ingredient[]),\\n          ...(Object.values(ingredientsMap || {}).filter(Boo"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 109,
        "column": 8,
        "context": "edients.slice(0, 20).map(ingredient => ({\\n        ...ingredient;\\n        searchScore: 1,\\n        mat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 143,
        "column": 12,
        "context": "operties match');\\n\\n          return {\\n            ...ingredient;\\n            searchScore: totalScore"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 156,
        "column": 6,
        "context": "gredients.slice(0, 50).map(ingredient => ({\\n      ...ingredient;\\n      searchScore: 1,\\n      matchRe"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 216,
        "column": 10,
        "context": "   ) /\\n            4;\\n\\n        return {\\n          ...ingredient;\\n          searchScore: harmony,\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 49,
        "column": 32,
        "context": "t ingredients = [\\n          ...(getAllVegetables() as unknown as Ingredient[]),\\n          ...(getAll"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 50,
        "column": 30,
        "context": "n as Ingredient[]),\\n          ...(getAllProteins() as unknown as Ingredient[]),\\n          ...(getAll"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 51,
        "column": 27,
        "context": "nown as Ingredient[]),\\n          ...(getAllHerbs() as unknown as Ingredient[]),\\n          ...(getAll"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 52,
        "column": 28,
        "context": "own as Ingredient[]),\\n          ...(getAllSpices() as unknown as Ingredient[]),\\n          ...(getAll"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 53,
        "column": 28,
        "context": "own as Ingredient[]),\\n          ...(getAllGrains() as unknown as Ingredient[]),\\n          ...(Object"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 54,
        "column": 65,
        "context": "bject.values(ingredientsMap || {}).filter(Boolean) as unknown as Ingredient[])\\n        ] as Ingredie"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 131,
        "column": 25,
        "context": "  const qualitiesScore =\\n            (((ingredient as unknown as any).qualities as string[]) || []);"
      }
    ],
    "src/hooks/usePerformanceMetrics.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 64,
        "column": 6,
        "context": ".current.length;\\n\\n    setMetrics(prev => ({\\n      ...prev;\\n      renderTime,\\n      componentRenderCo"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 82,
        "column": 10,
        "context": "artTime;\\n\\n        setMetrics(prev => ({\\n          ...prev;\\n          dataFetchTime: fetchTime,\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 93,
        "column": 10,
        "context": "nt += 1;\\n\\n        setMetrics(prev => ({\\n          ...prev;\\n          dataFetchTime: fetchTime,\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 117,
        "column": 8,
        "context": "ory;\\n      }\\n\\n      setMetrics(prev => ({\\n        ...prev;\\n        memoryUsage: currentMemory,\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 131,
        "column": 8,
        "context": "urrent += 1;\\n\\n      setMetrics(prev => ({\\n        ...prev;\\n        errorCount: errorCountRef.current"
      }
    ],
    "src/hooks/usePlanetaryHours.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 58,
        "column": 10,
        "context": "ch (error) {\\n        setData(prev => ({\\n          ...prev,\\n          isLoading: false,\\n          err"
      }
    ],
    "src/hooks/useRealtimePlanetaryPositions.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 46,
        "column": 24,
        "context": "useCallback(async () => {\\n    setState(prev => ({ ...prev, loading: true, error: null }));\\n\\n    try "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 67,
        "column": 8,
        "context": "catch (error) {\\n      setState(prev => ({\\n        ...prev;\\n        loading: false,\\n        error: er"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 95,
        "column": 4,
        "context": "etchPositions, refreshInterval]);\\n\\n  return {\\n    ...state;\\n    refresh: forceRefresh,\\n    isRealtim"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 117,
        "column": 24,
        "context": "useCallback(async () => {\\n    setState(prev => ({ ...prev, loading: true, error: null }));\\n\\n    try "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 137,
        "column": 8,
        "context": "catch (error) {\\n      setState(prev => ({\\n        ...prev;\\n        loading: false,\\n        error: er"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 149,
        "column": 4,
        "context": "itions();\\n  }, [fetchPositions]);\\n\\n  return {\\n    ...state;\\n    refresh: fetchPositions,\\n    isRealt"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 53,
        "column": 8,
        "context": "(\\n        location,\\n        zodiacSystem,\\n      )) as unknown as { [key: string]: PlanetPosition };\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 125,
        "column": 8,
        "context": ",\\n        location,\\n        zodiacSystem,\\n      )) as unknown as { [key: string]: PlanetPosition };\\n"
      }
    ],
    "src/hooks/useRecipeRecommendations.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 42,
        "column": 6,
        "context": " null,\\n    filters: {\\n      maxResults: 10,\\n      ...initialFilters\\n    }\\n  });\\n\\n  const currentElem"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 92,
        "column": 26,
        "context": "(astroLoading) return,\\n\\n      setState(prev => ({ ...prev, isLoading: true, error: null }));\\n\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 132,
        "column": 19,
        "context": "ElementalProfile,\\n          ),\\n          return { ...recipe, score };\\n        });\\n\\n        // Apply "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 154,
        "column": 10,
        "context": "ts || 10);\\n\\n        setState(prev => ({\\n          ...prev;\\n          recipes: filteredRecipes,\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 160,
        "column": 10,
        "context": "h (error) {\\n        setState(prev => ({\\n          ...prev;\\n          isLoading: false,\\n          err"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 172,
        "column": 6,
        "context": "a['filters']>) => {\\n    setState(prev => ({\\n      ...prev;\\n      filters: { ...prev.filters, ...newF"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 173,
        "column": 17,
        "context": "tState(prev => ({\\n      ...prev;\\n      filters: { ...prev.filters, ...newFilters }\\n    }));\\n  };\\n\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 173,
        "column": 34,
        "context": "\\n      ...prev;\\n      filters: { ...prev.filters, ...newFilters }\\n    }));\\n  };\\n\\n  return {\\n    ...s"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 178,
        "column": 4,
        "context": "rs, ...newFilters }\\n    }));\\n  };\\n\\n  return {\\n    ...state;\\n    updateFilters,\\n    currentElementalP"
      }
    ],
    "src/hooks/useRecipeValidation.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 139,
        "column": 30,
        "context": "severity: 'medium',\\n        affectedIngredients: [...acidic.map(i => i.name), ...dairy.map(i => i.na"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 139,
        "column": 58,
        "context": "affectedIngredients: [...acidic.map(i => i.name), ...dairy.map(i => i.name)],,\\n      });\\n    }\\n\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 247,
        "column": 34,
        "context": "emental balance\\n    const maxElemental = Math.max(...Object.values(elementalBalance));\\n    const min"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 248,
        "column": 34,
        "context": "entalBalance));\\n    const minElemental = Math.min(...Object.values(elementalBalance));\\n\\n    if (maxE"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 259,
        "column": 16,
        "context": "}\\n\\n    // Check incompatibilities\\n    errors.push(...checkIncompatibilities(ingredients));\\n\\n    // G"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 56,
        "column": 16,
        "context": "   ing.category === 'protein' ||;\\n          (((ing as unknown as any).qualities as string[]) || [])."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 68,
        "column": 16,
        "context": "ingredients.some(\\n        ing =>;\\n          (((ing as unknown as any).qualities as string[]) || [])."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 76,
        "column": 16,
        "context": "       ing.category === 'oil' ||;\\n          (((ing as unknown as any).qualities as string[]) || [])."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 122,
        "column": 14,
        "context": " ingredients.filter(;\\n      ing =>;\\n        (((ing as unknown as any).qualities as string[]) || [])."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 201,
        "column": 14,
        "context": " = ingredients.some(;\\n      ing =>;\\n        (((ing as unknown as any).qualities as string[]) || [])."
      }
    ],
    "src/hooks/useRecommendationAnalytics.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 115,
        "column": 26,
        "context": "async () => {\\n    try {\\n      setState(prev => ({ ...prev, isLoading: true, error: null }));\\n\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 123,
        "column": 10,
        "context": ".current) {\\n        setState(prev => ({\\n          ...prev;\\n          metrics,\\n          cacheStats: "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 142,
        "column": 10,
        "context": ".current) {\\n        setState(prev => ({\\n          ...prev;\\n          error: error instanceof Error ?"
      }
    ],
    "src/hooks/useStatePreservation.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 165,
        "column": 29,
        "context": "() || initialValues;\\n      const updatedState = { ...currentState, ...values };\\n      saveState(upda"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 165,
        "column": 46,
        "context": "es;\\n      const updatedState = { ...currentState, ...values };\\n      saveState(updatedState);\\n    },"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 173,
        "column": 22,
        "context": " const stored = getState();\\n    return stored ? { ...initialValues, ...stored } : initialValues;\\n  }"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 173,
        "column": 40,
        "context": "tState();\\n    return stored ? { ...initialValues, ...stored } : initialValues;\\n  }, [getState, initi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 225,
        "column": 8,
        "context": "rentState = getState();\\n      saveState({\\n        ...currentState;\\n        ...context;\\n        navig"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 226,
        "column": 8,
        "context": "     saveState({\\n        ...currentState;\\n        ...context;\\n        navigationHistory: [\\n         "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 228,
        "column": 10,
        "context": "..context;\\n        navigationHistory: [\\n          ...(currentState.navigationHistory || []);\\n       "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 264,
        "column": 10,
        "context": "for now\\n        const enhancedState = {\\n          ...state;\\n          timestamp: Date.now();\\n       "
      }
    ],
    "src/hooks/useTarotAstrologyData.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 103,
        "column": 57,
        "context": " currentPlanetaryAlignment = rawPlanetaryAlignment as unknown as Record<;\\n    string,\\n    {\\n      si"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 117,
        "column": 52,
        "context": "      ? adaptLunarPhase(foodAssociationsLunarPhase as unknown as FoodAssociationsLunarPhase)\\n       "
      }
    ],
    "src/jest-dom.d.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 21,
        "column": 18,
        "context": "r: string, value?: unknown): R;\\n      toHaveClass(...classNames: string[]): R;\\n      toHaveFocus(): "
      }
    ],
    "src/lib/ChakraAlchemyService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 252,
        "column": 25,
        "context": "Object.values(energies);\\n    const max = Math.max(...values);\\n\\n    if (max === 0) return energies, /"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 256,
        "column": 41,
        "context": "y zero;\\n\\n    const normalized: ChakraEnergies = { ...energies };\\n\\n    Object.keys(energies).forEach("
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 134,
        "column": 31,
        "context": "nst energyStates =\\n      planetEnergyStates[planet as unknown as keyof typeof planetEnergyStates] ||"
      }
    ],
    "src/lib/alchemicalEngine.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 409,
        "column": 8,
        "context": "  return recipes\\n      .map(_recipe => ({\\n        ..._recipe;\\n        seasonalScore: (() => {\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 444,
        "column": 8,
        "context": "duce(\\n      (acc, [element, value]) => ({\\n        ...acc;\\n        [element]: 1 - value\\n      }),\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 496,
        "column": 7,
        "context": "\\n  calculateRecipeEffect(recipe: Recipe) {\\n    // ... implementation ...\\n  }\\n\\n  /**\\n   * Finds optim"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 496,
        "column": 26,
        "context": "ffect(recipe: Recipe) {\\n    // ... implementation ...\\n  }\\n\\n  /**\\n   * Finds optimal recipes based on"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 323,
        "column": 24,
        "context": "eIngredientInteractions(;\\n      recipe.ingredients as unknown as Ingredient[], // Pattern VVV: Array"
      }
    ],
    "src/lib/chakraRecipeEnhancer.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 109,
        "column": 37,
        "context": "anetary hour\\n    let planetaryHour: Planet = 'Sun' as unknown as Planet;\\n    try {\\n      const hourI"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 113,
        "column": 42,
        "context": "ing') {\\n        const planetName = hourInfo.planet as unknown as string;\\n        // Ensure the plane"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 129,
        "column": 52,
        "context": "        return validPlanets.includes(name) ? (name as unknown as Planet) : null;\\n        };\\n\\n       "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 134,
        "column": 41,
        "context": "lanet) {\\n          planetaryHour = validatedPlanet as unknown as Planet;\\n        }\\n      }\\n    } cat"
      }
    ],
    "src/lib/cuisineCalculations.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 26,
        "column": 39,
        "context": "ion]) => {\\n        const traditionData = tradition as unknown as {\\n          description?: string;\\n "
      }
    ],
    "src/lib/elementalSystem.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 58,
        "column": 10,
        "context": "TS.reduce(\\n        (acc, element) => ({\\n          ...acc;\\n          [element]: IDEAL_PROPORTION\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 67,
        "column": 8,
        "context": "EMENTS.reduce(\\n      (acc, element) => ({\\n        ...acc;\\n        [element]: (properties[element] ||"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 129,
        "column": 8,
        "context": "MENTS.reduce(;\\n      (acc, element) => ({\\n        ...acc;\\n        [element]: elements.includes(eleme"
      }
    ],
    "src/lib/recipeEngine.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 73,
        "column": 8,
        "context": "n availableRecipes\\n      .map(other => ({\\n        ...other;\\n        harmonyScore: this.calculateHarm"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 85,
        "column": 8,
        "context": "   return recipes\\n      .map(recipe => ({\\n        ...recipe;\\n        seasonalScore: this.calculateSe"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 142,
        "column": 12,
        "context": "ecipesForElement(card.element) : [];\\n\\n    return [...new Set([...associatedRecipes, ...elementBasedR"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 142,
        "column": 24,
        "context": "ment(card.element) : [];\\n\\n    return [...new Set([...associatedRecipes, ...elementBasedRecipes])]\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 142,
        "column": 46,
        "context": "];\\n\\n    return [...new Set([...associatedRecipes, ...elementBasedRecipes])]\\n  }\\n\\n  /**\\n   * Get reci"
      }
    ],
    "src/lib/recipeFilter.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 31,
        "column": 27,
        "context": "): Promise<Recipe[]> {\\n    let filteredRecipes = [...recipes];\\n\\n    // Apply search filter\\n    if (f"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 111,
        "column": 12,
        "context": " 0.25\\n          },\\n          return {\\n            ...recipe;\\n            matchScore: calculateElemen"
      }
    ],
    "src/lib/tarotCalculations.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 491,
        "column": 26,
        "context": " // Add keywords safely\\n    filters.keywords.push(...(tarotCards.minorCard.keywords || []));\\n\\n    //"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 498,
        "column": 37,
        "context": "pes)\\n    ) {\\n      filters.associatedRecipes.push(...tarotCards.minorCard.associatedRecipes);\\n    }\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 77,
        "column": 23,
        "context": "pe casting for card access\\n  const cardData = card as unknown as {\\n    name?: string;\\n    element?: "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 456,
        "column": 23,
        "context": "pe casting for card access\\n  const cardData = card as unknown as {\\n    name?: string;\\n    element?: "
      }
    ],
    "src/pages/_app.tsx": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 138,
        "column": 18,
        "context": "calEngine.js' />;\\n      </Head>\\n      <Component {...pageProps} />\\n    </>\\n  );\\n}\\n"
      }
    ],
    "src/pages/cuisines/[id].tsx": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 46,
        "column": 6,
        "context": " 0.25, Air: 0.25 };\\n    setElementalState({\\n      ...currentState;\\n      season: 'spring', // Defaul"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 111,
        "column": 10,
        "context": "or;\\n        ),\\n\\n        combined.push({\\n          ...recipe1Data;\\n          matchScore: enhancedScor"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 128,
        "column": 10,
        "context": "Factor, 0.35),\\n\\n        combined.push({\\n          ...recipeData;\\n          matchScore: Math.min(fina"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 146,
        "column": 10,
        "context": ", 0.3), 0.85),\\n\\n        combined.push({\\n          ...recipeData;\\n          matchScore: finalScore,\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 162,
        "column": 23,
        "context": " cuisine data\\n  if (!id) {\\n    return <div>Loading...</div>;\\n  }\\n\\n  if (!cuisine) {\\n    return (\\n   "
      }
    ],
    "src/pages/cuisines/index.tsx": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 34,
        "column": 6,
        "context": " 0.25, Air: 0.25 };\\n    setElementalState({\\n      ...currentState;\\n      season: 'spring', // Defaul"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 43,
        "column": 4,
        "context": "s(cuisines).map(([id, cuisine]) => ({\\n    id,\\n    ...cuisine\\n  }));\\n\\n  // Get main cuisines (excludi"
      }
    ],
    "src/pages/recipes/[id].tsx": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 44,
        "column": 6,
        "context": " 0.25, Air: 0.25 };\\n    setElementalState({\\n      ...currentState;\\n      season: 'spring', // Defaul"
      }
    ],
    "src/pages/recipes/index.tsx": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 26,
        "column": 6,
        "context": " 0.25, Air: 0.25 };\\n    setElementalState({\\n      ...currentState;\\n      season: 'spring', // Defaul"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 95,
        "column": 41,
        "context": "ue-500';\\n              placeholder='Search by name...';\\n              value={searchTerm},\\n          "
      }
    ],
    "src/pages/sauce-explorer.tsx": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 97,
        "column": 25,
        "context": " to ensure they sum to 1\\n    const newProfile = { ...elementalProfile, [element]: value };\\n    const"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 91,
        "column": 27,
        "context": "mexicanCuisine\\n    };\\n\\n    setAllCuisines(cuisines as unknown as CuisineRecord);\\n  }, []);\\n\\n  // Han"
      }
    ],
    "src/pages/sauces/[cuisine]/[id].tsx": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 43,
        "column": 6,
        "context": " 0.25, Air: 0.25 };\\n    setElementalState({\\n      ...currentState;\\n      season: 'spring', // Defaul"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 72,
        "column": 14,
        "context": "auce = {\\n              id: sauceId,\\n              ...(cuisinesMap[cuisineKey].traditionalSauces as a"
      }
    ],
    "src/pages/sauces/index.tsx": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 37,
        "column": 6,
        "context": " 0.25, Air: 0.25 };\\n    setElementalState({\\n      ...currentState;\\n      season: 'spring', // Defaul"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 146,
        "column": 56,
        "context": "        placeholder='Search by name or description...';\\n              value={searchTerm},\\n          "
      }
    ],
    "src/scripts/add-serving-sizes.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 40,
        "column": 40,
        "context": "lePath) {\\n  // console.log(`Processing ${filePath}...`);\\n\\n  // Read the file\\n  const content = fs.re"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 203,
        "column": 70,
        "context": "arting to add serving sizes to protein ingredients...');\\n\\n  if (!fs.existsSync(PROTEINS_DIR)) {\\n    "
      }
    ],
    "src/scripts/batch-processing/BatchProcessingOrchestrator.ts": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`# Batch Processing Campaign Report\n\n## Campaign Overview\n- **Campaign ID**: ${campaign.campaignId}\n- **Start Time**: ${campaign.startTime.toISOString()}\n- **End Time**: ${campaign.endTime?.toISOString() || 'In Progress'}\n- **Status**: ${campaign.status.toUpperCase()}\n- **Duration**: ${this.formatDuration(Math.floor(duration / 60000))}\n\n## Processing Plan\n- **Total Files**: ${campaign.processingPlan.totalFiles}\n- **Automatic Processing**: ${campaign.processingPlan.automaticProcessing.length}\n- **Manual Review Required**: ${campaign.processingPlan.manualReviewRequired.length}\n- **Estimated Batches**: ${campaign.processingPlan.estimatedBatches}\n\n## Risk Distribution\n- **Low Risk**: ${campaign.processingPlan.riskSummary.low} files\n- **Medium Risk**: ${campaign.processingPlan.riskSummary.medium} files\n- **High Risk**: ${campaign.processingPlan.riskSummary.high} files\n- **Critical Risk**: ${campaign.processingPlan.riskSummary.critical} files\n\n## Final Statistics\n- **Total Processed**: ${campaign.finalStats.totalProcessed}\n- **Total Eliminated**: ${campaign.finalStats.totalEliminated}\n- **Total Preserved**: ${campaign.finalStats.totalPreserved}\n- **Success Rate**: ${campaign.finalStats.successRate.toFixed(1)}%\n- **Elimination Rate**: ${campaign.finalStats.totalProcessed > 0 ? ((campaign.finalStats.totalEliminated / campaign.finalStats.totalProcessed) * 100).toFixed(1) : 0}%\n\n## Batch Results\n${campaign.batchResults\n  .map(\n    (batch, index) => `\n### Batch ${index + 1}: ${batch.batchId}",
        "line": 407,
        "column": 11,
        "context": "mpaign.startTime.getTime()\\n      : 0,\\n\\n    return `# Batch Processing Campaign Report\\n\\n## Campaign O"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`,\n  )\n  .join('')}\n\n## Manual Reviews\n${\n  campaign.manualReviews.length > 0\n    ? campaign.manualReviews\n        .map(\n          review => `;\n### ${path.relative(process.cwd(), review.filePath)}\n- **Unused Variables**: ${review.unusedVariableCount}",
        "line": 449,
        "column": 0,
        "context": "backPerformed ? '- **Rollback**: Performed' : ''}\\n`,\\n  )\\n  .join('')}\\n\\n## Manual Reviews\\n${\\n  campai"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`,\n        )\n        .join('')\n    : 'No manual reviews required.'\n}\n\n## Recommendations\n${campaign.recommendations.map(rec => `- ${rec}`).join('\\n')}",
        "line": 463,
        "column": 0,
        "context": "ired**: ${review.approvalRequired ? 'Yes' : 'No'}\\n`,\\n        )\\n        .join('')\\n    : 'No manual re"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`;\n### ${checkpoint.id}\n- **Timestamp**: ${checkpoint.timestamp.toISOString()}\n- **Compilation Status**: ${checkpoint.compilationStatus ? '‚úÖ' : '‚ùå'}\n- **Error Count**: ${checkpoint.errorCount}\n${checkpoint.stashId ? `- **Stash ID**: ${checkpoint.stashId}` : ''}",
        "line": 476,
        "column": 18,
        "context": ".getSafetyCheckpoints()\\n  .map(\\n    checkpoint => `;\\n### ${checkpoint.id}\\n- **Timestamp**: ${checkpo"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`# Batch Processing Campaign Report\n\n## Campaign Overview\n- **Campaign ID**: ${campaign.campaignId}\n- **Start Time**: ${campaign.startTime.toISOString()}\n- **End Time**: ${campaign.endTime?.toISOString() || 'In Progress'}\n- **Status**: ${campaign.status.toUpperCase()}\n- **Duration**: ${this.formatDuration(Math.floor(duration / 60000))}\n\n## Processing Plan\n- **Total Files**: ${campaign.processingPlan.totalFiles}\n- **Automatic Processing**: ${campaign.processingPlan.automaticProcessing.length}\n- **Manual Review Required**: ${campaign.processingPlan.manualReviewRequired.length}\n- **Estimated Batches**: ${campaign.processingPlan.estimatedBatches}\n\n## Risk Distribution\n- **Low Risk**: ${campaign.processingPlan.riskSummary.low} files\n- **Medium Risk**: ${campaign.processingPlan.riskSummary.medium} files\n- **High Risk**: ${campaign.processingPlan.riskSummary.high} files\n- **Critical Risk**: ${campaign.processingPlan.riskSummary.critical} files\n\n## Final Statistics\n- **Total Processed**: ${campaign.finalStats.totalProcessed}\n- **Total Eliminated**: ${campaign.finalStats.totalEliminated}\n- **Total Preserved**: ${campaign.finalStats.totalPreserved}\n- **Success Rate**: ${campaign.finalStats.successRate.toFixed(1)}%\n- **Elimination Rate**: ${campaign.finalStats.totalProcessed > 0 ? ((campaign.finalStats.totalEliminated / campaign.finalStats.totalProcessed) * 100).toFixed(1) : 0}%\n\n## Batch Results\n${campaign.batchResults\n  .map(\n    (batch, index) => `\n### Batch ${index + 1}: ${batch.batchId}\n- **Files**: ${batch.files.length}\n- **Success**: ${batch.success ? '‚úÖ' : '‚ùå'}\n- **Processed**: ${batch.processedCount}\n- **Eliminated**: ${batch.eliminatedCount}\n- **Preserved**: ${batch.preservedCount}\n- **Compilation**: ${batch.compilationPassed ? '‚úÖ' : '‚ùå'}\n- **Processing Time**: ${batch.processingTime}ms\n${batch.errors.length > 0 ? `- **Errors**: ${batch.errors.join(', ')}",
        "line": 407,
        "column": 11,
        "context": "mpaign.startTime.getTime()\\n      : 0,\\n\\n    return `# Batch Processing Campaign Report\\n\\n## Campaign O"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`,\n  )\n  .join('')}\n\n## Manual Reviews\n${\n  campaign.manualReviews.length > 0\n    ? campaign.manualReviews\n        .map(\n          review => `;\n### ${path.relative(process.cwd(), review.filePath)}\n- **Unused Variables**: ${review.unusedVariableCount}\n- **Risk Factors**: ${review.riskFactors.join(', ')}\n- **Approval Required**: ${review.approvalRequired ? 'Yes' : 'No'}\n`,\n        )\n        .join('')\n    : 'No manual reviews required.'\n}",
        "line": 449,
        "column": 0,
        "context": "backPerformed ? '- **Rollback**: Performed' : ''}\\n`,\\n  )\\n  .join('')}\\n\\n## Manual Reviews\\n${\\n  campai"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`).join('\\n')};\n\n## Safety Checkpoints\n${this.batchProcessor\n  .getSafetyCheckpoints()\n  .map(\n    checkpoint => `;\n### ${checkpoint.id}\n- **Timestamp**: ${checkpoint.timestamp.toISOString()}\n- **Compilation Status**: ${checkpoint.compilationStatus ? '‚úÖ' : '‚ùå'}\n- **Error Count**: ${checkpoint.errorCount}\n${checkpoint.stashId ? `- **Stash ID**: ${checkpoint.stashId}",
        "line": 470,
        "column": 47,
        "context": "ns\\n${campaign.recommendations.map(rec => `- ${rec}`).join('\\n')};\\n\\n## Safety Checkpoints\\n${this.batc"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${campaign.batchResults\n  .map(\n    (batch, index) => `\n### Batch ${",
        "line": 436,
        "column": 0,
        "context": "cessed) * 100).toFixed(1) : 0}%\\n\\n## Batch Results\\n${campaign.batchResults\\n  .map(\\n    (batch, index)"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${batch.errors.length > 0 ? `- **Errors**: ${",
        "line": 447,
        "column": 0,
        "context": "\\n- **Processing Time**: ${batch.processingTime}ms\\n${batch.errors.length > 0 ? `- **Errors**: ${batch"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n  campaign.manualReviews.length > 0\n    ? campaign.manualReviews\n        .map(\n          review => `;\n### ${",
        "line": 454,
        "column": 0,
        "context": "med' : ''}\\n`,\\n  )\\n  .join('')}\\n\\n## Manual Reviews\\n${\\n  campaign.manualReviews.length > 0\\n    ? campa"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${campaign.recommendations.map(rec => `- ${",
        "line": 470,
        "column": 0,
        "context": "o manual reviews required.'\\n}\\n\\n## Recommendations\\n${campaign.recommendations.map(rec => `- ${rec}`)."
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${this.batchProcessor\n  .getSafetyCheckpoints()\n  .map(\n    checkpoint => `;\n### ${",
        "line": 473,
        "column": 0,
        "context": "> `- ${rec}`).join('\\n')};\\n\\n## Safety Checkpoints\\n${this.batchProcessor\\n  .getSafetyCheckpoints()\\n  "
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${checkpoint.stashId ? `- **Stash ID**: ${",
        "line": 481,
        "column": 0,
        "context": " '‚ùå'}\\n- **Error Count**: ${checkpoint.errorCount}\\n${checkpoint.stashId ? `- **Stash ID**: ${checkpoi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 85,
        "column": 6,
        "context": "eports: true,\\n      interactiveMode: false,\\n      ...config\\n    };\\n\\n    this.batchProcessor = new Sa"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 101,
        "column": 64,
        "context": "ole.log('üìã Creating comprehensive processing plan...');\\n\\n    const assessments = files.map(file =>;"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 186,
        "column": 87,
        "context": "ssing ${automaticFiles.length} files automatically...`);\\n        const batchResults = await this.bat"
      }
    ],
    "src/scripts/batch-processing/EnhancedSafetyProtocols.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 69,
        "column": 6,
        "context": "n: true,\\n      createDetailedBackups: true,\\n      ...config\\n    };\\n  }\\n\\n  /**\\n   * Assess risk level"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 212,
        "column": 27,
        "context": "result.passed = false;\\n        result.errors.push(...compilationResult.errors);\\n        result.requi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 221,
        "column": 29,
        "context": "sult.passed = false;\\n          result.errors.push(...serviceValidation.errors);\\n        }\\n        re"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 223,
        "column": 29,
        "context": "n.errors);\\n        }\\n        result.warnings.push(...serviceValidation.warnings);\\n      }\\n\\n      // "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 231,
        "column": 29,
        "context": "sult.passed = false;\\n          result.errors.push(...calculationValidation.errors);\\n          result"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 239,
        "column": 29,
        "context": "Validation.passed) {\\n        result.warnings.push(...dependencyValidation.warnings);\\n        if (dep"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 242,
        "column": 29,
        "context": "sult.passed = false;\\n          result.errors.push(...dependencyValidation.errors);\\n        }\\n      }"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 249,
        "column": 29,
        "context": "teRuntime(filePath);\\n        result.warnings.push(...runtimeValidation.warnings);\\n        result.rec"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 250,
        "column": 36,
        "context": "on.warnings);\\n        result.recommendations.push(...runtimeValidation.recommendations);\\n      }\\n\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 273,
        "column": 12,
        "context": "ualReviews(): ManualReviewRequest[] {\\n    return [...this.manualReviewQueue]\\n  }\\n\\n  /**\\n   * Approve"
      }
    ],
    "src/scripts/batch-processing/SafeBatchProcessor.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 76,
        "column": 6,
        "context": "eateGitStash: true,\\n      logLevel: 'info',\\n      ...config\\n    };\\n  }\\n\\n  /**\\n   * Process files in "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 188,
        "column": 62,
        "context": ".log('info', `üîç Validating TypeScript compilation...`);\\n        result.compilationPassed = await th"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 428,
        "column": 12,
        "context": "tyCheckpoints(): SafetyCheckpoint[] {\\n    return [...this.checkpoints]\\n  }\\n\\n  /**\\n   * Log message w"
      }
    ],
    "src/scripts/batch-processing/cli.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 132,
        "column": 58,
        "context": " // console.log('üìã Creating batch processing plan...');\\n\\n      const files = this.loadAnalysisRepor"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 155,
        "column": 62,
        "context": "console.log('üöÄ Starting batch processing campaign...');\\n\\n      // Configure orchestrator based on o"
      }
    ],
    "src/scripts/batch-processing/integration.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 44,
        "column": 6,
        "context": "tion: false,\\n      skipManualReview: false,\\n      ...config\\n    };\\n\\n    this.orchestrator = new Batc"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 72,
        "column": 80,
        "context": "ting complete unused variable elimination workflow...\\n');\\n\\n    try {\\n      // Step 1: Run analysis "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 77,
        "column": 62,
        "context": "/ console.log('üìä Running unused variable analysis...');\\n        await this.runAnalysis();\\n      } e"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 80,
        "column": 60,
        "context": " // console.log('üìÑ Using existing analysis report...');\\n      }\\n\\n      // Step 2: Load analysis res"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 88,
        "column": 54,
        "context": "  // // console.log('\\nüìã Creating processing plan...');\\n      const plan = await this.orchestrator."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 96,
        "column": 67,
        "context": "sole.log('\\nüîÑ Executing batch processing campaign...');\\n        const campaign = await this.orchest"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 226,
        "column": 30,
        "context": "uired.length > 5) {\\n        // // console.log(`   ... and ${plan.manualReviewRequired.length - 5} mo"
      }
    ],
    "src/scripts/comprehensive-linting-workflow.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 39,
        "column": 6,
        "context": " true,\\n      phase: options.phase || 'all',\\n      ...options,\\n    };\\n\\n    this.metrics = {\\n      sta"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 69,
        "column": 43,
        "context": "turn;\\n\\n    this.log('Creating comprehensive backup...');\\n    try {\\n      execSync(`cp -r src ${this."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 80,
        "column": 48,
        "context": "{\\n    this.log('Collecting current linting metrics...');\\n    try {\\n      const output = execSync('ya"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 120,
        "column": 43,
        "context": "    }\\n\\n      this.log('Running import organization...');\\n      execSync('yarn lint:fix --rule import"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 147,
        "column": 49,
        "context": "\\n        this.log('Running SafeUnusedImportRemover...');\\n        execSync(`node ${removerPath} --aut"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 183,
        "column": 53,
        "context": "     this.log('Running TypeScript Error Fixer v3.0...');\\n        execSync(`node ${fixerPath} --max-f"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 219,
        "column": 50,
        "context": "        this.log('Running Explicit-Any Elimination...');\\n        execSync(`node ${anyFixerPath} --ma"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 244,
        "column": 40,
        "context": "    try {\\n      this.log('Running build validation...');\\n      execSync('make check', { stdio: 'inhe"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 247,
        "column": 39,
        "context": "erit' });\\n\\n      this.log('Running test validation...');\\n      execSync('make test', { stdio: 'inher"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 250,
        "column": 35,
        "context": "'inherit' });\\n\\n      this.log('Final linting check...');\\n      const finalMetrics = await this.getLi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 308,
        "column": 55,
        "context": " this.log('Starting Comprehensive Linting Workflow...');\\n\\n      // Initial metrics\\n      const initi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 352,
        "column": 51,
        "context": "       this.log('Attempting to restore from backup...');\\n        try {\\n          execSync(`rm -rf sr"
      }
    ],
    "src/scripts/downloadEphemeris.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 37,
        "column": 91,
        "context": "lename} not found at primary source, trying backup...`);\\n          if (BACKUP_FILES.includes(filenam"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 59,
        "column": 68,
        "context": " console.log(`Trying backup source for ${filename}...`);\\n          downloadFile(filename, BACKUP_URL"
      }
    ],
    "src/scripts/fix-ingredient-scripts.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 22,
        "column": 66,
        "context": "Starting to fix bug in ingredient category scripts...');\\n\\n// Process each target file\\nTARGET_FILES.f"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 33,
        "column": 40,
        "context": "urn;\\n  }\\n\\n  // console.log(`Processing ${filename}...`);\\n\\n  // Read the target file\\n  const content "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 47,
        "column": 57,
        "context": "console.log(`No bug found in ${filename}, skipping...`);\\n  }\\n});\\n\\n// console.log('\\nAll files have b"
      }
    ],
    "src/scripts/fix-linting-issues.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 303,
        "column": 36,
        "context": "reBackups() {\\n  log('Starting restore from backups...');\\n\\n  // Find all backups\\n  const backupFiles "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 316,
        "column": 34,
        "context": "relativePath);\\n\\n    log(`Restoring ${relativePath}...`);\\n\\n    try {\\n      // Ensure the target direc"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 348,
        "column": 29,
        "context": "();\\n    return;\\n  }\\n\\n  log('Starting linting fixes...');\\n\\n  // Find all files to process\\n  const fil"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 361,
        "column": 35,
        "context": "(), filePath);\\n    log(`Processing ${relativePath}...`);\\n\\n    // Read file content\\n    const content"
      }
    ],
    "src/scripts/fix-regex-corruption.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 44,
        "column": 65,
        "context": "('üîß Starting Regex Corruption and Duplication Fix...\\n');\\n\\n    if (dryRun) {\\n      console.log('üîç "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 61,
        "column": 91,
        "context": "${i + 1}/${batches.length} (${batch.length} files)...`);\\n\\n        // Analyze each file in the batch\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 607,
        "column": 40,
        "context": "anges() {\\n    console.log('\\nüîç Validating changes...');\\n\\n    try {\\n      execSync('yarn tsc --noEmi"
      }
    ],
    "src/scripts/fix-unused-vars.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 74,
        "column": 52,
        "context": "// // // console.log('Identifying unused variables...');\\n  const unusedVars = getUnusedVariables();\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 79,
        "column": 49,
        "context": "\\n    // // // console.log('Fixing unused variables...');\\n    fixUnusedVariables(unusedVars);\\n  }\\n}\\n\\n"
      }
    ],
    "src/scripts/fixElementalProperties.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 10,
        "column": 40,
        "context": "lePath) {\\n  // console.log(`Processing ${filePath}...`);\\n\\n  // Read the file\\n  const content = fs.re"
      }
    ],
    "src/scripts/fixImportOrganization.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 63,
        "column": 49,
        "context": "\\n    // // console.log('üîç Analyzing import issues...');\\n\\n    try {\\n      // Run ESLint with JSON ou"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 207,
        "column": 50,
        "context": "    // // console.log('üîß Fixing duplicate imports...');\\n    let fixedCount = 0;\\n\\n    for (const fil"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 255,
        "column": 36,
        "context": ".length > 0);\\n                group?.imports.push(...namedImports);\\n              }\\n            }\\n\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 277,
        "column": 26,
        "context": "let hasChanges = false;\\n        const newLines = [...lines];\\n\\n        for (const [source, group] of "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 303,
        "column": 37,
        "context": "tes and sort\\n              const uniqueImports = [...new Set(group.imports)].sort();\\n              p"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 327,
        "column": 45,
        "context": "r> {\\n    // // console.log('üîß Fixing import order...');\\n\\n    try {\\n      // Use ESLint's --fix to a"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 409,
        "column": 26,
        "context": "s.builtin.length > 0) {\\n          newImports.push(...categorizedImports.builtin, '')\\n        }\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 412,
        "column": 26,
        "context": ".external.length > 0) {\\n          newImports.push(...categorizedImports.external, '')\\n        }\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 415,
        "column": 26,
        "context": ".internal.length > 0) {\\n          newImports.push(...categorizedImports.internal, '')\\n        }\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 418,
        "column": 26,
        "context": ".relative.length > 0) {\\n          newImports.push(...categorizedImports.relative, '')\\n        }\\n\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 428,
        "column": 10,
        "context": "port section\\n        const newLines = [\\n          ...lines.slice(0, importStartIndex),\\n          ..."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 429,
        "column": 10,
        "context": "   ...lines.slice(0, importStartIndex),\\n          ...newImports;\\n          ...lines.slice(importEndI"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 430,
        "column": 10,
        "context": "rtStartIndex),\\n          ...newImports;\\n          ...lines.slice(importEndIndex + 1)\\n        ];\\n\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 447,
        "column": 57,
        "context": "// console.log('üîç Detecting circular dependencies...');\\n\\n    const files = this.getAllTypeScriptFil"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 505,
        "column": 37,
        "context": "endencies) {\\n        if (detectCycle(dependency, [...path, node])) {\\n          // Continue to find a"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 524,
        "column": 61,
        "context": "onsole.log('üîç Validating build after import fixes...');\\n\\n    try {\\n      execSync('yarn tsc --noEmi"
      }
    ],
    "src/scripts/gasGiantsTest.js": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`${planet.name}: influence = ${planet.influence}${planet.effect ? `, effect = ${planet.effect}` : ''}",
        "line": 28,
        "column": 10,
        "context": "orEach(planet => {\\n        console.log(\\n          `${planet.name}: influence = ${planet.influence}${"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`${planet.name}: influence = ${planet.influence}${planet.effect ? `, effect = ${planet.effect}` : ''}",
        "line": 28,
        "column": 10,
        "context": "orEach(planet => {\\n        console.log(\\n          `${planet.name}: influence = ${planet.influence}${"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${planet.effect ? `, effect = ${",
        "line": 28,
        "column": 58,
        "context": "  `${planet.name}: influence = ${planet.influence}${planet.effect ? `, effect = ${planet.effect}` : "
      }
    ],
    "src/scripts/linting-campaign-cli.ts": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`     File: ${violation.file}${violation.line ? `:${violation.line}` : ''}",
        "line": 203,
        "column": 26,
        "context": "  if (violation.file) {\\n        // // console.log(`     File: ${violation.file}${violation.line ? `:"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`     File: ${violation.file}${violation.line ? `:${violation.line}` : ''}",
        "line": 203,
        "column": 26,
        "context": "  if (violation.file) {\\n        // // console.log(`     File: ${violation.file}${violation.line ? `:"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${violation.line ? `:${",
        "line": 203,
        "column": 55,
        "context": "   // // console.log(`     File: ${violation.file}${violation.line ? `:${violation.line}` : ''}`);\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 52,
        "column": 50,
        "context": "  // // console.log('üîç Collecting linting metrics...');\\n\\n  const tracker = new LintingProgressTrack"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 89,
        "column": 50,
        "context": "  // // console.log('üìà Generating progress report...');\\n\\n  const tracker = new LintingProgressTrack"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 179,
        "column": 48,
        "context": "{\\n  // // console.log('üö™ Evaluating quality gates...');\\n\\n  const gates = new LintingQualityGates();"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 233,
        "column": 53,
        "context": "/ // console.log('üö¢ Checking deployment readiness...');\\n\\n  const gates = new LintingQualityGates();"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 287,
        "column": 49,
        "context": "\\n  // // console.log('üìà Monitoring quality trends...');\\n\\n  const gates = new LintingQualityGates();"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 322,
        "column": 45,
        "context": "]) {\\n  // // console.log('üîÑ Creating CI/CD report...');\\n\\n  const gates = new LintingQualityGates();"
      }
    ],
    "src/scripts/linting-excellence-dashboard.js": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`# Linting Excellence Dashboard Report\n\nGenerated: ${new Date().toISOString()}\n\n## üìä Overall Status\n\n- **Validation Status**: ${result.passed ? '‚úÖ PASSED' : '‚ùå FAILED'}\n- **Quality Score**: ${result.metrics.qualityScore}/100\n- **Total Issues**: ${result.metrics.totalIssues}\n- **Validation Duration**: ${duration}ms\n\n## üîç Detailed Metrics\n\n### Error Breakdown\n- **Parser Errors**: ${result.metrics.parserErrors} ${result.metrics.parserErrors === 0 ? '‚úÖ' : 'üö®'}\n- **TypeScript Errors**: ${result.metrics.errors}\n- **Explicit Any Errors**: ${result.metrics.explicitAnyErrors} ${result.metrics.explicitAnyErrors < 100 ? '‚úÖ' : '‚ö°'}\n- **Warnings**: ${result.metrics.warnings}\n\n### Code Quality Issues\n- **Import Order Issues**: ${result.metrics.importOrderIssues}\n- **Unused Variables**: ${result.metrics.unusedVariables}\n- **React Hooks Issues**: ${result.metrics.reactHooksIssues}\n- **Console Statements**: ${result.metrics.consoleStatements}\n\n### Performance Metrics\n- **Linting Duration**: ${result.metrics.performanceMetrics.lintingDuration}ms\n- **Memory Usage**: ${result.metrics.performanceMetrics.memoryUsage.toFixed(1)}MB\n- **Files Processed**: ${result.metrics.performanceMetrics.filesProcessed}\n\n## üö® Active Alerts\n\n${\n  result.alerts.length === 0\n    ? 'No active alerts ‚úÖ'\n    : result.alerts\n        .map(\n          alert =>\n            `- **${alert.severity.toUpperCase()}**: ${alert.message}",
        "line": 418,
        "column": 19,
        "context": "linting-dashboard-report.md';\\n\\n    const report = `# Linting Excellence Dashboard Report\\n\\nGenerated:"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`,\n        )\n        .join('\\n')\n}\n\n## üí° Recommendations\n\n${result.recommendations.map(rec => `- ${rec}`).join('\\n')}",
        "line": 456,
        "column": 114,
        "context": "age} (${alert.currentValue} vs ${alert.threshold})`,\\n        )\\n        .join('\\n')\\n}\\n\\n## üí° Recommen"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`# Linting Excellence Dashboard Report\n\nGenerated: ${new Date().toISOString()}\n\n## üìä Overall Status\n\n- **Validation Status**: ${result.passed ? '‚úÖ PASSED' : '‚ùå FAILED'}\n- **Quality Score**: ${result.metrics.qualityScore}/100\n- **Total Issues**: ${result.metrics.totalIssues}\n- **Validation Duration**: ${duration}ms\n\n## üîç Detailed Metrics\n\n### Error Breakdown\n- **Parser Errors**: ${result.metrics.parserErrors} ${result.metrics.parserErrors === 0 ? '‚úÖ' : 'üö®'}\n- **TypeScript Errors**: ${result.metrics.errors}\n- **Explicit Any Errors**: ${result.metrics.explicitAnyErrors} ${result.metrics.explicitAnyErrors < 100 ? '‚úÖ' : '‚ö°'}\n- **Warnings**: ${result.metrics.warnings}\n\n### Code Quality Issues\n- **Import Order Issues**: ${result.metrics.importOrderIssues}\n- **Unused Variables**: ${result.metrics.unusedVariables}\n- **React Hooks Issues**: ${result.metrics.reactHooksIssues}\n- **Console Statements**: ${result.metrics.consoleStatements}\n\n### Performance Metrics\n- **Linting Duration**: ${result.metrics.performanceMetrics.lintingDuration}ms\n- **Memory Usage**: ${result.metrics.performanceMetrics.memoryUsage.toFixed(1)}MB\n- **Files Processed**: ${result.metrics.performanceMetrics.filesProcessed}\n\n## üö® Active Alerts\n\n${\n  result.alerts.length === 0\n    ? 'No active alerts ‚úÖ'\n    : result.alerts\n        .map(\n          alert =>\n            `- **${alert.severity.toUpperCase()}**: ${alert.message} (${alert.currentValue} vs ${alert.threshold})`,\n        )\n        .join('\\n')\n}",
        "line": 418,
        "column": 19,
        "context": "linting-dashboard-report.md';\\n\\n    const report = `# Linting Excellence Dashboard Report\\n\\nGenerated:"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n  result.alerts.length === 0\n    ? 'No active alerts ‚úÖ'\n    : result.alerts\n        .map(\n          alert =>\n            `- **${",
        "line": 450,
        "column": 0,
        "context": "anceMetrics.filesProcessed}\\n\\n## üö® Active Alerts\\n\\n${\\n  result.alerts.length === 0\\n    ? 'No active a"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${result.recommendations.map(rec => `- ${",
        "line": 463,
        "column": 0,
        "context": "  )\\n        .join('\\n')\\n}\\n\\n## üí° Recommendations\\n\\n${result.recommendations.map(rec => `- ${rec}`).jo"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 77,
        "column": 60,
        "context": "e.log('üîç Running comprehensive linting validation...\\n');\\n\\n    const startTime = Date.now();\\n    co"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 524,
        "column": 38,
        "context": " },\\n    ];\\n\\n    console.log('Running health checks...\\n');\\n\\n    let allPassed = true;\\n\\n    for (cons"
      }
    ],
    "src/scripts/linting-excellence-dashboard.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 110,
        "column": 66,
        "context": "e.log('üîç Running comprehensive linting validation...\\n');\\n\\n    const startTime = Date.now();\\n    co"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 224,
        "column": 53,
        "context": " // // console.log('üìä Starting linting monitoring...\\n');\\n\\n    if (options.watch) {\\n      // // con"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 227,
        "column": 71,
        "context": "og('üëÄ Watch mode enabled - monitoring for changes...');\\n\\n      // Simple watch implementation\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 394,
        "column": 44,
        "context": "  ];\\n\\n    // // console.log('Running health checks...\\n');\\n\\n    let allPassed = true;\\n\\n    for (cons"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 424,
        "column": 56,
        "context": " // console.log('üîß Running maintenance procedures...\\n');\\n\\n    const procedures = [\\n      {\\n       "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 484,
        "column": 47,
        "context": " {\\n        // // console.log(`üîß ${procedure.name}...`);\\n        const success = await procedure.act"
      }
    ],
    "src/scripts/quality-gates/AutomatedDocumentationGenerator.ts": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`# Any Type Documentation Report;\n\n## Summary\n\n- **Total Any Types:** ${totalOccurrences}\n- **Documented:** ${documented}\n- **Undocumented:** ${undocumented}\n- **Coverage:** ${coveragePercent}%\n\n## Category Breakdown\n\n${Array.from(categoryBreakdown.entries())\n  .map(([category, stats]) => {\n    const categoryPercent =\n      stats.total > 0 ? ((stats.documented / stats.total) * 100).toFixed(1) : '0.0';\n    return `### ${category.replace(/_/g, ' ').toUpperCase()}\n- Total: ${stats.total}",
        "line": 435,
        "column": 19,
        "context": "documented++;\\n      }\\n    });\\n\\n    const report = `# Any Type Documentation Report;\\n\\n## Summary\\n\\n- *"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`;\n  })\n  .join('\\n\\n')}\n\n## Documentation Templates\n\n${Array.from(this.documentationTemplates.entries())\n  .map(\n    ([category, template]) => `\n### ${category.replace(/_/g, ' ').toUpperCase()}\n\\`\\`\\`typescript\n${template.eslintComment}",
        "line": 453,
        "column": 31,
        "context": "{stats.documented}\\n- Coverage: ${categoryPercent}%`;\\n  })\\n  .join('\\n\\n')}\\n\\n## Documentation Templat"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`,\n  )\n  .join('\\n')}\n\n## Recommendations\n\n${\n  undocumented > 0\n    ? `\n### Immediate Actions Required\n- Document ${undocumented} remaining any types\n- Run: \\`node src/scripts/quality-gates/AutomatedDocumentationGenerator.ts generate\\`\n- Review and customize generated documentation as needed\n`\n    : ''\n}",
        "line": 468,
        "column": 0,
        "context": "explanation}\\n${template.todoComment || ''}\\n\\`\\`\\`\\n`,\\n  )\\n  .join('\\n')}\\n\\n## Recommendations\\n\\n${\\n  un"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`# Any Type Documentation Report;\n\n## Summary\n\n- **Total Any Types:** ${totalOccurrences}\n- **Documented:** ${documented}\n- **Undocumented:** ${undocumented}\n- **Coverage:** ${coveragePercent}%\n\n## Category Breakdown\n\n${Array.from(categoryBreakdown.entries())\n  .map(([category, stats]) => {\n    const categoryPercent =\n      stats.total > 0 ? ((stats.documented / stats.total) * 100).toFixed(1) : '0.0';\n    return `### ${category.replace(/_/g, ' ').toUpperCase()}\n- Total: ${stats.total}\n- Documented: ${stats.documented}\n- Coverage: ${categoryPercent}%`;\n  }",
        "line": 435,
        "column": 19,
        "context": "documented++;\\n      }\\n    });\\n\\n    const report = `# Any Type Documentation Report;\\n\\n## Summary\\n\\n- *"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`,\n  )\n  .join('\\n')}\n\n## Recommendations\n\n${\n  undocumented > 0\n    ? `\n### Immediate Actions Required\n- Document ${undocumented} remaining any types\n- Run: \\`node src/scripts/quality-gates/AutomatedDocumentationGenerator.ts generate\\`\n- Review and customize generated documentation as needed\n`\n    : ''\n}",
        "line": 468,
        "column": 0,
        "context": "explanation}\\n${template.todoComment || ''}\\n\\`\\`\\`\\n`,\\n  )\\n  .join('\\n')}\\n\\n## Recommendations\\n\\n${\\n  un"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${Array.from(categoryBreakdown.entries())\n  .map(([category, stats]) => {\n    const categoryPercent =\n      stats.total > 0 ? ((stats.documented / stats.total) * 100).toFixed(1) : '0.0';\n    return `### ${",
        "line": 446,
        "column": 0,
        "context": "ge:** ${coveragePercent}%\\n\\n## Category Breakdown\\n\\n${Array.from(categoryBreakdown.entries())\\n  .map(("
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${Array.from(this.documentationTemplates.entries())\n  .map(\n    ([category, template]) => `\n### ${",
        "line": 459,
        "column": 0,
        "context": " })\\n  .join('\\n\\n')}\\n\\n## Documentation Templates\\n\\n${Array.from(this.documentationTemplates.entries()"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n  undocumented > 0\n    ? `\n### Immediate Actions Required\n- Document ${",
        "line": 474,
        "column": 0,
        "context": "\\`\\`\\`\\n`,\\n  )\\n  .join('\\n')}\\n\\n## Recommendations\\n\\n${\\n  undocumented > 0\\n    ? `\\n### Immediate Action"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 139,
        "column": 52,
        "context": "  this.log('üîç Scanning for undocumented any types...', 'info');\\n\\n    const occurrences: AnyTypeOccu"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 150,
        "column": 23,
        "context": "his.analyzeFile(filePath);\\n      occurrences.push(...fileOccurrences);\\n    }\\n\\n    this.log(`üìä Found"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 355,
        "column": 35,
        "context": " any type line\\n        lines.splice(lineIndex, 0, ...documentationLines)\\n      }\\n\\n      // Write the"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 373,
        "column": 72,
        "context": "ating documentation for all undocumented any types...', 'info');\\n    this.log('='.repeat(60), 'info'"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 505,
        "column": 50,
        "context": "    this.log('üîç Validating any type documentation...', 'info');\\n\\n    const occurrences = await this"
      }
    ],
    "src/scripts/quality-gates/EnhancedPreCommitHook.ts": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`)\n  .join('\\n')}\n\n## Staged Files\n${\n  this.stagedFiles.length > 0\n    ? this.stagedFiles.map(file => `- ${file}`).join('\\n');\n    : 'No eligible files staged'\n}",
        "line": 526,
        "column": 81,
        "context": "*${fix}**: ${enabled ? '‚úÖ Enabled' : '‚ùå Disabled'}`)\\n  .join('\\n')}\\n\\n## Staged Files\\n${\\n  this.stage"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`)\n  .join('\\n')}\n\n## Staged Files\n${\n  this.stagedFiles.length > 0\n    ? this.stagedFiles.map(file => `- ${file}`).join('\\n');\n    : 'No eligible files staged'\n}",
        "line": 526,
        "column": 81,
        "context": "*${fix}**: ${enabled ? '‚úÖ Enabled' : '‚ùå Disabled'}`)\\n  .join('\\n')}\\n\\n## Staged Files\\n${\\n  this.stage"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n  this.stagedFiles.length > 0\n    ? this.stagedFiles.map(file => `- ${",
        "line": 530,
        "column": 0,
        "context": ": '‚ùå Disabled'}`)\\n  .join('\\n')}\\n\\n## Staged Files\\n${\\n  this.stagedFiles.length > 0\\n    ? this.staged"
      }
    ],
    "src/scripts/quality-gates/KnowledgeTransferSystem.ts": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`# Certificate of Completion\n\n## Unintentional Any Elimination System Specialist\n\n**Awarded to:** ${userId}\n**Date:** ${completionDate}\n**Certificate ID:** UAE-${userId}-${Date.now()}\n\n### Training Completion Summary\n\n**Modules Completed:** ${progress.completedModules.length}/${this.trainingModules.size}\n**Average Assessment Score:** ${averageScore.toFixed(1)}%\n**Training Duration:** Approximately 3.5 hours\n\n### Competencies Demonstrated\n\n‚úÖ **System Architecture Understanding**\n- Comprehensive knowledge of the 36.78% achievement\n- Understanding of classification and replacement engines\n- Knowledge of safety protocols and quality gates\n\n‚úÖ **Any Type Classification Mastery**\n- Ability to distinguish intentional vs unintentional any types\n- Knowledge of all 5 intentional categories\n- Understanding of replacement strategies\n\n‚úÖ **Safe Replacement Techniques**\n- Mastery of high-confidence patterns (90%+ success rate)\n- Understanding of medium-confidence patterns (70-89% success rate)\n- Knowledge of risk assessment and mitigation\n\n‚úÖ **Safety Protocol Expertise**\n- Emergency recovery procedures\n- Backup and rollback mechanisms\n- System integrity validation\n\n‚úÖ **Quality Gates Proficiency**\n- Continuous monitoring systems\n- Threshold management\n- CI/CD integration\n\n### Assessment Scores\n\n${progress.completedModules\n  .map(moduleId => {\n    const module = this.trainingModules.get(moduleId);\n    const score = progress.scores[moduleId] || 0;\n    return `- **${module?.name}**: ${score}",
        "line": 779,
        "column": 11,
        "context": "bject.values(progress.scores).length;\\n\\n    return `# Certificate of Completion\\n\\n## Unintentional Any"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`# Certificate of Completion\n\n## Unintentional Any Elimination System Specialist\n\n**Awarded to:** ${userId}\n**Date:** ${completionDate}\n**Certificate ID:** UAE-${userId}-${Date.now()}\n\n### Training Completion Summary\n\n**Modules Completed:** ${progress.completedModules.length}/${this.trainingModules.size}\n**Average Assessment Score:** ${averageScore.toFixed(1)}%\n**Training Duration:** Approximately 3.5 hours\n\n### Competencies Demonstrated\n\n‚úÖ **System Architecture Understanding**\n- Comprehensive knowledge of the 36.78% achievement\n- Understanding of classification and replacement engines\n- Knowledge of safety protocols and quality gates\n\n‚úÖ **Any Type Classification Mastery**\n- Ability to distinguish intentional vs unintentional any types\n- Knowledge of all 5 intentional categories\n- Understanding of replacement strategies\n\n‚úÖ **Safe Replacement Techniques**\n- Mastery of high-confidence patterns (90%+ success rate)\n- Understanding of medium-confidence patterns (70-89% success rate)\n- Knowledge of risk assessment and mitigation\n\n‚úÖ **Safety Protocol Expertise**\n- Emergency recovery procedures\n- Backup and rollback mechanisms\n- System integrity validation\n\n‚úÖ **Quality Gates Proficiency**\n- Continuous monitoring systems\n- Threshold management\n- CI/CD integration\n\n### Assessment Scores\n\n${progress.completedModules\n  .map(moduleId => {\n    const module = this.trainingModules.get(moduleId);\n    const score = progress.scores[moduleId] || 0;\n    return `- **${module?.name}**: ${score}%`;\n  }",
        "line": 779,
        "column": 11,
        "context": "bject.values(progress.scores).length;\\n\\n    return `# Certificate of Completion\\n\\n## Unintentional Any"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${progress.completedModules\n  .map(moduleId => {\n    const module = this.trainingModules.get(moduleId);\n    const score = progress.scores[moduleId] || 0;\n    return `- **${",
        "line": 822,
        "column": 0,
        "context": "ement\\n- CI/CD integration\\n\\n### Assessment Scores\\n\\n${progress.completedModules\\n  .map(moduleId => {\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 445,
        "column": 71,
        "context": "og('üëã New user detected. Starting with the basics...');\\n      await this.showTrainingPath();\\n    } "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 579,
        "column": 57,
        "context": " await this.askQuestion('\\nPress Enter to continue...');\\n      }\\n    }\\n\\n    // Offer assessment\\n    "
      }
    ],
    "src/scripts/quality-gates/QualityGatesSystem.ts": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`## Quality Gates Report;\n\n            - **Explicit Any Count:** \\${metrics.explicitAnyCount}\n            - **TypeScript Errors:** \\${metrics.typescriptErrors}\n            - **Linting Warnings:** \\${metrics.lintingWarnings}\n            - **Documentation Coverage:** \\${metrics.documentationCoverage.toFixed(1)}%\n\n            \\${metrics.explicitAnyCount <= 280 ? '‚úÖ' : '‚ùå'} Explicit Any Prevention\n            \\${metrics.typescriptErrors === 0 ? '‚úÖ' : '‚ùå'} TypeScript Error Prevention;\n            \\${metrics.lintingWarnings <= 4950 ? '‚úÖ' : '‚ùå'} Linting Quality\n            \\${",
        "line": 643,
        "column": 29,
        "context": "tricsPath, 'utf8')),\\n            const comment = \\`## Quality Gates Report;\\n\\n            - **Explici"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 112,
        "column": 51,
        "context": "   this.log('üìä Collecting current quality metrics...', 'info'),\\n\\n    const metrics: QualityMetrics "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 474,
        "column": 54,
        "context": "this.log('üìö Generating developer education report...', 'info');\\n\\n    const metrics = await this.col"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 591,
        "column": 45,
        "context": "d> {\\n    this.log('üîß Setting up CI/CD integration...', 'info'),\\n\\n    // Create GitHub Actions workf"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 675,
        "column": 8,
        "context": " 'utf8')),\\n\\n      packageJson.scripts = {\\n        ...packageJson.scripts;\\n        'quality:gates': '"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 689,
        "column": 50,
        "context": "    this.log('‚è∞ Setting up periodic quality audits...', 'info');\\n\\n    // Create cron job script for "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 697,
        "column": 40,
        "context": "via cron\\n\\necho 'üîç Starting periodic quality audit...'\\necho 'Timestamp: $(date)'\\n\\n# Run quality gate"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 712,
        "column": 53,
        "context": "cho 'Triggering emergency any elimination campaign...'\\n  node src/scripts/unintentional-any-eliminat"
      }
    ],
    "src/scripts/quality-gates/SystemValidationSuite.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 42,
        "column": 66,
        "context": "e.log('üöÄ Starting comprehensive system validation...\\n');\\n\\n    // Core System Components\\n    await "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 74,
        "column": 58,
        "context": "/ console.log('üß† Validating Classification Engine...');\\n\\n    try {\\n      // Test classification acc"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 125,
        "column": 55,
        "context": "/ // console.log('üîß Validating Replacement Engine...');\\n\\n    try {\\n      // Test replacement patter"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 177,
        "column": 54,
        "context": "// // console.log('üõ°Ô∏è Validating Safety Protocols...');\\n\\n    try {\\n      const safetyTests = [\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 197,
        "column": 52,
        "context": "        testResults.push({ name: safetyTest.name, ...result });\\n        } catch (error) {\\n          "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 243,
        "column": 50,
        "context": "    // // console.log('üö™ Validating Quality Gates...');\\n\\n    try {\\n      // Test quality gate funct"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 264,
        "column": 35,
        "context": "++\\n          }\\n          gateResults.push({ gate, ...result });\\n        } catch (error) {\\n          "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 309,
        "column": 54,
        "context": "// // console.log('üìä Validating Monitoring System...');\\n\\n    try {\\n      // Test monitoring capabil"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 330,
        "column": 52,
        "context": "        monitoringResults.push({ name: test.name, ...result });\\n        } catch (error) {\\n          "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 375,
        "column": 57,
        "context": "// console.log('üîó Validating Campaign Integration...');\\n\\n    try {\\n      // Test campaign system in"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 413,
        "column": 54,
        "context": "// // console.log('üîÑ Validating CI/CD Integration...');\\n\\n    try {\\n      // Check CI/CD configurati"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 449,
        "column": 58,
        "context": "/ console.log('üë®‚Äçüíª Validating Developer Workflow...');\\n\\n    try {\\n      // Test developer workflow"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 469,
        "column": 50,
        "context": "          workflowResults.push({ name: test.name, ...result });\\n        } catch (error) {\\n          "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 514,
        "column": 52,
        "context": "  // // console.log('üóÑÔ∏è Validating Data Integrity...');\\n\\n    try {\\n      // Test data integrity\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 534,
        "column": 51,
        "context": "         integrityResults.push({ name: test.name, ...result });\\n        } catch (error) {\\n          "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 581,
        "column": 51,
        "context": "   // // console.log('üíæ Validating Backup Systems...');\\n\\n    try {\\n      // Test backup functionali"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 614,
        "column": 50,
        "context": "    // // console.log('üìö Validating Documentation...');\\n\\n    try {\\n      // Test documentation comp"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 635,
        "column": 45,
        "context": "   }\\n          docResults.push({ name: test.name, ...result });\\n        } catch (error) {\\n          "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 680,
        "column": 47,
        "context": " {\\n    // // console.log('‚ö° Validating Performance...');\\n\\n    try {\\n      // Test system performance"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 714,
        "column": 48,
        "context": "{\\n    // // console.log('üîí Validating Reliability...');\\n\\n    try {\\n      // Test system reliability"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 748,
        "column": 48,
        "context": "{\\n    // // console.log('üìà Validating Scalability...');\\n\\n    try {\\n      // Test system scalability"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1075,
        "column": 28,
        "context": "ult.criticalIssues) {\\n        criticalIssues.push(...result.criticalIssues);\\n      }\\n\\n      if (!res"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1083,
        "column": 29,
        "context": "t.recommendations) {\\n        recommendations.push(...result.recommendations);\\n      }\\n    });\\n\\n    c"
      }
    ],
    "src/scripts/replaceConsoleStatements.ts": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`;\n# Console Statement Replacement Report\n\n## Summary\n- **Files Processed**: ${this.processedFiles}\n- **Total Replacements**: ${this.replacements.length}\n\n## Replacements Made\n${this.replacements\n  .map(\n    r =>;\n      `- **${path.relative(this.srcDir, r.file)}:${r.line}",
        "line": 221,
        "column": 19,
        "context": "ivate generateReport(): void {\\n    const report = `;\\n# Console Statement Replacement Report\\n\\n## Summ"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`;\n# Console Statement Replacement Report\n\n## Summary\n- **Files Processed**: ${this.processedFiles}\n- **Total Replacements**: ${this.replacements.length}\n\n## Replacements Made\n${this.replacements\n  .map(\n    r =>;\n      `- **${path.relative(this.srcDir, r.file)}:${r.line}**\n  - Before: \\`${r.original.trim()}",
        "line": 221,
        "column": 19,
        "context": "ivate generateReport(): void {\\n    const report = `;\\n# Console Statement Replacement Report\\n\\n## Summ"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${this.replacements\n  .map(\n    r =>;\n      `- **${",
        "line": 229,
        "column": 0,
        "context": "${this.replacements.length}\\n\\n## Replacements Made\\n${this.replacements\\n  .map(\\n    r =>;\\n      `- **$"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`[INFO] \\${",
        "line": 192,
        "column": 25,
        "context": "f (this.isDevelopment) {\\n      // // console.log(\\`[INFO] \\${message}\\`, ...args);\\n    }\\n  }\\n\\n  warn"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`[WARN] \\${",
        "line": 197,
        "column": 18,
        "context": "ng, ...args: unknown[]): void {\\n    console.warn(\\`[WARN] \\${message}\\`, ...args);\\n  }\\n\\n  error(mess"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`[ERROR] \\${",
        "line": 201,
        "column": 19,
        "context": "g, ...args: unknown[]): void {\\n    console.error(\\`[ERROR] \\${message}\\`, ...args);\\n  }\\n\\n  debug(mes"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`[DEBUG] \\${",
        "line": 206,
        "column": 25,
        "context": "f (this.isDevelopment) {\\n      // // console.log(\\`[DEBUG] \\${message}\\`, ...args);\\n    }\\n  }\\n}\\n\\nexp"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 181,
        "column": 24,
        "context": "export interface Logger {\\n  info(message: string, ...args: unknown[]): void,\\n  warn(message: string,"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 182,
        "column": 24,
        "context": "..args: unknown[]): void,\\n  warn(message: string, ...args: unknown[]): void,\\n  error(message: string"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 183,
        "column": 25,
        "context": ".args: unknown[]): void,\\n  error(message: string, ...args: unknown[]): void,\\n  debug(message: string"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 184,
        "column": 25,
        "context": ".args: unknown[]): void,\\n  debug(message: string, ...args: unknown[]): void\\n}\\n\\nclass LoggingService "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 190,
        "column": 24,
        "context": "E_ENV === 'development';\\n\\n  info(message: string, ...args: unknown[]): void {\\n    if (this.isDevelop"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 192,
        "column": 48,
        "context": "{\\n      // // console.log(\\`[INFO] \\${message}\\`, ...args);\\n    }\\n  }\\n\\n  warn(message: string, ...ar"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 196,
        "column": 24,
        "context": "}\\`, ...args);\\n    }\\n  }\\n\\n  warn(message: string, ...args: unknown[]): void {\\n    console.warn(\\`[WA"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 197,
        "column": 41,
        "context": ": void {\\n    console.warn(\\`[WARN] \\${message}\\`, ...args);\\n  }\\n\\n  error(message: string, ...args: u"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 200,
        "column": 25,
        "context": "ssage}\\`, ...args);\\n  }\\n\\n  error(message: string, ...args: unknown[]): void {\\n    console.error(\\`[E"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 201,
        "column": 43,
        "context": "void {\\n    console.error(\\`[ERROR] \\${message}\\`, ...args);\\n  }\\n\\n  debug(message: string, ...args: u"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 204,
        "column": 25,
        "context": "ssage}\\`, ...args);\\n  }\\n\\n  debug(message: string, ...args: unknown[]): void {\\n    if (this.isDevelop"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 206,
        "column": 49,
        "context": "\\n      // // console.log(\\`[DEBUG] \\${message}\\`, ...args);\\n    }\\n  }\\n}\\n\\nexport const logger = new L"
      }
    ],
    "src/scripts/runLintingTests.ts": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`# Comprehensive Linting Test Suite Report\n\n## Executive Summary\n\n- **Total Tests**: ${report.totalTests}\n- **Passed**: ${report.passedTests}\n- **Failed**: ${report.failedTests}\n- **Success Rate**: ${successRate}%\n- **Total Duration**: ${report.totalDuration}ms\n- **Average Duration**: ${avgDuration}ms per test\n\n## Test Categories\n\n### ‚úÖ Configuration Validation\n- **Status**: ${report.summary.configurationValidation ? 'PASSED' : 'FAILED'}\n- **Purpose**: Validates ESLint configuration structure, rule definitions, and plugin integration\n- **Coverage**: Base configuration, TypeScript rules, React 19 compatibility, domain-specific rules\n\n### ‚úÖ Astrological Rules Validation\n- **Status**: ${report.summary.astrologicalRules ? 'PASSED' : 'FAILED'}\n- **Purpose**: Tests custom astrological ESLint rules for planetary calculations\n- **Coverage**: Planetary constants, position structures, elemental properties, transit validation\n\n### ‚úÖ Domain-Specific Rule Behavior\n- **Status**: ${report.summary.domainSpecificBehavior ? 'PASSED' : 'FAILED'}\n- **Purpose**: Validates specialized rule behavior for different file types\n- **Coverage**: Astrological files, campaign system, test files, scripts, Next.js pages\n\n### ‚úÖ Performance Testing\n- **Status**: ${report.summary.performanceTests ? 'PASSED' : 'FAILED'}\n- **Purpose**: Tests linting speed, memory usage, and caching effectiveness\n- **Coverage**: Execution speed, memory optimization, cache performance, scalability\n\n### ‚úÖ Integration Testing\n- **Status**: ${report.summary.integrationTests ? 'PASSED' : 'FAILED'}\n- **Purpose**: Tests automated error resolution and workflow integration\n- **Coverage**: Auto-fix, import organization, unused variables, console statements\n\n### ‚úÖ Comprehensive Validation\n- **Status**: ${report.summary.comprehensiveValidation ? 'PASSED' : 'FAILED'}\n- **Purpose**: Overall system validation and quality assurance\n- **Coverage**: End-to-end validation, integration points, maintenance procedures\n\n## Detailed Results\n\n${report.results\n  .map(\n    result => `;\n### ${result.testFile}\n- **Status**: ${result.passed ? '‚úÖ PASSED' : '‚ùå FAILED'}",
        "line": 189,
        "column": 11,
        "context": "t.totalDuration / report.totalTests);\\n\\n    return `# Comprehensive Linting Test Suite Report\\n\\n## Exe"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`- **Errors**: ${result.errors.length}\\n${result.errors.map(e => `  - ${e}`).join('\\n')}",
        "line": 240,
        "column": 29,
        "context": "${result.duration}ms\\n${result.errors.length > 0 ? `- **Errors**: ${result.errors.length}\\n${result.e"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "` : ''};\n${result.warnings.length > 0 ? `- **Warnings**: ${result.warnings.length}\\n${result.warnings.map(w => `  - ${w}",
        "line": 240,
        "column": 117,
        "context": "\\n${result.errors.map(e => `  - ${e}`).join('\\n')}` : ''};\\n${result.warnings.length > 0 ? `- **Warni"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`,\n  )\n  .join('\\n')}\n\n## Quality Metrics\n\n### Performance Benchmarks\n- **Target Execution Time**: < 30 seconds per test\n- **Target Memory Usage**: < 512MB\n- **Target Cache Hit Rate**: > 80%\n- **Target Success Rate**: > 95%\n\n### Coverage Areas\n- ‚úÖ ESLint Configuration Structure\n- ‚úÖ Custom Astrological Rules\n- ‚úÖ Domain-Specific File Handling\n- ‚úÖ React 19 & Next.js 15 Compatibility\n- ‚úÖ TypeScript Strict Mode Integration\n- ‚úÖ Import Resolution & Organization\n- ‚úÖ Performance Optimization\n- ‚úÖ Memory Management\n- ‚úÖ Caching Effectiveness\n- ‚úÖ Error Resolution Workflows\n\n## Recommendations\n\n${\n  report.failedTests > 0\n    ? `\n### üö® Failed Tests Require Attention\n${report.results\n  .filter(r => !r.passed);\n  .map(r => `- Fix issues in ${r.testFile}`);\n  .join('\\n')}",
        "line": 242,
        "column": 0,
        "context": "warnings.map(w => `  - ${w}`).join('\\n')}` : ''};\\n`,\\n  )\\n  .join('\\n')}\\n\\n## Quality Metrics\\n\\n### Per"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`# Comprehensive Linting Test Suite Report\n\n## Executive Summary\n\n- **Total Tests**: ${report.totalTests}\n- **Passed**: ${report.passedTests}\n- **Failed**: ${report.failedTests}\n- **Success Rate**: ${successRate}%\n- **Total Duration**: ${report.totalDuration}ms\n- **Average Duration**: ${avgDuration}ms per test\n\n## Test Categories\n\n### ‚úÖ Configuration Validation\n- **Status**: ${report.summary.configurationValidation ? 'PASSED' : 'FAILED'}\n- **Purpose**: Validates ESLint configuration structure, rule definitions, and plugin integration\n- **Coverage**: Base configuration, TypeScript rules, React 19 compatibility, domain-specific rules\n\n### ‚úÖ Astrological Rules Validation\n- **Status**: ${report.summary.astrologicalRules ? 'PASSED' : 'FAILED'}\n- **Purpose**: Tests custom astrological ESLint rules for planetary calculations\n- **Coverage**: Planetary constants, position structures, elemental properties, transit validation\n\n### ‚úÖ Domain-Specific Rule Behavior\n- **Status**: ${report.summary.domainSpecificBehavior ? 'PASSED' : 'FAILED'}\n- **Purpose**: Validates specialized rule behavior for different file types\n- **Coverage**: Astrological files, campaign system, test files, scripts, Next.js pages\n\n### ‚úÖ Performance Testing\n- **Status**: ${report.summary.performanceTests ? 'PASSED' : 'FAILED'}\n- **Purpose**: Tests linting speed, memory usage, and caching effectiveness\n- **Coverage**: Execution speed, memory optimization, cache performance, scalability\n\n### ‚úÖ Integration Testing\n- **Status**: ${report.summary.integrationTests ? 'PASSED' : 'FAILED'}\n- **Purpose**: Tests automated error resolution and workflow integration\n- **Coverage**: Auto-fix, import organization, unused variables, console statements\n\n### ‚úÖ Comprehensive Validation\n- **Status**: ${report.summary.comprehensiveValidation ? 'PASSED' : 'FAILED'}\n- **Purpose**: Overall system validation and quality assurance\n- **Coverage**: End-to-end validation, integration points, maintenance procedures\n\n## Detailed Results\n\n${report.results\n  .map(\n    result => `;\n### ${result.testFile}\n- **Status**: ${result.passed ? '‚úÖ PASSED' : '‚ùå FAILED'}\n- **Duration**: ${result.duration}ms\n${result.errors.length > 0 ? `- **Errors**: ${result.errors.length}",
        "line": 189,
        "column": 11,
        "context": "t.totalDuration / report.totalTests);\\n\\n    return `# Comprehensive Linting Test Suite Report\\n\\n## Exe"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "` : ''};\n${result.warnings.length > 0 ? `- **Warnings**: ${result.warnings.length}\\n${result.warnings.map(w => `  - ${w}",
        "line": 240,
        "column": 117,
        "context": "\\n${result.errors.map(e => `  - ${e}`).join('\\n')}` : ''};\\n${result.warnings.length > 0 ? `- **Warni"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`,\n  )\n  .join('\\n')}\n\n## Quality Metrics\n\n### Performance Benchmarks\n- **Target Execution Time**: < 30 seconds per test\n- **Target Memory Usage**: < 512MB\n- **Target Cache Hit Rate**: > 80%\n- **Target Success Rate**: > 95%\n\n### Coverage Areas\n- ‚úÖ ESLint Configuration Structure\n- ‚úÖ Custom Astrological Rules\n- ‚úÖ Domain-Specific File Handling\n- ‚úÖ React 19 & Next.js 15 Compatibility\n- ‚úÖ TypeScript Strict Mode Integration\n- ‚úÖ Import Resolution & Organization\n- ‚úÖ Performance Optimization\n- ‚úÖ Memory Management\n- ‚úÖ Caching Effectiveness\n- ‚úÖ Error Resolution Workflows\n\n## Recommendations\n\n${\n  report.failedTests > 0\n    ? `\n### üö® Failed Tests Require Attention\n${report.results\n  .filter(r => !r.passed);\n  .map(r => `- Fix issues in ${r.testFile}`);\n  .join('\\n')}",
        "line": 242,
        "column": 0,
        "context": "warnings.map(w => `  - ${w}`).join('\\n')}` : ''};\\n`,\\n  )\\n  .join('\\n')}\\n\\n## Quality Metrics\\n\\n### Per"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${report.results\n  .map(\n    result => `;\n### ${",
        "line": 234,
        "column": 0,
        "context": "nts, maintenance procedures\\n\\n## Detailed Results\\n\\n${report.results\\n  .map(\\n    result => `;\\n### ${re"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${result.errors.length > 0 ? `- **Errors**: ${",
        "line": 240,
        "column": 0,
        "context": " '‚ùå FAILED'}\\n- **Duration**: ${result.duration}ms\\n${result.errors.length > 0 ? `- **Errors**: ${resu"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${result.errors.map(e => `  - ${",
        "line": 240,
        "column": 69,
        "context": "gth > 0 ? `- **Errors**: ${result.errors.length}\\n${result.errors.map(e => `  - ${e}`).join('\\n')}` "
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${result.warnings.length > 0 ? `- **Warnings**: ${",
        "line": 241,
        "column": 0,
        "context": "t.errors.map(e => `  - ${e}`).join('\\n')}` : ''};\\n${result.warnings.length > 0 ? `- **Warnings**: ${"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${result.warnings.map(w => `  - ${",
        "line": 241,
        "column": 75,
        "context": "> 0 ? `- **Warnings**: ${result.warnings.length}\\n${result.warnings.map(w => `  - ${w}`).join('\\n')}"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n  report.failedTests > 0\n    ? `\n### üö® Failed Tests Require Attention\n${report.results\n  .filter(r => !r.passed);\n  .map(r => `- Fix issues in ${",
        "line": 268,
        "column": 0,
        "context": "‚úÖ Error Resolution Workflows\\n\\n## Recommendations\\n\\n${\\n  report.failedTests > 0\\n    ? `\\n### üö® Failed "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 62,
        "column": 67,
        "context": ".log('üöÄ Starting Comprehensive Linting Test Suite...\\n');\\n\\n    const results: TestResult[] = [];\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 68,
        "column": 47,
        "context": " {\\n      // // console.log(`üìã Running ${testFile}...`);\\n      const result = await this.runSingleTe"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 323,
        "column": 53,
        "context": " // // console.log('üîç Validating System Readiness...\\n');\\n\\n    const checks = [\\n      this.checkESL"
      }
    ],
    "src/scripts/runPerformanceValidation.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 58,
        "column": 70,
        "context": "g('üìä Running comprehensive performance validation...\\n');\\n\\n    try {\\n      await this.validator.val"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 70,
        "column": 57,
        "context": "// console.log('üìà Starting performance monitoring...\\n');\\n\\n    const interval = options.interval ||"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 93,
        "column": 82,
        "context": "inuous monitoring every ${interval / 1000} seconds...\\n`);\\n\\n      const monitorLoop = async () => {\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 98,
        "column": 60,
        "context": "  // // console.log(`üìä Measuring: ${command.name}...`);\\n            const metrics = await this.moni"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 137,
        "column": 58,
        "context": "  // // console.log(`üìä Measuring: ${command.name}...`);\\n          const metrics = await this.monito"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 153,
        "column": 55,
        "context": "/ // console.log('üìã Generating performance report...\\n');\\n\\n    const report = this.monitor.generate"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 244,
        "column": 62,
        "context": "nsole.log('üß™ Running performance validation tests...\\n');\\n\\n    try {\\n      // // console.log('üìä Ru"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 247,
        "column": 73,
        "context": "('üìä Running Jest tests for performance validation...');\\n      const output = execSync(;\\n        'ya"
      }
    ],
    "src/scripts/safe-unused-import-remover.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 74,
        "column": 50,
        "context": "    // // console.log('üîç Analyzing unused imports...\\n');\\n\\n    // Get ESLint output for unused impo"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 124,
        "column": 54,
        "context": "// // console.log('üöÄ Removing safe unused imports...\\n');\\n    this.performImportRemoval(analysis.sa"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 402,
        "column": 46,
        "context": "d {\\n    // // console.log('\\nüìã Organizing imports...');\\n\\n    try {\\n      execSync('yarn lint --fix "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 419,
        "column": 46,
        "context": "n {\\n    // // console.log('\\nüîç Validating changes...');\\n\\n    try {\\n      execSync('yarn build', {\\n "
      }
    ],
    "src/scripts/unintentional-any-elimination/UnintentionalAnyCampaignController.ts": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`# Unintentional Any Elimination Campaign - Final Report;\n\n## Campaign Summary\n\n**Execution Date:** ${this.startTime.toISOString()}\n**Duration:** ${Math.round((Date.now() - this.startTime.getTime()) / 1000)} seconds\n**Target Reduction:** ${this.config.targetReductionPercentage}%\n**Actual Reduction:** ${this.metrics.reductionPercentage.toFixed(2)}%\n\n## Metrics Overview\n\n### Before and After\n- **Initial explicit-any count:** ${initialCount}\n- **Final explicit-any count:** ${finalCount}\n- **Total reduction:** ${actualReduction} any types\n- **Reduction percentage:** ${this.metrics.reductionPercentage.toFixed(2)}%\n\n### Processing Statistics\n- **Files processed:** ${this.metrics.filesProcessed}\n- **Batches completed:** ${this.metrics.batchesCompleted}\n- **Total any types analyzed:** ${this.metrics.totalAnyTypes}\n- **Classified as intentional:** ${this.metrics.classifiedIntentional}\n- **Classified as unintentional:** ${this.metrics.classifiedUnintentional}\n\n### Replacement Results\n- **Successful replacements:** ${this.metrics.successfulReplacements}\n- **Failed replacements:** ${this.metrics.failedReplacements}\n- **Documented intentional types:** ${this.metrics.documentedIntentional}\n- **Build stability score:** ${this.metrics.buildStabilityScore.toFixed(1)}%\n\n## Achievement Analysis\n\n### Target Achievement\n${\n  this.metrics.reductionPercentage >= this.config.targetReductionPercentage\n    ? '‚úÖ **TARGET ACHIEVED** - Exceeded target reduction percentage'\n    : `‚ö†Ô∏è **TARGET PARTIAL** - Achieved ${this.metrics.reductionPercentage.toFixed(1)}% of ${this.config.targetReductionPercentage}",
        "line": 644,
        "column": 19,
        "context": "on/final-campaign-report.md`;\\n\\n    const report = `# Unintentional Any Elimination Campaign - Final "
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`# Unintentional Any Elimination Campaign - Final Report;\n\n## Campaign Summary\n\n**Execution Date:** ${this.startTime.toISOString()}\n**Duration:** ${Math.round((Date.now() - this.startTime.getTime()) / 1000)} seconds\n**Target Reduction:** ${this.config.targetReductionPercentage}%\n**Actual Reduction:** ${this.metrics.reductionPercentage.toFixed(2)}%\n\n## Metrics Overview\n\n### Before and After\n- **Initial explicit-any count:** ${initialCount}\n- **Final explicit-any count:** ${finalCount}\n- **Total reduction:** ${actualReduction} any types\n- **Reduction percentage:** ${this.metrics.reductionPercentage.toFixed(2)}%\n\n### Processing Statistics\n- **Files processed:** ${this.metrics.filesProcessed}\n- **Batches completed:** ${this.metrics.batchesCompleted}\n- **Total any types analyzed:** ${this.metrics.totalAnyTypes}\n- **Classified as intentional:** ${this.metrics.classifiedIntentional}\n- **Classified as unintentional:** ${this.metrics.classifiedUnintentional}\n\n### Replacement Results\n- **Successful replacements:** ${this.metrics.successfulReplacements}\n- **Failed replacements:** ${this.metrics.failedReplacements}\n- **Documented intentional types:** ${this.metrics.documentedIntentional}\n- **Build stability score:** ${this.metrics.buildStabilityScore.toFixed(1)}%\n\n## Achievement Analysis\n\n### Target Achievement\n${\n  this.metrics.reductionPercentage >= this.config.targetReductionPercentage\n    ? '‚úÖ **TARGET ACHIEVED** - Exceeded target reduction percentage'\n    : `‚ö†Ô∏è **TARGET PARTIAL** - Achieved ${this.metrics.reductionPercentage.toFixed(1)}% of ${this.config.targetReductionPercentage}% target`\n}",
        "line": 644,
        "column": 19,
        "context": "on/final-campaign-report.md`;\\n\\n    const report = `# Unintentional Any Elimination Campaign - Final "
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n  this.metrics.reductionPercentage >= this.config.targetReductionPercentage\n    ? '‚úÖ **TARGET ACHIEVED** - Exceeded target reduction percentage'\n    : `‚ö†Ô∏è **TARGET PARTIAL** - Achieved ${",
        "line": 677,
        "column": 0,
        "context": "\\n\\n## Achievement Analysis\\n\\n### Target Achievement\\n${\\n  this.metrics.reductionPercentage >= this.conf"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 88,
        "column": 6,
        "context": ",\\n      enableProgressiveImprovement: true,\\n      ...config\\n    };\\n\\n    this.metrics = {\\n      total"
      }
    ],
    "src/scripts/unintentional-any-elimination/execute-full-campaign.ts": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`\n- **Risk Level:** Low\n- **Results:** High success rate with minimal rollbacks\n\n### Phase 2: Advanced Type Replacements\n- **Strategy:** Replace Record types and object structures\n- **Risk Level:** Medium\n- **Results:** Selective replacements with safety validation\n\n### Phase 3: Documentation Pass\n- **Strategy:** Document remaining intentional any types\n- **Risk Level:** Low\n- **Results:** Comprehensive documentation with ESLint disable comments\n\n## Achievement Analysis\n\n### Target Achievement Status\n${\n  reductionPercentage >= 15\n    ? `‚úÖ **SUCCESS** - Achieved ${reductionPercentage.toFixed(1)}% reduction, exceeding minimum 15% target`\n    : `‚ö†Ô∏è **PARTIAL SUCCESS** - Achieved ${reductionPercentage.toFixed(1)}",
        "line": 596,
        "column": 51,
        "context": " **Strategy:** Replace \\`any[]\\` with \\`unknown[]\\`\\n- **Risk Level:** Low\\n- **Results:** High succes"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`\n}\n\n### Quality Metrics\n- **Type Safety Improvement:** ${totalReductions} any types replaced with more specific types\n- **Code Documentation:** ${totalDocumented} intentional any types properly documented with explanations\n- **Build Stability:** 100% - No compilation errors introduced\n- **Rollback Events:** Minimal - All handled automatically with safety protocols\n\n## Domain-Specific Results\n\n### High-Risk Domains (Preserved)\n- **Astrological Calculations:** Preserved flexibility for astronomical data compatibility\n- **Campaign System:** Maintained dynamic configuration capabilities\n- **Intelligence Systems:** Preserved flexible typing for adaptive behavior\n\n### Medium-Risk Domains (Selective Improvement)\n- **Recipe & Ingredient System:** Improved type safety where possible\n- **Service Layer:** Enhanced interface definitions\n- **API Integration:** Maintained external compatibility\n\n### Low-Risk Domains (Aggressive Improvement)\n- **React Components:** Improved prop type safety\n- **Utility Functions:** Enhanced with generic type parameters\n- **Helper Functions:** Replaced with specific types\n\n## Technical Implementation\n\n### Safety Protocols Used\n- **Automatic Backup Creation:** All modified files backed up before changes\n- **Incremental Validation:** TypeScript compilation checked after each phase\n- **Automatic Rollback:** Failed changes automatically reverted\n- **Batch Processing:** Limited file processing for stability\n\n### Classification Algorithm\n- **Intentional Detection:** Comments, error handling, external APIs\n- **Unintentional Detection:** Simple arrays, basic records, variable declarations\n- **Confidence Scoring:** 0.5-0.95 confidence range for decision making\n- **Domain Context:** Specialized analysis for astrological and campaign code\n\n## Recommendations\n\n### Immediate Actions\n${\n  reductionPercentage >= 15\n    ? '- Monitor for new unintentional any types in development\\n- Consider expanding to test files in future campaigns\\n- Implement prevention measures in development workflow'\n    : '- Review remaining high-confidence cases for manual intervention\\n- Consider additional targeted campaigns for specific domains\\n- Analyze failed replacements for pattern improvements'\n}\n\n### Long-term Strategy\n- **Prevention Integration:** Add pre-commit hooks to detect new unintentional any types\n- **Continuous Monitoring:** Regular automated analysis of any type usage\n- **Developer Education:** Share best practices for avoiding unintentional any types\n- **Tool Enhancement:** Improve classification algorithms based on campaign learnings\n\n### Future Campaign Opportunities\n- **Test File Campaign:** Apply similar strategies to test files with appropriate safety measures\n- **Function Parameter Campaign:** Targeted improvement of function parameter types\n- **External API Integration:** Improve typing for external service integrations\n\n## Technical Artifacts\n\n### Generated Documentation\n- All intentional any types now include explanatory comments\n- ESLint disable comments added with specific reasoning\n- Consistent documentation format across codebase\n\n### Backup and Recovery\n- Campaign backups preserved for rollback if needed\n- All changes tracked with timestamps and reasoning\n- Recovery procedures documented for emergency use\n\n## Conclusion\n\n${\n  reductionPercentage >= 15\n    ? `The Unintentional Any Elimination Campaign successfully achieved its target of 15-20% reduction in explicit-any warnings. The campaign improved type safety by replacing ${totalReductions} unintentional any types with more specific types while properly documenting ${totalDocumented}",
        "line": 616,
        "column": 108,
        "context": "tage.toFixed(1)}% reduction of 15-20% target range`\\n}\\n\\n### Quality Metrics\\n- **Type Safety Improveme"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`\n- **Risk Level:** Low\n- **Results:** High success rate with minimal rollbacks\n\n### Phase 2: Advanced Type Replacements\n- **Strategy:** Replace Record types and object structures\n- **Risk Level:** Medium\n- **Results:** Selective replacements with safety validation\n\n### Phase 3: Documentation Pass\n- **Strategy:** Document remaining intentional any types\n- **Risk Level:** Low\n- **Results:** Comprehensive documentation with ESLint disable comments\n\n## Achievement Analysis\n\n### Target Achievement Status\n${\n  reductionPercentage >= 15\n    ? `‚úÖ **SUCCESS** - Achieved ${reductionPercentage.toFixed(1)}% reduction, exceeding minimum 15% target`\n    : `‚ö†Ô∏è **PARTIAL SUCCESS** - Achieved ${reductionPercentage.toFixed(1)}",
        "line": 596,
        "column": 51,
        "context": " **Strategy:** Replace \\`any[]\\` with \\`unknown[]\\`\\n- **Risk Level:** Low\\n- **Results:** High succes"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`\n}\n\n### Quality Metrics\n- **Type Safety Improvement:** ${totalReductions} any types replaced with more specific types\n- **Code Documentation:** ${totalDocumented} intentional any types properly documented with explanations\n- **Build Stability:** 100% - No compilation errors introduced\n- **Rollback Events:** Minimal - All handled automatically with safety protocols\n\n## Domain-Specific Results\n\n### High-Risk Domains (Preserved)\n- **Astrological Calculations:** Preserved flexibility for astronomical data compatibility\n- **Campaign System:** Maintained dynamic configuration capabilities\n- **Intelligence Systems:** Preserved flexible typing for adaptive behavior\n\n### Medium-Risk Domains (Selective Improvement)\n- **Recipe & Ingredient System:** Improved type safety where possible\n- **Service Layer:** Enhanced interface definitions\n- **API Integration:** Maintained external compatibility\n\n### Low-Risk Domains (Aggressive Improvement)\n- **React Components:** Improved prop type safety\n- **Utility Functions:** Enhanced with generic type parameters\n- **Helper Functions:** Replaced with specific types\n\n## Technical Implementation\n\n### Safety Protocols Used\n- **Automatic Backup Creation:** All modified files backed up before changes\n- **Incremental Validation:** TypeScript compilation checked after each phase\n- **Automatic Rollback:** Failed changes automatically reverted\n- **Batch Processing:** Limited file processing for stability\n\n### Classification Algorithm\n- **Intentional Detection:** Comments, error handling, external APIs\n- **Unintentional Detection:** Simple arrays, basic records, variable declarations\n- **Confidence Scoring:** 0.5-0.95 confidence range for decision making\n- **Domain Context:** Specialized analysis for astrological and campaign code\n\n## Recommendations\n\n### Immediate Actions\n${\n  reductionPercentage >= 15\n    ? '- Monitor for new unintentional any types in development\\n- Consider expanding to test files in future campaigns\\n- Implement prevention measures in development workflow'\n    : '- Review remaining high-confidence cases for manual intervention\\n- Consider additional targeted campaigns for specific domains\\n- Analyze failed replacements for pattern improvements'\n}\n\n### Long-term Strategy\n- **Prevention Integration:** Add pre-commit hooks to detect new unintentional any types\n- **Continuous Monitoring:** Regular automated analysis of any type usage\n- **Developer Education:** Share best practices for avoiding unintentional any types\n- **Tool Enhancement:** Improve classification algorithms based on campaign learnings\n\n### Future Campaign Opportunities\n- **Test File Campaign:** Apply similar strategies to test files with appropriate safety measures\n- **Function Parameter Campaign:** Targeted improvement of function parameter types\n- **External API Integration:** Improve typing for external service integrations\n\n## Technical Artifacts\n\n### Generated Documentation\n- All intentional any types now include explanatory comments\n- ESLint disable comments added with specific reasoning\n- Consistent documentation format across codebase\n\n### Backup and Recovery\n- Campaign backups preserved for rollback if needed\n- All changes tracked with timestamps and reasoning\n- Recovery procedures documented for emergency use\n\n## Conclusion\n\n${\n  reductionPercentage >= 15\n    ? `The Unintentional Any Elimination Campaign successfully achieved its target of 15-20% reduction in explicit-any warnings. The campaign improved type safety by replacing ${totalReductions} unintentional any types with more specific types while properly documenting ${totalDocumented} intentional uses. Build stability was maintained throughout the process with zero compilation errors introduced.`\n    : `The Unintentional Any Elimination Campaign made significant progress toward the 15-20% reduction target, achieving ${reductionPercentage.toFixed(1)}",
        "line": 616,
        "column": 108,
        "context": "tage.toFixed(1)}% reduction of 15-20% target range`\\n}\\n\\n### Quality Metrics\\n- **Type Safety Improveme"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n  reductionPercentage >= 15\n    ? `‚úÖ **SUCCESS** - Achieved ${",
        "line": 613,
        "column": 0,
        "context": "hievement Analysis\\n\\n### Target Achievement Status\\n${\\n  reductionPercentage >= 15\\n    ? `‚úÖ **SUCCESS*"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n  reductionPercentage >= 15\n    ? `The Unintentional Any Elimination Campaign successfully achieved its target of 15-20% reduction in explicit-any warnings. The campaign improved type safety by replacing ${",
        "line": 690,
        "column": 0,
        "context": "ures documented for emergency use\\n\\n## Conclusion\\n\\n${\\n  reductionPercentage >= 15\\n    ? `The Unintent"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Record<\\${",
        "line": 307,
        "column": 18,
        "context": "pe) => {\\n          fileFixes++,\\n          return \\`Record<\\${keyType}, unknown>\\`;\\n        });\\n\\n    "
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`\\${filePath}.backup-\\${",
        "line": 318,
        "column": 30,
        "context": "   // Create backup\\n          const backupPath = \\`\\${filePath}.backup-\\${Date.now()}\\`;\\n          f"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`‚úÖ Applied \\${fileFixes} advanced fixes to \\${",
        "line": 327,
        "column": 31,
        "context": " stdio: 'pipe' });\\n            // // console.log(\\`‚úÖ Applied \\${fileFixes} advanced fixes to \\${file"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`‚ùå Rolled back \\${",
        "line": 334,
        "column": 31,
        "context": "kSync(backupPath);\\n            // // console.log(\\`‚ùå Rolled back \\${filePath} due to compilation err"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Error processing \\${filePath}: \\${",
        "line": 338,
        "column": 27,
        "context": "     } catch (error) {\\n        // // console.log(\\`Error processing \\${filePath}: \\${error.message}\\"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Advanced replacement error: \\${",
        "line": 344,
        "column": 23,
        "context": "Fixes;\\n  } catch (error) {\\n    // // console.log(\\`Advanced replacement error: \\${error.message}\\`);"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`\\${indent}// eslint-disable-next-line @typescript-eslint/no-explicit-any -- \\${",
        "line": 443,
        "column": 31,
        "context": "\\s*)/)?.[1] || '';\\n              const comment = \\`\\${indent}// eslint-disable-next-line @typescript"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`üìù Added \\${addedComments} documentation comments to \\${",
        "line": 453,
        "column": 29,
        "context": " lines.join('\\\\n')),\\n          // // console.log(\\`üìù Added \\${addedComments} documentation comments"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Error documenting \\${filePath}: \\${",
        "line": 457,
        "column": 27,
        "context": "     } catch (error) {\\n        // // console.log(\\`Error documenting \\${filePath}: \\${error.message}"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Documentation error: \\${",
        "line": 463,
        "column": 23,
        "context": "ented;\\n  } catch (error) {\\n    // // console.log(\\`Documentation error: \\${error.message}\\`);\\n    re"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 115,
        "column": 46,
        "context": "y {\\n      this.log('üîç Validating TypeScript build...', 'info'),\\n      execSync('yarn tsc --noEmit -"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 126,
        "column": 63,
        "context": "'üìä Analyzing codebase for unintentional any types...', 'info'),\\n\\n    const totalExplicitAny = this."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 186,
        "column": 57,
        "context": "s.log('üîç Analyzing domain-specific any type usage...', 'info'),\\n\\n    const domains = [\\n      {\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 247,
        "column": 54,
        "context": "    this.log('Phase 1 completed - checking results...', 'info');\\n\\n        // Extract fixes from outp"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 262,
        "column": 55,
        "context": "his.log('\\nüîß Executing advanced type replacements...', 'info'),\\n\\n    return new Promise(resolve => "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 368,
        "column": 52,
        "context": "  this.log('\\nüìù Documenting intentional any types...', 'info'),\\n\\n    return new Promise(resolve => "
      }
    ],
    "src/scripts/unused-vars/cli.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 32,
        "column": 18,
        "context": "ate;\\n}\\n\\nfunction main(): void {\\n  const [command, ...rest] = process.argv.slice(2);\\n  switch (comman"
      }
    ],
    "src/scripts/unused-vars/progressReporter.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 58,
        "column": 4,
        "context": "toISOString(),\\n    };\\n  }\\n  const updated = {\\n    ...current,\\n    ...metrics,\\n    lastUpdated: new D"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 59,
        "column": 4,
        "context": "   };\\n  }\\n  const updated = {\\n    ...current,\\n    ...metrics,\\n    lastUpdated: new Date().toISOStrin"
      }
    ],
    "src/scripts/updateIngredientFiles.js": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Failed API request after \\${",
        "line": 84,
        "column": 78,
        "context": "equest\\(url, cacheKey\\) {[\\s\\S]+?throw new Error\\(`Failed API request after \\${maxRetries} retries`\\"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 35,
        "column": 62,
        "context": "og('Starting to update ingredient category scripts...');\\n\\n// Process each target file\\nTARGET_FILES.f"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 46,
        "column": 42,
        "context": "n;\\n  }\\n\\n  // console.log(`\\nProcessing ${filename}...`);\\n\\n  // Read the target file\\n  const content "
      }
    ],
    "src/scripts/validateDomainSpecificRules.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 28,
        "column": 66,
        "context": "e.log('üîç Starting Domain-Specific Rule Validation...\\n');\\n\\n    try {\\n      // Validate astrological"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 48,
        "column": 67,
        "context": ".log('üåü Validating Astrological Calculation Files...');\\n\\n    const astroFiles = [\\n      'src/calcul"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 64,
        "column": 58,
        "context": "/ console.log('üöÄ Validating Campaign System Files...');\\n\\n    const campaignFiles = [\\n      'src/ser"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 79,
        "column": 47,
        "context": " {\\n    // // console.log('üß™ Validating Test Files...');\\n\\n    try {\\n      const testCount = execSync"
      }
    ],
    "src/scripts/validateLintingPerformance.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 39,
        "column": 65,
        "context": "le.log('üöÄ Starting Linting Performance Validation...\\n');\\n\\n    try {\\n      // 1. Establish baseline"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 66,
        "column": 67,
        "context": ".log('üìä Establishing baseline performance metrics...');\\n\\n    // Clear all caches to get true baseli"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 109,
        "column": 65,
        "context": "le.log('üîÑ Validating enhanced caching performance...');\\n\\n    // First run to populate cache\\n    // "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 112,
        "column": 41,
        "context": "te cache\\n    // // console.log('  Populating cache...');\\n    try {\\n      execSync('yarn lint:fast --"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 120,
        "column": 61,
        "context": "le.warn('  Cache population had issues, continuing...')\\n    }\\n\\n    // Second run to measure cache pe"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 184,
        "column": 68,
        "context": "log('‚ö° Validating parallel processing optimization...');\\n\\n    const startTime = Date.now();\\n    cons"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 250,
        "column": 71,
        "context": "('üíæ Validating memory optimization (4096MB limit)...');\\n\\n    const startTime = Date.now();\\n    let "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 266,
        "column": 15,
        "context": ": 'pipe',\\n        timeout: 120000,\\n        env: { ...process.env, NODE_OPTIONS: '--max-old-space-siz"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 324,
        "column": 80,
        "context": "ating incremental linting (sub-10 second feedback)...');\\n\\n    try {\\n      // Create a test file chan"
      }
    ],
    "src/scripts/validateReact19NextJS15Compatibility.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 66,
        "column": 60,
        "context": "e.log('üîç Validating React 19 Modern JSX Transform...');\\n\\n    // Test 1: Component without React imp"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 122,
        "column": 60,
        "context": "e.log('üîç Validating Next.js 15 App Router Support...');\\n\\n    // Test 1: App Router page component\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 228,
        "column": 56,
        "context": "nsole.log('üîç Validating React Concurrent Features...');\\n\\n    // Test 1: Suspense and lazy loading\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 239,
        "column": 36,
        "context": " {\\n  return (\\n    <Suspense fallback={<div>Loading...</div>}>\\n      <LazyComponent />\\n    </Suspense"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 276,
        "column": 29,
        "context": "isabled={isPending}>\\n        {isPending ? 'Loading...' : 'Click me'}\\n      </button>\\n      <p>Deferr"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 301,
        "column": 57,
        "context": "sole.log('üîç Validating Enhanced React Hooks Rules...');\\n\\n    // Test 1: Standard exhaustive-deps va"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 366,
        "column": 53,
        "context": " console.log('üîç Validating Configuration Settings...');\\n\\n    try {\\n      // Check package.json vers"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 501,
        "column": 24,
        "context": "ole.log('='.repeat(80));\\n\\n    const categories = [...new Set(this.results.map(r => r.category))];\\n  "
      }
    ],
    "src/scripts/validateReact19NextJS15Compatibility.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 82,
        "column": 66,
        "context": "e.log('üîç Validating React 19 Modern JSX Transform...');\\n\\n    // Test 1: Component without React imp"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 138,
        "column": 66,
        "context": "e.log('üîç Validating Next.js 15 App Router Support...');\\n\\n    // Test 1: App Router page component\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 244,
        "column": 62,
        "context": "nsole.log('üîç Validating React Concurrent Features...');\\n\\n    // Test 1: Suspense and lazy loading\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 255,
        "column": 36,
        "context": " {\\n  return (\\n    <Suspense fallback={<div>Loading...</div>}>;\\n      <LazyComponent />\\n    </Suspens"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 292,
        "column": 29,
        "context": "sabled={isPending}>;\\n        {isPending ? 'Loading...' : 'Click me'}\\n      </button>\\n      <p>Deferr"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 317,
        "column": 63,
        "context": "sole.log('üîç Validating Enhanced React Hooks Rules...');\\n\\n    // Test 1: Standard exhaustive-deps va"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 382,
        "column": 59,
        "context": " console.log('üîç Validating Configuration Settings...');\\n\\n    try {\\n      // Check package.json vers"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 520,
        "column": 24,
        "context": "ole.log('='.repeat(80));\\n\\n    const categories = [...new Set(this.results.map(r => r.category))];\\n  "
      }
    ],
    "src/scripts/validation/ComprehensiveValidationFramework.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 94,
        "column": 6,
        "context": "     maxRetries: 2,\\n      logLevel: 'info',\\n      ...config\\n    };\\n  }\\n\\n  /**\\n   * Perform comprehen"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 137,
        "column": 31,
        "context": "edFiles, batchId);\\n        validationResults.push(...componentResults);\\n        const failedComponen"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 148,
        "column": 31,
        "context": "edFiles, batchId);\\n        validationResults.push(...serviceResults);\\n        const failedServices ="
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 234,
        "column": 59,
        "context": "log('debug', 'üîç Validating TypeScript compilation...');\\n\\n    for (let retry = 0, retry <= this.conf"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 268,
        "column": 93,
        "context": "ompilation failed (attempt ${retry + 1}), retrying...`);\\n          await this.delay(1000); // Wait 1"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 301,
        "column": 47,
        "context": ";\\n\\n    this.log('debug', 'üß™ Validating test suite...');\\n\\n    try {\\n      // Find related test files"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 361,
        "column": 78,
        "context": "lidating ${componentFiles.length} React components...`);\\n\\n    for (const componentFile of componentF"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 460,
        "column": 80,
        "context": "dating ${serviceFiles.length} service integrations...`);\\n\\n    for (const serviceFile of serviceFiles"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 552,
        "column": 50,
        "context": "    this.log('debug', 'üèóÔ∏è Validating build system...');\\n\\n    try {\\n      // Test Next.js build proc"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 884,
        "column": 27,
        "context": "es detected');\\n      }\\n      recommendations.push(...result.recommendations);\\n    }\\n\\n    return {\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 893,
        "column": 23,
        "context": "\\n      totalExecutionTime,\\n      criticalIssues: [...new Set(criticalIssues)],\\n      recommendations"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 894,
        "column": 24,
        "context": "new Set(criticalIssues)],\\n      recommendations: [...new Set(recommendations)]\\n    };\\n  }\\n\\n  private"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 911,
        "column": 41,
        "context": ") || [];\\n    this.validationHistory.set(batchId, [...existing, ...validationResults])\\n  }\\n\\n  /**\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 911,
        "column": 54,
        "context": "this.validationHistory.set(batchId, [...existing, ...validationResults])\\n  }\\n\\n  /**\\n   * Get validat"
      }
    ],
    "src/scripts/validation/QualityAssuranceDashboard.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 115,
        "column": 6,
        "context": "ticReporting: true,\\n      logLevel: 'info',\\n      ...config\\n    };\\n\\n    this.validationFramework = n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 167,
        "column": 52,
        "context": "  this.log('debug', 'üìä Collecting quality metrics...');\\n\\n    try {\\n      // Get validation statisti"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 257,
        "column": 66,
        "context": "fo', 'üìä Generating comprehensive dashboard report...');\\n\\n    const currentMetrics = await this.coll"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 501,
        "column": 24,
        "context": "}\\n\\n    // Critical issues\\n    criticalIssues.push(...readiness.blockers);\\n\\n    // Next steps\\n    nex"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 504,
        "column": 19,
        "context": ".blockers);\\n\\n    // Next steps\\n    nextSteps.push(...readiness.requiredActions.critical);\\n    nextSt"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 505,
        "column": 19,
        "context": "ess.requiredActions.critical);\\n    nextSteps.push(...readiness.requiredActions.important.slice(0, 3)"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 540,
        "column": 19,
        "context": "te actions (critical blockers)\\n    immediate.push(...readiness.requiredActions.critical);\\n\\n    // Sh"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 543,
        "column": 19,
        "context": "tions (important improvements)\\n    shortTerm.push(...readiness.requiredActions.important);\\n\\n    // A"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 555,
        "column": 18,
        "context": "actions (optional improvements)\\n    longTerm.push(...readiness.requiredActions.optional);\\n    longTe"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 561,
        "column": 18,
        "context": "ing monitoring');\\n\\n    return {\\n      immediate: [...new Set(immediate)],\\n      shortTerm: [...new S"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 562,
        "column": 18,
        "context": "diate: [...new Set(immediate)],\\n      shortTerm: [...new Set(shortTerm)],\\n      longTerm: [...new Se"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 563,
        "column": 17,
        "context": "rtTerm: [...new Set(shortTerm)],\\n      longTerm: [...new Set(longTerm)]\\n    };\\n  }\\n\\n  /**\\n   * Estim"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 668,
        "column": 6,
        "context": "}`,\\n      '',\\n      '### Key Achievements',\\n      ...report.executiveSummary.keyAchievements.map(ach"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 671,
        "column": 6,
        "context": "}`),\\n      '',\\n      '### Critical Issues',\\n      ...report.executiveSummary.criticalIssues.map(issu"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 674,
        "column": 6,
        "context": "ssue}`),,\\n      '',\\n      '### Next Steps',\\n      ...report.executiveSummary.nextSteps.map(step => `"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 692,
        "column": 17,
        "context": "     lines.push('### Blockers');\\n      lines.push(...report.productionReadiness.blockers.map(blocker"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 698,
        "column": 17,
        "context": "     lines.push('### Warnings');\\n      lines.push(...report.productionReadiness.warnings.map(warning"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 713,
        "column": 6,
        "context": "',\\n      '',\\n      '### Immediate Actions',\\n      ...report.recommendations.immediate.map(action => "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 716,
        "column": 6,
        "context": ",\\n      '',\\n      '### Short-term Actions',\\n      ...report.recommendations.shortTerm.map(action => "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 719,
        "column": 6,
        "context": "),\\n      '',\\n      '### Long-term Actions',\\n      ...report.recommendations.longTerm.map(action => `"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 736,
        "column": 12,
        "context": "tQualityHistory(): QualityMetrics[] {\\n    return [...this.qualityHistory]\\n  }\\n\\n  /**\\n   * Clear qual"
      }
    ],
    "src/scripts/validation/ServiceIntegrationValidator.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 122,
        "column": 6,
        "context": "ld stability target\\n      logLevel: 'info',\\n      ...config\\n    };\\n  }\\n\\n  /**\\n   * Validate service "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 148,
        "column": 26,
        "context": "(serviceFile, batchId);\\n      serviceResults.push(...results);\\n    }\\n\\n    // Calculate quality metri"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 273,
        "column": 33,
        "context": "gs.length > 0) {\\n            result.warnings.push(...endpointValidation.warnings);\\n          }\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 335,
        "column": 33,
        "context": "gs.length > 0) {\\n            result.warnings.push(...methodValidation.warnings);\\n          }\\n       "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 885,
        "column": 27,
        "context": "t of serviceResults) {\\n      recommendations.push(...result.recommendations);\\n    }\\n\\n    // Add qual"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 898,
        "column": 12,
        "context": "ty');\\n    }\\n\\n    // Remove duplicates\\n    return [...new Set(recommendations)]\\n  }\\n\\n  // Utility met"
      }
    ],
    "src/scripts/validation/ValidationIntegration.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 65,
        "column": 6,
        "context": "     reportingPath: './validation-reports',\\n      ...config\\n    };\\n\\n    this.validationFramework = n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 78,
        "column": 54,
        "context": "const integratedResult: IntegratedBatchResult = { ...batchResult };\\n\\n    if (!this.config.enableAuto"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 154,
        "column": 27,
        "context": "les to cumulative list\\n      cumulativeFiles.push(...batchFiles);\\n\\n      // // console.log(`\\nüîç Val"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 202,
        "column": 39,
        "context": "Rollback;\\n\\n    const recommendations: string[] = [...validationResult.summary.recommendations];\\n\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 234,
        "column": 24,
        "context": "lt,\\n      overallQuality,\\n      recommendations: [...new Set(recommendations)],\\n      actionRequired"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 409,
        "column": 20,
        "context": "onIntegrationConfig>): void {\\n    this.config = { ...this.config, ...newConfig };\\n\\n    // Update val"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 409,
        "column": 36,
        "context": "fig>): void {\\n    this.config = { ...this.config, ...newConfig };\\n\\n    // Update validation framewor"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 414,
        "column": 8,
        "context": " = new ComprehensiveValidationFramework({\\n        ...this.config.validationConfig;\\n        ...newCon"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 415,
        "column": 8,
        "context": "\\n        ...this.config.validationConfig;\\n        ...newConfig.validationConfig\\n      });\\n    }\\n  }\\n"
      }
    ],
    "src/scripts/validation/validation-cli.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 103,
        "column": 59,
        "context": " console.log('üîç Starting comprehensive validation...');\\n\\n    if (!options.files || options.files.le"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 182,
        "column": 54,
        "context": "// // console.log('üìÑ Generating validation report...');\\n\\n    try {\\n      const report = options.bat"
      }
    ],
    "src/scripts/zero-error-dashboard.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 92,
        "column": 69,
        "context": "og('üéØ Generating Zero-Error Achievement Dashboard...\\n');\\n\\n    await this.dashboard.generateDashboa"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 121,
        "column": 68,
        "context": "log(`üëÄ Starting Zero-Error Achievement Monitoring...\\n`);\\n    // // console.log(`üìä Monitoring inte"
      }
    ],
    "src/services/AdvancedAnalyticsIntelligenceService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 119,
        "column": 6,
        "context": "Usage: 200 * 1024 * 1024, // 200MB\\n      },\\n      ...config\\n    };\\n\\n    this.cache = new Map();\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1062,
        "column": 25,
        "context": "Object.values(elements);\\n    const max = Math.max(...values);\\n    const min = Math.min(...values);\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1063,
        "column": 25,
        "context": "x = Math.max(...values);\\n    const min = Math.min(...values);\\n    const range = max - min;\\n\\n    // L"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1674,
        "column": 20,
        "context": "dIntelligenceConfig>): void {\\n    this.config = { ...this.config, ...newConfig };\\n    this.log('info"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1674,
        "column": 36,
        "context": "fig>): void {\\n    this.config = { ...this.config, ...newConfig };\\n    this.log('info', 'Advanced Ana"
      }
    ],
    "src/services/AlchemicalRecommendationService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 171,
        "column": 18,
        "context": "\\n          elementalProperties,\\n          ((method as unknown as any).elementalState as ElementalPro"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 227,
        "column": 45,
        "context": "ies'\\n    const thermodynamicsData = thermodynamics as unknown as any;\\n    if ((thermodynamicsData.ka"
      }
    ],
    "src/services/AlchemicalService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 223,
        "column": 38,
        "context": " properties\\n      this.planetPositions = positions as unknown as PlanetaryPositionsType;\\n      this."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 335,
        "column": 26,
        "context": "      this.ingredients;\\n      this.planetPositions as unknown as Record<RulingPlanet, number>,\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 338,
        "column": 21,
        "context": "e;\\n      this.currentZodiac;\\n      this.lunarPhase as unknown as LunarPhaseWithSpaces\\n    )\\n  }\\n\\n  /"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 348,
        "column": 26,
        "context": "   this.cookingMethods;\\n      this.planetPositions as unknown as Record<RulingPlanet, number>,\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 351,
        "column": 21,
        "context": "e;\\n      this.currentZodiac;\\n      this.lunarPhase as unknown as LunarPhaseWithSpaces\\n    )\\n  }\\n\\n  /"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 361,
        "column": 26,
        "context": "s(\\n      this.cuisines;\\n      this.planetPositions as unknown as Record<RulingPlanet, number>,\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 364,
        "column": 21,
        "context": "e;\\n      this.currentZodiac;\\n      this.lunarPhase as unknown as LunarPhaseWithSpaces\\n    )\\n  }\\n\\n  /"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 441,
        "column": 67,
        "context": "t: this.getSeasonalRecommendations(dominantElement as unknown as Element),\\n      moodEffects: ((prof"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 510,
        "column": 33,
        "context": "entalSimilarity(\\n      (ingredient1.elementalState as unknown as ElementalProperties) || {\\n        F"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 516,
        "column": 33,
        "context": " Air: 0\\n      },\\n      (ingredient2.elementalState as unknown as ElementalProperties) || {\\n        F"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 599,
        "column": 30,
        "context": "ly Summer']\\n    };\\n\\n    return seasonalMap[element as unknown as string] || ['Any season'];\\n  }\\n}\\n\\ne"
      }
    ],
    "src/services/AlchemicalTransformationService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 170,
        "column": 21,
        "context": "e;\\n      this.currentZodiac;\\n      this.lunarPhase as unknown as LunarPhaseWithSpaces\\n    )\\n  }\\n\\n  /"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 183,
        "column": 21,
        "context": "e;\\n      this.currentZodiac;\\n      this.lunarPhase as unknown as LunarPhaseWithSpaces\\n    )\\n  }\\n\\n  /"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 196,
        "column": 21,
        "context": "e;\\n      this.currentZodiac;\\n      this.lunarPhase as unknown as LunarPhaseWithSpaces\\n    )\\n  }\\n\\n  /"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 294,
        "column": 31,
        "context": " methodCount = 0;\\n\\n      const recipeData = recipe as unknown as any;\\n      const cookingMethods = ("
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 458,
        "column": 29,
        "context": "e: Recipe): number {\\n    const recipeData = recipe as unknown as any;\\n    const astrologicalAffiniti"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 480,
        "column": 29,
        "context": "e: Recipe): number {\\n    const recipeData = recipe as unknown as any;\\n    const astrologicalAffiniti"
      }
    ],
    "src/services/AlertingSystem.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 854,
        "column": 33,
        "context": "-${Date.now()}`;\\n    const newRule: AlertRule = { ...rule, id };\\n\\n    this.alertRules.push(newRule);"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 866,
        "column": 35,
        "context": "return false;\\n\\n    this.alertRules[ruleIndex] = { ...this.alertRules[ruleIndex], ...updates };\\n    t"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 866,
        "column": 66,
        "context": "les[ruleIndex] = { ...this.alertRules[ruleIndex], ...updates };\\n    this.saveConfiguration();\\n\\n    r"
      }
    ],
    "src/services/AstrologicalService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 105,
        "column": 6,
        "context": "ith default state\\n    this.currentState = {\\n      ...DefaultAstrologicalState;\\n      elementalInflue"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 127,
        "column": 52,
        "context": "    logger.info('Testing astrological calculations...');\\n\\n      const mockCalculationResult = {\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 158,
        "column": 48,
        "context": "{\\n      logger.info('Verifying planetary positions...');\\n\\n      if (!positions || Object.keys(positi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 199,
        "column": 44,
        "context": "try {\\n      logger.info('Testing astrological APIs...');\\n\\n      const endpoints = apiEndpoints || [\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 242,
        "column": 28,
        "context": "calState> {\\n    try {\\n      this.currentState = { ...this.currentState, ...newState };\\n      return "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 242,
        "column": 50,
        "context": "      this.currentState = { ...this.currentState, ...newState };\\n      return createSuccessResponse("
      }
    ],
    "src/services/AstrologizeApiCache.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 396,
        "column": 28,
        "context": "e: this.maxCacheSize,\\n      oldestEntry: Math.min(...Array.from(this.cache.values()).map(v => v.time"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 397,
        "column": 28,
        "context": "p(v => v.timestamp)),\\n      newestEntry: Math.max(...Array.from(this.cache.values()).map(v => v.time"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 77,
        "column": 39,
        "context": "lResult) {\\n    const resultData = alchemicalResult as unknown as any;\\n    const elementalBalance = ("
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 120,
        "column": 39,
        "context": "properties\\n    const resultData = alchemicalResult as unknown as any;\\n\\n    const cachedData: CachedA"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 218,
        "column": 33,
        "context": "aryPositions)) {\\n      const planetData = position as unknown as any;\\n      predictedPositions[plane"
      }
    ],
    "src/services/AstrologyService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 86,
        "column": 13,
        "context": "is.refreshAstrologicalState();\\n    }\\n    return { ...this.currentState };\\n  }\\n\\n  /**\\n   * Get the cu"
      }
    ],
    "src/services/CampaignConflictResolver.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 227,
        "column": 32,
        "context": "activeCampaigns);\\n    void detectedConflicts.push(...resourceConflicts);\\n\\n    // Check for dependenc"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 231,
        "column": 32,
        "context": "activeCampaigns);\\n    void detectedConflicts.push(...dependencyConflicts);\\n\\n    // Check for priorit"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 235,
        "column": 32,
        "context": "activeCampaigns);\\n    void detectedConflicts.push(...priorityConflicts);\\n\\n    // Check for safety vi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 239,
        "column": 32,
        "context": "activeCampaigns);\\n    void detectedConflicts.push(...safetyConflicts);\\n\\n    // Store detected confli"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 462,
        "column": 38,
        "context": "mpaigns)) {\\n          void affectedCampaigns.push(...(step.parameters.affectedCampaigns as string[])"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 478,
        "column": 28,
        "context": "       executionTime,\\n        affectedCampaigns: [...new Set(affectedCampaigns)],\\n        sideEffect"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 640,
        "column": 30,
        "context": "licts.length > 0) {\\n          void conflicts.push(...potentialConflicts);\\n          void deferred.pu"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 669,
        "column": 20,
        "context": "    action: resolutionAction,\\n      parameters: { ...parameters, overrideBy, overrideReason },\\n     "
      }
    ],
    "src/services/CampaignDebugger.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 348,
        "column": 22,
        "context": "(step, session.campaignId);\\n        findings.push(...stepFindings);\\n\\n        step.status = DebugStep"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 586,
        "column": 22,
        "context": "epType.CONFIGURATION_CHECK:\\n        findings.push(...(await this.checkConfiguration(campaignId)));\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 589,
        "column": 22,
        "context": "epType.DEPENDENCY_ANALYSIS:\\n        findings.push(...(await this.analyzeDependencies(campaignId)));\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 592,
        "column": 22,
        "context": "pType.PERFORMANCE_ANALYSIS:\\n        findings.push(...(await this.analyzePerformance(campaignId)));\\n "
      }
    ],
    "src/services/CampaignWorkflowManager.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 237,
        "column": 24,
        "context": "!workflow) return false;\\n\\n    workflow.config = { ...workflow.config, ...configUpdates };\\n    workfl"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 237,
        "column": 44,
        "context": "lse;\\n\\n    workflow.config = { ...workflow.config, ...configUpdates };\\n    workflow.updatedAt = new D"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 378,
        "column": 26,
        "context": "ool as unknown as any);\\n        wouldProcess.push(...analysis.files);\\n        estimatedChanges += an"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 380,
        "column": 29,
        "context": "+= analysis.changes;\\n        potentialIssues.push(...analysis.issues);\\n        safetyScore = Math.mi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 940,
        "column": 32,
        "context": "ck implementation\\n    log.info('Rebuilding project...');\\n  }\\n\\n  private async validateRollback(param"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 377,
        "column": 58,
        "context": "const analysis = await this.analyzeToolImpact(tool as unknown as any);\\n        wouldProcess.push(..."
      }
    ],
    "src/services/ConfigurationService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 83,
        "column": 13,
        "context": "ration:', error)\\n    }\\n\\n    return {\\n      api: { ...config.api },\\n      astrology: { ...config.astr"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 84,
        "column": 19,
        "context": "\\n      api: { ...config.api },\\n      astrology: { ...config.astrology },\\n      debug: config.debug\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 111,
        "column": 6,
        "context": "deThreshold\\n    );\\n    const aspectOrbs = {\\n      ...config.astrology.aspectOrbs;\\n      ...((storedA"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 112,
        "column": 6,
        "context": "s = {\\n      ...config.astrology.aspectOrbs;\\n      ...((storedAstrology.aspectOrbs as Record<string, "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 166,
        "column": 13,
        "context": "onfiguration(): ConfigurationState {\\n    return { ...this.currentConfig };\\n  }\\n\\n  /**\\n   * Get speci"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 175,
        "column": 15,
        "context": "object' && sectionData !== null) {\\n      return { ...sectionData } as ConfigurationState[K];\\n    }\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 382,
        "column": 17,
        "context": "{\\n        this.currentConfig = {\\n          api: { ...config.api },\\n          astrology: { ...config."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 383,
        "column": 23,
        "context": "   api: { ...config.api },\\n          astrology: { ...config.astrology },\\n          debug: config.deb"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 471,
        "column": 18,
        "context": "dateUpdate('api', key, value),;\\n      errors.push(...validation.errors);\\n    });\\n\\n    // Validate as"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 478,
        "column": 20,
        "context": "te('astrology', key, value),;\\n        errors.push(...validation.errors);\\n      }\\n    });\\n\\n    return"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 521,
        "column": 12,
        "context": "getHistory(): ConfigurationUpdate[] {\\n    return [...this.configHistory]\\n  }\\n\\n  /**\\n   * Clear confi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 571,
        "column": 21,
        "context": "his.configHistory.length > 0\\n          ? Math.max(...this.configHistory.map(h => h.timestamp));\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 226,
        "column": 21,
        "context": "    if (section === 'api') {\\n          (config.api as unknown as any)[key] = value;\\n        } else i"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 228,
        "column": 27,
        "context": "ion === 'astrology') {\\n          (config.astrology as unknown as any)[key] = value;\\n        } else i"
      }
    ],
    "src/services/ConsolidatedIngredientService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 253,
        "column": 24,
        "context": "redients in this category\\n        let filtered = [...allIngredients[category]];\\n\\n        // Apply nu"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 492,
        "column": 29,
        "context": "s from both profiles\\n    const allKeys = new Set([...Object.keys(profile1), ...Object.keys(profile2)"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 492,
        "column": 55,
        "context": "onst allKeys = new Set([...Object.keys(profile1), ...Object.keys(profile2)]);\\n\\n    let dotProduct = "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 577,
        "column": 8,
        "context": "ice(0, (maxResults) || 10).map(item => ({\\n        ...item.ingredient;\\n        score: item.score\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1427,
        "column": 31,
        "context": "r create a new one\\n      const baseIngredient = { ...ingredient } as UnifiedIngredient;\\n\\n      // En"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 617,
        "column": 21,
        "context": "\\n        const gregsEnergy =\\n          (energyData as unknown as any).gregsEnergy || (energyData as "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 617,
        "column": 67,
        "context": "Data as unknown as any).gregsEnergy || (energyData as unknown as any).energy || 0;\\n\\n        return {"
      }
    ],
    "src/services/ConsolidatedRecipeService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 96,
        "column": 45,
        "context": "rmat\\n      const serviceObj = unifiedRecipeService as unknown as {\\n        searchRecipes: (criteria:"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 105,
        "column": 8,
        "context": " return resultData?.recipe || resultData;\\n      }) as unknown as Recipe[];\\n    } catch (error) {\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 136,
        "column": 23,
        "context": "Zodiac(currentZodiacSign);\\n      return recipeData as unknown as Recipe[];\\n    } catch (error) {\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 152,
        "column": 23,
        "context": "tRecipesForSeason(season);\\n      return recipeData as unknown as Recipe[];\\n    } catch (error) {\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 168,
        "column": 23,
        "context": "ForLunarPhase(lunarPhase);\\n      return recipeData as unknown as Recipe[];\\n    } catch (error) {\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 204,
        "column": 8,
        "context": "anetaryInfluences,\\n        minMatchScore,\\n      )) as unknown as Recipe[];\\n    } catch (error) {\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 225,
        "column": 8,
        "context": "    flavorProfile,\\n        minMatchScore,\\n      )) as unknown as Recipe[];\\n    } catch (error) {\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 252,
        "column": 58,
        "context": "turn (await getBestRecipeMatches(criteria, limit)) as unknown as Recipe[];\\n    } catch (error) {\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 268,
        "column": 46,
        "context": "ion\\n      const serviceData = unifiedRecipeService as unknown as {\\n        recommendRecipes: (criter"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 289,
        "column": 46,
        "context": "ion\\n      const serviceData = unifiedRecipeService as unknown as {\\n        recommendRecipes: (criter"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 312,
        "column": 46,
        "context": "ion\\n      const serviceData = unifiedRecipeService as unknown as {\\n        recommendRecipes: (criter"
      }
    ],
    "src/services/ConsolidatedRecommendationService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 207,
        "column": 14,
        "context": "         Air: 0.25\\n              },\\n              ...itemData\\n            } as Ingredient;\\n         "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 398,
        "column": 10,
        "context": ": String(methodData.description || ''),\\n          ...methodData\\n        } as CookingMethod;\\n      })"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 86,
        "column": 35,
        "context": "er(recipe => {\\n          const recipeData = recipe as unknown as any;\\n          return recipeData.co"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 405,
        "column": 33,
        "context": "Each(method => {\\n        const methodData = method as unknown as any;\\n        const methodScore = me"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 406,
        "column": 34,
        "context": "unknown as any;\\n        const methodScore = method as unknown as any;\\n        const methodName = Str"
      }
    ],
    "src/services/CulturalAnalyticsService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 208,
        "column": 43,
        "context": "sine);\\n      const allCuisines = [primaryCuisine, ...secondaryCuisines];\\n\\n      // Base synergy calc"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 455,
        "column": 34,
        "context": "mentalProfile);\\n    const balance = 1 - (Math.max(...elementalValues) - Math.min(...elementalValues)"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 455,
        "column": 65,
        "context": "ce = 1 - (Math.max(...elementalValues) - Math.min(...elementalValues));\\n\\n    return Math.max(0.5, Ma"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 477,
        "column": 6,
        "context": "{cuisine} techniques`];\\n    }\\n\\n    return [\\n      ...context.modernEvolution;\\n      ...context.globa"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 478,
        "column": 6,
        "context": " return [\\n      ...context.modernEvolution;\\n      ...context.globalAdaptations.map(adaptation => `Gl"
      }
    ],
    "src/services/CurrentMomentManager.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 87,
        "column": 59,
        "context": "d logger.info('Update already in progress, waiting...'),\\n      // Wait for current update to complet"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 105,
        "column": 54,
        "context": "  void logger.info('Starting current moment update...');\\n\\n      const targetDate = customDateTime ||"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 140,
        "column": 10,
        "context": "'short'\\n        }),\\n        location: {\\n          ...location;\\n          timezone: this.getTimezone("
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 591,
        "column": 13,
        "context": "manceMetrics(): PerformanceMetrics {\\n    return { ...this.performanceMetrics };\\n  }\\n\\n  /**\\n   * Rese"
      }
    ],
    "src/services/DirectRecipeService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 82,
        "column": 23,
        "context": ".isArray(seasonRecipes)) {\\n          recipes.push(...seasonRecipes);\\n        }\\n      });\\n\\n      // P"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 89,
        "column": 23,
        "context": ".isArray(seasonRecipes)) {\\n          recipes.push(...seasonRecipes);\\n        }\\n      });\\n\\n      // P"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 96,
        "column": 23,
        "context": ".isArray(seasonRecipes)) {\\n          recipes.push(...seasonRecipes);\\n        }\\n      });\\n\\n      // P"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 103,
        "column": 23,
        "context": ".isArray(seasonRecipes)) {\\n          recipes.push(...seasonRecipes);\\n        }\\n      });\\n    });\\n\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 149,
        "column": 10,
        "context": "mat\\n        const enhancedAlignment = {\\n          ..._alignment;\\n          planetaryPositions: plane"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 398,
        "column": 8,
        "context": "Score(recipe);\\n      scoredRecipes.push({\\n        ...recipe;\\n        score: alchemicalScore.score,\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 428,
        "column": 8,
        "context": "Score(recipe);\\n      scoredRecipes.push({\\n        ...recipe;\\n        score: alchemicalScore.score,\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 461,
        "column": 8,
        "context": "Score(recipe);\\n      scoredRecipes.push({\\n        ...recipe;\\n        score: alchemicalScore.score,\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 491,
        "column": 8,
        "context": "Score(recipe);\\n      scoredRecipes.push({\\n        ...recipe;\\n        score: alchemicalScore.score,\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 514,
        "column": 28,
        "context": "tart with all recipes\\n    let candidateRecipes = [...this.allRecipes];\\n\\n    // Apply basic filters b"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 616,
        "column": 8,
        "context": " 0.2;\\n      }\\n\\n      scoredRecipes.push({\\n        ...recipe;\\n        score: Math.min(1, finalScore),"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 155,
        "column": 58,
        "context": "this.currentCelestialAlignment = enhancedAlignment as unknown as CelestialAlignment;\\n      } else {\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 201,
        "column": 12,
        "context": "nance || _alignment.elementalBalance;\\n      recipe as unknown as Recipe,\\n    ),\\n\\n    // Perform full"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 206,
        "column": 12,
        "context": "nalysis = performAlchemicalAnalysis(;\\n      recipe as unknown as Recipe,\\n      _alignment.elementalS"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 598,
        "column": 32,
        "context": "alCompatibility(;\\n          criteriaElementalState as unknown as ElementalProperties,\\n          reci"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 599,
        "column": 30,
        "context": "lementalProperties,\\n          recipeElementalState as unknown as ElementalProperties,\\n        ),\\n   "
      }
    ],
    "src/services/ElementalCalculator.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 53,
        "column": 6,
        "context": "instance.currentBalance = initialState || {\\n      ...DEFAULT_ELEMENTAL_PROPERTIES\\n    };\\n    instanc"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 61,
        "column": 32,
        "context": "or.getInstance();\\n    instance.currentBalance = { ...newState };\\n    logger.debug('ElementalCalculat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 186,
        "column": 15,
        "context": "returning default values')\\n      }\\n      return { ...DEFAULT_ELEMENTAL_PROPERTIES };\\n    }\\n\\n    // T"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 236,
        "column": 17,
        "context": "rning default values')\\n        }\\n        return { ...DEFAULT_ELEMENTAL_PROPERTIES };\\n      }\\n\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 242,
        "column": 15,
        "context": "ulating elemental state:', error),\\n      return { ...DEFAULT_ELEMENTAL_PROPERTIES };\\n    }\\n  }\\n\\n  //"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 265,
        "column": 31,
        "context": "ataRecord = data ;\\n          const planetData = { ...dataRecord, name, label: name } as unknown as P"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 302,
        "column": 12,
        "context": " ;\\n          const enhancedPlanet = {\\n            ...planetRecord;\\n            name: planetName,\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 371,
        "column": 12,
        "context": "nown>,;\\n          const planetObj = {\\n            ...objKey;\\n            name: isPlanetKey,\\n        "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 687,
        "column": 21,
        "context": " specific zodiac adjustments\\n    const result = { ...seasonalModifiers };\\n    Object.entries(specifi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 265,
        "column": 65,
        "context": " planetData = { ...dataRecord, name, label: name } as unknown as Planet;\\n          this.processPlane"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 279,
        "column": 45,
        "context": "=> {\\n        if (body) this.processPlanetData(body as unknown as Planet, elementalValues)\\n      });\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 305,
        "column": 11,
        "context": "netName,\\n            label: planetName\\n          } as unknown as Planet;\\n          this.processPlane"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 374,
        "column": 11,
        "context": "netKey,\\n            label: isPlanetKey\\n          } as unknown as Planet;\\n          this.processPlane"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 404,
        "column": 33,
        "context": "ract planet info\\n      const planetRecord = planet as unknown as any;\\n      const planetName = Strin"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 809,
        "column": 71,
        "context": "tEffect = this.processPlanetElementalEffect(planet as unknown as Planet, sign),;\\n\\n          // Combi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 840,
        "column": 69,
        "context": "tEffect = this.processPlanetElementalEffect(planet as unknown as Planet, sign),;\\n\\n        // Combine"
      }
    ],
    "src/services/ElementalRecommendationService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 40,
        "column": 55,
        "context": "   const characteristics = profile.characteristics as unknown as any;\\n        return Array.isArray(c"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 46,
        "column": 55,
        "context": "   const characteristics = profile.characteristics as unknown as any;\\n        return Array.isArray(c"
      }
    ],
    "src/services/EnhancedAstrologyService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 378,
        "column": 34,
        "context": " 0.2 }\\n      },\\n      // Add more months as needed...\\n    };\\n\\n    return seasonalData[month as keyof"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 108,
        "column": 34,
        "context": ";\\n\\n    return {\\n      currentSeason: currentSeason as unknown as Season,\\n      upcomingTransits: (up"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 109,
        "column": 50,
        "context": "      upcomingTransits: (upcomingAnalysis?.seasons as unknown as Element[]) || [],\\n      dominantEle"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 111,
        "column": 47,
        "context": "},\\n      keyAspects: (seasonalAnalysis?.keyAspects as unknown as Planet[]) || [],\\n      retrogradePl"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 147,
        "column": 37,
        "context": "    return {\\n      seasonalThemes: ((currentSeason as unknown as any).seasonalThemes as string[]) ||"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 148,
        "column": 41,
        "context": ") || [],\\n      culinaryInfluences: ((currentSeason as unknown as any).culinaryInfluences as string[]"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 150,
        "column": 23,
        "context": "],\\n      dominantElements:\\n        ((currentSeason as unknown as any).dominantElements as Record<str"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 152,
        "column": 23,
        "context": "is.getRecommendedCuisines(\\n        ((currentSeason as unknown as any).dominantElements as Record<str"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 155,
        "column": 23,
        "context": "RecommendedCookingMethods(\\n        ((currentSeason as unknown as any).dominantElements as Record<str"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 158,
        "column": 23,
        "context": "     alchemicalProperties:\\n        ((currentSeason as unknown as any).alchemicalProperties as Record"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 174,
        "column": 41,
        "context": "e(date);\\n      primaryPositions = servicePositions as unknown as Record<string, CelestialPosition>;\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 209,
        "column": 51,
        "context": "   const keyAspects = (seasonalTransit?.keyAspects as unknown as Planet[]) || [];\\n\\n    return {\\n    "
      }
    ],
    "src/services/EnhancedRecommendationService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 183,
        "column": 12,
        "context": "cedIngredient: EnhancedIngredient = {\\n            ...ingredient;\\n            name: ingredient.name |"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 348,
        "column": 21,
        "context": "zations || []).length > 0) {\\n        reasons.push(...flavorCompatibility.optimizations.slice(0, 2)),"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 669,
        "column": 10,
        "context": "          umami: 0,\\n          spicy: 0,\\n          ...(Array.isArray(ingredientData.baseNotes)\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 159,
        "column": 27,
        "context": "rPreferenceFiltering(;\\n        baseRecommendations as unknown as EnhancedIngredient[],\\n        userP"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 181,
        "column": 43,
        "context": "dation\\n          const ingredientData = ingredient as unknown as any;\\n          const enhancedIngred"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 254,
        "column": 32,
        "context": "      ingredient,\\n              score: (ingredient as unknown as any).score || 0.5,\\n              re"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 261,
        "column": 14,
        "context": "'balanced' as const\\n              }\\n            }) as unknown as EnhancedRecommendation,\\n        );\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 273,
        "column": 25,
        "context": "eady present in fallback\\n          element: 'Fire' as unknown as Element,\\n          cookingApproach:"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 546,
        "column": 7,
        "context": "yInfluence: 0.1,\\n      lunarInfluence: 0.1\\n    })) as unknown as SignEnergyState[];\\n  }\\n\\n  /**\\n   * "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 655,
        "column": 39,
        "context": "rty access\\n      const ingredientData = ingredient as unknown as any;\\n\\n      // Create basic flavor "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 701,
        "column": 20,
        "context": "Data.monica) || 0.5\\n      };\\n\\n      return profile as unknown as UnifiedFlavorProfile;\\n    } catch ("
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 736,
        "column": 34,
        "context": "property access\\n      const astroData = astroState as unknown as any;\\n      const elementalProps = a"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 778,
        "column": 20,
        "context": "        monica: 0.5\\n      };\\n\\n      return profile as unknown as UnifiedFlavorProfile;\\n    } catch ("
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 807,
        "column": 7,
        "context": ",\\n        kalchm: 0.5,\\n        monica: 0.5\\n      } as unknown as UnifiedFlavorProfile;\\n    }\\n  }\\n\\n  "
      }
    ],
    "src/services/EnhancedTransitAnalysisService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 252,
        "column": 8,
        "context": "sociations) {\\n      recommendations.push(\\n        ...((planetData as unknown as any).FoodAssociation"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 269,
        "column": 27,
        "context": "naryRecommendations) {\\n      recommendations.push(...locationInfluence.culinaryRecommendations.slice"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 349,
        "column": 21,
        "context": " // Add seasonal ingredients\\n    ingredients.push(...season.culinaryInfluences.slice(0, 3)),\\n\\n    //"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 353,
        "column": 23,
        "context": "edients[season.sunSign]) {\\n      ingredients.push(...regionalProfile.seasonalIngredients[season.sunS"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 361,
        "column": 25,
        "context": "    .forEach(planet => {\\n        ingredients.push(...planet.culinaryRecommendations.slice(0, 1))\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 365,
        "column": 24,
        "context": " regional cooking methods\\n    cookingMethods.push(...regionalProfile.traditionalCookingMethods.slice"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 371,
        "column": 28,
        "context": "y.isArray(effects)) {\\n        cookingMethods.push(...effects.slice(0, 1))\\n      }\\n    });\\n\\n    // Ge"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 393,
        "column": 20,
        "context": "e}`);\\n      });\\n\\n    return {\\n      ingredients: [...new Set(ingredients)].slice(0, 8),\\n      cookin"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 394,
        "column": 23,
        "context": "ingredients)].slice(0, 8),\\n      cookingMethods: [...new Set(cookingMethods)].slice(0, 6),\\n      fla"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 395,
        "column": 23,
        "context": "kingMethods)].slice(0, 6),\\n      flavorProfiles: [...new Set(flavorProfiles)].slice(0, 4),\\n      tim"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 396,
        "column": 15,
        "context": " Set(flavorProfiles)].slice(0, 4),\\n      timing: [...new Set(timing)].slice(0, 6)\\n    };\\n  }\\n\\n  /**\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 117,
        "column": 22,
        "context": "(;\\n      enhancedPositions,\\n      aspectInfluences as unknown as PlanetaryPosition[],\\n      season,\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 126,
        "column": 22,
        "context": "(;\\n      enhancedPositions,\\n      aspectInfluences as unknown as PlanetaryPosition[],\\n      season,\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 162,
        "column": 16,
        "context": "anetaryStrength(;\\n        planet,\\n        position as unknown as import('@/types/alchemy').Planetary"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 250,
        "column": 19,
        "context": "commendations from planet data\\n    if ((planetData as unknown as any).FoodAssociations) {\\n      reco"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 252,
        "column": 23,
        "context": "     recommendations.push(\\n        ...((planetData as unknown as any).FoodAssociations as string[])."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 369,
        "column": 38,
        "context": "luence => {\\n      const effects = (aspectInfluence as unknown as any).culinaryEffects as string[];\\n "
      }
    ],
    "src/services/EnterpriseIntelligenceIntegration.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 213,
        "column": 6,
        "context": "cacheResults: true,\\n      logLevel: 'info',\\n      ...config\\n    };\\n\\n    this.cache = new Map();\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 397,
        "column": 8,
        "context": "endations\\n      const recommendations = [\\n        ...((compatibilityAnalysis as { recommendations?: "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 398,
        "column": 8,
        "context": "ns?: string[] })?.recommendations ?? []),\\n        ...this.generateRecipeIntelligenceRecommendations("
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 760,
        "column": 8,
        "context": "core) / 3;\\n      const criticalIssues = [\\n        ...dataIntegrity.issues.filter(issue => issue.incl"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 761,
        "column": 8,
        "context": "er(issue => issue.includes('critical')),;\\n        ...astrologicalConsistency.issues.filter(issue => "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 762,
        "column": 8,
        "context": "r(issue => issue.includes('critical')),,;\\n        ...elementalHarmony.issues.filter(issue => issue.i"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1720,
        "column": 13,
        "context": "cs\\n   */\\n  getPerformanceMetrics() {\\n    return { ...this.performanceMetrics }\\n  }\\n\\n  /**\\n   * Updat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1727,
        "column": 20,
        "context": "eIntelligenceConfig>): void {\\n    this.config = { ...this.config, ...newConfig };\\n    this.log('info"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1727,
        "column": 36,
        "context": "fig>): void {\\n    this.config = { ...this.config, ...newConfig };\\n    this.log('info', 'Configuratio"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1926,
        "column": 19,
        "context": "lementalBalance:\\n          1 -\\n          Math.max(...Object.values(elementalProperties).map(v => v))"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1927,
        "column": 19,
        "context": "talProperties).map(v => v)) +;\\n          Math.min(...Object.values(elementalProperties).map(v => v))"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 2114,
        "column": 8,
        "context": "nce.toFixed(2)}`,\\n      );\\n      return {\\n        ...result;\\n        ingredientCompatibility: (\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 231,
        "column": 22,
        "context": "ictiveIntelligenceService(;\\n      predictiveConfig as unknown as AdvancedIntelligenceConfig,\\n    );\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 381,
        "column": 19,
        "context": "m\\n      const elementalProps =\\n        (recipeData as unknown as RecipeAnalysisData)?.elementalPrope"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 382,
        "column": 28,
        "context": "ementalProperties ??;\\n        (astrologicalContext as unknown as AstrologicalAnalysisContext)?.eleme"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 386,
        "column": 27,
        "context": "       elementalProps,\\n        astrologicalContext as unknown as ComprehensiveAlchemicalResult,\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 407,
        "column": 34,
        "context": "lCompatibility:\\n            (compatibilityAnalysis as unknown as CompatibilityAnalysisResult)?.coreM"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 410,
        "column": 34,
        "context": "lCompatibility:\\n            (compatibilityAnalysis as unknown as CompatibilityAnalysisResult)?.coreM"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 413,
        "column": 34,
        "context": "lCompatibility:\\n            (compatibilityAnalysis as unknown as CompatibilityAnalysisResult)?.coreM"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 416,
        "column": 34,
        "context": "lCompatibility:\\n            (compatibilityAnalysis as unknown as CompatibilityAnalysisResult)?.coreM"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 496,
        "column": 31,
        "context": "atibilityAnalysis:\\n          compatibilityAnalysis as unknown as import('@/types/enterpriseIntellige"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 506,
        "column": 31,
        "context": "atibilityAnalysis:\\n          compatibilityAnalysis as unknown as import('@/types/enterpriseIntellige"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 515,
        "column": 31,
        "context": "atibilityAnalysis:\\n          compatibilityAnalysis as unknown as import('@/types/enterpriseIntellige"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 609,
        "column": 25,
        "context": "isineOptimizationScore(;\\n        analysesForScores as unknown as {\\n          culturalAnalysis: {\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 624,
        "column": 42,
        "context": "Score({\\n        culturalAnalysis: culturalAnalysis as unknown as {\\n          culturalSynergy?: numbe"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 629,
        "column": 38,
        "context": "\\n        },\\n        fusionAnalysis: fusionAnalysis as unknown as {\\n          fusionPotential?: numbe"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 633,
        "column": 42,
        "context": "     },\\n        seasonalAnalysis: seasonalAnalysis as unknown as {\\n          seasonalRelevance?: num"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 637,
        "column": 52,
        "context": "      compatibilityAnalysis: compatibilityAnalysis as unknown as {\\n          overallCompatibility?: "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 641,
        "column": 44,
        "context": "er },\\n        validationResults: validationResults as unknown as {\\n          validationScore?: numbe"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 649,
        "column": 25,
        "context": "ligenceRecommendations(;\\n        analysesForScores as unknown as {\\n          culturalAnalysis: {\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 665,
        "column": 25,
        "context": "ulateCuisineConfidence(;\\n        analysesForScores as unknown as {\\n          culturalAnalysis: {\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 680,
        "column": 42,
        "context": "eturn {\\n        culturalAnalysis: culturalAnalysis as unknown as import('@/types/enterpriseIntellige"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 688,
        "column": 42,
        "context": "     },\\n        seasonalAnalysis: seasonalAnalysis as unknown as import('@/types/enterpriseIntellige"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 701,
        "column": 50,
        "context": "        astrologicalAnalysis: astrologicalAnalysis as unknown as import('@/types/enterpriseIntellige"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 743,
        "column": 48,
        "context": "n\\n      const typedRecipeData = (recipeData || {}) as unknown as RecipeDataWithElementalProperties;\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1226,
        "column": 16,
        "context": "ibility');\\n    }\\n    if (\\n      (\\n        analysis as unknown as {\\n          advancedAnalysis?: { te"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1231,
        "column": 16,
        "context": "levance !== undefined &&\\n      ((\\n        analysis as unknown as {\\n          advancedAnalysis?: { te"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1260,
        "column": 39,
        "context": "own>) => {\\n      const harmonyInterface = analysis as unknown as {\\n        categoryHarmony?: { overa"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2069,
        "column": 18,
        "context": "eneratePredictiveIntelligence(;\\n        recipeData as unknown as import('@/types/recipe').Recipe;\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2070,
        "column": 30,
        "context": "es/recipe').Recipe;\\n        (ingredientData || []) as unknown as import('@/types/unified').Ingredien"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2072,
        "column": 27,
        "context": "cord<string, unknown>,\\n        astrologicalContext as unknown as import('@/types/predictiveIntellige"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2103,
        "column": 18,
        "context": "ervice.generateMLIntelligence(;\\n        recipeData as unknown as import('@/types/unified').Recipe;\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2104,
        "column": 30,
        "context": "s/unified').Recipe;\\n        (ingredientData || []) as unknown as import('@/types/unified').Ingredien"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2106,
        "column": 27,
        "context": "cord<string, unknown>,\\n        astrologicalContext as unknown as import('@/types/mlIntelligence').ML"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2139,
        "column": 28,
        "context": "alyticsIntelligence(;\\n          (recipeData || {}) as unknown as import('@/types/unified').Recipe,\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2140,
        "column": 32,
        "context": "unified').Recipe,\\n          (ingredientData || []) as unknown as import('@/types/unified').Ingredien"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2200,
        "column": 48,
        "context": "{\\n        predictiveIntelligence: predictiveResult as unknown as import('@/types/advancedIntelligenc"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2320,
        "column": 5,
        "context": "5,\\n      timestamp: new Date().toISOString()\\n    } as unknown as import('@/types/predictiveIntellige"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2438,
        "column": 69,
        "context": "elligence: this.getDefaultPredictiveIntelligence() as unknown as import('@/types/advancedIntelligenc"
      }
    ],
    "src/services/EnterpriseIntelligenceOrchestrator.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 260,
        "column": 10,
        "context": "ies: 3,\\n          healthThreshold: 0.8,\\n          ...config.services?.errorTracking\\n        },\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 268,
        "column": 10,
        "context": ": 0.7,\\n          predictionHorizon: 60,\\n          ...config.services?.patternRecognition\\n        },\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 276,
        "column": 10,
        "context": "k: 90 },\\n          retentionPeriod: 30,\\n          ...config.services?.performanceMetrics\\n        },\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 284,
        "column": 10,
        "context": "        optimizationStrategy: 'hybrid',\\n          ...config.services?.batchProcessing\\n        },\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 292,
        "column": 10,
        "context": "d: false,\\n          safetyChecks: true,\\n          ...config.services?.unusedVariableDetection\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 300,
        "column": 10,
        "context": "n: true,\\n          timeoutSeconds: 600,\\n          ...config.services?.qualityGates\\n        }\\n      }"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 309,
        "column": 8,
        "context": "covery: true,\\n        healthChecks: true,\\n        ...config.integration\\n      },\\n      reporting: {\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 318,
        "column": 8,
        "context": "alerting: true,\\n        dashboards: true,\\n        ...config.reporting\\n      }\\n    };\\n  }\\n\\n  /**\\n   *"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 332,
        "column": 66,
        "context": " Initializing Enterprise Intelligence Orchestrator...');\\n\\n    try {\\n      // Initialize services\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 363,
        "column": 62,
        "context": "('üìã Initializing enterprise intelligence services...');\\n\\n    // Initialize Error Tracking System\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 433,
        "column": 50,
        "context": "    log.info('üìä Setting up integration monitoring...');\\n\\n    // Setup cross-service event coordinat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 510,
        "column": 45,
        "context": "d> {\\n    log.info('üè• Setting up health monitoring...');\\n\\n    if (!this.config.integration.healthChe"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 529,
        "column": 37,
        "context": "mise<void> {\\n    log.info('üìà Setting up reporting...');\\n\\n    if (!this.config.reporting.enabled) re"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 570,
        "column": 42,
        "context": "lt[]> {\\n    log.info('üß™ Running integration tests...');\\n\\n    const testResults: IntegrationTestResu"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1132,
        "column": 57,
        "context": ".info('üîÑ Triggering automatic recovery mechanisms...');\\n\\n    // Could implement:\\n    // - Automatic"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1270,
        "column": 46,
        "context": "gic\\n    log.info('üîß Optimizing system performance...');\\n\\n    // Could implement:\\n    // - Resource "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1550,
        "column": 67,
        "context": "Shutting down Enterprise Intelligence Orchestrator...');\\n\\n    // Stop monitoring intervals\\n    if (t"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1691,
        "column": 14,
        "context": "ons?: string[]\\n            }) => ({\\n              ...r;\\n              timestamp: new Date(r.timestam"
      }
    ],
    "src/services/ErrorTrackingEnterpriseSystem.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 152,
        "column": 52,
        "context": "  log.info('üîç Performing automated error analysis...');\\n\\n    // Get current error state\\n    const a"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 710,
        "column": 10,
        "context": "p((item: Record<string, unknown>) => ({\\n          ...item;\\n          timestamp: new Date(item.timest"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 722,
        "column": 14,
        "context": "=> [\\n            key,\\n            {\\n              ...value;\\n              lastSeen: new Date(value.l"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 779,
        "column": 6,
        "context": ",\\n      '',\\n      'üî• Top Error Patterns:',\\n      ...snapshot.patterns\\n        .sort((a, b) => b.fre"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 788,
        "column": 6,
        "context": "    ),\\n      '',\\n      'üìà Active Trends:',\\n      ...snapshot.trends\\n        .filter(t => t.trendDir"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 794,
        "column": 6,
        "context": "\\n      '',\\n      'üí° Top Recommendations:',\\n      ...snapshot.recommendations\\n        .slice(0, 3)\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 810,
        "column": 49,
        "context": "\\n    log.info('üîÑ Forcing immediate error analysis...');\\n    return await this.performAutomatedAnaly"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 159,
        "column": 56,
        "context": "nst metrics = this.calculateMetrics(analysisResult as unknown as any, currentErrorCount);\\n\\n    // Up"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 163,
        "column": 23,
        "context": " this.updateErrorPatterns(\\n      (((analysisResult as unknown as any)?.distribution as any)\\n        "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 172,
        "column": 20,
        "context": "eIntelligentRecommendations(;\\n      analysisResult as unknown as any,\\n      metrics,\\n      trends,\\n "
      }
    ],
    "src/services/ErrorTrackingSystem.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 339,
        "column": 6,
        "context": " {\\n    const buildFailure: BuildFailure = {\\n      ...failure;\\n      timestamp: new Date()\\n    };\\n\\n  "
      }
    ],
    "src/services/IngredientFilterService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 110,
        "column": 35,
        "context": "tegory]).map(;\\n        ([name, data]) => ({ name, ...data }) as unknown as IngredientMapping,\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 114,
        "column": 22,
        "context": "ly all filters sequentially\\n      let filtered = [...categoryIngredients];\\n\\n      // Apply nutrition"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 466,
        "column": 22,
        "context": "eteness (if data available)\\n      const sorted = [...ingredients].sort((a, b) => {\\n        const aNu"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 595,
        "column": 44,
        "context": "   },\\n          usedIngredients: [mainIngredient, ...otherIngredients]\\n        };\\n\\n        // Apply "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 110,
        "column": 45,
        "context": "ap(;\\n        ([name, data]) => ({ name, ...data }) as unknown as IngredientMapping,\\n      );\\n\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 252,
        "column": 59,
        "context": "st elementalProps = ingredient.elementalProperties as unknown as ElementalProperties;\\n\\n      // Chec"
      }
    ],
    "src/services/IngredientService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 199,
        "column": 12,
        "context": "          name,\\n            category,\\n            ...data;\\n            elementalProperties: (data.el"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 243,
        "column": 18,
        "context": "orEach(categoryIngredients => {\\n        flat.push(...categoryIngredients);\\n      });\\n    } catch (er"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 350,
        "column": 24,
        "context": "redients in this category\\n        let filtered = [...categoryIngredients];\\n\\n        // Apply nutriti"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 990,
        "column": 35,
        "context": "ritional score\\n        const sortedIngredients = [...ingredients].sort((a, b) => {\\n          // Appl"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1110,
        "column": 28,
        "context": "g for seasonal dishes\\n            allRecipes.push(...(seasonalDishes as unknown as Recipe[]))\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1481,
        "column": 8,
        "context": "t mergedIngredient: UnifiedIngredient = {\\n        ...baseIngredient;\\n        ...ingredient;\\n        "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1482,
        "column": 8,
        "context": "Ingredient = {\\n        ...baseIngredient;\\n        ...ingredient;\\n        elementalProperties:\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1962,
        "column": 32,
        "context": "redients to score\\n      let ingredientsToScore = [...this.unifiedIngredientsFlat];\\n\\n      // Filter "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 2048,
        "column": 10,
        "context": "re\\n        const enhancedIngredient = {\\n          ...ingredient;\\n          score\\n        };\\n\\n       "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 206,
        "column": 17,
        "context": "Earth: 0,\\n                Air: 0\\n              })) as unknown as ElementalProperties,\\n            al"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 518,
        "column": 33,
        "context": "er compatibility\\n        const safeFilter = filter as unknown as import('../types/elemental').Elemen"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 993,
        "column": 40,
        "context": "alScore(;\\n            (a.nutritionalProfile || {}) as unknown as NutritionData,\\n          );\\n       "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 996,
        "column": 40,
        "context": "alScore(;\\n            (b.nutritionalProfile || {}) as unknown as NutritionData,\\n          );\\n       "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1058,
        "column": 46,
        "context": "ngs\\n    return connectIngredientsToMappings(recipe as unknown as _Recipe)\\n  }\\n\\n  /**\\n   * Find recip"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1110,
        "column": 46,
        "context": "hes\\n            allRecipes.push(...(seasonalDishes as unknown as Recipe[]))\\n          }\\n        });\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1119,
        "column": 16,
        "context": "ype casting for TS2345 resolution\\n      allRecipes as unknown as _Recipe[],\\n      options.elementalT"
      }
    ],
    "src/services/IntelligentBatchProcessor.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 283,
        "column": 84,
        "context": "ent batches using ${optimizationStrategy} strategy...`);\\n\\n    const optimization = this.optimization"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 800,
        "column": 24,
        "context": "imit to prevent overflow;\\n    const errorCodes = [...new Set(job.errors.map(e => e.code))].join(',')"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1176,
        "column": 13,
        "context": "queue: BatchQueue = {\\n      queueId,\\n      jobs: [...jobs],\\n      concurrency: 0,\\n      maxConcurren"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1266,
        "column": 19,
        "context": "ord => words2.includes(word));\\n    const union = [...new Set([...words1, ...words2])],;\\n\\n    return "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1266,
        "column": 31,
        "context": "2.includes(word));\\n    const union = [...new Set([...words1, ...words2])],;\\n\\n    return intersection"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1266,
        "column": 42,
        "context": "word));\\n    const union = [...new Set([...words1, ...words2])],;\\n\\n    return intersection.length / u"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1407,
        "column": 34,
        "context": "optimization) {\\n      optimization.parameters = { ...optimization.parameters, ...parameters };\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1407,
        "column": 62,
        "context": "zation.parameters = { ...optimization.parameters, ...parameters };\\n      optimization.adaptations++;"
      }
    ],
    "src/services/IntelligentPatternRecognition.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 108,
        "column": 18,
        "context": "] = [];\\n\\n    // Syntax features\\n    features.push(...this.extractSyntaxFeatures(error));\\n\\n    // Sem"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 111,
        "column": 18,
        "context": "or));\\n\\n    // Semantic features\\n    features.push(...this.extractSemanticFeatures(error));\\n\\n    // S"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 114,
        "column": 18,
        "context": "));\\n\\n    // Structural features\\n    features.push(...this.extractStructuralFeatures(error));\\n\\n    //"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 117,
        "column": 18,
        "context": "));\\n\\n    // Contextual features\\n    features.push(...this.extractContextualFeatures(error));\\n\\n    re"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 617,
        "column": 21,
        "context": "is.createTrendPredictions();\\n    predictions.push(...trendPredictions);\\n\\n    // Anomaly-based predic"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 621,
        "column": 21,
        "context": ".createAnomalyPredictions();\\n    predictions.push(...anomalyPredictions);\\n\\n    this.predictions = pr"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 858,
        "column": 18,
        "context": "[];\\n\\n    // Clustering insights\\n    insights.push(...this.generateClusteringInsights());\\n\\n    // Pre"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 861,
        "column": 18,
        "context": "));\\n\\n    // Prediction insights\\n    insights.push(...this.generatePredictionInsights());\\n\\n    // Evo"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 864,
        "column": 18,
        "context": "());\\n\\n    // Evolution insights\\n    insights.push(...this.generateEvolutionInsights());\\n\\n    // Anom"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 867,
        "column": 18,
        "context": "ts());\\n\\n    // Anomaly insights\\n    insights.push(...this.generateAnomalyInsights());\\n\\n    return in"
      }
    ],
    "src/services/KiroCampaignIntegration.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 269,
        "column": 33,
        "context": "ogressMetrics();\\n        status.safetyEvents.push(...result.safetyEvents);\\n\\n        if (!result.succ"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 373,
        "column": 6,
        "context": " CampaignSchedule = {\\n      id: scheduleId,\\n      ...schedule;\\n      nextRun: this.calculateNextRun("
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 526,
        "column": 6,
        "context": "sed on request\\n    const safetySettings = {\\n      ...baseConfig.safetySettings;\\n      maxFilesPerBat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 539,
        "column": 6,
        "context": "lidationFrequency = 10;\\n    }\\n\\n    return {\\n      ...baseConfig;\\n      phases: requestedPhases,\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 118,
        "column": 56,
        "context": "is.intelligenceSystem = CampaignIntelligenceSystem as unknown as {\\n      initialize: (config: Record"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 446,
        "column": 29,
        "context": "elligence = await (;\\n      this.intelligenceSystem as unknown as {\\n        generateComprehensiveInte"
      }
    ],
    "src/services/LocalRecipeService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 120,
        "column": 23,
        "context": "isine as ExtendedCuisine);\\n          recipes.push(...cuisineRecipes);\\n        }\\n      }\\n\\n      logge"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 475,
        "column": 12,
        "context": "  return this.getRecipesFromCuisine({\\n            ...cuisine;\\n            dishes: cuisine.dishes.dis"
      }
    ],
    "src/services/LoggingService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 179,
        "column": 12,
        "context": "  public getLogBuffer(): LogEntry[] {\\n    return [...this.logBuffer];\\n  }\\n\\n  public clearLogBuffer()"
      }
    ],
    "src/services/MLIntelligenceService.ts": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`[MLIntelligence] ${message}${data ? ` - ${JSON.stringify(data)}` : ''}",
        "line": 1350,
        "column": 8,
        "context": "d<string, (msg: string) => void>)[level](\\n        `[MLIntelligence] ${message}${data ? ` - ${JSON.st"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`[MLIntelligence] ${message}${data ? ` - ${JSON.stringify(data)}` : ''}",
        "line": 1350,
        "column": 8,
        "context": "d<string, (msg: string) => void>)[level](\\n        `[MLIntelligence] ${message}${data ? ` - ${JSON.st"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${data ? ` - ${",
        "line": 1350,
        "column": 36,
        "context": "oid>)[level](\\n        `[MLIntelligence] ${message}${data ? ` - ${JSON.stringify(data)}` : ''}`,\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 90,
        "column": 6,
        "context": "Usage: 150 * 1024 * 1024, // 150MB\\n      },\\n      ...config\\n    };\\n\\n    this.cache = new Map();\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 446,
        "column": 25,
        "context": "rologicalContext,\\n    );\\n    recommendations.push(...elementalRecommendations);\\n\\n    return recommen"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 479,
        "column": 23,
        "context": "strologicalContext,\\n    );\\n    optimizations.push(...elementalOptimizations);\\n\\n    return optimizati"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 497,
        "column": 23,
        "context": "rologicalContext,\\n      ),\\n      suggestions.push(...flavorEnhancements);\\n    }\\n\\n    // Add astrolog"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 505,
        "column": 21,
        "context": "_astrologicalContext,\\n    );\\n    suggestions.push(...astrologicalFlavorEnhancements);\\n\\n    // Add se"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 512,
        "column": 21,
        "context": "_astrologicalContext,\\n    );\\n    suggestions.push(...seasonalFlavorSuggestions);\\n\\n    return suggest"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 530,
        "column": 25,
        "context": "logicalContext,\\n      ),\\n      optimizations.push(...nutritionalOptimizations);\\n    }\\n\\n    // Add as"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 538,
        "column": 23,
        "context": "strologicalContext,\\n    );\\n    optimizations.push(...astrologicalNutritionalOptimizations);\\n\\n    ret"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 744,
        "column": 20,
        "context": "Data, __astrologicalContext);\\n    techniques.push(...fusionTechniques);\\n\\n    // Add astrological fus"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 751,
        "column": 20,
        "context": "__astrologicalContext,\\n    );\\n    techniques.push(...astrologicalFusionTechniques);\\n\\n    return tech"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 841,
        "column": 22,
        "context": "   _culinaryContext,\\n    );\\n    enhancements.push(...cosmicEnhancements);\\n\\n    // Add ML-specific en"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 848,
        "column": 22,
        "context": "   _culinaryContext,\\n    );\\n    enhancements.push(...mlEnhancements);\\n\\n    return enhancements.slice"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1429,
        "column": 20,
        "context": "dIntelligenceConfig>): void {\\n    this.config = { ...this.config, ...newConfig };\\n    this.log('info"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1429,
        "column": 36,
        "context": "fig>): void {\\n    this.config = { ...this.config, ...newConfig };\\n    this.log('info', 'ML Intellige"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 666,
        "column": 18,
        "context": "his.calculateInnovationFactor(;\\n      _cuisineData as unknown as Recipe,\\n      __astrologicalContext"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1349,
        "column": 13,
        "context": "d {\\n    if (this.shouldLog(level)) {\\n      (logger as unknown as Record<string, (msg: string) => voi"
      }
    ],
    "src/services/NutritionService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 43,
        "column": 10,
        "context": " (acc: Record<string, number>, n) => ({\\n          ...acc,\\n          [n.nutrientName || '']: n.value "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 9,
        "column": 25,
        "context": "Central.getFood(fdcId);\\n\\n    const foodData = data as unknown as FoodDataCentralFood;\\n\\n    return {\\n"
      }
    ],
    "src/services/PerformanceCache.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 367,
        "column": 43,
        "context": "nTime:\\n        metricsArray.length > 0 ? Math.max(...metricsArray.map(m => m.calculationTime)) : 0,;"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 369,
        "column": 43,
        "context": "tRate:\\n        metricsArray.length > 0 ? Math.max(...metricsArray.map(m => m.cacheHitRate)) : 0,;\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 370,
        "column": 54,
        "context": "  memoryUsage: metricsArray.length > 0 ? Math.max(...metricsArray.map(m => m.memoryUsage)) : 0,;\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 372,
        "column": 43,
        "context": "Count:\\n        metricsArray.length > 0 ? Math.max(...metricsArray.map(m => m.recommendationCount)) :"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 374,
        "column": 43,
        "context": "eTime:\\n        metricsArray.length > 0 ? Math.max(...metricsArray.map(m => m.averageResponseTime)) :"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 376,
        "column": 43,
        "context": "Usage:\\n        metricsArray.length > 0 ? Math.max(...metricsArray.map(m => m.peakMemoryUsage)) : 0,,"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 379,
        "column": 47,
        "context": ";\\n\\n    return { current, average, peak, history: [...this.metrics] };\\n  }\\n\\n  /**\\n   * Clear metrics "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 404,
        "column": 56,
        "context": "info('üî• Warming up caches for optimal performance...');\\n\\n  // This will be implemented with actual "
      }
    ],
    "src/services/PerformanceMetricsAnalytics.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 264,
        "column": 47,
        "context": ");\\n    log.info('üìä Capturing performance snapshot...');\\n\\n    const [systemMetrics, processMetrics, "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1521,
        "column": 10,
        "context": "pshots = data.map((item: unknown) => ({\\n          ...item;\\n          timestamp: new Date(item.timest"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1530,
        "column": 10,
        "context": "alerts = data.map((item: unknown) => ({\\n          ...item;\\n          timestamp: new Date(item.timest"
      }
    ],
    "src/services/PerformanceMonitoringService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 81,
        "column": 6,
        "context": "e system metrics\\n    this.systemMetrics = {\\n      ...this.systemMetrics;\\n      totalMemoryUsage: tot"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 195,
        "column": 8,
        "context": "his.componentMetrics.set(componentName, {\\n        ...existing;\\n        renderCount: newRenderCount,\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 221,
        "column": 8,
        "context": "his.componentMetrics.set(componentName, {\\n        ...existing;\\n        errorCount: existing.errorCou"
      }
    ],
    "src/services/PredictiveIntelligenceService.ts": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`[PredictiveIntelligence] ${message}${data ? ` - ${JSON.stringify(data)}` : ''}",
        "line": 1241,
        "column": 8,
        "context": "string, (msg: string) => void>)[level]?.(\\n        `[PredictiveIntelligence] ${message}${data ? ` - $"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`[PredictiveIntelligence] ${message}${data ? ` - ${JSON.stringify(data)}` : ''}",
        "line": 1241,
        "column": 8,
        "context": "string, (msg: string) => void>)[level]?.(\\n        `[PredictiveIntelligence] ${message}${data ? ` - $"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${data ? ` - ${",
        "line": 1241,
        "column": 44,
        "context": "l]?.(\\n        `[PredictiveIntelligence] ${message}${data ? ` - ${JSON.stringify(data)}` : ''}`,\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 121,
        "column": 6,
        "context": "Usage: 100 * 1024 * 1024, // 100MB\\n      },\\n      ...config\\n    };\\n\\n    this.cache = new Map();\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1313,
        "column": 20,
        "context": "dIntelligenceConfig>): void {\\n    this.config = { ...this.config, ...newConfig };\\n    this.log('info"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1313,
        "column": 36,
        "context": "fig>): void {\\n    this.config = { ...this.config, ...newConfig };\\n    this.log('info', 'Predictive I"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1002,
        "column": 40,
        "context": "itions) {\\n      const planets = planetaryPositions as unknown as Record<string, Record<string, unkno"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1240,
        "column": 13,
        "context": "d {\\n    if (this.shouldLog(level)) {\\n      (logger as unknown as Record<string, (msg: string) => voi"
      }
    ],
    "src/services/QualityGatesValidation.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 567,
        "column": 49,
        "context": "\\n    log.info('üö¶ Starting quality gates execution...');\\n\\n    const startTime = Date.now();\\n    cons"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 587,
        "column": 25,
        "context": "cuteQualityGate(gate)));\\n        gateResults.push(...results);\\n      } else {\\n        // Execute seq"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 616,
        "column": 33,
        "context": "// Store results\\n      this.executionHistory.push(...gateResults);\\n      this.persistResults();\\n\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1064,
        "column": 42,
        "context": "void> {\\n    log.info('üîÑ Executing rollback action...');\\n    // Rollback implementation would go her"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1077,
        "column": 38,
        "context": "ise<void> {\\n    log.info('üõë Executing stop action...');\\n    // Stop implementation would go here\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1090,
        "column": 37,
        "context": "mise<void> {\\n    log.info('üîß Executing fix action...');\\n    // Fix implementation would go here\\n   "
      }
    ],
    "src/services/QualityMetricsService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 369,
        "column": 23,
        "context": "}\\n\\n    // Add new insights\\n    this.insights.push(...newInsights);\\n\\n    // Keep only recent insights"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 759,
        "column": 22,
        "context": "erity === 'info',,;\\n    ),\\n\\n    achievements.push(...recentInsights.map(i => i.title));\\n\\n    return "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 826,
        "column": 27,
        "context": " actionableInsights) {\\n      recommendations.push(...insight.suggestedActions.slice(0, 2))\\n    }\\n\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 832,
        "column": 29,
        "context": "ations.length > 0) {\\n        recommendations.push(...prediction.recommendations.slice(0, 1))\\n      }"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 844,
        "column": 12,
        "context": "rogress)}% complete`,\\n      );\\n    }\\n\\n    return [...new Set(recommendations)].slice(0, 8); // Remov"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 912,
        "column": 6,
        "context": "now()}`;\\n    const newGoal: QualityGoal = {\\n      ...goal;\\n      id,\\n      progress: 0,\\n      onTrac"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 928,
        "column": 30,
        "context": " -1) return false;\\n\\n    this.goals[goalIndex] = { ...this.goals[goalIndex], ...updates };\\n    this.s"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 928,
        "column": 56,
        "context": "is.goals[goalIndex] = { ...this.goals[goalIndex], ...updates };\\n    this.saveHistoricalData();\\n\\n    "
      }
    ],
    "src/services/RecipeChakraService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 33,
        "column": 29,
        "context": "the recipe to modify\\n    const enhancedRecipe = { ...recipe };\\n\\n    // Add chakra-balancing ingredie"
      }
    ],
    "src/services/RecipeCuisineConnector.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 98,
        "column": 10,
        "context": "       this.recipeCache.set(recipeId, {\\n          ...recipe;\\n          id: recipeId,\\n          cuisi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 431,
        "column": 12,
        "context": " both cuisines for fusion inspiration\\n    return [...primaryRecipes.slice(0, 3), ...secondaryRecipes"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 431,
        "column": 43,
        "context": "ration\\n    return [...primaryRecipes.slice(0, 3), ...secondaryRecipes.slice(0, 3)];\\n  }\\n\\n  /**\\n   * "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 85,
        "column": 38,
        "context": "tructor() {\\n    this.cuisineDatabase = cuisinesMap as unknown as any;\\n    this.recipeCache = new Map"
      }
    ],
    "src/services/RecipeElementalService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 42,
        "column": 8,
        "context": " state if there's an error\\n      return {\\n        ...recipe,\\n        elementalProperties: { Fire: 0."
      }
    ],
    "src/services/RecipeFinder.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 375,
        "column": 8,
        "context": "ipe[] = recipes.map((recipe, index) => ({\\n        ...recipe;\\n        score: recipe.score ?? 1 - inde"
      }
    ],
    "src/services/RecommendationAdapter.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 129,
        "column": 12,
        "context": "            degree: data.degree || 0,\\n            ...(data.isRetrograde !== undefined ? { isRetrogra"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 545,
        "column": 6,
        "context": " boost = boosts[item.id] || 1;\\n    return {\\n      ...item;\\n      elementalProperties: {\\n        Fire"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 652,
        "column": 6,
        "context": "r AlchemicalItem compatibility\\n    return {\\n      ...ingredient;\\n      alchemicalProperties: {\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 156,
        "column": 64,
        "context": "narPhaseFormatted = convertToLunarPhase(lunarPhase as unknown as LunarPhase);\\n\\n      // Calculate if"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 224,
        "column": 31,
        "context": "sult = alchemize(;\\n        this.convertedPositions as unknown as Record<string, PlanetaryPosition>,\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 230,
        "column": 36,
        "context": "tus\\n      );\\n\\n      this.alchemicalResult = result as unknown as Record<string, number>,;\\n\\n      // "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 233,
        "column": 31,
        "context": " result properties\\n      const resultData = result as unknown as any;\\n\\n      // Prepare alchemical p"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 311,
        "column": 35,
        "context": "roperty access\\n          const aspectData = aspect as unknown as any;\\n          const body1 = aspect"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 435,
        "column": 40,
        "context": "erCase();\\n    return (planetInfo[planetKey] || {}) as unknown as any;\\n  }\\n\\n  /**\\n   * Get recommende"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 663,
        "column": 5,
        "context": "     reactivity,\\n        gregsEnergy\\n      }\\n    } as unknown as AlchemicalItem;\\n  }\\n\\n  /**\\n   * Get"
      }
    ],
    "src/services/RecommendationAnalyticsService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 247,
        "column": 6,
        "context": " const fullInteraction: UserInteraction = {\\n      ...interaction;\\n      timestamp: Date.now()\\n    };"
      }
    ],
    "src/services/RecommendationService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 149,
        "column": 12,
        "context": "            degree: data.degree || 0,\\n            ...(data.isRetrograde !== undefined ? { isRetrogra"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 292,
        "column": 10,
        "context": "        }\\n        });\\n\\n        return {\\n          ...(item as any);\\n          elementalProperties: p"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 338,
        "column": 12,
        "context": "], limit: number): AlchemicalItem[] {\\n    return [...items]\\n      .sort((a, b) => {\\n        // Sort "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 412,
        "column": 10,
        "context": "cipes || []);\\n        .map(recipe => ({\\n          ...recipe;\\n          score: this.calculateRecipeSc"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 414,
        "column": 12,
        "context": ": this.calculateRecipeScore(recipe, {\\n            ...criteria;\\n            celestialInfluence\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 514,
        "column": 51,
        "context": "   // Additional scoring factors can be added here...\\n\\n    // Normalize score to 0-1 range\\n    retur"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 400,
        "column": 30,
        "context": "[]).length === 0) {\\n        throw new (createError as unknown as new (\\n          message: string,\\n  "
      }
    ],
    "src/services/ServicesManager.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 82,
        "column": 12,
        "context": "ts(): ServiceInitializationResult[] {\\n    return [...this._serviceResults]\\n  }\\n\\n  /**\\n   * Initializ"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 102,
        "column": 40,
        "context": "lts = [];\\n      logger.info('Initializing services...');\\n\\n      // Initialize AlchemicalEngine first"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 132,
        "column": 48,
        "context": "{\\n      logger.info('Initializing AlchemicalEngine...');\\n\\n      // The engine is already initialized"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 182,
        "column": 48,
        "context": "{\\n      logger.info('Initializing AstrologyService...');\\n\\n      // The astrologyService is already i"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 220,
        "column": 49,
        "context": "\\n      logger.info('Initializing IngredientService...');\\n\\n      // The unifiedIngredientService is a"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 256,
        "column": 45,
        "context": "ry {\\n      logger.info('Initializing RecipeService...');\\n\\n      // The unifiedRecipeService is alrea"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 292,
        "column": 53,
        "context": "   logger.info('Initializing RecommendationService...');\\n\\n      // The unifiedRecommendationService "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 335,
        "column": 63,
        "context": "info('Initializing AlchemicalRecommendationService...');\\n\\n      // Ensure the service is initialized"
      }
    ],
    "src/services/SwissEphemerisService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 664,
        "column": 26,
        "context": " // Collect key aspects\\n          keyAspects.push(...transit.keyAspects);\\n        }\\n      });\\n    })"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 785,
        "column": 6,
        "context": "t approximatedEntry: SwissEphemerisData = {\\n      ...baseEntry;\\n      day: date.getDate(),\\n      dat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 798,
        "column": 26,
        "context": "e % 360) + 360) % 360;\\n\\n        (approximatedEntry as unknown as any)[planetCode] = newLongitude;\\n\\n "
      }
    ],
    "src/services/UnifiedIngredientService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 107,
        "column": 26,
        "context": "dientCache.entries()) {\\n      result[category] = [...ingredients];\\n    }\\n\\n    return result;\\n  }\\n\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 119,
        "column": 31,
        "context": "tCache.values()) {\\n      void allIngredients.push(...ingredients);\\n    }\\n    return allIngredients;\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 149,
        "column": 16,
        "context": "rCase() === normalizedCategory) {\\n        return [...ingredients]\\n      }\\n    }\\n\\n    return [];\\n  }\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 166,
        "column": 23,
        "context": "izedSubCategory,;\\n      ),\\n      void result.push(...matching);\\n    }\\n    return result;\\n  }\\n\\n  /**\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 551,
        "column": 6,
        "context": "t enhancedIngredient: UnifiedIngredient = {\\n      ...(ingredient as UnifiedIngredient);\\n      elemen"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1005,
        "column": 32,
        "context": " },\\n  ): number {\\n    const allFlavors = new Set([...Object.keys(profile1), ...Object.keys(profile2)"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1005,
        "column": 58,
        "context": "t allFlavors = new Set([...Object.keys(profile1), ...Object.keys(profile2)]);\\n\\n    let similarity = "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 193,
        "column": 28,
        "context": " filteredIngredients,\\n        filter.currentSeason as unknown as string[] | Season[],\\n      )\\n    }\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 936,
        "column": 42,
        "context": "(signs)\\n        ? signs.includes(currentZodiacSign as unknown as Record<string, Record<string, strin"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 937,
        "column": 38,
        "context": ", string>>)\\n        : signs === (currentZodiacSign as unknown as Record<string, Record<string, strin"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 955,
        "column": 33,
        "context": "isArray(planets)\\n        ? planets.includes(planet as unknown as Record<string, Record<string, strin"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 956,
        "column": 29,
        "context": "rd<string, string>>)\\n        : planets === (planet as unknown as Record<string, Record<string, strin"
      }
    ],
    "src/services/UnifiedRecipeService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 78,
        "column": 21,
        "context": "=== targetCuisine;\\n      });\\n      return filtered as unknown as ExtendedRecipe[];\\n    } catch (erro"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 100,
        "column": 20,
        "context": "s = allRecipes.slice(0, 10),;\\n      return matches as unknown as ExtendedRecipe[]\\n    } catch (error"
      }
    ],
    "src/services/UnifiedRecommendationService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 203,
        "column": 37,
        "context": "ts.includes(\\n              criteria.planetaryRuler as unknown as Record<string, Record<string, strin"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 206,
        "column": 36,
        "context": " planets ===;\\n            (criteria.planetaryRuler as unknown as Record<string, Record<string, strin"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 255,
        "column": 68,
        "context": "tedIngredients || []).map(item => item.ingredient) as unknown as Ingredient[], // TODO: Review this "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 476,
        "column": 36,
        "context": "ach(item => {\\n      const methodData = item.method as unknown as any;\\n      const methodId = String("
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 500,
        "column": 49,
        "context": "\\n    const alchemicalEngineData = alchemicalEngine as unknown as any;\\n    if (typeof alchemicalEngin"
      }
    ],
    "src/services/UnifiedScoringAdapter.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 141,
        "column": 18,
        "context": "|| {},\\n        culturalOrigins:\\n          ((recipe as unknown as any).culturalOrigins as string[]) |"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 142,
        "column": 25,
        "context": "lOrigins as string[]) ||\\n          [String((recipe as unknown as any).cuisine || '')].filter(Boolean"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 181,
        "column": 37,
        "context": "ing_method',\\n        elementalProperties: ((method as unknown as any)\\n          .elementalEffect as "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 188,
        "column": 29,
        "context": "Air: 0.25\\n        },\\n        seasonality: ((method as unknown as any).seasonality as Season[]) || []"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 189,
        "column": 33,
        "context": "Season[]) || [],\\n        planetaryRulers: ((method as unknown as any).planetaryRulers as Planet[]) |"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 190,
        "column": 31,
        "context": "s Planet[]) || [],\\n        flavorProfile: ((method as unknown as any).flavorProfile as Record<string"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 191,
        "column": 33,
        "context": " number>) || {},\\n        culturalOrigins: ((method as unknown as any).culturalOrigins as string[]) |"
      }
    ],
    "src/services/UnifiedScoringService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 684,
        "column": 10,
        "context": "if (astrologizeData) {\\n        return {\\n          ...astrologizeData;\\n          source: 'astrologize"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 697,
        "column": 8,
        "context": "AstrologicalData(context);\\n      return {\\n        ...fallbackData;\\n        source: 'swiss_ephemeris'"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 751,
        "column": 8,
        "context": " (context.aspects || []).map(aspect => ({\\n        ...aspect;\\n        strength: 0.5, // Default stren"
      }
    ],
    "src/services/UnusedVariableDetector.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 208,
        "column": 28,
        "context": "<DetectionResult[]> {\\n    const mergedOptions = { ...this.DEFAULT_OPTIONS, ...options };\\n\\n    if (th"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 208,
        "column": 53,
        "context": " const mergedOptions = { ...this.DEFAULT_OPTIONS, ...options };\\n\\n    if (this.isAnalyzing) {\\n      t"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 215,
        "column": 65,
        "context": "\udd0d Starting comprehensive unused variable detection...');\\n\\n    try {\\n      // Build file list\\n      c"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 220,
        "column": 50,
        "context": "      log.info(`üìÅ Analyzing ${files.length} files...`);\\n\\n      // Build global symbol table\\n      a"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 298,
        "column": 45,
        "context": "d> {\\n    log.info('üîç Building global symbol table...');\\n\\n    this.globalSymbolTable.clear();\\n    th"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1300,
        "column": 47,
        "context": " {\\n    log.info('üîç Performing cross-file analysis...');\\n\\n    // Update usage counts based on cross-"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1322,
        "column": 57,
        "context": ".info('üí° Generating comprehensive recommendations...');\\n\\n    // Could add cross-file recommendation"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1346,
        "column": 45,
        "context": "n) {\\n      log.info('üß™ Performing dry run cleanup...');\\n    } else {\\n      log.info('üîß Performing "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1348,
        "column": 47,
        "context": " {\\n      log.info('üîß Performing automated cleanup...');\\n    }\\n\\n    try {\\n      const content = fs.r"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1482,
        "column": 28,
        "context": "  results.length > 0;\\n        ? new Date(Math.max(...results.map(r => r.timestamp.getTime())));\\n    "
      }
    ],
    "src/services/adapters/FoodAlchemySystemAdapter.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 81,
        "column": 8,
        "context": "pe service\\n      const recipeCriteria = {\\n        ...criteria;\\n        flavorProfile,\\n        elemen"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 243,
        "column": 6,
        "context": "     // Add other relevant state properties\\n      ...(state as unknown)\\n    };\\n  }\\n\\n  /**\\n   * Creat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 88,
        "column": 20,
        "context": "tches(recipeCriteria, limit);\\n      return recipes as unknown as ScoredRecipe[];\\n    } catch (error)"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 140,
        "column": 20,
        "context": "      minMatchScore,\\n      );\\n      return recipes as unknown as Recipe[];\\n    } catch (error) {\\n   "
      }
    ],
    "src/services/adapters/IngredientServiceAdapter.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 200,
        "column": 21,
        "context": "IngredientsByPlanet(planet);\\n        results.push(...planetaryIngredients);\\n      });\\n\\n      // Remo"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 233,
        "column": 30,
        "context": "ltering\\n        ),\\n\\n        allComplementary.push(...complementary);\\n      });\\n\\n      // Filter out "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 274,
        "column": 8,
        "context": "onst combinedFilter: IngredientFilter = {\\n        ...filter;\\n        season: [season]\\n      };\\n\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 171,
        "column": 29,
        "context": " Air: 0.25 };\\n    }\\n\\n    const stateRecord = state as unknown as any;\\n    const elements = stateReco"
      }
    ],
    "src/services/adapters/LegacyIngredientAdapter.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 218,
        "column": 14,
        "context": "cyService.analyzeRecipeIngredients(\\n        recipe as unknown as import('@/types/unified').Recipe;\\n "
      }
    ],
    "src/services/adapters/LegacyRecipeAdapter.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 250,
        "column": 34,
        "context": "teria if needed\\n      const criteriaWithLimit = { ...criteria, maxResults: limit };\\n      const matc"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 68,
        "column": 20,
        "context": "ecipeService.getAllRecipes();\\n      return recipes as unknown as Recipe[];\\n    } catch (error) {\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 73,
        "column": 20,
        "context": "ecipeService.getAllRecipes();\\n      return recipes as unknown as Recipe[];\\n    }\\n  }\\n\\n  /**\\n   * Sea"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 86,
        "column": 35,
        "context": "earch criteria\\n      const criteriaData = criteria as unknown as any;\\n      const searchQuery = Stri"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 89,
        "column": 20,
        "context": "e.searchRecipes(searchQuery);\\n      return recipes as unknown as Recipe[];\\n    } catch (error) {\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 93,
        "column": 35,
        "context": "ring parameter\\n      const criteriaData = criteria as unknown as any;\\n      const queryValue = crite"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 97,
        "column": 22,
        "context": ".searchRecipes(queryValue);\\n        return recipes as unknown as Recipe[];\\n      } else if (criteria"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 102,
        "column": 22,
        "context": "earchRecipes(searchString);\\n        return recipes as unknown as Recipe[];\\n      }\\n      return [];\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 115,
        "column": 20,
        "context": "etRecipesForCuisine(cuisine);\\n      return recipes as unknown as Recipe[];\\n    } catch (error) {\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 120,
        "column": 20,
        "context": "getRecipesByCuisine(cuisine);\\n      return recipes as unknown as Recipe[];\\n    }\\n  }\\n\\n  /**\\n   * Get"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 132,
        "column": 20,
        "context": "e.searchRecipes(searchQuery);\\n      return recipes as unknown as Recipe[];\\n    } catch (error) {\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 142,
        "column": 21,
        "context": "Case());\\n        ),\\n      );\\n      return filtered as unknown as Recipe[];\\n    }\\n  }\\n\\n  /**\\n   * Get"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 152,
        "column": 46,
        "context": "ess\\n      const serviceData = unifiedRecipeService as unknown as any;\\n      // ‚úÖ Pattern GG-6: Safe "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 159,
        "column": 22,
        "context": "= await methodCall(season);\\n        return recipes as unknown as Recipe[];\\n      }\\n      // ‚úÖ Patter"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 164,
        "column": 20,
        "context": "e.searchRecipes(searchQuery);\\n      return recipes as unknown as Recipe[];\\n    } catch (error) {\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 169,
        "column": 20,
        "context": "e.getRecipesBySeason(season);\\n      return recipes as unknown as Recipe[];\\n    }\\n  }\\n\\n  /**\\n   * Get"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 179,
        "column": 46,
        "context": "pe)\\n      const serviceData = unifiedRecipeService as unknown as any;\\n      // ‚úÖ Pattern GG-6: Safe "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 186,
        "column": 22,
        "context": "it lunarMethod(lunarPhase);\\n        return recipes as unknown as Recipe[];\\n      }\\n      // ‚úÖ Patter"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 191,
        "column": 20,
        "context": "e.searchRecipes(searchQuery);\\n      return recipes as unknown as Recipe[];\\n    } catch (error) {\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 201,
        "column": 21,
        "context": "', '')),\\n        ),\\n      );\\n      return filtered as unknown as Recipe[];\\n    }\\n  }\\n\\n  /**\\n   * Get"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 211,
        "column": 46,
        "context": "ess\\n      const serviceData = unifiedRecipeService as unknown as any;\\n      // ‚úÖ Pattern GG-6: Safe "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 218,
        "column": 22,
        "context": "await mealMethod(mealType);\\n        return recipes as unknown as Recipe[];\\n      }\\n      // ‚úÖ Patter"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 223,
        "column": 20,
        "context": "e.searchRecipes(searchQuery);\\n      return recipes as unknown as Recipe[];\\n    } catch (error) {\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 228,
        "column": 20,
        "context": "tRecipesByMealType(mealType);\\n      return recipes as unknown as Recipe[];\\n    }\\n  }\\n\\n  /**\\n   * Get"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 252,
        "column": 20,
        "context": "peMatches(criteriaWithLimit);\\n      return matches as unknown as ScoredRecipe[];\\n    } catch (error)"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 265,
        "column": 46,
        "context": "ess\\n      const serviceData = unifiedRecipeService as unknown as any;\\n      // ‚úÖ Pattern GG-6: Safe "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 274,
        "column": 35,
        "context": "riteria search\\n      const criteriaData = criteria as unknown as any;\\n      const searchQuery = Stri"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 295,
        "column": 46,
        "context": "ess\\n      const serviceData = unifiedRecipeService as unknown as any;\\n      // ‚úÖ Pattern GG-6: Safe "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 337,
        "column": 46,
        "context": "ess\\n      const serviceData = unifiedRecipeService as unknown as any;\\n      // ‚úÖ Pattern GG-6: Safe "
      }
    ],
    "src/services/adapters/LegacyRecommendationAdapter.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 87,
        "column": 8,
        "context": "RecommendedIngredients(\\n        criteria,\\n      )) as unknown as RecommendationResult<UnifiedIngredi"
      }
    ],
    "src/services/adapters/NutritionalDataAdapter.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 309,
        "column": 8,
        "context": "ecommendations(seasonStr);\\n      return {\\n        ...result,\\n        element: result.element as Elem"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 92,
        "column": 8,
        "context": "t fetchNutritionalData(\\n        foodName,\\n      )) as unknown as import('@/types/alchemy').Nutrition"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 95,
        "column": 46,
        "context": "ess\\n      const errorHandlerService = errorHandler as unknown as any;\\n      const logError = errorHa"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 115,
        "column": 7,
        "context": "alBalance(\\n        ingredients as unknown,\\n      ) as unknown as import('@/types/alchemy').Nutrition"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 118,
        "column": 46,
        "context": "ess\\n      const errorHandlerService = errorHandler as unknown as any;\\n      const logError = errorHa"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 156,
        "column": 46,
        "context": "ess\\n      const errorHandlerService = errorHandler as unknown as any;\\n      const logError = errorHa"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 191,
        "column": 46,
        "context": "ess\\n      const errorHandlerService = errorHandler as unknown as any;\\n      const logError = errorHa"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 223,
        "column": 46,
        "context": "ess\\n      const errorHandlerService = errorHandler as unknown as any;\\n      const logError = errorHa"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 276,
        "column": 46,
        "context": "ess\\n      const errorHandlerService = errorHandler as unknown as any;\\n      const logError = errorHa"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 354,
        "column": 46,
        "context": "ess\\n      const errorHandlerService = errorHandler as unknown as any;\\n      const logError = errorHa"
      }
    ],
    "src/services/astrologizeApi.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 176,
        "column": 6,
        "context": "st requestData: LocalAstrologizeRequest = {\\n      ...defaultDateTime,\\n      ...customDateTime,\\n    }"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 177,
        "column": 6,
        "context": "logizeRequest = {\\n      ...defaultDateTime,\\n      ...customDateTime,\\n    };\\n\\n    log.info('Calling l"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 284,
        "column": 4,
        "context": ">> {\\n  return await fetchPlanetaryPositions({\\n    ...location,\\n    zodiacSystem,\\n  });\\n}\\n\\n/**\\n * Get"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 304,
        "column": 4,
        "context": " minute: date.getMinutes(),\\n    zodiacSystem,\\n    ...location,\\n  });\\n}\\n\\n/**\\n * Test the astrologize "
      }
    ],
    "src/services/astrologyApi.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 61,
        "column": 22,
        "context": "mber';\\n          ? position\\n          : ((position as unknown as any).degree) || 0;\\n\\n      const sig"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 99,
        "column": 44,
        "context": "ccess\\n    const astroService = AstrologicalService as unknown as {\\n      getStateForDate?: (date: Da"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 131,
        "column": 44,
        "context": "ccess\\n    const astroService = AstrologicalService as unknown as {\\n      getStateForDate?: (date: Da"
      }
    ],
    "src/services/campaign/AlgorithmPerformanceValidator.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 101,
        "column": 59,
        "context": " // console.log('üöÄ Running performance benchmarks...');\\n\\n    const benchmarks: PerformanceBenchmark"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 107,
        "column": 22,
        "context": "ithm performance benchmarks\\n      benchmarks.push(...(await this.benchmarkAlgorithms()));\\n\\n      // "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 110,
        "column": 22,
        "context": "ache performance benchmarks\\n      benchmarks.push(...(await this.benchmarkCacheOperations()));\\n\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 113,
        "column": 22,
        "context": "base performance benchmarks\\n      benchmarks.push(...(await this.benchmarkDatabaseOperations()));\\n\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 116,
        "column": 22,
        "context": " API performance benchmarks\\n      benchmarks.push(...(await this.benchmarkApiOperations()));\\n\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 119,
        "column": 22,
        "context": "/ UI performance benchmarks\\n      benchmarks.push(...(await this.benchmarkUiOperations()));\\n\\n      /"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 122,
        "column": 33,
        "context": "marks in history\\n      this.benchmarkHistory.push(...benchmarks);\\n\\n      // Keep only recent history"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 141,
        "column": 61,
        "context": "/ console.log('üíæ Validating 3-tier caching system...');\\n\\n    try {\\n      // Tier 1: Memory cache va"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 207,
        "column": 62,
        "context": " console.log('üîç Detecting performance regressions...');\\n\\n    const regressionTests: RegressionTestR"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 281,
        "column": 67,
        "context": "ole.log('üìà Validating 50% improvement maintenance...');\\n\\n    try {\\n      if (this.benchmarkHistory."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 388,
        "column": 15,
        "context": "Maintained,\\n      recommendations,\\n      alerts: [...this.alerts]\\n    }\\n  }\\n\\n  // Private helper met"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 747,
        "column": 12,
        "context": "CurrentAlerts(): PerformanceAlert[] {\\n    return [...this.alerts]\\n  }\\n\\n  /**\\n   * Clear all alerts\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 782,
        "column": 12,
        "context": "rkHistory(): PerformanceBenchmark[] {\\n    return [...this.benchmarkHistory]\\n  }\\n}\\n"
      }
    ],
    "src/services/campaign/BundleSizeOptimizer.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 89,
        "column": 49,
        "context": "\\n      // // console.log('üì¶ Analyzing bundle size...');\\n\\n      // Get bundle information from build"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 348,
        "column": 21,
        "context": "nc('package.json', 'utf8'));\\n      const deps = { ...packageJson.dependencies, ...packageJson.devDep"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 348,
        "column": 50,
        "context": "      const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };\\n\\n      // Analyz"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 392,
        "column": 66,
        "context": "ole.log('üîÑ Validating lazy loading implementation...');\\n\\n      const componentsAnalyzed = await thi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 479,
        "column": 12,
        "context": "moving ${dep.name} if not essential`,\\n            ...dep.alternatives.map(alt => `Consider lighter a"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 519,
        "column": 25,
        "context": "ad time',\\n      )\\n    }\\n\\n    recommendations.push(...analysis.recommendations);\\n\\n    return {\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 525,
        "column": 15,
        "context": "ysis,\\n      lazyLoadingValidation,\\n      alerts: [...this.alerts],\\n      overallScore,\\n      targetC"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 545,
        "column": 21,
        "context": "   if (stat.isDirectory()) {\\n          files.push(...this.getAllFiles(fullPath));\\n        } else {\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 759,
        "column": 12,
        "context": "Alerts(): BundleOptimizationAlert[] {\\n    return [...this.alerts]\\n  }\\n\\n  /**\\n   * Clear all alerts\\n "
      }
    ],
    "src/services/campaign/CampaignController.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 84,
        "column": 23,
        "context": "ed,\\n        executionTime,\\n        safetyEvents: [...this.safetyEvents]\\n      };\\n\\n      this.addSafe"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 120,
        "column": 23,
        "context": " 0,\\n        executionTime,\\n        safetyEvents: [...this.safetyEvents]\\n      };\\n    }\\n  }\\n\\n  /**\\n  "
      }
    ],
    "src/services/campaign/CampaignIntelligenceSystem.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 347,
        "column": 6,
        "context": "s\\n    const intelligenceRecommendations = [\\n      ...ERROR_PATTERN_INTELLIGENCE.generateErrorIntelli"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 348,
        "column": 6,
        "context": "rateErrorIntelligenceReport(errorPatterns);\\n      ...CAMPAIGN_PROGRESS_INTELLIGENCE.generateProgress"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 302,
        "column": 49,
        "context": "\\n      analysisResult.distribution.priorityRanking as unknown as any[],\\n    );\\n\\n    const progressAn"
      }
    ],
    "src/services/campaign/CodeQualityAutomationSystem.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 152,
        "column": 29,
        "context": "sult.phasesFailed++;\\n          result.errors.push(...phaseResult.errors);\\n\\n          if (phase.criti"
      }
    ],
    "src/services/campaign/ConsoleStatementRemovalSystem.ts": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`\n# Console Statement Removal Report\nGenerated: ${new Date().toISOString()}\n\n## Execution Summary\n- **Success**: ${result.success ? '‚úÖ' : '‚ùå'}\n- **Files Processed**: ${result.filesProcessed}\n- **Console Statements Removed**: ${result.consoleStatementsRemoved}\n- **Console Statements Preserved**: ${result.consoleStatementsPreserved}\n- **Build Time**: ${result.buildTime}ms\n- **Files with Preserved Statements**: ${result.preservedFiles.length}\n\n## Configuration\n- **Max Files**: ${this.config.maxFiles}\n- **Dry Run**: ${this.config.dryRun}\n- **Preserve Debug Critical**: ${this.config.preserveDebugCritical}\n- **Selective Removal**: ${this.config.selectiveRemoval}\n- **Build Validation**: ${this.config.buildValidation}\n- **Git Stash**: ${this.config.enableGitStash}\n\n## Preserved Files\n${\n  result.preservedFiles.length > 0\n    ? result.preservedFiles.map(f => `- ${f}`).join('\\n');\n    : 'No files had critical console statements preserved'\n}",
        "line": 587,
        "column": 11,
        "context": "esult: ConsoleRemovalResult): string {\\n    return `\\n# Console Statement Removal Report\\nGenerated: ${"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`).join('\\n') : 'No errors'};\n${result.warnings.length > 0 ? '### Warnings\\n' + result.warnings.map(w => `- ${w}`).join('\\n') : 'No warnings'}",
        "line": 615,
        "column": 76,
        "context": " ? '### Errors\\n' + result.errors.map(e => `- ${e}`).join('\\n') : 'No errors'};\\n${result.warnings.le"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`\n# Console Statement Batch Removal Report\nGenerated: ${new Date().toISOString()}\n\n## Batch Summary\n- **Total Batches**: ${result.totalBatches}\n- **Successful Batches**: ${result.successfulBatches}\n- **Failed Batches**: ${result.failedBatches}\n- **Success Rate**: ${((result.successfulBatches / result.totalBatches) * 100).toFixed(1)}%\n\n## Processing Summary\n- **Total Files Processed**: ${result.totalFilesProcessed}\n- **Total Console Statements Processed**: ${result.totalConsoleStatementsProcessed}\n- **Critical Statements Preserved**: ${result.preservedCriticalStatements}\n- **Average Build Time**: ${result.averageBuildTime.toFixed(0)}ms\n\n## Batch Configuration\n- **Batch Size**: ${this.config.batchSize} files per batch\n- **Preserve Debug Critical**: ${this.config.preserveDebugCritical}\n- **Selective Removal**: ${this.config.selectiveRemoval}\n- **Build Validation**: ${this.config.buildValidation}\n\n## Issues\n${result.errors.length > 0 ? '### Batch Errors\\n' + result.errors.map(e => `- ${e}`).join('\\n') : 'No batch errors'}",
        "line": 631,
        "column": 11,
        "context": "(result: BatchRemovalResult): string {\\n    return `\\n# Console Statement Batch Removal Report\\nGenerat"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`\n# Console Statement Removal Report\nGenerated: ${new Date().toISOString()}\n\n## Execution Summary\n- **Success**: ${result.success ? '‚úÖ' : '‚ùå'}\n- **Files Processed**: ${result.filesProcessed}\n- **Console Statements Removed**: ${result.consoleStatementsRemoved}\n- **Console Statements Preserved**: ${result.consoleStatementsPreserved}\n- **Build Time**: ${result.buildTime}ms\n- **Files with Preserved Statements**: ${result.preservedFiles.length}\n\n## Configuration\n- **Max Files**: ${this.config.maxFiles}\n- **Dry Run**: ${this.config.dryRun}\n- **Preserve Debug Critical**: ${this.config.preserveDebugCritical}\n- **Selective Removal**: ${this.config.selectiveRemoval}\n- **Build Validation**: ${this.config.buildValidation}\n- **Git Stash**: ${this.config.enableGitStash}\n\n## Preserved Files\n${\n  result.preservedFiles.length > 0\n    ? result.preservedFiles.map(f => `- ${f}`).join('\\n');\n    : 'No files had critical console statements preserved'\n}",
        "line": 587,
        "column": 11,
        "context": "esult: ConsoleRemovalResult): string {\\n    return `\\n# Console Statement Removal Report\\nGenerated: ${"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`).join('\\n') : 'No errors'};\n${result.warnings.length > 0 ? '### Warnings\\n' + result.warnings.map(w => `- ${w}`).join('\\n') : 'No warnings'}",
        "line": 615,
        "column": 76,
        "context": " ? '### Errors\\n' + result.errors.map(e => `- ${e}`).join('\\n') : 'No errors'};\\n${result.warnings.le"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`\n# Console Statement Batch Removal Report\nGenerated: ${new Date().toISOString()}\n\n## Batch Summary\n- **Total Batches**: ${result.totalBatches}\n- **Successful Batches**: ${result.successfulBatches}\n- **Failed Batches**: ${result.failedBatches}\n- **Success Rate**: ${((result.successfulBatches / result.totalBatches) * 100).toFixed(1)}%\n\n## Processing Summary\n- **Total Files Processed**: ${result.totalFilesProcessed}\n- **Total Console Statements Processed**: ${result.totalConsoleStatementsProcessed}\n- **Critical Statements Preserved**: ${result.preservedCriticalStatements}\n- **Average Build Time**: ${result.averageBuildTime.toFixed(0)}ms\n\n## Batch Configuration\n- **Batch Size**: ${this.config.batchSize} files per batch\n- **Preserve Debug Critical**: ${this.config.preserveDebugCritical}\n- **Selective Removal**: ${this.config.selectiveRemoval}\n- **Build Validation**: ${this.config.buildValidation}\n\n## Issues\n${result.errors.length > 0 ? '### Batch Errors\\n' + result.errors.map(e => `- ${e}`).join('\\n') : 'No batch errors'}",
        "line": 631,
        "column": 11,
        "context": "(result: BatchRemovalResult): string {\\n    return `\\n# Console Statement Batch Removal Report\\nGenerat"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n  result.preservedFiles.length > 0\n    ? result.preservedFiles.map(f => `- ${",
        "line": 608,
        "column": 0,
        "context": "${this.config.enableGitStash}\\n\\n## Preserved Files\\n${\\n  result.preservedFiles.length > 0\\n    ? result"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${result.errors.length > 0 ? '### Errors\\n' + result.errors.map(e => `- ${",
        "line": 615,
        "column": 0,
        "context": "itical console statements preserved'\\n}\\n\\n## Issues\\n${result.errors.length > 0 ? '### Errors\\n' + resu"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${result.warnings.length > 0 ? '### Warnings\\n' + result.warnings.map(w => `- ${",
        "line": 616,
        "column": 0,
        "context": "ors.map(e => `- ${e}`).join('\\n') : 'No errors'};\\n${result.warnings.length > 0 ? '### Warnings\\n' + "
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${result.errors.length > 0 ? '### Batch Errors\\n' + result.errors.map(e => `- ${",
        "line": 654,
        "column": 0,
        "context": "tion**: ${this.config.buildValidation}\\n\\n## Issues\\n${result.errors.length > 0 ? '### Batch Errors\\n' "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 81,
        "column": 6,
        "context": "batchSize: 8,\\n      selectiveRemoval: true,\\n      ...config\\n    };\\n  }\\n\\n  /**\\n   * Execute console s"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 89,
        "column": 67,
        "context": ".log('üîá Starting Console Statement Removal System...');\\n\\n    try {\\n      // Pre-execution validatio"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 135,
        "column": 80,
        "context": "ing batch processing for console statement removal...');\\n\\n    const batchResult: BatchRemovalResult "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 162,
        "column": 71,
        "context": ".log(`\\nüîÑ Processing batch ${i + 1}/${batchCount}...`);\\n\\n        try {\\n          const batchConfig "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 166,
        "column": 12,
        "context": "try {\\n          const batchConfig = {\\n            ...this.config;\\n            maxFiles: this.config."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 186,
        "column": 78,
        "context": "g('‚è∏Ô∏è Pausing 2 seconds between batches for safety...');\\n            await this.sleep(2000);\\n       "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 216,
        "column": 80,
        "context": "yzing console statements for critical preservation...');\\n\\n    const statements: ConsoleStatement[] ="
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 226,
        "column": 24,
        "context": "atements(file, content),;\\n        statements.push(...fileStatements);\\n      } catch (error) {\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 358,
        "column": 19,
        "context": "try.name !== 'node_modules') {\\n        files.push(...this.getAllSourceFiles(fullPath));\\n      } else"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 465,
        "column": 31,
        "context": "Statements.length;\\n      result.preservedFiles = [...new Set(criticalStatements.map(s => s.file))];\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 496,
        "column": 66,
        "context": "ole.log('üîç Validating build after console removal...');\\n\\n      const startTime = Date.now();\\n      "
      }
    ],
    "src/services/campaign/DependencySecurityMonitor.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 183,
        "column": 50,
        "context": "          result.updateReport.appliedUpdates.push(...securityUpdates);\\n        } catch (error) {\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 196,
        "column": 50,
        "context": "          result.updateReport.appliedUpdates.push(...safeUpdates);\\n        } catch (error) {\\n       "
      }
    ],
    "src/services/campaign/EmergencyRecoverySystem.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 71,
        "column": 77,
        "context": "nitiating emergency rollback with advanced options...');\\n\\n    try {\\n      // Create backup before re"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 206,
        "column": 60,
        "context": "/ console.log('üîÑ Step 1: Resetting git repository...');\\n      const resetCommit = options.resetToCo"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 222,
        "column": 61,
        "context": " console.log('üßπ Step 2: Clearing campaign metrics...');\\n      if (!options.preserveMetrics) {\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 229,
        "column": 53,
        "context": "   // // console.log('üóëÔ∏è Step 3: Managing stashes...');\\n      if (!options.preserveStashes) {\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 235,
        "column": 70,
        "context": "log('üèóÔ∏è Step 4: Resetting campaign infrastructure...');\\n      await this.resetCampaignInfrastructur"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 239,
        "column": 59,
        "context": "// console.log('‚úÖ Step 5: Validating nuclear reset...');\\n      if (options.validateAfterRecovery !=="
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 292,
        "column": 85,
        "context": "g selective recovery for ${targets.length} targets...`);\\n\\n    try {\\n      // If no stash specified, "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 400,
        "column": 59,
        "context": "// console.log('üîç Validating git repository state...');\\n      const gitValidation = await this.vali"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 403,
        "column": 27,
        "context": "tValidation.success) {\\n        result.errors.push(...gitValidation.errors);\\n        result.success ="
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 406,
        "column": 27,
        "context": "ccess = false;\\n      }\\n      result.warnings.push(...gitValidation.warnings);\\n\\n      // 2. Count res"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 412,
        "column": 51,
        "context": "     // // console.log('üîç Validating build system...');\\n      try {\\n        execSync('yarn build', "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 430,
        "column": 50,
        "context": "      // // console.log('üîç Validating test system...');\\n      try {\\n        execSync('yarn test --r"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 448,
        "column": 66,
        "context": "ole.log('üîç Checking for corruption after recovery...');\\n      const corruptionReport = await this.d"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 536,
        "column": 12,
        "context": " getRecoveryEvents(): SafetyEvent[] {\\n    return [...this.recoveryEvents]\\n  }\\n\\n  // Private helper m"
      }
    ],
    "src/services/campaign/EnhancedErrorFixerIntegration.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 56,
        "column": 71,
        "context": "('üöÄ Starting Enhanced TypeScript Error Fixer v3.0...');\\n\\n    // Prepare command arguments\\n    const"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 101,
        "column": 93,
        "context": "ocessing with ${options.batchSize} files per batch...`);\\n\\n    const results: FixerResult[] = [];\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 113,
        "column": 78,
        "context": "\udce6 Processing Batch ${batchNumber}/${maxIterations}...`),\\n\\n      // Check execution time limit\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 171,
        "column": 92,
        "context": "uild validation after ${totalFilesProcessed} files...`);\\n        const buildValid = await this.valid"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 238,
        "column": 50,
        "context": "      const fullArgs = [this.ENHANCED_FIXER_PATH, ...args],;\\n\\n      // // console.log(`üîß Executing:"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 276,
        "column": 12,
        "context": "\\n        } else {\\n          resolve({\\n            ...result;\\n            success: false,\\n           "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 278,
        "column": 21,
        "context": "\\n            success: false,\\n            errors: [...result.errors, `Process exited with code ${code"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 334,
        "column": 20,
        "context": "g);\\n    if (warningMatches) {\\n      warnings.push(...warningMatches);\\n    }\\n\\n    // Extract errors\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 340,
        "column": 18,
        "context": "n]*/g);\\n    if (errorMatches) {\\n      errors.push(...errorMatches);\\n    }\\n\\n    return {\\n      succes"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 359,
        "column": 44,
        "context": "try {\\n      // // console.log('üîç Validating build...');\\n\\n      const startTime = Date.now();\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 402,
        "column": 65,
        "context": "sole.log('üìä Fetching Enhanced Error Fixer metrics...');\\n\\n      const result = await this.runFixerCo"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 426,
        "column": 47,
        "context": " {\\n      // // console.log('üõ°Ô∏è  Validating safety...');\\n\\n      const result = await this.runFixerCo"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 456,
        "column": 80,
        "context": "ecuting Enhanced Error Fixer with safety protocols...');\\n\\n    // First, validate safety\\n    const sa"
      }
    ],
    "src/services/campaign/EnterpriseIntelligenceGenerator.ts": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`,\n          implementation: 'Add validation, error handling, and logging',\n          estimatedImpact: 60\n        }\n      ];\n\n      this.analytics.recommendations = recommendations;\n      this.updatePerformanceMetrics(startTime);\n      \n      return recommendations;\n    } catch (error) {\n      this.handleError('generateRecommendations', error),\n      return []\n    }\n  }\n\n  /**\n   * Demonstrate system capabilities\n   */\n  async demonstrateCapabilities(): Promise<Record<string, unknown>> {\n    if (!this.config.enableDemonstrations) {\n      return {};\n    }\n\n    const startTime = performance.now();\n    \n    try {\n      const demonstration = {\n        systemName: '${systemName}',\n        originalExport: '${originalName}',\n        capabilities: [\n${capabilities.map(cap => `          '${cap.name}': '${cap.description}",
        "line": 452,
        "column": 75,
        "context": "Enhance \\${originalName} with additional features\\`,\\n          implementation: 'Add validation, erro"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`).join(',\\n')},;\n        ],\n        sampleAnalysis: await this.analyzePatterns({ sample: true }),\n        sampleRecommendations: await this.generateRecommendations({ sample: true }),\n        performanceMetrics: this.analytics.performanceMetrics,\n        configuration: this.config\n      };\n\n      this.updatePerformanceMetrics(startTime);\n      return demonstration;\n    } catch (error) {\n      this.handleError('demonstrateCapabilities', error),\n      return {};\n    }\n  }\n\n${capabilities\n  .map(\n    cap => `  /**;\n   * ${cap.description}\n   */\n  private ${cap.name}",
        "line": 483,
        "column": 72,
        "context": " => `          '${cap.name}': '${cap.description}'`).join(',\\n')},;\\n        ],\\n        sampleAnalysi"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`,\n          implementation: 'Add validation, error handling, and logging',\n          estimatedImpact: 60\n        }\n      ];\n\n      this.analytics.recommendations = recommendations;\n      this.updatePerformanceMetrics(startTime);\n      \n      return recommendations;\n    } catch (error) {\n      this.handleError('generateRecommendations', error),\n      return []\n    }\n  }\n\n  /**\n   * Demonstrate system capabilities\n   */\n  async demonstrateCapabilities(): Promise<Record<string, unknown>> {\n    if (!this.config.enableDemonstrations) {\n      return {};\n    }\n\n    const startTime = performance.now();\n    \n    try {\n      const demonstration = {\n        systemName: '${systemName}',\n        originalExport: '${originalName}',\n        capabilities: [\n${capabilities.map(cap => `          '${cap.name}': '${cap.description}'`).join(',\\n')}",
        "line": 452,
        "column": 75,
        "context": "Enhance \\${originalName} with additional features\\`,\\n          implementation: 'Add validation, erro"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${capabilities.map(cap => `          '${",
        "line": 483,
        "column": 0,
        "context": "xport: '${originalName}',\\n        capabilities: [\\n${capabilities.map(cap => `          '${cap.name}'"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${capabilities\n  .map(\n    cap => `  /**;\n   * ${",
        "line": 499,
        "column": 0,
        "context": "apabilities', error),\\n      return {};\\n    }\\n  }\\n\\n${capabilities\\n  .map(\\n    cap => `  /**;\\n   * ${c"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`rec-\\${",
        "line": 433,
        "column": 15,
        "context": "ns: Recommendation[] = [\\n        {\\n          id: \\`rec-\\${Date.now()}-1\\`,\\n          type: 'optimiza"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Optimize \\${",
        "line": 436,
        "column": 24,
        "context": "      priority: 'medium',\\n          description: \\`Optimize \\${originalName} usage patterns\\`,\\n     "
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`rec-\\${",
        "line": 441,
        "column": 15,
        "context": "tedImpact: 75\\n        },\\n        {\\n          id: \\`rec-\\${Date.now()}-2\\`,\\n          type: 'integrat"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Integrate \\${",
        "line": 444,
        "column": 24,
        "context": "        priority: 'high',\\n          description: \\`Integrate \\${originalName} with monitoring system"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`rec-\\${",
        "line": 449,
        "column": 15,
        "context": "tedImpact: 85\\n        },\\n        {\\n          id: \\`rec-\\${Date.now()}-3\\`,\\n          type: 'enhancem"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Enhance \\${",
        "line": 452,
        "column": 24,
        "context": "         priority: 'low',\\n          description: \\`Enhance \\${originalName} with additional features"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`\\${",
        "line": 585,
        "column": 7,
        "context": " generate actionable insights\\n    return [\\n      \\`\\${originalName} shows potential for optimization"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`\\${systemName}.\\${",
        "line": 602,
        "column": 21,
        "context": "nfig.logLevel === 'error') {\\n      console.error(\\`\\${systemName}.\\${method} error:\\`, error);\\n    }"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 98,
        "column": 69,
        "context": "og('üß† Starting enterprise intelligence generation...');\\n\\n    const results: GenerationResult[] = []"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 184,
        "column": 30,
        "context": "genceCapability[] {\\n    const baseCapabilities = [...template.capabilities];\\n    const exportType = "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 369,
        "column": 6,
        "context": "cacheResults: true,\\n      logLevel: 'info',\\n      ...config\\n    };\\n\\n    this.analytics = {\\n      usa"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 514,
        "column": 13,
        "context": "nalytics(): ${systemName}Analytics {\\n    return { ...this.analytics };\\n  }\\n\\n  /**\\n   * Update config"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 521,
        "column": 20,
        "context": "${systemName}Config>): void {\\n    this.config = { ...this.config, ...newConfig };\\n  }\\n\\n  /**\\n   * Cl"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 521,
        "column": 36,
        "context": "fig>): void {\\n    this.config = { ...this.config, ...newConfig };\\n  }\\n\\n  /**\\n   * Clear cache\\n   */\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 978,
        "column": 6,
        "context": "',\\n      '// Add to your main application',\\n      ...results\\n        .slice(0, 5)\\n        .map(\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 988,
        "column": 6,
        "context": ",\\n      'const _intelligenceSystems = [',,;\\n      ...results.slice(0, 5).map(r => `  ${r.systemName."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 995,
        "column": 6,
        "context": "to your dashboard:',\\n      '```typescript',\\n      ...results\\n        .slice(0, 3)\\n        .map(r => "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1004,
        "column": 6,
        "context": "e systems via API:',\\n      '```typescript',\\n      ...results\\n        .slice(0, 3)\\n        .map(r => "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1012,
        "column": 6,
        "context": ",\\n      '## System Capabilities',\\n      '',\\n      ...results\\n        .slice(0, 10)\\n        .map(r =>"
      }
    ],
    "src/services/campaign/ExplicitAnyEliminationSystem.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 60,
        "column": 66,
        "context": "e.log('üéØ Starting Explicit-Any Elimination System...');\\n\\n    // Get baseline count\\n    const initia"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 117,
        "column": 75,
        "context": " Starting systematic explicit-any batch processing...`);\\n\\n    const results: ExplicitAnyResult[] = ["
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 132,
        "column": 91,
        "context": "Explicit-Any Batch ${batchNumber}/${maxIterations}...`),\\n\\n      // Check execution time limit\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 268,
        "column": 54,
        "context": "  const fullArgs = [this.EXPLICIT_ANY_FIXER_PATH, ...args],;\\n\\n      // // console.log(`üîß Executing:"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 346,
        "column": 20,
        "context": "g);\\n    if (warningMatches) {\\n      warnings.push(...warningMatches);\\n    }\\n\\n    // Extract errors\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 352,
        "column": 18,
        "context": "n]*/g);\\n    if (errorMatches) {\\n      errors.push(...errorMatches);\\n    }\\n\\n    return {\\n      succes"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 369,
        "column": 44,
        "context": "try {\\n      // // console.log('üîç Validating build...');\\n\\n      const startTime = Date.now();\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 425,
        "column": 10,
        "context": " 100\\n            : 0,\\n\\n        return {\\n          ...progress;\\n          totalExplicitAnyRemaining: "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 464,
        "column": 8,
        "context": "nst updatedProgress: CampaignProgress = {\\n        ...progress;\\n        totalExplicitAnyRemaining: cu"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 528,
        "column": 74,
        "context": "\udfaf Continuing 75.5% Explicit-Any Reduction Campaign...');\\n\\n    // Show current progress\\n    const pro"
      }
    ],
    "src/services/campaign/ExportTransformationEngine.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 130,
        "column": 6,
        "context": ",\\n      maxRetries: 3,\\n      dryRun: false,\\n      ...config\\n    };\\n\\n    this.analyzer = new UnusedEx"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 152,
        "column": 65,
        "context": "le.log('üöÄ Starting Export Transformation Campaign...\\n');\\n\\n    const startTime = Date.now();\\n\\n    t"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 158,
        "column": 61,
        "context": " console.log('üìä Phase 1: Analyzing unused exports...');\\n      const analysisResult = await this.per"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 162,
        "column": 68,
        "context": "e.log('üìã Phase 2: Planning transformation batches...');\\n      const batches = await this.planTransf"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 166,
        "column": 65,
        "context": "sole.log('üõ°Ô∏è  Phase 3: Preparing safety protocols...');\\n      await this.prepareSafetyProtocols();\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 170,
        "column": 68,
        "context": "e.log('‚ö° Phase 4: Executing transformation batches...');\\n      const results = await this.executeBat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 174,
        "column": 64,
        "context": "nsole.log('‚úÖ Phase 5: Final validation and cleanup...');\\n      await this.performFinalValidation();\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 235,
        "column": 17,
        "context": "ority.HIGH;\\n      'high',\\n    );\\n    batches.push(...highPriorityBatches);\\n\\n    // Create batches fo"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 243,
        "column": 17,
        "context": "y.MEDIUM;\\n      'medium',\\n    );\\n    batches.push(...mediumPriorityBatches);\\n\\n    // Create batches "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 251,
        "column": 17,
        "context": "riority.LOW;\\n      'low',\\n    ),\\n    batches.push(...lowPriorityBatches);\\n\\n    // // console.log(`‚úÖ "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 450,
        "column": 80,
        "context": "DRY RUN: Simulating intelligence system generation...');\\n        result.systemsGenerated = batch.tra"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 454,
        "column": 60,
        "context": " // console.log('‚ö° Generating intelligence systems...');\\n        const generationResults = await thi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 463,
        "column": 63,
        "context": " console.log('üîç Validating build after generation...');\\n        const validation = await this.valid"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 495,
        "column": 51,
        "context": "         // // console.log('üîÑ Attempting rollback...');\\n          // ‚úÖ Pattern MM-1: Safe method ca"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 533,
        "column": 61,
        "context": " console.log('üîç Performing final build validation...');\\n      const buildValidation = await this.va"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 541,
        "column": 62,
        "context": "/ console.log('üß™ Performing final test validation...');\\n        const testValidation = await this.v"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 640,
        "column": 80,
        "context": " failure detected, initiating emergency procedures...');\\n\\n    try {\\n      if (!this.config.dryRun) {"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 804,
        "column": 13,
        "context": " getConfig(): TransformationConfig {\\n    return { ...this.config };\\n  }\\n\\n  /**\\n   * Get transformati"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 811,
        "column": 12,
        "context": "rmationLog(): TransformationError[] {\\n    return [...this.transformationLog]\\n  }\\n\\n  /**\\n   * Clear t"
      }
    ],
    "src/services/campaign/FinalValidationSystem.ts": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`# Perfect Codebase Campaign - Certification;\n\n## Campaign Completion Certificate\n\n**Project**: WhatToEatNext\n**Campaign**: Perfect Codebase Campaign\n**Certification Level**: ${report.certificationStatus.certificationLevel}\n**Certification Date**: ${report.certificationStatus.certificationDate}\n**Validation Timestamp**: ${report.timestamp}\n\n## Achievement Summary\n\n‚úÖ **Zero TypeScript Errors**: ${report.campaignSummary.finalState.errors} errors (Target: 0)\n‚úÖ **Zero Linting Warnings**: ${report.campaignSummary.finalState.warnings} warnings (Target: 0)\n‚úÖ **Enterprise Intelligence**: ${report.campaignSummary.finalState.intelligence} systems (Target: 200+)\n‚úÖ **Performance Optimized**: ${report.performanceMetrics.buildTime.toFixed(1)}s build time (Target: <10s)\n\n## Campaign Improvements\n\n- **Error Elimination**: ${report.campaignSummary.improvements.errorReduction} TypeScript errors eliminated\n- **Warning Elimination**: ${report.campaignSummary.improvements.warningReduction} linting warnings eliminated\n- **Intelligence Creation**: ${report.campaignSummary.improvements.intelligenceIncrease} enterprise intelligence systems created\n\n## Performance Metrics\n\n- **Build Time**: ${report.performanceMetrics.buildTime.toFixed(1)} seconds\n- **Memory Usage**: ${report.performanceMetrics.memoryUsage.toFixed(1)} MB\n- **Bundle Size**: ${report.performanceMetrics.bundleSize}\n- **Test Coverage**: ${report.performanceMetrics.testCoverage}%\n\n## Certification Status\n\n- ‚úÖ **Perfect Codebase Achieved**: Zero errors, zero warnings\n- ‚úÖ **Enterprise Ready**: Optimal performance and intelligence systems\n- ‚úÖ **Production Deployment Ready**: Comprehensive validation passed\n\n## Validation Results\n\n${report.validationResults\n  .map(\n    result =>;\n      `### ${result.category}\\n**Status**: ${result.passed ? '‚úÖ PASSED' : '‚ùå FAILED'}",
        "line": 724,
        "column": 33,
        "context": " Promise<void> {\\n    const certificationContent = `# Perfect Codebase Campaign - Certification;\\n\\n## "
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`# Perfect Codebase Campaign - Certification;\n\n## Campaign Completion Certificate\n\n**Project**: WhatToEatNext\n**Campaign**: Perfect Codebase Campaign\n**Certification Level**: ${report.certificationStatus.certificationLevel}\n**Certification Date**: ${report.certificationStatus.certificationDate}\n**Validation Timestamp**: ${report.timestamp}\n\n## Achievement Summary\n\n‚úÖ **Zero TypeScript Errors**: ${report.campaignSummary.finalState.errors} errors (Target: 0)\n‚úÖ **Zero Linting Warnings**: ${report.campaignSummary.finalState.warnings} warnings (Target: 0)\n‚úÖ **Enterprise Intelligence**: ${report.campaignSummary.finalState.intelligence} systems (Target: 200+)\n‚úÖ **Performance Optimized**: ${report.performanceMetrics.buildTime.toFixed(1)}s build time (Target: <10s)\n\n## Campaign Improvements\n\n- **Error Elimination**: ${report.campaignSummary.improvements.errorReduction} TypeScript errors eliminated\n- **Warning Elimination**: ${report.campaignSummary.improvements.warningReduction} linting warnings eliminated\n- **Intelligence Creation**: ${report.campaignSummary.improvements.intelligenceIncrease} enterprise intelligence systems created\n\n## Performance Metrics\n\n- **Build Time**: ${report.performanceMetrics.buildTime.toFixed(1)} seconds\n- **Memory Usage**: ${report.performanceMetrics.memoryUsage.toFixed(1)} MB\n- **Bundle Size**: ${report.performanceMetrics.bundleSize}\n- **Test Coverage**: ${report.performanceMetrics.testCoverage}%\n\n## Certification Status\n\n- ‚úÖ **Perfect Codebase Achieved**: Zero errors, zero warnings\n- ‚úÖ **Enterprise Ready**: Optimal performance and intelligence systems\n- ‚úÖ **Production Deployment Ready**: Comprehensive validation passed\n\n## Validation Results\n\n${report.validationResults\n  .map(\n    result =>;\n      `### ${result.category}\\n**Status**: ${result.passed ? '‚úÖ PASSED' : '‚ùå FAILED'}\\n**Current**: ${result.current} | **Target**: ${result.target}\\n`,\n  )\n  .join('\\n')}",
        "line": 724,
        "column": 33,
        "context": " Promise<void> {\\n    const certificationContent = `# Perfect Codebase Campaign - Certification;\\n\\n## "
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${report.validationResults\n  .map(\n    result =>;\n      `### ${",
        "line": 762,
        "column": 0,
        "context": "hensive validation passed\\n\\n## Validation Results\\n\\n${report.validationResults\\n  .map(\\n    result =>;\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 150,
        "column": 54,
        "context": "// // console.log('üîß Validating TypeScript Errors...');\\n\\n    try {\\n      const output = execSync('y"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 166,
        "column": 14,
        "context": "nt} TypeScript compilation errors`,\\n              ...errorLines.slice(0, 10).map(line => `  ${line.t"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 167,
        "column": 14,
        "context": ".map(line => `  ${line.trim()}`),,;\\n              ...(errorLines.length > 10\\n                ? [`  ."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 168,
        "column": 22,
        "context": " ...(errorLines.length > 10\\n                ? [`  ... and ${errorLines.length - 10} more errors`]\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 205,
        "column": 10,
        "context": "rCount} TypeScript compilation errors`,\\n          ...errorLines.slice(0, 10).map((line: string) => `"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 206,
        "column": 10,
        "context": "((line: string) => `  ${line.trim()}`),\\n          ...(errorLines.length > 10 ? [`  ... and ${errorLi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 206,
        "column": 43,
        "context": "()}`),\\n          ...(errorLines.length > 10 ? [`  ... and ${errorLines.length - 10} more errors`] : "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 220,
        "column": 52,
        "context": "  // // console.log('‚ú® Validating Linting Warnings...');\\n\\n    try {\\n      const output = execSync('y"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 245,
        "column": 14,
        "context": "ment warnings: ${consoleWarnings}`,\\n              ...warningLines.slice(0, 5).map(line => `  ${line."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 246,
        "column": 14,
        "context": ".map(line => `  ${line.trim()}`),,;\\n              ...(warningLines.length > 5\\n                ? [`  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 247,
        "column": 22,
        "context": "...(warningLines.length > 5\\n                ? [`  ... and ${warningLines.length - 5} more warnings`]"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 283,
        "column": 10,
        "context": "ound ${warningCount} linting warnings`,\\n          ...warningLines.slice(0, 10).map((line: string) =>"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 295,
        "column": 68,
        "context": "log('üß† Validating Enterprise Intelligence Systems...');\\n\\n    try {\\n      const output = execSync('g"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 362,
        "column": 55,
        "context": "/ // console.log('‚ö° Validating Performance Targets...');\\n\\n    try {\\n      // Measure build time\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 415,
        "column": 12,
        "context": "lIssues = !performanceOk;\\n        ? [\\n            ...(buildTime >= this.BUILD_TIME_TARGET\\n          "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 418,
        "column": 12,
        "context": "e.toFixed(1)}s`]\\n              : []),\\n            ...(memoryUsage >= this.MEMORY_USAGE_TARGET\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 452,
        "column": 63,
        "context": "sole.log('üèóÔ∏è  Validating Build and Test Stability...');\\n\\n    let buildSuccess = false;\\n    let test"
      }
    ],
    "src/services/campaign/ImportCleanupSystem.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 132,
        "column": 27,
        "context": "portsInFile(filePath);\\n        unusedImports.push(...fileUnusedImports);\\n      } catch (error) {\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 459,
        "column": 6,
        "context": ".length - 1].index;\\n\\n    const newLines = [\\n      ...lines.slice(0, firstImportIndex),\\n      ...orga"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 460,
        "column": 6,
        "context": "\\n      ...lines.slice(0, firstImportIndex),\\n      ...organizedImports;\\n      ...lines.slice(lastImpo"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 461,
        "column": 6,
        "context": "rstImportIndex),\\n      ...organizedImports;\\n      ...lines.slice(lastImportIndex + 1)\\n    ];\\n\\n    fs"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 495,
        "column": 23,
        "context": "es.groupExternalImports) {\\n        organized.push(...externalTypeImports.map(imp => imp.line));\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 499,
        "column": 23,
        "context": "nd value imports\\n        }\\n        organized.push(...externalValueImports.map(imp => imp.line));\\n\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 511,
        "column": 23,
        "context": "es.groupInternalImports) {\\n        organized.push(...internalTypeImports.map(imp => imp.line));\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 515,
        "column": 23,
        "context": "nd value imports\\n        }\\n        organized.push(...internalValueImports.map(imp => imp.line));\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 520,
        "column": 23,
        "context": "es.groupExternalImports) {\\n        organized.push(...sortImports(externalImports).map(imp => imp.lin"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 527,
        "column": 23,
        "context": "es.groupInternalImports) {\\n        organized.push(...sortImports(internalImports).map(imp => imp.lin"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 629,
        "column": 23,
        "context": "eanupResult {\\n    return {\\n      filesProcessed: [...total.filesProcessed, ...batch.filesProcessed],"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 629,
        "column": 48,
        "context": "{\\n      filesProcessed: [...total.filesProcessed, ...batch.filesProcessed],\\n      unusedImportsRemov"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 634,
        "column": 15,
        "context": "ed && batch.buildValidationPassed,\\n      errors: [...total.errors, ...batch.errors],\\n      warnings:"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 634,
        "column": 32,
        "context": "ValidationPassed,\\n      errors: [...total.errors, ...batch.errors],\\n      warnings: [...total.warnin"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 635,
        "column": 17,
        "context": ".total.errors, ...batch.errors],\\n      warnings: [...total.warnings, ...batch.warnings]\\n    };\\n  }\\n}"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 635,
        "column": 36,
        "context": "atch.errors],\\n      warnings: [...total.warnings, ...batch.warnings]\\n    };\\n  }\\n}\\n\\n/**\\n * Default co"
      }
    ],
    "src/services/campaign/InfrastructurePreparation.ts": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`;\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Infrastructure Preparation Report</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        .header { background: #f0f0f0; padding: 20px; border-radius: 5px; }\n        .section { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }\n        .success { color: green; }\n        .warning { color: orange; }\n        .error { color: red; }\n        .score { font-size: 24px; font-weight: bold; }\n        .recommendations { background: #fff3cd; padding: 15px; border-radius: 5px; }\n    </style>\n</head>\n<body>\n    <div class='header'>;\n        <h1>üöÄ Infrastructure Preparation Report</h1>\n        <p>Generated: ${new Date().toLocaleString()}</p>\n        <div class='score ${status.overallReadiness ? 'success' : 'warning'}'>;\n            Readiness Score: ${status.readinessScore}%\n        </div>\n    </div>\n\n    <div class='section'>;\n        <h2>üìä Component Status</h2>\n        <ul>\n            <li class='${status.eslintConfig.fastConfig.functional ? 'success' : 'error'}'>;\n                Fast ESLint Config: ${status.eslintConfig.fastConfig.functional ? '‚úÖ Functional' : '‚ùå Issues'}\n            </li>\n            <li class='${status.eslintConfig.typeAwareConfig.functional ? 'success' : 'error'}'>;\n                Type-Aware ESLint Config: ${status.eslintConfig.typeAwareConfig.functional ? '‚úÖ Functional' : '‚ùå Issues'}\n            </li>\n            <li class='${status.backupSystem.rollbackMechanismTested ? 'success' : 'warning'}'>;\n                Backup System: ${status.backupSystem.rollbackMechanismTested ? '‚úÖ Ready' : '‚ö†Ô∏è Needs Testing'}\n            </li>\n            <li class='${status.buildMonitoring.buildStabilityChecks ? 'success' : 'error'}'>;\n                Build Monitoring: ${status.buildMonitoring.buildStabilityChecks ? '‚úÖ Stable' : '‚ùå Unstable'}\n            </li>\n            <li class='${status.batchProcessing.safetyValidationEnabled ? 'success' : 'warning'}'>;\n                Batch Processing: ${status.batchProcessing.safetyValidationEnabled ? '‚úÖ Configured' : '‚ö†Ô∏è Basic'}\n            </li>\n            <li class='${status.progressTracking.metricsCollectionEnabled ? 'success' : 'warning'}'>;\n                Progress Tracking: ${status.progressTracking.metricsCollectionEnabled ? '‚úÖ Enabled' : '‚ö†Ô∏è Limited'}\n            </li>\n        </ul>\n    </div>\n\n    ${\n      status.recommendations.length > 0\n        ? `\n    <div class='section recommendations'>;\n        <h2>üìã Recommendations</h2>\n        <ol>\n            ${status.recommendations.map(rec => `<li>${rec}</li>`).join('')}",
        "line": 861,
        "column": 23,
        "context": ", 2));\\n\\n    // HTML Report\\n    const htmlReport = `;\\n<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Infras"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`;\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Infrastructure Preparation Report</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        .header { background: #f0f0f0; padding: 20px; border-radius: 5px; }\n        .section { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }\n        .success { color: green; }\n        .warning { color: orange; }\n        .error { color: red; }\n        .score { font-size: 24px; font-weight: bold; }\n        .recommendations { background: #fff3cd; padding: 15px; border-radius: 5px; }\n    </style>\n</head>\n<body>\n    <div class='header'>;\n        <h1>üöÄ Infrastructure Preparation Report</h1>\n        <p>Generated: ${new Date().toLocaleString()}</p>\n        <div class='score ${status.overallReadiness ? 'success' : 'warning'}'>;\n            Readiness Score: ${status.readinessScore}%\n        </div>\n    </div>\n\n    <div class='section'>;\n        <h2>üìä Component Status</h2>\n        <ul>\n            <li class='${status.eslintConfig.fastConfig.functional ? 'success' : 'error'}'>;\n                Fast ESLint Config: ${status.eslintConfig.fastConfig.functional ? '‚úÖ Functional' : '‚ùå Issues'}\n            </li>\n            <li class='${status.eslintConfig.typeAwareConfig.functional ? 'success' : 'error'}'>;\n                Type-Aware ESLint Config: ${status.eslintConfig.typeAwareConfig.functional ? '‚úÖ Functional' : '‚ùå Issues'}\n            </li>\n            <li class='${status.backupSystem.rollbackMechanismTested ? 'success' : 'warning'}'>;\n                Backup System: ${status.backupSystem.rollbackMechanismTested ? '‚úÖ Ready' : '‚ö†Ô∏è Needs Testing'}\n            </li>\n            <li class='${status.buildMonitoring.buildStabilityChecks ? 'success' : 'error'}'>;\n                Build Monitoring: ${status.buildMonitoring.buildStabilityChecks ? '‚úÖ Stable' : '‚ùå Unstable'}\n            </li>\n            <li class='${status.batchProcessing.safetyValidationEnabled ? 'success' : 'warning'}'>;\n                Batch Processing: ${status.batchProcessing.safetyValidationEnabled ? '‚úÖ Configured' : '‚ö†Ô∏è Basic'}\n            </li>\n            <li class='${status.progressTracking.metricsCollectionEnabled ? 'success' : 'warning'}'>;\n                Progress Tracking: ${status.progressTracking.metricsCollectionEnabled ? '‚úÖ Enabled' : '‚ö†Ô∏è Limited'}\n            </li>\n        </ul>\n    </div>\n\n    ${\n      status.recommendations.length > 0\n        ? `\n    <div class='section recommendations'>;\n        <h2>üìã Recommendations</h2>\n        <ol>\n            ${status.recommendations.map(rec => `<li>${rec}</li>`).join('')}",
        "line": 861,
        "column": 23,
        "context": ", 2));\\n\\n    // HTML Report\\n    const htmlReport = `;\\n<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Infras"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n      status.recommendations.length > 0\n        ? `\n    <div class='section recommendations'>;\n        <h2>üìã Recommendations</h2>\n        <ol>\n            ${status.recommendations.map(rec => `<li>${",
        "line": 910,
        "column": 4,
        "context": "}\\n            </li>\\n        </ul>\\n    </div>\\n\\n    ${\\n      status.recommendations.length > 0\\n       "
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`üîç Validating batch of \\${",
        "line": 459,
        "column": 21,
        "context": "ction validateBatch(files) {\\n  // // console.log(\\`üîç Validating batch of \\${files.length} files...\\"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`   ‚ùå Batch validation failed: \\${",
        "line": 481,
        "column": 23,
        "context": " true;\\n  } catch (error) {\\n    // // console.log(\\`   ‚ùå Batch validation failed: \\${error.message}\\`"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`\nüìä Infrastructure Status Dashboard\n================================;\n\nüïí Last Updated: \\${latest.timestamp}\nüìà TypeScript Errors: \\${latest.typescript}\n‚ö†Ô∏è  ESLint Warnings: \\${latest.eslint}\nüèóÔ∏è Build Time: \\${latest.buildTime}ms\n‚ö° Processing Speed: \\${latest.processingSpeed} files/min\n‚úÖ Success Rate: \\${latest.successRate}%\n\nüìä Trend Analysis:\n- Total Metrics Collected: \\${metrics.length}\n- Data Collection Period: \\${",
        "line": 678,
        "column": 12,
        "context": "atest = metrics[metrics.length - 1];\\n\\n    return \\`\\nüìä Infrastructure Status Dashboard\\n============="
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`\\${",
        "line": 702,
        "column": 12,
        "context": "((last - first) / (1000 * 60 * 60));\\n\\n    return \\`\\${diffHours} hours\\`;\\n  }\\n}\\n\\nif (require.main =="
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 100,
        "column": 82,
        "context": "ng Infrastructure Preparation and Safety Protocols...\\n');\\n\\n    const status: InfrastructureStatus ="
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 141,
        "column": 71,
        "context": "('üîß Validating Dual ESLint Configuration Strategy...');\\n\\n    const fastConfigPath = join(this.proje"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 227,
        "column": 77,
        "context": "etting up Automated Backup and Rollback Mechanisms...');\\n\\n    const backupSystem: BackupSystem = {\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 291,
        "column": 87,
        "context": " Build Stability Monitoring and Checkpoint Systems...');\\n\\n    const buildMonitoring: BuildMonitoring"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 400,
        "column": 91,
        "context": "h Processing Infrastructure with Safety Validation...');\\n\\n    const batchProcessing: BatchProcessing"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 459,
        "column": 67,
        "context": "og(\\`üîç Validating batch of \\${files.length} files...\\`);\\n\\n  try {\\n    // Syntax check\\n    // // con"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 463,
        "column": 44,
        "context": "check\\n    // // console.log('   üìù Checking syntax...');\\n    execSync('yarn tsc --noEmit --skipLibCh"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 467,
        "column": 42,
        "context": "e check\\n    // // console.log('   üîç Type checking...');\\n    execSync('yarn tsc --noEmit', { stdio: "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 471,
        "column": 43,
        "context": "d test\\n    // // console.log('   üèóÔ∏è Testing build...');\\n    execSync('yarn build', { stdio: 'pipe' "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 475,
        "column": 35,
        "context": " // Lint check\\n    // // console.log('   ‚ú® Linting...');\\n    execSync('yarn lint:quick', { stdio: 'p"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 499,
        "column": 85,
        "context": "p Progress Tracking and Metrics Collection Systems...');\\n\\n    const progressTracking: ProgressTracki"
      }
    ],
    "src/services/campaign/LintingFormattingSystem.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 177,
        "column": 22,
        "context": "ESLintOutput(eslintOutput);\\n      violations.push(...parsedViolations);\\n    } catch (error) {\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 432,
        "column": 27,
        "context": "= content.split('\\n');\\n    const modifiedLines = [...lines];\\n    let fixesApplied = 0;\\n\\n    const { "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 598,
        "column": 23,
        "context": "ttingResult {\\n    return {\\n      filesProcessed: [...total.filesProcessed, ...batch.filesProcessed],"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 598,
        "column": 48,
        "context": "{\\n      filesProcessed: [...total.filesProcessed, ...batch.filesProcessed],\\n      lintingViolationsF"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 603,
        "column": 15,
        "context": "ed && batch.buildValidationPassed,\\n      errors: [...total.errors, ...batch.errors],\\n      warnings:"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 603,
        "column": 32,
        "context": "ValidationPassed,\\n      errors: [...total.errors, ...batch.errors],\\n      warnings: [...total.warnin"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 604,
        "column": 17,
        "context": ".total.errors, ...batch.errors],\\n      warnings: [...total.warnings, ...batch.warnings],\\n      viola"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 604,
        "column": 36,
        "context": "atch.errors],\\n      warnings: [...total.warnings, ...batch.warnings],\\n      violationBreakdown: {\\n  "
      }
    ],
    "src/services/campaign/LintingWarningAnalyzer.js": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`\n# Linting Warning Analysis Report\nGenerated: ${new Date().toISOString()}\n\n## Summary\n- **Total Warnings**: ${distribution.total}\n- **Explicit Any**: ${distribution.explicitAny.count} warnings in ${distribution.explicitAny.files.length} files\n- **Unused Variables**: ${distribution.unusedVariables.count} warnings in ${distribution.unusedVariables.files.length} files  \n- **Console Statements**: ${distribution.consoleStatements.count} warnings in ${distribution.consoleStatements.files.length} files\n- **Other**: ${distribution.other.count} warnings in ${distribution.other.files.length} files\n\n## Priority Distribution\n- **High Priority Files**: ${prioritizedFiles.highPriority.length} files\n- **Medium Priority Files**: ${prioritizedFiles.mediumPriority.length} files\n- **Low Priority Files**: ${prioritizedFiles.lowPriority.length} files\n\n## Recommendations\n${recommendations.map(rec => `- ${rec}`).join('\\n')}",
        "line": 329,
        "column": 19,
        "context": "s, recommendations } = result;\\n    const report = `\\n# Linting Warning Analysis Report\\nGenerated: ${n"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`\n# Linting Warning Analysis Report\nGenerated: ${new Date().toISOString()}\n\n## Summary\n- **Total Warnings**: ${distribution.total}\n- **Explicit Any**: ${distribution.explicitAny.count} warnings in ${distribution.explicitAny.files.length} files\n- **Unused Variables**: ${distribution.unusedVariables.count} warnings in ${distribution.unusedVariables.files.length} files  \n- **Console Statements**: ${distribution.consoleStatements.count} warnings in ${distribution.consoleStatements.files.length} files\n- **Other**: ${distribution.other.count} warnings in ${distribution.other.files.length} files\n\n## Priority Distribution\n- **High Priority Files**: ${prioritizedFiles.highPriority.length} files\n- **Medium Priority Files**: ${prioritizedFiles.mediumPriority.length} files\n- **Low Priority Files**: ${prioritizedFiles.lowPriority.length} files\n\n## Recommendations\n${recommendations.map(rec => `- ${rec}`).join('\\n')}",
        "line": 329,
        "column": 19,
        "context": "s, recommendations } = result;\\n    const report = `\\n# Linting Warning Analysis Report\\nGenerated: ${n"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${recommendations.map(rec => `- ${",
        "line": 346,
        "column": 0,
        "context": "les.lowPriority.length} files\\n\\n## Recommendations\\n${recommendations.map(rec => `- ${rec}`).join('\\n'"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 30,
        "column": 46,
        "context": ") {\\n    console.log('üîç Analyzing linting warnings...');\\n    try {\\n      // Try to get linting outpu"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 63,
        "column": 22,
        "context": "FileContent(file, content);\\n        warnings.push(...fileWarnings);\\n      } catch (error) {\\n        "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 82,
        "column": 19,
        "context": "try.name !== 'node_modules') {\\n        files.push(...this.getAllSourceFiles(fullPath));\\n      } else"
      }
    ],
    "src/services/campaign/LintingWarningAnalyzer.ts": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`;\n# Linting Warning Analysis Report\nGenerated: ${new Date().toISOString()}\n\n## Summary\n- **Total Warnings**: ${distribution.total}\n- **Explicit Any**: ${distribution.explicitAny.count} warnings in ${distribution.explicitAny.files.length} files\n- **Unused Variables**: ${distribution.unusedVariables.count} warnings in ${distribution.unusedVariables.files.length} files  \n- **Console Statements**: ${distribution.consoleStatements.count} warnings in ${distribution.consoleStatements.files.length} files\n- **Other**: ${distribution.other.count} warnings in ${distribution.other.files.length} files\n\n## Priority Distribution\n- **High Priority Files**: ${prioritizedFiles.highPriority.length} files\n- **Medium Priority Files**: ${prioritizedFiles.mediumPriority.length} files\n- **Low Priority Files**: ${prioritizedFiles.lowPriority.length} files\n\n## Recommendations\n${recommendations.map(rec => `- ${rec}`).join('\\n')}",
        "line": 436,
        "column": 19,
        "context": ", recommendations } = result;\\n\\n    const report = `;\\n# Linting Warning Analysis Report\\nGenerated: ${"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`;\n# Linting Warning Analysis Report\nGenerated: ${new Date().toISOString()}\n\n## Summary\n- **Total Warnings**: ${distribution.total}\n- **Explicit Any**: ${distribution.explicitAny.count} warnings in ${distribution.explicitAny.files.length} files\n- **Unused Variables**: ${distribution.unusedVariables.count} warnings in ${distribution.unusedVariables.files.length} files  \n- **Console Statements**: ${distribution.consoleStatements.count} warnings in ${distribution.consoleStatements.files.length} files\n- **Other**: ${distribution.other.count} warnings in ${distribution.other.files.length} files\n\n## Priority Distribution\n- **High Priority Files**: ${prioritizedFiles.highPriority.length} files\n- **Medium Priority Files**: ${prioritizedFiles.mediumPriority.length} files\n- **Low Priority Files**: ${prioritizedFiles.lowPriority.length} files\n\n## Recommendations\n${recommendations.map(rec => `- ${rec}`).join('\\n')}",
        "line": 436,
        "column": 19,
        "context": ", recommendations } = result;\\n\\n    const report = `;\\n# Linting Warning Analysis Report\\nGenerated: ${"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${recommendations.map(rec => `- ${",
        "line": 453,
        "column": 0,
        "context": "les.lowPriority.length} files\\n\\n## Recommendations\\n${recommendations.map(rec => `- ${rec}`).join('\\n'"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 80,
        "column": 52,
        "context": "  // // console.log('üîç Analyzing linting warnings...');\\n\\n    try {\\n      // Try to get linting outp"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 119,
        "column": 22,
        "context": "ileContent(file, content),;\\n        warnings.push(...fileWarnings);\\n      } catch (error) {\\n        "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 144,
        "column": 19,
        "context": "try.name !== 'node_modules') {\\n        files.push(...this.getAllSourceFiles(fullPath));\\n      } else"
      }
    ],
    "src/services/campaign/MakefileIntegration.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 114,
        "column": 48,
        "context": "[\\n        '@echo 'üîç Validating Phase 1 completion...'';\\n        '@ERRORS=$$(yarn tsc --noEmit --ski"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 130,
        "column": 48,
        "context": "[\\n        '@echo 'üîç Validating Phase 2 completion...'';\\n        '@WARNINGS=$$(yarn lint 2>&1 | grep"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 146,
        "column": 48,
        "context": "[\\n        '@echo 'üîç Validating Phase 3 completion...'';\\n        '@SYSTEMS=$$(grep -r 'INTELLIGENCE_"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 162,
        "column": 48,
        "context": "[\\n        '@echo 'üîç Validating Phase 4 completion...'';\\n        '@BUILD_TIME=$$(time yarn build 2>&"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 204,
        "column": 50,
        "context": "        '@echo 'üéØ Determining next campaign phase...'';\\n        '@if ! make campaign-validate-phase"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 279,
        "column": 43,
        "context": "o ''',\\n        '@echo '1. Checking for git stashes...'';\\n        '@git stash list | head -5',\\n      "
      }
    ],
    "src/services/campaign/MetricsCollectionSystem.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 121,
        "column": 53,
        "context": " // // console.log('üìä Collecting metrics snapshot...');\\n\\n    const metrics = await this.collectDeta"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 590,
        "column": 12,
        "context": "  getSnapshots(): MetricsSnapshot[] {\\n    return [...this.snapshots]\\n  }\\n\\n  getLatestSnapshot(): Met"
      }
    ],
    "src/services/campaign/MilestoneValidationSystem.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 768,
        "column": 17,
        "context": " failedMilestones.forEach(m => {\\n      steps.push(...m.recommendations);\\n    });\\n\\n    return [...new"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 771,
        "column": 12,
        "context": ".push(...m.recommendations);\\n    });\\n\\n    return [...new Set(steps)]; // Remove duplicates\\n  }\\n\\n  pr"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 782,
        "column": 17,
        "context": " failedMilestones.forEach(m => {\\n      steps.push(...m.recommendations);\\n    });\\n\\n    return [...new"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 785,
        "column": 12,
        "context": ".push(...m.recommendations);\\n    });\\n\\n    return [...new Set(steps)];\\n  }\\n\\n  private generatePhase3N"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 796,
        "column": 17,
        "context": " failedMilestones.forEach(m => {\\n      steps.push(...m.recommendations);\\n    });\\n\\n    return [...new"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 799,
        "column": 12,
        "context": ".push(...m.recommendations);\\n    });\\n\\n    return [...new Set(steps)];\\n  }\\n\\n  private generatePhase4N"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 810,
        "column": 17,
        "context": " failedMilestones.forEach(m => {\\n      steps.push(...m.recommendations);\\n    });\\n\\n    return [...new"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 813,
        "column": 12,
        "context": ".push(...m.recommendations);\\n    });\\n\\n    return [...new Set(steps)];\\n  }\\n\\n  /**\\n   * Validate all p"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 820,
        "column": 67,
        "context": ".log('üîç Running comprehensive campaign validation...');\\n\\n    const results = await Promise.all([\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 845,
        "column": 12,
        "context": "ionHistory(): MilestoneValidation[] {\\n    return [...this.validationHistory]\\n  }\\n\\n  /**\\n   * Export "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 709,
        "column": 22,
        "context": " const bundleSize: number =\\n      Number(((metrics as unknown as any).buildMetrics ).bundleSize) || "
      }
    ],
    "src/services/campaign/PerformanceMonitoringSystem.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 83,
        "column": 48,
        "context": "{\\n      // // console.log('üìä Measuring build time...');\\n\\n      // Use time command to measure build"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 478,
        "column": 15,
        "context": "estamp: new Date(),\\n      metrics,\\n      alerts: [...this.alerts],\\n      regressionDetected,\\n      o"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 546,
        "column": 12,
        "context": "CurrentAlerts(): PerformanceAlert[] {\\n    return [...this.alerts]\\n  }\\n\\n  /**\\n   * Clear all alerts\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 561,
        "column": 12,
        "context": "anceHistory(): PerformanceMetrics[] {\\n    return [...this.performanceHistory]\\n  }\\n}\\n"
      }
    ],
    "src/services/campaign/ProgressReportingSystem.ts": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Perfect Codebase Campaign Report</title>\n    <style>\n        body { font-family: Arial, sans-serif, margin: 40px, }\n        .header { background: #f5f5f5, padding: 20px, border-radius: 8px, }\n        .status-${report.overallStatus.toLowerCase()} { color: ${this.getStatusColor(report.overallStatus)}; }\n        .progress-bar { background: #e0e0e0, height: 20px, border-radius: 10px, overflow: hidden, }\n        .progress-fill { background: #4caf50, height: 100%, transition: width 0.3s, }\n        .phase { margin: 20px 0, padding: 15px, border: 1px solid #ddd, border-radius: 5px, }\n        .achievement { background: #e8f5e8, padding: 10px, margin: 5px 0, border-radius: 5px, }\n        .issue { background: #ffe8e8, padding: 10px, margin: 5px 0, border-radius: 5px, }\n    </style>\n</head>\n<body>\n    <div class='header'>;\n        <h1>Perfect Codebase Campaign Report</h1>\n        <p>Generated: ${report.generatedAt.toLocaleString()}</p>\n        <p class='status-${report.overallStatus.toLowerCase()}'>Status: ${report.overallStatus}</p>;\n        <div class='progress-bar'>;\n            <div class='progress-fill' style='width: ${report.overallProgress}%'></div>;\n        </div>\n        <p>Progress: ${report.overallProgress}%</p>\n    </div>\n\n    <h2>Executive Summary</h2>\n    <p>${report.executiveSummary}</p>\n\n    <h2>Phase Progress</h2>\n    ${report.phases\n      .map(\n        phase => `;\n        <div class='phase'>;\n            <h3>${phase.phaseName}</h3>\n            <p>Status: ${phase.status}",
        "line": 651,
        "column": 11,
        "context": "port: CampaignSummaryReport): string {\\n    return `\\n<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Perfect"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`,\n      )\n      .join('')}\n\n    <h2>Key Achievements</h2>\n    ${report.keyAchievements\n      .map(\n        achievement => `;\n        <div class='achievement'>;\n            <h4>${achievement.title}</h4>\n            <p>${achievement.description}",
        "line": 691,
        "column": 4,
        "context": "ckers.join(', ') : 'None'}</p>\\n        </div>\\n    `,\\n      )\\n      .join('')}\\n\\n    <h2>Key Achieveme"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`,\n      )\n      .join('')}\n\n    <h2>Critical Issues</h2>\n    ${report.criticalIssues\n      .map(\n        issue => `;\n        <div class='issue'>;\n            <h4>${issue.title}</h4>\n            <p>${issue.description}",
        "line": 704,
        "column": 4,
        "context": "act: ${achievement.impact}</p>\\n        </div>\\n    `,\\n      )\\n      .join('')}\\n\\n    <h2>Critical Issu"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`# Perfect Codebase Campaign Report\n\n**Generated:** ${report.generatedAt.toISOString()}\n**Status:** ${report.overallStatus}\n**Progress:** ${report.overallProgress}%\n\n## Executive Summary\n\n${report.executiveSummary}\n\n## Phase Progress\n\n${report.phases\n  .map(\n    phase => `;\n### ${phase.phaseName}\n- **Status:** ${phase.status}",
        "line": 725,
        "column": 11,
        "context": "port: CampaignSummaryReport): string {\\n    return `# Perfect Codebase Campaign Report\\n\\n**Generated:*"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`,\n  )\n  .join('')}\n\n## Key Achievements\n\n${report.keyAchievements\n  .map(\n    achievement => `;\n### ${achievement.title}\n${achievement.description}",
        "line": 744,
        "column": 0,
        "context": ".length > 0 ? phase.blockers.join(', ') : 'None'}\\n`,\\n  )\\n  .join('')}\\n\\n## Key Achievements\\n\\n${report"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`,\n  )\n  .join('')}\n\n## Critical Issues\n\n${report.criticalIssues\n  .map(\n    issue => `;\n### ${issue.title}\n${issue.description}",
        "line": 757,
        "column": 0,
        "context": "evement.impact}\\n- **Phase:** ${achievement.phase}\\n`,\\n  )\\n  .join('')}\\n\\n## Critical Issues\\n\\n${report."
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Perfect Codebase Campaign Report</title>\n    <style>\n        body { font-family: Arial, sans-serif, margin: 40px, }\n        .header { background: #f5f5f5, padding: 20px, border-radius: 8px, }\n        .status-${report.overallStatus.toLowerCase()} { color: ${this.getStatusColor(report.overallStatus)}; }\n        .progress-bar { background: #e0e0e0, height: 20px, border-radius: 10px, overflow: hidden, }\n        .progress-fill { background: #4caf50, height: 100%, transition: width 0.3s, }\n        .phase { margin: 20px 0, padding: 15px, border: 1px solid #ddd, border-radius: 5px, }\n        .achievement { background: #e8f5e8, padding: 10px, margin: 5px 0, border-radius: 5px, }\n        .issue { background: #ffe8e8, padding: 10px, margin: 5px 0, border-radius: 5px, }\n    </style>\n</head>\n<body>\n    <div class='header'>;\n        <h1>Perfect Codebase Campaign Report</h1>\n        <p>Generated: ${report.generatedAt.toLocaleString()}</p>\n        <p class='status-${report.overallStatus.toLowerCase()}'>Status: ${report.overallStatus}</p>;\n        <div class='progress-bar'>;\n            <div class='progress-fill' style='width: ${report.overallProgress}%'></div>;\n        </div>\n        <p>Progress: ${report.overallProgress}%</p>\n    </div>\n\n    <h2>Executive Summary</h2>\n    <p>${report.executiveSummary}</p>\n\n    <h2>Phase Progress</h2>\n    ${report.phases\n      .map(\n        phase => `;\n        <div class='phase'>;\n            <h3>${phase.phaseName}</h3>\n            <p>Status: ${phase.status}</p>\n            <p>Progress: ${phase.progress}%</p>\n            <p>Blockers: ${phase.blockers.length > 0 ? phase.blockers.join(', ') : 'None'}</p>\n        </div>\n    `,\n      )\n      .join('')}",
        "line": 651,
        "column": 11,
        "context": "port: CampaignSummaryReport): string {\\n    return `\\n<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Perfect"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`,\n      )\n      .join('')}\n\n    <h2>Critical Issues</h2>\n    ${report.criticalIssues\n      .map(\n        issue => `;\n        <div class='issue'>;\n            <h4>${issue.title}</h4>\n            <p>${issue.description}</p>\n            <p>Severity: ${issue.severity}</p>\n        </div>\n    `,\n      )\n      .join('')}",
        "line": 704,
        "column": 4,
        "context": "act: ${achievement.impact}</p>\\n        </div>\\n    `,\\n      )\\n      .join('')}\\n\\n    <h2>Critical Issu"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`# Perfect Codebase Campaign Report\n\n**Generated:** ${report.generatedAt.toISOString()}\n**Status:** ${report.overallStatus}\n**Progress:** ${report.overallProgress}%\n\n## Executive Summary\n\n${report.executiveSummary}\n\n## Phase Progress\n\n${report.phases\n  .map(\n    phase => `;\n### ${phase.phaseName}\n- **Status:** ${phase.status}\n- **Progress:** ${phase.progress}%\n- **Blockers:** ${phase.blockers.length > 0 ? phase.blockers.join(', ') : 'None'}\n`,\n  )\n  .join('')}",
        "line": 725,
        "column": 11,
        "context": "port: CampaignSummaryReport): string {\\n    return `# Perfect Codebase Campaign Report\\n\\n**Generated:*"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`,\n  )\n  .join('')}\n\n## Critical Issues\n\n${report.criticalIssues\n  .map(\n    issue => `;\n### ${issue.title}\n${issue.description}\n- **Severity:** ${issue.severity}\n- **Phase:** ${issue.phase}\n`,\n  )\n  .join('')}",
        "line": 757,
        "column": 0,
        "context": "evement.impact}\\n- **Phase:** ${achievement.phase}\\n`,\\n  )\\n  .join('')}\\n\\n## Critical Issues\\n\\n${report."
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${report.phases\n      .map(\n        phase => `;\n        <div class='phase'>;\n            <h3>${",
        "line": 682,
        "column": 4,
        "context": "tiveSummary}</p>\\n\\n    <h2>Phase Progress</h2>\\n    ${report.phases\\n      .map(\\n        phase => `;\\n  "
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${report.keyAchievements\n      .map(\n        achievement => `;\n        <div class='achievement'>;\n            <h4>${",
        "line": 696,
        "column": 4,
        "context": "    .join('')}\\n\\n    <h2>Key Achievements</h2>\\n    ${report.keyAchievements\\n      .map(\\n        achie"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${report.criticalIssues\n      .map(\n        issue => `;\n        <div class='issue'>;\n            <h4>${",
        "line": 709,
        "column": 4,
        "context": "     .join('')}\\n\\n    <h2>Critical Issues</h2>\\n    ${report.criticalIssues\\n      .map(\\n        issue "
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${report.phases\n  .map(\n    phase => `;\n### ${",
        "line": 737,
        "column": 0,
        "context": "y\\n\\n${report.executiveSummary}\\n\\n## Phase Progress\\n\\n${report.phases\\n  .map(\\n    phase => `;\\n### ${phas"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${report.keyAchievements\n  .map(\n    achievement => `;\n### ${",
        "line": 750,
        "column": 0,
        "context": "'None'}\\n`,\\n  )\\n  .join('')}\\n\\n## Key Achievements\\n\\n${report.keyAchievements\\n  .map(\\n    achievement ="
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${report.criticalIssues\n  .map(\n    issue => `;\n### ${",
        "line": 763,
        "column": 0,
        "context": "t.phase}\\n`,\\n  )\\n  .join('')}\\n\\n## Critical Issues\\n\\n${report.criticalIssues\\n  .map(\\n    issue => `;\\n##"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 187,
        "column": 74,
        "context": "\udcca Generating comprehensive campaign summary report...');\\n\\n    const [currentMetrics, phaseValidation"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 233,
        "column": 75,
        "context": " Generating phase completion report for ${phaseId}...`);\\n\\n    const currentMetrics = await this.metr"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 281,
        "column": 55,
        "context": "/ // console.log('üìä Generating visualization data...');\\n\\n    const snapshots = this.metricsCollecto"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 792,
        "column": 21,
        "context": "blockers.join(', ')\\n    ]),\\n\\n    return [headers, ...rows].map(row => row.join(',')).join('\\n'),;\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 879,
        "column": 12,
        "context": "tHistory(): CampaignSummaryReport[] {\\n    return [...this.reportHistory]\\n  }\\n\\n  /**\\n   * Clear repor"
      }
    ],
    "src/services/campaign/ProgressTracker.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 471,
        "column": 12,
        "context": "MetricsHistory(): ProgressMetrics[] {\\n    return [...this.metricsHistory]\\n  }\\n\\n  /**\\n   * Get metric"
      }
    ],
    "src/services/campaign/SafetyProtocol.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 213,
        "column": 81,
        "context": "zing ${files.length} files for corruption patterns...`);\\n\\n    for (const filePath of files) {\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 227,
        "column": 34,
        "context": "push(filePath);\\n          corruptionPatterns.push(...fileCorruption.patterns);\\n\\n          // // cons"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 299,
        "column": 85,
        "context": " import/export corruption in ${files.length} files...`);\\n\\n    for (const filePath of files) {\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 312,
        "column": 34,
        "context": "push(filePath);\\n          corruptionPatterns.push(...importExportCorruption.patterns);\\n\\n          if"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 349,
        "column": 92,
        "context": "me corruption monitoring for ${files.length} files...`);\\n\\n    const monitoringInterval = setInterval"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 374,
        "column": 91,
        "context": "corruption detected! Triggering emergency rollback...`);\\n              clearInterval(monitoringInter"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 411,
        "column": 94,
        "context": "with TypeScript compiler for ${files.length} files...`);\\n\\n    try {\\n      // Run TypeScript compiler"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 641,
        "column": 48,
        "context": "=\\n      timestamps.length > 0 ? new Date(Math.min(...timestamps.map(t => t.getTime()))) : undefined;"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 643,
        "column": 48,
        "context": "=\\n      timestamps.length > 0 ? new Date(Math.max(...timestamps.map(t => t.getTime()))) : undefined;"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 657,
        "column": 12,
        "context": "\\n  getSafetyEvents(): SafetyEvent[] {\\n    return [...this.safetyEvents]\\n  }\\n\\n  // Private helper met"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 967,
        "column": 12,
        "context": "  };\\n          this.stashes.set(id, {\\n            ...stash;\\n            timestamp: new Date(stash.ti"
      }
    ],
    "src/services/campaign/ScriptIntegrationSystem.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 165,
        "column": 28,
        "context": "options with defaults\\n    const mergedOptions = { ...config.defaultOptions, ...options };\\n\\n    // Va"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 165,
        "column": 54,
        "context": "const mergedOptions = { ...config.defaultOptions, ...options };\\n\\n    // Validate safety requirements"
      }
    ],
    "src/services/campaign/TerminalFreezePreventionSystem.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 43,
        "column": 20,
        "context": "{} as ProcessMonitorConfig) {\\n    this.config = { ...this.DEFAULT_CONFIG, ...config };\\n    this.star"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 43,
        "column": 44,
        "context": "ig) {\\n    this.config = { ...this.DEFAULT_CONFIG, ...config };\\n    this.startMonitoring();\\n  }\\n\\n  /*"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 52,
        "column": 6,
        "context": "Promise<string> {\\n    const safeOptions = {\\n      ...options;\\n      timeout: options.timeout || this"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 85,
        "column": 8,
        "context": "     const child = spawn(command, args, {\\n        ...options;\\n        stdio: ['pipe', 'pipe', 'pipe'"
      }
    ],
    "src/services/campaign/TypeScriptErrorAnalyzer.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 75,
        "column": 53,
        "context": " // // console.log('üîç Analyzing TypeScript errors...');\\n\\n    const errors = await this.getTypeScrip"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 240,
        "column": 29,
        "context": "ate priority ranking\\n    const priorityRanking = [...errors].sort((a, b) => b.priority - a.priority)"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 248,
        "column": 21,
        "context": "rorCount: fileErrors.length,\\n        categories: [...new Set(fileErrors.map(e => e.category))],,;\\n  "
      }
    ],
    "src/services/campaign/TypeScriptErrorResolutionCampaign.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 182,
        "column": 81,
        "context": "zing unused variables with enterprise intelligence...');\\n\\n    const unusedVariables: UnusedVariableI"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 225,
        "column": 81,
        "context": "ing enterprise-intelligent unused variable cleanup...');\\n\\n    const unusedVariables = await this.ana"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 94,
        "column": 29,
        "context": "e system\\n    await (\\n      this.intelligenceSystem as unknown as {\\n        initialize: (config: Reco"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 105,
        "column": 25,
        "context": "ty protocols\\n    await (\\n      this.safetyProtocol as unknown as {\\n        initialize: (config: Reco"
      }
    ],
    "src/services/campaign/UnusedExportAnalyzer.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 68,
        "column": 51,
        "context": "   console.log('üîç Starting unused export analysis...');\\n    const files = await this.getAllSourceFi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 99,
        "column": 17,
        "context": "       absolute: true,\\n      });\\n      files.push(...matches);\\n    }\\n    return [...new Set(files)];"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 101,
        "column": 12,
        "context": ";\\n      files.push(...matches);\\n    }\\n    return [...new Set(files)]; // Remove duplicates\\n  }\\n  /**"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 132,
        "column": 10,
        "context": "t === 0) {\\n        unusedExports.push({\\n          ...exportInfo,\\n          usageCount,\\n          com"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 449,
        "column": 6,
        "context": " priority level\\n    const topCandidates = [\\n      ...analysis.highPriorityFiles.slice(0, 5),\\n      ."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 450,
        "column": 6,
        "context": " ...analysis.highPriorityFiles.slice(0, 5),\\n      ...analysis.mediumPriorityFiles.slice(0, 5),\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 451,
        "column": 6,
        "context": "..analysis.mediumPriorityFiles.slice(0, 5),\\n      ...analysis.lowPriorityFiles.slice(0, 5),\\n    ];\\n "
      }
    ],
    "src/services/campaign/UnusedExportAnalyzer.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 122,
        "column": 57,
        "context": "// console.log('üîç Starting unused export analysis...');\\n\\n    const files = await this.getAllSourceF"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 158,
        "column": 17,
        "context": "        absolute: true\\n      });\\n      files.push(...matches);\\n    }\\n\\n    return [...new Set(files)]"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 161,
        "column": 12,
        "context": "\\n      files.push(...matches);\\n    }\\n\\n    return [...new Set(files)]; // Remove duplicates\\n  }\\n\\n  /*"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 196,
        "column": 10,
        "context": "t === 0) {\\n        unusedExports.push({\\n          ...exportInfo;\\n          usageCount,\\n          com"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 575,
        "column": 6,
        "context": " priority level\\n    const topCandidates = [\\n      ...analysis.highPriorityFiles.slice(0, 5),\\n      ."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 576,
        "column": 6,
        "context": " ...analysis.highPriorityFiles.slice(0, 5),\\n      ...analysis.mediumPriorityFiles.slice(0, 5),\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 577,
        "column": 6,
        "context": "..analysis.mediumPriorityFiles.slice(0, 5),\\n      ...analysis.lowPriorityFiles.slice(0, 5)\\n    ];\\n\\n "
      }
    ],
    "src/services/campaign/UnusedVariablesCleanupSystem.ts": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`\n# Unused Variables Cleanup Report\nGenerated: ${new Date().toISOString()}\n\n## Execution Summary\n- **Success**: ${result.success ? '‚úÖ' : '‚ùå'}\n- **Files Processed**: ${result.filesProcessed}\n- **Variables Removed**: ${result.variablesRemoved}\n- **Variables Prefixed**: ${result.variablesPrefixed}\n- **Build Time**: ${result.buildTime}ms\n- **Safety Score**: ${result.safetyScore}\n\n## Configuration\n- **Max Files**: ${this.config.maxFiles}\n- **Auto Fix**: ${this.config.autoFix}\n- **Dry Run**: ${this.config.dryRun}\n- **Build Validation**: ${this.config.buildValidation}\n- **Git Stash**: ${this.config.enableGitStash}\n\n## Issues\n${result.errors.length > 0 ? '### Errors\\n' + result.errors.map(e => `- ${e}`).join('\\n') : 'No errors'}",
        "line": 440,
        "column": 11,
        "context": "sult: UnusedVariablesResult): string {\\n    return `\\n# Unused Variables Cleanup Report\\nGenerated: ${n"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`\n# Unused Variables Batch Cleanup Report\nGenerated: ${new Date().toISOString()}\n\n## Batch Summary\n- **Total Batches**: ${result.totalBatches}\n- **Successful Batches**: ${result.successfulBatches}\n- **Failed Batches**: ${result.failedBatches}\n- **Success Rate**: ${((result.successfulBatches / result.totalBatches) * 100).toFixed(1)}%\n\n## Processing Summary\n- **Total Files Processed**: ${result.totalFilesProcessed}\n- **Total Variables Processed**: ${result.totalVariablesProcessed}\n- **Average Build Time**: ${result.averageBuildTime.toFixed(0)}ms\n- **Overall Safety Score**: ${result.overallSafetyScore.toFixed(1)}\n\n## Batch Configuration\n- **Batch Size**: ${this.config.batchSize} files per batch\n- **Auto Fix**: ${this.config.autoFix}\n- **Build Validation**: ${this.config.buildValidation}\n- **Safety Protocols**: ${this.config.validateSafety}\n\n## Issues\n${result.errors.length > 0 ? '### Batch Errors\\n' + result.errors.map(e => `- ${e}`).join('\\n') : 'No batch errors'}",
        "line": 476,
        "column": 11,
        "context": "sult: BatchProcessingResult): string {\\n    return `\\n# Unused Variables Batch Cleanup Report\\nGenerate"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`\n# Unused Variables Cleanup Report\nGenerated: ${new Date().toISOString()}\n\n## Execution Summary\n- **Success**: ${result.success ? '‚úÖ' : '‚ùå'}\n- **Files Processed**: ${result.filesProcessed}\n- **Variables Removed**: ${result.variablesRemoved}\n- **Variables Prefixed**: ${result.variablesPrefixed}\n- **Build Time**: ${result.buildTime}ms\n- **Safety Score**: ${result.safetyScore}\n\n## Configuration\n- **Max Files**: ${this.config.maxFiles}\n- **Auto Fix**: ${this.config.autoFix}\n- **Dry Run**: ${this.config.dryRun}\n- **Build Validation**: ${this.config.buildValidation}\n- **Git Stash**: ${this.config.enableGitStash}\n\n## Issues\n${result.errors.length > 0 ? '### Errors\\n' + result.errors.map(e => `- ${e}`).join('\\n') : 'No errors'}",
        "line": 440,
        "column": 11,
        "context": "sult: UnusedVariablesResult): string {\\n    return `\\n# Unused Variables Cleanup Report\\nGenerated: ${n"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`\n# Unused Variables Batch Cleanup Report\nGenerated: ${new Date().toISOString()}\n\n## Batch Summary\n- **Total Batches**: ${result.totalBatches}\n- **Successful Batches**: ${result.successfulBatches}\n- **Failed Batches**: ${result.failedBatches}\n- **Success Rate**: ${((result.successfulBatches / result.totalBatches) * 100).toFixed(1)}%\n\n## Processing Summary\n- **Total Files Processed**: ${result.totalFilesProcessed}\n- **Total Variables Processed**: ${result.totalVariablesProcessed}\n- **Average Build Time**: ${result.averageBuildTime.toFixed(0)}ms\n- **Overall Safety Score**: ${result.overallSafetyScore.toFixed(1)}\n\n## Batch Configuration\n- **Batch Size**: ${this.config.batchSize} files per batch\n- **Auto Fix**: ${this.config.autoFix}\n- **Build Validation**: ${this.config.buildValidation}\n- **Safety Protocols**: ${this.config.validateSafety}\n\n## Issues\n${result.errors.length > 0 ? '### Batch Errors\\n' + result.errors.map(e => `- ${e}`).join('\\n') : 'No batch errors'}",
        "line": 476,
        "column": 11,
        "context": "sult: BatchProcessingResult): string {\\n    return `\\n# Unused Variables Batch Cleanup Report\\nGenerate"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${result.errors.length > 0 ? '### Errors\\n' + result.errors.map(e => `- ${",
        "line": 460,
        "column": 0,
        "context": "Stash**: ${this.config.enableGitStash}\\n\\n## Issues\\n${result.errors.length > 0 ? '### Errors\\n' + resu"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${result.warnings.length > 0 ? '### Warnings\\n' + result.warnings.map(w => `- ${",
        "line": 461,
        "column": 0,
        "context": "ors.map(e => `- ${e}`).join('\\n') : 'No errors'};\\n${result.warnings.length > 0 ? '### Warnings\\n' + "
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${result.errors.length > 0 ? '### Batch Errors\\n' + result.errors.map(e => `- ${",
        "line": 499,
        "column": 0,
        "context": "ocols**: ${this.config.validateSafety}\\n\\n## Issues\\n${result.errors.length > 0 ? '### Batch Errors\\n' "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 71,
        "column": 6,
        "context": "buildValidation: true,\\n      batchSize: 15,\\n      ...config\\n    };\\n  }\\n\\n  /**\\n   * Execute unused va"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 79,
        "column": 66,
        "context": "e.log('üßπ Starting Unused Variables Cleanup System...');\\n\\n    try {\\n      // Pre-execution validatio"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 122,
        "column": 79,
        "context": "ting batch processing for unused variables cleanup...');\\n\\n    const batchResult: BatchProcessingResu"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 150,
        "column": 71,
        "context": ".log(`\\nüîÑ Processing batch ${i + 1}/${batchCount}...`);\\n\\n        try {\\n          const batchConfig "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 154,
        "column": 12,
        "context": "try {\\n          const batchConfig = {\\n            ...this.config;\\n            maxFiles: this.config."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 175,
        "column": 78,
        "context": "g('‚è∏Ô∏è Pausing 2 seconds between batches for safety...');\\n            await this.sleep(2000);\\n       "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 350,
        "column": 58,
        "context": " // console.log('üîç Validating build after cleanup...');\\n\\n      const startTime = Date.now();\\n      "
      }
    ],
    "src/services/campaign/ValidationFramework.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 759,
        "column": 65,
        "context": "le.log(`üîç Validating ${phaseValidation.phaseName}...`);\\n\\n    const startTime = Date.now();\\n    cons"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 934,
        "column": 12,
        "context": "tory(): MilestoneValidationResult[] {\\n    return [...this.validationHistory]\\n  }\\n\\n  /**\\n   * Get ava"
      }
    ],
    "src/services/campaign/analyze-typescript-errors.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 22,
        "column": 47,
        "context": " {\\n    console.log('üîç Analyzing TypeScript errors...');\\n\\n    const errors = await this.getTypeScrip"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 152,
        "column": 29,
        "context": ".push(error);\\n    }\\n\\n    const priorityRanking = [...errors].sort((a, b) => b.priority - a.priority)"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 159,
        "column": 21,
        "context": "rorCount: fileErrors.length,\\n        categories: [...new Set(fileErrors.map(e => e.category))],\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 337,
        "column": 54,
        "context": "console.log('üöÄ Starting TypeScript Error Analysis...');\\n    const result = await analyzer.analyzeEr"
      }
    ],
    "src/services/campaign/analyze-typescript-errors.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 65,
        "column": 60,
        "context": "console.log('üöÄ Starting TypeScript Error Analysis...');\\n    const result = await analyzer.analyzeEr"
      }
    ],
    "src/services/campaign/autoLintFixer.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 60,
        "column": 43,
        "context": " try {\\n    console.log('üîç Running ESLint auto-fix...');\\n\\n    execSync(`yarn eslint \"${filePath}\" --"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 79,
        "column": 48,
        "context": "{\\n  console.log('üõ†Ô∏è Running additional safe fixes...');\\n\\n  let content = fs.readFileSync(filePath, "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 140,
        "column": 36,
        "context": "th) {\\n  try {\\n    console.log('üîç Validating fixes...');\\n\\n    // Check if file is still valid JavaSc"
      }
    ],
    "src/services/campaign/campaignProgressTracker.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 13,
        "column": 44,
        "context": "s() {\\n  console.log('üìä Tracking campaign progress...');\\n\\n  try {\\n    // Check for active campaign t"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 52,
        "column": 17,
        "context": "readFileSync(filePath, 'utf8'));\\n        return { ...content, filePath, fileName: file };\\n      } ca"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 84,
        "column": 59,
        "context": "onsole.log(`‚è≥ Campaign ${trigger.type} in progress...`);\\n        await updateCampaignProgress(trigge"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 275,
        "column": 4,
        "context": "igger.fileName);\\n  const completedTrigger = {\\n    ...trigger,\\n    completedAt: new Date().toISOStrin"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 289,
        "column": 4,
        "context": " phase information\\n  const updatedTrigger = {\\n    ...trigger,\\n    lastMetrics: metrics,\\n    phaseAdv"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 303,
        "column": 4,
        "context": "ith latest metrics\\n  const updatedTrigger = {\\n    ...trigger,\\n    lastMetrics: metrics,\\n    lastUpda"
      }
    ],
    "src/services/campaign/checkTypeScriptErrors.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 13,
        "column": 44,
        "context": "s() {\\n  console.log('üîç Checking TypeScript errors...');\\n\\n  try {\\n    // Get current error count\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 35,
        "column": 70,
        "context": "'üöÄ Triggering TypeScript error reduction campaign...');\\n        await triggerErrorReductionCampaign"
      }
    ],
    "src/services/campaign/importOptimizer.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 281,
        "column": 28,
        "context": "xternal.length > 0) {\\n      organizedImports.push(...categorizedImports.external.map(imp => imp.stat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 287,
        "column": 28,
        "context": "nternal.length > 0) {\\n      organizedImports.push(...categorizedImports.internal.map(imp => imp.stat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 293,
        "column": 28,
        "context": "elative.length > 0) {\\n      organizedImports.push(...categorizedImports.relative.map(imp => imp.stat"
      }
    ],
    "src/services/campaign/parallelDevelopmentAccelerator.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 33,
        "column": 61,
        "context": ".log('üöÄ Starting Parallel Development Accelerator...');\\n\\n    try {\\n      // Initialize system state"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 63,
        "column": 45,
        "context": "() {\\n    console.log('üîç Initializing system state...');\\n\\n    // Check current project health\\n    co"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 194,
        "column": 57,
        "context": "sole.log('üê≥ Ensuring Docker environment readiness...');\\n\\n    try {\\n      // Check if Docker is runn"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 272,
        "column": 73,
        "context": "Ô∏è Building ${buildPromises.length} Docker image(s)...`);\\n        await Promise.all(buildPromises);\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 320,
        "column": 48,
        "context": "{\\n    console.log('üéØ Orchestrating parallel tasks...');\\n\\n    const tasks = [\\n      {\\n        id: 'i"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 387,
        "column": 50,
        "context": "    console.log('‚ö° Executing parallel improvements...');\\n\\n    // Execute tasks in batches to respect"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 521,
        "column": 49,
        "context": "\\n    console.log('üê≥ Optimizing Docker environment...');\\n\\n    try {\\n      // Clean up unused Docker "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 624,
        "column": 50,
        "context": "    console.log('üìä Generating acceleration report...');\\n\\n    const finalHealth = await this.assessS"
      }
    ],
    "src/services/campaign/planetaryDataRefresh.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 20,
        "column": 51,
        "context": "   console.log('üåü Starting planetary data refresh...');\\n\\n    try {\\n      // Get current planetary p"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 51,
        "column": 56,
        "context": "nsole.log('üîç Fetching current planetary positions...');\\n\\n    try {\\n      // Try to use the reliable"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 181,
        "column": 44,
        "context": "ns) {\\n    console.log('üîç Validating transit dates...');\\n\\n    const validationResults = {};\\n    cons"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 261,
        "column": 43,
        "context": "ons) {\\n    console.log('üíæ Updating position cache...');\\n\\n    try {\\n      const cacheDir = path.join"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 294,
        "column": 45,
        "context": "s) {\\n    console.log('üìä Generating refresh report...');\\n\\n    try {\\n      const report = {\\n        t"
      }
    ],
    "src/services/campaign/run-dependency-security.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 38,
        "column": 64,
        "context": "nsole.log('üîí Starting Dependency Security Monitor...\\n');\\n\\n      // Load configuration\\n      const "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 75,
        "column": 19,
        "context": "se<DependencySecurityConfig> {\\n    let config = { ...DEFAULT_DEPENDENCY_SECURITY_CONFIG };\\n\\n    // A"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 87,
        "column": 33,
        "context": "cludePackages) {\\n      config.excludedPackages = [...config.excludedPackages, ...this.options.exclud"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 87,
        "column": 61,
        "context": "g.excludedPackages = [...config.excludedPackages, ...this.options.excludePackages],;\\n    }\\n\\n    if ("
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 107,
        "column": 19,
        "context": "ileSync(configPath, 'utf8')),;\\n        config = { ...config, ...configFile };\\n        // // console."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 107,
        "column": 30,
        "context": "figPath, 'utf8')),;\\n        config = { ...config, ...configFile };\\n        // // console.log(`üìã Loa"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 123,
        "column": 69,
        "context": "og('üîÑ Running full dependency security monitoring...');\\n\\n    const result = await securityMonitor.e"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 130,
        "column": 66,
        "context": "e.log('üîç Running security vulnerability scan only...');\\n\\n    const securityReport = await securityM"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 137,
        "column": 62,
        "context": "nsole.log('üì¶ Running dependency update check only...');\\n\\n    const updateReport = await securityMon"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 356,
        "column": 47,
        "context": " {\\n          options.severityThreshold = threshold as unknown as any;\\n        }\\n        break;\\n     "
      }
    ],
    "src/services/campaign/run-import-cleanup.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 39,
        "column": 58,
        "context": " // console.log('üßπ Starting Import Cleanup System...\\n');\\n\\n      // Load configuration\\n      const "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 85,
        "column": 19,
        "context": "Promise<ImportCleanupConfig> {\\n    let config = { ...DEFAULT_IMPORT_CLEANUP_CONFIG };\\n\\n    // Apply "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 101,
        "column": 19,
        "context": "ileSync(configPath, 'utf8')),;\\n        config = { ...config, ...configFile };\\n        // // console."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 101,
        "column": 30,
        "context": "figPath, 'utf8')),;\\n        config = { ...config, ...configFile };\\n        // // console.log(`üìã Loa"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 133,
        "column": 53,
        "context": " // // console.log('üîÑ Running full import cleanup...');\\n\\n    if (this.options.dryRun) {\\n      // //"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 149,
        "column": 57,
        "context": "// console.log('üóëÔ∏è  Running unused import cleanup...');\\n\\n    if (this.options.dryRun) {\\n      const"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 173,
        "column": 53,
        "context": " // // console.log('üìã Running import organization...');\\n\\n    if (this.options.dryRun) {\\n      // //"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 188,
        "column": 58,
        "context": "/ console.log('üé® Running import style enforcement...');\\n\\n    if (this.options.dryRun) {\\n      // //"
      }
    ],
    "src/services/campaign/run-linting-formatting.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 41,
        "column": 66,
        "context": "ole.log('üîß Starting Linting and Formatting System...\\n');\\n\\n      // Load configuration\\n      const "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 87,
        "column": 19,
        "context": "ise<LintingFormattingConfig> {\\n    let config = { ...DEFAULT_LINTING_FORMATTING_CONFIG };\\n\\n    // Ap"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 115,
        "column": 19,
        "context": "ileSync(configPath, 'utf8')),;\\n        config = { ...config, ...configFile };\\n        // // console."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 115,
        "column": 30,
        "context": "figPath, 'utf8')),;\\n        config = { ...config, ...configFile };\\n        // // console.log(`üìã Loa"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 147,
        "column": 61,
        "context": "onsole.log('üîÑ Running full linting and formatting...');\\n\\n    if (this.options.dryRun) {\\n      // //"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 163,
        "column": 52,
        "context": "  // // console.log('üîç Running linting fixes only...');\\n\\n    if (this.options.dryRun) {\\n      const"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 181,
        "column": 54,
        "context": "// // console.log('üé® Running code formatting only...');\\n\\n    if (this.options.dryRun) {\\n      // //"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 196,
        "column": 58,
        "context": "/ console.log('üîß Running pattern-based fixes only...');\\n\\n    if (this.options.dryRun) {\\n      // //"
      }
    ],
    "src/services/campaign/terminal-freeze-diagnostic.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 58,
        "column": 50,
        "context": "    console.log('\\nüîç Checking for stuck processes...');\\n\\n    try {\\n      // Check for long-running "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 119,
        "column": 49,
        "context": "\\n    console.log('\\nüîç Checking for infinite loops...');\\n\\n    try {\\n      // Check for processes run"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 155,
        "column": 47,
        "context": " {\\n    console.log('\\nüîç Checking for memory leaks...');\\n\\n    try {\\n      // Check for high memory u"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 183,
        "column": 52,
        "context": "  console.log('\\nüîç Checking for file system locks...');\\n\\n    const lockFiles = [\\n      '.explicit-a"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 225,
        "column": 46,
        "context": ") {\\n    console.log('\\nüîç Checking campaign states...');\\n\\n    const campaignFiles = [\\n      '.explic"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 254,
        "column": 48,
        "context": "{\\n    console.log('\\nüí° Generating recommendations...');\\n\\n    if (this.diagnosticResults.stuckProces"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 327,
        "column": 50,
        "context": "      console.log('üõë Killing TypeScript processes...');\\n      try {\\n        execSync('pkill -f \"tsc"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 335,
        "column": 44,
        "context": "esses\\n      console.log('üõë Killing lint processes...');\\n      try {\\n        execSync('pkill -f \"yar"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 343,
        "column": 48,
        "context": "s\\n      console.log('üõë Killing campaign processes...');\\n      try {\\n        execSync('pkill -f \"cam"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 351,
        "column": 47,
        "context": "es\\n      console.log('üßπ Clearing stale lock files...');\\n      const lockFiles = [\\n        '.explici"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 376,
        "column": 44,
        "context": "cache\\n      console.log('üßπ Clearing Node.js cache...');\\n      try {\\n        execSync('rm -rf node_m"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 398,
        "column": 49,
        "context": "\\n    console.log('üìä Setting up process monitoring...');\\n\\n    // Create monitoring script\\n    const "
      }
    ],
    "src/services/campaign/test-campaign-intelligence.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 168,
        "column": 66,
        "context": "'üß† Generating Comprehensive Campaign Intelligence...');\\n\\n    // Gather data from all systems\\n    co"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 341,
        "column": 62,
        "context": "log('\\nüîç Demonstrating Error Pattern Intelligence...');\\n    const errorPatternDemo = this.analyzeEr"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 353,
        "column": 66,
        "context": "'\\nüìà Demonstrating Progress Analysis Intelligence...');\\n    const progressAnalysisDemo = this.analy"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 474,
        "column": 77,
        "context": "ating Comprehensive Campaign Intelligence Analysis...');\\n      const result = await intelligence.gen"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 481,
        "column": 56,
        "context": "console.log('üîç Testing Error Pattern Intelligence...');\\n      const sampleErrors = [\\n        { code"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 493,
        "column": 60,
        "context": "ole.log('üìà Testing Progress Analysis Intelligence...');\\n      const progress = intelligence.analyze"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 505,
        "column": 80,
        "context": "fault Comprehensive Campaign Intelligence Analysis...');\\n    const result = await intelligence.gener"
      }
    ],
    "src/services/campaign/test-console-removal.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 13,
        "column": 58,
        "context": "e.log('üß™ Testing Console Statement Removal System...\\n');\\n\\n  try {\\n    // Test 1: Console statement"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 27,
        "column": 48,
        "context": "\\n\\n    console.log('üîç Analyzing console statements...');\\n    const consoleAnalysis = await analysisS"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 59,
        "column": 37,
        "context": "ing\\n    });\\n\\n    console.log('üîç Executing dry run...');\\n    const dryRunResult = await dryRunSystem"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 177,
        "column": 62,
        "context": "log('üîÑ Simulating batch processing with 2 batches...');\\n    try {\\n      const batchResult = await b"
      }
    ],
    "src/services/campaign/test-enhanced-fixer-integration.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 24,
        "column": 65,
        "context": "('üöÄ Starting Enhanced TypeScript Error Fixer v3.0...');\\n\\n    const args = this.buildFixerArguments("
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 93,
        "column": 50,
        "context": "      const fullArgs = [this.ENHANCED_FIXER_PATH, ...args];\\n\\n      console.log(`üîß Executing: ${comm"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 129,
        "column": 12,
        "context": "\\n        } else {\\n          resolve({\\n            ...result,\\n            success: false,\\n           "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 131,
        "column": 21,
        "context": "\\n            success: false,\\n            errors: [...result.errors, `Process exited with code ${code"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 172,
        "column": 20,
        "context": "g);\\n    if (warningMatches) {\\n      warnings.push(...warningMatches);\\n    }\\n\\n    // Extract errors\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 178,
        "column": 18,
        "context": "n]*/g);\\n    if (errorMatches) {\\n      errors.push(...errorMatches);\\n    }\\n\\n    return {\\n      succes"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 194,
        "column": 38,
        "context": "{\\n    try {\\n      console.log('üîç Validating build...');\\n\\n      const startTime = Date.now();\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 228,
        "column": 59,
        "context": "sole.log('üìä Fetching Enhanced Error Fixer metrics...');\\n\\n      const result = await this.runFixerCo"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 244,
        "column": 41,
        "context": "   try {\\n      console.log('üõ°Ô∏è  Validating safety...');\\n\\n      const result = await this.runFixerCo"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 267,
        "column": 74,
        "context": "ecuting Enhanced Error Fixer with safety protocols...');\\n\\n    const safetyCheck = await this.validat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 365,
        "column": 60,
        "context": "e.log(`üß™ Testing Enhanced Error Fixer Integration...`);\\n    console.log(`   Max Files: ${maxFiles}`"
      }
    ],
    "src/services/campaign/test-enterprise-intelligence-generator.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 13,
        "column": 59,
        "context": ".log('üß† Testing Enterprise Intelligence Generator...\\n');\\n\\n  try {\\n    // First, analyze unused exp"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 17,
        "column": 44,
        "context": "dates\\n    console.log('üìä Analyzing unused exports...');\\n    const analyzer = new UnusedExportAnalyz"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 27,
        "column": 6,
        "context": "too many systems)\\n    const sampleFiles = [\\n      ...analysisResult.highPriorityFiles.slice(0, 2),\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 28,
        "column": 6,
        "context": "alysisResult.highPriorityFiles.slice(0, 2),\\n      ...analysisResult.mediumPriorityFiles.slice(0, 3),"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 29,
        "column": 6,
        "context": "ysisResult.mediumPriorityFiles.slice(0, 3),\\n      ...analysisResult.lowPriorityFiles.slice(0, 2),\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 37,
        "column": 70,
        "context": "\udfd7Ô∏è  Initializing Enterprise Intelligence Generator...');\\n    const generator = new EnterpriseIntelli"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 41,
        "column": 51,
        "context": "   console.log('üöÄ Generating intelligence systems...');\\n    const startTime = Date.now();\\n\\n    cons"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 91,
        "column": 24,
        "context": "e}`);\\n        }\\n      });\\n      console.log('     ...');\\n    });\\n\\n    // Generate and save integrati"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 95,
        "column": 50,
        "context": "    console.log('\\nüìö Generating integration guide...');\\n    const integrationGuide = generator.gene"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 115,
        "column": 19,
        "context": "tart(3)}: ${line}`);\\n      });\\n      console.log('...');\\n    }\\n\\n    // Verify files were created\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 119,
        "column": 47,
        "context": "ed\\n    console.log('\\nüîç Verifying generated files...');\\n    let filesCreated = 0;\\n    for (const re"
      }
    ],
    "src/services/campaign/test-explicit-any-elimination.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 25,
        "column": 60,
        "context": "e.log('üéØ Starting Explicit-Any Elimination System...');\\n\\n    const initialCount = await this.getCur"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 104,
        "column": 54,
        "context": "  const fullArgs = [this.EXPLICIT_ANY_FIXER_PATH, ...args];\\n\\n      console.log(`üîß Executing: ${comm"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 166,
        "column": 20,
        "context": "g);\\n    if (warningMatches) {\\n      warnings.push(...warningMatches);\\n    }\\n\\n    // Extract errors\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 172,
        "column": 18,
        "context": "n]*/g);\\n    if (errorMatches) {\\n      errors.push(...errorMatches);\\n    }\\n\\n    return {\\n      succes"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 186,
        "column": 38,
        "context": "{\\n    try {\\n      console.log('üîç Validating build...');\\n\\n      const startTime = Date.now();\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 232,
        "column": 10,
        "context": " 100\\n            : 0;\\n\\n        return {\\n          ...progress,\\n          totalExplicitAnyRemaining: "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 356,
        "column": 59,
        "context": "le.log(`üß™ Testing Explicit-Any Elimination System...`);\\n    console.log(`   Max Files: ${maxFiles}`"
      }
    ],
    "src/services/campaign/test-export-transformation-engine.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 8,
        "column": 52,
        "context": "nsole.log('üöÄ Testing Export Transformation Engine...\\n');\\n\\n// Mock the transformation engine functi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 23,
        "column": 6,
        "context": "',\\n      maxRetries: 3,\\n      dryRun: true,\\n      ...config,\\n    };\\n\\n    this.transformationLog = []"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 30,
        "column": 52,
        "context": "  console.log('üîÑ Starting transformation campaign...');\\n    const startTime = Date.now();\\n\\n    try "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 35,
        "column": 55,
        "context": " console.log('üìä Phase 1: Analyzing unused exports...');\\n      const analysisResult = await this.per"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 39,
        "column": 62,
        "context": "e.log('üìã Phase 2: Planning transformation batches...');\\n      const batches = await this.planTransf"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 43,
        "column": 59,
        "context": "sole.log('üõ°Ô∏è  Phase 3: Preparing safety protocols...');\\n      await this.prepareSafetyProtocols();\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 47,
        "column": 62,
        "context": "e.log('‚ö° Phase 4: Executing transformation batches...');\\n      const results = await this.executeBat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 51,
        "column": 58,
        "context": "nsole.log('‚úÖ Phase 5: Final validation and cleanup...');\\n      await this.performFinalValidation();\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 137,
        "column": 6,
        "context": " const batches = [];\\n    const allFiles = [\\n      ...analysisResult.highPriorityFiles,\\n      ...anal"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 138,
        "column": 6,
        "context": "\\n      ...analysisResult.highPriorityFiles,\\n      ...analysisResult.mediumPriorityFiles,\\n      ...an"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 139,
        "column": 6,
        "context": "     ...analysisResult.mediumPriorityFiles,\\n      ...analysisResult.lowPriorityFiles,\\n    ];\\n\\n    fo"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 307,
        "column": 13,
        "context": "unt}`);\\n    });\\n  }\\n\\n  getConfig() {\\n    return { ...this.config };\\n  }\\n\\n  getTransformationLog() {\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 311,
        "column": 12,
        "context": "ig };\\n  }\\n\\n  getTransformationLog() {\\n    return [...this.transformationLog];\\n  }\\n\\n  delay(ms) {\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 321,
        "column": 61,
        "context": ".log('üß™ Initializing Export Transformation Engine...');\\n\\n    const engine = new MockExportTransform"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 339,
        "column": 54,
        "context": "console.log('\\nüöÄ Starting transformation campaign...');\\n    const summary = await engine.executeTra"
      }
    ],
    "src/services/campaign/test-final-validation.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 23,
        "column": 62,
        "context": "log('üìã Testing Final Validation System Components...');\\n\\n    // Test 1: Verify TypeScript compilati"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 26,
        "column": 52,
        "context": "  console.log('\\n1. Testing TypeScript Compilation...');\\n    try {\\n      execSync('npx tsc --noEmit "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 38,
        "column": 50,
        "context": "    console.log('\\n2. Testing System Instantiation...');\\n    try {\\n      // Use require to test the "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 50,
        "column": 60,
        "context": "e.log('\\n3. Testing Current Project State Analysis...');\\n\\n    // TypeScript error count\\n    let tsEr"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 103,
        "column": 47,
        "context": "ce\\n    console.log('\\n4. Testing Build Performance...');\\n    try {\\n      const buildStart = Date.now"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 120,
        "column": 58,
        "context": "ole.log('\\n5. Testing Validation Report Generation...');\\n    try {\\n      // Create mock validation r"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 202,
        "column": 54,
        "context": "console.log('\\n6. Test Summary and Recommendations...');\\n\\n    const perfectCodebase =\\n      tsErrorC"
      }
    ],
    "src/services/campaign/test-intelligence-simple.js": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`rec-\\${",
        "line": 128,
        "column": 13,
        "context": "   const recommendations = [\\n      {\\n        id: \\`rec-\\${Date.now()}-1\\`,\\n        type: 'optimizati"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Optimize \\${",
        "line": 131,
        "column": 22,
        "context": "        priority: 'medium',\\n        description: \\`Optimize \\${originalName} usage patterns\\`,\\n     "
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`rec-\\${",
        "line": 136,
        "column": 13,
        "context": "estimatedImpact: 75\\n      },\\n      {\\n        id: \\`rec-\\${Date.now()}-2\\`,\\n        type: 'integratio"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Integrate \\${",
        "line": 139,
        "column": 22,
        "context": ",\\n        priority: 'high',\\n        description: \\`Integrate \\${originalName} with monitoring system"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`\\${systemName}.\\${",
        "line": 184,
        "column": 21,
        "context": "nfig.logLevel === 'error') {\\n      console.error(\\`\\${systemName}.\\${method} error:\\`, error);\\n    }"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 8,
        "column": 71,
        "context": "ng Enterprise Intelligence Generator (Simple Test)...\\n');\\n\\n// Test the core functionality by creati"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 73,
        "column": 6,
        "context": "cacheResults: true,\\n      logLevel: 'info',\\n      ...config\\n    };\\n\\n    this.analytics = {\\n      usa"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 170,
        "column": 13,
        "context": "\\n    };\\n  }\\n\\n  getAnalytics(): any {\\n    return { ...this.analytics };\\n  }\\n\\n  private updatePerforma"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 200,
        "column": 58,
        "context": "ole.log('üìä Testing intelligence system generation...');\\n\\n    const candidate = mockFileAnalysis.tra"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 215,
        "column": 17,
        "context": "padStart(3)}: ${line}`);\\n    });\\n    console.log('...');\\n\\n    // Test the generated system structure"
      }
    ],
    "src/services/campaign/test-linting-analyzer.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 13,
        "column": 50,
        "context": "  console.log('üß™ Testing Linting Warning Analyzer...\\n');\\n\\n  try {\\n    const analyzer = new Linting"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 18,
        "column": 44,
        "context": "r();\\n\\n    console.log('üìä Running linting analysis...');\\n    const result = await analyzer.analyzeLi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 36,
        "column": 48,
        "context": "\\n\\n    console.log('\\nüìã Generating detailed report...');\\n    const report = analyzer.generateReport("
      }
    ],
    "src/services/campaign/test-unused-export-analyzer.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 12,
        "column": 48,
        "context": "{\\n  console.log('üß™ Testing Unused Export Analyzer...\\n');\\n\\n  try {\\n    const analyzer = new UnusedE"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 17,
        "column": 37,
        "context": "zer('src');\\n\\n    console.log('üìä Starting analysis...');\\n    const startTime = Date.now();\\n\\n    cons"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 48,
        "column": 6,
        "context": "================');\\n\\n    const allFiles = [\\n      ...result.highPriorityFiles,\\n      ...result.mediu"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 49,
        "column": 6,
        "context": "iles = [\\n      ...result.highPriorityFiles,\\n      ...result.mediumPriorityFiles,\\n      ...result.low"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 50,
        "column": 6,
        "context": "Files,\\n      ...result.mediumPriorityFiles,\\n      ...result.lowPriorityFiles,\\n    ];\\n    const topCa"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 76,
        "column": 48,
        "context": "t\\n    console.log('\\nüìÑ Generating detailed report...');\\n    const report = analyzer.generateReport("
      }
    ],
    "src/services/campaign/test-unused-variables-cleanup.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 13,
        "column": 57,
        "context": "le.log('üß™ Testing Unused Variables Cleanup System...\\n');\\n\\n  try {\\n    // Test 1: Dry run execution"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 27,
        "column": 37,
        "context": "ing\\n    });\\n\\n    console.log('üîç Executing dry run...');\\n    const dryRunResult = await dryRunSystem"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 81,
        "column": 62,
        "context": "log('üîÑ Simulating batch processing with 2 batches...');\\n    try {\\n      const batchResult = await b"
      }
    ],
    "src/services/campaign/unintentional-any-elimination/AnalysisTools.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 41,
        "column": 64,
        "context": "ole.log('Analyzing any type distribution by domain...');\\n\\n    const anyTypeOccurrences = await this."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 124,
        "column": 64,
        "context": "ole.log('Generating classification accuracy report...');\\n\\n    const anyTypeOccurrences = await this."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 190,
        "column": 68,
        "context": "log('Generating success rate analysis and trending...');\\n\\n    const currentMetrics = await this.getC"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 222,
        "column": 63,
        "context": "sole.log('Generating manual review recommendations...');\\n\\n    const anyTypeOccurrences = await this."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 265,
        "column": 63,
        "context": "sole.log('Generating comprehensive analysis report...');\\n\\n    const [domainDistribution, accuracyRep"
      }
    ],
    "src/services/campaign/unintentional-any-elimination/AnyTypeClassifier.ts": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`Explicitly documented as intentional${surroundingContext.contextualClues.length > 0 ? ` (${surroundingContext.contextualClues.join(', ')})` : ''}",
        "line": 111,
        "column": 21,
        "context": "\\n          confidence: 0.95,\\n          reasoning: `Explicitly documented as intentional${surrounding"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`Explicitly documented as intentional${surroundingContext.contextualClues.length > 0 ? ` (${surroundingContext.contextualClues.join(', ')})` : ''}",
        "line": 111,
        "column": 21,
        "context": "\\n          confidence: 0.95,\\n          reasoning: `Explicitly documented as intentional${surrounding"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${surroundingContext.contextualClues.length > 0 ? ` (${",
        "line": 111,
        "column": 58,
        "context": "  reasoning: `Explicitly documented as intentional${surroundingContext.contextualClues.length > 0 ? "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 65,
        "column": 6,
        "context": "ny/,\\n        /compat\\w*\\s*:\\s*any/\\n      ],\\n      ...rules\\n    },\\n\\n    // Initialize confidence weig"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 448,
        "column": 33,
        "context": "text): boolean {\\n    const codeWithSurrounding = [...context.surroundingLines, context.codeSnippet]."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 454,
        "column": 33,
        "context": "text): boolean {\\n    const codeWithSurrounding = [...context.surroundingLines, context.codeSnippet]."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 460,
        "column": 33,
        "context": "text): boolean {\\n    const codeWithSurrounding = [...context.surroundingLines, context.codeSnippet]."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1154,
        "column": 12,
        "context": "ext: ClassificationContext): string {\\n    return [...context.surroundingLines, context.codeSnippet]."
      }
    ],
    "src/services/campaign/unintentional-any-elimination/AutoDocumentationGenerator.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 348,
        "column": 26,
        "context": "Index = lineNumber - 1;\\n    const updatedLines = [...lines];\\n    const indentation = this.getIndenta"
      }
    ],
    "src/services/campaign/unintentional-any-elimination/CampaignIntegration.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 43,
        "column": 6,
        "context": "ONSERVATIVE',\\n      validationFrequency: 5,\\n      ...unintentionalAnyConfig\\n    };\\n\\n    this.uninten"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 161,
        "column": 8,
        "context": "   // Include existing phases if provided\\n        ...(baseConfig?.phases || []),\\n        // Add unin"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 163,
        "column": 8,
        "context": " Add unintentional any elimination phases\\n        ...unintentionalAnyPhases\\n      ],\\n      safetySet"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 172,
        "column": 8,
        "context": "led: true,\\n        stashRetentionDays: 7,\\n        ...baseConfig?.safetySettings\\n      },\\n      progr"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 179,
        "column": 8,
        "context": "Time: 10,\\n        enterpriseSystems: 200,\\n        ...baseConfig?.progressTargets\\n      },\\n      tool"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 187,
        "column": 8,
        "context": "nt-fixes/fix-console-statements-only.js',\\n        ...baseConfig?.toolConfiguration\\n      }\\n    };\\n\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 244,
        "column": 6,
        "context": "getUnintentionalAnyMetrics();\\n\\n    return {\\n      ...baseMetrics;\\n      unintentionalAnyMetrics\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 293,
        "column": 20,
        "context": "ntentional any elimination');\\n        errors.push(...buildValidation.errors);\\n      }\\n\\n      return "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 373,
        "column": 36,
        "context": "fig>): void {\\n    this.unintentionalAnyConfig = { ...this.unintentionalAnyConfig, ...newConfig };\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 373,
        "column": 68,
        "context": "onalAnyConfig = { ...this.unintentionalAnyConfig, ...newConfig };\\n    this.unintentionalAnyCampaign."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 381,
        "column": 13,
        "context": "nyConfig(): UnintentionalAnyConfig {\\n    return { ...this.unintentionalAnyConfig };\\n  }\\n}\\n\\n/**\\n * Fa"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 417,
        "column": 6,
        "context": "paign.createCampaignPhases();\\n\\n    return {\\n      ...existingConfig;\\n      phases: [...existingConfi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 418,
        "column": 15,
        "context": " return {\\n      ...existingConfig;\\n      phases: [...existingConfig.phases, ...unintentionalAnyPhase"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 418,
        "column": 41,
        "context": "gConfig;\\n      phases: [...existingConfig.phases, ...unintentionalAnyPhases]\\n    };\\n  }\\n\\n  /**\\n   * "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 456,
        "column": 33,
        "context": "fetySettings = {\\n      maxFilesPerBatch: Math.min(...campaigns.map(c => c.safetySettings.maxFilesPer"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 458,
        "column": 8,
        "context": "      buildValidationFrequency: Math.min(\\n        ...campaigns.map(c => c.safetySettings.buildValida"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 461,
        "column": 8,
        "context": "\\n      testValidationFrequency: Math.min(\\n        ...campaigns.map(c => c.safetySettings.testValidat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 465,
        "column": 35,
        "context": "ackEnabled),,;\\n      stashRetentionDays: Math.max(...campaigns.map(c => c.safetySettings.stashRetent"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 472,
        "column": 26,
        "context": "id.includes(priority));\\n        mergedPhases.push(...priorityPhases);\\n      }\\n    }\\n\\n    return {\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 481,
        "column": 8,
        "context": "ogressTargets,\\n      toolConfiguration: {\\n        ...sortedCampaigns[0].toolConfiguration,\\n        ."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 482,
        "column": 8,
        "context": " ...sortedCampaigns[0].toolConfiguration,\\n        ...UnintentionalAnyIntegrationHelper.createAutomat"
      }
    ],
    "src/services/campaign/unintentional-any-elimination/ConservativeReplacementPilot.ts": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`# Conservative Replacement Pilot Report\n\n## Executive Summary\n\n**Pilot Status**: ${(report as any)?.results?.success ? '‚úÖ SUCCESS' : '‚ùå FAILED'}\n**Execution Time**: ${Math.round((report as any)?.executionTime / 1000)}s\n**Target Achievement**: ${(report as any)?.results?.targetAchieved ? '‚úÖ YES' : '‚ùå NO'}\n\n## Key Metrics\n\n- **Cases Processed**: ${(report as any)?.results?.totalCasesProcessed}\n- **Successful Replacements**: ${(report as any)?.results?.totalSuccessfulReplacements}\n- **Success Rate**: ${((report as any)?.results?.successRate * 100).toFixed(1)}% (Target: ${((report as any)?.configuration?.targetSuccessRate * 100).toFixed(1)}%)\n- **Batches Executed**: ${(report as any)?.results?.batchesExecuted}\n- **Build Failures**: ${(report as any)?.results?.buildFailures} (Target: 0)\n- **Rollbacks Performed**: ${(report as any)?.results?.rollbacksPerformed}\n- **Safety Score**: ${(report as any)?.results?.safetyScore?.toFixed(2)} (Threshold: ${(report as any)?.configuration?.safetyThreshold})\n\n## Batch Results\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any -- High-risk domain requiring flexibility\n// eslint-disable-next-line @typescript-eslint/no-explicit-any -- High-risk domain requiring flexibility\n${(report as any)?.batchResults\n  ?.map(\n    (batch: any, index: number) => `\n### Batch ${batch?.batchNumber}\n- **Cases**: ${batch.casesProcessed}",
        "line": 893,
        "column": 11,
        "context": "kdownReport(report: unknown): string {\\n    return `# Conservative Replacement Pilot Report\\n\\n## Execu"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`,\n  )\n  .join('')}\n\n## Safety Metrics\n\n- **Build Failures**: ${(report as any)?.safetyMetrics?.buildFailures}\n- **Rollbacks Performed**: ${(report as any)?.safetyMetrics?.rollbacksPerformed}\n- **Batch Failures**: ${(report as any)?.safetyMetrics?.batchFailures}\n- **Compilation Errors**: ${(report as any)?.safetyMetrics?.compilationErrors}\n\n## Recommendations\n\n${(report as any)?.recommendations?.map((rec: string) => `- ${rec}`).join('\\n')}",
        "line": 924,
        "column": 0,
        "context": "*: ${batch.rollbackPerformed ? '‚ö†Ô∏è YES' : '‚úÖ NO'}\\n`,\\n  )\\n  .join('')}\\n\\n## Safety Metrics\\n\\n- **Build "
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`# Conservative Replacement Pilot Report\n\n## Executive Summary\n\n**Pilot Status**: ${(report as any)?.results?.success ? '‚úÖ SUCCESS' : '‚ùå FAILED'}\n**Execution Time**: ${Math.round((report as any)?.executionTime / 1000)}s\n**Target Achievement**: ${(report as any)?.results?.targetAchieved ? '‚úÖ YES' : '‚ùå NO'}\n\n## Key Metrics\n\n- **Cases Processed**: ${(report as any)?.results?.totalCasesProcessed}\n- **Successful Replacements**: ${(report as any)?.results?.totalSuccessfulReplacements}\n- **Success Rate**: ${((report as any)?.results?.successRate * 100).toFixed(1)}% (Target: ${((report as any)?.configuration?.targetSuccessRate * 100).toFixed(1)}%)\n- **Batches Executed**: ${(report as any)?.results?.batchesExecuted}\n- **Build Failures**: ${(report as any)?.results?.buildFailures} (Target: 0)\n- **Rollbacks Performed**: ${(report as any)?.results?.rollbacksPerformed}\n- **Safety Score**: ${(report as any)?.results?.safetyScore?.toFixed(2)} (Threshold: ${(report as any)?.configuration?.safetyThreshold})\n\n## Batch Results\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any -- High-risk domain requiring flexibility\n// eslint-disable-next-line @typescript-eslint/no-explicit-any -- High-risk domain requiring flexibility\n${(report as any)?.batchResults\n  ?.map(\n    (batch: any, index: number) => `\n### Batch ${batch?.batchNumber}\n- **Cases**: ${batch.casesProcessed}\n- **Successful**: ${batch?.successfulReplacements}\n- **Failed**: ${batch.failedReplacements}\n- **Build Stable**: ${batch?.buildStable ? '‚úÖ' : '‚ùå'}\n- **Rollback**: ${batch.rollbackPerformed ? '‚ö†Ô∏è YES' : '‚úÖ NO'}\n`,\n  )\n  .join('')}",
        "line": 893,
        "column": 11,
        "context": "kdownReport(report: unknown): string {\\n    return `# Conservative Replacement Pilot Report\\n\\n## Execu"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${(report as any)?.batchResults\n  ?.map(\n    (batch: any, index: number) => `\n### Batch ${",
        "line": 915,
        "column": 0,
        "context": "cit-any -- High-risk domain requiring flexibility\\n${(report as any)?.batchResults\\n  ?.map(\\n    (batc"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${(report as any)?.recommendations?.map((rec: string) => `- ${",
        "line": 937,
        "column": 0,
        "context": "yMetrics?.compilationErrors}\\n\\n## Recommendations\\n\\n${(report as any)?.recommendations?.map((rec: stri"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 54,
        "column": 6,
        "context": "Frequency: 1, // Validate after every batch\\n      ...config\\n    };\\n\\n    this.classifier = new AnyTyp"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 72,
        "column": 65,
        "context": "le.log('üöÄ Starting Conservative Replacement Pilot...');\\n    // // console.log(\\n      `Configuration"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 117,
        "column": 71,
        "context": "('üîç Identifying high-confidence replacement cases...');\\n\\n    const highConfidenceCases: TypeReplace"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 175,
        "column": 76,
        "context": "Starting batch processing of ${cases.length} cases...`);\\n\\n    let totalProcessed = 0;\\n    let totalS"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 189,
        "column": 63,
        "context": " console.log(`\\nüì¶ Processing Batch ${batchNumber}...`),\\n\\n        // Select files for this batch\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 282,
        "column": 82,
        "context": "ng batch ${batchNumber} with ${cases.length} cases...`);\\n\\n    try {\\n      // Pre-batch validation\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 311,
        "column": 80,
        "context": "batch build validation failed, performing rollback...');\\n        // The SafeTypeReplacer should have"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 361,
        "column": 57,
        "context": "// console.log('üîç Performing real-time validation...');\\n\\n    try {\\n      // Build stability check\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 422,
        "column": 72,
        "context": "'üîó Validating campaign infrastructure integration...');\\n\\n    try {\\n      // Mock campaign integrati"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 464,
        "column": 49,
        "context": "\\n    // // console.log('üìÑ Generating pilot report...');\\n\\n    const reportPath = '.kiro/campaign-rep"
      }
    ],
    "src/services/campaign/unintentional-any-elimination/DocumentationQualityAssurance.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 74,
        "column": 6,
        "context": "        good: 70,\\n        fair: 50\\n      },\\n      ...config\\n    };\\n  }\\n\\n  /**\\n   * Perform comprehen"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 132,
        "column": 26,
        "context": "      qualityBreakdown,\\n      undocumentedFiles: [...new Set(undocumentedTypes.map(t => t.filePath))"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 261,
        "column": 17,
        "context": "ursively(dir, ['.ts', '.tsx']),;\\n      files.push(...dirFiles);\\n    }\\n\\n    // Filter out excluded pa"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 287,
        "column": 21,
        "context": "vely(fullPath, extensions),;\\n          files.push(...subFiles);\\n        } else if (entry.isFile()) {"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 720,
        "column": 50,
        "context": "        `Priority files needing documentation: ${[...new Set(criticalFiles)].slice(0, 5).join(', ')}"
      }
    ],
    "src/services/campaign/unintentional-any-elimination/DomainContextAnalyzer.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 58,
        "column": 6,
        "context": "Suggestions(context, domain);\\n\\n    return [\\n      ...new Set([\\n        ...contextualSuggestions, // "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 59,
        "column": 8,
        "context": "domain);\\n\\n    return [\\n      ...new Set([\\n        ...contextualSuggestions, // Prioritize contextual"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 60,
        "column": 8,
        "context": "ons, // Prioritize contextual suggestions\\n        ...variableNameSuggestions, // Then variable name "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 61,
        "column": 8,
        "context": "stions, // Then variable name suggestions\\n        ...patternBasedSuggestions, // Then pattern-based "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 62,
        "column": 8,
        "context": "stions, // Then pattern-based suggestions\\n        ...baseSuggestions, // Finally base suggestions\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 313,
        "column": 46,
        "context": "n {\\n    const codeContent = [context.codeSnippet, ...context.surroundingLines].join('\\n').toLowerCas"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 344,
        "column": 46,
        "context": "n {\\n    const codeContent = [context.codeSnippet, ...context.surroundingLines].join('\\n');\\n\\n    // L"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 350,
        "column": 24,
        "context": "^''`]+)[''`]\\)/g) || [];\\n\\n    const allImports = [...importMatches, ...requireMatches].join(' ').toL"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 350,
        "column": 42,
        "context": "|| [];\\n\\n    const allImports = [...importMatches, ...requireMatches].join(' ').toLowerCase();\\n\\n    /"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 414,
        "column": 46,
        "context": "');\\n    const codeContent = [context.codeSnippet, ...context.surroundingLines].join('\\n').toLowerCas"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 542,
        "column": 25,
        "context": "CodeDomain.ASTROLOGICAL:\\n        suggestions.push(...this.getAstrologicalTypeSuggestions(allContent,"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 546,
        "column": 25,
        "context": " case CodeDomain.RECIPE:\\n        suggestions.push(...this.getRecipeTypeSuggestions(allContent, conte"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 550,
        "column": 25,
        "context": "ase CodeDomain.CAMPAIGN:\\n        suggestions.push(...this.getCampaignTypeSuggestions(allContent, con"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 554,
        "column": 25,
        "context": "case CodeDomain.SERVICE:\\n        suggestions.push(...this.getServiceTypeSuggestions(allContent, cont"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 558,
        "column": 25,
        "context": "se CodeDomain.COMPONENT:\\n        suggestions.push(...this.getComponentTypeSuggestions(allContent, co"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 562,
        "column": 25,
        "context": "case CodeDomain.UTILITY:\\n        suggestions.push(...this.getUtilityTypeSuggestions(allContent, cont"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 566,
        "column": 25,
        "context": "   case CodeDomain.TEST:\\n        suggestions.push(...this.getTestTypeSuggestions(allContent, context"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 570,
        "column": 12,
        "context": "ent, context));\\n        break;\\n    }\\n\\n    return [...new Set(suggestions)]; // Remove duplicates\\n  }"
      }
    ],
    "src/services/campaign/unintentional-any-elimination/FullCampaignExecutor.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 56,
        "column": 6,
        "context": "uration: 4 * 60 * 60 * 1000, // 4 hours max\\n      ...config\\n    };\\n\\n    this.classifier = new AnyTyp"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 480,
        "column": 33,
        "context": "E),;\\n        ),\\n\\n        highConfidenceCases.push(...highConfidence);\\n      } catch (error) {\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 929,
        "column": 19,
        "context": ".confidence >= 0.6\\n        ),\\n\\n        cases.push(...categoryCases);\\n      } catch (error) {\\n       "
      }
    ],
    "src/services/campaign/unintentional-any-elimination/MetricsIntegration.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 112,
        "column": 6,
        "context": "getUnintentionalAnyMetrics();\\n\\n    return {\\n      ...baseMetrics;\\n      unintentionalAnyMetrics\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 270,
        "column": 6,
        "context": "nalAnyMetrics)\\n      }\\n    ],\\n\\n    return {\\n      ...baseReport;\\n      unintentionalAnyMetrics,\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 363,
        "column": 12,
        "context": "istory(): UnintentionalAnyMetrics[] {\\n    return [...this.metricsHistory]\\n  }\\n\\n  /**\\n   * Calculate "
      }
    ],
    "src/services/campaign/unintentional-any-elimination/PilotCampaignAnalysis.ts": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`# Pilot Campaign Analysis - Failed\n\n## Error\n${results.error}\n\n## Recommendations\n${results.recommendations.map(r => `- ${r}`).join('\\n')}",
        "line": 816,
        "column": 13,
        "context": "string {\\n    if (!results.success) {\\n      return `# Pilot Campaign Analysis - Failed\\n\\n## Error\\n${re"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`# Pilot Campaign Analysis Results\n\n## Executive Summary\n- **Execution Time**: ${(results.executionTime / 1000).toFixed(2)} seconds\n- **Total Any Types**: ${results.codebaseAnalysis?.summary.totalAnyTypes || 'N/A'}\n- **Classification Accuracy**: ${results.accuracyValidation?.overallAccuracy.toFixed(1) || 'N/A'}%\n- **Projected Success Rate**: ${results.baselineMetrics?.projectedSuccessRate.toFixed(1) || 'N/A'}%\n\n## Key Findings\n- **Unintentional Any Types**: ${results.codebaseAnalysis?.summary.unintentionalCount || 'N/A'}\n- **Manual Review Cases**: ${results.codebaseAnalysis?.summary.manualReviewCases || 'N/A'}\n- **Top Domain**: ${results.codebaseAnalysis?.summary.topDomain || 'N/A'}\n- **Top Category**: ${results.codebaseAnalysis?.summary.topCategory || 'N/A'}\n\n## Readiness Assessment\n- **Overall Readiness**: ${results.pilotReport?.pilotPhase?.readinessAssessment?.overallReadiness?.toFixed(1) || 'N/A'}%\n- **Readiness Level**: ${results.pilotReport?.pilotPhase?.readinessAssessment?.readinessLevel || 'N/A'}\n\n## Recommendations\n${results.recommendations.map(r => `- ${r}`).join('\\n')}",
        "line": 829,
        "column": 11,
        "context": "(s => `- ${s}`).join('\\n')};\\n`;\\n    }\\n\\n    return `# Pilot Campaign Analysis Results\\n\\n## Executive S"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`).join('\\n')};\n\n## Tuning Results\n${\n  results.tuningResults?.tuningPerformed\n    ? `- Tuning performed: ${results.tuningResults.adjustmentsMade.length} adjustments made\n- Accuracy improvement: ${results.tuningResults.improvementPercentage?.toFixed(1) || 'N/A'}",
        "line": 851,
        "column": 36,
        "context": "## Next Steps\\n${results.nextSteps.map(s => `- ${s}`).join('\\n')};\\n\\n## Tuning Results\\n${\\n  results.tu"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`# Pilot Campaign Analysis - Failed\n\n## Error\n${results.error}\n\n## Recommendations\n${results.recommendations.map(r => `- ${r}`).join('\\n')}",
        "line": 816,
        "column": 13,
        "context": "string {\\n    if (!results.success) {\\n      return `# Pilot Campaign Analysis - Failed\\n\\n## Error\\n${re"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`# Pilot Campaign Analysis Results\n\n## Executive Summary\n- **Execution Time**: ${(results.executionTime / 1000).toFixed(2)} seconds\n- **Total Any Types**: ${results.codebaseAnalysis?.summary.totalAnyTypes || 'N/A'}\n- **Classification Accuracy**: ${results.accuracyValidation?.overallAccuracy.toFixed(1) || 'N/A'}%\n- **Projected Success Rate**: ${results.baselineMetrics?.projectedSuccessRate.toFixed(1) || 'N/A'}%\n\n## Key Findings\n- **Unintentional Any Types**: ${results.codebaseAnalysis?.summary.unintentionalCount || 'N/A'}\n- **Manual Review Cases**: ${results.codebaseAnalysis?.summary.manualReviewCases || 'N/A'}\n- **Top Domain**: ${results.codebaseAnalysis?.summary.topDomain || 'N/A'}\n- **Top Category**: ${results.codebaseAnalysis?.summary.topCategory || 'N/A'}\n\n## Readiness Assessment\n- **Overall Readiness**: ${results.pilotReport?.pilotPhase?.readinessAssessment?.overallReadiness?.toFixed(1) || 'N/A'}%\n- **Readiness Level**: ${results.pilotReport?.pilotPhase?.readinessAssessment?.readinessLevel || 'N/A'}\n\n## Recommendations\n${results.recommendations.map(r => `- ${r}`).join('\\n')}",
        "line": 829,
        "column": 11,
        "context": "(s => `- ${s}`).join('\\n')};\\n`;\\n    }\\n\\n    return `# Pilot Campaign Analysis Results\\n\\n## Executive S"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`).join('\\n')};\n\n## Tuning Results\n${\n  results.tuningResults?.tuningPerformed\n    ? `- Tuning performed: ${results.tuningResults.adjustmentsMade.length} adjustments made\n- Accuracy improvement: ${results.tuningResults.improvementPercentage?.toFixed(1) || 'N/A'}%`\n    : '- No tuning performed or needed'\n}",
        "line": 851,
        "column": 36,
        "context": "## Next Steps\\n${results.nextSteps.map(s => `- ${s}`).join('\\n')};\\n\\n## Tuning Results\\n${\\n  results.tu"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${results.recommendations.map(r => `- ${",
        "line": 822,
        "column": 0,
        "context": "ed\\n\\n## Error\\n${results.error}\\n\\n## Recommendations\\n${results.recommendations.map(r => `- ${r}`).join("
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${results.nextSteps.map(s => `- ${",
        "line": 825,
        "column": 0,
        "context": "ns.map(r => `- ${r}`).join('\\n')};\\n\\n## Next Steps\\n${results.nextSteps.map(s => `- ${s}`).join('\\n')}"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${results.recommendations.map(r => `- ${",
        "line": 848,
        "column": 0,
        "context": "ent?.readinessLevel || 'N/A'}\\n\\n## Recommendations\\n${results.recommendations.map(r => `- ${r}`).join("
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${results.nextSteps.map(s => `- ${",
        "line": 851,
        "column": 0,
        "context": "ns.map(r => `- ${r}`).join('\\n')};\\n\\n## Next Steps\\n${results.nextSteps.map(s => `- ${s}`).join('\\n')}"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n  results.tuningResults?.tuningPerformed\n    ? `- Tuning performed: ${",
        "line": 854,
        "column": 0,
        "context": "ap(s => `- ${s}`).join('\\n')};\\n\\n## Tuning Results\\n${\\n  results.tuningResults?.tuningPerformed\\n    ? "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 43,
        "column": 6,
        "context": "|| '.kiro/campaign-reports/pilot-analysis',\\n      ...config\\n    };\\n\\n    this.analysisTools = new Ana"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 63,
        "column": 79,
        "context": " Step 1: Executing comprehensive codebase analysis...');\\n      const codebaseAnalysis = await this.e"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 67,
        "column": 72,
        "context": "g('\\nüîç Step 2: Validating classification accuracy...');\\n      const accuracyValidation = await this"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 71,
        "column": 81,
        "context": "tep 3: Generating baseline metrics and predictions...');\\n      const baselineMetrics = await this.ge"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 75,
        "column": 70,
        "context": "log('\\n‚öôÔ∏è Step 4: Tuning classification algorithms...');\\n      const tuningResults = await this.tune"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 79,
        "column": 75,
        "context": "\\nüìã Step 5: Generating comprehensive pilot report...');\\n      const pilotReport = await this.genera"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 136,
        "column": 75,
        "context": "alyzing current codebase for any type distribution...');\\n\\n    // Get current TypeScript error count "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 147,
        "column": 6,
        "context": "cific analysis\\n    const enhancedReport = {\\n      ...analysisReport;\\n      pilotSpecific: {\\n        "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 172,
        "column": 79,
        "context": "ting classification accuracy with enhanced testing...');\\n\\n    // Generate base accuracy report\\n    c"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 181,
        "column": 6,
        "context": "cedReport: ClassificationAccuracyReport = {\\n      ...baseAccuracyReport;\\n      pilotEnhancements: {\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 200,
        "column": 79,
        "context": "ting baseline metrics and success rate predictions...');\\n\\n    const successRateAnalysis = await this"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 233,
        "column": 68,
        "context": "e.log('‚è≠Ô∏è Classification tuning disabled, skipping...'),\\n      return {\\n        tuningPerformed: fal"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 240,
        "column": 78,
        "context": "g classification algorithms based on pilot results...');\\n\\n    const tuningResults: ClassificationTun"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 273,
        "column": 62,
        "context": "/ console.log('Re-validating accuracy after tuning...');\\n        const postTuningAccuracy = await th"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 311,
        "column": 60,
        "context": "console.log('Generating comprehensive pilot report...');\\n\\n    const pilotReport: AnalysisReport = {\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 314,
        "column": 6,
        "context": "\\n\\n    const pilotReport: AnalysisReport = {\\n      ...data.codebaseAnalysis;\\n      pilotPhase: {\\n    "
      }
    ],
    "src/services/campaign/unintentional-any-elimination/ProgressMonitoringSystem.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 31,
        "column": 6,
        "context": "\\n      progressStallThreshold: 24, // hours\\n      ...alertThresholds\\n    };\\n\\n    this.loadAlertHisto"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 108,
        "column": 60,
        "context": "console.log('Collecting real-time progress metrics...');\\n\\n    try {\\n      const currentReport = awai"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 318,
        "column": 20,
        "context": "ry(limit?: number): Alert[] {\\n    const alerts = [...this.alertHistory].reverse(), // Most recent fi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 326,
        "column": 21,
        "context": "r): BuildStabilityRecord[] {\\n    const history = [...this.buildStabilityHistory].reverse(), // Most "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 343,
        "column": 29,
        "context": "Thresholds>): void {\\n    this.alertThresholds = { ...this.alertThresholds, ...newThresholds };\\n    t"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 343,
        "column": 54,
        "context": "this.alertThresholds = { ...this.alertThresholds, ...newThresholds };\\n    this.emit('alert_threshold"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 351,
        "column": 13,
        "context": "AlertThresholds(): AlertThresholds {\\n    return { ...this.alertThresholds };\\n  }\\n\\n  // Private metho"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 358,
        "column": 48,
        "context": "{\\n      // // console.log('Updating dashboard data...');\\n\\n      const [analysisReport, progressMetri"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 549,
        "column": 10,
        "context": "historyData).map((alert: unknown) => ({\\n          ...alert;\\n          timestamp: new Date(alert.time"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 584,
        "column": 10,
        "context": "istoryData).map((record: unknown) => ({\\n          ...record;\\n          timestamp: new Date(record.ti"
      }
    ],
    "src/services/campaign/unintentional-any-elimination/ProgressiveImprovementEngine.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 143,
        "column": 12,
        "context": "  getBatchHistory(): BatchMetrics[] {\\n    return [...this.batchHistory]\\n  }\\n\\n  /**\\n   * Get current "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 150,
        "column": 13,
        "context": "veConfig(): UnintentionalAnyConfig {\\n    return { ...this.adaptiveConfig };\\n  }\\n\\n  /**\\n   * Set real"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 464,
        "column": 39,
        "context": "ded config\\n    const effectiveConfig = config ? { ...this.adaptiveConfig, ...config } : this.adaptiv"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 464,
        "column": 63,
        "context": "ectiveConfig = config ? { ...this.adaptiveConfig, ...config } : this.adaptiveConfig;\\n\\n    const batc"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 590,
        "column": 39,
        "context": "ded config\\n    const effectiveConfig = config ? { ...this.adaptiveConfig, ...config } : this.adaptiv"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 590,
        "column": 63,
        "context": "ectiveConfig = config ? { ...this.adaptiveConfig, ...config } : this.adaptiveConfig;\\n\\n    const init"
      }
    ],
    "src/services/campaign/unintentional-any-elimination/SafeTypeReplacer.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 178,
        "column": 35,
        "context": "Replacements);\\n          appliedReplacements.push(...result.applied);\\n          failedReplacements.p"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 179,
        "column": 34,
        "context": "esult.applied);\\n          failedReplacements.push(...result.failed);\\n\\n          if (result.failed.le"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 182,
        "column": 35,
        "context": ".length > 0) {\\n            compilationErrors.push(...result.errors);\\n          }\\n        } catch (er"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 185,
        "column": 34,
        "context": "catch (error) {\\n          failedReplacements.push(...fileReplacements);\\n          compilationErrors."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 217,
        "column": 31,
        "context": "ion.canRollback) {\\n        compilationErrors.push(...rollbackValidation.rollbackErrors);\\n        com"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 484,
        "column": 18,
        "context": "mark all replacements as failed\\n      failed.push(...replacements);\\n      errors.push(error instance"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 657,
        "column": 12,
        "context": "Strategies(): ReplacementStrategy[] {\\n    return [...this.strategies].sort((a, b) => a.priority - b."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 726,
        "column": 37,
        "context": "unding lines\\n    const allContext = [codeSnippet, ...surroundingLines].join(' ');\\n    if (allContext"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 779,
        "column": 37,
        "context": "unding lines\\n    const allContext = [codeSnippet, ...surroundingLines].join(' ');\\n\\n    // Check for "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 859,
        "column": 39,
        "context": "ction body\\n      const allContext = [codeSnippet, ...surroundingLines].join(' '),;\\n      if (allCont"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 898,
        "column": 37,
        "context": "unding lines\\n    const allContext = [codeSnippet, ...surroundingLines].join(' '),;\\n\\n    // Check for"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1018,
        "column": 37,
        "context": "ent patterns\\n    const allContext = [codeSnippet, ...surroundingLines].join(' ');\\n    if (allContext"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1091,
        "column": 37,
        "context": "} = context;\\n    const allContext = [codeSnippet, ...surroundingLines].join(' ').toLowerCase();\\n\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1106,
        "column": 37,
        "context": "} = context;\\n    const allContext = [codeSnippet, ...surroundingLines].join(' ').toLowerCase();\\n\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1122,
        "column": 37,
        "context": "} = context;\\n    const allContext = [codeSnippet, ...surroundingLines].join(' ').toLowerCase();\\n\\n   "
      }
    ],
    "src/services/campaign/unintentional-any-elimination/SafetyValidator.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 71,
        "column": 6,
        "context": " 30 seconds\\n      minimumTestCoverage: 0.8,\\n      ...safetyThresholds\\n    };\\n    this.buildCommand ="
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 143,
        "column": 47,
        "context": "e;\\n      compilationResult.compilationErrors.push(...performanceValid.validationErrors);\\n    }\\n\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 218,
        "column": 18,
        "context": "core + contextScore.score) / 2;\\n    warnings.push(...contextScore.warnings);\\n    recommendations.pus"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 219,
        "column": 25,
        "context": ".contextScore.warnings);\\n    recommendations.push(...contextScore.recommendations);\\n\\n    // Replacem"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 224,
        "column": 18,
        "context": "core + patternScore.score) / 2;\\n    warnings.push(...patternScore.warnings);\\n\\n    // File type safet"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 229,
        "column": 18,
        "context": "tyScore + fileScore.score) / 2;\\n    warnings.push(...fileScore.warnings);\\n\\n    // Validation require"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 552,
        "column": 13,
        "context": "fetyThresholds(): SafetyThresholds {\\n    return { ...this.safetyThresholds };\\n  }\\n\\n  /**\\n   * Update"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 559,
        "column": 30,
        "context": "hresholds>): void {\\n    this.safetyThresholds = { ...this.safetyThresholds, ...newThresholds };\\n  }\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 559,
        "column": 56,
        "context": "is.safetyThresholds = { ...this.safetyThresholds, ...newThresholds };\\n  }\\n}\\n\\nexport interface Safety"
      }
    ],
    "src/services/campaign/unintentional-any-elimination/UnintentionalAnyEliminationCampaign.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 39,
        "column": 6,
        "context": "ONSERVATIVE',\\n      validationFrequency: 5,\\n      ...config\\n    };\\n\\n    this.engine = new Progressiv"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 323,
        "column": 6,
        "context": " analysis only\\n    const analysisConfig = {\\n      ...this.config;\\n      maxFilesPerBatch: Math.min(t"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 375,
        "column": 81,
        "context": "mentation coverage below 80%, adding documentation...'),\\n\\n        // This would typically iterate th"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 435,
        "column": 13,
        "context": "etConfig(): UnintentionalAnyConfig {\\n    return { ...this.config }\\n  }\\n\\n  /**\\n   * Update configurat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 442,
        "column": 20,
        "context": "ntentionalAnyConfig>): void {\\n    this.config = { ...this.config, ...newConfig };\\n  }\\n\\n  /**\\n   * Ge"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 442,
        "column": 36,
        "context": "fig>): void {\\n    this.config = { ...this.config, ...newConfig };\\n  }\\n\\n  /**\\n   * Get documentation "
      }
    ],
    "src/services/campaign/unintentional-any-elimination/cli/index.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 102,
        "column": 38,
        "context": " 'analyze':\\n      executeTool('main', ['analyze', ...remainingArgs]);\\n      break;\\n    case 'classif"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 105,
        "column": 39,
        "context": "classify':\\n      executeTool('main', ['classify', ...remainingArgs]);\\n      break;\\n    case 'process"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 108,
        "column": 39,
        "context": "'process':\\n      executeTool('batch', ['process', ...remainingArgs]);\\n      break;\\n    case 'watch':"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 111,
        "column": 39,
        "context": "e 'watch':\\n      executeTool('monitor', ['start', ...remainingArgs]);\\n      break;\\n    case 'diagnos"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 114,
        "column": 38,
        "context": "'diagnose':\\n      executeTool('debug', ['system', ...remainingArgs]);\\n      break;\\n    case 'help':\\n"
      }
    ],
    "src/services/campaign/unintentional-any-elimination/config/index.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 236,
        "column": 24,
        "context": "lAnyConfig {\\n    return {\\n      classification: { ...DEFAULT_CONFIG.classification, ...loadedConfig."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 236,
        "column": 58,
        "context": "assification: { ...DEFAULT_CONFIG.classification, ...loadedConfig.classification },\\n      domain: { "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 237,
        "column": 16,
        "context": "...loadedConfig.classification },\\n      domain: { ...DEFAULT_CONFIG.domain, ...loadedConfig.domain }"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 237,
        "column": 42,
        "context": "tion },\\n      domain: { ...DEFAULT_CONFIG.domain, ...loadedConfig.domain },\\n      safety: { ...DEFAU"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 238,
        "column": 16,
        "context": "domain, ...loadedConfig.domain },\\n      safety: { ...DEFAULT_CONFIG.safety, ...loadedConfig.safety }"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 238,
        "column": 42,
        "context": "main },\\n      safety: { ...DEFAULT_CONFIG.safety, ...loadedConfig.safety },\\n      targets: { ...DEFA"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 239,
        "column": 17,
        "context": "afety, ...loadedConfig.safety },\\n      targets: { ...DEFAULT_CONFIG.targets, ...loadedConfig.targets"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 239,
        "column": 44,
        "context": "ty },\\n      targets: { ...DEFAULT_CONFIG.targets, ...loadedConfig.targets },\\n      version: loadedCo"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 266,
        "column": 13,
        "context": "etConfig(): UnintentionalAnyConfig {\\n    return { ...this.config };\\n  }\\n\\n  /**\\n   * Update configura"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 273,
        "column": 43,
        "context": "void {\\n    this.config = this.mergeWithDefaults({ ...this.config, ...updates });\\n    this.saveConfig"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 273,
        "column": 59,
        "context": "config = this.mergeWithDefaults({ ...this.config, ...updates });\\n    this.saveConfig();\\n  }\\n\\n  /**\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 281,
        "column": 13,
        "context": "tionConfig(): ClassificationConfig {\\n    return { ...this.config.classification };\\n  }\\n\\n  /**\\n   * U"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 288,
        "column": 35,
        "context": "nfig>): void {\\n    this.config.classification = { ...this.config.classification, ...updates };\\n    t"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 288,
        "column": 66,
        "context": "classification = { ...this.config.classification, ...updates };\\n    this.saveConfig();\\n  }\\n\\n  /**\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 296,
        "column": 13,
        "context": "\\n  getDomainConfig(): DomainConfig {\\n    return { ...this.config.domain };\\n  }\\n\\n  /**\\n   * Update do"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 303,
        "column": 27,
        "context": "DomainConfig>): void {\\n    this.config.domain = { ...this.config.domain, ...updates };\\n    this.save"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 303,
        "column": 50,
        "context": "    this.config.domain = { ...this.config.domain, ...updates };\\n    this.saveConfig();\\n  }\\n\\n  /**\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 311,
        "column": 13,
        "context": "\\n  getSafetyConfig(): SafetyConfig {\\n    return { ...this.config.safety };\\n  }\\n\\n  /**\\n   * Update sa"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 318,
        "column": 27,
        "context": "SafetyConfig>): void {\\n    this.config.safety = { ...this.config.safety, ...updates };\\n    this.save"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 318,
        "column": 50,
        "context": "    this.config.safety = { ...this.config.safety, ...updates };\\n    this.saveConfig();\\n  }\\n\\n  /**\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 326,
        "column": 13,
        "context": "\\n  getTargetConfig(): TargetConfig {\\n    return { ...this.config.targets };\\n  }\\n\\n  /**\\n   * Update t"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 333,
        "column": 28,
        "context": "argetConfig>): void {\\n    this.config.targets = { ...this.config.targets, ...updates };\\n    this.sav"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 333,
        "column": 52,
        "context": "  this.config.targets = { ...this.config.targets, ...updates };\\n    this.saveConfig();\\n  }\\n\\n  /**\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 341,
        "column": 20,
        "context": "/\\n  resetToDefaults(): void {\\n    this.config = { ...DEFAULT_CONFIG };\\n    this.saveConfig();\\n  }\\n\\n "
      }
    ],
    "src/services/campaign/unintentional-any-elimination/config/loader.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 89,
        "column": 19,
        "context": "n, source: unknown): unknown {\\n  const result = { ...target };\\n\\n  for (const key in source) {\\n    if"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 149,
        "column": 14,
        "context": " = configManager.validateConfig();\\n\\n  errors.push(...validation.errors);\\n\\n  return {\\n    isValid: er"
      }
    ],
    "src/services/campaign/unintentional-any-elimination/deployment/cli.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 72,
        "column": 77,
        "context": " Starting Unintentional Any Elimination deployment...');\\n\\n      let phases = createStandardDeploymen"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 153,
        "column": 59,
        "context": "// console.log('üîç Validating deployment readiness...');\\n\\n      if (options.phase) {\\n        const p"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 167,
        "column": 10,
        "context": " await deploymentManager.executePhase({\\n          ...phase;\\n          tasks: [], // Skip tasks, only"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 258,
        "column": 55,
        "context": " // // console.log('üîÑ Starting rollback procedure...');\\n\\n      if (options.phase) {\\n        // // c"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 267,
        "column": 57,
        "context": " // // console.log('Rolling back entire deployment...');\\n        // Implement full rollback\\n      }\\n"
      }
    ],
    "src/services/campaign/unintentional-any-elimination/deployment/index.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 199,
        "column": 27,
        "context": "teriaResult.success) {\\n        result.errors.push(...criteriaResult.errors);\\n      }\\n    } catch (er"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 232,
        "column": 15,
        "context": "= spawn(task.command, task.args, {\\n        env: { ...process.env, ...task.environment },\\n        std"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 232,
        "column": 31,
        "context": "mand, task.args, {\\n        env: { ...process.env, ...task.environment },\\n        stdio: 'pipe'\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 439,
        "column": 12,
        "context": "  */\\n  getDeploymentLog(): string[] {\\n    return [...this.deploymentLog]\\n  }\\n\\n  /**\\n   * Save deploy"
      }
    ],
    "src/services/campaign/unintentional-any-elimination/deployment/setup-monitoring.ts": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`[ALERT] \\${condition.severity.toUpperCase()}: \\${",
        "line": 388,
        "column": 25,
        "context": "\\n        case 'console':\\n          console.error(\\`[ALERT] \\${condition.severity.toUpperCase()}: \\${"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Description: \\${",
        "line": 389,
        "column": 25,
        "context": ": \\${condition.name}\\`);\\n          console.error(\\`Description: \\${condition.description}\\`);\\n      "
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Metrics: \\${",
        "line": 390,
        "column": 25,
        "context": "ndition.description}\\`);\\n          console.error(\\`Metrics: \\${JSON.stringify(metrics, null, 2)}\\`);"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`[\\${alert.timestamp.toISOString()}] \\${condition.severity.toUpperCase()}: \\${condition.name} - \\${",
        "line": 395,
        "column": 28,
        "context": "iro/logs/alerts.log';\\n          const logEntry = \\`[\\${alert.timestamp.toISOString()}] \\${condition."
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`\\${endpoint.command} \\${",
        "line": 441,
        "column": 20,
        "context": "ks.endpoints) {\\n        try {\\n          execSync(\\`\\${endpoint.command} \\${endpoint.args.join(' ')}\\"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Health Check Failed: \\${",
        "line": 461,
        "column": 19,
        "context": "int\\n          this.sendAlert({\\n            name: \\`Health Check Failed: \\${endpoint.name}\\`,\\n       "
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Health check for \\${",
        "line": 463,
        "column": 26,
        "context": "   severity: 'warning',\\n            description: \\`Health check for \\${endpoint.name} failed\\`\\n     "
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`\\\\nSystem Status: \\${",
        "line": 549,
        "column": 23,
        "context": "rvice.getCurrentStatus();\\n\\n    // // console.log(\\`\\\\nSystem Status: \\${status.healthy ? 'üü¢ HEALTHY"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Timestamp: \\${",
        "line": 550,
        "column": 23,
        "context": "THY' : 'üî¥ UNHEALTHY'}\\`);\\n    // // console.log(\\`Timestamp: \\${status.metrics.timestamp.toISOStrin"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`TypeScript Errors: \\${",
        "line": 553,
        "column": 23,
        "context": "log('\\\\n--- METRICS ---');\\n    // // console.log(\\`TypeScript Errors: \\${status.metrics.typescriptEr"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Success Rate: \\${",
        "line": 554,
        "column": 23,
        "context": "rics.typescriptErrors}\\`);\\n    // // console.log(\\`Success Rate: \\${(status.metrics.successRate * 10"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Build Status: \\${",
        "line": 555,
        "column": 23,
        "context": "te * 100).toFixed(1)}%\\`);\\n    // // console.log(\\`Build Status: \\${status.metrics.buildStatus.toUpp"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Config Valid: \\${",
        "line": 556,
        "column": 23,
        "context": "dStatus.toUpperCase()}\\`);\\n    // // console.log(\\`Config Valid: \\${status.metrics.configValid ? 'YE"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`Campaign Active: \\${",
        "line": 557,
        "column": 23,
        "context": "gValid ? 'YES' : 'NO'}\\`);\\n    // // console.log(\\`Campaign Active: \\${status.metrics.campaignActive"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`\\${time}: Errors=\\${metric.typescriptErrors}, Success=\\${(metric.successRate * 100).toFixed(1)}%, Build=\\${",
        "line": 563,
        "column": 25,
        "context": "mp.toLocaleTimeString();\\n      // // console.log(\\`\\${time}: Errors=\\${metric.typescriptErrors}, Suc"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 496,
        "column": 12,
        "context": " getMetricsHistory(): MetricsData[] {\\n    return [...this.metricsHistory]\\n  }\\n\\n  /**\\n   * Get curren"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 581,
        "column": 58,
        "context": "console.log('\\\\nShutting down monitoring dashboard...');\\n  monitoringService.stop();\\n  process.exit("
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 596,
        "column": 89,
        "context": "ing and alerting for Unintentional Any Elimination...');\\n\\n  try {\\n    // Setup directories\\n    setup"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 619,
        "column": 55,
        "context": "'Starting Unintentional Any Elimination Monitoring...'\\n\\n# Start monitoring service in background\\nnpx"
      }
    ],
    "src/services/campaign/unintentional-any-elimination/deployment/validate-monitoring.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 42,
        "column": 15,
        "context": "\\n  // Check health check endpoints\\n  results.push(...(await validateHealthChecks()));\\n\\n  return resu"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 359,
        "column": 61,
        "context": "sole.log('Validating monitoring and alerting setup...\\n');\\n\\n  try {\\n    const results = await valida"
      }
    ],
    "src/services/campaign/unintentional-any-elimination/integration-check.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 6,
        "column": 75,
        "context": "Unintentional Any Elimination Campaign Integration...');\\n\\ntry {\\n  // Check if the main exports work\\n"
      }
    ],
    "src/services/campaign/unintentional-any-elimination/verify-integration.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 14,
        "column": 84,
        "context": "Unintentional Any Elimination Campaign Integration...');\\n\\n  try {\\n    // Test 1: Create campaign con"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 18,
        "column": 52,
        "context": "  // // console.log('\\n1. Testing factory function...');\\n    const controller = createUnintentionalA"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 28,
        "column": 67,
        "context": ".log('\\n2. Testing campaign configuration creation...');\\n    const campaignConfig =\\n      Unintentio"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 37,
        "column": 67,
        "context": ".log('\\n3. Testing automation script compatibility...');\\n    const compatibility = UnintentionalAnyI"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 44,
        "column": 57,
        "context": "// console.log('\\n4. Testing configuration updates...');\\n    const customConfig: Partial<Unintention"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 60,
        "column": 53,
        "context": " // // console.log('\\n5. Testing metrics retrieval...');\\n    try {\\n      const metrics = await contr"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 73,
        "column": 50,
        "context": "    // // console.log('\\n6. Testing phase creation...');\\n    const campaign = controller.getUnintent"
      }
    ],
    "src/services/celestialCalculations.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 178,
        "column": 15,
        "context": "fluences = cached.dominantPlanets;\\n            ? [...cached.dominantPlanets.map(p => p.name), cached"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 231,
        "column": 8,
        "context": "and tarot\\n      const astroInfluences = [\\n        ...dominantPlanets.map(p => p.name),,;\\n        zod"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 233,
        "column": 8,
        "context": "s.map(p => p.name),,;\\n        zodiacSign,\\n        ...tarotInfluences.map(t => t.name),,;\\n        'al"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 454,
        "column": 8,
        "context": " safeAlignment.astrologicalInfluences = [\\n        ...(safeAlignment.dominantPlanets?.map(p => p.name"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 733,
        "column": 12,
        "context": "        dominantPlanets[sunIndex] = {\\n            ...dominantPlanets[sunIndex],\\n            effect: "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 767,
        "column": 10,
        "context": "      dominantPlanets[jupiterIndex] = {\\n          ...dominantPlanets[jupiterIndex],\\n          influe"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 785,
        "column": 10,
        "context": "       dominantPlanets[saturnIndex] = {\\n          ...dominantPlanets[saturnIndex],\\n          influen"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1093,
        "column": 45,
        "context": "text\\n      const balance: ElementalProperties = { ...alignment.elementalBalance } as ElementalProper"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1579,
        "column": 57,
        "context": "/ Similar mappings for cups, swords, and pentacles...\\n      cups: {\\n        upright: [\\n          'Lo"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 255,
        "column": 7,
        "context": "nt and includes tarot influences and 'all'\\n      } as unknown as CelestialAlignment;\\n\\n      // Cache"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 408,
        "column": 5,
        "context": "lInfluences: ['Sun', 'Moon', 'libra', 'all']\\n    } as unknown as CelestialAlignment;\\n\\n    // Overrid"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 483,
        "column": 5,
        "context": "Ensure this is always present and has values\\n    } as unknown as CelestialAlignment;\\n  }\\n\\n  /**\\n   *"
      }
    ],
    "src/services/errorHandler.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 98,
        "column": 85,
        "context": "tion(error, { extra: { type, severity, component, ...context } });\\n\\n    return {\\n      error,\\n      "
      }
    ],
    "src/services/examples/UnifiedScoringExample.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 319,
        "column": 8,
        "context": "{\\n      const context: ScoringContext = {\\n        ...baseContext,\\n        item,\\n      };\\n\\n      cons"
      }
    ],
    "src/services/ingredientMappingService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 74,
        "column": 28,
        "context": "ay(seasonalDishes)) {\\n            allRecipes.push(...(seasonalDishes as unknown as Recipe[]))\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 289,
        "column": 32,
        "context": "kest combinations\\n    const sortedCombinations = [...combinations].sort((a, b) => b.compatibility - "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 74,
        "column": 46,
        "context": ") {\\n            allRecipes.push(...(seasonalDishes as unknown as Recipe[]))\\n          }\\n        });\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 82,
        "column": 16,
        "context": "ilterRecipesByIngredientMappings(\\n      allRecipes as unknown as Recipe[],\\n      options.elementalTa"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 130,
        "column": 48,
        "context": ";\\n          originalIngredient.elementalProperties as unknown as ElementalProperties;\\n          mapp"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 131,
        "column": 37,
        "context": "lProperties;\\n          mapping.elementalProperties as unknown as ElementalProperties\\n        ),\\n\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 139,
        "column": 48,
        "context": "(\\n          originalIngredient.elementalProperties as unknown as ElementalProperties;\\n          mapp"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 140,
        "column": 37,
        "context": "lProperties;\\n          mapping.elementalProperties as unknown as ElementalProperties\\n        ),\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 180,
        "column": 34,
        "context": "talSimilarity(;\\n      mapping1.elementalProperties as unknown as ElementalProperties;\\n      mapping2"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 181,
        "column": 34,
        "context": "ntalProperties;\\n      mapping2.elementalProperties as unknown as ElementalProperties\\n    );\\n\\n    // "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 267,
        "column": 26,
        "context": "alculateCompatibility(;\\n            ing1.matchedTo as unknown as IngredientMapping;\\n            ing2"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 268,
        "column": 26,
        "context": "n as IngredientMapping;\\n            ing2.matchedTo as unknown as IngredientMapping\\n          ),\\n\\n   "
      }
    ],
    "src/services/initializationService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 209,
        "column": 6,
        "context": "ipe[] {\\n    return recipes.map(recipe => ({\\n      ...recipe,\\n      score: this.calculateRecipeScore("
      }
    ],
    "src/services/linting/AutomatedLintingFixer.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 131,
        "column": 6,
        "context": "logical*',\\n        '**/*campaign*'\\n      ],\\n      ...safetyProtocols\\n    };\\n  }\\n\\n  /**\\n   * Apply au"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 143,
        "column": 71,
        "context": "ting automated linting fixes with safety protocols...');\\n\\n    const batchOptions: BatchProcessingOpt"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 152,
        "column": 6,
        "context": "  createBackups: true,\\n      dryRun: false,\\n      ...options\\n    };\\n\\n    const result: AutomatedFixR"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 178,
        "column": 47,
        "context": " {\\n        log.info('üîç Running pre-fix validation...');\\n        const preValidation = await this.ru"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 180,
        "column": 38,
        "context": "lidation();\\n        result.validationResults.push(...preValidation);\\n\\n        if (preValidation.some"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 189,
        "column": 36,
        "context": "leRollback) {\\n        log.info('üíæ Creating backup...');\\n        this.currentRollbackInfo = await th"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 215,
        "column": 37,
        "context": "ailedIssues;\\n          result.processedFiles.push(...batchResult.processedFiles);\\n          result.e"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 216,
        "column": 29,
        "context": "ult.processedFiles);\\n          result.errors.push(...batchResult.errors);\\n\\n          // Validate aft"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 221,
        "column": 42,
        "context": "tion();\\n            result.validationResults.push(...batchValidation);\\n\\n            if (batchValidat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 256,
        "column": 44,
        "context": "ix) {\\n        log.info('‚úÖ Running final validation...');\\n        const finalValidation = await this."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 258,
        "column": 38,
        "context": "lidation();\\n        result.validationResults.push(...finalValidation);\\n\\n        const buildSuccess ="
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 285,
        "column": 50,
        "context": "        log.info('üîÑ Performing emergency rollback...');\\n        await this.performRollback();\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 310,
        "column": 42,
        "context": "sult> {\\n    log.info('üßπ Handling unused variables...');\\n\\n    const fixOptions: UnusedVariableFixOpt"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 318,
        "column": 6,
        "context": "tFiles: false,\\n      skipDomainFiles: true,\\n      ...options\\n    };\\n\\n    const unusedVarIssues = iss"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 407,
        "column": 45,
        "context": "t> {\\n    log.info('üì¶ Optimizing import statements...');\\n\\n    const importOptions: ImportOptimizatio"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 415,
        "column": 6,
        "context": "rveComments: true,\\n      sortImports: true,\\n      ...options\\n    };\\n\\n    const importIssues = issues"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 499,
        "column": 44,
        "context": "lt> {\\n    log.info('üè∑Ô∏è Improving type annotations...');\\n\\n    const typeOptions: TypeAnnotationOptio"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 506,
        "column": 6,
        "context": "lanets/**'],\\n      maxComplexity: 'simple',\\n      ...options\\n    };\\n\\n    const typeIssues = issues.f"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 589,
        "column": 49,
        "context": "\\n    log.info('üîç Running comprehensive validation...');\\n    return await this.runValidation();\\n  }\\n"
      }
    ],
    "src/services/linting/AutomatedLintingIntegration.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 99,
        "column": 52,
        "context": "  log.info('üöÄ Starting automated linting workflow...');\\n\\n    try {\\n      // Step 1: Comprehensive A"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 109,
        "column": 8,
        "context": ": true,\\n        generateStrategies: true,\\n        ...options.analysisOptions\\n      });\\n\\n      const "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 169,
        "column": 47,
        "context": " {\\n    log.info('‚ö° Executing quick automated fixes...');\\n\\n    try {\\n      // Quick analysis to ident"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 236,
        "column": 50,
        "context": "    log.info('üßπ Executing unused variable cleanup...');\\n\\n    try {\\n      // Analyze for unused vari"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 313,
        "column": 46,
        "context": "> {\\n    log.info('üì¶ Executing import optimization...');\\n\\n    try {\\n      // Analyze for import-rela"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 404,
        "column": 6,
        "context": "*campaign*',\\n        '**/test*/**'\\n      ],\\n      ...options.safetyProtocols\\n    };\\n  }\\n\\n  private a"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 419,
        "column": 6,
        "context": "rue,\\n      dryRun: options.dryRun || false,\\n      ...options.batchProcessingOptions\\n    };\\n\\n    // M"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 440,
        "column": 64,
        "context": "fo('üßπ Running specialized unused variable cleanup...');\\n        fixResults.unusedVariables = await "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 454,
        "column": 60,
        "context": "g.info('üì¶ Running specialized import optimization...');\\n        fixResults.imports = await this.aut"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 468,
        "column": 58,
        "context": "log.info('üè∑Ô∏è Running type annotation improvements...');\\n        fixResults.typeAnnotations = await "
      }
    ],
    "src/services/linting/DomainContextDetector.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 206,
        "column": 24,
        "context": "ileContent(absolutePath);\\n        indicators.push(...contentAnalysis.indicators);\\n        confidence"
      }
    ],
    "src/services/linting/ErrorClassificationSystem.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 567,
        "column": 23,
        "context": "  ): ErrorClassification {\\n    const enhanced = { ...classification };\\n\\n    // Update auto-fix capab"
      }
    ],
    "src/services/linting/LintingAlertingSystem.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 90,
        "column": 60,
        "context": "console.log(`üö® Processing ${alerts.length} alerts...`);\\n\\n    // Filter alerts based on cooldown and"
      }
    ],
    "src/services/linting/LintingAnalysisService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 98,
        "column": 56,
        "context": "g.info('üöÄ Starting comprehensive linting analysis...');\\n\\n    try {\\n      // Step 1: Analyze all lin"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 102,
        "column": 43,
        "context": "issues\\n      log.info('üìä Analyzing linting issues...');\\n      const categorizedErrors = await this."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 106,
        "column": 37,
        "context": "led analysis\\n      log.info('üîç Classifying errors...');\\n      const classifications = await this.cl"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 112,
        "column": 47,
        "context": " {\\n        log.info('üèóÔ∏è Analyzing domain contexts...');\\n        fileAnalyses = await this.analyzeFi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 121,
        "column": 53,
        "context": "     log.info('üéØ Generating resolution strategies...');\\n        const strategyResult = await this.g"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 133,
        "column": 45,
        "context": "ions\\n      log.info('üìã Generating recommendations...');\\n      const summary = this.generateSummary("
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 184,
        "column": 49,
        "context": "\\n    log.info('‚ö° Performing quick linting analysis...');\\n\\n    const categorizedErrors = await this.e"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 291,
        "column": 6,
        "context": "derate',\\n      timeConstraints: 'moderate',\\n      ...projectContext\\n    };\\n\\n    for (const issue of "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 519,
        "column": 20,
        "context": "confidenceScores.length || 0;\\n    const sorted = [...confidenceScores].sort((a, b) => a - b);\\n    co"
      }
    ],
    "src/services/linting/LintingCampaignIntegration.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 184,
        "column": 20,
        "context": "await this.executeTool(tool);\\n        issues.push(...result.issues);\\n        recommendations.push(.."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 185,
        "column": 29,
        "context": "h(...result.issues);\\n        recommendations.push(...result.recommendations);\\n      } catch (error) "
      }
    ],
    "src/services/linting/LintingErrorAnalyzer.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 122,
        "column": 67,
        "context": "('üîç Starting comprehensive linting error analysis...');\\n\\n    try {\\n      // Run ESLint to get all i"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 151,
        "column": 48,
        "context": "{\\n    void log.info('üéØ Generating resolution plan...');\\n\\n    const phases: ResolutionPhase[] = [];\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 172,
        "column": 6,
        "context": "edium risk)\\n    const importStyleIssues = [\\n      ...(categorizedErrors.byCategory['import'] || []),"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 173,
        "column": 6,
        "context": "egorizedErrors.byCategory['import'] || []),\\n      ...(categorizedErrors.byCategory['style'] || [])\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 290,
        "column": 12,
        "context": "t.messages) {\\n          issues.push({\\n            ...message;\\n            filePath: fileResult.fileP"
      }
    ],
    "src/services/linting/LintingProgressTracker.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 87,
        "column": 45,
        "context": "ry {\\n      logger.info('Collecting linting metrics...');\\n\\n      // Run ESLint with JSON output\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 96,
        "column": 8,
        "context": "    const fullMetrics: LintingMetrics = {\\n        ...metrics;\\n        timestamp: new Date(),\\n       "
      }
    ],
    "src/services/linting/LintingQualityGates.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 348,
        "column": 10,
        "context": ".length > 0) {\\n        violations.push(\\n          ...parserErrors.map(error => ({\\n            type: "
      }
    ],
    "src/services/linting/LintingValidationDashboard.ts": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`# Linting Excellence Dashboard Report;\n\nGenerated: ${new Date().toISOString()}\n\n## üìä Overall Status\n\n- **Validation Status**: ${result.passed ? '‚úÖ PASSED' : '‚ùå FAILED'}\n- **Quality Score**: ${result.metrics.qualityScore}/100\n- **Total Issues**: ${result.metrics.totalIssues}\n- **Regression Detected**: ${result.regressionAnalysis.detected ? '‚ö†Ô∏è YES' : '‚úÖ NO'}\n\n## üîç Detailed Metrics\n\n### Error Breakdown\n- **Parser Errors**: ${result.metrics.parserErrors} ${result.metrics.parserErrors === 0 ? '‚úÖ' : 'üö®'};\n- **TypeScript Errors**: ${result.metrics.errors}\n- **Explicit Any Errors**: ${result.metrics.explicitAnyErrors} ${result.metrics.explicitAnyErrors < 100 ? '‚úÖ' : '‚ö°'}\n- **Warnings**: ${result.metrics.warnings}\n\n### Code Quality Issues\n- **Import Order Issues**: ${result.metrics.importOrderIssues}\n- **Unused Variables**: ${result.metrics.unusedVariables}\n- **React Hooks Issues**: ${result.metrics.reactHooksIssues}\n- **Console Statements**: ${result.metrics.consoleStatements}\n\n### Domain-Specific Issues\n- **Astrological Calculations**: ${result.metrics.domainSpecificIssues.astrologicalCalculations}\n- **Campaign System**: ${result.metrics.domainSpecificIssues.campaignSystem}\n- **Test Files**: ${result.metrics.domainSpecificIssues.testFiles}\n\n### Performance Metrics\n- **Linting Duration**: ${result.metrics.performanceMetrics.lintingDuration}ms\n- **Cache Hit Rate**: ${(result.metrics.performanceMetrics.cacheHitRate * 100).toFixed(1)}%\n- **Memory Usage**: ${result.metrics.performanceMetrics.memoryUsage.toFixed(1)}MB\n- **Files Processed**: ${result.metrics.performanceMetrics.filesProcessed}\n\n## üö® Active Alerts\n\n${\n  result.alerts.length === 0;\n    ? 'No active alerts ‚úÖ'\n    : result.alerts\n        .map(\n          alert =>;\n            `- **${alert.severity.toUpperCase()}**: ${alert.message}",
        "line": 492,
        "column": 19,
        "context": "linting-dashboard-report.md';\\n\\n    const report = `# Linting Excellence Dashboard Report;\\n\\nGenerated"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`,\n        )\n        .join('\\n')\n}\n\n## üìà Regression Analysis\n\n${\n  result.regressionAnalysis.detected\n    ? `\n**Regression Detected**: ${result.regressionAnalysis.severity.toUpperCase()}\n- **Affected Metrics**: ${result.regressionAnalysis.affectedMetrics.join(', ')}",
        "line": 536,
        "column": 113,
        "context": "sage} (${alert.currentValue} > ${alert.threshold})`,\\n        )\\n        .join('\\n')\\n}\\n\\n## üìà Regressi"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`\n    : '**No Regression Detected** ‚úÖ'\n}\n\n## üí° Recommendations\n\n${result.recommendations.map(rec => `- ${rec}`).join('\\n')}",
        "line": 549,
        "column": 0,
        "context": "storicalComparison.changePercentage.toFixed(1)}%)\\n`\\n    : '**No Regression Detected** ‚úÖ'\\n}\\n\\n## üí° Re"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`# Linting Excellence Dashboard Report;\n\nGenerated: ${new Date().toISOString()}\n\n## üìä Overall Status\n\n- **Validation Status**: ${result.passed ? '‚úÖ PASSED' : '‚ùå FAILED'}\n- **Quality Score**: ${result.metrics.qualityScore}/100\n- **Total Issues**: ${result.metrics.totalIssues}\n- **Regression Detected**: ${result.regressionAnalysis.detected ? '‚ö†Ô∏è YES' : '‚úÖ NO'}\n\n## üîç Detailed Metrics\n\n### Error Breakdown\n- **Parser Errors**: ${result.metrics.parserErrors} ${result.metrics.parserErrors === 0 ? '‚úÖ' : 'üö®'};\n- **TypeScript Errors**: ${result.metrics.errors}\n- **Explicit Any Errors**: ${result.metrics.explicitAnyErrors} ${result.metrics.explicitAnyErrors < 100 ? '‚úÖ' : '‚ö°'}\n- **Warnings**: ${result.metrics.warnings}\n\n### Code Quality Issues\n- **Import Order Issues**: ${result.metrics.importOrderIssues}\n- **Unused Variables**: ${result.metrics.unusedVariables}\n- **React Hooks Issues**: ${result.metrics.reactHooksIssues}\n- **Console Statements**: ${result.metrics.consoleStatements}\n\n### Domain-Specific Issues\n- **Astrological Calculations**: ${result.metrics.domainSpecificIssues.astrologicalCalculations}\n- **Campaign System**: ${result.metrics.domainSpecificIssues.campaignSystem}\n- **Test Files**: ${result.metrics.domainSpecificIssues.testFiles}\n\n### Performance Metrics\n- **Linting Duration**: ${result.metrics.performanceMetrics.lintingDuration}ms\n- **Cache Hit Rate**: ${(result.metrics.performanceMetrics.cacheHitRate * 100).toFixed(1)}%\n- **Memory Usage**: ${result.metrics.performanceMetrics.memoryUsage.toFixed(1)}MB\n- **Files Processed**: ${result.metrics.performanceMetrics.filesProcessed}\n\n## üö® Active Alerts\n\n${\n  result.alerts.length === 0;\n    ? 'No active alerts ‚úÖ'\n    : result.alerts\n        .map(\n          alert =>;\n            `- **${alert.severity.toUpperCase()}**: ${alert.message} (${alert.currentValue} > ${alert.threshold})`,\n        )\n        .join('\\n')\n}",
        "line": 492,
        "column": 19,
        "context": "linting-dashboard-report.md';\\n\\n    const report = `# Linting Excellence Dashboard Report;\\n\\nGenerated"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`\n    : '**No Regression Detected** ‚úÖ'\n}\n\n## üí° Recommendations\n\n${result.recommendations.map(rec => `- ${rec}`).join('\\n')}",
        "line": 549,
        "column": 0,
        "context": "storicalComparison.changePercentage.toFixed(1)}%)\\n`\\n    : '**No Regression Detected** ‚úÖ'\\n}\\n\\n## üí° Re"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n  result.alerts.length === 0;\n    ? 'No active alerts ‚úÖ'\n    : result.alerts\n        .map(\n          alert =>;\n            `- **${",
        "line": 530,
        "column": 0,
        "context": "anceMetrics.filesProcessed}\\n\\n## üö® Active Alerts\\n\\n${\\n  result.alerts.length === 0;\\n    ? 'No active "
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n  result.regressionAnalysis.detected\n    ? `\n**Regression Detected**: ${",
        "line": 543,
        "column": 0,
        "context": "        .join('\\n')\\n}\\n\\n## üìà Regression Analysis\\n\\n${\\n  result.regressionAnalysis.detected\\n    ? `\\n**"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${result.recommendations.map(rec => `- ${",
        "line": 555,
        "column": 0,
        "context": "egression Detected** ‚úÖ'\\n}\\n\\n## üí° Recommendations\\n\\n${result.recommendations.map(rec => `- ${rec}`).jo"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 124,
        "column": 67,
        "context": ".log('üîç Starting comprehensive linting validation...');\\n\\n    const startTime = Date.now();\\n    cons"
      }
    ],
    "src/services/linting/PerformanceMonitoringService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 58,
        "column": 6,
        "context": "      minPerformanceImprovement: 60, // 60%\\n      ...thresholds\\n    };\\n\\n    this.loadExistingMetrics"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 449,
        "column": 21,
        "context": "alTime}ms)`\\n      });\\n    }\\n\\n    this.alerts.push(...alerts);\\n\\n    // Keep only last 50 alerts\\n    i"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 563,
        "column": 10,
        "context": "metrics = parsed.map((m: unknown) => ({\\n          ...m;\\n          timestamp: new Date(m.timestamp)\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 579,
        "column": 10,
        "context": ".alerts = parsed.map((a: unknown) => ({\\n          ...a;\\n          timestamp: new Date(a.timestamp)\\n "
      }
    ],
    "src/services/linting/ResolutionStrategyGenerator.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 164,
        "column": 23,
        "context": "tial<ResolutionStrategy> {\\n    const enhanced = { ...baseStrategy };\\n\\n    // Get domain-specific enh"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 170,
        "column": 24,
        "context": "rge domain-specific steps\\n      enhanced.steps = [...(enhanced.steps || []), ...(domainStrategy.step"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 170,
        "column": 51,
        "context": "     enhanced.steps = [...(enhanced.steps || []), ...(domainStrategy.steps || [])];\\n\\n      // Merge "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 174,
        "column": 8,
        "context": "quisites\\n      enhanced.prerequisites = [\\n        ...(enhanced.prerequisites || []),\\n        ...(dom"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 175,
        "column": 8,
        "context": "       ...(enhanced.prerequisites || []),\\n        ...(domainStrategy.prerequisites || [])\\n      ];\\n\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 180,
        "column": 8,
        "context": "      enhanced.validationRequirements = [\\n        ...(enhanced.validationRequirements || []),\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 181,
        "column": 8,
        "context": ".(enhanced.validationRequirements || []),\\n        ...(domainStrategy.validationRequirements || [])\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 212,
        "column": 23,
        "context": "tial<ResolutionStrategy> {\\n    const adjusted = { ...strategy };\\n\\n    // Adjust based on risk tolera"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 235,
        "column": 8,
        "context": "s = (adjusted.steps || []).map(step => ({\\n        ...step;\\n        automatable: step.automatable || "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 613,
        "column": 20,
        "context": "level, then by estimated time\\n    const sorted = [...strategies].sort((a, b) => {\\n      const priori"
      }
    ],
    "src/services/linting/SafeUnusedImportRemover.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 76,
        "column": 53,
        "context": " log.info('üîç Starting Safe Unused Import Analysis...\\n');\\n\\n    const result: ImportRemovalResult = "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 143,
        "column": 53,
        "context": " log.info('üîç Analyzing unused imports from ESLint...');\\n\\n    try {\\n      const lintOutput = execSyn"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 201,
        "column": 53,
        "context": " log.info('üìã Categorizing imports by safety level...');\\n\\n    const categorized = {\\n      safe: [] a"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 321,
        "column": 21,
        "context": "ized.preserve.length > 10) {\\n        log.info(`   ... and ${categorized.preserve.length - 10} more`)"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 329,
        "column": 21,
        "context": "gorized.review.length > 5) {\\n        log.info(`   ... and ${categorized.review.length - 5} more`);\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 360,
        "column": 71,
        "context": "Removing ${safeImports.length} safe unused imports...`);\\n\\n    try {\\n      // Run ESLint auto-fix wit"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 387,
        "column": 37,
        "context": "e<boolean> {\\n    log.info('\\nüîç Validating changes...');\\n\\n    try {\\n      // Check TypeScript compil"
      }
    ],
    "src/services/linting/UnusedImportProcessor.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 39,
        "column": 42,
        "context": "sult> {\\n    log.info('üßπ Processing import cleanup...\\n');\\n\\n    const result: ImportCleanupResult = "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 69,
        "column": 35,
        "context": "romise<void> {\\n    log.info('üìã Organizing imports...');\\n\\n    try {\\n      const output = execSync('y"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 99,
        "column": 42,
        "context": "void> {\\n    log.info('üóëÔ∏è  Removing unused imports...');\\n\\n    try {\\n      // Create a focused ESLint"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 194,
        "column": 44,
        "context": "an> {\\n    log.info('\\nüîç Validating import changes...');\\n\\n    try {\\n      // Check TypeScript compil"
      }
    ],
    "src/services/linting/UnusedVariableProcessor.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 64,
        "column": 51,
        "context": "   log.info('üîç Analyzing unused variable warnings...');\\n\\n    const issues = await this.detectUnused"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 85,
        "column": 38,
        "context": "ed.skipped;\\n        result.preservedCritical.push(...processed.preserved);\\n      } catch (error) {\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 396,
        "column": 37,
        "context": " {\\n    try {\\n      log.info('üîç Validating changes...');\\n\\n      // Check if TypeScript compilation s"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 430,
        "column": 20,
        "context": "servedCritical.length > 10) {\\n        log.info(`  ... and ${result.preservedCritical.length - 10} mo"
      }
    ],
    "src/services/linting/UnusedVariableTargetedFixer.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 47,
        "column": 50,
        "context": "    log.info('üîß Fixing unused function parameters...\\n');\\n\\n    const result: FixResult = {\\n      fi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 95,
        "column": 53,
        "context": " log.info('üîß Fixing unused destructured variables...\\n');\\n\\n    const result: FixResult = {\\n      fi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 142,
        "column": 40,
        "context": "Result> {\\n    log.info('üîß Removing unused imports...\\n');\\n\\n    const result: FixResult = {\\n      fi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 349,
        "column": 37,
        "context": "e<boolean> {\\n    log.info('\\nüîç Validating changes...');\\n\\n    try {\\n      execSync('yarn build', {\\n "
      }
    ],
    "src/services/linting/ZeroErrorAchievementDashboard.ts": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`# üéØ Zero-Error Achievement Dashboard;\n\nGenerated: ${new Date().toISOString()}  \nGeneration Time: ${data.generationTime}ms\n\n## üìä Executive Summary\n\n- **Overall Status**: ${this.getOverallStatus(data.validationResult, data.qualityGates)}\n- **Quality Score**: ${data.validationResult.metrics.qualityScore}/100 ${this.getScoreIcon(data.validationResult.metrics.qualityScore)}\n- **Zero-Error Progress**: ${this.calculateOverallProgress(data.targets)}%\n- **Quality Gates**: ${data.qualityGates.filter(g => g.status === 'passing').length}/${data.qualityGates.length} passing;\n- **Critical Issues**: ${this.identifyCriticalIssues(data.validationResult.metrics).length}\n\n## üéØ Zero-Error Targets\n\n${data.targets\n  .map(\n    target => `;\n### ${target.metric.charAt(0).toUpperCase() + target.metric.slice(1)}\n- **Current**: ${target.currentValue}",
        "line": 430,
        "column": 19,
        "context": "-achievement-dashboard.md'),;\\n\\n    const report = `# üéØ Zero-Error Achievement Dashboard;\\n\\nGenerated"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`,\n  )\n  .join('')}\n\n## üìà Trend Analysis\n\n${\n  data.trendAnalysis.length === 0;\n    ? 'Insufficient data for trend analysis (need 3+ data points)'\n    : data.trendAnalysis\n        .map(\n          trend => `;\n### ${trend.metric}\n- **Trend**: ${trend.trend.toUpperCase()}",
        "line": 456,
        "column": 0,
        "context": "eDateString()}\\n- **Strategy**: ${target.strategy}\\n`,\\n  )\\n  .join('')}\\n\\n## üìà Trend Analysis\\n\\n${\\n  da"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`,\n        )\n        .join('')\n}\n\n## üö¶ Quality Gates\n\n${data.qualityGates\n  .map(\n    gate => `;\n### ${gate.name}\n- **Status**: ${gate.status.toUpperCase()}",
        "line": 474,
        "column": 0,
        "context": "idence**: ${(trend.confidence * 100).toFixed(0)}%\\n`,\\n        )\\n        .join('')\\n}\\n\\n## üö¶ Quality Ga"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`,\n  )\n  .join('')}\n\n## üîç Current Metrics Breakdown\n\n### Critical Issues\n- **Parser Errors**: ${data.validationResult.metrics.parserErrors} ${data.validationResult.metrics.parserErrors === 0 ? '‚úÖ' : 'üö®'};\n- **TypeScript Errors**: ${data.validationResult.metrics.errors}\n- **Explicit Any Errors**: ${data.validationResult.metrics.explicitAnyErrors} ${data.validationResult.metrics.explicitAnyErrors < 100 ? '‚úÖ' : '‚ö°'}\n\n### Code Quality\n- **Import Order Issues**: ${data.validationResult.metrics.importOrderIssues}\n- **Unused Variables**: ${data.validationResult.metrics.unusedVariables}\n- **React Hooks Issues**: ${data.validationResult.metrics.reactHooksIssues}\n- **Console Statements**: ${data.validationResult.metrics.consoleStatements}\n\n### Domain-Specific\n- **Astrological Calculations**: ${data.validationResult.metrics.domainSpecificIssues.astrologicalCalculations}\n- **Campaign System**: ${data.validationResult.metrics.domainSpecificIssues.campaignSystem}\n- **Test Files**: ${data.validationResult.metrics.domainSpecificIssues.testFiles}\n\n### Performance\n- **Linting Duration**: ${data.validationResult.metrics.performanceMetrics.lintingDuration}ms\n- **Cache Hit Rate**: ${(data.validationResult.metrics.performanceMetrics.cacheHitRate * 100).toFixed(1)}%\n- **Memory Usage**: ${data.validationResult.metrics.performanceMetrics.memoryUsage.toFixed(1)}MB\n- **Files Processed**: ${data.validationResult.metrics.performanceMetrics.filesProcessed}\n\n## üö® Active Alerts\n\n${\n  data.validationResult.alerts.length === 0;\n    ? '‚úÖ No active alerts'\n    : data.validationResult.alerts\n        .map(\n          alert =>;\n            `- **${alert.severity.toUpperCase()}**: ${alert.message}",
        "line": 489,
        "column": 0,
        "context": "*Last Check**: ${gate.lastCheck.toLocaleString()}\\n`,\\n  )\\n  .join('')}\\n\\n## üîç Current Metrics Breakdo"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`,\n        )\n        .join('\\n')\n}\n\n## üîß Maintenance Status\n\n${\n  data.maintenanceResults.size === 0;\n    ? 'No maintenance procedures run this cycle'\n    : Array.from(data.maintenanceResults.entries())\n        .map(\n          ([id, result]) => `\n### ${this.maintenanceProcedures.get(id)?.name || id}\n- **Status**: ${result.success ? '‚úÖ SUCCESS' : '‚ùå FAILED'}",
        "line": 525,
        "column": 111,
        "context": "essage} (${alert.currentValue}/${alert.threshold})`,\\n        )\\n        .join('\\n')\\n}\\n\\n## üîß Maintena"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`# üéØ Zero-Error Achievement Dashboard;\n\nGenerated: ${new Date().toISOString()}  \nGeneration Time: ${data.generationTime}ms\n\n## üìä Executive Summary\n\n- **Overall Status**: ${this.getOverallStatus(data.validationResult, data.qualityGates)}\n- **Quality Score**: ${data.validationResult.metrics.qualityScore}/100 ${this.getScoreIcon(data.validationResult.metrics.qualityScore)}\n- **Zero-Error Progress**: ${this.calculateOverallProgress(data.targets)}%\n- **Quality Gates**: ${data.qualityGates.filter(g => g.status === 'passing').length}/${data.qualityGates.length} passing;\n- **Critical Issues**: ${this.identifyCriticalIssues(data.validationResult.metrics).length}\n\n## üéØ Zero-Error Targets\n\n${data.targets\n  .map(\n    target => `;\n### ${target.metric.charAt(0).toUpperCase() + target.metric.slice(1)}\n- **Current**: ${target.currentValue}\n- **Target**: ${target.targetValue}\n- **Progress**: ${target.progress}% ${this.getProgressBar(target.progress)}\n- **Priority**: ${target.priority.toUpperCase()} ${this.getPriorityIcon(target.priority)}\n- **Deadline**: ${target.deadline.toLocaleDateString()}\n- **Est. Completion**: ${target.estimatedCompletion.toLocaleDateString()}\n- **Strategy**: ${target.strategy}\n`,\n  )\n  .join('')}",
        "line": 430,
        "column": 19,
        "context": "-achievement-dashboard.md'),;\\n\\n    const report = `# üéØ Zero-Error Achievement Dashboard;\\n\\nGenerated"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`,\n        )\n        .join('')\n}\n\n## üö¶ Quality Gates\n\n${data.qualityGates\n  .map(\n    gate => `;\n### ${gate.name}\n- **Status**: ${gate.status.toUpperCase()} ${this.getGateStatusIcon(gate.status)}\n- **Condition**: \\`${gate.condition}",
        "line": 474,
        "column": 0,
        "context": "idence**: ${(trend.confidence * 100).toFixed(0)}%\\n`,\\n        )\\n        .join('')\\n}\\n\\n## üö¶ Quality Ga"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`,\n  )\n  .join('')}\n\n## üîç Current Metrics Breakdown\n\n### Critical Issues\n- **Parser Errors**: ${data.validationResult.metrics.parserErrors} ${data.validationResult.metrics.parserErrors === 0 ? '‚úÖ' : 'üö®'};\n- **TypeScript Errors**: ${data.validationResult.metrics.errors}\n- **Explicit Any Errors**: ${data.validationResult.metrics.explicitAnyErrors} ${data.validationResult.metrics.explicitAnyErrors < 100 ? '‚úÖ' : '‚ö°'}\n\n### Code Quality\n- **Import Order Issues**: ${data.validationResult.metrics.importOrderIssues}\n- **Unused Variables**: ${data.validationResult.metrics.unusedVariables}\n- **React Hooks Issues**: ${data.validationResult.metrics.reactHooksIssues}\n- **Console Statements**: ${data.validationResult.metrics.consoleStatements}\n\n### Domain-Specific\n- **Astrological Calculations**: ${data.validationResult.metrics.domainSpecificIssues.astrologicalCalculations}\n- **Campaign System**: ${data.validationResult.metrics.domainSpecificIssues.campaignSystem}\n- **Test Files**: ${data.validationResult.metrics.domainSpecificIssues.testFiles}\n\n### Performance\n- **Linting Duration**: ${data.validationResult.metrics.performanceMetrics.lintingDuration}ms\n- **Cache Hit Rate**: ${(data.validationResult.metrics.performanceMetrics.cacheHitRate * 100).toFixed(1)}%\n- **Memory Usage**: ${data.validationResult.metrics.performanceMetrics.memoryUsage.toFixed(1)}MB\n- **Files Processed**: ${data.validationResult.metrics.performanceMetrics.filesProcessed}\n\n## üö® Active Alerts\n\n${\n  data.validationResult.alerts.length === 0;\n    ? '‚úÖ No active alerts'\n    : data.validationResult.alerts\n        .map(\n          alert =>;\n            `- **${alert.severity.toUpperCase()}**: ${alert.message} (${alert.currentValue}/${alert.threshold})`,\n        )\n        .join('\\n')\n}",
        "line": 489,
        "column": 0,
        "context": "*Last Check**: ${gate.lastCheck.toLocaleString()}\\n`,\\n  )\\n  .join('')}\\n\\n## üîç Current Metrics Breakdo"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${data.targets\n  .map(\n    target => `;\n### ${",
        "line": 445,
        "column": 0,
        "context": "esult.metrics).length}\\n\\n## üéØ Zero-Error Targets\\n\\n${data.targets\\n  .map(\\n    target => `;\\n### ${targ"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n  data.trendAnalysis.length === 0;\n    ? 'Insufficient data for trend analysis (need 3+ data points)'\n    : data.trendAnalysis\n        .map(\n          trend => `;\n### ${",
        "line": 462,
        "column": 0,
        "context": "ategy}\\n`,\\n  )\\n  .join('')}\\n\\n## üìà Trend Analysis\\n\\n${\\n  data.trendAnalysis.length === 0;\\n    ? 'Insuf"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${data.qualityGates\n  .map(\n    gate => `;\n### ${",
        "line": 481,
        "column": 0,
        "context": "      )\\n        .join('')\\n}\\n\\n## üö¶ Quality Gates\\n\\n${data.qualityGates\\n  .map(\\n    gate => `;\\n### ${g"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n  data.validationResult.alerts.length === 0;\n    ? '‚úÖ No active alerts'\n    : data.validationResult.alerts\n        .map(\n          alert =>;\n            `- **${",
        "line": 519,
        "column": 0,
        "context": "anceMetrics.filesProcessed}\\n\\n## üö® Active Alerts\\n\\n${\\n  data.validationResult.alerts.length === 0;\\n  "
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${\n  data.maintenanceResults.size === 0;\n    ? 'No maintenance procedures run this cycle'\n    : Array.from(data.maintenanceResults.entries())\n        .map(\n          ([id, result]) => `\n### ${",
        "line": 532,
        "column": 0,
        "context": "\\n        .join('\\n')\\n}\\n\\n## üîß Maintenance Status\\n\\n${\\n  data.maintenanceResults.size === 0;\\n    ? 'No"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 97,
        "column": 69,
        "context": "og('üéØ Generating Zero-Error Achievement Dashboard...\\n');\\n\\n    const startTime = Date.now();\\n\\n    /"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 138,
        "column": 93,
        "context": "e monitoring (${intervalMinutes} minute intervals)...\\n`);\\n\\n    let lastMetrics: LintingMetrics | nu"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 281,
        "column": 8,
        "context": "ine\\n      ),\\n\\n      updatedTargets.push({\\n        ...defaultTarget;\\n        currentValue,\\n        pr"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 285,
        "column": 8,
        "context": "   progress,\\n        estimatedCompletion,\\n        ...(existingTarget && { deadline: existingTarget.d"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 388,
        "column": 68,
        "context": "ole.log(`üîß Running maintenance: ${procedure.name}...`);\\n\\n        try {\\n          const result = awa"
      }
    ],
    "src/services/linting/demo.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 187,
        "column": 25,
        "context": "// Run the demonstration\\n// Starting demonstration...\\n\\ntry {\\n  demonstrateErrorClassification();\\n  d"
      }
    ],
    "src/services/linting/demo.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 195,
        "column": 34,
        "context": "commendations(;\\n        mockAnalysis.domainContext as unknown as {\\n          type: string,\\n         "
      }
    ],
    "src/services/linting/runUnusedVariableCleanup.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 31,
        "column": 33,
        "context": "anizeImports() {\\n  log.info('üìã Organizing imports...');\\n\\n  try {\\n    execSync('yarn lint --fix --ru"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 46,
        "column": 54,
        "context": "g.info('üîß Applying targeted unused variable fixes...');\\n\\n  // Create a temporary ESLint config that"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 116,
        "column": 31,
        "context": " validateBuild() {\\n  log.info('üîç Validating build...');\\n\\n  try {\\n    execSync('yarn build', {\\n     "
      }
    ],
    "src/services/linting/runUnusedVariableCleanup.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 28,
        "column": 32,
        "context": " // Create backup\\n    log.info('üíæ Creating backup...');\\n    execSync('git stash push -m 'Pre unused"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 41,
        "column": 55,
        "context": " log.info('\\n‚ùå Validation failed, restoring backup...'),\\n      execSync('git stash pop', { stdio: 'i"
      }
    ],
    "src/services/loadingStateManager.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 14,
        "column": 26,
        "context": " {\\n    isLoading: true,\\n    message: 'Initializing...',\\n    progress: 0,\\n    stage: 'initial',\\n  };\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 20,
        "column": 50,
        "context": "    initial: { progress: 0, message: 'Initializing...' },\\n    recipes: { progress: 25, message: 'Loa"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 21,
        "column": 54,
        "context": "recipes: { progress: 25, message: 'Loading recipes...' },\\n    celestial: { progress: 50, message: 'C"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 22,
        "column": 73,
        "context": "ss: 50, message: 'Calculating celestial alignments...' },\\n    processing: { progress: 75, message: '"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 23,
        "column": 57,
        "context": "cessing: { progress: 75, message: 'Processing data...' },\\n    complete: { progress: 100, message: 'C"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 34,
        "column": 26,
        "context": "artial<LoadingState>) {\\n    this.currentState = { ...this.currentState, ...updates };\\n    this.notif"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 34,
        "column": 48,
        "context": "{\\n    this.currentState = { ...this.currentState, ...updates };\\n    this.notifySubscribers();\\n  }\\n\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 47,
        "column": 6,
        "context": "  this.updateState({\\n      isLoading: true,\\n      ...stageData,\\n      stage,\\n    });\\n  }\\n\\n  updatePr"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 55,
        "column": 6,
        "context": "g) {\\n    this.updateState({\\n      progress,\\n      ...(message ? { message } : {}),\\n    });\\n  }\\n\\n  se"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 71,
        "column": 6,
        "context": " this.updateState({\\n      isLoading: false,\\n      ...this.STAGES.complete,\\n      stage: 'complete',\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 79,
        "column": 6,
        "context": "  this.updateState({\\n      isLoading: true,\\n      ...this.STAGES.initial,\\n      stage: 'initial',\\n  "
      }
    ],
    "src/services/recipeData.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 309,
        "column": 38,
        "context": "{\\n    try {\\n      logger.info('Loading recipe data...');\\n\\n      // Create recipes from mappings safe"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 324,
        "column": 12,
        "context": "([id, mapping]) => ({\\n            id,\\n            ...mapping\\n          }));\\n\\n      this.recipes = ma"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 419,
        "column": 8,
        "context": "lid\\n      return ensureRecipeProperties({\\n        ...recipe;\\n        elementalProperties: ((withElem"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 442,
        "column": 58,
        "context": "logger.info('Waiting for recipe data to initialize...');\\n        if (this.initPromise) {\\n          a"
      }
    ],
    "src/services/recipeRecommendations.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 51,
        "column": 10,
        "context": "es = recipes;\\n        .map(recipe => ({\\n          ...recipe;\\n          score: this.calculateRecipeSc"
      }
    ],
    "src/services/unifiedNutritionalService.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 102,
        "column": 14,
        "context": "\\n            nutritionalProfile = {\\n              ...unifiedProfile;\\n              // Convert phyton"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 108,
        "column": 44,
        "context": "duce(\\n                      (acc, nutrient) => ({ ...acc, [nutrient]: 1.0 }),\\n                      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 131,
        "column": 16,
        "context": "           nutritionalProfile = {\\n                ...alchemyProfile;\\n                // Convert phyt"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 137,
        "column": 46,
        "context": "ce(\\n                        (acc, nutrient) => ({ ...acc, [nutrient]: 1.0 }),\\n                      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 188,
        "column": 8,
        "context": "Profile: AlchemicalNutritionalProfile = {\\n        ...enhanced;\\n        // Ensure all required Alchem"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 330,
        "column": 6,
        "context": "ommendations({\\n      season: currentSeason,\\n      ...additionalCriteria\\n    });\\n  }\\n\\n  /**\\n   * Get "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 347,
        "column": 6,
        "context": "lRecommendations({\\n      currentZodiacSign,\\n      ...additionalCriteria\\n    });\\n  }\\n\\n  /**\\n   * Get "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 364,
        "column": 6,
        "context": "ionalRecommendations({\\n      planetaryHour,\\n      ...additionalCriteria\\n    });\\n  }\\n\\n  // ===== NUTR"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 115,
        "column": 13,
        "context": "g, number>)\\n                    : {}\\n            } as unknown as NutritionalProfile;\\n          }\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 144,
        "column": 15,
        "context": "umber>)\\n                      : {}\\n              } as unknown as NutritionalProfile;\\n            }\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 175,
        "column": 49,
        "context": "\\n      const systemData = unifiedNutritionalSystem as unknown as any;\\n      const enhanceMethod = sy"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 184,
        "column": 29,
        "context": "nalProfile, context)\\n        : (nutritionalProfile as unknown as AlchemicalNutritionalProfile);\\n\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 223,
        "column": 47,
        "context": "on\\n    const systemData = unifiedNutritionalSystem as unknown as any;\\n    const calculateKalchmMetho"
      }
    ],
    "src/services/utils/apiResponseUtils.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 34,
        "column": 6,
        "context": "mp: Date.now(),\\n      version: API_VERSION,\\n      ...metadata\\n    }\\n  };\\n}\\n\\n/**\\n * Creates a success"
      }
    ],
    "src/tests/mockData.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 5,
        "column": 5,
        "context": " {\\n  phase: 'waxing_crescent' as LunarPhase,\\n  // ... other properties\\n};\\n"
      }
    ],
    "src/types/ExtendedRecipe.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 154,
        "column": 4,
        "context": "(recipe: Recipe): ExtendedRecipe {\\n  return {\\n    ...recipe;\\n    id: recipe.id || 'recipe-' + Date.n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 163,
        "column": 8,
        "context": "redient as unknown as any;\\n      return {\\n        ...ingredient;\\n        id:\\n          typeof extend"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 161,
        "column": 43,
        "context": "t => {\\n      const extendedIngredient = ingredient as unknown as any;\\n      return {\\n        ...ingr"
      }
    ],
    "src/types/alchemy.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1277,
        "column": 24,
        "context": "re', value: 0 },\\n      ),\\n      balance: Math.max(...Object.values(prop)) - Math.min(...Object.value"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1277,
        "column": 59,
        "context": "ance: Math.max(...Object.values(prop)) - Math.min(...Object.values(prop))\\n    }));\\n\\n    // Analyze i"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1471,
        "column": 24,
        "context": "ot', value: 0 },\\n      ),\\n      balance: Math.max(...Object.values(chakra)) - Math.min(...Object.val"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1471,
        "column": 61,
        "context": "ce: Math.max(...Object.values(chakra)) - Math.min(...Object.values(chakra))\\n    }));\\n\\n    // Analyze"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1328,
        "column": 23,
        "context": "   scoreRange: calc.score,\\n      confidence: (calc as unknown as AlchemicalCalculationResult).confid"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1329,
        "column": 24,
        "context": "nResult).confidence || 0,\\n      factorCount: (calc as unknown as AlchemicalCalculationResult).factor"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1435,
        "column": 36,
        "context": "ition.degree,\\n      hasExactLongitude: !!(position as unknown as any).exactLongitude,\\n      hasEleme"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1591,
        "column": 7,
        "context": "s: [],\\n          energyFlow: 0.7\\n        }\\n      ] as unknown as CelestialAlignment[],\\n      positio"
      }
    ],
    "src/types/astrological.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 2,
        "column": 27,
        "context": "e PlanetaryPositions {\\n  // Existing planet fields...\\n\\n  northNode?: {\\n    sign: string,\\n    degree:"
      }
    ],
    "src/types/culinary.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 575,
        "column": 5,
        "context": "ategory;\\n  culinaryProfile: CulinaryProfile;\\n  // ... other existing properties\\n}\\n\\n/**\\n * Cuisine co"
      }
    ],
    "src/types/enhanced-astrology.d.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 58,
        "column": 42,
        "context": "n: any;\\n      /** Degree within the sign (0-29.999...) */\\n      degree: number;\\n      /** Exact long"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 60,
        "column": 47,
        "context": "r;\\n      /** Exact longitude in degrees (0-359.999...) */\\n      exactLongitude: number;\\n      /** Wh"
      }
    ],
    "src/types/global.d.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 75,
        "column": 39,
        "context": ") => void,\\n        on: (event: string, callback: (...args: unknown[]) => void) => { off: () => void "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 81,
        "column": 37,
        "context": " () => void,\\n      on: (event: string, callback: (...args: unknown[]) => void) => { off: () => void "
      }
    ],
    "src/types/recipeIngredient.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 99,
        "column": 4,
        "context": "eIngredient {\\n  return {\\n    optional: false,\\n    ...partial\\n  };\\n}\\n\\nexport default RecipeIngredient"
      }
    ],
    "src/types/testing-library__jest-dom.d.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 24,
        "column": 18,
        "context": "g, value?: string | RegExp): R;\\n      toHaveClass(...classNames: string[]): R;\\n      toHaveFocus(): "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 36,
        "column": 9,
        "context": "ccessibleName(text: string | RegExp): R;\\n      // ... add any other matchers that might be missing\\n "
      }
    ],
    "src/types/thermodynamic.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 108,
        "column": 13,
        "context": "s {\\n  if (propsArray.length === 0) {\\n    return { ...DEFAULT_THERMODYNAMIC_PROPERTIES };\\n  }\\n\\n  if ("
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 112,
        "column": 13,
        "context": " }\\n\\n  if (propsArray.length === 1) {\\n    return { ...propsArray[0] };\\n  }\\n\\n  // Use equal weights if"
      }
    ],
    "src/types/zodiacAffinity.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 56,
        "column": 4,
        "context": "ZodiacAffinity>): ZodiacAffinity {\\n  return {\\n    ...DEFAULT_ZODIAC_AFFINITY,\\n    ...affinities,\\n  }"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 57,
        "column": 4,
        "context": " {\\n  return {\\n    ...DEFAULT_ZODIAC_AFFINITY,\\n    ...affinities,\\n  };\\n}\\n\\n/**\\n * Get the modality com"
      }
    ],
    "src/utils/BuildValidator.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 13,
        "column": 45,
        "context": "g[];\\n  private readonly logger: (message: string, ...args: unknown[]) => void;\\n\\n  constructor(buildD"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 213,
        "column": 50,
        "context": "          this.logger(`Retrying build in 5 seconds...`);\\n          await new Promise(resolve => setT"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 350,
        "column": 29,
        "context": "alidation.isValid) {\\n          report.issues.push(...validation.missingFiles.map(file => `Missing: $"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 351,
        "column": 29,
        "context": "Missing: ${file}`));\\n          report.issues.push(...validation.corruptedFiles.map(file => `Corrupte"
      }
    ],
    "src/utils/accurateAstronomy.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 9,
        "column": 36,
        "context": "roduction\\n */\\nconst debugLog = (_message: string, ...args: unknown[]): void => {\\n  // Comment out co"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 11,
        "column": 23,
        "context": " to avoid linting warnings\\n  // log.info(message, ...args);\\n};\\n\\n// Updated reference data based on a"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 519,
        "column": 43,
        "context": " 30);\\n\\n  // Calculate degree within sign (0-29.999...)\\n  const degree = normalizedLong % 30;\\n\\n  // G"
      }
    ],
    "src/utils/alchemicalAdapters.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 15,
        "column": 4,
        "context": "ata?.source,\\n    // Preserve other properties\\n    ...engineData,\\n  };\\n}\\n\\n// Convert standardized for"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 25,
        "column": 4,
        "context": "ta = standardAffinity as unknown;\\n\\n  return {\\n    ...standardAffinity,\\n    element: affinityData?.ba"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 5,
        "column": 46,
        "context": "y {\\n  if (!engineAffinity) return { base: 'Fire' } as unknown as ElementalAffinity; // Default value"
      }
    ],
    "src/utils/alchemicalPillarUtils.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 127,
        "column": 28,
        "context": "odifying the original\\n  const transformedItem = { ...item };\\n\\n  // Get the alchemical effects of the"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 300,
        "column": 28,
        "context": "odifying the original\\n  const transformedItem = { ...item };\\n\\n  // Get the alchemical effects of the"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 370,
        "column": 28,
        "context": "odifying the original\\n  const transformedItem = { ...item };\\n\\n  // Get the alchemical effects of the"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 435,
        "column": 26,
        "context": " modifying the original\\n  let transformedItem = { ...item };\\n  const influences: string[] = [];\\n\\n  /"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 646,
        "column": 61,
        "context": "bug('\\nTransforming ingredient based on influences...');\\n  const transformedItem = transformIngredie"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 737,
        "column": 25,
        "context": "mpatibility (descending)\\n  const sortedResults = [...compatibility].sort((a, b) => b.compatibility -"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1093,
        "column": 8,
        "context": "    .then(([dry, wet, traditional]) => ({\\n        ...dry;\\n        ...wet;\\n        ...traditional\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1094,
        "column": 8,
        "context": " wet, traditional]) => ({\\n        ...dry;\\n        ...wet;\\n        ...traditional\\n      }))\\n      .ca"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1095,
        "column": 8,
        "context": "l]) => ({\\n        ...dry;\\n        ...wet;\\n        ...traditional\\n      }))\\n      .catch(error => {\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 85,
        "column": 29,
        "context": "perfectly compatible\\n  if (pillarA.id === (pillarB as unknown as any).id) return 1.0;\\n\\n  // Calculat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 212,
        "column": 29,
        "context": "entalAssociations) {\\n    const pillarData = pillar as unknown as any;\\n    const elementalAssociation"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 487,
        "column": 13,
        "context": "ame} (ID: ${(pillar as any).id})`);\\n\\n  if ((pillar as unknown as any).elementalAssociations) {\\n    c"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 488,
        "column": 41,
        "context": "tions) {\\n    const elementalAssociations = (pillar as unknown as any).elementalAssociations as unkno"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 513,
        "column": 49,
        "context": "\\n  if ((transformedItem as any).element && (pillar as unknown as any).elementalAssociations) {\\n    c"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 514,
        "column": 41,
        "context": "tions) {\\n    const elementalAssociations = (pillar as unknown as any).elementalAssociations as unkno"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 557,
        "column": 49,
        "context": "\\n  if ((transformedItem as any).element && (pillar as unknown as any).elementalAssociations) {\\n    c"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 558,
        "column": 41,
        "context": "tions) {\\n    const elementalAssociations = (pillar as unknown as any).elementalAssociations as unkno"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 675,
        "column": 21,
        "context": " specified\\n  const methods =\\n    (availableMethods as unknown as CookingMethod[]).length > 0;\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 680,
        "column": 147,
        "context": "od[]).length <= 10 ? methods.join(', ') : (methods as unknown as CookingMethod[]).length + ' methods"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 718,
        "column": 17,
        "context": "   // Add elemental associations\\n      if ((pillar as unknown as any).elementalAssociations) {\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 719,
        "column": 33,
        "context": "lAssociations) {\\n        const pillarData = pillar as unknown as any;\\n        const elementalAssocia"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 784,
        "column": 39,
        "context": " to string\\n              const methodData = method as unknown as any;\\n              return String(me"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 898,
        "column": 39,
        "context": " to string\\n              const methodData = method as unknown as any;\\n              return String(me"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1100,
        "column": 8,
        "context": "method data:', error),\\n        return {};\\n      }) as unknown as any;\\n  } catch (error) {\\n    logger"
      }
    ],
    "src/utils/alchemicalTransformationUtils.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 119,
        "column": 12,
        "context": "y\\n  if (!targetElementalProperties) {\\n    return [...items].sort((a, b) => (b.gregsEnergy || 0) - (a"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 146,
        "column": 15,
        "context": "mNorm === 0 || targetNorm === 0) {\\n      return { ...item, compatibilityScore: 0.5 }; // Neutral mat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 159,
        "column": 6,
        "context": "ilarity * 0.8 + energyBonus);\\n\\n    return {\\n      ...item;\\n      compatibilityScore\\n    };\\n  });\\n\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 204,
        "column": 10,
        "context": " by gregsEnergy for basic compatibility\\n  return [...items].sort((a, b) => (b.gregsEnergy || 0) - (a"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 242,
        "column": 80,
        "context": "ds with holistic cooking recommendations algorithm...');\\n  const holisticRecommendations = await get"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 38,
        "column": 19,
        "context": "aryPositions(\\n    ingredients,\\n    planetPositions as unknown as Record<string, CelestialPosition>, "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 66,
        "column": 19,
        "context": "netaryPositions(;\\n    methods,\\n    planetPositions as unknown as Record<string, CelestialPosition>,\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 99,
        "column": 19,
        "context": "netaryPositions(\\n    cuisines,\\n    planetPositions as unknown as Record<string, CelestialPosition>, "
      }
    ],
    "src/utils/apiCircuitBreaker.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 29,
        "column": 6,
        "context": "     monitoringWindow: 300000, // 5 minutes\\n      ...options\\n    };\\n  }\\n\\n  async call<T>(fn: () => P"
      }
    ],
    "src/utils/aspectCalculator.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 189,
        "column": 43,
        "context": " 30);\\n\\n  // Calculate degree within sign (0-29.999...)\\n  const degree = normalizedLong % 30;\\n\\n  retu"
      }
    ],
    "src/utils/astrology/astrologicalValidation.ts": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`Invalid elemental properties${context ? ` in ${context}` : ''}",
        "line": 297,
        "column": 18,
        "context": "mentalProperties(properties)) {\\n      errors.push(`Invalid elemental properties${context ? ` in ${co"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`Invalid elemental properties${context ? ` in ${context}` : ''}",
        "line": 297,
        "column": 18,
        "context": "mentalProperties(properties)) {\\n      errors.push(`Invalid elemental properties${context ? ` in ${co"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${context ? ` in ${",
        "line": 297,
        "column": 47,
        "context": " {\\n      errors.push(`Invalid elemental properties${context ? ` in ${context}` : ''}`);\\n\\n      // Tr"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 68,
        "column": 24,
        "context": "northNode', 'southNode'];\\n    const allPlanets = [...requiredPlanets, ...optionalPlanets];\\n\\n    // C"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 68,
        "column": 44,
        "context": "de'];\\n    const allPlanets = [...requiredPlanets, ...optionalPlanets];\\n\\n    // Check for required pl"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 81,
        "column": 20,
        "context": "   if (!validation.isValid) {\\n        errors.push(...validation.errors);\\n      }\\n\\n      // Always co"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 85,
        "column": 20,
        "context": "nings, regardless of validity\\n      warnings.push(...validation.warnings);\\n\\n      if (validation.cor"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 100,
        "column": 24,
        "context": "        if (strictMode) {\\n            errors.push(...validation.errors);\\n          } else {\\n        "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 102,
        "column": 26,
        "context": "rs);\\n          } else {\\n            warnings.push(...validation.errors);\\n          }\\n        }\\n\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 107,
        "column": 22,
        "context": "ngs, regardless of validity\\n        warnings.push(...validation.warnings);\\n\\n        if (validation.c"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 412,
        "column": 18,
        "context": "t.planetaryPositions, options);\\n      errors.push(...positionValidation.errors);\\n      warnings.push"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 413,
        "column": 20,
        "context": "..positionValidation.errors);\\n      warnings.push(...positionValidation.warnings);\\n\\n      if (positi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 446,
        "column": 18,
        "context": "  'calculation input',\\n      );\\n      errors.push(...elementalValidation.errors);\\n      warnings.pus"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 447,
        "column": 20,
        "context": ".elementalValidation.errors);\\n      warnings.push(...elementalValidation.warnings);\\n\\n      if (eleme"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 457,
        "column": 18,
        "context": "icalConstants(input.constants);\\n      errors.push(...constantsValidation.errors);\\n      warnings.pus"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 458,
        "column": 20,
        "context": ".constantsValidation.errors);\\n      warnings.push(...constantsValidation.warnings);\\n    }\\n\\n    retur"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 502,
        "column": 2,
        "context": "ants\\n */\\nexport const _VALIDATION_CONSTANTS = {\\n  ...ELEMENTAL_CONSTANTS;\\n  ...TRANSIT_CONSTANTS;\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 503,
        "column": 2,
        "context": "IDATION_CONSTANTS = {\\n  ...ELEMENTAL_CONSTANTS;\\n  ...TRANSIT_CONSTANTS;\\n  VALIDATION_TIMEOUT: 5000,\\n"
      }
    ],
    "src/utils/astrology/core.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 30,
        "column": 36,
        "context": "in production\\nconst debugLog = (_message: string, ..._args: unknown[]): void => {\\n  // No-op for pro"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 35,
        "column": 36,
        "context": "in production\\nconst errorLog = (_message: string, ..._args: unknown[]): void => {\\n  // No-op for pro"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 59,
        "column": 72,
        "context": "t letter, lowercase rest (e.g., Sun, Moon, Mercury...)\\n    if (planet.length > 1) {\\n      planet = p"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 213,
        "column": 10,
        "context": "s', error);\\n  }\\n\\n  // Ensure uniqueness\\n  return [...new Set(activePlanets)]\\n}\\n\\n/**\\n * Get the modif"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 441,
        "column": 65,
        "context": "gn = (positions.Sun.sign.toLowerCase() || 'aries') as unknown as any;\\n    const moonSign = (position"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 442,
        "column": 68,
        "context": " = (positions.moon.sign.toLowerCase() || 'taurus') as unknown as any;\\n\\n    // Get active planets\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 770,
        "column": 13,
        "context": "      earth: 0,\\n              air: 0\\n            } as unknown as LowercaseElementalProperties\\n      "
      }
    ],
    "src/utils/astrology/elementalValidation.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 167,
        "column": 21,
        "context": "DominantElement(properties);\\n  const enhanced = { ...properties };\\n\\n  // Self-reinforcement: boost t"
      }
    ],
    "src/utils/astrology/positions.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 10,
        "column": 36,
        "context": "roduction\\n */\\nconst debugLog = (_message: string, ..._args: unknown[]): void => {\\n  // Comment out c"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 12,
        "column": 23,
        "context": " to avoid linting warnings\\n  // log.info(message, ...args);\\n};\\n\\n// Updated reference data for July 2"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 474,
        "column": 43,
        "context": " 30);\\n\\n  // Calculate degree within sign (0-29.999...)\\n  const degree = normalizedLongitude % 30;\\n\\n "
      }
    ],
    "src/utils/astrology/validation.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 15,
        "column": 37,
        "context": "oduction\\n */\\nconst _debugLog = (_message: string, ..._args: unknown[]): void => {\\n  // No-op for pro"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 23,
        "column": 36,
        "context": "roduction\\n */\\nconst errorLog = (_message: string, ..._args: unknown[]): void => {\\n  // No-op for pro"
      }
    ],
    "src/utils/astrologyDataProvider.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 41,
        "column": 55,
        "context": "ogger.debug('Fetching planetary positions from API...');\\n\\n    // Try to fetch from API endpoint\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 103,
        "column": 64,
        "context": "ug('Getting planetary positions from transit files...');\\n\\n    // For now, we'll just use the same ha"
      }
    ],
    "src/utils/astrologyUtils.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 42,
        "column": 35,
        "context": "production\\n */\\nconst debugLog = (message: string, ..._args: unknown[]): void => {\\n  // Use the log s"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 51,
        "column": 35,
        "context": "production\\n */\\nconst errorLog = (message: string, ..._args: unknown[]): void => {\\n  // Use the log s"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1121,
        "column": 2,
        "context": " */\\nexport function combineElementalProperties(\\n  ...properties: LowercaseElementalProperties[]\\n): L"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 2417,
        "column": 8,
        "context": "compliance\\n      const alchemicalItem = {\\n        ...item;\\n        compatibilityScore,\\n        domin"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 2423,
        "column": 42,
        "context": "perties\\n        transformedElementalProperties: { ...item.elementalProperties } as Record<\\n         "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 2457,
        "column": 8,
        "context": "th all required properties\\n      return {\\n        ...item;\\n        // Required AlchemicalItem proper"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 2465,
        "column": 42,
        "context": "umber>,\\n        transformedElementalProperties: { ...item.elementalProperties } as Record<\\n         "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1539,
        "column": 69,
        "context": "Hour = hourCalculator.calculatePlanetaryHour(date) as unknown as Planet;\\n    const _planetaryDay = h"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1540,
        "column": 62,
        "context": "lanetaryDay = hourCalculator.getPlanetaryDay(date) as unknown as Planet;\\n    const _planetaryMinute "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1541,
        "column": 68,
        "context": "ryMinute = hourCalculator.getPlanetaryMinute(date) as unknown as Planet;\\n\\n    // Convert planetary p"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2441,
        "column": 7,
        "context": "alculateSeasonalResonance(dominantElement)\\n      } as unknown as AlchemicalItem;\\n\\n      return alche"
      }
    ],
    "src/utils/astrologyValidation.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 95,
        "column": 39,
        "context": "properties\\n      const calculatedData = calculated as unknown as any;\\n\\n      // Convert our formatti"
      }
    ],
    "src/utils/automatedQualityAssurance.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 107,
        "column": 6,
        "context": "ing: true,\\n      thresholds: QA_THRESHOLDS,\\n      ...config\\n    };\\n\\n    this.metrics = this.initiali"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 232,
        "column": 36,
        "context": "ate too much)\\n        const maxElement = Math.max(...Object.values(ingredient.elementalProperties));"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 395,
        "column": 13,
        "context": "etQualityMetrics(): QualityMetrics {\\n    return { ...this.metrics };\\n  }\\n\\n  /**\\n   * Get active camp"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 411,
        "column": 20,
        "context": "lityAssuranceConfig>): void {\\n    this.config = { ...this.config, ...newConfig };\\n    logger.debug('"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 411,
        "column": 36,
        "context": "fig>): void {\\n    this.config = { ...this.config, ...newConfig };\\n    logger.debug('Quality assuranc"
      }
    ],
    "src/utils/calculationCache.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 48,
        "column": 53,
        "context": "og.info(`‚ö° Cache miss for ${cacheKey}, calculating...`);\\n\\n  try {\\n    // Perform the calculation\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 112,
        "column": 46,
        "context": "ys,\\n    oldestEntry: timestamps.length ? Math.min(...timestamps) : 0,\\n    newestEntry: timestamps.le"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 113,
        "column": 46,
        "context": " 0,\\n    newestEntry: timestamps.length ? Math.max(...timestamps) : 0\\n  };\\n}\\n"
      }
    ],
    "src/utils/chakraFoodUtils.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 352,
        "column": 35,
        "context": "tal properties\\n  let result = Array.from(new Set([...recommendations, ...specificFoods]));\\n\\n  if (re"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 352,
        "column": 55,
        "context": " result = Array.from(new Set([...recommendations, ...specificFoods]));\\n\\n  if (result.length === 0) {"
      }
    ],
    "src/utils/chromeApiInitializer.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 118,
        "column": 25,
        "context": "            if (!keys) {\\n              result = { ...mockStorage };\\n            } else if (Array.isA"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 40,
        "column": 29,
        "context": "ess with type guards\\n    const chromeObj = (window as unknown as any).chrome as any;\\n    if (!chrome"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 132,
        "column": 46,
        "context": ") {\\n              setTimeout(() => callback(result as unknown as Record<string, string[]>), 0);\\n    "
      }
    ],
    "src/utils/common/styleUtils.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 8,
        "column": 19,
        "context": " duplicates and conflicts.\\n */\\nexport function cn(...inputs: ClassValue[]) {\\n  return twMerge(clsx(i"
      }
    ],
    "src/utils/commonUtils.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 74,
        "column": 37,
        "context": " return str;\\n  return str.substring(0, length) + '...';\\n}\\n\\n/**\\n * Removes HTML tags from a string\\n *"
      }
    ],
    "src/utils/cookingMethodRecommender.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 132,
        "column": 2,
        "context": " {\\n  // Convert allCookingMethods to our format\\n  ...Object.entries(allCookingMethods || {}).reduce("
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 158,
        "column": 2,
        "context": "o variations if they're related to main methods\\n  ...culturalCookingMethods.reduce((methods: Cooking"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 170,
        "column": 12,
        "context": "d.relatedToMainMethod].variations = [\\n            ...existingVariations;\\n            {\\n             "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 566,
        "column": 6,
        "context": "dsCombined);\\n    .map(([_id, method]) => ({\\n      ...method;\\n      score: 0\\n    }))\\n    // Filter ou"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 135,
        "column": 31,
        "context": "ase cooking method\\n      const baseMethod = method as unknown as BaseCookingMethod;\\n      acc[id] = "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 160,
        "column": 33,
        "context": " cultural method\\n    const culturalMethod = method as unknown as CulturalMethod;\\n\\n    // Check if th"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 255,
        "column": 27,
        "context": "od with thermodynamics\\n  const methodData = method as unknown as MethodWithThermodynamics;\\n  const m"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 485,
        "column": 32,
        "context": "mental properties\\n  const methodWithProps = method as unknown as MethodWithElementalProperties;\\n  co"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 496,
        "column": 27,
        "context": "for method data access\\n  const methodData = method as unknown as MethodWithElementalProperties;\\n  if"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 527,
        "column": 32,
        "context": "mental properties\\n  const methodWithProps = method as unknown as MethodWithElementalProperties;\\n  co"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 537,
        "column": 31,
        "context": "d hour data access\\n  const methodHourData = method as unknown as MethodWithElementalProperties;\\n  if"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 689,
        "column": 36,
        "context": "gittarius'];\\n\\n    const venusDataTyped = venusData as unknown as PlanetaryDataStructure;\\n    const t"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 710,
        "column": 34,
        "context": "o', 'pisces'];\\n\\n    const marsDataTyped = marsData as unknown as PlanetaryDataStructure;\\n    const t"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 727,
        "column": 40,
        "context": "icorn'];\\n\\n    const mercuryDataTyped = mercuryData as unknown as PlanetaryDataStructure;\\n    const t"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 744,
        "column": 40,
        "context": "arius'];\\n\\n    const jupiterDataTyped = jupiterData as unknown as PlanetaryDataStructure;\\n    const t"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 761,
        "column": 38,
        "context": "quarius'];\\n\\n    const saturnDataTyped = saturnData as unknown as PlanetaryDataStructure;\\n    const t"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 783,
        "column": 34,
        "context": "ntal properties\\n    const methodWithProps = method as unknown as MethodWithElementalProperties;\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 864,
        "column": 18,
        "context": "alculatePlanetaryDayInfluence(;\\n            method as unknown as CookingMethodProfile,\\n            p"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 899,
        "column": 18,
        "context": "lculatePlanetaryHourInfluence(;\\n            method as unknown as CookingMethodProfile,\\n            p"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1361,
        "column": 27,
        "context": "h safe property access\\n  const methodData = method as unknown as any;\\n  const properties = methodDat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1409,
        "column": 29,
        "context": "safe property access\\n    const methodData = method as unknown as any;\\n    const _sensoryProfile = me"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1458,
        "column": 27,
        "context": "for method data access\\n  const methodData = method as unknown as any;\\n  const astrologicalInfluence "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1500,
        "column": 27,
        "context": " for elemental profile\\n  const methodData = method as unknown as any;\\n  return (\\n    (methodData.ele"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1520,
        "column": 30,
        "context": "e elemental profile\\n  const astroData = astroState as unknown as any;\\n  if (astroData.elementalProfi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1584,
        "column": 30,
        "context": " astrological state\\n  const astroData = astroState as unknown as any;\\n  const currentElementalProper"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1596,
        "column": 45,
        "context": "=> {\\n    const score = calculateMethodScore(method as unknown as CookingMethodProfile, astroState),;"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1598,
        "column": 20,
        "context": "e, astroState),;\\n    return {\\n      method: method as unknown as CookingMethod,\\n      score,\\n      r"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1615,
        "column": 7,
        "context": "      method,\\n      score,\\n      reasoning\\n    })) as unknown as MethodRecommendation[];\\n}\\n\\n/**\\n * H"
      }
    ],
    "src/utils/cuisineRecommender.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 114,
        "column": 6,
        "context": "0.3 + flavorMatchScore * 0.2;\\n\\n    return {\\n      ...sauce;\\n      id: name.replace(/\\s+/g, '-').toLo"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 161,
        "column": 4,
        "context": "lues(cuisineFlavorProfiles).map(cuisine => ({\\n    ...cuisine;\\n    id: cuisine.id || cuisine.name.toL"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 224,
        "column": 6,
        "context": "alScore = Math.min(1, score);\\n\\n    return {\\n      ...cuisine;\\n      id: cuisine.id || cuisine.name.t"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 208,
        "column": 32,
        "context": "c, [planet]) => {\\n            if ((planetaryRulers as unknown as string[]).includes(planet)) {\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 236,
        "column": 36,
        "context": "coredCuisines\\n    : scoredCuisines.filter(c => !(c as unknown as any).parentCuisine);\\n\\n  return filt"
      }
    ],
    "src/utils/cuisineResolver.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 176,
        "column": 4,
        "context": ",\\n    'Fusion'\\n  ];\\n\\n  const suggestions = [;\\n    ...allCuisines.filter(cuisine => cuisine.includes("
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 177,
        "column": 4,
        "context": "er(cuisine => cuisine.includes(normalized)),;\\n    ...primaryCuisines.filter(cuisine => cuisine.toLow"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 180,
        "column": 10,
        "context": "werCase().includes(normalized)),;\\n  ];\\n\\n  return [...new Set(suggestions)]; // Remove duplicates\\n}\\n\\n"
      }
    ],
    "src/utils/culturalMethodsAggregator.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 242,
        "column": 10,
        "context": "      method.astrologicalInfluences = {\\n          ...method.astrologicalInfluences;\\n          favora"
      }
    ],
    "src/utils/data/processing.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 171,
        "column": 18,
        "context": "!elementalValidation.isValid) {\\n      errors.push(...elementalValidation.errors);\\n    }\\n  } else {\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 184,
        "column": 20,
        "context": " (!astroValidation.isValid) {\\n      warnings.push(...astroValidation.errors);\\n    }\\n  }\\n\\n  return {\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 261,
        "column": 20,
        "context": "lementalValidation.isValid) {\\n      warnings.push(...elementalValidation.errors);\\n    }\\n  } else {\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 258,
        "column": 27,
        "context": "eElementalProperties(;\\n      recipe.elementalState as unknown as ElementalProperties\\n    ),\\n    if ("
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 419,
        "column": 5,
        "context": "rulingPlanets: [],\\n      favorableZodiac: []\\n    } as unknown as AstrologicalProfile;\\n  }\\n  const pr"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 430,
        "column": 3,
        "context": ".favorableZodiac || []).map(String)\\n      : []\\n  } as unknown as AstrologicalProfile;\\n}\\n\\nfunction st"
      }
    ],
    "src/utils/dataStandardization.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 28,
        "column": 10,
        "context": "perties(ingredient.elementalProperties)\\n      : { ...DEFAULT_ELEMENTAL_PROPERTIES },\\n\\n    // Ensure "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 58,
        "column": 4,
        "context": "other properties from the original ingredient\\n    ...ingredient,\\n  };\\n\\n  // Standardize category-spe"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 100,
        "column": 13,
        "context": " default values\\n  if (sum < 0.001) {\\n    return { ...DEFAULT_ELEMENTAL_PROPERTIES };\\n  }\\n\\n  // Norma"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 130,
        "column": 4,
        "context": "source: profile.source || 'Estimated values',\\n    ...(profile || {}),\\n  };\\n}\\n\\n/**\\n * Standardize the"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 168,
        "column": 4,
        "context": "ofile?.texture?.silky ?? defaultValue,\\n    },\\n    ...(profile || {}),\\n  };\\n}\\n\\n/**\\n * Standardize sto"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 184,
        "column": 4,
        "context": "ay.isArray(storage.tips) ? storage.tips : [],\\n    ...(storage || {}),\\n  };\\n}\\n\\n/**\\n * Standardize pre"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 199,
        "column": 4,
        "context": "?? false,\\n    notes: preparation.notes || '',\\n    ...(preparation || {}),\\n  };\\n}\\n\\n/**\\n * Standardize"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 225,
        "column": 4,
        "context": "   techniques: applications.techniques || {},\\n    ...(applications || {}),\\n  };\\n}\\n\\n/**\\n * Standardiz"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 237,
        "column": 4,
        "context": " standardizeVegetable(vegetable) {\\n  return {\\n    ...vegetable,\\n    seasonality: Array.isArray(veget"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 243,
        "column": 6,
        "context": "oneness) ? vegetable.cooking.doneness : [],\\n      ...(vegetable.cooking || {}),\\n    },\\n  };\\n}\\n\\n/**\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 256,
        "column": 4,
        "context": "tion standardizeProtein(protein) {\\n  return {\\n    ...protein,\\n    cuts: protein.cuts || {},\\n    cook"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 264,
        "column": 6,
        "context": "in.cookingTips.commonMistakes\\n        : [],\\n      ...(protein.cookingTips || {}),\\n    },\\n    sustain"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 274,
        "column": 6,
        "context": "n.sustainability.alternatives\\n        : [],\\n      ...(protein.sustainability || {}),\\n    },\\n  };\\n}\\n\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 287,
        "column": 4,
        "context": "ndardizeHerbOrSpice(herbOrSpice) {\\n  return {\\n    ...herbOrSpice,\\n    potency: herbOrSpice.potency |"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 295,
        "column": 6,
        "context": "rbOrSpice.aroma.mainCompounds\\n        : [],\\n      ...(herbOrSpice.aroma || {}),\\n    },\\n    drying: {"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 300,
        "column": 6,
        "context": "herbOrSpice.drying?.flavorRetention || 0.5,\\n      ...(herbOrSpice.drying || {}),\\n    },\\n    timing: "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 306,
        "column": 6,
        "context": "    notes: herbOrSpice.timing?.notes || '',\\n      ...(herbOrSpice.timing || {}),\\n    },\\n    substitu"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 320,
        "column": 4,
        "context": "function standardizeGrain(grain) {\\n  return {\\n    ...grain,\\n    cookingRatio: grain.cookingRatio || "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 328,
        "column": 6,
        "context": "lse,\\n      time: grain.soaking?.time || '',\\n      ...(grain.soaking || {}),\\n    },\\n    sprouting: {\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 333,
        "column": 6,
        "context": "e,\\n      time: grain.sprouting?.time || '',\\n      ...(grain.sprouting || {}),\\n    },\\n  };\\n}\\n\\n/**\\n * "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 348,
        "column": 4,
        "context": " oilOrVinegar.category === 'oil';\\n\\n  return {\\n    ...oilOrVinegar,\\n    ...(isOil ? { smokePoint: oil"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 349,
        "column": 4,
        "context": "y === 'oil';\\n\\n  return {\\n    ...oilOrVinegar,\\n    ...(isOil ? { smokePoint: oilOrVinegar.smokePoint "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 350,
        "column": 4,
        "context": "Point: oilOrVinegar.smokePoint || {} } : {}),\\n    ...(!isOil ? { acidity: oilOrVinegar.acidity || 5 "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 362,
        "column": 6,
        "context": "ilOrVinegar.bestUses.infusing\\n        : [],\\n      ...(oilOrVinegar.bestUses || {}),\\n    },\\n  };\\n}\\n\\ne"
      }
    ],
    "src/utils/dataStandardization.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 24,
        "column": 4,
        "context": "ile) {\\n    return ingredient;\\n  }\\n\\n  return {\\n    ...ingredientData,\\n    astrologicalProfile: {\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 26,
        "column": 6,
        "context": ".ingredientData,\\n    astrologicalProfile: {\\n      ...astrologicalProfile,\\n      elementalAffinity: s"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 8,
        "column": 26,
        "context": "f value === 'string') {\\n    return { base: value } as unknown as ElementalAffinity;\\n  }\\n  return val"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 10,
        "column": 14,
        "context": "s unknown as ElementalAffinity;\\n  }\\n  return value as unknown as ElementalAffinity;\\n}\\n\\n// Helper fun"
      }
    ],
    "src/utils/databaseCleanup.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 28,
        "column": 50,
        "context": "        const ingredientWithAstrology = ingredient as unknown as IngredientWithAstrology;\\n\\n        /"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 31,
        "column": 44,
        "context": "rtion\\n        const data = ingredientWithAstrology as unknown as any;\\n        const name = data.name"
      }
    ],
    "src/utils/dateUtils.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 9,
        "column": 36,
        "context": "roduction\\n */\\nconst debugLog = (_message: string, ..._args: unknown[]): void => {\\n  // Comment out c"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 11,
        "column": 23,
        "context": " to avoid linting warnings\\n  // log.info(message, ...args);\\n};\\n\\n/**\\n * Get the current season based "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 123,
        "column": 23,
        "context": "y.isArray(seasonDishes)) {\\n          allDishes = [...allDishes, ...(seasonDishes as unknown as Dish["
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 123,
        "column": 37,
        "context": "onDishes)) {\\n          allDishes = [...allDishes, ...(seasonDishes as unknown as Dish[])];\\n        }"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 168,
        "column": 28,
        "context": "Dishes[season] : [];\\n\\n    const combinedDishes = [...allSeasonDishes, ...seasonalDishes];\\n    debugL"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 168,
        "column": 48,
        "context": "\\n\\n    const combinedDishes = [...allSeasonDishes, ...seasonalDishes];\\n    debugLog(`Found ${combined"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 123,
        "column": 53,
        "context": "       allDishes = [...allDishes, ...(seasonDishes as unknown as Dish[])];\\n        }\\n      });\\n    }"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 171,
        "column": 25,
        "context": "hes for ${cuisineId}`);\\n\\n    return combinedDishes as unknown as Dish[];\\n  } catch (error) {\\n    con"
      }
    ],
    "src/utils/dependencyValidation.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 51,
        "column": 16,
        "context": "for (const dep of dependencies) {\\n      dfs(dep, [...path, node]);\\n    }\\n\\n    recursionStack.delete("
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 89,
        "column": 17,
        "context": " module ${barrelPath}:`, error);\\n    invalid.push(...exports);\\n  }\\n\\n  return { valid, invalid };\\n}\\n\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 175,
        "column": 18,
        "context": "ent(importStatement, filePath);\\n    warnings.push(...patternValidation.warnings);\\n\\n    // Try to val"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 268,
        "column": 23,
        "context": "   invalidFiles++\\n      }\\n\\n      allWarnings.push(...validation.warnings);\\n\\n      // Build module gr"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 242,
        "column": 45,
        "context": "h');\\n  const glob = (await import('glob')).default as unknown as {\\n    sync: (pattern: string, optio"
      }
    ],
    "src/utils/developmentExperienceOptimizations.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 322,
        "column": 12,
        "context": "ts(usedImports)\\n      : usedImports;\\n\\n    return [...sortedImports, '', ...otherLines].join('\\n');\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 322,
        "column": 34,
        "context": ": usedImports;\\n\\n    return [...sortedImports, '', ...otherLines].join('\\n');\\n  }\\n\\n  /**\\n   * Real-ti"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 389,
        "column": 21,
        "context": "DevelopmentMetrics>): void {\\n    this.metrics = { ...this.metrics, ...newMetrics, lastOptimization: "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 389,
        "column": 38,
        "context": "s>): void {\\n    this.metrics = { ...this.metrics, ...newMetrics, lastOptimization: Date.now() };\\n\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 400,
        "column": 13,
        "context": "pmentMetrics(): DevelopmentMetrics {\\n    return { ...this.metrics };\\n  }\\n\\n  /**\\n   * Generate perfor"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 608,
        "column": 6,
        "context": "(importLine);\\n      }\\n    });\\n\\n    return [\\n      ...externalImports.sort(),\\n      ...(externalImpor"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 609,
        "column": 6,
        "context": "  return [\\n      ...externalImports.sort(),\\n      ...(externalImports.length > 0 && internalImports."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 610,
        "column": 6,
        "context": "&& internalImports.length > 0 ? [''] : []),\\n      ...internalImports.sort()\\n    ];\\n  }\\n\\n  private st"
      }
    ],
    "src/utils/dynamicImport.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 10,
        "column": 36,
        "context": "roduction\\n */\\nconst debugLog = (_message: string, ..._args: unknown[]): void => {\\n  // Comment out c"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 12,
        "column": 23,
        "context": " to avoid linting warnings\\n  // log.info(message, ...args);\\n};\\n\\n/**\\n * A utility function for loggin"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 19,
        "column": 36,
        "context": "roduction\\n */\\nconst errorLog = (_message: string, ..._args: unknown[]): void => {\\n  // Comment out c"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 21,
        "column": 28,
        "context": "void linting warnings\\n  // console.error(message, ...args);\\n};\\n\\n// Define interfaces for known modul"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 142,
        "column": 16,
        "context": "ath}`);\\n      return null;\\n    }\\n\\n    return func(..._args) as R;\\n  } catch (error) {\\n    errorLog(`"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 152,
        "column": 57,
        "context": "async function safeImportFunctionKnown<T extends (...args: unknown[]) => unknown>(\\n  path: KnownModu"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 233,
        "column": 59,
        "context": " func = (importedModule as any)[functionName] as (...args: A) => R;\\n    return func(..._args);\\n  } c"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 234,
        "column": 16,
        "context": "nctionName] as (...args: A) => R;\\n    return func(..._args);\\n  } catch (error) {\\n    errorLog(`Safe "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 277,
        "column": 52,
        "context": "port async function safeImportFunction<T extends (...args: unknown[]) => unknown>(\\n  path: string,\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 320,
        "column": 13,
        "context": "sync function dynamicImportFunction<\\n  T extends (...args: unknown[]) => unknown;\\n  F extends (...ar"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 321,
        "column": 13,
        "context": "nds (...args: unknown[]) => unknown;\\n  F extends (...args: unknown[]) => unknown = T,;\\n>(path: strin"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 331,
        "column": 17,
        "context": "unctionName: string,\\n  _args: A,\\n  _fallbackFn: ((...args: A) => F) | null = null,;\\n): Promise<R | F"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 99,
        "column": 36,
        "context": "Utils': () =>\\n    import('@/utils/astrologyUtils') as unknown as Promise<AstrologyUtilsModule>,\\n  '@"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 101,
        "column": 39,
        "context": "my': () =>\\n    import('@/utils/accurateAstronomy') as unknown as Promise<AccurateAstronomyModule>,\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 103,
        "column": 35,
        "context": "rology': () =>\\n    import('@/utils/safeAstrology') as unknown as Promise<SafeAstrologyModule>,\\n  '@/"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 104,
        "column": 56,
        "context": "tils/moonTimes': () => import('@/utils/moonTimes') as unknown as Promise<MoonTimesModule>;\\n  '@/lib/"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 106,
        "column": 39,
        "context": "ns': () =>\\n    import('@/lib/cuisineCalculations') as unknown as Promise<CuisineCalculationsModule>,"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 107,
        "column": 54,
        "context": "/utils/sunTimes': () => import('@/utils/sunTimes') as unknown as Promise<SunTimesModule>;\\n  '@/utils"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 109,
        "column": 36,
        "context": "tions': () =>\\n    import('@/utils/solarPositions') as unknown as Promise<SolarPositionsModule>,\\n  '@"
      }
    ],
    "src/utils/elemental/core.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 548,
        "column": 4,
        "context": ": 0.25, Earth: 0.25, Air: 0.25 };\\n\\n  return {\\n    ...recipe;\\n    elementalProperties\\n  };\\n}\\n\\nexport "
      }
    ],
    "src/utils/elemental/elementCompatibility.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 80,
        "column": 53,
        "context": "onst enhancedProfile: Record<Element, number> = { ...profile };\\n\\n  // Find the strongest element\\n  l"
      }
    ],
    "src/utils/elemental/transformations.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 183,
        "column": 4,
        "context": "Elemental, planetaryInfluences),;\\n\\n  return {\\n    ...item;\\n    elementalProperties: transformedEleme"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 255,
        "column": 4,
        "context": "mber(planetaryStrength || 0)\\n  };\\n\\n  return {\\n    ...item;\\n    elementalProperties: transformedEleme"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 260,
        "column": 6,
        "context": "influences array\\n    planetaryInfluences: [\\n      ...(Array.isArray((item as unknown as any).planeta"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 437,
        "column": 24,
        "context": "\\n): ElementalProperties {\\n  const transformed = { ...baseElemental };\\n\\n  // Apply planetary influenc"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 164,
        "column": 10,
        "context": "ental = applyElementalTransformations(;\\n    ((item as unknown as any).elementalProperties as Element"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 186,
        "column": 22,
        "context": ",\\n    alchemicalProperties,\\n    uniqueness: ((item as unknown as any).uniqueness) || uniqueness,\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 188,
        "column": 12,
        "context": " uniqueness,\\n    planetaryInfluences:\\n      ((item as unknown as any).planetaryInfluences as string["
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 193,
        "column": 3,
        "context": "rmationScore(alchemicalProperties, uniqueness)\\n  } as unknown as AlchemicalItem;\\n}\\n\\n/**\\n * Apply pla"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 260,
        "column": 29,
        "context": "anetaryInfluences: [\\n      ...(Array.isArray((item as unknown as any).planetaryInfluences)\\n        ?"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 261,
        "column": 16,
        "context": "nown as any).planetaryInfluences)\\n        ? ((item as unknown as any).planetaryInfluences as string["
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 267,
        "column": 18,
        "context": "onScore(\\n      alchemicalBoost,\\n      Number((item as unknown as any).uniqueness) || 0.5;\\n    )\\n  } "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 269,
        "column": 3,
        "context": "m as unknown as any).uniqueness) || 0.5;\\n    )\\n  } as unknown as AlchemicalItem;\\n}\\n\\n/**\\n * Sort item"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 285,
        "column": 31,
        "context": ").sort((a, b) => {\\n      const scoreB = Number(((b as unknown as any).transformations ).score || 0);"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 286,
        "column": 31,
        "context": "ons ).score || 0);\\n      const scoreA = Number(((a as unknown as any).transformations ).score || 0);"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 575,
        "column": 19,
        "context": "ccess for transformation score\\n  score += ((((item as unknown as any).transformations ).score) || 0."
      }
    ],
    "src/utils/elementalMappings/ingredients.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 18,
        "column": 4,
        "context": ".25,\\n      Fire: 0.25,\\n      Air: 0.25\\n    },\\n    ...properties\\n  } as IngredientMapping;\\n}\\n\\nexport "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 415,
        "column": 19,
        "context": "culateElementalCompatibility(;\\n        baseElement as unknown as 'Fire' | 'Water' | 'Earth' | 'Air',"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 416,
        "column": 28,
        "context": "r' | 'Earth' | 'Air',\\n        complementaryElement as unknown as 'Fire' | 'Water' | 'Earth' | 'Air',"
      }
    ],
    "src/utils/elementalUtils.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 112,
        "column": 13,
        "context": " undefined in normalizeProperties');\\n    return { ...DEFAULT_ELEMENTAL_PROPERTIES };\\n  }\\n\\n  // Fill "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 128,
        "column": 13,
        "context": "s sum is 0 in normalizeProperties');\\n    return { ...DEFAULT_ELEMENTAL_PROPERTIES };\\n  }\\n\\n  // Norma"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 142,
        "column": 6,
        "context": "perties`);\\n      }\\n      return acc;\\n    },\\n    { ...DEFAULT_ELEMENTAL_PROPERTIES },\\n  );\\n};\\n\\n/**\\n *"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 161,
        "column": 29,
        "context": "ents');\\n    return {\\n      elementalProperties: { ...DEFAULT_ELEMENTAL_PROPERTIES }\\n    } as T & { e"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 169,
        "column": 6,
        "context": ".25, Earth: 0.25, Air: 0.25 };\\n    return {\\n      ...recipe;\\n      elementalProperties: currentState"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 176,
        "column": 4,
        "context": "properties to ensure they sum to 1\\n  return {\\n    ...recipe;\\n    elementalProperties: normalizePrope"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 225,
        "column": 43,
        "context": " start\\n    const balance: ElementalProperties = { ...DEFAULT_ELEMENTAL_PROPERTIES };\\n\\n    // Get tot"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 367,
        "column": 22,
        "context": "perties.Fire > threshold) {\\n      techniques.push(...ELEMENTAL_CHARACTERISTICS.Fire.cookingTechnique"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 371,
        "column": 22,
        "context": "erties.Water > threshold) {\\n      techniques.push(...ELEMENTAL_CHARACTERISTICS.Water.cookingTechniqu"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 375,
        "column": 22,
        "context": "erties.Earth > threshold) {\\n      techniques.push(...ELEMENTAL_CHARACTERISTICS.Earth.cookingTechniqu"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 379,
        "column": 22,
        "context": "operties.Air > threshold) {\\n      techniques.push(...ELEMENTAL_CHARACTERISTICS.Air.cookingTechniques"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 399,
        "column": 27,
        "context": "ies.Fire * 10), i++) {\\n        weightedTimes.push(...ELEMENTAL_CHARACTERISTICS.Fire.timeOfDay);\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 405,
        "column": 27,
        "context": "es.Water * 10), i++) {\\n        weightedTimes.push(...ELEMENTAL_CHARACTERISTICS.Water.timeOfDay);\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 411,
        "column": 27,
        "context": "es.Earth * 10), i++) {\\n        weightedTimes.push(...ELEMENTAL_CHARACTERISTICS.Earth.timeOfDay);\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 417,
        "column": 27,
        "context": "ties.Air * 10), i++) {\\n        weightedTimes.push(...ELEMENTAL_CHARACTERISTICS.Air.timeOfDay);\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 821,
        "column": 23,
        "context": "e;\\n      return acc\\n    }\\n\\n    const enhanced = { ...vegetable };\\n\\n    // Create transformation if i"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1156,
        "column": 26,
        "context": "t with the original oil\\n    const enhancedOil = { ...oil };\\n\\n    // Ensure basic properties exist\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1225,
        "column": 14,
        "context": "tring(\\n            JSON.stringify({\\n              ...(application as any);\\n              elementalEf"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1260,
        "column": 10,
        "context": "ons = String(;\\n        JSON.stringify({\\n          ...(isHighHeat\\n            ? {\\n                fry"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1270,
        "column": 10,
        "context": "   }\\n              }\\n            : {}),\\n          ...(isMediumHeat\\n            ? {\\n                c"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1280,
        "column": 10,
        "context": "   }\\n              }\\n            : {}),\\n          ...(isLowHeat || isFinishing\\n            ? {\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1290,
        "column": 10,
        "context": "   }\\n              }\\n            : {}),\\n          ...(enhancedOil.subCategory === 'baking' || key.to"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1449,
        "column": 4,
        "context": "    favorableZodiac: []\\n    };\\n  }\\n  return {\\n    ...mapping;\\n    name: mapping.name || formattedNam"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1503,
        "column": 6,
        "context": "estElement\\n      };\\n    }\\n\\n    acc[key] = {\\n      ...(value as unknown);\\n      name: valueData.name "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 329,
        "column": 45,
        "context": "cs {\\n    return ELEMENTAL_CHARACTERISTICS[element] as unknown as ElementalCharacteristics\\n  },\\n\\n  /*"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 668,
        "column": 5,
        "context": "   dominantPlanets,\\n      planetaryDignities\\n    } as unknown as AlchemicalItem;\\n  });\\n}\\n\\n// New dif"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 715,
        "column": 40,
        "context": " string {\\n  const affinityData = elementalAffinity as unknown as any;\\n  return (affinityData.base ||"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 721,
        "column": 40,
        "context": " number {\\n  const affinityData = elementalAffinity as unknown as any;\\n  const strength = affinityDat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1247,
        "column": 51,
        "context": "     const smokePointData = enhancedOil.smokePoint as unknown as any;\\n      const smokePoint = Numbe"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1339,
        "column": 51,
        "context": "     const smokePointData = enhancedOil.smokePoint as unknown as any;\\n      const smokePoint = Numbe"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1356,
        "column": 51,
        "context": "     const smokePointData = enhancedOil.smokePoint as unknown as any;\\n      const smokePoint = Numbe"
      }
    ],
    "src/utils/errorHandler.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 59,
        "column": 85,
        "context": "tion(error, { extra: { type, severity, component, ...context } });\\n\\n    return {\\n      error,\\n      "
      }
    ],
    "src/utils/foodRecommender.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 31,
        "column": 36,
        "context": "y === 'egg');\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\nconst dairy = Objec"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 35,
        "column": 36,
        "context": "=== 'dairy');\\n  .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\nexport interface En"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 123,
        "column": 8,
        "context": "   category: category.name.toLowerCase();\\n        ...(data )\\n      } as EnhancedIngredient;\\n\\n      /"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 183,
        "column": 19,
        "context": "s of filtered ingredients:', {\\n      categories: [...new Set(filteredOut.map(ing => ing.category))]."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 196,
        "column": 25,
        "context": "d modifying the original\\n  const standardized = { ...ingredient };\\n\\n  // Ensure elementalProperties "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 205,
        "column": 6,
        "context": " {\\n    standardized.elementalProperties = {\\n      ...standardized.elementalProperties;\\n      Earth: "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1006,
        "column": 6,
        "context": "5 +\\n      aspectScore * 0.05;\\n\\n    return {\\n      ...standardized;\\n      score: finalScore,\\n      sc"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1209,
        "column": 38,
        "context": ";\\n        }\\n        categoryGroups[category].push(...missingVegetableItems);\\n      }\\n\\n      // Find "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1247,
        "column": 36,
        "context": "= [];\\n      }\\n      categoryGroups[category].push(...additionalItems);\\n    }\\n  });\\n\\n  // First, take"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1256,
        "column": 6,
        "context": "ategory] || [];\\n    resultIngredients.push(\\n      ...categoryItems.slice(0, Math.max(minItemsPerCate"
      }
    ],
    "src/utils/foodRecommenderFix.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 139,
        "column": 74,
        "context": "terService.getBalancedRecommendations = function (...args) {\\n      try {\\n        return originalMeth"
      }
    ],
    "src/utils/globalDominantElement.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 25,
        "column": 43,
        "context": " };\\n}\\n\\nconst ensureGlobalFn = (name: string, fn: (...args: unknown[]) => unknown) => {\\n  if (typeof "
      }
    ],
    "src/utils/globalInitializer.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 61,
        "column": 15,
        "context": "e methods\\n    return function () {\\n      return { ...popupMethods };\\n    };\\n  };\\n\\n  // Create our sa"
      }
    ],
    "src/utils/houseEffects.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 12,
        "column": 36,
        "context": "roduction\\n */\\nconst debugLog = (_message: string, ..._args: unknown[]): void => {\\n  // Comment out c"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 14,
        "column": 23,
        "context": " to avoid linting warnings\\n  // log.info(message, ...args);\\n};\\n\\n/**\\n * Interface for house data in a"
      }
    ],
    "src/utils/ingredientDataNormalizer.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 327,
        "column": 4,
        "context": "unknown )\\n      : {};\\n\\n  const normalized = {\\n    ...ingredient;\\n    nutritionalProfile:\\n      typeo"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 331,
        "column": 12,
        "context": "ritionalProfile !== null;\\n        ? {\\n            ...(nutritionalProfile || {}),\\n            vitamin"
      }
    ],
    "src/utils/ingredientRecommender.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 233,
        "column": 2,
        "context": " real ingredients data\\nconst allIngredients = [\\n  ...Object.values(vegetables);\\n  ...Object.values(f"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 234,
        "column": 2,
        "context": "Ingredients = [\\n  ...Object.values(vegetables);\\n  ...Object.values(fruits);\\n  ...Object.values(herbs"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 235,
        "column": 2,
        "context": "values(vegetables);\\n  ...Object.values(fruits);\\n  ...Object.values(herbs);\\n  ...Object.values(spices"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 236,
        "column": 2,
        "context": "ject.values(fruits);\\n  ...Object.values(herbs);\\n  ...Object.values(spices);\\n  ...Object.values(prote"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 237,
        "column": 2,
        "context": "ject.values(herbs);\\n  ...Object.values(spices);\\n  ...Object.values(proteins);\\n  ...Object.values(gra"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 238,
        "column": 2,
        "context": "t.values(spices);\\n  ...Object.values(proteins);\\n  ...Object.values(grains);\\n  ...Object.values(seaso"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 239,
        "column": 2,
        "context": "t.values(proteins);\\n  ...Object.values(grains);\\n  ...Object.values(seasonings);\\n  ...Object.values(o"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 240,
        "column": 2,
        "context": "values(grains);\\n  ...Object.values(seasonings);\\n  ...Object.values(oils)\\n].filter(Boolean);\\n\\n// Fall"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 264,
        "column": 8,
        "context": "file: ingredientData.astrologicalProfile,\\n        ...ingredientData\\n      } as unknown as Ingredient"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 571,
        "column": 8,
        "context": "alProperties);\\n        ),\\n\\n      return {\\n        ...ingredient;\\n        score: totalScore,\\n        "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 654,
        "column": 10,
        "context": "nt.modality,\\n        recommendations: [\\n          ...safeGetStringArray(ingredientData.recommendatio"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 655,
        "column": 10,
        "context": "gArray(ingredientData.recommendations);\\n          ...(ingredientIntelligence?.recommendations ?? [])"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 656,
        "column": 10,
        "context": "3), // Top 3 enterprise recommendations\\n          ...((validationIntelligence?.overallValidation?.cr"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1019,
        "column": 10,
        "context": "    `Supports ${chakra} chakra energy`,\\n          ...(nutritionalCorrelations.filter(\\n            co"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 2282,
        "column": 8,
        "context": "{};\\n      ingredientData.scoreDetails = {\\n        ...existingDetails;\\n        mercuryAffinity: mercu"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 3209,
        "column": 3,
        "context": "uence.`,\\n      );\\n    }\\n  }\\n\\n  return recs;\\n}\\n\\n// ... existing code ...\\n\\n// At the top of the file, "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 3209,
        "column": 21,
        "context": "    }\\n  }\\n\\n  return recs;\\n}\\n\\n// ... existing code ...\\n\\n// At the top of the file, add the re-export\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 3214,
        "column": 3,
        "context": " './recommendation/ingredientRecommendation';\\n\\n// ... existing code ...\\n\\n// ... existing code ...\\n//"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 3214,
        "column": 21,
        "context": "/ingredientRecommendation';\\n\\n// ... existing code ...\\n\\n// ... existing code ...\\n// ... existing code"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 3216,
        "column": 3,
        "context": "entRecommendation';\\n\\n// ... existing code ...\\n\\n// ... existing code ...\\n// ... existing code ...\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 3216,
        "column": 21,
        "context": ";\\n\\n// ... existing code ...\\n\\n// ... existing code ...\\n// ... existing code ...\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 3217,
        "column": 3,
        "context": ".. existing code ...\\n\\n// ... existing code ...\\n// ... existing code ...\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 3217,
        "column": 21,
        "context": "..\\n\\n// ... existing code ...\\n// ... existing code ...\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 248,
        "column": 31,
        "context": "type compatibility\\n    return getIngredientsUtil() as unknown as Ingredient[]\\n  }\\n\\n  // Otherwise, u"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 257,
        "column": 33,
        "context": "ame, data]) => {\\n      const ingredientData = data as unknown as BaseIngredient;\\n      allIngredient"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 265,
        "column": 7,
        "context": "ologicalProfile,\\n        ...ingredientData\\n      } as unknown as Ingredient);\\n    });\\n  });\\n\\n  retur"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 298,
        "column": 43,
        "context": " array\\n  let filteredIngredients = (allIngredients as unknown as EnhancedIngredient[]).filter(;\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 301,
        "column": 39,
        "context": "are active\\n      const baseIngredient = ingredient as unknown as BaseIngredient;\\n      return baseIn"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 310,
        "column": 41,
        "context": "=== 0) {\\n    filteredIngredients = (allIngredients as unknown as EnhancedIngredient[]).slice(0, 20),"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 317,
        "column": 51,
        "context": "   enhanceVenusIngredientBatch(filteredIngredients as unknown as Ingredient[], astroState);\\n  }\\n\\n  /"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 324,
        "column": 52,
        "context": "  enhanceMarsIngredientScoring(filteredIngredients as unknown as Ingredient[], astroState);\\n  }\\n\\n  /"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 331,
        "column": 55,
        "context": "nhanceMercuryIngredientScoring(filteredIngredients as unknown as Ingredient[], astroState);\\n  }\\n\\n  /"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 337,
        "column": 27,
        "context": "ients.sort((a, b) => {\\n      const ingredientA = a as unknown as BaseIngredient;\\n      const ingredi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 338,
        "column": 27,
        "context": "own as BaseIngredient;\\n      const ingredientB = b as unknown as BaseIngredient;\\n      const aValue "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 371,
        "column": 27,
        "context": "ients.sort((a, b) => {\\n      const ingredientA = a as unknown as BaseIngredient;\\n      const ingredi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 372,
        "column": 27,
        "context": "own as BaseIngredient;\\n      const ingredientB = b as unknown as BaseIngredient;\\n\\n      let aHasAffi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 526,
        "column": 50,
        "context": "            safeGetElementalProperties((ingredient as unknown as any).elementalProperties);\\n        "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 537,
        "column": 46,
        "context": "e(;\\n        safeGetElementalProperties((ingredient as unknown as any).elementalProperties);\\n        "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 567,
        "column": 48,
        "context": ";\\n          safeGetElementalProperties((ingredient as unknown as any).elementalProperties);\\n        "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 636,
        "column": 39,
        "context": "patibility\\n      const ingredientData = ingredient as unknown as any;\\n\\n      // Enterprise Intellige"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 791,
        "column": 18,
        "context": "lt score if no seasonality data\\n  if (!(ingredient as unknown as any).seasonality) return 0.5;\\n\\n  //"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 809,
        "column": 33,
        "context": "r current season\\n  const seasonScore = (ingredient as unknown as any).seasonality?.[currentSeason] |"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 824,
        "column": 18,
        "context": "lingPlanet: string,\\n): number {\\n  if (!(ingredient as unknown as any).astrologicalProfile) return 0."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 830,
        "column": 35,
        "context": "s extra weight\\n  const ingredientData = ingredient as unknown as any;\\n  const astrologicalProfile = "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 978,
        "column": 39,
        "context": "dient => {\\n      const ingredientData = ingredient as unknown as any;\\n      const ingredientName = s"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 999,
        "column": 39,
        "context": "dient => {\\n      const ingredientData = ingredient as unknown as any;\\n      const ingredientType = s"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1193,
        "column": 35,
        "context": "us association\\n  const ingredientData = ingredient as unknown as any;\\n  const ingredientName = safeG"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1241,
        "column": 29,
        "context": "th Venus preferences\\n  const texture = (ingredient as unknown as any).texture;\\n  if (texture) {\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1254,
        "column": 34,
        "context": "nique alignment\\n  const culinaryUses = (ingredient as unknown as any).culinaryUses;\\n  if (venusData."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1268,
        "column": 39,
        "context": "r pairings\\n    const harmonyPairings = (ingredient as unknown as any).harmonyPairings;\\n    const har"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1284,
        "column": 42,
        "context": "ncement\\n    const aromaticProperties = (ingredient as unknown as any).aromaticProperties;\\n    if (ar"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1310,
        "column": 41,
        "context": "rCase();\\n      const ingredientName = ((ingredient as unknown as any).name || '').toString().toLower"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1315,
        "column": 39,
        "context": "eywords) {\\n        const description = (ingredient as unknown as any).description;\\n        const cul"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1316,
        "column": 40,
        "context": "cription;\\n        const culinaryUses = (ingredient as unknown as any).culinaryUses;\\n        if (\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1346,
        "column": 39,
        "context": "ient match\\n      const ingredientData = ingredient as unknown as BaseIngredient;\\n      if (\\n        "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1363,
        "column": 41,
        "context": "nt match\\n      const ingredientRecord = ingredient as unknown as any;\\n      const relatedIngredients"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1376,
        "column": 43,
        "context": " match\\n      const ingredientDataComp = ingredient as unknown as any;\\n      const complementaryIngre"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1425,
        "column": 46,
        "context": "3);\\n        const ingredientDataEarth = ingredient as unknown as any;\\n        const description = in"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1485,
        "column": 44,
        "context": "> 3);\\n        const ingredientDataAir = ingredient as unknown as any;\\n        const description = in"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1547,
        "column": 46,
        "context": "ess\\n        const ingredientDataWater = ingredient as unknown as any;\\n        const ingredientName ="
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1607,
        "column": 45,
        "context": "cess\\n        const ingredientDataFire = ingredient as unknown as any;\\n        const ingredientName ="
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1639,
        "column": 37,
        "context": "g retrograde\\n    const ingredientData = ingredient as unknown as any;\\n    const preservationMethods "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1711,
        "column": 32,
        "context": "e property access\\n  const venusDataAny = venusData as unknown as any;\\n  const lunarConnection = venu"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1774,
        "column": 37,
        "context": "e ingredient\\n    const ingredientData = ingredient as unknown as any;\\n    ingredientData.venusScore "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1780,
        "column": 19,
        "context": "  ingredients.sort((a, b) => {\\n    const aData = a as unknown as any;\\n    const bData = b as unknown"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1781,
        "column": 19,
        "context": "t aData = a as unknown as any;\\n    const bData = b as unknown as any;\\n    const aScore = safeGetNumb"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1799,
        "column": 35,
        "context": "for comparison\\n  const ingredientData = ingredient as unknown as any;\\n  const name = safeGetString(i"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1933,
        "column": 37,
        "context": "perty access\\n    const ingredientData = ingredient as unknown as any;\\n    const ingredientName = ing"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1958,
        "column": 19,
        "context": "  ingredients.sort((a, b) => {\\n    const aData = a as unknown as any;\\n    const bData = b as unknown"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1959,
        "column": 19,
        "context": "t aData = a as unknown as any;\\n    const bData = b as unknown as any;\\n    const aScore = safeGetNumb"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2076,
        "column": 35,
        "context": "ed ingredients\\n  const ingredientData = ingredient as unknown as any;\\n  const astrologicalProfile = "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2202,
        "column": 37,
        "context": "if available\\n    const ingredientData = ingredient as unknown as any;\\n    const elementalProperties "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2261,
        "column": 37,
        "context": "manipulation\\n    const ingredientData = ingredient as unknown as any;\\n\\n    // Apply Mercury score as"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2279,
        "column": 39,
        "context": "redient) {\\n      const ingredientData = ingredient as unknown as any;\\n      const existingDetails = "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2669,
        "column": 35,
        "context": "tal properties\\n  const ingredientData = ingredient as unknown as any;\\n  const elementalProperties = "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2764,
        "column": 35,
        "context": "tal properties\\n  const ingredientData = ingredient as unknown as any;\\n  const elementalProperties = "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2862,
        "column": 32,
        "context": "for type/category\\n      const ingredientData = ing as unknown as any;\\n      const ingredientType = S"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2871,
        "column": 32,
        "context": "s.filter(ing => {\\n      const ingredientData = ing as unknown as any;\\n      const ingredientName = S"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2880,
        "column": 32,
        "context": "s.filter(ing => {\\n      const ingredientData = ing as unknown as any;\\n      const ingredientName = S"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 2971,
        "column": 37,
        "context": "(45% weight)\\n    const ingredientData = ingredient as unknown as any;\\n    const elementalScore = cal"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 3050,
        "column": 41,
        "context": "tibility\\n    const recommendationData = ingredient as unknown as any;\\n    const ingredientRecommenda"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 3118,
        "column": 39,
        "context": "daySign];\\n\\n      const ingredientData = ingredient as unknown as any;\\n      const astrologicalProfil"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 3137,
        "column": 39,
        "context": "ourSign];\\n\\n      const ingredientData = ingredient as unknown as any;\\n      const astrologicalProfil"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 3163,
        "column": 43,
        "context": "Hour);\\n          const ingredientData = ingredient as unknown as any;\\n          const astrologicalPr"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 3176,
        "column": 43,
        "context": "Hour);\\n          const ingredientData = ingredient as unknown as any;\\n          const astrologicalPr"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 3190,
        "column": 35,
        "context": "recommendation\\n  const ingredientData = ingredient as unknown as any;\\n  const astrologicalProfile = "
      }
    ],
    "src/utils/ingredientUtils.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 386,
        "column": 31,
        "context": "as unknown) || '',\\n    category: (mapping.category as unknown as IngredientCategory) || 'culinary_he"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 387,
        "column": 53,
        "context": " elementalProperties: (mapping.elementalProperties as unknown as ElementalProperties) || {\\n      Fir"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 393,
        "column": 33,
        "context": "Air: 0.25\\n    },\\n    qualities: (mapping.qualities as unknown as string[]) || [],\\n    storage: (mapp"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 404,
        "column": 3,
        "context": "ingPlanets: [],\\n      zodiacAffinity: []\\n    }\\n  } as unknown as Ingredient;\\n\\n  // Add any additiona"
      }
    ],
    "src/utils/ingredientValidation.ts": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`Test failed: ${test.testName}${test.error ? ` - ${test.error}` : ''}",
        "line": 910,
        "column": 17,
        "context": "TE',\\n        severity: severity,\\n        message: `Test failed: ${test.testName}${test.error ? ` - $"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`Test failed: ${test.testName}${test.error ? ` - ${test.error}` : ''}",
        "line": 910,
        "column": 17,
        "context": "TE',\\n        severity: severity,\\n        message: `Test failed: ${test.testName}${test.error ? ` - $"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${test.error ? ` - ${",
        "line": 910,
        "column": 47,
        "context": "y,\\n        message: `Test failed: ${test.testName}${test.error ? ` - ${test.error}` : ''}`,\\n        "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 78,
        "column": 16,
        "context": "it validateElementalProperties();\\n    errors.push(...elementalValidation.errors);\\n    warnings.push("
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 79,
        "column": 18,
        "context": "...elementalValidation.errors);\\n    warnings.push(...elementalValidation.warnings);\\n\\n    // 2. Check"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 83,
        "column": 16,
        "context": "it validateCompatibilityScores();\\n    errors.push(...compatibilityValidation.errors);\\n    warnings.p"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 84,
        "column": 18,
        "context": "ompatibilityValidation.errors);\\n    warnings.push(...compatibilityValidation.warnings);\\n\\n    // 3. V"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 88,
        "column": 16,
        "context": "ait validateAlchemicalMappings();\\n    errors.push(...alchemicalValidation.errors);\\n    warnings.push"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 89,
        "column": 18,
        "context": "..alchemicalValidation.errors);\\n    warnings.push(...alchemicalValidation.warnings);\\n\\n    // 4. Run "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 94,
        "column": 16,
        "context": "gredientTestResults(testResults);\\n    errors.push(...testValidation.errors);\\n    warnings.push(...te"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 95,
        "column": 18,
        "context": "push(...testValidation.errors);\\n    warnings.push(...testValidation.warnings);\\n\\n    // 5. Validate d"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 99,
        "column": 16,
        "context": "await validateDataCompleteness();\\n    errors.push(...completenessValidation.errors);\\n    warnings.pu"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 100,
        "column": 18,
        "context": "completenessValidation.errors);\\n    warnings.push(...completenessValidation.warnings);\\n\\n    const du"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 153,
        "column": 20,
        "context": "Properties(name, ingredient);\\n        errors.push(...validation.errors);\\n        warnings.push(...va"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 154,
        "column": 22,
        "context": "push(...validation.errors);\\n        warnings.push(...validation.warnings);\\n      } catch (error) {\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 250,
        "column": 6,
        "context": "be > 0.3)\\n    const maxElement = Math.max(;\\n      ...elements.map(el => {\\n        const value = prop"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 415,
        "column": 22,
        "context": "sistency(name, ingredient);\\n          errors.push(...validation.errors);\\n          warnings.push(..."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 416,
        "column": 24,
        "context": "sh(...validation.errors);\\n          warnings.push(...validation.warnings);\\n        } else {\\n        "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 963,
        "column": 18,
        "context": "\\n    if (warnings.length > 5) {\\n      summary += `... and ${warnings.length - 5} more warnings\\n`;\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 413,
        "column": 23,
        "context": "ngredients)) {\\n      try {\\n        if ((ingredient as unknown as any).alchemicalProperties) {\\n      "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 458,
        "column": 37,
        "context": "[];\\n\\n  try {\\n    const ingredientData = ingredient as unknown as any;\\n    if (!ingredientData.alchem"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 782,
        "column": 39,
        "context": "dients)) {\\n      const ingredientData = ingredient as unknown as any;\\n      if (ingredientData.alche"
      }
    ],
    "src/utils/logger.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 40,
        "column": 31,
        "context": "nt);\\n\\n    return {\\n      debug: (message: string, ...args: unknown[]): void => {\\n        try {\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 48,
        "column": 29,
        "context": ";\\n        }\\n      },\\n      log: (message: string, ...args: unknown[]): void => {\\n        try {\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 55,
        "column": 30,
        "context": "\\n        }\\n      },\\n      info: (message: string, ...args: unknown[]): void => {\\n        try {\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 62,
        "column": 30,
        "context": "\\n        }\\n      },\\n      warn: (message: string, ...args: unknown[]): void => {\\n        try {\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 69,
        "column": 31,
        "context": "        }\\n      },\\n      error: (message: string, ...args: unknown[]): void => {\\n        try {\\n     "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 82,
        "column": 25,
        "context": "ly in development)\\n   */\\n  debug(message: string, ...args: unknown[]): void {\\n    if (this.shouldLog"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 86,
        "column": 50,
        "context": "      log.debug(`[DEBUG]${component} ${message}`, ...options.rest);\\n    }\\n  }\\n\\n  /**\\n   * Log genera"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 93,
        "column": 24,
        "context": "general information\\n   */\\n  info(message: string, ...args: unknown[]): void {\\n    if (this.shouldLog"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 97,
        "column": 48,
        "context": ";\\n      log.info(`[INFO]${component} ${message}`, ...options.rest);\\n    }\\n  }\\n\\n  /**\\n   * Log warnin"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 104,
        "column": 24,
        "context": "*\\n   * Log warnings\\n   */\\n  warn(message: string, ...args: unknown[]): void {\\n    if (this.shouldLog"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 108,
        "column": 52,
        "context": "    console.warn(`[WARN]${component} ${message}`, ...options.rest);\\n    }\\n  }\\n\\n  /**\\n   * Log errors"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 115,
        "column": 25,
        "context": "**\\n   * Log errors\\n   */\\n  error(message: string, ...args: unknown[]): void {\\n    if (this.shouldLog"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 119,
        "column": 54,
        "context": "  console.error(`[ERROR]${component} ${message}`, ...options.rest);\\n\\n      // Store error for summar"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 177,
        "column": 12,
        "context": "s\\n   */\\n  getComponents(): string[] {\\n    return [...this.componentLoggers];\\n  }\\n\\n  /**\\n   * Check i"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 211,
        "column": 43,
        "context": "ility)\\nexport const _debugLog = (message: string, ...args: unknown[]): void =>;\\n  logger.debug(messa"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 212,
        "column": 24,
        "context": "rgs: unknown[]): void =>;\\n  logger.debug(message, ...args);\\nexport const _infoLog = (message: string"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 213,
        "column": 42,
        "context": ".args);\\nexport const _infoLog = (message: string, ...args: unknown[]): void => logger.info(message, "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 213,
        "column": 92,
        "context": "...args: unknown[]): void => logger.info(message, ...args);\\nexport const _warnLog = (message: string"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 214,
        "column": 42,
        "context": ".args);\\nexport const _warnLog = (message: string, ...args: unknown[]): void => logger.warn(message, "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 214,
        "column": 92,
        "context": "...args: unknown[]): void => logger.warn(message, ...args);\\nexport const _errorLog = (message: strin"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 215,
        "column": 43,
        "context": "args);\\nexport const _errorLog = (message: string, ...args: unknown[]): void =>;\\n  logger.error(messa"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 216,
        "column": 24,
        "context": "rgs: unknown[]): void =>;\\n  logger.error(message, ...args);\\n"
      }
    ],
    "src/utils/lunarPhaseUtils.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 305,
        "column": 38,
        "context": "): string {\\n  // First do your existing formatting...\\n  const formattedPhase = formatLunarPhase(phas"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 46,
        "column": 1,
        "context": " Water: 0.1, Earth: 0.1, Fire: 0.0, Air: 0.0 } }\\n} as unknown as Record<\\n  LunarPhaseWithUnderscores"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 407,
        "column": 12,
        "context": "APPING[phase as LunarPhaseWithSpaces]\\n    : (phase as unknown as LunarPhaseWithUnderscores),\\n\\n  retu"
      }
    ],
    "src/utils/naturalLanguageProcessor.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 253,
        "column": 2,
        "context": "\\n    weight: 0.9\\n  }\\n];\\n\\nconst ALL_PATTERNS = [\\n  ...DIETARY_KEYWORDS;\\n  ...DIFFICULTY_KEYWORDS;\\n  ."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 254,
        "column": 2,
        "context": "\\n\\nconst ALL_PATTERNS = [\\n  ...DIETARY_KEYWORDS;\\n  ...DIFFICULTY_KEYWORDS;\\n  ...TIME_KEYWORDS;\\n  ...C"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 255,
        "column": 2,
        "context": " ...DIETARY_KEYWORDS;\\n  ...DIFFICULTY_KEYWORDS;\\n  ...TIME_KEYWORDS;\\n  ...CUISINE_KEYWORDS;\\n  ...MEAL"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 256,
        "column": 2,
        "context": ";\\n  ...DIFFICULTY_KEYWORDS;\\n  ...TIME_KEYWORDS;\\n  ...CUISINE_KEYWORDS;\\n  ...MEAL_KEYWORDS;\\n  ...SPIC"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 257,
        "column": 2,
        "context": "RDS;\\n  ...TIME_KEYWORDS;\\n  ...CUISINE_KEYWORDS;\\n  ...MEAL_KEYWORDS;\\n  ...SPICE_KEYWORDS\\n];\\n\\n// ====="
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 258,
        "column": 2,
        "context": "RDS;\\n  ...CUISINE_KEYWORDS;\\n  ...MEAL_KEYWORDS;\\n  ...SPICE_KEYWORDS\\n];\\n\\n// ========== UTILITY FUNCTI"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 368,
        "column": 26,
        "context": " breakfast ideas'\\n  ];\\n\\n  const allSuggestions = [...cuisineSuggestions, ...dietarySuggestions, ...t"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 368,
        "column": 49,
        "context": "\\n  const allSuggestions = [...cuisineSuggestions, ...dietarySuggestions, ...timeSuggestions];\\n\\n  for"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 368,
        "column": 72,
        "context": " = [...cuisineSuggestions, ...dietarySuggestions, ...timeSuggestions];\\n\\n  for (const suggestion of a"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 520,
        "column": 21,
        "context": "   if (averageScore > 0.3) {\\n      results.push({ ...((item as any) || {}), searchScore: averageScor"
      }
    ],
    "src/utils/nextConfigOptimizer.ts": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\\\\\$\\{",
        "match": "`build-\\${",
        "line": 100,
        "column": 36,
        "context": "async () => {\\n    return process.env.BUILD_ID || \\`build-\\${Date.now()}\\`;\\n  }\\n};\\n\\n  export default "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 9,
        "column": 45,
        "context": "ing,\\n  private readonly logger: (message: string, ...args: unknown[]) => void,\\n\\n  constructor(\\n    c"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 13,
        "column": 30,
        "context": "'next.config.js',,;\\n    logger: (message: string, ...args: unknown[]) => void = console.log,;\\n  ) {\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 81,
        "column": 6,
        "context": "ule resolution\\n    config.resolve.alias = {\\n      ...config.resolve.alias;\\n      '@': path.resolve(_"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 88,
        "column": 8,
        "context": "rver) {\\n      config.resolve.fallback = {\\n        ...config.resolve.fallback;\\n        fs: false,\\n   "
      }
    ],
    "src/utils/nutritionalUtils.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 43,
        "column": 4,
        "context": "emy types\\n  const alchemyProfile: unknown = {\\n    ...profile;\\n    // Convert phytonutrients from Rec"
      }
    ],
    "src/utils/patchAlchemicalEngine.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 19,
        "column": 54,
        "context": "log.info('[PatchAlchemicalEngine] Applying patches...');\\n\\n    // PATCH 1: Fix the getElementRanking "
      }
    ],
    "src/utils/patchGlobalElementRanking.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 84,
        "column": 39,
        "context": "nction') {\\n      window[functionName] = function (...args) {\\n        try {\\n          return original"
      }
    ],
    "src/utils/performance.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 43,
        "column": 33,
        "context": "bounce = () => {\\n        const debounce = (func: (...args: unknown[]) => void, wait: number) => {\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 45,
        "column": 43,
        "context": "eout>;\\n          return function executedFunction(...args: unknown[]) {\\n            const later = ()"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 48,
        "column": 19,
        "context": "        clearTimeout(timeout);\\n              func(...args);\\n            };\\n            clearTimeout("
      }
    ],
    "src/utils/planetCalculations.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 44,
        "column": 42,
        "context": "  };\\n}\\n\\n// Add similar functions for other planets...\\n\\n// Helper function to get sign from longitude"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 72,
        "column": 39,
        "context": "ion(date);\\n  // Add calculations for other planets...\\n\\n  // Try to get lunar nodes from the most acc"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 149,
        "column": 20,
        "context": "  sun,\\n    moon,\\n    mercury,\\n    // Other planets...\\n    northNode,\\n    southNode\\n  };\\n}\\n"
      }
    ],
    "src/utils/planetInfoPatcher.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 85,
        "column": 77,
        "context": "foPatcher] Found planetInfo object, applying fixes...');\\n\\n        // Create a proxy around planetInf"
      }
    ],
    "src/utils/planetaryValidation.ts": [
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*\\$\\{[^}]*\\}[^}]*\\}",
        "match": "`Test failed: ${test.testName}${test.error ? ` - ${test.error}` : ''}",
        "line": 834,
        "column": 17,
        "context": "RE',\\n        severity: severity,\\n        message: `Test failed: ${test.testName}${test.error ? ` - $"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "`[^`]*\\$\\{[^}]*`[^`]*`[^}]*\\}",
        "match": "`Test failed: ${test.testName}${test.error ? ` - ${test.error}` : ''}",
        "line": 834,
        "column": 17,
        "context": "RE',\\n        severity: severity,\\n        message: `Test failed: ${test.testName}${test.error ? ` - $"
      },
      {
        "type": "templateLiteralIssues",
        "pattern": "\\$\\{[^}]*\\$\\{",
        "match": "${test.error ? ` - ${",
        "line": 834,
        "column": 47,
        "context": "y,\\n        message: `Test failed: ${test.testName}${test.error ? ` - ${test.error}` : ''}`,\\n        "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 66,
        "column": 16,
        "context": "n = await validateTransitDates();\\n    errors.push(...transitValidation.errors);\\n    warnings.push(.."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 67,
        "column": 18,
        "context": "h(...transitValidation.errors);\\n    warnings.push(...transitValidation.warnings);\\n\\n    // 2. Check p"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 71,
        "column": 16,
        "context": "it validatePositionConsistency();\\n    errors.push(...positionValidation.errors);\\n    warnings.push(."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 72,
        "column": 18,
        "context": "(...positionValidation.errors);\\n    warnings.push(...positionValidation.warnings);\\n\\n    // 3. Run as"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 77,
        "column": 16,
        "context": " analyzeTestResults(testResults);\\n    errors.push(...testValidation.errors);\\n    warnings.push(...te"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 78,
        "column": 18,
        "context": "push(...testValidation.errors);\\n    warnings.push(...testValidation.warnings);\\n\\n    // 4. Validate e"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 82,
        "column": 16,
        "context": "it validateElementalProperties();\\n    errors.push(...elementalValidation.errors);\\n    warnings.push("
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 83,
        "column": 18,
        "context": "...elementalValidation.errors);\\n    warnings.push(...elementalValidation.warnings);\\n\\n    const durat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 144,
        "column": 22,
        "context": "ransitDates, currentDate);\\n\\n          errors.push(...validation.errors);\\n          warnings.push(..."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 145,
        "column": 24,
        "context": "sh(...validation.errors);\\n          warnings.push(...validation.warnings);\\n        } else {\\n        "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 322,
        "column": 22,
        "context": "ionChange(planetName, pos);\\n          errors.push(...positionValidation.errors);\\n          warnings."
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 323,
        "column": 24,
        "context": "sitionValidation.errors);\\n          warnings.push(...positionValidation.warnings);\\n        }\\n      }"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 887,
        "column": 18,
        "context": "\\n    if (warnings.length > 5) {\\n      summary += `... and ${warnings.length - 5} more warnings\\n`;\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 288,
        "column": 28,
        "context": " position !== null) {\\n        const pos = position as unknown as {\\n          degree: number,\\n       "
      }
    ],
    "src/utils/popup-interceptor.js": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 37,
        "column": 13,
        "context": "Property(window, '__popup_backup', {\\n    value: { ...failsafePopup },\\n    writable: false,\\n    confi"
      }
    ],
    "src/utils/recipe/recipeAdapter.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 249,
        "column": 4,
        "context": "recipe\\n  const scoredRecipe: ScoredRecipe = {\\n    ...adaptedRecipe;\\n    score,\\n    alchemicalScores:"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 17,
        "column": 34,
        "context": "aptIngredients(\\n    (recipeData.ingredients || []) as unknown as Recipe[],\\n  );\\n\\n  // Create a base "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 26,
        "column": 37,
        "context": " desired.'],\\n    elementalProperties: ((recipeData as unknown as any).elementalState as ElementalPro"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 48,
        "column": 34,
        "context": "ated properties\\n  const recipeDataAny = recipeData as unknown as any;\\n  if (recipeDataAny.timeToMake"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 89,
        "column": 24,
        "context": "String(z).toLowerCase());\\n        .filter(Boolean) as unknown as import('@/types/alchemy').ZodiacSig"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 98,
        "column": 24,
        "context": "String(l).toLowerCase());\\n        .filter(Boolean) as unknown as import('@/types/alchemy').LunarPhas"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 294,
        "column": 34,
        "context": "talProperties {\\n  const recipeDataAny = recipeData as unknown as any;\\n  if (recipeDataAny.elementalS"
      }
    ],
    "src/utils/recipe/recipeCore.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 654,
        "column": 49,
        "context": "\\n    const cookingMethodStr = recipe.cookingMethod as unknown as any;\\n    if (typeof cookingMethodSt"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 669,
        "column": 46,
        "context": "ess\\n    const ingredientsData = recipe.ingredients as unknown as any;\\n    let ingredientText = '';\\n\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 826,
        "column": 43,
        "context": "season\\n  const season: Season = getCurrentSeason() as unknown as Season;\\n\\n  // Determine weekday\\n  c"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 843,
        "column": 35,
        "context": " day: weekDay,\\n    planet: getDayPlanet(dayOfWeek) as unknown as PlanetName\\n  };\\n\\n  // Create planet"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 848,
        "column": 31,
        "context": " PlanetaryHour = {\\n    planet: getHourPlanet(hour) as unknown as PlanetName,\\n    hourOfDay: hour\\n  }"
      }
    ],
    "src/utils/recipe/recipeEnrichment.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 217,
        "column": 10,
        "context": "s);\\n    }\\n  });\\n\\n  // Remove duplicates\\n  return [...new Set(normalizedSeasons)];\\n}\\n\\n/**\\n * Derive c"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 356,
        "column": 11,
        "context": "OfServings ?? 1),\\n      )\\n    });\\n  }\\n\\n  return { ...recipe, nutrition: estimatedNutrition };\\n}\\n"
      }
    ],
    "src/utils/recipe/recipeFiltering.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 288,
        "column": 12,
        "context": "asonalScore = this.getSeasonalScore({\\n            ...recipe;\\n            score: 1\\n          } as Sco"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 319,
        "column": 10,
        "context": " ingredient\\n        }\\n\\n        return {\\n          ...recipe;\\n          score: Math.max(0.1, Math.min"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 325,
        "column": 10,
        "context": "', { recipe, error });\\n        return {\\n          ...recipe;\\n          score: 0.5\\n        } as Score"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 626,
        "column": 6,
        "context": "ecipes || []).slice(0, 10).map(recipe => ({\\n      ...recipe;\\n      score: 0.5\\n    }));\\n  }\\n\\n  /**\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 637,
        "column": 33,
        "context": "=> {\\n      try {\\n        const recipeData = recipe as unknown as any;\\n\\n        const checkMatch = (d"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 694,
        "column": 31,
        "context": "rn 0.5;\\n\\n    try {\\n      const recipeData = recipe as unknown as any;\\n\\n      const checkMatch = (dis"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 774,
        "column": 31,
        "context": "oolean {\\n    try {\\n      const recipeData = recipe as unknown as any;\\n      const ingredients = reci"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 824,
        "column": 31,
        "context": "oolean {\\n    try {\\n      const recipeData = recipe as unknown as any;\\n      const ingredients = reci"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 868,
        "column": 33,
        "context": "lter(recipe => {\\n        const recipeData = recipe as unknown as any;\\n        const recipeName = Str"
      }
    ],
    "src/utils/recipe/recipeMatching.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 294,
        "column": 25,
        "context": "fying the original array\\n  let filteredRecipes = [...recipes];\\n\\n  // Apply filters\\n  filteredRecipes"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 385,
        "column": 17,
        "context": "ntrast) {\\n      const contrast =\\n        Math.max(...(dominantElements || []).map(([_, value]) => va"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 386,
        "column": 17,
        "context": ").map(([_, value]) => value)) -;\\n        Math.min(...(dominantElements || []).map(([_, value]) => va"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 247,
        "column": 36,
        "context": "method access\\n  const cacheData = astrologizeCache as unknown as any;\\n  const getLatestData = cacheD"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 287,
        "column": 58,
        "context": "cipes = (await LocalRecipeService.getAllRecipes()) as unknown as Recipe[];\\n    } catch (error) {\\n   "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 378,
        "column": 44,
        "context": " type\\n      const nutritionInfo = recipe.nutrition as unknown as any;\\n      score += (await calculat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 776,
        "column": 9,
        "context": "Case() === ingredientName.toLowerCase();\\n        ) as unknown as IngredientMapping,\\n\\n        if (exa"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 793,
        "column": 9,
        "context": "es(String(mapping.name).toLowerCase()));\\n        ) as unknown as IngredientMapping[];\\n\\n        if (("
      }
    ],
    "src/utils/recipe/recipeUtils.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 345,
        "column": 4,
        "context": "core !== undefined ? score : 0.5;\\n\\n  return {\\n    ...recipe;\\n    score: defaultScore\\n  } as ScoredRe"
      }
    ],
    "src/utils/recipeCalculations.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 8,
        "column": 36,
        "context": "roduction\\n */\\nconst debugLog = (_message: string, ..._args: unknown[]): void => {\\n  // Comment out c"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 10,
        "column": 23,
        "context": " to avoid linting warnings\\n  // log.info(message, ...args)\\n};\\n\\n/**\\n * Utility functions for recipe c"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 45,
        "column": 6,
        "context": "ing): string[] {\\n    const optimalTimes = [\\n      ...recipe.astrologicalProfile.rulingPlanets.map(p "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 46,
        "column": 6,
        "context": "gPlanets.map(p => `${p} dominant hours`),,;\\n      ...recipe.cuisine.astrologicalProfile.aspectEnhanc"
      }
    ],
    "src/utils/recipeFilters.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 175,
        "column": 10,
        "context": "ore *= 1.2;\\n        }\\n\\n        return {\\n          ...recipe;\\n          score\\n        };\\n      } catc"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 180,
        "column": 17,
        "context": "ng recipe:', { recipe, error });\\n        return { ...recipe, score: 0 };\\n      }\\n    });\\n  }\\n\\n  priv"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 187,
        "column": 14,
        "context": "ptions): ScoredRecipe[] {\\n    try {\\n      return [...recipes].sort((a, b) => {\\n        let compariso"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 370,
        "column": 6,
        "context": "return recipes.slice(0, 3).map(recipe => ({\\n      ...recipe;\\n      score: 0.5\\n    }));\\n  }\\n\\n  filter"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 424,
        "column": 27,
        "context": "ecipe => {\\n      try {\\n        // Previous filters...\\n\\n        // Cuisine type filter\\n        if (op"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 381,
        "column": 56,
        "context": "    const cuisine: Cuisine = cuisines[cuisineType] as unknown as Cuisine;\\n          if (!cuisine || "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 641,
        "column": 7,
        "context": "     matchedIngredients: mappedIngredients\\n      } as unknown as {\\n        recipe: Recipe,\\n        s"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 671,
        "column": 9,
        "context": "   matchedIngredients: mappedIngredients\\n        } as unknown as {\\n          recipe: Recipe,\\n       "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 699,
        "column": 9,
        "context": "   matchedIngredients: mappedIngredients\\n        } as unknown as {\\n          recipe: Recipe,\\n       "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 770,
        "column": 5,
        "context": "\\n      matchedIngredients: mappedIngredients\\n    } as unknown as {\\n      recipe: Recipe,\\n      score"
      }
    ],
    "src/utils/recipeMatching.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 105,
        "column": 25,
        "context": "fying the original array\\n  let filteredRecipes = [...recipes];\\n\\n  // Apply filters\\n  if (matchFilter"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 96,
        "column": 58,
        "context": "cipes = (await LocalRecipeService.getAllRecipes()) as unknown as Recipe[];\\n      // log.info(`Fetche"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 472,
        "column": 15,
        "context": "tyScore = calculateModalityScore(;\\n      qualities as unknown as string[],\\n      preferredModality a"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 482,
        "column": 19,
        "context": "    recipe.astrologicalEnergy;\\n      currentEnergy as unknown as EnergyData,\\n    ),\\n    score += ast"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1007,
        "column": 32,
        "context": "      similarity,\\n          ingredient: ingredient as unknown as IngredientMapping\\n        };\\n      "
      }
    ],
    "src/utils/recommendation/foodRecommendation.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 491,
        "column": 59,
        "context": " recipeElementalProperties = recipe.elementalState as unknown as ElementalProperties;\\n    const elem"
      }
    ],
    "src/utils/recommendation/ingredientRecommendation.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 412,
        "column": 10,
        "context": "name,\\n          category: categoryName,\\n          ...(data as unknown)\\n        }) as EnhancedIngredi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 416,
        "column": 21,
        "context": " EnhancedIngredient,\\n    );\\n\\n    ingredients.push(...categoryIngredients);\\n\\n    if (limit && ingredi"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 494,
        "column": 38,
        "context": "=== 'egg');\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\n  const dairy = Obj"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 498,
        "column": 38,
        "context": "= 'dairy');\\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\\n\\n  // Define all cat"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 526,
        "column": 8,
        "context": "   category: category.name.toLowerCase();\\n        ...(data )\\n      } as EnhancedIngredient;\\n\\n      /"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 736,
        "column": 10,
        "context": "culturalScore * 0.05;\\n\\n        return {\\n          ...ingredient;\\n          matchScore: totalScore,\\n "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 751,
        "column": 10,
        "context": "cores in case of error\\n        return {\\n          ...ingredient;\\n          matchScore: 0.5,\\n        "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 817,
        "column": 6,
        "context": "iacMatch) score += 0.2;\\n    }\\n\\n    return {\\n      ...ingredient;\\n      score,\\n      // Add required "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 1053,
        "column": 30,
        "context": "f (categoryItems) {\\n      allRecommendations.push(...categoryItems);\\n    }\\n  });\\n\\n  return allRecomm"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 365,
        "column": 50,
        "context": "      result.vegetables = (await loadVegetables()) as unknown as Ingredient;\\n    }\\n    if (categorie"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 368,
        "column": 42,
        "context": "ts')) {\\n      result.fruits = (await loadFruits()) as unknown as Ingredient;\\n    }\\n    if (categorie"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 371,
        "column": 40,
        "context": "erbs')) {\\n      result.herbs = (await loadHerbs()) as unknown as Ingredient;\\n    }\\n    if (categorie"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 374,
        "column": 42,
        "context": "es')) {\\n      result.spices = (await loadSpices()) as unknown as Ingredient;\\n    }\\n    if (categorie"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 377,
        "column": 46,
        "context": ") {\\n      result.proteins = (await loadProteins()) as unknown as Ingredient;\\n    }\\n    if (categorie"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 380,
        "column": 42,
        "context": "ns')) {\\n      result.grains = (await loadGrains()) as unknown as Ingredient;\\n    }\\n    if (categorie"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 383,
        "column": 50,
        "context": "      result.seasonings = (await loadSeasonings()) as unknown as Ingredient;\\n    }\\n    if (categorie"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 386,
        "column": 38,
        "context": "('oils')) {\\n      result.oils = (await loadOils()) as unknown as Ingredient;\\n    }\\n    if (categorie"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 389,
        "column": 46,
        "context": ") {\\n      result.vinegars = (await loadVinegars()) as unknown as Ingredient;\\n    }\\n  } catch (error)"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 567,
        "column": 48,
        "context": "&\\n      (ing.astrologicalProfile.elementalAffinity as unknown as any).base &&\\n      ing.astrological"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 655,
        "column": 28,
        "context": "- aValue\\n    });\\n  }\\n\\n  return filteredIngredients as unknown as Ingredient[];\\n}\\n\\nexport async funct"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 705,
        "column": 20,
        "context": "wait calculateSeasonalScore(;\\n          ingredient as unknown as Ingredient,\\n          _elementalPro"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 873,
        "column": 35,
        "context": "  : 'winter',\\n\\n  const ingredientData = ingredient as unknown as any;\\n  if (ingredientData.season &&"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 1037,
        "column": 18,
        "context": " getIngredientRecommendations(;\\n    elementalProps as unknown as ElementalProperties & {\\n      times"
      }
    ],
    "src/utils/recommendation/methodRecommendation.ts": [
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 112,
        "column": 2,
        "context": " {\\n  // Convert allCookingMethods to our format\\n  ...Object.entries(allCookingMethods).reduce((acc: "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 116,
        "column": 6,
        "context": "s unknown as any;\\n    acc[id] = {\\n      id,\\n      ...methodData;\\n      elementalEffect:\\n        (met"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 131,
        "column": 2,
        "context": "/ Add cultural methods with proper organization\\n  ...culturalCookingMethods.reduce((methods: Cooking"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\.\\s*\\.\\s*\\.",
        "match": "...",
        "line": 142,
        "column": 12,
        "context": "       methods[mainId].variations = [\\n            ...existingVariationsArray;\\n            {\\n        "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 113,
        "column": 29,
        "context": ", [id, method]) => {\\n    const methodData = method as unknown as any;\\n    acc[id] = {\\n      id,\\n    "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 132,
        "column": 29,
        "context": "ionary, method) => {\\n    const methodData = method as unknown as any;\\n    // Check if this method is"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 209,
        "column": 40,
        "context": "perties {\\n  const methodNameLower = String((method as unknown as any).name).toLowerCase() || '';\\n\\n  "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 224,
        "column": 27,
        "context": "ermodynamic properties\\n  const methodData = method as unknown as any;\\n  const thermodynamicPropertie"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 380,
        "column": 27,
        "context": "ment', 'pickle']\\n  };\\n\\n  const methodData = method as unknown as any;\\n  const methodName = String(me"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 409,
        "column": 27,
        "context": "age', 'ferment']\\n  };\\n\\n  const methodData = method as unknown as any;\\n  const methodName = String(me"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 452,
        "column": 29,
        "context": "ibility (40% weight)\\n    const methodData = method as unknown as any;\\n    const elementalEffect = me"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 515,
        "column": 57,
        "context": "st thermodynamics = getMethodThermodynamics(method as unknown as CookingMethodProfile);\\n\\n    recomme"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 555,
        "column": 27,
        "context": "cooking', 'raw']\\n  };\\n\\n  const methodData = method as unknown as any;\\n  const methodName = String(me"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 577,
        "column": 29,
        "context": "let affinity = 0.5;\\n\\n    const methodData = method as unknown as any;\\n    const methodName = String("
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 627,
        "column": 12,
        "context": "nity = calculateLunarMethodAffinity(;\\n      method as unknown as CookingMethodData,\\n      astroState"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 637,
        "column": 24,
        "context": "ateAspectMethodAffinity(;\\n      astroState.aspects as unknown as PlanetaryAspect[],\\n      method as "
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 638,
        "column": 12,
        "context": "ects as unknown as PlanetaryAspect[],\\n      method as unknown as CookingMethodData,\\n    ),\\n    score"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 647,
        "column": 27,
        "context": " ElementalProperties {\\n  const methodData = method as unknown as any;\\n  const elementalEffect = meth"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 712,
        "column": 45,
        "context": "=> {\\n    const score = calculateMethodScore(method as unknown as CookingMethodProfile, astroState);\\n"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 715,
        "column": 29,
        "context": " variable extraction\\n    const methodData = method as unknown as any;\\n    const methodId = String(me"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 733,
        "column": 5,
        "context": "  score: score,\\n      reasons: [description]\\n    } as unknown as MethodRecommendation;\\n  });\\n\\n  cons"
      },
      {
        "type": "generalSyntaxIssues",
        "pattern": "\\s+as\\s+unknown\\s+as\\s+",
        "match": " as unknown as ",
        "line": 736,
        "column": 31,
        "context": "mmendation;\\n  });\\n\\n  const limit = Number((options as unknown as any).limit) || 5;\\n  return scoredMe"
      }
    ]
  },
  "summary": {
    "malformedPropertyAccess": 0,
    "templateLiteralIssues": 225,
    "consoleStatementIssues": 0,
    "generalSyntaxIssues": 3105
  },
  "timestamp": "2025-09-18T07:00:56.942Z"
}