{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/calculations/enhancedCuisineRecommender.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/calculations/enhancedCuisineRecommender.ts"],"sourcesContent":["import type { Cuisine } from '@/types/cuisine';\nimport type {\n  AstrologicalState,\n  ElementalProperties,\n  ZodiacSign} from '@/types/alchemy';\nimport { cuisinesMap } from '@/data/cuisines';\n\n// Recipe interface for internal use in enhanced recommender\ninterface RecipeData {\n  name?: string;\n  id?: string;\n  tags?: string[];\n  description?: string;\n  ingredients?: any[];\n  season?: string[];\n  mealType?: string[];\n  dietaryInfo?: string[];\n  planetary?: string[];\n  zodiac?: string[];\n  lunar?: string[];\n  flavorProfile?: Record<string, number>;\n  timeToMake?: number;\n  spiceLevel?: number | string;\n  preparationSteps?: string[];\n  instructions?: string[];\n  // Additional properties that are accessed in the code\n  elementalProperties?: ElementalProperties | Record<string, number>;\n  astrologicalAffinities?: {\n    planets?: string[];\n    zodiac?: string[];\n    lunar?: string[];\n  };\n  zodiacInfluences?: string[];\n  lunarPhaseInfluences?: string[];\n  allergens?: string[];\n}\n\ninterface EnhancedRecipeMatch {\n  cuisine: string;\n  recipeName: string;\n  recipeId: string;\n  matchPercentage: number;\n  seasonalScore: number;\n  planetaryDayScore: number;\n  planetaryHourScore: number;\n  elementalScore: number;\n  astrologicalScore: number;\n  timeOfDayScore: number;\n  tags: string[];\n  description: string;\n  ingredients: unknown[];\n  season: string[];\n  mealType: string[];\n}\n\ninterface TimeFactors {\n  planetaryDay: PlanetaryDay;\n  planetaryHour: PlanetaryHour;\n  timeOfDay: TimeOfDay;\n  currentSeason: Season;\n  currentDate: Date;\n}\n\ntype PlanetaryDay =\n  | 'Sun'\n  | 'Moon'\n  | 'Mars'\n  | 'Mercury'\n  | 'Jupiter'\n  | 'Venus'\n  | 'Saturn';\ntype PlanetaryHour = PlanetaryDay;\ntype TimeOfDay = 'morning' | 'afternoon' | 'evening' | 'night';\ntype Season = 'spring' | 'summer' | 'autumn' | 'winter';\n\n/**\n * Enhanced cuisine-specific recipe recommender that incorporates:\n * - Day of week (planetary day)\n * - Hour and minute (planetary hours)\n * - Astrological matching\n * - Seasonal factors\n * - Uniform recipe structure across cuisine files\n */\nexport class EnhancedCuisineRecommender {\n  private static instance: EnhancedCuisineRecommender;\n\n  private constructor() {}\n\n  public static getInstance(): EnhancedCuisineRecommender {\n    if (!EnhancedCuisineRecommender.instance) {\n      EnhancedCuisineRecommender.instance = new EnhancedCuisineRecommender();\n    }\n    return EnhancedCuisineRecommender.instance;\n  }\n\n  /**\n   * Get enhanced recipe recommendations for a specific cuisine\n   *\n   * @param cuisineName Name of the cuisine\n   * @param astroState Current astrological state\n   * @param count Number of recommendations to return\n   * @param mealType Optional meal type filter (breakfast, lunch, dinner, dessert)\n   * @param dietaryRestrictions Optional dietary restrictions\n   * @returns Array of recipe matches with detailed match scores\n   */\n  public getRecommendationsForCuisine(\n    cuisineName: string,\n    astroState: AstrologicalState,\n    count: number = 5,\n    mealType?: string,\n    dietaryRestrictions?: string[]\n  ): EnhancedRecipeMatch[] {\n    // Get current time factors\n    const timeFactors = this.getCurrentTimeFactors();\n\n    // Get cuisine data\n    const cuisine = this.getCuisine(cuisineName);\n    if (!cuisine) {\n      return [];\n    }\n\n    // Get all recipes from the specified cuisine\n    const allRecipes = this.getAllRecipesFromCuisine(\n      cuisine,\n      timeFactors.currentSeason\n    );\n\n    // Filter by meal type if specified\n    const filteredRecipes = mealType\n      ? allRecipes.filter((recipe) => recipe.mealType?.includes(mealType))\n      : allRecipes;\n\n    // Filter by dietary restrictions if specified\n    const dietaryFilteredRecipes = dietaryRestrictions?.length\n      ? filteredRecipes.filter((recipe) => {\n          const recipeDietary = recipe.dietaryInfo || [];\n          return dietaryRestrictions.every(\n            (restriction) =>\n              recipeDietary.includes(restriction) ||\n              !this.conflictsWithRestriction(recipe, restriction)\n          );\n        })\n      : filteredRecipes;\n\n    // Calculate match scores for each recipe\n    const matches = dietaryFilteredRecipes.map((recipe) => {\n      const seasonalScore = this.calculateSeasonalScore(recipe, timeFactors);\n      const planetaryDayScore = this.calculatePlanetaryDayScore(\n        recipe,\n        timeFactors,\n        astroState\n      );\n      const planetaryHourScore = this.calculatePlanetaryHourScore(\n        recipe,\n        timeFactors,\n        astroState\n      );\n      const elementalScore = this.calculateElementalScore(recipe, astroState);\n      const astrologicalScore = this.calculateAstrologicalScore(\n        recipe,\n        astroState\n      );\n      const timeOfDayScore = this.calculateTimeOfDayScore(recipe, timeFactors);\n\n      // Overall match percentage - weighted combination of all scores\n      const matchPercentage = this.calculateOverallMatch(\n        seasonalScore,\n        planetaryDayScore,\n        planetaryHourScore,\n        elementalScore,\n        astrologicalScore,\n        timeOfDayScore\n      );\n\n      return {\n        cuisine: cuisineName,\n        recipeName: recipe.name || 'Unknown Recipe',\n        recipeId: recipe.id || recipe.name?.toLowerCase().replace(/\\s+/g, '-') || 'unknown',\n        matchPercentage,\n        seasonalScore,\n        planetaryDayScore,\n        planetaryHourScore,\n        elementalScore,\n        astrologicalScore,\n        timeOfDayScore,\n        tags: recipe.tags || [],\n        description: recipe.description || '',\n        ingredients: recipe.ingredients || [],\n        season: recipe.season || [],\n        mealType: recipe.mealType || []};\n    });\n\n    // Sort by match percentage and return top count\n    return matches\n      .sort((a, b) => b.matchPercentage - a.matchPercentage)\n      .slice(0, count);\n  }\n\n  /**\n   * Get current planetary day, hour, season and time of day\n   */\n  private getCurrentTimeFactors(): TimeFactors {\n    const now = new Date();\n    const dayOfWeek = now.getDay(); // 0 = Sunday, 1 = Monday, etc.\n    const hours = now.getHours();\n    const minutes = now.getMinutes();\n\n    // Map day of week to planetary day\n    const planetaryDays: PlanetaryDay[] = [\n      'Sun',\n      'Moon',\n      'Mars',\n      'Mercury',\n      'Jupiter',\n      'Venus',\n      'Saturn',\n    ];\n    const planetaryDay = planetaryDays[dayOfWeek];\n\n    // Calculate planetary hour (simplified implementation)\n    // In traditional planetary hours, daylight is divided into 12 equal parts, as is night\n    // For simplicity, we'll use a 24-hour approximation\n    const hourIndex = (dayOfWeek * 24 + hours) % 7;\n    const planetaryHour = planetaryDays[hourIndex];\n\n    // Determine time of day\n    let timeOfDay: TimeOfDay;\n    if (hours >= 5 && hours < 12) {\n      timeOfDay = 'morning';\n    } else if (hours >= 12 && hours < 17) {\n      timeOfDay = 'afternoon';\n    } else if (hours >= 17 && hours < 22) {\n      timeOfDay = 'evening';\n    } else {\n      timeOfDay = 'night';\n    }\n\n    // Determine current season based on month in Northern Hemisphere\n    // (This could be improved to account for Southern Hemisphere)\n    const month = now.getMonth(); // 0 = January, 11 = December\n    let currentSeason: Season;\n    if (month >= 2 && month <= 4) {\n      currentSeason = 'spring';\n    } else if (month >= 5 && month <= 7) {\n      currentSeason = 'summer';\n    } else if (month >= 8 && month <= 10) {\n      currentSeason = 'autumn';\n    } else {\n      currentSeason = 'winter';\n    }\n\n    return {\n      planetaryDay,\n      planetaryHour,\n      timeOfDay,\n      currentSeason,\n      currentDate: now};\n  }\n\n  /**\n   * Get cuisine data by name\n   */\n  private getCuisine(cuisineName: string): Cuisine | null {\n    const cuisineKey = Object.keys(cuisinesMap).find(\n      (key) => key.toLowerCase() === cuisineName.toLowerCase()\n    );\n\n    return cuisineKey\n      ? cuisinesMap[cuisineKey as keyof typeof cuisinesMap]\n      : null;\n  }\n\n  /**\n   * Extract all recipes from a cuisine, combining seasonal and non-seasonal recipes\n   */\n  private getAllRecipesFromCuisine(\n    cuisine: Cuisine,\n    currentSeason: Season\n  ): RecipeData[] {\n    const allRecipes: RecipeData[] = [];\n\n    const mealTypes = ['breakfast', 'lunch', 'dinner', 'dessert'];\n\n    mealTypes.forEach((mealType) => {\n      // Add current season recipes\n      if (\n        cuisine.dishes[mealType as keyof typeof cuisine.dishes][currentSeason]\n      ) {\n        allRecipes.push(\n          ...cuisine.dishes[mealType as keyof typeof cuisine.dishes][\n            currentSeason\n          ]\n        );\n      }\n\n      // Add \"all\" season recipes if they exist\n      if (cuisine.dishes[mealType as keyof typeof cuisine.dishes].all) {\n        allRecipes.push(\n          ...cuisine.dishes[mealType as keyof typeof cuisine.dishes].all\n        );\n      }\n    });\n\n    return allRecipes;\n  }\n\n  /**\n   * Calculate seasonal match score (0-1)\n   */\n  private calculateSeasonalScore(\n    recipe: RecipeData,\n    timeFactors: TimeFactors\n  ): number {\n    // If recipe has no seasonal information, give it a neutral score\n    if (!recipe.season || recipe.season.length === 0) {\n      return 0.5;\n    }\n\n    // If recipe is good for all seasons, give it a good but not perfect score\n    if (recipe.season.includes('all')) {\n      return 0.8;\n    }\n\n    // If recipe is specifically for the current season, perfect score\n    if (recipe.season.includes(timeFactors.currentSeason)) {\n      return 1.0;\n    }\n\n    // Otherwise, lower score - recipe is out of season\n    return 0.3;\n  }\n\n  /**\n   * Calculate match based on planetary day (0-1)\n   * The planetary day influences the entire day with both its diurnal and nocturnal elements\n   */\n  private calculatePlanetaryDayScore(\n    recipe: RecipeData,\n    timeFactors: TimeFactors,\n    astroState: AstrologicalState\n  ): number {\n    const { planetaryDay, currentDate } = timeFactors;\n    const isDaytime = this.isDaytime(currentDate);\n\n    // If recipe has no elemental properties, give it a neutral score\n    if (!recipe.elementalProperties) {\n      return 0.5;\n    }\n\n    // Map planets to their elemental influences (diurnal and nocturnal elements)\n    const planetaryElements: Record<\n      string,\n      { diurnal: string; nocturnal: string }\n    > = {\n      Sun: { diurnal: 'Fire', nocturnal: 'Fire' },\n      Moon: { diurnal: 'Water', nocturnal: 'Water' },\n      Mercury: { diurnal: 'Air', nocturnal: 'Earth' },\n      Venus: { diurnal: 'Water', nocturnal: 'Earth' },\n      Mars: { diurnal: 'Fire', nocturnal: 'Water' },\n      Jupiter: { diurnal: 'Air', nocturnal: 'Fire' },\n      Saturn: { diurnal: 'Air', nocturnal: 'Earth' },\n      Uranus: { diurnal: 'Water', nocturnal: 'Air' },\n      Neptune: { diurnal: 'Water', nocturnal: 'Water' },\n      Pluto: { diurnal: 'Earth', nocturnal: 'Water' }};\n\n    // Get the elements associated with the current planetary day\n    const dayElements = planetaryElements[planetaryDay];\n    if (!dayElements) return 0.5; // Unknown planet\n\n    // For planetary day, BOTH diurnal and nocturnal elements influence all day\n    // regardless of whether it's day or night\n    const diurnalElement = dayElements.diurnal;\n    const nocturnalElement = dayElements.nocturnal;\n\n    // Calculate how much of each planetary element is present in the recipe\n    const recipeElementals = recipe.elementalProperties as Record<\n      string,\n      number\n    >;\n    const diurnalMatch = recipeElementals[diurnalElement] || 0;\n    const nocturnalMatch = recipeElementals[nocturnalElement] || 0;\n\n    // Calculate a weighted score - both elements are equally important for planetary day\n    let elementalScore = (diurnalMatch + nocturnalMatch) / 2;\n\n    // If the recipe has a direct planetary affinity, give bonus points\n    if (\n      recipe.astrologicalAffinities?.planets &&\n      recipe.astrologicalAffinities.planets.some(\n        (p: string) => p.toLowerCase() === planetaryDay.toLowerCase()\n      )\n    ) {\n      elementalScore = Math.min(1.0, elementalScore + 0.3);\n    }\n\n    return elementalScore;\n  }\n\n  /**\n   * Calculate match based on planetary hour (0-1)\n   * The planetary hour influences with its diurnal element during day, and nocturnal element at night\n   */\n  private calculatePlanetaryHourScore(\n    recipe: RecipeData,\n    timeFactors: TimeFactors,\n    astroState: AstrologicalState\n  ): number {\n    const { planetaryHour, currentDate } = timeFactors;\n    const isDaytime = this.isDaytime(currentDate);\n\n    // If recipe has no elemental properties, give it a neutral score\n    if (!recipe.elementalProperties) {\n      return 0.5;\n    }\n\n    // Map planets to their elemental influences (diurnal and nocturnal elements)\n    const planetaryElements: Record<\n      string,\n      { diurnal: string; nocturnal: string }\n    > = {\n      Sun: { diurnal: 'Fire', nocturnal: 'Fire' },\n      Moon: { diurnal: 'Water', nocturnal: 'Water' },\n      Mercury: { diurnal: 'Air', nocturnal: 'Earth' },\n      Venus: { diurnal: 'Water', nocturnal: 'Earth' },\n      Mars: { diurnal: 'Fire', nocturnal: 'Water' },\n      Jupiter: { diurnal: 'Air', nocturnal: 'Fire' },\n      Saturn: { diurnal: 'Air', nocturnal: 'Earth' },\n      Uranus: { diurnal: 'Water', nocturnal: 'Air' },\n      Neptune: { diurnal: 'Water', nocturnal: 'Water' },\n      Pluto: { diurnal: 'Earth', nocturnal: 'Water' }};\n\n    // Get the elements associated with the current planetary hour\n    const hourElements = planetaryElements[planetaryHour];\n    if (!hourElements) return 0.5; // Unknown planet\n\n    // For planetary hour, use diurnal element during the day and nocturnal element at night\n    const relevantElement = isDaytime\n      ? hourElements.diurnal\n      : hourElements.nocturnal;\n\n    // Calculate how much of the relevant planetary element is present in the recipe\n    const recipeElementals = recipe.elementalProperties as Record<\n      string,\n      number\n    >;\n    const elementalMatch = recipeElementals[relevantElement] || 0;\n\n    // Calculate a score based on how well the recipe matches the planetary hour's element\n    let elementalScore = elementalMatch;\n\n    // If the recipe has a direct planetary affinity, give bonus points\n    if (\n      recipe.astrologicalAffinities?.planets &&\n      recipe.astrologicalAffinities.planets.some(\n        (p: string) => p.toLowerCase() === planetaryHour.toLowerCase()\n      )\n    ) {\n      elementalScore = Math.min(1.0, elementalScore + 0.3);\n    }\n\n    return elementalScore;\n  }\n\n  /**\n   * Calculate elemental match score (0-1)\n   */\n  private calculateElementalScore(\n    recipe: RecipeData,\n    astroState: AstrologicalState\n  ): number {\n    // If recipe has no elemental properties, give it a neutral score\n    if (!recipe.elementalProperties) {\n      return 0.5;\n    }\n\n    // Get dominant element from astro state\n    const dominantElement = this.getDominantElementFromAstro(astroState);\n\n    // Calculate score based on how much of the dominant element is in the recipe\n    const elementValue = recipe.elementalProperties[dominantElement] || 0;\n\n    // Scale value (typical values range from 0 to 1)\n    return Math.min(1.0, elementValue * 1.5); // Scale up slightly to reward recipes with strong elemental alignment\n  }\n\n  /**\n   * Calculate astrological match score based on signs and lunar phases (0-1)\n   */\n  private calculateAstrologicalScore(\n    recipe: RecipeData,\n    astroState: AstrologicalState\n  ): number {\n    let score = 0.5; // Start with neutral score\n\n    // Check zodiac influences\n    if (\n      recipe.zodiacInfluences &&\n      recipe.zodiacInfluences.length > 0 &&\n      astroState.sunSign\n    ) {\n      const matchingSigns = recipe.zodiacInfluences.filter(\n        (sign: string) =>\n          sign.toLowerCase() === astroState.sunSign?.toLowerCase()\n      );\n\n      if (matchingSigns.length > 0) {\n        score += 0.3; // Significant boost for sun sign match\n      }\n    }\n\n    // Check lunar phase influences\n    if (\n      recipe.lunarPhaseInfluences &&\n      recipe.lunarPhaseInfluences.length > 0 &&\n      astroState.lunarPhase\n    ) {\n      const matchingPhases = recipe.lunarPhaseInfluences.filter(\n        (phase: string) =>\n          phase.toLowerCase() === astroState.lunarPhase?.toLowerCase()\n      );\n\n      if (matchingPhases.length > 0) {\n        score += 0.2; // Moderate boost for lunar phase match\n      }\n    }\n\n    return Math.min(1.0, score); // Cap at 1.0\n  }\n\n  /**\n   * Calculate match based on time of day (0-1)\n   */\n  private calculateTimeOfDayScore(\n    recipe: RecipeData,\n    timeFactors: TimeFactors\n  ): number {\n    const { timeOfDay } = timeFactors;\n\n    // Map meal types to appropriate times of day\n    const mealTypeToTimeMap: Record<string, TimeOfDay[]> = {\n      breakfast: ['morning'],\n      brunch: ['morning', 'afternoon'],\n      lunch: ['afternoon'],\n      dinner: ['evening'],\n      dessert: ['afternoon', 'evening'],\n      snack: ['morning', 'afternoon', 'evening']};\n\n    // If recipe has no meal type, give it a neutral score\n    if (!recipe.mealType || recipe.mealType.length === 0) {\n      return 0.5;\n    }\n\n    // Check if any of the recipe's meal types are appropriate for the current time of day\n    for (const mealType of recipe.mealType) {\n      const appropriateTimes = mealTypeToTimeMap[mealType.toLowerCase()];\n      if (appropriateTimes && appropriateTimes.includes(timeOfDay)) {\n        return 1.0; // Perfect match for time of day\n      }\n    }\n\n    // If we get here, there's no direct match for time of day\n    return 0.4; // Lower score for inappropriate time\n  }\n\n  /**\n   * Calculate overall match percentage (0-100)\n   */\n  private calculateOverallMatch(\n    seasonalScore: number,\n    planetaryDayScore: number,\n    planetaryHourScore: number,\n    elementalScore: number,\n    astrologicalScore: number,\n    timeOfDayScore: number\n  ): number {\n    // Weight the different factors - increased planetary influence\n    const weights = {\n      seasonal: 0.15, // Reduced from 0.25\n      planetaryDay: 0.3, // Doubled from 0.15\n      planetaryHour: 0.2, // Doubled from 0.10\n      elemental: 0.15, // Reduced from 0.20\n      astrological: 0.1, // Reduced from 0.15\n      timeOfDay: 0.1, // Reduced from 0.15\n    };\n\n    // Calculate weighted score with stronger emphasis on planetary factors\n    const weightedScore =\n      seasonalScore * weights.seasonal +\n      planetaryDayScore * weights.planetaryDay +\n      planetaryHourScore * weights.planetaryHour +\n      elementalScore * weights.elemental +\n      astrologicalScore * weights.astrological +\n      timeOfDayScore * weights.timeOfDay;\n\n    // Convert to percentage\n    return Math.round(weightedScore * 100);\n  }\n\n  /**\n   * Extract dominant element from astrological state\n   */\n  private getDominantElementFromAstro(astroState: AstrologicalState): string {\n    // If astroState has already calculated dominant element, use that\n    if (astroState.dominantElement) {\n      return astroState.dominantElement;\n    }\n\n    // Otherwise, calculate based on Sun sign\n    const elementMap: Record<ZodiacSign, string> = {\n      aries: 'Fire',\n      taurus: 'Earth',\n      gemini: 'Air',\n      cancer: 'Water',\n      leo: 'Fire',\n      virgo: 'Earth',\n      libra: 'Air',\n      scorpio: 'Water',\n      sagittarius: 'Fire',\n      capricorn: 'Earth',\n      aquarius: 'Air',\n      pisces: 'Water'};\n\n    return astroState.sunSign\n      ? elementMap[astroState.sunSign as ZodiacSign] || 'Fire'\n      : 'Fire';\n  }\n\n  /**\n   * Check if a recipe conflicts with a dietary restriction\n   */\n  private conflictsWithRestriction(\n    recipe: RecipeData,\n    restriction: string\n  ): boolean {\n    // Check allergens if restriction is an allergy\n    if (recipe.allergens && recipe.allergens.length > 0) {\n      // Common restriction mappings\n      const restrictionMap: Record<string, string[]> = {\n        vegetarian: ['beef', 'pork', 'chicken', 'fish', 'meat'],\n        vegan: [\n          'beef',\n          'pork',\n          'chicken',\n          'fish',\n          'meat',\n          'dairy',\n          'eggs',\n          'honey',\n        ],\n        'gluten-free': ['gluten', 'wheat'],\n        'dairy-free': ['dairy', 'milk', 'cream', 'cheese'],\n        'nut-free': ['nuts', 'peanuts', 'almonds', 'walnuts']};\n\n      const restrictedItems = restrictionMap[restriction.toLowerCase()];\n      if (restrictedItems) {\n        return recipe.allergens.some((allergen: string) =>\n          restrictedItems.includes(allergen.toLowerCase())\n        );\n      }\n    }\n\n    // Default to no conflict if we can't determine\n    return false;\n  }\n\n  /**\n   * Determine if the current time is during daylight hours\n   */\n  private isDaytime(date: Date): boolean {\n    const hour = date.getHours();\n    return hour >= 6 && hour < 18;\n  }\n}\n\n// Export singleton instance\nexport const enhancedCuisineRecommender =\n  EnhancedCuisineRecommender.getInstance();\n"],"version":3}