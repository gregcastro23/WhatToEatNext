{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/data/cooking/index.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/data/cooking/index.ts"],"sourcesContent":["/**\n * Main cooking data entry point\n *\n * This file exports cooking methods from the new modular structure\n */\n\n// Export everything from the new methods system\nexport * from './methods';\n\n// Re-export methods from the methods module for backward compatibility\nimport {\n  allCookingMethods,\n  getMethodsByElement,\n  getMethodsByPlanet,\n  getMethodsForIngredientType,\n  getMethodsForZodiacSign,\n} from './methods';\n\n// For backwards compatibility - provide cookingMethods export from the new allCookingMethods\nexport const cookingMethods = allCookingMethods;\n\n// Functions previously in cookingMethods.ts now reimplemented here for backwards compatibility\nimport type {\n  CookingMethod,\n  ElementalProperties,\n  AstrologicalState,\n  Season,\n} from '@/types/alchemy';\n\n/**\n * Get astrological effect for a cooking method (simplified version for backwards compatibility)\n */\nexport const getAstrologicalEffect = (\n  method: CookingMethod,\n  astroState: AstrologicalState\n): number => {\n  const methodData = allCookingMethods[method as unknown as keyof typeof allCookingMethods];\n  if (!methodData || !methodData.astrologicalInfluences) return 0.5;\n\n  let effectScore = 0.5; // Neutral score as default\n\n  // Check zodiac sign\n  if (\n    astroState.sunSign &&\n    methodData.astrologicalInfluences.favorableZodiac?.includes(\n      astroState.sunSign\n    )\n  ) {\n    effectScore += 0.2;\n  } else if (\n    astroState.sunSign &&\n    methodData.astrologicalInfluences.unfavorableZodiac?.includes(\n      astroState.sunSign\n    )\n  ) {\n    effectScore -= 0.2;\n  }\n\n  // Check lunar phase if available\n  if (\n    astroState.lunarPhase &&\n    methodData.astrologicalInfluences.lunarPhaseEffect?.[astroState.lunarPhase]\n  ) {\n    effectScore *=\n      methodData.astrologicalInfluences.lunarPhaseEffect[astroState.lunarPhase];\n  }\n\n  // Keep score within 0.0-1.0 range\n  return Math.max(0.0, Math.min(1.0, effectScore));\n};\n\n/**\n * Calculate modified elemental effect for a cooking method (simplified version for backwards compatibility)\n */\nexport const calculateModifiedElementalEffect = (\n  method: CookingMethod,\n  astroState: AstrologicalState,\n  duration: number,\n  _temperature?: number,\n  _currentSeason?: Season\n): ElementalProperties => {\n  const methodData = allCookingMethods[method as unknown as keyof typeof allCookingMethods];\n  if (!methodData || !methodData.elementalEffect) {\n    return { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 };\n  }\n\n  // Start with base elemental effect\n  const baseEffect = { ...methodData.elementalEffect };\n\n  // Apply duration modifier (simplified)\n  const normalizedDuration = Math.min(\n    1.0,\n    duration / (methodData.duration.max || 60)\n  );\n  if (normalizedDuration > 0.7) {\n    // Longer cooking enhances Fire and reduces Water\n    baseEffect.Fire = Math.min(1.0, (baseEffect.Fire || 0) * 1.2);\n    baseEffect.Water = Math.max(0.0, (baseEffect.Water || 0) * 0.8);\n  }\n\n  // Return the modified effect\n  return baseEffect;\n};\n\n// Export interface for backwards compatibility\nexport interface CookingState {\n  method: CookingMethod;\n  duration: number;\n  temperature?: number;\n  astrologicalState: AstrologicalState;\n  modifiers?: {\n    seasonings?: string[];\n    techniques?: string[];\n  };\n}\n\nimport {\n  dryCookingMethods,\n  wetCookingMethods,\n  molecularCookingMethods,\n  traditionalCookingMethods,\n  rawCookingMethods,\n} from './methods';\n\nimport type { CookingMethodData } from '@/types/cookingMethod';\n\n// Re-export everything\nexport {\n  allCookingMethods,\n  dryCookingMethods,\n  wetCookingMethods,\n  molecularCookingMethods,\n  traditionalCookingMethods,\n  rawCookingMethods,\n};\n\n/**\n * Get a specific cooking method by name\n * @param name The name of the cooking method to retrieve\n * @returns The cooking method data or undefined if not found\n */\nexport function getCookingMethod(name: string): CookingMethodData | undefined {\n  return allCookingMethods[name] || allCookingMethods[name.toLowerCase()];\n}\n\n/**\n * Get multiple cooking methods by name\n * @param names Array of cooking method names to retrieve\n * @returns Object containing the requested cooking methods (key: name, value: data)\n */\nexport function getCookingMethods(\n  names: string[]\n): Record<string, CookingMethodData> {\n  return names.reduce((methods, name) => {\n    const method = getCookingMethod(name);\n    if (method) {\n      methods[name] = method;\n    }\n    return methods;\n  }, {} as Record<string, CookingMethodData>);\n}\n\n/**\n * Get all available cooking method names\n * @returns Array of all cooking method names\n */\nexport function getAllCookingMethodNames(): string[] {\n  return Object.keys(allCookingMethods);\n}\n\n/**\n * Get cooking methods by category\n * @param category The category name: 'dry', 'wet', 'molecular', 'traditional', 'raw'\n * @returns Record of cooking methods in that category or empty object if category not found\n */\nexport function getCookingMethodsByCategory(\n  category: string\n): Record<string, CookingMethodData> {\n  switch (category.toLowerCase()) {\n    case 'dry':\n      return dryCookingMethods;\n    case 'wet':\n      return wetCookingMethods;\n    case 'molecular':\n      return molecularCookingMethods;\n    case 'traditional':\n      return traditionalCookingMethods;\n    case 'raw':\n      return rawCookingMethods;\n    default:\n      return {};\n  }\n}\n\n/**\n * Filter cooking methods by temperature range\n * @param minTemp Minimum temperature in Fahrenheit\n * @param maxTemp Maximum temperature in Fahrenheit\n * @returns Cooking methods that operate within the specified temperature range\n */\nexport function getCookingMethodsByTemperature(\n  minTemp: number,\n  maxTemp: number\n): Record<string, CookingMethodData> {\n  return Object.entries(allCookingMethods)\n    .filter(([_, method]) => {\n      // Apply safe type casting for method property access\n      const methodData = method as any;\n      // Check if the method has optimal temperatures and at least one falls within range\n      if (!methodData?.optimalTemperatures) return false;\n\n      return Object.values(methodData.optimalTemperatures).some(\n        (temp) => {\n          // Pattern KK-10: Final Arithmetic Elimination for data layer operations\n          const numericTemp = Number(temp) || 0;\n          const numericMinTemp = Number(minTemp) || 0;\n          const numericMaxTemp = Number(maxTemp) || 999;\n          return numericTemp >= numericMinTemp && numericTemp <= numericMaxTemp;\n        }\n      );\n    })\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\n}\n\n/**\n * Get cooking methods sorted by sustainability rating\n * @param descending Whether to sort in descending order (most sustainable first)\n * @returns Array of cooking methods sorted by sustainability rating\n */\nexport function getCookingMethodsBySustainability(\n  descending = true\n): CookingMethodData[] {\n  return (Object.values(allCookingMethods) as CookingMethodData[])\n    .filter((method) => {\n      // Apply safe type casting for method property access\n      const methodData = method as any;\n      return methodData?.sustainabilityRating !== undefined;\n    })\n    .sort((a, b) => {\n      // Apply safe type casting for method property access\n      const aData = a as any;\n      const bData = b as any;\n      const aRating = aData?.sustainabilityRating || 0;\n      const bRating = bData?.sustainabilityRating || 0;\n      return descending ? bRating - aRating : aRating - bRating;\n    });\n}\n"],"version":3}