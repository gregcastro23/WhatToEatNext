{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/cuisineRecommender.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/cuisineRecommender.ts"],"sourcesContent":["import { AstrologicalState } from '@/types/celestial';\nimport type { \n  CompleteCuisineType, \n  CookingMethodType,\n  FlavorIntensity,\n  DietaryClassification,\n  RecipeDifficulty,\n  MealType,\n  CourseType,\n  DishType,\n  CuisineCompatibility,\n  CulinaryProfile\n} from \"@/types/culinary\";\nimport { LunarPhase, ZodiacSign, PlanetaryAspect, ElementalProperties, PlanetName } from '@/types/alchemy';\nimport { LUNAR_PHASES } from '@/constants/lunar';\nimport { cuisineFlavorProfiles } from '@/data/cuisineFlavorProfiles';\nimport { planetaryFlavorProfiles, PlanetaryFlavorProfile } from '@/data/planetaryFlavorProfiles';\nimport { allIngredients } from '@/data/ingredients';\nimport { Sauce } from '@/data/sauces';\nimport {\n  calculateLunarPhase,\n  calculatePlanetaryPositions,\n  calculatePlanetaryAspects,\n} from \"@/utils/astrologyUtils\";\n// Import the planet data\nimport venusData from '@/data/planets/venus';\nimport marsData from '@/data/planets/mars';\nimport mercuryData from '@/data/planets/mercury';\nimport jupiterData from '@/data/planets/jupiter';\n\n// Mock planetary data for calculations\nconst mockPlanetaryData = {\n  flavorProfiles: {\n    sweet: 0.7,\n    sour: 0.4,\n    salty: 0.5, \n    bitter: 0.2,\n    umami: 0.6,\n    spicy: 0.3\n  },\n  foodAssociations: [\"vegetables\", \"grains\", \"fruits\", \"proteins\"],\n  herbalAssociations: { Herbs: [\"basil\", \"thyme\", \"mint\", \"rosemary\"] }\n};\n\n/**\n * Generates top sauce recommendations based on elemental and astrological alignments.\n * @param currentElementalProfile The user's current elemental profile.\n * @param count The number of recommendations to return.\n * @returns An array of scored and detailed sauce recommendations.\n */\nexport function generateTopSauceRecommendations(\n  currentElementalProfile: ElementalProperties | null, \n  count = 5,\n  astrologicalState?: Partial<AstrologicalState>\n) {\n  // Import sauce data\n  const { allSauces } = require('@/data/sauces');\n  \n  // Use provided elemental profile or a balanced default\n  const userProfile = currentElementalProfile || { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 };\n  \n  // Get current date for planetary calculations\n  const now = new Date();\n  const dayOfWeek = now.getDay() as 0 | 1 | 2 | 3 | 4 | 5 | 6;\n  \n  // Get planetary day influence\n  const planetaryDays: PlanetName[] = ['Sun', 'Moon', 'Mars', 'Mercury', 'Jupiter', 'Venus', 'Saturn'];\n  const currentPlanetaryDay = planetaryDays[dayOfWeek];\n  \n  // Convert sauces object to array\n  const saucesArray: Sauce[] = Object.values(allSauces || {});\n  \n  // Map all sauces with enhanced scoring\n  const scoredSauces = saucesArray.map(sauce => {\n    const { \n      elementalProperties, \n      astrologicalInfluences: planetaryInfluences, \n      name \n    } = sauce;\n    \n    // 1. Elemental Match Score (50% weight)\n    const elementalMatchScore = calculateElementalMatch(\n      elementalProperties || { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 },\n      userProfile\n    );\n    \n    // 2. Astrological Match Score (30% weight)\n    let astrologicalScore = 0.5; // Base score\n    if (planetaryInfluences && planetaryInfluences.includes(currentPlanetaryDay)) {\n      astrologicalScore = 0.9; // Bonus for matching the planetary day\n    }\n    if (astrologicalState?.zodiacSign && planetaryInfluences?.includes(astrologicalState.zodiacSign)) {\n      astrologicalScore = Math.min(1, astrologicalScore + 0.2); // Bonus for zodiac sign\n    }\n    if (astrologicalState?.lunarPhase && planetaryInfluences?.includes(astrologicalState.lunarPhase)) {\n      astrologicalScore = Math.min(1, astrologicalScore + 0.1); // Bonus for lunar phase\n    }\n    \n    // 3. Flavor Profile Match Score (20% weight) - simplified since Sauce doesn't have flavorProfile\n    let flavorMatchScore = 0.7; // Base score\n    \n    // Use key ingredients for flavor matching\n    if (sauce.keyIngredients && sauce.keyIngredients.length > 0) {\n      const planetaryFlavors = planetaryFlavorProfiles[currentPlanetaryDay] as PlanetaryFlavorProfile;\n      \n      // Simple flavor matching based on ingredients\n      if (planetaryFlavors?.flavorProfiles) {\n        const matchingIngredients = sauce.keyIngredients.filter(ingredient => \n          Object.keys(planetaryFlavors.flavorProfiles).some(flavor => \n            ingredient.toLowerCase().includes(flavor)\n          )\n        );\n        flavorMatchScore = 0.7 + (matchingIngredients.length / sauce.keyIngredients.length) * 0.3;\n      }\n    }\n    \n    // Calculate overall match percentage - weighted average of all scores\n    const overallScore = (elementalMatchScore * 0.5) + (astrologicalScore * 0.3) + (flavorMatchScore * 0.2);\n    \n    return {\n      ...sauce,\n      id: name?.replace(/\\s+/g, '-').toLowerCase(),\n      score: overallScore,\n      matchPercentage: Math.round(overallScore * 100),\n      scores: {\n        elemental: Math.round(elementalMatchScore * 100),\n        astrological: Math.round(astrologicalScore * 100),\n        flavor: Math.round(flavorMatchScore * 100),\n      },\n      reasoning: [\n        `${Math.round(elementalMatchScore * 100)}% elemental compatibility.`,\n        `Aligns with the energy of ${currentPlanetaryDay}.`,\n        `${Math.round(flavorMatchScore * 100)}% flavor harmony.`\n      ]\n    };\n  });\n  \n  // Sort by overall match percentage and return top results\n  return scoredSauces\n    .sort((a, b) => (b.score || 0) - (a.score || 0))\n    .slice(0, count);\n}\n\n\nexport function calculateElementalProfileFromZodiac(_zodiac: string) { return { Fire: 0.5, Water: 0.5, Earth: 0.5, Air: 0.5 }; }\n\nexport function getMatchScoreClass(score: number): string { return score > 0.7 ? \"high\" : score > 0.4 ? \"medium\" : \"low\"; }\n\n// ========== Enhanced Functions with Cuisine Type Support ==========\n\n/**\n * Get enhanced cuisine recommendations with comprehensive scoring and data\n * @param elementalState - The user's current elemental profile\n * @param astrologicalState - The user's current astrological state\n * @param options - Recommendation options (e.g., count)\n * @returns An array of scored and detailed cuisine recommendations\n */\nexport function getCuisineRecommendations(\n  elementalState: ElementalProperties,\n  astrologicalState?: AstrologicalState,\n  options: { count?: number; includeRegional?: boolean } = {}\n) {\n  const { count = 10, includeRegional = true } = options;\n  \n  // Get all cuisines from flavor profiles, ensuring they are correctly typed\n  const cuisines = Object.values(cuisineFlavorProfiles).map(cuisine => ({\n    ...cuisine,\n    id: cuisine.id || cuisine.name?.toLowerCase().replace(/\\s+/g, '-') || 'unknown',\n    name: cuisine.name || 'Unknown Cuisine'\n  }));\n  \n  const scoredCuisines = cuisines.map(cuisine => {\n    // Elemental Match Score (40% weight) - use default values if properties don't exist\n    const elementalMatch = calculateElementalMatch(\n      (cuisine as Record<string, unknown>).elementalAlignment || \n      (cuisine as Record<string, unknown>).elementalProperties || \n      { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 },\n      elementalState\n    );\n    let score = elementalMatch * 0.4;\n    \n    const reasoning: string[] = [`${Math.round(elementalMatch * 100)}% elemental match`];\n    \n    if (astrologicalState) {\n      // Zodiac Match Score (30% weight) - safe property access\n      const zodiacInfluences = (cuisine as Record<string, unknown>).zodiacInfluences;\n      if (astrologicalState.zodiacSign && zodiacInfluences?.includes(astrologicalState.zodiacSign as string)) {\n        score += 0.3;\n        reasoning.push(`Favorable for ${astrologicalState.zodiacSign}`);\n      }\n      \n      // Lunar Phase Match Score (20% weight) - safe property access\n      const lunarPhaseInfluences = (cuisine as Record<string, unknown>).lunarPhaseInfluences;\n      if (astrologicalState.lunarPhase && lunarPhaseInfluences?.includes(astrologicalState.lunarPhase as string)) {\n        score += 0.2;\n        reasoning.push(`Harmonizes with the ${astrologicalState.lunarPhase}`);\n      }\n      \n      // Planetary Influence Score (10% weight) - safe property access\n      const planetaryRulers = (cuisine as Record<string, unknown>).planetaryRulers;\n      if (planetaryRulers && astrologicalState.planetaryPositions) {\n        const planetScore = Object.entries(astrologicalState.planetaryPositions).reduce((acc, [planet, position]) => {\n          if (planetaryRulers?.includes(planet as string)) {\n            return acc + 0.05; // Small bonus for each ruling planet present\n          }\n          return acc;\n        }, 0);\n        score += Math.min(0.1, planetScore);\n        if (planetScore > 0) reasoning.push(`Aligned with ruling planets`);\n      }\n    }\n    \n    // Normalize score to be within a reasonable range (0 to 1)\n    const finalScore = Math.min(1, score);\n\n    return {\n      ...cuisine,\n      id: cuisine.id || cuisine.name.toLowerCase().replace(/\\s+/g, '-'),\n      name: cuisine.name,\n      matchPercentage: Math.round(finalScore * 100),\n      score: finalScore,\n      reasoning\n    };\n  });\n\n  // Filter out regional variants if not requested - safe property access\n  const filteredCuisines = includeRegional \n    ? scoredCuisines \n    : scoredCuisines.filter(c => !(c as unknown[]).parentCuisine);\n\n  return filteredCuisines\n    .sort((a, b) => b.score - a.score)\n    .slice(0, count);\n}\n\n// calculateElementalMatch function (causing errors in multiple components)\nexport function calculateElementalMatch(\n  profile1: ElementalProperties,\n  profile2: ElementalProperties\n): number {\n  let totalMatch = 0;\n  const elements = ['Fire', 'Water', 'Earth', 'Air'] as const;\n  \n  elements.forEach(element => {\n    const diff = Math.abs((profile1[element] || 0) - (profile2[element] || 0));\n    const elementMatch = 1 - diff;\n    totalMatch += elementMatch;\n  });\n  \n  return totalMatch / elements.length;\n}\n\n// renderScoreBadge function (causing error in CuisineRecommender.tsx)\nexport function renderScoreBadge(score: number): string {\n  const scoreClass = getMatchScoreClass(score);\n  const percentage = Math.round(score * 100);\n  \n  return `<span class=\"score-badge ${scoreClass}\">${percentage}%</span>`;\n}\n\n// calculateElementalContributionsFromPlanets function (causing errors in debug components)\nexport function calculateElementalContributionsFromPlanets(\n  planetaryPositions: Record<string, any>\n): ElementalProperties {\n  const contributions: ElementalProperties = {\n    Fire: 0,\n    Water: 0,\n    Earth: 0,\n    Air: 0\n  };\n  \n  // Calculate contributions based on planetary positions\n  Object.entries(planetaryPositions).forEach(([planet, position]) => {\n    const planetData = getPlanetaryElementalContribution(planet);\n    const signData = getSignElementalContribution(position?.sign);\n    \n    // Add weighted contributions\n    contributions.Fire += (planetData.Fire + signData.Fire) * 0.5;\n    contributions.Water += (planetData.Water + signData.Water) * 0.5;\n    contributions.Earth += (planetData.Earth + signData.Earth) * 0.5;\n    contributions.Air += (planetData.Air + signData.Air) * 0.5;\n  });\n  \n  // Normalize to ensure total is reasonable\n  const total = contributions.Fire + contributions.Water + contributions.Earth + contributions.Air;\n  if (total > 0) {\n    contributions.Fire = contributions.Fire / total;\n    contributions.Water = contributions.Water / total;\n    contributions.Earth = contributions.Earth / total;\n    contributions.Air = contributions.Air / total;\n  }\n  \n  return contributions;\n}\n\n// Helper functions for planetary calculations\nfunction getPlanetaryElementalContribution(planet: string): ElementalProperties {\n  const planetaryElements: Record<string, ElementalProperties> = {\n    Sun: { Fire: 0.8, Water: 0.1, Earth: 0.05, Air: 0.05 },\n    Moon: { Fire: 0.1, Water: 0.8, Earth: 0.05, Air: 0.05 },\n    Mercury: { Fire: 0.2, Water: 0.1, Earth: 0.2, Air: 0.5 },\n    Venus: { Fire: 0.1, Water: 0.4, Earth: 0.4, Air: 0.1 },\n    Mars: { Fire: 0.7, Water: 0.2, Earth: 0.05, Air: 0.05 },\n    Jupiter: { Fire: 0.3, Water: 0.1, Earth: 0.1, Air: 0.5 },\n    Saturn: { Fire: 0.05, Water: 0.1, Earth: 0.7, Air: 0.15 }\n  };\n  \n  return planetaryElements[planet] || { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 };\n}\n\nfunction getSignElementalContribution(sign: string): ElementalProperties {\n  const signElements: Record<string, ElementalProperties> = {\n    Aries: { Fire: 1, Water: 0, Earth: 0, Air: 0 },\n    Taurus: { Fire: 0, Water: 0, Earth: 1, Air: 0 },\n    Gemini: { Fire: 0, Water: 0, Earth: 0, Air: 1 },\n    Cancer: { Fire: 0, Water: 1, Earth: 0, Air: 0 },\n    Leo: { Fire: 1, Water: 0, Earth: 0, Air: 0 },\n    Virgo: { Fire: 0, Water: 0, Earth: 1, Air: 0 },\n    Libra: { Fire: 0, Water: 0, Earth: 0, Air: 1 },\n    Scorpio: { Fire: 0, Water: 1, Earth: 0, Air: 0 },\n    Sagittarius: { Fire: 1, Water: 0, Earth: 0, Air: 0 },\n    Capricorn: { Fire: 0, Water: 0, Earth: 1, Air: 0 },\n    Aquarius: { Fire: 0, Water: 0, Earth: 0, Air: 1 },\n    Pisces: { Fire: 0, Water: 1, Earth: 0, Air: 0 }\n  };\n  \n  return signElements[sign] || { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 };\n}\n"],"version":3}