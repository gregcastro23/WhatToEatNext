d7b93f46620b9de7788968b989c450a5
"use strict";
/**
 * Integration test for memory management system
 *
 * This test verifies that the memory management system integrates properly
 * with the existing test infrastructure and provides the expected functionality.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const TestMemoryMonitor_1 = require("../utils/TestMemoryMonitor");
const memoryTestHelpers_1 = require("../utils/memoryTestHelpers");
describe('Memory Management Integration', () => {
    it('should have reduced test timeout from 30s to 15s', () => {
        // Verify that integration test timeout is set to 15s
        expect(memoryTestHelpers_1.TEST_TIMEOUTS.integration).toBe(15000);
    });
    it('should have Jest configured with max 2 workers', () => {
        // This test verifies Jest configuration indirectly
        // The actual worker count is controlled by Jest configuration
        expect(true).toBe(true); // Placeholder - actual verification happens in Jest config
    });
    it('should have memory monitoring available globally', () => {
        expect(global.testUtils).toBeDefined();
        expect(global.testUtils.checkMemory).toBeDefined();
        expect(global.testUtils.cleanupMemory).toBeDefined();
        const memoryUsage = global.testUtils.checkMemory();
        expect(memoryUsage).toBeDefined();
        expect(memoryUsage.heapUsed).toMatch(/\d+\.\d+MB/);
    });
    it('should have garbage collection available', () => {
        if (global.forceGC) {
            const gcResult = global.forceGC();
            expect(typeof gcResult).toBe('boolean');
        }
        else {
            // If GC is not available, that's also acceptable
            expect(global.forceGC).toBeUndefined();
        }
    });
    (0, memoryTestHelpers_1.itWithMemoryCleanup)('should work with memory-safe test wrapper', async () => {
        // This test uses the memory-safe wrapper
        const initialMemory = process.memoryUsage().heapUsed;
        // Simulate some memory allocation
        const testData = new Array(1000).fill('test-data');
        const afterAllocation = process.memoryUsage().heapUsed;
        expect(afterAllocation).toBeGreaterThan(initialMemory);
        // Cleanup happens automatically via the wrapper
        testData.length = 0;
    });
    it('should track memory usage during test execution', () => {
        const monitor = new TestMemoryMonitor_1.TestMemoryMonitor();
        const initialSnapshot = monitor.takeSnapshot('integration-test-start');
        expect(initialSnapshot).toBeDefined();
        expect(initialSnapshot.heapUsed).toBeGreaterThan(0);
        // Simulate test operations
        const testArray = new Array(100).fill('integration-test-data');
        const finalSnapshot = monitor.takeSnapshot('integration-test-end');
        expect(finalSnapshot.heapUsed).toBeGreaterThan(initialSnapshot.heapUsed);
        // Cleanup
        testArray.length = 0;
        monitor.cleanup('integration-test-cleanup');
    });
    it('should handle memory cleanup without affecting test execution', () => {
        const beforeCleanup = process.memoryUsage().heapUsed;
        // Perform cleanup
        global.testUtils.cleanupMemory();
        const afterCleanup = process.memoryUsage().heapUsed;
        // Memory should be cleaned up (or at least not increased significantly)
        expect(afterCleanup).toBeLessThanOrEqual(beforeCleanup + (10 * 1024 * 1024)); // Allow 10MB tolerance
    });
    it('should complete within the reduced timeout limit', async () => {
        const startTime = Date.now();
        // Simulate an integration test operation
        await new Promise(resolve => setTimeout(resolve, 100));
        const duration = Date.now() - startTime;
        // Should complete well within the 15s timeout
        expect(duration).toBeLessThan(15000);
        expect(duration).toBeGreaterThan(50); // Should take at least 50ms due to setTimeout
    }, memoryTestHelpers_1.TEST_TIMEOUTS.integration);
    it('should provide memory usage information', () => {
        const memoryInfo = global.testUtils.checkMemory();
        expect(memoryInfo).toHaveProperty('heapUsed');
        expect(memoryInfo).toHaveProperty('heapTotal');
        expect(memoryInfo).toHaveProperty('external');
        expect(memoryInfo).toHaveProperty('arrayBuffers');
        // All values should be formatted as MB strings
        expect(memoryInfo.heapUsed).toMatch(/^\d+\.\d+MB$/);
        expect(memoryInfo.heapTotal).toMatch(/^\d+\.\d+MB$/);
        expect(memoryInfo.external).toMatch(/^\d+\.\d+MB$/);
        expect(memoryInfo.arrayBuffers).toMatch(/^\d+\.\d+MB$/);
    });
    it('should handle memory-intensive operations safely', async () => {
        const monitor = new TestMemoryMonitor_1.TestMemoryMonitor({
            warningThreshold: 100,
            errorThreshold: 500,
            leakThreshold: 50
        });
        const initialMemory = monitor.takeSnapshot('memory-intensive-start');
        // Simulate memory-intensive operation
        const largeArrays = [];
        for (let i = 0; i < 10; i++) {
            largeArrays.push(new Array(1000).fill(`data-${i}`));
        }
        const afterAllocation = monitor.takeSnapshot('memory-intensive-peak');
        expect(afterAllocation.heapUsed).toBeGreaterThan(initialMemory.heapUsed);
        // Cleanup
        largeArrays.forEach(arr => arr.length = 0);
        largeArrays.length = 0;
        const cleanupResult = monitor.cleanup('memory-intensive-cleanup');
        expect(cleanupResult.cleanupEffective).toBe(true);
    });
});
describe('Memory Management Configuration Verification', () => {
    it('should have Jest configured with memory-safe settings', () => {
        // These tests verify that our Jest configuration is properly applied
        // Check that we have the memory management setup files
        expect(global.testUtils).toBeDefined();
        expect(global.getMemoryUsage).toBeDefined();
        expect(global.cleanupTestMemory).toBeDefined();
    });
    it('should have proper timeout configuration', () => {
        // Verify timeout constants are properly set
        expect(memoryTestHelpers_1.TEST_TIMEOUTS.unit).toBe(5000);
        expect(memoryTestHelpers_1.TEST_TIMEOUTS.integration).toBe(15000); // Reduced from 30s
        expect(memoryTestHelpers_1.TEST_TIMEOUTS.memory).toBe(20000);
        expect(memoryTestHelpers_1.TEST_TIMEOUTS.performance).toBe(30000);
    });
    it('should have memory thresholds configured', () => {
        const monitor = TestMemoryMonitor_1.TestMemoryMonitor.createDefault();
        const summary = monitor.getMemorySummary();
        expect(summary).toBeDefined();
        expect(summary.initialMemory).toBeGreaterThan(0);
        monitor.cleanup('config-verification-cleanup');
    });
    it('should have CI-specific configuration available', () => {
        const ciMonitor = TestMemoryMonitor_1.TestMemoryMonitor.createForCI();
        const summary = ciMonitor.getMemorySummary();
        expect(summary).toBeDefined();
        expect(summary.initialMemory).toBeGreaterThan(0);
        ciMonitor.cleanup('ci-config-verification-cleanup');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,