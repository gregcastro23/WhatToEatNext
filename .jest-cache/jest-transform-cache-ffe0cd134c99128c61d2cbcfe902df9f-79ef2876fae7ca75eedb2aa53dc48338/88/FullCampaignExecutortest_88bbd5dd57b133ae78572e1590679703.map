{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/unintentional-any-elimination/__tests__/FullCampaignExecutor.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/unintentional-any-elimination/__tests__/FullCampaignExecutor.test.ts"],"sourcesContent":["/**\n * Full Campaign Executor Tests\n *\n * Comprehensive test suite for the full unintentional any elimination campaign\n */\n\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\nimport { FullCampaignExecutor } from '../FullCampaignExecutor';\nimport { FullCampaignConfig } from '../types';\n\n// Mock external dependencies\njest.mock('child_process');\njest.mock('fs');\n\nconst mockExecSync = execSync as jest.MockedFunction<typeof execSync>;\nconst mockFs = fs as jest.Mocked<typeof fs>;\n\ndescribe('FullCampaignExecutor', () => {\n  let executor: FullCampaignExecutor;\n  let mockConfig: Partial<FullCampaignConfig>;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    mockConfig = {\n      targetReductionPercentage: 17.5,\n      targetFixCount: 300,\n      maxBatchSize: 25,\n      safetyThreshold: 0.7,\n      enableDocumentation: true,\n      generateFinalReport: true\n    };\n\n    executor = new FullCampaignExecutor(mockConfig);\n\n    // Mock file system operations\n    mockFs.existsSync.mockReturnValue(true);\n    mockFs.readFileSync.mockReturnValue('const test: any = {};');\n    mockFs.writeFileSync.mockImplementation(() => {});\n\n    // Mock successful build validation\n    mockExecSync.mockImplementation((command: string) => {\n      if (command.includes('tsc --noEmit')) {\n        return '';\n      }\n      if (command.includes('grep -c \"error TS\"')) {\n        return '0';\n      }\n      if (command.includes('find src')) {\n        return 'src/test1.ts\\nsrc/test2.ts\\nsrc/test3.ts';\n      }\n      return '';\n    });\n  });\n\n  describe('Constructor', () => {\n    test('should initialize with default configuration', () => {\n      const defaultExecutor = new FullCampaignExecutor();\n      expect(defaultExecutor).toBeDefined();\n    });\n\n    test('should merge provided configuration with defaults', () => {\n      const customConfig = { targetReductionPercentage: 20 };\n      const customExecutor = new FullCampaignExecutor(customConfig);\n      expect(customExecutor).toBeDefined();\n    });\n  });\n\n  describe('executeFullCampaign', () => {\n    test('should execute all campaign phases successfully', async () => {\n      // Mock successful execution\n      mockExecSync.mockImplementation((command: string) => {\n        if (command.includes('tsc --noEmit')) return '';\n        if (command.includes('grep -c \"error TS\"')) return '100'; // Initial errors\n        if (command.includes('find src')) return 'src/test1.ts\\nsrc/test2.ts';\n        return '';\n      });\n\n      const result = await executor.executeFullCampaign();\n\n      expect(result.success).toBe(true);\n      expect(result.phases).toHaveLength(6); // All 6 phases\n      expect(result.phases[0].name).toBe('Initial Analysis and Baseline');\n      expect(result.phases[1].name).toBe('High-Confidence Replacements');\n      expect(result.phases[2].name).toBe('Medium-Risk Category Processing');\n      expect(result.phases[3].name).toBe('Domain-Specific Processing');\n      expect(result.phases[4].name).toBe('Documentation and Validation');\n      expect(result.phases[5].name).toBe('Final Validation and Reporting');\n    });\n\n    test('should handle campaign execution failure gracefully', async () => {\n      // Mock build failure\n      mockExecSync.mockImplementation((command: string) => {\n        if (command.includes('tsc --noEmit')) {\n          throw new Error('Build failed');\n        }\n        return '';\n      });\n\n      const result = await executor.executeFullCampaign();\n\n      expect(result.success).toBe(false);\n      expect(result.error).toBeDefined();\n      expect(result.buildStable).toBe(false);\n    });\n\n    test('should track metrics throughout campaign execution', async () => {\n      const result = await executor.executeFullCampaign();\n\n      expect(result.metrics).toBeDefined();\n      expect(result.metrics.baselineEstablished).toBe(true);\n      expect(result.metrics.initialErrorCount).toBeGreaterThanOrEqual(0);\n      expect(result.metrics.finalErrorCount).toBeGreaterThanOrEqual(0);\n    });\n\n    test('should generate final report when enabled', async () => {\n      const result = await executor.executeFullCampaign();\n\n      expect(result.finalReport).toBeDefined();\n      expect(result.finalReport?.campaignId).toContain('full-campaign-');\n      expect(result.finalReport?.recommendations).toBeDefined();\n      expect(result.finalReport?.achievements).toBeDefined();\n      expect(result.finalReport?.nextSteps).toBeDefined();\n    });\n  });\n\n  describe('Phase Execution', () => {\n    test('should execute Phase 1: Initial Analysis and Baseline', async () => {\n      // Mock initial metrics\n      mockExecSync.mockImplementation((command: string) => {\n        if (command.includes('grep -c \"error TS\"')) return '150';\n        if (command.includes('find src')) return 'src/test1.ts\\nsrc/test2.ts';\n        return '';\n      });\n\n      const result = await executor.executeFullCampaign();\n      const phase1 = result.phases[0];\n\n      expect(phase1.name).toBe('Initial Analysis and Baseline');\n      expect(phase1.success).toBe(true);\n      expect(phase1.fixesApplied).toBe(0); // Analysis phase doesn't apply fixes\n      expect(phase1.details).toBeDefined();\n    });\n\n    test('should execute Phase 2: High-Confidence Replacements', async () => {\n      const result = await executor.executeFullCampaign();\n      const phase2 = result.phases[1];\n\n      expect(phase2.name).toBe('High-Confidence Replacements');\n      expect(phase2.success).toBe(true);\n      expect(phase2.details?.categories).toContain('ARRAY_TYPE');\n      expect(phase2.details?.categories).toContain('RECORD_TYPE');\n    });\n\n    test('should execute Phase 3: Medium-Risk Category Processing', async () => {\n      const result = await executor.executeFullCampaign();\n      const phase3 = result.phases[2];\n\n      expect(phase3.name).toBe('Medium-Risk Category Processing');\n      expect(phase3.success).toBe(true);\n      expect(phase3.details?.enhancedSafetyProtocols).toBe(true);\n    });\n\n    test('should execute Phase 4: Domain-Specific Processing', async () => {\n      const result = await executor.executeFullCampaign();\n      const phase4 = result.phases[3];\n\n      expect(phase4.name).toBe('Domain-Specific Processing');\n      expect(phase4.success).toBe(true);\n      expect(phase4.details?.domainsProcessed).toContain('astrological');\n      expect(phase4.details?.domainsProcessed).toContain('recipe');\n      expect(phase4.details?.domainsProcessed).toContain('campaign');\n    });\n\n    test('should execute Phase 5: Documentation and Validation', async () => {\n      const result = await executor.executeFullCampaign();\n      const phase5 = result.phases[4];\n\n      expect(phase5.name).toBe('Documentation and Validation');\n      expect(phase5.success).toBe(true);\n      expect(phase5.details?.documentationResult).toBeDefined();\n      expect(phase5.details?.eslintResult).toBeDefined();\n    });\n\n    test('should execute Phase 6: Final Validation and Reporting', async () => {\n      const result = await executor.executeFullCampaign();\n      const phase6 = result.phases[5];\n\n      expect(phase6.name).toBe('Final Validation and Reporting');\n      expect(phase6.success).toBe(true);\n      expect(phase6.details?.finalReport).toBeDefined();\n      expect(phase6.details?.targetAchieved).toBeDefined();\n    });\n  });\n\n  describe('Target Achievement', () => {\n    test('should achieve target when sufficient fixes are applied', async () => {\n      // Mock scenario where target is achieved\n      mockExecSync.mockImplementation((command: string) => {\n        if (command.includes('grep -c \"error TS\"')) {\n          // Simulate error reduction\n          return Math.random() > 0.5 ? '100' : '80';\n        }\n        if (command.includes('find src')) return 'src/test1.ts\\nsrc/test2.ts';\n        return '';\n      });\n\n      const result = await executor.executeFullCampaign();\n\n      // Target achievement depends on actual fixes applied\n      expect(result.targetAchieved).toBeDefined();\n      expect(result.reductionPercentage).toBeGreaterThanOrEqual(0);\n    });\n\n    test('should calculate reduction percentage correctly', async () => {\n      const result = await executor.executeFullCampaign();\n\n      expect(result.reductionPercentage).toBeGreaterThanOrEqual(0);\n      expect(result.reductionPercentage).toBeLessThanOrEqual(100);\n    });\n\n    test('should track total fixes applied across all phases', async () => {\n      const result = await executor.executeFullCampaign();\n\n      expect(result.totalFixesApplied).toBeGreaterThanOrEqual(0);\n      expect(result.metrics.totalFixesApplied).toBe(result.totalFixesApplied);\n    });\n  });\n\n  describe('Safety Protocols', () => {\n    test('should validate build stability after each phase', async () => {\n      const result = await executor.executeFullCampaign();\n\n      expect(result.buildStable).toBeDefined();\n      // Each phase should have validated build stability\n      result.phases.forEach(phase => {\n        expect(phase.success).toBeDefined();\n      });\n    });\n\n    test('should handle build failures with rollback', async () => {\n      // Mock build failure scenario\n      let callCount = 0;\n      mockExecSync.mockImplementation((command: string) => {\n        if (command.includes('tsc --noEmit')) {\n          callCount++;\n          if (callCount > 2) {\n            throw new Error('Build failed');\n          }\n          return '';\n        }\n        return '';\n      });\n\n      const result = await executor.executeFullCampaign();\n\n      // Campaign should handle build failures gracefully\n      expect(result.success).toBeDefined();\n      expect(result.buildStable).toBeDefined();\n    });\n\n    test('should create and restore backups when needed', async () => {\n      // Mock backup operations\n      mockExecSync.mockImplementation((command: string) => {\n        if (command.includes('mkdir -p')) return '';\n        if (command.includes('cp -r')) return '';\n        if (command.includes('rm -rf')) return '';\n        return '';\n      });\n\n      const result = await executor.executeFullCampaign();\n\n      expect(result.success).toBeDefined();\n      // Backup operations should be called during execution\n      expect(mockExecSync).toHaveBeenCalled();\n    });\n  });\n\n  describe('Documentation System', () => {\n    test('should add ESLint disable comments for intentional any types', async () => {\n      const result = await executor.executeFullCampaign();\n      const documentationPhase = result.phases[4];\n\n      expect(documentationPhase.details?.eslintResult).toBeDefined();\n      expect(documentationPhase.details?.eslintResult.added).toBeGreaterThanOrEqual(0);\n    });\n\n    test('should validate documentation completeness', async () => {\n      const result = await executor.executeFullCampaign();\n      const documentationPhase = result.phases[4];\n\n      expect(documentationPhase.details?.validationResult).toBeDefined();\n      expect(documentationPhase.details?.validationResult.complete).toBeDefined();\n    });\n\n    test('should generate appropriate ESLint disable reasons', async () => {\n      const result = await executor.executeFullCampaign();\n\n      // Documentation phase should complete successfully\n      expect(result.phases[4].success).toBe(true);\n    });\n  });\n\n  describe('Domain-Specific Processing', () => {\n    test('should process astrological domain files', async () => {\n      // Mock astrological files\n      mockExecSync.mockImplementation((command: string) => {\n        if (command.includes('find src')) {\n          return 'src/calculations/astrology.ts\\nsrc/services/astrological.ts';\n        }\n        return '';\n      });\n\n      const result = await executor.executeFullCampaign();\n      const domainPhase = result.phases[3];\n\n      expect(domainPhase.details?.domainResults).toBeDefined();\n      const astroResult = domainPhase.details?.domainResults.find(\n        (r: any) => r.domain === 'astrological'\n      );\n      expect(astroResult).toBeDefined();\n    });\n\n    test('should process recipe domain files', async () => {\n      // Mock recipe files\n      mockExecSync.mockImplementation((command: string) => {\n        if (command.includes('find src')) {\n          return 'src/data/recipes.ts\\nsrc/components/recipe.tsx';\n        }\n        return '';\n      });\n\n      const result = await executor.executeFullCampaign();\n      const domainPhase = result.phases[3];\n\n      expect(domainPhase.details?.domainResults).toBeDefined();\n      const recipeResult = domainPhase.details?.domainResults.find(\n        (r: any) => r.domain === 'recipe'\n      );\n      expect(recipeResult).toBeDefined();\n    });\n\n    test('should process campaign domain files', async () => {\n      // Mock campaign files\n      mockExecSync.mockImplementation((command: string) => {\n        if (command.includes('find src')) {\n          return 'src/services/campaign/controller.ts\\nsrc/services/metrics.ts';\n        }\n        return '';\n      });\n\n      const result = await executor.executeFullCampaign();\n      const domainPhase = result.phases[3];\n\n      expect(domainPhase.details?.domainResults).toBeDefined();\n      const campaignResult = domainPhase.details?.domainResults.find(\n        (r: any) => r.domain === 'campaign'\n      );\n      expect(campaignResult).toBeDefined();\n    });\n  });\n\n  describe('Performance Validation', () => {\n    test('should validate build performance improvements', async () => {\n      const result = await executor.executeFullCampaign();\n\n      expect(result.performanceImproved).toBeDefined();\n      expect(result.finalReport?.performanceImproved).toBeDefined();\n    });\n\n    test('should measure campaign execution duration', async () => {\n      const result = await executor.executeFullCampaign();\n\n      expect(result.duration).toBeGreaterThan(0);\n      expect(result.finalReport?.duration).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Error Handling', () => {\n    test('should handle classification errors gracefully', async () => {\n      // Mock classification error\n      mockFs.readFileSync.mockImplementation(() => {\n        throw new Error('File read error');\n      });\n\n      const result = await executor.executeFullCampaign();\n\n      // Campaign should continue despite individual file errors\n      expect(result.success).toBeDefined();\n    });\n\n    test('should handle replacement errors with rollback', async () => {\n      // Mock replacement error scenario\n      let buildCallCount = 0;\n      mockExecSync.mockImplementation((command: string) => {\n        if (command.includes('tsc --noEmit')) {\n          buildCallCount++;\n          if (buildCallCount > 3) {\n            throw new Error('Build failed after replacement');\n          }\n          return '';\n        }\n        return '';\n      });\n\n      const result = await executor.executeFullCampaign();\n\n      expect(result.success).toBeDefined();\n      expect(result.metrics.rollbacksPerformed).toBeGreaterThanOrEqual(0);\n    });\n\n    test('should handle emergency stop conditions', async () => {\n      // Mock emergency stop scenario\n      const emergencyConfig = {\n        ...mockConfig,\n        emergencyStopThreshold: 0.9, // Very high threshold\n        maxCampaignDuration: 1000 // Very short duration\n      };\n\n      const emergencyExecutor = new FullCampaignExecutor(emergencyConfig);\n      const result = await emergencyExecutor.executeFullCampaign();\n\n      expect(result.success).toBeDefined();\n    });\n  });\n\n  describe('Final Report Generation', () => {\n    test('should generate comprehensive final report', async () => {\n      const result = await executor.executeFullCampaign();\n\n      expect(result.finalReport).toBeDefined();\n      expect(result.finalReport?.campaignId).toBeDefined();\n      expect(result.finalReport?.startTime).toBeDefined();\n      expect(result.finalReport?.endTime).toBeDefined();\n      expect(result.finalReport?.targetAchieved).toBeDefined();\n    });\n\n    test('should include recommendations in final report', async () => {\n      const result = await executor.executeFullCampaign();\n\n      expect(result.finalReport?.recommendations).toBeDefined();\n      expect(Array.isArray(result.finalReport?.recommendations)).toBe(true);\n    });\n\n    test('should include achievements in final report', async () => {\n      const result = await executor.executeFullCampaign();\n\n      expect(result.finalReport?.achievements).toBeDefined();\n      expect(Array.isArray(result.finalReport?.achievements)).toBe(true);\n    });\n\n    test('should include next steps in final report', async () => {\n      const result = await executor.executeFullCampaign();\n\n      expect(result.finalReport?.nextSteps).toBeDefined();\n      expect(Array.isArray(result.finalReport?.nextSteps)).toBe(true);\n    });\n  });\n\n  describe('Configuration Validation', () => {\n    test('should handle invalid configuration gracefully', () => {\n      const invalidConfig = {\n        targetReductionPercentage: -10, // Invalid negative percentage\n        targetFixCount: -100, // Invalid negative count\n        maxBatchSize: 0 // Invalid zero batch size\n      };\n\n      expect(() => new FullCampaignExecutor(invalidConfig)).not.toThrow();\n    });\n\n    test('should use reasonable defaults for missing configuration', () => {\n      const minimalConfig = {};\n      const executor = new FullCampaignExecutor(minimalConfig);\n\n      expect(executor).toBeDefined();\n    });\n  });\n\n  describe('Integration with Existing Systems', () => {\n    test('should integrate with campaign infrastructure', async () => {\n      const result = await executor.executeFullCampaign();\n\n      // Campaign should complete and provide integration points\n      expect(result.success).toBeDefined();\n      expect(result.metrics).toBeDefined();\n    });\n\n    test('should maintain compatibility with existing metrics', async () => {\n      const result = await executor.executeFullCampaign();\n\n      expect(result.metrics.baselineEstablished).toBeDefined();\n      expect(result.metrics.campaignCompleted).toBeDefined();\n    });\n  });\n});\n"],"version":3}