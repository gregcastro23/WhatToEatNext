{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services 2/campaign/unintentional-any-elimination/__tests__/DomainSpecificTesting.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services 2/campaign/unintentional-any-elimination/__tests__/DomainSpecificTesting.test.ts"],"sourcesContent":["/**\n * Domain-Specific Testing\n * Tests for astrological code analysis and preservation, recipe/ingredient type suggestions,\n * campaign system flexibility preservation, and service layer interface suggestions\n */\n\nimport { AnyTypeClassifier } from '../AnyTypeClassifier';\nimport { DomainContextAnalyzer } from '../DomainContextAnalyzer';\nimport { SafeTypeReplacer } from '../SafeTypeReplacer';\nimport {\n    AnyTypeCategory,\n    ClassificationContext,\n    CodeDomain,\n    TypeReplacement\n} from '../types';\n\ndescribe('Domain-Specific Testing', () => {\n  let classifier: AnyTypeClassifier;\n  let analyzer: DomainContextAnalyzer;\n  let replacer: SafeTypeReplacer;\n\n  beforeEach(() => {\n    classifier = new AnyTypeClassifier();\n    analyzer = new DomainContextAnalyzer();\n    replacer = new SafeTypeReplacer();\n  });\n\n  const createDomainContext = (\n    codeSnippet: string,\n    filePath: string,\n    domain: CodeDomain,\n    surroundingLines: string[] = [],\n    hasComment = false,\n    comment?: string\n  ): ClassificationContext => ({\n    filePath,\n    lineNumber: 1,\n    codeSnippet,\n    surroundingLines,\n    hasExistingComment: hasComment,\n    existingComment: comment,\n    isInTestFile: filePath.includes('.test.') || filePath.includes('.spec.'),\n    domainContext: {\n      domain,\n      intentionalityHints: [],\n      suggestedTypes: [],\n      preservationReasons: []\n    }\n  });\n\n  describe('Astrological Code Analysis and Preservation', () => {\n    describe('Planetary Position Data Preservation', () => {\n      test('should preserve planetary position API responses', async () => {\n        const context = createDomainContext(\n          'const planetaryPositions: any = await getReliablePlanetaryPositions();',\n          'src/calculations/planetary/positions.ts',\n          CodeDomain.ASTROLOGICAL,\n          [\n            'import { getReliablePlanetaryPositions } from \"@/utils/reliableAstronomy\";',\n            'export async function calculateCurrentPositions() {'\n          ]\n        );\n\n        const domainAnalysis = await analyzer.analyzeDomain(context);\n        expect(domainAnalysis.domain).toBe(CodeDomain.ASTROLOGICAL);\n        expect(domainAnalysis.preservationReasons).toContain(\n          'Astrological calculations require compatibility with external astronomical libraries'\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(true);\n        expect(classification.category).toBe(AnyTypeCategory.EXTERNAL_API);\n        expect(classification.reasoning).toContain('planetary position data');\n      });\n\n      test('should preserve ephemeris data from external sources', async () => {\n        const context = createDomainContext(\n          'const ephemerisData: any = astronomyEngine.getEphemeris(date);',\n          'src/calculations/ephemeris/calculator.ts',\n          CodeDomain.ASTROLOGICAL,\n          [\n            'import { astronomyEngine } from \"astronomy-engine\";',\n            'function calculateTransits(startDate: Date, endDate: Date) {'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(true);\n        expect(classification.reasoning).toContain('external astronomical data');\n        expect(classification.requiresDocumentation).toBe(true);\n      });\n\n      test('should preserve Swiss Ephemeris compatibility', async () => {\n        const context = createDomainContext(\n          'const swissData: any = swisseph.calc_ut(julianDay, planet);',\n          'src/calculations/swiss-ephemeris/wrapper.ts',\n          CodeDomain.ASTROLOGICAL,\n          [\n            'import * as swisseph from \"swisseph\";',\n            'export function calculatePlanetPosition(planet: number, date: Date): any {'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(true);\n        expect(classification.category).toBe(AnyTypeCategory.EXTERNAL_API);\n        expect(classification.reasoning).toContain('Swiss Ephemeris');\n      });\n\n      test('should preserve NASA JPL Horizons API responses', async () => {\n        const context = createDomainContext(\n          'const horizonsResponse: any = await nasaJplApi.getHorizonsData(params);',\n          'src/services/astronomy/nasa-jpl.ts',\n          CodeDomain.ASTROLOGICAL,\n          [\n            'class NasaJplService {',\n            '  async fetchPlanetaryData(params: HorizonsParams): Promise<any> {'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(true);\n        expect(classification.reasoning).toContain('NASA JPL');\n        expect(classification.category).toBe(AnyTypeCategory.EXTERNAL_API);\n      });\n    });\n\n    describe('Elemental Properties Preservation', () => {\n      test('should preserve dynamic elemental calculations', async () => {\n        const context = createDomainContext(\n          'const elementalBalance: any = calculateElementalHarmony(ingredients);',\n          'src/calculations/elemental/harmony.ts',\n          CodeDomain.ASTROLOGICAL,\n          [\n            'import { ElementalProperties } from \"@/types\";',\n            'function calculateCompatibility(source: ElementalProperties, target: ElementalProperties): any {'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(true);\n        expect(classification.reasoning).toContain('elemental');\n      });\n\n      test('should suggest specific types for elemental properties when possible', async () => {\n        const context = createDomainContext(\n          'const fireValue: any = ingredient.fire;',\n          'src/calculations/elemental/properties.ts',\n          CodeDomain.ASTROLOGICAL,\n          [\n            'interface ElementalProperties {',\n            '  fire: number;',\n            '  water: number;'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(false);\n        expect(classification.suggestedReplacement).toBe('number');\n      });\n\n      test('should preserve complex elemental compatibility matrices', async () => {\n        const context = createDomainContext(\n          'const compatibilityMatrix: Record<string, any> = buildElementalMatrix();',\n          'src/calculations/elemental/compatibility.ts',\n          CodeDomain.ASTROLOGICAL,\n          [\n            'function buildElementalMatrix(): Record<string, any> {',\n            '  return { Fire: { Fire: 0.9, Water: 0.7 } };'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(true);\n        expect(classification.reasoning).toContain('dynamic');\n      });\n    });\n\n    describe('Transit and Timing Calculations', () => {\n      test('should preserve transit date validation logic', async () => {\n        const context = createDomainContext(\n          'const transitData: any = validateTransitDate(planet, date, sign);',\n          'src/utils/planetaryConsistencyCheck.ts',\n          CodeDomain.ASTROLOGICAL,\n          [\n            'export function validateTransitDate(planet: string, date: Date, sign: string): any {',\n            '  const planetData = require(`@/data/planets/${planet.toLowerCase()}`);'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(true);\n        expect(classification.reasoning).toContain('transit date');\n      });\n\n      test('should preserve retrograde motion calculations', async () => {\n        const context = createDomainContext(\n          'const retrogradeData: any = calculateRetrogradePhases(planet, year);',\n          'src/calculations/retrograde/motion.ts',\n          CodeDomain.ASTROLOGICAL,\n          [\n            'function calculateRetrogradePhases(planet: string, year: number): any {',\n            '  const phases = getRetrogradePhases(planet, year);'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(true);\n        expect(classification.reasoning).toContain('retrograde');\n      });\n    });\n\n    describe('Astrological Chart Calculations', () => {\n      test('should preserve house system calculations', async () => {\n        const context = createDomainContext(\n          'const houseData: any = calculateHouses(latitude, longitude, time);',\n          'src/calculations/houses/systems.ts',\n          CodeDomain.ASTROLOGICAL,\n          [\n            'import { HouseSystem } from \"@/types/astrology\";',\n            'export function calculateHouses(lat: number, lon: number, time: Date): any {'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(true);\n        expect(classification.reasoning).toContain('house');\n      });\n\n      test('should preserve aspect calculations', async () => {\n        const context = createDomainContext(\n          'const aspects: any[] = calculateAspects(planetPositions);',\n          'src/calculations/aspects/calculator.ts',\n          CodeDomain.ASTROLOGICAL,\n          [\n            'function calculateAspects(positions: PlanetaryPosition[]): any[] {',\n            '  const aspects = [];'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(true);\n        expect(classification.category).toBe(AnyTypeCategory.ARRAY_TYPE);\n      });\n    });\n  });\n\n  describe('Recipe/Ingredient Type Suggestions', () => {\n    describe('Ingredient Data Type Suggestions', () => {\n      test('should suggest Ingredient interface for ingredient data', async () => {\n        const context = createDomainContext(\n          'const ingredient: any = getIngredientData(name);',\n          'src/data/ingredients/processor.ts',\n          CodeDomain.RECIPE,\n          [\n            'import { Ingredient } from \"@/types\";',\n            'export function processIngredient(name: string): Ingredient {'\n          ]\n        );\n\n        const domainAnalysis = await analyzer.analyzeDomain(context);\n        expect(domainAnalysis.suggestedTypes).toContain('Ingredient');\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(false);\n        expect(classification.suggestedReplacement).toBe('Ingredient');\n      });\n\n      test('should suggest specific ingredient subtypes', async () => {\n        const contexts = [\n          createDomainContext(\n            'const spice: any = getSpiceProperties(name);',\n            'src/data/ingredients/spices.ts',\n            CodeDomain.RECIPE\n          ),\n          createDomainContext(\n            'const herb: any = getHerbData(name);',\n            'src/data/ingredients/herbs.ts',\n            CodeDomain.RECIPE\n          ),\n          createDomainContext(\n            'const vegetable: any = getVegetableInfo(name);',\n            'src/data/ingredients/vegetables.ts',\n            CodeDomain.RECIPE\n          )\n        ];\n\n        for (const context of contexts) {\n          const domainAnalysis = await analyzer.analyzeDomain(context);\n          const classification = await classifier.classify(context);\n\n          expect(classification.isIntentional).toBe(false);\n          expect(domainAnalysis.suggestedTypes.length).toBeGreaterThan(0);\n\n          if (context.filePath.includes('spices')) {\n            expect(domainAnalysis.suggestedTypes).toContain('Spice');\n          } else if (context.filePath.includes('herbs')) {\n            expect(domainAnalysis.suggestedTypes).toContain('Herb');\n          } else if (context.filePath.includes('vegetables')) {\n            expect(domainAnalysis.suggestedTypes).toContain('Vegetable');\n          }\n        }\n      });\n\n      test('should suggest array types for ingredient collections', async () => {\n        const context = createDomainContext(\n          'const ingredients: any[] = getAllIngredients();',\n          'src/data/ingredients/collection.ts',\n          CodeDomain.RECIPE,\n          [\n            'export function getAllIngredients(): Ingredient[] {',\n            '  return ingredientDatabase.getAll();'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(false);\n        expect(classification.category).toBe(AnyTypeCategory.ARRAY_TYPE);\n        expect(classification.suggestedReplacement).toBe('Ingredient[]');\n      });\n\n      test('should suggest nutritional info types', async () => {\n        const context = createDomainContext(\n          'const nutrition: any = getNutritionalData(ingredient);',\n          'src/data/nutrition/calculator.ts',\n          CodeDomain.RECIPE,\n          [\n            'import { NutritionalInfo } from \"@/types\";',\n            'function calculateNutrition(ingredient: Ingredient): NutritionalInfo {'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(false);\n        expect(classification.suggestedReplacement).toBe('NutritionalInfo');\n      });\n    });\n\n    describe('Recipe Data Type Suggestions', () => {\n      test('should suggest Recipe interface for recipe data', async () => {\n        const context = createDomainContext(\n          'const recipe: any = buildRecipe(ingredients, instructions);',\n          'src/data/recipes/builder.ts',\n          CodeDomain.RECIPE,\n          [\n            'import { Recipe, Ingredient, CookingInstruction } from \"@/types\";',\n            'export function buildRecipe(ingredients: Ingredient[], instructions: CookingInstruction[]): Recipe {'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(false);\n        expect(classification.suggestedReplacement).toBe('Recipe');\n      });\n\n      test('should suggest cooking method types', async () => {\n        const context = createDomainContext(\n          'const method: any = selectCookingMethod(ingredients);',\n          'src/data/cooking/methods.ts',\n          CodeDomain.RECIPE,\n          [\n            'import { CookingMethod } from \"@/types\";',\n            'export function selectOptimalMethod(ingredients: Ingredient[]): CookingMethod {'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(false);\n        expect(classification.suggestedReplacement).toBe('CookingMethod');\n      });\n\n      test('should suggest cuisine type for cultural data', async () => {\n        const context = createDomainContext(\n          'const cuisine: any = identifyCuisineType(recipe);',\n          'src/data/cuisines/classifier.ts',\n          CodeDomain.RECIPE,\n          [\n            'import { CuisineType } from \"@/types\";',\n            'function classifyCuisine(recipe: Recipe): CuisineType {'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(false);\n        expect(classification.suggestedReplacement).toBe('CuisineType');\n      });\n    });\n\n    describe('External Food API Preservation', () => {\n      test('should preserve Spoonacular API responses', async () => {\n        const context = createDomainContext(\n          'const spoonacularData: any = await spoonacularApi.getRecipe(id);',\n          'src/services/external/spoonacular.ts',\n          CodeDomain.RECIPE,\n          [\n            'class SpoonacularService {',\n            '  async fetchRecipeData(recipeId: number): Promise<any> {'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(true);\n        expect(classification.category).toBe(AnyTypeCategory.EXTERNAL_API);\n        expect(classification.reasoning).toContain('API');\n      });\n\n      test('should preserve USDA Food Data Central responses', async () => {\n        const context = createDomainContext(\n          'const usdaResponse: any = await usdaApi.getFoodData(fdcId);',\n          'src/services/external/usda.ts',\n          CodeDomain.RECIPE,\n          [\n            'async function fetchNutritionalData(fdcId: string): Promise<any> {',\n            '  const response = await fetch(`https://api.nal.usda.gov/fdc/v1/food/${fdcId}`);'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(true);\n        expect(classification.reasoning).toContain('USDA');\n      });\n    });\n\n    describe('Elemental Properties in Recipe Context', () => {\n      test('should suggest ElementalProperties for ingredient elements', async () => {\n        const context = createDomainContext(\n          'const elements: any = ingredient.elementalProperties;',\n          'src/data/ingredients/elemental.ts',\n          CodeDomain.RECIPE,\n          [\n            'interface Ingredient {',\n            '  elementalProperties: ElementalProperties;',\n            '}'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(false);\n        expect(classification.suggestedReplacement).toBe('ElementalProperties');\n      });\n\n      test('should preserve dynamic elemental calculations in recipes', async () => {\n        const context = createDomainContext(\n          'const harmony: any = calculateRecipeHarmony(recipe);',\n          'src/calculations/recipe/harmony.ts',\n          CodeDomain.RECIPE,\n          [\n            'function calculateRecipeHarmony(recipe: Recipe): any {',\n            '  return recipe.ingredients.reduce((harmony, ingredient) => {'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(true);\n        expect(classification.reasoning).toContain('harmony');\n      });\n    });\n  });\n\n  describe('Campaign System Flexibility Preservation', () => {\n    describe('Dynamic Configuration Preservation', () => {\n      test('should preserve campaign configuration flexibility', async () => {\n        const context = createDomainContext(\n          'const campaignConfig: any = loadDynamicConfig(environment);',\n          'src/services/campaign/ConfigLoader.ts',\n          CodeDomain.CAMPAIGN,\n          [\n            'export class ConfigLoader {',\n            '  loadDynamicConfig(env: string): any {'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(true);\n        expect(classification.category).toBe(AnyTypeCategory.DYNAMIC_CONFIG);\n        expect(classification.reasoning).toContain('dynamic');\n      });\n\n      test('should preserve adaptive strategy configurations', async () => {\n        const context = createDomainContext(\n          'const adaptiveSettings: any = calculateOptimalSettings(metrics);',\n          'src/services/campaign/AdaptiveStrategy.ts',\n          CodeDomain.CAMPAIGN,\n          [\n            'class AdaptiveStrategy {',\n            '  calculateOptimalSettings(metrics: ProgressMetrics): any {'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(true);\n        expect(classification.reasoning).toContain('adaptive');\n      });\n\n      test('should preserve intelligence system configurations', async () => {\n        const context = createDomainContext(\n          'const intelligenceConfig: any = buildIntelligenceSystem(params);',\n          'src/services/campaign/IntelligenceSystem.ts',\n          CodeDomain.CAMPAIGN,\n          [\n            'export class IntelligenceSystem {',\n            '  buildIntelligenceSystem(params: IntelligenceParams): any {'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(true);\n        expect(classification.reasoning).toContain('intelligence');\n      });\n    });\n\n    describe('Metrics and Progress Tracking', () => {\n      test('should suggest specific types for well-defined metrics', async () => {\n        const context = createDomainContext(\n          'const progress: any = calculateProgress();',\n          'src/services/campaign/ProgressTracker.ts',\n          CodeDomain.CAMPAIGN,\n          [\n            'import { ProgressMetrics } from \"@/types\";',\n            'function calculateProgress(): ProgressMetrics {'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(false);\n        expect(classification.suggestedReplacement).toBe('ProgressMetrics');\n      });\n\n      test('should preserve dynamic metrics calculations', async () => {\n        const context = createDomainContext(\n          'const dynamicMetrics: any = aggregateMetrics(sources);',\n          'src/services/campaign/MetricsAggregator.ts',\n          CodeDomain.CAMPAIGN,\n          [\n            'function aggregateMetrics(sources: MetricsSource[]): any {',\n            '  return sources.reduce((agg, source) => ({ ...agg, ...source.getMetrics() }), {});'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(true);\n        expect(classification.reasoning).toContain('dynamic');\n      });\n\n      test('should suggest TypeScriptError for error analysis', async () => {\n        const context = createDomainContext(\n          'const errors: any[] = analyzeTypeScriptErrors();',\n          'src/services/campaign/TypeScriptErrorAnalyzer.ts',\n          CodeDomain.CAMPAIGN,\n          [\n            'import { TypeScriptError } from \"@/types\";',\n            'function analyzeTypeScriptErrors(): TypeScriptError[] {'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(false);\n        expect(classification.suggestedReplacement).toBe('TypeScriptError[]');\n      });\n    });\n\n    describe('Tool Integration Flexibility', () => {\n      test('should preserve tool integration configurations', async () => {\n        const context = createDomainContext(\n          'const toolConfig: any = integrateExternalTool(toolName, settings);',\n          'src/services/campaign/ToolIntegration.ts',\n          CodeDomain.CAMPAIGN,\n          [\n            'class ToolIntegration {',\n            '  integrateExternalTool(name: string, settings: any): any {'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(true);\n        expect(classification.reasoning).toContain('tool integration');\n      });\n\n      test('should preserve validation framework flexibility', async () => {\n        const context = createDomainContext(\n          'const validationResult: any = runValidation(rules, data);',\n          'src/services/campaign/ValidationFramework.ts',\n          CodeDomain.CAMPAIGN,\n          [\n            'export class ValidationFramework {',\n            '  runValidation(rules: ValidationRule[], data: any): any {'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(true);\n        expect(classification.reasoning).toContain('validation');\n      });\n    });\n\n    describe('Safety Protocol Flexibility', () => {\n      test('should preserve safety event handling', async () => {\n        const context = createDomainContext(\n          'const safetyEvent: any = createSafetyEvent(type, data);',\n          'src/services/campaign/SafetyProtocol.ts',\n          CodeDomain.CAMPAIGN,\n          [\n            'class SafetyProtocol {',\n            '  createSafetyEvent(type: SafetyEventType, data: any): any {'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(true);\n        expect(classification.reasoning).toContain('safety');\n      });\n\n      test('should preserve rollback mechanism flexibility', async () => {\n        const context = createDomainContext(\n          'const rollbackData: any = prepareRollback(changes);',\n          'src/services/campaign/RollbackManager.ts',\n          CodeDomain.CAMPAIGN,\n          [\n            'export class RollbackManager {',\n            '  prepareRollback(changes: FileChange[]): any {'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(true);\n        expect(classification.reasoning).toContain('rollback');\n      });\n    });\n  });\n\n  describe('Service Layer Interface Suggestions', () => {\n    describe('API Service Interface Suggestions', () => {\n      test('should suggest ApiResponse for API service responses', async () => {\n        const context = createDomainContext(\n          'const response: any = await this.httpClient.get(endpoint);',\n          'src/services/api/BaseApiService.ts',\n          CodeDomain.SERVICE,\n          [\n            'export class BaseApiService {',\n            '  async get<T>(endpoint: string): Promise<ApiResponse<T>> {'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(false);\n        expect(classification.suggestedReplacement).toBe('ApiResponse<T>');\n      });\n\n      test('should suggest specific service interfaces', async () => {\n        const contexts = [\n          createDomainContext(\n            'const service: any = new RecommendationService();',\n            'src/services/RecommendationService.ts',\n            CodeDomain.SERVICE\n          ),\n          createDomainContext(\n            'const astroService: any = new AstrologicalService();',\n            'src/services/AstrologicalService.ts',\n            CodeDomain.SERVICE\n          ),\n          createDomainContext(\n            'const recipeService: any = new RecipeService();',\n            'src/services/RecipeService.ts',\n            CodeDomain.SERVICE\n          )\n        ];\n\n        for (const context of contexts) {\n          const classification = await classifier.classify(context);\n          expect(classification.isIntentional).toBe(false);\n\n          if (context.filePath.includes('Recommendation')) {\n            expect(classification.suggestedReplacement).toBe('RecommendationService');\n          } else if (context.filePath.includes('Astrological')) {\n            expect(classification.suggestedReplacement).toBe('AstrologicalService');\n          } else if (context.filePath.includes('Recipe')) {\n            expect(classification.suggestedReplacement).toBe('RecipeService');\n          }\n        }\n      });\n\n      test('should preserve external service integration flexibility', async () => {\n        const context = createDomainContext(\n          'const externalService: any = createExternalServiceClient(config);',\n          'src/services/external/ExternalServiceFactory.ts',\n          CodeDomain.SERVICE,\n          [\n            'export class ExternalServiceFactory {',\n            '  createExternalServiceClient(config: ServiceConfig): any {'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(true);\n        expect(classification.reasoning).toContain('external service');\n      });\n    });\n\n    describe('Data Transformation Service Suggestions', () => {\n      test('should suggest specific transformer interfaces', async () => {\n        const context = createDomainContext(\n          'const transformer: any = new DataTransformer();',\n          'src/services/data/DataTransformer.ts',\n          CodeDomain.SERVICE,\n          [\n            'export class DataTransformer {',\n            '  transform<T, U>(data: T): U {'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(false);\n        expect(classification.suggestedReplacement).toBe('DataTransformer');\n      });\n\n      test('should suggest mapper interfaces for data mapping', async () => {\n        const context = createDomainContext(\n          'const mapper: any = createMapper(sourceSchema, targetSchema);',\n          'src/services/data/SchemaMapper.ts',\n          CodeDomain.SERVICE,\n          [\n            'export function createMapper(source: Schema, target: Schema): any {',\n            '  return new SchemaMapper(source, target);'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(false);\n        expect(classification.suggestedReplacement).toBe('SchemaMapper');\n      });\n    });\n\n    describe('Caching Service Interface Suggestions', () => {\n      test('should suggest cache interface types', async () => {\n        const context = createDomainContext(\n          'const cache: any = new CacheService();',\n          'src/services/cache/CacheService.ts',\n          CodeDomain.SERVICE,\n          [\n            'export class CacheService {',\n            '  get<T>(key: string): Promise<T | null> {'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(false);\n        expect(classification.suggestedReplacement).toBe('CacheService');\n      });\n\n      test('should suggest cache entry types', async () => {\n        const context = createDomainContext(\n          'const entry: any = cache.get(key);',\n          'src/services/cache/CacheManager.ts',\n          CodeDomain.SERVICE,\n          [\n            'class CacheManager {',\n            '  async getCacheEntry(key: string): Promise<CacheEntry | null> {'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(false);\n        expect(classification.suggestedReplacement).toBe('CacheEntry | null');\n      });\n    });\n\n    describe('Validation Service Interface Suggestions', () => {\n      test('should suggest validation result interfaces', async () => {\n        const context = createDomainContext(\n          'const result: any = validator.validate(data);',\n          'src/services/validation/ValidationService.ts',\n          CodeDomain.SERVICE,\n          [\n            'export class ValidationService {',\n            '  validate(data: unknown): ValidationResult {'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(false);\n        expect(classification.suggestedReplacement).toBe('ValidationResult');\n      });\n\n      test('should suggest schema validation interfaces', async () => {\n        const context = createDomainContext(\n          'const schema: any = buildValidationSchema(rules);',\n          'src/services/validation/SchemaBuilder.ts',\n          CodeDomain.SERVICE,\n          [\n            'import { ValidationSchema } from \"@/types\";',\n            'function buildValidationSchema(rules: ValidationRule[]): ValidationSchema {'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(false);\n        expect(classification.suggestedReplacement).toBe('ValidationSchema');\n      });\n    });\n\n    describe('Service Error Handling', () => {\n      test('should preserve service error handling flexibility', async () => {\n        const context = createDomainContext(\n          'const error: any = new ServiceError(message, code);',\n          'src/services/errors/ServiceError.ts',\n          CodeDomain.SERVICE,\n          [\n            'export class ServiceError extends Error {',\n            '  constructor(message: string, code: string, details?: any) {'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(true);\n        expect(classification.reasoning).toContain('error');\n      });\n\n      test('should suggest specific error types when available', async () => {\n        const context = createDomainContext(\n          'const apiError: any = handleApiError(response);',\n          'src/services/errors/ApiErrorHandler.ts',\n          CodeDomain.SERVICE,\n          [\n            'import { ApiError } from \"@/types\";',\n            'function handleApiError(response: Response): ApiError {'\n          ]\n        );\n\n        const classification = await classifier.classify(context);\n        expect(classification.isIntentional).toBe(false);\n        expect(classification.suggestedReplacement).toBe('ApiError');\n      });\n    });\n  });\n\n  describe('Cross-Domain Integration', () => {\n    test('should handle mixed domain contexts appropriately', async () => {\n      // Test a service that integrates astrological calculations with recipe recommendations\n      const context = createDomainContext(\n        'const recommendation: any = await astroRecipeService.getRecommendation(userChart, preferences);',\n        'src/services/AstrologicalRecipeService.ts',\n        CodeDomain.SERVICE,\n        [\n          'export class AstrologicalRecipeService {',\n          '  async getRecommendation(chart: AstrologyChart, prefs: UserPreferences): Promise<RecipeRecommendation> {'\n        ]\n      );\n\n      const classification = await classifier.classify(context);\n      expect(classification.isIntentional).toBe(false);\n      expect(classification.suggestedReplacement).toBe('RecipeRecommendation');\n    });\n\n    test('should preserve campaign system integration with domain services', async () => {\n      const context = createDomainContext(\n        'const campaignData: any = integrateDomainServices(services);',\n        'src/services/campaign/DomainIntegration.ts',\n        CodeDomain.CAMPAIGN,\n        [\n          'class DomainIntegration {',\n          '  integrateDomainServices(services: DomainService[]): any {'\n        ]\n      );\n\n      const classification = await classifier.classify(context);\n      expect(classification.isIntentional).toBe(true);\n      expect(classification.reasoning).toContain('integration');\n    });\n  });\n\n  describe('Type Replacement Integration', () => {\n    test('should apply domain-specific replacements correctly', async () => {\n      const replacements: TypeReplacement[] = [\n        {\n          original: 'any',\n          replacement: 'Ingredient',\n          filePath: 'src/data/ingredients/processor.ts',\n          lineNumber: 1,\n          confidence: 0.9,\n          validationRequired: true\n        },\n        {\n          original: 'any',\n          replacement: 'PlanetaryPosition',\n          filePath: 'src/calculations/planetary/positions.ts',\n          lineNumber: 1,\n          confidence: 0.8,\n          validationRequired: true\n        },\n        {\n          original: 'any',\n          replacement: 'ProgressMetrics',\n          filePath: 'src/services/campaign/ProgressTracker.ts',\n          lineNumber: 1,\n          confidence: 0.9,\n          validationRequired: true\n        }\n      ];\n\n      // Mock file system for domain-specific content\n      jest.spyOn(require('fs'), 'readFileSync').mockImplementation((path: any) => {\n        if (path.includes('ingredients')) return 'const ingredient: any = getData();';\n        if (path.includes('planetary')) return 'const position: any = calculate();';\n        if (path.includes('campaign')) return 'const metrics: any = getProgress();';\n        return 'backup content';\n      });\n\n      jest.spyOn(require('fs'), 'writeFileSync').mockImplementation(() => undefined);\n      jest.spyOn(require('fs'), 'existsSync').mockReturnValue(true);\n\n      // Mock successful compilation\n      jest.spyOn(require('child_process'), 'execSync').mockReturnValue('');\n\n      const results = await Promise.all(\n        replacements.map(replacement => replacer.applyReplacement(replacement))\n      );\n\n      results.forEach(result => {\n        expect(result.success).toBe(true);\n        expect(result.appliedReplacements).toHaveLength(1);\n      });\n    });\n  });\n});\n"],"version":3}