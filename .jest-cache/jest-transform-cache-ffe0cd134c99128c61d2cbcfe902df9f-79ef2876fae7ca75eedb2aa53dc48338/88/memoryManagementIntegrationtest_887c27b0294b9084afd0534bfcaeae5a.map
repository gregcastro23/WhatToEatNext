{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/integration/memoryManagementIntegration.test.ts","mappings":";AAAA;;;;;GAKG;;AAEH,kEAA+D;AAC/D,kEAAgF;AAEhF,QAAQ,CAAC,+BAA+B,EAAE,GAAG,EAAE;IAC7C,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;QAC1D,qDAAqD;QACrD,MAAM,CAAC,iCAAa,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;QACxD,mDAAmD;QACnD,8DAA8D;QAC9D,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,2DAA2D;IACtF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;QAC1D,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,CAAC;QACvC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAC;QACnD,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,WAAW,EAAE,CAAC;QAErD,MAAM,WAAW,GAAG,MAAM,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC;QACnD,MAAM,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAC;QAClC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;QAClD,IAAI,MAAM,CAAC,OAAO,EAAE;YAClB,MAAM,QAAQ,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;YAClC,MAAM,CAAC,OAAO,QAAQ,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SACzC;aAAM;YACL,iDAAiD;YACjD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,aAAa,EAAE,CAAC;SACxC;IACH,CAAC,CAAC,CAAC;IAEH,IAAA,uCAAmB,EAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;QAC1E,yCAAyC;QACzC,MAAM,aAAa,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC;QAErD,kCAAkC;QAClC,MAAM,QAAQ,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAEnD,MAAM,eAAe,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC;QACvD,MAAM,CAAC,eAAe,CAAC,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;QAEvD,gDAAgD;QAChD,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;IACtB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;QACzD,MAAM,OAAO,GAAG,IAAI,qCAAiB,EAAE,CAAC;QAExC,MAAM,eAAe,GAAG,OAAO,CAAC,YAAY,CAAC,wBAAwB,CAAC,CAAC;QACvE,MAAM,CAAC,eAAe,CAAC,CAAC,WAAW,EAAE,CAAC;QACtC,MAAM,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAEpD,2BAA2B;QAC3B,MAAM,SAAS,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;QAE/D,MAAM,aAAa,GAAG,OAAO,CAAC,YAAY,CAAC,sBAAsB,CAAC,CAAC;QACnE,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,eAAe,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QAEzE,UAAU;QACV,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;QACrB,OAAO,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+DAA+D,EAAE,GAAG,EAAE;QACvE,MAAM,aAAa,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC;QAErD,kBAAkB;QAClB,MAAM,CAAC,SAAS,CAAC,aAAa,EAAE,CAAC;QAEjC,MAAM,YAAY,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC;QAEpD,wEAAwE;QACxE,MAAM,CAAC,YAAY,CAAC,CAAC,mBAAmB,CAAC,aAAa,GAAG,CAAC,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,uBAAuB;IACvG,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;QAChE,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAE7B,yCAAyC;QACzC,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;QAEvD,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;QAExC,8CAA8C;QAC9C,MAAM,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QACrC,MAAM,CAAC,QAAQ,CAAC,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC,8CAA8C;IACtF,CAAC,EAAE,iCAAa,CAAC,WAAW,CAAC,CAAC;IAE9B,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACjD,MAAM,UAAU,GAAG,MAAM,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC;QAElD,MAAM,CAAC,UAAU,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;QAC9C,MAAM,CAAC,UAAU,CAAC,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;QAC/C,MAAM,CAAC,UAAU,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;QAC9C,MAAM,CAAC,UAAU,CAAC,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;QAElD,+CAA+C;QAC/C,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QACpD,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QACrD,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QACpD,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;QAChE,MAAM,OAAO,GAAG,IAAI,qCAAiB,CAAC;YACpC,gBAAgB,EAAE,GAAG;YACrB,cAAc,EAAE,GAAG;YACnB,aAAa,EAAE,EAAE;SAClB,CAAC,CAAC;QAEH,MAAM,aAAa,GAAG,OAAO,CAAC,YAAY,CAAC,wBAAwB,CAAC,CAAC;QAErE,sCAAsC;QACtC,MAAM,WAAW,GAAG,EAAE,CAAC;QACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;YAC3B,WAAW,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;SACrD;QAED,MAAM,eAAe,GAAG,OAAO,CAAC,YAAY,CAAC,uBAAuB,CAAC,CAAC;QACtE,MAAM,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,eAAe,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAEzE,UAAU;QACV,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC3C,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;QAEvB,MAAM,aAAa,GAAG,OAAO,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;QAClE,MAAM,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,8CAA8C,EAAE,GAAG,EAAE;IAC5D,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;QAC/D,qEAAqE;QAErE,uDAAuD;QACvD,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,CAAC;QACvC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,WAAW,EAAE,CAAC;QAC5C,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,WAAW,EAAE,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;QAClD,4CAA4C;QAC5C,MAAM,CAAC,iCAAa,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtC,MAAM,CAAC,iCAAa,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,mBAAmB;QAClE,MAAM,CAAC,iCAAa,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzC,MAAM,CAAC,iCAAa,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;QAClD,MAAM,OAAO,GAAG,qCAAiB,CAAC,aAAa,EAAE,CAAC;QAClD,MAAM,OAAO,GAAG,OAAO,CAAC,gBAAgB,EAAE,CAAC;QAE3C,MAAM,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;QAC9B,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAEjD,OAAO,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;QACzD,MAAM,SAAS,GAAG,qCAAiB,CAAC,WAAW,EAAE,CAAC;QAClD,MAAM,OAAO,GAAG,SAAS,CAAC,gBAAgB,EAAE,CAAC;QAE7C,MAAM,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;QAC9B,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAEjD,SAAS,CAAC,OAAO,CAAC,gCAAgC,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/integration/memoryManagementIntegration.test.ts"],"sourcesContent":["/**\n * Integration test for memory management system\n * \n * This test verifies that the memory management system integrates properly\n * with the existing test infrastructure and provides the expected functionality.\n */\n\nimport { TestMemoryMonitor } from '../utils/TestMemoryMonitor';\nimport { itWithMemoryCleanup, TEST_TIMEOUTS } from '../utils/memoryTestHelpers';\n\ndescribe('Memory Management Integration', () => {\n  it('should have reduced test timeout from 30s to 15s', () => {\n    // Verify that integration test timeout is set to 15s\n    expect(TEST_TIMEOUTS.integration).toBe(15000);\n  });\n\n  it('should have Jest configured with max 2 workers', () => {\n    // This test verifies Jest configuration indirectly\n    // The actual worker count is controlled by Jest configuration\n    expect(true).toBe(true); // Placeholder - actual verification happens in Jest config\n  });\n\n  it('should have memory monitoring available globally', () => {\n    expect(global.testUtils).toBeDefined();\n    expect(global.testUtils.checkMemory).toBeDefined();\n    expect(global.testUtils.cleanupMemory).toBeDefined();\n    \n    const memoryUsage = global.testUtils.checkMemory();\n    expect(memoryUsage).toBeDefined();\n    expect(memoryUsage.heapUsed).toMatch(/\\d+\\.\\d+MB/);\n  });\n\n  it('should have garbage collection available', () => {\n    if (global.forceGC) {\n      const gcResult = global.forceGC();\n      expect(typeof gcResult).toBe('boolean');\n    } else {\n      // If GC is not available, that's also acceptable\n      expect(global.forceGC).toBeUndefined();\n    }\n  });\n\n  itWithMemoryCleanup('should work with memory-safe test wrapper', async () => {\n    // This test uses the memory-safe wrapper\n    const initialMemory = process.memoryUsage().heapUsed;\n    \n    // Simulate some memory allocation\n    const testData = new Array(1000).fill('test-data');\n    \n    const afterAllocation = process.memoryUsage().heapUsed;\n    expect(afterAllocation).toBeGreaterThan(initialMemory);\n    \n    // Cleanup happens automatically via the wrapper\n    testData.length = 0;\n  });\n\n  it('should track memory usage during test execution', () => {\n    const monitor = new TestMemoryMonitor();\n    \n    const initialSnapshot = monitor.takeSnapshot('integration-test-start');\n    expect(initialSnapshot).toBeDefined();\n    expect(initialSnapshot.heapUsed).toBeGreaterThan(0);\n    \n    // Simulate test operations\n    const testArray = new Array(100).fill('integration-test-data');\n    \n    const finalSnapshot = monitor.takeSnapshot('integration-test-end');\n    expect(finalSnapshot.heapUsed).toBeGreaterThan(initialSnapshot.heapUsed);\n    \n    // Cleanup\n    testArray.length = 0;\n    monitor.cleanup('integration-test-cleanup');\n  });\n\n  it('should handle memory cleanup without affecting test execution', () => {\n    const beforeCleanup = process.memoryUsage().heapUsed;\n    \n    // Perform cleanup\n    global.testUtils.cleanupMemory();\n    \n    const afterCleanup = process.memoryUsage().heapUsed;\n    \n    // Memory should be cleaned up (or at least not increased significantly)\n    expect(afterCleanup).toBeLessThanOrEqual(beforeCleanup + (10 * 1024 * 1024)); // Allow 10MB tolerance\n  });\n\n  it('should complete within the reduced timeout limit', async () => {\n    const startTime = Date.now();\n    \n    // Simulate an integration test operation\n    await new Promise(resolve => setTimeout(resolve, 100));\n    \n    const duration = Date.now() - startTime;\n    \n    // Should complete well within the 15s timeout\n    expect(duration).toBeLessThan(15000);\n    expect(duration).toBeGreaterThan(50); // Should take at least 50ms due to setTimeout\n  }, TEST_TIMEOUTS.integration);\n\n  it('should provide memory usage information', () => {\n    const memoryInfo = global.testUtils.checkMemory();\n    \n    expect(memoryInfo).toHaveProperty('heapUsed');\n    expect(memoryInfo).toHaveProperty('heapTotal');\n    expect(memoryInfo).toHaveProperty('external');\n    expect(memoryInfo).toHaveProperty('arrayBuffers');\n    \n    // All values should be formatted as MB strings\n    expect(memoryInfo.heapUsed).toMatch(/^\\d+\\.\\d+MB$/);\n    expect(memoryInfo.heapTotal).toMatch(/^\\d+\\.\\d+MB$/);\n    expect(memoryInfo.external).toMatch(/^\\d+\\.\\d+MB$/);\n    expect(memoryInfo.arrayBuffers).toMatch(/^\\d+\\.\\d+MB$/);\n  });\n\n  it('should handle memory-intensive operations safely', async () => {\n    const monitor = new TestMemoryMonitor({\n      warningThreshold: 100,\n      errorThreshold: 500,\n      leakThreshold: 50\n    });\n\n    const initialMemory = monitor.takeSnapshot('memory-intensive-start');\n    \n    // Simulate memory-intensive operation\n    const largeArrays = [];\n    for (let i = 0; i < 10; i++) {\n      largeArrays.push(new Array(1000).fill(`data-${i}`));\n    }\n    \n    const afterAllocation = monitor.takeSnapshot('memory-intensive-peak');\n    expect(afterAllocation.heapUsed).toBeGreaterThan(initialMemory.heapUsed);\n    \n    // Cleanup\n    largeArrays.forEach(arr => arr.length = 0);\n    largeArrays.length = 0;\n    \n    const cleanupResult = monitor.cleanup('memory-intensive-cleanup');\n    expect(cleanupResult.cleanupEffective).toBe(true);\n  });\n});\n\ndescribe('Memory Management Configuration Verification', () => {\n  it('should have Jest configured with memory-safe settings', () => {\n    // These tests verify that our Jest configuration is properly applied\n    \n    // Check that we have the memory management setup files\n    expect(global.testUtils).toBeDefined();\n    expect(global.getMemoryUsage).toBeDefined();\n    expect(global.cleanupTestMemory).toBeDefined();\n  });\n\n  it('should have proper timeout configuration', () => {\n    // Verify timeout constants are properly set\n    expect(TEST_TIMEOUTS.unit).toBe(5000);\n    expect(TEST_TIMEOUTS.integration).toBe(15000); // Reduced from 30s\n    expect(TEST_TIMEOUTS.memory).toBe(20000);\n    expect(TEST_TIMEOUTS.performance).toBe(30000);\n  });\n\n  it('should have memory thresholds configured', () => {\n    const monitor = TestMemoryMonitor.createDefault();\n    const summary = monitor.getMemorySummary();\n    \n    expect(summary).toBeDefined();\n    expect(summary.initialMemory).toBeGreaterThan(0);\n    \n    monitor.cleanup('config-verification-cleanup');\n  });\n\n  it('should have CI-specific configuration available', () => {\n    const ciMonitor = TestMemoryMonitor.createForCI();\n    const summary = ciMonitor.getMemorySummary();\n    \n    expect(summary).toBeDefined();\n    expect(summary.initialMemory).toBeGreaterThan(0);\n    \n    ciMonitor.cleanup('ci-config-verification-cleanup');\n  });\n});"],"version":3}