{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/FinalValidationSystem.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/FinalValidationSystem.test.ts"],"sourcesContent":["/**\n * Perfect Codebase Campaign - Final Validation System Tests\n *\n * Comprehensive test suite for the Final Validation System\n */\n\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\n\nimport { FinalValidationSystem } from './FinalValidationSystem';\n\n// Mock external dependencies\njest.mock('child_process');\njest.mock('fs');\n\nconst mockedExecSync = execSync as jest.MockedFunction<typeof execSync>;\nconst mockedFs = fs as jest.Mocked<typeof fs>;\n\ndescribe('FinalValidationSystem', () => {\n  let validationSystem: FinalValidationSystem;\n\n  beforeEach(() => {\n    validationSystem = new FinalValidationSystem();\n    jest.clearAllMocks();\n  });\n\n  describe('TypeScript Error Validation', () => {\n    it('should pass validation when no TypeScript errors exist', async () => {\n      // Mock successful TypeScript compilation\n      mockedExecSync.mockReturnValue('');\n\n      const result = await (\n        validationSystem as unknown as {\n          validateTypeScriptErrors: () => Promise<{\n            category: string;\n            passed: boolean;\n            current: number;\n            target: number;\n            criticalIssues: unknown[];\n          }>;\n        }\n      ).validateTypeScriptErrors();\n\n      expect(result.category).toBe('TypeScript Compilation');\n      expect(result.passed).toBe(true);\n      expect(result.current).toBe(0);\n      expect(result.target).toBe(0);\n      expect(result.criticalIssues).toHaveLength(0);\n    });\n\n    it('should fail validation when TypeScript errors exist', async () => {\n      // Mock TypeScript compilation with errors\n      const mockError = new Error('TypeScript compilation failed');\n      (mockError as Error & { stdout?: string }).stdout = `\nsrc/test.ts(10,5): error TS2304: Cannot find name 'unknownVariable'.\nsrc/test.ts(15,10): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n      `;\n      mockedExecSync.mockImplementation(() => {\n        throw mockError;\n      });\n\n      const result = await (\n        validationSystem as unknown as {\n          validateTypeScriptErrors: () => Promise<{\n            category: string;\n            passed: boolean;\n            current: number;\n            target: number;\n            criticalIssues: unknown[];\n          }>;\n        }\n      ).validateTypeScriptErrors();\n\n      expect(result.category).toBe('TypeScript Compilation');\n      expect(result.passed).toBe(false);\n      expect(result.current).toBe(2);\n      expect(result.target).toBe(0);\n      expect(result.criticalIssues.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Linting Warning Validation', () => {\n    it('should pass validation when no linting warnings exist', async () => {\n      // Mock successful linting with no warnings\n      mockedExecSync.mockReturnValue('✨ All files passed linting');\n\n      const result = await (\n        validationSystem as unknown as { validateLintingWarnings: () => Promise<Record<string, unknown>> }\n      ).validateLintingWarnings();\n\n      expect(result.category).toBe('Linting Quality');\n      expect(result.passed).toBe(true);\n      expect(result.current).toBe(0);\n      expect(result.target).toBe(0);\n      expect(result.criticalIssues).toHaveLength(0);\n    });\n\n    it('should fail validation when linting warnings exist', async () => {\n      // Mock linting with warnings\n      const mockError = new Error('Linting warnings found');\n      (mockError as Error & { stdout?: string }).stdout = `\nsrc/test.ts:10:5 - warning: Unexpected any. Specify a different type (@typescript-eslint/no-explicit-unknown)\nsrc/test.ts:15:10 - warning: 'unusedVar' is defined but never used (no-unused-vars)\nsrc/test.ts:20:8 - warning: Unexpected console statement (no-console)\n      `;\n      mockedExecSync.mockImplementation(() => {\n        throw mockError;\n      });\n\n      const result = await (\n        validationSystem as unknown as { validateLintingWarnings: () => Promise<Record<string, unknown>> }\n      ).validateLintingWarnings();\n\n      expect(result.category).toBe('Linting Quality');\n      expect(result.passed).toBe(false);\n      expect(result.current).toBe(3);\n      expect(result.target).toBe(0);\n      expect((result as Record<string, unknown>).criticalIssues.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Enterprise Intelligence Validation', () => {\n    it('should pass validation when sufficient intelligence systems exist', async () => {\n      // Mock grep output with 250 intelligence systems\n      const mockIntelligenceOutput = Array(250)\n        .fill(0)\n        .map((_, i) => `src/services/test${i}.ts:export const TEST_${i}_INTELLIGENCE_SYSTEM = {`)\n        .join('\\n');\n\n      mockedExecSync.mockReturnValue(mockIntelligenceOutput);\n\n      const result = await (\n        validationSystem as unknown as { validateEnterpriseIntelligence: () => Promise<Record<string, unknown>> }\n      ).validateEnterpriseIntelligence();\n\n      expect(result.category).toBe('Enterprise Intelligence');\n      expect(result.passed).toBe(true);\n      expect(result.current).toBe(250);\n      expect(result.target).toBe(200);\n      expect(result.criticalIssues).toHaveLength(0);\n    });\n\n    it('should fail validation when insufficient intelligence systems exist', async () => {\n      // Mock grep output with only 50 intelligence systems\n      const mockIntelligenceOutput = Array(50)\n        .fill(0)\n        .map((_, i) => `src/services/test${i}.ts:export const TEST_${i}_INTELLIGENCE_SYSTEM = {`)\n        .join('\\n');\n\n      mockedExecSync.mockReturnValue(mockIntelligenceOutput);\n\n      const result = await (\n        validationSystem as unknown as { validateEnterpriseIntelligence: () => Promise<Record<string, unknown>> }\n      ).validateEnterpriseIntelligence();\n\n      expect(result.category).toBe('Enterprise Intelligence');\n      expect(result.passed).toBe(false);\n      expect(result.current).toBe(50);\n      expect(result.target).toBe(200);\n      expect((result as Record<string, unknown>).criticalIssues.length).toBeGreaterThan(0);\n    });\n\n    it('should handle case when no intelligence systems exist', async () => {\n      // Mock grep failure (no matches found)\n      const mockError = new Error('No matches found');\n      mockedExecSync.mockImplementation(() => {\n        throw mockError;\n      });\n\n      const result = await (\n        validationSystem as unknown as { validateEnterpriseIntelligence: () => Promise<Record<string, unknown>> }\n      ).validateEnterpriseIntelligence();\n\n      expect(result.category).toBe('Enterprise Intelligence');\n      expect(result.passed).toBe(false);\n      expect(result.current).toBe(0);\n      expect(result.target).toBe(200);\n      expect((result as Record<string, unknown>).criticalIssues.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Performance Validation', () => {\n    it('should pass validation when performance targets are met', async () => {\n      // Mock fast build time and low memory usage\n      mockedExecSync\n        .mockReturnValueOnce('') // yarn build\n        .mockReturnValueOnce('Maximum resident set size (kbytes): 40960') // memory usage (40MB)\n        .mockReturnValueOnce('400K\\t.next/'); // bundle size\n\n      // Mock Date.now to simulate 5-second build\n      const originalDateNow = Date.now;\n      let callCount = 0;\n      Date.now = jest.fn(() => {\n        callCount++;\n        return callCount === 1 ? 1000 : 6000; // 5 second difference\n      });\n\n      const result = await (\n        validationSystem as unknown as { validatePerformanceTargets: () => Promise<Record<string, unknown>> }\n      ).validatePerformanceTargets();\n\n      expect(result.category).toBe('Performance Optimization');\n      expect(result.passed).toBe(true);\n      expect(result.current).toBe(5); // 5 seconds build time\n      expect(result.target).toBe(10);\n      expect(result.criticalIssues).toHaveLength(0);\n\n      // Restore Date.now\n      Date.now = originalDateNow;\n    });\n\n    it('should fail validation when performance targets are not met', async () => {\n      // Mock slow build time and high memory usage\n      mockedExecSync\n        .mockReturnValueOnce('') // yarn build\n        .mockReturnValueOnce('Maximum resident set size (kbytes): 61440') // memory usage (60MB)\n        .mockReturnValueOnce('500K\\t.next/'); // bundle size\n\n      // Mock Date.now to simulate 15-second build\n      const originalDateNow = Date.now;\n      let callCount = 0;\n      Date.now = jest.fn(() => {\n        callCount++;\n        return callCount === 1 ? 1000 : 16000; // 15 second difference\n      });\n\n      const result = await (\n        validationSystem as unknown as { validatePerformanceTargets: () => Promise<Record<string, unknown>> }\n      ).validatePerformanceTargets();\n\n      expect(result.category).toBe('Performance Optimization');\n      expect(result.passed).toBe(false);\n      expect(result.current).toBe(15); // 15 seconds build time\n      expect(result.target).toBe(10);\n      expect((result as Record<string, unknown>).criticalIssues.length).toBeGreaterThan(0);\n\n      // Restore Date.now\n      Date.now = originalDateNow;\n    });\n  });\n\n  describe('Build and Test Validation', () => {\n    it('should pass validation when build and tests succeed', async () => {\n      // Mock successful build and tests\n      mockedExecSync\n        .mockReturnValueOnce('') // yarn build\n        .mockReturnValueOnce(''); // yarn test\n\n      const result = await (\n        validationSystem as unknown as { validateBuildAndTests: () => Promise<Record<string, unknown>> }\n      ).validateBuildAndTests();\n\n      expect(result.category).toBe('Build and Test Stability');\n      expect(result.passed).toBe(true);\n      expect(result.current).toBe(1);\n      expect(result.target).toBe(1);\n      expect(result.criticalIssues).toHaveLength(0);\n    });\n\n    it('should fail validation when build fails', async () => {\n      // Mock build failure\n      mockedExecSync\n        .mockImplementationOnce(() => {\n          throw new Error('Build failed');\n        })\n        .mockReturnValueOnce(''); // yarn test succeeds\n\n      const result = await (\n        validationSystem as unknown as { validateBuildAndTests: () => Promise<Record<string, unknown>> }\n      ).validateBuildAndTests();\n\n      expect(result.category).toBe('Build and Test Stability');\n      expect(result.passed).toBe(false);\n      expect(result.current).toBe(0);\n      expect(result.target).toBe(1);\n      expect((result as Record<string, unknown>).criticalIssues.length).toBeGreaterThan(0);\n    });\n\n    it('should fail validation when tests fail', async () => {\n      // Mock test failure\n      mockedExecSync\n        .mockReturnValueOnce('') // yarn build succeeds\n        .mockImplementationOnce(() => {\n          throw new Error('Tests failed');\n        });\n\n      const result = await (\n        validationSystem as unknown as { validateBuildAndTests: () => Promise<Record<string, unknown>> }\n      ).validateBuildAndTests();\n\n      expect(result.category).toBe('Build and Test Stability');\n      expect(result.passed).toBe(false);\n      expect(result.current).toBe(0);\n      expect(result.target).toBe(1);\n      expect((result as Record<string, unknown>).criticalIssues.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Campaign Summary Generation', () => {\n    it('should generate accurate campaign summary with baseline', async () => {\n      // Mock baseline file\n      const mockBaseline = {\n        errors: 100,\n        warnings: 500,\n        intelligence: 10,\n      };\n      mockedFs.existsSync.mockReturnValue(true);\n      mockedFs.readFileSync.mockReturnValue(JSON.stringify(mockBaseline));\n\n      // Mock current state (perfect codebase)\n      mockedExecSync\n        .mockReturnValueOnce('') // TypeScript - no errors\n        .mockReturnValueOnce('') // Linting - no warnings\n        .mockReturnValueOnce(Array(250).fill('INTELLIGENCE_SYSTEM').join('\\n')); // 250 intelligence systems\n\n      const summary = await (\n        validationSystem as unknown as { generateCampaignSummary: () => Promise<Record<string, unknown>> }\n      ).generateCampaignSummary();\n\n      expect(summary.initialState).toEqual(mockBaseline);\n      expect((summary as Record<string, unknown>).finalState.errors).toBe(0);\n      expect((summary as Record<string, unknown>).finalState.warnings).toBe(0);\n      expect((summary as Record<string, unknown>).finalState.intelligence).toBe(250);\n      expect((summary as Record<string, unknown>).improvements.errorReduction).toBe(100);\n      expect((summary as Record<string, unknown>).improvements.warningReduction).toBe(500);\n      expect((summary as Record<string, unknown>).improvements.intelligenceIncrease).toBe(240);\n    });\n\n    it('should handle missing baseline file', async () => {\n      // Mock missing baseline file\n      mockedFs.existsSync.mockReturnValue(false);\n\n      // Mock current state\n      mockedExecSync\n        .mockReturnValueOnce('') // TypeScript - no errors\n        .mockReturnValueOnce('') // Linting - no warnings\n        .mockReturnValueOnce(Array(200).fill('INTELLIGENCE_SYSTEM').join('\\n')); // 200 intelligence systems\n\n      const summary = await (\n        validationSystem as unknown as { generateCampaignSummary: () => Promise<Record<string, unknown>> }\n      ).generateCampaignSummary();\n\n      expect(summary.initialState).toEqual({ errors: 0, warnings: 0, intelligence: 0 });\n      expect((summary as Record<string, unknown>).finalState.intelligence).toBe(200);\n      expect((summary as Record<string, unknown>).improvements.intelligenceIncrease).toBe(200);\n    });\n  });\n\n  describe('Certification Status Determination', () => {\n    it('should achieve ENTERPRISE certification for perfect codebase', () => {\n      const mockValidationResults = [\n        { category: 'TypeScript', passed: true, current: 0, target: 0, details: [], criticalIssues: [] },\n        { category: 'Linting', passed: true, current: 0, target: 0, details: [], criticalIssues: [] },\n        { category: 'Intelligence', passed: true, current: 250, target: 200, details: [], criticalIssues: [] },\n        { category: 'Performance', passed: true, current: 8, target: 10, details: [], criticalIssues: [] },\n        { category: 'Build/Test', passed: true, current: 1, target: 1, details: [], criticalIssues: [] },\n      ];\n\n      const mockPerformanceMetrics = {\n        buildTime: 8,\n        memoryUsage: 40,\n        bundleSize: '400kB',\n        cacheHitRate: 85,\n        testCoverage: 98,\n      };\n\n      const certification = (\n        validationSystem as unknown as {\n          determineCertificationStatus: (\n            results: Record<string, unknown>,\n            summary: Record<string, unknown>,\n          ) => Record<string, unknown>;\n        }\n      ).determineCertificationStatus(mockValidationResults, mockPerformanceMetrics);\n\n      expect(certification.perfectCodebaseAchieved).toBe(true);\n      expect(certification.enterpriseReady).toBe(true);\n      expect(certification.productionDeploymentReady).toBe(true);\n      expect(certification.certificationLevel).toBe('ENTERPRISE');\n      expect(certification.certificationDate).toBeDefined();\n    });\n\n    it('should achieve BASIC certification for incomplete campaign', () => {\n      const mockValidationResults = [\n        { category: 'TypeScript', passed: false, current: 10, target: 0, details: [], criticalIssues: [] },\n        { category: 'Linting', passed: false, current: 50, target: 0, details: [], criticalIssues: [] },\n        { category: 'Intelligence', passed: false, current: 100, target: 200, details: [], criticalIssues: [] },\n        { category: 'Performance', passed: false, current: 15, target: 10, details: [], criticalIssues: [] },\n        { category: 'Build/Test', passed: true, current: 1, target: 1, details: [], criticalIssues: [] },\n      ];\n\n      const mockPerformanceMetrics = {\n        buildTime: 15,\n        memoryUsage: 60,\n        bundleSize: '500kB',\n        cacheHitRate: 70,\n        testCoverage: 85,\n      };\n\n      const certification = (\n        validationSystem as unknown as {\n          determineCertificationStatus: (\n            results: Record<string, unknown>,\n            summary: Record<string, unknown>,\n          ) => Record<string, unknown>;\n        }\n      ).determineCertificationStatus(mockValidationResults, mockPerformanceMetrics);\n\n      expect(certification.perfectCodebaseAchieved).toBe(false);\n      expect(certification.enterpriseReady).toBe(false);\n      expect(certification.productionDeploymentReady).toBe(false);\n      expect(certification.certificationLevel).toBe('BASIC');\n      expect(certification.certificationDate).toBeUndefined();\n    });\n  });\n\n  describe('Comprehensive Validation', () => {\n    it('should execute complete validation successfully', async () => {\n      // Mock all successful validations\n      mockedExecSync\n        .mockReturnValueOnce('') // TypeScript compilation\n        .mockReturnValueOnce('✨ All files passed linting') // Linting\n        .mockReturnValueOnce(Array(250).fill('INTELLIGENCE_SYSTEM').join('\\n')) // Intelligence systems\n        .mockReturnValueOnce('') // Build performance test\n        .mockReturnValueOnce('Maximum resident set size (kbytes): 40960') // Memory usage\n        .mockReturnValueOnce('400K\\t.next/') // Bundle size\n        .mockReturnValueOnce('') // Build validation\n        .mockReturnValueOnce('') // Test validation\n        .mockReturnValueOnce('') // Performance metrics build\n        .mockReturnValueOnce('') // TypeScript for summary\n        .mockReturnValueOnce('') // Linting for summary\n        .mockReturnValueOnce(Array(250).fill('INTELLIGENCE_SYSTEM').join('\\n')); // Intelligence for summary\n\n      // Mock file system operations\n      mockedFs.existsSync.mockReturnValue(true);\n      mockedFs.readFileSync.mockReturnValue(JSON.stringify({ errors: 100, warnings: 500, intelligence: 10 }));\n      mockedFs.mkdirSync.mockReturnValue(undefined);\n      mockedFs.writeFileSync.mockReturnValue(undefined);\n\n      // Mock Date.now for consistent build time\n      const originalDateNow = Date.now;\n      let callCount = 0;\n      Date.now = jest.fn(() => {\n        callCount++;\n        return callCount % 2 === 1 ? 1000 : 6000; // 5 second build times\n      });\n\n      const report = await validationSystem.executeComprehensiveValidation();\n\n      expect(report.overallSuccess).toBe(true);\n      expect(report.validationResults).toHaveLength(5);\n      expect(report.certificationStatus.perfectCodebaseAchieved).toBe(true);\n      expect(report.certificationStatus.certificationLevel).toBe('ENTERPRISE');\n\n      // Restore Date.now\n      Date.now = originalDateNow;\n    });\n\n    it('should handle validation failures gracefully', async () => {\n      // Mock validation failures\n      const mockError = new Error('Validation failed');\n      (mockError as unknown).stdout = 'error TS2304: Cannot find name';\n      mockedExecSync.mockImplementation(() => {\n        throw mockError;\n      });\n\n      // Mock file system operations\n      mockedFs.existsSync.mockReturnValue(false);\n      mockedFs.mkdirSync.mockReturnValue(undefined);\n      mockedFs.writeFileSync.mockReturnValue(undefined);\n\n      const report = await validationSystem.executeComprehensiveValidation();\n\n      expect(report.overallSuccess).toBe(false);\n      expect(report.certificationStatus.perfectCodebaseAchieved).toBe(false);\n      expect(report.certificationStatus.certificationLevel).toBe('BASIC');\n    });\n  });\n\n  describe('Report Generation', () => {\n    it('should save validation report to file', async () => {\n      const mockReport = {\n        timestamp: '2025-01-15T10:00:00.000Z',\n        overallSuccess: true,\n        validationResults: [],\n        performanceMetrics: {\n          buildTime: 8,\n          memoryUsage: 40,\n          bundleSize: '400kB',\n          cacheHitRate: 85,\n          testCoverage: 98,\n        },\n        campaignSummary: {\n          initialState: { errors: 100, warnings: 500, intelligence: 10 },\n          finalState: { errors: 0, warnings: 0, intelligence: 250 },\n          improvements: { errorReduction: 100, warningReduction: 500, intelligenceIncrease: 240 },\n        },\n        certificationStatus: {\n          perfectCodebaseAchieved: true,\n          enterpriseReady: true,\n          productionDeploymentReady: true,\n          certificationLevel: 'ENTERPRISE' as const,\n          certificationDate: '2025-01-15T10:00:00.000Z',\n        },\n      };\n\n      mockedFs.existsSync.mockReturnValue(false);\n      mockedFs.mkdirSync.mockReturnValue(undefined);\n      mockedFs.writeFileSync.mockReturnValue(undefined);\n\n      await (\n        validationSystem as unknown as { saveValidationReport: (report: Record<string, unknown>) => Promise<void> }\n      ).saveValidationReport(mockReport);\n\n      expect(mockedFs.mkdirSync).toHaveBeenCalledWith('.campaign-progress', { recursive: true });\n      expect(mockedFs.writeFileSync).toHaveBeenCalledWith(\n        expect.stringMatching(/\\.campaign-progress\\/final-validation-report-\\d+\\.json/),\n        JSON.stringify(mockReport, null, 2),\n      );\n    });\n\n    it('should create certification document for successful campaigns', async () => {\n      const mockReport = {\n        timestamp: '2025-01-15T10:00:00.000Z',\n        overallSuccess: true,\n        validationResults: [\n          { category: 'TypeScript', passed: true, current: 0, target: 0, details: [], criticalIssues: [] },\n        ],\n        performanceMetrics: {\n          buildTime: 8,\n          memoryUsage: 40,\n          bundleSize: '400kB',\n          cacheHitRate: 85,\n          testCoverage: 98,\n        },\n        campaignSummary: {\n          initialState: { errors: 100, warnings: 500, intelligence: 10 },\n          finalState: { errors: 0, warnings: 0, intelligence: 250 },\n          improvements: { errorReduction: 100, warningReduction: 500, intelligenceIncrease: 240 },\n        },\n        certificationStatus: {\n          perfectCodebaseAchieved: true,\n          enterpriseReady: true,\n          productionDeploymentReady: true,\n          certificationLevel: 'ENTERPRISE' as const,\n          certificationDate: '2025-01-15T10:00:00.000Z',\n        },\n      };\n\n      mockedFs.writeFileSync.mockReturnValue(undefined);\n\n      await (\n        validationSystem as unknown as { createCertification: (report: Record<string, unknown>) => Promise<void> }\n      ).createCertification(mockReport);\n\n      expect(mockedFs.writeFileSync).toHaveBeenCalledWith(\n        'PERFECT_CODEBASE_CERTIFICATION.md',\n        expect.stringContaining('# Perfect Codebase Campaign - Certification'),\n      );\n      expect(mockedFs.writeFileSync).toHaveBeenCalledWith(\n        'PERFECT_CODEBASE_CERTIFICATION.md',\n        expect.stringContaining('**Certification Level**: ENTERPRISE'),\n      );\n    });\n  });\n});\n\n// Integration test for CLI execution\ndescribe('FinalValidationSystem CLI', () => {\n  it('should handle CLI validation command', () => {\n    // This test would require more complex mocking of the module execution\n    // For now, we'll just verify the class can be instantiated\n    const validator = new FinalValidationSystem();\n    expect(validator).toBeInstanceOf(FinalValidationSystem);\n  });\n});\n"],"version":3}