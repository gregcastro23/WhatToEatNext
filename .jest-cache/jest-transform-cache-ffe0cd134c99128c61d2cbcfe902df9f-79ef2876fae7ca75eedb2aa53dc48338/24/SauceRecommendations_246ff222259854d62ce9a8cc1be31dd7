a5300e3bc70ada93c5a6bdd1e0b8b1da
"use strict";
'use client';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SauceRecommendations = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const lucide_react_1 = require("lucide-react");
const cuisineRecommender_1 = require("@/utils/cuisineRecommender");
// ========== HELPER FUNCTIONS ==========
const calculateSeasonalRelevance = (sauce, currentSeason) => {
    if (!currentSeason)
        return 0.7; // Default neutral score
    // Seasonal sauce preferences
    const seasonalPreferences = {
        spring: ['light', 'fresh', 'herb', 'citrus', 'vinaigrette', 'pesto'],
        summer: ['fresh', 'cold', 'gazpacho', 'salsa', 'yogurt', 'cucumber'],
        autumn: ['warm', 'rich', 'mushroom', 'wine', 'butter', 'cream'],
        winter: ['hearty', 'warm', 'gravy', 'cheese', 'cream', 'wine']
    };
    const seasonKeywords = seasonalPreferences[currentSeason.toLowerCase()] || [];
    const sauceName = sauce.name.toLowerCase();
    const sauceDescription = (sauce.description || '').toLowerCase();
    let relevanceScore = 0.5; // Base score
    seasonKeywords.forEach(keyword => {
        if (sauceName.includes(keyword) || sauceDescription.includes(keyword)) {
            relevanceScore += 0.1;
        }
    });
    return Math.min(1, relevanceScore);
};
const calculateAstrologicalAlignment = (sauce, currentZodiac, lunarPhase) => {
    var _a;
    let alignmentScore = 0.5; // Base score
    // Check zodiac influences
    if (currentZodiac && sauce.astrologicalInfluences) {
        if (sauce.astrologicalInfluences.includes(currentZodiac)) {
            alignmentScore += 0.3;
        }
    }
    // Check lunar phase influences
    if (lunarPhase && sauce.astrologicalInfluences) {
        if (sauce.astrologicalInfluences.includes(lunarPhase)) {
            alignmentScore += 0.2;
        }
    }
    // Planetary day influence (simplified)
    const now = new Date();
    const dayOfWeek = now.getDay();
    const planetaryDays = ['Sun', 'Moon', 'Mars', 'Mercury', 'Jupiter', 'Venus', 'Saturn'];
    const currentPlanetaryDay = planetaryDays[dayOfWeek];
    if ((_a = sauce.astrologicalInfluences) === null || _a === void 0 ? void 0 : _a.includes(currentPlanetaryDay)) {
        alignmentScore += 0.15;
    }
    return Math.min(1, alignmentScore);
};
const calculateMonicaOptimization = (elementalProperties) => {
    if (!elementalProperties)
        return 0.7;
    // Simplified Monica constant calculation based on elemental balance
    const { Fire, Water, Earth, Air } = elementalProperties;
    const balance = Math.abs(Fire - Water) + Math.abs(Earth - Air);
    const harmony = 1 - (balance / 2); // Lower balance difference = higher harmony
    // Monica optimization favors balanced elemental properties
    return Math.max(0.3, Math.min(1, harmony + 0.2));
};
const calculateRecipeCompatibility = (sauce, selectedRecipe) => {
    if (!selectedRecipe)
        return 0.7;
    let compatibilityScore = 0.5;
    // Check if sauce ingredients complement recipe ingredients
    if (sauce.keyIngredients && selectedRecipe.ingredients) {
        const recipeIngredientNames = selectedRecipe.ingredients.map((ing) => typeof ing === 'string' ? ing.toLowerCase() : (ing.name || '').toLowerCase());
        const complementaryIngredients = sauce.keyIngredients.filter(sauceIng => recipeIngredientNames.some((recipeIng) => recipeIng.includes(sauceIng.toLowerCase()) ||
            sauceIng.toLowerCase().includes(recipeIng)));
        if (complementaryIngredients.length > 0) {
            compatibilityScore += 0.2;
        }
    }
    // Check cooking method compatibility
    if (selectedRecipe.cookingMethods || selectedRecipe.tags) {
        const cookingMethods = [
            ...(selectedRecipe.cookingMethods || []),
            ...(selectedRecipe.tags || [])
        ].map((method) => method.toLowerCase());
        // Sauce-cooking method compatibility
        const sauceMethodCompatibility = {
            grilled: ['chimichurri', 'bbq', 'marinade', 'herb'],
            roasted: ['gravy', 'jus', 'wine', 'butter'],
            fried: ['aioli', 'mayo', 'ranch', 'hot sauce'],
            steamed: ['soy', 'ginger', 'light', 'broth'],
            baked: ['cheese', 'cream', 'tomato', 'herb']
        };
        cookingMethods.forEach(method => {
            const compatibleSauces = sauceMethodCompatibility[method] || [];
            const sauceName = sauce.name.toLowerCase();
            if (compatibleSauces.some(compatible => sauceName.includes(compatible))) {
                compatibilityScore += 0.15;
            }
        });
    }
    return Math.min(1, compatibilityScore);
};
const enhanceSauceWithAnalytics = (sauce, currentElementalProfile, currentZodiac, lunarPhase, currentSeason, selectedRecipe) => {
    // 1. Elemental Compatibility (40% weight)
    const elementalCompatibility = sauce.elementalProperties
        ? (0, cuisineRecommender_1.calculateElementalMatch)(sauce.elementalProperties, currentElementalProfile)
        : 0.6;
    // 2. Seasonal Relevance (25% weight)
    const seasonalRelevance = calculateSeasonalRelevance(sauce, currentSeason);
    // 3. Astrological Alignment (20% weight)
    const astrologicalAlignment = calculateAstrologicalAlignment(sauce, currentZodiac, lunarPhase);
    // 4. Monica Optimization (15% weight)
    const monicaOptimization = calculateMonicaOptimization(sauce.elementalProperties);
    // 5. Recipe Compatibility (bonus factor)
    const recipeCompatibility = calculateRecipeCompatibility(sauce, selectedRecipe);
    // Calculate overall score with weights
    const overallScore = (elementalCompatibility * 0.40 +
        seasonalRelevance * 0.25 +
        astrologicalAlignment * 0.20 +
        monicaOptimization * 0.15) * (recipeCompatibility > 0.7 ? 1.1 : 1.0); // Bonus for recipe compatibility
    // Generate compatibility factors
    const compatibilityFactors = [];
    if (elementalCompatibility > 0.7) {
        compatibilityFactors.push(`${Math.round(elementalCompatibility * 100)}% elemental harmony`);
    }
    if (seasonalRelevance > 0.7) {
        compatibilityFactors.push(`Perfect for ${currentSeason || 'current season'}`);
    }
    if (astrologicalAlignment > 0.7) {
        compatibilityFactors.push('Aligned with celestial energies');
    }
    if (monicaOptimization > 0.8) {
        compatibilityFactors.push('Optimal alchemical balance');
    }
    if (recipeCompatibility > 0.7) {
        compatibilityFactors.push('Complements selected recipe');
    }
    return {
        ...sauce,
        elementalCompatibility,
        seasonalRelevance,
        astrologicalAlignment,
        monicaOptimization,
        recipeCompatibility,
        overallScore,
        matchPercentage: Math.round(overallScore * 100),
        compatibilityFactors
    };
};
// ========== SAUCE CARD COMPONENT ==========
const SauceCard = ({ sauce, isExpanded, onToggle, onSelect }) => {
    const handleCardClick = (0, react_1.useCallback)((e) => {
        e.stopPropagation();
        onToggle();
    }, [onToggle]);
    const handleSelectClick = (0, react_1.useCallback)((e) => {
        e.stopPropagation();
        if (onSelect) {
            onSelect(sauce);
        }
    }, [onSelect, sauce]);
    return ((0, jsx_runtime_1.jsxs)("div", { className: "border rounded-lg p-4 bg-white hover:shadow-md transition-shadow cursor-pointer", children: [(0, jsx_runtime_1.jsxs)("div", { onClick: handleCardClick, children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-start mb-2", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Droplets, { size: 16, className: "text-blue-500" }), (0, jsx_runtime_1.jsx)("h4", { className: "font-medium text-base text-gray-900 flex-1", children: sauce.name })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2", children: [(0, jsx_runtime_1.jsxs)("span", { className: `text-xs px-2 py-1 rounded-full ${(0, cuisineRecommender_1.getMatchScoreClass)(sauce.overallScore)}`, children: [sauce.matchPercentage, "%"] }), isExpanded ? (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronUp, { size: 16 }) : (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronDown, { size: 16 })] })] }), sauce.compatibilityFactors.length > 0 && ((0, jsx_runtime_1.jsx)("div", { className: "mb-2", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-1 text-xs text-blue-600", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Sparkles, { size: 12 }), (0, jsx_runtime_1.jsx)("span", { children: sauce.compatibilityFactors[0] })] }) })), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-600 line-clamp-2 mb-2", children: sauce.description }), sauce.keyIngredients && sauce.keyIngredients.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: "flex flex-wrap gap-1 mb-2", children: [sauce.keyIngredients.slice(0, 3).map((ingredient, index) => ((0, jsx_runtime_1.jsx)("span", { className: "text-xs bg-gray-100 px-2 py-1 rounded", children: ingredient }, index))), sauce.keyIngredients.length > 3 && ((0, jsx_runtime_1.jsxs)("span", { className: "text-xs text-gray-500", children: ["+", sauce.keyIngredients.length - 3, " more"] }))] }))] }), isExpanded && ((0, jsx_runtime_1.jsxs)("div", { className: "mt-4 pt-4 border-t border-gray-200", children: [sauce.description && ((0, jsx_runtime_1.jsxs)("div", { className: "mb-4", children: [(0, jsx_runtime_1.jsx)("h5", { className: "font-medium text-sm mb-2", children: "Description" }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-600", children: sauce.description })] })), (0, jsx_runtime_1.jsxs)("div", { className: "mb-4", children: [(0, jsx_runtime_1.jsx)("h5", { className: "font-medium text-sm mb-2", children: "Compatibility Analysis" }), (0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-2 gap-2", children: [(0, jsx_runtime_1.jsxs)("div", { className: "bg-blue-50 p-2 rounded", children: [(0, jsx_runtime_1.jsx)("div", { className: "text-xs text-blue-600 font-medium", children: "Elemental" }), (0, jsx_runtime_1.jsxs)("div", { className: "text-sm font-semibold text-blue-800", children: [Math.round(sauce.elementalCompatibility * 100), "%"] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "bg-green-50 p-2 rounded", children: [(0, jsx_runtime_1.jsx)("div", { className: "text-xs text-green-600 font-medium", children: "Seasonal" }), (0, jsx_runtime_1.jsxs)("div", { className: "text-sm font-semibold text-green-800", children: [Math.round(sauce.seasonalRelevance * 100), "%"] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "bg-purple-50 p-2 rounded", children: [(0, jsx_runtime_1.jsx)("div", { className: "text-xs text-purple-600 font-medium", children: "Astrological" }), (0, jsx_runtime_1.jsxs)("div", { className: "text-sm font-semibold text-purple-800", children: [Math.round(sauce.astrologicalAlignment * 100), "%"] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "bg-yellow-50 p-2 rounded", children: [(0, jsx_runtime_1.jsx)("div", { className: "text-xs text-yellow-600 font-medium", children: "Monica" }), (0, jsx_runtime_1.jsxs)("div", { className: "text-sm font-semibold text-yellow-800", children: [Math.round(sauce.monicaOptimization * 100), "%"] })] })] })] }), sauce.compatibilityFactors.length > 1 && ((0, jsx_runtime_1.jsxs)("div", { className: "mb-4", children: [(0, jsx_runtime_1.jsx)("h5", { className: "font-medium text-sm mb-2", children: "Why This Sauce?" }), (0, jsx_runtime_1.jsx)("ul", { className: "list-disc pl-4 space-y-1", children: sauce.compatibilityFactors.map((factor, index) => ((0, jsx_runtime_1.jsx)("li", { className: "text-xs text-gray-600", children: factor }, index))) })] })), sauce.keyIngredients && sauce.keyIngredients.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: "mb-4", children: [(0, jsx_runtime_1.jsx)("h5", { className: "font-medium text-sm mb-2", children: "Key Ingredients" }), (0, jsx_runtime_1.jsx)("div", { className: "flex flex-wrap gap-1", children: sauce.keyIngredients.map((ingredient, index) => ((0, jsx_runtime_1.jsx)("span", { className: "text-xs bg-gray-100 px-2 py-1 rounded", children: ingredient }, index))) })] })), sauce.elementalProperties && ((0, jsx_runtime_1.jsxs)("div", { className: "mb-4", children: [(0, jsx_runtime_1.jsx)("h5", { className: "font-medium text-sm mb-2", children: "Elemental Properties" }), (0, jsx_runtime_1.jsx)("div", { className: "grid grid-cols-2 gap-2", children: Object.entries(sauce.elementalProperties).map(([element, value]) => ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-1", children: [element === 'Fire' && (0, jsx_runtime_1.jsx)(lucide_react_1.Flame, { size: 12, className: "text-red-500" }), element === 'Water' && (0, jsx_runtime_1.jsx)(lucide_react_1.Droplets, { size: 12, className: "text-blue-500" }), element === 'Air' && (0, jsx_runtime_1.jsx)(lucide_react_1.Wind, { size: 12, className: "text-gray-500" }), element === 'Earth' && (0, jsx_runtime_1.jsx)(lucide_react_1.Mountain, { size: 12, className: "text-green-500" }), (0, jsx_runtime_1.jsx)("span", { className: "text-xs", children: element })] }), (0, jsx_runtime_1.jsx)("div", { className: "w-16 bg-gray-200 rounded-full h-2", children: (0, jsx_runtime_1.jsx)("div", { className: "h-2 rounded-full bg-blue-500", style: { width: `${Math.round(Number(value) * 100)}%` } }) })] }, element))) })] })), onSelect && ((0, jsx_runtime_1.jsxs)("button", { onClick: handleSelectClick, className: "w-full mt-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white text-sm rounded-lg transition-colors flex items-center justify-center space-x-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Star, { size: 16 }), (0, jsx_runtime_1.jsx)("span", { children: "Select This Sauce" })] }))] }))] }));
};
// ========== MAIN COMPONENT ==========
const SauceRecommendations = ({ sauces, cuisineName, selectedRecipe, currentElementalProfile, currentZodiac, lunarPhase, currentSeason, maxDisplayed = 6, onSauceSelect }) => {
    const [expandedSauces, setExpandedSauces] = (0, react_1.useState)({});
    const [showAllSauces, setShowAllSauces] = (0, react_1.useState)(false);
    // Enhance and sort sauces
    const enhancedSauces = (0, react_1.useMemo)(() => {
        return sauces
            .map(sauce => enhanceSauceWithAnalytics(sauce, currentElementalProfile, currentZodiac, lunarPhase, currentSeason, selectedRecipe))
            .sort((a, b) => b.overallScore - a.overallScore);
    }, [sauces, currentElementalProfile, currentZodiac, lunarPhase, currentSeason, selectedRecipe]);
    // Determine which sauces to display
    const displayedSauces = (0, react_1.useMemo)(() => {
        return showAllSauces ? enhancedSauces : enhancedSauces.slice(0, maxDisplayed);
    }, [enhancedSauces, showAllSauces, maxDisplayed]);
    const toggleSauceExpansion = (0, react_1.useCallback)((sauceId) => {
        setExpandedSauces(prev => ({
            ...prev,
            [sauceId]: !prev[sauceId]
        }));
    }, []);
    const toggleShowAll = (0, react_1.useCallback)(() => {
        setShowAllSauces(prev => !prev);
    }, []);
    if (enhancedSauces.length === 0) {
        return ((0, jsx_runtime_1.jsxs)("div", { className: "text-center py-8 text-gray-500", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Droplets, { size: 48, className: "mx-auto mb-4 text-gray-300" }), (0, jsx_runtime_1.jsx)("p", { children: "No sauce recommendations available." }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm mt-1", children: "Try selecting a different cuisine or recipe." })] }));
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-center", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Droplets, { className: "text-blue-500", size: 20 }), (0, jsx_runtime_1.jsxs)("h3", { className: "text-lg font-medium text-gray-900", children: ["Celestial Sauce Harmonizer", cuisineName && ` for ${cuisineName}`] })] }), (0, jsx_runtime_1.jsxs)("span", { className: "text-sm text-gray-500", children: [enhancedSauces.length, " sauce", enhancedSauces.length !== 1 ? 's' : '', " found"] })] }), (0, jsx_runtime_1.jsxs)("p", { className: "text-sm text-gray-600", children: ["Discover sauces that complement the current moment's alchemical alignment", selectedRecipe && ` and enhance your ${selectedRecipe.name}`, "."] }), (0, jsx_runtime_1.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4", children: displayedSauces.map((sauce) => ((0, jsx_runtime_1.jsx)(SauceCard, { sauce: sauce, isExpanded: expandedSauces[sauce.id] || false, onToggle: () => toggleSauceExpansion(sauce.id), onSelect: onSauceSelect }, sauce.id))) }), enhancedSauces.length > maxDisplayed && ((0, jsx_runtime_1.jsx)("div", { className: "text-center", children: (0, jsx_runtime_1.jsx)("button", { onClick: toggleShowAll, className: "inline-flex items-center space-x-2 px-4 py-2 text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded-lg transition-colors", children: showAllSauces ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ChevronUp, { size: 16 }), (0, jsx_runtime_1.jsx)("span", { children: "Show Less" })] })) : ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ChevronDown, { size: 16 }), (0, jsx_runtime_1.jsxs)("span", { children: ["Show All ", enhancedSauces.length, " Sauces"] })] })) }) }))] }));
};
exports.SauceRecommendations = SauceRecommendations;
exports.default = exports.SauceRecommendations;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,