de842dfba8959d2c775f2bb8d7b76a73
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalRecipeService = void 0;
const cuisines_1 = require("@/data/cuisines");
const logger_1 = require("@/utils/logger");
/**
 * LocalRecipeService extracts recipes from cuisine files
 * This helps reduce API calls by using local data first
 */
class LocalRecipeService {
    /**
     * Get all available recipes
     * @returns Array of all recipes
     */
    static async getAllRecipes() {
        // Return cached recipes if available
        if (this._allRecipes) {
            return this._allRecipes;
        }
        try {
            const recipes = [];
            // Get recipes from all available cuisines
            for (const cuisine of Object.values(cuisines_1.cuisinesMap)) {
                if (cuisine) {
                    const cuisineRecipes = await this.getRecipesFromCuisine(cuisine);
                    recipes.push(...cuisineRecipes);
                }
            }
            logger_1.logger.debug(`Loaded ${recipes.length} total recipes`);
            // Cache the recipes for future use
            this._allRecipes = recipes;
            return recipes;
        }
        catch (error) {
            logger_1.logger.error("Error getting all recipes:", error);
            return [];
        }
    }
    /**
     * Get recipes for a specific cuisine
     * @param cuisineName The name of the cuisine
     * @returns Array of recipes for that cuisine
     */
    static async getRecipesByCuisine(cuisineName) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3;
        if (!cuisineName) {
            logger_1.logger.warn('No cuisine name provided to getRecipesByCuisine');
            return [];
        }
        try {
            logger_1.logger.debug(`Getting recipes for cuisine: ${cuisineName}`);
            // Normalize cuisine name for comparison
            const normalizedName = cuisineName.toLowerCase().trim();
            // Handle special cases for African and American cuisines
            if (normalizedName === 'african' || normalizedName === 'american') {
                logger_1.logger.debug(`Special handling for: ${normalizedName}`);
                // Try different ways to access the cuisine data
                let directCuisine = null;
                try {
                    // Try importing the cuisine directly from its file using dynamic imports
                    if (normalizedName === 'african') {
                        const africanModule = await Promise.resolve().then(() => __importStar(require('../data/cuisines/african')));
                        directCuisine = africanModule.african;
                    }
                    else {
                        const americanModule = await Promise.resolve().then(() => __importStar(require('../data/cuisines/american')));
                        directCuisine = americanModule.american;
                    }
                    logger_1.logger.debug(`Direct import successful for ${normalizedName}`);
                }
                catch (error) {
                    logger_1.logger.error(`Error importing ${normalizedName} cuisine directly:`, error);
                    // If direct import fails, try the cuisinesMap object (various cases)
                    directCuisine = (cuisines_1.cuisinesMap[normalizedName] ||
                        cuisines_1.cuisinesMap[normalizedName.charAt(0).toUpperCase() + normalizedName.slice(1)] ||
                        cuisines_1.cuisinesMap[normalizedName.toUpperCase()]);
                }
                if (directCuisine) {
                    logger_1.logger.debug(`Found ${normalizedName} cuisine data`);
                    // Additional debug information to help diagnose issues
                    logger_1.logger.debug(`Cuisine structure: ${JSON.stringify({
                        id: directCuisine.id,
                        name: directCuisine.name,
                        hasDishes: !!directCuisine.dishes,
                        dishTypes: directCuisine.dishes ? Object.keys(directCuisine.dishes).join(', ') : 'none',
                        breakfast: (((_c = (_b = (_a = directCuisine.dishes) === null || _a === void 0 ? void 0 : _a.breakfast) === null || _b === void 0 ? void 0 : _b.all) === null || _c === void 0 ? void 0 : _c.length) || ((_g = (_f = (_e = (_d = directCuisine.dishes) === null || _d === void 0 ? void 0 : _d.dishes) === null || _e === void 0 ? void 0 : _e.breakfast) === null || _f === void 0 ? void 0 : _f.all) === null || _g === void 0 ? void 0 : _g.length)) || 0,
                        lunch: (((_k = (_j = (_h = directCuisine.dishes) === null || _h === void 0 ? void 0 : _h.lunch) === null || _j === void 0 ? void 0 : _j.all) === null || _k === void 0 ? void 0 : _k.length) || ((_p = (_o = (_m = (_l = directCuisine.dishes) === null || _l === void 0 ? void 0 : _l.dishes) === null || _m === void 0 ? void 0 : _m.lunch) === null || _o === void 0 ? void 0 : _o.all) === null || _p === void 0 ? void 0 : _p.length)) || 0,
                        dinner: (((_s = (_r = (_q = directCuisine.dishes) === null || _q === void 0 ? void 0 : _q.dinner) === null || _r === void 0 ? void 0 : _r.all) === null || _s === void 0 ? void 0 : _s.length) || ((_w = (_v = (_u = (_t = directCuisine.dishes) === null || _t === void 0 ? void 0 : _t.dishes) === null || _u === void 0 ? void 0 : _u.dinner) === null || _v === void 0 ? void 0 : _v.all) === null || _w === void 0 ? void 0 : _w.length)) || 0,
                        dessert: (((_z = (_y = (_x = directCuisine.dishes) === null || _x === void 0 ? void 0 : _x.dessert) === null || _y === void 0 ? void 0 : _y.all) === null || _z === void 0 ? void 0 : _z.length) || ((_3 = (_2 = (_1 = (_0 = directCuisine.dishes) === null || _0 === void 0 ? void 0 : _0.dishes) === null || _1 === void 0 ? void 0 : _1.dessert) === null || _2 === void 0 ? void 0 : _2.all) === null || _3 === void 0 ? void 0 : _3.length)) || 0
                    })}`);
                    return await this.getRecipesFromCuisine(directCuisine);
                }
                else {
                    console.warn(`Could not find ${normalizedName} in cuisinesMap keys:`, Object.keys(cuisines_1.cuisinesMap));
                }
            }
            // Find the cuisine object in the regular way
            const cuisine = Object.values(cuisines_1.cuisinesMap).find(c => { var _a; return ((_a = c === null || c === void 0 ? void 0 : c.name) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === normalizedName; });
            if (!cuisine) {
                // Try finding the cuisine by ID or variations of the name
                const byIdMatch = Object.entries(cuisines_1.cuisinesMap).find(([id, c]) => {
                    var _a, _b, _c;
                    return id.toLowerCase() === normalizedName ||
                        ((_a = c === null || c === void 0 ? void 0 : c.name) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === normalizedName ||
                        ((_b = c === null || c === void 0 ? void 0 : c.name) === null || _b === void 0 ? void 0 : _b.toLowerCase().includes(normalizedName)) ||
                        normalizedName.includes((_c = c === null || c === void 0 ? void 0 : c.name) === null || _c === void 0 ? void 0 : _c.toLowerCase());
                });
                if (byIdMatch && byIdMatch[1]) {
                    return await this.getRecipesFromCuisine(byIdMatch[1]);
                }
                logger_1.logger.info(`Cuisine not found: ${cuisineName}`);
                return [];
            }
            return await this.getRecipesFromCuisine(cuisine);
        }
        catch (error) {
            logger_1.logger.error(`Error getting recipes for cuisine ${cuisineName}:`, error);
            return [];
        }
    }
    /**
     * Extract all recipes from a cuisine object
     * @param cuisine The cuisine object
     * @returns Array of recipes
     */
    static async getRecipesFromCuisine(cuisine) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6;
        if (!cuisine)
            return [];
        const recipes = [];
        const mealTypes = ['breakfast', 'lunch', 'dinner', 'dessert', 'snacks'];
        try {
            logger_1.logger.debug(`Extracting recipes from cuisine: ${cuisine.name}`);
            // Special handling for American and African cuisines
            const isSpecialCase = cuisine.name.toLowerCase() === 'american' || cuisine.name.toLowerCase() === 'african';
            // Log specific debug info for African cuisine
            if (cuisine.name.toLowerCase() === 'african') {
                logger_1.logger.debug('AFRICAN CUISINE DETAILED DEBUG INFO:');
                logger_1.logger.debug('Full cuisine structure:', JSON.stringify({
                    id: cuisine.id,
                    name: cuisine.name,
                    dishesKeys: Object.keys(cuisine.dishes || {}),
                    breakfastAllLength: (((_c = (_b = (_a = cuisine.dishes) === null || _a === void 0 ? void 0 : _a.breakfast) === null || _b === void 0 ? void 0 : _b.all) === null || _c === void 0 ? void 0 : _c.length) || ((_g = (_f = (_e = (_d = cuisine.dishes) === null || _d === void 0 ? void 0 : _d.dishes) === null || _e === void 0 ? void 0 : _e.breakfast) === null || _f === void 0 ? void 0 : _f.all) === null || _g === void 0 ? void 0 : _g.length)) || 0,
                    lunchAllLength: (((_k = (_j = (_h = cuisine.dishes) === null || _h === void 0 ? void 0 : _h.lunch) === null || _j === void 0 ? void 0 : _j.all) === null || _k === void 0 ? void 0 : _k.length) || ((_p = (_o = (_m = (_l = cuisine.dishes) === null || _l === void 0 ? void 0 : _l.dishes) === null || _m === void 0 ? void 0 : _m.lunch) === null || _o === void 0 ? void 0 : _o.all) === null || _p === void 0 ? void 0 : _p.length)) || 0,
                    dinnerAllLength: (((_s = (_r = (_q = cuisine.dishes) === null || _q === void 0 ? void 0 : _q.dinner) === null || _r === void 0 ? void 0 : _r.all) === null || _s === void 0 ? void 0 : _s.length) || ((_w = (_v = (_u = (_t = cuisine.dishes) === null || _t === void 0 ? void 0 : _t.dishes) === null || _u === void 0 ? void 0 : _u.dinner) === null || _v === void 0 ? void 0 : _v.all) === null || _w === void 0 ? void 0 : _w.length)) || 0,
                    dessertAllLength: (((_z = (_y = (_x = cuisine.dishes) === null || _x === void 0 ? void 0 : _x.dessert) === null || _y === void 0 ? void 0 : _y.all) === null || _z === void 0 ? void 0 : _z.length) || ((_3 = (_2 = (_1 = (_0 = cuisine.dishes) === null || _0 === void 0 ? void 0 : _0.dishes) === null || _1 === void 0 ? void 0 : _1.dessert) === null || _2 === void 0 ? void 0 : _2.all) === null || _3 === void 0 ? void 0 : _3.length)) || 0,
                }));
                // Check if "all" arrays actually contain recipes with safe type casting
                const dishesData = cuisine.dishes;
                const breakfastAll = ((_4 = dishesData === null || dishesData === void 0 ? void 0 : dishesData.breakfast) === null || _4 === void 0 ? void 0 : _4.all) || ((_6 = (_5 = dishesData === null || dishesData === void 0 ? void 0 : dishesData.dishes) === null || _5 === void 0 ? void 0 : _5.breakfast) === null || _6 === void 0 ? void 0 : _6.all);
                if ((breakfastAll === null || breakfastAll === void 0 ? void 0 : breakfastAll.length) > 0) {
                    logger_1.logger.debug('Sample breakfast recipe:', JSON.stringify(breakfastAll[0]));
                }
            }
            // Check if dishes structure exists
            if (!cuisine.dishes) {
                logger_1.logger.debug(`No dishes found for cuisine: ${cuisine.name}`);
                if (isSpecialCase) {
                    console.warn(`Special case (${cuisine.name}) has no dishes property:`, cuisine);
                }
                return [];
            }
            logger_1.logger.debug(`Dishes structure:`, Object.keys(cuisine.dishes || {}));
            // Quick check for all season recipes in each meal type
            mealTypes.forEach(mealType => {
                if (cuisine.dishes && cuisine.dishes[mealType] &&
                    typeof cuisine.dishes[mealType] === 'object' &&
                    cuisine.dishes[mealType].all &&
                    Array.isArray(cuisine.dishes[mealType].all)) {
                    logger_1.logger.debug(`Found ${cuisine.dishes[mealType].all.length} ${mealType} recipes in 'all' season for ${cuisine.name}`);
                }
                else if (isSpecialCase) {
                    // Debug problematic cuisine
                    console.warn(`No '${mealType}.all' array found for ${cuisine.name}`);
                    if (cuisine.dishes && cuisine.dishes[mealType]) {
                        logger_1.logger.debug(`Structure of ${mealType}:`, Object.keys(cuisine.dishes[mealType]));
                    }
                }
            });
            // Loop through each meal type
            mealTypes.forEach(mealType => {
                if (!cuisine.dishes || !cuisine.dishes[mealType]) {
                    logger_1.logger.debug(`No dishes for meal type: ${mealType}`);
                    return;
                }
                const seasonalDishes = cuisine.dishes[mealType];
                logger_1.logger.debug(`Meal type ${mealType} structure:`, JSON.stringify(Object.keys(seasonalDishes || {})));
                // Process seasonal recipes (spring, summer, autumn, winter)
                const seasons = ['spring', 'summer', 'autumn', 'winter'];
                seasons.forEach(season => {
                    // Use both season and its alternative name (autumn/fall)
                    const seasonalKey = season === 'autumn' ? 'fall' : (season === 'fall' ? 'autumn' : season);
                    // Get recipes for the season
                    let seasonRecipes = [];
                    if (seasonalDishes[season] && Array.isArray(seasonalDishes[season])) {
                        seasonRecipes = seasonalDishes[season] || [];
                    }
                    else if (seasonalDishes[seasonalKey] && Array.isArray(seasonalDishes[seasonalKey])) {
                        seasonRecipes = seasonalDishes[seasonalKey] || [];
                    }
                    if (seasonRecipes.length > 0) {
                        logger_1.logger.debug(`Found ${seasonRecipes.length} dishes for ${season} in ${mealType}`);
                        // Add only unique recipes based on name to avoid duplicates from 'all' merging
                        seasonRecipes.forEach(dish => {
                            if (dish && dish.name && !recipes.some(r => r.name === dish.name)) {
                                recipes.push(this.standardizeRecipe(dish, cuisine.name, [season], [mealType]));
                            }
                        });
                    }
                    else if (isSpecialCase) {
                        console.warn(`No recipes found for ${season} in ${mealType} for ${cuisine.name}`);
                    }
                });
            });
            logger_1.logger.debug(`Extracted ${recipes.length} total recipes from ${cuisine.name} cuisine`);
            // If no recipes were found, log cuisine structure to help debug
            if (recipes.length === 0) {
                console.warn(`No recipes extracted for ${cuisine.name}. Cuisine structure:`, JSON.stringify({
                    id: cuisine.id,
                    name: cuisine.name,
                    dishesKeys: Object.keys(cuisine.dishes || {}),
                    hasDishes: !!cuisine.dishes,
                    dishesStructure: Object.entries(cuisine.dishes || {}).map(([key, value]) => ({
                        mealType: key,
                        hasValue: !!value,
                        seasonKeys: value ? Object.keys(value) : [],
                        hasAll: !!(value && value.all),
                        allIsArray: !!(value && value.all && Array.isArray(value.all)),
                        allLength: value && value.all && Array.isArray(value.all) ? value.all.length : 0
                    }))
                }, null, 2));
                // Check if the dishes property might be nested incorrectly
                if (cuisine.dishes && typeof cuisine.dishes.dishes === 'object') {
                    logger_1.logger.debug('Found nested dishes property, trying to extract from there instead');
                    return this.getRecipesFromCuisine({ ...cuisine, dishes: cuisine.dishes.dishes });
                }
            }
            return recipes;
        }
        catch (error) {
            logger_1.logger.error(`Error extracting recipes from cuisine ${cuisine.name}:`, error);
            logger_1.logger.error(`Error extracting recipes from cuisine ${cuisine.name}:`, error);
            return [];
        }
    }
    /**
     * Standardize a recipe to match our Recipe type
     * @param dish The dish object from cuisine data
     * @param cuisineName The cuisine name
     * @param seasons The seasons for this dish
     * @param mealTypes The meal types for this dish
     * @returns Standardized recipe
     */
    static standardizeRecipe(dish, cuisineName, seasons = ['all'], mealTypes = ['any']) {
        var _a, _b, _c, _d, _e, _f;
        try {
            if (!dish) {
                throw new Error('Dish object is null or undefined');
            }
            // Generate a deterministic ID if none exists
            const id = dish.id || `${cuisineName.toLowerCase()}-${dish.name.toLowerCase().replace(/\s+/g, '-')}`;
            // Map cuisine ingredients to our RecipeIngredient type
            const ingredients = (Array.isArray(dish.ingredients) ? dish.ingredients : []).map(ing => {
                if (!ing)
                    return {
                        name: 'unknown ingredient',
                        amount: 1,
                        unit: 'unit'
                    };
                return {
                    name: ing.name || '',
                    amount: ing.amount ? (typeof ing.amount === 'string' ? parseFloat(ing.amount) || 1 : ing.amount) : 1,
                    unit: ing.unit || '',
                    preparation: ing.preparation || '',
                    category: ing.category || '',
                    optional: ing.optional || false,
                    notes: ing.notes || '',
                    substitutes: Array.isArray(ing.swaps) ? ing.swaps :
                        Array.isArray(ing.substitutes) ? ing.substitutes :
                            typeof ing.swaps === 'string' ? [ing.swaps] :
                                typeof ing.substitutes === 'string' ? [ing.substitutes] : []
                };
            });
            // Ensure elementalProperties exist - checking all possible property names
            let elementalProperties;
            if (dish.elementalProperties) {
                elementalProperties = dish.elementalProperties;
            }
            else if (dish.elementalState && typeof dish.elementalState === 'object') {
                // Convert Record<string, number> to ElementalProperties
                const state = dish.elementalState;
                elementalProperties = {
                    Fire: state.Fire || state.fire || 0.25,
                    Water: state.Water || state.water || 0.25,
                    Earth: state.Earth || state.earth || 0.25,
                    Air: state.Air || state.air || 0.25
                };
            }
            else {
                elementalProperties = {
                    Fire: 0.25,
                    Water: 0.25,
                    Earth: 0.25,
                    Air: 0.25
                };
            }
            // Make sure all elemental properties are numbers
            elementalProperties = {
                Fire: typeof elementalProperties.Fire === 'number' ? elementalProperties.Fire : 0.25,
                Water: typeof elementalProperties.Water === 'number' ? elementalProperties.Water : 0.25,
                Earth: typeof elementalProperties.Earth === 'number' ? elementalProperties.Earth : 0.25,
                Air: typeof elementalProperties.Air === 'number' ? elementalProperties.Air : 0.25
            };
            // Standardize timing information
            const prepTime = dish.prepTime || '';
            const cookTime = dish.cookTime || '';
            // Parse timeToMake from prepTime and cookTime if available
            let timeToMake = dish.timeToMake || '';
            if (!timeToMake && prepTime && cookTime) {
                const prepMinutes = parseInt(prepTime.toString().split(' ')[0]) || 0;
                const cookMinutes = parseInt(cookTime.toString().split(' ')[0]) || 0;
                timeToMake = `${prepMinutes + cookMinutes} minutes`;
            }
            if (!timeToMake) {
                timeToMake = '30 minutes'; // Default
            }
            // Get instructions from preparationSteps or instructions field
            let instructions = [];
            if (Array.isArray(dish.preparationSteps) && dish.preparationSteps.length > 0) {
                instructions = dish.preparationSteps;
            }
            else if (Array.isArray(dish.instructions) && dish.instructions.length > 0) {
                instructions = dish.instructions;
            }
            else if (typeof dish.preparationSteps === 'string') {
                instructions = [dish.preparationSteps];
            }
            else if (typeof dish.instructions === 'string') {
                instructions = [dish.instructions];
            }
            else {
                instructions = ['Place all ingredients in a pot and cook until done.'];
            }
            // Process nutrition information
            const nutrition = dish.nutrition ? {
                calories: dish.nutrition.calories,
                protein: dish.nutrition.protein,
                carbs: dish.nutrition.carbs,
                fat: dish.nutrition.fat,
                vitamins: dish.nutrition.vitamins || [],
                minerals: dish.nutrition.minerals || []
            } : undefined;
            // Process substitutions
            let substitutions = [];
            if (dish.substitutions && typeof dish.substitutions === 'object') {
                // Convert from {ingredient: [alternatives]} format
                substitutions = Object.entries(dish.substitutions).map(([original, alternatives]) => ({
                    original,
                    alternatives: Array.isArray(alternatives) ? alternatives : [alternatives]
                }));
            }
            // Get number of servings
            const servingSize = dish.servingSize || dish.numberOfServings || dish.servings || 4;
            // Create standardized recipe
            return {
                id,
                name: dish.name,
                description: dish.description || '',
                cuisine: cuisineName,
                ingredients: ingredients,
                instructions: instructions,
                timeToMake: timeToMake,
                numberOfServings: typeof servingSize === 'number' ? servingSize : parseInt(servingSize) || 4,
                elementalProperties: elementalProperties,
                season: Array.isArray(dish.season) ? dish.season : seasons,
                mealType: Array.isArray(dish.mealType) ? dish.mealType : mealTypes,
                isVegetarian: dish.isVegetarian || ((_a = dish.dietaryInfo) === null || _a === void 0 ? void 0 : _a.includes('vegetarian')) || false,
                isVegan: dish.isVegan || ((_b = dish.dietaryInfo) === null || _b === void 0 ? void 0 : _b.includes('vegan')) || false,
                isGlutenFree: dish.isGlutenFree || ((_c = dish.dietaryInfo) === null || _c === void 0 ? void 0 : _c.includes('gluten-free')) || false,
                isDairyFree: dish.isDairyFree || ((_d = dish.dietaryInfo) === null || _d === void 0 ? void 0 : _d.includes('dairy-free')) || false,
                nutrition: nutrition,
                astrologicalInfluences: Array.isArray(dish.astrologicalInfluences) ? dish.astrologicalInfluences : [],
                zodiacInfluences: Array.isArray(dish.zodiacInfluences) ? dish.zodiacInfluences : [],
                lunarPhaseInfluences: Array.isArray(dish.lunarPhaseInfluences) ? dish.lunarPhaseInfluences : [],
                planetaryInfluences: {
                    favorable: ((_e = dish.planetaryInfluences) === null || _e === void 0 ? void 0 : _e.favorable) || [],
                    unfavorable: ((_f = dish.planetaryInfluences) === null || _f === void 0 ? void 0 : _f.unfavorable) || []
                },
                cookingMethods: Array.isArray(dish.cookingMethods) ? dish.cookingMethods : [],
                // New fields
                substitutions: substitutions,
                tools: Array.isArray(dish.tools) ? dish.tools : [],
                servingSize: typeof servingSize === 'number' ? servingSize : parseInt(servingSize) || 4,
                spiceLevel: (dish.spiceLevel === 'hot' || dish.spiceLevel === 'mild' || dish.spiceLevel === 'medium' || dish.spiceLevel === 'very hot') ? dish.spiceLevel : 'mild',
                preparationNotes: dish.preparationNotes || dish.culturalNotes || '',
                technicalTips: Array.isArray(dish.technicalTips) ? dish.technicalTips : []
            };
        }
        catch (error) {
            logger_1.logger.error('Error standardizing recipe:', error);
            return {
                id: `error-${Math.random().toString(36).substring(2, 11)}`,
                name: (dish === null || dish === void 0 ? void 0 : dish.name) || 'Unknown Recipe',
                description: 'Error loading recipe details',
                cuisine: cuisineName,
                ingredients: [],
                instructions: ['Recipe details unavailable'],
                timeToMake: '0 minutes',
                numberOfServings: 0,
                elementalProperties: {
                    Fire: 0.25,
                    Water: 0.25,
                    Earth: 0.25,
                    Air: 0.25
                }
            };
        }
    }
    /**
     * Search recipes by query string
     * @param query Search query
     * @returns Array of recipes matching the query
     */
    static async searchRecipes(query) {
        if (!query)
            return [];
        try {
            const normalizedQuery = query.toLowerCase().trim();
            const recipes = await this.getAllRecipes();
            return recipes.filter(recipe => {
                // Search in recipe name
                if (recipe.name && recipe.name.toLowerCase().includes(normalizedQuery)) {
                    return true;
                }
                // Search in recipe description
                if (recipe.description && recipe.description.toLowerCase().includes(normalizedQuery)) {
                    return true;
                }
                // Search in ingredients
                if (recipe.ingredients && Array.isArray(recipe.ingredients)) {
                    for (const ingredient of recipe.ingredients) {
                        const ingredientName = typeof ingredient === 'string'
                            ? ingredient
                            : ingredient.name;
                        if (ingredientName && ingredientName.toLowerCase().includes(normalizedQuery)) {
                            return true;
                        }
                    }
                }
                return false;
            });
        }
        catch (error) {
            logger_1.logger.error(`Error searching recipes for query "${query}":`, error);
            return [];
        }
    }
    /**
     * Get recipes by meal type
     * @param mealType The meal type to filter by
     * @returns Array of recipes for the specified meal type
     */
    static async getRecipesByMealType(mealType) {
        if (!mealType)
            return [];
        try {
            const normalizedMealType = mealType.toLowerCase().trim();
            const recipes = await this.getAllRecipes();
            return recipes.filter(recipe => recipe.mealType &&
                (Array.isArray(recipe.mealType)
                    ? recipe.mealType.some(m => m.toLowerCase() === normalizedMealType)
                    : recipe.mealType.toLowerCase() === normalizedMealType));
        }
        catch (error) {
            logger_1.logger.error(`Error getting recipes for meal type "${mealType}":`, error);
            return [];
        }
    }
    /**
     * Get recipes by season
     * @param season The season to filter by
     * @returns Array of recipes for the specified season
     */
    static async getRecipesBySeason(season) {
        if (!season)
            return [];
        try {
            const normalizedSeason = season.toLowerCase().trim();
            const recipes = await this.getAllRecipes();
            return recipes.filter(recipe => recipe.season &&
                (Array.isArray(recipe.season)
                    ? recipe.season.some(s => s.toLowerCase() === normalizedSeason)
                    : recipe.season.toLowerCase() === normalizedSeason));
        }
        catch (error) {
            logger_1.logger.error(`Error getting recipes for season "${season}":`, error);
            return [];
        }
    }
    /**
     * Clear the recipe cache to force a reload
     */
    static clearCache() {
        this._allRecipes = null;
    }
}
exports.LocalRecipeService = LocalRecipeService;
// Main cache of all extracted recipes
LocalRecipeService._allRecipes = null;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,