{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/LocalRecipeService.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/LocalRecipeService.ts"],"sourcesContent":["import { cuisinesMap } from '@/data/cuisines';\nimport type { Recipe } from '@/types/recipe';\nimport type { Cuisine, SeasonalDishes } from '@/types/cuisine';\nimport type { ZodiacSign, LunarPhase, ElementalProperties } from '@/types/alchemy';\nimport { logger } from '@/utils/logger';\n\n// Define a more specific type for dish objects\ninterface RawDish {\n  id?: string;\n  name: string;\n  description?: string;\n  ingredients?: Array<{\n    name?: string;\n    amount?: number | string;\n    unit?: string;\n    preparation?: string;\n    category?: string;\n    optional?: boolean;\n    notes?: string;\n    swaps?: string[] | string;\n    substitutes?: string[] | string;\n  }>;\n  preparationSteps?: string[] | string;\n  instructions?: string[] | string;\n  prepTime?: string | number;\n  cookTime?: string | number;\n  timeToMake?: string;\n  elementalProperties?: Record<string, number>;\n  elementalState?: Record<string, number>;\n  season?: string[];\n  mealType?: string[];\n  isVegetarian?: boolean;\n  isVegan?: boolean;\n  isGlutenFree?: boolean;\n  isDairyFree?: boolean;\n  dietaryInfo?: string[];\n  nutrition?: {\n    calories?: number;\n    protein?: number;\n    carbs?: number;\n    fat?: number;\n    vitamins?: string[];\n    minerals?: string[];\n  };\n  servingSize?: number | string;\n  servings?: number | string;\n  numberOfServings?: number | string;\n  astrologicalInfluences?: string[];\n  zodiacInfluences?: string[];\n  lunarPhaseInfluences?: string[];\n  planetaryInfluences?: {\n    favorable?: string[];\n    unfavorable?: string[];\n  };\n  cookingMethods?: string[];\n  substitutions?: Record<string, string[] | string>;\n  tools?: string[];\n  spiceLevel?: string;\n  preparationNotes?: string;\n  culturalNotes?: string;\n  technicalTips?: string[] | string;\n}\n\n// Define a type for the seasonal dishes structure\ninterface SeasonalDishCollection {\n  all?: RawDish[];\n  spring?: RawDish[];\n  summer?: RawDish[];\n  fall?: RawDish[];\n  autumn?: RawDish[];\n  winter?: RawDish[];\n  [key: string]: RawDish[] | undefined;\n}\n\n// Add missing array indexer to MealCollection\ninterface MealCollection {\n  breakfast?: SeasonalDishCollection;\n  lunch?: SeasonalDishCollection;\n  dinner?: SeasonalDishCollection;\n  dessert?: SeasonalDishCollection;\n  snacks?: SeasonalDishCollection;\n  [key: string]: SeasonalDishCollection | undefined;\n}\n\n// Add dishes property to Cuisine\ninterface ExtendedCuisine extends Omit<Cuisine, 'dishes'> {\n  dishes?: MealCollection | {\n    dishes?: MealCollection;\n  };\n}\n\n/**\n * LocalRecipeService extracts recipes from cuisine files\n * This helps reduce API calls by using local data first\n */\nexport class LocalRecipeService {\n  // Main cache of all extracted recipes\n  private static _allRecipes: Recipe[] | null = null;\n  \n  /**\n   * Get all available recipes\n   * @returns Array of all recipes\n   */\n  static async getAllRecipes(): Promise<Recipe[]> {\n    // Return cached recipes if available\n    if (this._allRecipes) {\n      return this._allRecipes;\n    }\n    \n    try {\n      const recipes: Recipe[] = [];\n      \n      // Get recipes from all available cuisines\n      for (const cuisine of Object.values(cuisinesMap)) {\n        if (cuisine) {\n          const cuisineRecipes = await this.getRecipesFromCuisine(cuisine as Record<string, unknown>);\n          recipes.push(...cuisineRecipes);\n        }\n      }\n      \n      logger.debug(`Loaded ${recipes.length} total recipes`);\n      \n      // Cache the recipes for future use\n      this._allRecipes = recipes;\n      \n      return recipes;\n    } catch (error) {\n      logger.error(\"Error getting all recipes:\", error);\n      return [];\n    }\n  }\n  \n  /**\n   * Get recipes for a specific cuisine\n   * @param cuisineName The name of the cuisine\n   * @returns Array of recipes for that cuisine\n   */\n  static async getRecipesByCuisine(cuisineName: string): Promise<Recipe[]> {\n    if (!cuisineName) {\n      logger.warn('No cuisine name provided to getRecipesByCuisine');\n      return [];\n    }\n    \n    try {\n      logger.debug(`Getting recipes for cuisine: ${cuisineName}`);\n      \n      // Normalize cuisine name for comparison\n      const normalizedName = cuisineName.toLowerCase().trim();\n      \n      // Handle special cases for African and American cuisines\n      if (normalizedName === 'african' || normalizedName === 'american') {\n        logger.debug(`Special handling for: ${normalizedName}`);\n        \n        // Try different ways to access the cuisine data\n        let directCuisine: ExtendedCuisine | null = null;\n        \n        try {\n          // Try importing the cuisine directly from its file using dynamic imports\n          if (normalizedName === 'african') {\n            const africanModule = await import('../data/cuisines/african');\n            directCuisine = africanModule.african as ExtendedCuisine;\n          } else {\n            const americanModule = await import('../data/cuisines/american');\n            directCuisine = americanModule.american as ExtendedCuisine;\n          }\n          \n          logger.debug(`Direct import successful for ${normalizedName}`);\n        } catch (error) {\n          logger.error(`Error importing ${normalizedName} cuisine directly:`, error);\n          \n          // If direct import fails, try the cuisinesMap object (various cases)\n          directCuisine = (cuisinesMap[normalizedName] || \n                         cuisinesMap[normalizedName.charAt(0).toUpperCase() + normalizedName.slice(1)] ||\n                         cuisinesMap[normalizedName.toUpperCase()]) as ExtendedCuisine;\n        }\n        \n        if (directCuisine) {\n          logger.debug(`Found ${normalizedName} cuisine data`);\n          \n          // Additional debug information to help diagnose issues\n          logger.debug(`Cuisine structure: ${JSON.stringify({\n            id: directCuisine.id,\n            name: directCuisine.name,\n            hasDishes: !!directCuisine.dishes,\n            dishTypes: directCuisine.dishes ? Object.keys(directCuisine.dishes).join(', ') : 'none',\n            breakfast: ((directCuisine.dishes as unknown[])?.breakfast?.all?.length || (directCuisine.dishes as unknown[])?.dishes?.breakfast?.all?.length) || 0,\n            lunch: ((directCuisine.dishes as unknown[])?.lunch?.all?.length || (directCuisine.dishes as unknown[])?.dishes?.lunch?.all?.length) || 0,\n            dinner: ((directCuisine.dishes as unknown[])?.dinner?.all?.length || (directCuisine.dishes as unknown[])?.dishes?.dinner?.all?.length) || 0,\n            dessert: ((directCuisine.dishes as unknown[])?.dessert?.all?.length || (directCuisine.dishes as unknown[])?.dishes?.dessert?.all?.length) || 0\n          })}`);\n          \n          return await this.getRecipesFromCuisine(directCuisine);\n        } else {\n          console.warn(`Could not find ${normalizedName} in cuisinesMap keys:`, Object.keys(cuisinesMap));\n        }\n      }\n      \n      // Find the cuisine object in the regular way\n      const cuisine = Object.values(cuisinesMap).find(\n        c => c?.name?.toLowerCase() === normalizedName\n      );\n      \n      if (!cuisine) {\n        // Try finding the cuisine by ID or variations of the name\n        const byIdMatch = Object.entries(cuisinesMap).find(\n          ([id, c]) => id.toLowerCase() === normalizedName ||\n                    c?.name?.toLowerCase() === normalizedName ||\n                    c?.name?.toLowerCase().includes(normalizedName) ||\n                    normalizedName.includes(c?.name?.toLowerCase())\n        );\n        \n        if (byIdMatch && byIdMatch[1]) {\n          return await this.getRecipesFromCuisine(byIdMatch[1] as Record<string, unknown>);\n        }\n        \n        logger.info(`Cuisine not found: ${cuisineName}`);\n        return [];\n      }\n      \n      return await this.getRecipesFromCuisine(cuisine as ExtendedCuisine);\n    } catch (error) {\n      logger.error(`Error getting recipes for cuisine ${cuisineName}:`, error);\n      return [];\n    }\n  }\n  \n  /**\n   * Extract all recipes from a cuisine object\n   * @param cuisine The cuisine object\n   * @returns Array of recipes\n   */\n  private static async getRecipesFromCuisine(cuisine: ExtendedCuisine): Promise<Recipe[]> {\n    if (!cuisine) return [];\n    \n    const recipes: Recipe[] = [];\n    const mealTypes = ['breakfast', 'lunch', 'dinner', 'dessert', 'snacks'];\n    \n    try {\n      logger.debug(`Extracting recipes from cuisine: ${cuisine.name}`);\n      \n      // Special handling for American and African cuisines\n      const isSpecialCase = cuisine.name.toLowerCase() === 'american' || cuisine.name.toLowerCase() === 'african';\n      \n      // Log specific debug info for African cuisine\n      if (cuisine.name.toLowerCase() === 'african') {\n        logger.debug('AFRICAN CUISINE DETAILED DEBUG INFO:');\n        logger.debug('Full cuisine structure:', JSON.stringify({\n          id: cuisine.id,\n          name: cuisine.name,\n          dishesKeys: Object.keys(cuisine.dishes || {}),\n          breakfastAllLength: ((cuisine.dishes as unknown[])?.breakfast?.all?.length || (cuisine.dishes as unknown[])?.dishes?.breakfast?.all?.length) || 0,\n          lunchAllLength: ((cuisine.dishes as unknown[])?.lunch?.all?.length || (cuisine.dishes as unknown[])?.dishes?.lunch?.all?.length) || 0,\n          dinnerAllLength: ((cuisine.dishes as unknown[])?.dinner?.all?.length || (cuisine.dishes as unknown[])?.dishes?.dinner?.all?.length) || 0,\n          dessertAllLength: ((cuisine.dishes as unknown[])?.dessert?.all?.length || (cuisine.dishes as unknown[])?.dishes?.dessert?.all?.length) || 0,\n        }));\n        \n        // Check if \"all\" arrays actually contain recipes with safe type casting\n        const dishesData = cuisine.dishes as Record<string, unknown>;\n        const breakfastAll = dishesData?.breakfast?.all || dishesData?.dishes?.breakfast?.all;\n        if (breakfastAll?.length > 0) {\n          logger.debug('Sample breakfast recipe:', JSON.stringify(breakfastAll[0]));\n        }\n      }\n      \n      // Check if dishes structure exists\n      if (!cuisine.dishes) {\n        logger.debug(`No dishes found for cuisine: ${cuisine.name}`);\n        \n        if (isSpecialCase) {\n          console.warn(`Special case (${cuisine.name}) has no dishes property:`, cuisine);\n        }\n        \n        return [];\n      }\n      \n      logger.debug(`Dishes structure:`, Object.keys(cuisine.dishes || {}));\n      \n      // Quick check for all season recipes in each meal type\n      mealTypes.forEach(mealType => {\n        if (cuisine.dishes && cuisine.dishes[mealType] && \n            typeof cuisine.dishes[mealType] === 'object' && \n            cuisine.dishes[mealType].all && \n            Array.isArray(cuisine.dishes[mealType].all)) {\n          logger.debug(`Found ${cuisine.dishes[mealType].all.length} ${mealType} recipes in 'all' season for ${cuisine.name}`);\n        } else if (isSpecialCase) {\n          // Debug problematic cuisine\n          console.warn(`No '${mealType}.all' array found for ${cuisine.name}`);\n          if (cuisine.dishes && cuisine.dishes[mealType]) {\n            logger.debug(`Structure of ${mealType}:`, Object.keys(cuisine.dishes[mealType]));\n          }\n        }\n      });\n      \n      // Loop through each meal type\n      mealTypes.forEach(mealType => {\n        if (!cuisine.dishes || !cuisine.dishes[mealType]) {\n          logger.debug(`No dishes for meal type: ${mealType}`);\n          return;\n        }\n        \n        const seasonalDishes = cuisine.dishes[mealType] as SeasonalDishCollection;\n        logger.debug(`Meal type ${mealType} structure:`, JSON.stringify(Object.keys(seasonalDishes || {})));\n        \n        // Process seasonal recipes (spring, summer, autumn, winter)\n        const seasons = ['spring', 'summer', 'autumn', 'winter'];\n        seasons.forEach(season => {\n          // Use both season and its alternative name (autumn/fall)\n          const seasonalKey = season === 'autumn' ? 'fall' : (season === 'fall' ? 'autumn' : season);\n          \n          // Get recipes for the season\n          let seasonRecipes: RawDish[] = [];\n          if (seasonalDishes[season] && Array.isArray(seasonalDishes[season])) {\n            seasonRecipes = seasonalDishes[season] || [];\n          } else if (seasonalDishes[seasonalKey] && Array.isArray(seasonalDishes[seasonalKey])) {\n            seasonRecipes = seasonalDishes[seasonalKey] || [];\n          }\n          \n          if (seasonRecipes.length > 0) {\n            logger.debug(`Found ${seasonRecipes.length} dishes for ${season} in ${mealType}`);\n            // Add only unique recipes based on name to avoid duplicates from 'all' merging\n            seasonRecipes.forEach(dish => {\n              if (dish && dish.name && !recipes.some(r => r.name === dish.name)) {\n                recipes.push(this.standardizeRecipe(dish, cuisine.name, [season], [mealType]));\n              }\n            });\n          } else if (isSpecialCase) {\n            console.warn(`No recipes found for ${season} in ${mealType} for ${cuisine.name}`);\n          }\n        });\n      });\n      \n      logger.debug(`Extracted ${recipes.length} total recipes from ${cuisine.name} cuisine`);\n      \n      // If no recipes were found, log cuisine structure to help debug\n      if (recipes.length === 0) {\n        console.warn(`No recipes extracted for ${cuisine.name}. Cuisine structure:`, \n          JSON.stringify({\n            id: cuisine.id,\n            name: cuisine.name,\n            dishesKeys: Object.keys(cuisine.dishes || {}),\n            hasDishes: !!cuisine.dishes,\n            dishesStructure: Object.entries(cuisine.dishes || {}).map(([key, value]) => ({\n              mealType: key,\n              hasValue: !!value,\n              seasonKeys: value ? Object.keys(value) : [],\n              hasAll: !!(value && value.all),\n              allIsArray: !!(value && value.all && Array.isArray(value.all)),\n              allLength: value && value.all && Array.isArray(value.all) ? value.all.length : 0\n            }))\n          }, null, 2)\n        );\n        \n        // Check if the dishes property might be nested incorrectly\n        if (cuisine.dishes && typeof cuisine.dishes.dishes === 'object') {\n          logger.debug('Found nested dishes property, trying to extract from there instead');\n          return this.getRecipesFromCuisine({...cuisine, dishes: cuisine.dishes.dishes as Record<string, unknown>});\n        }\n      }\n      \n      return recipes;\n    } catch (error) {\n      logger.error(`Error extracting recipes from cuisine ${cuisine.name}:`, error);\n      logger.error(`Error extracting recipes from cuisine ${cuisine.name}:`, error);\n      return [];\n    }\n  }\n  \n  /**\n   * Standardize a recipe to match our Recipe type\n   * @param dish The dish object from cuisine data\n   * @param cuisineName The cuisine name\n   * @param seasons The seasons for this dish\n   * @param mealTypes The meal types for this dish\n   * @returns Standardized recipe\n   */\n  private static standardizeRecipe(\n    dish: RawDish, \n    cuisineName: string, \n    seasons: string[] = ['all'],\n    mealTypes: string[] = ['any']\n  ): Recipe {\n    try {\n      if (!dish) {\n        throw new Error('Dish object is null or undefined');\n      }\n      \n      // Generate a deterministic ID if none exists\n      const id = dish.id || `${cuisineName.toLowerCase()}-${dish.name.toLowerCase().replace(/\\s+/g, '-')}`;\n      \n      // Map cuisine ingredients to our RecipeIngredient type\n      const ingredients = (Array.isArray(dish.ingredients) ? dish.ingredients : []).map(ing => {\n        if (!ing) return {\n          name: 'unknown ingredient',\n          amount: 1,\n          unit: 'unit'\n        };\n        \n        return {\n          name: ing.name || '',\n          amount: ing.amount ? (typeof ing.amount === 'string' ? parseFloat(ing.amount) || 1 : ing.amount) : 1,\n          unit: ing.unit || '',\n          preparation: ing.preparation || '',\n          category: ing.category || '',\n          optional: ing.optional || false,\n          notes: ing.notes || '',\n          substitutes: Array.isArray(ing.swaps) ? ing.swaps : \n                      Array.isArray(ing.substitutes) ? ing.substitutes :\n                      typeof ing.swaps === 'string' ? [ing.swaps] :\n                      typeof ing.substitutes === 'string' ? [ing.substitutes] : []\n        };\n      });\n      \n      // Ensure elementalProperties exist - checking all possible property names\n      let elementalProperties: ElementalProperties;\n      if (dish.elementalProperties) {\n        elementalProperties = dish.elementalProperties as ElementalProperties;\n      } else if (dish.elementalState && typeof dish.elementalState === 'object') {\n        // Convert Record<string, number> to ElementalProperties\n        const state = dish.elementalState as Record<string, number>;\n        elementalProperties = {\n          Fire: state.Fire || state.fire || 0.25,\n          Water: state.Water || state.water || 0.25,\n          Earth: state.Earth || state.earth || 0.25,\n          Air: state.Air || state.air || 0.25\n        };\n      } else {\n        elementalProperties = {\n          Fire: 0.25,\n          Water: 0.25,\n          Earth: 0.25,\n          Air: 0.25\n        };\n      }\n      \n      // Make sure all elemental properties are numbers\n      elementalProperties = {\n        Fire: typeof elementalProperties.Fire === 'number' ? elementalProperties.Fire : 0.25,\n        Water: typeof elementalProperties.Water === 'number' ? elementalProperties.Water : 0.25,\n        Earth: typeof elementalProperties.Earth === 'number' ? elementalProperties.Earth : 0.25,\n        Air: typeof elementalProperties.Air === 'number' ? elementalProperties.Air : 0.25\n      };\n      \n      // Standardize timing information\n      const prepTime = dish.prepTime || '';\n      const cookTime = dish.cookTime || '';\n      \n      // Parse timeToMake from prepTime and cookTime if available\n      let timeToMake = dish.timeToMake || '';\n      if (!timeToMake && prepTime && cookTime) {\n        const prepMinutes = parseInt(prepTime.toString().split(' ')[0]) || 0;\n        const cookMinutes = parseInt(cookTime.toString().split(' ')[0]) || 0;\n        timeToMake = `${prepMinutes + cookMinutes} minutes`;\n      }\n      if (!timeToMake) {\n        timeToMake = '30 minutes'; // Default\n      }\n      \n      // Get instructions from preparationSteps or instructions field\n      let instructions = [];\n      if (Array.isArray(dish.preparationSteps) && dish.preparationSteps.length > 0) {\n        instructions = dish.preparationSteps;\n      } else if (Array.isArray(dish.instructions) && dish.instructions.length > 0) {\n        instructions = dish.instructions;\n      } else if (typeof dish.preparationSteps === 'string') {\n        instructions = [dish.preparationSteps];\n      } else if (typeof dish.instructions === 'string') {\n        instructions = [dish.instructions];\n      } else {\n        instructions = ['Place all ingredients in a pot and cook until done.'];\n      }\n      \n      // Process nutrition information\n      const nutrition = dish.nutrition ? {\n        calories: dish.nutrition.calories,\n        protein: dish.nutrition.protein,\n        carbs: dish.nutrition.carbs,\n        fat: dish.nutrition.fat,\n        vitamins: dish.nutrition.vitamins || [],\n        minerals: dish.nutrition.minerals || []\n      } : undefined;\n      \n      // Process substitutions\n      let substitutions = [];\n      if (dish.substitutions && typeof dish.substitutions === 'object') {\n        // Convert from {ingredient: [alternatives]} format\n        substitutions = Object.entries(dish.substitutions).map(([original, alternatives]) => ({\n          original,\n          alternatives: Array.isArray(alternatives) ? alternatives : [alternatives as string]\n        }));\n      }\n      \n      // Get number of servings\n      const servingSize = dish.servingSize || dish.numberOfServings || dish.servings || 4;\n      \n      // Create standardized recipe\n      return {\n        id,\n        name: dish.name,\n        description: dish.description || '',\n        cuisine: cuisineName,\n        ingredients: ingredients,\n        instructions: instructions,\n        timeToMake: timeToMake,\n        numberOfServings: typeof servingSize === 'number' ? servingSize : parseInt(servingSize) || 4,\n        elementalProperties: elementalProperties,\n        season: Array.isArray(dish.season) ? dish.season : seasons,\n        mealType: Array.isArray(dish.mealType) ? dish.mealType : mealTypes,\n        isVegetarian: dish.isVegetarian || dish.dietaryInfo?.includes('vegetarian') || false,\n        isVegan: dish.isVegan || dish.dietaryInfo?.includes('vegan') || false,\n        isGlutenFree: dish.isGlutenFree || dish.dietaryInfo?.includes('gluten-free') || false,\n        isDairyFree: dish.isDairyFree || dish.dietaryInfo?.includes('dairy-free') || false,\n        nutrition: nutrition,\n        astrologicalInfluences: Array.isArray(dish.astrologicalInfluences) ? dish.astrologicalInfluences : [],\n        zodiacInfluences: Array.isArray(dish.zodiacInfluences) ? dish.zodiacInfluences as ZodiacSign[] : [],\n        lunarPhaseInfluences: Array.isArray(dish.lunarPhaseInfluences) ? dish.lunarPhaseInfluences as LunarPhase[] : [],\n        planetaryInfluences: {\n          favorable: dish.planetaryInfluences?.favorable || [],\n          unfavorable: dish.planetaryInfluences?.unfavorable || []\n        },\n        cookingMethods: Array.isArray(dish.cookingMethods) ? dish.cookingMethods : [],\n        // New fields\n        substitutions: substitutions,\n        tools: Array.isArray(dish.tools) ? dish.tools : [],\n        servingSize: typeof servingSize === 'number' ? servingSize : parseInt(servingSize) || 4, \n        spiceLevel: (dish.spiceLevel === 'hot' || dish.spiceLevel === 'mild' || dish.spiceLevel === 'medium' || dish.spiceLevel === 'very hot') ? dish.spiceLevel : 'mild',\n        preparationNotes: dish.preparationNotes || dish.culturalNotes || '',\n        technicalTips: Array.isArray(dish.technicalTips) ? dish.technicalTips : []\n      };\n    } catch (error) {\n      logger.error('Error standardizing recipe:', error);\n      return {\n        id: `error-${Math.random().toString(36).substring(2, 11)}`,\n        name: dish?.name || 'Unknown Recipe',\n        description: 'Error loading recipe details',\n        cuisine: cuisineName,\n        ingredients: [],\n        instructions: ['Recipe details unavailable'],\n        timeToMake: '0 minutes',\n        numberOfServings: 0,\n        elementalProperties: {\n          Fire: 0.25,\n          Water: 0.25,\n          Earth: 0.25,\n          Air: 0.25\n        }\n      };\n    }\n  }\n  \n  /**\n   * Search recipes by query string\n   * @param query Search query\n   * @returns Array of recipes matching the query\n   */\n  static async searchRecipes(query: string): Promise<Recipe[]> {\n    if (!query) return [];\n    \n    try {\n      const normalizedQuery = query.toLowerCase().trim();\n      const recipes = await this.getAllRecipes();\n      \n      return recipes.filter(recipe => {\n        // Search in recipe name\n        if (recipe.name && recipe.name.toLowerCase().includes(normalizedQuery)) {\n          return true;\n        }\n        \n        // Search in recipe description\n        if (recipe.description && recipe.description.toLowerCase().includes(normalizedQuery)) {\n          return true;\n        }\n        \n        // Search in ingredients\n        if (recipe.ingredients && Array.isArray(recipe.ingredients)) {\n          for (const ingredient of recipe.ingredients) {\n            const ingredientName = typeof ingredient === 'string' \n              ? ingredient \n              : ingredient.name;\n            \n            if (ingredientName && ingredientName.toLowerCase().includes(normalizedQuery)) {\n              return true;\n            }\n          }\n        }\n        \n        return false;\n      });\n    } catch (error) {\n      logger.error(`Error searching recipes for query \"${query}\":`, error);\n      return [];\n    }\n  }\n  \n  /**\n   * Get recipes by meal type\n   * @param mealType The meal type to filter by\n   * @returns Array of recipes for the specified meal type\n   */\n  static async getRecipesByMealType(mealType: string): Promise<Recipe[]> {\n    if (!mealType) return [];\n    \n    try {\n      const normalizedMealType = mealType.toLowerCase().trim();\n      const recipes = await this.getAllRecipes();\n      \n      return recipes.filter(recipe => \n        recipe.mealType && \n        (Array.isArray(recipe.mealType) \n          ? recipe.mealType.some(m => m.toLowerCase() === normalizedMealType)\n          : recipe.mealType.toLowerCase() === normalizedMealType)\n      );\n    } catch (error) {\n      logger.error(`Error getting recipes for meal type \"${mealType}\":`, error);\n      return [];\n    }\n  }\n  \n  /**\n   * Get recipes by season\n   * @param season The season to filter by\n   * @returns Array of recipes for the specified season\n   */\n  static async getRecipesBySeason(season: string): Promise<Recipe[]> {\n    if (!season) return [];\n    \n    try {\n      const normalizedSeason = season.toLowerCase().trim();\n      const recipes = await this.getAllRecipes();\n      \n      return recipes.filter(recipe => \n        recipe.season && \n        (Array.isArray(recipe.season) \n          ? recipe.season.some(s => s.toLowerCase() === normalizedSeason)\n          : recipe.season.toLowerCase() === normalizedSeason)\n      );\n    } catch (error) {\n      logger.error(`Error getting recipes for season \"${season}\":`, error);\n      return [];\n    }\n  }\n  \n  /**\n   * Clear the recipe cache to force a reload\n   */\n  static clearCache(): void {\n    this._allRecipes = null;\n  }\n} "],"version":3}