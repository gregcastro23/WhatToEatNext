{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/types/recipeIngredient.ts","mappings":";;;AA8EA;;GAEG;AACH,SAAgB,kBAAkB,CAAC,GAAY;IAC7C,OAAO,GAAG;QACH,OAAO,GAAG,CAAC,IAAI,KAAK,QAAQ;QAC5B,OAAO,GAAG,CAAC,MAAM,KAAK,QAAQ;QAC9B,OAAO,GAAG,CAAC,IAAI,KAAK,QAAQ,CAAC;AACtC,CAAC;AALD,gDAKC;AAED;;GAEG;AACH,SAAgB,sBAAsB,CAAC,OAAmF;IACxH,OAAO;QACL,IAAI,EAAE,OAAO,CAAC,IAAI;QAClB,MAAM,EAAE,OAAO,CAAC,MAAM;QACtB,IAAI,EAAE,OAAO,CAAC,IAAI;QAClB,QAAQ,EAAE,KAAK;QACf,GAAG,OAAO;KACX,CAAC;AACJ,CAAC;AARD,wDAQC","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/types/recipeIngredient.ts"],"sourcesContent":["import { Ingredient, ElementalProperties } from './index';\n\n/**\n * Recipe ingredient interface that extends the base Ingredient \n * with recipe-specific properties (amount, units, etc.)\n */\nexport interface RecipeIngredient {\n  // Core ingredient identification\n  id?: string;\n  name: string;\n  \n  // Recipe-specific properties\n  amount: number;\n  unit: string;\n  optional?: boolean;\n  preparation?: string;\n  notes?: string;\n  function?: string;\n  cookingPoint?: string;\n  substitutes?: string[];\n  \n  // Ingredient properties (optional in recipe context)\n  category?: string;\n  elementalProperties?: ElementalProperties;\n  qualities?: string[];\n  \n  // Astrological profile for recipe context\n  astrologicalProfile?: {\n    elementalAffinity: {\n      base: string;\n      secondary?: string;\n    };\n    rulingPlanets?: string[];\n    zodiacAffinity?: string[];\n  };\n  \n  // Nutritional properties (optional)\n  calories?: number;\n  macronutrients?: {\n    carbs?: number;\n    protein?: number;\n    fat?: number;\n  };\n  \n  // Storage and handling\n  storage?: string;\n  shelfLife?: string;\n  \n  // Seasonal availability\n  seasonality?: string[];\n  \n  // Cultural and culinary properties\n  origin?: string;\n  culinaryUse?: string[];\n  flavorProfile?: string[];\n  \n  // Processing state\n  isProcessed?: boolean;\n  processingLevel?: 'minimal' | 'moderate' | 'highly-processed';\n  \n  // Compatibility and pairing\n  pairing?: string[];\n  avoidWith?: string[];\n  \n  // Allow additional properties for extensibility\n  [key: string]: unknown;\n}\n\n/**\n * Simplified ingredient interface for basic recipe displays\n */\nexport interface SimpleIngredient {\n  id?: string;\n  name: string;\n  amount: number;\n  unit: string;\n}\n\n/**\n * Validates that an object conforms to the RecipeIngredient interface\n */\nexport function validateIngredient(obj: unknown): obj is RecipeIngredient {\n  return obj && \n         typeof obj.name === 'string' && \n         typeof obj.amount === 'number' && \n         typeof obj.unit === 'string';\n}\n\n/**\n * Creates a RecipeIngredient from a partial object with defaults\n */\nexport function createRecipeIngredient(partial: Partial<RecipeIngredient> & { name: string; amount: number; unit: string }): RecipeIngredient {\n  return {\n    name: partial.name,\n    amount: partial.amount,\n    unit: partial.unit,\n    optional: false,\n    ...partial\n  };\n}\n\nexport default RecipeIngredient; "],"version":3}