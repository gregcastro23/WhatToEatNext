{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/RecipeFinder.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/RecipeFinder.ts"],"sourcesContent":["import type { Recipe, ScoredRecipe } from '@/types/recipe';\nimport type { ElementalProperties , \n  Element, \n  Season, \n  ZodiacSign, \n  LunarPhase, \n  PlanetName \n} from '@/types/alchemy';\n\n/**\n * RecipeFinder.ts\n * \n * A service for finding recipes based on various criteria. This service implements\n * the RecipeServiceInterface and delegates to the ConsolidatedRecipeService.\n * \n * This class is designed to provide a simplified recipe-finding experience with better\n * error handling and type safety.\n */\n\n\n// Using local error handler implementation\n\n\n\nimport type {\n  RecipeSearchCriteria, \n  RecipeRecommendationOptions,\n  RecipeServiceInterface\n} from './interfaces/RecipeServiceInterface';\n\nimport type {\n  ApiResponse,\n  GetRecipeByIdParams,\n  GetRecipesByCuisineParams,\n  GetRecipesByZodiacParams,\n  GetRecipesBySeasonParams,\n  GetRecipesByLunarPhaseParams,\n  GetRecipesByMealTypeParams,\n  GetRecipesForPlanetaryAlignmentParams,\n  GetRecipesForFlavorProfileParams,\n  GetBestRecipeMatchesParams,\n  SearchRecipesParams,\n  GenerateRecipeParams,\n  GenerateFusionRecipeParams,\n  AdaptRecipeForSeasonParams\n} from './interfaces/RecipeApiInterfaces';\n\n// Missing service imports\nimport { ConsolidatedRecipeService } from './ConsolidatedRecipeService';\nimport { errorHandler } from '@/utils/errorHandler';\n\n\n/**\n * RecipeFinder class for finding recipes based on various criteria\n * Implements the RecipeServiceInterface and adds additional error handling\n */\nexport class RecipeFinder implements RecipeServiceInterface {\n  private static instance: RecipeFinder;\n  private recipeService: ConsolidatedRecipeService;\n  \n  /**\n   * Private constructor to enforce singleton pattern\n   */\n  private constructor() {\n    this.recipeService = ConsolidatedRecipeService.getInstance();\n  }\n  \n  /**\n   * Get singleton instance\n   */\n  public static getInstance(): RecipeFinder {\n    if (!RecipeFinder.instance) {\n      RecipeFinder.instance = new RecipeFinder();\n    }\n    return RecipeFinder.instance;\n  }\n  \n  /**\n   * Get all available recipes\n   */\n  async getAllRecipes(): Promise<ApiResponse<Recipe[]>> {\n    try {\n      const recipes = await this.recipeService.getAllRecipes();\n      return {\n        success: true,\n        data: recipes,\n        metadata: {\n          timestamp: Date.now(),\n          version: '1.0.0',\n          count: recipes.length\n        }\n      };\n    } catch (error) {\n      errorHandler.log(error instanceof Error ? error : new Error(String(error)), { context: { service: 'RecipeFinder', action: 'getAllRecipes', data: {} } });\n      return {\n        success: false,\n        error: {\n          code: 'DATA_SOURCE_ERROR',\n          message: 'Failed to retrieve recipes',\n          details: error instanceof Error ? error.message : 'Unknown error'\n        }\n      };\n    }\n  }\n  \n  /**\n   * Search for recipes based on criteria\n   */\n  async searchRecipes(params: SearchRecipesParams): Promise<ApiResponse<Recipe[]>> {\n    try {\n      const recipes = await this.recipeService.searchRecipes(params.criteria, params.options);\n      return {\n        success: true,\n        data: recipes,\n        metadata: {\n          timestamp: Date.now(),\n          version: '1.0.0',\n          count: recipes.length\n        }\n      };\n    } catch (error) {\n      errorHandler.log(error instanceof Error ? error : new Error(String(error)), { context: { service: 'RecipeFinder', action: 'searchRecipes', data: params.criteria } });\n      return {\n        success: false,\n        error: {\n          code: 'PROCESSING_ERROR',\n          message: 'Failed to search recipes',\n          details: error instanceof Error ? error.message : 'Unknown error'\n        }\n      };\n    }\n  }\n  \n  /**\n   * Get recipes by cuisine\n   */\n  async getRecipesByCuisine(params: GetRecipesByCuisineParams): Promise<ApiResponse<Recipe[]>> {\n    try {\n      const recipes = await this.recipeService.getRecipesByCuisine(params.cuisine);\n      return {\n        success: true,\n        data: recipes,\n        metadata: {\n          timestamp: Date.now(),\n          version: '1.0.0',\n          count: recipes.length\n        }\n      };\n    } catch (error) {\n      errorHandler.log(error instanceof Error ? error : new Error(String(error)), { context: { service: 'RecipeFinder', action: 'getRecipesByCuisine', data: params.cuisine } });\n      return {\n        success: false,\n        error: {\n          code: 'DATA_SOURCE_ERROR',\n          message: 'Failed to retrieve cuisine recipes',\n          details: error instanceof Error ? error.message : 'Unknown error'\n        }\n      };\n    }\n  }\n  \n  /**\n   * Get recipes by zodiac sign\n   */\n  async getRecipesByZodiac(params: GetRecipesByZodiacParams): Promise<ApiResponse<Recipe[]>> {\n    try {\n      const recipes = await this.recipeService.getRecipesByZodiac(params.currentZodiacSign);\n      return {\n        success: true,\n        data: recipes,\n        metadata: {\n          timestamp: Date.now(),\n          version: '1.0.0',\n          count: recipes.length\n        }\n      };\n    } catch (error) {\n      errorHandler.log(error instanceof Error ? error : new Error(String(error)), { context: { service: 'RecipeFinder', action: 'getRecipesByZodiac', data: params.currentZodiacSign } });\n      return {\n        success: false,\n        error: {\n          code: 'DATA_SOURCE_ERROR',\n          message: 'Failed to retrieve zodiac recipes',\n          details: error instanceof Error ? error.message : 'Unknown error'\n        }\n      };\n    }\n  }\n  \n  /**\n   * Get recipes by season\n   */\n  async getRecipesBySeason(params: GetRecipesBySeasonParams): Promise<ApiResponse<Recipe[]>> {\n    try {\n      const recipes = await this.recipeService.getRecipesBySeason(params.season);\n      return {\n        success: true,\n        data: recipes,\n        metadata: {\n          timestamp: Date.now(),\n          version: '1.0.0',\n          count: recipes.length\n        }\n      };\n    } catch (error) {\n      errorHandler.log(error instanceof Error ? error : new Error(String(error)), { context: { service: 'RecipeFinder', action: 'getRecipesBySeason', data: params.season } });\n      return {\n        success: false,\n        error: {\n          code: 'DATA_SOURCE_ERROR',\n          message: 'Failed to retrieve seasonal recipes',\n          details: error instanceof Error ? error.message : 'Unknown error'\n        }\n      };\n    }\n  }\n  \n  /**\n   * Get recipes by lunar phase\n   */\n  async getRecipesByLunarPhase(params: GetRecipesByLunarPhaseParams): Promise<ApiResponse<Recipe[]>> {\n    try {\n      const recipes = await this.recipeService.getRecipesByLunarPhase(params.lunarPhase);\n      return {\n        success: true,\n        data: recipes,\n        metadata: {\n          timestamp: Date.now(),\n          version: '1.0.0',\n          count: recipes.length\n        }\n      };\n    } catch (error) {\n      errorHandler.log(error instanceof Error ? error : new Error(String(error)), { context: { service: 'RecipeFinder', action: 'getRecipesByLunarPhase', data: params.lunarPhase } });\n      return {\n        success: false,\n        error: {\n          code: 'DATA_SOURCE_ERROR',\n          message: 'Failed to retrieve lunar phase recipes',\n          details: error instanceof Error ? error.message : 'Unknown error'\n        }\n      };\n    }\n  }\n  \n  /**\n   * Get recipes by meal type\n   */\n  async getRecipesByMealType(params: GetRecipesByMealTypeParams): Promise<ApiResponse<Recipe[]>> {\n    try {\n      const recipes = await this.recipeService.getRecipesByMealType(params.mealType);\n      return {\n        success: true,\n        data: recipes,\n        metadata: {\n          timestamp: Date.now(),\n          version: '1.0.0',\n          count: recipes.length\n        }\n      };\n    } catch (error) {\n      errorHandler.log(error instanceof Error ? error : new Error(String(error)), { context: { service: 'RecipeFinder', action: 'getRecipesByMealType', data: params.mealType } });\n      return {\n        success: false,\n        error: {\n          code: 'DATA_SOURCE_ERROR',\n          message: 'Failed to retrieve meal type recipes',\n          details: error instanceof Error ? error.message : 'Unknown error'\n        }\n      };\n    }\n  }\n  \n  /**\n   * Get recipes that match current planetary alignments\n   */\n  async getRecipesForPlanetaryAlignment(params: GetRecipesForPlanetaryAlignmentParams): Promise<ApiResponse<Recipe[]>> {\n    try {\n      const recipes = await this.recipeService.getRecipesForPlanetaryAlignment(\n        params.planetaryInfluences,\n        params.minMatchScore\n      );\n      return {\n        success: true,\n        data: recipes,\n        metadata: {\n          timestamp: Date.now(),\n          version: '1.0.0',\n          count: recipes.length\n        }\n      };\n    } catch (error) {\n      errorHandler.log(error instanceof Error ? error : new Error(String(error)), { context: { service: 'RecipeFinder', action: 'getRecipesForPlanetaryAlignment', data: { planetaryInfluences: params.planetaryInfluences, minMatchScore: params.minMatchScore } } });\n      return {\n        success: false,\n        error: {\n          code: 'PROCESSING_ERROR',\n          message: 'Failed to retrieve planetary alignment recipes',\n          details: error instanceof Error ? error.message : 'Unknown error'\n        }\n      };\n    }\n  }\n  \n  /**\n   * Get recipes that match a given flavor profile\n   */\n  async getRecipesForFlavorProfile(params: GetRecipesForFlavorProfileParams): Promise<ApiResponse<Recipe[]>> {\n    try {\n      const recipes = await this.recipeService.getRecipesForFlavorProfile(\n        params.flavorProfile,\n        params.minMatchScore\n      );\n      return {\n        success: true,\n        data: recipes,\n        metadata: {\n          timestamp: Date.now(),\n          version: '1.0.0',\n          count: recipes.length\n        }\n      };\n    } catch (error) {\n      errorHandler.log(error instanceof Error ? error : new Error(String(error)), { context: { service: 'RecipeFinder', action: 'getRecipesForFlavorProfile', data: { flavorProfile: params.flavorProfile, minMatchScore: params.minMatchScore } } });\n      return {\n        success: false,\n        error: {\n          code: 'PROCESSING_ERROR',\n          message: 'Failed to retrieve flavor profile recipes',\n          details: error instanceof Error ? error.message : 'Unknown error'\n        }\n      };\n    }\n  }\n  \n  /**\n   * Get best recipe matches based on multiple criteria\n   */\n  async getBestRecipeMatches(params: GetBestRecipeMatchesParams): Promise<ApiResponse<ScoredRecipe[]>> {\n    try {\n      const recipes = await this.recipeService.getBestRecipeMatches(params.criteria, 10);\n      // Convert recipes to scored recipes if they don't already have scores\n      const scoredRecipes: ScoredRecipe[] = recipes.map((recipe, index) => ({\n        ...recipe,\n        score: recipe.score ?? (1 - index * 0.1) // Assign decreasing scores if not present\n      }));\n      \n      return {\n        success: true,\n        data: scoredRecipes,\n        metadata: {\n          timestamp: Date.now(),\n          version: '1.0.0',\n          count: scoredRecipes.length\n        }\n      };\n    } catch (error) {\n      errorHandler.log(error instanceof Error ? error : new Error(String(error)), { context: { service: 'RecipeFinder', action: 'getBestRecipeMatches', data: { criteria: params.criteria } } });\n      return {\n        success: false,\n        error: {\n          code: 'PROCESSING_ERROR',\n          message: 'Failed to get best recipe matches',\n          details: error instanceof Error ? error.message : 'Unknown error'\n        }\n      };\n    }\n  }\n  \n  /**\n   * Get a recipe by its ID\n   */\n  async getRecipeById(params: GetRecipeByIdParams): Promise<ApiResponse<Recipe>> {\n    try {\n      // Since ConsolidatedRecipeService doesn't have getRecipeById, we'll search for it\n      const allRecipes = await this.recipeService.getAllRecipes();\n      const recipe = allRecipes.find(r => r.id === params.id);\n      \n      if (!recipe) {\n        return {\n          success: false,\n          error: {\n            code: 'RECIPE_NOT_FOUND',\n            message: `Recipe with ID ${params.id} not found`,\n            details: 'The requested recipe does not exist in the database'\n          }\n        };\n      }\n      \n      return {\n        success: true,\n        data: recipe,\n        metadata: {\n          timestamp: Date.now(),\n          version: '1.0.0'\n        }\n      };\n    } catch (error) {\n      errorHandler.log(error instanceof Error ? error : new Error(String(error)), { context: { service: 'RecipeFinder', action: 'getRecipeById', data: { id: params.id } } });\n      return {\n        success: false,\n        error: {\n          code: 'RECIPE_NOT_FOUND',\n          message: 'Failed to retrieve recipe',\n          details: error instanceof Error ? error.message : 'Unknown error'\n        }\n      };\n    }\n  }\n  \n  /**\n   * Generate a recipe based on criteria\n   */\n  async generateRecipe(params: GenerateRecipeParams): Promise<ApiResponse<Recipe>> {\n    try {\n      const recipe = await this.recipeService.generateRecipe(params.criteria);\n      return {\n        success: true,\n        data: recipe,\n        metadata: {\n          timestamp: Date.now(),\n          version: '1.0.0'\n        }\n      };\n    } catch (error) {\n      errorHandler.log(error instanceof Error ? error : new Error(String(error)), { context: { service: 'RecipeFinder', action: 'generateRecipe', data: params.criteria } });\n      return {\n        success: false,\n        data: {\n          id: 'error',\n          name: 'Error generating recipe',\n          ingredients: [],\n          instructions: [],\n          cuisine: 'Unknown',\n          elementalProperties: { Fire: 0, Water: 0, Earth: 0, Air: 0 }\n        },\n        error: {\n          code: 'PROCESSING_ERROR',\n          message: 'Failed to generate recipe',\n          details: error instanceof Error ? error.message : 'Unknown error'\n        }\n      };\n    }\n  }\n  \n  /**\n   * Generate a fusion recipe combining multiple cuisines\n   */\n  async generateFusionRecipe(params: GenerateFusionRecipeParams): Promise<ApiResponse<Recipe>> {\n    try {\n      const recipe = await this.recipeService.generateFusionRecipe(params.cuisines, params.criteria);\n      return {\n        success: true,\n        data: recipe,\n        metadata: {\n          timestamp: Date.now(),\n          version: '1.0.0'\n        }\n      };\n    } catch (error) {\n      errorHandler.log(error instanceof Error ? error : new Error(String(error)), { context: { service: 'RecipeFinder', action: 'generateFusionRecipe', data: { cuisines: params.cuisines, criteria: params.criteria } } });\n      return {\n        success: false,\n        data: {\n          id: 'error',\n          name: 'Error generating fusion recipe',\n          ingredients: [],\n          instructions: [],\n          cuisine: params.cuisines?.join('-'),\n          elementalProperties: { Fire: 0, Water: 0, Earth: 0, Air: 0 }\n        },\n        error: {\n          code: 'PROCESSING_ERROR',\n          message: 'Failed to generate fusion recipe',\n          details: error instanceof Error ? error.message : 'Unknown error'\n        }\n      };\n    }\n  }\n  \n  /**\n   * Adapt a recipe for the current season\n   */\n  async adaptRecipeForSeason(params: AdaptRecipeForSeasonParams): Promise<ApiResponse<Recipe>> {\n    try {\n      const recipe = await this.recipeService.adaptRecipeForSeason({ id: params.recipeId } as Recipe, params.season);\n      return {\n        success: true,\n        data: recipe,\n        metadata: {\n          timestamp: Date.now(),\n          version: '1.0.0'\n        }\n      };\n    } catch (error) {\n      errorHandler.log(error instanceof Error ? error : new Error(String(error)), { context: { service: 'RecipeFinder', action: 'adaptRecipeForSeason', data: { recipeId: params.recipeId, season: params.season } } });\n      return {\n        success: false,\n        error: {\n          code: 'PROCESSING_ERROR',\n          message: 'Failed to adapt recipe',\n          details: error instanceof Error ? error.message : 'Unknown error'\n        }\n      };\n    }\n  }\n  \n  /**\n   * Calculate the elemental properties of a recipe\n   */\n  calculateElementalProperties(recipe: Partial<Recipe>): ElementalProperties {\n    try {\n      return this.recipeService.calculateElementalProperties(recipe);\n    } catch (error) {\n      errorHandler.log(error instanceof Error ? error : new Error(String(error)), { context: { service: 'RecipeFinder', action: 'calculateElementalProperties', data: { recipeId: recipe?.id || 'unknown' } } });\n      // Return balanced elemental properties on error\n      return { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 };\n    }\n  }\n  \n  /**\n   * Get the dominant element of a recipe\n   */\n  getDominantElement(recipe: Recipe): { element: keyof ElementalProperties; value: number } {\n    try {\n      return this.recipeService.getDominantElement(recipe);\n    } catch (error) {\n      errorHandler.log(error instanceof Error ? error : new Error(String(error)), { context: { service: 'RecipeFinder', action: 'getDominantElement', data: { recipeId: recipe?.id || 'unknown' } } });\n      // Return a default element on error\n      return { element: 'Fire', value: 0 };\n    }\n  }\n  \n  /**\n   * Calculate the similarity between two recipes\n   */\n  calculateSimilarity(recipe1: Recipe, recipe2: Recipe): number {\n    try {\n      return this.recipeService.calculateSimilarity(recipe1, recipe2);\n    } catch (error) {\n      errorHandler.log(error instanceof Error ? error : new Error(String(error)), { context: { service: 'RecipeFinder', action: 'calculateSimilarity', data: { recipe1Id: recipe1?.id || 'unknown', recipe2Id: recipe2?.id || 'unknown' } } });\n      // Return zero similarity on error\n      return 0;\n    }\n  }\n  \n  /**\n   * Clear the recipe cache\n   */\n  clearCache(): void {\n    try {\n      this.recipeService.clearCache();\n    } catch (error) {\n      errorHandler.log(error instanceof Error ? error : new Error(String(error)), { context: { service: 'RecipeFinder', action: 'clearCache' } });\n    }\n  }\n}\n\n// Export standalone function for compatibility\nexport const getAllRecipes = async (): Promise<Recipe[]> => {\n  const response = await RecipeFinder.getInstance().getAllRecipes();\n  return response.success ? response.data : [];\n}; "],"version":3}