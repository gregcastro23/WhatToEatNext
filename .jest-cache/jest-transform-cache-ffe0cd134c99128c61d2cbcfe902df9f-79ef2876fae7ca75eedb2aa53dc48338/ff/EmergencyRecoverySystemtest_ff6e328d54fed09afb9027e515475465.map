{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/EmergencyRecoverySystem.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/EmergencyRecoverySystem.test.ts"],"sourcesContent":["/**\n * Emergency Recovery System Tests\n * Perfect Codebase Campaign - Task 6.3 Implementation Tests\n */\n\nimport * as fs from 'fs';\n\nimport { SafetySettings, SafetyEventSeverity, RecoveryAction } from '../../types/campaign';\n\nimport { EmergencyRecoverySystem, EmergencyRecoveryOptions } from './EmergencyRecoverySystem';\n\n// Mock child_process for testing\njest.mock('child_process', () => ({\n  execSync: jest.fn()\n}));\n\n// Mock fs for testing\njest.mock('fs', () => ({\n  existsSync: jest.fn(),\n  readFileSync: jest.fn(),\n  writeFileSync: jest.fn(),\n  mkdirSync: jest.fn(),\n  unlinkSync: jest.fn(),\n  rmSync: jest.fn(),\n  statSync: jest.fn()\n}));\n\nconst { execSync } = require('child_process');\nconst mockFs = fs as jest.Mocked<typeof fs>;\n\ndescribe('Emergency Recovery System - Task 6.3', () => {\n  let emergencyRecovery: EmergencyRecoverySystem;\n  let mockSettings: SafetySettings;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    mockSettings = {\n      maxFilesPerBatch: 15,\n      buildValidationFrequency: 5,\n      testValidationFrequency: 10,\n      corruptionDetectionEnabled: true,\n      automaticRollbackEnabled: true,\n      stashRetentionDays: 7\n    };\n\n    // Mock git repository existence\n    mockFs.existsSync.mockImplementation((path: string) => {\n      if (path === '.git') return true;\n      if (path.toString().includes('.kiro')) return true;\n      if (path.toString().includes('emergency-backups')) return true;\n      if (path.toString().includes('metrics.json')) return true;\n      if (path.toString().includes('campaign-stashes.json')) return false;\n      return false;\n    });\n\n    // Mock fs.statSync for directory checks\n    mockFs.statSync.mockReturnValue({\n      isDirectory: () => true\n    } as any);\n\n    // Mock fs.readFileSync to return empty JSON for stash tracking\n    mockFs.readFileSync.mockImplementation((path: string) => {\n      if (path.toString().includes('campaign-stashes.json')) {\n        return JSON.stringify({ stashes: {}, counter: 0 });\n      }\n      return '';\n    });\n\n    // Mock git commands\n    execSync.mockImplementation((command: string) => {\n      if (command.includes('git status --porcelain')) return '';\n      if (command.includes('git branch --show-current')) return 'main';\n      if (command.includes('git stash push')) return 'Saved working directory';\n      if (command.includes('git stash list --oneline')) return 'stash@{0}: campaign-test-1-2024-01-15T10-30-00-000Z: Test stash';\n      if (command.includes('git stash apply')) return 'Applied stash';\n      if (command.includes('git reset --hard')) return 'HEAD is now at abc123';\n      if (command.includes('git clean -fd')) return 'Removing untracked files';\n      if (command.includes('git cat-file -e')) return '';\n      if (command.includes('git log --oneline')) return 'abc123 Initial commit\\ndef456 Second commit';\n      if (command.includes('git ls-files | wc -l')) return '150';\n      if (command.includes('git archive')) return '';\n      if (command.includes('git checkout')) return 'Switched to branch';\n      if (command.includes('git branch -D')) return 'Deleted branch';\n      if (command.includes('git stash clear')) return '';\n      if (command.includes('yarn build')) return 'Build successful';\n      if (command.includes('yarn test')) return 'Tests passed';\n      return '';\n    });\n\n    emergencyRecovery = new EmergencyRecoverySystem(mockSettings);\n  });\n\n  describe('Emergency Rollback with Multiple Recovery Options', () => {\n    test('should perform emergency rollback with default options', async () => {\n      // First create a stash to rollback to\n      await emergencyRecovery.createStash('Test stash for rollback');\n      \n      const result = await emergencyRecovery.emergencyRollbackWithOptions();\n\n      expect(result.success).toBe(true);\n      expect(result.recoveryMethod).toBe('emergency-rollback');\n      expect(result.buildValidation).toBe(true);\n      expect(execSync).toHaveBeenCalledWith('yarn build', expect.any(Object));\n    });\n\n    test('should create backup before rollback when requested', async () => {\n      // First create a stash to rollback to\n      await emergencyRecovery.createStash('Test stash for backup rollback');\n      \n      const options: EmergencyRecoveryOptions = {\n        createBackupBeforeReset: true,\n        validateAfterRecovery: true\n      };\n\n      const result = await emergencyRecovery.emergencyRollbackWithOptions(options);\n\n      expect(result.success).toBe(true);\n      expect(execSync).toHaveBeenCalledWith(\n        expect.stringContaining('git archive'),\n        expect.any(Object)\n      );\n    });\n\n    test('should skip validation when requested', async () => {\n      // First create a stash to rollback to\n      await emergencyRecovery.createStash('Test stash for validation skip');\n      \n      const options: EmergencyRecoveryOptions = {\n        validateAfterRecovery: false\n      };\n\n      const result = await emergencyRecovery.emergencyRollbackWithOptions(options);\n\n      expect(result.success).toBe(true);\n      expect(result.buildValidation).toBe(false);\n      expect(result.testValidation).toBe(false);\n    });\n\n    test('should handle rollback failures gracefully', async () => {\n      execSync.mockImplementation((command: string) => {\n        if (command.includes('git stash apply')) {\n          throw new Error('Stash apply failed');\n        }\n        return '';\n      });\n\n      await expect(emergencyRecovery.emergencyRollbackWithOptions()).rejects.toThrow('Emergency rollback failed');\n    });\n  });\n\n  describe('Rollback to Specific Commit', () => {\n    test('should rollback to specific commit successfully', async () => {\n      const commitHash = 'abc123def456';\n      \n      const result = await emergencyRecovery.rollbackToCommit(commitHash);\n\n      expect(result.success).toBe(true);\n      expect(result.recoveryMethod).toBe('commit-rollback');\n      expect(execSync).toHaveBeenCalledWith(`git reset --hard ${commitHash}`, expect.any(Object));\n      expect(execSync).toHaveBeenCalledWith('git clean -fd', expect.any(Object));\n    });\n\n    test('should validate commit exists before rollback', async () => {\n      const invalidCommit = 'invalid123';\n      \n      execSync.mockImplementation((command: string) => {\n        if (command.includes('git cat-file -e invalid123')) {\n          throw new Error('Commit does not exist');\n        }\n        return '';\n      });\n\n      await expect(emergencyRecovery.rollbackToCommit(invalidCommit)).rejects.toThrow('Commit invalid123 does not exist');\n    });\n\n    test('should create backup before commit rollback when requested', async () => {\n      const commitHash = 'abc123def456';\n      const options: EmergencyRecoveryOptions = {\n        createBackupBeforeReset: true\n      };\n\n      const result = await emergencyRecovery.rollbackToCommit(commitHash, options);\n\n      expect(result.success).toBe(true);\n      expect(execSync).toHaveBeenCalledWith(\n        expect.stringContaining('git archive'),\n        expect.any(Object)\n      );\n    });\n\n    test('should handle commit rollback failures', async () => {\n      const commitHash = 'abc123def456';\n      \n      execSync.mockImplementation((command: string) => {\n        if (command.includes('git reset --hard')) {\n          throw new Error('Reset failed');\n        }\n        return '';\n      });\n\n      await expect(emergencyRecovery.rollbackToCommit(commitHash)).rejects.toThrow('Commit rollback failed');\n    });\n  });\n\n  describe('Nuclear Option Reset with Complete Metrics Clearing', () => {\n    test('should perform nuclear reset successfully', async () => {\n      const result = await emergencyRecovery.nuclearReset();\n\n      expect(result.success).toBe(true);\n      expect(result.filesReset).toBe(150);\n      expect(result.metricsCleared).toBe(true);\n      expect(result.stashesCleared).toBeGreaterThanOrEqual(0);\n      expect(result.backupCreated).toBeDefined();\n      expect(result.validationResult.success).toBe(true);\n    });\n\n    test('should preserve stashes when requested', async () => {\n      const options: EmergencyRecoveryOptions = {\n        preserveStashes: true\n      };\n\n      const result = await emergencyRecovery.nuclearReset(options);\n\n      expect(result.success).toBe(true);\n      expect(result.stashesCleared).toBe(0);\n    });\n\n    test('should preserve metrics when requested', async () => {\n      const options: EmergencyRecoveryOptions = {\n        preserveMetrics: true\n      };\n\n      const result = await emergencyRecovery.nuclearReset(options);\n\n      expect(result.success).toBe(true);\n      expect(result.metricsCleared).toBe(false);\n    });\n\n    test('should reset to specific commit when provided', async () => {\n      const specificCommit = 'def456abc789';\n      const options: EmergencyRecoveryOptions = {\n        resetToCommit: specificCommit\n      };\n\n      const result = await emergencyRecovery.nuclearReset(options);\n\n      expect(result.success).toBe(true);\n      expect(execSync).toHaveBeenCalledWith(`git reset --hard ${specificCommit}`, expect.any(Object));\n    });\n\n    test('should handle nuclear reset failures gracefully', async () => {\n      execSync.mockImplementation((command: string) => {\n        if (command.includes('git reset --hard')) {\n          throw new Error('Nuclear reset failed');\n        }\n        return '';\n      });\n\n      const result = await emergencyRecovery.nuclearReset();\n\n      expect(result.success).toBe(false);\n      expect(result.errors).toContain('Nuclear reset failed: Nuclear reset failed');\n    });\n\n    test('should clear all metrics files during nuclear reset', async () => {\n      mockFs.existsSync.mockImplementation((path: string) => {\n        return path.toString().includes('metrics.json');\n      });\n\n      const result = await emergencyRecovery.nuclearReset();\n\n      expect(result.success).toBe(true);\n      expect(mockFs.unlinkSync).toHaveBeenCalledWith('.typescript-errors-metrics.json');\n      expect(mockFs.unlinkSync).toHaveBeenCalledWith('.linting-analysis-metrics.json');\n      expect(mockFs.unlinkSync).toHaveBeenCalledWith('.explicit-any-metrics.json');\n    });\n  });\n\n  describe('Selective Recovery', () => {\n    test('should perform selective recovery for specific files', async () => {\n      // First create a stash for selective recovery\n      await emergencyRecovery.createStash('Test stash for selective recovery');\n      \n      const targets = ['src/components/Component.tsx', 'src/utils/helper.ts'];\n      \n      const result = await emergencyRecovery.selectiveRecovery(targets);\n\n      expect(result.success).toBe(true);\n      expect(result.recoveryMethod).toBe('selective-recovery');\n      expect(execSync).toHaveBeenCalledWith('git checkout -b temp-recovery-' + expect.any(String), expect.any(Object));\n      \n      for (const target of targets) {\n        expect(execSync).toHaveBeenCalledWith(`git checkout HEAD -- \"${target}\"`, expect.any(Object));\n      }\n    });\n\n    test('should use specific stash when provided', async () => {\n      const targets = ['src/components/Component.tsx'];\n      const specificStash = 'campaign-phase1-1';\n      \n      // Create the specific stash first\n      await emergencyRecovery.createStash('Test stash for specific recovery', 'phase1');\n      \n      const result = await emergencyRecovery.selectiveRecovery(targets, specificStash);\n\n      expect(result.success).toBe(true);\n    });\n\n    test('should handle selective recovery failures with cleanup', async () => {\n      // First create a stash for selective recovery\n      await emergencyRecovery.createStash('Test stash for failure test');\n      \n      const targets = ['src/components/Component.tsx'];\n      \n      execSync.mockImplementation((command: string) => {\n        if (command.includes('git checkout HEAD --')) {\n          throw new Error('Checkout failed');\n        }\n        if (command.includes('git stash push')) return 'Saved working directory';\n        if (command.includes('git stash list --oneline')) return 'stash@{0}: campaign-test-1-2024-01-15T10-30-00-000Z: Test stash';\n        if (command.includes('git stash apply')) return 'Applied stash';\n        if (command.includes('git checkout -b')) return 'Switched to new branch';\n        if (command.includes('git checkout main')) return 'Switched to branch main';\n        if (command.includes('git branch -D')) return 'Deleted branch';\n        return '';\n      });\n\n      await expect(emergencyRecovery.selectiveRecovery(targets)).rejects.toThrow('Selective recovery failed');\n      \n      // Should attempt cleanup\n      expect(execSync).toHaveBeenCalledWith(\n        expect.stringContaining('git branch -D temp-recovery-'),\n        expect.any(Object)\n      );\n    });\n\n    test('should handle missing targets gracefully', async () => {\n      // First create a stash for selective recovery\n      await emergencyRecovery.createStash('Test stash for missing targets');\n      \n      const targets = ['non-existent-file.ts'];\n      \n      mockFs.existsSync.mockImplementation((path: string) => {\n        if (path === '.git') return true;\n        if (path.toString().includes('.kiro')) return true;\n        if (path.toString().includes('campaign-stashes.json')) return false;\n        return !path.includes('non-existent-file.ts');\n      });\n\n      const result = await emergencyRecovery.selectiveRecovery(targets);\n\n      expect(result.success).toBe(true);\n    });\n  });\n\n  describe('Recovery Validation System', () => {\n    test('should validate recovery success comprehensively', async () => {\n      const result = await emergencyRecovery.validateRecoverySuccess('test-recovery');\n\n      expect(result.success).toBe(true);\n      expect(result.recoveryMethod).toBe('test-recovery');\n      expect(result.buildValidation).toBe(true);\n      expect(result.testValidation).toBe(true);\n      expect(result.filesRestored).toBe(150);\n    });\n\n    test('should detect build failures during validation', async () => {\n      execSync.mockImplementation((command: string) => {\n        if (command.includes('yarn build')) {\n          throw new Error('Build failed');\n        }\n        return '';\n      });\n\n      const result = await emergencyRecovery.validateRecoverySuccess('test-recovery');\n\n      expect(result.success).toBe(false);\n      expect(result.buildValidation).toBe(false);\n      expect(result.errors).toContain('Build validation failed: Build failed');\n    });\n\n    test('should handle test failures as warnings', async () => {\n      execSync.mockImplementation((command: string) => {\n        if (command.includes('yarn test')) {\n          throw new Error('Tests failed');\n        }\n        return '';\n      });\n\n      const result = await emergencyRecovery.validateRecoverySuccess('test-recovery');\n\n      expect(result.testValidation).toBe(false);\n      expect(result.warnings).toContain('Test validation warning: Tests failed');\n    });\n\n    test('should detect corruption after recovery', async () => {\n      // Mock corruption detection\n      jest.spyOn(emergencyRecovery, 'detectCorruption').mockResolvedValue({\n        detectedFiles: ['corrupted-file.ts'],\n        corruptionPatterns: [],\n        severity: 'HIGH' as any,\n        recommendedAction: RecoveryAction.ROLLBACK\n      });\n\n      const result = await emergencyRecovery.validateRecoverySuccess('test-recovery');\n\n      expect(result.success).toBe(false);\n      expect(result.errors).toContain('Corruption detected after recovery: 1 files');\n    });\n\n    test('should validate git state during recovery validation', async () => {\n      execSync.mockImplementation((command: string) => {\n        if (command.includes('git status --porcelain')) {\n          return 'M modified-file.ts';\n        }\n        if (command.includes('yarn build')) return 'Build successful';\n        if (command.includes('yarn test')) return 'Tests passed';\n        if (command.includes('git ls-files | wc -l')) return '150';\n        return '';\n      });\n\n      const result = await emergencyRecovery.validateRecoverySuccess('test-recovery');\n\n      expect(result.warnings).toContain('Uncommitted changes detected - consider creating a stash');\n    });\n\n    test('should handle validation errors gracefully', async () => {\n      execSync.mockImplementation((command: string) => {\n        if (command.includes('git ls-files')) {\n          throw new Error('Git command failed');\n        }\n        return '';\n      });\n\n      const result = await emergencyRecovery.validateRecoverySuccess('test-recovery');\n\n      expect(result.success).toBe(false);\n      expect(result.errors).toContain('Recovery validation error: Git command failed');\n    });\n  });\n\n  describe('Recovery Statistics and Reporting', () => {\n    test('should track recovery statistics', async () => {\n      // First create a stash for successful recovery\n      await emergencyRecovery.createStash('Test stash for statistics');\n      \n      // Perform some recovery operations\n      await emergencyRecovery.emergencyRollbackWithOptions();\n      \n      try {\n        await emergencyRecovery.rollbackToCommit('invalid-commit');\n      } catch {\n        // Expected to fail\n      }\n\n      const stats = emergencyRecovery.getRecoveryStatistics();\n\n      expect(stats.totalRecoveries).toBeGreaterThan(0);\n      expect(stats.successfulRecoveries).toBeGreaterThan(0);\n      expect(stats.recoveryMethods).toBeDefined();\n      expect(stats.lastRecovery).toBeDefined();\n    });\n\n    test('should provide recovery events for reporting', async () => {\n      // First create a stash for recovery\n      await emergencyRecovery.createStash('Test stash for events');\n      \n      await emergencyRecovery.emergencyRollbackWithOptions();\n\n      const events = emergencyRecovery.getRecoveryEvents();\n\n      expect(events.length).toBeGreaterThan(0);\n      expect(events[0]).toHaveProperty('type');\n      expect(events[0]).toHaveProperty('timestamp');\n      expect(events[0]).toHaveProperty('description');\n      expect(events[0]).toHaveProperty('severity');\n      expect(events[0]).toHaveProperty('action');\n    });\n\n    test('should count nuclear resets separately', async () => {\n      await emergencyRecovery.nuclearReset();\n\n      const stats = emergencyRecovery.getRecoveryStatistics();\n\n      expect(stats.nuclearResets).toBe(1);\n    });\n\n    test('should track failed recoveries', async () => {\n      execSync.mockImplementation((command: string) => {\n        if (command.includes('git stash apply')) {\n          throw new Error('Recovery failed');\n        }\n        return '';\n      });\n\n      try {\n        await emergencyRecovery.emergencyRollbackWithOptions();\n      } catch {\n        // Expected to fail\n      }\n\n      const stats = emergencyRecovery.getRecoveryStatistics();\n\n      expect(stats.failedRecoveries).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Emergency Backup Creation', () => {\n    test('should create emergency backup before operations', async () => {\n      // First create a stash for the rollback operation\n      await emergencyRecovery.createStash('Test stash for backup test');\n      \n      const options: EmergencyRecoveryOptions = {\n        createBackupBeforeReset: true\n      };\n\n      await emergencyRecovery.emergencyRollbackWithOptions(options);\n\n      expect(execSync).toHaveBeenCalledWith(\n        expect.stringContaining('git archive --format=tar.gz'),\n        expect.any(Object)\n      );\n    });\n\n    test('should create backup directory if it does not exist', async () => {\n      mockFs.existsSync.mockImplementation((path: string) => {\n        return !path.toString().includes('emergency-backups');\n      });\n\n      new EmergencyRecoverySystem(mockSettings);\n\n      expect(mockFs.mkdirSync).toHaveBeenCalledWith(\n        expect.stringContaining('emergency-backups'),\n        { recursive: true }\n      );\n    });\n  });\n\n  describe('Integration with Safety Protocol', () => {\n    test('should inherit safety protocol functionality', async () => {\n      // Test that it can create stashes (inherited from SafetyProtocol)\n      const stashId = await emergencyRecovery.createStash('Test emergency stash');\n\n      expect(stashId).toBeDefined();\n      expect(stashId).toContain('campaign-');\n    });\n\n    test('should inherit corruption detection', async () => {\n      const report = await emergencyRecovery.detectCorruption(['test-file.ts']);\n\n      expect(report).toBeDefined();\n      expect(report).toHaveProperty('detectedFiles');\n      expect(report).toHaveProperty('corruptionPatterns');\n      expect(report).toHaveProperty('severity');\n      expect(report).toHaveProperty('recommendedAction');\n    });\n\n    test('should track safety events from both systems', async () => {\n      await emergencyRecovery.createStash('Test stash');\n      await emergencyRecovery.emergencyRollbackWithOptions();\n\n      const safetyEvents = emergencyRecovery.getSafetyEvents();\n      const recoveryEvents = emergencyRecovery.getRecoveryEvents();\n\n      expect(safetyEvents.length).toBeGreaterThan(0);\n      expect(recoveryEvents.length).toBeGreaterThan(0);\n    });\n  });\n});"],"version":3}