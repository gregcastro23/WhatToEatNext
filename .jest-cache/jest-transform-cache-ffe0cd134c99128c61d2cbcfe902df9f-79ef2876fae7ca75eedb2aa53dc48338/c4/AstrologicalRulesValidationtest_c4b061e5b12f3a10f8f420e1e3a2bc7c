f45ccded038aec1f65819ab3a44e530b
"use strict";
/**
 * Comprehensive Tests for Astrological ESLint Rules
 *
 * Tests the custom ESLint plugin rules for astrological calculations
 * to ensure they properly validate planetary positions, elemental properties,
 * and transit date validation patterns.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const eslint_1 = require("eslint");
describe('Astrological ESLint Rules', () => {
    let eslint;
    beforeAll(() => {
        // Create ESLint instance with our custom rules
        eslint = new eslint_1.ESLint({
            baseConfig: {
                languageOptions: {
                    ecmaVersion: 2022,
                    sourceType: 'module',
                    parser: require('@typescript-eslint/parser'),
                    parserOptions: {
                        ecmaFeatures: {
                            jsx: true,
                        },
                    },
                },
                plugins: {
                    astrological: require('../../eslint-plugins/astrological-rules.cjs'),
                },
                rules: {
                    'astrological/preserve-planetary-constants': 'error',
                    'astrological/validate-planetary-position-structure': 'error',
                    'astrological/validate-elemental-properties': 'error',
                    'astrological/require-transit-date-validation': 'warn',
                    'astrological/preserve-fallback-values': 'error',
                },
            },
            useEslintrc: false,
        });
    });
    describe('preserve-planetary-constants rule', () => {
        test('should error when modifying protected constants', async () => {
            const code = `
        const DEGREES_PER_SIGN = 30;
        DEGREES_PER_SIGN = 25; // This should error
      `;
            const results = eslint.lintText(code, { filePath: 'test.ts' });
            const messages = results[0].messages;
            expect(messages).toHaveLength(1);
            expect(messages[0].ruleId).toBe('astrological/preserve-planetary-constants');
            expect(messages[0].message).toContain('should not be modified');
        });
        test('should error when modifying constant object properties', async () => {
            const code = `
        const RELIABLE_POSITIONS = { sun: { sign: 'aries' } };
        RELIABLE_POSITIONS.sun = { sign: 'taurus' }; // This should error
      `;
            const results = eslint.lintText(code, { filePath: 'test.ts' });
            const messages = results[0].messages;
            expect(messages).toHaveLength(1);
            expect(messages[0].ruleId).toBe('astrological/preserve-planetary-constants');
            expect(messages[0].message).toContain('should not be modified');
        });
        test('should error when using update operators on constants', async () => {
            const code = `
        let MAX_LONGITUDE = 360;
        MAX_LONGITUDE++; // This should error
      `;
            const results = eslint.lintText(code, { filePath: 'test.ts' });
            const messages = results[0].messages;
            expect(messages).toHaveLength(1);
            expect(messages[0].ruleId).toBe('astrological/preserve-planetary-constants');
            expect(messages[0].message).toContain('should not be modified');
        });
        test('should allow using constants without modification', async () => {
            const code = `
        const DEGREES_PER_SIGN = 30;
        const angle = DEGREES_PER_SIGN * 2; // This should be fine
        console.log(RELIABLE_POSITIONS.sun.sign); // This should be fine
      `;
            const results = eslint.lintText(code, { filePath: 'test.ts' });
            const messages = results[0].messages;
            expect(messages).toHaveLength(0);
        });
    });
    describe('validate-planetary-position-structure rule', () => {
        test('should error when planetary position missing required properties', async () => {
            const code = `
        const position = {
          sign: 'aries',
          degree: 15
          // Missing exactLongitude and isRetrograde
        };
      `;
            const results = eslint.lintText(code, { filePath: 'test.ts' });
            const messages = results[0].messages;
            expect(messages).toHaveLength(1);
            expect(messages[0].ruleId).toBe('astrological/validate-planetary-position-structure');
            expect(messages[0].message).toContain('missing required properties');
            expect(messages[0].message).toContain('exactLongitude');
            expect(messages[0].message).toContain('isRetrograde');
        });
        test('should pass when planetary position has all required properties', async () => {
            const code = `
        const position = {
          sign: 'aries',
          degree: 15.5,
          exactLongitude: 15.5,
          isRetrograde: false
        };
      `;
            const results = eslint.lintText(code, { filePath: 'test.ts' });
            const messages = results[0].messages;
            expect(messages).toHaveLength(0);
        });
        test('should not flag non-planetary objects', async () => {
            const code = `
        const UNUSED_config = {
          timeout: 5000,
          retries: 3
        };

        const UNUSED_user = {
          name: 'John',
          age: 30
        };
      `;
            const results = eslint.lintText(code, { filePath: 'test.ts' });
            const messages = results[0].messages;
            expect(messages).toHaveLength(0);
        });
    });
    describe('validate-elemental-properties rule', () => {
        test('should error when elemental properties missing required elements', async () => {
            const code = `
        const properties = {
          Fire: 0.8,
          Water: 0.2
          // Missing Earth and Air
        };
      `;
            const results = eslint.lintText(code, { filePath: 'test.ts' });
            const messages = results[0].messages;
            expect(messages).toHaveLength(1);
            expect(messages[0].ruleId).toBe('astrological/validate-elemental-properties');
            expect(messages[0].message).toContain('missing required elements');
            expect(messages[0].message).toContain('Earth');
            expect(messages[0].message).toContain('Air');
        });
        test('should error when using invalid element names', async () => {
            const code = `
        const properties = {
          Fire: 0.5,
          Water: 0.3,
          Earth: 0.1,
          Wind: 0.1 // Should be Air
        };
      `;
            const results = eslint.lintText(code, { filePath: 'test.ts' });
            const messages = results[0].messages;
            expect(messages).toHaveLength(1);
            expect(messages[0].ruleId).toBe('astrological/validate-elemental-properties');
            expect(messages[0].message).toContain('Invalid element names');
            expect(messages[0].message).toContain('Wind');
        });
        test('should error when element values are out of range', async () => {
            const code = `
        const properties = {
          Fire: 1.5, // Too high
          Water: -0.1, // Too low
          Earth: 0.3,
          Air: 0.2
        };
      `;
            const results = eslint.lintText(code, { filePath: 'test.ts' });
            const messages = results[0].messages;
            expect(messages).toHaveLength(2);
            expect(messages.some(m => m.message.includes('1.5'))).toBe(true);
            expect(messages.some(m => m.message.includes('-0.1'))).toBe(true);
        });
        test('should pass when elemental properties are valid', async () => {
            const code = `
        const properties = {
          Fire: 0.7,
          Water: 0.1,
          Earth: 0.1,
          Air: 0.1
        };
      `;
            const results = eslint.lintText(code, { filePath: 'test.ts' });
            const messages = results[0].messages;
            expect(messages).toHaveLength(0);
        });
    });
    describe('require-transit-date-validation rule', () => {
        test('should warn when astrological file lacks validation import', async () => {
            const code = `
        // This is in a calculations file but has no validation
        function calculatePlanetaryInfluence() {
          return { influence: 0.8 };
        }
      `;
            const results = eslint.lintText(code, {
                filePath: 'src/calculations/planetary.ts',
            });
            const messages = results[0].messages;
            expect(messages).toHaveLength(1);
            expect(messages[0].ruleId).toBe('astrological/require-transit-date-validation');
            expect(messages[0].message).toContain('should import transit validation utilities');
        });
        test('should warn when validation is imported but not used', async () => {
            const code = `
        import { validateTransitDate } from '@/utils/astrology/transitValidation';

        function calculatePlanetaryInfluence() {
          // Validation imported but not called
          return { influence: 0.8 };
        }
      `;
            const results = eslint.lintText(code, {
                filePath: 'src/calculations/planetary.ts',
            });
            const messages = results[0].messages;
            expect(messages).toHaveLength(1);
            expect(messages[0].ruleId).toBe('astrological/require-transit-date-validation');
            expect(messages[0].message).toContain('Consider adding transit date validation calls');
        });
        test('should pass when validation is properly used', async () => {
            const code = `
        import { validateTransitDate } from '@/utils/astrology/transitValidation';

        function calculatePlanetaryInfluence(planet, date) {
          const isValid = validateTransitDate(planet, date, 'aries', transitDates);
          return { influence: isValid ? 0.8 : 0.5 };
        }
      `;
            const results = eslint.lintText(code, {
                filePath: 'src/calculations/planetary.ts',
            });
            const messages = results[0].messages;
            expect(messages).toHaveLength(0);
        });
        test('should not flag non-astrological files', async () => {
            const code = `
        function regularFunction() {
          return { result: 'success' };
        }
      `;
            const results = eslint.lintText(code, {
                filePath: 'src/components/Button.tsx',
            });
            const messages = results[0].messages;
            expect(messages).toHaveLength(0);
        });
    });
    describe('preserve-fallback-values rule', () => {
        test('should error when fallback variable assigned null', async () => {
            const code = `
        let FALLBACK_POSITIONS = null; // This should error
        const RELIABLE_DATA = undefined; // This should error
      `;
            const results = eslint.lintText(code, { filePath: 'test.ts' });
            const messages = results[0].messages;
            expect(messages).toHaveLength(2);
            expect(messages[0].ruleId).toBe('astrological/preserve-fallback-values');
            expect(messages[1].ruleId).toBe('astrological/preserve-fallback-values');
            expect(messages.some(m => m.message.includes('FALLBACK_POSITIONS'))).toBe(true);
            expect(messages.some(m => m.message.includes('RELIABLE_DATA'))).toBe(true);
        });
        test('should error when fallback variable reassigned to null', async () => {
            const code = `
        let MARCH2025_POSITIONS = { sun: { sign: 'aries' } };
        MARCH2025_POSITIONS = null; // This should error
      `;
            const results = eslint.lintText(code, { filePath: 'test.ts' });
            const messages = results[0].messages;
            expect(messages).toHaveLength(1);
            expect(messages[0].ruleId).toBe('astrological/preserve-fallback-values');
            expect(messages[0].message).toContain('should not be assigned null');
        });
        test('should allow valid fallback assignments', async () => {
            const code = `
        const FALLBACK_POSITIONS = {
          sun: { sign: 'aries', degree: 8.5 }
        };

        let RELIABLE_DATA = getReliableData
        RELIABLE_DATA = { updated: true };
      `;
            const results = eslint.lintText(code, { filePath: 'test.ts' });
            const messages = results[0].messages;
            expect(messages).toHaveLength(0);
        });
        test('should not flag non-fallback variables', async () => {
            const code = `
        let regularVariable = null;
        const anotherVar = undefined;
        regularVariable = null;
      `;
            const results = eslint.lintText(code, { filePath: 'test.ts' });
            const messages = results[0].messages;
            expect(messages).toHaveLength(0);
        });
    });
    describe('Integration with existing ESLint configuration', () => {
        test('should work with TypeScript files', async () => {
            const code = `
        interface PlanetaryPosition {
          sign: string;
          degree: number;
          exactLongitude: number;
          isRetrograde: boolean;
        }

        const position: PlanetaryPosition = {
          sign: 'aries',
          degree: 15.5,
          exactLongitude: 15.5,
          isRetrograde: false
        };
      `;
            const results = eslint.lintText(code, { filePath: 'test.ts' });
            const messages = results[0].messages;
            expect(messages).toHaveLength(0);
        });
        test('should work with React components', async () => {
            const code = `
        import React from 'react';

        interface Props {
          elementalProperties: {
            Fire: number;
            Water: number;
            Earth: number;
            Air: number;
          };
        }

        const ElementalDisplay: React.FC<Props> = ({ elementalProperties }) => {
          return <div>Elemental display</div>;
        };
      `;
            const results = eslint.lintText(code, { filePath: 'test.tsx' });
            const messages = results[0].messages;
            expect(messages).toHaveLength(0);
        });
    });
    describe('Rule performance and edge cases', () => {
        test('should handle large files efficiently', async () => {
            const largeCode = `
        ${Array(100)
                .fill(0)
                .map((_, i) => `
          const position${i} = {
            sign: 'aries',
            degree: ${i},
            exactLongitude: ${i},
            isRetrograde: false
          };
        `)
                .join('\n')}
      `;
            const startTime = Date.now();
            const results = eslint.lintText(largeCode, { filePath: 'test.ts' });
            const endTime = Date.now();
            expect(endTime - startTime).toBeLessThan(1000); // Should complete within 1 second
            expect(results[0].messages).toHaveLength(0);
        });
        test('should handle malformed code gracefully', async () => {
            const malformedCode = `
        const incomplete = {
          sign: 'aries'
          // Missing comma and closing brace
      `;
            // This should not throw an error, even with malformed code
            const results = eslint.lintText(malformedCode, { filePath: 'test.ts' });
            // ESLint should handle syntax errors, our rules should not crash
            expect(results).toBeDefined();
        });
        test('should handle nested objects correctly', async () => {
            const code = `
        const UNUSED_planetData = {
          mercury: {
            position: {
              sign: 'gemini',
              degree: 10.5,
              exactLongitude: 70.5,
              isRetrograde: true
            },
            properties: {
              Fire: 0.3,
              Water: 0.2,
              Earth: 0.2,
              Air: 0.3
            }
          }
        };
      `;
            const results = eslint.lintText(code, { filePath: 'test.ts' });
            const messages = results[0].messages;
            expect(messages).toHaveLength(0);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9fX3Rlc3RzX18vbGludGluZy9Bc3Ryb2xvZ2ljYWxSdWxlc1ZhbGlkYXRpb24udGVzdC50cyIsIm1hcHBpbmdzIjoiO0FBQUE7Ozs7OztHQU1HOztBQUVILG1DQUFnQztBQUVoQyxRQUFRLENBQUMsMkJBQTJCLEVBQUUsR0FBRyxFQUFFO0lBQ3pDLElBQUksTUFBYyxDQUFDO0lBRW5CLFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDYiwrQ0FBK0M7UUFDL0MsTUFBTSxHQUFHLElBQUksZUFBTSxDQUFDO1lBQ2xCLFVBQVUsRUFBRTtnQkFDVixlQUFlLEVBQUU7b0JBQ2YsV0FBVyxFQUFFLElBQUk7b0JBQ2pCLFVBQVUsRUFBRSxRQUFRO29CQUNwQixNQUFNLEVBQUUsT0FBTyxDQUFDLDJCQUEyQixDQUFDO29CQUM1QyxhQUFhLEVBQUU7d0JBQ2IsWUFBWSxFQUFFOzRCQUNaLEdBQUcsRUFBRSxJQUFJO3lCQUNWO3FCQUNGO2lCQUNGO2dCQUNELE9BQU8sRUFBRTtvQkFDUCxZQUFZLEVBQUUsT0FBTyxDQUFDLDZDQUE2QyxDQUFDO2lCQUNyRTtnQkFDRCxLQUFLLEVBQUU7b0JBQ0wsMkNBQTJDLEVBQUUsT0FBTztvQkFDcEQsb0RBQW9ELEVBQUUsT0FBTztvQkFDN0QsNENBQTRDLEVBQUUsT0FBTztvQkFDckQsOENBQThDLEVBQUUsTUFBTTtvQkFDdEQsdUNBQXVDLEVBQUUsT0FBTztpQkFDakQ7YUFDRjtZQUNELFdBQVcsRUFBRSxLQUFLO1NBQ25CLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLG1DQUFtQyxFQUFFLEdBQUcsRUFBRTtRQUNqRCxJQUFJLENBQUMsaURBQWlELEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDakUsTUFBTSxJQUFJLEdBQUc7OztPQUdaLENBQUM7WUFFRixNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFLFFBQVEs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QUM7UUFDaEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsd0NBQXdDLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDeEQsTUFBTSxJQUFJLEdBQUc7Ozs7Ozs7Ozs7Ozs7Ozs7O09BaUJaLENBQUM7WUFFRixNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO1lBQy9ELE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7WUFFckMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9fX3Rlc3RzX18vbGludGluZy9Bc3Ryb2xvZ2ljYWxSdWxlc1ZhbGlkYXRpb24udGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbXByZWhlbnNpdmUgVGVzdHMgZm9yIEFzdHJvbG9naWNhbCBFU0xpbnQgUnVsZXNcbiAqXG4gKiBUZXN0cyB0aGUgY3VzdG9tIEVTTGludCBwbHVnaW4gcnVsZXMgZm9yIGFzdHJvbG9naWNhbCBjYWxjdWxhdGlvbnNcbiAqIHRvIGVuc3VyZSB0aGV5IHByb3Blcmx5IHZhbGlkYXRlIHBsYW5ldGFyeSBwb3NpdGlvbnMsIGVsZW1lbnRhbCBwcm9wZXJ0aWVzLFxuICogYW5kIHRyYW5zaXQgZGF0ZSB2YWxpZGF0aW9uIHBhdHRlcm5zLlxuICovXG5cbmltcG9ydCB7IEVTTGludCB9IGZyb20gJ2VzbGludCc7XG5cbmRlc2NyaWJlKCdBc3Ryb2xvZ2ljYWwgRVNMaW50IFJ1bGVzJywgKCkgPT4ge1xuICBsZXQgZXNsaW50OiBFU0xpbnQ7XG5cbiAgYmVmb3JlQWxsKCgpID0+IHtcbiAgICAvLyBDcmVhdGUgRVNMaW50IGluc3RhbmNlIHdpdGggb3VyIGN1c3RvbSBydWxlc1xuICAgIGVzbGludCA9IG5ldyBFU0xpbnQoe1xuICAgICAgYmFzZUNvbmZpZzoge1xuICAgICAgICBsYW5ndWFnZU9wdGlvbnM6IHtcbiAgICAgICAgICBlY21hVmVyc2lvbjogMjAyMixcbiAgICAgICAgICBzb3VyY2VUeXBlOiAnbW9kdWxlJyxcbiAgICAgICAgICBwYXJzZXI6IHJlcXVpcmUoJ0B0eXBlc2NyaXB0LWVzbGludC9wYXJzZXInKSxcbiAgICAgICAgICBwYXJzZXJPcHRpb25zOiB7XG4gICAgICAgICAgICBlY21hRmVhdHVyZXM6IHtcbiAgICAgICAgICAgICAganN4OiB0cnVlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBwbHVnaW5zOiB7XG4gICAgICAgICAgYXN0cm9sb2dpY2FsOiByZXF1aXJlKCcuLi8uLi9lc2xpbnQtcGx1Z2lucy9hc3Ryb2xvZ2ljYWwtcnVsZXMuY2pzJyksXG4gICAgICAgIH0sXG4gICAgICAgIHJ1bGVzOiB7XG4gICAgICAgICAgJ2FzdHJvbG9naWNhbC9wcmVzZXJ2ZS1wbGFuZXRhcnktY29uc3RhbnRzJzogJ2Vycm9yJyxcbiAgICAgICAgICAnYXN0cm9sb2dpY2FsL3ZhbGlkYXRlLXBsYW5ldGFyeS1wb3NpdGlvbi1zdHJ1Y3R1cmUnOiAnZXJyb3InLFxuICAgICAgICAgICdhc3Ryb2xvZ2ljYWwvdmFsaWRhdGUtZWxlbWVudGFsLXByb3BlcnRpZXMnOiAnZXJyb3InLFxuICAgICAgICAgICdhc3Ryb2xvZ2ljYWwvcmVxdWlyZS10cmFuc2l0LWRhdGUtdmFsaWRhdGlvbic6ICd3YXJuJyxcbiAgICAgICAgICAnYXN0cm9sb2dpY2FsL3ByZXNlcnZlLWZhbGxiYWNrLXZhbHVlcyc6ICdlcnJvcicsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgdXNlRXNsaW50cmM6IGZhbHNlLFxuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgncHJlc2VydmUtcGxhbmV0YXJ5LWNvbnN0YW50cyBydWxlJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBlcnJvciB3aGVuIG1vZGlmeWluZyBwcm90ZWN0ZWQgY29uc3RhbnRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29kZSA9IGBcbiAgICAgICAgY29uc3QgREVHUkVFU19QRVJfU0lHTiA9IDMwO1xuICAgICAgICBERUdSRUVTX1BFUl9TSUdOID0gMjU7IC8vIFRoaXMgc2hvdWxkIGVycm9yXG4gICAgICBgO1xuXG4gICAgICBjb25zdCByZXN1bHRzID0gZXNsaW50LmxpbnRUZXh0KGNvZGUsIHsgZmlsZVBhdGg6ICd0ZXN0LnRzJyB9KTtcbiAgICAgIGNvbnN0IG1lc3NhZ2VzID0gcmVzdWx0c1swXS5tZXNzYWdlcztcblxuICAgICAgZXhwZWN0KG1lc3NhZ2VzKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgICBleHBlY3QobWVzc2FnZXNbMF0ucnVsZUlkKS50b0JlKCdhc3Ryb2xvZ2ljYWwvcHJlc2VydmUtcGxhbmV0YXJ5LWNvbnN0YW50cycpO1xuICAgICAgZXhwZWN0KG1lc3NhZ2VzWzBdLm1lc3NhZ2UpLnRvQ29udGFpbignc2hvdWxkIG5vdCBiZSBtb2RpZmllZCcpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGVycm9yIHdoZW4gbW9kaWZ5aW5nIGNvbnN0YW50IG9iamVjdCBwcm9wZXJ0aWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29kZSA9IGBcbiAgICAgICAgY29uc3QgUkVMSUFCTEVfUE9TSVRJT05TID0geyBzdW46IHsgc2lnbjogJ2FyaWVzJyB9IH07XG4gICAgICAgIFJFTElBQkxFX1BPU0lUSU9OUy5zdW4gPSB7IHNpZ246ICd0YXVydXMnIH07IC8vIFRoaXMgc2hvdWxkIGVycm9yXG4gICAgICBgO1xuXG4gICAgICBjb25zdCByZXN1bHRzID0gZXNsaW50LmxpbnRUZXh0KGNvZGUsIHsgZmlsZVBhdGg6ICd0ZXN0LnRzJyB9KTtcbiAgICAgIGNvbnN0IG1lc3NhZ2VzID0gcmVzdWx0c1swXS5tZXNzYWdlcztcblxuICAgICAgZXhwZWN0KG1lc3NhZ2VzKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgICBleHBlY3QobWVzc2FnZXNbMF0ucnVsZUlkKS50b0JlKCdhc3Ryb2xvZ2ljYWwvcHJlc2VydmUtcGxhbmV0YXJ5LWNvbnN0YW50cycpO1xuICAgICAgZXhwZWN0KG1lc3NhZ2VzWzBdLm1lc3NhZ2UpLnRvQ29udGFpbignc2hvdWxkIG5vdCBiZSBtb2RpZmllZCcpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGVycm9yIHdoZW4gdXNpbmcgdXBkYXRlIG9wZXJhdG9ycyBvbiBjb25zdGFudHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb2RlID0gYFxuICAgICAgICBsZXQgTUFYX0xPTkdJVFVERSA9IDM2MDtcbiAgICAgICAgTUFYX0xPTkdJVFVERSsrOyAvLyBUaGlzIHNob3VsZCBlcnJvclxuICAgICAgYDtcblxuICAgICAgY29uc3QgcmVzdWx0cyA9IGVzbGludC5saW50VGV4dChjb2RlLCB7IGZpbGVQYXRoOiAndGVzdC50cycgfSk7XG4gICAgICBjb25zdCBtZXNzYWdlcyA9IHJlc3VsdHNbMF0ubWVzc2FnZXM7XG5cbiAgICAgIGV4cGVjdChtZXNzYWdlcykudG9IYXZlTGVuZ3RoKDEpO1xuICAgICAgZXhwZWN0KG1lc3NhZ2VzWzBdLnJ1bGVJZCkudG9CZSgnYXN0cm9sb2dpY2FsL3ByZXNlcnZlLXBsYW5ldGFyeS1jb25zdGFudHMnKTtcbiAgICAgIGV4cGVjdChtZXNzYWdlc1swXS5tZXNzYWdlKS50b0NvbnRhaW4oJ3Nob3VsZCBub3QgYmUgbW9kaWZpZWQnKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBhbGxvdyB1c2luZyBjb25zdGFudHMgd2l0aG91dCBtb2RpZmljYXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb2RlID0gYFxuICAgICAgICBjb25zdCBERUdSRUVTX1BFUl9TSUdOID0gMzA7XG4gICAgICAgIGNvbnN0IGFuZ2xlID0gREVHUkVFU19QRVJfU0lHTiAqIDI7IC8vIFRoaXMgc2hvdWxkIGJlIGZpbmVcbiAgICAgICAgY29uc29sZS5sb2coUkVMSUFCTEVfUE9TSVRJT05TLnN1bi5zaWduKTsgLy8gVGhpcyBzaG91bGQgYmUgZmluZVxuICAgICAgYDtcblxuICAgICAgY29uc3QgcmVzdWx0cyA9IGVzbGludC5saW50VGV4dChjb2RlLCB7IGZpbGVQYXRoOiAndGVzdC50cycgfSk7XG4gICAgICBjb25zdCBtZXNzYWdlcyA9IHJlc3VsdHNbMF0ubWVzc2FnZXM7XG5cbiAgICAgIGV4cGVjdChtZXNzYWdlcykudG9IYXZlTGVuZ3RoKDApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgndmFsaWRhdGUtcGxhbmV0YXJ5LXBvc2l0aW9uLXN0cnVjdHVyZSBydWxlJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBlcnJvciB3aGVuIHBsYW5ldGFyeSBwb3NpdGlvbiBtaXNzaW5nIHJlcXVpcmVkIHByb3BlcnRpZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb2RlID0gYFxuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHtcbiAgICAgICAgICBzaWduOiAnYXJpZXMnLFxuICAgICAgICAgIGRlZ3JlZTogMTVcbiAgICAgICAgICAvLyBNaXNzaW5nIGV4YWN0TG9uZ2l0dWRlIGFuZCBpc1JldHJvZ3JhZGVcbiAgICAgICAgfTtcbiAgICAgIGA7XG5cbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBlc2xpbnQubGludFRleHQoY29kZSwgeyBmaWxlUGF0aDogJ3Rlc3QudHMnIH0pO1xuICAgICAgY29uc3QgbWVzc2FnZXMgPSByZXN1bHRzWzBdLm1lc3NhZ2VzO1xuXG4gICAgICBleHBlY3QobWVzc2FnZXMpLnRvSGF2ZUxlbmd0aCgxKTtcbiAgICAgIGV4cGVjdChtZXNzYWdlc1swXS5ydWxlSWQpLnRvQmUoJ2FzdHJvbG9naWNhbC92YWxpZGF0ZS1wbGFuZXRhcnktcG9zaXRpb24tc3RydWN0dXJlJyk7XG4gICAgICBleHBlY3QobWVzc2FnZXNbMF0ubWVzc2FnZSkudG9Db250YWluKCdtaXNzaW5nIHJlcXVpcmVkIHByb3BlcnRpZXMnKTtcbiAgICAgIGV4cGVjdChtZXNzYWdlc1swXS5tZXNzYWdlKS50b0NvbnRhaW4oJ2V4YWN0TG9uZ2l0dWRlJyk7XG4gICAgICBleHBlY3QobWVzc2FnZXNbMF0ubWVzc2FnZSkudG9Db250YWluKCdpc1JldHJvZ3JhZGUnKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBwYXNzIHdoZW4gcGxhbmV0YXJ5IHBvc2l0aW9uIGhhcyBhbGwgcmVxdWlyZWQgcHJvcGVydGllcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGNvZGUgPSBgXG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0ge1xuICAgICAgICAgIHNpZ246ICdhcmllcycsXG4gICAgICAgICAgZGVncmVlOiAxNS41LFxuICAgICAgICAgIGV4YWN0TG9uZ2l0dWRlOiAxNS41LFxuICAgICAgICAgIGlzUmV0cm9ncmFkZTogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgIGA7XG5cbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBlc2xpbnQubGludFRleHQoY29kZSwgeyBmaWxlUGF0aDogJ3Rlc3QudHMnIH0pO1xuICAgICAgY29uc3QgbWVzc2FnZXMgPSByZXN1bHRzWzBdLm1lc3NhZ2VzO1xuXG4gICAgICBleHBlY3QobWVzc2FnZXMpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBub3QgZmxhZyBub24tcGxhbmV0YXJ5IG9iamVjdHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb2RlID0gYFxuICAgICAgICBjb25zdCBVTlVTRURfY29uZmlnID0ge1xuICAgICAgICAgIHRpbWVvdXQ6IDUwMDAsXG4gICAgICAgICAgcmV0cmllczogM1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IFVOVVNFRF91c2VyID0ge1xuICAgICAgICAgIG5hbWU6ICdKb2huJyxcbiAgICAgICAgICBhZ2U6IDMwXG4gICAgICAgIH07XG4gICAgICBgO1xuXG4gICAgICBjb25zdCByZXN1bHRzID0gZXNsaW50LmxpbnRUZXh0KGNvZGUsIHsgZmlsZVBhdGg6ICd0ZXN0LnRzJyB9KTtcbiAgICAgIGNvbnN0IG1lc3NhZ2VzID0gcmVzdWx0c1swXS5tZXNzYWdlcztcblxuICAgICAgZXhwZWN0KG1lc3NhZ2VzKS50b0hhdmVMZW5ndGgoMCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCd2YWxpZGF0ZS1lbGVtZW50YWwtcHJvcGVydGllcyBydWxlJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBlcnJvciB3aGVuIGVsZW1lbnRhbCBwcm9wZXJ0aWVzIG1pc3NpbmcgcmVxdWlyZWQgZWxlbWVudHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb2RlID0gYFxuICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICAgIEZpcmU6IDAuOCxcbiAgICAgICAgICBXYXRlcjogMC4yXG4gICAgICAgICAgLy8gTWlzc2luZyBFYXJ0aCBhbmQgQWlyXG4gICAgICAgIH07XG4gICAgICBgO1xuXG4gICAgICBjb25zdCByZXN1bHRzID0gZXNsaW50LmxpbnRUZXh0KGNvZGUsIHsgZmlsZVBhdGg6ICd0ZXN0LnRzJyB9KTtcbiAgICAgIGNvbnN0IG1lc3NhZ2VzID0gcmVzdWx0c1swXS5tZXNzYWdlcztcblxuICAgICAgZXhwZWN0KG1lc3NhZ2VzKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgICBleHBlY3QobWVzc2FnZXNbMF0ucnVsZUlkKS50b0JlKCdhc3Ryb2xvZ2ljYWwvdmFsaWRhdGUtZWxlbWVudGFsLXByb3BlcnRpZXMnKTtcbiAgICAgIGV4cGVjdChtZXNzYWdlc1swXS5tZXNzYWdlKS50b0NvbnRhaW4oJ21pc3NpbmcgcmVxdWlyZWQgZWxlbWVudHMnKTtcbiAgICAgIGV4cGVjdChtZXNzYWdlc1swXS5tZXNzYWdlKS50b0NvbnRhaW4oJ0VhcnRoJyk7XG4gICAgICBleHBlY3QobWVzc2FnZXNbMF0ubWVzc2FnZSkudG9Db250YWluKCdBaXInKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBlcnJvciB3aGVuIHVzaW5nIGludmFsaWQgZWxlbWVudCBuYW1lcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGNvZGUgPSBgXG4gICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgRmlyZTogMC41LFxuICAgICAgICAgIFdhdGVyOiAwLjMsXG4gICAgICAgICAgRWFydGg6IDAuMSxcbiAgICAgICAgICBXaW5kOiAwLjEgLy8gU2hvdWxkIGJlIEFpclxuICAgICAgICB9O1xuICAgICAgYDtcblxuICAgICAgY29uc3QgcmVzdWx0cyA9IGVzbGludC5saW50VGV4dChjb2RlLCB7IGZpbGVQYXRoOiAndGVzdC50cycgfSk7XG4gICAgICBjb25zdCBtZXNzYWdlcyA9IHJlc3VsdHNbMF0ubWVzc2FnZXM7XG5cbiAgICAgIGV4cGVjdChtZXNzYWdlcykudG9IYXZlTGVuZ3RoKDEpO1xuICAgICAgZXhwZWN0KG1lc3NhZ2VzWzBdLnJ1bGVJZCkudG9CZSgnYXN0cm9sb2dpY2FsL3ZhbGlkYXRlLWVsZW1lbnRhbC1wcm9wZXJ0aWVzJyk7XG4gICAgICBleHBlY3QobWVzc2FnZXNbMF0ubWVzc2FnZSkudG9Db250YWluKCdJbnZhbGlkIGVsZW1lbnQgbmFtZXMnKTtcbiAgICAgIGV4cGVjdChtZXNzYWdlc1swXS5tZXNzYWdlKS50b0NvbnRhaW4oJ1dpbmQnKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBlcnJvciB3aGVuIGVsZW1lbnQgdmFsdWVzIGFyZSBvdXQgb2YgcmFuZ2UnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb2RlID0gYFxuICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICAgIEZpcmU6IDEuNSwgLy8gVG9vIGhpZ2hcbiAgICAgICAgICBXYXRlcjogLTAuMSwgLy8gVG9vIGxvd1xuICAgICAgICAgIEVhcnRoOiAwLjMsXG4gICAgICAgICAgQWlyOiAwLjJcbiAgICAgICAgfTtcbiAgICAgIGA7XG5cbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBlc2xpbnQubGludFRleHQoY29kZSwgeyBmaWxlUGF0aDogJ3Rlc3QudHMnIH0pO1xuICAgICAgY29uc3QgbWVzc2FnZXMgPSByZXN1bHRzWzBdLm1lc3NhZ2VzO1xuXG4gICAgICBleHBlY3QobWVzc2FnZXMpLnRvSGF2ZUxlbmd0aCgyKTtcbiAgICAgIGV4cGVjdChtZXNzYWdlcy5zb21lKG0gPT4gbS5tZXNzYWdlLmluY2x1ZGVzKCcxLjUnKSkpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QobWVzc2FnZXMuc29tZShtID0+IG0ubWVzc2FnZS5pbmNsdWRlcygnLTAuMScpKSkudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBwYXNzIHdoZW4gZWxlbWVudGFsIHByb3BlcnRpZXMgYXJlIHZhbGlkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29kZSA9IGBcbiAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IHtcbiAgICAgICAgICBGaXJlOiAwLjcsXG4gICAgICAgICAgV2F0ZXI6IDAuMSxcbiAgICAgICAgICBFYXJ0aDogMC4xLFxuICAgICAgICAgIEFpcjogMC4xXG4gICAgICAgIH07XG4gICAgICBgO1xuXG4gICAgICBjb25zdCByZXN1bHRzID0gZXNsaW50LmxpbnRUZXh0KGNvZGUsIHsgZmlsZVBhdGg6ICd0ZXN0LnRzJyB9KTtcbiAgICAgIGNvbnN0IG1lc3NhZ2VzID0gcmVzdWx0c1swXS5tZXNzYWdlcztcblxuICAgICAgZXhwZWN0KG1lc3NhZ2VzKS50b0hhdmVMZW5ndGgoMCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdyZXF1aXJlLXRyYW5zaXQtZGF0ZS12YWxpZGF0aW9uIHJ1bGUnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIHdhcm4gd2hlbiBhc3Ryb2xvZ2ljYWwgZmlsZSBsYWNrcyB2YWxpZGF0aW9uIGltcG9ydCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGNvZGUgPSBgXG4gICAgICAgIC8vIFRoaXMgaXMgaW4gYSBjYWxjdWxhdGlvbnMgZmlsZSBidXQgaGFzIG5vIHZhbGlkYXRpb25cbiAgICAgICAgZnVuY3Rpb24gY2FsY3VsYXRlUGxhbmV0YXJ5SW5mbHVlbmNlKCkge1xuICAgICAgICAgIHJldHVybiB7IGluZmx1ZW5jZTogMC44IH07XG4gICAgICAgIH1cbiAgICAgIGA7XG5cbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBlc2xpbnQubGludFRleHQoY29kZSwge1xuICAgICAgICBmaWxlUGF0aDogJ3NyYy9jYWxjdWxhdGlvbnMvcGxhbmV0YXJ5LnRzJyxcbiAgICAgIH0pO1xuICAgICAgY29uc3QgbWVzc2FnZXMgPSByZXN1bHRzWzBdLm1lc3NhZ2VzO1xuXG4gICAgICBleHBlY3QobWVzc2FnZXMpLnRvSGF2ZUxlbmd0aCgxKTtcbiAgICAgIGV4cGVjdChtZXNzYWdlc1swXS5ydWxlSWQpLnRvQmUoJ2FzdHJvbG9naWNhbC9yZXF1aXJlLXRyYW5zaXQtZGF0ZS12YWxpZGF0aW9uJyk7XG4gICAgICBleHBlY3QobWVzc2FnZXNbMF0ubWVzc2FnZSkudG9Db250YWluKCdzaG91bGQgaW1wb3J0IHRyYW5zaXQgdmFsaWRhdGlvbiB1dGlsaXRpZXMnKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCB3YXJuIHdoZW4gdmFsaWRhdGlvbiBpcyBpbXBvcnRlZCBidXQgbm90IHVzZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb2RlID0gYFxuICAgICAgICBpbXBvcnQgeyB2YWxpZGF0ZVRyYW5zaXREYXRlIH0gZnJvbSAnQC91dGlscy9hc3Ryb2xvZ3kvdHJhbnNpdFZhbGlkYXRpb24nO1xuXG4gICAgICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZVBsYW5ldGFyeUluZmx1ZW5jZSgpIHtcbiAgICAgICAgICAvLyBWYWxpZGF0aW9uIGltcG9ydGVkIGJ1dCBub3QgY2FsbGVkXG4gICAgICAgICAgcmV0dXJuIHsgaW5mbHVlbmNlOiAwLjggfTtcbiAgICAgICAgfVxuICAgICAgYDtcblxuICAgICAgY29uc3QgcmVzdWx0cyA9IGVzbGludC5saW50VGV4dChjb2RlLCB7XG4gICAgICAgIGZpbGVQYXRoOiAnc3JjL2NhbGN1bGF0aW9ucy9wbGFuZXRhcnkudHMnLFxuICAgICAgfSk7XG4gICAgICBjb25zdCBtZXNzYWdlcyA9IHJlc3VsdHNbMF0ubWVzc2FnZXM7XG5cbiAgICAgIGV4cGVjdChtZXNzYWdlcykudG9IYXZlTGVuZ3RoKDEpO1xuICAgICAgZXhwZWN0KG1lc3NhZ2VzWzBdLnJ1bGVJZCkudG9CZSgnYXN0cm9sb2dpY2FsL3JlcXVpcmUtdHJhbnNpdC1kYXRlLXZhbGlkYXRpb24nKTtcbiAgICAgIGV4cGVjdChtZXNzYWdlc1swXS5tZXNzYWdlKS50b0NvbnRhaW4oJ0NvbnNpZGVyIGFkZGluZyB0cmFuc2l0IGRhdGUgdmFsaWRhdGlvbiBjYWxscycpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHBhc3Mgd2hlbiB2YWxpZGF0aW9uIGlzIHByb3Blcmx5IHVzZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb2RlID0gYFxuICAgICAgICBpbXBvcnQgeyB2YWxpZGF0ZVRyYW5zaXREYXRlIH0gZnJvbSAnQC91dGlscy9hc3Ryb2xvZ3kvdHJhbnNpdFZhbGlkYXRpb24nO1xuXG4gICAgICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZVBsYW5ldGFyeUluZmx1ZW5jZShwbGFuZXQsIGRhdGUpIHtcbiAgICAgICAgICBjb25zdCBpc1ZhbGlkID0gdmFsaWRhdGVUcmFuc2l0RGF0ZShwbGFuZXQsIGRhdGUsICdhcmllcycsIHRyYW5zaXREYXRlcyk7XG4gICAgICAgICAgcmV0dXJuIHsgaW5mbHVlbmNlOiBpc1ZhbGlkID8gMC44IDogMC41IH07XG4gICAgICAgIH1cbiAgICAgIGA7XG5cbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBlc2xpbnQubGludFRleHQoY29kZSwge1xuICAgICAgICBmaWxlUGF0aDogJ3NyYy9jYWxjdWxhdGlvbnMvcGxhbmV0YXJ5LnRzJyxcbiAgICAgIH0pO1xuICAgICAgY29uc3QgbWVzc2FnZXMgPSByZXN1bHRzWzBdLm1lc3NhZ2VzO1xuXG4gICAgICBleHBlY3QobWVzc2FnZXMpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBub3QgZmxhZyBub24tYXN0cm9sb2dpY2FsIGZpbGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29kZSA9IGBcbiAgICAgICAgZnVuY3Rpb24gcmVndWxhckZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB7IHJlc3VsdDogJ3N1Y2Nlc3MnIH07XG4gICAgICAgIH1cbiAgICAgIGA7XG5cbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBlc2xpbnQubGludFRleHQoY29kZSwge1xuICAgICAgICBmaWxlUGF0aDogJ3NyYy9jb21wb25lbnRzL0J1dHRvbi50c3gnLFxuICAgICAgfSk7XG4gICAgICBjb25zdCBtZXNzYWdlcyA9IHJlc3VsdHNbMF0ubWVzc2FnZXM7XG5cbiAgICAgIGV4cGVjdChtZXNzYWdlcykudG9IYXZlTGVuZ3RoKDApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgncHJlc2VydmUtZmFsbGJhY2stdmFsdWVzIHJ1bGUnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGVycm9yIHdoZW4gZmFsbGJhY2sgdmFyaWFibGUgYXNzaWduZWQgbnVsbCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGNvZGUgPSBgXG4gICAgICAgIGxldCBGQUxMQkFDS19QT1NJVElPTlMgPSBudWxsOyAvLyBUaGlzIHNob3VsZCBlcnJvclxuICAgICAgICBjb25zdCBSRUxJQUJMRV9EQVRBID0gdW5kZWZpbmVkOyAvLyBUaGlzIHNob3VsZCBlcnJvclxuICAgICAgYDtcblxuICAgICAgY29uc3QgcmVzdWx0cyA9IGVzbGludC5saW50VGV4dChjb2RlLCB7IGZpbGVQYXRoOiAndGVzdC50cycgfSk7XG4gICAgICBjb25zdCBtZXNzYWdlcyA9IHJlc3VsdHNbMF0ubWVzc2FnZXM7XG5cbiAgICAgIGV4cGVjdChtZXNzYWdlcykudG9IYXZlTGVuZ3RoKDIpO1xuICAgICAgZXhwZWN0KG1lc3NhZ2VzWzBdLnJ1bGVJZCkudG9CZSgnYXN0cm9sb2dpY2FsL3ByZXNlcnZlLWZhbGxiYWNrLXZhbHVlcycpO1xuICAgICAgZXhwZWN0KG1lc3NhZ2VzWzFdLnJ1bGVJZCkudG9CZSgnYXN0cm9sb2dpY2FsL3ByZXNlcnZlLWZhbGxiYWNrLXZhbHVlcycpO1xuICAgICAgZXhwZWN0KG1lc3NhZ2VzLnNvbWUobSA9PiBtLm1lc3NhZ2UuaW5jbHVkZXMoJ0ZBTExCQUNLX1BPU0lUSU9OUycpKSkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChtZXNzYWdlcy5zb21lKG0gPT4gbS5tZXNzYWdlLmluY2x1ZGVzKCdSRUxJQUJMRV9EQVRBJykpKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGVycm9yIHdoZW4gZmFsbGJhY2sgdmFyaWFibGUgcmVhc3NpZ25lZCB0byBudWxsJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29kZSA9IGBcbiAgICAgICAgbGV0IE1BUkNIMjAyNV9QT1NJVElPTlMgPSB7IHN1bjogeyBzaWduOiAnYXJpZXMnIH0gfTtcbiAgICAgICAgTUFSQ0gyMDI1X1BPU0lUSU9OUyA9IG51bGw7IC8vIFRoaXMgc2hvdWxkIGVycm9yXG4gICAgICBgO1xuXG4gICAgICBjb25zdCByZXN1bHRzID0gZXNsaW50LmxpbnRUZXh0KGNvZGUsIHsgZmlsZVBhdGg6ICd0ZXN0LnRzJyB9KTtcbiAgICAgIGNvbnN0IG1lc3NhZ2VzID0gcmVzdWx0c1swXS5tZXNzYWdlcztcblxuICAgICAgZXhwZWN0KG1lc3NhZ2VzKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgICBleHBlY3QobWVzc2FnZXNbMF0ucnVsZUlkKS50b0JlKCdhc3Ryb2xvZ2ljYWwvcHJlc2VydmUtZmFsbGJhY2stdmFsdWVzJyk7XG4gICAgICBleHBlY3QobWVzc2FnZXNbMF0ubWVzc2FnZSkudG9Db250YWluKCdzaG91bGQgbm90IGJlIGFzc2lnbmVkIG51bGwnKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBhbGxvdyB2YWxpZCBmYWxsYmFjayBhc3NpZ25tZW50cycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGNvZGUgPSBgXG4gICAgICAgIGNvbnN0IEZBTExCQUNLX1BPU0lUSU9OUyA9IHtcbiAgICAgICAgICBzdW46IHsgc2lnbjogJ2FyaWVzJywgZGVncmVlOiA4LjUgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGxldCBSRUxJQUJMRV9EQVRBID0gZ2V0UmVsaWFibGVEYXRhXG4gICAgICAgIFJFTElBQkxFX0RBVEEgPSB7IHVwZGF0ZWQ6IHRydWUgfTtcbiAgICAgIGA7XG5cbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBlc2xpbnQubGludFRleHQoY29kZSwgeyBmaWxlUGF0aDogJ3Rlc3QudHMnIH0pO1xuICAgICAgY29uc3QgbWVzc2FnZXMgPSByZXN1bHRzWzBdLm1lc3NhZ2VzO1xuXG4gICAgICBleHBlY3QobWVzc2FnZXMpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBub3QgZmxhZyBub24tZmFsbGJhY2sgdmFyaWFibGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29kZSA9IGBcbiAgICAgICAgbGV0IHJlZ3VsYXJWYXJpYWJsZSA9IG51bGw7XG4gICAgICAgIGNvbnN0IGFub3RoZXJWYXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJlZ3VsYXJWYXJpYWJsZSA9IG51bGw7XG4gICAgICBgO1xuXG4gICAgICBjb25zdCByZXN1bHRzID0gZXNsaW50LmxpbnRUZXh0KGNvZGUsIHsgZmlsZVBhdGg6ICd0ZXN0LnRzJyB9KTtcbiAgICAgIGNvbnN0IG1lc3NhZ2VzID0gcmVzdWx0c1swXS5tZXNzYWdlcztcblxuICAgICAgZXhwZWN0KG1lc3NhZ2VzKS50b0hhdmVMZW5ndGgoMCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdJbnRlZ3JhdGlvbiB3aXRoIGV4aXN0aW5nIEVTTGludCBjb25maWd1cmF0aW9uJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCB3b3JrIHdpdGggVHlwZVNjcmlwdCBmaWxlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGNvZGUgPSBgXG4gICAgICAgIGludGVyZmFjZSBQbGFuZXRhcnlQb3NpdGlvbiB7XG4gICAgICAgICAgc2lnbjogc3RyaW5nO1xuICAgICAgICAgIGRlZ3JlZTogbnVtYmVyO1xuICAgICAgICAgIGV4YWN0TG9uZ2l0dWRlOiBudW1iZXI7XG4gICAgICAgICAgaXNSZXRyb2dyYWRlOiBib29sZWFuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcG9zaXRpb246IFBsYW5ldGFyeVBvc2l0aW9uID0ge1xuICAgICAgICAgIHNpZ246ICdhcmllcycsXG4gICAgICAgICAgZGVncmVlOiAxNS41LFxuICAgICAgICAgIGV4YWN0TG9uZ2l0dWRlOiAxNS41LFxuICAgICAgICAgIGlzUmV0cm9ncmFkZTogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgIGA7XG5cbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBlc2xpbnQubGludFRleHQoY29kZSwgeyBmaWxlUGF0aDogJ3Rlc3QudHMnIH0pO1xuICAgICAgY29uc3QgbWVzc2FnZXMgPSByZXN1bHRzWzBdLm1lc3NhZ2VzO1xuXG4gICAgICBleHBlY3QobWVzc2FnZXMpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCB3b3JrIHdpdGggUmVhY3QgY29tcG9uZW50cycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGNvZGUgPSBgXG4gICAgICAgIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbiAgICAgICAgaW50ZXJmYWNlIFByb3BzIHtcbiAgICAgICAgICBlbGVtZW50YWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBGaXJlOiBudW1iZXI7XG4gICAgICAgICAgICBXYXRlcjogbnVtYmVyO1xuICAgICAgICAgICAgRWFydGg6IG51bWJlcjtcbiAgICAgICAgICAgIEFpcjogbnVtYmVyO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBFbGVtZW50YWxEaXNwbGF5OiBSZWFjdC5GQzxQcm9wcz4gPSAoeyBlbGVtZW50YWxQcm9wZXJ0aWVzIH0pID0+IHtcbiAgICAgICAgICByZXR1cm4gPGRpdj5FbGVtZW50YWwgZGlzcGxheTwvZGl2PjtcbiAgICAgICAgfTtcbiAgICAgIGA7XG5cbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBlc2xpbnQubGludFRleHQoY29kZSwgeyBmaWxlUGF0aDogJ3Rlc3QudHN4JyB9KTtcbiAgICAgIGNvbnN0IG1lc3NhZ2VzID0gcmVzdWx0c1swXS5tZXNzYWdlcztcblxuICAgICAgZXhwZWN0KG1lc3NhZ2VzKS50b0hhdmVMZW5ndGgoMCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdSdWxlIHBlcmZvcm1hbmNlIGFuZCBlZGdlIGNhc2VzJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgbGFyZ2UgZmlsZXMgZWZmaWNpZW50bHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBsYXJnZUNvZGUgPSBgXG4gICAgICAgICR7QXJyYXkoMTAwKVxuICAgICAgICAgIC5maWxsKDApXG4gICAgICAgICAgLm1hcChcbiAgICAgICAgICAgIChfLCBpKSA9PiBgXG4gICAgICAgICAgY29uc3QgcG9zaXRpb24ke2l9ID0ge1xuICAgICAgICAgICAgc2lnbjogJ2FyaWVzJyxcbiAgICAgICAgICAgIGRlZ3JlZTogJHtpfSxcbiAgICAgICAgICAgIGV4YWN0TG9uZ2l0dWRlOiAke2l9LFxuICAgICAgICAgICAgaXNSZXRyb2dyYWRlOiBmYWxzZVxuICAgICAgICAgIH07XG4gICAgICAgIGAsXG4gICAgICAgICAgKVxuICAgICAgICAgIC5qb2luKCdcXG4nKX1cbiAgICAgIGA7XG5cbiAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgICBjb25zdCByZXN1bHRzID0gZXNsaW50LmxpbnRUZXh0KGxhcmdlQ29kZSwgeyBmaWxlUGF0aDogJ3Rlc3QudHMnIH0pO1xuICAgICAgY29uc3QgZW5kVGltZSA9IERhdGUubm93KCk7XG5cbiAgICAgIGV4cGVjdChlbmRUaW1lIC0gc3RhcnRUaW1lKS50b0JlTGVzc1RoYW4oMTAwMCk7IC8vIFNob3VsZCBjb21wbGV0ZSB3aXRoaW4gMSBzZWNvbmRcbiAgICAgIGV4cGVjdChyZXN1bHRzWzBdLm1lc3NhZ2VzKS50b0hhdmVMZW5ndGgoMCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIG1hbGZvcm1lZCBjb2RlIGdyYWNlZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtYWxmb3JtZWRDb2RlID0gYFxuICAgICAgICBjb25zdCBpbmNvbXBsZXRlID0ge1xuICAgICAgICAgIHNpZ246ICdhcmllcydcbiAgICAgICAgICAvLyBNaXNzaW5nIGNvbW1hIGFuZCBjbG9zaW5nIGJyYWNlXG4gICAgICBgO1xuXG4gICAgICAvLyBUaGlzIHNob3VsZCBub3QgdGhyb3cgYW4gZXJyb3IsIGV2ZW4gd2l0aCBtYWxmb3JtZWQgY29kZVxuICAgICAgY29uc3QgcmVzdWx0cyA9IGVzbGludC5saW50VGV4dChtYWxmb3JtZWRDb2RlLCB7IGZpbGVQYXRoOiAndGVzdC50cycgfSk7XG5cbiAgICAgIC8vIEVTTGludCBzaG91bGQgaGFuZGxlIHN5bnRheCBlcnJvcnMsIG91ciBydWxlcyBzaG91bGQgbm90IGNyYXNoXG4gICAgICBleHBlY3QocmVzdWx0cykudG9CZURlZmluZWQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgbmVzdGVkIG9iamVjdHMgY29ycmVjdGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29kZSA9IGBcbiAgICAgICAgY29uc3QgVU5VU0VEX3BsYW5ldERhdGEgPSB7XG4gICAgICAgICAgbWVyY3VyeToge1xuICAgICAgICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgICAgICAgc2lnbjogJ2dlbWluaScsXG4gICAgICAgICAgICAgIGRlZ3JlZTogMTAuNSxcbiAgICAgICAgICAgICAgZXhhY3RMb25naXR1ZGU6IDcwLjUsXG4gICAgICAgICAgICAgIGlzUmV0cm9ncmFkZTogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgRmlyZTogMC4zLFxuICAgICAgICAgICAgICBXYXRlcjogMC4yLFxuICAgICAgICAgICAgICBFYXJ0aDogMC4yLFxuICAgICAgICAgICAgICBBaXI6IDAuM1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIGA7XG5cbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBlc2xpbnQubGludFRleHQoY29kZSwgeyBmaWxlUGF0aDogJ3Rlc3QudHMnIH0pO1xuICAgICAgY29uc3QgbWVzc2FnZXMgPSByZXN1bHRzWzBdLm1lc3NhZ2VzO1xuXG4gICAgICBleHBlY3QobWVzc2FnZXMpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==