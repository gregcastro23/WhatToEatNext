{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/__tests__/integration/PhaseExecution.integration.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/__tests__/integration/PhaseExecution.integration.test.ts"],"sourcesContent":["/**\n * Integration Tests for Phase Execution Workflows\n * Perfect Codebase Campaign - End-to-End Phase Testing\n */\n\nimport { CampaignController } from '../../CampaignController';\nimport { SafetyProtocol } from '../../SafetyProtocol';\nimport { ProgressTracker } from '../../ProgressTracker';\nimport {\n  CampaignConfig,\n  CampaignPhase,\n  SafetySettings,\n  SafetyLevel,\n  PhaseStatus,\n  CorruptionSeverity,\n  RecoveryAction\n} from '../../../../types/campaign';\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\n\n// Mock dependencies\njest.mock('child_process');\njest.mock('fs');\n\nconst mockExecSync = execSync as jest.MockedFunction<typeof execSync>;\nconst mockFs = fs as jest.Mocked<typeof fs>;\n\ndescribe('Phase Execution Integration Tests', () => {\n  let campaignController: CampaignController;\n  let safetyProtocol: SafetyProtocol;\n  let progressTracker: ProgressTracker;\n  let mockConfig: CampaignConfig;\n  let mockSafetySettings: SafetySettings;\n\n  beforeEach(() => {\n    // Setup mock safety settings\n    mockSafetySettings = {\n      maxFilesPerBatch: 25,\n      buildValidationFrequency: 5,\n      testValidationFrequency: 10,\n      corruptionDetectionEnabled: true,\n      automaticRollbackEnabled: true,\n      stashRetentionDays: 7\n    };\n\n    // Setup mock campaign configuration\n    mockConfig = {\n      phases: [\n        {\n          id: 'phase1',\n          name: 'TypeScript Error Elimination',\n          description: 'Eliminate all TypeScript compilation errors',\n          tools: [\n            {\n              scriptPath: 'scripts/typescript-fixes/fix-typescript-errors-enhanced-v3.js',\n              parameters: { maxFiles: 15, autoFix: true, validateSafety: true },\n              batchSize: 15,\n              safetyLevel: SafetyLevel.MAXIMUM\n            }\n          ],\n          successCriteria: {\n            typeScriptErrors: 0\n          },\n          safetyCheckpoints: []\n        },\n        {\n          id: 'phase2',\n          name: 'Linting Excellence Achievement',\n          description: 'Eliminate all linting warnings',\n          tools: [\n            {\n              scriptPath: 'scripts/typescript-fixes/fix-explicit-any-systematic.js',\n              parameters: { maxFiles: 25, autoFix: true },\n              batchSize: 25,\n              safetyLevel: SafetyLevel.HIGH\n            }\n          ],\n          successCriteria: {\n            lintingWarnings: 0\n          },\n          safetyCheckpoints: []\n        }\n      ],\n      safetySettings: mockSafetySettings,\n      progressTargets: {\n        typeScriptErrors: 0,\n        lintingWarnings: 0,\n        buildTime: 10,\n        enterpriseSystems: 200\n      },\n      toolConfiguration: {\n        enhancedErrorFixer: 'scripts/typescript-fixes/fix-typescript-errors-enhanced-v3.js',\n        explicitAnyFixer: 'scripts/typescript-fixes/fix-explicit-any-systematic.js',\n        unusedVariablesFixer: 'scripts/typescript-fixes/fix-unused-variables-enhanced.js',\n        consoleStatementFixer: 'scripts/lint-fixes/fix-console-statements-only.js'\n      }\n    };\n\n    // Initialize components\n    campaignController = new CampaignController(mockConfig);\n    safetyProtocol = new SafetyProtocol(mockSafetySettings);\n    progressTracker = new ProgressTracker();\n\n    // Reset mocks\n    jest.clearAllMocks();\n    \n    // Default mock implementations\n    mockExecSync.mockReturnValue('');\n    mockFs.existsSync.mockReturnValue(true);\n    mockFs.readFileSync.mockReturnValue('valid content');\n    mockFs.writeFileSync.mockImplementation(() => {});\n  });\n\n  describe('Complete Phase 1 Execution Workflow', () => {\n    beforeEach(() => {\n      // Mock successful TypeScript error fixing\n      mockExecSync.mockImplementation((command) => {\n        const cmd = command.toString();\n        \n        if (cmd.includes('yarn tsc --noEmit --skipLibCheck')) {\n          return '0'; // No TypeScript errors after fixing\n        }\n        if (cmd.includes('yarn build')) {\n          return ''; // Successful build\n        }\n        if (cmd.includes('git stash push')) {\n          return ''; // Successful stash creation\n        }\n        if (cmd.includes('git stash list')) {\n          return 'stash@{0}: campaign-phase1-1-timestamp: Pre-phase checkpoint';\n        }\n        if (cmd.includes('git branch --show-current')) {\n          return 'main';\n        }\n        if (cmd.includes('git status --porcelain')) {\n          return ''; // Clean working directory\n        }\n        \n        return '';\n      });\n    });\n\n    it('should execute Phase 1 with complete workflow', async () => {\n      const phase1 = mockConfig.phases[0];\n      \n      // Mock progress tracking\n      jest.spyOn(progressTracker, 'getTypeScriptErrorCount')\n        .mockResolvedValueOnce(86) // Initial count\n        .mockResolvedValueOnce(0); // After fixing\n\n      // Execute phase\n      const result = await campaignController.executePhase(phase1);\n\n      expect(result.success).toBe(true);\n      expect(result.phaseId).toBe('phase1');\n      expect(result.executionTime).toBeGreaterThan(0);\n      expect(result.safetyEvents.length).toBeGreaterThan(0);\n    });\n\n    it('should create safety checkpoint before execution', async () => {\n      const phase1 = mockConfig.phases[0];\n      \n      await campaignController.executePhase(phase1);\n\n      // Verify git stash was created\n      expect(mockExecSync).toHaveBeenCalledWith(\n        expect.stringContaining('git stash push -u -m'),\n        expect.any(Object)\n      );\n    });\n\n    it('should validate phase completion successfully', async () => {\n      const phase1 = mockConfig.phases[0];\n      \n      // Mock zero TypeScript errors\n      jest.spyOn(progressTracker, 'getProgressMetrics').mockResolvedValue({\n        typeScriptErrors: { current: 0, target: 0, reduction: 86, percentage: 100 },\n        lintingWarnings: { current: 4506, target: 0, reduction: 0, percentage: 0 },\n        buildPerformance: { currentTime: 8.5, targetTime: 10, cacheHitRate: 0.8, memoryUsage: 45 },\n        enterpriseSystems: { current: 0, target: 200, transformedExports: 0 }\n      });\n\n      const validation = await campaignController.validatePhaseCompletion(phase1);\n\n      expect(validation.success).toBe(true);\n      expect(validation.errors).toEqual([]);\n    });\n\n    it('should generate comprehensive phase report', async () => {\n      const phase1 = mockConfig.phases[0];\n      \n      // Mock successful completion metrics\n      jest.spyOn(progressTracker, 'getProgressMetrics').mockResolvedValue({\n        typeScriptErrors: { current: 0, target: 0, reduction: 86, percentage: 100 },\n        lintingWarnings: { current: 4506, target: 0, reduction: 0, percentage: 0 },\n        buildPerformance: { currentTime: 8.5, targetTime: 10, cacheHitRate: 0.8, memoryUsage: 45 },\n        enterpriseSystems: { current: 0, target: 200, transformedExports: 0 }\n      });\n\n      const report = await campaignController.generatePhaseReport(phase1);\n\n      expect(report.phaseId).toBe('phase1');\n      expect(report.phaseName).toBe('TypeScript Error Elimination');\n      expect(report.status).toBe(PhaseStatus.COMPLETED);\n      expect(report.achievements).toContain('Zero TypeScript errors achieved');\n    });\n  });\n\n  describe('Complete Phase 2 Execution Workflow', () => {\n    beforeEach(() => {\n      // Mock successful linting warning fixing\n      mockExecSync.mockImplementation((command) => {\n        const cmd = command.toString();\n        \n        if (cmd.includes('yarn lint 2>&1 | grep -c \"warning\"')) {\n          return '0'; // No linting warnings after fixing\n        }\n        if (cmd.includes('yarn build')) {\n          return ''; // Successful build\n        }\n        if (cmd.includes('git stash push')) {\n          return ''; // Successful stash creation\n        }\n        if (cmd.includes('git stash list')) {\n          return 'stash@{0}: campaign-phase2-1-timestamp: Pre-phase checkpoint';\n        }\n        if (cmd.includes('git branch --show-current')) {\n          return 'main';\n        }\n        if (cmd.includes('git status --porcelain')) {\n          return ''; // Clean working directory\n        }\n        \n        return '';\n      });\n    });\n\n    it('should execute Phase 2 with complete workflow', async () => {\n      const phase2 = mockConfig.phases[1];\n      \n      // Mock progress tracking\n      jest.spyOn(progressTracker, 'getLintingWarningCount')\n        .mockResolvedValueOnce(4506) // Initial count\n        .mockResolvedValueOnce(0); // After fixing\n\n      // Execute phase\n      const result = await campaignController.executePhase(phase2);\n\n      expect(result.success).toBe(true);\n      expect(result.phaseId).toBe('phase2');\n      expect(result.executionTime).toBeGreaterThan(0);\n    });\n\n    it('should validate phase completion successfully', async () => {\n      const phase2 = mockConfig.phases[1];\n      \n      // Mock zero linting warnings\n      jest.spyOn(progressTracker, 'getProgressMetrics').mockResolvedValue({\n        typeScriptErrors: { current: 0, target: 0, reduction: 86, percentage: 100 },\n        lintingWarnings: { current: 0, target: 0, reduction: 4506, percentage: 100 },\n        buildPerformance: { currentTime: 8.5, targetTime: 10, cacheHitRate: 0.8, memoryUsage: 45 },\n        enterpriseSystems: { current: 0, target: 200, transformedExports: 0 }\n      });\n\n      const validation = await campaignController.validatePhaseCompletion(phase2);\n\n      expect(validation.success).toBe(true);\n      expect(validation.errors).toEqual([]);\n    });\n  });\n\n  describe('Multi-Phase Campaign Execution', () => {\n    it('should execute multiple phases in sequence', async () => {\n      // Mock progressive improvement\n      let tsErrorCount = 86;\n      let lintWarningCount = 4506;\n\n      jest.spyOn(progressTracker, 'getTypeScriptErrorCount').mockImplementation(async () => {\n        return tsErrorCount;\n      });\n\n      jest.spyOn(progressTracker, 'getLintingWarningCount').mockImplementation(async () => {\n        return lintWarningCount;\n      });\n\n      // Execute Phase 1\n      const phase1Result = await campaignController.executePhase(mockConfig.phases[0]);\n      tsErrorCount = 0; // Phase 1 eliminates TypeScript errors\n\n      expect(phase1Result.success).toBe(true);\n      expect(phase1Result.phaseId).toBe('phase1');\n\n      // Execute Phase 2\n      const phase2Result = await campaignController.executePhase(mockConfig.phases[1]);\n      lintWarningCount = 0; // Phase 2 eliminates linting warnings\n\n      expect(phase2Result.success).toBe(true);\n      expect(phase2Result.phaseId).toBe('phase2');\n\n      // Verify overall progress\n      const finalMetrics = await progressTracker.getProgressMetrics();\n      expect(finalMetrics.typeScriptErrors.current).toBe(0);\n      expect(finalMetrics.lintingWarnings.current).toBe(0);\n    });\n\n    it('should maintain safety protocols across phases', async () => {\n      // Track safety events across phases\n      const allSafetyEvents: any[] = [];\n\n      for (const phase of mockConfig.phases) {\n        const result = await campaignController.executePhase(phase);\n        allSafetyEvents.push(...result.safetyEvents);\n      }\n\n      // Verify safety events were recorded for each phase\n      expect(allSafetyEvents.length).toBeGreaterThan(0);\n      expect(allSafetyEvents.some(event => event.description.includes('phase1'))).toBe(true);\n      expect(allSafetyEvents.some(event => event.description.includes('phase2'))).toBe(true);\n    });\n  });\n\n  describe('Error Handling and Recovery', () => {\n    it('should handle tool execution failure gracefully', async () => {\n      const phase1 = mockConfig.phases[0];\n      \n      // Mock tool execution failure\n      jest.spyOn(campaignController as any, 'executeTool').mockRejectedValue(\n        new Error('Tool execution failed')\n      );\n\n      const result = await campaignController.executePhase(phase1);\n\n      expect(result.success).toBe(false);\n      expect(result.phaseId).toBe('phase1');\n      expect(result.filesProcessed).toBe(0);\n      expect(result.errorsFixed).toBe(0);\n    });\n\n    it('should trigger rollback on validation failure', async () => {\n      const phase1 = mockConfig.phases[0];\n      \n      // Mock validation failure\n      jest.spyOn(campaignController as any, 'validatePhaseProgress').mockResolvedValue({\n        success: false,\n        errors: ['Build validation failed'],\n        warnings: []\n      });\n\n      // Mock rollback\n      jest.spyOn(campaignController, 'rollbackToCheckpoint').mockResolvedValue();\n\n      await expect(campaignController.executePhase(phase1)).rejects.toThrow(\n        'Tool execution failed: Build validation failed'\n      );\n\n      expect(campaignController.rollbackToCheckpoint).toHaveBeenCalled();\n    });\n\n    it('should handle build failure during phase execution', async () => {\n      const phase1 = mockConfig.phases[0];\n      \n      // Mock build failure\n      mockExecSync.mockImplementation((command) => {\n        if (command.toString().includes('yarn build')) {\n          throw new Error('Build failed');\n        }\n        return '';\n      });\n\n      // Mock build validation failure\n      jest.spyOn(progressTracker, 'getBuildTime').mockResolvedValue(-1);\n\n      const result = await campaignController.executePhase(phase1);\n\n      // Should handle gracefully but may not succeed\n      expect(result.phaseId).toBe('phase1');\n    });\n  });\n\n  describe('Progress Tracking Integration', () => {\n    it('should track progress throughout phase execution', async () => {\n      const phase1 = mockConfig.phases[0];\n      \n      // Mock progressive improvement\n      jest.spyOn(progressTracker, 'getTypeScriptErrorCount')\n        .mockResolvedValueOnce(86) // Before\n        .mockResolvedValueOnce(50) // During\n        .mockResolvedValueOnce(0); // After\n\n      await campaignController.executePhase(phase1);\n\n      // Verify progress tracking was called\n      expect(progressTracker.getTypeScriptErrorCount).toHaveBeenCalledTimes(3);\n    });\n\n    it('should generate progress report after phase completion', async () => {\n      const phase1 = mockConfig.phases[0];\n      \n      await campaignController.executePhase(phase1);\n\n      const report = await progressTracker.generateProgressReport();\n\n      expect(report.campaignId).toBe('perfect-codebase-campaign');\n      expect(report.phases.length).toBeGreaterThan(0);\n      expect(report.overallProgress).toBeGreaterThanOrEqual(0);\n    });\n\n    it('should validate milestones after phase completion', async () => {\n      const phase1 = mockConfig.phases[0];\n      \n      // Mock successful phase completion\n      jest.spyOn(progressTracker, 'getProgressMetrics').mockResolvedValue({\n        typeScriptErrors: { current: 0, target: 0, reduction: 86, percentage: 100 },\n        lintingWarnings: { current: 4506, target: 0, reduction: 0, percentage: 0 },\n        buildPerformance: { currentTime: 8.5, targetTime: 10, cacheHitRate: 0.8, memoryUsage: 45 },\n        enterpriseSystems: { current: 0, target: 200, transformedExports: 0 }\n      });\n\n      await campaignController.executePhase(phase1);\n\n      const milestone = await progressTracker.validateMilestone('phase-1-complete');\n      expect(milestone).toBe(true);\n    });\n  });\n\n  describe('Safety Protocol Integration', () => {\n    it('should integrate safety protocols with phase execution', async () => {\n      const phase1 = mockConfig.phases[0];\n      \n      // Mock safety protocol operations\n      jest.spyOn(safetyProtocol, 'createStash').mockResolvedValue('test-stash-1');\n      jest.spyOn(safetyProtocol, 'detectCorruption').mockResolvedValue({\n        detectedFiles: [],\n        corruptionPatterns: [],\n        severity: CorruptionSeverity.LOW,\n        recommendedAction: RecoveryAction.CONTINUE\n      });\n\n      await campaignController.executePhase(phase1);\n\n      // Verify safety protocols were integrated\n      // Note: This would require actual integration between components\n      expect(phase1.tools.length).toBeGreaterThan(0);\n    });\n\n    it('should handle corruption detection during phase execution', async () => {\n      const phase1 = mockConfig.phases[0];\n      \n      // Mock corruption detection\n      jest.spyOn(safetyProtocol, 'detectCorruption').mockResolvedValue({\n        detectedFiles: ['corrupted-file.ts'],\n        corruptionPatterns: [{\n          pattern: 'MERGE_CONFLICT',\n          description: 'Git merge conflict markers detected',\n          files: ['corrupted-file.ts']\n        }],\n        severity: CorruptionSeverity.HIGH,\n        recommendedAction: RecoveryAction.ROLLBACK\n      });\n\n      // This would require actual integration to test properly\n      // For now, verify the safety protocol can detect corruption\n      const corruptionReport = await safetyProtocol.detectCorruption(['test-file.ts']);\n      expect(corruptionReport.detectedFiles).toContain('corrupted-file.ts');\n      expect(corruptionReport.severity).toBe(CorruptionSeverity.HIGH);\n    });\n  });\n\n  describe('Configuration Loading and Validation', () => {\n    it('should load and validate campaign configuration', async () => {\n      const config = await CampaignController.loadConfiguration();\n\n      expect(config.phases.length).toBeGreaterThan(0);\n      expect(config.safetySettings).toBeDefined();\n      expect(config.progressTargets).toBeDefined();\n      expect(config.toolConfiguration).toBeDefined();\n    });\n\n    it('should validate phase configuration', () => {\n      const phase = mockConfig.phases[0];\n\n      expect(phase.id).toBeDefined();\n      expect(phase.name).toBeDefined();\n      expect(phase.tools.length).toBeGreaterThan(0);\n      expect(phase.successCriteria).toBeDefined();\n    });\n\n    it('should validate tool configuration', () => {\n      const tool = mockConfig.phases[0].tools[0];\n\n      expect(tool.scriptPath).toBeDefined();\n      expect(tool.parameters).toBeDefined();\n      expect(tool.batchSize).toBeGreaterThan(0);\n      expect(tool.safetyLevel).toBeDefined();\n    });\n  });\n});"],"version":3}