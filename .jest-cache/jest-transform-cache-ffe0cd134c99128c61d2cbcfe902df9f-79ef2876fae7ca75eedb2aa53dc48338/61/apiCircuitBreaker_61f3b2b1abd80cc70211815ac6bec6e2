75b2c079d2f7b8bc8640a9b1f86cd50b
"use strict";
/**
 * Circuit Breaker for API calls
 * Prevents overwhelming a failing API with repeated requests
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.astrologizeApiCircuitBreaker = exports.CircuitBreaker = void 0;
var CircuitState;
(function (CircuitState) {
    CircuitState["CLOSED"] = "CLOSED";
    CircuitState["OPEN"] = "OPEN";
    CircuitState["HALF_OPEN"] = "HALF_OPEN";
})(CircuitState || (CircuitState = {}));
class CircuitBreaker {
    constructor(options = {}) {
        this.state = CircuitState.CLOSED;
        this.failureCount = 0;
        this.lastFailureTime = 0;
        this.options = {
            failureThreshold: 3,
            resetTimeout: 60000,
            monitoringWindow: 300000,
            ...options
        };
    }
    async call(fn, fallback) {
        if (this.state === CircuitState.OPEN) {
            if (Date.now() - this.lastFailureTime > this.options.resetTimeout) {
                this.state = CircuitState.HALF_OPEN;
                this.failureCount = 0;
            }
            else {
                if (fallback) {
                    return fallback();
                }
                throw new Error('Circuit breaker is OPEN');
            }
        }
        try {
            const result = await fn();
            this.onSuccess();
            return result;
        }
        catch (error) {
            this.onFailure();
            if (fallback) {
                return fallback();
            }
            throw error;
        }
    }
    onSuccess() {
        this.failureCount = 0;
        this.state = CircuitState.CLOSED;
    }
    onFailure() {
        this.failureCount++;
        this.lastFailureTime = Date.now();
        if (this.failureCount >= this.options.failureThreshold) {
            this.state = CircuitState.OPEN;
        }
    }
    getState() {
        return this.state;
    }
    reset() {
        this.state = CircuitState.CLOSED;
        this.failureCount = 0;
        this.lastFailureTime = 0;
    }
}
exports.CircuitBreaker = CircuitBreaker;
// Global circuit breaker for astrologize API
exports.astrologizeApiCircuitBreaker = new CircuitBreaker({
    failureThreshold: 1,
    resetTimeout: 60000,
    monitoringWindow: 300000 // 5 minutes
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy91dGlscy9hcGlDaXJjdWl0QnJlYWtlci50cyIsIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7QUFRSCxJQUFLLFlBSUo7QUFKRCxXQUFLLFlBQVk7SUFDZixpQ0FBaUIsQ0FBQTtJQUNqQiw2QkFBYSxDQUFBO0lBQ2IsdUNBQXVCLENBQUE7QUFDekIsQ0FBQyxFQUpJLFlBQVksS0FBWixZQUFZLFFBSWhCO0FBRUQsTUFBYSxjQUFjO0lBTXpCLFlBQVksVUFBMEMsRUFBRTtRQUxoRCxVQUFLLEdBQWlCLFlBQVksQ0FBQyxNQUFNLENBQUM7UUFDMUMsaUJBQVksR0FBRyxDQUFDLENBQUM7UUFDakIsb0JBQWUsR0FBRyxDQUFDLENBQUM7UUFJMUIsSUFBSSxDQUFDLE9BQU8sR0FBRztZQUNiLGdCQUFnQixFQUFFLENBQUM7WUFDbkIsWUFBWSxFQUFFLEtBQUs7WUFDbkIsZ0JBQWdCLEVBQUUsTUFBTTtZQUN4QixHQUFHLE9BQU87U0FDWCxDQUFDO0lBQ0osQ0FBQztJQUVELEtBQUssQ0FBQyxJQUFJLENBQUksRUFBb0IsRUFBRSxRQUFrQjtRQUNwRCxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssWUFBWSxDQUFDLElBQUksRUFBRTtZQUNwQyxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFO2dCQUNqRSxJQUFJLENBQUMsS0FBSyxHQUFHLFlBQVksQ0FBQyxTQUFTLENBQUM7Z0JBQ3BDLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxDQUFDO2FBQ3ZCO2lCQUFNO2dCQUNMLElBQUksUUFBUSxFQUFFO29CQUNaLE9BQU8sUUFBUSxFQUFFLENBQUM7aUJBQ25CO2dCQUNELE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQzthQUM1QztTQUNGO1FBRUQsSUFBSTtZQUNGLE1BQU0sTUFBTSxHQUFHLE1BQU0sRUFBRSxFQUFFLENBQUM7WUFDMUIsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ2pCLE9BQU8sTUFBTSxDQUFDO1NBQ2Y7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUVqQixJQUFJLFFBQVEsRUFBRTtnQkFDWixPQUFPLFFBQVEsRUFBRSxDQUFDO2FBQ25CO1lBRUQsTUFBTSxLQUFLLENBQUM7U0FDYjtJQUNILENBQUM7SUFFTyxTQUFTO1FBQ2YsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUM7UUFDdEIsSUFBSSxDQUFDLEtBQUssR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDO0lBQ25DLENBQUM7SUFFTyxTQUFTO1FBQ2YsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBRWxDLElBQUksSUFBSSxDQUFDLFlBQVksSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFO1lBQ3RELElBQUksQ0FBQyxLQUFLLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQztTQUNoQztJQUNILENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFFRCxLQUFLO1FBQ0gsSUFBSSxDQUFDLEtBQUssR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxlQUFlLEdBQUcsQ0FBQyxDQUFDO0lBQzNCLENBQUM7Q0FDRjtBQWxFRCx3Q0FrRUM7QUFFRCw2Q0FBNkM7QUFDaEMsUUFBQSw0QkFBNEIsR0FBRyxJQUFJLGNBQWMsQ0FBQztJQUM3RCxnQkFBZ0IsRUFBRSxDQUFDO0lBQ25CLFlBQVksRUFBRSxLQUFLO0lBQ25CLGdCQUFnQixFQUFFLE1BQU0sQ0FBQyxZQUFZO0NBQ3RDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvR3JlZ0Nhc3Ryby9EZXNrdG9wL1doYXRUb0VhdE5leHQvc3JjL3V0aWxzL2FwaUNpcmN1aXRCcmVha2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ2lyY3VpdCBCcmVha2VyIGZvciBBUEkgY2FsbHNcbiAqIFByZXZlbnRzIG92ZXJ3aGVsbWluZyBhIGZhaWxpbmcgQVBJIHdpdGggcmVwZWF0ZWQgcmVxdWVzdHNcbiAqL1xuXG5pbnRlcmZhY2UgQ2lyY3VpdEJyZWFrZXJPcHRpb25zIHtcbiAgZmFpbHVyZVRocmVzaG9sZDogbnVtYmVyO1xuICByZXNldFRpbWVvdXQ6IG51bWJlcjtcbiAgbW9uaXRvcmluZ1dpbmRvdzogbnVtYmVyO1xufVxuXG5lbnVtIENpcmN1aXRTdGF0ZSB7XG4gIENMT1NFRCA9ICdDTE9TRUQnLFxuICBPUEVOID0gJ09QRU4nLFxuICBIQUxGX09QRU4gPSAnSEFMRl9PUEVOJ1xufVxuXG5leHBvcnQgY2xhc3MgQ2lyY3VpdEJyZWFrZXIge1xuICBwcml2YXRlIHN0YXRlOiBDaXJjdWl0U3RhdGUgPSBDaXJjdWl0U3RhdGUuQ0xPU0VEO1xuICBwcml2YXRlIGZhaWx1cmVDb3VudCA9IDA7XG4gIHByaXZhdGUgbGFzdEZhaWx1cmVUaW1lID0gMDtcbiAgcHJpdmF0ZSBvcHRpb25zOiBDaXJjdWl0QnJlYWtlck9wdGlvbnM7XG5cbiAgY29uc3RydWN0b3Iob3B0aW9uczogUGFydGlhbDxDaXJjdWl0QnJlYWtlck9wdGlvbnM+ID0ge30pIHtcbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICBmYWlsdXJlVGhyZXNob2xkOiAzLFxuICAgICAgcmVzZXRUaW1lb3V0OiA2MDAwMCwgLy8gMSBtaW51dGVcbiAgICAgIG1vbml0b3JpbmdXaW5kb3c6IDMwMDAwMCwgLy8gNSBtaW51dGVzXG4gICAgICAuLi5vcHRpb25zXG4gICAgfTtcbiAgfVxuXG4gIGFzeW5jIGNhbGw8VD4oZm46ICgpID0+IFByb21pc2U8VD4sIGZhbGxiYWNrPzogKCkgPT4gVCk6IFByb21pc2U8VD4ge1xuICAgIGlmICh0aGlzLnN0YXRlID09PSBDaXJjdWl0U3RhdGUuT1BFTikge1xuICAgICAgaWYgKERhdGUubm93KCkgLSB0aGlzLmxhc3RGYWlsdXJlVGltZSA+IHRoaXMub3B0aW9ucy5yZXNldFRpbWVvdXQpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IENpcmN1aXRTdGF0ZS5IQUxGX09QRU47XG4gICAgICAgIHRoaXMuZmFpbHVyZUNvdW50ID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmYWxsYmFjaykge1xuICAgICAgICAgIHJldHVybiBmYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2lyY3VpdCBicmVha2VyIGlzIE9QRU4nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZm4oKTtcbiAgICAgIHRoaXMub25TdWNjZXNzKCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLm9uRmFpbHVyZSgpO1xuICAgICAgXG4gICAgICBpZiAoZmFsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIGZhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgb25TdWNjZXNzKCkge1xuICAgIHRoaXMuZmFpbHVyZUNvdW50ID0gMDtcbiAgICB0aGlzLnN0YXRlID0gQ2lyY3VpdFN0YXRlLkNMT1NFRDtcbiAgfVxuXG4gIHByaXZhdGUgb25GYWlsdXJlKCkge1xuICAgIHRoaXMuZmFpbHVyZUNvdW50Kys7XG4gICAgdGhpcy5sYXN0RmFpbHVyZVRpbWUgPSBEYXRlLm5vdygpO1xuXG4gICAgaWYgKHRoaXMuZmFpbHVyZUNvdW50ID49IHRoaXMub3B0aW9ucy5mYWlsdXJlVGhyZXNob2xkKSB7XG4gICAgICB0aGlzLnN0YXRlID0gQ2lyY3VpdFN0YXRlLk9QRU47XG4gICAgfVxuICB9XG5cbiAgZ2V0U3RhdGUoKTogQ2lyY3VpdFN0YXRlIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuc3RhdGUgPSBDaXJjdWl0U3RhdGUuQ0xPU0VEO1xuICAgIHRoaXMuZmFpbHVyZUNvdW50ID0gMDtcbiAgICB0aGlzLmxhc3RGYWlsdXJlVGltZSA9IDA7XG4gIH1cbn1cblxuLy8gR2xvYmFsIGNpcmN1aXQgYnJlYWtlciBmb3IgYXN0cm9sb2dpemUgQVBJXG5leHBvcnQgY29uc3QgYXN0cm9sb2dpemVBcGlDaXJjdWl0QnJlYWtlciA9IG5ldyBDaXJjdWl0QnJlYWtlcih7XG4gIGZhaWx1cmVUaHJlc2hvbGQ6IDEsIC8vIEZhaWwgZmFzdCBhZnRlciAxIGF0dGVtcHQgZm9yIGltbWVkaWF0ZSBmYWxsYmFja1xuICByZXNldFRpbWVvdXQ6IDYwMDAwLCAvLyAxIG1pbnV0ZSBiZWZvcmUgcmV0cnkgKGZhc3RlciByZWNvdmVyeSlcbiAgbW9uaXRvcmluZ1dpbmRvdzogMzAwMDAwIC8vIDUgbWludXRlc1xufSk7XG4iXSwidmVyc2lvbiI6M30=