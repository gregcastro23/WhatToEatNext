{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/BuildValidator.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/BuildValidator.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport { execSync } from 'child_process';\n\n/**\n * BuildValidator class for checking and repairing build artifacts\n * Implements requirements 3.1, 3.2, 3.3, 3.4, 3.5 from test system stabilization\n */\nexport class BuildValidator {\n  private readonly buildDir: string;\n  private readonly serverDir: string;\n  private readonly requiredManifests: string[];\n  private readonly logger: (message: string, ...args: any[]) => void;\n\n  constructor(buildDir = '.next', logger = console.log) {\n    this.buildDir = buildDir;\n    this.serverDir = path.join(buildDir, 'server');\n    this.logger = logger;\n    \n    // Required manifest files for Next.js build\n    this.requiredManifests = [\n      'pages-manifest.json',\n      'app-paths-manifest.json',\n      'next-font-manifest.json',\n      'middleware-manifest.json'\n    ];\n  }\n\n  /**\n   * Validates the build artifacts and checks for required files\n   * Requirement 3.2: Implement BuildValidator class to check for required build artifacts\n   */\n  async validateBuild(): Promise<BuildValidationResult> {\n    const result: BuildValidationResult = {\n      isValid: true,\n      missingFiles: [],\n      corruptedFiles: [],\n      repairActions: []\n    };\n\n    try {\n      // Check if build directory exists\n      if (!fs.existsSync(this.buildDir)) {\n        result.isValid = false;\n        result.missingFiles.push(this.buildDir);\n        result.repairActions.push({\n          type: 'create',\n          target: this.buildDir,\n          description: 'Create build directory'\n        });\n        return result;\n      }\n\n      // Check if server directory exists\n      if (!fs.existsSync(this.serverDir)) {\n        result.isValid = false;\n        result.missingFiles.push(this.serverDir);\n        result.repairActions.push({\n          type: 'create',\n          target: this.serverDir,\n          description: 'Create server directory'\n        });\n      }\n\n      // Check required manifest files\n      for (const manifest of this.requiredManifests) {\n        const manifestPath = path.join(this.serverDir, manifest);\n        \n        if (!fs.existsSync(manifestPath)) {\n          result.isValid = false;\n          result.missingFiles.push(manifestPath);\n          result.repairActions.push({\n            type: 'create',\n            target: manifestPath,\n            description: `Create missing manifest file: ${manifest}`\n          });\n        } else {\n          // Check if file is corrupted (empty or invalid JSON)\n          try {\n            const content = fs.readFileSync(manifestPath, 'utf8');\n            if (content.trim() === '') {\n              result.corruptedFiles.push(manifestPath);\n              result.repairActions.push({\n                type: 'fix',\n                target: manifestPath,\n                description: `Fix empty manifest file: ${manifest}`\n              });\n            } else if (manifest.endsWith('.json')) {\n              JSON.parse(content); // Validate JSON\n            }\n          } catch (error) {\n            result.isValid = false;\n            result.corruptedFiles.push(manifestPath);\n            result.repairActions.push({\n              type: 'fix',\n              target: manifestPath,\n              description: `Fix corrupted manifest file: ${manifest}`\n            });\n          }\n        }\n      }\n\n      // Check for essential build files\n      const essentialFiles = [\n        'build-manifest.json',\n        'app-build-manifest.json',\n        'react-loadable-manifest.json'\n      ];\n\n      for (const file of essentialFiles) {\n        const filePath = path.join(this.buildDir, file);\n        if (!fs.existsSync(filePath)) {\n          result.isValid = false;\n          result.missingFiles.push(filePath);\n          result.repairActions.push({\n            type: 'create',\n            target: filePath,\n            description: `Create missing build file: ${file}`\n          });\n        }\n      }\n\n      this.logger(`Build validation completed. Valid: ${result.isValid}, Missing: ${result.missingFiles.length}, Corrupted: ${result.corruptedFiles.length}`);\n      \n    } catch (error) {\n      this.logger('Build validation failed:', error);\n      result.isValid = false;\n    }\n\n    return result;\n  }\n\n  /**\n   * Repairs the build by creating missing manifest files with minimal content\n   * Requirement 3.3: Create missing manifest files with minimal content when needed\n   */\n  async repairBuild(): Promise<void> {\n    const validation = await this.validateBuild();\n    \n    if (validation.isValid) {\n      this.logger('Build is valid, no repairs needed');\n      return;\n    }\n\n    this.logger(`Starting build repair. ${validation.repairActions.length} actions to perform.`);\n\n    // Create directories if needed\n    if (!fs.existsSync(this.buildDir)) {\n      fs.mkdirSync(this.buildDir, { recursive: true });\n      this.logger(`Created build directory: ${this.buildDir}`);\n    }\n\n    if (!fs.existsSync(this.serverDir)) {\n      fs.mkdirSync(this.serverDir, { recursive: true });\n      this.logger(`Created server directory: ${this.serverDir}`);\n    }\n\n    // Create missing manifest files with minimal content\n    const manifestDefaults = this.getManifestDefaults();\n\n    for (const action of validation.repairActions) {\n      if (action.type === 'create' || action.type === 'fix') {\n        const filename = path.basename(action.target);\n        \n        if (manifestDefaults[filename]) {\n          fs.writeFileSync(action.target, JSON.stringify(manifestDefaults[filename], null, 2));\n          this.logger(`${action.type === 'create' ? 'Created' : 'Fixed'} ${filename}`);\n        }\n      }\n    }\n\n    this.logger('Build repair completed');\n  }\n\n  /**\n   * Attempts to rebuild the application with error recovery\n   * Requirement 3.4: Add build error recovery and retry mechanisms\n   */\n  async rebuildWithRecovery(maxRetries = 3): Promise<boolean> {\n    let attempt = 0;\n    \n    while (attempt < maxRetries) {\n      attempt++;\n      this.logger(`Build attempt ${attempt}/${maxRetries}`);\n      \n      try {\n        // Clean build directory before retry\n        if (attempt > 1) {\n          await this.cleanBuild();\n          await this.repairBuild();\n        }\n\n        // Attempt build\n        execSync('yarn build', { \n          stdio: 'pipe',\n          timeout: 300000 // 5 minute timeout\n        });\n        \n        // Validate build after completion\n        const validation = await this.validateBuild();\n        if (validation.isValid) {\n          this.logger(`Build successful on attempt ${attempt}`);\n          return true;\n        } else {\n          this.logger(`Build completed but validation failed on attempt ${attempt}`);\n          await this.repairBuild();\n        }\n        \n      } catch (error) {\n        this.logger(`Build failed on attempt ${attempt}:`, error);\n        \n        if (attempt < maxRetries) {\n          this.logger(`Retrying build in 5 seconds...`);\n          await new Promise(resolve => setTimeout(resolve, 5000));\n        }\n      }\n    }\n    \n    this.logger(`Build failed after ${maxRetries} attempts`);\n    return false;\n  }\n\n  /**\n   * Cleans the build directory\n   */\n  async cleanBuild(): Promise<void> {\n    try {\n      if (fs.existsSync(this.buildDir)) {\n        fs.rmSync(this.buildDir, { recursive: true, force: true });\n        this.logger('Build directory cleaned');\n      }\n    } catch (error) {\n      this.logger('Error cleaning build directory:', error);\n    }\n  }\n\n  /**\n   * Gets default content for manifest files\n   * Requirement 3.3: Create missing manifest files with minimal content when needed\n   */\n  private getManifestDefaults(): Record<string, any> {\n    return {\n      'pages-manifest.json': {},\n      'app-paths-manifest.json': {},\n      'next-font-manifest.json': {\n        pages: {},\n        app: {},\n        appUsingSizeAdjust: false,\n        pagesUsingSizeAdjust: false\n      },\n      'middleware-manifest.json': {\n        sortedMiddleware: [],\n        middleware: {},\n        functions: {},\n        version: 2\n      },\n      'build-manifest.json': {\n        devFiles: [],\n        ampDevFiles: [],\n        polyfillFiles: [],\n        lowPriorityFiles: [],\n        rootMainFiles: [],\n        pages: {},\n        ampFirstPages: []\n      },\n      'app-build-manifest.json': {\n        pages: {}\n      },\n      'react-loadable-manifest.json': {}\n    };\n  }\n\n  /**\n   * Checks if Next.js configuration is properly set up\n   * Requirement 3.1: Fix Next.js configuration to properly generate manifest files\n   */\n  validateNextConfig(): NextConfigValidationResult {\n    const result: NextConfigValidationResult = {\n      isValid: true,\n      issues: [],\n      recommendations: []\n    };\n\n    try {\n      // Check if next.config.js exists\n      const configPaths = ['next.config.js', 'next.config.mjs', 'next.config.ts'];\n      const existingConfig = configPaths.find(path => fs.existsSync(path));\n      \n      if (!existingConfig) {\n        result.isValid = false;\n        result.issues.push('No Next.js configuration file found');\n        result.recommendations.push('Create next.config.js with proper build settings');\n        return result;\n      }\n\n      // Read and validate configuration\n      const configContent = fs.readFileSync(existingConfig, 'utf8');\n      \n      // Check for essential configuration options\n      const essentialConfigs = [\n        'output',\n        'typescript',\n        'eslint'\n      ];\n\n      for (const config of essentialConfigs) {\n        if (!configContent.includes(config)) {\n          result.recommendations.push(`Consider adding ${config} configuration for better build stability`);\n        }\n      }\n\n      // Check for build optimization settings\n      if (!configContent.includes('webpack')) {\n        result.recommendations.push('Consider adding webpack configuration for build optimization');\n      }\n\n      this.logger(`Next.js config validation completed. Valid: ${result.isValid}, Issues: ${result.issues.length}`);\n      \n    } catch (error) {\n      result.isValid = false;\n      result.issues.push(`Error reading Next.js configuration: ${error}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Monitors build health and performance\n   * Requirement 3.5: Add build error recovery and retry mechanisms\n   */\n  async monitorBuildHealth(): Promise<BuildHealthReport> {\n    const report: BuildHealthReport = {\n      timestamp: new Date(),\n      buildExists: fs.existsSync(this.buildDir),\n      manifestsValid: false,\n      buildSize: 0,\n      lastBuildTime: null,\n      issues: []\n    };\n\n    try {\n      if (report.buildExists) {\n        // Calculate build size\n        report.buildSize = this.calculateDirectorySize(this.buildDir);\n        \n        // Check manifest validity\n        const validation = await this.validateBuild();\n        report.manifestsValid = validation.isValid;\n        \n        if (!validation.isValid) {\n          report.issues.push(...validation.missingFiles.map(file => `Missing: ${file}`));\n          report.issues.push(...validation.corruptedFiles.map(file => `Corrupted: ${file}`));\n        }\n\n        // Get last build time\n        const buildManifestPath = path.join(this.buildDir, 'build-manifest.json');\n        if (fs.existsSync(buildManifestPath)) {\n          const stats = fs.statSync(buildManifestPath);\n          report.lastBuildTime = stats.mtime;\n        }\n      } else {\n        report.issues.push('Build directory does not exist');\n      }\n\n    } catch (error) {\n      report.issues.push(`Health check error: ${error}`);\n    }\n\n    return report;\n  }\n\n  /**\n   * Calculates directory size recursively\n   */\n  private calculateDirectorySize(dirPath: string): number {\n    let size = 0;\n    \n    try {\n      const files = fs.readdirSync(dirPath);\n      \n      for (const file of files) {\n        const filePath = path.join(dirPath, file);\n        const stats = fs.statSync(filePath);\n        \n        if (stats.isDirectory()) {\n          size += this.calculateDirectorySize(filePath);\n        } else {\n          size += stats.size;\n        }\n      }\n    } catch (error) {\n      // Ignore errors for inaccessible files\n    }\n    \n    return size;\n  }\n}\n\n// Type definitions\nexport interface BuildValidationResult {\n  isValid: boolean;\n  missingFiles: string[];\n  corruptedFiles: string[];\n  repairActions: RepairAction[];\n}\n\nexport interface RepairAction {\n  type: 'create' | 'fix' | 'remove';\n  target: string;\n  description: string;\n}\n\nexport interface NextConfigValidationResult {\n  isValid: boolean;\n  issues: string[];\n  recommendations: string[];\n}\n\nexport interface BuildHealthReport {\n  timestamp: Date;\n  buildExists: boolean;\n  manifestsValid: boolean;\n  buildSize: number;\n  lastBuildTime: Date | null;\n  issues: string[];\n}\n\n// Export default instance\nexport const buildValidator = new BuildValidator();"],"version":3}