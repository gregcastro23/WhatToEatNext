68235f6380c3fb9cc851e91e796ae439
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
// Mock all external dependencies for E2E simulation
jest.mock('next/navigation', () => ({
    useRouter: () => ({
        push: jest.fn(),
        back: jest.fn(),
        forward: jest.fn(),
        refresh: jest.fn(),
        replace: jest.fn(),
    }),
}));
jest.mock('@/utils/logger', () => ({
    logger: {
        debug: jest.fn(),
        info: jest.fn(),
        warn: jest.fn(),
        error: jest.fn(),
    },
}));
// Mock realistic component behaviors for E2E testing
jest.mock('@/components/CuisineRecommender', () => {
    return function MockCuisineRecommender() {
        const [selectedCuisine, setSelectedCuisine] = react_2.default.useState(null);
        const [showRecipes, setShowRecipes] = react_2.default.useState(false);
        const cuisines = [
            { name: 'Italian', score: 95, recipes: ['Pasta Marinara', 'Risotto', 'Pizza Margherita'] },
            { name: 'Chinese', score: 88, recipes: ['Fried Rice', 'Sweet and Sour Pork', 'Kung Pao Chicken'] },
            { name: 'Mexican', score: 82, recipes: ['Tacos', 'Enchiladas', 'Guacamole'] },
            { name: 'Indian', score: 79, recipes: ['Curry', 'Biryani', 'Naan'] },
        ];
        const handleCuisineSelect = (cuisine) => {
            setSelectedCuisine(cuisine.name);
            setShowRecipes(true);
        };
        return ((0, jsx_runtime_1.jsxs)("div", { "data-testid": 'cuisine-recommender', children: [(0, jsx_runtime_1.jsx)("h3", { children: "Cuisine Recommendations" }), (0, jsx_runtime_1.jsx)("div", { className: 'cuisine-grid', children: cuisines.map(cuisine => ((0, jsx_runtime_1.jsx)("div", { className: 'cuisine-card', "data-testid": `cuisine-card-${cuisine.name.toLowerCase()}`, children: (0, jsx_runtime_1.jsxs)("button", { onClick: () => handleCuisineSelect(cuisine), className: selectedCuisine === cuisine.name ? 'selected' : '', "data-testid": `cuisine-${cuisine.name.toLowerCase()}`, children: [(0, jsx_runtime_1.jsx)("h4", { children: cuisine.name }), (0, jsx_runtime_1.jsxs)("div", { className: 'score', children: ["Match: ", cuisine.score, "%"] })] }) }, cuisine.name))) }), showRecipes && selectedCuisine && ((0, jsx_runtime_1.jsxs)("div", { "data-testid": 'recipe-recommendations', className: 'recipe-section', children: [(0, jsx_runtime_1.jsxs)("h4", { children: ["Recommended ", selectedCuisine, " Recipes"] }), (0, jsx_runtime_1.jsx)("div", { className: 'recipe-list', children: cuisines
                                .find(c => c.name === selectedCuisine)
                                ?.recipes.map(recipe => ((0, jsx_runtime_1.jsx)("button", { "data-testid": `recipe-${recipe.toLowerCase().replace(/\s+/g, '-')}`, className: 'recipe-button', children: recipe }, recipe))) })] }))] }));
    };
});
jest.mock('@/components/IngredientRecommender', () => {
    return function MockIngredientRecommender({ maxDisplayed = 8 }) {
        const [selectedIngredients, setSelectedIngredients] = react_2.default.useState([]);
        const [expandedIngredient, setExpandedIngredient] = react_2.default.useState(null);
        const ingredients = [
            { name: 'Tomatoes', category: 'Vegetables', properties: ['Umami', 'Acidic', 'Fresh'] },
            { name: 'Onions', category: 'Vegetables', properties: ['Sweet', 'Pungent', 'Aromatic'] },
            { name: 'Garlic', category: 'Aromatics', properties: ['Pungent', 'Savory', 'Aromatic'] },
            { name: 'Basil', category: 'Herbs', properties: ['Fresh', 'Aromatic', 'Sweet'] },
            { name: 'Olive Oil', category: 'Oils', properties: ['Rich', 'Fruity', 'Smooth'] },
            { name: 'Cheese', category: 'Dairy', properties: ['Creamy', 'Salty', 'Rich'] },
            { name: 'Pasta', category: 'Grains', properties: ['Neutral', 'Filling', 'Versatile'] },
            { name: 'Chicken', category: 'Proteins', properties: ['Lean', 'Mild', 'Versatile'] },
        ];
        const displayedIngredients = ingredients.slice(0, maxDisplayed);
        const toggleIngredient = (ingredient) => {
            setSelectedIngredients(prev => void prev.includes(ingredient) ? prev.filter(i => i !== ingredient) : [...prev, ingredient]);
        };
        const toggleExpanded = (ingredient) => {
            setExpandedIngredient(prev => (prev === ingredient ? null : ingredient));
        };
        return ((0, jsx_runtime_1.jsxs)("div", { "data-testid": 'ingredient-recommender', children: [(0, jsx_runtime_1.jsx)("h3", { children: "Ingredient Recommendations" }), (0, jsx_runtime_1.jsx)("div", { className: 'ingredient-grid', children: displayedIngredients.map(ingredient => ((0, jsx_runtime_1.jsxs)("div", { className: 'ingredient-card', "data-testid": `ingredient-card-${ingredient.name.toLowerCase()}`, children: [(0, jsx_runtime_1.jsx)("button", { onClick: () => toggleIngredient(ingredient.name), className: selectedIngredients.includes(ingredient.name) ? 'selected' : '', "data-testid": `ingredient-${ingredient.name.toLowerCase()}`, children: ingredient.name }), (0, jsx_runtime_1.jsx)("button", { onClick: () => toggleExpanded(ingredient.name), "data-testid": `expand-${ingredient.name.toLowerCase()}`, className: 'expand-button', children: expandedIngredient === ingredient.name ? '▼' : '▶' }), expandedIngredient === ingredient.name && ((0, jsx_runtime_1.jsxs)("div", { "data-testid": `details-${ingredient.name.toLowerCase()}`, className: 'ingredient-details', children: [(0, jsx_runtime_1.jsxs)("div", { children: ["Category: ", ingredient.category] }), (0, jsx_runtime_1.jsxs)("div", { children: ["Properties: ", ingredient.properties.join(', ')] })] }))] }, ingredient.name))) }), selectedIngredients.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { "data-testid": 'selected-ingredients-summary', className: 'selection-summary', children: [(0, jsx_runtime_1.jsxs)("h4", { children: ["Selected Ingredients (", selectedIngredients.length, ")"] }), (0, jsx_runtime_1.jsx)("div", { children: selectedIngredients.join(', ') })] }))] }));
    };
});
jest.mock('@/components/CookingMethodsSection', () => {
    return function MockCookingMethodsSection({ maxDisplayed = 6, onViewMore, }) {
        const [selectedMethod, setSelectedMethod] = react_2.default.useState(null);
        const methods = [
            { name: 'Sauté', time: '5-10 min', difficulty: 'Easy', description: 'Quick cooking in a pan with oil' },
            { name: 'Roast', time: '30-60 min', difficulty: 'Medium', description: 'Cooking in the oven with dry heat' },
            { name: 'Grill', time: '10-20 min', difficulty: 'Medium', description: 'Cooking over direct heat' },
            { name: 'Steam', time: '10-15 min', difficulty: 'Easy', description: 'Cooking with steam heat' },
            { name: 'Braise', time: '60-120 min', difficulty: 'Hard', description: 'Slow cooking with liquid' },
            { name: 'Stir-fry', time: '5-8 min', difficulty: 'Medium', description: 'Quick cooking while stirring' },
        ];
        const displayedMethods = methods.slice(0, maxDisplayed);
        return ((0, jsx_runtime_1.jsxs)("div", { "data-testid": 'cooking-methods', children: [(0, jsx_runtime_1.jsx)("h3", { children: "Cooking Methods" }), (0, jsx_runtime_1.jsx)("div", { className: 'methods-grid', children: displayedMethods.map(method => ((0, jsx_runtime_1.jsxs)("div", { className: 'method-card', "data-testid": `method-card-${method.name.toLowerCase()}`, children: [(0, jsx_runtime_1.jsxs)("button", { onClick: () => setSelectedMethod(method.name), className: selectedMethod === method.name ? 'selected' : '', "data-testid": `method-${method.name.toLowerCase()}`, children: [(0, jsx_runtime_1.jsx)("h4", { children: method.name }), (0, jsx_runtime_1.jsxs)("div", { className: 'method-info', children: [(0, jsx_runtime_1.jsxs)("div", { children: ["Time: ", method.time] }), (0, jsx_runtime_1.jsxs)("div", { children: ["Difficulty: ", method.difficulty] })] })] }), selectedMethod === method.name && ((0, jsx_runtime_1.jsx)("div", { "data-testid": `method-details-${method.name.toLowerCase()}`, className: 'method-details', children: (0, jsx_runtime_1.jsx)("p", { children: method.description }) }))] }, method.name))) }), (0, jsx_runtime_1.jsx)("button", { onClick: onViewMore, "data-testid": 'view-more-methods', className: 'view-more-button', children: "View All Cooking Methods" })] }));
    };
});
jest.mock('@/components/recipes/RecipeBuilderSimple', () => {
    return function MockRecipeBuilderSimple() {
        const [recipeName, setRecipeName] = react_2.default.useState('');
        const [ingredients, setIngredients] = react_2.default.useState([]);
        const [steps, setSteps] = react_2.default.useState([]);
        const [servings, setServings] = react_2.default.useState(4);
        const [prepTime, setPrepTime] = react_2.default.useState(15);
        const [cookTime, setCookTime] = react_2.default.useState(30);
        const addIngredient = () => {
            setIngredients(prev => [...prev, { name: '', quantity: '' }]);
        };
        const updateIngredient = (index, field, value) => {
            setIngredients(prev => prev.map((ing, i) => (i === index ? { ...ing, [field]: value } : ing)));
        };
        const removeIngredient = (index) => {
            setIngredients(prev => prev.filter((_, i) => i !== index));
        };
        const addStep = () => {
            setSteps(prev => [...prev, { instruction: '', timing: '' }]);
        };
        const updateStep = (index, field, value) => {
            setSteps(prev => prev.map((step, i) => (i === index ? { ...step, [field]: value } : step)));
        };
        const removeStep = (index) => {
            setSteps(prev => prev.filter((_, i) => i !== index));
        };
        const canSave = recipeName.trim() && ingredients.some(ing => ing.name.trim()) && void steps.some(step => step.instruction.trim());
        const totalTime = prepTime + cookTime;
        return ((0, jsx_runtime_1.jsxs)("div", { "data-testid": 'recipe-builder', children: [(0, jsx_runtime_1.jsx)("h3", { children: "Recipe Builder" }), (0, jsx_runtime_1.jsxs)("div", { className: 'recipe-form', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'recipe-header', children: [(0, jsx_runtime_1.jsx)("input", { type: 'text', placeholder: 'Recipe Name', value: recipeName, onChange: e => setRecipeName(e.target.value), "data-testid": 'recipe-name-input' }), (0, jsx_runtime_1.jsxs)("div", { className: 'recipe-meta', children: [(0, jsx_runtime_1.jsx)("input", { type: 'number', value: servings, onChange: e => setServings(parseInt(e.target.value) || 1), "data-testid": 'servings-input', min: '1' }), (0, jsx_runtime_1.jsx)("input", { type: 'number', value: prepTime, onChange: e => setPrepTime(parseInt(e.target.value) || 0), "data-testid": 'prep-time-input', min: '0' }), (0, jsx_runtime_1.jsx)("input", { type: 'number', value: cookTime, onChange: e => setCookTime(parseInt(e.target.value) || 0), "data-testid": 'cook-time-input', min: '0' })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'ingredients-section', children: [(0, jsx_runtime_1.jsx)("h4", { children: "Ingredients" }), (0, jsx_runtime_1.jsx)("button", { onClick: addIngredient, "data-testid": 'add-ingredient', children: "Add Ingredient" }), ingredients.map((ingredient, index) => ((0, jsx_runtime_1.jsxs)("div", { className: 'ingredient-row', "data-testid": `ingredient-row-${index}`, children: [(0, jsx_runtime_1.jsx)("input", { type: 'text', placeholder: 'Quantity', value: ingredient.quantity, onChange: e => updateIngredient(index, 'quantity', e.target.value), "data-testid": `ingredient-quantity-${index}` }), (0, jsx_runtime_1.jsx)("input", { type: 'text', placeholder: 'Ingredient name', value: ingredient.name, onChange: e => updateIngredient(index, 'name', e.target.value), "data-testid": `ingredient-name-${index}` }), (0, jsx_runtime_1.jsx)("button", { onClick: () => removeIngredient(index), "data-testid": `remove-ingredient-${index}`, children: "Remove" })] }, index))), (0, jsx_runtime_1.jsxs)("div", { "data-testid": 'ingredients-count', children: [", Ingredients: ", ingredients.length] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'steps-section', children: [(0, jsx_runtime_1.jsx)("h4", { children: "Instructions" }), (0, jsx_runtime_1.jsx)("button", { onClick: addStep, "data-testid": 'add-step', children: "Add Step" }), steps.map((step, index) => ((0, jsx_runtime_1.jsxs)("div", { className: 'step-row', "data-testid": `step-row-${index}`, children: [(0, jsx_runtime_1.jsx)("span", { className: 'step-number', children: index + 1 }), (0, jsx_runtime_1.jsx)("textarea", { placeholder: 'Describe this step...', value: step.instruction, onChange: e => updateStep(index, 'instruction', e.target.value), "data-testid": `step-instruction-${index}` }), (0, jsx_runtime_1.jsx)("input", { type: 'text', placeholder: 'Timing', value: step.timing, onChange: e => updateStep(index, 'timing', e.target.value), "data-testid": `step-timing-${index}` }), (0, jsx_runtime_1.jsx)("button", { onClick: () => removeStep(index), "data-testid": `remove-step-${index}`, children: "Remove" })] }, index))), (0, jsx_runtime_1.jsxs)("div", { "data-testid": 'steps-count', children: [", Steps: ", steps.length] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'recipe-summary', "data-testid": 'recipe-summary', children: [(0, jsx_runtime_1.jsx)("h4", { children: "Recipe Summary" }), (0, jsx_runtime_1.jsxs)("div", { children: ["Name: ", recipeName || 'Untitled Recipe'] }), (0, jsx_runtime_1.jsxs)("div", { children: ["Servings: ", servings] }), (0, jsx_runtime_1.jsxs)("div", { children: ["Total Time: ", totalTime, " minutes"] }), (0, jsx_runtime_1.jsxs)("div", { children: ["Ingredients: ", ingredients.length] }), (0, jsx_runtime_1.jsxs)("div", { children: ["Steps: ", steps.length] })] }), (0, jsx_runtime_1.jsx)("button", { disabled: !canSave, "data-testid": 'save-recipe', className: canSave ? 'enabled' : 'disabled', children: "Save Recipe" })] })] }));
    };
});
/**
 * End-to-End Tests for Main Page Workflows
 *
 * These tests simulate complete user workflows on the main page,
 * testing the integration between all components and user interactions.
 *
 * Note: These tests use jsdom and testing-library to simulate E2E scenarios
 * without requiring a full browser environment.
 */
const react_1 = require("@testing-library/react");
const user_event_1 = __importDefault(require("@testing-library/user-event"));
const react_2 = __importDefault(require("react"));
const MainPageLayout_1 = __importDefault(require("@/components/layout/MainPageLayout"));
const hooks_1 = require("@/contexts/AlchemicalContext/hooks");
const useStatePreservation_1 = require("@/hooks/useStatePreservation");
void jest.mock('@/contexts/AlchemicalContext/hooks');
void jest.mock('@/hooks/useStatePreservation');
describe('Main Page E2E Workflows', () => {
    const mockAlchemicalContext = {
        state: {
            astrologicalState: { sunSign: 'aries' },
            elementalState: { Fire: 0.3, Water: 0.2, Earth: 0.3, Air: 0.2 },
        },
        planetaryPositions: { sun: { sign: 'aries' } },
        isDaytime: true,
    };
    const mockNavigationState = {
        saveState: jest.fn(),
        getState: jest.fn(() => ({})),
    };
    const mockScrollPreservation = {
        restoreScrollPosition: jest.fn(),
    };
    beforeEach(() => {
        void jest.clearAllMocks();
        hooks_1.useAlchemical.mockReturnValue(mockAlchemicalContext);
        useStatePreservation_1.useNavigationState.mockReturnValue(mockNavigationState);
        useStatePreservation_1.useScrollPreservation.mockReturnValue(mockScrollPreservation);
        useStatePreservation_1.useAutoStateCleanup.mockReturnValue(undefined);
        // Mock DOM methods
        void Object.defineProperty(window, 'scrollY', { value: 0, writable: true });
        jest.spyOn(document, 'getElementById').mockImplementation(() => ({
            scrollIntoView: jest.fn(),
            style: {},
            classList: { add: jest.fn(), remove: jest.fn() },
        }));
    });
    afterEach(() => {
        void jest.restoreAllMocks();
    });
    it('completes full meal planning workflow', async () => {
        const user = user_event_1.default.setup();
        (0, react_1.act)(async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(MainPageLayout_1.default, {}));
        });
        // Wait for all components to load
        await (0, react_1.waitFor)(() => {
            expect(react_1.screen.getByTestId('cuisine-recommender')).toBeInTheDocument();
            expect(react_1.screen.getByTestId('ingredient-recommender')).toBeInTheDocument();
            expect(react_1.screen.getByTestId('cooking-methods')).toBeInTheDocument();
            expect(react_1.screen.getByTestId('recipe-builder')).toBeInTheDocument();
        });
        // Step 1: Select a cuisine
        const italianCuisine = react_1.screen.getByTestId('italian-cuisine');
        void user.click(italianCuisine);
        // Verify cuisine selection and recipe recommendations appear
        expect(react_1.screen.getByTestId('recipe-recommendations')).toBeInTheDocument();
        expect(react_1.screen.getByText('Recommended Italian Recipes')).toBeInTheDocument();
        // Step 2: Select ingredients
        const tomatoes = react_1.screen.getByTestId('ingredient-tomatoes');
        const basil = react_1.screen.getByTestId('ingredient-basil');
        const oliveOil = react_1.screen.getByTestId('ingredient-olive oil');
        void user.click(tomatoes);
        void user.click(basil);
        void user.click(oliveOil);
        // Verify ingredient selection
        expect(react_1.screen.getByTestId('selected-ingredients-summary')).toBeInTheDocument();
        expect(react_1.screen.getByText('Selected Ingredients (3)')).toBeInTheDocument();
        // Step 3: Select cooking method
        const sauteMethod = react_1.screen.getByTestId('method-sauté');
        void user.click(sauteMethod);
        // Verify method selection and details
        expect(react_1.screen.getByTestId('method-details-sauté')).toBeInTheDocument();
        // Step 4: Build a recipe
        const recipeNameInput = react_1.screen.getByTestId('recipe-name-input');
        void user.type(recipeNameInput, 'Italian Tomato Basil Sauté');
        // Add ingredients to recipe
        const addIngredientButton = react_1.screen.getByTestId('add-ingredient');
        void user.click(addIngredientButton);
        void user.click(addIngredientButton);
        void user.click(addIngredientButton);
        // Fill in ingredient details
        void user.type(react_1.screen.getByTestId('ingredient-quantity-0'), '2 cups');
        void user.type(react_1.screen.getByTestId('ingredient-name-0'), 'Fresh Tomatoes');
        void user.type(react_1.screen.getByTestId('ingredient-quantity-1'), '1/4 cup');
        void user.type(react_1.screen.getByTestId('ingredient-name-1'), 'Fresh Basil');
        void user.type(react_1.screen.getByTestId('ingredient-quantity-2'), '2 tbsp');
        void user.type(react_1.screen.getByTestId('ingredient-name-2'), 'Olive Oil');
        // Add cooking steps
        const addStepButton = react_1.screen.getByTestId('add-step');
        void user.click(addStepButton);
        void user.click(addStepButton);
        user.type(react_1.screen.getByTestId('step-instruction-0'), 'Heat olive oil in a large pan over medium heat');
        void user.type(react_1.screen.getByTestId('step-timing-0'), '2 min');
        user.type(react_1.screen.getByTestId('step-instruction-1'), 'Add tomatoes and basil, sauté until tender');
        void user.type(react_1.screen.getByTestId('step-timing-1'), '8 min');
        // Verify recipe can be saved
        const saveButton = react_1.screen.getByTestId('save-recipe');
        expect(saveButton).toBeEnabled();
        // Save the recipe
        void user.click(saveButton);
        // Verify the complete workflow
        expect(react_1.screen.getByDisplayValue('Italian Tomato Basil Sauté')).toBeInTheDocument();
        expect(react_1.screen.getByText('Ingredients: 3')).toBeInTheDocument();
        expect(react_1.screen.getByText('Steps: 2')).toBeInTheDocument();
    });
    it('handles ingredient exploration workflow', async () => {
        const user = user_event_1.default.setup();
        (0, react_1.act)(async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(MainPageLayout_1.default, {}));
        });
        await (0, react_1.waitFor)(() => {
            expect(react_1.screen.getByTestId('ingredient-recommender')).toBeInTheDocument();
        });
        // Expand ingredient details
        const expandTomatoes = react_1.screen.getByTestId('expand-tomatoes');
        void user.click(expandTomatoes);
        // Verify details are shown
        expect(react_1.screen.getByTestId('details-tomatoes')).toBeInTheDocument();
        expect(react_1.screen.getByText('Category: Vegetables')).toBeInTheDocument();
        expect(react_1.screen.getByText('Properties: Umami, Acidic, Fresh')).toBeInTheDocument();
        // Expand another ingredient
        const expandGarlic = react_1.screen.getByTestId('expand-garlic');
        void user.click(expandGarlic);
        expect(react_1.screen.getByTestId('details-garlic')).toBeInTheDocument();
        expect(react_1.screen.getByText('Category: Aromatics')).toBeInTheDocument();
        // Collapse first ingredient
        void user.click(expandTomatoes);
        expect(react_1.screen.queryByTestId('details-tomatoes')).not.toBeInTheDocument();
        // Select multiple ingredients
        void user.click(react_1.screen.getByTestId('ingredient-tomatoes'));
        void user.click(react_1.screen.getByTestId('ingredient-garlic'));
        void user.click(react_1.screen.getByTestId('ingredient-basil'));
        // Verify selection summary
        expect(react_1.screen.getByText('Selected Ingredients (3)')).toBeInTheDocument();
        expect(react_1.screen.getByText('Tomatoes, Garlic, Basil')).toBeInTheDocument();
    });
    it('handles cooking method exploration workflow', async () => {
        const user = user_event_1.default.setup();
        (0, react_1.act)(async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(MainPageLayout_1.default, {}));
        });
        await (0, react_1.waitFor)(() => {
            expect(react_1.screen.getByTestId('cooking-methods')).toBeInTheDocument();
        });
        // Select different cooking methods and view details
        const roastMethod = react_1.screen.getByTestId('method-roast');
        void user.click(roastMethod);
        expect(react_1.screen.getByTestId('method-details-roast')).toBeInTheDocument();
        expect(react_1.screen.getByText('Cooking in the oven with dry heat')).toBeInTheDocument();
        // Switch to another method
        const grillMethod = react_1.screen.getByTestId('method-grill');
        void user.click(grillMethod);
        expect(react_1.screen.getByTestId('method-details-grill')).toBeInTheDocument();
        expect(react_1.screen.getByText('Cooking over direct heat')).toBeInTheDocument();
        // Previous method details should be hidden
        expect(react_1.screen.queryByTestId('method-details-roast')).not.toBeInTheDocument();
        // Test view more functionality
        const viewMoreButton = react_1.screen.getByTestId('view-more-methods');
        expect(viewMoreButton).toBeInTheDocument();
    });
    it('handles complete recipe creation workflow', async () => {
        const user = user_event_1.default.setup();
        (0, react_1.act)(async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(MainPageLayout_1.default, {}));
        });
        await (0, react_1.waitFor)(() => {
            expect(react_1.screen.getByTestId('recipe-builder')).toBeInTheDocument();
        });
        // Create a complete recipe from scratch
        const recipeNameInput = react_1.screen.getByTestId('recipe-name-input');
        void user.type(recipeNameInput, 'Mediterranean Chicken');
        // Update recipe metadata
        const servingsInput = react_1.screen.getByTestId('servings-input');
        const prepTimeInput = react_1.screen.getByTestId('prep-time-input');
        const cookTimeInput = react_1.screen.getByTestId('cook-time-input');
        void user.clear(servingsInput);
        void user.type(servingsInput, '6');
        void user.clear(prepTimeInput);
        void user.type(prepTimeInput, '20');
        void user.clear(cookTimeInput);
        void user.type(cookTimeInput, '45');
        // Add multiple ingredients
        for (let i = 0; i < 4; i++) {
            void user.click(react_1.screen.getByTestId('add-ingredient'));
        }
        const ingredients = [
            { quantity: '2 lbs', name: 'Chicken Breast' },
            { quantity: '1 cup', name: 'Cherry Tomatoes' },
            { quantity: '1/2 cup', name: 'Kalamata Olives' },
            { quantity: '1/4 cup', name: 'Olive Oil' },
        ];
        for (let i = 0; i < ingredients.length; i++) {
            void user.type(react_1.screen.getByTestId(`ingredient-quantity-${i}`), ingredients[i].quantity);
            void user.type(react_1.screen.getByTestId(`ingredient-name-${i}`), ingredients[i].name);
        }
        // Add cooking steps
        for (let i = 0; i < 3; i++) {
            void user.click(react_1.screen.getByTestId('add-step'));
        }
        const steps = [
            { instruction: 'Preheat oven to 375°F and prepare chicken', timing: '5 min' },
            { instruction: 'Sear chicken in olive oil until golden', timing: '10 min' },
            { instruction: 'Add tomatoes and olives, bake until done', timing: '30 min' },
        ];
        for (let i = 0; i < steps.length; i++) {
            void user.type(react_1.screen.getByTestId(`step-instruction-${i}`), steps[i].instruction);
            void user.type(react_1.screen.getByTestId(`step-timing-${i}`), steps[i].timing);
        }
        // Verify recipe summary
        const summary = react_1.screen.getByTestId('recipe-summary');
        expect(summary).toHaveTextContent('Name: Mediterranean Chicken');
        expect(summary).toHaveTextContent('Servings: 6');
        expect(summary).toHaveTextContent('Total Time: 65 minutes');
        expect(summary).toHaveTextContent('Ingredients: 4');
        expect(summary).toHaveTextContent('Steps: 3');
        // Verify save button is enabled
        const saveButton = react_1.screen.getByTestId('save-recipe');
        expect(saveButton).toBeEnabled();
        expect(saveButton).toHaveClass('enabled');
        // Test ingredient removal
        void user.click(react_1.screen.getByTestId('remove-ingredient-3'));
        expect(react_1.screen.getByText('Ingredients: 3')).toBeInTheDocument();
        // Test step removal
        void user.click(react_1.screen.getByTestId('remove-step-0'));
        expect(react_1.screen.getByText('Steps: 2')).toBeInTheDocument();
        // Verify step renumbering
        expect(react_1.screen.getByDisplayValue('Sear chicken in olive oil until golden')).toBeInTheDocument();
    });
    it('handles navigation and state preservation workflow', async () => {
        const user = user_event_1.default.setup();
        const mockOnSectionNavigate = jest.fn();
        (0, react_1.act)(async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(MainPageLayout_1.default, { onSectionNavigate: mockOnSectionNavigate }));
        });
        await (0, react_1.waitFor)(() => {
            expect(react_1.screen.getByTestId('cuisine-recommender')).toBeInTheDocument();
        });
        // Make selections across different components
        void user.click(react_1.screen.getByTestId('cuisine-italian'));
        void user.click(react_1.screen.getByTestId('ingredient-tomatoes'));
        void user.click(react_1.screen.getByTestId('method-sauté'));
        // Navigate between sections
        const cuisineNavButton = react_1.screen.getByText('Cuisine Recommendations');
        void user.click(cuisineNavButton);
        expect(mockOnSectionNavigate).toHaveBeenCalledWith('cuisine');
        const ingredientsNavButton = react_1.screen.getByText('Ingredient Recommendations');
        void user.click(ingredientsNavButton);
        expect(mockOnSectionNavigate).toHaveBeenCalledWith('ingredients');
        // Verify state preservation was called
        await (0, react_1.waitFor)(() => {
            expect(mockNavigationState.saveState).toHaveBeenCalled();
        });
        // Verify selections are maintained after navigation
        expect(react_1.screen.getByTestId('recipe-recommendations')).toBeInTheDocument();
        expect(react_1.screen.getByText('Selected Ingredients (1)')).toBeInTheDocument();
        expect(react_1.screen.getByTestId('method-details-sauté')).toBeInTheDocument();
    });
    it('handles error recovery workflow', async () => {
        const user = user_event_1.default.setup();
        // Mock console.error to avoid noise
        const consoleSpy = jest.spyOn(console, 'error').mockImplementation(() => { });
        (0, react_1.act)(async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(MainPageLayout_1.default, {}));
        });
        await (0, react_1.waitFor)(() => {
            expect(react_1.screen.getByTestId('recipe-builder')).toBeInTheDocument();
        });
        // Simulate user creating a recipe and encountering an error
        const recipeNameInput = react_1.screen.getByTestId('recipe-name-input');
        void user.type(recipeNameInput, 'Test Recipe');
        // Add ingredient
        void user.click(react_1.screen.getByTestId('add-ingredient'));
        void user.type(react_1.screen.getByTestId('ingredient-name-0'), 'Test Ingredient');
        // Add step
        void user.click(react_1.screen.getByTestId('add-step'));
        void user.type(react_1.screen.getByTestId('step-instruction-0'), 'Test step');
        // Verify recipe is valid
        expect(react_1.screen.getByTestId('save-recipe')).toBeEnabled();
        // The main page should continue to function despite any errors
        expect(react_1.screen.getByText('What to Eat Next')).toBeInTheDocument();
        expect(react_1.screen.getByTestId('recipe-builder')).toBeInTheDocument();
        consoleSpy.mockRestore();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9fX3Rlc3RzX18vZTJlL01haW5QYWdlV29ya2Zsb3dzLnRlc3QudHN4IiwibWFwcGluZ3MiOiI7Ozs7OztBQWtCQSxvREFBb0Q7QUFDcEQsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLFNBQVMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ2hCLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDZixPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNsQixPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNsQixPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtLQUNuQixDQUFDO0NBQ0gsQ0FBQyxDQUFDLENBQUM7QUFJSixJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDakMsTUFBTSxFQUFFO1FBQ04sS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDaEIsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNmLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0tBQ2pCO0NBQ0YsQ0FBQyxDQUFDLENBQUM7QUFFSixxREFBcUQ7QUFDckQsSUFBSSxDQUFDLElBQUksQ0FBQyxpQ0FBaUMsRUFBRSxHQUFHLEVBQUU7SUFDaEQsT0FBTyxTQUFTLHNCQUFzQjtRQUNwQyxNQUFNLENBQUMsZUFBZSxFQUFFLGtCQUFrQixDQUFDLEdBQUcsZUFBSyxDQUFDLFFBQVEsQ0FBZ0IsSUFBSSxDQUFDLENBQUM7UUFDbEYsTUFBTSxDQUFDLFdBQVcsRUFBRSxjQUFjLENBQUMsR0FBRyxlQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FB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SyxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQU0sQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1FBQ3RELEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFNLENBQUMsV0FBVyxDQUFDLG1CQUFtQixDQUFDLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUUzRSxXQUFXO1FBQ1gsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUNoRCxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBTSxDQUFDLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBRXRFLHlCQUF5QjtRQUN6QixNQUFNLENBQUMsY0FBTSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRXhELCtEQUErRDtRQUMvRCxNQUFNLENBQUMsY0FBTSxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUNqRSxNQUFNLENBQUMsY0FBTSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUVqRSxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDM0IsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvR3JlZ0Nhc3Ryby9EZXNrdG9wL1doYXRUb0VhdE5leHQvc3JjL19fdGVzdHNfXy9lMmUvTWFpblBhZ2VXb3JrZmxvd3MudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFbmQtdG8tRW5kIFRlc3RzIGZvciBNYWluIFBhZ2UgV29ya2Zsb3dzXG4gKlxuICogVGhlc2UgdGVzdHMgc2ltdWxhdGUgY29tcGxldGUgdXNlciB3b3JrZmxvd3Mgb24gdGhlIG1haW4gcGFnZSxcbiAqIHRlc3RpbmcgdGhlIGludGVncmF0aW9uIGJldHdlZW4gYWxsIGNvbXBvbmVudHMgYW5kIHVzZXIgaW50ZXJhY3Rpb25zLlxuICpcbiAqIE5vdGU6IFRoZXNlIHRlc3RzIHVzZSBqc2RvbSBhbmQgdGVzdGluZy1saWJyYXJ5IHRvIHNpbXVsYXRlIEUyRSBzY2VuYXJpb3NcbiAqIHdpdGhvdXQgcmVxdWlyaW5nIGEgZnVsbCBicm93c2VyIGVudmlyb25tZW50LlxuICovXG5cbmltcG9ydCB7IGFjdCwgcmVuZGVyLCBzY3JlZW4sIHdhaXRGb3IgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0JztcbmltcG9ydCB1c2VyRXZlbnQgZnJvbSAnQHRlc3RpbmctbGlicmFyeS91c2VyLWV2ZW50JztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBNYWluUGFnZUxheW91dCBmcm9tICdAL2NvbXBvbmVudHMvbGF5b3V0L01haW5QYWdlTGF5b3V0JztcbmltcG9ydCB7IHVzZUFsY2hlbWljYWwgfSBmcm9tICdAL2NvbnRleHRzL0FsY2hlbWljYWxDb250ZXh0L2hvb2tzJztcbmltcG9ydCB7IHVzZUF1dG9TdGF0ZUNsZWFudXAsIHVzZU5hdmlnYXRpb25TdGF0ZSwgdXNlU2Nyb2xsUHJlc2VydmF0aW9uIH0gZnJvbSAnQC9ob29rcy91c2VTdGF0ZVByZXNlcnZhdGlvbic7XG5cbi8vIE1vY2sgYWxsIGV4dGVybmFsIGRlcGVuZGVuY2llcyBmb3IgRTJFIHNpbXVsYXRpb25cbmplc3QubW9jaygnbmV4dC9uYXZpZ2F0aW9uJywgKCkgPT4gKHtcbiAgdXNlUm91dGVyOiAoKSA9PiAoe1xuICAgIHB1c2g6IGplc3QuZm4oKSxcbiAgICBiYWNrOiBqZXN0LmZuKCksXG4gICAgZm9yd2FyZDogamVzdC5mbigpLFxuICAgIHJlZnJlc2g6IGplc3QuZm4oKSxcbiAgICByZXBsYWNlOiBqZXN0LmZuKCksXG4gIH0pLFxufSkpO1xuXG52b2lkIGplc3QubW9jaygnQC9jb250ZXh0cy9BbGNoZW1pY2FsQ29udGV4dC9ob29rcycpO1xudm9pZCBqZXN0Lm1vY2soJ0AvaG9va3MvdXNlU3RhdGVQcmVzZXJ2YXRpb24nKTtcbmplc3QubW9jaygnQC91dGlscy9sb2dnZXInLCAoKSA9PiAoe1xuICBsb2dnZXI6IHtcbiAgICBkZWJ1ZzogamVzdC5mbigpLFxuICAgIGluZm86IGplc3QuZm4oKSxcbiAgICB3YXJuOiBqZXN0LmZuKCksXG4gICAgZXJyb3I6IGplc3QuZm4oKSxcbiAgfSxcbn0pKTtcblxuLy8gTW9jayByZWFsaXN0aWMgY29tcG9uZW50IGJlaGF2aW9ycyBmb3IgRTJFIHRlc3Rpbmdcbmplc3QubW9jaygnQC9jb21wb25lbnRzL0N1aXNpbmVSZWNvbW1lbmRlcicsICgpID0+IHtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1vY2tDdWlzaW5lUmVjb21tZW5kZXIoKSB7XG4gICAgY29uc3QgW3NlbGVjdGVkQ3Vpc2luZSwgc2V0U2VsZWN0ZWRDdWlzaW5lXSA9IFJlYWN0LnVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xuICAgIGNvbnN0IFtzaG93UmVjaXBlcywgc2V0U2hvd1JlY2lwZXNdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuXG4gICAgY29uc3QgY3Vpc2luZXMgPSBbXG4gICAgICB7IG5hbWU6ICdJdGFsaWFuJywgc2NvcmU6IDk1LCByZWNpcGVzOiBbJ1Bhc3RhIE1hcmluYXJhJywgJ1Jpc290dG8nLCAnUGl6emEgTWFyZ2hlcml0YSddIH0sXG4gICAgICB7IG5hbWU6ICdDaGluZXNlJywgc2NvcmU6IDg4LCByZWNpcGVzOiBbJ0ZyaWVkIFJpY2UnLCAnU3dlZXQgYW5kIFNvdXIgUG9yaycsICdLdW5nIFBhbyBDaGlja2VuJ10gfSxcbiAgICAgIHsgbmFtZTogJ01leGljYW4nLCBzY29yZTogODIsIHJlY2lwZXM6IFsnVGFjb3MnLCAnRW5jaGlsYWRhcycsICdHdWFjYW1vbGUnXSB9LFxuICAgICAgeyBuYW1lOiAnSW5kaWFuJywgc2NvcmU6IDc5LCByZWNpcGVzOiBbJ0N1cnJ5JywgJ0JpcnlhbmknLCAnTmFhbiddIH0sXG4gICAgXTtcblxuICAgIGNvbnN0IGhhbmRsZUN1aXNpbmVTZWxlY3QgPSAoY3Vpc2luZTogdW5rbm93bikgPT4ge1xuICAgICAgc2V0U2VsZWN0ZWRDdWlzaW5lKGN1aXNpbmUubmFtZSk7XG4gICAgICBzZXRTaG93UmVjaXBlcyh0cnVlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgZGF0YS10ZXN0aWQ9J2N1aXNpbmUtcmVjb21tZW5kZXInPlxuICAgICAgICA8aDM+Q3Vpc2luZSBSZWNvbW1lbmRhdGlvbnM8L2gzPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY3Vpc2luZS1ncmlkJz5cbiAgICAgICAgICB7Y3Vpc2luZXMubWFwKGN1aXNpbmUgPT4gKFxuICAgICAgICAgICAgPGRpdiBrZXk9e2N1aXNpbmUubmFtZX0gY2xhc3NOYW1lPSdjdWlzaW5lLWNhcmQnIGRhdGEtdGVzdGlkPXtgY3Vpc2luZS1jYXJkLSR7Y3Vpc2luZS5uYW1lLnRvTG93ZXJDYXNlKCl9YH0+XG4gICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBoYW5kbGVDdWlzaW5lU2VsZWN0KGN1aXNpbmUpfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17c2VsZWN0ZWRDdWlzaW5lID09PSBjdWlzaW5lLm5hbWUgPyAnc2VsZWN0ZWQnIDogJyd9XG4gICAgICAgICAgICAgICAgZGF0YS10ZXN0aWQ9e2BjdWlzaW5lLSR7Y3Vpc2luZS5uYW1lLnRvTG93ZXJDYXNlKCl9YH1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxoND57Y3Vpc2luZS5uYW1lfTwvaDQ+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3Njb3JlJz5NYXRjaDoge2N1aXNpbmUuc2NvcmV9JTwvZGl2PlxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICkpfVxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICB7c2hvd1JlY2lwZXMgJiYgc2VsZWN0ZWRDdWlzaW5lICYmIChcbiAgICAgICAgICA8ZGl2IGRhdGEtdGVzdGlkPSdyZWNpcGUtcmVjb21tZW5kYXRpb25zJyBjbGFzc05hbWU9J3JlY2lwZS1zZWN0aW9uJz5cbiAgICAgICAgICAgIDxoND5SZWNvbW1lbmRlZCB7c2VsZWN0ZWRDdWlzaW5lfSBSZWNpcGVzPC9oND5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdyZWNpcGUtbGlzdCc+XG4gICAgICAgICAgICAgIHtjdWlzaW5lc1xuICAgICAgICAgICAgICAgIC5maW5kKGMgPT4gYy5uYW1lID09PSBzZWxlY3RlZEN1aXNpbmUpXG4gICAgICAgICAgICAgICAgPy5yZWNpcGVzLm1hcChyZWNpcGUgPT4gKFxuICAgICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICBrZXk9e3JlY2lwZX1cbiAgICAgICAgICAgICAgICAgICAgZGF0YS10ZXN0aWQ9e2ByZWNpcGUtJHtyZWNpcGUudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXHMrL2csICctJyl9YH1cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSdyZWNpcGUtYnV0dG9uJ1xuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICB7cmVjaXBlfVxuICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH07XG59KTtcblxuamVzdC5tb2NrKCdAL2NvbXBvbmVudHMvSW5ncmVkaWVudFJlY29tbWVuZGVyJywgKCkgPT4ge1xuICByZXR1cm4gZnVuY3Rpb24gTW9ja0luZ3JlZGllbnRSZWNvbW1lbmRlcih7IG1heERpc3BsYXllZCA9IDggfTogeyBtYXhEaXNwbGF5ZWQ/OiBudW1iZXIgfSkge1xuICAgIGNvbnN0IFtzZWxlY3RlZEluZ3JlZGllbnRzLCBzZXRTZWxlY3RlZEluZ3JlZGllbnRzXSA9IFJlYWN0LnVzZVN0YXRlPHN0cmluZ1tdPihbXSk7XG4gICAgY29uc3QgW2V4cGFuZGVkSW5ncmVkaWVudCwgc2V0RXhwYW5kZWRJbmdyZWRpZW50XSA9IFJlYWN0LnVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xuXG4gICAgY29uc3QgaW5ncmVkaWVudHMgPSBbXG4gICAgICB7IG5hbWU6ICdUb21hdG9lcycsIGNhdGVnb3J5OiAnVmVnZXRhYmxlcycsIHByb3BlcnRpZXM6IFsnVW1hbWknLCAnQWNpZGljJywgJ0ZyZXNoJ10gfSxcbiAgICAgIHsgbmFtZTogJ09uaW9ucycsIGNhdGVnb3J5OiAnVmVnZXRhYmxlcycsIHByb3BlcnRpZXM6IFsnU3dlZXQnLCAnUHVuZ2VudCcsICdBcm9tYXRpYyddIH0sXG4gICAgICB7IG5hbWU6ICdHYXJsaWMnLCBjYXRlZ29yeTogJ0Fyb21hdGljcycsIHByb3BlcnRpZXM6IFsnUHVuZ2VudCcsICdTYXZvcnknLCAnQXJvbWF0aWMnXSB9LFxuICAgICAgeyBuYW1lOiAnQmFzaWwnLCBjYXRlZ29yeTogJ0hlcmJzJywgcHJvcGVydGllczogWydGcmVzaCcsICdBcm9tYXRpYycsICdTd2VldCddIH0sXG4gICAgICB7IG5hbWU6ICdPbGl2ZSBPaWwnLCBjYXRlZ29yeTogJ09pbHMnLCBwcm9wZXJ0aWVzOiBbJ1JpY2gnLCAnRnJ1aXR5JywgJ1Ntb290aCddIH0sXG4gICAgICB7IG5hbWU6ICdDaGVlc2UnLCBjYXRlZ29yeTogJ0RhaXJ5JywgcHJvcGVydGllczogWydDcmVhbXknLCAnU2FsdHknLCAnUmljaCddIH0sXG4gICAgICB7IG5hbWU6ICdQYXN0YScsIGNhdGVnb3J5OiAnR3JhaW5zJywgcHJvcGVydGllczogWydOZXV0cmFsJywgJ0ZpbGxpbmcnLCAnVmVyc2F0aWxlJ10gfSxcbiAgICAgIHsgbmFtZTogJ0NoaWNrZW4nLCBjYXRlZ29yeTogJ1Byb3RlaW5zJywgcHJvcGVydGllczogWydMZWFuJywgJ01pbGQnLCAnVmVyc2F0aWxlJ10gfSxcbiAgICBdO1xuXG4gICAgY29uc3QgZGlzcGxheWVkSW5ncmVkaWVudHMgPSBpbmdyZWRpZW50cy5zbGljZSgwLCBtYXhEaXNwbGF5ZWQpO1xuXG4gICAgY29uc3QgdG9nZ2xlSW5ncmVkaWVudCA9IChpbmdyZWRpZW50OiBzdHJpbmcpID0+IHtcbiAgICAgIHNldFNlbGVjdGVkSW5ncmVkaWVudHMocHJldiA9PlxuICAgICAgICB2b2lkIHByZXYuaW5jbHVkZXMoaW5ncmVkaWVudCkgPyBwcmV2LmZpbHRlcihpID0+IGkgIT09IGluZ3JlZGllbnQpIDogWy4uLnByZXYsIGluZ3JlZGllbnRdLFxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgY29uc3QgdG9nZ2xlRXhwYW5kZWQgPSAoaW5ncmVkaWVudDogc3RyaW5nKSA9PiB7XG4gICAgICBzZXRFeHBhbmRlZEluZ3JlZGllbnQocHJldiA9PiAocHJldiA9PT0gaW5ncmVkaWVudCA/IG51bGwgOiBpbmdyZWRpZW50KSk7XG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGRhdGEtdGVzdGlkPSdpbmdyZWRpZW50LXJlY29tbWVuZGVyJz5cbiAgICAgICAgPGgzPkluZ3JlZGllbnQgUmVjb21tZW5kYXRpb25zPC9oMz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2luZ3JlZGllbnQtZ3JpZCc+XG4gICAgICAgICAge2Rpc3BsYXllZEluZ3JlZGllbnRzLm1hcChpbmdyZWRpZW50ID0+IChcbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAga2V5PXtpbmdyZWRpZW50Lm5hbWV9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT0naW5ncmVkaWVudC1jYXJkJ1xuICAgICAgICAgICAgICBkYXRhLXRlc3RpZD17YGluZ3JlZGllbnQtY2FyZC0ke2luZ3JlZGllbnQubmFtZS50b0xvd2VyQ2FzZSgpfWB9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0b2dnbGVJbmdyZWRpZW50KGluZ3JlZGllbnQubmFtZSl9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzZWxlY3RlZEluZ3JlZGllbnRzLmluY2x1ZGVzKGluZ3JlZGllbnQubmFtZSkgPyAnc2VsZWN0ZWQnIDogJyd9XG4gICAgICAgICAgICAgICAgZGF0YS10ZXN0aWQ9e2BpbmdyZWRpZW50LSR7aW5ncmVkaWVudC5uYW1lLnRvTG93ZXJDYXNlKCl9YH1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtpbmdyZWRpZW50Lm5hbWV9XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdG9nZ2xlRXhwYW5kZWQoaW5ncmVkaWVudC5uYW1lKX1cbiAgICAgICAgICAgICAgICBkYXRhLXRlc3RpZD17YGV4cGFuZC0ke2luZ3JlZGllbnQubmFtZS50b0xvd2VyQ2FzZSgpfWB9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPSdleHBhbmQtYnV0dG9uJ1xuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge2V4cGFuZGVkSW5ncmVkaWVudCA9PT0gaW5ncmVkaWVudC5uYW1lID8gJ+KWvCcgOiAn4pa2J31cbiAgICAgICAgICAgICAgPC9idXR0b24+XG5cbiAgICAgICAgICAgICAge2V4cGFuZGVkSW5ncmVkaWVudCA9PT0gaW5ncmVkaWVudC5uYW1lICYmIChcbiAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtdGVzdGlkPXtgZGV0YWlscy0ke2luZ3JlZGllbnQubmFtZS50b0xvd2VyQ2FzZSgpfWB9IGNsYXNzTmFtZT0naW5ncmVkaWVudC1kZXRhaWxzJz5cbiAgICAgICAgICAgICAgICAgIDxkaXY+Q2F0ZWdvcnk6IHtpbmdyZWRpZW50LmNhdGVnb3J5fTwvZGl2PlxuICAgICAgICAgICAgICAgICAgPGRpdj5Qcm9wZXJ0aWVzOiB7aW5ncmVkaWVudC5wcm9wZXJ0aWVzLmpvaW4oJywgJyl9PC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAge3NlbGVjdGVkSW5ncmVkaWVudHMubGVuZ3RoID4gMCAmJiAoXG4gICAgICAgICAgPGRpdiBkYXRhLXRlc3RpZD0nc2VsZWN0ZWQtaW5ncmVkaWVudHMtc3VtbWFyeScgY2xhc3NOYW1lPSdzZWxlY3Rpb24tc3VtbWFyeSc+XG4gICAgICAgICAgICA8aDQ+U2VsZWN0ZWQgSW5ncmVkaWVudHMgKHtzZWxlY3RlZEluZ3JlZGllbnRzLmxlbmd0aH0pPC9oND5cbiAgICAgICAgICAgIDxkaXY+e3NlbGVjdGVkSW5ncmVkaWVudHMuam9pbignLCAnKX08L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH07XG59KTtcblxuamVzdC5tb2NrKCdAL2NvbXBvbmVudHMvQ29va2luZ01ldGhvZHNTZWN0aW9uJywgKCkgPT4ge1xuICByZXR1cm4gZnVuY3Rpb24gTW9ja0Nvb2tpbmdNZXRob2RzU2VjdGlvbih7XG4gICAgbWF4RGlzcGxheWVkID0gNixcbiAgICBvblZpZXdNb3JlLFxuICB9OiB7XG4gICAgbWF4RGlzcGxheWVkPzogbnVtYmVyO1xuICAgIG9uVmlld01vcmU/OiAoKSA9PiB2b2lkO1xuICB9KSB7XG4gICAgY29uc3QgW3NlbGVjdGVkTWV0aG9kLCBzZXRTZWxlY3RlZE1ldGhvZF0gPSBSZWFjdC51c2VTdGF0ZTxzdHJpbmcgfCBudWxsPihudWxsKTtcblxuICAgIGNvbnN0IG1ldGhvZHMgPSBbXG4gICAgICB7IG5hbWU6ICdTYXV0w6knLCB0aW1lOiAnNS0xMCBtaW4nLCBkaWZmaWN1bHR5OiAnRWFzeScsIGRlc2NyaXB0aW9uOiAnUXVpY2sgY29va2luZyBpbiBhIHBhbiB3aXRoIG9pbCcgfSxcbiAgICAgIHsgbmFtZTogJ1JvYXN0JywgdGltZTogJzMwLTYwIG1pbicsIGRpZmZpY3VsdHk6ICdNZWRpdW0nLCBkZXNjcmlwdGlvbjogJ0Nvb2tpbmcgaW4gdGhlIG92ZW4gd2l0aCBkcnkgaGVhdCcgfSxcbiAgICAgIHsgbmFtZTogJ0dyaWxsJywgdGltZTogJzEwLTIwIG1pbicsIGRpZmZpY3VsdHk6ICdNZWRpdW0nLCBkZXNjcmlwdGlvbjogJ0Nvb2tpbmcgb3ZlciBkaXJlY3QgaGVhdCcgfSxcbiAgICAgIHsgbmFtZTogJ1N0ZWFtJywgdGltZTogJzEwLTE1IG1pbicsIGRpZmZpY3VsdHk6ICdFYXN5JywgZGVzY3JpcHRpb246ICdDb29raW5nIHdpdGggc3RlYW0gaGVhdCcgfSxcbiAgICAgIHsgbmFtZTogJ0JyYWlzZScsIHRpbWU6ICc2MC0xMjAgbWluJywgZGlmZmljdWx0eTogJ0hhcmQnLCBkZXNjcmlwdGlvbjogJ1Nsb3cgY29va2luZyB3aXRoIGxpcXVpZCcgfSxcbiAgICAgIHsgbmFtZTogJ1N0aXItZnJ5JywgdGltZTogJzUtOCBtaW4nLCBkaWZmaWN1bHR5OiAnTWVkaXVtJywgZGVzY3JpcHRpb246ICdRdWljayBjb29raW5nIHdoaWxlIHN0aXJyaW5nJyB9LFxuICAgIF07XG5cbiAgICBjb25zdCBkaXNwbGF5ZWRNZXRob2RzID0gbWV0aG9kcy5zbGljZSgwLCBtYXhEaXNwbGF5ZWQpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgZGF0YS10ZXN0aWQ9J2Nvb2tpbmctbWV0aG9kcyc+XG4gICAgICAgIDxoMz5Db29raW5nIE1ldGhvZHM8L2gzPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbWV0aG9kcy1ncmlkJz5cbiAgICAgICAgICB7ZGlzcGxheWVkTWV0aG9kcy5tYXAobWV0aG9kID0+IChcbiAgICAgICAgICAgIDxkaXYga2V5PXttZXRob2QubmFtZX0gY2xhc3NOYW1lPSdtZXRob2QtY2FyZCcgZGF0YS10ZXN0aWQ9e2BtZXRob2QtY2FyZC0ke21ldGhvZC5uYW1lLnRvTG93ZXJDYXNlKCl9YH0+XG4gICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRTZWxlY3RlZE1ldGhvZChtZXRob2QubmFtZSl9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzZWxlY3RlZE1ldGhvZCA9PT0gbWV0aG9kLm5hbWUgPyAnc2VsZWN0ZWQnIDogJyd9XG4gICAgICAgICAgICAgICAgZGF0YS10ZXN0aWQ9e2BtZXRob2QtJHttZXRob2QubmFtZS50b0xvd2VyQ2FzZSgpfWB9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8aDQ+e21ldGhvZC5uYW1lfTwvaDQ+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J21ldGhvZC1pbmZvJz5cbiAgICAgICAgICAgICAgICAgIDxkaXY+VGltZToge21ldGhvZC50aW1lfTwvZGl2PlxuICAgICAgICAgICAgICAgICAgPGRpdj5EaWZmaWN1bHR5OiB7bWV0aG9kLmRpZmZpY3VsdHl9PC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuXG4gICAgICAgICAgICAgIHtzZWxlY3RlZE1ldGhvZCA9PT0gbWV0aG9kLm5hbWUgJiYgKFxuICAgICAgICAgICAgICAgIDxkaXYgZGF0YS10ZXN0aWQ9e2BtZXRob2QtZGV0YWlscy0ke21ldGhvZC5uYW1lLnRvTG93ZXJDYXNlKCl9YH0gY2xhc3NOYW1lPSdtZXRob2QtZGV0YWlscyc+XG4gICAgICAgICAgICAgICAgICA8cD57bWV0aG9kLmRlc2NyaXB0aW9ufTwvcD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICkpfVxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e29uVmlld01vcmV9IGRhdGEtdGVzdGlkPSd2aWV3LW1vcmUtbWV0aG9kcycgY2xhc3NOYW1lPSd2aWV3LW1vcmUtYnV0dG9uJz5cbiAgICAgICAgICBWaWV3IEFsbCBDb29raW5nIE1ldGhvZHNcbiAgICAgICAgPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9O1xufSk7XG5cbmplc3QubW9jaygnQC9jb21wb25lbnRzL3JlY2lwZXMvUmVjaXBlQnVpbGRlclNpbXBsZScsICgpID0+IHtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1vY2tSZWNpcGVCdWlsZGVyU2ltcGxlKCkge1xuICAgIGNvbnN0IFtyZWNpcGVOYW1lLCBzZXRSZWNpcGVOYW1lXSA9IFJlYWN0LnVzZVN0YXRlKCcnKTtcbiAgICBjb25zdCBbaW5ncmVkaWVudHMsIHNldEluZ3JlZGllbnRzXSA9IFJlYWN0LnVzZVN0YXRlPEFycmF5PHsgbmFtZTogc3RyaW5nOyBxdWFudGl0eTogc3RyaW5nIH0+PihbXSk7XG4gICAgY29uc3QgW3N0ZXBzLCBzZXRTdGVwc10gPSBSZWFjdC51c2VTdGF0ZTxBcnJheTx7IGluc3RydWN0aW9uOiBzdHJpbmc7IHRpbWluZzogc3RyaW5nIH0+PihbXSk7XG4gICAgY29uc3QgW3NlcnZpbmdzLCBzZXRTZXJ2aW5nc10gPSBSZWFjdC51c2VTdGF0ZSg0KTtcbiAgICBjb25zdCBbcHJlcFRpbWUsIHNldFByZXBUaW1lXSA9IFJlYWN0LnVzZVN0YXRlKDE1KTtcbiAgICBjb25zdCBbY29va1RpbWUsIHNldENvb2tUaW1lXSA9IFJlYWN0LnVzZVN0YXRlKDMwKTtcblxuICAgIGNvbnN0IGFkZEluZ3JlZGllbnQgPSAoKSA9PiB7XG4gICAgICBzZXRJbmdyZWRpZW50cyhwcmV2ID0+IFsuLi5wcmV2LCB7IG5hbWU6ICcnLCBxdWFudGl0eTogJycgfV0pO1xuICAgIH07XG5cbiAgICBjb25zdCB1cGRhdGVJbmdyZWRpZW50ID0gKGluZGV4OiBudW1iZXIsIGZpZWxkOiAnbmFtZScgfCAncXVhbnRpdHknLCB2YWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgICBzZXRJbmdyZWRpZW50cyhwcmV2ID0+IHByZXYubWFwKChpbmcsIGkpID0+IChpID09PSBpbmRleCA/IHsgLi4uaW5nLCBbZmllbGRdOiB2YWx1ZSB9IDogaW5nKSkpO1xuICAgIH07XG5cbiAgICBjb25zdCByZW1vdmVJbmdyZWRpZW50ID0gKGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgIHNldEluZ3JlZGllbnRzKHByZXYgPT4gcHJldi5maWx0ZXIoKF8sIGkpID0+IGkgIT09IGluZGV4KSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGFkZFN0ZXAgPSAoKSA9PiB7XG4gICAgICBzZXRTdGVwcyhwcmV2ID0+IFsuLi5wcmV2LCB7IGluc3RydWN0aW9uOiAnJywgdGltaW5nOiAnJyB9XSk7XG4gICAgfTtcblxuICAgIGNvbnN0IHVwZGF0ZVN0ZXAgPSAoaW5kZXg6IG51bWJlciwgZmllbGQ6ICdpbnN0cnVjdGlvbicgfCAndGltaW5nJywgdmFsdWU6IHN0cmluZykgPT4ge1xuICAgICAgc2V0U3RlcHMocHJldiA9PiBwcmV2Lm1hcCgoc3RlcCwgaSkgPT4gKGkgPT09IGluZGV4ID8geyAuLi5zdGVwLCBbZmllbGRdOiB2YWx1ZSB9IDogc3RlcCkpKTtcbiAgICB9O1xuXG4gICAgY29uc3QgcmVtb3ZlU3RlcCA9IChpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICBzZXRTdGVwcyhwcmV2ID0+IHByZXYuZmlsdGVyKChfLCBpKSA9PiBpICE9PSBpbmRleCkpO1xuICAgIH07XG5cbiAgICBjb25zdCBjYW5TYXZlID1cbiAgICAgIHJlY2lwZU5hbWUudHJpbSgpICYmIGluZ3JlZGllbnRzLnNvbWUoaW5nID0+IGluZy5uYW1lLnRyaW0oKSkgJiYgdm9pZCBzdGVwcy5zb21lKHN0ZXAgPT4gc3RlcC5pbnN0cnVjdGlvbi50cmltKCkpO1xuXG4gICAgY29uc3QgdG90YWxUaW1lID0gcHJlcFRpbWUgKyBjb29rVGltZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGRhdGEtdGVzdGlkPSdyZWNpcGUtYnVpbGRlcic+XG4gICAgICAgIDxoMz5SZWNpcGUgQnVpbGRlcjwvaDM+XG5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J3JlY2lwZS1mb3JtJz5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncmVjaXBlLWhlYWRlcic+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgdHlwZT0ndGV4dCdcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9J1JlY2lwZSBOYW1lJ1xuICAgICAgICAgICAgICB2YWx1ZT17cmVjaXBlTmFtZX1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9e2UgPT4gc2V0UmVjaXBlTmFtZShlLnRhcmdldC52YWx1ZSl9XG4gICAgICAgICAgICAgIGRhdGEtdGVzdGlkPSdyZWNpcGUtbmFtZS1pbnB1dCdcbiAgICAgICAgICAgIC8+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdyZWNpcGUtbWV0YSc+XG4gICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgIHR5cGU9J251bWJlcidcbiAgICAgICAgICAgICAgICB2YWx1ZT17c2VydmluZ3N9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e2UgPT4gc2V0U2VydmluZ3MocGFyc2VJbnQoZS50YXJnZXQudmFsdWUpIHx8IDEpfVxuICAgICAgICAgICAgICAgIGRhdGEtdGVzdGlkPSdzZXJ2aW5ncy1pbnB1dCdcbiAgICAgICAgICAgICAgICBtaW49JzEnXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgIHR5cGU9J251bWJlcidcbiAgICAgICAgICAgICAgICB2YWx1ZT17cHJlcFRpbWV9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e2UgPT4gc2V0UHJlcFRpbWUocGFyc2VJbnQoZS50YXJnZXQudmFsdWUpIHx8IDApfVxuICAgICAgICAgICAgICAgIGRhdGEtdGVzdGlkPSdwcmVwLXRpbWUtaW5wdXQnXG4gICAgICAgICAgICAgICAgbWluPScwJ1xuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICB0eXBlPSdudW1iZXInXG4gICAgICAgICAgICAgICAgdmFsdWU9e2Nvb2tUaW1lfVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IHNldENvb2tUaW1lKHBhcnNlSW50KGUudGFyZ2V0LnZhbHVlKSB8fCAwKX1cbiAgICAgICAgICAgICAgICBkYXRhLXRlc3RpZD0nY29vay10aW1lLWlucHV0J1xuICAgICAgICAgICAgICAgIG1pbj0nMCdcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2luZ3JlZGllbnRzLXNlY3Rpb24nPlxuICAgICAgICAgICAgPGg0PkluZ3JlZGllbnRzPC9oND5cbiAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17YWRkSW5ncmVkaWVudH0gZGF0YS10ZXN0aWQ9J2FkZC1pbmdyZWRpZW50Jz5cbiAgICAgICAgICAgICAgQWRkIEluZ3JlZGllbnRcbiAgICAgICAgICAgIDwvYnV0dG9uPlxuXG4gICAgICAgICAgICB7aW5ncmVkaWVudHMubWFwKChpbmdyZWRpZW50LCBpbmRleCkgPT4gKFxuICAgICAgICAgICAgICA8ZGl2IGtleT17aW5kZXh9IGNsYXNzTmFtZT0naW5ncmVkaWVudC1yb3cnIGRhdGEtdGVzdGlkPXtgaW5ncmVkaWVudC1yb3ctJHtpbmRleH1gfT5cbiAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgIHR5cGU9J3RleHQnXG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0nUXVhbnRpdHknXG4gICAgICAgICAgICAgICAgICB2YWx1ZT17aW5ncmVkaWVudC5xdWFudGl0eX1cbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IHVwZGF0ZUluZ3JlZGllbnQoaW5kZXgsICdxdWFudGl0eScsIGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICAgICAgICAgIGRhdGEtdGVzdGlkPXtgaW5ncmVkaWVudC1xdWFudGl0eS0ke2luZGV4fWB9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgIHR5cGU9J3RleHQnXG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0nSW5ncmVkaWVudCBuYW1lJ1xuICAgICAgICAgICAgICAgICAgdmFsdWU9e2luZ3JlZGllbnQubmFtZX1cbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IHVwZGF0ZUluZ3JlZGllbnQoaW5kZXgsICduYW1lJywgZS50YXJnZXQudmFsdWUpfVxuICAgICAgICAgICAgICAgICAgZGF0YS10ZXN0aWQ9e2BpbmdyZWRpZW50LW5hbWUtJHtpbmRleH1gfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiByZW1vdmVJbmdyZWRpZW50KGluZGV4KX0gZGF0YS10ZXN0aWQ9e2ByZW1vdmUtaW5ncmVkaWVudC0ke2luZGV4fWB9PlxuICAgICAgICAgICAgICAgICAgUmVtb3ZlXG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKSl9XG5cbiAgICAgICAgICAgIDxkaXYgZGF0YS10ZXN0aWQ9J2luZ3JlZGllbnRzLWNvdW50Jz4sIEluZ3JlZGllbnRzOiB7aW5ncmVkaWVudHMubGVuZ3RofTwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3N0ZXBzLXNlY3Rpb24nPlxuICAgICAgICAgICAgPGg0Pkluc3RydWN0aW9uczwvaDQ+XG4gICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2FkZFN0ZXB9IGRhdGEtdGVzdGlkPSdhZGQtc3RlcCc+XG4gICAgICAgICAgICAgIEFkZCBTdGVwXG4gICAgICAgICAgICA8L2J1dHRvbj5cblxuICAgICAgICAgICAge3N0ZXBzLm1hcCgoc3RlcCwgaW5kZXgpID0+IChcbiAgICAgICAgICAgICAgPGRpdiBrZXk9e2luZGV4fSBjbGFzc05hbWU9J3N0ZXAtcm93JyBkYXRhLXRlc3RpZD17YHN0ZXAtcm93LSR7aW5kZXh9YH0+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSdzdGVwLW51bWJlcic+e2luZGV4ICsgMX08L3NwYW4+XG4gICAgICAgICAgICAgICAgPHRleHRhcmVhXG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0nRGVzY3JpYmUgdGhpcyBzdGVwLi4uJ1xuICAgICAgICAgICAgICAgICAgdmFsdWU9e3N0ZXAuaW5zdHJ1Y3Rpb259XG4gICAgICAgICAgICAgICAgICBvbkNoYW5nZT17ZSA9PiB1cGRhdGVTdGVwKGluZGV4LCAnaW5zdHJ1Y3Rpb24nLCBlLnRhcmdldC52YWx1ZSl9XG4gICAgICAgICAgICAgICAgICBkYXRhLXRlc3RpZD17YHN0ZXAtaW5zdHJ1Y3Rpb24tJHtpbmRleH1gfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICB0eXBlPSd0ZXh0J1xuICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9J1RpbWluZydcbiAgICAgICAgICAgICAgICAgIHZhbHVlPXtzdGVwLnRpbWluZ31cbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IHVwZGF0ZVN0ZXAoaW5kZXgsICd0aW1pbmcnLCBlLnRhcmdldC52YWx1ZSl9XG4gICAgICAgICAgICAgICAgICBkYXRhLXRlc3RpZD17YHN0ZXAtdGltaW5nLSR7aW5kZXh9YH1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gcmVtb3ZlU3RlcChpbmRleCl9IGRhdGEtdGVzdGlkPXtgcmVtb3ZlLXN0ZXAtJHtpbmRleH1gfT5cbiAgICAgICAgICAgICAgICAgIFJlbW92ZVxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICkpfVxuXG4gICAgICAgICAgICA8ZGl2IGRhdGEtdGVzdGlkPSdzdGVwcy1jb3VudCc+LCBTdGVwczoge3N0ZXBzLmxlbmd0aH08L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdyZWNpcGUtc3VtbWFyeScgZGF0YS10ZXN0aWQ9J3JlY2lwZS1zdW1tYXJ5Jz5cbiAgICAgICAgICAgIDxoND5SZWNpcGUgU3VtbWFyeTwvaDQ+XG4gICAgICAgICAgICA8ZGl2Pk5hbWU6IHtyZWNpcGVOYW1lIHx8ICdVbnRpdGxlZCBSZWNpcGUnfTwvZGl2PlxuICAgICAgICAgICAgPGRpdj5TZXJ2aW5nczoge3NlcnZpbmdzfTwvZGl2PlxuICAgICAgICAgICAgPGRpdj5Ub3RhbCBUaW1lOiB7dG90YWxUaW1lfSBtaW51dGVzPC9kaXY+XG4gICAgICAgICAgICA8ZGl2PkluZ3JlZGllbnRzOiB7aW5ncmVkaWVudHMubGVuZ3RofTwvZGl2PlxuICAgICAgICAgICAgPGRpdj5TdGVwczoge3N0ZXBzLmxlbmd0aH08L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxidXR0b24gZGlzYWJsZWQ9eyFjYW5TYXZlfSBkYXRhLXRlc3RpZD0nc2F2ZS1yZWNpcGUnIGNsYXNzTmFtZT17Y2FuU2F2ZSA/ICdlbmFibGVkJyA6ICdkaXNhYmxlZCd9PlxuICAgICAgICAgICAgU2F2ZSBSZWNpcGVcbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9O1xufSk7XG5cbmRlc2NyaWJlKCdNYWluIFBhZ2UgRTJFIFdvcmtmbG93cycsICgpID0+IHtcbiAgY29uc3QgbW9ja0FsY2hlbWljYWxDb250ZXh0ID0ge1xuICAgIHN0YXRlOiB7XG4gICAgICBhc3Ryb2xvZ2ljYWxTdGF0ZTogeyBzdW5TaWduOiAnYXJpZXMnIH0sXG4gICAgICBlbGVtZW50YWxTdGF0ZTogeyBGaXJlOiAwLjMsIFdhdGVyOiAwLjIsIEVhcnRoOiAwLjMsIEFpcjogMC4yIH0sXG4gICAgfSxcbiAgICBwbGFuZXRhcnlQb3NpdGlvbnM6IHsgc3VuOiB7IHNpZ246ICdhcmllcycgfSB9LFxuICAgIGlzRGF5dGltZTogdHJ1ZSxcbiAgfTtcblxuICBjb25zdCBtb2NrTmF2aWdhdGlvblN0YXRlID0ge1xuICAgIHNhdmVTdGF0ZTogamVzdC5mbigpLFxuICAgIGdldFN0YXRlOiBqZXN0LmZuKCgpID0+ICh7fSkpLFxuICB9O1xuXG4gIGNvbnN0IG1vY2tTY3JvbGxQcmVzZXJ2YXRpb24gPSB7XG4gICAgcmVzdG9yZVNjcm9sbFBvc2l0aW9uOiBqZXN0LmZuKCksXG4gIH07XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgdm9pZCBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcblxuICAgICh1c2VBbGNoZW1pY2FsIGFzIGplc3QuTW9jaykubW9ja1JldHVyblZhbHVlKG1vY2tBbGNoZW1pY2FsQ29udGV4dCk7XG4gICAgKHVzZU5hdmlnYXRpb25TdGF0ZSBhcyBqZXN0Lk1vY2spLm1vY2tSZXR1cm5WYWx1ZShtb2NrTmF2aWdhdGlvblN0YXRlKTtcbiAgICAodXNlU2Nyb2xsUHJlc2VydmF0aW9uIGFzIGplc3QuTW9jaykubW9ja1JldHVyblZhbHVlKG1vY2tTY3JvbGxQcmVzZXJ2YXRpb24pO1xuICAgICh1c2VBdXRvU3RhdGVDbGVhbnVwIGFzIGplc3QuTW9jaykubW9ja1JldHVyblZhbHVlKHVuZGVmaW5lZCk7XG5cbiAgICAvLyBNb2NrIERPTSBtZXRob2RzXG4gICAgdm9pZCBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnc2Nyb2xsWScsIHsgdmFsdWU6IDAsIHdyaXRhYmxlOiB0cnVlIH0pO1xuICAgIGplc3Quc3B5T24oZG9jdW1lbnQsICdnZXRFbGVtZW50QnlJZCcpLm1vY2tJbXBsZW1lbnRhdGlvbihcbiAgICAgICgpID0+XG4gICAgICAgICh7XG4gICAgICAgICAgc2Nyb2xsSW50b1ZpZXc6IGplc3QuZm4oKSxcbiAgICAgICAgICBzdHlsZToge30sXG4gICAgICAgICAgY2xhc3NMaXN0OiB7IGFkZDogamVzdC5mbigpLCByZW1vdmU6IGplc3QuZm4oKSB9LFxuICAgICAgICB9KSBhcyBhbnksXG4gICAgKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICB2b2lkIGplc3QucmVzdG9yZUFsbE1vY2tzKCk7XG4gIH0pO1xuXG4gIGl0KCdjb21wbGV0ZXMgZnVsbCBtZWFsIHBsYW5uaW5nIHdvcmtmbG93JywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHVzZXIgPSB1c2VyRXZlbnQuc2V0dXAoKTtcblxuICAgIGFjdChhc3luYyAoKSA9PiB7XG4gICAgICByZW5kZXIoPE1haW5QYWdlTGF5b3V0IC8+KTtcbiAgICB9KTtcblxuICAgIC8vIFdhaXQgZm9yIGFsbCBjb21wb25lbnRzIHRvIGxvYWRcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ2N1aXNpbmUtcmVjb21tZW5kZXInKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ2luZ3JlZGllbnQtcmVjb21tZW5kZXInKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ2Nvb2tpbmctbWV0aG9kcycpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgncmVjaXBlLWJ1aWxkZXInKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIC8vIFN0ZXAgMTogU2VsZWN0IGEgY3Vpc2luZVxuICAgIGNvbnN0IGl0YWxpYW5DdWlzaW5lID0gc2NyZWVuLmdldEJ5VGVzdElkKCdpdGFsaWFuLWN1aXNpbmUnKTtcbiAgICB2b2lkIHVzZXIuY2xpY2soaXRhbGlhbkN1aXNpbmUpO1xuXG4gICAgLy8gVmVyaWZ5IGN1aXNpbmUgc2VsZWN0aW9uIGFuZCByZWNpcGUgcmVjb21tZW5kYXRpb25zIGFwcGVhclxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ3JlY2lwZS1yZWNvbW1lbmRhdGlvbnMnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnUmVjb21tZW5kZWQgSXRhbGlhbiBSZWNpcGVzJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG5cbiAgICAvLyBTdGVwIDI6IFNlbGVjdCBpbmdyZWRpZW50c1xuICAgIGNvbnN0IHRvbWF0b2VzID0gc2NyZWVuLmdldEJ5VGVzdElkKCdpbmdyZWRpZW50LXRvbWF0b2VzJyk7XG4gICAgY29uc3QgYmFzaWwgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2luZ3JlZGllbnQtYmFzaWwnKTtcbiAgICBjb25zdCBvbGl2ZU9pbCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnaW5ncmVkaWVudC1vbGl2ZSBvaWwnKTtcblxuICAgIHZvaWQgdXNlci5jbGljayh0b21hdG9lcyk7XG4gICAgdm9pZCB1c2VyLmNsaWNrKGJhc2lsKTtcbiAgICB2b2lkIHVzZXIuY2xpY2sob2xpdmVPaWwpO1xuXG4gICAgLy8gVmVyaWZ5IGluZ3JlZGllbnQgc2VsZWN0aW9uXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnc2VsZWN0ZWQtaW5ncmVkaWVudHMtc3VtbWFyeScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdTZWxlY3RlZCBJbmdyZWRpZW50cyAoMyknKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcblxuICAgIC8vIFN0ZXAgMzogU2VsZWN0IGNvb2tpbmcgbWV0aG9kXG4gICAgY29uc3Qgc2F1dGVNZXRob2QgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ21ldGhvZC1zYXV0w6knKTtcbiAgICB2b2lkIHVzZXIuY2xpY2soc2F1dGVNZXRob2QpO1xuXG4gICAgLy8gVmVyaWZ5IG1ldGhvZCBzZWxlY3Rpb24gYW5kIGRldGFpbHNcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdtZXRob2QtZGV0YWlscy1zYXV0w6knKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcblxuICAgIC8vIFN0ZXAgNDogQnVpbGQgYSByZWNpcGVcbiAgICBjb25zdCByZWNpcGVOYW1lSW5wdXQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ3JlY2lwZS1uYW1lLWlucHV0Jyk7XG4gICAgdm9pZCB1c2VyLnR5cGUocmVjaXBlTmFtZUlucHV0LCAnSXRhbGlhbiBUb21hdG8gQmFzaWwgU2F1dMOpJyk7XG5cbiAgICAvLyBBZGQgaW5ncmVkaWVudHMgdG8gcmVjaXBlXG4gICAgY29uc3QgYWRkSW5ncmVkaWVudEJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnYWRkLWluZ3JlZGllbnQnKTtcbiAgICB2b2lkIHVzZXIuY2xpY2soYWRkSW5ncmVkaWVudEJ1dHRvbik7XG4gICAgdm9pZCB1c2VyLmNsaWNrKGFkZEluZ3JlZGllbnRCdXR0b24pO1xuICAgIHZvaWQgdXNlci5jbGljayhhZGRJbmdyZWRpZW50QnV0dG9uKTtcblxuICAgIC8vIEZpbGwgaW4gaW5ncmVkaWVudCBkZXRhaWxzXG4gICAgdm9pZCB1c2VyLnR5cGUoc2NyZWVuLmdldEJ5VGVzdElkKCdpbmdyZWRpZW50LXF1YW50aXR5LTAnKSwgJzIgY3VwcycpO1xuICAgIHZvaWQgdXNlci50eXBlKHNjcmVlbi5nZXRCeVRlc3RJZCgnaW5ncmVkaWVudC1uYW1lLTAnKSwgJ0ZyZXNoIFRvbWF0b2VzJyk7XG5cbiAgICB2b2lkIHVzZXIudHlwZShzY3JlZW4uZ2V0QnlUZXN0SWQoJ2luZ3JlZGllbnQtcXVhbnRpdHktMScpLCAnMS80IGN1cCcpO1xuICAgIHZvaWQgdXNlci50eXBlKHNjcmVlbi5nZXRCeVRlc3RJZCgnaW5ncmVkaWVudC1uYW1lLTEnKSwgJ0ZyZXNoIEJhc2lsJyk7XG5cbiAgICB2b2lkIHVzZXIudHlwZShzY3JlZW4uZ2V0QnlUZXN0SWQoJ2luZ3JlZGllbnQtcXVhbnRpdHktMicpLCAnMiB0YnNwJyk7XG4gICAgdm9pZCB1c2VyLnR5cGUoc2NyZWVuLmdldEJ5VGVzdElkKCdpbmdyZWRpZW50LW5hbWUtMicpLCAnT2xpdmUgT2lsJyk7XG5cbiAgICAvLyBBZGQgY29va2luZyBzdGVwc1xuICAgIGNvbnN0IGFkZFN0ZXBCdXR0b24gPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2FkZC1zdGVwJyk7XG4gICAgdm9pZCB1c2VyLmNsaWNrKGFkZFN0ZXBCdXR0b24pO1xuICAgIHZvaWQgdXNlci5jbGljayhhZGRTdGVwQnV0dG9uKTtcblxuICAgIHVzZXIudHlwZShzY3JlZW4uZ2V0QnlUZXN0SWQoJ3N0ZXAtaW5zdHJ1Y3Rpb24tMCcpLCAnSGVhdCBvbGl2ZSBvaWwgaW4gYSBsYXJnZSBwYW4gb3ZlciBtZWRpdW0gaGVhdCcpO1xuICAgIHZvaWQgdXNlci50eXBlKHNjcmVlbi5nZXRCeVRlc3RJZCgnc3RlcC10aW1pbmctMCcpLCAnMiBtaW4nKTtcblxuICAgIHVzZXIudHlwZShzY3JlZW4uZ2V0QnlUZXN0SWQoJ3N0ZXAtaW5zdHJ1Y3Rpb24tMScpLCAnQWRkIHRvbWF0b2VzIGFuZCBiYXNpbCwgc2F1dMOpIHVudGlsIHRlbmRlcicpO1xuICAgIHZvaWQgdXNlci50eXBlKHNjcmVlbi5nZXRCeVRlc3RJZCgnc3RlcC10aW1pbmctMScpLCAnOCBtaW4nKTtcblxuICAgIC8vIFZlcmlmeSByZWNpcGUgY2FuIGJlIHNhdmVkXG4gICAgY29uc3Qgc2F2ZUJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnc2F2ZS1yZWNpcGUnKTtcbiAgICBleHBlY3Qoc2F2ZUJ1dHRvbikudG9CZUVuYWJsZWQoKTtcblxuICAgIC8vIFNhdmUgdGhlIHJlY2lwZVxuICAgIHZvaWQgdXNlci5jbGljayhzYXZlQnV0dG9uKTtcblxuICAgIC8vIFZlcmlmeSB0aGUgY29tcGxldGUgd29ya2Zsb3dcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5RGlzcGxheVZhbHVlKCdJdGFsaWFuIFRvbWF0byBCYXNpbCBTYXV0w6knKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnSW5ncmVkaWVudHM6IDMnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnU3RlcHM6IDInKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgaXQoJ2hhbmRsZXMgaW5ncmVkaWVudCBleHBsb3JhdGlvbiB3b3JrZmxvdycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB1c2VyID0gdXNlckV2ZW50LnNldHVwKCk7XG5cbiAgICBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgcmVuZGVyKDxNYWluUGFnZUxheW91dCAvPik7XG4gICAgfSk7XG5cbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ2luZ3JlZGllbnQtcmVjb21tZW5kZXInKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIC8vIEV4cGFuZCBpbmdyZWRpZW50IGRldGFpbHNcbiAgICBjb25zdCBleHBhbmRUb21hdG9lcyA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnZXhwYW5kLXRvbWF0b2VzJyk7XG4gICAgdm9pZCB1c2VyLmNsaWNrKGV4cGFuZFRvbWF0b2VzKTtcblxuICAgIC8vIFZlcmlmeSBkZXRhaWxzIGFyZSBzaG93blxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ2RldGFpbHMtdG9tYXRvZXMnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnQ2F0ZWdvcnk6IFZlZ2V0YWJsZXMnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnUHJvcGVydGllczogVW1hbWksIEFjaWRpYywgRnJlc2gnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcblxuICAgIC8vIEV4cGFuZCBhbm90aGVyIGluZ3JlZGllbnRcbiAgICBjb25zdCBleHBhbmRHYXJsaWMgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2V4cGFuZC1nYXJsaWMnKTtcbiAgICB2b2lkIHVzZXIuY2xpY2soZXhwYW5kR2FybGljKTtcblxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ2RldGFpbHMtZ2FybGljJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ0NhdGVnb3J5OiBBcm9tYXRpY3MnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcblxuICAgIC8vIENvbGxhcHNlIGZpcnN0IGluZ3JlZGllbnRcbiAgICB2b2lkIHVzZXIuY2xpY2soZXhwYW5kVG9tYXRvZXMpO1xuICAgIGV4cGVjdChzY3JlZW4ucXVlcnlCeVRlc3RJZCgnZGV0YWlscy10b21hdG9lcycpKS5ub3QudG9CZUluVGhlRG9jdW1lbnQoKTtcblxuICAgIC8vIFNlbGVjdCBtdWx0aXBsZSBpbmdyZWRpZW50c1xuICAgIHZvaWQgdXNlci5jbGljayhzY3JlZW4uZ2V0QnlUZXN0SWQoJ2luZ3JlZGllbnQtdG9tYXRvZXMnKSk7XG4gICAgdm9pZCB1c2VyLmNsaWNrKHNjcmVlbi5nZXRCeVRlc3RJZCgnaW5ncmVkaWVudC1nYXJsaWMnKSk7XG4gICAgdm9pZCB1c2VyLmNsaWNrKHNjcmVlbi5nZXRCeVRlc3RJZCgnaW5ncmVkaWVudC1iYXNpbCcpKTtcblxuICAgIC8vIFZlcmlmeSBzZWxlY3Rpb24gc3VtbWFyeVxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdTZWxlY3RlZCBJbmdyZWRpZW50cyAoMyknKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnVG9tYXRvZXMsIEdhcmxpYywgQmFzaWwnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgaXQoJ2hhbmRsZXMgY29va2luZyBtZXRob2QgZXhwbG9yYXRpb24gd29ya2Zsb3cnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgdXNlciA9IHVzZXJFdmVudC5zZXR1cCgpO1xuXG4gICAgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIHJlbmRlcig8TWFpblBhZ2VMYXlvdXQgLz4pO1xuICAgIH0pO1xuXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdjb29raW5nLW1ldGhvZHMnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIC8vIFNlbGVjdCBkaWZmZXJlbnQgY29va2luZyBtZXRob2RzIGFuZCB2aWV3IGRldGFpbHNcbiAgICBjb25zdCByb2FzdE1ldGhvZCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnbWV0aG9kLXJvYXN0Jyk7XG4gICAgdm9pZCB1c2VyLmNsaWNrKHJvYXN0TWV0aG9kKTtcblxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ21ldGhvZC1kZXRhaWxzLXJvYXN0JykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ0Nvb2tpbmcgaW4gdGhlIG92ZW4gd2l0aCBkcnkgaGVhdCcpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuXG4gICAgLy8gU3dpdGNoIHRvIGFub3RoZXIgbWV0aG9kXG4gICAgY29uc3QgZ3JpbGxNZXRob2QgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ21ldGhvZC1ncmlsbCcpO1xuICAgIHZvaWQgdXNlci5jbGljayhncmlsbE1ldGhvZCk7XG5cbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdtZXRob2QtZGV0YWlscy1ncmlsbCcpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdDb29raW5nIG92ZXIgZGlyZWN0IGhlYXQnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcblxuICAgIC8vIFByZXZpb3VzIG1ldGhvZCBkZXRhaWxzIHNob3VsZCBiZSBoaWRkZW5cbiAgICBleHBlY3Qoc2NyZWVuLnF1ZXJ5QnlUZXN0SWQoJ21ldGhvZC1kZXRhaWxzLXJvYXN0JykpLm5vdC50b0JlSW5UaGVEb2N1bWVudCgpO1xuXG4gICAgLy8gVGVzdCB2aWV3IG1vcmUgZnVuY3Rpb25hbGl0eVxuICAgIGNvbnN0IHZpZXdNb3JlQnV0dG9uID0gc2NyZWVuLmdldEJ5VGVzdElkKCd2aWV3LW1vcmUtbWV0aG9kcycpO1xuICAgIGV4cGVjdCh2aWV3TW9yZUJ1dHRvbikudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgaXQoJ2hhbmRsZXMgY29tcGxldGUgcmVjaXBlIGNyZWF0aW9uIHdvcmtmbG93JywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHVzZXIgPSB1c2VyRXZlbnQuc2V0dXAoKTtcblxuICAgIGFjdChhc3luYyAoKSA9PiB7XG4gICAgICByZW5kZXIoPE1haW5QYWdlTGF5b3V0IC8+KTtcbiAgICB9KTtcblxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgncmVjaXBlLWJ1aWxkZXInKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIC8vIENyZWF0ZSBhIGNvbXBsZXRlIHJlY2lwZSBmcm9tIHNjcmF0Y2hcbiAgICBjb25zdCByZWNpcGVOYW1lSW5wdXQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ3JlY2lwZS1uYW1lLWlucHV0Jyk7XG4gICAgdm9pZCB1c2VyLnR5cGUocmVjaXBlTmFtZUlucHV0LCAnTWVkaXRlcnJhbmVhbiBDaGlja2VuJyk7XG5cbiAgICAvLyBVcGRhdGUgcmVjaXBlIG1ldGFkYXRhXG4gICAgY29uc3Qgc2VydmluZ3NJbnB1dCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnc2VydmluZ3MtaW5wdXQnKTtcbiAgICBjb25zdCBwcmVwVGltZUlucHV0ID0gc2NyZWVuLmdldEJ5VGVzdElkKCdwcmVwLXRpbWUtaW5wdXQnKTtcbiAgICBjb25zdCBjb29rVGltZUlucHV0ID0gc2NyZWVuLmdldEJ5VGVzdElkKCdjb29rLXRpbWUtaW5wdXQnKTtcblxuICAgIHZvaWQgdXNlci5jbGVhcihzZXJ2aW5nc0lucHV0KTtcbiAgICB2b2lkIHVzZXIudHlwZShzZXJ2aW5nc0lucHV0LCAnNicpO1xuXG4gICAgdm9pZCB1c2VyLmNsZWFyKHByZXBUaW1lSW5wdXQpO1xuICAgIHZvaWQgdXNlci50eXBlKHByZXBUaW1lSW5wdXQsICcyMCcpO1xuXG4gICAgdm9pZCB1c2VyLmNsZWFyKGNvb2tUaW1lSW5wdXQpO1xuICAgIHZvaWQgdXNlci50eXBlKGNvb2tUaW1lSW5wdXQsICc0NScpO1xuXG4gICAgLy8gQWRkIG11bHRpcGxlIGluZ3JlZGllbnRzXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgIHZvaWQgdXNlci5jbGljayhzY3JlZW4uZ2V0QnlUZXN0SWQoJ2FkZC1pbmdyZWRpZW50JykpO1xuICAgIH1cblxuICAgIGNvbnN0IGluZ3JlZGllbnRzID0gW1xuICAgICAgeyBxdWFudGl0eTogJzIgbGJzJywgbmFtZTogJ0NoaWNrZW4gQnJlYXN0JyB9LFxuICAgICAgeyBxdWFudGl0eTogJzEgY3VwJywgbmFtZTogJ0NoZXJyeSBUb21hdG9lcycgfSxcbiAgICAgIHsgcXVhbnRpdHk6ICcxLzIgY3VwJywgbmFtZTogJ0thbGFtYXRhIE9saXZlcycgfSxcbiAgICAgIHsgcXVhbnRpdHk6ICcxLzQgY3VwJywgbmFtZTogJ09saXZlIE9pbCcgfSxcbiAgICBdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbmdyZWRpZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdm9pZCB1c2VyLnR5cGUoc2NyZWVuLmdldEJ5VGVzdElkKGBpbmdyZWRpZW50LXF1YW50aXR5LSR7aX1gKSwgaW5ncmVkaWVudHNbaV0ucXVhbnRpdHkpO1xuICAgICAgdm9pZCB1c2VyLnR5cGUoc2NyZWVuLmdldEJ5VGVzdElkKGBpbmdyZWRpZW50LW5hbWUtJHtpfWApLCBpbmdyZWRpZW50c1tpXS5uYW1lKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgY29va2luZyBzdGVwc1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgICB2b2lkIHVzZXIuY2xpY2soc2NyZWVuLmdldEJ5VGVzdElkKCdhZGQtc3RlcCcpKTtcbiAgICB9XG5cbiAgICBjb25zdCBzdGVwcyA9IFtcbiAgICAgIHsgaW5zdHJ1Y3Rpb246ICdQcmVoZWF0IG92ZW4gdG8gMzc1wrBGIGFuZCBwcmVwYXJlIGNoaWNrZW4nLCB0aW1pbmc6ICc1IG1pbicgfSxcbiAgICAgIHsgaW5zdHJ1Y3Rpb246ICdTZWFyIGNoaWNrZW4gaW4gb2xpdmUgb2lsIHVudGlsIGdvbGRlbicsIHRpbWluZzogJzEwIG1pbicgfSxcbiAgICAgIHsgaW5zdHJ1Y3Rpb246ICdBZGQgdG9tYXRvZXMgYW5kIG9saXZlcywgYmFrZSB1bnRpbCBkb25lJywgdGltaW5nOiAnMzAgbWluJyB9LFxuICAgIF07XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ZXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2b2lkIHVzZXIudHlwZShzY3JlZW4uZ2V0QnlUZXN0SWQoYHN0ZXAtaW5zdHJ1Y3Rpb24tJHtpfWApLCBzdGVwc1tpXS5pbnN0cnVjdGlvbik7XG4gICAgICB2b2lkIHVzZXIudHlwZShzY3JlZW4uZ2V0QnlUZXN0SWQoYHN0ZXAtdGltaW5nLSR7aX1gKSwgc3RlcHNbaV0udGltaW5nKTtcbiAgICB9XG5cbiAgICAvLyBWZXJpZnkgcmVjaXBlIHN1bW1hcnlcbiAgICBjb25zdCBzdW1tYXJ5ID0gc2NyZWVuLmdldEJ5VGVzdElkKCdyZWNpcGUtc3VtbWFyeScpO1xuICAgIGV4cGVjdChzdW1tYXJ5KS50b0hhdmVUZXh0Q29udGVudCgnTmFtZTogTWVkaXRlcnJhbmVhbiBDaGlja2VuJyk7XG4gICAgZXhwZWN0KHN1bW1hcnkpLnRvSGF2ZVRleHRDb250ZW50KCdTZXJ2aW5nczogNicpO1xuICAgIGV4cGVjdChzdW1tYXJ5KS50b0hhdmVUZXh0Q29udGVudCgnVG90YWwgVGltZTogNjUgbWludXRlcycpO1xuICAgIGV4cGVjdChzdW1tYXJ5KS50b0hhdmVUZXh0Q29udGVudCgnSW5ncmVkaWVudHM6IDQnKTtcbiAgICBleHBlY3Qoc3VtbWFyeSkudG9IYXZlVGV4dENvbnRlbnQoJ1N0ZXBzOiAzJyk7XG5cbiAgICAvLyBWZXJpZnkgc2F2ZSBidXR0b24gaXMgZW5hYmxlZFxuICAgIGNvbnN0IHNhdmVCdXR0b24gPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ3NhdmUtcmVjaXBlJyk7XG4gICAgZXhwZWN0KHNhdmVCdXR0b24pLnRvQmVFbmFibGVkKCk7XG4gICAgZXhwZWN0KHNhdmVCdXR0b24pLnRvSGF2ZUNsYXNzKCdlbmFibGVkJyk7XG5cbiAgICAvLyBUZXN0IGluZ3JlZGllbnQgcmVtb3ZhbFxuICAgIHZvaWQgdXNlci5jbGljayhzY3JlZW4uZ2V0QnlUZXN0SWQoJ3JlbW92ZS1pbmdyZWRpZW50LTMnKSk7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ0luZ3JlZGllbnRzOiAzJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG5cbiAgICAvLyBUZXN0IHN0ZXAgcmVtb3ZhbFxuICAgIHZvaWQgdXNlci5jbGljayhzY3JlZW4uZ2V0QnlUZXN0SWQoJ3JlbW92ZS1zdGVwLTAnKSk7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ1N0ZXBzOiAyJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG5cbiAgICAvLyBWZXJpZnkgc3RlcCByZW51bWJlcmluZ1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlEaXNwbGF5VmFsdWUoJ1NlYXIgY2hpY2tlbiBpbiBvbGl2ZSBvaWwgdW50aWwgZ29sZGVuJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gIH0pO1xuXG4gIGl0KCdoYW5kbGVzIG5hdmlnYXRpb24gYW5kIHN0YXRlIHByZXNlcnZhdGlvbiB3b3JrZmxvdycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB1c2VyID0gdXNlckV2ZW50LnNldHVwKCk7XG4gICAgY29uc3QgbW9ja09uU2VjdGlvbk5hdmlnYXRlID0gamVzdC5mbigpO1xuXG4gICAgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIHJlbmRlcig8TWFpblBhZ2VMYXlvdXQgb25TZWN0aW9uTmF2aWdhdGU9e21vY2tPblNlY3Rpb25OYXZpZ2F0ZX0gLz4pO1xuICAgIH0pO1xuXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdjdWlzaW5lLXJlY29tbWVuZGVyJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgfSk7XG5cbiAgICAvLyBNYWtlIHNlbGVjdGlvbnMgYWNyb3NzIGRpZmZlcmVudCBjb21wb25lbnRzXG4gICAgdm9pZCB1c2VyLmNsaWNrKHNjcmVlbi5nZXRCeVRlc3RJZCgnY3Vpc2luZS1pdGFsaWFuJykpO1xuICAgIHZvaWQgdXNlci5jbGljayhzY3JlZW4uZ2V0QnlUZXN0SWQoJ2luZ3JlZGllbnQtdG9tYXRvZXMnKSk7XG4gICAgdm9pZCB1c2VyLmNsaWNrKHNjcmVlbi5nZXRCeVRlc3RJZCgnbWV0aG9kLXNhdXTDqScpKTtcblxuICAgIC8vIE5hdmlnYXRlIGJldHdlZW4gc2VjdGlvbnNcbiAgICBjb25zdCBjdWlzaW5lTmF2QnV0dG9uID0gc2NyZWVuLmdldEJ5VGV4dCgnQ3Vpc2luZSBSZWNvbW1lbmRhdGlvbnMnKTtcbiAgICB2b2lkIHVzZXIuY2xpY2soY3Vpc2luZU5hdkJ1dHRvbik7XG4gICAgZXhwZWN0KG1vY2tPblNlY3Rpb25OYXZpZ2F0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ2N1aXNpbmUnKTtcblxuICAgIGNvbnN0IGluZ3JlZGllbnRzTmF2QnV0dG9uID0gc2NyZWVuLmdldEJ5VGV4dCgnSW5ncmVkaWVudCBSZWNvbW1lbmRhdGlvbnMnKTtcbiAgICB2b2lkIHVzZXIuY2xpY2soaW5ncmVkaWVudHNOYXZCdXR0b24pO1xuICAgIGV4cGVjdChtb2NrT25TZWN0aW9uTmF2aWdhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdpbmdyZWRpZW50cycpO1xuXG4gICAgLy8gVmVyaWZ5IHN0YXRlIHByZXNlcnZhdGlvbiB3YXMgY2FsbGVkXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3QobW9ja05hdmlnYXRpb25TdGF0ZS5zYXZlU3RhdGUpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIC8vIFZlcmlmeSBzZWxlY3Rpb25zIGFyZSBtYWludGFpbmVkIGFmdGVyIG5hdmlnYXRpb25cbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdyZWNpcGUtcmVjb21tZW5kYXRpb25zJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ1NlbGVjdGVkIEluZ3JlZGllbnRzICgxKScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ21ldGhvZC1kZXRhaWxzLXNhdXTDqScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcblxuICBpdCgnaGFuZGxlcyBlcnJvciByZWNvdmVyeSB3b3JrZmxvdycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB1c2VyID0gdXNlckV2ZW50LnNldHVwKCk7XG5cbiAgICAvLyBNb2NrIGNvbnNvbGUuZXJyb3IgdG8gYXZvaWQgbm9pc2VcbiAgICBjb25zdCBjb25zb2xlU3B5ID0gamVzdC5zcHlPbihjb25zb2xlLCAnZXJyb3InKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge30pO1xuXG4gICAgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIHJlbmRlcig8TWFpblBhZ2VMYXlvdXQgLz4pO1xuICAgIH0pO1xuXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdyZWNpcGUtYnVpbGRlcicpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuXG4gICAgLy8gU2ltdWxhdGUgdXNlciBjcmVhdGluZyBhIHJlY2lwZSBhbmQgZW5jb3VudGVyaW5nIGFuIGVycm9yXG4gICAgY29uc3QgcmVjaXBlTmFtZUlucHV0ID0gc2NyZWVuLmdldEJ5VGVzdElkKCdyZWNpcGUtbmFtZS1pbnB1dCcpO1xuICAgIHZvaWQgdXNlci50eXBlKHJlY2lwZU5hbWVJbnB1dCwgJ1Rlc3QgUmVjaXBlJyk7XG5cbiAgICAvLyBBZGQgaW5ncmVkaWVudFxuICAgIHZvaWQgdXNlci5jbGljayhzY3JlZW4uZ2V0QnlUZXN0SWQoJ2FkZC1pbmdyZWRpZW50JykpO1xuICAgIHZvaWQgdXNlci50eXBlKHNjcmVlbi5nZXRCeVRlc3RJZCgnaW5ncmVkaWVudC1uYW1lLTAnKSwgJ1Rlc3QgSW5ncmVkaWVudCcpO1xuXG4gICAgLy8gQWRkIHN0ZXBcbiAgICB2b2lkIHVzZXIuY2xpY2soc2NyZWVuLmdldEJ5VGVzdElkKCdhZGQtc3RlcCcpKTtcbiAgICB2b2lkIHVzZXIudHlwZShzY3JlZW4uZ2V0QnlUZXN0SWQoJ3N0ZXAtaW5zdHJ1Y3Rpb24tMCcpLCAnVGVzdCBzdGVwJyk7XG5cbiAgICAvLyBWZXJpZnkgcmVjaXBlIGlzIHZhbGlkXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnc2F2ZS1yZWNpcGUnKSkudG9CZUVuYWJsZWQoKTtcblxuICAgIC8vIFRoZSBtYWluIHBhZ2Ugc2hvdWxkIGNvbnRpbnVlIHRvIGZ1bmN0aW9uIGRlc3BpdGUgYW55IGVycm9yc1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdXaGF0IHRvIEVhdCBOZXh0JykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgncmVjaXBlLWJ1aWxkZXInKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcblxuICAgIGNvbnNvbGVTcHkubW9ja1Jlc3RvcmUoKTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==