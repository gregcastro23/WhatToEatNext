{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/types/testUtils.ts","mappings":";AAAA;;;;;GAKG","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/types/testUtils.ts"],"sourcesContent":["/**\n * Extended Test Utils Type Definitions\n * \n * Type definitions for the comprehensive test utilities including\n * campaign system mocks and memory management.\n */\n\nimport { ProgressMetrics } from '../../types/campaign';\n\nexport interface GitMock {\n  stash: jest.MockedFunction<() => Promise<string>>;\n  stashPop: jest.MockedFunction<() => Promise<boolean>>;\n  getCurrentBranch: jest.MockedFunction<() => Promise<string>>;\n  hasUncommittedChanges: jest.MockedFunction<() => Promise<boolean>>;\n  getLastCommitHash: jest.MockedFunction<() => Promise<string>>;\n  mockStashes: string[];\n  mockBranch: string;\n  mockGitStatus: {\n    staged: string[];\n    unstaged: string[];\n    untracked: string[];\n  };\n  shouldFailCommands: boolean;\n  setMockBranch: jest.MockedFunction<(branch: string) => void>;\n  setMockStashes: jest.MockedFunction<(stashes: string[]) => void>;\n  setMockGitStatus: jest.MockedFunction<(status: any) => void>;\n  setShouldFailCommands: jest.MockedFunction<(shouldFail: boolean) => void>;\n  addMockStash: jest.MockedFunction<(stashId: string) => void>;\n  removeMockStash: jest.MockedFunction<(stashId: string) => void>;\n  clearMockStashes: jest.MockedFunction<() => void>;\n  getMockStashes: jest.MockedFunction<() => string[]>;\n  simulateGitError: jest.MockedFunction<(command: string, error: string) => void>;\n  resetMocks: jest.MockedFunction<() => void>;\n}\n\nexport interface ScriptMock {\n  executeScript: jest.MockedFunction<(scriptPath: string) => Promise<{ success: boolean; output: string }>>;\n  executeCommand: jest.MockedFunction<(command: string) => Promise<{ stdout: string; stderr: string; exitCode: number }>>;\n  getScriptOutput: jest.MockedFunction<() => string>;\n  mockResults: Record<string, any>;\n  mockBuildSuccess: boolean;\n  mockTestSuccess: boolean;\n  shouldFailExecution: boolean;\n  mockExecutionTime: number;\n  mockMemoryUsage: number;\n  mockErrorOutput: string;\n  mockStdout: string;\n  mockStderr: string;\n  mockExitCode: number;\n  setMockResult: jest.MockedFunction<(scriptPath: string, result: any) => void>;\n  setMockBuildSuccess: jest.MockedFunction<(success: boolean) => void>;\n  setMockTestSuccess: jest.MockedFunction<(success: boolean) => void>;\n  setShouldFailExecution: jest.MockedFunction<(shouldFail: boolean) => void>;\n  setMockExecutionTime: jest.MockedFunction<(time: number) => void>;\n  setMockMemoryUsage: jest.MockedFunction<(usage: number) => void>;\n  setMockOutput: jest.MockedFunction<(stdout: string, stderr: string, exitCode: number) => void>;\n  simulateScriptError: jest.MockedFunction<(scriptPath: string, error: string) => void>;\n  simulateTimeout: jest.MockedFunction<(scriptPath: string, timeout: number) => void>;\n  resetMocks: jest.MockedFunction<() => void>;\n}\n\nexport interface CampaignMock {\n  controller: {\n    executePhase: jest.MockedFunction<any>;\n    validatePhaseCompletion: jest.MockedFunction<any>;\n    createSafetyCheckpoint: jest.MockedFunction<any>;\n    rollbackToCheckpoint: jest.MockedFunction<any>;\n    getProgressMetrics: jest.MockedFunction<any>;\n    pauseCampaign: jest.MockedFunction<any>;\n    resumeCampaign: jest.MockedFunction<any>;\n    isPaused: jest.MockedFunction<any>;\n    isRunning: jest.MockedFunction<any>;\n    getSafetyEvents: jest.MockedFunction<any>;\n    updateMockMetrics: jest.MockedFunction<any>;\n    resetMockState: jest.MockedFunction<any>;\n  };\n  tracker: {\n    getTypeScriptErrorCount: jest.MockedFunction<any>;\n    getTypeScriptErrorBreakdown: jest.MockedFunction<any>;\n    getLintingWarningCount: jest.MockedFunction<any>;\n    getLintingWarningBreakdown: jest.MockedFunction<any>;\n    getBuildTime: jest.MockedFunction<any>;\n    getEnterpriseSystemCount: jest.MockedFunction<any>;\n    getCacheHitRate: jest.MockedFunction<any>;\n    getMemoryUsage: jest.MockedFunction<any>;\n    getProgressMetrics: jest.MockedFunction<any>;\n    generateProgressReport: jest.MockedFunction<any>;\n    startTracking: jest.MockedFunction<any>;\n    stopTracking: jest.MockedFunction<any>;\n    isTrackingActive: jest.MockedFunction<any>;\n    updateMockMetrics: jest.MockedFunction<any>;\n    resetMockState: jest.MockedFunction<any>;\n  };\n  safety: {\n    createStash: jest.MockedFunction<any>;\n    applyStash: jest.MockedFunction<any>;\n    detectCorruption: jest.MockedFunction<any>;\n    validateGitState: jest.MockedFunction<any>;\n    emergencyRollback: jest.MockedFunction<any>;\n    listStashes: jest.MockedFunction<any>;\n    getSafetyEvents: jest.MockedFunction<any>;\n    resetMockState: jest.MockedFunction<any>;\n  };\n  testController: {\n    initializeForTest: jest.MockedFunction<any>;\n    pauseCampaignForTest: jest.MockedFunction<any>;\n    resumeCampaignAfterTest: jest.MockedFunction<any>;\n    cleanupAfterTest: jest.MockedFunction<any>;\n    isPaused: jest.MockedFunction<any>;\n    isIsolated: jest.MockedFunction<any>;\n    getTestState: jest.MockedFunction<any>;\n    simulateProgress: jest.MockedFunction<any>;\n    updateMockMetrics: jest.MockedFunction<any>;\n    validateTestIsolation: jest.MockedFunction<any>;\n    getMockInstances: jest.MockedFunction<any>;\n    getTestSafeTracker: jest.MockedFunction<any>;\n  };\n  isolation: {\n    initializeMockCampaignSystem: jest.MockedFunction<any>;\n    pauseCampaignOperations: jest.MockedFunction<any>;\n    resumeCampaignOperations: jest.MockedFunction<any>;\n    resetAllMockStates: jest.MockedFunction<any>;\n    restoreEnvironment: jest.MockedFunction<any>;\n  };\n  resetAllMocks: jest.MockedFunction<() => void>;\n}\n\nexport interface ExtendedTestUtils {\n  // Git operations mock\n  gitMock: GitMock;\n  \n  // Script execution mock\n  scriptMock: ScriptMock;\n  \n  // Campaign system mock\n  campaignMock: CampaignMock;\n  \n  // Helper functions\n  waitForAsync: (ms?: number) => Promise<void>;\n  createMockFunction: (returnValue?: any) => jest.MockedFunction<any>;\n  createMockComponent: (name: string, testId?: string) => React.ComponentType<any>;\n  \n  // Memory management utilities\n  checkMemory: () => {\n    heapUsed: string;\n    heapTotal: string;\n    external: string;\n    arrayBuffers: string;\n  };\n  cleanupMemory: () => any;\n  \n  // Mock file creation utilities\n  createMockCorruptedFile: (content: string) => string;\n  createMockTypeScriptErrors: (count: number) => string;\n  createMockLintingWarnings: (count: number) => string;\n  createMockProgressMetrics: (overrides?: any) => ProgressMetrics;\n  \n  // Campaign test utilities\n  setupCampaignTest: (testName: string, config?: any) => Promise<{\n    controller: any;\n    tracker: any;\n    safety: any;\n    testController: any;\n    testSafeTracker: any;\n  }>;\n  cleanupCampaignTest: (testName: string) => Promise<void>;\n}\n\nexport default ExtendedTestUtils;"],"version":3}