c11ae2f211e2077e9e7057edffe97009
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getVegetablesByCookingMethod = exports.getSeasonalVegetables = exports.getVegetablesBySubCategory = exports.legumes = exports.starchyVegetables = exports.squash = exports.alliums = exports.nightshades = exports.cruciferous = exports.roots = exports.leafyGreens = exports.standardizedVegetables = exports.enhancedVegetables = exports.vegetables = void 0;
const leafyGreens_1 = require("./leafyGreens");
Object.defineProperty(exports, "leafyGreens", { enumerable: true, get: function () { return leafyGreens_1.leafyGreens; } });
const roots_1 = require("./roots");
Object.defineProperty(exports, "roots", { enumerable: true, get: function () { return roots_1.roots; } });
const cruciferous_1 = require("./cruciferous");
Object.defineProperty(exports, "cruciferous", { enumerable: true, get: function () { return cruciferous_1.cruciferous; } });
const nightshades_1 = require("./nightshades");
Object.defineProperty(exports, "nightshades", { enumerable: true, get: function () { return nightshades_1.nightshades; } });
const alliums_1 = require("./alliums");
Object.defineProperty(exports, "alliums", { enumerable: true, get: function () { return alliums_1.alliums; } });
const squash_1 = require("./squash");
Object.defineProperty(exports, "squash", { enumerable: true, get: function () { return squash_1.squash; } });
const starchy_1 = require("./starchy");
Object.defineProperty(exports, "starchyVegetables", { enumerable: true, get: function () { return starchy_1.starchyVegetables; } });
const legumes_1 = require("./legumes");
Object.defineProperty(exports, "legumes", { enumerable: true, get: function () { return legumes_1.legumes; } });
const elementalUtils_1 = require("@/utils/elementalUtils");
// Combine all vegetable categories
exports.vegetables = (0, elementalUtils_1.fixIngredientMappings)({
    ...leafyGreens_1.leafyGreens,
    ...roots_1.roots,
    ...cruciferous_1.cruciferous,
    ...nightshades_1.nightshades,
    ...alliums_1.alliums,
    ...squash_1.squash,
    ...starchy_1.starchyVegetables,
    ...legumes_1.legumes
});
// Create enhanced vegetables with additional properties
exports.enhancedVegetables = exports.vegetables;
// For standardization - both exports refer to the same object
exports.standardizedVegetables = exports.vegetables;
// Helper functions
const getVegetablesBySubCategory = (subCategory) => {
    return Object.entries(exports.vegetables)
        .filter(([_, value]) => value.subCategory === subCategory)
        .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});
};
exports.getVegetablesBySubCategory = getVegetablesBySubCategory;
const getSeasonalVegetables = (season) => {
    return Object.entries(exports.vegetables)
        .filter(([_, value]) => Array.isArray(value.season) && value.season.includes(season))
        .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});
};
exports.getSeasonalVegetables = getSeasonalVegetables;
const getVegetablesByCookingMethod = (method) => {
    return Object.entries(exports.vegetables)
        .filter(([_, value]) => Array.isArray(value.cookingMethods) && value.cookingMethods.includes(method))
        .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});
};
exports.getVegetablesByCookingMethod = getVegetablesByCookingMethod;
exports.default = roots_1.roots;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9kYXRhL2luZ3JlZGllbnRzL3ZlZ2V0YWJsZXMvaW5kZXgudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsK0NBQTRDO0FBOEIxQyw0RkE5Qk8seUJBQVcsT0E4QlA7QUE3QmIsbUNBQWdDO0FBOEI5QixzRkE5Qk8sYUFBSyxPQThCUDtBQTdCUCwrQ0FBNEM7QUE4QjFDLDRGQTlCTyx5QkFBVyxPQThCUDtBQTdCYiwrQ0FBNEM7QUE4QjFDLDRGQTlCTyx5QkFBVyxPQThCUDtBQTdCYix1Q0FBb0M7QUE4QmxDLHdGQTlCTyxpQkFBTyxPQThCUDtBQTdCVCxxQ0FBa0M7QUE4QmhDLHVGQTlCTyxlQUFNLE9BOEJQO0FBN0JSLHVDQUE4QztBQThCNUMsa0dBOUJPLDJCQUFpQixPQThCUDtBQTdCbkIsdUNBQW9DO0FBOEJsQyx3RkE5Qk8saUJBQU8sT0E4QlA7QUE3QlQsMkRBQStEO0FBRS9ELG1DQUFtQztBQUN0QixRQUFBLFVBQVUsR0FBc0MsSUFBQSxzQ0FBcUIsRUFBQztJQUNqRixHQUFHLHlCQUFXO0lBQ2QsR0FBRyxhQUFLO0lBQ1IsR0FBRyx5QkFBVztJQUNkLEdBQUcseUJBQVc7SUFDZCxHQUFHLGlCQUFPO0lBQ1YsR0FBRyxlQUFNO0lBQ1QsR0FBRywyQkFBaUI7SUFDcEIsR0FBRyxpQkFBTztDQUNYLENBQUMsQ0FBQztBQUVILHdEQUF3RDtBQUMzQyxRQUFBLGtCQUFrQixHQUFHLGtCQUFVLENBQUM7QUFFN0MsOERBQThEO0FBQ2pELFFBQUEsc0JBQXNCLEdBQUcsa0JBQVUsQ0FBQztBQWNqRCxtQkFBbUI7QUFDWixNQUFNLDBCQUEwQixHQUFHLENBQUMsV0FBbUIsRUFBcUMsRUFBRTtJQUNuRyxPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsa0JBQVUsQ0FBQztTQUM5QixNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFdBQVcsS0FBSyxXQUFXLENBQUM7U0FDekQsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ25FLENBQUMsQ0FBQztBQUpXLFFBQUEsMEJBQTBCLDhCQUlyQztBQUVLLE1BQU0scUJBQXFCLEdBQUcsQ0FBQyxNQUFjLEVBQXFDLEVBQUU7SUFDekYsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLGtCQUFVLENBQUM7U0FDOUIsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3BGLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNuRSxDQUFDLENBQUM7QUFKVyxRQUFBLHFCQUFxQix5QkFJaEM7QUFFSyxNQUFNLDRCQUE0QixHQUFHLENBQUMsTUFBYyxFQUFxQyxFQUFFO0lBQ2hHLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxrQkFBVSxDQUFDO1NBQzlCLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNwRyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDbkUsQ0FBQyxDQUFDO0FBSlcsUUFBQSw0QkFBNEIsZ0NBSXZDO0FBRUYsa0JBQWUsYUFBSyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9HcmVnQ2FzdHJvL0Rlc2t0b3AvV2hhdFRvRWF0TmV4dC9zcmMvZGF0YS9pbmdyZWRpZW50cy92ZWdldGFibGVzL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgSW5ncmVkaWVudE1hcHBpbmcgfSBmcm9tICdAL2RhdGEvaW5ncmVkaWVudHMvdHlwZXMnO1xuaW1wb3J0IHsgbGVhZnlHcmVlbnMgfSBmcm9tICcuL2xlYWZ5R3JlZW5zJztcbmltcG9ydCB7IHJvb3RzIH0gZnJvbSAnLi9yb290cyc7XG5pbXBvcnQgeyBjcnVjaWZlcm91cyB9IGZyb20gJy4vY3J1Y2lmZXJvdXMnO1xuaW1wb3J0IHsgbmlnaHRzaGFkZXMgfSBmcm9tICcuL25pZ2h0c2hhZGVzJztcbmltcG9ydCB7IGFsbGl1bXMgfSBmcm9tICcuL2FsbGl1bXMnO1xuaW1wb3J0IHsgc3F1YXNoIH0gZnJvbSAnLi9zcXVhc2gnO1xuaW1wb3J0IHsgc3RhcmNoeVZlZ2V0YWJsZXMgfSBmcm9tICcuL3N0YXJjaHknO1xuaW1wb3J0IHsgbGVndW1lcyB9IGZyb20gJy4vbGVndW1lcyc7XG5pbXBvcnQgeyBmaXhJbmdyZWRpZW50TWFwcGluZ3MgfSBmcm9tICdAL3V0aWxzL2VsZW1lbnRhbFV0aWxzJztcblxuLy8gQ29tYmluZSBhbGwgdmVnZXRhYmxlIGNhdGVnb3JpZXNcbmV4cG9ydCBjb25zdCB2ZWdldGFibGVzOiBSZWNvcmQ8c3RyaW5nLCBJbmdyZWRpZW50TWFwcGluZz4gPSBmaXhJbmdyZWRpZW50TWFwcGluZ3Moe1xuICAuLi5sZWFmeUdyZWVucyxcbiAgLi4ucm9vdHMsXG4gIC4uLmNydWNpZmVyb3VzLFxuICAuLi5uaWdodHNoYWRlcyxcbiAgLi4uYWxsaXVtcyxcbiAgLi4uc3F1YXNoLFxuICAuLi5zdGFyY2h5VmVnZXRhYmxlcyxcbiAgLi4ubGVndW1lc1xufSk7XG5cbi8vIENyZWF0ZSBlbmhhbmNlZCB2ZWdldGFibGVzIHdpdGggYWRkaXRpb25hbCBwcm9wZXJ0aWVzXG5leHBvcnQgY29uc3QgZW5oYW5jZWRWZWdldGFibGVzID0gdmVnZXRhYmxlcztcblxuLy8gRm9yIHN0YW5kYXJkaXphdGlvbiAtIGJvdGggZXhwb3J0cyByZWZlciB0byB0aGUgc2FtZSBvYmplY3RcbmV4cG9ydCBjb25zdCBzdGFuZGFyZGl6ZWRWZWdldGFibGVzID0gdmVnZXRhYmxlcztcblxuLy8gRXhwb3J0IGluZGl2aWR1YWwgY2F0ZWdvcmllc1xuZXhwb3J0IHtcbiAgbGVhZnlHcmVlbnMsXG4gIHJvb3RzLFxuICBjcnVjaWZlcm91cyxcbiAgbmlnaHRzaGFkZXMsXG4gIGFsbGl1bXMsXG4gIHNxdWFzaCxcbiAgc3RhcmNoeVZlZ2V0YWJsZXMsXG4gIGxlZ3VtZXNcbn07XG5cbi8vIEhlbHBlciBmdW5jdGlvbnNcbmV4cG9ydCBjb25zdCBnZXRWZWdldGFibGVzQnlTdWJDYXRlZ29yeSA9IChzdWJDYXRlZ29yeTogc3RyaW5nKTogUmVjb3JkPHN0cmluZywgSW5ncmVkaWVudE1hcHBpbmc+ID0+IHtcbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHZlZ2V0YWJsZXMpXG4gICAgLmZpbHRlcigoW18sIHZhbHVlXSkgPT4gdmFsdWUuc3ViQ2F0ZWdvcnkgPT09IHN1YkNhdGVnb3J5KVxuICAgIC5yZWR1Y2UoKGFjYywgW2tleSwgdmFsdWVdKSA9PiAoeyAuLi5hY2MsIFtrZXldOiB2YWx1ZSB9KSwge30pO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFNlYXNvbmFsVmVnZXRhYmxlcyA9IChzZWFzb246IHN0cmluZyk6IFJlY29yZDxzdHJpbmcsIEluZ3JlZGllbnRNYXBwaW5nPiA9PiB7XG4gIHJldHVybiBPYmplY3QuZW50cmllcyh2ZWdldGFibGVzKVxuICAgIC5maWx0ZXIoKFtfLCB2YWx1ZV0pID0+IEFycmF5LmlzQXJyYXkodmFsdWUuc2Vhc29uKSAmJiB2YWx1ZS5zZWFzb24uaW5jbHVkZXMoc2Vhc29uKSlcbiAgICAucmVkdWNlKChhY2MsIFtrZXksIHZhbHVlXSkgPT4gKHsgLi4uYWNjLCBba2V5XTogdmFsdWUgfSksIHt9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRWZWdldGFibGVzQnlDb29raW5nTWV0aG9kID0gKG1ldGhvZDogc3RyaW5nKTogUmVjb3JkPHN0cmluZywgSW5ncmVkaWVudE1hcHBpbmc+ID0+IHtcbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHZlZ2V0YWJsZXMpXG4gICAgLmZpbHRlcigoW18sIHZhbHVlXSkgPT4gQXJyYXkuaXNBcnJheSh2YWx1ZS5jb29raW5nTWV0aG9kcykgJiYgdmFsdWUuY29va2luZ01ldGhvZHMuaW5jbHVkZXMobWV0aG9kKSlcbiAgICAucmVkdWNlKChhY2MsIFtrZXksIHZhbHVlXSkgPT4gKHsgLi4uYWNjLCBba2V5XTogdmFsdWUgfSksIHt9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHJvb3RzO1xuIl0sInZlcnNpb24iOjN9