60c7a2abc781e5a5605c042d174564ab
"use strict";
/**
 * Bundle Size Optimization System
 * Perfect Codebase Campaign - Phase 4 Implementation
 *
 * Implements comprehensive bundle size optimization with:
 * - Bundle analysis system maintaining 420kB target
 * - Lazy loading validation for selective data fetching
 * - Bundle optimization alerts when size exceeds targets
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BundleSizeOptimizer = void 0;
const child_process_1 = require("child_process");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
class BundleSizeOptimizer {
    constructor() {
        this.TARGET_BUNDLE_SIZE = 420; // kB
        this.TARGET_CHUNK_SIZE = 100; // kB
        this.COMPRESSION_RATIO = 0.7; // Typical gzip compression
        this.alerts = [];
        this.analysisHistory = [];
    }
    /**
     * Analyze bundle size and composition
     */
    async analyzeBundleSize() {
        try {
            console.log('üì¶ Analyzing bundle size...');
            // Get bundle information from build output
            const bundleInfo = await this.getBundleInformation();
            const chunks = await this.analyzeChunks();
            const assets = await this.analyzeAssets();
            const dependencies = await this.analyzeDependencies();
            const totalSize = bundleInfo.totalSize;
            const compressedSize = Math.round(totalSize * this.COMPRESSION_RATIO);
            // Generate recommendations based on analysis
            const recommendations = this.generateBundleRecommendations(totalSize, chunks, assets, dependencies);
            const analysis = {
                totalSize,
                compressedSize,
                chunks,
                assets,
                dependencies,
                recommendations,
            };
            // Store in history
            this.analysisHistory.push(analysis);
            if (this.analysisHistory.length > 20) {
                this.analysisHistory = this.analysisHistory.slice(-10);
            }
            // Check for alerts
            await this.checkBundleSizeAlerts(analysis);
            console.log(`üì¶ Bundle analysis complete: ${totalSize}kB total, ${compressedSize}kB compressed`);
            return analysis;
        }
        catch (error) {
            console.warn(`‚ö†Ô∏è  Bundle analysis failed: ${error.message}`);
            // Return fallback analysis
            return {
                totalSize: 0,
                compressedSize: 0,
                chunks: [],
                assets: [],
                dependencies: [],
                recommendations: ['Bundle analysis failed - check build configuration'],
            };
        }
    }
    /**
     * Get bundle information from build system
     */
    async getBundleInformation() {
        try {
            // Check for Next.js build output
            if (fs.existsSync('.next')) {
                return await this.getNextJsBundleInfo();
            }
            // Check for other build outputs
            const buildDirs = ['dist', 'build', 'out'];
            for (const dir of buildDirs) {
                if (fs.existsSync(dir)) {
                    return await this.getGenericBundleInfo(dir);
                }
            }
            // Fallback: estimate from source code
            return await this.estimateBundleSize();
        }
        catch (error) {
            throw new Error(`Failed to get bundle information: ${error.message}`);
        }
    }
    /**
     * Get Next.js specific bundle information
     */
    async getNextJsBundleInfo() {
        var _a;
        try {
            // Run Next.js build analyzer if available
            if (fs.existsSync('package.json')) {
                const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
                if ((_a = packageJson.dependencies) === null || _a === void 0 ? void 0 : _a['@next/bundle-analyzer']) {
                    // Use bundle analyzer
                    const output = (0, child_process_1.execSync)('yarn analyze 2>/dev/null || echo "analyzer not available"', {
                        encoding: 'utf8',
                        stdio: 'pipe',
                    });
                    if (!output.includes('analyzer not available')) {
                        // Parse analyzer output (simplified)
                        const sizeMatch = output.match(/Total bundle size: (\d+(?:\.\d+)?)\s*kB/);
                        if (sizeMatch) {
                            return { totalSize: parseFloat(sizeMatch[1]) };
                        }
                    }
                }
            }
            // Fallback: calculate from .next directory
            const output = (0, child_process_1.execSync)('du -sk .next/static | cut -f1', {
                encoding: 'utf8',
                stdio: 'pipe',
            });
            const sizeKB = parseInt(output.trim()) || 0;
            return { totalSize: sizeKB };
        }
        catch (error) {
            throw new Error(`Failed to get Next.js bundle info: ${error.message}`);
        }
    }
    /**
     * Get generic bundle information from build directory
     */
    async getGenericBundleInfo(buildDir) {
        try {
            const output = (0, child_process_1.execSync)(`du -sk ${buildDir} | cut -f1`, {
                encoding: 'utf8',
                stdio: 'pipe',
            });
            const sizeKB = parseInt(output.trim()) || 0;
            return { totalSize: sizeKB };
        }
        catch (error) {
            throw new Error(`Failed to get bundle info from ${buildDir}: ${error.message}`);
        }
    }
    /**
     * Estimate bundle size from source code
     */
    async estimateBundleSize() {
        try {
            // Calculate source code size as rough estimate
            const output = (0, child_process_1.execSync)('find src -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" | xargs wc -c | tail -1 | awk \'{print $1}\'', {
                encoding: 'utf8',
                stdio: 'pipe',
            });
            const sourceBytes = parseInt(output.trim()) || 0;
            const estimatedKB = Math.round((sourceBytes / 1024) * 1.5); // Rough estimate with bundling overhead
            console.log(`üì¶ Estimated bundle size from source: ${estimatedKB}kB`);
            return { totalSize: estimatedKB };
        }
        catch (error) {
            console.warn(`‚ö†Ô∏è  Bundle size estimation failed: ${error.message}`);
            return { totalSize: 400 }; // Conservative estimate
        }
    }
    /**
     * Analyze bundle chunks
     */
    async analyzeChunks() {
        try {
            const chunks = [];
            // Check for Next.js chunks
            if (fs.existsSync('.next/static/chunks')) {
                const chunkFiles = fs.readdirSync('.next/static/chunks');
                for (const file of chunkFiles) {
                    if (file.endsWith('.js')) {
                        const filePath = path.join('.next/static/chunks', file);
                        const stats = fs.statSync(filePath);
                        const sizeKB = Math.round(stats.size / 1024);
                        chunks.push({
                            name: file,
                            size: sizeKB,
                            compressedSize: Math.round(sizeKB * this.COMPRESSION_RATIO),
                            modules: [],
                            isLazyLoaded: file.includes('lazy') || file.includes('dynamic'),
                        });
                    }
                }
            }
            return chunks;
        }
        catch (error) {
            console.warn(`‚ö†Ô∏è  Chunk analysis failed: ${error.message}`);
            return [];
        }
    }
    /**
     * Analyze bundle assets
     */
    async analyzeAssets() {
        try {
            const assets = [];
            // Check for static assets
            const assetDirs = [
                '.next/static',
                'public',
                'dist/assets',
                'build/static',
            ];
            for (const dir of assetDirs) {
                if (fs.existsSync(dir)) {
                    const files = this.getAllFiles(dir);
                    for (const file of files) {
                        const stats = fs.statSync(file);
                        const sizeKB = Math.round(stats.size / 1024);
                        const ext = path.extname(file).toLowerCase();
                        let type = 'other';
                        if (['.js', '.mjs'].includes(ext))
                            type = 'js';
                        else if (ext === '.css')
                            type = 'css';
                        else if (['.png', '.jpg', '.jpeg', '.gif', '.svg', '.webp'].includes(ext))
                            type = 'image';
                        else if (['.woff', '.woff2', '.ttf', '.otf'].includes(ext))
                            type = 'font';
                        assets.push({
                            name: path.relative(process.cwd(), file),
                            size: sizeKB,
                            type,
                            optimized: this.isAssetOptimized(file, type),
                        });
                    }
                }
            }
            return assets.sort((a, b) => b.size - a.size); // Sort by size descending
        }
        catch (error) {
            console.warn(`‚ö†Ô∏è  Asset analysis failed: ${error.message}`);
            return [];
        }
    }
    /**
     * Analyze dependencies for bundle impact
     */
    async analyzeDependencies() {
        try {
            const dependencies = [];
            if (!fs.existsSync('package.json')) {
                return dependencies;
            }
            const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            const deps = {
                ...packageJson.dependencies,
                ...packageJson.devDependencies,
            };
            // Analyze major dependencies that impact bundle size
            const heavyDependencies = [
                'react',
                'react-dom',
                'next',
                '@chakra-ui/react',
                'framer-motion',
                'lodash',
                'moment',
                'axios',
                'three',
                'chart.js',
            ];
            for (const [name, version] of Object.entries(deps)) {
                if (heavyDependencies.includes(name) ||
                    this.isLikelyHeavyDependency(name)) {
                    const size = await this.estimateDependencySize(name);
                    const usage = this.analyzeDependencyUsage(name);
                    const alternatives = this.suggestAlternatives(name);
                    dependencies.push({
                        name,
                        size,
                        version: version,
                        usage,
                        alternatives,
                    });
                }
            }
            return dependencies.sort((a, b) => b.size - a.size);
        }
        catch (error) {
            console.warn(`‚ö†Ô∏è  Dependency analysis failed: ${error.message}`);
            return [];
        }
    }
    /**
     * Validate lazy loading implementation
     */
    async validateLazyLoading() {
        try {
            console.log('üîÑ Validating lazy loading implementation...');
            const componentsAnalyzed = await this.countComponents();
            const lazyLoadedComponents = await this.countLazyLoadedComponents();
            const potentialLazyComponents = await this.identifyPotentialLazyComponents();
            const dataFetchingOptimizations = await this.identifyDataFetchingOptimizations();
            const score = Math.round((lazyLoadedComponents / Math.max(componentsAnalyzed, 1)) * 100);
            console.log(`üîÑ Lazy loading validation complete: ${lazyLoadedComponents}/${componentsAnalyzed} components lazy loaded (${score}%)`);
            return {
                componentsAnalyzed,
                lazyLoadedComponents,
                potentialLazyComponents,
                dataFetchingOptimizations,
                score,
            };
        }
        catch (error) {
            console.warn(`‚ö†Ô∏è  Lazy loading validation failed: ${error.message}`);
            return {
                componentsAnalyzed: 0,
                lazyLoadedComponents: 0,
                potentialLazyComponents: [],
                dataFetchingOptimizations: [],
                score: 0,
            };
        }
    }
    /**
     * Check for bundle size alerts
     */
    async checkBundleSizeAlerts(analysis) {
        // Check total bundle size
        if (analysis.totalSize > this.TARGET_BUNDLE_SIZE) {
            this.addAlert({
                type: 'size_exceeded',
                severity: analysis.totalSize > this.TARGET_BUNDLE_SIZE * 1.2
                    ? 'critical'
                    : 'warning',
                message: `Bundle size (${analysis.totalSize}kB) exceeds target (${this.TARGET_BUNDLE_SIZE}kB)`,
                currentValue: analysis.totalSize,
                targetValue: this.TARGET_BUNDLE_SIZE,
                recommendations: [
                    'Enable code splitting for large components',
                    'Implement lazy loading for non-critical features',
                    'Review and optimize large dependencies',
                    'Enable tree shaking for unused code elimination',
                ],
                timestamp: new Date(),
            });
        }
        // Check individual chunks
        for (const chunk of analysis.chunks) {
            if (chunk.size > this.TARGET_CHUNK_SIZE) {
                this.addAlert({
                    type: 'chunk_too_large',
                    severity: 'warning',
                    message: `Chunk ${chunk.name} (${chunk.size}kB) exceeds recommended size (${this.TARGET_CHUNK_SIZE}kB)`,
                    currentValue: chunk.size,
                    targetValue: this.TARGET_CHUNK_SIZE,
                    recommendations: [
                        'Split large chunk into smaller modules',
                        'Implement dynamic imports for heavy components',
                        'Review chunk splitting configuration',
                    ],
                    timestamp: new Date(),
                });
            }
        }
        // Check for unused dependencies
        for (const dep of analysis.dependencies) {
            if (dep.usage === 'optional' && dep.size > 50) {
                this.addAlert({
                    type: 'unused_dependency',
                    severity: 'warning',
                    message: `Large optional dependency ${dep.name} (${dep.size}kB) may be removable`,
                    currentValue: dep.size,
                    targetValue: 0,
                    recommendations: [
                        `Consider removing ${dep.name} if not essential`,
                        ...dep.alternatives.map(alt => `Consider lighter alternative: ${alt}`),
                    ],
                    timestamp: new Date(),
                });
            }
        }
    }
    /**
     * Generate comprehensive bundle optimization report
     */
    async generateOptimizationReport() {
        const analysis = await this.analyzeBundleSize();
        const lazyLoadingValidation = await this.validateLazyLoading();
        // Calculate overall score (0-100)
        const sizeScore = Math.max(0, Math.min(100, (this.TARGET_BUNDLE_SIZE / Math.max(analysis.totalSize, 1)) * 100));
        const lazyLoadingScore = lazyLoadingValidation.score;
        const overallScore = Math.round((sizeScore + lazyLoadingScore) / 2);
        const targetCompliance = analysis.totalSize <= this.TARGET_BUNDLE_SIZE;
        // Generate comprehensive recommendations
        const recommendations = [];
        if (!targetCompliance) {
            recommendations.push(`Reduce bundle size by ${analysis.totalSize - this.TARGET_BUNDLE_SIZE}kB to meet target`);
        }
        if (lazyLoadingScore < 50) {
            recommendations.push('Implement lazy loading for more components to improve initial load time');
        }
        recommendations.push(...analysis.recommendations);
        return {
            timestamp: new Date(),
            analysis,
            lazyLoadingValidation,
            alerts: [...this.alerts],
            overallScore,
            targetCompliance,
            recommendations,
        };
    }
    // Helper methods
    getAllFiles(dir) {
        const files = [];
        try {
            const items = fs.readdirSync(dir);
            for (const item of items) {
                const fullPath = path.join(dir, item);
                const stat = fs.statSync(fullPath);
                if (stat.isDirectory()) {
                    files.push(...this.getAllFiles(fullPath));
                }
                else {
                    files.push(fullPath);
                }
            }
        }
        catch (error) {
            // Ignore directory read errors
        }
        return files;
    }
    isAssetOptimized(filePath, type) {
        const fileName = path.basename(filePath);
        switch (type) {
            case 'image':
                return fileName.includes('.webp') || fileName.includes('optimized');
            case 'js':
                return fileName.includes('.min.') || !fileName.includes('dev');
            case 'css':
                return fileName.includes('.min.') || !fileName.includes('dev');
            default:
                return true;
        }
    }
    isLikelyHeavyDependency(name) {
        const heavyPatterns = [
            'ui',
            'chart',
            'graph',
            'editor',
            'calendar',
            'table',
            'grid',
        ];
        return heavyPatterns.some(pattern => name.toLowerCase().includes(pattern));
    }
    async estimateDependencySize(name) {
        // Simplified size estimation based on common dependencies
        const knownSizes = {
            react: 45,
            'react-dom': 130,
            next: 200,
            '@chakra-ui/react': 150,
            'framer-motion': 100,
            lodash: 70,
            moment: 65,
            axios: 15,
            three: 600,
            'chart.js': 80,
        };
        return knownSizes[name] || 20; // Default estimate
    }
    analyzeDependencyUsage(name) {
        // Simplified usage analysis
        const critical = ['react', 'react-dom', 'next'];
        const important = ['@chakra-ui/react', 'framer-motion'];
        if (critical.includes(name))
            return 'critical';
        if (important.includes(name))
            return 'important';
        return 'optional';
    }
    suggestAlternatives(name) {
        const alternatives = {
            lodash: ['ramda (functional)', 'native ES6 methods'],
            moment: ['date-fns (smaller)', 'dayjs (2kB)'],
            axios: ['fetch API (native)', 'ky (smaller)'],
            'chart.js': ['recharts (React-specific)', 'victory (modular)'],
        };
        return alternatives[name] || [];
    }
    async countComponents() {
        try {
            const output = (0, child_process_1.execSync)('find src -name "*.tsx" -o -name "*.jsx" | wc -l', {
                encoding: 'utf8',
                stdio: 'pipe',
            });
            return parseInt(output.trim()) || 0;
        }
        catch (error) {
            return 0;
        }
    }
    async countLazyLoadedComponents() {
        try {
            const output = (0, child_process_1.execSync)('grep -r "lazy\\|dynamic" src --include="*.tsx" --include="*.jsx" | wc -l', {
                encoding: 'utf8',
                stdio: 'pipe',
            });
            return parseInt(output.trim()) || 0;
        }
        catch (error) {
            return 0;
        }
    }
    async identifyPotentialLazyComponents() {
        try {
            // Find large components that could benefit from lazy loading
            const output = (0, child_process_1.execSync)('find src -name "*.tsx" -exec wc -l {} + | sort -nr | head -10 | awk \'{print $2}\'', {
                encoding: 'utf8',
                stdio: 'pipe',
            });
            return output
                .trim()
                .split('\n')
                .filter(line => line.trim());
        }
        catch (error) {
            return [];
        }
    }
    async identifyDataFetchingOptimizations() {
        const optimizations = [];
        try {
            // Check for potential data fetching optimizations
            const hasUseEffect = (0, child_process_1.execSync)('grep -r "useEffect" src --include="*.tsx" --include="*.jsx" | wc -l', {
                encoding: 'utf8',
                stdio: 'pipe',
            });
            const hasUseSWR = (0, child_process_1.execSync)('grep -r "useSWR\\|useQuery" src --include="*.tsx" --include="*.jsx" | wc -l', {
                encoding: 'utf8',
                stdio: 'pipe',
            });
            const effectCount = parseInt(hasUseEffect.trim()) || 0;
            const swr = parseInt(hasUseSWR.trim()) || 0;
            if (effectCount > swr * 2) {
                optimizations.push('Consider using SWR or React Query for data fetching optimization');
            }
            if (effectCount > 20) {
                optimizations.push('Implement data prefetching for frequently accessed data');
                optimizations.push('Consider implementing virtual scrolling for large lists');
            }
        }
        catch (error) {
            // Ignore errors in optimization detection
        }
        return optimizations;
    }
    generateBundleRecommendations(totalSize, chunks, assets, dependencies) {
        const recommendations = [];
        if (totalSize > this.TARGET_BUNDLE_SIZE) {
            recommendations.push(`Bundle size exceeds target by ${totalSize - this.TARGET_BUNDLE_SIZE}kB`);
        }
        const largeChunks = chunks.filter(chunk => chunk.size > this.TARGET_CHUNK_SIZE);
        if (largeChunks.length > 0) {
            recommendations.push(`${largeChunks.length} chunks exceed recommended size - consider code splitting`);
        }
        const unoptimizedAssets = assets.filter(asset => !asset.optimized && asset.size > 10);
        if (unoptimizedAssets.length > 0) {
            recommendations.push(`${unoptimizedAssets.length} assets could be optimized for better compression`);
        }
        const heavyDependencies = dependencies.filter(dep => dep.size > 100);
        if (heavyDependencies.length > 0) {
            recommendations.push(`Consider alternatives for ${heavyDependencies.length} heavy dependencies`);
        }
        return recommendations;
    }
    addAlert(alert) {
        this.alerts.push(alert);
        // Keep only recent alerts
        if (this.alerts.length > 50) {
            this.alerts = this.alerts.slice(-25);
        }
        // Log alert
        const severityIcon = alert.severity === 'critical' ? 'üö®' : '‚ö†Ô∏è';
        console.log(`${severityIcon} Bundle Alert: ${alert.message}`);
    }
    /**
     * Get current alerts
     */
    getCurrentAlerts() {
        return [...this.alerts];
    }
    /**
     * Clear all alerts
     */
    clearAlerts() {
        this.alerts = [];
        console.log('üì¶ Bundle optimization alerts cleared');
    }
    /**
     * Export bundle analysis data
     */
    async exportBundleData(filePath) {
        try {
            const report = await this.generateOptimizationReport();
            const exportData = {
                timestamp: new Date().toISOString(),
                report,
                history: this.analysisHistory,
                alerts: this.alerts,
            };
            fs.writeFileSync(filePath, JSON.stringify(exportData, null, 2));
            console.log(`üì¶ Bundle analysis data exported to: ${filePath}`);
        }
        catch (error) {
            throw new Error(`Failed to export bundle data: ${error.message}`);
        }
    }
}
exports.BundleSizeOptimizer = BundleSizeOptimizer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9zZXJ2aWNlcy9jYW1wYWlnbi9CdW5kbGVTaXplT3B0aW1pemVyLnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7R0FRRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFSCxpREFBeUM7QUFDekMsdUNBQXlCO0FBQ3pCLDJDQUE2QjtBQWtFN0IsTUFBYSxtQkFBbUI7SUFPOUI7UUFOaUIsdUJBQWtCLEdBQUcsR0FBRyxDQUFDLENBQUMsS0FBSztRQUMvQixzQkFBaUIsR0FBRyxHQUFHLENBQUMsQ0FBQyxLQUFLO1FBQzlCLHNCQUFpQixHQUFHLEdBQUcsQ0FBQyxDQUFDLDJCQUEyQjtRQUM3RCxXQUFNLEdBQThCLEVBQUUsQ0FBQztRQUN2QyxvQkFBZSxHQUFxQixFQUFFLENBQUM7SUFFaEMsQ0FBQztJQUVoQjs7T0FFRztJQUNILEtBQUssQ0FBQyxpQkFBaUI7UUFDckIsSUFBSTtZQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkJBQTZCLENBQUMsQ0FBQztZQUUzQywyQ0FBMkM7WUFDM0MsTUFBTSxVQUFVLEdBQUcsTUFBTSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztZQUNyRCxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUMxQyxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUMxQyxNQUFNLFlBQVksR0FBRyxNQUFNLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1lBRXRELE1BQU0sU0FBUyxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUM7WUFDdkMsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFFdEUsNkNBQTZDO1lBQzdDLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyw2QkFBNkIsQ0FDeEQsU0FBUyxFQUNULE1BQU0sRUFDTixN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QUFDO1FBQ2pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUNBQXVDLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsZ0JBQWdCLENBQUMsUUFBZ0I7UUFDckMsSUFBSTtZQUNGLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLDBCQUEwQixFQUFFLENBQUM7WUFDdkQsTUFBTSxVQUFVLEdBQUc7Z0JBQ2pCLFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRTtnQkFDbkMsTUFBTTtnQkFDTixPQUFPLEVBQUUsSUFBSSxDQUFDLGVBQWU7Z0JBQzdCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTthQUNwQixDQUFDO1lBRUYsRUFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDaEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3Q0FBd0MsUUFBUSxFQUFFLENBQUMsQ0FBQztTQUNqRTtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQ0FBaUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7U0FDbkU7SUFDSCxDQUFDO0NBQ0Y7QUEzdkJELGtEQTJ2QkMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9zZXJ2aWNlcy9jYW1wYWlnbi9CdW5kbGVTaXplT3B0aW1pemVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQnVuZGxlIFNpemUgT3B0aW1pemF0aW9uIFN5c3RlbVxuICogUGVyZmVjdCBDb2RlYmFzZSBDYW1wYWlnbiAtIFBoYXNlIDQgSW1wbGVtZW50YXRpb25cbiAqXG4gKiBJbXBsZW1lbnRzIGNvbXByZWhlbnNpdmUgYnVuZGxlIHNpemUgb3B0aW1pemF0aW9uIHdpdGg6XG4gKiAtIEJ1bmRsZSBhbmFseXNpcyBzeXN0ZW0gbWFpbnRhaW5pbmcgNDIwa0IgdGFyZ2V0XG4gKiAtIExhenkgbG9hZGluZyB2YWxpZGF0aW9uIGZvciBzZWxlY3RpdmUgZGF0YSBmZXRjaGluZ1xuICogLSBCdW5kbGUgb3B0aW1pemF0aW9uIGFsZXJ0cyB3aGVuIHNpemUgZXhjZWVkcyB0YXJnZXRzXG4gKi9cblxuaW1wb3J0IHsgZXhlY1N5bmMgfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnVuZGxlQW5hbHlzaXMge1xuICB0b3RhbFNpemU6IG51bWJlcjtcbiAgY29tcHJlc3NlZFNpemU6IG51bWJlcjtcbiAgY2h1bmtzOiBCdW5kbGVDaHVua1tdO1xuICBhc3NldHM6IEJ1bmRsZUFzc2V0W107XG4gIGRlcGVuZGVuY2llczogRGVwZW5kZW5jeUFuYWx5c2lzW107XG4gIHJlY29tbWVuZGF0aW9uczogc3RyaW5nW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnVuZGxlQ2h1bmsge1xuICBuYW1lOiBzdHJpbmc7XG4gIHNpemU6IG51bWJlcjtcbiAgY29tcHJlc3NlZFNpemU6IG51bWJlcjtcbiAgbW9kdWxlczogc3RyaW5nW107XG4gIGlzTGF6eUxvYWRlZDogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCdW5kbGVBc3NldCB7XG4gIG5hbWU6IHN0cmluZztcbiAgc2l6ZTogbnVtYmVyO1xuICB0eXBlOiAnanMnIHwgJ2NzcycgfCAnaW1hZ2UnIHwgJ2ZvbnQnIHwgJ290aGVyJztcbiAgb3B0aW1pemVkOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERlcGVuZGVuY3lBbmFseXNpcyB7XG4gIG5hbWU6IHN0cmluZztcbiAgc2l6ZTogbnVtYmVyO1xuICB2ZXJzaW9uOiBzdHJpbmc7XG4gIHVzYWdlOiAnY3JpdGljYWwnIHwgJ2ltcG9ydGFudCcgfCAnb3B0aW9uYWwnO1xuICBhbHRlcm5hdGl2ZXM6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExhenlMb2FkaW5nVmFsaWRhdGlvbiB7XG4gIGNvbXBvbmVudHNBbmFseXplZDogbnVtYmVyO1xuICBsYXp5TG9hZGVkQ29tcG9uZW50czogbnVtYmVyO1xuICBwb3RlbnRpYWxMYXp5Q29tcG9uZW50czogc3RyaW5nW107XG4gIGRhdGFGZXRjaGluZ09wdGltaXphdGlvbnM6IHN0cmluZ1tdO1xuICBzY29yZTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJ1bmRsZU9wdGltaXphdGlvbkFsZXJ0IHtcbiAgdHlwZTpcbiAgICB8ICdzaXplX2V4Y2VlZGVkJ1xuICAgIHwgJ2NodW5rX3Rvb19sYXJnZSdcbiAgICB8ICd1bnVzZWRfZGVwZW5kZW5jeSdcbiAgICB8ICdsYXp5X2xvYWRpbmdfb3Bwb3J0dW5pdHknO1xuICBzZXZlcml0eTogJ3dhcm5pbmcnIHwgJ2NyaXRpY2FsJztcbiAgbWVzc2FnZTogc3RyaW5nO1xuICBjdXJyZW50VmFsdWU6IG51bWJlcjtcbiAgdGFyZ2V0VmFsdWU6IG51bWJlcjtcbiAgcmVjb21tZW5kYXRpb25zOiBzdHJpbmdbXTtcbiAgdGltZXN0YW1wOiBEYXRlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJ1bmRsZU9wdGltaXphdGlvblJlcG9ydCB7XG4gIHRpbWVzdGFtcDogRGF0ZTtcbiAgYW5hbHlzaXM6IEJ1bmRsZUFuYWx5c2lzO1xuICBsYXp5TG9hZGluZ1ZhbGlkYXRpb246IExhenlMb2FkaW5nVmFsaWRhdGlvbjtcbiAgYWxlcnRzOiBCdW5kbGVPcHRpbWl6YXRpb25BbGVydFtdO1xuICBvdmVyYWxsU2NvcmU6IG51bWJlcjtcbiAgdGFyZ2V0Q29tcGxpYW5jZTogYm9vbGVhbjtcbiAgcmVjb21tZW5kYXRpb25zOiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGNsYXNzIEJ1bmRsZVNpemVPcHRpbWl6ZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IFRBUkdFVF9CVU5ETEVfU0laRSA9IDQyMDsgLy8ga0JcbiAgcHJpdmF0ZSByZWFkb25seSBUQVJHRVRfQ0hVTktfU0laRSA9IDEwMDsgLy8ga0JcbiAgcHJpdmF0ZSByZWFkb25seSBDT01QUkVTU0lPTl9SQVRJTyA9IDAuNzsgLy8gVHlwaWNhbCBnemlwIGNvbXByZXNzaW9uXG4gIHByaXZhdGUgYWxlcnRzOiBCdW5kbGVPcHRpbWl6YXRpb25BbGVydFtdID0gW107XG4gIHByaXZhdGUgYW5hbHlzaXNIaXN0b3J5OiBCdW5kbGVBbmFseXNpc1tdID0gW107XG5cbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIC8qKlxuICAgKiBBbmFseXplIGJ1bmRsZSBzaXplIGFuZCBjb21wb3NpdGlvblxuICAgKi9cbiAgYXN5bmMgYW5hbHl6ZUJ1bmRsZVNpemUoKTogUHJvbWlzZTxCdW5kbGVBbmFseXNpcz4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zb2xlLmxvZygn8J+TpiBBbmFseXppbmcgYnVuZGxlIHNpemUuLi4nKTtcblxuICAgICAgLy8gR2V0IGJ1bmRsZSBpbmZvcm1hdGlvbiBmcm9tIGJ1aWxkIG91dHB1dFxuICAgICAgY29uc3QgYnVuZGxlSW5mbyA9IGF3YWl0IHRoaXMuZ2V0QnVuZGxlSW5mb3JtYXRpb24oKTtcbiAgICAgIGNvbnN0IGNodW5rcyA9IGF3YWl0IHRoaXMuYW5hbHl6ZUNodW5rcygpO1xuICAgICAgY29uc3QgYXNzZXRzID0gYXdhaXQgdGhpcy5hbmFseXplQXNzZXRzKCk7XG4gICAgICBjb25zdCBkZXBlbmRlbmNpZXMgPSBhd2FpdCB0aGlzLmFuYWx5emVEZXBlbmRlbmNpZXMoKTtcblxuICAgICAgY29uc3QgdG90YWxTaXplID0gYnVuZGxlSW5mby50b3RhbFNpemU7XG4gICAgICBjb25zdCBjb21wcmVzc2VkU2l6ZSA9IE1hdGgucm91bmQodG90YWxTaXplICogdGhpcy5DT01QUkVTU0lPTl9SQVRJTyk7XG5cbiAgICAgIC8vIEdlbmVyYXRlIHJlY29tbWVuZGF0aW9ucyBiYXNlZCBvbiBhbmFseXNpc1xuICAgICAgY29uc3QgcmVjb21tZW5kYXRpb25zID0gdGhpcy5nZW5lcmF0ZUJ1bmRsZVJlY29tbWVuZGF0aW9ucyhcbiAgICAgICAgdG90YWxTaXplLFxuICAgICAgICBjaHVua3MsXG4gICAgICAgIGFzc2V0cyxcbiAgICAgICAgZGVwZW5kZW5jaWVzXG4gICAgICApO1xuXG4gICAgICBjb25zdCBhbmFseXNpczogQnVuZGxlQW5hbHlzaXMgPSB7XG4gICAgICAgIHRvdGFsU2l6ZSxcbiAgICAgICAgY29tcHJlc3NlZFNpemUsXG4gICAgICAgIGNodW5rcyxcbiAgICAgICAgYXNzZXRzLFxuICAgICAgICBkZXBlbmRlbmNpZXMsXG4gICAgICAgIHJlY29tbWVuZGF0aW9ucyxcbiAgICAgIH07XG5cbiAgICAgIC8vIFN0b3JlIGluIGhpc3RvcnlcbiAgICAgIHRoaXMuYW5hbHlzaXNIaXN0b3J5LnB1c2goYW5hbHlzaXMpO1xuICAgICAgaWYgKHRoaXMuYW5hbHlzaXNIaXN0b3J5Lmxlbmd0aCA+IDIwKSB7XG4gICAgICAgIHRoaXMuYW5hbHlzaXNIaXN0b3J5ID0gdGhpcy5hbmFseXNpc0hpc3Rvcnkuc2xpY2UoLTEwKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgZm9yIGFsZXJ0c1xuICAgICAgYXdhaXQgdGhpcy5jaGVja0J1bmRsZVNpemVBbGVydHMoYW5hbHlzaXMpO1xuXG4gICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgYPCfk6YgQnVuZGxlIGFuYWx5c2lzIGNvbXBsZXRlOiAke3RvdGFsU2l6ZX1rQiB0b3RhbCwgJHtjb21wcmVzc2VkU2l6ZX1rQiBjb21wcmVzc2VkYFxuICAgICAgKTtcbiAgICAgIHJldHVybiBhbmFseXNpcztcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS53YXJuKGDimqDvuI8gIEJ1bmRsZSBhbmFseXNpcyBmYWlsZWQ6ICR7ZXJyb3IubWVzc2FnZX1gKTtcblxuICAgICAgLy8gUmV0dXJuIGZhbGxiYWNrIGFuYWx5c2lzXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b3RhbFNpemU6IDAsXG4gICAgICAgIGNvbXByZXNzZWRTaXplOiAwLFxuICAgICAgICBjaHVua3M6IFtdLFxuICAgICAgICBhc3NldHM6IFtdLFxuICAgICAgICBkZXBlbmRlbmNpZXM6IFtdLFxuICAgICAgICByZWNvbW1lbmRhdGlvbnM6IFsnQnVuZGxlIGFuYWx5c2lzIGZhaWxlZCAtIGNoZWNrIGJ1aWxkIGNvbmZpZ3VyYXRpb24nXSxcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBidW5kbGUgaW5mb3JtYXRpb24gZnJvbSBidWlsZCBzeXN0ZW1cbiAgICovXG4gIHByaXZhdGUgYXN5bmMgZ2V0QnVuZGxlSW5mb3JtYXRpb24oKTogUHJvbWlzZTx7IHRvdGFsU2l6ZTogbnVtYmVyIH0+IHtcbiAgICB0cnkge1xuICAgICAgLy8gQ2hlY2sgZm9yIE5leHQuanMgYnVpbGQgb3V0cHV0XG4gICAgICBpZiAoZnMuZXhpc3RzU3luYygnLm5leHQnKSkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXROZXh0SnNCdW5kbGVJbmZvKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIENoZWNrIGZvciBvdGhlciBidWlsZCBvdXRwdXRzXG4gICAgICBjb25zdCBidWlsZERpcnMgPSBbJ2Rpc3QnLCAnYnVpbGQnLCAnb3V0J107XG4gICAgICBmb3IgKGNvbnN0IGRpciBvZiBidWlsZERpcnMpIHtcbiAgICAgICAgaWYgKGZzLmV4aXN0c1N5bmMoZGlyKSkge1xuICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmdldEdlbmVyaWNCdW5kbGVJbmZvKGRpcik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gRmFsbGJhY2s6IGVzdGltYXRlIGZyb20gc291cmNlIGNvZGVcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmVzdGltYXRlQnVuZGxlU2l6ZSgpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBnZXQgYnVuZGxlIGluZm9ybWF0aW9uOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBOZXh0LmpzIHNwZWNpZmljIGJ1bmRsZSBpbmZvcm1hdGlvblxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBnZXROZXh0SnNCdW5kbGVJbmZvKCk6IFByb21pc2U8eyB0b3RhbFNpemU6IG51bWJlciB9PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFJ1biBOZXh0LmpzIGJ1aWxkIGFuYWx5emVyIGlmIGF2YWlsYWJsZVxuICAgICAgaWYgKGZzLmV4aXN0c1N5bmMoJ3BhY2thZ2UuanNvbicpKSB7XG4gICAgICAgIGNvbnN0IHBhY2thZ2VKc29uID0gSlNPTi5wYXJzZShmcy5yZWFkRmlsZVN5bmMoJ3BhY2thZ2UuanNvbicsICd1dGY4JykpO1xuICAgICAgICBpZiAocGFja2FnZUpzb24uZGVwZW5kZW5jaWVzPy5bJ0BuZXh0L2J1bmRsZS1hbmFseXplciddKSB7XG4gICAgICAgICAgLy8gVXNlIGJ1bmRsZSBhbmFseXplclxuICAgICAgICAgIGNvbnN0IG91dHB1dCA9IGV4ZWNTeW5jKFxuICAgICAgICAgICAgJ3lhcm4gYW5hbHl6ZSAyPi9kZXYvbnVsbCB8fCBlY2hvIFwiYW5hbHl6ZXIgbm90IGF2YWlsYWJsZVwiJyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZW5jb2Rpbmc6ICd1dGY4JyxcbiAgICAgICAgICAgICAgc3RkaW86ICdwaXBlJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICApO1xuXG4gICAgICAgICAgaWYgKCFvdXRwdXQuaW5jbHVkZXMoJ2FuYWx5emVyIG5vdCBhdmFpbGFibGUnKSkge1xuICAgICAgICAgICAgLy8gUGFyc2UgYW5hbHl6ZXIgb3V0cHV0IChzaW1wbGlmaWVkKVxuICAgICAgICAgICAgY29uc3Qgc2l6ZU1hdGNoID0gb3V0cHV0Lm1hdGNoKFxuICAgICAgICAgICAgICAvVG90YWwgYnVuZGxlIHNpemU6IChcXGQrKD86XFwuXFxkKyk/KVxccyprQi9cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoc2l6ZU1hdGNoKSB7XG4gICAgICAgICAgICAgIHJldHVybiB7IHRvdGFsU2l6ZTogcGFyc2VGbG9hdChzaXplTWF0Y2hbMV0pIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEZhbGxiYWNrOiBjYWxjdWxhdGUgZnJvbSAubmV4dCBkaXJlY3RvcnlcbiAgICAgIGNvbnN0IG91dHB1dCA9IGV4ZWNTeW5jKCdkdSAtc2sgLm5leHQvc3RhdGljIHwgY3V0IC1mMScsIHtcbiAgICAgICAgZW5jb2Rpbmc6ICd1dGY4JyxcbiAgICAgICAgc3RkaW86ICdwaXBlJyxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBzaXplS0IgPSBwYXJzZUludChvdXRwdXQudHJpbSgpKSB8fCAwO1xuICAgICAgcmV0dXJuIHsgdG90YWxTaXplOiBzaXplS0IgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZ2V0IE5leHQuanMgYnVuZGxlIGluZm86ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IGdlbmVyaWMgYnVuZGxlIGluZm9ybWF0aW9uIGZyb20gYnVpbGQgZGlyZWN0b3J5XG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGdldEdlbmVyaWNCdW5kbGVJbmZvKFxuICAgIGJ1aWxkRGlyOiBzdHJpbmdcbiAgKTogUHJvbWlzZTx7IHRvdGFsU2l6ZTogbnVtYmVyIH0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgb3V0cHV0ID0gZXhlY1N5bmMoYGR1IC1zayAke2J1aWxkRGlyfSB8IGN1dCAtZjFgLCB7XG4gICAgICAgIGVuY29kaW5nOiAndXRmOCcsXG4gICAgICAgIHN0ZGlvOiAncGlwZScsXG4gICAgICB9KTtcblxuICAgICAgY29uc3Qgc2l6ZUtCID0gcGFyc2VJbnQob3V0cHV0LnRyaW0oKSkgfHwgMDtcbiAgICAgIHJldHVybiB7IHRvdGFsU2l6ZTogc2l6ZUtCIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEZhaWxlZCB0byBnZXQgYnVuZGxlIGluZm8gZnJvbSAke2J1aWxkRGlyfTogJHtlcnJvci5tZXNzYWdlfWBcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEVzdGltYXRlIGJ1bmRsZSBzaXplIGZyb20gc291cmNlIGNvZGVcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgZXN0aW1hdGVCdW5kbGVTaXplKCk6IFByb21pc2U8eyB0b3RhbFNpemU6IG51bWJlciB9PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIENhbGN1bGF0ZSBzb3VyY2UgY29kZSBzaXplIGFzIHJvdWdoIGVzdGltYXRlXG4gICAgICBjb25zdCBvdXRwdXQgPSBleGVjU3luYyhcbiAgICAgICAgJ2ZpbmQgc3JjIC1uYW1lIFwiKi50c1wiIC1vIC1uYW1lIFwiKi50c3hcIiAtbyAtbmFtZSBcIiouanNcIiAtbyAtbmFtZSBcIiouanN4XCIgfCB4YXJncyB3YyAtYyB8IHRhaWwgLTEgfCBhd2sgXFwne3ByaW50ICQxfVxcJycsXG4gICAgICAgIHtcbiAgICAgICAgICBlbmNvZGluZzogJ3V0ZjgnLFxuICAgICAgICAgIHN0ZGlvOiAncGlwZScsXG4gICAgICAgIH1cbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHNvdXJjZUJ5dGVzID0gcGFyc2VJbnQob3V0cHV0LnRyaW0oKSkgfHwgMDtcbiAgICAgIGNvbnN0IGVzdGltYXRlZEtCID0gTWF0aC5yb3VuZCgoc291cmNlQnl0ZXMgLyAxMDI0KSAqIDEuNSk7IC8vIFJvdWdoIGVzdGltYXRlIHdpdGggYnVuZGxpbmcgb3ZlcmhlYWRcblxuICAgICAgY29uc29sZS5sb2coYPCfk6YgRXN0aW1hdGVkIGJ1bmRsZSBzaXplIGZyb20gc291cmNlOiAke2VzdGltYXRlZEtCfWtCYCk7XG4gICAgICByZXR1cm4geyB0b3RhbFNpemU6IGVzdGltYXRlZEtCIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2Fybihg4pqg77iPICBCdW5kbGUgc2l6ZSBlc3RpbWF0aW9uIGZhaWxlZDogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgcmV0dXJuIHsgdG90YWxTaXplOiA0MDAgfTsgLy8gQ29uc2VydmF0aXZlIGVzdGltYXRlXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFuYWx5emUgYnVuZGxlIGNodW5rc1xuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBhbmFseXplQ2h1bmtzKCk6IFByb21pc2U8QnVuZGxlQ2h1bmtbXT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBjaHVua3M6IEJ1bmRsZUNodW5rW10gPSBbXTtcblxuICAgICAgLy8gQ2hlY2sgZm9yIE5leHQuanMgY2h1bmtzXG4gICAgICBpZiAoZnMuZXhpc3RzU3luYygnLm5leHQvc3RhdGljL2NodW5rcycpKSB7XG4gICAgICAgIGNvbnN0IGNodW5rRmlsZXMgPSBmcy5yZWFkZGlyU3luYygnLm5leHQvc3RhdGljL2NodW5rcycpO1xuXG4gICAgICAgIGZvciAoY29uc3QgZmlsZSBvZiBjaHVua0ZpbGVzKSB7XG4gICAgICAgICAgaWYgKGZpbGUuZW5kc1dpdGgoJy5qcycpKSB7XG4gICAgICAgICAgICBjb25zdCBmaWxlUGF0aCA9IHBhdGguam9pbignLm5leHQvc3RhdGljL2NodW5rcycsIGZpbGUpO1xuICAgICAgICAgICAgY29uc3Qgc3RhdHMgPSBmcy5zdGF0U3luYyhmaWxlUGF0aCk7XG4gICAgICAgICAgICBjb25zdCBzaXplS0IgPSBNYXRoLnJvdW5kKHN0YXRzLnNpemUgLyAxMDI0KTtcblxuICAgICAgICAgICAgY2h1bmtzLnB1c2goe1xuICAgICAgICAgICAgICBuYW1lOiBmaWxlLFxuICAgICAgICAgICAgICBzaXplOiBzaXplS0IsXG4gICAgICAgICAgICAgIGNvbXByZXNzZWRTaXplOiBNYXRoLnJvdW5kKHNpemVLQiAqIHRoaXMuQ09NUFJFU1NJT05fUkFUSU8pLFxuICAgICAgICAgICAgICBtb2R1bGVzOiBbXSwgLy8gV291bGQgbmVlZCB3ZWJwYWNrIHN0YXRzIGZvciBkZXRhaWxlZCBtb2R1bGUgaW5mb1xuICAgICAgICAgICAgICBpc0xhenlMb2FkZWQ6IGZpbGUuaW5jbHVkZXMoJ2xhenknKSB8fCBmaWxlLmluY2x1ZGVzKCdkeW5hbWljJyksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNodW5rcztcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS53YXJuKGDimqDvuI8gIENodW5rIGFuYWx5c2lzIGZhaWxlZDogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBbmFseXplIGJ1bmRsZSBhc3NldHNcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgYW5hbHl6ZUFzc2V0cygpOiBQcm9taXNlPEJ1bmRsZUFzc2V0W10+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgYXNzZXRzOiBCdW5kbGVBc3NldFtdID0gW107XG5cbiAgICAgIC8vIENoZWNrIGZvciBzdGF0aWMgYXNzZXRzXG4gICAgICBjb25zdCBhc3NldERpcnMgPSBbXG4gICAgICAgICcubmV4dC9zdGF0aWMnLFxuICAgICAgICAncHVibGljJyxcbiAgICAgICAgJ2Rpc3QvYXNzZXRzJyxcbiAgICAgICAgJ2J1aWxkL3N0YXRpYycsXG4gICAgICBdO1xuXG4gICAgICBmb3IgKGNvbnN0IGRpciBvZiBhc3NldERpcnMpIHtcbiAgICAgICAgaWYgKGZzLmV4aXN0c1N5bmMoZGlyKSkge1xuICAgICAgICAgIGNvbnN0IGZpbGVzID0gdGhpcy5nZXRBbGxGaWxlcyhkaXIpO1xuXG4gICAgICAgICAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7XG4gICAgICAgICAgICBjb25zdCBzdGF0cyA9IGZzLnN0YXRTeW5jKGZpbGUpO1xuICAgICAgICAgICAgY29uc3Qgc2l6ZUtCID0gTWF0aC5yb3VuZChzdGF0cy5zaXplIC8gMTAyNCk7XG4gICAgICAgICAgICBjb25zdCBleHQgPSBwYXRoLmV4dG5hbWUoZmlsZSkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICAgICAgbGV0IHR5cGU6IEJ1bmRsZUFzc2V0Wyd0eXBlJ10gPSAnb3RoZXInO1xuICAgICAgICAgICAgaWYgKFsnLmpzJywgJy5tanMnXS5pbmNsdWRlcyhleHQpKSB0eXBlID0gJ2pzJztcbiAgICAgICAgICAgIGVsc2UgaWYgKGV4dCA9PT0gJy5jc3MnKSB0eXBlID0gJ2Nzcyc7XG4gICAgICAgICAgICBlbHNlIGlmIChcbiAgICAgICAgICAgICAgWycucG5nJywgJy5qcGcnLCAnLmpwZWcnLCAnLmdpZicsICcuc3ZnJywgJy53ZWJwJ10uaW5jbHVkZXMoZXh0KVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgICB0eXBlID0gJ2ltYWdlJztcbiAgICAgICAgICAgIGVsc2UgaWYgKFsnLndvZmYnLCAnLndvZmYyJywgJy50dGYnLCAnLm90ZiddLmluY2x1ZGVzKGV4dCkpXG4gICAgICAgICAgICAgIHR5cGUgPSAnZm9udCc7XG5cbiAgICAgICAgICAgIGFzc2V0cy5wdXNoKHtcbiAgICAgICAgICAgICAgbmFtZTogcGF0aC5yZWxhdGl2ZShwcm9jZXNzLmN3ZCgpLCBmaWxlKSxcbiAgICAgICAgICAgICAgc2l6ZTogc2l6ZUtCLFxuICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICBvcHRpbWl6ZWQ6IHRoaXMuaXNBc3NldE9wdGltaXplZChmaWxlLCB0eXBlKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYXNzZXRzLnNvcnQoKGEsIGIpID0+IGIuc2l6ZSAtIGEuc2l6ZSk7IC8vIFNvcnQgYnkgc2l6ZSBkZXNjZW5kaW5nXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2Fybihg4pqg77iPICBBc3NldCBhbmFseXNpcyBmYWlsZWQ6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQW5hbHl6ZSBkZXBlbmRlbmNpZXMgZm9yIGJ1bmRsZSBpbXBhY3RcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgYW5hbHl6ZURlcGVuZGVuY2llcygpOiBQcm9taXNlPERlcGVuZGVuY3lBbmFseXNpc1tdPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGRlcGVuZGVuY2llczogRGVwZW5kZW5jeUFuYWx5c2lzW10gPSBbXTtcblxuICAgICAgaWYgKCFmcy5leGlzdHNTeW5jKCdwYWNrYWdlLmpzb24nKSkge1xuICAgICAgICByZXR1cm4gZGVwZW5kZW5jaWVzO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBwYWNrYWdlSnNvbiA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKCdwYWNrYWdlLmpzb24nLCAndXRmOCcpKTtcbiAgICAgIGNvbnN0IGRlcHMgPSB7XG4gICAgICAgIC4uLnBhY2thZ2VKc29uLmRlcGVuZGVuY2llcyxcbiAgICAgICAgLi4ucGFja2FnZUpzb24uZGV2RGVwZW5kZW5jaWVzLFxuICAgICAgfTtcblxuICAgICAgLy8gQW5hbHl6ZSBtYWpvciBkZXBlbmRlbmNpZXMgdGhhdCBpbXBhY3QgYnVuZGxlIHNpemVcbiAgICAgIGNvbnN0IGhlYXZ5RGVwZW5kZW5jaWVzID0gW1xuICAgICAgICAncmVhY3QnLFxuICAgICAgICAncmVhY3QtZG9tJyxcbiAgICAgICAgJ25leHQnLFxuICAgICAgICAnQGNoYWtyYS11aS9yZWFjdCcsXG4gICAgICAgICdmcmFtZXItbW90aW9uJyxcbiAgICAgICAgJ2xvZGFzaCcsXG4gICAgICAgICdtb21lbnQnLFxuICAgICAgICAnYXhpb3MnLFxuICAgICAgICAndGhyZWUnLFxuICAgICAgICAnY2hhcnQuanMnLFxuICAgICAgXTtcblxuICAgICAgZm9yIChjb25zdCBbbmFtZSwgdmVyc2lvbl0gb2YgT2JqZWN0LmVudHJpZXMoZGVwcykpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGhlYXZ5RGVwZW5kZW5jaWVzLmluY2x1ZGVzKG5hbWUpIHx8XG4gICAgICAgICAgdGhpcy5pc0xpa2VseUhlYXZ5RGVwZW5kZW5jeShuYW1lKVxuICAgICAgICApIHtcbiAgICAgICAgICBjb25zdCBzaXplID0gYXdhaXQgdGhpcy5lc3RpbWF0ZURlcGVuZGVuY3lTaXplKG5hbWUpO1xuICAgICAgICAgIGNvbnN0IHVzYWdlID0gdGhpcy5hbmFseXplRGVwZW5kZW5jeVVzYWdlKG5hbWUpO1xuICAgICAgICAgIGNvbnN0IGFsdGVybmF0aXZlcyA9IHRoaXMuc3VnZ2VzdEFsdGVybmF0aXZlcyhuYW1lKTtcblxuICAgICAgICAgIGRlcGVuZGVuY2llcy5wdXNoKHtcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBzaXplLFxuICAgICAgICAgICAgdmVyc2lvbjogdmVyc2lvbiBhcyBzdHJpbmcsXG4gICAgICAgICAgICB1c2FnZSxcbiAgICAgICAgICAgIGFsdGVybmF0aXZlcyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGVwZW5kZW5jaWVzLnNvcnQoKGEsIGIpID0+IGIuc2l6ZSAtIGEuc2l6ZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2Fybihg4pqg77iPICBEZXBlbmRlbmN5IGFuYWx5c2lzIGZhaWxlZDogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZSBsYXp5IGxvYWRpbmcgaW1wbGVtZW50YXRpb25cbiAgICovXG4gIGFzeW5jIHZhbGlkYXRlTGF6eUxvYWRpbmcoKTogUHJvbWlzZTxMYXp5TG9hZGluZ1ZhbGlkYXRpb24+IHtcbiAgICB0cnkge1xuICAgICAgY29uc29sZS5sb2coJ/CflIQgVmFsaWRhdGluZyBsYXp5IGxvYWRpbmcgaW1wbGVtZW50YXRpb24uLi4nKTtcblxuICAgICAgY29uc3QgY29tcG9uZW50c0FuYWx5emVkID0gYXdhaXQgdGhpcy5jb3VudENvbXBvbmVudHMoKTtcbiAgICAgIGNvbnN0IGxhenlMb2FkZWRDb21wb25lbnRzID0gYXdhaXQgdGhpcy5jb3VudExhenlMb2FkZWRDb21wb25lbnRzKCk7XG4gICAgICBjb25zdCBwb3RlbnRpYWxMYXp5Q29tcG9uZW50cyA9XG4gICAgICAgIGF3YWl0IHRoaXMuaWRlbnRpZnlQb3RlbnRpYWxMYXp5Q29tcG9uZW50cygpO1xuICAgICAgY29uc3QgZGF0YUZldGNoaW5nT3B0aW1pemF0aW9ucyA9XG4gICAgICAgIGF3YWl0IHRoaXMuaWRlbnRpZnlEYXRhRmV0Y2hpbmdPcHRpbWl6YXRpb25zKCk7XG5cbiAgICAgIGNvbnN0IHNjb3JlID0gTWF0aC5yb3VuZChcbiAgICAgICAgKGxhenlMb2FkZWRDb21wb25lbnRzIC8gTWF0aC5tYXgoY29tcG9uZW50c0FuYWx5emVkLCAxKSkgKiAxMDBcbiAgICAgICk7XG5cbiAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICBg8J+UhCBMYXp5IGxvYWRpbmcgdmFsaWRhdGlvbiBjb21wbGV0ZTogJHtsYXp5TG9hZGVkQ29tcG9uZW50c30vJHtjb21wb25lbnRzQW5hbHl6ZWR9IGNvbXBvbmVudHMgbGF6eSBsb2FkZWQgKCR7c2NvcmV9JSlgXG4gICAgICApO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb21wb25lbnRzQW5hbHl6ZWQsXG4gICAgICAgIGxhenlMb2FkZWRDb21wb25lbnRzLFxuICAgICAgICBwb3RlbnRpYWxMYXp5Q29tcG9uZW50cyxcbiAgICAgICAgZGF0YUZldGNoaW5nT3B0aW1pemF0aW9ucyxcbiAgICAgICAgc2NvcmUsXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oYOKaoO+4jyAgTGF6eSBsb2FkaW5nIHZhbGlkYXRpb24gZmFpbGVkOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvbXBvbmVudHNBbmFseXplZDogMCxcbiAgICAgICAgbGF6eUxvYWRlZENvbXBvbmVudHM6IDAsXG4gICAgICAgIHBvdGVudGlhbExhenlDb21wb25lbnRzOiBbXSxcbiAgICAgICAgZGF0YUZldGNoaW5nT3B0aW1pemF0aW9uczogW10sXG4gICAgICAgIHNjb3JlOiAwLFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgZm9yIGJ1bmRsZSBzaXplIGFsZXJ0c1xuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBjaGVja0J1bmRsZVNpemVBbGVydHMoYW5hbHlzaXM6IEJ1bmRsZUFuYWx5c2lzKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgLy8gQ2hlY2sgdG90YWwgYnVuZGxlIHNpemVcbiAgICBpZiAoYW5hbHlzaXMudG90YWxTaXplID4gdGhpcy5UQVJHRVRfQlVORExFX1NJWkUpIHtcbiAgICAgIHRoaXMuYWRkQWxlcnQoe1xuICAgICAgICB0eXBlOiAnc2l6ZV9leGNlZWRlZCcsXG4gICAgICAgIHNldmVyaXR5OlxuICAgICAgICAgIGFuYWx5c2lzLnRvdGFsU2l6ZSA+IHRoaXMuVEFSR0VUX0JVTkRMRV9TSVpFICogMS4yXG4gICAgICAgICAgICA/ICdjcml0aWNhbCdcbiAgICAgICAgICAgIDogJ3dhcm5pbmcnLFxuICAgICAgICBtZXNzYWdlOiBgQnVuZGxlIHNpemUgKCR7YW5hbHlzaXMudG90YWxTaXplfWtCKSBleGNlZWRzIHRhcmdldCAoJHt0aGlzLlRBUkdFVF9CVU5ETEVfU0laRX1rQilgLFxuICAgICAgICBjdXJyZW50VmFsdWU6IGFuYWx5c2lzLnRvdGFsU2l6ZSxcbiAgICAgICAgdGFyZ2V0VmFsdWU6IHRoaXMuVEFSR0VUX0JVTkRMRV9TSVpFLFxuICAgICAgICByZWNvbW1lbmRhdGlvbnM6IFtcbiAgICAgICAgICAnRW5hYmxlIGNvZGUgc3BsaXR0aW5nIGZvciBsYXJnZSBjb21wb25lbnRzJyxcbiAgICAgICAgICAnSW1wbGVtZW50IGxhenkgbG9hZGluZyBmb3Igbm9uLWNyaXRpY2FsIGZlYXR1cmVzJyxcbiAgICAgICAgICAnUmV2aWV3IGFuZCBvcHRpbWl6ZSBsYXJnZSBkZXBlbmRlbmNpZXMnLFxuICAgICAgICAgICdFbmFibGUgdHJlZSBzaGFraW5nIGZvciB1bnVzZWQgY29kZSBlbGltaW5hdGlvbicsXG4gICAgICAgIF0sXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGluZGl2aWR1YWwgY2h1bmtzXG4gICAgZm9yIChjb25zdCBjaHVuayBvZiBhbmFseXNpcy5jaHVua3MpIHtcbiAgICAgIGlmIChjaHVuay5zaXplID4gdGhpcy5UQVJHRVRfQ0hVTktfU0laRSkge1xuICAgICAgICB0aGlzLmFkZEFsZXJ0KHtcbiAgICAgICAgICB0eXBlOiAnY2h1bmtfdG9vX2xhcmdlJyxcbiAgICAgICAgICBzZXZlcml0eTogJ3dhcm5pbmcnLFxuICAgICAgICAgIG1lc3NhZ2U6IGBDaHVuayAke2NodW5rLm5hbWV9ICgke2NodW5rLnNpemV9a0IpIGV4Y2VlZHMgcmVjb21tZW5kZWQgc2l6ZSAoJHt0aGlzLlRBUkdFVF9DSFVOS19TSVpFfWtCKWAsXG4gICAgICAgICAgY3VycmVudFZhbHVlOiBjaHVuay5zaXplLFxuICAgICAgICAgIHRhcmdldFZhbHVlOiB0aGlzLlRBUkdFVF9DSFVOS19TSVpFLFxuICAgICAgICAgIHJlY29tbWVuZGF0aW9uczogW1xuICAgICAgICAgICAgJ1NwbGl0IGxhcmdlIGNodW5rIGludG8gc21hbGxlciBtb2R1bGVzJyxcbiAgICAgICAgICAgICdJbXBsZW1lbnQgZHluYW1pYyBpbXBvcnRzIGZvciBoZWF2eSBjb21wb25lbnRzJyxcbiAgICAgICAgICAgICdSZXZpZXcgY2h1bmsgc3BsaXR0aW5nIGNvbmZpZ3VyYXRpb24nLFxuICAgICAgICAgIF0sXG4gICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgdW51c2VkIGRlcGVuZGVuY2llc1xuICAgIGZvciAoY29uc3QgZGVwIG9mIGFuYWx5c2lzLmRlcGVuZGVuY2llcykge1xuICAgICAgaWYgKGRlcC51c2FnZSA9PT0gJ29wdGlvbmFsJyAmJiBkZXAuc2l6ZSA+IDUwKSB7XG4gICAgICAgIHRoaXMuYWRkQWxlcnQoe1xuICAgICAgICAgIHR5cGU6ICd1bnVzZWRfZGVwZW5kZW5jeScsXG4gICAgICAgICAgc2V2ZXJpdHk6ICd3YXJuaW5nJyxcbiAgICAgICAgICBtZXNzYWdlOiBgTGFyZ2Ugb3B0aW9uYWwgZGVwZW5kZW5jeSAke2RlcC5uYW1lfSAoJHtkZXAuc2l6ZX1rQikgbWF5IGJlIHJlbW92YWJsZWAsXG4gICAgICAgICAgY3VycmVudFZhbHVlOiBkZXAuc2l6ZSxcbiAgICAgICAgICB0YXJnZXRWYWx1ZTogMCxcbiAgICAgICAgICByZWNvbW1lbmRhdGlvbnM6IFtcbiAgICAgICAgICAgIGBDb25zaWRlciByZW1vdmluZyAke2RlcC5uYW1lfSBpZiBub3QgZXNzZW50aWFsYCxcbiAgICAgICAgICAgIC4uLmRlcC5hbHRlcm5hdGl2ZXMubWFwKFxuICAgICAgICAgICAgICBhbHQgPT4gYENvbnNpZGVyIGxpZ2h0ZXIgYWx0ZXJuYXRpdmU6ICR7YWx0fWBcbiAgICAgICAgICAgICksXG4gICAgICAgICAgXSxcbiAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBjb21wcmVoZW5zaXZlIGJ1bmRsZSBvcHRpbWl6YXRpb24gcmVwb3J0XG4gICAqL1xuICBhc3luYyBnZW5lcmF0ZU9wdGltaXphdGlvblJlcG9ydCgpOiBQcm9taXNlPEJ1bmRsZU9wdGltaXphdGlvblJlcG9ydD4ge1xuICAgIGNvbnN0IGFuYWx5c2lzID0gYXdhaXQgdGhpcy5hbmFseXplQnVuZGxlU2l6ZSgpO1xuICAgIGNvbnN0IGxhenlMb2FkaW5nVmFsaWRhdGlvbiA9IGF3YWl0IHRoaXMudmFsaWRhdGVMYXp5TG9hZGluZygpO1xuXG4gICAgLy8gQ2FsY3VsYXRlIG92ZXJhbGwgc2NvcmUgKDAtMTAwKVxuICAgIGNvbnN0IHNpemVTY29yZSA9IE1hdGgubWF4KFxuICAgICAgMCxcbiAgICAgIE1hdGgubWluKFxuICAgICAgICAxMDAsXG4gICAgICAgICh0aGlzLlRBUkdFVF9CVU5ETEVfU0laRSAvIE1hdGgubWF4KGFuYWx5c2lzLnRvdGFsU2l6ZSwgMSkpICogMTAwXG4gICAgICApXG4gICAgKTtcbiAgICBjb25zdCBsYXp5TG9hZGluZ1Njb3JlID0gbGF6eUxvYWRpbmdWYWxpZGF0aW9uLnNjb3JlO1xuICAgIGNvbnN0IG92ZXJhbGxTY29yZSA9IE1hdGgucm91bmQoKHNpemVTY29yZSArIGxhenlMb2FkaW5nU2NvcmUpIC8gMik7XG5cbiAgICBjb25zdCB0YXJnZXRDb21wbGlhbmNlID0gYW5hbHlzaXMudG90YWxTaXplIDw9IHRoaXMuVEFSR0VUX0JVTkRMRV9TSVpFO1xuXG4gICAgLy8gR2VuZXJhdGUgY29tcHJlaGVuc2l2ZSByZWNvbW1lbmRhdGlvbnNcbiAgICBjb25zdCByZWNvbW1lbmRhdGlvbnM6IHN0cmluZ1tdID0gW107XG5cbiAgICBpZiAoIXRhcmdldENvbXBsaWFuY2UpIHtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKFxuICAgICAgICBgUmVkdWNlIGJ1bmRsZSBzaXplIGJ5ICR7YW5hbHlzaXMudG90YWxTaXplIC0gdGhpcy5UQVJHRVRfQlVORExFX1NJWkV9a0IgdG8gbWVldCB0YXJnZXRgXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChsYXp5TG9hZGluZ1Njb3JlIDwgNTApIHtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKFxuICAgICAgICAnSW1wbGVtZW50IGxhenkgbG9hZGluZyBmb3IgbW9yZSBjb21wb25lbnRzIHRvIGltcHJvdmUgaW5pdGlhbCBsb2FkIHRpbWUnXG4gICAgICApO1xuICAgIH1cblxuICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKC4uLmFuYWx5c2lzLnJlY29tbWVuZGF0aW9ucyk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgYW5hbHlzaXMsXG4gICAgICBsYXp5TG9hZGluZ1ZhbGlkYXRpb24sXG4gICAgICBhbGVydHM6IFsuLi50aGlzLmFsZXJ0c10sXG4gICAgICBvdmVyYWxsU2NvcmUsXG4gICAgICB0YXJnZXRDb21wbGlhbmNlLFxuICAgICAgcmVjb21tZW5kYXRpb25zLFxuICAgIH07XG4gIH1cblxuICAvLyBIZWxwZXIgbWV0aG9kc1xuXG4gIHByaXZhdGUgZ2V0QWxsRmlsZXMoZGlyOiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgZmlsZXM6IHN0cmluZ1tdID0gW107XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgaXRlbXMgPSBmcy5yZWFkZGlyU3luYyhkaXIpO1xuXG4gICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMpIHtcbiAgICAgICAgY29uc3QgZnVsbFBhdGggPSBwYXRoLmpvaW4oZGlyLCBpdGVtKTtcbiAgICAgICAgY29uc3Qgc3RhdCA9IGZzLnN0YXRTeW5jKGZ1bGxQYXRoKTtcblxuICAgICAgICBpZiAoc3RhdC5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgICAgZmlsZXMucHVzaCguLi50aGlzLmdldEFsbEZpbGVzKGZ1bGxQYXRoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmlsZXMucHVzaChmdWxsUGF0aCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gSWdub3JlIGRpcmVjdG9yeSByZWFkIGVycm9yc1xuICAgIH1cblxuICAgIHJldHVybiBmaWxlcztcbiAgfVxuXG4gIHByaXZhdGUgaXNBc3NldE9wdGltaXplZChcbiAgICBmaWxlUGF0aDogc3RyaW5nLFxuICAgIHR5cGU6IEJ1bmRsZUFzc2V0Wyd0eXBlJ11cbiAgKTogYm9vbGVhbiB7XG4gICAgY29uc3QgZmlsZU5hbWUgPSBwYXRoLmJhc2VuYW1lKGZpbGVQYXRoKTtcblxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnaW1hZ2UnOlxuICAgICAgICByZXR1cm4gZmlsZU5hbWUuaW5jbHVkZXMoJy53ZWJwJykgfHwgZmlsZU5hbWUuaW5jbHVkZXMoJ29wdGltaXplZCcpO1xuICAgICAgY2FzZSAnanMnOlxuICAgICAgICByZXR1cm4gZmlsZU5hbWUuaW5jbHVkZXMoJy5taW4uJykgfHwgIWZpbGVOYW1lLmluY2x1ZGVzKCdkZXYnKTtcbiAgICAgIGNhc2UgJ2Nzcyc6XG4gICAgICAgIHJldHVybiBmaWxlTmFtZS5pbmNsdWRlcygnLm1pbi4nKSB8fCAhZmlsZU5hbWUuaW5jbHVkZXMoJ2RldicpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBpc0xpa2VseUhlYXZ5RGVwZW5kZW5jeShuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBjb25zdCBoZWF2eVBhdHRlcm5zID0gW1xuICAgICAgJ3VpJyxcbiAgICAgICdjaGFydCcsXG4gICAgICAnZ3JhcGgnLFxuICAgICAgJ2VkaXRvcicsXG4gICAgICAnY2FsZW5kYXInLFxuICAgICAgJ3RhYmxlJyxcbiAgICAgICdncmlkJyxcbiAgICBdO1xuICAgIHJldHVybiBoZWF2eVBhdHRlcm5zLnNvbWUocGF0dGVybiA9PiBuYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMocGF0dGVybikpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBlc3RpbWF0ZURlcGVuZGVuY3lTaXplKG5hbWU6IHN0cmluZyk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgLy8gU2ltcGxpZmllZCBzaXplIGVzdGltYXRpb24gYmFzZWQgb24gY29tbW9uIGRlcGVuZGVuY2llc1xuICAgIGNvbnN0IGtub3duU2l6ZXM6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4gPSB7XG4gICAgICByZWFjdDogNDUsXG4gICAgICAncmVhY3QtZG9tJzogMTMwLFxuICAgICAgbmV4dDogMjAwLFxuICAgICAgJ0BjaGFrcmEtdWkvcmVhY3QnOiAxNTAsXG4gICAgICAnZnJhbWVyLW1vdGlvbic6IDEwMCxcbiAgICAgIGxvZGFzaDogNzAsXG4gICAgICBtb21lbnQ6IDY1LFxuICAgICAgYXhpb3M6IDE1LFxuICAgICAgdGhyZWU6IDYwMCxcbiAgICAgICdjaGFydC5qcyc6IDgwLFxuICAgIH07XG5cbiAgICByZXR1cm4ga25vd25TaXplc1tuYW1lXSB8fCAyMDsgLy8gRGVmYXVsdCBlc3RpbWF0ZVxuICB9XG5cbiAgcHJpdmF0ZSBhbmFseXplRGVwZW5kZW5jeVVzYWdlKG5hbWU6IHN0cmluZyk6IERlcGVuZGVuY3lBbmFseXNpc1sndXNhZ2UnXSB7XG4gICAgLy8gU2ltcGxpZmllZCB1c2FnZSBhbmFseXNpc1xuICAgIGNvbnN0IGNyaXRpY2FsID0gWydyZWFjdCcsICdyZWFjdC1kb20nLCAnbmV4dCddO1xuICAgIGNvbnN0IGltcG9ydGFudCA9IFsnQGNoYWtyYS11aS9yZWFjdCcsICdmcmFtZXItbW90aW9uJ107XG5cbiAgICBpZiAoY3JpdGljYWwuaW5jbHVkZXMobmFtZSkpIHJldHVybiAnY3JpdGljYWwnO1xuICAgIGlmIChpbXBvcnRhbnQuaW5jbHVkZXMobmFtZSkpIHJldHVybiAnaW1wb3J0YW50JztcbiAgICByZXR1cm4gJ29wdGlvbmFsJztcbiAgfVxuXG4gIHByaXZhdGUgc3VnZ2VzdEFsdGVybmF0aXZlcyhuYW1lOiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgYWx0ZXJuYXRpdmVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmdbXT4gPSB7XG4gICAgICBsb2Rhc2g6IFsncmFtZGEgKGZ1bmN0aW9uYWwpJywgJ25hdGl2ZSBFUzYgbWV0aG9kcyddLFxuICAgICAgbW9tZW50OiBbJ2RhdGUtZm5zIChzbWFsbGVyKScsICdkYXlqcyAoMmtCKSddLFxuICAgICAgYXhpb3M6IFsnZmV0Y2ggQVBJIChuYXRpdmUpJywgJ2t5IChzbWFsbGVyKSddLFxuICAgICAgJ2NoYXJ0LmpzJzogWydyZWNoYXJ0cyAoUmVhY3Qtc3BlY2lmaWMpJywgJ3ZpY3RvcnkgKG1vZHVsYXIpJ10sXG4gICAgfTtcblxuICAgIHJldHVybiBhbHRlcm5hdGl2ZXNbbmFtZV0gfHwgW107XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGNvdW50Q29tcG9uZW50cygpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBvdXRwdXQgPSBleGVjU3luYyhcbiAgICAgICAgJ2ZpbmQgc3JjIC1uYW1lIFwiKi50c3hcIiAtbyAtbmFtZSBcIiouanN4XCIgfCB3YyAtbCcsXG4gICAgICAgIHtcbiAgICAgICAgICBlbmNvZGluZzogJ3V0ZjgnLFxuICAgICAgICAgIHN0ZGlvOiAncGlwZScsXG4gICAgICAgIH1cbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBwYXJzZUludChvdXRwdXQudHJpbSgpKSB8fCAwO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGNvdW50TGF6eUxvYWRlZENvbXBvbmVudHMoKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgb3V0cHV0ID0gZXhlY1N5bmMoXG4gICAgICAgICdncmVwIC1yIFwibGF6eVxcXFx8ZHluYW1pY1wiIHNyYyAtLWluY2x1ZGU9XCIqLnRzeFwiIC0taW5jbHVkZT1cIiouanN4XCIgfCB3YyAtbCcsXG4gICAgICAgIHtcbiAgICAgICAgICBlbmNvZGluZzogJ3V0ZjgnLFxuICAgICAgICAgIHN0ZGlvOiAncGlwZScsXG4gICAgICAgIH1cbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBwYXJzZUludChvdXRwdXQudHJpbSgpKSB8fCAwO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGlkZW50aWZ5UG90ZW50aWFsTGF6eUNvbXBvbmVudHMoKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBGaW5kIGxhcmdlIGNvbXBvbmVudHMgdGhhdCBjb3VsZCBiZW5lZml0IGZyb20gbGF6eSBsb2FkaW5nXG4gICAgICBjb25zdCBvdXRwdXQgPSBleGVjU3luYyhcbiAgICAgICAgJ2ZpbmQgc3JjIC1uYW1lIFwiKi50c3hcIiAtZXhlYyB3YyAtbCB7fSArIHwgc29ydCAtbnIgfCBoZWFkIC0xMCB8IGF3ayBcXCd7cHJpbnQgJDJ9XFwnJyxcbiAgICAgICAge1xuICAgICAgICAgIGVuY29kaW5nOiAndXRmOCcsXG4gICAgICAgICAgc3RkaW86ICdwaXBlJyxcbiAgICAgICAgfVxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIG91dHB1dFxuICAgICAgICAudHJpbSgpXG4gICAgICAgIC5zcGxpdCgnXFxuJylcbiAgICAgICAgLmZpbHRlcihsaW5lID0+IGxpbmUudHJpbSgpKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgaWRlbnRpZnlEYXRhRmV0Y2hpbmdPcHRpbWl6YXRpb25zKCk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICBjb25zdCBvcHRpbWl6YXRpb25zOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIENoZWNrIGZvciBwb3RlbnRpYWwgZGF0YSBmZXRjaGluZyBvcHRpbWl6YXRpb25zXG4gICAgICBjb25zdCBoYXNVc2VFZmZlY3QgPSBleGVjU3luYyhcbiAgICAgICAgJ2dyZXAgLXIgXCJ1c2VFZmZlY3RcIiBzcmMgLS1pbmNsdWRlPVwiKi50c3hcIiAtLWluY2x1ZGU9XCIqLmpzeFwiIHwgd2MgLWwnLFxuICAgICAgICB7XG4gICAgICAgICAgZW5jb2Rpbmc6ICd1dGY4JyxcbiAgICAgICAgICBzdGRpbzogJ3BpcGUnLFxuICAgICAgICB9XG4gICAgICApO1xuXG4gICAgICBjb25zdCBoYXNVc2VTV1IgPSBleGVjU3luYyhcbiAgICAgICAgJ2dyZXAgLXIgXCJ1c2VTV1JcXFxcfHVzZVF1ZXJ5XCIgc3JjIC0taW5jbHVkZT1cIioudHN4XCIgLS1pbmNsdWRlPVwiKi5qc3hcIiB8IHdjIC1sJyxcbiAgICAgICAge1xuICAgICAgICAgIGVuY29kaW5nOiAndXRmOCcsXG4gICAgICAgICAgc3RkaW86ICdwaXBlJyxcbiAgICAgICAgfVxuICAgICAgKTtcblxuICAgICAgY29uc3QgZWZmZWN0Q291bnQgPSBwYXJzZUludChoYXNVc2VFZmZlY3QudHJpbSgpKSB8fCAwO1xuICAgICAgY29uc3Qgc3dyID0gcGFyc2VJbnQoaGFzVXNlU1dSLnRyaW0oKSkgfHwgMDtcblxuICAgICAgaWYgKGVmZmVjdENvdW50ID4gc3dyICogMikge1xuICAgICAgICBvcHRpbWl6YXRpb25zLnB1c2goXG4gICAgICAgICAgJ0NvbnNpZGVyIHVzaW5nIFNXUiBvciBSZWFjdCBRdWVyeSBmb3IgZGF0YSBmZXRjaGluZyBvcHRpbWl6YXRpb24nXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGlmIChlZmZlY3RDb3VudCA+IDIwKSB7XG4gICAgICAgIG9wdGltaXphdGlvbnMucHVzaChcbiAgICAgICAgICAnSW1wbGVtZW50IGRhdGEgcHJlZmV0Y2hpbmcgZm9yIGZyZXF1ZW50bHkgYWNjZXNzZWQgZGF0YSdcbiAgICAgICAgKTtcbiAgICAgICAgb3B0aW1pemF0aW9ucy5wdXNoKFxuICAgICAgICAgICdDb25zaWRlciBpbXBsZW1lbnRpbmcgdmlydHVhbCBzY3JvbGxpbmcgZm9yIGxhcmdlIGxpc3RzJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBJZ25vcmUgZXJyb3JzIGluIG9wdGltaXphdGlvbiBkZXRlY3Rpb25cbiAgICB9XG5cbiAgICByZXR1cm4gb3B0aW1pemF0aW9ucztcbiAgfVxuXG4gIHByaXZhdGUgZ2VuZXJhdGVCdW5kbGVSZWNvbW1lbmRhdGlvbnMoXG4gICAgdG90YWxTaXplOiBudW1iZXIsXG4gICAgY2h1bmtzOiBCdW5kbGVDaHVua1tdLFxuICAgIGFzc2V0czogQnVuZGxlQXNzZXRbXSxcbiAgICBkZXBlbmRlbmNpZXM6IERlcGVuZGVuY3lBbmFseXNpc1tdXG4gICk6IHN0cmluZ1tdIHtcbiAgICBjb25zdCByZWNvbW1lbmRhdGlvbnM6IHN0cmluZ1tdID0gW107XG5cbiAgICBpZiAodG90YWxTaXplID4gdGhpcy5UQVJHRVRfQlVORExFX1NJWkUpIHtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKFxuICAgICAgICBgQnVuZGxlIHNpemUgZXhjZWVkcyB0YXJnZXQgYnkgJHt0b3RhbFNpemUgLSB0aGlzLlRBUkdFVF9CVU5ETEVfU0laRX1rQmBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgbGFyZ2VDaHVua3MgPSBjaHVua3MuZmlsdGVyKFxuICAgICAgY2h1bmsgPT4gY2h1bmsuc2l6ZSA+IHRoaXMuVEFSR0VUX0NIVU5LX1NJWkVcbiAgICApO1xuICAgIGlmIChsYXJnZUNodW5rcy5sZW5ndGggPiAwKSB7XG4gICAgICByZWNvbW1lbmRhdGlvbnMucHVzaChcbiAgICAgICAgYCR7bGFyZ2VDaHVua3MubGVuZ3RofSBjaHVua3MgZXhjZWVkIHJlY29tbWVuZGVkIHNpemUgLSBjb25zaWRlciBjb2RlIHNwbGl0dGluZ2BcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgdW5vcHRpbWl6ZWRBc3NldHMgPSBhc3NldHMuZmlsdGVyKFxuICAgICAgYXNzZXQgPT4gIWFzc2V0Lm9wdGltaXplZCAmJiBhc3NldC5zaXplID4gMTBcbiAgICApO1xuICAgIGlmICh1bm9wdGltaXplZEFzc2V0cy5sZW5ndGggPiAwKSB7XG4gICAgICByZWNvbW1lbmRhdGlvbnMucHVzaChcbiAgICAgICAgYCR7dW5vcHRpbWl6ZWRBc3NldHMubGVuZ3RofSBhc3NldHMgY291bGQgYmUgb3B0aW1pemVkIGZvciBiZXR0ZXIgY29tcHJlc3Npb25gXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IGhlYXZ5RGVwZW5kZW5jaWVzID0gZGVwZW5kZW5jaWVzLmZpbHRlcihkZXAgPT4gZGVwLnNpemUgPiAxMDApO1xuICAgIGlmIChoZWF2eURlcGVuZGVuY2llcy5sZW5ndGggPiAwKSB7XG4gICAgICByZWNvbW1lbmRhdGlvbnMucHVzaChcbiAgICAgICAgYENvbnNpZGVyIGFsdGVybmF0aXZlcyBmb3IgJHtoZWF2eURlcGVuZGVuY2llcy5sZW5ndGh9IGhlYXZ5IGRlcGVuZGVuY2llc2BcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlY29tbWVuZGF0aW9ucztcbiAgfVxuXG4gIHByaXZhdGUgYWRkQWxlcnQoYWxlcnQ6IEJ1bmRsZU9wdGltaXphdGlvbkFsZXJ0KTogdm9pZCB7XG4gICAgdGhpcy5hbGVydHMucHVzaChhbGVydCk7XG5cbiAgICAvLyBLZWVwIG9ubHkgcmVjZW50IGFsZXJ0c1xuICAgIGlmICh0aGlzLmFsZXJ0cy5sZW5ndGggPiA1MCkge1xuICAgICAgdGhpcy5hbGVydHMgPSB0aGlzLmFsZXJ0cy5zbGljZSgtMjUpO1xuICAgIH1cblxuICAgIC8vIExvZyBhbGVydFxuICAgIGNvbnN0IHNldmVyaXR5SWNvbiA9IGFsZXJ0LnNldmVyaXR5ID09PSAnY3JpdGljYWwnID8gJ/CfmqgnIDogJ+KaoO+4jyc7XG4gICAgY29uc29sZS5sb2coYCR7c2V2ZXJpdHlJY29ufSBCdW5kbGUgQWxlcnQ6ICR7YWxlcnQubWVzc2FnZX1gKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgY3VycmVudCBhbGVydHNcbiAgICovXG4gIGdldEN1cnJlbnRBbGVydHMoKTogQnVuZGxlT3B0aW1pemF0aW9uQWxlcnRbXSB7XG4gICAgcmV0dXJuIFsuLi50aGlzLmFsZXJ0c107XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXIgYWxsIGFsZXJ0c1xuICAgKi9cbiAgY2xlYXJBbGVydHMoKTogdm9pZCB7XG4gICAgdGhpcy5hbGVydHMgPSBbXTtcbiAgICBjb25zb2xlLmxvZygn8J+TpiBCdW5kbGUgb3B0aW1pemF0aW9uIGFsZXJ0cyBjbGVhcmVkJyk7XG4gIH1cblxuICAvKipcbiAgICogRXhwb3J0IGJ1bmRsZSBhbmFseXNpcyBkYXRhXG4gICAqL1xuICBhc3luYyBleHBvcnRCdW5kbGVEYXRhKGZpbGVQYXRoOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVwb3J0ID0gYXdhaXQgdGhpcy5nZW5lcmF0ZU9wdGltaXphdGlvblJlcG9ydCgpO1xuICAgICAgY29uc3QgZXhwb3J0RGF0YSA9IHtcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIHJlcG9ydCxcbiAgICAgICAgaGlzdG9yeTogdGhpcy5hbmFseXNpc0hpc3RvcnksXG4gICAgICAgIGFsZXJ0czogdGhpcy5hbGVydHMsXG4gICAgICB9O1xuXG4gICAgICBmcy53cml0ZUZpbGVTeW5jKGZpbGVQYXRoLCBKU09OLnN0cmluZ2lmeShleHBvcnREYXRhLCBudWxsLCAyKSk7XG4gICAgICBjb25zb2xlLmxvZyhg8J+TpiBCdW5kbGUgYW5hbHlzaXMgZGF0YSBleHBvcnRlZCB0bzogJHtmaWxlUGF0aH1gKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZXhwb3J0IGJ1bmRsZSBkYXRhOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgfVxuICB9XG59XG4iXSwidmVyc2lvbiI6M30=