fa2a5091c461531fc62b325c691732ae
"use strict";
/**
 * Enterprise Intelligence Generator Tests
 * Perfect Codebase Campaign - Phase 3 Implementation
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock fs
jest.mock('fs');
const fs = __importStar(require("fs"));
const EnterpriseIntelligenceGenerator_1 = require("./EnterpriseIntelligenceGenerator");
const UnusedExportAnalyzer_1 = require("./UnusedExportAnalyzer");
const mockFs = fs;
describe('EnterpriseIntelligenceGenerator', () => {
    let generator;
    beforeEach(() => {
        generator = new EnterpriseIntelligenceGenerator_1.EnterpriseIntelligenceGenerator('test-output');
        jest.clearAllMocks();
        // Mock fs operations
        mockFs.promises = {
            access: jest.fn().mockRejectedValue(new Error('Directory does not exist')),
            mkdir: jest.fn().mockResolvedValue(undefined),
            writeFile: jest.fn().mockResolvedValue(undefined)
        };
    });
    describe('constructor', () => {
        it('should initialize with default output directory', () => {
            const defaultGenerator = new EnterpriseIntelligenceGenerator_1.EnterpriseIntelligenceGenerator();
            expect(defaultGenerator).toBeInstanceOf(EnterpriseIntelligenceGenerator_1.EnterpriseIntelligenceGenerator);
        });
        it('should initialize with custom output directory', () => {
            const customGenerator = new EnterpriseIntelligenceGenerator_1.EnterpriseIntelligenceGenerator('custom-output');
            expect(customGenerator).toBeInstanceOf(EnterpriseIntelligenceGenerator_1.EnterpriseIntelligenceGenerator);
        });
    });
    describe('generateIntelligenceSystems', () => {
        const mockFileAnalysis = {
            filePath: '/test/TestFile.ts',
            priority: UnusedExportAnalyzer_1.FilePriority.HIGH,
            unusedExports: [
                {
                    filePath: '/test/TestFile.ts',
                    exportName: 'testFunction',
                    exportType: 'function',
                    lineNumber: 1,
                    isDefault: false,
                    complexity: 5,
                    usageCount: 0
                }
            ],
            safetyScore: 90,
            transformationCandidates: [
                {
                    export: {
                        filePath: '/test/TestFile.ts',
                        exportName: 'testFunction',
                        exportType: 'function',
                        lineNumber: 1,
                        isDefault: false,
                        complexity: 5,
                        usageCount: 0
                    },
                    intelligenceSystemName: 'TEST_FUNCTION_INTELLIGENCE_SYSTEM',
                    transformationComplexity: UnusedExportAnalyzer_1.TransformationComplexity.MODERATE,
                    safetyScore: 85,
                    estimatedBenefit: 75
                }
            ],
            category: UnusedExportAnalyzer_1.FileCategory.CORE
        };
        it('should generate intelligence systems from file analyses', async () => {
            const results = await generator.generateIntelligenceSystems([mockFileAnalysis]);
            expect(results).toHaveLength(1);
            expect(results[0]).toHaveProperty('systemName', 'TEST_FUNCTION_INTELLIGENCE_SYSTEM');
            expect(results[0]).toHaveProperty('originalExport');
            expect(results[0]).toHaveProperty('generatedCode');
            expect(results[0]).toHaveProperty('capabilities');
            expect(results[0]).toHaveProperty('integrationPoints');
            expect(results[0]).toHaveProperty('estimatedValue');
            expect(results[0]).toHaveProperty('complexity');
        });
        it('should create output directory if it does not exist', async () => {
            await generator.generateIntelligenceSystems([mockFileAnalysis]);
            expect(mockFs.promises.mkdir).toHaveBeenCalledWith('test-output', { recursive: true });
        });
        it('should write generated code to files', async () => {
            await generator.generateIntelligenceSystems([mockFileAnalysis]);
            expect(mockFs.promises.writeFile).toHaveBeenCalledWith(expect.stringContaining('TEST_FUNCTION_INTELLIGENCE_SYSTEM.ts'), expect.stringContaining('TEST_FUNCTION_INTELLIGENCE_SYSTEM'));
        });
        it('should handle generation errors gracefully', async () => {
            const invalidAnalysis = {
                ...mockFileAnalysis,
                transformationCandidates: [
                    {
                        ...mockFileAnalysis.transformationCandidates[0],
                        export: {
                            ...mockFileAnalysis.transformationCandidates[0].export,
                            exportName: null // Invalid export name
                        }
                    }
                ]
            };
            const results = await generator.generateIntelligenceSystems([invalidAnalysis]);
            expect(results).toHaveLength(0); // Should handle error and continue
        });
    });
    describe('selectTemplate', () => {
        it('should select function template for function exports', () => {
            const candidate = {
                export: {
                    filePath: '/test/test.ts',
                    exportName: 'testFunction',
                    exportType: 'function',
                    lineNumber: 1,
                    isDefault: false,
                    complexity: 5,
                    usageCount: 0
                },
                intelligenceSystemName: 'TEST_FUNCTION_INTELLIGENCE_SYSTEM',
                transformationComplexity: UnusedExportAnalyzer_1.TransformationComplexity.MODERATE,
                safetyScore: 85,
                estimatedBenefit: 75
            };
            const template = generator.selectTemplate(candidate);
            expect(template.name).toBe('Function Intelligence System');
        });
        it('should select class template for class exports', () => {
            const candidate = {
                export: {
                    filePath: '/test/test.ts',
                    exportName: 'TestClass',
                    exportType: 'class',
                    lineNumber: 1,
                    isDefault: false,
                    complexity: 10,
                    usageCount: 0
                },
                intelligenceSystemName: 'TEST_CLASS_INTELLIGENCE_SYSTEM',
                transformationComplexity: UnusedExportAnalyzer_1.TransformationComplexity.COMPLEX,
                safetyScore: 80,
                estimatedBenefit: 85
            };
            const template = generator.selectTemplate(candidate);
            expect(template.name).toBe('Class Intelligence System');
        });
        it('should select type template for interface exports', () => {
            const candidate = {
                export: {
                    filePath: '/test/test.ts',
                    exportName: 'TestInterface',
                    exportType: 'interface',
                    lineNumber: 1,
                    isDefault: false,
                    complexity: 3,
                    usageCount: 0
                },
                intelligenceSystemName: 'TEST_INTERFACE_INTELLIGENCE_SYSTEM',
                transformationComplexity: UnusedExportAnalyzer_1.TransformationComplexity.SIMPLE,
                safetyScore: 95,
                estimatedBenefit: 60
            };
            const template = generator.selectTemplate(candidate);
            expect(template.name).toBe('Type Intelligence System');
        });
        it('should select data template for const exports', () => {
            const candidate = {
                export: {
                    filePath: '/test/test.ts',
                    exportName: 'TEST_CONSTANT',
                    exportType: 'const',
                    lineNumber: 1,
                    isDefault: false,
                    complexity: 2,
                    usageCount: 0
                },
                intelligenceSystemName: 'TEST_CONSTANT_INTELLIGENCE_SYSTEM',
                transformationComplexity: UnusedExportAnalyzer_1.TransformationComplexity.SIMPLE,
                safetyScore: 90,
                estimatedBenefit: 50
            };
            const template = generator.selectTemplate(candidate);
            expect(template.name).toBe('Data Intelligence System');
        });
    });
    describe('generateCapabilities', () => {
        it('should generate function-specific capabilities', () => {
            const candidate = {
                export: {
                    filePath: '/test/test.ts',
                    exportName: 'testFunction',
                    exportType: 'function',
                    lineNumber: 1,
                    isDefault: false,
                    complexity: 5,
                    usageCount: 0
                },
                intelligenceSystemName: 'TEST_FUNCTION_INTELLIGENCE_SYSTEM',
                transformationComplexity: UnusedExportAnalyzer_1.TransformationComplexity.MODERATE,
                safetyScore: 85,
                estimatedBenefit: 75
            };
            const template = generator.selectTemplate(candidate);
            const capabilities = generator.generateCapabilities(candidate, template);
            expect(capabilities.some((cap) => cap.name === 'analyzeFunction')).toBe(true);
            expect(capabilities.length).toBeGreaterThan(2);
        });
        it('should generate class-specific capabilities', () => {
            const candidate = {
                export: {
                    filePath: '/test/test.ts',
                    exportName: 'TestClass',
                    exportType: 'class',
                    lineNumber: 1,
                    isDefault: false,
                    complexity: 10,
                    usageCount: 0
                },
                intelligenceSystemName: 'TEST_CLASS_INTELLIGENCE_SYSTEM',
                transformationComplexity: UnusedExportAnalyzer_1.TransformationComplexity.COMPLEX,
                safetyScore: 80,
                estimatedBenefit: 85
            };
            const template = generator.selectTemplate(candidate);
            const capabilities = generator.generateCapabilities(candidate, template);
            expect(capabilities.some((cap) => cap.name === 'analyzeClassStructure')).toBe(true);
        });
        it('should add advanced capabilities for complex exports', () => {
            const candidate = {
                export: {
                    filePath: '/test/test.ts',
                    exportName: 'complexFunction',
                    exportType: 'function',
                    lineNumber: 1,
                    isDefault: false,
                    complexity: 25,
                    usageCount: 0
                },
                intelligenceSystemName: 'COMPLEX_FUNCTION_INTELLIGENCE_SYSTEM',
                transformationComplexity: UnusedExportAnalyzer_1.TransformationComplexity.VERY_COMPLEX,
                safetyScore: 70,
                estimatedBenefit: 90
            };
            const template = generator.selectTemplate(candidate);
            const capabilities = generator.generateCapabilities(candidate, template);
            expect(capabilities.some((cap) => cap.name === 'generateAdvancedInsights')).toBe(true);
        });
    });
    describe('generateIntegrationPoints', () => {
        it('should generate integration points for intelligence systems', () => {
            const candidate = {
                export: {
                    filePath: '/test/test.ts',
                    exportName: 'testFunction',
                    exportType: 'function',
                    lineNumber: 1,
                    isDefault: false,
                    complexity: 5,
                    usageCount: 0
                },
                intelligenceSystemName: 'TEST_FUNCTION_INTELLIGENCE_SYSTEM',
                transformationComplexity: UnusedExportAnalyzer_1.TransformationComplexity.MODERATE,
                safetyScore: 85,
                estimatedBenefit: 75
            };
            const integrationPoints = generator.generateIntegrationPoints(candidate, '/test/test.ts');
            expect(integrationPoints.length).toBeGreaterThan(0);
            expect(integrationPoints.some((ip) => ip.method === EnterpriseIntelligenceGenerator_1.IntegrationMethod.DIRECT_IMPORT)).toBe(true);
            expect(integrationPoints.some((ip) => ip.method === EnterpriseIntelligenceGenerator_1.IntegrationMethod.API_ENDPOINT)).toBe(true);
        });
        it('should include original file integration for safe candidates', () => {
            const candidate = {
                export: {
                    filePath: '/test/test.ts',
                    exportName: 'safeFunction',
                    exportType: 'function',
                    lineNumber: 1,
                    isDefault: false,
                    complexity: 3,
                    usageCount: 0
                },
                intelligenceSystemName: 'SAFE_FUNCTION_INTELLIGENCE_SYSTEM',
                transformationComplexity: UnusedExportAnalyzer_1.TransformationComplexity.SIMPLE,
                safetyScore: 95,
                estimatedBenefit: 70
            };
            const integrationPoints = generator.generateIntegrationPoints(candidate, '/test/test.ts');
            expect(integrationPoints.some((ip) => ip.target === '/test/test.ts')).toBe(true);
        });
    });
    describe('generateCode', () => {
        it('should generate complete intelligence system code', () => {
            const candidate = {
                export: {
                    filePath: '/test/test.ts',
                    exportName: 'testFunction',
                    exportType: 'function',
                    lineNumber: 1,
                    isDefault: false,
                    complexity: 5,
                    usageCount: 0
                },
                intelligenceSystemName: 'TEST_FUNCTION_INTELLIGENCE_SYSTEM',
                transformationComplexity: UnusedExportAnalyzer_1.TransformationComplexity.MODERATE,
                safetyScore: 85,
                estimatedBenefit: 75
            };
            const template = generator.selectTemplate(candidate);
            const capabilities = generator.generateCapabilities(candidate, template);
            const code = generator.generateCode(candidate, template, capabilities);
            expect(code).toContain('TEST_FUNCTION_INTELLIGENCE_SYSTEM');
            expect(code).toContain('class TEST_FUNCTION_INTELLIGENCE_SYSTEM');
            expect(code).toContain('analyzePatterns');
            expect(code).toContain('generateRecommendations');
            expect(code).toContain('demonstrateCapabilities');
            expect(code).toContain('export const test_function_intelligence_system');
        });
        it('should include original export information in comments', () => {
            const candidate = {
                export: {
                    filePath: '/test/test.ts',
                    exportName: 'originalFunction',
                    exportType: 'function',
                    lineNumber: 10,
                    isDefault: false,
                    complexity: 8,
                    usageCount: 0
                },
                intelligenceSystemName: 'ORIGINAL_FUNCTION_INTELLIGENCE_SYSTEM',
                transformationComplexity: UnusedExportAnalyzer_1.TransformationComplexity.MODERATE,
                safetyScore: 80,
                estimatedBenefit: 70
            };
            const template = generator.selectTemplate(candidate);
            const capabilities = generator.generateCapabilities(candidate, template);
            const code = generator.generateCode(candidate, template, capabilities);
            expect(code).toContain('Original Export: originalFunction (function)');
            expect(code).toContain('Estimated Value: 70/100');
        });
    });
    describe('calculateEstimatedValue', () => {
        it('should calculate value based on candidate benefit and capabilities', () => {
            const candidate = {
                export: {
                    filePath: '/test/test.ts',
                    exportName: 'testFunction',
                    exportType: 'function',
                    lineNumber: 1,
                    isDefault: false,
                    complexity: 5,
                    usageCount: 0
                },
                intelligenceSystemName: 'TEST_FUNCTION_INTELLIGENCE_SYSTEM',
                transformationComplexity: UnusedExportAnalyzer_1.TransformationComplexity.MODERATE,
                safetyScore: 85,
                estimatedBenefit: 50
            };
            const capabilities = [
                {
                    name: 'basicCapability',
                    description: 'Basic capability',
                    implementation: 'return {};',
                    complexity: EnterpriseIntelligenceGenerator_1.CapabilityComplexity.BASIC
                },
                {
                    name: 'advancedCapability',
                    description: 'Advanced capability',
                    implementation: 'return {};',
                    complexity: EnterpriseIntelligenceGenerator_1.CapabilityComplexity.ADVANCED
                }
            ];
            const value = generator.calculateEstimatedValue(candidate, capabilities);
            expect(value).toBeGreaterThan(50); // Should be higher than base benefit
            expect(value).toBeLessThanOrEqual(100); // Should be capped at 100
        });
    });
    describe('assessGenerationComplexity', () => {
        it('should assess SIMPLE complexity for simple candidates', () => {
            const candidate = {
                export: {
                    filePath: '/test/test.ts',
                    exportName: 'simpleFunction',
                    exportType: 'const',
                    lineNumber: 1,
                    isDefault: false,
                    complexity: 2,
                    usageCount: 0
                },
                intelligenceSystemName: 'SIMPLE_FUNCTION_INTELLIGENCE_SYSTEM',
                transformationComplexity: UnusedExportAnalyzer_1.TransformationComplexity.SIMPLE,
                safetyScore: 95,
                estimatedBenefit: 40
            };
            const capabilities = [
                {
                    name: 'basicCapability',
                    description: 'Basic capability',
                    implementation: 'return {};',
                    complexity: EnterpriseIntelligenceGenerator_1.CapabilityComplexity.BASIC
                }
            ];
            const complexity = generator.assessGenerationComplexity(candidate, capabilities);
            expect(complexity).toBe(EnterpriseIntelligenceGenerator_1.GenerationComplexity.SIMPLE);
        });
        it('should assess VERY_COMPLEX complexity for complex candidates', () => {
            const candidate = {
                export: {
                    filePath: '/test/test.ts',
                    exportName: 'complexFunction',
                    exportType: 'class',
                    lineNumber: 1,
                    isDefault: false,
                    complexity: 30,
                    usageCount: 0
                },
                intelligenceSystemName: 'COMPLEX_FUNCTION_INTELLIGENCE_SYSTEM',
                transformationComplexity: UnusedExportAnalyzer_1.TransformationComplexity.VERY_COMPLEX,
                safetyScore: 60,
                estimatedBenefit: 95
            };
            const capabilities = [
                {
                    name: 'expertCapability',
                    description: 'Expert capability',
                    implementation: 'return {};',
                    complexity: EnterpriseIntelligenceGenerator_1.CapabilityComplexity.EXPERT
                }
            ];
            const complexity = generator.assessGenerationComplexity(candidate, capabilities);
            expect(complexity).toBe(EnterpriseIntelligenceGenerator_1.GenerationComplexity.VERY_COMPLEX);
        });
    });
    describe('generateSummary', () => {
        it('should generate comprehensive summary of results', () => {
            const mockResults = [
                {
                    systemName: 'SYSTEM_1',
                    filePath: '/output/SYSTEM_1.ts',
                    originalExport: {
                        filePath: '/test/test1.ts',
                        exportName: 'function1',
                        exportType: 'function',
                        lineNumber: 1,
                        isDefault: false,
                        complexity: 5,
                        usageCount: 0
                    },
                    generatedCode: 'code1',
                    capabilities: [
                        { name: 'cap1', description: 'desc1', implementation: 'impl1', complexity: EnterpriseIntelligenceGenerator_1.CapabilityComplexity.BASIC },
                        { name: 'cap2', description: 'desc2', implementation: 'impl2', complexity: EnterpriseIntelligenceGenerator_1.CapabilityComplexity.INTERMEDIATE }
                    ],
                    integrationPoints: [
                        { target: 'target1', method: EnterpriseIntelligenceGenerator_1.IntegrationMethod.DIRECT_IMPORT, code: 'code1', priority: EnterpriseIntelligenceGenerator_1.IntegrationPriority.HIGH }
                    ],
                    estimatedValue: 75,
                    complexity: EnterpriseIntelligenceGenerator_1.GenerationComplexity.MODERATE
                },
                {
                    systemName: 'SYSTEM_2',
                    filePath: '/output/SYSTEM_2.ts',
                    originalExport: {
                        filePath: '/test/test2.ts',
                        exportName: 'class2',
                        exportType: 'class',
                        lineNumber: 1,
                        isDefault: false,
                        complexity: 10,
                        usageCount: 0
                    },
                    generatedCode: 'code2',
                    capabilities: [
                        { name: 'cap3', description: 'desc3', implementation: 'impl3', complexity: EnterpriseIntelligenceGenerator_1.CapabilityComplexity.ADVANCED }
                    ],
                    integrationPoints: [
                        { target: 'target2', method: EnterpriseIntelligenceGenerator_1.IntegrationMethod.API_ENDPOINT, code: 'code2', priority: EnterpriseIntelligenceGenerator_1.IntegrationPriority.MEDIUM }
                    ],
                    estimatedValue: 85,
                    complexity: EnterpriseIntelligenceGenerator_1.GenerationComplexity.COMPLEX
                }
            ];
            const summary = generator.generateSummary(mockResults);
            expect(summary.totalSystemsGenerated).toBe(2);
            expect(summary.totalCapabilitiesAdded).toBe(3);
            expect(summary.totalIntegrationPoints).toBe(2);
            expect(summary.estimatedTotalValue).toBe(160);
            expect(summary.generationsByCategory).toHaveProperty('function', 1);
            expect(summary.generationsByCategory).toHaveProperty('class', 1);
        });
    });
    describe('generateIntegrationGuide', () => {
        it('should generate comprehensive integration guide', () => {
            const mockResults = [
                {
                    systemName: 'TEST_SYSTEM_INTELLIGENCE_SYSTEM',
                    filePath: '/output/TEST_SYSTEM_INTELLIGENCE_SYSTEM.ts',
                    originalExport: {
                        filePath: '/test/test.ts',
                        exportName: 'testFunction',
                        exportType: 'function',
                        lineNumber: 1,
                        isDefault: false,
                        complexity: 5,
                        usageCount: 0
                    },
                    generatedCode: 'code',
                    capabilities: [],
                    integrationPoints: [
                        {
                            target: 'src/components/dashboard/IntelligenceDashboard.tsx',
                            method: EnterpriseIntelligenceGenerator_1.IntegrationMethod.DEPENDENCY_INJECTION,
                            code: 'dashboard integration code',
                            priority: EnterpriseIntelligenceGenerator_1.IntegrationPriority.MEDIUM
                        }
                    ],
                    estimatedValue: 75,
                    complexity: EnterpriseIntelligenceGenerator_1.GenerationComplexity.MODERATE
                }
            ];
            const guide = generator.generateIntegrationGuide(mockResults);
            expect(guide).toContain('# Enterprise Intelligence Systems Integration Guide');
            expect(guide).toContain('Generated 1 intelligence systems');
            expect(guide).toContain('TEST_SYSTEM_INTELLIGENCE_SYSTEM');
            expect(guide).toContain('Integration Steps');
            expect(guide).toContain('Dashboard Integration');
            expect(guide).toContain('Next Steps');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,