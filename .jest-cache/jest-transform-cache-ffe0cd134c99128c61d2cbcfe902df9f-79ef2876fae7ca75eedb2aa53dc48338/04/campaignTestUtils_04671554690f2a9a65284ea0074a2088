6976ed4b185ecbf276bd928586a36d83
"use strict";
/**
 * Campaign Test Utilities
 *
 * Comprehensive utilities for testing campaign system functionality
 * with proper isolation and memory management.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.campaignTestData = exports.campaignTestAssertions = exports.validateCampaignMemoryUsage = exports.withCampaignTestIsolation = exports.executeCampaignTestScenario = exports.validateCampaignTestIsolation = exports.simulateProgressTracking = exports.simulateCampaignPhase = exports.createMockSafetyEvent = exports.createMockProgressMetrics = exports.createMockCampaignConfig = exports.cleanupCampaignTest = exports.setupCampaignTest = void 0;
const campaign_1 = require("../../types/campaign");
const CampaignTestController_1 = require("./CampaignTestController");
/**
 * Setup campaign test environment with proper isolation
 */
async function setupCampaignTest(setup) {
    const { testName, enableMemoryMonitoring = true, preventActualBuilds = true, preventGitOperations = true, mockProgressTracking = true, simulateRealProgress: _simulateRealProgress = false, customConfig: _customConfig } = setup;
    // Initialize test controller with configuration
    await CampaignTestController_1.campaignTestController.initializeForTest(testName, {
        pauseProgressTracking: mockProgressTracking,
        preventBuildExecution: preventActualBuilds,
        preventGitOperations,
        enableMemoryMonitoring,
        isolateFileSystem: false,
        mockExternalAPIs: true
    });
    // Pause campaign operations for test isolation
    await CampaignTestController_1.campaignTestController.pauseCampaignForTest(testName);
    // Get mock instances
    const mockInstances = CampaignTestController_1.campaignTestController.getMockInstances();
    const testSafeTracker = CampaignTestController_1.campaignTestController.getTestSafeTracker();
    // Validate that all required instances are available
    if (!mockInstances.controller || !mockInstances.tracker || !mockInstances.safety) {
        throw new Error('Failed to initialize campaign mock instances');
    }
    return {
        controller: mockInstances.controller,
        tracker: mockInstances.tracker,
        safety: mockInstances.safety,
        testSafeTracker,
        testController: CampaignTestController_1.campaignTestController
    };
}
exports.setupCampaignTest = setupCampaignTest;
/**
 * Cleanup campaign test environment
 */
async function cleanupCampaignTest(testName) {
    await CampaignTestController_1.campaignTestController.cleanupAfterTest(testName);
}
exports.cleanupCampaignTest = cleanupCampaignTest;
/**
 * Create mock campaign configuration for testing
 */
function createMockCampaignConfig(overrides) {
    const defaultConfig = {
        phases: [
            {
                id: 'test-phase-1',
                name: 'Test Phase 1',
                description: 'Mock phase for testing',
                tools: [
                    {
                        scriptPath: 'mock-script.js',
                        parameters: { maxFiles: 10, autoFix: true },
                        batchSize: 10,
                        safetyLevel: 'HIGH'
                    }
                ],
                successCriteria: {
                    typeScriptErrors: 0,
                    lintingWarnings: 0
                },
                safetyCheckpoints: []
            }
        ],
        safetySettings: {
            maxFilesPerBatch: 10,
            buildValidationFrequency: 5,
            testValidationFrequency: 10,
            corruptionDetectionEnabled: true,
            automaticRollbackEnabled: true,
            stashRetentionDays: 7
        },
        progressTargets: {
            typeScriptErrors: 0,
            lintingWarnings: 0,
            buildTime: 10,
            enterpriseSystems: 200
        },
        toolConfiguration: {
            enhancedErrorFixer: 'mock-enhanced-fixer.js',
            explicitAnyFixer: 'mock-any-fixer.js',
            unusedVariablesFixer: 'mock-unused-fixer.js',
            consoleStatementFixer: 'mock-console-fixer.js'
        }
    };
    return { ...defaultConfig, ...overrides };
}
exports.createMockCampaignConfig = createMockCampaignConfig;
/**
 * Create mock progress metrics for testing
 */
function createMockProgressMetrics(overrides) {
    const defaultMetrics = {
        typeScriptErrors: {
            current: 50,
            target: 0,
            reduction: 36,
            percentage: 42
        },
        lintingWarnings: {
            current: 2000,
            target: 0,
            reduction: 2506,
            percentage: 56
        },
        buildPerformance: {
            currentTime: 8.5,
            targetTime: 10,
            cacheHitRate: 0.8,
            memoryUsage: 45
        },
        enterpriseSystems: {
            current: 50,
            target: 200,
            transformedExports: 50
        }
    };
    return { ...defaultMetrics, ...overrides };
}
exports.createMockProgressMetrics = createMockProgressMetrics;
/**
 * Create mock safety event for testing
 */
function createMockSafetyEvent(type, description, severity = campaign_1.SafetyEventSeverity.INFO) {
    return {
        type,
        timestamp: new Date(),
        description: `Mock: ${description}`,
        severity,
        action: 'MOCK_TEST_EVENT'
    };
}
exports.createMockSafetyEvent = createMockSafetyEvent;
/**
 * Simulate campaign phase execution for testing
 */
async function simulateCampaignPhase(context, phase, expectedResult) {
    const result = await context.controller.executePhase(phase);
    // Validate result if expected result is provided
    if (expectedResult) {
        expect(result.success).toBe(expectedResult.success ?? true);
        if (expectedResult.filesProcessed !== undefined) {
            expect(result.filesProcessed).toBe(expectedResult.filesProcessed);
        }
        if (expectedResult.errorsFixed !== undefined) {
            expect(result.errorsFixed).toBe(expectedResult.errorsFixed);
        }
    }
    return result;
}
exports.simulateCampaignPhase = simulateCampaignPhase;
/**
 * Simulate progress tracking for testing
 */
async function simulateProgressTracking(context, targetMetrics, durationMs = 1000) {
    if (context.testSafeTracker) {
        await context.testSafeTracker.simulateProgress(targetMetrics, durationMs, 'test-simulation');
        return await context.testSafeTracker.getProgressMetrics();
    }
    else {
        // Fallback to mock tracker
        context.tracker.updateMockMetrics(targetMetrics);
        return await context.tracker.getProgressMetrics();
    }
}
exports.simulateProgressTracking = simulateProgressTracking;
/**
 * Validate campaign test isolation
 */
function validateCampaignTestIsolation(context) {
    return context.testController.validateTestIsolation();
}
exports.validateCampaignTestIsolation = validateCampaignTestIsolation;
/**
 * Execute a complete campaign test scenario
 */
async function executeCampaignTestScenario(scenario, config) {
    // Setup test environment
    const context = await setupCampaignTest({
        testName: scenario.name,
        customConfig: config
    });
    try {
        // Set initial metrics
        context.testController.updateMockMetrics(scenario.initialMetrics, scenario.name);
        // Execute phases
        const campaignConfig = createMockCampaignConfig(config);
        const results = [];
        for (let i = 0; i < campaignConfig.phases.length; i++) {
            const phase = campaignConfig.phases[i];
            const expectedResult = scenario.expectedPhaseResults[i] || {};
            const result = await simulateCampaignPhase(context, phase, expectedResult);
            results.push(result);
        }
        // Simulate progress to target metrics
        const finalMetrics = await simulateProgressTracking(context, scenario.targetMetrics, scenario.simulationDuration);
        // Get safety events
        const safetyEvents = context.controller.getSafetyEvents();
        // Validate expected safety events
        scenario.expectedSafetyEvents.forEach(expectedType => {
            const hasEvent = safetyEvents.some(event => event.type === expectedType);
            expect(hasEvent).toBe(true);
        });
        return {
            context,
            results,
            finalMetrics,
            safetyEvents
        };
    }
    finally {
        // Cleanup is handled by the caller or test framework
    }
}
exports.executeCampaignTestScenario = executeCampaignTestScenario;
/**
 * Memory-safe test wrapper for campaign operations
 */
async function withCampaignTestIsolation(testName, testFn, setup) {
    const context = await setupCampaignTest({
        testName,
        ...setup
    });
    try {
        return await testFn(context);
    }
    finally {
        await cleanupCampaignTest(testName);
    }
}
exports.withCampaignTestIsolation = withCampaignTestIsolation;
/**
 * Validate campaign system memory usage during tests
 */
function validateCampaignMemoryUsage(context) {
    const recommendations = [];
    let isMemoryEfficient = true;
    // Check test-safe tracker memory usage
    if (context.testSafeTracker) {
        const memoryStats = context.testSafeTracker.getMemoryStatistics();
        if (memoryStats && !memoryStats.memoryEfficient) {
            isMemoryEfficient = false;
            recommendations.push('Test-safe tracker memory usage is high');
        }
        return {
            isMemoryEfficient,
            memoryStats,
            recommendations
        };
    }
    return {
        isMemoryEfficient: true,
        memoryStats: null,
        recommendations: []
    };
}
exports.validateCampaignMemoryUsage = validateCampaignMemoryUsage;
/**
 * Create comprehensive test assertions for campaign operations
 */
exports.campaignTestAssertions = {
    /**
     * Assert that campaign phase completed successfully
     */
    phaseCompletedSuccessfully: (result) => {
        expect(result.success).toBe(true);
        expect(result.executionTime).toBeGreaterThan(0);
        expect(result.safetyEvents).toBeDefined();
    },
    /**
     * Assert that progress metrics improved
     */
    progressImproved: (initial, final) => {
        expect(final.typeScriptErrors.current).toBeLessThanOrEqual(initial.typeScriptErrors.current);
        expect(final.lintingWarnings.current).toBeLessThanOrEqual(initial.lintingWarnings.current);
    },
    /**
     * Assert that safety events were recorded
     */
    safetyEventsRecorded: (events, expectedTypes) => {
        expectedTypes.forEach(expectedType => {
            const hasEvent = events.some(event => event.type === expectedType);
            expect(hasEvent).toBe(true);
        });
    },
    /**
     * Assert that test isolation is working
     */
    testIsolationActive: (context) => {
        const validation = validateCampaignTestIsolation(context);
        expect(validation.isValid).toBe(true);
        expect(validation.issues).toHaveLength(0);
    },
    /**
     * Assert that memory usage is within acceptable limits
     */
    memoryUsageAcceptable: (context) => {
        const memoryValidation = validateCampaignMemoryUsage(context);
        expect(memoryValidation.isMemoryEfficient).toBe(true);
    }
};
/**
 * Common test data generators
 */
exports.campaignTestData = {
    /**
     * Generate realistic TypeScript error reduction scenario
     */
    typeScriptErrorReduction: () => ({
        name: 'typescript-error-reduction',
        initialMetrics: createMockProgressMetrics({
            typeScriptErrors: { current: 86, target: 0, reduction: 0, percentage: 0 }
        }),
        targetMetrics: {
            typeScriptErrors: { current: 0, target: 0, reduction: 86, percentage: 100 }
        },
        expectedPhaseResults: [
            { success: true, errorsFixed: 86 }
        ],
        expectedSafetyEvents: [
            campaign_1.SafetyEventType.CHECKPOINT_CREATED,
            campaign_1.SafetyEventType.CHECKPOINT_CREATED // Start and end checkpoints
        ],
        simulationDuration: 2000
    }),
    /**
     * Generate linting warning cleanup scenario
     */
    lintingWarningCleanup: () => ({
        name: 'linting-warning-cleanup',
        initialMetrics: createMockProgressMetrics({
            lintingWarnings: { current: 4506, target: 0, reduction: 0, percentage: 0 }
        }),
        targetMetrics: {
            lintingWarnings: { current: 0, target: 0, reduction: 4506, percentage: 100 }
        },
        expectedPhaseResults: [
            { success: true, warningsFixed: 4506 }
        ],
        expectedSafetyEvents: [
            campaign_1.SafetyEventType.CHECKPOINT_CREATED
        ],
        simulationDuration: 3000
    }),
    /**
     * Generate build performance optimization scenario
     */
    buildPerformanceOptimization: () => ({
        name: 'build-performance-optimization',
        initialMetrics: createMockProgressMetrics({
            buildPerformance: { currentTime: 15, targetTime: 10, cacheHitRate: 0.6, memoryUsage: 80 }
        }),
        targetMetrics: {
            buildPerformance: { currentTime: 8, targetTime: 10, cacheHitRate: 0.8, memoryUsage: 45 }
        },
        expectedPhaseResults: [
            { success: true }
        ],
        expectedSafetyEvents: [
            campaign_1.SafetyEventType.CHECKPOINT_CREATED
        ],
        simulationDuration: 1500
    })
};
// Functions are already exported at their declarations above
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9fX3Rlc3RzX18vdXRpbHMvY2FtcGFpZ25UZXN0VXRpbHMudHMiLCJtYXBwaW5ncyI6IjtBQUFBOzs7OztHQUtHOzs7QUFFSCxtREFROEI7QUFROUIscUVBQTBGO0FBMkIxRjs7R0FFRztBQUNJLEtBQUssVUFBVSxpQkFBaUIsQ0FBQyxLQUF3QjtJQUM5RCxNQUFNLEVBQ0osUUFBUSxFQUNSLHNCQUFzQixHQUFHLElBQUksRUFDN0IsbUJBQW1CLEdBQUcsSUFBSSxFQUMxQixvQkFBb0IsR0FBRyxJQUFJLEVBQzNCLG9CQUFvQixHQUFHLElBQUksRUFDM0Isb0JBQW9CLEVBQUUscUJBQXFCLEdBQUcsS0FBSyxFQUNuRCxZQUFZLEVBQUUsYUFBYSxFQUM1QixHQUFHLEtBQUssQ0FBQztJQUVWLGdEQUFnRDtJQUNoRCxNQUFNLCtDQUFzQixDQUFDLGlCQUFpQixDQUFDLFFBQVEsRUFBRTtRQUN2RCxxQkFBcUIsRUFBRSxvQkFBb0I7UUFDM0MscUJBQXFCLEVBQUUsbUJBQW1CO1FBQzFDLG9CQUFvQjtRQUNwQixzQkFBc0I7UUFDdEIsaUJBQWlCLEVBQUUsS0FBSztRQUN4QixnQkFBZ0IsRUFBRSxJQUFJO0tBQ3ZCLENBQUMsQ0FBQztJQUVILCtDQUErQztJQUMvQyxNQUFNLCtDQUFzQixDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRTVELHFCQUFxQjtJQUNyQixNQUFNLGFBQWEsR0FBRywrQ0FBc0IsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQ2hFLE1BQU0sZUFBZSxHQUFHLCtDQUFzQixDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFFcEUscURBQXFEO0lBQ3JELElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUU7UUFDaEYsTUFBTSxJQUFJLEtBQUssQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO0tBQ2pFO0lB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RUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRTtTQUN2QztRQUNELG9CQUFvQixFQUFFO1lBQ3BCLDBCQUFlLENBQUMsa0JBQWtCO1NBQ25DO1FBQ0Qsa0JBQWtCLEVBQUUsSUFBSTtLQUN6QixDQUFDO0lBRUY7O09BRUc7SUFDSCw0QkFBNEIsRUFBRSxHQUF5QixFQUFFLENBQUMsQ0FBQztRQUN6RCxJQUFJLEVBQUUsZ0NBQWdDO1FBQ3RDLGNBQWMsRUFBRSx5QkFBeUIsQ0FBQztZQUN4QyxnQkFBZ0IsRUFBRSxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRSxZQUFZLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUU7U0FDMUYsQ0FBQztRQUNGLGFBQWEsRUFBRTtZQUNiLGdCQUFnQixFQUFFLEVBQUUsV0FBVyxFQUFFLENBQUMsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLFlBQVksRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRTtTQUN6RjtRQUNELG9CQUFvQixFQUFFO1lBQ3BCLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRTtTQUNsQjtRQUNELG9CQUFvQixFQUFFO1lBQ3BCLDBCQUFlLENBQUMsa0JBQWtCO1NBQ25DO1FBQ0Qsa0JBQWtCLEVBQUUsSUFBSTtLQUN6QixDQUFDO0NBQ0gsQ0FBQztBQUVGLDZEQUE2RCIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvR3JlZ0Nhc3Ryby9EZXNrdG9wL1doYXRUb0VhdE5leHQvc3JjL19fdGVzdHNfXy91dGlscy9jYW1wYWlnblRlc3RVdGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENhbXBhaWduIFRlc3QgVXRpbGl0aWVzXG4gKiBcbiAqIENvbXByZWhlbnNpdmUgdXRpbGl0aWVzIGZvciB0ZXN0aW5nIGNhbXBhaWduIHN5c3RlbSBmdW5jdGlvbmFsaXR5XG4gKiB3aXRoIHByb3BlciBpc29sYXRpb24gYW5kIG1lbW9yeSBtYW5hZ2VtZW50LlxuICovXG5cbmltcG9ydCB7XG4gIENhbXBhaWduQ29uZmlnLFxuICBDYW1wYWlnblBoYXNlLFxuICBQcm9ncmVzc01ldHJpY3MsXG4gIFNhZmV0eUV2ZW50LFxuICBTYWZldHlFdmVudFR5cGUsXG4gIFNhZmV0eUV2ZW50U2V2ZXJpdHksXG4gIFBoYXNlUmVzdWx0XG59IGZyb20gJy4uLy4uL3R5cGVzL2NhbXBhaWduJztcbmltcG9ydCB7XG4gIE1vY2tDYW1wYWlnbkNvbnRyb2xsZXIsXG4gIE1vY2tQcm9ncmVzc1RyYWNrZXIsXG4gIE1vY2tTYWZldHlQcm90b2NvbCxcbiAgY2FtcGFpZ25UZXN0SXNvbGF0aW9uIGFzIF9jYW1wYWlnblRlc3RJc29sYXRpb25cbn0gZnJvbSAnLi4vbW9ja3MvQ2FtcGFpZ25TeXN0ZW1Nb2Nrcyc7XG5cbmltcG9ydCB7IGNhbXBhaWduVGVzdENvbnRyb2xsZXIsIENhbXBhaWduVGVzdENvbnRyb2xsZXIgfSBmcm9tICcuL0NhbXBhaWduVGVzdENvbnRyb2xsZXInO1xuaW1wb3J0IHsgVGVzdFNhZmVQcm9ncmVzc1RyYWNrZXIgfSBmcm9tICcuL1Rlc3RTYWZlUHJvZ3Jlc3NUcmFja2VyJztcblxuLyoqXG4gKiBUZXN0IHNldHVwIGNvbmZpZ3VyYXRpb24gZm9yIGNhbXBhaWduIHRlc3RzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2FtcGFpZ25UZXN0U2V0dXAge1xuICB0ZXN0TmFtZTogc3RyaW5nO1xuICBlbmFibGVNZW1vcnlNb25pdG9yaW5nPzogYm9vbGVhbjtcbiAgcHJldmVudEFjdHVhbEJ1aWxkcz86IGJvb2xlYW47XG4gIHByZXZlbnRHaXRPcGVyYXRpb25zPzogYm9vbGVhbjtcbiAgbW9ja1Byb2dyZXNzVHJhY2tpbmc/OiBib29sZWFuO1xuICBzaW11bGF0ZVJlYWxQcm9ncmVzcz86IGJvb2xlYW47XG4gIGN1c3RvbUNvbmZpZz86IFBhcnRpYWw8Q2FtcGFpZ25Db25maWc+O1xufVxuXG4vKipcbiAqIENhbXBhaWduIHRlc3QgY29udGV4dCB0aGF0IHByb3ZpZGVzIGFjY2VzcyB0byBhbGwgbW9jayBpbnN0YW5jZXNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDYW1wYWlnblRlc3RDb250ZXh0IHtcbiAgY29udHJvbGxlcjogTW9ja0NhbXBhaWduQ29udHJvbGxlcjtcbiAgdHJhY2tlcjogTW9ja1Byb2dyZXNzVHJhY2tlcjtcbiAgc2FmZXR5OiBNb2NrU2FmZXR5UHJvdG9jb2w7XG4gIHRlc3RTYWZlVHJhY2tlcjogVGVzdFNhZmVQcm9ncmVzc1RyYWNrZXIgfCBudWxsO1xuICB0ZXN0Q29udHJvbGxlcjogQ2FtcGFpZ25UZXN0Q29udHJvbGxlcjtcbn1cblxuLyoqXG4gKiBTZXR1cCBjYW1wYWlnbiB0ZXN0IGVudmlyb25tZW50IHdpdGggcHJvcGVyIGlzb2xhdGlvblxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2V0dXBDYW1wYWlnblRlc3Qoc2V0dXA6IENhbXBhaWduVGVzdFNldHVwKTogUHJvbWlzZTxDYW1wYWlnblRlc3RDb250ZXh0PiB7XG4gIGNvbnN0IHtcbiAgICB0ZXN0TmFtZSxcbiAgICBlbmFibGVNZW1vcnlNb25pdG9yaW5nID0gdHJ1ZSxcbiAgICBwcmV2ZW50QWN0dWFsQnVpbGRzID0gdHJ1ZSxcbiAgICBwcmV2ZW50R2l0T3BlcmF0aW9ucyA9IHRydWUsXG4gICAgbW9ja1Byb2dyZXNzVHJhY2tpbmcgPSB0cnVlLFxuICAgIHNpbXVsYXRlUmVhbFByb2dyZXNzOiBfc2ltdWxhdGVSZWFsUHJvZ3Jlc3MgPSBmYWxzZSxcbiAgICBjdXN0b21Db25maWc6IF9jdXN0b21Db25maWdcbiAgfSA9IHNldHVwO1xuXG4gIC8vIEluaXRpYWxpemUgdGVzdCBjb250cm9sbGVyIHdpdGggY29uZmlndXJhdGlvblxuICBhd2FpdCBjYW1wYWlnblRlc3RDb250cm9sbGVyLmluaXRpYWxpemVGb3JUZXN0KHRlc3ROYW1lLCB7XG4gICAgcGF1c2VQcm9ncmVzc1RyYWNraW5nOiBtb2NrUHJvZ3Jlc3NUcmFja2luZyxcbiAgICBwcmV2ZW50QnVpbGRFeGVjdXRpb246IHByZXZlbnRBY3R1YWxCdWlsZHMsXG4gICAgcHJldmVudEdpdE9wZXJhdGlvbnMsXG4gICAgZW5hYmxlTWVtb3J5TW9uaXRvcmluZyxcbiAgICBpc29sYXRlRmlsZVN5c3RlbTogZmFsc2UsXG4gICAgbW9ja0V4dGVybmFsQVBJczogdHJ1ZVxuICB9KTtcblxuICAvLyBQYXVzZSBjYW1wYWlnbiBvcGVyYXRpb25zIGZvciB0ZXN0IGlzb2xhdGlvblxuICBhd2FpdCBjYW1wYWlnblRlc3RDb250cm9sbGVyLnBhdXNlQ2FtcGFpZ25Gb3JUZXN0KHRlc3ROYW1lKTtcblxuICAvLyBHZXQgbW9jayBpbnN0YW5jZXNcbiAgY29uc3QgbW9ja0luc3RhbmNlcyA9IGNhbXBhaWduVGVzdENvbnRyb2xsZXIuZ2V0TW9ja0luc3RhbmNlcygpO1xuICBjb25zdCB0ZXN0U2FmZVRyYWNrZXIgPSBjYW1wYWlnblRlc3RDb250cm9sbGVyLmdldFRlc3RTYWZlVHJhY2tlcigpO1xuXG4gIC8vIFZhbGlkYXRlIHRoYXQgYWxsIHJlcXVpcmVkIGluc3RhbmNlcyBhcmUgYXZhaWxhYmxlXG4gIGlmICghbW9ja0luc3RhbmNlcy5jb250cm9sbGVyIHx8ICFtb2NrSW5zdGFuY2VzLnRyYWNrZXIgfHwgIW1vY2tJbnN0YW5jZXMuc2FmZXR5KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gaW5pdGlhbGl6ZSBjYW1wYWlnbiBtb2NrIGluc3RhbmNlcycpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjb250cm9sbGVyOiBtb2NrSW5zdGFuY2VzLmNvbnRyb2xsZXIsXG4gICAgdHJhY2tlcjogbW9ja0luc3RhbmNlcy50cmFja2VyLFxuICAgIHNhZmV0eTogbW9ja0luc3RhbmNlcy5zYWZldHksXG4gICAgdGVzdFNhZmVUcmFja2VyLFxuICAgIHRlc3RDb250cm9sbGVyOiBjYW1wYWlnblRlc3RDb250cm9sbGVyXG4gIH07XG59XG5cbi8qKlxuICogQ2xlYW51cCBjYW1wYWlnbiB0ZXN0IGVudmlyb25tZW50XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjbGVhbnVwQ2FtcGFpZ25UZXN0KHRlc3ROYW1lOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgYXdhaXQgY2FtcGFpZ25UZXN0Q29udHJvbGxlci5jbGVhbnVwQWZ0ZXJUZXN0KHRlc3ROYW1lKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgbW9jayBjYW1wYWlnbiBjb25maWd1cmF0aW9uIGZvciB0ZXN0aW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNb2NrQ2FtcGFpZ25Db25maWcob3ZlcnJpZGVzPzogUGFydGlhbDxDYW1wYWlnbkNvbmZpZz4pOiBDYW1wYWlnbkNvbmZpZyB7XG4gIGNvbnN0IGRlZmF1bHRDb25maWc6IENhbXBhaWduQ29uZmlnID0ge1xuICAgIHBoYXNlczogW1xuICAgICAge1xuICAgICAgICBpZDogJ3Rlc3QtcGhhc2UtMScsXG4gICAgICAgIG5hbWU6ICdUZXN0IFBoYXNlIDEnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ01vY2sgcGhhc2UgZm9yIHRlc3RpbmcnLFxuICAgICAgICB0b29sczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHNjcmlwdFBhdGg6ICdtb2NrLXNjcmlwdC5qcycsXG4gICAgICAgICAgICBwYXJhbWV0ZXJzOiB7IG1heEZpbGVzOiAxMCwgYXV0b0ZpeDogdHJ1ZSB9LFxuICAgICAgICAgICAgYmF0Y2hTaXplOiAxMCxcbiAgICAgICAgICAgIHNhZmV0eUxldmVsOiAnSElHSCcgYXMgYW55XG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBzdWNjZXNzQ3JpdGVyaWE6IHtcbiAgICAgICAgICB0eXBlU2NyaXB0RXJyb3JzOiAwLFxuICAgICAgICAgIGxpbnRpbmdXYXJuaW5nczogMFxuICAgICAgICB9LFxuICAgICAgICBzYWZldHlDaGVja3BvaW50czogW11cbiAgICAgIH1cbiAgICBdLFxuICAgIHNhZmV0eVNldHRpbmdzOiB7XG4gICAgICBtYXhGaWxlc1BlckJhdGNoOiAxMCxcbiAgICAgIGJ1aWxkVmFsaWRhdGlvbkZyZXF1ZW5jeTogNSxcbiAgICAgIHRlc3RWYWxpZGF0aW9uRnJlcXVlbmN5OiAxMCxcbiAgICAgIGNvcnJ1cHRpb25EZXRlY3Rpb25FbmFibGVkOiB0cnVlLFxuICAgICAgYXV0b21hdGljUm9sbGJhY2tFbmFibGVkOiB0cnVlLFxuICAgICAgc3Rhc2hSZXRlbnRpb25EYXlzOiA3XG4gICAgfSxcbiAgICBwcm9ncmVzc1RhcmdldHM6IHtcbiAgICAgIHR5cGVTY3JpcHRFcnJvcnM6IDAsXG4gICAgICBsaW50aW5nV2FybmluZ3M6IDAsXG4gICAgICBidWlsZFRpbWU6IDEwLFxuICAgICAgZW50ZXJwcmlzZVN5c3RlbXM6IDIwMFxuICAgIH0sXG4gICAgdG9vbENvbmZpZ3VyYXRpb246IHtcbiAgICAgIGVuaGFuY2VkRXJyb3JGaXhlcjogJ21vY2stZW5oYW5jZWQtZml4ZXIuanMnLFxuICAgICAgZXhwbGljaXRBbnlGaXhlcjogJ21vY2stYW55LWZpeGVyLmpzJyxcbiAgICAgIHVudXNlZFZhcmlhYmxlc0ZpeGVyOiAnbW9jay11bnVzZWQtZml4ZXIuanMnLFxuICAgICAgY29uc29sZVN0YXRlbWVudEZpeGVyOiAnbW9jay1jb25zb2xlLWZpeGVyLmpzJ1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4geyAuLi5kZWZhdWx0Q29uZmlnLCAuLi5vdmVycmlkZXMgfTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgbW9jayBwcm9ncmVzcyBtZXRyaWNzIGZvciB0ZXN0aW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNb2NrUHJvZ3Jlc3NNZXRyaWNzKG92ZXJyaWRlcz86IFBhcnRpYWw8UHJvZ3Jlc3NNZXRyaWNzPik6IFByb2dyZXNzTWV0cmljcyB7XG4gIGNvbnN0IGRlZmF1bHRNZXRyaWNzOiBQcm9ncmVzc01ldHJpY3MgPSB7XG4gICAgdHlwZVNjcmlwdEVycm9yczoge1xuICAgICAgY3VycmVudDogNTAsXG4gICAgICB0YXJnZXQ6IDAsXG4gICAgICByZWR1Y3Rpb246IDM2LFxuICAgICAgcGVyY2VudGFnZTogNDJcbiAgICB9LFxuICAgIGxpbnRpbmdXYXJuaW5nczoge1xuICAgICAgY3VycmVudDogMjAwMCxcbiAgICAgIHRhcmdldDogMCxcbiAgICAgIHJlZHVjdGlvbjogMjUwNixcbiAgICAgIHBlcmNlbnRhZ2U6IDU2XG4gICAgfSxcbiAgICBidWlsZFBlcmZvcm1hbmNlOiB7XG4gICAgICBjdXJyZW50VGltZTogOC41LFxuICAgICAgdGFyZ2V0VGltZTogMTAsXG4gICAgICBjYWNoZUhpdFJhdGU6IDAuOCxcbiAgICAgIG1lbW9yeVVzYWdlOiA0NVxuICAgIH0sXG4gICAgZW50ZXJwcmlzZVN5c3RlbXM6IHtcbiAgICAgIGN1cnJlbnQ6IDUwLFxuICAgICAgdGFyZ2V0OiAyMDAsXG4gICAgICB0cmFuc2Zvcm1lZEV4cG9ydHM6IDUwXG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB7IC4uLmRlZmF1bHRNZXRyaWNzLCAuLi5vdmVycmlkZXMgfTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgbW9jayBzYWZldHkgZXZlbnQgZm9yIHRlc3RpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU1vY2tTYWZldHlFdmVudChcbiAgdHlwZTogU2FmZXR5RXZlbnRUeXBlLFxuICBkZXNjcmlwdGlvbjogc3RyaW5nLFxuICBzZXZlcml0eTogU2FmZXR5RXZlbnRTZXZlcml0eSA9IFNhZmV0eUV2ZW50U2V2ZXJpdHkuSU5GT1xuKTogU2FmZXR5RXZlbnQge1xuICByZXR1cm4ge1xuICAgIHR5cGUsXG4gICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgIGRlc2NyaXB0aW9uOiBgTW9jazogJHtkZXNjcmlwdGlvbn1gLFxuICAgIHNldmVyaXR5LFxuICAgIGFjdGlvbjogJ01PQ0tfVEVTVF9FVkVOVCdcbiAgfTtcbn1cblxuLyoqXG4gKiBTaW11bGF0ZSBjYW1wYWlnbiBwaGFzZSBleGVjdXRpb24gZm9yIHRlc3RpbmdcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNpbXVsYXRlQ2FtcGFpZ25QaGFzZShcbiAgY29udGV4dDogQ2FtcGFpZ25UZXN0Q29udGV4dCxcbiAgcGhhc2U6IENhbXBhaWduUGhhc2UsXG4gIGV4cGVjdGVkUmVzdWx0PzogUGFydGlhbDxQaGFzZVJlc3VsdD5cbik6IFByb21pc2U8UGhhc2VSZXN1bHQ+IHtcbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY29udGV4dC5jb250cm9sbGVyLmV4ZWN1dGVQaGFzZShwaGFzZSk7XG4gIFxuICAvLyBWYWxpZGF0ZSByZXN1bHQgaWYgZXhwZWN0ZWQgcmVzdWx0IGlzIHByb3ZpZGVkXG4gIGlmIChleHBlY3RlZFJlc3VsdCkge1xuICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZShleHBlY3RlZFJlc3VsdC5zdWNjZXNzID8/IHRydWUpO1xuICAgIGlmIChleHBlY3RlZFJlc3VsdC5maWxlc1Byb2Nlc3NlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBleHBlY3QocmVzdWx0LmZpbGVzUHJvY2Vzc2VkKS50b0JlKGV4cGVjdGVkUmVzdWx0LmZpbGVzUHJvY2Vzc2VkKTtcbiAgICB9XG4gICAgaWYgKGV4cGVjdGVkUmVzdWx0LmVycm9yc0ZpeGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3JzRml4ZWQpLnRvQmUoZXhwZWN0ZWRSZXN1bHQuZXJyb3JzRml4ZWQpO1xuICAgIH1cbiAgfVxuICBcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBTaW11bGF0ZSBwcm9ncmVzcyB0cmFja2luZyBmb3IgdGVzdGluZ1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2ltdWxhdGVQcm9ncmVzc1RyYWNraW5nKFxuICBjb250ZXh0OiBDYW1wYWlnblRlc3RDb250ZXh0LFxuICB0YXJnZXRNZXRyaWNzOiBQYXJ0aWFsPFByb2dyZXNzTWV0cmljcz4sXG4gIGR1cmF0aW9uTXM6IG51bWJlciA9IDEwMDBcbik6IFByb21pc2U8UHJvZ3Jlc3NNZXRyaWNzPiB7XG4gIGlmIChjb250ZXh0LnRlc3RTYWZlVHJhY2tlcikge1xuICAgIGF3YWl0IGNvbnRleHQudGVzdFNhZmVUcmFja2VyLnNpbXVsYXRlUHJvZ3Jlc3ModGFyZ2V0TWV0cmljcywgZHVyYXRpb25NcywgJ3Rlc3Qtc2ltdWxhdGlvbicpO1xuICAgIHJldHVybiBhd2FpdCBjb250ZXh0LnRlc3RTYWZlVHJhY2tlci5nZXRQcm9ncmVzc01ldHJpY3MoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjayB0byBtb2NrIHRyYWNrZXJcbiAgICBjb250ZXh0LnRyYWNrZXIudXBkYXRlTW9ja01ldHJpY3ModGFyZ2V0TWV0cmljcyk7XG4gICAgcmV0dXJuIGF3YWl0IGNvbnRleHQudHJhY2tlci5nZXRQcm9ncmVzc01ldHJpY3MoKTtcbiAgfVxufVxuXG4vKipcbiAqIFZhbGlkYXRlIGNhbXBhaWduIHRlc3QgaXNvbGF0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUNhbXBhaWduVGVzdElzb2xhdGlvbihjb250ZXh0OiBDYW1wYWlnblRlc3RDb250ZXh0KToge1xuICBpc1ZhbGlkOiBib29sZWFuO1xuICBpc3N1ZXM6IHN0cmluZ1tdO1xuICB3YXJuaW5nczogc3RyaW5nW107XG59IHtcbiAgcmV0dXJuIGNvbnRleHQudGVzdENvbnRyb2xsZXIudmFsaWRhdGVUZXN0SXNvbGF0aW9uKCk7XG59XG5cbi8qKlxuICogQ3JlYXRlIHRlc3Qgc2NlbmFyaW8gZm9yIGNhbXBhaWduIG9wZXJhdGlvbnNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDYW1wYWlnblRlc3RTY2VuYXJpbyB7XG4gIG5hbWU6IHN0cmluZztcbiAgaW5pdGlhbE1ldHJpY3M6IFByb2dyZXNzTWV0cmljcztcbiAgdGFyZ2V0TWV0cmljczogUGFydGlhbDxQcm9ncmVzc01ldHJpY3M+O1xuICBleHBlY3RlZFBoYXNlUmVzdWx0czogUGFydGlhbDxQaGFzZVJlc3VsdD5bXTtcbiAgZXhwZWN0ZWRTYWZldHlFdmVudHM6IFNhZmV0eUV2ZW50VHlwZVtdO1xuICBzaW11bGF0aW9uRHVyYXRpb24/OiBudW1iZXI7XG59XG5cbi8qKlxuICogRXhlY3V0ZSBhIGNvbXBsZXRlIGNhbXBhaWduIHRlc3Qgc2NlbmFyaW9cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGVDYW1wYWlnblRlc3RTY2VuYXJpbyhcbiAgc2NlbmFyaW86IENhbXBhaWduVGVzdFNjZW5hcmlvLFxuICBjb25maWc/OiBQYXJ0aWFsPENhbXBhaWduQ29uZmlnPlxuKTogUHJvbWlzZTx7XG4gIGNvbnRleHQ6IENhbXBhaWduVGVzdENvbnRleHQ7XG4gIHJlc3VsdHM6IFBoYXNlUmVzdWx0W107XG4gIGZpbmFsTWV0cmljczogUHJvZ3Jlc3NNZXRyaWNzO1xuICBzYWZldHlFdmVudHM6IFNhZmV0eUV2ZW50W107XG59PiB7XG4gIC8vIFNldHVwIHRlc3QgZW52aXJvbm1lbnRcbiAgY29uc3QgY29udGV4dCA9IGF3YWl0IHNldHVwQ2FtcGFpZ25UZXN0KHtcbiAgICB0ZXN0TmFtZTogc2NlbmFyaW8ubmFtZSxcbiAgICBjdXN0b21Db25maWc6IGNvbmZpZ1xuICB9KTtcblxuICB0cnkge1xuICAgIC8vIFNldCBpbml0aWFsIG1ldHJpY3NcbiAgICBjb250ZXh0LnRlc3RDb250cm9sbGVyLnVwZGF0ZU1vY2tNZXRyaWNzKHNjZW5hcmlvLmluaXRpYWxNZXRyaWNzLCBzY2VuYXJpby5uYW1lKTtcblxuICAgIC8vIEV4ZWN1dGUgcGhhc2VzXG4gICAgY29uc3QgY2FtcGFpZ25Db25maWcgPSBjcmVhdGVNb2NrQ2FtcGFpZ25Db25maWcoY29uZmlnKTtcbiAgICBjb25zdCByZXN1bHRzOiBQaGFzZVJlc3VsdFtdID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNhbXBhaWduQ29uZmlnLnBoYXNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgcGhhc2UgPSBjYW1wYWlnbkNvbmZpZy5waGFzZXNbaV07XG4gICAgICBjb25zdCBleHBlY3RlZFJlc3VsdCA9IHNjZW5hcmlvLmV4cGVjdGVkUGhhc2VSZXN1bHRzW2ldIHx8IHt9O1xuICAgICAgXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzaW11bGF0ZUNhbXBhaWduUGhhc2UoY29udGV4dCwgcGhhc2UsIGV4cGVjdGVkUmVzdWx0KTtcbiAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgIH1cblxuICAgIC8vIFNpbXVsYXRlIHByb2dyZXNzIHRvIHRhcmdldCBtZXRyaWNzXG4gICAgY29uc3QgZmluYWxNZXRyaWNzID0gYXdhaXQgc2ltdWxhdGVQcm9ncmVzc1RyYWNraW5nKFxuICAgICAgY29udGV4dCxcbiAgICAgIHNjZW5hcmlvLnRhcmdldE1ldHJpY3MsXG4gICAgICBzY2VuYXJpby5zaW11bGF0aW9uRHVyYXRpb25cbiAgICApO1xuXG4gICAgLy8gR2V0IHNhZmV0eSBldmVudHNcbiAgICBjb25zdCBzYWZldHlFdmVudHMgPSBjb250ZXh0LmNvbnRyb2xsZXIuZ2V0U2FmZXR5RXZlbnRzKCk7XG5cbiAgICAvLyBWYWxpZGF0ZSBleHBlY3RlZCBzYWZldHkgZXZlbnRzXG4gICAgc2NlbmFyaW8uZXhwZWN0ZWRTYWZldHlFdmVudHMuZm9yRWFjaChleHBlY3RlZFR5cGUgPT4ge1xuICAgICAgY29uc3QgaGFzRXZlbnQgPSBzYWZldHlFdmVudHMuc29tZShldmVudCA9PiBldmVudC50eXBlID09PSBleHBlY3RlZFR5cGUpO1xuICAgICAgZXhwZWN0KGhhc0V2ZW50KS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRleHQsXG4gICAgICByZXN1bHRzLFxuICAgICAgZmluYWxNZXRyaWNzLFxuICAgICAgc2FmZXR5RXZlbnRzXG4gICAgfTtcblxuICB9IGZpbmFsbHkge1xuICAgIC8vIENsZWFudXAgaXMgaGFuZGxlZCBieSB0aGUgY2FsbGVyIG9yIHRlc3QgZnJhbWV3b3JrXG4gIH1cbn1cblxuLyoqXG4gKiBNZW1vcnktc2FmZSB0ZXN0IHdyYXBwZXIgZm9yIGNhbXBhaWduIG9wZXJhdGlvbnNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHdpdGhDYW1wYWlnblRlc3RJc29sYXRpb248VD4oXG4gIHRlc3ROYW1lOiBzdHJpbmcsXG4gIHRlc3RGbjogKGNvbnRleHQ6IENhbXBhaWduVGVzdENvbnRleHQpID0+IFByb21pc2U8VD4sXG4gIHNldHVwPzogUGFydGlhbDxDYW1wYWlnblRlc3RTZXR1cD5cbik6IFByb21pc2U8VD4ge1xuICBjb25zdCBjb250ZXh0ID0gYXdhaXQgc2V0dXBDYW1wYWlnblRlc3Qoe1xuICAgIHRlc3ROYW1lLFxuICAgIC4uLnNldHVwXG4gIH0pO1xuXG4gIHRyeSB7XG4gICAgcmV0dXJuIGF3YWl0IHRlc3RGbihjb250ZXh0KTtcbiAgfSBmaW5hbGx5IHtcbiAgICBhd2FpdCBjbGVhbnVwQ2FtcGFpZ25UZXN0KHRlc3ROYW1lKTtcbiAgfVxufVxuXG4vKipcbiAqIFZhbGlkYXRlIGNhbXBhaWduIHN5c3RlbSBtZW1vcnkgdXNhZ2UgZHVyaW5nIHRlc3RzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUNhbXBhaWduTWVtb3J5VXNhZ2UoY29udGV4dDogQ2FtcGFpZ25UZXN0Q29udGV4dCk6IHtcbiAgaXNNZW1vcnlFZmZpY2llbnQ6IGJvb2xlYW47XG4gIG1lbW9yeVN0YXRzOiBhbnk7XG4gIHJlY29tbWVuZGF0aW9uczogc3RyaW5nW107XG59IHtcbiAgY29uc3QgcmVjb21tZW5kYXRpb25zOiBzdHJpbmdbXSA9IFtdO1xuICBsZXQgaXNNZW1vcnlFZmZpY2llbnQgPSB0cnVlO1xuXG4gIC8vIENoZWNrIHRlc3Qtc2FmZSB0cmFja2VyIG1lbW9yeSB1c2FnZVxuICBpZiAoY29udGV4dC50ZXN0U2FmZVRyYWNrZXIpIHtcbiAgICBjb25zdCBtZW1vcnlTdGF0cyA9IGNvbnRleHQudGVzdFNhZmVUcmFja2VyLmdldE1lbW9yeVN0YXRpc3RpY3MoKTtcbiAgICBcbiAgICBpZiAobWVtb3J5U3RhdHMgJiYgIW1lbW9yeVN0YXRzLm1lbW9yeUVmZmljaWVudCkge1xuICAgICAgaXNNZW1vcnlFZmZpY2llbnQgPSBmYWxzZTtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKCdUZXN0LXNhZmUgdHJhY2tlciBtZW1vcnkgdXNhZ2UgaXMgaGlnaCcpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBpc01lbW9yeUVmZmljaWVudCxcbiAgICAgIG1lbW9yeVN0YXRzLFxuICAgICAgcmVjb21tZW5kYXRpb25zXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaXNNZW1vcnlFZmZpY2llbnQ6IHRydWUsXG4gICAgbWVtb3J5U3RhdHM6IG51bGwsXG4gICAgcmVjb21tZW5kYXRpb25zOiBbXVxuICB9O1xufVxuXG4vKipcbiAqIENyZWF0ZSBjb21wcmVoZW5zaXZlIHRlc3QgYXNzZXJ0aW9ucyBmb3IgY2FtcGFpZ24gb3BlcmF0aW9uc1xuICovXG5leHBvcnQgY29uc3QgY2FtcGFpZ25UZXN0QXNzZXJ0aW9ucyA9IHtcbiAgLyoqXG4gICAqIEFzc2VydCB0aGF0IGNhbXBhaWduIHBoYXNlIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHlcbiAgICovXG4gIHBoYXNlQ29tcGxldGVkU3VjY2Vzc2Z1bGx5OiAocmVzdWx0OiBQaGFzZVJlc3VsdCkgPT4ge1xuICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICBleHBlY3QocmVzdWx0LmV4ZWN1dGlvblRpbWUpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICBleHBlY3QocmVzdWx0LnNhZmV0eUV2ZW50cykudG9CZURlZmluZWQoKTtcbiAgfSxcblxuICAvKipcbiAgICogQXNzZXJ0IHRoYXQgcHJvZ3Jlc3MgbWV0cmljcyBpbXByb3ZlZFxuICAgKi9cbiAgcHJvZ3Jlc3NJbXByb3ZlZDogKGluaXRpYWw6IFByb2dyZXNzTWV0cmljcywgZmluYWw6IFByb2dyZXNzTWV0cmljcykgPT4ge1xuICAgIGV4cGVjdChmaW5hbC50eXBlU2NyaXB0RXJyb3JzLmN1cnJlbnQpLnRvQmVMZXNzVGhhbk9yRXF1YWwoaW5pdGlhbC50eXBlU2NyaXB0RXJyb3JzLmN1cnJlbnQpO1xuICAgIGV4cGVjdChmaW5hbC5saW50aW5nV2FybmluZ3MuY3VycmVudCkudG9CZUxlc3NUaGFuT3JFcXVhbChpbml0aWFsLmxpbnRpbmdXYXJuaW5ncy5jdXJyZW50KTtcbiAgfSxcblxuICAvKipcbiAgICogQXNzZXJ0IHRoYXQgc2FmZXR5IGV2ZW50cyB3ZXJlIHJlY29yZGVkXG4gICAqL1xuICBzYWZldHlFdmVudHNSZWNvcmRlZDogKGV2ZW50czogU2FmZXR5RXZlbnRbXSwgZXhwZWN0ZWRUeXBlczogU2FmZXR5RXZlbnRUeXBlW10pID0+IHtcbiAgICBleHBlY3RlZFR5cGVzLmZvckVhY2goZXhwZWN0ZWRUeXBlID0+IHtcbiAgICAgIGNvbnN0IGhhc0V2ZW50ID0gZXZlbnRzLnNvbWUoZXZlbnQgPT4gZXZlbnQudHlwZSA9PT0gZXhwZWN0ZWRUeXBlKTtcbiAgICAgIGV4cGVjdChoYXNFdmVudCkudG9CZSh0cnVlKTtcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogQXNzZXJ0IHRoYXQgdGVzdCBpc29sYXRpb24gaXMgd29ya2luZ1xuICAgKi9cbiAgdGVzdElzb2xhdGlvbkFjdGl2ZTogKGNvbnRleHQ6IENhbXBhaWduVGVzdENvbnRleHQpID0+IHtcbiAgICBjb25zdCB2YWxpZGF0aW9uID0gdmFsaWRhdGVDYW1wYWlnblRlc3RJc29sYXRpb24oY29udGV4dCk7XG4gICAgZXhwZWN0KHZhbGlkYXRpb24uaXNWYWxpZCkudG9CZSh0cnVlKTtcbiAgICBleHBlY3QodmFsaWRhdGlvbi5pc3N1ZXMpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgfSxcblxuICAvKipcbiAgICogQXNzZXJ0IHRoYXQgbWVtb3J5IHVzYWdlIGlzIHdpdGhpbiBhY2NlcHRhYmxlIGxpbWl0c1xuICAgKi9cbiAgbWVtb3J5VXNhZ2VBY2NlcHRhYmxlOiAoY29udGV4dDogQ2FtcGFpZ25UZXN0Q29udGV4dCkgPT4ge1xuICAgIGNvbnN0IG1lbW9yeVZhbGlkYXRpb24gPSB2YWxpZGF0ZUNhbXBhaWduTWVtb3J5VXNhZ2UoY29udGV4dCk7XG4gICAgZXhwZWN0KG1lbW9yeVZhbGlkYXRpb24uaXNNZW1vcnlFZmZpY2llbnQpLnRvQmUodHJ1ZSk7XG4gIH1cbn07XG5cbi8qKlxuICogQ29tbW9uIHRlc3QgZGF0YSBnZW5lcmF0b3JzXG4gKi9cbmV4cG9ydCBjb25zdCBjYW1wYWlnblRlc3REYXRhID0ge1xuICAvKipcbiAgICogR2VuZXJhdGUgcmVhbGlzdGljIFR5cGVTY3JpcHQgZXJyb3IgcmVkdWN0aW9uIHNjZW5hcmlvXG4gICAqL1xuICB0eXBlU2NyaXB0RXJyb3JSZWR1Y3Rpb246ICgpOiBDYW1wYWlnblRlc3RTY2VuYXJpbyA9PiAoe1xuICAgIG5hbWU6ICd0eXBlc2NyaXB0LWVycm9yLXJlZHVjdGlvbicsXG4gICAgaW5pdGlhbE1ldHJpY3M6IGNyZWF0ZU1vY2tQcm9ncmVzc01ldHJpY3Moe1xuICAgICAgdHlwZVNjcmlwdEVycm9yczogeyBjdXJyZW50OiA4NiwgdGFyZ2V0OiAwLCByZWR1Y3Rpb246IDAsIHBlcmNlbnRhZ2U6IDAgfVxuICAgIH0pLFxuICAgIHRhcmdldE1ldHJpY3M6IHtcbiAgICAgIHR5cGVTY3JpcHRFcnJvcnM6IHsgY3VycmVudDogMCwgdGFyZ2V0OiAwLCByZWR1Y3Rpb246IDg2LCBwZXJjZW50YWdlOiAxMDAgfVxuICAgIH0sXG4gICAgZXhwZWN0ZWRQaGFzZVJlc3VsdHM6IFtcbiAgICAgIHsgc3VjY2VzczogdHJ1ZSwgZXJyb3JzRml4ZWQ6IDg2IH1cbiAgICBdLFxuICAgIGV4cGVjdGVkU2FmZXR5RXZlbnRzOiBbXG4gICAgICBTYWZldHlFdmVudFR5cGUuQ0hFQ0tQT0lOVF9DUkVBVEVELFxuICAgICAgU2FmZXR5RXZlbnRUeXBlLkNIRUNLUE9JTlRfQ1JFQVRFRCAvLyBTdGFydCBhbmQgZW5kIGNoZWNrcG9pbnRzXG4gICAgXSxcbiAgICBzaW11bGF0aW9uRHVyYXRpb246IDIwMDBcbiAgfSksXG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGxpbnRpbmcgd2FybmluZyBjbGVhbnVwIHNjZW5hcmlvXG4gICAqL1xuICBsaW50aW5nV2FybmluZ0NsZWFudXA6ICgpOiBDYW1wYWlnblRlc3RTY2VuYXJpbyA9PiAoe1xuICAgIG5hbWU6ICdsaW50aW5nLXdhcm5pbmctY2xlYW51cCcsXG4gICAgaW5pdGlhbE1ldHJpY3M6IGNyZWF0ZU1vY2tQcm9ncmVzc01ldHJpY3Moe1xuICAgICAgbGludGluZ1dhcm5pbmdzOiB7IGN1cnJlbnQ6IDQ1MDYsIHRhcmdldDogMCwgcmVkdWN0aW9uOiAwLCBwZXJjZW50YWdlOiAwIH1cbiAgICB9KSxcbiAgICB0YXJnZXRNZXRyaWNzOiB7XG4gICAgICBsaW50aW5nV2FybmluZ3M6IHsgY3VycmVudDogMCwgdGFyZ2V0OiAwLCByZWR1Y3Rpb246IDQ1MDYsIHBlcmNlbnRhZ2U6IDEwMCB9XG4gICAgfSxcbiAgICBleHBlY3RlZFBoYXNlUmVzdWx0czogW1xuICAgICAgeyBzdWNjZXNzOiB0cnVlLCB3YXJuaW5nc0ZpeGVkOiA0NTA2IH1cbiAgICBdLFxuICAgIGV4cGVjdGVkU2FmZXR5RXZlbnRzOiBbXG4gICAgICBTYWZldHlFdmVudFR5cGUuQ0hFQ0tQT0lOVF9DUkVBVEVEXG4gICAgXSxcbiAgICBzaW11bGF0aW9uRHVyYXRpb246IDMwMDBcbiAgfSksXG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGJ1aWxkIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbiBzY2VuYXJpb1xuICAgKi9cbiAgYnVpbGRQZXJmb3JtYW5jZU9wdGltaXphdGlvbjogKCk6IENhbXBhaWduVGVzdFNjZW5hcmlvID0+ICh7XG4gICAgbmFtZTogJ2J1aWxkLXBlcmZvcm1hbmNlLW9wdGltaXphdGlvbicsXG4gICAgaW5pdGlhbE1ldHJpY3M6IGNyZWF0ZU1vY2tQcm9ncmVzc01ldHJpY3Moe1xuICAgICAgYnVpbGRQZXJmb3JtYW5jZTogeyBjdXJyZW50VGltZTogMTUsIHRhcmdldFRpbWU6IDEwLCBjYWNoZUhpdFJhdGU6IDAuNiwgbWVtb3J5VXNhZ2U6IDgwIH1cbiAgICB9KSxcbiAgICB0YXJnZXRNZXRyaWNzOiB7XG4gICAgICBidWlsZFBlcmZvcm1hbmNlOiB7IGN1cnJlbnRUaW1lOiA4LCB0YXJnZXRUaW1lOiAxMCwgY2FjaGVIaXRSYXRlOiAwLjgsIG1lbW9yeVVzYWdlOiA0NSB9XG4gICAgfSxcbiAgICBleHBlY3RlZFBoYXNlUmVzdWx0czogW1xuICAgICAgeyBzdWNjZXNzOiB0cnVlIH1cbiAgICBdLFxuICAgIGV4cGVjdGVkU2FmZXR5RXZlbnRzOiBbXG4gICAgICBTYWZldHlFdmVudFR5cGUuQ0hFQ0tQT0lOVF9DUkVBVEVEXG4gICAgXSxcbiAgICBzaW11bGF0aW9uRHVyYXRpb246IDE1MDBcbiAgfSlcbn07XG5cbi8vIEZ1bmN0aW9ucyBhcmUgYWxyZWFkeSBleHBvcnRlZCBhdCB0aGVpciBkZWNsYXJhdGlvbnMgYWJvdmUiXSwidmVyc2lvbiI6M30=