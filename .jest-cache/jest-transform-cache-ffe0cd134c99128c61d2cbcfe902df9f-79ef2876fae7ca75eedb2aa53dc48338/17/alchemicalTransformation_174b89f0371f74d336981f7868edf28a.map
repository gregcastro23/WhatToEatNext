{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/calculations/alchemicalTransformation.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/calculations/alchemicalTransformation.ts"],"sourcesContent":["import { \n  ElementalCharacter, \n  ZodiacSign,\n  LunarPhaseWithSpaces\n} from '@/types/alchemy';\nimport { AlchemicalProperty } from '@/types/celestial';\nimport { AlchemicalResults, calculateAlchemicalProperties } from './alchemicalCalculations';\nimport {\n  calculatePlanetaryBoost,\n  PlanetaryDignityDetails\n} from '../constants/planetaryFoodAssociations';\nimport { createLogger } from '@/utils/logger';\nimport { CelestialPosition } from '@/types/celestial';\n\n// Create a component-specific logger\nconst logger = createLogger('AlchemicalTransformation');\n\n/**\n * Interface for items with elemental data (ingredients, methods, cuisines)\n */\nexport interface ElementalItem {\n  id: string;\n  name: string;\n  elementalProperties: Record<ElementalCharacter, number>;\n  [key: string]: unknown; // Allow other properties\n}\n\n/**\n * Interface for transformed items with both elemental and alchemical data\n */\nexport interface AlchemicalItem extends ElementalItem {\n  alchemicalProperties: Record<AlchemicalProperty, number>;\n  transformedElementalProperties: Record<ElementalCharacter, number>;\n  heat: number;\n  entropy: number;\n  reactivity: number;\n  gregsEnergy: number;\n  dominantElement: ElementalCharacter;\n  dominantAlchemicalProperty: AlchemicalProperty;\n  // New planetary influence properties\n  planetaryBoost: number;\n  dominantPlanets: string[];\n  planetaryDignities: Record<string, PlanetaryDignityDetails>;\n}\n\n/**\n * Transform an item with elemental data using current planetary positions\n * \n * @param item The original item with elemental data\n * @param planetPositions Current planetary positions/strengths\n * @param isDaytime Whether it's day or night\n * @param currentZodiac Current zodiac sign (optional)\n * @param lunarPhase Current lunar phase (optional)\n * @returns Item transformed with alchemical properties\n */\nexport const transformItemWithPlanetaryPositions = (\n  item: ElementalItem,\n  planetPositions: Record<string, CelestialPosition>,\n  isDaytime: boolean,\n  currentZodiac?: string | null,\n  lunarPhase?: LunarPhaseWithSpaces | null\n): AlchemicalItem => {\n  try {\n    // Validate and sanitize input values\n    const sanitizedItem = {\n      ...item,\n      elementalProperties: Object.fromEntries(\n        Object.entries(item.elementalProperties).map(([key, value]) => [\n          key,\n          Number.isFinite(value) ? value : 0.1\n        ])\n      ) as Record<ElementalCharacter, number>\n    };\n\n    // Calculate alchemical properties based on planetary positions\n    const alchemicalResults = calculateAlchemicalProperties(\n      planetPositions as any,\n      isDaytime\n    );\n    \n    // Calculate planetary boost based on ingredient's characteristics\n    const { boost: planetaryBoost, dominantPlanets, dignities: planetaryDignities } = \n      calculatePlanetaryBoost(\n        sanitizedItem, \n        planetPositions, \n        currentZodiac || null,\n        lunarPhase || null\n      );\n    \n    // Transform elemental properties based on planetary influences\n    // Apply the planetary boost to increase the effect\n    const transformedElementalProperties = transformElementalProperties(\n      sanitizedItem.elementalProperties,\n      alchemicalResults,\n      planetaryBoost,\n      currentZodiac?.toLowerCase() as ZodiacSign\n    );\n    \n    // Calculate dominant element and alchemical property\n    const dominantElement = getDominantElement(transformedElementalProperties);\n    const dominantAlchemicalProperty = getDominantAlchemicalProperty(alchemicalResults.alchemicalCounts);\n    \n    // Apply safety checks for energy metrics\n    const safeHeat = Number.isFinite(alchemicalResults.heat) ? \n      Math.max(0.1, Math.min(1.0, alchemicalResults.heat * planetaryBoost * 2.5)) : 0.5;\n    \n    const safeEntropy = Number.isFinite(alchemicalResults.entropy) ? \n      Math.max(0.1, Math.min(1.0, alchemicalResults.entropy * 1.5)) : 0.5;\n    \n    const safeReactivity = Number.isFinite(alchemicalResults.reactivity) ? \n      Math.max(0.1, Math.min(1.0, alchemicalResults.reactivity * 1.5)) : 0.5;\n    \n    // Calculate gregsEnergy using the original formula: heat - (reactivity * entropy)\n    // Then scale to the 0-1 range for UI friendliness\n    const rawGregsEnergy = safeHeat - (safeReactivity * safeEntropy);\n    \n    // Instead of a simple scaling, apply more varied calculations based on multiple factors\n    // This will create more distinct recommendations with a wider range\n    const baseScaledEnergy = (rawGregsEnergy + 1) / 2; // Convert from range (-1,1) to (0,1)\n    \n    // Apply element-specific influence for each dominant element\n    let elementalModifier = 0;\n    if (dominantElement === 'Fire') {\n      elementalModifier = 0.25 * (transformedElementalProperties.Fire - 0.25);\n    } else if (dominantElement === 'Water') {\n      elementalModifier = 0.20 * (transformedElementalProperties.Water - 0.25);\n    } else if (dominantElement === 'Earth') {\n      elementalModifier = 0.18 * (transformedElementalProperties.Earth - 0.25);\n    } else if (dominantElement === 'Air') {\n      elementalModifier = 0.15 * (transformedElementalProperties.Air - 0.25);\n    }\n    \n    // Apply alchemical property influence with increased impact\n    let alchemicalModifier = 0;\n    if (dominantAlchemicalProperty === 'Spirit') {\n      alchemicalModifier = 0.22 * (alchemicalResults.alchemicalCounts.Spirit - 0.25);\n    } else if (dominantAlchemicalProperty === 'Essence') {\n      alchemicalModifier = 0.20 * (alchemicalResults.alchemicalCounts.Essence - 0.25);\n    } else if (dominantAlchemicalProperty === 'Matter') {\n      alchemicalModifier = 0.18 * (alchemicalResults.alchemicalCounts.Matter - 0.25);\n    } else if (dominantAlchemicalProperty === 'Substance') {\n      alchemicalModifier = 0.15 * (alchemicalResults.alchemicalCounts.Substance - 0.25);\n    }\n    \n    // Apply zodiac influence if available with stronger effect\n    let zodiacModifier = 0;\n    if (currentZodiac?.toLowerCase() as ZodiacSign) {\n      const zodiacSign = currentZodiac.toLowerCase() as ZodiacSign;\n      const zodiacElementMap: Record<ZodiacSign, ElementalCharacter> = {\n        aries: 'Fire', leo: 'Fire', sagittarius: 'Fire',\n        taurus: 'Earth', virgo: 'Earth', capricorn: 'Earth',\n        gemini: 'Air', libra: 'Air', aquarius: 'Air',\n        cancer: 'Water', scorpio: 'Water', pisces: 'Water'\n      };\n      \n      const zodiacElement = zodiacElementMap[zodiacSign];\n      if (zodiacElement && zodiacElement === dominantElement) {\n        zodiacModifier = 0.25; // Increased bonus for matching zodiac element\n      } else if (zodiacElement) {\n        // Calculate compatibility based on elemental relationships with wider variance\n        if ((zodiacElement === 'Fire' && dominantElement === 'Air') || \n            (zodiacElement === 'Air' && dominantElement === 'Fire')) {\n          zodiacModifier = 0.18; // Fire and Air are complementary\n        } else if ((zodiacElement === 'Earth' && dominantElement === 'Water') || \n                  (zodiacElement === 'Water' && dominantElement === 'Earth')) {\n          zodiacModifier = 0.18; // Earth and Water are complementary\n        } else if ((zodiacElement === 'Fire' && dominantElement === 'Earth') || \n                  (zodiacElement === 'Earth' && dominantElement === 'Fire')) {\n          zodiacModifier = 0.12; // Fire and Earth have moderate compatibility\n        } else if ((zodiacElement === 'Water' && dominantElement === 'Air') || \n                  (zodiacElement === 'Air' && dominantElement === 'Water')) {\n          zodiacModifier = 0.12; // Water and Air have moderate compatibility\n        } else {\n          zodiacModifier = 0.05; // Other combinations have lower compatibility\n        }\n      }\n    }\n    \n    // Calculate boost from planetary influence with more differentiation\n    const planetaryModifier = Math.min(0.25, (planetaryBoost - 1.0) * 0.8);\n    \n    // Add randomized factor to create more variance (±7%)\n    const randomVariance = (Math.random() * 0.14) - 0.07;\n    \n    // Combine all influences for a more varied energy calculation\n    const adjustedEnergy = baseScaledEnergy + elementalModifier + alchemicalModifier + zodiacModifier + planetaryModifier + randomVariance;\n    \n    // Ensure the final value is within valid range but allowing more variance (wider range)\n    const safeGregsEnergy = Math.max(0.20, Math.min(0.98, adjustedEnergy));\n    \n    // Add more debug logging\n    logger.debug(`[Ingredient: ${sanitizedItem.name}] Raw heat: ${alchemicalResults.heat}, Boosted heat: ${safeHeat}, Planetary boost: ${planetaryBoost}`);\n    \n    return {\n      ...sanitizedItem,\n      alchemicalProperties: alchemicalResults.alchemicalCounts,\n      transformedElementalProperties,\n      heat: safeHeat,\n      entropy: safeEntropy,\n      reactivity: safeReactivity,\n      gregsEnergy: safeGregsEnergy,\n      dominantElement,\n      dominantAlchemicalProperty,\n      planetaryBoost,\n      dominantPlanets,\n      planetaryDignities\n    };\n  } catch (error) {\n    logger.error(`Error transforming item ${item.name}:`, error);\n    // Return a safe fallback with original values preserved\n    return {\n      ...item,\n      alchemicalProperties: {\n        Spirit: 0.25,\n        Essence: 0.25,\n        Matter: 0.25,\n        Substance: 0.25\n      },\n      transformedElementalProperties: {...item.elementalProperties},\n      heat: 0.5,\n      entropy: 0.5,\n      reactivity: 0.5,\n      gregsEnergy: 0.5,\n      dominantElement: getDominantElement(item.elementalProperties),\n      dominantAlchemicalProperty: 'Essence',\n      planetaryBoost: 1.0,\n      dominantPlanets: [],\n      planetaryDignities: {}\n    };\n  }\n};\n\n/**\n * Transform a collection of items using current planetary positions\n */\nexport const transformItemsWithPlanetaryPositions = (\n  items: ElementalItem[],\n  planetPositions: Record<string, CelestialPosition>,\n  isDaytime: boolean,\n  currentZodiac?: string | null,\n  lunarPhase?: LunarPhaseWithSpaces | null\n): AlchemicalItem[] => {\n  try {\n    return items.map(item => \n      transformItemWithPlanetaryPositions(\n        item, \n        planetPositions, \n        isDaytime,\n        currentZodiac,\n        lunarPhase\n      )\n    );\n  } catch (error) {\n    logger.error('Error transforming multiple items:', error);\n    // Return the original items with minimal transformation if batch processing fails\n    return items.map(item => ({\n      ...item,\n      alchemicalProperties: {\n        Spirit: 0.25,\n        Essence: 0.25,\n        Matter: 0.25,\n        Substance: 0.25\n      },\n      transformedElementalProperties: {...item.elementalProperties},\n      heat: 0.5,\n      entropy: 0.5,\n      reactivity: 0.5,\n      gregsEnergy: 0.5,\n      dominantElement: getDominantElement(item.elementalProperties),\n      dominantAlchemicalProperty: 'Essence' as AlchemicalProperty,\n      planetaryBoost: 1.0,\n      dominantPlanets: [],\n      planetaryDignities: {}\n    }));\n  }\n};\n\n/**\n * Transform elemental properties using alchemical results and planetary boost\n * This applies the alchemical influence to the base elemental properties\n */\nconst transformElementalProperties = (\n  originalProperties: Record<ElementalCharacter, number>,\n  alchemicalResults: AlchemicalResults,\n  planetaryBoost: number = 1.0,\n  zodiacSign?: ZodiacSign\n): Record<ElementalCharacter, number> => {\n  try {\n    // Create a copy of the original properties\n    const transformedProperties: Record<ElementalCharacter, number> = { ...originalProperties };\n    \n    // Calculate base enhancement factor - stronger effect on dominant elements\n    // Enhanced by planetary boost, but cap the enhancement factor to prevent excessive values\n    const enhancementFactor = Math.min(0.10, 0.15 * planetaryBoost) * 0.5;\n    \n    // Get the dominant original element to preserve character\n    const dominantElement = getDominantElement(originalProperties);\n    \n    // Apply transformations based on alchemical properties, with reduced enhancers\n    // Spirit enhances Fire more if Fire is already present\n    transformedProperties.Fire += \n      (alchemicalResults.alchemicalCounts.Spirit * enhancementFactor * (originalProperties.Fire + 0.15)) * 0.8;\n    \n    // Essence enhances Water more if Water is already present\n    transformedProperties.Water += \n      (alchemicalResults.alchemicalCounts.Essence * enhancementFactor * (originalProperties.Water + 0.15)) * 0.7;\n    \n    // Matter enhances Earth more if Earth is already present\n    transformedProperties.Earth += \n      (alchemicalResults.alchemicalCounts.Matter * enhancementFactor * (originalProperties.Earth + 0.15)) * 0.7;\n    \n    // Substance enhances Air more if Air is already present\n    transformedProperties.Air += \n      (alchemicalResults.alchemicalCounts.Substance * enhancementFactor * (originalProperties.Air + 0.15)) * 0.7;\n    \n    // Apply cross-element influences with more dynamic calculations, with reduced strength\n    applyElementalInfluences(transformedProperties, alchemicalResults.elementalCounts, originalProperties, Math.min(1.0, planetaryBoost * 0.7));\n    \n    // Boost the dominant element slightly to preserve ingredient character, but cap the boost\n    transformedProperties[dominantElement] *= Math.min(1.05, 1.1 * planetaryBoost);\n    \n    // Apply zodiac-specific boost if available\n    if (zodiacSign) {\n      applyZodiacBoost(transformedProperties, zodiacSign);\n    }\n    \n    // Normalize the values so they sum to 1.0\n    normalizeValues(transformedProperties);\n    \n    return transformedProperties;\n  } catch (error) {\n    logger.error('Error transforming elemental properties:', error);\n    // Return the original properties if there's an error\n    return { ...originalProperties };\n  }\n};\n\n/**\n * Apply zodiac-specific boosts to elemental properties\n */\nconst applyZodiacBoost = (\n  transformedProperties: Record<ElementalCharacter, number>,\n  zodiacSign: ZodiacSign\n): void => {\n  try {\n    const zodiacElementMap: Record<ZodiacSign, ElementalCharacter> = {\n      aries: 'Fire',\n      taurus: 'Earth',\n      gemini: 'Air',\n      cancer: 'Water',\n      leo: 'Fire',\n      virgo: 'Earth',\n      libra: 'Air',\n      scorpio: 'Water',\n      sagittarius: 'Fire',\n      capricorn: 'Earth',\n      aquarius: 'Air',\n      pisces: 'Water'\n    };\n    \n    const zodiacElement = zodiacElementMap[zodiacSign];\n    if (zodiacElement) {\n      // Apply a small boost to the corresponding element\n      transformedProperties[zodiacElement] *= 1.05;\n    }\n  } catch (error) {\n    logger.error(`Error applying zodiac boost for ${zodiacSign}:`, error);\n    // No modifications to transformedProperties needed in case of error\n  }\n};\n\n/**\n * Apply cross-element influences based on elemental counts and boost\n */\nconst applyElementalInfluences = (\n  transformedProperties: Record<ElementalCharacter, number>,\n  elementalCounts: Record<ElementalCharacter, number>,\n  originalProperties: Record<ElementalCharacter, number>,\n  planetaryBoost: number = 1.0\n): void => {\n  try {\n    // Calculate influence factors based on elemental counts\n    const fireInfluence = elementalCounts.Fire * 0.08 * planetaryBoost;\n    const waterInfluence = elementalCounts.Water * 0.06 * planetaryBoost;\n    const earthInfluence = elementalCounts.Earth * 0.07 * planetaryBoost;\n    const airInfluence = elementalCounts.Air * 0.05 * planetaryBoost;\n    \n    // Fire influences - increases Earth, decreases Water\n    transformedProperties.Earth += fireInfluence * (originalProperties.Earth * 0.5);\n    transformedProperties.Water -= fireInfluence * (originalProperties.Water * 0.1);\n    \n    // Water influences - increases Air, decreases Fire\n    transformedProperties.Air += waterInfluence * (originalProperties.Air * 0.5);\n    transformedProperties.Fire -= waterInfluence * (originalProperties.Fire * 0.1);\n    \n    // Earth influences - increases Water, decreases Air \n    transformedProperties.Water += earthInfluence * (originalProperties.Water * 0.5);\n    transformedProperties.Air -= earthInfluence * (originalProperties.Air * 0.1);\n    \n    // Air influences - increases Fire, decreases Earth\n    transformedProperties.Fire += airInfluence * (originalProperties.Fire * 0.5);\n    transformedProperties.Earth -= airInfluence * (originalProperties.Earth * 0.1);\n    \n    // Ensure all values remain positive\n    Object.keys(transformedProperties).forEach(key => {\n      transformedProperties[key as ElementalCharacter] = Math.max(0.05, transformedProperties[key as ElementalCharacter]);\n    });\n  } catch (error) {\n    logger.error('Error applying elemental influences:', error);\n    // Leave transformedProperties unchanged in case of error\n  }\n};\n\n/**\n * Calculate the dominant element from a set of elemental properties\n */\nconst getDominantElement = (\n  transformedProperties: Record<ElementalCharacter, number>\n): ElementalCharacter => {\n  try {\n    let maxValue = -Infinity;\n    let dominantElement: ElementalCharacter = 'Fire'; // Default\n    \n    (Object.entries(transformedProperties) as [ElementalCharacter, number][]).forEach(([element, value]) => {\n      // Pattern KK-8: Advanced calculation safety for comparison operations\n      const numericValue = Number(value) || 0;\n      const numericMaxValue = Number(maxValue) || -Infinity;\n      if (numericValue > numericMaxValue) {\n        maxValue = numericValue;\n        dominantElement = element;\n      }\n    });\n    \n    return dominantElement;\n  } catch (error) {\n    logger.error('Error determining dominant element:', error);\n    return 'Fire'; // Default fallback\n  }\n};\n\n/**\n * Calculate the dominant alchemical property from alchemical counts\n */\nconst getDominantAlchemicalProperty = (\n  alchemicalCounts: Record<AlchemicalProperty, number>\n): AlchemicalProperty => {\n  try {\n    let maxValue = -Infinity;\n    let dominantProperty: AlchemicalProperty = 'Spirit'; // Default\n    \n    (Object.entries(alchemicalCounts) as [AlchemicalProperty, number][]).forEach(([property, value]) => {\n      // Pattern KK-8: Advanced calculation safety for comparison operations\n      const numericValue = Number(value) || 0;\n      const numericMaxValue = Number(maxValue) || -Infinity;\n      if (numericValue > numericMaxValue) {\n        maxValue = numericValue;\n        dominantProperty = property;\n      }\n    });\n    \n    return dominantProperty;\n  } catch (error) {\n    logger.error('Error determining dominant alchemical property:', error);\n    return 'Spirit'; // Default fallback\n  }\n};\n\n/**\n * Normalize values in a record to sum to 1.0\n */\nconst normalizeValues = <T extends string>(record: Record<T, number>): void => {\n  try {\n    // Pattern KK-8: Advanced calculation safety for reduction and division\n    const sum = Object.values(record).reduce((acc, val) => {\n      const numericAcc = Number(acc) || 0;\n      const numericVal = Number(val) || 0;\n      return numericAcc + numericVal;\n    }, 0);\n    const numericSum = Number(sum) || 0;\n    if (numericSum > 0) {\n      Object.keys(record).forEach(key => {\n        const currentValue = Number(record[key as T]) || 0;\n        record[key as T] = currentValue / numericSum;\n      });\n    }\n  } catch (error) {\n    logger.error('Error normalizing values:', error);\n    // If normalization fails, leave values as they are\n  }\n}; "],"version":3}