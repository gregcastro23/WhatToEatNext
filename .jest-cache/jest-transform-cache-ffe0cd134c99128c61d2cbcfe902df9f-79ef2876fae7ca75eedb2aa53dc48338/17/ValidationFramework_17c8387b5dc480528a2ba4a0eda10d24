3a4d3070928f115182ec7168a039fe70
"use strict";
/**
 * Validation Framework
 *
 * Comprehensive validation system for each phase completion with automated
 * milestone validation, success criteria checking, and failure detection
 * with recovery trigger system.
 *
 * Requirements: 7.6, 6.5, 6.6, 6.7, 6.8
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidationFramework = void 0;
const child_process_1 = require("child_process");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
/**
 * Comprehensive Validation Framework for Campaign Execution
 */
class ValidationFramework {
    constructor() {
        this.phaseValidations = new Map();
        this.validationHistory = [];
        this.initializePhaseValidations();
    }
    /**
     * Initialize validation criteria for all campaign phases
     */
    initializePhaseValidations() {
        // Phase 1: TypeScript Error Elimination
        this.phaseValidations.set('phase1', {
            phaseId: 'phase1',
            phaseName: 'TypeScript Error Elimination',
            successThreshold: 1.0,
            criteria: [
                {
                    id: 'typescript-errors-zero',
                    name: 'Zero TypeScript Errors',
                    description: 'All TypeScript compilation errors must be eliminated',
                    required: true,
                    weight: 0.6,
                    validator: async () => {
                        const startTime = Date.now();
                        try {
                            const output = (0, child_process_1.execSync)('yarn tsc --noEmit --skipLibCheck 2>&1', {
                                encoding: 'utf8',
                                timeout: 60000
                            });
                            const errorCount = (output.match(/error TS\d+/g) || []).length;
                            const executionTime = Date.now() - startTime;
                            return {
                                success: errorCount === 0,
                                value: errorCount,
                                expected: 0,
                                message: errorCount === 0
                                    ? 'All TypeScript errors eliminated'
                                    : `${errorCount} TypeScript errors remaining`,
                                details: errorCount > 0 ? output.split('\n').slice(-10).join('\n') : undefined,
                                timestamp: new Date(),
                                executionTime
                            };
                        }
                        catch (error) {
                            const executionTime = Date.now() - startTime;
                            const errorOutput = error.stdout || error.stderr || error.message;
                            const errorCount = (errorOutput.match(/error TS\d+/g) || []).length;
                            return {
                                success: false,
                                value: errorCount,
                                expected: 0,
                                message: `TypeScript compilation failed with ${errorCount} errors`,
                                details: errorOutput,
                                timestamp: new Date(),
                                executionTime
                            };
                        }
                    }
                },
                {
                    id: 'build-stability',
                    name: 'Build Stability',
                    description: 'Project must build successfully without errors',
                    required: true,
                    weight: 0.3,
                    validator: async () => {
                        const startTime = Date.now();
                        try {
                            (0, child_process_1.execSync)('yarn build', {
                                stdio: 'pipe',
                                timeout: 120000
                            });
                            const executionTime = Date.now() - startTime;
                            return {
                                success: true,
                                value: true,
                                expected: true,
                                message: 'Build completed successfully',
                                timestamp: new Date(),
                                executionTime
                            };
                        }
                        catch (error) {
                            const executionTime = Date.now() - startTime;
                            return {
                                success: false,
                                value: false,
                                expected: true,
                                message: 'Build failed',
                                details: error.stdout || error.stderr || error.message,
                                timestamp: new Date(),
                                executionTime
                            };
                        }
                    }
                },
                {
                    id: 'critical-error-types',
                    name: 'Critical Error Types Eliminated',
                    description: 'High-priority error types (TS2352, TS2345, TS2698, TS2304, TS2362) must be zero',
                    required: false,
                    weight: 0.1,
                    validator: async () => {
                        const startTime = Date.now();
                        try {
                            const output = (0, child_process_1.execSync)('yarn tsc --noEmit --skipLibCheck 2>&1', {
                                encoding: 'utf8',
                                timeout: 60000
                            });
                            const criticalErrors = (output.match(/error (TS2352|TS2345|TS2698|TS2304|TS2362)/g) || []).length;
                            const executionTime = Date.now() - startTime;
                            return {
                                success: criticalErrors === 0,
                                value: criticalErrors,
                                expected: 0,
                                message: criticalErrors === 0
                                    ? 'All critical error types eliminated'
                                    : `${criticalErrors} critical errors remaining`,
                                timestamp: new Date(),
                                executionTime
                            };
                        }
                        catch (error) {
                            const executionTime = Date.now() - startTime;
                            return {
                                success: false,
                                value: -1,
                                expected: 0,
                                message: 'Could not analyze critical error types',
                                details: error.message,
                                timestamp: new Date(),
                                executionTime
                            };
                        }
                    }
                }
            ]
        });
        // Phase 2: Linting Excellence Achievement
        this.phaseValidations.set('phase2', {
            phaseId: 'phase2',
            phaseName: 'Linting Excellence Achievement',
            successThreshold: 1.0,
            criteria: [
                {
                    id: 'linting-warnings-zero',
                    name: 'Zero Linting Warnings',
                    description: 'All linting warnings must be eliminated',
                    required: true,
                    weight: 0.5,
                    validator: async () => {
                        const startTime = Date.now();
                        try {
                            const output = (0, child_process_1.execSync)('yarn lint 2>&1', {
                                encoding: 'utf8',
                                timeout: 120000
                            });
                            const warningCount = (output.match(/warning/g) || []).length;
                            const executionTime = Date.now() - startTime;
                            return {
                                success: warningCount === 0,
                                value: warningCount,
                                expected: 0,
                                message: warningCount === 0
                                    ? 'All linting warnings eliminated'
                                    : `${warningCount} linting warnings remaining`,
                                details: warningCount > 0 ? output.split('\n').slice(-15).join('\n') : undefined,
                                timestamp: new Date(),
                                executionTime
                            };
                        }
                        catch (error) {
                            const executionTime = Date.now() - startTime;
                            const errorOutput = error.stdout || error.stderr || error.message;
                            const warningCount = (errorOutput.match(/warning/g) || []).length;
                            return {
                                success: false,
                                value: warningCount,
                                expected: 0,
                                message: `Linting failed with ${warningCount} warnings`,
                                details: errorOutput,
                                timestamp: new Date(),
                                executionTime
                            };
                        }
                    }
                },
                {
                    id: 'explicit-any-warnings',
                    name: 'Explicit-Any Warnings Eliminated',
                    description: 'All @typescript-eslint/no-explicit-any warnings must be eliminated',
                    required: true,
                    weight: 0.25,
                    validator: async () => {
                        const startTime = Date.now();
                        try {
                            const output = (0, child_process_1.execSync)('yarn lint 2>&1', {
                                encoding: 'utf8',
                                timeout: 120000
                            });
                            const explicitAnyCount = (output.match(/@typescript-eslint\/no-explicit-any/g) || []).length;
                            const executionTime = Date.now() - startTime;
                            return {
                                success: explicitAnyCount === 0,
                                value: explicitAnyCount,
                                expected: 0,
                                message: explicitAnyCount === 0
                                    ? 'All explicit-any warnings eliminated'
                                    : `${explicitAnyCount} explicit-any warnings remaining`,
                                timestamp: new Date(),
                                executionTime
                            };
                        }
                        catch (error) {
                            const executionTime = Date.now() - startTime;
                            return {
                                success: false,
                                value: -1,
                                expected: 0,
                                message: 'Could not analyze explicit-any warnings',
                                details: error.message,
                                timestamp: new Date(),
                                executionTime
                            };
                        }
                    }
                },
                {
                    id: 'unused-variables-warnings',
                    name: 'Unused Variables Warnings Eliminated',
                    description: 'All no-unused-vars warnings must be eliminated',
                    required: true,
                    weight: 0.15,
                    validator: async () => {
                        const startTime = Date.now();
                        try {
                            const output = (0, child_process_1.execSync)('yarn lint 2>&1', {
                                encoding: 'utf8',
                                timeout: 120000
                            });
                            const unusedVarsCount = (output.match(/no-unused-vars/g) || []).length;
                            const executionTime = Date.now() - startTime;
                            return {
                                success: unusedVarsCount === 0,
                                value: unusedVarsCount,
                                expected: 0,
                                message: unusedVarsCount === 0
                                    ? 'All unused variables warnings eliminated'
                                    : `${unusedVarsCount} unused variables warnings remaining`,
                                timestamp: new Date(),
                                executionTime
                            };
                        }
                        catch (error) {
                            const executionTime = Date.now() - startTime;
                            return {
                                success: false,
                                value: -1,
                                expected: 0,
                                message: 'Could not analyze unused variables warnings',
                                details: error.message,
                                timestamp: new Date(),
                                executionTime
                            };
                        }
                    }
                },
                {
                    id: 'console-warnings',
                    name: 'Console Statement Warnings Eliminated',
                    description: 'All no-console warnings must be eliminated',
                    required: false,
                    weight: 0.1,
                    validator: async () => {
                        const startTime = Date.now();
                        try {
                            const output = (0, child_process_1.execSync)('yarn lint 2>&1', {
                                encoding: 'utf8',
                                timeout: 120000
                            });
                            const consoleCount = (output.match(/no-console/g) || []).length;
                            const executionTime = Date.now() - startTime;
                            return {
                                success: consoleCount === 0,
                                value: consoleCount,
                                expected: 0,
                                message: consoleCount === 0
                                    ? 'All console warnings eliminated'
                                    : `${consoleCount} console warnings remaining`,
                                timestamp: new Date(),
                                executionTime
                            };
                        }
                        catch (error) {
                            const executionTime = Date.now() - startTime;
                            return {
                                success: false,
                                value: -1,
                                expected: 0,
                                message: 'Could not analyze console warnings',
                                details: error.message,
                                timestamp: new Date(),
                                executionTime
                            };
                        }
                    }
                }
            ]
        });
        // Phase 3: Enterprise Intelligence Transformation
        this.phaseValidations.set('phase3', {
            phaseId: 'phase3',
            phaseName: 'Enterprise Intelligence Transformation',
            successThreshold: 0.9,
            criteria: [
                {
                    id: 'enterprise-systems-count',
                    name: 'Enterprise Intelligence Systems Count',
                    description: 'Must have 200+ active enterprise intelligence systems',
                    required: true,
                    weight: 0.6,
                    validator: async () => {
                        const startTime = Date.now();
                        try {
                            const output = (0, child_process_1.execSync)('grep -r "INTELLIGENCE_SYSTEM" src/ | wc -l', {
                                encoding: 'utf8',
                                timeout: 30000
                            });
                            const systemCount = parseInt(output.trim()) || 0;
                            const executionTime = Date.now() - startTime;
                            return {
                                success: systemCount >= 200,
                                value: systemCount,
                                expected: 200,
                                message: systemCount >= 200
                                    ? `${systemCount} enterprise intelligence systems active`
                                    : `Only ${systemCount} intelligence systems (target: 200+)`,
                                timestamp: new Date(),
                                executionTime
                            };
                        }
                        catch (error) {
                            const executionTime = Date.now() - startTime;
                            return {
                                success: false,
                                value: 0,
                                expected: 200,
                                message: 'Could not count enterprise intelligence systems',
                                details: error.message,
                                timestamp: new Date(),
                                executionTime
                            };
                        }
                    }
                },
                {
                    id: 'unused-exports-eliminated',
                    name: 'Unused Exports Eliminated',
                    description: 'All unused exports should be transformed or eliminated',
                    required: true,
                    weight: 0.3,
                    validator: async () => {
                        const startTime = Date.now();
                        try {
                            // This is a simplified check - in practice would use more sophisticated analysis
                            const output = (0, child_process_1.execSync)('find src/ -name "*.ts" -o -name "*.tsx" | xargs grep -l "export.*unused" | wc -l', {
                                encoding: 'utf8',
                                timeout: 30000
                            });
                            const unusedExports = parseInt(output.trim()) || 0;
                            const executionTime = Date.now() - startTime;
                            return {
                                success: unusedExports === 0,
                                value: unusedExports,
                                expected: 0,
                                message: unusedExports === 0
                                    ? 'All unused exports transformed'
                                    : `${unusedExports} unused exports remaining`,
                                timestamp: new Date(),
                                executionTime
                            };
                        }
                        catch (error) {
                            const executionTime = Date.now() - startTime;
                            return {
                                success: true,
                                value: 0,
                                expected: 0,
                                message: 'Could not analyze unused exports (assuming transformed)',
                                details: error.message,
                                timestamp: new Date(),
                                executionTime
                            };
                        }
                    }
                },
                {
                    id: 'build-stability-phase3',
                    name: 'Build Stability After Transformation',
                    description: 'Build must remain stable after intelligence system transformation',
                    required: true,
                    weight: 0.1,
                    validator: async () => {
                        const startTime = Date.now();
                        try {
                            (0, child_process_1.execSync)('yarn build', {
                                stdio: 'pipe',
                                timeout: 120000
                            });
                            const executionTime = Date.now() - startTime;
                            return {
                                success: true,
                                value: true,
                                expected: true,
                                message: 'Build stability maintained after transformation',
                                timestamp: new Date(),
                                executionTime
                            };
                        }
                        catch (error) {
                            const executionTime = Date.now() - startTime;
                            return {
                                success: false,
                                value: false,
                                expected: true,
                                message: 'Build failed after transformation',
                                details: error.stdout || error.stderr || error.message,
                                timestamp: new Date(),
                                executionTime
                            };
                        }
                    }
                }
            ]
        });
        // Phase 4: Performance Optimization Maintenance
        this.phaseValidations.set('phase4', {
            phaseId: 'phase4',
            phaseName: 'Performance Optimization Maintenance',
            successThreshold: 0.8,
            criteria: [
                {
                    id: 'build-time-target',
                    name: 'Build Time Under 10 Seconds',
                    description: 'Build time must be under 10 seconds',
                    required: true,
                    weight: 0.4,
                    validator: async () => {
                        const startTime = Date.now();
                        try {
                            (0, child_process_1.execSync)('yarn build', {
                                stdio: 'pipe',
                                timeout: 120000
                            });
                            const buildTime = (Date.now() - startTime) / 1000;
                            return {
                                success: buildTime < 10,
                                value: buildTime,
                                expected: 10,
                                message: buildTime < 10
                                    ? `Build completed in ${buildTime.toFixed(1)}s (target: <10s)`
                                    : `Build took ${buildTime.toFixed(1)}s (exceeds 10s target)`,
                                timestamp: new Date(),
                                executionTime: Date.now() - startTime
                            };
                        }
                        catch (error) {
                            const buildTime = (Date.now() - startTime) / 1000;
                            return {
                                success: false,
                                value: buildTime,
                                expected: 10,
                                message: `Build failed after ${buildTime.toFixed(1)}s`,
                                details: error.stdout || error.stderr || error.message,
                                timestamp: new Date(),
                                executionTime: Date.now() - startTime
                            };
                        }
                    }
                },
                {
                    id: 'test-suite-performance',
                    name: 'Test Suite Performance',
                    description: 'Test suite must complete successfully within reasonable time',
                    required: true,
                    weight: 0.3,
                    validator: async () => {
                        const startTime = Date.now();
                        try {
                            (0, child_process_1.execSync)('yarn test --run', {
                                stdio: 'pipe',
                                timeout: 180000
                            });
                            const testTime = (Date.now() - startTime) / 1000;
                            return {
                                success: true,
                                value: testTime,
                                expected: 60,
                                message: `Test suite completed in ${testTime.toFixed(1)}s`,
                                timestamp: new Date(),
                                executionTime: Date.now() - startTime
                            };
                        }
                        catch (error) {
                            const testTime = (Date.now() - startTime) / 1000;
                            return {
                                success: false,
                                value: testTime,
                                expected: 60,
                                message: `Test suite failed after ${testTime.toFixed(1)}s`,
                                details: error.stdout || error.stderr || error.message,
                                timestamp: new Date(),
                                executionTime: Date.now() - startTime
                            };
                        }
                    }
                },
                {
                    id: 'bundle-size-check',
                    name: 'Bundle Size Optimization',
                    description: 'Bundle size should be optimized and within targets',
                    required: false,
                    weight: 0.2,
                    validator: async () => {
                        const startTime = Date.now();
                        try {
                            // Check if build output exists and get size
                            const buildPath = path_1.default.join(process.cwd(), '.next');
                            if (fs_1.default.existsSync(buildPath)) {
                                const stats = fs_1.default.statSync(buildPath);
                                const sizeKB = stats.size / 1024;
                                const executionTime = Date.now() - startTime;
                                return {
                                    success: sizeKB < 500,
                                    value: sizeKB,
                                    expected: 420,
                                    message: sizeKB < 500
                                        ? `Bundle size ${sizeKB.toFixed(1)}KB (target: <420KB)`
                                        : `Bundle size ${sizeKB.toFixed(1)}KB exceeds target`,
                                    timestamp: new Date(),
                                    executionTime
                                };
                            }
                            else {
                                return {
                                    success: true,
                                    value: 0,
                                    expected: 420,
                                    message: 'Bundle size check skipped (no build output)',
                                    timestamp: new Date(),
                                    executionTime: Date.now() - startTime
                                };
                            }
                        }
                        catch (error) {
                            return {
                                success: true,
                                value: 0,
                                expected: 420,
                                message: 'Bundle size check failed (non-critical)',
                                details: error.message,
                                timestamp: new Date(),
                                executionTime: Date.now() - startTime
                            };
                        }
                    }
                },
                {
                    id: 'memory-usage-check',
                    name: 'Memory Usage Optimization',
                    description: 'Memory usage should be within acceptable limits',
                    required: false,
                    weight: 0.1,
                    validator: async () => {
                        const startTime = Date.now();
                        try {
                            const memUsage = process.memoryUsage();
                            const heapUsedMB = memUsage.heapUsed / 1024 / 1024;
                            const executionTime = Date.now() - startTime;
                            return {
                                success: heapUsedMB < 50,
                                value: heapUsedMB,
                                expected: 50,
                                message: heapUsedMB < 50
                                    ? `Memory usage ${heapUsedMB.toFixed(1)}MB (target: <50MB)`
                                    : `Memory usage ${heapUsedMB.toFixed(1)}MB exceeds target`,
                                timestamp: new Date(),
                                executionTime
                            };
                        }
                        catch (error) {
                            return {
                                success: true,
                                value: 0,
                                expected: 50,
                                message: 'Memory usage check failed (non-critical)',
                                details: error.message,
                                timestamp: new Date(),
                                executionTime: Date.now() - startTime
                            };
                        }
                    }
                }
            ]
        });
    }
    /**
     * Validate a specific phase completion
     */
    async validatePhase(phaseId) {
        const phaseValidation = this.phaseValidations.get(phaseId);
        if (!phaseValidation) {
            throw new Error(`Unknown phase ID: ${phaseId}`);
        }
        console.log(`🔍 Validating ${phaseValidation.phaseName}...`);
        const startTime = Date.now();
        const results = [];
        let totalScore = 0;
        let passedCriteria = 0;
        // Execute all validation criteria
        for (const criteria of phaseValidation.criteria) {
            console.log(`  ⏳ Checking: ${criteria.name}`);
            try {
                const result = await criteria.validator();
                results.push({ criteriaId: criteria.id, result });
                if (result.success) {
                    totalScore += criteria.weight;
                    passedCriteria++;
                    console.log(`  ✅ ${criteria.name}: ${result.message}`);
                }
                else {
                    console.log(`  ❌ ${criteria.name}: ${result.message}`);
                    if (criteria.required) {
                        console.log(`  🚨 REQUIRED CRITERIA FAILED: ${criteria.name}`);
                    }
                }
            }
            catch (error) {
                const failedResult = {
                    success: false,
                    message: `Validation failed: ${error}`,
                    timestamp: new Date(),
                    executionTime: 0
                };
                results.push({ criteriaId: criteria.id, result: failedResult });
                console.log(`  ❌ ${criteria.name}: Validation error - ${error}`);
            }
        }
        const executionTime = Date.now() - startTime;
        const success = totalScore >= phaseValidation.successThreshold;
        const failedCriteria = phaseValidation.criteria.length - passedCriteria;
        // Generate recommendations
        const recommendations = this.generateRecommendations(phaseValidation, results);
        const validationResult = {
            phaseId,
            success,
            score: totalScore,
            totalCriteria: phaseValidation.criteria.length,
            passedCriteria,
            failedCriteria,
            results,
            executionTime,
            timestamp: new Date(),
            recommendations
        };
        // Store in history
        this.validationHistory.push(validationResult);
        // Log summary
        console.log(`\n📊 ${phaseValidation.phaseName} Validation Summary:`);
        console.log(`✅ Success: ${success}`);
        console.log(`📈 Score: ${(totalScore * 100).toFixed(1)}% (threshold: ${(phaseValidation.successThreshold * 100).toFixed(1)}%)`);
        console.log(`📋 Criteria: ${passedCriteria}/${phaseValidation.criteria.length} passed`);
        console.log(`⏱️ Execution Time: ${executionTime}ms`);
        if (recommendations.length > 0) {
            console.log(`\n💡 Recommendations:`);
            recommendations.forEach(rec => console.log(`  • ${rec}`));
        }
        return validationResult;
    }
    /**
     * Detect failures and determine recovery actions
     */
    async detectFailures() {
        const failures = [];
        // Build failure detection
        try {
            (0, child_process_1.execSync)('yarn build', { stdio: 'pipe', timeout: 60000 });
        }
        catch (error) {
            failures.push({
                detected: true,
                severity: 'critical',
                category: 'build',
                description: 'Build process failed',
                recoveryActions: [
                    'Check TypeScript errors with: yarn tsc --noEmit',
                    'Review build logs for specific errors',
                    'Run: make campaign-emergency-rollback if needed'
                ],
                automaticRecovery: false
            });
        }
        // Test failure detection
        try {
            (0, child_process_1.execSync)('yarn test --run', { stdio: 'pipe', timeout: 60000 });
        }
        catch (error) {
            failures.push({
                detected: true,
                severity: 'high',
                category: 'test',
                description: 'Test suite failed',
                recoveryActions: [
                    'Review failing tests',
                    'Check for breaking changes in recent commits',
                    'Run tests individually to isolate issues'
                ],
                automaticRecovery: false
            });
        }
        // TypeScript error detection
        try {
            const output = (0, child_process_1.execSync)('yarn tsc --noEmit --skipLibCheck 2>&1', { encoding: 'utf8' });
            const errorCount = (output.match(/error TS\d+/g) || []).length;
            if (errorCount > 100) {
                failures.push({
                    detected: true,
                    severity: 'high',
                    category: 'typescript',
                    description: `High number of TypeScript errors: ${errorCount}`,
                    recoveryActions: [
                        'Run systematic TypeScript error fixing',
                        'Use: node scripts/typescript-fixes/fix-typescript-errors-enhanced-v3.js --dry-run',
                        'Consider rollback if errors increased significantly'
                    ],
                    automaticRecovery: true
                });
            }
        }
        catch (error) {
            // TypeScript errors are expected during campaign
        }
        // Performance degradation detection
        const buildStart = Date.now();
        try {
            (0, child_process_1.execSync)('yarn build', { stdio: 'pipe', timeout: 120000 });
            const buildTime = (Date.now() - buildStart) / 1000;
            if (buildTime > 30) {
                failures.push({
                    detected: true,
                    severity: 'medium',
                    category: 'performance',
                    description: `Build time degraded: ${buildTime.toFixed(1)}s`,
                    recoveryActions: [
                        'Check for performance regressions',
                        'Review recent changes for optimization opportunities',
                        'Clear build cache: yarn cache clean'
                    ],
                    automaticRecovery: true
                });
            }
        }
        catch (error) {
            // Build failure already detected above
        }
        return failures;
    }
    /**
     * Get validation history
     */
    getValidationHistory() {
        return [...this.validationHistory];
    }
    /**
     * Get available phase validations
     */
    getAvailablePhases() {
        return Array.from(this.phaseValidations.entries()).map(([id, validation]) => ({
            id,
            name: validation.phaseName,
            criteriaCount: validation.criteria.length
        }));
    }
    /**
     * Generate recommendations based on validation results
     */
    generateRecommendations(phaseValidation, results) {
        const recommendations = [];
        for (const { criteriaId, result } of results) {
            if (!result.success) {
                const criteria = phaseValidation.criteria.find(c => c.id === criteriaId);
                if (!criteria)
                    continue;
                switch (criteriaId) {
                    case 'typescript-errors-zero':
                        recommendations.push('Run Enhanced TypeScript Error Fixer: node scripts/typescript-fixes/fix-typescript-errors-enhanced-v3.js --dry-run');
                        break;
                    case 'linting-warnings-zero':
                        recommendations.push('Run systematic linting fixes: node scripts/typescript-fixes/fix-explicit-any-systematic.js --dry-run');
                        break;
                    case 'explicit-any-warnings':
                        recommendations.push('Focus on explicit-any elimination: node scripts/typescript-fixes/fix-explicit-any-systematic.js --max-files=25');
                        break;
                    case 'unused-variables-warnings':
                        recommendations.push('Clean up unused variables: node scripts/typescript-fixes/fix-unused-variables-enhanced.js --max-files=20');
                        break;
                    case 'enterprise-systems-count':
                        recommendations.push('Transform more unused exports to intelligence systems');
                        break;
                    case 'build-time-target':
                        recommendations.push('Optimize build performance: check for large dependencies and enable caching');
                        break;
                    case 'build-stability':
                    case 'build-stability-phase3':
                        recommendations.push('Fix build errors before proceeding to next phase');
                        break;
                    default:
                        recommendations.push(`Address ${criteria.name}: ${result.message}`);
                }
            }
        }
        return recommendations;
    }
}
exports.ValidationFramework = ValidationFramework;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,