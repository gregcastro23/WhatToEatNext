{"file":"/Users/GregCastro/Desktop/WhatToEatNext/.consolidation-backups-2025-08-23T17-54-10-092Z/src/scripts/validation/__tests__/ComprehensiveValidationFramework.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/.consolidation-backups-2025-08-23T17-54-10-092Z/src/scripts/validation/__tests__/ComprehensiveValidationFramework.test.ts"],"sourcesContent":["/**\n * Test Suite for Comprehensive Validation Framework\n *\n * This test suite validates the comprehensive validation framework functionality\n * including TypeScript validation, test suite validation, and component validation.\n */\n\nimport { execSync } from 'child_process';\nimport fs from 'fs';\nimport { ComprehensiveValidationFramework, ValidationConfig } from '../ComprehensiveValidationFramework';\n\n// Mock external dependencies\njest.mock('fs');\njest.mock('child_process');\n\nconst mockFs = fs as jest.Mocked<typeof fs>;\nconst mockExecSync = execSync as jest.MockedFunction<typeof execSync>;\n\ndescribe('ComprehensiveValidationFramework', () => {\n  let framework: ComprehensiveValidationFramework;\n  let mockProcessedFiles: string[];\n\n  beforeEach(() => {\n    // Reset mocks\n    jest.clearAllMocks();\n\n    // Setup default configuration\n    const config: Partial<ValidationConfig> = {\n      enableTypeScriptValidation: true,\n      enableTestSuiteValidation: true,\n      enableComponentValidation: true,\n      enableServiceValidation: true,\n      enableBuildValidation: true,\n      testTimeout: 30000,\n      compilationTimeout: 45000,\n      maxRetries: 2,\n      logLevel: 'info'\n    };\n\n    framework = new ComprehensiveValidationFramework(config);\n\n    // Setup mock processed files\n    mockProcessedFiles = [\n      '/project/src/components/TestComponent.tsx',\n      '/project/src/services/TestService.ts',\n      '/project/src/utils/helper.ts'\n    ];\n\n    // Mock successful executions by default\n    mockExecSync.mockReturnValue(Buffer.from(''));\n    mockFs.readFileSync.mockReturnValue('export default TestComponent;');\n    mockFs.existsSync.mockReturnValue(true);\n  });\n\n  describe('Comprehensive Validation', () => {\n    test('should perform all validations successfully', async () => {\n      const result = await framework.performComprehensiveValidation(mockProcessedFiles, 'test-batch-1');\n\n      expect(result.overallPassed).toBe(true);\n      expect(result.qualityScore).toBeGreaterThan(90);\n      expect(result.requiresRollback).toBe(false);\n      expect(result.validationResults.length).toBeGreaterThan(0);\n    });\n\n    test('should fail overall validation on TypeScript compilation errors', async () => {\n      // Mock TypeScript compilation failure\n      mockExecSync.mockImplementation((cmd) => {\n        if (cmd.toString().includes('tsc')) {\n          const error = new Error('Compilation failed') as any;\n          error.stdout = 'error TS2322: Type error\\nerror TS2339: Property error';\n          throw error;\n        }\n        return Buffer.from('');\n      });\n\n      const result = await framework.performComprehensiveValidation(mockProcessedFiles, 'test-batch-1');\n\n      expect(result.overallPassed).toBe(false);\n      expect(result.qualityScore).toBeLessThan(70);\n      expect(result.requiresRollback).toBe(true);\n\n      const tsResult = result.validationResults.find(r => r.validationType === 'typescript-compilation');\n      expect(tsResult?.passed).toBe(false);\n      expect(tsResult?.details.errorCount).toBe(2);\n    });\n\n    test('should handle test suite failures appropriately', async () => {\n      // Mock test failure\n      mockExecSync.mockImplementation((cmd) => {\n        if (cmd.toString().includes('yarn test')) {\n          const error = new Error('Tests failed') as any;\n          error.stdout = '2 failed, 5 passed, 7 total';\n          throw error;\n        }\n        return Buffer.from('');\n      });\n\n      const result = await framework.performComprehensiveValidation(mockProcessedFiles, 'test-batch-1');\n\n      expect(result.overallPassed).toBe(false);\n      expect(result.qualityScore).toBeLessThan(80);\n\n      const testResult = result.validationResults.find(r => r.validationType === 'test-suite');\n      expect(testResult?.passed).toBe(false);\n    });\n\n    test('should calculate quality score correctly', async () => {\n      // Mock partial failures\n      let callCount = 0;\n      mockExecSync.mockImplementation((cmd) => {\n        callCount++;\n        if (cmd.toString().includes('tsc')) {\n          return Buffer.from(''); // TypeScript passes\n        }\n        if (cmd.toString().includes('yarn test')) {\n          const error = new Error('Some tests failed') as any;\n          error.stdout = '1 failed, 4 passed, 5 total';\n          throw error; // Tests fail\n        }\n        return Buffer.from('');\n      });\n\n      const result = await framework.performComprehensiveValidation(mockProcessedFiles, 'test-batch-1');\n\n      // Should lose 25 points for test failures but keep TypeScript points\n      expect(result.qualityScore).toBeLessThan(100);\n      expect(result.qualityScore).toBeGreaterThan(70);\n    });\n  });\n\n  describe('TypeScript Validation', () => {\n    test('should pass TypeScript validation with no errors', async () => {\n      mockExecSync.mockReturnValue(Buffer.from(''));\n\n      const result = await framework.performComprehensiveValidation(mockProcessedFiles, 'test-batch-1');\n\n      const tsResult = result.validationResults.find(r => r.validationType === 'typescript-compilation');\n      expect(tsResult?.passed).toBe(true);\n      expect(tsResult?.errors.length).toBe(0);\n    });\n\n    test('should retry TypeScript validation on failure', async () => {\n      let attemptCount = 0;\n      mockExecSync.mockImplementation((cmd) => {\n        if (cmd.toString().includes('tsc')) {\n          attemptCount++;\n          if (attemptCount <= 2) {\n            const error = new Error('Compilation failed') as any;\n            error.stdout = 'error TS2322: Type error';\n            throw error;\n          }\n          return Buffer.from(''); // Success on third attempt\n        }\n        return Buffer.from('');\n      });\n\n      const result = await framework.performComprehensiveValidation(mockProcessedFiles, 'test-batch-1');\n\n      const tsResult = result.validationResults.find(r => r.validationType === 'typescript-compilation');\n      expect(tsResult?.passed).toBe(true);\n      expect(tsResult?.retryCount).toBe(2);\n      expect(attemptCount).toBe(3);\n    });\n\n    test('should extract and categorize TypeScript error types', async () => {\n      mockExecSync.mockImplementation((cmd) => {\n        if (cmd.toString().includes('tsc')) {\n          const error = new Error('Compilation failed') as any;\n          error.stdout = `\n            error TS2322: Type 'string' is not assignable to type 'number'\n            error TS2339: Property 'foo' does not exist on type 'Bar'\n            error TS2322: Another type error\n          `;\n          throw error;\n        }\n        return Buffer.from('');\n      });\n\n      const result = await framework.performComprehensiveValidation(mockProcessedFiles, 'test-batch-1');\n\n      const tsResult = result.validationResults.find(r => r.validationType === 'typescript-compilation');\n      expect(tsResult?.details.errorTypes).toEqual({\n        'TS2322': 2,\n        'TS2339': 1\n      });\n    });\n  });\n\n  describe('Test Suite Validation', () => {\n    test('should find and validate related test files', async () => {\n      // Mock test files exist\n      mockFs.existsSync.mockImplementation((path) => {\n        return path.toString().includes('.test.') || path.toString().includes('__tests__');\n      });\n\n      mockExecSync.mockImplementation((cmd) => {\n        if (cmd.toString().includes('yarn test')) {\n          return Buffer.from('5 passed, 0 failed, 5 total');\n        }\n        return Buffer.from('');\n      });\n\n      const result = await framework.performComprehensiveValidation(mockProcessedFiles, 'test-batch-1');\n\n      const testResult = result.validationResults.find(r => r.validationType === 'test-suite');\n      expect(testResult?.passed).toBe(true);\n      expect(testResult?.details.relatedTestFiles).toBeDefined();\n    });\n\n    test('should handle case with no related test files', async () => {\n      // Mock no test files exist\n      mockFs.existsSync.mockReturnValue(false);\n\n      const result = await framework.performComprehensiveValidation(mockProcessedFiles, 'test-batch-1');\n\n      const testResult = result.validationResults.find(r => r.validationType === 'test-suite');\n      expect(testResult?.passed).toBe(true);\n      expect(testResult?.warnings).toContain('No related test files found for processed files');\n    });\n\n    test('should parse test results correctly', async () => {\n      mockExecSync.mockImplementation((cmd) => {\n        if (cmd.toString().includes('yarn test')) {\n          return Buffer.from('Test Suites: 2 passed, 1 failed, 3 total\\nTests: 8 passed, 2 failed, 10 total');\n        }\n        return Buffer.from('');\n      });\n\n      const result = await framework.performComprehensiveValidation(mockProcessedFiles, 'test-batch-1');\n\n      const testResult = result.validationResults.find(r => r.validationType === 'test-suite');\n      expect(testResult?.details.testResults).toEqual({\n        passed: 8,\n        failed: 2,\n        total: 10\n      });\n    });\n  });\n\n  describe('React Component Validation', () => {\n    test('should validate React components successfully', async () => {\n      // Mock component file content\n      mockFs.readFileSync.mockImplementation((path) => {\n        if (path.toString().includes('TestComponent.tsx')) {\n          return `\n            import React from 'react';\n\n            interface TestComponentProps {\n              title: string;\n            }\n\n            export const TestComponent: React.FC<TestComponentProps> = ({ title }) => {\n              const [count, setCount] = useState(0);\n              return <div>{title}</div>;\n            };\n\n            export default TestComponent;\n          `;\n        }\n        return 'export default Component;';\n      });\n\n      const result = await framework.performComprehensiveValidation(mockProcessedFiles, 'test-batch-1');\n\n      const componentResults = result.validationResults.filter(r => r.validationType === 'react-component');\n      expect(componentResults.length).toBeGreaterThan(0);\n\n      const componentResult = componentResults[0];\n      expect(componentResult.passed).toBe(true);\n      expect(componentResult.details.componentInfo.componentName).toBe('TestComponent');\n      expect(componentResult.details.componentInfo.exportedFunctions).toContain('TestComponent');\n      expect(componentResult.details.componentInfo.propsInterface).toBe('TestComponentProps');\n      expect(componentResult.details.componentInfo.stateVariables).toContain('count');\n    });\n\n    test('should detect component import issues', async () => {\n      // Mock component with no exports\n      mockFs.readFileSync.mockImplementation((path) => {\n        if (path.toString().includes('TestComponent.tsx')) {\n          return 'const Component = () => <div>Test</div>;'; // No export\n        }\n        return 'export default Component;';\n      });\n\n      const result = await framework.performComprehensiveValidation(mockProcessedFiles, 'test-batch-1');\n\n      const componentResults = result.validationResults.filter(r => r.validationType === 'react-component');\n      const componentResult = componentResults[0];\n      expect(componentResult.passed).toBe(false);\n      expect(componentResult.errors).toContain('Component import failed: No exports found in component');\n    });\n\n    test('should validate component props interface preservation', async () => {\n      // Mock component with props interface\n      mockFs.readFileSync.mockImplementation((path) => {\n        if (path.toString().includes('TestComponent.tsx')) {\n          return `\n            interface TestProps { title: string; }\n            export const TestComponent = ({ title }: TestProps) => <div>{title}</div>;\n          `;\n        }\n        return 'export default Component;';\n      });\n\n      const result = await framework.performComprehensiveValidation(mockProcessedFiles, 'test-batch-1');\n\n      const componentResults = result.validationResults.filter(r => r.validationType === 'react-component');\n      const componentResult = componentResults[0];\n      expect(componentResult.passed).toBe(true);\n      expect(componentResult.details.componentInfo.propsInterface).toBe('TestProps');\n    });\n  });\n\n  describe('Service Integration Validation', () => {\n    test('should validate service integration successfully', async () => {\n      // Mock service file content\n      mockFs.readFileSync.mockImplementation((path) => {\n        if (path.toString().includes('TestService.ts')) {\n          return `\n            export class TestService {\n              async fetchData() {\n                return fetch('/api/data');\n              }\n\n              async postData(data: any) {\n                return fetch('/api/submit', { method: 'POST', body: JSON.stringify(data) });\n              }\n            }\n\n            export const apiClient = new TestService();\n          `;\n        }\n        return 'export default Service;';\n      });\n\n      const result = await framework.performComprehensiveValidation(mockProcessedFiles, 'test-batch-1');\n\n      const serviceResults = result.validationResults.filter(r => r.validationType === 'service-integration');\n      expect(serviceResults.length).toBeGreaterThan(0);\n\n      const serviceResult = serviceResults[0];\n      expect(serviceResult.passed).toBe(true);\n      expect(serviceResult.details.serviceInfo.serviceName).toBe('TestService');\n      expect(serviceResult.details.serviceInfo.exportedMethods).toContain('TestService');\n      expect(serviceResult.details.serviceInfo.exportedMethods).toContain('apiClient');\n      expect(serviceResult.details.serviceInfo.apiEndpoints).toContain('/api/data');\n      expect(serviceResult.details.serviceInfo.apiEndpoints).toContain('/api/submit');\n    });\n\n    test('should detect service method elimination issues', async () => {\n      // Mock service with missing methods\n      mockFs.readFileSync.mockImplementation((path) => {\n        if (path.toString().includes('TestService.ts')) {\n          return `\n            export class TestService {\n              // fetchData method was eliminated\n            }\n          `;\n        }\n        return 'export default Service;';\n      });\n\n      const result = await framework.performComprehensiveValidation(mockProcessedFiles, 'test-batch-1');\n\n      const serviceResults = result.validationResults.filter(r => r.validationType === 'service-integration');\n      const serviceResult = serviceResults[0];\n\n      // This test would need more sophisticated analysis to detect missing methods\n      // For now, we test that the validation framework processes service files\n      expect(serviceResult).toBeDefined();\n      expect(serviceResult.details.serviceInfo).toBeDefined();\n    });\n  });\n\n  describe('Build System Validation', () => {\n    test('should validate build system successfully', async () => {\n      mockExecSync.mockImplementation((cmd) => {\n        if (cmd.toString().includes('next build --dry-run')) {\n          return Buffer.from('Build validation successful');\n        }\n        return Buffer.from('');\n      });\n\n      const result = await framework.performComprehensiveValidation(mockProcessedFiles, 'test-batch-1');\n\n      const buildResult = result.validationResults.find(r => r.validationType === 'build-system');\n      expect(buildResult?.passed).toBe(true);\n      expect(buildResult?.details.buildOutput).toContain('Build validation successful');\n    });\n\n    test('should handle build system failures', async () => {\n      mockExecSync.mockImplementation((cmd) => {\n        if (cmd.toString().includes('next build --dry-run')) {\n          const error = new Error('Build failed') as any;\n          error.message = 'Module not found';\n          throw error;\n        }\n        return Buffer.from('');\n      });\n\n      const result = await framework.performComprehensiveValidation(mockProcessedFiles, 'test-batch-1');\n\n      const buildResult = result.validationResults.find(r => r.validationType === 'build-system');\n      expect(buildResult?.passed).toBe(false);\n      expect(buildResult?.errors).toContain('Build system validation failed: Module not found');\n    });\n  });\n\n  describe('Configuration Options', () => {\n    test('should respect disabled validation options', async () => {\n      const configWithDisabledValidations: Partial<ValidationConfig> = {\n        enableTypeScriptValidation: false,\n        enableTestSuiteValidation: false,\n        enableComponentValidation: false,\n        enableServiceValidation: false,\n        enableBuildValidation: false\n      };\n\n      const frameworkWithDisabledValidations = new ComprehensiveValidationFramework(configWithDisabledValidations);\n      const result = await frameworkWithDisabledValidations.performComprehensiveValidation(mockProcessedFiles, 'test-batch-1');\n\n      expect(result.validationResults.length).toBe(0);\n      expect(result.overallPassed).toBe(true);\n      expect(result.qualityScore).toBe(100);\n    });\n\n    test('should respect timeout configurations', async () => {\n      const configWithShortTimeouts: Partial<ValidationConfig> = {\n        testTimeout: 1000,\n        compilationTimeout: 1000\n      };\n\n      const frameworkWithShortTimeouts = new ComprehensiveValidationFramework(configWithShortTimeouts);\n\n      // Mock long-running command\n      mockExecSync.mockImplementation((cmd) => {\n        if (cmd.toString().includes('tsc')) {\n          // Simulate timeout\n          const error = new Error('Command timed out') as any;\n          error.code = 'TIMEOUT';\n          throw error;\n        }\n        return Buffer.from('');\n      });\n\n      const result = await frameworkWithShortTimeouts.performComprehensiveValidation(mockProcessedFiles, 'test-batch-1');\n\n      const tsResult = result.validationResults.find(r => r.validationType === 'typescript-compilation');\n      expect(tsResult?.passed).toBe(false);\n      expect(tsResult?.errors.some(e => e.includes('timed out'))).toBe(true);\n    });\n  });\n\n  describe('Validation History and Reporting', () => {\n    test('should store validation history', async () => {\n      await framework.performComprehensiveValidation(mockProcessedFiles, 'test-batch-1');\n      await framework.performComprehensiveValidation(mockProcessedFiles, 'test-batch-2');\n\n      const history = framework.getValidationHistory();\n      expect(history.size).toBe(2);\n      expect(history.has('test-batch-1')).toBe(true);\n      expect(history.has('test-batch-2')).toBe(true);\n    });\n\n    test('should generate validation report', async () => {\n      await framework.performComprehensiveValidation(mockProcessedFiles, 'test-batch-1');\n\n      const report = framework.generateValidationReport('test-batch-1');\n\n      expect(report).toContain('# Validation Report');\n      expect(report).toContain('Batch ID: test-batch-1');\n      expect(report).toContain('## Summary');\n      expect(report).toContain('Total Validations:');\n      expect(report).toContain('## Validation Results');\n    });\n\n    test('should generate comprehensive report for all batches', async () => {\n      await framework.performComprehensiveValidation(mockProcessedFiles, 'test-batch-1');\n      await framework.performComprehensiveValidation(mockProcessedFiles, 'test-batch-2');\n\n      const report = framework.generateValidationReport();\n\n      expect(report).toContain('# Validation Report');\n      expect(report).toContain('All Batches');\n      expect(report).toContain('## Summary');\n    });\n  });\n\n  describe('Error Handling', () => {\n    test('should handle framework errors gracefully', async () => {\n      // Mock file system error\n      mockFs.readFileSync.mockImplementation(() => {\n        throw new Error('File system error');\n      });\n\n      const result = await framework.performComprehensiveValidation(mockProcessedFiles, 'test-batch-1');\n\n      expect(result.overallPassed).toBe(false);\n      expect(result.requiresRollback).toBe(true);\n      expect(result.qualityScore).toBe(0);\n      expect(result.validationResults[0].validationType).toBe('framework-error');\n    });\n\n    test('should handle partial validation failures', async () => {\n      // Mock TypeScript success but test failure\n      mockExecSync.mockImplementation((cmd) => {\n        if (cmd.toString().includes('tsc')) {\n          return Buffer.from(''); // Success\n        }\n        if (cmd.toString().includes('yarn test')) {\n          throw new Error('Tests failed'); // Failure\n        }\n        return Buffer.from('');\n      });\n\n      const result = await framework.performComprehensiveValidation(mockProcessedFiles, 'test-batch-1');\n\n      expect(result.overallPassed).toBe(false);\n      expect(result.qualityScore).toBeLessThan(100);\n      expect(result.qualityScore).toBeGreaterThan(0);\n\n      const tsResult = result.validationResults.find(r => r.validationType === 'typescript-compilation');\n      const testResult = result.validationResults.find(r => r.validationType === 'test-suite');\n\n      expect(tsResult?.passed).toBe(true);\n      expect(testResult?.passed).toBe(false);\n    });\n  });\n\n  describe('Quality Score Calculation', () => {\n    test('should calculate quality score based on validation results', async () => {\n      // Mock mixed results\n      let callCount = 0;\n      mockExecSync.mockImplementation((cmd) => {\n        callCount++;\n        if (cmd.toString().includes('tsc')) {\n          return Buffer.from(''); // TypeScript passes (no penalty)\n        }\n        if (cmd.toString().includes('yarn test')) {\n          const error = new Error('Tests failed') as any;\n          error.stdout = '1 failed, 4 passed, 5 total';\n          throw error; // Tests fail (-25 points)\n        }\n        if (cmd.toString().includes('next build')) {\n          const error = new Error('Build failed') as any;\n          throw error; // Build fails (-10 points)\n        }\n        return Buffer.from('');\n      });\n\n      const result = await framework.performComprehensiveValidation(mockProcessedFiles, 'test-batch-1');\n\n      // Should be 100 - 25 (test failure) - 10 (build failure) = 65\n      expect(result.qualityScore).toBe(65);\n    });\n\n    test('should not allow negative quality scores', async () => {\n      // Mock all validations failing\n      mockExecSync.mockImplementation((cmd) => {\n        throw new Error('All validations failed');\n      });\n\n      const result = await framework.performComprehensiveValidation(mockProcessedFiles, 'test-batch-1');\n\n      expect(result.qualityScore).toBeGreaterThanOrEqual(0);\n    });\n  });\n});\n"],"version":3}