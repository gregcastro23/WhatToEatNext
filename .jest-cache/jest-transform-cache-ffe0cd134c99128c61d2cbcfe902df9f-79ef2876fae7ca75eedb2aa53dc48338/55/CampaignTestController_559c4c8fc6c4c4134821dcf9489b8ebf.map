{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/utils/CampaignTestController.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/utils/CampaignTestController.ts"],"sourcesContent":["/**\n * Campaign Test Controller\n * \n * Provides campaign pause/resume functionality specifically designed for test isolation.\n * Ensures that campaign operations don't interfere with test execution.\n */\n\nimport { TestSafeProgressTracker } from './TestSafeProgressTracker';\nimport {\n  MockCampaignController,\n  MockProgressTracker,\n  MockSafetyProtocol,\n  campaignTestIsolation\n} from '../mocks/CampaignSystemMocks';\nimport {\n  CampaignConfig,\n  CampaignPhase,\n  ProgressMetrics,\n  SafetyEvent,\n  SafetyEventType,\n  SafetyEventSeverity\n} from '../../types/campaign';\n\ninterface CampaignTestState {\n  isPaused: boolean;\n  isIsolated: boolean;\n  pausedAt: Date | null;\n  resumedAt: Date | null;\n  testName: string | null;\n  originalState: any;\n}\n\ninterface TestIsolationConfig {\n  pauseProgressTracking: boolean;\n  preventBuildExecution: boolean;\n  preventGitOperations: boolean;\n  enableMemoryMonitoring: boolean;\n  isolateFileSystem: boolean;\n  mockExternalAPIs: boolean;\n}\n\n/**\n * Campaign Test Controller manages campaign system state during test execution\n * to ensure proper isolation and prevent interference between tests.\n */\nexport class CampaignTestController {\n  private static instance: CampaignTestController | null = null;\n  private testState: CampaignTestState;\n  private isolationConfig: TestIsolationConfig;\n  private testSafeTracker: TestSafeProgressTracker | null = null;\n  private mockInstances: {\n    controller: MockCampaignController | null;\n    tracker: MockProgressTracker | null;\n    safety: MockSafetyProtocol | null;\n  };\n  private originalEnvVars: Record<string, string | undefined> = {};\n  private activeTestName: string | null = null;\n\n  private constructor() {\n    this.testState = {\n      isPaused: false,\n      isIsolated: false,\n      pausedAt: null,\n      resumedAt: null,\n      testName: null,\n      originalState: null\n    };\n\n    this.isolationConfig = {\n      pauseProgressTracking: true,\n      preventBuildExecution: true,\n      preventGitOperations: true,\n      enableMemoryMonitoring: true,\n      isolateFileSystem: false, // Can be enabled for specific tests\n      mockExternalAPIs: true\n    };\n\n    this.mockInstances = {\n      controller: null,\n      tracker: null,\n      safety: null\n    };\n\n    this.setupTestEnvironment();\n  }\n\n  static getInstance(): CampaignTestController {\n    if (!CampaignTestController.instance) {\n      CampaignTestController.instance = new CampaignTestController();\n    }\n    return CampaignTestController.instance;\n  }\n\n  /**\n   * Initialize campaign test environment for a specific test\n   */\n  async initializeForTest(testName: string, config?: Partial<TestIsolationConfig>): Promise<void> {\n    this.activeTestName = testName;\n    this.isolationConfig = { ...this.isolationConfig, ...config };\n\n    // Store original state\n    this.testState.originalState = this.captureOriginalState();\n\n    // Initialize mock campaign system\n    const mockSystem = campaignTestIsolation.initializeMockCampaignSystem();\n    this.mockInstances = mockSystem;\n\n    // Initialize test-safe progress tracker\n    if (this.isolationConfig.pauseProgressTracking) {\n      this.testSafeTracker = new TestSafeProgressTracker({\n        maxHistorySize: 10, // Smaller for tests\n        memoryCheckFrequency: 3,\n        enableMemoryMonitoring: this.isolationConfig.enableMemoryMonitoring,\n        simulateRealProgress: false\n      });\n    }\n\n    // Apply test isolation\n    await this.applyTestIsolation(testName);\n\n    console.log(`Campaign test environment initialized for: ${testName}`);\n  }\n\n  /**\n   * Pause all campaign operations for test isolation\n   */\n  async pauseCampaignForTest(testName: string): Promise<void> {\n    if (this.testState.isPaused) {\n      console.warn(`Campaign already paused for test: ${this.testState.testName}`);\n      return;\n    }\n\n    this.testState.isPaused = true;\n    this.testState.pausedAt = new Date();\n    this.testState.testName = testName;\n\n    // Pause mock campaign controller\n    if (this.mockInstances.controller) {\n      this.mockInstances.controller.pauseCampaign();\n    }\n\n    // Stop test-safe progress tracking\n    if (this.testSafeTracker) {\n      this.testSafeTracker.stopTracking(testName);\n    }\n\n    // Pause campaign isolation manager\n    campaignTestIsolation.pauseCampaignOperations();\n\n    // Set environment variables to prevent actual operations\n    this.setTestEnvironmentVars();\n\n    console.log(`Campaign operations paused for test: ${testName}`);\n  }\n\n  /**\n   * Resume campaign operations after test completion\n   */\n  async resumeCampaignAfterTest(testName: string): Promise<void> {\n    if (!this.testState.isPaused) {\n      console.warn('Campaign is not paused, nothing to resume');\n      return;\n    }\n\n    if (this.testState.testName !== testName) {\n      console.warn(`Resume test name (${testName}) doesn't match pause test name (${this.testState.testName})`);\n    }\n\n    this.testState.isPaused = false;\n    this.testState.resumedAt = new Date();\n\n    // Resume mock campaign controller\n    if (this.mockInstances.controller) {\n      this.mockInstances.controller.resumeCampaign();\n    }\n\n    // Resume campaign isolation manager\n    campaignTestIsolation.resumeCampaignOperations();\n\n    // Restore environment variables\n    this.restoreEnvironmentVars();\n\n    console.log(`Campaign operations resumed after test: ${testName}`);\n  }\n\n  /**\n   * Get test-safe progress tracker instance\n   */\n  getTestSafeTracker(): TestSafeProgressTracker | null {\n    return this.testSafeTracker;\n  }\n\n  /**\n   * Get mock campaign instances for testing\n   */\n  getMockInstances(): {\n    controller: MockCampaignController | null;\n    tracker: MockProgressTracker | null;\n    safety: MockSafetyProtocol | null;\n  } {\n    return { ...this.mockInstances };\n  }\n\n  /**\n   * Check if campaign is currently paused\n   */\n  isPaused(): boolean {\n    return this.testState.isPaused;\n  }\n\n  /**\n   * Check if test isolation is active\n   */\n  isIsolated(): boolean {\n    return this.testState.isIsolated;\n  }\n\n  /**\n   * Get current test state\n   */\n  getTestState(): CampaignTestState {\n    return { ...this.testState };\n  }\n\n  /**\n   * Simulate campaign progress for testing\n   */\n  async simulateProgress(\n    targetMetrics: Partial<ProgressMetrics>,\n    durationMs: number = 1000,\n    testName?: string\n  ): Promise<void> {\n    if (!this.testSafeTracker) {\n      throw new Error('Test-safe tracker not initialized');\n    }\n\n    await this.testSafeTracker.simulateProgress(\n      targetMetrics,\n      durationMs,\n      testName || this.activeTestName || 'unknown'\n    );\n  }\n\n  /**\n   * Update mock metrics for testing scenarios\n   */\n  updateMockMetrics(updates: Partial<ProgressMetrics>, testName?: string): void {\n    // Update test-safe tracker\n    if (this.testSafeTracker) {\n      this.testSafeTracker.updateMetrics(updates, testName);\n    }\n\n    // Update mock tracker\n    if (this.mockInstances.tracker) {\n      this.mockInstances.tracker.updateMockMetrics(updates);\n    }\n\n    // Update mock controller\n    if (this.mockInstances.controller) {\n      this.mockInstances.controller.updateMockMetrics(updates);\n    }\n  }\n\n  /**\n   * Create mock safety event for testing\n   */\n  createMockSafetyEvent(\n    type: SafetyEventType,\n    description: string,\n    severity: SafetyEventSeverity = SafetyEventSeverity.INFO\n  ): SafetyEvent {\n    return {\n      type,\n      timestamp: new Date(),\n      description: `Mock: ${description}`,\n      severity,\n      action: 'MOCK_TEST_EVENT'\n    };\n  }\n\n  /**\n   * Validate test isolation state\n   */\n  validateTestIsolation(): {\n    isValid: boolean;\n    issues: string[];\n    warnings: string[];\n  } {\n    const issues: string[] = [];\n    const warnings: string[] = [];\n\n    // Check environment variables\n    if (process.env.NODE_ENV !== 'test') {\n      issues.push('NODE_ENV is not set to \"test\"');\n    }\n\n    if (!process.env.CAMPAIGN_TEST_MODE) {\n      warnings.push('CAMPAIGN_TEST_MODE not set');\n    }\n\n    if (!process.env.DISABLE_ACTUAL_BUILDS) {\n      issues.push('DISABLE_ACTUAL_BUILDS not set - actual builds may run');\n    }\n\n    // Check mock instances\n    if (!this.mockInstances.controller) {\n      warnings.push('Mock campaign controller not initialized');\n    }\n\n    if (!this.mockInstances.tracker) {\n      warnings.push('Mock progress tracker not initialized');\n    }\n\n    // Check test-safe tracker\n    if (this.isolationConfig.pauseProgressTracking && !this.testSafeTracker) {\n      warnings.push('Test-safe progress tracker not initialized');\n    }\n\n    // Validate test-safe tracker state\n    if (this.testSafeTracker) {\n      const trackerValidation = this.testSafeTracker.validateTrackingState();\n      issues.push(...trackerValidation.errors);\n      warnings.push(...trackerValidation.warnings);\n    }\n\n    return {\n      isValid: issues.length === 0,\n      issues,\n      warnings\n    };\n  }\n\n  /**\n   * Cleanup test environment and reset state\n   */\n  async cleanupAfterTest(testName: string): Promise<void> {\n    // Resume if paused\n    if (this.testState.isPaused) {\n      await this.resumeCampaignAfterTest(testName);\n    }\n\n    // Cleanup test-safe tracker\n    if (this.testSafeTracker) {\n      this.testSafeTracker.cleanup();\n      this.testSafeTracker = null;\n    }\n\n    // Reset mock instances\n    campaignTestIsolation.resetAllMockStates();\n    this.mockInstances = {\n      controller: null,\n      tracker: null,\n      safety: null\n    };\n\n    // Restore original state\n    if (this.testState.originalState) {\n      this.restoreOriginalState(this.testState.originalState);\n    }\n\n    // Reset test state\n    this.testState = {\n      isPaused: false,\n      isIsolated: false,\n      pausedAt: null,\n      resumedAt: null,\n      testName: null,\n      originalState: null\n    };\n\n    this.activeTestName = null;\n\n    console.log(`Campaign test environment cleaned up for: ${testName}`);\n  }\n\n  /**\n   * Force cleanup and reset everything\n   */\n  static async forceCleanup(): Promise<void> {\n    if (CampaignTestController.instance) {\n      const instance = CampaignTestController.instance;\n      \n      // Cleanup current test if any\n      if (instance.activeTestName) {\n        await instance.cleanupAfterTest(instance.activeTestName);\n      }\n\n      // Cleanup campaign isolation\n      campaignTestIsolation.restoreEnvironment();\n\n      // Reset singleton\n      CampaignTestController.instance = null;\n    }\n  }\n\n  // Private helper methods\n\n  private setupTestEnvironment(): void {\n    // Store original environment variables\n    this.originalEnvVars = {\n      NODE_ENV: process.env.NODE_ENV,\n      CAMPAIGN_TEST_MODE: process.env.CAMPAIGN_TEST_MODE,\n      DISABLE_ACTUAL_BUILDS: process.env.DISABLE_ACTUAL_BUILDS,\n      DISABLE_GIT_OPERATIONS: process.env.DISABLE_GIT_OPERATIONS,\n      MOCK_CAMPAIGN_SYSTEM: process.env.MOCK_CAMPAIGN_SYSTEM\n    };\n\n    // Set basic test environment\n    (process.env as any).NODE_ENV = 'test';\n    process.env.CAMPAIGN_TEST_MODE = 'true';\n  }\n\n  private async applyTestIsolation(testName: string): Promise<void> {\n    this.testState.isIsolated = true;\n\n    // Set environment variables for test isolation\n    this.setTestEnvironmentVars();\n\n    // Mock external dependencies if configured\n    if (this.isolationConfig.mockExternalAPIs) {\n      this.mockExternalAPIs();\n    }\n\n    // Start test-safe tracking if configured\n    if (this.testSafeTracker && this.isolationConfig.pauseProgressTracking) {\n      this.testSafeTracker.startTracking(testName);\n    }\n  }\n\n  private setTestEnvironmentVars(): void {\n    if (this.isolationConfig.preventBuildExecution) {\n      process.env.DISABLE_ACTUAL_BUILDS = 'true';\n    }\n\n    if (this.isolationConfig.preventGitOperations) {\n      process.env.DISABLE_GIT_OPERATIONS = 'true';\n    }\n\n    if (this.isolationConfig.mockExternalAPIs) {\n      process.env.MOCK_CAMPAIGN_SYSTEM = 'true';\n    }\n  }\n\n  private restoreEnvironmentVars(): void {\n    Object.entries(this.originalEnvVars).forEach(([key, value]) => {\n      if (value !== undefined) {\n        process.env[key] = value;\n      } else {\n        delete process.env[key];\n      }\n    });\n  }\n\n  private mockExternalAPIs(): void {\n    // Mock child_process.execSync to prevent actual command execution\n    const originalExecSync = require('child_process').execSync;\n    \n    jest.spyOn(require('child_process'), 'execSync').mockImplementation((command: string) => {\n      // Return mock outputs for common commands\n      if (command.includes('tsc --noEmit')) {\n        return ''; // No TypeScript errors\n      }\n      if (command.includes('yarn lint')) {\n        return ''; // No linting warnings\n      }\n      if (command.includes('yarn build')) {\n        return 'Build completed successfully';\n      }\n      if (command.includes('git stash')) {\n        return 'Saved working directory and index state';\n      }\n      \n      return 'Mock command output';\n    });\n\n    // Mock fs operations for file system isolation if configured\n    if (this.isolationConfig.isolateFileSystem) {\n      this.mockFileSystemOperations();\n    }\n  }\n\n  private mockFileSystemOperations(): void {\n    const fs = require('fs');\n    \n    // Mock file existence checks\n    jest.spyOn(fs, 'existsSync').mockImplementation((path: string) => {\n      // Return true for common paths to prevent errors\n      if (path.includes('.git') || path.includes('package.json') || path.includes('tsconfig.json')) {\n        return true;\n      }\n      return false;\n    });\n\n    // Mock file reading\n    jest.spyOn(fs, 'readFileSync').mockImplementation((path: string) => {\n      return 'Mock file content';\n    });\n\n    // Mock file writing\n    jest.spyOn(fs, 'writeFileSync').mockImplementation(() => {\n      // Do nothing - prevent actual file writes\n    });\n  }\n\n  private captureOriginalState(): any {\n    return {\n      envVars: { ...process.env },\n      mockStates: this.mockInstances\n    };\n  }\n\n  private restoreOriginalState(originalState: any): void {\n    // Restore environment variables\n    if (originalState.envVars) {\n      Object.keys(process.env).forEach(key => {\n        if (!(key in originalState.envVars)) {\n          delete process.env[key];\n        }\n      });\n      \n      Object.entries(originalState.envVars).forEach(([key, value]) => {\n        if (typeof value === 'string') {\n          process.env[key] = value;\n        }\n      });\n    }\n  }\n}\n\n// Export singleton instance for easy access\nexport const campaignTestController = CampaignTestController.getInstance();\n\n// Class is already exported above\n\n// Export types for use in tests\nexport type { CampaignTestState, TestIsolationConfig };"],"version":3}