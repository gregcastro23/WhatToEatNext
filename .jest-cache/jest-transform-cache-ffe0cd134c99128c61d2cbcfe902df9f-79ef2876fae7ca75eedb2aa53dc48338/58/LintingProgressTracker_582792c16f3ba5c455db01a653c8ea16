95a00001a48d9bfb90299bdf7b5352ed
"use strict";
/**
 * Linting Progress Tracker
 *
 * Monitors and tracks linting error reduction progress, integrating with
 * the campaign system for comprehensive quality improvement tracking.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LintingProgressTracker = void 0;
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const logger_1 = require("@/utils/logger");
/**
 * Linting Progress Tracker Class
 */
class LintingProgressTracker {
    metricsFile = '.kiro/metrics/linting-metrics.json';
    historyFile = '.kiro/metrics/linting-history.json';
    configFile = '.kiro/metrics/linting-config.json';
    constructor() {
        this.ensureDirectoryExists();
    }
    /**
     * Collect current linting metrics
     */
    async collectMetrics() {
        const startTime = Date.now();
        try {
            logger_1.logger.info('Collecting linting metrics...');
            // Run ESLint with JSON output
            const lintOutput = this.runLintingAnalysis();
            const metrics = this.parseLintingOutput(lintOutput);
            const executionTime = Date.now() - startTime;
            const fullMetrics = {
                ...metrics,
                timestamp: new Date(),
                performanceMetrics: {
                    executionTime,
                    memoryUsage: this.getMemoryUsage(),
                    cacheHitRate: this.calculateCacheHitRate()
                }
            };
            // Save metrics
            this.saveMetrics(fullMetrics);
            logger_1.logger.info(`Linting metrics collected: ${fullMetrics.totalIssues} total issues`);
            return fullMetrics;
        }
        catch (error) {
            logger_1.logger.error('Error collecting linting metrics:', error);
            throw error;
        }
    }
    /**
     * Generate progress report
     */
    async generateProgressReport() {
        try {
            const currentMetrics = await this.collectMetrics();
            const previousMetrics = this.getPreviousMetrics();
            const history = this.getMetricsHistory();
            const improvement = this.calculateImprovement(currentMetrics, previousMetrics);
            const trends = this.calculateTrends(history);
            const qualityGates = this.evaluateQualityGates(currentMetrics);
            const report = {
                currentMetrics,
                previousMetrics,
                improvement,
                trends,
                qualityGates
            };
            logger_1.logger.info('Linting progress report generated');
            return report;
        }
        catch (error) {
            logger_1.logger.error('Error generating progress report:', error);
            throw error;
        }
    }
    /**
     * Integrate with campaign system
     */
    async integrateCampaignProgress(campaignData) {
        try {
            const report = await this.generateProgressReport();
            // Calculate campaign-specific metrics
            const campaignProgress = {
                campaignId: campaignData.campaignId,
                phase: campaignData.phase,
                currentProgress: this.calculateCampaignProgress(report, campaignData),
                qualityScore: this.calculateQualityScore(report.currentMetrics),
                riskAssessment: this.assessRisk(report),
                recommendations: this.generateRecommendations(report)
            };
            // Save campaign integration data
            this.saveCampaignIntegration(campaignProgress);
            // Trigger campaign system notifications if needed
            if (this.shouldNotifyCampaignSystem(report, campaignData)) {
                await this.notifyCampaignSystem(campaignProgress);
            }
            logger_1.logger.info(`Campaign integration completed for ${campaignData.phase}`);
        }
        catch (error) {
            logger_1.logger.error('Error integrating with campaign system:', error);
            throw error;
        }
    }
    /**
     * Create quality gates for deployment
     */
    createQualityGates(thresholds) {
        try {
            const metrics = this.getLatestMetrics();
            if (!metrics) {
                logger_1.logger.warn('No metrics available for quality gate evaluation');
                return false;
            }
            const gates = {
                errorGate: metrics.errors <= thresholds.maxErrors,
                warningGate: metrics.warnings <= thresholds.maxWarnings,
                performanceGate: metrics.performanceMetrics.executionTime <= thresholds.maxExecutionTime
            };
            const allGatesPassed = Object.values(gates).every(gate => gate);
            logger_1.logger.info('Quality gates evaluation:', {
                gates,
                passed: allGatesPassed,
                metrics: {
                    errors: metrics.errors,
                    warnings: metrics.warnings,
                    executionTime: metrics.performanceMetrics.executionTime
                }
            });
            return allGatesPassed;
        }
        catch (error) {
            logger_1.logger.error('Error evaluating quality gates:', error);
            return false;
        }
    }
    /**
     * Run linting analysis
     */
    runLintingAnalysis() {
        try {
            // Run ESLint with JSON format and capture both stdout and stderr
            const command = 'yarn lint --format json --max-warnings 10000';
            const result = (0, child_process_1.execSync)(command, {
                encoding: 'utf8',
                stdio: 'pipe',
                maxBuffer: 10 * 1024 * 1024 // 10MB buffer
            });
            return result;
        }
        catch (error) {
            // ESLint returns non-zero exit code when issues are found
            // The output is still valid JSON in error.stdout
            if (error.stdout) {
                return error.stdout;
            }
            throw error;
        }
    }
    /**
     * Parse ESLint JSON output
     */
    parseLintingOutput(output) {
        try {
            const results = JSON.parse(output);
            let totalIssues = 0;
            let errors = 0;
            let warnings = 0;
            let fixableIssues = 0;
            const errorsByCategory = {};
            const warningsByCategory = {};
            const filesCovered = results.length;
            results.forEach((file) => {
                file.messages.forEach((message) => {
                    totalIssues++;
                    if (message.severity === 2) {
                        errors++;
                        errorsByCategory[message.ruleId || 'unknown'] = (errorsByCategory[message.ruleId || 'unknown'] || 0) + 1;
                    }
                    else {
                        warnings++;
                        warningsByCategory[message.ruleId || 'unknown'] = (warningsByCategory[message.ruleId || 'unknown'] || 0) + 1;
                    }
                    if (message.fix) {
                        fixableIssues++;
                    }
                });
            });
            return {
                totalIssues,
                errors,
                warnings,
                errorsByCategory,
                warningsByCategory,
                filesCovered,
                fixableIssues
            };
        }
        catch (error) {
            logger_1.logger.error('Error parsing linting output:', error);
            throw error;
        }
    }
    /**
     * Calculate improvement metrics
     */
    calculateImprovement(current, previous) {
        if (!previous) {
            return {
                totalIssuesReduced: 0,
                errorsReduced: 0,
                warningsReduced: 0,
                percentageImprovement: 0
            };
        }
        const totalIssuesReduced = previous.totalIssues - current.totalIssues;
        const errorsReduced = previous.errors - current.errors;
        const warningsReduced = previous.warnings - current.warnings;
        const percentageImprovement = previous.totalIssues > 0
            ? (totalIssuesReduced / previous.totalIssues) * 100
            : 0;
        return {
            totalIssuesReduced,
            errorsReduced,
            warningsReduced,
            percentageImprovement
        };
    }
    /**
     * Calculate trends from historical data
     */
    calculateTrends(history) {
        const now = new Date();
        const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);
        const sevenDaysAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
        const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
        const last24Hours = this.calculateTrendForPeriod(history, oneDayAgo);
        const last7Days = this.calculateTrendForPeriod(history, sevenDaysAgo);
        const last30Days = this.calculateTrendForPeriod(history, thirtyDaysAgo);
        return { last24Hours, last7Days, last30Days };
    }
    /**
     * Calculate trend for specific period
     */
    calculateTrendForPeriod(history, since) {
        const recentMetrics = history.filter(m => new Date(m.timestamp) >= since);
        if (recentMetrics.length < 2)
            return 0;
        const oldest = recentMetrics[0];
        const newest = recentMetrics[recentMetrics.length - 1];
        return oldest.totalIssues - newest.totalIssues;
    }
    /**
     * Evaluate quality gates
     */
    evaluateQualityGates(metrics) {
        return {
            zeroErrors: metrics.errors === 0,
            warningsUnderThreshold: metrics.warnings < 1000,
            performanceAcceptable: metrics.performanceMetrics.executionTime < 60000 // 1 minute
        };
    }
    /**
     * Calculate campaign progress
     */
    calculateCampaignProgress(report, campaignData) {
        const currentIssues = report.currentMetrics.totalIssues;
        const targetReduction = campaignData.targetReduction;
        // Assume we started with some baseline (could be stored in campaign data)
        const baselineIssues = targetReduction;
        const progress = Math.max(0, Math.min(100, ((baselineIssues - currentIssues) / baselineIssues) * 100));
        return progress;
    }
    /**
     * Calculate quality score
     */
    calculateQualityScore(metrics) {
        const errorWeight = 0.6;
        const warningWeight = 0.3;
        const performanceWeight = 0.1;
        const errorScore = Math.max(0, 100 - metrics.errors);
        const warningScore = Math.max(0, 100 - (metrics.warnings / 10));
        const performanceScore = Math.max(0, 100 - (metrics.performanceMetrics.executionTime / 1000));
        return (errorScore * errorWeight) + (warningScore * warningWeight) + (performanceScore * performanceWeight);
    }
    /**
     * Assess risk based on metrics
     */
    assessRisk(report) {
        const { currentMetrics, improvement } = report;
        if (currentMetrics.errors > 100 || improvement.percentageImprovement < -10) {
            return 'high';
        }
        else if (currentMetrics.errors > 10 || improvement.percentageImprovement < 0) {
            return 'medium';
        }
        else {
            return 'low';
        }
    }
    /**
     * Generate recommendations
     */
    generateRecommendations(report) {
        const recommendations = [];
        const { currentMetrics, improvement } = report;
        if (currentMetrics.errors > 0) {
            recommendations.push(`Focus on eliminating ${currentMetrics.errors} remaining errors`);
        }
        if (currentMetrics.fixableIssues > 0) {
            recommendations.push(`${currentMetrics.fixableIssues} issues can be auto-fixed with ESLint --fix`);
        }
        if (improvement.percentageImprovement < 0) {
            recommendations.push('Quality regression detected - investigate recent changes');
        }
        if (currentMetrics.performanceMetrics.executionTime > 30000) {
            recommendations.push('Consider optimizing linting performance with caching');
        }
        return recommendations;
    }
    /**
     * Utility methods
     */
    ensureDirectoryExists() {
        try {
            (0, child_process_1.execSync)('mkdir -p .kiro/metrics', { stdio: 'pipe' });
        }
        catch (error) {
            // Directory might already exist
        }
    }
    saveMetrics(metrics) {
        try {
            (0, fs_1.writeFileSync)(this.metricsFile, JSON.stringify(metrics, null, 2));
            // Also append to history
            const history = this.getMetricsHistory();
            history.push(metrics);
            // Keep only last 100 entries
            const trimmedHistory = history.slice(-100);
            (0, fs_1.writeFileSync)(this.historyFile, JSON.stringify(trimmedHistory, null, 2));
        }
        catch (error) {
            logger_1.logger.error('Error saving metrics:', error);
        }
    }
    getPreviousMetrics() {
        try {
            if ((0, fs_1.existsSync)(this.metricsFile)) {
                const data = (0, fs_1.readFileSync)(this.metricsFile, 'utf8');
                return JSON.parse(data);
            }
        }
        catch (error) {
            logger_1.logger.warn('Error reading previous metrics:', error);
        }
        return undefined;
    }
    getLatestMetrics() {
        return this.getPreviousMetrics();
    }
    getMetricsHistory() {
        try {
            if ((0, fs_1.existsSync)(this.historyFile)) {
                const data = (0, fs_1.readFileSync)(this.historyFile, 'utf8');
                const parsed = JSON.parse(data);
                return Array.isArray(parsed) ? parsed : [];
            }
        }
        catch (error) {
            logger_1.logger.warn('Error reading metrics history:', error);
        }
        return [];
    }
    getMemoryUsage() {
        return process.memoryUsage().heapUsed / 1024 / 1024; // MB
    }
    calculateCacheHitRate() {
        // This would need to be implemented based on ESLint cache statistics
        // For now, return a placeholder
        return 0.8; // 80% cache hit rate
    }
    saveCampaignIntegration(data) {
        try {
            const integrationFile = '.kiro/metrics/campaign-integration.json';
            (0, fs_1.writeFileSync)(integrationFile, JSON.stringify(data, null, 2));
        }
        catch (error) {
            logger_1.logger.error('Error saving campaign integration data:', error);
        }
    }
    shouldNotifyCampaignSystem(report, campaignData) {
        // Notify if significant improvement or regression
        return Math.abs(report.improvement.percentageImprovement) > 5;
    }
    async notifyCampaignSystem(data) {
        // This would integrate with the existing campaign system
        logger_1.logger.info('Campaign system notification:', data);
    }
}
exports.LintingProgressTracker = LintingProgressTracker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,