{"file":"/Users/GregCastro/Desktop/WhatToEatNext/.consolidation-backups-2025-08-23T17-54-10-092Z/src/__tests__/utils/campaignTestUtils.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/.consolidation-backups-2025-08-23T17-54-10-092Z/src/__tests__/utils/campaignTestUtils.ts"],"sourcesContent":["/**\n * Campaign Test Utilities\n *\n * Comprehensive utilities for testing campaign system functionality\n * with proper isolation and memory management.\n */\n\nimport {\n  CampaignConfig,\n  CampaignPhase,\n  ProgressMetrics,\n  SafetyEvent,\n  SafetyEventType,\n  SafetyEventSeverity,\n  PhaseResult,\n} from '../../types/campaign';\nimport {\n  MockCampaignController,\n  MockProgressTracker,\n  MockSafetyProtocol,\n  campaignTestIsolation as _campaignTestIsolation,\n} from '../mocks/CampaignSystemMocks';\n\nimport { campaignTestController, CampaignTestController } from './CampaignTestController';\nimport { TestSafeProgressTracker } from './TestSafeProgressTracker';\n\n/**\n * Test setup configuration for campaign tests\n */\nexport interface CampaignTestSetup {\n  testName: string;\n  enableMemoryMonitoring?: boolean;\n  preventActualBuilds?: boolean;\n  preventGitOperations?: boolean;\n  mockProgressTracking?: boolean;\n  simulateRealProgress?: boolean;\n  customConfig?: Partial<CampaignConfig>;\n}\n\n/**\n * Campaign test context that provides access to all mock instances\n */\nexport interface CampaignTestContext {\n  controller: MockCampaignController;\n  tracker: MockProgressTracker;\n  safety: MockSafetyProtocol;\n  testSafeTracker: TestSafeProgressTracker | null;\n  testController: CampaignTestController;\n}\n\n/**\n * Setup campaign test environment with proper isolation\n */\nexport async function setupCampaignTest(setup: CampaignTestSetup): Promise<CampaignTestContext> {\n  const {\n    testName,\n    enableMemoryMonitoring = true,\n    preventActualBuilds = true,\n    preventGitOperations = true,\n    mockProgressTracking = true,\n    simulateRealProgress: _simulateRealProgress = false,\n    customConfig: _customConfig,\n  } = setup;\n\n  // Initialize test controller with configuration\n  await campaignTestController.initializeForTest(testName, {\n    pauseProgressTracking: mockProgressTracking,\n    preventBuildExecution: preventActualBuilds,\n    preventGitOperations,\n    enableMemoryMonitoring,\n    isolateFileSystem: false,\n    mockExternalAPIs: true,\n  });\n\n  // Pause campaign operations for test isolation\n  await campaignTestController.pauseCampaignForTest(testName);\n\n  // Get mock instances\n  const mockInstances = campaignTestController.getMockInstances();\n  const testSafeTracker = campaignTestController.getTestSafeTracker();\n\n  // Validate that all required instances are available\n  if (!mockInstances.controller || !mockInstances.tracker || !mockInstances.safety) {\n    throw new Error('Failed to initialize campaign mock instances');\n  }\n\n  return {\n    controller: mockInstances.controller,\n    tracker: mockInstances.tracker,\n    safety: mockInstances.safety,\n    testSafeTracker,\n    testController: campaignTestController,\n  };\n}\n\n/**\n * Cleanup campaign test environment\n */\nexport async function cleanupCampaignTest(testName: string): Promise<void> {\n  await campaignTestController.cleanupAfterTest(testName);\n}\n\n/**\n * Create mock campaign configuration for testing\n */\nexport function createMockCampaignConfig(overrides?: Partial<CampaignConfig>): CampaignConfig {\n  const defaultConfig: CampaignConfig = {\n    phases: [\n      {\n        id: 'test-phase-1',\n        name: 'Test Phase 1',\n        description: 'Mock phase for testing',\n        tools: [\n          {\n            scriptPath: 'mock-script.js',\n            parameters: { maxFiles: 10, autoFix: true },\n            batchSize: 10,\n            safetyLevel: 'HIGH' as unknown,\n          },\n        ],\n        successCriteria: {\n          typeScriptErrors: 0,\n          lintingWarnings: 0,\n        },\n        safetyCheckpoints: [],\n      },\n    ],\n    safetySettings: {\n      maxFilesPerBatch: 10,\n      buildValidationFrequency: 5,\n      testValidationFrequency: 10,\n      corruptionDetectionEnabled: true,\n      automaticRollbackEnabled: true,\n      stashRetentionDays: 7,\n    },\n    progressTargets: {\n      typeScriptErrors: 0,\n      lintingWarnings: 0,\n      buildTime: 10,\n      enterpriseSystems: 200,\n    },\n    toolConfiguration: {\n      enhancedErrorFixer: 'mock-enhanced-fixer.js',\n      explicitAnyFixer: 'mock-any-fixer.js',\n      unusedVariablesFixer: 'mock-unused-fixer.js',\n      consoleStatementFixer: 'mock-console-fixer.js',\n    },\n  };\n\n  return { ...defaultConfig, ...overrides };\n}\n\n/**\n * Create mock progress metrics for testing\n */\nexport function createMockProgressMetrics(overrides?: Partial<ProgressMetrics>): ProgressMetrics {\n  const defaultMetrics: ProgressMetrics = {\n    typeScriptErrors: {\n      current: 50,\n      target: 0,\n      reduction: 36,\n      percentage: 42,\n    },\n    lintingWarnings: {\n      current: 2000,\n      target: 0,\n      reduction: 2506,\n      percentage: 56,\n    },\n    buildPerformance: {\n      currentTime: 8.5,\n      targetTime: 10,\n      cacheHitRate: 0.8,\n      memoryUsage: 45,\n    },\n    enterpriseSystems: {\n      current: 50,\n      target: 200,\n      transformedExports: 50,\n    },\n  };\n\n  return { ...defaultMetrics, ...overrides };\n}\n\n/**\n * Create mock safety event for testing\n */\nexport function createMockSafetyEvent(\n  type: SafetyEventType,\n  description: string,\n  severity: SafetyEventSeverity = SafetyEventSeverity.INFO,\n): SafetyEvent {\n  return {\n    type,\n    timestamp: new Date(),\n    description: `Mock: ${description}`,\n    severity,\n    action: 'MOCK_TEST_EVENT',\n  };\n}\n\n/**\n * Simulate campaign phase execution for testing\n */\nexport async function simulateCampaignPhase(\n  context: CampaignTestContext,\n  phase: CampaignPhase,\n  expectedResult?: Partial<PhaseResult>,\n): Promise<PhaseResult> {\n  const result = await context.controller.executePhase(phase);\n\n  // Validate result if expected result is provided\n  if (expectedResult) {\n    expect(result.success).toBe(expectedResult.success ?? true);\n    if (expectedResult.filesProcessed !== undefined) {\n      expect(result.filesProcessed).toBe(expectedResult.filesProcessed);\n    }\n    if (expectedResult.errorsFixed !== undefined) {\n      expect(result.errorsFixed).toBe(expectedResult.errorsFixed);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Simulate progress tracking for testing\n */\nexport async function simulateProgressTracking(\n  context: CampaignTestContext,\n  targetMetrics: Partial<ProgressMetrics>,\n  durationMs: number = 1000,\n): Promise<ProgressMetrics> {\n  if (context.testSafeTracker) {\n    await context.testSafeTracker.simulateProgress(targetMetrics, durationMs, 'test-simulation');\n    return await context.testSafeTracker.getProgressMetrics();\n  } else {\n    // Fallback to mock tracker\n    context.tracker.updateMockMetrics(targetMetrics);\n    return await context.tracker.getProgressMetrics();\n  }\n}\n\n/**\n * Validate campaign test isolation\n */\nexport function validateCampaignTestIsolation(context: CampaignTestContext): {\n  isValid: boolean;\n  issues: string[];\n  warnings: string[];\n} {\n  return context.testController.validateTestIsolation();\n}\n\n/**\n * Create test scenario for campaign operations\n */\nexport interface CampaignTestScenario {\n  name: string;\n  initialMetrics: ProgressMetrics;\n  targetMetrics: Partial<ProgressMetrics>;\n  expectedPhaseResults: Partial<PhaseResult>[];\n  expectedSafetyEvents: SafetyEventType[];\n  simulationDuration?: number;\n}\n\n/**\n * Execute a complete campaign test scenario\n */\nexport async function executeCampaignTestScenario(\n  scenario: CampaignTestScenario,\n  config?: Partial<CampaignConfig>,\n): Promise<{\n  context: CampaignTestContext;\n  results: PhaseResult[];\n  finalMetrics: ProgressMetrics;\n  safetyEvents: SafetyEvent[];\n}> {\n  // Setup test environment\n  const context = await setupCampaignTest({\n    testName: scenario.name,\n    customConfig: config,\n  });\n\n  try {\n    // Set initial metrics\n    context.testController.updateMockMetrics(scenario.initialMetrics, scenario.name);\n\n    // Execute phases\n    const campaignConfig = createMockCampaignConfig(config);\n    const results: PhaseResult[] = [];\n\n    for (let i = 0; i < campaignConfig.phases.length; i++) {\n      const phase = campaignConfig.phases[i];\n      const expectedResult = scenario.expectedPhaseResults[i] || {};\n\n      const result = await simulateCampaignPhase(context, phase, expectedResult);\n      results.push(result);\n    }\n\n    // Simulate progress to target metrics\n    const finalMetrics = await simulateProgressTracking(\n      context,\n      scenario.targetMetrics,\n      scenario.simulationDuration,\n    );\n\n    // Get safety events\n    const safetyEvents = context.controller.getSafetyEvents();\n\n    // Validate expected safety events\n    scenario.expectedSafetyEvents.forEach(expectedType => {\n      const hasEvent = safetyEvents.some(event => event.type === expectedType);\n      expect(hasEvent).toBe(true);\n    });\n\n    return {\n      context,\n      results,\n      finalMetrics,\n      safetyEvents,\n    };\n  } finally {\n    // Cleanup is handled by the caller or test framework\n  }\n}\n\n/**\n * Memory-safe test wrapper for campaign operations\n */\nexport async function withCampaignTestIsolation<T>(\n  testName: string,\n  testFn: (context: CampaignTestContext) => Promise<T>,\n  setup?: Partial<CampaignTestSetup>,\n): Promise<T> {\n  const context = await setupCampaignTest({\n    testName,\n    ...setup,\n  });\n\n  try {\n    return await testFn(context);\n  } finally {\n    await cleanupCampaignTest(testName);\n  }\n}\n\n/**\n * Validate campaign system memory usage during tests\n */\nexport function validateCampaignMemoryUsage(context: CampaignTestContext): {\n  isMemoryEfficient: boolean;\n  memoryStats: unknown;\n  recommendations: string[];\n} {\n  const recommendations: string[] = [];\n  let isMemoryEfficient = true;\n\n  // Check test-safe tracker memory usage\n  if (context.testSafeTracker) {\n    const memoryStats = context.testSafeTracker.getMemoryStatistics();\n\n    if (memoryStats && !memoryStats.memoryEfficient) {\n      isMemoryEfficient = false;\n      recommendations.push('Test-safe tracker memory usage is high');\n    }\n\n    return {\n      isMemoryEfficient,\n      memoryStats,\n      recommendations,\n    };\n  }\n\n  return {\n    isMemoryEfficient: true,\n    memoryStats: null,\n    recommendations: [],\n  };\n}\n\n/**\n * Create comprehensive test assertions for campaign operations\n */\nexport const campaignTestAssertions = {\n  /**\n   * Assert that campaign phase completed successfully\n   */\n  phaseCompletedSuccessfully: (result: PhaseResult) => {\n    expect(result.success).toBe(true);\n    expect(result.executionTime).toBeGreaterThan(0);\n    expect(result.safetyEvents).toBeDefined();\n  },\n\n  /**\n   * Assert that progress metrics improved\n   */\n  progressImproved: (initial: ProgressMetrics, final: ProgressMetrics) => {\n    expect(final.typeScriptErrors.current).toBeLessThanOrEqual(initial.typeScriptErrors.current);\n    expect(final.lintingWarnings.current).toBeLessThanOrEqual(initial.lintingWarnings.current);\n  },\n\n  /**\n   * Assert that safety events were recorded\n   */\n  safetyEventsRecorded: (events: SafetyEvent[], expectedTypes: SafetyEventType[]) => {\n    expectedTypes.forEach(expectedType => {\n      const hasEvent = events.some(event => event.type === expectedType);\n      expect(hasEvent).toBe(true);\n    });\n  },\n\n  /**\n   * Assert that test isolation is working\n   */\n  testIsolationActive: (context: CampaignTestContext) => {\n    const validation = validateCampaignTestIsolation(context);\n    expect(validation.isValid).toBe(true);\n    expect(validation.issues).toHaveLength(0);\n  },\n\n  /**\n   * Assert that memory usage is within acceptable limits\n   */\n  memoryUsageAcceptable: (context: CampaignTestContext) => {\n    const memoryValidation = validateCampaignMemoryUsage(context);\n    expect(memoryValidation.isMemoryEfficient).toBe(true);\n  },\n};\n\n/**\n * Common test data generators\n */\nexport const campaignTestData = {\n  /**\n   * Generate realistic TypeScript error reduction scenario\n   */\n  typeScriptErrorReduction: (): CampaignTestScenario => ({\n    name: 'typescript-error-reduction',\n    initialMetrics: createMockProgressMetrics({\n      typeScriptErrors: { current: 86, target: 0, reduction: 0, percentage: 0 },\n    }),\n    targetMetrics: {\n      typeScriptErrors: { current: 0, target: 0, reduction: 86, percentage: 100 },\n    },\n    expectedPhaseResults: [{ success: true, errorsFixed: 86 }],\n    expectedSafetyEvents: [\n      SafetyEventType.CHECKPOINT_CREATED,\n      SafetyEventType.CHECKPOINT_CREATED, // Start and end checkpoints\n    ],\n    simulationDuration: 2000,\n  }),\n\n  /**\n   * Generate linting warning cleanup scenario\n   */\n  lintingWarningCleanup: (): CampaignTestScenario => ({\n    name: 'linting-warning-cleanup',\n    initialMetrics: createMockProgressMetrics({\n      lintingWarnings: { current: 4506, target: 0, reduction: 0, percentage: 0 },\n    }),\n    targetMetrics: {\n      lintingWarnings: { current: 0, target: 0, reduction: 4506, percentage: 100 },\n    },\n    expectedPhaseResults: [{ success: true, warningsFixed: 4506 }],\n    expectedSafetyEvents: [SafetyEventType.CHECKPOINT_CREATED],\n    simulationDuration: 3000,\n  }),\n\n  /**\n   * Generate build performance optimization scenario\n   */\n  buildPerformanceOptimization: (): CampaignTestScenario => ({\n    name: 'build-performance-optimization',\n    initialMetrics: createMockProgressMetrics({\n      buildPerformance: { currentTime: 15, targetTime: 10, cacheHitRate: 0.6, memoryUsage: 80 },\n    }),\n    targetMetrics: {\n      buildPerformance: { currentTime: 8, targetTime: 10, cacheHitRate: 0.8, memoryUsage: 45 },\n    },\n    expectedPhaseResults: [{ success: true }],\n    expectedSafetyEvents: [SafetyEventType.CHECKPOINT_CREATED],\n    simulationDuration: 1500,\n  }),\n};\n\n// Functions are already exported at their declarations above\n"],"version":3}