{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/linting/LintingProgressTracker.ts","mappings":";AAAA;;;;;GAKG;;;AAEH,iDAAyC;AACzC,2BAA6D;AAC7D,2CAAwC;AAyDxC;;GAEG;AACH,MAAa,sBAAsB;IACzB,WAAW,GAAG,oCAAoC,CAAC;IACnD,WAAW,GAAG,oCAAoC,CAAC;IACnD,UAAU,GAAG,mCAAmC,CAAC;IAEzD;QACE,IAAI,CAAC,qBAAqB,EAAE,CAAC;IAC/B,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,cAAc;QAClB,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAE7B,IAAI;YACF,eAAM,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;YAE7C,8BAA8B;YAC9B,MAAM,UAAU,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC7C,MAAM,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;YAEpD,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;YAE7C,MAAM,WAAW,GAAmB;gBAClC,GAAG,OAAO;gBACV,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,kBAAkB,EAAE;oBAClB,aAAa;oBACb,WAAW,EAAE,IAAI,CAAC,cAAc,EAAE;oBAClC,YAAY,EAAE,IAAI,CAAC,qBAAqB,EAAE;iBAC3C;aACF,CAAC;YAEF,eAAe;YACf,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;YAE9B,eAAM,CAAC,IAAI,CAAC,8BAA8B,WAAW,CAAC,WAAW,eAAe,CAAC,CAAC;YAClF,OAAO,WAAW,CAAC;SACpB;QAAC,OAAO,KAAK,EAAE;YACd,eAAM,CAAC,KAAK,CAAC,mCAAmC,EAAE,KAAK,CAAC,CAAC;YACzD,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,sBAAsB;QAC1B,IAAI;YACF,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;YACnD,MAAM,eAAe,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAClD,MAAM,OAAO,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAEzC,MAAM,WAAW,GAAG,IAAI,CAAC,oBAAoB,CAAC,cAAc,EAAE,eAAe,CAAC,CAAC;YAC/E,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;YAC7C,MAAM,YAAY,GAAG,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,CAAC;YAE/D,MAAM,MAAM,GAA0B;gBACpC,cAAc;gBACd,eAAe;gBACf,WAAW;gBACX,MAAM;gBACN,YAAY;aACb,CAAC;YAEF,eAAM,CAAC,IAAI,CAAC,mCAAmC,CAAC,CAAC;YACjD,OAAO,MAAM,CAAC;SACf;QAAC,OAAO,KAAK,EAAE;YACd,eAAM,CAAC,KAAK,CAAC,mCAAmC,EAAE,KAAK,CAAC,CAAC;YACzD,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,yBAAyB,CAAC,YAAqC;QACnE,IAAI;YACF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,sBAAsB,EAAE,CAAC;YAEnD,sCAAsC;YACtC,MAAM,gBAAgB,GAAG;gBACvB,UAAU,EAAE,YAAY,CAAC,UAAU;gBACnC,KAAK,EAAE,YAAY,CAAC,KAAK;gBACzB,eAAe,EAAE,IAAI,CAAC,yBAAyB,CAAC,MAAM,EAAE,YAAY,CAAC;gBACrE,YAAY,EAAE,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,cAAc,CAAC;gBAC/D,cAAc,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;gBACvC,eAAe,EAAE,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC;aACtD,CAAC;YAEF,iCAAiC;YACjC,IAAI,CAAC,uBAAuB,CAAC,gBAAgB,CAAC,CAAC;YAE/C,kDAAkD;YAClD,IAAI,IAAI,CAAC,0BAA0B,CAAC,MAAM,EAAE,YAAY,CAAC,EAAE;gBACzD,MAAM,IAAI,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,CAAC;aACnD;YAED,eAAM,CAAC,IAAI,CAAC,sCAAsC,YAAY,CAAC,KAAK,EAAE,CAAC,CAAC;SACzE;QAAC,OAAO,KAAK,EAAE;YACd,eAAM,CAAC,KAAK,CAAC,yCAAyC,EAAE,KAAK,CAAC,CAAC;YAC/D,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAED;;OAEG;IACH,kBAAkB,CAAC,UAIlB;QACC,IAAI;YACF,MAAM,OAAO,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxC,IAAI,CAAC,OAAO,EAAE;gBACZ,eAAM,CAAC,IAAI,CAAC,kDAAkD,CAAC,CAAC;gBAChE,OAAO,KAAK,CAAC;aACd;YAED,MAAM,KAAK,GAAG;gBACZ,SAAS,EAAE,OAAO,CAAC,MAAM,IAAI,UAAU,CAAC,SAAS;gBACjD,WAAW,EAAE,OAAO,CAAC,QAAQ,IAAI,UAAU,CAAC,WAAW;gBACvD,eAAe,EAAE,OAAO,CAAC,kBAAkB,CAAC,aAAa,IAAI,UAAU,CAAC,gBAAgB;aACzF,CAAC;YAEF,MAAM,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;YAEhE,eAAM,CAAC,IAAI,CAAC,2BAA2B,EAAE;gBACvC,KAAK;gBACL,MAAM,EAAE,cAAc;gBACtB,OAAO,EAAE;oBACP,MAAM,EAAE,OAAO,CAAC,MAAM;oBACtB,QAAQ,EAAE,OAAO,CAAC,QAAQ;oBAC1B,aAAa,EAAE,OAAO,CAAC,kBAAkB,CAAC,aAAa;iBACxD;aACF,CAAC,CAAC;YAEH,OAAO,cAAc,CAAC;SACvB;QAAC,OAAO,KAAK,EAAE;YACd,eAAM,CAAC,KAAK,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC;YACvD,OAAO,KAAK,CAAC;SACd;IACH,CAAC;IAED;;OAEG;IACK,kBAAkB;QACxB,IAAI;YACF,iEAAiE;YACjE,MAAM,OAAO,GAAG,8CAA8C,CAAC;YAC/D,MAAM,MAAM,GAAG,IAAA,wBAAQ,EAAC,OAAO,EAAE;gBAC/B,QAAQ,EAAE,MAAM;gBAChB,KAAK,EAAE,MAAM;gBACb,SAAS,EAAE,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,cAAc;aAC3C,CAAC,CAAC;YAEH,OAAO,MAAM,CAAC;SACf;QAAC,OAAO,KAAU,EAAE;YACnB,0DAA0D;YAC1D,iDAAiD;YACjD,IAAI,KAAK,CAAC,MAAM,EAAE;gBAChB,OAAO,KAAK,CAAC,MAAM,CAAC;aACrB;YACD,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAED;;OAEG;IACK,kBAAkB,CAAC,MAAc;QACvC,IAAI;YACF,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YAEnC,IAAI,WAAW,GAAG,CAAC,CAAC;YACpB,IAAI,MAAM,GAAG,CAAC,CAAC;YACf,IAAI,QAAQ,GAAG,CAAC,CAAC;YACjB,IAAI,aAAa,GAAG,CAAC,CAAC;YACtB,MAAM,gBAAgB,GAA2B,EAAE,CAAC;YACpD,MAAM,kBAAkB,GAA2B,EAAE,CAAC;YACtD,MAAM,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC;YAEpC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAS,EAAE,EAAE;gBAC5B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAY,EAAE,EAAE;oBACrC,WAAW,EAAE,CAAC;oBAEd,IAAI,OAAO,CAAC,QAAQ,KAAK,CAAC,EAAE;wBAC1B,MAAM,EAAE,CAAC;wBACT,gBAAgB,CAAC,OAAO,CAAC,MAAM,IAAI,SAAS,CAAC,GAAG,CAAC,gBAAgB,CAAC,OAAO,CAAC,MAAM,IAAI,SAAS,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;qBAC1G;yBAAM;wBACL,QAAQ,EAAE,CAAC;wBACX,kBAAkB,CAAC,OAAO,CAAC,MAAM,IAAI,SAAS,CAAC,GAAG,CAAC,kBAAkB,CAAC,OAAO,CAAC,MAAM,IAAI,SAAS,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;qBAC9G;oBAED,IAAI,OAAO,CAAC,GAAG,EAAE;wBACf,aAAa,EAAE,CAAC;qBACjB;gBACH,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,OAAO;gBACL,WAAW;gBACX,MAAM;gBACN,QAAQ;gBACR,gBAAgB;gBAChB,kBAAkB;gBAClB,YAAY;gBACZ,aAAa;aACd,CAAC;SACH;QAAC,OAAO,KAAK,EAAE;YACd,eAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAC;YACrD,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAED;;OAEG;IACK,oBAAoB,CAAC,OAAuB,EAAE,QAAyB;QAC7E,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO;gBACL,kBAAkB,EAAE,CAAC;gBACrB,aAAa,EAAE,CAAC;gBAChB,eAAe,EAAE,CAAC;gBAClB,qBAAqB,EAAE,CAAC;aACzB,CAAC;SACH;QAED,MAAM,kBAAkB,GAAG,QAAQ,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;QACtE,MAAM,aAAa,GAAG,QAAQ,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;QACvD,MAAM,eAAe,GAAG,QAAQ,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QAC7D,MAAM,qBAAqB,GAAG,QAAQ,CAAC,WAAW,GAAG,CAAC;YACpD,CAAC,CAAC,CAAC,kBAAkB,GAAG,QAAQ,CAAC,WAAW,CAAC,GAAG,GAAG;YACnD,CAAC,CAAC,CAAC,CAAC;QAEN,OAAO;YACL,kBAAkB;YAClB,aAAa;YACb,eAAe;YACf,qBAAqB;SACtB,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,eAAe,CAAC,OAAyB;QAC/C,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;QACvB,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;QAChE,MAAM,YAAY,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;QACvE,MAAM,aAAa,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;QAEzE,MAAM,WAAW,GAAG,IAAI,CAAC,uBAAuB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QACrE,MAAM,SAAS,GAAG,IAAI,CAAC,uBAAuB,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;QACtE,MAAM,UAAU,GAAG,IAAI,CAAC,uBAAuB,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;QAExE,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC;IAChD,CAAC;IAED;;OAEG;IACK,uBAAuB,CAAC,OAAyB,EAAE,KAAW;QACpE,MAAM,aAAa,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,KAAK,CAAC,CAAC;QAC1E,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC;YAAE,OAAO,CAAC,CAAC;QAEvC,MAAM,MAAM,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;QAChC,MAAM,MAAM,GAAG,aAAa,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAEvD,OAAO,MAAM,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;IACjD,CAAC;IAED;;OAEG;IACK,oBAAoB,CAAC,OAAuB;QAClD,OAAO;YACL,UAAU,EAAE,OAAO,CAAC,MAAM,KAAK,CAAC;YAChC,sBAAsB,EAAE,OAAO,CAAC,QAAQ,GAAG,IAAI;YAC/C,qBAAqB,EAAE,OAAO,CAAC,kBAAkB,CAAC,aAAa,GAAG,KAAK,CAAC,WAAW;SACpF,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,yBAAyB,CAAC,MAA6B,EAAE,YAAqC;QACpG,MAAM,aAAa,GAAG,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC;QACxD,MAAM,eAAe,GAAG,YAAY,CAAC,eAAe,CAAC;QAErD,0EAA0E;QAC1E,MAAM,cAAc,GAAG,eAAe,CAAC;QACvC,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,cAAc,GAAG,aAAa,CAAC,GAAG,cAAc,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;QAEvG,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;OAEG;IACK,qBAAqB,CAAC,OAAuB;QACnD,MAAM,WAAW,GAAG,GAAG,CAAC;QACxB,MAAM,aAAa,GAAG,GAAG,CAAC;QAC1B,MAAM,iBAAiB,GAAG,GAAG,CAAC;QAE9B,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;QACrD,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,GAAG,CAAC,OAAO,CAAC,QAAQ,GAAG,EAAE,CAAC,CAAC,CAAC;QAChE,MAAM,gBAAgB,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,GAAG,CAAC,OAAO,CAAC,kBAAkB,CAAC,aAAa,GAAG,IAAI,CAAC,CAAC,CAAC;QAE9F,OAAO,CAAC,UAAU,GAAG,WAAW,CAAC,GAAG,CAAC,YAAY,GAAG,aAAa,CAAC,GAAG,CAAC,gBAAgB,GAAG,iBAAiB,CAAC,CAAC;IAC9G,CAAC;IAED;;OAEG;IACK,UAAU,CAAC,MAA6B;QAC9C,MAAM,EAAE,cAAc,EAAE,WAAW,EAAE,GAAG,MAAM,CAAC;QAE/C,IAAI,cAAc,CAAC,MAAM,GAAG,GAAG,IAAI,WAAW,CAAC,qBAAqB,GAAG,CAAC,EAAE,EAAE;YAC1E,OAAO,MAAM,CAAC;SACf;aAAM,IAAI,cAAc,CAAC,MAAM,GAAG,EAAE,IAAI,WAAW,CAAC,qBAAqB,GAAG,CAAC,EAAE;YAC9E,OAAO,QAAQ,CAAC;SACjB;aAAM;YACL,OAAO,KAAK,CAAC;SACd;IACH,CAAC;IAED;;OAEG;IACK,uBAAuB,CAAC,MAA6B;QAC3D,MAAM,eAAe,GAAa,EAAE,CAAC;QACrC,MAAM,EAAE,cAAc,EAAE,WAAW,EAAE,GAAG,MAAM,CAAC;QAE/C,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;YAC7B,eAAe,CAAC,IAAI,CAAC,wBAAwB,cAAc,CAAC,MAAM,mBAAmB,CAAC,CAAC;SACxF;QAED,IAAI,cAAc,CAAC,aAAa,GAAG,CAAC,EAAE;YACpC,eAAe,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,aAAa,6CAA6C,CAAC,CAAC;SACpG;QAED,IAAI,WAAW,CAAC,qBAAqB,GAAG,CAAC,EAAE;YACzC,eAAe,CAAC,IAAI,CAAC,0DAA0D,CAAC,CAAC;SAClF;QAED,IAAI,cAAc,CAAC,kBAAkB,CAAC,aAAa,GAAG,KAAK,EAAE;YAC3D,eAAe,CAAC,IAAI,CAAC,sDAAsD,CAAC,CAAC;SAC9E;QAED,OAAO,eAAe,CAAC;IACzB,CAAC;IAED;;OAEG;IACK,qBAAqB;QAC3B,IAAI;YACF,IAAA,wBAAQ,EAAC,wBAAwB,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;SACvD;QAAC,OAAO,KAAK,EAAE;YACd,gCAAgC;SACjC;IACH,CAAC;IAEO,WAAW,CAAC,OAAuB;QACzC,IAAI;YACF,IAAA,kBAAa,EAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;YAElE,yBAAyB;YACzB,MAAM,OAAO,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACzC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAEtB,6BAA6B;YAC7B,MAAM,cAAc,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;YAC3C,IAAA,kBAAa,EAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;SAC1E;QAAC,OAAO,KAAK,EAAE;YACd,eAAM,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;SAC9C;IACH,CAAC;IAEO,kBAAkB;QACxB,IAAI;YACF,IAAI,IAAA,eAAU,EAAC,IAAI,CAAC,WAAW,CAAC,EAAE;gBAChC,MAAM,IAAI,GAAG,IAAA,iBAAY,EAAC,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;gBACpD,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;aACzB;SACF;QAAC,OAAO,KAAK,EAAE;YACd,eAAM,CAAC,IAAI,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC;SACvD;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IAEO,gBAAgB;QACtB,OAAO,IAAI,CAAC,kBAAkB,EAAE,CAAC;IACnC,CAAC;IAEO,iBAAiB;QACvB,IAAI;YACF,IAAI,IAAA,eAAU,EAAC,IAAI,CAAC,WAAW,CAAC,EAAE;gBAChC,MAAM,IAAI,GAAG,IAAA,iBAAY,EAAC,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;gBACpD,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAChC,OAAO,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;aAC5C;SACF;QAAC,OAAO,KAAK,EAAE;YACd,eAAM,CAAC,IAAI,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;SACtD;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;IAEO,cAAc;QACpB,OAAO,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,KAAK;IAC5D,CAAC;IAEO,qBAAqB;QAC3B,qEAAqE;QACrE,gCAAgC;QAChC,OAAO,GAAG,CAAC,CAAC,qBAAqB;IACnC,CAAC;IAEO,uBAAuB,CAAC,IAAS;QACvC,IAAI;YACF,MAAM,eAAe,GAAG,yCAAyC,CAAC;YAClE,IAAA,kBAAa,EAAC,eAAe,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;SAC/D;QAAC,OAAO,KAAK,EAAE;YACd,eAAM,CAAC,KAAK,CAAC,yCAAyC,EAAE,KAAK,CAAC,CAAC;SAChE;IACH,CAAC;IAEO,0BAA0B,CAAC,MAA6B,EAAE,YAAqC;QACrG,kDAAkD;QAClD,OAAO,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,WAAW,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC;IAChE,CAAC;IAEO,KAAK,CAAC,oBAAoB,CAAC,IAAS;QAC1C,yDAAyD;QACzD,eAAM,CAAC,IAAI,CAAC,+BAA+B,EAAE,IAAI,CAAC,CAAC;IACrD,CAAC;CACF;AAxbD,wDAwbC","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/linting/LintingProgressTracker.ts"],"sourcesContent":["/**\n * Linting Progress Tracker\n * \n * Monitors and tracks linting error reduction progress, integrating with\n * the campaign system for comprehensive quality improvement tracking.\n */\n\nimport { execSync } from 'child_process';\nimport { writeFileSync, readFileSync, existsSync } from 'fs';\nimport { logger } from '@/utils/logger';\n\n/**\n * Linting metrics structure\n */\nexport interface LintingMetrics {\n  timestamp: Date;\n  totalIssues: number;\n  errors: number;\n  warnings: number;\n  errorsByCategory: Record<string, number>;\n  warningsByCategory: Record<string, number>;\n  filesCovered: number;\n  fixableIssues: number;\n  performanceMetrics: {\n    executionTime: number;\n    memoryUsage: number;\n    cacheHitRate: number;\n  };\n}\n\n/**\n * Linting progress report\n */\nexport interface LintingProgressReport {\n  currentMetrics: LintingMetrics;\n  previousMetrics?: LintingMetrics;\n  improvement: {\n    totalIssuesReduced: number;\n    errorsReduced: number;\n    warningsReduced: number;\n    percentageImprovement: number;\n  };\n  trends: {\n    last24Hours: number;\n    last7Days: number;\n    last30Days: number;\n  };\n  qualityGates: {\n    zeroErrors: boolean;\n    warningsUnderThreshold: boolean;\n    performanceAcceptable: boolean;\n  };\n}\n\n/**\n * Campaign integration data\n */\nexport interface CampaignIntegrationData {\n  campaignId?: string;\n  phase: string;\n  targetReduction: number;\n  currentProgress: number;\n  estimatedCompletion: Date;\n  safetyProtocols: string[];\n}\n\n/**\n * Linting Progress Tracker Class\n */\nexport class LintingProgressTracker {\n  private metricsFile = '.kiro/metrics/linting-metrics.json';\n  private historyFile = '.kiro/metrics/linting-history.json';\n  private configFile = '.kiro/metrics/linting-config.json';\n\n  constructor() {\n    this.ensureDirectoryExists();\n  }\n\n  /**\n   * Collect current linting metrics\n   */\n  async collectMetrics(): Promise<LintingMetrics> {\n    const startTime = Date.now();\n    \n    try {\n      logger.info('Collecting linting metrics...');\n      \n      // Run ESLint with JSON output\n      const lintOutput = this.runLintingAnalysis();\n      const metrics = this.parseLintingOutput(lintOutput);\n      \n      const executionTime = Date.now() - startTime;\n      \n      const fullMetrics: LintingMetrics = {\n        ...metrics,\n        timestamp: new Date(),\n        performanceMetrics: {\n          executionTime,\n          memoryUsage: this.getMemoryUsage(),\n          cacheHitRate: this.calculateCacheHitRate()\n        }\n      };\n\n      // Save metrics\n      this.saveMetrics(fullMetrics);\n      \n      logger.info(`Linting metrics collected: ${fullMetrics.totalIssues} total issues`);\n      return fullMetrics;\n    } catch (error) {\n      logger.error('Error collecting linting metrics:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate progress report\n   */\n  async generateProgressReport(): Promise<LintingProgressReport> {\n    try {\n      const currentMetrics = await this.collectMetrics();\n      const previousMetrics = this.getPreviousMetrics();\n      const history = this.getMetricsHistory();\n\n      const improvement = this.calculateImprovement(currentMetrics, previousMetrics);\n      const trends = this.calculateTrends(history);\n      const qualityGates = this.evaluateQualityGates(currentMetrics);\n\n      const report: LintingProgressReport = {\n        currentMetrics,\n        previousMetrics,\n        improvement,\n        trends,\n        qualityGates\n      };\n\n      logger.info('Linting progress report generated');\n      return report;\n    } catch (error) {\n      logger.error('Error generating progress report:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Integrate with campaign system\n   */\n  async integrateCampaignProgress(campaignData: CampaignIntegrationData): Promise<void> {\n    try {\n      const report = await this.generateProgressReport();\n      \n      // Calculate campaign-specific metrics\n      const campaignProgress = {\n        campaignId: campaignData.campaignId,\n        phase: campaignData.phase,\n        currentProgress: this.calculateCampaignProgress(report, campaignData),\n        qualityScore: this.calculateQualityScore(report.currentMetrics),\n        riskAssessment: this.assessRisk(report),\n        recommendations: this.generateRecommendations(report)\n      };\n\n      // Save campaign integration data\n      this.saveCampaignIntegration(campaignProgress);\n      \n      // Trigger campaign system notifications if needed\n      if (this.shouldNotifyCampaignSystem(report, campaignData)) {\n        await this.notifyCampaignSystem(campaignProgress);\n      }\n\n      logger.info(`Campaign integration completed for ${campaignData.phase}`);\n    } catch (error) {\n      logger.error('Error integrating with campaign system:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create quality gates for deployment\n   */\n  createQualityGates(thresholds: {\n    maxErrors: number;\n    maxWarnings: number;\n    maxExecutionTime: number;\n  }): boolean {\n    try {\n      const metrics = this.getLatestMetrics();\n      if (!metrics) {\n        logger.warn('No metrics available for quality gate evaluation');\n        return false;\n      }\n\n      const gates = {\n        errorGate: metrics.errors <= thresholds.maxErrors,\n        warningGate: metrics.warnings <= thresholds.maxWarnings,\n        performanceGate: metrics.performanceMetrics.executionTime <= thresholds.maxExecutionTime\n      };\n\n      const allGatesPassed = Object.values(gates).every(gate => gate);\n      \n      logger.info('Quality gates evaluation:', {\n        gates,\n        passed: allGatesPassed,\n        metrics: {\n          errors: metrics.errors,\n          warnings: metrics.warnings,\n          executionTime: metrics.performanceMetrics.executionTime\n        }\n      });\n\n      return allGatesPassed;\n    } catch (error) {\n      logger.error('Error evaluating quality gates:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Run linting analysis\n   */\n  private runLintingAnalysis(): string {\n    try {\n      // Run ESLint with JSON format and capture both stdout and stderr\n      const command = 'yarn lint --format json --max-warnings 10000';\n      const result = execSync(command, { \n        encoding: 'utf8',\n        stdio: 'pipe',\n        maxBuffer: 10 * 1024 * 1024 // 10MB buffer\n      });\n      \n      return result;\n    } catch (error: any) {\n      // ESLint returns non-zero exit code when issues are found\n      // The output is still valid JSON in error.stdout\n      if (error.stdout) {\n        return error.stdout;\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Parse ESLint JSON output\n   */\n  private parseLintingOutput(output: string): Omit<LintingMetrics, 'timestamp' | 'performanceMetrics'> {\n    try {\n      const results = JSON.parse(output);\n      \n      let totalIssues = 0;\n      let errors = 0;\n      let warnings = 0;\n      let fixableIssues = 0;\n      const errorsByCategory: Record<string, number> = {};\n      const warningsByCategory: Record<string, number> = {};\n      const filesCovered = results.length;\n\n      results.forEach((file: any) => {\n        file.messages.forEach((message: any) => {\n          totalIssues++;\n          \n          if (message.severity === 2) {\n            errors++;\n            errorsByCategory[message.ruleId || 'unknown'] = (errorsByCategory[message.ruleId || 'unknown'] || 0) + 1;\n          } else {\n            warnings++;\n            warningsByCategory[message.ruleId || 'unknown'] = (warningsByCategory[message.ruleId || 'unknown'] || 0) + 1;\n          }\n          \n          if (message.fix) {\n            fixableIssues++;\n          }\n        });\n      });\n\n      return {\n        totalIssues,\n        errors,\n        warnings,\n        errorsByCategory,\n        warningsByCategory,\n        filesCovered,\n        fixableIssues\n      };\n    } catch (error) {\n      logger.error('Error parsing linting output:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Calculate improvement metrics\n   */\n  private calculateImprovement(current: LintingMetrics, previous?: LintingMetrics) {\n    if (!previous) {\n      return {\n        totalIssuesReduced: 0,\n        errorsReduced: 0,\n        warningsReduced: 0,\n        percentageImprovement: 0\n      };\n    }\n\n    const totalIssuesReduced = previous.totalIssues - current.totalIssues;\n    const errorsReduced = previous.errors - current.errors;\n    const warningsReduced = previous.warnings - current.warnings;\n    const percentageImprovement = previous.totalIssues > 0 \n      ? (totalIssuesReduced / previous.totalIssues) * 100 \n      : 0;\n\n    return {\n      totalIssuesReduced,\n      errorsReduced,\n      warningsReduced,\n      percentageImprovement\n    };\n  }\n\n  /**\n   * Calculate trends from historical data\n   */\n  private calculateTrends(history: LintingMetrics[]) {\n    const now = new Date();\n    const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n    const sevenDaysAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n    const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n\n    const last24Hours = this.calculateTrendForPeriod(history, oneDayAgo);\n    const last7Days = this.calculateTrendForPeriod(history, sevenDaysAgo);\n    const last30Days = this.calculateTrendForPeriod(history, thirtyDaysAgo);\n\n    return { last24Hours, last7Days, last30Days };\n  }\n\n  /**\n   * Calculate trend for specific period\n   */\n  private calculateTrendForPeriod(history: LintingMetrics[], since: Date): number {\n    const recentMetrics = history.filter(m => new Date(m.timestamp) >= since);\n    if (recentMetrics.length < 2) return 0;\n\n    const oldest = recentMetrics[0];\n    const newest = recentMetrics[recentMetrics.length - 1];\n    \n    return oldest.totalIssues - newest.totalIssues;\n  }\n\n  /**\n   * Evaluate quality gates\n   */\n  private evaluateQualityGates(metrics: LintingMetrics) {\n    return {\n      zeroErrors: metrics.errors === 0,\n      warningsUnderThreshold: metrics.warnings < 1000, // Configurable threshold\n      performanceAcceptable: metrics.performanceMetrics.executionTime < 60000 // 1 minute\n    };\n  }\n\n  /**\n   * Calculate campaign progress\n   */\n  private calculateCampaignProgress(report: LintingProgressReport, campaignData: CampaignIntegrationData): number {\n    const currentIssues = report.currentMetrics.totalIssues;\n    const targetReduction = campaignData.targetReduction;\n    \n    // Assume we started with some baseline (could be stored in campaign data)\n    const baselineIssues = targetReduction;\n    const progress = Math.max(0, Math.min(100, ((baselineIssues - currentIssues) / baselineIssues) * 100));\n    \n    return progress;\n  }\n\n  /**\n   * Calculate quality score\n   */\n  private calculateQualityScore(metrics: LintingMetrics): number {\n    const errorWeight = 0.6;\n    const warningWeight = 0.3;\n    const performanceWeight = 0.1;\n    \n    const errorScore = Math.max(0, 100 - metrics.errors);\n    const warningScore = Math.max(0, 100 - (metrics.warnings / 10));\n    const performanceScore = Math.max(0, 100 - (metrics.performanceMetrics.executionTime / 1000));\n    \n    return (errorScore * errorWeight) + (warningScore * warningWeight) + (performanceScore * performanceWeight);\n  }\n\n  /**\n   * Assess risk based on metrics\n   */\n  private assessRisk(report: LintingProgressReport): 'low' | 'medium' | 'high' {\n    const { currentMetrics, improvement } = report;\n    \n    if (currentMetrics.errors > 100 || improvement.percentageImprovement < -10) {\n      return 'high';\n    } else if (currentMetrics.errors > 10 || improvement.percentageImprovement < 0) {\n      return 'medium';\n    } else {\n      return 'low';\n    }\n  }\n\n  /**\n   * Generate recommendations\n   */\n  private generateRecommendations(report: LintingProgressReport): string[] {\n    const recommendations: string[] = [];\n    const { currentMetrics, improvement } = report;\n    \n    if (currentMetrics.errors > 0) {\n      recommendations.push(`Focus on eliminating ${currentMetrics.errors} remaining errors`);\n    }\n    \n    if (currentMetrics.fixableIssues > 0) {\n      recommendations.push(`${currentMetrics.fixableIssues} issues can be auto-fixed with ESLint --fix`);\n    }\n    \n    if (improvement.percentageImprovement < 0) {\n      recommendations.push('Quality regression detected - investigate recent changes');\n    }\n    \n    if (currentMetrics.performanceMetrics.executionTime > 30000) {\n      recommendations.push('Consider optimizing linting performance with caching');\n    }\n    \n    return recommendations;\n  }\n\n  /**\n   * Utility methods\n   */\n  private ensureDirectoryExists(): void {\n    try {\n      execSync('mkdir -p .kiro/metrics', { stdio: 'pipe' });\n    } catch (error) {\n      // Directory might already exist\n    }\n  }\n\n  private saveMetrics(metrics: LintingMetrics): void {\n    try {\n      writeFileSync(this.metricsFile, JSON.stringify(metrics, null, 2));\n      \n      // Also append to history\n      const history = this.getMetricsHistory();\n      history.push(metrics);\n      \n      // Keep only last 100 entries\n      const trimmedHistory = history.slice(-100);\n      writeFileSync(this.historyFile, JSON.stringify(trimmedHistory, null, 2));\n    } catch (error) {\n      logger.error('Error saving metrics:', error);\n    }\n  }\n\n  private getPreviousMetrics(): LintingMetrics | undefined {\n    try {\n      if (existsSync(this.metricsFile)) {\n        const data = readFileSync(this.metricsFile, 'utf8');\n        return JSON.parse(data);\n      }\n    } catch (error) {\n      logger.warn('Error reading previous metrics:', error);\n    }\n    return undefined;\n  }\n\n  private getLatestMetrics(): LintingMetrics | undefined {\n    return this.getPreviousMetrics();\n  }\n\n  private getMetricsHistory(): LintingMetrics[] {\n    try {\n      if (existsSync(this.historyFile)) {\n        const data = readFileSync(this.historyFile, 'utf8');\n        const parsed = JSON.parse(data);\n        return Array.isArray(parsed) ? parsed : [];\n      }\n    } catch (error) {\n      logger.warn('Error reading metrics history:', error);\n    }\n    return [];\n  }\n\n  private getMemoryUsage(): number {\n    return process.memoryUsage().heapUsed / 1024 / 1024; // MB\n  }\n\n  private calculateCacheHitRate(): number {\n    // This would need to be implemented based on ESLint cache statistics\n    // For now, return a placeholder\n    return 0.8; // 80% cache hit rate\n  }\n\n  private saveCampaignIntegration(data: any): void {\n    try {\n      const integrationFile = '.kiro/metrics/campaign-integration.json';\n      writeFileSync(integrationFile, JSON.stringify(data, null, 2));\n    } catch (error) {\n      logger.error('Error saving campaign integration data:', error);\n    }\n  }\n\n  private shouldNotifyCampaignSystem(report: LintingProgressReport, campaignData: CampaignIntegrationData): boolean {\n    // Notify if significant improvement or regression\n    return Math.abs(report.improvement.percentageImprovement) > 5;\n  }\n\n  private async notifyCampaignSystem(data: any): Promise<void> {\n    // This would integrate with the existing campaign system\n    logger.info('Campaign system notification:', data);\n  }\n}"],"version":3}