191fe32c55020d3ca8da6b28330e215b
"use strict";
/**
 * Campaign Test Utilities
 *
 * Comprehensive utilities for testing campaign system functionality
 * with proper isolation and memory management.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.campaignTestData = exports.campaignTestAssertions = exports.validateCampaignMemoryUsage = exports.withCampaignTestIsolation = exports.executeCampaignTestScenario = exports.validateCampaignTestIsolation = exports.simulateProgressTracking = exports.simulateCampaignPhase = exports.createMockSafetyEvent = exports.createMockProgressMetrics = exports.createMockCampaignConfig = exports.cleanupCampaignTest = exports.setupCampaignTest = void 0;
const campaign_1 = require("../../types/campaign");
const CampaignTestController_1 = require("./CampaignTestController");
/**
 * Setup campaign test environment with proper isolation
 */
async function setupCampaignTest(setup) {
    const { testName, enableMemoryMonitoring = true, preventActualBuilds = true, preventGitOperations = true, mockProgressTracking = true, simulateRealProgress: _simulateRealProgress = false, customConfig: _customConfig, } = setup;
    // Initialize test controller with configuration
    await CampaignTestController_1.campaignTestController.initializeForTest(testName, {
        pauseProgressTracking: mockProgressTracking,
        preventBuildExecution: preventActualBuilds,
        preventGitOperations,
        enableMemoryMonitoring,
        isolateFileSystem: false,
        mockExternalAPIs: true,
    });
    // Pause campaign operations for test isolation
    await CampaignTestController_1.campaignTestController.pauseCampaignForTest(testName);
    // Get mock instances
    const mockInstances = CampaignTestController_1.campaignTestController.getMockInstances();
    const testSafeTracker = CampaignTestController_1.campaignTestController.getTestSafeTracker();
    // Validate that all required instances are available
    if (!mockInstances.controller || !mockInstances.tracker || !mockInstances.safety) {
        throw new Error('Failed to initialize campaign mock instances');
    }
    return {
        controller: mockInstances.controller,
        tracker: mockInstances.tracker,
        safety: mockInstances.safety,
        testSafeTracker,
        testController: CampaignTestController_1.campaignTestController,
    };
}
exports.setupCampaignTest = setupCampaignTest;
/**
 * Cleanup campaign test environment
 */
async function cleanupCampaignTest(testName) {
    await CampaignTestController_1.campaignTestController.cleanupAfterTest(testName);
}
exports.cleanupCampaignTest = cleanupCampaignTest;
/**
 * Create mock campaign configuration for testing
 */
function createMockCampaignConfig(overrides) {
    const defaultConfig = {
        phases: [
            {
                id: 'test-phase-1',
                name: 'Test Phase 1',
                description: 'Mock phase for testing',
                tools: [
                    {
                        scriptPath: 'mock-script.js',
                        parameters: { maxFiles: 10, autoFix: true },
                        batchSize: 10,
                        safetyLevel: 'HIGH',
                    },
                ],
                successCriteria: {
                    typeScriptErrors: 0,
                    lintingWarnings: 0,
                },
                safetyCheckpoints: [],
            },
        ],
        safetySettings: {
            maxFilesPerBatch: 10,
            buildValidationFrequency: 5,
            testValidationFrequency: 10,
            corruptionDetectionEnabled: true,
            automaticRollbackEnabled: true,
            stashRetentionDays: 7,
        },
        progressTargets: {
            typeScriptErrors: 0,
            lintingWarnings: 0,
            buildTime: 10,
            enterpriseSystems: 200,
        },
        toolConfiguration: {
            enhancedErrorFixer: 'mock-enhanced-fixer.js',
            explicitAnyFixer: 'mock-any-fixer.js',
            unusedVariablesFixer: 'mock-unused-fixer.js',
            consoleStatementFixer: 'mock-console-fixer.js',
        },
    };
    return { ...defaultConfig, ...overrides };
}
exports.createMockCampaignConfig = createMockCampaignConfig;
/**
 * Create mock progress metrics for testing
 */
function createMockProgressMetrics(overrides) {
    const defaultMetrics = {
        typeScriptErrors: {
            current: 50,
            target: 0,
            reduction: 36,
            percentage: 42,
        },
        lintingWarnings: {
            current: 2000,
            target: 0,
            reduction: 2506,
            percentage: 56,
        },
        buildPerformance: {
            currentTime: 8.5,
            targetTime: 10,
            cacheHitRate: 0.8,
            memoryUsage: 45,
        },
        enterpriseSystems: {
            current: 50,
            target: 200,
            transformedExports: 50,
        },
    };
    return { ...defaultMetrics, ...overrides };
}
exports.createMockProgressMetrics = createMockProgressMetrics;
/**
 * Create mock safety event for testing
 */
function createMockSafetyEvent(type, description, severity = campaign_1.SafetyEventSeverity.INFO) {
    return {
        type,
        timestamp: new Date(),
        description: `Mock: ${description}`,
        severity,
        action: 'MOCK_TEST_EVENT',
    };
}
exports.createMockSafetyEvent = createMockSafetyEvent;
/**
 * Simulate campaign phase execution for testing
 */
async function simulateCampaignPhase(context, phase, expectedResult) {
    const result = await context.controller.executePhase(phase);
    // Validate result if expected result is provided
    if (expectedResult) {
        expect(result.success).toBe(expectedResult.success ?? true);
        if (expectedResult.filesProcessed !== undefined) {
            expect(result.filesProcessed).toBe(expectedResult.filesProcessed);
        }
        if (expectedResult.errorsFixed !== undefined) {
            expect(result.errorsFixed).toBe(expectedResult.errorsFixed);
        }
    }
    return result;
}
exports.simulateCampaignPhase = simulateCampaignPhase;
/**
 * Simulate progress tracking for testing
 */
async function simulateProgressTracking(context, targetMetrics, durationMs = 1000) {
    if (context.testSafeTracker) {
        await context.testSafeTracker.simulateProgress(targetMetrics, durationMs, 'test-simulation');
        return await context.testSafeTracker.getProgressMetrics();
    }
    else {
        // Fallback to mock tracker
        context.tracker.updateMockMetrics(targetMetrics);
        return await context.tracker.getProgressMetrics();
    }
}
exports.simulateProgressTracking = simulateProgressTracking;
/**
 * Validate campaign test isolation
 */
function validateCampaignTestIsolation(context) {
    return context.testController.validateTestIsolation();
}
exports.validateCampaignTestIsolation = validateCampaignTestIsolation;
/**
 * Execute a complete campaign test scenario
 */
async function executeCampaignTestScenario(scenario, config) {
    // Setup test environment
    const context = await setupCampaignTest({
        testName: scenario.name,
        customConfig: config,
    });
    try {
        // Set initial metrics
        context.testController.updateMockMetrics(scenario.initialMetrics, scenario.name);
        // Execute phases
        const campaignConfig = createMockCampaignConfig(config);
        const results = [];
        for (let i = 0; i < campaignConfig.phases.length; i++) {
            const phase = campaignConfig.phases[i];
            const expectedResult = scenario.expectedPhaseResults[i] || {};
            const result = await simulateCampaignPhase(context, phase, expectedResult);
            results.push(result);
        }
        // Simulate progress to target metrics
        const finalMetrics = await simulateProgressTracking(context, scenario.targetMetrics, scenario.simulationDuration);
        // Get safety events
        const safetyEvents = context.controller.getSafetyEvents();
        // Validate expected safety events
        scenario.expectedSafetyEvents.forEach(expectedType => {
            const hasEvent = safetyEvents.some(event => event.type === expectedType);
            expect(hasEvent).toBe(true);
        });
        return {
            context,
            results,
            finalMetrics,
            safetyEvents,
        };
    }
    finally {
        // Cleanup is handled by the caller or test framework
    }
}
exports.executeCampaignTestScenario = executeCampaignTestScenario;
/**
 * Memory-safe test wrapper for campaign operations
 */
async function withCampaignTestIsolation(testName, testFn, setup) {
    const context = await setupCampaignTest({
        testName,
        ...setup,
    });
    try {
        return await testFn(context);
    }
    finally {
        await cleanupCampaignTest(testName);
    }
}
exports.withCampaignTestIsolation = withCampaignTestIsolation;
/**
 * Validate campaign system memory usage during tests
 */
function validateCampaignMemoryUsage(context) {
    const recommendations = [];
    let isMemoryEfficient = true;
    // Check test-safe tracker memory usage
    if (context.testSafeTracker) {
        const memoryStats = context.testSafeTracker.getMemoryStatistics();
        if (memoryStats && !memoryStats.memoryEfficient) {
            isMemoryEfficient = false;
            recommendations.push('Test-safe tracker memory usage is high');
        }
        return {
            isMemoryEfficient,
            memoryStats,
            recommendations,
        };
    }
    return {
        isMemoryEfficient: true,
        memoryStats: null,
        recommendations: [],
    };
}
exports.validateCampaignMemoryUsage = validateCampaignMemoryUsage;
/**
 * Create comprehensive test assertions for campaign operations
 */
exports.campaignTestAssertions = {
    /**
     * Assert that campaign phase completed successfully
     */
    phaseCompletedSuccessfully: (result) => {
        expect(result.success).toBe(true);
        expect(result.executionTime).toBeGreaterThan(0);
        expect(result.safetyEvents).toBeDefined();
    },
    /**
     * Assert that progress metrics improved
     */
    progressImproved: (initial, final) => {
        expect(final.typeScriptErrors.current).toBeLessThanOrEqual(initial.typeScriptErrors.current);
        expect(final.lintingWarnings.current).toBeLessThanOrEqual(initial.lintingWarnings.current);
    },
    /**
     * Assert that safety events were recorded
     */
    safetyEventsRecorded: (events, expectedTypes) => {
        expectedTypes.forEach(expectedType => {
            const hasEvent = events.some(event => event.type === expectedType);
            expect(hasEvent).toBe(true);
        });
    },
    /**
     * Assert that test isolation is working
     */
    testIsolationActive: (context) => {
        const validation = validateCampaignTestIsolation(context);
        expect(validation.isValid).toBe(true);
        expect(validation.issues).toHaveLength(0);
    },
    /**
     * Assert that memory usage is within acceptable limits
     */
    memoryUsageAcceptable: (context) => {
        const memoryValidation = validateCampaignMemoryUsage(context);
        expect(memoryValidation.isMemoryEfficient).toBe(true);
    },
};
/**
 * Common test data generators
 */
exports.campaignTestData = {
    /**
     * Generate realistic TypeScript error reduction scenario
     */
    typeScriptErrorReduction: () => ({
        name: 'typescript-error-reduction',
        initialMetrics: createMockProgressMetrics({
            typeScriptErrors: { current: 86, target: 0, reduction: 0, percentage: 0 },
        }),
        targetMetrics: {
            typeScriptErrors: { current: 0, target: 0, reduction: 86, percentage: 100 },
        },
        expectedPhaseResults: [{ success: true, errorsFixed: 86 }],
        expectedSafetyEvents: [
            campaign_1.SafetyEventType.CHECKPOINT_CREATED,
            campaign_1.SafetyEventType.CHECKPOINT_CREATED, // Start and end checkpoints
        ],
        simulationDuration: 2000,
    }),
    /**
     * Generate linting warning cleanup scenario
     */
    lintingWarningCleanup: () => ({
        name: 'linting-warning-cleanup',
        initialMetrics: createMockProgressMetrics({
            lintingWarnings: { current: 4506, target: 0, reduction: 0, percentage: 0 },
        }),
        targetMetrics: {
            lintingWarnings: { current: 0, target: 0, reduction: 4506, percentage: 100 },
        },
        expectedPhaseResults: [{ success: true, warningsFixed: 4506 }],
        expectedSafetyEvents: [campaign_1.SafetyEventType.CHECKPOINT_CREATED],
        simulationDuration: 3000,
    }),
    /**
     * Generate build performance optimization scenario
     */
    buildPerformanceOptimization: () => ({
        name: 'build-performance-optimization',
        initialMetrics: createMockProgressMetrics({
            buildPerformance: { currentTime: 15, targetTime: 10, cacheHitRate: 0.6, memoryUsage: 80 },
        }),
        targetMetrics: {
            buildPerformance: { currentTime: 8, targetTime: 10, cacheHitRate: 0.8, memoryUsage: 45 },
        },
        expectedPhaseResults: [{ success: true }],
        expectedSafetyEvents: [campaign_1.SafetyEventType.CHECKPOINT_CREATED],
        simulationDuration: 1500,
    }),
};
// Functions are already exported at their declarations above
//# sourceMappingURL=data:application/json;charset=utf-8;base64,