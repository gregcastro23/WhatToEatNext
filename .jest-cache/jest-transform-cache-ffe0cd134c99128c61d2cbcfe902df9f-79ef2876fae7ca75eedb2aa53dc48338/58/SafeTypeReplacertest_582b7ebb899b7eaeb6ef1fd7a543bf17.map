{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/unintentional-any-elimination/__tests__/SafeTypeReplacer.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/unintentional-any-elimination/__tests__/SafeTypeReplacer.test.ts"],"sourcesContent":["/**\n * SafeTypeReplacer Tests\n * Comprehensive test suite for the Safe Type Replacer system\n */\n\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { SafeTypeReplacer } from '../SafeTypeReplacer';\nimport { ClassificationContext, CodeDomain, TypeReplacement } from '../types';\n\n// Mock execSync for TypeScript compilation tests\njest.mock('child_process');\nconst mockExecSync = execSync as jest.MockedFunction<typeof execSync>;\n\n// Mock fs for file operations\njest.mock('fs');\nconst mockFs = fs as jest.Mocked<typeof fs>;\n\n// Mock SafetyValidator\njest.mock('../SafetyValidator', () => ({\n  SafetyValidator: jest.fn().mockImplementation(() => ({\n    calculateSafetyScore: jest.fn().mockReturnValue({\n      isValid: true,\n      safetyScore: 0.9,\n      validationErrors: [],\n      warnings: [],\n      recommendations: []\n    }),\n    validateTypeScriptCompilation: jest.fn().mockResolvedValue({\n      buildSuccessful: true,\n      compilationErrors: [],\n      lintingWarnings: [],\n      performanceMetrics: { buildTime: 100, memoryUsage: 1000000 }\n    }),\n    validateBuildAfterBatch: jest.fn().mockResolvedValue({\n      buildSuccessful: true,\n      compilationErrors: [],\n      lintingWarnings: [],\n      performanceMetrics: { buildTime: 100, memoryUsage: 1000000 }\n    }),\n    validateRollbackCapability: jest.fn().mockResolvedValue({\n      canRollback: true,\n      backupIntegrity: true,\n      rollbackErrors: [],\n      restorationVerified: true\n    }),\n    updateSafetyThresholds: jest.fn()\n  }))\n}));\n\ndescribe('SafeTypeReplacer', () => {\n  let replacer: SafeTypeReplacer;\n  let testBackupDir: string;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    testBackupDir = './.test-backups';\n    replacer = new SafeTypeReplacer(testBackupDir, 0.7, 30000, 3);\n\n    // Mock fs.existsSync to return false for backup directory initially\n    mockFs.existsSync.mockImplementation((path: any) => {\n      if (path === testBackupDir) return false;\n      return true; // Assume other files exist\n    });\n\n    // Mock fs.mkdirSync\n    mockFs.mkdirSync.mockImplementation(() => undefined as any);\n\n    // Mock fs.readFileSync and writeFileSync\n    mockFs.readFileSync.mockImplementation(() => 'const items: any[] = [];');\n    mockFs.writeFileSync.mockImplementation(() => undefined);\n\n    // Mock successful TypeScript compilation by default\n    mockExecSync.mockImplementation(() => '');\n  });\n\n  describe('Constructor and Initialization', () => {\n    test('creates backup directory if it does not exist', () => {\n      expect(mockFs.mkdirSync).toHaveBeenCalledWith(testBackupDir, { recursive: true });\n    });\n\n    test('initializes with default strategies', () => {\n      const strategies = replacer.getStrategies();\n      expect(strategies).toHaveLength(10);\n      expect(strategies[0].priority).toBe(1); // Array type strategy should be first\n    });\n\n    test('allows custom configuration', () => {\n      const customReplacer = new SafeTypeReplacer('.custom-backup', 0.8, 60000, 5);\n      expect(customReplacer.getBackupDirectory()).toBe('.custom-backup');\n    });\n  });\n\n  describe('Single Replacement Operations', () => {\n    test('successfully replaces array types', async () => {\n      const replacement: TypeReplacement = {\n        original: 'any[]',\n        replacement: 'unknown[]',\n        filePath: 'test.ts',\n        lineNumber: 1,\n        confidence: 0.9,\n        validationRequired: true\n      };\n\n      mockFs.readFileSync.mockReturnValue('const items: any[] = [];');\n\n      const result = await replacer.applyReplacement(replacement);\n\n      expect(result.success).toBe(true);\n      expect(result.appliedReplacements).toHaveLength(1);\n      expect(result.failedReplacements).toHaveLength(0);\n      expect(result.rollbackPerformed).toBe(false);\n    });\n\n    test('handles low safety score rejection', async () => {\n      const replacement: TypeReplacement = {\n        original: 'any',\n        replacement: 'string',\n        filePath: 'test.ts',\n        lineNumber: 1,\n        confidence: 0.3, // Low confidence\n        validationRequired: true\n      };\n\n      const result = await replacer.applyReplacement(replacement);\n\n      expect(result.success).toBe(false);\n      expect(result.failedReplacements).toHaveLength(1);\n      expect(result.compilationErrors[0]).toContain('Safety score');\n    });\n\n    test('rolls back on TypeScript compilation failure', async () => {\n      const replacement: TypeReplacement = {\n        original: 'any[]',\n        replacement: 'unknown[]',\n        filePath: 'test.ts',\n        lineNumber: 1,\n        confidence: 0.9,\n        validationRequired: true\n      };\n\n      // Mock compilation failure\n      mockExecSync.mockImplementation(() => {\n        const error = new Error('Compilation failed') as any;\n        error.stdout = 'error TS2322: Type mismatch';\n        throw error;\n      });\n\n      const result = await replacer.applyReplacement(replacement);\n\n      expect(result.success).toBe(false);\n      expect(result.rollbackPerformed).toBe(true);\n      expect(result.compilationErrors).toContain('error TS2322: Type mismatch');\n    });\n\n    test('handles invalid line numbers', async () => {\n      const replacement: TypeReplacement = {\n        original: 'any[]',\n        replacement: 'unknown[]',\n        filePath: 'test.ts',\n        lineNumber: 999, // Invalid line number\n        confidence: 0.9,\n        validationRequired: true\n      };\n\n      mockFs.readFileSync.mockReturnValue('const items: any[] = [];'); // Only 1 line\n\n      const result = await replacer.applyReplacement(replacement);\n\n      expect(result.success).toBe(false);\n      expect(result.compilationErrors[0]).toContain('Invalid line number');\n    });\n\n    test('handles pattern not found in line', async () => {\n      const replacement: TypeReplacement = {\n        original: 'string[]',\n        replacement: 'unknown[]',\n        filePath: 'test.ts',\n        lineNumber: 1,\n        confidence: 0.9,\n        validationRequired: true\n      };\n\n      mockFs.readFileSync.mockReturnValue('const items: any[] = [];'); // Pattern doesn't match\n\n      const result = await replacer.applyReplacement(replacement);\n\n      expect(result.success).toBe(false);\n      expect(result.compilationErrors[0]).toContain('Pattern \"string[]\" not found');\n    });\n  });\n\n  describe('Batch Processing', () => {\n    test('processes multiple replacements successfully', async () => {\n      const replacements: TypeReplacement[] = [\n        {\n          original: 'any[]',\n          replacement: 'unknown[]',\n          filePath: 'test1.ts',\n          lineNumber: 1,\n          confidence: 0.9,\n          validationRequired: true\n        },\n        {\n          original: 'Record<string, any>',\n          replacement: 'Record<string, unknown>',\n          filePath: 'test2.ts',\n          lineNumber: 1,\n          confidence: 0.8,\n          validationRequired: true\n        }\n      ];\n\n      mockFs.readFileSync.mockImplementation((filePath: any) => {\n        if (filePath.includes('test1.ts')) return 'const items: any[] = [];';\n        if (filePath.includes('test2.ts')) return 'const data: Record<string, any> = {};';\n        return 'backup content';\n      });\n\n      const result = await replacer.processBatch(replacements);\n\n      expect(result.success).toBe(true);\n      expect(result.appliedReplacements).toHaveLength(2);\n      expect(result.failedReplacements).toHaveLength(0);\n    });\n\n    test('rolls back all changes on overall compilation failure', async () => {\n      const replacements: TypeReplacement[] = [\n        {\n          original: 'any[]',\n          replacement: 'unknown[]',\n          filePath: 'test1.ts',\n          lineNumber: 1,\n          confidence: 0.9,\n          validationRequired: true\n        }\n      ];\n\n      // Mock overall compilation to fail\n      mockExecSync.mockImplementation(() => {\n        const error = new Error('Overall compilation failed') as any;\n        error.stdout = 'error TS2322: Overall type error';\n        throw error;\n      });\n\n      const result = await replacer.processBatch(replacements);\n\n      expect(result.success).toBe(false);\n      expect(result.rollbackPerformed).toBe(true);\n      expect(result.compilationErrors).toContain('error TS2322: Overall type error');\n    });\n\n    test('groups replacements by file correctly', async () => {\n      const replacements: TypeReplacement[] = [\n        {\n          original: 'any[]',\n          replacement: 'unknown[]',\n          filePath: 'test.ts',\n          lineNumber: 2,\n          confidence: 0.9,\n          validationRequired: true\n        },\n        {\n          original: 'any',\n          replacement: 'unknown',\n          filePath: 'test.ts',\n          lineNumber: 1,\n          confidence: 0.8,\n          validationRequired: true\n        }\n      ];\n\n      mockFs.readFileSync.mockReturnValue('const x: any = 1;\\nconst items: any[] = [];');\n\n      const result = await replacer.processBatch(replacements);\n\n      expect(result.success).toBe(true);\n      expect(result.appliedReplacements).toHaveLength(2);\n    });\n  });\n\n  describe('Safety Score Calculation', () => {\n    test('calculates higher scores for array replacements', () => {\n      const replacement: TypeReplacement = {\n        original: 'any[]',\n        replacement: 'unknown[]',\n        filePath: 'test.ts',\n        lineNumber: 1,\n        confidence: 0.7,\n        validationRequired: true\n      };\n\n      // Access private method through any cast for testing\n      const score = (replacer as any).calculateSafetyScore(replacement);\n      expect(score).toBeGreaterThan(0.7); // Should be boosted for array replacement\n    });\n\n    test('calculates lower scores for error handling contexts', () => {\n      const replacement: TypeReplacement = {\n        original: 'catch (error: any)',\n        replacement: 'catch (error: unknown)',\n        filePath: 'test.ts',\n        lineNumber: 1,\n        confidence: 0.8,\n        validationRequired: true\n      };\n\n      const score = (replacer as any).calculateSafetyScore(replacement);\n      expect(score).toBeLessThan(0.8); // Should be reduced for error context\n    });\n\n    test('boosts scores for test files', () => {\n      const replacement: TypeReplacement = {\n        original: 'any',\n        replacement: 'unknown',\n        filePath: 'test.test.ts',\n        lineNumber: 1,\n        confidence: 0.7,\n        validationRequired: true\n      };\n\n      const score = (replacer as any).calculateSafetyScore(replacement);\n      expect(score).toBeGreaterThan(0.7); // Should be boosted for test files\n    });\n  });\n\n  describe('Rollback Verification', () => {\n    test('verifies rollback capability successfully', async () => {\n      const filePath = 'test.ts';\n      const backupPath = 'backup.ts';\n\n      mockFs.readFileSync.mockImplementation((path: any) => {\n        if (path === filePath) return 'modified content';\n        if (path === backupPath) return 'original content';\n        return '';\n      });\n\n      const result = await (replacer as any).verifyRollbackCapability(filePath, backupPath);\n      expect(result.success).toBe(true);\n    });\n\n    test('detects missing backup file', async () => {\n      const filePath = 'test.ts';\n      const backupPath = 'missing-backup.ts';\n\n      mockFs.existsSync.mockImplementation((path: any) => {\n        return path !== backupPath; // Backup doesn't exist\n      });\n\n      const result = await (replacer as any).verifyRollbackCapability(filePath, backupPath);\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('Backup file does not exist');\n    });\n  });\n\n  describe('Strategy Management', () => {\n    test('allows adding custom strategies', () => {\n      const customStrategy = {\n        pattern: /custom_pattern/g,\n        replacement: () => 'custom_replacement',\n        validator: () => true,\n        priority: 0\n      };\n\n      replacer.addStrategy(customStrategy);\n      const strategies = replacer.getStrategies();\n\n      expect(strategies[0]).toBe(customStrategy); // Should be first due to priority 0\n    });\n\n    test('maintains strategy priority order', () => {\n      const strategies = replacer.getStrategies();\n\n      for (let i = 1; i < strategies.length; i++) {\n        expect(strategies[i].priority).toBeGreaterThanOrEqual(strategies[i - 1].priority);\n      }\n    });\n  });\n\n  describe('Backup Management', () => {\n    test('creates backups with timestamp', async () => {\n      const filePath = 'test.ts';\n      mockFs.readFileSync.mockReturnValue('original content');\n\n      const backupPath = await (replacer as any).createBackup(filePath);\n\n      expect(backupPath).toContain('.test-backups');\n      expect(backupPath).toContain('test.ts');\n      expect(backupPath).toContain('.backup');\n      expect(mockFs.writeFileSync).toHaveBeenCalledWith(\n        backupPath,\n        'original content',\n        'utf8'\n      );\n    });\n\n    test('cleans up old backup files', () => {\n      const oldDate = new Date();\n      oldDate.setDate(oldDate.getDate() - 10); // 10 days old\n\n      mockFs.readdirSync.mockReturnValue(['old.backup', 'recent.backup', 'other.txt'] as any);\n      mockFs.statSync.mockImplementation((filePath: any) => {\n        if (filePath.includes('old.backup')) {\n          return { mtime: oldDate } as any;\n        }\n        return { mtime: new Date() } as any; // Recent file\n      });\n\n      replacer.cleanupOldBackups(7); // Keep 7 days\n\n      expect(mockFs.unlinkSync).toHaveBeenCalledWith(\n        path.join(testBackupDir, 'old.backup')\n      );\n      expect(mockFs.unlinkSync).not.toHaveBeenCalledWith(\n        path.join(testBackupDir, 'recent.backup')\n      );\n    });\n  });\n\n  describe('Error Handling and Retries', () => {\n    test('handles file system errors gracefully', async () => {\n      const replacement: TypeReplacement = {\n        original: 'any[]',\n        replacement: 'unknown[]',\n        filePath: 'test.ts',\n        lineNumber: 1,\n        confidence: 0.9,\n        validationRequired: true\n      };\n\n      // Mock backup creation to fail\n      mockFs.writeFileSync.mockImplementation((filePath: any) => {\n        if (filePath.includes('.backup')) {\n          throw new Error('Backup creation failed');\n        }\n      });\n\n      // Expect the error to be thrown since backup creation is critical\n      await expect(replacer.applyReplacement(replacement)).rejects.toThrow('Backup creation failed');\n    });\n\n    test('handles compilation errors with rollback', async () => {\n      const replacement: TypeReplacement = {\n        original: 'any[]',\n        replacement: 'unknown[]',\n        filePath: 'test.ts',\n        lineNumber: 1,\n        confidence: 0.9,\n        validationRequired: true\n      };\n\n      // Mock compilation to fail\n      mockExecSync.mockImplementation(() => {\n        const error = new Error('Compilation failed') as any;\n        error.stdout = 'error TS2322: Type error';\n        throw error;\n      });\n\n      const result = await replacer.applyReplacement(replacement);\n\n      expect(result.success).toBe(false);\n      expect(result.rollbackPerformed).toBe(true);\n      expect(result.compilationErrors).toContain('error TS2322: Type error');\n    });\n  });\n\n  describe('TypeScript Compilation Validation', () => {\n    test('handles successful compilation', async () => {\n      mockExecSync.mockReturnValue('');\n\n      const result = await (replacer as any).validateTypeScriptCompilation();\n\n      expect(result.success).toBe(true);\n      expect(result.errors).toHaveLength(0);\n    });\n\n    test('extracts TypeScript errors from output', async () => {\n      const errorOutput = `\n        src/test.ts(10,5): error TS2322: Type 'string' is not assignable to type 'number'.\n        src/test.ts(15,10): error TS2304: Cannot find name 'unknownVariable'.\n        Found 2 errors.\n      `;\n\n      mockExecSync.mockImplementation(() => {\n        const error = new Error('Compilation failed') as any;\n        error.stdout = errorOutput;\n        throw error;\n      });\n\n      const result = await (replacer as any).validateTypeScriptCompilation();\n\n      expect(result.success).toBe(false);\n      expect(result.errors).toHaveLength(2);\n      expect(result.errors[0]).toContain('error TS2322');\n      expect(result.errors[1]).toContain('error TS2304');\n    });\n\n    test('handles compilation timeout', async () => {\n      mockExecSync.mockImplementation(() => {\n        const error = new Error('Timeout') as any;\n        error.code = 'TIMEOUT';\n        throw error;\n      });\n\n      const result = await (replacer as any).validateTypeScriptCompilation();\n\n      expect(result.success).toBe(false);\n      expect(result.errors).toHaveLength(1);\n      expect(result.errors[0]).toContain('Timeout');\n    });\n  });\n\n  describe('Advanced Replacement Strategy Patterns', () => {\n    test('infers array element types from context', () => {\n      const context: ClassificationContext = {\n        filePath: 'test.ts',\n        lineNumber: 1,\n        codeSnippet: 'const items: any[] = [\"hello\", \"world\"];',\n        surroundingLines: [],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {\n          domain: CodeDomain.UTILITY,\n          intentionalityHints: [],\n          suggestedTypes: [],\n          preservationReasons: []\n        }\n      };\n\n      const inferredType = (replacer as any).inferArrayElementType(context);\n      expect(inferredType).toBe('string');\n    });\n\n    test('handles complex nested type inference', () => {\n      const complexContext: ClassificationContext = {\n        filePath: 'test.ts',\n        lineNumber: 1,\n        codeSnippet: 'const nested: Record<string, any[]> = { items: [1, 2, 3] };',\n        surroundingLines: [],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {\n          domain: CodeDomain.UTILITY,\n          intentionalityHints: [],\n          suggestedTypes: [],\n          preservationReasons: []\n        }\n      };\n\n      const arrayType = (replacer as any).inferArrayElementType(complexContext);\n      const recordType = (replacer as any).inferRecordValueType(complexContext);\n\n      expect(arrayType).toBe('number');\n      expect(recordType).toBe('number[]');\n    });\n\n    test('infers types from usage patterns in surrounding code', () => {\n      const usageContext: ClassificationContext = {\n        filePath: 'test.ts',\n        lineNumber: 2,\n        codeSnippet: 'const data: any = getValue();',\n        surroundingLines: [\n          'function getValue() { return \"test\"; }',\n          'console.log(data.toUpperCase());',\n          'const length = data.length;'\n        ],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {\n          domain: CodeDomain.UTILITY,\n          intentionalityHints: [],\n          suggestedTypes: [],\n          preservationReasons: []\n        }\n      };\n\n      const inferredType = (replacer as any).inferVariableType(usageContext);\n      expect(inferredType).toBe('string');\n    });\n\n    test('infers Record value types from object literals', () => {\n      const context: ClassificationContext = {\n        filePath: 'test.ts',\n        lineNumber: 1,\n        codeSnippet: 'const config: Record<string, any> = { name: \"test\", count: 42 };',\n        surroundingLines: [],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {\n          domain: CodeDomain.UTILITY,\n          intentionalityHints: [],\n          suggestedTypes: [],\n          preservationReasons: []\n        }\n      };\n\n      const inferredType = (replacer as any).inferRecordValueType(context);\n      expect(['string', 'number', 'unknown']).toContain(inferredType);\n    });\n\n    test('infers function parameter types from parameter names', () => {\n      const context: ClassificationContext = {\n        filePath: 'test.ts',\n        lineNumber: 1,\n        codeSnippet: 'function handleClick(event: any) { }',\n        surroundingLines: [],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {\n          domain: CodeDomain.COMPONENT,\n          intentionalityHints: [],\n          suggestedTypes: [],\n          preservationReasons: []\n        }\n      };\n\n      const inferredType = (replacer as any).inferFunctionParameterType(context, 'event');\n      expect(inferredType).toBe('Event');\n    });\n\n    test('infers return types from function context', () => {\n      const context: ClassificationContext = {\n        filePath: 'test.ts',\n        lineNumber: 1,\n        codeSnippet: 'function isValid(): any {',\n        surroundingLines: ['  return true;'],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {\n          domain: CodeDomain.UTILITY,\n          intentionalityHints: [],\n          suggestedTypes: [],\n          preservationReasons: []\n        }\n      };\n\n      const inferredType = (replacer as any).inferReturnType(context);\n      expect(inferredType).toBe('boolean');\n    });\n\n    test('detects error handling contexts correctly', () => {\n      const errorContext: ClassificationContext = {\n        filePath: 'test.ts',\n        lineNumber: 1,\n        codeSnippet: 'catch (error: any) {',\n        surroundingLines: [],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {\n          domain: CodeDomain.UTILITY,\n          intentionalityHints: [],\n          suggestedTypes: [],\n          preservationReasons: []\n        }\n      };\n\n      const isErrorContext = (replacer as any).isInErrorHandlingContext(errorContext);\n      expect(isErrorContext).toBe(true);\n    });\n\n    test('detects external API contexts correctly', () => {\n      const apiContext: ClassificationContext = {\n        filePath: 'test.ts',\n        lineNumber: 1,\n        codeSnippet: 'const response: any = await fetch(\"/api/data\");',\n        surroundingLines: [],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {\n          domain: CodeDomain.SERVICE,\n          intentionalityHints: [],\n          suggestedTypes: [],\n          preservationReasons: []\n        }\n      };\n\n      const isApiContext = (replacer as any).isExternalApiContext(apiContext);\n      expect(isApiContext).toBe(true);\n    });\n\n    test('applies domain-specific type inference for astrological context', () => {\n      const astroContext: ClassificationContext = {\n        filePath: 'astrology.ts',\n        lineNumber: 1,\n        codeSnippet: 'const planetaryPositions: any[] = [];',\n        surroundingLines: ['positions.push(\"mars\");'],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {\n          domain: CodeDomain.ASTROLOGICAL,\n          intentionalityHints: [],\n          suggestedTypes: [],\n          preservationReasons: []\n        }\n      };\n\n      const inferredType = (replacer as any).inferArrayElementType(astroContext);\n      expect(inferredType).toBe('string');\n    });\n\n    test('applies domain-specific type inference for recipe context', () => {\n      const recipeContext: ClassificationContext = {\n        filePath: 'recipe.ts',\n        lineNumber: 1,\n        codeSnippet: 'function processIngredient(ingredient: any) {',\n        surroundingLines: [],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {\n          domain: CodeDomain.RECIPE,\n          intentionalityHints: [],\n          suggestedTypes: [],\n          preservationReasons: []\n        }\n      };\n\n      const inferredType = (replacer as any).inferFunctionParameterType(recipeContext, 'ingredient');\n      expect(inferredType).toBe('Ingredient');\n    });\n\n    test('handles complex replacement patterns with validation', async () => {\n      const mockContext: ClassificationContext = {\n        filePath: 'test.ts',\n        lineNumber: 1,\n        codeSnippet: 'function process(data: any): any { return data; }',\n        surroundingLines: [],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {\n          domain: CodeDomain.UTILITY,\n          intentionalityHints: [],\n          suggestedTypes: [],\n          preservationReasons: []\n        }\n      };\n\n      const strategies = replacer.getStrategies();\n\n      // Test function parameter strategy\n      const paramStrategy = strategies.find(s => s.priority === 4);\n      expect(paramStrategy).toBeDefined();\n      expect(paramStrategy!.validator(mockContext)).toBe(true);\n\n      // Test return type strategy\n      const returnStrategy = strategies.find(s => s.priority === 5);\n      expect(returnStrategy).toBeDefined();\n      expect(returnStrategy!.validator(mockContext)).toBe(true);\n    });\n  });\n\n  describe('Comprehensive Error Recovery', () => {\n    test('handles partial batch failures with selective rollback', async () => {\n      const replacements: TypeReplacement[] = [\n        {\n          original: 'any[]',\n          replacement: 'string[]',\n          filePath: 'test1.ts',\n          lineNumber: 1,\n          confidence: 0.9,\n          validationRequired: true\n        },\n        {\n          original: 'any',\n          replacement: 'InvalidType', // This should cause compilation error\n          filePath: 'test2.ts',\n          lineNumber: 1,\n          confidence: 0.8,\n          validationRequired: true\n        }\n      ];\n\n      mockFs.readFileSync.mockImplementation((filePath: any) => {\n        if (filePath.includes('test1.ts')) return 'const items: any[] = [];';\n        if (filePath.includes('test2.ts')) return 'const data: any = value;';\n        return 'backup content';\n      });\n\n      // Mock compilation to fail for the second replacement\n      let compilationCallCount = 0;\n      mockExecSync.mockImplementation(() => {\n        compilationCallCount++;\n        if (compilationCallCount > 1) {\n          const error = new Error('Compilation failed') as any;\n          error.stdout = 'error TS2304: Cannot find name \"InvalidType\"';\n          throw error;\n        }\n        return '';\n      });\n\n      const result = await replacer.processBatch(replacements);\n\n      expect(result.success).toBe(false);\n      expect(result.rollbackPerformed).toBe(true);\n      expect(result.compilationErrors).toContain('error TS2304: Cannot find name \"InvalidType\"');\n    });\n\n    test('handles file system permission errors', async () => {\n      const replacement: TypeReplacement = {\n        original: 'any[]',\n        replacement: 'unknown[]',\n        filePath: 'readonly.ts',\n        lineNumber: 1,\n        confidence: 0.9,\n        validationRequired: true\n      };\n\n      mockFs.readFileSync.mockReturnValue('const items: any[] = [];');\n      mockFs.writeFileSync.mockImplementation(() => {\n        throw new Error('EACCES: permission denied');\n      });\n\n      await expect(replacer.applyReplacement(replacement)).rejects.toThrow('EACCES: permission denied');\n    });\n\n    test('handles corrupted backup files', async () => {\n      const replacement: TypeReplacement = {\n        original: 'any[]',\n        replacement: 'unknown[]',\n        filePath: 'test.ts',\n        lineNumber: 1,\n        confidence: 0.9,\n        validationRequired: true\n      };\n\n      mockFs.readFileSync.mockImplementation((path: any) => {\n        if (path.includes('.backup')) {\n          throw new Error('Backup file corrupted');\n        }\n        return 'const items: any[] = [];';\n      });\n\n      const result = await replacer.applyReplacement(replacement);\n      expect(result.success).toBe(false);\n    });\n\n    test('handles network timeouts during validation', async () => {\n      const replacement: TypeReplacement = {\n        original: 'any[]',\n        replacement: 'unknown[]',\n        filePath: 'test.ts',\n        lineNumber: 1,\n        confidence: 0.9,\n        validationRequired: true\n      };\n\n      mockFs.readFileSync.mockReturnValue('const items: any[] = [];');\n\n      // Mock timeout error\n      mockExecSync.mockImplementation(() => {\n        const error = new Error('Command timed out') as any;\n        error.code = 'TIMEOUT';\n        throw error;\n      });\n\n      const result = await replacer.applyReplacement(replacement);\n      expect(result.success).toBe(false);\n      expect(result.compilationErrors).toContain('Command timed out');\n    });\n  });\n\n  describe('Performance and Memory Management', () => {\n    test('handles large file processing efficiently', async () => {\n      const largeContent = 'const items: any[] = [];\\n'.repeat(10000);\n      const replacement: TypeReplacement = {\n        original: 'any[]',\n        replacement: 'unknown[]',\n        filePath: 'large.ts',\n        lineNumber: 5000,\n        confidence: 0.9,\n        validationRequired: true\n      };\n\n      mockFs.readFileSync.mockReturnValue(largeContent);\n\n      const startTime = Date.now();\n      const result = await replacer.applyReplacement(replacement);\n      const endTime = Date.now();\n\n      expect(result.success).toBe(true);\n      expect(endTime - startTime).toBeLessThan(2000); // Should complete within 2 seconds\n    });\n\n    test('manages memory during batch processing', async () => {\n      const largeBatch: TypeReplacement[] = Array(1000).fill(null).map((_, i) => ({\n        original: 'any[]',\n        replacement: 'unknown[]',\n        filePath: `test${i}.ts`,\n        lineNumber: 1,\n        confidence: 0.9,\n        validationRequired: true\n      }));\n\n      mockFs.readFileSync.mockReturnValue('const items: any[] = [];');\n\n      const initialMemory = process.memoryUsage().heapUsed;\n      const result = await replacer.processBatch(largeBatch);\n      const finalMemory = process.memoryUsage().heapUsed;\n\n      expect(result).toBeDefined();\n      // Memory usage shouldn't grow excessively (allow 100MB increase)\n      expect(finalMemory - initialMemory).toBeLessThan(100 * 1024 * 1024);\n    });\n\n    test('cleans up resources after processing', async () => {\n      const replacement: TypeReplacement = {\n        original: 'any[]',\n        replacement: 'unknown[]',\n        filePath: 'test.ts',\n        lineNumber: 1,\n        confidence: 0.9,\n        validationRequired: true\n      };\n\n      mockFs.readFileSync.mockReturnValue('const items: any[] = [];');\n\n      await replacer.applyReplacement(replacement);\n\n      // Verify cleanup was called\n      expect(mockFs.writeFileSync).toHaveBeenCalled();\n\n      // Test backup cleanup\n      replacer.cleanupOldBackups(0); // Clean all backups\n      expect(mockFs.unlinkSync).toHaveBeenCalled();\n    });\n  });\n\n  describe('Integration with Safety Validator', () => {\n    test('integrates with safety validator for comprehensive validation', async () => {\n      const replacement: TypeReplacement = {\n        original: 'any[]',\n        replacement: 'unknown[]',\n        filePath: 'test.ts',\n        lineNumber: 1,\n        confidence: 0.9,\n        validationRequired: true\n      };\n\n      const context: ClassificationContext = {\n        filePath: 'test.ts',\n        lineNumber: 1,\n        codeSnippet: 'const items: any[] = [];',\n        surroundingLines: [],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {\n          domain: CodeDomain.UTILITY,\n          intentionalityHints: [],\n          suggestedTypes: [],\n          preservationReasons: []\n        }\n      };\n\n      mockFs.readFileSync.mockReturnValue('const items: any[] = [];');\n\n      const result = await replacer.applyReplacement(replacement, context);\n      expect(result.success).toBe(true);\n    });\n\n    test('respects safety validator recommendations', async () => {\n      const lowConfidenceReplacement: TypeReplacement = {\n        original: 'any',\n        replacement: 'string',\n        filePath: 'test.ts',\n        lineNumber: 1,\n        confidence: 0.3, // Very low confidence\n        validationRequired: true\n      };\n\n      const result = await replacer.applyReplacement(lowConfidenceReplacement);\n      expect(result.success).toBe(false);\n      expect(result.compilationErrors[0]).toContain('Safety score');\n    });\n  });\n});\n"],"version":3}