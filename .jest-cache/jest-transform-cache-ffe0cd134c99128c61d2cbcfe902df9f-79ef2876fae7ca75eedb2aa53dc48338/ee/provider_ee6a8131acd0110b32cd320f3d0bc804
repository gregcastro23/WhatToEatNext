0b0519c3b90efd048f8f712053316e16
"use strict";
'use client';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlchemicalProvider = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const context_1 = require("./context");
const reducer_1 = require("./reducer");
const safeAstrology = __importStar(require("@/utils/safeAstrology"));
const logger_1 = require("@/utils/logger");
// Create a component-specific logger
const logger = (0, logger_1.createLogger)('AlchemicalProvider');
// Function to do a deep equality check
function deepEqual(obj1, obj2) {
    if (obj1 === obj2)
        return true;
    if (obj1 == null || obj2 == null)
        return false;
    if (typeof obj1 !== 'object' || typeof obj2 !== 'object')
        return false;
    const keys1 = Object.keys(obj1);
    const keys2 = Object.keys(obj2);
    if (keys1.length !== keys2.length)
        return false;
    for (const key of keys1) {
        if (!keys2.includes(key))
            return false;
        if (!deepEqual(obj1[key], obj2[key]))
            return false;
    }
    return true;
}
// Calculate active planets based on dignity and other factors
const calculateActivePlanets = (positions) => {
    if (!positions)
        return [];
    // Basic implementation just returns the major planets
    const activePlanets = [];
    try {
        // Add main planets (using capitalized names to match proven working implementation)
        const mainPlanets = ['Sun', 'Moon', 'Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn'];
        mainPlanets.forEach(planet => {
            if (positions[planet]) {
                activePlanets.push(planet);
            }
        });
        // Always include luminaries (Sun and Moon) as they're constantly active
        if (!activePlanets.includes('Sun'))
            activePlanets.push('Sun');
        if (!activePlanets.includes('Moon'))
            activePlanets.push('Moon');
    }
    catch (error) {
        logger.error('Error calculating active planets:', error);
        // Return at least the sun and moon as fallback (capitalized)
        return ['Sun', 'Moon'];
    }
    return activePlanets;
};
// Safe type conversion function to replace 'as any' casts
const convertToCalculationFormat = (positions) => {
    const converted = {};
    Object.entries(positions).forEach(([planet, position]) => {
        if (position && typeof position === 'object') {
            converted[planet] = {
                sign: position.sign,
                degree: position.degree,
                isRetrograde: position.isRetrograde,
                // Preserve any additional properties safely
                ...position
            };
        }
    });
    return converted;
};
// Export the provider component
const AlchemicalProvider = ({ children }) => {
    const [state, dispatch] = (0, react_1.useReducer)(reducer_1.alchemicalReducer, context_1.defaultState);
    const [planetaryPositions, setPlanetaryPositions] = (0, react_1.useState)({});
    const [isDaytime, setIsDaytime] = (0, react_1.useState)(true);
    const [isInitialized, setIsInitialized] = (0, react_1.useState)(false);
    // Initialize data once on mount
    (0, react_1.useEffect)(() => {
        if (!isInitialized) {
            logger.debug(`AlchemicalProvider initializing`);
            setIsInitialized(true);
            refreshPlanetaryPositions(); // Initial fetch of planetary positions
        }
    }, [isInitialized]);
    // Synchronize alchemical values between state and astrologicalState
    (0, react_1.useEffect)(() => {
        var _a;
        // Check if astrologicalState exists and has alchemicalValues
        if ((_a = state.astrologicalState) === null || _a === void 0 ? void 0 : _a.alchemicalValues) {
            // If the values differ, update the main state alchemicalValues
            if (!deepEqual(state.alchemicalValues, state.astrologicalState.alchemicalValues)) {
                logger.debug('Synchronizing alchemical values from astrologicalState to root state');
                dispatch({
                    type: 'SET_ALCHEMICAL_VALUES',
                    payload: (state.astrologicalState.alchemicalValues && Object.keys(state.astrologicalState.alchemicalValues).length === 4)
                        ? state.astrologicalState.alchemicalValues
                        : { Spirit: 0.25, Essence: 0.25, Matter: 0.25, Substance: 0.25 }
                });
            }
        }
        else if (state.astrologicalState) {
            // If astrologicalState exists but doesn't have alchemicalValues, add them from root state
            const updatedAstroState = {
                ...state.astrologicalState,
                alchemicalValues: (state.alchemicalValues && Object.keys(state.alchemicalValues).length === 4)
                    ? state.alchemicalValues
                    : { Spirit: 0.25, Essence: 0.25, Matter: 0.25, Substance: 0.25 }
            };
            dispatch({
                type: 'SET_ASTROLOGICAL_STATE',
                payload: updatedAstroState
            });
        }
    }, [state.astrologicalState]);
    const updatePlanetaryPositions = (0, react_1.useCallback)((positions) => {
        // Only update if positions are different using deep equality
        setPlanetaryPositions(prev => {
            var _a, _b;
            // Skip update if positions are identical to prevent re-renders
            if (deepEqual(prev, positions)) {
                logger.debug('Skipping identical planetary positions update');
                return prev;
            }
            logger.info('Updating planetary positions', {
                sun: (_a = positions.Sun) === null || _a === void 0 ? void 0 : _a.sign,
                moon: (_b = positions.Moon) === null || _b === void 0 ? void 0 : _b.sign,
                timestamp: new Date().toISOString()
            });
            return positions;
        });
    }, []);
    const refreshPlanetaryPositions = (0, react_1.useCallback)(async () => {
        var _a, _b;
        try {
            logger.debug('Refreshing planetary positions...');
            // Use reliable hardcoded positions
            const positions = safeAstrology.getReliablePlanetaryPositions();
            // Normalize keys to capitalized format for consistency with proven working implementation
            const normalizedPositions = {};
            Object.entries(positions).forEach(([key, data]) => {
                var _a;
                if (!data || typeof data !== 'object')
                    return;
                const planet = key.charAt(0).toUpperCase() + key.slice(1).toLowerCase();
                normalizedPositions[planet] = {
                    sign: ((_a = data.sign) === null || _a === void 0 ? void 0 : _a.toLowerCase()) || 'unknown',
                    degree: typeof data.degree === 'number' ? data.degree : 0,
                    exactLongitude: typeof data.exactLongitude === 'number' ? data.exactLongitude : 0,
                    isRetrograde: !!data.isRetrograde
                };
            });
            updatePlanetaryPositions(normalizedPositions);
            // Import calculation utilities
            const { calculateElementalValues, calculatePlanetaryAlchemicalValues, calculateElementalBalance } = await Promise.resolve().then(() => __importStar(require('@/utils/alchemicalCalculations')));
            // Calculate elemental and alchemical values using type-safe conversion
            const compatiblePositions = convertToCalculationFormat(normalizedPositions);
            const elementalValues = calculateElementalValues(compatiblePositions);
            const planetaryValues = calculatePlanetaryAlchemicalValues(compatiblePositions);
            const elementalBalance = calculateElementalBalance(compatiblePositions);
            // Combine elemental and planetary influences (weighted average)
            const combinedAlchemicalValues = {
                Spirit: (elementalValues.Spirit * 0.5) + (planetaryValues.Spirit * 0.5),
                Essence: (elementalValues.Essence * 0.5) + (planetaryValues.Essence * 0.5),
                Matter: (elementalValues.Matter * 0.5) + (planetaryValues.Matter * 0.5),
                Substance: (elementalValues.Substance * 0.5) + (planetaryValues.Substance * 0.5)
            };
            // Normalize alchemical values to ensure they sum to approximately 1
            const total = combinedAlchemicalValues.Spirit + combinedAlchemicalValues.Essence +
                combinedAlchemicalValues.Matter + combinedAlchemicalValues.Substance;
            const normalizedAlchemicalValues = {
                Spirit: combinedAlchemicalValues.Spirit / total,
                Essence: combinedAlchemicalValues.Essence / total,
                Matter: combinedAlchemicalValues.Matter / total,
                Substance: combinedAlchemicalValues.Substance / total
            };
            logger.debug('Calculated alchemical values:', normalizedAlchemicalValues);
            // Update state with calculated values
            const activePlanets = calculateActivePlanets(normalizedPositions);
            const sunSign = ((_a = normalizedPositions.Sun) === null || _a === void 0 ? void 0 : _a.sign) || 'aries';
            const moonSign = ((_b = normalizedPositions.Moon) === null || _b === void 0 ? void 0 : _b.sign) || 'taurus';
            // First update the alchemical values at the root of the state
            dispatch({
                type: 'SET_ALCHEMICAL_VALUES',
                payload: normalizedAlchemicalValues
            });
            // Update elemental state
            dispatch({
                type: 'SET_ELEMENTAL_STATE',
                payload: elementalBalance
            });
            // Sync with ElementalCalculator
            try {
                const { ElementalCalculator } = await Promise.resolve().then(() => __importStar(require('@/services/ElementalCalculator')));
                ElementalCalculator.updateElementalState(elementalBalance);
            }
            catch (error) {
                logger.error('Error syncing ElementalCalculator state:', error);
            }
            // Then update the astrological state with the same values
            const astrologicalState = {
                sunSign,
                moonSign,
                lunarPhase: safeAstrology.getLunarPhaseName(safeAstrology.calculateLunarPhase()),
                timeOfDay: getTimeOfDay(),
                isDaytime,
                planetaryHour: 'sun',
                zodiacSign: sunSign,
                activePlanets,
                activeAspects: [],
                dominantElement: 'Fire',
                calculationError: false,
                alchemicalValues: normalizedAlchemicalValues,
                currentZodiac: sunSign,
                moonPhase: safeAstrology.getLunarPhaseName(safeAstrology.calculateLunarPhase())
            };
            dispatch({
                type: 'SET_ASTROLOGICAL_STATE',
                payload: astrologicalState
            });
            return normalizedPositions;
        }
        catch (error) {
            logger.error('Error refreshing planetary positions:', error);
            dispatch({
                type: 'SET_ERROR',
                payload: { message: 'Failed to refresh planetary positions' }
            });
            // Pattern JJ-2: AlchemicalState Interface Completion - Return proper structure instead of empty object
            return {
                Sun: { sign: 'aries', degree: 0, exactLongitude: 0, isRetrograde: false },
                Moon: { sign: 'taurus', degree: 0, exactLongitude: 0, isRetrograde: false }
            };
        }
    }, [isDaytime, updatePlanetaryPositions]);
    const getTimeOfDay = () => {
        const hour = new Date().getHours();
        if (hour >= 5 && hour < 12)
            return 'morning';
        if (hour >= 12 && hour < 17)
            return 'afternoon';
        if (hour >= 17 && hour < 21)
            return 'evening';
        return 'night';
    };
    const setDaytime = (0, react_1.useCallback)((value) => {
        setIsDaytime(value);
        logger.debug(`Setting isDaytime to ${value}`);
        // Refresh planetary positions on daytime change
        if (isInitialized) {
            refreshPlanetaryPositions();
        }
    }, [isInitialized, refreshPlanetaryPositions]);
    const updateState = (0, react_1.useCallback)((updatedState) => {
        dispatch({
            type: 'UPDATE_STATE',
            payload: updatedState
        });
    }, []);
    return ((0, jsx_runtime_1.jsx)(context_1.AlchemicalContext.Provider, { value: {
            state,
            dispatch,
            planetaryPositions: planetaryPositions,
            isDaytime,
            updatePlanetaryPositions: updatePlanetaryPositions,
            refreshPlanetaryPositions: refreshPlanetaryPositions,
            setDaytime,
            updateState
        }, children: children }));
};
exports.AlchemicalProvider = AlchemicalProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9jb250ZXh0cy9BbGNoZW1pY2FsQ29udGV4dC9wcm92aWRlci50c3giLCJtYXBwaW5ncyI6IjtBQUFBLFlBQVksQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRWIsK0NBQTRFO0FBQzVFLHVDQUE0RDtBQUM1RCx1Q0FBOEM7QUFFOUMscUVBQXVEO0FBQ3ZELDJDQUE4QztBQWM5QyxxQ0FBcUM7QUFDckMsTUFBTSxNQUFNLEdBQUcsSUFBQSxxQkFBWSxFQUFDLG9CQUFvQixDQUFDLENBQUM7QUFFbEQsdUNBQXVDO0FBQ3ZDLFNBQVMsU0FBUyxDQUFJLElBQU8sRUFBRSxJQUFPO0lBQ3BDLElBQUksSUFBSSxLQUFLLElBQUk7UUFBRSxPQUFPLElBQUksQ0FBQztJQUMvQixJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUk7UUFBRSxPQUFPLEtBQUssQ0FBQztJQUMvQyxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFFdkUsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFjLENBQUMsQ0FBQztJQUMxQyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQWMsQ0FBQyxDQUFDO0lBRTFDLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxLQUFLLENBQUMsTUFBTTtRQUFFLE9BQU8sS0FBSyxDQUFDO0lBRWhELEtBQUssTUFBTSxHQUFHLElBQUksS0FBSyxFQUFFO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztZQUFFLE9BQU8sS0FBSyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxTQUFTLENBQUUsSUFBZ0MsQ0FBQyxHQUFHLENBQUMsRUFBRyxJQUFnQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQUUsT0FBTyxLQUFLLENBQUM7S0FDOUc7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Yy9jb250ZXh0cy9BbGNoZW1pY2FsQ29udGV4dC9wcm92aWRlci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgUmVhY3QsIHsgdXNlUmVkdWNlciwgdXNlU3RhdGUsIHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBBbGNoZW1pY2FsQ29udGV4dCwgZGVmYXVsdFN0YXRlIH0gZnJvbSAnLi9jb250ZXh0JztcbmltcG9ydCB7IGFsY2hlbWljYWxSZWR1Y2VyIH0gZnJvbSAnLi9yZWR1Y2VyJztcbmltcG9ydCB7IFBsYW5ldGFyeVBvc2l0aW9uc1R5cGUsIEFzdHJvbG9naWNhbFN0YXRlLCBBbGNoZW1pY2FsU3RhdGUgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCAqIGFzIHNhZmVBc3Ryb2xvZ3kgZnJvbSAnQC91dGlscy9zYWZlQXN0cm9sb2d5JztcbmltcG9ydCB7IGNyZWF0ZUxvZ2dlciB9IGZyb20gJ0AvdXRpbHMvbG9nZ2VyJztcblxuLy8gUGhhc2UgNTogVHlwZS1zYWZlIGNvbnZlcnNpb24gaW50ZXJmYWNlcyBmb3IgYWxjaGVtaWNhbCBjYWxjdWxhdGlvbnNcbmludGVyZmFjZSBDYWxjdWxhdGlvbkNvbXBhdGlibGVQb3NpdGlvbiB7XG4gIHNpZ24/OiBzdHJpbmc7XG4gIGRlZ3JlZT86IG51bWJlcjtcbiAgaXNSZXRyb2dyYWRlPzogYm9vbGVhbjtcbiAgW2tleTogc3RyaW5nXTogdW5rbm93bjtcbn1cblxuaW50ZXJmYWNlIENhbGN1bGF0aW9uQ29tcGF0aWJsZVBvc2l0aW9ucyB7XG4gIFtrZXk6IHN0cmluZ106IENhbGN1bGF0aW9uQ29tcGF0aWJsZVBvc2l0aW9uO1xufVxuXG4vLyBDcmVhdGUgYSBjb21wb25lbnQtc3BlY2lmaWMgbG9nZ2VyXG5jb25zdCBsb2dnZXIgPSBjcmVhdGVMb2dnZXIoJ0FsY2hlbWljYWxQcm92aWRlcicpO1xuXG4vLyBGdW5jdGlvbiB0byBkbyBhIGRlZXAgZXF1YWxpdHkgY2hlY2tcbmZ1bmN0aW9uIGRlZXBFcXVhbDxUPihvYmoxOiBULCBvYmoyOiBUKTogYm9vbGVhbiB7XG4gIGlmIChvYmoxID09PSBvYmoyKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKG9iajEgPT0gbnVsbCB8fCBvYmoyID09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgaWYgKHR5cGVvZiBvYmoxICE9PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb2JqMiAhPT0gJ29iamVjdCcpIHJldHVybiBmYWxzZTtcbiAgXG4gIGNvbnN0IGtleXMxID0gT2JqZWN0LmtleXMob2JqMSBhcyBvYmplY3QpO1xuICBjb25zdCBrZXlzMiA9IE9iamVjdC5rZXlzKG9iajIgYXMgb2JqZWN0KTtcbiAgXG4gIGlmIChrZXlzMS5sZW5ndGggIT09IGtleXMyLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICBcbiAgZm9yIChjb25zdCBrZXkgb2Yga2V5czEpIHtcbiAgICBpZiAoIWtleXMyLmluY2x1ZGVzKGtleSkpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoIWRlZXBFcXVhbCgob2JqMSBhcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPilba2V5XSwgKG9iajIgYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4pW2tleV0pKSByZXR1cm4gZmFsc2U7XG4gIH1cbiAgXG4gIHJldHVybiB0cnVlO1xufVxuXG4vLyBDYWxjdWxhdGUgYWN0aXZlIHBsYW5ldHMgYmFzZWQgb24gZGlnbml0eSBhbmQgb3RoZXIgZmFjdG9yc1xuY29uc3QgY2FsY3VsYXRlQWN0aXZlUGxhbmV0cyA9IChwb3NpdGlvbnM6IFBsYW5ldGFyeVBvc2l0aW9uc1R5cGUpOiBzdHJpbmdbXSA9PiB7XG4gIGlmICghcG9zaXRpb25zKSByZXR1cm4gW107XG4gIFxuICAvLyBCYXNpYyBpbXBsZW1lbnRhdGlvbiBqdXN0IHJldHVybnMgdGhlIG1ham9yIHBsYW5ldHNcbiAgY29uc3QgYWN0aXZlUGxhbmV0czogc3RyaW5nW10gPSBbXTtcbiAgXG4gIHRyeSB7XG4gICAgLy8gQWRkIG1haW4gcGxhbmV0cyAodXNpbmcgY2FwaXRhbGl6ZWQgbmFtZXMgdG8gbWF0Y2ggcHJvdmVuIHdvcmtpbmcgaW1wbGVtZW50YXRpb24pXG4gICAgY29uc3QgbWFpblBsYW5ldHMgPSBbJ1N1bicsICdNb29uJywgJ01lcmN1cnknLCAnVmVudXMnLCAnTWFycycsICdKdXBpdGVyJywgJ1NhdHVybiddO1xuICAgIG1haW5QbGFuZXRzLmZvckVhY2gocGxhbmV0ID0+IHtcbiAgICAgIGlmIChwb3NpdGlvbnNbcGxhbmV0XSkge1xuICAgICAgICBhY3RpdmVQbGFuZXRzLnB1c2gocGxhbmV0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICAvLyBBbHdheXMgaW5jbHVkZSBsdW1pbmFyaWVzIChTdW4gYW5kIE1vb24pIGFzIHRoZXkncmUgY29uc3RhbnRseSBhY3RpdmVcbiAgICBpZiAoIWFjdGl2ZVBsYW5ldHMuaW5jbHVkZXMoJ1N1bicpKSBhY3RpdmVQbGFuZXRzLnB1c2goJ1N1bicpO1xuICAgIGlmICghYWN0aXZlUGxhbmV0cy5pbmNsdWRlcygnTW9vbicpKSBhY3RpdmVQbGFuZXRzLnB1c2goJ01vb24nKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBsb2dnZXIuZXJyb3IoJ0Vycm9yIGNhbGN1bGF0aW5nIGFjdGl2ZSBwbGFuZXRzOicsIGVycm9yKTtcbiAgICAvLyBSZXR1cm4gYXQgbGVhc3QgdGhlIHN1biBhbmQgbW9vbiBhcyBmYWxsYmFjayAoY2FwaXRhbGl6ZWQpXG4gICAgcmV0dXJuIFsnU3VuJywgJ01vb24nXTtcbiAgfVxuICBcbiAgcmV0dXJuIGFjdGl2ZVBsYW5ldHM7XG59O1xuXG4vLyBTYWZlIHR5cGUgY29udmVyc2lvbiBmdW5jdGlvbiB0byByZXBsYWNlICdhcyBhbnknIGNhc3RzXG5jb25zdCBjb252ZXJ0VG9DYWxjdWxhdGlvbkZvcm1hdCA9IChwb3NpdGlvbnM6IFBsYW5ldGFyeVBvc2l0aW9uc1R5cGUpOiBDYWxjdWxhdGlvbkNvbXBhdGlibGVQb3NpdGlvbnMgPT4ge1xuICBjb25zdCBjb252ZXJ0ZWQ6IENhbGN1bGF0aW9uQ29tcGF0aWJsZVBvc2l0aW9ucyA9IHt9O1xuICBcbiAgT2JqZWN0LmVudHJpZXMocG9zaXRpb25zKS5mb3JFYWNoKChbcGxhbmV0LCBwb3NpdGlvbl0pID0+IHtcbiAgICBpZiAocG9zaXRpb24gJiYgdHlwZW9mIHBvc2l0aW9uID09PSAnb2JqZWN0Jykge1xuICAgICAgY29udmVydGVkW3BsYW5ldF0gPSB7XG4gICAgICAgIHNpZ246IHBvc2l0aW9uLnNpZ24sXG4gICAgICAgIGRlZ3JlZTogcG9zaXRpb24uZGVncmVlLFxuICAgICAgICBpc1JldHJvZ3JhZGU6IHBvc2l0aW9uLmlzUmV0cm9ncmFkZSxcbiAgICAgICAgLy8gUHJlc2VydmUgYW55IGFkZGl0aW9uYWwgcHJvcGVydGllcyBzYWZlbHlcbiAgICAgICAgLi4ucG9zaXRpb25cbiAgICAgIH07XG4gICAgfVxuICB9KTtcbiAgXG4gIHJldHVybiBjb252ZXJ0ZWQ7XG59O1xuXG4vLyBFeHBvcnQgdGhlIHByb3ZpZGVyIGNvbXBvbmVudFxuZXhwb3J0IGNvbnN0IEFsY2hlbWljYWxQcm92aWRlcjogUmVhY3QuRkM8e2NoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGV9PiA9ICh7IGNoaWxkcmVuIH0pID0+IHtcbiAgY29uc3QgW3N0YXRlLCBkaXNwYXRjaF0gPSB1c2VSZWR1Y2VyKGFsY2hlbWljYWxSZWR1Y2VyLCBkZWZhdWx0U3RhdGUpO1xuICBjb25zdCBbcGxhbmV0YXJ5UG9zaXRpb25zLCBzZXRQbGFuZXRhcnlQb3NpdGlvbnNdID0gdXNlU3RhdGU8UGxhbmV0YXJ5UG9zaXRpb25zVHlwZT4oe30pO1xuICBjb25zdCBbaXNEYXl0aW1lLCBzZXRJc0RheXRpbWVdID0gdXNlU3RhdGUodHJ1ZSk7XG4gIGNvbnN0IFtpc0luaXRpYWxpemVkLCBzZXRJc0luaXRpYWxpemVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICAvLyBJbml0aWFsaXplIGRhdGEgb25jZSBvbiBtb3VudFxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghaXNJbml0aWFsaXplZCkge1xuICAgICAgbG9nZ2VyLmRlYnVnKGBBbGNoZW1pY2FsUHJvdmlkZXIgaW5pdGlhbGl6aW5nYCk7XG4gICAgICBzZXRJc0luaXRpYWxpemVkKHRydWUpO1xuICAgICAgcmVmcmVzaFBsYW5ldGFyeVBvc2l0aW9ucygpOyAvLyBJbml0aWFsIGZldGNoIG9mIHBsYW5ldGFyeSBwb3NpdGlvbnNcbiAgICB9XG4gIH0sIFtpc0luaXRpYWxpemVkXSk7XG5cbiAgLy8gU3luY2hyb25pemUgYWxjaGVtaWNhbCB2YWx1ZXMgYmV0d2VlbiBzdGF0ZSBhbmQgYXN0cm9sb2dpY2FsU3RhdGVcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBDaGVjayBpZiBhc3Ryb2xvZ2ljYWxTdGF0ZSBleGlzdHMgYW5kIGhhcyBhbGNoZW1pY2FsVmFsdWVzXG4gICAgaWYgKHN0YXRlLmFzdHJvbG9naWNhbFN0YXRlPy5hbGNoZW1pY2FsVmFsdWVzKSB7XG4gICAgICAvLyBJZiB0aGUgdmFsdWVzIGRpZmZlciwgdXBkYXRlIHRoZSBtYWluIHN0YXRlIGFsY2hlbWljYWxWYWx1ZXNcbiAgICAgIGlmICghZGVlcEVxdWFsKHN0YXRlLmFsY2hlbWljYWxWYWx1ZXMsIHN0YXRlLmFzdHJvbG9naWNhbFN0YXRlLmFsY2hlbWljYWxWYWx1ZXMpKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnU3luY2hyb25pemluZyBhbGNoZW1pY2FsIHZhbHVlcyBmcm9tIGFzdHJvbG9naWNhbFN0YXRlIHRvIHJvb3Qgc3RhdGUnKTtcbiAgICAgICAgZGlzcGF0Y2goe1xuICAgICAgICAgIHR5cGU6ICdTRVRfQUxDSEVNSUNBTF9WQUxVRVMnLFxuICAgICAgICAgIHBheWxvYWQ6IChzdGF0ZS5hc3Ryb2xvZ2ljYWxTdGF0ZS5hbGNoZW1pY2FsVmFsdWVzICYmIE9iamVjdC5rZXlzKHN0YXRlLmFzdHJvbG9naWNhbFN0YXRlLmFsY2hlbWljYWxWYWx1ZXMpLmxlbmd0aCA9PT0gNClcbiAgICAgICAgICAgID8gc3RhdGUuYXN0cm9sb2dpY2FsU3RhdGUuYWxjaGVtaWNhbFZhbHVlcyBhcyB7IFNwaXJpdDogbnVtYmVyOyBFc3NlbmNlOiBudW1iZXI7IE1hdHRlcjogbnVtYmVyOyBTdWJzdGFuY2U6IG51bWJlciB9XG4gICAgICAgICAgICA6IHsgU3Bpcml0OiAwLjI1LCBFc3NlbmNlOiAwLjI1LCBNYXR0ZXI6IDAuMjUsIFN1YnN0YW5jZTogMC4yNSB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc3RhdGUuYXN0cm9sb2dpY2FsU3RhdGUpIHtcbiAgICAgIC8vIElmIGFzdHJvbG9naWNhbFN0YXRlIGV4aXN0cyBidXQgZG9lc24ndCBoYXZlIGFsY2hlbWljYWxWYWx1ZXMsIGFkZCB0aGVtIGZyb20gcm9vdCBzdGF0ZVxuICAgICAgY29uc3QgdXBkYXRlZEFzdHJvU3RhdGUgPSB7XG4gICAgICAgIC4uLnN0YXRlLmFzdHJvbG9naWNhbFN0YXRlLFxuICAgICAgICBhbGNoZW1pY2FsVmFsdWVzOiAoc3RhdGUuYWxjaGVtaWNhbFZhbHVlcyAmJiBPYmplY3Qua2V5cyhzdGF0ZS5hbGNoZW1pY2FsVmFsdWVzKS5sZW5ndGggPT09IDQpXG4gICAgICAgICAgPyBzdGF0ZS5hbGNoZW1pY2FsVmFsdWVzXG4gICAgICAgICAgOiB7IFNwaXJpdDogMC4yNSwgRXNzZW5jZTogMC4yNSwgTWF0dGVyOiAwLjI1LCBTdWJzdGFuY2U6IDAuMjUgfVxuICAgICAgfTtcbiAgICAgIFxuICAgICAgZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiAnU0VUX0FTVFJPTE9HSUNBTF9TVEFURScsXG4gICAgICAgIHBheWxvYWQ6IHVwZGF0ZWRBc3Ryb1N0YXRlXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtzdGF0ZS5hc3Ryb2xvZ2ljYWxTdGF0ZV0pO1xuXG4gIGNvbnN0IHVwZGF0ZVBsYW5ldGFyeVBvc2l0aW9ucyA9IHVzZUNhbGxiYWNrKChwb3NpdGlvbnM6IFBsYW5ldGFyeVBvc2l0aW9uc1R5cGUpID0+IHtcbiAgICAvLyBPbmx5IHVwZGF0ZSBpZiBwb3NpdGlvbnMgYXJlIGRpZmZlcmVudCB1c2luZyBkZWVwIGVxdWFsaXR5XG4gICAgc2V0UGxhbmV0YXJ5UG9zaXRpb25zKHByZXYgPT4ge1xuICAgICAgLy8gU2tpcCB1cGRhdGUgaWYgcG9zaXRpb25zIGFyZSBpZGVudGljYWwgdG8gcHJldmVudCByZS1yZW5kZXJzXG4gICAgICBpZiAoZGVlcEVxdWFsKHByZXYsIHBvc2l0aW9ucykpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdTa2lwcGluZyBpZGVudGljYWwgcGxhbmV0YXJ5IHBvc2l0aW9ucyB1cGRhdGUnKTtcbiAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGxvZ2dlci5pbmZvKCdVcGRhdGluZyBwbGFuZXRhcnkgcG9zaXRpb25zJywge1xuICAgICAgICBzdW46IHBvc2l0aW9ucy5TdW4/LnNpZ24sXG4gICAgICAgIG1vb246IHBvc2l0aW9ucy5Nb29uPy5zaWduLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcG9zaXRpb25zO1xuICAgIH0pO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgcmVmcmVzaFBsYW5ldGFyeVBvc2l0aW9ucyA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgbG9nZ2VyLmRlYnVnKCdSZWZyZXNoaW5nIHBsYW5ldGFyeSBwb3NpdGlvbnMuLi4nKTtcbiAgICAgIFxuICAgICAgLy8gVXNlIHJlbGlhYmxlIGhhcmRjb2RlZCBwb3NpdGlvbnNcbiAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IHNhZmVBc3Ryb2xvZ3kuZ2V0UmVsaWFibGVQbGFuZXRhcnlQb3NpdGlvbnMoKTtcbiAgICAgIFxuICAgICAgLy8gTm9ybWFsaXplIGtleXMgdG8gY2FwaXRhbGl6ZWQgZm9ybWF0IGZvciBjb25zaXN0ZW5jeSB3aXRoIHByb3ZlbiB3b3JraW5nIGltcGxlbWVudGF0aW9uXG4gICAgICBjb25zdCBub3JtYWxpemVkUG9zaXRpb25zOiBQbGFuZXRhcnlQb3NpdGlvbnNUeXBlID0ge307XG4gICAgICBPYmplY3QuZW50cmllcyhwb3NpdGlvbnMpLmZvckVhY2goKFtrZXksIGRhdGFdKSA9PiB7XG4gICAgICAgIGlmICghZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gJ29iamVjdCcpIHJldHVybjtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHBsYW5ldCA9IGtleS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGtleS5zbGljZSgxKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBub3JtYWxpemVkUG9zaXRpb25zW3BsYW5ldF0gPSB7XG4gICAgICAgICAgc2lnbjogZGF0YS5zaWduPy50b0xvd2VyQ2FzZSgpIHx8ICd1bmtub3duJyxcbiAgICAgICAgICBkZWdyZWU6IHR5cGVvZiBkYXRhLmRlZ3JlZSA9PT0gJ251bWJlcicgPyBkYXRhLmRlZ3JlZSA6IDAsXG4gICAgICAgICAgZXhhY3RMb25naXR1ZGU6IHR5cGVvZiBkYXRhLmV4YWN0TG9uZ2l0dWRlID09PSAnbnVtYmVyJyA/IGRhdGEuZXhhY3RMb25naXR1ZGUgOiAwLFxuICAgICAgICAgIGlzUmV0cm9ncmFkZTogISFkYXRhLmlzUmV0cm9ncmFkZVxuICAgICAgICB9O1xuICAgICAgfSk7XG5cbiAgICAgIHVwZGF0ZVBsYW5ldGFyeVBvc2l0aW9ucyhub3JtYWxpemVkUG9zaXRpb25zKTtcbiAgICAgIFxuICAgICAgLy8gSW1wb3J0IGNhbGN1bGF0aW9uIHV0aWxpdGllc1xuICAgICAgY29uc3QgeyBcbiAgICAgICAgY2FsY3VsYXRlRWxlbWVudGFsVmFsdWVzLCBcbiAgICAgICAgY2FsY3VsYXRlUGxhbmV0YXJ5QWxjaGVtaWNhbFZhbHVlcywgXG4gICAgICAgIGNhbGN1bGF0ZUVsZW1lbnRhbEJhbGFuY2UgXG4gICAgICB9ID0gYXdhaXQgaW1wb3J0KCdAL3V0aWxzL2FsY2hlbWljYWxDYWxjdWxhdGlvbnMnKTtcbiAgICAgIFxuICAgICAgLy8gQ2FsY3VsYXRlIGVsZW1lbnRhbCBhbmQgYWxjaGVtaWNhbCB2YWx1ZXMgdXNpbmcgdHlwZS1zYWZlIGNvbnZlcnNpb25cbiAgICAgIGNvbnN0IGNvbXBhdGlibGVQb3NpdGlvbnMgPSBjb252ZXJ0VG9DYWxjdWxhdGlvbkZvcm1hdChub3JtYWxpemVkUG9zaXRpb25zKTtcbiAgICAgIGNvbnN0IGVsZW1lbnRhbFZhbHVlcyA9IGNhbGN1bGF0ZUVsZW1lbnRhbFZhbHVlcyhjb21wYXRpYmxlUG9zaXRpb25zKTtcbiAgICAgIGNvbnN0IHBsYW5ldGFyeVZhbHVlcyA9IGNhbGN1bGF0ZVBsYW5ldGFyeUFsY2hlbWljYWxWYWx1ZXMoY29tcGF0aWJsZVBvc2l0aW9ucyk7XG4gICAgICBjb25zdCBlbGVtZW50YWxCYWxhbmNlID0gY2FsY3VsYXRlRWxlbWVudGFsQmFsYW5jZShjb21wYXRpYmxlUG9zaXRpb25zKTtcbiAgICAgIFxuICAgICAgLy8gQ29tYmluZSBlbGVtZW50YWwgYW5kIHBsYW5ldGFyeSBpbmZsdWVuY2VzICh3ZWlnaHRlZCBhdmVyYWdlKVxuICAgICAgY29uc3QgY29tYmluZWRBbGNoZW1pY2FsVmFsdWVzID0ge1xuICAgICAgICBTcGlyaXQ6IChlbGVtZW50YWxWYWx1ZXMuU3Bpcml0ICogMC41KSArIChwbGFuZXRhcnlWYWx1ZXMuU3Bpcml0ICogMC41KSxcbiAgICAgICAgRXNzZW5jZTogKGVsZW1lbnRhbFZhbHVlcy5Fc3NlbmNlICogMC41KSArIChwbGFuZXRhcnlWYWx1ZXMuRXNzZW5jZSAqIDAuNSksXG4gICAgICAgIE1hdHRlcjogKGVsZW1lbnRhbFZhbHVlcy5NYXR0ZXIgKiAwLjUpICsgKHBsYW5ldGFyeVZhbHVlcy5NYXR0ZXIgKiAwLjUpLFxuICAgICAgICBTdWJzdGFuY2U6IChlbGVtZW50YWxWYWx1ZXMuU3Vic3RhbmNlICogMC41KSArIChwbGFuZXRhcnlWYWx1ZXMuU3Vic3RhbmNlICogMC41KVxuICAgICAgfTtcbiAgICAgIFxuICAgICAgLy8gTm9ybWFsaXplIGFsY2hlbWljYWwgdmFsdWVzIHRvIGVuc3VyZSB0aGV5IHN1bSB0byBhcHByb3hpbWF0ZWx5IDFcbiAgICAgIGNvbnN0IHRvdGFsID0gY29tYmluZWRBbGNoZW1pY2FsVmFsdWVzLlNwaXJpdCArIGNvbWJpbmVkQWxjaGVtaWNhbFZhbHVlcy5Fc3NlbmNlICsgXG4gICAgICAgICAgICAgICAgICAgIGNvbWJpbmVkQWxjaGVtaWNhbFZhbHVlcy5NYXR0ZXIgKyBjb21iaW5lZEFsY2hlbWljYWxWYWx1ZXMuU3Vic3RhbmNlO1xuICAgICAgXG4gICAgICBjb25zdCBub3JtYWxpemVkQWxjaGVtaWNhbFZhbHVlcyA9IHtcbiAgICAgICAgU3Bpcml0OiBjb21iaW5lZEFsY2hlbWljYWxWYWx1ZXMuU3Bpcml0IC8gdG90YWwsXG4gICAgICAgIEVzc2VuY2U6IGNvbWJpbmVkQWxjaGVtaWNhbFZhbHVlcy5Fc3NlbmNlIC8gdG90YWwsXG4gICAgICAgIE1hdHRlcjogY29tYmluZWRBbGNoZW1pY2FsVmFsdWVzLk1hdHRlciAvIHRvdGFsLFxuICAgICAgICBTdWJzdGFuY2U6IGNvbWJpbmVkQWxjaGVtaWNhbFZhbHVlcy5TdWJzdGFuY2UgLyB0b3RhbFxuICAgICAgfTtcbiAgICAgIFxuICAgICAgbG9nZ2VyLmRlYnVnKCdDYWxjdWxhdGVkIGFsY2hlbWljYWwgdmFsdWVzOicsIG5vcm1hbGl6ZWRBbGNoZW1pY2FsVmFsdWVzKTtcbiAgICAgIFxuICAgICAgLy8gVXBkYXRlIHN0YXRlIHdpdGggY2FsY3VsYXRlZCB2YWx1ZXNcbiAgICAgIGNvbnN0IGFjdGl2ZVBsYW5ldHMgPSBjYWxjdWxhdGVBY3RpdmVQbGFuZXRzKG5vcm1hbGl6ZWRQb3NpdGlvbnMpO1xuICAgICAgY29uc3Qgc3VuU2lnbiA9IG5vcm1hbGl6ZWRQb3NpdGlvbnMuU3VuPy5zaWduIHx8ICdhcmllcyc7XG4gICAgICBjb25zdCBtb29uU2lnbiA9IG5vcm1hbGl6ZWRQb3NpdGlvbnMuTW9vbj8uc2lnbiB8fCAndGF1cnVzJztcbiAgICAgIFxuICAgICAgLy8gRmlyc3QgdXBkYXRlIHRoZSBhbGNoZW1pY2FsIHZhbHVlcyBhdCB0aGUgcm9vdCBvZiB0aGUgc3RhdGVcbiAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ1NFVF9BTENIRU1JQ0FMX1ZBTFVFUycsXG4gICAgICAgIHBheWxvYWQ6IG5vcm1hbGl6ZWRBbGNoZW1pY2FsVmFsdWVzXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gVXBkYXRlIGVsZW1lbnRhbCBzdGF0ZVxuICAgICAgZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiAnU0VUX0VMRU1FTlRBTF9TVEFURScsXG4gICAgICAgIHBheWxvYWQ6IGVsZW1lbnRhbEJhbGFuY2VcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICAvLyBTeW5jIHdpdGggRWxlbWVudGFsQ2FsY3VsYXRvclxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgeyBFbGVtZW50YWxDYWxjdWxhdG9yIH0gPSBhd2FpdCBpbXBvcnQoJ0Avc2VydmljZXMvRWxlbWVudGFsQ2FsY3VsYXRvcicpO1xuICAgICAgICBFbGVtZW50YWxDYWxjdWxhdG9yLnVwZGF0ZUVsZW1lbnRhbFN0YXRlKGVsZW1lbnRhbEJhbGFuY2UpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgbG9nZ2VyLmVycm9yKCdFcnJvciBzeW5jaW5nIEVsZW1lbnRhbENhbGN1bGF0b3Igc3RhdGU6JywgZXJyb3IpO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBUaGVuIHVwZGF0ZSB0aGUgYXN0cm9sb2dpY2FsIHN0YXRlIHdpdGggdGhlIHNhbWUgdmFsdWVzXG4gICAgICBjb25zdCBhc3Ryb2xvZ2ljYWxTdGF0ZTogQXN0cm9sb2dpY2FsU3RhdGUgPSB7XG4gICAgICAgIHN1blNpZ24sXG4gICAgICAgIG1vb25TaWduLFxuICAgICAgICBsdW5hclBoYXNlOiBzYWZlQXN0cm9sb2d5LmdldEx1bmFyUGhhc2VOYW1lKHNhZmVBc3Ryb2xvZ3kuY2FsY3VsYXRlTHVuYXJQaGFzZSgpKSwgLy8gQ2FsY3VsYXRlIGFjdHVhbCBsdW5hciBwaGFzZVxuICAgICAgICB0aW1lT2ZEYXk6IGdldFRpbWVPZkRheSgpLFxuICAgICAgICBpc0RheXRpbWUsXG4gICAgICAgIHBsYW5ldGFyeUhvdXI6ICdzdW4nLCAvLyBUaGlzIHdvdWxkIGJlIGNhbGN1bGF0ZWRcbiAgICAgICAgem9kaWFjU2lnbjogc3VuU2lnbixcbiAgICAgICAgYWN0aXZlUGxhbmV0cyxcbiAgICAgICAgYWN0aXZlQXNwZWN0czogW10sXG4gICAgICAgIGRvbWluYW50RWxlbWVudDogJ0ZpcmUnLFxuICAgICAgICBjYWxjdWxhdGlvbkVycm9yOiBmYWxzZSxcbiAgICAgICAgYWxjaGVtaWNhbFZhbHVlczogbm9ybWFsaXplZEFsY2hlbWljYWxWYWx1ZXMsXG4gICAgICAgIGN1cnJlbnRab2RpYWM6IHN1blNpZ24sXG4gICAgICAgIG1vb25QaGFzZTogc2FmZUFzdHJvbG9neS5nZXRMdW5hclBoYXNlTmFtZShzYWZlQXN0cm9sb2d5LmNhbGN1bGF0ZUx1bmFyUGhhc2UoKSlcbiAgICAgIH07XG4gICAgICBcbiAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ1NFVF9BU1RST0xPR0lDQUxfU1RBVEUnLFxuICAgICAgICBwYXlsb2FkOiBhc3Ryb2xvZ2ljYWxTdGF0ZVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIHJldHVybiBub3JtYWxpemVkUG9zaXRpb25zO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoJ0Vycm9yIHJlZnJlc2hpbmcgcGxhbmV0YXJ5IHBvc2l0aW9uczonLCBlcnJvcik7XG4gICAgICBkaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6ICdTRVRfRVJST1InLFxuICAgICAgICBwYXlsb2FkOiB7IG1lc3NhZ2U6ICdGYWlsZWQgdG8gcmVmcmVzaCBwbGFuZXRhcnkgcG9zaXRpb25zJyB9XG4gICAgICB9KTtcbiAgICAgIC8vIFBhdHRlcm4gSkotMjogQWxjaGVtaWNhbFN0YXRlIEludGVyZmFjZSBDb21wbGV0aW9uIC0gUmV0dXJuIHByb3BlciBzdHJ1Y3R1cmUgaW5zdGVhZCBvZiBlbXB0eSBvYmplY3RcbiAgICAgIHJldHVybiB7XG4gICAgICAgIFN1bjogeyBzaWduOiAnYXJpZXMnLCBkZWdyZWU6IDAsIGV4YWN0TG9uZ2l0dWRlOiAwLCBpc1JldHJvZ3JhZGU6IGZhbHNlIH0sXG4gICAgICAgIE1vb246IHsgc2lnbjogJ3RhdXJ1cycsIGRlZ3JlZTogMCwgZXhhY3RMb25naXR1ZGU6IDAsIGlzUmV0cm9ncmFkZTogZmFsc2UgfVxuICAgICAgfTtcbiAgICB9XG4gIH0sIFtpc0RheXRpbWUsIHVwZGF0ZVBsYW5ldGFyeVBvc2l0aW9uc10pO1xuXG4gIGNvbnN0IGdldFRpbWVPZkRheSA9ICgpID0+IHtcbiAgICBjb25zdCBob3VyID0gbmV3IERhdGUoKS5nZXRIb3VycygpO1xuICAgIGlmIChob3VyID49IDUgJiYgaG91ciA8IDEyKSByZXR1cm4gJ21vcm5pbmcnO1xuICAgIGlmIChob3VyID49IDEyICYmIGhvdXIgPCAxNykgcmV0dXJuICdhZnRlcm5vb24nO1xuICAgIGlmIChob3VyID49IDE3ICYmIGhvdXIgPCAyMSkgcmV0dXJuICdldmVuaW5nJztcbiAgICByZXR1cm4gJ25pZ2h0JztcbiAgfTtcblxuICBjb25zdCBzZXREYXl0aW1lID0gdXNlQ2FsbGJhY2soKHZhbHVlOiBib29sZWFuKSA9PiB7XG4gICAgc2V0SXNEYXl0aW1lKHZhbHVlKTtcbiAgICBsb2dnZXIuZGVidWcoYFNldHRpbmcgaXNEYXl0aW1lIHRvICR7dmFsdWV9YCk7XG4gICAgLy8gUmVmcmVzaCBwbGFuZXRhcnkgcG9zaXRpb25zIG9uIGRheXRpbWUgY2hhbmdlXG4gICAgaWYgKGlzSW5pdGlhbGl6ZWQpIHtcbiAgICAgIHJlZnJlc2hQbGFuZXRhcnlQb3NpdGlvbnMoKTtcbiAgICB9XG4gIH0sIFtpc0luaXRpYWxpemVkLCByZWZyZXNoUGxhbmV0YXJ5UG9zaXRpb25zXSk7XG5cbiAgY29uc3QgdXBkYXRlU3RhdGUgPSB1c2VDYWxsYmFjaygodXBkYXRlZFN0YXRlOiBQYXJ0aWFsPEFsY2hlbWljYWxTdGF0ZT4pID0+IHtcbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiAnVVBEQVRFX1NUQVRFJyxcbiAgICAgIHBheWxvYWQ6IHVwZGF0ZWRTdGF0ZVxuICAgIH0pO1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8QWxjaGVtaWNhbENvbnRleHQuUHJvdmlkZXIgXG4gICAgICB2YWx1ZT17eyBcbiAgICAgICAgc3RhdGUsIFxuICAgICAgICBkaXNwYXRjaCwgXG4gICAgICAgIHBsYW5ldGFyeVBvc2l0aW9uczogcGxhbmV0YXJ5UG9zaXRpb25zIGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+LFxuICAgICAgICBpc0RheXRpbWUsIFxuICAgICAgICB1cGRhdGVQbGFuZXRhcnlQb3NpdGlvbnM6IHVwZGF0ZVBsYW5ldGFyeVBvc2l0aW9ucyBhcyAocG9zaXRpb25zOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPikgPT4gdm9pZCxcbiAgICAgICAgcmVmcmVzaFBsYW5ldGFyeVBvc2l0aW9uczogcmVmcmVzaFBsYW5ldGFyeVBvc2l0aW9ucyBhcyAoKSA9PiBQcm9taXNlPFJlY29yZDxzdHJpbmcsIHVua25vd24+PixcbiAgICAgICAgc2V0RGF5dGltZSxcbiAgICAgICAgdXBkYXRlU3RhdGVcbiAgICAgIH19XG4gICAgPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvQWxjaGVtaWNhbENvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59OyAiXSwidmVyc2lvbiI6M30=