c19734073f2a24f023ba53cb25b09683
"use strict";
/**
 * Enterprise Intelligence Generator Tests
 * Perfect Codebase Campaign - Phase 3 Implementation
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock fs
jest.mock('fs');
const EnterpriseIntelligenceGenerator_1 = require("./EnterpriseIntelligenceGenerator");
const UnusedExportAnalyzer_1 = require("./UnusedExportAnalyzer");
const fs = __importStar(require("fs"));
const mockFs = fs;
describe('EnterpriseIntelligenceGenerator', () => {
    let generator;
    beforeEach(() => {
        generator = new EnterpriseIntelligenceGenerator_1.EnterpriseIntelligenceGenerator('test-output');
        jest.clearAllMocks();
        // Mock fs operations
        mockFs.promises = {
            access: jest
                .fn()
                .mockRejectedValue(new Error('Directory does not exist')),
            mkdir: jest.fn().mockResolvedValue(undefined),
            writeFile: jest.fn().mockResolvedValue(undefined),
        };
    });
    describe('constructor', () => {
        it('should initialize with default output directory', () => {
            const defaultGenerator = new EnterpriseIntelligenceGenerator_1.EnterpriseIntelligenceGenerator();
            expect(defaultGenerator).toBeInstanceOf(EnterpriseIntelligenceGenerator_1.EnterpriseIntelligenceGenerator);
        });
        it('should initialize with custom output directory', () => {
            const customGenerator = new EnterpriseIntelligenceGenerator_1.EnterpriseIntelligenceGenerator('custom-output');
            expect(customGenerator).toBeInstanceOf(EnterpriseIntelligenceGenerator_1.EnterpriseIntelligenceGenerator);
        });
    });
    describe('generateIntelligenceSystems', () => {
        const mockFileAnalysis = {
            filePath: '/test/TestFile.ts',
            priority: UnusedExportAnalyzer_1.FilePriority.HIGH,
            unusedExports: [
                {
                    filePath: '/test/TestFile.ts',
                    exportName: 'testFunction',
                    exportType: 'function',
                    lineNumber: 1,
                    isDefault: false,
                    complexity: 5,
                    usageCount: 0,
                },
            ],
            safetyScore: 90,
            transformationCandidates: [
                {
                    export: {
                        filePath: '/test/TestFile.ts',
                        exportName: 'testFunction',
                        exportType: 'function',
                        lineNumber: 1,
                        isDefault: false,
                        complexity: 5,
                        usageCount: 0,
                    },
                    intelligenceSystemName: 'TEST_FUNCTION_INTELLIGENCE_SYSTEM',
                    transformationComplexity: UnusedExportAnalyzer_1.TransformationComplexity.MODERATE,
                    safetyScore: 85,
                    estimatedBenefit: 75,
                },
            ],
            category: UnusedExportAnalyzer_1.FileCategory.CORE,
        };
        it('should generate intelligence systems from file analyses', async () => {
            const results = await generator.generateIntelligenceSystems([
                mockFileAnalysis,
            ]);
            expect(results).toHaveLength(1);
            expect(results[0]).toHaveProperty('systemName', 'TEST_FUNCTION_INTELLIGENCE_SYSTEM');
            expect(results[0]).toHaveProperty('originalExport');
            expect(results[0]).toHaveProperty('generatedCode');
            expect(results[0]).toHaveProperty('capabilities');
            expect(results[0]).toHaveProperty('integrationPoints');
            expect(results[0]).toHaveProperty('estimatedValue');
            expect(results[0]).toHaveProperty('complexity');
        });
        it('should create output directory if it does not exist', async () => {
            await generator.generateIntelligenceSystems([mockFileAnalysis]);
            expect(mockFs.promises.mkdir).toHaveBeenCalledWith('test-output', {
                recursive: true,
            });
        });
        it('should write generated code to files', async () => {
            await generator.generateIntelligenceSystems([mockFileAnalysis]);
            expect(mockFs.promises.writeFile).toHaveBeenCalledWith(expect.stringContaining('TEST_FUNCTION_INTELLIGENCE_SYSTEM.ts'), expect.stringContaining('TEST_FUNCTION_INTELLIGENCE_SYSTEM'));
        });
        it('should handle generation errors gracefully', async () => {
            const invalidAnalysis = {
                ...mockFileAnalysis,
                transformationCandidates: [
                    {
                        ...mockFileAnalysis.transformationCandidates[0],
                        export: {
                            ...mockFileAnalysis.transformationCandidates[0].export,
                            exportName: null, // Invalid export name
                        },
                    },
                ],
            };
            const results = await generator.generateIntelligenceSystems([
                invalidAnalysis,
            ]);
            expect(results).toHaveLength(0); // Should handle error and continue
        });
    });
    describe('selectTemplate', () => {
        it('should select function template for function exports', () => {
            const candidate = {
                export: {
                    filePath: '/test/test.ts',
                    exportName: 'testFunction',
                    exportType: 'function',
                    lineNumber: 1,
                    isDefault: false,
                    complexity: 5,
                    usageCount: 0,
                },
                intelligenceSystemName: 'TEST_FUNCTION_INTELLIGENCE_SYSTEM',
                transformationComplexity: UnusedExportAnalyzer_1.TransformationComplexity.MODERATE,
                safetyScore: 85,
                estimatedBenefit: 75,
            };
            const template = generator.selectTemplate(candidate);
            expect(template.name).toBe('Function Intelligence System');
        });
        it('should select class template for class exports', () => {
            const candidate = {
                export: {
                    filePath: '/test/test.ts',
                    exportName: 'TestClass',
                    exportType: 'class',
                    lineNumber: 1,
                    isDefault: false,
                    complexity: 10,
                    usageCount: 0,
                },
                intelligenceSystemName: 'TEST_CLASS_INTELLIGENCE_SYSTEM',
                transformationComplexity: UnusedExportAnalyzer_1.TransformationComplexity.COMPLEX,
                safetyScore: 80,
                estimatedBenefit: 85,
            };
            const template = generator.selectTemplate(candidate);
            expect(template.name).toBe('Class Intelligence System');
        });
        it('should select type template for interface exports', () => {
            const candidate = {
                export: {
                    filePath: '/test/test.ts',
                    exportName: 'TestInterface',
                    exportType: 'interface',
                    lineNumber: 1,
                    isDefault: false,
                    complexity: 3,
                    usageCount: 0,
                },
                intelligenceSystemName: 'TEST_INTERFACE_INTELLIGENCE_SYSTEM',
                transformationComplexity: UnusedExportAnalyzer_1.TransformationComplexity.SIMPLE,
                safetyScore: 95,
                estimatedBenefit: 60,
            };
            const template = generator.selectTemplate(candidate);
            expect(template.name).toBe('Type Intelligence System');
        });
        it('should select data template for const exports', () => {
            const candidate = {
                export: {
                    filePath: '/test/test.ts',
                    exportName: 'TEST_CONSTANT',
                    exportType: 'const',
                    lineNumber: 1,
                    isDefault: false,
                    complexity: 2,
                    usageCount: 0,
                },
                intelligenceSystemName: 'TEST_CONSTANT_INTELLIGENCE_SYSTEM',
                transformationComplexity: UnusedExportAnalyzer_1.TransformationComplexity.SIMPLE,
                safetyScore: 90,
                estimatedBenefit: 50,
            };
            const template = generator.selectTemplate(candidate);
            expect(template.name).toBe('Data Intelligence System');
        });
    });
    describe('generateCapabilities', () => {
        it('should generate function-specific capabilities', () => {
            const candidate = {
                export: {
                    filePath: '/test/test.ts',
                    exportName: 'testFunction',
                    exportType: 'function',
                    lineNumber: 1,
                    isDefault: false,
                    complexity: 5,
                    usageCount: 0,
                },
                intelligenceSystemName: 'TEST_FUNCTION_INTELLIGENCE_SYSTEM',
                transformationComplexity: UnusedExportAnalyzer_1.TransformationComplexity.MODERATE,
                safetyScore: 85,
                estimatedBenefit: 75,
            };
            const template = generator.selectTemplate(candidate);
            const capabilities = generator.generateCapabilities(candidate, template);
            expect(capabilities.some((cap) => cap.name === 'analyzeFunction')).toBe(true);
            expect(capabilities.length).toBeGreaterThan(2);
        });
        it('should generate class-specific capabilities', () => {
            const candidate = {
                export: {
                    filePath: '/test/test.ts',
                    exportName: 'TestClass',
                    exportType: 'class',
                    lineNumber: 1,
                    isDefault: false,
                    complexity: 10,
                    usageCount: 0,
                },
                intelligenceSystemName: 'TEST_CLASS_INTELLIGENCE_SYSTEM',
                transformationComplexity: UnusedExportAnalyzer_1.TransformationComplexity.COMPLEX,
                safetyScore: 80,
                estimatedBenefit: 85,
            };
            const template = generator.selectTemplate(candidate);
            const capabilities = generator.generateCapabilities(candidate, template);
            expect(capabilities.some((cap) => cap.name === 'analyzeClassStructure')).toBe(true);
        });
        it('should add advanced capabilities for complex exports', () => {
            const candidate = {
                export: {
                    filePath: '/test/test.ts',
                    exportName: 'complexFunction',
                    exportType: 'function',
                    lineNumber: 1,
                    isDefault: false,
                    complexity: 25,
                    usageCount: 0,
                },
                intelligenceSystemName: 'COMPLEX_FUNCTION_INTELLIGENCE_SYSTEM',
                transformationComplexity: UnusedExportAnalyzer_1.TransformationComplexity.VERY_COMPLEX,
                safetyScore: 70,
                estimatedBenefit: 90,
            };
            const template = generator.selectTemplate(candidate);
            const capabilities = generator.generateCapabilities(candidate, template);
            expect(capabilities.some((cap) => cap.name === 'generateAdvancedInsights')).toBe(true);
        });
    });
    describe('generateIntegrationPoints', () => {
        it('should generate integration points for intelligence systems', () => {
            const candidate = {
                export: {
                    filePath: '/test/test.ts',
                    exportName: 'testFunction',
                    exportType: 'function',
                    lineNumber: 1,
                    isDefault: false,
                    complexity: 5,
                    usageCount: 0,
                },
                intelligenceSystemName: 'TEST_FUNCTION_INTELLIGENCE_SYSTEM',
                transformationComplexity: UnusedExportAnalyzer_1.TransformationComplexity.MODERATE,
                safetyScore: 85,
                estimatedBenefit: 75,
            };
            const integrationPoints = generator.generateIntegrationPoints(candidate, '/test/test.ts');
            expect(integrationPoints.length).toBeGreaterThan(0);
            expect(integrationPoints.some((ip) => ip.method === EnterpriseIntelligenceGenerator_1.IntegrationMethod.DIRECT_IMPORT)).toBe(true);
            expect(integrationPoints.some((ip) => ip.method === EnterpriseIntelligenceGenerator_1.IntegrationMethod.API_ENDPOINT)).toBe(true);
        });
        it('should include original file integration for safe candidates', () => {
            const candidate = {
                export: {
                    filePath: '/test/test.ts',
                    exportName: 'safeFunction',
                    exportType: 'function',
                    lineNumber: 1,
                    isDefault: false,
                    complexity: 3,
                    usageCount: 0,
                },
                intelligenceSystemName: 'SAFE_FUNCTION_INTELLIGENCE_SYSTEM',
                transformationComplexity: UnusedExportAnalyzer_1.TransformationComplexity.SIMPLE,
                safetyScore: 95,
                estimatedBenefit: 70,
            };
            const integrationPoints = generator.generateIntegrationPoints(candidate, '/test/test.ts');
            expect(integrationPoints.some((ip) => ip.target === '/test/test.ts')).toBe(true);
        });
    });
    describe('generateCode', () => {
        it('should generate complete intelligence system code', () => {
            const candidate = {
                export: {
                    filePath: '/test/test.ts',
                    exportName: 'testFunction',
                    exportType: 'function',
                    lineNumber: 1,
                    isDefault: false,
                    complexity: 5,
                    usageCount: 0,
                },
                intelligenceSystemName: 'TEST_FUNCTION_INTELLIGENCE_SYSTEM',
                transformationComplexity: UnusedExportAnalyzer_1.TransformationComplexity.MODERATE,
                safetyScore: 85,
                estimatedBenefit: 75,
            };
            const template = generator.selectTemplate(candidate);
            const capabilities = generator.generateCapabilities(candidate, template);
            const code = generator.generateCode(candidate, template, capabilities);
            expect(code).toContain('TEST_FUNCTION_INTELLIGENCE_SYSTEM');
            expect(code).toContain('class TEST_FUNCTION_INTELLIGENCE_SYSTEM');
            expect(code).toContain('analyzePatterns');
            expect(code).toContain('generateRecommendations');
            expect(code).toContain('demonstrateCapabilities');
            expect(code).toContain('export const test_function_intelligence_system');
        });
        it('should include original export information in comments', () => {
            const candidate = {
                export: {
                    filePath: '/test/test.ts',
                    exportName: 'originalFunction',
                    exportType: 'function',
                    lineNumber: 10,
                    isDefault: false,
                    complexity: 8,
                    usageCount: 0,
                },
                intelligenceSystemName: 'ORIGINAL_FUNCTION_INTELLIGENCE_SYSTEM',
                transformationComplexity: UnusedExportAnalyzer_1.TransformationComplexity.MODERATE,
                safetyScore: 80,
                estimatedBenefit: 70,
            };
            const template = generator.selectTemplate(candidate);
            const capabilities = generator.generateCapabilities(candidate, template);
            const code = generator.generateCode(candidate, template, capabilities);
            expect(code).toContain('Original Export: originalFunction (function)');
            expect(code).toContain('Estimated Value: 70/100');
        });
    });
    describe('calculateEstimatedValue', () => {
        it('should calculate value based on candidate benefit and capabilities', () => {
            const candidate = {
                export: {
                    filePath: '/test/test.ts',
                    exportName: 'testFunction',
                    exportType: 'function',
                    lineNumber: 1,
                    isDefault: false,
                    complexity: 5,
                    usageCount: 0,
                },
                intelligenceSystemName: 'TEST_FUNCTION_INTELLIGENCE_SYSTEM',
                transformationComplexity: UnusedExportAnalyzer_1.TransformationComplexity.MODERATE,
                safetyScore: 85,
                estimatedBenefit: 50,
            };
            const capabilities = [
                {
                    name: 'basicCapability',
                    description: 'Basic capability',
                    implementation: 'return {};',
                    complexity: EnterpriseIntelligenceGenerator_1.CapabilityComplexity.BASIC,
                },
                {
                    name: 'advancedCapability',
                    description: 'Advanced capability',
                    implementation: 'return {};',
                    complexity: EnterpriseIntelligenceGenerator_1.CapabilityComplexity.ADVANCED,
                },
            ];
            const value = generator.calculateEstimatedValue(candidate, capabilities);
            expect(value).toBeGreaterThan(50); // Should be higher than base benefit
            expect(value).toBeLessThanOrEqual(100); // Should be capped at 100
        });
    });
    describe('assessGenerationComplexity', () => {
        it('should assess SIMPLE complexity for simple candidates', () => {
            const candidate = {
                export: {
                    filePath: '/test/test.ts',
                    exportName: 'simpleFunction',
                    exportType: 'const',
                    lineNumber: 1,
                    isDefault: false,
                    complexity: 2,
                    usageCount: 0,
                },
                intelligenceSystemName: 'SIMPLE_FUNCTION_INTELLIGENCE_SYSTEM',
                transformationComplexity: UnusedExportAnalyzer_1.TransformationComplexity.SIMPLE,
                safetyScore: 95,
                estimatedBenefit: 40,
            };
            const capabilities = [
                {
                    name: 'basicCapability',
                    description: 'Basic capability',
                    implementation: 'return {};',
                    complexity: EnterpriseIntelligenceGenerator_1.CapabilityComplexity.BASIC,
                },
            ];
            const complexity = generator.assessGenerationComplexity(candidate, capabilities);
            expect(complexity).toBe(EnterpriseIntelligenceGenerator_1.GenerationComplexity.SIMPLE);
        });
        it('should assess VERY_COMPLEX complexity for complex candidates', () => {
            const candidate = {
                export: {
                    filePath: '/test/test.ts',
                    exportName: 'complexFunction',
                    exportType: 'class',
                    lineNumber: 1,
                    isDefault: false,
                    complexity: 30,
                    usageCount: 0,
                },
                intelligenceSystemName: 'COMPLEX_FUNCTION_INTELLIGENCE_SYSTEM',
                transformationComplexity: UnusedExportAnalyzer_1.TransformationComplexity.VERY_COMPLEX,
                safetyScore: 60,
                estimatedBenefit: 95,
            };
            const capabilities = [
                {
                    name: 'expertCapability',
                    description: 'Expert capability',
                    implementation: 'return {};',
                    complexity: EnterpriseIntelligenceGenerator_1.CapabilityComplexity.EXPERT,
                },
            ];
            const complexity = generator.assessGenerationComplexity(candidate, capabilities);
            expect(complexity).toBe(EnterpriseIntelligenceGenerator_1.GenerationComplexity.VERY_COMPLEX);
        });
    });
    describe('generateSummary', () => {
        it('should generate comprehensive summary of results', () => {
            const mockResults = [
                {
                    systemName: 'SYSTEM_1',
                    filePath: '/output/SYSTEM_1.ts',
                    originalExport: {
                        filePath: '/test/test1.ts',
                        exportName: 'function1',
                        exportType: 'function',
                        lineNumber: 1,
                        isDefault: false,
                        complexity: 5,
                        usageCount: 0,
                    },
                    generatedCode: 'code1',
                    capabilities: [
                        {
                            name: 'cap1',
                            description: 'desc1',
                            implementation: 'impl1',
                            complexity: EnterpriseIntelligenceGenerator_1.CapabilityComplexity.BASIC,
                        },
                        {
                            name: 'cap2',
                            description: 'desc2',
                            implementation: 'impl2',
                            complexity: EnterpriseIntelligenceGenerator_1.CapabilityComplexity.INTERMEDIATE,
                        },
                    ],
                    integrationPoints: [
                        {
                            target: 'target1',
                            method: EnterpriseIntelligenceGenerator_1.IntegrationMethod.DIRECT_IMPORT,
                            code: 'code1',
                            priority: EnterpriseIntelligenceGenerator_1.IntegrationPriority.HIGH,
                        },
                    ],
                    estimatedValue: 75,
                    complexity: EnterpriseIntelligenceGenerator_1.GenerationComplexity.MODERATE,
                },
                {
                    systemName: 'SYSTEM_2',
                    filePath: '/output/SYSTEM_2.ts',
                    originalExport: {
                        filePath: '/test/test2.ts',
                        exportName: 'class2',
                        exportType: 'class',
                        lineNumber: 1,
                        isDefault: false,
                        complexity: 10,
                        usageCount: 0,
                    },
                    generatedCode: 'code2',
                    capabilities: [
                        {
                            name: 'cap3',
                            description: 'desc3',
                            implementation: 'impl3',
                            complexity: EnterpriseIntelligenceGenerator_1.CapabilityComplexity.ADVANCED,
                        },
                    ],
                    integrationPoints: [
                        {
                            target: 'target2',
                            method: EnterpriseIntelligenceGenerator_1.IntegrationMethod.API_ENDPOINT,
                            code: 'code2',
                            priority: EnterpriseIntelligenceGenerator_1.IntegrationPriority.MEDIUM,
                        },
                    ],
                    estimatedValue: 85,
                    complexity: EnterpriseIntelligenceGenerator_1.GenerationComplexity.COMPLEX,
                },
            ];
            const summary = generator.generateSummary(mockResults);
            expect(summary.totalSystemsGenerated).toBe(2);
            expect(summary.totalCapabilitiesAdded).toBe(3);
            expect(summary.totalIntegrationPoints).toBe(2);
            expect(summary.estimatedTotalValue).toBe(160);
            expect(summary.generationsByCategory).toHaveProperty('function', 1);
            expect(summary.generationsByCategory).toHaveProperty('class', 1);
        });
    });
    describe('generateIntegrationGuide', () => {
        it('should generate comprehensive integration guide', () => {
            const mockResults = [
                {
                    systemName: 'TEST_SYSTEM_INTELLIGENCE_SYSTEM',
                    filePath: '/output/TEST_SYSTEM_INTELLIGENCE_SYSTEM.ts',
                    originalExport: {
                        filePath: '/test/test.ts',
                        exportName: 'testFunction',
                        exportType: 'function',
                        lineNumber: 1,
                        isDefault: false,
                        complexity: 5,
                        usageCount: 0,
                    },
                    generatedCode: 'code',
                    capabilities: [],
                    integrationPoints: [
                        {
                            target: 'src/components/dashboard/IntelligenceDashboard.tsx',
                            method: EnterpriseIntelligenceGenerator_1.IntegrationMethod.DEPENDENCY_INJECTION,
                            code: 'dashboard integration code',
                            priority: EnterpriseIntelligenceGenerator_1.IntegrationPriority.MEDIUM,
                        },
                    ],
                    estimatedValue: 75,
                    complexity: EnterpriseIntelligenceGenerator_1.GenerationComplexity.MODERATE,
                },
            ];
            const guide = generator.generateIntegrationGuide(mockResults);
            expect(guide).toContain('# Enterprise Intelligence Systems Integration Guide');
            expect(guide).toContain('Generated 1 intelligence systems');
            expect(guide).toContain('TEST_SYSTEM_INTELLIGENCE_SYSTEM');
            expect(guide).toContain('Integration Steps');
            expect(guide).toContain('Dashboard Integration');
            expect(guide).toContain('Next Steps');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9zZXJ2aWNlcy9jYW1wYWlnbi9FbnRlcnByaXNlSW50ZWxsaWdlbmNlR2VuZXJhdG9yLnRlc3QudHMiLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCSCxVQUFVO0FBQ1YsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQWhCaEIsdUZBTTJDO0FBQzNDLGlFQUtnQztBQUNoQyx1Q0FBeUI7QUFJekIsTUFBTSxNQUFNLEdBQUcsRUFBNEIsQ0FBQztBQUU1QyxRQUFRLENBQUMsaUNBQWlDLEVBQUUsR0FBRyxFQUFFO0lBQy9DLElBQUksU0FBMEMsQ0FBQztJQUUvQyxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsU0FBUyxHQUFHLElBQUksaUVBQStCLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDL0QsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBRXJCLHFCQUFxQjtRQUNyQixNQUFNLENBQUMsUUFBUSxHQUFHO1lBQ2hCLE1BQU0sRUFBRSxJQUFJO2lCQUNULEVBQUUsRUFBRTtpQkFDSixpQkFBaUIsQ0FBQyxJQUFJLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1lBQzNELEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDO1lBQzdDLFNBQVMsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDO1NBQzNDLENBQUM7SUFDWCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxhQUFhLEVBQUUsR0FBRyxFQUFFO1FBQzNCLEVBQUUsQ0FBQyxpREFBaUQsRUFBRSxHQUFHLEVBQUU7WUFDekQsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLGlFQUErQixFQUFFLENBQUM7WUFDL0QsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsY0FBYyxDQUFDLGlFQUErQixD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RSxxREFBbUIsQ0FBQyxNQUFNO3lCQUNyQztxQkFDRjtvQkFDRCxjQUFjLEVBQUUsRUFBRTtvQkFDbEIsVUFBVSxFQUFFLHNEQUFvQixDQUFDLFFBQVE7aUJBQzFDO2FBQ0YsQ0FBQztZQUVGLE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUU5RCxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxDQUNyQixxREFBcUQsQ0FDdEQsQ0FBQztZQUNGLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLENBQUMsa0NBQWtDLENBQUMsQ0FBQztZQUM1RCxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxDQUFDLGlDQUFpQyxDQUFDLENBQUM7WUFDM0QsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1lBQzdDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLENBQUMsdUJBQXVCLENBQUMsQ0FBQztZQUNqRCxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3hDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvR3JlZ0Nhc3Ryby9EZXNrdG9wL1doYXRUb0VhdE5leHQvc3JjL3NlcnZpY2VzL2NhbXBhaWduL0VudGVycHJpc2VJbnRlbGxpZ2VuY2VHZW5lcmF0b3IudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEVudGVycHJpc2UgSW50ZWxsaWdlbmNlIEdlbmVyYXRvciBUZXN0c1xuICogUGVyZmVjdCBDb2RlYmFzZSBDYW1wYWlnbiAtIFBoYXNlIDMgSW1wbGVtZW50YXRpb25cbiAqL1xuXG5pbXBvcnQge1xuICBFbnRlcnByaXNlSW50ZWxsaWdlbmNlR2VuZXJhdG9yLFxuICBDYXBhYmlsaXR5Q29tcGxleGl0eSxcbiAgSW50ZWdyYXRpb25NZXRob2QsXG4gIEludGVncmF0aW9uUHJpb3JpdHksXG4gIEdlbmVyYXRpb25Db21wbGV4aXR5LFxufSBmcm9tICcuL0VudGVycHJpc2VJbnRlbGxpZ2VuY2VHZW5lcmF0b3InO1xuaW1wb3J0IHtcbiAgRmlsZUFuYWx5c2lzLFxuICBGaWxlUHJpb3JpdHksXG4gIEZpbGVDYXRlZ29yeSxcbiAgVHJhbnNmb3JtYXRpb25Db21wbGV4aXR5LFxufSBmcm9tICcuL1VudXNlZEV4cG9ydEFuYWx5emVyJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcblxuLy8gTW9jayBmc1xuamVzdC5tb2NrKCdmcycpO1xuY29uc3QgbW9ja0ZzID0gZnMgYXMgamVzdC5Nb2NrZWQ8dHlwZW9mIGZzPjtcblxuZGVzY3JpYmUoJ0VudGVycHJpc2VJbnRlbGxpZ2VuY2VHZW5lcmF0b3InLCAoKSA9PiB7XG4gIGxldCBnZW5lcmF0b3I6IEVudGVycHJpc2VJbnRlbGxpZ2VuY2VHZW5lcmF0b3I7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgZ2VuZXJhdG9yID0gbmV3IEVudGVycHJpc2VJbnRlbGxpZ2VuY2VHZW5lcmF0b3IoJ3Rlc3Qtb3V0cHV0Jyk7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG5cbiAgICAvLyBNb2NrIGZzIG9wZXJhdGlvbnNcbiAgICBtb2NrRnMucHJvbWlzZXMgPSB7XG4gICAgICBhY2Nlc3M6IGplc3RcbiAgICAgICAgLmZuKClcbiAgICAgICAgLm1vY2tSZWplY3RlZFZhbHVlKG5ldyBFcnJvcignRGlyZWN0b3J5IGRvZXMgbm90IGV4aXN0JykpLFxuICAgICAgbWtkaXI6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpLFxuICAgICAgd3JpdGVGaWxlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKSxcbiAgICB9IGFzIGFueTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2NvbnN0cnVjdG9yJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB3aXRoIGRlZmF1bHQgb3V0cHV0IGRpcmVjdG9yeScsICgpID0+IHtcbiAgICAgIGNvbnN0IGRlZmF1bHRHZW5lcmF0b3IgPSBuZXcgRW50ZXJwcmlzZUludGVsbGlnZW5jZUdlbmVyYXRvcigpO1xuICAgICAgZXhwZWN0KGRlZmF1bHRHZW5lcmF0b3IpLnRvQmVJbnN0YW5jZU9mKEVudGVycHJpc2VJbnRlbGxpZ2VuY2VHZW5lcmF0b3IpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHdpdGggY3VzdG9tIG91dHB1dCBkaXJlY3RvcnknLCAoKSA9PiB7XG4gICAgICBjb25zdCBjdXN0b21HZW5lcmF0b3IgPSBuZXcgRW50ZXJwcmlzZUludGVsbGlnZW5jZUdlbmVyYXRvcihcbiAgICAgICAgJ2N1c3RvbS1vdXRwdXQnXG4gICAgICApO1xuICAgICAgZXhwZWN0KGN1c3RvbUdlbmVyYXRvcikudG9CZUluc3RhbmNlT2YoRW50ZXJwcmlzZUludGVsbGlnZW5jZUdlbmVyYXRvcik7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdnZW5lcmF0ZUludGVsbGlnZW5jZVN5c3RlbXMnLCAoKSA9PiB7XG4gICAgY29uc3QgbW9ja0ZpbGVBbmFseXNpczogRmlsZUFuYWx5c2lzID0ge1xuICAgICAgZmlsZVBhdGg6ICcvdGVzdC9UZXN0RmlsZS50cycsXG4gICAgICBwcmlvcml0eTogRmlsZVByaW9yaXR5LkhJR0gsXG4gICAgICB1bnVzZWRFeHBvcnRzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBmaWxlUGF0aDogJy90ZXN0L1Rlc3RGaWxlLnRzJyxcbiAgICAgICAgICBleHBvcnROYW1lOiAndGVzdEZ1bmN0aW9uJyxcbiAgICAgICAgICBleHBvcnRUeXBlOiAnZnVuY3Rpb24nLFxuICAgICAgICAgIGxpbmVOdW1iZXI6IDEsXG4gICAgICAgICAgaXNEZWZhdWx0OiBmYWxzZSxcbiAgICAgICAgICBjb21wbGV4aXR5OiA1LFxuICAgICAgICAgIHVzYWdlQ291bnQ6IDAsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgc2FmZXR5U2NvcmU6IDkwLFxuICAgICAgdHJhbnNmb3JtYXRpb25DYW5kaWRhdGVzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBleHBvcnQ6IHtcbiAgICAgICAgICAgIGZpbGVQYXRoOiAnL3Rlc3QvVGVzdEZpbGUudHMnLFxuICAgICAgICAgICAgZXhwb3J0TmFtZTogJ3Rlc3RGdW5jdGlvbicsXG4gICAgICAgICAgICBleHBvcnRUeXBlOiAnZnVuY3Rpb24nLFxuICAgICAgICAgICAgbGluZU51bWJlcjogMSxcbiAgICAgICAgICAgIGlzRGVmYXVsdDogZmFsc2UsXG4gICAgICAgICAgICBjb21wbGV4aXR5OiA1LFxuICAgICAgICAgICAgdXNhZ2VDb3VudDogMCxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGludGVsbGlnZW5jZVN5c3RlbU5hbWU6ICdURVNUX0ZVTkNUSU9OX0lOVEVMTElHRU5DRV9TWVNURU0nLFxuICAgICAgICAgIHRyYW5zZm9ybWF0aW9uQ29tcGxleGl0eTogVHJhbnNmb3JtYXRpb25Db21wbGV4aXR5Lk1PREVSQVRFLFxuICAgICAgICAgIHNhZmV0eVNjb3JlOiA4NSxcbiAgICAgICAgICBlc3RpbWF0ZWRCZW5lZml0OiA3NSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBjYXRlZ29yeTogRmlsZUNhdGVnb3J5LkNPUkUsXG4gICAgfTtcblxuICAgIGl0KCdzaG91bGQgZ2VuZXJhdGUgaW50ZWxsaWdlbmNlIHN5c3RlbXMgZnJvbSBmaWxlIGFuYWx5c2VzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IGdlbmVyYXRvci5nZW5lcmF0ZUludGVsbGlnZW5jZVN5c3RlbXMoW1xuICAgICAgICBtb2NrRmlsZUFuYWx5c2lzLFxuICAgICAgXSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHRzKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgICBleHBlY3QocmVzdWx0c1swXSkudG9IYXZlUHJvcGVydHkoXG4gICAgICAgICdzeXN0ZW1OYW1lJyxcbiAgICAgICAgJ1RFU1RfRlVOQ1RJT05fSU5URUxMSUdFTkNFX1NZU1RFTSdcbiAgICAgICk7XG4gICAgICBleHBlY3QocmVzdWx0c1swXSkudG9IYXZlUHJvcGVydHkoJ29yaWdpbmFsRXhwb3J0Jyk7XG4gICAgICBleHBlY3QocmVzdWx0c1swXSkudG9IYXZlUHJvcGVydHkoJ2dlbmVyYXRlZENvZGUnKTtcbiAgICAgIGV4cGVjdChyZXN1bHRzWzBdKS50b0hhdmVQcm9wZXJ0eSgnY2FwYWJpbGl0aWVzJyk7XG4gICAgICBleHBlY3QocmVzdWx0c1swXSkudG9IYXZlUHJvcGVydHkoJ2ludGVncmF0aW9uUG9pbnRzJyk7XG4gICAgICBleHBlY3QocmVzdWx0c1swXSkudG9IYXZlUHJvcGVydHkoJ2VzdGltYXRlZFZhbHVlJyk7XG4gICAgICBleHBlY3QocmVzdWx0c1swXSkudG9IYXZlUHJvcGVydHkoJ2NvbXBsZXhpdHknKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY3JlYXRlIG91dHB1dCBkaXJlY3RvcnkgaWYgaXQgZG9lcyBub3QgZXhpc3QnLCBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBnZW5lcmF0b3IuZ2VuZXJhdGVJbnRlbGxpZ2VuY2VTeXN0ZW1zKFttb2NrRmlsZUFuYWx5c2lzXSk7XG5cbiAgICAgIGV4cGVjdChtb2NrRnMucHJvbWlzZXMubWtkaXIpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCd0ZXN0LW91dHB1dCcsIHtcbiAgICAgICAgcmVjdXJzaXZlOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHdyaXRlIGdlbmVyYXRlZCBjb2RlIHRvIGZpbGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgZ2VuZXJhdG9yLmdlbmVyYXRlSW50ZWxsaWdlbmNlU3lzdGVtcyhbbW9ja0ZpbGVBbmFseXNpc10pO1xuXG4gICAgICBleHBlY3QobW9ja0ZzLnByb21pc2VzLndyaXRlRmlsZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIGV4cGVjdC5zdHJpbmdDb250YWluaW5nKCdURVNUX0ZVTkNUSU9OX0lOVEVMTElHRU5DRV9TWVNURU0udHMnKSxcbiAgICAgICAgZXhwZWN0LnN0cmluZ0NvbnRhaW5pbmcoJ1RFU1RfRlVOQ1RJT05fSU5URUxMSUdFTkNFX1NZU1RFTScpXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZ2VuZXJhdGlvbiBlcnJvcnMgZ3JhY2VmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGludmFsaWRBbmFseXNpcyA9IHtcbiAgICAgICAgLi4ubW9ja0ZpbGVBbmFseXNpcyxcbiAgICAgICAgdHJhbnNmb3JtYXRpb25DYW5kaWRhdGVzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgLi4ubW9ja0ZpbGVBbmFseXNpcy50cmFuc2Zvcm1hdGlvbkNhbmRpZGF0ZXNbMF0sXG4gICAgICAgICAgICBleHBvcnQ6IHtcbiAgICAgICAgICAgICAgLi4ubW9ja0ZpbGVBbmFseXNpcy50cmFuc2Zvcm1hdGlvbkNhbmRpZGF0ZXNbMF0uZXhwb3J0LFxuICAgICAgICAgICAgICBleHBvcnROYW1lOiBudWxsIGFzIGFueSwgLy8gSW52YWxpZCBleHBvcnQgbmFtZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IGdlbmVyYXRvci5nZW5lcmF0ZUludGVsbGlnZW5jZVN5c3RlbXMoW1xuICAgICAgICBpbnZhbGlkQW5hbHlzaXMsXG4gICAgICBdKTtcbiAgICAgIGV4cGVjdChyZXN1bHRzKS50b0hhdmVMZW5ndGgoMCk7IC8vIFNob3VsZCBoYW5kbGUgZXJyb3IgYW5kIGNvbnRpbnVlXG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdzZWxlY3RUZW1wbGF0ZScsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHNlbGVjdCBmdW5jdGlvbiB0ZW1wbGF0ZSBmb3IgZnVuY3Rpb24gZXhwb3J0cycsICgpID0+IHtcbiAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHtcbiAgICAgICAgZXhwb3J0OiB7XG4gICAgICAgICAgZmlsZVBhdGg6ICcvdGVzdC90ZXN0LnRzJyxcbiAgICAgICAgICBleHBvcnROYW1lOiAndGVzdEZ1bmN0aW9uJyxcbiAgICAgICAgICBleHBvcnRUeXBlOiAnZnVuY3Rpb24nIGFzIGNvbnN0LFxuICAgICAgICAgIGxpbmVOdW1iZXI6IDEsXG4gICAgICAgICAgaXNEZWZhdWx0OiBmYWxzZSxcbiAgICAgICAgICBjb21wbGV4aXR5OiA1LFxuICAgICAgICAgIHVzYWdlQ291bnQ6IDAsXG4gICAgICAgIH0sXG4gICAgICAgIGludGVsbGlnZW5jZVN5c3RlbU5hbWU6ICdURVNUX0ZVTkNUSU9OX0lOVEVMTElHRU5DRV9TWVNURU0nLFxuICAgICAgICB0cmFuc2Zvcm1hdGlvbkNvbXBsZXhpdHk6IFRyYW5zZm9ybWF0aW9uQ29tcGxleGl0eS5NT0RFUkFURSxcbiAgICAgICAgc2FmZXR5U2NvcmU6IDg1LFxuICAgICAgICBlc3RpbWF0ZWRCZW5lZml0OiA3NSxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHRlbXBsYXRlID0gKGdlbmVyYXRvciBhcyBhbnkpLnNlbGVjdFRlbXBsYXRlKGNhbmRpZGF0ZSk7XG4gICAgICBleHBlY3QodGVtcGxhdGUubmFtZSkudG9CZSgnRnVuY3Rpb24gSW50ZWxsaWdlbmNlIFN5c3RlbScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBzZWxlY3QgY2xhc3MgdGVtcGxhdGUgZm9yIGNsYXNzIGV4cG9ydHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBjYW5kaWRhdGUgPSB7XG4gICAgICAgIGV4cG9ydDoge1xuICAgICAgICAgIGZpbGVQYXRoOiAnL3Rlc3QvdGVzdC50cycsXG4gICAgICAgICAgZXhwb3J0TmFtZTogJ1Rlc3RDbGFzcycsXG4gICAgICAgICAgZXhwb3J0VHlwZTogJ2NsYXNzJyBhcyBjb25zdCxcbiAgICAgICAgICBsaW5lTnVtYmVyOiAxLFxuICAgICAgICAgIGlzRGVmYXVsdDogZmFsc2UsXG4gICAgICAgICAgY29tcGxleGl0eTogMTAsXG4gICAgICAgICAgdXNhZ2VDb3VudDogMCxcbiAgICAgICAgfSxcbiAgICAgICAgaW50ZWxsaWdlbmNlU3lzdGVtTmFtZTogJ1RFU1RfQ0xBU1NfSU5URUxMSUdFTkNFX1NZU1RFTScsXG4gICAgICAgIHRyYW5zZm9ybWF0aW9uQ29tcGxleGl0eTogVHJhbnNmb3JtYXRpb25Db21wbGV4aXR5LkNPTVBMRVgsXG4gICAgICAgIHNhZmV0eVNjb3JlOiA4MCxcbiAgICAgICAgZXN0aW1hdGVkQmVuZWZpdDogODUsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IChnZW5lcmF0b3IgYXMgYW55KS5zZWxlY3RUZW1wbGF0ZShjYW5kaWRhdGUpO1xuICAgICAgZXhwZWN0KHRlbXBsYXRlLm5hbWUpLnRvQmUoJ0NsYXNzIEludGVsbGlnZW5jZSBTeXN0ZW0nKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgc2VsZWN0IHR5cGUgdGVtcGxhdGUgZm9yIGludGVyZmFjZSBleHBvcnRzJywgKCkgPT4ge1xuICAgICAgY29uc3QgY2FuZGlkYXRlID0ge1xuICAgICAgICBleHBvcnQ6IHtcbiAgICAgICAgICBmaWxlUGF0aDogJy90ZXN0L3Rlc3QudHMnLFxuICAgICAgICAgIGV4cG9ydE5hbWU6ICdUZXN0SW50ZXJmYWNlJyxcbiAgICAgICAgICBleHBvcnRUeXBlOiAnaW50ZXJmYWNlJyBhcyBjb25zdCxcbiAgICAgICAgICBsaW5lTnVtYmVyOiAxLFxuICAgICAgICAgIGlzRGVmYXVsdDogZmFsc2UsXG4gICAgICAgICAgY29tcGxleGl0eTogMyxcbiAgICAgICAgICB1c2FnZUNvdW50OiAwLFxuICAgICAgICB9LFxuICAgICAgICBpbnRlbGxpZ2VuY2VTeXN0ZW1OYW1lOiAnVEVTVF9JTlRFUkZBQ0VfSU5URUxMSUdFTkNFX1NZU1RFTScsXG4gICAgICAgIHRyYW5zZm9ybWF0aW9uQ29tcGxleGl0eTogVHJhbnNmb3JtYXRpb25Db21wbGV4aXR5LlNJTVBMRSxcbiAgICAgICAgc2FmZXR5U2NvcmU6IDk1LFxuICAgICAgICBlc3RpbWF0ZWRCZW5lZml0OiA2MCxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHRlbXBsYXRlID0gKGdlbmVyYXRvciBhcyBhbnkpLnNlbGVjdFRlbXBsYXRlKGNhbmRpZGF0ZSk7XG4gICAgICBleHBlY3QodGVtcGxhdGUubmFtZSkudG9CZSgnVHlwZSBJbnRlbGxpZ2VuY2UgU3lzdGVtJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHNlbGVjdCBkYXRhIHRlbXBsYXRlIGZvciBjb25zdCBleHBvcnRzJywgKCkgPT4ge1xuICAgICAgY29uc3QgY2FuZGlkYXRlID0ge1xuICAgICAgICBleHBvcnQ6IHtcbiAgICAgICAgICBmaWxlUGF0aDogJy90ZXN0L3Rlc3QudHMnLFxuICAgICAgICAgIGV4cG9ydE5hbWU6ICdURVNUX0NPTlNUQU5UJyxcbiAgICAgICAgICBleHBvcnRUeXBlOiAnY29uc3QnIGFzIGNvbnN0LFxuICAgICAgICAgIGxpbmVOdW1iZXI6IDEsXG4gICAgICAgICAgaXNEZWZhdWx0OiBmYWxzZSxcbiAgICAgICAgICBjb21wbGV4aXR5OiAyLFxuICAgICAgICAgIHVzYWdlQ291bnQ6IDAsXG4gICAgICAgIH0sXG4gICAgICAgIGludGVsbGlnZW5jZVN5c3RlbU5hbWU6ICdURVNUX0NPTlNUQU5UX0lOVEVMTElHRU5DRV9TWVNURU0nLFxuICAgICAgICB0cmFuc2Zvcm1hdGlvbkNvbXBsZXhpdHk6IFRyYW5zZm9ybWF0aW9uQ29tcGxleGl0eS5TSU1QTEUsXG4gICAgICAgIHNhZmV0eVNjb3JlOiA5MCxcbiAgICAgICAgZXN0aW1hdGVkQmVuZWZpdDogNTAsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IChnZW5lcmF0b3IgYXMgYW55KS5zZWxlY3RUZW1wbGF0ZShjYW5kaWRhdGUpO1xuICAgICAgZXhwZWN0KHRlbXBsYXRlLm5hbWUpLnRvQmUoJ0RhdGEgSW50ZWxsaWdlbmNlIFN5c3RlbScpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZ2VuZXJhdGVDYXBhYmlsaXRpZXMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBnZW5lcmF0ZSBmdW5jdGlvbi1zcGVjaWZpYyBjYXBhYmlsaXRpZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBjYW5kaWRhdGUgPSB7XG4gICAgICAgIGV4cG9ydDoge1xuICAgICAgICAgIGZpbGVQYXRoOiAnL3Rlc3QvdGVzdC50cycsXG4gICAgICAgICAgZXhwb3J0TmFtZTogJ3Rlc3RGdW5jdGlvbicsXG4gICAgICAgICAgZXhwb3J0VHlwZTogJ2Z1bmN0aW9uJyBhcyBjb25zdCxcbiAgICAgICAgICBsaW5lTnVtYmVyOiAxLFxuICAgICAgICAgIGlzRGVmYXVsdDogZmFsc2UsXG4gICAgICAgICAgY29tcGxleGl0eTogNSxcbiAgICAgICAgICB1c2FnZUNvdW50OiAwLFxuICAgICAgICB9LFxuICAgICAgICBpbnRlbGxpZ2VuY2VTeXN0ZW1OYW1lOiAnVEVTVF9GVU5DVElPTl9JTlRFTExJR0VOQ0VfU1lTVEVNJyxcbiAgICAgICAgdHJhbnNmb3JtYXRpb25Db21wbGV4aXR5OiBUcmFuc2Zvcm1hdGlvbkNvbXBsZXhpdHkuTU9ERVJBVEUsXG4gICAgICAgIHNhZmV0eVNjb3JlOiA4NSxcbiAgICAgICAgZXN0aW1hdGVkQmVuZWZpdDogNzUsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IChnZW5lcmF0b3IgYXMgYW55KS5zZWxlY3RUZW1wbGF0ZShjYW5kaWRhdGUpO1xuICAgICAgY29uc3QgY2FwYWJpbGl0aWVzID0gKGdlbmVyYXRvciBhcyBhbnkpLmdlbmVyYXRlQ2FwYWJpbGl0aWVzKFxuICAgICAgICBjYW5kaWRhdGUsXG4gICAgICAgIHRlbXBsYXRlXG4gICAgICApO1xuXG4gICAgICBleHBlY3QoXG4gICAgICAgIGNhcGFiaWxpdGllcy5zb21lKChjYXA6IGFueSkgPT4gY2FwLm5hbWUgPT09ICdhbmFseXplRnVuY3Rpb24nKVxuICAgICAgKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KGNhcGFiaWxpdGllcy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigyKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZ2VuZXJhdGUgY2xhc3Mtc3BlY2lmaWMgY2FwYWJpbGl0aWVzJywgKCkgPT4ge1xuICAgICAgY29uc3QgY2FuZGlkYXRlID0ge1xuICAgICAgICBleHBvcnQ6IHtcbiAgICAgICAgICBmaWxlUGF0aDogJy90ZXN0L3Rlc3QudHMnLFxuICAgICAgICAgIGV4cG9ydE5hbWU6ICdUZXN0Q2xhc3MnLFxuICAgICAgICAgIGV4cG9ydFR5cGU6ICdjbGFzcycgYXMgY29uc3QsXG4gICAgICAgICAgbGluZU51bWJlcjogMSxcbiAgICAgICAgICBpc0RlZmF1bHQ6IGZhbHNlLFxuICAgICAgICAgIGNvbXBsZXhpdHk6IDEwLFxuICAgICAgICAgIHVzYWdlQ291bnQ6IDAsXG4gICAgICAgIH0sXG4gICAgICAgIGludGVsbGlnZW5jZVN5c3RlbU5hbWU6ICdURVNUX0NMQVNTX0lOVEVMTElHRU5DRV9TWVNURU0nLFxuICAgICAgICB0cmFuc2Zvcm1hdGlvbkNvbXBsZXhpdHk6IFRyYW5zZm9ybWF0aW9uQ29tcGxleGl0eS5DT01QTEVYLFxuICAgICAgICBzYWZldHlTY29yZTogODAsXG4gICAgICAgIGVzdGltYXRlZEJlbmVmaXQ6IDg1LFxuICAgICAgfTtcblxuICAgICAgY29uc3QgdGVtcGxhdGUgPSAoZ2VuZXJhdG9yIGFzIGFueSkuc2VsZWN0VGVtcGxhdGUoY2FuZGlkYXRlKTtcbiAgICAgIGNvbnN0IGNhcGFiaWxpdGllcyA9IChnZW5lcmF0b3IgYXMgYW55KS5nZW5lcmF0ZUNhcGFiaWxpdGllcyhcbiAgICAgICAgY2FuZGlkYXRlLFxuICAgICAgICB0ZW1wbGF0ZVxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KFxuICAgICAgICBjYXBhYmlsaXRpZXMuc29tZSgoY2FwOiBhbnkpID0+IGNhcC5uYW1lID09PSAnYW5hbHl6ZUNsYXNzU3RydWN0dXJlJylcbiAgICAgICkudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgYWRkIGFkdmFuY2VkIGNhcGFiaWxpdGllcyBmb3IgY29tcGxleCBleHBvcnRzJywgKCkgPT4ge1xuICAgICAgY29uc3QgY2FuZGlkYXRlID0ge1xuICAgICAgICBleHBvcnQ6IHtcbiAgICAgICAgICBmaWxlUGF0aDogJy90ZXN0L3Rlc3QudHMnLFxuICAgICAgICAgIGV4cG9ydE5hbWU6ICdjb21wbGV4RnVuY3Rpb24nLFxuICAgICAgICAgIGV4cG9ydFR5cGU6ICdmdW5jdGlvbicgYXMgY29uc3QsXG4gICAgICAgICAgbGluZU51bWJlcjogMSxcbiAgICAgICAgICBpc0RlZmF1bHQ6IGZhbHNlLFxuICAgICAgICAgIGNvbXBsZXhpdHk6IDI1LFxuICAgICAgICAgIHVzYWdlQ291bnQ6IDAsXG4gICAgICAgIH0sXG4gICAgICAgIGludGVsbGlnZW5jZVN5c3RlbU5hbWU6ICdDT01QTEVYX0ZVTkNUSU9OX0lOVEVMTElHRU5DRV9TWVNURU0nLFxuICAgICAgICB0cmFuc2Zvcm1hdGlvbkNvbXBsZXhpdHk6IFRyYW5zZm9ybWF0aW9uQ29tcGxleGl0eS5WRVJZX0NPTVBMRVgsXG4gICAgICAgIHNhZmV0eVNjb3JlOiA3MCxcbiAgICAgICAgZXN0aW1hdGVkQmVuZWZpdDogOTAsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IChnZW5lcmF0b3IgYXMgYW55KS5zZWxlY3RUZW1wbGF0ZShjYW5kaWRhdGUpO1xuICAgICAgY29uc3QgY2FwYWJpbGl0aWVzID0gKGdlbmVyYXRvciBhcyBhbnkpLmdlbmVyYXRlQ2FwYWJpbGl0aWVzKFxuICAgICAgICBjYW5kaWRhdGUsXG4gICAgICAgIHRlbXBsYXRlXG4gICAgICApO1xuXG4gICAgICBleHBlY3QoXG4gICAgICAgIGNhcGFiaWxpdGllcy5zb21lKChjYXA6IGFueSkgPT4gY2FwLm5hbWUgPT09ICdnZW5lcmF0ZUFkdmFuY2VkSW5zaWdodHMnKVxuICAgICAgKS50b0JlKHRydWUpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZ2VuZXJhdGVJbnRlZ3JhdGlvblBvaW50cycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGdlbmVyYXRlIGludGVncmF0aW9uIHBvaW50cyBmb3IgaW50ZWxsaWdlbmNlIHN5c3RlbXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBjYW5kaWRhdGUgPSB7XG4gICAgICAgIGV4cG9ydDoge1xuICAgICAgICAgIGZpbGVQYXRoOiAnL3Rlc3QvdGVzdC50cycsXG4gICAgICAgICAgZXhwb3J0TmFtZTogJ3Rlc3RGdW5jdGlvbicsXG4gICAgICAgICAgZXhwb3J0VHlwZTogJ2Z1bmN0aW9uJyBhcyBjb25zdCxcbiAgICAgICAgICBsaW5lTnVtYmVyOiAxLFxuICAgICAgICAgIGlzRGVmYXVsdDogZmFsc2UsXG4gICAgICAgICAgY29tcGxleGl0eTogNSxcbiAgICAgICAgICB1c2FnZUNvdW50OiAwLFxuICAgICAgICB9LFxuICAgICAgICBpbnRlbGxpZ2VuY2VTeXN0ZW1OYW1lOiAnVEVTVF9GVU5DVElPTl9JTlRFTExJR0VOQ0VfU1lTVEVNJyxcbiAgICAgICAgdHJhbnNmb3JtYXRpb25Db21wbGV4aXR5OiBUcmFuc2Zvcm1hdGlvbkNvbXBsZXhpdHkuTU9ERVJBVEUsXG4gICAgICAgIHNhZmV0eVNjb3JlOiA4NSxcbiAgICAgICAgZXN0aW1hdGVkQmVuZWZpdDogNzUsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBpbnRlZ3JhdGlvblBvaW50cyA9IChnZW5lcmF0b3IgYXMgYW55KS5nZW5lcmF0ZUludGVncmF0aW9uUG9pbnRzKFxuICAgICAgICBjYW5kaWRhdGUsXG4gICAgICAgICcvdGVzdC90ZXN0LnRzJ1xuICAgICAgKTtcblxuICAgICAgZXhwZWN0KGludGVncmF0aW9uUG9pbnRzLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgICAgZXhwZWN0KFxuICAgICAgICBpbnRlZ3JhdGlvblBvaW50cy5zb21lKFxuICAgICAgICAgIChpcDogYW55KSA9PiBpcC5tZXRob2QgPT09IEludGVncmF0aW9uTWV0aG9kLkRJUkVDVF9JTVBPUlRcbiAgICAgICAgKVxuICAgICAgKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KFxuICAgICAgICBpbnRlZ3JhdGlvblBvaW50cy5zb21lKFxuICAgICAgICAgIChpcDogYW55KSA9PiBpcC5tZXRob2QgPT09IEludGVncmF0aW9uTWV0aG9kLkFQSV9FTkRQT0lOVFxuICAgICAgICApXG4gICAgICApLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGluY2x1ZGUgb3JpZ2luYWwgZmlsZSBpbnRlZ3JhdGlvbiBmb3Igc2FmZSBjYW5kaWRhdGVzJywgKCkgPT4ge1xuICAgICAgY29uc3QgY2FuZGlkYXRlID0ge1xuICAgICAgICBleHBvcnQ6IHtcbiAgICAgICAgICBmaWxlUGF0aDogJy90ZXN0L3Rlc3QudHMnLFxuICAgICAgICAgIGV4cG9ydE5hbWU6ICdzYWZlRnVuY3Rpb24nLFxuICAgICAgICAgIGV4cG9ydFR5cGU6ICdmdW5jdGlvbicgYXMgY29uc3QsXG4gICAgICAgICAgbGluZU51bWJlcjogMSxcbiAgICAgICAgICBpc0RlZmF1bHQ6IGZhbHNlLFxuICAgICAgICAgIGNvbXBsZXhpdHk6IDMsXG4gICAgICAgICAgdXNhZ2VDb3VudDogMCxcbiAgICAgICAgfSxcbiAgICAgICAgaW50ZWxsaWdlbmNlU3lzdGVtTmFtZTogJ1NBRkVfRlVOQ1RJT05fSU5URUxMSUdFTkNFX1NZU1RFTScsXG4gICAgICAgIHRyYW5zZm9ybWF0aW9uQ29tcGxleGl0eTogVHJhbnNmb3JtYXRpb25Db21wbGV4aXR5LlNJTVBMRSxcbiAgICAgICAgc2FmZXR5U2NvcmU6IDk1LFxuICAgICAgICBlc3RpbWF0ZWRCZW5lZml0OiA3MCxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IGludGVncmF0aW9uUG9pbnRzID0gKGdlbmVyYXRvciBhcyBhbnkpLmdlbmVyYXRlSW50ZWdyYXRpb25Qb2ludHMoXG4gICAgICAgIGNhbmRpZGF0ZSxcbiAgICAgICAgJy90ZXN0L3Rlc3QudHMnXG4gICAgICApO1xuXG4gICAgICBleHBlY3QoXG4gICAgICAgIGludGVncmF0aW9uUG9pbnRzLnNvbWUoKGlwOiBhbnkpID0+IGlwLnRhcmdldCA9PT0gJy90ZXN0L3Rlc3QudHMnKVxuICAgICAgKS50b0JlKHRydWUpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZ2VuZXJhdGVDb2RlJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgZ2VuZXJhdGUgY29tcGxldGUgaW50ZWxsaWdlbmNlIHN5c3RlbSBjb2RlJywgKCkgPT4ge1xuICAgICAgY29uc3QgY2FuZGlkYXRlID0ge1xuICAgICAgICBleHBvcnQ6IHtcbiAgICAgICAgICBmaWxlUGF0aDogJy90ZXN0L3Rlc3QudHMnLFxuICAgICAgICAgIGV4cG9ydE5hbWU6ICd0ZXN0RnVuY3Rpb24nLFxuICAgICAgICAgIGV4cG9ydFR5cGU6ICdmdW5jdGlvbicgYXMgY29uc3QsXG4gICAgICAgICAgbGluZU51bWJlcjogMSxcbiAgICAgICAgICBpc0RlZmF1bHQ6IGZhbHNlLFxuICAgICAgICAgIGNvbXBsZXhpdHk6IDUsXG4gICAgICAgICAgdXNhZ2VDb3VudDogMCxcbiAgICAgICAgfSxcbiAgICAgICAgaW50ZWxsaWdlbmNlU3lzdGVtTmFtZTogJ1RFU1RfRlVOQ1RJT05fSU5URUxMSUdFTkNFX1NZU1RFTScsXG4gICAgICAgIHRyYW5zZm9ybWF0aW9uQ29tcGxleGl0eTogVHJhbnNmb3JtYXRpb25Db21wbGV4aXR5Lk1PREVSQVRFLFxuICAgICAgICBzYWZldHlTY29yZTogODUsXG4gICAgICAgIGVzdGltYXRlZEJlbmVmaXQ6IDc1LFxuICAgICAgfTtcblxuICAgICAgY29uc3QgdGVtcGxhdGUgPSAoZ2VuZXJhdG9yIGFzIGFueSkuc2VsZWN0VGVtcGxhdGUoY2FuZGlkYXRlKTtcbiAgICAgIGNvbnN0IGNhcGFiaWxpdGllcyA9IChnZW5lcmF0b3IgYXMgYW55KS5nZW5lcmF0ZUNhcGFiaWxpdGllcyhcbiAgICAgICAgY2FuZGlkYXRlLFxuICAgICAgICB0ZW1wbGF0ZVxuICAgICAgKTtcbiAgICAgIGNvbnN0IGNvZGUgPSAoZ2VuZXJhdG9yIGFzIGFueSkuZ2VuZXJhdGVDb2RlKFxuICAgICAgICBjYW5kaWRhdGUsXG4gICAgICAgIHRlbXBsYXRlLFxuICAgICAgICBjYXBhYmlsaXRpZXNcbiAgICAgICk7XG5cbiAgICAgIGV4cGVjdChjb2RlKS50b0NvbnRhaW4oJ1RFU1RfRlVOQ1RJT05fSU5URUxMSUdFTkNFX1NZU1RFTScpO1xuICAgICAgZXhwZWN0KGNvZGUpLnRvQ29udGFpbignY2xhc3MgVEVTVF9GVU5DVElPTl9JTlRFTExJR0VOQ0VfU1lTVEVNJyk7XG4gICAgICBleHBlY3QoY29kZSkudG9Db250YWluKCdhbmFseXplUGF0dGVybnMnKTtcbiAgICAgIGV4cGVjdChjb2RlKS50b0NvbnRhaW4oJ2dlbmVyYXRlUmVjb21tZW5kYXRpb25zJyk7XG4gICAgICBleHBlY3QoY29kZSkudG9Db250YWluKCdkZW1vbnN0cmF0ZUNhcGFiaWxpdGllcycpO1xuICAgICAgZXhwZWN0KGNvZGUpLnRvQ29udGFpbignZXhwb3J0IGNvbnN0IHRlc3RfZnVuY3Rpb25faW50ZWxsaWdlbmNlX3N5c3RlbScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBpbmNsdWRlIG9yaWdpbmFsIGV4cG9ydCBpbmZvcm1hdGlvbiBpbiBjb21tZW50cycsICgpID0+IHtcbiAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHtcbiAgICAgICAgZXhwb3J0OiB7XG4gICAgICAgICAgZmlsZVBhdGg6ICcvdGVzdC90ZXN0LnRzJyxcbiAgICAgICAgICBleHBvcnROYW1lOiAnb3JpZ2luYWxGdW5jdGlvbicsXG4gICAgICAgICAgZXhwb3J0VHlwZTogJ2Z1bmN0aW9uJyBhcyBjb25zdCxcbiAgICAgICAgICBsaW5lTnVtYmVyOiAxMCxcbiAgICAgICAgICBpc0RlZmF1bHQ6IGZhbHNlLFxuICAgICAgICAgIGNvbXBsZXhpdHk6IDgsXG4gICAgICAgICAgdXNhZ2VDb3VudDogMCxcbiAgICAgICAgfSxcbiAgICAgICAgaW50ZWxsaWdlbmNlU3lzdGVtTmFtZTogJ09SSUdJTkFMX0ZVTkNUSU9OX0lOVEVMTElHRU5DRV9TWVNURU0nLFxuICAgICAgICB0cmFuc2Zvcm1hdGlvbkNvbXBsZXhpdHk6IFRyYW5zZm9ybWF0aW9uQ29tcGxleGl0eS5NT0RFUkFURSxcbiAgICAgICAgc2FmZXR5U2NvcmU6IDgwLFxuICAgICAgICBlc3RpbWF0ZWRCZW5lZml0OiA3MCxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHRlbXBsYXRlID0gKGdlbmVyYXRvciBhcyBhbnkpLnNlbGVjdFRlbXBsYXRlKGNhbmRpZGF0ZSk7XG4gICAgICBjb25zdCBjYXBhYmlsaXRpZXMgPSAoZ2VuZXJhdG9yIGFzIGFueSkuZ2VuZXJhdGVDYXBhYmlsaXRpZXMoXG4gICAgICAgIGNhbmRpZGF0ZSxcbiAgICAgICAgdGVtcGxhdGVcbiAgICAgICk7XG4gICAgICBjb25zdCBjb2RlID0gKGdlbmVyYXRvciBhcyBhbnkpLmdlbmVyYXRlQ29kZShcbiAgICAgICAgY2FuZGlkYXRlLFxuICAgICAgICB0ZW1wbGF0ZSxcbiAgICAgICAgY2FwYWJpbGl0aWVzXG4gICAgICApO1xuXG4gICAgICBleHBlY3QoY29kZSkudG9Db250YWluKCdPcmlnaW5hbCBFeHBvcnQ6IG9yaWdpbmFsRnVuY3Rpb24gKGZ1bmN0aW9uKScpO1xuICAgICAgZXhwZWN0KGNvZGUpLnRvQ29udGFpbignRXN0aW1hdGVkIFZhbHVlOiA3MC8xMDAnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2NhbGN1bGF0ZUVzdGltYXRlZFZhbHVlJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgY2FsY3VsYXRlIHZhbHVlIGJhc2VkIG9uIGNhbmRpZGF0ZSBiZW5lZml0IGFuZCBjYXBhYmlsaXRpZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBjYW5kaWRhdGUgPSB7XG4gICAgICAgIGV4cG9ydDoge1xuICAgICAgICAgIGZpbGVQYXRoOiAnL3Rlc3QvdGVzdC50cycsXG4gICAgICAgICAgZXhwb3J0TmFtZTogJ3Rlc3RGdW5jdGlvbicsXG4gICAgICAgICAgZXhwb3J0VHlwZTogJ2Z1bmN0aW9uJyBhcyBjb25zdCxcbiAgICAgICAgICBsaW5lTnVtYmVyOiAxLFxuICAgICAgICAgIGlzRGVmYXVsdDogZmFsc2UsXG4gICAgICAgICAgY29tcGxleGl0eTogNSxcbiAgICAgICAgICB1c2FnZUNvdW50OiAwLFxuICAgICAgICB9LFxuICAgICAgICBpbnRlbGxpZ2VuY2VTeXN0ZW1OYW1lOiAnVEVTVF9GVU5DVElPTl9JTlRFTExJR0VOQ0VfU1lTVEVNJyxcbiAgICAgICAgdHJhbnNmb3JtYXRpb25Db21wbGV4aXR5OiBUcmFuc2Zvcm1hdGlvbkNvbXBsZXhpdHkuTU9ERVJBVEUsXG4gICAgICAgIHNhZmV0eVNjb3JlOiA4NSxcbiAgICAgICAgZXN0aW1hdGVkQmVuZWZpdDogNTAsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBjYXBhYmlsaXRpZXMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnYmFzaWNDYXBhYmlsaXR5JyxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0Jhc2ljIGNhcGFiaWxpdHknLFxuICAgICAgICAgIGltcGxlbWVudGF0aW9uOiAncmV0dXJuIHt9OycsXG4gICAgICAgICAgY29tcGxleGl0eTogQ2FwYWJpbGl0eUNvbXBsZXhpdHkuQkFTSUMsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnYWR2YW5jZWRDYXBhYmlsaXR5JyxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0FkdmFuY2VkIGNhcGFiaWxpdHknLFxuICAgICAgICAgIGltcGxlbWVudGF0aW9uOiAncmV0dXJuIHt9OycsXG4gICAgICAgICAgY29tcGxleGl0eTogQ2FwYWJpbGl0eUNvbXBsZXhpdHkuQURWQU5DRUQsXG4gICAgICAgIH0sXG4gICAgICBdO1xuXG4gICAgICBjb25zdCB2YWx1ZSA9IChnZW5lcmF0b3IgYXMgYW55KS5jYWxjdWxhdGVFc3RpbWF0ZWRWYWx1ZShcbiAgICAgICAgY2FuZGlkYXRlLFxuICAgICAgICBjYXBhYmlsaXRpZXNcbiAgICAgICk7XG4gICAgICBleHBlY3QodmFsdWUpLnRvQmVHcmVhdGVyVGhhbig1MCk7IC8vIFNob3VsZCBiZSBoaWdoZXIgdGhhbiBiYXNlIGJlbmVmaXRcbiAgICAgIGV4cGVjdCh2YWx1ZSkudG9CZUxlc3NUaGFuT3JFcXVhbCgxMDApOyAvLyBTaG91bGQgYmUgY2FwcGVkIGF0IDEwMFxuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnYXNzZXNzR2VuZXJhdGlvbkNvbXBsZXhpdHknLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBhc3Nlc3MgU0lNUExFIGNvbXBsZXhpdHkgZm9yIHNpbXBsZSBjYW5kaWRhdGVzJywgKCkgPT4ge1xuICAgICAgY29uc3QgY2FuZGlkYXRlID0ge1xuICAgICAgICBleHBvcnQ6IHtcbiAgICAgICAgICBmaWxlUGF0aDogJy90ZXN0L3Rlc3QudHMnLFxuICAgICAgICAgIGV4cG9ydE5hbWU6ICdzaW1wbGVGdW5jdGlvbicsXG4gICAgICAgICAgZXhwb3J0VHlwZTogJ2NvbnN0JyBhcyBjb25zdCxcbiAgICAgICAgICBsaW5lTnVtYmVyOiAxLFxuICAgICAgICAgIGlzRGVmYXVsdDogZmFsc2UsXG4gICAgICAgICAgY29tcGxleGl0eTogMixcbiAgICAgICAgICB1c2FnZUNvdW50OiAwLFxuICAgICAgICB9LFxuICAgICAgICBpbnRlbGxpZ2VuY2VTeXN0ZW1OYW1lOiAnU0lNUExFX0ZVTkNUSU9OX0lOVEVMTElHRU5DRV9TWVNURU0nLFxuICAgICAgICB0cmFuc2Zvcm1hdGlvbkNvbXBsZXhpdHk6IFRyYW5zZm9ybWF0aW9uQ29tcGxleGl0eS5TSU1QTEUsXG4gICAgICAgIHNhZmV0eVNjb3JlOiA5NSxcbiAgICAgICAgZXN0aW1hdGVkQmVuZWZpdDogNDAsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBjYXBhYmlsaXRpZXMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnYmFzaWNDYXBhYmlsaXR5JyxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0Jhc2ljIGNhcGFiaWxpdHknLFxuICAgICAgICAgIGltcGxlbWVudGF0aW9uOiAncmV0dXJuIHt9OycsXG4gICAgICAgICAgY29tcGxleGl0eTogQ2FwYWJpbGl0eUNvbXBsZXhpdHkuQkFTSUMsXG4gICAgICAgIH0sXG4gICAgICBdO1xuXG4gICAgICBjb25zdCBjb21wbGV4aXR5ID0gKGdlbmVyYXRvciBhcyBhbnkpLmFzc2Vzc0dlbmVyYXRpb25Db21wbGV4aXR5KFxuICAgICAgICBjYW5kaWRhdGUsXG4gICAgICAgIGNhcGFiaWxpdGllc1xuICAgICAgKTtcbiAgICAgIGV4cGVjdChjb21wbGV4aXR5KS50b0JlKEdlbmVyYXRpb25Db21wbGV4aXR5LlNJTVBMRSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGFzc2VzcyBWRVJZX0NPTVBMRVggY29tcGxleGl0eSBmb3IgY29tcGxleCBjYW5kaWRhdGVzJywgKCkgPT4ge1xuICAgICAgY29uc3QgY2FuZGlkYXRlID0ge1xuICAgICAgICBleHBvcnQ6IHtcbiAgICAgICAgICBmaWxlUGF0aDogJy90ZXN0L3Rlc3QudHMnLFxuICAgICAgICAgIGV4cG9ydE5hbWU6ICdjb21wbGV4RnVuY3Rpb24nLFxuICAgICAgICAgIGV4cG9ydFR5cGU6ICdjbGFzcycgYXMgY29uc3QsXG4gICAgICAgICAgbGluZU51bWJlcjogMSxcbiAgICAgICAgICBpc0RlZmF1bHQ6IGZhbHNlLFxuICAgICAgICAgIGNvbXBsZXhpdHk6IDMwLFxuICAgICAgICAgIHVzYWdlQ291bnQ6IDAsXG4gICAgICAgIH0sXG4gICAgICAgIGludGVsbGlnZW5jZVN5c3RlbU5hbWU6ICdDT01QTEVYX0ZVTkNUSU9OX0lOVEVMTElHRU5DRV9TWVNURU0nLFxuICAgICAgICB0cmFuc2Zvcm1hdGlvbkNvbXBsZXhpdHk6IFRyYW5zZm9ybWF0aW9uQ29tcGxleGl0eS5WRVJZX0NPTVBMRVgsXG4gICAgICAgIHNhZmV0eVNjb3JlOiA2MCxcbiAgICAgICAgZXN0aW1hdGVkQmVuZWZpdDogOTUsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBjYXBhYmlsaXRpZXMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnZXhwZXJ0Q2FwYWJpbGl0eScsXG4gICAgICAgICAgZGVzY3JpcHRpb246ICdFeHBlcnQgY2FwYWJpbGl0eScsXG4gICAgICAgICAgaW1wbGVtZW50YXRpb246ICdyZXR1cm4ge307JyxcbiAgICAgICAgICBjb21wbGV4aXR5OiBDYXBhYmlsaXR5Q29tcGxleGl0eS5FWFBFUlQsXG4gICAgICAgIH0sXG4gICAgICBdO1xuXG4gICAgICBjb25zdCBjb21wbGV4aXR5ID0gKGdlbmVyYXRvciBhcyBhbnkpLmFzc2Vzc0dlbmVyYXRpb25Db21wbGV4aXR5KFxuICAgICAgICBjYW5kaWRhdGUsXG4gICAgICAgIGNhcGFiaWxpdGllc1xuICAgICAgKTtcbiAgICAgIGV4cGVjdChjb21wbGV4aXR5KS50b0JlKEdlbmVyYXRpb25Db21wbGV4aXR5LlZFUllfQ09NUExFWCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdnZW5lcmF0ZVN1bW1hcnknLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBnZW5lcmF0ZSBjb21wcmVoZW5zaXZlIHN1bW1hcnkgb2YgcmVzdWx0cycsICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tSZXN1bHRzID0gW1xuICAgICAgICB7XG4gICAgICAgICAgc3lzdGVtTmFtZTogJ1NZU1RFTV8xJyxcbiAgICAgICAgICBmaWxlUGF0aDogJy9vdXRwdXQvU1lTVEVNXzEudHMnLFxuICAgICAgICAgIG9yaWdpbmFsRXhwb3J0OiB7XG4gICAgICAgICAgICBmaWxlUGF0aDogJy90ZXN0L3Rlc3QxLnRzJyxcbiAgICAgICAgICAgIGV4cG9ydE5hbWU6ICdmdW5jdGlvbjEnLFxuICAgICAgICAgICAgZXhwb3J0VHlwZTogJ2Z1bmN0aW9uJyBhcyBjb25zdCxcbiAgICAgICAgICAgIGxpbmVOdW1iZXI6IDEsXG4gICAgICAgICAgICBpc0RlZmF1bHQ6IGZhbHNlLFxuICAgICAgICAgICAgY29tcGxleGl0eTogNSxcbiAgICAgICAgICAgIHVzYWdlQ291bnQ6IDAsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBnZW5lcmF0ZWRDb2RlOiAnY29kZTEnLFxuICAgICAgICAgIGNhcGFiaWxpdGllczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBuYW1lOiAnY2FwMScsXG4gICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnZGVzYzEnLFxuICAgICAgICAgICAgICBpbXBsZW1lbnRhdGlvbjogJ2ltcGwxJyxcbiAgICAgICAgICAgICAgY29tcGxleGl0eTogQ2FwYWJpbGl0eUNvbXBsZXhpdHkuQkFTSUMsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBuYW1lOiAnY2FwMicsXG4gICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnZGVzYzInLFxuICAgICAgICAgICAgICBpbXBsZW1lbnRhdGlvbjogJ2ltcGwyJyxcbiAgICAgICAgICAgICAgY29tcGxleGl0eTogQ2FwYWJpbGl0eUNvbXBsZXhpdHkuSU5URVJNRURJQVRFLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIGludGVncmF0aW9uUG9pbnRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHRhcmdldDogJ3RhcmdldDEnLFxuICAgICAgICAgICAgICBtZXRob2Q6IEludGVncmF0aW9uTWV0aG9kLkRJUkVDVF9JTVBPUlQsXG4gICAgICAgICAgICAgIGNvZGU6ICdjb2RlMScsXG4gICAgICAgICAgICAgIHByaW9yaXR5OiBJbnRlZ3JhdGlvblByaW9yaXR5LkhJR0gsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgICAgZXN0aW1hdGVkVmFsdWU6IDc1LFxuICAgICAgICAgIGNvbXBsZXhpdHk6IEdlbmVyYXRpb25Db21wbGV4aXR5Lk1PREVSQVRFLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgc3lzdGVtTmFtZTogJ1NZU1RFTV8yJyxcbiAgICAgICAgICBmaWxlUGF0aDogJy9vdXRwdXQvU1lTVEVNXzIudHMnLFxuICAgICAgICAgIG9yaWdpbmFsRXhwb3J0OiB7XG4gICAgICAgICAgICBmaWxlUGF0aDogJy90ZXN0L3Rlc3QyLnRzJyxcbiAgICAgICAgICAgIGV4cG9ydE5hbWU6ICdjbGFzczInLFxuICAgICAgICAgICAgZXhwb3J0VHlwZTogJ2NsYXNzJyBhcyBjb25zdCxcbiAgICAgICAgICAgIGxpbmVOdW1iZXI6IDEsXG4gICAgICAgICAgICBpc0RlZmF1bHQ6IGZhbHNlLFxuICAgICAgICAgICAgY29tcGxleGl0eTogMTAsXG4gICAgICAgICAgICB1c2FnZUNvdW50OiAwLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZ2VuZXJhdGVkQ29kZTogJ2NvZGUyJyxcbiAgICAgICAgICBjYXBhYmlsaXRpZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbmFtZTogJ2NhcDMnLFxuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ2Rlc2MzJyxcbiAgICAgICAgICAgICAgaW1wbGVtZW50YXRpb246ICdpbXBsMycsXG4gICAgICAgICAgICAgIGNvbXBsZXhpdHk6IENhcGFiaWxpdHlDb21wbGV4aXR5LkFEVkFOQ0VELFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIGludGVncmF0aW9uUG9pbnRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHRhcmdldDogJ3RhcmdldDInLFxuICAgICAgICAgICAgICBtZXRob2Q6IEludGVncmF0aW9uTWV0aG9kLkFQSV9FTkRQT0lOVCxcbiAgICAgICAgICAgICAgY29kZTogJ2NvZGUyJyxcbiAgICAgICAgICAgICAgcHJpb3JpdHk6IEludGVncmF0aW9uUHJpb3JpdHkuTUVESVVNLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIGVzdGltYXRlZFZhbHVlOiA4NSxcbiAgICAgICAgICBjb21wbGV4aXR5OiBHZW5lcmF0aW9uQ29tcGxleGl0eS5DT01QTEVYLFxuICAgICAgICB9LFxuICAgICAgXTtcblxuICAgICAgY29uc3Qgc3VtbWFyeSA9IGdlbmVyYXRvci5nZW5lcmF0ZVN1bW1hcnkobW9ja1Jlc3VsdHMpO1xuXG4gICAgICBleHBlY3Qoc3VtbWFyeS50b3RhbFN5c3RlbXNHZW5lcmF0ZWQpLnRvQmUoMik7XG4gICAgICBleHBlY3Qoc3VtbWFyeS50b3RhbENhcGFiaWxpdGllc0FkZGVkKS50b0JlKDMpO1xuICAgICAgZXhwZWN0KHN1bW1hcnkudG90YWxJbnRlZ3JhdGlvblBvaW50cykudG9CZSgyKTtcbiAgICAgIGV4cGVjdChzdW1tYXJ5LmVzdGltYXRlZFRvdGFsVmFsdWUpLnRvQmUoMTYwKTtcbiAgICAgIGV4cGVjdChzdW1tYXJ5LmdlbmVyYXRpb25zQnlDYXRlZ29yeSkudG9IYXZlUHJvcGVydHkoJ2Z1bmN0aW9uJywgMSk7XG4gICAgICBleHBlY3Qoc3VtbWFyeS5nZW5lcmF0aW9uc0J5Q2F0ZWdvcnkpLnRvSGF2ZVByb3BlcnR5KCdjbGFzcycsIDEpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZ2VuZXJhdGVJbnRlZ3JhdGlvbkd1aWRlJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgZ2VuZXJhdGUgY29tcHJlaGVuc2l2ZSBpbnRlZ3JhdGlvbiBndWlkZScsICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tSZXN1bHRzID0gW1xuICAgICAgICB7XG4gICAgICAgICAgc3lzdGVtTmFtZTogJ1RFU1RfU1lTVEVNX0lOVEVMTElHRU5DRV9TWVNURU0nLFxuICAgICAgICAgIGZpbGVQYXRoOiAnL291dHB1dC9URVNUX1NZU1RFTV9JTlRFTExJR0VOQ0VfU1lTVEVNLnRzJyxcbiAgICAgICAgICBvcmlnaW5hbEV4cG9ydDoge1xuICAgICAgICAgICAgZmlsZVBhdGg6ICcvdGVzdC90ZXN0LnRzJyxcbiAgICAgICAgICAgIGV4cG9ydE5hbWU6ICd0ZXN0RnVuY3Rpb24nLFxuICAgICAgICAgICAgZXhwb3J0VHlwZTogJ2Z1bmN0aW9uJyBhcyBjb25zdCxcbiAgICAgICAgICAgIGxpbmVOdW1iZXI6IDEsXG4gICAgICAgICAgICBpc0RlZmF1bHQ6IGZhbHNlLFxuICAgICAgICAgICAgY29tcGxleGl0eTogNSxcbiAgICAgICAgICAgIHVzYWdlQ291bnQ6IDAsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBnZW5lcmF0ZWRDb2RlOiAnY29kZScsXG4gICAgICAgICAgY2FwYWJpbGl0aWVzOiBbXSxcbiAgICAgICAgICBpbnRlZ3JhdGlvblBvaW50czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB0YXJnZXQ6ICdzcmMvY29tcG9uZW50cy9kYXNoYm9hcmQvSW50ZWxsaWdlbmNlRGFzaGJvYXJkLnRzeCcsXG4gICAgICAgICAgICAgIG1ldGhvZDogSW50ZWdyYXRpb25NZXRob2QuREVQRU5ERU5DWV9JTkpFQ1RJT04sXG4gICAgICAgICAgICAgIGNvZGU6ICdkYXNoYm9hcmQgaW50ZWdyYXRpb24gY29kZScsXG4gICAgICAgICAgICAgIHByaW9yaXR5OiBJbnRlZ3JhdGlvblByaW9yaXR5Lk1FRElVTSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgICBlc3RpbWF0ZWRWYWx1ZTogNzUsXG4gICAgICAgICAgY29tcGxleGl0eTogR2VuZXJhdGlvbkNvbXBsZXhpdHkuTU9ERVJBVEUsXG4gICAgICAgIH0sXG4gICAgICBdO1xuXG4gICAgICBjb25zdCBndWlkZSA9IGdlbmVyYXRvci5nZW5lcmF0ZUludGVncmF0aW9uR3VpZGUobW9ja1Jlc3VsdHMpO1xuXG4gICAgICBleHBlY3QoZ3VpZGUpLnRvQ29udGFpbihcbiAgICAgICAgJyMgRW50ZXJwcmlzZSBJbnRlbGxpZ2VuY2UgU3lzdGVtcyBJbnRlZ3JhdGlvbiBHdWlkZSdcbiAgICAgICk7XG4gICAgICBleHBlY3QoZ3VpZGUpLnRvQ29udGFpbignR2VuZXJhdGVkIDEgaW50ZWxsaWdlbmNlIHN5c3RlbXMnKTtcbiAgICAgIGV4cGVjdChndWlkZSkudG9Db250YWluKCdURVNUX1NZU1RFTV9JTlRFTExJR0VOQ0VfU1lTVEVNJyk7XG4gICAgICBleHBlY3QoZ3VpZGUpLnRvQ29udGFpbignSW50ZWdyYXRpb24gU3RlcHMnKTtcbiAgICAgIGV4cGVjdChndWlkZSkudG9Db250YWluKCdEYXNoYm9hcmQgSW50ZWdyYXRpb24nKTtcbiAgICAgIGV4cGVjdChndWlkZSkudG9Db250YWluKCdOZXh0IFN0ZXBzJyk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=