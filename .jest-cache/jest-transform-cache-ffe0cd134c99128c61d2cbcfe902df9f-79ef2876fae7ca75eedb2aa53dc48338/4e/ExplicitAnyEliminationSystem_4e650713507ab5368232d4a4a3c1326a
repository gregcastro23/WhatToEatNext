8a70c74752aa1d6265e64029bbfe2458
"use strict";
/**
 * Explicit-Any Elimination System for Perfect Codebase Campaign
 *
 * Integration for scripts/typescript-fixes/fix-explicit-any-systematic.js
 * Implements batch processing with --max-files=25 --auto-fix parameters
 * Creates progress tracking for 75.5% reduction campaign continuation
 *
 * Requirements: 1.8, 7.2
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExplicitAnyEliminationSystem = void 0;
const child_process_1 = require("child_process");
const fs_1 = __importDefault(require("fs"));
class ExplicitAnyEliminationSystem {
    EXPLICIT_ANY_FIXER_PATH = 'scripts/typescript-fixes/fix-explicit-any-systematic.js';
    DEFAULT_BATCH_SIZE = 25;
    CAMPAIGN_TARGET_PERCENTAGE = 75.5; // Continue 75.5% reduction campaign
    PROGRESS_FILE = '.explicit-any-campaign-progress.json';
    /**
     * Execute Explicit-Any Systematic Fixer with specified options
     */
    async executeExplicitAnyFixer(options = {}) {
        const startTime = Date.now();
        console.log('üéØ Starting Explicit-Any Elimination System...');
        // Get baseline count
        const initialCount = await this.getCurrentExplicitAnyCount();
        // Prepare command arguments
        const args = this.buildFixerArguments(options);
        try {
            // Execute the Explicit-Any Fixer
            const result = await this.runFixerCommand(args);
            // Get final count
            const finalCount = await this.getCurrentExplicitAnyCount();
            const explicitAnyFixed = Math.max(0, initialCount - finalCount);
            // Validate build after fixing
            const buildValidationPassed = await this.validateBuild();
            // Calculate reduction percentage
            const reductionPercentage = initialCount > 0 ?
                ((explicitAnyFixed / initialCount) * 100) : 0;
            const executionTime = Date.now() - startTime;
            return {
                success: result.success,
                filesProcessed: result.filesProcessed,
                explicitAnyFixed,
                explicitAnyRemaining: finalCount,
                reductionPercentage,
                buildValidationPassed,
                executionTime,
                safetyScore: result.safetyScore,
                warnings: result.warnings,
                errors: result.errors
            };
        }
        catch (error) {
            console.error('‚ùå Explicit-Any Elimination execution failed:', error);
            return {
                success: false,
                filesProcessed: 0,
                explicitAnyFixed: 0,
                explicitAnyRemaining: await this.getCurrentExplicitAnyCount(),
                reductionPercentage: 0,
                buildValidationPassed: false,
                executionTime: Date.now() - startTime,
                warnings: [],
                errors: [error instanceof Error ? error.message : String(error)]
            };
        }
    }
    /**
     * Execute batch processing for systematic explicit-any elimination
     */
    async executeBatchProcessing(maxBatches) {
        console.log(`üîÑ Starting systematic explicit-any batch processing...`);
        const results = [];
        let batchNumber = 1;
        let totalFilesProcessed = 0;
        let totalExplicitAnyFixed = 0;
        // Load or initialize campaign progress
        const campaignProgress = await this.loadCampaignProgress();
        const maxIterations = maxBatches || 30; // Prevent infinite loops
        const startTime = Date.now();
        const maxExecutionTime = 20 * 60 * 1000; // 20 minutes max
        while (batchNumber <= maxIterations) {
            console.log(`\nüì¶ Processing Explicit-Any Batch ${batchNumber}/${maxIterations}...`);
            // Check execution time limit
            if (Date.now() - startTime > maxExecutionTime) {
                console.log(`‚è∞ Maximum execution time (20 minutes) reached, stopping`);
                break;
            }
            // Check if we should stop (max batches reached)
            if (maxBatches && batchNumber > maxBatches) {
                console.log(`‚úã Reached maximum batch limit (${maxBatches})`);
                break;
            }
            // Check current explicit-any count with timeout protection
            let currentCount = 0;
            try {
                currentCount = await this.getCurrentExplicitAnyCount();
            }
            catch (error) {
                console.warn('‚ö†Ô∏è  Explicit-any count check failed, assuming warnings remain');
                currentCount = 1; // Assume warnings exist to continue safely
            }
            if (currentCount === 0) {
                console.log('üéâ No more explicit-any warnings found!');
                break;
            }
            // Execute fixer for this batch
            const batchResult = await this.executeExplicitAnyFixer({
                maxFiles: this.DEFAULT_BATCH_SIZE,
                autoFix: true,
                validateSafety: true
            });
            results.push(batchResult);
            totalFilesProcessed += batchResult.filesProcessed;
            totalExplicitAnyFixed += batchResult.explicitAnyFixed;
            console.log(`üìä Batch ${batchNumber} Results:`);
            console.log(`  Files processed: ${batchResult.filesProcessed}`);
            console.log(`  Explicit-any fixed: ${batchResult.explicitAnyFixed}`);
            console.log(`  Reduction: ${batchResult.reductionPercentage.toFixed(1)}%`);
            console.log(`  Build validation: ${batchResult.buildValidationPassed ? '‚úÖ' : '‚ùå'}`);
            // Update campaign progress
            await this.updateCampaignProgress(totalExplicitAnyFixed);
            // Check if campaign target is met
            const updatedProgress = await this.loadCampaignProgress();
            if (updatedProgress.isTargetMet) {
                console.log(`üéØ Campaign target of ${this.CAMPAIGN_TARGET_PERCENTAGE}% reduction achieved!`);
                break;
            }
            // Stop if no progress made
            if (batchResult.filesProcessed === 0 && batchResult.explicitAnyFixed === 0) {
                console.log('‚è∏Ô∏è  No progress made in this batch, stopping');
                break;
            }
            // Stop on build failure
            if (!batchResult.buildValidationPassed) {
                console.log('üõë Build validation failed, stopping batch processing');
                break;
            }
            batchNumber++;
        }
        // Final campaign progress report
        const finalProgress = await this.loadCampaignProgress();
        console.log(`\nüìà Campaign Progress Summary:`);
        console.log(`  Total batches: ${results.length}`);
        console.log(`  Total files processed: ${totalFilesProcessed}`);
        console.log(`  Total explicit-any fixed: ${totalExplicitAnyFixed}`);
        console.log(`  Campaign reduction: ${finalProgress.reductionPercentage.toFixed(1)}%`);
        console.log(`  Target (${this.CAMPAIGN_TARGET_PERCENTAGE}%): ${finalProgress.isTargetMet ? '‚úÖ' : '‚ùå'}`);
        console.log(`  Remaining explicit-any: ${finalProgress.totalExplicitAnyRemaining}`);
        return results;
    }
    /**
     * Build command arguments for Explicit-Any Fixer
     */
    buildFixerArguments(options) {
        const args = [];
        if (options.maxFiles) {
            args.push(`--max-files=${options.maxFiles}`);
        }
        if (options.autoFix) {
            args.push('--auto-fix');
        }
        if (options.dryRun) {
            args.push('--dry-run');
        }
        if (options.aggressive) {
            args.push('--aggressive');
        }
        if (options.validateSafety) {
            args.push('--validate-safety');
        }
        if (options.silent) {
            args.push('--silent');
        }
        if (options.json) {
            args.push('--json');
        }
        return args;
    }
    /**
     * Execute the Explicit-Any Fixer command
     */
    async runFixerCommand(args) {
        return new Promise((resolve, reject) => {
            const command = 'node';
            const fullArgs = [this.EXPLICIT_ANY_FIXER_PATH, ...args];
            console.log(`üîß Executing: ${command} ${fullArgs.join(' ')}`);
            const child = (0, child_process_1.spawn)(command, fullArgs, {
                stdio: ['pipe', 'pipe', 'pipe'],
                cwd: process.cwd()
            });
            let stdout = '';
            let stderr = '';
            child.stdout.on('data', (data) => {
                stdout += data.toString();
                // Show real-time output if not silent
                if (!args.includes('--silent')) {
                    process.stdout.write(data);
                }
            });
            child.stderr.on('data', (data) => {
                stderr += data.toString();
                if (!args.includes('--silent')) {
                    process.stderr.write(data);
                }
            });
            child.on('close', (code) => {
                const success = code === 0;
                const output = stdout + stderr;
                // Parse output for metrics
                const result = this.parseFixerOutput(output, success);
                resolve(result);
            });
            child.on('error', (error) => {
                reject(error);
            });
        });
    }
    /**
     * Parse Explicit-Any Fixer output to extract metrics
     */
    parseFixerOutput(output, success) {
        const warnings = [];
        const errors = [];
        // Extract metrics from output
        let filesProcessed = 0;
        let safetyScore;
        // Parse files processed
        const filesMatch = output.match(/(?:processed|fixed)\s+(\d+)\s+files?/i);
        if (filesMatch) {
            filesProcessed = parseInt(filesMatch[1]);
        }
        // Parse safety score
        const safetyMatch = output.match(/safety\s+score[:\s]+(\d+(?:\.\d+)?)/i);
        if (safetyMatch) {
            safetyScore = parseFloat(safetyMatch[1]);
        }
        // Extract warnings
        const warningMatches = output.match(/‚ö†Ô∏è[^\n]*/g);
        if (warningMatches) {
            warnings.push(...warningMatches);
        }
        // Extract errors
        const errorMatches = output.match(/‚ùå[^\n]*/g);
        if (errorMatches) {
            errors.push(...errorMatches);
        }
        return {
            success,
            filesProcessed,
            safetyScore,
            warnings,
            errors
        };
    }
    /**
     * Validate build after explicit-any fixing
     */
    async validateBuild() {
        try {
            console.log('üîç Validating build...');
            const startTime = Date.now();
            (0, child_process_1.execSync)('yarn build', {
                stdio: 'pipe',
                timeout: 120000 // 2 minute timeout
            });
            const buildTime = Date.now() - startTime;
            console.log(`‚úÖ Build validation passed (${buildTime}ms)`);
            return true;
        }
        catch (error) {
            console.log('‚ùå Build validation failed');
            if (error instanceof Error) {
                console.log(`   Error: ${error.message}`);
            }
            return false;
        }
    }
    /**
     * Get current explicit-any warning count
     */
    async getCurrentExplicitAnyCount() {
        try {
            const output = (0, child_process_1.execSync)('yarn lint 2>&1 | grep -c "@typescript-eslint/no-explicit-any"', {
                encoding: 'utf8',
                stdio: 'pipe',
                timeout: 30000 // 30 second timeout
            });
            return parseInt(output.trim()) || 0;
        }
        catch (error) {
            // If grep finds no matches, it returns exit code 1, or timeout occurred
            console.warn('Explicit-any count check failed or timed out:', error.message);
            return 0;
        }
    }
    /**
     * Load campaign progress from file
     */
    async loadCampaignProgress() {
        try {
            if (fs_1.default.existsSync(this.PROGRESS_FILE)) {
                const data = await fs_1.default.promises.readFile(this.PROGRESS_FILE, 'utf8');
                const progress = JSON.parse(data);
                // Recalculate current status
                const currentCount = await this.getCurrentExplicitAnyCount();
                const reductionAchieved = progress.totalExplicitAnyStart - currentCount;
                const reductionPercentage = progress.totalExplicitAnyStart > 0 ?
                    (reductionAchieved / progress.totalExplicitAnyStart) * 100 : 0;
                return {
                    ...progress,
                    totalExplicitAnyRemaining: currentCount,
                    reductionAchieved,
                    reductionPercentage,
                    isTargetMet: reductionPercentage >= this.CAMPAIGN_TARGET_PERCENTAGE
                };
            }
        }
        catch (error) {
            console.log(`‚ö†Ô∏è  Could not load campaign progress: ${error}`);
        }
        // Initialize new campaign progress
        const currentCount = await this.getCurrentExplicitAnyCount();
        return {
            totalExplicitAnyStart: currentCount,
            totalExplicitAnyRemaining: currentCount,
            reductionAchieved: 0,
            reductionPercentage: 0,
            campaignTarget: this.CAMPAIGN_TARGET_PERCENTAGE,
            isTargetMet: false
        };
    }
    /**
     * Update campaign progress
     */
    async updateCampaignProgress(additionalFixed) {
        try {
            const progress = await this.loadCampaignProgress();
            // Update progress
            const currentCount = await this.getCurrentExplicitAnyCount();
            const totalReductionAchieved = progress.totalExplicitAnyStart - currentCount;
            const reductionPercentage = progress.totalExplicitAnyStart > 0 ?
                (totalReductionAchieved / progress.totalExplicitAnyStart) * 100 : 0;
            const updatedProgress = {
                ...progress,
                totalExplicitAnyRemaining: currentCount,
                reductionAchieved: totalReductionAchieved,
                reductionPercentage,
                isTargetMet: reductionPercentage >= this.CAMPAIGN_TARGET_PERCENTAGE
            };
            await fs_1.default.promises.writeFile(this.PROGRESS_FILE, JSON.stringify(updatedProgress, null, 2));
            console.log(`üìä Campaign Progress Updated:`);
            console.log(`   Reduction: ${reductionPercentage.toFixed(1)}% (target: ${this.CAMPAIGN_TARGET_PERCENTAGE}%)`);
            console.log(`   Remaining: ${currentCount} explicit-any warnings`);
        }
        catch (error) {
            console.error(`‚ùå Failed to update campaign progress: ${error}`);
        }
    }
    /**
     * Show campaign progress and metrics
     */
    async showCampaignProgress() {
        const progress = await this.loadCampaignProgress();
        console.log('\nüìä EXPLICIT-ANY ELIMINATION CAMPAIGN PROGRESS');
        console.log('=============================================');
        console.log(`üéØ Campaign Target: ${progress.campaignTarget}% reduction`);
        console.log(`üìà Current Progress: ${progress.reductionPercentage.toFixed(1)}%`);
        console.log(`‚úÖ Target Met: ${progress.isTargetMet ? 'Yes' : 'No'}`);
        console.log(`üî¢ Starting Count: ${progress.totalExplicitAnyStart}`);
        console.log(`üî¢ Current Count: ${progress.totalExplicitAnyRemaining}`);
        console.log(`üîß Total Fixed: ${progress.reductionAchieved}`);
        if (progress.isTargetMet) {
            console.log(`üéâ Congratulations! Campaign target achieved!`);
        }
        else {
            const remaining = Math.ceil((progress.campaignTarget / 100) * progress.totalExplicitAnyStart) - progress.reductionAchieved;
            console.log(`üéØ Need to fix ${remaining} more to reach target`);
        }
        return progress;
    }
    /**
     * Reset campaign progress (for testing or restart)
     */
    async resetCampaignProgress() {
        try {
            if (fs_1.default.existsSync(this.PROGRESS_FILE)) {
                await fs_1.default.promises.unlink(this.PROGRESS_FILE);
                console.log('üîÑ Campaign progress reset');
            }
        }
        catch (error) {
            console.error(`‚ùå Failed to reset campaign progress: ${error}`);
        }
    }
    /**
     * Execute with campaign continuation (Requirements 1.8, 7.2)
     */
    async executeCampaignContinuation() {
        console.log('üéØ Continuing 75.5% Explicit-Any Reduction Campaign...');
        // Show current progress
        const progress = await this.showCampaignProgress();
        if (progress.isTargetMet) {
            console.log('‚úÖ Campaign target already achieved!');
            return [];
        }
        // Calculate how many more we need to fix
        const targetCount = Math.ceil((progress.campaignTarget / 100) * progress.totalExplicitAnyStart);
        const remainingToFix = targetCount - progress.reductionAchieved;
        console.log(`üéØ Need to fix approximately ${remainingToFix} more explicit-any warnings`);
        // Execute batch processing until target is met
        const results = await this.executeBatchProcessing();
        // Final progress check
        await this.showCampaignProgress();
        return results;
    }
}
exports.ExplicitAnyEliminationSystem = ExplicitAnyEliminationSystem;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,