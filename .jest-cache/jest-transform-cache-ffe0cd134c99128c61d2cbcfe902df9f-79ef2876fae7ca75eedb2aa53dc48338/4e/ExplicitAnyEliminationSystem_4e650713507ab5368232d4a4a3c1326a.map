{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/ExplicitAnyEliminationSystem.ts","mappings":";AAAA;;;;;;;;GAQG;;;;;;AAEH,iDAAgD;AAChD,4CAAoB;AAmCpB,MAAa,4BAA4B;IACtB,uBAAuB,GAAG,yDAAyD,CAAC;IACpF,kBAAkB,GAAG,EAAE,CAAC;IACxB,0BAA0B,GAAG,IAAI,CAAC,CAAC,oCAAoC;IACvE,aAAa,GAAG,sCAAsC,CAAC;IAExE;;OAEG;IACH,KAAK,CAAC,uBAAuB,CAAC,UAA8B,EAAE;QAC5D,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAE7B,OAAO,CAAC,GAAG,CAAC,gDAAgD,CAAC,CAAC;QAE9D,qBAAqB;QACrB,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;QAE7D,4BAA4B;QAC5B,MAAM,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;QAE/C,IAAI;YACF,iCAAiC;YACjC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAEhD,kBAAkB;YAClB,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;YAC3D,MAAM,gBAAgB,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,GAAG,UAAU,CAAC,CAAC;YAEhE,8BAA8B;YAC9B,MAAM,qBAAqB,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;YAEzD,iCAAiC;YACjC,MAAM,mBAAmB,GAAG,YAAY,GAAG,CAAC,CAAC,CAAC;gBAC5C,CAAC,CAAC,gBAAgB,GAAG,YAAY,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAEhD,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;YAE7C,OAAO;gBACL,OAAO,EAAE,MAAM,CAAC,OAAO;gBACvB,cAAc,EAAE,MAAM,CAAC,cAAc;gBACrC,gBAAgB;gBAChB,oBAAoB,EAAE,UAAU;gBAChC,mBAAmB;gBACnB,qBAAqB;gBACrB,aAAa;gBACb,WAAW,EAAE,MAAM,CAAC,WAAW;gBAC/B,QAAQ,EAAE,MAAM,CAAC,QAAQ;gBACzB,MAAM,EAAE,MAAM,CAAC,MAAM;aACtB,CAAC;SAEH;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,8CAA8C,EAAE,KAAK,CAAC,CAAC;YAErE,OAAO;gBACL,OAAO,EAAE,KAAK;gBACd,cAAc,EAAE,CAAC;gBACjB,gBAAgB,EAAE,CAAC;gBACnB,oBAAoB,EAAE,MAAM,IAAI,CAAC,0BAA0B,EAAE;gBAC7D,mBAAmB,EAAE,CAAC;gBACtB,qBAAqB,EAAE,KAAK;gBAC5B,aAAa,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS;gBACrC,QAAQ,EAAE,EAAE;gBACZ,MAAM,EAAE,CAAC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aACjE,CAAC;SACH;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,sBAAsB,CAAC,UAAmB;QAC9C,OAAO,CAAC,GAAG,CAAC,yDAAyD,CAAC,CAAC;QAEvE,MAAM,OAAO,GAAwB,EAAE,CAAC;QACxC,IAAI,WAAW,GAAG,CAAC,CAAC;QACpB,IAAI,mBAAmB,GAAG,CAAC,CAAC;QAC5B,IAAI,qBAAqB,GAAG,CAAC,CAAC;QAE9B,uCAAuC;QACvC,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAE3D,MAAM,aAAa,GAAG,UAAU,IAAI,EAAE,CAAC,CAAC,yBAAyB;QACjE,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC7B,MAAM,gBAAgB,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,iBAAiB;QAE1D,OAAO,WAAW,IAAI,aAAa,EAAE;YACnC,OAAO,CAAC,GAAG,CAAC,sCAAsC,WAAW,IAAI,aAAa,KAAK,CAAC,CAAC;YAErF,6BAA6B;YAC7B,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,GAAG,gBAAgB,EAAE;gBAC7C,OAAO,CAAC,GAAG,CAAC,yDAAyD,CAAC,CAAC;gBACvE,MAAM;aACP;YAED,gDAAgD;YAChD,IAAI,UAAU,IAAI,WAAW,GAAG,UAAU,EAAE;gBAC1C,OAAO,CAAC,GAAG,CAAC,kCAAkC,UAAU,GAAG,CAAC,CAAC;gBAC7D,MAAM;aACP;YAED,2DAA2D;YAC3D,IAAI,YAAY,GAAG,CAAC,CAAC;YACrB,IAAI;gBACF,YAAY,GAAG,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;aACxD;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,CAAC,IAAI,CAAC,+DAA+D,CAAC,CAAC;gBAC9E,YAAY,GAAG,CAAC,CAAC,CAAC,2CAA2C;aAC9D;YAED,IAAI,YAAY,KAAK,CAAC,EAAE;gBACtB,OAAO,CAAC,GAAG,CAAC,yCAAyC,CAAC,CAAC;gBACvD,MAAM;aACP;YAED,+BAA+B;YAC/B,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC;gBACrD,QAAQ,EAAE,IAAI,CAAC,kBAAkB;gBACjC,OAAO,EAAE,IAAI;gBACb,cAAc,EAAE,IAAI;aACrB,CAAC,CAAC;YAEH,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC1B,mBAAmB,IAAI,WAAW,CAAC,cAAc,CAAC;YAClD,qBAAqB,IAAI,WAAW,CAAC,gBAAgB,CAAC;YAEtD,OAAO,CAAC,GAAG,CAAC,YAAY,WAAW,WAAW,CAAC,CAAC;YAChD,OAAO,CAAC,GAAG,CAAC,sBAAsB,WAAW,CAAC,cAAc,EAAE,CAAC,CAAC;YAChE,OAAO,CAAC,GAAG,CAAC,yBAAyB,WAAW,CAAC,gBAAgB,EAAE,CAAC,CAAC;YACrE,OAAO,CAAC,GAAG,CAAC,gBAAgB,WAAW,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YAC3E,OAAO,CAAC,GAAG,CAAC,uBAAuB,WAAW,CAAC,qBAAqB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;YAEpF,2BAA2B;YAC3B,MAAM,IAAI,CAAC,sBAAsB,CAAC,qBAAqB,CAAC,CAAC;YAEzD,kCAAkC;YAClC,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAC1D,IAAI,eAAe,CAAC,WAAW,EAAE;gBAC/B,OAAO,CAAC,GAAG,CAAC,yBAAyB,IAAI,CAAC,0BAA0B,uBAAuB,CAAC,CAAC;gBAC7F,MAAM;aACP;YAED,2BAA2B;YAC3B,IAAI,WAAW,CAAC,cAAc,KAAK,CAAC,IAAI,WAAW,CAAC,gBAAgB,KAAK,CAAC,EAAE;gBAC1E,OAAO,CAAC,GAAG,CAAC,8CAA8C,CAAC,CAAC;gBAC5D,MAAM;aACP;YAED,wBAAwB;YACxB,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE;gBACtC,OAAO,CAAC,GAAG,CAAC,uDAAuD,CAAC,CAAC;gBACrE,MAAM;aACP;YAED,WAAW,EAAE,CAAC;SACf;QAED,iCAAiC;QACjC,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;QACxD,OAAO,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;QAC/C,OAAO,CAAC,GAAG,CAAC,oBAAoB,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;QAClD,OAAO,CAAC,GAAG,CAAC,4BAA4B,mBAAmB,EAAE,CAAC,CAAC;QAC/D,OAAO,CAAC,GAAG,CAAC,+BAA+B,qBAAqB,EAAE,CAAC,CAAC;QACpE,OAAO,CAAC,GAAG,CAAC,yBAAyB,aAAa,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QACtF,OAAO,CAAC,GAAG,CAAC,aAAa,IAAI,CAAC,0BAA0B,OAAO,aAAa,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;QACxG,OAAO,CAAC,GAAG,CAAC,6BAA6B,aAAa,CAAC,yBAAyB,EAAE,CAAC,CAAC;QAEpF,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;OAEG;IACK,mBAAmB,CAAC,OAA2B;QACrD,MAAM,IAAI,GAAa,EAAE,CAAC;QAE1B,IAAI,OAAO,CAAC,QAAQ,EAAE;YACpB,IAAI,CAAC,IAAI,CAAC,eAAe,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;SAC9C;QAED,IAAI,OAAO,CAAC,OAAO,EAAE;YACnB,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SACzB;QAED,IAAI,OAAO,CAAC,MAAM,EAAE;YAClB,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SACxB;QAED,IAAI,OAAO,CAAC,UAAU,EAAE;YACtB,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;SAC3B;QAED,IAAI,OAAO,CAAC,cAAc,EAAE;YAC1B,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;SAChC;QAED,IAAI,OAAO,CAAC,MAAM,EAAE;YAClB,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SACvB;QAED,IAAI,OAAO,CAAC,IAAI,EAAE;YAChB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACrB;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,eAAe,CAAC,IAAc;QAO1C,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,OAAO,GAAG,MAAM,CAAC;YACvB,MAAM,QAAQ,GAAG,CAAC,IAAI,CAAC,uBAAuB,EAAE,GAAG,IAAI,CAAC,CAAC;YAEzD,OAAO,CAAC,GAAG,CAAC,iBAAiB,OAAO,IAAI,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YAE9D,MAAM,KAAK,GAAG,IAAA,qBAAK,EAAC,OAAO,EAAE,QAAQ,EAAE;gBACrC,KAAK,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC;gBAC/B,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE;aACnB,CAAC,CAAC;YAEH,IAAI,MAAM,GAAG,EAAE,CAAC;YAChB,IAAI,MAAM,GAAG,EAAE,CAAC;YAEhB,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;gBAC/B,MAAM,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAC1B,sCAAsC;gBACtC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;oBAC9B,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;iBAC5B;YACH,CAAC,CAAC,CAAC;YAEH,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;gBAC/B,MAAM,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAC1B,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;oBAC9B,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;iBAC5B;YACH,CAAC,CAAC,CAAC;YAEH,KAAK,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,IAAI,EAAE,EAAE;gBACzB,MAAM,OAAO,GAAG,IAAI,KAAK,CAAC,CAAC;gBAC3B,MAAM,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC;gBAE/B,2BAA2B;gBAC3B,MAAM,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;gBAEtD,OAAO,CAAC,MAAM,CAAC,CAAC;YAClB,CAAC,CAAC,CAAC;YAEH,KAAK,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE;gBAC1B,MAAM,CAAC,KAAK,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,gBAAgB,CAAC,MAAc,EAAE,OAAgB;QAOvD,MAAM,QAAQ,GAAa,EAAE,CAAC;QAC9B,MAAM,MAAM,GAAa,EAAE,CAAC;QAE5B,8BAA8B;QAC9B,IAAI,cAAc,GAAG,CAAC,CAAC;QACvB,IAAI,WAA+B,CAAC;QAEpC,wBAAwB;QACxB,MAAM,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,uCAAuC,CAAC,CAAC;QACzE,IAAI,UAAU,EAAE;YACd,cAAc,GAAG,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;SAC1C;QAED,qBAAqB;QACrB,MAAM,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC,sCAAsC,CAAC,CAAC;QACzE,IAAI,WAAW,EAAE;YACf,WAAW,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;SAC1C;QAED,mBAAmB;QACnB,MAAM,cAAc,GAAG,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QACjD,IAAI,cAAc,EAAE;YAClB,QAAQ,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,CAAC;SAClC;QAED,iBAAiB;QACjB,MAAM,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAC9C,IAAI,YAAY,EAAE;YAChB,MAAM,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC,CAAC;SAC9B;QAED,OAAO;YACL,OAAO;YACP,cAAc;YACd,WAAW;YACX,QAAQ;YACR,MAAM;SACP,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,aAAa;QACzB,IAAI;YACF,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;YAEtC,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAC7B,IAAA,wBAAQ,EAAC,YAAY,EAAE;gBACrB,KAAK,EAAE,MAAM;gBACb,OAAO,EAAE,MAAM,CAAC,mBAAmB;aACpC,CAAC,CAAC;YAEH,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;YACzC,OAAO,CAAC,GAAG,CAAC,8BAA8B,SAAS,KAAK,CAAC,CAAC;YAC1D,OAAO,IAAI,CAAC;SAEb;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;YACzC,IAAI,KAAK,YAAY,KAAK,EAAE;gBAC1B,OAAO,CAAC,GAAG,CAAC,aAAa,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;aAC3C;YACD,OAAO,KAAK,CAAC;SACd;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,0BAA0B;QAC9B,IAAI;YACF,MAAM,MAAM,GAAG,IAAA,wBAAQ,EAAC,+DAA+D,EAAE;gBACvF,QAAQ,EAAE,MAAM;gBAChB,KAAK,EAAE,MAAM;gBACb,OAAO,EAAE,KAAK,CAAC,oBAAoB;aACpC,CAAC,CAAC;YACH,OAAO,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC;SACrC;QAAC,OAAO,KAAK,EAAE;YACd,wEAAwE;YACxE,OAAO,CAAC,IAAI,CAAC,+CAA+C,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;YAC7E,OAAO,CAAC,CAAC;SACV;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,oBAAoB;QAChC,IAAI;YACF,IAAI,YAAE,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE;gBACrC,MAAM,IAAI,GAAG,MAAM,YAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;gBACpE,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAElC,6BAA6B;gBAC7B,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;gBAC7D,MAAM,iBAAiB,GAAG,QAAQ,CAAC,qBAAqB,GAAG,YAAY,CAAC;gBACxE,MAAM,mBAAmB,GAAG,QAAQ,CAAC,qBAAqB,GAAG,CAAC,CAAC,CAAC;oBAC9D,CAAC,iBAAiB,GAAG,QAAQ,CAAC,qBAAqB,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBAEjE,OAAO;oBACL,GAAG,QAAQ;oBACX,yBAAyB,EAAE,YAAY;oBACvC,iBAAiB;oBACjB,mBAAmB;oBACnB,WAAW,EAAE,mBAAmB,IAAI,IAAI,CAAC,0BAA0B;iBACpE,CAAC;aACH;SACF;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,GAAG,CAAC,yCAAyC,KAAK,EAAE,CAAC,CAAC;SAC/D;QAED,mCAAmC;QACnC,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;QAC7D,OAAO;YACL,qBAAqB,EAAE,YAAY;YACnC,yBAAyB,EAAE,YAAY;YACvC,iBAAiB,EAAE,CAAC;YACpB,mBAAmB,EAAE,CAAC;YACtB,cAAc,EAAE,IAAI,CAAC,0BAA0B;YAC/C,WAAW,EAAE,KAAK;SACnB,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,sBAAsB,CAAC,eAAuB;QAC1D,IAAI;YACF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAEnD,kBAAkB;YAClB,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;YAC7D,MAAM,sBAAsB,GAAG,QAAQ,CAAC,qBAAqB,GAAG,YAAY,CAAC;YAC7E,MAAM,mBAAmB,GAAG,QAAQ,CAAC,qBAAqB,GAAG,CAAC,CAAC,CAAC;gBAC9D,CAAC,sBAAsB,GAAG,QAAQ,CAAC,qBAAqB,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAEtE,MAAM,eAAe,GAAqB;gBACxC,GAAG,QAAQ;gBACX,yBAAyB,EAAE,YAAY;gBACvC,iBAAiB,EAAE,sBAAsB;gBACzC,mBAAmB;gBACnB,WAAW,EAAE,mBAAmB,IAAI,IAAI,CAAC,0BAA0B;aACpE,CAAC;YAEF,MAAM,YAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;YAE1F,OAAO,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;YAC7C,OAAO,CAAC,GAAG,CAAC,iBAAiB,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC,cAAc,IAAI,CAAC,0BAA0B,IAAI,CAAC,CAAC;YAC9G,OAAO,CAAC,GAAG,CAAC,iBAAiB,YAAY,wBAAwB,CAAC,CAAC;SAEpE;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,yCAAyC,KAAK,EAAE,CAAC,CAAC;SACjE;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,oBAAoB;QACxB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAEnD,OAAO,CAAC,GAAG,CAAC,iDAAiD,CAAC,CAAC;QAC/D,OAAO,CAAC,GAAG,CAAC,+CAA+C,CAAC,CAAC;QAC7D,OAAO,CAAC,GAAG,CAAC,uBAAuB,QAAQ,CAAC,cAAc,aAAa,CAAC,CAAC;QACzE,OAAO,CAAC,GAAG,CAAC,wBAAwB,QAAQ,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QAChF,OAAO,CAAC,GAAG,CAAC,iBAAiB,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;QACpE,OAAO,CAAC,GAAG,CAAC,sBAAsB,QAAQ,CAAC,qBAAqB,EAAE,CAAC,CAAC;QACpE,OAAO,CAAC,GAAG,CAAC,qBAAqB,QAAQ,CAAC,yBAAyB,EAAE,CAAC,CAAC;QACvE,OAAO,CAAC,GAAG,CAAC,mBAAmB,QAAQ,CAAC,iBAAiB,EAAE,CAAC,CAAC;QAE7D,IAAI,QAAQ,CAAC,WAAW,EAAE;YACxB,OAAO,CAAC,GAAG,CAAC,+CAA+C,CAAC,CAAC;SAC9D;aAAM;YACL,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,cAAc,GAAG,GAAG,CAAC,GAAG,QAAQ,CAAC,qBAAqB,CAAC,GAAG,QAAQ,CAAC,iBAAiB,CAAC;YAC3H,OAAO,CAAC,GAAG,CAAC,kBAAkB,SAAS,uBAAuB,CAAC,CAAC;SACjE;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,qBAAqB;QACzB,IAAI;YACF,IAAI,YAAE,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE;gBACrC,MAAM,YAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBAC7C,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;aAC3C;SACF;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,wCAAwC,KAAK,EAAE,CAAC,CAAC;SAChE;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,2BAA2B;QAC/B,OAAO,CAAC,GAAG,CAAC,wDAAwD,CAAC,CAAC;QAEtE,wBAAwB;QACxB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAEnD,IAAI,QAAQ,CAAC,WAAW,EAAE;YACxB,OAAO,CAAC,GAAG,CAAC,qCAAqC,CAAC,CAAC;YACnD,OAAO,EAAE,CAAC;SACX;QAED,yCAAyC;QACzC,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,cAAc,GAAG,GAAG,CAAC,GAAG,QAAQ,CAAC,qBAAqB,CAAC,CAAC;QAChG,MAAM,cAAc,GAAG,WAAW,GAAG,QAAQ,CAAC,iBAAiB,CAAC;QAEhE,OAAO,CAAC,GAAG,CAAC,gCAAgC,cAAc,6BAA6B,CAAC,CAAC;QAEzF,+CAA+C;QAC/C,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAEpD,uBAAuB;QACvB,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAElC,OAAO,OAAO,CAAC;IACjB,CAAC;CACF;AA7eD,oEA6eC","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/ExplicitAnyEliminationSystem.ts"],"sourcesContent":["/**\n * Explicit-Any Elimination System for Perfect Codebase Campaign\n * \n * Integration for scripts/typescript-fixes/fix-explicit-any-systematic.js\n * Implements batch processing with --max-files=25 --auto-fix parameters\n * Creates progress tracking for 75.5% reduction campaign continuation\n * \n * Requirements: 1.8, 7.2\n */\n\nimport { execSync, spawn } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\n\nexport interface ExplicitAnyOptions {\n  maxFiles?: number;\n  autoFix?: boolean;\n  dryRun?: boolean;\n  aggressive?: boolean;\n  validateSafety?: boolean;\n  silent?: boolean;\n  json?: boolean;\n}\n\nexport interface ExplicitAnyResult {\n  success: boolean;\n  filesProcessed: number;\n  explicitAnyFixed: number;\n  explicitAnyRemaining: number;\n  reductionPercentage: number;\n  buildValidationPassed: boolean;\n  executionTime: number;\n  safetyScore?: number;\n  warnings: string[];\n  errors: string[];\n}\n\nexport interface CampaignProgress {\n  totalExplicitAnyStart: number;\n  totalExplicitAnyRemaining: number;\n  reductionAchieved: number;\n  reductionPercentage: number;\n  campaignTarget: number; // 75.5% reduction target\n  isTargetMet: boolean;\n}\n\nexport class ExplicitAnyEliminationSystem {\n  private readonly EXPLICIT_ANY_FIXER_PATH = 'scripts/typescript-fixes/fix-explicit-any-systematic.js';\n  private readonly DEFAULT_BATCH_SIZE = 25;\n  private readonly CAMPAIGN_TARGET_PERCENTAGE = 75.5; // Continue 75.5% reduction campaign\n  private readonly PROGRESS_FILE = '.explicit-any-campaign-progress.json';\n\n  /**\n   * Execute Explicit-Any Systematic Fixer with specified options\n   */\n  async executeExplicitAnyFixer(options: ExplicitAnyOptions = {}): Promise<ExplicitAnyResult> {\n    const startTime = Date.now();\n    \n    console.log('🎯 Starting Explicit-Any Elimination System...');\n    \n    // Get baseline count\n    const initialCount = await this.getCurrentExplicitAnyCount();\n    \n    // Prepare command arguments\n    const args = this.buildFixerArguments(options);\n    \n    try {\n      // Execute the Explicit-Any Fixer\n      const result = await this.runFixerCommand(args);\n      \n      // Get final count\n      const finalCount = await this.getCurrentExplicitAnyCount();\n      const explicitAnyFixed = Math.max(0, initialCount - finalCount);\n      \n      // Validate build after fixing\n      const buildValidationPassed = await this.validateBuild();\n      \n      // Calculate reduction percentage\n      const reductionPercentage = initialCount > 0 ? \n        ((explicitAnyFixed / initialCount) * 100) : 0;\n      \n      const executionTime = Date.now() - startTime;\n      \n      return {\n        success: result.success,\n        filesProcessed: result.filesProcessed,\n        explicitAnyFixed,\n        explicitAnyRemaining: finalCount,\n        reductionPercentage,\n        buildValidationPassed,\n        executionTime,\n        safetyScore: result.safetyScore,\n        warnings: result.warnings,\n        errors: result.errors\n      };\n      \n    } catch (error) {\n      console.error('❌ Explicit-Any Elimination execution failed:', error);\n      \n      return {\n        success: false,\n        filesProcessed: 0,\n        explicitAnyFixed: 0,\n        explicitAnyRemaining: await this.getCurrentExplicitAnyCount(),\n        reductionPercentage: 0,\n        buildValidationPassed: false,\n        executionTime: Date.now() - startTime,\n        warnings: [],\n        errors: [error instanceof Error ? error.message : String(error)]\n      };\n    }\n  }\n\n  /**\n   * Execute batch processing for systematic explicit-any elimination\n   */\n  async executeBatchProcessing(maxBatches?: number): Promise<ExplicitAnyResult[]> {\n    console.log(`🔄 Starting systematic explicit-any batch processing...`);\n    \n    const results: ExplicitAnyResult[] = [];\n    let batchNumber = 1;\n    let totalFilesProcessed = 0;\n    let totalExplicitAnyFixed = 0;\n    \n    // Load or initialize campaign progress\n    const campaignProgress = await this.loadCampaignProgress();\n    \n    const maxIterations = maxBatches || 30; // Prevent infinite loops\n    const startTime = Date.now();\n    const maxExecutionTime = 20 * 60 * 1000; // 20 minutes max\n    \n    while (batchNumber <= maxIterations) {\n      console.log(`\\n📦 Processing Explicit-Any Batch ${batchNumber}/${maxIterations}...`);\n      \n      // Check execution time limit\n      if (Date.now() - startTime > maxExecutionTime) {\n        console.log(`⏰ Maximum execution time (20 minutes) reached, stopping`);\n        break;\n      }\n      \n      // Check if we should stop (max batches reached)\n      if (maxBatches && batchNumber > maxBatches) {\n        console.log(`✋ Reached maximum batch limit (${maxBatches})`);\n        break;\n      }\n      \n      // Check current explicit-any count with timeout protection\n      let currentCount = 0;\n      try {\n        currentCount = await this.getCurrentExplicitAnyCount();\n      } catch (error) {\n        console.warn('⚠️  Explicit-any count check failed, assuming warnings remain');\n        currentCount = 1; // Assume warnings exist to continue safely\n      }\n      \n      if (currentCount === 0) {\n        console.log('🎉 No more explicit-any warnings found!');\n        break;\n      }\n      \n      // Execute fixer for this batch\n      const batchResult = await this.executeExplicitAnyFixer({\n        maxFiles: this.DEFAULT_BATCH_SIZE,\n        autoFix: true,\n        validateSafety: true\n      });\n      \n      results.push(batchResult);\n      totalFilesProcessed += batchResult.filesProcessed;\n      totalExplicitAnyFixed += batchResult.explicitAnyFixed;\n      \n      console.log(`📊 Batch ${batchNumber} Results:`);\n      console.log(`  Files processed: ${batchResult.filesProcessed}`);\n      console.log(`  Explicit-any fixed: ${batchResult.explicitAnyFixed}`);\n      console.log(`  Reduction: ${batchResult.reductionPercentage.toFixed(1)}%`);\n      console.log(`  Build validation: ${batchResult.buildValidationPassed ? '✅' : '❌'}`);\n      \n      // Update campaign progress\n      await this.updateCampaignProgress(totalExplicitAnyFixed);\n      \n      // Check if campaign target is met\n      const updatedProgress = await this.loadCampaignProgress();\n      if (updatedProgress.isTargetMet) {\n        console.log(`🎯 Campaign target of ${this.CAMPAIGN_TARGET_PERCENTAGE}% reduction achieved!`);\n        break;\n      }\n      \n      // Stop if no progress made\n      if (batchResult.filesProcessed === 0 && batchResult.explicitAnyFixed === 0) {\n        console.log('⏸️  No progress made in this batch, stopping');\n        break;\n      }\n      \n      // Stop on build failure\n      if (!batchResult.buildValidationPassed) {\n        console.log('🛑 Build validation failed, stopping batch processing');\n        break;\n      }\n      \n      batchNumber++;\n    }\n    \n    // Final campaign progress report\n    const finalProgress = await this.loadCampaignProgress();\n    console.log(`\\n📈 Campaign Progress Summary:`);\n    console.log(`  Total batches: ${results.length}`);\n    console.log(`  Total files processed: ${totalFilesProcessed}`);\n    console.log(`  Total explicit-any fixed: ${totalExplicitAnyFixed}`);\n    console.log(`  Campaign reduction: ${finalProgress.reductionPercentage.toFixed(1)}%`);\n    console.log(`  Target (${this.CAMPAIGN_TARGET_PERCENTAGE}%): ${finalProgress.isTargetMet ? '✅' : '❌'}`);\n    console.log(`  Remaining explicit-any: ${finalProgress.totalExplicitAnyRemaining}`);\n    \n    return results;\n  }\n\n  /**\n   * Build command arguments for Explicit-Any Fixer\n   */\n  private buildFixerArguments(options: ExplicitAnyOptions): string[] {\n    const args: string[] = [];\n    \n    if (options.maxFiles) {\n      args.push(`--max-files=${options.maxFiles}`);\n    }\n    \n    if (options.autoFix) {\n      args.push('--auto-fix');\n    }\n    \n    if (options.dryRun) {\n      args.push('--dry-run');\n    }\n    \n    if (options.aggressive) {\n      args.push('--aggressive');\n    }\n    \n    if (options.validateSafety) {\n      args.push('--validate-safety');\n    }\n    \n    if (options.silent) {\n      args.push('--silent');\n    }\n    \n    if (options.json) {\n      args.push('--json');\n    }\n    \n    return args;\n  }\n\n  /**\n   * Execute the Explicit-Any Fixer command\n   */\n  private async runFixerCommand(args: string[]): Promise<{\n    success: boolean;\n    filesProcessed: number;\n    safetyScore?: number;\n    warnings: string[];\n    errors: string[];\n  }> {\n    return new Promise((resolve, reject) => {\n      const command = 'node';\n      const fullArgs = [this.EXPLICIT_ANY_FIXER_PATH, ...args];\n      \n      console.log(`🔧 Executing: ${command} ${fullArgs.join(' ')}`);\n      \n      const child = spawn(command, fullArgs, {\n        stdio: ['pipe', 'pipe', 'pipe'],\n        cwd: process.cwd()\n      });\n      \n      let stdout = '';\n      let stderr = '';\n      \n      child.stdout.on('data', (data) => {\n        stdout += data.toString();\n        // Show real-time output if not silent\n        if (!args.includes('--silent')) {\n          process.stdout.write(data);\n        }\n      });\n      \n      child.stderr.on('data', (data) => {\n        stderr += data.toString();\n        if (!args.includes('--silent')) {\n          process.stderr.write(data);\n        }\n      });\n      \n      child.on('close', (code) => {\n        const success = code === 0;\n        const output = stdout + stderr;\n        \n        // Parse output for metrics\n        const result = this.parseFixerOutput(output, success);\n        \n        resolve(result);\n      });\n      \n      child.on('error', (error) => {\n        reject(error);\n      });\n    });\n  }\n\n  /**\n   * Parse Explicit-Any Fixer output to extract metrics\n   */\n  private parseFixerOutput(output: string, success: boolean): {\n    success: boolean;\n    filesProcessed: number;\n    safetyScore?: number;\n    warnings: string[];\n    errors: string[];\n  } {\n    const warnings: string[] = [];\n    const errors: string[] = [];\n    \n    // Extract metrics from output\n    let filesProcessed = 0;\n    let safetyScore: number | undefined;\n    \n    // Parse files processed\n    const filesMatch = output.match(/(?:processed|fixed)\\s+(\\d+)\\s+files?/i);\n    if (filesMatch) {\n      filesProcessed = parseInt(filesMatch[1]);\n    }\n    \n    // Parse safety score\n    const safetyMatch = output.match(/safety\\s+score[:\\s]+(\\d+(?:\\.\\d+)?)/i);\n    if (safetyMatch) {\n      safetyScore = parseFloat(safetyMatch[1]);\n    }\n    \n    // Extract warnings\n    const warningMatches = output.match(/⚠️[^\\n]*/g);\n    if (warningMatches) {\n      warnings.push(...warningMatches);\n    }\n    \n    // Extract errors\n    const errorMatches = output.match(/❌[^\\n]*/g);\n    if (errorMatches) {\n      errors.push(...errorMatches);\n    }\n    \n    return {\n      success,\n      filesProcessed,\n      safetyScore,\n      warnings,\n      errors\n    };\n  }\n\n  /**\n   * Validate build after explicit-any fixing\n   */\n  private async validateBuild(): Promise<boolean> {\n    try {\n      console.log('🔍 Validating build...');\n      \n      const startTime = Date.now();\n      execSync('yarn build', { \n        stdio: 'pipe',\n        timeout: 120000 // 2 minute timeout\n      });\n      \n      const buildTime = Date.now() - startTime;\n      console.log(`✅ Build validation passed (${buildTime}ms)`);\n      return true;\n      \n    } catch (error) {\n      console.log('❌ Build validation failed');\n      if (error instanceof Error) {\n        console.log(`   Error: ${error.message}`);\n      }\n      return false;\n    }\n  }\n\n  /**\n   * Get current explicit-any warning count\n   */\n  async getCurrentExplicitAnyCount(): Promise<number> {\n    try {\n      const output = execSync('yarn lint 2>&1 | grep -c \"@typescript-eslint/no-explicit-any\"', { \n        encoding: 'utf8',\n        stdio: 'pipe',\n        timeout: 30000 // 30 second timeout\n      });\n      return parseInt(output.trim()) || 0;\n    } catch (error) {\n      // If grep finds no matches, it returns exit code 1, or timeout occurred\n      console.warn('Explicit-any count check failed or timed out:', error.message);\n      return 0;\n    }\n  }\n\n  /**\n   * Load campaign progress from file\n   */\n  private async loadCampaignProgress(): Promise<CampaignProgress> {\n    try {\n      if (fs.existsSync(this.PROGRESS_FILE)) {\n        const data = await fs.promises.readFile(this.PROGRESS_FILE, 'utf8');\n        const progress = JSON.parse(data);\n        \n        // Recalculate current status\n        const currentCount = await this.getCurrentExplicitAnyCount();\n        const reductionAchieved = progress.totalExplicitAnyStart - currentCount;\n        const reductionPercentage = progress.totalExplicitAnyStart > 0 ? \n          (reductionAchieved / progress.totalExplicitAnyStart) * 100 : 0;\n        \n        return {\n          ...progress,\n          totalExplicitAnyRemaining: currentCount,\n          reductionAchieved,\n          reductionPercentage,\n          isTargetMet: reductionPercentage >= this.CAMPAIGN_TARGET_PERCENTAGE\n        };\n      }\n    } catch (error) {\n      console.log(`⚠️  Could not load campaign progress: ${error}`);\n    }\n    \n    // Initialize new campaign progress\n    const currentCount = await this.getCurrentExplicitAnyCount();\n    return {\n      totalExplicitAnyStart: currentCount,\n      totalExplicitAnyRemaining: currentCount,\n      reductionAchieved: 0,\n      reductionPercentage: 0,\n      campaignTarget: this.CAMPAIGN_TARGET_PERCENTAGE,\n      isTargetMet: false\n    };\n  }\n\n  /**\n   * Update campaign progress\n   */\n  private async updateCampaignProgress(additionalFixed: number): Promise<void> {\n    try {\n      const progress = await this.loadCampaignProgress();\n      \n      // Update progress\n      const currentCount = await this.getCurrentExplicitAnyCount();\n      const totalReductionAchieved = progress.totalExplicitAnyStart - currentCount;\n      const reductionPercentage = progress.totalExplicitAnyStart > 0 ? \n        (totalReductionAchieved / progress.totalExplicitAnyStart) * 100 : 0;\n      \n      const updatedProgress: CampaignProgress = {\n        ...progress,\n        totalExplicitAnyRemaining: currentCount,\n        reductionAchieved: totalReductionAchieved,\n        reductionPercentage,\n        isTargetMet: reductionPercentage >= this.CAMPAIGN_TARGET_PERCENTAGE\n      };\n      \n      await fs.promises.writeFile(this.PROGRESS_FILE, JSON.stringify(updatedProgress, null, 2));\n      \n      console.log(`📊 Campaign Progress Updated:`);\n      console.log(`   Reduction: ${reductionPercentage.toFixed(1)}% (target: ${this.CAMPAIGN_TARGET_PERCENTAGE}%)`);\n      console.log(`   Remaining: ${currentCount} explicit-any warnings`);\n      \n    } catch (error) {\n      console.error(`❌ Failed to update campaign progress: ${error}`);\n    }\n  }\n\n  /**\n   * Show campaign progress and metrics\n   */\n  async showCampaignProgress(): Promise<CampaignProgress> {\n    const progress = await this.loadCampaignProgress();\n    \n    console.log('\\n📊 EXPLICIT-ANY ELIMINATION CAMPAIGN PROGRESS');\n    console.log('=============================================');\n    console.log(`🎯 Campaign Target: ${progress.campaignTarget}% reduction`);\n    console.log(`📈 Current Progress: ${progress.reductionPercentage.toFixed(1)}%`);\n    console.log(`✅ Target Met: ${progress.isTargetMet ? 'Yes' : 'No'}`);\n    console.log(`🔢 Starting Count: ${progress.totalExplicitAnyStart}`);\n    console.log(`🔢 Current Count: ${progress.totalExplicitAnyRemaining}`);\n    console.log(`🔧 Total Fixed: ${progress.reductionAchieved}`);\n    \n    if (progress.isTargetMet) {\n      console.log(`🎉 Congratulations! Campaign target achieved!`);\n    } else {\n      const remaining = Math.ceil((progress.campaignTarget / 100) * progress.totalExplicitAnyStart) - progress.reductionAchieved;\n      console.log(`🎯 Need to fix ${remaining} more to reach target`);\n    }\n    \n    return progress;\n  }\n\n  /**\n   * Reset campaign progress (for testing or restart)\n   */\n  async resetCampaignProgress(): Promise<void> {\n    try {\n      if (fs.existsSync(this.PROGRESS_FILE)) {\n        await fs.promises.unlink(this.PROGRESS_FILE);\n        console.log('🔄 Campaign progress reset');\n      }\n    } catch (error) {\n      console.error(`❌ Failed to reset campaign progress: ${error}`);\n    }\n  }\n\n  /**\n   * Execute with campaign continuation (Requirements 1.8, 7.2)\n   */\n  async executeCampaignContinuation(): Promise<ExplicitAnyResult[]> {\n    console.log('🎯 Continuing 75.5% Explicit-Any Reduction Campaign...');\n    \n    // Show current progress\n    const progress = await this.showCampaignProgress();\n    \n    if (progress.isTargetMet) {\n      console.log('✅ Campaign target already achieved!');\n      return [];\n    }\n    \n    // Calculate how many more we need to fix\n    const targetCount = Math.ceil((progress.campaignTarget / 100) * progress.totalExplicitAnyStart);\n    const remainingToFix = targetCount - progress.reductionAchieved;\n    \n    console.log(`🎯 Need to fix approximately ${remainingToFix} more explicit-any warnings`);\n    \n    // Execute batch processing until target is met\n    const results = await this.executeBatchProcessing();\n    \n    // Final progress check\n    await this.showCampaignProgress();\n    \n    return results;\n  }\n}"],"version":3}