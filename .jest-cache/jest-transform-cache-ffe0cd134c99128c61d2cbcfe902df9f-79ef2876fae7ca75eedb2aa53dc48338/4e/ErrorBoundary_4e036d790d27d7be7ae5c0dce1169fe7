811491388e6b4f02b212286f2c81d353
"use strict";
'use client';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AsyncErrorBoundary = exports.useErrorHandler = exports.withErrorBoundary = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const logger_1 = require("@/utils/logger");
// Default fallback component with user-friendly error messages
const DefaultErrorFallback = (0, react_1.memo)(function DefaultErrorFallback({ error, errorInfo, onRetry, retryCount, maxRetries = 3 }) {
    const isDevelopment = process.env.NODE_ENV === 'development';
    return ((0, jsx_runtime_1.jsxs)("div", { className: "bg-red-50 border border-red-200 rounded-lg p-6 m-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2 mb-4", children: [(0, jsx_runtime_1.jsx)("div", { className: "flex-shrink-0", children: (0, jsx_runtime_1.jsx)("svg", { className: "h-5 w-5 text-red-400", viewBox: "0 0 20 20", fill: "currentColor", children: (0, jsx_runtime_1.jsx)("path", { fillRule: "evenodd", d: "M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z", clipRule: "evenodd" }) }) }), (0, jsx_runtime_1.jsx)("h3", { className: "text-lg font-medium text-red-800", children: "Something went wrong" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "mb-4", children: [(0, jsx_runtime_1.jsx)("p", { className: "text-red-700 mb-2", children: "We encountered an unexpected error. This has been logged and we're working to fix it." }), isDevelopment && ((0, jsx_runtime_1.jsxs)("details", { className: "mt-4", children: [(0, jsx_runtime_1.jsx)("summary", { className: "cursor-pointer text-red-600 font-medium mb-2", children: "Technical Details (Development Mode)" }), (0, jsx_runtime_1.jsxs)("div", { className: "bg-red-100 p-3 rounded border text-sm font-mono", children: [(0, jsx_runtime_1.jsxs)("div", { className: "mb-2", children: [(0, jsx_runtime_1.jsx)("strong", { children: "Error:" }), " ", error.message] }), (0, jsx_runtime_1.jsxs)("div", { className: "mb-2", children: [(0, jsx_runtime_1.jsx)("strong", { children: "Stack:" }), (0, jsx_runtime_1.jsx)("pre", { className: "whitespace-pre-wrap text-xs mt-1", children: error.stack })] }), errorInfo.componentStack && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("strong", { children: "Component Stack:" }), (0, jsx_runtime_1.jsx)("pre", { className: "whitespace-pre-wrap text-xs mt-1", children: errorInfo.componentStack })] }))] })] }))] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-3", children: [retryCount < maxRetries && ((0, jsx_runtime_1.jsxs)("button", { onClick: onRetry, className: "bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700 transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2", children: ["Try Again (", maxRetries - retryCount, " attempts left)"] })), (0, jsx_runtime_1.jsx)("button", { onClick: () => window.location.reload(), className: "bg-gray-600 text-white px-4 py-2 rounded hover:bg-gray-700 transition-colors focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2", children: "Reload Page" }), retryCount >= maxRetries && ((0, jsx_runtime_1.jsx)("p", { className: "text-red-600 text-sm", children: "Maximum retry attempts reached. Please reload the page or contact support." }))] })] }));
});
class ErrorBoundary extends react_1.Component {
    resetTimeoutId = null;
    constructor(props) {
        super(props);
        this.state = {
            hasError: false,
            error: null,
            errorInfo: null,
            errorId: '',
            retryCount: 0,
            lastResetKeys: props.resetKeys
        };
    }
    static getDerivedStateFromError(error) {
        // Generate unique error ID for tracking
        const errorId = `error_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        return {
            hasError: true,
            error,
            errorId
        };
    }
    componentDidCatch(error, errorInfo) {
        // Log error details
        logger_1.logger.error('ErrorBoundary caught an error:', {
            error: error.message,
            stack: error.stack,
            componentStack: errorInfo.componentStack,
            errorId: this.state.errorId,
            retryCount: this.state.retryCount
        });
        // Update state with error info
        this.setState({
            errorInfo
        });
        // Call custom error handler if provided
        if (this.props.onError) {
            this.props.onError(error, errorInfo);
        }
        // Report to external error tracking service if available
        if (typeof window !== 'undefined' && window.reportError) {
            window.reportError?.(error, {
                componentStack: errorInfo.componentStack,
                errorId: this.state.errorId
            });
        }
    }
    componentDidUpdate(prevProps) {
        const { resetKeys, resetOnPropsChange } = this.props;
        const { hasError, lastResetKeys } = this.state;
        // Reset error state if resetKeys have changed
        if (hasError && resetKeys && lastResetKeys) {
            const hasResetKeyChanged = resetKeys.some((key, index) => key !== lastResetKeys[index]);
            if (hasResetKeyChanged) {
                this.resetErrorBoundary();
            }
        }
        // Reset error state if resetOnPropsChange is true and props have changed
        if (hasError && resetOnPropsChange && prevProps !== this.props) {
            this.resetErrorBoundary();
        }
    }
    componentWillUnmount() {
        if (this.resetTimeoutId) {
            clearTimeout(this.resetTimeoutId);
        }
    }
    resetErrorBoundary = () => {
        if (this.resetTimeoutId) {
            clearTimeout(this.resetTimeoutId);
        }
        this.setState(prevState => ({
            hasError: false,
            error: null,
            errorInfo: null,
            errorId: '',
            retryCount: prevState.retryCount + 1,
            lastResetKeys: this.props.resetKeys
        }));
    };
    handleRetry = () => {
        // Add a small delay before retrying to prevent rapid retry loops
        this.resetTimeoutId = window.setTimeout(() => {
            this.resetErrorBoundary();
        }, 100);
    };
    render() {
        const { hasError, error, errorInfo, retryCount } = this.state;
        const { children, fallback, isolate } = this.props;
        if (hasError && error && errorInfo) {
            // Use custom fallback if provided
            if (fallback) {
                return fallback(error, errorInfo);
            }
            // Use default fallback
            return ((0, jsx_runtime_1.jsx)(DefaultErrorFallback, { error: error, errorInfo: errorInfo, onRetry: this.handleRetry, retryCount: retryCount }));
        }
        // If isolate is true, wrap children in an additional error boundary
        if (isolate) {
            return ((0, jsx_runtime_1.jsx)("div", { className: "error-boundary-isolation", children: children }));
        }
        return children;
    }
}
exports.default = ErrorBoundary;
// Higher-order component for easy error boundary wrapping
function withErrorBoundary(Component, errorBoundaryProps) {
    const WrappedComponent = (props) => ((0, jsx_runtime_1.jsx)(ErrorBoundary, { ...errorBoundaryProps, children: (0, jsx_runtime_1.jsx)(Component, { ...props }) }));
    WrappedComponent.displayName = `withErrorBoundary(${Component.displayName || Component.name})`;
    return WrappedComponent;
}
exports.withErrorBoundary = withErrorBoundary;
// Hook for programmatic error reporting
function useErrorHandler() {
    const reportError = react_1.default.useCallback((error, context) => {
        logger_1.logger.error('Manual error report:', {
            error: error.message,
            stack: error.stack,
            context,
            timestamp: new Date().toISOString()
        });
        // Report to external service if available
        if (typeof window !== 'undefined' && window.reportError) {
            window.reportError?.(error, context);
        }
    }, []);
    return { reportError };
}
exports.useErrorHandler = useErrorHandler;
// Async error boundary for handling promise rejections
class AsyncErrorBoundary extends react_1.Component {
    constructor(props) {
        super(props);
        this.state = {
            hasError: false,
            error: null,
            errorInfo: null,
            errorId: '',
            retryCount: 0
        };
    }
    componentDidMount() {
        // Handle unhandled promise rejections
        window.addEventListener('unhandledrejection', this.handleUnhandledRejection);
    }
    componentWillUnmount() {
        window.removeEventListener('unhandledrejection', this.handleUnhandledRejection);
    }
    handleUnhandledRejection = (event) => {
        const error = event.reason instanceof Error ? event.reason : new Error(String(event.reason));
        this.setState({
            hasError: true,
            error,
            errorInfo: { componentStack: 'Async Error (Promise Rejection)' },
            errorId: `async_error_${Date.now()}`
        });
        logger_1.logger.error('Unhandled promise rejection:', {
            error: error.message,
            stack: error.stack,
            reason: event.reason
        });
        // Prevent the default browser behavior
        event.preventDefault();
    };
    render() {
        // Use the same rendering logic as ErrorBoundary
        const { hasError, error, errorInfo } = this.state;
        const { children, fallback } = this.props;
        if (hasError && error && errorInfo) {
            if (fallback) {
                return fallback(error, errorInfo);
            }
            return ((0, jsx_runtime_1.jsx)(DefaultErrorFallback, { error: error, errorInfo: errorInfo, onRetry: () => this.setState({ hasError: false, error: null, errorInfo: null }), retryCount: this.state.retryCount }));
        }
        return children;
    }
}
exports.AsyncErrorBoundary = AsyncErrorBoundary;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,