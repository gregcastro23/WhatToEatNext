4707e64fce020588c2ba40c4edebca2c
"use strict";
'use client';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComponentFallbacks = exports.MaintenanceFallback = exports.LoadingFallback = exports.NetworkErrorFallback = exports.RecipeBuilderFallback = exports.CookingMethodsFallback = exports.IngredientRecommenderFallback = exports.CuisineRecommenderFallback = exports.GenericFallback = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const lucide_react_1 = require("lucide-react");
const react_1 = __importStar(require("react"));
// Generic fallback component
exports.GenericFallback = (0, react_1.memo)(function GenericFallback({ onRetry, error, componentName = 'Component', showRetry = true, showDetails = false }) {
    return ((0, jsx_runtime_1.jsxs)("div", { className: "bg-gray-50 border border-gray-200 rounded-lg p-6 text-center", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.AlertCircle, { className: "mx-auto h-12 w-12 text-gray-400 mb-4" }), (0, jsx_runtime_1.jsxs)("h3", { className: "text-lg font-medium text-gray-900 mb-2", children: [componentName, " Unavailable"] }), (0, jsx_runtime_1.jsx)("p", { className: "text-gray-600 mb-4", children: "We're having trouble loading this section. Please try again." }), showDetails && error && ((0, jsx_runtime_1.jsxs)("details", { className: "mb-4 text-left", children: [(0, jsx_runtime_1.jsx)("summary", { className: "cursor-pointer text-gray-500 text-sm mb-2", children: "Technical Details" }), (0, jsx_runtime_1.jsx)("div", { className: "bg-gray-100 p-3 rounded text-xs font-mono text-gray-700", children: error.message })] })), showRetry && onRetry && ((0, jsx_runtime_1.jsxs)("button", { onClick: onRetry, className: "inline-flex items-center px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 transition-colors", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.RefreshCw, { className: "w-4 h-4 mr-2" }), "Try Again"] }))] }));
});
// Cuisine Recommender fallback
exports.CuisineRecommenderFallback = (0, react_1.memo)(function CuisineRecommenderFallback({ onRetry, showRetry = true }) {
    return ((0, jsx_runtime_1.jsxs)("div", { className: "bg-orange-50 border border-orange-200 rounded-lg p-6", children: [(0, jsx_runtime_1.jsx)("div", { className: "flex items-center justify-center mb-4", children: (0, jsx_runtime_1.jsx)(lucide_react_1.Utensils, { className: "h-12 w-12 text-orange-400" }) }), (0, jsx_runtime_1.jsx)("h3", { className: "text-lg font-medium text-orange-900 text-center mb-2", children: "Cuisine Recommendations Unavailable" }), (0, jsx_runtime_1.jsx)("p", { className: "text-orange-700 text-center mb-4", children: "We're having trouble connecting to our culinary database. Here are some popular options while we fix this:" }), (0, jsx_runtime_1.jsx)("div", { className: "grid grid-cols-2 md:grid-cols-3 gap-3 mb-4", children: ['Italian', 'Chinese', 'Mexican', 'Indian', 'Thai', 'Mediterranean'].map(cuisine => ((0, jsx_runtime_1.jsx)("div", { className: "bg-white p-3 rounded border text-center", children: (0, jsx_runtime_1.jsx)("span", { className: "text-sm font-medium text-gray-700", children: cuisine }) }, cuisine))) }), showRetry && onRetry && ((0, jsx_runtime_1.jsx)("div", { className: "text-center", children: (0, jsx_runtime_1.jsxs)("button", { onClick: onRetry, className: "inline-flex items-center px-4 py-2 bg-orange-600 text-white rounded hover:bg-orange-700 transition-colors", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.RefreshCw, { className: "w-4 h-4 mr-2" }), "Reload Recommendations"] }) }))] }));
});
// Ingredient Recommender fallback
exports.IngredientRecommenderFallback = (0, react_1.memo)(function IngredientRecommenderFallback({ onRetry, showRetry = true }) {
    return ((0, jsx_runtime_1.jsxs)("div", { className: "bg-green-50 border border-green-200 rounded-lg p-6", children: [(0, jsx_runtime_1.jsx)("div", { className: "flex items-center justify-center mb-4", children: (0, jsx_runtime_1.jsx)(lucide_react_1.Database, { className: "h-12 w-12 text-green-400" }) }), (0, jsx_runtime_1.jsx)("h3", { className: "text-lg font-medium text-green-900 text-center mb-2", children: "Ingredient Recommendations Unavailable" }), (0, jsx_runtime_1.jsx)("p", { className: "text-green-700 text-center mb-4", children: "Our ingredient database is temporarily unavailable. Here are some versatile ingredients to consider:" }), (0, jsx_runtime_1.jsx)("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-2 mb-4", children: [
                    'Onions', 'Garlic', 'Tomatoes', 'Bell Peppers',
                    'Olive Oil', 'Salt', 'Black Pepper', 'Herbs'
                ].map(ingredient => ((0, jsx_runtime_1.jsx)("div", { className: "bg-white p-2 rounded border text-center", children: (0, jsx_runtime_1.jsx)("span", { className: "text-xs font-medium text-gray-700", children: ingredient }) }, ingredient))) }), showRetry && onRetry && ((0, jsx_runtime_1.jsx)("div", { className: "text-center", children: (0, jsx_runtime_1.jsxs)("button", { onClick: onRetry, className: "inline-flex items-center px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.RefreshCw, { className: "w-4 h-4 mr-2" }), "Reload Ingredients"] }) }))] }));
});
// Cooking Methods fallback
exports.CookingMethodsFallback = (0, react_1.memo)(function CookingMethodsFallback({ onRetry, showRetry = true }) {
    return ((0, jsx_runtime_1.jsxs)("div", { className: "bg-blue-50 border border-blue-200 rounded-lg p-6", children: [(0, jsx_runtime_1.jsx)("div", { className: "flex items-center justify-center mb-4", children: (0, jsx_runtime_1.jsx)(lucide_react_1.ChefHat, { className: "h-12 w-12 text-blue-400" }) }), (0, jsx_runtime_1.jsx)("h3", { className: "text-lg font-medium text-blue-900 text-center mb-2", children: "Cooking Methods Unavailable" }), (0, jsx_runtime_1.jsx)("p", { className: "text-blue-700 text-center mb-4", children: "We're having trouble loading cooking methods. Here are some fundamental techniques:" }), (0, jsx_runtime_1.jsx)("div", { className: "grid grid-cols-2 md:grid-cols-3 gap-3 mb-4", children: [
                    'SautÃ©ing', 'Roasting', 'Steaming',
                    'Grilling', 'Braising', 'Stir-frying'
                ].map(method => ((0, jsx_runtime_1.jsx)("div", { className: "bg-white p-3 rounded border text-center", children: (0, jsx_runtime_1.jsx)("span", { className: "text-sm font-medium text-gray-700", children: method }) }, method))) }), showRetry && onRetry && ((0, jsx_runtime_1.jsx)("div", { className: "text-center", children: (0, jsx_runtime_1.jsxs)("button", { onClick: onRetry, className: "inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.RefreshCw, { className: "w-4 h-4 mr-2" }), "Reload Methods"] }) }))] }));
});
// Recipe Builder fallback
exports.RecipeBuilderFallback = (0, react_1.memo)(function RecipeBuilderFallback({ onRetry, showRetry = true }) {
    return ((0, jsx_runtime_1.jsxs)("div", { className: "bg-purple-50 border border-purple-200 rounded-lg p-6", children: [(0, jsx_runtime_1.jsx)("div", { className: "flex items-center justify-center mb-4", children: (0, jsx_runtime_1.jsx)(lucide_react_1.BookOpen, { className: "h-12 w-12 text-purple-400" }) }), (0, jsx_runtime_1.jsx)("h3", { className: "text-lg font-medium text-purple-900 text-center mb-2", children: "Recipe Builder Unavailable" }), (0, jsx_runtime_1.jsx)("p", { className: "text-purple-700 text-center mb-4", children: "The recipe builder is temporarily unavailable. You can still plan your cooking manually:" }), (0, jsx_runtime_1.jsxs)("div", { className: "bg-white p-4 rounded border mb-4", children: [(0, jsx_runtime_1.jsx)("h4", { className: "font-medium text-gray-900 mb-2", children: "Quick Recipe Planning Tips:" }), (0, jsx_runtime_1.jsxs)("ul", { className: "text-sm text-gray-700 space-y-1", children: [(0, jsx_runtime_1.jsx)("li", { children: "\u2022 Choose your main protein or vegetable" }), (0, jsx_runtime_1.jsx)("li", { children: "\u2022 Select complementary seasonings" }), (0, jsx_runtime_1.jsx)("li", { children: "\u2022 Pick a cooking method that suits your ingredients" }), (0, jsx_runtime_1.jsx)("li", { children: "\u2022 Consider timing for each component" })] })] }), showRetry && onRetry && ((0, jsx_runtime_1.jsx)("div", { className: "text-center", children: (0, jsx_runtime_1.jsxs)("button", { onClick: onRetry, className: "inline-flex items-center px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 transition-colors", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.RefreshCw, { className: "w-4 h-4 mr-2" }), "Reload Recipe Builder"] }) }))] }));
});
// Network error fallback
exports.NetworkErrorFallback = (0, react_1.memo)(function NetworkErrorFallback({ onRetry, componentName = 'Content', showRetry = true }) {
    return ((0, jsx_runtime_1.jsxs)("div", { className: "bg-red-50 border border-red-200 rounded-lg p-6 text-center", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Wifi, { className: "mx-auto h-12 w-12 text-red-400 mb-4" }), (0, jsx_runtime_1.jsx)("h3", { className: "text-lg font-medium text-red-900 mb-2", children: "Connection Problem" }), (0, jsx_runtime_1.jsx)("p", { className: "text-red-700 mb-4", children: "We're having trouble connecting to our servers. Please check your internet connection and try again." }), (0, jsx_runtime_1.jsxs)("div", { className: "bg-white p-3 rounded border mb-4", children: [(0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-600", children: (0, jsx_runtime_1.jsx)("strong", { children: "Troubleshooting:" }) }), (0, jsx_runtime_1.jsxs)("ul", { className: "text-xs text-gray-500 mt-1 text-left", children: [(0, jsx_runtime_1.jsx)("li", { children: "\u2022 Check your internet connection" }), (0, jsx_runtime_1.jsx)("li", { children: "\u2022 Try refreshing the page" }), (0, jsx_runtime_1.jsx)("li", { children: "\u2022 Disable any ad blockers temporarily" }), (0, jsx_runtime_1.jsx)("li", { children: "\u2022 Try again in a few minutes" })] })] }), showRetry && onRetry && ((0, jsx_runtime_1.jsxs)("button", { onClick: onRetry, className: "inline-flex items-center px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.RefreshCw, { className: "w-4 h-4 mr-2" }), "Try Again"] }))] }));
});
// Loading fallback with skeleton
exports.LoadingFallback = (0, react_1.memo)(function LoadingFallback({ componentName = 'Content' }) {
    return ((0, jsx_runtime_1.jsxs)("div", { className: "bg-gray-50 rounded-lg p-6", children: [(0, jsx_runtime_1.jsxs)("div", { className: "animate-pulse", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center mb-4", children: [(0, jsx_runtime_1.jsx)("div", { className: "rounded-full bg-gray-300 h-8 w-8 mr-3" }), (0, jsx_runtime_1.jsx)("div", { className: "h-4 bg-gray-300 rounded w-1/4" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-3", children: [(0, jsx_runtime_1.jsx)("div", { className: "h-4 bg-gray-300 rounded w-3/4" }), (0, jsx_runtime_1.jsx)("div", { className: "h-4 bg-gray-300 rounded w-1/2" }), (0, jsx_runtime_1.jsx)("div", { className: "h-4 bg-gray-300 rounded w-5/6" })] }), (0, jsx_runtime_1.jsx)("div", { className: "mt-6 grid grid-cols-2 md:grid-cols-3 gap-4", children: [1, 2, 3, 4, 5, 6].map(i => ((0, jsx_runtime_1.jsx)("div", { className: "h-20 bg-gray-300 rounded" }, i))) })] }), (0, jsx_runtime_1.jsx)("div", { className: "text-center mt-4", children: (0, jsx_runtime_1.jsxs)("p", { className: "text-gray-500 text-sm", children: ["Loading ", componentName, "..."] }) })] }));
});
// Maintenance mode fallback
exports.MaintenanceFallback = (0, react_1.memo)(function MaintenanceFallback({ componentName = 'Service' }) {
    return ((0, jsx_runtime_1.jsxs)("div", { className: "bg-yellow-50 border border-yellow-200 rounded-lg p-6 text-center", children: [(0, jsx_runtime_1.jsx)("div", { className: "mx-auto h-12 w-12 text-yellow-400 mb-4", children: "\uD83D\uDD27" }), (0, jsx_runtime_1.jsx)("h3", { className: "text-lg font-medium text-yellow-900 mb-2", children: "Temporary Maintenance" }), (0, jsx_runtime_1.jsxs)("p", { className: "text-yellow-700 mb-4", children: [componentName, " is currently undergoing maintenance. We'll be back shortly!"] }), (0, jsx_runtime_1.jsx)("div", { className: "bg-white p-3 rounded border", children: (0, jsx_runtime_1.jsxs)("p", { className: "text-sm text-gray-600", children: ["Expected completion: ", (0, jsx_runtime_1.jsx)("strong", { children: "Within 15 minutes" })] }) })] }));
});
// Export all fallbacks
exports.ComponentFallbacks = {
    Generic: exports.GenericFallback,
    CuisineRecommender: exports.CuisineRecommenderFallback,
    IngredientRecommender: exports.IngredientRecommenderFallback,
    CookingMethods: exports.CookingMethodsFallback,
    RecipeBuilder: exports.RecipeBuilderFallback,
    NetworkError: exports.NetworkErrorFallback,
    Loading: exports.LoadingFallback,
    Maintenance: exports.MaintenanceFallback
};
exports.default = exports.ComponentFallbacks;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,