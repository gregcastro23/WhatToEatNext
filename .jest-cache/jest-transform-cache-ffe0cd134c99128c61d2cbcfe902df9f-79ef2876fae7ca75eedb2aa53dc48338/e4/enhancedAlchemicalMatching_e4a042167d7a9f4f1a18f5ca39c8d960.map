{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/calculations/enhancedAlchemicalMatching.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/calculations/enhancedAlchemicalMatching.ts"],"sourcesContent":["import { \n  ElementalProperties, \n  ZodiacSign, \n  AlchemicalResult,\n  PlanetaryPosition} from '@/types/alchemy';\nimport { signs } from '../data/astroData';\n/**\n * Enhanced matithm to calculate astrological affinity between two signs\n * This integrates multiple data sources including:\n * 1. Decanic compatibility\n * 2. Degree-specific planetary influences\n * 3. Tarot correspondences\n * 4. Modality interactions\n * \n * @param signA First zodiac sign\n * @param signB Second zodiac sign\n * @param planets Optional planetary positions for more accurate calculations\n * @returns Numeric score between 0-1 representing astrological affinity\n */\nexport function calculateAstrologicalAffinity(\n  signA: ZodiacSign,\n  signB: ZodiacSign, \n  _planets?: Record<string, PlanetaryPosition>\n): number {\n  // Base elemental compatibility\n  const elementA = signs[signA]?.Element;\n  const elementB = signs[signB]?.Element;\n  \n  // Get modalities\n  const modalityA = signs[signA]?.Modality;\n  const modalityB = signs[signB]?.Modality;\n  \n  // Start with base elemental compatibility score\n  let baseScore = 0.5; // Neutral starting point\n  \n  // Elemental compatibility matrix\n  // Elements are only harmonious with themselves\n  // Fire + Fire = Harmonious, Water + Water = Harmonious, etc.\n  // Different elements create various interactions based on their character\n  if (elementA && elementB) {\n    if (elementA === elementB) {\n      // Same element - apply modality affinity if available\n      if (modalityA && modalityB) {\n        // Apply element-modality natural affinity boost\n        const modalityCompatibility = compareModalities(modalityA, modalityB, elementA, elementB);\n        baseScore = 0.6 + (modalityCompatibility * 0.3); // Scale between 0.6-0.9\n      } else {\n        baseScore = 0.8; // Default same element without modality info\n      }\n    } else {\n      // Different elements are less harmonious\n      baseScore = 0.4;\n    }\n  }\n  \n  // Calculate decanic compatibility\n  const decanCompat = compareDecanRulers(\n    signs[signA]?.[\"Decan Effects\"] || {},\n    signs[signB]?.[\"Decan Effects\"] || {}\n  );\n  \n  // Calculate degree-specific influences\n  const degreeCompat = calculateDegreeOverlap(\n    signs[signA]?.[\"Degree Effects\"] || {},\n    signs[signB]?.[\"Degree Effects\"] || {}\n  );\n  \n  // Calculate tarot correspondences influence\n  const tarotCompat = compareTarotArcana(\n    signs[signA]?.[\"Major Tarot Card\"] || \"\",\n    signs[signB]?.[\"Major Tarot Card\"] || \"\"\n  );\n  \n  // Calculate modality compatibility with elements\n  const modalityCompat = modalityA && modalityB ? \n    compareModalities(modalityA, modalityB, elementA, elementB) : 0.5;\n  \n  // Calculate rulership compatibility\n  const rulerCompat = compareRulers(\n    signs[signA]?.Ruler || \"\",\n    signs[signB]?.Ruler || \"\"\n  );\n  \n  // Weight components based on their relative importance\n  return (\n    baseScore * 0.35 +         // Element base compatibility (35%)\n    decanCompat * 0.15 +       // Decanic influences (15%)\n    degreeCompat * 0.15 +      // Degree-specific effects (15%)\n    modalityCompat * 0.20 +    // Modality compatibility (20% - increased from 15%)\n    rulerCompat * 0.10 +       // Planetary rulership (10% - decreased from 15%)\n    tarotCompat * 0.05         // Tarot correspondences (5%)\n  );\n}\n\n/**\n * Compare decanic rulers between two signs for compatibility\n * \n * @param decanA First sign's decan effects\n * @param decanB Second sign's decan effects\n * @returns Compatibility score between 0-1\n */\nfunction compareDecanRulers(\n  decanA: Record<string, unknown>,\n  decanB: Record<string, unknown>\n): number {\n  let compatibilityScore = 0;\n  let comparisons = 0;\n  \n  // Extract all planetary rulers from both signs' decans\n  const extractRulers = (decans: Record<string, unknown>): string[] => {\n    const rulers: string[] = [];\n    Object.values(decans).forEach(decan => {\n      if (Array.isArray(decan)) {\n        rulers.push(...decan);\n      }\n    });\n    return rulers;\n  };\n  \n  const rulersA = extractRulers(decanA);\n  const rulersB = extractRulers(decanB);\n  \n  // No rulers found\n  if (rulersA.length === 0 || rulersB.length === 0) {\n    return 0.5; // Neutral compatibility\n  }\n  \n  // Count matches and harmonious pairs\n  rulersA.forEach(rulerA => {\n    rulersB.forEach(rulerB => {\n      comparisons++;\n      \n      // Exact match\n      if (rulerA === rulerB) {\n        compatibilityScore += 1.0;\n      } \n      // Harmonious pairs (based on planetary dignities)\n      else if (\n        (rulerA === 'Sun' && rulerB === 'Jupiter') ||\n        (rulerA === 'Jupiter' && rulerB === 'Sun') ||\n        (rulerA === 'Moon' && rulerB === 'Venus') ||\n        (rulerA === 'Venus' && rulerB === 'Moon') ||\n        (rulerA === 'Mercury' && rulerB === 'Uranus') ||\n        (rulerA === 'Uranus' && rulerB === 'Mercury') ||\n        (rulerA === 'Mars' && rulerB === 'Pluto') ||\n        (rulerA === 'Pluto' && rulerB === 'Mars') ||\n        (rulerA === 'Saturn' && rulerB === 'Neptune') ||\n        (rulerA === 'Neptune' && rulerB === 'Saturn')\n      ) {\n        compatibilityScore += 0.75;\n      }\n      // Neutral pairs\n      else {\n        compatibilityScore += 0.5;\n      }\n    });\n  });\n  \n  // Return average compatibility score\n  return comparisons > 0 \n    ? compatibilityScore / comparisons \n    : 0.5;\n}\n\n/**\n * Calculate compatibility based on degree-specific planetary influences\n * \n * @param degreesA First sign's degree effects\n * @param degreesB Second sign's degree effects\n * @returns Compatibility score between 0-1\n */\nfunction calculateDegreeOverlap(\n  degreesA: Record<string, unknown>,\n  degreesB: Record<string, unknown>\n): number {\n  // If no degree data available, return neutral score\n  if (\n    !degreesA || \n    !degreesB || \n    Object.keys(degreesA).length === 0 || \n    Object.keys(degreesB).length === 0\n  ) {\n    return 0.5;\n  }\n  \n  let totalPlanets = 0;\n  let overlappingPlanets = 0;\n  \n  // Count planets that appear in both signs' degree effects\n  Object.keys(degreesA).forEach(planet => {\n    totalPlanets++;\n    if (degreesB[planet]) {\n      overlappingPlanets++;\n    }\n  });\n  \n  Object.keys(degreesB).forEach(planet => {\n    if (!degreesA[planet]) {\n      totalPlanets++; // Count unique planets in the second sign\n    }\n  });\n  \n  // Calculate overlap percentage and convert to a score\n  const overlapPercentage = totalPlanets > 0 \n    ? overlappingPlanets / totalPlanets \n    : 0;\n    \n  // Weight shared planetary influences (higher = more compatible)\n  return 0.4 + (overlapPercentage * 0.6);\n}\n\n/**\n * Compare tarot arcana correspondences for compatibility\n * \n * @param tarotA First sign's major arcana\n * @param tarotB Second sign's major arcana\n * @returns Compatibility score between 0-1\n */\nfunction compareTarotArcana(tarotA: string, tarotB: string): number {\n  // Element-based tarot card groups\n  const elementGroups = {\n    fire: [\"The Emperor\", \"Strength\", \"Temperance\", \"The Sun\"],\n    water: [\"The High Priestess\", \"The Hanged Man\", \"Death\", \"The Moon\"],\n    air: [\"The Magician\", \"Justice\", \"The Star\", \"The World\"],\n    earth: [\"The Hierophant\", \"The Hermit\", \"The Devil\", \"Judgement\"],\n    neutral: [\"The Fool\", \"The Chariot\", \"The Tower\", \"The Lovers\", \"The Wheel of Fortune\"]\n  };\n  \n  // Determine which groups the cards belong to\n  let groupA: string | null = null;\n  let groupB: string | null = null;\n  \n  for (const [element, cards] of Object.entries(elementGroups)) {\n    if (cards.includes(tarotA)) {\n      groupA = element;\n    }\n    if (cards.includes(tarotB)) {\n      groupB = element;\n    }\n  }\n  \n  // Score based on tarot card relationships - corrected to match elemental harmony rules\n  if (!groupA || !groupB) {\n    return 0.5; // Neutral if cards not found\n  }\n  \n  // Same card = perfect match\n  if (tarotA === tarotB) {\n    return 1.0;\n  }\n  \n  // Same element group = good match\n  if (groupA === groupB) {\n    return 0.8;\n  }\n  \n  // Different elements have less harmony\n  return 0.4;\n}\n\n/**\n * Compare modalities for compatibility, implementing hierarchical elemental modality affinities\n * \n * @param modalityA First sign's modality\n * @param modalityB Second sign's modality\n * @param elementA First sign's element (optional)\n * @param elementB Second sign's element (optional)\n * @returns Compatibility score between 0-1\n */\nfunction compareModalities(\n  modalityA: string, \n  modalityB: string,\n  elementA?: string,\n  elementB?: string\n): number {\n  // Same modality = higher compatibility\n  if (modalityA === modalityB) {\n    // If we have elements, apply element-modality affinity bonus\n    if (elementA && elementB) {\n      // Same element has highest compatibility\n      if (elementA === elementB) {\n        // The specific modality matters for same-element combinations\n        if (modalityA === 'Cardinal') {\n          // Cardinal + Cardinal of same element has equal resonance for all elements\n          return 0.9;\n        } else if (modalityA === 'Fixed') {\n          // Fixed + Fixed follows hierarchy: Earth > Water > Fire > Air\n          if (elementA === 'Earth') return 0.95;\n          if (elementA === 'Water') return 0.9;\n          if (elementA === 'Fire') return 0.85;\n          if (elementA === 'Air') return 0.8;\n        } else if (modalityA === 'Mutable') {\n          // Mutable + Mutable follows hierarchy: Air > Water > Fire > Earth\n          if (elementA === 'Air') return 0.95;\n          if (elementA === 'Water') return 0.9;\n          if (elementA === 'Fire') return 0.85;\n          if (elementA === 'Earth') return 0.8;\n        }\n      } else {\n        // Different elements - get individual element-modality affinities\n        const affinityA = getElementModalityAffinity(elementA, modalityA);\n        const affinityB = getElementModalityAffinity(elementB, modalityA);\n        \n        // Average the affinities\n        return (affinityA + affinityB) / 2;\n      }\n    }\n    return 0.8; // Same modality without element information\n  }\n  \n  // Different modalities\n  \n  // Cardinal and Fixed combinations\n  if (\n    (modalityA === 'Cardinal' && modalityB === 'Fixed') ||\n    (modalityA === 'Fixed' && modalityB === 'Cardinal')\n  ) {\n    // If we have elements, check natural affinities\n    if (elementA && elementB) {\n      if (elementA === elementB) {\n        // Same element\n        if (elementA === 'Earth') return 0.75; // Earth bridges Cardinal-Fixed well\n        if (elementA === 'Water') return 0.7;\n        if (elementA === 'Fire') return 0.65;\n        if (elementA === 'Air') return 0.6;\n      } else {\n        // Different elements - calculate average of their modal affinities\n        const cardinalModality = modalityA === 'Cardinal' ? modalityA : modalityB;\n        const fixedModality = modalityA === 'Fixed' ? modalityA : modalityB;\n        \n        const elementACardinal = getElementModalityAffinity(elementA, cardinalModality);\n        const elementBCardinal = getElementModalityAffinity(elementB, cardinalModality);\n        const elementAFixed = getElementModalityAffinity(elementA, fixedModality);\n        const elementBFixed = getElementModalityAffinity(elementB, fixedModality);\n        \n        return (elementACardinal + elementBCardinal + elementAFixed + elementBFixed) / 4;\n      }\n    }\n    return 0.5; // Without element information\n  }\n  \n  // Cardinal and Mutable combinations\n  if (\n    (modalityA === 'Cardinal' && modalityB === 'Mutable') ||\n    (modalityA === 'Mutable' && modalityB === 'Cardinal')\n  ) {\n    // If we have elements, check natural affinities\n    if (elementA && elementB) {\n      if (elementA === elementB) {\n        // Same element\n        if (elementA === 'Air') return 0.75; // Air bridges Cardinal-Mutable well\n        if (elementA === 'Water') return 0.7;\n        if (elementA === 'Fire') return 0.65;\n        if (elementA === 'Earth') return 0.6;\n      } else {\n        // Different elements - calculate average of their modal affinities\n        const cardinalModality = modalityA === 'Cardinal' ? modalityA : modalityB;\n        const mutableModality = modalityA === 'Mutable' ? modalityA : modalityB;\n        \n        const elementACardinal = getElementModalityAffinity(elementA, cardinalModality);\n        const elementBCardinal = getElementModalityAffinity(elementB, cardinalModality);\n        const elementAMutable = getElementModalityAffinity(elementA, mutableModality);\n        const elementBMutable = getElementModalityAffinity(elementB, mutableModality);\n        \n        return (elementACardinal + elementBCardinal + elementAMutable + elementBMutable) / 4;\n      }\n    }\n    return 0.6; // Without element information\n  }\n  \n  // Fixed and Mutable combinations (typically challenging)\n  if (\n    (modalityA === 'Fixed' && modalityB === 'Mutable') ||\n    (modalityA === 'Mutable' && modalityB === 'Fixed')\n  ) {\n    // If we have elements, check natural affinities\n    if (elementA && elementB) {\n      if (elementA === elementB) {\n        // Same element\n        if (elementA === 'Water') return 0.7; // Water bridges Fixed-Mutable best\n        if (elementA === 'Fire') return 0.6; \n        if (elementA === 'Earth' || elementA === 'Air') return 0.5;\n      } else {\n        // Different elements - calculate average of their modal affinities\n        const fixedModality = modalityA === 'Fixed' ? modalityA : modalityB;\n        const mutableModality = modalityA === 'Mutable' ? modalityA : modalityB;\n        \n        const elementAFixed = getElementModalityAffinity(elementA, fixedModality);\n        const elementBFixed = getElementModalityAffinity(elementB, fixedModality);\n        const elementAMutable = getElementModalityAffinity(elementA, mutableModality);\n        const elementBMutable = getElementModalityAffinity(elementB, mutableModality);\n        \n        return (elementAFixed + elementBFixed + elementAMutable + elementBMutable) / 4;\n      }\n    }\n    return 0.4; // Without element information\n  }\n  \n  return 0.5; // Default neutral score\n}\n\n/**\n * Calculate element-modality natural affinity\n * Uses the hierarchical affinities:\n * - Mutability: Air > Water > Fire > Earth\n * - Fixed: Earth > Water > Fire > Air\n * - Cardinal: Equal for all elements\n * \n * @param element Element to check\n * @param modality Modality to check\n * @returns Affinity score between 0-1\n */\nfunction getElementModalityAffinity(element: string, modality: string): number {\n  // Mutability hierarchy (high to low): Air > Water > Fire > Earth\n  if (modality === 'Mutable') {\n    switch (element) {\n      case 'Air': return 0.9;\n      case 'Water': return 0.8;\n      case 'Fire': return 0.7;\n      case 'Earth': return 0.5;\n      default: return 0.5;\n    }\n  }\n  \n  // Fixed hierarchy (high to low): Earth > Water > Fire > Air\n  if (modality === 'Fixed') {\n    switch (element) {\n      case 'Earth': return 0.9;\n      case 'Water': return 0.8;\n      case 'Fire': return 0.6;\n      case 'Air': return 0.5;\n      default: return 0.5;\n    }\n  }\n  \n  // Cardinality is equal for all elements\n  if (modality === 'Cardinal') {\n    return 0.8;\n  }\n  \n  return 0.5; // Default\n}\n\n/**\n * Compare planetary rulers for compatibility\n * \n * @param rulerA First sign's planetary ruler\n * @param rulerB Second sign's planetary ruler\n * @returns Compatibility score between 0-1\n */\nfunction compareRulers(rulerA: string, rulerB: string): number {\n  // Same ruler = strong compatibility\n  if (rulerA === rulerB) {\n    return 0.9;\n  }\n  \n  // Define ruler pairs that work well together\n  const harmonious: [string, string][] = [\n    ['Sun', 'Jupiter'],\n    ['Jupiter', 'Sun'],\n    ['Moon', 'Venus'],\n    ['Venus', 'Moon'],\n    ['Mercury', 'Uranus'],\n    ['Uranus', 'Mercury'],\n    ['Mars', 'Pluto'],\n    ['Pluto', 'Mars'],\n    ['Saturn', 'Neptune'],\n    ['Neptune', 'Saturn']\n  ];\n  \n  // Define ruler pairs that create tension\n  const challenging: [string, string][] = [\n    ['Sun', 'Saturn'],\n    ['Saturn', 'Sun'],\n    ['Moon', 'Mars'],\n    ['Mars', 'Moon'],\n    ['Venus', 'Pluto'],\n    ['Pluto', 'Venus'],\n    ['Mercury', 'Jupiter'],\n    ['Jupiter', 'Mercury']\n  ];\n  \n  // Check if rulers are in harmonious pairs\n  if (harmonious.some(([a, b]) => a === rulerA && b === rulerB)) {\n    return 0.8;\n  }\n  \n  // Check if rulers are in challenging pairs\n  if (challenging.some(([a, b]) => a === rulerA && b === rulerB)) {\n    return 0.3;\n  }\n  \n  return 0.5; // Default neutral score\n}\n\n/**\n * Evaluate alchemical compatibility between two recipes or ingredients\n * This function integrates multiple data sources for a comprehensive match\n * \n * @param elementalPropertiesA First recipe/ingredient's elemental properties\n * @param elementalPropertiesB Second recipe/ingredient's elemental properties\n * @param zodiacA Optional zodiac sign association for first item\n * @param zodiacB Optional zodiac sign association for second item\n * @returns Match score between 0 and 1\n */\nexport function calculateAlchemicalCompatibility(\n  elementalPropertiesA: ElementalProperties,\n  elementalPropertiesB: ElementalProperties,\n  zodiacA?: ZodiacSign,\n  zodiacB?: ZodiacSign\n): number {\n  // Calculate basic elemental compatibility\n  let elementalScore = 0;\n  let totalWeight = 0;\n  \n  // Compare each element pair\n  Object.entries(elementalPropertiesA).forEach(([element, valueA]) => {\n    const valueB = elementalPropertiesB[element as keyof ElementalProperties] || 0;\n    const weight = (valueA + valueB) / 2; // Average weight of this element\n    \n    // Similar values are more compatible\n    const similarity = 1 - Math.abs(valueA - valueB);\n    \n    elementalScore += similarity * weight;\n    totalWeight += weight;\n  });\n  \n  // Normalize elemental score\n  const normalizedElementalScore = totalWeight > 0 \n    ? elementalScore / totalWeight \n    : 0.5;\n  \n  // Calculate zodiac compatibility if signs are provided\n  let zodiacScore = 0.5; // Default neutral score\n  \n  if (zodiacA && zodiacB) {\n    zodiacScore = calculateAstrologicalAffinity(zodiacA, zodiacB);\n  }\n  \n  // Weight elemental properties more than zodiac association\n  return normalizedElementalScore * 0.7 + zodiacScore * 0.3;\n}\n\n/**\n * Enhanced meal recommendation algorithm based on multiple influences\n * \n * @param astroResult The calculated alchemical result\n * @param userPreferences Optional user dietary preferences/restrictions\n * @param season Optional current season\n * @returns Recommended meal components with reasoning\n */\nexport function generateEnhancedRecommendation(\n  astroResult: EnhancedAlchemicalResult,\n  userPreferences?: string[],\n  season?: string\n): {\n  mainIngredient: string;\n  secondaryIngredient: string;\n  flavor: string;\n  cookingMethod: string;\n  reasoning: {\n    elementalInfluence: string;\n    decanic: string;\n    planetary: string;\n    seasonal: string;\n    modalityInfluence: string;\n  }\n} {\n  // Extract dominant element and modality - Pattern RRR: Safe property access\n  const dominantElement = astroResult.dominant?.element || 'Fire';\n  const dominantModality = astroResult.dominant?.modality || 'Cardinal';\n  \n  // Calculate natural element-modality affinity\n  const naturalAffinity = getElementModalityAffinity(dominantElement, dominantModality);\n  \n  // Base recommendations on dominant element with modality influence\n  const elementRecommendations = {\n    Fire: {\n      ingredients: ['chicken', 'lamb', 'peppers', 'chili'],\n      flavors: ['spicy', 'sour', 'aromatic'],\n      methods: dominantModality === 'Mutable' ? \n        ['stir-frying', 'grilling', 'quick roasting'] : \n        dominantModality === 'Fixed' ? \n        ['slow roasting', 'smoking', 'ember cooking'] :\n        ['grilling', 'roasting', 'flame cooking']\n    },\n    Water: {\n      ingredients: ['fish', 'shellfish', 'cucumber', 'melon'],\n      flavors: ['salty', 'subtle', 'aromatic'],\n      methods: dominantModality === 'Mutable' ? \n        ['poaching', 'steaming', 'marinating'] : \n        dominantModality === 'Fixed' ? \n        ['slow simmering', 'fermenting', 'curing'] :\n        ['steaming', 'poaching', 'chilling']\n    },\n    Earth: {\n      ingredients: ['beef', 'root vegetables', 'mushrooms', 'grains'],\n      flavors: ['savory', 'umami', 'bitter'],\n      methods: dominantModality === 'Mutable' ? \n        ['baking', 'roasting', 'toasting'] : \n        dominantModality === 'Fixed' ? \n        ['slow-cooking', 'clay pot cooking', 'pressure cooking'] :\n        ['braising', 'baking', 'pressure cooking']\n    },\n    Air: {\n      ingredients: ['poultry', 'leafy greens', 'legumes', 'seeds'],\n      flavors: ['light', 'aromatic', 'tangy'],\n      methods: dominantModality === 'Mutable' ? \n        ['whipping', 'aerating', 'cold infusing'] : \n        dominantModality === 'Fixed' ? \n        ['aging', 'curing', 'fermenting'] :\n        ['quick-cooking', 'raw preparation', 'infusing']\n    }\n  };\n  \n  // Modality influences cooking preparation style with element consideration\n  const modalityInfluence = {\n    Cardinal: {\n      style: `${dominantElement === 'Fire' || dominantElement === 'Air' ? \n        'quick, energetic' : 'direct, purposeful'} preparations with clear flavors`,\n      ingredients: ['fresh seasonal produce', 'simple proteins']\n    },\n    Fixed: {\n      style: `${dominantElement === 'Earth' || dominantElement === 'Water' ? \n        'deep, substantial' : 'lasting, concentrated'} dishes with depth of flavor`,\n      ingredients: ['preserved items', 'slow-cooked components']\n    },\n    Mutable: {\n      style: `${dominantElement === 'Air' || dominantElement === 'Water' ? \n        'fluid, adaptable' : 'transformative, versatile'} dishes with multiple elements`,\n      ingredients: ['fusion ingredients', 'diverse textures']\n    }\n  };\n  \n  // Season adjusts the recommendations\n  const seasonalInfluence = season ? getSeasonalAdjustments(season, dominantElement) : {\n    boost: [] as string[],\n    avoid: [] as string[]\n  };\n  \n  // Select recommendations based on dominant element\n  const eleRecs = elementRecommendations[dominantElement as keyof typeof elementRecommendations];\n  const modRecs = modalityInfluence[dominantModality as keyof typeof modalityInfluence];\n  \n  // Filter based on user preferences if available\n  const filteredIngredients = userPreferences \n    ? eleRecs.ingredients.filter(i => !userPreferences.some(p => i.includes(p)))\n    : eleRecs.ingredients;\n  \n  // Select ingredients with seasonal adjustments\n  let mainIngredient = filteredIngredients[0];\n  let secondaryIngredient = filteredIngredients[1];\n  \n  // Adjust based on seasonal boosts\n  if (seasonalInfluence.boost.length > 0) {\n    const boostedOptions = filteredIngredients.filter(i => \n      seasonalInfluence.boost.some(boost => i.includes(boost))\n    );\n    if (boostedOptions.length > 0) {\n      mainIngredient = boostedOptions[0];\n    }\n  }\n  \n  // Avoid seasonally inappropriate ingredients\n  if (seasonalInfluence.avoid.length > 0) {\n    const avoidList = seasonalInfluence.avoid;\n    \n    if (avoidList.some(avoid => mainIngredient.includes(avoid))) {\n      const alternatives = filteredIngredients.filter(i => \n        !avoidList.some(avoid => i.includes(avoid))\n      );\n      if (alternatives.length > 0) {\n        mainIngredient = alternatives[0];\n      }\n    }\n    \n    if (avoidList.some(avoid => secondaryIngredient.includes(avoid))) {\n      const alternatives = filteredIngredients.filter(i => \n        i !== mainIngredient && \n        !avoidList.some(avoid => i.includes(avoid))\n      );\n      if (alternatives.length > 0) {\n        secondaryIngredient = alternatives[0];\n      }\n    }\n  }\n  \n  // Select flavor and cooking method\n  const flavor = eleRecs.flavors[0];\n  const cookingMethod = eleRecs.methods[0];\n  \n  // Generate reasoning with added modality influence\n  return {\n    mainIngredient,\n    secondaryIngredient,\n    flavor,\n    cookingMethod,\n    reasoning: {\n      elementalInfluence: `${dominantElement} element suggests ${eleRecs.methods[0]} ${mainIngredient}`,\n      decanic: `Current decan influences favor ${flavor} flavors`,\n      planetary: `Planetary positions suggest ${modRecs.style}`,\n      seasonal: season ? `${season.charAt(0).toUpperCase() + season.slice(1)} calls for ${seasonalInfluence.boost.join(', ')}` : 'No seasonal data provided',\n      modalityInfluence: `${dominantModality} ${dominantElement} particularly favors ${naturalAffinity > 0.7 ? 'strong' : 'moderate'} ${cookingMethod} techniques`\n    }\n  };\n}\n\n/**\n * Get seasonal adjustments for food recommendations\n * \n * @param season Current season\n * @param dominantElement Dominant element from astrological calculation\n * @returns Lists of ingredients to boost or avoid\n */\nfunction getSeasonalAdjustments(\n  season: string,\n  dominantElement: string\n): { boost: string[], avoid: string[] } {\n  const normalizedSeason = season.toLowerCase();\n  \n  // Base seasonal recommendations\n  const seasonalFoods = {\n    spring: {\n      boost: ['asparagus', 'peas', 'strawberries', 'leafy greens', 'sprouts'],\n      avoid: ['heavy stews', 'root vegetables', 'preserved foods']\n    },\n    summer: {\n      boost: ['tomatoes', 'peppers', 'berries', 'stone fruits', 'fresh herbs'],\n      avoid: ['slow-cooked', 'braised dishes', 'heavy sauces']\n    },\n    fall: {\n      boost: ['squash', 'apples', 'pears', 'mushrooms', 'root vegetables'],\n      avoid: ['cooling foods', 'raw preparations', 'tropical fruits']\n    },\n    autumn: {\n      boost: ['squash', 'apples', 'pears', 'mushrooms', 'root vegetables'],\n      avoid: ['cooling foods', 'raw preparations', 'tropical fruits']\n    },\n    winter: {\n      boost: ['citrus', 'winter greens', 'preserved foods', 'warming spices'],\n      avoid: ['raw preparations', 'cooling foods', 'summery dishes']\n    }\n  };\n  \n  // Default to winter if season not recognized\n  const seasonKey = (normalizedSeason === 'spring' || \n                    normalizedSeason === 'summer' || \n                    normalizedSeason === 'autumn' || \n                    normalizedSeason === 'fall' ||\n                    normalizedSeason === 'winter')\n                    ? (normalizedSeason === 'fall' ? 'autumn' : normalizedSeason)\n                    : 'winter';\n  \n  // Adjust based on element-season harmony\n  const elementalAdjustment = {\n    Fire: {\n      spring: { extraBoost: ['radishes', 'arugula'], extraAvoid: ['cooling melons'] },\n      summer: { extraBoost: ['chili peppers', 'garlic'], extraAvoid: [] },\n      autumn: { extraBoost: ['ginger', 'warming spices'], extraAvoid: ['raw greens'] },\n      winter: { extraBoost: ['warming spices', 'chilis'], extraAvoid: [] }\n    },\n    Water: {\n      spring: { extraBoost: ['fresh fish', 'herbs'], extraAvoid: [] },\n      summer: { extraBoost: ['cucumber', 'watermelon'], extraAvoid: ['heating spices'] },\n      autumn: { extraBoost: ['pears', 'apples'], extraAvoid: [] },\n      winter: { extraBoost: ['citrus', 'broths'], extraAvoid: [] }\n    },\n    Earth: {\n      spring: { extraBoost: ['new potatoes', 'spring onions'], extraAvoid: [] },\n      summer: { extraBoost: ['corn', 'beans'], extraAvoid: ['heavy stews'] },\n      autumn: { extraBoost: ['root vegetables', 'squash'], extraAvoid: [] },\n      winter: { extraBoost: ['preserved roots', 'slow-cooked dishes'], extraAvoid: ['raw foods'] }\n    },\n    Air: {\n      spring: { extraBoost: ['herbs', 'sprouts'], extraAvoid: [] },\n      summer: { extraBoost: ['berries', 'light grains'], extraAvoid: ['heavy sauces'] },\n      autumn: { extraBoost: ['nuts', 'seeds'], extraAvoid: [] },\n      winter: { extraBoost: ['aromatic spices', 'citrus zest'], extraAvoid: [] }\n    }\n  };\n  \n  // Get base seasonal adjustments\n  const baseAdjust = seasonalFoods[seasonKey as keyof typeof seasonalFoods] || {\n    boost: [],\n    avoid: []\n  };\n  \n  // Add elemental-seasonal adjustments\n  const elementKey = dominantElement as keyof typeof elementalAdjustment;\n  const seasonKeyTyped = seasonKey as keyof (typeof elementalAdjustment)[typeof elementKey];\n  \n  const elementAdjust = elementalAdjustment[elementKey] && \n                       elementalAdjustment[elementKey][seasonKeyTyped]\n                       ? elementalAdjustment[elementKey][seasonKeyTyped]\n                       : { extraBoost: [], extraAvoid: [] };\n  \n  return {\n    boost: [...baseAdjust.boost, ...elementAdjust.extraBoost],\n    avoid: [...baseAdjust.avoid, ...elementAdjust.extraAvoid]\n  };\n}\n\n/**\n * Enhanced validation function to test if algorithms are using all data sources\n * \n * @returns Validation results with test outcomes\n */\nexport function validateAlgorithms(): {\n  success: boolean;\n  results: Array<{ test: string; passed: boolean; info?: string }>;\n} {\n  const testResults = [];\n  \n  // Test 1: Verify decanic compatibility calculation\n  const decanTest = {\n    test: \"Decanic influence calculation\",\n    passed: false,\n    info: \"\"\n  };\n  \n  try {\n    const decanA = { \"1st Decan\": [\"Mars\"], \"2nd Decan\": [\"Sun\"], \"3rd Decan\": [\"Venus\"] };\n    const decanB = { \"1st Decan\": [\"Venus\"], \"2nd Decan\": [\"Mercury\"], \"3rd Decan\": [\"Saturn\"] };\n    const decanScore = compareDecanRulers(decanA, decanB);\n    \n    decanTest.passed = typeof decanScore === 'number' && decanScore >= 0 && decanScore <= 1;\n    decanTest.info = `Score: ${decanScore}`;\n  } catch (error) {\n    decanTest.info = `Error: ${error instanceof Error ? error.message : String(error)}`;\n  }\n  \n  testResults.push(decanTest);\n  \n  // Test 2: Verify degree-specific calculation\n  const degreeTest = {\n    test: \"Degree-specific influence calculation\",\n    passed: false,\n    info: \"\"\n  };\n  \n  try {\n    const degreeA = { \"Mercury\": [15, 21], \"Venus\": [7, 14], \"Mars\": [22, 26] };\n    const degreeB = { \"Mercury\": [9, 15], \"Venus\": [1, 8], \"Mars\": [27, 30] };\n    const degreeScore = calculateDegreeOverlap(degreeA, degreeB);\n    \n    degreeTest.passed = typeof degreeScore === 'number' && degreeScore >= 0 && degreeScore <= 1;\n    degreeTest.info = `Score: ${degreeScore}`;\n  } catch (error) {\n    degreeTest.info = `Error: ${error instanceof Error ? error.message : String(error)}`;\n  }\n  \n  testResults.push(degreeTest);\n  \n  // Test 3: Verify tarot correspondence calculation\n  const tarotTest = {\n    test: \"Tarot correspondence calculation\",\n    passed: false,\n    info: \"\"\n  };\n  \n  try {\n    const tarotScore = compareTarotArcana(\"The Emperor\", \"The Chariot\");\n    \n    tarotTest.passed = typeof tarotScore === 'number' && tarotScore >= 0 && tarotScore <= 1;\n    tarotTest.info = `Score: ${tarotScore}`;\n  } catch (error) {\n    tarotTest.info = `Error: ${error instanceof Error ? error.message : String(error)}`;\n  }\n  \n  testResults.push(tarotTest);\n  \n  // Test 4: Verify modality calculation\n  const modalityTest = {\n    test: \"Modality compatibility calculation\",\n    passed: false,\n    info: \"\"\n  };\n  \n  try {\n    const modalityScore = compareModalities(\"Cardinal\", \"Mutable\");\n    \n    modalityTest.passed = typeof modalityScore === 'number' && modalityScore >= 0 && modalityScore <= 1;\n    modalityTest.info = `Score: ${modalityScore}`;\n  } catch (error) {\n    modalityTest.info = `Error: ${error instanceof Error ? error.message : String(error)}`;\n  }\n  \n  testResults.push(modalityTest);\n  \n  // Test 5: Verify planetary ruler calculation\n  const rulerTest = {\n    test: \"Planetary ruler compatibility calculation\",\n    passed: false,\n    info: \"\"\n  };\n  \n  try {\n    const rulerScore = compareRulers(\"Mars\", \"Venus\");\n    \n    rulerTest.passed = typeof rulerScore === 'number' && rulerScore >= 0 && rulerScore <= 1;\n    rulerTest.info = `Score: ${rulerScore}`;\n  } catch (error) {\n    rulerTest.info = `Error: ${error instanceof Error ? error.message : String(error)}`;\n  }\n  \n  testResults.push(rulerTest);\n  \n  // Test 6: Verify enhanced recipe recommendation\n  const recipeTest = {\n    test: \"Enhanced recipe recommendation generation\",\n    passed: false,\n    info: \"\"\n  };\n  \n  try {\n    const mockResult: AlchemicalResult = {\n      elementalProperties: { Fire: 0.4, Water: 0.2, Earth: 0.2, Air: 0.2 },\n      thermodynamicProperties: { heat: 0.6, entropy: 0.4, reactivity: 0.5, gregsEnergy: 0.5 },\n      kalchm: 1.2,\n      monica: 0.8,\n      score: 0.7\n    };\n    \n    const recommendation = generateEnhancedRecommendation(mockResult as any, [], 'summer');\n    \n    recipeTest.passed = Boolean(\n      recommendation &&\n      recommendation.mainIngredient &&\n      recommendation.cookingMethod &&\n      recommendation.reasoning\n    );\n    \n    recipeTest.info = `Main ingredient: ${recommendation.mainIngredient}`;\n  } catch (error) {\n    recipeTest.info = `Error: ${error instanceof Error ? error.message : String(error)}`;\n  }\n  \n  testResults.push(recipeTest);\n  \n  // Overall validation result\n  const success = testResults.every(test => test.passed);\n  \n  return {\n    success,\n    results: testResults\n  };\n}\n\n// Pattern RRR: Interface Type Mismatch Resolution\n// Define interface that matches actual test object structure\ninterface EnhancedAlchemicalResult {\n  elements: {\n    Fire: number;\n    Water: number;\n    Earth: number;\n    Air: number;\n  };\n  modalities: {\n    Cardinal: number;\n    Fixed: number;\n    Mutable: number;\n  };\n  qualities: {\n    Hot: number;\n    Dry: number;\n    Cold: number;\n    Wet: number;\n  };\n  dominant: {\n    element: string;\n    modality: string;\n    quality: string;\n  };\n} "],"version":3}