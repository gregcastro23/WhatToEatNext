f638fd1e8819c7d3bc73553a081079f6
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.allOils = exports.nutOils = exports.dressingOils = exports.bakingOils = exports.highHeatOils = exports.airOils = exports.earthOils = exports.waterOils = exports.fireOils = exports.specialtyOils = exports.supplementOils = exports.finishingOils = exports.cookingOils = exports.processedOils = exports.oils = void 0;
const oils_1 = require("./oils");
Object.defineProperty(exports, "oils", { enumerable: true, get: function () { return oils_1.oils; } });
const elementalUtils_1 = require("@/utils/elementalUtils");
// Process oils to add enhanced properties
exports.processedOils = (0, elementalUtils_1.fixIngredientMappings)(oils_1.oils);
// Export enhanced oils as default
exports.default = exports.processedOils;
// Export specific oil categories
exports.cookingOils = Object.entries(exports.processedOils)
    .filter(([_, value]) => value.subCategory === 'cooking')
    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});
exports.finishingOils = Object.entries(exports.processedOils)
    .filter(([_, value]) => value.subCategory === 'finishing')
    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});
exports.supplementOils = Object.entries(exports.processedOils)
    .filter(([_, value]) => value.subCategory === 'supplement')
    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});
exports.specialtyOils = Object.entries(exports.processedOils)
    .filter(([_, value]) => !value.subCategory ||
    (value.subCategory !== 'cooking' &&
        value.subCategory !== 'finishing' &&
        value.subCategory !== 'supplement'))
    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});
// Export by elemental properties
exports.fireOils = Object.entries(exports.processedOils)
    .filter(([_, value]) => {
    var _a, _b;
    return value.elementalProperties.Fire >= 0.4 ||
        (typeof ((_a = value.astrologicalProfile) === null || _a === void 0 ? void 0 : _a.elementalAffinity) === 'object' && ((_b = value.astrologicalProfile.elementalAffinity) === null || _b === void 0 ? void 0 : _b.base) === 'Fire');
})
    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});
exports.waterOils = Object.entries(exports.processedOils)
    .filter(([_, value]) => {
    var _a, _b;
    return value.elementalProperties.Water >= 0.4 ||
        (typeof ((_a = value.astrologicalProfile) === null || _a === void 0 ? void 0 : _a.elementalAffinity) === 'object' && ((_b = value.astrologicalProfile.elementalAffinity) === null || _b === void 0 ? void 0 : _b.base) === 'Water');
})
    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});
exports.earthOils = Object.entries(exports.processedOils)
    .filter(([_, value]) => {
    var _a, _b;
    return value.elementalProperties.Earth >= 0.4 ||
        (typeof ((_a = value.astrologicalProfile) === null || _a === void 0 ? void 0 : _a.elementalAffinity) === 'object' && ((_b = value.astrologicalProfile.elementalAffinity) === null || _b === void 0 ? void 0 : _b.base) === 'Earth');
})
    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});
exports.airOils = Object.entries(exports.processedOils)
    .filter(([_, value]) => {
    var _a, _b;
    return value.elementalProperties.Air >= 0.4 ||
        (typeof ((_a = value.astrologicalProfile) === null || _a === void 0 ? void 0 : _a.elementalAffinity) === 'object' && ((_b = value.astrologicalProfile.elementalAffinity) === null || _b === void 0 ? void 0 : _b.base) === 'Air');
})
    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});
// Export by culinary applications
exports.highHeatOils = Object.entries(exports.processedOils)
    .filter(([_, value]) => {
    var _a, _b;
    return (typeof value.smokePoint === 'object' && value.smokePoint !== null && 'fahrenheit' in value.smokePoint && value.smokePoint.fahrenheit >= 400) ||
        (((_a = value.culinaryApplications) === null || _a === void 0 ? void 0 : _a.frying) || ((_b = value.culinaryApplications) === null || _b === void 0 ? void 0 : _b.deepfrying));
})
    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});
exports.bakingOils = Object.entries(exports.processedOils)
    .filter(([_, value]) => { var _a; return (_a = value.culinaryApplications) === null || _a === void 0 ? void 0 : _a.baking; })
    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});
exports.dressingOils = Object.entries(exports.processedOils)
    .filter(([_, value]) => { var _a; return (_a = value.culinaryApplications) === null || _a === void 0 ? void 0 : _a.dressings; })
    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});
exports.nutOils = Object.entries(exports.processedOils)
    .filter(([key, _]) => key.includes('walnut') ||
    key.includes('almond') ||
    key.includes('macadamia') ||
    key.includes('peanut'))
    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});
// For backward compatibility
exports.allOils = exports.processedOils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,