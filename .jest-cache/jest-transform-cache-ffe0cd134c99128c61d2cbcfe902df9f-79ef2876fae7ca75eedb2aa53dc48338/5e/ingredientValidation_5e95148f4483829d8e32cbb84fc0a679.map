{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/ingredientValidation.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/ingredientValidation.ts"],"sourcesContent":["/**\n * Ingredient Data Validation Utilities\n * \n * This module provides comprehensive validation for ingredient data integrity,\n * elemental properties consistency, and alchemical mapping accuracy.\n */\n\nimport { allIngredients } from '../data/ingredients';\nimport { calculateElementalAffinity } from './elementalUtils';\nimport { logger } from './logger';\nimport type { Ingredient } from '@/types';\nimport type { ElementalProperties } from '@/types/elemental';\n\n// Validation result interfaces\nexport interface IngredientValidationResult {\n  isValid: boolean;\n  errors: IngredientValidationError[];\n  warnings: IngredientValidationWarning[];\n  summary: string;\n  timestamp: Date;\n}\n\nexport interface IngredientValidationError {\n  type: 'ELEMENTAL_INVALID' | 'COMPATIBILITY_VIOLATION' | 'ALCHEMICAL_MISMATCH' | 'DATA_INCOMPLETE' | 'CATEGORY_MISMATCH';\n  severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n  ingredient?: string;\n  property?: string;\n  expectedValue?: unknown;\n  actualValue?: unknown;\n  message: string;\n  timestamp: Date;\n}\n\nexport interface IngredientValidationWarning {\n  type: 'MINOR_INCONSISTENCY' | 'DATA_OUTDATED' | 'PERFORMANCE_SLOW' | 'MISSING_OPTIONAL';\n  ingredient?: string;\n  property?: string;\n  message: string;\n  timestamp: Date;\n}\n\nexport interface IngredientTestResult {\n  testName: string;\n  passed: boolean;\n  duration: number;\n  error?: string;\n  details?: Record<string, unknown>;\n}\n\n// Validation tolerances\nconst VALIDATION_TOLERANCES = {\n  ELEMENTAL_SUM_TOLERANCE: 0.01,\n  SELF_COMPATIBILITY_THRESHOLD: 0.9,\n  CROSS_COMPATIBILITY_THRESHOLD: 0.7,\n  ALCHEMICAL_CONSISTENCY_THRESHOLD: 0.8\n};\n\n/**\n * Main validation function for ingredient data\n */\nexport async function validateIngredientData(): Promise<IngredientValidationResult> {\n  const startTime = Date.now();\n  const errors: IngredientValidationError[] = [];\n  const warnings: IngredientValidationWarning[] = [];\n  \n  try {\n    logger.info('Starting comprehensive ingredient data validation');\n    \n    // 1. Validate elemental properties\n    const elementalValidation = await validateElementalProperties();\n    errors.push(...elementalValidation.errors);\n    warnings.push(...elementalValidation.warnings);\n    \n    // 2. Check compatibility scores\n    const compatibilityValidation = await validateCompatibilityScores();\n    errors.push(...compatibilityValidation.errors);\n    warnings.push(...compatibilityValidation.warnings);\n    \n    // 3. Verify alchemical mappings\n    const alchemicalValidation = await validateAlchemicalMappings();\n    errors.push(...alchemicalValidation.errors);\n    warnings.push(...alchemicalValidation.warnings);\n    \n    // 4. Run ingredient tests\n    const testResults = await runIngredientTests();\n    const testValidation = analyzeIngredientTestResults(testResults);\n    errors.push(...testValidation.errors);\n    warnings.push(...testValidation.warnings);\n    \n    // 5. Validate data completeness\n    const completenessValidation = await validateDataCompleteness();\n    errors.push(...completenessValidation.errors);\n    warnings.push(...completenessValidation.warnings);\n    \n    const duration = Date.now() - startTime;\n    const isValid = errors.filter(e => e.severity === 'CRITICAL' || e.severity === 'HIGH').length === 0;\n    \n    const summary = generateIngredientValidationSummary(isValid, errors, warnings, duration);\n    \n    logger.info(`Ingredient validation completed in ${duration}ms: ${isValid ? 'PASSED' : 'FAILED'}`);\n    \n    return {\n      isValid,\n      errors,\n      warnings,\n      summary,\n      timestamp: new Date()\n    };\n    \n  } catch (error) {\n    const criticalError: IngredientValidationError = {\n      type: 'DATA_INCOMPLETE',\n      severity: 'CRITICAL',\n      message: `Ingredient validation process failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      timestamp: new Date()\n    };\n    \n    return {\n      isValid: false,\n      errors: [criticalError],\n      warnings,\n      summary: 'Critical validation failure - process could not complete',\n      timestamp: new Date()\n    };\n  }\n}\n\n/**\n * Validate elemental properties for all ingredients\n */\nasync function validateElementalProperties(): Promise<{ errors: IngredientValidationError[], warnings: IngredientValidationWarning[] }> {\n  const errors: IngredientValidationError[] = [];\n  const warnings: IngredientValidationWarning[] = [];\n  \n  try {\n    const ingredients = allIngredients;\n    \n    for (const [name, ingredient] of Object.entries(ingredients)) {\n      try {\n        const validation = validateIngredientElementalProperties(name, ingredient);\n        errors.push(...validation.errors);\n        warnings.push(...validation.warnings);\n      } catch (error) {\n        errors.push({\n          type: 'ELEMENTAL_INVALID',\n          severity: 'MEDIUM',\n          ingredient: name,\n          message: `Failed to validate elemental properties for ${name}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n          timestamp: new Date()\n        });\n      }\n    }\n    \n  } catch (error) {\n    errors.push({\n      type: 'DATA_INCOMPLETE',\n      severity: 'HIGH',\n      message: `Elemental properties validation failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      timestamp: new Date()\n    });\n  }\n  \n  return { errors, warnings };\n}\n\n/**\n * Validate individual ingredient elemental properties\n */\nfunction validateIngredientElementalProperties(\n  name: string, \n  ingredient: Ingredient\n): { errors: IngredientValidationError[], warnings: IngredientValidationWarning[] } {\n  const errors: IngredientValidationError[] = [];\n  const warnings: IngredientValidationWarning[] = [];\n  \n  try {\n    if (!ingredient.elementalProperties) {\n      errors.push({\n        type: 'ELEMENTAL_INVALID',\n        severity: 'HIGH',\n        ingredient: name,\n        property: 'elementalProperties',\n        message: `Missing elemental properties for ${name}`,\n        timestamp: new Date()\n      });\n      return { errors, warnings };\n    }\n    \n    const props = ingredient.elementalProperties;\n    const elements = ['Fire', 'Water', 'Earth', 'Air'];\n    \n    // Check that all elements are present and numeric\n    for (const element of elements) {\n      const value = props[element as keyof ElementalProperties];\n      if (typeof value !== 'number' || isNaN(value)) {\n        errors.push({\n          type: 'ELEMENTAL_INVALID',\n          severity: 'HIGH',\n          ingredient: name,\n          property: element,\n          actualValue: value,\n          message: `Invalid ${element} value for ${name}: ${value} (should be a number)`,\n          timestamp: new Date()\n        });\n      } else if (value < 0 || value > 1) {\n        errors.push({\n          type: 'ELEMENTAL_INVALID',\n          severity: 'MEDIUM',\n          ingredient: name,\n          property: element,\n          actualValue: value,\n          message: `${element} value for ${name} out of range: ${value} (should be 0-1)`,\n          timestamp: new Date()\n        });\n      }\n    }\n    \n    // Check that elemental properties sum to approximately 1.0\n    const sum = elements.reduce((total, element) => {\n      const value = props[element as keyof ElementalProperties];\n      return total + (typeof value === 'number' ? value : 0);\n    }, 0);\n    \n    if (Math.abs(sum - 1.0) > VALIDATION_TOLERANCES.ELEMENTAL_SUM_TOLERANCE) {\n      errors.push({\n        type: 'ELEMENTAL_INVALID',\n        severity: 'MEDIUM',\n        ingredient: name,\n        property: 'elementalProperties',\n        expectedValue: 1.0,\n        actualValue: sum,\n        message: `Elemental properties sum for ${name} is ${sum.toFixed(3)}, should be 1.0 (±${VALIDATION_TOLERANCES.ELEMENTAL_SUM_TOLERANCE})`,\n        timestamp: new Date()\n      });\n    }\n    \n    // Check for elemental dominance (at least one element should be > 0.3)\n    const maxElement = Math.max(...elements.map(el => {\n      const value = props[el as keyof ElementalProperties];\n      return typeof value === 'number' ? value : 0;\n    }));\n    \n    if (maxElement < 0.3) {\n      warnings.push({\n        type: 'MINOR_INCONSISTENCY',\n        ingredient: name,\n        property: 'elementalProperties',\n        message: `No dominant element for ${name} (max: ${maxElement.toFixed(3)})`,\n        timestamp: new Date()\n      });\n    }\n    \n  } catch (error) {\n    errors.push({\n      type: 'ELEMENTAL_INVALID',\n      severity: 'MEDIUM',\n      ingredient: name,\n      message: `Error validating elemental properties for ${name}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      timestamp: new Date()\n    });\n  }\n  \n  return { errors, warnings };\n}\n\n/**\n * Calculate compatibility between two ElementalProperties objects\n */\nfunction calculateElementalPropertiesCompatibility(\n  props1: ElementalProperties,\n  props2: ElementalProperties\n): number {\n  const elements: Array<'Fire' | 'Water' | 'Earth' | 'Air'> = ['Fire', 'Water', 'Earth', 'Air'];\n  let totalCompatibility = 0;\n  let totalWeight = 0;\n  \n  for (const element of elements) {\n    const affinity = calculateElementalAffinity(element, element);\n    const weight = (props1[element] || 0) * (props2[element] || 0);\n    totalCompatibility += affinity * weight;\n    totalWeight += weight;\n  }\n  \n  return totalWeight > 0 ? totalCompatibility / totalWeight : 0.5;\n}\n\n/**\n * Validate compatibility scores follow self-reinforcement principles\n */\nasync function validateCompatibilityScores(): Promise<{ errors: IngredientValidationError[], warnings: IngredientValidationWarning[] }> {\n  const errors: IngredientValidationError[] = [];\n  const warnings: IngredientValidationWarning[] = [];\n  \n  try {\n    const ingredients = allIngredients;\n    const ingredientList = Object.values(ingredients);\n    \n    // Test self-compatibility for each ingredient\n    for (const ingredient of ingredientList) {\n      try {\n        if (!ingredient.elementalProperties) continue;\n        \n        const selfCompatibility = calculateElementalPropertiesCompatibility(\n          ingredient.elementalProperties, \n          ingredient.elementalProperties\n        );\n        \n        // Self-reinforcement: same ingredient should have high compatibility (≥0.9)\n        if (selfCompatibility < VALIDATION_TOLERANCES.SELF_COMPATIBILITY_THRESHOLD) {\n          errors.push({\n            type: 'COMPATIBILITY_VIOLATION',\n            severity: 'HIGH',\n            ingredient: ingredient.name,\n            property: 'self-compatibility',\n            expectedValue: `≥${VALIDATION_TOLERANCES.SELF_COMPATIBILITY_THRESHOLD}`,\n            actualValue: selfCompatibility,\n            message: `Self-compatibility score ${selfCompatibility.toFixed(3)} below ${VALIDATION_TOLERANCES.SELF_COMPATIBILITY_THRESHOLD} threshold for ${ingredient.name}`,\n            timestamp: new Date()\n          });\n        }\n        \n      } catch (error) {\n        warnings.push({\n          type: 'PERFORMANCE_SLOW',\n          ingredient: ingredient.name,\n          message: `Could not calculate self-compatibility for ${ingredient.name}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n          timestamp: new Date()\n        });\n      }\n    }\n    \n    // Test cross-compatibility for a sample of ingredient pairs\n    const sampleSize = Math.min(50, ingredientList.length); // Limit to avoid performance issues\n    const sampleIngredients = ingredientList.slice(0, sampleSize);\n    \n    for (let i = 0; i < sampleIngredients.length; i++) {\n      for (let j = i + 1; j < Math.min(i + 5, sampleIngredients.length); j++) {\n        const ingredient1 = sampleIngredients[i];\n        const ingredient2 = sampleIngredients[j];\n        \n        if (!ingredient1.elementalProperties || !ingredient2.elementalProperties) continue;\n        \n        try {\n          const crossCompatibility = calculateElementalPropertiesCompatibility(\n            ingredient1.elementalProperties,\n            ingredient2.elementalProperties\n          );\n          \n          // Cross-compatibility should be at least 0.7 (no opposing elements)\n          if (crossCompatibility < VALIDATION_TOLERANCES.CROSS_COMPATIBILITY_THRESHOLD) {\n            errors.push({\n              type: 'COMPATIBILITY_VIOLATION',\n              severity: 'MEDIUM',\n              ingredient: `${ingredient1.name} + ${ingredient2.name}`,\n              property: 'cross-compatibility',\n              expectedValue: `≥${VALIDATION_TOLERANCES.CROSS_COMPATIBILITY_THRESHOLD}`,\n              actualValue: crossCompatibility,\n              message: `Cross-compatibility score ${crossCompatibility.toFixed(3)} below ${VALIDATION_TOLERANCES.CROSS_COMPATIBILITY_THRESHOLD} threshold for ${ingredient1.name} + ${ingredient2.name}`,\n              timestamp: new Date()\n            });\n          }\n          \n        } catch (error) {\n          warnings.push({\n            type: 'PERFORMANCE_SLOW',\n            ingredient: `${ingredient1.name} + ${ingredient2.name}`,\n            message: `Could not calculate cross-compatibility: ${error instanceof Error ? error.message : 'Unknown error'}`,\n            timestamp: new Date()\n          });\n        }\n      }\n    }\n    \n  } catch (error) {\n    errors.push({\n      type: 'COMPATIBILITY_VIOLATION',\n      severity: 'HIGH',\n      message: `Compatibility score validation failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      timestamp: new Date()\n    });\n  }\n  \n  return { errors, warnings };\n}\n\n/**\n * Validate alchemical mappings are consistent with elemental properties\n */\nasync function validateAlchemicalMappings(): Promise<{ errors: IngredientValidationError[], warnings: IngredientValidationWarning[] }> {\n  const errors: IngredientValidationError[] = [];\n  const warnings: IngredientValidationWarning[] = [];\n  \n  try {\n    const ingredients = allIngredients;\n    \n    for (const [name, ingredient] of Object.entries(ingredients)) {\n      try {\n        if ((ingredient as unknown as Record<string, unknown>)?.alchemicalProperties) {\n          const validation = validateAlchemicalConsistency(name, ingredient);\n          errors.push(...validation.errors);\n          warnings.push(...validation.warnings);\n        } else {\n          warnings.push({\n            type: 'MISSING_OPTIONAL',\n            ingredient: name,\n            property: 'alchemicalProperties',\n            message: `Missing alchemical properties for ${name}`,\n            timestamp: new Date()\n          });\n        }\n      } catch (error) {\n        warnings.push({\n          type: 'MINOR_INCONSISTENCY',\n          ingredient: name,\n          message: `Could not validate alchemical properties for ${name}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n          timestamp: new Date()\n        });\n      }\n    }\n    \n  } catch (error) {\n    errors.push({\n      type: 'ALCHEMICAL_MISMATCH',\n      severity: 'MEDIUM',\n      message: `Alchemical mapping validation failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      timestamp: new Date()\n    });\n  }\n  \n  return { errors, warnings };\n}\n\n/**\n * Validate alchemical consistency for a single ingredient\n */\nfunction validateAlchemicalConsistency(\n  name: string, \n  ingredient: Ingredient\n): { errors: IngredientValidationError[], warnings: IngredientValidationWarning[] } {\n  const errors: IngredientValidationError[] = [];\n  const warnings: IngredientValidationWarning[] = [];\n  \n  try {\n    const ingredientData = ingredient as unknown as Record<string, unknown>;\n    if (!ingredientData?.alchemicalProperties || !ingredient.elementalProperties) {\n      return { errors, warnings };\n    }\n    \n    const alchemical = ingredientData.alchemicalProperties as Record<string, unknown>;\n    const elemental = ingredient.elementalProperties;\n    \n    // Check that alchemical properties are numeric and in valid range\n    const alchemicalProps = ['spirit', 'essence', 'matter', 'substance'];\n    for (const prop of alchemicalProps) {\n      const value = alchemical[prop] as number;\n      if (typeof value !== 'number' || isNaN(value)) {\n        errors.push({\n          type: 'ALCHEMICAL_MISMATCH',\n          severity: 'MEDIUM',\n          ingredient: name,\n          property: prop,\n          actualValue: value,\n          message: `Invalid ${prop} value for ${name}: ${value} (should be a number)`,\n          timestamp: new Date()\n        });\n      } else if (value < 0 || value > 1) {\n        warnings.push({\n          type: 'MINOR_INCONSISTENCY',\n          ingredient: name,\n          property: prop,\n          message: `${prop} value for ${name} out of typical range: ${value} (typically 0-1)`,\n          timestamp: new Date()\n        });\n      }\n    }\n    \n    // Check consistency between alchemical and elemental properties\n    // Spirit should correlate with Air and Fire\n    const airFire = (elemental.Air || 0) + (elemental.Fire || 0);\n    const spirit = (alchemical.spirit as number) || 0;\n    if (Math.abs(spirit - airFire * 0.5) > 0.3) {\n      warnings.push({\n        type: 'MINOR_INCONSISTENCY',\n        ingredient: name,\n        property: 'spirit-elemental correlation',\n        message: `Spirit (${spirit.toFixed(3)}) doesn't correlate well with Air+Fire (${airFire.toFixed(3)}) for ${name}`,\n        timestamp: new Date()\n      });\n    }\n    \n    // Matter should correlate with Earth and Water\n    const earthWater = (elemental.Earth || 0) + (elemental.Water || 0);\n    const matter = (alchemical.matter as number) || 0;\n    if (Math.abs(matter - earthWater * 0.5) > 0.3) {\n      warnings.push({\n        type: 'MINOR_INCONSISTENCY',\n        ingredient: name,\n        property: 'matter-elemental correlation',\n        message: `Matter (${matter.toFixed(3)}) doesn't correlate well with Earth+Water (${earthWater.toFixed(3)}) for ${name}`,\n        timestamp: new Date()\n      });\n    }\n    \n  } catch (error) {\n    errors.push({\n      type: 'ALCHEMICAL_MISMATCH',\n      severity: 'LOW',\n      ingredient: name,\n      message: `Error validating alchemical consistency for ${name}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      timestamp: new Date()\n    });\n  }\n  \n  return { errors, warnings };\n}\n\n/**\n * Validate data completeness for ingredients\n */\nasync function validateDataCompleteness(): Promise<{ errors: IngredientValidationError[], warnings: IngredientValidationWarning[] }> {\n  const errors: IngredientValidationError[] = [];\n  const warnings: IngredientValidationWarning[] = [];\n  \n  try {\n    const ingredients = allIngredients;\n    const requiredFields = ['name', 'category', 'elementalProperties'];\n    const recommendedFields = ['qualities', 'storage'];\n    \n    for (const [name, ingredient] of Object.entries(ingredients)) {\n      // Check required fields\n      for (const field of requiredFields) {\n        if (!ingredient[field as keyof Ingredient]) {\n          errors.push({\n            type: 'DATA_INCOMPLETE',\n            severity: 'HIGH',\n            ingredient: name,\n            property: field,\n            message: `Missing required field '${field}' for ${name}`,\n            timestamp: new Date()\n          });\n        }\n      }\n      \n      // Check recommended fields\n      for (const field of recommendedFields) {\n        if (!ingredient[field as keyof Ingredient]) {\n          warnings.push({\n            type: 'MISSING_OPTIONAL',\n            ingredient: name,\n            property: field,\n            message: `Missing recommended field '${field}' for ${name}`,\n            timestamp: new Date()\n          });\n        }\n      }\n      \n      // Check category validity\n      const validCategories = [\n        'culinary_herb', 'spice', 'vegetable', 'fruit', 'protein', \n        'grain', 'dairy', 'oil', 'vinegar', 'seasoning'\n      ];\n      \n      if (ingredient.category && !validCategories.includes(ingredient.category)) {\n        errors.push({\n          type: 'CATEGORY_MISMATCH',\n          severity: 'MEDIUM',\n          ingredient: name,\n          property: 'category',\n          actualValue: ingredient.category,\n          expectedValue: validCategories,\n          message: `Invalid category '${ingredient.category}' for ${name}`,\n          timestamp: new Date()\n        });\n      }\n    }\n    \n  } catch (error) {\n    errors.push({\n      type: 'DATA_INCOMPLETE',\n      severity: 'MEDIUM',\n      message: `Data completeness validation failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      timestamp: new Date()\n    });\n  }\n  \n  return { errors, warnings };\n}\n\n/**\n * Run comprehensive ingredient tests\n */\nasync function runIngredientTests(): Promise<IngredientTestResult[]> {\n  const testResults: IngredientTestResult[] = [];\n  \n  // Test 1: Ingredient data loading\n  testResults.push(await testIngredientDataLoading());\n  \n  // Test 2: Elemental properties validation\n  testResults.push(await testElementalPropertiesValidation());\n  \n  // Test 3: Compatibility calculations\n  testResults.push(await testCompatibilityCalculations());\n  \n  // Test 4: Alchemical mappings\n  testResults.push(await testAlchemicalMappings());\n  \n  // Test 5: Category consistency\n  testResults.push(await testCategoryConsistency());\n  \n  return testResults;\n}\n\n/**\n * Test ingredient data loading\n */\nasync function testIngredientDataLoading(): Promise<IngredientTestResult> {\n  const startTime = Date.now();\n  \n  try {\n    const ingredients = allIngredients;\n    const ingredientCount = Object.keys(ingredients).length;\n    \n    const passed = ingredientCount > 0;\n    const duration = Date.now() - startTime;\n    \n    return {\n      testName: 'Ingredient Data Loading',\n      passed,\n      duration,\n      details: {\n        ingredientCount,\n        loadTime: duration\n      }\n    };\n    \n  } catch (error) {\n    return {\n      testName: 'Ingredient Data Loading',\n      passed: false,\n      duration: Date.now() - startTime,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    };\n  }\n}\n\n/**\n * Test elemental properties validation\n */\nasync function testElementalPropertiesValidation(): Promise<IngredientTestResult> {\n  const startTime = Date.now();\n  \n  try {\n    const ingredients = allIngredients;\n    let validCount = 0;\n    let totalCount = 0;\n    \n    for (const ingredient of Object.values(ingredients)) {\n      totalCount++;\n      if (ingredient.elementalProperties) {\n        const elements = ['Fire', 'Water', 'Earth', 'Air'];\n        const hasValidElements = elements.every(el => {\n          const value = ingredient.elementalProperties[el as keyof ElementalProperties];\n          return typeof value === 'number' && !isNaN(value) && value >= 0 && value <= 1;\n        });\n        \n        if (hasValidElements) {\n          validCount++;\n        }\n      }\n    }\n    \n    const passed = validCount === totalCount;\n    const duration = Date.now() - startTime;\n    \n    return {\n      testName: 'Elemental Properties Validation',\n      passed,\n      duration,\n      details: {\n        validCount,\n        totalCount,\n        successRate: totalCount > 0 ? (validCount / totalCount) * 100 : 0\n      }\n    };\n    \n  } catch (error) {\n    return {\n      testName: 'Elemental Properties Validation',\n      passed: false,\n      duration: Date.now() - startTime,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    };\n  }\n}\n\n/**\n * Test compatibility calculations\n */\nasync function testCompatibilityCalculations(): Promise<IngredientTestResult> {\n  const startTime = Date.now();\n  \n  try {\n    const ingredients = Object.values(allIngredients).slice(0, 10); // Test with first 10 ingredients\n    let validCalculations = 0;\n    let totalCalculations = 0;\n    \n    for (const ingredient of ingredients) {\n      if (!ingredient.elementalProperties) continue;\n      \n      try {\n        totalCalculations++;\n        const selfCompatibility = calculateElementalPropertiesCompatibility(\n          ingredient.elementalProperties,\n          ingredient.elementalProperties\n        );\n        \n        // Self-compatibility should be high (≥0.9)\n        if (selfCompatibility >= 0.9) {\n          validCalculations++;\n        }\n      } catch (error) {\n        // Calculation failed\n      }\n    }\n    \n    const passed = validCalculations === totalCalculations && totalCalculations > 0;\n    const duration = Date.now() - startTime;\n    \n    return {\n      testName: 'Compatibility Calculations',\n      passed,\n      duration,\n      details: {\n        validCalculations,\n        totalCalculations,\n        successRate: totalCalculations > 0 ? (validCalculations / totalCalculations) * 100 : 0\n      }\n    };\n    \n  } catch (error) {\n    return {\n      testName: 'Compatibility Calculations',\n      passed: false,\n      duration: Date.now() - startTime,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    };\n  }\n}\n\n/**\n * Test alchemical mappings\n */\nasync function testAlchemicalMappings(): Promise<IngredientTestResult> {\n  const startTime = Date.now();\n  \n  try {\n    const ingredients = allIngredients;\n    let validMappings = 0;\n    let totalMappings = 0;\n    \n    for (const ingredient of Object.values(ingredients)) {\n      const ingredientData = ingredient as unknown as Record<string, unknown>;\n      if (ingredientData?.alchemicalProperties) {\n        totalMappings++;\n        \n        const alchemical = ingredientData.alchemicalProperties as Record<string, unknown>;\n        const hasValidProps = ['spirit', 'essence', 'matter', 'substance'].every(prop => {\n          const value = alchemical[prop] as number;\n          return typeof value === 'number' && !isNaN(value);\n        });\n        \n        if (hasValidProps) {\n          validMappings++;\n        }\n      }\n    }\n    \n    const passed = totalMappings === 0 || validMappings === totalMappings;\n    const duration = Date.now() - startTime;\n    \n    return {\n      testName: 'Alchemical Mappings',\n      passed,\n      duration,\n      details: {\n        validMappings,\n        totalMappings,\n        successRate: totalMappings > 0 ? (validMappings / totalMappings) * 100 : 100\n      }\n    };\n    \n  } catch (error) {\n    return {\n      testName: 'Alchemical Mappings',\n      passed: false,\n      duration: Date.now() - startTime,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    };\n  }\n}\n\n/**\n * Test category consistency\n */\nasync function testCategoryConsistency(): Promise<IngredientTestResult> {\n  const startTime = Date.now();\n  \n  try {\n    const ingredients = allIngredients;\n    const validCategories = [\n      'culinary_herb', 'spice', 'vegetable', 'fruit', 'protein', \n      'grain', 'dairy', 'oil', 'vinegar', 'seasoning'\n    ];\n    \n    let validCategories_count = 0;\n    let totalIngredients = 0;\n    \n    for (const ingredient of Object.values(ingredients)) {\n      totalIngredients++;\n      if (ingredient.category && validCategories.includes(ingredient.category)) {\n        validCategories_count++;\n      }\n    }\n    \n    const passed = validCategories_count === totalIngredients;\n    const duration = Date.now() - startTime;\n    \n    return {\n      testName: 'Category Consistency',\n      passed,\n      duration,\n      details: {\n        validCategories: validCategories_count,\n        totalIngredients,\n        successRate: totalIngredients > 0 ? (validCategories_count / totalIngredients) * 100 : 0\n      }\n    };\n    \n  } catch (error) {\n    return {\n      testName: 'Category Consistency',\n      passed: false,\n      duration: Date.now() - startTime,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    };\n  }\n}\n\n/**\n * Analyze ingredient test results and generate validation errors\n */\nfunction analyzeIngredientTestResults(testResults: IngredientTestResult[]): { errors: IngredientValidationError[], warnings: IngredientValidationWarning[] } {\n  const errors: IngredientValidationError[] = [];\n  const warnings: IngredientValidationWarning[] = [];\n  \n  const totalTests = testResults.length;\n  const passedTests = testResults.filter(t => t.passed).length;\n  const passRate = totalTests > 0 ? (passedTests / totalTests) * 100 : 0;\n  \n  if (passRate < 80) { // 80% pass rate threshold\n    errors.push({\n      type: 'DATA_INCOMPLETE',\n      severity: 'HIGH',\n      message: `Test pass rate ${passRate.toFixed(1)}% below 80% threshold`,\n      timestamp: new Date()\n    });\n  }\n  \n  // Check individual test failures\n  for (const test of testResults) {\n    if (!test.passed) {\n      const severity = test.testName.includes('Loading') || test.testName.includes('Properties') ? 'HIGH' : 'MEDIUM';\n      \n      errors.push({\n        type: 'DATA_INCOMPLETE',\n        severity: severity as 'HIGH' | 'MEDIUM',\n        message: `Test failed: ${test.testName}${test.error ? ` - ${test.error}` : ''}`,\n        timestamp: new Date()\n      });\n    }\n    \n    // Check for slow tests\n    if (test.duration > 5000) { // More than 5 seconds\n      warnings.push({\n        type: 'PERFORMANCE_SLOW',\n        message: `Test ${test.testName} took ${test.duration}ms (>5s)`,\n        timestamp: new Date()\n      });\n    }\n  }\n  \n  return { errors, warnings };\n}\n\n/**\n * Generate validation summary\n */\nfunction generateIngredientValidationSummary(\n  isValid: boolean, \n  errors: IngredientValidationError[], \n  warnings: IngredientValidationWarning[], \n  duration: number\n): string {\n  const criticalErrors = errors.filter(e => e.severity === 'CRITICAL').length;\n  const highErrors = errors.filter(e => e.severity === 'HIGH').length;\n  const mediumErrors = errors.filter(e => e.severity === 'MEDIUM').length;\n  const lowErrors = errors.filter(e => e.severity === 'LOW').length;\n  \n  let summary = `Ingredient Data Validation ${isValid ? 'PASSED' : 'FAILED'} (${duration}ms)\\n`;\n  summary += `Errors: ${errors.length} (Critical: ${criticalErrors}, High: ${highErrors}, Medium: ${mediumErrors}, Low: ${lowErrors})\\n`;\n  summary += `Warnings: ${warnings.length}\\n`;\n  \n  if (!isValid) {\n    summary += '\\nCritical Issues:\\n';\n    errors\n      .filter(e => e.severity === 'CRITICAL' || e.severity === 'HIGH')\n      .forEach(error => {\n        summary += `- ${error.message}\\n`;\n      });\n  }\n  \n  if (warnings.length > 0) {\n    summary += '\\nWarnings:\\n';\n    warnings.slice(0, 5).forEach(warning => {\n      summary += `- ${warning.message}\\n`;\n    });\n    \n    if (warnings.length > 5) {\n      summary += `... and ${warnings.length - 5} more warnings\\n`;\n    }\n  }\n  \n  return summary;\n}\n\n/**\n * Check if validation should trigger rollback\n */\nexport function shouldRollbackIngredients(validationResult: IngredientValidationResult): boolean {\n  const criticalErrors = validationResult.errors.filter(e => e.severity === 'CRITICAL').length;\n  const highErrors = validationResult.errors.filter(e => e.severity === 'HIGH').length;\n  \n  // Rollback if there are any critical errors or more than 3 high-severity errors\n  return criticalErrors > 0 || highErrors > 3;\n}\n\n/**\n * Export validation functions for testing\n */\nexport {\n  validateElementalProperties,\n  validateCompatibilityScores,\n  validateAlchemicalMappings,\n  validateDataCompleteness,\n  runIngredientTests\n};"],"version":3}