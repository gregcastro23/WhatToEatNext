{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/culinaryAstrology.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/culinaryAstrology.test.ts"],"sourcesContent":["import { CulinaryAstrologer } from '@/calculations/culinaryAstrology';\nimport { AstrologicalState } from '@/types/alchemy';\n\n// Mock the getRecipeRecommendations method\njest.mock('@/calculations/culinaryAstrology', () => {\n  const original = jest.requireActual('@/calculations/culinaryAstrology');\n  return {\n    ...original,\n    CulinaryAstrologer: class MockCulinaryAstrologer {\n      getRecipeRecommendations() {\n        return [\n          {\n            name: 'Grilled Salmon',\n            alignmentScore: 0.85,\n            elementDistribution: { Fire: 0.5, Water: 0.3, Earth: 0.1, Air: 0.1 },\n            planetaryActivators: ['Sun', 'Mars']\n          },\n          {\n            name: 'Roasted Vegetables',\n            alignmentScore: 0.78,\n            elementDistribution: { Fire: 0.6, Earth: 0.3, Air: 0.1, Water: 0 },\n            planetaryActivators: ['Sun', 'Saturn']\n          }\n        ];\n      }\n\n      getGuidance() {\n        return {\n          dominantElement: 'Fire',\n          technique: {\n            name: 'Roasting',\n            rationale: 'Aligns with Fire dominance',\n            optimalTiming: 'Best during full moon'\n          },\n          ingredientFocus: {\n            element: 'Fire',\n            examples: ['Beef', 'Lamb', 'Chicken'],\n            pairingTip: 'Combine with Air-dominant preparations'\n          },\n          cuisineRecommendation: {\n            style: 'Mediterranean',\n            modification: 'Use more spices',\n            astrologicalBoost: 0.75\n          }\n        };\n      }\n    }\n  };\n});\n\ndescribe('CulinaryAstrologer', () => {\n  let astrologer: CulinaryAstrologer;\n\n  beforeEach(() => {\n    astrologer = new CulinaryAstrologer();\n  });\n\n  it('should return recipe recommendations based on astrological state', () => {\n    const astroState: AstrologicalState = {\n      currentZodiac: 'leo',\n      moonPhase: 'full moon',\n      currentPlanetaryAlignment: {\n        Sun: { sign: 'leo', degree: 15 },\n        Moon: { sign: 'cancer', degree: 5 }\n      },\n      activePlanets: ['sun', 'moon'],\n      planetaryPositions: {\n        sun: { sign: 'leo', degree: 15 },\n        moon: { sign: 'cancer', degree: 5 }\n      },\n      lunarPhase: 'full moon',\n      planetaryHour: 'Sun',\n      planetaryAlignment: {\n        Sun: { sign: 'leo', degree: 15 },\n        Moon: { sign: 'cancer', degree: 5 }\n      },\n      aspects: [],\n      tarotElementBoosts: { Fire: 0.2, Water: 0.1, Air: 0, Earth: 0 },\n      tarotPlanetaryBoosts: { Sun: 0.2, Moon: 0.1 }\n    };\n\n    const recommendations = astrologer.getRecipeRecommendations(astroState);\n    \n    expect(recommendations).toBeInstanceOf(Array);\n    recommendations.forEach(recipe => {\n      expect(recipe).toHaveProperty('alignmentScore');\n      expect(recipe.planetaryActivators).toContain('Sun');\n    });\n  });\n}); "],"version":3}