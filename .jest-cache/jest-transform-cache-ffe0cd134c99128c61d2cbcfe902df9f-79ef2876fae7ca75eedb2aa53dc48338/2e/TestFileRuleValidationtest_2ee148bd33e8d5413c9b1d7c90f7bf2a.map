{"file":"/Users/GregCastro/Desktop/WhatToEatNext/backups/first-wave-2025-08-11T05-19-26-813Z/src/__tests__/linting/TestFileRuleValidation.test.ts","mappings":";AAAA;;;;;;;GAOG;;AAEH,iDAAyC;AACzC,2BAAmC;AACnC,+BAA4B;AAE5B,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;IACzC,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;IAClC,MAAM,SAAS,GAAa,EAAE,CAAC;IAE/B,SAAS,CAAC,GAAG,EAAE;QACb,gCAAgC;QAChC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACvB,IAAI;gBACF,IAAA,wBAAQ,EAAC,UAAU,IAAI,GAAG,CAAC,CAAC;aAC7B;YAAC,MAAM,GAAE;QACZ,CAAC,CAAC,CAAC;QACH,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACzC,IAAI,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,WAAW,GAAG;;;;;;;;;;;;;;;;;OAiBnB,CAAC;YAEF,MAAM,QAAQ,GAAG,IAAA,WAAI,EAAC,WAAW,EAAE,6BAA6B,CAAC,CAAC;YAClE,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzB,IAAA,kBAAa,EAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;YAErC,IAAI;gBACF,MAAM,MAAM,GAAG,IAAA,wBAAQ,EAAC,eAAe,QAAQ,4CAA4C,EAAE;oBAC3F,QAAQ,EAAE,MAAM;oBAChB,GAAG,EAAE,WAAW;iBACjB,CAAC,CAAC;gBAEH,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAElC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;oBAC3C,MAAM,eAAe,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAC/C,CAAC,GAAQ,EAAE,EAAE,CACX,GAAG,CAAC,MAAM,KAAK,mCAAmC;wBAClD,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CACjG,CAAC;oBAEF,yDAAyD;oBACzD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACxC;aACF;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,MAAM,GAAI,KAAa,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;gBACvD,IAAI,MAAM,EAAE;oBACV,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBAClC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;wBAC3C,MAAM,eAAe,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAC/C,CAAC,GAAQ,EAAE,EAAE,CACX,GAAG,CAAC,MAAM,KAAK,mCAAmC;4BAClD,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CACjG,CAAC;wBAEF,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBACxC;iBACF;aACF;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;YAClD,MAAM,WAAW,GAAG;;;;;;;;;;;;;;;;;;;;;OAqBnB,CAAC;YAEF,MAAM,QAAQ,GAAG,IAAA,WAAI,EAAC,WAAW,EAAE,yBAAyB,CAAC,CAAC;YAC9D,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzB,IAAA,kBAAa,EAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;YAErC,IAAI;gBACF,MAAM,MAAM,GAAG,IAAA,wBAAQ,EAAC,eAAe,QAAQ,4CAA4C,EAAE;oBAC3F,QAAQ,EAAE,MAAM;oBAChB,GAAG,EAAE,WAAW;iBACjB,CAAC,CAAC;gBAEH,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAElC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;oBAC3C,MAAM,eAAe,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAC/C,CAAC,GAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,KAAK,mCAAmC,IAAI,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CACjG,CAAC;oBAEF,wCAAwC;oBACxC,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACxC;aACF;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,MAAM,GAAI,KAAa,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;gBACvD,IAAI,MAAM,EAAE;oBACV,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBAClC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;wBAC3C,MAAM,eAAe,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAC/C,CAAC,GAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,KAAK,mCAAmC,IAAI,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CACjG,CAAC;wBAEF,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBACxC;iBACF;aACF;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,WAAW,GAAG;;;;;;;;;;;;;OAanB,CAAC;YAEF,MAAM,QAAQ,GAAG,IAAA,WAAI,EAAC,WAAW,EAAE,wBAAwB,CAAC,CAAC;YAC7D,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzB,IAAA,kBAAa,EAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;YAErC,IAAI;gBACF,MAAM,MAAM,GAAG,IAAA,wBAAQ,EAAC,eAAe,QAAQ,4CAA4C,EAAE;oBAC3F,QAAQ,EAAE,MAAM;oBAChB,GAAG,EAAE,WAAW;iBACjB,CAAC,CAAC;gBAEH,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAElC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;oBAC3C,MAAM,eAAe,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAC/C,CAAC,GAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,KAAK,mCAAmC,IAAI,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CACjG,CAAC;oBAEF,yCAAyC;oBACzC,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACxC;aACF;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,MAAM,GAAI,KAAa,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;gBACvD,IAAI,MAAM,EAAE;oBACV,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBAClC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;wBAC3C,MAAM,eAAe,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAC/C,CAAC,GAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,KAAK,mCAAmC,IAAI,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CACjG,CAAC;wBAEF,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBACxC;iBACF;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gCAAgC,EAAE,GAAG,EAAE;QAC9C,IAAI,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YAC1D,MAAM,WAAW,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA4BnB,CAAC;YAEF,MAAM,QAAQ,GAAG,IAAA,WAAI,EAAC,WAAW,EAAE,wBAAwB,CAAC,CAAC;YAC7D,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzB,IAAA,kBAAa,EAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;YAErC,IAAI;gBACF,MAAM,MAAM,GAAG,IAAA,wBAAQ,EAAC,eAAe,QAAQ,4CAA4C,EAAE;oBAC3F,QAAQ,EAAE,MAAM;oBAChB,GAAG,EAAE,WAAW;iBACjB,CAAC,CAAC;gBAEH,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAElC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;oBAC3C,MAAM,aAAa,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAC7C,CAAC,GAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,KAAK,oCAAoC,IAAI,GAAG,CAAC,QAAQ,KAAK,CAAC,CACxF,CAAC;oBAEF,6CAA6C;oBAC7C,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACtC;aACF;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,MAAM,GAAI,KAAa,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;gBACvD,IAAI,MAAM,EAAE;oBACV,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBAClC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;wBAC3C,MAAM,aAAa,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAC7C,CAAC,GAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,KAAK,oCAAoC,IAAI,GAAG,CAAC,QAAQ,KAAK,CAAC,CACxF,CAAC;wBAEF,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBACtC;iBACF;aACF;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YAC1D,MAAM,WAAW,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;OA2BnB,CAAC;YAEF,MAAM,QAAQ,GAAG,IAAA,WAAI,EAAC,WAAW,EAAE,iCAAiC,CAAC,CAAC;YACtE,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzB,IAAA,kBAAa,EAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;YAErC,IAAI;gBACF,MAAM,MAAM,GAAG,IAAA,wBAAQ,EAAC,eAAe,QAAQ,4CAA4C,EAAE;oBAC3F,QAAQ,EAAE,MAAM;oBAChB,GAAG,EAAE,WAAW;iBACjB,CAAC,CAAC;gBAEH,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAElC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;oBAC3C,MAAM,aAAa,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAC7C,CAAC,GAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,KAAK,YAAY,IAAI,GAAG,CAAC,QAAQ,KAAK,CAAC,CAChE,CAAC;oBAEF,6CAA6C;oBAC7C,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACtC;aACF;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,MAAM,GAAI,KAAa,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;gBACvD,IAAI,MAAM,EAAE;oBACV,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBAClC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;wBAC3C,MAAM,aAAa,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAC7C,CAAC,GAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,KAAK,YAAY,IAAI,GAAG,CAAC,QAAQ,KAAK,CAAC,CAChE,CAAC;wBAEF,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBACtC;iBACF;aACF;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YAC3D,MAAM,WAAW,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;OAyBnB,CAAC;YAEF,MAAM,QAAQ,GAAG,IAAA,WAAI,EAAC,WAAW,EAAE,kCAAkC,CAAC,CAAC;YACvE,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzB,IAAA,kBAAa,EAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;YAErC,IAAI;gBACF,MAAM,MAAM,GAAG,IAAA,wBAAQ,EAAC,eAAe,QAAQ,4CAA4C,EAAE;oBAC3F,QAAQ,EAAE,MAAM;oBAChB,GAAG,EAAE,WAAW;iBACjB,CAAC,CAAC;gBAEH,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAElC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;oBAC3C,MAAM,aAAa,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAC7C,CAAC,GAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,KAAK,0CAA0C,IAAI,GAAG,CAAC,QAAQ,KAAK,CAAC,CAC9F,CAAC;oBAEF,8CAA8C;oBAC9C,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACtC;aACF;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,MAAM,GAAI,KAAa,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;gBACvD,IAAI,MAAM,EAAE;oBACV,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBAClC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;wBAC3C,MAAM,aAAa,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAC7C,CAAC,GAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,KAAK,0CAA0C,IAAI,GAAG,CAAC,QAAQ,KAAK,CAAC,CAC9F,CAAC;wBAEF,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBACtC;iBACF;aACF;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,WAAW,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAuCnB,CAAC;YAEF,MAAM,QAAQ,GAAG,IAAA,WAAI,EAAC,WAAW,EAAE,4BAA4B,CAAC,CAAC;YACjE,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzB,IAAA,kBAAa,EAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;YAErC,IAAI;gBACF,MAAM,MAAM,GAAG,IAAA,wBAAQ,EAAC,eAAe,QAAQ,4CAA4C,EAAE;oBAC3F,QAAQ,EAAE,MAAM;oBAChB,GAAG,EAAE,WAAW;iBACjB,CAAC,CAAC;gBAEH,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAElC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;oBAC3C,MAAM,iBAAiB,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CACjD,CAAC,GAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,KAAK,kBAAkB,IAAI,GAAG,CAAC,QAAQ,KAAK,CAAC,CACtE,CAAC;oBAEF,wCAAwC;oBACxC,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBAC1C;aACF;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,MAAM,GAAI,KAAa,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;gBACvD,IAAI,MAAM,EAAE;oBACV,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBAClC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;wBAC3C,MAAM,iBAAiB,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CACjD,CAAC,GAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,KAAK,kBAAkB,IAAI,GAAG,CAAC,QAAQ,KAAK,CAAC,CACtE,CAAC;wBAEF,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBAC1C;iBACF;aACF;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YAC1D,MAAM,WAAW,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAuCnB,CAAC;YAEF,MAAM,QAAQ,GAAG,IAAA,WAAI,EAAC,WAAW,EAAE,2BAA2B,CAAC,CAAC;YAChE,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzB,IAAA,kBAAa,EAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;YAErC,IAAI;gBACF,MAAM,MAAM,GAAG,IAAA,wBAAQ,EAAC,eAAe,QAAQ,4CAA4C,EAAE;oBAC3F,QAAQ,EAAE,MAAM;oBAChB,GAAG,EAAE,WAAW;iBACjB,CAAC,CAAC;gBAEH,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAElC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;oBAC3C,MAAM,gBAAgB,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAChD,CAAC,GAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,KAAK,YAAY,IAAI,GAAG,CAAC,QAAQ,KAAK,CAAC,CAChE,CAAC;oBAEF,wCAAwC;oBACxC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACzC;aACF;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,MAAM,GAAI,KAAa,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;gBACvD,IAAI,MAAM,EAAE;oBACV,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBAClC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;wBAC3C,MAAM,gBAAgB,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAChD,CAAC,GAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,KAAK,YAAY,IAAI,GAAG,CAAC,QAAQ,KAAK,CAAC,CAChE,CAAC;wBAEF,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBACzC;iBACF;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACzC,IAAI,CAAC,4DAA4D,EAAE,KAAK,IAAI,EAAE;YAC5E,MAAM,WAAW,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA0DnB,CAAC;YAEF,MAAM,QAAQ,GAAG,IAAA,WAAI,EAAC,WAAW,EAAE,2BAA2B,CAAC,CAAC;YAChE,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzB,IAAA,kBAAa,EAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;YAErC,IAAI;gBACF,MAAM,MAAM,GAAG,IAAA,wBAAQ,EAAC,eAAe,QAAQ,4CAA4C,EAAE;oBAC3F,QAAQ,EAAE,MAAM;oBAChB,GAAG,EAAE,WAAW;iBACjB,CAAC,CAAC;gBAEH,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAElC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;oBAC3C,MAAM,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAC3C,CAAC,GAAQ,EAAE,EAAE,CACX,GAAG,CAAC,MAAM,KAAK,UAAU;wBACzB,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC;4BAC/B,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC;4BAC1B,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC;4BAC5B,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC;4BAC9B,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC;4BAC5B,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC;4BACjC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC;4BAClC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC;4BACjC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CACtC,CAAC;oBAEF,2DAA2D;oBAC3D,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACpC;aACF;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,MAAM,GAAI,KAAa,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;gBACvD,IAAI,MAAM,EAAE;oBACV,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBAClC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;wBAC3C,MAAM,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAC3C,CAAC,GAAQ,EAAE,EAAE,CACX,GAAG,CAAC,MAAM,KAAK,UAAU;4BACzB,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC;gCAC/B,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC;gCAC1B,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC;gCAC5B,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC;gCAC9B,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC;gCAC5B,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC;gCACjC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC;gCAClC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC;gCACjC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CACtC,CAAC;wBAEF,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBACpC;iBACF;aACF;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;YAChE,MAAM,WAAW,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA4CnB,CAAC;YAEF,MAAM,QAAQ,GAAG,IAAA,WAAI,EAAC,WAAW,EAAE,4BAA4B,CAAC,CAAC;YACjE,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzB,IAAA,kBAAa,EAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;YAErC,IAAI;gBACF,MAAM,MAAM,GAAG,IAAA,wBAAQ,EAAC,eAAe,QAAQ,4CAA4C,EAAE;oBAC3F,QAAQ,EAAE,MAAM;oBAChB,GAAG,EAAE,WAAW;iBACjB,CAAC,CAAC;gBAEH,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAElC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;oBAC3C,MAAM,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,KAAK,UAAU,CAAC,CAAC;oBAEvF,4CAA4C;oBAC5C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACpC;aACF;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,MAAM,GAAI,KAAa,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;gBACvD,IAAI,MAAM,EAAE;oBACV,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBAClC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;wBAC3C,MAAM,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,KAAK,UAAU,CAAC,CAAC;wBAEvF,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBACpC;iBACF;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;QAC1C,IAAI,CAAC,kDAAkD,EAAE,GAAG,EAAE;YAC5D,MAAM,SAAS,GAAG;gBAChB,yCAAyC;gBACzC,6BAA6B;gBAC7B,+BAA+B;gBAC/B,sDAAsD;gBACtD,+CAA+C;gBAC/C,+BAA+B;aAChC,CAAC;YAEF,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBACvB,2DAA2D;gBAC3D,MAAM,kBAAkB,GACtB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;gBAEhH,MAAM,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,+CAA+C,EAAE,GAAG,EAAE;YACzD,MAAM,YAAY,GAAG;gBACnB,oCAAoC;gBACpC,wBAAwB;gBACxB,0BAA0B;gBAC1B,uCAAuC;gBACvC,oCAAoC;aACrC,CAAC;YAEF,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBAC1B,gDAAgD;gBAChD,MAAM,kBAAkB,GACtB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;gBAEhH,MAAM,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACzC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gCAAgC,EAAE,GAAG,EAAE;QAC9C,IAAI,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC7D,MAAM,WAAW,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA+BnB,CAAC;YAEF,MAAM,QAAQ,GAAG,IAAA,WAAI,EAAC,WAAW,EAAE,kCAAkC,CAAC,CAAC;YACvE,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzB,IAAA,kBAAa,EAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;YAErC,IAAI;gBACF,MAAM,MAAM,GAAG,IAAA,wBAAQ,EAAC,eAAe,QAAQ,4CAA4C,EAAE;oBAC3F,QAAQ,EAAE,MAAM;oBAChB,GAAG,EAAE,WAAW;iBACjB,CAAC,CAAC;gBAEH,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAElC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;oBAC3C,MAAM,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,KAAK,UAAU,CAAC,CAAC;oBAEvF,0CAA0C;oBAC1C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACpC;aACF;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,MAAM,GAAI,KAAa,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;gBACvD,IAAI,MAAM,EAAE;oBACV,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBAClC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;wBAC3C,MAAM,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,KAAK,UAAU,CAAC,CAAC;wBAEvF,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBACpC;iBACF;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;QACtC,IAAI,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YACpD,MAAM,WAAW,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAmCnB,CAAC;YAEF,MAAM,QAAQ,GAAG,IAAA,WAAI,EAAC,WAAW,EAAE,2BAA2B,CAAC,CAAC;YAChE,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzB,IAAA,kBAAa,EAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;YAErC,IAAI;gBACF,MAAM,MAAM,GAAG,IAAA,wBAAQ,EAAC,eAAe,QAAQ,4CAA4C,EAAE;oBAC3F,QAAQ,EAAE,MAAM;oBAChB,GAAG,EAAE,WAAW;iBACjB,CAAC,CAAC;gBAEH,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAElC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;oBAC3C,MAAM,eAAe,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAC/C,CAAC,GAAQ,EAAE,EAAE,CACX,GAAG,CAAC,MAAM,KAAK,mCAAmC;wBAClD,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC;4BACjC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC;4BAC/B,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC;4BACjC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAC1C,CAAC;oBAEF,yDAAyD;oBACzD,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACxC;aACF;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,MAAM,GAAI,KAAa,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;gBACvD,IAAI,MAAM,EAAE;oBACV,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBAClC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;wBAC3C,MAAM,eAAe,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAC/C,CAAC,GAAQ,EAAE,EAAE,CACX,GAAG,CAAC,MAAM,KAAK,mCAAmC;4BAClD,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC;gCACjC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC;gCAC/B,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC;gCACjC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAC1C,CAAC;wBAEF,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBACxC;iBACF;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/backups/first-wave-2025-08-11T05-19-26-813Z/src/__tests__/linting/TestFileRuleValidation.test.ts"],"sourcesContent":["/**\n * Test File Rule Validation Test Suite\n *\n * Tests the domain-specific ESLint rules for test files\n * to ensure appropriate relaxations for mock variables and testing patterns.\n *\n * Requirements: 4.4\n */\n\nimport { execSync } from 'child_process';\nimport { writeFileSync } from 'fs';\nimport { join } from 'path';\n\ndescribe('Test File Rule Validation', () => {\n  const projectRoot = process.cwd();\n  const tempFiles: string[] = [];\n\n  afterEach(() => {\n    // Clean up temporary test files\n    tempFiles.forEach(file => {\n      try {\n        execSync(`rm -f \"${file}\"`);\n      } catch {}\n    });\n    tempFiles.length = 0;\n  });\n\n  describe('Mock Variable Relaxations', () => {\n    test('should ignore unused mock variables', async () => {\n      const testContent = `\n        describe('Mock Variable Tests', () => {\n          test('should handle mock variables', () => {\n            const mockFunction = jest.fn();\n            const _stubValue = 'test-stub';\n            const testData = { id: 1, name: 'test' };\n            const _mockObject = { method: jest.fn() };\n            const _stubArray = [1, 2, 3];\n            const _testConfig = { enabled: true };\n            const UNUSED_mock = 'unused-mock';\n            const UNUSED_stub = 'unused-stub';\n            const UNUSED_test = 'unused-test';\n            \n            // Only use one variable to test unused variable handling\n            expect(mockFunction).toBeDefined();\n          });\n        });\n      `;\n\n      const testFile = join(projectRoot, 'temp-mock-variables.test.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n          cwd: projectRoot,\n        });\n\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const unusedVarErrors = result[0].messages.filter(\n            (msg: any) =>\n              msg.ruleId === '@typescript-eslint/no-unused-vars' &&\n              (msg.message.includes('mock') || msg.message.includes('stub') || msg.message.includes('test')),\n          );\n\n          // Mock variable patterns should be ignored in test files\n          expect(unusedVarErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const unusedVarErrors = result[0].messages.filter(\n              (msg: any) =>\n                msg.ruleId === '@typescript-eslint/no-unused-vars' &&\n                (msg.message.includes('mock') || msg.message.includes('stub') || msg.message.includes('test')),\n            );\n\n            expect(unusedVarErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n\n    test('should allow Jest mock functions', async () => {\n      const testContent = `\n        describe('Jest Mock Functions', () => {\n          const mockCallback = jest.fn();\n          const mockImplementation = jest.fn(() => 'mocked');\n          const mockReturnValue = jest.fn().mockReturnValue('value');\n          const mockResolvedValue = jest.fn().mockResolvedValue('resolved');\n          const mockRejectedValue = jest.fn().mockRejectedValue(new Error('rejected'));\n          \n          beforeEach(() => {\n            jest.clearAllMocks();\n            mockCallback.mockClear();\n            mockImplementation.mockReset();\n            mockReturnValue.mockRestore();\n          });\n          \n          test('should work with mocks', () => {\n            expect(mockCallback).toHaveBeenCalledTimes(0);\n            expect(mockImplementation()).toBe('mocked');\n            expect(mockReturnValue()).toBe('value');\n          });\n        });\n      `;\n\n      const testFile = join(projectRoot, 'temp-jest-mocks.test.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n          cwd: projectRoot,\n        });\n\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const unusedVarErrors = result[0].messages.filter(\n            (msg: any) => msg.ruleId === '@typescript-eslint/no-unused-vars' && msg.message.includes('mock'),\n          );\n\n          // Jest mock functions should be allowed\n          expect(unusedVarErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const unusedVarErrors = result[0].messages.filter(\n              (msg: any) => msg.ruleId === '@typescript-eslint/no-unused-vars' && msg.message.includes('mock'),\n            );\n\n            expect(unusedVarErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n\n    test('should allow test data structures', async () => {\n      const testContent = `\n        describe('Test Data Structures', () => {\n          const testUser = { id: 1, name: 'Test User', email: 'test@example.com' };\n          const _testIngredient = { name: 'tomato', elementalProperties: { Fire: 0.3, Water: 0.7, Earth: 0.2, Air: 0.1 } };\n          const _testRecipe = { id: 1, name: 'Test Recipe', ingredients: [] };\n          const _testPlanetaryPosition = { sign: 'aries', degree: 8.5, exactLongitude: 8.5, isRetrograde: false };\n          const _testConfig = { apiUrl: 'http://test.api', timeout: 5000 };\n          const _testMetrics = { errors: 0, warnings: 5, processed: 100 };\n          \n          test('should use test data', () => {\n            expect(testUser.id).toBe(1);\n          });\n        });\n      `;\n\n      const testFile = join(projectRoot, 'temp-test-data.test.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n          cwd: projectRoot,\n        });\n\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const unusedVarErrors = result[0].messages.filter(\n            (msg: any) => msg.ruleId === '@typescript-eslint/no-unused-vars' && msg.message.includes('test'),\n          );\n\n          // Test data structures should be allowed\n          expect(unusedVarErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const unusedVarErrors = result[0].messages.filter(\n              (msg: any) => msg.ruleId === '@typescript-eslint/no-unused-vars' && msg.message.includes('test'),\n            );\n\n            expect(unusedVarErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n  });\n\n  describe('Test-Specific Rule Relaxations', () => {\n    test('should allow explicit any types in tests', async () => {\n      const testContent = `\n        describe('Any Type Tests', () => {\n          test('should allow any types for flexible testing', () => {\n            const anyValue: any = 'test-value';\n            const anyObject: any = { prop: 'value' };\n            const anyArray: any[] = [1, 'two', { three: 3 }];\n            const anyFunction: any = () => 'result';\n            \n            // Test dynamic behavior\n            anyObject.dynamicProperty = 'dynamic';\n            anyArray.push({ dynamic: true });\n            \n            expect(anyValue).toBeDefined();\n            expect(anyObject.prop).toBe('value');\n            expect(anyArray.length).toBeGreaterThan(0);\n            expect(anyFunction()).toBe('result');\n          });\n          \n          test('should handle API responses with any', () => {\n            const apiResponse: any = {\n              data: { id: 1, name: 'test' },\n              status: 200,\n              headers: { 'content-type': 'application/json' }\n            };\n            \n            expect(apiResponse.data.id).toBe(1);\n          });\n        });\n      `;\n\n      const testFile = join(projectRoot, 'temp-any-types.test.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n          cwd: projectRoot,\n        });\n\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const anyTypeErrors = result[0].messages.filter(\n            (msg: any) => msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2, // error level\n          );\n\n          // Test files should allow explicit any types\n          expect(anyTypeErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const anyTypeErrors = result[0].messages.filter(\n              (msg: any) => msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2,\n            );\n\n            expect(anyTypeErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n\n    test('should allow console statements in tests', async () => {\n      const testContent = `\n        describe('Console Statement Tests', () => {\n          test('should allow console output for debugging', () => {\n            console.log('Test starting...');\n            console.info('Processing test data');\n            console.warn('This is a test warning');\n            console.error('This is a test error (not real)');\n            console.debug('Debug information for test');\n            console.table([{ test: 'data', value: 123 }]);\n            console.group('Test Group');\n            console.log('Grouped test output');\n            console.groupEnd();\n            console.time('test-timer');\n            console.timeEnd('test-timer');\n            console.count('test-counter');\n            \n            expect(true).toBe(true);\n          });\n          \n          beforeEach(() => {\n            console.log('Setting up test...');\n          });\n          \n          afterEach(() => {\n            console.log('Cleaning up test...');\n          });\n        });\n      `;\n\n      const testFile = join(projectRoot, 'temp-console-statements.test.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n          cwd: projectRoot,\n        });\n\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const consoleErrors = result[0].messages.filter(\n            (msg: any) => msg.ruleId === 'no-console' && msg.severity === 2, // error level\n          );\n\n          // Test files should allow console statements\n          expect(consoleErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const consoleErrors = result[0].messages.filter(\n              (msg: any) => msg.ruleId === 'no-console' && msg.severity === 2,\n            );\n\n            expect(consoleErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n\n    test('should allow non-null assertions in tests', async () => {\n      const testContent = `\n        describe('Non-null Assertion Tests', () => {\n          test('should allow non-null assertions for test certainty', () => {\n            const maybeValue: string | null = 'test-value';\n            const maybeObject: { prop?: string } = { prop: 'value' };\n            const maybeArray: number[] | undefined = [1, 2, 3];\n            \n            // Non-null assertions should be allowed in tests\n            const definiteValue = maybeValue!;\n            const definiteProperty = maybeObject.prop!;\n            const definiteArray = maybeArray!;\n            \n            expect(definiteValue).toBe('test-value');\n            expect(definiteProperty).toBe('value');\n            expect(definiteArray.length).toBe(3);\n            \n            // Test DOM elements (common in React tests)\n            const element = document.querySelector('.test-element')!;\n            const button = document.getElementById('test-button')!;\n            \n            // These would normally be checked, but in tests we know they exist\n            expect(element).toBeDefined();\n            expect(button).toBeDefined();\n          });\n        });\n      `;\n\n      const testFile = join(projectRoot, 'temp-non-null-assertions.test.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n          cwd: projectRoot,\n        });\n\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const nonNullErrors = result[0].messages.filter(\n            (msg: any) => msg.ruleId === '@typescript-eslint/no-non-null-assertion' && msg.severity === 2, // error level\n          );\n\n          // Test files should allow non-null assertions\n          expect(nonNullErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const nonNullErrors = result[0].messages.filter(\n              (msg: any) => msg.ruleId === '@typescript-eslint/no-non-null-assertion' && msg.severity === 2,\n            );\n\n            expect(nonNullErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n\n    test('should allow magic numbers in tests', async () => {\n      const testContent = `\n        describe('Magic Numbers Tests', () => {\n          test('should allow magic numbers for test values', () => {\n            const testId = 12345;\n            const testScore = 98.7;\n            const testCount = 42;\n            const testPercentage = 75.5;\n            const _testTimeout = 5000;\n            const _testPort = 3000;\n            const testStatusCode = 200;\n            const testErrorCode = 404;\n            \n            expect(testId).toBe(12345);\n            expect(testScore).toBeCloseTo(98.7);\n            expect(testCount).toBe(42);\n            expect(testPercentage).toBe(75.5);\n            \n            // Common test patterns with magic numbers\n            setTimeout(() => {}, 1000);\n            expect(Array(10).fill(0)).toHaveLength(10);\n            expect(Math.random() * 100).toBeLessThan(100);\n            \n            // HTTP status codes\n            expect(testStatusCode).toBe(200);\n            expect(testErrorCode).toBe(404);\n          });\n          \n          test('should handle test data with magic numbers', () => {\n            const testData = {\n              users: Array(50).fill(null).map((_, i) => ({ id: i + 1 })),\n              pageSize: 25,\n              totalPages: 4,\n              currentPage: 1\n            };\n            \n            expect(testData.users).toHaveLength(50);\n            expect(testData.pageSize).toBe(25);\n          });\n        });\n      `;\n\n      const testFile = join(projectRoot, 'temp-magic-numbers.test.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n          cwd: projectRoot,\n        });\n\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const magicNumberErrors = result[0].messages.filter(\n            (msg: any) => msg.ruleId === 'no-magic-numbers' && msg.severity === 2, // error level\n          );\n\n          // Test files should allow magic numbers\n          expect(magicNumberErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const magicNumberErrors = result[0].messages.filter(\n              (msg: any) => msg.ruleId === 'no-magic-numbers' && msg.severity === 2,\n            );\n\n            expect(magicNumberErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n\n    test('should allow relaxed complexity in tests', async () => {\n      const testContent = `\n        describe('Complex Test Logic', () => {\n          test('should allow complex test scenarios', () => {\n            // Complex test logic should be allowed\n            const testScenarios = [\n              { input: 'a', expected: 1 },\n              { input: 'b', expected: 2 },\n              { input: 'c', expected: 3 }\n            ];\n            \n            testScenarios.forEach(scenario => {\n              for (let i = 0; i < 5; i++) {\n                for (let j = 0; j < 3; j++) {\n                  if (scenario.input === 'a') {\n                    if (i > 2) {\n                      if (j === 1) {\n                        expect(scenario.expected).toBe(1);\n                      } else if (j === 2) {\n                        expect(scenario.expected).toBeGreaterThan(0);\n                      } else {\n                        expect(scenario.expected).toBeDefined();\n                      }\n                    } else {\n                      expect(scenario.expected).toBeTruthy();\n                    }\n                  } else if (scenario.input === 'b') {\n                    if (i < 3) {\n                      expect(scenario.expected).toBe(2);\n                    } else {\n                      expect(scenario.expected).toBeGreaterThan(1);\n                    }\n                  } else {\n                    expect(scenario.expected).toBe(3);\n                  }\n                }\n              }\n            });\n          });\n        });\n      `;\n\n      const testFile = join(projectRoot, 'temp-complex-test.test.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n          cwd: projectRoot,\n        });\n\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const complexityErrors = result[0].messages.filter(\n            (msg: any) => msg.ruleId === 'complexity' && msg.severity === 2, // error level\n          );\n\n          // Test files should allow complex logic\n          expect(complexityErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const complexityErrors = result[0].messages.filter(\n              (msg: any) => msg.ruleId === 'complexity' && msg.severity === 2,\n            );\n\n            expect(complexityErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n  });\n\n  describe('Jest Globals Availability', () => {\n    test('should have Jest globals available without no-undef errors', async () => {\n      const testContent = `\n        describe('Jest Globals Test', () => {\n          beforeAll(() => {\n            console.log('Before all tests');\n          });\n          \n          beforeEach(() => {\n            console.log('Before each test');\n          });\n          \n          afterEach(() => {\n            console.log('After each test');\n          });\n          \n          afterAll(() => {\n            console.log('After all tests');\n          });\n          \n          test('should have access to Jest globals', () => {\n            expect(true).toBe(true);\n            expect(false).toBeFalsy();\n            expect('string').toEqual('string');\n            expect(42).toBeGreaterThan(0);\n            expect([1, 2, 3]).toHaveLength(3);\n            expect({ key: 'value' }).toHaveProperty('key');\n          });\n          \n          it('should work with it() syntax', () => {\n            expect(jest).toBeDefined();\n            expect(describe).toBeDefined();\n            expect(test).toBeDefined();\n            expect(it).toBeDefined();\n            expect(expect).toBeDefined();\n          });\n          \n          test('should have Jest mock functions', () => {\n            const mockFn = jest.fn();\n            mockFn('test');\n            \n            expect(mockFn).toHaveBeenCalled();\n            expect(mockFn).toHaveBeenCalledWith('test');\n            expect(mockFn).toHaveBeenCalledTimes(1);\n            \n            jest.clearAllMocks();\n            expect(mockFn).not.toHaveBeenCalled();\n          });\n          \n          test('should have Jest spy functions', () => {\n            const obj = { method: () => 'original' };\n            const spy = jest.spyOn(obj, 'method').mockReturnValue('mocked');\n            \n            expect(obj.method()).toBe('mocked');\n            expect(spy).toHaveBeenCalled();\n            \n            spy.mockRestore();\n            expect(obj.method()).toBe('original');\n          });\n        });\n      `;\n\n      const testFile = join(projectRoot, 'temp-jest-globals.test.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n          cwd: projectRoot,\n        });\n\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const undefErrors = result[0].messages.filter(\n            (msg: any) =>\n              msg.ruleId === 'no-undef' &&\n              (msg.message.includes('describe') ||\n                msg.message.includes('it') ||\n                msg.message.includes('test') ||\n                msg.message.includes('expect') ||\n                msg.message.includes('jest') ||\n                msg.message.includes('beforeAll') ||\n                msg.message.includes('beforeEach') ||\n                msg.message.includes('afterEach') ||\n                msg.message.includes('afterAll')),\n          );\n\n          // Jest globals should be available without no-undef errors\n          expect(undefErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const undefErrors = result[0].messages.filter(\n              (msg: any) =>\n                msg.ruleId === 'no-undef' &&\n                (msg.message.includes('describe') ||\n                  msg.message.includes('it') ||\n                  msg.message.includes('test') ||\n                  msg.message.includes('expect') ||\n                  msg.message.includes('jest') ||\n                  msg.message.includes('beforeAll') ||\n                  msg.message.includes('beforeEach') ||\n                  msg.message.includes('afterEach') ||\n                  msg.message.includes('afterAll')),\n            );\n\n            expect(undefErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n\n    test('should have additional Jest matchers available', async () => {\n      const testContent = `\n        describe('Jest Matchers Test', () => {\n          test('should have extended Jest matchers', () => {\n            // Basic matchers\n            expect(true).toBeTruthy();\n            expect(false).toBeFalsy();\n            expect(null).toBeNull();\n            expect(undefined).toBeUndefined();\n            expect('defined').toBeDefined();\n            \n            // Number matchers\n            expect(42).toBeGreaterThan(0);\n            expect(42).toBeGreaterThanOrEqual(42);\n            expect(42).toBeLessThan(100);\n            expect(42).toBeLessThanOrEqual(42);\n            expect(3.14).toBeCloseTo(3.1, 1);\n            \n            // String matchers\n            expect('hello world').toMatch(/world/);\n            expect('hello world').toContain('world');\n            \n            // Array matchers\n            expect([1, 2, 3]).toHaveLength(3);\n            expect([1, 2, 3]).toContain(2);\n            expect([1, 2, 3]).toEqual(expect.arrayContaining([1, 3]));\n            \n            // Object matchers\n            expect({ a: 1, b: 2 }).toHaveProperty('a');\n            expect({ a: 1, b: 2 }).toHaveProperty('a', 1);\n            expect({ a: 1, b: 2 }).toMatchObject({ a: 1 });\n            \n            // Function matchers\n            const mockFn = jest.fn();\n            mockFn('arg1', 'arg2');\n            expect(mockFn).toHaveBeenCalled();\n            expect(mockFn).toHaveBeenCalledWith('arg1', 'arg2');\n            expect(mockFn).toHaveBeenCalledTimes(1);\n            expect(mockFn).toHaveBeenLastCalledWith('arg1', 'arg2');\n            \n            // Promise matchers (async)\n            expect(Promise.resolve('value')).resolves.toBe('value');\n            expect(Promise.reject(new Error('error'))).rejects.toThrow('error');\n          });\n        });\n      `;\n\n      const testFile = join(projectRoot, 'temp-jest-matchers.test.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n          cwd: projectRoot,\n        });\n\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const undefErrors = result[0].messages.filter((msg: any) => msg.ruleId === 'no-undef');\n\n          // No undefined variable errors should occur\n          expect(undefErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const undefErrors = result[0].messages.filter((msg: any) => msg.ruleId === 'no-undef');\n\n            expect(undefErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n  });\n\n  describe('Test File Pattern Matching', () => {\n    test('should apply test rules to correct file patterns', () => {\n      const testFiles = [\n        'src/components/FoodRecommender.test.tsx',\n        'src/utils/astrology.spec.ts',\n        'src/services/campaign.test.ts',\n        'src/__tests__/calculations/culinaryAstrology.test.ts',\n        'src/__tests__/utils/reliableAstronomy.spec.ts',\n        'tests/integration/api.test.js',\n      ];\n\n      testFiles.forEach(file => {\n        // Check if file would match test patterns in ESLint config\n        const matchesTestPattern =\n          file.includes('.test.') || file.includes('.spec.') || file.includes('__tests__/') || file.includes('/tests/');\n\n        expect(matchesTestPattern).toBe(true);\n      });\n    });\n\n    test('should not apply test rules to non-test files', () => {\n      const nonTestFiles = [\n        'src/components/FoodRecommender.tsx',\n        'src/utils/astrology.ts',\n        'src/services/campaign.ts',\n        'src/calculations/culinaryAstrology.ts',\n        'src/data/ingredients/vegetables.ts',\n      ];\n\n      nonTestFiles.forEach(file => {\n        // Check that file would NOT match test patterns\n        const matchesTestPattern =\n          file.includes('.test.') || file.includes('.spec.') || file.includes('__tests__/') || file.includes('/tests/');\n\n        expect(matchesTestPattern).toBe(false);\n      });\n    });\n  });\n\n  describe('Test Environment Configuration', () => {\n    test('should have proper Jest environment globals', async () => {\n      const testContent = `\n        describe('Environment Globals', () => {\n          test('should have Node.js globals available', () => {\n            expect(process).toBeDefined();\n            expect(Buffer).toBeDefined();\n            expect(global).toBeDefined();\n            expect(__dirname).toBeDefined();\n            expect(__filename).toBeDefined();\n          });\n          \n          test('should have browser globals available', () => {\n            // These might not be available in Node environment\n            // but should not cause no-undef errors if configured properly\n            if (typeof window !== 'undefined') {\n              expect(window).toBeDefined();\n              expect(document).toBeDefined();\n            }\n          });\n          \n          test('should have common JavaScript globals', () => {\n            expect(console).toBeDefined();\n            expect(setTimeout).toBeDefined();\n            expect(setInterval).toBeDefined();\n            expect(clearTimeout).toBeDefined();\n            expect(clearInterval).toBeDefined();\n            expect(Promise).toBeDefined();\n            expect(Array).toBeDefined();\n            expect(Object).toBeDefined();\n            expect(JSON).toBeDefined();\n          });\n        });\n      `;\n\n      const testFile = join(projectRoot, 'temp-environment-globals.test.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n          cwd: projectRoot,\n        });\n\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const undefErrors = result[0].messages.filter((msg: any) => msg.ruleId === 'no-undef');\n\n          // Environment globals should be available\n          expect(undefErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const undefErrors = result[0].messages.filter((msg: any) => msg.ruleId === 'no-undef');\n\n            expect(undefErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n  });\n\n  describe('Test-Specific Patterns', () => {\n    test('should allow test helper functions', async () => {\n      const testContent = `\n        describe('Test Helpers', () => {\n          // Test helper functions should be allowed even if unused\n          const createTestUser = (overrides = {}) => ({\n            id: 1,\n            name: 'Test User',\n            email: 'test@example.com',\n            ...overrides\n          });\n          \n          const createTestIngredient = (name = 'tomato') => ({\n            name,\n            elementalProperties: { Fire: 0.3, Water: 0.7, Earth: 0.2, Air: 0.1 }\n          });\n          \n          const _mockApiResponse = (data: any, status = 200) => ({\n            data,\n            status,\n            headers: { 'content-type': 'application/json' }\n          });\n          \n          const _setupTestEnvironment = () => {\n            // Setup code\n            return { initialized: true };\n          };\n          \n          const _teardownTestEnvironment = () => {\n            // Cleanup code\n          };\n          \n          test('should use test helpers', () => {\n            const user = createTestUser({ name: 'Custom User' });\n            expect(user.name).toBe('Custom User');\n          });\n        });\n      `;\n\n      const testFile = join(projectRoot, 'temp-test-helpers.test.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n          cwd: projectRoot,\n        });\n\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const unusedVarErrors = result[0].messages.filter(\n            (msg: any) =>\n              msg.ruleId === '@typescript-eslint/no-unused-vars' &&\n              (msg.message.includes('createTest') ||\n                msg.message.includes('mockApi') ||\n                msg.message.includes('setupTest') ||\n                msg.message.includes('teardownTest')),\n          );\n\n          // Test helper functions should be allowed even if unused\n          expect(unusedVarErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const unusedVarErrors = result[0].messages.filter(\n              (msg: any) =>\n                msg.ruleId === '@typescript-eslint/no-unused-vars' &&\n                (msg.message.includes('createTest') ||\n                  msg.message.includes('mockApi') ||\n                  msg.message.includes('setupTest') ||\n                  msg.message.includes('teardownTest')),\n            );\n\n            expect(unusedVarErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n  });\n});\n"],"version":3}