55cecbbf65a69d2644ffa12cd4e38d84
"use strict";
/**
 * Linting Alerting System with Performance Monitoring
 *
 * Provides real-time alerting for linting regression detection
 * with performance monitoring and automated response capabilities.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LintingAlertingSystem = void 0;
const child_process_1 = require("child_process");
const fs_1 = require("fs");
class LintingAlertingSystem {
    configFile = '.kiro/metrics/alerting-config.json';
    historyFile = '.kiro/metrics/alerting-history.json';
    suppressionFile = '.kiro/metrics/alert-suppressions.json';
    config;
    lastAlertTime = new Map();
    suppressedAlerts = new Set();
    constructor() {
        this.config = this.loadConfiguration();
        this.loadSuppressions();
    }
    /**
     * Process alerts and trigger appropriate responses
     */
    async processAlerts(alerts, metrics) {
        if (!this.config.enabled) {
            return;
        }
        console.log(`🚨 Processing ${alerts.length} alerts...`);
        // Filter alerts based on cooldown and suppression
        const activeAlerts = this.filterActiveAlerts(alerts);
        // Process performance monitoring
        const performanceEvents = await this.monitorPerformance(metrics);
        // Send alerts through configured channels
        for (const alert of activeAlerts) {
            await this.sendAlert(alert);
            this.updateAlertHistory(alert);
        }
        // Process performance events
        for (const event of performanceEvents) {
            await this.processPerformanceEvent(event);
        }
        // Trigger auto-responses if configured
        if (this.config.autoResponse.enabled) {
            await this.triggerAutoResponses(activeAlerts, performanceEvents);
        }
        console.log(`✅ Processed ${activeAlerts.length} active alerts and ${performanceEvents.length} performance events`);
    }
    /**
     * Monitor performance metrics and detect issues
     */
    async monitorPerformance(metrics) {
        if (!this.config.performanceMonitoring.enabled) {
            return [];
        }
        const events = [];
        const thresholds = this.config.performanceMonitoring.thresholds;
        for (const threshold of thresholds) {
            const value = this.getPerformanceMetricValue(metrics, threshold.metric);
            if (this.isThresholdExceeded(value, threshold)) {
                const event = {
                    id: `perf-${threshold.metric}-${Date.now()}`,
                    timestamp: new Date(),
                    type: 'threshold_exceeded',
                    metric: threshold.metric,
                    value,
                    threshold: threshold.threshold,
                    impact: this.calculateImpact(threshold.severity),
                    autoResponseTriggered: false,
                };
                events.push(event);
                console.log(`⚠️ Performance threshold exceeded: ${threshold.metric} = ${value} > ${threshold.threshold}`);
            }
        }
        return events;
    }
    /**
     * Send alert through configured channels
     */
    async sendAlert(alert) {
        for (const channel of this.config.channels) {
            if (channel.severityFilter.includes(alert.severity)) {
                await this.sendAlertToChannel(alert, channel);
            }
        }
    }
    /**
     * Send alert to specific channel
     */
    async sendAlertToChannel(alert, channel) {
        try {
            switch (channel.type) {
                case 'console':
                    this.sendConsoleAlert(alert);
                    break;
                case 'file':
                    await this.sendFileAlert(alert, channel.config);
                    break;
                case 'kiro':
                    await this.sendKiroAlert(alert, channel.config);
                    break;
                case 'webhook':
                    await this.sendWebhookAlert(alert, channel.config);
                    break;
            }
        }
        catch (error) {
            console.error(`Failed to send alert to ${channel.type}:`, error);
        }
    }
    /**
     * Send console alert
     */
    sendConsoleAlert(alert) {
        const icon = this.getSeverityIcon(alert.severity);
        const timestamp = alert.timestamp.toISOString();
        console.log(`${icon} [${alert.severity.toUpperCase()}] ${timestamp}`);
        console.log(`   Metric: ${alert.metric}`);
        console.log(`   Value: ${alert.currentValue} (threshold: ${alert.threshold})`);
        console.log(`   Message: ${alert.message}`);
        console.log('');
    }
    /**
     * Send file alert
     */
    async sendFileAlert(alert, config) {
        const alertFile = config.file || '.kiro/metrics/alerts.log';
        const timestamp = alert.timestamp.toISOString();
        const logEntry = `[${timestamp}] ${alert.severity.toUpperCase()}: ${alert.message} (${alert.metric}: ${alert.currentValue}/${alert.threshold})\n`;
        try {
            // Append to file
            (0, child_process_1.execSync)(`echo "${logEntry}" >> "${alertFile}"`);
        }
        catch (error) {
            console.error('Failed to write alert to file:', error);
        }
    }
    /**
     * Send Kiro alert (integration with Kiro system)
     */
    async sendKiroAlert(alert, config) {
        // Create Kiro notification file
        const kiroAlert = {
            id: alert.id,
            timestamp: alert.timestamp,
            type: 'linting_alert',
            severity: alert.severity,
            title: `Linting ${alert.severity.toUpperCase()}: ${alert.metric}`,
            message: alert.message,
            data: {
                metric: alert.metric,
                currentValue: alert.currentValue,
                threshold: alert.threshold,
            },
            actions: this.generateKiroActions(alert),
        };
        const kiroFile = '.kiro/notifications/linting-alerts.json';
        (0, fs_1.writeFileSync)(kiroFile, JSON.stringify(kiroAlert, null, 2));
    }
    /**
     * Send webhook alert
     */
    async sendWebhookAlert(alert, config) {
        if (!config.url) {
            console.warn('Webhook URL not configured');
            return;
        }
        const payload = {
            alert_id: alert.id,
            timestamp: alert.timestamp,
            severity: alert.severity,
            metric: alert.metric,
            current_value: alert.currentValue,
            threshold: alert.threshold,
            message: alert.message,
            source: 'linting-excellence-dashboard',
        };
        try {
            // Use curl for webhook (Node.js fetch might not be available)
            const curlCommand = `curl -X POST "${config.url}" \
        -H "Content-Type: application/json" \
        -d '${JSON.stringify(payload)}'`;
            (0, child_process_1.execSync)(curlCommand, { stdio: 'pipe' });
        }
        catch (error) {
            console.error('Failed to send webhook alert:', error);
        }
    }
    /**
     * Process performance event and trigger responses
     */
    async processPerformanceEvent(event) {
        console.log(`📊 Performance event: ${event.type} for ${event.metric}`);
        // Log performance event
        const performanceLog = `.kiro/metrics/performance-events.log`;
        const logEntry = `[${event.timestamp.toISOString()}] ${event.type.toUpperCase()}: ${event.metric} = ${event.value} (threshold: ${event.threshold}, impact: ${event.impact})\n`;
        try {
            (0, child_process_1.execSync)(`echo "${logEntry}" >> "${performanceLog}"`);
        }
        catch (error) {
            console.error('Failed to log performance event:', error);
        }
        // Update performance history
        this.updatePerformanceHistory(event);
    }
    /**
     * Trigger automatic responses based on alerts and performance events
     */
    async triggerAutoResponses(alerts, events) {
        const actions = this.config.autoResponse.actions;
        for (const action of actions) {
            if (this.shouldTriggerAction(action, alerts, events)) {
                await this.executeAutoResponse(action);
            }
        }
    }
    /**
     * Execute automatic response action
     */
    async executeAutoResponse(action) {
        console.log(`🤖 Executing auto-response: ${action.action}`);
        try {
            switch (action.action) {
                case 'enableCache':
                    await this.enableLintingCache();
                    break;
                case 'reduceBatchSize':
                    await this.reduceBatchSize(action.parameters.newSize || 10);
                    break;
                case 'skipNonCritical':
                    await this.skipNonCriticalRules();
                    break;
                case 'emergencyStop':
                    await this.emergencyStop();
                    break;
            }
        }
        catch (error) {
            console.error(`Failed to execute auto-response ${action.action}:`, error);
        }
    }
    /**
     * Filter alerts based on cooldown and suppression
     */
    filterActiveAlerts(alerts) {
        return alerts.filter(alert => {
            // Check suppression
            if (this.suppressedAlerts.has(alert.metric)) {
                return false;
            }
            // Check cooldown
            const lastAlert = this.lastAlertTime.get(alert.metric);
            if (lastAlert) {
                const cooldownMs = this.config.regressionDetection.cooldownPeriod * 60 * 1000;
                if (Date.now() - lastAlert.getTime() < cooldownMs) {
                    return false;
                }
            }
            return true;
        });
    }
    /**
     * Generate Kiro-specific actions for alerts
     */
    generateKiroActions(alert) {
        const actions = [];
        if (alert.metric === 'parserErrors' && alert.currentValue > 0) {
            actions.push({
                type: 'command',
                label: 'Fix Parser Errors',
                command: 'yarn tsc --noEmit',
                description: 'Run TypeScript compiler to identify syntax errors',
            });
        }
        if (alert.metric === 'explicitAnyErrors' && alert.currentValue > 100) {
            actions.push({
                type: 'campaign',
                label: 'Start Explicit Any Campaign',
                campaign: 'explicit-any-elimination',
                description: 'Launch systematic explicit any type elimination',
            });
        }
        if (alert.metric === 'importOrderIssues' && alert.currentValue > 50) {
            actions.push({
                type: 'command',
                label: 'Fix Import Order',
                command: 'yarn lint:fix',
                description: 'Automatically organize imports with enhanced rules',
            });
        }
        return actions;
    }
    // Auto-response implementations
    async enableLintingCache() {
        console.log('🚀 Enabling ESLint caching for improved performance');
        // Cache is already enabled in eslint.config.cjs, this is a no-op
    }
    async reduceBatchSize(newSize) {
        console.log(`📉 Reducing batch size to ${newSize} for better performance`);
        // This would integrate with campaign system batch processing
    }
    async skipNonCriticalRules() {
        console.log('⚡ Temporarily skipping non-critical rules for performance');
        // This would create a temporary ESLint config with reduced rules
    }
    async emergencyStop() {
        console.log('🛑 Emergency stop triggered - halting linting operations');
        // This would stop any running linting campaigns
    }
    // Helper methods
    loadConfiguration() {
        try {
            if ((0, fs_1.existsSync)(this.configFile)) {
                return JSON.parse((0, fs_1.readFileSync)(this.configFile, 'utf8'));
            }
        }
        catch (error) {
            console.warn('Error loading alerting configuration:', error);
        }
        // Return default configuration
        return {
            enabled: true,
            channels: [
                {
                    type: 'console',
                    config: {},
                    severityFilter: ['warning', 'error', 'critical'],
                },
                {
                    type: 'file',
                    config: { file: '.kiro/metrics/alerts.log' },
                    severityFilter: ['error', 'critical'],
                },
                {
                    type: 'kiro',
                    config: {},
                    severityFilter: ['critical'],
                },
            ],
            regressionDetection: {
                enabled: true,
                sensitivity: 'medium',
                cooldownPeriod: 15, // 15 minutes
            },
            performanceMonitoring: {
                enabled: true,
                thresholds: [
                    {
                        metric: 'duration',
                        threshold: 30000,
                        severity: 'warning',
                        message: 'Linting duration exceeds 30 seconds',
                    },
                    {
                        metric: 'memory',
                        threshold: 512,
                        severity: 'warning',
                        message: 'Memory usage exceeds 512MB',
                    },
                    {
                        metric: 'cacheHitRate',
                        threshold: 0.5,
                        severity: 'warning',
                        message: 'Cache hit rate below 50%',
                    },
                ],
            },
            autoResponse: {
                enabled: true,
                actions: [
                    {
                        trigger: 'performance_degradation',
                        action: 'enableCache',
                        parameters: {},
                    },
                    {
                        trigger: 'memory_exceeded',
                        action: 'reduceBatchSize',
                        parameters: { newSize: 10 },
                    },
                ],
            },
        };
    }
    loadSuppressions() {
        try {
            if ((0, fs_1.existsSync)(this.suppressionFile)) {
                const suppressions = JSON.parse((0, fs_1.readFileSync)(this.suppressionFile, 'utf8'));
                this.suppressedAlerts = new Set(suppressions);
            }
        }
        catch (error) {
            console.warn('Error loading alert suppressions:', error);
        }
    }
    updateAlertHistory(alert) {
        this.lastAlertTime.set(alert.metric, alert.timestamp);
        // Store in history file
        try {
            const history = this.loadAlertHistory();
            history.alerts.push(alert);
            // Keep only last 1000 alerts
            if (history.alerts.length > 1000) {
                history.alerts.splice(0, history.alerts.length - 1000);
            }
            (0, fs_1.writeFileSync)(this.historyFile, JSON.stringify(history, null, 2));
        }
        catch (error) {
            console.error('Error updating alert history:', error);
        }
    }
    updatePerformanceHistory(event) {
        try {
            const history = this.loadAlertHistory();
            history.performanceEvents.push(event);
            // Keep only last 500 performance events
            if (history.performanceEvents.length > 500) {
                history.performanceEvents.splice(0, history.performanceEvents.length - 500);
            }
            (0, fs_1.writeFileSync)(this.historyFile, JSON.stringify(history, null, 2));
        }
        catch (error) {
            console.error('Error updating performance history:', error);
        }
    }
    loadAlertHistory() {
        try {
            if ((0, fs_1.existsSync)(this.historyFile)) {
                return JSON.parse((0, fs_1.readFileSync)(this.historyFile, 'utf8'));
            }
        }
        catch (error) {
            console.warn('Error loading alert history:', error);
        }
        return {
            alerts: [],
            suppressedAlerts: [],
            resolvedAlerts: [],
            performanceEvents: [],
        };
    }
    getPerformanceMetricValue(metrics, metric) {
        switch (metric) {
            case 'duration':
                return metrics.performanceMetrics.lintingDuration;
            case 'memory':
                return metrics.performanceMetrics.memoryUsage;
            case 'cacheHitRate':
                return metrics.performanceMetrics.cacheHitRate;
            case 'filesPerSecond':
                return (metrics.performanceMetrics.filesProcessed /
                    (metrics.performanceMetrics.lintingDuration / 1000));
            default:
                return 0;
        }
    }
    isThresholdExceeded(value, threshold) {
        if (threshold.metric === 'cacheHitRate') {
            return value < threshold.threshold; // Cache hit rate should be above threshold
        }
        return value > threshold.threshold; // Other metrics should be below threshold
    }
    calculateImpact(severity) {
        switch (severity) {
            case 'critical':
                return 'high';
            case 'error':
                return 'medium';
            default:
                return 'low';
        }
    }
    shouldTriggerAction(action, alerts, events) {
        switch (action.trigger) {
            case 'performance_degradation':
                return events.some(e => e.type === 'threshold_exceeded' && e.impact === 'high');
            case 'memory_exceeded':
                return events.some(e => e.metric === 'memory' && e.type === 'threshold_exceeded');
            case 'critical_alert':
                return alerts.some(a => a.severity === 'critical');
            default:
                return false;
        }
    }
    getSeverityIcon(severity) {
        switch (severity) {
            case 'critical':
                return '🚨';
            case 'error':
                return '❌';
            case 'warning':
                return '⚠️';
            case 'info':
                return 'ℹ️';
            default:
                return '📋';
        }
    }
}
exports.LintingAlertingSystem = LintingAlertingSystem;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,