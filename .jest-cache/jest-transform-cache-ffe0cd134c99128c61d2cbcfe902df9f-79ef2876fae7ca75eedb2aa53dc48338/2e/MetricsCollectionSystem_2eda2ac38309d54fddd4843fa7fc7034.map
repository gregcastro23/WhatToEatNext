{"file":"/Users/GregCastro/Desktop/WhatToEatNext/backups/first-wave-2025-08-11T05-19-26-813Z/src/services/campaign/MetricsCollectionSystem.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/backups/first-wave-2025-08-11T05-19-26-813Z/src/services/campaign/MetricsCollectionSystem.ts"],"sourcesContent":["/**\n * Enhanced Metrics Collection System\n * Perfect Codebase Campaign - Real-time Comprehensive Metrics\n * Requirements: 6.1, 6.2, 6.3\n */\n\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport { ProgressMetrics, ErrorCategory, ValidationResult } from '../../types/campaign';\n\nexport interface DetailedMetrics extends ProgressMetrics {\n  timestamp: Date;\n  errorBreakdown: Record<string, number>;\n  warningBreakdown: Record<string, number>;\n  buildMetrics: BuildMetrics;\n  resourceMetrics: ResourceMetrics;\n  trendData: TrendData;\n}\n\nexport interface BuildMetrics {\n  buildTime: number;\n  bundleSize: number;\n  cacheHitRate: number;\n  memoryUsage: number;\n  cpuUsage: number;\n  diskUsage: number;\n  compilationSpeed: number; // files per second\n}\n\nexport interface ResourceMetrics {\n  nodeMemoryUsage: NodeJS.MemoryUsage;\n  systemMemory: {\n    total: number;\n    free: number;\n    used: number;\n    percentage: number;\n  };\n  diskSpace: {\n    total: number;\n    free: number;\n    used: number;\n    percentage: number;\n  };\n}\n\nexport interface TrendData {\n  errorReductionRate: number; // errors reduced per hour\n  warningReductionRate: number; // warnings reduced per hour\n  buildTimeImprovement: number; // seconds improved per hour\n  systemGrowthRate: number; // enterprise systems added per hour\n}\n\nexport interface MetricsSnapshot {\n  id: string;\n  timestamp: Date;\n  metrics: DetailedMetrics;\n  phase: string;\n  milestone?: string;\n  notes?: string;\n}\n\nexport class MetricsCollectionSystem {\n  private snapshots: MetricsSnapshot[] = [];\n  private collectionInterval: NodeJS.Timeout | null = null;\n  private isCollecting = false;\n\n  /**\n   * Start real-time metrics collection\n   */\n  startRealTimeCollection(intervalMs: number = 30000): void {\n    if (this.isCollecting) {\n      console.log('📊 Metrics collection already running');\n      return;\n    }\n\n    this.isCollecting = true;\n    console.log(`📊 Starting real-time metrics collection (interval: ${intervalMs}ms)`);\n\n    this.collectionInterval = setInterval(() => {\n      void (async () => {\n        try {\n          await this.collectSnapshot();\n        } catch (error) {\n          console.error(\n            '❌ Error during metrics collection:',\n            (error as Record<string, unknown>).message || 'Unknown error',\n          );\n        }\n      })();\n    }, intervalMs);\n\n    // Collect initial snapshot\n    this.collectSnapshot();\n  }\n\n  /**\n   * Stop real-time metrics collection\n   */\n  stopRealTimeCollection(): void {\n    if (this.collectionInterval) {\n      clearInterval(this.collectionInterval);\n      this.collectionInterval = null;\n    }\n    this.isCollecting = false;\n    console.log('📊 Stopped real-time metrics collection');\n  }\n\n  /**\n   * Collect comprehensive metrics snapshot\n   */\n  async collectSnapshot(\n    phase?: string,\n    milestone?: string,\n    notes?: string,\n  ): Promise<MetricsSnapshot> {\n    const timestamp = new Date();\n    const id = `snapshot_${timestamp.getTime()}`;\n\n    console.log('📊 Collecting metrics snapshot...');\n\n    const metrics = await this.collectDetailedMetrics();\n\n    const snapshot: MetricsSnapshot = {\n      id,\n      timestamp,\n      metrics,\n      phase: phase || 'unknown',\n      milestone,\n      notes,\n    };\n\n    this.snapshots.push(snapshot);\n\n    // Keep only recent snapshots to prevent memory issues\n    if (this.snapshots.length > 1000) {\n      this.snapshots = this.snapshots.slice(-500);\n    }\n\n    console.log(`📊 Snapshot collected: ${id}`);\n    return snapshot;\n  }\n\n  /**\n   * Collect detailed metrics with comprehensive analysis\n   */\n  async collectDetailedMetrics(): Promise<DetailedMetrics> {\n    const [\n      typeScriptMetrics,\n      lintingMetrics,\n      buildMetrics,\n      resourceMetrics,\n      enterpriseSystemCount,\n    ] = await Promise.all([\n      this.collectTypeScriptMetrics(),\n      this.collectLintingMetrics(),\n      this.collectBuildMetrics(),\n      this.collectResourceMetrics(),\n      this.getEnterpriseSystemCount(),\n    ]);\n\n    const trendData = this.calculateTrendData();\n\n    const detailedMetrics: DetailedMetrics = {\n      timestamp: new Date(),\n      typeScriptErrors: {\n        current: typeScriptMetrics.count,\n        target: 0,\n        reduction: Math.max(0, 86 - typeScriptMetrics.count),\n        percentage:\n          typeScriptMetrics.count >= 0\n            ? Math.round(((86 - typeScriptMetrics.count) / 86) * 100)\n            : 0,\n      },\n      lintingWarnings: {\n        current: lintingMetrics.count,\n        target: 0,\n        reduction: Math.max(0, 4506 - lintingMetrics.count),\n        percentage:\n          lintingMetrics.count >= 0 ? Math.round(((4506 - lintingMetrics.count) / 4506) * 100) : 0,\n      },\n      buildPerformance: {\n        currentTime: buildMetrics.buildTime,\n        targetTime: 10,\n        cacheHitRate: buildMetrics.cacheHitRate,\n        memoryUsage: buildMetrics.memoryUsage,\n      },\n      enterpriseSystems: {\n        current: enterpriseSystemCount,\n        target: 200,\n        transformedExports: Math.max(0, enterpriseSystemCount - 0),\n      },\n      errorBreakdown: typeScriptMetrics.breakdown,\n      warningBreakdown: lintingMetrics.breakdown,\n      buildMetrics,\n      resourceMetrics,\n      trendData,\n    };\n\n    return detailedMetrics;\n  }\n\n  /**\n   * Collect TypeScript error metrics with detailed breakdown\n   */\n  private async collectTypeScriptMetrics(): Promise<{\n    count: number;\n    breakdown: Record<string, number>;\n  }> {\n    try {\n      // Get total error count\n      const countOutput = execSync(\n        'yarn tsc --noEmit --skipLibCheck 2>&1 | grep -c \"error TS\" || echo \"0\"',\n        {\n          encoding: 'utf8',\n          stdio: 'pipe',\n        },\n      );\n\n      const count = parseInt(countOutput.trim()) || 0;\n\n      // Get detailed breakdown by error type\n      const breakdown: Record<string, number> = {};\n\n      if (count > 0) {\n        try {\n          const breakdownOutput = execSync(\n            \"yarn tsc --noEmit --skipLibCheck 2>&1 | grep -E \\\"error TS\\\" | sed 's/.*error //' | cut -d':' -f1 | sort | uniq -c | sort -nr\",\n            {\n              encoding: 'utf8',\n              stdio: 'pipe',\n            },\n          );\n\n          const lines = breakdownOutput\n            .trim()\n            .split('\\n')\n            .filter(line => line.trim());\n          for (const line of lines) {\n            const match = line.trim().match(/^\\s*(\\d+)\\s+(.+)$/);\n            if (match) {\n              const errorCount = parseInt(match[1]);\n              const errorType = match[2].trim();\n              breakdown[errorType] = errorCount;\n            }\n          }\n        } catch (error) {\n          console.warn(\n            'Could not get TypeScript error breakdown:',\n            (error as Record<string, unknown>).message || 'Unknown error',\n          );\n        }\n      }\n\n      return { count, breakdown };\n    } catch (error) {\n      console.warn(\n        'Could not collect TypeScript metrics:',\n        (error as Record<string, unknown>).message || 'Unknown error',\n      );\n      return { count: -1, breakdown: {} };\n    }\n  }\n\n  /**\n   * Collect linting warning metrics with categorized breakdown\n   */\n  private async collectLintingMetrics(): Promise<{\n    count: number;\n    breakdown: Record<string, number>;\n  }> {\n    try {\n      // Get total warning count\n      const countOutput = execSync('yarn lint 2>&1 | grep -c \"warning\" || echo \"0\"', {\n        encoding: 'utf8',\n        stdio: 'pipe',\n      });\n\n      const count = parseInt(countOutput.trim()) || 0;\n\n      // Get detailed breakdown by warning type\n      const breakdown: Record<string, number> = {};\n\n      if (count > 0) {\n        try {\n          const lintOutput = execSync('yarn lint 2>&1', {\n            encoding: 'utf8',\n            stdio: 'pipe',\n          });\n\n          const lines = lintOutput.split('\\n');\n          for (const line of lines) {\n            // Look for ESLint warning patterns\n            const warningMatch = line.match(\n              /warning\\s+(.+?)\\s+(@typescript-eslint\\/[\\w-]+|[\\w-]+)/,\n            );\n            if (warningMatch) {\n              const ruleType = warningMatch[2];\n              breakdown[ruleType] = (breakdown[ruleType] || 0) + 1;\n            }\n          }\n        } catch (error) {\n          console.warn(\n            'Could not get linting warning breakdown:',\n            (error as Record<string, unknown>).message || 'Unknown error',\n          );\n        }\n      }\n\n      return { count, breakdown };\n    } catch (error) {\n      console.warn(\n        'Could not collect linting metrics:',\n        (error as Record<string, unknown>).message || 'Unknown error',\n      );\n      return { count: -1, breakdown: {} };\n    }\n  }\n\n  /**\n   * Collect comprehensive build performance metrics\n   */\n  private async collectBuildMetrics(): Promise<BuildMetrics> {\n    const startTime = Date.now();\n    let buildTime = -1;\n    let bundleSize = 0;\n    let compilationSpeed = 0;\n\n    try {\n      // Measure build time\n      const buildStart = Date.now();\n      execSync('yarn build', {\n        encoding: 'utf8',\n        stdio: 'pipe',\n      });\n      buildTime = (Date.now() - buildStart) / 1000;\n\n      // Calculate compilation speed (rough estimate)\n      const sourceFiles = this.countSourceFiles();\n      compilationSpeed = sourceFiles / buildTime;\n    } catch (error) {\n      console.warn(\n        'Build failed during metrics collection:',\n        (error as Record<string, unknown>).message || 'Unknown error',\n      );\n    }\n\n    try {\n      // Get bundle size\n      bundleSize = await this.getBundleSize();\n    } catch (error) {\n      console.warn(\n        'Could not measure bundle size:',\n        (error as Record<string, unknown>).message || 'Unknown error',\n      );\n    }\n\n    return {\n      buildTime,\n      bundleSize,\n      cacheHitRate: await this.estimateCacheHitRate(),\n      memoryUsage: this.getMemoryUsage(),\n      cpuUsage: await this.getCpuUsage(),\n      diskUsage: await this.getDiskUsage(),\n      compilationSpeed,\n    };\n  }\n\n  /**\n   * Collect system resource metrics\n   */\n  private async collectResourceMetrics(): Promise<ResourceMetrics> {\n    const nodeMemoryUsage = process.memoryUsage();\n\n    return {\n      nodeMemoryUsage,\n      systemMemory: await this.getSystemMemory(),\n      diskSpace: await this.getDiskSpace(),\n    };\n  }\n\n  /**\n   * Calculate trend data based on historical snapshots\n   */\n  private calculateTrendData(): TrendData {\n    if (this.snapshots.length < 2) {\n      return {\n        errorReductionRate: 0,\n        warningReductionRate: 0,\n        buildTimeImprovement: 0,\n        systemGrowthRate: 0,\n      };\n    }\n\n    const recent = this.snapshots.slice(-10); // Last 10 snapshots\n    const timeSpanHours =\n      (recent[recent.length - 1].timestamp.getTime() - recent[0].timestamp.getTime()) /\n      (1000 * 60 * 60);\n\n    if (timeSpanHours === 0) {\n      return {\n        errorReductionRate: 0,\n        warningReductionRate: 0,\n        buildTimeImprovement: 0,\n        systemGrowthRate: 0,\n      };\n    }\n\n    const errorReduction =\n      recent[0].metrics.typeScriptErrors.current -\n      recent[recent.length - 1].metrics.typeScriptErrors.current;\n    const warningReduction =\n      recent[0].metrics.lintingWarnings.current -\n      recent[recent.length - 1].metrics.lintingWarnings.current;\n    const buildTimeImprovement =\n      recent[0].metrics.buildPerformance.currentTime -\n      recent[recent.length - 1].metrics.buildPerformance.currentTime;\n    const systemGrowth =\n      recent[recent.length - 1].metrics.enterpriseSystems.current -\n      recent[0].metrics.enterpriseSystems.current;\n\n    return {\n      errorReductionRate: errorReduction / timeSpanHours,\n      warningReductionRate: warningReduction / timeSpanHours,\n      buildTimeImprovement: buildTimeImprovement / timeSpanHours,\n      systemGrowthRate: systemGrowth / timeSpanHours,\n    };\n  }\n\n  /**\n   * Helper methods for metrics collection\n   */\n  private async getEnterpriseSystemCount(): Promise<number> {\n    try {\n      const output = execSync('grep -r \"INTELLIGENCE_SYSTEM\" src/ | wc -l', {\n        encoding: 'utf8',\n        stdio: 'pipe',\n      });\n      return parseInt(output.trim()) || 0;\n    } catch (error) {\n      return 0;\n    }\n  }\n\n  private async getBundleSize(): Promise<number> {\n    try {\n      const buildDirs = ['.next', 'dist', 'build'];\n      let totalSize = 0;\n\n      for (const dir of buildDirs) {\n        if (fs.existsSync(dir)) {\n          const output = execSync(`du -sk ${dir} | cut -f1`, {\n            encoding: 'utf8',\n            stdio: 'pipe',\n          });\n          totalSize += parseInt(output.trim()) || 0;\n        }\n      }\n\n      return totalSize;\n    } catch (error) {\n      return 0;\n    }\n  }\n\n  private async estimateCacheHitRate(): Promise<number> {\n    // This is a simplified estimation - in a real implementation,\n    // you'd integrate with the actual build system's cache metrics\n    return 0.8; // 80% default estimate\n  }\n\n  private getMemoryUsage(): number {\n    const memUsage = process.memoryUsage();\n    return Math.round(memUsage.heapUsed / 1024 / 1024);\n  }\n\n  private async getCpuUsage(): Promise<number> {\n    try {\n      const output = execSync('ps -o %cpu -p $$ | tail -1', {\n        encoding: 'utf8',\n        stdio: 'pipe',\n      });\n      return parseFloat(output.trim()) || 0;\n    } catch (error) {\n      return 0;\n    }\n  }\n\n  private async getDiskUsage(): Promise<number> {\n    try {\n      const output = execSync('du -sh . | cut -f1', {\n        encoding: 'utf8',\n        stdio: 'pipe',\n      });\n      // Convert to MB (rough estimation)\n      const sizeStr = output.trim();\n      if (sizeStr.includes('G')) {\n        return parseFloat(sizeStr) * 1024;\n      } else if (sizeStr.includes('M')) {\n        return parseFloat(sizeStr);\n      }\n      return 0;\n    } catch (error) {\n      return 0;\n    }\n  }\n\n  private countSourceFiles(): number {\n    try {\n      const output = execSync('find src -name \"*.ts\" -o -name \"*.tsx\" | wc -l', {\n        encoding: 'utf8',\n        stdio: 'pipe',\n      });\n      return parseInt(output.trim()) || 0;\n    } catch (error) {\n      return 0;\n    }\n  }\n\n  private async getSystemMemory(): Promise<ResourceMetrics['systemMemory']> {\n    try {\n      const output = execSync('free -m | grep Mem', {\n        encoding: 'utf8',\n        stdio: 'pipe',\n      });\n\n      const match = output.match(/Mem:\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)/);\n      if (match) {\n        const total = parseInt(match[1]);\n        const used = parseInt(match[2]);\n        const free = parseInt(match[3]);\n        return {\n          total,\n          used,\n          free,\n          percentage: Math.round((used / total) * 100),\n        };\n      }\n    } catch (error) {\n      // Fallback for non-Linux systems\n    }\n\n    return {\n      total: 0,\n      used: 0,\n      free: 0,\n      percentage: 0,\n    };\n  }\n\n  private async getDiskSpace(): Promise<ResourceMetrics['diskSpace']> {\n    try {\n      const output = execSync('df -h . | tail -1', {\n        encoding: 'utf8',\n        stdio: 'pipe',\n      });\n\n      const parts = output.trim().split(/\\s+/);\n      if (parts.length >= 4) {\n        const total = this.parseSize(parts[1]);\n        const used = this.parseSize(parts[2]);\n        const free = this.parseSize(parts[3]);\n\n        return {\n          total,\n          used,\n          free,\n          percentage: Math.round((used / total) * 100),\n        };\n      }\n    } catch (error) {\n      // Handle error\n    }\n\n    return {\n      total: 0,\n      used: 0,\n      free: 0,\n      percentage: 0,\n    };\n  }\n\n  private parseSize(sizeStr: string): number {\n    const num = parseFloat(sizeStr);\n    if (sizeStr.includes('G')) return num * 1024;\n    if (sizeStr.includes('M')) return num;\n    if (sizeStr.includes('K')) return num / 1024;\n    return num;\n  }\n\n  /**\n   * Export methods for external access\n   */\n  getSnapshots(): MetricsSnapshot[] {\n    return [...this.snapshots];\n  }\n\n  getLatestSnapshot(): MetricsSnapshot | null {\n    return this.snapshots.length > 0 ? this.snapshots[this.snapshots.length - 1] : null;\n  }\n\n  async exportSnapshots(filePath: string): Promise<void> {\n    const exportData = {\n      timestamp: new Date().toISOString(),\n      totalSnapshots: this.snapshots.length,\n      snapshots: this.snapshots,\n      summary: {\n        collectionPeriod:\n          this.snapshots.length > 0\n            ? {\n                start: this.snapshots[0].timestamp,\n                end: this.snapshots[this.snapshots.length - 1].timestamp,\n              }\n            : null,\n        trends: this.calculateTrendData(),\n      },\n    };\n\n    fs.writeFileSync(filePath, JSON.stringify(exportData, null, 2));\n    console.log(`📊 Metrics snapshots exported to: ${filePath}`);\n  }\n\n  clearSnapshots(): void {\n    this.snapshots = [];\n    console.log('📊 Metrics snapshots cleared');\n  }\n}\n"],"version":3}