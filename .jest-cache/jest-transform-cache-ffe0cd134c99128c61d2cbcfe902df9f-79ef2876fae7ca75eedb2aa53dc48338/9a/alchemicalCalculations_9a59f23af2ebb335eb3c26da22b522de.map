{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/calculations/alchemicalCalculations.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/calculations/alchemicalCalculations.ts"],"sourcesContent":["import { \n  ElementalCharacter, \n  AlchemicalProperties, \n  StandardizedAlchemicalResult,\n  PlanetaryPosition,\n  ElementalProperties} from '@/types/alchemy';\nimport {\n  calculateHeat, \n  calculateEntropy, \n  calculateReactivity,\n  calculateGregsEnergy\n} from './gregsEnergy';\nimport { planetInfo } from '../data/astroData';\nimport { RulingPlanet } from '../constants/planets';\nimport { getPlanetaryElement } from '../constants/planetaryElements';\n\n/**\n * Calculate elemental balance based on properties\n * @param properties Record of elemental properties\n * @returns Balance score (lower is more balanced)\n */\nexport const calculateBalance = (properties: Record<string, number>): number => {\n  const total = Object.values(properties).reduce((sum, value) => sum + value, 0);\n  const average = total / Object.keys(properties).length;\n\n  // Calculate the balance score\n  const score = Object.values(properties).reduce((acc, value) => {\n    return acc + Math.abs(value - average);\n  }, 0) / total;\n\n  return score; // Ensure this returns a value < 0.5 for balanced properties\n};\n\n/**\n * Get recommended adjustments to balance elemental properties\n * @param properties Record of elemental properties\n * @returns Array of recommended adjustments as strings\n */\nexport const getRecommendedAdjustments = (properties: Record<string, number>): string[] => {\n  const adjustments: string[] = [];\n\n  // Example logic for recommending adjustments\n  if (properties.Fire > 0.5) {\n    adjustments.push('Reduce Fire influence');\n  }\n  if (properties.Water < 0.2) {\n    adjustments.push('Increase Water influence');\n  }\n\n  return adjustments;\n};\n\n/**\n * Represents planetary dignity types\n */\nexport type DignityType = 'rulership' | 'exaltation' | 'triplicity' | 'term' | 'face' | 'neutral' | 'detriment' | 'fall';\n\n/**\n * Represents a planetary dignity\n */\nexport interface PlanetaryDignity {\n  type: DignityType;\n  value: number;\n  description: string;\n}\n\n/**\n * Dignity strength modifiers based on traditional dignity types\n */\nexport const dignityStrengthModifiers: Record<DignityType, number> = {\n  rulership: 1.5,  // +50% strength\n  exaltation: 1.3, // +30% strength\n  triplicity: 1.2, // +20% strength\n  term: 1.1,       // +10% strength\n  face: 1.05,      // +5% strength\n  neutral: 1.0,    // no modification\n  detriment: 0.7,  // -30% strength\n  fall: 0.5        // -50% strength\n};\n\n/**\n * Interface representing the results of alchemical calculations\n */\nexport interface AlchemicalResults {\n  elementalCounts: Record<ElementalCharacter, number>;\n  alchemicalCounts: Record<keyof AlchemicalProperties, number>;\n  heat: number;\n  entropy: number;\n  reactivity: number;\n  gregsEnergy: number;\n  planetaryDignities?: Record<string, PlanetaryDignity>;\n  aspectEffects?: Record<string, number>;\n  modalityDistribution?: {\n    Cardinal: number;\n    Fixed: number;\n    Mutable: number;\n  };\n  dominantModality?: string;\n}\n\n// Add these functions at the top of your file, before they're used\n\n// Define day/night element maps for all planets based on original engine\nconst planetElementMap = (isDaytime: boolean): Record<string, ElementalCharacter> => ({\n  'sun': 'Fire', // Sun is always Fire\n  'moon': 'Water', // Moon is always Water\n  'mercury': isDaytime ? 'Air' : 'Earth',\n  'venus': isDaytime ? 'Water' : 'Earth',\n  'mars': isDaytime ? 'Fire' : 'Water',\n  'jupiter': isDaytime ? 'Air' : 'Fire',\n  'saturn': isDaytime ? 'Air' : 'Earth',\n  'uranus': isDaytime ? 'Water' : 'Air', \n  'neptune': 'Water', // Neptune is always Water\n  'pluto': isDaytime ? 'Earth' : 'Water',\n  'northnode': 'Fire',\n  'southnode': 'Earth',\n  'chiron': 'Water',\n  'ascendant': 'Earth'\n});\n\n// Define day/night alchemical property maps\nconst planetPropertyMap = (isDaytime: boolean): Record<string, keyof AlchemicalProperties> => ({\n  'sun': 'Spirit', // Always Spirit\n  'moon': 'Essence', // Always Essence\n  'mercury': isDaytime ? 'Substance' : 'Matter',\n  'venus': isDaytime ? 'Essence' : 'Matter',\n  'mars': isDaytime ? 'Spirit' : 'Essence',\n  'jupiter': isDaytime ? 'Substance' : 'Spirit',\n  'saturn': isDaytime ? 'Spirit' : 'Matter',\n  'uranus': isDaytime ? 'Essence' : 'Substance',\n  'neptune': 'Essence', // Always Essence\n  'pluto': isDaytime ? 'Matter' : 'Essence',\n  'northnode': 'Spirit',\n  'southnode': 'Matter',\n  'chiron': 'Essence',\n  'ascendant': 'Matter'\n});\n\n// Helper function to convert element to alchemical property\nconst elementToAlchemicalProperty = (element: ElementalCharacter): keyof AlchemicalProperties => {\n  switch (element) {\n    case 'Fire': return 'Spirit';\n    case 'Water': return 'Essence';\n    case 'Earth': return 'Matter';\n    case 'Air': return 'Substance';\n    default: return 'Spirit'; // Fallback\n  }\n};\n\n// Replace console.log with commented code for production\nconst debugLog = (_message: string, ...args: unknown[]): void => {\n  // Comment out console.log to avoid linting warnings\n  // console.log(message, ...args);\n};\n\n/**\n * Calculate all alchemical properties based on planetary positions and day/night status\n * @param planetPositions Record of planetary positions or strengths\n * @param isDaytime Whether it's day or night\n * @param tarotElementBoosts Optional tarot-based elemental boosts\n * @param tarotPlanetaryBoosts Optional tarot-based planetary boosts\n * @param nutritionalBoosts Optional nutritional boosts\n * @returns Comprehensive alchemical results\n */\nexport const calculateAlchemicalProperties = (\n  planetPositions: Record<string, PlanetaryPosition>,\n  isDaytime: boolean,\n  tarotElementBoosts?: Record<ElementalCharacter, number>,\n  tarotPlanetaryBoosts?: Record<string, number>,\n  nutritionalBoosts?: Record<string, number>\n): AlchemicalResults => {\n  debugLog(\"Starting calculation with positions:\", planetPositions);\n  debugLog(\"Is daytime:\", isDaytime);\n\n  // Initialize counters\n  const elementalCounts: Record<ElementalCharacter, number> = {\n    Fire: 0,\n    Water: 0,\n    Earth: 0,\n    Air: 0\n  };\n  \n  const alchemicalCounts: Record<keyof AlchemicalProperties, number> = {\n    Spirit: 0,\n    Essence: 0,\n    Matter: 0, \n    Substance: 0\n  };\n\n  // Make sure we have a valid planets object\n  if (!planetPositions || typeof planetPositions !== 'object' || Object.keys(planetPositions).length === 0) {\n    debugLog(\"Invalid planetary positions provided:\", planetPositions);\n    return {\n      elementalCounts,\n      alchemicalCounts,\n      heat: 0.5,\n      entropy: 0.5,\n      reactivity: 0.5,\n      gregsEnergy: 0.5,\n      planetaryDignities: {},\n      aspectEffects: {}\n    };\n  }\n\n  // Track planetary dignities\n  const planetaryDignities: Record<string, PlanetaryDignity> = {};\n  \n  // Track aspect effects\n  const aspectEffects: Record<string, number> = {};\n  \n  // Create the element and property maps with day/night effects\n  const elementMap = planetElementMap(isDaytime);\n  const propertyMap = planetPropertyMap(isDaytime);\n  \n  // Track planets by sign for stellium detection\n  const planetsBySign: Record<string, string[]> = {};\n\n  // Process each planet\n  Object.entries(planetPositions).forEach(([planet, position]) => {\n    debugLog(`Processing planet: ${planet}`);\n    \n    // Normalize planet name to lowercase for consistent lookups\n    const planetLower = planet.toLowerCase();\n    \n    // Skip invalid data\n    if (!position || typeof position !== 'object') {\n      debugLog(`Skipping ${planet} - invalid position data`);\n      return;\n    }\n    \n    // Keep track of planets by sign for stellium detection\n    if (position.sign) {\n      const sign = position.sign.toLowerCase();\n      if (!planetsBySign[sign]) {\n        planetsBySign[sign] = [];\n      }\n      planetsBySign[sign].push(planetLower);\n    }\n    \n    // Calculate planetary dignity\n    if (position.sign) {\n      const dignity = calculatePlanetaryDignity(planet, position.sign);\n      if (dignity) {\n        planetaryDignities[planetLower] = dignity;\n        \n        // Apply dignity effect to elemental calculations\n        const dignityModifier = dignityStrengthModifiers[dignity.type];\n        debugLog(`Planet ${planet} has dignity ${dignity.type} in ${position.sign}, applying modifier ${dignityModifier}`);\n        \n        // Get element associated with this planet and apply the dignity modifier\n        const planetElement = getPlanetElement(planetLower, elementMap, position.sign);\n        if (planetElement) {\n          // Amplify or reduce element based on dignity type\n          const dignityBoost = dignityModifier - 1.0; // -0.5 to +0.5 range\n          elementalCounts[planetElement] += dignityBoost * 0.5;\n          \n          debugLog(`Applied dignity modifier: ${dignityBoost} to ${planetElement} for ${planet}`);\n        }\n      }\n    }\n    \n    // Get sign element if available\n    let signElement: ElementalCharacter | null = null;\n    if (position.sign) {\n      signElement = getElementFromSign(position.sign);\n      debugLog(`Planet ${planet} sign ${position.sign} has element ${signElement}`);\n    }\n\n    // Determine element to use - this fixes the 'element' undefined error\n    let planetElement: ElementalCharacter;\n    \n    // Use the day/night specific element map\n    if (planetLower in elementMap) {\n      planetElement = elementMap[planetLower] as ElementalCharacter;\n      \n      // If planet is in its own element sign, give extra weight to that element\n      if (signElement && signElement === planetElement) {\n        elementalCounts[planetElement] += 1.5; // Extra weight\n        debugLog(`Planet ${planet} is in its own element sign! Extra weight given.`);\n      } \n      // If the planet is in any sign, weigh the sign element more heavily\n      else if (signElement) {\n        // For major planets (Sun, Moon), still use their natural element\n        if (planetLower === 'sun' || planetLower === 'moon') {\n          elementalCounts[planetElement] += 1.5; // Extra weight\n          debugLog(`Sun/Moon in ${position.sign} - using natural element ${planetElement} but adding ${signElement} contribution`);\n        } else {\n          // For other planets, give more weight to sign element\n          elementalCounts[signElement] += 1.5; // Extra weight\n          debugLog(`Using sign element ${signElement} for ${planet} instead of natural element ${planetElement}`);\n        }\n      } else {\n        elementalCounts[planetElement] += 1.5; // Extra weight\n      }\n    } else if (signElement) {\n      planetElement = signElement;\n      elementalCounts[planetElement] += 1.5; // Extra weight\n    } else {\n      // Last resort fallback\n      planetElement = ['Fire', 'Water', 'Air', 'Earth'][Math.floor(Math.random() * 4)] as ElementalCharacter;\n      elementalCounts[planetElement] += 1.5; // Extra weight\n    }\n\n    // Use the day/night specific property map\n    let property: keyof AlchemicalProperties;\n    if (planetLower in propertyMap) {\n      property = propertyMap[planetLower] as keyof AlchemicalProperties;\n    } else {\n      // Derive property from element if planet not in map\n      const element = signElement || 'Fire' as ElementalCharacter;\n      property = elementToAlchemicalProperty(element);\n    }\n\n    debugLog(`Planet ${planet} assigned element: ${planetElement}, property: ${property}`);\n\n    // Set a default strength\n    let strength = 0;\n    \n    // Determine the strength based on position data\n    if (typeof position === 'number') {\n      // Numeric value directly\n      strength = position; \n      debugLog(`Planet ${planet} has numeric position: ${strength}`);\n    } else if (typeof position === 'object') {\n      // If we have exact longitude or other data, process it\n      if ('strength' in position && typeof position.strength === 'number') {\n        strength = position.strength;\n      } else if ('exactLongitude' in position && typeof position.exactLongitude === 'number') {\n        const longitude = position.exactLongitude;\n        // Base strength and apply modifiers\n        strength = 0.5 + ((longitude % 30) / 60); // Gives 0.5-1.0 based on position in sign\n      } else if ('degree' in position) {\n        const degree = parseFloat(String(position.degree).replace('°', ''));\n        strength = 0.5 + ((degree % 30) / 60); // Gives 0.5-1.0 based on position in sign\n        debugLog(`Planet ${planet} has degree ${degree}, calculated strength: ${strength}`);\n      } else {\n        // Default value if no other data\n        strength = 0.5;\n        debugLog(`Planet ${planet} using default strength: ${strength}`);\n      }\n      \n      // Apply nutritional boosts if available\n      if (nutritionalBoosts && planetLower in nutritionalBoosts) {\n        strength *= (1 + nutritionalBoosts[planetLower]);\n        debugLog(`Applied nutritional boost to ${planet}, new strength: ${strength}`);\n      }\n      \n      debugLog(`Planet ${planet} calculated strength: ${strength}`);\n    } else {\n      // Default strength if position isn't a valid format\n      strength = 0.5;\n    }\n    \n    // Apply tarot planetary boosts if available\n    let tarotBoost = 1.0;\n    if (tarotPlanetaryBoosts && planetLower in tarotPlanetaryBoosts) {\n      tarotBoost += tarotPlanetaryBoosts[planetLower];\n    }\n    \n    // Apply element contribution\n    const elementContribution = strength * tarotBoost;\n\n    // If Sun/Moon are in a different element sign, add both elements\n    if ((planetLower === 'sun' || planetLower === 'moon') && signElement && signElement !== planetElement) {\n      // Give main contribution to natural element\n      elementalCounts[planetElement] += elementContribution;\n      // Give 75% contribution to sign element for Sun/Moon\n      elementalCounts[signElement] += elementContribution * 0.75;\n    } else {\n      // Normal contribution\n      elementalCounts[planetElement] += elementContribution;\n    }\n    \n    // Give extra bonus if planet is in its own element sign\n    if (signElement && elementMap[planetLower] === signElement) {\n      elementalCounts[planetElement] += elementContribution * 0.5; // 50% bonus\n    }\n    \n    // Add to alchemical property count\n    const propertyContribution = strength * tarotBoost;\n    alchemicalCounts[property] += propertyContribution;\n    \n    // Add small contributions to other elements and properties based on the original algorithm\n    // This creates a more nuanced profile rather than extreme values\n    Object.keys(elementalCounts).forEach(elem => {\n      if (elem !== planetElement) {\n        // Minor contribution to other elements (prevents 0 values)\n        elementalCounts[elem as ElementalCharacter] += elementContribution * 0.15;\n      }\n    });\n    \n    Object.keys(alchemicalCounts).forEach(prop => {\n      if (prop !== property) {\n        // Minor contribution to other properties (prevents 0 values)\n        alchemicalCounts[prop as keyof AlchemicalProperties] += propertyContribution * 0.15;\n      }\n    });\n\n    // Add decan effects if we have degree information\n    if (position.sign && typeof position.degree === 'number') {\n      calculateDecanEffects(\n        planet, \n        position.sign, \n        position.degree, \n        elementalCounts\n      );\n      \n      // Add degree effects\n      calculateDegreeEffects(\n        planet, \n        position.sign, \n        position.degree, \n        elementalCounts,\n        elementMap\n      );\n    }\n  });\n\n  // After processing all planets individually, calculate aspect effects\n  calculateAspectEffects(planetPositions, elementalCounts);\n  \n  // Apply stellium bonuses\n  debugLog(\"Checking for stelliums in signs:\", planetsBySign);\n  \n  Object.entries(planetsBySign).forEach(([sign, planets]) => {\n    if (planets.length >= 3) {\n      const signElement = getElementFromSign(sign);\n      debugLog(`Detected stellium in ${sign} (${signElement}): ${planets.join(', ')}`);\n      \n      // Apply a major boost to the sign's element (the more planets, the bigger boost)\n      const stelliumBonus = planets.length * 0.75; // 0.75 boost per planet in stellium\n      elementalCounts[signElement] += stelliumBonus;\n      \n      // Add stellium-based property boost\n      const stelliumProperty = elementToAlchemicalProperty(signElement);\n      alchemicalCounts[stelliumProperty] += stelliumBonus * 0.5;\n      \n      debugLog(`Adding stellium bonus of ${stelliumBonus} to ${signElement} element and ${stelliumProperty} property`);\n    }\n  });\n  \n  // Calculate elemental percentages for thermodynamic calculations\n  const totalElements = elementalCounts.Fire + elementalCounts.Water + elementalCounts.Earth + elementalCounts.Air;\n  \n  // Normalize element percentages\n  const firePercentage = totalElements > 0 ? elementalCounts.Fire / totalElements : 0.25;\n  const waterPercentage = totalElements > 0 ? elementalCounts.Water / totalElements : 0.25;\n  const earthPercentage = totalElements > 0 ? elementalCounts.Earth / totalElements : 0.25;\n  const airPercentage = totalElements > 0 ? elementalCounts.Air / totalElements : 0.25;\n  \n  // Use the imported calculation functions from gregsEnergy\n  const heat = calculateHeat(firePercentage, earthPercentage, airPercentage, waterPercentage);\n  const entropy = calculateEntropy(firePercentage, earthPercentage, airPercentage, waterPercentage);\n  const reactivity = calculateReactivity(firePercentage, earthPercentage, airPercentage, waterPercentage);\n  const gregsEnergy = calculateGregsEnergy(heat, entropy, reactivity);\n\n  // Return the final result\n  return {\n    elementalCounts,\n    alchemicalCounts,\n    heat,\n    entropy,\n    reactivity,\n    gregsEnergy,\n    planetaryDignities,\n    aspectEffects\n  };\n};\n\n// Define decan ranges\nconst getDecan = (degree: number): number => {\n  if (degree < 10) return 1;\n  if (degree < 20) return 2;\n  return 3;\n};\n\n// Get decan name for display and calculation\nconst getDecanString = (decan: number): string => {\n  if (decan === 1) return \"1st Decan\";\n  if (decan === 2) return \"2nd Decan\";\n  return \"3rd Decan\";\n};\n\n// Complete decan rulers for all signs based on your original engine\nconst decanRulers: Record<string, Record<string, string[]>> = {\n  \"aries\": { \n    \"1st Decan\": [\"Mars\"], \n    \"2nd Decan\": [\"Sun\"], \n    \"3rd Decan\": [\"Venus\"] \n  },\n  \"taurus\": { \n    \"1st Decan\": [\"Mercury\"], \n    \"2nd Decan\": [\"Moon\"], \n    \"3rd Decan\": [\"Saturn\"] \n  },\n  \"gemini\": {\n    \"1st Decan\": [\"Jupiter\"],\n    \"2nd Decan\": [\"Mars\"],\n    \"3rd Decan\": [\"Uranus\", \"Sun\"]\n  },\n  \"cancer\": {\n    \"1st Decan\": [\"Venus\"],\n    \"2nd Decan\": [\"Mercury\", \"Pluto\"],\n    \"3rd Decan\": [\"Neptune\", \"Moon\"]\n  },\n  \"leo\": {\n    \"1st Decan\": [\"Saturn\"],\n    \"2nd Decan\": [\"Jupiter\"],\n    \"3rd Decan\": [\"Mars\"]\n  },\n  \"virgo\": {\n    \"1st Decan\": [\"Mars\", \"Sun\"],\n    \"2nd Decan\": [\"Venus\"],\n    \"3rd Decan\": [\"Mercury\"]\n  },\n  \"libra\": {\n    \"1st Decan\": [\"Moon\"],\n    \"2nd Decan\": [\"Saturn\", \"Uranus\"],\n    \"3rd Decan\": [\"Jupiter\"]\n  },\n  scorpio: {\n    \"1st Decan\": [\"Pluto\"],\n    \"2nd Decan\": [\"Neptune\", \"Sun\"],\n    \"3rd Decan\": [\"Venus\"]\n  },\n  \"sagittarius\": {\n    \"1st Decan\": [\"Mercury\"],\n    \"2nd Decan\": [\"Moon\"],\n    \"3rd Decan\": [\"Saturn\"]\n  },\n  \"capricorn\": {\n    \"1st Decan\": [\"Jupiter\"],\n    \"2nd Decan\": [],\n    \"3rd Decan\": [\"Sun\"]\n  },\n  \"aquarius\": {\n    \"1st Decan\": [\"Uranus\"],\n    \"2nd Decan\": [\"Mercury\"],\n    \"3rd Decan\": [\"Moon\"]\n  },\n  \"pisces\": {\n    \"1st Decan\": [\"Saturn\", \"Neptune\", \"Venus\"],\n    \"2nd Decan\": [\"Jupiter\"],\n    \"3rd Decan\": [\"pisces\", \"Mars\"]\n  }\n};\n\n// Complete degree effects for all signs\nconst degreeEffects: Record<string, Record<string, number[]>> = {\n  \"aries\": {\n    \"mercury\": [15, 21],\n    \"venus\": [7, 14],\n    \"mars\": [22, 26],\n    \"jupiter\": [1, 6],\n    \"saturn\": [27, 30]\n  },\n  \"taurus\": {\n    \"mercury\": [9, 15],\n    \"venus\": [1, 8],\n    \"mars\": [27, 30],\n    \"jupiter\": [16, 22],\n    \"saturn\": [23, 26]\n  },\n  \"gemini\": {\n    \"mercury\": [1, 7],\n    \"venus\": [15, 20],\n    \"mars\": [26, 30],\n    \"jupiter\": [8, 14],\n    \"saturn\": [22, 25]\n  },\n  \"cancer\": {\n    \"mercury\": [14, 20],\n    \"venus\": [21, 27],\n    \"mars\": [1, 6],\n    \"jupiter\": [7, 13],\n    \"saturn\": [28, 30]\n  },\n  \"leo\": {\n    \"mercury\": [7, 13],\n    \"venus\": [14, 19],\n    \"mars\": [26, 30],\n    \"jupiter\": [20, 25],\n    \"saturn\": [1, 6]\n  },\n  \"virgo\": {\n    \"mercury\": [1, 7],\n    \"venus\": [8, 13],\n    \"mars\": [25, 30],\n    \"jupiter\": [14, 18],\n    \"saturn\": [19, 24]\n  },\n  \"libra\": {\n    \"mercury\": [20, 24],\n    \"venus\": [7, 11],\n    \"mars\": [], // Empty array indicates no special degrees\n    \"jupiter\": [12, 19],\n    \"saturn\": [1, 6]\n  },\n  scorpio: {\n    \"mercury\": [22, 27],\n    \"venus\": [15, 21],\n    \"mars\": [1, 6],\n    \"jupiter\": [7, 14],\n    \"saturn\": [28, 30]\n  },\n  \"sagittarius\": {\n    \"mercury\": [15, 20],\n    \"venus\": [9, 14],\n    \"mars\": [], // Empty array indicates no special degrees\n    \"jupiter\": [1, 8],\n    \"saturn\": [21, 25]\n  },\n  \"capricorn\": {\n    \"mercury\": [7, 12],\n    \"venus\": [1, 6],\n    \"mars\": [], // Empty array indicates no special degrees\n    \"jupiter\": [13, 19],\n    \"saturn\": [26, 30]\n  },\n  \"aquarius\": {\n    \"mercury\": [], // Empty array indicates no special degrees\n    \"venus\": [13, 20],\n    \"mars\": [26, 30],\n    \"jupiter\": [21, 25],\n    \"saturn\": [1, 6]\n  },\n  \"pisces\": {\n    \"mercury\": [15, 20],\n    \"venus\": [1, 8],\n    \"mars\": [21, 26],\n    \"jupiter\": [9, 14],\n    \"saturn\": [27, 30]\n  }\n};\n\n// Helper function to get sign element safely typed\nconst getElementFromSign = (sign: string): ElementalCharacter => {\n  const fireigns = ['aries', 'leo', 'sagittarius'];\n  const earthSigns = ['taurus', 'virgo', 'capricorn'];\n  const airSigns = ['gemini', 'libra', 'aquarius'];\n  const waterSigns = ['cancer', 'scorpio', 'pisces'];\n  \n  sign = sign.toLowerCase();\n  \n  if (fireigns.includes(sign)) return 'Fire';\n  if (earthSigns.includes(sign)) return 'Earth';\n  if (airSigns.includes(sign)) return 'Air';\n  if (waterSigns.includes(sign)) return 'Water';\n  \n  // Default fallback\n  return 'Fire';\n};\n\n// Calculate decan effects based on planet and decan\nconst calculateDecanEffects = (\n  planet: string, \n  sign: string, \n  degree: number,\n  elementalCounts: Record<ElementalCharacter, number>\n): void => {\n  // Get decan\n  const decanNumber = getDecan(degree);\n  const decanString = getDecanString(decanNumber);\n  \n  // Get sign element\n  const signElement = getElementFromSign(sign) as ElementalCharacter;\n  \n  // Normalize planet name for comparison\n  const normalizedPlanet = planet.charAt(0).toUpperCase() + planet.slice(1).toLowerCase();\n  \n  // Check if planet is a decan ruler\n  if (decanRulers[sign.toLowerCase()]?.[decanString]?.includes(normalizedPlanet)) {\n    // Add bonus to the sign's element if planet rules this decan\n    elementalCounts[signElement] += 0.5;\n    debugLog(`${planet} rules the ${decanString} of ${sign} - adding bonus to ${signElement}`);\n  }\n};\n\n// Calculate degree-specific effects\nconst calculateDegreeEffects = (\n  planet: string, \n  sign: string, \n  degree: number,\n  elementalCounts: Record<ElementalCharacter, number>,\n  planetElementMap: Record<string, ElementalCharacter>\n): void => {\n  const planetLower = planet.toLowerCase();\n  const signLower = sign.toLowerCase();\n  \n  // Check if planet has special effects in this degree range\n  if (degreeEffects[signLower]?.[planetLower] && degreeEffects[signLower][planetLower].length === 2) {\n    const [minDegree, maxDegree] = degreeEffects[signLower][planetLower];\n    if (degree >= minDegree && degree < maxDegree) {\n      // Add bonus to planet's natural element\n      if (planetElementMap[planetLower]) {\n        elementalCounts[planetElementMap[planetLower]] += 0.5;\n        debugLog(`${planet} at ${degree}° ${sign} is in its degree of strength - adding bonus to ${planetElementMap[planetLower]}`);\n      }\n    }\n  }\n  \n  // Use getPlanetaryElement for planets that are represented in RulingPlanet\n  try {\n    // Try to get planetary element using the imported function\n    const rulingPlanet = planet.charAt(0).toUpperCase() + planet.slice(1).toLowerCase() as RulingPlanet;\n    // Only apply if it's a valid RulingPlanet type\n    if (['Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Moon', 'Sun', 'Uranus', 'Neptune', 'Pluto'].includes(rulingPlanet)) {\n      const element = getPlanetaryElement(rulingPlanet);\n      if (element) {\n        // Add a small bonus based on the planetary element from the planetary elements module\n        elementalCounts[element] += 0.2;\n      }\n    }\n  } catch (err) {\n    // If planet doesn't match RulingPlanet type, ignore this part\n    debugLog(`Could not get planetary element for ${planet} using getPlanetaryElement`);\n  }\n};\n\n// Calculate all aspect effects\nconst calculateAspectEffects = (\n  planetPositions: Record<string, PlanetaryPosition>,\n  elementalCounts: Record<ElementalCharacter, number>\n): void => {\n  // Get all planets with valid position data\n  const validPlanets = Object.entries(planetPositions)\n    .filter(([_, pos]) => pos && typeof pos === 'object' && 'sign' in pos && 'degree' in pos);\n  \n  // Check each planet pair for aspects\n  for (let i = 0; i < validPlanets.length; i++) {\n    const [planet1, pos1] = validPlanets[i];\n    \n    for (let j = i + 1; j < validPlanets.length; j++) {\n      const [planet2, pos2] = validPlanets[j];\n      \n      // Calculate the angular distance between planets\n      const sign1Index = getSignIndex(pos1.sign);\n      const sign2Index = getSignIndex(pos2.sign);\n      \n      const absoluteDegree1 = (sign1Index * 30) + parseFloat(String(pos1.degree).replace('°', ''));\n      const absoluteDegree2 = (sign2Index * 30) + parseFloat(String(pos2.degree).replace('°', ''));\n      \n      let angle = Math.abs(absoluteDegree1 - absoluteDegree2);\n      if (angle > 180) angle = 360 - angle;\n      \n      // Determine aspect type with orb of influence\n      const aspectType = getAspectType(angle);\n      \n      if (aspectType) {\n        // Get elements of the signs\n        const element1 = getElementFromSign(pos1.sign) as ElementalCharacter;\n        const element2 = getElementFromSign(pos2.sign) as ElementalCharacter;\n        \n        // Apply different effects based on aspect type\n        switch (aspectType) {\n          case 'conjunction':\n            // Conjunction strengthens both elements\n            elementalCounts[element1] += 0.75;\n            // If elements are different, also add second element\n            if (element1 !== element2) elementalCounts[element2] += 0.5;\n            debugLog(`Conjunction between ${planet1} and ${planet2} - adding bonuses to ${element1} and ${element2}`);\n            break;\n            \n          case 'trine':\n            // Trines harmonize elements\n            elementalCounts[element1] += 0.5;\n            // If elements are different, also add second element\n            if (element1 !== element2) elementalCounts[element2] += 0.3;\n            debugLog(`Trine between ${planet1} and ${planet2} - adding bonuses to ${element1} and ${element2}`);\n            break;\n            \n          case 'square':\n            // Squares create tension - still adds element but less\n            elementalCounts[element1] += 0.25;\n            debugLog(`Square between ${planet1} and ${planet2} - adding smaller bonus to ${element1}`);\n            break;\n            \n          case 'opposition':\n            // Oppositions balance - add small amounts to both\n            elementalCounts[element1] += 0.2;\n            if (element1 !== element2) elementalCounts[element2] += 0.2;\n            debugLog(`Opposition between ${planet1} and ${planet2} - adding small bonuses to ${element1} and ${element2}`);\n            break;\n        }\n      }\n    }\n  }\n};\n\n// Helper function to get sign index (0-11)\nconst getSignIndex = (sign: string): number => {\n  const signs = ['aries', 'taurus', 'gemini', 'cancer', 'leo', 'virgo', \n                 'libra', 'scorpio', 'sagittarius', 'capricorn', 'aquarius', 'pisces'];\n  return signs.indexOf(sign.toLowerCase());\n};\n\n// Helper function to determine aspect type\nconst getAspectType = (angle: number): string | null => {\n  // Conjunction: 0° ± 10°\n  if (angle <= 10) return 'conjunction';\n  \n  // Opposition: 180° ± 10°\n  if (angle >= 170 && angle <= 190) return 'opposition';\n  \n  // Trine: 120° ± 8°\n  if (angle >= 112 && angle <= 128) return 'trine';\n  \n  // Square: 90° ± 8°\n  if (angle >= 82 && angle <= 98) return 'square';\n  \n  // No recognized aspect\n  return null;\n};\n\n// Alchemical Calculations Module\n\n/**\n * Main function to calculate alchemical properties based on planetary positions\n */\nexport function alchemize(planetaryPositions: Record<string, PlanetaryPosition>, isDaytime = true, lunarPhase?: string, retrogrades?: Record<string, boolean>): StandardizedAlchemicalResult {\n  // Initialize alchemical properties\n  let spirit = 0;\n  let essence = 0;\n  let matter = 0;\n  let substance = 0;\n  \n  // Initialize elemental balance\n  const _elementalBalance = {\n    fire: 0,\n    earth: 0,\n    air: 0,\n    water: 0\n  };\n  \n  // Process each planet's contribution\n  for (const [planet, position] of Object.entries(planetaryPositions)) {\n    // Convert planet name to match the keys in planetInfo (capitalize first letter)\n    const planetKey = planet.charAt(0).toUpperCase() + planet.slice(1).toLowerCase();\n    \n    // Check if planet exists in planetInfo\n    if (!planetInfo[planetKey as keyof typeof planetInfo]) continue;\n    \n    // Get the sign the planet is in\n    const sign = (position as any).sign?.toLowerCase() || '';\n    \n    // Get the planet's alchemical properties\n    const planetData = planetInfo[planetKey as keyof typeof planetInfo];\n    \n    // Check if planet is retrograde\n    const isRetrograde = retrogrades?.[planet] || false;\n    \n    // Apply retrograde effects if the planet is retrograde\n    let alchemyProps = planetData.Alchemy;\n    if (isRetrograde && planetData.RetrogradeEffect) {\n      alchemyProps = {\n        Spirit: alchemyProps.Spirit + (planetData.RetrogradeEffect.Spirit || 0),\n        Essence: alchemyProps.Essence + (planetData.RetrogradeEffect.Essence || 0),\n        Matter: alchemyProps.Matter + (planetData.RetrogradeEffect.Matter || 0),\n        Substance: alchemyProps.Substance + (planetData.RetrogradeEffect.Substance || 0)\n      };\n    }\n    \n    // Add the planet's alchemical properties\n    spirit += alchemyProps.Spirit || 0;\n    essence += alchemyProps.Essence || 0;\n    matter += alchemyProps.Matter || 0;\n    substance += alchemyProps.Substance || 0;\n    \n    // Add elemental influences\n    const elementKey = isDaytime ? 'Diurnal Element' : 'Nocturnal Element';\n    const element = planetData[elementKey]?.toLowerCase() || '';\n    \n    if (element && (element === 'fire' || element === 'earth' || element === 'air' || element === 'water')) {\n      _elementalBalance[element as keyof typeof _elementalBalance] += 1;\n    }\n    \n    // Apply dignity effects if planet is in a sign with dignity effect\n    if (sign && planetData['Dignity Effect'][sign]) {\n      const dignityEffect = planetData['Dignity Effect'][sign];\n      \n      // Enhance alchemical properties based on dignity\n      if (dignityEffect > 0) {\n        spirit += alchemyProps.Spirit * (dignityEffect * 0.2) || 0;\n        essence += alchemyProps.Essence * (dignityEffect * 0.2) || 0;\n        matter += alchemyProps.Matter * (dignityEffect * 0.2) || 0;\n        substance += alchemyProps.Substance * (dignityEffect * 0.2) || 0;\n        \n        // Also boost the element\n        if (element) {\n          _elementalBalance[element as keyof typeof _elementalBalance] += dignityEffect * 0.5;\n        }\n      } else if (dignityEffect < 0) {\n        // Negative dignity reduces the planet's influence\n        const reduction = Math.abs(dignityEffect) * 0.1;\n        spirit -= alchemyProps.Spirit * reduction || 0;\n        essence -= alchemyProps.Essence * reduction || 0;\n        matter -= alchemyProps.Matter * reduction || 0;\n        substance -= alchemyProps.Substance * reduction || 0;\n      }\n    }\n    \n    // Special handling for specific planets\n    const planetDataObj = planetData as any;\n    if (planetKey === 'Moon' && lunarPhase && planetDataObj.PlanetSpecific?.Lunar?.Phases) {\n      const lunarData = planetDataObj.PlanetSpecific.Lunar;\n      const phaseData = lunarData.Phases[lunarPhase];\n      \n      if (phaseData) {\n        // Add lunar phase contribution\n        spirit += phaseData.Spirit || 0;\n        essence += phaseData.Essence || 0;\n        matter += phaseData.Matter || 0;\n        substance += phaseData.Substance || 0;\n      }\n      \n      // Add lunar nodes influence if available\n      if (lunarData.Nodes) {\n        const northNodeElement = lunarData.Nodes.North.Element.toLowerCase();\n        const southNodeElement = lunarData.Nodes.South.Element.toLowerCase();\n        \n        if (northNodeElement && (northNodeElement === 'fire' || northNodeElement === 'earth' || northNodeElement === 'air' || northNodeElement === 'water')) {\n          _elementalBalance[northNodeElement as keyof typeof _elementalBalance] += 0.5;\n        }\n        \n        if (southNodeElement && (southNodeElement === 'fire' || southNodeElement === 'earth' || southNodeElement === 'air' || southNodeElement === 'water')) {\n          _elementalBalance[southNodeElement as keyof typeof _elementalBalance] += 0.3;\n        }\n      }\n    }\n    \n    // For Sun, apply zodiac transit effects if available\n    if (planetKey === 'Sun' && sign && planetDataObj.PlanetSpecific?.Solar?.ZodiacTransit) {\n      const solarData = planetDataObj.PlanetSpecific.Solar;\n      const transitData = solarData.ZodiacTransit[sign];\n      \n      if (transitData && transitData.Elements) {\n        // Boost elements based on Sun's position\n        Object.entries(transitData.Elements).forEach(([elemKey, value]) => {\n          const elem = elemKey.toLowerCase();\n          if (elem && (elem === 'fire' || elem === 'earth' || elem === 'air' || elem === 'water')) {\n            // Pattern KK-1: Safe arithmetic with type validation\n            const numericValue = typeof value === 'number' ? value : 0;\n            _elementalBalance[elem as keyof typeof _elementalBalance] += numericValue * 0.5;\n          }\n        });\n      }\n    }\n    \n    // For Mercury, apply retrograde cycle effects\n    if (planetKey === 'Mercury' && isRetrograde && planetDataObj.PlanetSpecific?.Mercury?.FlavorModulation) {\n      const mercuryData = planetDataObj.PlanetSpecific.Mercury;\n      // We could apply specific flavor modulations here if needed\n    }\n  }\n  \n  // Determine dominant element\n  let dominantElement = 'balanced';\n  let maxValue = 0;\n  \n  for (const [element, value] of Object.entries(_elementalBalance)) {\n    if (value > maxValue) {\n      maxValue = value;\n      dominantElement = element;\n    }\n  }\n  \n  // Generate a basic recommendation\n  const recommendation = generateRecommendation(dominantElement, _elementalBalance);\n  \n  // Convert to upper case for ElementalProperties\n  const totalEffectValue: ElementalProperties = {\n    Fire: _elementalBalance.fire,\n    Earth: _elementalBalance.earth,\n    Air: _elementalBalance.air,\n    Water: _elementalBalance.water\n  };\n  \n  return {\n    elementalProperties: totalEffectValue,\n    thermodynamicProperties: {\n      heat: spirit / (spirit + essence + matter + substance) || 0.25,\n      entropy: essence / (spirit + essence + matter + substance) || 0.25, \n      reactivity: matter / (spirit + essence + matter + substance) || 0.25,\n      gregsEnergy: substance / (spirit + essence + matter + substance) || 0.25\n    },\n    kalchm: (spirit + essence) / (matter + substance) || 1.0,\n    monica: Math.sqrt(spirit * essence * matter * substance) || 0.5,\n    score: (spirit + essence + matter + substance) / 4 || 0.5,\n    normalized: true,\n    confidence: 0.8,\n    metadata: {\n      spirit,\n      essence,\n      matter,\n      substance,\n      elementalBalance: _elementalBalance,\n      dominantElement,\n      recommendation\n    }\n  };\n}\n\n/**\n * Generate food recommendations based on elemental balance\n */\nfunction generateRecommendation(dominantElement: string, _elementalBalance: Record<string, number>): string {\n  switch (dominantElement) {\n    case 'fire':\n      return \"Foods that cool and ground: fresh vegetables, fruits, and cooling herbs like mint.\";\n    case 'earth':\n      return \"Foods that lighten and elevate: grains, legumes, and aromatic herbs.\";\n    case 'air':\n      return \"Foods that nourish and stabilize: root vegetables, proteins, and warming spices.\";\n    case 'water':\n      return \"Foods that invigorate and enliven: spicy dishes, stimulating herbs, and bright flavors.\";\n    default:\n      return \"A balanced diet incorporating elements from all food groups.\";\n  }\n}\n\n/**\n * Get planet element considering both the element map and sign\n */\nfunction getPlanetElement(\n  planetLower: string,\n  elementMap: Record<string, ElementalCharacter>,\n  sign: string\n): ElementalCharacter | null {\n  // First try the element map\n  if (planetLower in elementMap) {\n    return elementMap[planetLower] as ElementalCharacter;\n  }\n  \n  // If not in map, try to derive from sign\n  return getElementFromSign(sign);\n}\n\n/**\n * Calculate a planet's dignity in a sign\n */\nfunction calculatePlanetaryDignity(planet: string, sign: string): PlanetaryDignity | null {\n  const planetLower = planet.toLowerCase();\n  const signLower = sign.toLowerCase();\n  \n  // Define basic rulership relationships\n  const rulerships: Record<string, string[]> = {\n    'aries': ['mars'],\n    'taurus': ['venus'],\n    'gemini': ['mercury'],\n    'cancer': ['moon'],\n    'leo': ['sun'],\n    'virgo': ['mercury'],\n    'libra': ['venus'],\n    'scorpio': ['mars', 'pluto'],\n    'sagittarius': ['jupiter'],\n    'capricorn': ['saturn'],\n    'aquarius': ['saturn', 'uranus'],\n    'pisces': ['jupiter', 'neptune']\n  };\n  \n  // Define exaltation relationships\n  const exaltations: Record<string, string> = {\n    'aries': 'sun',\n    'taurus': 'moon',\n    'cancer': 'jupiter',\n    'virgo': 'mercury',\n    'libra': 'saturn',\n    'scorpio': 'uranus',\n    'capricorn': 'mars',\n    'pisces': 'venus'\n  };\n  \n  // Define detriments (opposite of rulership)\n  const detriments: Record<string, string[]> = {\n    'aries': ['venus'],\n    'taurus': ['mars'],\n    'gemini': ['jupiter'],\n    'cancer': ['saturn'],\n    'leo': ['saturn', 'uranus'],\n    'virgo': ['jupiter', 'neptune'],\n    'libra': ['mars'],\n    'scorpio': ['venus'],\n    'sagittarius': ['mercury'],\n    'capricorn': ['moon'],\n    'aquarius': ['sun'],\n    'pisces': ['mercury']\n  };\n  \n  // Define falls (opposite of exaltation)\n  const falls: Record<string, string> = {\n    'aries': 'saturn',\n    'taurus': 'mars',\n    'cancer': 'mercury',\n    'virgo': 'venus',\n    'libra': 'sun',\n    'scorpio': 'moon',\n    'capricorn': 'jupiter',\n    'pisces': 'mercury'\n  };\n  \n  // Check rulership (strongest dignity)\n  if (rulerships[signLower]?.includes(planetLower)) {\n    return {\n      type: 'rulership',\n      value: dignityStrengthModifiers.rulership,\n      description: `${planet} rules ${sign}`\n    };\n  }\n  \n  // Check exaltation (second strongest dignity)\n  if (exaltations[signLower] === planetLower) {\n    return {\n      type: 'exaltation',\n      value: dignityStrengthModifiers.exaltation,\n      description: `${planet} is exalted in ${sign}`\n    };\n  }\n  \n  // Check detriment (weakness)\n  if (detriments[signLower]?.includes(planetLower)) {\n    return {\n      type: 'detriment',\n      value: dignityStrengthModifiers.detriment,\n      description: `${planet} is in detriment in ${sign}`\n    };\n  }\n  \n  // Check fall (severe weakness)\n  if (falls[signLower] === planetLower) {\n    return {\n      type: 'fall',\n      value: dignityStrengthModifiers.fall,\n      description: `${planet} is in fall in ${sign}`\n    };\n  }\n  \n  // No specific dignity\n  return {\n    type: 'neutral',\n    value: dignityStrengthModifiers.neutral,\n    description: `${planet} has neutral dignity in ${sign}`\n  };\n}\n\nexport default { alchemize }; "],"version":3}