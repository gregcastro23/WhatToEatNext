{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/__tests__/naturalLanguageProcessor.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/__tests__/naturalLanguageProcessor.test.ts"],"sourcesContent":["import {\n  processNaturalLanguageQuery,\n  enhancedSearch,\n  applyFilters\n} from '../naturalLanguageProcessor';\n\ndescribe('naturalLanguageProcessor', () => {\n  describe('processNaturalLanguageQuery', () => {\n    it('extracts dietary restrictions from query', () => {\n      const result = processNaturalLanguageQuery('I want vegetarian pasta recipes');\n      \n      expect(result.extractedFilters.dietaryRestrictions).toContain('vegetarian');\n      expect(result.confidence).toBeGreaterThan(0.5);\n    });\n\n    it('extracts cuisine types from query', () => {\n      const result = processNaturalLanguageQuery('Show me Italian dishes');\n      \n      expect(result.extractedFilters.cuisineTypes).toContain('italian');\n      expect(result.confidence).toBeGreaterThan(0.5);\n    });\n\n    it('extracts difficulty level from query', () => {\n      const result = processNaturalLanguageQuery('Easy recipes for beginners');\n      \n      expect(result.extractedFilters.difficultyLevel).toContain('easy');\n      expect(result.confidence).toBeGreaterThan(0.5);\n    });\n\n    it('extracts cooking time from query', () => {\n      const result = processNaturalLanguageQuery('Quick 30 minute meals');\n      \n      expect(result.extractedFilters.cookingTime).toEqual({ min: 0, max: 30 });\n      expect(result.confidence).toBeGreaterThan(0.5);\n    });\n\n    it('extracts meal types from query', () => {\n      const result = processNaturalLanguageQuery('Breakfast ideas for tomorrow');\n      \n      expect(result.extractedFilters.mealTypes).toContain('breakfast');\n      expect(result.confidence).toBeGreaterThan(0.5);\n    });\n\n    it('extracts spiciness level from query', () => {\n      const result = processNaturalLanguageQuery('I want something spicy and hot');\n      \n      expect(result.extractedFilters.spiciness).toContain('hot');\n      expect(result.confidence).toBeGreaterThan(0.5);\n    });\n\n    it('handles complex queries with multiple filters', () => {\n      const result = processNaturalLanguageQuery('Easy vegetarian Italian dinner recipes under 30 minutes');\n      \n      expect(result.extractedFilters.difficultyLevel).toContain('easy');\n      expect(result.extractedFilters.dietaryRestrictions).toContain('vegetarian');\n      expect(result.extractedFilters.cuisineTypes).toContain('italian');\n      expect(result.extractedFilters.mealTypes).toContain('dinner');\n      expect(result.extractedFilters.cookingTime).toEqual({ min: 0, max: 30 });\n      expect(result.confidence).toBeGreaterThan(0.7);\n    });\n\n    it('provides suggestions for partial queries', () => {\n      const result = processNaturalLanguageQuery('spicy');\n      \n      expect(result.suggestions).toHaveLength(5);\n      expect(result.suggestions.some(s => s.toLowerCase().includes('spicy'))).toBe(true);\n    });\n\n    it('returns low confidence for unrecognized queries', () => {\n      const result = processNaturalLanguageQuery('xyz abc random text');\n      \n      expect(result.confidence).toBeLessThan(0.3);\n      expect(Object.keys(result.extractedFilters)).toHaveLength(0);\n    });\n  });\n\n  describe('enhancedSearch', () => {\n    const mockItems = [\n      { id: 1, name: 'Italian Pasta', description: 'Delicious pasta from Italy' },\n      { id: 2, name: 'Chinese Noodles', description: 'Traditional Chinese noodle dish' },\n      { id: 3, name: 'Japanese Ramen', description: 'Authentic ramen from Japan' },\n      { id: 4, name: 'Thai Pad Thai', description: 'Classic Thai stir-fried noodles' }\n    ];\n\n    it('performs exact match search', () => {\n      const results = enhancedSearch(mockItems, 'Italian', ['name', 'description']);\n      \n      expect(results).toHaveLength(1);\n      expect(results[0].name).toBe('Italian Pasta');\n      expect(results[0].searchScore).toBeGreaterThan(0.9);\n    });\n\n    it('performs fuzzy search for partial matches', () => {\n      const results = enhancedSearch(mockItems, 'noodle', ['name', 'description']);\n      \n      expect(results.length).toBeGreaterThan(1);\n      expect(results.some(r => r.name.includes('Noodles'))).toBe(true);\n      expect(results.some(r => r.description.includes('noodles'))).toBe(true);\n    });\n\n    it('returns empty array for no matches', () => {\n      const results = enhancedSearch(mockItems, 'xyz', ['name', 'description']);\n      \n      expect(results).toHaveLength(0);\n    });\n\n    it('returns all items for empty query', () => {\n      const results = enhancedSearch(mockItems, '', ['name', 'description']);\n      \n      expect(results).toHaveLength(mockItems.length);\n    });\n\n    it('sorts results by search score', () => {\n      const results = enhancedSearch(mockItems, 'noodle', ['name', 'description']);\n      \n      for (let i = 1; i < results.length; i++) {\n        expect(results[i - 1].searchScore).toBeGreaterThanOrEqual(results[i].searchScore);\n      }\n    });\n  });\n\n  describe('applyFilters', () => {\n    const mockItems = [\n      {\n        id: 1,\n        name: 'Italian Pasta',\n        cuisine: 'italian',\n        difficulty: 'easy',\n        cookTime: '25',\n        mealType: 'dinner',\n        spiciness: 'mild',\n        dietaryRestrictions: ['vegetarian']\n      },\n      {\n        id: 2,\n        name: 'Spicy Thai Curry',\n        cuisine: 'thai',\n        difficulty: 'medium',\n        cookTime: '45',\n        mealType: 'dinner',\n        spiciness: 'hot',\n        dietaryRestrictions: ['vegan']\n      },\n      {\n        id: 3,\n        name: 'Quick Breakfast',\n        cuisine: 'american',\n        difficulty: 'easy',\n        cookTime: '10',\n        mealType: 'breakfast',\n        spiciness: 'mild',\n        dietaryRestrictions: []\n      }\n    ];\n\n    it('filters by dietary restrictions', () => {\n      const filters = {\n        query: '',\n        dietaryRestrictions: ['vegetarian'],\n        difficultyLevel: [],\n        cookingTime: { min: 0, max: 480 },\n        cuisineTypes: [],\n        mealTypes: [],\n        spiciness: [],\n        ingredients: []\n      };\n\n      const results = applyFilters(mockItems, filters);\n      \n      expect(results).toHaveLength(1);\n      expect(results[0].name).toBe('Italian Pasta');\n    });\n\n    it('filters by difficulty level', () => {\n      const filters = {\n        query: '',\n        dietaryRestrictions: [],\n        difficultyLevel: ['easy'],\n        cookingTime: { min: 0, max: 480 },\n        cuisineTypes: [],\n        mealTypes: [],\n        spiciness: [],\n        ingredients: []\n      };\n\n      const results = applyFilters(mockItems, filters);\n      \n      expect(results).toHaveLength(2);\n      expect(results.every(r => r.difficulty === 'easy')).toBe(true);\n    });\n\n    it('filters by cooking time', () => {\n      const filters = {\n        query: '',\n        dietaryRestrictions: [],\n        difficultyLevel: [],\n        cookingTime: { min: 0, max: 30 },\n        cuisineTypes: [],\n        mealTypes: [],\n        spiciness: [],\n        ingredients: []\n      };\n\n      const results = applyFilters(mockItems, filters);\n      \n      expect(results).toHaveLength(2);\n      expect(results.every(r => parseInt(r.cookTime) <= 30)).toBe(true);\n    });\n\n    it('filters by cuisine type', () => {\n      const filters = {\n        query: '',\n        dietaryRestrictions: [],\n        difficultyLevel: [],\n        cookingTime: { min: 0, max: 480 },\n        cuisineTypes: ['italian'],\n        mealTypes: [],\n        spiciness: [],\n        ingredients: []\n      };\n\n      const results = applyFilters(mockItems, filters);\n      \n      expect(results).toHaveLength(1);\n      expect(results[0].cuisine).toBe('italian');\n    });\n\n    it('filters by meal type', () => {\n      const filters = {\n        query: '',\n        dietaryRestrictions: [],\n        difficultyLevel: [],\n        cookingTime: { min: 0, max: 480 },\n        cuisineTypes: [],\n        mealTypes: ['breakfast'],\n        spiciness: [],\n        ingredients: []\n      };\n\n      const results = applyFilters(mockItems, filters);\n      \n      expect(results).toHaveLength(1);\n      expect(results[0].mealType).toBe('breakfast');\n    });\n\n    it('filters by spiciness', () => {\n      const filters = {\n        query: '',\n        dietaryRestrictions: [],\n        difficultyLevel: [],\n        cookingTime: { min: 0, max: 480 },\n        cuisineTypes: [],\n        mealTypes: [],\n        spiciness: ['hot'],\n        ingredients: []\n      };\n\n      const results = applyFilters(mockItems, filters);\n      \n      expect(results).toHaveLength(1);\n      expect(results[0].spiciness).toBe('hot');\n    });\n\n    it('applies multiple filters simultaneously', () => {\n      const filters = {\n        query: '',\n        dietaryRestrictions: [],\n        difficultyLevel: ['easy'],\n        cookingTime: { min: 0, max: 30 },\n        cuisineTypes: [],\n        mealTypes: ['breakfast'],\n        spiciness: [],\n        ingredients: []\n      };\n\n      const results = applyFilters(mockItems, filters);\n      \n      expect(results).toHaveLength(1);\n      expect(results[0].name).toBe('Quick Breakfast');\n    });\n\n    it('returns empty array when no items match filters', () => {\n      const filters = {\n        query: '',\n        dietaryRestrictions: ['vegan'],\n        difficultyLevel: ['hard'],\n        cookingTime: { min: 0, max: 480 },\n        cuisineTypes: [],\n        mealTypes: [],\n        spiciness: [],\n        ingredients: []\n      };\n\n      const results = applyFilters(mockItems, filters);\n      \n      expect(results).toHaveLength(0);\n    });\n  });\n});"],"version":3}