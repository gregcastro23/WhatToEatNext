{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/unintentional-any-elimination/AnyTypeClassifier.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/unintentional-any-elimination/AnyTypeClassifier.ts"],"sourcesContent":["/**\n * Any Type Classifier\n * Analyzes each `any` type usage to determine if it's intentional or unintentional\n */\n\nimport {\n    AnyTypeCategory,\n    AnyTypeClassification,\n    ClassificationContext,\n    ClassificationError,\n    ClassificationRules,\n    CodeDomain\n} from './types';\n\nexport class AnyTypeClassifier {\n  private rules: ClassificationRules;\n\n  constructor(rules?: Partial<ClassificationRules>) {\n    this.rules = {\n      errorHandlingPatterns: [\n        /catch\\s*\\(\\s*\\w+\\s*:\\s*any\\s*\\)/,\n        /error\\s*:\\s*any/,\n        /exception\\s*:\\s*any/\n      ],\n      externalApiPatterns: [\n        /response\\s*:\\s*any/,\n        /data\\s*:\\s*any/,\n        /payload\\s*:\\s*any/,\n        /apiResponse\\s*:\\s*any/\n      ],\n      testMockPatterns: [\n        /mock\\w*\\s*:\\s*any/,\n        /jest\\.fn\\(\\)\\s*as\\s*any/,\n        /\\.mockReturnValue\\s*\\(\\s*\\w+\\s*as\\s*any\\s*\\)/\n      ],\n      dynamicConfigPatterns: [\n        /config\\s*:\\s*any/,\n        /options\\s*:\\s*any/,\n        /settings\\s*:\\s*any/\n      ],\n      legacyCompatibilityPatterns: [\n        /legacy\\w*\\s*:\\s*any/,\n        /deprecated\\w*\\s*:\\s*any/\n      ],\n      ...rules\n    };\n  }\n\n  /**\n   * Classify a single any type usage\n   */\n  async classify(context: ClassificationContext): Promise<AnyTypeClassification> {\n    try {\n      // Check for existing documentation\n      if (context.hasExistingComment && this.hasIntentionalDocumentation(context.existingComment)) {\n        return {\n          isIntentional: true,\n          confidence: 0.95,\n          reasoning: 'Explicitly documented as intentional',\n          requiresDocumentation: false,\n          category: this.categorizeFromComment(context.existingComment)\n        };\n      }\n\n      // Check for error handling patterns\n      if (this.matchesErrorHandling(context)) {\n        return {\n          isIntentional: true,\n          confidence: 0.9,\n          reasoning: 'Used in error handling context',\n          requiresDocumentation: true,\n          category: AnyTypeCategory.ERROR_HANDLING\n        };\n      }\n\n      // Check for external API patterns\n      if (this.matchesExternalApi(context)) {\n        return {\n          isIntentional: true,\n          confidence: 0.8,\n          reasoning: 'Used for external API response',\n          requiresDocumentation: true,\n          category: AnyTypeCategory.EXTERNAL_API\n        };\n      }\n\n      // Check for test mock patterns\n      if (context.isInTestFile && this.matchesTestMock(context)) {\n        return {\n          isIntentional: true,\n          confidence: 0.85,\n          reasoning: 'Used in test mocking',\n          requiresDocumentation: true,\n          category: AnyTypeCategory.TEST_MOCK\n        };\n      }\n\n      // Check for simple array types (high confidence for replacement)\n      if (this.isSimpleArrayType(context)) {\n        return {\n          isIntentional: false,\n          confidence: 0.95,\n          reasoning: 'Simple array type can be replaced with unknown[]',\n          suggestedReplacement: 'unknown[]',\n          requiresDocumentation: false,\n          category: AnyTypeCategory.ARRAY_TYPE\n        };\n      }\n\n      // Check for Record types\n      if (this.isRecordType(context)) {\n        return {\n          isIntentional: false,\n          confidence: 0.8,\n          reasoning: 'Record type can be replaced with unknown',\n          suggestedReplacement: this.suggestRecordReplacement(context),\n          requiresDocumentation: false,\n          category: AnyTypeCategory.RECORD_TYPE\n        };\n      }\n\n      // Domain-specific analysis\n      const domainClassification = this.analyzeDomainSpecific(context);\n      if (domainClassification) {\n        return domainClassification;\n      }\n\n      // Default to unintentional with low confidence\n      return {\n        isIntentional: false,\n        confidence: 0.6,\n        reasoning: 'No clear intentional pattern detected',\n        suggestedReplacement: 'unknown',\n        requiresDocumentation: false,\n        category: AnyTypeCategory.TYPE_ASSERTION\n      };\n\n    } catch (error) {\n      throw new ClassificationError(\n        `Failed to classify any type at ${context.filePath}:${context.lineNumber}`,\n        context,\n        error as Error\n      );\n    }\n  }\n\n  /**\n   * Classify multiple any type usages in batch\n   */\n  async classifyBatch(contexts: ClassificationContext[]): Promise<AnyTypeClassification[]> {\n    const results: AnyTypeClassification[] = [];\n\n    for (const context of contexts) {\n      try {\n        const classification = await this.classify(context);\n        results.push(classification);\n      } catch (error) {\n        // Log error but continue with other classifications\n        console.warn(`Classification failed for ${context.filePath}:${context.lineNumber}`, error);\n\n        // Provide safe fallback classification\n        results.push({\n          isIntentional: true, // Conservative fallback to prevent unwanted changes\n          confidence: 0.1,\n          reasoning: 'Classification failed, marked as intentional for safety',\n          requiresDocumentation: true,\n          category: AnyTypeCategory.LEGACY_COMPATIBILITY\n        });\n      }\n    }\n\n    return results;\n  }\n\n  private hasIntentionalDocumentation(comment?: string): boolean {\n    if (!comment) return false;\n\n    const intentionalKeywords = [\n      'intentionally any',\n      'deliberately any',\n      'explicitly any',\n      'must be any',\n      'required any'\n    ];\n\n    const lowerComment = comment.toLowerCase();\n    return intentionalKeywords.some(keyword => lowerComment.includes(keyword));\n  }\n\n  private categorizeFromComment(comment?: string): AnyTypeCategory {\n    if (!comment) return AnyTypeCategory.LEGACY_COMPATIBILITY;\n\n    const lowerComment = comment.toLowerCase();\n\n    if (lowerComment.includes('external') || lowerComment.includes('api')) {\n      return AnyTypeCategory.EXTERNAL_API;\n    }\n    if (lowerComment.includes('error') || lowerComment.includes('catch')) {\n      return AnyTypeCategory.ERROR_HANDLING;\n    }\n    if (lowerComment.includes('test') || lowerComment.includes('mock')) {\n      return AnyTypeCategory.TEST_MOCK;\n    }\n    if (lowerComment.includes('config') || lowerComment.includes('dynamic')) {\n      return AnyTypeCategory.DYNAMIC_CONFIG;\n    }\n\n    return AnyTypeCategory.LEGACY_COMPATIBILITY;\n  }\n\n  private matchesErrorHandling(context: ClassificationContext): boolean {\n    const codeWithSurrounding = [\n      ...context.surroundingLines,\n      context.codeSnippet\n    ].join('\\n');\n\n    return this.rules.errorHandlingPatterns.some(pattern =>\n      pattern.test(codeWithSurrounding)\n    );\n  }\n\n  private matchesExternalApi(context: ClassificationContext): boolean {\n    const codeWithSurrounding = [\n      ...context.surroundingLines,\n      context.codeSnippet\n    ].join('\\n');\n\n    return this.rules.externalApiPatterns.some(pattern =>\n      pattern.test(codeWithSurrounding)\n    );\n  }\n\n  private matchesTestMock(context: ClassificationContext): boolean {\n    const codeWithSurrounding = [\n      ...context.surroundingLines,\n      context.codeSnippet\n    ].join('\\n');\n\n    return this.rules.testMockPatterns.some(pattern =>\n      pattern.test(codeWithSurrounding)\n    );\n  }\n\n  private isSimpleArrayType(context: ClassificationContext): boolean {\n    // Match patterns like: any[], Array<any>\n    const arrayPatterns = [\n      /:\\s*any\\[\\]/,\n      /:\\s*Array<any>/,\n      /=\\s*\\[\\]\\s*as\\s*any\\[\\]/\n    ];\n\n    return arrayPatterns.some(pattern => pattern.test(context.codeSnippet));\n  }\n\n  private isRecordType(context: ClassificationContext): boolean {\n    // Match patterns like: Record<string, any>, Record<number, any>\n    const recordPatterns = [\n      /:\\s*Record<\\s*string\\s*,\\s*any\\s*>/,\n      /:\\s*Record<\\s*number\\s*,\\s*any\\s*>/,\n      /:\\s*\\{\\s*\\[key:\\s*string\\]\\s*:\\s*any\\s*\\}/\n    ];\n\n    return recordPatterns.some(pattern => pattern.test(context.codeSnippet));\n  }\n\n  private suggestRecordReplacement(context: ClassificationContext): string {\n    if (context.codeSnippet.includes('Record<string, any>')) {\n      return 'Record<string, unknown>';\n    }\n    if (context.codeSnippet.includes('Record<number, any>')) {\n      return 'Record<number, unknown>';\n    }\n    if (context.codeSnippet.includes('[key: string]: any')) {\n      return '[key: string]: unknown';\n    }\n\n    return 'unknown';\n  }\n\n  private analyzeDomainSpecific(context: ClassificationContext): AnyTypeClassification | null {\n    const domain = context.domainContext.domain;\n\n    switch (domain) {\n      case CodeDomain.ASTROLOGICAL:\n        return this.analyzeAstrologicalDomain(context);\n      case CodeDomain.RECIPE:\n        return this.analyzeRecipeDomain(context);\n      case CodeDomain.CAMPAIGN:\n        return this.analyzeCampaignDomain(context);\n      default:\n        return null;\n    }\n  }\n\n  private analyzeAstrologicalDomain(context: ClassificationContext): AnyTypeClassification | null {\n    // Astrological code often needs flexible typing for planetary positions\n    if (context.codeSnippet.includes('planetary') ||\n        context.codeSnippet.includes('position') ||\n        context.codeSnippet.includes('astro')) {\n      return {\n        isIntentional: true,\n        confidence: 0.8,\n        reasoning: 'Astrological calculations require flexible typing for planetary data',\n        requiresDocumentation: true,\n        category: AnyTypeCategory.EXTERNAL_API\n      };\n    }\n\n    return null;\n  }\n\n  private analyzeRecipeDomain(context: ClassificationContext): AnyTypeClassification | null {\n    // Recipe code might have specific ingredient types\n    if (context.codeSnippet.includes('ingredient') ||\n        context.codeSnippet.includes('recipe')) {\n      return {\n        isIntentional: false,\n        confidence: 0.7,\n        reasoning: 'Recipe/ingredient data can use specific types',\n        suggestedReplacement: 'Ingredient | Recipe',\n        requiresDocumentation: false,\n        category: AnyTypeCategory.TYPE_ASSERTION\n      };\n    }\n\n    return null;\n  }\n\n  private analyzeCampaignDomain(context: ClassificationContext): AnyTypeClassification | null {\n    // Campaign system needs flexibility for dynamic configurations\n    if (context.codeSnippet.includes('campaign') ||\n        context.codeSnippet.includes('config') ||\n        context.codeSnippet.includes('metrics')) {\n      return {\n        isIntentional: true,\n        confidence: 0.85,\n        reasoning: 'Campaign system requires flexible typing for dynamic behavior',\n        requiresDocumentation: true,\n        category: AnyTypeCategory.DYNAMIC_CONFIG\n      };\n    }\n\n    return null;\n  }\n}\n"],"version":3}