{"file":"/Users/GregCastro/Desktop/WhatToEatNext/.consolidation-backups-2025-08-23T17-54-10-092Z/src/__tests__/linting/LintingPerformance.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/.consolidation-backups-2025-08-23T17-54-10-092Z/src/__tests__/linting/LintingPerformance.test.ts"],"sourcesContent":["/**\n * Linting Performance and Memory Usage Tests\n *\n * Tests the performance characteristics of the ESLint configuration,\n * including execution speed, memory usage, and caching effectiveness.\n */\n\nimport { execSync } from 'child_process';\nimport { existsSync, mkdirSync, readFileSync, rmSync, writeFileSync } from 'fs';\nimport { tmpdir } from 'os';\nimport path from 'path';\nimport { performance } from 'perf_hooks';\n\n// Mock dependencies for controlled testing\njest.mock('child_process');\njest.mock('fs');\n\nconst mockExecSync = execSync as jest.MockedFunction<typeof execSync>;\nconst _mockWriteFileSync = writeFileSync as jest.MockedFunction<typeof writeFileSync>;\nconst mockReadFileSync = readFileSync as jest.MockedFunction<typeof readFileSync>;\nconst mockExistsSync = existsSync as jest.MockedFunction<typeof existsSync>;\nconst _mockMkdirSync = mkdirSync as jest.MockedFunction<typeof mkdirSync>;\nconst _mockRmSync = rmSync as jest.MockedFunction<typeof rmSync>;\n\ndescribe('Linting Performance and Memory Usage', () => {\n  const _testDir = path.join(tmpdir(), 'eslint-performance-test');\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockExistsSync.mockReturnValue(true);\n  });\n\n  describe('Execution Speed Tests', () => {\n    test('should complete linting within performance targets', async () => {\n      // Mock a medium-sized codebase response\n      const mockLintOutput = JSON.stringify(\n        Array.from({ length: 50 }, (_, i) => ({\n          filePath: `/test/file${i}.ts`,\n          messages: Array.from({ length: 3 }, (_, j) => ({\n            ruleId: 'no-unused-vars',\n            severity: 1,\n            message: 'Variable is unused',\n            line: j + 1,\n            column: 10,\n          })),\n        })),\n      );\n\n      // Simulate execution time\n      const _executionTime = 8000; // 8 seconds\n      mockExecSync.mockImplementation(() => {\n        // Simulate processing time\n        const start = Date.now();\n        while (Date.now() - start < 100) {\n          // Simulate work\n        }\n        return mockLintOutput;\n      });\n\n      const startTime = performance.now();\n      const result = mockExecSync('yarn lint --format=json', { encoding: 'utf8' });\n      const endTime = performance.now();\n\n      const actualExecutionTime = endTime - startTime;\n\n      // Should complete within reasonable time (allowing for test overhead);\n      expect(actualExecutionTime).toBeLessThan(5000); // 5 seconds max for test\n\n      // Verify output structure\n      const parsedResult = JSON.parse(result as unknown as string);\n      expect(parsedResult).toHaveLength(50);\n      expect(parsedResult[0].messages).toHaveLength(3);\n    });\n\n    test('should show performance improvement with caching', async () => {\n      const mockLintOutput = JSON.stringify([{ filePath: '/test/file.ts', messages: [] }]);\n\n      // First run - no cache\n      mockExistsSync.mockReturnValueOnce(false); // No cache exists\n      mockExecSync.mockReturnValueOnce(mockLintOutput);\n\n      const firstRunStart = performance.now();\n      mockExecSync('yarn lint --format=json', { encoding: 'utf8' });\n      const _firstRunTime = performance.now() - firstRunStart;\n\n      // Second run - with cache\n      mockExistsSync.mockReturnValueOnce(true); // Cache exists\n      mockExecSync.mockReturnValueOnce(mockLintOutput);\n\n      const secondRunStart = performance.now();\n      mockExecSync('yarn lint --format=json', { encoding: 'utf8' });\n      const _secondRunTime = performance.now() - secondRunStart;\n\n      // Cache should improve performance (in real scenario);\n      expect(mockExecSync).toHaveBeenCalledTimes(2);\n    });\n\n    test('should handle incremental linting efficiently', async () => {\n      // Mock git diff output for changed files\n      const changedFiles = ['src/calculations/planetary.ts', 'src/components/AstrologicalChart.tsx'];\n\n      const gitDiffOutput = changedFiles.join('\\n');\n      const mockLintOutput = JSON.stringify(\n        changedFiles.map(file => ({\n          filePath: file,\n          messages: [{ ruleId: 'no-unused-vars', severity: 1, message: 'Unused variable' }],\n        })),\n      );\n\n      mockExecSync\n        .mockReturnValueOnce(gitDiffOutput) // git diff\n        .mockReturnValueOnce(mockLintOutput); // lint changed files\n\n      // Simulate incremental linting\n      const changedFilesResult = mockExecSync('git diff --name-only HEAD~1', { encoding: 'utf8' });\n      const lintResult = mockExecSync(`yarn lint ${changedFiles.join(' ')} --format=json`, { encoding: 'utf8' });\n\n      expect(changedFilesResult).toBe(gitDiffOutput);\n      expect(JSON.parse(lintResult)).toHaveLength(2);\n    });\n\n    test('should optimize performance for large codebases', async () => {\n      // Mock large codebase with many files\n      const largeCodebaseOutput = JSON.stringify(\n        Array.from({ length: 500 }, (_, i) => ({\n          filePath: `/src/file${i}.ts`,\n          messages: Array.from({ length: Math.floor(Math.random() * 5) }, (_, j) => ({\n            ruleId: 'prefer-const',\n            severity: 1,\n            message: 'Prefer const',\n            line: j + 1,\n          })),\n        })),\n      );\n\n      mockExecSync.mockReturnValue(largeCodebaseOutput);\n\n      const startTime = performance.now();\n      const result = mockExecSync('yarn lint --format=json', { encoding: 'utf8' });\n      const executionTime = performance.now() - startTime;\n\n      // Should handle large codebase efficiently\n      expect(executionTime).toBeLessThan(10000); // 10 seconds max\n\n      const parsedResult = JSON.parse(result as unknown as string);\n      expect(parsedResult).toHaveLength(500);\n    });\n\n    test('should measure parallel processing performance', async () => {\n      const mockParallelOutput = JSON.stringify([\n        { filePath: '/test/batch1.ts', messages: [] },\n        { filePath: '/test/batch2.ts', messages: [] },\n        { filePath: '/test/batch3.ts', messages: [] },\n      ]);\n\n      // Simulate parallel processing\n      mockExecSync.mockReturnValue(mockParallelOutput);\n\n      const startTime = performance.now();\n      const result = mockExecSync('yarn lint --format=json', { encoding: 'utf8' });\n      const parallelTime = performance.now() - startTime;\n\n      // Parallel processing should be efficient\n      expect(parallelTime).toBeLessThan(3000); // 3 seconds max\n      expect(JSON.parse(String(result))).toHaveLength(3);\n    });\n  });\n\n  describe('Memory Usage Tests', () => {\n    test('should monitor memory usage during linting', async () => {\n      const mockLintOutput = JSON.stringify([{ filePath: '/test/file.ts', messages: [] }]);\n\n      // Mock memory usage monitoring\n      const initialMemory = process.memoryUsage();\n      mockExecSync.mockReturnValue(mockLintOutput);\n\n      // Simulate linting execution\n      mockExecSync('yarn lint --format=json', { encoding: 'utf8' });\n\n      const finalMemory = process.memoryUsage();\n\n      // Memory usage should be reasonable\n      const memoryIncrease = finalMemory.heapUsed - initialMemory.heapUsed;\n      expect(memoryIncrease).toBeLessThan(100 * 1024 * 1024); // Less than 100MB increase\n    });\n\n    test('should handle memory-intensive astrological calculations', async () => {\n      const astrologicalLintOutput = JSON.stringify([\n        {\n          filePath: '/src/calculations/planetary.ts',\n          messages: [{ ruleId: 'astrological/validate-planetary-position-structure', severity: 1 }],\n        },\n      ]);\n\n      mockExecSync.mockReturnValue(astrologicalLintOutput);\n\n      // Monitor memory during astrological rule processing\n      const memoryBefore = process.memoryUsage();\n      mockExecSync('yarn lint src/calculations/ --format=json', { encoding: 'utf8' });\n      const memoryAfter = process.memoryUsage();\n\n      // Should not cause excessive memory usage\n      const memoryDiff = memoryAfter.heapUsed - memoryBefore.heapUsed;\n      expect(memoryDiff).toBeLessThan(50 * 1024 * 1024); // Less than 50MB\n    });\n\n    test('should optimize TypeScript parser memory usage', async () => {\n      const typescriptLintOutput = JSON.stringify([\n        {\n          filePath: '/src/complex.ts',\n          messages: [{ ruleId: '@typescript-eslint/no-explicit-any', severity: 2 }],\n        },\n      ]);\n\n      mockExecSync.mockReturnValue(typescriptLintOutput);\n\n      // Test TypeScript parser memory efficiency\n      const result = mockExecSync('yarn lint --format=json', { encoding: 'utf8' });\n      expect(JSON.parse(String(result))).toHaveLength(1);\n      // Memory usage is monitored by the test framework\n    });\n\n    test('should manage cache memory efficiently', async () => {\n      const cacheDir = '.eslint-ts-cache';\n      const mockCacheData = JSON.stringify({\n        version: '1.0.0',\n        files: {\n          '/test/file.ts': { hash: 'abc123', results: [] },\n        },\n      });\n\n      mockExistsSync.mockReturnValue(true);\n      mockReadFileSync.mockReturnValue(mockCacheData);\n\n      // Simulate cache usage\n      const cacheContent = mockReadFileSync(path.join(cacheDir, 'cache.json'), 'utf8');\n      const cacheData = JSON.parse(cacheContent);\n\n      expect(cacheData.files).toBeDefined();\n      expect(Object.keys(cacheData.files)).toHaveLength(1);\n    });\n  });\n\n  describe('Caching Performance Tests', () => {\n    test('should validate cache hit rates', async () => {\n      const cacheMetrics = {\n        totalFiles: 100,\n        cacheHits: 85,\n        cacheMisses: 15,\n        cacheHitRate: 0.85,\n      };\n\n      // Mock cache performance data\n      mockReadFileSync.mockReturnValue(JSON.stringify(cacheMetrics));\n      mockExistsSync.mockReturnValue(true);\n\n      const metricsData = JSON.parse(mockReadFileSync('.eslint-cache-metrics.json', 'utf8'));\n\n      expect(metricsData.cacheHitRate).toBeGreaterThan(0.8); // 80% hit rate target\n      expect(metricsData.cacheHits).toBeGreaterThan(metricsData.cacheMisses);\n    });\n\n    test('should measure cache invalidation performance', async () => {\n      const mockLintOutput = JSON.stringify([{ filePath: '/test/file.ts', messages: [] }]);\n\n      // Simulate cache invalidation\n      mockExistsSync\n        .mockReturnValueOnce(true) // Cache exists\n        .mockReturnValueOnce(false); // Cache invalidated\n\n      mockExecSync.mockReturnValue(mockLintOutput);\n\n      // First run with cache\n      mockExecSync('yarn lint --format=json', { encoding: 'utf8' });\n\n      // Second run after invalidation\n      mockExecSync('yarn lint --format=json', { encoding: 'utf8' });\n\n      expect(mockExecSync).toHaveBeenCalledTimes(2);\n    });\n\n    test('should optimize cache storage size', async () => {\n      const largeCacheData = {\n        version: '1.0.0',\n        files: Object.fromEntries(\n          Array.from({ length: 1000 }, (_, i) => [`/test/file${i}.ts`, { hash: `hash${i}`, results: [] }]),\n        ),\n      };\n\n      mockReadFileSync.mockReturnValue(JSON.stringify(largeCacheData));\n      mockExistsSync.mockReturnValue(true);\n\n      const cacheContent = mockReadFileSync('.eslint-cache.json', 'utf8');\n      const cacheSize = Buffer.byteLength(String(cacheContent), 'utf8');\n\n      // Cache should be reasonably sized (less than 10MB);\n      expect(cacheSize).toBeLessThan(10 * 1024 * 1024);\n    });\n\n    test('should handle cache corruption gracefully', async () => {\n      const corruptedCache = 'invalid json content';\n      const mockLintOutput = JSON.stringify([{ filePath: '/test/file.ts', messages: [] }]);\n\n      mockExistsSync.mockReturnValue(true);\n      mockReadFileSync.mockReturnValue(corruptedCache);\n      mockExecSync.mockReturnValue(mockLintOutput);\n\n      // Should handle corrupted cache without failing\n      expect(() => {\n        try {\n          JSON.parse(String(mockReadFileSync('.eslint-cache.json', 'utf8')));\n        } catch (error) {\n          // Simulate graceful handling\n          return mockExecSync('yarn lint --no-cache --format=json', { encoding: 'utf8' });\n        }\n      }).not.toThrow();\n    });\n  });\n\n  describe('Resource Optimization Tests', () => {\n    test('should optimize CPU usage during linting', async () => {\n      const mockLintOutput = JSON.stringify([{ filePath: '/test/file.ts', messages: [] }]);\n\n      mockExecSync.mockReturnValue(mockLintOutput);\n\n      // Simulate CPU monitoring\n      const cpuUsageBefore = process.cpuUsage();\n      mockExecSync('yarn lint --format=json', { encoding: 'utf8' });\n      const cpuUsageAfter = process.cpuUsage(cpuUsageBefore);\n\n      // CPU usage should be reasonable (values in microseconds);\n      expect(cpuUsageAfter.user).toBeLessThan(5000000); // 5 seconds\n      expect(cpuUsageAfter.system).toBeLessThan(2000000); // 2 seconds\n    });\n\n    test('should handle concurrent linting processes', async () => {\n      const mockOutputs = [\n        JSON.stringify([{ filePath: '/test/file1.ts', messages: [] }]),\n        JSON.stringify([{ filePath: '/test/file2.ts', messages: [] }]),\n        JSON.stringify([{ filePath: '/test/file3.ts', messages: [] }]),\n      ];\n\n      mockExecSync\n        .mockReturnValueOnce(mockOutputs[0])\n        .mockReturnValueOnce(mockOutputs[1])\n        .mockReturnValueOnce(mockOutputs[2]);\n\n      // Simulate concurrent processes\n      const promises = [\n        Promise.resolve(mockExecSync('yarn lint file1.ts --format=json', { encoding: 'utf8' })),\n        Promise.resolve(mockExecSync('yarn lint file2.ts --format=json', { encoding: 'utf8' })),\n        Promise.resolve(mockExecSync('yarn lint file3.ts --format=json', { encoding: 'utf8' })),\n      ];\n\n      const results = await Promise.all(promises);\n\n      expect(results).toHaveLength(3);\n      results.forEach((result, index) => {\n        expect(JSON.parse(result as unknown as string)[0].filePath).toContain(`file${index + 1}.ts`);\n      });\n    });\n\n    test('should optimize import resolution performance', async () => {\n      const importResolutionOutput = JSON.stringify([\n        {\n          filePath: '/test/imports.ts',\n          messages: [{ ruleId: 'import/no-unresolved', severity: 1, message: 'Unable to resolve path' }],\n        },\n      ]);\n\n      mockExecSync.mockReturnValue(importResolutionOutput);\n\n      const startTime = performance.now();\n      const result = mockExecSync('yarn lint --format=json', { encoding: 'utf8' });\n      const resolutionTime = performance.now() - startTime;\n\n      // Import resolution should be fast\n      expect(resolutionTime).toBeLessThan(2000); // 2 seconds\n      expect(JSON.parse(String(result))).toHaveLength(1);\n    });\n\n    test('should measure rule execution performance', async () => {\n      const rulePerformanceData = {\n        rules: {\n          '@typescript-eslint/no-unused-vars': { executionTime: 150, fileCount: 50 },\n          'import/order': { executionTime: 200, fileCount: 50 },\n          'astrological/preserve-planetary-constants': { executionTime: 50, fileCount: 10 },\n          'react-hooks/exhaustive-deps': { executionTime: 100, fileCount: 25 },\n        },\n      };\n\n      mockReadFileSync.mockReturnValue(JSON.stringify(rulePerformanceData));\n      mockExistsSync.mockReturnValue(true);\n\n      const perfData = JSON.parse(mockReadFileSync('.eslint-rule-performance.json', 'utf8'));\n\n      // Each rule should execute efficiently\n      Object.entries(perfData.rules).forEach(([_ruleName, data]: [string, any]) => {\n        const avgTimePerFile = data.executionTime / data.fileCount;\n        expect(avgTimePerFile).toBeLessThan(10); // Less than 10ms per file per rule\n      });\n    });\n  });\n\n  describe('Scalability Tests', () => {\n    test('should scale with increasing file count', async () => {\n      const fileCounts = [10, 50, 100, 500];\n      const executionTimes: number[] = [];\n\n      fileCounts.forEach(count => {\n        const mockOutput = JSON.stringify(\n          Array.from({ length: count }, (_, i) => ({\n            filePath: `/test/file${i}.ts`,\n            messages: [],\n          })),\n        );\n\n        mockExecSync.mockReturnValueOnce(mockOutput);\n\n        const startTime = performance.now();\n        mockExecSync('yarn lint --format=json', { encoding: 'utf8' });\n        const executionTime = performance.now() - startTime;\n\n        executionTimes.push(executionTime);\n      });\n\n      // Execution time should scale reasonably (not exponentially);\n      expect(executionTimes[1]).toBeLessThan(executionTimes[0] * 10); // 50 files shouldn't take 10x longer than 10 files\n      expect(executionTimes[2]).toBeLessThan(executionTimes[1] * 5); // 100 files shouldn't take 5x longer than 50 files\n    });\n\n    test('should handle memory pressure gracefully', async () => {\n      // Simulate memory pressure scenario\n      const memoryIntensiveOutput = JSON.stringify(\n        Array.from({ length: 1000 }, (_, i) => ({\n          filePath: `/test/large-file${i}.ts`,\n          messages: Array.from({ length: 20 }, (_, j) => ({\n            ruleId: 'complex-rule',\n            severity: 1,\n            message: `Complex message ${j}`,\n            line: j + 1,\n            column: 10,\n            source: 'a'.repeat(1000), // Large source content\n          })),\n        })),\n      );\n\n      mockExecSync.mockReturnValue(memoryIntensiveOutput);\n\n      // Should handle large output without memory issues\n      const result = mockExecSync('yarn lint --format=json', { encoding: 'utf8' });\n      const parsedResult = JSON.parse(result as unknown as string);\n\n      expect(parsedResult).toHaveLength(1000);\n      expect(parsedResult[0].messages).toHaveLength(20);\n    });\n\n    test('should optimize for CI/CD environments', async () => {\n      const ciOptimizedOutput = JSON.stringify([{ filePath: '/test/file.ts', messages: [] }]);\n\n      // Simulate CI environment variables\n      const originalCI = process.env.CI;\n      const originalNodeEnv = process.env.NODE_ENV;\n\n      // Use Object.defineProperty to override read-only properties\n      Object.defineProperty(process.env, 'CI', { value: 'true', configurable: true });\n      Object.defineProperty(process.env, 'NODE_ENV', { value: 'production', configurable: true });\n\n      mockExecSync.mockReturnValue(ciOptimizedOutput);\n\n      const startTime = performance.now();\n      const result = mockExecSync('yarn lint --format=json', { encoding: 'utf8' });\n      const ciExecutionTime = performance.now() - startTime;\n\n      // CI execution should be optimized\n      expect(ciExecutionTime).toBeLessThan(5000); // 5 seconds max\n      expect(JSON.parse(String(result))).toHaveLength(1);\n\n      // Restore original environment\n      if (originalCI !== undefined) {\n        Object.defineProperty(process.env, 'CI', { value: originalCI, configurable: true });\n      } else {\n        Object.defineProperty(process.env, 'CI', { value: undefined, configurable: true });\n      }\n      if (originalNodeEnv !== undefined) {\n        Object.defineProperty(process.env, 'NODE_ENV', { value: originalNodeEnv, configurable: true });\n      } else {\n        Object.defineProperty(process.env, 'NODE_ENV', { value: undefined, configurable: true });\n      }\n    });\n  });\n\n  describe('Performance Regression Detection', () => {\n    test('should detect performance regressions', async () => {\n      const baselineMetrics = {\n        executionTime: 5000,\n        memoryUsage: 128 * 1024 * 1024, // 128MB,\n        cacheHitRate: 0.85,\n        filesProcessed: 100,\n      };\n\n      const currentMetrics = {\n        executionTime: 7500, // 50% slower,\n        memoryUsage: 192 * 1024 * 1024, // 50% more memory,\n        cacheHitRate: 0.75, // Lower cache hit rate,\n        filesProcessed: 100,\n      };\n\n      mockReadFileSync\n        .mockReturnValueOnce(JSON.stringify(baselineMetrics))\n        .mockReturnValueOnce(JSON.stringify(currentMetrics));\n\n      const baseline = JSON.parse(String(mockReadFileSync('baseline-metrics.json', 'utf8')));\n      const current = JSON.parse(String(mockReadFileSync('current-metrics.json', 'utf8')));\n\n      // Detect regressions\n      const executionRegression = (current.executionTime - baseline.executionTime) / baseline.executionTime;\n      const memoryRegression = (current.memoryUsage - baseline.memoryUsage) / baseline.memoryUsage;\n      const cacheRegression = (baseline.cacheHitRate - current.cacheHitRate) / baseline.cacheHitRate;\n\n      expect(executionRegression).toBeGreaterThan(0.2); // 20% regression threshold\n      expect(memoryRegression).toBeGreaterThan(0.2); // 20% regression threshold\n      expect(cacheRegression).toBeGreaterThan(0.05); // 5% regression threshold\n    });\n\n    test('should track performance trends over time', async () => {\n      const performanceHistory = [\n        { date: '2024-01-01', executionTime: 5000, memoryUsage: 128 * 1024 * 1024 },\n        { date: '2024-01-02', executionTime: 5100, memoryUsage: 130 * 1024 * 1024 },\n        { date: '2024-01-03', executionTime: 5200, memoryUsage: 132 * 1024 * 1024 },\n        { date: '2024-01-04', executionTime: 5300, memoryUsage: 134 * 1024 * 1024 },\n      ];\n\n      mockReadFileSync.mockReturnValue(JSON.stringify(performanceHistory));\n\n      const history = JSON.parse(mockReadFileSync('performance-history.json', 'utf8'));\n\n      // Calculate trend\n      const executionTrend = history[history.length - 1].executionTime - history[0].executionTime;\n      const memoryTrend = history[history.length - 1].memoryUsage - history[0].memoryUsage;\n\n      expect(executionTrend).toBeLessThan(1000); // Less than 1 second increase over time\n      expect(memoryTrend).toBeLessThan(10 * 1024 * 1024); // Less than 10MB increase over time\n    });\n  });\n});\n"],"version":3}