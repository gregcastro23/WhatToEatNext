{"file":"/Users/GregCastro/Desktop/WhatToEatNext/backups/conservative-wave-2025-08-11T05-21-33-410Z/src/__tests__/linting/ZeroErrorAchievementDashboard.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/backups/conservative-wave-2025-08-11T05-21-33-410Z/src/__tests__/linting/ZeroErrorAchievementDashboard.test.ts"],"sourcesContent":["/**\n * Zero-Error Achievement Dashboard Tests\n *\n * Comprehensive test suite for the zero-error monitoring and\n * achievement tracking system.\n */\n\nimport { execSync } from 'child_process';\nimport { existsSync, mkdirSync, readFileSync, writeFileSync } from 'fs';\n\nimport { LintingMetrics } from '../../services/linting/LintingValidationDashboard';\nimport { ZeroErrorAchievementDashboard } from '../../services/linting/ZeroErrorAchievementDashboard';\n\n// Mock external dependencies\nvoid jest.mock('child_process');\nvoid jest.mock('fs');\n\nconst mockExecSync = execSync as jest.MockedFunction<typeof execSync>;\nconst mockWriteFileSync = writeFileSync as jest.MockedFunction<typeof writeFileSync>;\nconst mockReadFileSync = readFileSync as jest.MockedFunction<typeof readFileSync>;\nconst mockExistsSync = existsSync as jest.MockedFunction<typeof existsSync>;\nconst mockMkdirSync = mkdirSync as jest.MockedFunction<typeof mkdirSync>;\n\ndescribe('ZeroErrorAchievementDashboard', () => {\n  let dashboard: ZeroErrorAchievementDashboard;\n  let mockMetrics: LintingMetrics;\n\n  beforeEach(() => {\n    void jest.clearAllMocks();\n\n    // Mock file system operations\n    void mockExistsSync.mockReturnValue(true);\n    void mockReadFileSync.mockReturnValue('[]');\n    void mockWriteFileSync.mockImplementation(() => {});\n    void mockMkdirSync.mockImplementation(() => '');\n\n    // Mock successful command execution\n    void mockExecSync.mockReturnValue('');\n\n    // Create mock metrics\n    mockMetrics = {\n      timestamp: new Date(),\n      totalIssues: 1500,\n      errors: 50,\n      warnings: 1450,\n      parserErrors: 0,\n      explicitAnyErrors: 150,\n      importOrderIssues: 200,\n      unusedVariables: 300,\n      reactHooksIssues: 100,\n      consoleStatements: 50,\n      domainSpecificIssues: {\n        astrologicalCalculations: 25,\n        campaignSystem: 15,\n        testFiles: 10,\n      },\n      performanceMetrics: {\n        lintingDuration: 25000,\n        cacheHitRate: 0.75,\n        memoryUsage: 256,\n        filesProcessed: 500,\n      },\n      qualityScore: 85,\n      regressionDetected: false,\n    };\n\n    dashboard = new ZeroErrorAchievementDashboard();\n  });\n\n  afterEach(() => {\n    void jest.restoreAllMocks();\n  });\n\n  describe('Dashboard Generation', () => {\n    test('should generate comprehensive dashboard successfully', async () => {\n      // Mock validation dashboard result\n      const mockValidationResult = {\n        passed: true,\n        metrics: mockMetrics,\n        alerts: [],\n        recommendations: ['Continue systematic improvement'],\n        regressionAnalysis: {\n          detected: false,\n          affectedMetrics: [],\n          severity: 'minor' as const,\n          recommendations: [],\n          historicalComparison: {\n            current: 1500,\n            previous: 1600,\n            change: -100,\n            changePercentage: -6.25,\n          },\n        },\n      };\n\n      // Mock the validation dashboard\n      void jest\n        .spyOn(dashboard['validationDashboard'], 'runComprehensiveValidation')\n        .mockResolvedValue(mockValidationResult);\n\n      await dashboard.generateDashboard();\n\n      // Verify dashboard report was generated\n      expect(mockWriteFileSync).toHaveBeenCalledWith(\n        expect.stringContaining('zero-error-achievement-dashboard.md'),\n        expect.stringContaining('# 🎯 Zero-Error Achievement Dashboard'),\n        'utf8',\n      );\n\n      // Verify JSON data was generated\n      expect(mockWriteFileSync).toHaveBeenCalledWith(\n        expect.stringContaining('zero-error-achievement-dashboard.json'),\n        expect.stringContaining('\"timestamp\"'),\n        undefined,\n      );\n    });\n\n    test('should handle dashboard generation errors gracefully', async () => {\n      // Mock validation dashboard failure\n      void jest\n        .spyOn(dashboard['validationDashboard'], 'runComprehensiveValidation')\n        .mockRejectedValue(new Error('Validation failed'));\n\n      await expect(dashboard.generateDashboard()).rejects.toThrow('Validation failed');\n    });\n\n    test('should generate targets with correct progress calculations', async () => {\n      const mockValidationResult = {\n        passed: true,\n        metrics: mockMetrics,\n        alerts: [],\n        recommendations: [],\n        regressionAnalysis: {\n          detected: false,\n          affectedMetrics: [],\n          severity: 'minor' as const,\n          recommendations: [],\n          historicalComparison: {\n            current: 1500,\n            previous: 1600,\n            change: -100,\n            changePercentage: -6.25,\n          },\n        },\n      };\n\n      void jest\n        .spyOn(dashboard['validationDashboard'], 'runComprehensiveValidation')\n        .mockResolvedValue(mockValidationResult);\n\n      await dashboard.generateDashboard();\n\n      // Verify targets file was written\n      const targetsCall = (mockWriteFileSync as jest.Mock).mock.calls.find(call =>\n        call[0].includes('zero-error-targets.json'),\n      );\n\n      expect(targetsCall).toBeDefined();\n\n      const targetsData = JSON.parse(targetsCall[1]);\n      expect(targetsData).toBeInstanceOf(Array);\n      expect(targetsData.length).toBeGreaterThan(0);\n\n      // Check parser errors target\n      const parserErrorsTarget = targetsData.find(t => t.metric === 'parserErrors');\n      expect(parserErrorsTarget).toBeDefined();\n      expect(parserErrorsTarget.currentValue).toBe(0);\n      expect(parserErrorsTarget.targetValue).toBe(0);\n      expect(parserErrorsTarget.progress).toBe(100); // Already achieved\n      expect(parserErrorsTarget.priority).toBe('critical');\n    });\n  });\n\n  describe('Real-Time Monitoring', () => {\n    test('should detect significant changes in metrics', async () => {\n      const previousMetrics = { ...mockMetrics, totalIssues: 1000 };\n      const currentMetrics = { ...mockMetrics, totalIssues: 1500 };\n\n      const changes = dashboard['detectSignificantChanges'](previousMetrics, currentMetrics);\n\n      expect(changes).toContain(expect.stringContaining('Total Issues increased'));\n      expect(changes[0]).toMatch(/50\\.0%/); // 50% increase\n    }, 5000); // 5 second timeout\n\n    test('should identify critical issues correctly', () => {\n      const criticalMetrics = {\n        ...mockMetrics,\n        parserErrors: 5,\n        explicitAnyErrors: 250,\n        qualityScore: 45,\n        performanceMetrics: {\n          ...mockMetrics.performanceMetrics,\n          lintingDuration: 75000,\n        },\n      };\n\n      const criticalIssues = dashboard['identifyCriticalIssues'](criticalMetrics);\n\n      expect(criticalIssues).toContain(expect.stringContaining('5 parser errors'));\n      expect(criticalIssues).toContain(expect.stringContaining('250 explicit any errors'));\n      expect(criticalIssues).toContain(expect.stringContaining('Quality score 45'));\n      expect(criticalIssues).toContain(expect.stringContaining('75000ms'));\n    }, 3000); // 3 second timeout\n\n    test('should handle real-time monitoring updates efficiently', async () => {\n      const startTime = Date.now();\n\n      // Simulate rapid metric updates\n      for (let i = 0; i < 10; i++) {\n        const updatedMetrics = { ...mockMetrics, totalIssues: 1000 + i * 10 };\n        dashboard['detectSignificantChanges'](mockMetrics, updatedMetrics);\n      }\n\n      const duration = Date.now() - startTime;\n\n      // Should handle updates quickly\n      expect(duration).toBeLessThan(1000); // Under 1 second\n    }, 5000); // 5 second timeout\n\n    test('should validate monitoring consistency', async () => {\n      const testMetrics = { ...mockMetrics, totalIssues: 500 };\n\n      // Run the same detection multiple times\n      const results: number[] = [];\n      for (let i = 0; i < 5; i++) {\n        const changes = dashboard['detectSignificantChanges'](mockMetrics, testMetrics);\n        void results.push(changes.length);\n      }\n\n      // Results should be consistent\n      const allSame = results.every(count => count === results[0]);\n      expect(allSame).toBe(true);\n    }, 3000); // 3 second timeout\n\n    test('should update real-time status correctly', async () => {\n      dashboard['updateRealTimeStatus'](mockMetrics);\n\n      const statusCall = (mockWriteFileSync as jest.Mock).mock.calls.find(call =>\n        call[0].includes('zero-error-achievement-status.json'),\n      );\n\n      expect(statusCall).toBeDefined();\n\n      const statusData = JSON.parse(statusCall[1]);\n      expect(statusData.qualityScore).toBe(85);\n      expect(statusData.totalIssues).toBe(1500);\n      expect(statusData.parserErrors).toBe(0);\n      expect(statusData.status).toBe('good'); // Quality score 85 = good\n    });\n  });\n\n  describe('Trend Analysis', () => {\n    test('should calculate trends correctly with sufficient data', async () => {\n      // Mock metrics history with trend data\n      const historyData = [\n        { ...mockMetrics, totalIssues: 2000, timestamp: new Date('2025-01-01') },\n        { ...mockMetrics, totalIssues: 1800, timestamp: new Date('2025-01-02') },\n        { ...mockMetrics, totalIssues: 1600, timestamp: new Date('2025-01-03') },\n        { ...mockMetrics, totalIssues: 1500, timestamp: new Date('2025-01-04') },\n      ];\n\n      void mockReadFileSync.mockReturnValueOnce(JSON.stringify(historyData));\n\n      const trends = await dashboard['analyzeTrends'](mockMetrics);\n\n      expect(trends).toBeInstanceOf(Array);\n      expect(trends.length).toBeGreaterThan(0);\n\n      const totalIssuesTrend = trends.find(t => t.metric === 'totalIssues');\n      expect(totalIssuesTrend).toBeDefined();\n      if (totalIssuesTrend) {\n        expect(totalIssuesTrend.trend).toBe('improving'); // Decreasing issues = improving\n        expect(totalIssuesTrend.velocity).toBeLessThan(0); // Negative velocity = decreasing\n      }\n    });\n\n    test('should handle insufficient data for trend analysis', async () => {\n      // Mock insufficient history data\n      const historyData = [mockMetrics];\n      void mockReadFileSync.mockReturnValueOnce(JSON.stringify(historyData));\n\n      const trends = await dashboard['analyzeTrends'](mockMetrics);\n\n      expect(trends).toEqual([]); // No trends with insufficient data\n    });\n\n    test('should project future values correctly', () => {\n      const velocity = -10; // Improving by 10 issues per day\n      const currentValue = 1500;\n\n      const projection = dashboard['projectFuture'](velocity, currentValue);\n\n      expect(projection.sevenDays).toBe(1430); // 1500 - (10 * 7);\n      expect(projection.thirtyDays).toBe(1200); // 1500 - (10 * 30);\n      expect(projection.ninetyDays).toBe(600); // 1500 - (10 * 90)\n    });\n  });\n\n  describe('Quality Gates', () => {\n    test('should evaluate quality gates correctly', async () => {\n      const gates = await dashboard['checkQualityGates'](mockMetrics);\n\n      expect(gates).toBeInstanceOf(Array);\n      expect(gates.length).toBeGreaterThan(0);\n\n      // Check parser errors gate (should pass with 0 errors)\n      const parserGate = gates.find(g => g.name === 'parser-errors');\n      expect(parserGate).toBeDefined();\n      if (parserGate) {\n        expect(parserGate.status).toBe('passing');\n      }\n\n      // Check explicit any gate (should warn with 150 errors)\n      const anyGate = (gates as any[]).find(g => g.name === 'explicit-any');\n      expect(anyGate).toBeDefined();\n      if (anyGate) {\n        expect(anyGate.status).toBe('warning'); // 150 > 100 but <= 150\n      }\n\n      // Check quality score gate (should pass with 85)\n      const qualityGate = (gates as any[]).find(g => g.id === 'quality-score-minimum');\n      expect(qualityGate).toBeDefined();\n      if (qualityGate) {\n        expect(qualityGate.status).toBe('passing'); // 85 >= 80\n      }\n    });\n\n    test('should identify failing quality gates', async () => {\n      const failingMetrics = {\n        ...mockMetrics,\n        parserErrors: 3,\n        explicitAnyErrors: 200,\n        qualityScore: 65,\n      };\n\n      const gates = await dashboard['checkQualityGates'](failingMetrics);\n\n      const parserGate = gates.find(g => g.name === 'parser-errors');\n      if (parserGate) {\n        expect(parserGate.status).toBe('failing');\n      }\n\n      const anyGate = gates.find(g => g.name === 'explicit-any');\n      if (anyGate) {\n        expect(anyGate.status).toBe('failing'); // 200 > 150\n      }\n\n      const qualityGate = gates.find(g => g.id === 'quality-score-minimum');\n      if (qualityGate) {\n        expect(qualityGate.status).toBe('warning'); // 65 < 80 but >= 70\n      }\n    });\n  });\n\n  describe('Target Management', () => {\n    test('should calculate progress correctly for different metric types', () => {\n      // Quality score progress (higher is better)\n      const qualityProgress = dashboard['calculateProgress'](85, 95, 'qualityScore');\n      expect(qualityProgress).toBeCloseTo(89.47, 1); // (85/95) * 100\n\n      // Error count progress (lower is better)\n      const errorProgress = dashboard['calculateProgress'](150, 0, 'explicitAnyErrors');\n      expect(errorProgress).toBeGreaterThan(0);\n      expect(errorProgress).toBeLessThan(100);\n    });\n\n    test('should estimate completion dates based on progress', () => {\n      const deadline = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // 30 days\n      const completion = dashboard['estimateCompletion'](150, 0, deadline);\n\n      expect(completion).toBeInstanceOf(Date);\n      expect(completion.getTime()).toBeGreaterThan(Date.now());\n      expect(completion.getTime()).toBeLessThanOrEqual(deadline.getTime());\n    });\n\n    test('should update targets with current metrics', async () => {\n      const mockValidationResult = {\n        passed: true,\n        metrics: mockMetrics,\n        alerts: [],\n        recommendations: [],\n        regressionAnalysis: {\n          detected: false,\n          affectedMetrics: [],\n          severity: 'minor' as const,\n          recommendations: [],\n          historicalComparison: {\n            current: 1500,\n            previous: 1600,\n            change: -100,\n            changePercentage: -6.25,\n          },\n        },\n      };\n\n      void jest\n        .spyOn(dashboard['validationDashboard'], 'runComprehensiveValidation')\n        .mockResolvedValue(mockValidationResult);\n\n      const targets = await dashboard['updateTargets'](mockMetrics);\n\n      expect(targets).toBeInstanceOf(Array);\n      expect(targets.length).toBeGreaterThan(0);\n\n      // Verify all targets have required properties\n      for (const target of targets) {\n        expect(target).toHaveProperty('metric');\n        expect(target).toHaveProperty('currentValue');\n        expect(target).toHaveProperty('targetValue');\n        expect(target).toHaveProperty('progress');\n        expect(target).toHaveProperty('priority');\n        expect(target).toHaveProperty('strategy');\n        expect(target.progress).toBeGreaterThanOrEqual(0);\n        expect(target.progress).toBeLessThanOrEqual(100);\n      }\n    });\n  });\n\n  describe('Maintenance Procedures', () => {\n    test('should initialize maintenance procedures correctly', () => {\n      const procedures = dashboard['maintenanceProcedures'];\n\n      expect(procedures.size).toBeGreaterThan(0);\n      expect(procedures.has('daily-health-check')).toBe(true);\n      expect(procedures.has('weekly-cache-optimization')).toBe(true);\n      expect(procedures.has('monthly-metrics-cleanup')).toBe(true);\n\n      const dailyCheck = procedures.get('daily-health-check');\n      expect(dailyCheck).toBeDefined();\n      if (dailyCheck) {\n        expect(dailyCheck.frequency).toBe('daily');\n        expect(dailyCheck.automated).toBe(true);\n        expect(typeof dailyCheck.procedure).toBe('function');\n      }\n    });\n\n    test('should calculate next run times correctly', () => {\n      const baseDate = new Date('2025-01-15T10:00:00Z');\n\n      const nextDaily = dashboard['calculateNextRun'](baseDate, 'daily');\n      expect(nextDaily.getDate()).toBe(16); // Next day\n\n      const nextWeekly = dashboard['calculateNextRun'](baseDate, 'weekly');\n      expect(nextWeekly.getDate()).toBe(22); // 7 days later\n\n      const nextMonthly = dashboard['calculateNextRun'](baseDate, 'monthly');\n      expect(nextMonthly.getMonth()).toBe(1); // February (0-indexed)\n\n      const nextQuarterly = dashboard['calculateNextRun'](baseDate, 'quarterly');\n      expect(nextQuarterly.getMonth()).toBe(3); // April (0-indexed)\n    });\n\n    test('should run scheduled maintenance procedures', async () => {\n      // Mock successful command execution for maintenance\n      mockExecSync.mockReturnValue('0'); // Success exit code\n\n      const results = await dashboard['runScheduledMaintenance']();\n\n      // Should run procedures that are due\n      expect(results).toBeInstanceOf(Map);\n\n      // Verify maintenance procedures were updated\n      const dailyCheck = dashboard['maintenanceProcedures'].get('daily-health-check');\n      if (dailyCheck && results.has('daily-health-check')) {\n        expect(dailyCheck.lastRun).toBeInstanceOf(Date);\n        expect(dailyCheck.nextRun).toBeInstanceOf(Date);\n        if (dailyCheck.nextRun && dailyCheck.lastRun) {\n          expect(dailyCheck.nextRun.getTime()).toBeGreaterThan(dailyCheck.lastRun.getTime());\n        }\n      }\n    });\n  });\n\n  describe('Report Generation', () => {\n    test('should generate comprehensive markdown report', async () => {\n      const mockData = {\n        validationResult: {\n          passed: true,\n          metrics: mockMetrics,\n          alerts: [],\n          recommendations: ['Continue improvement'],\n          regressionAnalysis: {\n            detected: false,\n            affectedMetrics: [],\n            severity: 'minor' as const,\n            recommendations: [],\n            historicalComparison: {\n              current: 1500,\n              previous: 1600,\n              change: -100,\n              changePercentage: -6.25,\n            },\n          },\n        },\n        trendAnalysis: [],\n        targets: [],\n        qualityGates: [],\n        maintenanceResults: new Map(),\n        generationTime: 1500,\n      };\n\n      dashboard['generateComprehensiveReport'](mockData);\n\n      // Verify markdown report was generated\n      const markdownCall = (mockWriteFileSync as jest.Mock).mock.calls.find(call => call[0].includes('.md'));\n\n      expect(markdownCall).toBeDefined();\n      expect(markdownCall[1]).toContain('# 🎯 Zero-Error Achievement Dashboard');\n      expect(markdownCall[1]).toContain('Quality Score: 85/100');\n      expect(markdownCall[1]).toContain('Total Issues: 1500');\n    });\n\n    test('should generate JSON report with structured data', async () => {\n      const mockData = {\n        validationResult: {\n          passed: true,\n          metrics: mockMetrics,\n          alerts: [],\n          recommendations: [],\n          regressionAnalysis: {\n            detected: false,\n            affectedMetrics: [],\n            severity: 'minor' as const,\n            recommendations: [],\n            historicalComparison: {\n              current: 1500,\n              previous: 1600,\n              change: -100,\n              changePercentage: -6.25,\n            },\n          },\n        },\n        trendAnalysis: [],\n        targets: [],\n        qualityGates: [],\n        maintenanceResults: new Map(),\n        generationTime: 1500,\n      };\n\n      dashboard['generateComprehensiveReport'](mockData);\n\n      // Verify JSON report was generated\n      const jsonCall = (mockWriteFileSync as jest.Mock).mock.calls.find(call => call[0].includes('.json'));\n\n      expect(jsonCall).toBeDefined();\n\n      const jsonData = JSON.parse(jsonCall[1]);\n      expect(jsonData).toHaveProperty('timestamp');\n      expect(jsonData).toHaveProperty('generationTime', 1500);\n      expect(jsonData).toHaveProperty('summary');\n      expect(jsonData).toHaveProperty('metrics');\n      expect(jsonData.summary).toHaveProperty('qualityScore', 85);\n    });\n  });\n\n  describe('Helper Methods', () => {\n    test('should get metric values correctly from nested objects', () => {\n      const value1 = dashboard['getMetricValue'](mockMetrics, 'totalIssues');\n      expect(value1).toBe(1500);\n\n      const value2 = dashboard['getMetricValue'](mockMetrics, 'performanceMetrics.lintingDuration');\n      expect(value2).toBe(25000);\n\n      const value3 = dashboard['getMetricValue'](mockMetrics, 'domainSpecificIssues.astrologicalCalculations');\n      expect(value3).toBe(25);\n\n      const value4 = dashboard['getMetricValue'](mockMetrics, 'nonexistent.path');\n      expect(value4).toBe(0);\n    });\n\n    test('should calculate overall progress correctly', () => {\n      const targets = [\n        { progress: 100, metric: 'parserErrors' },\n        { progress: 75, metric: 'explicitAnyErrors' },\n        { progress: 50, metric: 'totalIssues' },\n        { progress: 85, metric: 'qualityScore' },\n      ];\n\n      const overallProgress = dashboard['calculateOverallProgress'](targets as any);\n      expect(overallProgress).toBe(78); // (100 + 75 + 50 + 85) / 4 = 77.5, rounded to 78\n    });\n\n    test('should get overall status correctly', () => {\n      const mockValidationResult = {\n        passed: true,\n        metrics: mockMetrics,\n        alerts: [],\n        recommendations: [],\n        regressionAnalysis: {\n          detected: false,\n          affectedMetrics: [],\n          severity: 'minor' as const,\n          recommendations: [],\n          historicalComparison: {\n            current: 1500,\n            previous: 1600,\n            change: -100,\n            changePercentage: -6.25,\n          },\n        },\n      };\n\n      const passingGates = [\n        { status: 'passing', blocksDeployment: true },\n        { status: 'passing', blocksDeployment: false },\n      ];\n\n      const status1 = dashboard['getOverallStatus'](mockValidationResult, passingGates as any);\n      expect(status1).toBe('👍 GOOD'); // Quality score 85 = good\n\n      const failingGates = [{ status: 'failing', blocksDeployment: true }];\n\n      const status2 = dashboard['getOverallStatus'](mockValidationResult, failingGates as any);\n      expect(status2).toBe('🚨 CRITICAL'); // Failing deployment-blocking gate = critical\n    });\n  });\n\n  describe('Error Handling', () => {\n    test('should handle file system errors gracefully', async () => {\n      mockReadFileSync.mockImplementation(() => {\n        throw new Error('File not found');\n      });\n\n      // Should not throw, should use defaults\n      const trends = await dashboard['analyzeTrends'](mockMetrics);\n      expect(trends).toEqual([]);\n    });\n\n    test('should handle command execution errors in maintenance', async () => {\n      mockExecSync.mockImplementation(() => {\n        throw new Error('Command failed');\n      });\n\n      const results = await dashboard['runScheduledMaintenance']();\n\n      // Should handle errors and continue\n      expect(results).toBeInstanceOf(Map);\n\n      // Check if any failed results were recorded\n      for (const [_id, result] of results) {\n        if (!result.success) {\n          expect(result.issues.length).toBeGreaterThan(0);\n          expect(result.nextActions.length).toBeGreaterThan(0);\n        }\n      }\n    });\n  });\n});\n\ndescribe('ZeroErrorDashboardCLI', () => {\n  // CLI tests would go here if needed\n  // For now, focusing on the core dashboard functionality\n});\n"],"version":3}