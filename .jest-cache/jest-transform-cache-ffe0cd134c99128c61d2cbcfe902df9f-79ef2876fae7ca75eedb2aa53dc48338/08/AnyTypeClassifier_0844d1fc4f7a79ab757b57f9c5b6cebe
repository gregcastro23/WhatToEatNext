62c34174fdfa8d09709fa8dfe13b7b6a
"use strict";
/**
 * Any Type Classifier
 * Analyzes each `any` type usage to determine if it's intentional or unintentional
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnyTypeClassifier = void 0;
const types_1 = require("./types");
class AnyTypeClassifier {
    rules;
    constructor(rules) {
        this.rules = {
            errorHandlingPatterns: [
                /catch\s*\(\s*\w+\s*:\s*any\s*\)/,
                /error\s*:\s*any/,
                /exception\s*:\s*any/
            ],
            externalApiPatterns: [
                /response\s*:\s*any/,
                /data\s*:\s*any/,
                /payload\s*:\s*any/,
                /apiResponse\s*:\s*any/
            ],
            testMockPatterns: [
                /mock\w*\s*:\s*any/,
                /jest\.fn\(\)\s*as\s*any/,
                /\.mockReturnValue\s*\(\s*\w+\s*as\s*any\s*\)/
            ],
            dynamicConfigPatterns: [
                /config\s*:\s*any/,
                /options\s*:\s*any/,
                /settings\s*:\s*any/
            ],
            legacyCompatibilityPatterns: [
                /legacy\w*\s*:\s*any/,
                /deprecated\w*\s*:\s*any/
            ],
            ...rules
        };
    }
    /**
     * Classify a single any type usage
     */
    async classify(context) {
        try {
            // Check for existing documentation
            if (context.hasExistingComment && this.hasIntentionalDocumentation(context.existingComment)) {
                return {
                    isIntentional: true,
                    confidence: 0.95,
                    reasoning: 'Explicitly documented as intentional',
                    requiresDocumentation: false,
                    category: this.categorizeFromComment(context.existingComment)
                };
            }
            // Check for error handling patterns
            if (this.matchesErrorHandling(context)) {
                return {
                    isIntentional: true,
                    confidence: 0.9,
                    reasoning: 'Used in error handling context',
                    requiresDocumentation: true,
                    category: types_1.AnyTypeCategory.ERROR_HANDLING
                };
            }
            // Check for external API patterns
            if (this.matchesExternalApi(context)) {
                return {
                    isIntentional: true,
                    confidence: 0.8,
                    reasoning: 'Used for external API response',
                    requiresDocumentation: true,
                    category: types_1.AnyTypeCategory.EXTERNAL_API
                };
            }
            // Check for test mock patterns
            if (context.isInTestFile && this.matchesTestMock(context)) {
                return {
                    isIntentional: true,
                    confidence: 0.85,
                    reasoning: 'Used in test mocking',
                    requiresDocumentation: true,
                    category: types_1.AnyTypeCategory.TEST_MOCK
                };
            }
            // Check for simple array types (high confidence for replacement)
            if (this.isSimpleArrayType(context)) {
                return {
                    isIntentional: false,
                    confidence: 0.95,
                    reasoning: 'Simple array type can be replaced with unknown[]',
                    suggestedReplacement: 'unknown[]',
                    requiresDocumentation: false,
                    category: types_1.AnyTypeCategory.ARRAY_TYPE
                };
            }
            // Check for Record types
            if (this.isRecordType(context)) {
                return {
                    isIntentional: false,
                    confidence: 0.8,
                    reasoning: 'Record type can be replaced with unknown',
                    suggestedReplacement: this.suggestRecordReplacement(context),
                    requiresDocumentation: false,
                    category: types_1.AnyTypeCategory.RECORD_TYPE
                };
            }
            // Domain-specific analysis
            const domainClassification = this.analyzeDomainSpecific(context);
            if (domainClassification) {
                return domainClassification;
            }
            // Default to unintentional with low confidence
            return {
                isIntentional: false,
                confidence: 0.6,
                reasoning: 'No clear intentional pattern detected',
                suggestedReplacement: 'unknown',
                requiresDocumentation: false,
                category: types_1.AnyTypeCategory.TYPE_ASSERTION
            };
        }
        catch (error) {
            throw new types_1.ClassificationError(`Failed to classify any type at ${context.filePath}:${context.lineNumber}`, context, error);
        }
    }
    /**
     * Classify multiple any type usages in batch
     */
    async classifyBatch(contexts) {
        const results = [];
        for (const context of contexts) {
            try {
                const classification = await this.classify(context);
                results.push(classification);
            }
            catch (error) {
                // Log error but continue with other classifications
                console.warn(`Classification failed for ${context.filePath}:${context.lineNumber}`, error);
                // Provide safe fallback classification
                results.push({
                    isIntentional: true,
                    confidence: 0.1,
                    reasoning: 'Classification failed, marked as intentional for safety',
                    requiresDocumentation: true,
                    category: types_1.AnyTypeCategory.LEGACY_COMPATIBILITY
                });
            }
        }
        return results;
    }
    hasIntentionalDocumentation(comment) {
        if (!comment)
            return false;
        const intentionalKeywords = [
            'intentionally any',
            'deliberately any',
            'explicitly any',
            'must be any',
            'required any'
        ];
        const lowerComment = comment.toLowerCase();
        return intentionalKeywords.some(keyword => lowerComment.includes(keyword));
    }
    categorizeFromComment(comment) {
        if (!comment)
            return types_1.AnyTypeCategory.LEGACY_COMPATIBILITY;
        const lowerComment = comment.toLowerCase();
        if (lowerComment.includes('external') || lowerComment.includes('api')) {
            return types_1.AnyTypeCategory.EXTERNAL_API;
        }
        if (lowerComment.includes('error') || lowerComment.includes('catch')) {
            return types_1.AnyTypeCategory.ERROR_HANDLING;
        }
        if (lowerComment.includes('test') || lowerComment.includes('mock')) {
            return types_1.AnyTypeCategory.TEST_MOCK;
        }
        if (lowerComment.includes('config') || lowerComment.includes('dynamic')) {
            return types_1.AnyTypeCategory.DYNAMIC_CONFIG;
        }
        return types_1.AnyTypeCategory.LEGACY_COMPATIBILITY;
    }
    matchesErrorHandling(context) {
        const codeWithSurrounding = [
            ...context.surroundingLines,
            context.codeSnippet
        ].join('\n');
        return this.rules.errorHandlingPatterns.some(pattern => pattern.test(codeWithSurrounding));
    }
    matchesExternalApi(context) {
        const codeWithSurrounding = [
            ...context.surroundingLines,
            context.codeSnippet
        ].join('\n');
        return this.rules.externalApiPatterns.some(pattern => pattern.test(codeWithSurrounding));
    }
    matchesTestMock(context) {
        const codeWithSurrounding = [
            ...context.surroundingLines,
            context.codeSnippet
        ].join('\n');
        return this.rules.testMockPatterns.some(pattern => pattern.test(codeWithSurrounding));
    }
    isSimpleArrayType(context) {
        // Match patterns like: any[], Array<any>
        const arrayPatterns = [
            /:\s*any\[\]/,
            /:\s*Array<any>/,
            /=\s*\[\]\s*as\s*any\[\]/
        ];
        return arrayPatterns.some(pattern => pattern.test(context.codeSnippet));
    }
    isRecordType(context) {
        // Match patterns like: Record<string, any>, Record<number, any>
        const recordPatterns = [
            /:\s*Record<\s*string\s*,\s*any\s*>/,
            /:\s*Record<\s*number\s*,\s*any\s*>/,
            /:\s*\{\s*\[key:\s*string\]\s*:\s*any\s*\}/
        ];
        return recordPatterns.some(pattern => pattern.test(context.codeSnippet));
    }
    suggestRecordReplacement(context) {
        if (context.codeSnippet.includes('Record<string, any>')) {
            return 'Record<string, unknown>';
        }
        if (context.codeSnippet.includes('Record<number, any>')) {
            return 'Record<number, unknown>';
        }
        if (context.codeSnippet.includes('[key: string]: any')) {
            return '[key: string]: unknown';
        }
        return 'unknown';
    }
    analyzeDomainSpecific(context) {
        const domain = context.domainContext.domain;
        switch (domain) {
            case types_1.CodeDomain.ASTROLOGICAL:
                return this.analyzeAstrologicalDomain(context);
            case types_1.CodeDomain.RECIPE:
                return this.analyzeRecipeDomain(context);
            case types_1.CodeDomain.CAMPAIGN:
                return this.analyzeCampaignDomain(context);
            default:
                return null;
        }
    }
    analyzeAstrologicalDomain(context) {
        // Astrological code often needs flexible typing for planetary positions
        if (context.codeSnippet.includes('planetary') ||
            context.codeSnippet.includes('position') ||
            context.codeSnippet.includes('astro')) {
            return {
                isIntentional: true,
                confidence: 0.8,
                reasoning: 'Astrological calculations require flexible typing for planetary data',
                requiresDocumentation: true,
                category: types_1.AnyTypeCategory.EXTERNAL_API
            };
        }
        return null;
    }
    analyzeRecipeDomain(context) {
        // Recipe code might have specific ingredient types
        if (context.codeSnippet.includes('ingredient') ||
            context.codeSnippet.includes('recipe')) {
            return {
                isIntentional: false,
                confidence: 0.7,
                reasoning: 'Recipe/ingredient data can use specific types',
                suggestedReplacement: 'Ingredient | Recipe',
                requiresDocumentation: false,
                category: types_1.AnyTypeCategory.TYPE_ASSERTION
            };
        }
        return null;
    }
    analyzeCampaignDomain(context) {
        // Campaign system needs flexibility for dynamic configurations
        if (context.codeSnippet.includes('campaign') ||
            context.codeSnippet.includes('config') ||
            context.codeSnippet.includes('metrics')) {
            return {
                isIntentional: true,
                confidence: 0.85,
                reasoning: 'Campaign system requires flexible typing for dynamic behavior',
                requiresDocumentation: true,
                category: types_1.AnyTypeCategory.DYNAMIC_CONFIG
            };
        }
        return null;
    }
}
exports.AnyTypeClassifier = AnyTypeClassifier;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,