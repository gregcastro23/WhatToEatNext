76f786a86bb1630eef0de87cac5b1c11
"use strict";
/**
 * LintingAnalysisService - Main integration service for linting error analysis
 *
 * This service orchestrates the complete linting analysis workflow, integrating
 * error analysis, classification, domain detection, and resolution strategy generation.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LintingAnalysisService = void 0;
const LoggingService_1 = require("@/services/LoggingService");
const DomainContextDetector_1 = require("./DomainContextDetector");
const ErrorClassificationSystem_1 = require("./ErrorClassificationSystem");
const LintingErrorAnalyzer_1 = require("./LintingErrorAnalyzer");
const ResolutionStrategyGenerator_1 = require("./ResolutionStrategyGenerator");
/**
 * Main LintingAnalysisService class
 */
class LintingAnalysisService {
    errorAnalyzer;
    classificationSystem;
    domainDetector;
    strategyGenerator;
    constructor(workspaceRoot) {
        this.errorAnalyzer = new LintingErrorAnalyzer_1.LintingErrorAnalyzer(workspaceRoot);
        this.classificationSystem = new ErrorClassificationSystem_1.ErrorClassificationSystem();
        this.domainDetector = new DomainContextDetector_1.DomainContextDetector(workspaceRoot);
        this.strategyGenerator = new ResolutionStrategyGenerator_1.ResolutionStrategyGenerator();
    }
    /**
     * Perform comprehensive linting analysis
     */
    async performComprehensiveAnalysis(options = {}) {
        const startTime = Date.now();
        LoggingService_1.log.info('🚀 Starting comprehensive linting analysis...');
        try {
            // Step 1: Analyze all linting issues
            LoggingService_1.log.info('📊 Analyzing linting issues...');
            const categorizedErrors = await this.errorAnalyzer.analyzeAllIssues();
            // Step 2: Classify errors with detailed analysis
            LoggingService_1.log.info('🔍 Classifying errors...');
            const classifications = await this.classifyErrors(categorizedErrors, options.focusAreas);
            // Step 3: Analyze files for domain context (if requested)
            let fileAnalyses = [];
            if (options.includeFileAnalysis !== false) {
                LoggingService_1.log.info('🏗️ Analyzing domain contexts...');
                fileAnalyses = await this.analyzeFileContexts(categorizedErrors);
            }
            // Step 4: Generate resolution strategies (if requested)
            let resolutionStrategies = [];
            let optimizedPlan = this.createEmptyPlan();
            if (options.generateStrategies !== false) {
                LoggingService_1.log.info('🎯 Generating resolution strategies...');
                const strategyResult = await this.generateResolutionStrategies(categorizedErrors, classifications, fileAnalyses, options.projectContext || {});
                resolutionStrategies = strategyResult.strategies;
                optimizedPlan = strategyResult.optimizedPlan;
            }
            // Step 5: Generate summary and recommendations
            LoggingService_1.log.info('📋 Generating recommendations...');
            const summary = this.generateSummary(categorizedErrors, classifications, resolutionStrategies);
            const recommendations = this.generateRecommendations(categorizedErrors, classifications, resolutionStrategies, options);
            // Step 6: Calculate metrics
            const metrics = this.calculateMetrics(startTime, categorizedErrors, classifications, fileAnalyses, resolutionStrategies);
            const result = {
                summary,
                categorizedErrors,
                fileAnalyses,
                resolutionStrategies,
                optimizedPlan,
                recommendations,
                metrics
            };
            LoggingService_1.log.info('✅ Comprehensive analysis complete ?? undefined');
            this.logAnalysisResults(result);
            return result;
        }
        catch (error) {
            console.error('❌ Analysis failed:', error);
            throw error;
        }
    }
    /**
     * Quick analysis for immediate insights
     */
    async performQuickAnalysis() {
        LoggingService_1.log.info('⚡ Performing quick linting analysis...');
        const categorizedErrors = await this.errorAnalyzer.analyzeAllIssues();
        const classifications = await this.classifyErrors(categorizedErrors);
        // Get top issues by frequency
        const issueFrequency = new Map();
        for (const issue of Object.values(categorizedErrors.byCategory).flat()) {
            const count = issueFrequency.get(issue.rule) || 0;
            issueFrequency.set(issue.rule, count + 1);
        }
        const topIssues = Array.from(issueFrequency.entries())
            .sort((a, b) => b[1] - a[1])
            .slice(0, 5)
            .map(([rule]) => Object.values(categorizedErrors.byCategory).flat().find(i => i.rule === rule))
            .filter((issue) => issue !== undefined)
            .filter(Boolean);
        // Get quick wins (auto-fixable, low risk)
        const quickWins = categorizedErrors.autoFixable
            .filter(issue => {
            const classification = classifications.find(c => c.ruleId === issue.rule);
            return classification && classification.riskProfile.overall === 'low';
        })
            .slice(0, 10);
        // Get critical issues
        const criticalIssues = Object.values(categorizedErrors.byCategory).flat()
            .filter(issue => {
            const classification = classifications.find(c => c.ruleId === issue.rule);
            return classification && classification.severity.level === 'critical';
        });
        const summary = this.generateSummary(categorizedErrors, classifications, []);
        return { summary, topIssues, quickWins, criticalIssues };
    }
    /**
     * Classify all errors with detailed analysis
     */
    async classifyErrors(categorizedErrors, focusAreas) {
        const allIssues = Object.values(categorizedErrors.byCategory).flat();
        const classifications = [];
        for (const issue of allIssues) {
            // Skip if not in focus areas
            if (focusAreas && !focusAreas.includes(issue.category.primary)) {
                continue;
            }
            const classification = this.classificationSystem.classifyError(issue.rule, issue.message, issue.file, issue.autoFixable);
            classifications.push(classification);
        }
        return classifications;
    }
    /**
     * Analyze file contexts for domain detection
     */
    async analyzeFileContexts(categorizedErrors) {
        const uniqueFiles = Array.from(new Set(Object.values(categorizedErrors.byCategory).flat().map(issue => issue.file)));
        return await this.domainDetector.analyzeFiles(uniqueFiles);
    }
    /**
     * Generate resolution strategies
     */
    async generateResolutionStrategies(categorizedErrors, classifications, fileAnalyses, projectContext) {
        const contexts = [];
        const allIssues = Object.values(categorizedErrors.byCategory).flat();
        // Create default project context
        const fullProjectContext = {
            hasTests: true,
            hasCICD: false,
            teamSize: 'small',
            riskTolerance: 'moderate',
            timeConstraints: 'moderate',
            ...projectContext
        };
        for (const issue of allIssues) {
            const classification = classifications.find(c => c.ruleId === issue.rule);
            const fileAnalysis = fileAnalyses.find(f => f.filePath === issue.file);
            if (classification && fileAnalysis) {
                contexts.push({
                    errorClassification: classification,
                    domainContext: fileAnalysis.domainContext,
                    fileAnalysis,
                    projectContext: fullProjectContext
                });
            }
        }
        return this.strategyGenerator.generateBatchStrategies(contexts);
    }
    /**
     * Generate analysis summary
     */
    generateSummary(categorizedErrors, classifications, strategies) {
        const criticalClassifications = classifications.filter(c => c.severity.level === 'critical');
        const domainSpecificIssues = Object.values(categorizedErrors.byCategory).flat()
            .filter(issue => issue.domainContext?.requiresSpecialHandling);
        const estimatedTime = strategies.reduce((sum, s) => sum + s.estimatedTime, 0);
        // Determine overall risk level
        const highRiskCount = classifications.filter(c => c.riskProfile.overall === 'high').length;
        const criticalRiskCount = classifications.filter(c => c.riskProfile.overall === 'critical').length;
        let overallRiskLevel = 'low';
        if (criticalRiskCount > 0)
            overallRiskLevel = 'critical';
        else if (highRiskCount > 10)
            overallRiskLevel = 'high';
        else if (highRiskCount > 0 || categorizedErrors.errors > 50)
            overallRiskLevel = 'medium';
        return {
            totalIssues: categorizedErrors.total,
            errorCount: categorizedErrors.errors,
            warningCount: categorizedErrors.warnings,
            autoFixableCount: categorizedErrors.autoFixable.length,
            domainSpecificCount: domainSpecificIssues.length,
            criticalIssuesCount: criticalClassifications.length,
            estimatedResolutionTime: estimatedTime,
            overallRiskLevel
        };
    }
    /**
     * Generate actionable recommendations
     */
    generateRecommendations(categorizedErrors, classifications, strategies, options) {
        const recommendations = [];
        // Immediate actions for critical issues
        const criticalIssues = classifications.filter(c => c.severity.level === 'critical');
        if (criticalIssues.length > 0) {
            recommendations.push({
                type: 'immediate',
                priority: 'critical',
                title: 'Address Critical Linting Issues',
                description: `${criticalIssues.length} critical issues require immediate attention`,
                rationale: 'Critical issues can block builds or cause runtime failures',
                estimatedImpact: 'high',
                actionItems: [
                    'Review each critical issue individually',
                    'Fix or suppress critical issues before proceeding',
                    'Validate fixes with comprehensive testing'
                ]
            });
        }
        // Quick wins for auto-fixable issues
        if (categorizedErrors.autoFixable.length > 10) {
            recommendations.push({
                type: 'immediate',
                priority: 'high',
                title: 'Apply Automated Fixes',
                description: `${categorizedErrors.autoFixable.length} issues can be automatically fixed`,
                rationale: 'Automated fixes provide immediate improvement with minimal risk',
                estimatedImpact: 'medium',
                actionItems: [
                    'Run ESLint with --fix flag for safe auto-fixes',
                    'Validate changes with build and test suite',
                    'Review auto-fixed changes before committing'
                ]
            });
        }
        // Domain-specific handling
        const domainIssues = Object.values(categorizedErrors.byCategory).flat()
            .filter(issue => issue.domainContext?.requiresSpecialHandling);
        if (domainIssues.length > 0) {
            recommendations.push({
                type: 'short-term',
                priority: 'high',
                title: 'Handle Domain-Specific Issues',
                description: `${domainIssues.length} issues require domain expertise`,
                rationale: 'Domain-specific code needs specialized knowledge for safe modification',
                estimatedImpact: 'high',
                actionItems: [
                    'Schedule review with domain experts',
                    'Create domain-specific linting rules',
                    'Document domain-specific patterns and exceptions'
                ]
            });
        }
        // TypeScript improvements
        const tsIssues = categorizedErrors.byCategory['typescript'] || [];
        if (tsIssues.length > 20) {
            recommendations.push({
                type: 'short-term',
                priority: 'medium',
                title: 'Improve TypeScript Usage',
                description: `${tsIssues.length} TypeScript-related issues found`,
                rationale: 'Better TypeScript usage improves code quality and maintainability',
                estimatedImpact: 'medium',
                actionItems: [
                    'Replace explicit any types with proper types',
                    'Fix unused variable warnings',
                    'Improve type definitions for better inference'
                ]
            });
        }
        // Long-term strategy
        if (categorizedErrors.total > 100) {
            recommendations.push({
                type: 'long-term',
                priority: 'medium',
                title: 'Implement Systematic Linting Improvement',
                description: 'Large number of issues suggests need for systematic approach',
                rationale: 'Systematic improvement prevents issue accumulation',
                estimatedImpact: 'high',
                actionItems: [
                    'Implement pre-commit hooks for linting',
                    'Set up CI/CD linting validation',
                    'Create team linting standards and guidelines',
                    'Regular linting debt reduction sprints'
                ]
            });
        }
        // Strategic recommendations based on options
        if (options.riskTolerance === 'conservative') {
            recommendations.push({
                type: 'strategic',
                priority: 'low',
                title: 'Enhance Code Quality Processes',
                description: 'Conservative approach suggests focus on quality processes',
                rationale: 'Strong processes prevent issues from being introduced',
                estimatedImpact: 'high',
                actionItems: [
                    'Implement stricter linting rules',
                    'Require code review for all changes',
                    'Set up automated quality gates',
                    'Regular code quality audits'
                ]
            });
        }
        return recommendations;
    }
    /**
     * Calculate comprehensive metrics
     */
    calculateMetrics(startTime, categorizedErrors, classifications, fileAnalyses, strategies) {
        const analysisTime = Date.now() - startTime;
        const filesAnalyzed = fileAnalyses.length;
        // Get unique rules triggered
        const rulesTriggered = Array.from(new Set(Object.values(categorizedErrors.byCategory).flat().map(issue => issue.rule)));
        // Calculate domain distribution
        const domainDistribution = {};
        for (const analysis of fileAnalyses) {
            const domain = analysis.domainContext.type;
            domainDistribution[domain] = (domainDistribution[domain] || 0) + 1;
        }
        // Calculate severity distribution
        const severityDistribution = {};
        for (const classification of classifications) {
            const severity = classification.severity.level;
            severityDistribution[severity] = (severityDistribution[severity] || 0) + 1;
        }
        // Calculate complexity distribution
        const complexityDistribution = {};
        for (const strategy of strategies) {
            const complexity = strategy.complexity;
            complexityDistribution[complexity] = (complexityDistribution[complexity] || 0) + 1;
        }
        // Calculate confidence scores
        const confidenceScores = strategies.map(s => s.confidence);
        const average = confidenceScores.reduce((sum, score) => sum + score, 0) / confidenceScores.length || 0;
        const sorted = [...confidenceScores].sort((a, b) => a - b);
        const median = sorted[Math.floor(sorted.length / 2)] || 0;
        const confidenceDistribution = {};
        for (const score of confidenceScores) {
            const bucket = score < 0.3 ? 'low' : score < 0.7 ? 'medium' : 'high';
            confidenceDistribution[bucket] = (confidenceDistribution[bucket] || 0) + 1;
        }
        return {
            analysisTime,
            filesAnalyzed,
            rulesTriggered,
            domainDistribution,
            severityDistribution,
            complexityDistribution,
            confidenceScores: {
                average,
                median,
                distribution: confidenceDistribution
            }
        };
    }
    /**
     * Create empty optimization plan
     */
    createEmptyPlan() {
        return {
            totalStrategies: 0,
            totalEstimatedTime: 0,
            totalSteps: 0,
            executionOrder: [],
            parallelizableWork: 0,
            riskDistribution: {},
            recommendations: []
        };
    }
    /**
     * Log analysis results
     */
    logAnalysisResults(result) {
        LoggingService_1.log.info('\n🎯 COMPREHENSIVE LINTING ANALYSIS RESULTS');
        LoggingService_1.log.info('==========================================');
        LoggingService_1.log.info(`📊 Total Issues: ${result.summary.totalIssues}`);
        LoggingService_1.log.info(`❌ Errors: ${result.summary.errorCount}`);
        LoggingService_1.log.info(`⚠️  Warnings: ${result.summary.warningCount}`);
        LoggingService_1.log.info(`🔧 Auto-fixable: ${result.summary.autoFixableCount}`);
        LoggingService_1.log.info(`🏗️ Domain-specific: ${result.summary.domainSpecificCount}`);
        LoggingService_1.log.info(`🚨 Critical: ${result.summary.criticalIssuesCount}`);
        LoggingService_1.log.info(`⏱️ Estimated Resolution Time: ${result.summary.estimatedResolutionTime} minutes`);
        LoggingService_1.log.info(`🎚️ Overall Risk Level: ${result.summary.overallRiskLevel.toUpperCase()}`);
        LoggingService_1.log.info('\n📋 TOP RECOMMENDATIONS:');
        result.recommendations
            .filter(r => r.priority === 'critical' || r.priority === 'high')
            .slice(0, 3)
            .forEach((rec, index) => {
            LoggingService_1.log.info(`${index + 1}. ${rec.title} (${rec.priority.toUpperCase()})`);
            LoggingService_1.log.info(`   ${rec.description}`);
        });
        LoggingService_1.log.info('\n📈 ANALYSIS METRICS:');
        LoggingService_1.log.info(`⏱️ Analysis Time: ${result.metrics.analysisTime}ms`);
        LoggingService_1.log.info(`📁 Files Analyzed: ${result.metrics.filesAnalyzed}`);
        LoggingService_1.log.info(`📏 Rules Triggered: ${result.metrics.rulesTriggered.length}`);
        LoggingService_1.log.info(`🎯 Average Confidence: ${Math.round(result.metrics.confidenceScores.average * 100)}%`);
        LoggingService_1.log.info('==========================================\n');
    }
}
exports.LintingAnalysisService = LintingAnalysisService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,