80f1a6f9eb597a1db934c65a9ad62b89
"use strict";
/**
 * Campaign Test Utilities
 *
 * Comprehensive utilities for testing campaign system functionality
 * with proper isolation and memory management.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.campaignTestData = exports.campaignTestAssertions = exports.validateCampaignMemoryUsage = exports.withCampaignTestIsolation = exports.executeCampaignTestScenario = exports.validateCampaignTestIsolation = exports.simulateProgressTracking = exports.simulateCampaignPhase = exports.createMockSafetyEvent = exports.createMockProgressMetrics = exports.createMockCampaignConfig = exports.cleanupCampaignTest = exports.setupCampaignTest = void 0;
const campaign_1 = require("../../types/campaign");
const CampaignTestController_1 = require("./CampaignTestController");
/**
 * Setup campaign test environment with proper isolation
 */
async function setupCampaignTest(setup) {
    const { testName, enableMemoryMonitoring = true, preventActualBuilds = true, preventGitOperations = true, mockProgressTracking = true, simulateRealProgress: _simulateRealProgress = false, customConfig: _customConfig, } = setup;
    // Initialize test controller with configuration
    await CampaignTestController_1.campaignTestController.initializeForTest(testName, {
        pauseProgressTracking: mockProgressTracking,
        preventBuildExecution: preventActualBuilds,
        preventGitOperations,
        enableMemoryMonitoring,
        isolateFileSystem: false,
        mockExternalAPIs: true,
    });
    // Pause campaign operations for test isolation
    await CampaignTestController_1.campaignTestController.pauseCampaignForTest(testName);
    // Get mock instances
    const mockInstances = CampaignTestController_1.campaignTestController.getMockInstances();
    const testSafeTracker = CampaignTestController_1.campaignTestController.getTestSafeTracker();
    // Validate that all required instances are available
    if (!mockInstances.controller || !mockInstances.tracker || !mockInstances.safety) {
        throw new Error('Failed to initialize campaign mock instances');
    }
    return {
        controller: mockInstances.controller,
        tracker: mockInstances.tracker,
        safety: mockInstances.safety,
        testSafeTracker,
        testController: CampaignTestController_1.campaignTestController,
    };
}
exports.setupCampaignTest = setupCampaignTest;
/**
 * Cleanup campaign test environment
 */
async function cleanupCampaignTest(testName) {
    await CampaignTestController_1.campaignTestController.cleanupAfterTest(testName);
}
exports.cleanupCampaignTest = cleanupCampaignTest;
/**
 * Create mock campaign configuration for testing
 */
function createMockCampaignConfig(overrides) {
    const defaultConfig = {
        phases: [
            {
                id: 'test-phase-1',
                name: 'Test Phase 1',
                description: 'Mock phase for testing',
                tools: [
                    {
                        scriptPath: 'mock-script.js',
                        parameters: { maxFiles: 10, autoFix: true },
                        batchSize: 10,
                        safetyLevel: 'HIGH',
                    },
                ],
                successCriteria: {
                    typeScriptErrors: 0,
                    lintingWarnings: 0,
                },
                safetyCheckpoints: [],
            },
        ],
        safetySettings: {
            maxFilesPerBatch: 10,
            buildValidationFrequency: 5,
            testValidationFrequency: 10,
            corruptionDetectionEnabled: true,
            automaticRollbackEnabled: true,
            stashRetentionDays: 7,
        },
        progressTargets: {
            typeScriptErrors: 0,
            lintingWarnings: 0,
            buildTime: 10,
            enterpriseSystems: 200,
        },
        toolConfiguration: {
            enhancedErrorFixer: 'mock-enhanced-fixer.js',
            explicitAnyFixer: 'mock-any-fixer.js',
            unusedVariablesFixer: 'mock-unused-fixer.js',
            consoleStatementFixer: 'mock-console-fixer.js',
        },
    };
    return { ...defaultConfig, ...overrides };
}
exports.createMockCampaignConfig = createMockCampaignConfig;
/**
 * Create mock progress metrics for testing
 */
function createMockProgressMetrics(overrides) {
    const defaultMetrics = {
        typeScriptErrors: {
            current: 50,
            target: 0,
            reduction: 36,
            percentage: 42,
        },
        lintingWarnings: {
            current: 2000,
            target: 0,
            reduction: 2506,
            percentage: 56,
        },
        buildPerformance: {
            currentTime: 8.5,
            targetTime: 10,
            cacheHitRate: 0.8,
            memoryUsage: 45,
        },
        enterpriseSystems: {
            current: 50,
            target: 200,
            transformedExports: 50,
        },
    };
    return { ...defaultMetrics, ...overrides };
}
exports.createMockProgressMetrics = createMockProgressMetrics;
/**
 * Create mock safety event for testing
 */
function createMockSafetyEvent(type, description, severity = campaign_1.SafetyEventSeverity.INFO) {
    return {
        type,
        timestamp: new Date(),
        description: `Mock: ${description}`,
        severity,
        action: 'MOCK_TEST_EVENT',
    };
}
exports.createMockSafetyEvent = createMockSafetyEvent;
/**
 * Simulate campaign phase execution for testing
 */
async function simulateCampaignPhase(context, phase, expectedResult) {
    const result = await context.controller.executePhase(phase);
    // Validate result if expected result is provided
    if (expectedResult) {
        expect(result.success).toBe(expectedResult.success ?? true);
        if (expectedResult.filesProcessed !== undefined) {
            expect(result.filesProcessed).toBe(expectedResult.filesProcessed);
        }
        if (expectedResult.errorsFixed !== undefined) {
            expect(result.errorsFixed).toBe(expectedResult.errorsFixed);
        }
    }
    return result;
}
exports.simulateCampaignPhase = simulateCampaignPhase;
/**
 * Simulate progress tracking for testing
 */
async function simulateProgressTracking(context, targetMetrics, durationMs = 1000) {
    if (context.testSafeTracker) {
        await context.testSafeTracker.simulateProgress(targetMetrics, durationMs, 'test-simulation');
        return await context.testSafeTracker.getProgressMetrics();
    }
    else {
        // Fallback to mock tracker
        context.tracker.updateMockMetrics(targetMetrics);
        return await context.tracker.getProgressMetrics();
    }
}
exports.simulateProgressTracking = simulateProgressTracking;
/**
 * Validate campaign test isolation
 */
function validateCampaignTestIsolation(context) {
    return context.testController.validateTestIsolation();
}
exports.validateCampaignTestIsolation = validateCampaignTestIsolation;
/**
 * Execute a complete campaign test scenario
 */
async function executeCampaignTestScenario(scenario, config) {
    // Setup test environment
    const context = await setupCampaignTest({
        testName: scenario.name,
        customConfig: config,
    });
    try {
        // Set initial metrics
        context.testController.updateMockMetrics(scenario.initialMetrics, scenario.name);
        // Execute phases
        const campaignConfig = createMockCampaignConfig(config);
        const results = [];
        for (let i = 0; i < campaignConfig.phases.length; i++) {
            const phase = campaignConfig.phases[i];
            const expectedResult = scenario.expectedPhaseResults[i] || {};
            const result = await simulateCampaignPhase(context, phase, expectedResult);
            results.push(result);
        }
        // Simulate progress to target metrics
        const finalMetrics = await simulateProgressTracking(context, scenario.targetMetrics, scenario.simulationDuration);
        // Get safety events
        const safetyEvents = context.controller.getSafetyEvents();
        // Validate expected safety events
        scenario.expectedSafetyEvents.forEach(expectedType => {
            const hasEvent = safetyEvents.some(event => event.type === expectedType);
            expect(hasEvent).toBe(true);
        });
        return {
            context,
            results,
            finalMetrics,
            safetyEvents,
        };
    }
    finally {
        // Cleanup is handled by the caller or test framework
    }
}
exports.executeCampaignTestScenario = executeCampaignTestScenario;
/**
 * Memory-safe test wrapper for campaign operations
 */
async function withCampaignTestIsolation(testName, testFn, setup) {
    const context = await setupCampaignTest({
        testName,
        ...setup,
    });
    try {
        return await testFn(context);
    }
    finally {
        await cleanupCampaignTest(testName);
    }
}
exports.withCampaignTestIsolation = withCampaignTestIsolation;
/**
 * Validate campaign system memory usage during tests
 */
function validateCampaignMemoryUsage(context) {
    const recommendations = [];
    let isMemoryEfficient = true;
    // Check test-safe tracker memory usage
    if (context.testSafeTracker) {
        const memoryStats = context.testSafeTracker.getMemoryStatistics();
        if (memoryStats && !memoryStats.memoryEfficient) {
            isMemoryEfficient = false;
            recommendations.push('Test-safe tracker memory usage is high');
        }
        return {
            isMemoryEfficient,
            memoryStats,
            recommendations,
        };
    }
    return {
        isMemoryEfficient: true,
        memoryStats: null,
        recommendations: [],
    };
}
exports.validateCampaignMemoryUsage = validateCampaignMemoryUsage;
/**
 * Create comprehensive test assertions for campaign operations
 */
exports.campaignTestAssertions = {
    /**
     * Assert that campaign phase completed successfully
     */
    phaseCompletedSuccessfully: (result) => {
        expect(result.success).toBe(true);
        expect(result.executionTime).toBeGreaterThan(0);
        expect(result.safetyEvents).toBeDefined();
    },
    /**
     * Assert that progress metrics improved
     */
    progressImproved: (initial, final) => {
        expect(final.typeScriptErrors.current).toBeLessThanOrEqual(initial.typeScriptErrors.current);
        expect(final.lintingWarnings.current).toBeLessThanOrEqual(initial.lintingWarnings.current);
    },
    /**
     * Assert that safety events were recorded
     */
    safetyEventsRecorded: (events, expectedTypes) => {
        expectedTypes.forEach(expectedType => {
            const hasEvent = events.some(event => event.type === expectedType);
            expect(hasEvent).toBe(true);
        });
    },
    /**
     * Assert that test isolation is working
     */
    testIsolationActive: (context) => {
        const validation = validateCampaignTestIsolation(context);
        expect(validation.isValid).toBe(true);
        expect(validation.issues).toHaveLength(0);
    },
    /**
     * Assert that memory usage is within acceptable limits
     */
    memoryUsageAcceptable: (context) => {
        const memoryValidation = validateCampaignMemoryUsage(context);
        expect(memoryValidation.isMemoryEfficient).toBe(true);
    },
};
/**
 * Common test data generators
 */
exports.campaignTestData = {
    /**
     * Generate realistic TypeScript error reduction scenario
     */
    typeScriptErrorReduction: () => ({
        name: 'typescript-error-reduction',
        initialMetrics: createMockProgressMetrics({
            typeScriptErrors: { current: 86, target: 0, reduction: 0, percentage: 0 },
        }),
        targetMetrics: {
            typeScriptErrors: { current: 0, target: 0, reduction: 86, percentage: 100 },
        },
        expectedPhaseResults: [{ success: true, errorsFixed: 86 }],
        expectedSafetyEvents: [
            campaign_1.SafetyEventType.CHECKPOINT_CREATED,
            campaign_1.SafetyEventType.CHECKPOINT_CREATED, // Start and end checkpoints
        ],
        simulationDuration: 2000,
    }),
    /**
     * Generate linting warning cleanup scenario
     */
    lintingWarningCleanup: () => ({
        name: 'linting-warning-cleanup',
        initialMetrics: createMockProgressMetrics({
            lintingWarnings: { current: 4506, target: 0, reduction: 0, percentage: 0 },
        }),
        targetMetrics: {
            lintingWarnings: { current: 0, target: 0, reduction: 4506, percentage: 100 },
        },
        expectedPhaseResults: [{ success: true, warningsFixed: 4506 }],
        expectedSafetyEvents: [campaign_1.SafetyEventType.CHECKPOINT_CREATED],
        simulationDuration: 3000,
    }),
    /**
     * Generate build performance optimization scenario
     */
    buildPerformanceOptimization: () => ({
        name: 'build-performance-optimization',
        initialMetrics: createMockProgressMetrics({
            buildPerformance: { currentTime: 15, targetTime: 10, cacheHitRate: 0.6, memoryUsage: 80 },
        }),
        targetMetrics: {
            buildPerformance: { currentTime: 8, targetTime: 10, cacheHitRate: 0.8, memoryUsage: 45 },
        },
        expectedPhaseResults: [{ success: true }],
        expectedSafetyEvents: [campaign_1.SafetyEventType.CHECKPOINT_CREATED],
        simulationDuration: 1500,
    }),
};
// Functions are already exported at their declarations above
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L2JhY2t1cHMvY29uc2VydmF0aXZlLXdhdmUtMjAyNS0wOC0xMVQwNS0yMS0zMy00MTBaL3NyYy9fX3Rlc3RzX18vdXRpbHMvY2FtcGFpZ25UZXN0VXRpbHMudHMiLCJtYXBwaW5ncyI6IjtBQUFBOzs7OztHQUtHOzs7QUFFSCxtREFROEI7QUFROUIscUVBQTBGO0FBMkIxRjs7R0FFRztBQUNJLEtBQUssVUFBVSxpQkFBaUIsQ0FBQyxLQUF3QjtJQUM5RCxNQUFNLEVBQ0osUUFBUSxFQUNSLHNCQUFzQixHQUFHLElBQUksRUFDN0IsbUJBQW1CLEdBQUcsSUFBSSxFQUMxQixvQkFBb0IsR0FBRyxJQUFJLEVBQzNCLG9CQUFvQixHQUFHLElBQUksRUFDM0Isb0JBQW9CLEVBQUUscUJBQXFCLEdBQUcsS0FBSyxFQUNuRCxZQUFZLEVBQUUsYUFBYSxHQUM1QixHQUFHLEtBQUssQ0FBQztJQUVWLGdEQUFnRDtJQUNoRCxNQUFNLCtDQUFzQixDQUFDLGlCQUFpQixDQUFDLFFBQVEsRUFBRTtRQUN2RCxxQkFBcUIsRUFBRSxvQkFBb0I7UUFDM0MscUJBQXFCLEVBQUUsbUJBQW1CO1FBQzFDLG9CQUFvQjtRQUNwQixzQkFBc0I7UUFDdEIsaUJBQWlCLEVBQUUsS0FBSztRQUN4QixnQkFBZ0IsRUFBRSxJQUFJO0tBQ3ZCLENBQUMsQ0FBQztJQUVILCtDQUErQztJQUMvQyxNQUFNLCtDQUFzQixDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRTVELHFCQUFxQjtJQUNyQixNQUFNLGFBQWEsR0FBRywrQ0FBc0IsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQ2hFLE1BQU0sZUFBZSxHQUFHLCtDQUFzQixDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFFcEUscURBQXFEO0lBQ3JELElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUU7UUFDaEYsTUFBTSxJQUFJLEtBQUssQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO0tBQ2pFO0lBRUQsT0FBTztRQUNMLFVBQVUsRUFBRSxhQUFhLENBQUMsVUFBVTtRQUNwQyxPQUFPLEVBQUUsYUFBYSxDQUFDLE9BQU87UUFDOUIsTUFBTSxFQUFFLGFBQWEsQ0FBQyxNQUFNO1FBQzVCLGVBQWU7UUFDZixjQUFjLEVBQUUsK0NBQXNCO0tBQ3ZDLENBQUM7QUFDSixDQUFDO0FBeENELDhDQXdDQztBQUVEOztHQUVHO0FBQ0ksS0FBSyxVQUFVLG1CQUFtQixDQUFDLFFBQWdCO0lBQ3hELE1BQU0sK0NBQXNCLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDMUQsQ0FBQztBQUZELGtEQUVDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQix3QkFBd0IsQ0FBQyxTQUFtQztJQUMxRSxNQUFNLGFBQWEsR0FBbUI7UUFDcEMsTUFBTSxFQUFFO1lBQ047Z0JBQ0UsRUFBRSxFQUFFLGNBQWM7Z0JBQ2xCLElBQUksRUFBRSxjQUFjO2dCQUNwQixXQUFXLEVBQUUsd0JBQXdCO2dCQUNyQyxLQUFLLEVBQUU7b0JBQ0w7d0JBQ0UsVUFBVSxFQUFFLGdCQUFnQjt3QkFDNUIsVUFBVSxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFO3dCQUMzQyxTQUFTLEVBQUUsRUFBRTt3QkFDYixXQUFXLEVBQUUsTUFBYTtxQkFDM0I7aUJBQ0Y7Z0JBQ0QsZUFBZSxFQUFFO29CQUNmLGdCQUFnQixFQUFFLENBQUM7b0JBQ25CLGVBQWUsRUFBRSxDQUFDO2lCQUNuQjtnQkFDRCxpQkFBaUIsRUFBRSxFQUFFO2FBQ3RCO1NBQ0Y7UUFDRCxjQUFjLEVBQUU7WUFDZCxnQkFBZ0IsRUFBRSxFQUFFO1lBQ3BCLHdCQUF3QixFQUFFLENBQUM7WUFDM0IsdUJBQXVCLEVBQUUsRUFBRTtZQUMzQiwwQkFBMEIsRUFBRSxJQUFJO1lBQ2hDLHdCQUF3QixFQUFFLElBQUk7WUFDOUIsa0JBQWtCLEVBQUUsQ0FBQztTQUN0QjtRQUNELGVBQWUsRUFBRTtZQUNmLGdCQUFnQixFQUFFLENBQUM7WUFDbkIsZUFBZSxFQUFFLENBQUM7WUFDbEIsU0FBUyxFQUFFLEVBQUU7WUFDYixpQkFBaUIsRUFBRSxHQUFHO1NBQ3ZCO1FBQ0QsaUJBQWlCLEVBQUU7WUFDakIsa0JBQWtCLEVBQUUsd0JBQXdCO1lBQzVDLGdCQUFnQixFQUFFLG1CQUFtQjtZQUNyQyxvQkFBb0IsRUFBRSxzQkFBc0I7WUFDNUMscUJBQXFCLEVBQUUsdUJBQXVCO1NBQy9DO0tBQ0YsQ0FBQztJQUVGLE9BQU8sRUFBRSxHQUFHLGFBQWEsRUFBRSxHQUFHLFNBQVMsRUFBRSxDQUFDO0FBQzVDLENBQUM7QUE3Q0QsNERBNkNDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQix5QkFBeUIsQ0FBQyxTQUFvQztJQUM1RSxNQUFNLGNBQWMsR0FBb0I7UUFDdEMsZ0JBQWdCLEVBQUU7WUFDaEIsT0FBTyxFQUFFLEVBQUU7WUFDWCxNQUFNLEVBQUUsQ0FBQztZQUNULFNBQVMsRUFBRSxFQUFFO1lBQ2IsVUFBVSxFQUFFLEVBQUU7U0FDZjtRQUNELGVBQWUsRUFBRTtZQUNmLE9BQU8sRUFBRSxJQUFJO1lBQ2IsTUFBTSxFQUFFLENBQUM7WUFDVCxTQUFTLEVBQUUsSUFBSTtZQUNmLFVBQVUsRUFBRSxFQUFFO1NBQ2Y7UUFDRCxnQkFBZ0IsRUFBRTtZQUNoQixXQUFXLEVBQUUsR0FBRztZQUNoQixVQUFVLEVBQUUsRUFBRTtZQUNkLFlBQVksRUFBRSxHQUFHO1lBQ2pCLFdBQVcsRUFBRSxFQUFFO1NBQ2hCO1FBQ0QsaUJBQWlCLEVBQUU7WUFDakIsT0FBTyxFQUFFLEVBQUU7WUFDWCxNQUFNLEVBQUUsR0FBRztZQUNYLGtCQUFrQixFQUFFLEVBQUU7U0FDdkI7S0FDRixDQUFDO0lBRUYsT0FBTyxFQUFFLEdBQUcsY0FBYyxFQUFFLEdBQUcsU0FBUyxFQUFFLENBQUM7QUFDN0MsQ0FBQztBQTVCRCw4REE0QkM7QUFFRDs7R0FFRztBQUNILFNBQWdCLHFCQUFxQixDQUNuQyxJQUFxQixFQUNyQixXQUFtQixFQUNuQixXQUFnQyw4QkFBbUIsQ0FBQyxJQUFJO0lBRXhELE9BQU87UUFDTCxJQUFJO1FBQ0osU0FBUyxFQUFFLElBQUksSUFBSSxFQUFFO1FBQ3JCLFdBQVcsRUFBRSxTQUFTLFdBQVcsRUFBRTtRQUNuQyxRQUFRO1FBQ1IsTUFBTSxFQUFFLGlCQUFpQjtLQUMxQixDQUFDO0FBQ0osQ0FBQztBQVpELHNEQVlDO0FBRUQ7O0dBRUc7QUFDSSxLQUFLLFVBQVUscUJBQXFCLENBQ3pDLE9BQTRCLEVBQzVCLEtBQW9CLEVBQ3BCLGNBQXFDO0lBRXJDLE1BQU0sTUFBTSxHQUFHLE1BQU0sT0FBTyxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFNUQsaURBQWlEO0lBQ2pELElBQUksY0FBYyxFQUFFO1FBQ2xCLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLENBQUM7UUFDNUQsSUFBSSxjQUFjLENBQUMsY0FBYyxLQUFLLFNBQVMsRUFBRTtZQUMvQyxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDLENBQUM7U0FDbkU7UUFDRCxJQUFJLGNBQWMsQ0FBQyxXQUFXLEtBQUssU0FBUyxFQUFFO1lBQzVDLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUM3RDtLQUNGO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQW5CRCxzREFtQkM7QUFFRDs7R0FFRztBQUNJLEtBQUssVUFBVSx3QkFBd0IsQ0FDNUMsT0FBNEIsRUFDNUIsYUFBdUMsRUFDdkMsYUFBcUIsSUFBSTtJQUV6QixJQUFJLE9BQU8sQ0FBQyxlQUFlLEVBQUU7UUFDM0IsTUFBTSxPQUFPLENBQUMsZUFBZSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsRUFBRSxVQUFVLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUM3RixPQUFPLE1BQU0sT0FBTyxDQUFDLGVBQWUsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0tBQzNEO1NBQU07UUFDTCwyQkFBMkI7UUFDM0IsT0FBTyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNqRCxPQUFPLE1BQU0sT0FBTyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0tBQ25EO0FBQ0gsQ0FBQztBQWJELDREQWFDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQiw2QkFBNkIsQ0FBQyxPQUE0QjtJQUt4RSxPQUFPLE9BQU8sQ0FBQyxjQUFjLENBQUMscUJBQXFCLEVBQUUsQ0FBQztBQUN4RCxDQUFDO0FBTkQsc0VBTUM7QUFjRDs7R0FFRztBQUNJLEtBQUssVUFBVSwyQkFBMkIsQ0FDL0MsUUFBOEIsRUFDOUIsTUFBZ0M7SUFPaEMseUJBQXlCO0lBQ3pCLE1BQU0sT0FBTyxHQUFHLE1BQU0saUJBQWlCLENBQUM7UUFDdEMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxJQUFJO1FBQ3ZCLFlBQVksRUFBRSxNQUFNO0tBQ3JCLENBQUMsQ0FBQztJQUVILElBQUk7UUFDRixzQkFBc0I7UUFDdEIsT0FBTyxDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVqRixpQkFBaUI7UUFDakIsTUFBTSxjQUFjLEdBQUcsd0JBQXdCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDeEQsTUFBTSxPQUFPLEdBQWtCLEVBQUUsQ0FBQztRQUVsQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDckQsTUFBTSxLQUFLLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2QyxNQUFNLGNBQWMsR0FBRyxRQUFRLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1lBRTlELE1BQU0sTUFBTSxHQUFHLE1BQU0scUJBQXFCLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxjQUFjLENBQUMsQ0FBQztZQUMzRSxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO1FBRUQsc0NBQXNDO1FBQ3RDLE1BQU0sWUFBWSxHQUFHLE1BQU0sd0JBQXdCLENBQ2pELE9BQU8sRUFDUCxRQUFRLENBQUMsYUFBYSxFQUN0QixRQUFRLENBQUMsa0JBQWtCLENBQzVCLENBQUM7UUFFRixvQkFBb0I7UUFDcEIsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUUxRCxrQ0FBa0M7UUFDbEMsUUFBUSxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUNuRCxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxZQUFZLENBQUMsQ0FBQztZQUN6RSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlCLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTztZQUNMLE9BQU87WUFDUCxPQUFPO1lBQ1AsWUFBWTtZQUNaLFlBQVk7U0FDYixDQUFDO0tBQ0g7WUFBUztRQUNSLHFEQUFxRDtLQUN0RDtBQUNILENBQUM7QUF4REQsa0VBd0RDO0FBRUQ7O0dBRUc7QUFDSSxLQUFLLFVBQVUseUJBQXlCLENBQzdDLFFBQWdCLEVBQ2hCLE1BQW9ELEVBQ3BELEtBQWtDO0lBRWxDLE1BQU0sT0FBTyxHQUFHLE1BQU0saUJBQWlCLENBQUM7UUFDdEMsUUFBUTtRQUNSLEdBQUcsS0FBSztLQUNULENBQUMsQ0FBQztJQUVILElBQUk7UUFDRixPQUFPLE1BQU0sTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQzlCO1lBQVM7UUFDUixNQUFNLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3JDO0FBQ0gsQ0FBQztBQWZELDhEQWVDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQiwyQkFBMkIsQ0FBQyxPQUE0QjtJQUt0RSxNQUFNLGVBQWUsR0FBYSxFQUFFLENBQUM7SUFDckMsSUFBSSxpQkFBaUIsR0FBRyxJQUFJLENBQUM7SUFFN0IsdUNBQXVDO0lBQ3ZDLElBQUksT0FBTyxDQUFDLGVBQWUsRUFBRTtRQUMzQixNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFFbEUsSUFBSSxXQUFXLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxFQUFFO1lBQy9DLGlCQUFpQixHQUFHLEtBQUssQ0FBQztZQUMxQixlQUFlLENBQUMsSUFBSSxDQUFDLHdDQUF3QyxDQUFDLENBQUM7U0FDaEU7UUFFRCxPQUFPO1lBQ0wsaUJBQWlCO1lBQ2pCLFdBQVc7WUFDWCxlQUFlO1NBQ2hCLENBQUM7S0FDSDtJQUVELE9BQU87UUFDTCxpQkFBaUIsRUFBRSxJQUFJO1FBQ3ZCLFdBQVcsRUFBRSxJQUFJO1FBQ2pCLGVBQWUsRUFBRSxFQUFFO0tBQ3BCLENBQUM7QUFDSixDQUFDO0FBN0JELGtFQTZCQztBQUVEOztHQUVHO0FBQ1UsUUFBQSxzQkFBc0IsR0FBRztJQUNwQzs7T0FFRztJQUNILDBCQUEwQixFQUFFLENBQUMsTUFBbUIsRUFBRSxFQUFFO1FBQ2xELE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hELE1BQU0sQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDNUMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsZ0JBQWdCLEVBQUUsQ0FBQyxPQUF3QixFQUFFLEtBQXNCLEVBQUUsRUFBRTtRQUNyRSxNQUFNLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM3RixNQUFNLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzdGLENBQUM7SUFFRDs7T0FFRztJQUNILG9CQUFvQixFQUFFLENBQUMsTUFBcUIsRUFBRSxhQUFnQyxFQUFFLEVBQUU7UUFDaEYsYUFBYSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUNuQyxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxZQUFZLENBQUMsQ0FBQztZQUNuRSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOztPQUVHO0lBQ0gsbUJBQW1CLEVBQUUsQ0FBQyxPQUE0QixFQUFFLEVBQUU7UUFDcEQsTUFBTSxVQUFVLEdBQUcsNkJBQTZCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDMUQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVEOztPQUVHO0lBQ0gscUJBQXFCLEVBQUUsQ0FBQyxPQUE0QixFQUFFLEVBQUU7UUFDdEQsTUFBTSxnQkFBZ0IsR0FBRywyQkFBMkIsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM5RCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEQsQ0FBQztDQUNGLENBQUM7QUFFRjs7R0FFRztBQUNVLFFBQUEsZ0JBQWdCLEdBQUc7SUFDOUI7O09BRUc7SUFDSCx3QkFBd0IsRUFBRSxHQUF5QixFQUFFLENBQUMsQ0FBQztRQUNyRCxJQUFJLEVBQUUsNEJBQTRCO1FBQ2xDLGNBQWMsRUFBRSx5QkFBeUIsQ0FBQztZQUN4QyxnQkFBZ0IsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUU7U0FDMUUsQ0FBQztRQUNGLGFBQWEsRUFBRTtZQUNiLGdCQUFnQixFQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRTtTQUM1RTtRQUNELG9CQUFvQixFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUMxRCxvQkFBb0IsRUFBRTtZQUNwQiwwQkFBZSxDQUFDLGtCQUFrQjtZQUNsQywwQkFBZSxDQUFDLGtCQUFrQixFQUFFLDRCQUE0QjtTQUNqRTtRQUNELGtCQUFrQixFQUFFLElBQUk7S0FDekIsQ0FBQztJQUVGOztPQUVHO0lBQ0gscUJBQXFCLEVBQUUsR0FBeUIsRUFBRSxDQUFDLENBQUM7UUFDbEQsSUFBSSxFQUFFLHlCQUF5QjtRQUMvQixjQUFjLEVBQUUseUJBQXlCLENBQUM7WUFDeEMsZUFBZSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFBRTtTQUMzRSxDQUFDO1FBQ0YsYUFBYSxFQUFFO1lBQ2IsZUFBZSxFQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRTtTQUM3RTtRQUNELG9CQUFvQixFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsQ0FBQztRQUM5RCxvQkFBb0IsRUFBRSxDQUFDLDBCQUFlLENBQUMsa0JBQWtCLENBQUM7UUFDMUQsa0JBQWtCLEVBQUUsSUFBSTtLQUN6QixDQUFDO0lBRUY7O09BRUc7SUFDSCw0QkFBNEIsRUFBRSxHQUF5QixFQUFFLENBQUMsQ0FBQztRQUN6RCxJQUFJLEVBQUUsZ0NBQWdDO1FBQ3RDLGNBQWMsRUFBRSx5QkFBeUIsQ0FBQztZQUN4QyxnQkFBZ0IsRUFBRSxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRSxZQUFZLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUU7U0FDMUYsQ0FBQztRQUNGLGFBQWEsRUFBRTtZQUNiLGdCQUFnQixFQUFFLEVBQUUsV0FBVyxFQUFFLENBQUMsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLFlBQVksRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRTtTQUN6RjtRQUNELG9CQUFvQixFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDekMsb0JBQW9CLEVBQUUsQ0FBQywwQkFBZSxDQUFDLGtCQUFrQixDQUFDO1FBQzFELGtCQUFrQixFQUFFLElBQUk7S0FDekIsQ0FBQztDQUNILENBQUM7QUFFRiw2REFBNkQiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L2JhY2t1cHMvY29uc2VydmF0aXZlLXdhdmUtMjAyNS0wOC0xMVQwNS0yMS0zMy00MTBaL3NyYy9fX3Rlc3RzX18vdXRpbHMvY2FtcGFpZ25UZXN0VXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDYW1wYWlnbiBUZXN0IFV0aWxpdGllc1xuICpcbiAqIENvbXByZWhlbnNpdmUgdXRpbGl0aWVzIGZvciB0ZXN0aW5nIGNhbXBhaWduIHN5c3RlbSBmdW5jdGlvbmFsaXR5XG4gKiB3aXRoIHByb3BlciBpc29sYXRpb24gYW5kIG1lbW9yeSBtYW5hZ2VtZW50LlxuICovXG5cbmltcG9ydCB7XG4gIENhbXBhaWduQ29uZmlnLFxuICBDYW1wYWlnblBoYXNlLFxuICBQcm9ncmVzc01ldHJpY3MsXG4gIFNhZmV0eUV2ZW50LFxuICBTYWZldHlFdmVudFR5cGUsXG4gIFNhZmV0eUV2ZW50U2V2ZXJpdHksXG4gIFBoYXNlUmVzdWx0LFxufSBmcm9tICcuLi8uLi90eXBlcy9jYW1wYWlnbic7XG5pbXBvcnQge1xuICBNb2NrQ2FtcGFpZ25Db250cm9sbGVyLFxuICBNb2NrUHJvZ3Jlc3NUcmFja2VyLFxuICBNb2NrU2FmZXR5UHJvdG9jb2wsXG4gIGNhbXBhaWduVGVzdElzb2xhdGlvbiBhcyBfY2FtcGFpZ25UZXN0SXNvbGF0aW9uLFxufSBmcm9tICcuLi9tb2Nrcy9DYW1wYWlnblN5c3RlbU1vY2tzJztcblxuaW1wb3J0IHsgY2FtcGFpZ25UZXN0Q29udHJvbGxlciwgQ2FtcGFpZ25UZXN0Q29udHJvbGxlciB9IGZyb20gJy4vQ2FtcGFpZ25UZXN0Q29udHJvbGxlcic7XG5pbXBvcnQgeyBUZXN0U2FmZVByb2dyZXNzVHJhY2tlciB9IGZyb20gJy4vVGVzdFNhZmVQcm9ncmVzc1RyYWNrZXInO1xuXG4vKipcbiAqIFRlc3Qgc2V0dXAgY29uZmlndXJhdGlvbiBmb3IgY2FtcGFpZ24gdGVzdHNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDYW1wYWlnblRlc3RTZXR1cCB7XG4gIHRlc3ROYW1lOiBzdHJpbmc7XG4gIGVuYWJsZU1lbW9yeU1vbml0b3Jpbmc/OiBib29sZWFuO1xuICBwcmV2ZW50QWN0dWFsQnVpbGRzPzogYm9vbGVhbjtcbiAgcHJldmVudEdpdE9wZXJhdGlvbnM/OiBib29sZWFuO1xuICBtb2NrUHJvZ3Jlc3NUcmFja2luZz86IGJvb2xlYW47XG4gIHNpbXVsYXRlUmVhbFByb2dyZXNzPzogYm9vbGVhbjtcbiAgY3VzdG9tQ29uZmlnPzogUGFydGlhbDxDYW1wYWlnbkNvbmZpZz47XG59XG5cbi8qKlxuICogQ2FtcGFpZ24gdGVzdCBjb250ZXh0IHRoYXQgcHJvdmlkZXMgYWNjZXNzIHRvIGFsbCBtb2NrIGluc3RhbmNlc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIENhbXBhaWduVGVzdENvbnRleHQge1xuICBjb250cm9sbGVyOiBNb2NrQ2FtcGFpZ25Db250cm9sbGVyO1xuICB0cmFja2VyOiBNb2NrUHJvZ3Jlc3NUcmFja2VyO1xuICBzYWZldHk6IE1vY2tTYWZldHlQcm90b2NvbDtcbiAgdGVzdFNhZmVUcmFja2VyOiBUZXN0U2FmZVByb2dyZXNzVHJhY2tlciB8IG51bGw7XG4gIHRlc3RDb250cm9sbGVyOiBDYW1wYWlnblRlc3RDb250cm9sbGVyO1xufVxuXG4vKipcbiAqIFNldHVwIGNhbXBhaWduIHRlc3QgZW52aXJvbm1lbnQgd2l0aCBwcm9wZXIgaXNvbGF0aW9uXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZXR1cENhbXBhaWduVGVzdChzZXR1cDogQ2FtcGFpZ25UZXN0U2V0dXApOiBQcm9taXNlPENhbXBhaWduVGVzdENvbnRleHQ+IHtcbiAgY29uc3Qge1xuICAgIHRlc3ROYW1lLFxuICAgIGVuYWJsZU1lbW9yeU1vbml0b3JpbmcgPSB0cnVlLFxuICAgIHByZXZlbnRBY3R1YWxCdWlsZHMgPSB0cnVlLFxuICAgIHByZXZlbnRHaXRPcGVyYXRpb25zID0gdHJ1ZSxcbiAgICBtb2NrUHJvZ3Jlc3NUcmFja2luZyA9IHRydWUsXG4gICAgc2ltdWxhdGVSZWFsUHJvZ3Jlc3M6IF9zaW11bGF0ZVJlYWxQcm9ncmVzcyA9IGZhbHNlLFxuICAgIGN1c3RvbUNvbmZpZzogX2N1c3RvbUNvbmZpZyxcbiAgfSA9IHNldHVwO1xuXG4gIC8vIEluaXRpYWxpemUgdGVzdCBjb250cm9sbGVyIHdpdGggY29uZmlndXJhdGlvblxuICBhd2FpdCBjYW1wYWlnblRlc3RDb250cm9sbGVyLmluaXRpYWxpemVGb3JUZXN0KHRlc3ROYW1lLCB7XG4gICAgcGF1c2VQcm9ncmVzc1RyYWNraW5nOiBtb2NrUHJvZ3Jlc3NUcmFja2luZyxcbiAgICBwcmV2ZW50QnVpbGRFeGVjdXRpb246IHByZXZlbnRBY3R1YWxCdWlsZHMsXG4gICAgcHJldmVudEdpdE9wZXJhdGlvbnMsXG4gICAgZW5hYmxlTWVtb3J5TW9uaXRvcmluZyxcbiAgICBpc29sYXRlRmlsZVN5c3RlbTogZmFsc2UsXG4gICAgbW9ja0V4dGVybmFsQVBJczogdHJ1ZSxcbiAgfSk7XG5cbiAgLy8gUGF1c2UgY2FtcGFpZ24gb3BlcmF0aW9ucyBmb3IgdGVzdCBpc29sYXRpb25cbiAgYXdhaXQgY2FtcGFpZ25UZXN0Q29udHJvbGxlci5wYXVzZUNhbXBhaWduRm9yVGVzdCh0ZXN0TmFtZSk7XG5cbiAgLy8gR2V0IG1vY2sgaW5zdGFuY2VzXG4gIGNvbnN0IG1vY2tJbnN0YW5jZXMgPSBjYW1wYWlnblRlc3RDb250cm9sbGVyLmdldE1vY2tJbnN0YW5jZXMoKTtcbiAgY29uc3QgdGVzdFNhZmVUcmFja2VyID0gY2FtcGFpZ25UZXN0Q29udHJvbGxlci5nZXRUZXN0U2FmZVRyYWNrZXIoKTtcblxuICAvLyBWYWxpZGF0ZSB0aGF0IGFsbCByZXF1aXJlZCBpbnN0YW5jZXMgYXJlIGF2YWlsYWJsZVxuICBpZiAoIW1vY2tJbnN0YW5jZXMuY29udHJvbGxlciB8fCAhbW9ja0luc3RhbmNlcy50cmFja2VyIHx8ICFtb2NrSW5zdGFuY2VzLnNhZmV0eSkge1xuICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGluaXRpYWxpemUgY2FtcGFpZ24gbW9jayBpbnN0YW5jZXMnKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgY29udHJvbGxlcjogbW9ja0luc3RhbmNlcy5jb250cm9sbGVyLFxuICAgIHRyYWNrZXI6IG1vY2tJbnN0YW5jZXMudHJhY2tlcixcbiAgICBzYWZldHk6IG1vY2tJbnN0YW5jZXMuc2FmZXR5LFxuICAgIHRlc3RTYWZlVHJhY2tlcixcbiAgICB0ZXN0Q29udHJvbGxlcjogY2FtcGFpZ25UZXN0Q29udHJvbGxlcixcbiAgfTtcbn1cblxuLyoqXG4gKiBDbGVhbnVwIGNhbXBhaWduIHRlc3QgZW52aXJvbm1lbnRcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNsZWFudXBDYW1wYWlnblRlc3QodGVzdE5hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICBhd2FpdCBjYW1wYWlnblRlc3RDb250cm9sbGVyLmNsZWFudXBBZnRlclRlc3QodGVzdE5hbWUpO1xufVxuXG4vKipcbiAqIENyZWF0ZSBtb2NrIGNhbXBhaWduIGNvbmZpZ3VyYXRpb24gZm9yIHRlc3RpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU1vY2tDYW1wYWlnbkNvbmZpZyhvdmVycmlkZXM/OiBQYXJ0aWFsPENhbXBhaWduQ29uZmlnPik6IENhbXBhaWduQ29uZmlnIHtcbiAgY29uc3QgZGVmYXVsdENvbmZpZzogQ2FtcGFpZ25Db25maWcgPSB7XG4gICAgcGhhc2VzOiBbXG4gICAgICB7XG4gICAgICAgIGlkOiAndGVzdC1waGFzZS0xJyxcbiAgICAgICAgbmFtZTogJ1Rlc3QgUGhhc2UgMScsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnTW9jayBwaGFzZSBmb3IgdGVzdGluZycsXG4gICAgICAgIHRvb2xzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgc2NyaXB0UGF0aDogJ21vY2stc2NyaXB0LmpzJyxcbiAgICAgICAgICAgIHBhcmFtZXRlcnM6IHsgbWF4RmlsZXM6IDEwLCBhdXRvRml4OiB0cnVlIH0sXG4gICAgICAgICAgICBiYXRjaFNpemU6IDEwLFxuICAgICAgICAgICAgc2FmZXR5TGV2ZWw6ICdISUdIJyBhcyBhbnksXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgc3VjY2Vzc0NyaXRlcmlhOiB7XG4gICAgICAgICAgdHlwZVNjcmlwdEVycm9yczogMCxcbiAgICAgICAgICBsaW50aW5nV2FybmluZ3M6IDAsXG4gICAgICAgIH0sXG4gICAgICAgIHNhZmV0eUNoZWNrcG9pbnRzOiBbXSxcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzYWZldHlTZXR0aW5nczoge1xuICAgICAgbWF4RmlsZXNQZXJCYXRjaDogMTAsXG4gICAgICBidWlsZFZhbGlkYXRpb25GcmVxdWVuY3k6IDUsXG4gICAgICB0ZXN0VmFsaWRhdGlvbkZyZXF1ZW5jeTogMTAsXG4gICAgICBjb3JydXB0aW9uRGV0ZWN0aW9uRW5hYmxlZDogdHJ1ZSxcbiAgICAgIGF1dG9tYXRpY1JvbGxiYWNrRW5hYmxlZDogdHJ1ZSxcbiAgICAgIHN0YXNoUmV0ZW50aW9uRGF5czogNyxcbiAgICB9LFxuICAgIHByb2dyZXNzVGFyZ2V0czoge1xuICAgICAgdHlwZVNjcmlwdEVycm9yczogMCxcbiAgICAgIGxpbnRpbmdXYXJuaW5nczogMCxcbiAgICAgIGJ1aWxkVGltZTogMTAsXG4gICAgICBlbnRlcnByaXNlU3lzdGVtczogMjAwLFxuICAgIH0sXG4gICAgdG9vbENvbmZpZ3VyYXRpb246IHtcbiAgICAgIGVuaGFuY2VkRXJyb3JGaXhlcjogJ21vY2stZW5oYW5jZWQtZml4ZXIuanMnLFxuICAgICAgZXhwbGljaXRBbnlGaXhlcjogJ21vY2stYW55LWZpeGVyLmpzJyxcbiAgICAgIHVudXNlZFZhcmlhYmxlc0ZpeGVyOiAnbW9jay11bnVzZWQtZml4ZXIuanMnLFxuICAgICAgY29uc29sZVN0YXRlbWVudEZpeGVyOiAnbW9jay1jb25zb2xlLWZpeGVyLmpzJyxcbiAgICB9LFxuICB9O1xuXG4gIHJldHVybiB7IC4uLmRlZmF1bHRDb25maWcsIC4uLm92ZXJyaWRlcyB9O1xufVxuXG4vKipcbiAqIENyZWF0ZSBtb2NrIHByb2dyZXNzIG1ldHJpY3MgZm9yIHRlc3RpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU1vY2tQcm9ncmVzc01ldHJpY3Mob3ZlcnJpZGVzPzogUGFydGlhbDxQcm9ncmVzc01ldHJpY3M+KTogUHJvZ3Jlc3NNZXRyaWNzIHtcbiAgY29uc3QgZGVmYXVsdE1ldHJpY3M6IFByb2dyZXNzTWV0cmljcyA9IHtcbiAgICB0eXBlU2NyaXB0RXJyb3JzOiB7XG4gICAgICBjdXJyZW50OiA1MCxcbiAgICAgIHRhcmdldDogMCxcbiAgICAgIHJlZHVjdGlvbjogMzYsXG4gICAgICBwZXJjZW50YWdlOiA0MixcbiAgICB9LFxuICAgIGxpbnRpbmdXYXJuaW5nczoge1xuICAgICAgY3VycmVudDogMjAwMCxcbiAgICAgIHRhcmdldDogMCxcbiAgICAgIHJlZHVjdGlvbjogMjUwNixcbiAgICAgIHBlcmNlbnRhZ2U6IDU2LFxuICAgIH0sXG4gICAgYnVpbGRQZXJmb3JtYW5jZToge1xuICAgICAgY3VycmVudFRpbWU6IDguNSxcbiAgICAgIHRhcmdldFRpbWU6IDEwLFxuICAgICAgY2FjaGVIaXRSYXRlOiAwLjgsXG4gICAgICBtZW1vcnlVc2FnZTogNDUsXG4gICAgfSxcbiAgICBlbnRlcnByaXNlU3lzdGVtczoge1xuICAgICAgY3VycmVudDogNTAsXG4gICAgICB0YXJnZXQ6IDIwMCxcbiAgICAgIHRyYW5zZm9ybWVkRXhwb3J0czogNTAsXG4gICAgfSxcbiAgfTtcblxuICByZXR1cm4geyAuLi5kZWZhdWx0TWV0cmljcywgLi4ub3ZlcnJpZGVzIH07XG59XG5cbi8qKlxuICogQ3JlYXRlIG1vY2sgc2FmZXR5IGV2ZW50IGZvciB0ZXN0aW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNb2NrU2FmZXR5RXZlbnQoXG4gIHR5cGU6IFNhZmV0eUV2ZW50VHlwZSxcbiAgZGVzY3JpcHRpb246IHN0cmluZyxcbiAgc2V2ZXJpdHk6IFNhZmV0eUV2ZW50U2V2ZXJpdHkgPSBTYWZldHlFdmVudFNldmVyaXR5LklORk8sXG4pOiBTYWZldHlFdmVudCB7XG4gIHJldHVybiB7XG4gICAgdHlwZSxcbiAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgZGVzY3JpcHRpb246IGBNb2NrOiAke2Rlc2NyaXB0aW9ufWAsXG4gICAgc2V2ZXJpdHksXG4gICAgYWN0aW9uOiAnTU9DS19URVNUX0VWRU5UJyxcbiAgfTtcbn1cblxuLyoqXG4gKiBTaW11bGF0ZSBjYW1wYWlnbiBwaGFzZSBleGVjdXRpb24gZm9yIHRlc3RpbmdcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNpbXVsYXRlQ2FtcGFpZ25QaGFzZShcbiAgY29udGV4dDogQ2FtcGFpZ25UZXN0Q29udGV4dCxcbiAgcGhhc2U6IENhbXBhaWduUGhhc2UsXG4gIGV4cGVjdGVkUmVzdWx0PzogUGFydGlhbDxQaGFzZVJlc3VsdD4sXG4pOiBQcm9taXNlPFBoYXNlUmVzdWx0PiB7XG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbnRleHQuY29udHJvbGxlci5leGVjdXRlUGhhc2UocGhhc2UpO1xuXG4gIC8vIFZhbGlkYXRlIHJlc3VsdCBpZiBleHBlY3RlZCByZXN1bHQgaXMgcHJvdmlkZWRcbiAgaWYgKGV4cGVjdGVkUmVzdWx0KSB7XG4gICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKGV4cGVjdGVkUmVzdWx0LnN1Y2Nlc3MgPz8gdHJ1ZSk7XG4gICAgaWYgKGV4cGVjdGVkUmVzdWx0LmZpbGVzUHJvY2Vzc2VkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGV4cGVjdChyZXN1bHQuZmlsZXNQcm9jZXNzZWQpLnRvQmUoZXhwZWN0ZWRSZXN1bHQuZmlsZXNQcm9jZXNzZWQpO1xuICAgIH1cbiAgICBpZiAoZXhwZWN0ZWRSZXN1bHQuZXJyb3JzRml4ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcnNGaXhlZCkudG9CZShleHBlY3RlZFJlc3VsdC5lcnJvcnNGaXhlZCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBTaW11bGF0ZSBwcm9ncmVzcyB0cmFja2luZyBmb3IgdGVzdGluZ1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2ltdWxhdGVQcm9ncmVzc1RyYWNraW5nKFxuICBjb250ZXh0OiBDYW1wYWlnblRlc3RDb250ZXh0LFxuICB0YXJnZXRNZXRyaWNzOiBQYXJ0aWFsPFByb2dyZXNzTWV0cmljcz4sXG4gIGR1cmF0aW9uTXM6IG51bWJlciA9IDEwMDAsXG4pOiBQcm9taXNlPFByb2dyZXNzTWV0cmljcz4ge1xuICBpZiAoY29udGV4dC50ZXN0U2FmZVRyYWNrZXIpIHtcbiAgICBhd2FpdCBjb250ZXh0LnRlc3RTYWZlVHJhY2tlci5zaW11bGF0ZVByb2dyZXNzKHRhcmdldE1ldHJpY3MsIGR1cmF0aW9uTXMsICd0ZXN0LXNpbXVsYXRpb24nKTtcbiAgICByZXR1cm4gYXdhaXQgY29udGV4dC50ZXN0U2FmZVRyYWNrZXIuZ2V0UHJvZ3Jlc3NNZXRyaWNzKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2sgdG8gbW9jayB0cmFja2VyXG4gICAgY29udGV4dC50cmFja2VyLnVwZGF0ZU1vY2tNZXRyaWNzKHRhcmdldE1ldHJpY3MpO1xuICAgIHJldHVybiBhd2FpdCBjb250ZXh0LnRyYWNrZXIuZ2V0UHJvZ3Jlc3NNZXRyaWNzKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBWYWxpZGF0ZSBjYW1wYWlnbiB0ZXN0IGlzb2xhdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVDYW1wYWlnblRlc3RJc29sYXRpb24oY29udGV4dDogQ2FtcGFpZ25UZXN0Q29udGV4dCk6IHtcbiAgaXNWYWxpZDogYm9vbGVhbjtcbiAgaXNzdWVzOiBzdHJpbmdbXTtcbiAgd2FybmluZ3M6IHN0cmluZ1tdO1xufSB7XG4gIHJldHVybiBjb250ZXh0LnRlc3RDb250cm9sbGVyLnZhbGlkYXRlVGVzdElzb2xhdGlvbigpO1xufVxuXG4vKipcbiAqIENyZWF0ZSB0ZXN0IHNjZW5hcmlvIGZvciBjYW1wYWlnbiBvcGVyYXRpb25zXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2FtcGFpZ25UZXN0U2NlbmFyaW8ge1xuICBuYW1lOiBzdHJpbmc7XG4gIGluaXRpYWxNZXRyaWNzOiBQcm9ncmVzc01ldHJpY3M7XG4gIHRhcmdldE1ldHJpY3M6IFBhcnRpYWw8UHJvZ3Jlc3NNZXRyaWNzPjtcbiAgZXhwZWN0ZWRQaGFzZVJlc3VsdHM6IFBhcnRpYWw8UGhhc2VSZXN1bHQ+W107XG4gIGV4cGVjdGVkU2FmZXR5RXZlbnRzOiBTYWZldHlFdmVudFR5cGVbXTtcbiAgc2ltdWxhdGlvbkR1cmF0aW9uPzogbnVtYmVyO1xufVxuXG4vKipcbiAqIEV4ZWN1dGUgYSBjb21wbGV0ZSBjYW1wYWlnbiB0ZXN0IHNjZW5hcmlvXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBleGVjdXRlQ2FtcGFpZ25UZXN0U2NlbmFyaW8oXG4gIHNjZW5hcmlvOiBDYW1wYWlnblRlc3RTY2VuYXJpbyxcbiAgY29uZmlnPzogUGFydGlhbDxDYW1wYWlnbkNvbmZpZz4sXG4pOiBQcm9taXNlPHtcbiAgY29udGV4dDogQ2FtcGFpZ25UZXN0Q29udGV4dDtcbiAgcmVzdWx0czogUGhhc2VSZXN1bHRbXTtcbiAgZmluYWxNZXRyaWNzOiBQcm9ncmVzc01ldHJpY3M7XG4gIHNhZmV0eUV2ZW50czogU2FmZXR5RXZlbnRbXTtcbn0+IHtcbiAgLy8gU2V0dXAgdGVzdCBlbnZpcm9ubWVudFxuICBjb25zdCBjb250ZXh0ID0gYXdhaXQgc2V0dXBDYW1wYWlnblRlc3Qoe1xuICAgIHRlc3ROYW1lOiBzY2VuYXJpby5uYW1lLFxuICAgIGN1c3RvbUNvbmZpZzogY29uZmlnLFxuICB9KTtcblxuICB0cnkge1xuICAgIC8vIFNldCBpbml0aWFsIG1ldHJpY3NcbiAgICBjb250ZXh0LnRlc3RDb250cm9sbGVyLnVwZGF0ZU1vY2tNZXRyaWNzKHNjZW5hcmlvLmluaXRpYWxNZXRyaWNzLCBzY2VuYXJpby5uYW1lKTtcblxuICAgIC8vIEV4ZWN1dGUgcGhhc2VzXG4gICAgY29uc3QgY2FtcGFpZ25Db25maWcgPSBjcmVhdGVNb2NrQ2FtcGFpZ25Db25maWcoY29uZmlnKTtcbiAgICBjb25zdCByZXN1bHRzOiBQaGFzZVJlc3VsdFtdID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNhbXBhaWduQ29uZmlnLnBoYXNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgcGhhc2UgPSBjYW1wYWlnbkNvbmZpZy5waGFzZXNbaV07XG4gICAgICBjb25zdCBleHBlY3RlZFJlc3VsdCA9IHNjZW5hcmlvLmV4cGVjdGVkUGhhc2VSZXN1bHRzW2ldIHx8IHt9O1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzaW11bGF0ZUNhbXBhaWduUGhhc2UoY29udGV4dCwgcGhhc2UsIGV4cGVjdGVkUmVzdWx0KTtcbiAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgIH1cblxuICAgIC8vIFNpbXVsYXRlIHByb2dyZXNzIHRvIHRhcmdldCBtZXRyaWNzXG4gICAgY29uc3QgZmluYWxNZXRyaWNzID0gYXdhaXQgc2ltdWxhdGVQcm9ncmVzc1RyYWNraW5nKFxuICAgICAgY29udGV4dCxcbiAgICAgIHNjZW5hcmlvLnRhcmdldE1ldHJpY3MsXG4gICAgICBzY2VuYXJpby5zaW11bGF0aW9uRHVyYXRpb24sXG4gICAgKTtcblxuICAgIC8vIEdldCBzYWZldHkgZXZlbnRzXG4gICAgY29uc3Qgc2FmZXR5RXZlbnRzID0gY29udGV4dC5jb250cm9sbGVyLmdldFNhZmV0eUV2ZW50cygpO1xuXG4gICAgLy8gVmFsaWRhdGUgZXhwZWN0ZWQgc2FmZXR5IGV2ZW50c1xuICAgIHNjZW5hcmlvLmV4cGVjdGVkU2FmZXR5RXZlbnRzLmZvckVhY2goZXhwZWN0ZWRUeXBlID0+IHtcbiAgICAgIGNvbnN0IGhhc0V2ZW50ID0gc2FmZXR5RXZlbnRzLnNvbWUoZXZlbnQgPT4gZXZlbnQudHlwZSA9PT0gZXhwZWN0ZWRUeXBlKTtcbiAgICAgIGV4cGVjdChoYXNFdmVudCkudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICBjb250ZXh0LFxuICAgICAgcmVzdWx0cyxcbiAgICAgIGZpbmFsTWV0cmljcyxcbiAgICAgIHNhZmV0eUV2ZW50cyxcbiAgICB9O1xuICB9IGZpbmFsbHkge1xuICAgIC8vIENsZWFudXAgaXMgaGFuZGxlZCBieSB0aGUgY2FsbGVyIG9yIHRlc3QgZnJhbWV3b3JrXG4gIH1cbn1cblxuLyoqXG4gKiBNZW1vcnktc2FmZSB0ZXN0IHdyYXBwZXIgZm9yIGNhbXBhaWduIG9wZXJhdGlvbnNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHdpdGhDYW1wYWlnblRlc3RJc29sYXRpb248VD4oXG4gIHRlc3ROYW1lOiBzdHJpbmcsXG4gIHRlc3RGbjogKGNvbnRleHQ6IENhbXBhaWduVGVzdENvbnRleHQpID0+IFByb21pc2U8VD4sXG4gIHNldHVwPzogUGFydGlhbDxDYW1wYWlnblRlc3RTZXR1cD4sXG4pOiBQcm9taXNlPFQ+IHtcbiAgY29uc3QgY29udGV4dCA9IGF3YWl0IHNldHVwQ2FtcGFpZ25UZXN0KHtcbiAgICB0ZXN0TmFtZSxcbiAgICAuLi5zZXR1cCxcbiAgfSk7XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gYXdhaXQgdGVzdEZuKGNvbnRleHQpO1xuICB9IGZpbmFsbHkge1xuICAgIGF3YWl0IGNsZWFudXBDYW1wYWlnblRlc3QodGVzdE5hbWUpO1xuICB9XG59XG5cbi8qKlxuICogVmFsaWRhdGUgY2FtcGFpZ24gc3lzdGVtIG1lbW9yeSB1c2FnZSBkdXJpbmcgdGVzdHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlQ2FtcGFpZ25NZW1vcnlVc2FnZShjb250ZXh0OiBDYW1wYWlnblRlc3RDb250ZXh0KToge1xuICBpc01lbW9yeUVmZmljaWVudDogYm9vbGVhbjtcbiAgbWVtb3J5U3RhdHM6IGFueTtcbiAgcmVjb21tZW5kYXRpb25zOiBzdHJpbmdbXTtcbn0ge1xuICBjb25zdCByZWNvbW1lbmRhdGlvbnM6IHN0cmluZ1tdID0gW107XG4gIGxldCBpc01lbW9yeUVmZmljaWVudCA9IHRydWU7XG5cbiAgLy8gQ2hlY2sgdGVzdC1zYWZlIHRyYWNrZXIgbWVtb3J5IHVzYWdlXG4gIGlmIChjb250ZXh0LnRlc3RTYWZlVHJhY2tlcikge1xuICAgIGNvbnN0IG1lbW9yeVN0YXRzID0gY29udGV4dC50ZXN0U2FmZVRyYWNrZXIuZ2V0TWVtb3J5U3RhdGlzdGljcygpO1xuXG4gICAgaWYgKG1lbW9yeVN0YXRzICYmICFtZW1vcnlTdGF0cy5tZW1vcnlFZmZpY2llbnQpIHtcbiAgICAgIGlzTWVtb3J5RWZmaWNpZW50ID0gZmFsc2U7XG4gICAgICByZWNvbW1lbmRhdGlvbnMucHVzaCgnVGVzdC1zYWZlIHRyYWNrZXIgbWVtb3J5IHVzYWdlIGlzIGhpZ2gnKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgaXNNZW1vcnlFZmZpY2llbnQsXG4gICAgICBtZW1vcnlTdGF0cyxcbiAgICAgIHJlY29tbWVuZGF0aW9ucyxcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBpc01lbW9yeUVmZmljaWVudDogdHJ1ZSxcbiAgICBtZW1vcnlTdGF0czogbnVsbCxcbiAgICByZWNvbW1lbmRhdGlvbnM6IFtdLFxuICB9O1xufVxuXG4vKipcbiAqIENyZWF0ZSBjb21wcmVoZW5zaXZlIHRlc3QgYXNzZXJ0aW9ucyBmb3IgY2FtcGFpZ24gb3BlcmF0aW9uc1xuICovXG5leHBvcnQgY29uc3QgY2FtcGFpZ25UZXN0QXNzZXJ0aW9ucyA9IHtcbiAgLyoqXG4gICAqIEFzc2VydCB0aGF0IGNhbXBhaWduIHBoYXNlIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHlcbiAgICovXG4gIHBoYXNlQ29tcGxldGVkU3VjY2Vzc2Z1bGx5OiAocmVzdWx0OiBQaGFzZVJlc3VsdCkgPT4ge1xuICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICBleHBlY3QocmVzdWx0LmV4ZWN1dGlvblRpbWUpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICBleHBlY3QocmVzdWx0LnNhZmV0eUV2ZW50cykudG9CZURlZmluZWQoKTtcbiAgfSxcblxuICAvKipcbiAgICogQXNzZXJ0IHRoYXQgcHJvZ3Jlc3MgbWV0cmljcyBpbXByb3ZlZFxuICAgKi9cbiAgcHJvZ3Jlc3NJbXByb3ZlZDogKGluaXRpYWw6IFByb2dyZXNzTWV0cmljcywgZmluYWw6IFByb2dyZXNzTWV0cmljcykgPT4ge1xuICAgIGV4cGVjdChmaW5hbC50eXBlU2NyaXB0RXJyb3JzLmN1cnJlbnQpLnRvQmVMZXNzVGhhbk9yRXF1YWwoaW5pdGlhbC50eXBlU2NyaXB0RXJyb3JzLmN1cnJlbnQpO1xuICAgIGV4cGVjdChmaW5hbC5saW50aW5nV2FybmluZ3MuY3VycmVudCkudG9CZUxlc3NUaGFuT3JFcXVhbChpbml0aWFsLmxpbnRpbmdXYXJuaW5ncy5jdXJyZW50KTtcbiAgfSxcblxuICAvKipcbiAgICogQXNzZXJ0IHRoYXQgc2FmZXR5IGV2ZW50cyB3ZXJlIHJlY29yZGVkXG4gICAqL1xuICBzYWZldHlFdmVudHNSZWNvcmRlZDogKGV2ZW50czogU2FmZXR5RXZlbnRbXSwgZXhwZWN0ZWRUeXBlczogU2FmZXR5RXZlbnRUeXBlW10pID0+IHtcbiAgICBleHBlY3RlZFR5cGVzLmZvckVhY2goZXhwZWN0ZWRUeXBlID0+IHtcbiAgICAgIGNvbnN0IGhhc0V2ZW50ID0gZXZlbnRzLnNvbWUoZXZlbnQgPT4gZXZlbnQudHlwZSA9PT0gZXhwZWN0ZWRUeXBlKTtcbiAgICAgIGV4cGVjdChoYXNFdmVudCkudG9CZSh0cnVlKTtcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogQXNzZXJ0IHRoYXQgdGVzdCBpc29sYXRpb24gaXMgd29ya2luZ1xuICAgKi9cbiAgdGVzdElzb2xhdGlvbkFjdGl2ZTogKGNvbnRleHQ6IENhbXBhaWduVGVzdENvbnRleHQpID0+IHtcbiAgICBjb25zdCB2YWxpZGF0aW9uID0gdmFsaWRhdGVDYW1wYWlnblRlc3RJc29sYXRpb24oY29udGV4dCk7XG4gICAgZXhwZWN0KHZhbGlkYXRpb24uaXNWYWxpZCkudG9CZSh0cnVlKTtcbiAgICBleHBlY3QodmFsaWRhdGlvbi5pc3N1ZXMpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgfSxcblxuICAvKipcbiAgICogQXNzZXJ0IHRoYXQgbWVtb3J5IHVzYWdlIGlzIHdpdGhpbiBhY2NlcHRhYmxlIGxpbWl0c1xuICAgKi9cbiAgbWVtb3J5VXNhZ2VBY2NlcHRhYmxlOiAoY29udGV4dDogQ2FtcGFpZ25UZXN0Q29udGV4dCkgPT4ge1xuICAgIGNvbnN0IG1lbW9yeVZhbGlkYXRpb24gPSB2YWxpZGF0ZUNhbXBhaWduTWVtb3J5VXNhZ2UoY29udGV4dCk7XG4gICAgZXhwZWN0KG1lbW9yeVZhbGlkYXRpb24uaXNNZW1vcnlFZmZpY2llbnQpLnRvQmUodHJ1ZSk7XG4gIH0sXG59O1xuXG4vKipcbiAqIENvbW1vbiB0ZXN0IGRhdGEgZ2VuZXJhdG9yc1xuICovXG5leHBvcnQgY29uc3QgY2FtcGFpZ25UZXN0RGF0YSA9IHtcbiAgLyoqXG4gICAqIEdlbmVyYXRlIHJlYWxpc3RpYyBUeXBlU2NyaXB0IGVycm9yIHJlZHVjdGlvbiBzY2VuYXJpb1xuICAgKi9cbiAgdHlwZVNjcmlwdEVycm9yUmVkdWN0aW9uOiAoKTogQ2FtcGFpZ25UZXN0U2NlbmFyaW8gPT4gKHtcbiAgICBuYW1lOiAndHlwZXNjcmlwdC1lcnJvci1yZWR1Y3Rpb24nLFxuICAgIGluaXRpYWxNZXRyaWNzOiBjcmVhdGVNb2NrUHJvZ3Jlc3NNZXRyaWNzKHtcbiAgICAgIHR5cGVTY3JpcHRFcnJvcnM6IHsgY3VycmVudDogODYsIHRhcmdldDogMCwgcmVkdWN0aW9uOiAwLCBwZXJjZW50YWdlOiAwIH0sXG4gICAgfSksXG4gICAgdGFyZ2V0TWV0cmljczoge1xuICAgICAgdHlwZVNjcmlwdEVycm9yczogeyBjdXJyZW50OiAwLCB0YXJnZXQ6IDAsIHJlZHVjdGlvbjogODYsIHBlcmNlbnRhZ2U6IDEwMCB9LFxuICAgIH0sXG4gICAgZXhwZWN0ZWRQaGFzZVJlc3VsdHM6IFt7IHN1Y2Nlc3M6IHRydWUsIGVycm9yc0ZpeGVkOiA4NiB9XSxcbiAgICBleHBlY3RlZFNhZmV0eUV2ZW50czogW1xuICAgICAgU2FmZXR5RXZlbnRUeXBlLkNIRUNLUE9JTlRfQ1JFQVRFRCxcbiAgICAgIFNhZmV0eUV2ZW50VHlwZS5DSEVDS1BPSU5UX0NSRUFURUQsIC8vIFN0YXJ0IGFuZCBlbmQgY2hlY2twb2ludHNcbiAgICBdLFxuICAgIHNpbXVsYXRpb25EdXJhdGlvbjogMjAwMCxcbiAgfSksXG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGxpbnRpbmcgd2FybmluZyBjbGVhbnVwIHNjZW5hcmlvXG4gICAqL1xuICBsaW50aW5nV2FybmluZ0NsZWFudXA6ICgpOiBDYW1wYWlnblRlc3RTY2VuYXJpbyA9PiAoe1xuICAgIG5hbWU6ICdsaW50aW5nLXdhcm5pbmctY2xlYW51cCcsXG4gICAgaW5pdGlhbE1ldHJpY3M6IGNyZWF0ZU1vY2tQcm9ncmVzc01ldHJpY3Moe1xuICAgICAgbGludGluZ1dhcm5pbmdzOiB7IGN1cnJlbnQ6IDQ1MDYsIHRhcmdldDogMCwgcmVkdWN0aW9uOiAwLCBwZXJjZW50YWdlOiAwIH0sXG4gICAgfSksXG4gICAgdGFyZ2V0TWV0cmljczoge1xuICAgICAgbGludGluZ1dhcm5pbmdzOiB7IGN1cnJlbnQ6IDAsIHRhcmdldDogMCwgcmVkdWN0aW9uOiA0NTA2LCBwZXJjZW50YWdlOiAxMDAgfSxcbiAgICB9LFxuICAgIGV4cGVjdGVkUGhhc2VSZXN1bHRzOiBbeyBzdWNjZXNzOiB0cnVlLCB3YXJuaW5nc0ZpeGVkOiA0NTA2IH1dLFxuICAgIGV4cGVjdGVkU2FmZXR5RXZlbnRzOiBbU2FmZXR5RXZlbnRUeXBlLkNIRUNLUE9JTlRfQ1JFQVRFRF0sXG4gICAgc2ltdWxhdGlvbkR1cmF0aW9uOiAzMDAwLFxuICB9KSxcblxuICAvKipcbiAgICogR2VuZXJhdGUgYnVpbGQgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uIHNjZW5hcmlvXG4gICAqL1xuICBidWlsZFBlcmZvcm1hbmNlT3B0aW1pemF0aW9uOiAoKTogQ2FtcGFpZ25UZXN0U2NlbmFyaW8gPT4gKHtcbiAgICBuYW1lOiAnYnVpbGQtcGVyZm9ybWFuY2Utb3B0aW1pemF0aW9uJyxcbiAgICBpbml0aWFsTWV0cmljczogY3JlYXRlTW9ja1Byb2dyZXNzTWV0cmljcyh7XG4gICAgICBidWlsZFBlcmZvcm1hbmNlOiB7IGN1cnJlbnRUaW1lOiAxNSwgdGFyZ2V0VGltZTogMTAsIGNhY2hlSGl0UmF0ZTogMC42LCBtZW1vcnlVc2FnZTogODAgfSxcbiAgICB9KSxcbiAgICB0YXJnZXRNZXRyaWNzOiB7XG4gICAgICBidWlsZFBlcmZvcm1hbmNlOiB7IGN1cnJlbnRUaW1lOiA4LCB0YXJnZXRUaW1lOiAxMCwgY2FjaGVIaXRSYXRlOiAwLjgsIG1lbW9yeVVzYWdlOiA0NSB9LFxuICAgIH0sXG4gICAgZXhwZWN0ZWRQaGFzZVJlc3VsdHM6IFt7IHN1Y2Nlc3M6IHRydWUgfV0sXG4gICAgZXhwZWN0ZWRTYWZldHlFdmVudHM6IFtTYWZldHlFdmVudFR5cGUuQ0hFQ0tQT0lOVF9DUkVBVEVEXSxcbiAgICBzaW11bGF0aW9uRHVyYXRpb246IDE1MDAsXG4gIH0pLFxufTtcblxuLy8gRnVuY3Rpb25zIGFyZSBhbHJlYWR5IGV4cG9ydGVkIGF0IHRoZWlyIGRlY2xhcmF0aW9ucyBhYm92ZVxuIl0sInZlcnNpb24iOjN9