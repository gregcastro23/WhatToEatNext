926e70c204396181dcea1baf80c42a4e
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
// Mock all dependencies
jest.mock('next/navigation', () => ({
    useRouter: () => ({
        push: jest.fn(),
        back: jest.fn(),
        forward: jest.fn(),
        refresh: jest.fn(),
        replace: jest.fn()
    })
}));
jest.mock('@/contexts/AlchemicalContext/hooks');
jest.mock('@/hooks/useStatePreservation');
jest.mock('@/utils/logger', () => ({
    logger: {
        debug: jest.fn(),
        info: jest.fn(),
        warn: jest.fn(),
        error: jest.fn()
    }
}));
// Mock components with realistic behavior
jest.mock('@/components/CuisineRecommender', () => {
    return function MockCuisineRecommender() {
        const [selectedCuisine, setSelectedCuisine] = react_1.default.useState(null);
        return ((0, jsx_runtime_1.jsxs)("div", { "data-testid": "cuisine-recommender", children: [(0, jsx_runtime_1.jsx)("h3", { children: "Cuisine Recommendations" }), (0, jsx_runtime_1.jsx)("div", { className: "cuisine-list", children: ['Italian', 'Chinese', 'Mexican', 'Indian'].map(cuisine => ((0, jsx_runtime_1.jsx)("button", { onClick: () => setSelectedCuisine(cuisine), className: selectedCuisine === cuisine ? 'selected' : '', "data-testid": `cuisine-${cuisine.toLowerCase()}`, children: cuisine }, cuisine))) }), selectedCuisine && ((0, jsx_runtime_1.jsxs)("div", { "data-testid": "selected-cuisine", children: ["Selected: ", selectedCuisine] }))] }));
    };
});
jest.mock('@/components/IngredientRecommender', () => {
    return function MockIngredientRecommender({ maxDisplayed = 8 }) {
        const [selectedIngredients, setSelectedIngredients] = react_1.default.useState([]);
        const ingredients = ['Tomatoes', 'Onions', 'Garlic', 'Basil', 'Olive Oil', 'Cheese', 'Pasta', 'Chicken'];
        const displayedIngredients = ingredients.slice(0, maxDisplayed);
        const toggleIngredient = (ingredient) => {
            setSelectedIngredients(prev => prev.includes(ingredient)
                ? prev.filter(i => i !== ingredient)
                : [...prev, ingredient]);
        };
        return ((0, jsx_runtime_1.jsxs)("div", { "data-testid": "ingredient-recommender", children: [(0, jsx_runtime_1.jsx)("h3", { children: "Ingredient Recommendations" }), (0, jsx_runtime_1.jsx)("div", { className: "ingredient-list", children: displayedIngredients.map(ingredient => ((0, jsx_runtime_1.jsx)("button", { onClick: () => toggleIngredient(ingredient), className: selectedIngredients.includes(ingredient) ? 'selected' : '', "data-testid": `ingredient-${ingredient.toLowerCase()}`, children: ingredient }, ingredient))) }), (0, jsx_runtime_1.jsxs)("div", { "data-testid": "selected-ingredients", children: ["Selected: ", selectedIngredients.join(', ')] })] }));
    };
});
jest.mock('@/components/CookingMethodsSection', () => {
    return function MockCookingMethodsSection({ maxDisplayed = 6, onViewMore }) {
        const [selectedMethod, setSelectedMethod] = react_1.default.useState(null);
        const methods = ['Sauté', 'Roast', 'Grill', 'Steam', 'Braise', 'Stir-fry', 'Bake', 'Poach'];
        const displayedMethods = methods.slice(0, maxDisplayed);
        return ((0, jsx_runtime_1.jsxs)("div", { "data-testid": "cooking-methods", children: [(0, jsx_runtime_1.jsx)("h3", { children: "Cooking Methods" }), (0, jsx_runtime_1.jsx)("div", { className: "methods-list", children: displayedMethods.map(method => ((0, jsx_runtime_1.jsx)("button", { onClick: () => setSelectedMethod(method), className: selectedMethod === method ? 'selected' : '', "data-testid": `method-${method.toLowerCase()}`, children: method }, method))) }), selectedMethod && ((0, jsx_runtime_1.jsxs)("div", { "data-testid": "selected-method", children: ["Selected: ", selectedMethod] })), (0, jsx_runtime_1.jsx)("button", { onClick: onViewMore, "data-testid": "view-more-methods", children: "View More Methods" })] }));
    };
});
jest.mock('@/components/recipes/RecipeBuilderSimple', () => {
    return function MockRecipeBuilderSimple() {
        const [recipeName, setRecipeName] = react_1.default.useState('');
        const [ingredients, setIngredients] = react_1.default.useState([]);
        const [steps, setSteps] = react_1.default.useState([]);
        const addIngredient = () => {
            setIngredients(prev => [...prev, `Ingredient ${prev.length + 1}`]);
        };
        const addStep = () => {
            setSteps(prev => [...prev, `Step ${prev.length + 1}`]);
        };
        const canSave = recipeName.trim() && ingredients.length > 0 && steps.length > 0;
        return ((0, jsx_runtime_1.jsxs)("div", { "data-testid": "recipe-builder", children: [(0, jsx_runtime_1.jsx)("h3", { children: "Recipe Builder" }), (0, jsx_runtime_1.jsx)("input", { type: "text", placeholder: "Recipe Name", value: recipeName, onChange: (e) => setRecipeName(e.target.value), "data-testid": "recipe-name-input" }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("button", { onClick: addIngredient, "data-testid": "add-ingredient", children: "Add Ingredient" }), (0, jsx_runtime_1.jsxs)("div", { "data-testid": "ingredients-count", children: ["Ingredients: ", ingredients.length] })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("button", { onClick: addStep, "data-testid": "add-step", children: "Add Step" }), (0, jsx_runtime_1.jsxs)("div", { "data-testid": "steps-count", children: ["Steps: ", steps.length] })] }), (0, jsx_runtime_1.jsx)("button", { disabled: !canSave, "data-testid": "save-recipe", children: "Save Recipe" })] }));
    };
});
jest.mock('@/components/debug/ConsolidatedDebugInfo', () => {
    return function MockConsolidatedDebugInfo() {
        return ((0, jsx_runtime_1.jsxs)("div", { "data-testid": "debug-info", children: [(0, jsx_runtime_1.jsx)("h4", { children: "Debug Panel" }), (0, jsx_runtime_1.jsx)("div", { children: "Performance: OK" }), (0, jsx_runtime_1.jsx)("div", { children: "Astrological State: Active" })] }));
    };
});
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const user_event_1 = __importDefault(require("@testing-library/user-event"));
const MainPageLayout_1 = __importDefault(require("@/components/layout/MainPageLayout"));
const hooks_1 = require("@/contexts/AlchemicalContext/hooks");
const useStatePreservation_1 = require("@/hooks/useStatePreservation");
describe('Main Page Integration Tests', () => {
    const mockAlchemicalContext = {
        state: {
            astrologicalState: {
                sunSign: 'aries'
            },
            elementalState: {
                Fire: 0.3,
                Water: 0.2,
                Earth: 0.3,
                Air: 0.2
            }
        },
        planetaryPositions: {
            sun: { sign: 'aries' }
        },
        isDaytime: true
    };
    const mockNavigationState = {
        saveState: jest.fn(),
        getState: jest.fn(() => ({}))
    };
    const mockScrollPreservation = {
        restoreScrollPosition: jest.fn()
    };
    beforeEach(() => {
        jest.clearAllMocks();
        hooks_1.useAlchemical.mockReturnValue(mockAlchemicalContext);
        useStatePreservation_1.useNavigationState.mockReturnValue(mockNavigationState);
        useStatePreservation_1.useScrollPreservation.mockReturnValue(mockScrollPreservation);
        useStatePreservation_1.useAutoStateCleanup.mockReturnValue(undefined);
        // Mock window.scrollY
        Object.defineProperty(window, 'scrollY', {
            value: 0,
            writable: true
        });
        // Mock getElementById for navigation
        jest.spyOn(document, 'getElementById').mockImplementation((id) => ({
            scrollIntoView: jest.fn(),
            style: {},
            classList: {
                add: jest.fn(),
                remove: jest.fn()
            }
        }));
    });
    afterEach(() => {
        jest.restoreAllMocks();
    });
    it('renders all main sections and they interact correctly', async () => {
        await (0, react_2.act)(async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(MainPageLayout_1.default, {}));
        });
        // Wait for all components to load
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByTestId('cuisine-recommender')).toBeInTheDocument();
            expect(react_2.screen.getByTestId('ingredient-recommender')).toBeInTheDocument();
            expect(react_2.screen.getByTestId('cooking-methods')).toBeInTheDocument();
            expect(react_2.screen.getByTestId('recipe-builder')).toBeInTheDocument();
        });
        // Test cuisine selection
        const italianButton = react_2.screen.getByTestId('cuisine-italian');
        await (0, react_2.act)(async () => {
            react_2.fireEvent.click(italianButton);
        });
        expect(react_2.screen.getByText('Selected: Italian')).toBeInTheDocument();
        // Test ingredient selection
        const tomatoButton = react_2.screen.getByTestId('ingredient-tomatoes');
        await (0, react_2.act)(async () => {
            react_2.fireEvent.click(tomatoButton);
        });
        expect(react_2.screen.getByText('Selected: Tomatoes')).toBeInTheDocument();
        // Test cooking method selection
        const sauteButton = react_2.screen.getByTestId('method-sauté');
        await (0, react_2.act)(async () => {
            react_2.fireEvent.click(sauteButton);
        });
        expect(react_2.screen.getByText('Selected: Sauté')).toBeInTheDocument();
    });
    it('handles navigation between sections correctly', async () => {
        const mockOnSectionNavigate = jest.fn();
        await (0, react_2.act)(async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(MainPageLayout_1.default, { onSectionNavigate: mockOnSectionNavigate }));
        });
        // Test navigation to cuisine section
        const cuisineNavButton = react_2.screen.getByText('Cuisine Recommendations');
        await (0, react_2.act)(async () => {
            react_2.fireEvent.click(cuisineNavButton);
        });
        expect(mockOnSectionNavigate).toHaveBeenCalledWith('cuisine');
        // Test navigation to ingredients section
        const ingredientsNavButton = react_2.screen.getByText('Ingredient Recommendations');
        await (0, react_2.act)(async () => {
            react_2.fireEvent.click(ingredientsNavButton);
        });
        expect(mockOnSectionNavigate).toHaveBeenCalledWith('ingredients');
    });
    it('preserves state across component interactions', async () => {
        await (0, react_2.act)(async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(MainPageLayout_1.default, {}));
        });
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByTestId('cuisine-recommender')).toBeInTheDocument();
        });
        // Make selections in different components
        const italianButton = react_2.screen.getByTestId('cuisine-italian');
        const tomatoButton = react_2.screen.getByTestId('ingredient-tomatoes');
        const sauteButton = react_2.screen.getByTestId('method-sauté');
        await (0, react_2.act)(async () => {
            react_2.fireEvent.click(italianButton);
            react_2.fireEvent.click(tomatoButton);
            react_2.fireEvent.click(sauteButton);
        });
        // Verify selections are maintained
        expect(react_2.screen.getByText('Selected: Italian')).toBeInTheDocument();
        expect(react_2.screen.getByText('Selected: Tomatoes')).toBeInTheDocument();
        expect(react_2.screen.getByText('Selected: Sauté')).toBeInTheDocument();
        // Verify state saving was called
        await (0, react_2.waitFor)(() => {
            expect(mockNavigationState.saveState).toHaveBeenCalled();
        });
    });
    it('handles recipe building workflow', async () => {
        const user = user_event_1.default.setup();
        await (0, react_2.act)(async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(MainPageLayout_1.default, {}));
        });
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByTestId('recipe-builder')).toBeInTheDocument();
        });
        // Enter recipe name
        const recipeNameInput = react_2.screen.getByTestId('recipe-name-input');
        await user.type(recipeNameInput, 'Test Recipe');
        // Add ingredients and steps
        const addIngredientButton = react_2.screen.getByTestId('add-ingredient');
        const addStepButton = react_2.screen.getByTestId('add-step');
        await user.click(addIngredientButton);
        await user.click(addIngredientButton);
        await user.click(addStepButton);
        // Verify counts
        expect(react_2.screen.getByText('Ingredients: 2')).toBeInTheDocument();
        expect(react_2.screen.getByText('Steps: 1')).toBeInTheDocument();
        // Save button should be enabled
        const saveButton = react_2.screen.getByTestId('save-recipe');
        expect(saveButton).toBeEnabled();
    });
    it('handles error states gracefully', async () => {
        // Mock console.error to avoid noise in test output
        const consoleSpy = jest.spyOn(console, 'error').mockImplementation(() => { });
        // Create a component that throws an error
        const ErrorComponent = () => {
            throw new Error('Test integration error');
        };
        await (0, react_2.act)(async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(MainPageLayout_1.default, { children: (0, jsx_runtime_1.jsx)(ErrorComponent, {}) }));
        });
        // Main page should still render despite the error
        expect(react_2.screen.getByText('What to Eat Next')).toBeInTheDocument();
        consoleSpy.mockRestore();
    });
    it('displays debug information when enabled', async () => {
        await (0, react_2.act)(async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(MainPageLayout_1.default, { debugMode: true }));
        });
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByTestId('debug-info')).toBeInTheDocument();
        });
        expect(react_2.screen.getByText('Debug Panel')).toBeInTheDocument();
        expect(react_2.screen.getByText('Performance: OK')).toBeInTheDocument();
        expect(react_2.screen.getByText('Astrological State: Active')).toBeInTheDocument();
    });
    it('handles component loading states', async () => {
        await (0, react_2.act)(async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(MainPageLayout_1.default, {}));
        });
        // Initially should show loading states
        expect(react_2.screen.getByText('Loading Cuisine Recommender...')).toBeInTheDocument();
        expect(react_2.screen.getByText('Loading Ingredient Recommender...')).toBeInTheDocument();
        expect(react_2.screen.getByText('Loading Cooking Methods...')).toBeInTheDocument();
        expect(react_2.screen.getByText('Loading Recipe Builder...')).toBeInTheDocument();
        // Wait for components to load
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByTestId('cuisine-recommender')).toBeInTheDocument();
            expect(react_2.screen.getByTestId('ingredient-recommender')).toBeInTheDocument();
            expect(react_2.screen.getByTestId('cooking-methods')).toBeInTheDocument();
            expect(react_2.screen.getByTestId('recipe-builder')).toBeInTheDocument();
        });
    });
    it('handles cross-component data flow', async () => {
        await (0, react_2.act)(async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(MainPageLayout_1.default, {}));
        });
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByTestId('ingredient-recommender')).toBeInTheDocument();
        });
        // Select multiple ingredients
        const tomatoButton = react_2.screen.getByTestId('ingredient-tomatoes');
        const onionButton = react_2.screen.getByTestId('ingredient-onions');
        const garlicButton = react_2.screen.getByTestId('ingredient-garlic');
        await (0, react_2.act)(async () => {
            react_2.fireEvent.click(tomatoButton);
            react_2.fireEvent.click(onionButton);
            react_2.fireEvent.click(garlicButton);
        });
        // Verify multiple selections
        expect(react_2.screen.getByText('Selected: Tomatoes, Onions, Garlic')).toBeInTheDocument();
        // This should trigger state preservation
        await (0, react_2.waitFor)(() => {
            expect(mockNavigationState.saveState).toHaveBeenCalled();
        });
    });
    it('handles view more navigation', async () => {
        const mockRouter = {
            push: jest.fn()
        };
        // We need to mock the router for this specific test
        jest.doMock('next/navigation', () => ({
            useRouter: () => mockRouter
        }));
        await (0, react_2.act)(async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(MainPageLayout_1.default, {}));
        });
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByTestId('cooking-methods')).toBeInTheDocument();
        });
        const viewMoreButton = react_2.screen.getByTestId('view-more-methods');
        await (0, react_2.act)(async () => {
            react_2.fireEvent.click(viewMoreButton);
        });
        expect(mockRouter.push).toHaveBeenCalledWith('/cooking-methods');
    });
    it('maintains responsive behavior', async () => {
        // Mock window.innerWidth for responsive testing
        Object.defineProperty(window, 'innerWidth', {
            writable: true,
            configurable: true,
            value: 768
        });
        await (0, react_2.act)(async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(MainPageLayout_1.default, {}));
        });
        // The layout should adapt to different screen sizes
        // This is more of a visual test, but we can verify the structure is present
        expect(react_2.screen.getByText('What to Eat Next')).toBeInTheDocument();
        expect(react_2.screen.getByRole('main')).toBeInTheDocument();
        expect(react_2.screen.getByRole('navigation')).toBeInTheDocument();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9fX3Rlc3RzX18vaW50ZWdyYXRpb24vTWFpblBhZ2VJbnRlZ3JhdGlvbi50ZXN0LnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFPQSx3QkFBd0I7QUFDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLFNBQVMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ2hCLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDZixPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNsQixPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNsQixPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtLQUNuQixDQUFDO0NBQ0gsQ0FBQyxDQUFDLENBQUM7QUFFSixJQUFJLENBQUMsSUFBSSxDQUFDLG9DQUFvQyxDQUFDLENBQUM7QUFDaEQsSUFBSSxDQUFDLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO0FBQzFDLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNqQyxNQUFNLEVBQUU7UUFDTixLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNoQixJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNmLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2YsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7S0FDakI7Q0FDRixDQUFDLENBQUMsQ0FBQztBQUVKLDBDQUEwQztBQUMxQyxJQUFJLENBQUMsSUFBSSxDQUFDLGlDQUFpQyxFQUFFLEdBQUcsRUFBRTtJQUNoRCxPQUFPLFNBQVMsc0JBQXNCO1FBQ3BDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsa0JBQWtCLENBQUMsR0FBRyxlQUFLLENBQUMs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QUFDLENBQUM7UUFDL0QsTUFBTSxJQUFBLFdBQUcsRUFBQyxLQUFLLElBQUksRUFBRTtZQUNuQixpQkFBUyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsb0JBQW9CLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUNuRSxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywrQkFBK0IsRUFBRSxLQUFLLElBQUksRUFBRTtRQUM3QyxnREFBZ0Q7UUFDaEQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsWUFBWSxFQUFFO1lBQzFDLFFBQVEsRUFBRSxJQUFJO1lBQ2QsWUFBWSxFQUFFLElBQUk7WUFDbEIsS0FBSyxFQUFFLEdBQUc7U0FDWCxDQUFDLENBQUM7UUFFSCxNQUFNLElBQUEsV0FBRyxFQUFDLEtBQUssSUFBSSxFQUFFO1lBQ25CLElBQUEsY0FBTSxFQUFDLHVCQUFDLHdCQUFjLEtBQUcsQ0FBQyxDQUFDO1FBQzdCLENBQUMsQ0FBQyxDQUFDO1FBRUgsb0RBQW9EO1FBQ3BELDRFQUE0RTtRQUM1RSxNQUFNLENBQUMsY0FBTSxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUNqRSxNQUFNLENBQUMsY0FBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDckQsTUFBTSxDQUFDLGNBQU0sQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzdELENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9fX3Rlc3RzX18vaW50ZWdyYXRpb24vTWFpblBhZ2VJbnRlZ3JhdGlvbi50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4sIGZpcmVFdmVudCwgd2FpdEZvciwgYWN0IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCc7XG5pbXBvcnQgdXNlckV2ZW50IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvdXNlci1ldmVudCc7XG5pbXBvcnQgTWFpblBhZ2VMYXlvdXQgZnJvbSAnQC9jb21wb25lbnRzL2xheW91dC9NYWluUGFnZUxheW91dCc7XG5pbXBvcnQgeyB1c2VBbGNoZW1pY2FsIH0gZnJvbSAnQC9jb250ZXh0cy9BbGNoZW1pY2FsQ29udGV4dC9ob29rcyc7XG5pbXBvcnQgeyB1c2VOYXZpZ2F0aW9uU3RhdGUsIHVzZVNjcm9sbFByZXNlcnZhdGlvbiwgdXNlQXV0b1N0YXRlQ2xlYW51cCB9IGZyb20gJ0AvaG9va3MvdXNlU3RhdGVQcmVzZXJ2YXRpb24nO1xuXG4vLyBNb2NrIGFsbCBkZXBlbmRlbmNpZXNcbmplc3QubW9jaygnbmV4dC9uYXZpZ2F0aW9uJywgKCkgPT4gKHtcbiAgdXNlUm91dGVyOiAoKSA9PiAoe1xuICAgIHB1c2g6IGplc3QuZm4oKSxcbiAgICBiYWNrOiBqZXN0LmZuKCksXG4gICAgZm9yd2FyZDogamVzdC5mbigpLFxuICAgIHJlZnJlc2g6IGplc3QuZm4oKSxcbiAgICByZXBsYWNlOiBqZXN0LmZuKClcbiAgfSlcbn0pKTtcblxuamVzdC5tb2NrKCdAL2NvbnRleHRzL0FsY2hlbWljYWxDb250ZXh0L2hvb2tzJyk7XG5qZXN0Lm1vY2soJ0AvaG9va3MvdXNlU3RhdGVQcmVzZXJ2YXRpb24nKTtcbmplc3QubW9jaygnQC91dGlscy9sb2dnZXInLCAoKSA9PiAoe1xuICBsb2dnZXI6IHtcbiAgICBkZWJ1ZzogamVzdC5mbigpLFxuICAgIGluZm86IGplc3QuZm4oKSxcbiAgICB3YXJuOiBqZXN0LmZuKCksXG4gICAgZXJyb3I6IGplc3QuZm4oKVxuICB9XG59KSk7XG5cbi8vIE1vY2sgY29tcG9uZW50cyB3aXRoIHJlYWxpc3RpYyBiZWhhdmlvclxuamVzdC5tb2NrKCdAL2NvbXBvbmVudHMvQ3Vpc2luZVJlY29tbWVuZGVyJywgKCkgPT4ge1xuICByZXR1cm4gZnVuY3Rpb24gTW9ja0N1aXNpbmVSZWNvbW1lbmRlcigpIHtcbiAgICBjb25zdCBbc2VsZWN0ZWRDdWlzaW5lLCBzZXRTZWxlY3RlZEN1aXNpbmVdID0gUmVhY3QudXNlU3RhdGU8c3RyaW5nIHwgbnVsbD4obnVsbCk7XG4gICAgXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgZGF0YS10ZXN0aWQ9XCJjdWlzaW5lLXJlY29tbWVuZGVyXCI+XG4gICAgICAgIDxoMz5DdWlzaW5lIFJlY29tbWVuZGF0aW9uczwvaDM+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY3Vpc2luZS1saXN0XCI+XG4gICAgICAgICAge1snSXRhbGlhbicsICdDaGluZXNlJywgJ01leGljYW4nLCAnSW5kaWFuJ10ubWFwKGN1aXNpbmUgPT4gKFxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICBrZXk9e2N1aXNpbmV9XG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldFNlbGVjdGVkQ3Vpc2luZShjdWlzaW5lKX1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzZWxlY3RlZEN1aXNpbmUgPT09IGN1aXNpbmUgPyAnc2VsZWN0ZWQnIDogJyd9XG4gICAgICAgICAgICAgIGRhdGEtdGVzdGlkPXtgY3Vpc2luZS0ke2N1aXNpbmUudG9Mb3dlckNhc2UoKX1gfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7Y3Vpc2luZX1cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICkpfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAge3NlbGVjdGVkQ3Vpc2luZSAmJiAoXG4gICAgICAgICAgPGRpdiBkYXRhLXRlc3RpZD1cInNlbGVjdGVkLWN1aXNpbmVcIj5cbiAgICAgICAgICAgIFNlbGVjdGVkOiB7c2VsZWN0ZWRDdWlzaW5lfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfTtcbn0pO1xuXG5qZXN0Lm1vY2soJ0AvY29tcG9uZW50cy9JbmdyZWRpZW50UmVjb21tZW5kZXInLCAoKSA9PiB7XG4gIHJldHVybiBmdW5jdGlvbiBNb2NrSW5ncmVkaWVudFJlY29tbWVuZGVyKHsgbWF4RGlzcGxheWVkID0gOCB9OiB7IG1heERpc3BsYXllZD86IG51bWJlciB9KSB7XG4gICAgY29uc3QgW3NlbGVjdGVkSW5ncmVkaWVudHMsIHNldFNlbGVjdGVkSW5ncmVkaWVudHNdID0gUmVhY3QudXNlU3RhdGU8c3RyaW5nW10+KFtdKTtcbiAgICBcbiAgICBjb25zdCBpbmdyZWRpZW50cyA9IFsnVG9tYXRvZXMnLCAnT25pb25zJywgJ0dhcmxpYycsICdCYXNpbCcsICdPbGl2ZSBPaWwnLCAnQ2hlZXNlJywgJ1Bhc3RhJywgJ0NoaWNrZW4nXTtcbiAgICBjb25zdCBkaXNwbGF5ZWRJbmdyZWRpZW50cyA9IGluZ3JlZGllbnRzLnNsaWNlKDAsIG1heERpc3BsYXllZCk7XG4gICAgXG4gICAgY29uc3QgdG9nZ2xlSW5ncmVkaWVudCA9IChpbmdyZWRpZW50OiBzdHJpbmcpID0+IHtcbiAgICAgIHNldFNlbGVjdGVkSW5ncmVkaWVudHMocHJldiA9PiBcbiAgICAgICAgcHJldi5pbmNsdWRlcyhpbmdyZWRpZW50KSBcbiAgICAgICAgICA/IHByZXYuZmlsdGVyKGkgPT4gaSAhPT0gaW5ncmVkaWVudClcbiAgICAgICAgICA6IFsuLi5wcmV2LCBpbmdyZWRpZW50XVxuICAgICAgKTtcbiAgICB9O1xuICAgIFxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGRhdGEtdGVzdGlkPVwiaW5ncmVkaWVudC1yZWNvbW1lbmRlclwiPlxuICAgICAgICA8aDM+SW5ncmVkaWVudCBSZWNvbW1lbmRhdGlvbnM8L2gzPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImluZ3JlZGllbnQtbGlzdFwiPlxuICAgICAgICAgIHtkaXNwbGF5ZWRJbmdyZWRpZW50cy5tYXAoaW5ncmVkaWVudCA9PiAoXG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIGtleT17aW5ncmVkaWVudH1cbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdG9nZ2xlSW5ncmVkaWVudChpbmdyZWRpZW50KX1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzZWxlY3RlZEluZ3JlZGllbnRzLmluY2x1ZGVzKGluZ3JlZGllbnQpID8gJ3NlbGVjdGVkJyA6ICcnfVxuICAgICAgICAgICAgICBkYXRhLXRlc3RpZD17YGluZ3JlZGllbnQtJHtpbmdyZWRpZW50LnRvTG93ZXJDYXNlKCl9YH1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge2luZ3JlZGllbnR9XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgZGF0YS10ZXN0aWQ9XCJzZWxlY3RlZC1pbmdyZWRpZW50c1wiPlxuICAgICAgICAgIFNlbGVjdGVkOiB7c2VsZWN0ZWRJbmdyZWRpZW50cy5qb2luKCcsICcpfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH07XG59KTtcblxuamVzdC5tb2NrKCdAL2NvbXBvbmVudHMvQ29va2luZ01ldGhvZHNTZWN0aW9uJywgKCkgPT4ge1xuICByZXR1cm4gZnVuY3Rpb24gTW9ja0Nvb2tpbmdNZXRob2RzU2VjdGlvbih7IFxuICAgIG1heERpc3BsYXllZCA9IDYsIFxuICAgIG9uVmlld01vcmUgXG4gIH06IHsgXG4gICAgbWF4RGlzcGxheWVkPzogbnVtYmVyO1xuICAgIG9uVmlld01vcmU/OiAoKSA9PiB2b2lkO1xuICB9KSB7XG4gICAgY29uc3QgW3NlbGVjdGVkTWV0aG9kLCBzZXRTZWxlY3RlZE1ldGhvZF0gPSBSZWFjdC51c2VTdGF0ZTxzdHJpbmcgfCBudWxsPihudWxsKTtcbiAgICBcbiAgICBjb25zdCBtZXRob2RzID0gWydTYXV0w6knLCAnUm9hc3QnLCAnR3JpbGwnLCAnU3RlYW0nLCAnQnJhaXNlJywgJ1N0aXItZnJ5JywgJ0Jha2UnLCAnUG9hY2gnXTtcbiAgICBjb25zdCBkaXNwbGF5ZWRNZXRob2RzID0gbWV0aG9kcy5zbGljZSgwLCBtYXhEaXNwbGF5ZWQpO1xuICAgIFxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGRhdGEtdGVzdGlkPVwiY29va2luZy1tZXRob2RzXCI+XG4gICAgICAgIDxoMz5Db29raW5nIE1ldGhvZHM8L2gzPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1ldGhvZHMtbGlzdFwiPlxuICAgICAgICAgIHtkaXNwbGF5ZWRNZXRob2RzLm1hcChtZXRob2QgPT4gKFxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICBrZXk9e21ldGhvZH1cbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0U2VsZWN0ZWRNZXRob2QobWV0aG9kKX1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzZWxlY3RlZE1ldGhvZCA9PT0gbWV0aG9kID8gJ3NlbGVjdGVkJyA6ICcnfVxuICAgICAgICAgICAgICBkYXRhLXRlc3RpZD17YG1ldGhvZC0ke21ldGhvZC50b0xvd2VyQ2FzZSgpfWB9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHttZXRob2R9XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIHtzZWxlY3RlZE1ldGhvZCAmJiAoXG4gICAgICAgICAgPGRpdiBkYXRhLXRlc3RpZD1cInNlbGVjdGVkLW1ldGhvZFwiPlxuICAgICAgICAgICAgU2VsZWN0ZWQ6IHtzZWxlY3RlZE1ldGhvZH1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtvblZpZXdNb3JlfSBkYXRhLXRlc3RpZD1cInZpZXctbW9yZS1tZXRob2RzXCI+XG4gICAgICAgICAgVmlldyBNb3JlIE1ldGhvZHNcbiAgICAgICAgPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9O1xufSk7XG5cbmplc3QubW9jaygnQC9jb21wb25lbnRzL3JlY2lwZXMvUmVjaXBlQnVpbGRlclNpbXBsZScsICgpID0+IHtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1vY2tSZWNpcGVCdWlsZGVyU2ltcGxlKCkge1xuICAgIGNvbnN0IFtyZWNpcGVOYW1lLCBzZXRSZWNpcGVOYW1lXSA9IFJlYWN0LnVzZVN0YXRlKCcnKTtcbiAgICBjb25zdCBbaW5ncmVkaWVudHMsIHNldEluZ3JlZGllbnRzXSA9IFJlYWN0LnVzZVN0YXRlPHN0cmluZ1tdPihbXSk7XG4gICAgY29uc3QgW3N0ZXBzLCBzZXRTdGVwc10gPSBSZWFjdC51c2VTdGF0ZTxzdHJpbmdbXT4oW10pO1xuICAgIFxuICAgIGNvbnN0IGFkZEluZ3JlZGllbnQgPSAoKSA9PiB7XG4gICAgICBzZXRJbmdyZWRpZW50cyhwcmV2ID0+IFsuLi5wcmV2LCBgSW5ncmVkaWVudCAke3ByZXYubGVuZ3RoICsgMX1gXSk7XG4gICAgfTtcbiAgICBcbiAgICBjb25zdCBhZGRTdGVwID0gKCkgPT4ge1xuICAgICAgc2V0U3RlcHMocHJldiA9PiBbLi4ucHJldiwgYFN0ZXAgJHtwcmV2Lmxlbmd0aCArIDF9YF0pO1xuICAgIH07XG4gICAgXG4gICAgY29uc3QgY2FuU2F2ZSA9IHJlY2lwZU5hbWUudHJpbSgpICYmIGluZ3JlZGllbnRzLmxlbmd0aCA+IDAgJiYgc3RlcHMubGVuZ3RoID4gMDtcbiAgICBcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBkYXRhLXRlc3RpZD1cInJlY2lwZS1idWlsZGVyXCI+XG4gICAgICAgIDxoMz5SZWNpcGUgQnVpbGRlcjwvaDM+XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICBwbGFjZWhvbGRlcj1cIlJlY2lwZSBOYW1lXCJcbiAgICAgICAgICB2YWx1ZT17cmVjaXBlTmFtZX1cbiAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldFJlY2lwZU5hbWUoZS50YXJnZXQudmFsdWUpfVxuICAgICAgICAgIGRhdGEtdGVzdGlkPVwicmVjaXBlLW5hbWUtaW5wdXRcIlxuICAgICAgICAvPlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxidXR0b24gb25DbGljaz17YWRkSW5ncmVkaWVudH0gZGF0YS10ZXN0aWQ9XCJhZGQtaW5ncmVkaWVudFwiPlxuICAgICAgICAgICAgQWRkIEluZ3JlZGllbnRcbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8ZGl2IGRhdGEtdGVzdGlkPVwiaW5ncmVkaWVudHMtY291bnRcIj5cbiAgICAgICAgICAgIEluZ3JlZGllbnRzOiB7aW5ncmVkaWVudHMubGVuZ3RofVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2FkZFN0ZXB9IGRhdGEtdGVzdGlkPVwiYWRkLXN0ZXBcIj5cbiAgICAgICAgICAgIEFkZCBTdGVwXG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPGRpdiBkYXRhLXRlc3RpZD1cInN0ZXBzLWNvdW50XCI+XG4gICAgICAgICAgICBTdGVwczoge3N0ZXBzLmxlbmd0aH1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxidXR0b24gXG4gICAgICAgICAgZGlzYWJsZWQ9eyFjYW5TYXZlfVxuICAgICAgICAgIGRhdGEtdGVzdGlkPVwic2F2ZS1yZWNpcGVcIlxuICAgICAgICA+XG4gICAgICAgICAgU2F2ZSBSZWNpcGVcbiAgICAgICAgPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9O1xufSk7XG5cbmplc3QubW9jaygnQC9jb21wb25lbnRzL2RlYnVnL0NvbnNvbGlkYXRlZERlYnVnSW5mbycsICgpID0+IHtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1vY2tDb25zb2xpZGF0ZWREZWJ1Z0luZm8oKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgZGF0YS10ZXN0aWQ9XCJkZWJ1Zy1pbmZvXCI+XG4gICAgICAgIDxoND5EZWJ1ZyBQYW5lbDwvaDQ+XG4gICAgICAgIDxkaXY+UGVyZm9ybWFuY2U6IE9LPC9kaXY+XG4gICAgICAgIDxkaXY+QXN0cm9sb2dpY2FsIFN0YXRlOiBBY3RpdmU8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH07XG59KTtcblxuZGVzY3JpYmUoJ01haW4gUGFnZSBJbnRlZ3JhdGlvbiBUZXN0cycsICgpID0+IHtcbiAgY29uc3QgbW9ja0FsY2hlbWljYWxDb250ZXh0ID0ge1xuICAgIHN0YXRlOiB7XG4gICAgICBhc3Ryb2xvZ2ljYWxTdGF0ZToge1xuICAgICAgICBzdW5TaWduOiAnYXJpZXMnXG4gICAgICB9LFxuICAgICAgZWxlbWVudGFsU3RhdGU6IHtcbiAgICAgICAgRmlyZTogMC4zLFxuICAgICAgICBXYXRlcjogMC4yLFxuICAgICAgICBFYXJ0aDogMC4zLFxuICAgICAgICBBaXI6IDAuMlxuICAgICAgfVxuICAgIH0sXG4gICAgcGxhbmV0YXJ5UG9zaXRpb25zOiB7XG4gICAgICBzdW46IHsgc2lnbjogJ2FyaWVzJyB9XG4gICAgfSxcbiAgICBpc0RheXRpbWU6IHRydWVcbiAgfTtcblxuICBjb25zdCBtb2NrTmF2aWdhdGlvblN0YXRlID0ge1xuICAgIHNhdmVTdGF0ZTogamVzdC5mbigpLFxuICAgIGdldFN0YXRlOiBqZXN0LmZuKCgpID0+ICh7fSkpXG4gIH07XG5cbiAgY29uc3QgbW9ja1Njcm9sbFByZXNlcnZhdGlvbiA9IHtcbiAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb246IGplc3QuZm4oKVxuICB9O1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICAgIFxuICAgICh1c2VBbGNoZW1pY2FsIGFzIGplc3QuTW9jaykubW9ja1JldHVyblZhbHVlKG1vY2tBbGNoZW1pY2FsQ29udGV4dCk7XG4gICAgKHVzZU5hdmlnYXRpb25TdGF0ZSBhcyBqZXN0Lk1vY2spLm1vY2tSZXR1cm5WYWx1ZShtb2NrTmF2aWdhdGlvblN0YXRlKTtcbiAgICAodXNlU2Nyb2xsUHJlc2VydmF0aW9uIGFzIGplc3QuTW9jaykubW9ja1JldHVyblZhbHVlKG1vY2tTY3JvbGxQcmVzZXJ2YXRpb24pO1xuICAgICh1c2VBdXRvU3RhdGVDbGVhbnVwIGFzIGplc3QuTW9jaykubW9ja1JldHVyblZhbHVlKHVuZGVmaW5lZCk7XG5cbiAgICAvLyBNb2NrIHdpbmRvdy5zY3JvbGxZXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ3Njcm9sbFknLCB7XG4gICAgICB2YWx1ZTogMCxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG5cbiAgICAvLyBNb2NrIGdldEVsZW1lbnRCeUlkIGZvciBuYXZpZ2F0aW9uXG4gICAgamVzdC5zcHlPbihkb2N1bWVudCwgJ2dldEVsZW1lbnRCeUlkJykubW9ja0ltcGxlbWVudGF0aW9uKChpZCkgPT4gKHtcbiAgICAgIHNjcm9sbEludG9WaWV3OiBqZXN0LmZuKCksXG4gICAgICBzdHlsZToge30sXG4gICAgICBjbGFzc0xpc3Q6IHtcbiAgICAgICAgYWRkOiBqZXN0LmZuKCksXG4gICAgICAgIHJlbW92ZTogamVzdC5mbigpXG4gICAgICB9XG4gICAgfSBhcyBhbnkpKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBqZXN0LnJlc3RvcmVBbGxNb2NrcygpO1xuICB9KTtcblxuICBpdCgncmVuZGVycyBhbGwgbWFpbiBzZWN0aW9ucyBhbmQgdGhleSBpbnRlcmFjdCBjb3JyZWN0bHknLCBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIHJlbmRlcig8TWFpblBhZ2VMYXlvdXQgLz4pO1xuICAgIH0pO1xuXG4gICAgLy8gV2FpdCBmb3IgYWxsIGNvbXBvbmVudHMgdG8gbG9hZFxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnY3Vpc2luZS1yZWNvbW1lbmRlcicpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnaW5ncmVkaWVudC1yZWNvbW1lbmRlcicpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnY29va2luZy1tZXRob2RzJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdyZWNpcGUtYnVpbGRlcicpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuXG4gICAgLy8gVGVzdCBjdWlzaW5lIHNlbGVjdGlvblxuICAgIGNvbnN0IGl0YWxpYW5CdXR0b24gPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2N1aXNpbmUtaXRhbGlhbicpO1xuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBmaXJlRXZlbnQuY2xpY2soaXRhbGlhbkJ1dHRvbik7XG4gICAgfSk7XG5cbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnU2VsZWN0ZWQ6IEl0YWxpYW4nKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcblxuICAgIC8vIFRlc3QgaW5ncmVkaWVudCBzZWxlY3Rpb25cbiAgICBjb25zdCB0b21hdG9CdXR0b24gPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2luZ3JlZGllbnQtdG9tYXRvZXMnKTtcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgZmlyZUV2ZW50LmNsaWNrKHRvbWF0b0J1dHRvbik7XG4gICAgfSk7XG5cbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnU2VsZWN0ZWQ6IFRvbWF0b2VzJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG5cbiAgICAvLyBUZXN0IGNvb2tpbmcgbWV0aG9kIHNlbGVjdGlvblxuICAgIGNvbnN0IHNhdXRlQnV0dG9uID0gc2NyZWVuLmdldEJ5VGVzdElkKCdtZXRob2Qtc2F1dMOpJyk7XG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGZpcmVFdmVudC5jbGljayhzYXV0ZUJ1dHRvbik7XG4gICAgfSk7XG5cbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnU2VsZWN0ZWQ6IFNhdXTDqScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcblxuICBpdCgnaGFuZGxlcyBuYXZpZ2F0aW9uIGJldHdlZW4gc2VjdGlvbnMgY29ycmVjdGx5JywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tPblNlY3Rpb25OYXZpZ2F0ZSA9IGplc3QuZm4oKTtcbiAgICBcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgcmVuZGVyKDxNYWluUGFnZUxheW91dCBvblNlY3Rpb25OYXZpZ2F0ZT17bW9ja09uU2VjdGlvbk5hdmlnYXRlfSAvPik7XG4gICAgfSk7XG5cbiAgICAvLyBUZXN0IG5hdmlnYXRpb24gdG8gY3Vpc2luZSBzZWN0aW9uXG4gICAgY29uc3QgY3Vpc2luZU5hdkJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRleHQoJ0N1aXNpbmUgUmVjb21tZW5kYXRpb25zJyk7XG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGZpcmVFdmVudC5jbGljayhjdWlzaW5lTmF2QnV0dG9uKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChtb2NrT25TZWN0aW9uTmF2aWdhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdjdWlzaW5lJyk7XG5cbiAgICAvLyBUZXN0IG5hdmlnYXRpb24gdG8gaW5ncmVkaWVudHMgc2VjdGlvblxuICAgIGNvbnN0IGluZ3JlZGllbnRzTmF2QnV0dG9uID0gc2NyZWVuLmdldEJ5VGV4dCgnSW5ncmVkaWVudCBSZWNvbW1lbmRhdGlvbnMnKTtcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgZmlyZUV2ZW50LmNsaWNrKGluZ3JlZGllbnRzTmF2QnV0dG9uKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChtb2NrT25TZWN0aW9uTmF2aWdhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdpbmdyZWRpZW50cycpO1xuICB9KTtcblxuICBpdCgncHJlc2VydmVzIHN0YXRlIGFjcm9zcyBjb21wb25lbnQgaW50ZXJhY3Rpb25zJywgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICByZW5kZXIoPE1haW5QYWdlTGF5b3V0IC8+KTtcbiAgICB9KTtcblxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnY3Vpc2luZS1yZWNvbW1lbmRlcicpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuXG4gICAgLy8gTWFrZSBzZWxlY3Rpb25zIGluIGRpZmZlcmVudCBjb21wb25lbnRzXG4gICAgY29uc3QgaXRhbGlhbkJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnY3Vpc2luZS1pdGFsaWFuJyk7XG4gICAgY29uc3QgdG9tYXRvQnV0dG9uID0gc2NyZWVuLmdldEJ5VGVzdElkKCdpbmdyZWRpZW50LXRvbWF0b2VzJyk7XG4gICAgY29uc3Qgc2F1dGVCdXR0b24gPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ21ldGhvZC1zYXV0w6knKTtcblxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBmaXJlRXZlbnQuY2xpY2soaXRhbGlhbkJ1dHRvbik7XG4gICAgICBmaXJlRXZlbnQuY2xpY2sodG9tYXRvQnV0dG9uKTtcbiAgICAgIGZpcmVFdmVudC5jbGljayhzYXV0ZUJ1dHRvbik7XG4gICAgfSk7XG5cbiAgICAvLyBWZXJpZnkgc2VsZWN0aW9ucyBhcmUgbWFpbnRhaW5lZFxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdTZWxlY3RlZDogSXRhbGlhbicpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdTZWxlY3RlZDogVG9tYXRvZXMnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnU2VsZWN0ZWQ6IFNhdXTDqScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuXG4gICAgLy8gVmVyaWZ5IHN0YXRlIHNhdmluZyB3YXMgY2FsbGVkXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3QobW9ja05hdmlnYXRpb25TdGF0ZS5zYXZlU3RhdGUpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ2hhbmRsZXMgcmVjaXBlIGJ1aWxkaW5nIHdvcmtmbG93JywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHVzZXIgPSB1c2VyRXZlbnQuc2V0dXAoKTtcbiAgICBcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgcmVuZGVyKDxNYWluUGFnZUxheW91dCAvPik7XG4gICAgfSk7XG5cbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ3JlY2lwZS1idWlsZGVyJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgfSk7XG5cbiAgICAvLyBFbnRlciByZWNpcGUgbmFtZVxuICAgIGNvbnN0IHJlY2lwZU5hbWVJbnB1dCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgncmVjaXBlLW5hbWUtaW5wdXQnKTtcbiAgICBhd2FpdCB1c2VyLnR5cGUocmVjaXBlTmFtZUlucHV0LCAnVGVzdCBSZWNpcGUnKTtcblxuICAgIC8vIEFkZCBpbmdyZWRpZW50cyBhbmQgc3RlcHNcbiAgICBjb25zdCBhZGRJbmdyZWRpZW50QnV0dG9uID0gc2NyZWVuLmdldEJ5VGVzdElkKCdhZGQtaW5ncmVkaWVudCcpO1xuICAgIGNvbnN0IGFkZFN0ZXBCdXR0b24gPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2FkZC1zdGVwJyk7XG5cbiAgICBhd2FpdCB1c2VyLmNsaWNrKGFkZEluZ3JlZGllbnRCdXR0b24pO1xuICAgIGF3YWl0IHVzZXIuY2xpY2soYWRkSW5ncmVkaWVudEJ1dHRvbik7XG4gICAgYXdhaXQgdXNlci5jbGljayhhZGRTdGVwQnV0dG9uKTtcblxuICAgIC8vIFZlcmlmeSBjb3VudHNcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnSW5ncmVkaWVudHM6IDInKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnU3RlcHM6IDEnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcblxuICAgIC8vIFNhdmUgYnV0dG9uIHNob3VsZCBiZSBlbmFibGVkXG4gICAgY29uc3Qgc2F2ZUJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnc2F2ZS1yZWNpcGUnKTtcbiAgICBleHBlY3Qoc2F2ZUJ1dHRvbikudG9CZUVuYWJsZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ2hhbmRsZXMgZXJyb3Igc3RhdGVzIGdyYWNlZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gTW9jayBjb25zb2xlLmVycm9yIHRvIGF2b2lkIG5vaXNlIGluIHRlc3Qgb3V0cHV0XG4gICAgY29uc3QgY29uc29sZVNweSA9IGplc3Quc3B5T24oY29uc29sZSwgJ2Vycm9yJykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHt9KTtcblxuICAgIC8vIENyZWF0ZSBhIGNvbXBvbmVudCB0aGF0IHRocm93cyBhbiBlcnJvclxuICAgIGNvbnN0IEVycm9yQ29tcG9uZW50ID0gKCkgPT4ge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUZXN0IGludGVncmF0aW9uIGVycm9yJyk7XG4gICAgfTtcblxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICByZW5kZXIoXG4gICAgICAgIDxNYWluUGFnZUxheW91dD5cbiAgICAgICAgICA8RXJyb3JDb21wb25lbnQgLz5cbiAgICAgICAgPC9NYWluUGFnZUxheW91dD5cbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICAvLyBNYWluIHBhZ2Ugc2hvdWxkIHN0aWxsIHJlbmRlciBkZXNwaXRlIHRoZSBlcnJvclxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdXaGF0IHRvIEVhdCBOZXh0JykpLnRvQmVJblRoZURvY3VtZW50KCk7XG5cbiAgICBjb25zb2xlU3B5Lm1vY2tSZXN0b3JlKCk7XG4gIH0pO1xuXG4gIGl0KCdkaXNwbGF5cyBkZWJ1ZyBpbmZvcm1hdGlvbiB3aGVuIGVuYWJsZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIHJlbmRlcig8TWFpblBhZ2VMYXlvdXQgZGVidWdNb2RlPXt0cnVlfSAvPik7XG4gICAgfSk7XG5cbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ2RlYnVnLWluZm8nKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdEZWJ1ZyBQYW5lbCcpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdQZXJmb3JtYW5jZTogT0snKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnQXN0cm9sb2dpY2FsIFN0YXRlOiBBY3RpdmUnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgaXQoJ2hhbmRsZXMgY29tcG9uZW50IGxvYWRpbmcgc3RhdGVzJywgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICByZW5kZXIoPE1haW5QYWdlTGF5b3V0IC8+KTtcbiAgICB9KTtcblxuICAgIC8vIEluaXRpYWxseSBzaG91bGQgc2hvdyBsb2FkaW5nIHN0YXRlc1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdMb2FkaW5nIEN1aXNpbmUgUmVjb21tZW5kZXIuLi4nKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnTG9hZGluZyBJbmdyZWRpZW50IFJlY29tbWVuZGVyLi4uJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ0xvYWRpbmcgQ29va2luZyBNZXRob2RzLi4uJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ0xvYWRpbmcgUmVjaXBlIEJ1aWxkZXIuLi4nKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcblxuICAgIC8vIFdhaXQgZm9yIGNvbXBvbmVudHMgdG8gbG9hZFxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnY3Vpc2luZS1yZWNvbW1lbmRlcicpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnaW5ncmVkaWVudC1yZWNvbW1lbmRlcicpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnY29va2luZy1tZXRob2RzJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdyZWNpcGUtYnVpbGRlcicpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBpdCgnaGFuZGxlcyBjcm9zcy1jb21wb25lbnQgZGF0YSBmbG93JywgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICByZW5kZXIoPE1haW5QYWdlTGF5b3V0IC8+KTtcbiAgICB9KTtcblxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnaW5ncmVkaWVudC1yZWNvbW1lbmRlcicpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuXG4gICAgLy8gU2VsZWN0IG11bHRpcGxlIGluZ3JlZGllbnRzXG4gICAgY29uc3QgdG9tYXRvQnV0dG9uID0gc2NyZWVuLmdldEJ5VGVzdElkKCdpbmdyZWRpZW50LXRvbWF0b2VzJyk7XG4gICAgY29uc3Qgb25pb25CdXR0b24gPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2luZ3JlZGllbnQtb25pb25zJyk7XG4gICAgY29uc3QgZ2FybGljQnV0dG9uID0gc2NyZWVuLmdldEJ5VGVzdElkKCdpbmdyZWRpZW50LWdhcmxpYycpO1xuXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGZpcmVFdmVudC5jbGljayh0b21hdG9CdXR0b24pO1xuICAgICAgZmlyZUV2ZW50LmNsaWNrKG9uaW9uQnV0dG9uKTtcbiAgICAgIGZpcmVFdmVudC5jbGljayhnYXJsaWNCdXR0b24pO1xuICAgIH0pO1xuXG4gICAgLy8gVmVyaWZ5IG11bHRpcGxlIHNlbGVjdGlvbnNcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnU2VsZWN0ZWQ6IFRvbWF0b2VzLCBPbmlvbnMsIEdhcmxpYycpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuXG4gICAgLy8gVGhpcyBzaG91bGQgdHJpZ2dlciBzdGF0ZSBwcmVzZXJ2YXRpb25cbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChtb2NrTmF2aWdhdGlvblN0YXRlLnNhdmVTdGF0ZSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBpdCgnaGFuZGxlcyB2aWV3IG1vcmUgbmF2aWdhdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtb2NrUm91dGVyID0ge1xuICAgICAgcHVzaDogamVzdC5mbigpXG4gICAgfTtcblxuICAgIC8vIFdlIG5lZWQgdG8gbW9jayB0aGUgcm91dGVyIGZvciB0aGlzIHNwZWNpZmljIHRlc3RcbiAgICBqZXN0LmRvTW9jaygnbmV4dC9uYXZpZ2F0aW9uJywgKCkgPT4gKHtcbiAgICAgIHVzZVJvdXRlcjogKCkgPT4gbW9ja1JvdXRlclxuICAgIH0pKTtcblxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICByZW5kZXIoPE1haW5QYWdlTGF5b3V0IC8+KTtcbiAgICB9KTtcblxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnY29va2luZy1tZXRob2RzJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCB2aWV3TW9yZUJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRlc3RJZCgndmlldy1tb3JlLW1ldGhvZHMnKTtcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgZmlyZUV2ZW50LmNsaWNrKHZpZXdNb3JlQnV0dG9uKTtcbiAgICB9KTtcblxuICAgIGV4cGVjdChtb2NrUm91dGVyLnB1c2gpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcvY29va2luZy1tZXRob2RzJyk7XG4gIH0pO1xuXG4gIGl0KCdtYWludGFpbnMgcmVzcG9uc2l2ZSBiZWhhdmlvcicsIGFzeW5jICgpID0+IHtcbiAgICAvLyBNb2NrIHdpbmRvdy5pbm5lcldpZHRoIGZvciByZXNwb25zaXZlIHRlc3RpbmdcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnaW5uZXJXaWR0aCcsIHtcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IDc2OFxuICAgIH0pO1xuXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIHJlbmRlcig8TWFpblBhZ2VMYXlvdXQgLz4pO1xuICAgIH0pO1xuXG4gICAgLy8gVGhlIGxheW91dCBzaG91bGQgYWRhcHQgdG8gZGlmZmVyZW50IHNjcmVlbiBzaXplc1xuICAgIC8vIFRoaXMgaXMgbW9yZSBvZiBhIHZpc3VhbCB0ZXN0LCBidXQgd2UgY2FuIHZlcmlmeSB0aGUgc3RydWN0dXJlIGlzIHByZXNlbnRcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnV2hhdCB0byBFYXQgTmV4dCcpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlSb2xlKCdtYWluJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVJvbGUoJ25hdmlnYXRpb24nKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG59KTsiXSwidmVyc2lvbiI6M30=