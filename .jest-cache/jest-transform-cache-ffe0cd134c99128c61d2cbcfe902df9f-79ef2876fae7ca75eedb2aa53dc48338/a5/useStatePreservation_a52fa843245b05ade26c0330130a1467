abd4e6d1b6da0b8f294df287c2aad385
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.usePerformanceOptimizationGuidance = exports.useCulturalSensitivityGuidance = exports.useAstrologicalStatePreservation = exports.useNavigationContext = exports.useSelectionState = exports.useFormStatePreservation = exports.useAutoStateCleanup = exports.useScrollPreservation = exports.useComponentState = exports.useNavigationState = void 0;
const react_1 = require("react");
const statePreservation_1 = require("@/utils/statePreservation");
const steeringFileIntelligence_1 = require("@/utils/steeringFileIntelligence");
const logger_1 = require("@/utils/logger");
/**
 * Hook for preserving and restoring navigation state with performance optimizations
 */
function useNavigationState() {
    const saveTimeoutRef = (0, react_1.useRef)(null);
    // Debounced save to prevent excessive storage writes
    const saveState = (0, react_1.useCallback)((state) => {
        if (saveTimeoutRef.current) {
            clearTimeout(saveTimeoutRef.current);
        }
        saveTimeoutRef.current = setTimeout(() => {
            (0, statePreservation_1.saveNavigationState)(state);
        }, 50); // 50ms debounce
    }, []);
    const getState = (0, react_1.useCallback)(() => {
        return (0, statePreservation_1.getNavigationState)();
    }, []);
    // Cleanup timeout on unmount
    (0, react_1.useEffect)(() => {
        return () => {
            if (saveTimeoutRef.current) {
                clearTimeout(saveTimeoutRef.current);
            }
        };
    }, []);
    return (0, react_1.useMemo)(() => ({ saveState, getState }), [saveState, getState]);
}
exports.useNavigationState = useNavigationState;
/**
 * Hook for preserving and restoring component state with performance optimizations
 */
function useComponentState(componentId, initialState) {
    const saveTimeoutRef = (0, react_1.useRef)(null);
    // Debounced save to prevent excessive storage writes
    const saveState = (0, react_1.useCallback)((state) => {
        if (saveTimeoutRef.current) {
            clearTimeout(saveTimeoutRef.current);
        }
        saveTimeoutRef.current = setTimeout(() => {
            (0, statePreservation_1.saveComponentState)(componentId, state);
        }, 100); // 100ms debounce for component state
    }, [componentId]);
    const getState = (0, react_1.useCallback)(() => {
        const stored = (0, statePreservation_1.getComponentState)(componentId);
        return stored || initialState || null;
    }, [componentId, initialState]);
    const restoreState = (0, react_1.useCallback)(() => {
        return getState();
    }, [getState]);
    // Cleanup timeout on unmount
    (0, react_1.useEffect)(() => {
        return () => {
            if (saveTimeoutRef.current) {
                clearTimeout(saveTimeoutRef.current);
            }
        };
    }, []);
    return (0, react_1.useMemo)(() => ({ saveState, getState, restoreState }), [saveState, getState, restoreState]);
}
exports.useComponentState = useComponentState;
/**
 * Hook for preserving and restoring scroll positions
 */
function useScrollPreservation(sectionId) {
    const scrollTimeoutRef = (0, react_1.useRef)(null);
    const saveScrollPositionInternal = (0, react_1.useCallback)((position) => {
        const pos = position !== undefined ? position : window.scrollY;
        (0, statePreservation_1.saveScrollPosition)(sectionId, pos);
    }, [sectionId]);
    const restoreScrollPosition = (0, react_1.useCallback)(() => {
        const position = (0, statePreservation_1.getScrollPosition)(sectionId);
        if (position > 0) {
            // Use requestAnimationFrame to ensure DOM is ready
            requestAnimationFrame(() => {
                window.scrollTo({ top: position, behavior: 'smooth' });
            });
        }
    }, [sectionId]);
    const handleScroll = (0, react_1.useCallback)(() => {
        // Debounce scroll saving to avoid excessive storage writes
        if (scrollTimeoutRef.current) {
            clearTimeout(scrollTimeoutRef.current);
        }
        scrollTimeoutRef.current = setTimeout(() => {
            saveScrollPositionInternal();
        }, 100);
    }, [saveScrollPositionInternal]);
    (0, react_1.useEffect)(() => {
        // Set up scroll listener
        window.addEventListener('scroll', handleScroll, { passive: true });
        return () => {
            window.removeEventListener('scroll', handleScroll);
            if (scrollTimeoutRef.current) {
                clearTimeout(scrollTimeoutRef.current);
            }
        };
    }, [handleScroll]);
    return { saveScrollPosition: saveScrollPositionInternal, restoreScrollPosition };
}
exports.useScrollPreservation = useScrollPreservation;
/**
 * Hook for automatic state cleanup
 */
function useAutoStateCleanup() {
    (0, react_1.useEffect)(() => {
        const cleanup = (0, statePreservation_1.useStateCleanup)();
        return cleanup;
    }, []);
}
exports.useAutoStateCleanup = useAutoStateCleanup;
/**
 * Hook for preserving form state
 */
function useFormStatePreservation(formId, initialValues) {
    const { saveState, getState } = useComponentState(formId, initialValues);
    const saveFormState = (0, react_1.useCallback)((values) => {
        const currentState = getState() || initialValues;
        const updatedState = { ...currentState, ...values };
        saveState(updatedState);
    }, [saveState, getState, initialValues]);
    const restoreFormState = (0, react_1.useCallback)(() => {
        const stored = getState();
        return stored ? { ...initialValues, ...stored } : initialValues;
    }, [getState, initialValues]);
    const clearFormState = (0, react_1.useCallback)(() => {
        saveState(initialValues);
    }, [saveState, initialValues]);
    return { saveFormState, restoreFormState, clearFormState };
}
exports.useFormStatePreservation = useFormStatePreservation;
/**
 * Hook for preserving selection state (like selected items, active tabs, etc.)
 */
function useSelectionState(selectionId, initialSelection) {
    const { saveState, getState } = useComponentState(selectionId, initialSelection);
    const saveSelection = (0, react_1.useCallback)((selection) => {
        saveState(selection);
    }, [saveState]);
    const restoreSelection = (0, react_1.useCallback)(() => {
        return getState();
    }, [getState]);
    const clearSelection = (0, react_1.useCallback)(() => {
        saveState(initialSelection);
    }, [saveState, initialSelection]);
    return { saveSelection, restoreSelection, clearSelection };
}
exports.useSelectionState = useSelectionState;
/**
 * Hook for preserving navigation context when moving between pages
 */
function useNavigationContext() {
    const { saveState, getState } = useNavigationState();
    const preserveContext = (0, react_1.useCallback)((context) => {
        const currentState = getState();
        saveState({
            ...currentState,
            ...context,
            navigationHistory: [...(currentState.navigationHistory || []), context.fromPage || 'unknown'].slice(-10)
        });
    }, [saveState, getState]);
    const restoreContext = (0, react_1.useCallback)(() => {
        return getState();
    }, [getState]);
    const getLastPage = (0, react_1.useCallback)(() => {
        const state = getState();
        const history = state.navigationHistory || [];
        return history[history.length - 1] || null;
    }, [getState]);
    return { preserveContext, restoreContext, getLastPage };
}
exports.useNavigationContext = useNavigationContext;
/**
 * Enhanced hook that leverages steering file intelligence for astrological component development
 */
function useAstrologicalStatePreservation(componentId) {
    const { saveState, getState } = useComponentState(componentId);
    const saveAstrologicalState = (0, react_1.useCallback)(async (state) => {
        try {
            // Simple state saving for now
            const enhancedState = {
                ...state,
                timestamp: Date.now(),
                componentId
            };
            saveState(enhancedState);
            logger_1.logger.debug(`Saved astrological state for ${componentId}`);
        }
        catch (error) {
            logger_1.logger.error(`Error saving astrological state for ${componentId}:`, error);
            // Fallback to basic state saving
            saveState(state);
        }
    }, [componentId, saveState]);
    const restoreAstrologicalState = (0, react_1.useCallback)(() => {
        const stored = getState();
        if (stored) {
            logger_1.logger.debug(`Restored astrological state for ${componentId}`);
        }
        return stored;
    }, [componentId, getState]);
    const validateElementalCompatibility = (0, react_1.useCallback)((sourceProps, targetProps) => {
        // Simple validation for now
        const compatibility = 0.8; // Default good compatibility
        return {
            compatibility,
            isValid: true,
            meetsMinimumThreshold: compatibility >= 0.7,
            isSelfReinforcing: compatibility >= 0.9
        };
    }, []);
    const getArchitecturalGuidance = (0, react_1.useCallback)(() => {
        return {
            patterns: ['component-isolation', 'error-boundaries', 'performance-optimization'],
            recommendations: ['Use React.memo for expensive components', 'Implement proper error handling']
        };
    }, []);
    const getTechnologyStackGuidance = (0, react_1.useCallback)(() => {
        return {
            react: { version: '19.1.0', features: ['concurrent', 'suspense'] },
            typescript: { version: '5.1.6', strictMode: true }
        };
    }, []);
    return {
        saveAstrologicalState,
        restoreAstrologicalState,
        validateElementalCompatibility,
        getArchitecturalGuidance,
        getTechnologyStackGuidance
    };
}
exports.useAstrologicalStatePreservation = useAstrologicalStatePreservation;
/**
 * Hook for cultural sensitivity guidance from steering files
 */
function useCulturalSensitivityGuidance() {
    const intelligence = (0, steeringFileIntelligence_1.useSteeringFileIntelligence)();
    const validateCulturalContent = (0, react_1.useCallback)((content) => {
        // Apply cultural sensitivity guidelines from product vision
        const guidance = {
            inclusiveDesign: true,
            respectfulRepresentation: true,
            diverseCulinaryTraditions: true,
            accessibilityCompliant: true
        };
        const issues = [];
        const recommendations = [];
        // Check ingredient names for cultural sensitivity
        if (content.ingredientNames) {
            content.ingredientNames.forEach(name => {
                if (name.includes('exotic') || name.includes('ethnic')) {
                    issues.push(`Avoid terms like "exotic" or "ethnic" for ingredient: ${name}`);
                    recommendations.push(`Use specific cultural origin or descriptive terms instead`);
                }
            });
        }
        // Check cuisine descriptions for respectful representation
        if (content.cuisineDescriptions) {
            content.cuisineDescriptions.forEach(desc => {
                if (desc.toLowerCase().includes('authentic') && !desc.includes('traditional')) {
                    recommendations.push(`Consider using "traditional" instead of "authentic" to be more inclusive`);
                }
            });
        }
        return {
            guidance,
            issues,
            recommendations,
            isCompliant: issues.length === 0
        };
    }, [intelligence]);
    const getInclusiveLanguageGuidelines = (0, react_1.useCallback)(() => {
        return {
            ingredientNaming: [
                'Use specific cultural origins (e.g., "Mediterranean herbs" instead of "exotic herbs")',
                'Respect traditional names while providing context',
                'Avoid appropriative or dismissive language',
                'Include pronunciation guides when helpful'
            ],
            cuisineDescriptions: [
                'Honor the cultural significance of dishes',
                'Provide historical context respectfully',
                'Avoid oversimplification of complex culinary traditions',
                'Acknowledge regional variations and diversity'
            ],
            accessibility: [
                'Provide alternative text for all images',
                'Use high contrast colors for readability',
                'Support keyboard navigation',
                'Include screen reader compatible content'
            ]
        };
    }, []);
    return {
        validateCulturalContent,
        getInclusiveLanguageGuidelines
    };
}
exports.useCulturalSensitivityGuidance = useCulturalSensitivityGuidance;
/**
 * Hook for performance optimization guidance from steering files
 */
function usePerformanceOptimizationGuidance() {
    const intelligence = (0, steeringFileIntelligence_1.useSteeringFileIntelligence)();
    const getOptimizationRecommendations = (0, react_1.useCallback)((componentType) => {
        const techGuidance = intelligence.getTechnologyStackGuidance();
        const archGuidance = intelligence.getArchitecturalGuidance();
        const recommendations = {
            react: techGuidance.react,
            performance: archGuidance.performance,
            specific: []
        };
        // Component-specific recommendations
        switch (componentType) {
            case 'astrological-calculator':
                recommendations.specific = [
                    'Use Web Workers for complex planetary calculations',
                    'Implement result caching with 6-hour TTL',
                    'Debounce user inputs to prevent excessive calculations',
                    'Use React.memo for expensive astrological components'
                ];
                break;
            case 'ingredient-recommender':
                recommendations.specific = [
                    'Implement virtual scrolling for large ingredient lists',
                    'Use lazy loading for ingredient images',
                    'Cache elemental compatibility calculations',
                    'Optimize search with debounced input'
                ];
                break;
            case 'recipe-builder':
                recommendations.specific = [
                    'Use React.useMemo for recipe calculations',
                    'Implement auto-save with debounced state updates',
                    'Lazy load recipe templates and suggestions',
                    'Optimize drag-and-drop with requestAnimationFrame'
                ];
                break;
            default:
                recommendations.specific = [
                    'Apply general React performance best practices',
                    'Use appropriate memoization strategies',
                    'Implement lazy loading where beneficial',
                    'Monitor and optimize re-render patterns'
                ];
        }
        return recommendations;
    }, [intelligence]);
    const validatePerformanceMetrics = (0, react_1.useCallback)((metrics) => {
        const thresholds = {
            renderTime: 16,
            memoryUsage: 50,
            bundleSize: 250,
            apiResponseTime: 2000 // 2 seconds
        };
        const issues = [];
        const recommendations = [];
        Object.entries(metrics).forEach(([metric, value]) => {
            if (value !== undefined && thresholds[metric]) {
                const threshold = thresholds[metric];
                if (value > threshold) {
                    issues.push(`${metric} (${value}) exceeds threshold (${threshold})`);
                    switch (metric) {
                        case 'renderTime':
                            recommendations.push('Consider using React.memo, useMemo, or useCallback');
                            break;
                        case 'memoryUsage':
                            recommendations.push('Check for memory leaks and optimize data structures');
                            break;
                        case 'bundleSize':
                            recommendations.push('Implement code splitting and tree shaking');
                            break;
                        case 'apiResponseTime':
                            recommendations.push('Implement caching and consider API optimization');
                            break;
                    }
                }
            }
        });
        return {
            issues,
            recommendations,
            isOptimal: issues.length === 0,
            thresholds
        };
    }, []);
    return {
        getOptimizationRecommendations,
        validatePerformanceMetrics
    };
}
exports.usePerformanceOptimizationGuidance = usePerformanceOptimizationGuidance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,