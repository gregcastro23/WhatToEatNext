{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/astrology/transitValidation.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/astrology/transitValidation.ts"],"sourcesContent":["/**\n * Transit Date Validation Utilities\n * \n * Provides validation functions for planetary transit dates\n * to ensure accuracy in astrological calculations.\n */\n\nimport { logger } from '@/utils/logger';\n\n/**\n * Transit date structure\n */\nexport interface TransitDate {\n  Start: string;\n  End: string;\n  Peak?: string;\n}\n\n/**\n * Transit dates structure for a planet\n */\nexport interface PlanetTransitDates {\n  [sign: string]: TransitDate;\n  RetrogradePhases?: {\n    [phase: string]: TransitDate;\n  };\n}\n\n/**\n * Validate a single transit date against current date\n */\nexport function validateTransitDate(\n  planet: string,\n  date: Date,\n  sign: string,\n  transitDates: PlanetTransitDates\n): boolean {\n  try {\n    if (!transitDates || !transitDates[sign]) {\n      logger.warn(`No transit data found for ${planet} in ${sign}`);\n      return false;\n    }\n\n    const transit = transitDates[sign];\n    if (!transit.Start || !transit.End) {\n      logger.warn(`Invalid transit data for ${planet} in ${sign}: missing Start or End date`);\n      return false;\n    }\n\n    const startDate = new Date(transit.Start);\n    const endDate = new Date(transit.End);\n    \n    // Validate date format\n    if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {\n      logger.error(`Invalid date format in transit data for ${planet} in ${sign}`);\n      return false;\n    }\n\n    // Check if current date falls within transit period\n    const isValid = date >= startDate && date <= endDate;\n    \n    if (!isValid) {\n      logger.debug(`Date ${date.toISOString().split('T')[0]} is outside transit period for ${planet} in ${sign} (${transit.Start} to ${transit.End})`);\n    }\n\n    return isValid;\n  } catch (error) {\n    logger.error(`Error validating transit date for ${planet}:`, error);\n    return false;\n  }\n}\n\n/**\n * Get current valid sign for a planet based on transit dates\n */\nexport function getCurrentTransitSign(\n  planet: string,\n  date: Date,\n  transitDates: PlanetTransitDates\n): string | null {\n  try {\n    const signs = Object.keys(transitDates).filter(key => key !== 'RetrogradePhases');\n    \n    for (const sign of signs) {\n      if (validateTransitDate(planet, date, sign, transitDates)) {\n        return sign;\n      }\n    }\n    \n    logger.warn(`No valid transit sign found for ${planet} on ${date.toISOString().split('T')[0]}`);\n    return null;\n  } catch (error) {\n    logger.error(`Error getting current transit sign for ${planet}:`, error);\n    return null;\n  }\n}\n\n/**\n * Validate retrograde phase dates\n */\nexport function validateRetrogradePhase(\n  planet: string,\n  date: Date,\n  transitDates: PlanetTransitDates\n): { isRetrograde: boolean; phase?: string } {\n  try {\n    if (!transitDates.RetrogradePhases) {\n      return { isRetrograde: false };\n    }\n\n    const phases = Object.entries(transitDates.RetrogradePhases);\n    \n    for (const [phaseName, phaseData] of phases) {\n      if (!phaseData.Start || !phaseData.End) {\n        continue;\n      }\n\n      const startDate = new Date(phaseData.Start);\n      const endDate = new Date(phaseData.End);\n      \n      if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {\n        logger.warn(`Invalid retrograde phase dates for ${planet} phase ${phaseName}`);\n        continue;\n      }\n\n      if (date >= startDate && date <= endDate) {\n        return { isRetrograde: true, phase: phaseName };\n      }\n    }\n\n    return { isRetrograde: false };\n  } catch (error) {\n    logger.error(`Error validating retrograde phase for ${planet}:`, error);\n    return { isRetrograde: false };\n  }\n}\n\n/**\n * Validate all transit dates for consistency\n */\nexport function validateAllTransitDates(transitDates: PlanetTransitDates): {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n} {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  try {\n    const signs = Object.keys(transitDates).filter(key => key !== 'RetrogradePhases');\n    \n    // Check each sign's transit dates\n    for (const sign of signs) {\n      const transit = transitDates[sign];\n      \n      if (!transit.Start || !transit.End) {\n        errors.push(`Missing Start or End date for sign ${sign}`);\n        continue;\n      }\n\n      const startDate = new Date(transit.Start);\n      const endDate = new Date(transit.Start);\n      \n      if (isNaN(startDate.getTime())) {\n        errors.push(`Invalid Start date format for sign ${sign}: ${transit.Start}`);\n      }\n      \n      if (isNaN(endDate.getTime())) {\n        errors.push(`Invalid End date format for sign ${sign}: ${transit.End}`);\n      }\n      \n      if (startDate >= endDate) {\n        errors.push(`Start date must be before End date for sign ${sign}`);\n      }\n    }\n\n    // Check for gaps or overlaps between signs\n    const sortedTransits = signs\n      .map(sign => ({\n        sign,\n        start: new Date(transitDates[sign].Start),\n        end: new Date(transitDates[sign].End)\n      }))\n      .filter(t => !isNaN(t.start.getTime()) && !isNaN(t.end.getTime()))\n      .sort((a, b) => a.start.getTime() - b.start.getTime());\n\n    for (let i = 0; i < sortedTransits.length - 1; i++) {\n      const current = sortedTransits[i];\n      const next = sortedTransits[i + 1];\n      \n      // Check for gaps\n      const daysBetween = (next.start.getTime() - current.end.getTime()) / (1000 * 60 * 60 * 24);\n      if (daysBetween > 1) {\n        warnings.push(`Gap of ${Math.round(daysBetween)} days between ${current.sign} and ${next.sign}`);\n      }\n      \n      // Check for overlaps\n      if (current.end > next.start) {\n        warnings.push(`Overlap between ${current.sign} and ${next.sign}`);\n      }\n    }\n\n    // Validate retrograde phases if present\n    if (transitDates.RetrogradePhases) {\n      const phases = Object.entries(transitDates.RetrogradePhases);\n      \n      for (const [phaseName, phaseData] of phases) {\n        if (!phaseData.Start || !phaseData.End) {\n          warnings.push(`Missing Start or End date for retrograde phase ${phaseName}`);\n          continue;\n        }\n\n        const startDate = new Date(phaseData.Start);\n        const endDate = new Date(phaseData.End);\n        \n        if (isNaN(startDate.getTime())) {\n          errors.push(`Invalid Start date format for retrograde phase ${phaseName}: ${phaseData.Start}`);\n        }\n        \n        if (isNaN(endDate.getTime())) {\n          errors.push(`Invalid End date format for retrograde phase ${phaseName}: ${phaseData.End}`);\n        }\n        \n        if (startDate >= endDate) {\n          errors.push(`Start date must be before End date for retrograde phase ${phaseName}`);\n        }\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n  } catch (error) {\n    errors.push(`Validation error: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    return {\n      isValid: false,\n      errors,\n      warnings\n    };\n  }\n}\n\n/**\n * Load and validate planet transit dates from data files\n */\nexport async function loadPlanetTransitDates(planetName: string): Promise<PlanetTransitDates | null> {\n  try {\n    // Dynamic import to load planet data\n    const planetModule = await import(`@/data/planets/${planetName.toLowerCase()}`);\n    const planetData = planetModule.default;\n    \n    if (!planetData?.PlanetSpecific?.TransitDates) {\n      logger.warn(`No transit dates found for planet ${planetName}`);\n      return null;\n    }\n\n    const transitDates = planetData.PlanetSpecific.TransitDates;\n    const validation = validateAllTransitDates(transitDates);\n    \n    if (!validation.isValid) {\n      logger.error(`Invalid transit dates for ${planetName}:`, validation.errors);\n      return null;\n    }\n\n    if (validation.warnings.length > 0) {\n      logger.warn(`Transit date warnings for ${planetName}:`, validation.warnings);\n    }\n\n    return transitDates;\n  } catch (error) {\n    logger.error(`Error loading transit dates for ${planetName}:`, error);\n    return null;\n  }\n}\n\n/**\n * Validate planetary position against transit dates\n */\nexport async function validatePlanetaryPosition(\n  planetName: string,\n  position: { sign: string; degree: number; exactLongitude: number },\n  date: Date = new Date()\n): Promise<boolean> {\n  try {\n    const transitDates = await loadPlanetTransitDates(planetName);\n    \n    if (!transitDates) {\n      logger.warn(`Cannot validate position for ${planetName}: no transit data available`);\n      return false;\n    }\n\n    const isValid = validateTransitDate(planetName, date, position.sign, transitDates);\n    \n    if (!isValid) {\n      logger.warn(`Position validation failed for ${planetName}: ${position.sign} at ${position.degree}° on ${date.toISOString().split('T')[0]}`);\n    }\n\n    return isValid;\n  } catch (error) {\n    logger.error(`Error validating planetary position for ${planetName}:`, error);\n    return false;\n  }\n}\n\n/**\n * Constants for transit validation\n */\nexport const TRANSIT_CONSTANTS = {\n  VALID_SIGNS: [\n    'aries', 'taurus', 'gemini', 'cancer', 'leo', 'virgo',\n    'libra', 'scorpio', 'sagittarius', 'capricorn', 'aquarius', 'pisces'\n  ],\n  DEGREES_PER_SIGN: 30,\n  MAX_LONGITUDE: 360,\n  DATE_FORMAT: 'YYYY-MM-DD',\n  RETROGRADE_PLANETS: ['mercury', 'venus', 'mars', 'jupiter', 'saturn', 'uranus', 'neptune', 'pluto'],\n  ALWAYS_DIRECT: ['sun', 'moon'],\n  ALWAYS_RETROGRADE: ['northNode', 'southNode']\n} as const;"],"version":3}