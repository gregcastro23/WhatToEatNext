{"file":"/Users/GregCastro/Desktop/WhatToEatNext/backups/conservative-wave-2025-08-11T05-21-33-410Z/src/services/campaign/LintingFormattingSystem.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/backups/conservative-wave-2025-08-11T05-21-33-410Z/src/services/campaign/LintingFormattingSystem.ts"],"sourcesContent":["/**\n * Linting and Formatting System\n * Automated code quality enforcement and formatting system\n * Part of the Kiro Optimization Campaign System\n */\n\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport { logger } from '../../utils/logger';\n\nexport interface LintingFormattingConfig {\n  maxFilesPerBatch: number;\n  safetyValidationEnabled: boolean;\n  buildValidationFrequency: number;\n  autoFixEnabled: boolean;\n  formattingEnabled: boolean;\n  lintingRules: LintingRuleConfig;\n  formattingRules: FormattingRuleConfig;\n  patternBasedFixes: PatternBasedFixConfig[];\n}\n\nexport interface LintingRuleConfig {\n  enforceTypeScriptRules: boolean;\n  enforceReactRules: boolean;\n  enforceImportRules: boolean;\n  maxWarningsThreshold: number;\n  customRuleOverrides: Record<string, string>;\n}\n\nexport interface FormattingRuleConfig {\n  enforceConsistentIndentation: boolean;\n  enforceTrailingCommas: boolean;\n  enforceSemicolons: boolean;\n  enforceQuoteStyle: 'single' | 'double' | 'consistent';\n  enforceLineLength: number;\n  enforceSpacing: boolean;\n}\n\nexport interface PatternBasedFixConfig {\n  name: string;\n  description: string;\n  pattern: RegExp;\n  replacement: string;\n  fileExtensions: string[];\n  enabled: boolean;\n}\n\nexport interface LintingFormattingResult {\n  filesProcessed: string[];\n  lintingViolationsFixed: number;\n  formattingIssuesFixed: number;\n  patternBasedFixesApplied: number;\n  buildValidationPassed: boolean;\n  errors: string[];\n  warnings: string[];\n  violationBreakdown: ViolationBreakdown;\n}\n\nexport interface ViolationBreakdown {\n  typeScriptErrors: number;\n  reactViolations: number;\n  importViolations: number;\n  formattingIssues: number;\n  customPatternFixes: number;\n}\n\nexport interface LintingViolation {\n  filePath: string;\n  line: number;\n  column: number;\n  ruleId: string;\n  message: string;\n  severity: 'error' | 'warning';\n  fixable: boolean;\n}\n\nexport class LintingFormattingSystem {\n  private config: LintingFormattingConfig;\n  private processedFiles: Set<string> = new Set();\n\n  constructor(config: LintingFormattingConfig) {\n    this.config = config;\n  }\n\n  /**\n   * Execute comprehensive linting and formatting\n   */\n  async executeLintingAndFormatting(targetFiles?: string[]): Promise<LintingFormattingResult> {\n    const startTime = Date.now();\n    logger.info('Starting linting and formatting system execution');\n\n    try {\n      // Get files to process\n      const filesToProcess = targetFiles || (await this.getSourceFiles());\n      const batchedFiles = this.batchFiles(filesToProcess);\n\n      let totalResult: LintingFormattingResult = {\n        filesProcessed: [],\n        lintingViolationsFixed: 0,\n        formattingIssuesFixed: 0,\n        patternBasedFixesApplied: 0,\n        buildValidationPassed: true,\n        errors: [],\n        warnings: [],\n        violationBreakdown: {\n          typeScriptErrors: 0,\n          reactViolations: 0,\n          importViolations: 0,\n          formattingIssues: 0,\n          customPatternFixes: 0,\n        },\n      };\n\n      // Process files in batches\n      for (let i = 0; i < batchedFiles.length; i++) {\n        const batch = batchedFiles[i];\n        logger.info(`Processing batch ${i + 1}/${batchedFiles.length} (${batch.length} files)`);\n\n        const batchResult = await this.processBatch(batch);\n        totalResult = this.mergeBatchResults(totalResult, batchResult);\n\n        // Validate build after each batch if enabled\n        if (\n          this.config.safetyValidationEnabled &&\n          (i + 1) % this.config.buildValidationFrequency === 0\n        ) {\n          const buildValid = await this.validateBuild();\n          if (!buildValid) {\n            totalResult.buildValidationPassed = false;\n            totalResult.errors.push(`Build validation failed after batch ${i + 1}`);\n            break;\n          }\n        }\n      }\n\n      const executionTime = Date.now() - startTime;\n      logger.info(`Linting and formatting completed in ${executionTime}ms`, {\n        filesProcessed: totalResult.filesProcessed.length,\n        violationsFixed: totalResult.lintingViolationsFixed,\n        formattingFixed: totalResult.formattingIssuesFixed,\n      });\n\n      return totalResult;\n    } catch (error) {\n      logger.error('Linting and formatting system failed', error);\n      return {\n        filesProcessed: [],\n        lintingViolationsFixed: 0,\n        formattingIssuesFixed: 0,\n        patternBasedFixesApplied: 0,\n        buildValidationPassed: false,\n        errors: [((error as Record<string, unknown>).message as string) || 'Unknown error'],\n        warnings: [],\n        violationBreakdown: {\n          typeScriptErrors: 0,\n          reactViolations: 0,\n          importViolations: 0,\n          formattingIssues: 0,\n          customPatternFixes: 0,\n        },\n      };\n    }\n  }\n\n  /**\n   * Detect linting violations across the codebase\n   */\n  async detectLintingViolations(filePaths?: string[]): Promise<LintingViolation[]> {\n    const files = filePaths || (await this.getSourceFiles());\n    const violations: LintingViolation[] = [];\n\n    try {\n      const eslintOutput = await this.runESLint(files, false);\n      const parsedViolations = this.parseESLintOutput(eslintOutput);\n      violations.push(...parsedViolations);\n    } catch (error) {\n      logger.error('Failed to detect linting violations', error);\n    }\n\n    return violations;\n  }\n\n  /**\n   * Fix linting violations automatically\n   */\n  async fixLintingViolations(filePaths: string[]): Promise<number> {\n    if (!this.config.autoFixEnabled) {\n      logger.warn('Auto-fix is disabled in configuration');\n      return 0;\n    }\n\n    try {\n      const beforeViolations = await this.detectLintingViolations(filePaths);\n      await this.runESLint(filePaths, true);\n      const afterViolations = await this.detectLintingViolations(filePaths);\n\n      const fixedCount = beforeViolations.length - afterViolations.length;\n      filePaths.forEach(file => this.processedFiles.add(file));\n\n      return Math.max(0, fixedCount);\n    } catch (error) {\n      logger.error('Failed to fix linting violations', error);\n      return 0;\n    }\n  }\n\n  /**\n   * Format code according to style rules\n   */\n  async formatCode(filePaths: string[]): Promise<number> {\n    if (!this.config.formattingEnabled) {\n      logger.warn('Formatting is disabled in configuration');\n      return 0;\n    }\n\n    let formattedCount = 0;\n\n    for (const filePath of filePaths) {\n      try {\n        const formatted = await this.formatFile(filePath);\n        if (formatted) {\n          formattedCount++;\n          this.processedFiles.add(filePath);\n        }\n      } catch (error) {\n        logger.error(`Failed to format ${filePath}`, error);\n      }\n    }\n\n    return formattedCount;\n  }\n\n  /**\n   * Apply pattern-based code improvements\n   */\n  async applyPatternBasedFixes(filePaths: string[]): Promise<number> {\n    let fixesApplied = 0;\n\n    for (const filePath of filePaths) {\n      try {\n        const applied = await this.applyPatternFixesToFile(filePath);\n        fixesApplied += applied;\n        if (applied > 0) {\n          this.processedFiles.add(filePath);\n        }\n      } catch (error) {\n        logger.error(`Failed to apply pattern fixes to ${filePath}`, error);\n      }\n    }\n\n    return fixesApplied;\n  }\n\n  /**\n   * Enforce style guide compliance\n   */\n  async enforceStyleGuideCompliance(filePaths: string[]): Promise<number> {\n    let complianceIssuesFixed = 0;\n\n    for (const filePath of filePaths) {\n      try {\n        const fixed = await this.enforceStyleGuideInFile(filePath);\n        if (fixed > 0) {\n          complianceIssuesFixed += fixed;\n          this.processedFiles.add(filePath);\n        }\n      } catch (error) {\n        logger.error(`Failed to enforce style guide in ${filePath}`, error);\n      }\n    }\n\n    return complianceIssuesFixed;\n  }\n\n  // Private implementation methods\n\n  private async processBatch(filePaths: string[]): Promise<LintingFormattingResult> {\n    const result: LintingFormattingResult = {\n      filesProcessed: [],\n      lintingViolationsFixed: 0,\n      formattingIssuesFixed: 0,\n      patternBasedFixesApplied: 0,\n      buildValidationPassed: true,\n      errors: [],\n      warnings: [],\n      violationBreakdown: {\n        typeScriptErrors: 0,\n        reactViolations: 0,\n        importViolations: 0,\n        formattingIssues: 0,\n        customPatternFixes: 0,\n      },\n    };\n\n    // Step 1: Fix linting violations\n    try {\n      result.lintingViolationsFixed = await this.fixLintingViolations(filePaths);\n      result.violationBreakdown = await this.getViolationBreakdown(filePaths);\n    } catch (error) {\n      result.errors.push(\n        `Linting fixes failed: ${(error as Record<string, unknown>).message || 'Unknown error'}`,\n      );\n    }\n\n    // Step 2: Format code\n    try {\n      result.formattingIssuesFixed = await this.formatCode(filePaths);\n    } catch (error) {\n      result.errors.push(\n        `Code formatting failed: ${(error as Record<string, unknown>).message || 'Unknown error'}`,\n      );\n    }\n\n    // Step 3: Apply pattern-based fixes\n    try {\n      result.patternBasedFixesApplied = await this.applyPatternBasedFixes(filePaths);\n    } catch (error) {\n      result.errors.push(\n        `Pattern-based fixes failed: ${(error as Record<string, unknown>).message || 'Unknown error'}`,\n      );\n    }\n\n    // Step 4: Enforce style guide compliance\n    try {\n      const complianceFixed = await this.enforceStyleGuideCompliance(filePaths);\n      result.formattingIssuesFixed += complianceFixed;\n    } catch (error) {\n      result.errors.push(\n        `Style guide enforcement failed: ${(error as Record<string, unknown>).message || 'Unknown error'}`,\n      );\n    }\n\n    result.filesProcessed = Array.from(this.processedFiles);\n    return result;\n  }\n\n  private async runESLint(filePaths: string[], fix: boolean = false): Promise<string> {\n    const fixFlag = fix ? '--fix' : '';\n    const filesArg = filePaths.join(' ');\n\n    try {\n      const command = `npx eslint ${fixFlag} --format json ${filesArg}`;\n      return execSync(command, {\n        encoding: 'utf8',\n        stdio: 'pipe',\n        timeout: 60000,\n      });\n    } catch (error) {\n      // ESLint returns non-zero exit code when violations are found\n      const errorData = error as Record<string, unknown>;\n      if (errorData.stdout) {\n        return errorData.stdout as string;\n      }\n      throw error;\n    }\n  }\n\n  private parseESLintOutput(output: string): LintingViolation[] {\n    try {\n      const results = JSON.parse(output);\n      const violations: LintingViolation[] = [];\n\n      for (const result of results) {\n        for (const message of result.messages) {\n          violations.push({\n            filePath: result.filePath,\n            line: message.line,\n            column: message.column,\n            ruleId: message.ruleId,\n            message: message.message,\n            severity: message.severity === 2 ? 'error' : 'warning',\n            fixable: message.fix !== undefined,\n          });\n        }\n      }\n\n      return violations;\n    } catch (error) {\n      logger.error('Failed to parse ESLint output', error);\n      return [];\n    }\n  }\n\n  private async formatFile(filePath: string): Promise<boolean> {\n    try {\n      const originalContent = fs.readFileSync(filePath, 'utf8');\n\n      // Run Prettier\n      const formattedContent = execSync(`npx prettier --write ${filePath}`, {\n        encoding: 'utf8',\n        stdio: 'pipe',\n      });\n\n      // Check if file was actually changed\n      const newContent = fs.readFileSync(filePath, 'utf8');\n      return originalContent !== newContent;\n    } catch (error) {\n      logger.error(`Failed to format file ${filePath}`, error);\n      return false;\n    }\n  }\n\n  private async applyPatternFixesToFile(filePath: string): Promise<number> {\n    const content = fs.readFileSync(filePath, 'utf8');\n    let modifiedContent = content;\n    let fixesApplied = 0;\n\n    const fileExtension = path.extname(filePath);\n    const enabledPatterns = this.config.patternBasedFixes.filter(\n      pattern => pattern.enabled && pattern.fileExtensions.includes(fileExtension),\n    );\n\n    for (const pattern of enabledPatterns) {\n      const matches = modifiedContent.match(pattern.pattern);\n      if (matches) {\n        modifiedContent = modifiedContent.replace(pattern.pattern, pattern.replacement);\n        fixesApplied += matches.length;\n        logger.info(\n          `Applied pattern fix \"${pattern.name}\" to ${filePath}: ${matches.length} occurrences`,\n        );\n      }\n    }\n\n    if (fixesApplied > 0) {\n      fs.writeFileSync(filePath, modifiedContent, 'utf8');\n    }\n\n    return fixesApplied;\n  }\n\n  private async enforceStyleGuideInFile(filePath: string): Promise<number> {\n    const content = fs.readFileSync(filePath, 'utf8');\n    const lines = content.split('\\n');\n    const modifiedLines = [...lines];\n    let fixesApplied = 0;\n\n    const { formattingRules } = this.config;\n\n    // Enforce consistent indentation\n    if (formattingRules.enforceConsistentIndentation) {\n      for (let i = 0; i < modifiedLines.length; i++) {\n        const line = modifiedLines[i];\n        if (line.match(/^\\t/)) {\n          // Convert tabs to spaces\n          modifiedLines[i] = line.replace(/^\\t+/, match => '  '.repeat(match.length));\n          fixesApplied++;\n        }\n      }\n    }\n\n    // Enforce trailing commas\n    if (formattingRules.enforceTrailingCommas) {\n      for (let i = 0; i < modifiedLines.length; i++) {\n        const line = modifiedLines[i];\n        // Add trailing comma to object/array literals\n        if (line.match(/[^,]\\s*\\}/) || line.match(/[^,]\\s*\\]/)) {\n          const nextLine = modifiedLines[i + 1];\n          if (nextLine && (nextLine.includes('}') || nextLine.includes(']'))) {\n            modifiedLines[i] = line.replace(/([^,\\s])\\s*$/, '$1,');\n            fixesApplied++;\n          }\n        }\n      }\n    }\n\n    // Enforce semicolons\n    if (formattingRules.enforceSemicolons) {\n      for (let i = 0; i < modifiedLines.length; i++) {\n        const line = modifiedLines[i].trim();\n        if (\n          line &&\n          !line.endsWith(';') &&\n          !line.endsWith('{') &&\n          !line.endsWith('}') &&\n          !line.startsWith('//') &&\n          !line.startsWith('/*') &&\n          !line.startsWith('*')\n        ) {\n          // Add semicolon to statements that need them\n          if (line.match(/^(const|let|var|return|throw|break|continue|import|export)/)) {\n            modifiedLines[i] = modifiedLines[i].replace(/([^;])$/, '$1;');\n            fixesApplied++;\n          }\n        }\n      }\n    }\n\n    // Enforce quote style\n    if (formattingRules.enforceQuoteStyle !== 'consistent') {\n      const targetQuote = formattingRules.enforceQuoteStyle === 'single' ? \"'\" : '\"';\n      const sourceQuote = formattingRules.enforceQuoteStyle === 'single' ? '\"' : \"'\";\n\n      for (let i = 0; i < modifiedLines.length; i++) {\n        const line = modifiedLines[i];\n        if (line.includes(sourceQuote)) {\n          modifiedLines[i] = line.replace(new RegExp(sourceQuote, 'g'), targetQuote);\n          fixesApplied++;\n        }\n      }\n    }\n\n    // Enforce line length\n    if (formattingRules.enforceLineLength > 0) {\n      for (let i = 0; i < modifiedLines.length; i++) {\n        const line = modifiedLines[i];\n        if (line.length > formattingRules.enforceLineLength) {\n          // Simple line breaking for long lines\n          if (line.includes(',')) {\n            const parts = line.split(',');\n            if (parts.length > 1) {\n              const indent = line.match(/^\\s*/)?.[0] || '';\n              modifiedLines[i] = parts[0] + ',';\n              for (let j = 1; j < parts.length; j++) {\n                modifiedLines.splice(\n                  i + j,\n                  0,\n                  indent + '  ' + parts[j].trim() + (j < parts.length - 1 ? ',' : ''),\n                );\n              }\n              fixesApplied++;\n            }\n          }\n        }\n      }\n    }\n\n    if (fixesApplied > 0) {\n      fs.writeFileSync(filePath, modifiedLines.join('\\n'), 'utf8');\n    }\n\n    return fixesApplied;\n  }\n\n  private async getViolationBreakdown(filePaths: string[]): Promise<ViolationBreakdown> {\n    const violations = await this.detectLintingViolations(filePaths);\n\n    const breakdown: ViolationBreakdown = {\n      typeScriptErrors: 0,\n      reactViolations: 0,\n      importViolations: 0,\n      formattingIssues: 0,\n      customPatternFixes: 0,\n    };\n\n    for (const violation of violations) {\n      if (violation.ruleId.startsWith('@typescript-eslint/')) {\n        breakdown.typeScriptErrors++;\n      } else if (violation.ruleId.startsWith('react')) {\n        breakdown.reactViolations++;\n      } else if (violation.ruleId.startsWith('import/')) {\n        breakdown.importViolations++;\n      } else {\n        breakdown.formattingIssues++;\n      }\n    }\n\n    return breakdown;\n  }\n\n  private async getSourceFiles(): Promise<string[]> {\n    try {\n      const output = execSync(\n        'find src -name \"*.ts\" -o -name \"*.tsx\" -o -name \"*.js\" -o -name \"*.jsx\" | grep -v __tests__ | grep -v .test. | grep -v .spec.',\n        { encoding: 'utf8', stdio: 'pipe' },\n      );\n      return output.trim().split('\\n').filter(Boolean);\n    } catch (error) {\n      logger.error('Failed to get source files', error);\n      return [];\n    }\n  }\n\n  private batchFiles(files: string[]): string[][] {\n    const batches: string[][] = [];\n    for (let i = 0; i < files.length; i += this.config.maxFilesPerBatch) {\n      batches.push(files.slice(i, i + this.config.maxFilesPerBatch));\n    }\n    return batches;\n  }\n\n  private async validateBuild(): Promise<boolean> {\n    try {\n      execSync('yarn tsc --noEmit --skipLibCheck', {\n        encoding: 'utf8',\n        stdio: 'pipe',\n        timeout: 30000,\n      });\n      return true;\n    } catch (error) {\n      logger.warn('Build validation failed during linting/formatting', error);\n      return false;\n    }\n  }\n\n  private mergeBatchResults(\n    total: LintingFormattingResult,\n    batch: LintingFormattingResult,\n  ): LintingFormattingResult {\n    return {\n      filesProcessed: [...total.filesProcessed, ...batch.filesProcessed],\n      lintingViolationsFixed: total.lintingViolationsFixed + batch.lintingViolationsFixed,\n      formattingIssuesFixed: total.formattingIssuesFixed + batch.formattingIssuesFixed,\n      patternBasedFixesApplied: total.patternBasedFixesApplied + batch.patternBasedFixesApplied,\n      buildValidationPassed: total.buildValidationPassed && batch.buildValidationPassed,\n      errors: [...total.errors, ...batch.errors],\n      warnings: [...total.warnings, ...batch.warnings],\n      violationBreakdown: {\n        typeScriptErrors:\n          total.violationBreakdown.typeScriptErrors + batch.violationBreakdown.typeScriptErrors,\n        reactViolations:\n          total.violationBreakdown.reactViolations + batch.violationBreakdown.reactViolations,\n        importViolations:\n          total.violationBreakdown.importViolations + batch.violationBreakdown.importViolations,\n        formattingIssues:\n          total.violationBreakdown.formattingIssues + batch.violationBreakdown.formattingIssues,\n        customPatternFixes:\n          total.violationBreakdown.customPatternFixes + batch.violationBreakdown.customPatternFixes,\n      },\n    };\n  }\n}\n\n/**\n * Default configuration for linting and formatting\n */\nexport const DEFAULT_LINTING_FORMATTING_CONFIG: LintingFormattingConfig = {\n  maxFilesPerBatch: 25,\n  safetyValidationEnabled: true,\n  buildValidationFrequency: 5,\n  autoFixEnabled: true,\n  formattingEnabled: true,\n  lintingRules: {\n    enforceTypeScriptRules: true,\n    enforceReactRules: true,\n    enforceImportRules: true,\n    maxWarningsThreshold: 1000,\n    customRuleOverrides: {},\n  },\n  formattingRules: {\n    enforceConsistentIndentation: true,\n    enforceTrailingCommas: true,\n    enforceSemicolons: true,\n    enforceQuoteStyle: 'single',\n    enforceLineLength: 100,\n    enforceSpacing: true,\n  },\n  patternBasedFixes: [\n    {\n      name: 'Remove console.log statements',\n      description: 'Remove console.log statements from production code',\n      pattern: /console\\.log\\([^)]*\\);?\\s*\\n?/g,\n      replacement: '',\n      fileExtensions: ['.ts', '.tsx', '.js', '.jsx'],\n      enabled: false, // Disabled by default for safety\n    },\n    {\n      name: 'Fix double semicolons',\n      description: 'Replace double semicolons with single semicolons',\n      pattern: /;;/g,\n      replacement: ';',\n      fileExtensions: ['.ts', '.tsx', '.js', '.jsx'],\n      enabled: true,\n    },\n    {\n      name: 'Remove trailing whitespace',\n      description: 'Remove trailing whitespace from lines',\n      pattern: /[ \\t]+$/gm,\n      replacement: '',\n      fileExtensions: ['.ts', '.tsx', '.js', '.jsx'],\n      enabled: true,\n    },\n    {\n      name: 'Fix multiple empty lines',\n      description: 'Replace multiple consecutive empty lines with single empty line',\n      pattern: /\\n\\s*\\n\\s*\\n/g,\n      replacement: '\\n\\n',\n      fileExtensions: ['.ts', '.tsx', '.js', '.jsx'],\n      enabled: true,\n    },\n  ],\n};\n"],"version":3}