a80e48e3035b41c83efabc4afdae0db3
"use strict";
/**
 * Transit Date Validation Utilities
 *
 * Provides validation functions for planetary transit dates
 * to ensure accuracy in astrological calculations.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TRANSIT_CONSTANTS = exports.validatePlanetaryPosition = exports.loadPlanetTransitDates = exports.validateAllTransitDates = exports.validateRetrogradePhase = exports.getCurrentTransitSign = exports.validateTransitDate = void 0;
const logger_1 = require("@/utils/logger");
/**
 * Validate a single transit date against current date
 */
function validateTransitDate(planet, date, sign, transitDates) {
    try {
        if (!transitDates || !transitDates[sign]) {
            logger_1.logger.warn(`No transit data found for ${planet} in ${sign}`);
            return false;
        }
        const transit = transitDates[sign];
        if (!transit.Start || !transit.End) {
            logger_1.logger.warn(`Invalid transit data for ${planet} in ${sign}: missing Start or End date`);
            return false;
        }
        const startDate = new Date(transit.Start);
        const endDate = new Date(transit.End);
        // Validate date format
        if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
            logger_1.logger.error(`Invalid date format in transit data for ${planet} in ${sign}`);
            return false;
        }
        // Check if current date falls within transit period
        const isValid = date >= startDate && date <= endDate;
        if (!isValid) {
            logger_1.logger.debug(`Date ${date.toISOString().split('T')[0]} is outside transit period for ${planet} in ${sign} (${transit.Start} to ${transit.End})`);
        }
        return isValid;
    }
    catch (error) {
        logger_1.logger.error(`Error validating transit date for ${planet}:`, error);
        return false;
    }
}
exports.validateTransitDate = validateTransitDate;
/**
 * Get current valid sign for a planet based on transit dates
 */
function getCurrentTransitSign(planet, date, transitDates) {
    try {
        const signs = Object.keys(transitDates).filter(key => key !== 'RetrogradePhases');
        for (const sign of signs) {
            if (validateTransitDate(planet, date, sign, transitDates)) {
                return sign;
            }
        }
        logger_1.logger.warn(`No valid transit sign found for ${planet} on ${date.toISOString().split('T')[0]}`);
        return null;
    }
    catch (error) {
        logger_1.logger.error(`Error getting current transit sign for ${planet}:`, error);
        return null;
    }
}
exports.getCurrentTransitSign = getCurrentTransitSign;
/**
 * Validate retrograde phase dates
 */
function validateRetrogradePhase(planet, date, transitDates) {
    try {
        if (!transitDates.RetrogradePhases) {
            return { isRetrograde: false };
        }
        const phases = Object.entries(transitDates.RetrogradePhases);
        for (const [phaseName, phaseData] of phases) {
            if (!phaseData.Start || !phaseData.End) {
                continue;
            }
            const startDate = new Date(phaseData.Start);
            const endDate = new Date(phaseData.End);
            if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
                logger_1.logger.warn(`Invalid retrograde phase dates for ${planet} phase ${phaseName}`);
                continue;
            }
            if (date >= startDate && date <= endDate) {
                return { isRetrograde: true, phase: phaseName };
            }
        }
        return { isRetrograde: false };
    }
    catch (error) {
        logger_1.logger.error(`Error validating retrograde phase for ${planet}:`, error);
        return { isRetrograde: false };
    }
}
exports.validateRetrogradePhase = validateRetrogradePhase;
/**
 * Validate all transit dates for consistency
 */
function validateAllTransitDates(transitDates) {
    const errors = [];
    const warnings = [];
    try {
        const signs = Object.keys(transitDates).filter(key => key !== 'RetrogradePhases');
        // Check each sign's transit dates
        for (const sign of signs) {
            const transit = transitDates[sign];
            if (!transit.Start || !transit.End) {
                errors.push(`Missing Start or End date for sign ${sign}`);
                continue;
            }
            const startDate = new Date(transit.Start);
            const endDate = new Date(transit.Start);
            if (isNaN(startDate.getTime())) {
                errors.push(`Invalid Start date format for sign ${sign}: ${transit.Start}`);
            }
            if (isNaN(endDate.getTime())) {
                errors.push(`Invalid End date format for sign ${sign}: ${transit.End}`);
            }
            if (startDate >= endDate) {
                errors.push(`Start date must be before End date for sign ${sign}`);
            }
        }
        // Check for gaps or overlaps between signs
        const sortedTransits = signs
            .map(sign => ({
            sign,
            start: new Date(transitDates[sign].Start),
            end: new Date(transitDates[sign].End)
        }))
            .filter(t => !isNaN(t.start.getTime()) && !isNaN(t.end.getTime()))
            .sort((a, b) => a.start.getTime() - b.start.getTime());
        for (let i = 0; i < sortedTransits.length - 1; i++) {
            const current = sortedTransits[i];
            const next = sortedTransits[i + 1];
            // Check for gaps
            const daysBetween = (next.start.getTime() - current.end.getTime()) / (1000 * 60 * 60 * 24);
            if (daysBetween > 1) {
                warnings.push(`Gap of ${Math.round(daysBetween)} days between ${current.sign} and ${next.sign}`);
            }
            // Check for overlaps
            if (current.end > next.start) {
                warnings.push(`Overlap between ${current.sign} and ${next.sign}`);
            }
        }
        // Validate retrograde phases if present
        if (transitDates.RetrogradePhases) {
            const phases = Object.entries(transitDates.RetrogradePhases);
            for (const [phaseName, phaseData] of phases) {
                if (!phaseData.Start || !phaseData.End) {
                    warnings.push(`Missing Start or End date for retrograde phase ${phaseName}`);
                    continue;
                }
                const startDate = new Date(phaseData.Start);
                const endDate = new Date(phaseData.End);
                if (isNaN(startDate.getTime())) {
                    errors.push(`Invalid Start date format for retrograde phase ${phaseName}: ${phaseData.Start}`);
                }
                if (isNaN(endDate.getTime())) {
                    errors.push(`Invalid End date format for retrograde phase ${phaseName}: ${phaseData.End}`);
                }
                if (startDate >= endDate) {
                    errors.push(`Start date must be before End date for retrograde phase ${phaseName}`);
                }
            }
        }
        return {
            isValid: errors.length === 0,
            errors,
            warnings
        };
    }
    catch (error) {
        errors.push(`Validation error: ${error instanceof Error ? error.message : 'Unknown error'}`);
        return {
            isValid: false,
            errors,
            warnings
        };
    }
}
exports.validateAllTransitDates = validateAllTransitDates;
/**
 * Load and validate planet transit dates from data files
 */
async function loadPlanetTransitDates(planetName) {
    try {
        // Dynamic import to load planet data
        const planetModule = await Promise.resolve(`${`@/data/planets/${planetName.toLowerCase()}`}`).then(s => __importStar(require(s)));
        const planetData = planetModule.default;
        if (!planetData?.PlanetSpecific?.TransitDates) {
            logger_1.logger.warn(`No transit dates found for planet ${planetName}`);
            return null;
        }
        const transitDates = planetData.PlanetSpecific.TransitDates;
        const validation = validateAllTransitDates(transitDates);
        if (!validation.isValid) {
            logger_1.logger.error(`Invalid transit dates for ${planetName}:`, validation.errors);
            return null;
        }
        if (validation.warnings.length > 0) {
            logger_1.logger.warn(`Transit date warnings for ${planetName}:`, validation.warnings);
        }
        return transitDates;
    }
    catch (error) {
        logger_1.logger.error(`Error loading transit dates for ${planetName}:`, error);
        return null;
    }
}
exports.loadPlanetTransitDates = loadPlanetTransitDates;
/**
 * Validate planetary position against transit dates
 */
async function validatePlanetaryPosition(planetName, position, date = new Date()) {
    try {
        const transitDates = await loadPlanetTransitDates(planetName);
        if (!transitDates) {
            logger_1.logger.warn(`Cannot validate position for ${planetName}: no transit data available`);
            return false;
        }
        const isValid = validateTransitDate(planetName, date, position.sign, transitDates);
        if (!isValid) {
            logger_1.logger.warn(`Position validation failed for ${planetName}: ${position.sign} at ${position.degree}° on ${date.toISOString().split('T')[0]}`);
        }
        return isValid;
    }
    catch (error) {
        logger_1.logger.error(`Error validating planetary position for ${planetName}:`, error);
        return false;
    }
}
exports.validatePlanetaryPosition = validatePlanetaryPosition;
/**
 * Constants for transit validation
 */
exports.TRANSIT_CONSTANTS = {
    VALID_SIGNS: [
        'aries', 'taurus', 'gemini', 'cancer', 'leo', 'virgo',
        'libra', 'scorpio', 'sagittarius', 'capricorn', 'aquarius', 'pisces'
    ],
    DEGREES_PER_SIGN: 30,
    MAX_LONGITUDE: 360,
    DATE_FORMAT: 'YYYY-MM-DD',
    RETROGRADE_PLANETS: ['mercury', 'venus', 'mars', 'jupiter', 'saturn', 'uranus', 'neptune', 'pluto'],
    ALWAYS_DIRECT: ['sun', 'moon'],
    ALWAYS_RETROGRADE: ['northNode', 'southNode']
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,