{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/unintentional-any-elimination/ProgressiveImprovementEngine.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/unintentional-any-elimination/ProgressiveImprovementEngine.ts"],"sourcesContent":["/**\n * Progressive Improvement Engine\n * Orchestrates batch processing with adaptive strategies and progress tracking\n */\n\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport {\n    BatchMetrics,\n    ClassificationContext,\n    TypeReplacement,\n    UnintentionalAnyCampaignResult,\n    UnintentionalAnyConfig,\n    UnintentionalAnyProgress\n} from './types';\n\nimport { AnyTypeClassifier } from './AnyTypeClassifier';\nimport { DomainContextAnalyzer } from './DomainContextAnalyzer';\nimport { SafeTypeReplacer } from './SafeTypeReplacer';\n\nexport class ProgressiveImprovementEngine {\n  private classifier: AnyTypeClassifier;\n  private replacer: SafeTypeReplacer;\n  private analyzer: DomainContextAnalyzer;\n  private processedFiles: Set<string> = new Set();\n  private batchCounter = 0;\n  private batchHistory: BatchMetrics[] = [];\n  private adaptiveConfig: UnintentionalAnyConfig;\n  private safetyCheckpoints: Map<number, UnintentionalAnyProgress> = new Map();\n\n  constructor(initialConfig?: Partial<UnintentionalAnyConfig>) {\n    this.classifier = new AnyTypeClassifier();\n    this.replacer = new SafeTypeReplacer();\n    this.analyzer = new DomainContextAnalyzer();\n\n    // Initialize adaptive configuration with defaults\n    this.adaptiveConfig = {\n      maxFilesPerBatch: initialConfig?.maxFilesPerBatch || 15,\n      targetReductionPercentage: initialConfig?.targetReductionPercentage || 15,\n      confidenceThreshold: initialConfig?.confidenceThreshold || 0.8,\n      enableDomainAnalysis: initialConfig?.enableDomainAnalysis ?? true,\n      enableDocumentation: initialConfig?.enableDocumentation ?? true,\n      safetyLevel: initialConfig?.safetyLevel || 'MODERATE',\n      validationFrequency: initialConfig?.validationFrequency || 5\n    };\n  }\n\n  /**\n   * Adapt strategy based on recent batch performance\n   */\n  private adaptStrategy(): void {\n    if (this.batchHistory.length < 2) return;\n\n    const recentBatches = this.batchHistory.slice(-3);\n    const averageSuccessRate = recentBatches.reduce((sum, batch) =>\n      sum + (batch.replacementsSuccessful / Math.max(1, batch.replacementsAttempted)), 0\n    ) / recentBatches.length;\n\n    const averageSafetyScore = recentBatches.reduce((sum, batch) =>\n      sum + batch.safetyScore, 0\n    ) / recentBatches.length;\n\n    console.log(`Adapting strategy - Success rate: ${(averageSuccessRate * 100).toFixed(1)}%, Safety score: ${averageSafetyScore.toFixed(2)}`);\n\n    // Adapt batch size based on safety score\n    if (averageSafetyScore < 0.7) {\n      // Reduce batch size for safety\n      this.adaptiveConfig.maxFilesPerBatch = Math.max(5, Math.floor(this.adaptiveConfig.maxFilesPerBatch * 0.7));\n      this.adaptiveConfig.confidenceThreshold = Math.min(0.95, this.adaptiveConfig.confidenceThreshold + 0.1);\n      console.log(`Reduced batch size to ${this.adaptiveConfig.maxFilesPerBatch} and increased confidence threshold to ${this.adaptiveConfig.confidenceThreshold}`);\n    } else if (averageSafetyScore > 0.9 && averageSuccessRate > 0.8) {\n      // Increase batch size for efficiency\n      this.adaptiveConfig.maxFilesPerBatch = Math.min(25, Math.floor(this.adaptiveConfig.maxFilesPerBatch * 1.2));\n      this.adaptiveConfig.confidenceThreshold = Math.max(0.7, this.adaptiveConfig.confidenceThreshold - 0.05);\n      console.log(`Increased batch size to ${this.adaptiveConfig.maxFilesPerBatch} and decreased confidence threshold to ${this.adaptiveConfig.confidenceThreshold}`);\n    }\n\n    // Adapt confidence threshold based on success rate\n    if (averageSuccessRate < 0.5) {\n      this.adaptiveConfig.confidenceThreshold = Math.min(0.95, this.adaptiveConfig.confidenceThreshold + 0.1);\n      console.log(`Low success rate, increased confidence threshold to ${this.adaptiveConfig.confidenceThreshold}`);\n    }\n\n    // Adapt validation frequency based on safety\n    if (averageSafetyScore < 0.8) {\n      this.adaptiveConfig.validationFrequency = Math.max(3, this.adaptiveConfig.validationFrequency - 1);\n      console.log(`Increased validation frequency to every ${this.adaptiveConfig.validationFrequency} files`);\n    }\n  }\n\n  /**\n   * Create a safety checkpoint\n   */\n  private async createSafetyCheckpoint(): Promise<void> {\n    const progress = await this.getCurrentProgress();\n    this.safetyCheckpoints.set(this.batchCounter, progress);\n    console.log(`Safety checkpoint created at batch ${this.batchCounter}`);\n  }\n\n  /**\n   * Get comprehensive progress metrics\n   */\n  async getProgressMetrics(): Promise<UnintentionalAnyProgress> {\n    return await this.getCurrentProgress();\n  }\n\n  /**\n   * Get batch execution history\n   */\n  getBatchHistory(): BatchMetrics[] {\n    return [...this.batchHistory];\n  }\n\n  /**\n   * Get current adaptive configuration\n   */\n  getAdaptiveConfig(): UnintentionalAnyConfig {\n    return { ...this.adaptiveConfig };\n  }\n\n  /**\n   * Set realistic targets based on historical success rates and codebase analysis\n   */\n  async setRealisticTargets(): Promise<{\n    recommendedTarget: number;\n    reasoning: string[];\n    milestones: Array<{ percentage: number; description: string; estimatedBatches: number }>;\n  }> {\n    const currentProgress = await this.getCurrentProgress();\n    const candidateFiles = await this.findFilesWithAnyTypes();\n\n    // Analyze file types and complexity\n    const fileAnalysis = await this.analyzeFileComplexity(candidateFiles.slice(0, 20));\n\n    // Calculate base success rate expectations\n    const baseSuccessRate = this.calculateExpectedSuccessRate(fileAnalysis);\n\n    // Historical data shows previous attempts achieved 1.7% reduction (30 fixes)\n    // Target 10x improvement = 17% reduction (300 fixes)\n    // But be realistic based on file analysis\n\n    let recommendedTarget = 15; // Default 15% as per requirements\n    const reasoning: string[] = [];\n\n    // Adjust based on file complexity\n    if (fileAnalysis.testFilePercentage > 30) {\n      reasoning.push(`${fileAnalysis.testFilePercentage.toFixed(1)}% of files are test files - focusing on non-test files first`);\n      recommendedTarget = Math.max(12, recommendedTarget - 3);\n    }\n\n    if (fileAnalysis.arrayTypePercentage > 20) {\n      reasoning.push(`${fileAnalysis.arrayTypePercentage.toFixed(1)}% are array types with historically 100% success rate`);\n      recommendedTarget = Math.min(20, recommendedTarget + 2);\n    }\n\n    if (fileAnalysis.recordTypePercentage > 15) {\n      reasoning.push(`${fileAnalysis.recordTypePercentage.toFixed(1)}% are Record types with mixed success - being selective`);\n      recommendedTarget = Math.max(10, recommendedTarget - 2);\n    }\n\n    if (fileAnalysis.functionParamPercentage > 25) {\n      reasoning.push(`${fileAnalysis.functionParamPercentage.toFixed(1)}% are function parameters with high failure rate - being conservative`);\n      recommendedTarget = Math.max(8, recommendedTarget - 5);\n    }\n\n    // Adjust based on historical batch performance if available\n    if (this.batchHistory.length > 0) {\n      const avgSuccessRate = this.batchHistory.reduce((sum, batch) =>\n        sum + (batch.replacementsSuccessful / Math.max(1, batch.replacementsAttempted)), 0\n      ) / this.batchHistory.length;\n\n      if (avgSuccessRate > 0.8) {\n        reasoning.push(`High historical success rate (${(avgSuccessRate * 100).toFixed(1)}%) - increasing target`);\n        recommendedTarget = Math.min(25, recommendedTarget + 3);\n      } else if (avgSuccessRate < 0.5) {\n        reasoning.push(`Low historical success rate (${(avgSuccessRate * 100).toFixed(1)}%) - reducing target`);\n        recommendedTarget = Math.max(5, recommendedTarget - 5);\n      }\n    }\n\n    // Create realistic milestones\n    const milestones = [\n      {\n        percentage: Math.floor(recommendedTarget * 0.25),\n        description: 'Initial progress - focus on high-confidence array types',\n        estimatedBatches: Math.ceil(candidateFiles.length * 0.1 / this.adaptiveConfig.maxFilesPerBatch)\n      },\n      {\n        percentage: Math.floor(recommendedTarget * 0.5),\n        description: 'Mid-point - expand to Record types and simple patterns',\n        estimatedBatches: Math.ceil(candidateFiles.length * 0.3 / this.adaptiveConfig.maxFilesPerBatch)\n      },\n      {\n        percentage: Math.floor(recommendedTarget * 0.75),\n        description: 'Advanced progress - tackle more complex patterns',\n        estimatedBatches: Math.ceil(candidateFiles.length * 0.6 / this.adaptiveConfig.maxFilesPerBatch)\n      },\n      {\n        percentage: recommendedTarget,\n        description: 'Target achievement - complete remaining high-confidence cases',\n        estimatedBatches: Math.ceil(candidateFiles.length * 0.8 / this.adaptiveConfig.maxFilesPerBatch)\n      }\n    ];\n\n    reasoning.push(`Recommended target: ${recommendedTarget}% reduction (${Math.floor(currentProgress.totalAnyTypes * recommendedTarget / 100)} fixes)`);\n    reasoning.push(`Based on analysis of ${candidateFiles.length} files with any types`);\n\n    // Update adaptive config with realistic target\n    this.adaptiveConfig.targetReductionPercentage = recommendedTarget;\n\n    return {\n      recommendedTarget,\n      reasoning,\n      milestones\n    };\n  }\n\n  /**\n   * Monitor progress with realistic milestone tracking\n   */\n  async monitorProgress(): Promise<{\n    currentProgress: UnintentionalAnyProgress;\n    milestoneStatus: Array<{ milestone: number; achieved: boolean; description: string }>;\n    recommendations: string[];\n    needsManualIntervention: boolean;\n  }> {\n    const currentProgress = await this.getCurrentProgress();\n    const targetInfo = await this.setRealisticTargets();\n\n    // Check milestone achievements\n    const milestoneStatus = targetInfo.milestones.map(milestone => ({\n      milestone: milestone.percentage,\n      achieved: currentProgress.reductionPercentage >= milestone.percentage,\n      description: milestone.description\n    }));\n\n    const recommendations: string[] = [];\n    let needsManualIntervention = false;\n\n    // Analyze if we need manual intervention\n    if (this.batchHistory.length >= 5) {\n      const recentBatches = this.batchHistory.slice(-5);\n      const avgSuccessRate = recentBatches.reduce((sum, batch) =>\n        sum + (batch.replacementsSuccessful / Math.max(1, batch.replacementsAttempted)), 0\n      ) / recentBatches.length;\n\n      const avgSafetyScore = recentBatches.reduce((sum, batch) => sum + batch.safetyScore, 0) / recentBatches.length;\n\n      if (avgSuccessRate < 0.3) {\n        needsManualIntervention = true;\n        recommendations.push('Low success rate detected - consider manual review of remaining any types');\n        recommendations.push('Focus on documenting intentional any types instead of replacement');\n      }\n\n      if (avgSafetyScore < 0.7) {\n        needsManualIntervention = true;\n        recommendations.push('Safety concerns detected - pause automated processing');\n        recommendations.push('Review recent changes and consider rollback if necessary');\n      }\n\n      // Check for stagnation\n      const recentProgress = recentBatches.reduce((sum, batch) => sum + batch.replacementsSuccessful, 0);\n      if (recentProgress < 5 && recentBatches.length >= 3) {\n        needsManualIntervention = true;\n        recommendations.push('Progress has stagnated - remaining any types may require manual analysis');\n        recommendations.push('Consider switching to documentation mode for remaining types');\n      }\n    }\n\n    // Provide strategic recommendations based on current state\n    if (currentProgress.reductionPercentage < 5) {\n      recommendations.push('Early stage - focus on array types (any[]) for quick wins');\n      recommendations.push('Increase confidence threshold to 0.9 for maximum safety');\n    } else if (currentProgress.reductionPercentage < 10) {\n      recommendations.push('Good progress - expand to Record<string, any> patterns');\n      recommendations.push('Consider enabling domain-specific analysis for better suggestions');\n    } else if (currentProgress.reductionPercentage >= targetInfo.recommendedTarget * 0.8) {\n      recommendations.push('Approaching target - focus on documentation for remaining intentional types');\n      recommendations.push('Consider manual review for complex remaining cases');\n    }\n\n    return {\n      currentProgress,\n      milestoneStatus,\n      recommendations,\n      needsManualIntervention\n    };\n  }\n\n  /**\n   * Analyze success rate and adapt strategy accordingly\n   */\n  analyzeSuccessRateAndAdapt(): {\n    currentSuccessRate: number;\n    trend: 'improving' | 'declining' | 'stable';\n    adaptations: string[];\n  } {\n    if (this.batchHistory.length < 2) {\n      return {\n        currentSuccessRate: 0,\n        trend: 'stable',\n        adaptations: ['Insufficient data for trend analysis']\n      };\n    }\n\n    const recentBatches = this.batchHistory.slice(-5);\n    const currentSuccessRate = recentBatches.reduce((sum, batch) =>\n      sum + (batch.replacementsSuccessful / Math.max(1, batch.replacementsAttempted)), 0\n    ) / recentBatches.length;\n\n    // Determine trend\n    let trend: 'improving' | 'declining' | 'stable' = 'stable';\n    const adaptations: string[] = [];\n\n    if (recentBatches.length >= 3) {\n      const firstHalf = recentBatches.slice(0, Math.floor(recentBatches.length / 2));\n      const secondHalf = recentBatches.slice(Math.floor(recentBatches.length / 2));\n\n      const firstHalfRate = firstHalf.reduce((sum, batch) =>\n        sum + (batch.replacementsSuccessful / Math.max(1, batch.replacementsAttempted)), 0\n      ) / firstHalf.length;\n\n      const secondHalfRate = secondHalf.reduce((sum, batch) =>\n        sum + (batch.replacementsSuccessful / Math.max(1, batch.replacementsAttempted)), 0\n      ) / secondHalf.length;\n\n      if (secondHalfRate > firstHalfRate + 0.1) {\n        trend = 'improving';\n        adaptations.push('Success rate improving - consider increasing batch size');\n      } else if (secondHalfRate < firstHalfRate - 0.1) {\n        trend = 'declining';\n        adaptations.push('Success rate declining - reducing batch size and increasing confidence threshold');\n\n        // Apply adaptations\n        this.adaptiveConfig.maxFilesPerBatch = Math.max(5, Math.floor(this.adaptiveConfig.maxFilesPerBatch * 0.8));\n        this.adaptiveConfig.confidenceThreshold = Math.min(0.95, this.adaptiveConfig.confidenceThreshold + 0.1);\n      }\n    }\n\n    // Success rate based adaptations\n    if (currentSuccessRate < 0.3) {\n      adaptations.push('Very low success rate - switching to documentation mode recommended');\n      adaptations.push('Consider manual review of remaining any types');\n    } else if (currentSuccessRate < 0.5) {\n      adaptations.push('Low success rate - increasing confidence threshold to 0.9');\n      this.adaptiveConfig.confidenceThreshold = Math.min(0.95, this.adaptiveConfig.confidenceThreshold + 0.1);\n    } else if (currentSuccessRate > 0.8) {\n      adaptations.push('High success rate - can afford to be more aggressive');\n      this.adaptiveConfig.confidenceThreshold = Math.max(0.7, this.adaptiveConfig.confidenceThreshold - 0.05);\n    }\n\n    return {\n      currentSuccessRate,\n      trend,\n      adaptations\n    };\n  }\n\n  /**\n   * Execute a single batch of improvements with adaptive sizing\n   */\n  async executeBatch(config?: UnintentionalAnyConfig): Promise<BatchMetrics> {\n    const startTime = Date.now();\n    this.batchCounter++;\n\n    // Use adaptive config if no config provided, or merge with provided config\n    const effectiveConfig = config ? { ...this.adaptiveConfig, ...config } : this.adaptiveConfig;\n\n    const batchMetrics: BatchMetrics = {\n      batchNumber: this.batchCounter,\n      filesProcessed: 0,\n      anyTypesAnalyzed: 0,\n      replacementsAttempted: 0,\n      replacementsSuccessful: 0,\n      compilationErrors: 0,\n      rollbacksPerformed: 0,\n      executionTime: 0,\n      safetyScore: 1.0\n    };\n\n    try {\n      // Create safety checkpoint before starting\n      await this.createSafetyCheckpoint();\n\n      // Get initial TypeScript error count for safety monitoring\n      const initialErrorCount = await this.getTypeScriptErrorCount();\n\n      // Find files with explicit any types\n      const candidateFiles = await this.findFilesWithAnyTypes();\n      const filesToProcess = candidateFiles\n        .filter(file => !this.processedFiles.has(file))\n        .slice(0, effectiveConfig.maxFilesPerBatch);\n\n      if (filesToProcess.length === 0) {\n        console.log('No more files to process in this batch');\n        batchMetrics.executionTime = Date.now() - startTime;\n        this.batchHistory.push(batchMetrics);\n        return batchMetrics;\n      }\n\n      console.log(`Processing batch ${this.batchCounter}: ${filesToProcess.length} files (adaptive batch size: ${effectiveConfig.maxFilesPerBatch})`);\n\n      // Process each file\n      for (const filePath of filesToProcess) {\n        try {\n          const fileResult = await this.processFile(filePath, effectiveConfig);\n\n          batchMetrics.filesProcessed++;\n          batchMetrics.anyTypesAnalyzed += fileResult.anyTypesAnalyzed;\n          batchMetrics.replacementsAttempted += fileResult.replacementsAttempted;\n          batchMetrics.replacementsSuccessful += fileResult.replacementsSuccessful;\n\n          if (fileResult.rollbackPerformed) {\n            batchMetrics.rollbacksPerformed++;\n          }\n\n          this.processedFiles.add(filePath);\n\n          // Validate build every few files based on adaptive config\n          if (batchMetrics.filesProcessed % effectiveConfig.validationFrequency === 0) {\n            console.log(`Safety checkpoint: validating build after ${batchMetrics.filesProcessed} files`);\n            const currentErrorCount = await this.getTypeScriptErrorCount();\n\n            // Safety check: ensure we're not increasing errors significantly\n            if (currentErrorCount > initialErrorCount + 5) { // Allow small increase for temporary states\n              console.warn(`Error count increased from ${initialErrorCount} to ${currentErrorCount}, pausing batch`);\n              batchMetrics.compilationErrors = currentErrorCount - initialErrorCount;\n              batchMetrics.safetyScore = Math.max(0, 1 - (batchMetrics.compilationErrors / 10));\n              break;\n            }\n          }\n\n        } catch (error) {\n          console.error(`Failed to process file ${filePath}:`, error);\n          batchMetrics.rollbacksPerformed++;\n        }\n      }\n\n      // Final safety validation\n      const finalErrorCount = await this.getTypeScriptErrorCount();\n      if (finalErrorCount > initialErrorCount) {\n        batchMetrics.compilationErrors = finalErrorCount - initialErrorCount;\n        batchMetrics.safetyScore = Math.max(0, 1 - (batchMetrics.compilationErrors / 20));\n      }\n\n      batchMetrics.executionTime = Date.now() - startTime;\n\n      // Store batch metrics for adaptive strategy\n      this.batchHistory.push(batchMetrics);\n\n      // Calculate success rate for this batch\n      const successRate = batchMetrics.replacementsAttempted > 0\n        ? batchMetrics.replacementsSuccessful / batchMetrics.replacementsAttempted\n        : 0;\n\n      console.log(`Batch ${this.batchCounter} completed:`, {\n        filesProcessed: batchMetrics.filesProcessed,\n        replacementsSuccessful: batchMetrics.replacementsSuccessful,\n        successRate: `${(successRate * 100).toFixed(1)}%`,\n        safetyScore: batchMetrics.safetyScore.toFixed(2),\n        executionTime: `${(batchMetrics.executionTime / 1000).toFixed(1)}s`\n      });\n\n      // Adapt strategy based on performance\n      this.adaptStrategy();\n\n      return batchMetrics;\n\n    } catch (error) {\n      console.error(`Batch ${this.batchCounter} failed:`, error);\n      batchMetrics.executionTime = Date.now() - startTime;\n      batchMetrics.safetyScore = 0;\n      this.batchHistory.push(batchMetrics);\n      return batchMetrics;\n    }\n  }\n\n  /**\n   * Execute the full campaign with progressive improvement and adaptive strategies\n   */\n  async executeFullCampaign(config?: UnintentionalAnyConfig): Promise<UnintentionalAnyCampaignResult> {\n    const campaignStart = Date.now();\n\n    // Use adaptive config if no config provided, or merge with provided config\n    const effectiveConfig = config ? { ...this.adaptiveConfig, ...config } : this.adaptiveConfig;\n\n    const initialProgress = await this.getCurrentProgress();\n\n    console.log('Starting Unintentional Any Elimination Campaign');\n    console.log(`Initial state: ${initialProgress.totalAnyTypes} any types found`);\n    console.log(`Target: ${effectiveConfig.targetReductionPercentage}% reduction`);\n    console.log(`Initial batch size: ${effectiveConfig.maxFilesPerBatch}, confidence threshold: ${effectiveConfig.confidenceThreshold}`);\n\n    const result: UnintentionalAnyCampaignResult = {\n      totalAnyTypesAnalyzed: 0,\n      intentionalTypesIdentified: 0,\n      unintentionalTypesReplaced: 0,\n      documentationAdded: 0,\n      reductionAchieved: 0,\n      safetyEvents: [],\n      validationResults: []\n    };\n\n    let batchCount = 0;\n    let consecutiveFailures = 0;\n    const maxConsecutiveFailures = 3;\n    const maxBatches = 50; // Safety limit\n\n    while (batchCount < maxBatches && consecutiveFailures < maxConsecutiveFailures) {\n      try {\n        console.log(`\\n--- Starting batch ${batchCount + 1} ---`);\n        const batchMetrics = await this.executeBatch();\n        batchCount++;\n\n        result.totalAnyTypesAnalyzed += batchMetrics.anyTypesAnalyzed;\n        result.unintentionalTypesReplaced += batchMetrics.replacementsSuccessful;\n\n        // Check if we should continue\n        if (batchMetrics.filesProcessed === 0) {\n          console.log('No more files to process, campaign complete');\n          break;\n        }\n\n        // Safety check with adaptive response\n        if (batchMetrics.safetyScore < 0.7) {\n          console.warn(`Low safety score (${batchMetrics.safetyScore.toFixed(2)}), adapting strategy`);\n          consecutiveFailures++;\n\n          result.safetyEvents.push({\n            type: 'LOW_SAFETY_SCORE',\n            timestamp: new Date(),\n            description: `Safety score ${batchMetrics.safetyScore.toFixed(2)} below threshold`,\n            severity: 'warning',\n            batchNumber: batchCount\n          } as any);\n\n        } else {\n          consecutiveFailures = 0;\n        }\n\n        // Check progress towards target with detailed reporting\n        const currentProgress = await this.getCurrentProgress();\n        const reductionAchieved = initialProgress.totalAnyTypes > 0\n          ? ((initialProgress.totalAnyTypes - currentProgress.totalAnyTypes) / initialProgress.totalAnyTypes) * 100\n          : 0;\n\n        console.log(`\\nProgress Report:`);\n        console.log(`  Reduction achieved: ${reductionAchieved.toFixed(1)}% (target: ${effectiveConfig.targetReductionPercentage}%)`);\n        console.log(`  Types replaced: ${result.unintentionalTypesReplaced}`);\n        console.log(`  Batches completed: ${batchCount}`);\n        console.log(`  Current batch size: ${this.adaptiveConfig.maxFilesPerBatch}`);\n        console.log(`  Current confidence threshold: ${this.adaptiveConfig.confidenceThreshold.toFixed(2)}`);\n\n        if (reductionAchieved >= effectiveConfig.targetReductionPercentage) {\n          console.log('\\n🎉 Target reduction achieved!');\n          break;\n        }\n\n        // Brief pause between batches for system stability\n        await new Promise(resolve => setTimeout(resolve, 2000));\n\n      } catch (error) {\n        console.error(`Campaign batch ${batchCount + 1} failed:`, error);\n        consecutiveFailures++;\n\n        result.safetyEvents.push({\n          type: 'BATCH_FAILURE',\n          timestamp: new Date(),\n          description: `Batch ${batchCount + 1} failed: ${error.message}`,\n          severity: 'error',\n          batchNumber: batchCount + 1\n        } as any);\n      }\n    }\n\n    // Calculate final results with comprehensive metrics\n    const finalProgress = await this.getCurrentProgress();\n    result.reductionAchieved = initialProgress.totalAnyTypes > 0\n      ? ((initialProgress.totalAnyTypes - finalProgress.totalAnyTypes) / initialProgress.totalAnyTypes) * 100\n      : 0;\n    result.intentionalTypesIdentified = finalProgress.classifiedIntentional;\n\n    // Calculate average success rate from batch history\n    const totalAttempted = this.batchHistory.reduce((sum, batch) => sum + batch.replacementsAttempted, 0);\n    const totalSuccessful = this.batchHistory.reduce((sum, batch) => sum + batch.replacementsSuccessful, 0);\n    const overallSuccessRate = totalAttempted > 0 ? (totalSuccessful / totalAttempted) * 100 : 0;\n\n    const campaignTime = Date.now() - campaignStart;\n\n    console.log(`\\n=== Campaign Summary ===`);\n    console.log(`Duration: ${(campaignTime / 1000).toFixed(1)}s`);\n    console.log(`Batches processed: ${batchCount}`);\n    console.log(`Files processed: ${this.processedFiles.size}`);\n    console.log(`Reduction achieved: ${result.reductionAchieved.toFixed(1)}%`);\n    console.log(`Types replaced: ${result.unintentionalTypesReplaced}`);\n    console.log(`Overall success rate: ${overallSuccessRate.toFixed(1)}%`);\n    console.log(`Safety events: ${result.safetyEvents.length}`);\n    console.log(`Final batch size: ${this.adaptiveConfig.maxFilesPerBatch}`);\n    console.log(`Final confidence threshold: ${this.adaptiveConfig.confidenceThreshold.toFixed(2)}`);\n\n    return result;\n  }\n\n  private async processFile(filePath: string, config: UnintentionalAnyConfig): Promise<{\n    anyTypesAnalyzed: number;\n    replacementsAttempted: number;\n    replacementsSuccessful: number;\n    rollbackPerformed: boolean;\n  }> {\n    const fileContent = fs.readFileSync(filePath, 'utf8');\n    const lines = fileContent.split('\\n');\n\n    // Find all any type usages in the file\n    const anyTypeContexts: ClassificationContext[] = [];\n\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i];\n      if (this.containsAnyType(line)) {\n        const context: ClassificationContext = {\n          filePath,\n          lineNumber: i + 1,\n          codeSnippet: line,\n          surroundingLines: this.getSurroundingLines(lines, i, 2),\n          hasExistingComment: this.hasCommentAbove(lines, i),\n          existingComment: this.getCommentAbove(lines, i),\n          isInTestFile: this.isTestFile(filePath),\n          domainContext: await this.analyzer.analyzeDomain({\n            filePath,\n            lineNumber: i + 1,\n            codeSnippet: line,\n            surroundingLines: this.getSurroundingLines(lines, i, 2),\n            hasExistingComment: false,\n            isInTestFile: this.isTestFile(filePath),\n            domainContext: { domain: 'utility' as any, intentionalityHints: [], suggestedTypes: [], preservationReasons: [] }\n          })\n        };\n\n        anyTypeContexts.push(context);\n      }\n    }\n\n    if (anyTypeContexts.length === 0) {\n      return {\n        anyTypesAnalyzed: 0,\n        replacementsAttempted: 0,\n        replacementsSuccessful: 0,\n        rollbackPerformed: false\n      };\n    }\n\n    // Classify all any types in the file\n    const classifications = await this.classifier.classifyBatch(anyTypeContexts);\n\n    // Create replacements for unintentional any types\n    const replacements: TypeReplacement[] = [];\n\n    for (let i = 0; i < classifications.length; i++) {\n      const classification = classifications[i];\n      const context = anyTypeContexts[i];\n\n      if (!classification.isIntentional &&\n          classification.confidence >= config.confidenceThreshold &&\n          classification.suggestedReplacement) {\n\n        replacements.push({\n          original: 'any',\n          replacement: classification.suggestedReplacement,\n          filePath: context.filePath,\n          lineNumber: context.lineNumber,\n          confidence: classification.confidence,\n          validationRequired: true\n        });\n      }\n    }\n\n    // Apply replacements\n    let replacementsSuccessful = 0;\n    let rollbackPerformed = false;\n\n    if (replacements.length > 0) {\n      const result = await this.replacer.processBatch(replacements);\n      replacementsSuccessful = result.appliedReplacements.length;\n      rollbackPerformed = result.rollbackPerformed;\n    }\n\n    return {\n      anyTypesAnalyzed: anyTypeContexts.length,\n      replacementsAttempted: replacements.length,\n      replacementsSuccessful,\n      rollbackPerformed\n    };\n  }\n\n  private async findFilesWithAnyTypes(): Promise<string[]> {\n    try {\n      // Use grep to find files with explicit any types, excluding node_modules and test files initially\n      const output = execSync(\n        'grep -r -l \":\\\\s*any\" src/ --include=\"*.ts\" --include=\"*.tsx\" --exclude-dir=node_modules | head -100',\n        { encoding: 'utf8', stdio: 'pipe' }\n      );\n\n      return output.trim().split('\\n').filter(line => line.trim().length > 0);\n    } catch (error) {\n      console.warn('Failed to find files with any types, using fallback method');\n      return this.findFilesWithAnyTypesFallback();\n    }\n  }\n\n  private findFilesWithAnyTypesFallback(): string[] {\n    const files: string[] = [];\n    const srcDir = path.join(process.cwd(), 'src');\n\n    const walkDir = (dir: string) => {\n      const entries = fs.readdirSync(dir, { withFileTypes: true });\n\n      for (const entry of entries) {\n        const fullPath = path.join(dir, entry.name);\n\n        if (entry.isDirectory() && !entry.name.startsWith('.') && entry.name !== 'node_modules') {\n          walkDir(fullPath);\n        } else if (entry.isFile() && (entry.name.endsWith('.ts') || entry.name.endsWith('.tsx'))) {\n          try {\n            const content = fs.readFileSync(fullPath, 'utf8');\n            if (content.includes(': any') || content.includes('any[]') || content.includes('Record<string, any>')) {\n              files.push(fullPath);\n            }\n          } catch (error) {\n            // Skip files that can't be read\n          }\n        }\n      }\n    };\n\n    if (fs.existsSync(srcDir)) {\n      walkDir(srcDir);\n    }\n\n    return files.slice(0, 100); // Limit to prevent overwhelming\n  }\n\n  private containsAnyType(line: string): boolean {\n    // Match various any type patterns\n    const anyPatterns = [\n      /:\\s*any(?=\\s*[=;,\\)\\]\\}])/,  // : any followed by delimiter\n      /:\\s*any\\[\\]/,                // : any[]\n      /:\\s*Array<any>/,             // : Array<any>\n      /:\\s*Record<\\w+,\\s*any>/,     // : Record<string, any>\n      /\\[key:\\s*\\w+\\]:\\s*any/       // [key: string]: any\n    ];\n\n    return anyPatterns.some(pattern => pattern.test(line));\n  }\n\n  private getSurroundingLines(lines: string[], index: number, radius: number): string[] {\n    const start = Math.max(0, index - radius);\n    const end = Math.min(lines.length, index + radius + 1);\n    return lines.slice(start, end);\n  }\n\n  private hasCommentAbove(lines: string[], index: number): boolean {\n    if (index === 0) return false;\n    const prevLine = lines[index - 1].trim();\n    return prevLine.startsWith('//') || prevLine.startsWith('/*') || prevLine.includes('*/');\n  }\n\n  private getCommentAbove(lines: string[], index: number): string | undefined {\n    if (!this.hasCommentAbove(lines, index)) return undefined;\n    return lines[index - 1].trim();\n  }\n\n  private isTestFile(filePath: string): boolean {\n    return filePath.includes('test') ||\n           filePath.includes('spec') ||\n           filePath.includes('__tests__') ||\n           filePath.endsWith('.test.ts') ||\n           filePath.endsWith('.test.tsx') ||\n           filePath.endsWith('.spec.ts') ||\n           filePath.endsWith('.spec.tsx');\n  }\n\n  private async getTypeScriptErrorCount(): Promise<number> {\n    try {\n      const output = execSync('yarn tsc --noEmit --skipLibCheck 2>&1 | grep -c \"error TS\"', {\n        encoding: 'utf8',\n        stdio: 'pipe'\n      });\n      return parseInt(output.trim()) || 0;\n    } catch (error) {\n      // If grep finds no matches, it returns exit code 1, but that means 0 errors\n      const errorData = error as any;\n      if (errorData.status === 1) {\n        return 0;\n      }\n      console.warn('Could not get TypeScript error count:', error);\n      return -1; // Indicates measurement failure\n    }\n  }\n\n  /**\n   * Analyze file complexity to set realistic expectations\n   */\n  private async analyzeFileComplexity(files: string[]): Promise<{\n    testFilePercentage: number;\n    arrayTypePercentage: number;\n    recordTypePercentage: number;\n    functionParamPercentage: number;\n    complexityScore: number;\n  }> {\n    let testFiles = 0;\n    let arrayTypes = 0;\n    let recordTypes = 0;\n    let functionParams = 0;\n    let totalAnyTypes = 0;\n\n    for (const filePath of files) {\n      try {\n        const content = fs.readFileSync(filePath, 'utf8');\n        const lines = content.split('\\n');\n\n        if (this.isTestFile(filePath)) {\n          testFiles++;\n        }\n\n        for (const line of lines) {\n          if (this.containsAnyType(line)) {\n            totalAnyTypes++;\n\n            if (line.includes('any[]') || line.includes('Array<any>')) {\n              arrayTypes++;\n            } else if (line.includes('Record<') && line.includes('any>')) {\n              recordTypes++;\n            } else if (line.includes('(') && line.includes(': any') && line.includes(')')) {\n              functionParams++;\n            }\n          }\n        }\n      } catch (error) {\n        // Skip files that can't be read\n      }\n    }\n\n    const testFilePercentage = files.length > 0 ? (testFiles / files.length) * 100 : 0;\n    const arrayTypePercentage = totalAnyTypes > 0 ? (arrayTypes / totalAnyTypes) * 100 : 0;\n    const recordTypePercentage = totalAnyTypes > 0 ? (recordTypes / totalAnyTypes) * 100 : 0;\n    const functionParamPercentage = totalAnyTypes > 0 ? (functionParams / totalAnyTypes) * 100 : 0;\n\n    // Calculate complexity score (0-1, where 1 is most complex)\n    const complexityScore = Math.min(1,\n      (testFilePercentage * 0.1 + // Test files are easier\n       functionParamPercentage * 0.4 + // Function params are harder\n       recordTypePercentage * 0.2) / 100 // Record types are moderate\n    );\n\n    return {\n      testFilePercentage,\n      arrayTypePercentage,\n      recordTypePercentage,\n      functionParamPercentage,\n      complexityScore\n    };\n  }\n\n  /**\n   * Calculate expected success rate based on file analysis\n   */\n  private calculateExpectedSuccessRate(analysis: {\n    testFilePercentage: number;\n    arrayTypePercentage: number;\n    recordTypePercentage: number;\n    functionParamPercentage: number;\n    complexityScore: number;\n  }): number {\n    // Base success rate expectations based on historical data\n    let expectedRate = 0.6; // 60% base expectation\n\n    // Array types have historically 100% success rate\n    expectedRate += (analysis.arrayTypePercentage / 100) * 0.4;\n\n    // Record types have mixed results - moderate boost\n    expectedRate += (analysis.recordTypePercentage / 100) * 0.1;\n\n    // Function parameters have high failure rate - penalty\n    expectedRate -= (analysis.functionParamPercentage / 100) * 0.3;\n\n    // Test files are generally easier but less impactful\n    expectedRate += (analysis.testFilePercentage / 100) * 0.1;\n\n    return Math.max(0.2, Math.min(0.9, expectedRate));\n  }\n\n  private async getCurrentProgress(): Promise<UnintentionalAnyProgress> {\n    const totalFiles = await this.findFilesWithAnyTypes();\n    let totalAnyTypes = 0;\n\n    // Count total any types across all files (sample for performance)\n    const sampleSize = Math.min(30, totalFiles.length);\n    for (const filePath of totalFiles.slice(0, sampleSize)) {\n      try {\n        const content = fs.readFileSync(filePath, 'utf8');\n        const lines = content.split('\\n');\n        totalAnyTypes += lines.filter(line => this.containsAnyType(line)).length;\n      } catch (error) {\n        // Skip files that can't be read\n      }\n    }\n\n    // Estimate total based on sample\n    const estimatedTotal = sampleSize > 0\n      ? Math.floor((totalAnyTypes / sampleSize) * totalFiles.length)\n      : 0;\n\n    // Calculate metrics from batch history\n    const totalReplacements = this.batchHistory.reduce((sum, batch) => sum + batch.replacementsSuccessful, 0);\n    const totalAttempted = this.batchHistory.reduce((sum, batch) => sum + batch.replacementsAttempted, 0);\n    const averageSuccessRate = totalAttempted > 0 ? totalReplacements / totalAttempted : 0;\n\n    // Calculate reduction percentage\n    const reductionPercentage = estimatedTotal > 0 ? (totalReplacements / estimatedTotal) * 100 : 0;\n\n    // Get current TypeScript error count for comprehensive metrics\n    const currentTSErrors = await this.getTypeScriptErrorCount();\n\n    return {\n      totalAnyTypes: estimatedTotal,\n      classifiedIntentional: 0, // Would be tracked with persistent storage\n      classifiedUnintentional: totalAttempted,\n      successfulReplacements: totalReplacements,\n      documentedIntentional: 0, // Would be tracked with documentation system\n      remainingUnintentional: Math.max(0, estimatedTotal - totalReplacements),\n      reductionPercentage,\n      targetReductionPercentage: this.adaptiveConfig.targetReductionPercentage,\n      batchesCompleted: this.batchCounter,\n      averageSuccessRate,\n      // Base ProgressMetrics properties\n      typeScriptErrors: {\n        current: currentTSErrors >= 0 ? currentTSErrors : 0,\n        target: 0,\n        reduction: 0,\n        percentage: 0\n      },\n      lintingWarnings: { current: 0, target: 0, reduction: 0, percentage: 0 },\n      buildPerformance: { currentTime: 0, targetTime: 0, cacheHitRate: 0, memoryUsage: 0 },\n      enterpriseSystems: { current: 0, target: 0, transformedExports: 0 }\n    };\n  }\n}\n"],"version":3}