39d3005b10acb86341bcabec81c9f2c8
"use strict";
/**
 * Performance Analytics Dashboard Component
 *
 * Displays comprehensive performance metrics, caching statistics,
 * and user interaction analytics for recommendation systems
 */
'use client';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PerformanceAnalyticsDashboard = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const lucide_react_1 = require("lucide-react");
const useRecommendationAnalytics_1 = require("@/hooks/useRecommendationAnalytics");
// ========== COMPONENTS ==========
const MetricCard = ({ title, value, unit, trend, icon, color, description }) => {
    const [showTooltip, setShowTooltip] = (0, react_1.useState)(false);
    const formatValue = (val) => {
        if (typeof val === 'number') {
            if (val < 1) {
                return val.toFixed(3);
            }
            else if (val < 100) {
                return val.toFixed(1);
            }
            else {
                return Math.round(val).toString();
            }
        }
        return val;
    };
    const getTrendColor = (trendValue) => {
        if (!trendValue)
            return 'text-gray-500';
        return trendValue > 0 ? 'text-green-600' : 'text-red-600';
    };
    const getTrendIcon = (trendValue) => {
        if (!trendValue)
            return '';
        return trendValue > 0 ? '↗' : '↘';
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: `bg-white rounded-lg border border-gray-200 p-4 hover:shadow-md transition-shadow relative`, children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between mb-2", children: [(0, jsx_runtime_1.jsx)("div", { className: `p-2 rounded-lg ${color}`, children: icon }), description && ((0, jsx_runtime_1.jsxs)("div", { className: "relative", onMouseEnter: () => setShowTooltip(true), onMouseLeave: () => setShowTooltip(false), children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Info, { size: 16, className: "text-gray-400 cursor-help" }), showTooltip && ((0, jsx_runtime_1.jsx)("div", { className: "absolute right-0 top-6 bg-gray-800 text-white text-xs rounded p-2 whitespace-nowrap z-10", children: description }))] }))] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-1", children: [(0, jsx_runtime_1.jsx)("h3", { className: "text-sm font-medium text-gray-600", children: title }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-baseline space-x-2", children: [(0, jsx_runtime_1.jsx)("span", { className: "text-2xl font-bold text-gray-900", children: formatValue(value) }), unit && ((0, jsx_runtime_1.jsx)("span", { className: "text-sm text-gray-500", children: unit })), trend !== undefined && ((0, jsx_runtime_1.jsxs)("span", { className: `text-sm font-medium ${getTrendColor(trend)}`, children: [getTrendIcon(trend), " ", Math.abs(trend).toFixed(1), "%"] }))] })] })] }));
};
const PerformanceChart = ({ data, label, color, height = 60 }) => {
    if (data.length === 0) {
        return ((0, jsx_runtime_1.jsx)("div", { className: `flex items-center justify-center bg-gray-50 rounded`, style: { height }, children: (0, jsx_runtime_1.jsx)("span", { className: "text-sm text-gray-500", children: "No data available" }) }));
    }
    const max = Math.max(...data);
    const min = Math.min(...data);
    const range = max - min || 1;
    return ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsx)("span", { className: "text-sm font-medium text-gray-700", children: label }), (0, jsx_runtime_1.jsxs)("span", { className: "text-xs text-gray-500", children: [data.length, " data points"] })] }), (0, jsx_runtime_1.jsx)("div", { className: `relative bg-gray-50 rounded overflow-hidden`, style: { height }, children: (0, jsx_runtime_1.jsx)("svg", { width: "100%", height: "100%", className: "absolute inset-0", children: (0, jsx_runtime_1.jsx)("polyline", { fill: "none", stroke: color, strokeWidth: "2", points: data.map((value, index) => {
                            const x = (index / (data.length - 1)) * 100;
                            const y = 100 - ((value - min) / range) * 80 - 10;
                            return `${x},${y}`;
                        }).join(' ') }) }) })] }));
};
// ========== MAIN COMPONENT ==========
const PerformanceAnalyticsDashboard = ({ className = '', compact = false, showDetails = true }) => {
    const [analyticsState, analyticsActions] = (0, useRecommendationAnalytics_1.useRecommendationAnalytics)({
        enablePerformanceTracking: true,
        enableCaching: true,
        enableInteractionTracking: true,
        metricsUpdateInterval: 5000
    });
    const [isExpanded, setIsExpanded] = (0, react_1.useState)(!compact);
    const [refreshing, setRefreshing] = (0, react_1.useState)(false);
    const { metrics, cacheStats, performanceTrends, isLoading, error } = analyticsState;
    // ========== EVENT HANDLERS ==========
    const handleRefresh = async () => {
        setRefreshing(true);
        try {
            // Force a metrics update by getting a fresh snapshot
            analyticsActions.getAnalyticsSnapshot();
            await new Promise(resolve => setTimeout(resolve, 500)); // Brief delay for visual feedback
        }
        finally {
            setRefreshing(false);
        }
    };
    const handleClearAnalytics = () => {
        if (confirm('Are you sure you want to clear all analytics data?')) {
            analyticsActions.clearAnalytics();
        }
    };
    // ========== RENDER HELPERS ==========
    const renderCompactView = () => {
        var _a;
        return ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-4 p-3 bg-white rounded-lg border border-gray-200", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Zap, { size: 16, className: "text-blue-500" }), (0, jsx_runtime_1.jsx)("span", { className: "text-sm font-medium", children: "Performance" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-4 text-sm", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-1", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Clock, { size: 14, className: "text-gray-400" }), (0, jsx_runtime_1.jsxs)("span", { children: [((_a = metrics === null || metrics === void 0 ? void 0 : metrics.loadTime) === null || _a === void 0 ? void 0 : _a.toFixed(0)) || 0, "ms"] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-1", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Database, { size: 14, className: "text-gray-400" }), (0, jsx_runtime_1.jsxs)("span", { children: [(cacheStats.hitRate * 100).toFixed(0), "%"] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-1", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.TrendingUp, { size: 14, className: "text-gray-400" }), (0, jsx_runtime_1.jsx)("span", { children: performanceTrends.performanceScore.toFixed(0) })] })] }), (0, jsx_runtime_1.jsx)("button", { onClick: () => setIsExpanded(!isExpanded), className: "ml-auto p-1 hover:bg-gray-100 rounded", children: isExpanded ? (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronUp, { size: 16 }) : (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronDown, { size: 16 }) })] }));
    };
    const renderDetailedView = () => ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-6", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.BarChart3, { size: 20, className: "text-blue-500" }), (0, jsx_runtime_1.jsx)("h3", { className: "text-lg font-semibold text-gray-900", children: "Performance Analytics" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2", children: [(0, jsx_runtime_1.jsxs)("button", { onClick: handleRefresh, disabled: refreshing, className: "flex items-center space-x-1 px-3 py-1 text-sm bg-blue-50 hover:bg-blue-100 text-blue-700 rounded transition-colors disabled:opacity-50", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.RefreshCw, { size: 14, className: refreshing ? 'animate-spin' : '' }), (0, jsx_runtime_1.jsx)("span", { children: "Refresh" })] }), (0, jsx_runtime_1.jsx)("button", { onClick: handleClearAnalytics, className: "px-3 py-1 text-sm bg-gray-50 hover:bg-gray-100 text-gray-700 rounded transition-colors", children: "Clear Data" }), compact && ((0, jsx_runtime_1.jsx)("button", { onClick: () => setIsExpanded(!isExpanded), className: "p-1 hover:bg-gray-100 rounded", children: (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronUp, { size: 16 }) }))] })] }), error && ((0, jsx_runtime_1.jsxs)("div", { className: "p-4 bg-red-50 border border-red-200 rounded-lg", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2 text-red-700", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Info, { size: 16 }), (0, jsx_runtime_1.jsx)("span", { className: "font-medium", children: "Analytics Error" })] }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-red-600 mt-1", children: error })] })), isLoading && ((0, jsx_runtime_1.jsx)("div", { className: "flex items-center justify-center p-8", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2 text-gray-500", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.RefreshCw, { size: 16, className: "animate-spin" }), (0, jsx_runtime_1.jsx)("span", { children: "Loading analytics..." })] }) })), !isLoading && ((0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4", children: [(0, jsx_runtime_1.jsx)(MetricCard, { title: "Load Time", value: (metrics === null || metrics === void 0 ? void 0 : metrics.loadTime) || 0, unit: "ms", icon: (0, jsx_runtime_1.jsx)(lucide_react_1.Clock, { size: 16, className: "text-white" }), color: "bg-blue-500", description: "Average time to load recommendations" }), (0, jsx_runtime_1.jsx)(MetricCard, { title: "Cache Hit Rate", value: (cacheStats.hitRate * 100), unit: "%", icon: (0, jsx_runtime_1.jsx)(lucide_react_1.Database, { size: 16, className: "text-white" }), color: "bg-green-500", description: "Percentage of requests served from cache" }), (0, jsx_runtime_1.jsx)(MetricCard, { title: "Performance Score", value: performanceTrends.performanceScore, unit: "/100", icon: (0, jsx_runtime_1.jsx)(lucide_react_1.TrendingUp, { size: 16, className: "text-white" }), color: "bg-purple-500", description: "Overall performance rating" }), (0, jsx_runtime_1.jsx)(MetricCard, { title: "Interaction Rate", value: (metrics === null || metrics === void 0 ? void 0 : metrics.userInteractionRate) || 0, unit: "/min", icon: (0, jsx_runtime_1.jsx)(lucide_react_1.Users, { size: 16, className: "text-white" }), color: "bg-orange-500", description: "User interactions per minute" })] })), showDetails && !isLoading && ((0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [(0, jsx_runtime_1.jsx)("div", { className: "bg-white rounded-lg border border-gray-200 p-4", children: (0, jsx_runtime_1.jsx)(PerformanceChart, { data: performanceTrends.loadTimeTrend || [], label: "Load Time Trend", color: "#3B82F6" }) }), (0, jsx_runtime_1.jsx)("div", { className: "bg-white rounded-lg border border-gray-200 p-4", children: (0, jsx_runtime_1.jsx)(PerformanceChart, { data: performanceTrends.cacheHitRateTrend || [], label: "Cache Hit Rate Trend", color: "#10B981" }) })] })), showDetails && !isLoading && ((0, jsx_runtime_1.jsxs)("div", { className: "bg-white rounded-lg border border-gray-200 p-4", children: [(0, jsx_runtime_1.jsx)("h4", { className: "text-md font-semibold text-gray-900 mb-3", children: "Cache Statistics" }), (0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsx)("div", { className: "text-2xl font-bold text-blue-600", children: cacheStats.totalEntries }), (0, jsx_runtime_1.jsx)("div", { className: "text-sm text-gray-500", children: "Total Entries" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsx)("div", { className: "text-2xl font-bold text-green-600", children: (cacheStats.memoryUsage / 1024).toFixed(1) }), (0, jsx_runtime_1.jsx)("div", { className: "text-sm text-gray-500", children: "Memory (KB)" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsxs)("div", { className: "text-2xl font-bold text-purple-600", children: [(cacheStats.hitRate * 100).toFixed(1), "%"] }), (0, jsx_runtime_1.jsx)("div", { className: "text-sm text-gray-500", children: "Hit Rate" })] })] })] }))] }));
    // ========== RENDER ==========
    return ((0, jsx_runtime_1.jsx)("div", { className: `${className}`, children: compact && !isExpanded ? renderCompactView() : renderDetailedView() }));
};
exports.PerformanceAnalyticsDashboard = PerformanceAnalyticsDashboard;
exports.default = exports.PerformanceAnalyticsDashboard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,