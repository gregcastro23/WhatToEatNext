{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/developmentExperienceOptimizations.ts","mappings":";AAAA;;;;;;;;GAQG;;;AAEH,2CAAwC;AAuDxC;;GAEG;AACH,MAAa,8BAA8B;IAUzC;QACE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACxC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,4BAA4B,EAAE,CAAC;QAC9D,IAAI,CAAC,0BAA0B,EAAE,CAAC;IACpC,CAAC;IAEM,MAAM,CAAC,WAAW;QACvB,IAAI,CAAC,8BAA8B,CAAC,QAAQ,EAAE;YAC5C,8BAA8B,CAAC,QAAQ,GAAG,IAAI,8BAA8B,EAAE,CAAC;SAChF;QACD,OAAO,8BAA8B,CAAC,QAAQ,CAAC;IACjD,CAAC;IAED;;OAEG;IACI,iCAAiC;QACtC,MAAM,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC;QAElD,OAAO;YACL,eAAe,EAAE;gBACf,4BAA4B;gBAC5B,MAAM,EAAE,MAAM,CAAC,MAAM;gBACrB,MAAM,EAAE,MAAM,CAAC,MAAM;gBACrB,gBAAgB,EAAE,MAAM,CAAC,gBAAgB;gBAEzC,kCAAkC;gBAClC,WAAW,EAAE,MAAM,CAAC,4BAA4B;gBAChD,SAAS,EAAE,MAAM,CAAC,mBAAmB;gBACrC,YAAY,EAAE,MAAM,CAAC,YAAY;gBACjC,mBAAmB,EAAE,MAAM,CAAC,mBAAmB;gBAE/C,8BAA8B;gBAC9B,MAAM,EAAE,IAAI;gBACZ,aAAa,EAAE,KAAK;gBACpB,gBAAgB,EAAE,KAAK;gBACvB,uBAAuB,EAAE,MAAM,CAAC,uBAAuB;gBACvD,0BAA0B,EAAE,MAAM,CAAC,0BAA0B;gBAC7D,wBAAwB,EAAE,MAAM,CAAC,wBAAwB;gBAEzD,kCAAkC;gBAClC,OAAO,EAAE,GAAG;gBACZ,KAAK,EAAE;oBACL,KAAK,EAAE,CAAC,SAAS,CAAC;oBAClB,eAAe,EAAE,CAAC,oBAAoB,CAAC;oBACvC,UAAU,EAAE,CAAC,eAAe,CAAC;oBAC7B,UAAU,EAAE,CAAC,eAAe,CAAC;oBAC7B,SAAS,EAAE,CAAC,cAAc,CAAC;oBAC3B,iBAAiB,EAAE,CAAC,sBAAsB,CAAC;oBAC3C,UAAU,EAAE,CAAC,eAAe,CAAC;oBAC7B,aAAa,EAAE,CAAC,kBAAkB,CAAC;iBACpC;gBAED,4BAA4B;gBAC5B,GAAG,EAAE,CAAC,KAAK,EAAE,cAAc,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,CAAC;gBACvD,OAAO,EAAE,IAAI;gBACb,4BAA4B,EAAE,IAAI;gBAClC,eAAe,EAAE,IAAI;gBACrB,gCAAgC,EAAE,IAAI;gBACtC,eAAe,EAAE,IAAI;gBACrB,GAAG,EAAE,UAAU;gBACf,MAAM,EAAE,IAAI;gBACZ,iBAAiB,EAAE,IAAI;aACxB;YAED,0CAA0C;YAC1C,OAAO,EAAE;gBACP,eAAe;gBACf,SAAS;gBACT,UAAU;gBACV,qBAAqB;aACtB;YAED,8CAA8C;YAC9C,OAAO,EAAE;gBACP,cAAc;gBACd,OAAO;gBACP,KAAK;gBACL,OAAO;gBACP,MAAM;gBACN,cAAc;gBACd,eAAe;gBACf,cAAc;gBACd,eAAe;aAChB;YAED,kDAAkD;YAClD,UAAU,EAAE,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;gBAC3C,EAAE,IAAI,EAAE,uBAAuB,EAAE;aAClC,CAAC,CAAC,CAAC,SAAS;SACd,CAAC;IACJ,CAAC;IAED;;OAEG;IACI,mCAAmC;QACxC,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA4GV,CAAC;IACA,CAAC;IAED;;OAEG;IACI,eAAe,CAAC,UAAkB;QACvC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,4BAA4B,EAAE;YAC5E,OAAO,UAAU,CAAC;SACnB;QAED,MAAM,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACrC,MAAM,OAAO,GAAa,EAAE,CAAC;QAC7B,MAAM,UAAU,GAAa,EAAE,CAAC;QAChC,IAAI,eAAe,GAAG,IAAI,CAAC;QAE3B,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACxB,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;gBAC1E,IAAI,eAAe,EAAE;oBACnB,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACpB;qBAAM;oBACL,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACvB;aACF;iBAAM,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;gBAC7B,IAAI,eAAe,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;oBACzC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACpB;qBAAM;oBACL,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACvB;aACF;iBAAM;gBACL,eAAe,GAAG,KAAK,CAAC;gBACxB,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACvB;SACF;QAED,wBAAwB;QACxB,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,yBAAyB;YACtF,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC1D,CAAC,CAAC,OAAO,CAAC;QAEZ,eAAe;QACf,MAAM,aAAa,GAAG,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,mBAAmB;YAClF,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC;YAC/B,CAAC,CAAC,WAAW,CAAC;QAEhB,OAAO,CAAC,GAAG,aAAa,EAAE,EAAE,EAAE,GAAG,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1D,CAAC;IAED;;OAEG;IACI,wBAAwB,CAAC,UAAkB;QAKhD,IAAI,SAAS,GAAG,UAAU,CAAC;QAC3B,MAAM,KAAK,GAAa,EAAE,CAAC;QAC3B,MAAM,eAAe,GAAa,EAAE,CAAC;QAErC,+BAA+B;QAC/B,MAAM,WAAW,GAAG;YAClB;gBACE,OAAO,EAAE,qBAAqB;gBAC9B,WAAW,EAAE,cAAc;gBAC3B,WAAW,EAAE,gCAAgC;aAC9C;YACD;gBACE,OAAO,EAAE,yCAAyC;gBAClD,WAAW,EAAE,2BAA2B;gBACxC,WAAW,EAAE,kCAAkC;aAChD;YACD;gBACE,OAAO,EAAE,gDAAgD;gBACzD,WAAW,EAAE,qCAAqC;gBAClD,WAAW,EAAE,mCAAmC;aACjD;YACD;gBACE,OAAO,EAAE,gCAAgC;gBACzC,WAAW,EAAE,gBAAgB;gBAC7B,WAAW,EAAE,mCAAmC;aACjD;SACF,CAAC;QAEF,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YACxB,IAAI,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;gBAC/B,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,WAAW,CAAC,CAAC;gBAC5D,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;aAC7B;QACH,CAAC,CAAC,CAAC;QAEH,iDAAiD;QACjD,MAAM,aAAa,GAAG;YACpB,4CAA4C;YAC5C,2CAA2C;YAC3C,6BAA6B;SAC9B,CAAC;QAEF,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAC9B,MAAM,OAAO,GAAG,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACzC,IAAI,OAAO,EAAE;gBACX,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;aACvD;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,eAAe,EAAE,CAAC;IAC/C,CAAC;IAED;;OAEG;IACI,wBAAwB,CAAC,UAAuC;QACrE,IAAI,CAAC,OAAO,GAAG,EAAE,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,UAAU,EAAE,gBAAgB,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;QAEhF,IAAI,IAAI,CAAC,kBAAkB,CAAC,qBAAqB,CAAC,4BAA4B,EAAE;YAC9E,IAAI,CAAC,0BAA0B,EAAE,CAAC;SACnC;IACH,CAAC;IAED;;OAEG;IACI,qBAAqB;QAC1B,OAAO,EAAE,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED;;OAEG;IACI,yCAAyC;QAM9C,MAAM,eAAe,GAAG;YACtB,UAAU,EAAE,EAAE;YACd,QAAQ,EAAE,EAAE;YACZ,OAAO,EAAE,EAAE;YACX,WAAW,EAAE,EAAE;SACT,CAAC;QAET,6BAA6B;QAC7B,IAAI,IAAI,CAAC,OAAO,CAAC,eAAe,GAAG,KAAK,EAAE,EAAE,aAAa;YACvD,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;YAClE,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,4CAA4C,CAAC,CAAC;YAC9E,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAC;SAC1E;QAED,8BAA8B;QAC9B,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,GAAG,GAAG,IAAI,EAAE,EAAE,QAAQ;YAClD,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;YAC1D,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;YACrD,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,0CAA0C,CAAC,CAAC;SAC3E;QAED,sCAAsC;QACtC,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,GAAG,EAAE,EAAE,QAAQ;YAC5C,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,qCAAqC,CAAC,CAAC;YACpE,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,yCAAyC,CAAC,CAAC;YACxE,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAC;SACvE;QAED,yCAAyC;QACzC,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa,GAAG,IAAI,EAAE,EAAE,YAAY;YACnD,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;YACnE,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;YACvE,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;SACnE;QAED,OAAO,eAAe,CAAC;IACzB,CAAC;IAED;;OAEG;IACI,2BAA2B;QAKhC,MAAM,OAAO,GAAa,EAAE,CAAC;QAC7B,MAAM,OAAO,GAAa,EAAE,CAAC;QAC7B,MAAM,MAAM,GAAa,EAAE,CAAC;QAE5B,IAAI;YACF,uCAAuC;YACvC,MAAM,QAAQ,GAAG,IAAI,CAAC,iCAAiC,EAAE,CAAC;YAC1D,OAAO,CAAC,IAAI,CAAC,8CAA8C,CAAC,CAAC;YAE7D,qCAAqC;YACrC,MAAM,eAAe,GAAG,IAAI,CAAC,mCAAmC,EAAE,CAAC;YACnE,OAAO,CAAC,IAAI,CAAC,kDAAkD,CAAC,CAAC;YAEjE,gCAAgC;YAChC,IAAI,IAAI,CAAC,kBAAkB,CAAC,qBAAqB,CAAC,4BAA4B,EAAE;gBAC9E,IAAI,CAAC,2BAA2B,EAAE,CAAC;gBACnC,OAAO,CAAC,IAAI,CAAC,mCAAmC,CAAC,CAAC;aACnD;YAED,eAAM,CAAC,IAAI,CAAC,kCAAkC,EAAE,OAAO,CAAC,CAAC;SAC1D;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,YAAY,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC;YAC9E,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC1B,eAAM,CAAC,KAAK,CAAC,yCAAyC,EAAE,KAAK,CAAC,CAAC;SAChE;QAED,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC;IACtC,CAAC;IAED,yBAAyB;IAEjB,iBAAiB;QACvB,OAAO;YACL,eAAe,EAAE,CAAC;YAClB,WAAW,EAAE,CAAC;YACd,UAAU,EAAE,CAAC;YACb,UAAU,EAAE,CAAC;YACb,YAAY,EAAE,CAAC;YACf,aAAa,EAAE,CAAC;YAChB,gBAAgB,EAAE,IAAI,CAAC,GAAG,EAAE;SAC7B,CAAC;IACJ,CAAC;IAEO,4BAA4B;QAClC,OAAO;YACL,UAAU,EAAE;gBACV,4BAA4B,EAAE,IAAI;gBAClC,uBAAuB,EAAE,KAAK;gBAC9B,mBAAmB,EAAE,KAAK;gBAC1B,YAAY,EAAE,IAAI;gBAClB,mBAAmB,EAAE,IAAI;gBACzB,uBAAuB,EAAE,IAAI;gBAC7B,0BAA0B,EAAE,KAAK;gBACjC,wBAAwB,EAAE,KAAK;gBAC/B,MAAM,EAAE,QAAiB;gBACzB,MAAM,EAAE,QAAiB;gBACzB,gBAAgB,EAAE,SAAkB;aACrC;YACD,YAAY,EAAE;gBACZ,iCAAiC,EAAE,IAAI;gBACvC,mCAAmC,EAAE,IAAI;gBACzC,mCAAmC,EAAE,IAAI;gBACzC,+BAA+B,EAAE,IAAI;gBACrC,sBAAsB,EAAE,IAAI;aAC7B;YACD,kBAAkB,EAAE;gBAClB,4BAA4B,EAAE,IAAI;gBAClC,yBAAyB,EAAE,IAAI;gBAC/B,mBAAmB,EAAE,IAAI;gBACzB,iBAAiB,EAAE,IAAI;gBACvB,oBAAoB,EAAE,IAAI;gBAC1B,oBAAoB,EAAE,IAAI;aAC3B;YACD,qBAAqB,EAAE;gBACrB,4BAA4B,EAAE,IAAI;gBAClC,6BAA6B,EAAE,IAAI;gBACnC,2BAA2B,EAAE,IAAI;gBACjC,wBAAwB,EAAE,IAAI;gBAC9B,2BAA2B,EAAE,IAAI;aAClC;SACF,CAAC;IACJ,CAAC;IAEO,0BAA0B;QAChC,IAAI,OAAO,MAAM,KAAK,WAAW;YAAE,OAAO;QAE1C,uBAAuB;QACvB,WAAW,CAAC,GAAG,EAAE;YACf,IAAK,WAAmB,CAAC,MAAM,EAAE;gBAC/B,MAAM,WAAW,GAAI,WAAmB,CAAC,MAAM,CAAC,cAAc,GAAG,IAAI,GAAG,IAAI,CAAC;gBAC7E,IAAI,CAAC,wBAAwB,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;aAChD;QACH,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,mBAAmB;IAChC,CAAC;IAEO,0BAA0B;QAChC,MAAM,UAAU,GAAG;YACjB,eAAe,EAAE,KAAK;YACtB,WAAW,EAAE,GAAG;YAChB,UAAU,EAAE,GAAG,GAAG,IAAI;YACtB,UAAU,EAAE,EAAE;SACf,CAAC;QAEF,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,EAAE,SAAS,CAAC,EAAE,EAAE;YACzD,MAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,MAAkC,CAAC,CAAC;YACtE,IAAI,OAAO,YAAY,KAAK,QAAQ,IAAI,YAAY,GAAG,SAAS,EAAE;gBAChE,eAAM,CAAC,IAAI,CAAC,sCAAsC,MAAM,GAAG,EAAE;oBAC3D,OAAO,EAAE,YAAY;oBACrB,SAAS;iBACV,CAAC,CAAC;aACJ;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,mBAAmB,CAAC,OAAiB,EAAE,QAAgB;QAC7D,OAAO,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE;YACjC,mDAAmD;YACnD,MAAM,WAAW,GAAG,UAAU,CAAC,KAAK,CAAC,gDAAgD,CAAC,CAAC;YACvF,IAAI,CAAC,WAAW;gBAAE,OAAO,IAAI,CAAC;YAE9B,MAAM,aAAa,GAAG,WAAW,CAAC,CAAC,CAAC;gBAClC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;gBACrE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;YAEvC,iDAAiD;YACjD,OAAO,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBAC/B,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,MAAM,IAAI,KAAK,EAAE,GAAG,CAAC,CAAC;gBAC/C,OAAO,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC9B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,WAAW,CAAC,OAAiB;QACnC,MAAM,eAAe,GAAa,EAAE,CAAC;QACrC,MAAM,eAAe,GAAa,EAAE,CAAC;QAErC,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;YAC3B,IAAI,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;gBACxF,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;aAClC;iBAAM,IAAI,UAAU,CAAC,IAAI,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;gBAClD,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;aAClC;QACH,CAAC,CAAC,CAAC;QAEH,OAAO;YACL,GAAG,eAAe,CAAC,IAAI,EAAE;YACzB,GAAG,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YACzE,GAAG,eAAe,CAAC,IAAI,EAAE;SAC1B,CAAC;IACJ,CAAC;IAEO,2BAA2B;QACjC,kFAAkF;QAClF,oDAAoD;QACpD,WAAW,CAAC,GAAG,EAAE;YACf,2BAA2B;YAC3B,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;YACjD,IAAI,CAAC,wBAAwB,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC;QAChD,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,mBAAmB;IAChC,CAAC;CACF;AA5iBD,wEA4iBC;AAED;;GAEG;AACH,SAAgB,iCAAiC;IAC/C,OAAO,8BAA8B,CAAC,WAAW,EAAE,CAAC;AACtD,CAAC;AAFD,8EAEC;AAED;;GAEG;AACH,SAAgB,qCAAqC;IACnD,MAAM,SAAS,GAAG,iCAAiC,EAAE,CAAC;IAEtD,OAAO;QACL,iCAAiC,EAAE,GAAG,EAAE,CAAC,SAAS,CAAC,iCAAiC,EAAE;QACtF,mCAAmC,EAAE,GAAG,EAAE,CAAC,SAAS,CAAC,mCAAmC,EAAE;QAC1F,eAAe,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC;QAClE,wBAAwB,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC,SAAS,CAAC,wBAAwB,CAAC,IAAI,CAAC;QACpF,wBAAwB,EAAE,CAAC,OAAoC,EAAE,EAAE,CAAC,SAAS,CAAC,wBAAwB,CAAC,OAAO,CAAC;QAC/G,qBAAqB,EAAE,GAAG,EAAE,CAAC,SAAS,CAAC,qBAAqB,EAAE;QAC9D,yCAAyC,EAAE,GAAG,EAAE,CAAC,SAAS,CAAC,yCAAyC,EAAE;QACtG,2BAA2B,EAAE,GAAG,EAAE,CAAC,SAAS,CAAC,2BAA2B,EAAE;KAC3E,CAAC;AACJ,CAAC;AAbD,sFAaC","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/developmentExperienceOptimizations.ts"],"sourcesContent":["/**\n * Enhanced Development Experience Optimizations\n * \n * This module implements enhanced development experience optimizations including:\n * - Optimized TypeScript configuration for faster compilation\n * - Enhanced IntelliSense for astrological type definitions\n * - Automatic import organization and error fixing\n * - Performance monitoring and real-time error detection\n */\n\nimport { logger } from '@/utils/logger';\n\n// TypeScript compilation optimization settings\nexport interface TypeScriptOptimizationConfig {\n  enableIncrementalCompilation: boolean;\n  enableProjectReferences: boolean;\n  enableCompositeMode: boolean;\n  skipLibCheck: boolean;\n  skipDefaultLibCheck: boolean;\n  useDefineForClassFields: boolean;\n  exactOptionalPropertyTypes: boolean;\n  noUncheckedIndexedAccess: boolean;\n  target: 'es2018' | 'es2020' | 'es2022' | 'esnext';\n  module: 'commonjs' | 'esnext' | 'es2020' | 'es2022';\n  moduleResolution: 'node' | 'bundler';\n}\n\n// IntelliSense enhancement configuration\nexport interface IntelliSenseConfig {\n  enableAstrologicalTypeDefinitions: boolean;\n  enableElementalPropertyIntelliSense: boolean;\n  enablePlanetaryPositionAutoComplete: boolean;\n  enableCulinaryAstrologySnippets: boolean;\n  enableCustomTypeGuards: boolean;\n}\n\n// Import organization configuration\nexport interface ImportOrganizationConfig {\n  enableAutoImportOrganization: boolean;\n  enableUnusedImportRemoval: boolean;\n  enableImportSorting: boolean;\n  enablePathMapping: boolean;\n  groupExternalImports: boolean;\n  groupInternalImports: boolean;\n}\n\n// Performance monitoring configuration\nexport interface PerformanceMonitoringConfig {\n  enableRealTimeErrorDetection: boolean;\n  enableCompilationTimeTracking: boolean;\n  enableMemoryUsageMonitoring: boolean;\n  enableBundleSizeTracking: boolean;\n  enableHotReloadOptimization: boolean;\n}\n\nexport interface DevelopmentMetrics {\n  compilationTime: number;\n  memoryUsage: number;\n  bundleSize: number;\n  errorCount: number;\n  warningCount: number;\n  hotReloadTime: number;\n  lastOptimization: number;\n}\n\n/**\n * Enhanced Development Experience Manager\n */\nexport class DevelopmentExperienceOptimizer {\n  private static instance: DevelopmentExperienceOptimizer;\n  private metrics: DevelopmentMetrics;\n  private optimizationConfig: {\n    typescript: TypeScriptOptimizationConfig;\n    intelliSense: IntelliSenseConfig;\n    importOrganization: ImportOrganizationConfig;\n    performanceMonitoring: PerformanceMonitoringConfig;\n  };\n\n  private constructor() {\n    this.metrics = this.initializeMetrics();\n    this.optimizationConfig = this.getDefaultOptimizationConfig();\n    this.startPerformanceMonitoring();\n  }\n\n  public static getInstance(): DevelopmentExperienceOptimizer {\n    if (!DevelopmentExperienceOptimizer.instance) {\n      DevelopmentExperienceOptimizer.instance = new DevelopmentExperienceOptimizer();\n    }\n    return DevelopmentExperienceOptimizer.instance;\n  }\n\n  /**\n   * Generate optimized TypeScript configuration\n   */\n  public generateOptimizedTypeScriptConfig(): any {\n    const config = this.optimizationConfig.typescript;\n    \n    return {\n      compilerOptions: {\n        // Performance optimizations\n        target: config.target,\n        module: config.module,\n        moduleResolution: config.moduleResolution,\n        \n        // Compilation speed optimizations\n        incremental: config.enableIncrementalCompilation,\n        composite: config.enableCompositeMode,\n        skipLibCheck: config.skipLibCheck,\n        skipDefaultLibCheck: config.skipDefaultLibCheck,\n        \n        // Type checking optimizations\n        strict: true,\n        noImplicitAny: false, // Relaxed for rapid development\n        strictNullChecks: false, // Relaxed for rapid development\n        useDefineForClassFields: config.useDefineForClassFields,\n        exactOptionalPropertyTypes: config.exactOptionalPropertyTypes,\n        noUncheckedIndexedAccess: config.noUncheckedIndexedAccess,\n        \n        // Path mapping for better imports\n        baseUrl: \".\",\n        paths: {\n          \"@/*\": [\"./src/*\"],\n          \"@components/*\": [\"./src/components/*\"],\n          \"@utils/*\": [\"./src/utils/*\"],\n          \"@types/*\": [\"./src/types/*\"],\n          \"@data/*\": [\"./src/data/*\"],\n          \"@calculations/*\": [\"./src/calculations/*\"],\n          \"@hooks/*\": [\"./src/hooks/*\"],\n          \"@contexts/*\": [\"./src/contexts/*\"]\n        },\n        \n        // Enhanced type definitions\n        lib: [\"dom\", \"dom.iterable\", \"es6\", \"es2018\", \"es2020\"],\n        allowJs: true,\n        allowSyntheticDefaultImports: true,\n        esModuleInterop: true,\n        forceConsistentCasingInFileNames: true,\n        isolatedModules: true,\n        jsx: \"preserve\",\n        noEmit: true,\n        resolveJsonModule: true\n      },\n      \n      // Include patterns for faster compilation\n      include: [\n        \"next-env.d.ts\",\n        \"**/*.ts\",\n        \"**/*.tsx\",\n        \".next/types/**/*.ts\"\n      ],\n      \n      // Exclude patterns to reduce compilation time\n      exclude: [\n        \"node_modules\",\n        \".next\",\n        \"out\",\n        \"build\",\n        \"dist\",\n        \"**/*.test.ts\",\n        \"**/*.test.tsx\",\n        \"**/*.spec.ts\",\n        \"**/*.spec.tsx\"\n      ],\n      \n      // TypeScript project references for faster builds\n      references: config.enableProjectReferences ? [\n        { path: \"./tsconfig.paths.json\" }\n      ] : undefined\n    };\n  }\n\n  /**\n   * Generate enhanced IntelliSense type definitions\n   */\n  public generateAstrologicalTypeDefinitions(): string {\n    return `\n// Enhanced Astrological Type Definitions for IntelliSense\ndeclare global {\n  namespace Astrology {\n    // Planetary positions with enhanced IntelliSense\n    interface PlanetaryPosition {\n      /** Zodiac sign (e.g., 'aries', 'taurus', 'gemini') */\n      sign: 'aries' | 'taurus' | 'gemini' | 'cancer' | 'leo' | 'virgo' | \n            'libra' | 'scorpio' | 'sagittarius' | 'capricorn' | 'aquarius' | 'pisces';\n      /** Degree within the sign (0-30) */\n      degree: number;\n      /** Exact longitude (0-360) */\n      exactLongitude: number;\n      /** Whether the planet is in retrograde motion */\n      isRetrograde: boolean;\n    }\n\n    // Elemental properties with validation\n    interface ElementalProperties {\n      /** Fire element strength (0-1) - Energy, spice, quick cooking */\n      Fire: number;\n      /** Water element strength (0-1) - Cooling, fluid, steaming */\n      Water: number;\n      /** Earth element strength (0-1) - Grounding, root vegetables, slow cooking */\n      Earth: number;\n      /** Air element strength (0-1) - Light, leafy, raw preparations */\n      Air: number;\n    }\n\n    // Planetary correspondences for ingredients\n    interface PlanetaryCorrespondence {\n      /** Primary ruling planet */\n      rulingPlanet: 'sun' | 'moon' | 'mercury' | 'venus' | 'mars' | 'jupiter' | 'saturn';\n      /** Secondary planetary influences */\n      influences?: Array<'sun' | 'moon' | 'mercury' | 'venus' | 'mars' | 'jupiter' | 'saturn'>;\n      /** Optimal timing for use */\n      optimalTiming?: string;\n    }\n\n    // Culinary astrology calculations\n    interface CulinaryAstrologyData {\n      /** Current dominant element based on planetary positions */\n      dominantElement: 'Fire' | 'Water' | 'Earth' | 'Air';\n      /** Recommended cooking methods */\n      recommendedMethods: string[];\n      /** Optimal ingredients for current conditions */\n      optimalIngredients: string[];\n      /** Timing recommendations */\n      timing: {\n        bestHours: string[];\n        lunarPhase: string;\n        planetaryHour: string;\n      };\n    }\n\n    // Type guards for runtime validation\n    function isPlanetaryPosition(obj: any): obj is PlanetaryPosition;\n    function isElementalProperties(obj: any): obj is ElementalProperties;\n    function isValidCompatibilityScore(score: number): boolean;\n  }\n\n  // Enhanced ingredient type definitions\n  interface EnhancedIngredient {\n    name: string;\n    category: string;\n    elementalProperties: Astrology.ElementalProperties;\n    planetaryCorrespondence: Astrology.PlanetaryCorrespondence;\n    culinaryProperties: {\n      flavorProfile: string[];\n      cookingMethods: string[];\n      seasonality: string[];\n      pairings: string[];\n    };\n    nutritionalData?: {\n      calories: number;\n      protein: number;\n      carbs: number;\n      fat: number;\n      vitamins: string[];\n      minerals: string[];\n    };\n  }\n\n  // Enhanced recipe type definitions\n  interface EnhancedRecipe {\n    id: string;\n    name: string;\n    ingredients: EnhancedIngredient[];\n    instructions: string[];\n    astrologicalOptimization: Astrology.CulinaryAstrologyData;\n    elementalBalance: Astrology.ElementalProperties;\n    timing: {\n      prepTime: number;\n      cookTime: number;\n      totalTime: number;\n      optimalStartTime?: string;\n    };\n  }\n}\n\n// Export enhanced types for use in components\nexport type {\n  Astrology.PlanetaryPosition as PlanetaryPosition,\n  Astrology.ElementalProperties as ElementalProperties,\n  Astrology.CulinaryAstrologyData as CulinaryAstrologyData,\n  EnhancedIngredient,\n  EnhancedRecipe\n};\n`;\n  }\n\n  /**\n   * Organize and optimize imports automatically\n   */\n  public organizeImports(sourceCode: string): string {\n    if (!this.optimizationConfig.importOrganization.enableAutoImportOrganization) {\n      return sourceCode;\n    }\n\n    const lines = sourceCode.split('\\n');\n    const imports: string[] = [];\n    const otherLines: string[] = [];\n    let inImportSection = true;\n\n    for (const line of lines) {\n      if (line.trim().startsWith('import ') || line.trim().startsWith('export ')) {\n        if (inImportSection) {\n          imports.push(line);\n        } else {\n          otherLines.push(line);\n        }\n      } else if (line.trim() === '') {\n        if (inImportSection && imports.length > 0) {\n          imports.push(line);\n        } else {\n          otherLines.push(line);\n        }\n      } else {\n        inImportSection = false;\n        otherLines.push(line);\n      }\n    }\n\n    // Remove unused imports\n    const usedImports = this.optimizationConfig.importOrganization.enableUnusedImportRemoval\n      ? this.removeUnusedImports(imports, otherLines.join('\\n'))\n      : imports;\n\n    // Sort imports\n    const sortedImports = this.optimizationConfig.importOrganization.enableImportSorting\n      ? this.sortImports(usedImports)\n      : usedImports;\n\n    return [...sortedImports, '', ...otherLines].join('\\n');\n  }\n\n  /**\n   * Real-time error detection and fixing\n   */\n  public detectAndFixCommonErrors(sourceCode: string): {\n    fixedCode: string;\n    fixes: string[];\n    remainingErrors: string[];\n  } {\n    let fixedCode = sourceCode;\n    const fixes: string[] = [];\n    const remainingErrors: string[] = [];\n\n    // Fix common TypeScript errors\n    const commonFixes = [\n      {\n        pattern: /React\\.FC<([^>]+)>/g,\n        replacement: 'React.FC<$1>',\n        description: 'Fixed React.FC type annotation'\n      },\n      {\n        pattern: /useEffect\\(\\(\\) => \\{([^}]+)\\}, \\[\\]\\)/g,\n        replacement: 'useEffect(() => {$1}, [])',\n        description: 'Fixed useEffect dependency array'\n      },\n      {\n        pattern: /const \\[([^,]+), set([^\\]]+)\\] = useState\\(\\)/g,\n        replacement: 'const [$1, set$2] = useState<any>()',\n        description: 'Added type annotation to useState'\n      },\n      {\n        pattern: /interface ([A-Z][a-zA-Z]*) \\{/g,\n        replacement: 'interface $1 {',\n        description: 'Fixed interface naming convention'\n      }\n    ];\n\n    commonFixes.forEach(fix => {\n      if (fix.pattern.test(fixedCode)) {\n        fixedCode = fixedCode.replace(fix.pattern, fix.replacement);\n        fixes.push(fix.description);\n      }\n    });\n\n    // Detect remaining errors (simplified detection)\n    const errorPatterns = [\n      /Property '([^']+)' does not exist on type/g,\n      /Type '([^']+)' is not assignable to type/g,\n      /Cannot find name '([^']+)'/g\n    ];\n\n    errorPatterns.forEach(pattern => {\n      const matches = fixedCode.match(pattern);\n      if (matches) {\n        matches.forEach(match => remainingErrors.push(match));\n      }\n    });\n\n    return { fixedCode, fixes, remainingErrors };\n  }\n\n  /**\n   * Monitor performance metrics in real-time\n   */\n  public updatePerformanceMetrics(newMetrics: Partial<DevelopmentMetrics>): void {\n    this.metrics = { ...this.metrics, ...newMetrics, lastOptimization: Date.now() };\n    \n    if (this.optimizationConfig.performanceMonitoring.enableRealTimeErrorDetection) {\n      this.checkPerformanceThresholds();\n    }\n  }\n\n  /**\n   * Get current development metrics\n   */\n  public getDevelopmentMetrics(): DevelopmentMetrics {\n    return { ...this.metrics };\n  }\n\n  /**\n   * Generate performance optimization recommendations\n   */\n  public getPerformanceOptimizationRecommendations(): {\n    typescript: string[];\n    bundling: string[];\n    runtime: string[];\n    development: string[];\n  } {\n    const recommendations = {\n      typescript: [],\n      bundling: [],\n      runtime: [],\n      development: []\n    } as any;\n\n    // TypeScript recommendations\n    if (this.metrics.compilationTime > 30000) { // 30 seconds\n      recommendations.typescript.push('Enable incremental compilation');\n      recommendations.typescript.push('Use project references for large codebases');\n      recommendations.typescript.push('Enable skipLibCheck for faster builds');\n    }\n\n    // Bundle size recommendations\n    if (this.metrics.bundleSize > 500 * 1024) { // 500KB\n      recommendations.bundling.push('Implement code splitting');\n      recommendations.bundling.push('Enable tree shaking');\n      recommendations.bundling.push('Use dynamic imports for large components');\n    }\n\n    // Runtime performance recommendations\n    if (this.metrics.memoryUsage > 100) { // 100MB\n      recommendations.runtime.push('Optimize React component re-renders');\n      recommendations.runtime.push('Use React.memo for expensive components');\n      recommendations.runtime.push('Implement proper cleanup in useEffect');\n    }\n\n    // Development experience recommendations\n    if (this.metrics.hotReloadTime > 5000) { // 5 seconds\n      recommendations.development.push('Optimize webpack configuration');\n      recommendations.development.push('Reduce the number of watched files');\n      recommendations.development.push('Use faster development server');\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Apply automatic optimizations\n   */\n  public applyAutomaticOptimizations(): {\n    applied: string[];\n    skipped: string[];\n    errors: string[];\n  } {\n    const applied: string[] = [];\n    const skipped: string[] = [];\n    const errors: string[] = [];\n\n    try {\n      // Generate optimized TypeScript config\n      const tsConfig = this.generateOptimizedTypeScriptConfig();\n      applied.push('Generated optimized TypeScript configuration');\n\n      // Generate enhanced type definitions\n      const typeDefinitions = this.generateAstrologicalTypeDefinitions();\n      applied.push('Generated enhanced astrological type definitions');\n\n      // Update performance monitoring\n      if (this.optimizationConfig.performanceMonitoring.enableRealTimeErrorDetection) {\n        this.startRealTimeErrorDetection();\n        applied.push('Started real-time error detection');\n      }\n\n      logger.info('Automatic optimizations applied:', applied);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      errors.push(errorMessage);\n      logger.error('Error applying automatic optimizations:', error);\n    }\n\n    return { applied, skipped, errors };\n  }\n\n  // Private helper methods\n\n  private initializeMetrics(): DevelopmentMetrics {\n    return {\n      compilationTime: 0,\n      memoryUsage: 0,\n      bundleSize: 0,\n      errorCount: 0,\n      warningCount: 0,\n      hotReloadTime: 0,\n      lastOptimization: Date.now()\n    };\n  }\n\n  private getDefaultOptimizationConfig() {\n    return {\n      typescript: {\n        enableIncrementalCompilation: true,\n        enableProjectReferences: false,\n        enableCompositeMode: false,\n        skipLibCheck: true,\n        skipDefaultLibCheck: true,\n        useDefineForClassFields: true,\n        exactOptionalPropertyTypes: false,\n        noUncheckedIndexedAccess: false,\n        target: 'es2018' as const,\n        module: 'esnext' as const,\n        moduleResolution: 'bundler' as const\n      },\n      intelliSense: {\n        enableAstrologicalTypeDefinitions: true,\n        enableElementalPropertyIntelliSense: true,\n        enablePlanetaryPositionAutoComplete: true,\n        enableCulinaryAstrologySnippets: true,\n        enableCustomTypeGuards: true\n      },\n      importOrganization: {\n        enableAutoImportOrganization: true,\n        enableUnusedImportRemoval: true,\n        enableImportSorting: true,\n        enablePathMapping: true,\n        groupExternalImports: true,\n        groupInternalImports: true\n      },\n      performanceMonitoring: {\n        enableRealTimeErrorDetection: true,\n        enableCompilationTimeTracking: true,\n        enableMemoryUsageMonitoring: true,\n        enableBundleSizeTracking: true,\n        enableHotReloadOptimization: true\n      }\n    };\n  }\n\n  private startPerformanceMonitoring(): void {\n    if (typeof window === 'undefined') return;\n\n    // Monitor memory usage\n    setInterval(() => {\n      if ((performance as any).memory) {\n        const memoryUsage = (performance as any).memory.usedJSHeapSize / 1024 / 1024;\n        this.updatePerformanceMetrics({ memoryUsage });\n      }\n    }, 10000); // Every 10 seconds\n  }\n\n  private checkPerformanceThresholds(): void {\n    const thresholds = {\n      compilationTime: 30000, // 30 seconds\n      memoryUsage: 100, // 100MB\n      bundleSize: 500 * 1024, // 500KB\n      errorCount: 10\n    };\n\n    Object.entries(thresholds).forEach(([metric, threshold]) => {\n      const currentValue = this.metrics[metric as keyof DevelopmentMetrics];\n      if (typeof currentValue === 'number' && currentValue > threshold) {\n        logger.warn(`Performance threshold exceeded for ${metric}:`, {\n          current: currentValue,\n          threshold\n        });\n      }\n    });\n  }\n\n  private removeUnusedImports(imports: string[], codeBody: string): string[] {\n    return imports.filter(importLine => {\n      // Extract imported names from the import statement\n      const importMatch = importLine.match(/import\\s+(?:\\{([^}]+)\\}|\\*\\s+as\\s+(\\w+)|(\\w+))/);\n      if (!importMatch) return true;\n\n      const importedNames = importMatch[1] \n        ? importMatch[1].split(',').map(name => name.trim().split(' as ')[0])\n        : [importMatch[2] || importMatch[3]];\n\n      // Check if any imported name is used in the code\n      return importedNames.some(name => {\n        const regex = new RegExp(`\\\\b${name}\\\\b`, 'g');\n        return regex.test(codeBody);\n      });\n    });\n  }\n\n  private sortImports(imports: string[]): string[] {\n    const externalImports: string[] = [];\n    const internalImports: string[] = [];\n\n    imports.forEach(importLine => {\n      if (importLine.includes('@/') || importLine.includes('./') || importLine.includes('../')) {\n        internalImports.push(importLine);\n      } else if (importLine.trim().startsWith('import ')) {\n        externalImports.push(importLine);\n      }\n    });\n\n    return [\n      ...externalImports.sort(),\n      ...(externalImports.length > 0 && internalImports.length > 0 ? [''] : []),\n      ...internalImports.sort()\n    ];\n  }\n\n  private startRealTimeErrorDetection(): void {\n    // In a real implementation, this would integrate with the TypeScript compiler API\n    // For now, we'll simulate real-time error detection\n    setInterval(() => {\n      // Simulate error detection\n      const errorCount = Math.floor(Math.random() * 5);\n      this.updatePerformanceMetrics({ errorCount });\n    }, 30000); // Every 30 seconds\n  }\n}\n\n/**\n * Convenience function to get development experience optimizer instance\n */\nexport function getDevelopmentExperienceOptimizer(): DevelopmentExperienceOptimizer {\n  return DevelopmentExperienceOptimizer.getInstance();\n}\n\n/**\n * Hook for components to use development experience optimizations\n */\nexport function useDevelopmentExperienceOptimizations() {\n  const optimizer = getDevelopmentExperienceOptimizer();\n  \n  return {\n    generateOptimizedTypeScriptConfig: () => optimizer.generateOptimizedTypeScriptConfig(),\n    generateAstrologicalTypeDefinitions: () => optimizer.generateAstrologicalTypeDefinitions(),\n    organizeImports: (code: string) => optimizer.organizeImports(code),\n    detectAndFixCommonErrors: (code: string) => optimizer.detectAndFixCommonErrors(code),\n    updatePerformanceMetrics: (metrics: Partial<DevelopmentMetrics>) => optimizer.updatePerformanceMetrics(metrics),\n    getDevelopmentMetrics: () => optimizer.getDevelopmentMetrics(),\n    getPerformanceOptimizationRecommendations: () => optimizer.getPerformanceOptimizationRecommendations(),\n    applyAutomaticOptimizations: () => optimizer.applyAutomaticOptimizations()\n  };\n}"],"version":3}