f6215d5c27b758f5665d333ec25c4340
"use strict";
/**
 * Unit Tests for Astrological Rule Utilities
 *
 * Tests the utility functions that support the custom ESLint rules
 * for astrological calculations.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const astrologicalValidation_1 = require("../astrologicalValidation");
const transitValidation_1 = require("../transitValidation");
const elementalValidation_1 = require("../elementalValidation");
describe('Astrological Validation Utilities', () => {
    describe('Planetary Position Validation', () => {
        test('should validate complete planetary positions object', () => {
            const validPositions = {
                sun: { sign: 'aries', degree: 8.5, exactLongitude: 8.5, isRetrograde: false },
                moon: { sign: 'aries', degree: 1.57, exactLongitude: 1.57, isRetrograde: false },
                mercury: { sign: 'aries', degree: 0.85, exactLongitude: 0.85, isRetrograde: true }
            };
            const result = (0, astrologicalValidation_1.validatePlanetaryPositions)(validPositions);
            expect(result.isValid).toBe(true);
            expect(result.errors).toHaveLength(0);
        });
        test('should detect missing required planets', () => {
            const incompletePositions = {
                sun: { sign: 'aries', degree: 8.5, exactLongitude: 8.5, isRetrograde: false }
                // Missing moon, mercury, venus, mars, jupiter, saturn
            };
            const result = (0, astrologicalValidation_1.validatePlanetaryPositions)(incompletePositions);
            expect(result.isValid).toBe(false);
            expect(result.errors.length).toBeGreaterThan(0);
            expect(result.errors.some(error => error.includes('moon'))).toBe(true);
        });
        test('should detect invalid planetary position structure', () => {
            const invalidPositions = {
                sun: { sign: 'aries', degree: 8.5 },
                moon: { sign: 'aries', degree: 1.57, exactLongitude: 1.57, isRetrograde: false }
            };
            const result = (0, astrologicalValidation_1.validatePlanetaryPositions)(invalidPositions);
            expect(result.isValid).toBe(false);
            expect(result.errors.some(error => error.includes('exactLongitude'))).toBe(true);
        });
        test('should validate degree ranges', () => {
            const invalidDegreePositions = {
                sun: { sign: 'aries', degree: 35, exactLongitude: 35, isRetrograde: false },
                moon: { sign: 'aries', degree: -5, exactLongitude: -5, isRetrograde: false } // Degree too low
            };
            const result = (0, astrologicalValidation_1.validatePlanetaryPositions)(invalidDegreePositions, { strictMode: true });
            expect(result.isValid).toBe(false);
            expect(result.errors.some(error => error.includes('35'))).toBe(true);
            expect(result.errors.some(error => error.includes('-5'))).toBe(true);
        });
        test('should auto-correct invalid values when requested', () => {
            const invalidPositions = {
                sun: { sign: 'aries', degree: 35, exactLongitude: 370, isRetrograde: false }
            };
            const result = (0, astrologicalValidation_1.validatePlanetaryPositions)(invalidPositions, { autoCorrect: true });
            expect(result.correctedData).toBeDefined();
            expect(result.correctedData?.sun.degree).toBeLessThan(30);
            expect(result.correctedData?.sun.exactLongitude).toBeLessThan(360);
        });
    });
    describe('Elemental Properties Validation', () => {
        test('should validate complete elemental properties', () => {
            const validProperties = {
                Fire: 0.7,
                Water: 0.1,
                Earth: 0.1,
                Air: 0.1
            };
            expect((0, elementalValidation_1.validateElementalProperties)(validProperties)).toBe(true);
        });
        test('should reject missing elements', () => {
            const incompleteProperties = {
                Fire: 0.8,
                Water: 0.2
                // Missing Earth and Air
            };
            expect((0, elementalValidation_1.validateElementalProperties)(incompleteProperties)).toBe(false);
        });
        test('should reject invalid element values', () => {
            const invalidProperties = {
                Fire: 1.5,
                Water: -0.1,
                Earth: 0.3,
                Air: 0.2
            };
            expect((0, elementalValidation_1.validateElementalProperties)(invalidProperties)).toBe(false);
        });
        test('should normalize elemental properties', () => {
            const partialProperties = {
                Fire: 0.8,
                Water: 0.2
            };
            const normalized = (0, elementalValidation_1.normalizeElementalProperties)(partialProperties);
            expect(normalized.Fire).toBe(0.8);
            expect(normalized.Water).toBe(0.2);
            expect(normalized.Earth).toBe(0.25); // Default value
            expect(normalized.Air).toBe(0.25); // Default value
        });
        test('should calculate elemental harmony correctly', () => {
            const fireProperties = { Fire: 0.8, Water: 0.1, Earth: 0.05, Air: 0.05 };
            const otherFireProperties = { Fire: 0.7, Water: 0.15, Earth: 0.1, Air: 0.05 };
            const harmony = (0, elementalValidation_1.calculateElementalHarmony)(fireProperties, otherFireProperties);
            expect(harmony).toBeGreaterThanOrEqual(0.7); // Minimum compatibility
            expect(harmony).toBeGreaterThan(0.8); // Should be high due to Fire-Fire compatibility
        });
        test('should identify dominant element', () => {
            const fireProperties = { Fire: 0.8, Water: 0.1, Earth: 0.05, Air: 0.05 };
            const dominant = (0, elementalValidation_1.getDominantElement)(fireProperties);
            expect(dominant).toBe('Fire');
        });
        test('should enhance dominant element', () => {
            const properties = { Fire: 0.5, Water: 0.2, Earth: 0.2, Air: 0.1 };
            const enhanced = (0, elementalValidation_1.enhanceDominantElement)(properties);
            expect(enhanced.Fire).toBeGreaterThan(properties.Fire);
            expect(enhanced.Fire).toBeLessThanOrEqual(1.0);
        });
        test('should validate self-reinforcement patterns', () => {
            const strongFire = { Fire: 0.7, Water: 0.1, Earth: 0.1, Air: 0.1 };
            const weakElements = { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 };
            expect((0, elementalValidation_1.validateSelfReinforcement)(strongFire)).toBe(true);
            expect((0, elementalValidation_1.validateSelfReinforcement)(weakElements)).toBe(false);
        });
    });
    describe('Transit Date Validation', () => {
        const mockTransitDates = {
            aries: { Start: '2024-03-20', End: '2024-04-19' },
            taurus: { Start: '2024-04-20', End: '2024-05-20' },
            RetrogradePhases: {
                'phase1': { Start: '2024-04-01', End: '2024-04-15' }
            }
        };
        test('should validate transit dates correctly', () => {
            const ariesDate = new Date('2024-04-01');
            const taurusDate = new Date('2024-05-01');
            const invalidDate = new Date('2024-06-01');
            expect((0, transitValidation_1.validateTransitDate)('mars', ariesDate, 'aries', mockTransitDates)).toBe(true);
            expect((0, transitValidation_1.validateTransitDate)('mars', taurusDate, 'taurus', mockTransitDates)).toBe(true);
            expect((0, transitValidation_1.validateTransitDate)('mars', invalidDate, 'aries', mockTransitDates)).toBe(false);
        });
        test('should get current transit sign', () => {
            const ariesDate = new Date('2024-04-01');
            const taurusDate = new Date('2024-05-01');
            expect((0, transitValidation_1.getCurrentTransitSign)('mars', ariesDate, mockTransitDates)).toBe('aries');
            expect((0, transitValidation_1.getCurrentTransitSign)('mars', taurusDate, mockTransitDates)).toBe('taurus');
        });
        test('should validate retrograde phases', () => {
            const retrogradeDate = new Date('2024-04-10');
            const directDate = new Date('2024-03-25');
            const retrogradeResult = (0, transitValidation_1.validateRetrogradePhase)('mercury', retrogradeDate, mockTransitDates);
            const directResult = (0, transitValidation_1.validateRetrogradePhase)('mercury', directDate, mockTransitDates);
            expect(retrogradeResult.isRetrograde).toBe(true);
            expect(retrogradeResult.phase).toBe('phase1');
            expect(directResult.isRetrograde).toBe(false);
        });
        test('should validate all transit dates for consistency', () => {
            const validTransitDates = {
                aries: { Start: '2024-03-20', End: '2024-04-19' },
                taurus: { Start: '2024-04-20', End: '2024-05-20' }
            };
            const invalidTransitDates = {
                aries: { Start: '2024-03-20', End: '2024-04-19' },
                taurus: { Start: '2024-04-15', End: '2024-05-20' } // Overlaps with aries
            };
            const validResult = (0, transitValidation_1.validateAllTransitDates)(validTransitDates);
            const invalidResult = (0, transitValidation_1.validateAllTransitDates)(invalidTransitDates);
            expect(validResult.isValid).toBe(true);
            expect(invalidResult.warnings.some(w => w.includes('Overlap'))).toBe(true);
        });
    });
    describe('Mathematical Constants Validation', () => {
        test('should validate expected constants', () => {
            const validConstants = {
                DEGREES_PER_SIGN: 30,
                SIGNS_PER_CIRCLE: 12,
                MAX_LONGITUDE: 360,
                SELF_REINFORCEMENT_THRESHOLD: 0.3
            };
            const result = (0, astrologicalValidation_1.validateMathematicalConstants)(validConstants);
            expect(result.isValid).toBe(true);
            expect(result.errors).toHaveLength(0);
        });
        test('should warn about unexpected constant values', () => {
            const unexpectedConstants = {
                DEGREES_PER_SIGN: 25,
                SIGNS_PER_CIRCLE: 10 // Should be 12
            };
            const result = (0, astrologicalValidation_1.validateMathematicalConstants)(unexpectedConstants);
            expect(result.isValid).toBe(true); // Warnings don't make it invalid
            expect(result.warnings.length).toBeGreaterThan(0);
            expect(result.warnings.some(w => w.includes('DEGREES_PER_SIGN'))).toBe(true);
        });
        test('should error on invalid constant values', () => {
            const invalidConstants = {
                DEGREES_PER_SIGN: NaN,
                MAX_LONGITUDE: Infinity
            };
            const result = (0, astrologicalValidation_1.validateMathematicalConstants)(invalidConstants);
            expect(result.isValid).toBe(false);
            expect(result.errors.length).toBeGreaterThan(0);
        });
    });
    describe('Comprehensive Astrological Calculation Validation', () => {
        test('should validate complete astrological calculation input', async () => {
            const validInput = {
                planetaryPositions: {
                    sun: { sign: 'aries', degree: 8.5, exactLongitude: 8.5, isRetrograde: false },
                    moon: { sign: 'aries', degree: 1.57, exactLongitude: 1.57, isRetrograde: false }
                },
                elementalProperties: {
                    Fire: 0.7,
                    Water: 0.1,
                    Earth: 0.1,
                    Air: 0.1
                },
                constants: {
                    DEGREES_PER_SIGN: 30,
                    MAX_LONGITUDE: 360
                },
                date: new Date('2024-04-01')
            };
            const result = await (0, astrologicalValidation_1.validateAstrologicalCalculation)(validInput);
            expect(result.isValid).toBe(true);
        });
        test('should collect all validation errors and warnings', async () => {
            const invalidInput = {
                planetaryPositions: {
                    sun: { sign: 'aries', degree: 8.5 } // Missing properties
                },
                elementalProperties: {
                    Fire: 1.5,
                    Water: 0.1
                    // Missing elements
                },
                constants: {
                    DEGREES_PER_SIGN: NaN // Invalid constant
                }
            };
            const result = await (0, astrologicalValidation_1.validateAstrologicalCalculation)(invalidInput);
            expect(result.isValid).toBe(false);
            expect(result.errors.length).toBeGreaterThan(0);
            expect(result.warnings.length).toBeGreaterThan(0);
        });
    });
    describe('Quick Validation Functions', () => {
        test('should provide quick validation for different data types', () => {
            const validPlanetary = {
                sun: { sign: 'aries', degree: 8.5, exactLongitude: 8.5, isRetrograde: false }
            };
            const validElemental = { Fire: 0.7, Water: 0.1, Earth: 0.1, Air: 0.1 };
            const validConstants = { DEGREES_PER_SIGN: 30 };
            expect((0, astrologicalValidation_1.quickValidate)(validPlanetary, 'planetary')).toBe(true);
            expect((0, astrologicalValidation_1.quickValidate)(validElemental, 'elemental')).toBe(true);
            expect((0, astrologicalValidation_1.quickValidate)(validConstants, 'constants')).toBe(true);
            expect((0, astrologicalValidation_1.quickValidate)({}, 'planetary')).toBe(false);
            expect((0, astrologicalValidation_1.quickValidate)({ Fire: 2.0 }, 'elemental')).toBe(false);
            expect((0, astrologicalValidation_1.quickValidate)({ DEGREES_PER_SIGN: NaN }, 'constants')).toBe(false);
        });
    });
    describe('Validation Constants', () => {
        test('should export all necessary validation constants', () => {
            expect(astrologicalValidation_1.VALIDATION_CONSTANTS.DEGREES_PER_SIGN).toBe(30);
            expect(astrologicalValidation_1.VALIDATION_CONSTANTS.SIGNS_PER_CIRCLE).toBe(12);
            expect(astrologicalValidation_1.VALIDATION_CONSTANTS.MAX_LONGITUDE).toBe(360);
            expect(astrologicalValidation_1.VALIDATION_CONSTANTS.SELF_REINFORCEMENT_THRESHOLD).toBe(0.3);
            expect(astrologicalValidation_1.VALIDATION_CONSTANTS.HARMONY_THRESHOLD).toBe(0.7);
            expect(astrologicalValidation_1.VALIDATION_CONSTANTS.VALIDATION_TIMEOUT).toBe(5000);
        });
        test('should have consistent constants across modules', () => {
            expect(elementalValidation_1.ELEMENTAL_CONSTANTS.SELF_REINFORCEMENT_THRESHOLD).toBe(astrologicalValidation_1.VALIDATION_CONSTANTS.SELF_REINFORCEMENT_THRESHOLD);
            expect(transitValidation_1.TRANSIT_CONSTANTS.DEGREES_PER_SIGN).toBe(astrologicalValidation_1.VALIDATION_CONSTANTS.DEGREES_PER_SIGN);
        });
    });
    describe('Error Handling and Edge Cases', () => {
        test('should handle null and undefined inputs gracefully', () => {
            expect((0, astrologicalValidation_1.quickValidate)(null, 'planetary')).toBe(false);
            expect((0, astrologicalValidation_1.quickValidate)(undefined, 'elemental')).toBe(false);
            expect((0, elementalValidation_1.validateElementalProperties)(null)).toBe(false);
            expect((0, elementalValidation_1.validateElementalProperties)(undefined)).toBe(false);
        });
        test('should handle malformed data structures', () => {
            const malformedPlanetary = {
                sun: 'not an object',
                moon: { sign: 123, degree: 'invalid' }
            };
            const result = (0, astrologicalValidation_1.validatePlanetaryPositions)(malformedPlanetary);
            expect(result.isValid).toBe(false);
            expect(result.errors.length).toBeGreaterThan(0);
        });
        test('should handle circular references safely', () => {
            const circular = { Fire: 0.5 };
            circular.self = circular;
            // Should not throw an error or cause infinite loops
            expect(() => (0, elementalValidation_1.validateElementalProperties)(circular)).not.toThrow();
        });
        test('should validate performance with large datasets', () => {
            const largePlanetaryData = {};
            for (let i = 0; i < 1000; i++) {
                largePlanetaryData[`planet${i}`] = {
                    sign: 'aries',
                    degree: i % 30,
                    exactLongitude: i % 360,
                    isRetrograde: i % 2 === 0
                };
            }
            const startTime = Date.now();
            const result = (0, astrologicalValidation_1.validatePlanetaryPositions)(largePlanetaryData);
            const endTime = Date.now();
            expect(endTime - startTime).toBeLessThan(1000); // Should complete within 1 second
            expect(result).toBeDefined();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,