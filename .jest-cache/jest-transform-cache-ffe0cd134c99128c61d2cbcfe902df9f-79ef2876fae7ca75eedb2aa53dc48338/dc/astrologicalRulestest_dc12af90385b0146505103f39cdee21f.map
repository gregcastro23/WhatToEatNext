{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/astrology/astrologicalRules.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/astrology/astrologicalRules.test.ts"],"sourcesContent":["/**\n * Unit Tests for Astrological Rule Utilities\n * \n * Tests the utility functions that support the custom ESLint rules\n * for astrological calculations.\n */\n\nimport {\n  validatePlanetaryPositions,\n  validateAstrologicalElementalProperties,\n  validateMathematicalConstants,\n  validateAstrologicalCalculation,\n  quickValidate,\n  VALIDATION_CONSTANTS\n} from '../astrologicalValidation';\n\nimport {\n  validateTransitDate,\n  getCurrentTransitSign,\n  validateRetrogradePhase,\n  validateAllTransitDates,\n  loadPlanetTransitDates,\n  validatePlanetaryPosition,\n  TRANSIT_CONSTANTS\n} from '../transitValidation';\n\nimport {\n  validateElementalProperties,\n  normalizeElementalProperties,\n  calculateElementalHarmony,\n  getDominantElement,\n  enhanceDominantElement,\n  createElementalProperties,\n  validateSelfReinforcement,\n  ELEMENTAL_CONSTANTS\n} from '../elementalValidation';\n\ndescribe('Astrological Validation Utilities', () => {\n  describe('Planetary Position Validation', () => {\n    test('should validate complete planetary positions object', () => {\n      const validPositions = {\n        sun: { sign: 'aries', degree: 8.5, exactLongitude: 8.5, isRetrograde: false },\n        moon: { sign: 'aries', degree: 1.57, exactLongitude: 1.57, isRetrograde: false },\n        mercury: { sign: 'aries', degree: 0.85, exactLongitude: 0.85, isRetrograde: true }\n      };\n\n      const result = validatePlanetaryPositions(validPositions);\n      expect(result.isValid).toBe(true);\n      expect(result.errors).toHaveLength(0);\n    });\n\n    test('should detect missing required planets', () => {\n      const incompletePositions = {\n        sun: { sign: 'aries', degree: 8.5, exactLongitude: 8.5, isRetrograde: false }\n        // Missing moon, mercury, venus, mars, jupiter, saturn\n      };\n\n      const result = validatePlanetaryPositions(incompletePositions);\n      expect(result.isValid).toBe(false);\n      expect(result.errors.length).toBeGreaterThan(0);\n      expect(result.errors.some(error => error.includes('moon'))).toBe(true);\n    });\n\n    test('should detect invalid planetary position structure', () => {\n      const invalidPositions = {\n        sun: { sign: 'aries', degree: 8.5 }, // Missing exactLongitude and isRetrograde\n        moon: { sign: 'aries', degree: 1.57, exactLongitude: 1.57, isRetrograde: false }\n      };\n\n      const result = validatePlanetaryPositions(invalidPositions);\n      expect(result.isValid).toBe(false);\n      expect(result.errors.some(error => error.includes('exactLongitude'))).toBe(true);\n    });\n\n    test('should validate degree ranges', () => {\n      const invalidDegreePositions = {\n        sun: { sign: 'aries', degree: 35, exactLongitude: 35, isRetrograde: false }, // Degree too high\n        moon: { sign: 'aries', degree: -5, exactLongitude: -5, isRetrograde: false } // Degree too low\n      };\n\n      const result = validatePlanetaryPositions(invalidDegreePositions, { strictMode: true });\n      expect(result.isValid).toBe(false);\n      expect(result.errors.some(error => error.includes('35'))).toBe(true);\n      expect(result.errors.some(error => error.includes('-5'))).toBe(true);\n    });\n\n    test('should auto-correct invalid values when requested', () => {\n      const invalidPositions = {\n        sun: { sign: 'aries', degree: 35, exactLongitude: 370, isRetrograde: false }\n      };\n\n      const result = validatePlanetaryPositions(invalidPositions, { autoCorrect: true });\n      expect(result.correctedData).toBeDefined();\n      expect(result.correctedData?.sun.degree).toBeLessThan(30);\n      expect(result.correctedData?.sun.exactLongitude).toBeLessThan(360);\n    });\n  });\n\n  describe('Elemental Properties Validation', () => {\n    test('should validate complete elemental properties', () => {\n      const validProperties = {\n        Fire: 0.7,\n        Water: 0.1,\n        Earth: 0.1,\n        Air: 0.1\n      };\n\n      expect(validateElementalProperties(validProperties)).toBe(true);\n    });\n\n    test('should reject missing elements', () => {\n      const incompleteProperties = {\n        Fire: 0.8,\n        Water: 0.2\n        // Missing Earth and Air\n      };\n\n      expect(validateElementalProperties(incompleteProperties)).toBe(false);\n    });\n\n    test('should reject invalid element values', () => {\n      const invalidProperties = {\n        Fire: 1.5, // Too high\n        Water: -0.1, // Too low\n        Earth: 0.3,\n        Air: 0.2\n      };\n\n      expect(validateElementalProperties(invalidProperties)).toBe(false);\n    });\n\n    test('should normalize elemental properties', () => {\n      const partialProperties = {\n        Fire: 0.8,\n        Water: 0.2\n      };\n\n      const normalized = normalizeElementalProperties(partialProperties);\n      expect(normalized.Fire).toBe(0.8);\n      expect(normalized.Water).toBe(0.2);\n      expect(normalized.Earth).toBe(0.25); // Default value\n      expect(normalized.Air).toBe(0.25); // Default value\n    });\n\n    test('should calculate elemental harmony correctly', () => {\n      const fireProperties = { Fire: 0.8, Water: 0.1, Earth: 0.05, Air: 0.05 };\n      const otherFireProperties = { Fire: 0.7, Water: 0.15, Earth: 0.1, Air: 0.05 };\n\n      const harmony = calculateElementalHarmony(fireProperties, otherFireProperties);\n      expect(harmony).toBeGreaterThanOrEqual(0.7); // Minimum compatibility\n      expect(harmony).toBeGreaterThan(0.8); // Should be high due to Fire-Fire compatibility\n    });\n\n    test('should identify dominant element', () => {\n      const fireProperties = { Fire: 0.8, Water: 0.1, Earth: 0.05, Air: 0.05 };\n      const dominant = getDominantElement(fireProperties);\n      expect(dominant).toBe('Fire');\n    });\n\n    test('should enhance dominant element', () => {\n      const properties = { Fire: 0.5, Water: 0.2, Earth: 0.2, Air: 0.1 };\n      const enhanced = enhanceDominantElement(properties);\n      expect(enhanced.Fire).toBeGreaterThan(properties.Fire);\n      expect(enhanced.Fire).toBeLessThanOrEqual(1.0);\n    });\n\n    test('should validate self-reinforcement patterns', () => {\n      const strongFire = { Fire: 0.7, Water: 0.1, Earth: 0.1, Air: 0.1 };\n      const weakElements = { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 };\n\n      expect(validateSelfReinforcement(strongFire)).toBe(true);\n      expect(validateSelfReinforcement(weakElements)).toBe(false);\n    });\n  });\n\n  describe('Transit Date Validation', () => {\n    const mockTransitDates = {\n      aries: { Start: '2024-03-20', End: '2024-04-19' },\n      taurus: { Start: '2024-04-20', End: '2024-05-20' },\n      RetrogradePhases: {\n        'phase1': { Start: '2024-04-01', End: '2024-04-15' }\n      }\n    };\n\n    test('should validate transit dates correctly', () => {\n      const ariesDate = new Date('2024-04-01');\n      const taurusDate = new Date('2024-05-01');\n      const invalidDate = new Date('2024-06-01');\n\n      expect(validateTransitDate('mars', ariesDate, 'aries', mockTransitDates)).toBe(true);\n      expect(validateTransitDate('mars', taurusDate, 'taurus', mockTransitDates)).toBe(true);\n      expect(validateTransitDate('mars', invalidDate, 'aries', mockTransitDates)).toBe(false);\n    });\n\n    test('should get current transit sign', () => {\n      const ariesDate = new Date('2024-04-01');\n      const taurusDate = new Date('2024-05-01');\n\n      expect(getCurrentTransitSign('mars', ariesDate, mockTransitDates)).toBe('aries');\n      expect(getCurrentTransitSign('mars', taurusDate, mockTransitDates)).toBe('taurus');\n    });\n\n    test('should validate retrograde phases', () => {\n      const retrogradeDate = new Date('2024-04-10');\n      const directDate = new Date('2024-03-25');\n\n      const retrogradeResult = validateRetrogradePhase('mercury', retrogradeDate, mockTransitDates);\n      const directResult = validateRetrogradePhase('mercury', directDate, mockTransitDates);\n\n      expect(retrogradeResult.isRetrograde).toBe(true);\n      expect(retrogradeResult.phase).toBe('phase1');\n      expect(directResult.isRetrograde).toBe(false);\n    });\n\n    test('should validate all transit dates for consistency', () => {\n      const validTransitDates = {\n        aries: { Start: '2024-03-20', End: '2024-04-19' },\n        taurus: { Start: '2024-04-20', End: '2024-05-20' }\n      };\n\n      const invalidTransitDates = {\n        aries: { Start: '2024-03-20', End: '2024-04-19' },\n        taurus: { Start: '2024-04-15', End: '2024-05-20' } // Overlaps with aries\n      };\n\n      const validResult = validateAllTransitDates(validTransitDates);\n      const invalidResult = validateAllTransitDates(invalidTransitDates);\n\n      expect(validResult.isValid).toBe(true);\n      expect(invalidResult.warnings.some(w => w.includes('Overlap'))).toBe(true);\n    });\n  });\n\n  describe('Mathematical Constants Validation', () => {\n    test('should validate expected constants', () => {\n      const validConstants = {\n        DEGREES_PER_SIGN: 30,\n        SIGNS_PER_CIRCLE: 12,\n        MAX_LONGITUDE: 360,\n        SELF_REINFORCEMENT_THRESHOLD: 0.3\n      };\n\n      const result = validateMathematicalConstants(validConstants);\n      expect(result.isValid).toBe(true);\n      expect(result.errors).toHaveLength(0);\n    });\n\n    test('should warn about unexpected constant values', () => {\n      const unexpectedConstants = {\n        DEGREES_PER_SIGN: 25, // Should be 30\n        SIGNS_PER_CIRCLE: 10  // Should be 12\n      };\n\n      const result = validateMathematicalConstants(unexpectedConstants);\n      expect(result.isValid).toBe(true); // Warnings don't make it invalid\n      expect(result.warnings.length).toBeGreaterThan(0);\n      expect(result.warnings.some(w => w.includes('DEGREES_PER_SIGN'))).toBe(true);\n    });\n\n    test('should error on invalid constant values', () => {\n      const invalidConstants = {\n        DEGREES_PER_SIGN: NaN,\n        MAX_LONGITUDE: Infinity\n      };\n\n      const result = validateMathematicalConstants(invalidConstants);\n      expect(result.isValid).toBe(false);\n      expect(result.errors.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Comprehensive Astrological Calculation Validation', () => {\n    test('should validate complete astrological calculation input', async () => {\n      const validInput = {\n        planetaryPositions: {\n          sun: { sign: 'aries', degree: 8.5, exactLongitude: 8.5, isRetrograde: false },\n          moon: { sign: 'aries', degree: 1.57, exactLongitude: 1.57, isRetrograde: false }\n        },\n        elementalProperties: {\n          Fire: 0.7,\n          Water: 0.1,\n          Earth: 0.1,\n          Air: 0.1\n        },\n        constants: {\n          DEGREES_PER_SIGN: 30,\n          MAX_LONGITUDE: 360\n        },\n        date: new Date('2024-04-01')\n      };\n\n      const result = await validateAstrologicalCalculation(validInput);\n      expect(result.isValid).toBe(true);\n    });\n\n    test('should collect all validation errors and warnings', async () => {\n      const invalidInput = {\n        planetaryPositions: {\n          sun: { sign: 'aries', degree: 8.5 } // Missing properties\n        },\n        elementalProperties: {\n          Fire: 1.5, // Invalid value\n          Water: 0.1\n          // Missing elements\n        },\n        constants: {\n          DEGREES_PER_SIGN: NaN // Invalid constant\n        }\n      };\n\n      const result = await validateAstrologicalCalculation(invalidInput);\n      expect(result.isValid).toBe(false);\n      expect(result.errors.length).toBeGreaterThan(0);\n      expect(result.warnings.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Quick Validation Functions', () => {\n    test('should provide quick validation for different data types', () => {\n      const validPlanetary = {\n        sun: { sign: 'aries', degree: 8.5, exactLongitude: 8.5, isRetrograde: false }\n      };\n      const validElemental = { Fire: 0.7, Water: 0.1, Earth: 0.1, Air: 0.1 };\n      const validConstants = { DEGREES_PER_SIGN: 30 };\n\n      expect(quickValidate(validPlanetary, 'planetary')).toBe(true);\n      expect(quickValidate(validElemental, 'elemental')).toBe(true);\n      expect(quickValidate(validConstants, 'constants')).toBe(true);\n\n      expect(quickValidate({}, 'planetary')).toBe(false);\n      expect(quickValidate({ Fire: 2.0 }, 'elemental')).toBe(false);\n      expect(quickValidate({ DEGREES_PER_SIGN: NaN }, 'constants')).toBe(false);\n    });\n  });\n\n  describe('Validation Constants', () => {\n    test('should export all necessary validation constants', () => {\n      expect(VALIDATION_CONSTANTS.DEGREES_PER_SIGN).toBe(30);\n      expect(VALIDATION_CONSTANTS.SIGNS_PER_CIRCLE).toBe(12);\n      expect(VALIDATION_CONSTANTS.MAX_LONGITUDE).toBe(360);\n      expect(VALIDATION_CONSTANTS.SELF_REINFORCEMENT_THRESHOLD).toBe(0.3);\n      expect(VALIDATION_CONSTANTS.HARMONY_THRESHOLD).toBe(0.7);\n      expect(VALIDATION_CONSTANTS.VALIDATION_TIMEOUT).toBe(5000);\n    });\n\n    test('should have consistent constants across modules', () => {\n      expect(ELEMENTAL_CONSTANTS.SELF_REINFORCEMENT_THRESHOLD).toBe(\n        VALIDATION_CONSTANTS.SELF_REINFORCEMENT_THRESHOLD\n      );\n      expect(TRANSIT_CONSTANTS.DEGREES_PER_SIGN).toBe(\n        VALIDATION_CONSTANTS.DEGREES_PER_SIGN\n      );\n    });\n  });\n\n  describe('Error Handling and Edge Cases', () => {\n    test('should handle null and undefined inputs gracefully', () => {\n      expect(quickValidate(null, 'planetary')).toBe(false);\n      expect(quickValidate(undefined, 'elemental')).toBe(false);\n      expect(validateElementalProperties(null)).toBe(false);\n      expect(validateElementalProperties(undefined)).toBe(false);\n    });\n\n    test('should handle malformed data structures', () => {\n      const malformedPlanetary = {\n        sun: 'not an object',\n        moon: { sign: 123, degree: 'invalid' }\n      };\n\n      const result = validatePlanetaryPositions(malformedPlanetary);\n      expect(result.isValid).toBe(false);\n      expect(result.errors.length).toBeGreaterThan(0);\n    });\n\n    test('should handle circular references safely', () => {\n      const circular: any = { Fire: 0.5 };\n      circular.self = circular;\n\n      // Should not throw an error or cause infinite loops\n      expect(() => validateElementalProperties(circular)).not.toThrow();\n    });\n\n    test('should validate performance with large datasets', () => {\n      const largePlanetaryData = {};\n      for (let i = 0; i < 1000; i++) {\n        (largePlanetaryData as any)[`planet${i}`] = {\n          sign: 'aries',\n          degree: i % 30,\n          exactLongitude: i % 360,\n          isRetrograde: i % 2 === 0\n        };\n      }\n\n      const startTime = Date.now();\n      const result = validatePlanetaryPositions(largePlanetaryData);\n      const endTime = Date.now();\n\n      expect(endTime - startTime).toBeLessThan(1000); // Should complete within 1 second\n      expect(result).toBeDefined();\n    });\n  });\n});"],"version":3}