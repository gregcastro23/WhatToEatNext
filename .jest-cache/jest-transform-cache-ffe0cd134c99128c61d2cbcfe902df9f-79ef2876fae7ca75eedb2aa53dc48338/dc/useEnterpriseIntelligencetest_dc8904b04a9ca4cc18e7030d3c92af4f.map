{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/hooks/__tests__/useEnterpriseIntelligence.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/hooks/__tests__/useEnterpriseIntelligence.test.ts"],"sourcesContent":["/**\n * Enterprise Intelligence Hook Tests\n * Main Page Restoration - Task 3.8 Implementation\n */\n\nimport { renderHook, act } from '@testing-library/react';\nimport { useEnterpriseIntelligence } from '../useEnterpriseIntelligence';\nimport type { ElementalProperties, ZodiacSign, LunarPhase } from '@/types/alchemy';\n\n// Mock the logger to avoid initialization issues in tests\njest.mock('@/utils/logger', () => ({\n  logger: {\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n    debug: jest.fn()\n  }\n}));\n\ndescribe('useEnterpriseIntelligence', () => {\n  const mockRecipeData = {\n    id: 'test-recipe',\n    name: 'Test Recipe',\n    elementalProperties: {\n      Fire: 0.3,\n      Water: 0.2,\n      Earth: 0.3,\n      Air: 0.2\n    }\n  };\n\n  const mockIngredientData = {\n    id: 'test-ingredients',\n    ingredients: [\n      {\n        name: 'Test Ingredient',\n        category: 'vegetables',\n        elementalProperties: {\n          Fire: 0.2,\n          Water: 0.3,\n          Earth: 0.3,\n          Air: 0.2\n        }\n      }\n    ]\n  };\n\n  const mockAstrologicalContext = {\n    zodiacSign: 'aries' as ZodiacSign,\n    lunarPhase: 'new moon' as LunarPhase,\n    elementalProperties: {\n      Fire: 0.4,\n      Water: 0.2,\n      Earth: 0.2,\n      Air: 0.2\n    } as ElementalProperties,\n    planetaryPositions: {}\n  };\n\n  it('should initialize with default state', () => {\n    const { result } = renderHook(() => useEnterpriseIntelligence());\n\n    expect(result.current.state.analysis).toBeNull();\n    expect(result.current.state.isAnalyzing).toBe(false);\n    expect(result.current.state.error).toBeNull();\n    expect(result.current.state.lastAnalyzed).toBeNull();\n    expect(result.current.isHealthy).toBe(false);\n    expect(result.current.needsAttention).toBe(true);\n  });\n\n  it('should perform analysis when requested', async () => {\n    const { result } = renderHook(() => useEnterpriseIntelligence());\n\n    await act(async () => {\n      const analysis = await result.current.actions.performAnalysis(\n        mockRecipeData,\n        mockIngredientData,\n        mockAstrologicalContext\n      );\n      expect(analysis).toBeDefined();\n    });\n\n    expect(result.current.state.analysis).toBeDefined();\n    expect(result.current.state.isAnalyzing).toBe(false);\n    expect(result.current.state.error).toBeNull();\n    expect(result.current.state.lastAnalyzed).toBeDefined();\n  });\n\n  it('should provide recommendations after analysis', async () => {\n    const { result } = renderHook(() => useEnterpriseIntelligence());\n\n    await act(async () => {\n      await result.current.actions.performAnalysis(\n        mockRecipeData,\n        mockIngredientData,\n        mockAstrologicalContext\n      );\n    });\n\n    expect(result.current.recommendations).toBeDefined();\n    expect(result.current.recommendations.recipe).toBeDefined();\n    expect(result.current.recommendations.ingredient).toBeDefined();\n    expect(result.current.recommendations.validation).toBeDefined();\n    expect(result.current.recommendations.safety).toBeDefined();\n    expect(result.current.recommendations.optimization).toBeDefined();\n  });\n\n  it('should provide system health information', async () => {\n    const { result } = renderHook(() => useEnterpriseIntelligence());\n\n    await act(async () => {\n      await result.current.actions.performAnalysis(\n        mockRecipeData,\n        mockIngredientData,\n        mockAstrologicalContext\n      );\n    });\n\n    expect(result.current.systemHealth).toBeDefined();\n    expect(result.current.systemHealth.overall).toMatch(/excellent|good|fair|poor/);\n    expect(result.current.systemHealth.score).toBeGreaterThanOrEqual(0);\n    expect(result.current.systemHealth.score).toBeLessThanOrEqual(1);\n    expect(Array.isArray(result.current.systemHealth.issues)).toBe(true);\n    expect(Array.isArray(result.current.systemHealth.warnings)).toBe(true);\n  });\n\n  it('should handle configuration updates', () => {\n    const { result } = renderHook(() => useEnterpriseIntelligence());\n\n    act(() => {\n      result.current.actions.updateConfig({\n        enableRecipeIntelligence: false,\n        logLevel: 'error'\n      });\n    });\n\n    // Configuration should be updated (we can't easily test this without exposing internal state)\n    expect(result.current.actions.updateConfig).toBeDefined();\n  });\n\n  it('should handle cache operations', () => {\n    const { result } = renderHook(() => useEnterpriseIntelligence());\n\n    act(() => {\n      result.current.actions.clearCache();\n    });\n\n    act(() => {\n      result.current.actions.resetMetrics();\n    });\n\n    expect(result.current.state.performanceMetrics.analysisCount).toBe(0);\n  });\n\n  it('should handle analysis clearing', async () => {\n    const { result } = renderHook(() => useEnterpriseIntelligence());\n\n    // First perform an analysis\n    await act(async () => {\n      await result.current.actions.performAnalysis(\n        mockRecipeData,\n        mockIngredientData,\n        mockAstrologicalContext\n      );\n    });\n\n    expect(result.current.state.analysis).toBeDefined();\n\n    // Then clear it\n    act(() => {\n      result.current.actions.clearAnalysis();\n    });\n\n    expect(result.current.state.analysis).toBeNull();\n    expect(result.current.state.error).toBeNull();\n    expect(result.current.state.lastAnalyzed).toBeNull();\n  });\n\n  it('should handle errors gracefully', async () => {\n    const { result } = renderHook(() => useEnterpriseIntelligence());\n\n    // Test with invalid data that might cause errors\n    await act(async () => {\n      const analysis = await result.current.actions.performAnalysis(\n        null,\n        null,\n        mockAstrologicalContext\n      );\n      // Should still return an analysis even with null data\n      expect(analysis).toBeDefined();\n    });\n\n    // Should not have an error state since the service handles null data gracefully\n    expect(result.current.state.error).toBeNull();\n  });\n});"],"version":3}