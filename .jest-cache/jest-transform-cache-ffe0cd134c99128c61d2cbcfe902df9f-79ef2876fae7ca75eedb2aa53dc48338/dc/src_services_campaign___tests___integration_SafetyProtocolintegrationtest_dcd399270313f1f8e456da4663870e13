44df23758b16531fd58a9ad7b6755a9f
"use strict";
/**
 * Integration Tests for Safety Protocol with Corruption Simulation
 * Perfect Codebase Campaign - Safety Protocol Integration Testing
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock dependencies
jest.mock('child_process');
jest.mock('fs');
const child_process_1 = require("child_process");
const fs = __importStar(require("fs"));
const campaign_1 = require("../../../../types/campaign");
const CampaignController_1 = require("../../CampaignController");
const ProgressTracker_1 = require("../../ProgressTracker");
const SafetyProtocol_1 = require("../../SafetyProtocol");
const mockExecSync = child_process_1.execSync;
const mockFs = fs;
describe('Safety Protocol Integration Tests', () => {
    let safetyProtocol;
    let campaignController;
    let progressTracker;
    let mockSafetySettings;
    let mockConfig;
    beforeEach(() => {
        mockSafetySettings = {
            maxFilesPerBatch: 25,
            buildValidationFrequency: 5,
            testValidationFrequency: 10,
            corruptionDetectionEnabled: true,
            automaticRollbackEnabled: true,
            stashRetentionDays: 7,
        };
        mockConfig = {
            phases: [
                {
                    id: 'test-phase',
                    name: 'Test Phase',
                    description: 'Test phase for safety protocol integration',
                    tools: [
                        {
                            scriptPath: 'scripts/test-script.js',
                            parameters: { maxFile, s: 10, autoFix: true },
                            batchSize: 10,
                            safetyLevel: campaign_1.SafetyLevel.HIGH,
                        },
                    ],
                    successCriteria: { typeScriptError, s: 0 },
                    safetyCheckpoints: [],
                },
            ],
            safetySettings: mockSafetySettings,
            progressTargets: { typeScriptError, s: 0, lintingWarnings: 0, buildTime: 10, enterpriseSystems: 200 },
            toolConfiguration: {
                enhancedErrorFixer: 'scripts/typescript-fixes/fix-typescript-errors-enhanced-v3.js',
                explicitAnyFixer: 'scripts/typescript-fixes/fix-explicit-any-systematic.js',
                unusedVariablesFixer: 'scripts/typescript-fixes/fix-unused-variables-enhanced.js',
                consoleStatementFixer: 'scripts/lint-fixes/fix-console-statements-only.js',
            },
        };
        safetyProtocol = new SafetyProtocol_1.SafetyProtocol(mockSafetySettings);
        campaignController = new CampaignController_1.CampaignController(mockConfig);
        progressTracker = new ProgressTracker_1.ProgressTracker();
        // Reset mocks
        jest.clearAllMocks();
        // Default mock implementations
        mockExecSync.mockReturnValue('');
        mockFs.existsSync.mockReturnValue(true);
        mockFs.readFileSync.mockReturnValue('valid content');
        mockFs.writeFileSync.mockImplementation(() => { });
    });
    describe('Corruption Detection and Recovery', () => {
        describe('Git Merge Conflict Simulation', () => {
            it('should detect and handle git merge conflicts', async () => {
                const corruptedContent = `;
          function test() : any {
          <<<<<<< HEAD;
            return 'version 1';
          =======
            return 'version 2';
          >>>>>>> branch
          }
        `;
                mockFs.readFileSync.mockReturnValue(corruptedContent);
                const report = await safetyProtocol.detectCorruption(['test-file.ts']);
                expect(report.detectedFiles).toContain('test-file.ts');
                expect(report.severity).toBe(campaign_1.CorruptionSeverity.CRITICAL);
                expect(report.recommendedAction).toBe(campaign_1.RecoveryAction.EMERGENCY_RESTORE);
                expect(report.corruptionPatterns.some(p => p.description.includes('Git merge conflict'))).toBe(true);
            });
            it('should trigger emergency rollback for critical corruption', async () => {
                const corruptedContent = '<<<<<<< HEAD\nconflict\n=======\nother\n>>>>>>> branch';
                mockFs.readFileSync.mockReturnValue(corruptedContent);
                // Create a stash first
                mockExecSync.mockImplementation(command => {
                    const cmd = command.toString();
                    if (cmd.includes('git stash push'))
                        return '';
                    if (cmd.includes('git stash list'))
                        return 'stash@{0}: emergency-stash';
                    if (cmd.includes('git stash apply'))
                        return '';
                    if (cmd.includes('git status --porcelain'))
                        return '';
                    if (cmd.includes('git branch --show-current'))
                        return 'main';
                    return '';
                });
                const _stashId = await safetyProtocol.createStash('Emergency stash');
                const report = await safetyProtocol.detectCorruption(['test-file.ts']);
                if (report.severity === campaign_1.CorruptionSeverity.CRITICAL) {
                    await safetyProtocol.emergencyRollback();
                }
                expect(mockExecSync).toHaveBeenCalledWith(expect.stringContaining('git stash apply'), expect.any(Object));
            });
        });
        describe('Import/Export Corruption Simulation', () => {
            it('should detect corrupted import statements', async () => {
                const corruptedContent = `;
          import @/types from './types';
          import @/services from './services';
          import { } from './empty';
          import something from 'undefined';
        `;
                mockFs.readFileSync.mockReturnValue(corruptedContent);
                const report = await safetyProtocol.detectImportExportCorruption(['test-file.ts']);
                expect(report.detectedFiles).toContain('test-file.ts');
                expect(report.severity).toBe(campaign_1.CorruptionSeverity.HIGH);
                expect(report.corruptionPatterns.length).toBeGreaterThan(0);
            });
            it('should detect double commas in destructuring', async () => {
                const corruptedContent = `;
import type type Something, { ab } from './module';
          export { x,, y };
        `;
                mockFs.readFileSync.mockReturnValue(corruptedContent);
                const report = await safetyProtocol.detectImportExportCorruption(['test-file.ts']);
                expect(report.detectedFiles).toContain('test-file.ts');
                expect(report.severity).toBe(campaign_1.CorruptionSeverity.HIGH);
                expect(report.corruptionPatterns.some(p => p.description.includes('Double comma'))).toBe(true);
            });
            it('should detect duplicate keywords in imports', async () => {
                const corruptedContent = `;
          export default default value;
        `;
                mockFs.readFileSync.mockReturnValue(corruptedContent);
                const report = await safetyProtocol.detectImportExportCorruption(['test-file.ts']);
                expect(report.detectedFiles).toContain('test-file.ts');
                expect(report.severity).toBe(campaign_1.CorruptionSeverity.HIGH);
            });
        });
        describe('Syntax Corruption Simulation', () => {
            it('should detect unbalanced brackets', async () => {
                const corruptedContent = `;
          function test() : any {
            if (condition != null) {
              return 'missing closing brace';
        `;
                mockFs.readFileSync.mockReturnValue(corruptedContent);
                const report = await safetyProtocol.detectCorruption(['test-file.ts']);
                expect(report.detectedFiles).toContain('test-file.ts');
                expect(report.severity).toBe(campaign_1.CorruptionSeverity.HIGH);
            });
            it('should detect incomplete statements', async () => {
                const corruptedContent = `;
          export
          import
          function;
          const
        `;
                mockFs.readFileSync.mockReturnValue(corruptedContent);
                const report = await safetyProtocol.detectCorruption(['test-file.ts']);
                expect(report.detectedFiles).toContain('test-file.ts');
                expect(report.severity).toBe(campaign_1.CorruptionSeverity.HIGH);
            });
        });
        describe('TypeScript Syntax Validation', () => {
            it('should validate syntax using TypeScript compiler', async () => {
                mockExecSync.mockReturnValue('No errors found');
                const report = await safetyProtocol.validateSyntaxWithTypeScript(['test-file.ts']);
                expect(mockExecSync).toHaveBeenCalledWith('yarn tsc --noEmit --skipLibCheck 2>&1', expect.any(Object));
                expect(report.severity).toBe(campaign_1.CorruptionSeverity.LOW);
            });
            it('should detect TypeScript syntax errors', async () => {
                mockExecSync.mockReturnValue(`
          test-file.ts(105): error TS1005: Unexpected token 'function'
          test-file.ts(1510): error TS1109: Expression expected
        `);
                const report = await safetyProtocol.validateSyntaxWithTypeScript(['test-file.ts']);
                expect(report.detectedFiles).toContain('test-file.ts');
                expect(report.severity).toBe(campaign_1.CorruptionSeverity.HIGH);
                expect(report.corruptionPatterns.some(p => p.pattern === 'TYPESCRIPT_SYNTAX_ERROR')).toBe(true);
            });
            it('should handle TypeScript compilation failures', async () => {
                mockExecSync.mockImplementation(() => {
                    const error = new Error('TypeScript compilation failed');
                    error.stdout = 'Unexpected token at line 5';
                    throw error;
                });
                const report = await safetyProtocol.validateSyntaxWithTypeScript(['test-file.ts']);
                expect(report.severity).toBe(campaign_1.CorruptionSeverity.HIGH);
                expect(report.corruptionPatterns.some(p => p.pattern === 'TYPESCRIPT_COMPILATION_ERROR')).toBe(true);
            });
        });
    });
    describe('Real-time Monitoring Integration', () => {
        beforeEach(() => {
            jest.useFakeTimers();
        });
        afterEach(() => {
            jest.useRealTimers();
        });
        it('should monitor files in real-time during script execution', async () => {
            const testFiles = ['file1.ts', 'file2.ts'];
            jest.spyOn(safetyProtocol, 'detectCorruption').mockResolvedValue({
                detectedFiles: [],
                corruptionPatterns: [],
                severity: campaign_1.CorruptionSeverity.LOW,
                recommendedAction: campaign_1.RecoveryAction.CONTINUE,
            });
            safetyProtocol.startRealTimeMonitoring(testFiles, 1000);
            // Fast-forward time to trigger monitoring
            jest.advanceTimersByTime(1000);
            expect(safetyProtocol.detectCorruption).toHaveBeenCalledWith(testFiles);
            safetyProtocol.stopRealTimeMonitoring();
        });
        it('should trigger emergency rollback on critical corruption during monitoring', async () => {
            const testFiles = ['file1.ts'];
            jest.spyOn(safetyProtocol, 'detectCorruption').mockResolvedValue({
                detectedFiles: ['file1.ts'],
                corruptionPatterns: [
                    {
                        pattern: 'CRITICAL_CORRUPTION',
                        description: 'Critical corruption detected',
                        files: ['file1.ts'],
                    },
                ],
                severity: campaign_1.CorruptionSeverity.CRITICAL,
                recommendedAction: campaign_1.RecoveryAction.EMERGENCY_RESTORE,
            });
            jest.spyOn(safetyProtocol, 'emergencyRollback').mockResolvedValue();
            safetyProtocol.startRealTimeMonitoring(testFiles, 1000);
            // Fast-forward time to trigger monitoring
            jest.advanceTimersByTime(1000);
            // Wait for async operations
            await new Promise(resolve => setTimeout(resolve, 0));
            expect(safetyProtocol.emergencyRollback).toHaveBeenCalled();
        });
        it('should record safety events during real-time monitoring', async () => {
            const testFiles = ['file1.ts'];
            jest.spyOn(safetyProtocol, 'detectCorruption').mockResolvedValue({
                detectedFiles: ['file1.ts'],
                corruptionPatterns: [],
                severity: campaign_1.CorruptionSeverity.MEDIUM,
                recommendedAction: campaign_1.RecoveryAction.RETRY,
            });
            safetyProtocol.startRealTimeMonitoring(testFiles, 1000);
            // Fast-forward time to trigger monitoring
            jest.advanceTimersByTime(1000);
            // Wait for async operations
            await new Promise(resolve => setTimeout(resolve, 0));
            const events = safetyProtocol.getSafetyEvents();
            expect(events.some(e => e.type === campaign_1.SafetyEventType.CORRUPTION_DETECTED)).toBe(true);
            safetyProtocol.stopRealTimeMonitoring();
        });
    });
    describe('Git Operations Integration', () => {
        beforeEach(() => {
            mockExecSync.mockImplementation(command => {
                const cmd = command.toString();
                if (cmd.includes('git status --porcelain'))
                    return '';
                if (cmd.includes('git stash push'))
                    return '';
                if (cmd.includes('git stash list'))
                    return 'stash@{0}: test-stash';
                if (cmd.includes('git stash apply'))
                    return '';
                if (cmd.includes('git branch --show-current'))
                    return 'main';
                return '';
            });
        });
        it('should create and manage git stashes throughout campaign', async () => {
            // Create multiple stashes for different phases
            const stash1 = await safetyProtocol.createStash('Phase 1 checkpoint', 'phase1');
            const stash2 = await safetyProtocol.createStash('Phase 2 checkpoint', 'phase2');
            expect(stash1).toMatch(/^campaign-phase1-\d+-/);
            expect(stash2).toMatch(/^campaign-phase2-\d+-/);
            const stashes = await safetyProtocol.listStashes();
            expect(stashes.length).toBe(2);
        });
        it('should apply stashes by phase for targeted rollbacks', async () => {
            // Create stashes for different phases
            await safetyProtocol.createStash('Phase 1 checkpoint', 'phase1');
            await safetyProtocol.createStash('Phase 2 checkpoint', 'phase2');
            await safetyProtocol.createStash('Another Phase 1 checkpoint', 'phase1');
            // Apply latest Phase 1 stash
            const appliedStashId = await safetyProtocol.applyStashByPhase('phase1');
            expect(appliedStashId).toMatch(/^campaign-phase1-\d+-/);
            expect(mockExecSync).toHaveBeenCalledWith(expect.stringContaining('git stash apply'), expect.any(Object));
        });
        it('should validate git state before operations', async () => {
            const validation = await safetyProtocol.validateGitState();
            expect(validation.success).toBe(true);
            expect(mockExecSync).toHaveBeenCalledWith('git status --porcelain', expect.any(Object));
        });
        it('should handle git operation failures gracefully', async () => {
            mockExecSync.mockImplementation(command => {
                if (command.toString().includes('git stash push')) {
                    throw new Error('Git stash failed');
                }
                return '';
            });
            await expect(safetyProtocol.createStash('Test stash')).rejects.toThrow('Failed to create git stash: Git stash failed');
            const events = safetyProtocol.getSafetyEvents();
            expect(events.some(e => e.type === campaign_1.SafetyEventType.EMERGENCY_RECOVERY)).toBe(true);
        });
    });
    describe('Stash Management and Cleanup', () => {
        beforeEach(() => {
            mockExecSync.mockImplementation(command => {
                const cmd = command.toString();
                if (cmd.includes('git status --porcelain'))
                    return '';
                if (cmd.includes('git stash push'))
                    return '';
                if (cmd.includes('git stash list'))
                    return 'stash@{0}: test-stash';
                if (cmd.includes('git stash drop'))
                    return '';
                if (cmd.includes('git branch --show-current'))
                    return 'main';
                return '';
            });
        });
        it('should cleanup old stashes based on retention policy', async () => {
            // Create old stashes
            const oldDate = new Date();
            oldDate.setDate(oldDate.getDate() - 10); // 10 days old
            const recentDate = new Date();
            recentDate.setDate(recentDate.getDate() - 3); // 3 days old
            // Manually add stashes to simulate age
            const oldStash = {
                id: 'old-stash',
                description: 'Old stash',
                timestamp: oldDate,
                branch: 'main',
                ref: 'stash@{1}',
            };
            const recentStash = {
                id: 'recent-stash',
                description: 'Recent stash',
                timestamp: recentDate,
                branch: 'main',
                ref: 'stash@{0}',
            };
            safetyProtocol.stashes.set('old-stash', oldStash);
            safetyProtocol.stashes.set('recent-stash', recentStash);
            await safetyProtocol.cleanupOldStashes();
            const stashes = await safetyProtocol.listStashes();
            expect(stashes.some(s => s.id === 'old-stash')).toBe(false);
            expect(stashes.some(s => s.id === 'recent-stash')).toBe(true);
        });
        it('should generate stash statistics for reporting', async () => {
            // Create stashes for different phases
            await safetyProtocol.createStash('Phase 1 checkpoint', 'phase1');
            await safetyProtocol.createStash('Phase 2 checkpoint', 'phase2');
            await safetyProtocol.createStash('Another Phase 1 checkpoint', 'phase1');
            const stats = safetyProtocol.getStashStatistics();
            expect(stats.total).toBe(3);
            expect(stats.byPhase.phase1).toBe(2);
            expect(stats.byPhase.phase2).toBe(1);
            expect(stats.oldestStash).toBeInstanceOf(Date);
            expect(stats.newestStash).toBeInstanceOf(Date);
        });
    });
    describe('Integration with Campaign Controller', () => {
        it('should integrate safety protocols with phase execution', async () => {
            const phase = mockConfig.phases[0];
            // Mock successful execution with safety protocols
            jest.spyOn(campaignController, 'createSafetyCheckpoint').mockResolvedValue('checkpoint-1');
            jest.spyOn(campaignController, 'getCurrentMetrics').mockResolvedValue({
                typeScriptErrors: { current: 0, target: 0, reduction: 86, percentage: 100 },
                lintingWarnings: { current: 4506, target: 0, reduction: 0, percentage: 0 },
                buildPerformance: { currentTim, e: 8.5, targetTime: 10, cacheHitRate: 0.8, memoryUsage: 45 },
                enterpriseSystems: { current: 0, target: 200, transformedExports: 0 },
            });
            const result = await campaignController.executePhase(phase);
            expect(result.success).toBe(true);
            expect(result.safetyEvents.length).toBeGreaterThan(0);
            expect(campaignController['createSafetyCheckpoint']).toHaveBeenCalled();
        });
        it('should handle rollback scenarios during phase execution', async () => {
            const phase = mockConfig.phases[0];
            // Mock validation failure that triggers rollback
            jest.spyOn(campaignController, 'validatePhaseProgress').mockResolvedValue({
                success: false,
                errors: ['Corruption detected'],
                warnings: [],
            });
            jest.spyOn(campaignController, 'rollbackToCheckpoint').mockResolvedValue();
            await expect(campaignController.executePhase(phase)).rejects.toThrow('Tool execution failed: Corruption detected');
            expect(campaignController.rollbackToCheckpoint).toHaveBeenCalled();
        });
    });
    describe('File System Integration', () => {
        it('should handle file read errors during corruption detection', async () => {
            mockFs.readFileSync.mockImplementation(() => {
                throw new Error('Permission denied');
            });
            const report = await safetyProtocol.detectCorruption(['protected-file.ts']);
            expect(report.detectedFiles).toContain('protected-file.ts');
            expect(report.severity).toBe(campaign_1.CorruptionSeverity.HIGH);
            expect(report.corruptionPatterns.some(p => p.pattern === 'FILE_READ_ERROR')).toBe(true);
        });
        it('should skip non-existent files gracefully', async () => {
            mockFs.existsSync.mockReturnValue(false);
            const report = await safetyProtocol.detectCorruption(['non-existent.ts']);
            expect(report.detectedFiles).toEqual([]);
            expect(report.severity).toBe(campaign_1.CorruptionSeverity.LOW);
        });
        it('should handle mixed file types appropriately', async () => {
            const files = ['script.ts', 'style.css', 'config.json', 'readme.md'];
            mockFs.existsSync.mockReturnValue(true);
            mockFs.readFileSync.mockReturnValue('valid content');
            const report = await safetyProtocol.detectImportExportCorruption(files);
            // Should only process TypeScript/JavaScript files
            expect(report.detectedFiles).toEqual([]);
            expect(report.severity).toBe(campaign_1.CorruptionSeverity.LOW);
        });
    });
    describe('Safety Event Tracking', () => {
        it('should track safety events throughout integration scenarios', async () => {
            // Create stash
            await safetyProtocol.createStash('Test stash');
            // Detect corruption
            mockFs.readFileSync.mockReturnValue('<<<<<<< HEAD\nconflict\n>>>>>>> branch');
            await safetyProtocol.detectCorruption(['test-file.ts']);
            // Apply stash
            await safetyProtocol.applyStash((await safetyProtocol.listStashes())[0].id);
            const events = safetyProtocol.getSafetyEvents();
            expect(events.some(e => e.type === campaign_1.SafetyEventType.CHECKPOINT_CREATED)).toBe(true);
            expect(events.some(e => e.type === campaign_1.SafetyEventType.CORRUPTION_DETECTED)).toBe(true);
            expect(events.some(e => e.type === campaign_1.SafetyEventType.ROLLBACK_TRIGGERED)).toBe(true);
        });
        it('should maintain event history with proper severity levels', async () => {
            // Generate events of different severities
            await safetyProtocol.createStash('Info event'); // INFO
            mockFs.readFileSync.mockReturnValue('<<<<<<< HEAD\nconflict\n>>>>>>> branch');
            await safetyProtocol.detectCorruption(['test-file.ts']); // CRITICAL
            const events = safetyProtocol.getSafetyEvents();
            const severities = events.map(e => e.severity);
            expect(severities).toContain(campaign_1.SafetyEventSeverity.INFO);
            expect(severities).toContain(campaign_1.SafetyEventSeverity.CRITICAL);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,