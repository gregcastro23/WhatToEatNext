{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/calculations/seasonalCalculations.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/calculations/seasonalCalculations.ts"],"sourcesContent":["import type { ElementalProperties, Recipe, Season, ZodiacSign } from '@/types/alchemy';\nimport { SEASONAL_MODIFIERS} from '@/constants/seasonalModifiers';\nimport { getZodiacSignForDate } from '@/data/zodiacSeasons';\n\nexport interface SeasonalEffectiveness {\n    score: number;\n    rating: string;\n    breakdown: {\n        elementalAlignment: number;\n        ingredientSuitability: number;\n        seasonalBonus: number;\n    };\n    elementalBreakdown?: Record<string, number>;\n}\n\n/**\n * Calculates how effective a recipe is for a given season or zodiac sign\n */\nexport function calculateSeasonalEffectiveness(recipe: Recipe, season: string): SeasonalEffectiveness {\n    let totalScore = 0;\n    const breakdown = {\n        elementalAlignment: 0,\n        ingredientSuitability: 0,\n        seasonalBonus: 0\n    };\n\n    // Normalize season to lowercase for consistent lookup\n    const seasonLower = season.toLowerCase();\n\n    // 1. Calculate Elemental Alignment (50% of total)\n    const elementalScore = Object.entries(recipe.elementalProperties || {}).reduce((score, [element, value]) => {\n        // Get modifier from SEASONAL_MODIFIERS using lowercase season\n        // Using proper type access with fallback\n        const seasonModifiers = SEASONAL_MODIFIERS[seasonLower] || {};\n        const seasonalModifier = seasonModifiers[element as keyof ElementalProperties] || 0.25;\n        return score + (value * seasonalModifier);\n    }, 0);\n    breakdown.elementalAlignment = elementalScore * 50;\n    totalScore += breakdown.elementalAlignment;\n\n    // 2. Calculate Ingredient Seasonality (30% of total)\n    if (recipe.ingredients?.length) {\n        // Count ingredients that have this season in their seasonality array\n        let seasonalCount = 0;\n        for (const ingredient of recipe.ingredients) {\n            if (Array.isArray(ingredient.seasonality)) {\n                const lowerSeasons = ingredient.seasonality.map((s: string) => \n                    s.toLowerCase());\n                if (lowerSeasons.includes(seasonLower) || lowerSeasons.includes('all')) {\n                    seasonalCount++;\n                }\n            }\n        }\n        \n        const ingredientScore = (seasonalCount / recipe.ingredients.length) * 30;\n        breakdown.ingredientSuitability = ingredientScore;\n        totalScore += ingredientScore;\n    }\n\n    // 3. Calculate Direct Season Match (20% of total)\n    if (recipe.season) {\n        const recipeSeasons = Array.isArray(recipe.season) ? recipe.season : [recipe.season];\n        const recipeSeasonLower = recipeSeasons.map((s: string) => s.toLowerCase());\n            \n        if (recipeSeasonLower.includes(seasonLower)) {\n            breakdown.seasonalBonus = 20;\n            totalScore += 20;\n        }\n    }\n\n    // Normalize score to 0-100 range\n    const normalizedScore = Math.round(Math.max(0, Math.min(100, totalScore)));\n\n    // Determine rating based on score\n    let rating = 'Poor';\n    if (normalizedScore >= 80) rating = 'Excellent';\n    else if (normalizedScore >= 60) rating = 'Good';\n    else if (normalizedScore >= 40) rating = 'Average';\n    else if (normalizedScore >= 20) rating = 'Below Average';\n    \n    return {\n        score: normalizedScore,\n        rating,\n        breakdown\n    };\n}\n\nexport function calculateSeasonalElements(\n    baseElements: ElementalProperties,\n    season: string\n): ElementalProperties {\n    const normalizedSeason = season.toLowerCase();\n    const modifier = SEASONAL_MODIFIERS[normalizedSeason] || {};\n    \n    return Object.fromEntries(\n        Object.entries(baseElements).map(([element, value]) => {\n            const adjusted = value + (modifier[element as keyof ElementalProperties] || 0);\n            return [element, Math.max(0, Math.min(1, adjusted))];\n        })\n    ) as ElementalProperties;\n}\n\nexport function calculateSeasonalScores(\n  recipeElements: ElementalProperties,\n  zodiacSign?: string\n): {\n  seasonalScore: number;\n  astrologicalInfluence: number;\n} {\n  // Get current zodiac sign if none provided\n  const currentZodiac = zodiacSign?.toLowerCase() || getCurrentZodiacSeason().toLowerCase();\n  \n  // Use the zodiac sign directly with our new SEASONAL_MODIFIERS\n  const seasonMultiplier = 1.2; // Fixed multiplier\n  \n  // Calculate seasonal alignment - direct check with current zodiac\n  const isAlignedWithSeason = currentZodiac === zodiacSign?.toLowerCase();\n  \n  const seasonalScore = isAlignedWithSeason ? 80 : 50;\n  const astrologicalInfluence = isAlignedWithSeason ? 1.2 : 1.0;\n  \n  return {\n    seasonalScore,\n    astrologicalInfluence\n  };\n}\n\n// Helper function to get current season as a zodiac sign\nfunction getCurrentZodiacSeason(): ZodiacSign {\n  return getZodiacSignForDate(new Date());\n}\n\n// For backward compatibility\nfunction _getCurrentSeason(): Season {\n  const zodiacSign = getCurrentZodiacSeason();\n  // Map zodiac sign to a season\n  if (['aries', 'taurus', 'gemini'].includes(zodiacSign)) {\n    return 'spring';\n  } else if (['cancer', 'leo', 'virgo'].includes(zodiacSign)) {\n    return 'summer';\n  } else if (['libra', 'scorpio', 'sagittarius'].includes(zodiacSign)) {\n    return 'autumn';\n  } else {\n    return 'winter';\n  }\n}\n\nexport default {\n    calculateSeasonalEffectiveness,\n    SEASONAL_MODIFIERS\n};"],"version":3}