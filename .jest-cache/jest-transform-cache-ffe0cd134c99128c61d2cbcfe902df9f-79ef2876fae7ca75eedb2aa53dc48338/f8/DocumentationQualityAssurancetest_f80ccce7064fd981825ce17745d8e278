b3c4df19a8db3bd71ccf1e83048393af
"use strict";
/**
 * Tests for DocumentationQualityAssurance
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock dependencies
jest.mock('fs/promises');
jest.mock('glob');
const fs = __importStar(require("fs/promises"));
const glob_1 = require("glob");
const DocumentationQualityAssurance_1 = require("../DocumentationQualityAssurance");
const types_1 = require("../types");
const mockFs = fs;
const mockGlob = glob_1.glob;
describe('DocumentationQualityAssurance', () => {
    let qas;
    let mockConfig;
    beforeEach(() => {
        mockConfig = {
            sourceDirectories: ['src'],
            excludePatterns: ['**/*.test.ts'],
            minimumCommentLength: 20,
            requiredKeywords: ['intentionally', 'deliberately'],
            qualityThresholds: {
                excellent: 90,
                good: 70,
                fair: 50
            }
        };
        qas = new DocumentationQualityAssurance_1.DocumentationQualityAssurance(mockConfig);
        // Reset mocks
        jest.clearAllMocks();
    });
    describe('performQualityAssurance', () => {
        it('should perform comprehensive quality assurance scan', async () => {
            const mockFiles = ['src/service.ts', 'src/component.tsx'];
            mockGlob.mockResolvedValue(mockFiles);
            const fileContent = [
                'export class Service {',
                '  // Intentionally any: External API response with dynamic structure',
                '  // eslint-disable-next-line @typescript-eslint/no-explicit-any',
                '  processData(data: any): void {',
                '    console.log(data);',
                '  }',
                '',
                '  // Poor comment',
                '  handleError(error: any): void {',
                '    console.error(error);',
                '  }',
                '',
                '  // No comment',
                '  transform(input: any): any {',
                '    return input;',
                '  }',
                '}'
            ].join('\n');
            mockFs.readFile.mockResolvedValue(fileContent);
            const report = await qas.performQualityAssurance();
            expect(report.totalIntentionalAnyTypes).toBeGreaterThan(0);
            expect(report.documentationCoverage).toBeLessThan(100);
            expect(report.qualityBreakdown).toHaveProperty('poor');
            expect(report.qualityBreakdown).toHaveProperty('excellent');
            expect(Array.isArray(report.recommendations)).toBe(true);
        });
        it('should handle files with no any types', async () => {
            const mockFiles = ['src/clean.ts'];
            mockGlob.mockResolvedValue(mockFiles);
            const cleanFileContent = [
                'export class CleanService {',
                '  processData(data: string): void {',
                '    console.log(data);',
                '  }',
                '}'
            ].join('\n');
            mockFs.readFile.mockResolvedValue(cleanFileContent);
            const report = await qas.performQualityAssurance();
            expect(report.totalIntentionalAnyTypes).toBe(0);
            expect(report.documentationCoverage).toBe(100);
        });
        it('should handle file read errors gracefully', async () => {
            const mockFiles = ['src/error.ts'];
            mockGlob.mockResolvedValue(mockFiles);
            mockFs.readFile.mockRejectedValue(new Error('File not found'));
            const report = await qas.performQualityAssurance();
            expect(report).toBeDefined();
            expect(report.totalIntentionalAnyTypes).toBe(0);
        });
    });
    describe('validateDocumentationQuality', () => {
        it('should validate high-quality documentation', async () => {
            const fileContent = [
                'export class Service {',
                '  // Intentionally any: External API response requires flexible typing because structure varies',
                '  // eslint-disable-next-line @typescript-eslint/no-explicit-any -- External API compatibility',
                '  processData(data: any): void {',
                '    console.log(data);',
                '  }',
                '}'
            ].join('\n');
            mockFs.readFile.mockResolvedValue(fileContent);
            const context = {
                filePath: 'src/service.ts',
                lineNumber: 4,
                codeSnippet: 'processData(data: any): void {',
                surroundingLines: [],
                hasExistingComment: true,
                existingComment: 'Intentionally any: External API response requires flexible typing because structure varies',
                isInTestFile: false,
                domainContext: {
                    domain: types_1.CodeDomain.SERVICE,
                    intentionalityHints: [],
                    suggestedTypes: [],
                    preservationReasons: []
                }
            };
            const validation = await qas.validateDocumentationQuality(context);
            expect(validation.hasComment).toBe(true);
            expect(validation.commentQuality).toBe('excellent');
            expect(validation.hasEslintDisable).toBe(true);
            expect(validation.eslintDisableHasExplanation).toBe(true);
            expect(validation.isComplete).toBe(true);
            expect(validation.suggestions).toContain('complete and well-structured');
        });
        it('should identify poor quality documentation', async () => {
            const fileContent = [
                'export class Service {',
                '  // any',
                '  processData(data: any): void {',
                '    console.log(data);',
                '  }',
                '}'
            ].join('\n');
            mockFs.readFile.mockResolvedValue(fileContent);
            const context = {
                filePath: 'src/service.ts',
                lineNumber: 3,
                codeSnippet: 'processData(data: any): void {',
                surroundingLines: [],
                hasExistingComment: true,
                existingComment: 'any',
                isInTestFile: false,
                domainContext: {
                    domain: types_1.CodeDomain.SERVICE,
                    intentionalityHints: [],
                    suggestedTypes: [],
                    preservationReasons: []
                }
            };
            const validation = await qas.validateDocumentationQuality(context);
            expect(validation.hasComment).toBe(true);
            expect(validation.commentQuality).toBe('poor');
            expect(validation.hasEslintDisable).toBe(false);
            expect(validation.isComplete).toBe(false);
            expect(validation.suggestions).toContain('Improve comment quality');
        });
        it('should identify missing documentation', async () => {
            const fileContent = [
                'export class Service {',
                '  processData(data: any): void {',
                '    console.log(data);',
                '  }',
                '}'
            ].join('\n');
            mockFs.readFile.mockResolvedValue(fileContent);
            const context = {
                filePath: 'src/service.ts',
                lineNumber: 2,
                codeSnippet: 'processData(data: any): void {',
                surroundingLines: [],
                hasExistingComment: false,
                isInTestFile: false,
                domainContext: {
                    domain: types_1.CodeDomain.SERVICE,
                    intentionalityHints: [],
                    suggestedTypes: [],
                    preservationReasons: []
                }
            };
            const validation = await qas.validateDocumentationQuality(context);
            expect(validation.hasComment).toBe(false);
            expect(validation.commentQuality).toBe('poor');
            expect(validation.hasEslintDisable).toBe(false);
            expect(validation.isComplete).toBe(false);
            expect(validation.suggestions).toContain('Add explanatory comment');
        });
        it('should cache validation results', async () => {
            const fileContent = 'processData(data: any): void {}';
            mockFs.readFile.mockResolvedValue(fileContent);
            const context = {
                filePath: 'src/service.ts',
                lineNumber: 1,
                codeSnippet: 'processData(data: any): void {',
                surroundingLines: [],
                hasExistingComment: false,
                isInTestFile: false,
                domainContext: {
                    domain: types_1.CodeDomain.SERVICE,
                    intentionalityHints: [],
                    suggestedTypes: [],
                    preservationReasons: []
                }
            };
            // First call
            await qas.validateDocumentationQuality(context);
            expect(mockFs.readFile).toHaveBeenCalledTimes(1);
            // Second call should use cache
            await qas.validateDocumentationQuality(context);
            expect(mockFs.readFile).toHaveBeenCalledTimes(1);
        });
    });
    describe('generateQualityReport', () => {
        it('should generate comprehensive quality metrics', async () => {
            const mockFiles = ['src/service.ts', 'src/component.tsx'];
            mockGlob.mockResolvedValue(mockFiles);
            const fileContent = [
                'export class Service {',
                '  // Intentionally any: External API response',
                '  processData(data: any): void {',
                '    console.log(data);',
                '  }',
                '',
                '  handleError(error: any): void {',
                '    console.error(error);',
                '  }',
                '}'
            ].join('\n');
            mockFs.readFile.mockResolvedValue(fileContent);
            const metrics = await qas.generateQualityReport();
            expect(metrics.totalFiles).toBe(2);
            expect(metrics.filesWithAnyTypes).toBeGreaterThan(0);
            expect(metrics.totalAnyTypes).toBeGreaterThan(0);
            expect(metrics.qualityDistribution).toHaveProperty('poor');
            expect(metrics.qualityDistribution).toHaveProperty('excellent');
            expect(typeof metrics.averageQualityScore).toBe('number');
            expect(typeof metrics.compliancePercentage).toBe('number');
        });
    });
    describe('findAnyTypesInFile', () => {
        it('should find various any type patterns', async () => {
            const fileContent = [
                'const data: any = response;',
                'const items: any[] = [];',
                'const config: Record<string, any> = {};',
                'const result = data as any;',
                'function process<T = any>(input: T): T { return input; }',
                'const array: Array<any> = [];',
                'catch (error: any) {',
                '  console.error(error);',
                '}'
            ].join('\n');
            mockFs.readFile.mockResolvedValue(fileContent);
            // Use reflection to access private method for testing
            const anyTypes = await qas.findAnyTypesInFile('test.ts');
            expect(anyTypes.length).toBeGreaterThan(0);
            expect(anyTypes.some((t) => t.codeSnippet.includes(': any'))).toBe(true);
            expect(anyTypes.some((t) => t.codeSnippet.includes(': any[]'))).toBe(true);
            expect(anyTypes.some((t) => t.codeSnippet.includes('Record<string, any>'))).toBe(true);
            expect(anyTypes.some((t) => t.codeSnippet.includes('as any'))).toBe(true);
        });
        it('should categorize any types correctly', async () => {
            const testCases = [
                { code: 'catch (error: any) {', expectedCategory: types_1.AnyTypeCategory.ERROR_HANDLING },
                { code: 'const response: any = await api.fetch();', expectedCategory: types_1.AnyTypeCategory.EXTERNAL_API },
                { code: 'const mockData: any = jest.fn();', expectedCategory: types_1.AnyTypeCategory.TEST_MOCK },
                { code: 'const config: any = options;', expectedCategory: types_1.AnyTypeCategory.DYNAMIC_CONFIG },
                { code: 'const items: any[] = [];', expectedCategory: types_1.AnyTypeCategory.ARRAY_TYPE },
                { code: 'const data: Record<string, any> = {};', expectedCategory: types_1.AnyTypeCategory.RECORD_TYPE }
            ];
            for (const testCase of testCases) {
                const category = qas.categorizeAnyType(testCase.code);
                expect(category).toBe(testCase.expectedCategory);
            }
        });
        it('should determine domain correctly', async () => {
            const testCases = [
                { path: 'src/services/astrology/planetary.ts', expectedDomain: types_1.CodeDomain.ASTROLOGICAL },
                { path: 'src/components/recipe/RecipeCard.tsx', expectedDomain: types_1.CodeDomain.RECIPE },
                { path: 'src/services/campaign/CampaignController.ts', expectedDomain: types_1.CodeDomain.CAMPAIGN },
                { path: 'src/services/intelligence/AIService.ts', expectedDomain: types_1.CodeDomain.INTELLIGENCE },
                { path: 'src/services/api/ApiService.ts', expectedDomain: types_1.CodeDomain.SERVICE },
                { path: 'src/components/ui/Button.tsx', expectedDomain: types_1.CodeDomain.COMPONENT },
                { path: 'src/utils/helpers.ts', expectedDomain: types_1.CodeDomain.UTILITY },
                { path: 'src/__tests__/service.test.ts', expectedDomain: types_1.CodeDomain.TEST }
            ];
            for (const testCase of testCases) {
                const domain = qas.determineDomain(testCase.path);
                expect(domain).toBe(testCase.expectedDomain);
            }
        });
    });
    describe('comment quality assessment', () => {
        const qualityTestCases = [
            {
                comment: '',
                expectedQuality: 'poor',
                description: 'empty comment'
            },
            {
                comment: 'any',
                expectedQuality: 'poor',
                description: 'minimal comment'
            },
            {
                comment: 'Intentionally any for API',
                expectedQuality: 'fair',
                description: 'basic intentional comment'
            },
            {
                comment: 'Intentionally any: External API response requires flexible typing',
                expectedQuality: 'good',
                description: 'good quality comment with explanation'
            },
            {
                comment: 'Intentionally any: External API response requires flexible typing because the structure varies between different endpoints and versions, and we need to maintain compatibility with legacy systems',
                expectedQuality: 'excellent',
                description: 'excellent quality comment with detailed explanation'
            }
        ];
        qualityTestCases.forEach(({ comment, expectedQuality, description }) => {
            it(`should assess ${description} as ${expectedQuality}`, () => {
                const quality = qas.assessCommentQuality(comment);
                expect(quality).toBe(expectedQuality);
            });
        });
    });
    describe('ESLint disable comment detection', () => {
        it('should detect ESLint disable comments', () => {
            const lines = [
                'function test() {',
                '  // eslint-disable-next-line @typescript-eslint/no-explicit-any',
                '  const data: any = response;',
                '}'
            ];
            const hasDisable = qas.hasEslintDisableComment(lines, 2);
            expect(hasDisable).toBe(true);
        });
        it('should detect ESLint disable comments with explanations', () => {
            const lines = [
                'function test() {',
                '  // eslint-disable-next-line @typescript-eslint/no-explicit-any -- External API compatibility',
                '  const data: any = response;',
                '}'
            ];
            const hasExplanation = qas.eslintDisableHasExplanation(lines, 2);
            expect(hasExplanation).toBe(true);
        });
        it('should not detect explanation in basic disable comment', () => {
            const lines = [
                'function test() {',
                '  // eslint-disable-next-line @typescript-eslint/no-explicit-any',
                '  const data: any = response;',
                '}'
            ];
            const hasExplanation = qas.eslintDisableHasExplanation(lines, 2);
            expect(hasExplanation).toBe(false);
        });
    });
    describe('severity assessment', () => {
        it('should assess severity correctly', () => {
            const testCases = [
                {
                    context: {
                        filePath: 'src/service.ts',
                        codeSnippet: 'processData(data: any): void',
                        isInTestFile: false
                    },
                    expectedSeverity: 'high'
                },
                {
                    context: {
                        filePath: 'src/component.tsx',
                        codeSnippet: 'const props: any = {}',
                        isInTestFile: false
                    },
                    expectedSeverity: 'low'
                },
                {
                    context: {
                        filePath: 'src/test.test.ts',
                        codeSnippet: 'const mock: any = {}',
                        isInTestFile: true
                    },
                    expectedSeverity: 'low'
                },
                {
                    context: {
                        filePath: 'src/utils.ts',
                        codeSnippet: 'function process(data: any[]): any',
                        isInTestFile: false
                    },
                    expectedSeverity: 'medium'
                }
            ];
            testCases.forEach(({ context, expectedSeverity }) => {
                const severity = qas.assessSeverity(context);
                expect(severity).toBe(expectedSeverity);
            });
        });
    });
    describe('recommendation generation', () => {
        it('should generate appropriate recommendations for low coverage', () => {
            const recommendations = qas.generateRecommendations(30, // 30% coverage
            { poor: 5, fair: 2, good: 1, excellent: 0 }, []);
            expect(recommendations.some((r) => r.includes('CRITICAL'))).toBe(true);
            expect(recommendations.some((r) => r.includes('poor quality'))).toBe(true);
        });
        it('should generate appropriate recommendations for good coverage', () => {
            const recommendations = qas.generateRecommendations(85, // 85% coverage
            { poor: 1, fair: 2, good: 5, excellent: 3 }, []);
            expect(recommendations.some((r) => r.includes('GOOD'))).toBe(true);
            expect(recommendations.some((r) => r.includes('remaining'))).toBe(true);
        });
        it('should generate appropriate recommendations for excellent coverage', () => {
            const recommendations = qas.generateRecommendations(98, // 98% coverage
            { poor: 0, fair: 1, good: 3, excellent: 8 }, []);
            expect(recommendations.some((r) => r.includes('EXCELLENT'))).toBe(true);
            expect(recommendations.some((r) => r.includes('Maintain'))).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,