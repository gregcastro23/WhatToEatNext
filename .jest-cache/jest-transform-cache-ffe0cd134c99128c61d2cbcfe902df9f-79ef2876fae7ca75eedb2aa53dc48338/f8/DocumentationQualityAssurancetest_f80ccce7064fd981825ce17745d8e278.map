{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/unintentional-any-elimination/__tests__/DocumentationQualityAssurance.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/unintentional-any-elimination/__tests__/DocumentationQualityAssurance.test.ts"],"sourcesContent":["/**\n * Tests for DocumentationQualityAssurance\n */\n\nimport * as fs from 'fs/promises';\nimport { glob } from 'glob';\nimport { DocumentationQualityAssurance, QualityAssuranceConfig } from '../DocumentationQualityAssurance';\nimport { AnyTypeCategory, ClassificationContext, CodeDomain } from '../types';\n\n// Mock dependencies\njest.mock('fs/promises');\njest.mock('glob');\n\nconst mockFs = fs as jest.Mocked<typeof fs>;\nconst mockGlob = glob as jest.MockedFunction<typeof glob>;\n\ndescribe('DocumentationQualityAssurance', () => {\n  let qas: DocumentationQualityAssurance;\n  let mockConfig: Partial<QualityAssuranceConfig>;\n\n  beforeEach(() => {\n    mockConfig = {\n      sourceDirectories: ['src'],\n      excludePatterns: ['**/*.test.ts'],\n      minimumCommentLength: 20,\n      requiredKeywords: ['intentionally', 'deliberately'],\n      qualityThresholds: {\n        excellent: 90,\n        good: 70,\n        fair: 50\n      }\n    };\n\n    qas = new DocumentationQualityAssurance(mockConfig);\n\n    // Reset mocks\n    jest.clearAllMocks();\n  });\n\n  describe('performQualityAssurance', () => {\n    it('should perform comprehensive quality assurance scan', async () => {\n      const mockFiles = ['src/service.ts', 'src/component.tsx'];\n      mockGlob.mockResolvedValue(mockFiles);\n\n      const fileContent = [\n        'export class Service {',\n        '  // Intentionally any: External API response with dynamic structure',\n        '  // eslint-disable-next-line @typescript-eslint/no-explicit-any',\n        '  processData(data: any): void {',\n        '    console.log(data);',\n        '  }',\n        '',\n        '  // Poor comment',\n        '  handleError(error: any): void {',\n        '    console.error(error);',\n        '  }',\n        '',\n        '  // No comment',\n        '  transform(input: any): any {',\n        '    return input;',\n        '  }',\n        '}'\n      ].join('\\n');\n\n      mockFs.readFile.mockResolvedValue(fileContent);\n\n      const report = await qas.performQualityAssurance();\n\n      expect(report.totalIntentionalAnyTypes).toBeGreaterThan(0);\n      expect(report.documentationCoverage).toBeLessThan(100);\n      expect(report.qualityBreakdown).toHaveProperty('poor');\n      expect(report.qualityBreakdown).toHaveProperty('excellent');\n      expect(Array.isArray(report.recommendations)).toBe(true);\n    });\n\n    it('should handle files with no any types', async () => {\n      const mockFiles = ['src/clean.ts'];\n      mockGlob.mockResolvedValue(mockFiles);\n\n      const cleanFileContent = [\n        'export class CleanService {',\n        '  processData(data: string): void {',\n        '    console.log(data);',\n        '  }',\n        '}'\n      ].join('\\n');\n\n      mockFs.readFile.mockResolvedValue(cleanFileContent);\n\n      const report = await qas.performQualityAssurance();\n\n      expect(report.totalIntentionalAnyTypes).toBe(0);\n      expect(report.documentationCoverage).toBe(100);\n    });\n\n    it('should handle file read errors gracefully', async () => {\n      const mockFiles = ['src/error.ts'];\n      mockGlob.mockResolvedValue(mockFiles);\n      mockFs.readFile.mockRejectedValue(new Error('File not found'));\n\n      const report = await qas.performQualityAssurance();\n\n      expect(report).toBeDefined();\n      expect(report.totalIntentionalAnyTypes).toBe(0);\n    });\n  });\n\n  describe('validateDocumentationQuality', () => {\n    it('should validate high-quality documentation', async () => {\n      const fileContent = [\n        'export class Service {',\n        '  // Intentionally any: External API response requires flexible typing because structure varies',\n        '  // eslint-disable-next-line @typescript-eslint/no-explicit-any -- External API compatibility',\n        '  processData(data: any): void {',\n        '    console.log(data);',\n        '  }',\n        '}'\n      ].join('\\n');\n\n      mockFs.readFile.mockResolvedValue(fileContent);\n\n      const context: ClassificationContext = {\n        filePath: 'src/service.ts',\n        lineNumber: 4,\n        codeSnippet: 'processData(data: any): void {',\n        surroundingLines: [],\n        hasExistingComment: true,\n        existingComment: 'Intentionally any: External API response requires flexible typing because structure varies',\n        isInTestFile: false,\n        domainContext: {\n          domain: CodeDomain.SERVICE,\n          intentionalityHints: [],\n          suggestedTypes: [],\n          preservationReasons: []\n        }\n      };\n\n      const validation = await qas.validateDocumentationQuality(context);\n\n      expect(validation.hasComment).toBe(true);\n      expect(validation.commentQuality).toBe('excellent');\n      expect(validation.hasEslintDisable).toBe(true);\n      expect(validation.eslintDisableHasExplanation).toBe(true);\n      expect(validation.isComplete).toBe(true);\n      expect(validation.suggestions).toContain('complete and well-structured');\n    });\n\n    it('should identify poor quality documentation', async () => {\n      const fileContent = [\n        'export class Service {',\n        '  // any',\n        '  processData(data: any): void {',\n        '    console.log(data);',\n        '  }',\n        '}'\n      ].join('\\n');\n\n      mockFs.readFile.mockResolvedValue(fileContent);\n\n      const context: ClassificationContext = {\n        filePath: 'src/service.ts',\n        lineNumber: 3,\n        codeSnippet: 'processData(data: any): void {',\n        surroundingLines: [],\n        hasExistingComment: true,\n        existingComment: 'any',\n        isInTestFile: false,\n        domainContext: {\n          domain: CodeDomain.SERVICE,\n          intentionalityHints: [],\n          suggestedTypes: [],\n          preservationReasons: []\n        }\n      };\n\n      const validation = await qas.validateDocumentationQuality(context);\n\n      expect(validation.hasComment).toBe(true);\n      expect(validation.commentQuality).toBe('poor');\n      expect(validation.hasEslintDisable).toBe(false);\n      expect(validation.isComplete).toBe(false);\n      expect(validation.suggestions).toContain('Improve comment quality');\n    });\n\n    it('should identify missing documentation', async () => {\n      const fileContent = [\n        'export class Service {',\n        '  processData(data: any): void {',\n        '    console.log(data);',\n        '  }',\n        '}'\n      ].join('\\n');\n\n      mockFs.readFile.mockResolvedValue(fileContent);\n\n      const context: ClassificationContext = {\n        filePath: 'src/service.ts',\n        lineNumber: 2,\n        codeSnippet: 'processData(data: any): void {',\n        surroundingLines: [],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {\n          domain: CodeDomain.SERVICE,\n          intentionalityHints: [],\n          suggestedTypes: [],\n          preservationReasons: []\n        }\n      };\n\n      const validation = await qas.validateDocumentationQuality(context);\n\n      expect(validation.hasComment).toBe(false);\n      expect(validation.commentQuality).toBe('poor');\n      expect(validation.hasEslintDisable).toBe(false);\n      expect(validation.isComplete).toBe(false);\n      expect(validation.suggestions).toContain('Add explanatory comment');\n    });\n\n    it('should cache validation results', async () => {\n      const fileContent = 'processData(data: any): void {}';\n      mockFs.readFile.mockResolvedValue(fileContent);\n\n      const context: ClassificationContext = {\n        filePath: 'src/service.ts',\n        lineNumber: 1,\n        codeSnippet: 'processData(data: any): void {',\n        surroundingLines: [],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {\n          domain: CodeDomain.SERVICE,\n          intentionalityHints: [],\n          suggestedTypes: [],\n          preservationReasons: []\n        }\n      };\n\n      // First call\n      await qas.validateDocumentationQuality(context);\n      expect(mockFs.readFile).toHaveBeenCalledTimes(1);\n\n      // Second call should use cache\n      await qas.validateDocumentationQuality(context);\n      expect(mockFs.readFile).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe('generateQualityReport', () => {\n    it('should generate comprehensive quality metrics', async () => {\n      const mockFiles = ['src/service.ts', 'src/component.tsx'];\n      mockGlob.mockResolvedValue(mockFiles);\n\n      const fileContent = [\n        'export class Service {',\n        '  // Intentionally any: External API response',\n        '  processData(data: any): void {',\n        '    console.log(data);',\n        '  }',\n        '',\n        '  handleError(error: any): void {',\n        '    console.error(error);',\n        '  }',\n        '}'\n      ].join('\\n');\n\n      mockFs.readFile.mockResolvedValue(fileContent);\n\n      const metrics = await qas.generateQualityReport();\n\n      expect(metrics.totalFiles).toBe(2);\n      expect(metrics.filesWithAnyTypes).toBeGreaterThan(0);\n      expect(metrics.totalAnyTypes).toBeGreaterThan(0);\n      expect(metrics.qualityDistribution).toHaveProperty('poor');\n      expect(metrics.qualityDistribution).toHaveProperty('excellent');\n      expect(typeof metrics.averageQualityScore).toBe('number');\n      expect(typeof metrics.compliancePercentage).toBe('number');\n    });\n  });\n\n  describe('findAnyTypesInFile', () => {\n    it('should find various any type patterns', async () => {\n      const fileContent = [\n        'const data: any = response;',\n        'const items: any[] = [];',\n        'const config: Record<string, any> = {};',\n        'const result = data as any;',\n        'function process<T = any>(input: T): T { return input; }',\n        'const array: Array<any> = [];',\n        'catch (error: any) {',\n        '  console.error(error);',\n        '}'\n      ].join('\\n');\n\n      mockFs.readFile.mockResolvedValue(fileContent);\n\n      // Use reflection to access private method for testing\n      const anyTypes = await (qas as any).findAnyTypesInFile('test.ts');\n\n      expect(anyTypes.length).toBeGreaterThan(0);\n      expect(anyTypes.some((t: any) => t.codeSnippet.includes(': any'))).toBe(true);\n      expect(anyTypes.some((t: any) => t.codeSnippet.includes(': any[]'))).toBe(true);\n      expect(anyTypes.some((t: any) => t.codeSnippet.includes('Record<string, any>'))).toBe(true);\n      expect(anyTypes.some((t: any) => t.codeSnippet.includes('as any'))).toBe(true);\n    });\n\n    it('should categorize any types correctly', async () => {\n      const testCases = [\n        { code: 'catch (error: any) {', expectedCategory: AnyTypeCategory.ERROR_HANDLING },\n        { code: 'const response: any = await api.fetch();', expectedCategory: AnyTypeCategory.EXTERNAL_API },\n        { code: 'const mockData: any = jest.fn();', expectedCategory: AnyTypeCategory.TEST_MOCK },\n        { code: 'const config: any = options;', expectedCategory: AnyTypeCategory.DYNAMIC_CONFIG },\n        { code: 'const items: any[] = [];', expectedCategory: AnyTypeCategory.ARRAY_TYPE },\n        { code: 'const data: Record<string, any> = {};', expectedCategory: AnyTypeCategory.RECORD_TYPE }\n      ];\n\n      for (const testCase of testCases) {\n        const category = (qas as any).categorizeAnyType(testCase.code);\n        expect(category).toBe(testCase.expectedCategory);\n      }\n    });\n\n    it('should determine domain correctly', async () => {\n      const testCases = [\n        { path: 'src/services/astrology/planetary.ts', expectedDomain: CodeDomain.ASTROLOGICAL },\n        { path: 'src/components/recipe/RecipeCard.tsx', expectedDomain: CodeDomain.RECIPE },\n        { path: 'src/services/campaign/CampaignController.ts', expectedDomain: CodeDomain.CAMPAIGN },\n        { path: 'src/services/intelligence/AIService.ts', expectedDomain: CodeDomain.INTELLIGENCE },\n        { path: 'src/services/api/ApiService.ts', expectedDomain: CodeDomain.SERVICE },\n        { path: 'src/components/ui/Button.tsx', expectedDomain: CodeDomain.COMPONENT },\n        { path: 'src/utils/helpers.ts', expectedDomain: CodeDomain.UTILITY },\n        { path: 'src/__tests__/service.test.ts', expectedDomain: CodeDomain.TEST }\n      ];\n\n      for (const testCase of testCases) {\n        const domain = (qas as any).determineDomain(testCase.path);\n        expect(domain).toBe(testCase.expectedDomain);\n      }\n    });\n  });\n\n  describe('comment quality assessment', () => {\n    const qualityTestCases = [\n      {\n        comment: '',\n        expectedQuality: 'poor',\n        description: 'empty comment'\n      },\n      {\n        comment: 'any',\n        expectedQuality: 'poor',\n        description: 'minimal comment'\n      },\n      {\n        comment: 'Intentionally any for API',\n        expectedQuality: 'fair',\n        description: 'basic intentional comment'\n      },\n      {\n        comment: 'Intentionally any: External API response requires flexible typing',\n        expectedQuality: 'good',\n        description: 'good quality comment with explanation'\n      },\n      {\n        comment: 'Intentionally any: External API response requires flexible typing because the structure varies between different endpoints and versions, and we need to maintain compatibility with legacy systems',\n        expectedQuality: 'excellent',\n        description: 'excellent quality comment with detailed explanation'\n      }\n    ];\n\n    qualityTestCases.forEach(({ comment, expectedQuality, description }) => {\n      it(`should assess ${description} as ${expectedQuality}`, () => {\n        const quality = (qas as any).assessCommentQuality(comment);\n        expect(quality).toBe(expectedQuality);\n      });\n    });\n  });\n\n  describe('ESLint disable comment detection', () => {\n    it('should detect ESLint disable comments', () => {\n      const lines = [\n        'function test() {',\n        '  // eslint-disable-next-line @typescript-eslint/no-explicit-any',\n        '  const data: any = response;',\n        '}'\n      ];\n\n      const hasDisable = (qas as any).hasEslintDisableComment(lines, 2);\n      expect(hasDisable).toBe(true);\n    });\n\n    it('should detect ESLint disable comments with explanations', () => {\n      const lines = [\n        'function test() {',\n        '  // eslint-disable-next-line @typescript-eslint/no-explicit-any -- External API compatibility',\n        '  const data: any = response;',\n        '}'\n      ];\n\n      const hasExplanation = (qas as any).eslintDisableHasExplanation(lines, 2);\n      expect(hasExplanation).toBe(true);\n    });\n\n    it('should not detect explanation in basic disable comment', () => {\n      const lines = [\n        'function test() {',\n        '  // eslint-disable-next-line @typescript-eslint/no-explicit-any',\n        '  const data: any = response;',\n        '}'\n      ];\n\n      const hasExplanation = (qas as any).eslintDisableHasExplanation(lines, 2);\n      expect(hasExplanation).toBe(false);\n    });\n  });\n\n  describe('severity assessment', () => {\n    it('should assess severity correctly', () => {\n      const testCases = [\n        {\n          context: {\n            filePath: 'src/service.ts',\n            codeSnippet: 'processData(data: any): void',\n            isInTestFile: false\n          },\n          expectedSeverity: 'high'\n        },\n        {\n          context: {\n            filePath: 'src/component.tsx',\n            codeSnippet: 'const props: any = {}',\n            isInTestFile: false\n          },\n          expectedSeverity: 'low'\n        },\n        {\n          context: {\n            filePath: 'src/test.test.ts',\n            codeSnippet: 'const mock: any = {}',\n            isInTestFile: true\n          },\n          expectedSeverity: 'low'\n        },\n        {\n          context: {\n            filePath: 'src/utils.ts',\n            codeSnippet: 'function process(data: any[]): any',\n            isInTestFile: false\n          },\n          expectedSeverity: 'medium'\n        }\n      ];\n\n      testCases.forEach(({ context, expectedSeverity }) => {\n        const severity = (qas as any).assessSeverity(context);\n        expect(severity).toBe(expectedSeverity);\n      });\n    });\n  });\n\n  describe('recommendation generation', () => {\n    it('should generate appropriate recommendations for low coverage', () => {\n      const recommendations = (qas as any).generateRecommendations(\n        30, // 30% coverage\n        { poor: 5, fair: 2, good: 1, excellent: 0 },\n        []\n      );\n\n      expect(recommendations.some((r: string) => r.includes('CRITICAL'))).toBe(true);\n      expect(recommendations.some((r: string) => r.includes('poor quality'))).toBe(true);\n    });\n\n    it('should generate appropriate recommendations for good coverage', () => {\n      const recommendations = (qas as any).generateRecommendations(\n        85, // 85% coverage\n        { poor: 1, fair: 2, good: 5, excellent: 3 },\n        []\n      );\n\n      expect(recommendations.some((r: string) => r.includes('GOOD'))).toBe(true);\n      expect(recommendations.some((r: string) => r.includes('remaining'))).toBe(true);\n    });\n\n    it('should generate appropriate recommendations for excellent coverage', () => {\n      const recommendations = (qas as any).generateRecommendations(\n        98, // 98% coverage\n        { poor: 0, fair: 1, good: 3, excellent: 8 },\n        []\n      );\n\n      expect(recommendations.some((r: string) => r.includes('EXCELLENT'))).toBe(true);\n      expect(recommendations.some((r: string) => r.includes('Maintain'))).toBe(true);\n    });\n  });\n});\n"],"version":3}