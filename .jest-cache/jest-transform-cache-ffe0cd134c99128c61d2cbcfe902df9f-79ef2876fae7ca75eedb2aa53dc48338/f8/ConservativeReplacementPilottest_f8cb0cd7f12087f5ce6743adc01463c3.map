{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/unintentional-any-elimination/__tests__/ConservativeReplacementPilot.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/unintentional-any-elimination/__tests__/ConservativeReplacementPilot.test.ts"],"sourcesContent":["/**\n * Conservative Replacement Pilot Tests\n * Comprehensive test suite for Task 12.2 implementation\n */\n\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\n\nimport { ConservativeReplacementPilot } from '../ConservativeReplacementPilot';\nimport {\n    AnyTypeCategory,\n    ConservativePilotConfig\n} from '../types';\n\n// Mock external dependencies\njest.mock('child_process');\njest.mock('fs');\n\nconst mockExecSync = execSync as jest.MockedFunction<typeof execSync>;\nconst mockFs = fs as jest.Mocked<typeof fs>;\n\ndescribe('ConservativeReplacementPilot', () => {\n  let pilot: ConservativeReplacementPilot;\n  let mockConfig: ConservativePilotConfig;\n\n  beforeEach(() => {\n    // Reset all mocks\n    jest.clearAllMocks();\n\n    // Default test configuration\n    mockConfig = {\n      maxFilesPerBatch: 10,\n      minFilesPerBatch: 5,\n      targetSuccessRate: 0.8,\n      maxBatches: 5,\n      realTimeValidation: true,\n      rollbackOnFailure: true,\n      safetyThreshold: 0.7,\n      focusCategories: [AnyTypeCategory.ARRAY_TYPE, AnyTypeCategory.RECORD_TYPE],\n      buildValidationFrequency: 1\n    };\n\n    pilot = new ConservativeReplacementPilot(mockConfig);\n\n    // Mock file system operations\n    mockFs.existsSync.mockReturnValue(true);\n    mockFs.mkdirSync.mockReturnValue(undefined);\n    mockFs.readFileSync.mockReturnValue('mock file content');\n    mockFs.writeFileSync.mockReturnValue(undefined);\n    mockFs.readdirSync.mockReturnValue(['test.ts', 'example.tsx']);\n    mockFs.statSync.mockReturnValue({ isFile: () => true, isDirectory: () => false } as any);\n\n    // Mock successful TypeScript compilation by default\n    mockExecSync.mockReturnValue('');\n  });\n\n  describe('Constructor and Configuration', () => {\n    test('should initialize with default configuration', () => {\n      const defaultPilot = new ConservativeReplacementPilot();\n      expect(defaultPilot).toBeDefined();\n    });\n\n    test('should accept custom configuration', () => {\n      const customConfig: Partial<ConservativePilotConfig> = {\n        maxFilesPerBatch: 20,\n        targetSuccessRate: 0.9\n      };\n\n      const customPilot = new ConservativeReplacementPilot(customConfig);\n      expect(customPilot).toBeDefined();\n    });\n\n    test('should merge custom config with defaults', () => {\n      const customConfig: Partial<ConservativePilotConfig> = {\n        maxFilesPerBatch: 20\n      };\n\n      const customPilot = new ConservativeReplacementPilot(customConfig);\n      // Should have custom value and default values\n      expect(customPilot).toBeDefined();\n    });\n  });\n\n  describe('High-Confidence Case Identification', () => {\n    beforeEach(() => {\n      // Mock finding TypeScript files\n      mockExecSync.mockReturnValue('src/test1.ts\\nsrc/test2.tsx\\n');\n\n      // Mock file content with any types\n      mockFs.readFileSync.mockImplementation((filePath: any) => {\n        if (filePath.includes('test1.ts')) {\n          return `\n            const items: any[] = [];\n            const config: Record<string, any> = {};\n            function test(param: any): any {\n              return param;\n            }\n          `;\n        }\n        if (filePath.includes('test2.tsx')) {\n          return `\n            const data: any[] = [1, 2, 3];\n            const mapping: Record<number, any> = {};\n          `;\n        }\n        return 'mock content';\n      });\n    });\n\n    test('should identify array type cases with high confidence', async () => {\n      const result = await pilot.executePilot();\n\n      expect(result.success).toBeDefined();\n      // Should have found array type cases\n    });\n\n    test('should identify Record type cases', async () => {\n      const result = await pilot.executePilot();\n\n      expect(result.success).toBeDefined();\n      // Should have found Record type cases\n    });\n\n    test('should prioritize array types over Record types', async () => {\n      const result = await pilot.executePilot();\n\n      expect(result.success).toBeDefined();\n      // Array types should be processed first due to higher confidence\n    });\n\n    test('should exclude cases in comments', async () => {\n      mockFs.readFileSync.mockReturnValue(`\n        // const items: any[] = []; // This should be ignored\n        const realItems: any[] = []; // This should be found\n      `);\n\n      const result = await pilot.executePilot();\n\n      expect(result.success).toBeDefined();\n      // Should only find the non-commented case\n    });\n\n    test('should exclude cases in error handling contexts', async () => {\n      mockFs.readFileSync.mockReturnValue(`\n        try {\n          // some code\n        } catch (error: any) {\n          // This should be ignored\n        }\n        const items: any[] = []; // This should be found\n      `);\n\n      const result = await pilot.executePilot();\n\n      expect(result.success).toBeDefined();\n      // Should exclude error handling cases\n    });\n  });\n\n  describe('Batch Processing', () => {\n    beforeEach(() => {\n      // Mock successful build validation\n      mockExecSync.mockReturnValue('');\n\n      // Mock file operations\n      mockFs.readFileSync.mockReturnValue('const items: any[] = [];');\n    });\n\n    test('should process batches within size limits', async () => {\n      const result = await pilot.executePilot();\n\n      expect(result.batchesExecuted).toBeLessThanOrEqual(mockConfig.maxBatches);\n    });\n\n    test('should validate build after each batch', async () => {\n      await pilot.executePilot();\n\n      // Should have called TypeScript compilation validation\n      expect(mockExecSync).toHaveBeenCalledWith(\n        expect.stringContaining('tsc --noEmit'),\n        expect.any(Object)\n      );\n    });\n\n    test('should rollback on build failure when configured', async () => {\n      // Mock build failure\n      mockExecSync.mockImplementation((command: string) => {\n        if (command.includes('tsc --noEmit')) {\n          throw new Error('TypeScript compilation failed');\n        }\n        return '';\n      });\n\n      const result = await pilot.executePilot();\n\n      expect(result.rollbacksPerformed).toBeGreaterThan(0);\n    });\n\n    test('should stop processing on consecutive build failures', async () => {\n      // Mock build failure\n      mockExecSync.mockImplementation((command: string) => {\n        if (command.includes('tsc --noEmit')) {\n          throw new Error('Build failed');\n        }\n        return '';\n      });\n\n      const result = await pilot.executePilot();\n\n      expect(result.success).toBe(false);\n      expect(result.buildFailures).toBeGreaterThan(0);\n    });\n\n    test('should create backups before making changes', async () => {\n      await pilot.executePilot();\n\n      // Should have created backup directory\n      expect(mockFs.mkdirSync).toHaveBeenCalledWith(\n        expect.stringContaining('conservative-pilot-backups'),\n        expect.any(Object)\n      );\n    });\n  });\n\n  describe('Real-Time Validation', () => {\n    test('should perform validation after each batch', async () => {\n      const result = await pilot.executePilot();\n\n      // Should have performed build validation\n      expect(mockExecSync).toHaveBeenCalledWith(\n        expect.stringContaining('tsc --noEmit'),\n        expect.any(Object)\n      );\n    });\n\n    test('should track TypeScript error count', async () => {\n      // Mock error count output\n      mockExecSync.mockImplementation((command: string) => {\n        if (command.includes('grep -c \"error TS\"')) {\n          return '5'; // Mock 5 errors\n        }\n        return '';\n      });\n\n      const result = await pilot.executePilot();\n\n      expect(result.success).toBeDefined();\n      // Should have tracked error count\n    });\n\n    test('should calculate safety score', async () => {\n      const result = await pilot.executePilot();\n\n      expect(result.safetyScore).toBeGreaterThanOrEqual(0);\n      expect(result.safetyScore).toBeLessThanOrEqual(1);\n    });\n  });\n\n  describe('Success Rate Tracking', () => {\n    test('should achieve target success rate with good cases', async () => {\n      // Mock successful replacements\n      mockFs.readFileSync.mockReturnValue('const items: any[] = [];');\n\n      const result = await pilot.executePilot();\n\n      if (result.totalCasesProcessed > 0) {\n        expect(result.successRate).toBeGreaterThanOrEqual(0);\n        expect(result.successRate).toBeLessThanOrEqual(1);\n      }\n    });\n\n    test('should track successful and failed replacements', async () => {\n      const result = await pilot.executePilot();\n\n      expect(result.totalSuccessfulReplacements).toBeGreaterThanOrEqual(0);\n      expect(result.totalCasesProcessed).toBeGreaterThanOrEqual(result.totalSuccessfulReplacements);\n    });\n\n    test('should meet target success rate for pilot success', async () => {\n      // Mock high success scenario\n      mockFs.readFileSync.mockReturnValue('const items: any[] = [];');\n\n      const result = await pilot.executePilot();\n\n      if (result.successRate >= mockConfig.targetSuccessRate && result.buildFailures === 0) {\n        expect(result.targetAchieved).toBe(true);\n      }\n    });\n  });\n\n  describe('Safety Protocol Integration', () => {\n    test('should activate safety protocols on build failure', async () => {\n      // Mock build failure\n      mockExecSync.mockImplementation((command: string) => {\n        if (command.includes('tsc --noEmit')) {\n          throw new Error('Build failed');\n        }\n        return '';\n      });\n\n      const result = await pilot.executePilot();\n\n      expect(result.safetyMetrics.buildFailures).toBeGreaterThan(0);\n    });\n\n    test('should track safety metrics', async () => {\n      const result = await pilot.executePilot();\n\n      expect(result.safetyMetrics).toBeDefined();\n      expect(result.safetyMetrics.buildFailures).toBeGreaterThanOrEqual(0);\n      expect(result.safetyMetrics.rollbacksPerformed).toBeGreaterThanOrEqual(0);\n    });\n\n    test('should maintain safety score above threshold', async () => {\n      const result = await pilot.executePilot();\n\n      // Safety score should be calculated\n      expect(result.safetyScore).toBeGreaterThanOrEqual(0);\n    });\n  });\n\n  describe('Campaign Infrastructure Integration', () => {\n    test('should validate campaign integration', async () => {\n      const result = await pilot.executePilot();\n\n      // Should complete without integration errors\n      expect(result.success).toBeDefined();\n    });\n\n    test('should integrate with metrics system', async () => {\n      const result = await pilot.executePilot();\n\n      // Should have metrics data\n      expect(result.totalCasesProcessed).toBeGreaterThanOrEqual(0);\n      expect(result.batchesExecuted).toBeGreaterThanOrEqual(0);\n    });\n\n    test('should work with progressive improvement engine', async () => {\n      const result = await pilot.executePilot();\n\n      // Should complete without engine integration errors\n      expect(result.success).toBeDefined();\n    });\n  });\n\n  describe('Report Generation', () => {\n    test('should generate comprehensive pilot report', async () => {\n      const result = await pilot.executePilot();\n\n      // Should have generated report data\n      expect(result.pilotStartTime).toBeDefined();\n      expect(result.pilotEndTime).toBeDefined();\n      expect(result.batchResults).toBeDefined();\n    });\n\n    test('should include recommendations in report', async () => {\n      const result = await pilot.executePilot();\n\n      // Should have result data for recommendations\n      expect(result.success).toBeDefined();\n      expect(result.targetAchieved).toBeDefined();\n    });\n\n    test('should save report to correct location', async () => {\n      await pilot.executePilot();\n\n      // Should have attempted to create report directory\n      expect(mockFs.mkdirSync).toHaveBeenCalledWith(\n        expect.stringContaining('.kiro/campaign-reports'),\n        expect.any(Object)\n      );\n    });\n  });\n\n  describe('Error Handling and Edge Cases', () => {\n    test('should handle no high-confidence cases gracefully', async () => {\n      // Mock no TypeScript files\n      mockExecSync.mockReturnValue('');\n\n      const result = await pilot.executePilot();\n\n      expect(result.success).toBe(false);\n      expect(result.message).toContain('No high-confidence cases found');\n    });\n\n    test('should handle file read errors gracefully', async () => {\n      mockFs.readFileSync.mockImplementation(() => {\n        throw new Error('File read error');\n      });\n\n      const result = await pilot.executePilot();\n\n      // Should handle error without crashing\n      expect(result.success).toBeDefined();\n    });\n\n    test('should handle TypeScript compilation timeout', async () => {\n      mockExecSync.mockImplementation(() => {\n        throw new Error('Command timed out');\n      });\n\n      const result = await pilot.executePilot();\n\n      expect(result.success).toBe(false);\n    });\n\n    test('should handle backup creation failure', async () => {\n      mockFs.writeFileSync.mockImplementation(() => {\n        throw new Error('Backup creation failed');\n      });\n\n      const result = await pilot.executePilot();\n\n      // Should handle backup failure gracefully\n      expect(result.success).toBeDefined();\n    });\n  });\n\n  describe('Performance and Limits', () => {\n    test('should respect batch size limits', async () => {\n      const result = await pilot.executePilot();\n\n      // Each batch should respect size limits\n      result.batchResults.forEach(batch => {\n        expect(batch.casesProcessed).toBeLessThanOrEqual(mockConfig.maxFilesPerBatch);\n      });\n    });\n\n    test('should respect maximum batch count', async () => {\n      const result = await pilot.executePilot();\n\n      expect(result.batchesExecuted).toBeLessThanOrEqual(mockConfig.maxBatches);\n    });\n\n    test('should complete within reasonable time', async () => {\n      const startTime = Date.now();\n      await pilot.executePilot();\n      const endTime = Date.now();\n\n      const executionTime = endTime - startTime;\n      expect(executionTime).toBeLessThan(60000); // Should complete within 60 seconds\n    });\n  });\n\n  describe('Task 12.2 Requirements Validation', () => {\n    test('should focus on array types (any[] → unknown[])', async () => {\n      mockFs.readFileSync.mockReturnValue('const items: any[] = [];');\n\n      const result = await pilot.executePilot();\n\n      // Should have processed array type cases\n      expect(result.totalCasesProcessed).toBeGreaterThanOrEqual(0);\n    });\n\n    test('should focus on simple Record types', async () => {\n      mockFs.readFileSync.mockReturnValue('const config: Record<string, any> = {};');\n\n      const result = await pilot.executePilot();\n\n      // Should have processed Record type cases\n      expect(result.totalCasesProcessed).toBeGreaterThanOrEqual(0);\n    });\n\n    test('should target >80% successful replacements', async () => {\n      // Mock successful scenario\n      mockFs.readFileSync.mockReturnValue('const items: any[] = [];');\n\n      const result = await pilot.executePilot();\n\n      if (result.totalCasesProcessed > 0) {\n        // Should aim for high success rate\n        expect(mockConfig.targetSuccessRate).toBeGreaterThanOrEqual(0.8);\n      }\n    });\n\n    test('should target zero build failures', async () => {\n      // Mock successful scenario\n      mockFs.readFileSync.mockReturnValue('const items: any[] = [];');\n\n      const result = await pilot.executePilot();\n\n      // Target should be zero build failures\n      if (result.success) {\n        expect(result.buildFailures).toBe(0);\n      }\n    });\n\n    test('should monitor build stability with real-time validation', async () => {\n      const result = await pilot.executePilot();\n\n      // Should have performed real-time validation\n      expect(mockConfig.realTimeValidation).toBe(true);\n      expect(result.batchResults.length).toBeGreaterThanOrEqual(0);\n    });\n\n    test('should collect success rate metrics', async () => {\n      const result = await pilot.executePilot();\n\n      // Should have success rate metrics\n      expect(result.successRate).toBeGreaterThanOrEqual(0);\n      expect(result.successRate).toBeLessThanOrEqual(1);\n    });\n\n    test('should validate safety protocol effectiveness', async () => {\n      const result = await pilot.executePilot();\n\n      // Should have safety metrics\n      expect(result.safetyMetrics).toBeDefined();\n      expect(result.safetyScore).toBeGreaterThanOrEqual(0);\n    });\n\n    test('should validate integration with existing campaign infrastructure', async () => {\n      const result = await pilot.executePilot();\n\n      // Should complete without integration failures\n      expect(result.success).toBeDefined();\n      // Integration validation should not cause failures\n    });\n  });\n});\n\ndescribe('ConservativeReplacementPilot Integration Tests', () => {\n  let pilot: ConservativeReplacementPilot;\n\n  beforeEach(() => {\n    pilot = new ConservativeReplacementPilot({\n      maxFilesPerBatch: 5,\n      maxBatches: 2,\n      targetSuccessRate: 0.8,\n      realTimeValidation: true\n    });\n  });\n\n  test('should integrate with existing campaign system', async () => {\n    // This would test actual integration in a real environment\n    // For now, we verify the pilot can be instantiated and configured\n    expect(pilot).toBeDefined();\n  });\n\n  test('should work with real TypeScript files (when available)', async () => {\n    // This would test with actual files in a real environment\n    // For now, we verify the pilot handles file operations\n    expect(pilot).toBeDefined();\n  });\n});\n"],"version":3}