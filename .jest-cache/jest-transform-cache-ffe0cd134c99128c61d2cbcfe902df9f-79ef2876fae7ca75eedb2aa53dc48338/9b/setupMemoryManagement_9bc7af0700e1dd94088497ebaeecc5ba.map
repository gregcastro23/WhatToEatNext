{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/setupMemoryManagement.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/setupMemoryManagement.ts"],"sourcesContent":["/**\n * Memory Management Setup for Jest Tests\n * \n * This file configures memory management, garbage collection hints,\n * and cleanup procedures for the test environment.\n */\n\nimport { TestMemoryMonitor } from './utils/TestMemoryMonitor';\n\n// Global memory monitor instance\nlet globalMemoryMonitor: TestMemoryMonitor | null = null;\n\n// Memory management configuration\nconst MEMORY_CONFIG = {\n  // Enable garbage collection hints\n  enableGC: true,\n  // Memory check frequency (every N tests)\n  checkFrequency: 5,\n  // Force cleanup after memory-intensive tests\n  forceCleanupThreshold: 100, // MB\n  // Global memory limit before emergency cleanup\n  emergencyCleanupThreshold: 500, // MB\n};\n\n// Test counter for periodic memory checks\nlet testCounter = 0;\n\n/**\n * Initialize global memory monitoring\n */\nfunction initializeMemoryMonitoring(): void {\n  // Create memory monitor with CI-appropriate settings\n  globalMemoryMonitor = process.env.CI \n    ? TestMemoryMonitor.createForCI()\n    : TestMemoryMonitor.createDefault();\n\n  // Set up global test cache if not exists\n  if (!global.__TEST_CACHE__) {\n    global.__TEST_CACHE__ = new Map();\n  }\n\n  // Set up global test references array\n  if (!global.__TEST_REFS__) {\n    global.__TEST_REFS__ = [];\n  }\n\n  console.log('Memory monitoring initialized');\n}\n\n/**\n * Perform periodic memory checks\n */\nfunction performPeriodicMemoryCheck(): void {\n  testCounter++;\n  \n  if (testCounter % MEMORY_CONFIG.checkFrequency === 0 && globalMemoryMonitor) {\n    const memoryCheck = globalMemoryMonitor.checkMemoryUsage(`periodic-check-${testCounter}`);\n    \n    if (!memoryCheck.isWithinLimits) {\n      console.warn(`Memory check failed at test ${testCounter}:`, memoryCheck.errors);\n      \n      // Force cleanup if memory usage is too high\n      const currentMemoryMB = memoryCheck.currentUsage.heapUsed / (1024 * 1024);\n      if (currentMemoryMB > MEMORY_CONFIG.emergencyCleanupThreshold) {\n        console.warn('Emergency memory cleanup triggered');\n        performEmergencyCleanup();\n      }\n    }\n  }\n}\n\n/**\n * Emergency memory cleanup procedure\n */\nfunction performEmergencyCleanup(): void {\n  if (globalMemoryMonitor) {\n    globalMemoryMonitor.cleanup('emergency-cleanup');\n  }\n  \n  // Clear all global caches\n  if (global.__TEST_CACHE__) {\n    if (typeof global.__TEST_CACHE__.clear === 'function') {\n      global.__TEST_CACHE__.clear();\n    } else {\n      global.__TEST_CACHE__ = new Map();\n    }\n  }\n  \n  // Clear test references\n  if (global.__TEST_REFS__) {\n    global.__TEST_REFS__.length = 0;\n  }\n  \n  // Force garbage collection if available\n  if (global.gc) {\n    try {\n      global.gc();\n      console.log('Emergency garbage collection performed');\n    } catch (error) {\n      console.warn('Failed to perform emergency garbage collection:', error);\n    }\n  }\n  \n  // Reset Jest modules to free memory\n  if (jest && jest.resetModules) {\n    jest.resetModules();\n  }\n}\n\n/**\n * Setup memory management hooks\n */\nfunction setupMemoryHooks(): void {\n  // Before each test suite\n  beforeAll(async () => {\n    if (globalMemoryMonitor) {\n      globalMemoryMonitor.takeSnapshot('suite-start');\n    }\n    \n    // Initialize test-specific memory tracking\n    if (!global.__TEST_MEMORY_TRACKING__) {\n      global.__TEST_MEMORY_TRACKING__ = {\n        suiteStartMemory: process.memoryUsage().heapUsed,\n        testCount: 0,\n        cleanupCount: 0\n      };\n    }\n  });\n\n  // Before each test\n  beforeEach(async () => {\n    performPeriodicMemoryCheck();\n    \n    // Increment test counter\n    if (global.__TEST_MEMORY_TRACKING__) {\n      global.__TEST_MEMORY_TRACKING__.testCount++;\n    }\n    \n    // Clear mocks and reset modules for memory efficiency\n    jest.clearAllMocks();\n    jest.restoreAllMocks();\n    \n    // Clear any lingering DOM elements from previous tests\n    if (typeof document !== 'undefined') {\n      document.body.innerHTML = '';\n    }\n    \n    // Take memory snapshot for memory-intensive tests\n    if (globalMemoryMonitor) {\n      const testName = expect.getState().currentTestName || 'unknown-test';\n      if (testName.toLowerCase().includes('memory') || \n          testName.toLowerCase().includes('performance') ||\n          testName.toLowerCase().includes('integration') ||\n          testName.toLowerCase().includes('campaign')) {\n        globalMemoryMonitor.takeSnapshot(`before-${testName}`);\n      }\n    }\n  });\n\n  // After each test\n  afterEach(async () => {\n    const testName = expect.getState().currentTestName || 'unknown-test';\n    \n    if (globalMemoryMonitor) {\n      const memoryCheck = globalMemoryMonitor.checkMemoryUsage(`after-${testName}`);\n      \n      // Force cleanup for memory-intensive tests or if memory usage is high\n      const currentMemoryMB = memoryCheck.currentUsage.heapUsed / (1024 * 1024);\n      const shouldForceCleanup = currentMemoryMB > MEMORY_CONFIG.forceCleanupThreshold || \n                                testName.toLowerCase().includes('memory') ||\n                                testName.toLowerCase().includes('integration') ||\n                                testName.toLowerCase().includes('campaign') ||\n                                testName.toLowerCase().includes('performance');\n      \n      if (shouldForceCleanup) {\n        globalMemoryMonitor.cleanup(testName);\n        \n        if (global.__TEST_MEMORY_TRACKING__) {\n          global.__TEST_MEMORY_TRACKING__.cleanupCount++;\n        }\n      }\n      \n      // Log warnings if memory usage is concerning\n      if (memoryCheck.warnings.length > 0) {\n        console.warn(`Memory warnings for test \"${testName}\":`, memoryCheck.warnings);\n      }\n      \n      // Emergency cleanup if memory usage is critical\n      if (currentMemoryMB > MEMORY_CONFIG.emergencyCleanupThreshold) {\n        console.warn(`Emergency cleanup triggered for test \"${testName}\" (${currentMemoryMB.toFixed(2)}MB)`);\n        performEmergencyCleanup();\n      }\n    }\n    \n    // Clear any test-specific global references\n    if (global.__TEST_REFS__) {\n      global.__TEST_REFS__.length = 0;\n    }\n    \n    // Clear any test-specific DOM event listeners\n    if (typeof window !== 'undefined' && window.removeEventListener) {\n      // Remove common event listeners that might leak\n      ['resize', 'scroll', 'click', 'keydown', 'keyup'].forEach(eventType => {\n        const listeners = (window as any)._eventListeners?.[eventType] || [];\n        listeners.forEach((listener: any) => {\n          window.removeEventListener(eventType, listener);\n        });\n      });\n    }\n  });\n\n  // After each test suite\n  afterAll(async () => {\n    if (globalMemoryMonitor) {\n      globalMemoryMonitor.takeSnapshot('suite-end');\n      \n      // Generate memory report for the suite\n      const summary = globalMemoryMonitor.getMemorySummary();\n      const memoryIncrease = summary.totalIncrease;\n      \n      if (memoryIncrease > 25) { // Reduced threshold from 50MB to 25MB\n        const tracking = global.__TEST_MEMORY_TRACKING__;\n        console.log('Memory usage summary for test suite:', {\n          initialMemory: `${summary.initialMemory.toFixed(2)}MB`,\n          finalMemory: `${summary.currentMemory.toFixed(2)}MB`,\n          peakMemory: `${summary.peakMemory.toFixed(2)}MB`,\n          totalIncrease: `${memoryIncrease.toFixed(2)}MB`,\n          duration: `${(summary.testDuration / 1000).toFixed(2)}s`,\n          testsRun: tracking?.testCount || 0,\n          cleanupsPerformed: tracking?.cleanupCount || 0\n        });\n      }\n      \n      // Perform final cleanup\n      globalMemoryMonitor.cleanup('suite-cleanup');\n    }\n    \n    // Final emergency cleanup if needed\n    const finalMemory = process.memoryUsage().heapUsed / (1024 * 1024);\n    if (finalMemory > MEMORY_CONFIG.emergencyCleanupThreshold) {\n      console.warn(`Final emergency cleanup triggered (${finalMemory.toFixed(2)}MB)`);\n      performEmergencyCleanup();\n    }\n    \n    // Clear suite-level tracking\n    if (global.__TEST_MEMORY_TRACKING__) {\n      delete global.__TEST_MEMORY_TRACKING__;\n    }\n  });\n}\n\n/**\n * Add garbage collection hints\n */\nfunction addGarbageCollectionHints(): void {\n  // Add global utility for manual garbage collection\n  global.forceGC = () => {\n    if (global.gc) {\n      try {\n        global.gc();\n        return true;\n      } catch (error) {\n        console.warn('Failed to force garbage collection:', error);\n        return false;\n      }\n    }\n    return false;\n  };\n  \n  // Add memory monitoring utilities to global scope\n  global.getMemoryUsage = () => {\n    const usage = process.memoryUsage();\n    return {\n      heapUsed: `${(usage.heapUsed / 1024 / 1024).toFixed(2)}MB`,\n      heapTotal: `${(usage.heapTotal / 1024 / 1024).toFixed(2)}MB`,\n      external: `${(usage.external / 1024 / 1024).toFixed(2)}MB`,\n      arrayBuffers: `${(usage.arrayBuffers / 1024 / 1024).toFixed(2)}MB`\n    };\n  };\n  \n  // Add cleanup utility\n  global.cleanupTestMemory = () => {\n    if (globalMemoryMonitor) {\n      return globalMemoryMonitor.cleanup('manual-cleanup');\n    }\n    return null;\n  };\n}\n\n/**\n * Configure process-level memory management\n */\nfunction configureProcessMemory(): void {\n  // Set Node.js memory limits if not already set\n  if (!process.env.NODE_OPTIONS?.includes('--max-old-space-size')) {\n    // Set reasonable memory limit for tests (2GB)\n    process.env.NODE_OPTIONS = (process.env.NODE_OPTIONS || '') + ' --max-old-space-size=2048';\n  }\n  \n  // Enable garbage collection exposure if not already enabled\n  if (!process.env.NODE_OPTIONS?.includes('--expose-gc')) {\n    process.env.NODE_OPTIONS = (process.env.NODE_OPTIONS || '') + ' --expose-gc';\n  }\n  \n  // Handle process memory warnings\n  process.on('warning', (warning) => {\n    if (warning.name === 'MaxListenersExceededWarning' || \n        warning.message?.includes('memory')) {\n      console.warn('Process memory warning:', warning.message);\n      \n      // Trigger emergency cleanup on memory warnings\n      if (warning.message?.includes('memory') || warning.message?.includes('heap')) {\n        performEmergencyCleanup();\n      }\n    }\n  });\n  \n  // Handle uncaught exceptions that might be memory-related\n  process.on('uncaughtException', (error) => {\n    if (error.message?.includes('out of memory') || \n        error.message?.includes('heap') ||\n        error.name === 'RangeError') {\n      console.error('Memory-related uncaught exception:', error.message);\n      performEmergencyCleanup();\n    }\n  });\n}\n\n// Initialize memory management\ntry {\n  initializeMemoryMonitoring();\n  setupMemoryHooks();\n  addGarbageCollectionHints();\n  configureProcessMemory();\n  \n  console.log('Memory management setup completed successfully');\n} catch (error) {\n  console.error('Failed to initialize memory management:', error);\n}\n\n// Export utilities for use in tests\nexport {\n  TestMemoryMonitor,\n  performEmergencyCleanup,\n  MEMORY_CONFIG\n};\n\n// Global type declarations\ndeclare global {\n  var forceGC: () => boolean;\n  var getMemoryUsage: () => {\n    heapUsed: string;\n    heapTotal: string;\n    external: string;\n    arrayBuffers: string;\n  };\n  var cleanupTestMemory: () => any;\n  var __TEST_CACHE__: Map<string, any> | { clear: () => void };\n  var __TEST_REFS__: any[];\n  var __TEST_MEMORY_TRACKING__: {\n    suiteStartMemory: number;\n    testCount: number;\n    cleanupCount: number;\n  };\n}\n\nexport default {};"],"version":3}