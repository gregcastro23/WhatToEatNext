{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/calculations/core/kalchmEngine.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/calculations/core/kalchmEngine.ts"],"sourcesContent":["/**\n * Kalchm and Monica Constants Calculation Engine\n * \n * This module implements the core alchemical calculations using the exact formulas\n * for Kalchm (K_alchm) and Monica Constant (M) as specified in the system requirements.\n */\n\n\nimport type { ElementalProperties, PlanetaryPosition } from \"@/types/alchemy\";\nimport { getCachedCalculation } from '../../utils/calculationCache';\n\n/**\n * Core alchemical properties derived from planetary positions\n */\nexport interface AlchemicalProperties {\n  Spirit: number;\n  Essence: number;\n  Matter: number;\n  Substance: number;\n}\n\n/**\n * Elemental values derived from zodiac signs and planetary influences\n */\nexport interface ElementalValues { Fire: number;\n  Water: number;\n  Air: number;\n  Earth: number;\n}\n\n/**\n * Complete thermodynamic calculation results\n */\nexport interface ThermodynamicResults {\n  heat: number;\n  entropy: number;\n  reactivity: number;\n  gregsEnergy: number;\n  kalchm: number;\n  monicaConstant: number;\n}\n\n/**\n * Complete alchemical calculation result\n */\nexport interface KalchmResult {\n  alchemicalProperties: AlchemicalProperties;\n  elementalValues: ElementalValues;\n  thermodynamics: ThermodynamicResults;\n  dominantElement: keyof ElementalValues;\n  dominantProperty: keyof AlchemicalProperties;\n  timestamp: string;\n}\n\n/**\n * Calculate Heat using the exact formula:\n * Heat = (Spirit^2 + Fire^2) / (Substance + Essence + Matter + Water + (Air || 0) + (Earth || 0))^2\n */\nexport function calculateHeat(\n  Spirit: number, \n  Fire: number, \n  Substance: number, \n  Essence: number,\n  Matter: number, Water: number, Air: number, Earth: number\n): number {\n  const numerator = Math.pow(Spirit, 2) + Math.pow(Fire, 2);\n  const denominator = Math.pow(Substance + Essence + Matter + Water + (Air || 0) + (Earth || 0), 2);\n  \n  // Prevent division by zero\n  if (denominator === 0) return 0.5;\n  \n  return numerator / denominator;\n}\n\n/**\n * Calculate Entropy using the exact formula:\n * Entropy = (Spirit^2 + Substance^2 + Fire^2 + Air^2) / (Essence + Matter + Earth + Water)^2\n */\nexport function calculateEntropy(\n  Spirit: number, \n  Substance: number, \n  Fire: number, Air: number,\n  Essence: number, \n  Matter: number, Earth: number, Water: number\n): number {\n  const numerator = Math.pow(Spirit, 2) + Math.pow(Substance, 2) + Math.pow(Fire, 2) + Math.pow(Air, 2);\n  const denominator = Math.pow(Essence + Matter + (Earth || 0) + (Water || 0), 2);\n  \n  // Prevent division by zero\n  if (denominator === 0) return 0.5;\n  \n  return numerator / denominator;\n}\n\n/**\n * Calculate Reactivity using the exact formula:\n * Reactivity = (Spirit^2 + Substance^2 + Essence^2 + Fire^2 + Air^2 + Water^2) / (Matter + Earth)^2\n */\nexport function calculateReactivity(\n  Spirit: number, \n  Substance: number, \n  Essence: number, \n  Fire: number, Air: number, Water: number, \n  Matter: number, Earth: number\n): number {\n  const numerator = Math.pow(Spirit, 2) + Math.pow(Substance, 2) + Math.pow(Essence, 2)\n    + Math.pow(Fire, 2) + Math.pow(Air, 2) + Math.pow(Water, 2);\n  const denominator = Math.pow((Matter || 0) + (Earth || 0), 2);\n  \n  // Prevent division by zero\n  if (denominator === 0) return 0.5;\n  \n  return numerator / denominator;\n}\n\n/**\n * Calculate Greg's Energy using the exact formula:\n * Greg's Energy = Heat - (Entropy × Reactivity)\n */\nexport function calculateGregsEnergy(\n  heat: number, \n  entropy: number, \n  reactivity: number\n): number {\n  return heat - (entropy * reactivity);\n}\n\n/**\n * Calculate Kalchm (K_alchm) using the exact formula:\n * K_alchm = (Spirit^Spirit * Essence^Essence) / (Matter^Matter * Substance^Substance)\n */\nexport function calculateKAlchm(\n  Spirit: number, \n  Essence: number, \n  Matter: number, \n  Substance: number\n): number {\n  // Ensure all values are positive to avoid NaN in power calculations\n  const safespirit = Math.max(0.1, Spirit);\n  const safeessence = Math.max(0.1, Essence);\n  const safematter = Math.max(0.1, Matter);\n  const safesubstance = Math.max(0.1, Substance);\n  \n  const numerator = Math.pow(safespirit, safespirit) * Math.pow(safeessence, safeessence);\n  const denominator = Math.pow(safematter, safematter) * Math.pow(safesubstance, safesubstance);\n  \n  // Prevent division by zero\n  if (denominator === 0) return 1.0;\n  \n  return numerator / denominator;\n}\n\n/**\n * Calculate Monica Constant using the exact formula:\n * M = -Greg's Energy / (Reactivity × ln(K_alchm))\n */\nexport function calculateMonicaConstant(\n  gregsEnergy: number, \n  reactivity: number, \n  K_alchm: number\n): number {\n  // Check for valid K_alchm\n  if (K_alchm <= 0) return NaN;\n  \n  const ln_K = Math.log(K_alchm);\n  \n  // Check for valid natural log\n  if (ln_K === 0) return NaN;\n  \n  return -gregsEnergy / (reactivity * ln_K);\n}\n\n/**\n * Map planetary positions to alchemical properties\n * Based on traditional planetary correspondences\n */\nexport function calculateAlchemicalProperties(\n  planetaryPositions: { [key: string]: PlanetaryPosition }\n): AlchemicalProperties {\n  const properties: AlchemicalProperties = {\n    Spirit: 0,\n    Essence: 0,\n    Matter: 0,\n    Substance: 0\n  };\n\n  // Planetary to alchemical property mappings\n  const planetaryMappings = {\n    Sun: { Spirit: 1.0, Essence: 0.3, Matter: 0.2, Substance: 0.1 },\n    moon: { Spirit: 0.2, Essence: 1.0, Matter: 0.8, Substance: 0.3 },\n    Mercury: { Spirit: 0.8, Essence: 0.2, Matter: 0.1, Substance: 0.9 },\n    Venus: { Spirit: 0.3, Essence: 0.9, Matter: 0.7, Substance: 0.2 },\n    Mars: { Spirit: 0.6, Essence: 0.8, Matter: 0.9, Substance: 0.1 },\n    Jupiter: { Spirit: 0.9, Essence: 0.7, Matter: 0.2, Substance: 0.3 },\n    Saturn: { Spirit: 0.7, Essence: 0.1, Matter: 0.9, Substance: 0.8 },\n    Uranus: { Spirit: 0.4, Essence: 0.6, Matter: 0.3, Substance: 0.7 },\n    Neptune: { Spirit: 0.2, Essence: 0.8, Matter: 0.4, Substance: 0.6 },\n    Pluto: { Spirit: 0.5, Essence: 0.7, Matter: 0.9, Substance: 0.4 }\n  };\n\n  // Process each planet\n  Object.entries(planetaryPositions || {}).forEach(([planet, position]) => {\n    const planetKey = planet?.charAt(0).toUpperCase() + planet?.slice(1).toLowerCase();\n    const mapping = planetaryMappings[planetKey as keyof typeof planetaryMappings];\n    \n    if (mapping && position) {\n      // Base contribution\n      let strength = 1.0;\n      \n      // Apply dignity modifiers if available\n      if (position.sign) {\n        strength *= getDignityModifier(planet, position.sign);\n      }\n      \n      // Add to properties\n      properties.Spirit += (mapping.Spirit || 0) * strength;\n      properties.Essence += (mapping.Essence || 0) * strength;\n      properties.Matter += (mapping.Matter || 0) * strength;\n      properties.Substance += (mapping.Substance || 0) * strength;\n    }\n  });\n\n  // Normalize to reasonable ranges (1-10 scale as in the example)\n  const total = properties.Spirit + properties.Essence + properties.Matter + properties.Substance;\n  if (total > 0) {\n    const scale = 20 / total; // Scale to approximately match example values\n    properties.Spirit = Math.max(1, properties.Spirit * scale);\n    properties.Essence = Math.max(1, properties.Essence * scale);\n    properties.Matter = Math.max(1, properties.Matter * scale);\n    properties.Substance = Math.max(1, properties.Substance * scale);\n  }\n\n  return properties;\n}\n\n/**\n * Calculate elemental values from zodiac signs and planetary influences\n */\nexport function calculateElementalValues(\n  planetaryPositions: { [key: string]: PlanetaryPosition }\n): ElementalValues {\n  const elements: ElementalValues = { Fire: 0, Water: 0, Air: 0, Earth: 0\n   };\n\n  // Sign to element mapping\n  const signElements: Record<string, keyof ElementalValues> = {\n    aries: 'Fire', leo: 'Fire', sagittarius: 'Fire',\n    cancer: 'Water', scorpio: 'Water', pisces: 'Water',\n    gemini: 'Air', libra: 'Air', aquarius: 'Air',\n    taurus: 'Earth', virgo: 'Earth', capricorn: 'Earth'\n  };\n\n  // Process each planet's sign\n  Object.entries(planetaryPositions || {}).forEach(([planet, position]) => {\n    if (position.sign) {\n      const element = signElements[position.sign?.toLowerCase()];\n      if (element) {\n        // Weight by planet importance\n        let weight = 1.0;\n        const planetName = planet?.charAt(0).toUpperCase() + planet?.slice(1).toLowerCase();\n        if (planetName === 'Sun' || planetName === 'Moon') {\n          weight = 2.0;\n        } else if (['Mercury', 'Venus', 'Mars'].includes(planetName)) {\n          weight = 1.5;\n        }\n        \n        elements[element] += weight;\n      }\n    }\n  });\n\n  // Normalize to 0.1-1.0 range as in the example\n  const total = elements.Fire + elements.Water + elements.Air + elements.Earth;\n  if (total > 0) {\n    const scale = 2.9 / total; // Scale to match example range\n    elements.Fire = Math.max(0.1, Math.min(1.0, elements.Fire * scale));\n    elements.Water = Math.max(0.1, Math.min(1.0, elements.Water * scale));\n    elements.Air = Math.max(0.1, Math.min(1.0, elements.Air * scale));\n    elements.Earth = Math.max(0.1, Math.min(1.0, elements.Earth * scale));\n  }\n\n  return elements;\n}\n\n/**\n * Get dignity modifier for a planet in a sign\n */\nfunction getDignityModifier(planet: string, sign: string): number {\n  const dignities: Record<string, Record<string, number>> = {\n    Sun: {},\n    moon: {},\n    Mercury: {},\n    Venus: {},\n    Mars: {},\n    Jupiter: {},\n    Saturn: { capricorn: 1.5, aquarius: 1.5, libra: 1.3, cancer: 0.7, leo: 0.7, aries: 0.5 }\n  };\n\n  const planetKey = planet?.charAt(0).toUpperCase() + planet?.slice(1).toLowerCase();\n  const signKey = sign?.toLowerCase();\n  \n  return dignities[planetKey]?.[signKey] || 1.0;\n}\n\n/**\n * Main Kalchm calculation function\n * Integrates all calculations and returns complete results\n */\nexport function calculateKalchmResults(\n  planetaryPositions: { [key: string]: PlanetaryPosition }\n): KalchmResult {\n  const cacheKey = `kalchm_${JSON.stringify(planetaryPositions)}`;\n  \n  return getCachedCalculation(\n    cacheKey,\n    { positions: planetaryPositions },\n    () => {\n      // Calculate alchemical properties\n      const alchemicalProperties = calculateAlchemicalProperties(planetaryPositions);\n      \n      // Calculate elemental values\n      const elementalValues = calculateElementalValues(planetaryPositions);\n      \n      // Calculate thermodynamic properties\n      const heat = calculateHeat(\n        alchemicalProperties.Spirit,\n        elementalValues.Fire,\n        alchemicalProperties.Substance,\n        alchemicalProperties.Essence,\n        alchemicalProperties.Matter,\n        elementalValues.Water,\n        elementalValues.Air,\n        elementalValues.Earth\n      );\n      \n      const entropy = calculateEntropy(\n        alchemicalProperties.Spirit,\n        alchemicalProperties.Substance,\n        elementalValues.Fire,\n        elementalValues.Air,\n        alchemicalProperties.Essence,\n        alchemicalProperties.Matter,\n        elementalValues.Earth,\n        elementalValues.Water\n      );\n      \n      const reactivity = calculateReactivity(\n        alchemicalProperties.Spirit,\n        alchemicalProperties.Substance,\n        alchemicalProperties.Essence,\n        elementalValues.Fire,\n        elementalValues.Air,\n        elementalValues.Water,\n        alchemicalProperties.Matter,\n        elementalValues.Earth\n      );\n      \n      const gregsEnergy = calculateGregsEnergy(heat, entropy, reactivity);\n      \n      const kalchm = calculateKAlchm(\n        alchemicalProperties.Spirit,\n        alchemicalProperties.Essence,\n        alchemicalProperties.Matter,\n        alchemicalProperties.Substance\n      );\n      \n      const monicaConstant = calculateMonicaConstant(gregsEnergy, reactivity, kalchm);\n      \n      // Determine dominant element and property\n      const dominantElement = Object.entries(elementalValues)\n        .reduce((a, b) => elementalValues[a[0] as keyof ElementalValues] > elementalValues[b[0] as keyof ElementalValues] ? a : b)[0] as keyof ElementalValues;\n      \n      const dominantProperty = Object.entries(alchemicalProperties)\n        .reduce((a, b) => alchemicalProperties[a[0] as keyof AlchemicalProperties] > alchemicalProperties[b[0] as keyof AlchemicalProperties] ? a : b)[0] as keyof AlchemicalProperties;\n      \n      return {\n        alchemicalProperties,\n        elementalValues,\n        thermodynamics: {\n          heat,\n          entropy,\n          reactivity,\n          gregsEnergy,\n          kalchm,\n          monicaConstant\n        },\n        dominantElement,\n        dominantProperty,\n        timestamp: new Date()?.toISOString()\n      };\n    },\n    300000 // 5 minute cache\n  ) as KalchmResult;\n}\n\n/**\n * Convert KalchmResult to ElementalProperties format for compatibility\n */\nexport function toElementalProperties(result: KalchmResult): ElementalProperties {\n  return { Fire: result?.elementalValues?.Fire, Water: result?.elementalValues?.Water, Air: result?.elementalValues?.Air, Earth: result.elementalValues.Earth\n   };\n}\n\n/**\n * Get dominant property from alchemical properties\n */\nfunction getDominantProperty(properties: AlchemicalProperties): keyof AlchemicalProperties {\n  return Object.entries(properties)\n    .reduce((max, [key, value]) => \n      value > max.value ? { key: key as keyof AlchemicalProperties, value } : max, \n      { key: 'Spirit' as keyof AlchemicalProperties, value: 0 }\n    ).key;\n}\n\n/**\n * Default export providing all kalchm engine functionality\n */\nconst kalchmEngine = {\n  calculateHeat,\n  calculateEntropy,\n  calculateReactivity,\n  calculateGregsEnergy,\n  calculateKAlchm,\n  calculateMonicaConstant,\n  calculateAlchemicalProperties,\n  calculateElementalValues,\n  calculateKalchmResults,\n  toElementalProperties,\n  getDominantProperty\n};\n\nexport default kalchmEngine; "],"version":3}