{"file":"/Users/GregCastro/Desktop/WhatToEatNext/backups/first-wave-2025-08-11T05-19-26-813Z/src/__tests__/utils/TestMemoryMonitor.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/backups/first-wave-2025-08-11T05-19-26-813Z/src/__tests__/utils/TestMemoryMonitor.ts"],"sourcesContent":["/**\n * Test Memory Monitor Utility\n *\n * Provides memory monitoring and management capabilities for test environments.\n * Used in comprehensive validation testing to ensure memory usage stays within limits.\n */\n\ninterface MemorySnapshot {\n  timestamp: Date;\n  testName: string;\n  heapUsed: number;\n  heapTotal: number;\n  external: number;\n  arrayBuffers: number;\n  rss: number;\n}\n\ninterface MemoryCheck {\n  isWithinLimits: boolean;\n  currentUsage: NodeJS.MemoryUsage;\n  warnings: string[];\n  errors: string[];\n}\n\ninterface MemorySummary {\n  initialMemory: number;\n  currentMemory: number;\n  peakMemory: number;\n  totalIncrease: number;\n  testDuration: number;\n}\n\nexport class TestMemoryMonitor {\n  private snapshots: MemorySnapshot[] = [];\n  private startTime: number;\n  private memoryLimits: {\n    heapUsed: number;\n    heapTotal: number;\n    external: number;\n    rss: number;\n  };\n\n  constructor(limits?: Partial<TestMemoryMonitor['memoryLimits']>) {\n    this.startTime = Date.now();\n    this.memoryLimits = {\n      heapUsed: 200 * 1024 * 1024, // 200MB\n      heapTotal: 300 * 1024 * 1024, // 300MB\n      external: 50 * 1024 * 1024, // 50MB\n      rss: 400 * 1024 * 1024, // 400MB\n      ...limits,\n    };\n  }\n\n  /**\n   * Create a memory monitor with default settings\n   */\n  static createDefault(): TestMemoryMonitor {\n    return new TestMemoryMonitor();\n  }\n\n  /**\n   * Create a memory monitor with CI-appropriate settings (more restrictive)\n   */\n  static createForCI(): TestMemoryMonitor {\n    return new TestMemoryMonitor({\n      heapUsed: 150 * 1024 * 1024, // 150MB\n      heapTotal: 200 * 1024 * 1024, // 200MB\n      external: 30 * 1024 * 1024, // 30MB\n      rss: 250 * 1024 * 1024, // 250MB\n    });\n  }\n\n  /**\n   * Take a memory snapshot at a specific point in time\n   */\n  takeSnapshot(testName: string): MemorySnapshot {\n    const usage = process.memoryUsage();\n    const snapshot: MemorySnapshot = {\n      timestamp: new Date(),\n      testName,\n      heapUsed: usage.heapUsed,\n      heapTotal: usage.heapTotal,\n      external: usage.external,\n      arrayBuffers: usage.arrayBuffers,\n      rss: usage.rss,\n    };\n\n    this.snapshots.push(snapshot);\n    return snapshot;\n  }\n\n  /**\n   * Get current memory usage\n   */\n  getCurrentMemoryUsage(): NodeJS.MemoryUsage {\n    return process.memoryUsage();\n  }\n\n  /**\n   * Check if current memory usage is within limits\n   */\n  checkMemoryUsage(_testName: string): MemoryCheck {\n    const currentUsage = this.getCurrentMemoryUsage();\n    const warnings: string[] = [];\n    const errors: string[] = [];\n\n    // Check against limits\n    if (currentUsage.heapUsed > this.memoryLimits.heapUsed * 0.8) {\n      warnings.push(\n        `Heap usage approaching limit: ${(currentUsage.heapUsed / 1024 / 1024).toFixed(2)}MB`,\n      );\n    }\n\n    if (currentUsage.heapUsed > this.memoryLimits.heapUsed) {\n      errors.push(\n        `Heap usage exceeded limit: ${(currentUsage.heapUsed / 1024 / 1024).toFixed(2)}MB > ${(this.memoryLimits.heapUsed / 1024 / 1024).toFixed(2)}MB`,\n      );\n    }\n\n    if (currentUsage.heapTotal > this.memoryLimits.heapTotal) {\n      errors.push(\n        `Heap total exceeded limit: ${(currentUsage.heapTotal / 1024 / 1024).toFixed(2)}MB > ${(this.memoryLimits.heapTotal / 1024 / 1024).toFixed(2)}MB`,\n      );\n    }\n\n    if (currentUsage.external > this.memoryLimits.external) {\n      errors.push(\n        `External memory exceeded limit: ${(currentUsage.external / 1024 / 1024).toFixed(2)}MB > ${(this.memoryLimits.external / 1024 / 1024).toFixed(2)}MB`,\n      );\n    }\n\n    if (currentUsage.rss > this.memoryLimits.rss) {\n      errors.push(\n        `RSS exceeded limit: ${(currentUsage.rss / 1024 / 1024).toFixed(2)}MB > ${(this.memoryLimits.rss / 1024 / 1024).toFixed(2)}MB`,\n      );\n    }\n\n    return {\n      isWithinLimits: errors.length === 0,\n      currentUsage,\n      warnings,\n      errors,\n    };\n  }\n\n  /**\n   * Get memory usage summary since monitoring started\n   */\n  getMemorySummary(): MemorySummary {\n    if (this.snapshots.length === 0) {\n      const current = this.getCurrentMemoryUsage();\n      return {\n        initialMemory: current.heapUsed / 1024 / 1024,\n        currentMemory: current.heapUsed / 1024 / 1024,\n        peakMemory: current.heapUsed / 1024 / 1024,\n        totalIncrease: 0,\n        testDuration: Date.now() - this.startTime,\n      };\n    }\n\n    const initialSnapshot = this.snapshots[0];\n    const currentUsage = this.getCurrentMemoryUsage();\n    const peakMemory = Math.max(...this.snapshots.map(s => s.heapUsed), currentUsage.heapUsed);\n\n    return {\n      initialMemory: initialSnapshot.heapUsed / 1024 / 1024,\n      currentMemory: currentUsage.heapUsed / 1024 / 1024,\n      peakMemory: peakMemory / 1024 / 1024,\n      totalIncrease: (currentUsage.heapUsed - initialSnapshot.heapUsed) / 1024 / 1024,\n      testDuration: Date.now() - this.startTime,\n    };\n  }\n\n  /**\n   * Get memory usage trend analysis\n   */\n  getMemoryTrend(): {\n    isIncreasing: boolean;\n    averageIncrease: number;\n    concerningTrend: boolean;\n  } {\n    if (this.snapshots.length < 3) {\n      return {\n        isIncreasing: false,\n        averageIncrease: 0,\n        concerningTrend: false,\n      };\n    }\n\n    const recentSnapshots = this.snapshots.slice(-5); // Last 5 snapshots\n    const increases: number[] = [];\n\n    for (let i = 1; i < recentSnapshots.length; i++) {\n      const increase = recentSnapshots[i].heapUsed - recentSnapshots[i - 1].heapUsed;\n      increases.push(increase);\n    }\n\n    const averageIncrease = increases.reduce((sum, inc) => sum + inc, 0) / increases.length;\n    const isIncreasing = averageIncrease > 0;\n    const concerningTrend = averageIncrease > 10 * 1024 * 1024; // More than 10MB average increase\n\n    return {\n      isIncreasing,\n      averageIncrease: averageIncrease / 1024 / 1024, // Convert to MB\n      concerningTrend,\n    };\n  }\n\n  /**\n   * Perform memory cleanup and optimization\n   */\n  cleanup(testName: string): {\n    success: boolean;\n    freedMemory: string;\n    actions: string[];\n  } {\n    const beforeCleanup = this.getCurrentMemoryUsage();\n    const actions: string[] = [];\n\n    try {\n      // Clear any test-specific caches\n      if (global.__TEST_CACHE__) {\n        if (typeof global.__TEST_CACHE__.clear === 'function') {\n          global.__TEST_CACHE__.clear();\n          actions.push('Cleared test cache');\n        }\n      }\n\n      // Clear test references\n      if (global.__TEST_REFS__) {\n        global.__TEST_REFS__.length = 0;\n        actions.push('Cleared test references');\n      }\n\n      // Force garbage collection if available\n      if (global.gc) {\n        global.gc();\n        actions.push('Forced garbage collection');\n      }\n\n      // Clear Jest mocks and modules\n      if (jest) {\n        jest.clearAllMocks();\n        actions.push('Cleared Jest mocks');\n\n        if (jest.resetModules) {\n          jest.resetModules();\n          actions.push('Reset Jest modules');\n        }\n      }\n\n      const afterCleanup = this.getCurrentMemoryUsage();\n      const freedMemory = (beforeCleanup.heapUsed - afterCleanup.heapUsed) / 1024 / 1024;\n\n      // Take snapshot after cleanup\n      this.takeSnapshot(`${testName}-cleanup`);\n\n      return {\n        success: true,\n        freedMemory: `${freedMemory.toFixed(2)}MB`,\n        actions,\n      };\n    } catch (error) {\n      console.error('Memory cleanup failed:', error);\n      return {\n        success: false,\n        freedMemory: '0MB',\n        actions: [...actions, `Cleanup failed: ${(error as Error).message}`],\n      };\n    }\n  }\n\n  /**\n   * Get detailed memory report\n   */\n  getDetailedReport(): {\n    summary: MemorySummary;\n    trend: ReturnType<TestMemoryMonitor['getMemoryTrend']>;\n    snapshots: MemorySnapshot[];\n    recommendations: string[];\n  } {\n    const summary = this.getMemorySummary();\n    const trend = this.getMemoryTrend();\n    const recommendations: string[] = [];\n\n    // Generate recommendations based on analysis\n    if (summary.totalIncrease > 50) {\n      recommendations.push('Consider reducing test complexity or adding more cleanup');\n    }\n\n    if (trend.concerningTrend) {\n      recommendations.push('Memory usage is increasing rapidly - investigate memory leaks');\n    }\n\n    if (summary.peakMemory > 150) {\n      recommendations.push('Peak memory usage is high - consider splitting tests');\n    }\n\n    if (this.snapshots.length > 100) {\n      recommendations.push('Many snapshots taken - consider reducing monitoring frequency');\n    }\n\n    return {\n      summary,\n      trend,\n      snapshots: this.snapshots,\n      recommendations,\n    };\n  }\n\n  /**\n   * Reset monitoring state\n   */\n  reset(): void {\n    this.snapshots = [];\n    this.startTime = Date.now();\n  }\n\n  /**\n   * Export memory data for analysis\n   */\n  exportData(): {\n    metadata: {\n      startTime: number;\n      endTime: number;\n      duration: number;\n      snapshotCount: number;\n    };\n    snapshots: MemorySnapshot[];\n    summary: MemorySummary;\n  } {\n    return {\n      metadata: {\n        startTime: this.startTime,\n        endTime: Date.now(),\n        duration: Date.now() - this.startTime,\n        snapshotCount: this.snapshots.length,\n      },\n      snapshots: this.snapshots,\n      summary: this.getMemorySummary(),\n    };\n  }\n}\n"],"version":3}