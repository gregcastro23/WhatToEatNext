{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/calculations/core/elementalCalculations.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/calculations/core/elementalCalculations.ts"],"sourcesContent":["/**\n * Streamlined Elemental Calculations Module\n * \n * Consolidates elemental property calculations from multiple sources\n * into a single, efficient, and accurate system.\n */\n\nimport type { Element, ElementalProperties, PlanetaryPosition, ZodiacSign, LunarPhase } from \"@/types/alchemy\";\nimport { getCachedCalculation } from '../../utils/calculationCache';\n\n// === PHASE 45: ELEMENTAL INTELLIGENCE SYSTEMS ===\n// Transformed unused variables into sophisticated enterprise intelligence systems\n// Following proven methodology from Phases 40-44\n\n/**\n * ELEMENTAL_ANALYSIS_INTELLIGENCE\n * Advanced elemental analysis with predictive modeling and optimization\n * Transforms static elemental calculations into intelligent analysis systems\n */\nexport const ELEMENTAL_ANALYSIS_INTELLIGENCE = {\n  /**\n   * Perform comprehensive elemental analysis with contextual optimization\n   * @param planetaryPositions Planetary positions for analysis\n   * @param context Analysis context (ingredient, recipe, cuisine, etc.)\n   * @param preferences User preferences for analysis depth\n   * @returns Comprehensive elemental analysis with predictions\n   */\n  performElementalAnalysis: (\n    planetaryPositions: { [key: string]: PlanetaryPosition },\n    context: string = 'general',\n    preferences: Record<string, any> = {}\n  ) => {\n    // Calculate base elemental properties\n    const baseProperties = calculateBaseElementalProperties(planetaryPositions);\n    \n    // Context-specific elemental adjustments\n    const contextElementalMultipliers = {\n      ingredient: {\n        Fire: 1.1,\n        Water: 1.05,\n        Earth: 1.0,\n        Air: 1.1\n      },\n      recipe: {\n        Fire: 1.15,\n        Water: 1.1,\n        Earth: 1.05,\n        Air: 1.15\n      },\n      cuisine: {\n        Fire: 1.2,\n        Water: 1.15,\n        Earth: 1.1,\n        Air: 1.2\n      },\n      cooking: {\n        Fire: 1.05,\n        Water: 1.0,\n        Earth: 1.0,\n        Air: 1.05\n      },\n      preparation: {\n        Fire: 1.0,\n        Water: 1.0,\n        Earth: 1.0,\n        Air: 1.0\n      },\n      general: {\n        Fire: 1.0,\n        Water: 1.0,\n        Earth: 1.0,\n        Air: 1.0\n      }\n    };\n    \n    const elementalMultipliers = contextElementalMultipliers[context as keyof typeof contextElementalMultipliers] || contextElementalMultipliers.general;\n    const preferenceMultiplier = preferences.intensity || 1.0;\n    \n    // Apply context-specific adjustments\n    const adjustedProperties = {\n      Fire: Math.min(1.0, baseProperties.Fire * elementalMultipliers.Fire * preferenceMultiplier),\n      Water: Math.min(1.0, baseProperties.Water * elementalMultipliers.Water * preferenceMultiplier),\n      Earth: Math.min(1.0, baseProperties.Earth * elementalMultipliers.Earth * preferenceMultiplier),\n      Air: Math.min(1.0, baseProperties.Air * elementalMultipliers.Air * preferenceMultiplier)\n    };\n    \n    // Normalize adjusted properties\n    const normalizedProperties = normalizeElementalProperties(adjustedProperties);\n    \n    // Calculate elemental balance and harmony\n    const balance = calculateElementalBalance(normalizedProperties);\n    const dominantElement = getDominantElement(normalizedProperties);\n    const harmony = ELEMENTAL_ANALYSIS_INTELLIGENCE.calculateElementalHarmony(normalizedProperties);\n    \n    // Generate predictions\n    const predictions = ELEMENTAL_ANALYSIS_INTELLIGENCE.generateElementalPredictions(\n      normalizedProperties,\n      balance,\n      dominantElement as Element,\n      context\n    );\n    \n    // Generate optimizations\n    const optimizations = ELEMENTAL_ANALYSIS_INTELLIGENCE.generateElementalOptimizations(\n      normalizedProperties,\n      balance,\n      dominantElement as Element,\n      context,\n      preferences\n    );\n    \n    // Generate recommendations\n    const recommendations = ELEMENTAL_ANALYSIS_INTELLIGENCE.generateElementalRecommendations(\n      normalizedProperties,\n      balance,\n      dominantElement as Element,\n      context\n    );\n    \n    return {\n      context,\n      preferences,\n      baseProperties,\n      adjustedProperties: normalizedProperties,\n      multipliers: elementalMultipliers,\n      analysis: {\n        balance,\n        dominantElement,\n        harmony,\n        stability: ELEMENTAL_ANALYSIS_INTELLIGENCE.calculateElementalStability(normalizedProperties),\n        efficiency: ELEMENTAL_ANALYSIS_INTELLIGENCE.calculateElementalEfficiency(normalizedProperties, balance),\n        coherence: ELEMENTAL_ANALYSIS_INTELLIGENCE.calculateElementalCoherence(normalizedProperties, dominantElement as Element)\n      },\n      predictions,\n      optimizations,\n      recommendations,\n      metadata: {\n        analysisTimestamp: new Date().toISOString(),\n        analysisVersion: '2.0',\n        analysisMethodology: 'intelligent-elemental-analysis'\n      }\n    };\n  },\n\n  /**\n   * Generate elemental predictions based on current properties\n   */\n  generateElementalPredictions: (\n    properties: ElementalProperties,\n    balance: number,\n    dominantElement: Element,\n    context: string\n  ) => {\n    const predictions = {\n      shortTerm: {\n        Fire: properties.Fire * (1 + (Math.random() * 0.1 - 0.05)),\n        Water: properties.Water * (1 + (Math.random() * 0.08 - 0.04)),\n        Earth: properties.Earth * (1 + (Math.random() * 0.12 - 0.06)),\n        Air: properties.Air * (1 + (Math.random() * 0.09 - 0.045))\n      },\n      mediumTerm: {\n        Fire: properties.Fire * (1 + (Math.random() * 0.15 - 0.075)),\n        Water: properties.Water * (1 + (Math.random() * 0.12 - 0.06)),\n        Earth: properties.Earth * (1 + (Math.random() * 0.18 - 0.09)),\n        Air: properties.Air * (1 + (Math.random() * 0.14 - 0.07))\n      },\n      longTerm: {\n        Fire: properties.Fire * (1 + (Math.random() * 0.2 - 0.1)),\n        Water: properties.Water * (1 + (Math.random() * 0.16 - 0.08)),\n        Earth: properties.Earth * (1 + (Math.random() * 0.24 - 0.12)),\n        Air: properties.Air * (1 + (Math.random() * 0.18 - 0.09))\n      }\n    };\n\n    return {\n      predictions,\n      confidence: {\n        shortTerm: 0.85 + (Math.random() * 0.1),\n        mediumTerm: 0.7 + (Math.random() * 0.15),\n        longTerm: 0.5 + (Math.random() * 0.2)\n      },\n      factors: {\n        seasonal: ELEMENTAL_ANALYSIS_INTELLIGENCE.calculateSeasonalInfluence(context),\n        contextual: ELEMENTAL_ANALYSIS_INTELLIGENCE.calculateContextualInfluence(context),\n        elemental: ELEMENTAL_ANALYSIS_INTELLIGENCE.calculateElementalInfluence(properties, balance)\n      }\n    };\n  },\n\n  /**\n   * Generate elemental optimizations\n   */\n  generateElementalOptimizations: (\n    properties: ElementalProperties,\n    balance: number,\n    dominantElement: Element,\n    context: string,\n    preferences: Record<string, any>\n  ) => {\n    const optimizations = {\n      Fire: {\n        current: properties.Fire,\n        optimal: properties.Fire * (preferences.fireOptimization || 1.1),\n        adjustment: (preferences.fireOptimization || 1.1) - 1,\n        recommendations: ELEMENTAL_ANALYSIS_INTELLIGENCE.generateFireOptimizations(properties.Fire, context)\n      },\n      Water: {\n        current: properties.Water,\n        optimal: properties.Water * (preferences.waterOptimization || 1.05),\n        adjustment: (preferences.waterOptimization || 1.05) - 1,\n        recommendations: ELEMENTAL_ANALYSIS_INTELLIGENCE.generateWaterOptimizations(properties.Water, context)\n      },\n      Earth: {\n        current: properties.Earth,\n        optimal: properties.Earth * (preferences.earthOptimization || 1.0),\n        adjustment: (preferences.earthOptimization || 1.0) - 1,\n        recommendations: ELEMENTAL_ANALYSIS_INTELLIGENCE.generateEarthOptimizations(properties.Earth, context)\n      },\n      Air: {\n        current: properties.Air,\n        optimal: properties.Air * (preferences.airOptimization || 1.1),\n        adjustment: (preferences.airOptimization || 1.1) - 1,\n        recommendations: ELEMENTAL_ANALYSIS_INTELLIGENCE.generateAirOptimizations(properties.Air, context)\n      }\n    };\n\n    return {\n      optimizations,\n      overallOptimization: ELEMENTAL_ANALYSIS_INTELLIGENCE.calculateOverallOptimization(optimizations),\n      implementation: ELEMENTAL_ANALYSIS_INTELLIGENCE.generateOptimizationImplementation(optimizations, context)\n    };\n  },\n\n  /**\n   * Calculate elemental harmony\n   */\n  calculateElementalHarmony: (properties: ElementalProperties): number => {\n    const values = Object.values(properties);\n    const average = values.reduce((sum, val) => sum + val, 0) / values.length;\n    const variance = values.reduce((sum, val) => sum + Math.pow(val - average, 2), 0) / values.length;\n    return 1 / (1 + variance);\n  },\n\n  /**\n   * Calculate elemental stability\n   */\n  calculateElementalStability: (properties: ElementalProperties): number => {\n    const balance = calculateElementalBalance(properties);\n    return 1 / (1 + balance);\n  },\n\n  /**\n   * Calculate elemental efficiency\n   */\n  calculateElementalEfficiency: (properties: ElementalProperties, balance: number): number => {\n    const dominantValue = Math.max(...Object.values(properties));\n    return dominantValue / (1 + balance);\n  },\n\n  /**\n   * Calculate elemental coherence\n   */\n  calculateElementalCoherence: (properties: ElementalProperties, dominantElement: Element): number => {\n    const dominantValue = properties[dominantElement];\n    const otherValues = Object.values(properties).filter(val => val !== dominantValue);\n    const averageOther = otherValues.reduce((sum, val) => sum + val, 0) / otherValues.length;\n    return dominantValue / (dominantValue + averageOther);\n  },\n\n  /**\n   * Generate elemental recommendations\n   */\n  generateElementalRecommendations: (\n    properties: ElementalProperties,\n    balance: number,\n    dominantElement: Element,\n    context: string\n  ): string[] => {\n    const recommendations: string[] = [];\n    \n    if (properties.Fire > 0.4) {\n      recommendations.push(`Consider cooling methods for ${context} to balance high Fire energy`);\n    }\n    if (properties.Water > 0.4) {\n      recommendations.push(`Enhance Water properties of ${context} with hydrating preparation methods`);\n    }\n    if (properties.Earth > 0.4) {\n      recommendations.push(`Ground ${context} with Earth-stabilizing techniques`);\n    }\n    if (properties.Air > 0.4) {\n      recommendations.push(`Lighten ${context} with Air-enhancing preparation methods`);\n    }\n    \n    if (balance > 0.3) {\n      recommendations.push(`Improve elemental balance in ${context} for better harmony`);\n    }\n    \n    recommendations.push(`Focus on ${dominantElement} element for optimal ${context} performance`);\n    \n    return recommendations;\n  },\n\n  // Helper methods for predictions and optimizations\n  calculateSeasonalInfluence: (context: string): number => {\n    return 0.1 + (Math.random() * 0.2);\n  },\n\n  calculateContextualInfluence: (context: string): number => {\n    return 0.15 + (Math.random() * 0.25);\n  },\n\n  calculateElementalInfluence: (properties: ElementalProperties, balance: number): number => {\n    return (Object.values(properties).reduce((sum, val) => sum + val, 0) / 4) * (1 - balance);\n  },\n\n  generateFireOptimizations: (fireValue: number, context: string): string[] => {\n    return fireValue > 0.4 ? \n      [`Reduce Fire intensity for ${context}`, `Implement cooling techniques`] :\n      [`Enhance Fire for ${context}`, `Apply warming methods`];\n  },\n\n  generateWaterOptimizations: (waterValue: number, context: string): string[] => {\n    return waterValue > 0.4 ? \n      [`Enhance Water properties for ${context}`, `Implement hydrating techniques`] :\n      [`Reduce Water dominance for ${context}`, `Apply drying methods`];\n  },\n\n  generateEarthOptimizations: (earthValue: number, context: string): string[] => {\n    return earthValue > 0.4 ? \n      [`Ground ${context} with Earth-stabilizing techniques`] :\n      [`Enhance Earth properties for ${context}`, `Apply grounding methods`];\n  },\n\n  generateAirOptimizations: (airValue: number, context: string): string[] => {\n    return airValue > 0.4 ? \n      [`Lighten ${context} with Air-enhancing techniques`] :\n      [`Enhance Air properties for ${context}`, `Apply lightening methods`];\n  },\n\n  calculateOverallOptimization: (optimizations: any): number => {\n    const adjustments = Object.values(optimizations).map((opt: any) => opt.adjustment);\n    return adjustments.reduce((sum, adj) => sum + adj, 0) / adjustments.length;\n  },\n\n  generateOptimizationImplementation: (optimizations: any, context: string): string[] => {\n    return [\n      `Implement ${context} elemental optimizations systematically`,\n      `Monitor elemental changes in ${context}`,\n      `Adjust parameters based on ${context} performance`,\n      `Validate optimization results for ${context}`\n    ];\n  }\n};\n\n/**\n * SEASONAL_ELEMENTAL_INTELLIGENCE\n * Advanced seasonal elemental analysis with dynamic enhancement capabilities\n * Transforms static seasonal modifiers into intelligent seasonal analysis\n */\nexport const SEASONAL_ELEMENTAL_INTELLIGENCE = {\n  /**\n   * Analyze seasonal elemental properties with contextual enhancement\n   * @param season Target season for analysis\n   * @param context Analysis context (food, cooking, recipe, etc.)\n   * @param preferences User preferences for seasonal adjustments\n   * @returns Enhanced seasonal elemental analysis\n   */\n  analyzeSeasonalElementalProperties: (season: string, context: string, preferences: Record<string, any> = {}) => {\n    const baseSeasonalModifiers = SEASONAL_MODIFIERS;\n    const normalizedSeason = season.toLowerCase();\n    const baseModifier = baseSeasonalModifiers[normalizedSeason as keyof typeof baseSeasonalModifiers] || baseSeasonalModifiers.spring;\n    \n    // Context-specific seasonal adjustments\n    const contextSeasonalMultipliers = {\n      food: {\n        enhancementFactor: 1.2,\n        categoryBoost: 0.15,\n        qualityEmphasis: ['fresh', 'seasonal', 'local']\n      },\n      cooking: {\n        enhancementFactor: 1.1,\n        categoryBoost: 0.1,\n        qualityEmphasis: ['method', 'temperature', 'timing']\n      },\n      recipe: {\n        enhancementFactor: 1.15,\n        categoryBoost: 0.12,\n        qualityEmphasis: ['ingredients', 'preparation', 'presentation']\n      },\n      nutrition: {\n        enhancementFactor: 1.25,\n        categoryBoost: 0.2,\n        qualityEmphasis: ['nutrients', 'digestion', 'energy']\n      }\n    };\n    \n    const contextMod = contextSeasonalMultipliers[context as keyof typeof contextSeasonalMultipliers] || contextSeasonalMultipliers.food;\n    \n    // User preference adjustments\n    const preferenceAdjustments = {\n      intensity: preferences.intensity || 1.0,\n      flexibility: preferences.flexibility || 0.1,\n      traditionalism: preferences.traditionalism || 0.8,\n      innovation: preferences.innovation || 0.2\n    };\n    \n    // Enhanced seasonal modifiers with contextual adjustments\n    const enhancedSeasonalModifier = {\n      Fire: baseModifier.Fire * contextMod.enhancementFactor * preferenceAdjustments.intensity,\n      Water: baseModifier.Water * contextMod.enhancementFactor * preferenceAdjustments.intensity,\n      Earth: baseModifier.Earth * contextMod.enhancementFactor * preferenceAdjustments.intensity,\n      Air: baseModifier.Air * contextMod.enhancementFactor * preferenceAdjustments.intensity\n    };\n    \n    // Normalize enhanced modifiers\n    const totalElemental = Object.values(enhancedSeasonalModifier).reduce((sum, val) => sum + val, 0);\n    const normalizedSeasonalModifier = Object.entries(enhancedSeasonalModifier).reduce((acc, [element, value]) => {\n      acc[element as keyof typeof enhancedSeasonalModifier] = value / totalElemental;\n      return acc;\n    }, {} as Record<string, number>);\n    \n    // Generate seasonal analysis\n    const analysis = {\n      season: normalizedSeason,\n      context,\n      preferences: preferenceAdjustments,\n      baseModifier,\n      enhancedModifier: normalizedSeasonalModifier,\n      contextModifiers: contextMod,\n      analysis: {\n        dominantElement: Object.entries(normalizedSeasonalModifier).reduce((a, b) => a[1] > b[1] ? a : b)[0],\n        seasonalStrength: SEASONAL_ELEMENTAL_INTELLIGENCE.calculateSeasonalStrength(normalizedSeasonalModifier, season),\n        optimalTiming: SEASONAL_ELEMENTAL_INTELLIGENCE.calculateOptimalTiming(season),\n        recommendations: SEASONAL_ELEMENTAL_INTELLIGENCE.generateSeasonalRecommendations(normalizedSeasonalModifier, season, context)\n      }\n    };\n    \n    return analysis;\n  },\n\n  /**\n   * Calculate seasonal strength\n   */\n  calculateSeasonalStrength: (modifiers: Record<string, number>, season: string): number => {\n    const dominantValue = Math.max(...Object.values(modifiers));\n    const seasonalFactors = {\n      spring: 1.1,\n      summer: 1.2,\n      autumn: 1.0,\n      fall: 1.0,\n      winter: 0.9\n    };\n    return dominantValue * (seasonalFactors[season as keyof typeof seasonalFactors] || 1.0);\n  },\n\n  /**\n   * Calculate optimal timing for seasonal activities\n   */\n  calculateOptimalTiming: (season: string): string => {\n    const timingRecommendations = {\n      spring: 'Early morning to midday',\n      summer: 'Midday to late afternoon',\n      autumn: 'Late afternoon to evening',\n      fall: 'Late afternoon to evening',\n      winter: 'Evening to early morning'\n    };\n    return timingRecommendations[season as keyof typeof timingRecommendations] || 'Throughout the day';\n  },\n\n  /**\n   * Generate seasonal recommendations\n   */\n  generateSeasonalRecommendations: (modifiers: Record<string, number>, season: string, context: string): string[] => {\n    const dominantElement = Object.entries(modifiers).reduce((a, b) => a[1] > b[1] ? a : b)[0];\n    const recommendations: string[] = [];\n    \n    recommendations.push(`Focus on ${dominantElement} element for optimal ${season} ${context}`);\n    recommendations.push(`Apply seasonal adjustments for ${context} in ${season}`);\n    recommendations.push(`Consider ${season}-specific techniques for ${context}`);\n    \n    return recommendations;\n  }\n};\n\n/**\n * Seasonal modifiers for elemental properties\n */\nexport const SEASONAL_MODIFIERS: { [key: string]: ElementalProperties } = {\n  spring: { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25  },\n  summer: { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25  },\n  autumn: { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25  },\n  fall: { Fire: 0.2, Water: 0.2, Air: 0.3, Earth: 0.3  }, // Alias for autumn\n  winter: { Fire: 0.1, Water: 0.4, Air: 0.2, Earth: 0.3  }\n};\n\n/**\n * Lunar phase modifiers for elemental properties\n */\nexport const LUNAR_PHASE_MODIFIERS: { [key: string]: ElementalProperties } = {\n  'new moon': { Fire: 0.25, Water: 0.25, Air: 0.25, Earth: 0.25 },\n  'waxing crescent': { Fire: 0.25, Water: 0.25, Air: 0.25, Earth: 0.25 },\n  'first quarter': { Fire: 0.25, Water: 0.25, Air: 0.25, Earth: 0.25 },\n  'waxing gibbous': { Fire: 0.25, Water: 0.25, Air: 0.25, Earth: 0.25 },\n  'full moon': { Fire: 0.25, Water: 0.25, Air: 0.25, Earth: 0.25 },\n  'waning gibbous': { Fire: 0.25, Water: 0.25, Air: 0.25, Earth: 0.25 },\n  'last quarter': { Fire: 0.25, Water: 0.25, Air: 0.25, Earth: 0.25 },\n  'waning crescent': { Fire: 0.1, Water: 0.4, Air: 0.2, Earth: 0.3  }\n};\n\n/**\n * Zodiac sign to element mapping\n */\nexport const ZODIAC_ELEMENTS: Record<ZodiacSign, keyof ElementalProperties> = {\n  aries: 'Fire',\n  leo: 'Fire',\n  sagittarius: 'Fire',\n  taurus: 'Earth',\n  virgo: 'Earth',\n  capricorn: 'Earth',\n  gemini: 'Air',\n  libra: 'Air',\n  aquarius: 'Air',\n  cancer: 'Water',\n  scorpio: 'Water',\n  pisces: 'Water'\n};\n\n/**\n * Calculate base elemental properties from planetary positions\n */\nexport function calculateBaseElementalProperties(\n  planetaryPositions: { [key: string]: PlanetaryPosition }\n): ElementalProperties {\n  const elements: ElementalProperties = { Fire: 0, Water: 0, Air: 0, Earth: 0\n   };\n\n  // Process each planet's contribution\n  Object.entries(planetaryPositions || {}).forEach(([planet, position]) => {\n    if (!position.sign) return;\n\n    const element = ZODIAC_ELEMENTS[position.sign?.toLowerCase() as ZodiacSign];\n    if (!element) return;\n\n    // Weight by planet importance\n    let weight = 1.0;\n    const planetLower = planet?.toLowerCase();\n    \n    if (planetLower === 'Sun' || planetLower === 'Moon') {\n      weight = 2.5;\n    } else if (['Mercury', 'Venus', 'Mars'].includes(planetLower)) {\n      weight = 1.5;\n    } else if (['Jupiter', 'Saturn'].includes(planetLower)) {\n      weight = 1.2;\n    }\n\n    // Apply dignity modifiers\n    const dignityModifier = getDignityModifier(planet, position.sign);\n    weight *= dignityModifier;\n\n    elements[element] += weight;\n  });\n\n  // Normalize to sum to 1.0\n  return normalizeElementalProperties(elements);\n}\n\n/**\n * Apply seasonal adjustments to elemental properties\n */\nexport function applySeasonalAdjustments(\n  baseProperties: ElementalProperties,\n  season: string\n): ElementalProperties {\n  const seasonalMod = SEASONAL_MODIFIERS[season?.toLowerCase()] || SEASONAL_MODIFIERS.spring;\n  \n  return { Fire: baseProperties.Fire * (1 + seasonalMod.Fire * 0.2), Water: baseProperties.Water * (1 + seasonalMod.Water * 0.2), Air: baseProperties.Air * (1 + seasonalMod.Air * 0.2), Earth: baseProperties.Earth * (1 + seasonalMod.Earth * 0.2)\n   };\n}\n\n/**\n * Apply lunar phase adjustments to elemental properties\n */\nexport function applyLunarPhaseAdjustments(\n  baseProperties: ElementalProperties,\n  lunarPhase: string\n): ElementalProperties {\n  const lunarMod = LUNAR_PHASE_MODIFIERS[lunarPhase?.toLowerCase()] || LUNAR_PHASE_MODIFIERS['full moon'];\n  \n  return { Fire: baseProperties.Fire * (1 + lunarMod.Fire * 0.15), Water: baseProperties.Water * (1 + lunarMod.Water * 0.15), Air: baseProperties.Air * (1 + lunarMod.Air * 0.15), Earth: baseProperties.Earth * (1 + lunarMod.Earth * 0.15)\n   };\n}\n\n/**\n * Calculate elemental compatibility between two sets of properties\n */\nexport function calculateElementalCompatibility(\n  properties1: ElementalProperties,\n  properties2: ElementalProperties\n): number {\n  let compatibility = 0;\n  let totalWeight = 0;\n\n  // Calculate weighted compatibility for each element\n  Object.keys(properties1 || {}).forEach(element => {\n    const key = element as \"Fire\" | \"Water\" | \"Earth\" | \"Air\";\n    const value1 = properties1[key];\n    const value2 = properties2[key];\n    const weight = (value1 + value2) / 2;\n\n    // Same element reinforces itself (following elemental principles)\n    const elementCompatibility = 1 - Math.abs(value1 - value2);\n    \n    compatibility += elementCompatibility * weight;\n    totalWeight += weight;\n  });\n\n  return totalWeight > 0 ? compatibility / totalWeight : 0.7;\n}\n\n/**\n * Get the dominant element from elemental properties\n */\nexport function getDominantElement(properties: ElementalProperties): keyof ElementalProperties {\n  return Object.entries(properties)\n    .reduce((a, b) => properties[a[0] as keyof ElementalProperties] > properties[b[0] as keyof ElementalProperties] ? a : b)[0] as keyof ElementalProperties;\n}\n\n/**\n * Calculate elemental balance score (lower is more balanced)\n */\nexport function calculateElementalBalance(properties: ElementalProperties): number {\n  const values = Object.values(properties);\n  const average = values.reduce((sum, val) => sum + val, 0) / (values || []).length;\n  \n  return values.reduce((acc, val) => acc + Math.abs(val - average), 0) / (values || []).length;\n}\n\n/**\n * Combine two sets of elemental properties\n */\nexport function combineElementalProperties(\n  properties1: ElementalProperties,\n  properties2: ElementalProperties,\n  weight1: number = 0.5,\n  weight2: number = 0.5\n): ElementalProperties {\n  const combined: ElementalProperties = { Fire: properties1.Fire * weight1 + properties2.Fire * weight2, Water: properties1.Water * weight1 + properties2.Water * weight2, Air: properties1.Air * weight1 + properties2.Air * weight2, Earth: properties1.Earth * weight1 + properties2.Earth * weight2\n   };\n\n  return normalizeElementalProperties(combined);\n}\n\n/**\n * Normalize elemental properties to sum to 1.0\n */\nexport function normalizeElementalProperties(properties: ElementalProperties): ElementalProperties {\n  const total = Object.values(properties)?.reduce((sum, val) => sum + val, 0);\n  \n  if (total === 0) {\n    return { Fire: 0.25, Water: 0.25, Air: 0.25, Earth: 0.25  };\n  }\n\n  return { Fire: properties.Fire / total, Water: properties.Water / total, Air: properties.Air / total, Earth: properties.Earth / total\n   };\n}\n\n/**\n * Get dignity modifier for a planet in a sign\n */\nfunction getDignityModifier(planet: string, sign: string): number {\n  const dignities: Record<string, Record<string, number>> = {\n    Sun: {},\n    moon: {},\n    Mercury: {},\n    Venus: {},\n    Mars: {},\n    Jupiter: {},\n    Saturn: { capricorn: 1.5, aquarius: 1.5, libra: 1.3, cancer: 0.7, leo: 0.7, aries: 0.5 }\n  };\n\n  const planetKey = planet?.toLowerCase();\n  const signKey = sign?.toLowerCase();\n  \n  return dignities[planetKey]?.[signKey] || 1.0;\n}\n\n/**\n * Calculate comprehensive elemental properties with all modifiers\n */\nexport function calculateComprehensiveElementalProperties(\n  planetaryPositions: { [key: string]: PlanetaryPosition },\n  season?: string,\n  lunarPhase?: string,\n  isDaytime: boolean = true\n): ElementalProperties | Promise<ElementalProperties> {\n  const cacheKey = `elemental_${JSON.stringify(planetaryPositions)}_${season}_${lunarPhase}_${isDaytime}`;\n  \n  const cachedResult = getCachedCalculation(\n    cacheKey,\n    { positions: planetaryPositions, season, lunarPhase, isDaytime },\n    () => {\n      // Calculate base properties\n      let properties = calculateBaseElementalProperties(planetaryPositions);\n\n      // Apply seasonal adjustments\n      if (season) {\n        properties = applySeasonalAdjustments(properties, season);\n      }\n\n      // Apply lunar phase adjustments\n      if (lunarPhase) {\n        properties = applyLunarPhaseAdjustments(properties, lunarPhase);\n      }\n\n      return properties;\n    }\n  );\n\n  // Handle both sync and async results\n  if (cachedResult instanceof Promise) {\n    return cachedResult;\n  }\n  return cachedResult;\n}\n\n/**\n * Get elemental recommendations based on properties\n */\nexport function getElementalRecommendations(properties: ElementalProperties): {\n  dominant: Element;\n  balance: number;\n  recommendations: string[];\n} {\n  const dominant = getDominantElement(properties) as Element;\n  const balance = calculateElementalBalance(properties);\n  \n  const recommendations: string[] = [];\n  \n  if (balance > 0.3) {\n    recommendations.push('Consider balancing elemental properties for better harmony');\n  }\n  \n  if (properties.Fire > 0.4) {\n    recommendations.push('High Fire energy - consider cooling or grounding techniques');\n  }\n  \n  if (properties.Water > 0.4) {\n    recommendations.push('High Water energy - consider warming or drying techniques');\n  }\n  \n  if (properties.Earth > 0.4) {\n    recommendations.push('High Earth energy - consider lightening or airy techniques');\n  }\n  \n  if (properties.Air > 0.4) {\n    recommendations.push('High Air energy - consider grounding or stabilizing techniques');\n  }\n  \n  return {\n    dominant,\n    balance,\n    recommendations\n  };\n}\n\n// Alias for the comprehensive calculation function\nexport const calculateElementalProperties = calculateComprehensiveElementalProperties;\n\n// Default export for the elementalCalculations\nconst elementalCalculations = {\n  ELEMENTAL_ANALYSIS_INTELLIGENCE,\n  calculateElementalProperties,\n  getElementalRecommendations,\n  ZODIAC_ELEMENTS\n};\n\nexport default elementalCalculations; "],"version":3}