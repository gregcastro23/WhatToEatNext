{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/recipeMatching.ts","mappings":";;;AAMA,sEAAmE;AAoBnE,qDAA6E;AAC7E,oDAAoD;AACpD,+DAA4D;AA2C5D,MAAM,UAAU,GAAG,IAAI,GAAG,EAAqC,CAAC;AAChE,MAAM,SAAS,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,4BAA4B;AAK7D;;GAEG;AACI,KAAK,UAAU,eAAe,CACnC,OAAkB,EAClB,eAA6B,EAAE,EAC/B,gBAA4C,IAAI,EAChD,KAAK,GAAG,EAAE;IAEV,wGAAwG;IAExG,uCAAuC;IACvC,MAAM,QAAQ,GAAG,WAAW,CAAC,OAAO,EAAE,YAAY,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;IAC1E,MAAM,WAAW,GAAG,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAE7C,uCAAuC;IACvC,IAAI,WAAW,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,WAAW,CAAC,SAAS,GAAG,SAAS,EAAE;QACjE,8CAA8C;QAC9C,OAAO,WAAW,CAAC,IAAI,CAAC;KACzB;IAED,yFAAyF;IACzF,IAAI,CAAC,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;QAC/D,IAAI;YACF,wEAAwE;YACxE,MAAM,aAAa,GAAG,IAAI,uCAAkB,EAAE,CAAC;YAC/C,OAAO,GAAG,MAAM,uCAAkB,CAAC,aAAa,EAAyB,CAAC;YAC1E,4EAA4E;SAC7E;QAAC,OAAO,KAAK,EAAE;YACd,2EAA2E;YAC3E,OAAO,EAAE,CAAC,CAAC,+CAA+C;SAC3D;KACF;IAED,sDAAsD;IACtD,IAAI,eAAe,GAAG,CAAC,GAAG,OAAO,CAAC,CAAC;IAEnC,gBAAgB;IAChB,IAAI,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,cAAc,EAAE;QAChC,eAAe,GAAG,eAAe,CAAC,MAAM,CACtC,CAAC,MAAM,EAAE,EAAE;QACT,wEAAwE;QACxE,CAAC,MAAM,CAAC,WAAW,IAAI,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,YAAY,CAAC,cAAc,CACnF,CAAC;QACF,wFAAwF;KACzF;IAED,IACE,CAAA,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,mBAAmB;QACjC,YAAY,CAAC,mBAAmB,CAAC,MAAM,GAAG,CAAC,EAC3C;QACA,eAAe,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE;YAClD,gDAAgD;YAChD,MAAM,UAAU,GAAG,MAAiC,CAAC;YACrD,MAAM,WAAW,GAAG,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,WAAW,CAAC;YAE5C,IAAI,CAAC,WAAW;gBAAE,OAAO,IAAI,CAAC,CAAC,4BAA4B;YAE3D,oEAAoE;YACpE,MAAM,gBAAgB,GAAG,YAAY,CAAC,mBAAmB,CAAC,IAAI,CAC5D,CAAC,WAAW,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,WAAW,CAAC,QAAQ,CAAC,WAAW,CAAC,CACjF,CAAC;YAEF,+CAA+C;YAC/C,OAAO,CAAC,gBAAgB,CAAC;QAC3B,CAAC,CAAC,CAAC;QACH,6FAA6F;KAC9F;IAED,IAAI,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,MAAM,EAAE;QACxB,2EAA2E;QAC3E,eAAe,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YAC9C,MAAM,WAAW,GACf,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAE,YAAuB,aAAvB,YAAY,uBAAZ,YAAY,CAAa,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,MAAM,YAAuB,aAAvB,YAAY,uBAAZ,YAAY,CAAa,MAAM,CAAA,IAAI,CAAC,CAAC,MAAM,KAAK,KAAK,CAAC;YAClL,MAAM,WAAW,GACf,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAE,YAAuB,aAAvB,YAAY,uBAAZ,YAAY,CAAa,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,MAAM,YAAuB,aAAvB,YAAY,uBAAZ,YAAY,CAAa,MAAM,CAAA,IAAI,CAAC,CAAC,MAAM,KAAK,KAAK,CAAC;YAElL,IAAI,WAAW,IAAI,CAAC,WAAW;gBAAE,OAAO,CAAC,CAAC,CAAC;YAC3C,IAAI,CAAC,WAAW,IAAI,WAAW;gBAAE,OAAO,CAAC,CAAC;YAC1C,OAAO,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;QACH,wGAAwG;KACzG;IAED,IAAI,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,QAAQ,EAAE;QAC1B,6DAA6D;QAC7D,eAAe,GAAG,eAAe,CAAC,MAAM,CACtC,CAAC,MAAM,EAAE,EAAE;QACT,wEAAwE;QACxE,CAAC,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,YAAY,CAAC,QAAQ,CACvE,CAAC;QACF,kFAAkF;KACnF;IAED,IACE,CAAA,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,kBAAkB;QAChC,YAAY,CAAC,kBAAkB,CAAC,MAAM,GAAG,CAAC,EAC1C;QACA,eAAe,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE;YAClD,IAAI,CAAC,MAAM,CAAC,WAAW;gBAAE,OAAO,IAAI,CAAC;YAErC,6DAA6D;YAC7D,MAAM,qBAAqB,GAAG,YAAY,CAAC,kBAAkB,CAAC,IAAI,CAChE,CAAC,QAAQ,EAAE,EAAE;gBACX,MAAM,aAAa,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC;gBAC7C,OAAO,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE;oBAC5C,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;wBAClC,MAAM,aAAa,GAAG,UAAoB,CAAC;wBAC3C,OAAO,aAAa,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;qBAC5D;yBAAM;wBACL,oDAAoD;wBACpD,MAAM,cAAc,GAAG,UAAqC,CAAC;wBAC7D,MAAM,IAAI,GAAG,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,IAAI,CAAC;wBAClC,OAAO,OAAO,IAAI,KAAK,QAAQ,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;qBAC/E;gBACH,CAAC,CAAC,CAAC;YACL,CAAC,CACF,CAAC;YAEF,mDAAmD;YACnD,OAAO,CAAC,qBAAqB,CAAC;QAChC,CAAC,CAAC,CAAC;QACH,4FAA4F;KAC7F;IAED,IAAI,CAAA,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,cAAc,KAAI,YAAY,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;QAC1E,wDAAwD;QACxD,eAAe,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YAC9C,oEAAoE;YACpE,MAAM,KAAK,GAAG,CAAkB,CAAC;YACjC,MAAM,KAAK,GAAG,CAAkB,CAAC;YACjC,MAAM,eAAe,GAAG,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,cAAc,CAAC;YAC9C,MAAM,eAAe,GAAG,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,cAAc,CAAC;YAE9C,MAAM,WAAW,GACf,KAAK,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAChE,YAAY,CAAC,cAAc,CAAC,QAAQ,CAAC,MAAM,CAAC,CAC7C,IAAI,KAAK,CAAC;YAEb,MAAM,WAAW,GACf,KAAK,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAChE,YAAY,CAAC,cAAc,CAAC,QAAQ,CAAC,MAAM,CAAC,CAC7C,IAAI,KAAK,CAAC;YAEb,IAAI,WAAW,IAAI,CAAC,WAAW;gBAAE,OAAO,CAAC,CAAC,CAAC;YAC3C,IAAI,CAAC,WAAW,IAAI,WAAW;gBAAE,OAAO,CAAC,CAAC;YAC1C,OAAO,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;QACH,2FAA2F;KAC5F;IAED,yDAAyD;IACzD,IAAI,eAAe,CAAC,MAAM,KAAK,CAAC,EAAE;QAChC,gDAAgD;QAChD,OAAO,EAAE,CAAC;KACX;IAED,mCAAmC;IACnC,MAAM,aAAa,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;QACnD,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,MAAM,OAAO,GAAG,EAAE,CAAC;QAEnB,0EAA0E;QAC1E,IAAI,CAAC,MAAkC,aAAlC,MAAM,uBAAN,MAAM,CAA8B,mBAAmB,KAAI,aAAa,EAAE;YAC7E,MAAM,cAAc,GAAG,IAAA,yCAAmB,EACvC,MAAkC,aAAlC,MAAM,uBAAN,MAAM,CAA8B,mBAAmB,EACxD,aAAa,EACb;gBACE,MAAM,EAAG,YAAwC,aAAxC,YAAY,uBAAZ,YAAY,CAA8B,MAAM;gBACzD,QAAQ,EAAE,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE,MAAM,CAAC,QAAmB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,QAAkB,CAAC;gBAClM,OAAO,EAAG,MAAM,CAAC,OAAkB,IAAI,EAAE;gBACzC,oBAAoB,EAAE,YAAY,CAAC,oBAAoB;aACxD,CACF,CAAC;YAEF,yCAAyC;YACzC,KAAK,IAAI,cAAc,GAAG,GAAG,CAAC;YAE9B,4BAA4B;YAC5B,IAAI,cAAc,GAAG,GAAG,EAAE;gBACxB,OAAO,CAAC,IAAI,CAAC,mCAAmC,CAAC,CAAC;aACnD;iBAAM,IAAI,cAAc,GAAG,GAAG,EAAE;gBAC/B,OAAO,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;aAC9C;iBAAM,IAAI,cAAc,GAAG,GAAG,EAAE;gBAC/B,OAAO,CAAC,IAAI,CAAC,kCAAkC,CAAC,CAAC;aAClD;SACF;QAED,6EAA6E;QAC7E,IAAI,MAAM,CAAC,kBAAkB,IAAI,YAAY,CAAC,gBAAgB,EAAE;YAC9D,MAAM,gBAAgB,GAAG,yBAAyB,CAChD,MAAM,CAAC,kBAAgE,EACvE,YAAY,CAAC,gBAA8D,CAC5E,CAAC;YACF,KAAK,IAAI,gBAAgB,GAAG,IAAI,CAAC;YAEjC,IAAI,gBAAgB,GAAG,GAAG,EAAE;gBAC1B,OAAO,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;aACjD;SACF;QAED,0DAA0D;QAC1D,IAAI,MAAM,CAAC,qBAAqB,IAAI,YAAY,CAAC,gBAAgB,EAAE;YACjE,MAAM,UAAU,GAAG,0BAA0B,CAC3C,MAAM,CAAC,qBAAqB,EAC5B,YAAY,CAAC,gBAAgB,CAC9B,CAAC;YACF,KAAK,IAAI,UAAU,GAAG,GAAG,CAAC;YAE1B,IAAI,UAAU,GAAG,GAAG,EAAE;gBACpB,OAAO,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;aACxC;SACF;QAED,uEAAuE;QACvE,IACE,MAAM,CAAC,UAAU,KAAK,SAAS;YAC/B,YAAY,CAAC,mBAAmB,KAAK,SAAS,EAC9C;YACA,MAAM,eAAe,GAAG,wBAAwB,CAC9C,MAAM,CAAC,UAAwC,EAC/C,YAAY,CAAC,mBAAiD,CAC/D,CAAC;YACF,KAAK,IAAI,eAAe,GAAG,GAAG,CAAC;YAE/B,IAAI,eAAe,GAAG,GAAG,EAAE;gBACzB,OAAO,CAAC,IAAI,CAAC,yCAAyC,CAAC,CAAC;aACzD;SACF;QAED,2DAA2D;QAC3D,KAAK,IAAI,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC;QAE9B,wCAAwC;QACxC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;QAExC,6CAA6C;QAC7C,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC;QAEhD,OAAO;YACL,GAAG,MAAM;YACT,UAAU,EAAE,KAAK;YACjB,eAAe;YACf,YAAY,EAAE,OAAO;SACtB,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,wCAAwC;IACxC,MAAM,aAAa,GAAG,aAAa,CAAC,IAAI,CACtC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,UAAU,CACtC,CAAC;IAEF,2BAA2B;IAC3B,MAAM,MAAM,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;IAE7C,mBAAmB;IACnB,UAAU,CAAC,GAAG,CAAC,QAAQ,EAAE;QACvB,IAAI,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;YAC5B,MAAM;YACN,KAAK,EAAE,MAAM,CAAC,UAAU;YACxB,QAAQ,EAAE,CAAC,MAAkC,aAAlC,MAAM,uBAAN,MAAM,CAA8B,mBAAmB,KAAI,IAAA,yCAAwB,GAAE;YAChG,gBAAgB,EAAE,yBAAyB,CACzC,CAAC,MAAkC,aAAlC,MAAM,uBAAN,MAAM,CAA8B,mBAAmB,KAAI,IAAA,yCAAwB,GAAE,CACvF;SACF,CAAC,CAAC;QACH,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;KACtB,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAC7B,MAAM;QACN,KAAK,EAAE,MAAM,CAAC,UAAU;QAClB,QAAQ,EAAE,CAAC,MAAkC,aAAlC,MAAM,uBAAN,MAAM,CAA8B,mBAAmB,KAAI,IAAA,yCAAwB,GAAE;QACpG,gBAAgB,EAAE,yBAAyB,CACzC,CAAC,MAAkC,aAAlC,MAAM,uBAAN,MAAM,CAA8B,mBAAmB,KAAI,IAAA,yCAAwB,GAAE,CACvF;KACJ,CAAC,CAAC,CAAC;AACN,CAAC;AAjRD,0CAiRC;AAED,MAAM,qBAAqB,GAAG,KAAK,EAAE,MAAc,EAAgC,EAAE;IACnF,IAAI,QAAQ,GAAwB;QAClC,IAAI,EAAE,CAAC;QACP,KAAK,EAAE,CAAC;QACR,KAAK,EAAE,CAAC;QACR,GAAG,EAAE,CAAC;KACP,CAAC;IAEF,KAAK,MAAM,UAAU,IAAI,MAAM,CAAC,WAAW,EAAE;QAC3C,MAAM,SAAS,GACb,CAAC,UAAsC,aAAtC,UAAU,uBAAV,UAAU,CAA8B,mBAAmB,KAAI,IAAA,yCAAwB,GAAE,CAAC;QAC7F,MAAM,SAAS,GAAG,UAAU,CAAC,kBAAkB,CAAC;QAEhD,wDAAwD;QACxD,IAAI,cAAc,GAAG,CAAC,CAAC;QACvB,IAAI,SAAS,EAAE;YACb,MAAM,aAAa,GAAG,SAAoC,CAAC;YAC3D,MAAM,QAAQ,GAAG,CAAA,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,QAAQ,KAAI,CAAC,CAAC;YAC9C,MAAM,MAAM,GAAG,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,MAAM,CAAC;YACrC,MAAM,OAAO,GAAG,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,OAAO,KAAI,CAAC,CAAC;YACrC,MAAM,KAAK,GAAG,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,KAAK,KAAI,CAAC,CAAC;YAEjC,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,OAAO,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC;SACjE;QAED,MAAM,YAAY,GAAG;YACnB,IAAI,EAAE,SAAS,CAAC,IAAI,GAAG,cAAc;YACrC,KAAK,EAAE,SAAS,CAAC,KAAK,GAAG,cAAc;YACvC,KAAK,EAAE,SAAS,CAAC,KAAK,GAAG,cAAc;YACvC,GAAG,EAAE,SAAS,CAAC,GAAG,GAAG,cAAc;SACpC,CAAC;QAEF,QAAQ,GAAG,+BAAc,CAAC,iBAAiB,CACzC,QAAQ,EACR,YAAY,EACZ,UAAU,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,CAC/B,CAAC;KACH;IAED,OAAO,+BAAc,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;AACtD,CAAC,CAAC;AAWF,MAAM,oBAAoB,GAAG,CAC3B,YAAwB,EACxB,aAAyB,EACzB,EAAE;IACF,IAAI,KAAK,GAAG,CAAC,CAAC;IAEd,iCAAiC;IACjC,MAAM,aAAa,GAAG,aAAa,CAAC,YAAY,KAAK,OAAO,CAAC;IAE7D,yEAAyE;IACzE,IAAI,YAAY,CAAC,MAAM,KAAK,aAAa,CAAC,YAAY,EAAE;QACtD,0BAA0B;QAC1B,KAAK,IAAI,GAAG,CAAC;QAEb,wEAAwE;QACxE,IACE,aAAa;YACb,YAAY,CAAC,SAAS;YACtB,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,SAAS,KAAK,MAAM,CAAC,EACrH;YACA,KAAK,IAAI,GAAG,CAAC,CAAC,mEAAmE;SAClF;KACF;IAED,2CAA2C;IAC3C,IAAI,YAAY,CAAC,KAAK,KAAK,aAAa,CAAC,WAAW,EAAE;QACpD,KAAK,IAAI,GAAG,CAAC,CAAC,qBAAqB;KACpC;IAED,sDAAsD;IACtD,IAAI,YAAY,CAAC,SAAS,KAAK,aAAa,CAAC,eAAe,EAAE;QAC5D,KAAK,IAAI,IAAI,CAAC,CAAC,iCAAiC;KACjD;IAED,wCAAwC;IACxC,IAAI,YAAY,CAAC,SAAS,IAAI,aAAa,CAAC,eAAe,EAAE;QAC3D,sBAAsB;QACtB,IACE,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,SAAS,KAAK,KAAK,CAAC;YACnH,CAAC,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,eAAe,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,eAAe,KAAK,KAAK,CAAC,EACxI;YACA,KAAK,IAAI,IAAI,CAAC;SACf;QAED,uBAAuB;QACvB,IACE,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,SAAS,KAAK,MAAM,CAAC;YACrH,CAAC,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,eAAe,KAAK,MAAM,CAAC,EAC1I;YACA,KAAK,IAAI,IAAI,CAAC;SACf;QAED,uBAAuB;QACvB,IACE,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,SAAS,KAAK,MAAM,CAAC;YACrH,CAAC,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,eAAe,KAAK,MAAM,CAAC,EAC1I;YACA,mCAAmC;YACnC,KAAK,IAAI,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;SACtC;KACF;IAED,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,aAAa;AAC5C,CAAC,CAAC;AAEF,MAAM,yBAAyB,GAAG,CAChC,QAA6B,EACT,EAAE;IACtB,uDAAuD;IACvD,OAAO,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;SAC5B,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,KAAK,SAAS,CAAC;SAC3D,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;SAC3C,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;SACX,GAAG,CAAC,CAAC,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,OAAO,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC;AAEF,KAAK,UAAU,2BAA2B,CACxC,MAAc,EACd,aAAgC;IAEhC,2CAA2C;IAC3C,IAAI,KAAK,GAAG,GAAG,CAAC;IAEhB,uCAAuC;IACvC,MAAM,cAAc,GAAG,MAAM,qBAAqB,CAAC,MAAM,CAAC,CAAC;IAC3D,MAAM,sBAAsB,GAAG,yBAAyB,CAAC,cAAc,CAAC,CAAC;IAEzE,0DAA0D;IAC1D,IAAI,sBAAsB,CAAC,MAAM,GAAG,CAAC,EAAE;QACrC,MAAM,CAAC,cAAc,EAAE,YAAY,CAAC,GAAG,sBAAsB,CAAC,CAAC,CAAC,CAAC;QACjE,IAAI,YAAY,GAAG,GAAG,EAAE;YACtB,uDAAuD;YACvD,KAAK,IAAI,GAAG,CAAC;SACd;KACF;IAED,uEAAuE;IACvE,MAAM,cAAc,GAAG,2BAA2B,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;IAC1E,KAAK,IAAI,cAAc,GAAG,GAAG,CAAC,CAAC,oBAAoB;IAEnD,4FAA4F;IAC5F,MAAM,SAAS,GAAG,MAAM,CAAC,SAAS,IAAI,EAAE,CAAC;IACzC,6EAA6E;IAC7E,MAAM,UAAU,GAAG,aAAwC,CAAC;IAC5D,MAAM,iBAAiB,GAAG,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,iBAAiB,CAAC;IAExD,6EAA6E;IAC7E,IAAI,iBAAiB,EAAE;QACrB,MAAM,aAAa,GAAG,sBAAsB,CAC1C,SAAgC,EAChC,iBAAiB,CAClB,CAAC;QACF,KAAK,IAAI,aAAa,GAAG,GAAG,CAAC,CAAC,oBAAoB;KACnD;IAED,uEAAuE;IACvE,IAAI,MAAM,CAAC,kBAAkB,EAAE;QAC7B,MAAM,iBAAiB,GAAG,oBAAoB,CAC5C,MAAM,CAAC,kBAAkB,EACzB,aAAwB,CACzB,CAAC;QACF,KAAK,IAAI,iBAAiB,GAAG,GAAG,CAAC,CAAC,mBAAmB;KACtD;IAED,uDAAuD;IACvD,IAAI,CAAC,MAAkC,aAAlC,MAAM,uBAAN,MAAM,CAA8B,MAAM,MAAK,aAAyC,aAAzC,aAAa,uBAAb,aAAa,CAA8B,MAAM,CAAA,EAAE;QACrG,MAAM,aAAa,GAAG,CAAC,MAAiB,aAAjB,MAAM,uBAAN,MAAM,CAAa,MAAM,CAAC,QAAQ,CAAE,aAAwB,aAAxB,aAAa,uBAAb,aAAa,CAAa,MAAM,CAAC;YAC1F,CAAC,CAAC,GAAG;YACL,CAAC,CAAC,GAAG,CAAC;QACR,KAAK,IAAI,aAAa,GAAG,GAAG,CAAC,CAAC,mBAAmB;KAClD;IAED,qCAAqC;IACrC,MAAM,gBAAgB,GAAG,6BAA6B,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;IAC9E,KAAK,IAAI,gBAAgB,GAAG,GAAG,CAAC,CAAC,mBAAmB;IAEpD,oFAAoF;IACpF,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;AACzC,CAAC;AAED,SAAS,2BAA2B,CAClC,MAAc,EACd,aAAgC;IAEhC,kCAAkC;IAClC,MAAM,cAAc,GAAG,qBAAqB,CAAC,MAAM,CAAC,CAAC;IAErD,gDAAgD;IAChD,MAAM,eAAe,GACnB,CAAC,aAAyC,aAAzC,aAAa,uBAAb,aAAa,CAA8B,mBAAmB,KAAI,IAAA,yCAAwB,GAAE,CAAC;IAEhG,mEAAmE;IACnE,IAAI,UAAU,GAAG,CAAC,CAAC;IACnB,IAAI,WAAW,GAAG,CAAC,CAAC;IAEpB,+CAA+C;IAC/C,MAAM,gBAAgB,GAAG,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC;SACrD,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,KAAK,KAAK,SAAS,IAAI,CAAC,KAAK,CAAC,KAAe,CAAC,CAAC,CAAC,4BAA4B;SAClG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAE,CAAY,IAAI,CAAC,CAAC,GAAG,CAAE,CAAY,IAAI,CAAC,CAAC,CAAC,CAAC,oBAAoB;SACxF,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;SACX,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC;IAE/B,mDAAmD;IACnD,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,EAAE;QAC3D,sBAAsB;QACtB,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,CAAC,KAAe,CAAC;YAAE,OAAO;QAE1D,MAAM,MAAM,GAAG,gBAAgB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;QAC9D,MAAM,WAAW,GACf,cAAc,CAAC,OAAoC,CAAC,IAAI,CAAC,CAAC;QAC5D,MAAM,YAAY,GAAI,KAAgB,IAAI,CAAC,CAAC;QAC5C,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,GAAG,YAAY,CAAC,CAAC;QAElD,oGAAoG;QACpG,MAAM,iBAAiB,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,EAAE,GAAG,CAAC,CAAC;QAElD,UAAU,IAAI,iBAAiB,GAAG,MAAM,CAAC;QACzC,WAAW,IAAI,MAAM,CAAC;IACxB,CAAC,CAAC,CAAC;IAEH,kEAAkE;IAClE,OAAO,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC,UAAU,GAAG,CAAC,WAAW,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;AACjE,CAAC;AAED,kDAAkD;AAClD,SAAS,6BAA6B,CACpC,MAAc,EACd,aAAgC;IAEhC,4EAA4E;IAC5E,MAAM,UAAU,GAAG,aAAwC,CAAC;IAC5D,MAAM,gBAAgB,GAAG,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,gBAAgB,CAAC;IAEtD,kFAAkF;IAClF,IAAI,CAAC,MAAM,CAAC,WAAW,IAAI,CAAC,gBAAgB,EAAE;QAC5C,OAAO,GAAG,CAAC;KACZ;IAED,IAAI,KAAK,GAAG,GAAG,CAAC,CAAC,2BAA2B;IAC5C,IAAI,YAAY,GAAG,CAAC,CAAC;IAErB,+CAA+C;IAC/C,IACE,gBAAgB;QAChB,gBAAgB,CAAC,WAAW;QAC5B,cAAc,CAAC,MAAM,CAAC,EACtB;QACA,KAAK,IAAI,GAAG,CAAC;QACb,YAAY,EAAE,CAAC;KAChB;IAED,IACE,gBAAgB;QAChB,gBAAgB,CAAC,OAAO;QACxB,UAAU,CAAC,MAAM,CAAC,EAClB;QACA,KAAK,IAAI,GAAG,CAAC;QACb,YAAY,EAAE,CAAC;KAChB;IAED,IACE,gBAAgB;QAChB,gBAAgB,CAAC,SAAS;QAC1B,YAAY,CAAC,MAAM,CAAC,EACpB;QACA,KAAK,IAAI,GAAG,CAAC;QACb,YAAY,EAAE,CAAC;KAChB;IAED,IACE,gBAAgB;QAChB,gBAAgB,CAAC,MAAM;QACvB,SAAS,CAAC,MAAM,CAAC,EACjB;QACA,KAAK,IAAI,GAAG,CAAC;QACb,YAAY,EAAE,CAAC;KAChB;IAED,2DAA2D;IAC3D,IAAI,YAAY,KAAK,CAAC,EAAE;QACtB,OAAO,KAAK,CAAC;KACd;IAED,wDAAwD;IACxD,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,GAAG,GAAG,GAAG,YAAY,CAAC,CAAC;AACnD,CAAC;AAED,8CAA8C;AAC9C,SAAS,cAAc,CAAC,MAAc;IACpC,OAAO,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE;QAC5C,MAAM,aAAa,GAAG,UAAU,CAAC,kBAA6C,CAAC;QAC/E,MAAM,MAAM,GAAG,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,MAAM,CAAC;QACrC,MAAM,OAAO,GAAG,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,OAAO,KAAI,CAAC,CAAC;QACrC,OAAO,OAAO,GAAG,EAAE,CAAC;IACtB,CAAC,CAAC,CAAC;AACL,CAAC;AAED,SAAS,UAAU,CAAC,MAAc;IAChC,MAAM,UAAU,GAAG,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,UAAU,EAAE,EAAE;QAC/D,MAAM,aAAa,GAAG,UAAU,CAAC,kBAA6C,CAAC;QAC/E,MAAM,MAAM,GAAG,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,MAAM,CAAC;QACrC,MAAM,KAAK,GAAG,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,KAAK,KAAI,CAAC,CAAC;QACjC,OAAO,GAAG,GAAG,KAAK,CAAC;IACrB,CAAC,EAAE,CAAC,CAAC,CAAC;IACN,OAAO,UAAU,GAAG,EAAE,CAAC;AACzB,CAAC;AAED,SAAS,YAAY,CAAC,MAAc;IAClC,OAAO,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE;QAC5C,MAAM,aAAa,GAAG,UAAU,CAAC,kBAA6C,CAAC;QAC/E,MAAM,MAAM,GAAG,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,MAAM,CAAC;QACrC,MAAM,KAAK,GAAG,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,KAAK,KAAI,CAAC,CAAC;QACjC,OAAO,KAAK,GAAG,CAAC,CAAC;IACnB,CAAC,CAAC,CAAC;AACL,CAAC;AAED,SAAS,SAAS,CAAC,MAAc;IAC/B,MAAM,QAAQ,GAAG,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,UAAU,EAAE,EAAE;QAC7D,MAAM,aAAa,GAAG,UAAU,CAAC,kBAA6C,CAAC;QAC/E,MAAM,MAAM,GAAG,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,MAAM,CAAC;QACrC,MAAM,GAAG,GAAG,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,GAAG,KAAI,CAAC,CAAC;QAC7B,OAAO,GAAG,GAAG,GAAG,CAAC;IACnB,CAAC,EAAE,CAAC,CAAC,CAAC;IACN,OAAO,QAAQ,GAAG,EAAE,CAAC;AACvB,CAAC;AAED,8CAA8C;AAC9C,SAAS,sBAAsB,CAC7B,SAAmB,EACnB,iBAAoD;IAEpD,IAAI,CAAC,iBAAiB,IAAI,CAAC,SAAS,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;QAC9D,OAAO,GAAG,CAAC,CAAC,8DAA8D;KAC3E;IAED,yDAAyD;IACzD,MAAM,cAAc,GAAG,2BAA2B,CAAC,SAAS,CAAC,CAAC;IAE9D,IAAI,CAAC,cAAc,EAAE;QACnB,OAAO,GAAG,CAAC,CAAC,mDAAmD;KAChE;IAED,IAAI,cAAc,KAAK,iBAAiB,EAAE;QACxC,OAAO,GAAG,CAAC,CAAC,aAAa;KAC1B;SAAM;QACL,kEAAkE;QAClE,gFAAgF;QAChF,IACE,CAAC,cAAc,KAAK,UAAU,IAAI,iBAAiB,KAAK,OAAO,CAAC;YAChE,CAAC,cAAc,KAAK,OAAO,IAAI,iBAAiB,KAAK,UAAU,CAAC,EAChE;YACA,OAAO,GAAG,CAAC;SACZ;aAAM,IACL,CAAC,cAAc,KAAK,UAAU,IAAI,iBAAiB,KAAK,SAAS,CAAC;YAClE,CAAC,cAAc,KAAK,SAAS,IAAI,iBAAiB,KAAK,UAAU,CAAC,EAClE;YACA,OAAO,GAAG,CAAC;SACZ;aAAM,IACL,CAAC,cAAc,KAAK,OAAO,IAAI,iBAAiB,KAAK,SAAS,CAAC;YAC/D,CAAC,cAAc,KAAK,SAAS,IAAI,iBAAiB,KAAK,OAAO,CAAC,EAC/D;YACA,OAAO,GAAG,CAAC;SACZ;KACF;IAED,OAAO,GAAG,CAAC,CAAC,mBAAmB;AACjC,CAAC;AAED,uFAAuF;AACvF,SAAS,2BAA2B,CAClC,SAAmB;IAEnB,kDAAkD;IAClD,MAAM,MAAM,GAAG,EAAE,QAAQ,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC;IAErD,yCAAyC;IACzC,MAAM,gBAAgB,GAAG;QACvB,QAAQ,EAAE;YACR,YAAY;YACZ,YAAY;YACZ,QAAQ;YACR,SAAS;YACT,YAAY;YACZ,WAAW;YACX,UAAU;SACX;QACD,KAAK,EAAE;YACL,WAAW;YACX,aAAa;YACb,WAAW;YACX,QAAQ;YACR,UAAU;YACV,UAAU;YACV,OAAO;SACR;QACD,OAAO,EAAE;YACP,UAAU;YACV,WAAW;YACX,WAAW;YACX,YAAY;YACZ,eAAe;YACf,SAAS;SACV;KACF,CAAC;IAEF,2CAA2C;IAC3C,SAAS,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QAC5B,MAAM,YAAY,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;QAE3C,8BAA8B;QAC9B,IACE,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CACzC,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,CAC/B,EACD;YACA,MAAM,CAAC,QAAQ,EAAE,CAAC;SACnB;QAED,2BAA2B;QAC3B,IACE,gBAAgB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,EACxE;YACA,MAAM,CAAC,KAAK,EAAE,CAAC;SAChB;QAED,6BAA6B;QAC7B,IACE,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,EAC1E;YACA,MAAM,CAAC,OAAO,EAAE,CAAC;SAClB;IACH,CAAC,CAAC,CAAC;IAEH,6BAA6B;IAC7B,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,CAGlC,CAAC;IAEJ,oCAAoC;IACpC,MAAM,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAEnD,mEAAmE;IACnE,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;AAChD,CAAC;AAED,+DAA+D;AAClD,QAAA,cAAc,GAAG;IAC5B,mBAAmB,CAAC,MAAc;QAChC,MAAM,cAAc,GAA2B;YAC7C,GAAG,EAAE,MAAM;YACX,IAAI,EAAE,OAAO;YACb,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,OAAO;YACd,IAAI,EAAE,MAAM;YACZ,OAAO,EAAE,KAAK;YACd,MAAM,EAAE,OAAO;YACf,MAAM,EAAE,KAAK;YACb,OAAO,EAAE,OAAO;YAChB,KAAK,EAAE,OAAO;SACf,CAAC;QACF,OAAO,cAAc,CAAC,MAAM,CAAC,IAAI,SAAS,CAAC;IAC7C,CAAC;IAED,gBAAgB,CAAC,IAAY;QAC3B,MAAM,cAAc,GAA2B;YAC7C,KAAK,EAAE,MAAM;YACb,GAAG,EAAE,MAAM;YACX,WAAW,EAAE,MAAM;YACnB,MAAM,EAAE,OAAO;YACf,KAAK,EAAE,OAAO;YACd,SAAS,EAAE,OAAO;YAClB,MAAM,EAAE,KAAK;YACb,KAAK,EAAE,KAAK;YACZ,QAAQ,EAAE,KAAK;YACf,MAAM,EAAE,OAAO;YACf,OAAO,EAAE,OAAO;YAChB,MAAM,EAAE,OAAO;SAChB,CAAC;QACF,OAAO,cAAc,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC;IAC3C,CAAC;CACF,CAAC;AAEF;;GAEG;AACH,SAAS,WAAW,CAClB,OAA6B,EAC7B,OAAqB,EACrB,MAAkC,EAClC,KAAa;IAEb,8EAA8E;IAC9E,MAAM,SAAS,GACb,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,GAAI,CAAc,aAAd,CAAC,uBAAD,CAAC,CAAe,IAAI,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,KAAI,MAAM,CAAC;IAE3F,2CAA2C;IAC3C,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IAC3C,MAAM,SAAS,GAAG,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;IAE3D,gCAAgC;IAChC,OAAO,GAAG,SAAS,IAAI,UAAU,IAAI,SAAS,IAAI,KAAK,EAAE,CAAC;AAC5D,CAAC;AAED;;GAEG;AACH,SAAgB,eAAe,CAAC,GAAG,GAAG,KAAK;IACzC,IAAI,GAAG,EAAE;QACP,UAAU,CAAC,KAAK,EAAE,CAAC;QACnB,OAAO;KACR;IAED,8BAA8B;IAC9B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IACvB,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,UAAU,CAAC,OAAO,EAAE,EAAE;QAC/C,IAAI,GAAG,GAAG,KAAK,CAAC,SAAS,GAAG,SAAS,EAAE;YACrC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SACxB;KACF;AACH,CAAC;AAbD,0CAaC;AAED;;;GAGG;AACH,SAAS,mBAAmB,CAAC,IAAY,EAAE,IAAY;IACrD,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI;QAAE,OAAO,CAAC,CAAC;IAE7B,oBAAoB;IACpB,MAAM,EAAE,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,CAAC;IACrC,MAAM,EAAE,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,CAAC;IAErC,cAAc;IACd,IAAI,EAAE,KAAK,EAAE;QAAE,OAAO,CAAC,CAAC;IAExB,yCAAyC;IACzC,IAAI,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;QACtC,MAAM,SAAS,GAAG,EAAE,CAAC,MAAM,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QAClD,MAAM,UAAU,GAAG,EAAE,CAAC,MAAM,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QACnD,4DAA4D;QAC5D,MAAM,YAAY,GAAG,SAAS,CAAC,MAAM,IAAI,CAAC,CAAC;QAC3C,OAAO,GAAG,GAAG,CAAC,UAAU,CAAC,MAAM,GAAG,YAAY,CAAC,GAAG,GAAG,CAAC;KACvD;IAED,iCAAiC;IACjC,MAAM,IAAI,GAAG,EAAE,CAAC,MAAM,CAAC;IACvB,MAAM,IAAI,GAAG,EAAE,CAAC,MAAM,CAAC;IACvB,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAEpC,sDAAsD;IACtD,IAAI,MAAM,GAAG,EAAE,EAAE;QACf,OAAO,qBAAqB,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;KACtC;IAED,gEAAgE;IAChE,MAAM,QAAQ,GAAG,mBAAmB,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAC7C,IAAI,UAAU,GAAG,CAAC,GAAG,QAAQ,GAAG,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;IAE9C,2DAA2D;IAC3D,qDAAqD;IACrD,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;IACjE,IAAI,EAAE,CAAC,SAAS,CAAC,CAAC,EAAE,YAAY,CAAC,KAAK,EAAE,CAAC,SAAS,CAAC,CAAC,EAAE,YAAY,CAAC,EAAE;QACnE,UAAU,IAAI,GAAG,CAAC,CAAC,4BAA4B;KAChD;IAED,aAAa;IACb,OAAO,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;AACnC,CAAC;AAED;;GAEG;AACH,SAAS,qBAAqB,CAAC,IAAY,EAAE,IAAY;IACvD,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAClD,IAAI,QAAQ,GAAG,CAAC,CAAC;IAEjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;QAC/B,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE;YAC/C,QAAQ,EAAE,CAAC;SACZ;KACF;IAED,OAAO,CAAC,GAAG,QAAQ,GAAG,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;AACtC,CAAC;AAED;;GAEG;AACH,SAAS,mBAAmB,CAAC,IAAY,EAAE,IAAY;IACrD,MAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;IACtB,MAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;IAEtB,gBAAgB;IAChB,MAAM,MAAM,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;SACxB,IAAI,CAAC,IAAI,CAAC;SACV,GAAG,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAEtC,4BAA4B;IAC5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;QAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC9C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;QAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAE9C,kBAAkB;IAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;QAC3B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;YAC3B,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;gBAC/B,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;aACrC;iBAAM;gBACL,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CACrB,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,WAAW;gBACjC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,YAAY;gBAClC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,eAAe;iBACzC,CAAC;aACH;SACF;KACF;IAED,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC;AAED;;;GAGG;AACI,MAAM,4BAA4B,GAAG,CAC1C,MAAc,EAKZ,EAAE;IACJ,IAAI,CAAC,MAAM,CAAC,WAAW,IAAI,MAAM,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;QAC1D,OAAO,EAAE,CAAC;KACX;IAED,2DAA2D;IAC3D,MAAM,SAAS,GAAG,OAAO,MAAM,KAAK,WAAW,CAAC;IAEhD,mDAAmD;IACnD,MAAM,QAAQ,GAAG,sBAAsB,MAAM,CAAC,EAAE,KAAK,MAAkC,aAAlC,MAAM,uBAAN,MAAM,CAA8B,IAAI,CAAA,EAAE,CAAC;IAChG,IAAI,MAAM,GAAkB,IAAI,CAAC;IAEjC,2DAA2D;IAC3D,IAAI,SAAS,EAAE;QACb,IAAI;YACF,MAAM,GAAG,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;SAChD;QAAC,OAAO,CAAC,EAAE;YACV,mDAAmD;SACpD;KACF;IAED,2BAA2B;IAC3B,IAAI,MAAM,EAAE;QACV,IAAI;YACF,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACvC,gEAAgE;YAChE,IACE,WAAW,CAAC,SAAS;gBACrB,IAAI,CAAC,GAAG,EAAE,GAAG,WAAW,CAAC,SAAS,GAAG,OAAO,IAAI,eAAe;gBAC/D,WAAW,CAAC,eAAe,KAAK,MAAM,CAAC,WAAW,CAAC,MAAM,EACzD;gBACA,OAAO,WAAW,CAAC,OAAO,CAAC;aAC5B;SACF;QAAC,OAAO,CAAC,EAAE;YACV,+DAA+D;SAChE;KACF;IAED,MAAM,OAAO,GAAG,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,gBAAgB,EAAE,EAAE;QAC1D,+BAA+B;QAC/B,MAAM,MAAM,GAAG;YACb,IAAI,EAAG,gBAA4C,aAA5C,gBAAgB,uBAAhB,gBAAgB,CAA8B,IAAI;YACzD,SAAS,EAAE,SAAS;YACpB,UAAU,EAAE,CAAC;SACd,CAAC;QAEF,2BAA2B;QAC3B,MAAM,UAAU,GAAG,4BAAc,CAAE,gBAA2B,aAA3B,gBAAgB,uBAAhB,gBAAgB,CAAa,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;QACpF,IAAI,UAAU,EAAE;YACd,MAAM,CAAC,SAAS,GAAG,UAA+B,CAAC;YACnD,MAAM,CAAC,UAAU,GAAG,GAAG,CAAC;YACxB,OAAO,MAAM,CAAC;SACf;QAED,2DAA2D;QAC3D,MAAM,SAAS,GAAI,gBAA2B,aAA3B,gBAAgB,uBAAhB,gBAAgB,CAAa,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;QAChF,KAAK,MAAM,IAAI,IAAI,SAAS,EAAE;YAC5B,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC;gBAAE,SAAS,CAAC,0CAA0C;YAEzE,MAAM,SAAS,GAAG,4BAAc,CAAC,IAAI,CAAC,CAAC;YACvC,IAAI,SAAS,EAAE;gBACb,MAAM,CAAC,SAAS,GAAG,SAA8B,CAAC;gBAClD,MAAM,CAAC,UAAU,GAAG,GAAG,CAAC;gBACxB,OAAO,MAAM,CAAC;aACf;SACF;QAED,qDAAqD;QACrD,yDAAyD;QACzD,IAAI,SAAS,GAAG;YACd,UAAU,EAAE,IAAgC;YAC5C,UAAU,EAAE,GAAG;SAChB,CAAC;QAEF,KAAK,MAAM,CAAC,GAAG,EAAE,UAAU,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,4BAAc,CAAC,EAAE;YAC9D,gDAAgD;YAChD,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC;gBAAE,SAAS;YAE7B,+CAA+C;YAC/C,MAAM,aAAa,GACjB,gBAAgB,CAAC,QAAQ;gBACzB,UAAU,CAAC,QAAQ,KAAK,gBAAgB,CAAC,QAAQ;gBAC/C,CAAC,CAAC,GAAG;gBACL,CAAC,CAAC,CAAC,CAAC;YAER,8BAA8B;YAC9B,MAAM,UAAU,GACd,mBAAmB,CAAE,gBAA4C,aAA5C,gBAAgB,uBAAhB,gBAAgB,CAA8B,IAAI,EAAE,GAAG,CAAC,GAAG,aAAa,CAAC;YAEhG,IAAI,UAAU,GAAG,SAAS,CAAC,UAAU,EAAE;gBACrC,SAAS,GAAG;oBACV,UAAU;oBACV,UAAU,EAAE,UAA0C;iBACvD,CAAC;aACH;SACF;QAED,IAAI,SAAS,CAAC,UAAU,IAAI,SAAS,CAAC,UAAU,GAAG,GAAG,EAAE;YACtD,MAAM,CAAC,SAAS,GAAG,SAAS,CAAC,UAAU,CAAC;YACxC,MAAM,CAAC,UAAU,GAAG,SAAS,CAAC,UAAU,CAAC;YACzC,OAAO,MAAM,CAAC;SACf;QAED,yCAAyC;QACzC,MAAM,cAAc,GAAG,gBAA2C,CAAC;QACnE,MAAM,KAAK,GAAG,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,KAAK,CAAC;QACpC,IAAI,KAAK,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YACrD,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;gBACxB,MAAM,SAAS,GAAG,4BAAc,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;gBACrD,IAAI,SAAS,EAAE;oBACb,MAAM,CAAC,SAAS,GAAG,SAA8B,CAAC;oBAClD,MAAM,CAAC,UAAU,GAAG,GAAG,CAAC;oBACxB,OAAO,MAAM,CAAC;iBACf;aACF;SACF;QAED,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC,CAAC;IAEH,oBAAoB;IACpB,IAAI,SAAS,EAAE;QACb,IAAI;YACF,MAAM,CAAC,YAAY,CAAC,OAAO,CACzB,QAAQ,EACR,IAAI,CAAC,SAAS,CAAC;gBACb,OAAO;gBACP,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;gBACrB,eAAe,EAAE,MAAM,CAAC,WAAW,CAAC,MAAM;aAC3C,CAAC,CACH,CAAC;SACH;QAAC,OAAO,CAAC,EAAE;YACV,0DAA0D;SAC3D;KACF;IAED,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AA/IW,QAAA,4BAA4B,gCA+IvC;AAEF;;GAEG;AACH,SAAS,yBAAyB,CAChC,aAA8C,EAC9C,SAA0C;IAE1C,IAAI,CAAC,aAAa,IAAI,CAAC,SAAS;QAAE,OAAO,GAAG,CAAC,CAAC,qCAAqC;IAEnF,IAAI,UAAU,GAAG,CAAC,CAAC;IACnB,IAAI,YAAY,GAAG,CAAC,CAAC;IAErB,wCAAwC;IACxC,MAAM,OAAO,GAAG;QACd,SAAS;QACT,OAAO;QACP,KAAK;QACL,OAAO;QACP,UAAU;QACV,UAAU;QACV,UAAU;QACV,cAAc;KACf,CAAC;IAEF,+DAA+D;IAC/D,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;QACzB,IACE,aAAa,CAAC,MAAM,CAAC,KAAK,SAAS;YACnC,SAAS,CAAC,MAAM,CAAC,KAAK,SAAS,EAC/B;YACA,+DAA+D;YAC/D,IAAI,SAAS,CAAC,MAAM,CAAC,KAAK,KAAK,EAAE;gBAC/B,8CAA8C;gBAC9C,MAAM,WAAW,GACf,OAAO,aAAa,CAAC,MAAM,CAAC,KAAK,QAAQ;oBACvC,CAAC,CAAE,aAAa,CAAC,MAAM,CAAY;oBACnC,CAAC,CAAC,UAAU,CAAC,aAAa,CAAC,MAAM,CAAW,CAAC,IAAI,CAAC,CAAC;gBAEvD,MAAM,eAAe,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBAChE,UAAU,IAAI,eAAe,CAAC;aAC/B;YACD,oEAAoE;iBAC/D,IAAI,SAAS,CAAC,MAAM,CAAC,KAAK,MAAM,EAAE;gBACrC,8CAA8C;gBAC9C,MAAM,WAAW,GACf,OAAO,aAAa,CAAC,MAAM,CAAC,KAAK,QAAQ;oBACvC,CAAC,CAAE,aAAa,CAAC,MAAM,CAAY;oBACnC,CAAC,CAAC,UAAU,CAAC,aAAa,CAAC,MAAM,CAAW,CAAC,IAAI,CAAC,CAAC;gBAEvD,MAAM,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC5D,UAAU,IAAI,eAAe,CAAC;aAC/B;YACD,mDAAmD;iBAC9C,IACH,OAAO,SAAS,CAAC,MAAM,CAAC,KAAK,QAAQ;gBACrC,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EACjC;gBACA,MAAM,SAAS,GACb,OAAO,SAAS,CAAC,MAAM,CAAC,KAAK,QAAQ;oBACnC,CAAC,CAAE,SAAS,CAAC,MAAM,CAAY;oBAC/B,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,CAAW,CAAC,CAAC;gBAE9C,MAAM,WAAW,GACf,OAAO,aAAa,CAAC,MAAM,CAAC,KAAK,QAAQ;oBACvC,CAAC,CAAE,aAAa,CAAC,MAAM,CAAY;oBACnC,CAAC,CAAC,UAAU,CAAC,aAAa,CAAC,MAAM,CAAW,CAAC,CAAC;gBAElD,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE;oBAC5C,oEAAoE;oBACpE,MAAM,SAAS,GACb,CAAC;wBACD,IAAI,CAAC,GAAG,CACN,IAAI,CAAC,GAAG,CAAC,WAAW,GAAG,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,EACjE,CAAC,CACF,CAAC;oBACJ,UAAU,IAAI,SAAS,CAAC;iBACzB;aACF;YAED,YAAY,EAAE,CAAC;SAChB;IACH,CAAC,CAAC,CAAC;IAEH,6CAA6C;IAC7C,OAAO,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC,UAAU,GAAG,CAAC,YAAY,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;AACnE,CAAC;AAWD,SAAS,0BAA0B,CACjC,eAAsC,EACtC,QAAgB;;IAEhB,IAAI,CAAC,eAAe,IAAI,CAAC,QAAQ;QAAE,OAAO,GAAG,CAAC,CAAC,gCAAgC;IAE/E,+DAA+D;IAC/D,MAAM,cAAc,GAA2B;QAC7C,KAAK,EAAE,MAAM;QACb,MAAM,EAAE,OAAO;QACf,MAAM,EAAE,KAAK;QACb,MAAM,EAAE,OAAO;QACf,GAAG,EAAE,MAAM;QACX,KAAK,EAAE,OAAO;QACd,KAAK,EAAE,KAAK;QACZ,OAAO,EAAE,OAAO;QAChB,WAAW,EAAE,MAAM;QACnB,SAAS,EAAE,OAAO;QAClB,QAAQ,EAAE,KAAK;QACf,MAAM,EAAE,OAAO;KAChB,CAAC;IAEF,+CAA+C;IAC/C,0DAA0D;IAC1D,MAAM,oBAAoB,GAA2C;QACnE,IAAI,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE;QACrD,KAAK,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;QACtD,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE;QACpD,KAAK,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE;KACvD,CAAC;IAEF,2DAA2D;IAC3D,MAAM,iBAAiB,GAA2C;QAChE,aAAa;QACb,KAAK,EAAE;YACL,KAAK,EAAE,GAAG;YACV,GAAG,EAAE,GAAG;YACR,WAAW,EAAE,GAAG;YAChB,MAAM,EAAE,GAAG;YACX,KAAK,EAAE,GAAG;YACV,QAAQ,EAAE,GAAG;YACb,MAAM,EAAE,GAAG;YACX,KAAK,EAAE,GAAG;YACV,SAAS,EAAE,GAAG;YACd,MAAM,EAAE,GAAG;YACX,OAAO,EAAE,GAAG;YACZ,MAAM,EAAE,GAAG,EAAE,4BAA4B;SAC1C;QACD,GAAG,EAAE;YACH,KAAK,EAAE,GAAG;YACV,GAAG,EAAE,GAAG;YACR,WAAW,EAAE,GAAG;YAChB,MAAM,EAAE,GAAG;YACX,KAAK,EAAE,GAAG;YACV,QAAQ,EAAE,GAAG;YACb,MAAM,EAAE,GAAG;YACX,KAAK,EAAE,GAAG;YACV,SAAS,EAAE,GAAG;YACd,MAAM,EAAE,GAAG;YACX,OAAO,EAAE,GAAG;YACZ,MAAM,EAAE,GAAG;SACZ;QACD,WAAW,EAAE;YACX,KAAK,EAAE,GAAG;YACV,GAAG,EAAE,GAAG;YACR,WAAW,EAAE,GAAG;YAChB,MAAM,EAAE,GAAG;YACX,KAAK,EAAE,GAAG;YACV,QAAQ,EAAE,GAAG;YACb,MAAM,EAAE,GAAG;YACX,KAAK,EAAE,GAAG;YACV,SAAS,EAAE,GAAG;YACd,MAAM,EAAE,GAAG;YACX,OAAO,EAAE,GAAG;YACZ,MAAM,EAAE,GAAG;SACZ;QACD,cAAc;QACd,MAAM,EAAE;YACN,MAAM,EAAE,GAAG;YACX,KAAK,EAAE,GAAG;YACV,SAAS,EAAE,GAAG;YACd,MAAM,EAAE,GAAG;YACX,OAAO,EAAE,GAAG;YACZ,MAAM,EAAE,GAAG;YACX,KAAK,EAAE,GAAG;YACV,GAAG,EAAE,GAAG;YACR,WAAW,EAAE,GAAG;YAChB,MAAM,EAAE,GAAG;YACX,KAAK,EAAE,GAAG;YACV,QAAQ,EAAE,GAAG;SACd;QACD,KAAK,EAAE;YACL,MAAM,EAAE,GAAG;YACX,KAAK,EAAE,GAAG;YACV,SAAS,EAAE,GAAG;YACd,MAAM,EAAE,GAAG;YACX,OAAO,EAAE,GAAG;YACZ,MAAM,EAAE,GAAG;YACX,KAAK,EAAE,GAAG;YACV,GAAG,EAAE,GAAG;YACR,WAAW,EAAE,GAAG;YAChB,MAAM,EAAE,GAAG;YACX,KAAK,EAAE,GAAG;YACV,QAAQ,EAAE,GAAG;SACd;QACD,SAAS,EAAE;YACT,MAAM,EAAE,GAAG;YACX,KAAK,EAAE,GAAG;YACV,SAAS,EAAE,GAAG;YACd,MAAM,EAAE,GAAG;YACX,OAAO,EAAE,GAAG;YACZ,MAAM,EAAE,GAAG;YACX,KAAK,EAAE,GAAG;YACV,GAAG,EAAE,GAAG;YACR,WAAW,EAAE,GAAG;YAChB,MAAM,EAAE,GAAG;YACX,KAAK,EAAE,GAAG;YACV,QAAQ,EAAE,GAAG;SACd;QACD,YAAY;QACZ,MAAM,EAAE;YACN,MAAM,EAAE,GAAG;YACX,KAAK,EAAE,GAAG;YACV,QAAQ,EAAE,GAAG;YACb,KAAK,EAAE,GAAG;YACV,GAAG,EAAE,GAAG;YACR,WAAW,EAAE,GAAG;YAChB,MAAM,EAAE,GAAG;YACX,OAAO,EAAE,GAAG;YACZ,MAAM,EAAE,GAAG;YACX,MAAM,EAAE,GAAG;YACX,KAAK,EAAE,GAAG;YACV,SAAS,EAAE,GAAG;SACf;QACD,KAAK,EAAE;YACL,MAAM,EAAE,GAAG;YACX,KAAK,EAAE,GAAG;YACV,QAAQ,EAAE,GAAG;YACb,KAAK,EAAE,GAAG;YACV,GAAG,EAAE,GAAG;YACR,WAAW,EAAE,GAAG;YAChB,MAAM,EAAE,GAAG;YACX,OAAO,EAAE,GAAG;YACZ,MAAM,EAAE,GAAG;YACX,MAAM,EAAE,GAAG;YACX,KAAK,EAAE,GAAG;YACV,SAAS,EAAE,GAAG;SACf;QACD,QAAQ,EAAE;YACR,MAAM,EAAE,GAAG;YACX,KAAK,EAAE,GAAG;YACV,QAAQ,EAAE,GAAG;YACb,KAAK,EAAE,GAAG;YACV,GAAG,EAAE,GAAG;YACR,WAAW,EAAE,GAAG;YAChB,MAAM,EAAE,GAAG;YACX,OAAO,EAAE,GAAG;YACZ,MAAM,EAAE,GAAG;YACX,MAAM,EAAE,GAAG;YACX,KAAK,EAAE,GAAG;YACV,SAAS,EAAE,GAAG;SACf;QACD,cAAc;QACd,MAAM,EAAE;YACN,MAAM,EAAE,GAAG;YACX,OAAO,EAAE,GAAG;YACZ,MAAM,EAAE,GAAG;YACX,MAAM,EAAE,GAAG;YACX,KAAK,EAAE,GAAG;YACV,SAAS,EAAE,GAAG;YACd,KAAK,EAAE,GAAG;YACV,GAAG,EAAE,GAAG;YACR,WAAW,EAAE,GAAG;YAChB,MAAM,EAAE,GAAG;YACX,KAAK,EAAE,GAAG;YACV,QAAQ,EAAE,GAAG;SACd;QACD,OAAO,EAAE;YACP,MAAM,EAAE,GAAG;YACX,OAAO,EAAE,GAAG;YACZ,MAAM,EAAE,GAAG;YACX,MAAM,EAAE,GAAG;YACX,KAAK,EAAE,GAAG;YACV,SAAS,EAAE,GAAG;YACd,KAAK,EAAE,GAAG;YACV,GAAG,EAAE,GAAG;YACR,WAAW,EAAE,GAAG;YAChB,MAAM,EAAE,GAAG;YACX,KAAK,EAAE,GAAG;YACV,QAAQ,EAAE,GAAG;SACd;QACD,MAAM,EAAE;YACN,MAAM,EAAE,GAAG;YACX,OAAO,EAAE,GAAG;YACZ,MAAM,EAAE,GAAG;YACX,MAAM,EAAE,GAAG;YACX,KAAK,EAAE,GAAG;YACV,SAAS,EAAE,GAAG;YACd,KAAK,EAAE,GAAG;YACV,GAAG,EAAE,GAAG;YACR,WAAW,EAAE,GAAG;YAChB,MAAM,EAAE,GAAG;YACX,KAAK,EAAE,GAAG;YACV,QAAQ,EAAE,GAAG;SACd;KACF,CAAC;IAEF,MAAM,aAAa,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC;IAC7C,MAAM,WAAW,GAAG,cAAc,CAAC,aAAa,CAAC,CAAC;IAElD,IAAI,CAAC,WAAW;QAAE,OAAO,GAAG,CAAC,CAAC,4CAA4C;IAE1E,yDAAyD;IACzD,MAAM,aAAa,GAAG,eAAsC,CAAC;IAC7D,MAAM,IAAI,GAAG,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,IAAI,CAAC;IACjC,MAAM,QAAQ,GAAG,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,QAAQ,CAAC;IAEzC,+CAA+C;IAC/C,IAAI,IAAI,EAAE;QACR,MAAM,eAAe,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAE3C,sCAAsC;QACtC,IAAI,eAAe,KAAK,aAAa,EAAE;YACrC,OAAO,GAAG,CAAC;SACZ;QAED,+BAA+B;QAC/B,IAAI,MAAA,iBAAiB,CAAC,aAAa,CAAC,0CAAG,eAAe,CAAC,EAAE;YACvD,OAAO,iBAAiB,CAAC,aAAa,CAAC,CAAC,eAAe,CAAC,CAAC;SAC1D;QAED,+DAA+D;QAC/D,MAAM,aAAa,GAAG,cAAc,CAAC,eAAe,CAAC,CAAC;QACtD,IAAI,aAAa,IAAI,WAAW,EAAE;YAChC,OAAO,oBAAoB,CAAC,WAAW,CAAC,CAAC,aAAa,CAAC,IAAI,GAAG,CAAC;SAChE;KACF;IAED,8CAA8C;IAC9C,IAAI,QAAQ,EAAE;QACZ,yCAAyC;QACzC,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;YAChC,MAAM,aAAa,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC;YAC7C,OAAO,oBAAoB,CAAC,WAAW,CAAC,CAAC,aAAa,CAAC,IAAI,GAAG,CAAC;SAChE;QAED,+DAA+D;QAC/D,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YAC3B,IAAI,kBAAkB,GAAG,CAAC,CAAC;YAC3B,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAe,EAAE,EAAE;gBACnC,MAAM,SAAS,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;gBACxC,kBAAkB;oBAChB,oBAAoB,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,IAAI,GAAG,CAAC;YACxD,CAAC,CAAC,CAAC;YACH,OAAO,QAAQ,CAAC,MAAM,GAAG,CAAC;gBACxB,CAAC,CAAC,kBAAkB,GAAG,QAAQ,CAAC,MAAM;gBACtC,CAAC,CAAC,GAAG,CAAC;SACT;KACF;IAED,yCAAyC;IACzC,IAAI,eAAe,CAAC,cAAc,EAAE;QAClC,mCAAmC;QACnC,MAAM,YAAY,GAAG,sBAAc,CAAC,mBAAmB,CACrD,MAAM,CACP,CAAC;QACF,IAAI,YAAY,EAAE;YAChB,OAAO,CACL,oBAAoB,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC,IAAI,GAAG,CACrE,CAAC;SACH;KACF;IAED,OAAO,GAAG,CAAC,CAAC,mCAAmC;AACjD,CAAC;AAED;;GAEG;AACH,SAAS,wBAAwB,CAC/B,gBAA6C,EAC7C,cAA2C;IAE3C,IAAI,gBAAgB,KAAK,SAAS,IAAI,cAAc,KAAK,SAAS,EAAE;QAClE,OAAO,GAAG,CAAC,CAAC,2CAA2C;KACxD;IAED,gDAAgD;IAChD,IAAI,0BAAkC,CAAC;IACvC,IAAI,OAAO,gBAAgB,KAAK,QAAQ,EAAE;QACxC,kCAAkC;QAClC,QAAQ,gBAAgB,CAAC,WAAW,EAAE,EAAE;YACtC,KAAK,aAAa,CAAC;YACnB,KAAK,UAAU;gBACb,0BAA0B,GAAG,CAAC,CAAC;gBAC/B,MAAM;YACR,KAAK,QAAQ,CAAC;YACd,KAAK,MAAM;gBACT,0BAA0B,GAAG,CAAC,CAAC;gBAC/B,MAAM;YACR,KAAK,UAAU,CAAC;YAChB,KAAK,cAAc;gBACjB,0BAA0B,GAAG,CAAC,CAAC;gBAC/B,MAAM;YACR,KAAK,SAAS,CAAC;YACf,KAAK,UAAU;gBACb,0BAA0B,GAAG,CAAC,CAAC;gBAC/B,MAAM;YACR,KAAK,cAAc,CAAC;YACpB,KAAK,QAAQ;gBACX,0BAA0B,GAAG,CAAC,CAAC;gBAC/B,MAAM;YACR;gBACE,0BAA0B,GAAG,CAAC,CAAC,CAAC,sCAAsC;SACzE;KACF;SAAM;QACL,0BAA0B,GAAG,gBAA0B,CAAC;KACzD;IAED,2CAA2C;IAC3C,+CAA+C;IAC/C,MAAM,oBAAoB,GAAG,IAAI,CAAC,GAAG,CACnC,CAAC,EACD,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,0BAA0B,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAClD,CAAC;IAEF,yCAAyC;IACzC,IAAI,oBAA4B,CAAC;IAEjC,IAAI,OAAO,cAAc,KAAK,QAAQ,EAAE;QACtC,oBAAoB,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,cAAc,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;KAC3E;SAAM,IAAI,OAAO,cAAc,KAAK,QAAQ,EAAE;QAC7C,kCAAkC;QAClC,QAAQ,cAAc,CAAC,WAAW,EAAE,EAAE;YACpC,KAAK,aAAa,CAAC;YACnB,KAAK,UAAU;gBACb,oBAAoB,GAAG,CAAC,CAAC;gBACzB,MAAM;YACR,KAAK,QAAQ,CAAC;YACd,KAAK,MAAM;gBACT,oBAAoB,GAAG,IAAI,CAAC;gBAC5B,MAAM;YACR,KAAK,UAAU,CAAC;YAChB,KAAK,cAAc;gBACjB,oBAAoB,GAAG,GAAG,CAAC;gBAC3B,MAAM;YACR,KAAK,SAAS,CAAC;YACf,KAAK,UAAU;gBACb,oBAAoB,GAAG,IAAI,CAAC;gBAC5B,MAAM;YACR,KAAK,cAAc,CAAC;YACpB,KAAK,QAAQ;gBACX,oBAAoB,GAAG,CAAC,CAAC;gBACzB,MAAM;YACR;gBACE,oBAAoB,GAAG,GAAG,CAAC,CAAC,sCAAsC;SACrE;KACF;SAAM;QACL,OAAO,GAAG,CAAC,CAAC,qDAAqD;KAClE;IAED,+DAA+D;IAC/D,MAAM,cAAc,GAClB,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,oBAAoB,GAAG,oBAAoB,CAAC,CAAC;IAE5D,oEAAoE;IACpE,uDAAuD;IACvD,MAAM,eAAe,GAAG,CAAC,CAAC,GAAG,oBAAoB,CAAC,GAAG,IAAI,CAAC;IAE1D,OAAO,IAAI,CAAC,GAAG,CAAC,cAAc,GAAG,eAAe,EAAE,CAAC,CAAC,CAAC;AACvD,CAAC","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/recipeMatching.ts"],"sourcesContent":["import type {\n  Recipe,\n  ElementalProperties,\n  AstrologicalState,\n  Season,\n} from \"@/types/alchemy\";\nimport { LocalRecipeService } from '@/services/LocalRecipeService';\n\n// Define IngredientMapping locally since it's not exported from alchemy\ninterface IngredientMapping {\n  name: string;\n  elementalProperties: ElementalProperties;\n  astrologicalProfile?: any;\n  qualities?: string[];\n  // Add commonly missing properties\n  description?: string;\n  category?: string;\n  cuisine?: string;\n  flavorProfile?: Record<string, number>;\n  regionalCuisine?: string;\n  season?: any;\n  timing?: any;\n  duration?: any;\n  matchScore?: number;\n  mealType?: string;\n}\nimport { elementalUtils , getCurrentElementalState } from './elementalUtils';\nimport { ingredientsMap } from '@/data/ingredients';\nimport { calculateMatchScore } from './ElementalCalculator';\n// Import from correct location\nimport { getRecipes } from '@/data/recipes';\nimport { getLatestAstrologicalState } from '@/services/AstrologicalService';\n\ninterface MatchResult {\n  recipe: Recipe;\n  score: number;\n  elements: ElementalProperties;\n  dominantElements: [string, number][];\n  matchedIngredients?: {\n    name: string;\n    matchedTo?: IngredientMapping;\n    confidence: number;\n  }[];\n  // Add commonly missing properties\n  matchScore?: number;\n  timing?: any;\n  duration?: any;\n  season?: any;\n  mealType?: string;\n}\n\ninterface MatchFilters {\n  maxCookingTime?: number;\n  dietaryRestrictions?: string[];\n  season?: Season;\n  servings?: number;\n  excludeIngredients?: string[];\n  cookingMethods?: string[];\n  nutritionalGoals?: Record<string, unknown>;\n  astrologicalSign?: string;\n  mealType?: string;\n  preferHigherContrast?: boolean;\n  preferredComplexity?: number | string;\n}\n\n// Cache for recipe matches to improve performance\ninterface CacheEntry<T> {\n  data: T;\n  timestamp: number;\n}\n\nconst matchCache = new Map<string, CacheEntry<MatchResult[]>>();\nconst CACHE_TTL = 5 * 60 * 1000; // 5 minutes in milliseconds\n\n// Define Modality type\ntype Modality = 'cardinal' | 'fixed' | 'mutable';\n\n/**\n * Find the best recipe matches based on the given parameters\n */\nexport async function findBestMatches(\n  recipes?: Recipe[],\n  matchFilters: MatchFilters = {},\n  currentEnergy: ElementalProperties | null = null,\n  limit = 10\n): Promise<MatchResult[]> {\n  // console.log(`Finding best matches from ${recipes?.length || 0} recipes with filters:`, matchFilters);\n\n  // Generate a cache key based on inputs\n  const cacheKey = getCacheKey(recipes, matchFilters, currentEnergy, limit);\n  const cachedEntry = matchCache.get(cacheKey);\n\n  // Check if we have a valid cache entry\n  if (cachedEntry && Date.now() - cachedEntry.timestamp < CACHE_TTL) {\n    // console.log('Using cached recipe matches');\n    return cachedEntry.data;\n  }\n\n  // If recipes is null, undefined, or not an array, fetch recipes using LocalRecipeService\n  if (!recipes || !Array.isArray(recipes) || recipes.length === 0) {\n    try {\n      // console.log('No recipes provided, fetching from LocalRecipeService');\n      const recipeService = new LocalRecipeService();\n      recipes = await LocalRecipeService.getAllRecipes() as unknown as Recipe[];\n      // console.log(`Fetched ${recipes.length} recipes from LocalRecipeService`);\n    } catch (error) {\n      // console.error('Error fetching recipes from LocalRecipeService:', error);\n      return []; // Return empty array if we can't fetch recipes\n    }\n  }\n\n  // Clone recipes to avoid modifying the original array\n  let filteredRecipes = [...recipes];\n\n  // Apply filters\n  if (matchFilters?.maxCookingTime) {\n    filteredRecipes = filteredRecipes.filter(\n      (recipe) =>\n        // Apply Pattern KK-1: Explicit Type Assertion for comparison operations\n        !recipe.cookingTime || Number(recipe.cookingTime) <= matchFilters.maxCookingTime\n    );\n    // console.log(`After maxCookingTime filter: ${filteredRecipes.length} recipes remain`);\n  }\n\n  if (\n    matchFilters?.dietaryRestrictions &&\n    matchFilters.dietaryRestrictions.length > 0\n  ) {\n    filteredRecipes = filteredRecipes.filter((recipe) => {\n      // Extract recipe data with safe property access\n      const recipeData = recipe as Record<string, unknown>;\n      const dietaryTags = recipeData?.dietaryTags;\n      \n      if (!dietaryTags) return true; // Keep recipes without tags\n\n      // Check if any of the restrictions are in the recipe's dietary tags\n      const hasRestrictedTag = matchFilters.dietaryRestrictions.some(\n        (restriction) => Array.isArray(dietaryTags) && dietaryTags.includes(restriction)\n      );\n\n      // If recipe has the restricted tag, exclude it\n      return !hasRestrictedTag;\n    });\n    // console.log(`After dietaryRestrictions filter: ${filteredRecipes.length} recipes remain`);\n  }\n\n  if (matchFilters?.season) {\n    // Prioritize seasonal recipes but don't completely exclude off-season ones\n    filteredRecipes = filteredRecipes.sort((a, b) => {\n      const aIsInSeason =\n        Array.isArray(a.season) ? a.season.includes((matchFilters as string)?.season) || a.season.includes('all') : a.season === (matchFilters as string)?.season || a.season === 'all';\n      const bIsInSeason =\n        Array.isArray(b.season) ? b.season.includes((matchFilters as string)?.season) || b.season.includes('all') : b.season === (matchFilters as string)?.season || b.season === 'all';\n\n      if (aIsInSeason && !bIsInSeason) return -1;\n      if (!aIsInSeason && bIsInSeason) return 1;\n      return 0;\n    });\n    // console.log(`After season sorting (${(matchFilters as any)?.season}): prioritized seasonal recipes`);\n  }\n\n  if (matchFilters?.servings) {\n    // Filter for recipes that serve at least the required number\n    filteredRecipes = filteredRecipes.filter(\n      (recipe) => \n        // Apply Pattern KK-1: Explicit Type Assertion for comparison operations\n        !recipe.servings || Number(recipe.servings) >= matchFilters.servings\n    );\n    // console.log(`After servings filter: ${filteredRecipes.length} recipes remain`);\n  }\n\n  if (\n    matchFilters?.excludeIngredients &&\n    matchFilters.excludeIngredients.length > 0\n  ) {\n    filteredRecipes = filteredRecipes.filter((recipe) => {\n      if (!recipe.ingredients) return true;\n\n      // Check if any of the excluded ingredients are in the recipe\n      const hasExcludedIngredient = matchFilters.excludeIngredients.some(\n        (excluded) => {\n          const lowerExcluded = excluded.toLowerCase();\n          return recipe.ingredients.some((ingredient) => {\n            if (typeof ingredient === 'string') {\n              const ingredientStr = ingredient as string;\n              return ingredientStr.toLowerCase().includes(lowerExcluded);\n            } else {\n              // Extract ingredient data with safe property access\n              const ingredientData = ingredient as Record<string, unknown>;\n              const name = ingredientData?.name;\n              return typeof name === 'string' && name.toLowerCase().includes(lowerExcluded);\n            }\n          });\n        }\n      );\n\n      // If recipe has excluded ingredient, filter it out\n      return !hasExcludedIngredient;\n    });\n    // console.log(`After excludeIngredients filter: ${filteredRecipes.length} recipes remain`);\n  }\n\n  if (matchFilters?.cookingMethods && matchFilters.cookingMethods.length > 0) {\n    // Prioritize recipes that use preferred cooking methods\n    filteredRecipes = filteredRecipes.sort((a, b) => {\n      // Extract recipe data with safe property access for cooking methods\n      const aData = a as CookingMethod;\n      const bData = b as CookingMethod;\n      const aCookingMethods = aData?.cookingMethods;\n      const bCookingMethods = bData?.cookingMethods;\n      \n      const aUsesMethod =\n        Array.isArray(aCookingMethods) && aCookingMethods.some((method) =>\n          matchFilters.cookingMethods.includes(method)\n        ) || false;\n\n      const bUsesMethod =\n        Array.isArray(bCookingMethods) && bCookingMethods.some((method) =>\n          matchFilters.cookingMethods.includes(method)\n        ) || false;\n\n      if (aUsesMethod && !bUsesMethod) return -1;\n      if (!aUsesMethod && bUsesMethod) return 1;\n      return 0;\n    });\n    // console.log(`After cookingMethods sorting: prioritized recipes with preferred methods`);\n  }\n\n  // If no recipes passed the filtering, return empty array\n  if (filteredRecipes.length === 0) {\n    // console.log('No recipes passed all filters');\n    return [];\n  }\n\n  // Calculate scores for each recipe\n  const scoredRecipes = filteredRecipes.map((recipe) => {\n    let score = 0;\n    const reasons = [];\n\n    // If we have elemental info and current energy, calculate elemental match\n    if ((recipe as Record<string, unknown>)?.elementalProperties && currentEnergy) {\n      const elementalScore = calculateMatchScore(\n        (recipe as Record<string, unknown>)?.elementalProperties,\n        currentEnergy,\n        {\n          season: (matchFilters as Record<string, unknown>)?.season,\n          mealType: Array.isArray(recipe.mealType) ? recipe.mealType[0] : (recipe.mealType as string) || (Array.isArray(matchFilters.mealType) ? matchFilters.mealType[0] : matchFilters.mealType as string),\n          cuisine: (recipe.cuisine as string) || '',\n          preferHigherContrast: matchFilters.preferHigherContrast,\n        }\n      );\n\n      // Weight elemental score at 70% of total\n      score += elementalScore * 0.7;\n\n      // Add reason based on score\n      if (elementalScore > 0.8) {\n        reasons.push('Excellent elemental balance match');\n      } else if (elementalScore > 0.6) {\n        reasons.push('Good elemental balance match');\n      } else if (elementalScore > 0.4) {\n        reasons.push('Moderate elemental balance match');\n      }\n    }\n\n    // Nutritional profile match (15% weight) - Pattern SSS: Unknown Type Casting\n    if (recipe.nutritionalProfile && matchFilters.nutritionalGoals) {\n      const nutritionalMatch = calculateNutritionalMatch(\n        recipe.nutritionalProfile as unknown as Record<string, string | number>,\n        matchFilters.nutritionalGoals as unknown as Record<string, string | number>\n      );\n      score += nutritionalMatch * 0.15;\n\n      if (nutritionalMatch > 0.7) {\n        reasons.push('Supports your nutritional goals');\n      }\n    }\n\n    // Astrological influence match (10% weight if applicable)\n    if (recipe.astrologicalInfluence && matchFilters.astrologicalSign) {\n      const astroMatch = calculateAstrologicalMatch(\n        recipe.astrologicalInfluence,\n        matchFilters.astrologicalSign\n      );\n      score += astroMatch * 0.1;\n\n      if (astroMatch > 0.7) {\n        reasons.push('Astrologically aligned');\n      }\n    }\n\n    // Complexity matching (10% weight) - Pattern SSS: Unknown Type Casting\n    if (\n      recipe.complexity !== undefined &&\n      matchFilters.preferredComplexity !== undefined\n    ) {\n      const complexityScore = calculateComplexityMatch(\n        recipe.complexity as unknown as number | string,\n        matchFilters.preferredComplexity as unknown as number | string\n      );\n      score += complexityScore * 0.1;\n\n      if (complexityScore > 0.8) {\n        reasons.push('Matches your preferred complexity level');\n      }\n    }\n\n    // Small random factor (up to 5%) to avoid identical scores\n    score += Math.random() * 0.05;\n\n    // Normalize score to be between 0 and 1\n    score = Math.min(1, Math.max(0, score));\n\n    // Calculate match percentage (scaled for UI)\n    const matchPercentage = Math.round(score * 100);\n\n    return {\n      ...recipe,\n      matchScore: score,\n      matchPercentage,\n      matchReasons: reasons,\n    };\n  });\n\n  // Sort recipes by score (highest first)\n  const sortedRecipes = scoredRecipes.sort(\n    (a, b) => b.matchScore - a.matchScore\n  );\n\n  // Return the top N recipes\n  const result = sortedRecipes.slice(0, limit);\n\n  // Cache the result\n  matchCache.set(cacheKey, {\n    data: result.map((recipe) => ({\n      recipe,\n      score: recipe.matchScore,\n      elements: (recipe as Record<string, unknown>)?.elementalProperties || getCurrentElementalState(),\n      dominantElements: calculateDominantElements(\n        (recipe as Record<string, unknown>)?.elementalProperties || getCurrentElementalState()\n      ),\n    })),\n    timestamp: Date.now(),\n  });\n\n  return result.map((recipe) => ({\n    recipe,\n    score: recipe.matchScore,\n          elements: (recipe as Record<string, unknown>)?.elementalProperties || getCurrentElementalState(),\n      dominantElements: calculateDominantElements(\n        (recipe as Record<string, unknown>)?.elementalProperties || getCurrentElementalState()\n      ),\n  }));\n}\n\nconst calculateBaseElements = async (recipe: Recipe): Promise<ElementalProperties> => {\n  let elements: ElementalProperties = {\n    Fire: 0,\n    Water: 0,\n    Earth: 0,\n    Air: 0,\n  };\n\n  for (const ingredient of recipe.ingredients) {\n    const baseProps =\n      (ingredient as Record<string, unknown>)?.elementalProperties || getCurrentElementalState();\n    const nutrition = ingredient.nutritionalProfile;\n\n    // Calculate nutritional boost with safe property access\n    let nutritionBoost = 1;\n    if (nutrition) {\n      const nutritionData = nutrition as Record<string, unknown>;\n      const calories = nutritionData?.calories || 0;\n      const macros = nutritionData?.macros;\n      const protein = macros?.protein || 0;\n      const fiber = macros?.fiber || 0;\n      \n      nutritionBoost = Math.log1p(calories + protein * 3 + fiber * 2);\n    }\n\n    const boostedProps = {\n      Fire: baseProps.Fire * nutritionBoost,\n      Water: baseProps.Water * nutritionBoost,\n      Earth: baseProps.Earth * nutritionBoost,\n      Air: baseProps.Air * nutritionBoost,\n    };\n\n    elements = elementalUtils.combineProperties(\n      elements,\n      boostedProps,\n      ingredient.amount / (100 || 1)\n    );\n  }\n\n  return elementalUtils.normalizeProperties(elements);\n};\n\ninterface EnergyData {\n  zodiacEnergy?: string;\n  lunarEnergy?: string;\n  planetaryEnergy?: string | string[];\n  zodiac?: string;\n  lunar?: string;\n  planetary?: string | string[];\n}\n\nconst calculateEnergyMatch = (\n  recipeEnergy: EnergyData,\n  currentEnergy: EnergyData\n) => {\n  let score = 0;\n\n  // Check if we're in Aries season\n  const isAriesSeason = currentEnergy.zodiacEnergy === 'aries';\n\n  // Zodiac energy match with increased weight for Mars during Aries season\n  if (recipeEnergy.zodiac === currentEnergy.zodiacEnergy) {\n    // Base zodiac match score\n    score += 0.4;\n\n    // If we're in Aries season and the recipe has Mars influence, add bonus\n    if (\n      isAriesSeason &&\n      recipeEnergy.planetary &&\n      (Array.isArray(recipeEnergy.planetary) ? recipeEnergy.planetary.includes('Mars') : recipeEnergy.planetary === 'Mars')\n    ) {\n      score += 0.2; // Additional bonus for Mars-influenced recipes during Aries season\n    }\n  }\n\n  // Lunar energy match with increased weight\n  if (recipeEnergy.lunar === currentEnergy.lunarEnergy) {\n    score += 0.4; // Increased from 0.3\n  }\n\n  // Planetary energy match with specific planet bonuses\n  if (recipeEnergy.planetary === currentEnergy.planetaryEnergy) {\n    score += 0.35; // Increased base planetary match\n  }\n\n  // Special handling for specific planets\n  if (recipeEnergy.planetary && currentEnergy.planetaryEnergy) {\n    // Sun influence bonus\n    if (\n      (Array.isArray(recipeEnergy.planetary) ? recipeEnergy.planetary.includes('Sun') : recipeEnergy.planetary === 'Sun') &&\n      (Array.isArray(currentEnergy.planetaryEnergy) ? currentEnergy.planetaryEnergy.includes('Sun') : currentEnergy.planetaryEnergy === 'Sun')\n    ) {\n      score += 0.15;\n    }\n\n    // Moon influence bonus\n    if (\n      (Array.isArray(recipeEnergy.planetary) ? recipeEnergy.planetary.includes('Moon') : recipeEnergy.planetary === 'Moon') &&\n      (Array.isArray(currentEnergy.planetaryEnergy) ? currentEnergy.planetaryEnergy.includes('Moon') : currentEnergy.planetaryEnergy === 'Moon')\n    ) {\n      score += 0.15;\n    }\n\n    // Mars influence bonus\n    if (\n      (Array.isArray(recipeEnergy.planetary) ? recipeEnergy.planetary.includes('Mars') : recipeEnergy.planetary === 'Mars') &&\n      (Array.isArray(currentEnergy.planetaryEnergy) ? currentEnergy.planetaryEnergy.includes('Mars') : currentEnergy.planetaryEnergy === 'Mars')\n    ) {\n      // Higher bonus during Aries season\n      score += isAriesSeason ? 0.25 : 0.15;\n    }\n  }\n\n  return Math.min(1.0, score); // Cap at 1.0\n};\n\nconst calculateDominantElements = (\n  elements: ElementalProperties\n): [string, number][] => {\n  // Filter out any invalid entries to prevent NaN issues\n  return Object.entries(elements)\n    .filter(([, value]) => !isNaN(value) && value !== undefined)\n    .sort(([, a], [, b]) => (b || 0) - (a || 0))\n    .slice(0, 2)\n    .map(([element, value]) => [element, value || 0]);\n};\n\nasync function _calculateRecipeEnergyMatch(\n  recipe: Recipe,\n  currentEnergy: AstrologicalState\n): Promise<number> {\n  // Base score starts at 0.5 (neutral match)\n  let score = 0.5;\n\n  // Get dominant elements for the recipe\n  const recipeElements = await calculateBaseElements(recipe);\n  const recipeDominantElements = calculateDominantElements(recipeElements);\n\n  // Use dominant elements for enhanced scoring if available\n  if (recipeDominantElements.length > 0) {\n    const [primaryElement, primaryValue] = recipeDominantElements[0];\n    if (primaryValue > 0.4) {\n      // Boost score for recipes with strong dominant element\n      score += 0.1;\n    }\n  }\n\n  // 1. Calculate elemental score (35% of total) - now with double impact\n  const elementalScore = calculateElementalAlignment(recipe, currentEnergy);\n  score += elementalScore * 0.7; // Doubled from 0.35\n\n  // 2. Calculate modality score - use qualities array even if preferredModality doesn't exist\n  const qualities = recipe.qualities || [];\n  // Extract currentEnergy data with safe property access for preferredModality\n  const energyData = currentEnergy as Record<string, unknown>;\n  const preferredModality = energyData?.preferredModality;\n  \n  // Check if preferredModality exists in currentEnergy, if not skip this boost\n  if (preferredModality) {\n    const modalityScore = calculateModalityScore(\n      qualities as unknown as string[],\n      preferredModality\n    );\n    score += modalityScore * 0.5; // Doubled from 0.25\n  }\n\n  // 3. Calculate astrological score - check if astrologicalEnergy exists\n  if (recipe.astrologicalEnergy) {\n    const astrologicalScore = calculateEnergyMatch(\n      recipe.astrologicalEnergy,\n      currentEnergy as unknown\n    );\n    score += astrologicalScore * 0.4; // Doubled from 0.2\n  }\n\n  // 4. Calculate seasonal score - check if season exists\n  if ((recipe as Record<string, unknown>)?.season && (currentEnergy as Record<string, unknown>)?.season) {\n    const seasonalScore = (recipe as string)?.season.includes((currentEnergy as string)?.season)\n      ? 1.0\n      : 0.0;\n    score += seasonalScore * 0.2; // Doubled from 0.1\n  }\n\n  // 5. Calculate nutritional alignment\n  const nutritionalScore = calculateNutritionalAlignment(recipe, currentEnergy);\n  score += nutritionalScore * 0.2; // Doubled from 0.1\n\n  // Normalize the final score to ensure it stays in 0-1 range despite doubled factors\n  return Math.min(1, Math.max(0, score));\n}\n\nfunction calculateElementalAlignment(\n  recipe: Recipe,\n  currentEnergy: AstrologicalState\n): number {\n  // Get recipe elemental properties\n  const recipeElements = calculateBaseElements(recipe);\n\n  // Get current astrological elemental properties\n  const currentElements =\n    (currentEnergy as Record<string, unknown>)?.elementalProperties || getCurrentElementalState();\n\n  // Calculate weighted similarity between the two elemental profiles\n  let similarity = 0;\n  let totalWeight = 0;\n\n  // Identify dominant elements in current energy\n  const dominantElements = Object.entries(currentElements)\n    .filter(([, value]) => value !== undefined && !isNaN(value as number)) // Add filter to prevent NaN\n    .sort(([, a], [, b]) => ((b as number) || 0) - ((a as number) || 0)) // Add fallback to 0\n    .slice(0, 2)\n    .map(([element]) => element);\n\n  // Weight importance of elements based on dominance\n  Object.entries(currentElements).forEach(([element, value]) => {\n    // Skip invalid values\n    if (value === undefined || isNaN(value as number)) return;\n\n    const weight = dominantElements.includes(element) ? 1.5 : 1.0;\n    const recipeValue =\n      recipeElements[element as keyof ElementalProperties] || 0;\n    const currentValue = (value as number) || 0;\n    const diff = Math.abs(recipeValue - currentValue);\n\n    // Convert difference to similarity (0-1 scale), with exponential scaling for better differentiation\n    const elementSimilarity = Math.pow(1 - diff, 1.5);\n\n    similarity += elementSimilarity * weight;\n    totalWeight += weight;\n  });\n\n  // Normalize the similarity score - ensure we never divide by zero\n  return totalWeight > 0 ? similarity / (totalWeight || 1) : 0.5;\n}\n\n// New function to calculate nutritional alignment\nfunction calculateNutritionalAlignment(\n  recipe: Recipe,\n  currentEnergy: AstrologicalState\n): number {\n  // Extract currentEnergy data with safe property access for nutritionalNeeds\n  const energyData = currentEnergy as Record<string, unknown>;\n  const nutritionalNeeds = energyData?.nutritionalNeeds;\n  \n  // If there are no nutritional needs or recipe ingredients, return a neutral score\n  if (!recipe.ingredients || !nutritionalNeeds) {\n    return 0.5;\n  }\n\n  let score = 0.5; // Start with neutral score\n  let factorsCount = 0;\n\n  // Adjust based on predefined nutritional needs\n  if (\n    nutritionalNeeds &&\n    nutritionalNeeds.highProtein &&\n    hasHighProtein(recipe)\n  ) {\n    score += 0.2;\n    factorsCount++;\n  }\n\n  if (\n    nutritionalNeeds &&\n    nutritionalNeeds.lowCarb &&\n    hasLowCarb(recipe)\n  ) {\n    score += 0.2;\n    factorsCount++;\n  }\n\n  if (\n    nutritionalNeeds &&\n    nutritionalNeeds.highFiber &&\n    hasHighFiber(recipe)\n  ) {\n    score += 0.2;\n    factorsCount++;\n  }\n\n  if (\n    nutritionalNeeds &&\n    nutritionalNeeds.lowFat &&\n    hasLowFat(recipe)\n  ) {\n    score += 0.2;\n    factorsCount++;\n  }\n\n  // If no specific factors were found, return the base score\n  if (factorsCount === 0) {\n    return score;\n  }\n\n  // Calculate weighted average based on number of factors\n  return Math.min(1.0, score + 0.1 * factorsCount);\n}\n\n// Helper functions for nutritional evaluation\nfunction hasHighProtein(recipe: Recipe): boolean {\n  return recipe.ingredients.some((ingredient) => {\n    const nutritionData = ingredient.nutritionalProfile as Record<string, unknown>;\n    const macros = nutritionData?.macros;\n    const protein = macros?.protein || 0;\n    return protein > 15;\n  });\n}\n\nfunction hasLowCarb(recipe: Recipe): boolean {\n  const totalCarbs = recipe.ingredients.reduce((sum, ingredient) => {\n    const nutritionData = ingredient.nutritionalProfile as Record<string, unknown>;\n    const macros = nutritionData?.macros;\n    const carbs = macros?.carbs || 0;\n    return sum + carbs;\n  }, 0);\n  return totalCarbs < 30;\n}\n\nfunction hasHighFiber(recipe: Recipe): boolean {\n  return recipe.ingredients.some((ingredient) => {\n    const nutritionData = ingredient.nutritionalProfile as Record<string, unknown>;\n    const macros = nutritionData?.macros;\n    const fiber = macros?.fiber || 0;\n    return fiber > 5;\n  });\n}\n\nfunction hasLowFat(recipe: Recipe): boolean {\n  const totalFat = recipe.ingredients.reduce((sum, ingredient) => {\n    const nutritionData = ingredient.nutritionalProfile as Record<string, unknown>;\n    const macros = nutritionData?.macros;\n    const fat = macros?.fat || 0;\n    return sum + fat;\n  }, 0);\n  return totalFat < 15;\n}\n\n// Helper function to calculate modality score\nfunction calculateModalityScore(\n  qualities: string[],\n  preferredModality?: 'cardinal' | 'fixed' | 'mutable'\n): number {\n  if (!preferredModality || !qualities || qualities.length === 0) {\n    return 0.5; // Neutral score if no modality preference or recipe qualities\n  }\n\n  // Determine the recipe's modality based on its qualities\n  const recipeModality = determineIngredientModality(qualities);\n\n  if (!recipeModality) {\n    return 0.5; // Neutral score if can't determine recipe modality\n  }\n\n  if (recipeModality === preferredModality) {\n    return 1.0; // Full match\n  } else {\n    // Partial match - some modalities are more compatible than others\n    // Cardinal and fixed = 0.6, Cardinal and mutable = 0.7, Fixed and mutable = 0.5\n    if (\n      (recipeModality === 'cardinal' && preferredModality === 'fixed') ||\n      (recipeModality === 'fixed' && preferredModality === 'cardinal')\n    ) {\n      return 0.6;\n    } else if (\n      (recipeModality === 'cardinal' && preferredModality === 'mutable') ||\n      (recipeModality === 'mutable' && preferredModality === 'cardinal')\n    ) {\n      return 0.7;\n    } else if (\n      (recipeModality === 'fixed' && preferredModality === 'mutable') ||\n      (recipeModality === 'mutable' && preferredModality === 'fixed')\n    ) {\n      return 0.5;\n    }\n  }\n\n  return 0.5; // Default fallback\n}\n\n// External function to determine modality - might be in another file, placeholder here\nfunction determineIngredientModality(\n  qualities: string[]\n): 'cardinal' | 'fixed' | 'mutable' | null {\n  // Count occurrences of each modality in qualities\n  const counts = { cardinal: 0, fixed: 0, mutable: 0 };\n\n  // Keywords associated with each modality\n  const modalityKeywords = {\n    cardinal: [\n      'initiative',\n      'leadership',\n      'action',\n      'dynamic',\n      'pioneering',\n      'assertive',\n      'cardinal',\n    ],\n    fixed: [\n      'stability',\n      'persistence',\n      'endurance',\n      'steady',\n      'reliable',\n      'stubborn',\n      'fixed',\n    ],\n    mutable: [\n      'flexible',\n      'adaptable',\n      'versatile',\n      'changeable',\n      'communicative',\n      'mutable',\n    ],\n  };\n\n  // Check each quality for modality keywords\n  qualities.forEach((quality) => {\n    const lowerQuality = quality.toLowerCase();\n\n    // Check for cardinal keywords\n    if (\n      modalityKeywords.cardinal.some((keyword) =>\n        lowerQuality.includes(keyword)\n      )\n    ) {\n      counts.cardinal++;\n    }\n\n    // Check for fixed keywords\n    if (\n      modalityKeywords.fixed.some((keyword) => lowerQuality.includes(keyword))\n    ) {\n      counts.fixed++;\n    }\n\n    // Check for mutable keywords\n    if (\n      modalityKeywords.mutable.some((keyword) => lowerQuality.includes(keyword))\n    ) {\n      counts.mutable++;\n    }\n  });\n\n  // Find the dominant modality\n  const entries = Object.entries(counts) as [\n    'cardinal' | 'fixed' | 'mutable',\n    number\n  ][];\n\n  // Sort by count in descending order\n  const sorted = entries.sort((a, b) => b[1] - a[1]);\n\n  // Return the dominant modality if it has any count, otherwise null\n  return sorted[0][1] > 0 ? sorted[0][0] : null;\n}\n\n// Create an astrologyUtils object with the necessary functions\nexport const astrologyUtils = {\n  getPlanetaryElement(planet: string): string {\n    const planetElements: Record<string, string> = {\n      Sun: 'Fire',\n      Moon: 'Water',\n      Mercury: 'Air',\n      Venus: 'Earth',\n      Mars: 'Fire',\n      Jupiter: 'Air',\n      Saturn: 'Earth',\n      Uranus: 'Air',\n      Neptune: 'Water',\n      Pluto: 'Water',\n    };\n    return planetElements[planet] || 'Neutral';\n  },\n\n  getZodiacElement(sign: string): string {\n    const zodiacElements: Record<string, string> = {\n      Aries: 'Fire',\n      Leo: 'Fire',\n      Sagittarius: 'Fire',\n      Taurus: 'Earth',\n      Virgo: 'Earth',\n      Capricorn: 'Earth',\n      Gemini: 'Air',\n      Libra: 'Air',\n      Aquarius: 'Air',\n      Cancer: 'Water',\n      Scorpio: 'Water',\n      Pisces: 'Water',\n    };\n    return zodiacElements[sign] || 'Neutral';\n  },\n};\n\n/**\n * Generate a unique cache key based on function inputs\n */\nfunction getCacheKey(\n  recipes: Recipe[] | undefined,\n  filters: MatchFilters,\n  energy: ElementalProperties | null,\n  limit: number\n): string {\n  // Create a simplified representation of recipes (just ids to avoid huge keys)\n  const recipeIds =\n    recipes?.map((r) => r.id || `${(r as Recipe[])?.name}-${r.cuisine}`).join(',') || 'none';\n\n  // Stringify the filters and energy objects\n  const filtersStr = JSON.stringify(filters);\n  const energyStr = energy ? JSON.stringify(energy) : 'null';\n\n  // Combine all into a single key\n  return `${recipeIds}|${filtersStr}|${energyStr}|${limit}`;\n}\n\n/**\n * Clear the match cache or remove expired entries\n */\nexport function clearMatchCache(all = false): void {\n  if (all) {\n    matchCache.clear();\n    return;\n  }\n\n  // Remove only expired entries\n  const now = Date.now();\n  for (const [key, entry] of matchCache.entries()) {\n    if (now - entry.timestamp > CACHE_TTL) {\n      matchCache.delete(key);\n    }\n  }\n}\n\n/**\n * Calculate a more accurate string similarity score using Levenshtein distance\n * and additional heuristics for food ingredient matching\n */\nfunction getStringSimilarity(str1: string, str2: string): number {\n  if (!str1 || !str2) return 0;\n\n  // Normalize strings\n  const s1 = str1.toLowerCase().trim();\n  const s2 = str2.toLowerCase().trim();\n\n  // Exact match\n  if (s1 === s2) return 1;\n\n  // Check if one is contained in the other\n  if (s1.includes(s2) || s2.includes(s1)) {\n    const longerStr = s1.length > s2.length ? s1 : s2;\n    const shorterStr = s1.length > s2.length ? s2 : s1;\n    // The shorter the gap between lengths, the higher the score\n    const longerLength = longerStr.length || 1;\n    return 0.8 + (shorterStr.length / longerLength) * 0.2;\n  }\n\n  // Calculate Levenshtein distance\n  const len1 = s1.length;\n  const len2 = s2.length;\n  const maxLen = Math.max(len1, len2);\n\n  // Use simplified Levenshtein if strings are very long\n  if (maxLen > 20) {\n    return simplifiedLevenshtein(s1, s2);\n  }\n\n  // Use full Levenshtein for better accuracy with shorter strings\n  const distance = levenshteinDistance(s1, s2);\n  let similarity = 1 - distance / (maxLen || 1);\n\n  // Boost score if words share the same first few characters\n  // (common in food ingredients where prefixes matter)\n  const prefixLength = Math.min(4, Math.min(s1.length, s2.length));\n  if (s1.substring(0, prefixLength) === s2.substring(0, prefixLength)) {\n    similarity += 0.1; // Boost for matching prefix\n  }\n\n  // Cap at 1.0\n  return Math.min(similarity, 1.0);\n}\n\n/**\n * Simplified Levenshtein implementation for longer strings\n */\nfunction simplifiedLevenshtein(str1: string, str2: string): number {\n  const maxLen = Math.max(str1.length, str2.length);\n  let distance = 0;\n\n  for (let i = 0; i < maxLen; i++) {\n    if (!str1[i] || !str2[i] || str1[i] !== str2[i]) {\n      distance++;\n    }\n  }\n\n  return 1 - distance / (maxLen || 1);\n}\n\n/**\n * Full Levenshtein distance calculation for accurate similarity\n */\nfunction levenshteinDistance(str1: string, str2: string): number {\n  const m = str1.length;\n  const n = str2.length;\n\n  // Create matrix\n  const matrix = Array(m + 1)\n    .fill(null)\n    .map(() => Array(n + 1).fill(null));\n\n  // Fill first row and column\n  for (let i = 0; i <= m; i++) matrix[i][0] = i;\n  for (let j = 0; j <= n; j++) matrix[0][j] = j;\n\n  // Fill the matrix\n  for (let i = 1; i <= m; i++) {\n    for (let j = 1; j <= n; j++) {\n      if (str1[i - 1] === str2[j - 1]) {\n        matrix[i][j] = matrix[i - 1][j - 1];\n      } else {\n        matrix[i][j] = Math.min(\n          matrix[i - 1][j] + 1, // deletion\n          matrix[i][j - 1] + 1, // insertion\n          matrix[i - 1][j - 1] + 1 // substitution\n        );\n      }\n    }\n  }\n\n  return matrix[m][n];\n}\n\n/**\n * Connects recipe ingredients to their mappings in the ingredient data files\n * Provides a confidence score for each match with improved matching algorithm\n */\nexport const connectIngredientsToMappings = (\n  recipe: Recipe\n): {\n  name: string;\n  matchedTo?: IngredientMapping;\n  confidence: number;\n}[] => {\n  if (!recipe.ingredients || recipe.ingredients.length === 0) {\n    return [];\n  }\n\n  // SSR check - only use localStorage in browser environment\n  const isBrowser = typeof window !== 'undefined';\n\n  // Create a cache key for this recipe's ingredients\n  const cacheKey = `ingredient-mapping-${recipe.id || (recipe as Record<string, unknown>)?.name}`;\n  let cached: string | null = null;\n\n  // Try to get from localStorage, with proper error handling\n  if (isBrowser) {\n    try {\n      cached = window.localStorage.getItem(cacheKey);\n    } catch (e) {\n      // console.debug('localStorage not available:', e);\n    }\n  }\n\n  // Check for cached results\n  if (cached) {\n    try {\n      const parsedCache = JSON.parse(cached);\n      // Verify the cache is still valid (ingredients haven't changed)\n      if (\n        parsedCache.timestamp &&\n        Date.now() - parsedCache.timestamp < 3600000 && // 1 hour cache\n        parsedCache.ingredientCount === recipe.ingredients.length\n      ) {\n        return parsedCache.matches;\n      }\n    } catch (e) {\n      // console.error('Error parsing ingredient mapping cache:', e);\n    }\n  }\n\n  const matches = recipe.ingredients.map((recipeIngredient) => {\n    // Initial result with no match\n    const result = {\n      name: (recipeIngredient as Record<string, unknown>)?.name,\n      matchedTo: undefined,\n      confidence: 0,\n    };\n\n    // 1. Try exact match first\n    const exactMatch = ingredientsMap[(recipeIngredient as string)?.name.toLowerCase()];\n    if (exactMatch) {\n      result.matchedTo = exactMatch as IngredientMapping;\n      result.confidence = 1.0;\n      return result;\n    }\n\n    // 2. Try matching by name parts (for compound ingredients)\n    const nameParts = (recipeIngredient as string)?.name.toLowerCase().split(/\\s+/);\n    for (const part of nameParts) {\n      if (part.length < 3) continue; // Skip short parts like \"of\", \"and\", etc.\n\n      const partMatch = ingredientsMap[part];\n      if (partMatch) {\n        result.matchedTo = partMatch as IngredientMapping;\n        result.confidence = 0.8;\n        return result;\n      }\n    }\n\n    // 3. Try fuzzy matching against all ingredient names\n    // Only do this for ingredients that didn't match exactly\n    let bestMatch = {\n      ingredient: null as IngredientMapping | null,\n      similarity: 0.4,\n    };\n\n    for (const [key, ingredient] of Object.entries(ingredientsMap)) {\n      // Skip very short keys to avoid false positives\n      if (key.length < 3) continue;\n\n      // Check if the ingredient matches the category\n      const categoryMatch =\n        recipeIngredient.category &&\n        ingredient.category === recipeIngredient.category\n          ? 0.2\n          : 0;\n\n      // Calculate string similarity\n      const similarity =\n        getStringSimilarity((recipeIngredient as Record<string, unknown>)?.name, key) + categoryMatch;\n\n      if (similarity > bestMatch.similarity) {\n        bestMatch = {\n          similarity,\n          ingredient: ingredient as unknown as IngredientMapping,\n        };\n      }\n    }\n\n    if (bestMatch.ingredient && bestMatch.similarity > 0.4) {\n      result.matchedTo = bestMatch.ingredient;\n      result.confidence = bestMatch.similarity;\n      return result;\n    }\n\n    // 4. Try matching with swaps if provided\n    const ingredientData = recipeIngredient as Record<string, unknown>;\n    const swaps = ingredientData?.swaps;\n    if (swaps && Array.isArray(swaps) && swaps.length > 0) {\n      for (const swap of swaps) {\n        const swapMatch = ingredientsMap[swap.toLowerCase()];\n        if (swapMatch) {\n          result.matchedTo = swapMatch as IngredientMapping;\n          result.confidence = 0.7;\n          return result;\n        }\n      }\n    }\n\n    return result;\n  });\n\n  // Cache the results\n  if (isBrowser) {\n    try {\n      window.localStorage.setItem(\n        cacheKey,\n        JSON.stringify({\n          matches,\n          timestamp: Date.now(),\n          ingredientCount: recipe.ingredients.length,\n        })\n      );\n    } catch (e) {\n      // console.error('Error caching ingredient mappings:', e);\n    }\n  }\n\n  return matches;\n};\n\n/**\n * Calculate how well a recipe's nutritional profile matches the user's goals\n */\nfunction calculateNutritionalMatch(\n  recipeProfile: Record<string, number | string>,\n  userGoals: Record<string, number | string>\n): number {\n  if (!recipeProfile || !userGoals) return 0.5; // Neutral score if either is missing\n\n  let matchScore = 0;\n  let factorsCount = 0;\n\n  // Common nutritional factors to compare\n  const factors = [\n    'protein',\n    'carbs',\n    'fat',\n    'fiber',\n    'calories',\n    'vitamins',\n    'minerals',\n    'antioxidants',\n  ];\n\n  // Calculate match for each factor that exists in both profiles\n  factors.forEach((factor) => {\n    if (\n      recipeProfile[factor] !== undefined &&\n      userGoals[factor] !== undefined\n    ) {\n      // For 'low' goals (e.g., 'low carbs'), a lower value is better\n      if (userGoals[factor] === 'low') {\n        // Scale from 0-1 where 0 is high and 1 is low\n        const recipeValue =\n          typeof recipeProfile[factor] === 'number'\n            ? (recipeProfile[factor] as number)\n            : parseFloat(recipeProfile[factor] as string) || 5;\n\n        const normalizedValue = 1 - Math.min(recipeValue / (5 || 1), 1);\n        matchScore += normalizedValue;\n      }\n      // For 'high' goals (e.g., 'high protein'), a higher value is better\n      else if (userGoals[factor] === 'high') {\n        // Scale from 0-1 where 1 is high and 0 is low\n        const recipeValue =\n          typeof recipeProfile[factor] === 'number'\n            ? (recipeProfile[factor] as number)\n            : parseFloat(recipeProfile[factor] as string) || 0;\n\n        const normalizedValue = Math.min(recipeValue / (5 || 1), 1);\n        matchScore += normalizedValue;\n      }\n      // For exact targets (e.g., specific calorie count)\n      else if (\n        typeof userGoals[factor] === 'number' ||\n        !isNaN(Number(userGoals[factor]))\n      ) {\n        const goalValue =\n          typeof userGoals[factor] === 'number'\n            ? (userGoals[factor] as number)\n            : parseFloat(userGoals[factor] as string);\n\n        const recipeValue =\n          typeof recipeProfile[factor] === 'number'\n            ? (recipeProfile[factor] as number)\n            : parseFloat(recipeProfile[factor] as string);\n\n        if (!isNaN(goalValue) && !isNaN(recipeValue)) {\n          // Calculate how close the recipe is to the target (1 = exact match)\n          const proximity =\n            1 -\n            Math.min(\n              Math.abs(recipeValue - goalValue) / (Math.max(goalValue || 1), 1),\n              1\n            );\n          matchScore += proximity;\n        }\n      }\n\n      factorsCount++;\n    }\n  });\n\n  // Calculate average match across all factors\n  return factorsCount > 0 ? matchScore / (factorsCount || 1) : 0.5;\n}\n\n/**\n * Calculate how well a recipe aligns with the user's astrological sign\n */\ninterface AstrologicalInfluence {\n  zodiacCompatibility?: Record<string, number>;\n  planetaryAlignment?: Record<string, number>;\n  lunarInfluence?: Record<string, number>;\n}\n\nfunction calculateAstrologicalMatch(\n  recipeInfluence: AstrologicalInfluence,\n  userSign: string\n): number {\n  if (!recipeInfluence || !userSign) return 0.5; // Default to neutral if no data\n\n  // Define astrological compatibility between signs and elements\n  const signElementMap: Record<string, string> = {\n    aries: 'Fire',\n    taurus: 'Earth',\n    gemini: 'Air',\n    cancer: 'Water',\n    leo: 'Fire',\n    virgo: 'Earth',\n    libra: 'Air',\n    scorpio: 'Water',\n    sagittarius: 'Fire',\n    capricorn: 'Earth',\n    aquarius: 'Air',\n    pisces: 'Water',\n  };\n\n  // Define elemental compatibility relationships\n  // This is more nuanced - some elements enhance each other\n  const elementCompatibility: Record<string, Record<string, number>> = {\n    fire: { fire: 0.8, air: 0.9, earth: 0.5, water: 0.3 },\n    earth: { earth: 0.8, water: 0.9, fire: 0.5, air: 0.3 },\n    air: { air: 0.8, fire: 0.9, water: 0.5, earth: 0.3 },\n    water: { water: 0.8, earth: 0.9, air: 0.5, fire: 0.3 },\n  };\n\n  // Define sign compatibility based on traditional astrology\n  const signCompatibility: Record<string, Record<string, number>> = {\n    // Fire signs\n    aries: {\n      aries: 0.8,\n      leo: 0.9,\n      sagittarius: 0.9, // Fire signs (good)\n      gemini: 0.8,\n      libra: 0.7,\n      aquarius: 0.8, // Air signs (good)\n      taurus: 0.4,\n      virgo: 0.5,\n      capricorn: 0.5, // Earth signs (challenging)\n      cancer: 0.5,\n      scorpio: 0.6,\n      pisces: 0.4, // Water signs (challenging)\n    },\n    leo: {\n      aries: 0.9,\n      leo: 0.8,\n      sagittarius: 0.9,\n      gemini: 0.8,\n      libra: 0.9,\n      aquarius: 0.7,\n      taurus: 0.6,\n      virgo: 0.5,\n      capricorn: 0.4,\n      cancer: 0.5,\n      scorpio: 0.5,\n      pisces: 0.4,\n    },\n    sagittarius: {\n      aries: 0.9,\n      leo: 0.9,\n      sagittarius: 0.8,\n      gemini: 0.8,\n      libra: 0.8,\n      aquarius: 0.9,\n      taurus: 0.4,\n      virgo: 0.5,\n      capricorn: 0.6,\n      cancer: 0.4,\n      scorpio: 0.5,\n      pisces: 0.6,\n    },\n    // Earth signs\n    taurus: {\n      taurus: 0.8,\n      virgo: 0.9,\n      capricorn: 0.9,\n      cancer: 0.8,\n      scorpio: 0.9,\n      pisces: 0.7,\n      aries: 0.4,\n      leo: 0.6,\n      sagittarius: 0.4,\n      gemini: 0.4,\n      libra: 0.6,\n      aquarius: 0.3,\n    },\n    virgo: {\n      taurus: 0.9,\n      virgo: 0.8,\n      capricorn: 0.9,\n      cancer: 0.7,\n      scorpio: 0.8,\n      pisces: 0.6,\n      aries: 0.5,\n      leo: 0.5,\n      sagittarius: 0.5,\n      gemini: 0.6,\n      libra: 0.5,\n      aquarius: 0.5,\n    },\n    capricorn: {\n      taurus: 0.9,\n      virgo: 0.9,\n      capricorn: 0.8,\n      cancer: 0.7,\n      scorpio: 0.8,\n      pisces: 0.7,\n      aries: 0.5,\n      leo: 0.4,\n      sagittarius: 0.6,\n      gemini: 0.4,\n      libra: 0.5,\n      aquarius: 0.6,\n    },\n    // Air signs\n    gemini: {\n      gemini: 0.8,\n      libra: 0.9,\n      aquarius: 0.9,\n      aries: 0.8,\n      leo: 0.8,\n      sagittarius: 0.8,\n      cancer: 0.4,\n      scorpio: 0.3,\n      pisces: 0.5,\n      taurus: 0.4,\n      virgo: 0.6,\n      capricorn: 0.4,\n    },\n    libra: {\n      gemini: 0.9,\n      libra: 0.8,\n      aquarius: 0.9,\n      aries: 0.7,\n      leo: 0.9,\n      sagittarius: 0.8,\n      cancer: 0.5,\n      scorpio: 0.6,\n      pisces: 0.5,\n      taurus: 0.6,\n      virgo: 0.5,\n      capricorn: 0.5,\n    },\n    aquarius: {\n      gemini: 0.9,\n      libra: 0.9,\n      aquarius: 0.8,\n      aries: 0.8,\n      leo: 0.7,\n      sagittarius: 0.9,\n      cancer: 0.4,\n      scorpio: 0.4,\n      pisces: 0.5,\n      taurus: 0.3,\n      virgo: 0.5,\n      capricorn: 0.6,\n    },\n    // Water signs\n    cancer: {\n      cancer: 0.8,\n      scorpio: 0.9,\n      pisces: 0.9,\n      taurus: 0.8,\n      virgo: 0.7,\n      capricorn: 0.7,\n      aries: 0.5,\n      leo: 0.5,\n      sagittarius: 0.4,\n      gemini: 0.4,\n      libra: 0.5,\n      aquarius: 0.4,\n    },\n    scorpio: {\n      cancer: 0.9,\n      scorpio: 0.8,\n      pisces: 0.9,\n      taurus: 0.9,\n      virgo: 0.8,\n      capricorn: 0.8,\n      aries: 0.6,\n      leo: 0.5,\n      sagittarius: 0.5,\n      gemini: 0.3,\n      libra: 0.6,\n      aquarius: 0.4,\n    },\n    pisces: {\n      cancer: 0.9,\n      scorpio: 0.9,\n      pisces: 0.8,\n      taurus: 0.7,\n      virgo: 0.6,\n      capricorn: 0.7,\n      aries: 0.4,\n      leo: 0.4,\n      sagittarius: 0.6,\n      gemini: 0.5,\n      libra: 0.5,\n      aquarius: 0.5,\n    },\n  };\n\n  const userSignLower = userSign.toLowerCase();\n  const userElement = signElementMap[userSignLower];\n\n  if (!userElement) return 0.5; // Default to neutral if sign not recognized\n\n  // Extract recipeInfluence data with safe property access\n  const influenceData = recipeInfluence as ElementalProperties;\n  const sign = influenceData?.sign;\n  const elements = influenceData?.elements;\n  \n  // If recipe has a specific sign it aligns with\n  if (sign) {\n    const recipeSignLower = sign.toLowerCase();\n\n    // Direct sign match is very favorable\n    if (recipeSignLower === userSignLower) {\n      return 1.0;\n    }\n\n    // Check for sign compatibility\n    if (signCompatibility[userSignLower]?.[recipeSignLower]) {\n      return signCompatibility[userSignLower][recipeSignLower];\n    }\n\n    // If no direct sign compatibility, check element compatibility\n    const recipeElement = signElementMap[recipeSignLower];\n    if (recipeElement && userElement) {\n      return elementCompatibility[userElement][recipeElement] || 0.5;\n    }\n  }\n\n  // If recipe has elemental influences directly\n  if (elements) {\n    // Check if recipe has the user's element\n    if (typeof elements === 'string') {\n      const singleElement = elements.toLowerCase();\n      return elementCompatibility[userElement][singleElement] || 0.5;\n    }\n\n    // If recipe has multiple elements, average their compatibility\n    if (Array.isArray(elements)) {\n      let totalCompatibility = 0;\n      elements.forEach((element: string) => {\n        const elemLower = element.toLowerCase();\n        totalCompatibility +=\n          elementCompatibility[userElement][elemLower] || 0.5;\n      });\n      return elements.length > 0\n        ? totalCompatibility / elements.length\n        : 0.5;\n    }\n  }\n\n  // Consider lunar influences if available\n  if (recipeInfluence.lunarInfluence) {\n    // Map lunar influences to elements\n    const lunarElement = astrologyUtils.getPlanetaryElement(\n      'Moon'\n    );\n    if (lunarElement) {\n      return (\n        elementCompatibility[userElement][lunarElement.toLowerCase()] || 0.5\n      );\n    }\n  }\n\n  return 0.5; // Default to neutral compatibility\n}\n\n/**\n * Calculate how well a recipe's complexity matches user's preferences\n */\nfunction calculateComplexityMatch(\n  recipeComplexity: number | string | undefined,\n  userPreference: number | string | undefined\n): number {\n  if (recipeComplexity === undefined || userPreference === undefined) {\n    return 0.5; // Neutral score if either value is missing\n  }\n\n  // Convert string complexity to number if needed\n  let normalizedRecipeComplexity: number;\n  if (typeof recipeComplexity === 'string') {\n    // Map descriptive terms to values\n    switch (recipeComplexity.toLowerCase()) {\n      case 'very simple':\n      case 'beginner':\n        normalizedRecipeComplexity = 1;\n        break;\n      case 'simple':\n      case 'easy':\n        normalizedRecipeComplexity = 2;\n        break;\n      case 'moderate':\n      case 'intermediate':\n        normalizedRecipeComplexity = 3;\n        break;\n      case 'complex':\n      case 'advanced':\n        normalizedRecipeComplexity = 4;\n        break;\n      case 'very complex':\n      case 'expert':\n        normalizedRecipeComplexity = 5;\n        break;\n      default:\n        normalizedRecipeComplexity = 3; // Default to moderate if unknown term\n    }\n  } else {\n    normalizedRecipeComplexity = recipeComplexity as number;\n  }\n\n  // Normalize recipe complexity to 0-1 scale\n  // Assuming recipe complexity is on a 1-5 scale\n  const normalizedComplexity = Math.max(\n    0,\n    Math.min(1, (normalizedRecipeComplexity - 1) / 4)\n  );\n\n  // Normalize user preference to 0-1 scale\n  let normalizedPreference: number;\n\n  if (typeof userPreference === 'number') {\n    normalizedPreference = Math.max(0, Math.min(1, (userPreference - 1) / 4));\n  } else if (typeof userPreference === 'string') {\n    // Map descriptive terms to values\n    switch (userPreference.toLowerCase()) {\n      case 'very simple':\n      case 'beginner':\n        normalizedPreference = 0;\n        break;\n      case 'simple':\n      case 'easy':\n        normalizedPreference = 0.25;\n        break;\n      case 'moderate':\n      case 'intermediate':\n        normalizedPreference = 0.5;\n        break;\n      case 'complex':\n      case 'advanced':\n        normalizedPreference = 0.75;\n        break;\n      case 'very complex':\n      case 'expert':\n        normalizedPreference = 1;\n        break;\n      default:\n        normalizedPreference = 0.5; // Default to moderate if unknown term\n    }\n  } else {\n    return 0.5; // Default to neutral if preference format is unknown\n  }\n\n  // Calculate proximity (1 = exact match, 0 = farthest possible)\n  const proximityScore =\n    1 - Math.abs(normalizedComplexity - normalizedPreference);\n\n  // For slight preference to simpler recipes when other factors equal\n  // (can be adjusted or removed based on app philosophy)\n  const simplicityBonus = (1 - normalizedComplexity) * 0.05;\n\n  return Math.min(proximityScore + simplicityBonus, 1);\n}\n"],"version":3}