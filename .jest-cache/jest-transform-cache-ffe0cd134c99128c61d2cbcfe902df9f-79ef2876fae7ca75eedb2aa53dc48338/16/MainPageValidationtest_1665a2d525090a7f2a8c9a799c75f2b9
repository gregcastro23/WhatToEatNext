de9685e81a7ed893be89a7652992bc9d
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const globals_1 = require("@jest/globals");
// Mock external dependencies with proper type safety
globals_1.jest.mock('next/navigation', () => ({
    useRouter: () => externalDependencies_1.mockRouter
}));
globals_1.jest.mock('../../utils/logger', () => ({
    logger: externalDependencies_1.mockLogger,
    createLogger: externalDependencies_1.mockCreateLogger
}));
globals_1.jest.mock('../../utils/reliableAstronomy', () => externalDependencies_1.mockReliableAstronomy);
// Mock hooks that might cause issues
globals_1.jest.mock('../../hooks/useAgentHooks', () => externalDependencies_1.mockAgentHooks);
globals_1.jest.mock('../../utils/mcpServerIntegration', () => externalDependencies_1.mockMCPServerIntegration);
globals_1.jest.mock('../../utils/developmentExperienceOptimizations', () => externalDependencies_1.mockDevelopmentExperienceOptimizations);
// Mock state preservation hooks
globals_1.jest.mock('../../hooks/useStatePreservation', () => externalDependencies_1.mockStatePreservationHooks);
// Mock error handling
globals_1.jest.mock('../../utils/errorHandling', () => externalDependencies_1.mockErrorHandler);
// Mock steering file intelligence
globals_1.jest.mock('../../utils/steeringFileIntelligence', () => externalDependencies_1.mockSteeringFileIntelligence);
// Mock alchemical context hooks
globals_1.jest.mock('../../contexts/AlchemicalContext/hooks', () => externalDependencies_1.mockAlchemicalContext);
// Mock component fallbacks
globals_1.jest.mock('../../components/fallbacks/ComponentFallbacks', () => ({
    ComponentFallbacks: {
        LoadingFallback: () => (0, jsx_runtime_1.jsx)("div", { "data-testid": "loading-fallback", children: "Loading..." }),
        ErrorFallback: () => (0, jsx_runtime_1.jsx)("div", { "data-testid": "error-fallback", children: "Error occurred" })
    }
}));
/**
 * Comprehensive Main Page Validation Tests
 * Task 11.2: Validate all requirements and perform final testing
 */
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const App_1 = __importDefault(require("../../../App"));
const testComponentHelpers_1 = require("../utils/testComponentHelpers");
// Import comprehensive mocks
const externalDependencies_1 = require("../mocks/externalDependencies");
describe('Main Page Validation - Task 11.2', () => {
    beforeEach(() => {
        // Clear all mocks before each test
        globals_1.jest.clearAllMocks();
        // Mock window.scrollTo
        Object.defineProperty(window, 'scrollTo', {
            value: globals_1.jest.fn(),
            writable: true
        });
        // Mock localStorage
        const localStorageMock = {
            getItem: globals_1.jest.fn(),
            setItem: globals_1.jest.fn(),
            removeItem: globals_1.jest.fn(),
            clear: globals_1.jest.fn()
        };
        Object.defineProperty(window, 'localStorage', {
            value: localStorageMock
        });
    });
    describe('1. Component Interactions and Data Flow', () => {
        test('App renders without crashing', async () => {
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(App_1.default, {}));
            });
            // Should render without throwing errors
            expect(react_2.screen.getByText(/Loading Astrological Data/i)).toBeInTheDocument();
        });
        test('MainPageLayout renders with AlchemicalProvider', async () => {
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockAlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockMainPageLayout, { debugMode: false, loading: false }) }));
            });
            // Should render the main layout
            expect(react_2.screen.getByTestId('mock-alchemical-provider')).toBeInTheDocument();
            expect(react_2.screen.getByTestId('mock-main-page-layout')).toBeInTheDocument();
        });
        test('Error boundary handles errors gracefully', async () => {
            const ThrowError = () => {
                throw new Error('Test error');
            };
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(testComponentHelpers_1.TestErrorBoundary, { children: (0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockAlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockMainPageLayout, { debugMode: false, loading: false, children: (0, jsx_runtime_1.jsx)(ThrowError, {}) }) }) }));
            });
            // Should handle error without crashing
            expect(react_2.screen.getByTestId('test-error-boundary')).toBeInTheDocument();
        });
    });
    describe('2. Navigation Functionality', () => {
        test('Navigation state is preserved', async () => {
            const mockOnSectionNavigate = globals_1.jest.fn();
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockAlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockMainPageLayout, { debugMode: false, loading: false, onSectionNavigate: mockOnSectionNavigate }) }));
            });
            // Navigation should be functional
            expect(react_2.screen.getByTestId('mock-main-page-layout')).toBeInTheDocument();
            expect(mockOnSectionNavigate).toBeDefined();
        });
        test('Scroll position is preserved', async () => {
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockAlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockMainPageLayout, { debugMode: false, loading: false }) }));
            });
            // Simulate scroll
            react_2.fireEvent.scroll(window, { target: { scrollY: 100 } });
            // Should handle scroll events
            expect(window.scrollTo).toBeDefined();
        });
    });
    describe('3. Debug Panel Functionality', () => {
        test('Debug panel renders in development mode', async () => {
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockAlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockMainPageLayout, { debugMode: true, loading: false }) }));
            });
            // Should render without errors in debug mode
            expect(react_2.screen.getByTestId('debug-mode')).toHaveTextContent('debug');
        });
        test('Debug panel is hidden in production mode', async () => {
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockAlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockMainPageLayout, { debugMode: false, loading: false }) }));
            });
            // Should render without errors in production mode
            expect(react_2.screen.getByTestId('debug-mode')).toHaveTextContent('production');
        });
    });
    describe('4. Loading States', () => {
        test('Loading state displays correctly', async () => {
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockAlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockMainPageLayout, { debugMode: false, loading: true }) }));
            });
            // Should handle loading state
            expect(react_2.screen.getByTestId('loading-state')).toHaveTextContent('loading');
        });
        test('Connected state displays when not loading', async () => {
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockAlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockMainPageLayout, { debugMode: false, loading: false }) }));
            });
            // Should handle connected state
            expect(react_2.screen.getByTestId('loading-state')).toHaveTextContent('loaded');
        });
    });
    describe('5. Context and State Management', () => {
        test('AlchemicalProvider provides context', async () => {
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockAlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockMainPageLayout, { debugMode: false, loading: false }) }));
            });
            // Context should be provided
            expect(react_2.screen.getByTestId('mock-alchemical-provider')).toBeInTheDocument();
        });
        test('State preservation works correctly', async () => {
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockAlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockMainPageLayout, { debugMode: false, loading: false }) }));
            });
            // State preservation should work
            expect(localStorage.setItem).toBeDefined();
        });
    });
    describe('6. Error Handling', () => {
        test('Global error boundary catches errors', async () => {
            // Mock console.error to prevent test output noise
            const consoleSpy = globals_1.jest.spyOn(console, 'error').mockImplementation(() => { });
            // Test that the App component renders without crashing
            // The App component has its own error boundary
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(App_1.default, {}));
            });
            // Should handle errors gracefully
            expect(react_2.screen.getByText(/Loading Astrological Data/i)).toBeInTheDocument();
            consoleSpy.mockRestore();
        });
        test('Component-level error boundaries work', async () => {
            const consoleSpy = globals_1.jest.spyOn(console, 'error').mockImplementation(() => { });
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockAlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockMainPageLayout, { debugMode: false, loading: false }) }));
            });
            // Should render without errors
            expect(react_2.screen.getByTestId('mock-main-page-layout')).toBeInTheDocument();
            consoleSpy.mockRestore();
        });
    });
    describe('7. Performance and Accessibility', () => {
        test('Components are memoized for performance', async () => {
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockAlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockMainPageLayout, { debugMode: false, loading: false }) }));
            });
            // Should render efficiently
            expect(react_2.screen.getByTestId('mock-main-page-layout')).toBeInTheDocument();
        });
        test('Lazy loading works for non-critical components', async () => {
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(testComponentHelpers_1.AsyncTestWrapper, { children: (0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockAlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockMainPageLayout, { debugMode: true, loading: false }) }) }));
            });
            // Should handle lazy loading
            expect(react_2.screen.getByTestId('mock-main-page-layout')).toBeInTheDocument();
        });
    });
    describe('8. Integration with External Systems', () => {
        test('Astrological calculations integrate correctly', async () => {
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockAlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockMainPageLayout, { debugMode: false, loading: false }) }));
            });
            // Should integrate with astrological systems
            expect(react_2.screen.getByTestId('mock-alchemical-provider')).toBeInTheDocument();
            expect(externalDependencies_1.mockReliableAstronomy.getReliablePlanetaryPositions).toBeDefined();
        });
        test('Agent hooks integrate correctly', async () => {
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockAlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockMainPageLayout, { debugMode: false, loading: false }) }));
            });
            // Should integrate with agent hooks
            expect(react_2.screen.getByTestId('mock-main-page-layout')).toBeInTheDocument();
            expect(externalDependencies_1.mockAgentHooks.useAgentHooks).toBeDefined();
        });
    });
    describe('9. Mobile Responsiveness', () => {
        test('Layout adapts to mobile viewport', async () => {
            // Mock mobile viewport
            Object.defineProperty(window, 'innerWidth', {
                writable: true,
                configurable: true,
                value: 375,
            });
            Object.defineProperty(window, 'innerHeight', {
                writable: true,
                configurable: true,
                value: 667,
            });
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockAlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockMainPageLayout, { debugMode: false, loading: false }) }));
            });
            // Should handle mobile viewport
            expect(react_2.screen.getByTestId('mock-main-page-layout')).toBeInTheDocument();
        });
        test('Touch interactions work correctly', async () => {
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockAlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockMainPageLayout, { debugMode: false, loading: false }) }));
            });
            // Should handle touch interactions
            expect(react_2.screen.getByTestId('mock-main-page-layout')).toBeInTheDocument();
        });
    });
    describe('10. System Integration Validation', () => {
        test('All required systems are integrated', async () => {
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(App_1.default, {}));
            });
            // Should integrate all systems
            expect(react_2.screen.getByText(/Loading Astrological Data/i)).toBeInTheDocument();
        });
        test('Fallback mechanisms work correctly', async () => {
            // Mock API failure
            externalDependencies_1.mockReliableAstronomy.getReliablePlanetaryPositions
                .mockRejectedValueOnce(new Error('API Error'));
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockAlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(testComponentHelpers_1.MockMainPageLayout, { debugMode: false, loading: false }) }));
            });
            // Should handle API failures gracefully
            expect(react_2.screen.getByTestId('mock-main-page-layout')).toBeInTheDocument();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,