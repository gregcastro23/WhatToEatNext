da78dfd3e6db2b629531386c090aceac
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createErrorBoundaryForType = exports.useErrorHandler = exports.handleSyncError = exports.handleAsyncError = exports.globalErrorHandler = exports.ErrorHandler = exports.classifyError = exports.createEnhancedError = exports.ErrorSeverity = exports.ErrorType = void 0;
const react_1 = __importDefault(require("react"));
const ErrorBoundary_1 = __importDefault(require("@/components/error-boundaries/ErrorBoundary"));
const logger_1 = require("@/utils/logger");
// Error types for better categorization
var ErrorType;
(function (ErrorType) {
    ErrorType["NETWORK"] = "NETWORK";
    ErrorType["VALIDATION"] = "VALIDATION";
    ErrorType["AUTHENTICATION"] = "AUTHENTICATION";
    ErrorType["AUTHORIZATION"] = "AUTHORIZATION";
    ErrorType["NOT_FOUND"] = "NOT_FOUND";
    ErrorType["SERVER_ERROR"] = "SERVER_ERROR";
    ErrorType["CLIENT_ERROR"] = "CLIENT_ERROR";
    ErrorType["ASTROLOGICAL_CALCULATION"] = "ASTROLOGICAL_CALCULATION";
    ErrorType["DATA_PROCESSING"] = "DATA_PROCESSING";
    ErrorType["COMPONENT_ERROR"] = "COMPONENT_ERROR";
    ErrorType["UNKNOWN"] = "UNKNOWN";
})(ErrorType || (exports.ErrorType = ErrorType = {}));
// Error severity levels
var ErrorSeverity;
(function (ErrorSeverity) {
    ErrorSeverity["LOW"] = "LOW";
    ErrorSeverity["MEDIUM"] = "MEDIUM";
    ErrorSeverity["HIGH"] = "HIGH";
    ErrorSeverity["CRITICAL"] = "CRITICAL";
})(ErrorSeverity || (exports.ErrorSeverity = ErrorSeverity = {}));
// User-friendly error messages
const USER_FRIENDLY_MESSAGES = {
    [ErrorType.NETWORK]: 'Unable to connect to the server. Please check your internet connection and try again.',
    [ErrorType.VALIDATION]: 'Please check your input and try again.',
    [ErrorType.AUTHENTICATION]: 'Please log in to continue.',
    [ErrorType.AUTHORIZATION]: 'You don\'t have permission to access this resource.',
    [ErrorType.NOT_FOUND]: 'The requested information could not be found.',
    [ErrorType.SERVER_ERROR]: 'A server error occurred. Please try again later.',
    [ErrorType.CLIENT_ERROR]: 'An error occurred while processing your request.',
    [ErrorType.ASTROLOGICAL_CALCULATION]: 'Unable to calculate astrological data. Using cached information.',
    [ErrorType.DATA_PROCESSING]: 'Error processing data. Please try again.',
    [ErrorType.COMPONENT_ERROR]: 'A component failed to load. Please refresh the page.',
    [ErrorType.UNKNOWN]: 'An unexpected error occurred. Please try again.'
};
// Create enhanced error
function createEnhancedError(message, type = ErrorType.UNKNOWN, severity = ErrorSeverity.MEDIUM, context, originalError) {
    const error = new Error(message);
    error.type = type;
    error.severity = severity;
    error.context = context;
    error.userMessage = USER_FRIENDLY_MESSAGES[type];
    error.recoverable = isRecoverable(type);
    error.retryable = isRetryable(type);
    error.timestamp = new Date();
    error.errorId = `error_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    // Preserve original error stack if available
    if (originalError) {
        error.stack = originalError.stack;
        error.cause = originalError;
    }
    return error;
}
exports.createEnhancedError = createEnhancedError;
// Determine if error is recoverable
function isRecoverable(type) {
    return [
        ErrorType.NETWORK,
        ErrorType.ASTROLOGICAL_CALCULATION,
        ErrorType.DATA_PROCESSING,
        ErrorType.COMPONENT_ERROR
    ].includes(type);
}
// Determine if error is retryable
function isRetryable(type) {
    return [
        ErrorType.NETWORK,
        ErrorType.SERVER_ERROR,
        ErrorType.ASTROLOGICAL_CALCULATION,
        ErrorType.DATA_PROCESSING
    ].includes(type);
}
// Error classification based on error message or type
function classifyError(error) {
    const message = typeof error === 'string' ? error : error.message;
    const lowerMessage = message.toLowerCase();
    if (lowerMessage.includes('network') || lowerMessage.includes('fetch') || lowerMessage.includes('connection')) {
        return ErrorType.NETWORK;
    }
    if (lowerMessage.includes('validation') || lowerMessage.includes('invalid')) {
        return ErrorType.VALIDATION;
    }
    if (lowerMessage.includes('unauthorized') || lowerMessage.includes('authentication')) {
        return ErrorType.AUTHENTICATION;
    }
    if (lowerMessage.includes('forbidden') || lowerMessage.includes('permission')) {
        return ErrorType.AUTHORIZATION;
    }
    if (lowerMessage.includes('not found') || lowerMessage.includes('404')) {
        return ErrorType.NOT_FOUND;
    }
    if (lowerMessage.includes('server') || lowerMessage.includes('500') || lowerMessage.includes('503')) {
        return ErrorType.SERVER_ERROR;
    }
    if (lowerMessage.includes('planetary') || lowerMessage.includes('astrological') || lowerMessage.includes('zodiac')) {
        return ErrorType.ASTROLOGICAL_CALCULATION;
    }
    if (lowerMessage.includes('component') || lowerMessage.includes('render')) {
        return ErrorType.COMPONENT_ERROR;
    }
    return ErrorType.UNKNOWN;
}
exports.classifyError = classifyError;
// Error handler class
class ErrorHandler {
    recoveryStrategies = [];
    errorQueue = [];
    maxQueueSize = 50;
    // Add recovery strategy
    addRecoveryStrategy(strategy) {
        this.recoveryStrategies.push(strategy);
    }
    // Handle error with recovery attempts
    async handleError(error, context) {
        let enhancedError;
        if ('type' in error && 'severity' in error) {
            enhancedError = error;
        }
        else {
            const type = classifyError(error);
            const severity = this.determineSeverity(type);
            enhancedError = createEnhancedError(error.message, type, severity, context, error);
        }
        // Log the error
        this.logError(enhancedError);
        // Add to error queue
        this.addToQueue(enhancedError);
        // Attempt recovery
        const recoveryResult = await this.attemptRecovery(enhancedError);
        if (recoveryResult.success) {
            logger_1.logger.info(`Error recovered successfully: ${enhancedError.errorId}`);
            return recoveryResult.data;
        }
        // If recovery failed, throw the enhanced error
        throw enhancedError;
    }
    // Attempt error recovery
    async attemptRecovery(error) {
        for (const strategy of this.recoveryStrategies) {
            if (strategy.canRecover(error)) {
                try {
                    const result = await strategy.recover(error);
                    return { success: true, data: result };
                }
                catch (recoveryError) {
                    logger_1.logger.warn(`Recovery strategy failed for error ${error.errorId}:`, recoveryError);
                    // Try fallback if available
                    if (strategy.fallback) {
                        try {
                            const fallbackResult = strategy.fallback();
                            return { success: true, data: fallbackResult };
                        }
                        catch (fallbackError) {
                            logger_1.logger.warn(`Fallback strategy failed for error ${error.errorId}:`, fallbackError);
                        }
                    }
                }
            }
        }
        return { success: false };
    }
    // Determine error severity
    determineSeverity(type) {
        switch (type) {
            case ErrorType.AUTHENTICATION:
            case ErrorType.AUTHORIZATION:
                return ErrorSeverity.HIGH;
            case ErrorType.SERVER_ERROR:
                return ErrorSeverity.HIGH;
            case ErrorType.NETWORK:
            case ErrorType.ASTROLOGICAL_CALCULATION:
                return ErrorSeverity.MEDIUM;
            case ErrorType.VALIDATION:
            case ErrorType.NOT_FOUND:
                return ErrorSeverity.LOW;
            default:
                return ErrorSeverity.MEDIUM;
        }
    }
    // Log error with appropriate level
    logError(error) {
        const logData = {
            errorId: error.errorId,
            type: error.type,
            severity: error.severity,
            message: error.message,
            userMessage: error.userMessage,
            context: error.context,
            timestamp: error.timestamp,
            stack: error.stack
        };
        switch (error.severity) {
            case ErrorSeverity.CRITICAL:
            case ErrorSeverity.HIGH:
                logger_1.logger.error('High severity error:', logData);
                break;
            case ErrorSeverity.MEDIUM:
                logger_1.logger.warn('Medium severity error:', logData);
                break;
            case ErrorSeverity.LOW:
                logger_1.logger.info('Low severity error:', logData);
                break;
        }
    }
    // Add error to queue for analysis
    addToQueue(error) {
        this.errorQueue.push(error);
        // Maintain queue size
        if (this.errorQueue.length > this.maxQueueSize) {
            this.errorQueue.shift();
        }
    }
    // Get error statistics
    getErrorStats() {
        const byType = {};
        const bySeverity = {};
        this.errorQueue.forEach(error => {
            byType[error.type] = (byType[error.type] || 0) + 1;
            bySeverity[error.severity] = (bySeverity[error.severity] || 0) + 1;
        });
        return {
            total: this.errorQueue.length,
            byType,
            bySeverity,
            recent: this.errorQueue.slice(-10) // Last 10 errors
        };
    }
    // Clear error queue
    clearErrorQueue() {
        this.errorQueue = [];
    }
}
exports.ErrorHandler = ErrorHandler;
// Global error handler instance
exports.globalErrorHandler = new ErrorHandler();
// Default recovery strategies
exports.globalErrorHandler.addRecoveryStrategy({
    canRecover: (error) => error.type === ErrorType.ASTROLOGICAL_CALCULATION,
    recover: async (error) => {
        logger_1.logger.info(`Attempting to recover from astrological calculation error: ${error.errorId}`);
        // Return cached astrological data
        const cachedData = localStorage.getItem('cachedAstrologicalData');
        if (cachedData) {
            return JSON.parse(cachedData);
        }
        throw new Error('No cached astrological data available');
    },
    fallback: () => {
        // Return default astrological state
        return {
            zodiacSign: 'aries',
            lunarPhase: 'new moon',
            elementalState: { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 }
        };
    }
});
exports.globalErrorHandler.addRecoveryStrategy({
    canRecover: (error) => error.type === ErrorType.NETWORK,
    recover: async (error) => {
        logger_1.logger.info(`Attempting to recover from network error: ${error.errorId}`);
        // Try to use cached data
        const cacheKey = error.context?.cacheKey;
        if (cacheKey) {
            const cachedData = localStorage.getItem(cacheKey);
            if (cachedData) {
                return JSON.parse(cachedData);
            }
        }
        throw new Error('No cached data available for network recovery');
    }
});
// Utility functions for common error scenarios
function handleAsyncError(promise, context) {
    return promise.catch(error => {
        return exports.globalErrorHandler.handleError(error, context);
    });
}
exports.handleAsyncError = handleAsyncError;
function handleSyncError(fn, context) {
    try {
        return fn();
    }
    catch (error) {
        throw exports.globalErrorHandler.handleError(error, context);
    }
}
exports.handleSyncError = handleSyncError;
// React hook for error handling
function useErrorHandler() {
    const handleError = react_1.default.useCallback(async (error, context) => {
        try {
            return await exports.globalErrorHandler.handleError(error, context);
        }
        catch (enhancedError) {
            // Re-throw enhanced error for component error boundaries to catch
            throw enhancedError;
        }
    }, []);
    const getErrorStats = react_1.default.useCallback(() => {
        return exports.globalErrorHandler.getErrorStats();
    }, []);
    return { handleError, getErrorStats };
}
exports.useErrorHandler = useErrorHandler;
// Error boundary helper for specific error types
function createErrorBoundaryForType(errorType) {
    return function ErrorBoundaryForType({ children }) {
        return react_1.default.createElement(ErrorBoundary_1.default, {
            fallback: (error, errorInfo) => {
                const enhancedError = createEnhancedError(error.message, errorType, ErrorSeverity.MEDIUM, { componentStack: errorInfo.componentStack });
                return react_1.default.createElement('div', {
                    className: "bg-yellow-50 border border-yellow-200 rounded-lg p-4 m-2"
                }, [
                    react_1.default.createElement('h4', {
                        key: 'title',
                        className: "text-yellow-800 font-medium mb-2"
                    }, `${errorType} Error`),
                    react_1.default.createElement('p', {
                        key: 'message',
                        className: "text-yellow-700 text-sm mb-3"
                    }, enhancedError.userMessage),
                    react_1.default.createElement('button', {
                        key: 'button',
                        onClick: () => window.location.reload(),
                        className: "bg-yellow-600 text-white px-3 py-1 rounded text-sm hover:bg-yellow-700 transition-colors"
                    }, 'Reload Page')
                ]);
            }
        }, children);
    };
}
exports.createErrorBoundaryForType = createErrorBoundaryForType;
exports.default = ErrorHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy91dGlscy9lcnJvckhhbmRsaW5nLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGtEQUEwQjtBQUUxQixnR0FBd0U7QUFDeEUsMkNBQXdDO0FBRXhDLHdDQUF3QztBQUN4QyxJQUFZLFNBWVg7QUFaRCxXQUFZLFNBQVM7SUFDbkIsZ0NBQW1CLENBQUE7SUFDbkIsc0NBQXlCLENBQUE7SUFDekIsOENBQWlDLENBQUE7SUFDakMsNENBQStCLENBQUE7SUFDL0Isb0NBQXVCLENBQUE7SUFDdkIsMENBQTZCLENBQUE7SUFDN0IsMENBQTZCLENBQUE7SUFDN0Isa0VBQXFELENBQUE7SUFDckQsZ0RBQW1DLENBQUE7SUFDbkMsZ0RBQW1DLENBQUE7SUFDbkMsZ0NBQW1CLENBQUE7QUFDckIsQ0FBQyxFQVpXLFNBQVMseUJBQVQsU0FBUyxRQVlwQjtBQUVELHdCQUF3QjtBQUN4QixJQUFZLGFBS1g7QUFMRCxXQUFZLGFBQWE7SUFDdkIsNEJBQVcsQ0FBQTtJQUNYLGtDQUFpQixDQUFBO0lBQ2pCLDhCQUFhLENBQUE7SUFDYixzQ0FBcUIsQ0FBQTtBQUN2QixDQUFDLEVBTFcsYUFBYSw2QkFBYixhQUFhLFFBS3hCO0FBcUJELCtCQUErQjtBQUMvQixNQUFNLHNCQUFzQixHQUE4QjtJQUN4RCxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRSx1RkFBdUY7SUFDNUcsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLEVBQUUsd0NBQXdDO0lBQ2hFLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxFQUFFLDRCQUE0QjtJQUN4RCxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsRUFBRSxxREFBcUQ7SUFDaEYsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsK0NBQStDO0lBQ3RFLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxFQUFFLGtEQUFrRDtJQUM1RSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsRUFBRSxrREFBa0Q7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MEY7cUJBQ3RHLEVBQUUsYUFBYSxDQUFDO2lCQUNsQixDQUFDLENBQUM7WUFDTCxDQUFDO1NBQ0YsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNmLENBQUMsQ0FBQztBQUNKLENBQUM7QUEvQkQsZ0VBK0JDO0FBRUQsa0JBQWUsWUFBWSxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9HcmVnQ2FzdHJvL0Rlc2t0b3AvV2hhdFRvRWF0TmV4dC9zcmMvdXRpbHMvZXJyb3JIYW5kbGluZy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgRXJyb3JCb3VuZGFyeSBmcm9tICdAL2NvbXBvbmVudHMvZXJyb3ItYm91bmRhcmllcy9FcnJvckJvdW5kYXJ5JztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ0AvdXRpbHMvbG9nZ2VyJztcblxuLy8gRXJyb3IgdHlwZXMgZm9yIGJldHRlciBjYXRlZ29yaXphdGlvblxuZXhwb3J0IGVudW0gRXJyb3JUeXBlIHtcbiAgTkVUV09SSyA9ICdORVRXT1JLJyxcbiAgVkFMSURBVElPTiA9ICdWQUxJREFUSU9OJyxcbiAgQVVUSEVOVElDQVRJT04gPSAnQVVUSEVOVElDQVRJT04nLFxuICBBVVRIT1JJWkFUSU9OID0gJ0FVVEhPUklaQVRJT04nLFxuICBOT1RfRk9VTkQgPSAnTk9UX0ZPVU5EJyxcbiAgU0VSVkVSX0VSUk9SID0gJ1NFUlZFUl9FUlJPUicsXG4gIENMSUVOVF9FUlJPUiA9ICdDTElFTlRfRVJST1InLFxuICBBU1RST0xPR0lDQUxfQ0FMQ1VMQVRJT04gPSAnQVNUUk9MT0dJQ0FMX0NBTENVTEFUSU9OJyxcbiAgREFUQV9QUk9DRVNTSU5HID0gJ0RBVEFfUFJPQ0VTU0lORycsXG4gIENPTVBPTkVOVF9FUlJPUiA9ICdDT01QT05FTlRfRVJST1InLFxuICBVTktOT1dOID0gJ1VOS05PV04nXG59XG5cbi8vIEVycm9yIHNldmVyaXR5IGxldmVsc1xuZXhwb3J0IGVudW0gRXJyb3JTZXZlcml0eSB7XG4gIExPVyA9ICdMT1cnLFxuICBNRURJVU0gPSAnTUVESVVNJyxcbiAgSElHSCA9ICdISUdIJyxcbiAgQ1JJVElDQUwgPSAnQ1JJVElDQUwnXG59XG5cbi8vIEVuaGFuY2VkIGVycm9yIGludGVyZmFjZVxuZXhwb3J0IGludGVyZmFjZSBFbmhhbmNlZEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICB0eXBlOiBFcnJvclR5cGU7XG4gIHNldmVyaXR5OiBFcnJvclNldmVyaXR5O1xuICBjb250ZXh0PzogUmVjb3JkPHN0cmluZywgYW55PjtcbiAgdXNlck1lc3NhZ2U/OiBzdHJpbmc7XG4gIHJlY292ZXJhYmxlPzogYm9vbGVhbjtcbiAgcmV0cnlhYmxlPzogYm9vbGVhbjtcbiAgdGltZXN0YW1wOiBEYXRlO1xuICBlcnJvcklkOiBzdHJpbmc7XG59XG5cbi8vIEVycm9yIHJlY292ZXJ5IHN0cmF0ZWdpZXNcbmV4cG9ydCBpbnRlcmZhY2UgRXJyb3JSZWNvdmVyeVN0cmF0ZWd5IHtcbiAgY2FuUmVjb3ZlcjogKGVycm9yOiBFbmhhbmNlZEVycm9yKSA9PiBib29sZWFuO1xuICByZWNvdmVyOiAoZXJyb3I6IEVuaGFuY2VkRXJyb3IpID0+IFByb21pc2U8YW55PiB8IGFueTtcbiAgZmFsbGJhY2s/OiAoKSA9PiBhbnk7XG59XG5cbi8vIFVzZXItZnJpZW5kbHkgZXJyb3IgbWVzc2FnZXNcbmNvbnN0IFVTRVJfRlJJRU5ETFlfTUVTU0FHRVM6IFJlY29yZDxFcnJvclR5cGUsIHN0cmluZz4gPSB7XG4gIFtFcnJvclR5cGUuTkVUV09SS106ICdVbmFibGUgdG8gY29ubmVjdCB0byB0aGUgc2VydmVyLiBQbGVhc2UgY2hlY2sgeW91ciBpbnRlcm5ldCBjb25uZWN0aW9uIGFuZCB0cnkgYWdhaW4uJyxcbiAgW0Vycm9yVHlwZS5WQUxJREFUSU9OXTogJ1BsZWFzZSBjaGVjayB5b3VyIGlucHV0IGFuZCB0cnkgYWdhaW4uJyxcbiAgW0Vycm9yVHlwZS5BVVRIRU5USUNBVElPTl06ICdQbGVhc2UgbG9nIGluIHRvIGNvbnRpbnVlLicsXG4gIFtFcnJvclR5cGUuQVVUSE9SSVpBVElPTl06ICdZb3UgZG9uXFwndCBoYXZlIHBlcm1pc3Npb24gdG8gYWNjZXNzIHRoaXMgcmVzb3VyY2UuJyxcbiAgW0Vycm9yVHlwZS5OT1RfRk9VTkRdOiAnVGhlIHJlcXVlc3RlZCBpbmZvcm1hdGlvbiBjb3VsZCBub3QgYmUgZm91bmQuJyxcbiAgW0Vycm9yVHlwZS5TRVJWRVJfRVJST1JdOiAnQSBzZXJ2ZXIgZXJyb3Igb2NjdXJyZWQuIFBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIuJyxcbiAgW0Vycm9yVHlwZS5DTElFTlRfRVJST1JdOiAnQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgcHJvY2Vzc2luZyB5b3VyIHJlcXVlc3QuJyxcbiAgW0Vycm9yVHlwZS5BU1RST0xPR0lDQUxfQ0FMQ1VMQVRJT05dOiAnVW5hYmxlIHRvIGNhbGN1bGF0ZSBhc3Ryb2xvZ2ljYWwgZGF0YS4gVXNpbmcgY2FjaGVkIGluZm9ybWF0aW9uLicsXG4gIFtFcnJvclR5cGUuREFUQV9QUk9DRVNTSU5HXTogJ0Vycm9yIHByb2Nlc3NpbmcgZGF0YS4gUGxlYXNlIHRyeSBhZ2Fpbi4nLFxuICBbRXJyb3JUeXBlLkNPTVBPTkVOVF9FUlJPUl06ICdBIGNvbXBvbmVudCBmYWlsZWQgdG8gbG9hZC4gUGxlYXNlIHJlZnJlc2ggdGhlIHBhZ2UuJyxcbiAgW0Vycm9yVHlwZS5VTktOT1dOXTogJ0FuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQuIFBsZWFzZSB0cnkgYWdhaW4uJ1xufTtcblxuLy8gQ3JlYXRlIGVuaGFuY2VkIGVycm9yXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRW5oYW5jZWRFcnJvcihcbiAgbWVzc2FnZTogc3RyaW5nLFxuICB0eXBlOiBFcnJvclR5cGUgPSBFcnJvclR5cGUuVU5LTk9XTixcbiAgc2V2ZXJpdHk6IEVycm9yU2V2ZXJpdHkgPSBFcnJvclNldmVyaXR5Lk1FRElVTSxcbiAgY29udGV4dD86IFJlY29yZDxzdHJpbmcsIGFueT4sXG4gIG9yaWdpbmFsRXJyb3I/OiBFcnJvclxuKTogRW5oYW5jZWRFcnJvciB7XG4gIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpIGFzIEVuaGFuY2VkRXJyb3I7XG4gIFxuICBlcnJvci50eXBlID0gdHlwZTtcbiAgZXJyb3Iuc2V2ZXJpdHkgPSBzZXZlcml0eTtcbiAgZXJyb3IuY29udGV4dCA9IGNvbnRleHQ7XG4gIGVycm9yLnVzZXJNZXNzYWdlID0gVVNFUl9GUklFTkRMWV9NRVNTQUdFU1t0eXBlXTtcbiAgZXJyb3IucmVjb3ZlcmFibGUgPSBpc1JlY292ZXJhYmxlKHR5cGUpO1xuICBlcnJvci5yZXRyeWFibGUgPSBpc1JldHJ5YWJsZSh0eXBlKTtcbiAgZXJyb3IudGltZXN0YW1wID0gbmV3IERhdGUoKTtcbiAgZXJyb3IuZXJyb3JJZCA9IGBlcnJvcl8ke0RhdGUubm93KCl9XyR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDkpfWA7XG4gIFxuICAvLyBQcmVzZXJ2ZSBvcmlnaW5hbCBlcnJvciBzdGFjayBpZiBhdmFpbGFibGVcbiAgaWYgKG9yaWdpbmFsRXJyb3IpIHtcbiAgICBlcnJvci5zdGFjayA9IG9yaWdpbmFsRXJyb3Iuc3RhY2s7XG4gICAgZXJyb3IuY2F1c2UgPSBvcmlnaW5hbEVycm9yO1xuICB9XG4gIFxuICByZXR1cm4gZXJyb3I7XG59XG5cbi8vIERldGVybWluZSBpZiBlcnJvciBpcyByZWNvdmVyYWJsZVxuZnVuY3Rpb24gaXNSZWNvdmVyYWJsZSh0eXBlOiBFcnJvclR5cGUpOiBib29sZWFuIHtcbiAgcmV0dXJuIFtcbiAgICBFcnJvclR5cGUuTkVUV09SSyxcbiAgICBFcnJvclR5cGUuQVNUUk9MT0dJQ0FMX0NBTENVTEFUSU9OLFxuICAgIEVycm9yVHlwZS5EQVRBX1BST0NFU1NJTkcsXG4gICAgRXJyb3JUeXBlLkNPTVBPTkVOVF9FUlJPUlxuICBdLmluY2x1ZGVzKHR5cGUpO1xufVxuXG4vLyBEZXRlcm1pbmUgaWYgZXJyb3IgaXMgcmV0cnlhYmxlXG5mdW5jdGlvbiBpc1JldHJ5YWJsZSh0eXBlOiBFcnJvclR5cGUpOiBib29sZWFuIHtcbiAgcmV0dXJuIFtcbiAgICBFcnJvclR5cGUuTkVUV09SSyxcbiAgICBFcnJvclR5cGUuU0VSVkVSX0VSUk9SLFxuICAgIEVycm9yVHlwZS5BU1RST0xPR0lDQUxfQ0FMQ1VMQVRJT04sXG4gICAgRXJyb3JUeXBlLkRBVEFfUFJPQ0VTU0lOR1xuICBdLmluY2x1ZGVzKHR5cGUpO1xufVxuXG4vLyBFcnJvciBjbGFzc2lmaWNhdGlvbiBiYXNlZCBvbiBlcnJvciBtZXNzYWdlIG9yIHR5cGVcbmV4cG9ydCBmdW5jdGlvbiBjbGFzc2lmeUVycm9yKGVycm9yOiBFcnJvciB8IHN0cmluZyk6IEVycm9yVHlwZSB7XG4gIGNvbnN0IG1lc3NhZ2UgPSB0eXBlb2YgZXJyb3IgPT09ICdzdHJpbmcnID8gZXJyb3IgOiBlcnJvci5tZXNzYWdlO1xuICBjb25zdCBsb3dlck1lc3NhZ2UgPSBtZXNzYWdlLnRvTG93ZXJDYXNlKCk7XG4gIFxuICBpZiAobG93ZXJNZXNzYWdlLmluY2x1ZGVzKCduZXR3b3JrJykgfHwgbG93ZXJNZXNzYWdlLmluY2x1ZGVzKCdmZXRjaCcpIHx8IGxvd2VyTWVzc2FnZS5pbmNsdWRlcygnY29ubmVjdGlvbicpKSB7XG4gICAgcmV0dXJuIEVycm9yVHlwZS5ORVRXT1JLO1xuICB9XG4gIFxuICBpZiAobG93ZXJNZXNzYWdlLmluY2x1ZGVzKCd2YWxpZGF0aW9uJykgfHwgbG93ZXJNZXNzYWdlLmluY2x1ZGVzKCdpbnZhbGlkJykpIHtcbiAgICByZXR1cm4gRXJyb3JUeXBlLlZBTElEQVRJT047XG4gIH1cbiAgXG4gIGlmIChsb3dlck1lc3NhZ2UuaW5jbHVkZXMoJ3VuYXV0aG9yaXplZCcpIHx8IGxvd2VyTWVzc2FnZS5pbmNsdWRlcygnYXV0aGVudGljYXRpb24nKSkge1xuICAgIHJldHVybiBFcnJvclR5cGUuQVVUSEVOVElDQVRJT047XG4gIH1cbiAgXG4gIGlmIChsb3dlck1lc3NhZ2UuaW5jbHVkZXMoJ2ZvcmJpZGRlbicpIHx8IGxvd2VyTWVzc2FnZS5pbmNsdWRlcygncGVybWlzc2lvbicpKSB7XG4gICAgcmV0dXJuIEVycm9yVHlwZS5BVVRIT1JJWkFUSU9OO1xuICB9XG4gIFxuICBpZiAobG93ZXJNZXNzYWdlLmluY2x1ZGVzKCdub3QgZm91bmQnKSB8fCBsb3dlck1lc3NhZ2UuaW5jbHVkZXMoJzQwNCcpKSB7XG4gICAgcmV0dXJuIEVycm9yVHlwZS5OT1RfRk9VTkQ7XG4gIH1cbiAgXG4gIGlmIChsb3dlck1lc3NhZ2UuaW5jbHVkZXMoJ3NlcnZlcicpIHx8IGxvd2VyTWVzc2FnZS5pbmNsdWRlcygnNTAwJykgfHwgbG93ZXJNZXNzYWdlLmluY2x1ZGVzKCc1MDMnKSkge1xuICAgIHJldHVybiBFcnJvclR5cGUuU0VSVkVSX0VSUk9SO1xuICB9XG4gIFxuICBpZiAobG93ZXJNZXNzYWdlLmluY2x1ZGVzKCdwbGFuZXRhcnknKSB8fCBsb3dlck1lc3NhZ2UuaW5jbHVkZXMoJ2FzdHJvbG9naWNhbCcpIHx8IGxvd2VyTWVzc2FnZS5pbmNsdWRlcygnem9kaWFjJykpIHtcbiAgICByZXR1cm4gRXJyb3JUeXBlLkFTVFJPTE9HSUNBTF9DQUxDVUxBVElPTjtcbiAgfVxuICBcbiAgaWYgKGxvd2VyTWVzc2FnZS5pbmNsdWRlcygnY29tcG9uZW50JykgfHwgbG93ZXJNZXNzYWdlLmluY2x1ZGVzKCdyZW5kZXInKSkge1xuICAgIHJldHVybiBFcnJvclR5cGUuQ09NUE9ORU5UX0VSUk9SO1xuICB9XG4gIFxuICByZXR1cm4gRXJyb3JUeXBlLlVOS05PV047XG59XG5cbi8vIEVycm9yIGhhbmRsZXIgY2xhc3NcbmV4cG9ydCBjbGFzcyBFcnJvckhhbmRsZXIge1xuICBwcml2YXRlIHJlY292ZXJ5U3RyYXRlZ2llczogRXJyb3JSZWNvdmVyeVN0cmF0ZWd5W10gPSBbXTtcbiAgcHJpdmF0ZSBlcnJvclF1ZXVlOiBFbmhhbmNlZEVycm9yW10gPSBbXTtcbiAgcHJpdmF0ZSBtYXhRdWV1ZVNpemUgPSA1MDtcblxuICAvLyBBZGQgcmVjb3Zlcnkgc3RyYXRlZ3lcbiAgYWRkUmVjb3ZlcnlTdHJhdGVneShzdHJhdGVneTogRXJyb3JSZWNvdmVyeVN0cmF0ZWd5KSB7XG4gICAgdGhpcy5yZWNvdmVyeVN0cmF0ZWdpZXMucHVzaChzdHJhdGVneSk7XG4gIH1cblxuICAvLyBIYW5kbGUgZXJyb3Igd2l0aCByZWNvdmVyeSBhdHRlbXB0c1xuICBhc3luYyBoYW5kbGVFcnJvcihlcnJvcjogRXJyb3IgfCBFbmhhbmNlZEVycm9yLCBjb250ZXh0PzogUmVjb3JkPHN0cmluZywgYW55Pik6IFByb21pc2U8YW55PiB7XG4gICAgbGV0IGVuaGFuY2VkRXJyb3I6IEVuaGFuY2VkRXJyb3I7XG4gICAgXG4gICAgaWYgKCd0eXBlJyBpbiBlcnJvciAmJiAnc2V2ZXJpdHknIGluIGVycm9yKSB7XG4gICAgICBlbmhhbmNlZEVycm9yID0gZXJyb3IgO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB0eXBlID0gY2xhc3NpZnlFcnJvcihlcnJvcik7XG4gICAgICBjb25zdCBzZXZlcml0eSA9IHRoaXMuZGV0ZXJtaW5lU2V2ZXJpdHkodHlwZSk7XG4gICAgICBlbmhhbmNlZEVycm9yID0gY3JlYXRlRW5oYW5jZWRFcnJvcihlcnJvci5tZXNzYWdlLCB0eXBlLCBzZXZlcml0eSwgY29udGV4dCwgZXJyb3IpO1xuICAgIH1cblxuICAgIC8vIExvZyB0aGUgZXJyb3JcbiAgICB0aGlzLmxvZ0Vycm9yKGVuaGFuY2VkRXJyb3IpO1xuICAgIFxuICAgIC8vIEFkZCB0byBlcnJvciBxdWV1ZVxuICAgIHRoaXMuYWRkVG9RdWV1ZShlbmhhbmNlZEVycm9yKTtcbiAgICBcbiAgICAvLyBBdHRlbXB0IHJlY292ZXJ5XG4gICAgY29uc3QgcmVjb3ZlcnlSZXN1bHQgPSBhd2FpdCB0aGlzLmF0dGVtcHRSZWNvdmVyeShlbmhhbmNlZEVycm9yKTtcbiAgICBcbiAgICBpZiAocmVjb3ZlcnlSZXN1bHQuc3VjY2Vzcykge1xuICAgICAgbG9nZ2VyLmluZm8oYEVycm9yIHJlY292ZXJlZCBzdWNjZXNzZnVsbHk6ICR7ZW5oYW5jZWRFcnJvci5lcnJvcklkfWApO1xuICAgICAgcmV0dXJuIHJlY292ZXJ5UmVzdWx0LmRhdGE7XG4gICAgfVxuICAgIFxuICAgIC8vIElmIHJlY292ZXJ5IGZhaWxlZCwgdGhyb3cgdGhlIGVuaGFuY2VkIGVycm9yXG4gICAgdGhyb3cgZW5oYW5jZWRFcnJvcjtcbiAgfVxuXG4gIC8vIEF0dGVtcHQgZXJyb3IgcmVjb3ZlcnlcbiAgcHJpdmF0ZSBhc3luYyBhdHRlbXB0UmVjb3ZlcnkoZXJyb3I6IEVuaGFuY2VkRXJyb3IpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgZGF0YT86IGFueSB9PiB7XG4gICAgZm9yIChjb25zdCBzdHJhdGVneSBvZiB0aGlzLnJlY292ZXJ5U3RyYXRlZ2llcykge1xuICAgICAgaWYgKHN0cmF0ZWd5LmNhblJlY292ZXIoZXJyb3IpKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc3RyYXRlZ3kucmVjb3ZlcihlcnJvcik7XG4gICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgZGF0YTogcmVzdWx0IH07XG4gICAgICAgIH0gY2F0Y2ggKHJlY292ZXJ5RXJyb3IpIHtcbiAgICAgICAgICBsb2dnZXIud2FybihgUmVjb3Zlcnkgc3RyYXRlZ3kgZmFpbGVkIGZvciBlcnJvciAke2Vycm9yLmVycm9ySWR9OmAsIHJlY292ZXJ5RXJyb3IpO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIFRyeSBmYWxsYmFjayBpZiBhdmFpbGFibGVcbiAgICAgICAgICBpZiAoc3RyYXRlZ3kuZmFsbGJhY2spIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGNvbnN0IGZhbGxiYWNrUmVzdWx0ID0gc3RyYXRlZ3kuZmFsbGJhY2soKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgZGF0YTogZmFsbGJhY2tSZXN1bHQgfTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGZhbGxiYWNrRXJyb3IpIHtcbiAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oYEZhbGxiYWNrIHN0cmF0ZWd5IGZhaWxlZCBmb3IgZXJyb3IgJHtlcnJvci5lcnJvcklkfTpgLCBmYWxsYmFja0Vycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcbiAgfVxuXG4gIC8vIERldGVybWluZSBlcnJvciBzZXZlcml0eVxuICBwcml2YXRlIGRldGVybWluZVNldmVyaXR5KHR5cGU6IEVycm9yVHlwZSk6IEVycm9yU2V2ZXJpdHkge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBFcnJvclR5cGUuQVVUSEVOVElDQVRJT046XG4gICAgICBjYXNlIEVycm9yVHlwZS5BVVRIT1JJWkFUSU9OOlxuICAgICAgICByZXR1cm4gRXJyb3JTZXZlcml0eS5ISUdIO1xuICAgICAgXG4gICAgICBjYXNlIEVycm9yVHlwZS5TRVJWRVJfRVJST1I6XG4gICAgICAgIHJldHVybiBFcnJvclNldmVyaXR5LkhJR0g7XG4gICAgICBcbiAgICAgIGNhc2UgRXJyb3JUeXBlLk5FVFdPUks6XG4gICAgICBjYXNlIEVycm9yVHlwZS5BU1RST0xPR0lDQUxfQ0FMQ1VMQVRJT046XG4gICAgICAgIHJldHVybiBFcnJvclNldmVyaXR5Lk1FRElVTTtcbiAgICAgIFxuICAgICAgY2FzZSBFcnJvclR5cGUuVkFMSURBVElPTjpcbiAgICAgIGNhc2UgRXJyb3JUeXBlLk5PVF9GT1VORDpcbiAgICAgICAgcmV0dXJuIEVycm9yU2V2ZXJpdHkuTE9XO1xuICAgICAgXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gRXJyb3JTZXZlcml0eS5NRURJVU07XG4gICAgfVxuICB9XG5cbiAgLy8gTG9nIGVycm9yIHdpdGggYXBwcm9wcmlhdGUgbGV2ZWxcbiAgcHJpdmF0ZSBsb2dFcnJvcihlcnJvcjogRW5oYW5jZWRFcnJvcikge1xuICAgIGNvbnN0IGxvZ0RhdGEgPSB7XG4gICAgICBlcnJvcklkOiBlcnJvci5lcnJvcklkLFxuICAgICAgdHlwZTogZXJyb3IudHlwZSxcbiAgICAgIHNldmVyaXR5OiBlcnJvci5zZXZlcml0eSxcbiAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICB1c2VyTWVzc2FnZTogZXJyb3IudXNlck1lc3NhZ2UsXG4gICAgICBjb250ZXh0OiBlcnJvci5jb250ZXh0LFxuICAgICAgdGltZXN0YW1wOiBlcnJvci50aW1lc3RhbXAsXG4gICAgICBzdGFjazogZXJyb3Iuc3RhY2tcbiAgICB9O1xuXG4gICAgc3dpdGNoIChlcnJvci5zZXZlcml0eSkge1xuICAgICAgY2FzZSBFcnJvclNldmVyaXR5LkNSSVRJQ0FMOlxuICAgICAgY2FzZSBFcnJvclNldmVyaXR5LkhJR0g6XG4gICAgICAgIGxvZ2dlci5lcnJvcignSGlnaCBzZXZlcml0eSBlcnJvcjonLCBsb2dEYXRhKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBcbiAgICAgIGNhc2UgRXJyb3JTZXZlcml0eS5NRURJVU06XG4gICAgICAgIGxvZ2dlci53YXJuKCdNZWRpdW0gc2V2ZXJpdHkgZXJyb3I6JywgbG9nRGF0YSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgXG4gICAgICBjYXNlIEVycm9yU2V2ZXJpdHkuTE9XOlxuICAgICAgICBsb2dnZXIuaW5mbygnTG93IHNldmVyaXR5IGVycm9yOicsIGxvZ0RhdGEpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgZXJyb3IgdG8gcXVldWUgZm9yIGFuYWx5c2lzXG4gIHByaXZhdGUgYWRkVG9RdWV1ZShlcnJvcjogRW5oYW5jZWRFcnJvcikge1xuICAgIHRoaXMuZXJyb3JRdWV1ZS5wdXNoKGVycm9yKTtcbiAgICBcbiAgICAvLyBNYWludGFpbiBxdWV1ZSBzaXplXG4gICAgaWYgKHRoaXMuZXJyb3JRdWV1ZS5sZW5ndGggPiB0aGlzLm1heFF1ZXVlU2l6ZSkge1xuICAgICAgdGhpcy5lcnJvclF1ZXVlLnNoaWZ0KCk7XG4gICAgfVxuICB9XG5cbiAgLy8gR2V0IGVycm9yIHN0YXRpc3RpY3NcbiAgZ2V0RXJyb3JTdGF0cygpOiB7XG4gICAgdG90YWw6IG51bWJlcjtcbiAgICBieVR5cGU6IFJlY29yZDxFcnJvclR5cGUsIG51bWJlcj47XG4gICAgYnlTZXZlcml0eTogUmVjb3JkPEVycm9yU2V2ZXJpdHksIG51bWJlcj47XG4gICAgcmVjZW50OiBFbmhhbmNlZEVycm9yW107XG4gIH0ge1xuICAgIGNvbnN0IGJ5VHlwZSA9IHt9IGFzIFJlY29yZDxFcnJvclR5cGUsIG51bWJlcj47XG4gICAgY29uc3QgYnlTZXZlcml0eSA9IHt9IGFzIFJlY29yZDxFcnJvclNldmVyaXR5LCBudW1iZXI+O1xuICAgIFxuICAgIHRoaXMuZXJyb3JRdWV1ZS5mb3JFYWNoKGVycm9yID0+IHtcbiAgICAgIGJ5VHlwZVtlcnJvci50eXBlXSA9IChieVR5cGVbZXJyb3IudHlwZV0gfHwgMCkgKyAxO1xuICAgICAgYnlTZXZlcml0eVtlcnJvci5zZXZlcml0eV0gPSAoYnlTZXZlcml0eVtlcnJvci5zZXZlcml0eV0gfHwgMCkgKyAxO1xuICAgIH0pO1xuICAgIFxuICAgIHJldHVybiB7XG4gICAgICB0b3RhbDogdGhpcy5lcnJvclF1ZXVlLmxlbmd0aCxcbiAgICAgIGJ5VHlwZSxcbiAgICAgIGJ5U2V2ZXJpdHksXG4gICAgICByZWNlbnQ6IHRoaXMuZXJyb3JRdWV1ZS5zbGljZSgtMTApIC8vIExhc3QgMTAgZXJyb3JzXG4gICAgfTtcbiAgfVxuXG4gIC8vIENsZWFyIGVycm9yIHF1ZXVlXG4gIGNsZWFyRXJyb3JRdWV1ZSgpIHtcbiAgICB0aGlzLmVycm9yUXVldWUgPSBbXTtcbiAgfVxufVxuXG4vLyBHbG9iYWwgZXJyb3IgaGFuZGxlciBpbnN0YW5jZVxuZXhwb3J0IGNvbnN0IGdsb2JhbEVycm9ySGFuZGxlciA9IG5ldyBFcnJvckhhbmRsZXIoKTtcblxuLy8gRGVmYXVsdCByZWNvdmVyeSBzdHJhdGVnaWVzXG5nbG9iYWxFcnJvckhhbmRsZXIuYWRkUmVjb3ZlcnlTdHJhdGVneSh7XG4gIGNhblJlY292ZXI6IChlcnJvcikgPT4gZXJyb3IudHlwZSA9PT0gRXJyb3JUeXBlLkFTVFJPTE9HSUNBTF9DQUxDVUxBVElPTixcbiAgcmVjb3ZlcjogYXN5bmMgKGVycm9yKSA9PiB7XG4gICAgbG9nZ2VyLmluZm8oYEF0dGVtcHRpbmcgdG8gcmVjb3ZlciBmcm9tIGFzdHJvbG9naWNhbCBjYWxjdWxhdGlvbiBlcnJvcjogJHtlcnJvci5lcnJvcklkfWApO1xuICAgIC8vIFJldHVybiBjYWNoZWQgYXN0cm9sb2dpY2FsIGRhdGFcbiAgICBjb25zdCBjYWNoZWREYXRhID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2NhY2hlZEFzdHJvbG9naWNhbERhdGEnKTtcbiAgICBpZiAoY2FjaGVkRGF0YSkge1xuICAgICAgcmV0dXJuIEpTT04ucGFyc2UoY2FjaGVkRGF0YSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignTm8gY2FjaGVkIGFzdHJvbG9naWNhbCBkYXRhIGF2YWlsYWJsZScpO1xuICB9LFxuICBmYWxsYmFjazogKCkgPT4ge1xuICAgIC8vIFJldHVybiBkZWZhdWx0IGFzdHJvbG9naWNhbCBzdGF0ZVxuICAgIHJldHVybiB7XG4gICAgICB6b2RpYWNTaWduOiAnYXJpZXMnLFxuICAgICAgbHVuYXJQaGFzZTogJ25ldyBtb29uJyxcbiAgICAgIGVsZW1lbnRhbFN0YXRlOiB7IEZpcmU6IDAuMjUsIFdhdGVyOiAwLjI1LCBFYXJ0aDogMC4yNSwgQWlyOiAwLjI1IH1cbiAgICB9O1xuICB9XG59KTtcblxuZ2xvYmFsRXJyb3JIYW5kbGVyLmFkZFJlY292ZXJ5U3RyYXRlZ3koe1xuICBjYW5SZWNvdmVyOiAoZXJyb3IpID0+IGVycm9yLnR5cGUgPT09IEVycm9yVHlwZS5ORVRXT1JLLFxuICByZWNvdmVyOiBhc3luYyAoZXJyb3IpID0+IHtcbiAgICBsb2dnZXIuaW5mbyhgQXR0ZW1wdGluZyB0byByZWNvdmVyIGZyb20gbmV0d29yayBlcnJvcjogJHtlcnJvci5lcnJvcklkfWApO1xuICAgIC8vIFRyeSB0byB1c2UgY2FjaGVkIGRhdGFcbiAgICBjb25zdCBjYWNoZUtleSA9IGVycm9yLmNvbnRleHQ/LmNhY2hlS2V5O1xuICAgIGlmIChjYWNoZUtleSkge1xuICAgICAgY29uc3QgY2FjaGVkRGF0YSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGNhY2hlS2V5KTtcbiAgICAgIGlmIChjYWNoZWREYXRhKSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGNhY2hlZERhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGNhY2hlZCBkYXRhIGF2YWlsYWJsZSBmb3IgbmV0d29yayByZWNvdmVyeScpO1xuICB9XG59KTtcblxuLy8gVXRpbGl0eSBmdW5jdGlvbnMgZm9yIGNvbW1vbiBlcnJvciBzY2VuYXJpb3NcbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVBc3luY0Vycm9yPFQ+KFxuICBwcm9taXNlOiBQcm9taXNlPFQ+LFxuICBjb250ZXh0PzogUmVjb3JkPHN0cmluZywgYW55PlxuKTogUHJvbWlzZTxUPiB7XG4gIHJldHVybiBwcm9taXNlLmNhdGNoKGVycm9yID0+IHtcbiAgICByZXR1cm4gZ2xvYmFsRXJyb3JIYW5kbGVyLmhhbmRsZUVycm9yKGVycm9yLCBjb250ZXh0KTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVTeW5jRXJyb3I8VD4oXG4gIGZuOiAoKSA9PiBULFxuICBjb250ZXh0PzogUmVjb3JkPHN0cmluZywgYW55PlxuKTogVCB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGZuKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdGhyb3cgZ2xvYmFsRXJyb3JIYW5kbGVyLmhhbmRsZUVycm9yKGVycm9yIGFzIEVycm9yLCBjb250ZXh0KTtcbiAgfVxufVxuXG4vLyBSZWFjdCBob29rIGZvciBlcnJvciBoYW5kbGluZ1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUVycm9ySGFuZGxlcigpIHtcbiAgY29uc3QgaGFuZGxlRXJyb3IgPSBSZWFjdC51c2VDYWxsYmFjayhhc3luYyAoZXJyb3I6IEVycm9yLCBjb250ZXh0PzogUmVjb3JkPHN0cmluZywgYW55PikgPT4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgZ2xvYmFsRXJyb3JIYW5kbGVyLmhhbmRsZUVycm9yKGVycm9yLCBjb250ZXh0KTtcbiAgICB9IGNhdGNoIChlbmhhbmNlZEVycm9yKSB7XG4gICAgICAvLyBSZS10aHJvdyBlbmhhbmNlZCBlcnJvciBmb3IgY29tcG9uZW50IGVycm9yIGJvdW5kYXJpZXMgdG8gY2F0Y2hcbiAgICAgIHRocm93IGVuaGFuY2VkRXJyb3I7XG4gICAgfVxuICB9LCBbXSk7XG5cbiAgY29uc3QgZ2V0RXJyb3JTdGF0cyA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICByZXR1cm4gZ2xvYmFsRXJyb3JIYW5kbGVyLmdldEVycm9yU3RhdHMoKTtcbiAgfSwgW10pO1xuXG4gIHJldHVybiB7IGhhbmRsZUVycm9yLCBnZXRFcnJvclN0YXRzIH07XG59XG5cbi8vIEVycm9yIGJvdW5kYXJ5IGhlbHBlciBmb3Igc3BlY2lmaWMgZXJyb3IgdHlwZXNcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFcnJvckJvdW5kYXJ5Rm9yVHlwZShlcnJvclR5cGU6IEVycm9yVHlwZSkge1xuICByZXR1cm4gZnVuY3Rpb24gRXJyb3JCb3VuZGFyeUZvclR5cGUoeyBjaGlsZHJlbiB9OiB7IGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUgfSkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVycm9yQm91bmRhcnksIHtcbiAgICAgIGZhbGxiYWNrOiAoZXJyb3I6IEVycm9yLCBlcnJvckluZm86IFJlYWN0LkVycm9ySW5mbykgPT4ge1xuICAgICAgICBjb25zdCBlbmhhbmNlZEVycm9yID0gY3JlYXRlRW5oYW5jZWRFcnJvcihcbiAgICAgICAgICBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgIGVycm9yVHlwZSxcbiAgICAgICAgICBFcnJvclNldmVyaXR5Lk1FRElVTSxcbiAgICAgICAgICB7IGNvbXBvbmVudFN0YWNrOiBlcnJvckluZm8uY29tcG9uZW50U3RhY2sgfVxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IFwiYmcteWVsbG93LTUwIGJvcmRlciBib3JkZXIteWVsbG93LTIwMCByb3VuZGVkLWxnIHAtNCBtLTJcIlxuICAgICAgICB9LCBbXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnaDQnLCB7XG4gICAgICAgICAgICBrZXk6ICd0aXRsZScsXG4gICAgICAgICAgICBjbGFzc05hbWU6IFwidGV4dC15ZWxsb3ctODAwIGZvbnQtbWVkaXVtIG1iLTJcIlxuICAgICAgICAgIH0sIGAke2Vycm9yVHlwZX0gRXJyb3JgKSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdwJywge1xuICAgICAgICAgICAga2V5OiAnbWVzc2FnZScsXG4gICAgICAgICAgICBjbGFzc05hbWU6IFwidGV4dC15ZWxsb3ctNzAwIHRleHQtc20gbWItM1wiXG4gICAgICAgICAgfSwgZW5oYW5jZWRFcnJvci51c2VyTWVzc2FnZSksXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnYnV0dG9uJywge1xuICAgICAgICAgICAga2V5OiAnYnV0dG9uJyxcbiAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKSxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJiZy15ZWxsb3ctNjAwIHRleHQtd2hpdGUgcHgtMyBweS0xIHJvdW5kZWQgdGV4dC1zbSBob3ZlcjpiZy15ZWxsb3ctNzAwIHRyYW5zaXRpb24tY29sb3JzXCJcbiAgICAgICAgICB9LCAnUmVsb2FkIFBhZ2UnKVxuICAgICAgICBdKTtcbiAgICAgIH1cbiAgICB9LCBjaGlsZHJlbik7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IEVycm9ySGFuZGxlcjsiXSwidmVyc2lvbiI6M30=