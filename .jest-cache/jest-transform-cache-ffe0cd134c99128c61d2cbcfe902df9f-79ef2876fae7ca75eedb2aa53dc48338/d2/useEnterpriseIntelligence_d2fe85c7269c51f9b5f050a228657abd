b977af81edd27da486ceb4606e54629a
"use strict";
/**
 * Enterprise Intelligence Integration Hook
 * Main Page Restoration - Task 3.8 Implementation
 *
 * React hook for integrating enterprise intelligence systems
 * with cuisine recommendation components.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useEnterpriseIntelligencePerformance = exports.useEnterpriseIntelligenceRecommendations = exports.useEnterpriseIntelligenceHealth = exports.useEnterpriseIntelligence = void 0;
const react_1 = require("react");
const logger_1 = require("@/utils/logger");
const EnterpriseIntelligenceIntegration_1 = require("@/services/EnterpriseIntelligenceIntegration");
// ========== HOOK IMPLEMENTATION ==========
function useEnterpriseIntelligence(config = {}) {
    // ========== STATE ==========
    var _a;
    const [state, setState] = (0, react_1.useState)({
        analysis: null,
        isAnalyzing: false,
        error: null,
        lastAnalyzed: null,
        performanceMetrics: {
            analysisCount: 0,
            averageExecutionTime: 0,
            cacheHitRate: 0,
            errorRate: 0
        }
    });
    const [lastAnalysisParams, setLastAnalysisParams] = (0, react_1.useState)(null);
    // ========== MEMOIZED VALUES ==========
    const intelligenceService = (0, react_1.useMemo)(() => {
        if (Object.keys(config).length > 0) {
            return new EnterpriseIntelligenceIntegration_1.EnterpriseIntelligenceIntegration(config);
        }
        return EnterpriseIntelligenceIntegration_1.enterpriseIntelligenceIntegration;
    }, [config]);
    const recommendations = (0, react_1.useMemo)(() => {
        if (!state.analysis) {
            return {
                recipe: [],
                ingredient: [],
                validation: [],
                safety: [],
                optimization: []
            };
        }
        return {
            recipe: state.analysis.recipeIntelligence.recommendations || [],
            ingredient: state.analysis.ingredientIntelligence.recommendations || [],
            validation: [
                ...state.analysis.validationIntelligence.dataIntegrity.issues,
                ...state.analysis.validationIntelligence.astrologicalConsistency.issues,
                ...state.analysis.validationIntelligence.elementalHarmony.issues
            ],
            safety: state.analysis.safetyIntelligence.fallbackStrategies || [],
            optimization: [
                ...state.analysis.optimizationRecommendations.performance.recommendations,
                ...state.analysis.optimizationRecommendations.accuracy.recommendations,
                ...state.analysis.optimizationRecommendations.userExperience.recommendations,
                ...state.analysis.optimizationRecommendations.systemIntegration.recommendations
            ]
        };
    }, [state.analysis]);
    const systemHealth = (0, react_1.useMemo)(() => {
        if (!state.analysis) {
            return {
                overall: 'fair',
                score: 0.7,
                issues: ['No analysis available'],
                warnings: []
            };
        }
        const analysis = state.analysis;
        const issues = [
            ...analysis.validationIntelligence.overallValidation.criticalIssues,
            ...(analysis.safetyIntelligence.riskAssessment.level === 'high' ||
                analysis.safetyIntelligence.riskAssessment.level === 'critical'
                ? ['High risk level detected'] : [])
        ];
        const warnings = [
            ...analysis.validationIntelligence.dataIntegrity.warnings,
            ...analysis.validationIntelligence.astrologicalConsistency.warnings,
            ...analysis.validationIntelligence.elementalHarmony.warnings,
            ...analysis.safetyIntelligence.monitoringAlerts
        ];
        return {
            overall: analysis.systemHealth,
            score: analysis.overallScore,
            issues,
            warnings
        };
    }, [state.analysis]);
    const isHealthy = (0, react_1.useMemo)(() => {
        return systemHealth.overall === 'excellent' || systemHealth.overall === 'good';
    }, [systemHealth.overall]);
    const needsAttention = (0, react_1.useMemo)(() => {
        var _a, _b;
        return systemHealth.issues.length > 0 ||
            systemHealth.overall === 'poor' ||
            (((_a = state.analysis) === null || _a === void 0 ? void 0 : _a.safetyIntelligence.riskAssessment.level) === 'high') ||
            (((_b = state.analysis) === null || _b === void 0 ? void 0 : _b.safetyIntelligence.riskAssessment.level) === 'critical');
    }, [systemHealth.issues.length, systemHealth.overall, (_a = state.analysis) === null || _a === void 0 ? void 0 : _a.safetyIntelligence.riskAssessment.level]);
    // ========== ACTIONS ==========
    const performAnalysis = (0, react_1.useCallback)(async (recipeData, ingredientData, astrologicalContext) => {
        setState(prev => ({
            ...prev,
            isAnalyzing: true,
            error: null
        }));
        try {
            logger_1.logger.info('[useEnterpriseIntelligence] Starting enterprise intelligence analysis');
            const analysis = await intelligenceService.performEnterpriseAnalysis(recipeData, ingredientData, astrologicalContext);
            // Update performance metrics
            const metrics = intelligenceService.getPerformanceMetrics();
            setState(prev => ({
                ...prev,
                analysis,
                isAnalyzing: false,
                error: null,
                lastAnalyzed: new Date(),
                performanceMetrics: metrics
            }));
            // Store parameters for retry functionality
            setLastAnalysisParams({ recipeData, ingredientData, astrologicalContext });
            logger_1.logger.info('[useEnterpriseIntelligence] Enterprise intelligence analysis completed', {
                overallScore: analysis.overallScore,
                systemHealth: analysis.systemHealth
            });
            return analysis;
        }
        catch (error) {
            const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
            setState(prev => ({
                ...prev,
                isAnalyzing: false,
                error: errorMessage,
                performanceMetrics: intelligenceService.getPerformanceMetrics()
            }));
            logger_1.logger.error('[useEnterpriseIntelligence] Enterprise intelligence analysis failed', error);
            return null;
        }
    }, [intelligenceService]);
    const clearAnalysis = (0, react_1.useCallback)(() => {
        setState(prev => ({
            ...prev,
            analysis: null,
            error: null,
            lastAnalyzed: null
        }));
        setLastAnalysisParams(null);
        logger_1.logger.info('[useEnterpriseIntelligence] Analysis cleared');
    }, []);
    const updateConfig = (0, react_1.useCallback)((newConfig) => {
        intelligenceService.updateConfig(newConfig);
        logger_1.logger.info('[useEnterpriseIntelligence] Configuration updated');
    }, [intelligenceService]);
    const clearCache = (0, react_1.useCallback)(() => {
        intelligenceService.clearCache();
        logger_1.logger.info('[useEnterpriseIntelligence] Cache cleared');
    }, [intelligenceService]);
    const resetMetrics = (0, react_1.useCallback)(() => {
        intelligenceService.resetMetrics();
        setState(prev => ({
            ...prev,
            performanceMetrics: {
                analysisCount: 0,
                averageExecutionTime: 0,
                cacheHitRate: 0,
                errorRate: 0
            }
        }));
        logger_1.logger.info('[useEnterpriseIntelligence] Metrics reset');
    }, [intelligenceService]);
    const retryAnalysis = (0, react_1.useCallback)(async () => {
        if (!lastAnalysisParams) {
            logger_1.logger.warn('[useEnterpriseIntelligence] No previous analysis parameters available for retry');
            return;
        }
        logger_1.logger.info('[useEnterpriseIntelligence] Retrying enterprise intelligence analysis');
        await performAnalysis(lastAnalysisParams.recipeData, lastAnalysisParams.ingredientData, lastAnalysisParams.astrologicalContext);
    }, [lastAnalysisParams, performAnalysis]);
    // ========== EFFECTS ==========
    // Auto-analyze effect
    (0, react_1.useEffect)(() => {
        if (config.autoAnalyze && lastAnalysisParams && !state.isAnalyzing) {
            const interval = config.analysisInterval || 30000; // Default 30 seconds
            const timer = setInterval(() => {
                if (config.enableRealTimeUpdates) {
                    retryAnalysis();
                }
            }, interval);
            return () => clearInterval(timer);
        }
    }, [config.autoAnalyze, config.analysisInterval, config.enableRealTimeUpdates, lastAnalysisParams, state.isAnalyzing, retryAnalysis]);
    // Performance metrics update effect
    (0, react_1.useEffect)(() => {
        const updateMetrics = () => {
            const metrics = intelligenceService.getPerformanceMetrics();
            setState(prev => ({
                ...prev,
                performanceMetrics: metrics
            }));
        };
        // Update metrics every 10 seconds
        const metricsTimer = setInterval(updateMetrics, 10000);
        return () => clearInterval(metricsTimer);
    }, [intelligenceService]);
    // ========== RETURN ==========
    return {
        state,
        actions: {
            performAnalysis,
            clearAnalysis,
            updateConfig,
            clearCache,
            resetMetrics,
            retryAnalysis
        },
        recommendations,
        systemHealth,
        isHealthy,
        needsAttention
    };
}
exports.useEnterpriseIntelligence = useEnterpriseIntelligence;
// ========== UTILITY HOOKS ==========
/**
 * Hook for monitoring enterprise intelligence health
 */
function useEnterpriseIntelligenceHealth() {
    const { systemHealth, isHealthy, needsAttention, state } = useEnterpriseIntelligence({
        enableRecipeIntelligence: true,
        enableIngredientIntelligence: true,
        enableValidationIntelligence: true,
        enableSafetyIntelligence: true,
        cacheResults: true
    });
    const healthStatus = (0, react_1.useMemo)(() => ({
        status: systemHealth.overall,
        score: systemHealth.score,
        isHealthy,
        needsAttention,
        criticalIssues: systemHealth.issues.filter(issue => issue.includes('critical')),
        warnings: systemHealth.warnings,
        lastChecked: state.lastAnalyzed,
        performanceIssues: state.performanceMetrics.errorRate > 0.1 ||
            state.performanceMetrics.averageExecutionTime > 5000
    }), [systemHealth, isHealthy, needsAttention, state]);
    return healthStatus;
}
exports.useEnterpriseIntelligenceHealth = useEnterpriseIntelligenceHealth;
/**
 * Hook for enterprise intelligence recommendations
 */
function useEnterpriseIntelligenceRecommendations() {
    const { recommendations, state } = useEnterpriseIntelligence({
        enableOptimizationRecommendations: true,
        cacheResults: true
    });
    const prioritizedRecommendations = (0, react_1.useMemo)(() => {
        const allRecommendations = [
            ...recommendations.recipe.map(r => ({ type: 'recipe', text: r, priority: 'medium' })),
            ...recommendations.ingredient.map(r => ({ type: 'ingredient', text: r, priority: 'medium' })),
            ...recommendations.validation.map(r => ({ type: 'validation', text: r, priority: 'high' })),
            ...recommendations.safety.map(r => ({ type: 'safety', text: r, priority: 'high' })),
            ...recommendations.optimization.map(r => ({ type: 'optimization', text: r, priority: 'low' }))
        ];
        // Sort by priority
        const priorityOrder = { high: 3, medium: 2, low: 1 };
        return allRecommendations.sort((a, b) => priorityOrder[b.priority] -
            priorityOrder[a.priority]);
    }, [recommendations]);
    return {
        recommendations: prioritizedRecommendations,
        hasRecommendations: prioritizedRecommendations.length > 0,
        highPriorityCount: prioritizedRecommendations.filter(r => r.priority === 'high').length,
        lastUpdated: state.lastAnalyzed
    };
}
exports.useEnterpriseIntelligenceRecommendations = useEnterpriseIntelligenceRecommendations;
/**
 * Hook for enterprise intelligence performance monitoring
 */
function useEnterpriseIntelligencePerformance() {
    const { state } = useEnterpriseIntelligence({
        cacheResults: true
    });
    const performanceStatus = (0, react_1.useMemo)(() => ({
        metrics: state.performanceMetrics,
        isPerformant: state.performanceMetrics.averageExecutionTime < 2000 &&
            state.performanceMetrics.errorRate < 0.05,
        cacheEfficiency: state.performanceMetrics.cacheHitRate,
        reliability: 1 - state.performanceMetrics.errorRate,
        averageResponseTime: state.performanceMetrics.averageExecutionTime,
        totalAnalyses: state.performanceMetrics.analysisCount
    }), [state.performanceMetrics]);
    return performanceStatus;
}
exports.useEnterpriseIntelligencePerformance = useEnterpriseIntelligencePerformance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,