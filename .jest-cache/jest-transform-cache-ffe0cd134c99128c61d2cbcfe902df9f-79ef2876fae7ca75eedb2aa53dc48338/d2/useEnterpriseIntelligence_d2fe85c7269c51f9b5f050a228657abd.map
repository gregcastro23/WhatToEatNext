{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/hooks/useEnterpriseIntelligence.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/hooks/useEnterpriseIntelligence.ts"],"sourcesContent":["/**\n * Enterprise Intelligence Integration Hook\n * Main Page Restoration - Task 3.8 Implementation\n * \n * React hook for integrating enterprise intelligence systems\n * with cuisine recommendation components.\n */\n\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport { logger } from '@/utils/logger';\nimport { \n  EnterpriseIntelligenceIntegration,\n  EnterpriseIntelligenceConfig,\n  EnterpriseIntelligenceAnalysis,\n  enterpriseIntelligenceIntegration\n} from '@/services/EnterpriseIntelligenceIntegration';\nimport type { ElementalProperties, ZodiacSign, LunarPhase } from '@/types/alchemy';\n\n// ========== INTERFACES ==========\n\nexport interface UseEnterpriseIntelligenceConfig extends Partial<EnterpriseIntelligenceConfig> {\n  autoAnalyze?: boolean;\n  analysisInterval?: number;\n  enableRealTimeUpdates?: boolean;\n}\n\nexport interface EnterpriseIntelligenceState {\n  analysis: EnterpriseIntelligenceAnalysis | null;\n  isAnalyzing: boolean;\n  error: string | null;\n  lastAnalyzed: Date | null;\n  performanceMetrics: {\n    analysisCount: number;\n    averageExecutionTime: number;\n    cacheHitRate: number;\n    errorRate: number;\n  };\n}\n\nexport interface EnterpriseIntelligenceActions {\n  performAnalysis: (\n    recipeData: any,\n    ingredientData: any,\n    astrologicalContext: {\n      zodiacSign: ZodiacSign;\n      lunarPhase: LunarPhase;\n      elementalProperties: ElementalProperties;\n      planetaryPositions?: any;\n    }\n  ) => Promise<EnterpriseIntelligenceAnalysis | null>;\n  clearAnalysis: () => void;\n  updateConfig: (config: Partial<EnterpriseIntelligenceConfig>) => void;\n  clearCache: () => void;\n  resetMetrics: () => void;\n  retryAnalysis: () => Promise<void>;\n}\n\nexport interface UseEnterpriseIntelligenceReturn {\n  state: EnterpriseIntelligenceState;\n  actions: EnterpriseIntelligenceActions;\n  recommendations: {\n    recipe: string[];\n    ingredient: string[];\n    validation: string[];\n    safety: string[];\n    optimization: string[];\n  };\n  systemHealth: {\n    overall: 'excellent' | 'good' | 'fair' | 'poor';\n    score: number;\n    issues: string[];\n    warnings: string[];\n  };\n  isHealthy: boolean;\n  needsAttention: boolean;\n}\n\n// ========== HOOK IMPLEMENTATION ==========\n\nexport function useEnterpriseIntelligence(\n  config: UseEnterpriseIntelligenceConfig = {}\n): UseEnterpriseIntelligenceReturn {\n  // ========== STATE ==========\n  \n  const [state, setState] = useState<EnterpriseIntelligenceState>({\n    analysis: null,\n    isAnalyzing: false,\n    error: null,\n    lastAnalyzed: null,\n    performanceMetrics: {\n      analysisCount: 0,\n      averageExecutionTime: 0,\n      cacheHitRate: 0,\n      errorRate: 0\n    }\n  });\n\n  const [lastAnalysisParams, setLastAnalysisParams] = useState<{\n    recipeData: any;\n    ingredientData: any;\n    astrologicalContext: any;\n  } | null>(null);\n\n  // ========== MEMOIZED VALUES ==========\n\n  const intelligenceService = useMemo(() => {\n    if (Object.keys(config).length > 0) {\n      return new EnterpriseIntelligenceIntegration(config);\n    }\n    return enterpriseIntelligenceIntegration;\n  }, [config]);\n\n  const recommendations = useMemo(() => {\n    if (!state.analysis) {\n      return {\n        recipe: [],\n        ingredient: [],\n        validation: [],\n        safety: [],\n        optimization: []\n      };\n    }\n\n    return {\n      recipe: state.analysis.recipeIntelligence.recommendations || [],\n      ingredient: state.analysis.ingredientIntelligence.recommendations || [],\n      validation: [\n        ...state.analysis.validationIntelligence.dataIntegrity.issues,\n        ...state.analysis.validationIntelligence.astrologicalConsistency.issues,\n        ...state.analysis.validationIntelligence.elementalHarmony.issues\n      ],\n      safety: state.analysis.safetyIntelligence.fallbackStrategies || [],\n      optimization: [\n        ...state.analysis.optimizationRecommendations.performance.recommendations,\n        ...state.analysis.optimizationRecommendations.accuracy.recommendations,\n        ...state.analysis.optimizationRecommendations.userExperience.recommendations,\n        ...state.analysis.optimizationRecommendations.systemIntegration.recommendations\n      ]\n    };\n  }, [state.analysis]);\n\n  const systemHealth = useMemo(() => {\n    if (!state.analysis) {\n      return {\n        overall: 'fair' as const,\n        score: 0.7,\n        issues: ['No analysis available'],\n        warnings: []\n      };\n    }\n\n    const analysis = state.analysis;\n    const issues = [\n      ...analysis.validationIntelligence.overallValidation.criticalIssues,\n      ...(analysis.safetyIntelligence.riskAssessment.level === 'high' || \n          analysis.safetyIntelligence.riskAssessment.level === 'critical' \n          ? ['High risk level detected'] : [])\n    ];\n\n    const warnings = [\n      ...analysis.validationIntelligence.dataIntegrity.warnings,\n      ...analysis.validationIntelligence.astrologicalConsistency.warnings,\n      ...analysis.validationIntelligence.elementalHarmony.warnings,\n      ...analysis.safetyIntelligence.monitoringAlerts\n    ];\n\n    return {\n      overall: analysis.systemHealth,\n      score: analysis.overallScore,\n      issues,\n      warnings\n    };\n  }, [state.analysis]);\n\n  const isHealthy = useMemo(() => {\n    return systemHealth.overall === 'excellent' || systemHealth.overall === 'good';\n  }, [systemHealth.overall]);\n\n  const needsAttention = useMemo(() => {\n    return systemHealth.issues.length > 0 || \n           systemHealth.overall === 'poor' ||\n           (state.analysis?.safetyIntelligence.riskAssessment.level === 'high') ||\n           (state.analysis?.safetyIntelligence.riskAssessment.level === 'critical');\n  }, [systemHealth.issues.length, systemHealth.overall, state.analysis?.safetyIntelligence.riskAssessment.level]);\n\n  // ========== ACTIONS ==========\n\n  const performAnalysis = useCallback(async (\n    recipeData: any,\n    ingredientData: any,\n    astrologicalContext: {\n      zodiacSign: ZodiacSign;\n      lunarPhase: LunarPhase;\n      elementalProperties: ElementalProperties;\n      planetaryPositions?: any;\n    }\n  ): Promise<EnterpriseIntelligenceAnalysis | null> => {\n    setState(prev => ({ \n      ...prev, \n      isAnalyzing: true, \n      error: null \n    }));\n\n    try {\n      logger.info('[useEnterpriseIntelligence] Starting enterprise intelligence analysis');\n      \n      const analysis = await intelligenceService.performEnterpriseAnalysis(\n        recipeData,\n        ingredientData,\n        astrologicalContext\n      );\n\n      // Update performance metrics\n      const metrics = intelligenceService.getPerformanceMetrics();\n\n      setState(prev => ({\n        ...prev,\n        analysis,\n        isAnalyzing: false,\n        error: null,\n        lastAnalyzed: new Date(),\n        performanceMetrics: metrics\n      }));\n\n      // Store parameters for retry functionality\n      setLastAnalysisParams({ recipeData, ingredientData, astrologicalContext });\n\n      logger.info('[useEnterpriseIntelligence] Enterprise intelligence analysis completed', {\n        overallScore: analysis.overallScore,\n        systemHealth: analysis.systemHealth\n      });\n\n      return analysis;\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n      \n      setState(prev => ({\n        ...prev,\n        isAnalyzing: false,\n        error: errorMessage,\n        performanceMetrics: intelligenceService.getPerformanceMetrics()\n      }));\n\n      logger.error('[useEnterpriseIntelligence] Enterprise intelligence analysis failed', error);\n      return null;\n    }\n  }, [intelligenceService]);\n\n  const clearAnalysis = useCallback(() => {\n    setState(prev => ({\n      ...prev,\n      analysis: null,\n      error: null,\n      lastAnalyzed: null\n    }));\n    setLastAnalysisParams(null);\n    logger.info('[useEnterpriseIntelligence] Analysis cleared');\n  }, []);\n\n  const updateConfig = useCallback((newConfig: Partial<EnterpriseIntelligenceConfig>) => {\n    intelligenceService.updateConfig(newConfig);\n    logger.info('[useEnterpriseIntelligence] Configuration updated');\n  }, [intelligenceService]);\n\n  const clearCache = useCallback(() => {\n    intelligenceService.clearCache();\n    logger.info('[useEnterpriseIntelligence] Cache cleared');\n  }, [intelligenceService]);\n\n  const resetMetrics = useCallback(() => {\n    intelligenceService.resetMetrics();\n    setState(prev => ({\n      ...prev,\n      performanceMetrics: {\n        analysisCount: 0,\n        averageExecutionTime: 0,\n        cacheHitRate: 0,\n        errorRate: 0\n      }\n    }));\n    logger.info('[useEnterpriseIntelligence] Metrics reset');\n  }, [intelligenceService]);\n\n  const retryAnalysis = useCallback(async () => {\n    if (!lastAnalysisParams) {\n      logger.warn('[useEnterpriseIntelligence] No previous analysis parameters available for retry');\n      return;\n    }\n\n    logger.info('[useEnterpriseIntelligence] Retrying enterprise intelligence analysis');\n    await performAnalysis(\n      lastAnalysisParams.recipeData,\n      lastAnalysisParams.ingredientData,\n      lastAnalysisParams.astrologicalContext\n    );\n  }, [lastAnalysisParams, performAnalysis]);\n\n  // ========== EFFECTS ==========\n\n  // Auto-analyze effect\n  useEffect(() => {\n    if (config.autoAnalyze && lastAnalysisParams && !state.isAnalyzing) {\n      const interval = config.analysisInterval || 30000; // Default 30 seconds\n      \n      const timer = setInterval(() => {\n        if (config.enableRealTimeUpdates) {\n          retryAnalysis();\n        }\n      }, interval);\n\n      return () => clearInterval(timer);\n    }\n  }, [config.autoAnalyze, config.analysisInterval, config.enableRealTimeUpdates, lastAnalysisParams, state.isAnalyzing, retryAnalysis]);\n\n  // Performance metrics update effect\n  useEffect(() => {\n    const updateMetrics = () => {\n      const metrics = intelligenceService.getPerformanceMetrics();\n      setState(prev => ({\n        ...prev,\n        performanceMetrics: metrics\n      }));\n    };\n\n    // Update metrics every 10 seconds\n    const metricsTimer = setInterval(updateMetrics, 10000);\n    \n    return () => clearInterval(metricsTimer);\n  }, [intelligenceService]);\n\n  // ========== RETURN ==========\n\n  return {\n    state,\n    actions: {\n      performAnalysis,\n      clearAnalysis,\n      updateConfig,\n      clearCache,\n      resetMetrics,\n      retryAnalysis\n    },\n    recommendations,\n    systemHealth,\n    isHealthy,\n    needsAttention\n  };\n}\n\n// ========== UTILITY HOOKS ==========\n\n/**\n * Hook for monitoring enterprise intelligence health\n */\nexport function useEnterpriseIntelligenceHealth() {\n  const { systemHealth, isHealthy, needsAttention, state } = useEnterpriseIntelligence({\n    enableRecipeIntelligence: true,\n    enableIngredientIntelligence: true,\n    enableValidationIntelligence: true,\n    enableSafetyIntelligence: true,\n    cacheResults: true\n  });\n\n  const healthStatus = useMemo(() => ({\n    status: systemHealth.overall,\n    score: systemHealth.score,\n    isHealthy,\n    needsAttention,\n    criticalIssues: systemHealth.issues.filter(issue => issue.includes('critical')),\n    warnings: systemHealth.warnings,\n    lastChecked: state.lastAnalyzed,\n    performanceIssues: state.performanceMetrics.errorRate > 0.1 || \n                      state.performanceMetrics.averageExecutionTime > 5000\n  }), [systemHealth, isHealthy, needsAttention, state]);\n\n  return healthStatus;\n}\n\n/**\n * Hook for enterprise intelligence recommendations\n */\nexport function useEnterpriseIntelligenceRecommendations() {\n  const { recommendations, state } = useEnterpriseIntelligence({\n    enableOptimizationRecommendations: true,\n    cacheResults: true\n  });\n\n  const prioritizedRecommendations = useMemo(() => {\n    const allRecommendations = [\n      ...recommendations.recipe.map(r => ({ type: 'recipe', text: r, priority: 'medium' })),\n      ...recommendations.ingredient.map(r => ({ type: 'ingredient', text: r, priority: 'medium' })),\n      ...recommendations.validation.map(r => ({ type: 'validation', text: r, priority: 'high' })),\n      ...recommendations.safety.map(r => ({ type: 'safety', text: r, priority: 'high' })),\n      ...recommendations.optimization.map(r => ({ type: 'optimization', text: r, priority: 'low' }))\n    ];\n\n    // Sort by priority\n    const priorityOrder = { high: 3, medium: 2, low: 1 };\n    return allRecommendations.sort((a, b) => \n      priorityOrder[b.priority as keyof typeof priorityOrder] - \n      priorityOrder[a.priority as keyof typeof priorityOrder]\n    );\n  }, [recommendations]);\n\n  return {\n    recommendations: prioritizedRecommendations,\n    hasRecommendations: prioritizedRecommendations.length > 0,\n    highPriorityCount: prioritizedRecommendations.filter(r => r.priority === 'high').length,\n    lastUpdated: state.lastAnalyzed\n  };\n}\n\n/**\n * Hook for enterprise intelligence performance monitoring\n */\nexport function useEnterpriseIntelligencePerformance() {\n  const { state } = useEnterpriseIntelligence({\n    cacheResults: true\n  });\n\n  const performanceStatus = useMemo(() => ({\n    metrics: state.performanceMetrics,\n    isPerformant: state.performanceMetrics.averageExecutionTime < 2000 && \n                  state.performanceMetrics.errorRate < 0.05,\n    cacheEfficiency: state.performanceMetrics.cacheHitRate,\n    reliability: 1 - state.performanceMetrics.errorRate,\n    averageResponseTime: state.performanceMetrics.averageExecutionTime,\n    totalAnalyses: state.performanceMetrics.analysisCount\n  }), [state.performanceMetrics]);\n\n  return performanceStatus;\n}"],"version":3}