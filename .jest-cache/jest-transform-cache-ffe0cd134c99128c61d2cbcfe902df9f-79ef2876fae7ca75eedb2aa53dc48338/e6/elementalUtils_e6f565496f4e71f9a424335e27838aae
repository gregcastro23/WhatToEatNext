951e4375a0906110fe718bb8c516d1a8
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDominantElement = exports.calculateElementalCompatibility = exports.scaleElementalProperties = exports.mergeElementalProperties = exports.getElementalProperty = exports.isElementalProperties = exports.createElementalProperties = void 0;
/**
 * Creates a properly initialized ElementalProperties object with default values
 */
function createElementalProperties(props) {
    var _a, _b, _c, _d;
    return { Fire: ((_a = props === null || props === void 0 ? void 0 : props.Fire) !== null && _a !== void 0 ? _a : 0), Water: ((_b = props === null || props === void 0 ? void 0 : props.Water) !== null && _b !== void 0 ? _b : 0), Earth: ((_c = props === null || props === void 0 ? void 0 : props.Earth) !== null && _c !== void 0 ? _c : 0), Air: ((_d = props === null || props === void 0 ? void 0 : props.Air) !== null && _d !== void 0 ? _d : 0) };
}
exports.createElementalProperties = createElementalProperties;
/**
 * Type guard to check if an object is a valid ElementalProperties object
 */
function isElementalProperties(obj) {
    if (!obj || typeof obj !== 'object')
        return false;
    return (typeof obj.Fire === 'number' &&
        typeof obj.Water === 'number' &&
        typeof obj.Earth === 'number' &&
        typeof obj.Air === 'number');
}
exports.isElementalProperties = isElementalProperties;
/**
 * Safely access elemental properties with fallback to default values
 */
function getElementalProperty(props, element) {
    var _a;
    if (!props)
        return 0;
    return (_a = props[element]) !== null && _a !== void 0 ? _a : 0;
}
exports.getElementalProperty = getElementalProperty;
/**
 * Merge two ElementalProperties objects
 */
function mergeElementalProperties(base, override) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    return createElementalProperties({ Fire: (((_a = base === null || base === void 0 ? void 0 : base.Fire) !== null && _a !== void 0 ? _a : 0)) + (((_b = override === null || override === void 0 ? void 0 : override.Fire) !== null && _b !== void 0 ? _b : 0)), Water: (((_c = base === null || base === void 0 ? void 0 : base.Water) !== null && _c !== void 0 ? _c : 0)) + (((_d = override === null || override === void 0 ? void 0 : override.Water) !== null && _d !== void 0 ? _d : 0)), Earth: (((_e = base === null || base === void 0 ? void 0 : base.Earth) !== null && _e !== void 0 ? _e : 0)) + (((_f = override === null || override === void 0 ? void 0 : override.Earth) !== null && _f !== void 0 ? _f : 0)), Air: (((_g = base === null || base === void 0 ? void 0 : base.Air) !== null && _g !== void 0 ? _g : 0)) + (((_h = override === null || override === void 0 ? void 0 : override.Air) !== null && _h !== void 0 ? _h : 0)) });
}
exports.mergeElementalProperties = mergeElementalProperties;
/**
 * Scale elemental properties by a factor
 */
function scaleElementalProperties(props, factor) {
    var _a, _b, _c, _d;
    if (!props)
        return createElementalProperties({ Fire: 0, Water: 0, Earth: 0, Air: 0 });
    return createElementalProperties({ Fire: (((_a = props === null || props === void 0 ? void 0 : props.Fire) !== null && _a !== void 0 ? _a : 0)) * factor, Water: (((_b = props === null || props === void 0 ? void 0 : props.Water) !== null && _b !== void 0 ? _b : 0)) * factor, Earth: (((_c = props === null || props === void 0 ? void 0 : props.Earth) !== null && _c !== void 0 ? _c : 0)) * factor, Air: (((_d = props === null || props === void 0 ? void 0 : props.Air) !== null && _d !== void 0 ? _d : 0)) * factor });
}
exports.scaleElementalProperties = scaleElementalProperties;
/**
 * Calculate compatibility score between two ElementalProperties objects
 * Following our elemental principles:
 * 1. Elements reinforce themselves most strongly
 * 2. All element combinations have good compatibility (0.7+)
 * 3. No opposing elements - all elements work together harmoniously
 *
 * @param source - The source elemental properties
 * @param target - The target elemental properties to compare against
 * @returns A compatibility score between 0 and 1
 */
function calculateElementalCompatibility(source, target) {
    // Return default score if either source or target is missing
    if (!source || !target)
        return 0.5;
    // Ensure we have complete properties objects
    const sourceProps = createElementalProperties(source);
    const targetProps = createElementalProperties(target);
    // Define element compatibility scores (same elements have highest compatibility)
    const compatibilityScores = { Fire: { Fire: 0.9, Water: 0.7, Earth: 0.7, Air: 0.8 },
        Water: { Water: 0.9, Fire: 0.7, Earth: 0.8, Air: 0.7 },
        Earth: { Earth: 0.9, Fire: 0.7, Water: 0.8, Air: 0.7 },
        Air: { Air: 0.9, Fire: 0.8, Water: 0.7, Earth: 0.7 }
    };
    // Get dominant elements for each profile
    const sourceDominant = getDominantElement(sourceProps);
    const targetDominant = getDominantElement(targetProps);
    // Calculate direct compatibility between dominant elements
    const baseCompatibility = compatibilityScores[sourceDominant][targetDominant] || 0.7;
    // Calculate weighted compatibility across all elements
    let weightedSum = 0;
    let totalWeight = 0;
    const elements = ['Fire', 'Water', 'Earth', 'Air'];
    for (const sourceElement of elements) {
        const sourceValue = sourceProps[sourceElement];
        if (sourceValue <= 0)
            continue; // Skip elements with no presence
        // Weight by the element's prominence in the source
        const weight = sourceValue;
        // For each source element, calculate its compatibility with each target element
        let bestCompatibility = 0;
        for (const targetElement of elements) {
            const targetValue = targetProps[targetElement];
            if (targetValue <= 0)
                continue; // Skip elements with no presence
            // Get compatibility between these two elements
            const elementCompatibility = compatibilityScores[sourceElement][targetElement] || 0.7;
            // Scale by the target element's prominence
            const scaledCompatibility = elementCompatibility * targetValue;
            bestCompatibility = Math.max(bestCompatibility, scaledCompatibility);
        }
        weightedSum += bestCompatibility * weight;
        totalWeight += weight;
    }
    // Calculate final score - ensure minimum of 0.7 following our principles
    const finalScore = totalWeight > 0
        ? Math.max(0.7, weightedSum / totalWeight)
        : 0.7;
    return finalScore;
}
exports.calculateElementalCompatibility = calculateElementalCompatibility;
/**
 * Get the dominant element from elemental properties
 */
function getDominantElement(properties) {
    return Object.entries(properties)
        .reduce((max, [element, value]) => value > max.value ? { element: element, value } : max, { element: 'Fire', value: 0 }).element;
}
exports.getDominantElement = getDominantElement;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,