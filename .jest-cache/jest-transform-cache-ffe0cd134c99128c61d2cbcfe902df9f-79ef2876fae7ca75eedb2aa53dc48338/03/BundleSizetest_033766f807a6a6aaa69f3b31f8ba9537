f71968d5f82da4ffd39e85fcd21e1c65
"use strict";
/**
 * Performance Tests for Bundle Size Regression Testing
 * Perfect Codebase Campaign - Bundle Size Performance Testing
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock dependencies
jest.mock('child_process');
jest.mock('fs');
const child_process_1 = require("child_process");
const fs = __importStar(require("fs"));
const campaign_1 = require("../../../../types/campaign");
const CampaignController_1 = require("../../CampaignController");
const ProgressTracker_1 = require("../../ProgressTracker");
const mockExecSync = child_process_1.execSync;
const mockFs = fs;
describe('Bundle Size Performance Tests', () => {
    let progressTracker;
    let campaignController;
    let mockConfig;
    beforeEach(() => {
        const safetySettings = {
            maxFilesPerBatch: 25,
            buildValidationFrequency: 5,
            testValidationFrequency: 10,
            corruptionDetectionEnabled: true,
            automaticRollbackEnabled: true,
            stashRetentionDays: 7
        };
        mockConfig = {
            phases: [{
                    id: 'bundle-test-phase',
                    name: 'Bundle Test Phase',
                    description: 'Phase for bundle size testing',
                    tools: [{
                            scriptPath: 'scripts/bundle/optimize-script.js',
                            parameters: { optimizeBundle: true },
                            batchSize: 50,
                            safetyLevel: campaign_1.SafetyLevel.MEDIUM
                        }],
                    successCriteria: { buildTime: 10 },
                    safetyCheckpoints: []
                }],
            safetySettings,
            progressTargets: { typeScriptErrors: 0, lintingWarnings: 0, buildTime: 10, enterpriseSystems: 200 },
            toolConfiguration: {
                enhancedErrorFixer: 'scripts/typescript-fixes/fix-typescript-errors-enhanced-v3.js',
                explicitAnyFixer: 'scripts/typescript-fixes/fix-explicit-any-systematic.js',
                unusedVariablesFixer: 'scripts/typescript-fixes/fix-unused-variables-enhanced.js',
                consoleStatementFixer: 'scripts/lint-fixes/fix-console-statements-only.js'
            }
        };
        progressTracker = new ProgressTracker_1.ProgressTracker();
        campaignController = new CampaignController_1.CampaignController(mockConfig);
        // Reset mocks
        jest.clearAllMocks();
        // Default mock implementations
        mockExecSync.mockReturnValue('');
        mockFs.existsSync.mockReturnValue(true);
    });
    describe('Bundle Size Validation', () => {
        it('should validate bundle size under 420kB target', async () => {
            // Mock optimal bundle size
            mockFs.existsSync.mockImplementation((path) => {
                return path === '.next' || path === 'dist';
            });
            mockExecSync.mockImplementation((command) => {
                const cmd = command.toString();
                if (cmd.includes('du -sk .next')) {
                    return '300'; // 300kB
                }
                if (cmd.includes('du -sk dist')) {
                    return '100'; // 100kB
                }
                return '';
            });
            const bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(400); // 300 + 100 = 400kB
            expect(bundleSize).toBeLessThan(420); // Under 420kB target
        });
        it('should detect bundle size regression', async () => {
            // Mock bundle size that exceeds target
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation((command) => {
                if (command.toString().includes('du -sk')) {
                    return '450'; // 450kB - exceeds 420kB target
                }
                return '';
            });
            const bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(450);
            expect(bundleSize).toBeGreaterThan(420); // Exceeds target
        });
        it('should handle missing build directories', async () => {
            mockFs.existsSync.mockReturnValue(false);
            const bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(0); // No build directories found
        });
        it('should track bundle size trends over campaign execution', async () => {
            const bundleSizes = [];
            let optimizationStep = 0;
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation((command) => {
                if (command.toString().includes('du -sk')) {
                    optimizationStep++;
                    // Simulate bundle size optimization over time
                    const baseSize = 500; // Start with large bundle
                    const optimization = Math.min(100, optimizationStep * 20); // Up to 100kB reduction
                    return Math.max(350, baseSize - optimization).toString();
                }
                return '';
            });
            // Collect bundle sizes over multiple measurements
            for (let i = 0; i < 6; i++) {
                const bundleSize = await progressTracker.getBundleSize();
                bundleSizes.push(bundleSize);
            }
            expect(bundleSizes.length).toBe(6);
            // Bundle size should decrease over time (optimization)
            const firstSize = bundleSizes[0];
            const lastSize = bundleSizes[bundleSizes.length - 1];
            expect(lastSize).toBeLessThan(firstSize);
            expect(lastSize).toBeLessThan(420); // Should reach target
        });
    });
    describe('Bundle Composition Analysis', () => {
        it('should analyze bundle composition across different build outputs', async () => {
            const buildOutputs = [
                { dir: '.next', expectedSize: 250 },
                { dir: 'dist', expectedSize: 120 },
                { dir: 'build', expectedSize: 50 }
            ];
            mockFs.existsSync.mockImplementation((path) => {
                return buildOutputs.some(output => output.dir === path);
            });
            mockExecSync.mockImplementation((command) => {
                const cmd = command.toString();
                for (const output of buildOutputs) {
                    if (cmd.includes(`du -sk ${output.dir}`)) {
                        return output.expectedSize.toString();
                    }
                }
                return '';
            });
            const bundleSize = await progressTracker.getBundleSize();
            const expectedTotal = buildOutputs.reduce((sum, output) => sum + output.expectedSize, 0);
            expect(bundleSize).toBe(expectedTotal); // 250 + 120 + 50 = 420kB
            expect(bundleSize).toBeLessThanOrEqual(420); // At target limit
        });
        it('should handle partial build outputs', async () => {
            // Only some build directories exist
            mockFs.existsSync.mockImplementation((path) => {
                return path === '.next'; // Only .next exists
            });
            mockExecSync.mockImplementation((command) => {
                if (command.toString().includes('du -sk .next')) {
                    return '380'; // 380kB
                }
                return '';
            });
            const bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(380);
            expect(bundleSize).toBeLessThan(420); // Under target
        });
        it('should detect bundle bloat in specific directories', async () => {
            const bloatedBuild = {
                '.next': 350,
                'dist': 200,
                'build': 50 // Normal size
            };
            mockFs.existsSync.mockImplementation((path) => {
                return Object.keys(bloatedBuild).includes(path);
            });
            mockExecSync.mockImplementation((command) => {
                const cmd = command.toString();
                for (const [dir, size] of Object.entries(bloatedBuild)) {
                    if (cmd.includes(`du -sk ${dir}`)) {
                        return size.toString();
                    }
                }
                return '';
            });
            const bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(600); // 350 + 200 + 50 = 600kB
            expect(bundleSize).toBeGreaterThan(420); // Exceeds target due to bloat
        });
    });
    describe('Bundle Optimization Performance', () => {
        it('should validate lazy loading impact on bundle size', async () => {
            let lazyLoadingEnabled = false;
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation((command) => {
                if (command.toString().includes('du -sk')) {
                    // Lazy loading should reduce main bundle size
                    return lazyLoadingEnabled ? '320' : '450';
                }
                return '';
            });
            // Before lazy loading
            let bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(450);
            expect(bundleSize).toBeGreaterThan(420); // Exceeds target
            // After enabling lazy loading
            lazyLoadingEnabled = true;
            bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(320);
            expect(bundleSize).toBeLessThan(420); // Under target
        });
        it('should validate tree shaking effectiveness', async () => {
            let treeShakingEnabled = false;
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation((command) => {
                if (command.toString().includes('du -sk')) {
                    // Tree shaking should remove unused code
                    return treeShakingEnabled ? '380' : '480';
                }
                return '';
            });
            // Before tree shaking
            let bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(480);
            expect(bundleSize).toBeGreaterThan(420); // Exceeds target
            // After enabling tree shaking
            treeShakingEnabled = true;
            bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(380);
            expect(bundleSize).toBeLessThan(420); // Under target
        });
        it('should validate code splitting impact', async () => {
            let codeSplittingEnabled = false;
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation((command) => {
                if (command.toString().includes('du -sk')) {
                    if (codeSplittingEnabled) {
                        // Code splitting creates multiple smaller bundles
                        // Main bundle should be smaller
                        return '280';
                    }
                    else {
                        // Single large bundle
                        return '440';
                    }
                }
                return '';
            });
            // Before code splitting
            let bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(440);
            expect(bundleSize).toBeGreaterThan(420); // Exceeds target
            // After enabling code splitting
            codeSplittingEnabled = true;
            bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(280);
            expect(bundleSize).toBeLessThan(420); // Well under target
        });
        it('should validate compression effectiveness', async () => {
            let compressionEnabled = false;
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation((command) => {
                if (command.toString().includes('du -sk')) {
                    // Compression should reduce bundle size significantly
                    return compressionEnabled ? '300' : '500';
                }
                return '';
            });
            // Before compression
            let bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(500);
            expect(bundleSize).toBeGreaterThan(420); // Exceeds target
            // After enabling compression
            compressionEnabled = true;
            bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(300);
            expect(bundleSize).toBeLessThan(420); // Well under target
        });
    });
    describe('Bundle Size Regression Testing', () => {
        it('should detect bundle size regression during campaign', async () => {
            const phase = mockConfig.phases[0];
            let executionCount = 0;
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation((command) => {
                if (command.toString().includes('du -sk')) {
                    executionCount++;
                    // Simulate bundle size regression over time
                    const baseSize = 350;
                    const regression = executionCount * 25; // 25kB increase per execution
                    return (baseSize + regression).toString();
                }
                return '';
            });
            const bundleSizes = [];
            // Execute phase multiple times to simulate regression
            for (let i = 0; i < 4; i++) {
                await campaignController.executePhase(phase);
                const bundleSize = await progressTracker.getBundleSize();
                bundleSizes.push(bundleSize);
            }
            expect(bundleSizes.length).toBe(4);
            // Should detect increasing bundle size (regression)
            const firstSize = bundleSizes[0];
            const lastSize = bundleSizes[bundleSizes.length - 1];
            expect(lastSize).toBeGreaterThan(firstSize);
            expect(lastSize).toBeGreaterThan(420); // Should exceed target
        });
        it('should validate bundle size improvements during optimization', async () => {
            const phase = mockConfig.phases[0];
            let optimizationStep = 0;
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation((command) => {
                if (command.toString().includes('du -sk')) {
                    optimizationStep++;
                    // Simulate bundle size optimization
                    const baseSize = 500;
                    const optimization = optimizationStep * 30; // 30kB reduction per step
                    return Math.max(320, baseSize - optimization).toString();
                }
                return '';
            });
            const bundleSizes = [];
            // Execute optimization phases
            for (let i = 0; i < 5; i++) {
                await campaignController.executePhase(phase);
                const bundleSize = await progressTracker.getBundleSize();
                bundleSizes.push(bundleSize);
            }
            expect(bundleSizes.length).toBe(5);
            // Should show decreasing bundle size (optimization)
            const firstSize = bundleSizes[0];
            const lastSize = bundleSizes[bundleSizes.length - 1];
            expect(lastSize).toBeLessThan(firstSize);
            expect(lastSize).toBeLessThan(420); // Should be under target
        });
        it('should track bundle size across different optimization strategies', async () => {
            const optimizationStrategies = [
                { name: 'baseline', expectedSize: 480 },
                { name: 'minification', expectedSize: 420 },
                { name: 'tree-shaking', expectedSize: 380 },
                { name: 'code-splitting', expectedSize: 340 },
                { name: 'compression', expectedSize: 300 }
            ];
            const results = [];
            for (const strategy of optimizationStrategies) {
                mockFs.existsSync.mockReturnValue(true);
                mockExecSync.mockImplementation((command) => {
                    if (command.toString().includes('du -sk')) {
                        return strategy.expectedSize.toString();
                    }
                    return '';
                });
                const bundleSize = await progressTracker.getBundleSize();
                results.push({
                    strategy: strategy.name,
                    size: bundleSize,
                    underTarget: bundleSize < 420
                });
            }
            expect(results.length).toBe(5);
            // Baseline should exceed target
            expect(results[0].underTarget).toBe(false);
            expect(results[0].size).toBe(480);
            // Progressive optimization should reduce bundle size
            for (let i = 1; i < results.length; i++) {
                expect(results[i].size).toBeLessThan(results[i - 1].size);
            }
            // Final optimizations should be under target
            expect(results[results.length - 1].underTarget).toBe(true);
            expect(results[results.length - 1].size).toBe(300);
        });
    });
    describe('Bundle Size Performance Benchmarks', () => {
        it('should benchmark bundle analysis performance', async () => {
            const analysisTimes = [];
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation((command) => {
                if (command.toString().includes('du -sk')) {
                    const startTime = Date.now();
                    // Simulate bundle analysis time
                    const delay = 20 + Math.random() * 30; // 20-50ms
                    const endTime = startTime + delay;
                    while (Date.now() < endTime) {
                        // Busy wait
                    }
                    analysisTimes.push(Date.now() - startTime);
                    return '400';
                }
                return '';
            });
            // Perform multiple bundle size analyses
            for (let i = 0; i < 10; i++) {
                await progressTracker.getBundleSize();
            }
            expect(analysisTimes.length).toBe(10);
            expect(analysisTimes.every(time => time > 0)).toBe(true);
            // Average analysis time should be reasonable
            const averageTime = analysisTimes.reduce((sum, time) => sum + time, 0) / analysisTimes.length;
            expect(averageTime).toBeLessThan(100); // Should be under 100ms
        });
        it('should handle large bundle analysis efficiently', async () => {
            // Mock very large bundle
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation((command) => {
                if (command.toString().includes('du -sk')) {
                    // Simulate longer analysis time for large bundle
                    const delay = 50; // 50ms for large bundle
                    const endTime = Date.now() + delay;
                    while (Date.now() < endTime) {
                        // Busy wait
                    }
                    return '2000'; // 2MB bundle - very large
                }
                return '';
            });
            const startTime = Date.now();
            const bundleSize = await progressTracker.getBundleSize();
            const analysisTime = Date.now() - startTime;
            expect(bundleSize).toBe(2000);
            expect(bundleSize).toBeGreaterThan(420); // Significantly exceeds target
            expect(analysisTime).toBeLessThan(200); // Should still be reasonably fast
        });
        it('should benchmark concurrent bundle analyses', async () => {
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation((command) => {
                if (command.toString().includes('du -sk')) {
                    // Simulate concurrent analysis
                    const delay = 30 + Math.random() * 20; // 30-50ms
                    const endTime = Date.now() + delay;
                    while (Date.now() < endTime) {
                        // Busy wait
                    }
                    return '400';
                }
                return '';
            });
            // Run concurrent bundle size analyses
            const promises = Array.from({ length: 5 }, () => progressTracker.getBundleSize());
            const startTime = Date.now();
            const results = await Promise.all(promises);
            const totalTime = Date.now() - startTime;
            expect(results.length).toBe(5);
            expect(results.every(size => size === 400)).toBe(true);
            expect(totalTime).toBeLessThan(500); // Should complete efficiently
        });
    });
    describe('Bundle Size Monitoring Integration', () => {
        it('should integrate bundle size monitoring with campaign execution', async () => {
            const phase = mockConfig.phases[0];
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation((command) => {
                if (command.toString().includes('du -sk')) {
                    return '390'; // Under target
                }
                return '';
            });
            // Mock campaign execution with bundle monitoring
            jest.spyOn(campaignController, 'getCurrentMetrics').mockImplementation(async () => {
                const bundleSize = await progressTracker.getBundleSize();
                return {
                    typeScriptErrors: { current: 86, target: 0, reduction: 0, percentage: 0 },
                    lintingWarnings: { current: 4506, target: 0, reduction: 0, percentage: 0 },
                    buildPerformance: { currentTime: 8.5, targetTime: 10, cacheHitRate: 0.8, memoryUsage: 45 },
                    enterpriseSystems: { current: 0, target: 200, transformedExports: 0 },
                    bundleSize: bundleSize // Additional bundle size tracking
                };
            });
            const result = await campaignController.executePhase(phase);
            expect(result.success).toBe(true);
            // Verify bundle size is monitored
            const bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(390);
            expect(bundleSize).toBeLessThan(420);
        });
        it('should alert on bundle size threshold violations', async () => {
            const thresholds = {
                warning: 400,
                critical: 420 // 420kB critical threshold
            };
            const testSizes = [350, 410, 450]; // Under warning, over warning, over critical
            const alerts = [];
            for (const testSize of testSizes) {
                mockFs.existsSync.mockReturnValue(true);
                mockExecSync.mockImplementation((command) => {
                    if (command.toString().includes('du -sk')) {
                        return testSize.toString();
                    }
                    return '';
                });
                const bundleSize = await progressTracker.getBundleSize();
                if (bundleSize > thresholds.critical) {
                    alerts.push({ size: bundleSize, level: 'critical' });
                }
                else if (bundleSize > thresholds.warning) {
                    alerts.push({ size: bundleSize, level: 'warning' });
                }
            }
            expect(alerts.length).toBe(2); // Should have warning and critical alerts
            expect(alerts[0].level).toBe('warning');
            expect(alerts[0].size).toBe(410);
            expect(alerts[1].level).toBe('critical');
            expect(alerts[1].size).toBe(450);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9zZXJ2aWNlcy9jYW1wYWlnbi9fX3Rlc3RzX18vcGVyZm9ybWFuY2UvQnVuZGxlU2l6ZS50ZXN0LnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFhSCxvQkFBb0I7QUFDcEIsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBYmhCLGlEQUF5QztBQUN6Qyx1Q0FBeUI7QUFFekIseURBSW9DO0FBQ3BDLGlFQUE4RDtBQUM5RCwyREFBd0Q7QUFNeEQsTUFBTSxZQUFZLEdBQUcsd0JBQWdELENBQUM7QUFDdEUsTUFBTSxNQUFNLEdBQUcsRUFBNEIsQ0FBQztBQUU1QyxRQUFRLENBQUMsK0JBQStCLEVBQUUsR0FBRyxFQUFFO0lBQzdDLElBQUksZUFBZ0MsQ0FBQztJQUNyQyxJQUFJLGtCQUFzQyxDQUFDO0lBQzNDLElBQUksVUFBMEIsQ0FBQztJQUUvQixVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsTUFBTSxjQUFjLEdBQW1CO1lBQ3JDLGdCQUFnQixFQUFFLEVBQUU7WUFDcEIsd0JBQXdCLEVBQUUsQ0FBQztZQUMzQix1QkFBdUIsRUFBRSxFQUFFO1lBQzNCLDBCQUEwQixFQUFFLElBQUk7WUFDaEMsd0JBQXdCLEVBQUUsSUFBSTtZQUM5QixrQkFBa0IsRUFBRSxDQUFDO1NBQ3RCLENBQUM7UUFFRixVQUFVLEdBQUc7WUFDWCxNQUFNLEVBQUUsQ0FBQztvQkFDUCxFQUFFLEVBQUUsbUJBQW1CO29CQUN2QixJQUFJLEVBQUUsbUJBQW1CO29CQUN6QixXQUFXLEVBQUUsK0JBQStCO29CQUM1QyxLQUFLLEVBQUUsQ0FBQzs0QkFDTixVQUFVLEVBQUUsbUNBQW1DOzRCQUMvQyxVQUFVLEVBQUUsRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFOzRCQUNwQyxTQUFTLEVBQUUsRUFB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YUFDRjtZQUVELE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsMENBQTBDO1lBQ3pFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3hDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3pDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ25DLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvR3JlZ0Nhc3Ryby9EZXNrdG9wL1doYXRUb0VhdE5leHQvc3JjL3NlcnZpY2VzL2NhbXBhaWduL19fdGVzdHNfXy9wZXJmb3JtYW5jZS9CdW5kbGVTaXplLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBQZXJmb3JtYW5jZSBUZXN0cyBmb3IgQnVuZGxlIFNpemUgUmVncmVzc2lvbiBUZXN0aW5nXG4gKiBQZXJmZWN0IENvZGViYXNlIENhbXBhaWduIC0gQnVuZGxlIFNpemUgUGVyZm9ybWFuY2UgVGVzdGluZ1xuICovXG5cbmltcG9ydCB7IGV4ZWNTeW5jIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5cbmltcG9ydCB7XG4gIENhbXBhaWduQ29uZmlnLFxuICBTYWZldHlTZXR0aW5ncyxcbiAgU2FmZXR5TGV2ZWxcbn0gZnJvbSAnLi4vLi4vLi4vLi4vdHlwZXMvY2FtcGFpZ24nO1xuaW1wb3J0IHsgQ2FtcGFpZ25Db250cm9sbGVyIH0gZnJvbSAnLi4vLi4vQ2FtcGFpZ25Db250cm9sbGVyJztcbmltcG9ydCB7IFByb2dyZXNzVHJhY2tlciB9IGZyb20gJy4uLy4uL1Byb2dyZXNzVHJhY2tlcic7XG5cbi8vIE1vY2sgZGVwZW5kZW5jaWVzXG5qZXN0Lm1vY2soJ2NoaWxkX3Byb2Nlc3MnKTtcbmplc3QubW9jaygnZnMnKTtcblxuY29uc3QgbW9ja0V4ZWNTeW5jID0gZXhlY1N5bmMgYXMgamVzdC5Nb2NrZWRGdW5jdGlvbjx0eXBlb2YgZXhlY1N5bmM+O1xuY29uc3QgbW9ja0ZzID0gZnMgYXMgamVzdC5Nb2NrZWQ8dHlwZW9mIGZzPjtcblxuZGVzY3JpYmUoJ0J1bmRsZSBTaXplIFBlcmZvcm1hbmNlIFRlc3RzJywgKCkgPT4ge1xuICBsZXQgcHJvZ3Jlc3NUcmFja2VyOiBQcm9ncmVzc1RyYWNrZXI7XG4gIGxldCBjYW1wYWlnbkNvbnRyb2xsZXI6IENhbXBhaWduQ29udHJvbGxlcjtcbiAgbGV0IG1vY2tDb25maWc6IENhbXBhaWduQ29uZmlnO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGNvbnN0IHNhZmV0eVNldHRpbmdzOiBTYWZldHlTZXR0aW5ncyA9IHtcbiAgICAgIG1heEZpbGVzUGVyQmF0Y2g6IDI1LFxuICAgICAgYnVpbGRWYWxpZGF0aW9uRnJlcXVlbmN5OiA1LFxuICAgICAgdGVzdFZhbGlkYXRpb25GcmVxdWVuY3k6IDEwLFxuICAgICAgY29ycnVwdGlvbkRldGVjdGlvbkVuYWJsZWQ6IHRydWUsXG4gICAgICBhdXRvbWF0aWNSb2xsYmFja0VuYWJsZWQ6IHRydWUsXG4gICAgICBzdGFzaFJldGVudGlvbkRheXM6IDdcbiAgICB9O1xuXG4gICAgbW9ja0NvbmZpZyA9IHtcbiAgICAgIHBoYXNlczogW3tcbiAgICAgICAgaWQ6ICdidW5kbGUtdGVzdC1waGFzZScsXG4gICAgICAgIG5hbWU6ICdCdW5kbGUgVGVzdCBQaGFzZScsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnUGhhc2UgZm9yIGJ1bmRsZSBzaXplIHRlc3RpbmcnLFxuICAgICAgICB0b29sczogW3tcbiAgICAgICAgICBzY3JpcHRQYXRoOiAnc2NyaXB0cy9idW5kbGUvb3B0aW1pemUtc2NyaXB0LmpzJyxcbiAgICAgICAgICBwYXJhbWV0ZXJzOiB7IG9wdGltaXplQnVuZGxlOiB0cnVlIH0sXG4gICAgICAgICAgYmF0Y2hTaXplOiA1MCxcbiAgICAgICAgICBzYWZldHlMZXZlbDogU2FmZXR5TGV2ZWwuTUVESVVNXG4gICAgICAgIH1dLFxuICAgICAgICBzdWNjZXNzQ3JpdGVyaWE6IHsgYnVpbGRUaW1lOiAxMCB9LFxuICAgICAgICBzYWZldHlDaGVja3BvaW50czogW11cbiAgICAgIH1dLFxuICAgICAgc2FmZXR5U2V0dGluZ3MsXG4gICAgICBwcm9ncmVzc1RhcmdldHM6IHsgdHlwZVNjcmlwdEVycm9yczogMCwgbGludGluZ1dhcm5pbmdzOiAwLCBidWlsZFRpbWU6IDEwLCBlbnRlcnByaXNlU3lzdGVtczogMjAwIH0sXG4gICAgICB0b29sQ29uZmlndXJhdGlvbjoge1xuICAgICAgICBlbmhhbmNlZEVycm9yRml4ZXI6ICdzY3JpcHRzL3R5cGVzY3JpcHQtZml4ZXMvZml4LXR5cGVzY3JpcHQtZXJyb3JzLWVuaGFuY2VkLXYzLmpzJyxcbiAgICAgICAgZXhwbGljaXRBbnlGaXhlcjogJ3NjcmlwdHMvdHlwZXNjcmlwdC1maXhlcy9maXgtZXhwbGljaXQtYW55LXN5c3RlbWF0aWMuanMnLFxuICAgICAgICB1bnVzZWRWYXJpYWJsZXNGaXhlcjogJ3NjcmlwdHMvdHlwZXNjcmlwdC1maXhlcy9maXgtdW51c2VkLXZhcmlhYmxlcy1lbmhhbmNlZC5qcycsXG4gICAgICAgIGNvbnNvbGVTdGF0ZW1lbnRGaXhlcjogJ3NjcmlwdHMvbGludC1maXhlcy9maXgtY29uc29sZS1zdGF0ZW1lbnRzLW9ubHkuanMnXG4gICAgICB9XG4gICAgfTtcblxuICAgIHByb2dyZXNzVHJhY2tlciA9IG5ldyBQcm9ncmVzc1RyYWNrZXIoKTtcbiAgICBjYW1wYWlnbkNvbnRyb2xsZXIgPSBuZXcgQ2FtcGFpZ25Db250cm9sbGVyKG1vY2tDb25maWcpO1xuXG4gICAgLy8gUmVzZXQgbW9ja3NcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgICBcbiAgICAvLyBEZWZhdWx0IG1vY2sgaW1wbGVtZW50YXRpb25zXG4gICAgbW9ja0V4ZWNTeW5jLm1vY2tSZXR1cm5WYWx1ZSgnJyk7XG4gICAgbW9ja0ZzLmV4aXN0c1N5bmMubW9ja1JldHVyblZhbHVlKHRydWUpO1xuICB9KTtcblxuICBkZXNjcmliZSgnQnVuZGxlIFNpemUgVmFsaWRhdGlvbicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIGJ1bmRsZSBzaXplIHVuZGVyIDQyMGtCIHRhcmdldCcsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE1vY2sgb3B0aW1hbCBidW5kbGUgc2l6ZVxuICAgICAgbW9ja0ZzLmV4aXN0c1N5bmMubW9ja0ltcGxlbWVudGF0aW9uKChwYXRoKSA9PiB7XG4gICAgICAgIHJldHVybiBwYXRoID09PSAnLm5leHQnIHx8IHBhdGggPT09ICdkaXN0JztcbiAgICAgIH0pO1xuXG4gICAgICBtb2NrRXhlY1N5bmMubW9ja0ltcGxlbWVudGF0aW9uKChjb21tYW5kKSA9PiB7XG4gICAgICAgIGNvbnN0IGNtZCA9IGNvbW1hbmQudG9TdHJpbmcoKTtcbiAgICAgICAgaWYgKGNtZC5pbmNsdWRlcygnZHUgLXNrIC5uZXh0JykpIHtcbiAgICAgICAgICByZXR1cm4gJzMwMCc7IC8vIDMwMGtCXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNtZC5pbmNsdWRlcygnZHUgLXNrIGRpc3QnKSkge1xuICAgICAgICAgIHJldHVybiAnMTAwJzsgLy8gMTAwa0JcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgYnVuZGxlU2l6ZSA9IGF3YWl0IHByb2dyZXNzVHJhY2tlci5nZXRCdW5kbGVTaXplKCk7XG5cbiAgICAgIGV4cGVjdChidW5kbGVTaXplKS50b0JlKDQwMCk7IC8vIDMwMCArIDEwMCA9IDQwMGtCXG4gICAgICBleHBlY3QoYnVuZGxlU2l6ZSkudG9CZUxlc3NUaGFuKDQyMCk7IC8vIFVuZGVyIDQyMGtCIHRhcmdldFxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBkZXRlY3QgYnVuZGxlIHNpemUgcmVncmVzc2lvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE1vY2sgYnVuZGxlIHNpemUgdGhhdCBleGNlZWRzIHRhcmdldFxuICAgICAgbW9ja0ZzLmV4aXN0c1N5bmMubW9ja1JldHVyblZhbHVlKHRydWUpO1xuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tJbXBsZW1lbnRhdGlvbigoY29tbWFuZCkgPT4ge1xuICAgICAgICBpZiAoY29tbWFuZC50b1N0cmluZygpLmluY2x1ZGVzKCdkdSAtc2snKSkge1xuICAgICAgICAgIHJldHVybiAnNDUwJzsgLy8gNDUwa0IgLSBleGNlZWRzIDQyMGtCIHRhcmdldFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBidW5kbGVTaXplID0gYXdhaXQgcHJvZ3Jlc3NUcmFja2VyLmdldEJ1bmRsZVNpemUoKTtcblxuICAgICAgZXhwZWN0KGJ1bmRsZVNpemUpLnRvQmUoNDUwKTtcbiAgICAgIGV4cGVjdChidW5kbGVTaXplKS50b0JlR3JlYXRlclRoYW4oNDIwKTsgLy8gRXhjZWVkcyB0YXJnZXRcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIG1pc3NpbmcgYnVpbGQgZGlyZWN0b3JpZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrRnMuZXhpc3RzU3luYy5tb2NrUmV0dXJuVmFsdWUoZmFsc2UpO1xuXG4gICAgICBjb25zdCBidW5kbGVTaXplID0gYXdhaXQgcHJvZ3Jlc3NUcmFja2VyLmdldEJ1bmRsZVNpemUoKTtcblxuICAgICAgZXhwZWN0KGJ1bmRsZVNpemUpLnRvQmUoMCk7IC8vIE5vIGJ1aWxkIGRpcmVjdG9yaWVzIGZvdW5kXG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHRyYWNrIGJ1bmRsZSBzaXplIHRyZW5kcyBvdmVyIGNhbXBhaWduIGV4ZWN1dGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGJ1bmRsZVNpemVzOiBudW1iZXJbXSA9IFtdO1xuICAgICAgbGV0IG9wdGltaXphdGlvblN0ZXAgPSAwO1xuXG4gICAgICBtb2NrRnMuZXhpc3RzU3luYy5tb2NrUmV0dXJuVmFsdWUodHJ1ZSk7XG4gICAgICBtb2NrRXhlY1N5bmMubW9ja0ltcGxlbWVudGF0aW9uKChjb21tYW5kKSA9PiB7XG4gICAgICAgIGlmIChjb21tYW5kLnRvU3RyaW5nKCkuaW5jbHVkZXMoJ2R1IC1zaycpKSB7XG4gICAgICAgICAgb3B0aW1pemF0aW9uU3RlcCsrO1xuICAgICAgICAgIC8vIFNpbXVsYXRlIGJ1bmRsZSBzaXplIG9wdGltaXphdGlvbiBvdmVyIHRpbWVcbiAgICAgICAgICBjb25zdCBiYXNlU2l6ZSA9IDUwMDsgLy8gU3RhcnQgd2l0aCBsYXJnZSBidW5kbGVcbiAgICAgICAgICBjb25zdCBvcHRpbWl6YXRpb24gPSBNYXRoLm1pbigxMDAsIG9wdGltaXphdGlvblN0ZXAgKiAyMCk7IC8vIFVwIHRvIDEwMGtCIHJlZHVjdGlvblxuICAgICAgICAgIHJldHVybiBNYXRoLm1heCgzNTAsIGJhc2VTaXplIC0gb3B0aW1pemF0aW9uKS50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH0pO1xuXG4gICAgICAvLyBDb2xsZWN0IGJ1bmRsZSBzaXplcyBvdmVyIG11bHRpcGxlIG1lYXN1cmVtZW50c1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA2OyBpKyspIHtcbiAgICAgICAgY29uc3QgYnVuZGxlU2l6ZSA9IGF3YWl0IHByb2dyZXNzVHJhY2tlci5nZXRCdW5kbGVTaXplKCk7XG4gICAgICAgIGJ1bmRsZVNpemVzLnB1c2goYnVuZGxlU2l6ZSk7XG4gICAgICB9XG5cbiAgICAgIGV4cGVjdChidW5kbGVTaXplcy5sZW5ndGgpLnRvQmUoNik7XG5cbiAgICAgIC8vIEJ1bmRsZSBzaXplIHNob3VsZCBkZWNyZWFzZSBvdmVyIHRpbWUgKG9wdGltaXphdGlvbilcbiAgICAgIGNvbnN0IGZpcnN0U2l6ZSA9IGJ1bmRsZVNpemVzWzBdO1xuICAgICAgY29uc3QgbGFzdFNpemUgPSBidW5kbGVTaXplc1tidW5kbGVTaXplcy5sZW5ndGggLSAxXTtcbiAgICAgIGV4cGVjdChsYXN0U2l6ZSkudG9CZUxlc3NUaGFuKGZpcnN0U2l6ZSk7XG4gICAgICBleHBlY3QobGFzdFNpemUpLnRvQmVMZXNzVGhhbig0MjApOyAvLyBTaG91bGQgcmVhY2ggdGFyZ2V0XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdCdW5kbGUgQ29tcG9zaXRpb24gQW5hbHlzaXMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBhbmFseXplIGJ1bmRsZSBjb21wb3NpdGlvbiBhY3Jvc3MgZGlmZmVyZW50IGJ1aWxkIG91dHB1dHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBidWlsZE91dHB1dHMgPSBbXG4gICAgICAgIHsgZGlyOiAnLm5leHQnLCBleHBlY3RlZFNpemU6IDI1MCB9LFxuICAgICAgICB7IGRpcjogJ2Rpc3QnLCBleHBlY3RlZFNpemU6IDEyMCB9LFxuICAgICAgICB7IGRpcjogJ2J1aWxkJywgZXhwZWN0ZWRTaXplOiA1MCB9XG4gICAgICBdO1xuXG4gICAgICBtb2NrRnMuZXhpc3RzU3luYy5tb2NrSW1wbGVtZW50YXRpb24oKHBhdGgpID0+IHtcbiAgICAgICAgcmV0dXJuIGJ1aWxkT3V0cHV0cy5zb21lKG91dHB1dCA9PiBvdXRwdXQuZGlyID09PSBwYXRoKTtcbiAgICAgIH0pO1xuXG4gICAgICBtb2NrRXhlY1N5bmMubW9ja0ltcGxlbWVudGF0aW9uKChjb21tYW5kKSA9PiB7XG4gICAgICAgIGNvbnN0IGNtZCA9IGNvbW1hbmQudG9TdHJpbmcoKTtcbiAgICAgICAgZm9yIChjb25zdCBvdXRwdXQgb2YgYnVpbGRPdXRwdXRzKSB7XG4gICAgICAgICAgaWYgKGNtZC5pbmNsdWRlcyhgZHUgLXNrICR7b3V0cHV0LmRpcn1gKSkge1xuICAgICAgICAgICAgcmV0dXJuIG91dHB1dC5leHBlY3RlZFNpemUudG9TdHJpbmcoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGJ1bmRsZVNpemUgPSBhd2FpdCBwcm9ncmVzc1RyYWNrZXIuZ2V0QnVuZGxlU2l6ZSgpO1xuXG4gICAgICBjb25zdCBleHBlY3RlZFRvdGFsID0gYnVpbGRPdXRwdXRzLnJlZHVjZSgoc3VtLCBvdXRwdXQpID0+IHN1bSArIG91dHB1dC5leHBlY3RlZFNpemUsIDApO1xuICAgICAgZXhwZWN0KGJ1bmRsZVNpemUpLnRvQmUoZXhwZWN0ZWRUb3RhbCk7IC8vIDI1MCArIDEyMCArIDUwID0gNDIwa0JcbiAgICAgIGV4cGVjdChidW5kbGVTaXplKS50b0JlTGVzc1RoYW5PckVxdWFsKDQyMCk7IC8vIEF0IHRhcmdldCBsaW1pdFxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgcGFydGlhbCBidWlsZCBvdXRwdXRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gT25seSBzb21lIGJ1aWxkIGRpcmVjdG9yaWVzIGV4aXN0XG4gICAgICBtb2NrRnMuZXhpc3RzU3luYy5tb2NrSW1wbGVtZW50YXRpb24oKHBhdGgpID0+IHtcbiAgICAgICAgcmV0dXJuIHBhdGggPT09ICcubmV4dCc7IC8vIE9ubHkgLm5leHQgZXhpc3RzXG4gICAgICB9KTtcblxuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tJbXBsZW1lbnRhdGlvbigoY29tbWFuZCkgPT4ge1xuICAgICAgICBpZiAoY29tbWFuZC50b1N0cmluZygpLmluY2x1ZGVzKCdkdSAtc2sgLm5leHQnKSkge1xuICAgICAgICAgIHJldHVybiAnMzgwJzsgLy8gMzgwa0JcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgYnVuZGxlU2l6ZSA9IGF3YWl0IHByb2dyZXNzVHJhY2tlci5nZXRCdW5kbGVTaXplKCk7XG5cbiAgICAgIGV4cGVjdChidW5kbGVTaXplKS50b0JlKDM4MCk7XG4gICAgICBleHBlY3QoYnVuZGxlU2l6ZSkudG9CZUxlc3NUaGFuKDQyMCk7IC8vIFVuZGVyIHRhcmdldFxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBkZXRlY3QgYnVuZGxlIGJsb2F0IGluIHNwZWNpZmljIGRpcmVjdG9yaWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgYmxvYXRlZEJ1aWxkID0ge1xuICAgICAgICAnLm5leHQnOiAzNTAsICAvLyBOb3JtYWwgc2l6ZVxuICAgICAgICAnZGlzdCc6IDIwMCwgICAvLyBCbG9hdGVkIC0gc2hvdWxkIGJlIH4xMjBrQlxuICAgICAgICAnYnVpbGQnOiA1MCAgICAvLyBOb3JtYWwgc2l6ZVxuICAgICAgfTtcblxuICAgICAgbW9ja0ZzLmV4aXN0c1N5bmMubW9ja0ltcGxlbWVudGF0aW9uKChwYXRoKSA9PiB7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhibG9hdGVkQnVpbGQpLmluY2x1ZGVzKHBhdGggYXMgc3RyaW5nKTtcbiAgICAgIH0pO1xuXG4gICAgICBtb2NrRXhlY1N5bmMubW9ja0ltcGxlbWVudGF0aW9uKChjb21tYW5kKSA9PiB7XG4gICAgICAgIGNvbnN0IGNtZCA9IGNvbW1hbmQudG9TdHJpbmcoKTtcbiAgICAgICAgZm9yIChjb25zdCBbZGlyLCBzaXplXSBvZiBPYmplY3QuZW50cmllcyhibG9hdGVkQnVpbGQpKSB7XG4gICAgICAgICAgaWYgKGNtZC5pbmNsdWRlcyhgZHUgLXNrICR7ZGlyfWApKSB7XG4gICAgICAgICAgICByZXR1cm4gc2l6ZS50b1N0cmluZygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgYnVuZGxlU2l6ZSA9IGF3YWl0IHByb2dyZXNzVHJhY2tlci5nZXRCdW5kbGVTaXplKCk7XG5cbiAgICAgIGV4cGVjdChidW5kbGVTaXplKS50b0JlKDYwMCk7IC8vIDM1MCArIDIwMCArIDUwID0gNjAwa0JcbiAgICAgIGV4cGVjdChidW5kbGVTaXplKS50b0JlR3JlYXRlclRoYW4oNDIwKTsgLy8gRXhjZWVkcyB0YXJnZXQgZHVlIHRvIGJsb2F0XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdCdW5kbGUgT3B0aW1pemF0aW9uIFBlcmZvcm1hbmNlJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgdmFsaWRhdGUgbGF6eSBsb2FkaW5nIGltcGFjdCBvbiBidW5kbGUgc2l6ZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGxldCBsYXp5TG9hZGluZ0VuYWJsZWQgPSBmYWxzZTtcblxuICAgICAgbW9ja0ZzLmV4aXN0c1N5bmMubW9ja1JldHVyblZhbHVlKHRydWUpO1xuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tJbXBsZW1lbnRhdGlvbigoY29tbWFuZCkgPT4ge1xuICAgICAgICBpZiAoY29tbWFuZC50b1N0cmluZygpLmluY2x1ZGVzKCdkdSAtc2snKSkge1xuICAgICAgICAgIC8vIExhenkgbG9hZGluZyBzaG91bGQgcmVkdWNlIG1haW4gYnVuZGxlIHNpemVcbiAgICAgICAgICByZXR1cm4gbGF6eUxvYWRpbmdFbmFibGVkID8gJzMyMCcgOiAnNDUwJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9KTtcblxuICAgICAgLy8gQmVmb3JlIGxhenkgbG9hZGluZ1xuICAgICAgbGV0IGJ1bmRsZVNpemUgPSBhd2FpdCBwcm9ncmVzc1RyYWNrZXIuZ2V0QnVuZGxlU2l6ZSgpO1xuICAgICAgZXhwZWN0KGJ1bmRsZVNpemUpLnRvQmUoNDUwKTtcbiAgICAgIGV4cGVjdChidW5kbGVTaXplKS50b0JlR3JlYXRlclRoYW4oNDIwKTsgLy8gRXhjZWVkcyB0YXJnZXRcblxuICAgICAgLy8gQWZ0ZXIgZW5hYmxpbmcgbGF6eSBsb2FkaW5nXG4gICAgICBsYXp5TG9hZGluZ0VuYWJsZWQgPSB0cnVlO1xuICAgICAgYnVuZGxlU2l6ZSA9IGF3YWl0IHByb2dyZXNzVHJhY2tlci5nZXRCdW5kbGVTaXplKCk7XG4gICAgICBleHBlY3QoYnVuZGxlU2l6ZSkudG9CZSgzMjApO1xuICAgICAgZXhwZWN0KGJ1bmRsZVNpemUpLnRvQmVMZXNzVGhhbig0MjApOyAvLyBVbmRlciB0YXJnZXRcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdmFsaWRhdGUgdHJlZSBzaGFraW5nIGVmZmVjdGl2ZW5lc3MnLCBhc3luYyAoKSA9PiB7XG4gICAgICBsZXQgdHJlZVNoYWtpbmdFbmFibGVkID0gZmFsc2U7XG5cbiAgICAgIG1vY2tGcy5leGlzdHNTeW5jLm1vY2tSZXR1cm5WYWx1ZSh0cnVlKTtcbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrSW1wbGVtZW50YXRpb24oKGNvbW1hbmQpID0+IHtcbiAgICAgICAgaWYgKGNvbW1hbmQudG9TdHJpbmcoKS5pbmNsdWRlcygnZHUgLXNrJykpIHtcbiAgICAgICAgICAvLyBUcmVlIHNoYWtpbmcgc2hvdWxkIHJlbW92ZSB1bnVzZWQgY29kZVxuICAgICAgICAgIHJldHVybiB0cmVlU2hha2luZ0VuYWJsZWQgPyAnMzgwJyA6ICc0ODAnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH0pO1xuXG4gICAgICAvLyBCZWZvcmUgdHJlZSBzaGFraW5nXG4gICAgICBsZXQgYnVuZGxlU2l6ZSA9IGF3YWl0IHByb2dyZXNzVHJhY2tlci5nZXRCdW5kbGVTaXplKCk7XG4gICAgICBleHBlY3QoYnVuZGxlU2l6ZSkudG9CZSg0ODApO1xuICAgICAgZXhwZWN0KGJ1bmRsZVNpemUpLnRvQmVHcmVhdGVyVGhhbig0MjApOyAvLyBFeGNlZWRzIHRhcmdldFxuXG4gICAgICAvLyBBZnRlciBlbmFibGluZyB0cmVlIHNoYWtpbmdcbiAgICAgIHRyZWVTaGFraW5nRW5hYmxlZCA9IHRydWU7XG4gICAgICBidW5kbGVTaXplID0gYXdhaXQgcHJvZ3Jlc3NUcmFja2VyLmdldEJ1bmRsZVNpemUoKTtcbiAgICAgIGV4cGVjdChidW5kbGVTaXplKS50b0JlKDM4MCk7XG4gICAgICBleHBlY3QoYnVuZGxlU2l6ZSkudG9CZUxlc3NUaGFuKDQyMCk7IC8vIFVuZGVyIHRhcmdldFxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSBjb2RlIHNwbGl0dGluZyBpbXBhY3QnLCBhc3luYyAoKSA9PiB7XG4gICAgICBsZXQgY29kZVNwbGl0dGluZ0VuYWJsZWQgPSBmYWxzZTtcblxuICAgICAgbW9ja0ZzLmV4aXN0c1N5bmMubW9ja1JldHVyblZhbHVlKHRydWUpO1xuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tJbXBsZW1lbnRhdGlvbigoY29tbWFuZCkgPT4ge1xuICAgICAgICBpZiAoY29tbWFuZC50b1N0cmluZygpLmluY2x1ZGVzKCdkdSAtc2snKSkge1xuICAgICAgICAgIGlmIChjb2RlU3BsaXR0aW5nRW5hYmxlZCkge1xuICAgICAgICAgICAgLy8gQ29kZSBzcGxpdHRpbmcgY3JlYXRlcyBtdWx0aXBsZSBzbWFsbGVyIGJ1bmRsZXNcbiAgICAgICAgICAgIC8vIE1haW4gYnVuZGxlIHNob3VsZCBiZSBzbWFsbGVyXG4gICAgICAgICAgICByZXR1cm4gJzI4MCc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFNpbmdsZSBsYXJnZSBidW5kbGVcbiAgICAgICAgICAgIHJldHVybiAnNDQwJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIEJlZm9yZSBjb2RlIHNwbGl0dGluZ1xuICAgICAgbGV0IGJ1bmRsZVNpemUgPSBhd2FpdCBwcm9ncmVzc1RyYWNrZXIuZ2V0QnVuZGxlU2l6ZSgpO1xuICAgICAgZXhwZWN0KGJ1bmRsZVNpemUpLnRvQmUoNDQwKTtcbiAgICAgIGV4cGVjdChidW5kbGVTaXplKS50b0JlR3JlYXRlclRoYW4oNDIwKTsgLy8gRXhjZWVkcyB0YXJnZXRcblxuICAgICAgLy8gQWZ0ZXIgZW5hYmxpbmcgY29kZSBzcGxpdHRpbmdcbiAgICAgIGNvZGVTcGxpdHRpbmdFbmFibGVkID0gdHJ1ZTtcbiAgICAgIGJ1bmRsZVNpemUgPSBhd2FpdCBwcm9ncmVzc1RyYWNrZXIuZ2V0QnVuZGxlU2l6ZSgpO1xuICAgICAgZXhwZWN0KGJ1bmRsZVNpemUpLnRvQmUoMjgwKTtcbiAgICAgIGV4cGVjdChidW5kbGVTaXplKS50b0JlTGVzc1RoYW4oNDIwKTsgLy8gV2VsbCB1bmRlciB0YXJnZXRcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdmFsaWRhdGUgY29tcHJlc3Npb24gZWZmZWN0aXZlbmVzcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGxldCBjb21wcmVzc2lvbkVuYWJsZWQgPSBmYWxzZTtcblxuICAgICAgbW9ja0ZzLmV4aXN0c1N5bmMubW9ja1JldHVyblZhbHVlKHRydWUpO1xuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tJbXBsZW1lbnRhdGlvbigoY29tbWFuZCkgPT4ge1xuICAgICAgICBpZiAoY29tbWFuZC50b1N0cmluZygpLmluY2x1ZGVzKCdkdSAtc2snKSkge1xuICAgICAgICAgIC8vIENvbXByZXNzaW9uIHNob3VsZCByZWR1Y2UgYnVuZGxlIHNpemUgc2lnbmlmaWNhbnRseVxuICAgICAgICAgIHJldHVybiBjb21wcmVzc2lvbkVuYWJsZWQgPyAnMzAwJyA6ICc1MDAnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH0pO1xuXG4gICAgICAvLyBCZWZvcmUgY29tcHJlc3Npb25cbiAgICAgIGxldCBidW5kbGVTaXplID0gYXdhaXQgcHJvZ3Jlc3NUcmFja2VyLmdldEJ1bmRsZVNpemUoKTtcbiAgICAgIGV4cGVjdChidW5kbGVTaXplKS50b0JlKDUwMCk7XG4gICAgICBleHBlY3QoYnVuZGxlU2l6ZSkudG9CZUdyZWF0ZXJUaGFuKDQyMCk7IC8vIEV4Y2VlZHMgdGFyZ2V0XG5cbiAgICAgIC8vIEFmdGVyIGVuYWJsaW5nIGNvbXByZXNzaW9uXG4gICAgICBjb21wcmVzc2lvbkVuYWJsZWQgPSB0cnVlO1xuICAgICAgYnVuZGxlU2l6ZSA9IGF3YWl0IHByb2dyZXNzVHJhY2tlci5nZXRCdW5kbGVTaXplKCk7XG4gICAgICBleHBlY3QoYnVuZGxlU2l6ZSkudG9CZSgzMDApO1xuICAgICAgZXhwZWN0KGJ1bmRsZVNpemUpLnRvQmVMZXNzVGhhbig0MjApOyAvLyBXZWxsIHVuZGVyIHRhcmdldFxuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnQnVuZGxlIFNpemUgUmVncmVzc2lvbiBUZXN0aW5nJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgZGV0ZWN0IGJ1bmRsZSBzaXplIHJlZ3Jlc3Npb24gZHVyaW5nIGNhbXBhaWduJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcGhhc2UgPSBtb2NrQ29uZmlnLnBoYXNlc1swXTtcbiAgICAgIGxldCBleGVjdXRpb25Db3VudCA9IDA7XG5cbiAgICAgIG1vY2tGcy5leGlzdHNTeW5jLm1vY2tSZXR1cm5WYWx1ZSh0cnVlKTtcbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrSW1wbGVtZW50YXRpb24oKGNvbW1hbmQpID0+IHtcbiAgICAgICAgaWYgKGNvbW1hbmQudG9TdHJpbmcoKS5pbmNsdWRlcygnZHUgLXNrJykpIHtcbiAgICAgICAgICBleGVjdXRpb25Db3VudCsrO1xuICAgICAgICAgIC8vIFNpbXVsYXRlIGJ1bmRsZSBzaXplIHJlZ3Jlc3Npb24gb3ZlciB0aW1lXG4gICAgICAgICAgY29uc3QgYmFzZVNpemUgPSAzNTA7XG4gICAgICAgICAgY29uc3QgcmVncmVzc2lvbiA9IGV4ZWN1dGlvbkNvdW50ICogMjU7IC8vIDI1a0IgaW5jcmVhc2UgcGVyIGV4ZWN1dGlvblxuICAgICAgICAgIHJldHVybiAoYmFzZVNpemUgKyByZWdyZXNzaW9uKS50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBidW5kbGVTaXplczogbnVtYmVyW10gPSBbXTtcblxuICAgICAgLy8gRXhlY3V0ZSBwaGFzZSBtdWx0aXBsZSB0aW1lcyB0byBzaW11bGF0ZSByZWdyZXNzaW9uXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICBhd2FpdCBjYW1wYWlnbkNvbnRyb2xsZXIuZXhlY3V0ZVBoYXNlKHBoYXNlKTtcbiAgICAgICAgY29uc3QgYnVuZGxlU2l6ZSA9IGF3YWl0IHByb2dyZXNzVHJhY2tlci5nZXRCdW5kbGVTaXplKCk7XG4gICAgICAgIGJ1bmRsZVNpemVzLnB1c2goYnVuZGxlU2l6ZSk7XG4gICAgICB9XG5cbiAgICAgIGV4cGVjdChidW5kbGVTaXplcy5sZW5ndGgpLnRvQmUoNCk7XG5cbiAgICAgIC8vIFNob3VsZCBkZXRlY3QgaW5jcmVhc2luZyBidW5kbGUgc2l6ZSAocmVncmVzc2lvbilcbiAgICAgIGNvbnN0IGZpcnN0U2l6ZSA9IGJ1bmRsZVNpemVzWzBdO1xuICAgICAgY29uc3QgbGFzdFNpemUgPSBidW5kbGVTaXplc1tidW5kbGVTaXplcy5sZW5ndGggLSAxXTtcbiAgICAgIGV4cGVjdChsYXN0U2l6ZSkudG9CZUdyZWF0ZXJUaGFuKGZpcnN0U2l6ZSk7XG4gICAgICBleHBlY3QobGFzdFNpemUpLnRvQmVHcmVhdGVyVGhhbig0MjApOyAvLyBTaG91bGQgZXhjZWVkIHRhcmdldFxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSBidW5kbGUgc2l6ZSBpbXByb3ZlbWVudHMgZHVyaW5nIG9wdGltaXphdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHBoYXNlID0gbW9ja0NvbmZpZy5waGFzZXNbMF07XG4gICAgICBsZXQgb3B0aW1pemF0aW9uU3RlcCA9IDA7XG5cbiAgICAgIG1vY2tGcy5leGlzdHNTeW5jLm1vY2tSZXR1cm5WYWx1ZSh0cnVlKTtcbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrSW1wbGVtZW50YXRpb24oKGNvbW1hbmQpID0+IHtcbiAgICAgICAgaWYgKGNvbW1hbmQudG9TdHJpbmcoKS5pbmNsdWRlcygnZHUgLXNrJykpIHtcbiAgICAgICAgICBvcHRpbWl6YXRpb25TdGVwKys7XG4gICAgICAgICAgLy8gU2ltdWxhdGUgYnVuZGxlIHNpemUgb3B0aW1pemF0aW9uXG4gICAgICAgICAgY29uc3QgYmFzZVNpemUgPSA1MDA7XG4gICAgICAgICAgY29uc3Qgb3B0aW1pemF0aW9uID0gb3B0aW1pemF0aW9uU3RlcCAqIDMwOyAvLyAzMGtCIHJlZHVjdGlvbiBwZXIgc3RlcFxuICAgICAgICAgIHJldHVybiBNYXRoLm1heCgzMjAsIGJhc2VTaXplIC0gb3B0aW1pemF0aW9uKS50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBidW5kbGVTaXplczogbnVtYmVyW10gPSBbXTtcblxuICAgICAgLy8gRXhlY3V0ZSBvcHRpbWl6YXRpb24gcGhhc2VzXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDU7IGkrKykge1xuICAgICAgICBhd2FpdCBjYW1wYWlnbkNvbnRyb2xsZXIuZXhlY3V0ZVBoYXNlKHBoYXNlKTtcbiAgICAgICAgY29uc3QgYnVuZGxlU2l6ZSA9IGF3YWl0IHByb2dyZXNzVHJhY2tlci5nZXRCdW5kbGVTaXplKCk7XG4gICAgICAgIGJ1bmRsZVNpemVzLnB1c2goYnVuZGxlU2l6ZSk7XG4gICAgICB9XG5cbiAgICAgIGV4cGVjdChidW5kbGVTaXplcy5sZW5ndGgpLnRvQmUoNSk7XG5cbiAgICAgIC8vIFNob3VsZCBzaG93IGRlY3JlYXNpbmcgYnVuZGxlIHNpemUgKG9wdGltaXphdGlvbilcbiAgICAgIGNvbnN0IGZpcnN0U2l6ZSA9IGJ1bmRsZVNpemVzWzBdO1xuICAgICAgY29uc3QgbGFzdFNpemUgPSBidW5kbGVTaXplc1tidW5kbGVTaXplcy5sZW5ndGggLSAxXTtcbiAgICAgIGV4cGVjdChsYXN0U2l6ZSkudG9CZUxlc3NUaGFuKGZpcnN0U2l6ZSk7XG4gICAgICBleHBlY3QobGFzdFNpemUpLnRvQmVMZXNzVGhhbig0MjApOyAvLyBTaG91bGQgYmUgdW5kZXIgdGFyZ2V0XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHRyYWNrIGJ1bmRsZSBzaXplIGFjcm9zcyBkaWZmZXJlbnQgb3B0aW1pemF0aW9uIHN0cmF0ZWdpZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBvcHRpbWl6YXRpb25TdHJhdGVnaWVzID0gW1xuICAgICAgICB7IG5hbWU6ICdiYXNlbGluZScsIGV4cGVjdGVkU2l6ZTogNDgwIH0sXG4gICAgICAgIHsgbmFtZTogJ21pbmlmaWNhdGlvbicsIGV4cGVjdGVkU2l6ZTogNDIwIH0sXG4gICAgICAgIHsgbmFtZTogJ3RyZWUtc2hha2luZycsIGV4cGVjdGVkU2l6ZTogMzgwIH0sXG4gICAgICAgIHsgbmFtZTogJ2NvZGUtc3BsaXR0aW5nJywgZXhwZWN0ZWRTaXplOiAzNDAgfSxcbiAgICAgICAgeyBuYW1lOiAnY29tcHJlc3Npb24nLCBleHBlY3RlZFNpemU6IDMwMCB9XG4gICAgICBdO1xuXG4gICAgICBjb25zdCByZXN1bHRzOiBBcnJheTx7IHN0cmF0ZWd5OiBzdHJpbmc7IHNpemU6IG51bWJlcjsgdW5kZXJUYXJnZXQ6IGJvb2xlYW4gfT4gPSBbXTtcblxuICAgICAgZm9yIChjb25zdCBzdHJhdGVneSBvZiBvcHRpbWl6YXRpb25TdHJhdGVnaWVzKSB7XG4gICAgICAgIG1vY2tGcy5leGlzdHNTeW5jLm1vY2tSZXR1cm5WYWx1ZSh0cnVlKTtcbiAgICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tJbXBsZW1lbnRhdGlvbigoY29tbWFuZCkgPT4ge1xuICAgICAgICAgIGlmIChjb21tYW5kLnRvU3RyaW5nKCkuaW5jbHVkZXMoJ2R1IC1zaycpKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyYXRlZ3kuZXhwZWN0ZWRTaXplLnRvU3RyaW5nKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgYnVuZGxlU2l6ZSA9IGF3YWl0IHByb2dyZXNzVHJhY2tlci5nZXRCdW5kbGVTaXplKCk7XG4gICAgICAgIHJlc3VsdHMucHVzaCh7XG4gICAgICAgICAgc3RyYXRlZ3k6IHN0cmF0ZWd5Lm5hbWUsXG4gICAgICAgICAgc2l6ZTogYnVuZGxlU2l6ZSxcbiAgICAgICAgICB1bmRlclRhcmdldDogYnVuZGxlU2l6ZSA8IDQyMFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZXhwZWN0KHJlc3VsdHMubGVuZ3RoKS50b0JlKDUpO1xuXG4gICAgICAvLyBCYXNlbGluZSBzaG91bGQgZXhjZWVkIHRhcmdldFxuICAgICAgZXhwZWN0KHJlc3VsdHNbMF0udW5kZXJUYXJnZXQpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdHNbMF0uc2l6ZSkudG9CZSg0ODApO1xuXG4gICAgICAvLyBQcm9ncmVzc2l2ZSBvcHRpbWl6YXRpb24gc2hvdWxkIHJlZHVjZSBidW5kbGUgc2l6ZVxuICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGV4cGVjdChyZXN1bHRzW2ldLnNpemUpLnRvQmVMZXNzVGhhbihyZXN1bHRzW2kgLSAxXS5zaXplKTtcbiAgICAgIH1cblxuICAgICAgLy8gRmluYWwgb3B0aW1pemF0aW9ucyBzaG91bGQgYmUgdW5kZXIgdGFyZ2V0XG4gICAgICBleHBlY3QocmVzdWx0c1tyZXN1bHRzLmxlbmd0aCAtIDFdLnVuZGVyVGFyZ2V0KS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3VsdHNbcmVzdWx0cy5sZW5ndGggLSAxXS5zaXplKS50b0JlKDMwMCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdCdW5kbGUgU2l6ZSBQZXJmb3JtYW5jZSBCZW5jaG1hcmtzJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgYmVuY2htYXJrIGJ1bmRsZSBhbmFseXNpcyBwZXJmb3JtYW5jZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGFuYWx5c2lzVGltZXM6IG51bWJlcltdID0gW107XG5cbiAgICAgIG1vY2tGcy5leGlzdHNTeW5jLm1vY2tSZXR1cm5WYWx1ZSh0cnVlKTtcbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrSW1wbGVtZW50YXRpb24oKGNvbW1hbmQpID0+IHtcbiAgICAgICAgaWYgKGNvbW1hbmQudG9TdHJpbmcoKS5pbmNsdWRlcygnZHUgLXNrJykpIHtcbiAgICAgICAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICAgIC8vIFNpbXVsYXRlIGJ1bmRsZSBhbmFseXNpcyB0aW1lXG4gICAgICAgICAgY29uc3QgZGVsYXkgPSAyMCArIE1hdGgucmFuZG9tKCkgKiAzMDsgLy8gMjAtNTBtc1xuICAgICAgICAgIGNvbnN0IGVuZFRpbWUgPSBzdGFydFRpbWUgKyBkZWxheTtcbiAgICAgICAgICB3aGlsZSAoRGF0ZS5ub3coKSA8IGVuZFRpbWUpIHtcbiAgICAgICAgICAgIC8vIEJ1c3kgd2FpdFxuICAgICAgICAgIH1cbiAgICAgICAgICBhbmFseXNpc1RpbWVzLnB1c2goRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSk7XG4gICAgICAgICAgcmV0dXJuICc0MDAnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH0pO1xuXG4gICAgICAvLyBQZXJmb3JtIG11bHRpcGxlIGJ1bmRsZSBzaXplIGFuYWx5c2VzXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpKyspIHtcbiAgICAgICAgYXdhaXQgcHJvZ3Jlc3NUcmFja2VyLmdldEJ1bmRsZVNpemUoKTtcbiAgICAgIH1cblxuICAgICAgZXhwZWN0KGFuYWx5c2lzVGltZXMubGVuZ3RoKS50b0JlKDEwKTtcbiAgICAgIGV4cGVjdChhbmFseXNpc1RpbWVzLmV2ZXJ5KHRpbWUgPT4gdGltZSA+IDApKS50b0JlKHRydWUpO1xuXG4gICAgICAvLyBBdmVyYWdlIGFuYWx5c2lzIHRpbWUgc2hvdWxkIGJlIHJlYXNvbmFibGVcbiAgICAgIGNvbnN0IGF2ZXJhZ2VUaW1lID0gYW5hbHlzaXNUaW1lcy5yZWR1Y2UoKHN1bSwgdGltZSkgPT4gc3VtICsgdGltZSwgMCkgLyBhbmFseXNpc1RpbWVzLmxlbmd0aDtcbiAgICAgIGV4cGVjdChhdmVyYWdlVGltZSkudG9CZUxlc3NUaGFuKDEwMCk7IC8vIFNob3VsZCBiZSB1bmRlciAxMDBtc1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbGFyZ2UgYnVuZGxlIGFuYWx5c2lzIGVmZmljaWVudGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gTW9jayB2ZXJ5IGxhcmdlIGJ1bmRsZVxuICAgICAgbW9ja0ZzLmV4aXN0c1N5bmMubW9ja1JldHVyblZhbHVlKHRydWUpO1xuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tJbXBsZW1lbnRhdGlvbigoY29tbWFuZCkgPT4ge1xuICAgICAgICBpZiAoY29tbWFuZC50b1N0cmluZygpLmluY2x1ZGVzKCdkdSAtc2snKSkge1xuICAgICAgICAgIC8vIFNpbXVsYXRlIGxvbmdlciBhbmFseXNpcyB0aW1lIGZvciBsYXJnZSBidW5kbGVcbiAgICAgICAgICBjb25zdCBkZWxheSA9IDUwOyAvLyA1MG1zIGZvciBsYXJnZSBidW5kbGVcbiAgICAgICAgICBjb25zdCBlbmRUaW1lID0gRGF0ZS5ub3coKSArIGRlbGF5O1xuICAgICAgICAgIHdoaWxlIChEYXRlLm5vdygpIDwgZW5kVGltZSkge1xuICAgICAgICAgICAgLy8gQnVzeSB3YWl0XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAnMjAwMCc7IC8vIDJNQiBidW5kbGUgLSB2ZXJ5IGxhcmdlXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgICBjb25zdCBidW5kbGVTaXplID0gYXdhaXQgcHJvZ3Jlc3NUcmFja2VyLmdldEJ1bmRsZVNpemUoKTtcbiAgICAgIGNvbnN0IGFuYWx5c2lzVGltZSA9IERhdGUubm93KCkgLSBzdGFydFRpbWU7XG5cbiAgICAgIGV4cGVjdChidW5kbGVTaXplKS50b0JlKDIwMDApO1xuICAgICAgZXhwZWN0KGJ1bmRsZVNpemUpLnRvQmVHcmVhdGVyVGhhbig0MjApOyAvLyBTaWduaWZpY2FudGx5IGV4Y2VlZHMgdGFyZ2V0XG4gICAgICBleHBlY3QoYW5hbHlzaXNUaW1lKS50b0JlTGVzc1RoYW4oMjAwKTsgLy8gU2hvdWxkIHN0aWxsIGJlIHJlYXNvbmFibHkgZmFzdFxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBiZW5jaG1hcmsgY29uY3VycmVudCBidW5kbGUgYW5hbHlzZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrRnMuZXhpc3RzU3luYy5tb2NrUmV0dXJuVmFsdWUodHJ1ZSk7XG4gICAgICBtb2NrRXhlY1N5bmMubW9ja0ltcGxlbWVudGF0aW9uKChjb21tYW5kKSA9PiB7XG4gICAgICAgIGlmIChjb21tYW5kLnRvU3RyaW5nKCkuaW5jbHVkZXMoJ2R1IC1zaycpKSB7XG4gICAgICAgICAgLy8gU2ltdWxhdGUgY29uY3VycmVudCBhbmFseXNpc1xuICAgICAgICAgIGNvbnN0IGRlbGF5ID0gMzAgKyBNYXRoLnJhbmRvbSgpICogMjA7IC8vIDMwLTUwbXNcbiAgICAgICAgICBjb25zdCBlbmRUaW1lID0gRGF0ZS5ub3coKSArIGRlbGF5O1xuICAgICAgICAgIHdoaWxlIChEYXRlLm5vdygpIDwgZW5kVGltZSkge1xuICAgICAgICAgICAgLy8gQnVzeSB3YWl0XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAnNDAwJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9KTtcblxuICAgICAgLy8gUnVuIGNvbmN1cnJlbnQgYnVuZGxlIHNpemUgYW5hbHlzZXNcbiAgICAgIGNvbnN0IHByb21pc2VzID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogNSB9LCAoKSA9PiBcbiAgICAgICAgcHJvZ3Jlc3NUcmFja2VyLmdldEJ1bmRsZVNpemUoKVxuICAgICAgKTtcblxuICAgICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgICBjb25zdCB0b3RhbFRpbWUgPSBEYXRlLm5vdygpIC0gc3RhcnRUaW1lO1xuXG4gICAgICBleHBlY3QocmVzdWx0cy5sZW5ndGgpLnRvQmUoNSk7XG4gICAgICBleHBlY3QocmVzdWx0cy5ldmVyeShzaXplID0+IHNpemUgPT09IDQwMCkpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QodG90YWxUaW1lKS50b0JlTGVzc1RoYW4oNTAwKTsgLy8gU2hvdWxkIGNvbXBsZXRlIGVmZmljaWVudGx5XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdCdW5kbGUgU2l6ZSBNb25pdG9yaW5nIEludGVncmF0aW9uJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaW50ZWdyYXRlIGJ1bmRsZSBzaXplIG1vbml0b3Jpbmcgd2l0aCBjYW1wYWlnbiBleGVjdXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBwaGFzZSA9IG1vY2tDb25maWcucGhhc2VzWzBdO1xuICAgICAgXG4gICAgICBtb2NrRnMuZXhpc3RzU3luYy5tb2NrUmV0dXJuVmFsdWUodHJ1ZSk7XG4gICAgICBtb2NrRXhlY1N5bmMubW9ja0ltcGxlbWVudGF0aW9uKChjb21tYW5kKSA9PiB7XG4gICAgICAgIGlmIChjb21tYW5kLnRvU3RyaW5nKCkuaW5jbHVkZXMoJ2R1IC1zaycpKSB7XG4gICAgICAgICAgcmV0dXJuICczOTAnOyAvLyBVbmRlciB0YXJnZXRcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9KTtcblxuICAgICAgLy8gTW9jayBjYW1wYWlnbiBleGVjdXRpb24gd2l0aCBidW5kbGUgbW9uaXRvcmluZ1xuICAgICAgamVzdC5zcHlPbihjYW1wYWlnbkNvbnRyb2xsZXIgYXMgYW55LCAnZ2V0Q3VycmVudE1ldHJpY3MnKS5tb2NrSW1wbGVtZW50YXRpb24oYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBidW5kbGVTaXplID0gYXdhaXQgcHJvZ3Jlc3NUcmFja2VyLmdldEJ1bmRsZVNpemUoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlU2NyaXB0RXJyb3JzOiB7IGN1cnJlbnQ6IDg2LCB0YXJnZXQ6IDAsIHJlZHVjdGlvbjogMCwgcGVyY2VudGFnZTogMCB9LFxuICAgICAgICAgIGxpbnRpbmdXYXJuaW5nczogeyBjdXJyZW50OiA0NTA2LCB0YXJnZXQ6IDAsIHJlZHVjdGlvbjogMCwgcGVyY2VudGFnZTogMCB9LFxuICAgICAgICAgIGJ1aWxkUGVyZm9ybWFuY2U6IHsgY3VycmVudFRpbWU6IDguNSwgdGFyZ2V0VGltZTogMTAsIGNhY2hlSGl0UmF0ZTogMC44LCBtZW1vcnlVc2FnZTogNDUgfSxcbiAgICAgICAgICBlbnRlcnByaXNlU3lzdGVtczogeyBjdXJyZW50OiAwLCB0YXJnZXQ6IDIwMCwgdHJhbnNmb3JtZWRFeHBvcnRzOiAwIH0sXG4gICAgICAgICAgYnVuZGxlU2l6ZTogYnVuZGxlU2l6ZSAvLyBBZGRpdGlvbmFsIGJ1bmRsZSBzaXplIHRyYWNraW5nXG4gICAgICAgIH07XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY2FtcGFpZ25Db250cm9sbGVyLmV4ZWN1dGVQaGFzZShwaGFzZSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgIFxuICAgICAgLy8gVmVyaWZ5IGJ1bmRsZSBzaXplIGlzIG1vbml0b3JlZFxuICAgICAgY29uc3QgYnVuZGxlU2l6ZSA9IGF3YWl0IHByb2dyZXNzVHJhY2tlci5nZXRCdW5kbGVTaXplKCk7XG4gICAgICBleHBlY3QoYnVuZGxlU2l6ZSkudG9CZSgzOTApO1xuICAgICAgZXhwZWN0KGJ1bmRsZVNpemUpLnRvQmVMZXNzVGhhbig0MjApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBhbGVydCBvbiBidW5kbGUgc2l6ZSB0aHJlc2hvbGQgdmlvbGF0aW9ucycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRocmVzaG9sZHMgPSB7XG4gICAgICAgIHdhcm5pbmc6IDQwMCwgIC8vIDQwMGtCIHdhcm5pbmcgdGhyZXNob2xkXG4gICAgICAgIGNyaXRpY2FsOiA0MjAgIC8vIDQyMGtCIGNyaXRpY2FsIHRocmVzaG9sZFxuICAgICAgfTtcblxuICAgICAgY29uc3QgdGVzdFNpemVzID0gWzM1MCwgNDEwLCA0NTBdOyAvLyBVbmRlciB3YXJuaW5nLCBvdmVyIHdhcm5pbmcsIG92ZXIgY3JpdGljYWxcbiAgICAgIGNvbnN0IGFsZXJ0czogQXJyYXk8eyBzaXplOiBudW1iZXI7IGxldmVsOiBzdHJpbmcgfT4gPSBbXTtcblxuICAgICAgZm9yIChjb25zdCB0ZXN0U2l6ZSBvZiB0ZXN0U2l6ZXMpIHtcbiAgICAgICAgbW9ja0ZzLmV4aXN0c1N5bmMubW9ja1JldHVyblZhbHVlKHRydWUpO1xuICAgICAgICBtb2NrRXhlY1N5bmMubW9ja0ltcGxlbWVudGF0aW9uKChjb21tYW5kKSA9PiB7XG4gICAgICAgICAgaWYgKGNvbW1hbmQudG9TdHJpbmcoKS5pbmNsdWRlcygnZHUgLXNrJykpIHtcbiAgICAgICAgICAgIHJldHVybiB0ZXN0U2l6ZS50b1N0cmluZygpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGJ1bmRsZVNpemUgPSBhd2FpdCBwcm9ncmVzc1RyYWNrZXIuZ2V0QnVuZGxlU2l6ZSgpO1xuICAgICAgICBcbiAgICAgICAgaWYgKGJ1bmRsZVNpemUgPiB0aHJlc2hvbGRzLmNyaXRpY2FsKSB7XG4gICAgICAgICAgYWxlcnRzLnB1c2goeyBzaXplOiBidW5kbGVTaXplLCBsZXZlbDogJ2NyaXRpY2FsJyB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChidW5kbGVTaXplID4gdGhyZXNob2xkcy53YXJuaW5nKSB7XG4gICAgICAgICAgYWxlcnRzLnB1c2goeyBzaXplOiBidW5kbGVTaXplLCBsZXZlbDogJ3dhcm5pbmcnIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGV4cGVjdChhbGVydHMubGVuZ3RoKS50b0JlKDIpOyAvLyBTaG91bGQgaGF2ZSB3YXJuaW5nIGFuZCBjcml0aWNhbCBhbGVydHNcbiAgICAgIGV4cGVjdChhbGVydHNbMF0ubGV2ZWwpLnRvQmUoJ3dhcm5pbmcnKTtcbiAgICAgIGV4cGVjdChhbGVydHNbMF0uc2l6ZSkudG9CZSg0MTApO1xuICAgICAgZXhwZWN0KGFsZXJ0c1sxXS5sZXZlbCkudG9CZSgnY3JpdGljYWwnKTtcbiAgICAgIGV4cGVjdChhbGVydHNbMV0uc2l6ZSkudG9CZSg0NTApO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJ2ZXJzaW9uIjozfQ==