{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/scripts/validateLintingPerformance.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/scripts/validateLintingPerformance.ts"],"sourcesContent":["\n\n/**\n * Linting Performance Validation Script\n * \n * Validates the 60-80% performance improvement with enhanced caching,\n * parallel processing optimization, memory limits, and incremental linting.\n * \n * Requirements: 5.1, 5.2, 5.3\n */\n\nimport { execSync, spawn } from 'child_process';\nimport { existsSync, statSync, readFileSync, writeFileSync, unlinkSync } from 'fs';\nimport { join } from 'path';\n\ninterface PerformanceMetrics {\n  executionTime: number;\n  memoryUsage: number;\n  cacheHitRate: number;\n  filesProcessed: number;\n  parallelProcesses: number;\n  incrementalTime?: number;\n}\n\ninterface ValidationResult {\n  testName: string;\n  passed: boolean;\n  metrics: PerformanceMetrics;\n  expectedImprovement: number;\n  actualImprovement: number;\n  details: string;\n}\n\nclass LintingPerformanceValidator {\n  private baselineMetrics: PerformanceMetrics | null = null;\n  private results: ValidationResult[] = [];\n\n  async validatePerformanceOptimizations(): Promise<void> {\n    console.log('🚀 Starting Linting Performance Validation...\\n');\n\n    try {\n      // 1. Establish baseline performance (without optimizations)\n      await this.establishBaseline();\n\n      // 2. Validate enhanced caching (60-80% improvement)\n      await this.validateEnhancedCaching();\n\n      // 3. Test parallel processing optimization (30 files per process)\n      await this.validateParallelProcessing();\n\n      // 4. Ensure memory optimization (4096MB limit)\n      await this.validateMemoryOptimization();\n\n      // 5. Monitor incremental linting (sub-10 second feedback)\n      await this.validateIncrementalLinting();\n\n      // 6. Generate comprehensive report\n      this.generatePerformanceReport();\n\n    } catch (error) {\n      console.error('❌ Performance validation failed:', error);\n      process.exit(1);\n    }\n  }\n\n  private async establishBaseline(): Promise<void> {\n    console.log('📊 Establishing baseline performance metrics...');\n\n    // Clear all caches to get true baseline\n    this.clearAllCaches();\n\n    const startTime = Date.now();\n    const startMemory = process.memoryUsage();\n\n    try {\n      // Run basic linting without optimizations\n      const output = execSync('yarn lint --no-cache --max-warnings=10000', {\n        encoding: 'utf8',\n        stdio: 'pipe',\n        timeout: 120000 // 2 minute timeout\n      });\n\n      const endTime = Date.now();\n      const endMemory = process.memoryUsage();\n\n      this.baselineMetrics = {\n        executionTime: endTime - startTime,\n        memoryUsage: endMemory.heapUsed - startMemory.heapUsed,\n        cacheHitRate: 0, // No cache for baseline\n        filesProcessed: this.extractFilesProcessed(output),\n        parallelProcesses: 1 // Single process for baseline\n      };\n\n      console.log(`✅ Baseline established: ${this.baselineMetrics.executionTime}ms, ${Math.round(this.baselineMetrics.memoryUsage / 1024 / 1024)}MB`);\n\n    } catch (error) {\n      console.warn('⚠️  Baseline measurement had issues, using estimated values');\n      this.baselineMetrics = {\n        executionTime: 60000, // 60 seconds estimated\n        memoryUsage: 512 * 1024 * 1024, // 512MB estimated\n        cacheHitRate: 0,\n        filesProcessed: 1000, // Estimated\n        parallelProcesses: 1\n      };\n    }\n  }\n\n  private async validateEnhancedCaching(): Promise<void> {\n    console.log('🔄 Validating enhanced caching performance...');\n\n    // First run to populate cache\n    console.log('  Populating cache...');\n    try {\n      execSync('yarn lint:fast --max-warnings=10000', {\n        encoding: 'utf8',\n        stdio: 'pipe',\n        timeout: 120000\n      });\n    } catch (error) {\n      console.warn('  Cache population had issues, continuing...');\n    }\n\n    // Second run to measure cache performance\n    const startTime = Date.now();\n    const startMemory = process.memoryUsage();\n\n    try {\n      const output = execSync('yarn lint:fast --max-warnings=10000', {\n        encoding: 'utf8',\n        stdio: 'pipe',\n        timeout: 60000\n      });\n\n      const endTime = Date.now();\n      const endMemory = process.memoryUsage();\n\n      const metrics: PerformanceMetrics = {\n        executionTime: endTime - startTime,\n        memoryUsage: endMemory.heapUsed - startMemory.heapUsed,\n        cacheHitRate: this.calculateCacheHitRate(),\n        filesProcessed: this.extractFilesProcessed(output),\n        parallelProcesses: this.extractParallelProcesses(output)\n      };\n\n      const improvement = this.baselineMetrics \n        ? ((this.baselineMetrics.executionTime - metrics.executionTime) / this.baselineMetrics.executionTime) * 100\n        : 0;\n      const passed = improvement >= 60 && improvement <= 80;\n\n      this.results.push({\n        testName: 'Enhanced Caching Performance',\n        passed,\n        metrics,\n        expectedImprovement: 70, // Target 60-80%\n        actualImprovement: improvement,\n        details: `Cache hit rate: ${metrics.cacheHitRate}%, Time reduction: ${improvement.toFixed(1)}%`\n      });\n\n      console.log(`  ${passed ? '✅' : '❌'} Caching validation: ${improvement.toFixed(1)}% improvement (target: 60-80%)`);\n\n    } catch (error) {\n      console.error('  ❌ Caching validation failed:', error);\n      this.results.push({\n        testName: 'Enhanced Caching Performance',\n        passed: false,\n        metrics: { executionTime: 0, memoryUsage: 0, cacheHitRate: 0, filesProcessed: 0, parallelProcesses: 0 },\n        expectedImprovement: 70,\n        actualImprovement: 0,\n        details: `Error: ${error}`\n      });\n    }\n  }\n\n  private async validateParallelProcessing(): Promise<void> {\n    console.log('⚡ Validating parallel processing optimization...');\n\n    const startTime = Date.now();\n    const startMemory = process.memoryUsage();\n\n    try {\n      const output = execSync('yarn lint:parallel --max-warnings=10000', {\n        encoding: 'utf8',\n        stdio: 'pipe',\n        timeout: 120000\n      });\n\n      const endTime = Date.now();\n      const endMemory = process.memoryUsage();\n\n      const metrics: PerformanceMetrics = {\n        executionTime: endTime - startTime,\n        memoryUsage: endMemory.heapUsed - startMemory.heapUsed,\n        cacheHitRate: this.calculateCacheHitRate(),\n        filesProcessed: this.extractFilesProcessed(output),\n        parallelProcesses: this.extractParallelProcesses(output)\n      };\n\n      // Validate 30 files per process optimization\n      const expectedParallelProcesses = Math.ceil(metrics.filesProcessed / 30);\n      const parallelOptimized = metrics.parallelProcesses >= Math.min(expectedParallelProcesses, 4); // Max 4 processes\n\n      const improvement = this.baselineMetrics \n        ? ((this.baselineMetrics.executionTime - metrics.executionTime) / this.baselineMetrics.executionTime) * 100\n        : 0;\n      const passed = parallelOptimized && improvement > 0;\n\n      this.results.push({\n        testName: 'Parallel Processing Optimization',\n        passed,\n        metrics,\n        expectedImprovement: 40, // Expected from parallelization\n        actualImprovement: improvement,\n        details: `Parallel processes: ${metrics.parallelProcesses}, Files per process: ${Math.round(metrics.filesProcessed / metrics.parallelProcesses)}`\n      });\n\n      console.log(`  ${passed ? '✅' : '❌'} Parallel processing: ${metrics.parallelProcesses} processes, ${improvement.toFixed(1)}% improvement`);\n\n    } catch (error) {\n      console.error('  ❌ Parallel processing validation failed:', error);\n      this.results.push({\n        testName: 'Parallel Processing Optimization',\n        passed: false,\n        metrics: { executionTime: 0, memoryUsage: 0, cacheHitRate: 0, filesProcessed: 0, parallelProcesses: 0 },\n        expectedImprovement: 40,\n        actualImprovement: 0,\n        details: `Error: ${error}`\n      });\n    }\n  }\n\n  private async validateMemoryOptimization(): Promise<void> {\n    console.log('💾 Validating memory optimization (4096MB limit)...');\n\n    const startTime = Date.now();\n    let peakMemoryUsage = 0;\n\n    try {\n      // Monitor memory usage during linting\n      const memoryMonitor = setInterval(() => {\n        const currentMemory = process.memoryUsage().heapUsed;\n        peakMemoryUsage = Math.max(peakMemoryUsage, currentMemory);\n      }, 100);\n\n      const output = execSync('yarn lint:performance --max-warnings=10000', {\n        encoding: 'utf8',\n        stdio: 'pipe',\n        timeout: 120000,\n        env: { ...process.env, NODE_OPTIONS: '--max-old-space-size=4096' }\n      });\n\n      clearInterval(memoryMonitor);\n      const endTime = Date.now();\n\n      const metrics: PerformanceMetrics = {\n        executionTime: endTime - startTime,\n        memoryUsage: peakMemoryUsage,\n        cacheHitRate: this.calculateCacheHitRate(),\n        filesProcessed: this.extractFilesProcessed(output),\n        parallelProcesses: this.extractParallelProcesses(output)\n      };\n\n      // Validate memory stays under 4096MB limit\n      const memoryLimitMB = 4096;\n      const actualMemoryMB = peakMemoryUsage / 1024 / 1024;\n      const memoryOptimized = actualMemoryMB <= memoryLimitMB;\n\n      const improvement = this.baselineMetrics \n        ? ((this.baselineMetrics.memoryUsage - peakMemoryUsage) / this.baselineMetrics.memoryUsage) * 100\n        : 0;\n      const passed = memoryOptimized;\n\n      this.results.push({\n        testName: 'Memory Optimization',\n        passed,\n        metrics,\n        expectedImprovement: 20, // Expected memory reduction\n        actualImprovement: improvement,\n        details: `Peak memory: ${actualMemoryMB.toFixed(1)}MB (limit: ${memoryLimitMB}MB)`\n      });\n\n      console.log(`  ${passed ? '✅' : '❌'} Memory optimization: ${actualMemoryMB.toFixed(1)}MB peak (limit: ${memoryLimitMB}MB)`);\n\n    } catch (error) {\n      console.error('  ❌ Memory optimization validation failed:', error);\n      this.results.push({\n        testName: 'Memory Optimization',\n        passed: false,\n        metrics: { executionTime: 0, memoryUsage: 0, cacheHitRate: 0, filesProcessed: 0, parallelProcesses: 0 },\n        expectedImprovement: 20,\n        actualImprovement: 0,\n        details: `Error: ${error}`\n      });\n    }\n  }\n\n  private async validateIncrementalLinting(): Promise<void> {\n    console.log('⚡ Validating incremental linting (sub-10 second feedback)...');\n\n    try {\n      // Create a test file change\n      const testFile = 'src/test-incremental-change.ts';\n      const testContent = `// Test file for incremental linting\nexport const testVariable = 'test';\n`;\n\n      writeFileSync(testFile, testContent);\n\n      const startTime = Date.now();\n\n      try {\n        const output = execSync('yarn lint:changed --max-warnings=10000', {\n          encoding: 'utf8',\n          stdio: 'pipe',\n          timeout: 15000 // 15 second timeout\n        });\n\n        const endTime = Date.now();\n        const incrementalTime = endTime - startTime;\n\n        const metrics: PerformanceMetrics = {\n          executionTime: incrementalTime,\n          memoryUsage: 0, // Not measured for incremental\n          cacheHitRate: this.calculateCacheHitRate(),\n          filesProcessed: this.extractFilesProcessed(output),\n          parallelProcesses: 1,\n          incrementalTime\n        };\n\n        // Validate sub-10 second feedback\n        const passed = incrementalTime < 10000; // 10 seconds\n\n        this.results.push({\n          testName: 'Incremental Linting Performance',\n          passed,\n          metrics,\n          expectedImprovement: 90, // Expected massive improvement for incremental\n          actualImprovement: this.baselineMetrics \n            ? ((this.baselineMetrics.executionTime - incrementalTime) / this.baselineMetrics.executionTime) * 100\n            : 0,\n          details: `Incremental time: ${incrementalTime}ms (target: <10s)`\n        });\n\n        console.log(`  ${passed ? '✅' : '❌'} Incremental linting: ${incrementalTime}ms (target: <10s)`);\n\n      } finally {\n        // Clean up test file\n        if (existsSync(testFile)) {\n          unlinkSync(testFile);\n        }\n      }\n\n    } catch (error) {\n      console.error('  ❌ Incremental linting validation failed:', error);\n      this.results.push({\n        testName: 'Incremental Linting Performance',\n        passed: false,\n        metrics: { executionTime: 0, memoryUsage: 0, cacheHitRate: 0, filesProcessed: 0, parallelProcesses: 0 },\n        expectedImprovement: 90,\n        actualImprovement: 0,\n        details: `Error: ${error}`\n      });\n    }\n  }\n\n  private clearAllCaches(): void {\n    const cacheFiles = [\n      '.eslintcache',\n      '.eslint-ts-cache',\n      'node_modules/.cache/eslint',\n      '.next/cache'\n    ];\n\n    cacheFiles.forEach(cacheFile => {\n      try {\n        if (existsSync(cacheFile)) {\n          execSync(`rm -rf ${cacheFile}`, { stdio: 'pipe' });\n        }\n      } catch (error) {\n        // Ignore cache cleanup errors\n      }\n    });\n  }\n\n  private calculateCacheHitRate(): number {\n    try {\n      if (existsSync('.eslintcache')) {\n        const cacheStats = statSync('.eslintcache');\n        const cacheAge = Date.now() - cacheStats.mtime.getTime();\n        // Estimate cache hit rate based on cache age and size\n        return cacheAge < 600000 ? 85 : 45; // 85% if cache is fresh (<10 min), 45% otherwise\n      }\n    } catch (error) {\n      // Ignore cache calculation errors\n    }\n    return 0;\n  }\n\n  private extractFilesProcessed(output: string): number {\n    // Try to extract file count from ESLint output\n    const fileMatches = output.match(/(\\d+)\\s+files?\\s+linted/i);\n    if (fileMatches) {\n      return parseInt(fileMatches[1]);\n    }\n\n    // Fallback: count lines that look like file paths\n    const lines = output.split('\\n');\n    const fileLines = lines.filter(line => \n      line.includes('.ts') || line.includes('.tsx') || line.includes('.js') || line.includes('.jsx')\n    );\n    \n    return Math.max(fileLines.length, 100); // Minimum estimate\n  }\n\n  private extractParallelProcesses(output: string): number {\n    // Try to extract parallel process info from output\n    const parallelMatches = output.match(/(\\d+)\\s+parallel\\s+processes?/i);\n    if (parallelMatches) {\n      return parseInt(parallelMatches[1]);\n    }\n\n    // Estimate based on system capabilities\n    const cpuCount = require('os').cpus().length;\n    return Math.min(cpuCount, 4); // Max 4 processes\n  }\n\n  private generatePerformanceReport(): void {\n    console.log('\\n📋 Performance Validation Report');\n    console.log('================================\\n');\n\n    const passedTests = this.results.filter(r => r.passed).length;\n    const totalTests = this.results.length;\n    const overallPassed = passedTests === totalTests;\n\n    console.log(`Overall Status: ${overallPassed ? '✅ PASSED' : '❌ FAILED'} (${passedTests}/${totalTests} tests passed)\\n`);\n\n    if (this.baselineMetrics) {\n      console.log('Baseline Metrics:');\n      console.log(`  Execution Time: ${this.baselineMetrics.executionTime}ms`);\n      console.log(`  Memory Usage: ${Math.round(this.baselineMetrics.memoryUsage / 1024 / 1024)}MB`);\n      console.log(`  Files Processed: ${this.baselineMetrics.filesProcessed}\\n`);\n    }\n\n    this.results.forEach(result => {\n      console.log(`${result.passed ? '✅' : '❌'} ${result.testName}`);\n      console.log(`   Expected: ${result.expectedImprovement}% improvement`);\n      console.log(`   Actual: ${result.actualImprovement.toFixed(1)}% improvement`);\n      console.log(`   Details: ${result.details}`);\n      console.log(`   Execution Time: ${result.metrics.executionTime}ms`);\n      if (result.metrics.memoryUsage > 0) {\n        console.log(`   Memory Usage: ${Math.round(result.metrics.memoryUsage / 1024 / 1024)}MB`);\n      }\n      console.log(`   Cache Hit Rate: ${result.metrics.cacheHitRate}%`);\n      console.log(`   Files Processed: ${result.metrics.filesProcessed}`);\n      console.log(`   Parallel Processes: ${result.metrics.parallelProcesses}\\n`);\n    });\n\n    // Save detailed report\n    const reportData = {\n      timestamp: new Date().toISOString(),\n      overallPassed,\n      passedTests,\n      totalTests,\n      baselineMetrics: this.baselineMetrics,\n      results: this.results\n    };\n\n    writeFileSync('linting-performance-validation-report.json', JSON.stringify(reportData, null, 2));\n    console.log('📄 Detailed report saved to: linting-performance-validation-report.json');\n\n    if (!overallPassed) {\n      console.log('\\n❌ Performance validation failed. Some optimizations may need adjustment.');\n      process.exit(1);\n    } else {\n      console.log('\\n🎉 All performance optimizations validated successfully ?? undefined');\n    }\n  }\n}\n\n// Main execution\nif (require.main === module) {\n  const validator = new LintingPerformanceValidator();\n  validator.validatePerformanceOptimizations().catch(error => {\n    console.error('Fatal error:', error);\n    process.exit(1);\n  });\n}\n\nexport { LintingPerformanceValidator };"],"version":3}