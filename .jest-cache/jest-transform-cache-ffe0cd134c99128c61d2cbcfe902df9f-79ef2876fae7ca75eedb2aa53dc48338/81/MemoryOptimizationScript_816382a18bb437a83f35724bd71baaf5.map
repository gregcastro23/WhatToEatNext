{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/utils/MemoryOptimizationScript.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/utils/MemoryOptimizationScript.ts"],"sourcesContent":["\n\n/**\n * Memory Optimization Script for Test Environment\n * \n * This script provides comprehensive memory optimization utilities\n * for the WhatToEatNext test infrastructure.\n */\n\nimport { TestMemoryMonitor } from './TestMemoryMonitor';\nimport MemoryLeakDetector from './MemoryLeakDetector';\n\ninterface OptimizationResult {\n  success: boolean;\n  memoryFreed: number;\n  optimizationsApplied: string[];\n  warnings: string[];\n  errors: string[];\n}\n\nexport class MemoryOptimizationScript {\n  private monitor: TestMemoryMonitor;\n  private detector: MemoryLeakDetector;\n\n  constructor() {\n    this.monitor = TestMemoryMonitor.createForCI();\n    this.detector = new MemoryLeakDetector();\n  }\n\n  /**\n   * Run comprehensive memory optimization\n   */\n  async runOptimization(): Promise<OptimizationResult> {\n    console.log('🚀 Starting comprehensive memory optimization...\\n');\n\n    const initialMemory = process.memoryUsage().heapUsed;\n    const optimizationsApplied: string[] = [];\n    const warnings: string[] = [];\n    const errors: string[] = [];\n\n    try {\n      // Step 1: Detect memory leaks\n      console.log('🔍 Step 1: Detecting memory leaks...');\n      const leakReport = this.detector.scanForLeaks();\n      \n      if (leakReport.leaksDetected.length > 0) {\n        console.log(`Found ${leakReport.leaksDetected.length} potential memory leaks`);\n        \n        // Apply automatic fixes\n        const fixes = this.detector.applyAutomaticFixes();\n        optimizationsApplied.push(...fixes.fixed);\n        if (fixes.failed.length > 0) {\n          warnings.push(...fixes.failed);\n        }\n      } else {\n        console.log('✅ No memory leaks detected');\n      }\n\n      // Step 2: Optimize Jest configuration\n      console.log('\\n🔧 Step 2: Optimizing Jest configuration...');\n      await this.optimizeJestConfiguration();\n      optimizationsApplied.push('Optimized Jest configuration');\n\n      // Step 3: Clean up global references\n      console.log('\\n🧹 Step 3: Cleaning up global references...');\n      this.cleanupGlobalReferences();\n      optimizationsApplied.push('Cleaned up global references');\n\n      // Step 4: Optimize Node.js settings\n      console.log('\\n⚙️ Step 4: Optimizing Node.js settings...');\n      this.optimizeNodeSettings();\n      optimizationsApplied.push('Optimized Node.js settings');\n\n      // Step 5: Force garbage collection\n      console.log('\\n🗑️ Step 5: Forcing garbage collection...');\n      const gcResult = this.forceGarbageCollection();\n      if (gcResult) {\n        optimizationsApplied.push('Forced garbage collection');\n      } else {\n        warnings.push('Garbage collection not available');\n      }\n\n      // Step 6: Generate optimization report\n      console.log('\\n📊 Step 6: Generating optimization report...');\n      const finalMemory = process.memoryUsage().heapUsed;\n      const memoryFreed = initialMemory - finalMemory;\n\n      const result: OptimizationResult = {\n        success: true,\n        memoryFreed: memoryFreed / (1024 * 1024), // Convert to MB\n        optimizationsApplied,\n        warnings,\n        errors\n      };\n\n      this.logOptimizationResult(result);\n      return result;\n\n    } catch (error) {\n      errors.push(`Optimization failed: ${error}`);\n      return {\n        success: false,\n        memoryFreed: 0,\n        optimizationsApplied,\n        warnings,\n        errors\n      };\n    }\n  }\n\n  /**\n   * Optimize Jest configuration for memory efficiency\n   */\n  private async optimizeJestConfiguration(): Promise<void> {\n    const fs = require('fs');\n    const path = require('path');\n    \n    const jestConfigPath = path.join(process.cwd(), 'jest.config.js');\n    \n    if (!fs.existsSync(jestConfigPath)) {\n      console.log('⚠️ Jest config not found, skipping Jest optimization');\n      return;\n    }\n\n    // Read current config\n    let configContent = fs.readFileSync(jestConfigPath, 'utf8');\n    \n    // Apply memory optimizations if not already present\n    const optimizations = [\n      { key: 'maxWorkers', value: 'process.env.CI ? 1 : 2' },\n      { key: 'workerIdleMemoryLimit', value: \"'512MB'\" },\n      { key: 'logHeapUsage', value: 'true' },\n      { key: 'detectOpenHandles', value: 'true' },\n      { key: 'forceExit', value: 'true' }\n    ];\n\n    let modified = false;\n    optimizations.forEach(opt => {\n      if (!configContent.includes(opt.key)) {\n        // Add the optimization\n        const insertion = `  ${opt.key}: ${opt.value},\\n`;\n        configContent = configContent.replace(\n          /(const config = {[^}]*)/,\n          `$1\\n${insertion}`\n        );\n        modified = true;\n      }\n    });\n\n    if (modified) {\n      fs.writeFileSync(jestConfigPath, configContent);\n      console.log('✅ Jest configuration optimized');\n    } else {\n      console.log('✅ Jest configuration already optimized');\n    }\n  }\n\n  /**\n   * Clean up global references that might cause memory leaks\n   */\n  private cleanupGlobalReferences(): void {\n    let cleaned = 0;\n\n    // Clear test cache\n    if (global.__TEST_CACHE__) {\n      if (typeof global.__TEST_CACHE__.clear === 'function') {\n        global.__TEST_CACHE__.clear();\n      } else {\n        global.__TEST_CACHE__ = new Map();\n      }\n      cleaned++;\n    }\n\n    // Clear test references\n    if (global.__TEST_REFS__) {\n      global.__TEST_REFS__.length = 0;\n      cleaned++;\n    }\n\n    // Clear memory tracking\n    if (global.__TEST_MEMORY_TRACKING__) {\n      delete global.__TEST_MEMORY_TRACKING__;\n      cleaned++;\n    }\n\n    // Clear DOM if available\n    if (typeof document !== 'undefined') {\n      document.body.innerHTML = '';\n      cleaned++;\n    }\n\n    // Clear event listeners\n    if (typeof window !== 'undefined' && (window as any)._eventListeners) {\n      (window as any)._eventListeners = {};\n      cleaned++;\n    }\n\n    // Clear Jest modules\n    if (jest && jest.resetModules) {\n      jest.resetModules();\n      cleaned++;\n    }\n\n    console.log(`✅ Cleaned up ${cleaned} global references`);\n  }\n\n  /**\n   * Optimize Node.js settings for memory efficiency\n   */\n  private optimizeNodeSettings(): void {\n    const optimizations: string[] = [];\n\n    // Set memory limits if not already set\n    if (!process.env.NODE_OPTIONS?.includes('--max-old-space-size')) {\n      process.env.NODE_OPTIONS = (process.env.NODE_OPTIONS || '') + ' --max-old-space-size=2048';\n      optimizations.push('Set max old space size to 2GB');\n    }\n\n    // Enable garbage collection exposure\n    if (!process.env.NODE_OPTIONS?.includes('--expose-gc')) {\n      process.env.NODE_OPTIONS = (process.env.NODE_OPTIONS || '') + ' --expose-gc';\n      optimizations.push('Enabled garbage collection exposure');\n    }\n\n    // Optimize garbage collection\n    if (!process.env.NODE_OPTIONS?.includes('--optimize-for-size')) {\n      process.env.NODE_OPTIONS = (process.env.NODE_OPTIONS || '') + ' --optimize-for-size';\n      optimizations.push('Enabled size optimization');\n    }\n\n    if (optimizations.length > 0) {\n      console.log(`✅ Applied ${optimizations.length} Node.js optimizations`);\n    } else {\n      console.log('✅ Node.js settings already optimized');\n    }\n  }\n\n  /**\n   * Force garbage collection if available\n   */\n  private forceGarbageCollection(): boolean {\n    if (global.gc) {\n      try {\n        global.gc();\n        return true;\n      } catch (error) {\n        console.warn('Failed to force garbage collection:', error);\n        return false;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Log optimization results\n   */\n  private logOptimizationResult(result: OptimizationResult): void {\n    console.log('\\n📊 Memory Optimization Results:');\n    console.log('================================');\n    console.log(`Success: ${result.success ? '✅' : '❌'}`);\n    console.log(`Memory freed: ${result.memoryFreed.toFixed(2)}MB`);\n    console.log(`Optimizations applied: ${result.optimizationsApplied.length}`);\n    \n    if (result.optimizationsApplied.length > 0) {\n      console.log('\\nOptimizations applied:');\n      result.optimizationsApplied.forEach((opt, index) => {\n        console.log(`  ${index + 1}. ${opt}`);\n      });\n    }\n\n    if (result.warnings.length > 0) {\n      console.log('\\n⚠️ Warnings:');\n      result.warnings.forEach((warning, index) => {\n        console.log(`  ${index + 1}. ${warning}`);\n      });\n    }\n\n    if (result.errors.length > 0) {\n      console.log('\\n❌ Errors:');\n      result.errors.forEach((error, index) => {\n        console.log(`  ${index + 1}. ${error}`);\n      });\n    }\n\n    // Generate detailed memory report\n    const memoryReport = this.detector.generateDetailedReport();\n    console.log('\\n' + memoryReport);\n  }\n\n  /**\n   * Static method to run quick optimization\n   */\n  static async runQuickOptimization(): Promise<OptimizationResult> {\n    const optimizer = new MemoryOptimizationScript();\n    return await optimizer.runOptimization();\n  }\n\n  /**\n   * Static method for emergency memory cleanup\n   */\n  static emergencyCleanup(): void {\n    console.log('🚨 Running emergency memory cleanup...');\n    \n    // Apply all available cleanup measures\n    const fixes = MemoryLeakDetector.emergencyCleanup();\n    \n    console.log(`Emergency cleanup completed:`);\n    console.log(`- Fixed: ${fixes.fixed.length} issues`);\n    console.log(`- Failed: ${fixes.failed.length} issues`);\n    \n    if (fixes.fixed.length > 0) {\n      console.log('Fixed issues:', fixes.fixed);\n    }\n    \n    if (fixes.failed.length > 0) {\n      console.log('Failed issues:', fixes.failed);\n    }\n  }\n}\n\n// CLI interface\nif (require.main === module) {\n  const args = process.argv.slice(2);\n  \n  if (args.includes('--emergency')) {\n    MemoryOptimizationScript.emergencyCleanup();\n  } else {\n    MemoryOptimizationScript.runQuickOptimization()\n      .then(result => {\n        process.exit(result.success ? 0 : 1);\n      })\n      .catch(error => {\n        console.error('Optimization failed:', error);\n        process.exit(1);\n      });\n  }\n}\n\nexport default MemoryOptimizationScript;"],"version":3}