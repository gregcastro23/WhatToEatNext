a29d75d7434fd4b2d7465ac65dda838e
"use strict";
/**
 * Memory Optimization Script for Test Environment
 *
 * This script provides comprehensive memory optimization utilities
 * for the WhatToEatNext test infrastructure.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemoryOptimizationScript = void 0;
const TestMemoryMonitor_1 = require("./TestMemoryMonitor");
const MemoryLeakDetector_1 = __importDefault(require("./MemoryLeakDetector"));
class MemoryOptimizationScript {
    constructor() {
        this.monitor = TestMemoryMonitor_1.TestMemoryMonitor.createForCI();
        this.detector = new MemoryLeakDetector_1.default();
    }
    /**
     * Run comprehensive memory optimization
     */
    async runOptimization() {
        console.log('🚀 Starting comprehensive memory optimization...\n');
        const initialMemory = process.memoryUsage().heapUsed;
        const optimizationsApplied = [];
        const warnings = [];
        const errors = [];
        try {
            // Step 1: Detect memory leaks
            console.log('🔍 Step 1: Detecting memory leaks...');
            const leakReport = this.detector.scanForLeaks();
            if (leakReport.leaksDetected.length > 0) {
                console.log(`Found ${leakReport.leaksDetected.length} potential memory leaks`);
                // Apply automatic fixes
                const fixes = this.detector.applyAutomaticFixes();
                optimizationsApplied.push(...fixes.fixed);
                if (fixes.failed.length > 0) {
                    warnings.push(...fixes.failed);
                }
            }
            else {
                console.log('✅ No memory leaks detected');
            }
            // Step 2: Optimize Jest configuration
            console.log('\n🔧 Step 2: Optimizing Jest configuration...');
            await this.optimizeJestConfiguration();
            optimizationsApplied.push('Optimized Jest configuration');
            // Step 3: Clean up global references
            console.log('\n🧹 Step 3: Cleaning up global references...');
            this.cleanupGlobalReferences();
            optimizationsApplied.push('Cleaned up global references');
            // Step 4: Optimize Node.js settings
            console.log('\n⚙️ Step 4: Optimizing Node.js settings...');
            this.optimizeNodeSettings();
            optimizationsApplied.push('Optimized Node.js settings');
            // Step 5: Force garbage collection
            console.log('\n🗑️ Step 5: Forcing garbage collection...');
            const gcResult = this.forceGarbageCollection();
            if (gcResult) {
                optimizationsApplied.push('Forced garbage collection');
            }
            else {
                warnings.push('Garbage collection not available');
            }
            // Step 6: Generate optimization report
            console.log('\n📊 Step 6: Generating optimization report...');
            const finalMemory = process.memoryUsage().heapUsed;
            const memoryFreed = initialMemory - finalMemory;
            const result = {
                success: true,
                memoryFreed: memoryFreed / (1024 * 1024),
                optimizationsApplied,
                warnings,
                errors
            };
            this.logOptimizationResult(result);
            return result;
        }
        catch (error) {
            errors.push(`Optimization failed: ${error}`);
            return {
                success: false,
                memoryFreed: 0,
                optimizationsApplied,
                warnings,
                errors
            };
        }
    }
    /**
     * Optimize Jest configuration for memory efficiency
     */
    async optimizeJestConfiguration() {
        const fs = require('fs');
        const path = require('path');
        const jestConfigPath = path.join(process.cwd(), 'jest.config.js');
        if (!fs.existsSync(jestConfigPath)) {
            console.log('⚠️ Jest config not found, skipping Jest optimization');
            return;
        }
        // Read current config
        let configContent = fs.readFileSync(jestConfigPath, 'utf8');
        // Apply memory optimizations if not already present
        const optimizations = [
            { key: 'maxWorkers', value: 'process.env.CI ? 1 : 2' },
            { key: 'workerIdleMemoryLimit', value: "'512MB'" },
            { key: 'logHeapUsage', value: 'true' },
            { key: 'detectOpenHandles', value: 'true' },
            { key: 'forceExit', value: 'true' }
        ];
        let modified = false;
        optimizations.forEach(opt => {
            if (!configContent.includes(opt.key)) {
                // Add the optimization
                const insertion = `  ${opt.key}: ${opt.value},\n`;
                configContent = configContent.replace(/(const config = {[^}]*)/, `$1\n${insertion}`);
                modified = true;
            }
        });
        if (modified) {
            fs.writeFileSync(jestConfigPath, configContent);
            console.log('✅ Jest configuration optimized');
        }
        else {
            console.log('✅ Jest configuration already optimized');
        }
    }
    /**
     * Clean up global references that might cause memory leaks
     */
    cleanupGlobalReferences() {
        let cleaned = 0;
        // Clear test cache
        if (global.__TEST_CACHE__) {
            if (typeof global.__TEST_CACHE__.clear === 'function') {
                global.__TEST_CACHE__.clear();
            }
            else {
                global.__TEST_CACHE__ = new Map();
            }
            cleaned++;
        }
        // Clear test references
        if (global.__TEST_REFS__) {
            global.__TEST_REFS__.length = 0;
            cleaned++;
        }
        // Clear memory tracking
        if (global.__TEST_MEMORY_TRACKING__) {
            delete global.__TEST_MEMORY_TRACKING__;
            cleaned++;
        }
        // Clear DOM if available
        if (typeof document !== 'undefined') {
            document.body.innerHTML = '';
            cleaned++;
        }
        // Clear event listeners
        if (typeof window !== 'undefined' && window._eventListeners) {
            window._eventListeners = {};
            cleaned++;
        }
        // Clear Jest modules
        if (jest && jest.resetModules) {
            jest.resetModules();
            cleaned++;
        }
        console.log(`✅ Cleaned up ${cleaned} global references`);
    }
    /**
     * Optimize Node.js settings for memory efficiency
     */
    optimizeNodeSettings() {
        var _a, _b, _c;
        const optimizations = [];
        // Set memory limits if not already set
        if (!((_a = process.env.NODE_OPTIONS) === null || _a === void 0 ? void 0 : _a.includes('--max-old-space-size'))) {
            process.env.NODE_OPTIONS = (process.env.NODE_OPTIONS || '') + ' --max-old-space-size=2048';
            optimizations.push('Set max old space size to 2GB');
        }
        // Enable garbage collection exposure
        if (!((_b = process.env.NODE_OPTIONS) === null || _b === void 0 ? void 0 : _b.includes('--expose-gc'))) {
            process.env.NODE_OPTIONS = (process.env.NODE_OPTIONS || '') + ' --expose-gc';
            optimizations.push('Enabled garbage collection exposure');
        }
        // Optimize garbage collection
        if (!((_c = process.env.NODE_OPTIONS) === null || _c === void 0 ? void 0 : _c.includes('--optimize-for-size'))) {
            process.env.NODE_OPTIONS = (process.env.NODE_OPTIONS || '') + ' --optimize-for-size';
            optimizations.push('Enabled size optimization');
        }
        if (optimizations.length > 0) {
            console.log(`✅ Applied ${optimizations.length} Node.js optimizations`);
        }
        else {
            console.log('✅ Node.js settings already optimized');
        }
    }
    /**
     * Force garbage collection if available
     */
    forceGarbageCollection() {
        if (global.gc) {
            try {
                global.gc();
                return true;
            }
            catch (error) {
                console.warn('Failed to force garbage collection:', error);
                return false;
            }
        }
        return false;
    }
    /**
     * Log optimization results
     */
    logOptimizationResult(result) {
        console.log('\n📊 Memory Optimization Results:');
        console.log('================================');
        console.log(`Success: ${result.success ? '✅' : '❌'}`);
        console.log(`Memory freed: ${result.memoryFreed.toFixed(2)}MB`);
        console.log(`Optimizations applied: ${result.optimizationsApplied.length}`);
        if (result.optimizationsApplied.length > 0) {
            console.log('\nOptimizations applied:');
            result.optimizationsApplied.forEach((opt, index) => {
                console.log(`  ${index + 1}. ${opt}`);
            });
        }
        if (result.warnings.length > 0) {
            console.log('\n⚠️ Warnings:');
            result.warnings.forEach((warning, index) => {
                console.log(`  ${index + 1}. ${warning}`);
            });
        }
        if (result.errors.length > 0) {
            console.log('\n❌ Errors:');
            result.errors.forEach((error, index) => {
                console.log(`  ${index + 1}. ${error}`);
            });
        }
        // Generate detailed memory report
        const memoryReport = this.detector.generateDetailedReport();
        console.log('\n' + memoryReport);
    }
    /**
     * Static method to run quick optimization
     */
    static async runQuickOptimization() {
        const optimizer = new MemoryOptimizationScript();
        return await optimizer.runOptimization();
    }
    /**
     * Static method for emergency memory cleanup
     */
    static emergencyCleanup() {
        console.log('🚨 Running emergency memory cleanup...');
        // Apply all available cleanup measures
        const fixes = MemoryLeakDetector_1.default.emergencyCleanup();
        console.log(`Emergency cleanup completed:`);
        console.log(`- Fixed: ${fixes.fixed.length} issues`);
        console.log(`- Failed: ${fixes.failed.length} issues`);
        if (fixes.fixed.length > 0) {
            console.log('Fixed issues:', fixes.fixed);
        }
        if (fixes.failed.length > 0) {
            console.log('Failed issues:', fixes.failed);
        }
    }
}
exports.MemoryOptimizationScript = MemoryOptimizationScript;
// CLI interface
if (require.main === module) {
    const args = process.argv.slice(2);
    if (args.includes('--emergency')) {
        MemoryOptimizationScript.emergencyCleanup();
    }
    else {
        MemoryOptimizationScript.runQuickOptimization()
            .then(result => {
            process.exit(result.success ? 0 : 1);
        })
            .catch(error => {
            console.error('Optimization failed:', error);
            process.exit(1);
        });
    }
}
exports.default = MemoryOptimizationScript;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9fX3Rlc3RzX18vdXRpbHMvTWVtb3J5T3B0aW1pemF0aW9uU2NyaXB0LnRzIiwibWFwcGluZ3MiOiI7QUFFQTs7Ozs7R0FLRzs7Ozs7O0FBRUgsMkRBQXdEO0FBQ3hELDhFQUFzRDtBQVV0RCxNQUFhLHdCQUF3QjtJQUluQztRQUNFLElBQUksQ0FBQyxPQUFPLEdBQUcscUNBQWlCLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDL0MsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLDRCQUFrQixFQUFFLENBQUM7SUFDM0MsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLGVBQWU7UUFDbkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvREFBb0QsQ0FBQyxDQUFDO1FBRWxFLE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQUM7UUFDckQsTUFBTSxvQkFBb0IsR0FBYSxFQUFFLENBQUM7UUFDMUMsTUFBTSxRQUFRLEdBQWEsRUFBRSxDQUFDO1FBQzlCLE1BQU0sTUFBTSxHQUFhLEVBQUUsQ0FBQztRQUU1QixJQUFJO1lBQ0YsOEJBQThCO1lBQzlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0NBQXNDLENBQUMsQ0FBQztZQUNwRCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxDQUFDO1lBRWhELElBQUksVUFBVSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUN2QyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxNQUFNLHlCQUF5QixDQUFDLENBQUM7Z0JBRS9FLHdCQUF3QjtnQkFDeEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO2dCQUNsRCxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQzFD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S0FBSyxDQUFDLENBQUM7WUFDN0MsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQixDQUFDLENBQUMsQ0FBQztLQUNOO0NBQ0Y7QUFFRCxrQkFBZSx3QkFBd0IsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvR3JlZ0Nhc3Ryby9EZXNrdG9wL1doYXRUb0VhdE5leHQvc3JjL19fdGVzdHNfXy91dGlscy9NZW1vcnlPcHRpbWl6YXRpb25TY3JpcHQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiXG5cbi8qKlxuICogTWVtb3J5IE9wdGltaXphdGlvbiBTY3JpcHQgZm9yIFRlc3QgRW52aXJvbm1lbnRcbiAqIFxuICogVGhpcyBzY3JpcHQgcHJvdmlkZXMgY29tcHJlaGVuc2l2ZSBtZW1vcnkgb3B0aW1pemF0aW9uIHV0aWxpdGllc1xuICogZm9yIHRoZSBXaGF0VG9FYXROZXh0IHRlc3QgaW5mcmFzdHJ1Y3R1cmUuXG4gKi9cblxuaW1wb3J0IHsgVGVzdE1lbW9yeU1vbml0b3IgfSBmcm9tICcuL1Rlc3RNZW1vcnlNb25pdG9yJztcbmltcG9ydCBNZW1vcnlMZWFrRGV0ZWN0b3IgZnJvbSAnLi9NZW1vcnlMZWFrRGV0ZWN0b3InO1xuXG5pbnRlcmZhY2UgT3B0aW1pemF0aW9uUmVzdWx0IHtcbiAgc3VjY2VzczogYm9vbGVhbjtcbiAgbWVtb3J5RnJlZWQ6IG51bWJlcjtcbiAgb3B0aW1pemF0aW9uc0FwcGxpZWQ6IHN0cmluZ1tdO1xuICB3YXJuaW5nczogc3RyaW5nW107XG4gIGVycm9yczogc3RyaW5nW107XG59XG5cbmV4cG9ydCBjbGFzcyBNZW1vcnlPcHRpbWl6YXRpb25TY3JpcHQge1xuICBwcml2YXRlIG1vbml0b3I6IFRlc3RNZW1vcnlNb25pdG9yO1xuICBwcml2YXRlIGRldGVjdG9yOiBNZW1vcnlMZWFrRGV0ZWN0b3I7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5tb25pdG9yID0gVGVzdE1lbW9yeU1vbml0b3IuY3JlYXRlRm9yQ0koKTtcbiAgICB0aGlzLmRldGVjdG9yID0gbmV3IE1lbW9yeUxlYWtEZXRlY3RvcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJ1biBjb21wcmVoZW5zaXZlIG1lbW9yeSBvcHRpbWl6YXRpb25cbiAgICovXG4gIGFzeW5jIHJ1bk9wdGltaXphdGlvbigpOiBQcm9taXNlPE9wdGltaXphdGlvblJlc3VsdD4ge1xuICAgIGNvbnNvbGUubG9nKCfwn5qAIFN0YXJ0aW5nIGNvbXByZWhlbnNpdmUgbWVtb3J5IG9wdGltaXphdGlvbi4uLlxcbicpO1xuXG4gICAgY29uc3QgaW5pdGlhbE1lbW9yeSA9IHByb2Nlc3MubWVtb3J5VXNhZ2UoKS5oZWFwVXNlZDtcbiAgICBjb25zdCBvcHRpbWl6YXRpb25zQXBwbGllZDogc3RyaW5nW10gPSBbXTtcbiAgICBjb25zdCB3YXJuaW5nczogc3RyaW5nW10gPSBbXTtcbiAgICBjb25zdCBlcnJvcnM6IHN0cmluZ1tdID0gW107XG5cbiAgICB0cnkge1xuICAgICAgLy8gU3RlcCAxOiBEZXRlY3QgbWVtb3J5IGxlYWtzXG4gICAgICBjb25zb2xlLmxvZygn8J+UjSBTdGVwIDE6IERldGVjdGluZyBtZW1vcnkgbGVha3MuLi4nKTtcbiAgICAgIGNvbnN0IGxlYWtSZXBvcnQgPSB0aGlzLmRldGVjdG9yLnNjYW5Gb3JMZWFrcygpO1xuICAgICAgXG4gICAgICBpZiAobGVha1JlcG9ydC5sZWFrc0RldGVjdGVkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc29sZS5sb2coYEZvdW5kICR7bGVha1JlcG9ydC5sZWFrc0RldGVjdGVkLmxlbmd0aH0gcG90ZW50aWFsIG1lbW9yeSBsZWFrc2ApO1xuICAgICAgICBcbiAgICAgICAgLy8gQXBwbHkgYXV0b21hdGljIGZpeGVzXG4gICAgICAgIGNvbnN0IGZpeGVzID0gdGhpcy5kZXRlY3Rvci5hcHBseUF1dG9tYXRpY0ZpeGVzKCk7XG4gICAgICAgIG9wdGltaXphdGlvbnNBcHBsaWVkLnB1c2goLi4uZml4ZXMuZml4ZWQpO1xuICAgICAgICBpZiAoZml4ZXMuZmFpbGVkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB3YXJuaW5ncy5wdXNoKC4uLmZpeGVzLmZhaWxlZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCfinIUgTm8gbWVtb3J5IGxlYWtzIGRldGVjdGVkJyk7XG4gICAgICB9XG5cbiAgICAgIC8vIFN0ZXAgMjogT3B0aW1pemUgSmVzdCBjb25maWd1cmF0aW9uXG4gICAgICBjb25zb2xlLmxvZygnXFxu8J+UpyBTdGVwIDI6IE9wdGltaXppbmcgSmVzdCBjb25maWd1cmF0aW9uLi4uJyk7XG4gICAgICBhd2FpdCB0aGlzLm9wdGltaXplSmVzdENvbmZpZ3VyYXRpb24oKTtcbiAgICAgIG9wdGltaXphdGlvbnNBcHBsaWVkLnB1c2goJ09wdGltaXplZCBKZXN0IGNvbmZpZ3VyYXRpb24nKTtcblxuICAgICAgLy8gU3RlcCAzOiBDbGVhbiB1cCBnbG9iYWwgcmVmZXJlbmNlc1xuICAgICAgY29uc29sZS5sb2coJ1xcbvCfp7kgU3RlcCAzOiBDbGVhbmluZyB1cCBnbG9iYWwgcmVmZXJlbmNlcy4uLicpO1xuICAgICAgdGhpcy5jbGVhbnVwR2xvYmFsUmVmZXJlbmNlcygpO1xuICAgICAgb3B0aW1pemF0aW9uc0FwcGxpZWQucHVzaCgnQ2xlYW5lZCB1cCBnbG9iYWwgcmVmZXJlbmNlcycpO1xuXG4gICAgICAvLyBTdGVwIDQ6IE9wdGltaXplIE5vZGUuanMgc2V0dGluZ3NcbiAgICAgIGNvbnNvbGUubG9nKCdcXG7impnvuI8gU3RlcCA0OiBPcHRpbWl6aW5nIE5vZGUuanMgc2V0dGluZ3MuLi4nKTtcbiAgICAgIHRoaXMub3B0aW1pemVOb2RlU2V0dGluZ3MoKTtcbiAgICAgIG9wdGltaXphdGlvbnNBcHBsaWVkLnB1c2goJ09wdGltaXplZCBOb2RlLmpzIHNldHRpbmdzJyk7XG5cbiAgICAgIC8vIFN0ZXAgNTogRm9yY2UgZ2FyYmFnZSBjb2xsZWN0aW9uXG4gICAgICBjb25zb2xlLmxvZygnXFxu8J+Xke+4jyBTdGVwIDU6IEZvcmNpbmcgZ2FyYmFnZSBjb2xsZWN0aW9uLi4uJyk7XG4gICAgICBjb25zdCBnY1Jlc3VsdCA9IHRoaXMuZm9yY2VHYXJiYWdlQ29sbGVjdGlvbigpO1xuICAgICAgaWYgKGdjUmVzdWx0KSB7XG4gICAgICAgIG9wdGltaXphdGlvbnNBcHBsaWVkLnB1c2goJ0ZvcmNlZCBnYXJiYWdlIGNvbGxlY3Rpb24nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmdzLnB1c2goJ0dhcmJhZ2UgY29sbGVjdGlvbiBub3QgYXZhaWxhYmxlJyk7XG4gICAgICB9XG5cbiAgICAgIC8vIFN0ZXAgNjogR2VuZXJhdGUgb3B0aW1pemF0aW9uIHJlcG9ydFxuICAgICAgY29uc29sZS5sb2coJ1xcbvCfk4ogU3RlcCA2OiBHZW5lcmF0aW5nIG9wdGltaXphdGlvbiByZXBvcnQuLi4nKTtcbiAgICAgIGNvbnN0IGZpbmFsTWVtb3J5ID0gcHJvY2Vzcy5tZW1vcnlVc2FnZSgpLmhlYXBVc2VkO1xuICAgICAgY29uc3QgbWVtb3J5RnJlZWQgPSBpbml0aWFsTWVtb3J5IC0gZmluYWxNZW1vcnk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdDogT3B0aW1pemF0aW9uUmVzdWx0ID0ge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBtZW1vcnlGcmVlZDogbWVtb3J5RnJlZWQgLyAoMTAyNCAqIDEwMjQpLCAvLyBDb252ZXJ0IHRvIE1CXG4gICAgICAgIG9wdGltaXphdGlvbnNBcHBsaWVkLFxuICAgICAgICB3YXJuaW5ncyxcbiAgICAgICAgZXJyb3JzXG4gICAgICB9O1xuXG4gICAgICB0aGlzLmxvZ09wdGltaXphdGlvblJlc3VsdChyZXN1bHQpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBlcnJvcnMucHVzaChgT3B0aW1pemF0aW9uIGZhaWxlZDogJHtlcnJvcn1gKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBtZW1vcnlGcmVlZDogMCxcbiAgICAgICAgb3B0aW1pemF0aW9uc0FwcGxpZWQsXG4gICAgICAgIHdhcm5pbmdzLFxuICAgICAgICBlcnJvcnNcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE9wdGltaXplIEplc3QgY29uZmlndXJhdGlvbiBmb3IgbWVtb3J5IGVmZmljaWVuY3lcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgb3B0aW1pemVKZXN0Q29uZmlndXJhdGlvbigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG4gICAgY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbiAgICBcbiAgICBjb25zdCBqZXN0Q29uZmlnUGF0aCA9IHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAnamVzdC5jb25maWcuanMnKTtcbiAgICBcbiAgICBpZiAoIWZzLmV4aXN0c1N5bmMoamVzdENvbmZpZ1BhdGgpKSB7XG4gICAgICBjb25zb2xlLmxvZygn4pqg77iPIEplc3QgY29uZmlnIG5vdCBmb3VuZCwgc2tpcHBpbmcgSmVzdCBvcHRpbWl6YXRpb24nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBSZWFkIGN1cnJlbnQgY29uZmlnXG4gICAgbGV0IGNvbmZpZ0NvbnRlbnQgPSBmcy5yZWFkRmlsZVN5bmMoamVzdENvbmZpZ1BhdGgsICd1dGY4Jyk7XG4gICAgXG4gICAgLy8gQXBwbHkgbWVtb3J5IG9wdGltaXphdGlvbnMgaWYgbm90IGFscmVhZHkgcHJlc2VudFxuICAgIGNvbnN0IG9wdGltaXphdGlvbnMgPSBbXG4gICAgICB7IGtleTogJ21heFdvcmtlcnMnLCB2YWx1ZTogJ3Byb2Nlc3MuZW52LkNJID8gMSA6IDInIH0sXG4gICAgICB7IGtleTogJ3dvcmtlcklkbGVNZW1vcnlMaW1pdCcsIHZhbHVlOiBcIic1MTJNQidcIiB9LFxuICAgICAgeyBrZXk6ICdsb2dIZWFwVXNhZ2UnLCB2YWx1ZTogJ3RydWUnIH0sXG4gICAgICB7IGtleTogJ2RldGVjdE9wZW5IYW5kbGVzJywgdmFsdWU6ICd0cnVlJyB9LFxuICAgICAgeyBrZXk6ICdmb3JjZUV4aXQnLCB2YWx1ZTogJ3RydWUnIH1cbiAgICBdO1xuXG4gICAgbGV0IG1vZGlmaWVkID0gZmFsc2U7XG4gICAgb3B0aW1pemF0aW9ucy5mb3JFYWNoKG9wdCA9PiB7XG4gICAgICBpZiAoIWNvbmZpZ0NvbnRlbnQuaW5jbHVkZXMob3B0LmtleSkpIHtcbiAgICAgICAgLy8gQWRkIHRoZSBvcHRpbWl6YXRpb25cbiAgICAgICAgY29uc3QgaW5zZXJ0aW9uID0gYCAgJHtvcHQua2V5fTogJHtvcHQudmFsdWV9LFxcbmA7XG4gICAgICAgIGNvbmZpZ0NvbnRlbnQgPSBjb25maWdDb250ZW50LnJlcGxhY2UoXG4gICAgICAgICAgLyhjb25zdCBjb25maWcgPSB7W159XSopLyxcbiAgICAgICAgICBgJDFcXG4ke2luc2VydGlvbn1gXG4gICAgICAgICk7XG4gICAgICAgIG1vZGlmaWVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChtb2RpZmllZCkge1xuICAgICAgZnMud3JpdGVGaWxlU3luYyhqZXN0Q29uZmlnUGF0aCwgY29uZmlnQ29udGVudCk7XG4gICAgICBjb25zb2xlLmxvZygn4pyFIEplc3QgY29uZmlndXJhdGlvbiBvcHRpbWl6ZWQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coJ+KchSBKZXN0IGNvbmZpZ3VyYXRpb24gYWxyZWFkeSBvcHRpbWl6ZWQnKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2xlYW4gdXAgZ2xvYmFsIHJlZmVyZW5jZXMgdGhhdCBtaWdodCBjYXVzZSBtZW1vcnkgbGVha3NcbiAgICovXG4gIHByaXZhdGUgY2xlYW51cEdsb2JhbFJlZmVyZW5jZXMoKTogdm9pZCB7XG4gICAgbGV0IGNsZWFuZWQgPSAwO1xuXG4gICAgLy8gQ2xlYXIgdGVzdCBjYWNoZVxuICAgIGlmIChnbG9iYWwuX19URVNUX0NBQ0hFX18pIHtcbiAgICAgIGlmICh0eXBlb2YgZ2xvYmFsLl9fVEVTVF9DQUNIRV9fLmNsZWFyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGdsb2JhbC5fX1RFU1RfQ0FDSEVfXy5jbGVhcigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2xvYmFsLl9fVEVTVF9DQUNIRV9fID0gbmV3IE1hcCgpO1xuICAgICAgfVxuICAgICAgY2xlYW5lZCsrO1xuICAgIH1cblxuICAgIC8vIENsZWFyIHRlc3QgcmVmZXJlbmNlc1xuICAgIGlmIChnbG9iYWwuX19URVNUX1JFRlNfXykge1xuICAgICAgZ2xvYmFsLl9fVEVTVF9SRUZTX18ubGVuZ3RoID0gMDtcbiAgICAgIGNsZWFuZWQrKztcbiAgICB9XG5cbiAgICAvLyBDbGVhciBtZW1vcnkgdHJhY2tpbmdcbiAgICBpZiAoZ2xvYmFsLl9fVEVTVF9NRU1PUllfVFJBQ0tJTkdfXykge1xuICAgICAgZGVsZXRlIGdsb2JhbC5fX1RFU1RfTUVNT1JZX1RSQUNLSU5HX187XG4gICAgICBjbGVhbmVkKys7XG4gICAgfVxuXG4gICAgLy8gQ2xlYXIgRE9NIGlmIGF2YWlsYWJsZVxuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBkb2N1bWVudC5ib2R5LmlubmVySFRNTCA9ICcnO1xuICAgICAgY2xlYW5lZCsrO1xuICAgIH1cblxuICAgIC8vIENsZWFyIGV2ZW50IGxpc3RlbmVyc1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiAod2luZG93IGFzIGFueSkuX2V2ZW50TGlzdGVuZXJzKSB7XG4gICAgICAod2luZG93IGFzIGFueSkuX2V2ZW50TGlzdGVuZXJzID0ge307XG4gICAgICBjbGVhbmVkKys7XG4gICAgfVxuXG4gICAgLy8gQ2xlYXIgSmVzdCBtb2R1bGVzXG4gICAgaWYgKGplc3QgJiYgamVzdC5yZXNldE1vZHVsZXMpIHtcbiAgICAgIGplc3QucmVzZXRNb2R1bGVzKCk7XG4gICAgICBjbGVhbmVkKys7XG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coYOKchSBDbGVhbmVkIHVwICR7Y2xlYW5lZH0gZ2xvYmFsIHJlZmVyZW5jZXNgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcHRpbWl6ZSBOb2RlLmpzIHNldHRpbmdzIGZvciBtZW1vcnkgZWZmaWNpZW5jeVxuICAgKi9cbiAgcHJpdmF0ZSBvcHRpbWl6ZU5vZGVTZXR0aW5ncygpOiB2b2lkIHtcbiAgICBjb25zdCBvcHRpbWl6YXRpb25zOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgLy8gU2V0IG1lbW9yeSBsaW1pdHMgaWYgbm90IGFscmVhZHkgc2V0XG4gICAgaWYgKCFwcm9jZXNzLmVudi5OT0RFX09QVElPTlM/LmluY2x1ZGVzKCctLW1heC1vbGQtc3BhY2Utc2l6ZScpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX09QVElPTlMgPSAocHJvY2Vzcy5lbnYuTk9ERV9PUFRJT05TIHx8ICcnKSArICcgLS1tYXgtb2xkLXNwYWNlLXNpemU9MjA0OCc7XG4gICAgICBvcHRpbWl6YXRpb25zLnB1c2goJ1NldCBtYXggb2xkIHNwYWNlIHNpemUgdG8gMkdCJyk7XG4gICAgfVxuXG4gICAgLy8gRW5hYmxlIGdhcmJhZ2UgY29sbGVjdGlvbiBleHBvc3VyZVxuICAgIGlmICghcHJvY2Vzcy5lbnYuTk9ERV9PUFRJT05TPy5pbmNsdWRlcygnLS1leHBvc2UtZ2MnKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9PUFRJT05TID0gKHByb2Nlc3MuZW52Lk5PREVfT1BUSU9OUyB8fCAnJykgKyAnIC0tZXhwb3NlLWdjJztcbiAgICAgIG9wdGltaXphdGlvbnMucHVzaCgnRW5hYmxlZCBnYXJiYWdlIGNvbGxlY3Rpb24gZXhwb3N1cmUnKTtcbiAgICB9XG5cbiAgICAvLyBPcHRpbWl6ZSBnYXJiYWdlIGNvbGxlY3Rpb25cbiAgICBpZiAoIXByb2Nlc3MuZW52Lk5PREVfT1BUSU9OUz8uaW5jbHVkZXMoJy0tb3B0aW1pemUtZm9yLXNpemUnKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9PUFRJT05TID0gKHByb2Nlc3MuZW52Lk5PREVfT1BUSU9OUyB8fCAnJykgKyAnIC0tb3B0aW1pemUtZm9yLXNpemUnO1xuICAgICAgb3B0aW1pemF0aW9ucy5wdXNoKCdFbmFibGVkIHNpemUgb3B0aW1pemF0aW9uJyk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGltaXphdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc29sZS5sb2coYOKchSBBcHBsaWVkICR7b3B0aW1pemF0aW9ucy5sZW5ndGh9IE5vZGUuanMgb3B0aW1pemF0aW9uc2ApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZygn4pyFIE5vZGUuanMgc2V0dGluZ3MgYWxyZWFkeSBvcHRpbWl6ZWQnKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRm9yY2UgZ2FyYmFnZSBjb2xsZWN0aW9uIGlmIGF2YWlsYWJsZVxuICAgKi9cbiAgcHJpdmF0ZSBmb3JjZUdhcmJhZ2VDb2xsZWN0aW9uKCk6IGJvb2xlYW4ge1xuICAgIGlmIChnbG9iYWwuZ2MpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGdsb2JhbC5nYygpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignRmFpbGVkIHRvIGZvcmNlIGdhcmJhZ2UgY29sbGVjdGlvbjonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIExvZyBvcHRpbWl6YXRpb24gcmVzdWx0c1xuICAgKi9cbiAgcHJpdmF0ZSBsb2dPcHRpbWl6YXRpb25SZXN1bHQocmVzdWx0OiBPcHRpbWl6YXRpb25SZXN1bHQpOiB2b2lkIHtcbiAgICBjb25zb2xlLmxvZygnXFxu8J+TiiBNZW1vcnkgT3B0aW1pemF0aW9uIFJlc3VsdHM6Jyk7XG4gICAgY29uc29sZS5sb2coJz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Jyk7XG4gICAgY29uc29sZS5sb2coYFN1Y2Nlc3M6ICR7cmVzdWx0LnN1Y2Nlc3MgPyAn4pyFJyA6ICfinYwnfWApO1xuICAgIGNvbnNvbGUubG9nKGBNZW1vcnkgZnJlZWQ6ICR7cmVzdWx0Lm1lbW9yeUZyZWVkLnRvRml4ZWQoMil9TUJgKTtcbiAgICBjb25zb2xlLmxvZyhgT3B0aW1pemF0aW9ucyBhcHBsaWVkOiAke3Jlc3VsdC5vcHRpbWl6YXRpb25zQXBwbGllZC5sZW5ndGh9YCk7XG4gICAgXG4gICAgaWYgKHJlc3VsdC5vcHRpbWl6YXRpb25zQXBwbGllZC5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zb2xlLmxvZygnXFxuT3B0aW1pemF0aW9ucyBhcHBsaWVkOicpO1xuICAgICAgcmVzdWx0Lm9wdGltaXphdGlvbnNBcHBsaWVkLmZvckVhY2goKG9wdCwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coYCAgJHtpbmRleCArIDF9LiAke29wdH1gKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXN1bHQud2FybmluZ3MubGVuZ3RoID4gMCkge1xuICAgICAgY29uc29sZS5sb2coJ1xcbuKaoO+4jyBXYXJuaW5nczonKTtcbiAgICAgIHJlc3VsdC53YXJuaW5ncy5mb3JFYWNoKCh3YXJuaW5nLCBpbmRleCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhgICAke2luZGV4ICsgMX0uICR7d2FybmluZ31gKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXN1bHQuZXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnNvbGUubG9nKCdcXG7inYwgRXJyb3JzOicpO1xuICAgICAgcmVzdWx0LmVycm9ycy5mb3JFYWNoKChlcnJvciwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coYCAgJHtpbmRleCArIDF9LiAke2Vycm9yfWApO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gR2VuZXJhdGUgZGV0YWlsZWQgbWVtb3J5IHJlcG9ydFxuICAgIGNvbnN0IG1lbW9yeVJlcG9ydCA9IHRoaXMuZGV0ZWN0b3IuZ2VuZXJhdGVEZXRhaWxlZFJlcG9ydCgpO1xuICAgIGNvbnNvbGUubG9nKCdcXG4nICsgbWVtb3J5UmVwb3J0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGF0aWMgbWV0aG9kIHRvIHJ1biBxdWljayBvcHRpbWl6YXRpb25cbiAgICovXG4gIHN0YXRpYyBhc3luYyBydW5RdWlja09wdGltaXphdGlvbigpOiBQcm9taXNlPE9wdGltaXphdGlvblJlc3VsdD4ge1xuICAgIGNvbnN0IG9wdGltaXplciA9IG5ldyBNZW1vcnlPcHRpbWl6YXRpb25TY3JpcHQoKTtcbiAgICByZXR1cm4gYXdhaXQgb3B0aW1pemVyLnJ1bk9wdGltaXphdGlvbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXRpYyBtZXRob2QgZm9yIGVtZXJnZW5jeSBtZW1vcnkgY2xlYW51cFxuICAgKi9cbiAgc3RhdGljIGVtZXJnZW5jeUNsZWFudXAoKTogdm9pZCB7XG4gICAgY29uc29sZS5sb2coJ/CfmqggUnVubmluZyBlbWVyZ2VuY3kgbWVtb3J5IGNsZWFudXAuLi4nKTtcbiAgICBcbiAgICAvLyBBcHBseSBhbGwgYXZhaWxhYmxlIGNsZWFudXAgbWVhc3VyZXNcbiAgICBjb25zdCBmaXhlcyA9IE1lbW9yeUxlYWtEZXRlY3Rvci5lbWVyZ2VuY3lDbGVhbnVwKCk7XG4gICAgXG4gICAgY29uc29sZS5sb2coYEVtZXJnZW5jeSBjbGVhbnVwIGNvbXBsZXRlZDpgKTtcbiAgICBjb25zb2xlLmxvZyhgLSBGaXhlZDogJHtmaXhlcy5maXhlZC5sZW5ndGh9IGlzc3Vlc2ApO1xuICAgIGNvbnNvbGUubG9nKGAtIEZhaWxlZDogJHtmaXhlcy5mYWlsZWQubGVuZ3RofSBpc3N1ZXNgKTtcbiAgICBcbiAgICBpZiAoZml4ZXMuZml4ZWQubGVuZ3RoID4gMCkge1xuICAgICAgY29uc29sZS5sb2coJ0ZpeGVkIGlzc3VlczonLCBmaXhlcy5maXhlZCk7XG4gICAgfVxuICAgIFxuICAgIGlmIChmaXhlcy5mYWlsZWQubGVuZ3RoID4gMCkge1xuICAgICAgY29uc29sZS5sb2coJ0ZhaWxlZCBpc3N1ZXM6JywgZml4ZXMuZmFpbGVkKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gQ0xJIGludGVyZmFjZVxuaWYgKHJlcXVpcmUubWFpbiA9PT0gbW9kdWxlKSB7XG4gIGNvbnN0IGFyZ3MgPSBwcm9jZXNzLmFyZ3Yuc2xpY2UoMik7XG4gIFxuICBpZiAoYXJncy5pbmNsdWRlcygnLS1lbWVyZ2VuY3knKSkge1xuICAgIE1lbW9yeU9wdGltaXphdGlvblNjcmlwdC5lbWVyZ2VuY3lDbGVhbnVwKCk7XG4gIH0gZWxzZSB7XG4gICAgTWVtb3J5T3B0aW1pemF0aW9uU2NyaXB0LnJ1blF1aWNrT3B0aW1pemF0aW9uKClcbiAgICAgIC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIHByb2Nlc3MuZXhpdChyZXN1bHQuc3VjY2VzcyA/IDAgOiAxKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdPcHRpbWl6YXRpb24gZmFpbGVkOicsIGVycm9yKTtcbiAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTWVtb3J5T3B0aW1pemF0aW9uU2NyaXB0OyJdLCJ2ZXJzaW9uIjozfQ==