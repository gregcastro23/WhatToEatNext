{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/utils/quantityScaling-integration.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/utils/quantityScaling-integration.test.ts"],"sourcesContent":["// src/__tests__/utils/quantityScaling-integration.test.ts\n// Integration tests for Phase 3: Quantity-Aware Recipe Recommendations\n\nimport { IngredientService } from '@/services/IngredientService';\nimport { UnifiedRecommendationService } from '@/services/UnifiedRecommendationService';\nimport { ElementalProperties, ThermodynamicMetrics } from '@/types/alchemy';\nimport { Recipe } from '@/types/recipe';\nimport { Ingredient } from '@/types/ingredient';\n\n// Mock the recipe data service\njest.mock('@/services/recipeData', () => ({\n  recipeDataService: {\n    getAllRecipes: jest.fn(() => Promise.resolve([\n      {\n        id: 'test-recipe-1',\n        title: 'Garlic Butter Pasta',\n        ingredients: [\n          { name: 'garlic', amount: 3, unit: 'cloves' },\n          { name: 'butter', amount: 100, unit: 'g' },\n          { name: 'pasta', amount: 200, unit: 'g' }\n        ],\n        cookingMethods: ['boil', 'sauté'],\n        cuisine: 'Italian',\n        elementalState: { Fire: 0.4, Water: 0.3, Earth: 0.2, Air: 0.1 }\n      } as Recipe,\n      {\n        id: 'test-recipe-2',\n        title: 'Spicy Stir Fry',\n        ingredients: [\n          { name: 'ginger', amount: 2, unit: 'tbsp' },\n          { name: 'soy sauce', amount: 50, unit: 'ml' },\n          { name: 'chicken', amount: 300, unit: 'g' }\n        ],\n        cookingMethods: ['stir fry'],\n        cuisine: 'Asian',\n        elementalState: { Fire: 0.6, Water: 0.1, Earth: 0.2, Air: 0.1 }\n      } as Recipe\n    ]))\n  }\n}));\n\ndescribe('Phase 3: Quantity-Aware Recipe Recommendations', () => {\n  let ingredientService: IngredientService;\n  let recommendationService: UnifiedRecommendationService;\n\n  beforeEach(() => {\n    ingredientService = IngredientService.getInstance();\n    recommendationService = UnifiedRecommendationService.getInstance();\n    jest.clearAllMocks();\n  });\n\n  describe('IngredientService Quantity-Aware Methods', () => {\n    test('getScaledIngredientProperties returns valid scaled properties', () => {\n      const result = ingredientService.getScaledIngredientProperties('garlic', 6, 'cloves');\n\n      expect(result).toBeDefined();\n      if (result) {\n        expect(result.base).toBeDefined();\n        expect(result.scaled).toBeDefined();\n        expect(result.quantity).toBe(6);\n        expect(result.unit).toBe('cloves');\n        expect(result.factor).toBeGreaterThan(0.1);\n        expect(result.factor).toBeLessThan(2.0);\n      }\n    });\n\n    test('calculateQuantityImpact scales elemental properties correctly', () => {\n      const mockIngredient = {\n        name: 'test garlic',\n        elementalProperties: { Fire: 0.3, Water: 0.2, Earth: 0.4, Air: 0.1 }\n      };\n\n      const result = ingredientService.calculateQuantityImpact(mockIngredient, 10, 'cloves');\n\n      expect(result).toBeDefined();\n      if (result) {\n        // Check that sum is approximately 1.0 (harmony enforcement)\n        const sum = result.Fire + result.Water + result.Earth + result.Air;\n        expect(sum).toBeCloseTo(1.0, 1);\n      }\n    });\n\n    test('batchScaleIngredients processes multiple ingredients efficiently', () => {\n      const batchData = [\n        { ingredientId: 'garlic', quantity: 3, unit: 'cloves' },\n        { ingredientId: 'butter', quantity: 100, unit: 'g' },\n        { ingredientId: 'ginger', quantity: 2, unit: 'tbsp' }\n      ];\n\n      const results = ingredientService.batchScaleIngredients(batchData);\n\n      expect(results).toHaveLength(3);\n      results.forEach(result => {\n        expect(result).toBeDefined();\n      });\n    });\n\n    test('calculateQuantityAwareCompatibility uses scaled properties', () => {\n      const score = ingredientService.calculateQuantityAwareCompatibility(\n        'garlic', 3, 'cloves',\n        'butter', 100, 'g'\n      );\n\n      expect(typeof score).toBe('number');\n      expect(score).toBeGreaterThanOrEqual(0);\n      expect(score).toBeLessThanOrEqual(1);\n    });\n  });\n\n  describe('UnifiedRecommendationService Quantity-Aware Methods', () => {\n    test('getQuantityAwareRecipeRecommendations considers ingredient quantities', async () => {\n      const criteria = {\n        elementalProperties: { Fire: 0.4, Water: 0.3, Earth: 0.2, Air: 0.1 },\n        useQuantityScaling: true,\n        ingredientQuantities: [\n          { ingredient: 'garlic', quantity: 3, unit: 'cloves' },\n          { ingredient: 'butter', quantity: 100, unit: 'g' }\n        ],\n        limit: 5\n      };\n\n      const result = await recommendationService.getQuantityAwareRecipeRecommendations(criteria);\n\n      expect(result).toBeDefined();\n      expect(result.items).toBeDefined();\n      expect(result.scores).toBeDefined();\n      expect(result.context.quantityAware).toBe(true);\n    });\n\n    test('getQuantityAwareIngredientRecommendations uses target quantity scaling', async () => {\n      const criteria = {\n        elementalProperties: { Fire: 0.5, Water: 0.2, Earth: 0.2, Air: 0.1 },\n        useQuantityScaling: true,\n        targetQuantity: 200,\n        targetUnit: 'g',\n        categories: ['vegetables'],\n        limit: 3\n      };\n\n      const result = await recommendationService.getQuantityAwareIngredientRecommendations(criteria);\n\n      expect(result).toBeDefined();\n      expect(result.items).toBeDefined();\n      expect(result.scores).toBeDefined();\n      expect(result.context.quantityAware).toBe(true);\n    });\n\n    test('kinetics bonus affects cooking method scoring', async () => {\n      const criteria = {\n        elementalProperties: { Fire: 0.6, Water: 0.1, Earth: 0.2, Air: 0.1 },\n        useQuantityScaling: true,\n        ingredientQuantities: [\n          { ingredient: 'ginger', quantity: 2, unit: 'tbsp' },\n          { ingredient: 'chicken', quantity: 300, unit: 'g' }\n        ],\n        cookingMethod: 'stir fry',\n        limit: 5\n      };\n\n      const result = await recommendationService.getQuantityAwareRecipeRecommendations(criteria);\n\n      expect(result).toBeDefined();\n      // The spicy stir fry recipe should score higher due to cooking method + kinetics match\n      const spicyRecipeScore = result.scores['test-recipe-2'];\n      expect(spicyRecipeScore).toBeDefined();\n      expect(spicyRecipeScore).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Quantity Scaling Validation', () => {\n    test('elemental harmony is maintained in scaled properties', () => {\n      const result = ingredientService.getScaledIngredientProperties('garlic', 10, 'cloves');\n\n      if (result) {\n        const scaled = result.scaled;\n        const sum = scaled.Fire + scaled.Water + scaled.Earth + scaled.Air;\n        expect(sum).toBeCloseTo(1.0, 1);\n\n        // Each element should be between 0 and 1\n        Object.values(scaled).forEach(value => {\n          expect(value).toBeGreaterThanOrEqual(0);\n          expect(value).toBeLessThanOrEqual(1);\n        });\n      }\n    });\n\n    test('scaling factor is within expected bounds', () => {\n      const smallQuantity = ingredientService.getScaledIngredientProperties('garlic', 1, 'cloves');\n      const largeQuantity = ingredientService.getScaledIngredientProperties('garlic', 20, 'cloves');\n\n      if (smallQuantity && largeQuantity) {\n        expect(smallQuantity.factor).toBeGreaterThan(0.1);\n        expect(smallQuantity.factor).toBeLessThan(2.0);\n        expect(largeQuantity.factor).toBeGreaterThan(0.1);\n        expect(largeQuantity.factor).toBeLessThan(2.0);\n      }\n    });\n\n    test('kinetics impact is calculated for thermodynamic ingredients', () => {\n      const result = ingredientService.getScaledIngredientProperties('garlic', 5, 'cloves');\n\n      if (result && result.kineticsImpact) {\n        const { forceAdjustment, thermalShift } = result.kineticsImpact;\n        expect(typeof forceAdjustment).toBe('number');\n        expect(typeof thermalShift).toBe('number');\n        expect(Math.abs(forceAdjustment)).toBeLessThan(10);\n        expect(Math.abs(thermalShift)).toBeLessThan(5);\n      }\n    });\n  });\n\n  describe('Performance Validation', () => {\n    test('batch processing is efficient', () => {\n      const batchData = Array.from({ length: 10 }, (_, i) => ({\n        ingredientId: 'garlic',\n        quantity: 3 + i,\n        unit: 'cloves'\n      }));\n\n      const startTime = Date.now();\n      const results = ingredientService.batchScaleIngredients(batchData);\n      const endTime = Date.now();\n\n      expect(results).toHaveLength(10);\n      expect(endTime - startTime).toBeLessThan(100); // Should complete in < 100ms\n    });\n\n    test('recommendation service handles quantity data efficiently', async () => {\n      const criteria = {\n        elementalProperties: { Fire: 0.4, Water: 0.3, Earth: 0.2, Air: 0.1 },\n        useQuantityScaling: true,\n        ingredientQuantities: Array.from({ length: 5 }, (_, i) => ({\n          ingredient: `ingredient-${i}`,\n          quantity: 100 + i * 50,\n          unit: 'g'\n        })),\n        limit: 3\n      };\n\n      const startTime = Date.now();\n      const result = await recommendationService.getQuantityAwareRecipeRecommendations(criteria);\n      const endTime = Date.now();\n\n      expect(result).toBeDefined();\n      expect(endTime - startTime).toBeLessThan(200); // Should complete in < 200ms\n    });\n  });\n\n  describe('Backward Compatibility', () => {\n    test('standard recommendations still work without quantity scaling', async () => {\n      const criteria = {\n        elementalProperties: { Fire: 0.4, Water: 0.3, Earth: 0.2, Air: 0.1 },\n        limit: 5\n      };\n\n      const result = await recommendationService.getRecommendedRecipes(criteria);\n\n      expect(result).toBeDefined();\n      expect(result.items).toBeDefined();\n      expect(result.context.quantityAware).toBeUndefined();\n    });\n\n    test('ingredient service methods work without quantity parameters', () => {\n      const ingredient = ingredientService.getIngredientByName('garlic');\n      expect(ingredient).toBeDefined();\n\n      const compatibility = ingredientService.calculateIngredientCompatibility(\n        'garlic',\n        'butter'\n      );\n      expect(compatibility.score).toBeDefined();\n    });\n  });\n});\n"],"version":3}