{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/validatePlanetaryPositions.test.ts","mappings":";;AAKA,6BAA6B;AAC7B,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,GAAG,EAAE,CAAC,CAAC;IACtC,cAAc,EAAE;QACd,YAAY,EAAE;YACZ,KAAK,EAAE;gBACL,KAAK,EAAE,YAAY;gBACnB,GAAG,EAAE,YAAY;aAClB;YACD,OAAO,EAAE;gBACP,KAAK,EAAE,YAAY;gBACnB,GAAG,EAAE,YAAY;aAClB;SACF;KACF;CACF,CAAC,CAAC,CAAC;AAEJ,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE,GAAG,EAAE,CAAC,CAAC;IACvC,cAAc,EAAE;QACd,YAAY,EAAE;YACZ,OAAO,EAAE;gBACP,KAAK,EAAE,YAAY;gBACnB,GAAG,EAAE,YAAY;aAClB;YACD,QAAQ,EAAE;gBACR,KAAK,EAAE,YAAY;gBACnB,GAAG,EAAE,YAAY;aAClB;SACF;KACF;CACF,CAAC,CAAC,CAAC;AAlCJ,6EAA6H;AAoC7H,QAAQ,CAAC,+BAA+B,EAAE,GAAG,EAAE;IAC7C,6BAA6B;IAC7B,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,sBAAsB,CAAC,CAAC;IAElD,kDAAkD;IAClD,MAAM,kBAAkB,GAAG,OAAO,CAAC,GAAG,CAAC;IACvC,UAAU,CAAC,GAAG,EAAE;QACd,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;IAC1B,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,OAAO,CAAC,GAAG,GAAG,kBAAkB,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,mEAAmE,EAAE,GAAG,EAAE;QAC7E,MAAM,IAAI,GAAG,IAAA,kDAAqB,EAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACrD,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,4EAA4E,EAAE,GAAG,EAAE;QACtF,MAAM,IAAI,GAAG,IAAA,kDAAqB,EAAC,mBAAmB,EAAE,QAAQ,CAAC,CAAC;QAClE,MAAM,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC;IAC1B,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,+EAA+E,EAAE,GAAG,EAAE;QACzF,oDAAoD;QACpD,MAAM,SAAS,GAAmC;YAChD,MAAM,EAAE;gBACN,IAAI,EAAE,QAAsB;gBAC5B,MAAM,EAAE,EAAE;gBACV,MAAM,EAAE,EAAE;gBACV,cAAc,EAAE,KAAK;aACtB;SACF,CAAC;QAEF,MAAM,SAAS,GAAG,IAAA,uDAA0B,EAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QAElE,oEAAoE;QACpE,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxC,+CAA+C;QAC/C,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACvC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACvC,sDAAsD;QACtD,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC;QAClE,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,+DAA+D,EAAE,GAAG,EAAE;QACzE,sDAAsD;QACtD,MAAM,SAAS,GAAmC;YAChD,MAAM,EAAE;gBACN,IAAI,EAAE,KAAmB;gBACzB,MAAM,EAAE,EAAE;gBACV,MAAM,EAAE,EAAE;gBACV,cAAc,EAAE,KAAK;aACtB;SACF,CAAC;QAEF,MAAM,SAAS,GAAG,IAAA,uDAA0B,EAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QAElE,4BAA4B;QAC5B,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxC,4DAA4D;QAC5D,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACvC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACvC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,qEAAqE,EAAE,GAAG,EAAE;QAC/E,MAAM,SAAS,GAAG,IAAA,uDAA0B,GAAE,CAAC;QAE/C,mCAAmC;QACnC,MAAM,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QACxC,MAAM,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QACzC,MAAM,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAC5C,MAAM,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAC1C,MAAM,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QACzC,MAAM,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAC5C,MAAM,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAC3C,MAAM,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAC3C,MAAM,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAC5C,MAAM,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAE1C,gDAAgD;QAChD,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YACrC,MAAM,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YACnC,MAAM,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;YACrC,MAAM,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/validatePlanetaryPositions.test.ts"],"sourcesContent":["import { getCurrentTransitSign, validatePlanetaryPositions, getCurrentTransitPositions } from './validatePlanetaryPositions';\nimport { PlanetPosition } from './astrologyUtils';\nimport marsData from '@/data/planets/mars';\nimport type { ZodiacSign } from '@/types';\n\n// Mock the planet data files\njest.mock('@/data/planets/mars', () => ({\n  PlanetSpecific: {\n    TransitDates: {\n      'leo': { \n        Start: '2024-05-01', \n        End: '2024-06-30' \n      },\n      'virgo': { \n        Start: '2024-07-01', \n        End: '2024-08-31' \n      }\n    }\n  }\n}));\n\njest.mock('@/data/planets/venus', () => ({\n  PlanetSpecific: {\n    TransitDates: {\n      'aries': { \n        Start: '2024-05-01', \n        End: '2024-06-30' \n      },\n      'taurus': { \n        Start: '2024-07-01', \n        End: '2024-08-31' \n      }\n    }\n  }\n}));\n\ndescribe('Planetary Position Validation', () => {\n  // Set a fixed date for tests\n  const testDate = new Date('2024-05-15T12:00:00Z');\n  \n  // Mock console.log to prevent output during tests\n  const originalConsoleLog = console.log;\n  beforeEach(() => {\n    console.log = jest.fn();\n  });\n  \n  afterEach(() => {\n    console.log = originalConsoleLog;\n  });\n  \n  test('getCurrentTransitSign returns correct sign for Mars on 2024-05-15', () => {\n    const sign = getCurrentTransitSign('Mars', testDate);\n    expect(sign).toBe('leo');\n  });\n\n  test('getCurrentTransitSign returns null for non-existent planet or transit data', () => {\n    const sign = getCurrentTransitSign('NonExistentPlanet', testDate);\n    expect(sign).toBeNull();\n  });\n\n  test('validatePlanetaryPositions corrects positions that don\\'t match transit dates', () => {\n    // Create test positions with Mars in the wrong sign\n    const positions: Record<string, PlanetPosition> = {\n      'Mars': {\n        sign: 'cancer' as ZodiacSign,\n        degree: 15,\n        minute: 30,\n        exactLongitude: 105.5\n      }\n    };\n\n    const validated = validatePlanetaryPositions(positions, testDate);\n    \n    // Mars should be corrected to Leo based on the mocked transit dates\n    expect(validated.Mars.sign).toBe('leo');\n    // The degree and minute should remain the same\n    expect(validated.Mars.degree).toBe(15);\n    expect(validated.Mars.minute).toBe(30);\n    // Longitude should be updated for Leo (120-150 range)\n    expect(validated.Mars.exactLongitude).toBeGreaterThanOrEqual(120);\n    expect(validated.Mars.exactLongitude).toBeLessThan(150);\n  });\n\n  test('validatePlanetaryPositions leaves correct positions unchanged', () => {\n    // Create test positions with Mars in the correct sign\n    const positions: Record<string, PlanetPosition> = {\n      'Mars': {\n        sign: 'leo' as ZodiacSign,\n        degree: 15,\n        minute: 30,\n        exactLongitude: 135.5\n      }\n    };\n\n    const validated = validatePlanetaryPositions(positions, testDate);\n    \n    // Mars should remain in Leo\n    expect(validated.Mars.sign).toBe('leo');\n    // The degree, minute, and longitude should remain unchanged\n    expect(validated.Mars.degree).toBe(15);\n    expect(validated.Mars.minute).toBe(30);\n    expect(validated.Mars.exactLongitude).toBe(135.5);\n  });\n\n  test('getCurrentTransitPositions provides positions for all major planets', () => {\n    const positions = getCurrentTransitPositions();\n    \n    // Should include all major planets\n    expect(positions).toHaveProperty('Sun');\n    expect(positions).toHaveProperty('Moon');\n    expect(positions).toHaveProperty('Mercury');\n    expect(positions).toHaveProperty('Venus');\n    expect(positions).toHaveProperty('Mars');\n    expect(positions).toHaveProperty('Jupiter');\n    expect(positions).toHaveProperty('Saturn');\n    expect(positions).toHaveProperty('Uranus');\n    expect(positions).toHaveProperty('Neptune');\n    expect(positions).toHaveProperty('Pluto');\n    \n    // Each position should have required properties\n    Object.values(positions).forEach(pos => {\n      expect(pos).toHaveProperty('sign');\n      expect(pos).toHaveProperty('degree');\n      expect(pos).toHaveProperty('exactLongitude');\n    });\n  });\n}); "],"version":3}