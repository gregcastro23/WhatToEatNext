{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/unintentional-any-elimination/__tests__/AnyTypeClassifier.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/unintentional-any-elimination/__tests__/AnyTypeClassifier.test.ts"],"sourcesContent":["/**\n * AnyTypeClassifier Tests\n * Unit tests for the Any Type Classifier component\n */\n\nimport { AnyTypeClassifier } from '../AnyTypeClassifier';\nimport { AnyTypeCategory, ClassificationContext, CodeDomain } from '../types';\n\ndescribe('AnyTypeClassifier', () => {\n  let classifier: AnyTypeClassifier;\n\n  beforeEach(() => {\n    classifier = new AnyTypeClassifier();\n  });\n\n  const createContext = (codeSnippet: string, options: Partial<ClassificationContext> = {}): ClassificationContext => ({\n    filePath: 'test.ts',\n    lineNumber: 1,\n    codeSnippet,\n    surroundingLines: [],\n    hasExistingComment: false,\n    isInTestFile: false,\n    domainContext: {\n      domain: CodeDomain.UTILITY,\n      intentionalityHints: [],\n      suggestedTypes: [],\n      preservationReasons: []\n    },\n    ...options\n  });\n\n  describe('Error Handling Classification', () => {\n    test('classifies error handling any as intentional', async () => {\n      const context = createContext('} catch (error: any) {');\n      const result = await classifier.classify(context);\n\n      expect(result.isIntentional).toBe(true);\n      expect(result.category).toBe(AnyTypeCategory.ERROR_HANDLING);\n      expect(result.confidence).toBeGreaterThan(0.8);\n    });\n\n    test('classifies error variable as intentional', async () => {\n      const context = createContext('const error: any = e;');\n      const result = await classifier.classify(context);\n\n      expect(result.isIntentional).toBe(true);\n      expect(result.category).toBe(AnyTypeCategory.ERROR_HANDLING);\n    });\n  });\n\n  describe('Array Type Classification', () => {\n    test('classifies simple array any as unintentional', async () => {\n      const context = createContext('const items: any[] = [];');\n      const result = await classifier.classify(context);\n\n      expect(result.isIntentional).toBe(false);\n      expect(result.category).toBe(AnyTypeCategory.ARRAY_TYPE);\n      expect(result.suggestedReplacement).toBe('unknown[]');\n      expect(result.confidence).toBeGreaterThan(0.9);\n    });\n\n    test('classifies Array<any> as unintentional', async () => {\n      const context = createContext('const items: Array<any> = [];');\n      const result = await classifier.classify(context);\n\n      expect(result.isIntentional).toBe(false);\n      expect(result.category).toBe(AnyTypeCategory.ARRAY_TYPE);\n    });\n  });\n\n  describe('Record Type Classification', () => {\n    test('classifies Record<string, any> as unintentional', async () => {\n      const context = createContext('const data: Record<string, any> = {};');\n      const result = await classifier.classify(context);\n\n      expect(result.isIntentional).toBe(false);\n      expect(result.category).toBe(AnyTypeCategory.RECORD_TYPE);\n      expect(result.suggestedReplacement).toBe('Record<string, unknown>');\n    });\n\n    test('classifies index signature as unintentional', async () => {\n      const context = createContext('{ [key: string]: any }');\n      const result = await classifier.classify(context);\n\n      expect(result.isIntentional).toBe(false);\n      expect(result.category).toBe(AnyTypeCategory.RECORD_TYPE);\n    });\n  });\n\n  describe('Existing Documentation', () => {\n    test('respects existing intentional documentation', async () => {\n      const context = createContext(\n        'const data: any = response;',\n        {\n          hasExistingComment: true,\n          existingComment: '// Intentionally any: External API response'\n        }\n      );\n\n      const result = await classifier.classify(context);\n\n      expect(result.isIntentional).toBe(true);\n      expect(result.confidence).toBeGreaterThan(0.9);\n      expect(result.requiresDocumentation).toBe(false);\n    });\n  });\n\n  describe('Test File Context', () => {\n    test('classifies test mocks as intentional', async () => {\n      const context = createContext(\n        'const mockFn = jest.fn() as any;',\n        { isInTestFile: true }\n      );\n\n      const result = await classifier.classify(context);\n\n      expect(result.isIntentional).toBe(true);\n      expect(result.category).toBe(AnyTypeCategory.TEST_MOCK);\n    });\n  });\n\n  describe('Domain-Specific Analysis', () => {\n    test('analyzes astrological domain context', async () => {\n      const context = createContext(\n        'const planetaryPositions: any = data;',\n        {\n          filePath: 'src/calculations/planetary/positions.ts',\n          domainContext: {\n            domain: CodeDomain.ASTROLOGICAL,\n            intentionalityHints: [],\n            suggestedTypes: [],\n            preservationReasons: []\n          }\n        }\n      );\n\n      const result = await classifier.classify(context);\n\n      expect(result.isIntentional).toBe(true);\n      expect(result.category).toBe(AnyTypeCategory.EXTERNAL_API);\n      expect(result.reasoning).toContain('astrological');\n    });\n\n    test('analyzes recipe domain context', async () => {\n      const context = createContext(\n        'const ingredient: any = data;',\n        {\n          filePath: 'src/data/ingredients/herbs.ts',\n          domainContext: {\n            domain: CodeDomain.RECIPE,\n            intentionalityHints: [],\n            suggestedTypes: [],\n            preservationReasons: []\n          }\n        }\n      );\n\n      const result = await classifier.classify(context);\n\n      expect(result.isIntentional).toBe(false);\n      expect(result.suggestedReplacement).toBe('Ingredient | Recipe');\n    });\n  });\n\n  describe('Batch Processing', () => {\n    test('processes multiple contexts in batch', async () => {\n      const contexts = [\n        createContext('const items: any[] = [];'),\n        createContext('} catch (error: any) {'),\n        createContext('const data: Record<string, any> = {};')\n      ];\n\n      const results = await classifier.classifyBatch(contexts);\n\n      expect(results).toHaveLength(3);\n      expect(results[0].isIntentional).toBe(false); // array type\n      expect(results[1].isIntentional).toBe(true);  // error handling\n      expect(results[2].isIntentional).toBe(false); // record type\n    });\n\n    test('handles classification errors gracefully in batch', async () => {\n      const contexts = [\n        createContext('const valid: any[] = [];'),\n        // This would cause an error in a real scenario\n        createContext('') // empty context\n      ];\n\n      const results = await classifier.classifyBatch(contexts);\n\n      expect(results).toHaveLength(2);\n      expect(results[0].isIntentional).toBe(false);\n      // Second result should be a safe fallback\n      expect(results[1].isIntentional).toBe(true); // Conservative fallback\n      expect(results[1].confidence).toBeLessThan(0.5);\n    });\n  });\n\n  describe('Edge Cases', () => {\n    test('handles empty code snippet', async () => {\n      const context = createContext('');\n      const result = await classifier.classify(context);\n\n      expect(result.isIntentional).toBe(false);\n      expect(result.confidence).toBeLessThan(0.7);\n    });\n\n    test('handles complex nested any types', async () => {\n      const context = createContext('const complex: Record<string, any[]> = {};');\n      const result = await classifier.classify(context);\n\n      // Should detect the Record pattern\n      expect(result.category).toBe(AnyTypeCategory.RECORD_TYPE);\n    });\n  });\n});\n"],"version":3}