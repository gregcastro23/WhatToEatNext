3ec503283ef31d69f053321a5f78b166
"use strict";
/**
 * AnyTypeClassifier Tests
 * Unit tests for the Any Type Classifier component
 */
Object.defineProperty(exports, "__esModule", { value: true });
const AnyTypeClassifier_1 = require("../AnyTypeClassifier");
const types_1 = require("../types");
describe('AnyTypeClassifier', () => {
    let classifier;
    beforeEach(() => {
        classifier = new AnyTypeClassifier_1.AnyTypeClassifier();
    });
    const createContext = (codeSnippet, options = {}) => ({
        filePath: 'test.ts',
        lineNumber: 1,
        codeSnippet,
        surroundingLines: [],
        hasExistingComment: false,
        isInTestFile: false,
        domainContext: {
            domain: types_1.CodeDomain.UTILITY,
            intentionalityHints: [],
            suggestedTypes: [],
            preservationReasons: []
        },
        ...options
    });
    describe('Error Handling Classification', () => {
        test('classifies error handling any as intentional', async () => {
            const context = createContext('} catch (error: any) {');
            const result = await classifier.classify(context);
            expect(result.isIntentional).toBe(true);
            expect(result.category).toBe(types_1.AnyTypeCategory.ERROR_HANDLING);
            expect(result.confidence).toBeGreaterThan(0.8);
        });
        test('classifies error variable as intentional', async () => {
            const context = createContext('const error: any = e;');
            const result = await classifier.classify(context);
            expect(result.isIntentional).toBe(true);
            expect(result.category).toBe(types_1.AnyTypeCategory.ERROR_HANDLING);
        });
    });
    describe('Array Type Classification', () => {
        test('classifies simple array any as unintentional', async () => {
            const context = createContext('const items: any[] = [];');
            const result = await classifier.classify(context);
            expect(result.isIntentional).toBe(false);
            expect(result.category).toBe(types_1.AnyTypeCategory.ARRAY_TYPE);
            expect(result.suggestedReplacement).toBe('unknown[]');
            expect(result.confidence).toBeGreaterThan(0.9);
        });
        test('classifies Array<any> as unintentional', async () => {
            const context = createContext('const items: Array<any> = [];');
            const result = await classifier.classify(context);
            expect(result.isIntentional).toBe(false);
            expect(result.category).toBe(types_1.AnyTypeCategory.ARRAY_TYPE);
        });
    });
    describe('Record Type Classification', () => {
        test('classifies Record<string, any> as unintentional', async () => {
            const context = createContext('const data: Record<string, any> = {};');
            const result = await classifier.classify(context);
            expect(result.isIntentional).toBe(false);
            expect(result.category).toBe(types_1.AnyTypeCategory.RECORD_TYPE);
            expect(result.suggestedReplacement).toBe('Record<string, unknown>');
        });
        test('classifies index signature as unintentional', async () => {
            const context = createContext('{ [key: string]: any }');
            const result = await classifier.classify(context);
            expect(result.isIntentional).toBe(false);
            expect(result.category).toBe(types_1.AnyTypeCategory.RECORD_TYPE);
        });
    });
    describe('Existing Documentation', () => {
        test('respects existing intentional documentation', async () => {
            const context = createContext('const data: any = response;', {
                hasExistingComment: true,
                existingComment: '// Intentionally any: External API response'
            });
            const result = await classifier.classify(context);
            expect(result.isIntentional).toBe(true);
            expect(result.confidence).toBeGreaterThan(0.9);
            expect(result.requiresDocumentation).toBe(false);
        });
    });
    describe('Test File Context', () => {
        test('classifies test mocks as intentional', async () => {
            const context = createContext('const mockFn = jest.fn() as any;', { isInTestFile: true });
            const result = await classifier.classify(context);
            expect(result.isIntentional).toBe(true);
            expect(result.category).toBe(types_1.AnyTypeCategory.TEST_MOCK);
        });
    });
    describe('Domain-Specific Analysis', () => {
        test('analyzes astrological domain context', async () => {
            const context = createContext('const planetaryPositions: any = data;', {
                filePath: 'src/calculations/planetary/positions.ts',
                domainContext: {
                    domain: types_1.CodeDomain.ASTROLOGICAL,
                    intentionalityHints: [],
                    suggestedTypes: [],
                    preservationReasons: []
                }
            });
            const result = await classifier.classify(context);
            expect(result.isIntentional).toBe(true);
            expect(result.category).toBe(types_1.AnyTypeCategory.EXTERNAL_API);
            expect(result.reasoning).toContain('astrological');
        });
        test('analyzes recipe domain context', async () => {
            const context = createContext('const ingredient: any = data;', {
                filePath: 'src/data/ingredients/herbs.ts',
                domainContext: {
                    domain: types_1.CodeDomain.RECIPE,
                    intentionalityHints: [],
                    suggestedTypes: [],
                    preservationReasons: []
                }
            });
            const result = await classifier.classify(context);
            expect(result.isIntentional).toBe(false);
            expect(result.suggestedReplacement).toBe('Ingredient | Recipe');
        });
    });
    describe('Batch Processing', () => {
        test('processes multiple contexts in batch', async () => {
            const contexts = [
                createContext('const items: any[] = [];'),
                createContext('} catch (error: any) {'),
                createContext('const data: Record<string, any> = {};')
            ];
            const results = await classifier.classifyBatch(contexts);
            expect(results).toHaveLength(3);
            expect(results[0].isIntentional).toBe(false); // array type
            expect(results[1].isIntentional).toBe(true); // error handling
            expect(results[2].isIntentional).toBe(false); // record type
        });
        test('handles classification errors gracefully in batch', async () => {
            const contexts = [
                createContext('const valid: any[] = [];'),
                // This would cause an error in a real scenario
                createContext('') // empty context
            ];
            const results = await classifier.classifyBatch(contexts);
            expect(results).toHaveLength(2);
            expect(results[0].isIntentional).toBe(false);
            // Second result should be a safe fallback
            expect(results[1].isIntentional).toBe(true); // Conservative fallback
            expect(results[1].confidence).toBeLessThan(0.5);
        });
    });
    describe('Edge Cases', () => {
        test('handles empty code snippet', async () => {
            const context = createContext('');
            const result = await classifier.classify(context);
            expect(result.isIntentional).toBe(false);
            expect(result.confidence).toBeLessThan(0.7);
        });
        test('handles complex nested any types', async () => {
            const context = createContext('const complex: Record<string, any[]> = {};');
            const result = await classifier.classify(context);
            // Should detect the Record pattern
            expect(result.category).toBe(types_1.AnyTypeCategory.RECORD_TYPE);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,