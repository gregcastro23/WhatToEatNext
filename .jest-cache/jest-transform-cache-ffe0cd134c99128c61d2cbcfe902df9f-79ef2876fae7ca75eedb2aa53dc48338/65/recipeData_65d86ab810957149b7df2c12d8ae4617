043e92e94d58f18516d6f379eb8e410a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.recipeData = exports.recipeDataService = void 0;
const logger_1 = require("../utils/logger");
const errorHandler_1 = require("./errorHandler");
const elementalMappings_1 = require("../data/recipes/elementalMappings");
const cache_1 = require("../utils/cache");
const RecipeElementalService_1 = require("./RecipeElementalService");
// Sample cuisines for initial data
const CUISINES = [
    'Italian',
    'Japanese',
    'Mexican',
    'Indian',
    'Chinese',
    'French',
    'Greek',
    'Thai'
];
// Cache key for recipes
const RECIPE_CACHE_KEY = 'all_recipes';
// Helper function for safe string extraction
function safeGetString(value) {
    if (typeof value === 'string') {
        return value;
    }
    return undefined;
}
/**
 * Ensures a recipe has all required properties with defaults as needed
 * This is the single source of truth for recipe validation and normalization
 */
function ensureRecipeProperties(recipe) {
    var _a, _b, _c, _d;
    if (!recipe) {
        throw new Error('Recipe cannot be null or undefined');
    }
    // Validate name format
    const recipeName = recipe === null || recipe === void 0 ? void 0 : recipe.name;
    if (recipeName && typeof recipeName === 'string') {
        if (recipeName.length < 3 || recipeName.length > 100) {
            throw new Error('Recipe name must be between 3 and 100 characters');
        }
    }
    // Core required properties with enhanced validation
    const safeRecipe = {
        id: safeGetString(recipe === null || recipe === void 0 ? void 0 : recipe.id) || `recipe-${Date.now()}`,
        name: safeGetString(recipe === null || recipe === void 0 ? void 0 : recipe.name) || 'Unnamed Recipe',
        description: safeGetString(recipe === null || recipe === void 0 ? void 0 : recipe.description) || '',
        cuisine: safeGetString(recipe === null || recipe === void 0 ? void 0 : recipe.cuisine) || '',
        ingredients: validateAndNormalizeIngredients(Array.isArray(recipe.ingredients) ? recipe.ingredients : []),
        instructions: validateAndNormalizeInstructions(recipe.instructions || []),
        timeToMake: validateAndNormalizeTime(recipe.timeToMake) || '30 minutes',
        numberOfServings: validateServings(recipe.numberOfServings) || 2,
        // Use the new recipe elemental service to ensure proper elemental properties
        elementalProperties: RecipeElementalService_1.recipeElementalService.standardizeRecipe(recipe).elementalProperties
    };
    // Optional properties with validation
    if (recipe === null || recipe === void 0 ? void 0 : recipe.mealType) {
        safeRecipe.mealType = validateMealType(recipe === null || recipe === void 0 ? void 0 : recipe.mealType);
    }
    if (recipe === null || recipe === void 0 ? void 0 : recipe.season) {
        safeRecipe.season = validateSeason(recipe === null || recipe === void 0 ? void 0 : recipe.season);
    }
    // Boolean properties
    safeRecipe.isVegetarian = (_a = recipe.isVegetarian) !== null && _a !== void 0 ? _a : false;
    safeRecipe.isVegan = (_b = recipe.isVegan) !== null && _b !== void 0 ? _b : false;
    safeRecipe.isGlutenFree = (_c = recipe.isGlutenFree) !== null && _c !== void 0 ? _c : false;
    safeRecipe.isDairyFree = (_d = recipe.isDairyFree) !== null && _d !== void 0 ? _d : false;
    // Optional complex properties
    if (recipe.astrologicalInfluences) {
        safeRecipe.astrologicalInfluences = validateAstrologicalInfluences(recipe.astrologicalInfluences);
    }
    if (recipe === null || recipe === void 0 ? void 0 : recipe.nutrition) {
        safeRecipe.nutrition = validateAndNormalizeNutrition(recipe === null || recipe === void 0 ? void 0 : recipe.nutrition);
    }
    // Timestamp handling
    safeRecipe.createdAt = recipe.createdAt || new Date().toISOString();
    safeRecipe.updatedAt = new Date().toISOString();
    return safeRecipe;
}
// Helper validation functions
function validateAndNormalizeIngredients(ingredients) {
    if (!Array.isArray(ingredients)) {
        throw new Error('Ingredients must be an array');
    }
    if (ingredients.length === 0) {
        throw new Error('Recipe must have at least one ingredient');
    }
    return ingredients.map(ing => ({
        name: safeGetString(ing === null || ing === void 0 ? void 0 : ing.name) || 'Unknown Ingredient',
        amount: typeof ing.amount === 'number' ? ing.amount : 1,
        unit: ing.unit || 'piece',
        category: ing.category || 'other',
        optional: ing.optional || false,
        preparation: ing.preparation || '',
        notes: ing.notes || '',
        // Standardize ingredient elemental properties too
        elementalProperties: (ing === null || ing === void 0 ? void 0 : ing.elementalProperties) ?
            RecipeElementalService_1.recipeElementalService.standardizeRecipe({ elementalProperties: ing === null || ing === void 0 ? void 0 : ing.elementalProperties }).elementalProperties || { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 } :
            { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 }
    }));
}
function validateAndNormalizeInstructions(instructions) {
    if (!Array.isArray(instructions)) {
        return ['Prepare ingredients', 'Cook until done'];
    }
    if (instructions.length === 0) {
        return ['Prepare ingredients', 'Cook until done'];
    }
    return instructions.map(step => typeof step === 'string' ? step : 'Prepare according to preference');
}
function validateAndNormalizeTime(time) {
    if (!time)
        return '30 minutes';
    if (typeof time === 'number') {
        return `${time} minutes`;
    }
    if (typeof time === 'string') {
        // Check if already has time units
        if (/minutes|mins|hours|hrs/i.test(time)) {
            return time;
        }
        // Try to parse as number
        const timeNum = parseInt(time, 10);
        if (!isNaN(timeNum)) {
            return `${timeNum} minutes`;
        }
    }
    return '30 minutes';
}
function validateServings(servings) {
    if (typeof servings === 'number') {
        return Math.max(1, Math.min(12, Math.round(servings)));
    }
    if (typeof servings === 'string') {
        const num = parseInt(servings, 10);
        if (!isNaN(num)) {
            return Math.max(1, Math.min(12, num));
        }
    }
    return 2;
}
function validateMealType(mealType) {
    const validMealTypes = ['breakfast', 'lunch', 'dinner', 'snack', 'dessert', 'drink', 'appetizer', 'side'];
    if (typeof mealType === 'string') {
        if (validMealTypes.includes(mealType.toLowerCase())) {
            return [mealType.toLowerCase()];
        }
        return ['dinner'];
    }
    if (Array.isArray(mealType)) {
        const validEntries = mealType
            .filter(type => typeof type === 'string')
            .map(type => type.toLowerCase())
            .filter(type => validMealTypes.includes(type));
        return validEntries.length > 0 ? validEntries : ['dinner'];
    }
    return ['dinner'];
}
function validateSeason(season) {
    const validSeasons = ['spring', 'summer', 'fall', 'winter', 'all'];
    if (typeof season === 'string') {
        if (validSeasons.includes(season.toLowerCase())) {
            return [season.toLowerCase()];
        }
        return ['all'];
    }
    if (Array.isArray(season)) {
        const validEntries = season
            .filter(s => typeof s === 'string')
            .map(s => s.toLowerCase())
            .filter(s => validSeasons.includes(s));
        return validEntries.length > 0 ? validEntries : ['all'];
    }
    return ['all'];
}
function validateAstrologicalInfluences(influences) {
    if (typeof influences === 'string') {
        return [influences];
    }
    if (Array.isArray(influences)) {
        const validEntries = influences
            .filter(i => typeof i === 'string')
            .filter(i => i.length > 0);
        return validEntries.length > 0 ? validEntries : ['all'];
    }
    return ['all'];
}
function validateAndNormalizeNutrition(nutrition) {
    if (!nutrition || typeof nutrition !== 'object') {
        return {};
    }
    const safeNutrition = {};
    // Validate numeric fields
    ['calories', 'protein', 'carbs', 'fat'].forEach(field => {
        if (typeof nutrition[field] === 'number') {
            safeNutrition[field] = nutrition[field];
        }
    });
    // Validate array fields (vitamins, minerals)
    if (Array.isArray(nutrition.vitamins)) {
        safeNutrition.vitamins = nutrition.vitamins
            .filter((v) => typeof v === 'string')
            .slice(0, 10); // Limit to 10 items
    }
    if (Array.isArray(nutrition.minerals)) {
        safeNutrition.minerals = nutrition.minerals
            .filter((m) => typeof m === 'string')
            .slice(0, 10); // Limit to 10 items
    }
    return safeNutrition;
}
class RecipeData {
    constructor() {
        this.recipes = [];
        this.initialized = false;
        this.initPromise = null;
        // Start loading data immediately
        this.initPromise = this.loadRecipeData();
    }
    async loadRecipeData() {
        try {
            logger_1.logger.info('Loading recipe data...');
            // Create recipes from mappings safely
            if (!elementalMappings_1.recipeElementalMappings) {
                logger_1.logger.error('recipeElementalMappings not found or invalid');
                this.recipes = [];
                this.initialized = true;
                return;
            }
            // Handle different formats of recipeElementalMappings
            const mappingsEntries = Array.isArray(elementalMappings_1.recipeElementalMappings)
                ? elementalMappings_1.recipeElementalMappings
                : Object.entries(elementalMappings_1.recipeElementalMappings).map(([id, mapping]) => ({
                    id,
                    ...mapping
                }));
            this.recipes = mappingsEntries.map((mapping) => {
                var _a, _b, _c, _d;
                let elementalProps = (mapping === null || mapping === void 0 ? void 0 : mapping.elementalProperties) || (mapping === null || mapping === void 0 ? void 0 : mapping.elementalProfile);
                // If no elemental properties, derive them from cuisine or other attributes
                if (!elementalProps) {
                    const mappingData = mapping;
                    elementalProps = RecipeElementalService_1.recipeElementalService.deriveElementalProperties({
                        cuisine: String(((_a = mappingData === null || mappingData === void 0 ? void 0 : mappingData.cuisine) === null || _a === void 0 ? void 0 : _a.name) || (mappingData === null || mappingData === void 0 ? void 0 : mappingData.cuisine) || ''),
                        cookingMethod: String((mappingData === null || mappingData === void 0 ? void 0 : mappingData.cookingMethod) || '')
                    });
                }
                // Create a partial recipe object with safe defaults
                const mappingData = mapping;
                const partialRecipe = {
                    id: safeGetString(mappingData === null || mappingData === void 0 ? void 0 : mappingData.id) || `recipe-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,
                    name: safeGetString(mappingData === null || mappingData === void 0 ? void 0 : mappingData.name) || safeGetString(mappingData === null || mappingData === void 0 ? void 0 : mappingData.id) || 'Unknown Recipe',
                    cuisine: safeGetString((_b = mappingData === null || mappingData === void 0 ? void 0 : mappingData.cuisine) === null || _b === void 0 ? void 0 : _b.name) || safeGetString(mappingData === null || mappingData === void 0 ? void 0 : mappingData.cuisine) || 'Unknown',
                    description: safeGetString(mappingData === null || mappingData === void 0 ? void 0 : mappingData.description) || safeGetString((_c = mappingData === null || mappingData === void 0 ? void 0 : mappingData.cuisine) === null || _c === void 0 ? void 0 : _c.description) || '',
                    elementalProperties: elementalProps,
                    ingredients: Array.isArray(mappingData === null || mappingData === void 0 ? void 0 : mappingData.ingredients)
                        ? mappingData.ingredients.map((ing) => {
                            const ingData = ing;
                            return {
                                name: String((ingData === null || ingData === void 0 ? void 0 : ingData.name) || 'Unknown Ingredient'),
                                amount: typeof (ingData === null || ingData === void 0 ? void 0 : ingData.amount) === 'number' ? ingData.amount : 1,
                                unit: String((ingData === null || ingData === void 0 ? void 0 : ingData.unit) || 'piece'),
                                category: String((ingData === null || ingData === void 0 ? void 0 : ingData.category) || 'other')
                            };
                        })
                        : [],
                    instructions: Array.isArray(mappingData === null || mappingData === void 0 ? void 0 : mappingData.instructions) ? mappingData.instructions : [],
                    timeToMake: (mappingData === null || mappingData === void 0 ? void 0 : mappingData.timeToMake) || '30 minutes',
                    energyProfile: (mappingData === null || mappingData === void 0 ? void 0 : mappingData.energyProfile) || {},
                    // Critical field: always ensure astrologicalInfluences is set
                    astrologicalInfluences: ((mappingData === null || mappingData === void 0 ? void 0 : mappingData.astrologicalInfluences) ?
                        (Array.isArray(mappingData.astrologicalInfluences) ?
                            mappingData.astrologicalInfluences :
                            [String(mappingData.astrologicalInfluences)]) :
                        (((_d = mappingData === null || mappingData === void 0 ? void 0 : mappingData.astrologicalProfile) === null || _d === void 0 ? void 0 : _d.rulingPlanets) ?
                            (Array.isArray(mappingData.astrologicalProfile.rulingPlanets) ?
                                mappingData.astrologicalProfile.rulingPlanets :
                                [String(mappingData.astrologicalProfile.rulingPlanets)]) :
                            ["all"])),
                    season: Array.isArray(mappingData === null || mappingData === void 0 ? void 0 : mappingData.seasonalProperties) ? mappingData.seasonalProperties :
                        Array.isArray(mappingData === null || mappingData === void 0 ? void 0 : mappingData.season) ? mappingData.season : ['all'],
                    mealType: Array.isArray(mappingData === null || mappingData === void 0 ? void 0 : mappingData.mealType) ? mappingData.mealType : ['dinner'],
                    numberOfServings: typeof (mappingData === null || mappingData === void 0 ? void 0 : mappingData.servings) === 'number' ? mappingData.servings : 2,
                    createdAt: new Date().toISOString(),
                    updatedAt: new Date().toISOString()
                };
                // Ensure all properties are properly set with defaults as needed
                return ensureRecipeProperties(partialRecipe);
            });
            // Mark as initialized
            this.initialized = true;
            logger_1.logger.info(`Loaded ${this.recipes.length} recipes successfully`);
            // Cache the recipes
            cache_1.cache.set(RECIPE_CACHE_KEY, this.recipes);
        }
        catch (error) {
            logger_1.logger.error('Error loading recipes:', error);
            // Initialize with an empty array to prevent further errors
            this.recipes = [];
            this.initialized = true;
        }
    }
    // Add a method to standardize recipes after they've been loaded from anywhere
    standardizeRecipes(recipes) {
        return recipes.map(recipe => {
            // First ensure elemental properties are properly set
            const withElementalProps = RecipeElementalService_1.recipeElementalService.standardizeRecipe(recipe);
            // Then ensure all other properties are valid
            return ensureRecipeProperties({
                ...recipe,
                elementalProperties: (withElementalProps === null || withElementalProps === void 0 ? void 0 : withElementalProps.elementalProperties) || { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 }
            });
        });
    }
    async getAllRecipes() {
        try {
            // Check cache first
            const cachedRecipes = cache_1.cache.get(RECIPE_CACHE_KEY);
            if (cachedRecipes) {
                // Standardize all cached recipes
                return this.standardizeRecipes(cachedRecipes);
            }
            // If not initialized, wait for initialization
            if (!this.initialized) {
                logger_1.logger.info('Waiting for recipe data to initialize...');
                if (this.initPromise) {
                    await this.initPromise;
                }
                else {
                    await this.loadRecipeData();
                }
            }
            // If we still have no recipes, return at least a fallback recipe
            if (!this.recipes.length) {
                const fallbackRecipe = this.getFallbackRecipe();
                return [fallbackRecipe];
            }
            // Standardize all recipes
            const safeRecipes = this.standardizeRecipes(this.recipes);
            // Update cache
            cache_1.cache.set(RECIPE_CACHE_KEY, safeRecipes);
            return safeRecipes;
        }
        catch (error) {
            errorHandler_1.errorHandler.handleError(error, {
                context: 'RecipeData',
                action: 'getAllRecipes'
            });
            // Return at least one fallback recipe to prevent application errors
            return [this.getFallbackRecipe()];
        }
    }
    getFallbackRecipe() {
        return ensureRecipeProperties({
            id: 'universal-balance',
            name: "Universal Balance Bowl",
            description: "A harmonious blend for any occasion",
            ingredients: [
                { name: "Mixed Greens", amount: 2, unit: "cups", category: "vegetables" },
                { name: "Quinoa", amount: 1, unit: "cup", category: "grains" },
                { name: "Mixed Seeds", amount: 0.25, unit: "cup", category: "garnish" }
            ],
            instructions: [
                "Combine all ingredients in a bowl",
                "Season to taste",
                "Enjoy mindfully"
            ],
            timeToMake: "15 minutes",
            numberOfServings: 2,
            elementalProperties: {
                Fire: 0.25, Earth: 0.25, Air: 0.25, Water: 0.25
            },
            season: ["all"],
            mealType: ["lunch", "dinner"],
            cuisine: "international",
            isVegetarian: true,
            isVegan: true,
            isGlutenFree: true,
            isDairyFree: true,
            score: 1,
            astrologicalInfluences: ["all"]
        });
    }
    async getRecipeByCuisine(cuisine) {
        try {
            if (this.initPromise) {
                await this.initPromise;
            }
            const allRecipes = await this.getAllRecipes();
            return allRecipes.filter(recipe => {
                const recipeData = recipe;
                const recipeCuisine = String((recipeData === null || recipeData === void 0 ? void 0 : recipeData.cuisine) || '').toLowerCase();
                const targetCuisine = String(cuisine || '').toLowerCase();
                return recipeCuisine === targetCuisine;
            });
        }
        catch (error) {
            errorHandler_1.errorHandler.handleError(error, {
                context: 'RecipeData',
                action: 'getRecipeByCuisine',
                cuisine
            });
            return [this.getFallbackRecipe()];
        }
    }
    async searchRecipes(query) {
        var _a;
        try {
            if (this.initPromise) {
                await this.initPromise;
            }
            const lowercaseQuery = (_a = query === null || query === void 0 ? void 0 : query.toLowerCase) === null || _a === void 0 ? void 0 : _a.call(query);
            const recipes = await this.getAllRecipes();
            return recipes.filter(recipe => {
                const recipeData = recipe;
                const recipeName = String((recipeData === null || recipeData === void 0 ? void 0 : recipeData.name) || '').toLowerCase();
                const recipeCuisine = String((recipeData === null || recipeData === void 0 ? void 0 : recipeData.cuisine) || '').toLowerCase();
                return recipeName.includes(lowercaseQuery) || recipeCuisine.includes(lowercaseQuery);
            });
        }
        catch (error) {
            errorHandler_1.errorHandler.handleError(error, {
                context: 'RecipeData',
                action: 'searchRecipes',
                query
            });
            return [this.getFallbackRecipe()];
        }
    }
    async getRecommendedRecipes(count = 3) {
        try {
            if (this.initPromise) {
                await this.initPromise;
            }
            const recipes = await this.getAllRecipes();
            // For now, just return random recipes
            return recipes
                .sort(() => Math.random() - 0.5)
                .slice(0, count);
        }
        catch (error) {
            errorHandler_1.errorHandler.handleError(error, {
                context: 'RecipeData',
                action: 'getRecommendedRecipes'
            });
            return [this.getFallbackRecipe()];
        }
    }
    async addRecipe(recipe) {
        // Ensure the recipe has all required properties
        const newRecipe = ensureRecipeProperties(recipe);
        // Add to recipes array
        this.recipes.push(newRecipe);
        // Clear cache
        cache_1.cache.delete(RECIPE_CACHE_KEY);
        return newRecipe;
    }
    async getRecipeById(id) {
        try {
            const recipes = await this.getAllRecipes();
            const recipe = recipes.find(r => r.id === id);
            return recipe || null;
        }
        catch (error) {
            errorHandler_1.errorHandler.handleError(error, {
                context: 'RecipeData',
                action: 'getRecipeById',
                id
            });
            return null;
        }
    }
    async filterRecipes(filters) {
        try {
            if (this.initPromise) {
                await this.initPromise;
            }
            const recipes = await this.getAllRecipes();
            const filteredRecipes = recipes.filter(recipe => {
                // Filter by cuisine
                if (filters.cuisine && recipe.cuisine) {
                    const recipeCuisine = String(recipe.cuisine || '').toLowerCase();
                    const targetCuisine = String(filters.cuisine || '').toLowerCase();
                    if (!recipeCuisine.includes(targetCuisine)) {
                        return false;
                    }
                }
                // Filter by meal type
                if (filters.mealType && filters.mealType.length > 0 && recipe.mealType) {
                    const mealTypes = Array.isArray(recipe.mealType)
                        ? recipe.mealType.map(mt => String(mt || '').toLowerCase())
                        : [String(recipe.mealType || '').toLowerCase()];
                    const targetMealTypes = filters.mealType.map(mt => String(mt || '').toLowerCase());
                    if (!targetMealTypes.some(target => mealTypes.includes(target))) {
                        return false;
                    }
                }
                // Filter by season
                if (filters.season && filters.season.length > 0 && recipe.season) {
                    const seasons = Array.isArray(recipe.season)
                        ? recipe.season.map(s => String(s || '').toLowerCase())
                        : [String(recipe.season || '').toLowerCase()];
                    // Special case: if 'all' is included in recipe seasons, it matches any season
                    if (!seasons.includes('all')) {
                        const targetSeasons = filters.season.map(s => String(s || '').toLowerCase());
                        if (!targetSeasons.some(target => seasons.includes(target))) {
                            return false;
                        }
                    }
                }
                // Filter by astrological influences
                if (filters.astrologicalInfluences && filters.astrologicalInfluences.length > 0) {
                    const influences = recipe.astrologicalInfluences || [];
                    // Special case: if 'all' is included, it matches any influence
                    if (!influences.includes('all')) {
                        const hasMatch = filters.astrologicalInfluences.some(influence => influences.some(recipeInfluence => String(recipeInfluence || '').toLowerCase() === String(influence || '').toLowerCase()));
                        if (!hasMatch) {
                            return false;
                        }
                    }
                }
                // Filter by dietary restrictions
                if (filters.isVegetarian && recipe.isVegetarian === false) {
                    return false;
                }
                if (filters.isVegan && recipe.isVegan === false) {
                    return false;
                }
                if (filters.isGlutenFree && recipe.isGlutenFree === false) {
                    return false;
                }
                if (filters.isDairyFree && recipe.isDairyFree === false) {
                    return false;
                }
                return true;
            });
            return filteredRecipes;
        }
        catch (error) {
            errorHandler_1.errorHandler.handleError(error, {
                context: 'RecipeData',
                action: 'filterRecipes'
            });
            return [this.getFallbackRecipe()];
        }
    }
}
// Export the singleton instance
exports.recipeDataService = new RecipeData();
// Export alias for compatibility
exports.recipeData = exports.recipeDataService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,