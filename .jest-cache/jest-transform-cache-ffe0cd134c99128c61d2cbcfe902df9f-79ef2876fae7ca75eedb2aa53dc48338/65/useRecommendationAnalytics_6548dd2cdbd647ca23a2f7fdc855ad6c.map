{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/hooks/useRecommendationAnalytics.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/hooks/useRecommendationAnalytics.ts"],"sourcesContent":["/**\n * useRecommendationAnalytics Hook\n * \n * React hook for integrating recommendation analytics into components\n * Provides performance tracking, caching, and user interaction analytics\n */\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { recommendationAnalytics, RecommendationMetrics, RecommendationConfidence, AnalyticsSnapshot } from '@/services/RecommendationAnalyticsService';\nimport { logger } from '@/utils/logger';\n\n// ========== INTERFACES ==========\n\nexport interface UseRecommendationAnalyticsOptions {\n  enablePerformanceTracking?: boolean;\n  enableCaching?: boolean;\n  enableInteractionTracking?: boolean;\n  metricsUpdateInterval?: number;\n}\n\nexport interface RecommendationAnalyticsState {\n  metrics: RecommendationMetrics | null;\n  cacheStats: {\n    hitRate: number;\n    totalEntries: number;\n    memoryUsage: number;\n  };\n  performanceTrends: {\n    averageLoadTime: number;\n    averageCacheHitRate: number;\n    performanceScore: number;\n  };\n  isLoading: boolean;\n  error: string | null;\n}\n\nexport interface RecommendationAnalyticsActions {\n  startTiming: (operation: string) => () => number;\n  recordApiResponse: (duration: number) => void;\n  recordLoadTime: (duration: number) => void;\n  getCachedRecommendation: <T>(key: string) => T | null;\n  cacheRecommendation: <T>(key: string, data: T, confidenceScore?: number) => void;\n  calculateConfidence: (factors: any) => RecommendationConfidence;\n  trackInteraction: (type: string, target: string, metadata?: Record<string, unknown>) => void;\n  getAnalyticsSnapshot: () => AnalyticsSnapshot;\n  clearAnalytics: () => void;\n}\n\n// ========== HOOK IMPLEMENTATION ==========\n\nexport function useRecommendationAnalytics(\n  options: UseRecommendationAnalyticsOptions = {}\n): [RecommendationAnalyticsState, RecommendationAnalyticsActions] {\n  const {\n    enablePerformanceTracking = true,\n    enableCaching = true,\n    enableInteractionTracking = true,\n    metricsUpdateInterval = 5000 // 5 seconds\n  } = options;\n\n  // ========== STATE ==========\n\n  const [state, setState] = useState<RecommendationAnalyticsState>({\n    metrics: null,\n    cacheStats: {\n      hitRate: 0,\n      totalEntries: 0,\n      memoryUsage: 0\n    },\n    performanceTrends: {\n      averageLoadTime: 0,\n      averageCacheHitRate: 0,\n      performanceScore: 0\n    },\n    isLoading: false,\n    error: null\n  });\n\n  const metricsIntervalRef = useRef<NodeJS.Timeout | null>(null);\n  const mountedRef = useRef(true);\n\n  // ========== EFFECTS ==========\n\n  useEffect(() => {\n    if (enablePerformanceTracking) {\n      // Start periodic metrics collection\n      metricsIntervalRef.current = setInterval(() => {\n        if (mountedRef.current) {\n          updateMetrics();\n        }\n      }, metricsUpdateInterval);\n\n      // Initial metrics update\n      updateMetrics();\n    }\n\n    return () => {\n      if (metricsIntervalRef.current) {\n        clearInterval(metricsIntervalRef.current);\n      }\n      mountedRef.current = false;\n    };\n  }, [enablePerformanceTracking, metricsUpdateInterval]);\n\n  // ========== HELPER FUNCTIONS ==========\n\n  const updateMetrics = useCallback(async () => {\n    try {\n      setState(prev => ({ ...prev, isLoading: true, error: null }));\n\n      const metrics = recommendationAnalytics.recordMetricsSnapshot();\n      const cacheStats = recommendationAnalytics.getCacheStats();\n      const performanceTrends = recommendationAnalytics.getPerformanceTrends(300000); // Last 5 minutes\n\n      if (mountedRef.current) {\n        setState(prev => ({\n          ...prev,\n          metrics,\n          cacheStats: {\n            hitRate: cacheStats.recommendation.hitRate,\n            totalEntries: cacheStats.recommendation.totalEntries,\n            memoryUsage: cacheStats.recommendation.memoryUsage\n          },\n          performanceTrends: {\n            averageLoadTime: performanceTrends.averageLoadTime,\n            averageCacheHitRate: performanceTrends.averageCacheHitRate,\n            performanceScore: performanceTrends.performanceScore\n          },\n          isLoading: false\n        }));\n      }\n    } catch (error) {\n      logger.error('Failed to update recommendation analytics metrics:', error);\n      if (mountedRef.current) {\n        setState(prev => ({\n          ...prev,\n          error: error instanceof Error ? error.message : 'Unknown error',\n          isLoading: false\n        }));\n      }\n    }\n  }, []);\n\n  // ========== ACTIONS ==========\n\n  const startTiming = useCallback((operation: string) => {\n    if (!enablePerformanceTracking) {\n      return () => 0;\n    }\n\n    return recommendationAnalytics.startTiming(operation);\n  }, [enablePerformanceTracking]);\n\n  const recordApiResponse = useCallback((duration: number) => {\n    if (enablePerformanceTracking) {\n      recommendationAnalytics.recordApiResponseTime(duration);\n    }\n  }, [enablePerformanceTracking]);\n\n  const recordLoadTime = useCallback((duration: number) => {\n    if (enablePerformanceTracking) {\n      recommendationAnalytics.recordLoadTime(duration);\n    }\n  }, [enablePerformanceTracking]);\n\n  const getCachedRecommendation = useCallback(<T>(key: string): T | null => {\n    if (!enableCaching) {\n      return null;\n    }\n\n    return recommendationAnalytics.getCachedRecommendation<T>(key);\n  }, [enableCaching]);\n\n  const cacheRecommendation = useCallback(<T>(\n    key: string, \n    data: T, \n    confidenceScore?: number\n  ) => {\n    if (enableCaching) {\n      recommendationAnalytics.cacheRecommendation(key, data, confidenceScore);\n    }\n  }, [enableCaching]);\n\n  const calculateConfidence = useCallback((factors: any): RecommendationConfidence => {\n    return recommendationAnalytics.calculateConfidenceScore(factors);\n  }, []);\n\n  const trackInteraction = useCallback((\n    type: string, \n    target: string, \n    metadata?: Record<string, unknown>\n  ) => {\n    if (enableInteractionTracking) {\n      recommendationAnalytics.trackInteraction({\n        type: type as any,\n        target,\n        metadata\n      });\n    }\n  }, [enableInteractionTracking]);\n\n  const getAnalyticsSnapshot = useCallback((): AnalyticsSnapshot => {\n    return recommendationAnalytics.getAnalyticsSnapshot();\n  }, []);\n\n  const clearAnalytics = useCallback(() => {\n    recommendationAnalytics.clearAnalytics();\n    updateMetrics();\n  }, [updateMetrics]);\n\n  // ========== RETURN ==========\n\n  const actions: RecommendationAnalyticsActions = {\n    startTiming,\n    recordApiResponse,\n    recordLoadTime,\n    getCachedRecommendation,\n    cacheRecommendation,\n    calculateConfidence,\n    trackInteraction,\n    getAnalyticsSnapshot,\n    clearAnalytics\n  };\n\n  return [state, actions];\n}\n\n// ========== UTILITY HOOKS ==========\n\n/**\n * Hook for tracking component performance\n */\nexport function usePerformanceTracking(componentName: string) {\n  const [, { startTiming, recordLoadTime }] = useRecommendationAnalytics({\n    enablePerformanceTracking: true,\n    enableCaching: false,\n    enableInteractionTracking: false\n  });\n\n  const trackRender = useCallback(() => {\n    return startTiming(`${componentName}_render`);\n  }, [componentName, startTiming]);\n\n  const trackOperation = useCallback((operationName: string) => {\n    return startTiming(`${componentName}_${operationName}`);\n  }, [componentName, startTiming]);\n\n  return {\n    trackRender,\n    trackOperation,\n    recordLoadTime\n  };\n}\n\n/**\n * Hook for caching recommendations\n */\nexport function useRecommendationCache<T>() {\n  const [, { getCachedRecommendation, cacheRecommendation }] = useRecommendationAnalytics({\n    enablePerformanceTracking: false,\n    enableCaching: true,\n    enableInteractionTracking: false\n  });\n\n  const getCached = useCallback((key: string): T | null => {\n    return getCachedRecommendation<T>(key);\n  }, [getCachedRecommendation]);\n\n  const setCached = useCallback((key: string, data: T, confidenceScore?: number) => {\n    cacheRecommendation(key, data, confidenceScore);\n  }, [cacheRecommendation]);\n\n  return {\n    getCached,\n    setCached\n  };\n}\n\n/**\n * Hook for tracking user interactions\n */\nexport function useInteractionTracking() {\n  const [, { trackInteraction }] = useRecommendationAnalytics({\n    enablePerformanceTracking: false,\n    enableCaching: false,\n    enableInteractionTracking: true\n  });\n\n  const trackClick = useCallback((target: string, metadata?: Record<string, unknown>) => {\n    trackInteraction('select', target, metadata);\n  }, [trackInteraction]);\n\n  const trackView = useCallback((target: string, metadata?: Record<string, unknown>) => {\n    trackInteraction('view', target, metadata);\n  }, [trackInteraction]);\n\n  const trackExpand = useCallback((target: string, metadata?: Record<string, unknown>) => {\n    trackInteraction('expand', target, metadata);\n  }, [trackInteraction]);\n\n  const trackSearch = useCallback((query: string, metadata?: Record<string, unknown>) => {\n    trackInteraction('search', query, metadata);\n  }, [trackInteraction]);\n\n  const trackFilter = useCallback((filterType: string, metadata?: Record<string, unknown>) => {\n    trackInteraction('filter', filterType, metadata);\n  }, [trackInteraction]);\n\n  return {\n    trackClick,\n    trackView,\n    trackExpand,\n    trackSearch,\n    trackFilter\n  };\n}"],"version":3}