3b7285faf3034929049d70a6faf05312
"use strict";
/**
 * useRecommendationAnalytics Hook
 *
 * React hook for integrating recommendation analytics into components
 * Provides performance tracking, caching, and user interaction analytics
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useInteractionTracking = exports.useRecommendationCache = exports.usePerformanceTracking = exports.useRecommendationAnalytics = void 0;
const react_1 = require("react");
const RecommendationAnalyticsService_1 = require("@/services/RecommendationAnalyticsService");
const logger_1 = require("@/utils/logger");
// ========== HOOK IMPLEMENTATION ==========
function useRecommendationAnalytics(options = {}) {
    const { enablePerformanceTracking = true, enableCaching = true, enableInteractionTracking = true, metricsUpdateInterval = 5000 // 5 seconds
     } = options;
    // ========== STATE ==========
    const [state, setState] = (0, react_1.useState)({
        metrics: null,
        cacheStats: {
            hitRate: 0,
            totalEntries: 0,
            memoryUsage: 0
        },
        performanceTrends: {
            averageLoadTime: 0,
            averageCacheHitRate: 0,
            performanceScore: 0
        },
        isLoading: false,
        error: null
    });
    const metricsIntervalRef = (0, react_1.useRef)(null);
    const mountedRef = (0, react_1.useRef)(true);
    // ========== EFFECTS ==========
    (0, react_1.useEffect)(() => {
        if (enablePerformanceTracking) {
            // Start periodic metrics collection
            metricsIntervalRef.current = setInterval(() => {
                if (mountedRef.current) {
                    updateMetrics();
                }
            }, metricsUpdateInterval);
            // Initial metrics update
            updateMetrics();
        }
        return () => {
            if (metricsIntervalRef.current) {
                clearInterval(metricsIntervalRef.current);
            }
            mountedRef.current = false;
        };
    }, [enablePerformanceTracking, metricsUpdateInterval]);
    // ========== HELPER FUNCTIONS ==========
    const updateMetrics = (0, react_1.useCallback)(async () => {
        try {
            setState(prev => ({ ...prev, isLoading: true, error: null }));
            const metrics = RecommendationAnalyticsService_1.recommendationAnalytics.recordMetricsSnapshot();
            const cacheStats = RecommendationAnalyticsService_1.recommendationAnalytics.getCacheStats();
            const performanceTrends = RecommendationAnalyticsService_1.recommendationAnalytics.getPerformanceTrends(300000); // Last 5 minutes
            if (mountedRef.current) {
                setState(prev => ({
                    ...prev,
                    metrics,
                    cacheStats: {
                        hitRate: cacheStats.recommendation.hitRate,
                        totalEntries: cacheStats.recommendation.totalEntries,
                        memoryUsage: cacheStats.recommendation.memoryUsage
                    },
                    performanceTrends: {
                        averageLoadTime: performanceTrends.averageLoadTime,
                        averageCacheHitRate: performanceTrends.averageCacheHitRate,
                        performanceScore: performanceTrends.performanceScore
                    },
                    isLoading: false
                }));
            }
        }
        catch (error) {
            logger_1.logger.error('Failed to update recommendation analytics metrics:', error);
            if (mountedRef.current) {
                setState(prev => ({
                    ...prev,
                    error: error instanceof Error ? error.message : 'Unknown error',
                    isLoading: false
                }));
            }
        }
    }, []);
    // ========== ACTIONS ==========
    const startTiming = (0, react_1.useCallback)((operation) => {
        if (!enablePerformanceTracking) {
            return () => 0;
        }
        return RecommendationAnalyticsService_1.recommendationAnalytics.startTiming(operation);
    }, [enablePerformanceTracking]);
    const recordApiResponse = (0, react_1.useCallback)((duration) => {
        if (enablePerformanceTracking) {
            RecommendationAnalyticsService_1.recommendationAnalytics.recordApiResponseTime(duration);
        }
    }, [enablePerformanceTracking]);
    const recordLoadTime = (0, react_1.useCallback)((duration) => {
        if (enablePerformanceTracking) {
            RecommendationAnalyticsService_1.recommendationAnalytics.recordLoadTime(duration);
        }
    }, [enablePerformanceTracking]);
    const getCachedRecommendation = (0, react_1.useCallback)((key) => {
        if (!enableCaching) {
            return null;
        }
        return RecommendationAnalyticsService_1.recommendationAnalytics.getCachedRecommendation(key);
    }, [enableCaching]);
    const cacheRecommendation = (0, react_1.useCallback)((key, data, confidenceScore) => {
        if (enableCaching) {
            RecommendationAnalyticsService_1.recommendationAnalytics.cacheRecommendation(key, data, confidenceScore);
        }
    }, [enableCaching]);
    const calculateConfidence = (0, react_1.useCallback)((factors) => {
        return RecommendationAnalyticsService_1.recommendationAnalytics.calculateConfidenceScore(factors);
    }, []);
    const trackInteraction = (0, react_1.useCallback)((type, target, metadata) => {
        if (enableInteractionTracking) {
            RecommendationAnalyticsService_1.recommendationAnalytics.trackInteraction({
                type: type,
                target,
                metadata
            });
        }
    }, [enableInteractionTracking]);
    const getAnalyticsSnapshot = (0, react_1.useCallback)(() => {
        return RecommendationAnalyticsService_1.recommendationAnalytics.getAnalyticsSnapshot();
    }, []);
    const clearAnalytics = (0, react_1.useCallback)(() => {
        RecommendationAnalyticsService_1.recommendationAnalytics.clearAnalytics();
        updateMetrics();
    }, [updateMetrics]);
    // ========== RETURN ==========
    const actions = {
        startTiming,
        recordApiResponse,
        recordLoadTime,
        getCachedRecommendation,
        cacheRecommendation,
        calculateConfidence,
        trackInteraction,
        getAnalyticsSnapshot,
        clearAnalytics
    };
    return [state, actions];
}
exports.useRecommendationAnalytics = useRecommendationAnalytics;
// ========== UTILITY HOOKS ==========
/**
 * Hook for tracking component performance
 */
function usePerformanceTracking(componentName) {
    const [, { startTiming, recordLoadTime }] = useRecommendationAnalytics({
        enablePerformanceTracking: true,
        enableCaching: false,
        enableInteractionTracking: false
    });
    const trackRender = (0, react_1.useCallback)(() => {
        return startTiming(`${componentName}_render`);
    }, [componentName, startTiming]);
    const trackOperation = (0, react_1.useCallback)((operationName) => {
        return startTiming(`${componentName}_${operationName}`);
    }, [componentName, startTiming]);
    return {
        trackRender,
        trackOperation,
        recordLoadTime
    };
}
exports.usePerformanceTracking = usePerformanceTracking;
/**
 * Hook for caching recommendations
 */
function useRecommendationCache() {
    const [, { getCachedRecommendation, cacheRecommendation }] = useRecommendationAnalytics({
        enablePerformanceTracking: false,
        enableCaching: true,
        enableInteractionTracking: false
    });
    const getCached = (0, react_1.useCallback)((key) => {
        return getCachedRecommendation(key);
    }, [getCachedRecommendation]);
    const setCached = (0, react_1.useCallback)((key, data, confidenceScore) => {
        cacheRecommendation(key, data, confidenceScore);
    }, [cacheRecommendation]);
    return {
        getCached,
        setCached
    };
}
exports.useRecommendationCache = useRecommendationCache;
/**
 * Hook for tracking user interactions
 */
function useInteractionTracking() {
    const [, { trackInteraction }] = useRecommendationAnalytics({
        enablePerformanceTracking: false,
        enableCaching: false,
        enableInteractionTracking: true
    });
    const trackClick = (0, react_1.useCallback)((target, metadata) => {
        trackInteraction('select', target, metadata);
    }, [trackInteraction]);
    const trackView = (0, react_1.useCallback)((target, metadata) => {
        trackInteraction('view', target, metadata);
    }, [trackInteraction]);
    const trackExpand = (0, react_1.useCallback)((target, metadata) => {
        trackInteraction('expand', target, metadata);
    }, [trackInteraction]);
    const trackSearch = (0, react_1.useCallback)((query, metadata) => {
        trackInteraction('search', query, metadata);
    }, [trackInteraction]);
    const trackFilter = (0, react_1.useCallback)((filterType, metadata) => {
        trackInteraction('filter', filterType, metadata);
    }, [trackInteraction]);
    return {
        trackClick,
        trackView,
        trackExpand,
        trackSearch,
        trackFilter
    };
}
exports.useInteractionTracking = useInteractionTracking;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,