{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/unintentional-any-elimination/__tests__/AnalysisTools.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/unintentional-any-elimination/__tests__/AnalysisTools.test.ts"],"sourcesContent":["import { execSync } from 'child_process';\nimport * as fs from 'fs';\nimport { AnalysisTools } from '../AnalysisTools';\nimport { AnyTypeCategory, CodeDomain } from '../types';\n\n// Mock dependencies\njest.mock('fs');\njest.mock('child_process');\n\nconst mockFs = fs as jest.Mocked<typeof fs>;\nconst mockExecSync = execSync as jest.MockedFunction<typeof execSync>;\n\ndescribe('AnalysisTools', () => {\n  let analysisTools: AnalysisTools;\n\n  beforeEach(() => {\n    analysisTools = new AnalysisTools();\n    jest.clearAllMocks();\n\n    // Mock file system operations\n    mockFs.existsSync.mockReturnValue(false);\n    mockFs.readFileSync.mockReturnValue('');\n    mockFs.writeFileSync.mockImplementation(() => {});\n    mockFs.mkdirSync.mockImplementation(() => '');\n  });\n\n  describe('analyzeDomainDistribution', () => {\n    it('should analyze any type distribution by domain', async () => {\n      // Mock grep output for finding any types\n      mockExecSync.mockReturnValue(`\nsrc/calculations/core.ts:15:const data: any = response;\nsrc/components/RecipeCard.tsx:23:props: any\nsrc/services/campaign/test.ts:8:} catch (error: any) {\nsrc/data/ingredients/spices.ts:12:Record<string, any>\n      `.trim());\n\n      // Mock file reading for surrounding lines\n      mockFs.readFileSync.mockImplementation((filePath: string) => {\n        if (filePath.includes('core.ts')) {\n          return 'function fetchData() {\\n  const data: any = response;\\n  return data;\\n}';\n        }\n        if (filePath.includes('RecipeCard.tsx')) {\n          return 'interface Props {\\n  props: any\\n}';\n        }\n        if (filePath.includes('test.ts')) {\n          return 'try {\\n  // code\\n} catch (error: any) {\\n  console.log(error);\\n}';\n        }\n        if (filePath.includes('spices.ts')) {\n          return 'const spiceData: Record<string, any> = {};';\n        }\n        return '';\n      });\n\n      const distribution = await analysisTools.analyzeDomainDistribution();\n\n      expect(distribution.totalAnyTypes).toBeGreaterThan(0);\n      expect(distribution.byDomain).toHaveLength(8); // All domains\n      expect(distribution.byCategory).toHaveLength(10); // All categories\n      expect(distribution.intentionalVsUnintentional).toBeDefined();\n      expect(distribution.analysisDate).toBeInstanceOf(Date);\n\n      // Verify percentages add up correctly\n      const domainPercentages = distribution.byDomain.reduce((sum, item) => sum + item.percentage, 0);\n      expect(domainPercentages).toBeCloseTo(100, 1);\n    });\n\n    it('should handle empty results gracefully', async () => {\n      mockExecSync.mockReturnValue('');\n\n      const distribution = await analysisTools.analyzeDomainDistribution();\n\n      expect(distribution.totalAnyTypes).toBe(0);\n      expect(distribution.byDomain.every(item => item.count === 0)).toBe(true);\n      expect(distribution.byCategory.every(item => item.count === 0)).toBe(true);\n      expect(distribution.intentionalVsUnintentional.intentional.count).toBe(0);\n      expect(distribution.intentionalVsUnintentional.unintentional.count).toBe(0);\n    });\n\n    it('should handle grep command errors', async () => {\n      mockExecSync.mockImplementation(() => {\n        throw new Error('grep command failed');\n      });\n\n      const distribution = await analysisTools.analyzeDomainDistribution();\n\n      expect(distribution.totalAnyTypes).toBe(0);\n      expect(distribution.byDomain.every(item => item.count === 0)).toBe(true);\n    });\n  });\n\n  describe('generateClassificationAccuracyReport', () => {\n    it('should generate classification accuracy report', async () => {\n      // Mock grep output\n      mockExecSync.mockReturnValue(`\nsrc/test.ts:1:const items: any[] = [];\nsrc/test.ts:2:} catch (error: any) {\nsrc/test.ts:3:Record<string, any>\n      `.trim());\n\n      mockFs.readFileSync.mockReturnValue('const items: any[] = [];\\n} catch (error: any) {\\nRecord<string, any>');\n\n      const report = await analysisTools.generateClassificationAccuracyReport();\n\n      expect(report.overallAccuracy).toBeGreaterThanOrEqual(0);\n      expect(report.overallAccuracy).toBeLessThanOrEqual(100);\n      expect(report.averageConfidence).toBeGreaterThanOrEqual(0);\n      expect(report.averageConfidence).toBeLessThanOrEqual(1);\n      expect(report.sampleSize).toBeGreaterThanOrEqual(0);\n      expect(report.categoryAccuracy).toBeInstanceOf(Array);\n      expect(report.confidenceDistribution).toBeInstanceOf(Array);\n      expect(report.reportDate).toBeInstanceOf(Date);\n\n      // Verify confidence distribution percentages (only if there are confidence scores)\n      if (report.confidenceDistribution.length > 0) {\n        const totalPercentage = report.confidenceDistribution.reduce((sum, item) => sum + item.percentage, 0);\n        // Only check if there are actual percentages (not all zero)\n        if (totalPercentage > 0) {\n          expect(totalPercentage).toBeCloseTo(100, 1);\n        }\n      }\n    });\n\n    it('should handle array type classifications accurately', async () => {\n      mockExecSync.mockReturnValue('src/test.ts:1:const items: any[] = [];');\n      mockFs.readFileSync.mockReturnValue('const items: any[] = [];');\n\n      const report = await analysisTools.generateClassificationAccuracyReport();\n\n      const arrayTypeAccuracy = report.categoryAccuracy.find(\n        cat => cat.category === AnyTypeCategory.ARRAY_TYPE\n      );\n      expect(arrayTypeAccuracy).toBeDefined();\n    });\n\n    it('should handle error handling classifications accurately', async () => {\n      mockExecSync.mockReturnValue('src/test.ts:1:} catch (error: any) {');\n      mockFs.readFileSync.mockReturnValue('} catch (error: any) {');\n\n      const report = await analysisTools.generateClassificationAccuracyReport();\n\n      const errorHandlingAccuracy = report.categoryAccuracy.find(\n        cat => cat.category === AnyTypeCategory.ERROR_HANDLING\n      );\n      expect(errorHandlingAccuracy).toBeDefined();\n    });\n  });\n\n  describe('generateSuccessRateAnalysis', () => {\n    it('should generate success rate analysis with trending', async () => {\n      const analysis = await analysisTools.generateSuccessRateAnalysis();\n\n      expect(analysis.currentSuccessRate).toBeGreaterThanOrEqual(0);\n      expect(analysis.currentSuccessRate).toBeLessThanOrEqual(100);\n      expect(analysis.targetSuccessRate).toBe(85);\n      expect(analysis.improvementNeeded).toBeGreaterThanOrEqual(0);\n      expect(analysis.categorySuccessRates).toBeInstanceOf(Array);\n      expect(analysis.trendingData).toBeDefined();\n      expect(analysis.projectedCompletion).toBeInstanceOf(Date);\n      expect(analysis.recommendations).toBeInstanceOf(Array);\n      expect(analysis.analysisDate).toBeInstanceOf(Date);\n\n      // Verify category success rates\n      expect(analysis.categorySuccessRates.length).toBe(10); // All categories\n      analysis.categorySuccessRates.forEach(category => {\n        expect(category.successRate).toBeGreaterThanOrEqual(0);\n        expect(category.successRate).toBeLessThanOrEqual(100);\n        expect(category.sampleSize).toBeGreaterThanOrEqual(0);\n      });\n    });\n\n    it('should provide recommendations for low success rate categories', async () => {\n      const analysis = await analysisTools.generateSuccessRateAnalysis();\n\n      // Should have recommendations for categories with low success rates\n      const lowSuccessCategories = analysis.categorySuccessRates.filter(cat => cat.successRate < 70);\n      if (lowSuccessCategories.length > 0) {\n        expect(analysis.recommendations.length).toBeGreaterThan(0);\n      }\n    });\n\n    it('should calculate projected completion date', async () => {\n      const analysis = await analysisTools.generateSuccessRateAnalysis();\n\n      expect(analysis.projectedCompletion).toBeInstanceOf(Date);\n      expect(analysis.projectedCompletion.getTime()).toBeGreaterThan(Date.now());\n    });\n  });\n\n  describe('generateManualReviewRecommendations', () => {\n    it('should generate manual review recommendations', async () => {\n      // Mock grep output with various any types\n      mockExecSync.mockReturnValueOnce(`\nsrc/complex.ts:1:const config: any = getConfig();\nsrc/api.ts:2:response: any\nsrc/legacy.ts:3:oldData: any\n      `.trim());\n\n      // Mock file reading\n      mockFs.readFileSync.mockImplementation((filePath: string) => {\n        if (filePath.includes('complex.ts')) {\n          return 'const config: any = getConfig(); // Complex configuration';\n        }\n        if (filePath.includes('api.ts')) {\n          return 'interface ApiResponse { response: any }';\n        }\n        if (filePath.includes('legacy.ts')) {\n          return 'const oldData: any = legacySystem.getData();';\n        }\n        return '';\n      });\n\n      // Mock related occurrences search\n      mockExecSync.mockImplementation((command: string) => {\n        if (command.includes('grep -n')) {\n          return '1:const config: any = getConfig();\\n5:other: any = value;';\n        }\n        return '';\n      });\n\n      const recommendations = await analysisTools.generateManualReviewRecommendations();\n\n      expect(recommendations).toBeInstanceOf(Array);\n\n      recommendations.forEach(recommendation => {\n        expect(recommendation.filePath).toBeDefined();\n        expect(recommendation.lineNumber).toBeGreaterThan(0);\n        expect(recommendation.codeSnippet).toBeDefined();\n        expect(recommendation.classification).toBeDefined();\n        expect(recommendation.reviewReason).toBeDefined();\n        expect(['high', 'medium', 'low']).toContain(recommendation.priority);\n        expect(recommendation.suggestedActions).toBeInstanceOf(Array);\n        expect(['low', 'medium', 'high']).toContain(recommendation.estimatedEffort);\n        expect(recommendation.relatedOccurrences).toBeInstanceOf(Array);\n      });\n    });\n\n    it('should prioritize recommendations correctly', async () => {\n      mockExecSync.mockReturnValueOnce('src/test.ts:1:const data: any = value;');\n      mockFs.readFileSync.mockReturnValue('const data: any = value;');\n      mockExecSync.mockImplementation(() => '');\n\n      const recommendations = await analysisTools.generateManualReviewRecommendations();\n\n      // Verify recommendations are sorted by priority (high to low)\n      for (let i = 0; i < recommendations.length - 1; i++) {\n        const currentPriority = recommendations[i].priority;\n        const nextPriority = recommendations[i + 1].priority;\n\n        const priorityOrder = { high: 3, medium: 2, low: 1 };\n        expect(priorityOrder[currentPriority]).toBeGreaterThanOrEqual(priorityOrder[nextPriority]);\n      }\n    });\n\n    it('should find related occurrences in the same file', async () => {\n      mockExecSync.mockReturnValueOnce('src/test.ts:1:const data: any = value;');\n      mockFs.readFileSync.mockReturnValue('const data: any = value;');\n\n      // Mock related occurrences\n      mockExecSync.mockImplementation((command: string) => {\n        if (command.includes('grep -n')) {\n          return '1:const data: any = value;\\n3:other: any = something;\\n7:more: any[];';\n        }\n        return '';\n      });\n\n      const recommendations = await analysisTools.generateManualReviewRecommendations();\n\n      if (recommendations.length > 0) {\n        const firstRecommendation = recommendations[0];\n        expect(firstRecommendation.relatedOccurrences.length).toBeGreaterThan(0);\n        expect(firstRecommendation.relatedOccurrences.length).toBeLessThanOrEqual(5); // Limited to 5\n      }\n    });\n  });\n\n  describe('generateComprehensiveReport', () => {\n    it('should generate comprehensive analysis report', async () => {\n      // Mock all the required data\n      mockExecSync.mockReturnValue('src/test.ts:1:const data: any = value;');\n      mockFs.readFileSync.mockReturnValue('const data: any = value;');\n\n      const report = await analysisTools.generateComprehensiveReport();\n\n      expect(report.id).toBeDefined();\n      expect(report.timestamp).toBeInstanceOf(Date);\n      expect(report.domainDistribution).toBeDefined();\n      expect(report.accuracyReport).toBeDefined();\n      expect(report.successRateAnalysis).toBeDefined();\n      expect(report.manualReviewRecommendations).toBeInstanceOf(Array);\n      expect(report.summary).toBeDefined();\n\n      // Verify summary data\n      expect(report.summary.totalAnyTypes).toBeGreaterThanOrEqual(0);\n      expect(report.summary.unintentionalCount).toBeGreaterThanOrEqual(0);\n      expect(report.summary.classificationAccuracy).toBeGreaterThanOrEqual(0);\n      expect(report.summary.currentSuccessRate).toBeGreaterThanOrEqual(0);\n      expect(report.summary.manualReviewCases).toBeGreaterThanOrEqual(0);\n      expect(Object.values(CodeDomain)).toContain(report.summary.topDomain);\n      expect(Object.values(AnyTypeCategory)).toContain(report.summary.topCategory);\n    });\n\n    it('should save report to history', async () => {\n      mockExecSync.mockReturnValue('');\n      mockFs.readFileSync.mockReturnValue('');\n\n      await analysisTools.generateComprehensiveReport();\n\n      // Verify that writeFileSync was called to save the history\n      expect(mockFs.writeFileSync).toHaveBeenCalled();\n    });\n\n    it('should handle file system errors gracefully', async () => {\n      mockExecSync.mockReturnValue('');\n      mockFs.readFileSync.mockReturnValue('');\n      mockFs.writeFileSync.mockImplementation(() => {\n        throw new Error('File system error');\n      });\n\n      // Should not throw error even if saving fails\n      const report = await analysisTools.generateComprehensiveReport();\n      expect(report).toBeDefined();\n    });\n  });\n\n  describe('error handling', () => {\n    it('should handle grep command failures gracefully', async () => {\n      mockExecSync.mockImplementation(() => {\n        throw new Error('Command failed');\n      });\n\n      const distribution = await analysisTools.analyzeDomainDistribution();\n      expect(distribution.totalAnyTypes).toBe(0);\n    });\n\n    it('should handle file reading failures gracefully', async () => {\n      mockExecSync.mockReturnValue('src/test.ts:1:const data: any = value;');\n      mockFs.readFileSync.mockImplementation(() => {\n        throw new Error('File not found');\n      });\n\n      const distribution = await analysisTools.analyzeDomainDistribution();\n      expect(distribution).toBeDefined();\n    });\n\n    it('should handle malformed grep output', async () => {\n      mockExecSync.mockReturnValue('invalid output format');\n      mockFs.readFileSync.mockReturnValue('');\n\n      const distribution = await analysisTools.analyzeDomainDistribution();\n      expect(distribution.totalAnyTypes).toBe(0);\n    });\n  });\n\n  describe('data validation', () => {\n    it('should validate percentage calculations', async () => {\n      mockExecSync.mockReturnValue(`\nsrc/test1.ts:1:any\nsrc/test2.ts:1:any\nsrc/test3.ts:1:any\n      `.trim());\n      mockFs.readFileSync.mockReturnValue('const data: any = value;');\n\n      const distribution = await analysisTools.analyzeDomainDistribution();\n\n      // All percentages should add up to 100%\n      const domainTotal = distribution.byDomain.reduce((sum, item) => sum + item.percentage, 0);\n      const categoryTotal = distribution.byCategory.reduce((sum, item) => sum + item.percentage, 0);\n      const intentionalTotal = distribution.intentionalVsUnintentional.intentional.percentage +\n                              distribution.intentionalVsUnintentional.unintentional.percentage;\n\n      expect(domainTotal).toBeCloseTo(100, 1);\n      expect(categoryTotal).toBeCloseTo(100, 1);\n      expect(intentionalTotal).toBeCloseTo(100, 1);\n    });\n\n    it('should validate confidence scores are within valid range', async () => {\n      mockExecSync.mockReturnValue('src/test.ts:1:const data: any = value;');\n      mockFs.readFileSync.mockReturnValue('const data: any = value;');\n\n      const report = await analysisTools.generateClassificationAccuracyReport();\n\n      expect(report.averageConfidence).toBeGreaterThanOrEqual(0);\n      expect(report.averageConfidence).toBeLessThanOrEqual(1);\n\n      report.confidenceDistribution.forEach(dist => {\n        expect(dist.percentage).toBeGreaterThanOrEqual(0);\n        expect(dist.percentage).toBeLessThanOrEqual(100);\n      });\n    });\n\n    it('should validate success rates are within valid range', async () => {\n      const analysis = await analysisTools.generateSuccessRateAnalysis();\n\n      expect(analysis.currentSuccessRate).toBeGreaterThanOrEqual(0);\n      expect(analysis.currentSuccessRate).toBeLessThanOrEqual(100);\n\n      analysis.categorySuccessRates.forEach(category => {\n        expect(category.successRate).toBeGreaterThanOrEqual(0);\n        expect(category.successRate).toBeLessThanOrEqual(100);\n      });\n    });\n  });\n});\n"],"version":3}