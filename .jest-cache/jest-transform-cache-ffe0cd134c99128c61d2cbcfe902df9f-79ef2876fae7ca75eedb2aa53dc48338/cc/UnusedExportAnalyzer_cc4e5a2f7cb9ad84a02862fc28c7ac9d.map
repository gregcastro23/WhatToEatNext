{"file":"/Users/GregCastro/Desktop/WhatToEatNext/backups/first-wave-2025-08-11T05-19-26-813Z/src/services/campaign/UnusedExportAnalyzer.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/backups/first-wave-2025-08-11T05-19-26-813Z/src/services/campaign/UnusedExportAnalyzer.ts"],"sourcesContent":["/**\n * Unused Export Analyzer\n * Perfect Codebase Campaign - Phase 3 Implementation\n *\n * Analyzes unused exports across the codebase and provides prioritization\n * for transformation into enterprise intelligence systems.\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport { glob } from 'glob';\n\nexport interface UnusedExport {\n  filePath: string;\n  exportName: string;\n  exportType: 'function' | 'class' | 'interface' | 'type' | 'const' | 'variable';\n  lineNumber: number;\n  isDefault: boolean;\n  complexity: number;\n  usageCount: number;\n}\n\nexport interface FileAnalysis {\n  filePath: string;\n  priority: FilePriority;\n  unusedExports: UnusedExport[];\n  safetyScore: number;\n  transformationCandidates: TransformationCandidate[];\n  category: FileCategory;\n}\n\nexport interface TransformationCandidate {\n  export: UnusedExport;\n  intelligenceSystemName: string;\n  transformationComplexity: TransformationComplexity;\n  safetyScore: number;\n  estimatedBenefit: number;\n}\n\nexport interface AnalysisResult {\n  totalFiles: number;\n  totalUnusedExports: number;\n  highPriorityFiles: FileAnalysis[];\n  mediumPriorityFiles: FileAnalysis[];\n  lowPriorityFiles: FileAnalysis[];\n  summary: AnalysisSummary;\n}\n\nexport interface AnalysisSummary {\n  recipeFiles: number;\n  coreFiles: number;\n  externalFiles: number;\n  totalTransformationCandidates: number;\n  averageSafetyScore: number;\n  estimatedIntelligenceSystems: number;\n}\n\nexport enum FilePriority {\n  HIGH = 'HIGH', // Recipe building files\n  MEDIUM = 'MEDIUM', // Core system files\n  LOW = 'LOW', // External/test files\n}\n\nexport enum FileCategory {\n  RECIPE = 'RECIPE',\n  CORE = 'CORE',\n  EXTERNAL = 'EXTERNAL',\n  TEST = 'TEST',\n  UTILITY = 'UTILITY',\n}\n\nexport enum TransformationComplexity {\n  SIMPLE = 'SIMPLE',\n  MODERATE = 'MODERATE',\n  COMPLEX = 'COMPLEX',\n  VERY_COMPLEX = 'VERY_COMPLEX',\n}\n\nexport class UnusedExportAnalyzer {\n  private readonly srcPath: string;\n  private readonly excludePatterns: string[];\n  private readonly priorityPatterns: Record<FilePriority, string[]>;\n\n  constructor(srcPath: string = 'src') {\n    this.srcPath = srcPath;\n    this.excludePatterns = [\n      '**/node_modules/**',\n      '**/*.test.ts',\n      '**/*.test.tsx',\n      '**/*.spec.ts',\n      '**/*.spec.tsx',\n      '**/dist/**',\n      '**/build/**',\n      '**/*.d.ts',\n    ];\n\n    this.priorityPatterns = {\n      [FilePriority.HIGH]: [\n        '**/data/recipes/**',\n        '**/components/recipe/**',\n        '**/services/recipe/**',\n        '**/utils/recipe/**',\n        '**/hooks/recipe/**',\n      ],\n      [FilePriority.MEDIUM]: [\n        '**/components/**',\n        '**/services/**',\n        '**/utils/**',\n        '**/hooks/**',\n        '**/contexts/**',\n        '**/providers/**',\n      ],\n      [FilePriority.LOW]: ['**/types/**', '**/constants/**', '**/config/**', '**/lib/**'],\n    };\n  }\n\n  /**\n   * Analyze unused exports across the codebase\n   */\n  async analyzeUnusedExports(): Promise<AnalysisResult> {\n    console.log('🔍 Starting unused export analysis...');\n\n    const files = await this.getAllSourceFiles();\n    const fileAnalyses: FileAnalysis[] = [];\n\n    for (const filePath of files) {\n      try {\n        const analysis = await this.analyzeFile(filePath);\n        if (analysis.unusedExports.length > 0) {\n          fileAnalyses.push(analysis);\n        }\n      } catch (error) {\n        console.warn(`⚠️  Failed to analyze ${filePath}:`, error);\n      }\n    }\n\n    return this.categorizeAndSummarize(fileAnalyses);\n  }\n\n  /**\n   * Get all source files for analysis\n   */\n  private async getAllSourceFiles(): Promise<string[]> {\n    const patterns = [\n      `${this.srcPath}/**/*.ts`,\n      `${this.srcPath}/**/*.tsx`,\n      `${this.srcPath}/**/*.js`,\n      `${this.srcPath}/**/*.jsx`,\n    ];\n\n    const files: string[] = [];\n    for (const pattern of patterns) {\n      const matches = await glob(pattern, {\n        ignore: this.excludePatterns,\n        absolute: true,\n      });\n      files.push(...matches);\n    }\n\n    return [...new Set(files)]; // Remove duplicates\n  }\n\n  /**\n   * Analyze a single file for unused exports\n   */\n  private async analyzeFile(filePath: string): Promise<FileAnalysis> {\n    const content = await fs.promises.readFile(filePath, 'utf-8');\n    const unusedExports = await this.findUnusedExports(filePath, content);\n    const priority = this.determinePriority(filePath);\n    const category = this.determineCategory(filePath);\n    const safetyScore = this.calculateSafetyScore(filePath, content, unusedExports);\n    const transformationCandidates = this.identifyTransformationCandidates(unusedExports);\n\n    return {\n      filePath,\n      priority,\n      unusedExports,\n      safetyScore,\n      transformationCandidates,\n      category,\n    };\n  }\n\n  /**\n   * Find unused exports in a file\n   */\n  private async findUnusedExports(filePath: string, content: string): Promise<UnusedExport[]> {\n    const exports = this.extractExports(content);\n    const unusedExports: UnusedExport[] = [];\n\n    for (const exportInfo of exports) {\n      const usageCount = await this.countUsages(exportInfo.exportName, filePath);\n      if (usageCount === 0) {\n        unusedExports.push({\n          ...exportInfo,\n          usageCount,\n          complexity: this.calculateComplexity(content, exportInfo),\n        });\n      }\n    }\n\n    return unusedExports;\n  }\n\n  /**\n   * Extract export information from file content\n   */\n  private extractExports(content: string): Omit<UnusedExport, 'usageCount' | 'complexity'>[] {\n    const exports: Omit<UnusedExport, 'usageCount' | 'complexity'>[] = [];\n    const lines = content.split('\\n');\n\n    lines.forEach((line, index) => {\n      // Named exports\n      const namedExportMatch = line.match(\n        /export\\s+(?:const|let|var|function|class|interface|type|enum)\\s+(\\w+)/,\n      );\n      if (namedExportMatch) {\n        exports.push({\n          filePath: '',\n          exportName: namedExportMatch[1],\n          exportType: this.determineExportType(line),\n          lineNumber: index + 1,\n          isDefault: false,\n        });\n      }\n\n      // Default exports\n      const defaultExportMatch = line.match(\n        /export\\s+default\\s+(?:(?:const|let|var|function|class)\\s+)?(\\w+)/,\n      );\n      if (defaultExportMatch) {\n        exports.push({\n          filePath: '',\n          exportName: defaultExportMatch[1] || 'default',\n          exportType: this.determineExportType(line),\n          lineNumber: index + 1,\n          isDefault: true,\n        });\n      }\n\n      // Export destructuring\n      const destructuringMatch = line.match(/export\\s*\\{\\s*([^}]+)\\s*\\}/);\n      if (destructuringMatch) {\n        const exportNames = destructuringMatch[1].split(',').map(name => name.trim());\n        exportNames.forEach(name => {\n          const cleanName = name.split(' as ')[0].trim();\n          exports.push({\n            filePath: '',\n            exportName: cleanName,\n            exportType: 'variable',\n            lineNumber: index + 1,\n            isDefault: false,\n          });\n        });\n      }\n    });\n\n    return exports;\n  }\n\n  /**\n   * Determine export type from line content\n   */\n  private determineExportType(line: string): UnusedExport['exportType'] {\n    if (line.includes('function')) return 'function';\n    if (line.includes('class')) return 'class';\n    if (line.includes('interface')) return 'interface';\n    if (line.includes('type')) return 'type';\n    if (line.includes('const')) return 'const';\n    return 'variable';\n  }\n\n  /**\n   * Count usages of an export across the codebase\n   */\n  private async countUsages(exportName: string, excludeFilePath: string): Promise<number> {\n    const files = await this.getAllSourceFiles();\n    let usageCount = 0;\n\n    for (const filePath of files) {\n      if (filePath === excludeFilePath) continue;\n\n      try {\n        const content = await fs.promises.readFile(filePath, 'utf-8');\n\n        // Check for import statements\n        const importRegex = new RegExp(`import.*\\\\b${exportName}\\\\b.*from`, 'g');\n        const importMatches = content.match(importRegex) || [];\n        usageCount += importMatches.length;\n\n        // Check for direct usage (more complex analysis would be needed for complete accuracy)\n        const usageRegex = new RegExp(`\\\\b${exportName}\\\\b`, 'g');\n        const usageMatches = content.match(usageRegex) || [];\n        // Subtract import matches to avoid double counting\n        usageCount += Math.max(0, usageMatches.length - importMatches.length);\n      } catch (error) {\n        // Skip files that can't be read\n        continue;\n      }\n    }\n\n    return usageCount;\n  }\n\n  /**\n   * Calculate complexity score for an export\n   */\n  private calculateComplexity(\n    content: string,\n    exportInfo: Omit<UnusedExport, 'usageCount' | 'complexity'>,\n  ): number {\n    const lines = content.split('\\n');\n    const startLine = exportInfo.lineNumber - 1;\n\n    // Simple heuristic: count lines of the export definition\n    let complexity = 1;\n    let braceCount = 0;\n    let inExport = false;\n\n    for (let i = startLine; i < lines.length; i++) {\n      const line = lines[i];\n\n      if (!inExport && line.includes('export')) {\n        inExport = true;\n      }\n\n      if (inExport) {\n        complexity++;\n        braceCount += (line.match(/\\{/g) || []).length;\n        braceCount -= (line.match(/\\}/g) || []).length;\n\n        if (braceCount === 0 && line.includes('}')) {\n          break;\n        }\n\n        if (line.includes(';') && braceCount === 0) {\n          break;\n        }\n      }\n    }\n\n    return Math.min(complexity, 100); // Cap at 100\n  }\n\n  /**\n   * Determine file priority based on path patterns\n   */\n  private determinePriority(filePath: string): FilePriority {\n    const relativePath = path.relative(process.cwd(), filePath);\n\n    for (const [priority, patterns] of Object.entries(this.priorityPatterns)) {\n      for (const pattern of patterns) {\n        if (this.matchesPattern(relativePath, pattern)) {\n          return priority as FilePriority;\n        }\n      }\n    }\n\n    return FilePriority.LOW;\n  }\n\n  /**\n   * Determine file category\n   */\n  private determineCategory(filePath: string): FileCategory {\n    const relativePath = path.relative(process.cwd(), filePath);\n\n    if (relativePath.includes('/recipe')) return FileCategory.RECIPE;\n    if (\n      relativePath.includes('/test') ||\n      relativePath.includes('.test.') ||\n      relativePath.includes('.spec.')\n    ) {\n      return FileCategory.TEST;\n    }\n    if (\n      relativePath.includes('/components') ||\n      relativePath.includes('/services') ||\n      relativePath.includes('/hooks')\n    ) {\n      return FileCategory.CORE;\n    }\n    if (\n      relativePath.includes('/types') ||\n      relativePath.includes('/constants') ||\n      relativePath.includes('/config')\n    ) {\n      return FileCategory.EXTERNAL;\n    }\n\n    return FileCategory.UTILITY;\n  }\n\n  /**\n   * Calculate safety score for transformation\n   */\n  private calculateSafetyScore(\n    filePath: string,\n    content: string,\n    unusedExports: UnusedExport[],\n  ): number {\n    let score = 100; // Start with perfect score\n\n    // Reduce score based on file complexity\n    const lines = content.split('\\n').length;\n    if (lines > 500) score -= 20;\n    else if (lines > 200) score -= 10;\n\n    // Reduce score based on number of unused exports\n    if (unusedExports.length > 10) score -= 20;\n    else if (unusedExports.length > 5) score -= 10;\n\n    // Reduce score for critical files\n    if (filePath.includes('/core/') || filePath.includes('/critical/')) {\n      score -= 15;\n    }\n\n    // Increase score for test files (safer to transform)\n    if (filePath.includes('/test/') || filePath.includes('.test.')) {\n      score += 10;\n    }\n\n    return Math.max(0, Math.min(100, score));\n  }\n\n  /**\n   * Identify transformation candidates\n   */\n  private identifyTransformationCandidates(\n    unusedExports: UnusedExport[],\n  ): TransformationCandidate[] {\n    return unusedExports.map(exportInfo => {\n      const intelligenceSystemName = this.generateIntelligenceSystemName(exportInfo);\n      const transformationComplexity = this.assessTransformationComplexity(exportInfo);\n      const safetyScore = this.calculateTransformationSafetyScore(exportInfo);\n      const estimatedBenefit = this.calculateEstimatedBenefit(exportInfo);\n\n      return {\n        export: exportInfo,\n        intelligenceSystemName,\n        transformationComplexity,\n        safetyScore,\n        estimatedBenefit,\n      };\n    });\n  }\n\n  /**\n   * Generate intelligence system name\n   */\n  private generateIntelligenceSystemName(exportInfo: UnusedExport): string {\n    const baseName = exportInfo.exportName.replace(/([A-Z])/g, '_$1').toUpperCase();\n    return `${baseName}_INTELLIGENCE_SYSTEM`;\n  }\n\n  /**\n   * Assess transformation complexity\n   */\n  private assessTransformationComplexity(exportInfo: UnusedExport): TransformationComplexity {\n    if (exportInfo.complexity < 5) return TransformationComplexity.SIMPLE;\n    if (exportInfo.complexity < 15) return TransformationComplexity.MODERATE;\n    if (exportInfo.complexity < 30) return TransformationComplexity.COMPLEX;\n    return TransformationComplexity.VERY_COMPLEX;\n  }\n\n  /**\n   * Calculate transformation safety score\n   */\n  private calculateTransformationSafetyScore(exportInfo: UnusedExport): number {\n    let score = 90; // Start high for unused exports\n\n    // Reduce for complex exports\n    if (exportInfo.complexity > 20) score -= 20;\n    else if (exportInfo.complexity > 10) score -= 10;\n\n    // Increase for simple types\n    if (exportInfo.exportType === 'interface' || exportInfo.exportType === 'type') {\n      score += 10;\n    }\n\n    return Math.max(0, Math.min(100, score));\n  }\n\n  /**\n   * Calculate estimated benefit of transformation\n   */\n  private calculateEstimatedBenefit(exportInfo: UnusedExport): number {\n    let benefit = 50; // Base benefit\n\n    // Higher benefit for functions and classes (more transformable)\n    if (exportInfo.exportType === 'function' || exportInfo.exportType === 'class') {\n      benefit += 30;\n    }\n\n    // Higher benefit for complex exports (more intelligence potential)\n    benefit += Math.min(20, exportInfo.complexity);\n\n    return Math.min(100, benefit);\n  }\n\n  /**\n   * Categorize and summarize analysis results\n   */\n  private categorizeAndSummarize(fileAnalyses: FileAnalysis[]): AnalysisResult {\n    const highPriorityFiles = fileAnalyses.filter(f => f.priority === FilePriority.HIGH);\n    const mediumPriorityFiles = fileAnalyses.filter(f => f.priority === FilePriority.MEDIUM);\n    const lowPriorityFiles = fileAnalyses.filter(f => f.priority === FilePriority.LOW);\n\n    const totalUnusedExports = fileAnalyses.reduce((sum, f) => sum + f.unusedExports.length, 0);\n    const totalTransformationCandidates = fileAnalyses.reduce(\n      (sum, f) => sum + f.transformationCandidates.length,\n      0,\n    );\n\n    const recipeFiles = fileAnalyses.filter(f => f.category === FileCategory.RECIPE).length;\n    const coreFiles = fileAnalyses.filter(f => f.category === FileCategory.CORE).length;\n    const externalFiles = fileAnalyses.filter(f => f.category === FileCategory.EXTERNAL).length;\n\n    const averageSafetyScore =\n      fileAnalyses.reduce((sum, f) => sum + f.safetyScore, 0) / fileAnalyses.length;\n\n    return {\n      totalFiles: fileAnalyses.length,\n      totalUnusedExports,\n      highPriorityFiles,\n      mediumPriorityFiles,\n      lowPriorityFiles,\n      summary: {\n        recipeFiles,\n        coreFiles,\n        externalFiles,\n        totalTransformationCandidates,\n        averageSafetyScore,\n        estimatedIntelligenceSystems: totalTransformationCandidates,\n      },\n    };\n  }\n\n  /**\n   * Check if path matches pattern\n   */\n  private matchesPattern(filePath: string, pattern: string): boolean {\n    const regex = new RegExp(pattern.replace(/\\*\\*/g, '.*').replace(/\\*/g, '[^/]*'));\n    return regex.test(filePath);\n  }\n\n  /**\n   * Generate detailed report\n   */\n  generateReport(analysis: AnalysisResult): string {\n    const report = [\n      '# Unused Export Analysis Report',\n      '',\n      '## Summary',\n      `- Total files analyzed: ${analysis.totalFiles}`,\n      `- Total unused exports: ${analysis.totalUnusedExports}`,\n      `- Recipe files: ${analysis.summary.recipeFiles}`,\n      `- Core files: ${analysis.summary.coreFiles}`,\n      `- External files: ${analysis.summary.externalFiles}`,\n      `- Transformation candidates: ${analysis.summary.totalTransformationCandidates}`,\n      `- Average safety score: ${analysis.summary.averageSafetyScore.toFixed(1)}`,\n      '',\n      '## Priority Breakdown',\n      `- High priority files: ${analysis.highPriorityFiles.length}`,\n      `- Medium priority files: ${analysis.mediumPriorityFiles.length}`,\n      `- Low priority files: ${analysis.lowPriorityFiles.length}`,\n      '',\n      '## Top Transformation Candidates',\n      '',\n    ];\n\n    // Add top candidates from each priority level\n    const topCandidates = [\n      ...analysis.highPriorityFiles.slice(0, 5),\n      ...analysis.mediumPriorityFiles.slice(0, 5),\n      ...analysis.lowPriorityFiles.slice(0, 5),\n    ];\n\n    topCandidates.forEach(file => {\n      report.push(`### ${file.filePath}`);\n      report.push(`- Priority: ${file.priority}`);\n      report.push(`- Safety Score: ${file.safetyScore}`);\n      report.push(`- Unused Exports: ${file.unusedExports.length}`);\n      report.push(`- Transformation Candidates: ${file.transformationCandidates.length}`);\n      report.push('');\n    });\n\n    return report.join('\\n');\n  }\n}\n"],"version":3}