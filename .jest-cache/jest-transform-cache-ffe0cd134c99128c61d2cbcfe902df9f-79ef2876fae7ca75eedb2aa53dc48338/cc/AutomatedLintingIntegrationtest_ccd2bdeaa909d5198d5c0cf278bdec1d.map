{"file":"/Users/GregCastro/Desktop/WhatToEatNext/backups/first-wave-2025-08-11T05-19-26-813Z/src/services/linting/__tests__/AutomatedLintingIntegration.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/backups/first-wave-2025-08-11T05-19-26-813Z/src/services/linting/__tests__/AutomatedLintingIntegration.test.ts"],"sourcesContent":["/**\n * AutomatedLintingIntegration Tests\n *\n * Comprehensive test suite for the automated linting integration service\n */\n\nimport { AutomatedLintingFixer } from '../AutomatedLintingFixer';\nimport { AutomatedLintingIntegration, AutomatedLintingWorkflowOptions } from '../AutomatedLintingIntegration';\nimport { LintingAnalysisService } from '../LintingAnalysisService';\n\n// Mock the dependencies\njest.mock('../LintingAnalysisService');\njest.mock('../AutomatedLintingFixer');\n\nconst MockLintingAnalysisService = LintingAnalysisService as jest.MockedClass<typeof LintingAnalysisService>;\nconst MockAutomatedLintingFixer = AutomatedLintingFixer as jest.MockedClass<typeof AutomatedLintingFixer>;\n\ndescribe('AutomatedLintingIntegration', () => {\n  let integration: AutomatedLintingIntegration;\n  let mockAnalysisService: jest.Mocked<LintingAnalysisService>;\n  let mockFixer: jest.Mocked<AutomatedLintingFixer>;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Setup mock analysis service\n    mockAnalysisService = {\n      performComprehensiveAnalysis: jest.fn(),\n      performQuickAnalysis: jest.fn(),\n    } as unknown as jest.Mocked<LintingAnalysisService>;\n\n    // Setup mock fixer\n    mockFixer = {\n      applyAutomatedFixes: jest.fn(),\n      handleUnusedVariables: jest.fn(),\n      optimizeImports: jest.fn(),\n      improveTypeAnnotations: jest.fn(),\n      validateFixes: jest.fn(),\n      performRollback: jest.fn(),\n    } as unknown as jest.Mocked<AutomatedLintingFixer>;\n\n    MockLintingAnalysisService.mockImplementation(() => mockAnalysisService);\n    MockAutomatedLintingFixer.mockImplementation(() => mockFixer);\n\n    integration = new AutomatedLintingIntegration('/test/workspace');\n  });\n\n  describe('executeAutomatedWorkflow', () => {\n    it('should execute complete workflow successfully', async () => {\n      // Mock comprehensive analysis\n      const mockAnalysis = {\n        summary: {\n          totalIssues: 10,\n          errorCount: 2,\n          warningCount: 8,\n          autoFixableCount: 6,\n          domainSpecificCount: 1,\n          criticalIssuesCount: 0,\n          estimatedResolutionTime: 30,\n          overallRiskLevel: 'medium' as const,\n        },\n        categorizedErrors: {\n          total: 10,\n          errors: 2,\n          warnings: 8,\n          byCategory: {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            // Intentionally any: Test mock rule structures need flexible typing\n            typescript: [{ rule: '@typescript-eslint/no-unused-vars' } as unknown as Array<Record<string, unknown>>],\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            // Intentionally any: Test mock rule structures need flexible typing\n            import: [{ rule: 'import/order' } as unknown as Array<Record<string, unknown>>],\n          },\n          byPriority: { 1: [], 2: [], 3: [], 4: [] },\n          byFile: {},\n          autoFixable: [\n            { rule: '@typescript-eslint/no-unused-vars', autoFixable: true },\n            { rule: 'import/order', autoFixable: true },\n          ],\n          requiresManualReview: [],\n        },\n        fileAnalyses: [],\n        resolutionStrategies: [],\n        optimizedPlan: {\n          totalStrategies: 0,\n          totalEstimatedTime: 0,\n          totalSteps: 0,\n          executionOrder: [],\n          parallelizableWork: 0,\n          riskDistribution: {},\n          recommendations: [],\n        },\n        recommendations: [],\n        metrics: {\n          analysisTime: 1000,\n          filesAnalyzed: 5,\n          rulesTriggered: ['@typescript-eslint/no-unused-vars', 'import/order'],\n          domainDistribution: {},\n          severityDistribution: {},\n          complexityDistribution: {},\n          confidenceScores: { average: 0.8, median: 0.8, distribution: {} },\n        },\n      };\n\n      mockAnalysisService.performComprehensiveAnalysis.mockResolvedValue(\n        mockAnalysis as unknown as Awaited<ReturnType<typeof mockAnalysisService.performComprehensiveAnalysis>>,\n      );\n\n      // Mock automated fixes\n      const mockFixResult = {\n        success: true,\n        fixedIssues: 6,\n        failedIssues: 0,\n        processedFiles: ['file1.ts', 'file2.ts'],\n        errors: [],\n        validationResults: [{ type: 'build' as const, success: true, message: 'Build passed' }],\n        metrics: {\n          startTime: new Date(),\n          endTime: new Date(),\n          totalTime: 5000,\n          filesProcessed: 2,\n          issuesAttempted: 6,\n          issuesFixed: 6,\n          issuesFailed: 0,\n          validationTime: 1000,\n          rollbacksPerformed: 0,\n        },\n      };\n\n      mockFixer.applyAutomatedFixes.mockResolvedValue(mockFixResult);\n      mockFixer.handleUnusedVariables.mockResolvedValue({\n        ...mockFixResult,\n        fixedIssues: 2,\n      });\n      mockFixer.optimizeImports.mockResolvedValue({\n        ...mockFixResult,\n        fixedIssues: 1,\n      });\n\n      const options: AutomatedLintingWorkflowOptions = {\n        automationLevel: 'moderate',\n        dryRun: false,\n      };\n\n      const result = await integration.executeAutomatedWorkflow(options);\n\n      expect(result.summary.overallSuccess).toBe(true);\n      expect(result.summary.totalIssuesFixed).toBe(9); // 6 + 2 + 1\n      expect(result.fixResults.automated.success).toBe(true);\n      expect(result.fixResults.unusedVariables?.fixedIssues).toBe(2);\n      expect(result.fixResults.imports?.fixedIssues).toBe(1);\n      expect(result.recommendations).toBeDefined();\n      expect(result.metrics).toBeDefined();\n    });\n\n    it('should handle conservative automation level', async () => {\n      const mockAnalysis = {\n        summary: {\n          totalIssues: 5,\n          errorCount: 1,\n          warningCount: 4,\n          autoFixableCount: 3,\n          domainSpecificCount: 0,\n          criticalIssuesCount: 2, // High critical count\n          estimatedResolutionTime: 15,\n          overallRiskLevel: 'high' as const,\n        },\n        categorizedErrors: {\n          total: 5,\n          errors: 1,\n          warnings: 4,\n          byCategory: { typescript: [] as any[], import: [] as any[] },\n          byPriority: { 1: [], 2: [], 3: [], 4: [] },\n          byFile: {},\n          autoFixable: [],\n          requiresManualReview: [],\n        },\n        fileAnalyses: [],\n        resolutionStrategies: [],\n        optimizedPlan: {\n          totalStrategies: 0,\n          totalEstimatedTime: 0,\n          totalSteps: 0,\n          executionOrder: [],\n          parallelizableWork: 0,\n          riskDistribution: {},\n          recommendations: [],\n        },\n        recommendations: [],\n        metrics: {\n          analysisTime: 500,\n          filesAnalyzed: 2,\n          rulesTriggered: [],\n          domainDistribution: {},\n          severityDistribution: {},\n          complexityDistribution: {},\n          confidenceScores: { average: 0.5, median: 0.5, distribution: {} },\n        },\n      };\n\n      mockAnalysisService.performComprehensiveAnalysis.mockResolvedValue(\n        mockAnalysis as unknown as Awaited<ReturnType<typeof mockAnalysisService.performComprehensiveAnalysis>>,\n      );\n      mockFixer.applyAutomatedFixes.mockResolvedValue({\n        success: true,\n        fixedIssues: 1,\n        failedIssues: 0,\n        processedFiles: [],\n        errors: [],\n        validationResults: [],\n        metrics: {\n          startTime: new Date(),\n          endTime: new Date(),\n          totalTime: 1000,\n          filesProcessed: 0,\n          issuesAttempted: 1,\n          issuesFixed: 1,\n          issuesFailed: 0,\n          validationTime: 500,\n          rollbacksPerformed: 0,\n        },\n      });\n\n      const result = await integration.executeAutomatedWorkflow({\n        automationLevel: 'conservative',\n      });\n\n      expect(result.summary.overallSuccess).toBe(true);\n      expect(mockFixer.applyAutomatedFixes).toHaveBeenCalledWith(\n        expect.anything(),\n        expect.objectContaining({\n          batchSize: 10,\n          validateAfterEachBatch: true,\n        }),\n      );\n    });\n\n    it('should handle aggressive automation level', async () => {\n      const mockAnalysis = {\n        summary: {\n          totalIssues: 20,\n          errorCount: 0,\n          warningCount: 20,\n          autoFixableCount: 15,\n          domainSpecificCount: 0,\n          criticalIssuesCount: 0,\n          estimatedResolutionTime: 10,\n          overallRiskLevel: 'low' as const,\n        },\n        categorizedErrors: {\n          total: 20,\n          errors: 0,\n          warnings: 20,\n          byCategory: { typescript: [] as any[], import: [] as any[] },\n          byPriority: { 1: [], 2: [], 3: [], 4: [] },\n          byFile: {},\n          autoFixable: [],\n          requiresManualReview: [],\n        },\n        fileAnalyses: [],\n        resolutionStrategies: [],\n        optimizedPlan: {\n          totalStrategies: 0,\n          totalEstimatedTime: 0,\n          totalSteps: 0,\n          executionOrder: [],\n          parallelizableWork: 0,\n          riskDistribution: {},\n          recommendations: [],\n        },\n        recommendations: [],\n        metrics: {\n          analysisTime: 800,\n          filesAnalyzed: 10,\n          rulesTriggered: [],\n          domainDistribution: {},\n          severityDistribution: {},\n          complexityDistribution: {},\n          confidenceScores: { average: 0.9, median: 0.9, distribution: {} },\n        },\n      };\n\n      mockAnalysisService.performComprehensiveAnalysis.mockResolvedValue(\n        mockAnalysis as unknown as Awaited<ReturnType<typeof mockAnalysisService.performComprehensiveAnalysis>>,\n      );\n      mockFixer.applyAutomatedFixes.mockResolvedValue({\n        success: true,\n        fixedIssues: 15,\n        failedIssues: 0,\n        processedFiles: [],\n        errors: [],\n        validationResults: [],\n        metrics: {\n          startTime: new Date(),\n          endTime: new Date(),\n          totalTime: 3000,\n          filesProcessed: 0,\n          issuesAttempted: 15,\n          issuesFixed: 15,\n          issuesFailed: 0,\n          validationTime: 1000,\n          rollbacksPerformed: 0,\n        },\n      });\n\n      const result = await integration.executeAutomatedWorkflow({\n        automationLevel: 'aggressive',\n      });\n\n      expect(result.summary.overallSuccess).toBe(true);\n      expect(result.summary.automationSuccessRate).toBe(1.0);\n    });\n\n    it('should handle workflow failures gracefully', async () => {\n      mockAnalysisService.performComprehensiveAnalysis.mockRejectedValue(new Error('Analysis failed'));\n\n      await expect(integration.executeAutomatedWorkflow()).rejects.toThrow('Analysis failed');\n    });\n\n    it('should generate appropriate recommendations based on results', async () => {\n      const mockAnalysis = {\n        summary: {\n          totalIssues: 150, // Large number to trigger continuous linting recommendation\n          errorCount: 10,\n          warningCount: 140,\n          autoFixableCount: 100,\n          domainSpecificCount: 20, // Trigger domain-specific recommendation\n          criticalIssuesCount: 0,\n          estimatedResolutionTime: 60,\n          overallRiskLevel: 'medium' as const,\n        },\n        categorizedErrors: {\n          total: 150,\n          errors: 10,\n          warnings: 140,\n          byCategory: { typescript: [], import: [] },\n          byPriority: { 1: [], 2: [], 3: [], 4: [] },\n          byFile: {},\n          autoFixable: [],\n          requiresManualReview: [],\n        },\n        fileAnalyses: [],\n        resolutionStrategies: [],\n        optimizedPlan: {\n          totalStrategies: 0,\n          totalEstimatedTime: 0,\n          totalSteps: 0,\n          executionOrder: [],\n          parallelizableWork: 0,\n          riskDistribution: {},\n          recommendations: [],\n        },\n        recommendations: [],\n        metrics: {\n          analysisTime: 2000,\n          filesAnalyzed: 50,\n          rulesTriggered: [],\n          domainDistribution: {},\n          severityDistribution: {},\n          complexityDistribution: {},\n          confidenceScores: { average: 0.7, median: 0.7, distribution: {} },\n        },\n      };\n\n      mockAnalysisService.performComprehensiveAnalysis.mockResolvedValue(\n        mockAnalysis as unknown as Awaited<ReturnType<typeof mockAnalysisService.performComprehensiveAnalysis>>,\n      );\n      mockFixer.applyAutomatedFixes.mockResolvedValue({\n        success: true,\n        fixedIssues: 120,\n        failedIssues: 0,\n        processedFiles: [],\n        errors: [],\n        validationResults: [],\n        metrics: {\n          startTime: new Date(),\n          endTime: new Date(),\n          totalTime: 10000,\n          filesProcessed: 0,\n          issuesAttempted: 120,\n          issuesFixed: 120,\n          issuesFailed: 0,\n          validationTime: 2000,\n          rollbacksPerformed: 0,\n        },\n      });\n\n      const result = await integration.executeAutomatedWorkflow();\n\n      expect(result.recommendations).toContainEqual(\n        expect.objectContaining({\n          title: 'Domain-Specific Rule Configuration',\n          type: 'short-term',\n        }),\n      );\n\n      expect(result.recommendations).toContainEqual(\n        expect.objectContaining({\n          title: 'Implement Continuous Linting',\n          type: 'long-term',\n        }),\n      );\n    });\n  });\n\n  describe('executeQuickFixes', () => {\n    it('should execute quick fixes successfully', async () => {\n      const mockQuickAnalysis = {\n        summary: {\n          totalIssues: 5,\n          errorCount: 0,\n          warningCount: 5,\n          autoFixableCount: 5,\n          domainSpecificCount: 0,\n          criticalIssuesCount: 0,\n          estimatedResolutionTime: 5,\n          overallRiskLevel: 'low' as const,\n        },\n        topIssues: [],\n        quickWins: [\n          { rule: 'import/order', autoFixable: true, severity: 'warning' as const },\n          { rule: 'semi', autoFixable: true, severity: 'warning' as const },\n        ],\n        criticalIssues: [],\n      };\n\n      mockAnalysisService.performQuickAnalysis.mockResolvedValue(\n        mockQuickAnalysis as unknown as Awaited<ReturnType<typeof mockAnalysisService.performQuickAnalysis>>,\n      );\n      mockFixer.applyAutomatedFixes.mockResolvedValue({\n        success: true,\n        fixedIssues: 2,\n        failedIssues: 0,\n        processedFiles: ['file1.ts'],\n        errors: [],\n        validationResults: [],\n        metrics: {\n          startTime: new Date(),\n          endTime: new Date(),\n          totalTime: 1000,\n          filesProcessed: 1,\n          issuesAttempted: 2,\n          issuesFixed: 2,\n          issuesFailed: 0,\n          validationTime: 500,\n          rollbacksPerformed: 0,\n        },\n      });\n\n      const result = await integration.executeQuickFixes();\n\n      expect(result.success).toBe(true);\n      expect(result.fixedIssues).toBe(2);\n      expect(mockFixer.applyAutomatedFixes).toHaveBeenCalledWith(\n        expect.objectContaining({\n          autoFixable: expect.arrayContaining([expect.objectContaining({ rule: 'import/order' })]),\n        }),\n        expect.objectContaining({\n          batchSize: 5,\n          validateAfterEachBatch: true,\n        }),\n      );\n    });\n\n    it('should handle dry run mode', async () => {\n      const mockQuickAnalysis = {\n        summary: {\n          totalIssues: 3,\n          errorCount: 0,\n          warningCount: 3,\n          autoFixableCount: 3,\n          domainSpecificCount: 0,\n          criticalIssuesCount: 0,\n          estimatedResolutionTime: 3,\n          overallRiskLevel: 'low' as const,\n        },\n        topIssues: [],\n        quickWins: [{ rule: 'quotes', autoFixable: true, severity: 'warning' as const }],\n        criticalIssues: [],\n      };\n\n      mockAnalysisService.performQuickAnalysis.mockResolvedValue(\n        mockQuickAnalysis as unknown as Awaited<ReturnType<typeof mockAnalysisService.performQuickAnalysis>>,\n      );\n      mockFixer.applyAutomatedFixes.mockResolvedValue({\n        success: true,\n        fixedIssues: 1,\n        failedIssues: 0,\n        processedFiles: [],\n        errors: [],\n        validationResults: [],\n        metrics: {\n          startTime: new Date(),\n          endTime: new Date(),\n          totalTime: 500,\n          filesProcessed: 0,\n          issuesAttempted: 1,\n          issuesFixed: 1,\n          issuesFailed: 0,\n          validationTime: 0,\n          rollbacksPerformed: 0,\n        },\n      });\n\n      const result = await integration.executeQuickFixes({ dryRun: true });\n\n      expect(result.success).toBe(true);\n      expect(mockFixer.applyAutomatedFixes).toHaveBeenCalledWith(\n        expect.anything(),\n        expect.objectContaining({ dryRun: true }),\n      );\n    });\n  });\n\n  describe('executeUnusedVariableCleanup', () => {\n    it('should execute unused variable cleanup successfully', async () => {\n      const mockAnalysis = {\n        summary: {\n          totalIssues: 5,\n          errorCount: 0,\n          warningCount: 5,\n          autoFixableCount: 3,\n          domainSpecificCount: 0,\n          criticalIssuesCount: 0,\n          estimatedResolutionTime: 10,\n          overallRiskLevel: 'low' as const,\n        },\n        categorizedErrors: {\n          total: 5,\n          errors: 0,\n          warnings: 5,\n          byCategory: {\n            typescript: [\n              { rule: '@typescript-eslint/no-unused-vars', message: \"'unusedVar' is defined but never used\" },\n              { rule: '@typescript-eslint/no-unused-vars', message: \"'anotherVar' is defined but never used\" },\n            ],\n          },\n          byPriority: { 1: [], 2: [], 3: [], 4: [] },\n          byFile: {},\n          autoFixable: [],\n          requiresManualReview: [],\n        },\n        fileAnalyses: [],\n        resolutionStrategies: [],\n        optimizedPlan: {\n          totalStrategies: 0,\n          totalEstimatedTime: 0,\n          totalSteps: 0,\n          executionOrder: [],\n          parallelizableWork: 0,\n          riskDistribution: {},\n          recommendations: [],\n        },\n        recommendations: [],\n        metrics: {\n          analysisTime: 500,\n          filesAnalyzed: 2,\n          rulesTriggered: [],\n          domainDistribution: {},\n          severityDistribution: {},\n          complexityDistribution: {},\n          confidenceScores: { average: 0.8, median: 0.8, distribution: {} },\n        },\n      };\n\n      mockAnalysisService.performComprehensiveAnalysis.mockResolvedValue(\n        mockAnalysis as unknown as Awaited<ReturnType<typeof mockAnalysisService.performComprehensiveAnalysis>>,\n      );\n      mockFixer.handleUnusedVariables.mockResolvedValue({\n        success: true,\n        fixedIssues: 2,\n        failedIssues: 0,\n        processedFiles: ['file1.ts', 'file2.ts'],\n        errors: [],\n        validationResults: [],\n        metrics: {\n          startTime: new Date(),\n          endTime: new Date(),\n          totalTime: 2000,\n          filesProcessed: 2,\n          issuesAttempted: 2,\n          issuesFixed: 2,\n          issuesFailed: 0,\n          validationTime: 0,\n          rollbacksPerformed: 0,\n        },\n      });\n\n      const result = await integration.executeUnusedVariableCleanup({\n        prefixWithUnderscore: true,\n        skipDomainFiles: true,\n      });\n\n      expect(result.success).toBe(true);\n      expect(result.fixedIssues).toBe(2);\n      expect(mockFixer.handleUnusedVariables).toHaveBeenCalledWith(\n        expect.arrayContaining([expect.objectContaining({ rule: '@typescript-eslint/no-unused-vars' })]),\n        expect.objectContaining({\n          prefixWithUnderscore: true,\n          skipDomainFiles: true,\n        }),\n      );\n    });\n\n    it('should handle no unused variables gracefully', async () => {\n      const mockAnalysis = {\n        summary: {\n          totalIssues: 0,\n          errorCount: 0,\n          warningCount: 0,\n          autoFixableCount: 0,\n          domainSpecificCount: 0,\n          criticalIssuesCount: 0,\n          estimatedResolutionTime: 0,\n          overallRiskLevel: 'low' as const,\n        },\n        categorizedErrors: {\n          total: 0,\n          errors: 0,\n          warnings: 0,\n          byCategory: { typescript: [] },\n          byPriority: { 1: [], 2: [], 3: [], 4: [] },\n          byFile: {},\n          autoFixable: [],\n          requiresManualReview: [],\n        },\n        fileAnalyses: [],\n        resolutionStrategies: [],\n        optimizedPlan: {\n          totalStrategies: 0,\n          totalEstimatedTime: 0,\n          totalSteps: 0,\n          executionOrder: [],\n          parallelizableWork: 0,\n          riskDistribution: {},\n          recommendations: [],\n        },\n        recommendations: [],\n        metrics: {\n          analysisTime: 100,\n          filesAnalyzed: 0,\n          rulesTriggered: [],\n          domainDistribution: {},\n          severityDistribution: {},\n          complexityDistribution: {},\n          confidenceScores: { average: 0, median: 0, distribution: {} },\n        },\n      };\n\n      mockAnalysisService.performComprehensiveAnalysis.mockResolvedValue(\n        mockAnalysis as unknown as Awaited<ReturnType<typeof mockAnalysisService.performComprehensiveAnalysis>>,\n      );\n\n      const result = await integration.executeUnusedVariableCleanup();\n\n      expect(result.success).toBe(true);\n      expect(result.fixedIssues).toBe(0);\n      expect(mockFixer.handleUnusedVariables).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('executeImportOptimization', () => {\n    it('should execute import optimization successfully', async () => {\n      const mockAnalysis = {\n        summary: {\n          totalIssues: 3,\n          errorCount: 0,\n          warningCount: 3,\n          autoFixableCount: 3,\n          domainSpecificCount: 0,\n          criticalIssuesCount: 0,\n          estimatedResolutionTime: 5,\n          overallRiskLevel: 'low' as const,\n        },\n        categorizedErrors: {\n          total: 3,\n          errors: 0,\n          warnings: 3,\n          byCategory: {\n            import: [\n              { rule: 'import/order', message: 'Import order is incorrect' },\n              { rule: 'import/newline-after-import', message: 'Missing newline after import' },\n            ],\n          },\n          byPriority: { 1: [], 2: [], 3: [], 4: [] },\n          byFile: {},\n          autoFixable: [],\n          requiresManualReview: [],\n        },\n        fileAnalyses: [],\n        resolutionStrategies: [],\n        optimizedPlan: {\n          totalStrategies: 0,\n          totalEstimatedTime: 0,\n          totalSteps: 0,\n          executionOrder: [],\n          parallelizableWork: 0,\n          riskDistribution: {},\n          recommendations: [],\n        },\n        recommendations: [],\n        metrics: {\n          analysisTime: 300,\n          filesAnalyzed: 1,\n          rulesTriggered: [],\n          domainDistribution: {},\n          severityDistribution: {},\n          complexityDistribution: {},\n          confidenceScores: { average: 0.9, median: 0.9, distribution: {} },\n        },\n      };\n\n      mockAnalysisService.performComprehensiveAnalysis.mockResolvedValue(\n        mockAnalysis as unknown as Awaited<ReturnType<typeof mockAnalysisService.performComprehensiveAnalysis>>,\n      );\n      mockFixer.optimizeImports.mockResolvedValue({\n        success: true,\n        fixedIssues: 2,\n        failedIssues: 0,\n        processedFiles: ['file1.ts'],\n        errors: [],\n        validationResults: [],\n        metrics: {\n          startTime: new Date(),\n          endTime: new Date(),\n          totalTime: 1500,\n          filesProcessed: 1,\n          issuesAttempted: 2,\n          issuesFixed: 2,\n          issuesFailed: 0,\n          validationTime: 0,\n          rollbacksPerformed: 0,\n        },\n      });\n\n      const result = await integration.executeImportOptimization({\n        removeDuplicates: true,\n        sortImports: true,\n      });\n\n      expect(result.success).toBe(true);\n      expect(result.fixedIssues).toBe(2);\n      expect(mockFixer.optimizeImports).toHaveBeenCalledWith(\n        expect.arrayContaining([expect.objectContaining({ rule: 'import/order' })]),\n        expect.objectContaining({\n          removeDuplicates: true,\n          sortImports: true,\n        }),\n      );\n    });\n\n    it('should handle no import issues gracefully', async () => {\n      const mockAnalysis = {\n        summary: {\n          totalIssues: 0,\n          errorCount: 0,\n          warningCount: 0,\n          autoFixableCount: 0,\n          domainSpecificCount: 0,\n          criticalIssuesCount: 0,\n          estimatedResolutionTime: 0,\n          overallRiskLevel: 'low' as const,\n        },\n        categorizedErrors: {\n          total: 0,\n          errors: 0,\n          warnings: 0,\n          byCategory: { import: [] },\n          byPriority: { 1: [], 2: [], 3: [], 4: [] },\n          byFile: {},\n          autoFixable: [],\n          requiresManualReview: [],\n        },\n        fileAnalyses: [],\n        resolutionStrategies: [],\n        optimizedPlan: {\n          totalStrategies: 0,\n          totalEstimatedTime: 0,\n          totalSteps: 0,\n          executionOrder: [],\n          parallelizableWork: 0,\n          riskDistribution: {},\n          recommendations: [],\n        },\n        recommendations: [],\n        metrics: {\n          analysisTime: 100,\n          filesAnalyzed: 0,\n          rulesTriggered: [],\n          domainDistribution: {},\n          severityDistribution: {},\n          complexityDistribution: {},\n          confidenceScores: { average: 0, median: 0, distribution: {} },\n        },\n      };\n\n      mockAnalysisService.performComprehensiveAnalysis.mockResolvedValue(\n        mockAnalysis as unknown as Awaited<ReturnType<typeof mockAnalysisService.performComprehensiveAnalysis>>,\n      );\n\n      const result = await integration.executeImportOptimization();\n\n      expect(result.success).toBe(true);\n      expect(result.fixedIssues).toBe(0);\n      expect(mockFixer.optimizeImports).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle analysis service failures', async () => {\n      mockAnalysisService.performComprehensiveAnalysis.mockRejectedValue(new Error('Analysis service unavailable'));\n\n      await expect(integration.executeAutomatedWorkflow()).rejects.toThrow('Analysis service unavailable');\n    });\n\n    it('should handle fixer failures gracefully in workflow', async () => {\n      const mockAnalysis = {\n        summary: {\n          totalIssues: 5,\n          errorCount: 0,\n          warningCount: 5,\n          autoFixableCount: 5,\n          domainSpecificCount: 0,\n          criticalIssuesCount: 0,\n          estimatedResolutionTime: 10,\n          overallRiskLevel: 'low' as const,\n        },\n        categorizedErrors: {\n          total: 5,\n          errors: 0,\n          warnings: 5,\n          byCategory: { typescript: [], import: [] },\n          byPriority: { 1: [], 2: [], 3: [], 4: [] },\n          byFile: {},\n          autoFixable: [],\n          requiresManualReview: [],\n        },\n        fileAnalyses: [],\n        resolutionStrategies: [],\n        optimizedPlan: {\n          totalStrategies: 0,\n          totalEstimatedTime: 0,\n          totalSteps: 0,\n          executionOrder: [],\n          parallelizableWork: 0,\n          riskDistribution: {},\n          recommendations: [],\n        },\n        recommendations: [],\n        metrics: {\n          analysisTime: 500,\n          filesAnalyzed: 2,\n          rulesTriggered: [],\n          domainDistribution: {},\n          severityDistribution: {},\n          complexityDistribution: {},\n          confidenceScores: { average: 0.7, median: 0.7, distribution: {} },\n        },\n      };\n\n      mockAnalysisService.performComprehensiveAnalysis.mockResolvedValue(\n        mockAnalysis as unknown as Awaited<ReturnType<typeof mockAnalysisService.performComprehensiveAnalysis>>,\n      );\n      mockFixer.applyAutomatedFixes.mockResolvedValue({\n        success: false,\n        fixedIssues: 0,\n        failedIssues: 5,\n        processedFiles: [],\n        errors: [\n          {\n            file: 'test.ts',\n            rule: 'test-rule',\n            message: 'Fix failed',\n            error: 'Command failed',\n            severity: 'error' as const,\n          },\n        ],\n        validationResults: [],\n        metrics: {\n          startTime: new Date(),\n          endTime: new Date(),\n          totalTime: 1000,\n          filesProcessed: 0,\n          issuesAttempted: 5,\n          issuesFixed: 0,\n          issuesFailed: 5,\n          validationTime: 0,\n          rollbacksPerformed: 1,\n        },\n      });\n\n      const result = await integration.executeAutomatedWorkflow();\n\n      expect(result.summary.overallSuccess).toBe(false);\n      expect(result.summary.totalIssuesFailed).toBe(5);\n      expect(result.fixResults.automated.success).toBe(false);\n    });\n  });\n\n  describe('Metrics and Reporting', () => {\n    it('should calculate comprehensive workflow metrics', async () => {\n      const mockAnalysis = {\n        summary: {\n          totalIssues: 10,\n          errorCount: 2,\n          warningCount: 8,\n          autoFixableCount: 8,\n          domainSpecificCount: 0,\n          criticalIssuesCount: 0,\n          estimatedResolutionTime: 20,\n          overallRiskLevel: 'low' as const,\n        },\n        categorizedErrors: {\n          total: 10,\n          errors: 2,\n          warnings: 8,\n          byCategory: { typescript: [], import: [] },\n          byPriority: { 1: [], 2: [], 3: [], 4: [] },\n          byFile: {},\n          autoFixable: [],\n          requiresManualReview: [],\n        },\n        fileAnalyses: [],\n        resolutionStrategies: [],\n        optimizedPlan: {\n          totalStrategies: 0,\n          totalEstimatedTime: 0,\n          totalSteps: 0,\n          executionOrder: [],\n          parallelizableWork: 0,\n          riskDistribution: {},\n          recommendations: [],\n        },\n        recommendations: [],\n        metrics: {\n          analysisTime: 1000,\n          filesAnalyzed: 5,\n          rulesTriggered: [],\n          domainDistribution: {},\n          severityDistribution: {},\n          complexityDistribution: {},\n          confidenceScores: { average: 0.8, median: 0.8, distribution: {} },\n        },\n      };\n\n      mockAnalysisService.performComprehensiveAnalysis.mockResolvedValue(\n        mockAnalysis as unknown as Awaited<ReturnType<typeof mockAnalysisService.performComprehensiveAnalysis>>,\n      );\n      mockFixer.applyAutomatedFixes.mockResolvedValue({\n        success: true,\n        fixedIssues: 8,\n        failedIssues: 0,\n        processedFiles: ['file1.ts', 'file2.ts'],\n        errors: [],\n        validationResults: [],\n        metrics: {\n          startTime: new Date(),\n          endTime: new Date(),\n          totalTime: 5000,\n          filesProcessed: 2,\n          issuesAttempted: 8,\n          issuesFixed: 8,\n          issuesFailed: 0,\n          validationTime: 1000,\n          rollbacksPerformed: 0,\n        },\n      });\n\n      const result = await integration.executeAutomatedWorkflow();\n\n      expect(result.metrics).toBeDefined();\n      expect(result.metrics.analysisTime).toBe(1000);\n      expect(result.metrics.fixingTime).toBeGreaterThan(0);\n      expect(result.metrics.totalWorkflowTime).toBeGreaterThan(0);\n      expect(result.metrics.issuesPerMinute).toBeGreaterThan(0);\n      expect(result.metrics.automationEfficiency).toBe(0.8); // 8/10\n      expect(result.metrics.qualityImprovement).toBe(80); // 80%\n    });\n  });\n});\n"],"version":3}