{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/unintentional-any-elimination/types.ts","mappings":";AAAA;;;GAGG;;;AAcH,IAAY,eAWX;AAXD,WAAY,eAAe;IACzB,oDAAiC,CAAA;IACjC,gDAA6B,CAAA;IAC7B,0CAAuB,CAAA;IACvB,oDAAiC,CAAA;IACjC,gEAA6C,CAAA;IAC7C,4CAAyB,CAAA;IACzB,8CAA2B,CAAA;IAC3B,oDAAiC,CAAA;IACjC,8CAA2B,CAAA;IAC3B,oDAAiC,CAAA;AACnC,CAAC,EAXW,eAAe,+BAAf,eAAe,QAW1B;AAgDD,IAAY,UASX;AATD,WAAY,UAAU;IACpB,2CAA6B,CAAA;IAC7B,+BAAiB,CAAA;IACjB,mCAAqB,CAAA;IACrB,2CAA6B,CAAA;IAC7B,iCAAmB,CAAA;IACnB,qCAAuB,CAAA;IACvB,iCAAmB,CAAA;IACnB,2BAAa,CAAA;AACf,CAAC,EATW,UAAU,0BAAV,UAAU,QASrB;AAkHD,uBAAuB;AACvB,MAAa,mBAAoB,SAAQ,KAAK;IAG1B;IACA;IAHlB,YACE,OAAe,EACC,OAA8B,EAC9B,KAAa;QAE7B,KAAK,CAAC,OAAO,CAAC,CAAC;QAHC,YAAO,GAAP,OAAO,CAAuB;QAC9B,UAAK,GAAL,KAAK,CAAQ;QAG7B,IAAI,CAAC,IAAI,GAAG,qBAAqB,CAAC;IACpC,CAAC;CACF;AATD,kDASC;AAED,MAAa,mBAAoB,SAAQ,KAAK;IAG1B;IACA;IAHlB,YACE,OAAe,EACC,YAAoB,EACpB,aAAuB;QAEvC,KAAK,CAAC,OAAO,CAAC,CAAC;QAHC,iBAAY,GAAZ,YAAY,CAAQ;QACpB,kBAAa,GAAb,aAAa,CAAU;QAGvC,IAAI,CAAC,IAAI,GAAG,qBAAqB,CAAC;IACpC,CAAC;CACF;AATD,kDASC","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/unintentional-any-elimination/types.ts"],"sourcesContent":["/**\n * Unintentional Any Elimination System Types\n * TypeScript interfaces for classification, replacement, and progress tracking\n */\n\nimport { ProgressMetrics, SafetyEvent, ValidationResult } from '../../../types/campaign';\n\n// Core Classification Types\nexport interface AnyTypeClassification {\n  isIntentional: boolean;\n  confidence: number; // 0-1 scale\n  reasoning: string;\n  suggestedReplacement?: string;\n  requiresDocumentation: boolean;\n  category: AnyTypeCategory;\n}\n\nexport enum AnyTypeCategory {\n  ERROR_HANDLING = 'error_handling',\n  EXTERNAL_API = 'external_api',\n  TEST_MOCK = 'test_mock',\n  DYNAMIC_CONFIG = 'dynamic_config',\n  LEGACY_COMPATIBILITY = 'legacy_compatibility',\n  ARRAY_TYPE = 'array_type',\n  RECORD_TYPE = 'record_type',\n  FUNCTION_PARAM = 'function_param',\n  RETURN_TYPE = 'return_type',\n  TYPE_ASSERTION = 'type_assertion'\n}\n\nexport interface ClassificationContext {\n  filePath: string;\n  lineNumber: number;\n  codeSnippet: string;\n  surroundingLines: string[];\n  hasExistingComment: boolean;\n  existingComment?: string;\n  isInTestFile: boolean;\n  domainContext: DomainContext;\n}\n\n// Type Replacement Types\nexport interface TypeReplacement {\n  original: string;\n  replacement: string;\n  filePath: string;\n  lineNumber: number;\n  confidence: number;\n  validationRequired: boolean;\n}\n\nexport interface ReplacementResult {\n  success: boolean;\n  appliedReplacements: TypeReplacement[];\n  failedReplacements: TypeReplacement[];\n  compilationErrors: string[];\n  rollbackPerformed: boolean;\n  backupPath?: string;\n}\n\nexport interface ReplacementStrategy {\n  pattern: RegExp;\n  replacement: (match: string, context: ClassificationContext) => string;\n  validator: (context: ClassificationContext) => boolean;\n  priority: number;\n}\n\n// Domain Context Types\nexport interface DomainContext {\n  domain: CodeDomain;\n  subDomain?: string;\n  intentionalityHints: IntentionalityHint[];\n  suggestedTypes: string[];\n  preservationReasons: string[];\n}\n\nexport enum CodeDomain {\n  ASTROLOGICAL = 'astrological',\n  RECIPE = 'recipe',\n  CAMPAIGN = 'campaign',\n  INTELLIGENCE = 'intelligence',\n  SERVICE = 'service',\n  COMPONENT = 'component',\n  UTILITY = 'utility',\n  TEST = 'test'\n}\n\nexport interface IntentionalityHint {\n  reason: string;\n  confidence: number;\n  suggestedAction: 'preserve' | 'replace' | 'document' | 'review';\n}\n\n// Data Models\nexport interface AnyTypeRecord {\n  id: string;\n  filePath: string;\n  lineNumber: number;\n  codeSnippet: string;\n  classification: AnyTypeClassification;\n  domainContext: DomainContext;\n  lastAnalyzed: Date;\n  replacementHistory: ReplacementAttempt[];\n  currentStatus: 'pending' | 'replaced' | 'documented' | 'preserved';\n}\n\nexport interface ReplacementAttempt {\n  timestamp: Date;\n  originalType: string;\n  attemptedReplacement: string;\n  success: boolean;\n  errorMessage?: string;\n  rollbackReason?: string;\n}\n\n// Progress Tracking Types\nexport interface UnintentionalAnyProgress extends ProgressMetrics {\n  totalAnyTypes: number;\n  classifiedIntentional: number;\n  classifiedUnintentional: number;\n  successfulReplacements: number;\n  documentedIntentional: number;\n  remainingUnintentional: number;\n  reductionPercentage: number;\n  targetReductionPercentage: number;\n  batchesCompleted: number;\n  averageSuccessRate: number;\n}\n\nexport interface BatchMetrics {\n  batchNumber: number;\n  filesProcessed: number;\n  anyTypesAnalyzed: number;\n  replacementsAttempted: number;\n  replacementsSuccessful: number;\n  compilationErrors: number;\n  rollbacksPerformed: number;\n  executionTime: number;\n  safetyScore: number;\n}\n\n// Configuration Types\nexport interface UnintentionalAnyConfig {\n  maxFilesPerBatch: number;\n  targetReductionPercentage: number;\n  confidenceThreshold: number;\n  enableDomainAnalysis: boolean;\n  enableDocumentation: boolean;\n  safetyLevel: 'CONSERVATIVE' | 'MODERATE' | 'AGGRESSIVE';\n  validationFrequency: number;\n}\n\nexport interface ClassificationRules {\n  errorHandlingPatterns: RegExp[];\n  externalApiPatterns: RegExp[];\n  testMockPatterns: RegExp[];\n  dynamicConfigPatterns: RegExp[];\n  legacyCompatibilityPatterns: RegExp[];\n}\n\n// Campaign Integration Types\nexport interface UnintentionalAnyCampaignPhase {\n  id: string;\n  name: string;\n  description: string;\n  classifier: AnyTypeClassifier;\n  replacer: SafeTypeReplacer;\n  analyzer: DomainContextAnalyzer;\n  config: UnintentionalAnyConfig;\n}\n\nexport interface UnintentionalAnyCampaignResult {\n  totalAnyTypesAnalyzed: number;\n  intentionalTypesIdentified: number;\n  unintentionalTypesReplaced: number;\n  documentationAdded: number;\n  reductionAchieved: number;\n  safetyEvents: SafetyEvent[];\n  validationResults: ValidationResult[];\n  success: boolean;\n  filesProcessed: number;\n  errorsFixed: number;\n  warningsFixed: number;\n}\n\nexport interface UnintentionalAnyMetrics {\n  totalAnyTypes: number;\n  intentionalAnyTypes: number;\n  unintentionalAnyTypes: number;\n  documentedAnyTypes: number;\n  documentationCoverage: number;\n  reductionFromBaseline: number;\n  targetReduction: number;\n}\n\nexport interface UnintentionalAnyProgressMetrics extends ProgressMetrics {\n  unintentionalAnyMetrics: UnintentionalAnyMetrics;\n}\n\n// Error Handling Types\nexport class ClassificationError extends Error {\n  constructor(\n    message: string,\n    public readonly context: ClassificationContext,\n    public readonly cause?: Error\n  ) {\n    super(message);\n    this.name = 'ClassificationError';\n  }\n}\n\nexport class SafetyProtocolError extends Error {\n  constructor(\n    message: string,\n    public readonly rollbackPath: string,\n    public readonly affectedFiles: string[]\n  ) {\n    super(message);\n    this.name = 'SafetyProtocolError';\n  }\n}\n\n// Forward declarations for classes (to be implemented in separate files)\nexport interface AnyTypeClassifier {\n  classify(context: ClassificationContext): Promise<AnyTypeClassification>;\n  classifyBatch(contexts: ClassificationContext[]): Promise<AnyTypeClassification[]>;\n}\n\nexport interface SafeTypeReplacer {\n  applyReplacement(replacement: TypeReplacement): Promise<ReplacementResult>;\n  processBatch(replacements: TypeReplacement[]): Promise<ReplacementResult>;\n}\n\nexport interface DomainContextAnalyzer {\n  analyzeDomain(context: ClassificationContext): Promise<DomainContext>;\n  getDomainSpecificSuggestions(domain: CodeDomain, context: ClassificationContext): string[];\n}\n\nexport interface ProgressiveImprovementEngine {\n  executeBatch(config: UnintentionalAnyConfig): Promise<BatchMetrics>;\n  executeFullCampaign(config: UnintentionalAnyConfig): Promise<UnintentionalAnyCampaignResult>;\n}\n\n// Documentation System Types\nexport interface DocumentationTemplate {\n  category: AnyTypeCategory;\n  domain: CodeDomain;\n  template: string;\n  eslintDisableComment?: string;\n  explanation: string;\n}\n\nexport interface DocumentationResult {\n  filePath: string;\n  lineNumber: number;\n  originalCode: string;\n  documentedCode: string;\n  commentAdded: string;\n  eslintDisableAdded?: string;\n  success: boolean;\n  error?: string;\n}\n\nexport interface DocumentationValidation {\n  hasComment: boolean;\n  commentQuality: 'poor' | 'fair' | 'good' | 'excellent';\n  hasEslintDisable: boolean;\n  eslintDisableHasExplanation: boolean;\n  isComplete: boolean;\n  suggestions: string[];\n}\n\nexport interface DocumentationReport {\n  totalIntentionalAnyTypes: number;\n  documentedTypes: number;\n  undocumentedTypes: number;\n  documentationCoverage: number; // percentage\n  qualityBreakdown: Record<string, number>;\n  undocumentedFiles: string[];\n  recommendations: string[];\n}\n\nexport interface AutoDocumentationGenerator {\n  generateDocumentation(\n    classification: AnyTypeClassification,\n    context: ClassificationContext\n  ): Promise<DocumentationResult>;\n\n  validateDocumentation(\n    context: ClassificationContext\n  ): Promise<DocumentationValidation>;\n\n  generateReport(): Promise<DocumentationReport>;\n}\n\n// Analysis and Reporting Types\n\nexport interface DomainDistribution {\n  totalAnyTypes: number;\n  byDomain: Array<{\n    domain: CodeDomain;\n    count: number;\n    percentage: number;\n  }>;\n  byCategory: Array<{\n    category: AnyTypeCategory;\n    count: number;\n    percentage: number;\n  }>;\n  intentionalVsUnintentional: {\n    intentional: {\n      count: number;\n      percentage: number;\n    };\n    unintentional: {\n      count: number;\n      percentage: number;\n    };\n  };\n  analysisDate: Date;\n}\n\nexport interface ClassificationAccuracyReport {\n  overallAccuracy: number;\n  averageConfidence: number;\n  sampleSize: number;\n  categoryAccuracy: Array<{\n    category: AnyTypeCategory;\n    accuracy: number;\n    sampleCount: number;\n  }>;\n  confidenceDistribution: Array<{\n    range: string;\n    count: number;\n    percentage: number;\n  }>;\n  reportDate: Date;\n}\n\nexport interface SuccessRateAnalysis {\n  currentSuccessRate: number;\n  targetSuccessRate: number;\n  improvementNeeded: number;\n  categorySuccessRates: Array<{\n    category: AnyTypeCategory;\n    successRate: number;\n    sampleSize: number;\n  }>;\n  trendingData: TrendingData;\n  projectedCompletion: Date;\n  recommendations: string[];\n  analysisDate: Date;\n}\n\nexport interface TrendingData {\n  date: Date;\n  successRate: number;\n  totalAnyTypes: number;\n  unintentionalCount: number;\n  classificationAccuracy: number;\n  trends?: {\n    successRateChange: number;\n    totalAnyTypesChange: number;\n    unintentionalCountChange: number;\n    classificationAccuracyChange: number;\n  };\n}\n\nexport interface ManualReviewRecommendation {\n  filePath: string;\n  lineNumber: number;\n  codeSnippet: string;\n  classification: AnyTypeClassification;\n  reviewReason: string;\n  priority: 'high' | 'medium' | 'low';\n  suggestedActions: string[];\n  estimatedEffort: 'low' | 'medium' | 'high';\n  relatedOccurrences: Array<{\n    filePath: string;\n    lineNumber: number;\n  }>;\n}\n\nexport interface AnalysisReport {\n  id: string;\n  timestamp: Date;\n  domainDistribution: DomainDistribution;\n  accuracyReport: ClassificationAccuracyReport;\n  successRateAnalysis: SuccessRateAnalysis;\n  manualReviewRecommendations: ManualReviewRecommendation[];\n  summary: {\n    totalAnyTypes: number;\n    unintentionalCount: number;\n    classificationAccuracy: number;\n    currentSuccessRate: number;\n    manualReviewCases: number;\n    topDomain: CodeDomain;\n    topCategory: AnyTypeCategory;\n  };\n}\n\nexport interface AnalysisMetrics {\n  overallSuccessRate: number;\n  totalProcessed: number;\n  successfulReplacements: number;\n  failedReplacements: number;\n  averageConfidence: number;\n}\n\n// Progress Monitoring and Alerting Types\n\nexport interface DashboardData {\n  lastUpdate: Date;\n  analysisReport: AnalysisReport;\n  progressMetrics: UnintentionalAnyProgress;\n  buildStability: BuildStabilityRecord;\n  alertSummary: AlertSummary;\n  trendingData: TrendingData[];\n  systemHealth: SystemHealth;\n}\n\nexport interface AlertThresholds {\n  successRateThreshold: number;\n  buildFailureThreshold: number;\n  classificationAccuracyThreshold: number;\n  safetyEventThreshold: number;\n  progressStallThreshold: number; // hours\n}\n\nexport interface Alert {\n  type: AlertType;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  message: string;\n  timestamp: Date;\n  data?: any;\n}\n\nexport type AlertType =\n  | 'low_success_rate'\n  | 'build_failure'\n  | 'consecutive_build_failures'\n  | 'low_classification_accuracy'\n  | 'progress_stall'\n  | 'frequent_safety_events'\n  | 'safety_protocol_activation'\n  | 'system_error';\n\nexport interface SafetyEvent {\n  type: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  description: string;\n  action: string;\n  timestamp: Date;\n  affectedFiles?: string[];\n}\n\nexport interface BuildStabilityRecord {\n  timestamp: Date;\n  isStable: boolean;\n  buildTime: number;\n  errorCount: number;\n  errorMessage: string | null;\n}\n\nexport interface AlertSummary {\n  totalAlerts: number;\n  criticalAlerts: number;\n  highAlerts: number;\n  mediumAlerts: number;\n  lowAlerts: number;\n  recentAlerts: Alert[];\n}\n\nexport interface SystemHealth {\n  score: number; // 0-100\n  status: 'healthy' | 'warning' | 'critical';\n  lastCheck: Date;\n  issues: string[];\n}\n"],"version":3}