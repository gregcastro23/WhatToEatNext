158e7484f0e7ecc04f8d4bb619317efa
"use strict";
/**
 * Automated Error Resolution Integration Tests
 *
 * Tests the automated error resolution systems including import fixing,
 * unused variable cleanup, and console statement replacement.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock dependencies
jest.mock('child_process');
jest.mock('fs');
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const os_1 = require("os");
const path_1 = __importDefault(require("path"));
const mockExecSync = child_process_1.execSync;
const _mockWriteFileSync = fs_1.writeFileSync;
const mockReadFileSync = fs_1.readFileSync;
const mockExistsSync = fs_1.existsSync;
const _mockMkdirSync = fs_1.mkdirSync;
describe('Automated Error Resolution Integration', () => {
    const _testDir = path_1.default.join((0, os_1.tmpdir)(), 'eslint-test');
    beforeEach(() => {
        jest.clearAllMocks();
        mockExistsSync.mockReturnValue(true);
    });
    describe('ESLint Auto-Fix Integration', () => {
        test('should execute ESLint auto-fix successfully', async () => {
            const mockLintOutput = JSON.stringify([
                {
                    filePath: '/test/file.ts',
                    messages: [
                        {
                            ruleId: 'prefer-const',
                            severity: 2,
                            message: 'Prefer const over let',
                            fix: {
                                range: [0, 3],
                                text: 'const',
                            },
                        },
                        {
                            ruleId: 'no-extra-semi',
                            severity: 2,
                            message: 'Unnecessary semicolon',
                            fix: {
                                range: [10, 11],
                                text: '',
                            },
                        },
                    ],
                    fixableErrorCount: 2,
                    fixableWarningCount: 0,
                },
            ]);
            mockExecSync.mockReturnValue(mockLintOutput);
            // Simulate running ESLint with --fix
            const command = 'yarn lint:fix --format=json';
            const result = mockExecSync(command, { encoding: 'utf8' });
            expect(mockExecSync).toHaveBeenCalledWith(command, { encoding: 'utf8' });
            expect(JSON.parse(result)[0].fixableErrorCount).toBe(2);
        });
        test('should handle ESLint execution errors gracefully', async () => {
            const mockError = new Error('ESLint failed');
            mockError.stdout = JSON.stringify([]);
            mockError.status = 1;
            mockExecSync.mockImplementation(() => {
                throw mockError;
            });
            // Should handle the error without throwing
            expect(() => {
                try {
                    mockExecSync('yarn lint:fix', { encoding: 'utf8' });
                }
                catch (error) {
                    // Simulate error handling
                    if (error.status === 1 && error.stdout) {
                        return error.stdout;
                    }
                    throw error;
                }
            }).not.toThrow();
        });
        test('should process multiple files in batch', async () => {
            const mockBatchOutput = JSON.stringify([
                {
                    filePath: '/test/file1.ts',
                    messages: [{ ruleId: 'prefer-const', severity: 2, fix: { range: [0, 3], text: 'const' } }],
                    fixableErrorCount: 1,
                },
                {
                    filePath: '/test/file2.ts',
                    messages: [{ ruleId: 'no-unused-vars', severity: 1, fix: null }],
                    fixableErrorCount: 0,
                },
                {
                    filePath: '/test/file3.ts',
                    messages: [],
                    fixableErrorCount: 0,
                },
            ]);
            mockExecSync.mockReturnValue(mockBatchOutput);
            const result = JSON.parse(mockExecSync('yarn lint:fix --format=json', { encoding: 'utf8' }));
            expect(result).toHaveLength(3);
            expect(result[0].fixableErrorCount).toBe(1);
            expect(result[1].fixableErrorCount).toBe(0);
            expect(result[2].fixableErrorCount).toBe(0);
        });
    });
    describe('Import Organization Resolution', () => {
        test('should fix import order violations', async () => {
            const testFileContent = `
        import { Component } from 'react';
        import path from 'path';
        import { calculatePlanetaryPositions } from '@/calculations/planetary';
        import fs from 'fs';
        import { ElementalProperties } from '@/types/elemental';
      `;
            const expectedFixedContent = `
        import fs from 'fs';
        import path from 'path';
        import { Component } from 'react';

        import { calculatePlanetaryPositions } from '@/calculations/planetary';
        import { ElementalProperties } from '@/types/elemental';
      `;
            mockReadFileSync.mockReturnValue(testFileContent);
            // Simulate import organization fix
            const mockFixedOutput = JSON.stringify([
                {
                    filePath: '/test/file.ts',
                    messages: [],
                    output: expectedFixedContent,
                },
            ]);
            mockExecSync.mockReturnValue(mockFixedOutput);
            const result = JSON.parse(mockExecSync('yarn lint:fix --fix-type layout', { encoding: 'utf8' }));
            expect(result[0].output).toContain("import fs from 'fs'");
            expect(result[0].output).toContain("import path from 'path'");
            expect(result[0].messages).toHaveLength(0);
        });
        test('should remove duplicate imports', async () => {
            const testFileContent = `
        import { Component } from 'react';
        import { useState } from 'react';
        import { Component } from 'react'; // Duplicate
        import { calculatePlanetaryPositions } from '@/calculations/planetary';
      `;
            const mockFixedOutput = JSON.stringify([
                {
                    filePath: '/test/file.ts',
                    messages: [],
                    output: testFileContent.replace(/import { Component } from 'react'; \/\/ Duplicate\n/, ''),
                },
            ]);
            mockExecSync.mockReturnValue(mockFixedOutput);
            mockReadFileSync.mockReturnValue(testFileContent);
            const result = JSON.parse(mockExecSync('yarn lint:fix', { encoding: 'utf8' }));
            expect(result[0].output).not.toContain('// Duplicate');
            expect((result[0].output.match(/import.*from 'react'/g) || []).length).toBeLessThan(3);
        });
        test('should preserve astrological import patterns', async () => {
            const astrologicalImports = `
        import { calculatePlanetaryPositions } from '@/calculations/planetary';
        import { validateTransitDate } from '@/utils/transitValidation';
        import { FALLBACK_POSITIONS } from '@/data/planets/fallback';
        import { ElementalProperties } from '@/types/elemental';
      `;
            mockReadFileSync.mockReturnValue(astrologicalImports);
            const mockFixedOutput = JSON.stringify([
                {
                    filePath: '/test/astrological.ts',
                    messages: [],
                    output: astrologicalImports, // Should remain unchanged
                },
            ]);
            mockExecSync.mockReturnValue(mockFixedOutput);
            const result = JSON.parse(mockExecSync('yarn lint:fix', { encoding: 'utf8' }));
            expect(result[0].output).toContain('calculatePlanetaryPositions');
            expect(result[0].output).toContain('validateTransitDate');
            expect(result[0].output).toContain('FALLBACK_POSITIONS');
            expect(result[0].output).toContain('ElementalProperties');
        });
    });
    describe('Unused Variable Resolution', () => {
        test('should handle unused variable warnings', async () => {
            const testFileContent = `
        function calculateElements() {
          const unusedVar = 'test';
          const usedVar = 'active';
          const _intentionallyUnused = 'ok';

          return usedVar;
        }
      `;
            const mockLintOutput = JSON.stringify([
                {
                    filePath: '/test/file.ts',
                    messages: [
                        {
                            ruleId: '@typescript-eslint/no-unused-vars',
                            severity: 1,
                            message: "'unusedVar' is assigned a value but never used.",
                            line: 3,
                            column: 15,
                        },
                    ],
                },
            ]);
            mockExecSync.mockReturnValue(mockLintOutput);
            mockReadFileSync.mockReturnValue(testFileContent);
            const result = JSON.parse(mockExecSync('yarn lint --format=json', { encoding: 'utf8' }));
            expect(result[0].messages).toHaveLength(1);
            expect(result[0].messages[0].ruleId).toBe('@typescript-eslint/no-unused-vars');
            expect(result[0].messages[0].message).toContain('unusedVar');
        });
        test('should preserve astrological variable patterns', async () => {
            const astrologicalCode = `
        function calculatePlanetaryInfluence() {
          const planet = 'mars';
          const position = { sign: 'cancer', degree: 22.63 };
          const degree = position.degree;
          const sign = position.sign;
          const UNUSED_fallback = FALLBACK_POSITIONS;

          return { planet, degree }; // sign and UNUSED_fallback intentionally unused
        }
      `;
            const mockLintOutput = JSON.stringify([
                {
                    filePath: '/test/astrological.ts',
                    messages: [], // Should not report errors for astrological patterns
                },
            ]);
            mockExecSync.mockReturnValue(mockLintOutput);
            mockReadFileSync.mockReturnValue(astrologicalCode);
            const result = JSON.parse(mockExecSync('yarn lint --format=json', { encoding: 'utf8' }));
            expect(result[0].messages).toHaveLength(0);
        });
        test('should handle campaign system variable patterns', async () => {
            const campaignCode = `
        function executeCampaign() {
          const campaign = 'typescript-elimination';
          const progress = { completed: 50, total: 100 };
          const UNUSED_metrics = { errors: 10, warnings: 25 };
          const safety = { backupCreated: true };
          const UNUSED_debug = 'debug info';

          return { campaign, progress };
        }
      `;
            const mockLintOutput = JSON.stringify([
                {
                    filePath: '/test/campaign.ts',
                    messages: [], // Should not report errors for campaign patterns
                },
            ]);
            mockExecSync.mockReturnValue(mockLintOutput);
            mockReadFileSync.mockReturnValue(campaignCode);
            const result = JSON.parse(mockExecSync('yarn lint --format=json', { encoding: 'utf8' }));
            expect(result[0].messages).toHaveLength(0);
        });
    });
    describe('Console Statement Resolution', () => {
        test('should handle console statement warnings', async () => {
            const testFileContent = `
        function debugCalculation() {
          console.log('Debug info'); // Should be warning
          console.warn('Warning message'); // Should be allowed
          console.error('Error message'); // Should be allowed
          console.info('Info message'); // Should be allowed
        }
      `;
            const mockLintOutput = JSON.stringify([
                {
                    filePath: '/test/file.ts',
                    messages: [
                        {
                            ruleId: 'no-console',
                            severity: 2,
                            message: 'Unexpected console statement.',
                            line: 3,
                            column: 11,
                        },
                    ],
                },
            ]);
            mockExecSync.mockReturnValue(mockLintOutput);
            mockReadFileSync.mockReturnValue(testFileContent);
            const result = JSON.parse(mockExecSync('yarn lint --format=json', { encoding: 'utf8' }));
            expect(result[0].messages).toHaveLength(1);
            expect(result[0].messages[0].ruleId).toBe('no-console');
            expect(result[0].messages[0].message).toContain('console statement');
        });
        test('should allow console statements in astrological calculations', async () => {
            const astrologicalCode = `
        function calculatePlanetaryPositions() {
          console.log('Calculating planetary positions');
          console.debug('Debug astronomical data');
          console.info('Using fallback positions');

          return FALLBACK_POSITIONS;
        }
      `;
            const mockLintOutput = JSON.stringify([
                {
                    filePath: '/test/calculations/planetary.ts',
                    messages: [], // Should allow console in astrological files
                },
            ]);
            mockExecSync.mockReturnValue(mockLintOutput);
            mockReadFileSync.mockReturnValue(astrologicalCode);
            const result = JSON.parse(mockExecSync('yarn lint --format=json', { encoding: 'utf8' }));
            expect(result[0].messages).toHaveLength(0);
        });
        test('should allow console statements in campaign system files', async () => {
            const campaignCode = `
        function executeCampaignPhase() {
          console.log('Starting campaign phase');
          console.info('Progress: 50%');
          console.warn('Safety protocol activated');

          return { status: 'running' };
        }
      `;
            const mockLintOutput = JSON.stringify([
                {
                    filePath: '/test/services/campaign/executor.ts',
                    messages: [], // Should allow console in campaign files
                },
            ]);
            mockExecSync.mockReturnValue(mockLintOutput);
            mockReadFileSync.mockReturnValue(campaignCode);
            const result = JSON.parse(mockExecSync('yarn lint --format=json', { encoding: 'utf8' }));
            expect(result[0].messages).toHaveLength(0);
        });
    });
    describe('TypeScript Error Resolution', () => {
        test('should handle explicit any type errors', async () => {
            const testFileContent = `
        function processData(data: unknown) { // Should be error
          return data.someProperty;
        }

        function processAstrologicalData(data: unknown) { // May be allowed in astrological files
          return data.planetaryPosition;
        }
      `;
            const mockLintOutput = JSON.stringify([
                {
                    filePath: '/test/file.ts',
                    messages: [
                        {
                            ruleId: '@typescript-eslint/no-explicit-any',
                            severity: 2,
                            message: 'Unexpected any. Specify a different type.',
                            line: 2,
                            column: 42,
                        },
                    ],
                },
            ]);
            mockExecSync.mockReturnValue(mockLintOutput);
            mockReadFileSync.mockReturnValue(testFileContent);
            const result = JSON.parse(mockExecSync('yarn lint --format=json', { encoding: 'utf8' }));
            expect(result[0].messages).toHaveLength(1);
            expect(result[0].messages[0].ruleId).toBe('@typescript-eslint/no-explicit-any');
        });
        test('should handle unnecessary condition warnings', async () => {
            const testFileContent = `
        function checkValue(value?: string) {
          if (value !== undefined && value !== null) { // May be unnecessary
            return value.length;
          }
          return 0;
        }
      `;
            const mockLintOutput = JSON.stringify([
                {
                    filePath: '/test/file.ts',
                    messages: [
                        {
                            ruleId: '@typescript-eslint/no-unnecessary-condition',
                            severity: 1,
                            message: 'Unnecessary conditional, value is always truthy.',
                            line: 3,
                            column: 7,
                        },
                    ],
                },
            ]);
            mockExecSync.mockReturnValue(mockLintOutput);
            mockReadFileSync.mockReturnValue(testFileContent);
            const result = JSON.parse(mockExecSync('yarn lint --format=json', { encoding: 'utf8' }));
            expect(result[0].messages).toHaveLength(1);
            expect(result[0].messages[0].ruleId).toBe('@typescript-eslint/no-unnecessary-condition');
        });
    });
    describe('React Hooks Resolution', () => {
        test('should handle exhaustive deps warnings', async () => {
            const reactCode = `
        import { useEffect, useState } from 'react';

        function Component() {
          const [count, setCount] = useState(0);
          const [name, setName] = useState('');

          useEffect(() => {
            console.log(count, name);
          }, [count]); // Missing 'name' in dependencies

          return null;
        }
      `;
            const mockLintOutput = JSON.stringify([
                {
                    filePath: '/test/Component.tsx',
                    messages: [
                        {
                            ruleId: 'react-hooks/exhaustive-deps',
                            severity: 1,
                            message: "React Hook useEffect has a missing dependency: 'name'.",
                            line: 9,
                            column: 7,
                        },
                    ],
                },
            ]);
            mockExecSync.mockReturnValue(mockLintOutput);
            mockReadFileSync.mockReturnValue(reactCode);
            const result = JSON.parse(mockExecSync('yarn lint --format=json', { encoding: 'utf8' }));
            expect(result[0].messages).toHaveLength(1);
            expect(result[0].messages[0].ruleId).toBe('react-hooks/exhaustive-deps');
            expect(result[0].messages[0].message).toContain('missing dependency');
        });
        test('should handle custom hooks in astrological components', async () => {
            const astrologicalReactCode = `
        import { useEffect } from 'react';
        import { useRecoilValue } from 'recoil';
        import { usePlanetaryPositions } from '@/hooks/usePlanetaryPositions';

        function AstrologicalComponent() {
          const positions = usePlanetaryPositions();
          const currentDate = useRecoilValue(currentDateState);

          useEffect(() => {
            console.log('Planetary positions updated', positions);
          }, [positions]); // Should be valid

          return null;
        }
      `;
            const mockLintOutput = JSON.stringify([
                {
                    filePath: '/test/AstrologicalComponent.tsx',
                    messages: [], // Should handle custom hooks correctly
                },
            ]);
            mockExecSync.mockReturnValue(mockLintOutput);
            mockReadFileSync.mockReturnValue(astrologicalReactCode);
            const result = JSON.parse(mockExecSync('yarn lint --format=json', { encoding: 'utf8' }));
            expect(result[0].messages).toHaveLength(0);
        });
    });
    describe('Error Resolution Workflow', () => {
        test('should execute complete error resolution workflow', async () => {
            const workflowSteps = [
                'yarn lint --format=json',
                'yarn lint:fix',
                'yarn lint:fix --fix-type layout',
                'yarn lint --format=json', // Final verification
            ];
            const mockOutputs = [
                JSON.stringify([{ filePath: '/test/file.ts', messages: [{ ruleId: 'prefer-const', severity: 2 }] }]),
                '',
                '',
                JSON.stringify([{ filePath: '/test/file.ts', messages: [] }]), // Clean result
            ];
            mockExecSync
                .mockReturnValueOnce(mockOutputs[0])
                .mockReturnValueOnce(mockOutputs[1])
                .mockReturnValueOnce(mockOutputs[2])
                .mockReturnValueOnce(mockOutputs[3]);
            // Execute workflow
            workflowSteps.forEach((step, index) => {
                const result = mockExecSync(step, { encoding: 'utf8' });
                if (index === 0 || index === 3) {
                    // Analysis steps should return JSON
                    expect(() => JSON.parse(result)).not.toThrow();
                }
            });
            expect(mockExecSync).toHaveBeenCalledTimes(4);
            // Verify final result is clean
            const finalResult = JSON.parse(mockOutputs[3]);
            expect(finalResult[0].messages).toHaveLength(0);
        });
        test('should handle partial resolution gracefully', async () => {
            const partialResolutionOutput = JSON.stringify([
                {
                    filePath: '/test/file.ts',
                    messages: [
                        { ruleId: 'no-unused-vars', severity: 1, fix: null },
                        { ruleId: '@typescript-eslint/no-explicit-any', severity: 2, fix: null }, // Requires manual fix
                    ],
                },
            ]);
            mockExecSync.mockReturnValue(partialResolutionOutput);
            const result = JSON.parse(mockExecSync('yarn lint --format=json', { encoding: 'utf8' }));
            expect(result[0].messages).toHaveLength(2);
            expect(result[0].messages.every((msg) => msg.fix === null)).toBe(true);
        });
        test('should preserve file safety during resolution', async () => {
            const safetyChecks = [
                'git status --porcelain',
                'yarn build',
                'yarn test --passWithNoTests', // Verify tests still pass
            ];
            mockExecSync
                .mockReturnValueOnce('') // Clean git status
                .mockReturnValueOnce('') // Successful build
                .mockReturnValueOnce('Tests passed'); // Successful tests
            safetyChecks.forEach(check => {
                const result = mockExecSync(check, { encoding: 'utf8' });
                expect(result).toBeDefined();
            });
            expect(mockExecSync).toHaveBeenCalledTimes(3);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0Ly5jb25zb2xpZGF0aW9uLWJhY2t1cHMtMjAyNS0wOC0yM1QxNy01NC0xMC0wOTJaL3NyYy9fX3Rlc3RzX18vbGludGluZy9BdXRvbWF0ZWRFcnJvclJlc29sdXRpb24udGVzdC50cyIsIm1hcHBpbmdzIjoiO0FBQUE7Ozs7O0dBS0c7Ozs7O0FBT0gsb0JBQW9CO0FBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDM0IsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQVBoQixpREFBeUM7QUFDekMsMkJBQXdFO0FBQ3hFLDJCQUE0QjtBQUM1QixnREFBd0I7QUFNeEIsTUFBTSxZQUFZLEdBQUcsd0JBQWdELENBQUM7QUFDdEUsTUFBTSxrQkFBa0IsR0FBRyxrQkFBMEQsQ0FBQztBQUN0RixNQUFNLGdCQUFnQixHQUFHLGlCQUF3RCxDQUFDO0FBQ2xGLE1BQU0sY0FBYyxHQUFHLGVBQW9ELENBQUM7QUFDNUUsTUFBTSxjQUFjLEdBQUcsY0FBa0QsQ0FBQztBQUUxRSxRQUFRLENBQUMsd0NBQXdDLEVBQUUsR0FBRyxFQUFFO0lBQ3RELE1BQU0sUUFBUSxHQUFHLGNBQUksQ0FBQyxJQUFJLENBQUMsSUFBQSxXQUFNLEdBQUUsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUVwRCxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3JCLGNBQWMsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdkMsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsNkJBQTZCLEVBQUUsR0FBRyxFQUFFO1FBQzNDLElBQUksQ0FBQyw2Q0FBNkMsRUFBRSxLQUFLLElBQUksRUFBRTtZQUM3RCxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO2dCQUNwQztvQkFDRSxRQUFRLEVBQUUsZUFBZTtvQkFDekIsUUFBUSxFQUFFO3dCQUNS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QUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDM0IsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDLEtBQUssRUFBRSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO2dCQUN6RCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDL0IsQ0FBQyxDQUFDLENBQUM7WUFFSCxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9HcmVnQ2FzdHJvL0Rlc2t0b3AvV2hhdFRvRWF0TmV4dC8uY29uc29saWRhdGlvbi1iYWNrdXBzLTIwMjUtMDgtMjNUMTctNTQtMTAtMDkyWi9zcmMvX190ZXN0c19fL2xpbnRpbmcvQXV0b21hdGVkRXJyb3JSZXNvbHV0aW9uLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBdXRvbWF0ZWQgRXJyb3IgUmVzb2x1dGlvbiBJbnRlZ3JhdGlvbiBUZXN0c1xuICpcbiAqIFRlc3RzIHRoZSBhdXRvbWF0ZWQgZXJyb3IgcmVzb2x1dGlvbiBzeXN0ZW1zIGluY2x1ZGluZyBpbXBvcnQgZml4aW5nLFxuICogdW51c2VkIHZhcmlhYmxlIGNsZWFudXAsIGFuZCBjb25zb2xlIHN0YXRlbWVudCByZXBsYWNlbWVudC5cbiAqL1xuXG5pbXBvcnQgeyBleGVjU3luYyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IHsgZXhpc3RzU3luYywgbWtkaXJTeW5jLCByZWFkRmlsZVN5bmMsIHdyaXRlRmlsZVN5bmMgfSBmcm9tICdmcyc7XG5pbXBvcnQgeyB0bXBkaXIgfSBmcm9tICdvcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuLy8gTW9jayBkZXBlbmRlbmNpZXNcbmplc3QubW9jaygnY2hpbGRfcHJvY2VzcycpO1xuamVzdC5tb2NrKCdmcycpO1xuXG5jb25zdCBtb2NrRXhlY1N5bmMgPSBleGVjU3luYyBhcyBqZXN0Lk1vY2tlZEZ1bmN0aW9uPHR5cGVvZiBleGVjU3luYz47XG5jb25zdCBfbW9ja1dyaXRlRmlsZVN5bmMgPSB3cml0ZUZpbGVTeW5jIGFzIGplc3QuTW9ja2VkRnVuY3Rpb248dHlwZW9mIHdyaXRlRmlsZVN5bmM+O1xuY29uc3QgbW9ja1JlYWRGaWxlU3luYyA9IHJlYWRGaWxlU3luYyBhcyBqZXN0Lk1vY2tlZEZ1bmN0aW9uPHR5cGVvZiByZWFkRmlsZVN5bmM+O1xuY29uc3QgbW9ja0V4aXN0c1N5bmMgPSBleGlzdHNTeW5jIGFzIGplc3QuTW9ja2VkRnVuY3Rpb248dHlwZW9mIGV4aXN0c1N5bmM+O1xuY29uc3QgX21vY2tNa2RpclN5bmMgPSBta2RpclN5bmMgYXMgamVzdC5Nb2NrZWRGdW5jdGlvbjx0eXBlb2YgbWtkaXJTeW5jPjtcblxuZGVzY3JpYmUoJ0F1dG9tYXRlZCBFcnJvciBSZXNvbHV0aW9uIEludGVncmF0aW9uJywgKCkgPT4ge1xuICBjb25zdCBfdGVzdERpciA9IHBhdGguam9pbih0bXBkaXIoKSwgJ2VzbGludC10ZXN0Jyk7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gICAgbW9ja0V4aXN0c1N5bmMubW9ja1JldHVyblZhbHVlKHRydWUpO1xuICB9KTtcblxuICBkZXNjcmliZSgnRVNMaW50IEF1dG8tRml4IEludGVncmF0aW9uJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBleGVjdXRlIEVTTGludCBhdXRvLWZpeCBzdWNjZXNzZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrTGludE91dHB1dCA9IEpTT04uc3RyaW5naWZ5KFtcbiAgICAgICAge1xuICAgICAgICAgIGZpbGVQYXRoOiAnL3Rlc3QvZmlsZS50cycsXG4gICAgICAgICAgbWVzc2FnZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgcnVsZUlkOiAncHJlZmVyLWNvbnN0JyxcbiAgICAgICAgICAgICAgc2V2ZXJpdHk6IDIsXG4gICAgICAgICAgICAgIG1lc3NhZ2U6ICdQcmVmZXIgY29uc3Qgb3ZlciBsZXQnLFxuICAgICAgICAgICAgICBmaXg6IHtcbiAgICAgICAgICAgICAgICByYW5nZTogWzAsIDNdLFxuICAgICAgICAgICAgICAgIHRleHQ6ICdjb25zdCcsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBydWxlSWQ6ICduby1leHRyYS1zZW1pJyxcbiAgICAgICAgICAgICAgc2V2ZXJpdHk6IDIsXG4gICAgICAgICAgICAgIG1lc3NhZ2U6ICdVbm5lY2Vzc2FyeSBzZW1pY29sb24nLFxuICAgICAgICAgICAgICBmaXg6IHtcbiAgICAgICAgICAgICAgICByYW5nZTogWzEwLCAxMV0sXG4gICAgICAgICAgICAgICAgdGV4dDogJycsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgICAgZml4YWJsZUVycm9yQ291bnQ6IDIsXG4gICAgICAgICAgZml4YWJsZVdhcm5pbmdDb3VudDogMCxcbiAgICAgICAgfSxcbiAgICAgIF0pO1xuXG4gICAgICBtb2NrRXhlY1N5bmMubW9ja1JldHVyblZhbHVlKG1vY2tMaW50T3V0cHV0KTtcblxuICAgICAgLy8gU2ltdWxhdGUgcnVubmluZyBFU0xpbnQgd2l0aCAtLWZpeFxuICAgICAgY29uc3QgY29tbWFuZCA9ICd5YXJuIGxpbnQ6Zml4IC0tZm9ybWF0PWpzb24nO1xuICAgICAgY29uc3QgcmVzdWx0ID0gbW9ja0V4ZWNTeW5jKGNvbW1hbmQsIHsgZW5jb2Rpbmc6ICd1dGY4JyB9KTtcblxuICAgICAgZXhwZWN0KG1vY2tFeGVjU3luYykudG9IYXZlQmVlbkNhbGxlZFdpdGgoY29tbWFuZCwgeyBlbmNvZGluZzogJ3V0ZjgnIH0pO1xuICAgICAgZXhwZWN0KEpTT04ucGFyc2UocmVzdWx0IGFzIHVua25vd24gYXMgc3RyaW5nKVswXS5maXhhYmxlRXJyb3JDb3VudCkudG9CZSgyKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgRVNMaW50IGV4ZWN1dGlvbiBlcnJvcnMgZ3JhY2VmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tFcnJvciA9IG5ldyBFcnJvcignRVNMaW50IGZhaWxlZCcpIGFzIHVua25vd247XG4gICAgICBtb2NrRXJyb3Iuc3Rkb3V0ID0gSlNPTi5zdHJpbmdpZnkoW10pO1xuICAgICAgbW9ja0Vycm9yLnN0YXR1cyA9IDE7XG5cbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge1xuICAgICAgICB0aHJvdyBtb2NrRXJyb3I7XG4gICAgICB9KTtcblxuICAgICAgLy8gU2hvdWxkIGhhbmRsZSB0aGUgZXJyb3Igd2l0aG91dCB0aHJvd2luZ1xuICAgICAgZXhwZWN0KCgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBtb2NrRXhlY1N5bmMoJ3lhcm4gbGludDpmaXgnLCB7IGVuY29kaW5nOiAndXRmOCcgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yOiB1bmtub3duKSB7XG4gICAgICAgICAgLy8gU2ltdWxhdGUgZXJyb3IgaGFuZGxpbmdcbiAgICAgICAgICBpZiAoZXJyb3Iuc3RhdHVzID09PSAxICYmIGVycm9yLnN0ZG91dCkge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnN0ZG91dDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH0pLm5vdC50b1Rocm93KCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgcHJvY2VzcyBtdWx0aXBsZSBmaWxlcyBpbiBiYXRjaCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tCYXRjaE91dHB1dCA9IEpTT04uc3RyaW5naWZ5KFtcbiAgICAgICAge1xuICAgICAgICAgIGZpbGVQYXRoOiAnL3Rlc3QvZmlsZTEudHMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiBbeyBydWxlSWQ6ICdwcmVmZXItY29uc3QnLCBzZXZlcml0eTogMiwgZml4OiB7IHJhbmdlOiBbMCwgM10sIHRleHQ6ICdjb25zdCcgfSB9XSxcbiAgICAgICAgICBmaXhhYmxlRXJyb3JDb3VudDogMSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGZpbGVQYXRoOiAnL3Rlc3QvZmlsZTIudHMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiBbeyBydWxlSWQ6ICduby11bnVzZWQtdmFycycsIHNldmVyaXR5OiAxLCBmaXg6IG51bGwgfV0sXG4gICAgICAgICAgZml4YWJsZUVycm9yQ291bnQ6IDAsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBmaWxlUGF0aDogJy90ZXN0L2ZpbGUzLnRzJyxcbiAgICAgICAgICBtZXNzYWdlczogW10sXG4gICAgICAgICAgZml4YWJsZUVycm9yQ291bnQ6IDAsXG4gICAgICAgIH0sXG4gICAgICBdKTtcblxuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tSZXR1cm5WYWx1ZShtb2NrQmF0Y2hPdXRwdXQpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBKU09OLnBhcnNlKG1vY2tFeGVjU3luYygneWFybiBsaW50OmZpeCAtLWZvcm1hdD1qc29uJywgeyBlbmNvZGluZzogJ3V0ZjgnIH0pIGFzIHVua25vd24gYXMgc3RyaW5nKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9IYXZlTGVuZ3RoKDMpO1xuICAgICAgZXhwZWN0KHJlc3VsdFswXS5maXhhYmxlRXJyb3JDb3VudCkudG9CZSgxKTtcbiAgICAgIGV4cGVjdChyZXN1bHRbMV0uZml4YWJsZUVycm9yQ291bnQpLnRvQmUoMCk7XG4gICAgICBleHBlY3QocmVzdWx0WzJdLmZpeGFibGVFcnJvckNvdW50KS50b0JlKDApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnSW1wb3J0IE9yZ2FuaXphdGlvbiBSZXNvbHV0aW9uJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBmaXggaW1wb3J0IG9yZGVyIHZpb2xhdGlvbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB0ZXN0RmlsZUNvbnRlbnQgPSBgXG4gICAgICAgIGltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbiAgICAgICAgaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG4gICAgICAgIGltcG9ydCB7IGNhbGN1bGF0ZVBsYW5ldGFyeVBvc2l0aW9ucyB9IGZyb20gJ0AvY2FsY3VsYXRpb25zL3BsYW5ldGFyeSc7XG4gICAgICAgIGltcG9ydCBmcyBmcm9tICdmcyc7XG4gICAgICAgIGltcG9ydCB7IEVsZW1lbnRhbFByb3BlcnRpZXMgfSBmcm9tICdAL3R5cGVzL2VsZW1lbnRhbCc7XG4gICAgICBgO1xuXG4gICAgICBjb25zdCBleHBlY3RlZEZpeGVkQ29udGVudCA9IGBcbiAgICAgICAgaW1wb3J0IGZzIGZyb20gJ2ZzJztcbiAgICAgICAgaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG4gICAgICAgIGltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcblxuICAgICAgICBpbXBvcnQgeyBjYWxjdWxhdGVQbGFuZXRhcnlQb3NpdGlvbnMgfSBmcm9tICdAL2NhbGN1bGF0aW9ucy9wbGFuZXRhcnknO1xuICAgICAgICBpbXBvcnQgeyBFbGVtZW50YWxQcm9wZXJ0aWVzIH0gZnJvbSAnQC90eXBlcy9lbGVtZW50YWwnO1xuICAgICAgYDtcblxuICAgICAgbW9ja1JlYWRGaWxlU3luYy5tb2NrUmV0dXJuVmFsdWUodGVzdEZpbGVDb250ZW50KTtcblxuICAgICAgLy8gU2ltdWxhdGUgaW1wb3J0IG9yZ2FuaXphdGlvbiBmaXhcbiAgICAgIGNvbnN0IG1vY2tGaXhlZE91dHB1dCA9IEpTT04uc3RyaW5naWZ5KFtcbiAgICAgICAge1xuICAgICAgICAgIGZpbGVQYXRoOiAnL3Rlc3QvZmlsZS50cycsXG4gICAgICAgICAgbWVzc2FnZXM6IFtdLFxuICAgICAgICAgIG91dHB1dDogZXhwZWN0ZWRGaXhlZENvbnRlbnQsXG4gICAgICAgIH0sXG4gICAgICBdKTtcblxuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tSZXR1cm5WYWx1ZShtb2NrRml4ZWRPdXRwdXQpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBKU09OLnBhcnNlKFxuICAgICAgICBtb2NrRXhlY1N5bmMoJ3lhcm4gbGludDpmaXggLS1maXgtdHlwZSBsYXlvdXQnLCB7IGVuY29kaW5nOiAndXRmOCcgfSkgYXMgdW5rbm93biBhcyBzdHJpbmcsXG4gICAgICApO1xuXG4gICAgICBleHBlY3QocmVzdWx0WzBdLm91dHB1dCkudG9Db250YWluKFwiaW1wb3J0IGZzIGZyb20gJ2ZzJ1wiKTtcbiAgICAgIGV4cGVjdChyZXN1bHRbMF0ub3V0cHV0KS50b0NvbnRhaW4oXCJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1wiKTtcbiAgICAgIGV4cGVjdChyZXN1bHRbMF0ubWVzc2FnZXMpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCByZW1vdmUgZHVwbGljYXRlIGltcG9ydHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB0ZXN0RmlsZUNvbnRlbnQgPSBgXG4gICAgICAgIGltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbiAgICAgICAgaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG4gICAgICAgIGltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JzsgLy8gRHVwbGljYXRlXG4gICAgICAgIGltcG9ydCB7IGNhbGN1bGF0ZVBsYW5ldGFyeVBvc2l0aW9ucyB9IGZyb20gJ0AvY2FsY3VsYXRpb25zL3BsYW5ldGFyeSc7XG4gICAgICBgO1xuXG4gICAgICBjb25zdCBtb2NrRml4ZWRPdXRwdXQgPSBKU09OLnN0cmluZ2lmeShbXG4gICAgICAgIHtcbiAgICAgICAgICBmaWxlUGF0aDogJy90ZXN0L2ZpbGUudHMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiBbXSxcbiAgICAgICAgICBvdXRwdXQ6IHRlc3RGaWxlQ29udGVudC5yZXBsYWNlKC9pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7IFxcL1xcLyBEdXBsaWNhdGVcXG4vLCAnJyksXG4gICAgICAgIH0sXG4gICAgICBdKTtcblxuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tSZXR1cm5WYWx1ZShtb2NrRml4ZWRPdXRwdXQpO1xuICAgICAgbW9ja1JlYWRGaWxlU3luYy5tb2NrUmV0dXJuVmFsdWUodGVzdEZpbGVDb250ZW50KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gSlNPTi5wYXJzZShtb2NrRXhlY1N5bmMoJ3lhcm4gbGludDpmaXgnLCB7IGVuY29kaW5nOiAndXRmOCcgfSkpO1xuXG4gICAgICBleHBlY3QocmVzdWx0WzBdLm91dHB1dCkubm90LnRvQ29udGFpbignLy8gRHVwbGljYXRlJyk7XG4gICAgICBleHBlY3QoKHJlc3VsdFswXS5vdXRwdXQubWF0Y2goL2ltcG9ydC4qZnJvbSAncmVhY3QnL2cpIHx8IFtdKS5sZW5ndGgpLnRvQmVMZXNzVGhhbigzKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBwcmVzZXJ2ZSBhc3Ryb2xvZ2ljYWwgaW1wb3J0IHBhdHRlcm5zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgYXN0cm9sb2dpY2FsSW1wb3J0cyA9IGBcbiAgICAgICAgaW1wb3J0IHsgY2FsY3VsYXRlUGxhbmV0YXJ5UG9zaXRpb25zIH0gZnJvbSAnQC9jYWxjdWxhdGlvbnMvcGxhbmV0YXJ5JztcbiAgICAgICAgaW1wb3J0IHsgdmFsaWRhdGVUcmFuc2l0RGF0ZSB9IGZyb20gJ0AvdXRpbHMvdHJhbnNpdFZhbGlkYXRpb24nO1xuICAgICAgICBpbXBvcnQgeyBGQUxMQkFDS19QT1NJVElPTlMgfSBmcm9tICdAL2RhdGEvcGxhbmV0cy9mYWxsYmFjayc7XG4gICAgICAgIGltcG9ydCB7IEVsZW1lbnRhbFByb3BlcnRpZXMgfSBmcm9tICdAL3R5cGVzL2VsZW1lbnRhbCc7XG4gICAgICBgO1xuXG4gICAgICBtb2NrUmVhZEZpbGVTeW5jLm1vY2tSZXR1cm5WYWx1ZShhc3Ryb2xvZ2ljYWxJbXBvcnRzKTtcblxuICAgICAgY29uc3QgbW9ja0ZpeGVkT3V0cHV0ID0gSlNPTi5zdHJpbmdpZnkoW1xuICAgICAgICB7XG4gICAgICAgICAgZmlsZVBhdGg6ICcvdGVzdC9hc3Ryb2xvZ2ljYWwudHMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiBbXSxcbiAgICAgICAgICBvdXRwdXQ6IGFzdHJvbG9naWNhbEltcG9ydHMsIC8vIFNob3VsZCByZW1haW4gdW5jaGFuZ2VkXG4gICAgICAgIH0sXG4gICAgICBdKTtcblxuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tSZXR1cm5WYWx1ZShtb2NrRml4ZWRPdXRwdXQpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBKU09OLnBhcnNlKG1vY2tFeGVjU3luYygneWFybiBsaW50OmZpeCcsIHsgZW5jb2Rpbmc6ICd1dGY4JyB9KSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHRbMF0ub3V0cHV0KS50b0NvbnRhaW4oJ2NhbGN1bGF0ZVBsYW5ldGFyeVBvc2l0aW9ucycpO1xuICAgICAgZXhwZWN0KHJlc3VsdFswXS5vdXRwdXQpLnRvQ29udGFpbigndmFsaWRhdGVUcmFuc2l0RGF0ZScpO1xuICAgICAgZXhwZWN0KHJlc3VsdFswXS5vdXRwdXQpLnRvQ29udGFpbignRkFMTEJBQ0tfUE9TSVRJT05TJyk7XG4gICAgICBleHBlY3QocmVzdWx0WzBdLm91dHB1dCkudG9Db250YWluKCdFbGVtZW50YWxQcm9wZXJ0aWVzJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdVbnVzZWQgVmFyaWFibGUgUmVzb2x1dGlvbicsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIHVudXNlZCB2YXJpYWJsZSB3YXJuaW5ncycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3RGaWxlQ29udGVudCA9IGBcbiAgICAgICAgZnVuY3Rpb24gY2FsY3VsYXRlRWxlbWVudHMoKSB7XG4gICAgICAgICAgY29uc3QgdW51c2VkVmFyID0gJ3Rlc3QnO1xuICAgICAgICAgIGNvbnN0IHVzZWRWYXIgPSAnYWN0aXZlJztcbiAgICAgICAgICBjb25zdCBfaW50ZW50aW9uYWxseVVudXNlZCA9ICdvayc7XG5cbiAgICAgICAgICByZXR1cm4gdXNlZFZhcjtcbiAgICAgICAgfVxuICAgICAgYDtcblxuICAgICAgY29uc3QgbW9ja0xpbnRPdXRwdXQgPSBKU09OLnN0cmluZ2lmeShbXG4gICAgICAgIHtcbiAgICAgICAgICBmaWxlUGF0aDogJy90ZXN0L2ZpbGUudHMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHJ1bGVJZDogJ0B0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycycsXG4gICAgICAgICAgICAgIHNldmVyaXR5OiAxLFxuICAgICAgICAgICAgICBtZXNzYWdlOiBcIid1bnVzZWRWYXInIGlzIGFzc2lnbmVkIGEgdmFsdWUgYnV0IG5ldmVyIHVzZWQuXCIsXG4gICAgICAgICAgICAgIGxpbmU6IDMsXG4gICAgICAgICAgICAgIGNvbHVtbjogMTUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICBdKTtcblxuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tSZXR1cm5WYWx1ZShtb2NrTGludE91dHB1dCk7XG4gICAgICBtb2NrUmVhZEZpbGVTeW5jLm1vY2tSZXR1cm5WYWx1ZSh0ZXN0RmlsZUNvbnRlbnQpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBKU09OLnBhcnNlKG1vY2tFeGVjU3luYygneWFybiBsaW50IC0tZm9ybWF0PWpzb24nLCB7IGVuY29kaW5nOiAndXRmOCcgfSkgYXMgdW5rbm93biBhcyBzdHJpbmcpO1xuXG4gICAgICBleHBlY3QocmVzdWx0WzBdLm1lc3NhZ2VzKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgICBleHBlY3QocmVzdWx0WzBdLm1lc3NhZ2VzWzBdLnJ1bGVJZCkudG9CZSgnQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzJyk7XG4gICAgICBleHBlY3QocmVzdWx0WzBdLm1lc3NhZ2VzWzBdLm1lc3NhZ2UpLnRvQ29udGFpbigndW51c2VkVmFyJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgcHJlc2VydmUgYXN0cm9sb2dpY2FsIHZhcmlhYmxlIHBhdHRlcm5zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgYXN0cm9sb2dpY2FsQ29kZSA9IGBcbiAgICAgICAgZnVuY3Rpb24gY2FsY3VsYXRlUGxhbmV0YXJ5SW5mbHVlbmNlKCkge1xuICAgICAgICAgIGNvbnN0IHBsYW5ldCA9ICdtYXJzJztcbiAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHsgc2lnbjogJ2NhbmNlcicsIGRlZ3JlZTogMjIuNjMgfTtcbiAgICAgICAgICBjb25zdCBkZWdyZWUgPSBwb3NpdGlvbi5kZWdyZWU7XG4gICAgICAgICAgY29uc3Qgc2lnbiA9IHBvc2l0aW9uLnNpZ247XG4gICAgICAgICAgY29uc3QgVU5VU0VEX2ZhbGxiYWNrID0gRkFMTEJBQ0tfUE9TSVRJT05TO1xuXG4gICAgICAgICAgcmV0dXJuIHsgcGxhbmV0LCBkZWdyZWUgfTsgLy8gc2lnbiBhbmQgVU5VU0VEX2ZhbGxiYWNrIGludGVudGlvbmFsbHkgdW51c2VkXG4gICAgICAgIH1cbiAgICAgIGA7XG5cbiAgICAgIGNvbnN0IG1vY2tMaW50T3V0cHV0ID0gSlNPTi5zdHJpbmdpZnkoW1xuICAgICAgICB7XG4gICAgICAgICAgZmlsZVBhdGg6ICcvdGVzdC9hc3Ryb2xvZ2ljYWwudHMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiBbXSwgLy8gU2hvdWxkIG5vdCByZXBvcnQgZXJyb3JzIGZvciBhc3Ryb2xvZ2ljYWwgcGF0dGVybnNcbiAgICAgICAgfSxcbiAgICAgIF0pO1xuXG4gICAgICBtb2NrRXhlY1N5bmMubW9ja1JldHVyblZhbHVlKG1vY2tMaW50T3V0cHV0KTtcbiAgICAgIG1vY2tSZWFkRmlsZVN5bmMubW9ja1JldHVyblZhbHVlKGFzdHJvbG9naWNhbENvZGUpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBKU09OLnBhcnNlKG1vY2tFeGVjU3luYygneWFybiBsaW50IC0tZm9ybWF0PWpzb24nLCB7IGVuY29kaW5nOiAndXRmOCcgfSkgYXMgdW5rbm93biBhcyBzdHJpbmcpO1xuXG4gICAgICBleHBlY3QocmVzdWx0WzBdLm1lc3NhZ2VzKS50b0hhdmVMZW5ndGgoMCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIGNhbXBhaWduIHN5c3RlbSB2YXJpYWJsZSBwYXR0ZXJucycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGNhbXBhaWduQ29kZSA9IGBcbiAgICAgICAgZnVuY3Rpb24gZXhlY3V0ZUNhbXBhaWduKCkge1xuICAgICAgICAgIGNvbnN0IGNhbXBhaWduID0gJ3R5cGVzY3JpcHQtZWxpbWluYXRpb24nO1xuICAgICAgICAgIGNvbnN0IHByb2dyZXNzID0geyBjb21wbGV0ZWQ6IDUwLCB0b3RhbDogMTAwIH07XG4gICAgICAgICAgY29uc3QgVU5VU0VEX21ldHJpY3MgPSB7IGVycm9yczogMTAsIHdhcm5pbmdzOiAyNSB9O1xuICAgICAgICAgIGNvbnN0IHNhZmV0eSA9IHsgYmFja3VwQ3JlYXRlZDogdHJ1ZSB9O1xuICAgICAgICAgIGNvbnN0IFVOVVNFRF9kZWJ1ZyA9ICdkZWJ1ZyBpbmZvJztcblxuICAgICAgICAgIHJldHVybiB7IGNhbXBhaWduLCBwcm9ncmVzcyB9O1xuICAgICAgICB9XG4gICAgICBgO1xuXG4gICAgICBjb25zdCBtb2NrTGludE91dHB1dCA9IEpTT04uc3RyaW5naWZ5KFtcbiAgICAgICAge1xuICAgICAgICAgIGZpbGVQYXRoOiAnL3Rlc3QvY2FtcGFpZ24udHMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiBbXSwgLy8gU2hvdWxkIG5vdCByZXBvcnQgZXJyb3JzIGZvciBjYW1wYWlnbiBwYXR0ZXJuc1xuICAgICAgICB9LFxuICAgICAgXSk7XG5cbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrUmV0dXJuVmFsdWUobW9ja0xpbnRPdXRwdXQpO1xuICAgICAgbW9ja1JlYWRGaWxlU3luYy5tb2NrUmV0dXJuVmFsdWUoY2FtcGFpZ25Db2RlKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gSlNPTi5wYXJzZShtb2NrRXhlY1N5bmMoJ3lhcm4gbGludCAtLWZvcm1hdD1qc29uJywgeyBlbmNvZGluZzogJ3V0ZjgnIH0pIGFzIHVua25vd24gYXMgc3RyaW5nKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdFswXS5tZXNzYWdlcykudG9IYXZlTGVuZ3RoKDApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnQ29uc29sZSBTdGF0ZW1lbnQgUmVzb2x1dGlvbicsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIGNvbnNvbGUgc3RhdGVtZW50IHdhcm5pbmdzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdGVzdEZpbGVDb250ZW50ID0gYFxuICAgICAgICBmdW5jdGlvbiBkZWJ1Z0NhbGN1bGF0aW9uKCkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdEZWJ1ZyBpbmZvJyk7IC8vIFNob3VsZCBiZSB3YXJuaW5nXG4gICAgICAgICAgY29uc29sZS53YXJuKCdXYXJuaW5nIG1lc3NhZ2UnKTsgLy8gU2hvdWxkIGJlIGFsbG93ZWRcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBtZXNzYWdlJyk7IC8vIFNob3VsZCBiZSBhbGxvd2VkXG4gICAgICAgICAgY29uc29sZS5pbmZvKCdJbmZvIG1lc3NhZ2UnKTsgLy8gU2hvdWxkIGJlIGFsbG93ZWRcbiAgICAgICAgfVxuICAgICAgYDtcblxuICAgICAgY29uc3QgbW9ja0xpbnRPdXRwdXQgPSBKU09OLnN0cmluZ2lmeShbXG4gICAgICAgIHtcbiAgICAgICAgICBmaWxlUGF0aDogJy90ZXN0L2ZpbGUudHMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHJ1bGVJZDogJ25vLWNvbnNvbGUnLFxuICAgICAgICAgICAgICBzZXZlcml0eTogMixcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ1VuZXhwZWN0ZWQgY29uc29sZSBzdGF0ZW1lbnQuJyxcbiAgICAgICAgICAgICAgbGluZTogMyxcbiAgICAgICAgICAgICAgY29sdW1uOiAxMSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIF0pO1xuXG4gICAgICBtb2NrRXhlY1N5bmMubW9ja1JldHVyblZhbHVlKG1vY2tMaW50T3V0cHV0KTtcbiAgICAgIG1vY2tSZWFkRmlsZVN5bmMubW9ja1JldHVyblZhbHVlKHRlc3RGaWxlQ29udGVudCk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IEpTT04ucGFyc2UobW9ja0V4ZWNTeW5jKCd5YXJuIGxpbnQgLS1mb3JtYXQ9anNvbicsIHsgZW5jb2Rpbmc6ICd1dGY4JyB9KSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHRbMF0ubWVzc2FnZXMpLnRvSGF2ZUxlbmd0aCgxKTtcbiAgICAgIGV4cGVjdChyZXN1bHRbMF0ubWVzc2FnZXNbMF0ucnVsZUlkKS50b0JlKCduby1jb25zb2xlJyk7XG4gICAgICBleHBlY3QocmVzdWx0WzBdLm1lc3NhZ2VzWzBdLm1lc3NhZ2UpLnRvQ29udGFpbignY29uc29sZSBzdGF0ZW1lbnQnKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBhbGxvdyBjb25zb2xlIHN0YXRlbWVudHMgaW4gYXN0cm9sb2dpY2FsIGNhbGN1bGF0aW9ucycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGFzdHJvbG9naWNhbENvZGUgPSBgXG4gICAgICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZVBsYW5ldGFyeVBvc2l0aW9ucygpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnQ2FsY3VsYXRpbmcgcGxhbmV0YXJ5IHBvc2l0aW9ucycpO1xuICAgICAgICAgIGNvbnNvbGUuZGVidWcoJ0RlYnVnIGFzdHJvbm9taWNhbCBkYXRhJyk7XG4gICAgICAgICAgY29uc29sZS5pbmZvKCdVc2luZyBmYWxsYmFjayBwb3NpdGlvbnMnKTtcblxuICAgICAgICAgIHJldHVybiBGQUxMQkFDS19QT1NJVElPTlM7XG4gICAgICAgIH1cbiAgICAgIGA7XG5cbiAgICAgIGNvbnN0IG1vY2tMaW50T3V0cHV0ID0gSlNPTi5zdHJpbmdpZnkoW1xuICAgICAgICB7XG4gICAgICAgICAgZmlsZVBhdGg6ICcvdGVzdC9jYWxjdWxhdGlvbnMvcGxhbmV0YXJ5LnRzJyxcbiAgICAgICAgICBtZXNzYWdlczogW10sIC8vIFNob3VsZCBhbGxvdyBjb25zb2xlIGluIGFzdHJvbG9naWNhbCBmaWxlc1xuICAgICAgICB9LFxuICAgICAgXSk7XG5cbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrUmV0dXJuVmFsdWUobW9ja0xpbnRPdXRwdXQpO1xuICAgICAgbW9ja1JlYWRGaWxlU3luYy5tb2NrUmV0dXJuVmFsdWUoYXN0cm9sb2dpY2FsQ29kZSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IEpTT04ucGFyc2UobW9ja0V4ZWNTeW5jKCd5YXJuIGxpbnQgLS1mb3JtYXQ9anNvbicsIHsgZW5jb2Rpbmc6ICd1dGY4JyB9KSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHRbMF0ubWVzc2FnZXMpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBhbGxvdyBjb25zb2xlIHN0YXRlbWVudHMgaW4gY2FtcGFpZ24gc3lzdGVtIGZpbGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY2FtcGFpZ25Db2RlID0gYFxuICAgICAgICBmdW5jdGlvbiBleGVjdXRlQ2FtcGFpZ25QaGFzZSgpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnU3RhcnRpbmcgY2FtcGFpZ24gcGhhc2UnKTtcbiAgICAgICAgICBjb25zb2xlLmluZm8oJ1Byb2dyZXNzOiA1MCUnKTtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ1NhZmV0eSBwcm90b2NvbCBhY3RpdmF0ZWQnKTtcblxuICAgICAgICAgIHJldHVybiB7IHN0YXR1czogJ3J1bm5pbmcnIH07XG4gICAgICAgIH1cbiAgICAgIGA7XG5cbiAgICAgIGNvbnN0IG1vY2tMaW50T3V0cHV0ID0gSlNPTi5zdHJpbmdpZnkoW1xuICAgICAgICB7XG4gICAgICAgICAgZmlsZVBhdGg6ICcvdGVzdC9zZXJ2aWNlcy9jYW1wYWlnbi9leGVjdXRvci50cycsXG4gICAgICAgICAgbWVzc2FnZXM6IFtdLCAvLyBTaG91bGQgYWxsb3cgY29uc29sZSBpbiBjYW1wYWlnbiBmaWxlc1xuICAgICAgICB9LFxuICAgICAgXSk7XG5cbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrUmV0dXJuVmFsdWUobW9ja0xpbnRPdXRwdXQpO1xuICAgICAgbW9ja1JlYWRGaWxlU3luYy5tb2NrUmV0dXJuVmFsdWUoY2FtcGFpZ25Db2RlKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gSlNPTi5wYXJzZShtb2NrRXhlY1N5bmMoJ3lhcm4gbGludCAtLWZvcm1hdD1qc29uJywgeyBlbmNvZGluZzogJ3V0ZjgnIH0pKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdFswXS5tZXNzYWdlcykudG9IYXZlTGVuZ3RoKDApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnVHlwZVNjcmlwdCBFcnJvciBSZXNvbHV0aW9uJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgZXhwbGljaXQgYW55IHR5cGUgZXJyb3JzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdGVzdEZpbGVDb250ZW50ID0gYFxuICAgICAgICBmdW5jdGlvbiBwcm9jZXNzRGF0YShkYXRhOiB1bmtub3duKSB7IC8vIFNob3VsZCBiZSBlcnJvclxuICAgICAgICAgIHJldHVybiBkYXRhLnNvbWVQcm9wZXJ0eTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHByb2Nlc3NBc3Ryb2xvZ2ljYWxEYXRhKGRhdGE6IHVua25vd24pIHsgLy8gTWF5IGJlIGFsbG93ZWQgaW4gYXN0cm9sb2dpY2FsIGZpbGVzXG4gICAgICAgICAgcmV0dXJuIGRhdGEucGxhbmV0YXJ5UG9zaXRpb247XG4gICAgICAgIH1cbiAgICAgIGA7XG5cbiAgICAgIGNvbnN0IG1vY2tMaW50T3V0cHV0ID0gSlNPTi5zdHJpbmdpZnkoW1xuICAgICAgICB7XG4gICAgICAgICAgZmlsZVBhdGg6ICcvdGVzdC9maWxlLnRzJyxcbiAgICAgICAgICBtZXNzYWdlczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBydWxlSWQ6ICdAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55JyxcbiAgICAgICAgICAgICAgc2V2ZXJpdHk6IDIsXG4gICAgICAgICAgICAgIG1lc3NhZ2U6ICdVbmV4cGVjdGVkIGFueS4gU3BlY2lmeSBhIGRpZmZlcmVudCB0eXBlLicsXG4gICAgICAgICAgICAgIGxpbmU6IDIsXG4gICAgICAgICAgICAgIGNvbHVtbjogNDIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICBdKTtcblxuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tSZXR1cm5WYWx1ZShtb2NrTGludE91dHB1dCk7XG4gICAgICBtb2NrUmVhZEZpbGVTeW5jLm1vY2tSZXR1cm5WYWx1ZSh0ZXN0RmlsZUNvbnRlbnQpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBKU09OLnBhcnNlKG1vY2tFeGVjU3luYygneWFybiBsaW50IC0tZm9ybWF0PWpzb24nLCB7IGVuY29kaW5nOiAndXRmOCcgfSkpO1xuXG4gICAgICBleHBlY3QocmVzdWx0WzBdLm1lc3NhZ2VzKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgICBleHBlY3QocmVzdWx0WzBdLm1lc3NhZ2VzWzBdLnJ1bGVJZCkudG9CZSgnQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueScpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSB1bm5lY2Vzc2FyeSBjb25kaXRpb24gd2FybmluZ3MnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB0ZXN0RmlsZUNvbnRlbnQgPSBgXG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrVmFsdWUodmFsdWU/OiBzdHJpbmcpIHtcbiAgICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCkgeyAvLyBNYXkgYmUgdW5uZWNlc3NhcnlcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICBgO1xuXG4gICAgICBjb25zdCBtb2NrTGludE91dHB1dCA9IEpTT04uc3RyaW5naWZ5KFtcbiAgICAgICAge1xuICAgICAgICAgIGZpbGVQYXRoOiAnL3Rlc3QvZmlsZS50cycsXG4gICAgICAgICAgbWVzc2FnZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgcnVsZUlkOiAnQHR5cGVzY3JpcHQtZXNsaW50L25vLXVubmVjZXNzYXJ5LWNvbmRpdGlvbicsXG4gICAgICAgICAgICAgIHNldmVyaXR5OiAxLFxuICAgICAgICAgICAgICBtZXNzYWdlOiAnVW5uZWNlc3NhcnkgY29uZGl0aW9uYWwsIHZhbHVlIGlzIGFsd2F5cyB0cnV0aHkuJyxcbiAgICAgICAgICAgICAgbGluZTogMyxcbiAgICAgICAgICAgICAgY29sdW1uOiA3LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgXSk7XG5cbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrUmV0dXJuVmFsdWUobW9ja0xpbnRPdXRwdXQpO1xuICAgICAgbW9ja1JlYWRGaWxlU3luYy5tb2NrUmV0dXJuVmFsdWUodGVzdEZpbGVDb250ZW50KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gSlNPTi5wYXJzZShtb2NrRXhlY1N5bmMoJ3lhcm4gbGludCAtLWZvcm1hdD1qc29uJywgeyBlbmNvZGluZzogJ3V0ZjgnIH0pKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdFswXS5tZXNzYWdlcykudG9IYXZlTGVuZ3RoKDEpO1xuICAgICAgZXhwZWN0KHJlc3VsdFswXS5tZXNzYWdlc1swXS5ydWxlSWQpLnRvQmUoJ0B0eXBlc2NyaXB0LWVzbGludC9uby11bm5lY2Vzc2FyeS1jb25kaXRpb24nKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1JlYWN0IEhvb2tzIFJlc29sdXRpb24nLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBleGhhdXN0aXZlIGRlcHMgd2FybmluZ3MnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZWFjdENvZGUgPSBgXG4gICAgICAgIGltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5cbiAgICAgICAgZnVuY3Rpb24gQ29tcG9uZW50KCkge1xuICAgICAgICAgIGNvbnN0IFtjb3VudCwgc2V0Q291bnRdID0gdXNlU3RhdGUoMCk7XG4gICAgICAgICAgY29uc3QgW25hbWUsIHNldE5hbWVdID0gdXNlU3RhdGUoJycpO1xuXG4gICAgICAgICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGNvdW50LCBuYW1lKTtcbiAgICAgICAgICB9LCBbY291bnRdKTsgLy8gTWlzc2luZyAnbmFtZScgaW4gZGVwZW5kZW5jaWVzXG5cbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgYDtcblxuICAgICAgY29uc3QgbW9ja0xpbnRPdXRwdXQgPSBKU09OLnN0cmluZ2lmeShbXG4gICAgICAgIHtcbiAgICAgICAgICBmaWxlUGF0aDogJy90ZXN0L0NvbXBvbmVudC50c3gnLFxuICAgICAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHJ1bGVJZDogJ3JlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwcycsXG4gICAgICAgICAgICAgIHNldmVyaXR5OiAxLFxuICAgICAgICAgICAgICBtZXNzYWdlOiBcIlJlYWN0IEhvb2sgdXNlRWZmZWN0IGhhcyBhIG1pc3NpbmcgZGVwZW5kZW5jeTogJ25hbWUnLlwiLFxuICAgICAgICAgICAgICBsaW5lOiA5LFxuICAgICAgICAgICAgICBjb2x1bW46IDcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICBdKTtcblxuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tSZXR1cm5WYWx1ZShtb2NrTGludE91dHB1dCk7XG4gICAgICBtb2NrUmVhZEZpbGVTeW5jLm1vY2tSZXR1cm5WYWx1ZShyZWFjdENvZGUpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBKU09OLnBhcnNlKG1vY2tFeGVjU3luYygneWFybiBsaW50IC0tZm9ybWF0PWpzb24nLCB7IGVuY29kaW5nOiAndXRmOCcgfSkpO1xuXG4gICAgICBleHBlY3QocmVzdWx0WzBdLm1lc3NhZ2VzKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgICBleHBlY3QocmVzdWx0WzBdLm1lc3NhZ2VzWzBdLnJ1bGVJZCkudG9CZSgncmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzJyk7XG4gICAgICBleHBlY3QocmVzdWx0WzBdLm1lc3NhZ2VzWzBdLm1lc3NhZ2UpLnRvQ29udGFpbignbWlzc2luZyBkZXBlbmRlbmN5Jyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIGN1c3RvbSBob29rcyBpbiBhc3Ryb2xvZ2ljYWwgY29tcG9uZW50cycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGFzdHJvbG9naWNhbFJlYWN0Q29kZSA9IGBcbiAgICAgICAgaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuICAgICAgICBpbXBvcnQgeyB1c2VSZWNvaWxWYWx1ZSB9IGZyb20gJ3JlY29pbCc7XG4gICAgICAgIGltcG9ydCB7IHVzZVBsYW5ldGFyeVBvc2l0aW9ucyB9IGZyb20gJ0AvaG9va3MvdXNlUGxhbmV0YXJ5UG9zaXRpb25zJztcblxuICAgICAgICBmdW5jdGlvbiBBc3Ryb2xvZ2ljYWxDb21wb25lbnQoKSB7XG4gICAgICAgICAgY29uc3QgcG9zaXRpb25zID0gdXNlUGxhbmV0YXJ5UG9zaXRpb25zKCk7XG4gICAgICAgICAgY29uc3QgY3VycmVudERhdGUgPSB1c2VSZWNvaWxWYWx1ZShjdXJyZW50RGF0ZVN0YXRlKTtcblxuICAgICAgICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnUGxhbmV0YXJ5IHBvc2l0aW9ucyB1cGRhdGVkJywgcG9zaXRpb25zKTtcbiAgICAgICAgICB9LCBbcG9zaXRpb25zXSk7IC8vIFNob3VsZCBiZSB2YWxpZFxuXG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIGA7XG5cbiAgICAgIGNvbnN0IG1vY2tMaW50T3V0cHV0ID0gSlNPTi5zdHJpbmdpZnkoW1xuICAgICAgICB7XG4gICAgICAgICAgZmlsZVBhdGg6ICcvdGVzdC9Bc3Ryb2xvZ2ljYWxDb21wb25lbnQudHN4JyxcbiAgICAgICAgICBtZXNzYWdlczogW10sIC8vIFNob3VsZCBoYW5kbGUgY3VzdG9tIGhvb2tzIGNvcnJlY3RseVxuICAgICAgICB9LFxuICAgICAgXSk7XG5cbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrUmV0dXJuVmFsdWUobW9ja0xpbnRPdXRwdXQpO1xuICAgICAgbW9ja1JlYWRGaWxlU3luYy5tb2NrUmV0dXJuVmFsdWUoYXN0cm9sb2dpY2FsUmVhY3RDb2RlKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gSlNPTi5wYXJzZShtb2NrRXhlY1N5bmMoJ3lhcm4gbGludCAtLWZvcm1hdD1qc29uJywgeyBlbmNvZGluZzogJ3V0ZjgnIH0pKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdFswXS5tZXNzYWdlcykudG9IYXZlTGVuZ3RoKDApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnRXJyb3IgUmVzb2x1dGlvbiBXb3JrZmxvdycsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgZXhlY3V0ZSBjb21wbGV0ZSBlcnJvciByZXNvbHV0aW9uIHdvcmtmbG93JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgd29ya2Zsb3dTdGVwcyA9IFtcbiAgICAgICAgJ3lhcm4gbGludCAtLWZvcm1hdD1qc29uJywgLy8gSW5pdGlhbCBhbmFseXNpc1xuICAgICAgICAneWFybiBsaW50OmZpeCcsIC8vIEF1dG8tZml4XG4gICAgICAgICd5YXJuIGxpbnQ6Zml4IC0tZml4LXR5cGUgbGF5b3V0JywgLy8gSW1wb3J0IG9yZ2FuaXphdGlvblxuICAgICAgICAneWFybiBsaW50IC0tZm9ybWF0PWpzb24nLCAvLyBGaW5hbCB2ZXJpZmljYXRpb25cbiAgICAgIF07XG5cbiAgICAgIGNvbnN0IG1vY2tPdXRwdXRzID0gW1xuICAgICAgICBKU09OLnN0cmluZ2lmeShbeyBmaWxlUGF0aDogJy90ZXN0L2ZpbGUudHMnLCBtZXNzYWdlczogW3sgcnVsZUlkOiAncHJlZmVyLWNvbnN0Jywgc2V2ZXJpdHk6IDIgfV0gfV0pLFxuICAgICAgICAnJywgLy8gRml4IG91dHB1dFxuICAgICAgICAnJywgLy8gTGF5b3V0IGZpeCBvdXRwdXRcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkoW3sgZmlsZVBhdGg6ICcvdGVzdC9maWxlLnRzJywgbWVzc2FnZXM6IFtdIH1dKSwgLy8gQ2xlYW4gcmVzdWx0XG4gICAgICBdO1xuXG4gICAgICBtb2NrRXhlY1N5bmNcbiAgICAgICAgLm1vY2tSZXR1cm5WYWx1ZU9uY2UobW9ja091dHB1dHNbMF0pXG4gICAgICAgIC5tb2NrUmV0dXJuVmFsdWVPbmNlKG1vY2tPdXRwdXRzWzFdKVxuICAgICAgICAubW9ja1JldHVyblZhbHVlT25jZShtb2NrT3V0cHV0c1syXSlcbiAgICAgICAgLm1vY2tSZXR1cm5WYWx1ZU9uY2UobW9ja091dHB1dHNbM10pO1xuXG4gICAgICAvLyBFeGVjdXRlIHdvcmtmbG93XG4gICAgICB3b3JrZmxvd1N0ZXBzLmZvckVhY2goKHN0ZXAsIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG1vY2tFeGVjU3luYyhzdGVwLCB7IGVuY29kaW5nOiAndXRmOCcgfSkgYXMgdW5rbm93biBhcyBzdHJpbmc7XG4gICAgICAgIGlmIChpbmRleCA9PT0gMCB8fCBpbmRleCA9PT0gMykge1xuICAgICAgICAgIC8vIEFuYWx5c2lzIHN0ZXBzIHNob3VsZCByZXR1cm4gSlNPTlxuICAgICAgICAgIGV4cGVjdCgoKSA9PiBKU09OLnBhcnNlKHJlc3VsdCBhcyB1bmtub3duIGFzIHN0cmluZykpLm5vdC50b1Rocm93KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QobW9ja0V4ZWNTeW5jKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoNCk7XG5cbiAgICAgIC8vIFZlcmlmeSBmaW5hbCByZXN1bHQgaXMgY2xlYW5cbiAgICAgIGNvbnN0IGZpbmFsUmVzdWx0ID0gSlNPTi5wYXJzZShtb2NrT3V0cHV0c1szXSk7XG4gICAgICBleHBlY3QoZmluYWxSZXN1bHRbMF0ubWVzc2FnZXMpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgcGFydGlhbCByZXNvbHV0aW9uIGdyYWNlZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBwYXJ0aWFsUmVzb2x1dGlvbk91dHB1dCA9IEpTT04uc3RyaW5naWZ5KFtcbiAgICAgICAge1xuICAgICAgICAgIGZpbGVQYXRoOiAnL3Rlc3QvZmlsZS50cycsXG4gICAgICAgICAgbWVzc2FnZXM6IFtcbiAgICAgICAgICAgIHsgcnVsZUlkOiAnbm8tdW51c2VkLXZhcnMnLCBzZXZlcml0eTogMSwgZml4OiBudWxsIH0sIC8vIE5vdCBhdXRvLWZpeGFibGVcbiAgICAgICAgICAgIHsgcnVsZUlkOiAnQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueScsIHNldmVyaXR5OiAyLCBmaXg6IG51bGwgfSwgLy8gUmVxdWlyZXMgbWFudWFsIGZpeFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICBdKTtcblxuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tSZXR1cm5WYWx1ZShwYXJ0aWFsUmVzb2x1dGlvbk91dHB1dCk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IEpTT04ucGFyc2UobW9ja0V4ZWNTeW5jKCd5YXJuIGxpbnQgLS1mb3JtYXQ9anNvbicsIHsgZW5jb2Rpbmc6ICd1dGY4JyB9KSBhcyB1bmtub3duIGFzIHN0cmluZyk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHRbMF0ubWVzc2FnZXMpLnRvSGF2ZUxlbmd0aCgyKTtcbiAgICAgIGV4cGVjdChyZXN1bHRbMF0ubWVzc2FnZXMuZXZlcnkoKG1zZzogdW5rbm93bikgPT4gbXNnLmZpeCA9PT0gbnVsbCkpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgcHJlc2VydmUgZmlsZSBzYWZldHkgZHVyaW5nIHJlc29sdXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBzYWZldHlDaGVja3MgPSBbXG4gICAgICAgICdnaXQgc3RhdHVzIC0tcG9yY2VsYWluJywgLy8gQ2hlY2sgZm9yIHVuY29tbWl0dGVkIGNoYW5nZXNcbiAgICAgICAgJ3lhcm4gYnVpbGQnLCAvLyBWZXJpZnkgYnVpbGQgc3RpbGwgd29ya3NcbiAgICAgICAgJ3lhcm4gdGVzdCAtLXBhc3NXaXRoTm9UZXN0cycsIC8vIFZlcmlmeSB0ZXN0cyBzdGlsbCBwYXNzXG4gICAgICBdO1xuXG4gICAgICBtb2NrRXhlY1N5bmNcbiAgICAgICAgLm1vY2tSZXR1cm5WYWx1ZU9uY2UoJycpIC8vIENsZWFuIGdpdCBzdGF0dXNcbiAgICAgICAgLm1vY2tSZXR1cm5WYWx1ZU9uY2UoJycpIC8vIFN1Y2Nlc3NmdWwgYnVpbGRcbiAgICAgICAgLm1vY2tSZXR1cm5WYWx1ZU9uY2UoJ1Rlc3RzIHBhc3NlZCcpOyAvLyBTdWNjZXNzZnVsIHRlc3RzXG5cbiAgICAgIHNhZmV0eUNoZWNrcy5mb3JFYWNoKGNoZWNrID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbW9ja0V4ZWNTeW5jKGNoZWNrLCB7IGVuY29kaW5nOiAndXRmOCcgfSk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KG1vY2tFeGVjU3luYykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDMpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9