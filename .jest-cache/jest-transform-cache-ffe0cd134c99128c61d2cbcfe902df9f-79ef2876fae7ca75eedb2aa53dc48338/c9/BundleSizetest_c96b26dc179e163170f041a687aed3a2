1acf02a91a0d6d78818ee28bd135402b
"use strict";
/**
 * Performance Tests for Bundle Size Regression Testing
 * Perfect Codebase Campaign - Bundle Size Performance Testing
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock dependencies
jest.mock('child_process');
jest.mock('fs');
const child_process_1 = require("child_process");
const fs = __importStar(require("fs"));
const campaign_1 = require("../../../../types/campaign");
const CampaignController_1 = require("../../CampaignController");
const ProgressTracker_1 = require("../../ProgressTracker");
const mockExecSync = child_process_1.execSync;
const mockFs = fs;
describe('Bundle Size Performance Tests', () => {
    let progressTracker;
    let campaignController;
    let mockConfig;
    beforeEach(() => {
        const safetySettings = {
            maxFilesPerBatch: 25,
            buildValidationFrequency: 5,
            testValidationFrequency: 10,
            corruptionDetectionEnabled: true,
            automaticRollbackEnabled: true,
            stashRetentionDays: 7,
        };
        mockConfig = {
            phases: [
                {
                    id: 'bundle-test-phase',
                    name: 'Bundle Test Phase',
                    description: 'Phase for bundle size testing',
                    tools: [
                        {
                            scriptPath: 'scripts/bundle/optimize-script.js',
                            parameters: { optimizeBundle: true },
                            batchSize: 50,
                            safetyLevel: campaign_1.SafetyLevel.MEDIUM,
                        },
                    ],
                    successCriteria: { buildTime: 10 },
                    safetyCheckpoints: [],
                },
            ],
            safetySettings,
            progressTargets: { typeScriptErrors: 0, lintingWarnings: 0, buildTime: 10, enterpriseSystems: 200 },
            toolConfiguration: {
                enhancedErrorFixer: 'scripts/typescript-fixes/fix-typescript-errors-enhanced-v3.js',
                explicitAnyFixer: 'scripts/typescript-fixes/fix-explicit-any-systematic.js',
                unusedVariablesFixer: 'scripts/typescript-fixes/fix-unused-variables-enhanced.js',
                consoleStatementFixer: 'scripts/lint-fixes/fix-console-statements-only.js',
            },
        };
        progressTracker = new ProgressTracker_1.ProgressTracker();
        campaignController = new CampaignController_1.CampaignController(mockConfig);
        // Reset mocks
        jest.clearAllMocks();
        // Default mock implementations
        mockExecSync.mockReturnValue('');
        mockFs.existsSync.mockReturnValue(true);
    });
    describe('Bundle Size Validation', () => {
        it('should validate bundle size under 420kB target', async () => {
            // Mock optimal bundle size
            mockFs.existsSync.mockImplementation(path => {
                return path === '.next' || path === 'dist';
            });
            mockExecSync.mockImplementation(command => {
                const cmd = command.toString();
                if (cmd.includes('du -sk .next')) {
                    return '300'; // 300kB
                }
                if (cmd.includes('du -sk dist')) {
                    return '100'; // 100kB
                }
                return '';
            });
            const bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(400); // 300 + 100 = 400kB
            expect(bundleSize).toBeLessThan(420); // Under 420kB target
        });
        it('should detect bundle size regression', async () => {
            // Mock bundle size that exceeds target
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation(command => {
                if (command.toString().includes('du -sk')) {
                    return '450'; // 450kB - exceeds 420kB target
                }
                return '';
            });
            const bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(450);
            expect(bundleSize).toBeGreaterThan(420); // Exceeds target
        });
        it('should handle missing build directories', async () => {
            mockFs.existsSync.mockReturnValue(false);
            const bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(0); // No build directories found
        });
        it('should track bundle size trends over campaign execution', async () => {
            const bundleSizes = [];
            let optimizationStep = 0;
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation(command => {
                if (command.toString().includes('du -sk')) {
                    optimizationStep++;
                    // Simulate bundle size optimization over time
                    const baseSize = 500; // Start with large bundle
                    const optimization = Math.min(100, optimizationStep * 20); // Up to 100kB reduction
                    return Math.max(350, baseSize - optimization).toString();
                }
                return '';
            });
            // Collect bundle sizes over multiple measurements
            for (let i = 0; i < 6; i++) {
                const bundleSize = await progressTracker.getBundleSize();
                bundleSizes.push(bundleSize);
            }
            expect(bundleSizes.length).toBe(6);
            // Bundle size should decrease over time (optimization)
            const firstSize = bundleSizes[0];
            const lastSize = bundleSizes[bundleSizes.length - 1];
            expect(lastSize).toBeLessThan(firstSize);
            expect(lastSize).toBeLessThan(420); // Should reach target
        });
    });
    describe('Bundle Composition Analysis', () => {
        it('should analyze bundle composition across different build outputs', async () => {
            const buildOutputs = [
                { dir: '.next', expectedSize: 250 },
                { dir: 'dist', expectedSize: 120 },
                { dir: 'build', expectedSize: 50 },
            ];
            mockFs.existsSync.mockImplementation(path => {
                return buildOutputs.some(output => output.dir === path);
            });
            mockExecSync.mockImplementation(command => {
                const cmd = command.toString();
                for (const output of buildOutputs) {
                    if (cmd.includes(`du -sk ${output.dir}`)) {
                        return output.expectedSize.toString();
                    }
                }
                return '';
            });
            const bundleSize = await progressTracker.getBundleSize();
            const expectedTotal = buildOutputs.reduce((sum, output) => sum + output.expectedSize, 0);
            expect(bundleSize).toBe(expectedTotal); // 250 + 120 + 50 = 420kB
            expect(bundleSize).toBeLessThanOrEqual(420); // At target limit
        });
        it('should handle partial build outputs', async () => {
            // Only some build directories exist
            mockFs.existsSync.mockImplementation(path => {
                return path === '.next'; // Only .next exists
            });
            mockExecSync.mockImplementation(command => {
                if (command.toString().includes('du -sk .next')) {
                    return '380'; // 380kB
                }
                return '';
            });
            const bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(380);
            expect(bundleSize).toBeLessThan(420); // Under target
        });
        it('should detect bundle bloat in specific directories', async () => {
            const bloatedBuild = {
                '.next': 350,
                dist: 200,
                build: 50, // Normal size
            };
            mockFs.existsSync.mockImplementation(path => {
                return Object.keys(bloatedBuild).includes(path);
            });
            mockExecSync.mockImplementation(command => {
                const cmd = command.toString();
                for (const [dir, size] of Object.entries(bloatedBuild)) {
                    if (cmd.includes(`du -sk ${dir}`)) {
                        return size.toString();
                    }
                }
                return '';
            });
            const bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(600); // 350 + 200 + 50 = 600kB
            expect(bundleSize).toBeGreaterThan(420); // Exceeds target due to bloat
        });
    });
    describe('Bundle Optimization Performance', () => {
        it('should validate lazy loading impact on bundle size', async () => {
            let lazyLoadingEnabled = false;
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation(command => {
                if (command.toString().includes('du -sk')) {
                    // Lazy loading should reduce main bundle size
                    return lazyLoadingEnabled ? '320' : '450';
                }
                return '';
            });
            // Before lazy loading
            let bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(450);
            expect(bundleSize).toBeGreaterThan(420); // Exceeds target
            // After enabling lazy loading
            lazyLoadingEnabled = true;
            bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(320);
            expect(bundleSize).toBeLessThan(420); // Under target
        });
        it('should validate tree shaking effectiveness', async () => {
            let treeShakingEnabled = false;
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation(command => {
                if (command.toString().includes('du -sk')) {
                    // Tree shaking should remove unused code
                    return treeShakingEnabled ? '380' : '480';
                }
                return '';
            });
            // Before tree shaking
            let bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(480);
            expect(bundleSize).toBeGreaterThan(420); // Exceeds target
            // After enabling tree shaking
            treeShakingEnabled = true;
            bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(380);
            expect(bundleSize).toBeLessThan(420); // Under target
        });
        it('should validate code splitting impact', async () => {
            let codeSplittingEnabled = false;
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation(command => {
                if (command.toString().includes('du -sk')) {
                    if (codeSplittingEnabled) {
                        // Code splitting creates multiple smaller bundles
                        // Main bundle should be smaller
                        return '280';
                    }
                    else {
                        // Single large bundle
                        return '440';
                    }
                }
                return '';
            });
            // Before code splitting
            let bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(440);
            expect(bundleSize).toBeGreaterThan(420); // Exceeds target
            // After enabling code splitting
            codeSplittingEnabled = true;
            bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(280);
            expect(bundleSize).toBeLessThan(420); // Well under target
        });
        it('should validate compression effectiveness', async () => {
            let compressionEnabled = false;
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation(command => {
                if (command.toString().includes('du -sk')) {
                    // Compression should reduce bundle size significantly
                    return compressionEnabled ? '300' : '500';
                }
                return '';
            });
            // Before compression
            let bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(500);
            expect(bundleSize).toBeGreaterThan(420); // Exceeds target
            // After enabling compression
            compressionEnabled = true;
            bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(300);
            expect(bundleSize).toBeLessThan(420); // Well under target
        });
    });
    describe('Bundle Size Regression Testing', () => {
        it('should detect bundle size regression during campaign', async () => {
            const phase = mockConfig.phases[0];
            let executionCount = 0;
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation(command => {
                if (command.toString().includes('du -sk')) {
                    executionCount++;
                    // Simulate bundle size regression over time
                    const baseSize = 350;
                    const regression = executionCount * 25; // 25kB increase per execution
                    return (baseSize + regression).toString();
                }
                return '';
            });
            const bundleSizes = [];
            // Execute phase multiple times to simulate regression
            for (let i = 0; i < 4; i++) {
                await campaignController.executePhase(phase);
                const bundleSize = await progressTracker.getBundleSize();
                bundleSizes.push(bundleSize);
            }
            expect(bundleSizes.length).toBe(4);
            // Should detect increasing bundle size (regression)
            const firstSize = bundleSizes[0];
            const lastSize = bundleSizes[bundleSizes.length - 1];
            expect(lastSize).toBeGreaterThan(firstSize);
            expect(lastSize).toBeGreaterThan(420); // Should exceed target
        });
        it('should validate bundle size improvements during optimization', async () => {
            const phase = mockConfig.phases[0];
            let optimizationStep = 0;
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation(command => {
                if (command.toString().includes('du -sk')) {
                    optimizationStep++;
                    // Simulate bundle size optimization
                    const baseSize = 500;
                    const optimization = optimizationStep * 30; // 30kB reduction per step
                    return Math.max(320, baseSize - optimization).toString();
                }
                return '';
            });
            const bundleSizes = [];
            // Execute optimization phases
            for (let i = 0; i < 5; i++) {
                await campaignController.executePhase(phase);
                const bundleSize = await progressTracker.getBundleSize();
                bundleSizes.push(bundleSize);
            }
            expect(bundleSizes.length).toBe(5);
            // Should show decreasing bundle size (optimization)
            const firstSize = bundleSizes[0];
            const lastSize = bundleSizes[bundleSizes.length - 1];
            expect(lastSize).toBeLessThan(firstSize);
            expect(lastSize).toBeLessThan(420); // Should be under target
        });
        it('should track bundle size across different optimization strategies', async () => {
            const optimizationStrategies = [
                { name: 'baseline', expectedSize: 480 },
                { name: 'minification', expectedSize: 420 },
                { name: 'tree-shaking', expectedSize: 380 },
                { name: 'code-splitting', expectedSize: 340 },
                { name: 'compression', expectedSize: 300 },
            ];
            const results = [];
            for (const strategy of optimizationStrategies) {
                mockFs.existsSync.mockReturnValue(true);
                mockExecSync.mockImplementation(command => {
                    if (command.toString().includes('du -sk')) {
                        return strategy.expectedSize.toString();
                    }
                    return '';
                });
                const bundleSize = await progressTracker.getBundleSize();
                results.push({
                    strategy: strategy.name,
                    size: bundleSize,
                    underTarget: bundleSize < 420,
                });
            }
            expect(results.length).toBe(5);
            // Baseline should exceed target
            expect(results[0].underTarget).toBe(false);
            expect(results[0].size).toBe(480);
            // Progressive optimization should reduce bundle size
            for (let i = 1; i < results.length; i++) {
                expect(results[i].size).toBeLessThan(results[i - 1].size);
            }
            // Final optimizations should be under target
            expect(results[results.length - 1].underTarget).toBe(true);
            expect(results[results.length - 1].size).toBe(300);
        });
    });
    describe('Bundle Size Performance Benchmarks', () => {
        it('should benchmark bundle analysis performance', async () => {
            const analysisTimes = [];
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation(command => {
                if (command.toString().includes('du -sk')) {
                    const startTime = Date.now();
                    // Simulate bundle analysis time
                    const delay = 20 + Math.random() * 30; // 20-50ms
                    const endTime = startTime + delay;
                    while (Date.now() < endTime) {
                        // Busy wait
                    }
                    analysisTimes.push(Date.now() - startTime);
                    return '400';
                }
                return '';
            });
            // Perform multiple bundle size analyses
            for (let i = 0; i < 10; i++) {
                await progressTracker.getBundleSize();
            }
            expect(analysisTimes.length).toBe(10);
            expect(analysisTimes.every(time => time > 0)).toBe(true);
            // Average analysis time should be reasonable
            const averageTime = analysisTimes.reduce((sum, time) => sum + time, 0) / analysisTimes.length;
            expect(averageTime).toBeLessThan(100); // Should be under 100ms
        });
        it('should handle large bundle analysis efficiently', async () => {
            // Mock very large bundle
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation(command => {
                if (command.toString().includes('du -sk')) {
                    // Simulate longer analysis time for large bundle
                    const delay = 50; // 50ms for large bundle
                    const endTime = Date.now() + delay;
                    while (Date.now() < endTime) {
                        // Busy wait
                    }
                    return '2000'; // 2MB bundle - very large
                }
                return '';
            });
            const startTime = Date.now();
            const bundleSize = await progressTracker.getBundleSize();
            const analysisTime = Date.now() - startTime;
            expect(bundleSize).toBe(2000);
            expect(bundleSize).toBeGreaterThan(420); // Significantly exceeds target
            expect(analysisTime).toBeLessThan(200); // Should still be reasonably fast
        });
        it('should benchmark concurrent bundle analyses', async () => {
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation(command => {
                if (command.toString().includes('du -sk')) {
                    // Simulate concurrent analysis
                    const delay = 30 + Math.random() * 20; // 30-50ms
                    const endTime = Date.now() + delay;
                    while (Date.now() < endTime) {
                        // Busy wait
                    }
                    return '400';
                }
                return '';
            });
            // Run concurrent bundle size analyses
            const promises = Array.from({ length: 5 }, () => progressTracker.getBundleSize());
            const startTime = Date.now();
            const results = await Promise.all(promises);
            const totalTime = Date.now() - startTime;
            expect(results.length).toBe(5);
            expect(results.every(size => size === 400)).toBe(true);
            expect(totalTime).toBeLessThan(500); // Should complete efficiently
        });
    });
    describe('Bundle Size Monitoring Integration', () => {
        it('should integrate bundle size monitoring with campaign execution', async () => {
            const phase = mockConfig.phases[0];
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation(command => {
                if (command.toString().includes('du -sk')) {
                    return '390'; // Under target
                }
                return '';
            });
            // Mock campaign execution with bundle monitoring
            jest.spyOn(campaignController, 'getCurrentMetrics').mockImplementation(async () => {
                const bundleSize = await progressTracker.getBundleSize();
                return {
                    typeScriptErrors: { current: 86, target: 0, reduction: 0, percentage: 0 },
                    lintingWarnings: { current: 4506, target: 0, reduction: 0, percentage: 0 },
                    buildPerformance: { currentTime: 8.5, targetTime: 10, cacheHitRate: 0.8, memoryUsage: 45 },
                    enterpriseSystems: { current: 0, target: 200, transformedExports: 0 },
                    bundleSize: bundleSize, // Additional bundle size tracking
                };
            });
            const result = await campaignController.executePhase(phase);
            expect(result.success).toBe(true);
            // Verify bundle size is monitored
            const bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(390);
            expect(bundleSize).toBeLessThan(420);
        });
        it('should alert on bundle size threshold violations', async () => {
            const thresholds = {
                warning: 400,
                critical: 420, // 420kB critical threshold
            };
            const testSizes = [350, 410, 450]; // Under warning, over warning, over critical
            const alerts = [];
            for (const testSize of testSizes) {
                mockFs.existsSync.mockReturnValue(true);
                mockExecSync.mockImplementation(command => {
                    if (command.toString().includes('du -sk')) {
                        return testSize.toString();
                    }
                    return '';
                });
                const bundleSize = await progressTracker.getBundleSize();
                if (bundleSize > thresholds.critical) {
                    alerts.push({ size: bundleSize, level: 'critical' });
                }
                else if (bundleSize > thresholds.warning) {
                    alerts.push({ size: bundleSize, level: 'warning' });
                }
            }
            expect(alerts.length).toBe(2); // Should have warning and critical alerts
            expect(alerts[0].level).toBe('warning');
            expect(alerts[0].size).toBe(410);
            expect(alerts[1].level).toBe('critical');
            expect(alerts[1].size).toBe(450);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,