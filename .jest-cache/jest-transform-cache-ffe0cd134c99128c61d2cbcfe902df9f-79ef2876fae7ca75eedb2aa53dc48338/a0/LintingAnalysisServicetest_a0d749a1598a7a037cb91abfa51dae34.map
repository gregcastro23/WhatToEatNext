{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/linting/__tests__/LintingAnalysisService.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/linting/__tests__/LintingAnalysisService.test.ts"],"sourcesContent":["/**\n * Tests for LintingAnalysisService\n */\n\n// Mock all external dependencies first\njest.mock('child_process');\njest.mock('fs');\njest.mock('path');\n\nimport { LintingAnalysisService } from '../LintingAnalysisService';\n\n// Mock child_process to prevent actual ESLint execution during tests\njest.mock('child_process', () => ({\n  execSync: jest.fn().mockReturnValue(JSON.stringify([\n    {\n      filePath: '/test/src/App.tsx',\n      messages: [\n        {\n          ruleId: 'import/order',\n          severity: 2,\n          message: 'Import order is incorrect',\n          line: 1,\n          column: 1,\n          fix: { range: [0, 10], text: 'fixed import' }\n        },\n        {\n          ruleId: '@typescript-eslint/no-explicit-any',\n          severity: 1,\n          message: 'Unexpected any type',\n          line: 5,\n          column: 10\n        }\n      ]\n    }\n  ]))\n}));\n\n// Mock fs to prevent actual file system access during tests\njest.mock('fs', () => ({\n  existsSync: jest.fn().mockReturnValue(true),\n  readFileSync: jest.fn().mockReturnValue(`\n    import React from 'react';\n    import { useState } from 'react';\n    \n    const component: any = {};\n    \n    function TestComponent() {\n      const [state, setState] = useState(0);\n      return <div>Test</div>;\n    }\n  `),\n  statSync: jest.fn().mockReturnValue({ mtime: new Date() })\n}));\n\ndescribe('LintingAnalysisService', () => {\n  let service: LintingAnalysisService;\n\n  beforeEach(() => {\n    service = new LintingAnalysisService('/test');\n    // Clear mocks\n    jest.clearAllMocks();\n  });\n\n  describe('Quick Analysis', () => {\n    it('should perform quick analysis without errors', async () => {\n      const result = await service.performQuickAnalysis();\n      \n      expect(result).toBeDefined();\n      expect(result.summary).toBeDefined();\n      expect(result.summary.totalIssues).toBeGreaterThan(0);\n      expect(result.topIssues).toBeDefined();\n      expect(result.quickWins).toBeDefined();\n      expect(result.criticalIssues).toBeDefined();\n    });\n\n    it('should identify auto-fixable issues as quick wins', async () => {\n      const result = await service.performQuickAnalysis();\n      \n      // Should have at least one quick win (import/order is auto-fixable)\n      expect(result.quickWins.length).toBeGreaterThan(0);\n      expect(result.quickWins[0].autoFixable).toBe(true);\n    });\n\n    it('should categorize issues by severity', async () => {\n      const result = await service.performQuickAnalysis();\n      \n      expect(result.summary.errorCount).toBeGreaterThanOrEqual(0);\n      expect(result.summary.warningCount).toBeGreaterThanOrEqual(0);\n      expect(result.summary.totalIssues).toBe(result.summary.errorCount + result.summary.warningCount);\n    });\n  });\n\n  describe('Comprehensive Analysis', () => {\n    it('should perform comprehensive analysis with default options', async () => {\n      const result = await service.performComprehensiveAnalysis();\n      \n      expect(result).toBeDefined();\n      expect(result.summary).toBeDefined();\n      expect(result.categorizedErrors).toBeDefined();\n      expect(result.fileAnalyses).toBeDefined();\n      expect(result.resolutionStrategies).toBeDefined();\n      expect(result.optimizedPlan).toBeDefined();\n      expect(result.recommendations).toBeDefined();\n      expect(result.metrics).toBeDefined();\n    });\n\n    it('should generate resolution strategies when requested', async () => {\n      const result = await service.performComprehensiveAnalysis({\n        generateStrategies: true\n      });\n      \n      expect(result.resolutionStrategies.length).toBeGreaterThan(0);\n      expect(result.optimizedPlan.totalStrategies).toBeGreaterThan(0);\n    });\n\n    it('should skip file analysis when disabled', async () => {\n      const result = await service.performComprehensiveAnalysis({\n        includeFileAnalysis: false\n      });\n      \n      expect(result.fileAnalyses).toHaveLength(0);\n    });\n\n    it('should focus on specific areas when requested', async () => {\n      const result = await service.performComprehensiveAnalysis({\n        focusAreas: ['import', 'typescript']\n      });\n      \n      expect(result).toBeDefined();\n      // Should still work with focus areas\n      expect(result.summary.totalIssues).toBeGreaterThanOrEqual(0);\n    });\n\n    it('should generate appropriate recommendations', async () => {\n      const result = await service.performComprehensiveAnalysis();\n      \n      expect(result.recommendations).toBeDefined();\n      expect(result.recommendations.length).toBeGreaterThan(0);\n      \n      // Should have at least one recommendation\n      const firstRec = result.recommendations[0];\n      expect(firstRec.title).toBeDefined();\n      expect(firstRec.description).toBeDefined();\n      expect(firstRec.actionItems).toBeDefined();\n      expect(firstRec.actionItems.length).toBeGreaterThan(0);\n    });\n\n    it('should calculate comprehensive metrics', async () => {\n      const result = await service.performComprehensiveAnalysis();\n      \n      expect(result.metrics).toBeDefined();\n      expect(result.metrics.analysisTime).toBeGreaterThan(0);\n      expect(result.metrics.filesAnalyzed).toBeGreaterThanOrEqual(0);\n      expect(result.metrics.rulesTriggered).toBeDefined();\n      expect(result.metrics.domainDistribution).toBeDefined();\n      expect(result.metrics.severityDistribution).toBeDefined();\n      expect(result.metrics.confidenceScores).toBeDefined();\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle ESLint execution errors gracefully', async () => {\n      // Mock execSync to throw an error\n      const mockExecSync = require('child_process').execSync;\n      mockExecSync.mockImplementationOnce(() => {\n        const error = new Error('ESLint failed');\n        (error as any).stdout = '[]'; // Empty results\n        throw error;\n      });\n\n      // Should not throw, but handle gracefully\n      const result = await service.performQuickAnalysis();\n      expect(result).toBeDefined();\n    });\n\n    it('should handle file system errors gracefully', async () => {\n      // Mock fs.readFileSync to throw an error\n      const mockReadFileSync = require('fs').readFileSync;\n      mockReadFileSync.mockImplementationOnce(() => {\n        throw new Error('File not found');\n      });\n\n      // Should still work with file system errors\n      const result = await service.performQuickAnalysis();\n      expect(result).toBeDefined();\n    });\n  });\n\n  describe('Integration', () => {\n    it('should integrate all analysis components', async () => {\n      const result = await service.performComprehensiveAnalysis({\n        includeFileAnalysis: true,\n        generateStrategies: true,\n        projectContext: {\n          hasTests: true,\n          teamSize: 'small',\n          riskTolerance: 'moderate'\n        }\n      });\n      \n      // Verify all components worked together\n      expect(result.categorizedErrors.total).toBeGreaterThan(0);\n      expect(result.fileAnalyses.length).toBeGreaterThan(0);\n      expect(result.resolutionStrategies.length).toBeGreaterThan(0);\n      expect(result.recommendations.length).toBeGreaterThan(0);\n      \n      // Verify data consistency\n      expect(result.summary.totalIssues).toBe(result.categorizedErrors.total);\n      expect(result.optimizedPlan.totalStrategies).toBe(result.resolutionStrategies.length);\n    });\n\n    it('should provide consistent analysis results', async () => {\n      // Run analysis twice and compare results\n      const result1 = await service.performQuickAnalysis();\n      const result2 = await service.performQuickAnalysis();\n      \n      expect(result1.summary.totalIssues).toBe(result2.summary.totalIssues);\n      expect(result1.summary.errorCount).toBe(result2.summary.errorCount);\n      expect(result1.summary.warningCount).toBe(result2.summary.warningCount);\n    });\n  });\n});"],"version":3}