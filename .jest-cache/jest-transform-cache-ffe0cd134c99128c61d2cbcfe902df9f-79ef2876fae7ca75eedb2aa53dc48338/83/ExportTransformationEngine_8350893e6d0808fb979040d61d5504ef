db616bef9615594af197e72405685b46
"use strict";
/**
 * Export Transformation Engine
 * Perfect Codebase Campaign - Phase 3 Implementation
 *
 * Orchestrates the complete transformation of unused exports into
 * enterprise intelligence systems with comprehensive safety protocols.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExportTransformationEngine = exports.ErrorSeverity = exports.TransformationErrorType = exports.BatchPriority = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const child_process_1 = require("child_process");
const UnusedExportAnalyzer_1 = require("./UnusedExportAnalyzer");
const EnterpriseIntelligenceGenerator_1 = require("./EnterpriseIntelligenceGenerator");
const SafetyProtocol_1 = require("./SafetyProtocol");
const ProgressTracker_1 = require("./ProgressTracker");
var BatchPriority;
(function (BatchPriority) {
    BatchPriority["HIGH"] = "HIGH";
    BatchPriority["MEDIUM"] = "MEDIUM";
    BatchPriority["LOW"] = "LOW";
})(BatchPriority || (exports.BatchPriority = BatchPriority = {}));
var TransformationErrorType;
(function (TransformationErrorType) {
    TransformationErrorType["ANALYSIS_FAILED"] = "ANALYSIS_FAILED";
    TransformationErrorType["GENERATION_FAILED"] = "GENERATION_FAILED";
    TransformationErrorType["BUILD_FAILED"] = "BUILD_FAILED";
    TransformationErrorType["TEST_FAILED"] = "TEST_FAILED";
    TransformationErrorType["FILE_WRITE_FAILED"] = "FILE_WRITE_FAILED";
    TransformationErrorType["ROLLBACK_FAILED"] = "ROLLBACK_FAILED";
    TransformationErrorType["VALIDATION_FAILED"] = "VALIDATION_FAILED";
})(TransformationErrorType || (exports.TransformationErrorType = TransformationErrorType = {}));
var ErrorSeverity;
(function (ErrorSeverity) {
    ErrorSeverity["LOW"] = "LOW";
    ErrorSeverity["MEDIUM"] = "MEDIUM";
    ErrorSeverity["HIGH"] = "HIGH";
    ErrorSeverity["CRITICAL"] = "CRITICAL";
})(ErrorSeverity || (exports.ErrorSeverity = ErrorSeverity = {}));
class ExportTransformationEngine {
    constructor(config = {}) {
        this.config = {
            batchSize: 10,
            safetyThreshold: 80,
            buildValidationEnabled: true,
            testValidationEnabled: true,
            rollbackOnFailure: true,
            outputDirectory: 'src/intelligence',
            backupDirectory: '.transformation-backups',
            maxRetries: 3,
            dryRun: false,
            ...config
        };
        this.analyzer = new UnusedExportAnalyzer_1.UnusedExportAnalyzer();
        this.generator = new EnterpriseIntelligenceGenerator_1.EnterpriseIntelligenceGenerator(this.config.outputDirectory);
        this.safetyProtocol = new SafetyProtocol_1.SafetyProtocol();
        this.progressTracker = new ProgressTracker_1.ProgressTracker();
        this.transformationLog = [];
    }
    /**
     * Execute complete transformation campaign
     */
    async executeTransformation() {
        console.log('üöÄ Starting Export Transformation Campaign...\n');
        const startTime = Date.now();
        try {
            // Phase 1: Analysis
            console.log('üìä Phase 1: Analyzing unused exports...');
            const analysisResult = await this.performAnalysis();
            // Phase 2: Batch Planning
            console.log('üìã Phase 2: Planning transformation batches...');
            const batches = await this.planTransformationBatches(analysisResult);
            // Phase 3: Safety Preparation
            console.log('üõ°Ô∏è  Phase 3: Preparing safety protocols...');
            await this.prepareSafetyProtocols();
            // Phase 4: Batch Execution
            console.log('‚ö° Phase 4: Executing transformation batches...');
            const results = await this.executeBatches(batches);
            // Phase 5: Final Validation
            console.log('‚úÖ Phase 5: Final validation and cleanup...');
            await this.performFinalValidation();
            const endTime = Date.now();
            const totalDuration = (endTime - startTime) / 1000;
            const summary = this.generateTransformationSummary(results, totalDuration);
            console.log('\nüéâ Export Transformation Campaign completed!');
            this.displaySummary(summary);
            return summary;
        }
        catch (error) {
            console.error('‚ùå Transformation campaign failed:', error);
            await this.handleCriticalFailure(error);
            throw error;
        }
    }
    /**
     * Perform unused export analysis
     */
    async performAnalysis() {
        try {
            const result = await this.analyzer.analyzeUnusedExports();
            console.log(`‚úÖ Analysis completed:`);
            console.log(`   - Files analyzed: ${result.totalFiles}`);
            console.log(`   - Unused exports found: ${result.totalUnusedExports}`);
            console.log(`   - High priority files: ${result.highPriorityFiles.length}`);
            console.log(`   - Medium priority files: ${result.mediumPriorityFiles.length}`);
            console.log(`   - Low priority files: ${result.lowPriorityFiles.length}`);
            return result;
        }
        catch (error) {
            this.logError({
                type: TransformationErrorType.ANALYSIS_FAILED,
                message: `Analysis failed: ${error.message}`,
                severity: ErrorSeverity.CRITICAL,
                recoverable: false,
                timestamp: new Date()
            });
            throw error;
        }
    }
    /**
     * Plan transformation batches based on analysis results
     */
    async planTransformationBatches(analysisResult) {
        const batches = [];
        // Create batches for high priority files
        const highPriorityBatches = this.createBatchesFromFiles(analysisResult.highPriorityFiles, BatchPriority.HIGH, 'high');
        batches.push(...highPriorityBatches);
        // Create batches for medium priority files
        const mediumPriorityBatches = this.createBatchesFromFiles(analysisResult.mediumPriorityFiles, BatchPriority.MEDIUM, 'medium');
        batches.push(...mediumPriorityBatches);
        // Create batches for low priority files
        const lowPriorityBatches = this.createBatchesFromFiles(analysisResult.lowPriorityFiles, BatchPriority.LOW, 'low');
        batches.push(...lowPriorityBatches);
        console.log(`‚úÖ Planned ${batches.length} transformation batches:`);
        console.log(`   - High priority: ${highPriorityBatches.length} batches`);
        console.log(`   - Medium priority: ${mediumPriorityBatches.length} batches`);
        console.log(`   - Low priority: ${lowPriorityBatches.length} batches`);
        return batches;
    }
    /**
     * Create batches from files
     */
    createBatchesFromFiles(files, priority, priorityLabel) {
        const batches = [];
        const batchSize = this.config.batchSize;
        for (let i = 0; i < files.length; i += batchSize) {
            const batchFiles = files.slice(i, i + batchSize);
            const batchNumber = Math.floor(i / batchSize) + 1;
            const batch = {
                id: `${priorityLabel}-batch-${batchNumber}`,
                files: batchFiles,
                priority,
                estimatedDuration: this.estimateBatchDuration(batchFiles),
                safetyScore: this.calculateBatchSafetyScore(batchFiles),
                transformationCandidates: batchFiles.reduce((sum, f) => sum + f.transformationCandidates.length, 0)
            };
            batches.push(batch);
        }
        return batches;
    }
    /**
     * Estimate batch processing duration
     */
    estimateBatchDuration(files) {
        // Base time per file + complexity factor
        const baseTimePerFile = 2; // seconds
        const complexityFactor = files.reduce((sum, f) => {
            return sum + f.transformationCandidates.reduce((candidateSum, c) => {
                const complexityMultiplier = {
                    'SIMPLE': 1,
                    'MODERATE': 1.5,
                    'COMPLEX': 2,
                    'VERY_COMPLEX': 3
                }[c.transformationComplexity] || 1;
                return candidateSum + complexityMultiplier;
            }, 0);
        }, 0);
        return Math.ceil(files.length * baseTimePerFile + complexityFactor);
    }
    /**
     * Calculate batch safety score
     */
    calculateBatchSafetyScore(files) {
        if (files.length === 0)
            return 100;
        const averageSafetyScore = files.reduce((sum, f) => sum + f.safetyScore, 0) / files.length;
        const complexityPenalty = files.reduce((penalty, f) => {
            const highComplexityCandidates = f.transformationCandidates.filter(c => c.transformationComplexity === 'COMPLEX' || c.transformationComplexity === 'VERY_COMPLEX').length;
            return penalty + (highComplexityCandidates * 2);
        }, 0);
        return Math.max(0, Math.min(100, averageSafetyScore - complexityPenalty));
    }
    /**
     * Prepare safety protocols
     */
    async prepareSafetyProtocols() {
        try {
            // Create backup directory
            await this.ensureDirectory(this.config.backupDirectory);
            // Create safety checkpoint
            const checkpointId = await this.safetyProtocol.createSafetyCheckpoint('transformation-start');
            console.log(`‚úÖ Safety checkpoint created: ${checkpointId}`);
            // Validate build before starting
            if (this.config.buildValidationEnabled) {
                const buildValid = await this.validateBuild();
                if (!buildValid.buildSuccess) {
                    throw new Error('Build validation failed before transformation');
                }
                console.log('‚úÖ Pre-transformation build validation passed');
            }
        }
        catch (error) {
            this.logError({
                type: TransformationErrorType.VALIDATION_FAILED,
                message: `Safety preparation failed: ${error.message}`,
                severity: ErrorSeverity.CRITICAL,
                recoverable: false,
                timestamp: new Date()
            });
            throw error;
        }
    }
    /**
     * Execute transformation batches
     */
    async executeBatches(batches) {
        const results = [];
        for (let i = 0; i < batches.length; i++) {
            const batch = batches[i];
            console.log(`\nüîÑ Processing batch ${i + 1}/${batches.length}: ${batch.id}`);
            console.log(`   Priority: ${batch.priority}`);
            console.log(`   Files: ${batch.files.length}`);
            console.log(`   Candidates: ${batch.transformationCandidates}`);
            console.log(`   Safety Score: ${batch.safetyScore}`);
            console.log(`   Estimated Duration: ${batch.estimatedDuration}s`);
            const result = await this.executeBatch(batch);
            results.push(result);
            if (!result.success && this.config.rollbackOnFailure) {
                console.log('‚ö†Ô∏è  Batch failed, stopping transformation campaign');
                break;
            }
            // Progress update
            const progress = ((i + 1) / batches.length) * 100;
            console.log(`üìä Campaign progress: ${progress.toFixed(1)}%`);
        }
        return results;
    }
    /**
     * Execute a single transformation batch
     */
    async executeBatch(batch) {
        const startTime = Date.now();
        const result = {
            batchId: batch.id,
            success: false,
            filesProcessed: 0,
            systemsGenerated: 0,
            errors: [],
            warnings: [],
            duration: 0,
            rollbackPerformed: false,
            generationResults: []
        };
        let checkpointId = null;
        try {
            // Create batch checkpoint
            checkpointId = await this.safetyProtocol.createSafetyCheckpoint(`batch-${batch.id}`);
            // Check safety threshold
            if (batch.safetyScore < this.config.safetyThreshold) {
                result.warnings.push(`Batch safety score (${batch.safetyScore}) below threshold (${this.config.safetyThreshold})`);
                if (!this.config.dryRun) {
                    throw new Error(`Batch safety score too low: ${batch.safetyScore}`);
                }
            }
            // Generate intelligence systems
            if (this.config.dryRun) {
                console.log('üîç DRY RUN: Simulating intelligence system generation...');
                result.systemsGenerated = batch.transformationCandidates;
                result.filesProcessed = batch.files.length;
            }
            else {
                console.log('‚ö° Generating intelligence systems...');
                const generationResults = await this.generator.generateIntelligenceSystems(batch.files);
                result.generationResults = generationResults;
                result.systemsGenerated = generationResults.length;
                result.filesProcessed = batch.files.length;
            }
            // Validate after generation
            if (this.config.buildValidationEnabled && !this.config.dryRun) {
                console.log('üîç Validating build after generation...');
                const validation = await this.validateBuild();
                if (!validation.buildSuccess) {
                    throw new Error('Build validation failed after generation');
                }
            }
            result.success = true;
            console.log(`‚úÖ Batch ${batch.id} completed successfully`);
            console.log(`   Systems generated: ${result.systemsGenerated}`);
            console.log(`   Files processed: ${result.filesProcessed}`);
        }
        catch (error) {
            console.error(`‚ùå Batch ${batch.id} failed:`, error.message);
            const transformationError = {
                type: TransformationErrorType.GENERATION_FAILED,
                message: error.message,
                severity: ErrorSeverity.HIGH,
                recoverable: true,
                timestamp: new Date()
            };
            result.errors.push(transformationError);
            this.logError(transformationError);
            // Attempt rollback
            if (this.config.rollbackOnFailure && checkpointId && !this.config.dryRun) {
                try {
                    console.log('üîÑ Attempting rollback...');
                    await this.safetyProtocol.rollbackToCheckpoint(checkpointId);
                    result.rollbackPerformed = true;
                    console.log('‚úÖ Rollback completed successfully');
                }
                catch (rollbackError) {
                    console.error('‚ùå Rollback failed:', rollbackError.message);
                    result.errors.push({
                        type: TransformationErrorType.ROLLBACK_FAILED,
                        message: rollbackError.message,
                        severity: ErrorSeverity.CRITICAL,
                        recoverable: false,
                        timestamp: new Date()
                    });
                }
            }
        }
        const endTime = Date.now();
        result.duration = (endTime - startTime) / 1000;
        return result;
    }
    /**
     * Perform final validation
     */
    async performFinalValidation() {
        try {
            if (this.config.dryRun) {
                console.log('üîç DRY RUN: Skipping final validation');
                return;
            }
            console.log('üîç Performing final build validation...');
            const buildValidation = await this.validateBuild();
            if (!buildValidation.buildSuccess) {
                throw new Error('Final build validation failed');
            }
            if (this.config.testValidationEnabled) {
                console.log('üß™ Performing final test validation...');
                const testValidation = await this.validateTests();
                if (!testValidation.testSuccess) {
                    console.warn('‚ö†Ô∏è  Some tests failed, but transformation completed');
                }
            }
            console.log('‚úÖ Final validation completed');
        }
        catch (error) {
            this.logError({
                type: TransformationErrorType.VALIDATION_FAILED,
                message: `Final validation failed: ${error.message}`,
                severity: ErrorSeverity.HIGH,
                recoverable: true,
                timestamp: new Date()
            });
            throw error;
        }
    }
    /**
     * Validate build
     */
    async validateBuild() {
        const startTime = Date.now();
        try {
            const output = (0, child_process_1.execSync)('yarn build', {
                encoding: 'utf-8',
                timeout: 60000,
                stdio: 'pipe'
            });
            const endTime = Date.now();
            return {
                buildSuccess: true,
                testSuccess: true,
                lintSuccess: true,
                errors: [],
                warnings: [],
                duration: (endTime - startTime) / 1000
            };
        }
        catch (error) {
            const endTime = Date.now();
            return {
                buildSuccess: false,
                testSuccess: false,
                lintSuccess: false,
                errors: [error.message],
                warnings: [],
                duration: (endTime - startTime) / 1000
            };
        }
    }
    /**
     * Validate tests
     */
    async validateTests() {
        const startTime = Date.now();
        try {
            const output = (0, child_process_1.execSync)('yarn test --passWithNoTests', {
                encoding: 'utf-8',
                timeout: 120000,
                stdio: 'pipe'
            });
            const endTime = Date.now();
            return {
                buildSuccess: true,
                testSuccess: true,
                lintSuccess: true,
                errors: [],
                warnings: [],
                duration: (endTime - startTime) / 1000
            };
        }
        catch (error) {
            const endTime = Date.now();
            return {
                buildSuccess: false,
                testSuccess: false,
                lintSuccess: false,
                errors: [error.message],
                warnings: [],
                duration: (endTime - startTime) / 1000
            };
        }
    }
    /**
     * Handle critical failure
     */
    async handleCriticalFailure(error) {
        console.error('üí• Critical failure detected, initiating emergency procedures...');
        try {
            if (!this.config.dryRun) {
                await this.safetyProtocol.emergencyRollback();
                console.log('‚úÖ Emergency rollback completed');
            }
        }
        catch (rollbackError) {
            console.error('‚ùå Emergency rollback failed:', rollbackError.message);
        }
        // Save error log
        const errorLogPath = path.join(this.config.backupDirectory, `error-log-${Date.now()}.json`);
        await fs.promises.writeFile(errorLogPath, JSON.stringify({
            timestamp: new Date().toISOString(),
            error: error.message,
            stack: error.stack,
            transformationLog: this.transformationLog
        }, null, 2));
        console.log(`üìù Error log saved to: ${errorLogPath}`);
    }
    /**
     * Generate transformation summary
     */
    generateTransformationSummary(results, totalDuration) {
        const successfulBatches = results.filter(r => r.success).length;
        const failedBatches = results.length - successfulBatches;
        const totalFilesProcessed = results.reduce((sum, r) => sum + r.filesProcessed, 0);
        const totalSystemsGenerated = results.reduce((sum, r) => sum + r.systemsGenerated, 0);
        const totalErrors = results.reduce((sum, r) => sum + r.errors.length, 0);
        const totalWarnings = results.reduce((sum, r) => sum + r.warnings.length, 0);
        const averageBatchDuration = results.length > 0 ?
            results.reduce((sum, r) => sum + r.duration, 0) / results.length : 0;
        const successRate = results.length > 0 ? (successfulBatches / results.length) * 100 : 0;
        // Generate generation summary from all results
        const allGenerationResults = results.flatMap(r => r.generationResults);
        const generationSummary = allGenerationResults.length > 0 ?
            this.generator.generateSummary(allGenerationResults) : {
            totalSystemsGenerated: 0,
            totalCapabilitiesAdded: 0,
            totalIntegrationPoints: 0,
            averageComplexity: 0,
            estimatedTotalValue: 0,
            generationsByCategory: {}
        };
        return {
            totalBatches: results.length,
            successfulBatches,
            failedBatches,
            totalFilesProcessed,
            totalSystemsGenerated,
            totalErrors,
            totalWarnings,
            totalDuration,
            averageBatchDuration,
            successRate,
            generationSummary
        };
    }
    /**
     * Display transformation summary
     */
    displaySummary(summary) {
        console.log('\nüìä TRANSFORMATION CAMPAIGN SUMMARY');
        console.log('==================================');
        console.log(`Total batches: ${summary.totalBatches}`);
        console.log(`Successful batches: ${summary.successfulBatches}`);
        console.log(`Failed batches: ${summary.failedBatches}`);
        console.log(`Success rate: ${summary.successRate.toFixed(1)}%`);
        console.log(`Total files processed: ${summary.totalFilesProcessed}`);
        console.log(`Total systems generated: ${summary.totalSystemsGenerated}`);
        console.log(`Total errors: ${summary.totalErrors}`);
        console.log(`Total warnings: ${summary.totalWarnings}`);
        console.log(`Total duration: ${summary.totalDuration.toFixed(2)}s`);
        console.log(`Average batch duration: ${summary.averageBatchDuration.toFixed(2)}s`);
        console.log('\nüß† INTELLIGENCE GENERATION SUMMARY');
        console.log('==================================');
        console.log(`Total capabilities added: ${summary.generationSummary.totalCapabilitiesAdded}`);
        console.log(`Total integration points: ${summary.generationSummary.totalIntegrationPoints}`);
        console.log(`Average complexity: ${summary.generationSummary.averageComplexity.toFixed(1)}`);
        console.log(`Estimated total value: ${summary.generationSummary.estimatedTotalValue}`);
        if (Object.keys(summary.generationSummary.generationsByCategory).length > 0) {
            console.log('\nGeneration by category:');
            Object.entries(summary.generationSummary.generationsByCategory).forEach(([category, count]) => {
                console.log(`  ${category}: ${count}`);
            });
        }
    }
    /**
     * Log transformation error
     */
    logError(error) {
        this.transformationLog.push(error);
        const severityEmoji = {
            [ErrorSeverity.LOW]: 'üü°',
            [ErrorSeverity.MEDIUM]: 'üü†',
            [ErrorSeverity.HIGH]: 'üî¥',
            [ErrorSeverity.CRITICAL]: 'üí•'
        }[error.severity];
        console.error(`${severityEmoji} [${error.type}] ${error.message}`);
    }
    /**
     * Ensure directory exists
     */
    async ensureDirectory(dirPath) {
        try {
            await fs.promises.access(dirPath);
        }
        catch (_a) {
            await fs.promises.mkdir(dirPath, { recursive: true });
        }
    }
    /**
     * Get transformation configuration
     */
    getConfig() {
        return { ...this.config };
    }
    /**
     * Get transformation log
     */
    getTransformationLog() {
        return [...this.transformationLog];
    }
    /**
     * Clear transformation log
     */
    clearTransformationLog() {
        this.transformationLog.length = 0;
    }
}
exports.ExportTransformationEngine = ExportTransformationEngine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,