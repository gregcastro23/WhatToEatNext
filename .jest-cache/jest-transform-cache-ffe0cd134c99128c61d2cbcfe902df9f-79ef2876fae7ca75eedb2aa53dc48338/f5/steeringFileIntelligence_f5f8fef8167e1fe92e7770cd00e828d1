58d4799fd329bdcae614bc5e1847cc0d
"use strict";
/**
 * Steering File Intelligence Integration
 *
 * This utility integrates the guidance from Kiro steering files to enhance
 * component development with astrological calculation guidelines, elemental
 * principles enforcement, and cultural sensitivity guidelines.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSteeringFileIntelligence = exports.getSteeringFileIntelligence = exports.SteeringFileIntelligence = exports.ELEMENTAL_COMPATIBILITY = void 0;
const logger_1 = require("@/utils/logger");
const reliableAstronomy_1 = require("@/utils/reliableAstronomy");
// Self-reinforcement compatibility matrix from elemental-principles.md
exports.ELEMENTAL_COMPATIBILITY = {
    Fire: { Fire: 0.9, Water: 0.7, Earth: 0.7, Air: 0.8 },
    Water: { Water: 0.9, Fire: 0.7, Earth: 0.8, Air: 0.7 },
    Earth: { Earth: 0.9, Fire: 0.7, Water: 0.8, Air: 0.7 },
    Air: { Air: 0.9, Fire: 0.8, Water: 0.7, Earth: 0.7 },
};
/**
 * Core steering file intelligence class that provides guidance for component development
 */
class SteeringFileIntelligence {
    constructor() {
        this.cachedGuidance = null;
        this.lastUpdate = 0;
        this.CACHE_DURATION = 30 * 60 * 1000; // 30 minutes
    }
    static getInstance() {
        if (!SteeringFileIntelligence.instance) {
            SteeringFileIntelligence.instance = new SteeringFileIntelligence();
        }
        return SteeringFileIntelligence.instance;
    }
    /**
     * Get comprehensive astrological guidance for component development
     */
    async getAstrologicalGuidance() {
        // Check cache first
        if (this.cachedGuidance &&
            Date.now() - this.lastUpdate < this.CACHE_DURATION) {
            return this.cachedGuidance;
        }
        try {
            // Get current planetary positions using reliable astronomy
            const planetaryPositions = await (0, reliableAstronomy_1.getReliablePlanetaryPositions)();
            // Calculate dominant element based on current astrological conditions
            const dominantElement = this.calculateDominantElement(planetaryPositions);
            // Calculate elemental balance
            const elementalBalance = this.calculateElementalBalance(planetaryPositions);
            // Apply cultural sensitivity guidelines
            const culturalSensitivity = this.getCulturalGuidance();
            // Apply performance optimizations
            const performanceOptimizations = this.getPerformanceGuidance();
            this.cachedGuidance = {
                planetaryPositions,
                dominantElement,
                elementalBalance,
                culturalSensitivity,
                performanceOptimizations,
            };
            this.lastUpdate = Date.now();
            logger_1.logger.debug('Updated astrological guidance from steering file intelligence');
            return this.cachedGuidance;
        }
        catch (error) {
            logger_1.logger.error('Error getting astrological guidance:', error);
            // Return fallback guidance
            return this.getFallbackGuidance();
        }
    }
    /**
     * Calculate elemental compatibility using self-reinforcement principles
     */
    calculateElementalCompatibility(sourceProps, targetProps) {
        const sourceDominant = this.getDominantElement(sourceProps);
        const targetDominant = this.getDominantElement(targetProps);
        // Self-reinforcement: same elements have highest compatibility (≥0.9)
        if (sourceDominant === targetDominant) {
            return Math.max(0.9, exports.ELEMENTAL_COMPATIBILITY[sourceDominant][targetDominant]);
        }
        // Different elements have good compatibility (≥0.7)
        return Math.max(0.7, exports.ELEMENTAL_COMPATIBILITY[sourceDominant][targetDominant]);
    }
    /**
     * Validate elemental properties according to steering file principles
     */
    validateElementalProperties(properties) {
        const elements = ['Fire', 'Water', 'Earth', 'Air'];
        // Check all elements are present and non-negative
        for (const element of elements) {
            if (typeof properties[element] !== 'number' || properties[element] < 0) {
                logger_1.logger.warn(`Invalid elemental property for ${element}: ${properties[element]}`);
                return false;
            }
        }
        // Check total doesn't exceed reasonable bounds (allow for strong elemental presence)
        const total = Object.values(properties).reduce((sum, val) => sum + val, 0);
        if (total > 4.0) {
            logger_1.logger.warn(`Elemental properties total exceeds maximum: ${total}`);
            return false;
        }
        return true;
    }
    /**
     * Validate compatibility score according to steering file principles
     */
    validateCompatibilityScore(score) {
        // All compatibility scores must be at least 0.7 (no opposing elements)
        if (score < 0.7) {
            logger_1.logger.error(`Compatibility score ${score} violates minimum 0.7 principle`);
            return false;
        }
        // Scores should not exceed 1.0
        if (score > 1.0) {
            logger_1.logger.warn(`Compatibility score ${score} exceeds maximum 1.0`);
            return false;
        }
        return true;
    }
    /**
     * Enhance elemental properties using self-reinforcement principles
     */
    enhanceDominantElement(properties) {
        const dominant = this.getDominantElement(properties);
        const enhancedProperties = { ...properties };
        // Self-reinforcement: boost the dominant element
        enhancedProperties[dominant] = Math.min(1.0, properties[dominant] * 1.1);
        return enhancedProperties;
    }
    /**
     * Apply architectural patterns from steering files
     */
    getArchitecturalGuidance() {
        return {
            componentPatterns: [
                'Use React.memo for expensive components',
                'Implement lazy loading for non-critical components',
                'Apply error boundaries with cosmic-aware error handling',
                'Use context providers for astrological state sharing',
            ],
            stateManagement: [
                'Centralized astrological state with real-time updates',
                'Context consolidation to prevent provider nesting',
                'Performance optimization through selective subscriptions',
                'Fallback state management for calculation failures',
            ],
            errorHandling: [
                'Multi-layered error handling with graceful degradation',
                'Fallback mechanisms for API failures',
                'User-friendly error messages with cosmic context',
                'Error recovery mechanisms with automatic retry',
            ],
            performance: [
                'Bundle splitting for astrological features',
                'Intelligent caching with cosmic timing considerations',
                'Memory optimization for planetary calculations',
                'Real-time monitoring and optimization',
            ],
        };
    }
    /**
     * Apply technology stack guidance from steering files
     */
    getTechnologyStackGuidance() {
        return {
            typescript: [
                'Use strict typing for astrological calculations',
                'Domain-specific types for elemental properties',
                'Generic constraints for recommendation algorithms',
                'Utility types for data transformations',
            ],
            react: [
                'Concurrent features for real-time astrological updates',
                'Suspense for graceful loading states',
                'Error boundaries with cosmic-aware error handling',
                'Custom hooks for astrological calculations',
            ],
            nextjs: [
                'App Router architecture with route-based organization',
                'Server components for optimized rendering',
                'API routes for external service connections',
                'Static generation for pre-rendered pages',
            ],
            testing: [
                'Unit tests for astrological calculation accuracy',
                'Integration tests for component interactions',
                'E2E tests for complete user workflows',
                'Performance monitoring with Web Vitals',
            ],
        };
    }
    // Private helper methods
    calculateDominantElement(planetaryPositions) {
        // Calculate dominant element based on planetary positions
        const elementCounts = { Fire: 0, Water: 0, Earth: 0, Air: 0 };
        const zodiacElementMap = {
            aries: 'Fire',
            leo: 'Fire',
            sagittarius: 'Fire',
            taurus: 'Earth',
            virgo: 'Earth',
            capricorn: 'Earth',
            gemini: 'Air',
            libra: 'Air',
            aquarius: 'Air',
            cancer: 'Water',
            scorpio: 'Water',
            pisces: 'Water',
        };
        // Count elements from planetary positions
        Object.values(planetaryPositions).forEach((position) => {
            if ((position === null || position === void 0 ? void 0 : position.sign) && zodiacElementMap[position.sign]) {
                elementCounts[zodiacElementMap[position.sign]]++;
            }
        });
        // Return the element with the highest count
        return Object.entries(elementCounts).reduce((a, b) => elementCounts[a[0]] > elementCounts[b[0]] ? a : b)[0];
    }
    calculateElementalBalance(planetaryPositions) {
        const elementCounts = { Fire: 0, Water: 0, Earth: 0, Air: 0 };
        const totalPlanets = Object.keys(planetaryPositions).length;
        const zodiacElementMap = {
            aries: 'Fire',
            leo: 'Fire',
            sagittarius: 'Fire',
            taurus: 'Earth',
            virgo: 'Earth',
            capricorn: 'Earth',
            gemini: 'Air',
            libra: 'Air',
            aquarius: 'Air',
            cancer: 'Water',
            scorpio: 'Water',
            pisces: 'Water',
        };
        // Count elements from planetary positions
        Object.values(planetaryPositions).forEach((position) => {
            if ((position === null || position === void 0 ? void 0 : position.sign) && zodiacElementMap[position.sign]) {
                elementCounts[zodiacElementMap[position.sign]]++;
            }
        });
        // Normalize to proportions
        return {
            Fire: totalPlanets > 0 ? elementCounts.Fire / totalPlanets : 0.25,
            Water: totalPlanets > 0 ? elementCounts.Water / totalPlanets : 0.25,
            Earth: totalPlanets > 0 ? elementCounts.Earth / totalPlanets : 0.25,
            Air: totalPlanets > 0 ? elementCounts.Air / totalPlanets : 0.25,
        };
    }
    getDominantElement(properties) {
        return Object.entries(properties).reduce((a, b) => properties[a[0]] > properties[b[0]] ? a : b)[0];
    }
    getCulturalGuidance() {
        return {
            inclusiveDesign: true,
            respectfulRepresentation: true,
            diverseCulinaryTraditions: true,
            accessibilityCompliant: true,
        };
    }
    getPerformanceGuidance() {
        return {
            lazyLoading: true,
            memoization: true,
            contextOptimization: true,
            bundleSplitting: true,
        };
    }
    getFallbackGuidance() {
        return {
            planetaryPositions: {},
            dominantElement: 'Fire',
            elementalBalance: { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 },
            culturalSensitivity: this.getCulturalGuidance(),
            performanceOptimizations: this.getPerformanceGuidance(),
        };
    }
}
exports.SteeringFileIntelligence = SteeringFileIntelligence;
/**
 * Convenience function to get steering file intelligence instance
 */
function getSteeringFileIntelligence() {
    return SteeringFileIntelligence.getInstance();
}
exports.getSteeringFileIntelligence = getSteeringFileIntelligence;
/**
 * Hook for components to use steering file intelligence
 */
function useSteeringFileIntelligence() {
    const intelligence = getSteeringFileIntelligence();
    return {
        getGuidance: async () => await intelligence.getAstrologicalGuidance(),
        validateElementalProperties: (props) => intelligence.validateElementalProperties(props),
        calculateCompatibility: (source, target) => intelligence.calculateElementalCompatibility(source, target),
        enhanceDominantElement: (props) => intelligence.enhanceDominantElement(props),
        getArchitecturalGuidance: () => intelligence.getArchitecturalGuidance(),
        getTechnologyStackGuidance: () => intelligence.getTechnologyStackGuidance(),
    };
}
exports.useSteeringFileIntelligence = useSteeringFileIntelligence;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,