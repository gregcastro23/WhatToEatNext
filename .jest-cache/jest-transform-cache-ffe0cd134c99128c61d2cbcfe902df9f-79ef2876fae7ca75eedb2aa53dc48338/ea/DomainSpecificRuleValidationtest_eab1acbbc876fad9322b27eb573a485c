b981d263b756bded368f480e8941afaf
"use strict";
/**
 * Domain-Specific Rule Validation Test Suite
 *
 * Tests the validation and optimization of domain-specific ESLint rules for:
 * - Astrological calculation files
 * - Campaign system files
 * - Test files
 * - Configuration files
 *
 * Requirements: 4.1, 4.2, 4.3, 4.4
 */
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const path_1 = require("path");
const { DomainSpecificRuleValidator } = require('../../scripts/validateDomainSpecificRules.cjs');
describe('Domain-Specific Rule Validation', () => {
    let validator;
    const projectRoot = process.cwd();
    beforeEach(() => {
        validator = new DomainSpecificRuleValidator();
    });
    afterEach(() => {
        // Clean up any temporary test files
        const tempFiles = [
            'temp-planetary-test.ts',
            'temp-elemental-test.ts',
            'temp-fallback-test.ts',
            'src/services/campaign/temp-logging-test.ts',
            'src/services/campaign/temp-variable-test.ts',
            'temp-mock-test.test.ts',
            'temp-relaxation-test.test.ts',
            'temp-globals-test.test.ts',
            'temp-require-test.config.js',
            'temp-config-relaxation.config.ts'
        ];
        tempFiles.forEach(file => {
            try {
                (0, child_process_1.execSync)(`rm -f "${(0, path_1.join)(projectRoot, file)}"`);
            }
            catch { }
        });
    });
    describe('Overall Validation', () => {
        test('should validate all domain-specific rules', async () => {
            const results = validator.validateDomainSpecificRules();
            expect(results).toBeDefined();
            expect(results.overall).toBeDefined();
            expect(results.overall.score).toBeGreaterThanOrEqual(0);
            expect(results.overall.score).toBeLessThanOrEqual(100);
            // Check that all categories are present
            expect(results.astrologicalFiles).toBeDefined();
            expect(results.campaignSystemFiles).toBeDefined();
            expect(results.testFiles).toBeDefined();
            expect(results.configurationFiles).toBeDefined();
        });
        test('should generate validation report', async () => {
            const _results = validator.validateDomainSpecificRules();
            // Check that report file is created
            const reportPath = (0, path_1.join)(projectRoot, 'domain-specific-rule-validation-report.json');
            expect((0, fs_1.existsSync)(reportPath)).toBe(true);
            // Verify report content
            const reportContent = JSON.parse((0, fs_1.readFileSync)(reportPath, 'utf8'));
            expect(reportContent.overall).toBeDefined();
            expect(reportContent.astrologicalFiles).toBeDefined();
            expect(reportContent.campaignSystemFiles).toBeDefined();
            expect(reportContent.testFiles).toBeDefined();
            expect(reportContent.configurationFiles).toBeDefined();
        });
    });
    describe('Astrological File Rules', () => {
        test('should preserve mathematical constants', async () => {
            // Create test file with protected constants
            const testContent = `
        const DEGREES_PER_SIGN = 30;
        const RELIABLE_POSITIONS = { sun: { sign: 'aries', degree: 8.5 } };

        // This should be flagged
        // DEGREES_PER_SIGN = 25;
      `;
            const testFile = (0, path_1.join)(projectRoot, 'src/calculations/temp-constants-test.ts');
            (0, fs_1.writeFileSync)(testFile, testContent);
            try {
                // Run ESLint to check for violations
                (0, child_process_1.execSync)(`npx eslint "${testFile}" --no-eslintrc --config eslint.config.cjs`, {
                    stdio: 'pipe',
                    cwd: projectRoot
                });
                // If no error, constants are properly preserved
                expect(true).toBe(true);
            }
            catch (error) {
                // Check if it's a legitimate constant preservation error
                const output = error.stderr?.toString() || '';
                if (output.includes('preserve-planetary-constants')) {
                    fail('Mathematical constants should be preserved');
                }
            }
            finally {
                // Clean up
                try {
                    (0, child_process_1.execSync)(`rm -f "${testFile}"`);
                }
                catch { }
            }
        });
        test('should recognize planetary variable patterns', async () => {
            const testContent = `
        const planet = 'mars';
        const position = { sign: 'cancer', degree: 22.63 };
        const longitude = 112.63;
        const retrograde = false;
        const UNUSED_planet = 'unused';
      `;
            const testFile = (0, path_1.join)(projectRoot, 'src/calculations/temp-planetary-vars.ts');
            (0, fs_1.writeFileSync)(testFile, testContent);
            try {
                const output = (0, child_process_1.execSync)(`npx eslint "${testFile}" --no-eslintrc --config eslint.config.cjs --format json`, {
                    encoding: 'utf8',
                    cwd: projectRoot
                });
                const result = JSON.parse(output);
                if (result.length > 0 && result[0].messages) {
                    const unusedVarErrors = result[0].messages.filter((msg) => msg.ruleId === '@typescript-eslint/no-unused-vars' &&
                        (msg.message.includes('planet') || msg.message.includes('position') || msg.message.includes('longitude')));
                    expect(unusedVarErrors.length).toBe(0);
                }
            }
            catch (error) {
                // ESLint errors are expected, check if they're the right kind
                const output = error.stdout?.toString() || '';
                if (output) {
                    const result = JSON.parse(output);
                    if (result.length > 0 && result[0].messages) {
                        const unusedVarErrors = result[0].messages.filter((msg) => msg.ruleId === '@typescript-eslint/no-unused-vars' &&
                            (msg.message.includes('planet') || msg.message.includes('position') || msg.message.includes('longitude')));
                        expect(unusedVarErrors.length).toBe(0);
                    }
                }
            }
            finally {
                try {
                    (0, child_process_1.execSync)(`rm -f "${testFile}"`);
                }
                catch { }
            }
        });
        test('should validate elemental properties structure', async () => {
            const validElementalContent = `
        const elementalProps = {
          Fire: 0.8,
          Water: 0.2,
          Earth: 0.1,
          Air: 0.3
        };
      `;
            const testFile = (0, path_1.join)(projectRoot, 'src/calculations/temp-elemental-valid.ts');
            (0, fs_1.writeFileSync)(testFile, validElementalContent);
            try {
                (0, child_process_1.execSync)(`npx eslint "${testFile}" --no-eslintrc --config eslint.config.cjs`, {
                    stdio: 'pipe',
                    cwd: projectRoot
                });
                // Valid elemental properties should not cause errors
                expect(true).toBe(true);
            }
            catch (error) {
                const output = error.stderr?.toString() || '';
                if (output.includes('validate-elemental-properties')) {
                    fail('Valid elemental properties should not be flagged');
                }
            }
            finally {
                try {
                    (0, child_process_1.execSync)(`rm -f "${testFile}"`);
                }
                catch { }
            }
        });
        test('should detect invalid elemental properties', async () => {
            const invalidElementalContent = `
        const badElementalProps = {
          Fire: 0.8,
          Water: 0.2,
          // Missing Earth and Air - should be flagged
        };
      `;
            const testFile = (0, path_1.join)(projectRoot, 'src/calculations/temp-elemental-invalid.ts');
            (0, fs_1.writeFileSync)(testFile, invalidElementalContent);
            try {
                (0, child_process_1.execSync)(`npx eslint "${testFile}" --no-eslintrc --config eslint.config.cjs`, {
                    stdio: 'pipe',
                    cwd: projectRoot
                });
                // Should have caught the invalid properties
                // If we reach here without error, the rule didn't work
                console.warn('Invalid elemental properties not caught by validation rule');
            }
            catch (error) {
                const output = error.stderr?.toString() || '';
                // We expect this to fail with our custom rule
                expect(output.includes('validate-elemental-properties') || output.length > 0).toBe(true);
            }
            finally {
                try {
                    (0, child_process_1.execSync)(`rm -f "${testFile}"`);
                }
                catch { }
            }
        });
        test('should preserve fallback values', async () => {
            const testContent = `
        const FALLBACK_POSITIONS = { sun: { sign: 'aries', degree: 8.5 } };
        const RELIABLE_DATA = { mars: { sign: 'cancer', degree: 22.63 } };
        const MARCH2025_BACKUP = { moon: { sign: 'aries', degree: 1.57 } };
      `;
            const testFile = (0, path_1.join)(projectRoot, 'src/calculations/temp-fallback-valid.ts');
            (0, fs_1.writeFileSync)(testFile, testContent);
            try {
                (0, child_process_1.execSync)(`npx eslint "${testFile}" --no-eslintrc --config eslint.config.cjs`, {
                    stdio: 'pipe',
                    cwd: projectRoot
                });
                // Valid fallback values should not cause errors
                expect(true).toBe(true);
            }
            catch (error) {
                const output = error.stderr?.toString() || '';
                if (output.includes('preserve-fallback-values')) {
                    fail('Valid fallback values should not be flagged');
                }
            }
            finally {
                try {
                    (0, child_process_1.execSync)(`rm -f "${testFile}"`);
                }
                catch { }
            }
        });
    });
    describe('Campaign System File Rules', () => {
        test('should allow enterprise patterns', async () => {
            const testContent = `
        class CampaignController {
          private complexMethod() {
            // Complex enterprise logic with high complexity
            let result = 0;
            for (let i = 0; i < 10; i++) {
              for (let j = 0; j < 10; j++) {
                if (i > 5) {
                  if (j > 5) {
                    result += i * j;
                  } else {
                    result += i + j;
                  }
                } else {
                  result += i - j;
                }
              }
            }
            return result;
          }
        }
      `;
            const testFile = (0, path_1.join)(projectRoot, 'src/services/campaign/temp-enterprise-test.ts');
            (0, fs_1.writeFileSync)(testFile, testContent);
            try {
                const output = (0, child_process_1.execSync)(`npx eslint "${testFile}" --no-eslintrc --config eslint.config.cjs --format json`, {
                    encoding: 'utf8',
                    cwd: projectRoot
                });
                const result = JSON.parse(output);
                if (result.length > 0 && result[0].messages) {
                    const complexityErrors = result[0].messages.filter((msg) => msg.ruleId === 'complexity' && msg.severity === 2 // error level
                    );
                    // Campaign files should allow higher complexity
                    expect(complexityErrors.length).toBe(0);
                }
            }
            catch (error) {
                const output = error.stdout?.toString() || '';
                if (output) {
                    const result = JSON.parse(output);
                    if (result.length > 0 && result[0].messages) {
                        const complexityErrors = result[0].messages.filter((msg) => msg.ruleId === 'complexity' && msg.severity === 2);
                        expect(complexityErrors.length).toBe(0);
                    }
                }
            }
            finally {
                try {
                    (0, child_process_1.execSync)(`rm -f "${testFile}"`);
                }
                catch { }
            }
        });
        test('should allow extensive logging', async () => {
            const testContent = `
        console.log('Campaign progress update');
        console.warn('Safety protocol activated');
        console.error('Campaign failure detected');
        console.info('Metrics collected');
        console.debug('Detailed debugging info');
      `;
            const testFile = (0, path_1.join)(projectRoot, 'src/services/campaign/temp-logging-test.ts');
            (0, fs_1.writeFileSync)(testFile, testContent);
            try {
                const output = (0, child_process_1.execSync)(`npx eslint "${testFile}" --no-eslintrc --config eslint.config.cjs --format json`, {
                    encoding: 'utf8',
                    cwd: projectRoot
                });
                const result = JSON.parse(output);
                if (result.length > 0 && result[0].messages) {
                    const consoleErrors = result[0].messages.filter((msg) => msg.ruleId === 'no-console' && msg.severity === 2 // error level
                    );
                    // Campaign files should allow console logging
                    expect(consoleErrors.length).toBe(0);
                }
            }
            catch (error) {
                const output = error.stdout?.toString() || '';
                if (output) {
                    const result = JSON.parse(output);
                    if (result.length > 0 && result[0].messages) {
                        const consoleErrors = result[0].messages.filter((msg) => msg.ruleId === 'no-console' && msg.severity === 2);
                        expect(consoleErrors.length).toBe(0);
                    }
                }
            }
            finally {
                try {
                    (0, child_process_1.execSync)(`rm -f "${testFile}"`);
                }
                catch { }
            }
        });
        test('should recognize campaign variable patterns', async () => {
            const testContent = `
        const campaign = 'typescript-elimination';
        const progress = 0.75;
        const metrics = { errors: 100 };
        const safety = true;
        const UNUSED_campaign = 'unused';
      `;
            const testFile = (0, path_1.join)(projectRoot, 'src/services/campaign/temp-campaign-vars.ts');
            (0, fs_1.writeFileSync)(testFile, testContent);
            try {
                const output = (0, child_process_1.execSync)(`npx eslint "${testFile}" --no-eslintrc --config eslint.config.cjs --format json`, {
                    encoding: 'utf8',
                    cwd: projectRoot
                });
                const result = JSON.parse(output);
                if (result.length > 0 && result[0].messages) {
                    const unusedVarErrors = result[0].messages.filter((msg) => msg.ruleId === '@typescript-eslint/no-unused-vars' &&
                        (msg.message.includes('campaign') || msg.message.includes('progress') ||
                            msg.message.includes('metrics') || msg.message.includes('safety')));
                    expect(unusedVarErrors.length).toBe(0);
                }
            }
            catch (error) {
                const output = error.stdout?.toString() || '';
                if (output) {
                    const result = JSON.parse(output);
                    if (result.length > 0 && result[0].messages) {
                        const unusedVarErrors = result[0].messages.filter((msg) => msg.ruleId === '@typescript-eslint/no-unused-vars' &&
                            (msg.message.includes('campaign') || msg.message.includes('progress') ||
                                msg.message.includes('metrics') || msg.message.includes('safety')));
                        expect(unusedVarErrors.length).toBe(0);
                    }
                }
            }
            finally {
                try {
                    (0, child_process_1.execSync)(`rm -f "${testFile}"`);
                }
                catch { }
            }
        });
    });
    describe('Test File Rules', () => {
        test('should allow mock variable patterns', async () => {
            const testContent = `
        const mockFunction = jest.fn();
        const stubValue = 'test-stub';
        const testData = { id: 1 };
        const UNUSED_mock = 'unused';
      `;
            const testFile = (0, path_1.join)(projectRoot, 'temp-mock-patterns.test.ts');
            (0, fs_1.writeFileSync)(testFile, testContent);
            try {
                const output = (0, child_process_1.execSync)(`npx eslint "${testFile}" --no-eslintrc --config eslint.config.cjs --format json`, {
                    encoding: 'utf8',
                    cwd: projectRoot
                });
                const result = JSON.parse(output);
                if (result.length > 0 && result[0].messages) {
                    const unusedVarErrors = result[0].messages.filter((msg) => msg.ruleId === '@typescript-eslint/no-unused-vars' &&
                        (msg.message.includes('mockFunction') || msg.message.includes('stubValue') ||
                            msg.message.includes('testData')));
                    expect(unusedVarErrors.length).toBe(0);
                }
            }
            catch (error) {
                const output = error.stdout?.toString() || '';
                if (output) {
                    const result = JSON.parse(output);
                    if (result.length > 0 && result[0].messages) {
                        const unusedVarErrors = result[0].messages.filter((msg) => msg.ruleId === '@typescript-eslint/no-unused-vars' &&
                            (msg.message.includes('mockFunction') || msg.message.includes('stubValue') ||
                                msg.message.includes('testData')));
                        expect(unusedVarErrors.length).toBe(0);
                    }
                }
            }
            finally {
                try {
                    (0, child_process_1.execSync)(`rm -f "${testFile}"`);
                }
                catch { }
            }
        });
        test('should have relaxed rules for testing patterns', async () => {
            const testContent = `
        const anyValue: any = 'test-any';
        console.log('Test output');
        const value = someObject!.property; // non-null assertion
        const magicNumber = 42; // magic number
      `;
            const testFile = (0, path_1.join)(projectRoot, 'temp-test-relaxations.test.ts');
            (0, fs_1.writeFileSync)(testFile, testContent);
            try {
                const output = (0, child_process_1.execSync)(`npx eslint "${testFile}" --no-eslintrc --config eslint.config.cjs --format json`, {
                    encoding: 'utf8',
                    cwd: projectRoot
                });
                const result = JSON.parse(output);
                if (result.length > 0 && result[0].messages) {
                    const restrictiveErrors = result[0].messages.filter((msg) => (msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2) ||
                        (msg.ruleId === 'no-console' && msg.severity === 2) ||
                        (msg.ruleId === '@typescript-eslint/no-non-null-assertion' && msg.severity === 2) ||
                        (msg.ruleId === 'no-magic-numbers' && msg.severity === 2));
                    expect(restrictiveErrors.length).toBe(0);
                }
            }
            catch (error) {
                const output = error.stdout?.toString() || '';
                if (output) {
                    const result = JSON.parse(output);
                    if (result.length > 0 && result[0].messages) {
                        const restrictiveErrors = result[0].messages.filter((msg) => (msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2) ||
                            (msg.ruleId === 'no-console' && msg.severity === 2) ||
                            (msg.ruleId === '@typescript-eslint/no-non-null-assertion' && msg.severity === 2) ||
                            (msg.ruleId === 'no-magic-numbers' && msg.severity === 2));
                        expect(restrictiveErrors.length).toBe(0);
                    }
                }
            }
            finally {
                try {
                    (0, child_process_1.execSync)(`rm -f "${testFile}"`);
                }
                catch { }
            }
        });
        test('should have Jest globals available', async () => {
            const testContent = `
        describe('Test suite', () => {
          it('should work', () => {
            expect(true).toBe(true);
          });

          beforeEach(() => {
            jest.clearAllMocks();
          });
        });
      `;
            const testFile = (0, path_1.join)(projectRoot, 'temp-jest-globals.test.ts');
            (0, fs_1.writeFileSync)(testFile, testContent);
            try {
                const output = (0, child_process_1.execSync)(`npx eslint "${testFile}" --no-eslintrc --config eslint.config.cjs --format json`, {
                    encoding: 'utf8',
                    cwd: projectRoot
                });
                const result = JSON.parse(output);
                if (result.length > 0 && result[0].messages) {
                    const undefErrors = result[0].messages.filter((msg) => msg.ruleId === 'no-undef' &&
                        (msg.message.includes('describe') || msg.message.includes('it') ||
                            msg.message.includes('expect') || msg.message.includes('jest')));
                    expect(undefErrors.length).toBe(0);
                }
            }
            catch (error) {
                const output = error.stdout?.toString() || '';
                if (output) {
                    const result = JSON.parse(output);
                    if (result.length > 0 && result[0].messages) {
                        const undefErrors = result[0].messages.filter((msg) => msg.ruleId === 'no-undef' &&
                            (msg.message.includes('describe') || msg.message.includes('it') ||
                                msg.message.includes('expect') || msg.message.includes('jest')));
                        expect(undefErrors.length).toBe(0);
                    }
                }
            }
            finally {
                try {
                    (0, child_process_1.execSync)(`rm -f "${testFile}"`);
                }
                catch { }
            }
        });
    });
    describe('Configuration File Rules', () => {
        test('should allow dynamic requires', async () => {
            const testContent = `
        const config = require('./some-config');
        const dynamicModule = require(process.env.MODULE_NAME);
        module.exports = { ...config };
      `;
            const testFile = (0, path_1.join)(projectRoot, 'temp-dynamic-require.config.js');
            (0, fs_1.writeFileSync)(testFile, testContent);
            try {
                const output = (0, child_process_1.execSync)(`npx eslint "${testFile}" --no-eslintrc --config eslint.config.cjs --format json`, {
                    encoding: 'utf8',
                    cwd: projectRoot
                });
                const result = JSON.parse(output);
                if (result.length > 0 && result[0].messages) {
                    const requireErrors = result[0].messages.filter((msg) => msg.ruleId === 'import/no-dynamic-require' && msg.severity === 2);
                    expect(requireErrors.length).toBe(0);
                }
            }
            catch (error) {
                const output = error.stdout?.toString() || '';
                if (output) {
                    const result = JSON.parse(output);
                    if (result.length > 0 && result[0].messages) {
                        const requireErrors = result[0].messages.filter((msg) => msg.ruleId === 'import/no-dynamic-require' && msg.severity === 2);
                        expect(requireErrors.length).toBe(0);
                    }
                }
            }
            finally {
                try {
                    (0, child_process_1.execSync)(`rm -f "${testFile}"`);
                }
                catch { }
            }
        });
        test('should have relaxed rules for build patterns', async () => {
            const testContent = `
        const anyConfig: any = process.env.CONFIG;
        console.log('Configuration loaded');
        const dynamicRequire = require(process.env.MODULE);
      `;
            const testFile = (0, path_1.join)(projectRoot, 'temp-build-patterns.config.ts');
            (0, fs_1.writeFileSync)(testFile, testContent);
            try {
                const output = (0, child_process_1.execSync)(`npx eslint "${testFile}" --no-eslintrc --config eslint.config.cjs --format json`, {
                    encoding: 'utf8',
                    cwd: projectRoot
                });
                const result = JSON.parse(output);
                if (result.length > 0 && result[0].messages) {
                    const restrictiveErrors = result[0].messages.filter((msg) => (msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2) ||
                        (msg.ruleId === 'no-console' && msg.severity === 2) ||
                        (msg.ruleId === 'import/no-dynamic-require' && msg.severity === 2));
                    expect(restrictiveErrors.length).toBe(0);
                }
            }
            catch (error) {
                const output = error.stdout?.toString() || '';
                if (output) {
                    const result = JSON.parse(output);
                    if (result.length > 0 && result[0].messages) {
                        const restrictiveErrors = result[0].messages.filter((msg) => (msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2) ||
                            (msg.ruleId === 'no-console' && msg.severity === 2) ||
                            (msg.ruleId === 'import/no-dynamic-require' && msg.severity === 2));
                        expect(restrictiveErrors.length).toBe(0);
                    }
                }
            }
            finally {
                try {
                    (0, child_process_1.execSync)(`rm -f "${testFile}"`);
                }
                catch { }
            }
        });
    });
    describe('ESLint Configuration Integration', () => {
        test('should have proper file pattern matching', () => {
            // Test that ESLint config has the right file patterns
            const eslintConfigPath = (0, path_1.join)(projectRoot, 'eslint.config.cjs');
            expect((0, fs_1.existsSync)(eslintConfigPath)).toBe(true);
            const configContent = (0, fs_1.readFileSync)(eslintConfigPath, 'utf8');
            // Check for astrological file patterns
            expect(configContent).toContain('**/calculations/**/*.ts');
            expect(configContent).toContain('**/data/planets/**/*.ts');
            expect(configContent).toContain('**/utils/reliableAstronomy.ts');
            // Check for campaign system patterns
            expect(configContent).toContain('**/services/campaign/**/*.ts');
            // Check for test file patterns
            expect(configContent).toContain('**/*.test.ts');
            expect(configContent).toContain('**/*.spec.ts');
            expect(configContent).toContain('**/__tests__/**/*.ts');
            // Check for config file patterns
            expect(configContent).toContain('*.config.js');
            expect(configContent).toContain('*.config.ts');
        });
        test('should have custom astrological rules plugin', () => {
            const pluginPath = (0, path_1.join)(projectRoot, 'src/eslint-plugins/astrological-rules.cjs');
            expect((0, fs_1.existsSync)(pluginPath)).toBe(true);
            const pluginContent = (0, fs_1.readFileSync)(pluginPath, 'utf8');
            // Check for custom rules
            expect(pluginContent).toContain('preserve-planetary-constants');
            expect(pluginContent).toContain('validate-planetary-position-structure');
            expect(pluginContent).toContain('validate-elemental-properties');
            expect(pluginContent).toContain('require-transit-date-validation');
            expect(pluginContent).toContain('preserve-fallback-values');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,