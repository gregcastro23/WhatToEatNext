88b9bda306407a5bf5f931876dc6e051
"use strict";
/**
 * Memory-Safe Test Helpers
 *
 * Utility functions and patterns for writing memory-efficient tests
 * that integrate with the TestMemoryMonitor system.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MEMORY_TEST_CONFIGS = exports.TEST_TIMEOUTS = exports.memoryAssertions = exports.processBatchWithMemoryManagement = exports.withMemoryTracking = exports.createTestDataset = exports.itMemoryIntensive = exports.itWithMemoryCleanup = exports.describeWithMemoryManagement = exports.withMemoryManagement = void 0;
const TestMemoryMonitor_1 = require("./TestMemoryMonitor");
/**
 * Wrapper for memory-safe test execution
 */
function withMemoryManagement(testFn, config = {}) {
    return async () => {
        const monitor = config.enableMonitoring
            ? new TestMemoryMonitor_1.TestMemoryMonitor(config.memoryThresholds)
            : null;
        try {
            // Take initial snapshot
            if (monitor) {
                monitor.takeSnapshot('test-start');
            }
            // Execute the test
            const result = await testFn();
            // Check memory usage after test
            if (monitor) {
                const memoryCheck = monitor.checkMemoryUsage('test-end');
                if (!memoryCheck.isWithinLimits) {
                    console.warn('Memory limits exceeded during test:', memoryCheck.errors);
                }
                if (memoryCheck.warnings.length > 0) {
                    console.warn('Memory warnings during test:', memoryCheck.warnings);
                }
            }
            return result;
        }
        finally {
            // Cleanup
            if (config.cleanupAfterEach && monitor) {
                monitor.cleanup('test-cleanup');
            }
        }
    };
}
exports.withMemoryManagement = withMemoryManagement;
/**
 * Memory-safe describe block wrapper
 */
function describeWithMemoryManagement(description, testSuite, config = {}) {
    describe(description, () => {
        let suiteMonitor = null;
        beforeAll(() => {
            if (config.enableMonitoring) {
                suiteMonitor = new TestMemoryMonitor_1.TestMemoryMonitor(config.memoryThresholds);
                suiteMonitor.takeSnapshot('suite-start');
            }
        });
        afterAll(() => {
            if (suiteMonitor) {
                suiteMonitor.takeSnapshot('suite-end');
                const summary = suiteMonitor.getMemorySummary();
                if (summary.totalIncrease > 25) { // 25MB threshold for suite reporting
                    console.log(`Memory summary for "${description}":`, {
                        totalIncrease: `${summary.totalIncrease.toFixed(2)}MB`,
                        peakMemory: `${summary.peakMemory.toFixed(2)}MB`,
                        duration: `${(summary.testDuration / 1000).toFixed(2)}s`
                    });
                }
                suiteMonitor.cleanup('suite-cleanup');
            }
        });
        beforeEach(() => {
            var _a;
            if (config.cleanupAfterEach) {
                (_a = global.testUtils) === null || _a === void 0 ? void 0 : _a.cleanupMemory();
            }
        });
        afterEach(() => {
            var _a;
            if (config.cleanupAfterEach) {
                (_a = global.testUtils) === null || _a === void 0 ? void 0 : _a.cleanupMemory();
            }
        });
        // Execute the test suite
        testSuite();
    });
}
exports.describeWithMemoryManagement = describeWithMemoryManagement;
/**
 * Memory-safe test wrapper with automatic cleanup
 */
function itWithMemoryCleanup(description, testFn, timeout) {
    it(description, withMemoryManagement(testFn, {
        enableMonitoring: true,
        cleanupAfterEach: true
    }), timeout || 15000); // Default to 15s timeout
}
exports.itWithMemoryCleanup = itWithMemoryCleanup;
/**
 * Memory-intensive test wrapper with strict monitoring
 */
function itMemoryIntensive(description, testFn, timeout) {
    it(description, withMemoryManagement(testFn, {
        enableMonitoring: true,
        cleanupAfterEach: true,
        memoryThresholds: {
            warning: 50,
            error: 200,
            leak: 25
        }
    }), timeout || 30000); // Longer timeout for memory-intensive tests
}
exports.itMemoryIntensive = itMemoryIntensive;
/**
 * Create a large test dataset with automatic cleanup
 */
function createTestDataset(generator, size, cleanup) {
    const data = [];
    for (let i = 0; i < size; i++) {
        data.push(generator());
    }
    const cleanupFn = () => {
        if (cleanup) {
            cleanup(data);
        }
        data.length = 0;
        // Force garbage collection if available
        if (global.forceGC) {
            global.forceGC();
        }
    };
    return { data, cleanup: cleanupFn };
}
exports.createTestDataset = createTestDataset;
/**
 * Memory-safe async operation wrapper
 */
async function withMemoryTracking(operation, operationName = 'async-operation') {
    const initialMemory = process.memoryUsage().heapUsed;
    try {
        const result = await operation();
        const finalMemory = process.memoryUsage().heapUsed;
        const memoryDiff = (finalMemory - initialMemory) / (1024 * 1024);
        if (memoryDiff > 10) { // 10MB threshold for logging
            console.log(`Memory usage for ${operationName}: +${memoryDiff.toFixed(2)}MB`);
        }
        return result;
    }
    catch (error) {
        // Log memory usage even on error
        const finalMemory = process.memoryUsage().heapUsed;
        const memoryDiff = (finalMemory - initialMemory) / (1024 * 1024);
        if (memoryDiff > 5) { // Lower threshold for error cases
            console.warn(`Memory usage for failed ${operationName}: +${memoryDiff.toFixed(2)}MB`);
        }
        throw error;
    }
}
exports.withMemoryTracking = withMemoryTracking;
/**
 * Batch process large datasets with memory management
 */
async function processBatchWithMemoryManagement(items, processor, batchSize = 10, cleanupBetweenBatches = true) {
    var _a;
    const results = [];
    for (let i = 0; i < items.length; i += batchSize) {
        const batch = items.slice(i, i + batchSize);
        // Process batch
        const batchResults = await Promise.all(batch.map(item => processor(item)));
        results.push(...batchResults);
        // Cleanup between batches if requested
        if (cleanupBetweenBatches && i + batchSize < items.length) {
            if ((_a = global.testUtils) === null || _a === void 0 ? void 0 : _a.cleanupMemory) {
                global.testUtils.cleanupMemory();
            }
            // Small delay to allow garbage collection
            await new Promise(resolve => setTimeout(resolve, 10));
        }
    }
    return results;
}
exports.processBatchWithMemoryManagement = processBatchWithMemoryManagement;
/**
 * Memory usage assertion helpers
 */
exports.memoryAssertions = {
    /**
     * Assert that memory usage is within expected bounds
     */
    expectMemoryWithinBounds: (maxIncreaseMB = 50) => {
        const currentMemory = process.memoryUsage().heapUsed / (1024 * 1024);
        // This is a soft assertion - we log warnings rather than failing tests
        if (currentMemory > maxIncreaseMB) {
            console.warn(`Memory usage (${currentMemory.toFixed(2)}MB) exceeds expected bounds (${maxIncreaseMB}MB)`);
        }
    },
    /**
     * Assert that no significant memory leaks occurred
     */
    expectNoMemoryLeaks: (beforeMemory, tolerance = 25) => {
        const afterMemory = process.memoryUsage().heapUsed;
        const increaseMB = (afterMemory - beforeMemory) / (1024 * 1024);
        if (increaseMB > tolerance) {
            console.warn(`Potential memory leak detected: +${increaseMB.toFixed(2)}MB (tolerance: ${tolerance}MB)`);
        }
    },
    /**
     * Get current memory usage for comparison
     */
    getMemoryBaseline: () => {
        return process.memoryUsage().heapUsed;
    }
};
/**
 * Test timeout configurations based on test type
 */
exports.TEST_TIMEOUTS = {
    unit: 5000,
    integration: 15000,
    memory: 20000,
    performance: 30000 // 30 seconds for performance tests
};
/**
 * Memory-safe test configuration presets
 */
exports.MEMORY_TEST_CONFIGS = {
    strict: {
        enableMonitoring: true,
        cleanupAfterEach: true,
        memoryThresholds: {
            warning: 25,
            error: 100,
            leak: 10
        }
    },
    moderate: {
        enableMonitoring: true,
        cleanupAfterEach: true,
        memoryThresholds: {
            warning: 50,
            error: 200,
            leak: 25
        }
    },
    relaxed: {
        enableMonitoring: true,
        cleanupAfterEach: false,
        memoryThresholds: {
            warning: 100,
            error: 500,
            leak: 50
        }
    }
};
exports.default = {
    withMemoryManagement,
    describeWithMemoryManagement,
    itWithMemoryCleanup,
    itMemoryIntensive,
    createTestDataset,
    withMemoryTracking,
    processBatchWithMemoryManagement,
    memoryAssertions: exports.memoryAssertions,
    TEST_TIMEOUTS: exports.TEST_TIMEOUTS,
    MEMORY_TEST_CONFIGS: exports.MEMORY_TEST_CONFIGS
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9fX3Rlc3RzX18vdXRpbHMvbWVtb3J5VGVzdEhlbHBlcnMudHMiLCJtYXBwaW5ncyI6IjtBQUFBOzs7OztHQUtHOzs7QUFFSCwyREFBd0Q7QUFnQnhEOztHQUVHO0FBQ0gsU0FBZ0Isb0JBQW9CLENBQ2xDLE1BQTRCLEVBQzVCLFNBQStCLEVBQUU7SUFFakMsT0FBTyxLQUFLLElBQUksRUFBRTtRQUNoQixNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsZ0JBQWdCO1lBQ3JDLENBQUMsQ0FBQyxJQUFJLHFDQUFpQixDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztZQUNoRCxDQUFDLENBQUMsSUFBSSxDQUFDO1FBRVQsSUFBSTtZQUNGLHdCQUF3QjtZQUN4QixJQUFJLE9BQU8sRUFBRTtnQkFDWCxPQUFPLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDO2FBQ3BDO1lBRUQsbUJBQW1CO1lBQ25CLE1BQU0sTUFBTSxHQUFHLE1BQU0sTUFBTSxFQUFFLENBQUM7WUFFOUIsZ0NBQWdDO1lBQ2hDLElBQUksT0FBTyxFQUFFO2dCQUNYLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFFekQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLEVBQUU7b0JBQy9CLE9BQU8sQ0FBQyxJQUFJLENBQUMscUNBQXFDLEVBQUUsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2lCQUN6RTtnQkFFRCxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtvQkFDbkMsT0FBTyxDQUFDLElBQUksQ0FBQyw4QkFBOEIsRUFBRSxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7aUJBQ3BFO2FBQ0Y7WUFFRCxPQUFPLE1BQU0sQ0FBQztTQUNmO2dCQUFTO1lBQ1IsVUFBVTtZQUNWLElBQUksTUFBTSxDQUFDLGdCQUFnQixJQUFJLE9BQU8sRUFBRTtnQkFDdEMsT0FB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O0lBQzVCLG1CQUFtQjtJQUNuQixpQkFBaUI7SUFDakIsaUJBQWlCO0lBQ2pCLGtCQUFrQjtJQUNsQixnQ0FBZ0M7SUFDaEMsZ0JBQWdCLEVBQWhCLHdCQUFnQjtJQUNoQixhQUFhLEVBQWIscUJBQWE7SUFDYixtQkFBbUIsRUFBbkIsMkJBQW1CO0NBQ3BCLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9fX3Rlc3RzX18vdXRpbHMvbWVtb3J5VGVzdEhlbHBlcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBNZW1vcnktU2FmZSBUZXN0IEhlbHBlcnNcbiAqIFxuICogVXRpbGl0eSBmdW5jdGlvbnMgYW5kIHBhdHRlcm5zIGZvciB3cml0aW5nIG1lbW9yeS1lZmZpY2llbnQgdGVzdHNcbiAqIHRoYXQgaW50ZWdyYXRlIHdpdGggdGhlIFRlc3RNZW1vcnlNb25pdG9yIHN5c3RlbS5cbiAqL1xuXG5pbXBvcnQgeyBUZXN0TWVtb3J5TW9uaXRvciB9IGZyb20gJy4vVGVzdE1lbW9yeU1vbml0b3InO1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gZm9yIG1lbW9yeS1zYWZlIHRlc3QgZXhlY3V0aW9uXG4gKi9cbmludGVyZmFjZSBNZW1vcnlTYWZlVGVzdENvbmZpZyB7XG4gIGVuYWJsZU1vbml0b3Jpbmc/OiBib29sZWFuO1xuICBjbGVhbnVwQWZ0ZXJFYWNoPzogYm9vbGVhbjtcbiAgbWVtb3J5VGhyZXNob2xkcz86IHtcbiAgICB3YXJuaW5nPzogbnVtYmVyO1xuICAgIGVycm9yPzogbnVtYmVyO1xuICAgIGxlYWs/OiBudW1iZXI7XG4gIH07XG4gIHRpbWVvdXRPdmVycmlkZT86IG51bWJlcjtcbn1cblxuLyoqXG4gKiBXcmFwcGVyIGZvciBtZW1vcnktc2FmZSB0ZXN0IGV4ZWN1dGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gd2l0aE1lbW9yeU1hbmFnZW1lbnQ8VD4oXG4gIHRlc3RGbjogKCkgPT4gUHJvbWlzZTxUPiB8IFQsXG4gIGNvbmZpZzogTWVtb3J5U2FmZVRlc3RDb25maWcgPSB7fVxuKTogKCkgPT4gUHJvbWlzZTxUPiB7XG4gIHJldHVybiBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbW9uaXRvciA9IGNvbmZpZy5lbmFibGVNb25pdG9yaW5nIFxuICAgICAgPyBuZXcgVGVzdE1lbW9yeU1vbml0b3IoY29uZmlnLm1lbW9yeVRocmVzaG9sZHMpXG4gICAgICA6IG51bGw7XG5cbiAgICB0cnkge1xuICAgICAgLy8gVGFrZSBpbml0aWFsIHNuYXBzaG90XG4gICAgICBpZiAobW9uaXRvcikge1xuICAgICAgICBtb25pdG9yLnRha2VTbmFwc2hvdCgndGVzdC1zdGFydCcpO1xuICAgICAgfVxuXG4gICAgICAvLyBFeGVjdXRlIHRoZSB0ZXN0XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0ZXN0Rm4oKTtcblxuICAgICAgLy8gQ2hlY2sgbWVtb3J5IHVzYWdlIGFmdGVyIHRlc3RcbiAgICAgIGlmIChtb25pdG9yKSB7XG4gICAgICAgIGNvbnN0IG1lbW9yeUNoZWNrID0gbW9uaXRvci5jaGVja01lbW9yeVVzYWdlKCd0ZXN0LWVuZCcpO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFtZW1vcnlDaGVjay5pc1dpdGhpbkxpbWl0cykge1xuICAgICAgICAgIGNvbnNvbGUud2FybignTWVtb3J5IGxpbWl0cyBleGNlZWRlZCBkdXJpbmcgdGVzdDonLCBtZW1vcnlDaGVjay5lcnJvcnMpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAobWVtb3J5Q2hlY2sud2FybmluZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnNvbGUud2FybignTWVtb3J5IHdhcm5pbmdzIGR1cmluZyB0ZXN0OicsIG1lbW9yeUNoZWNrLndhcm5pbmdzKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gZmluYWxseSB7XG4gICAgICAvLyBDbGVhbnVwXG4gICAgICBpZiAoY29uZmlnLmNsZWFudXBBZnRlckVhY2ggJiYgbW9uaXRvcikge1xuICAgICAgICBtb25pdG9yLmNsZWFudXAoJ3Rlc3QtY2xlYW51cCcpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBNZW1vcnktc2FmZSBkZXNjcmliZSBibG9jayB3cmFwcGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXNjcmliZVdpdGhNZW1vcnlNYW5hZ2VtZW50KFxuICBkZXNjcmlwdGlvbjogc3RyaW5nLFxuICB0ZXN0U3VpdGU6ICgpID0+IHZvaWQsXG4gIGNvbmZpZzogTWVtb3J5U2FmZVRlc3RDb25maWcgPSB7fVxuKTogdm9pZCB7XG4gIGRlc2NyaWJlKGRlc2NyaXB0aW9uLCAoKSA9PiB7XG4gICAgbGV0IHN1aXRlTW9uaXRvcjogVGVzdE1lbW9yeU1vbml0b3IgfCBudWxsID0gbnVsbDtcblxuICAgIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgICBpZiAoY29uZmlnLmVuYWJsZU1vbml0b3JpbmcpIHtcbiAgICAgICAgc3VpdGVNb25pdG9yID0gbmV3IFRlc3RNZW1vcnlNb25pdG9yKGNvbmZpZy5tZW1vcnlUaHJlc2hvbGRzKTtcbiAgICAgICAgc3VpdGVNb25pdG9yLnRha2VTbmFwc2hvdCgnc3VpdGUtc3RhcnQnKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGFmdGVyQWxsKCgpID0+IHtcbiAgICAgIGlmIChzdWl0ZU1vbml0b3IpIHtcbiAgICAgICAgc3VpdGVNb25pdG9yLnRha2VTbmFwc2hvdCgnc3VpdGUtZW5kJyk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBzdW1tYXJ5ID0gc3VpdGVNb25pdG9yLmdldE1lbW9yeVN1bW1hcnkoKTtcbiAgICAgICAgaWYgKHN1bW1hcnkudG90YWxJbmNyZWFzZSA+IDI1KSB7IC8vIDI1TUIgdGhyZXNob2xkIGZvciBzdWl0ZSByZXBvcnRpbmdcbiAgICAgICAgICBjb25zb2xlLmxvZyhgTWVtb3J5IHN1bW1hcnkgZm9yIFwiJHtkZXNjcmlwdGlvbn1cIjpgLCB7XG4gICAgICAgICAgICB0b3RhbEluY3JlYXNlOiBgJHtzdW1tYXJ5LnRvdGFsSW5jcmVhc2UudG9GaXhlZCgyKX1NQmAsXG4gICAgICAgICAgICBwZWFrTWVtb3J5OiBgJHtzdW1tYXJ5LnBlYWtNZW1vcnkudG9GaXhlZCgyKX1NQmAsXG4gICAgICAgICAgICBkdXJhdGlvbjogYCR7KHN1bW1hcnkudGVzdER1cmF0aW9uIC8gMTAwMCkudG9GaXhlZCgyKX1zYFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBzdWl0ZU1vbml0b3IuY2xlYW51cCgnc3VpdGUtY2xlYW51cCcpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBpZiAoY29uZmlnLmNsZWFudXBBZnRlckVhY2gpIHtcbiAgICAgICAgZ2xvYmFsLnRlc3RVdGlscz8uY2xlYW51cE1lbW9yeSgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICAgIGlmIChjb25maWcuY2xlYW51cEFmdGVyRWFjaCkge1xuICAgICAgICBnbG9iYWwudGVzdFV0aWxzPy5jbGVhbnVwTWVtb3J5KCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBFeGVjdXRlIHRoZSB0ZXN0IHN1aXRlXG4gICAgdGVzdFN1aXRlKCk7XG4gIH0pO1xufVxuXG4vKipcbiAqIE1lbW9yeS1zYWZlIHRlc3Qgd3JhcHBlciB3aXRoIGF1dG9tYXRpYyBjbGVhbnVwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpdFdpdGhNZW1vcnlDbGVhbnVwKFxuICBkZXNjcmlwdGlvbjogc3RyaW5nLFxuICB0ZXN0Rm46ICgpID0+IFByb21pc2U8dm9pZD4gfCB2b2lkLFxuICB0aW1lb3V0PzogbnVtYmVyXG4pOiB2b2lkIHtcbiAgaXQoZGVzY3JpcHRpb24sIHdpdGhNZW1vcnlNYW5hZ2VtZW50KHRlc3RGbiwgeyBcbiAgICBlbmFibGVNb25pdG9yaW5nOiB0cnVlLCBcbiAgICBjbGVhbnVwQWZ0ZXJFYWNoOiB0cnVlIFxuICB9KSwgdGltZW91dCB8fCAxNTAwMCk7IC8vIERlZmF1bHQgdG8gMTVzIHRpbWVvdXRcbn1cblxuLyoqXG4gKiBNZW1vcnktaW50ZW5zaXZlIHRlc3Qgd3JhcHBlciB3aXRoIHN0cmljdCBtb25pdG9yaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpdE1lbW9yeUludGVuc2l2ZShcbiAgZGVzY3JpcHRpb246IHN0cmluZyxcbiAgdGVzdEZuOiAoKSA9PiBQcm9taXNlPHZvaWQ+IHwgdm9pZCxcbiAgdGltZW91dD86IG51bWJlclxuKTogdm9pZCB7XG4gIGl0KGRlc2NyaXB0aW9uLCB3aXRoTWVtb3J5TWFuYWdlbWVudCh0ZXN0Rm4sIHtcbiAgICBlbmFibGVNb25pdG9yaW5nOiB0cnVlLFxuICAgIGNsZWFudXBBZnRlckVhY2g6IHRydWUsXG4gICAgbWVtb3J5VGhyZXNob2xkczoge1xuICAgICAgd2FybmluZzogNTAsICAvLyBMb3dlciB0aHJlc2hvbGRzIGZvciBtZW1vcnktaW50ZW5zaXZlIHRlc3RzXG4gICAgICBlcnJvcjogMjAwLFxuICAgICAgbGVhazogMjVcbiAgICB9XG4gIH0pLCB0aW1lb3V0IHx8IDMwMDAwKTsgLy8gTG9uZ2VyIHRpbWVvdXQgZm9yIG1lbW9yeS1pbnRlbnNpdmUgdGVzdHNcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBsYXJnZSB0ZXN0IGRhdGFzZXQgd2l0aCBhdXRvbWF0aWMgY2xlYW51cFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVGVzdERhdGFzZXQ8VD4oXG4gIGdlbmVyYXRvcjogKCkgPT4gVCxcbiAgc2l6ZTogbnVtYmVyLFxuICBjbGVhbnVwPzogKGRhdGE6IFRbXSkgPT4gdm9pZFxuKToge1xuICBkYXRhOiBUW107XG4gIGNsZWFudXA6ICgpID0+IHZvaWQ7XG59IHtcbiAgY29uc3QgZGF0YTogVFtdID0gW107XG4gIFxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNpemU7IGkrKykge1xuICAgIGRhdGEucHVzaChnZW5lcmF0b3IoKSk7XG4gIH1cblxuICBjb25zdCBjbGVhbnVwRm4gPSAoKSA9PiB7XG4gICAgaWYgKGNsZWFudXApIHtcbiAgICAgIGNsZWFudXAoZGF0YSk7XG4gICAgfVxuICAgIGRhdGEubGVuZ3RoID0gMDtcbiAgICBcbiAgICAvLyBGb3JjZSBnYXJiYWdlIGNvbGxlY3Rpb24gaWYgYXZhaWxhYmxlXG4gICAgaWYgKGdsb2JhbC5mb3JjZUdDKSB7XG4gICAgICBnbG9iYWwuZm9yY2VHQygpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4geyBkYXRhLCBjbGVhbnVwOiBjbGVhbnVwRm4gfTtcbn1cblxuLyoqXG4gKiBNZW1vcnktc2FmZSBhc3luYyBvcGVyYXRpb24gd3JhcHBlclxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gd2l0aE1lbW9yeVRyYWNraW5nPFQ+KFxuICBvcGVyYXRpb246ICgpID0+IFByb21pc2U8VD4sXG4gIG9wZXJhdGlvbk5hbWU6IHN0cmluZyA9ICdhc3luYy1vcGVyYXRpb24nXG4pOiBQcm9taXNlPFQ+IHtcbiAgY29uc3QgaW5pdGlhbE1lbW9yeSA9IHByb2Nlc3MubWVtb3J5VXNhZ2UoKS5oZWFwVXNlZDtcbiAgXG4gIHRyeSB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgb3BlcmF0aW9uKCk7XG4gICAgXG4gICAgY29uc3QgZmluYWxNZW1vcnkgPSBwcm9jZXNzLm1lbW9yeVVzYWdlKCkuaGVhcFVzZWQ7XG4gICAgY29uc3QgbWVtb3J5RGlmZiA9IChmaW5hbE1lbW9yeSAtIGluaXRpYWxNZW1vcnkpIC8gKDEwMjQgKiAxMDI0KTtcbiAgICBcbiAgICBpZiAobWVtb3J5RGlmZiA+IDEwKSB7IC8vIDEwTUIgdGhyZXNob2xkIGZvciBsb2dnaW5nXG4gICAgICBjb25zb2xlLmxvZyhgTWVtb3J5IHVzYWdlIGZvciAke29wZXJhdGlvbk5hbWV9OiArJHttZW1vcnlEaWZmLnRvRml4ZWQoMil9TUJgKTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAvLyBMb2cgbWVtb3J5IHVzYWdlIGV2ZW4gb24gZXJyb3JcbiAgICBjb25zdCBmaW5hbE1lbW9yeSA9IHByb2Nlc3MubWVtb3J5VXNhZ2UoKS5oZWFwVXNlZDtcbiAgICBjb25zdCBtZW1vcnlEaWZmID0gKGZpbmFsTWVtb3J5IC0gaW5pdGlhbE1lbW9yeSkgLyAoMTAyNCAqIDEwMjQpO1xuICAgIFxuICAgIGlmIChtZW1vcnlEaWZmID4gNSkgeyAvLyBMb3dlciB0aHJlc2hvbGQgZm9yIGVycm9yIGNhc2VzXG4gICAgICBjb25zb2xlLndhcm4oYE1lbW9yeSB1c2FnZSBmb3IgZmFpbGVkICR7b3BlcmF0aW9uTmFtZX06ICske21lbW9yeURpZmYudG9GaXhlZCgyKX1NQmApO1xuICAgIH1cbiAgICBcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG4vKipcbiAqIEJhdGNoIHByb2Nlc3MgbGFyZ2UgZGF0YXNldHMgd2l0aCBtZW1vcnkgbWFuYWdlbWVudFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJvY2Vzc0JhdGNoV2l0aE1lbW9yeU1hbmFnZW1lbnQ8VCwgUj4oXG4gIGl0ZW1zOiBUW10sXG4gIHByb2Nlc3NvcjogKGl0ZW06IFQpID0+IFByb21pc2U8Uj4gfCBSLFxuICBiYXRjaFNpemU6IG51bWJlciA9IDEwLFxuICBjbGVhbnVwQmV0d2VlbkJhdGNoZXM6IGJvb2xlYW4gPSB0cnVlXG4pOiBQcm9taXNlPFJbXT4ge1xuICBjb25zdCByZXN1bHRzOiBSW10gPSBbXTtcbiAgXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpICs9IGJhdGNoU2l6ZSkge1xuICAgIGNvbnN0IGJhdGNoID0gaXRlbXMuc2xpY2UoaSwgaSArIGJhdGNoU2l6ZSk7XG4gICAgXG4gICAgLy8gUHJvY2VzcyBiYXRjaFxuICAgIGNvbnN0IGJhdGNoUmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgYmF0Y2gubWFwKGl0ZW0gPT4gcHJvY2Vzc29yKGl0ZW0pKVxuICAgICk7XG4gICAgXG4gICAgcmVzdWx0cy5wdXNoKC4uLmJhdGNoUmVzdWx0cyk7XG4gICAgXG4gICAgLy8gQ2xlYW51cCBiZXR3ZWVuIGJhdGNoZXMgaWYgcmVxdWVzdGVkXG4gICAgaWYgKGNsZWFudXBCZXR3ZWVuQmF0Y2hlcyAmJiBpICsgYmF0Y2hTaXplIDwgaXRlbXMubGVuZ3RoKSB7XG4gICAgICBpZiAoZ2xvYmFsLnRlc3RVdGlscz8uY2xlYW51cE1lbW9yeSkge1xuICAgICAgICBnbG9iYWwudGVzdFV0aWxzLmNsZWFudXBNZW1vcnkoKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gU21hbGwgZGVsYXkgdG8gYWxsb3cgZ2FyYmFnZSBjb2xsZWN0aW9uXG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTApKTtcbiAgICB9XG4gIH1cbiAgXG4gIHJldHVybiByZXN1bHRzO1xufVxuXG4vKipcbiAqIE1lbW9yeSB1c2FnZSBhc3NlcnRpb24gaGVscGVyc1xuICovXG5leHBvcnQgY29uc3QgbWVtb3J5QXNzZXJ0aW9ucyA9IHtcbiAgLyoqXG4gICAqIEFzc2VydCB0aGF0IG1lbW9yeSB1c2FnZSBpcyB3aXRoaW4gZXhwZWN0ZWQgYm91bmRzXG4gICAqL1xuICBleHBlY3RNZW1vcnlXaXRoaW5Cb3VuZHM6IChtYXhJbmNyZWFzZU1COiBudW1iZXIgPSA1MCkgPT4ge1xuICAgIGNvbnN0IGN1cnJlbnRNZW1vcnkgPSBwcm9jZXNzLm1lbW9yeVVzYWdlKCkuaGVhcFVzZWQgLyAoMTAyNCAqIDEwMjQpO1xuICAgIFxuICAgIC8vIFRoaXMgaXMgYSBzb2Z0IGFzc2VydGlvbiAtIHdlIGxvZyB3YXJuaW5ncyByYXRoZXIgdGhhbiBmYWlsaW5nIHRlc3RzXG4gICAgaWYgKGN1cnJlbnRNZW1vcnkgPiBtYXhJbmNyZWFzZU1CKSB7XG4gICAgICBjb25zb2xlLndhcm4oYE1lbW9yeSB1c2FnZSAoJHtjdXJyZW50TWVtb3J5LnRvRml4ZWQoMil9TUIpIGV4Y2VlZHMgZXhwZWN0ZWQgYm91bmRzICgke21heEluY3JlYXNlTUJ9TUIpYCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBBc3NlcnQgdGhhdCBubyBzaWduaWZpY2FudCBtZW1vcnkgbGVha3Mgb2NjdXJyZWRcbiAgICovXG4gIGV4cGVjdE5vTWVtb3J5TGVha3M6IChiZWZvcmVNZW1vcnk6IG51bWJlciwgdG9sZXJhbmNlOiBudW1iZXIgPSAyNSkgPT4ge1xuICAgIGNvbnN0IGFmdGVyTWVtb3J5ID0gcHJvY2Vzcy5tZW1vcnlVc2FnZSgpLmhlYXBVc2VkO1xuICAgIGNvbnN0IGluY3JlYXNlTUIgPSAoYWZ0ZXJNZW1vcnkgLSBiZWZvcmVNZW1vcnkpIC8gKDEwMjQgKiAxMDI0KTtcbiAgICBcbiAgICBpZiAoaW5jcmVhc2VNQiA+IHRvbGVyYW5jZSkge1xuICAgICAgY29uc29sZS53YXJuKGBQb3RlbnRpYWwgbWVtb3J5IGxlYWsgZGV0ZWN0ZWQ6ICske2luY3JlYXNlTUIudG9GaXhlZCgyKX1NQiAodG9sZXJhbmNlOiAke3RvbGVyYW5jZX1NQilgKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldCBjdXJyZW50IG1lbW9yeSB1c2FnZSBmb3IgY29tcGFyaXNvblxuICAgKi9cbiAgZ2V0TWVtb3J5QmFzZWxpbmU6ICgpOiBudW1iZXIgPT4ge1xuICAgIHJldHVybiBwcm9jZXNzLm1lbW9yeVVzYWdlKCkuaGVhcFVzZWQ7XG4gIH1cbn07XG5cbi8qKlxuICogVGVzdCB0aW1lb3V0IGNvbmZpZ3VyYXRpb25zIGJhc2VkIG9uIHRlc3QgdHlwZVxuICovXG5leHBvcnQgY29uc3QgVEVTVF9USU1FT1VUUyA9IHtcbiAgdW5pdDogNTAwMCwgICAgICAgIC8vIDUgc2Vjb25kcyBmb3IgdW5pdCB0ZXN0c1xuICBpbnRlZ3JhdGlvbjogMTUwMDAsIC8vIDE1IHNlY29uZHMgZm9yIGludGVncmF0aW9uIHRlc3RzIChyZWR1Y2VkIGZyb20gMzBzKVxuICBtZW1vcnk6IDIwMDAwLCAgICAgLy8gMjAgc2Vjb25kcyBmb3IgbWVtb3J5LWludGVuc2l2ZSB0ZXN0c1xuICBwZXJmb3JtYW5jZTogMzAwMDAgIC8vIDMwIHNlY29uZHMgZm9yIHBlcmZvcm1hbmNlIHRlc3RzXG59O1xuXG4vKipcbiAqIE1lbW9yeS1zYWZlIHRlc3QgY29uZmlndXJhdGlvbiBwcmVzZXRzXG4gKi9cbmV4cG9ydCBjb25zdCBNRU1PUllfVEVTVF9DT05GSUdTID0ge1xuICBzdHJpY3Q6IHtcbiAgICBlbmFibGVNb25pdG9yaW5nOiB0cnVlLFxuICAgIGNsZWFudXBBZnRlckVhY2g6IHRydWUsXG4gICAgbWVtb3J5VGhyZXNob2xkczoge1xuICAgICAgd2FybmluZzogMjUsXG4gICAgICBlcnJvcjogMTAwLFxuICAgICAgbGVhazogMTBcbiAgICB9XG4gIH0sXG4gIFxuICBtb2RlcmF0ZToge1xuICAgIGVuYWJsZU1vbml0b3Jpbmc6IHRydWUsXG4gICAgY2xlYW51cEFmdGVyRWFjaDogdHJ1ZSxcbiAgICBtZW1vcnlUaHJlc2hvbGRzOiB7XG4gICAgICB3YXJuaW5nOiA1MCxcbiAgICAgIGVycm9yOiAyMDAsXG4gICAgICBsZWFrOiAyNVxuICAgIH1cbiAgfSxcbiAgXG4gIHJlbGF4ZWQ6IHtcbiAgICBlbmFibGVNb25pdG9yaW5nOiB0cnVlLFxuICAgIGNsZWFudXBBZnRlckVhY2g6IGZhbHNlLFxuICAgIG1lbW9yeVRocmVzaG9sZHM6IHtcbiAgICAgIHdhcm5pbmc6IDEwMCxcbiAgICAgIGVycm9yOiA1MDAsXG4gICAgICBsZWFrOiA1MFxuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICB3aXRoTWVtb3J5TWFuYWdlbWVudCxcbiAgZGVzY3JpYmVXaXRoTWVtb3J5TWFuYWdlbWVudCxcbiAgaXRXaXRoTWVtb3J5Q2xlYW51cCxcbiAgaXRNZW1vcnlJbnRlbnNpdmUsXG4gIGNyZWF0ZVRlc3REYXRhc2V0LFxuICB3aXRoTWVtb3J5VHJhY2tpbmcsXG4gIHByb2Nlc3NCYXRjaFdpdGhNZW1vcnlNYW5hZ2VtZW50LFxuICBtZW1vcnlBc3NlcnRpb25zLFxuICBURVNUX1RJTUVPVVRTLFxuICBNRU1PUllfVEVTVF9DT05GSUdTXG59OyJdLCJ2ZXJzaW9uIjozfQ==