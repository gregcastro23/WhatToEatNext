{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/unintentional-any-elimination/__tests__/ProgressiveImprovementEngine.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/unintentional-any-elimination/__tests__/ProgressiveImprovementEngine.test.ts"],"sourcesContent":["/**\n * Tests for ProgressiveImprovementEngine\n * Validates batch processing orchestration and realistic target management\n */\n\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\nimport { ProgressiveImprovementEngine } from '../ProgressiveImprovementEngine';\nimport { UnintentionalAnyConfig } from '../types';\n\n// Mock dependencies\njest.mock('fs');\njest.mock('child_process');\n\nconst mockFs = fs as jest.Mocked<typeof fs>;\nconst mockExecSync = execSync as jest.MockedFunction<typeof execSync>;\n\ndescribe('ProgressiveImprovementEngine', () => {\n  let engine: ProgressiveImprovementEngine;\n  let mockConfig: UnintentionalAnyConfig;\n\n  beforeEach(() => {\n    engine = new ProgressiveImprovementEngine();\n    mockConfig = {\n      maxFilesPerBatch: 10,\n      targetReductionPercentage: 15,\n      confidenceThreshold: 0.8,\n      enableDomainAnalysis: true,\n      enableDocumentation: true,\n      safetyLevel: 'MODERATE',\n      validationFrequency: 5\n    };\n\n    // Reset mocks\n    jest.clearAllMocks();\n  });\n\n  describe('Batch Processing Orchestration', () => {\n    test('should initialize with adaptive configuration', () => {\n      const config = engine.getAdaptiveConfig();\n\n      expect(config.maxFilesPerBatch).toBe(15); // Default value\n      expect(config.targetReductionPercentage).toBe(15);\n      expect(config.confidenceThreshold).toBe(0.8);\n      expect(config.safetyLevel).toBe('MODERATE');\n    });\n\n    test('should adapt batch size based on safety scores', async () => {\n      // Mock file system operations\n      mockExecSync.mockReturnValue('src/test1.ts\\nsrc/test2.ts\\n');\n      mockFs.readFileSync.mockReturnValue('const data: any = {};');\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readdirSync.mockReturnValue([]);\n\n      // Mock TypeScript error count (no errors)\n      mockExecSync.mockImplementation((command) => {\n        if (command.includes('grep -c \"error TS\"')) {\n          const error = new Error('No matches') as any;\n          error.status = 1; // grep exit code for no matches\n          throw error;\n        }\n        return 'src/test1.ts\\nsrc/test2.ts\\n';\n      });\n\n      // Execute multiple batches to trigger adaptation\n      const batch1 = await engine.executeBatch(mockConfig);\n      const batch2 = await engine.executeBatch(mockConfig);\n\n      expect(batch1.batchNumber).toBe(1);\n      expect(batch2.batchNumber).toBe(2);\n\n      const history = engine.getBatchHistory();\n      expect(history).toHaveLength(2);\n    });\n\n    test('should create safety checkpoints during execution', async () => {\n      // Mock successful execution\n      mockExecSync.mockReturnValue('');\n      mockFs.readFileSync.mockReturnValue('const data: any = {};');\n\n      const batch = await engine.executeBatch(mockConfig);\n\n      expect(batch.safetyScore).toBeGreaterThanOrEqual(0);\n      expect(batch.executionTime).toBeGreaterThan(0);\n    });\n\n    test('should track progress metrics accurately', async () => {\n      const progress = await engine.getProgressMetrics();\n\n      expect(progress).toHaveProperty('totalAnyTypes');\n      expect(progress).toHaveProperty('reductionPercentage');\n      expect(progress).toHaveProperty('batchesCompleted');\n      expect(progress).toHaveProperty('averageSuccessRate');\n    });\n  });\n\n  describe('Realistic Target Management', () => {\n    test('should set realistic targets based on file analysis', async () => {\n      // Mock file analysis\n      mockExecSync.mockReturnValue('src/test1.ts\\nsrc/test2.ts\\nsrc/test3.test.ts\\n');\n      mockFs.readFileSync.mockImplementation((path) => {\n        if (path.toString().includes('test')) {\n          return 'const mockData: any = {};'; // Test file\n        }\n        return 'const items: any[] = []; const config: Record<string, any> = {};';\n      });\n\n      const targetInfo = await engine.setRealisticTargets();\n\n      expect(targetInfo.recommendedTarget).toBeGreaterThan(0);\n      expect(targetInfo.recommendedTarget).toBeLessThanOrEqual(25);\n      expect(targetInfo.reasoning).toBeInstanceOf(Array);\n      expect(targetInfo.reasoning.length).toBeGreaterThan(0);\n      expect(targetInfo.milestones).toHaveLength(4);\n\n      // Verify milestones are progressive\n      for (let i = 1; i < targetInfo.milestones.length; i++) {\n        expect(targetInfo.milestones[i].percentage).toBeGreaterThan(\n          targetInfo.milestones[i - 1].percentage\n        );\n      }\n    });\n\n    test('should monitor progress with milestone tracking', async () => {\n      mockExecSync.mockReturnValue('src/test1.ts\\n');\n      mockFs.readFileSync.mockReturnValue('const data: any = {};');\n\n      const monitoring = await engine.monitorProgress();\n\n      expect(monitoring.currentProgress).toBeDefined();\n      expect(monitoring.milestoneStatus).toBeInstanceOf(Array);\n      expect(monitoring.recommendations).toBeInstanceOf(Array);\n      expect(typeof monitoring.needsManualIntervention).toBe('boolean');\n    });\n\n    test('should analyze success rate and adapt strategy', () => {\n      const analysis = engine.analyzeSuccessRateAndAdapt();\n\n      expect(analysis.currentSuccessRate).toBeGreaterThanOrEqual(0);\n      expect(analysis.currentSuccessRate).toBeLessThanOrEqual(1);\n      expect(['improving', 'declining', 'stable']).toContain(analysis.trend);\n      expect(analysis.adaptations).toBeInstanceOf(Array);\n    });\n\n    test('should recommend manual intervention when needed', async () => {\n      // Simulate low success rate scenario by mocking batch history\n      const lowSuccessBatch = {\n        batchNumber: 1,\n        filesProcessed: 5,\n        anyTypesAnalyzed: 10,\n        replacementsAttempted: 10,\n        replacementsSuccessful: 1, // Very low success rate\n        compilationErrors: 0,\n        rollbacksPerformed: 0,\n        executionTime: 1000,\n        safetyScore: 0.6 // Low safety score\n      };\n\n      // Add multiple low-success batches to history\n      for (let i = 0; i < 5; i++) {\n        (engine as any).batchHistory.push({ ...lowSuccessBatch, batchNumber: i + 1 });\n      }\n\n      mockExecSync.mockReturnValue('src/test1.ts\\n');\n      mockFs.readFileSync.mockReturnValue('const data: any = {};');\n\n      const monitoring = await engine.monitorProgress();\n\n      expect(monitoring.needsManualIntervention).toBe(true);\n      expect(monitoring.recommendations.some(r =>\n        r.includes('manual review') || r.includes('documentation')\n      )).toBe(true);\n    });\n\n    test('should adjust targets based on historical performance', async () => {\n      // Add successful batch history\n      const successfulBatch = {\n        batchNumber: 1,\n        filesProcessed: 10,\n        anyTypesAnalyzed: 20,\n        replacementsAttempted: 15,\n        replacementsSuccessful: 12, // High success rate\n        compilationErrors: 0,\n        rollbacksPerformed: 0,\n        executionTime: 2000,\n        safetyScore: 0.95\n      };\n\n      (engine as any).batchHistory.push(successfulBatch);\n\n      mockExecSync.mockReturnValue('src/test1.ts\\nsrc/test2.ts\\n');\n      mockFs.readFileSync.mockReturnValue('const items: any[] = [];');\n\n      const targetInfo = await engine.setRealisticTargets();\n\n      // Should increase target due to high success rate\n      expect(targetInfo.reasoning.some(r =>\n        r.includes('High historical success rate')\n      )).toBe(true);\n    });\n  });\n\n  describe('Strategy Adaptation', () => {\n    test('should reduce batch size when safety score is low', () => {\n      const initialConfig = engine.getAdaptiveConfig();\n      const initialBatchSize = initialConfig.maxFilesPerBatch;\n\n      // Add low safety score batches\n      const lowSafetyBatch = {\n        batchNumber: 1,\n        filesProcessed: 5,\n        anyTypesAnalyzed: 10,\n        replacementsAttempted: 8,\n        replacementsSuccessful: 3,\n        compilationErrors: 2,\n        rollbacksPerformed: 1,\n        executionTime: 1500,\n        safetyScore: 0.5 // Low safety score\n      };\n\n      for (let i = 0; i < 3; i++) {\n        (engine as any).batchHistory.push({ ...lowSafetyBatch, batchNumber: i + 1 });\n      }\n\n      // Trigger adaptation\n      (engine as any).adaptStrategy();\n\n      const adaptedConfig = engine.getAdaptiveConfig();\n      expect(adaptedConfig.maxFilesPerBatch).toBeLessThan(initialBatchSize);\n      expect(adaptedConfig.confidenceThreshold).toBeGreaterThan(initialConfig.confidenceThreshold);\n    });\n\n    test('should increase batch size when performance is good', () => {\n      const initialConfig = engine.getAdaptiveConfig();\n      const initialBatchSize = initialConfig.maxFilesPerBatch;\n\n      // Add high performance batches\n      const highPerformanceBatch = {\n        batchNumber: 1,\n        filesProcessed: 10,\n        anyTypesAnalyzed: 20,\n        replacementsAttempted: 18,\n        replacementsSuccessful: 16,\n        compilationErrors: 0,\n        rollbacksPerformed: 0,\n        executionTime: 1000,\n        safetyScore: 0.95\n      };\n\n      for (let i = 0; i < 3; i++) {\n        (engine as any).batchHistory.push({ ...highPerformanceBatch, batchNumber: i + 1 });\n      }\n\n      // Trigger adaptation\n      (engine as any).adaptStrategy();\n\n      const adaptedConfig = engine.getAdaptiveConfig();\n      expect(adaptedConfig.maxFilesPerBatch).toBeGreaterThanOrEqual(initialBatchSize);\n    });\n  });\n\n  describe('Full Campaign Execution', () => {\n    test('should execute full campaign with progress tracking', async () => {\n      // Mock minimal file system for quick test\n      mockExecSync.mockImplementation((command) => {\n        if (command.includes('grep -c \"error TS\"')) {\n          const error = new Error('No matches') as any;\n          error.status = 1;\n          throw error;\n        }\n        return ''; // No files to process\n      });\n\n      const result = await engine.executeFullCampaign(mockConfig);\n\n      expect(result).toHaveProperty('totalAnyTypesAnalyzed');\n      expect(result).toHaveProperty('reductionAchieved');\n      expect(result).toHaveProperty('safetyEvents');\n      expect(result.safetyEvents).toBeInstanceOf(Array);\n    });\n  });\n});\n"],"version":3}