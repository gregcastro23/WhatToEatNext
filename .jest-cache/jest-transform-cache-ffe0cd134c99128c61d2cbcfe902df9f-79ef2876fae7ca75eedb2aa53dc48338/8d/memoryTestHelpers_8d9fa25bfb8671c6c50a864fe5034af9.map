{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/utils/memoryTestHelpers.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/utils/memoryTestHelpers.ts"],"sourcesContent":["/**\n * Memory-Safe Test Helpers\n * \n * Utility functions and patterns for writing memory-efficient tests\n * that integrate with the TestMemoryMonitor system.\n */\n\nimport { TestMemoryMonitor } from './TestMemoryMonitor';\n\n/**\n * Configuration for memory-safe test execution\n */\ninterface MemorySafeTestConfig {\n  enableMonitoring?: boolean;\n  cleanupAfterEach?: boolean;\n  memoryThresholds?: {\n    warning?: number;\n    error?: number;\n    leak?: number;\n  };\n  timeoutOverride?: number;\n}\n\n/**\n * Wrapper for memory-safe test execution\n */\nexport function withMemoryManagement<T>(\n  testFn: () => Promise<T> | T,\n  config: MemorySafeTestConfig = {}\n): () => Promise<T> {\n  return async () => {\n    const monitor = config.enableMonitoring \n      ? new TestMemoryMonitor(config.memoryThresholds)\n      : null;\n\n    try {\n      // Take initial snapshot\n      if (monitor) {\n        monitor.takeSnapshot('test-start');\n      }\n\n      // Execute the test\n      const result = await testFn();\n\n      // Check memory usage after test\n      if (monitor) {\n        const memoryCheck = monitor.checkMemoryUsage('test-end');\n        \n        if (!memoryCheck.isWithinLimits) {\n          console.warn('Memory limits exceeded during test:', memoryCheck.errors);\n        }\n        \n        if (memoryCheck.warnings.length > 0) {\n          console.warn('Memory warnings during test:', memoryCheck.warnings);\n        }\n      }\n\n      return result;\n    } finally {\n      // Cleanup\n      if (config.cleanupAfterEach && monitor) {\n        monitor.cleanup('test-cleanup');\n      }\n    }\n  };\n}\n\n/**\n * Memory-safe describe block wrapper\n */\nexport function describeWithMemoryManagement(\n  description: string,\n  testSuite: () => void,\n  config: MemorySafeTestConfig = {}\n): void {\n  describe(description, () => {\n    let suiteMonitor: TestMemoryMonitor | null = null;\n\n    beforeAll(() => {\n      if (config.enableMonitoring) {\n        suiteMonitor = new TestMemoryMonitor(config.memoryThresholds);\n        suiteMonitor.takeSnapshot('suite-start');\n      }\n    });\n\n    afterAll(() => {\n      if (suiteMonitor) {\n        suiteMonitor.takeSnapshot('suite-end');\n        \n        const summary = suiteMonitor.getMemorySummary();\n        if (summary.totalIncrease > 25) { // 25MB threshold for suite reporting\n          console.log(`Memory summary for \"${description}\":`, {\n            totalIncrease: `${summary.totalIncrease.toFixed(2)}MB`,\n            peakMemory: `${summary.peakMemory.toFixed(2)}MB`,\n            duration: `${(summary.testDuration / 1000).toFixed(2)}s`\n          });\n        }\n        \n        suiteMonitor.cleanup('suite-cleanup');\n      }\n    });\n\n    beforeEach(() => {\n      if (config.cleanupAfterEach) {\n        global.testUtils?.cleanupMemory();\n      }\n    });\n\n    afterEach(() => {\n      if (config.cleanupAfterEach) {\n        global.testUtils?.cleanupMemory();\n      }\n    });\n\n    // Execute the test suite\n    testSuite();\n  });\n}\n\n/**\n * Memory-safe test wrapper with automatic cleanup\n */\nexport function itWithMemoryCleanup(\n  description: string,\n  testFn: () => Promise<void> | void,\n  timeout?: number\n): void {\n  it(description, withMemoryManagement(testFn, { \n    enableMonitoring: true, \n    cleanupAfterEach: true \n  }), timeout || 15000); // Default to 15s timeout\n}\n\n/**\n * Memory-intensive test wrapper with strict monitoring\n */\nexport function itMemoryIntensive(\n  description: string,\n  testFn: () => Promise<void> | void,\n  timeout?: number\n): void {\n  it(description, withMemoryManagement(testFn, {\n    enableMonitoring: true,\n    cleanupAfterEach: true,\n    memoryThresholds: {\n      warning: 50,  // Lower thresholds for memory-intensive tests\n      error: 200,\n      leak: 25\n    }\n  }), timeout || 30000); // Longer timeout for memory-intensive tests\n}\n\n/**\n * Create a large test dataset with automatic cleanup\n */\nexport function createTestDataset<T>(\n  generator: () => T,\n  size: number,\n  cleanup?: (data: T[]) => void\n): {\n  data: T[];\n  cleanup: () => void;\n} {\n  const data: T[] = [];\n  \n  for (let i = 0; i < size; i++) {\n    data.push(generator());\n  }\n\n  const cleanupFn = () => {\n    if (cleanup) {\n      cleanup(data);\n    }\n    data.length = 0;\n    \n    // Force garbage collection if available\n    if (global.forceGC) {\n      global.forceGC();\n    }\n  };\n\n  return { data, cleanup: cleanupFn };\n}\n\n/**\n * Memory-safe async operation wrapper\n */\nexport async function withMemoryTracking<T>(\n  operation: () => Promise<T>,\n  operationName: string = 'async-operation'\n): Promise<T> {\n  const initialMemory = process.memoryUsage().heapUsed;\n  \n  try {\n    const result = await operation();\n    \n    const finalMemory = process.memoryUsage().heapUsed;\n    const memoryDiff = (finalMemory - initialMemory) / (1024 * 1024);\n    \n    if (memoryDiff > 10) { // 10MB threshold for logging\n      console.log(`Memory usage for ${operationName}: +${memoryDiff.toFixed(2)}MB`);\n    }\n    \n    return result;\n  } catch (error) {\n    // Log memory usage even on error\n    const finalMemory = process.memoryUsage().heapUsed;\n    const memoryDiff = (finalMemory - initialMemory) / (1024 * 1024);\n    \n    if (memoryDiff > 5) { // Lower threshold for error cases\n      console.warn(`Memory usage for failed ${operationName}: +${memoryDiff.toFixed(2)}MB`);\n    }\n    \n    throw error;\n  }\n}\n\n/**\n * Batch process large datasets with memory management\n */\nexport async function processBatchWithMemoryManagement<T, R>(\n  items: T[],\n  processor: (item: T) => Promise<R> | R,\n  batchSize: number = 10,\n  cleanupBetweenBatches: boolean = true\n): Promise<R[]> {\n  const results: R[] = [];\n  \n  for (let i = 0; i < items.length; i += batchSize) {\n    const batch = items.slice(i, i + batchSize);\n    \n    // Process batch\n    const batchResults = await Promise.all(\n      batch.map(item => processor(item))\n    );\n    \n    results.push(...batchResults);\n    \n    // Cleanup between batches if requested\n    if (cleanupBetweenBatches && i + batchSize < items.length) {\n      if (global.testUtils?.cleanupMemory) {\n        global.testUtils.cleanupMemory();\n      }\n      \n      // Small delay to allow garbage collection\n      await new Promise(resolve => setTimeout(resolve, 10));\n    }\n  }\n  \n  return results;\n}\n\n/**\n * Memory usage assertion helpers\n */\nexport const memoryAssertions = {\n  /**\n   * Assert that memory usage is within expected bounds\n   */\n  expectMemoryWithinBounds: (maxIncreaseMB: number = 50) => {\n    const currentMemory = process.memoryUsage().heapUsed / (1024 * 1024);\n    \n    // This is a soft assertion - we log warnings rather than failing tests\n    if (currentMemory > maxIncreaseMB) {\n      console.warn(`Memory usage (${currentMemory.toFixed(2)}MB) exceeds expected bounds (${maxIncreaseMB}MB)`);\n    }\n  },\n\n  /**\n   * Assert that no significant memory leaks occurred\n   */\n  expectNoMemoryLeaks: (beforeMemory: number, tolerance: number = 25) => {\n    const afterMemory = process.memoryUsage().heapUsed;\n    const increaseMB = (afterMemory - beforeMemory) / (1024 * 1024);\n    \n    if (increaseMB > tolerance) {\n      console.warn(`Potential memory leak detected: +${increaseMB.toFixed(2)}MB (tolerance: ${tolerance}MB)`);\n    }\n  },\n\n  /**\n   * Get current memory usage for comparison\n   */\n  getMemoryBaseline: (): number => {\n    return process.memoryUsage().heapUsed;\n  }\n};\n\n/**\n * Test timeout configurations based on test type\n */\nexport const TEST_TIMEOUTS = {\n  unit: 5000,        // 5 seconds for unit tests\n  integration: 15000, // 15 seconds for integration tests (reduced from 30s)\n  memory: 20000,     // 20 seconds for memory-intensive tests\n  performance: 30000  // 30 seconds for performance tests\n};\n\n/**\n * Memory-safe test configuration presets\n */\nexport const MEMORY_TEST_CONFIGS = {\n  strict: {\n    enableMonitoring: true,\n    cleanupAfterEach: true,\n    memoryThresholds: {\n      warning: 25,\n      error: 100,\n      leak: 10\n    }\n  },\n  \n  moderate: {\n    enableMonitoring: true,\n    cleanupAfterEach: true,\n    memoryThresholds: {\n      warning: 50,\n      error: 200,\n      leak: 25\n    }\n  },\n  \n  relaxed: {\n    enableMonitoring: true,\n    cleanupAfterEach: false,\n    memoryThresholds: {\n      warning: 100,\n      error: 500,\n      leak: 50\n    }\n  }\n};\n\nexport default {\n  withMemoryManagement,\n  describeWithMemoryManagement,\n  itWithMemoryCleanup,\n  itMemoryIntensive,\n  createTestDataset,\n  withMemoryTracking,\n  processBatchWithMemoryManagement,\n  memoryAssertions,\n  TEST_TIMEOUTS,\n  MEMORY_TEST_CONFIGS\n};"],"version":3}