5450e52f6a8ca2b9ff963e167f3c5ac9
"use strict";
/**
 * Tests for ProgressiveImprovementEngine
 * Validates batch processing orchestration and realistic target management
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock dependencies
jest.mock('fs');
jest.mock('child_process');
const child_process_1 = require("child_process");
const fs = __importStar(require("fs"));
const ProgressiveImprovementEngine_1 = require("../ProgressiveImprovementEngine");
const mockFs = fs;
const mockExecSync = child_process_1.execSync;
describe('ProgressiveImprovementEngine', () => {
    let engine;
    let mockConfig;
    beforeEach(() => {
        engine = new ProgressiveImprovementEngine_1.ProgressiveImprovementEngine();
        mockConfig = {
            maxFilesPerBatch: 10,
            targetReductionPercentage: 15,
            confidenceThreshold: 0.8,
            enableDomainAnalysis: true,
            enableDocumentation: true,
            safetyLevel: 'MODERATE',
            validationFrequency: 5
        };
        // Reset mocks
        jest.clearAllMocks();
    });
    describe('Batch Processing Orchestration', () => {
        test('should initialize with adaptive configuration', () => {
            const config = engine.getAdaptiveConfig();
            expect(config.maxFilesPerBatch).toBe(15); // Default value
            expect(config.targetReductionPercentage).toBe(15);
            expect(config.confidenceThreshold).toBe(0.8);
            expect(config.safetyLevel).toBe('MODERATE');
        });
        test('should adapt batch size based on safety scores', async () => {
            // Mock file system operations
            mockExecSync.mockReturnValue('src/test1.ts\nsrc/test2.ts\n');
            mockFs.readFileSync.mockReturnValue('const data: any = {};');
            mockFs.existsSync.mockReturnValue(true);
            mockFs.readdirSync.mockReturnValue([]);
            // Mock TypeScript error count (no errors)
            mockExecSync.mockImplementation((command) => {
                if (command.includes('grep -c "error TS"')) {
                    const error = new Error('No matches');
                    error.status = 1; // grep exit code for no matches
                    throw error;
                }
                return 'src/test1.ts\nsrc/test2.ts\n';
            });
            // Execute multiple batches to trigger adaptation
            const batch1 = await engine.executeBatch(mockConfig);
            const batch2 = await engine.executeBatch(mockConfig);
            expect(batch1.batchNumber).toBe(1);
            expect(batch2.batchNumber).toBe(2);
            const history = engine.getBatchHistory();
            expect(history).toHaveLength(2);
        });
        test('should create safety checkpoints during execution', async () => {
            // Mock successful execution
            mockExecSync.mockReturnValue('');
            mockFs.readFileSync.mockReturnValue('const data: any = {};');
            const batch = await engine.executeBatch(mockConfig);
            expect(batch.safetyScore).toBeGreaterThanOrEqual(0);
            expect(batch.executionTime).toBeGreaterThan(0);
        });
        test('should track progress metrics accurately', async () => {
            const progress = await engine.getProgressMetrics();
            expect(progress).toHaveProperty('totalAnyTypes');
            expect(progress).toHaveProperty('reductionPercentage');
            expect(progress).toHaveProperty('batchesCompleted');
            expect(progress).toHaveProperty('averageSuccessRate');
        });
    });
    describe('Realistic Target Management', () => {
        test('should set realistic targets based on file analysis', async () => {
            // Mock file analysis
            mockExecSync.mockReturnValue('src/test1.ts\nsrc/test2.ts\nsrc/test3.test.ts\n');
            mockFs.readFileSync.mockImplementation((path) => {
                if (path.toString().includes('test')) {
                    return 'const mockData: any = {};'; // Test file
                }
                return 'const items: any[] = []; const config: Record<string, any> = {};';
            });
            const targetInfo = await engine.setRealisticTargets();
            expect(targetInfo.recommendedTarget).toBeGreaterThan(0);
            expect(targetInfo.recommendedTarget).toBeLessThanOrEqual(25);
            expect(targetInfo.reasoning).toBeInstanceOf(Array);
            expect(targetInfo.reasoning.length).toBeGreaterThan(0);
            expect(targetInfo.milestones).toHaveLength(4);
            // Verify milestones are progressive
            for (let i = 1; i < targetInfo.milestones.length; i++) {
                expect(targetInfo.milestones[i].percentage).toBeGreaterThan(targetInfo.milestones[i - 1].percentage);
            }
        });
        test('should monitor progress with milestone tracking', async () => {
            mockExecSync.mockReturnValue('src/test1.ts\n');
            mockFs.readFileSync.mockReturnValue('const data: any = {};');
            const monitoring = await engine.monitorProgress();
            expect(monitoring.currentProgress).toBeDefined();
            expect(monitoring.milestoneStatus).toBeInstanceOf(Array);
            expect(monitoring.recommendations).toBeInstanceOf(Array);
            expect(typeof monitoring.needsManualIntervention).toBe('boolean');
        });
        test('should analyze success rate and adapt strategy', () => {
            const analysis = engine.analyzeSuccessRateAndAdapt();
            expect(analysis.currentSuccessRate).toBeGreaterThanOrEqual(0);
            expect(analysis.currentSuccessRate).toBeLessThanOrEqual(1);
            expect(['improving', 'declining', 'stable']).toContain(analysis.trend);
            expect(analysis.adaptations).toBeInstanceOf(Array);
        });
        test('should recommend manual intervention when needed', async () => {
            // Simulate low success rate scenario by mocking batch history
            const lowSuccessBatch = {
                batchNumber: 1,
                filesProcessed: 5,
                anyTypesAnalyzed: 10,
                replacementsAttempted: 10,
                replacementsSuccessful: 1,
                compilationErrors: 0,
                rollbacksPerformed: 0,
                executionTime: 1000,
                safetyScore: 0.6 // Low safety score
            };
            // Add multiple low-success batches to history
            for (let i = 0; i < 5; i++) {
                engine.batchHistory.push({ ...lowSuccessBatch, batchNumber: i + 1 });
            }
            mockExecSync.mockReturnValue('src/test1.ts\n');
            mockFs.readFileSync.mockReturnValue('const data: any = {};');
            const monitoring = await engine.monitorProgress();
            expect(monitoring.needsManualIntervention).toBe(true);
            expect(monitoring.recommendations.some(r => r.includes('manual review') || r.includes('documentation'))).toBe(true);
        });
        test('should adjust targets based on historical performance', async () => {
            // Add successful batch history
            const successfulBatch = {
                batchNumber: 1,
                filesProcessed: 10,
                anyTypesAnalyzed: 20,
                replacementsAttempted: 15,
                replacementsSuccessful: 12,
                compilationErrors: 0,
                rollbacksPerformed: 0,
                executionTime: 2000,
                safetyScore: 0.95
            };
            engine.batchHistory.push(successfulBatch);
            mockExecSync.mockReturnValue('src/test1.ts\nsrc/test2.ts\n');
            mockFs.readFileSync.mockReturnValue('const items: any[] = [];');
            const targetInfo = await engine.setRealisticTargets();
            // Should increase target due to high success rate
            expect(targetInfo.reasoning.some(r => r.includes('High historical success rate'))).toBe(true);
        });
    });
    describe('Strategy Adaptation', () => {
        test('should reduce batch size when safety score is low', () => {
            const initialConfig = engine.getAdaptiveConfig();
            const initialBatchSize = initialConfig.maxFilesPerBatch;
            // Add low safety score batches
            const lowSafetyBatch = {
                batchNumber: 1,
                filesProcessed: 5,
                anyTypesAnalyzed: 10,
                replacementsAttempted: 8,
                replacementsSuccessful: 3,
                compilationErrors: 2,
                rollbacksPerformed: 1,
                executionTime: 1500,
                safetyScore: 0.5 // Low safety score
            };
            for (let i = 0; i < 3; i++) {
                engine.batchHistory.push({ ...lowSafetyBatch, batchNumber: i + 1 });
            }
            // Trigger adaptation
            engine.adaptStrategy();
            const adaptedConfig = engine.getAdaptiveConfig();
            expect(adaptedConfig.maxFilesPerBatch).toBeLessThan(initialBatchSize);
            expect(adaptedConfig.confidenceThreshold).toBeGreaterThan(initialConfig.confidenceThreshold);
        });
        test('should increase batch size when performance is good', () => {
            const initialConfig = engine.getAdaptiveConfig();
            const initialBatchSize = initialConfig.maxFilesPerBatch;
            // Add high performance batches
            const highPerformanceBatch = {
                batchNumber: 1,
                filesProcessed: 10,
                anyTypesAnalyzed: 20,
                replacementsAttempted: 18,
                replacementsSuccessful: 16,
                compilationErrors: 0,
                rollbacksPerformed: 0,
                executionTime: 1000,
                safetyScore: 0.95
            };
            for (let i = 0; i < 3; i++) {
                engine.batchHistory.push({ ...highPerformanceBatch, batchNumber: i + 1 });
            }
            // Trigger adaptation
            engine.adaptStrategy();
            const adaptedConfig = engine.getAdaptiveConfig();
            expect(adaptedConfig.maxFilesPerBatch).toBeGreaterThanOrEqual(initialBatchSize);
        });
    });
    describe('Full Campaign Execution', () => {
        test('should execute full campaign with progress tracking', async () => {
            // Mock minimal file system for quick test
            mockExecSync.mockImplementation((command) => {
                if (command.includes('grep -c "error TS"')) {
                    const error = new Error('No matches');
                    error.status = 1;
                    throw error;
                }
                return ''; // No files to process
            });
            const result = await engine.executeFullCampaign(mockConfig);
            expect(result).toHaveProperty('totalAnyTypesAnalyzed');
            expect(result).toHaveProperty('reductionAchieved');
            expect(result).toHaveProperty('safetyEvents');
            expect(result.safetyEvents).toBeInstanceOf(Array);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9zZXJ2aWNlcy9jYW1wYWlnbi91bmludGVudGlvbmFsLWFueS1lbGltaW5hdGlvbi9fX3Rlc3RzX18vUHJvZ3Jlc3NpdmVJbXByb3ZlbWVudEVuZ2luZS50ZXN0LnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFPSCxvQkFBb0I7QUFDcEIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBUDNCLGlEQUF5QztBQUN6Qyx1Q0FBeUI7QUFDekIsa0ZBQStFO0FBTy9FLE1BQU0sTUFBTSxHQUFHLEVBQTRCLENBQUM7QUFDNUMsTUFBTSxZQUFZLEdBQUcsd0JBQWdELENBQUM7QUFFdEUsUUFBUSxDQUFDLDhCQUE4QixFQUFFLEdBQUcsRUFBRTtJQUM1QyxJQUFJLE1BQW9DLENBQUM7SUFDekMsSUFBSSxVQUFrQyxDQUFDO0lBRXZDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxNQUFNLEdBQUcsSUFBSSwyREFBNEIsRUFBRSxDQUFDO1FBQzVDLFVBQVUsR0FBRztZQUNYLGdCQUFnQixFQUFFLEVBQUU7WUFDcEIseUJBQXlCLEVBQUUsRUFBRTtZQUM3QixtQkFBbUIsRUFBRSxHQUFHO1lBQ3hCLG9CQUFvQixFQUFFLElBQUk7WUFDMUIsbUJBQW1CLEVBQUUsSUFBSTtZQUN6QixXQUFXLEVBQUUsVUFBVTtZQUN2QixtQkFBbUIsRUFBRSxDQUFDO1NBQ3ZCLENBQUM7UUFFRixjQUFjO1FBQ2QsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGdDQUFnQyxFQUFFLEdBQUcsRUFBRTtRQUM5QyxJQUFJLENBQUMsK0NBQStDLEVBQUUsR0FBRyxFQUFFO1lBQ3pELE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxpQkFBaUIs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QU8sRUFBRSxFQUFFO2dCQUMxQyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsb0JBQW9CLENBQUMsRUFBRTtvQkFDMUMsTUFBTSxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsWUFBWSxDQUFRLENBQUM7b0JBQzdDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO29CQUNqQixNQUFNLEtBQUssQ0FBQztpQkFDYjtnQkFDRCxPQUFPLEVBQUUsQ0FBQyxDQUFDLHNCQUFzQjtZQUNuQyxDQUFDLENBQUMsQ0FBQztZQUVILE1BQU0sTUFBTSxHQUFHLE1BQU0sTUFBTSxDQUFDLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBRTVELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxjQUFjLENBQUMsdUJBQXVCLENBQUMsQ0FBQztZQUN2RCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsY0FBYyxDQUFDLG1CQUFtQixDQUFDLENBQUM7WUFDbkQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGNBQWMsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUM5QyxNQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwRCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9zZXJ2aWNlcy9jYW1wYWlnbi91bmludGVudGlvbmFsLWFueS1lbGltaW5hdGlvbi9fX3Rlc3RzX18vUHJvZ3Jlc3NpdmVJbXByb3ZlbWVudEVuZ2luZS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGVzdHMgZm9yIFByb2dyZXNzaXZlSW1wcm92ZW1lbnRFbmdpbmVcbiAqIFZhbGlkYXRlcyBiYXRjaCBwcm9jZXNzaW5nIG9yY2hlc3RyYXRpb24gYW5kIHJlYWxpc3RpYyB0YXJnZXQgbWFuYWdlbWVudFxuICovXG5cbmltcG9ydCB7IGV4ZWNTeW5jIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgeyBQcm9ncmVzc2l2ZUltcHJvdmVtZW50RW5naW5lIH0gZnJvbSAnLi4vUHJvZ3Jlc3NpdmVJbXByb3ZlbWVudEVuZ2luZSc7XG5pbXBvcnQgeyBVbmludGVudGlvbmFsQW55Q29uZmlnIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG4vLyBNb2NrIGRlcGVuZGVuY2llc1xuamVzdC5tb2NrKCdmcycpO1xuamVzdC5tb2NrKCdjaGlsZF9wcm9jZXNzJyk7XG5cbmNvbnN0IG1vY2tGcyA9IGZzIGFzIGplc3QuTW9ja2VkPHR5cGVvZiBmcz47XG5jb25zdCBtb2NrRXhlY1N5bmMgPSBleGVjU3luYyBhcyBqZXN0Lk1vY2tlZEZ1bmN0aW9uPHR5cGVvZiBleGVjU3luYz47XG5cbmRlc2NyaWJlKCdQcm9ncmVzc2l2ZUltcHJvdmVtZW50RW5naW5lJywgKCkgPT4ge1xuICBsZXQgZW5naW5lOiBQcm9ncmVzc2l2ZUltcHJvdmVtZW50RW5naW5lO1xuICBsZXQgbW9ja0NvbmZpZzogVW5pbnRlbnRpb25hbEFueUNvbmZpZztcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBlbmdpbmUgPSBuZXcgUHJvZ3Jlc3NpdmVJbXByb3ZlbWVudEVuZ2luZSgpO1xuICAgIG1vY2tDb25maWcgPSB7XG4gICAgICBtYXhGaWxlc1BlckJhdGNoOiAxMCxcbiAgICAgIHRhcmdldFJlZHVjdGlvblBlcmNlbnRhZ2U6IDE1LFxuICAgICAgY29uZmlkZW5jZVRocmVzaG9sZDogMC44LFxuICAgICAgZW5hYmxlRG9tYWluQW5hbHlzaXM6IHRydWUsXG4gICAgICBlbmFibGVEb2N1bWVudGF0aW9uOiB0cnVlLFxuICAgICAgc2FmZXR5TGV2ZWw6ICdNT0RFUkFURScsXG4gICAgICB2YWxpZGF0aW9uRnJlcXVlbmN5OiA1XG4gICAgfTtcblxuICAgIC8vIFJlc2V0IG1vY2tzXG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdCYXRjaCBQcm9jZXNzaW5nIE9yY2hlc3RyYXRpb24nLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGluaXRpYWxpemUgd2l0aCBhZGFwdGl2ZSBjb25maWd1cmF0aW9uJywgKCkgPT4ge1xuICAgICAgY29uc3QgY29uZmlnID0gZW5naW5lLmdldEFkYXB0aXZlQ29uZmlnKCk7XG5cbiAgICAgIGV4cGVjdChjb25maWcubWF4RmlsZXNQZXJCYXRjaCkudG9CZSgxNSk7IC8vIERlZmF1bHQgdmFsdWVcbiAgICAgIGV4cGVjdChjb25maWcudGFyZ2V0UmVkdWN0aW9uUGVyY2VudGFnZSkudG9CZSgxNSk7XG4gICAgICBleHBlY3QoY29uZmlnLmNvbmZpZGVuY2VUaHJlc2hvbGQpLnRvQmUoMC44KTtcbiAgICAgIGV4cGVjdChjb25maWcuc2FmZXR5TGV2ZWwpLnRvQmUoJ01PREVSQVRFJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgYWRhcHQgYmF0Y2ggc2l6ZSBiYXNlZCBvbiBzYWZldHkgc2NvcmVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gTW9jayBmaWxlIHN5c3RlbSBvcGVyYXRpb25zXG4gICAgICBtb2NrRXhlY1N5bmMubW9ja1JldHVyblZhbHVlKCdzcmMvdGVzdDEudHNcXG5zcmMvdGVzdDIudHNcXG4nKTtcbiAgICAgIG1vY2tGcy5yZWFkRmlsZVN5bmMubW9ja1JldHVyblZhbHVlKCdjb25zdCBkYXRhOiBhbnkgPSB7fTsnKTtcbiAgICAgIG1vY2tGcy5leGlzdHNTeW5jLm1vY2tSZXR1cm5WYWx1ZSh0cnVlKTtcbiAgICAgIG1vY2tGcy5yZWFkZGlyU3luYy5tb2NrUmV0dXJuVmFsdWUoW10pO1xuXG4gICAgICAvLyBNb2NrIFR5cGVTY3JpcHQgZXJyb3IgY291bnQgKG5vIGVycm9ycylcbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrSW1wbGVtZW50YXRpb24oKGNvbW1hbmQpID0+IHtcbiAgICAgICAgaWYgKGNvbW1hbmQuaW5jbHVkZXMoJ2dyZXAgLWMgXCJlcnJvciBUU1wiJykpIHtcbiAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcignTm8gbWF0Y2hlcycpIGFzIGFueTtcbiAgICAgICAgICBlcnJvci5zdGF0dXMgPSAxOyAvLyBncmVwIGV4aXQgY29kZSBmb3Igbm8gbWF0Y2hlc1xuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnc3JjL3Rlc3QxLnRzXFxuc3JjL3Rlc3QyLnRzXFxuJztcbiAgICAgIH0pO1xuXG4gICAgICAvLyBFeGVjdXRlIG11bHRpcGxlIGJhdGNoZXMgdG8gdHJpZ2dlciBhZGFwdGF0aW9uXG4gICAgICBjb25zdCBiYXRjaDEgPSBhd2FpdCBlbmdpbmUuZXhlY3V0ZUJhdGNoKG1vY2tDb25maWcpO1xuICAgICAgY29uc3QgYmF0Y2gyID0gYXdhaXQgZW5naW5lLmV4ZWN1dGVCYXRjaChtb2NrQ29uZmlnKTtcblxuICAgICAgZXhwZWN0KGJhdGNoMS5iYXRjaE51bWJlcikudG9CZSgxKTtcbiAgICAgIGV4cGVjdChiYXRjaDIuYmF0Y2hOdW1iZXIpLnRvQmUoMik7XG5cbiAgICAgIGNvbnN0IGhpc3RvcnkgPSBlbmdpbmUuZ2V0QmF0Y2hIaXN0b3J5KCk7XG4gICAgICBleHBlY3QoaGlzdG9yeSkudG9IYXZlTGVuZ3RoKDIpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGNyZWF0ZSBzYWZldHkgY2hlY2twb2ludHMgZHVyaW5nIGV4ZWN1dGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE1vY2sgc3VjY2Vzc2Z1bCBleGVjdXRpb25cbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrUmV0dXJuVmFsdWUoJycpO1xuICAgICAgbW9ja0ZzLnJlYWRGaWxlU3luYy5tb2NrUmV0dXJuVmFsdWUoJ2NvbnN0IGRhdGE6IGFueSA9IHt9OycpO1xuXG4gICAgICBjb25zdCBiYXRjaCA9IGF3YWl0IGVuZ2luZS5leGVjdXRlQmF0Y2gobW9ja0NvbmZpZyk7XG5cbiAgICAgIGV4cGVjdChiYXRjaC5zYWZldHlTY29yZSkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgwKTtcbiAgICAgIGV4cGVjdChiYXRjaC5leGVjdXRpb25UaW1lKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgdHJhY2sgcHJvZ3Jlc3MgbWV0cmljcyBhY2N1cmF0ZWx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcHJvZ3Jlc3MgPSBhd2FpdCBlbmdpbmUuZ2V0UHJvZ3Jlc3NNZXRyaWNzKCk7XG5cbiAgICAgIGV4cGVjdChwcm9ncmVzcykudG9IYXZlUHJvcGVydHkoJ3RvdGFsQW55VHlwZXMnKTtcbiAgICAgIGV4cGVjdChwcm9ncmVzcykudG9IYXZlUHJvcGVydHkoJ3JlZHVjdGlvblBlcmNlbnRhZ2UnKTtcbiAgICAgIGV4cGVjdChwcm9ncmVzcykudG9IYXZlUHJvcGVydHkoJ2JhdGNoZXNDb21wbGV0ZWQnKTtcbiAgICAgIGV4cGVjdChwcm9ncmVzcykudG9IYXZlUHJvcGVydHkoJ2F2ZXJhZ2VTdWNjZXNzUmF0ZScpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnUmVhbGlzdGljIFRhcmdldCBNYW5hZ2VtZW50JywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBzZXQgcmVhbGlzdGljIHRhcmdldHMgYmFzZWQgb24gZmlsZSBhbmFseXNpcycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE1vY2sgZmlsZSBhbmFseXNpc1xuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tSZXR1cm5WYWx1ZSgnc3JjL3Rlc3QxLnRzXFxuc3JjL3Rlc3QyLnRzXFxuc3JjL3Rlc3QzLnRlc3QudHNcXG4nKTtcbiAgICAgIG1vY2tGcy5yZWFkRmlsZVN5bmMubW9ja0ltcGxlbWVudGF0aW9uKChwYXRoKSA9PiB7XG4gICAgICAgIGlmIChwYXRoLnRvU3RyaW5nKCkuaW5jbHVkZXMoJ3Rlc3QnKSkge1xuICAgICAgICAgIHJldHVybiAnY29uc3QgbW9ja0RhdGE6IGFueSA9IHt9Oyc7IC8vIFRlc3QgZmlsZVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnY29uc3QgaXRlbXM6IGFueVtdID0gW107IGNvbnN0IGNvbmZpZzogUmVjb3JkPHN0cmluZywgYW55PiA9IHt9Oyc7XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgdGFyZ2V0SW5mbyA9IGF3YWl0IGVuZ2luZS5zZXRSZWFsaXN0aWNUYXJnZXRzKCk7XG5cbiAgICAgIGV4cGVjdCh0YXJnZXRJbmZvLnJlY29tbWVuZGVkVGFyZ2V0KS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgICBleHBlY3QodGFyZ2V0SW5mby5yZWNvbW1lbmRlZFRhcmdldCkudG9CZUxlc3NUaGFuT3JFcXVhbCgyNSk7XG4gICAgICBleHBlY3QodGFyZ2V0SW5mby5yZWFzb25pbmcpLnRvQmVJbnN0YW5jZU9mKEFycmF5KTtcbiAgICAgIGV4cGVjdCh0YXJnZXRJbmZvLnJlYXNvbmluZy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICAgIGV4cGVjdCh0YXJnZXRJbmZvLm1pbGVzdG9uZXMpLnRvSGF2ZUxlbmd0aCg0KTtcblxuICAgICAgLy8gVmVyaWZ5IG1pbGVzdG9uZXMgYXJlIHByb2dyZXNzaXZlXG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRhcmdldEluZm8ubWlsZXN0b25lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBleHBlY3QodGFyZ2V0SW5mby5taWxlc3RvbmVzW2ldLnBlcmNlbnRhZ2UpLnRvQmVHcmVhdGVyVGhhbihcbiAgICAgICAgICB0YXJnZXRJbmZvLm1pbGVzdG9uZXNbaSAtIDFdLnBlcmNlbnRhZ2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBtb25pdG9yIHByb2dyZXNzIHdpdGggbWlsZXN0b25lIHRyYWNraW5nJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tSZXR1cm5WYWx1ZSgnc3JjL3Rlc3QxLnRzXFxuJyk7XG4gICAgICBtb2NrRnMucmVhZEZpbGVTeW5jLm1vY2tSZXR1cm5WYWx1ZSgnY29uc3QgZGF0YTogYW55ID0ge307Jyk7XG5cbiAgICAgIGNvbnN0IG1vbml0b3JpbmcgPSBhd2FpdCBlbmdpbmUubW9uaXRvclByb2dyZXNzKCk7XG5cbiAgICAgIGV4cGVjdChtb25pdG9yaW5nLmN1cnJlbnRQcm9ncmVzcykudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChtb25pdG9yaW5nLm1pbGVzdG9uZVN0YXR1cykudG9CZUluc3RhbmNlT2YoQXJyYXkpO1xuICAgICAgZXhwZWN0KG1vbml0b3JpbmcucmVjb21tZW5kYXRpb25zKS50b0JlSW5zdGFuY2VPZihBcnJheSk7XG4gICAgICBleHBlY3QodHlwZW9mIG1vbml0b3JpbmcubmVlZHNNYW51YWxJbnRlcnZlbnRpb24pLnRvQmUoJ2Jvb2xlYW4nKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBhbmFseXplIHN1Y2Nlc3MgcmF0ZSBhbmQgYWRhcHQgc3RyYXRlZ3knLCAoKSA9PiB7XG4gICAgICBjb25zdCBhbmFseXNpcyA9IGVuZ2luZS5hbmFseXplU3VjY2Vzc1JhdGVBbmRBZGFwdCgpO1xuXG4gICAgICBleHBlY3QoYW5hbHlzaXMuY3VycmVudFN1Y2Nlc3NSYXRlKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApO1xuICAgICAgZXhwZWN0KGFuYWx5c2lzLmN1cnJlbnRTdWNjZXNzUmF0ZSkudG9CZUxlc3NUaGFuT3JFcXVhbCgxKTtcbiAgICAgIGV4cGVjdChbJ2ltcHJvdmluZycsICdkZWNsaW5pbmcnLCAnc3RhYmxlJ10pLnRvQ29udGFpbihhbmFseXNpcy50cmVuZCk7XG4gICAgICBleHBlY3QoYW5hbHlzaXMuYWRhcHRhdGlvbnMpLnRvQmVJbnN0YW5jZU9mKEFycmF5KTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCByZWNvbW1lbmQgbWFudWFsIGludGVydmVudGlvbiB3aGVuIG5lZWRlZCcsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIFNpbXVsYXRlIGxvdyBzdWNjZXNzIHJhdGUgc2NlbmFyaW8gYnkgbW9ja2luZyBiYXRjaCBoaXN0b3J5XG4gICAgICBjb25zdCBsb3dTdWNjZXNzQmF0Y2ggPSB7XG4gICAgICAgIGJhdGNoTnVtYmVyOiAxLFxuICAgICAgICBmaWxlc1Byb2Nlc3NlZDogNSxcbiAgICAgICAgYW55VHlwZXNBbmFseXplZDogMTAsXG4gICAgICAgIHJlcGxhY2VtZW50c0F0dGVtcHRlZDogMTAsXG4gICAgICAgIHJlcGxhY2VtZW50c1N1Y2Nlc3NmdWw6IDEsIC8vIFZlcnkgbG93IHN1Y2Nlc3MgcmF0ZVxuICAgICAgICBjb21waWxhdGlvbkVycm9yczogMCxcbiAgICAgICAgcm9sbGJhY2tzUGVyZm9ybWVkOiAwLFxuICAgICAgICBleGVjdXRpb25UaW1lOiAxMDAwLFxuICAgICAgICBzYWZldHlTY29yZTogMC42IC8vIExvdyBzYWZldHkgc2NvcmVcbiAgICAgIH07XG5cbiAgICAgIC8vIEFkZCBtdWx0aXBsZSBsb3ctc3VjY2VzcyBiYXRjaGVzIHRvIGhpc3RvcnlcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNTsgaSsrKSB7XG4gICAgICAgIChlbmdpbmUgYXMgYW55KS5iYXRjaEhpc3RvcnkucHVzaCh7IC4uLmxvd1N1Y2Nlc3NCYXRjaCwgYmF0Y2hOdW1iZXI6IGkgKyAxIH0pO1xuICAgICAgfVxuXG4gICAgICBtb2NrRXhlY1N5bmMubW9ja1JldHVyblZhbHVlKCdzcmMvdGVzdDEudHNcXG4nKTtcbiAgICAgIG1vY2tGcy5yZWFkRmlsZVN5bmMubW9ja1JldHVyblZhbHVlKCdjb25zdCBkYXRhOiBhbnkgPSB7fTsnKTtcblxuICAgICAgY29uc3QgbW9uaXRvcmluZyA9IGF3YWl0IGVuZ2luZS5tb25pdG9yUHJvZ3Jlc3MoKTtcblxuICAgICAgZXhwZWN0KG1vbml0b3JpbmcubmVlZHNNYW51YWxJbnRlcnZlbnRpb24pLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QobW9uaXRvcmluZy5yZWNvbW1lbmRhdGlvbnMuc29tZShyID0+XG4gICAgICAgIHIuaW5jbHVkZXMoJ21hbnVhbCByZXZpZXcnKSB8fCByLmluY2x1ZGVzKCdkb2N1bWVudGF0aW9uJylcbiAgICAgICkpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgYWRqdXN0IHRhcmdldHMgYmFzZWQgb24gaGlzdG9yaWNhbCBwZXJmb3JtYW5jZScsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFkZCBzdWNjZXNzZnVsIGJhdGNoIGhpc3RvcnlcbiAgICAgIGNvbnN0IHN1Y2Nlc3NmdWxCYXRjaCA9IHtcbiAgICAgICAgYmF0Y2hOdW1iZXI6IDEsXG4gICAgICAgIGZpbGVzUHJvY2Vzc2VkOiAxMCxcbiAgICAgICAgYW55VHlwZXNBbmFseXplZDogMjAsXG4gICAgICAgIHJlcGxhY2VtZW50c0F0dGVtcHRlZDogMTUsXG4gICAgICAgIHJlcGxhY2VtZW50c1N1Y2Nlc3NmdWw6IDEyLCAvLyBIaWdoIHN1Y2Nlc3MgcmF0ZVxuICAgICAgICBjb21waWxhdGlvbkVycm9yczogMCxcbiAgICAgICAgcm9sbGJhY2tzUGVyZm9ybWVkOiAwLFxuICAgICAgICBleGVjdXRpb25UaW1lOiAyMDAwLFxuICAgICAgICBzYWZldHlTY29yZTogMC45NVxuICAgICAgfTtcblxuICAgICAgKGVuZ2luZSBhcyBhbnkpLmJhdGNoSGlzdG9yeS5wdXNoKHN1Y2Nlc3NmdWxCYXRjaCk7XG5cbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrUmV0dXJuVmFsdWUoJ3NyYy90ZXN0MS50c1xcbnNyYy90ZXN0Mi50c1xcbicpO1xuICAgICAgbW9ja0ZzLnJlYWRGaWxlU3luYy5tb2NrUmV0dXJuVmFsdWUoJ2NvbnN0IGl0ZW1zOiBhbnlbXSA9IFtdOycpO1xuXG4gICAgICBjb25zdCB0YXJnZXRJbmZvID0gYXdhaXQgZW5naW5lLnNldFJlYWxpc3RpY1RhcmdldHMoKTtcblxuICAgICAgLy8gU2hvdWxkIGluY3JlYXNlIHRhcmdldCBkdWUgdG8gaGlnaCBzdWNjZXNzIHJhdGVcbiAgICAgIGV4cGVjdCh0YXJnZXRJbmZvLnJlYXNvbmluZy5zb21lKHIgPT5cbiAgICAgICAgci5pbmNsdWRlcygnSGlnaCBoaXN0b3JpY2FsIHN1Y2Nlc3MgcmF0ZScpXG4gICAgICApKS50b0JlKHRydWUpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnU3RyYXRlZ3kgQWRhcHRhdGlvbicsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgcmVkdWNlIGJhdGNoIHNpemUgd2hlbiBzYWZldHkgc2NvcmUgaXMgbG93JywgKCkgPT4ge1xuICAgICAgY29uc3QgaW5pdGlhbENvbmZpZyA9IGVuZ2luZS5nZXRBZGFwdGl2ZUNvbmZpZygpO1xuICAgICAgY29uc3QgaW5pdGlhbEJhdGNoU2l6ZSA9IGluaXRpYWxDb25maWcubWF4RmlsZXNQZXJCYXRjaDtcblxuICAgICAgLy8gQWRkIGxvdyBzYWZldHkgc2NvcmUgYmF0Y2hlc1xuICAgICAgY29uc3QgbG93U2FmZXR5QmF0Y2ggPSB7XG4gICAgICAgIGJhdGNoTnVtYmVyOiAxLFxuICAgICAgICBmaWxlc1Byb2Nlc3NlZDogNSxcbiAgICAgICAgYW55VHlwZXNBbmFseXplZDogMTAsXG4gICAgICAgIHJlcGxhY2VtZW50c0F0dGVtcHRlZDogOCxcbiAgICAgICAgcmVwbGFjZW1lbnRzU3VjY2Vzc2Z1bDogMyxcbiAgICAgICAgY29tcGlsYXRpb25FcnJvcnM6IDIsXG4gICAgICAgIHJvbGxiYWNrc1BlcmZvcm1lZDogMSxcbiAgICAgICAgZXhlY3V0aW9uVGltZTogMTUwMCxcbiAgICAgICAgc2FmZXR5U2NvcmU6IDAuNSAvLyBMb3cgc2FmZXR5IHNjb3JlXG4gICAgICB9O1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkrKykge1xuICAgICAgICAoZW5naW5lIGFzIGFueSkuYmF0Y2hIaXN0b3J5LnB1c2goeyAuLi5sb3dTYWZldHlCYXRjaCwgYmF0Y2hOdW1iZXI6IGkgKyAxIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBUcmlnZ2VyIGFkYXB0YXRpb25cbiAgICAgIChlbmdpbmUgYXMgYW55KS5hZGFwdFN0cmF0ZWd5KCk7XG5cbiAgICAgIGNvbnN0IGFkYXB0ZWRDb25maWcgPSBlbmdpbmUuZ2V0QWRhcHRpdmVDb25maWcoKTtcbiAgICAgIGV4cGVjdChhZGFwdGVkQ29uZmlnLm1heEZpbGVzUGVyQmF0Y2gpLnRvQmVMZXNzVGhhbihpbml0aWFsQmF0Y2hTaXplKTtcbiAgICAgIGV4cGVjdChhZGFwdGVkQ29uZmlnLmNvbmZpZGVuY2VUaHJlc2hvbGQpLnRvQmVHcmVhdGVyVGhhbihpbml0aWFsQ29uZmlnLmNvbmZpZGVuY2VUaHJlc2hvbGQpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGluY3JlYXNlIGJhdGNoIHNpemUgd2hlbiBwZXJmb3JtYW5jZSBpcyBnb29kJywgKCkgPT4ge1xuICAgICAgY29uc3QgaW5pdGlhbENvbmZpZyA9IGVuZ2luZS5nZXRBZGFwdGl2ZUNvbmZpZygpO1xuICAgICAgY29uc3QgaW5pdGlhbEJhdGNoU2l6ZSA9IGluaXRpYWxDb25maWcubWF4RmlsZXNQZXJCYXRjaDtcblxuICAgICAgLy8gQWRkIGhpZ2ggcGVyZm9ybWFuY2UgYmF0Y2hlc1xuICAgICAgY29uc3QgaGlnaFBlcmZvcm1hbmNlQmF0Y2ggPSB7XG4gICAgICAgIGJhdGNoTnVtYmVyOiAxLFxuICAgICAgICBmaWxlc1Byb2Nlc3NlZDogMTAsXG4gICAgICAgIGFueVR5cGVzQW5hbHl6ZWQ6IDIwLFxuICAgICAgICByZXBsYWNlbWVudHNBdHRlbXB0ZWQ6IDE4LFxuICAgICAgICByZXBsYWNlbWVudHNTdWNjZXNzZnVsOiAxNixcbiAgICAgICAgY29tcGlsYXRpb25FcnJvcnM6IDAsXG4gICAgICAgIHJvbGxiYWNrc1BlcmZvcm1lZDogMCxcbiAgICAgICAgZXhlY3V0aW9uVGltZTogMTAwMCxcbiAgICAgICAgc2FmZXR5U2NvcmU6IDAuOTVcbiAgICAgIH07XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgICAgIChlbmdpbmUgYXMgYW55KS5iYXRjaEhpc3RvcnkucHVzaCh7IC4uLmhpZ2hQZXJmb3JtYW5jZUJhdGNoLCBiYXRjaE51bWJlcjogaSArIDEgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFRyaWdnZXIgYWRhcHRhdGlvblxuICAgICAgKGVuZ2luZSBhcyBhbnkpLmFkYXB0U3RyYXRlZ3koKTtcblxuICAgICAgY29uc3QgYWRhcHRlZENvbmZpZyA9IGVuZ2luZS5nZXRBZGFwdGl2ZUNvbmZpZygpO1xuICAgICAgZXhwZWN0KGFkYXB0ZWRDb25maWcubWF4RmlsZXNQZXJCYXRjaCkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbChpbml0aWFsQmF0Y2hTaXplKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0Z1bGwgQ2FtcGFpZ24gRXhlY3V0aW9uJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBleGVjdXRlIGZ1bGwgY2FtcGFpZ24gd2l0aCBwcm9ncmVzcyB0cmFja2luZycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE1vY2sgbWluaW1hbCBmaWxlIHN5c3RlbSBmb3IgcXVpY2sgdGVzdFxuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tJbXBsZW1lbnRhdGlvbigoY29tbWFuZCkgPT4ge1xuICAgICAgICBpZiAoY29tbWFuZC5pbmNsdWRlcygnZ3JlcCAtYyBcImVycm9yIFRTXCInKSkge1xuICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKCdObyBtYXRjaGVzJykgYXMgYW55O1xuICAgICAgICAgIGVycm9yLnN0YXR1cyA9IDE7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnOyAvLyBObyBmaWxlcyB0byBwcm9jZXNzXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZW5naW5lLmV4ZWN1dGVGdWxsQ2FtcGFpZ24obW9ja0NvbmZpZyk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvSGF2ZVByb3BlcnR5KCd0b3RhbEFueVR5cGVzQW5hbHl6ZWQnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvSGF2ZVByb3BlcnR5KCdyZWR1Y3Rpb25BY2hpZXZlZCcpO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG9IYXZlUHJvcGVydHkoJ3NhZmV0eUV2ZW50cycpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5zYWZldHlFdmVudHMpLnRvQmVJbnN0YW5jZU9mKEFycmF5KTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==