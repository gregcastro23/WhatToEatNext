a0ada42cfaa58f46837a7c7629b2e247
"use strict";
/**
 * Safe Type Replacer
 * Performs safe replacements of unintentional `any` types with more specific types
 *
 * Core Features:
 * - Atomic replacement operations with automatic rollback
 * - TypeScript compilation validation after each replacement
 * - Comprehensive backup system for all modified files
 * - Safety scoring system for replacement confidence
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SafeTypeReplacer = void 0;
const child_process_1 = require("child_process");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const types_1 = require("./types");
class SafeTypeReplacer {
    strategies;
    backupDirectory;
    safetyThreshold;
    validationTimeout;
    maxRetries;
    constructor(backupDirectory = './.any-elimination-backups', safetyThreshold = 0.7, validationTimeout = 30000, maxRetries = 3) {
        this.backupDirectory = backupDirectory;
        this.safetyThreshold = safetyThreshold;
        this.validationTimeout = validationTimeout;
        this.maxRetries = maxRetries;
        this.strategies = this.initializeStrategies();
        this.ensureBackupDirectory();
    }
    /**
     * Apply a single type replacement with comprehensive safety validation
     * Implements atomic operations with automatic rollback on any failure
     */
    async applyReplacement(replacement) {
        // Pre-validation: Check safety score
        const safetyScore = this.calculateSafetyScore(replacement);
        if (safetyScore < this.safetyThreshold) {
            return {
                success: false,
                appliedReplacements: [],
                failedReplacements: [replacement],
                compilationErrors: [`Safety score ${safetyScore} below threshold ${this.safetyThreshold}`],
                rollbackPerformed: false
            };
        }
        const backupPath = await this.createBackup(replacement.filePath);
        let retryCount = 0;
        while (retryCount < this.maxRetries) {
            try {
                // Atomic replacement operation
                const result = await this.performAtomicReplacement(replacement, backupPath);
                if (result.success) {
                    // Verify rollback capability before declaring success
                    const rollbackVerification = await this.verifyRollbackCapability(replacement.filePath, backupPath);
                    if (!rollbackVerification.success) {
                        await this.rollbackFromBackup(replacement.filePath, backupPath);
                        return {
                            success: false,
                            appliedReplacements: [],
                            failedReplacements: [replacement],
                            compilationErrors: [`Rollback verification failed: ${rollbackVerification.error}`],
                            rollbackPerformed: true,
                            backupPath
                        };
                    }
                    return result;
                }
                // If replacement failed but we can retry, increment counter
                retryCount++;
                if (retryCount < this.maxRetries) {
                    // Wait briefly before retry
                    await new Promise(resolve => setTimeout(resolve, 100 * retryCount));
                }
            }
            catch (error) {
                retryCount++;
                if (retryCount >= this.maxRetries) {
                    // Final rollback on exhausted retries
                    await this.rollbackFromBackup(replacement.filePath, backupPath);
                    return {
                        success: false,
                        appliedReplacements: [],
                        failedReplacements: [replacement],
                        compilationErrors: [error instanceof Error ? error.message : String(error)],
                        rollbackPerformed: true,
                        backupPath
                    };
                }
            }
        }
        // Should not reach here, but handle edge case
        await this.rollbackFromBackup(replacement.filePath, backupPath);
        return {
            success: false,
            appliedReplacements: [],
            failedReplacements: [replacement],
            compilationErrors: ['Maximum retries exceeded'],
            rollbackPerformed: true,
            backupPath
        };
    }
    /**
     * Process multiple replacements in batch with atomic operations
     */
    async processBatch(replacements) {
        const backupPaths = new Map();
        const appliedReplacements = [];
        const failedReplacements = [];
        const compilationErrors = [];
        try {
            // Create backups for all files
            for (const replacement of replacements) {
                if (!backupPaths.has(replacement.filePath)) {
                    const backupPath = await this.createBackup(replacement.filePath);
                    backupPaths.set(replacement.filePath, backupPath);
                }
            }
            // Group replacements by file for efficient processing
            const replacementsByFile = this.groupReplacementsByFile(replacements);
            // Apply replacements file by file
            for (const [filePath, fileReplacements] of Array.from(replacementsByFile.entries())) {
                try {
                    const result = await this.applyReplacementsToFile(filePath, fileReplacements);
                    appliedReplacements.push(...result.applied);
                    failedReplacements.push(...result.failed);
                    if (result.failed.length > 0) {
                        compilationErrors.push(...result.errors);
                    }
                }
                catch (error) {
                    failedReplacements.push(...fileReplacements);
                    compilationErrors.push(error instanceof Error ? error.message : String(error));
                }
            }
            // Validate overall TypeScript compilation
            const overallCompilation = await this.validateTypeScriptCompilation();
            if (!overallCompilation.success) {
                // Rollback all changes
                await this.rollbackAllFiles(backupPaths);
                return {
                    success: false,
                    appliedReplacements: [],
                    failedReplacements: replacements,
                    compilationErrors: overallCompilation.errors,
                    rollbackPerformed: true
                };
            }
            const success = failedReplacements.length === 0;
            return {
                success,
                appliedReplacements,
                failedReplacements,
                compilationErrors,
                rollbackPerformed: false
            };
        }
        catch (error) {
            // Emergency rollback
            await this.rollbackAllFiles(backupPaths);
            throw new types_1.SafetyProtocolError('Batch replacement failed with emergency rollback', Array.from(backupPaths.values())[0] || '', Array.from(backupPaths.keys()));
        }
    }
    initializeStrategies() {
        return [
            // Array type replacement strategy
            {
                pattern: /:\s*any\[\]/g,
                replacement: (match) => match.replace('any[]', 'unknown[]'),
                validator: (context) => context.codeSnippet.includes('any[]'),
                priority: 1
            },
            // Record type replacement strategy
            {
                pattern: /:\s*Record<\s*string\s*,\s*any\s*>/g,
                replacement: (match) => match.replace('any', 'unknown'),
                validator: (context) => context.codeSnippet.includes('Record<string, any>'),
                priority: 2
            },
            // Generic Record replacement
            {
                pattern: /:\s*Record<\s*number\s*,\s*any\s*>/g,
                replacement: (match) => match.replace('any', 'unknown'),
                validator: (context) => context.codeSnippet.includes('Record<number, any>'),
                priority: 2
            },
            // Index signature replacement
            {
                pattern: /\[key:\s*string\]\s*:\s*any/g,
                replacement: (match) => match.replace('any', 'unknown'),
                validator: (context) => context.codeSnippet.includes('[key: string]: any'),
                priority: 3
            },
            // Simple variable type replacement
            {
                pattern: /:\s*any(?=\s*[=;,\)])/g,
                replacement: (match) => match.replace('any', 'unknown'),
                validator: (context) => !context.codeSnippet.includes('catch') &&
                    !context.codeSnippet.includes('error'),
                priority: 4
            }
        ];
    }
    async createBackup(filePath) {
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const fileName = path.basename(filePath);
        const backupFileName = `${fileName}.${timestamp}.backup`;
        const backupPath = path.join(this.backupDirectory, backupFileName);
        const originalContent = fs.readFileSync(filePath, 'utf8');
        fs.writeFileSync(backupPath, originalContent, 'utf8');
        return backupPath;
    }
    async rollbackFromBackup(filePath, backupPath) {
        if (fs.existsSync(backupPath)) {
            const backupContent = fs.readFileSync(backupPath, 'utf8');
            fs.writeFileSync(filePath, backupContent, 'utf8');
        }
    }
    async rollbackAllFiles(backupPaths) {
        for (const [filePath, backupPath] of Array.from(backupPaths.entries())) {
            await this.rollbackFromBackup(filePath, backupPath);
        }
    }
    groupReplacementsByFile(replacements) {
        const grouped = new Map();
        for (const replacement of replacements) {
            if (!grouped.has(replacement.filePath)) {
                grouped.set(replacement.filePath, []);
            }
            grouped.get(replacement.filePath).push(replacement);
        }
        // Sort replacements within each file by line number (descending to avoid line number shifts)
        for (const fileReplacements of grouped.values()) {
            fileReplacements.sort((a, b) => b.lineNumber - a.lineNumber);
        }
        return grouped;
    }
    async applyReplacementsToFile(filePath, replacements) {
        const applied = [];
        const failed = [];
        const errors = [];
        try {
            let content = fs.readFileSync(filePath, 'utf8');
            let lines = content.split('\n');
            for (const replacement of replacements) {
                try {
                    const lineIndex = replacement.lineNumber - 1;
                    if (lineIndex < 0 || lineIndex >= lines.length) {
                        failed.push(replacement);
                        errors.push(`Invalid line number ${replacement.lineNumber} for file ${filePath}`);
                        continue;
                    }
                    const originalLine = lines[lineIndex];
                    const modifiedLine = originalLine.replace(replacement.original, replacement.replacement);
                    if (originalLine === modifiedLine) {
                        failed.push(replacement);
                        errors.push(`Pattern "${replacement.original}" not found in line: ${originalLine}`);
                        continue;
                    }
                    lines[lineIndex] = modifiedLine;
                    applied.push(replacement);
                }
                catch (error) {
                    failed.push(replacement);
                    errors.push(error instanceof Error ? error.message : String(error));
                }
            }
            // Write the modified content back to file
            const modifiedContent = lines.join('\n');
            fs.writeFileSync(filePath, modifiedContent, 'utf8');
        }
        catch (error) {
            // If file-level operation fails, mark all replacements as failed
            failed.push(...replacements);
            errors.push(error instanceof Error ? error.message : String(error));
        }
        return { applied, failed, errors };
    }
    async validateTypeScriptCompilation() {
        try {
            // Use the same pattern as existing campaign system
            (0, child_process_1.execSync)('yarn tsc --noEmit --skipLibCheck', {
                encoding: 'utf8',
                stdio: 'pipe',
                timeout: 30000 // 30 second timeout
            });
            return { success: true, errors: [] };
        }
        catch (error) {
            const errorOutput = error instanceof Error && 'stdout' in error
                ? error.stdout || error.stderr || error.message
                : String(error);
            // Extract TypeScript errors
            const errors = errorOutput
                .split('\n')
                .filter((line) => line.includes('error TS'))
                .slice(0, 10); // Limit to first 10 errors for readability
            return { success: false, errors };
        }
    }
    ensureBackupDirectory() {
        if (!fs.existsSync(this.backupDirectory)) {
            fs.mkdirSync(this.backupDirectory, { recursive: true });
        }
    }
    /**
     * Perform atomic replacement operation with comprehensive validation
     */
    async performAtomicReplacement(replacement, backupPath) {
        try {
            // Read original file content
            const originalContent = fs.readFileSync(replacement.filePath, 'utf8');
            const lines = originalContent.split('\n');
            // Validate line number
            const lineIndex = replacement.lineNumber - 1;
            if (lineIndex < 0 || lineIndex >= lines.length) {
                return {
                    success: false,
                    appliedReplacements: [],
                    failedReplacements: [replacement],
                    compilationErrors: [`Invalid line number ${replacement.lineNumber} for file ${replacement.filePath}`],
                    rollbackPerformed: false,
                    backupPath
                };
            }
            // Apply replacement
            const originalLine = lines[lineIndex];
            const modifiedLine = originalLine.replace(replacement.original, replacement.replacement);
            // Verify replacement was applied
            if (originalLine === modifiedLine) {
                return {
                    success: false,
                    appliedReplacements: [],
                    failedReplacements: [replacement],
                    compilationErrors: [`Pattern "${replacement.original}" not found in line: ${originalLine}`],
                    rollbackPerformed: false,
                    backupPath
                };
            }
            // Write modified content
            lines[lineIndex] = modifiedLine;
            const modifiedContent = lines.join('\n');
            fs.writeFileSync(replacement.filePath, modifiedContent, 'utf8');
            // Validate TypeScript compilation
            const compilationResult = await this.validateTypeScriptCompilation();
            if (!compilationResult.success) {
                // Rollback on compilation failure
                await this.rollbackFromBackup(replacement.filePath, backupPath);
                return {
                    success: false,
                    appliedReplacements: [],
                    failedReplacements: [replacement],
                    compilationErrors: compilationResult.errors,
                    rollbackPerformed: true,
                    backupPath
                };
            }
            return {
                success: true,
                appliedReplacements: [replacement],
                failedReplacements: [],
                compilationErrors: [],
                rollbackPerformed: false,
                backupPath
            };
        }
        catch (error) {
            // Emergency rollback
            await this.rollbackFromBackup(replacement.filePath, backupPath);
            return {
                success: false,
                appliedReplacements: [],
                failedReplacements: [replacement],
                compilationErrors: [error instanceof Error ? error.message : String(error)],
                rollbackPerformed: true,
                backupPath
            };
        }
    }
    /**
     * Verify that rollback capability is working correctly
     */
    async verifyRollbackCapability(filePath, backupPath) {
        try {
            // Read current file content
            const currentContent = fs.readFileSync(filePath, 'utf8');
            // Read backup content
            if (!fs.existsSync(backupPath)) {
                return { success: false, error: 'Backup file does not exist' };
            }
            const backupContent = fs.readFileSync(backupPath, 'utf8');
            // Temporarily rollback to verify capability
            fs.writeFileSync(filePath, backupContent, 'utf8');
            // Verify rollback worked
            const rolledBackContent = fs.readFileSync(filePath, 'utf8');
            if (rolledBackContent !== backupContent) {
                return { success: false, error: 'Rollback verification failed - content mismatch' };
            }
            // Restore current content
            fs.writeFileSync(filePath, currentContent, 'utf8');
            return { success: true };
        }
        catch (error) {
            return {
                success: false,
                error: error instanceof Error ? error.message : String(error)
            };
        }
    }
    /**
     * Calculate safety score for a replacement based on multiple factors
     */
    calculateSafetyScore(replacement) {
        let score = replacement.confidence; // Base score from classification confidence
        // Adjust based on replacement type
        if (replacement.replacement.includes('unknown')) {
            score += 0.1; // unknown is generally safer than any
        }
        // Adjust based on file type
        if (replacement.filePath.includes('.test.') || replacement.filePath.includes('__tests__')) {
            score += 0.05; // Test files are safer to modify
        }
        // Adjust based on replacement pattern complexity
        if (replacement.original === 'any[]') {
            score += 0.15; // Array replacements are very safe
        }
        else if (replacement.original.includes('Record<string, any>')) {
            score += 0.1; // Record replacements are generally safe
        }
        else if (replacement.original.includes('function') || replacement.original.includes('=>')) {
            score -= 0.1; // Function-related replacements are riskier
        }
        // Adjust based on line context (if available in the replacement)
        const lineContent = replacement.original;
        if (lineContent.includes('catch') || lineContent.includes('error')) {
            score -= 0.2; // Error handling contexts are riskier
        }
        if (lineContent.includes('interface') || lineContent.includes('type ')) {
            score += 0.05; // Type definitions are safer
        }
        // Ensure score stays within bounds
        return Math.max(0, Math.min(1, score));
    }
    /**
     * Get replacement strategies sorted by priority
     */
    getStrategies() {
        return [...this.strategies].sort((a, b) => a.priority - b.priority);
    }
    /**
     * Add a custom replacement strategy
     */
    addStrategy(strategy) {
        this.strategies.push(strategy);
        this.strategies.sort((a, b) => a.priority - b.priority);
    }
    /**
     * Get backup directory path
     */
    getBackupDirectory() {
        return this.backupDirectory;
    }
    /**
     * Clean up old backup files (older than specified days)
     */
    cleanupOldBackups(daysToKeep = 7) {
        try {
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);
            const files = fs.readdirSync(this.backupDirectory);
            for (const file of files) {
                if (file.endsWith('.backup')) {
                    const filePath = path.join(this.backupDirectory, file);
                    const stats = fs.statSync(filePath);
                    if (stats.mtime < cutoffDate) {
                        fs.unlinkSync(filePath);
                    }
                }
            }
        }
        catch (error) {
            // Log error but don't throw - cleanup is not critical
            console.warn('Failed to cleanup old backups:', error);
        }
    }
}
exports.SafeTypeReplacer = SafeTypeReplacer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,