937da8289570922b2c10197ad0c32ed9
"use strict";
/**
 * Safe Type Replacer
 * Performs safe replacements of unintentional `any` types with more specific types
 *
 * Core Features:
 * - Atomic replacement operations with automatic rollback
 * - TypeScript compilation validation after each replacement
 * - Comprehensive backup system for all modified files
 * - Safety scoring system for replacement confidence
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SafeTypeReplacer = void 0;
const child_process_1 = require("child_process");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const types_1 = require("./types");
class SafeTypeReplacer {
    strategies;
    backupDirectory;
    safetyThreshold;
    validationTimeout;
    maxRetries;
    constructor(backupDirectory = './.any-elimination-backups', safetyThreshold = 0.7, validationTimeout = 30000, maxRetries = 3) {
        this.backupDirectory = backupDirectory;
        this.safetyThreshold = safetyThreshold;
        this.validationTimeout = validationTimeout;
        this.maxRetries = maxRetries;
        this.strategies = this.initializeStrategies();
        this.ensureBackupDirectory();
    }
    /**
     * Apply a single type replacement with comprehensive safety validation
     * Implements atomic operations with automatic rollback on any failure
     */
    async applyReplacement(replacement) {
        // Pre-validation: Check safety score
        const safetyScore = this.calculateSafetyScore(replacement);
        if (safetyScore < this.safetyThreshold) {
            return {
                success: false,
                appliedReplacements: [],
                failedReplacements: [replacement],
                compilationErrors: [`Safety score ${safetyScore} below threshold ${this.safetyThreshold}`],
                rollbackPerformed: false
            };
        }
        const backupPath = await this.createBackup(replacement.filePath);
        let retryCount = 0;
        while (retryCount < this.maxRetries) {
            try {
                // Atomic replacement operation
                const result = await this.performAtomicReplacement(replacement, backupPath);
                if (result.success) {
                    // Verify rollback capability before declaring success
                    const rollbackVerification = await this.verifyRollbackCapability(replacement.filePath, backupPath);
                    if (!rollbackVerification.success) {
                        await this.rollbackFromBackup(replacement.filePath, backupPath);
                        return {
                            success: false,
                            appliedReplacements: [],
                            failedReplacements: [replacement],
                            compilationErrors: [`Rollback verification failed: ${rollbackVerification.error}`],
                            rollbackPerformed: true,
                            backupPath
                        };
                    }
                    return result;
                }
                else {
                    // If replacement failed with specific errors, return immediately (don't retry)
                    return result;
                }
            }
            catch (error) {
                retryCount++;
                if (retryCount >= this.maxRetries) {
                    // Final rollback on exhausted retries
                    await this.rollbackFromBackup(replacement.filePath, backupPath);
                    return {
                        success: false,
                        appliedReplacements: [],
                        failedReplacements: [replacement],
                        compilationErrors: [error instanceof Error ? error.message : String(error)],
                        rollbackPerformed: true,
                        backupPath
                    };
                }
                // Wait briefly before retry
                await new Promise(resolve => setTimeout(resolve, 100 * retryCount));
            }
        }
        // Should not reach here, but handle edge case
        await this.rollbackFromBackup(replacement.filePath, backupPath);
        return {
            success: false,
            appliedReplacements: [],
            failedReplacements: [replacement],
            compilationErrors: ['Maximum retries exceeded'],
            rollbackPerformed: true,
            backupPath
        };
    }
    /**
     * Process multiple replacements in batch with atomic operations
     */
    async processBatch(replacements) {
        const backupPaths = new Map();
        const appliedReplacements = [];
        const failedReplacements = [];
        const compilationErrors = [];
        try {
            // Create backups for all files
            for (const replacement of replacements) {
                if (!backupPaths.has(replacement.filePath)) {
                    const backupPath = await this.createBackup(replacement.filePath);
                    backupPaths.set(replacement.filePath, backupPath);
                }
            }
            // Group replacements by file for efficient processing
            const replacementsByFile = this.groupReplacementsByFile(replacements);
            // Apply replacements file by file
            for (const [filePath, fileReplacements] of Array.from(replacementsByFile.entries())) {
                try {
                    const result = await this.applyReplacementsToFile(filePath, fileReplacements);
                    appliedReplacements.push(...result.applied);
                    failedReplacements.push(...result.failed);
                    if (result.failed.length > 0) {
                        compilationErrors.push(...result.errors);
                    }
                }
                catch (error) {
                    failedReplacements.push(...fileReplacements);
                    compilationErrors.push(error instanceof Error ? error.message : String(error));
                }
            }
            // Validate overall TypeScript compilation
            const overallCompilation = await this.validateTypeScriptCompilation();
            if (!overallCompilation.success) {
                // Rollback all changes
                await this.rollbackAllFiles(backupPaths);
                return {
                    success: false,
                    appliedReplacements: [],
                    failedReplacements: replacements,
                    compilationErrors: overallCompilation.errors,
                    rollbackPerformed: true
                };
            }
            const success = failedReplacements.length === 0;
            return {
                success,
                appliedReplacements,
                failedReplacements,
                compilationErrors,
                rollbackPerformed: false
            };
        }
        catch (error) {
            // Emergency rollback
            await this.rollbackAllFiles(backupPaths);
            throw new types_1.SafetyProtocolError('Batch replacement failed with emergency rollback', Array.from(backupPaths.values())[0] || '', Array.from(backupPaths.keys()));
        }
    }
    initializeStrategies() {
        return [
            // Array type replacement strategy
            {
                pattern: /:\s*any\[\]/g,
                replacement: (match) => match.replace('any[]', 'unknown[]'),
                validator: (context) => context.codeSnippet.includes('any[]'),
                priority: 1
            },
            // Record type replacement strategy
            {
                pattern: /:\s*Record<\s*string\s*,\s*any\s*>/g,
                replacement: (match) => match.replace('any', 'unknown'),
                validator: (context) => context.codeSnippet.includes('Record<string, any>'),
                priority: 2
            },
            // Generic Record replacement
            {
                pattern: /:\s*Record<\s*number\s*,\s*any\s*>/g,
                replacement: (match) => match.replace('any', 'unknown'),
                validator: (context) => context.codeSnippet.includes('Record<number, any>'),
                priority: 2
            },
            // Index signature replacement
            {
                pattern: /\[key:\s*string\]\s*:\s*any/g,
                replacement: (match) => match.replace('any', 'unknown'),
                validator: (context) => context.codeSnippet.includes('[key: string]: any'),
                priority: 3
            },
            // Simple variable type replacement
            {
                pattern: /:\s*any(?=\s*[=;,\)])/g,
                replacement: (match) => match.replace('any', 'unknown'),
                validator: (context) => !context.codeSnippet.includes('catch') &&
                    !context.codeSnippet.includes('error'),
                priority: 4
            }
        ];
    }
    async createBackup(filePath) {
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const fileName = path.basename(filePath);
        const backupFileName = `${fileName}.${timestamp}.backup`;
        const backupPath = path.join(this.backupDirectory, backupFileName);
        const originalContent = fs.readFileSync(filePath, 'utf8');
        fs.writeFileSync(backupPath, originalContent, 'utf8');
        return backupPath;
    }
    async rollbackFromBackup(filePath, backupPath) {
        if (fs.existsSync(backupPath)) {
            const backupContent = fs.readFileSync(backupPath, 'utf8');
            fs.writeFileSync(filePath, backupContent, 'utf8');
        }
    }
    async rollbackAllFiles(backupPaths) {
        for (const [filePath, backupPath] of Array.from(backupPaths.entries())) {
            await this.rollbackFromBackup(filePath, backupPath);
        }
    }
    groupReplacementsByFile(replacements) {
        const grouped = new Map();
        for (const replacement of replacements) {
            if (!grouped.has(replacement.filePath)) {
                grouped.set(replacement.filePath, []);
            }
            grouped.get(replacement.filePath).push(replacement);
        }
        // Sort replacements within each file by line number (descending to avoid line number shifts)
        for (const fileReplacements of grouped.values()) {
            fileReplacements.sort((a, b) => b.lineNumber - a.lineNumber);
        }
        return grouped;
    }
    async applyReplacementsToFile(filePath, replacements) {
        const applied = [];
        const failed = [];
        const errors = [];
        try {
            let content = fs.readFileSync(filePath, 'utf8');
            let lines = content.split('\n');
            for (const replacement of replacements) {
                try {
                    const lineIndex = replacement.lineNumber - 1;
                    if (lineIndex < 0 || lineIndex >= lines.length) {
                        failed.push(replacement);
                        errors.push(`Invalid line number ${replacement.lineNumber} for file ${filePath}`);
                        continue;
                    }
                    const originalLine = lines[lineIndex];
                    const modifiedLine = originalLine.replace(replacement.original, replacement.replacement);
                    if (originalLine === modifiedLine) {
                        failed.push(replacement);
                        errors.push(`Pattern "${replacement.original}" not found in line: ${originalLine}`);
                        continue;
                    }
                    lines[lineIndex] = modifiedLine;
                    applied.push(replacement);
                }
                catch (error) {
                    failed.push(replacement);
                    errors.push(error instanceof Error ? error.message : String(error));
                }
            }
            // Write the modified content back to file
            const modifiedContent = lines.join('\n');
            fs.writeFileSync(filePath, modifiedContent, 'utf8');
        }
        catch (error) {
            // If file-level operation fails, mark all replacements as failed
            failed.push(...replacements);
            errors.push(error instanceof Error ? error.message : String(error));
        }
        return { applied, failed, errors };
    }
    async validateTypeScriptCompilation() {
        try {
            // Use the same pattern as existing campaign system
            (0, child_process_1.execSync)('yarn tsc --noEmit --skipLibCheck', {
                encoding: 'utf8',
                stdio: 'pipe',
                timeout: 30000 // 30 second timeout
            });
            return { success: true, errors: [] };
        }
        catch (error) {
            const errorOutput = error instanceof Error && 'stdout' in error
                ? error.stdout || error.stderr || error.message
                : String(error);
            // Extract TypeScript errors
            const errors = errorOutput
                .split('\n')
                .filter((line) => line.includes('error TS'))
                .slice(0, 10); // Limit to first 10 errors for readability
            return { success: false, errors };
        }
    }
    ensureBackupDirectory() {
        if (!fs.existsSync(this.backupDirectory)) {
            fs.mkdirSync(this.backupDirectory, { recursive: true });
        }
    }
    /**
     * Perform atomic replacement operation with comprehensive validation
     */
    async performAtomicReplacement(replacement, backupPath) {
        try {
            // Read original file content
            const originalContent = fs.readFileSync(replacement.filePath, 'utf8');
            const lines = originalContent.split('\n');
            // Validate line number
            const lineIndex = replacement.lineNumber - 1;
            if (lineIndex < 0 || lineIndex >= lines.length) {
                return {
                    success: false,
                    appliedReplacements: [],
                    failedReplacements: [replacement],
                    compilationErrors: [`Invalid line number ${replacement.lineNumber} for file ${replacement.filePath}`],
                    rollbackPerformed: false,
                    backupPath
                };
            }
            // Apply replacement
            const originalLine = lines[lineIndex];
            const modifiedLine = originalLine.replace(replacement.original, replacement.replacement);
            // Verify replacement was applied
            if (originalLine === modifiedLine) {
                return {
                    success: false,
                    appliedReplacements: [],
                    failedReplacements: [replacement],
                    compilationErrors: [`Pattern "${replacement.original}" not found in line: ${originalLine}`],
                    rollbackPerformed: false,
                    backupPath
                };
            }
            // Write modified content
            lines[lineIndex] = modifiedLine;
            const modifiedContent = lines.join('\n');
            fs.writeFileSync(replacement.filePath, modifiedContent, 'utf8');
            // Validate TypeScript compilation
            const compilationResult = await this.validateTypeScriptCompilation();
            if (!compilationResult.success) {
                // Rollback on compilation failure
                await this.rollbackFromBackup(replacement.filePath, backupPath);
                return {
                    success: false,
                    appliedReplacements: [],
                    failedReplacements: [replacement],
                    compilationErrors: compilationResult.errors,
                    rollbackPerformed: true,
                    backupPath
                };
            }
            return {
                success: true,
                appliedReplacements: [replacement],
                failedReplacements: [],
                compilationErrors: [],
                rollbackPerformed: false,
                backupPath
            };
        }
        catch (error) {
            // Don't rollback here - let the calling method handle it
            throw error;
        }
    }
    /**
     * Verify that rollback capability is working correctly
     */
    async verifyRollbackCapability(filePath, backupPath) {
        try {
            // Read backup content
            if (!fs.existsSync(backupPath)) {
                return { success: false, error: 'Backup file does not exist' };
            }
            const backupContent = fs.readFileSync(backupPath, 'utf8');
            // For testing purposes, we'll just verify the backup exists and is readable
            // In a real scenario, we might do a more comprehensive test
            if (backupContent.length === 0) {
                return { success: false, error: 'Backup file is empty' };
            }
            return { success: true };
        }
        catch (error) {
            return {
                success: false,
                error: error instanceof Error ? error.message : String(error)
            };
        }
    }
    /**
     * Calculate safety score for a replacement based on multiple factors
     */
    calculateSafetyScore(replacement) {
        let score = replacement.confidence; // Base score from classification confidence
        // Adjust based on replacement type
        if (replacement.replacement.includes('unknown')) {
            score += 0.1; // unknown is generally safer than any
        }
        // Adjust based on file type
        if (replacement.filePath.includes('.test.') || replacement.filePath.includes('__tests__')) {
            score += 0.05; // Test files are safer to modify
        }
        // Adjust based on replacement pattern complexity
        if (replacement.original === 'any[]') {
            score += 0.15; // Array replacements are very safe
        }
        else if (replacement.original.includes('Record<string, any>')) {
            score += 0.1; // Record replacements are generally safe
        }
        else if (replacement.original.includes('function') || replacement.original.includes('=>')) {
            score -= 0.1; // Function-related replacements are riskier
        }
        // Adjust based on line context (if available in the replacement)
        const lineContent = replacement.original;
        if (lineContent.includes('catch') || lineContent.includes('error')) {
            score -= 0.2; // Error handling contexts are riskier
        }
        if (lineContent.includes('interface') || lineContent.includes('type ')) {
            score += 0.05; // Type definitions are safer
        }
        // Ensure score stays within bounds
        return Math.max(0, Math.min(1, score));
    }
    /**
     * Get replacement strategies sorted by priority
     */
    getStrategies() {
        return [...this.strategies].sort((a, b) => a.priority - b.priority);
    }
    /**
     * Add a custom replacement strategy
     */
    addStrategy(strategy) {
        this.strategies.push(strategy);
        this.strategies.sort((a, b) => a.priority - b.priority);
    }
    /**
     * Get backup directory path
     */
    getBackupDirectory() {
        return this.backupDirectory;
    }
    /**
     * Clean up old backup files (older than specified days)
     */
    cleanupOldBackups(daysToKeep = 7) {
        try {
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);
            const files = fs.readdirSync(this.backupDirectory);
            for (const file of files) {
                if (file.endsWith('.backup')) {
                    const filePath = path.join(this.backupDirectory, file);
                    const stats = fs.statSync(filePath);
                    if (stats.mtime < cutoffDate) {
                        fs.unlinkSync(filePath);
                    }
                }
            }
        }
        catch (error) {
            // Log error but don't throw - cleanup is not critical
            console.warn('Failed to cleanup old backups:', error);
        }
    }
}
exports.SafeTypeReplacer = SafeTypeReplacer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9zZXJ2aWNlcy9jYW1wYWlnbi91bmludGVudGlvbmFsLWFueS1lbGltaW5hdGlvbi9TYWZlVHlwZVJlcGxhY2VyLnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7O0dBU0c7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUgsaURBQXlDO0FBQ3pDLHVDQUF5QjtBQUN6QiwyQ0FBNkI7QUFFN0IsbUNBTWlCO0FBRWpCLE1BQWEsZ0JBQWdCO0lBQ25CLFVBQVUsQ0FBd0I7SUFDbEMsZUFBZSxDQUFTO0lBQ3hCLGVBQWUsQ0FBUztJQUN4QixpQkFBaUIsQ0FBUztJQUMxQixVQUFVLENBQVM7SUFFM0IsWUFDRSxlQUFlLEdBQUcsNEJBQTRCLEVBQzlDLGVBQWUsR0FBRyxHQUFHLEVBQ3JCLGlCQUFpQixHQUFHLEtBQUssRUFDekIsVUFBVSxHQUFHLENBQUM7UUFFZCxJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztRQUN2QyxJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztRQUN2QyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsaUJBQWlCLENBQUM7UUFDM0MsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztRQUM5QyxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLGdCQUFnQixDQUFDLFdBQTRCO1FBQ2pELHFDQUFxQztRQUNyQyxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDM0QsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN0QyxPQUFPO2dCQUNMLE9BQU8sRUFBRSxLQUFLO2dCQUNkLG1CQUFtQixFQUFFLEVBQUU7Z0JBQ3ZCLGtCQUFrQixFQUFFLENB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RUQ7O09BRUc7SUFDSCxpQkFBaUIsQ0FBQyxVQUFVLEdBQUcsQ0FBQztRQUM5QixJQUFJO1lBQ0YsTUFBTSxVQUFVLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztZQUM5QixVQUFVLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxVQUFVLENBQUMsQ0FBQztZQUV0RCxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUVuRCxLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssRUFBRTtnQkFDeEIsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFO29CQUM1QixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLENBQUM7b0JBQ3ZELE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7b0JBRXBDLElBQUksS0FBSyxDQUFDLEtBQUssR0FBRyxVQUFVLEVBQUU7d0JBQzVCLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7cUJBQ3pCO2lCQUNGO2FBQ0Y7U0FDRjtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2Qsc0RBQXNEO1lBQ3RELE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0NBQWdDLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDdkQ7SUFDSCxDQUFDO0NBQ0Y7QUE5aEJELDRDQThoQkMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9zZXJ2aWNlcy9jYW1wYWlnbi91bmludGVudGlvbmFsLWFueS1lbGltaW5hdGlvbi9TYWZlVHlwZVJlcGxhY2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU2FmZSBUeXBlIFJlcGxhY2VyXG4gKiBQZXJmb3JtcyBzYWZlIHJlcGxhY2VtZW50cyBvZiB1bmludGVudGlvbmFsIGBhbnlgIHR5cGVzIHdpdGggbW9yZSBzcGVjaWZpYyB0eXBlc1xuICpcbiAqIENvcmUgRmVhdHVyZXM6XG4gKiAtIEF0b21pYyByZXBsYWNlbWVudCBvcGVyYXRpb25zIHdpdGggYXV0b21hdGljIHJvbGxiYWNrXG4gKiAtIFR5cGVTY3JpcHQgY29tcGlsYXRpb24gdmFsaWRhdGlvbiBhZnRlciBlYWNoIHJlcGxhY2VtZW50XG4gKiAtIENvbXByZWhlbnNpdmUgYmFja3VwIHN5c3RlbSBmb3IgYWxsIG1vZGlmaWVkIGZpbGVzXG4gKiAtIFNhZmV0eSBzY29yaW5nIHN5c3RlbSBmb3IgcmVwbGFjZW1lbnQgY29uZmlkZW5jZVxuICovXG5cbmltcG9ydCB7IGV4ZWNTeW5jIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQge1xuICAgIENsYXNzaWZpY2F0aW9uQ29udGV4dCxcbiAgICBSZXBsYWNlbWVudFJlc3VsdCxcbiAgICBSZXBsYWNlbWVudFN0cmF0ZWd5LFxuICAgIFNhZmV0eVByb3RvY29sRXJyb3IsXG4gICAgVHlwZVJlcGxhY2VtZW50XG59IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgU2FmZVR5cGVSZXBsYWNlciB7XG4gIHByaXZhdGUgc3RyYXRlZ2llczogUmVwbGFjZW1lbnRTdHJhdGVneVtdO1xuICBwcml2YXRlIGJhY2t1cERpcmVjdG9yeTogc3RyaW5nO1xuICBwcml2YXRlIHNhZmV0eVRocmVzaG9sZDogbnVtYmVyO1xuICBwcml2YXRlIHZhbGlkYXRpb25UaW1lb3V0OiBudW1iZXI7XG4gIHByaXZhdGUgbWF4UmV0cmllczogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGJhY2t1cERpcmVjdG9yeSA9ICcuLy5hbnktZWxpbWluYXRpb24tYmFja3VwcycsXG4gICAgc2FmZXR5VGhyZXNob2xkID0gMC43LFxuICAgIHZhbGlkYXRpb25UaW1lb3V0ID0gMzAwMDAsXG4gICAgbWF4UmV0cmllcyA9IDNcbiAgKSB7XG4gICAgdGhpcy5iYWNrdXBEaXJlY3RvcnkgPSBiYWNrdXBEaXJlY3Rvcnk7XG4gICAgdGhpcy5zYWZldHlUaHJlc2hvbGQgPSBzYWZldHlUaHJlc2hvbGQ7XG4gICAgdGhpcy52YWxpZGF0aW9uVGltZW91dCA9IHZhbGlkYXRpb25UaW1lb3V0O1xuICAgIHRoaXMubWF4UmV0cmllcyA9IG1heFJldHJpZXM7XG4gICAgdGhpcy5zdHJhdGVnaWVzID0gdGhpcy5pbml0aWFsaXplU3RyYXRlZ2llcygpO1xuICAgIHRoaXMuZW5zdXJlQmFja3VwRGlyZWN0b3J5KCk7XG4gIH1cblxuICAvKipcbiAgICogQXBwbHkgYSBzaW5nbGUgdHlwZSByZXBsYWNlbWVudCB3aXRoIGNvbXByZWhlbnNpdmUgc2FmZXR5IHZhbGlkYXRpb25cbiAgICogSW1wbGVtZW50cyBhdG9taWMgb3BlcmF0aW9ucyB3aXRoIGF1dG9tYXRpYyByb2xsYmFjayBvbiBhbnkgZmFpbHVyZVxuICAgKi9cbiAgYXN5bmMgYXBwbHlSZXBsYWNlbWVudChyZXBsYWNlbWVudDogVHlwZVJlcGxhY2VtZW50KTogUHJvbWlzZTxSZXBsYWNlbWVudFJlc3VsdD4ge1xuICAgIC8vIFByZS12YWxpZGF0aW9uOiBDaGVjayBzYWZldHkgc2NvcmVcbiAgICBjb25zdCBzYWZldHlTY29yZSA9IHRoaXMuY2FsY3VsYXRlU2FmZXR5U2NvcmUocmVwbGFjZW1lbnQpO1xuICAgIGlmIChzYWZldHlTY29yZSA8IHRoaXMuc2FmZXR5VGhyZXNob2xkKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgYXBwbGllZFJlcGxhY2VtZW50czogW10sXG4gICAgICAgIGZhaWxlZFJlcGxhY2VtZW50czogW3JlcGxhY2VtZW50XSxcbiAgICAgICAgY29tcGlsYXRpb25FcnJvcnM6IFtgU2FmZXR5IHNjb3JlICR7c2FmZXR5U2NvcmV9IGJlbG93IHRocmVzaG9sZCAke3RoaXMuc2FmZXR5VGhyZXNob2xkfWBdLFxuICAgICAgICByb2xsYmFja1BlcmZvcm1lZDogZmFsc2VcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3QgYmFja3VwUGF0aCA9IGF3YWl0IHRoaXMuY3JlYXRlQmFja3VwKHJlcGxhY2VtZW50LmZpbGVQYXRoKTtcbiAgICBsZXQgcmV0cnlDb3VudCA9IDA7XG5cbiAgICB3aGlsZSAocmV0cnlDb3VudCA8IHRoaXMubWF4UmV0cmllcykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gQXRvbWljIHJlcGxhY2VtZW50IG9wZXJhdGlvblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnBlcmZvcm1BdG9taWNSZXBsYWNlbWVudChyZXBsYWNlbWVudCwgYmFja3VwUGF0aCk7XG5cbiAgICAgICAgaWYgKHJlc3VsdC5zdWNjZXNzKSB7XG4gICAgICAgICAgLy8gVmVyaWZ5IHJvbGxiYWNrIGNhcGFiaWxpdHkgYmVmb3JlIGRlY2xhcmluZyBzdWNjZXNzXG4gICAgICAgICAgY29uc3Qgcm9sbGJhY2tWZXJpZmljYXRpb24gPSBhd2FpdCB0aGlzLnZlcmlmeVJvbGxiYWNrQ2FwYWJpbGl0eShyZXBsYWNlbWVudC5maWxlUGF0aCwgYmFja3VwUGF0aCk7XG4gICAgICAgICAgaWYgKCFyb2xsYmFja1ZlcmlmaWNhdGlvbi5zdWNjZXNzKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnJvbGxiYWNrRnJvbUJhY2t1cChyZXBsYWNlbWVudC5maWxlUGF0aCwgYmFja3VwUGF0aCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgYXBwbGllZFJlcGxhY2VtZW50czogW10sXG4gICAgICAgICAgICAgIGZhaWxlZFJlcGxhY2VtZW50czogW3JlcGxhY2VtZW50XSxcbiAgICAgICAgICAgICAgY29tcGlsYXRpb25FcnJvcnM6IFtgUm9sbGJhY2sgdmVyaWZpY2F0aW9uIGZhaWxlZDogJHtyb2xsYmFja1ZlcmlmaWNhdGlvbi5lcnJvcn1gXSxcbiAgICAgICAgICAgICAgcm9sbGJhY2tQZXJmb3JtZWQ6IHRydWUsXG4gICAgICAgICAgICAgIGJhY2t1cFBhdGhcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBJZiByZXBsYWNlbWVudCBmYWlsZWQgd2l0aCBzcGVjaWZpYyBlcnJvcnMsIHJldHVybiBpbW1lZGlhdGVseSAoZG9uJ3QgcmV0cnkpXG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICByZXRyeUNvdW50Kys7XG4gICAgICAgIGlmIChyZXRyeUNvdW50ID49IHRoaXMubWF4UmV0cmllcykge1xuICAgICAgICAgIC8vIEZpbmFsIHJvbGxiYWNrIG9uIGV4aGF1c3RlZCByZXRyaWVzXG4gICAgICAgICAgYXdhaXQgdGhpcy5yb2xsYmFja0Zyb21CYWNrdXAocmVwbGFjZW1lbnQuZmlsZVBhdGgsIGJhY2t1cFBhdGgpO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgIGFwcGxpZWRSZXBsYWNlbWVudHM6IFtdLFxuICAgICAgICAgICAgZmFpbGVkUmVwbGFjZW1lbnRzOiBbcmVwbGFjZW1lbnRdLFxuICAgICAgICAgICAgY29tcGlsYXRpb25FcnJvcnM6IFtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcildLFxuICAgICAgICAgICAgcm9sbGJhY2tQZXJmb3JtZWQ6IHRydWUsXG4gICAgICAgICAgICBiYWNrdXBQYXRoXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdhaXQgYnJpZWZseSBiZWZvcmUgcmV0cnlcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMCAqIHJldHJ5Q291bnQpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTaG91bGQgbm90IHJlYWNoIGhlcmUsIGJ1dCBoYW5kbGUgZWRnZSBjYXNlXG4gICAgYXdhaXQgdGhpcy5yb2xsYmFja0Zyb21CYWNrdXAocmVwbGFjZW1lbnQuZmlsZVBhdGgsIGJhY2t1cFBhdGgpO1xuICAgIHJldHVybiB7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGFwcGxpZWRSZXBsYWNlbWVudHM6IFtdLFxuICAgICAgZmFpbGVkUmVwbGFjZW1lbnRzOiBbcmVwbGFjZW1lbnRdLFxuICAgICAgY29tcGlsYXRpb25FcnJvcnM6IFsnTWF4aW11bSByZXRyaWVzIGV4Y2VlZGVkJ10sXG4gICAgICByb2xsYmFja1BlcmZvcm1lZDogdHJ1ZSxcbiAgICAgIGJhY2t1cFBhdGhcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFByb2Nlc3MgbXVsdGlwbGUgcmVwbGFjZW1lbnRzIGluIGJhdGNoIHdpdGggYXRvbWljIG9wZXJhdGlvbnNcbiAgICovXG4gIGFzeW5jIHByb2Nlc3NCYXRjaChyZXBsYWNlbWVudHM6IFR5cGVSZXBsYWNlbWVudFtdKTogUHJvbWlzZTxSZXBsYWNlbWVudFJlc3VsdD4ge1xuICAgIGNvbnN0IGJhY2t1cFBhdGhzOiBNYXA8c3RyaW5nLCBzdHJpbmc+ID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IGFwcGxpZWRSZXBsYWNlbWVudHM6IFR5cGVSZXBsYWNlbWVudFtdID0gW107XG4gICAgY29uc3QgZmFpbGVkUmVwbGFjZW1lbnRzOiBUeXBlUmVwbGFjZW1lbnRbXSA9IFtdO1xuICAgIGNvbnN0IGNvbXBpbGF0aW9uRXJyb3JzOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIENyZWF0ZSBiYWNrdXBzIGZvciBhbGwgZmlsZXNcbiAgICAgIGZvciAoY29uc3QgcmVwbGFjZW1lbnQgb2YgcmVwbGFjZW1lbnRzKSB7XG4gICAgICAgIGlmICghYmFja3VwUGF0aHMuaGFzKHJlcGxhY2VtZW50LmZpbGVQYXRoKSkge1xuICAgICAgICAgIGNvbnN0IGJhY2t1cFBhdGggPSBhd2FpdCB0aGlzLmNyZWF0ZUJhY2t1cChyZXBsYWNlbWVudC5maWxlUGF0aCk7XG4gICAgICAgICAgYmFja3VwUGF0aHMuc2V0KHJlcGxhY2VtZW50LmZpbGVQYXRoLCBiYWNrdXBQYXRoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBHcm91cCByZXBsYWNlbWVudHMgYnkgZmlsZSBmb3IgZWZmaWNpZW50IHByb2Nlc3NpbmdcbiAgICAgIGNvbnN0IHJlcGxhY2VtZW50c0J5RmlsZSA9IHRoaXMuZ3JvdXBSZXBsYWNlbWVudHNCeUZpbGUocmVwbGFjZW1lbnRzKTtcblxuICAgICAgLy8gQXBwbHkgcmVwbGFjZW1lbnRzIGZpbGUgYnkgZmlsZVxuICAgICAgZm9yIChjb25zdCBbZmlsZVBhdGgsIGZpbGVSZXBsYWNlbWVudHNdIG9mIEFycmF5LmZyb20ocmVwbGFjZW1lbnRzQnlGaWxlLmVudHJpZXMoKSkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmFwcGx5UmVwbGFjZW1lbnRzVG9GaWxlKGZpbGVQYXRoLCBmaWxlUmVwbGFjZW1lbnRzKTtcbiAgICAgICAgICBhcHBsaWVkUmVwbGFjZW1lbnRzLnB1c2goLi4ucmVzdWx0LmFwcGxpZWQpO1xuICAgICAgICAgIGZhaWxlZFJlcGxhY2VtZW50cy5wdXNoKC4uLnJlc3VsdC5mYWlsZWQpO1xuXG4gICAgICAgICAgaWYgKHJlc3VsdC5mYWlsZWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29tcGlsYXRpb25FcnJvcnMucHVzaCguLi5yZXN1bHQuZXJyb3JzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgZmFpbGVkUmVwbGFjZW1lbnRzLnB1c2goLi4uZmlsZVJlcGxhY2VtZW50cyk7XG4gICAgICAgICAgY29tcGlsYXRpb25FcnJvcnMucHVzaChlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcikpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFZhbGlkYXRlIG92ZXJhbGwgVHlwZVNjcmlwdCBjb21waWxhdGlvblxuICAgICAgY29uc3Qgb3ZlcmFsbENvbXBpbGF0aW9uID0gYXdhaXQgdGhpcy52YWxpZGF0ZVR5cGVTY3JpcHRDb21waWxhdGlvbigpO1xuICAgICAgaWYgKCFvdmVyYWxsQ29tcGlsYXRpb24uc3VjY2Vzcykge1xuICAgICAgICAvLyBSb2xsYmFjayBhbGwgY2hhbmdlc1xuICAgICAgICBhd2FpdCB0aGlzLnJvbGxiYWNrQWxsRmlsZXMoYmFja3VwUGF0aHMpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgYXBwbGllZFJlcGxhY2VtZW50czogW10sXG4gICAgICAgICAgZmFpbGVkUmVwbGFjZW1lbnRzOiByZXBsYWNlbWVudHMsXG4gICAgICAgICAgY29tcGlsYXRpb25FcnJvcnM6IG92ZXJhbGxDb21waWxhdGlvbi5lcnJvcnMsXG4gICAgICAgICAgcm9sbGJhY2tQZXJmb3JtZWQ6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgc3VjY2VzcyA9IGZhaWxlZFJlcGxhY2VtZW50cy5sZW5ndGggPT09IDA7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzLFxuICAgICAgICBhcHBsaWVkUmVwbGFjZW1lbnRzLFxuICAgICAgICBmYWlsZWRSZXBsYWNlbWVudHMsXG4gICAgICAgIGNvbXBpbGF0aW9uRXJyb3JzLFxuICAgICAgICByb2xsYmFja1BlcmZvcm1lZDogZmFsc2VcbiAgICAgIH07XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gRW1lcmdlbmN5IHJvbGxiYWNrXG4gICAgICBhd2FpdCB0aGlzLnJvbGxiYWNrQWxsRmlsZXMoYmFja3VwUGF0aHMpO1xuXG4gICAgICB0aHJvdyBuZXcgU2FmZXR5UHJvdG9jb2xFcnJvcihcbiAgICAgICAgJ0JhdGNoIHJlcGxhY2VtZW50IGZhaWxlZCB3aXRoIGVtZXJnZW5jeSByb2xsYmFjaycsXG4gICAgICAgIEFycmF5LmZyb20oYmFja3VwUGF0aHMudmFsdWVzKCkpWzBdIHx8ICcnLFxuICAgICAgICBBcnJheS5mcm9tKGJhY2t1cFBhdGhzLmtleXMoKSlcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBpbml0aWFsaXplU3RyYXRlZ2llcygpOiBSZXBsYWNlbWVudFN0cmF0ZWd5W10ge1xuICAgIHJldHVybiBbXG4gICAgICAvLyBBcnJheSB0eXBlIHJlcGxhY2VtZW50IHN0cmF0ZWd5XG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC86XFxzKmFueVxcW1xcXS9nLFxuICAgICAgICByZXBsYWNlbWVudDogKG1hdGNoOiBzdHJpbmcpID0+IG1hdGNoLnJlcGxhY2UoJ2FueVtdJywgJ3Vua25vd25bXScpLFxuICAgICAgICB2YWxpZGF0b3I6IChjb250ZXh0OiBDbGFzc2lmaWNhdGlvbkNvbnRleHQpID0+XG4gICAgICAgICAgY29udGV4dC5jb2RlU25pcHBldC5pbmNsdWRlcygnYW55W10nKSxcbiAgICAgICAgcHJpb3JpdHk6IDFcbiAgICAgIH0sXG5cbiAgICAgIC8vIFJlY29yZCB0eXBlIHJlcGxhY2VtZW50IHN0cmF0ZWd5XG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC86XFxzKlJlY29yZDxcXHMqc3RyaW5nXFxzKixcXHMqYW55XFxzKj4vZyxcbiAgICAgICAgcmVwbGFjZW1lbnQ6IChtYXRjaDogc3RyaW5nKSA9PiBtYXRjaC5yZXBsYWNlKCdhbnknLCAndW5rbm93bicpLFxuICAgICAgICB2YWxpZGF0b3I6IChjb250ZXh0OiBDbGFzc2lmaWNhdGlvbkNvbnRleHQpID0+XG4gICAgICAgICAgY29udGV4dC5jb2RlU25pcHBldC5pbmNsdWRlcygnUmVjb3JkPHN0cmluZywgYW55PicpLFxuICAgICAgICBwcmlvcml0eTogMlxuICAgICAgfSxcblxuICAgICAgLy8gR2VuZXJpYyBSZWNvcmQgcmVwbGFjZW1lbnRcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjogLzpcXHMqUmVjb3JkPFxccypudW1iZXJcXHMqLFxccyphbnlcXHMqPi9nLFxuICAgICAgICByZXBsYWNlbWVudDogKG1hdGNoOiBzdHJpbmcpID0+IG1hdGNoLnJlcGxhY2UoJ2FueScsICd1bmtub3duJyksXG4gICAgICAgIHZhbGlkYXRvcjogKGNvbnRleHQ6IENsYXNzaWZpY2F0aW9uQ29udGV4dCkgPT5cbiAgICAgICAgICBjb250ZXh0LmNvZGVTbmlwcGV0LmluY2x1ZGVzKCdSZWNvcmQ8bnVtYmVyLCBhbnk+JyksXG4gICAgICAgIHByaW9yaXR5OiAyXG4gICAgICB9LFxuXG4gICAgICAvLyBJbmRleCBzaWduYXR1cmUgcmVwbGFjZW1lbnRcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjogL1xcW2tleTpcXHMqc3RyaW5nXFxdXFxzKjpcXHMqYW55L2csXG4gICAgICAgIHJlcGxhY2VtZW50OiAobWF0Y2g6IHN0cmluZykgPT4gbWF0Y2gucmVwbGFjZSgnYW55JywgJ3Vua25vd24nKSxcbiAgICAgICAgdmFsaWRhdG9yOiAoY29udGV4dDogQ2xhc3NpZmljYXRpb25Db250ZXh0KSA9PlxuICAgICAgICAgIGNvbnRleHQuY29kZVNuaXBwZXQuaW5jbHVkZXMoJ1trZXk6IHN0cmluZ106IGFueScpLFxuICAgICAgICBwcmlvcml0eTogM1xuICAgICAgfSxcblxuICAgICAgLy8gU2ltcGxlIHZhcmlhYmxlIHR5cGUgcmVwbGFjZW1lbnRcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjogLzpcXHMqYW55KD89XFxzKls9OyxcXCldKS9nLFxuICAgICAgICByZXBsYWNlbWVudDogKG1hdGNoOiBzdHJpbmcpID0+IG1hdGNoLnJlcGxhY2UoJ2FueScsICd1bmtub3duJyksXG4gICAgICAgIHZhbGlkYXRvcjogKGNvbnRleHQ6IENsYXNzaWZpY2F0aW9uQ29udGV4dCkgPT5cbiAgICAgICAgICAhY29udGV4dC5jb2RlU25pcHBldC5pbmNsdWRlcygnY2F0Y2gnKSAmJlxuICAgICAgICAgICFjb250ZXh0LmNvZGVTbmlwcGV0LmluY2x1ZGVzKCdlcnJvcicpLFxuICAgICAgICBwcmlvcml0eTogNFxuICAgICAgfVxuICAgIF07XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGNyZWF0ZUJhY2t1cChmaWxlUGF0aDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkucmVwbGFjZSgvWzouXS9nLCAnLScpO1xuICAgIGNvbnN0IGZpbGVOYW1lID0gcGF0aC5iYXNlbmFtZShmaWxlUGF0aCk7XG4gICAgY29uc3QgYmFja3VwRmlsZU5hbWUgPSBgJHtmaWxlTmFtZX0uJHt0aW1lc3RhbXB9LmJhY2t1cGA7XG4gICAgY29uc3QgYmFja3VwUGF0aCA9IHBhdGguam9pbih0aGlzLmJhY2t1cERpcmVjdG9yeSwgYmFja3VwRmlsZU5hbWUpO1xuXG4gICAgY29uc3Qgb3JpZ2luYWxDb250ZW50ID0gZnMucmVhZEZpbGVTeW5jKGZpbGVQYXRoLCAndXRmOCcpO1xuICAgIGZzLndyaXRlRmlsZVN5bmMoYmFja3VwUGF0aCwgb3JpZ2luYWxDb250ZW50LCAndXRmOCcpO1xuXG4gICAgcmV0dXJuIGJhY2t1cFBhdGg7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHJvbGxiYWNrRnJvbUJhY2t1cChmaWxlUGF0aDogc3RyaW5nLCBiYWNrdXBQYXRoOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAoZnMuZXhpc3RzU3luYyhiYWNrdXBQYXRoKSkge1xuICAgICAgY29uc3QgYmFja3VwQ29udGVudCA9IGZzLnJlYWRGaWxlU3luYyhiYWNrdXBQYXRoLCAndXRmOCcpO1xuICAgICAgZnMud3JpdGVGaWxlU3luYyhmaWxlUGF0aCwgYmFja3VwQ29udGVudCwgJ3V0ZjgnKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHJvbGxiYWNrQWxsRmlsZXMoYmFja3VwUGF0aHM6IE1hcDxzdHJpbmcsIHN0cmluZz4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBmb3IgKGNvbnN0IFtmaWxlUGF0aCwgYmFja3VwUGF0aF0gb2YgQXJyYXkuZnJvbShiYWNrdXBQYXRocy5lbnRyaWVzKCkpKSB7XG4gICAgICBhd2FpdCB0aGlzLnJvbGxiYWNrRnJvbUJhY2t1cChmaWxlUGF0aCwgYmFja3VwUGF0aCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBncm91cFJlcGxhY2VtZW50c0J5RmlsZShyZXBsYWNlbWVudHM6IFR5cGVSZXBsYWNlbWVudFtdKTogTWFwPHN0cmluZywgVHlwZVJlcGxhY2VtZW50W10+IHtcbiAgICBjb25zdCBncm91cGVkID0gbmV3IE1hcDxzdHJpbmcsIFR5cGVSZXBsYWNlbWVudFtdPigpO1xuXG4gICAgZm9yIChjb25zdCByZXBsYWNlbWVudCBvZiByZXBsYWNlbWVudHMpIHtcbiAgICAgIGlmICghZ3JvdXBlZC5oYXMocmVwbGFjZW1lbnQuZmlsZVBhdGgpKSB7XG4gICAgICAgIGdyb3VwZWQuc2V0KHJlcGxhY2VtZW50LmZpbGVQYXRoLCBbXSk7XG4gICAgICB9XG4gICAgICBncm91cGVkLmdldChyZXBsYWNlbWVudC5maWxlUGF0aCkhLnB1c2gocmVwbGFjZW1lbnQpO1xuICAgIH1cblxuICAgIC8vIFNvcnQgcmVwbGFjZW1lbnRzIHdpdGhpbiBlYWNoIGZpbGUgYnkgbGluZSBudW1iZXIgKGRlc2NlbmRpbmcgdG8gYXZvaWQgbGluZSBudW1iZXIgc2hpZnRzKVxuICAgIGZvciAoY29uc3QgZmlsZVJlcGxhY2VtZW50cyBvZiBncm91cGVkLnZhbHVlcygpKSB7XG4gICAgICBmaWxlUmVwbGFjZW1lbnRzLnNvcnQoKGEsIGIpID0+IGIubGluZU51bWJlciAtIGEubGluZU51bWJlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdyb3VwZWQ7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGFwcGx5UmVwbGFjZW1lbnRzVG9GaWxlKFxuICAgIGZpbGVQYXRoOiBzdHJpbmcsXG4gICAgcmVwbGFjZW1lbnRzOiBUeXBlUmVwbGFjZW1lbnRbXVxuICApOiBQcm9taXNlPHsgYXBwbGllZDogVHlwZVJlcGxhY2VtZW50W10sIGZhaWxlZDogVHlwZVJlcGxhY2VtZW50W10sIGVycm9yczogc3RyaW5nW10gfT4ge1xuICAgIGNvbnN0IGFwcGxpZWQ6IFR5cGVSZXBsYWNlbWVudFtdID0gW107XG4gICAgY29uc3QgZmFpbGVkOiBUeXBlUmVwbGFjZW1lbnRbXSA9IFtdO1xuICAgIGNvbnN0IGVycm9yczogc3RyaW5nW10gPSBbXTtcblxuICAgIHRyeSB7XG4gICAgICBsZXQgY29udGVudCA9IGZzLnJlYWRGaWxlU3luYyhmaWxlUGF0aCwgJ3V0ZjgnKTtcbiAgICAgIGxldCBsaW5lcyA9IGNvbnRlbnQuc3BsaXQoJ1xcbicpO1xuXG4gICAgICBmb3IgKGNvbnN0IHJlcGxhY2VtZW50IG9mIHJlcGxhY2VtZW50cykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IGxpbmVJbmRleCA9IHJlcGxhY2VtZW50LmxpbmVOdW1iZXIgLSAxO1xuICAgICAgICAgIGlmIChsaW5lSW5kZXggPCAwIHx8IGxpbmVJbmRleCA+PSBsaW5lcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGZhaWxlZC5wdXNoKHJlcGxhY2VtZW50KTtcbiAgICAgICAgICAgIGVycm9ycy5wdXNoKGBJbnZhbGlkIGxpbmUgbnVtYmVyICR7cmVwbGFjZW1lbnQubGluZU51bWJlcn0gZm9yIGZpbGUgJHtmaWxlUGF0aH1gKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IG9yaWdpbmFsTGluZSA9IGxpbmVzW2xpbmVJbmRleF07XG4gICAgICAgICAgY29uc3QgbW9kaWZpZWRMaW5lID0gb3JpZ2luYWxMaW5lLnJlcGxhY2UocmVwbGFjZW1lbnQub3JpZ2luYWwsIHJlcGxhY2VtZW50LnJlcGxhY2VtZW50KTtcblxuICAgICAgICAgIGlmIChvcmlnaW5hbExpbmUgPT09IG1vZGlmaWVkTGluZSkge1xuICAgICAgICAgICAgZmFpbGVkLnB1c2gocmVwbGFjZW1lbnQpO1xuICAgICAgICAgICAgZXJyb3JzLnB1c2goYFBhdHRlcm4gXCIke3JlcGxhY2VtZW50Lm9yaWdpbmFsfVwiIG5vdCBmb3VuZCBpbiBsaW5lOiAke29yaWdpbmFsTGluZX1gKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxpbmVzW2xpbmVJbmRleF0gPSBtb2RpZmllZExpbmU7XG4gICAgICAgICAgYXBwbGllZC5wdXNoKHJlcGxhY2VtZW50KTtcblxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGZhaWxlZC5wdXNoKHJlcGxhY2VtZW50KTtcbiAgICAgICAgICBlcnJvcnMucHVzaChlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcikpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFdyaXRlIHRoZSBtb2RpZmllZCBjb250ZW50IGJhY2sgdG8gZmlsZVxuICAgICAgY29uc3QgbW9kaWZpZWRDb250ZW50ID0gbGluZXMuam9pbignXFxuJyk7XG4gICAgICBmcy53cml0ZUZpbGVTeW5jKGZpbGVQYXRoLCBtb2RpZmllZENvbnRlbnQsICd1dGY4Jyk7XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gSWYgZmlsZS1sZXZlbCBvcGVyYXRpb24gZmFpbHMsIG1hcmsgYWxsIHJlcGxhY2VtZW50cyBhcyBmYWlsZWRcbiAgICAgIGZhaWxlZC5wdXNoKC4uLnJlcGxhY2VtZW50cyk7XG4gICAgICBlcnJvcnMucHVzaChlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcikpO1xuICAgIH1cblxuICAgIHJldHVybiB7IGFwcGxpZWQsIGZhaWxlZCwgZXJyb3JzIH07XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHZhbGlkYXRlVHlwZVNjcmlwdENvbXBpbGF0aW9uKCk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuLCBlcnJvcnM6IHN0cmluZ1tdIH0+IHtcbiAgICB0cnkge1xuICAgICAgLy8gVXNlIHRoZSBzYW1lIHBhdHRlcm4gYXMgZXhpc3RpbmcgY2FtcGFpZ24gc3lzdGVtXG4gICAgICBleGVjU3luYygneWFybiB0c2MgLS1ub0VtaXQgLS1za2lwTGliQ2hlY2snLCB7XG4gICAgICAgIGVuY29kaW5nOiAndXRmOCcsXG4gICAgICAgIHN0ZGlvOiAncGlwZScsXG4gICAgICAgIHRpbWVvdXQ6IDMwMDAwIC8vIDMwIHNlY29uZCB0aW1lb3V0XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgZXJyb3JzOiBbXSB9O1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnN0IGVycm9yT3V0cHV0ID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiAnc3Rkb3V0JyBpbiBlcnJvclxuICAgICAgICA/IChlcnJvciBhcyBhbnkpLnN0ZG91dCB8fCAoZXJyb3IgYXMgYW55KS5zdGRlcnIgfHwgZXJyb3IubWVzc2FnZVxuICAgICAgICA6IFN0cmluZyhlcnJvcik7XG5cbiAgICAgIC8vIEV4dHJhY3QgVHlwZVNjcmlwdCBlcnJvcnNcbiAgICAgIGNvbnN0IGVycm9ycyA9IGVycm9yT3V0cHV0XG4gICAgICAgIC5zcGxpdCgnXFxuJylcbiAgICAgICAgLmZpbHRlcigobGluZTogc3RyaW5nKSA9PiBsaW5lLmluY2x1ZGVzKCdlcnJvciBUUycpKVxuICAgICAgICAuc2xpY2UoMCwgMTApOyAvLyBMaW1pdCB0byBmaXJzdCAxMCBlcnJvcnMgZm9yIHJlYWRhYmlsaXR5XG5cbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcnMgfTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGVuc3VyZUJhY2t1cERpcmVjdG9yeSgpOiB2b2lkIHtcbiAgICBpZiAoIWZzLmV4aXN0c1N5bmModGhpcy5iYWNrdXBEaXJlY3RvcnkpKSB7XG4gICAgICBmcy5ta2RpclN5bmModGhpcy5iYWNrdXBEaXJlY3RvcnksIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIGF0b21pYyByZXBsYWNlbWVudCBvcGVyYXRpb24gd2l0aCBjb21wcmVoZW5zaXZlIHZhbGlkYXRpb25cbiAgICovXG4gIHByaXZhdGUgYXN5bmMgcGVyZm9ybUF0b21pY1JlcGxhY2VtZW50KFxuICAgIHJlcGxhY2VtZW50OiBUeXBlUmVwbGFjZW1lbnQsXG4gICAgYmFja3VwUGF0aDogc3RyaW5nXG4gICk6IFByb21pc2U8UmVwbGFjZW1lbnRSZXN1bHQ+IHtcbiAgICB0cnkge1xuICAgICAgLy8gUmVhZCBvcmlnaW5hbCBmaWxlIGNvbnRlbnRcbiAgICAgIGNvbnN0IG9yaWdpbmFsQ29udGVudCA9IGZzLnJlYWRGaWxlU3luYyhyZXBsYWNlbWVudC5maWxlUGF0aCwgJ3V0ZjgnKTtcbiAgICAgIGNvbnN0IGxpbmVzID0gb3JpZ2luYWxDb250ZW50LnNwbGl0KCdcXG4nKTtcblxuICAgICAgLy8gVmFsaWRhdGUgbGluZSBudW1iZXJcbiAgICAgIGNvbnN0IGxpbmVJbmRleCA9IHJlcGxhY2VtZW50LmxpbmVOdW1iZXIgLSAxO1xuICAgICAgaWYgKGxpbmVJbmRleCA8IDAgfHwgbGluZUluZGV4ID49IGxpbmVzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgIGFwcGxpZWRSZXBsYWNlbWVudHM6IFtdLFxuICAgICAgICAgIGZhaWxlZFJlcGxhY2VtZW50czogW3JlcGxhY2VtZW50XSxcbiAgICAgICAgICBjb21waWxhdGlvbkVycm9yczogW2BJbnZhbGlkIGxpbmUgbnVtYmVyICR7cmVwbGFjZW1lbnQubGluZU51bWJlcn0gZm9yIGZpbGUgJHtyZXBsYWNlbWVudC5maWxlUGF0aH1gXSxcbiAgICAgICAgICByb2xsYmFja1BlcmZvcm1lZDogZmFsc2UsXG4gICAgICAgICAgYmFja3VwUGF0aFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICAvLyBBcHBseSByZXBsYWNlbWVudFxuICAgICAgY29uc3Qgb3JpZ2luYWxMaW5lID0gbGluZXNbbGluZUluZGV4XTtcbiAgICAgIGNvbnN0IG1vZGlmaWVkTGluZSA9IG9yaWdpbmFsTGluZS5yZXBsYWNlKHJlcGxhY2VtZW50Lm9yaWdpbmFsLCByZXBsYWNlbWVudC5yZXBsYWNlbWVudCk7XG5cbiAgICAgIC8vIFZlcmlmeSByZXBsYWNlbWVudCB3YXMgYXBwbGllZFxuICAgICAgaWYgKG9yaWdpbmFsTGluZSA9PT0gbW9kaWZpZWRMaW5lKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgYXBwbGllZFJlcGxhY2VtZW50czogW10sXG4gICAgICAgICAgZmFpbGVkUmVwbGFjZW1lbnRzOiBbcmVwbGFjZW1lbnRdLFxuICAgICAgICAgIGNvbXBpbGF0aW9uRXJyb3JzOiBbYFBhdHRlcm4gXCIke3JlcGxhY2VtZW50Lm9yaWdpbmFsfVwiIG5vdCBmb3VuZCBpbiBsaW5lOiAke29yaWdpbmFsTGluZX1gXSxcbiAgICAgICAgICByb2xsYmFja1BlcmZvcm1lZDogZmFsc2UsXG4gICAgICAgICAgYmFja3VwUGF0aFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICAvLyBXcml0ZSBtb2RpZmllZCBjb250ZW50XG4gICAgICBsaW5lc1tsaW5lSW5kZXhdID0gbW9kaWZpZWRMaW5lO1xuICAgICAgY29uc3QgbW9kaWZpZWRDb250ZW50ID0gbGluZXMuam9pbignXFxuJyk7XG4gICAgICBmcy53cml0ZUZpbGVTeW5jKHJlcGxhY2VtZW50LmZpbGVQYXRoLCBtb2RpZmllZENvbnRlbnQsICd1dGY4Jyk7XG5cbiAgICAgIC8vIFZhbGlkYXRlIFR5cGVTY3JpcHQgY29tcGlsYXRpb25cbiAgICAgIGNvbnN0IGNvbXBpbGF0aW9uUmVzdWx0ID0gYXdhaXQgdGhpcy52YWxpZGF0ZVR5cGVTY3JpcHRDb21waWxhdGlvbigpO1xuICAgICAgaWYgKCFjb21waWxhdGlvblJlc3VsdC5zdWNjZXNzKSB7XG4gICAgICAgIC8vIFJvbGxiYWNrIG9uIGNvbXBpbGF0aW9uIGZhaWx1cmVcbiAgICAgICAgYXdhaXQgdGhpcy5yb2xsYmFja0Zyb21CYWNrdXAocmVwbGFjZW1lbnQuZmlsZVBhdGgsIGJhY2t1cFBhdGgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgIGFwcGxpZWRSZXBsYWNlbWVudHM6IFtdLFxuICAgICAgICAgIGZhaWxlZFJlcGxhY2VtZW50czogW3JlcGxhY2VtZW50XSxcbiAgICAgICAgICBjb21waWxhdGlvbkVycm9yczogY29tcGlsYXRpb25SZXN1bHQuZXJyb3JzLFxuICAgICAgICAgIHJvbGxiYWNrUGVyZm9ybWVkOiB0cnVlLFxuICAgICAgICAgIGJhY2t1cFBhdGhcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgYXBwbGllZFJlcGxhY2VtZW50czogW3JlcGxhY2VtZW50XSxcbiAgICAgICAgZmFpbGVkUmVwbGFjZW1lbnRzOiBbXSxcbiAgICAgICAgY29tcGlsYXRpb25FcnJvcnM6IFtdLFxuICAgICAgICByb2xsYmFja1BlcmZvcm1lZDogZmFsc2UsXG4gICAgICAgIGJhY2t1cFBhdGhcbiAgICAgIH07XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gRG9uJ3Qgcm9sbGJhY2sgaGVyZSAtIGxldCB0aGUgY2FsbGluZyBtZXRob2QgaGFuZGxlIGl0XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVmVyaWZ5IHRoYXQgcm9sbGJhY2sgY2FwYWJpbGl0eSBpcyB3b3JraW5nIGNvcnJlY3RseVxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyB2ZXJpZnlSb2xsYmFja0NhcGFiaWxpdHkoXG4gICAgZmlsZVBhdGg6IHN0cmluZyxcbiAgICBiYWNrdXBQYXRoOiBzdHJpbmdcbiAgKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW4sIGVycm9yPzogc3RyaW5nIH0+IHtcbiAgICB0cnkge1xuICAgICAgLy8gUmVhZCBiYWNrdXAgY29udGVudFxuICAgICAgaWYgKCFmcy5leGlzdHNTeW5jKGJhY2t1cFBhdGgpKSB7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJ0JhY2t1cCBmaWxlIGRvZXMgbm90IGV4aXN0JyB9O1xuICAgICAgfVxuXG4gICAgICBjb25zdCBiYWNrdXBDb250ZW50ID0gZnMucmVhZEZpbGVTeW5jKGJhY2t1cFBhdGgsICd1dGY4Jyk7XG5cbiAgICAgIC8vIEZvciB0ZXN0aW5nIHB1cnBvc2VzLCB3ZSdsbCBqdXN0IHZlcmlmeSB0aGUgYmFja3VwIGV4aXN0cyBhbmQgaXMgcmVhZGFibGVcbiAgICAgIC8vIEluIGEgcmVhbCBzY2VuYXJpbywgd2UgbWlnaHQgZG8gYSBtb3JlIGNvbXByZWhlbnNpdmUgdGVzdFxuICAgICAgaWYgKGJhY2t1cENvbnRlbnQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJ0JhY2t1cCBmaWxlIGlzIGVtcHR5JyB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlIH07XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcilcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBzYWZldHkgc2NvcmUgZm9yIGEgcmVwbGFjZW1lbnQgYmFzZWQgb24gbXVsdGlwbGUgZmFjdG9yc1xuICAgKi9cbiAgcHJpdmF0ZSBjYWxjdWxhdGVTYWZldHlTY29yZShyZXBsYWNlbWVudDogVHlwZVJlcGxhY2VtZW50KTogbnVtYmVyIHtcbiAgICBsZXQgc2NvcmUgPSByZXBsYWNlbWVudC5jb25maWRlbmNlOyAvLyBCYXNlIHNjb3JlIGZyb20gY2xhc3NpZmljYXRpb24gY29uZmlkZW5jZVxuXG4gICAgLy8gQWRqdXN0IGJhc2VkIG9uIHJlcGxhY2VtZW50IHR5cGVcbiAgICBpZiAocmVwbGFjZW1lbnQucmVwbGFjZW1lbnQuaW5jbHVkZXMoJ3Vua25vd24nKSkge1xuICAgICAgc2NvcmUgKz0gMC4xOyAvLyB1bmtub3duIGlzIGdlbmVyYWxseSBzYWZlciB0aGFuIGFueVxuICAgIH1cblxuICAgIC8vIEFkanVzdCBiYXNlZCBvbiBmaWxlIHR5cGVcbiAgICBpZiAocmVwbGFjZW1lbnQuZmlsZVBhdGguaW5jbHVkZXMoJy50ZXN0LicpIHx8IHJlcGxhY2VtZW50LmZpbGVQYXRoLmluY2x1ZGVzKCdfX3Rlc3RzX18nKSkge1xuICAgICAgc2NvcmUgKz0gMC4wNTsgLy8gVGVzdCBmaWxlcyBhcmUgc2FmZXIgdG8gbW9kaWZ5XG4gICAgfVxuXG4gICAgLy8gQWRqdXN0IGJhc2VkIG9uIHJlcGxhY2VtZW50IHBhdHRlcm4gY29tcGxleGl0eVxuICAgIGlmIChyZXBsYWNlbWVudC5vcmlnaW5hbCA9PT0gJ2FueVtdJykge1xuICAgICAgc2NvcmUgKz0gMC4xNTsgLy8gQXJyYXkgcmVwbGFjZW1lbnRzIGFyZSB2ZXJ5IHNhZmVcbiAgICB9IGVsc2UgaWYgKHJlcGxhY2VtZW50Lm9yaWdpbmFsLmluY2x1ZGVzKCdSZWNvcmQ8c3RyaW5nLCBhbnk+JykpIHtcbiAgICAgIHNjb3JlICs9IDAuMTsgLy8gUmVjb3JkIHJlcGxhY2VtZW50cyBhcmUgZ2VuZXJhbGx5IHNhZmVcbiAgICB9IGVsc2UgaWYgKHJlcGxhY2VtZW50Lm9yaWdpbmFsLmluY2x1ZGVzKCdmdW5jdGlvbicpIHx8IHJlcGxhY2VtZW50Lm9yaWdpbmFsLmluY2x1ZGVzKCc9PicpKSB7XG4gICAgICBzY29yZSAtPSAwLjE7IC8vIEZ1bmN0aW9uLXJlbGF0ZWQgcmVwbGFjZW1lbnRzIGFyZSByaXNraWVyXG4gICAgfVxuXG4gICAgLy8gQWRqdXN0IGJhc2VkIG9uIGxpbmUgY29udGV4dCAoaWYgYXZhaWxhYmxlIGluIHRoZSByZXBsYWNlbWVudClcbiAgICBjb25zdCBsaW5lQ29udGVudCA9IHJlcGxhY2VtZW50Lm9yaWdpbmFsO1xuICAgIGlmIChsaW5lQ29udGVudC5pbmNsdWRlcygnY2F0Y2gnKSB8fCBsaW5lQ29udGVudC5pbmNsdWRlcygnZXJyb3InKSkge1xuICAgICAgc2NvcmUgLT0gMC4yOyAvLyBFcnJvciBoYW5kbGluZyBjb250ZXh0cyBhcmUgcmlza2llclxuICAgIH1cblxuICAgIGlmIChsaW5lQ29udGVudC5pbmNsdWRlcygnaW50ZXJmYWNlJykgfHwgbGluZUNvbnRlbnQuaW5jbHVkZXMoJ3R5cGUgJykpIHtcbiAgICAgIHNjb3JlICs9IDAuMDU7IC8vIFR5cGUgZGVmaW5pdGlvbnMgYXJlIHNhZmVyXG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIHNjb3JlIHN0YXlzIHdpdGhpbiBib3VuZHNcbiAgICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgc2NvcmUpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgcmVwbGFjZW1lbnQgc3RyYXRlZ2llcyBzb3J0ZWQgYnkgcHJpb3JpdHlcbiAgICovXG4gIGdldFN0cmF0ZWdpZXMoKTogUmVwbGFjZW1lbnRTdHJhdGVneVtdIHtcbiAgICByZXR1cm4gWy4uLnRoaXMuc3RyYXRlZ2llc10uc29ydCgoYSwgYikgPT4gYS5wcmlvcml0eSAtIGIucHJpb3JpdHkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIGN1c3RvbSByZXBsYWNlbWVudCBzdHJhdGVneVxuICAgKi9cbiAgYWRkU3RyYXRlZ3koc3RyYXRlZ3k6IFJlcGxhY2VtZW50U3RyYXRlZ3kpOiB2b2lkIHtcbiAgICB0aGlzLnN0cmF0ZWdpZXMucHVzaChzdHJhdGVneSk7XG4gICAgdGhpcy5zdHJhdGVnaWVzLnNvcnQoKGEsIGIpID0+IGEucHJpb3JpdHkgLSBiLnByaW9yaXR5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYmFja3VwIGRpcmVjdG9yeSBwYXRoXG4gICAqL1xuICBnZXRCYWNrdXBEaXJlY3RvcnkoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5iYWNrdXBEaXJlY3Rvcnk7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYW4gdXAgb2xkIGJhY2t1cCBmaWxlcyAob2xkZXIgdGhhbiBzcGVjaWZpZWQgZGF5cylcbiAgICovXG4gIGNsZWFudXBPbGRCYWNrdXBzKGRheXNUb0tlZXAgPSA3KTogdm9pZCB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGN1dG9mZkRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgY3V0b2ZmRGF0ZS5zZXREYXRlKGN1dG9mZkRhdGUuZ2V0RGF0ZSgpIC0gZGF5c1RvS2VlcCk7XG5cbiAgICAgIGNvbnN0IGZpbGVzID0gZnMucmVhZGRpclN5bmModGhpcy5iYWNrdXBEaXJlY3RvcnkpO1xuXG4gICAgICBmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZXMpIHtcbiAgICAgICAgaWYgKGZpbGUuZW5kc1dpdGgoJy5iYWNrdXAnKSkge1xuICAgICAgICAgIGNvbnN0IGZpbGVQYXRoID0gcGF0aC5qb2luKHRoaXMuYmFja3VwRGlyZWN0b3J5LCBmaWxlKTtcbiAgICAgICAgICBjb25zdCBzdGF0cyA9IGZzLnN0YXRTeW5jKGZpbGVQYXRoKTtcblxuICAgICAgICAgIGlmIChzdGF0cy5tdGltZSA8IGN1dG9mZkRhdGUpIHtcbiAgICAgICAgICAgIGZzLnVubGlua1N5bmMoZmlsZVBhdGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBMb2cgZXJyb3IgYnV0IGRvbid0IHRocm93IC0gY2xlYW51cCBpcyBub3QgY3JpdGljYWxcbiAgICAgIGNvbnNvbGUud2FybignRmFpbGVkIHRvIGNsZWFudXAgb2xkIGJhY2t1cHM6JywgZXJyb3IpO1xuICAgIH1cbiAgfVxufVxuIl0sInZlcnNpb24iOjN9