{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/linting/LintingQualityGates.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/linting/LintingQualityGates.ts"],"sourcesContent":["/**\n * Linting Quality Gates Service\n *\n * Implements quality gates that require zero linting issues for deployment\n * and provides comprehensive quality assessment for CI/CD pipelines.\n */\n\nimport { execSync } from 'child_process';\nimport { writeFileSync, readFileSync, existsSync } from 'fs';\n\nimport { logger } from '@/utils/logger';\n\nimport { LintingProgressTracker, LintingMetrics } from './LintingProgressTracker';\n\n/**\n * Quality gate configuration\n */\nexport interface QualityGateConfig {\n  name: string;\n  description: string;\n  thresholds: {\n    maxErrors: number;\n    maxWarnings: number;\n    maxExecutionTime: number; // milliseconds\n    minCacheHitRate: number; // percentage\n    maxMemoryUsage: number; // MB\n  };\n  blockers: {\n    parserErrors: boolean;\n    typeScriptErrors: boolean;\n    importErrors: boolean;\n    securityIssues: boolean;\n  };\n  exemptions: {\n    files: string[];\n    rules: string[];\n    temporaryUntil?: Date;\n  };\n}\n\n/**\n * Quality gate result\n */\nexport interface QualityGateResult {\n  gateName: string;\n  passed: boolean;\n  timestamp: Date;\n  metrics: LintingMetrics;\n  violations: QualityViolation[];\n  recommendations: string[];\n  deploymentApproved: boolean;\n  riskLevel: 'low' | 'medium' | 'high' | 'critical';\n}\n\n/**\n * Quality violation\n */\nexport interface QualityViolation {\n  type: 'error' | 'warning' | 'performance' | 'blocker';\n  rule: string;\n  message: string;\n  file?: string;\n  line?: number;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  autoFixable: boolean;\n}\n\n/**\n * Deployment readiness assessment\n */\nexport interface DeploymentReadiness {\n  ready: boolean;\n  confidence: number; // 0-100\n  blockers: string[];\n  warnings: string[];\n  qualityScore: number; // 0-100\n  riskAssessment: {\n    level: 'low' | 'medium' | 'high' | 'critical';\n    factors: string[];\n    mitigation: string[];\n  };\n}\n\n/**\n * Linting Quality Gates Service\n */\nexport class LintingQualityGates {\n  private progressTracker: LintingProgressTracker;\n  private configFile = '.kiro/quality-gates/config.json';\n  private resultsFile = '.kiro/quality-gates/results.json';\n  private historyFile = '.kiro/quality-gates/history.json';\n\n  constructor() {\n    this.progressTracker = new LintingProgressTracker();\n    this.ensureDirectoryExists();\n  }\n\n  /**\n   * Evaluate quality gates for deployment\n   */\n  async evaluateQualityGates(gateConfig?: QualityGateConfig): Promise<QualityGateResult> {\n    try {\n      const config = gateConfig || this.getDefaultQualityGateConfig();\n      logger.info(`Evaluating quality gates: ${config.name}`);\n\n      // Collect current metrics\n      const metrics = await this.progressTracker.collectMetrics();\n\n      // Evaluate violations\n      const violations = await this.evaluateViolations(config, metrics);\n\n      // Determine if gates passed\n      const passed = this.determineGateStatus(config, violations);\n\n      // Generate recommendations\n      const recommendations = this.generateRecommendations(violations, metrics);\n\n      // Assess deployment approval\n      const deploymentApproved = this.assessDeploymentApproval(config, violations, metrics);\n\n      // Calculate risk level\n      const riskLevel = this.calculateRiskLevel(violations, metrics);\n\n      const result: QualityGateResult = {\n        gateName: config.name,\n        passed,\n        timestamp: new Date(),\n        metrics,\n        violations,\n        recommendations,\n        deploymentApproved,\n        riskLevel,\n      };\n\n      // Save results\n      this.saveQualityGateResult(result);\n\n      logger.info(`Quality gates evaluation completed:`, {\n        passed,\n        deploymentApproved,\n        riskLevel,\n        violationCount: violations.length,\n      });\n\n      return result;\n    } catch (error) {\n      logger.error('Error evaluating quality gates:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Assess deployment readiness\n   */\n  async assessDeploymentReadiness(): Promise<DeploymentReadiness> {\n    try {\n      const gateResult = await this.evaluateQualityGates();\n\n      const blockers = gateResult.violations\n        .filter(v => v.type === 'blocker' || v.severity === 'critical')\n        .map(v => v.message);\n\n      const warnings = gateResult.violations\n        .filter(v => v.type === 'warning' && v.severity !== 'critical')\n        .map(v => v.message);\n\n      const qualityScore = this.calculateQualityScore(gateResult.metrics);\n      const confidence = this.calculateConfidence(gateResult);\n\n      const riskAssessment = this.assessRisk(gateResult);\n\n      const readiness: DeploymentReadiness = {\n        ready: gateResult.deploymentApproved && blockers.length === 0,\n        confidence,\n        blockers,\n        warnings,\n        qualityScore,\n        riskAssessment,\n      };\n\n      logger.info('Deployment readiness assessment:', {\n        ready: readiness.ready,\n        confidence: readiness.confidence,\n        qualityScore: readiness.qualityScore,\n        riskLevel: readiness.riskAssessment.level,\n      });\n\n      return readiness;\n    } catch (error) {\n      logger.error('Error assessing deployment readiness:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create CI/CD integration report\n   */\n  async createCICDReport(): Promise<{\n    timestamp: string;\n    deployment: { approved: boolean; confidence: number; qualityScore: number };\n    gates: QualityGateResult;\n    issues?: string[];\n    risks?: unknown;\n    trends?: unknown;\n    recommendations?: string[];\n  }> {\n    try {\n      const readiness = await this.assessDeploymentReadiness();\n      const gateResult = await this.evaluateQualityGates();\n\n      const report = {\n        timestamp: new Date().toISOString(),\n        deployment: {\n          approved: readiness.ready,\n          confidence: readiness.confidence,\n          qualityScore: readiness.qualityScore,\n        },\n        metrics: {\n          totalIssues: gateResult.metrics.totalIssues,\n          errors: gateResult.metrics.errors,\n          warnings: gateResult.metrics.warnings,\n          fixableIssues: gateResult.metrics.fixableIssues,\n        },\n        qualityGates: {\n          passed: gateResult.passed,\n          riskLevel: gateResult.riskLevel,\n          violationCount: gateResult.violations.length,\n        },\n        blockers: readiness.blockers,\n        recommendations: gateResult.recommendations,\n        performance: {\n          executionTime: gateResult.metrics.performanceMetrics.executionTime,\n          memoryUsage: gateResult.metrics.performanceMetrics.memoryUsage,\n          cacheHitRate: gateResult.metrics.performanceMetrics.cacheHitRate,\n        },\n      };\n\n      // Save CI/CD report\n      this.saveCICDReport(report);\n\n      return report;\n    } catch (error) {\n      logger.error('Error creating CI/CD report:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Monitor quality trends\n   */\n  async monitorQualityTrends(): Promise<{\n    trends: Record<string, unknown>;\n    overallTrend: 'improving' | 'stable' | 'degrading';\n    recommendations: string[];\n    alertLevel: 'none' | 'low' | 'medium' | 'high';\n  }> {\n    try {\n      const history = this.getQualityGateHistory();\n      if (history.length < 2) {\n        return { trend: 'insufficient-data', message: 'Need more historical data' };\n      }\n\n      const recent = history.slice(-10); // Last 10 evaluations\n      const trends = {\n        errorTrend: this.calculateTrend(recent.map(r => r.metrics.errors)),\n        warningTrend: this.calculateTrend(recent.map(r => r.metrics.warnings)),\n        performanceTrend: this.calculateTrend(\n          recent.map(r => r.metrics.performanceMetrics.executionTime),\n        ),\n        qualityTrend: this.calculateTrend(recent.map(r => this.calculateQualityScore(r.metrics))),\n      };\n\n      const overallTrend = this.determineOverallTrend(trends);\n\n      return {\n        trend: overallTrend,\n        trends,\n        recommendations: this.generateTrendRecommendations(trends),\n        alertLevel: this.calculateAlertLevel(trends),\n      };\n    } catch (error) {\n      logger.error('Error monitoring quality trends:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Private methods\n   */\n  private async evaluateViolations(\n    config: QualityGateConfig,\n    metrics: LintingMetrics,\n  ): Promise<QualityViolation[]> {\n    const violations: QualityViolation[] = [];\n\n    // Check error thresholds\n    if (metrics.errors > config.thresholds.maxErrors) {\n      violations.push({\n        type: 'error',\n        rule: 'max-errors-threshold',\n        message: `${metrics.errors} errors exceed threshold of ${config.thresholds.maxErrors}`,\n        severity: 'high',\n        autoFixable: metrics.fixableIssues > 0,\n      });\n    }\n\n    // Check warning thresholds\n    if (metrics.warnings > config.thresholds.maxWarnings) {\n      violations.push({\n        type: 'warning',\n        rule: 'max-warnings-threshold',\n        message: `${metrics.warnings} warnings exceed threshold of ${config.thresholds.maxWarnings}`,\n        severity: 'medium',\n        autoFixable: metrics.fixableIssues > 0,\n      });\n    }\n\n    // Check performance thresholds\n    if (metrics.performanceMetrics.executionTime > config.thresholds.maxExecutionTime) {\n      violations.push({\n        type: 'performance',\n        rule: 'max-execution-time',\n        message: `Execution time ${metrics.performanceMetrics.executionTime}ms exceeds threshold`,\n        severity: 'medium',\n        autoFixable: false,\n      });\n    }\n\n    // Check for blockers\n    if (config.blockers.parserErrors) {\n      const parserErrors = await this.checkForParserErrors();\n      if (parserErrors.length > 0) {\n        violations.push(\n          ...parserErrors.map(error => ({\n            type: 'blocker' as const,\n            rule: 'parser-error',\n            message: error.message,\n            file: error.file,\n            line: error.line,\n            severity: 'critical' as const,\n            autoFixable: false,\n          })),\n        );\n      }\n    }\n\n    return violations;\n  }\n\n  private determineGateStatus(config: QualityGateConfig, violations: QualityViolation[]): boolean {\n    // Gates fail if there are any critical violations or blockers\n    const criticalViolations = violations.filter(\n      v => v.severity === 'critical' || v.type === 'blocker',\n    );\n    return criticalViolations.length === 0;\n  }\n\n  private generateRecommendations(\n    violations: QualityViolation[],\n    metrics: LintingMetrics,\n  ): string[] {\n    const recommendations: string[] = [];\n\n    if (violations.some(v => v.type === 'error')) {\n      recommendations.push('Run automated error fixing tools to reduce error count');\n    }\n\n    if (metrics.fixableIssues > 0) {\n      recommendations.push(`${metrics.fixableIssues} issues can be auto-fixed with ESLint --fix`);\n    }\n\n    if (violations.some(v => v.type === 'performance')) {\n      recommendations.push('Consider optimizing linting performance with better caching');\n    }\n\n    if (violations.some(v => v.type === 'blocker')) {\n      recommendations.push('Address critical blockers before attempting deployment');\n    }\n\n    return recommendations;\n  }\n\n  private assessDeploymentApproval(\n    config: QualityGateConfig,\n    violations: QualityViolation[],\n    metrics: LintingMetrics,\n  ): boolean {\n    // Deployment is approved if:\n    // 1. No critical violations or blockers\n    // 2. Error count is within acceptable limits\n    // 3. No parser errors or other critical issues\n\n    const criticalIssues = violations.filter(\n      v => v.severity === 'critical' || v.type === 'blocker',\n    );\n    const errorCountAcceptable = metrics.errors <= config.thresholds.maxErrors;\n\n    return criticalIssues.length === 0 && errorCountAcceptable;\n  }\n\n  private calculateRiskLevel(\n    violations: QualityViolation[],\n    metrics: LintingMetrics,\n  ): 'low' | 'medium' | 'high' | 'critical' {\n    if (violations.some(v => v.severity === 'critical' || v.type === 'blocker')) {\n      return 'critical';\n    }\n\n    if (metrics.errors > 50 || violations.filter(v => v.severity === 'high').length > 5) {\n      return 'high';\n    }\n\n    if (metrics.errors > 10 || violations.filter(v => v.severity === 'medium').length > 10) {\n      return 'medium';\n    }\n\n    return 'low';\n  }\n\n  private calculateQualityScore(metrics: LintingMetrics): number {\n    // Quality score based on error count, warning count, and performance\n    const errorPenalty = Math.min(50, metrics.errors * 2);\n    const warningPenalty = Math.min(30, metrics.warnings * 0.1);\n    const performancePenalty = Math.min(20, metrics.performanceMetrics.executionTime / 3000);\n\n    return Math.max(0, 100 - errorPenalty - warningPenalty - performancePenalty);\n  }\n\n  private calculateConfidence(gateResult: QualityGateResult): number {\n    let confidence = 100;\n\n    // Reduce confidence based on violations\n    confidence -= gateResult.violations.filter(v => v.severity === 'critical').length * 30;\n    confidence -= gateResult.violations.filter(v => v.severity === 'high').length * 15;\n    confidence -= gateResult.violations.filter(v => v.severity === 'medium').length * 5;\n\n    // Increase confidence if many issues are auto-fixable\n    const autoFixableRatio =\n      gateResult.metrics.fixableIssues / Math.max(1, gateResult.metrics.totalIssues);\n    confidence += autoFixableRatio * 20;\n\n    return Math.max(0, Math.min(100, confidence));\n  }\n\n  private assessRisk(gateResult: QualityGateResult): {\n    level: 'low' | 'medium' | 'high' | 'critical';\n    factors: string[];\n    mitigations: string[];\n  } {\n    const factors: string[] = [];\n    const mitigation: string[] = [];\n\n    if (gateResult.metrics.errors > 0) {\n      factors.push(`${gateResult.metrics.errors} linting errors present`);\n      mitigation.push('Run automated error fixing before deployment');\n    }\n\n    if (gateResult.violations.some(v => v.type === 'blocker')) {\n      factors.push('Critical blockers detected');\n      mitigation.push('Resolve all blocker issues immediately');\n    }\n\n    return {\n      level: gateResult.riskLevel,\n      factors,\n      mitigation,\n    };\n  }\n\n  private async checkForParserErrors(): Promise<\n    Array<{ message: string; file?: string; line?: number }>\n  > {\n    try {\n      // This would check for TypeScript parser errors\n      const result = execSync('yarn tsc --noEmit --skipLibCheck 2>&1 || true', {\n        encoding: 'utf8',\n      });\n      const errors: Array<{ message: string; file?: string; line?: number }> = [];\n\n      // Parse TypeScript compiler output for parser errors\n      const lines = result.split('\\n');\n      for (const line of lines) {\n        if (\n          line.includes('error TS') &&\n          (line.includes('Cannot find') || line.includes('Parse error'))\n        ) {\n          const match = line.match(/^(.+?)\\((\\d+),\\d+\\): error TS\\d+: (.+)$/);\n          if (match) {\n            errors.push({\n              file: match[1],\n              line: parseInt(match[2]),\n              message: match[3],\n            });\n          }\n        }\n      }\n\n      return errors;\n    } catch (error) {\n      logger.warn('Error checking for parser errors:', error);\n      return [];\n    }\n  }\n\n  private calculateTrend(values: number[]): 'improving' | 'stable' | 'degrading' {\n    if (values.length < 2) return 'stable';\n\n    const recent = values.slice(-5);\n    const older = values.slice(-10, -5);\n\n    if (older.length === 0) return 'stable';\n\n    const recentAvg = recent.reduce((sum, val) => sum + val, 0) / recent.length;\n    const olderAvg = older.reduce((sum, val) => sum + val, 0) / older.length;\n\n    const change = (recentAvg - olderAvg) / olderAvg;\n\n    if (change < -0.1) return 'improving';\n    if (change > 0.1) return 'degrading';\n    return 'stable';\n  }\n\n  private determineOverallTrend(\n    trends: Record<string, { current: number; previous: number }>,\n  ): 'improving' | 'stable' | 'degrading' {\n    const trendValues = Object.values(trends);\n    const improvingCount = trendValues.filter(t => t === 'improving').length;\n    const degradingCount = trendValues.filter(t => t === 'degrading').length;\n\n    if (improvingCount > degradingCount) return 'improving';\n    if (degradingCount > improvingCount) return 'degrading';\n    return 'stable';\n  }\n\n  private generateTrendRecommendations(\n    trends: Record<string, { current: number; previous: number }>,\n  ): string[] {\n    const recommendations: string[] = [];\n\n    if (trends.errorTrend === 'degrading') {\n      recommendations.push('Error count is increasing - investigate recent changes');\n    }\n\n    if (trends.performanceTrend === 'degrading') {\n      recommendations.push('Linting performance is degrading - optimize configuration');\n    }\n\n    if (trends.qualityTrend === 'improving') {\n      recommendations.push('Quality trend is positive - maintain current practices');\n    }\n\n    return recommendations;\n  }\n\n  private calculateAlertLevel(\n    trends: Record<string, { current: number; previous: number }>,\n  ): 'none' | 'low' | 'medium' | 'high' {\n    const degradingCount = Object.values(trends).filter(t => t === 'degrading').length;\n\n    if (degradingCount >= 3) return 'high';\n    if (degradingCount >= 2) return 'medium';\n    if (degradingCount >= 1) return 'low';\n    return 'none';\n  }\n\n  private getDefaultQualityGateConfig(): QualityGateConfig {\n    return {\n      name: 'Standard Quality Gate',\n      description: 'Standard quality gate for deployment approval',\n      thresholds: {\n        maxErrors: 0,\n        maxWarnings: 100,\n        maxExecutionTime: 60000,\n        minCacheHitRate: 70,\n        maxMemoryUsage: 512,\n      },\n      blockers: {\n        parserErrors: true,\n        typeScriptErrors: true,\n        importErrors: true,\n        securityIssues: true,\n      },\n      exemptions: {\n        files: [],\n        rules: [],\n      },\n    };\n  }\n\n  /**\n   * Utility methods\n   */\n  private ensureDirectoryExists(): void {\n    try {\n      execSync('mkdir -p .kiro/quality-gates', { stdio: 'pipe' });\n    } catch (error) {\n      // Directory might already exist\n    }\n  }\n\n  private saveQualityGateResult(result: QualityGateResult): void {\n    try {\n      writeFileSync(this.resultsFile, JSON.stringify(result, null, 2));\n\n      // Also append to history\n      const history = this.getQualityGateHistory();\n      history.push(result);\n\n      // Keep only last 50 entries\n      const trimmedHistory = history.slice(-50);\n      writeFileSync(this.historyFile, JSON.stringify(trimmedHistory, null, 2));\n    } catch (error) {\n      logger.error('Error saving quality gate result:', error);\n    }\n  }\n\n  private getQualityGateHistory(): QualityGateResult[] {\n    try {\n      if (existsSync(this.historyFile)) {\n        const data = readFileSync(this.historyFile, 'utf8');\n        return JSON.parse(data);\n      }\n    } catch (error) {\n      logger.warn('Error reading quality gate history:', error);\n    }\n    return [];\n  }\n\n  private saveCICDReport(report: Record<string, unknown>): void {\n    try {\n      const reportFile = `.kiro/quality-gates/cicd-report-${Date.now()}.json`;\n      writeFileSync(reportFile, JSON.stringify(report, null, 2));\n    } catch (error) {\n      logger.error('Error saving CI/CD report:', error);\n    }\n  }\n}\n"],"version":3}