{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/UnifiedRecipeService.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/UnifiedRecipeService.ts"],"sourcesContent":["/**\n * Unified Recipe Service\n * Provides a unified interface for recipe operations\n */\n\nimport type { Recipe } from '@/types/alchemy';\n// Add missing imports for TS2304 fixes\nimport { errorHandler } from '@/services/errorHandler';\nimport type { ExtendedRecipe } from '@/types/ExtendedRecipe';\nimport type { RecipeSearchCriteria } from '@/services/interfaces/RecipeServiceInterface';\n// Using local error handler implementation\n\nexport class UnifiedRecipeService {\n  private static instance: UnifiedRecipeService;\n\n  private constructor() {}\n\n  public static getInstance(): UnifiedRecipeService {\n    if (!UnifiedRecipeService.instance) {\n      UnifiedRecipeService.instance = new UnifiedRecipeService();\n    }\n    return UnifiedRecipeService.instance;\n  }\n\n  /**\n   * Get all recipes\n   */\n  async getAllRecipes(): Promise<Recipe[]> {\n    try {\n      // TODO: Implement recipe fetching logic\n      return [];\n    } catch (error) {\n      errorHandler.log(error, { context: 'UnifiedRecipeService.getAllRecipes' });\n      return [];\n    }\n  }\n\n  /**\n   * Get recipe by ID\n   */\n  async getRecipeById(id: string): Promise<Recipe | null> {\n    try {\n      // TODO: Implement recipe fetching by ID\n      return null;\n    } catch (error) {\n      errorHandler.log(error, { context: 'UnifiedRecipeService.getRecipeById' });\n      return null;\n    }\n  }\n\n  /**\n   * Search recipes\n   */\n  async searchRecipes(query: string): Promise<Recipe[]> {\n    try {\n      // TODO: Implement recipe search logic\n      return [];\n    } catch (error) {\n      errorHandler.log(error, { context: 'UnifiedRecipeService.searchRecipes' });\n      return [];\n    }\n  }\n  /**\n   * Get recipes for a specific cuisine (Phase 11 addition)\n   */\n  async getRecipesForCuisine(cuisine: string): Promise<ExtendedRecipe[]> {\n    try {\n      const allRecipes = await this.getAllRecipes();\n      const filtered = (allRecipes || []).filter(recipe => {\n        const recipeCuisine = recipe.cuisine && typeof recipe.cuisine === 'string' ? recipe.cuisine.toLowerCase() : recipe.cuisine;\n        const targetCuisine = cuisine && typeof cuisine === 'string' ? cuisine.toLowerCase() : cuisine;\n        return recipeCuisine === targetCuisine;\n      });\n      return filtered as unknown as ExtendedRecipe[];\n    } catch (error) {\n      console.error('Error getting recipes for cuisine:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get recipes by cuisine (alias for compatibility)\n   */\n  async getRecipesByCuisine(cuisine: string): Promise<ExtendedRecipe[]> {\n    return this.getRecipesForCuisine(cuisine);\n  }\n\n  /**\n   * Get best recipe matches (Phase 11 addition)\n   */\n  async getBestRecipeMatches(criteria: RecipeSearchCriteria): Promise<ExtendedRecipe[]> {\n    try {\n      const allRecipes = await this.getAllRecipes();\n      // Simple implementation for now\n      const matches = allRecipes?.slice(0, 10);\n      return matches as unknown as ExtendedRecipe[];\n    } catch (error) {\n      console.error('Error getting best recipe matches:', error);\n      return [];\n    }\n  }\n\n}\n\n// Export singleton instance\nexport const unifiedRecipeService = UnifiedRecipeService.getInstance();\n\n// Export default\nexport default unifiedRecipeService; "],"version":3}