58c3daadcac47efbc974fd95ab6496f5
"use strict";
/**
 * Unified Recipe Service
 * Provides a unified interface for recipe operations
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.unifiedRecipeService = exports.UnifiedRecipeService = void 0;
// Add missing imports for TS2304 fixes
const errorHandler_1 = require("@/services/errorHandler");
// Using local error handler implementation
class UnifiedRecipeService {
    constructor() { }
    static getInstance() {
        if (!UnifiedRecipeService.instance) {
            UnifiedRecipeService.instance = new UnifiedRecipeService();
        }
        return UnifiedRecipeService.instance;
    }
    /**
     * Get all recipes
     */
    async getAllRecipes() {
        try {
            // TODO: Implement recipe fetching logic
            return [];
        }
        catch (error) {
            errorHandler_1.errorHandler.log(error, { context: 'UnifiedRecipeService.getAllRecipes' });
            return [];
        }
    }
    /**
     * Get recipe by ID
     */
    async getRecipeById(id) {
        try {
            // TODO: Implement recipe fetching by ID
            return null;
        }
        catch (error) {
            errorHandler_1.errorHandler.log(error, { context: 'UnifiedRecipeService.getRecipeById' });
            return null;
        }
    }
    /**
     * Search recipes
     */
    async searchRecipes(query) {
        try {
            // TODO: Implement recipe search logic
            return [];
        }
        catch (error) {
            errorHandler_1.errorHandler.log(error, { context: 'UnifiedRecipeService.searchRecipes' });
            return [];
        }
    }
    /**
     * Get recipes for a specific cuisine (Phase 11 addition)
     */
    async getRecipesForCuisine(cuisine) {
        try {
            const allRecipes = await this.getAllRecipes();
            const filtered = (allRecipes || []).filter(recipe => {
                const recipeCuisine = recipe.cuisine && typeof recipe.cuisine === 'string' ? recipe.cuisine.toLowerCase() : recipe.cuisine;
                const targetCuisine = cuisine && typeof cuisine === 'string' ? cuisine.toLowerCase() : cuisine;
                return recipeCuisine === targetCuisine;
            });
            return filtered;
        }
        catch (error) {
            console.error('Error getting recipes for cuisine:', error);
            return [];
        }
    }
    /**
     * Get recipes by cuisine (alias for compatibility)
     */
    async getRecipesByCuisine(cuisine) {
        return this.getRecipesForCuisine(cuisine);
    }
    /**
     * Get best recipe matches (Phase 11 addition)
     */
    async getBestRecipeMatches(criteria) {
        try {
            const allRecipes = await this.getAllRecipes();
            // Simple implementation for now
            const matches = allRecipes === null || allRecipes === void 0 ? void 0 : allRecipes.slice(0, 10);
            return matches;
        }
        catch (error) {
            console.error('Error getting best recipe matches:', error);
            return [];
        }
    }
}
exports.UnifiedRecipeService = UnifiedRecipeService;
// Export singleton instance
exports.unifiedRecipeService = UnifiedRecipeService.getInstance();
// Export default
exports.default = exports.unifiedRecipeService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9zZXJ2aWNlcy9VbmlmaWVkUmVjaXBlU2VydmljZS50cyIsIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7QUFHSCx1Q0FBdUM7QUFDdkMsMERBQXVEO0FBR3ZELDJDQUEyQztBQUUzQyxNQUFhLG9CQUFvQjtJQUcvQixnQkFBdUIsQ0FBQztJQUVqQixNQUFNLENBQUMsV0FBVztRQUN2QixJQUFJLENBQUMsb0JBQW9CLENBQUMsUUFBUSxFQUFFO1lBQ2xDLG9CQUFvQixDQUFDLFFBQVEsR0FBRyxJQUFJLG9CQUFvQixFQUFFLENBQUM7U0FDNUQ7UUFDRCxPQUFPLG9CQUFvQixDQUFDLFFBQVEsQ0FBQztJQUN2QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsYUFBYTtRQUNqQixJQUFJO1lBQ0Ysd0NBQXdDO1lBQ3hDLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLDJCQUFZLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxFQUFFLE9BQU8sRUFBRSxvQ0FBb0MsRUFBRSxDQUFDLENBQUM7WUFDM0UsT0FBTyxFQUFFLENBQUM7U0FDWDtJQUNILENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUssQ0FBQyxhQUFhLENBQUMsRUFBVTtRQUM1QixJQUFJO1lBQ0Ysd0NBQXdDO1lBQ3hDLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLDJCQUFZLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxFQUFFLE9BQU8sRUFBRSxvQ0FBb0MsRUFBRSxDQUFDLENBQUM7WUFDM0UsT0FBTyxJQUFJLENBQUM7U0FDYjtJQUNILENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUssQ0FBQyxhQUFhLENBQUMsS0FBYTtRQUMvQixJQUFJO1lBQ0Ysc0NBQXNDO1lBQ3RDLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLDJCQUFZLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxFQUFFLE9BQU8sRUFBRSxvQ0FBb0MsRUFBRSxDQUFDLENBQUM7WUFDM0UsT0FBTyxFQUFFLENBQUM7U0FDWDtJQUNILENBQUM7SUFDRDs7T0FFRztJQUNILEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxPQUFlO1FBQ3hDLElBQUk7WUFDRixNQUFNLFVBQVUsR0FBRyxNQUFNLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUM5QyxNQUFNLFFBQVEsR0FBRyxDQUFDLFVBQVUsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQ2xELE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxPQUFPLElBQUksT0FBTyxNQUFNLENBQUMsT0FBTyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztnQkFDM0gsTUFBTSxhQUFhLEdBQUcsT0FBTyxJQUFJLE9BQU8sT0FBTyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7Z0JBQy9GLE9BQU8sYUFBYSxLQUFLLGFBQWEsQ0FBQztZQUN6QyxDQUFDLENBQUMsQ0FBQztZQUNILE9BQU8sUUFBdUMsQ0FBQztTQUNoRDtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsT0FBTyxDQUFDLEtBQUssQ0FBQyxvQ0FBb0MsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUMzRCxPQUFPLEVBQUUsQ0FBQztTQUNYO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLG1CQUFtQixDQUFDLE9BQWU7UUFDdkMsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLG9CQUFvQixDQUFDLFFBQThCO1FBQ3ZELElBQUk7WUFDRixNQUFNLFVBQVUsR0FBRyxNQUFNLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUM5QyxnQ0FBZ0M7WUFDaEMsTUFBTSxPQUFPLEdBQUcsVUFBVSxhQUFWLFVBQVUsdUJBQVYsVUFBVSxDQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDekMsT0FBTyxPQUFzQyxDQUFDO1NBQy9DO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxPQUFPLENBQUMsS0FBSyxDQUFDLG9DQUFvQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQzNELE9BQU8sRUFBRSxDQUFDO1NBQ1g7SUFDSCxDQUFDO0NBRUY7QUExRkQsb0RBMEZDO0FBRUQsNEJBQTRCO0FBQ2YsUUFBQSxvQkFBb0IsR0FBRyxvQkFBb0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUV2RSxpQkFBaUI7QUFDakIsa0JBQWUsNEJBQW9CLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9zZXJ2aWNlcy9VbmlmaWVkUmVjaXBlU2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFVuaWZpZWQgUmVjaXBlIFNlcnZpY2VcbiAqIFByb3ZpZGVzIGEgdW5pZmllZCBpbnRlcmZhY2UgZm9yIHJlY2lwZSBvcGVyYXRpb25zXG4gKi9cblxuaW1wb3J0IHR5cGUgeyBSZWNpcGUgfSBmcm9tICdAL3R5cGVzL2FsY2hlbXknO1xuLy8gQWRkIG1pc3NpbmcgaW1wb3J0cyBmb3IgVFMyMzA0IGZpeGVzXG5pbXBvcnQgeyBlcnJvckhhbmRsZXIgfSBmcm9tICdAL3NlcnZpY2VzL2Vycm9ySGFuZGxlcic7XG5pbXBvcnQgdHlwZSB7IEV4dGVuZGVkUmVjaXBlIH0gZnJvbSAnQC90eXBlcy9FeHRlbmRlZFJlY2lwZSc7XG5pbXBvcnQgdHlwZSB7IFJlY2lwZVNlYXJjaENyaXRlcmlhIH0gZnJvbSAnQC9zZXJ2aWNlcy9pbnRlcmZhY2VzL1JlY2lwZVNlcnZpY2VJbnRlcmZhY2UnO1xuLy8gVXNpbmcgbG9jYWwgZXJyb3IgaGFuZGxlciBpbXBsZW1lbnRhdGlvblxuXG5leHBvcnQgY2xhc3MgVW5pZmllZFJlY2lwZVNlcnZpY2Uge1xuICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogVW5pZmllZFJlY2lwZVNlcnZpY2U7XG5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBVbmlmaWVkUmVjaXBlU2VydmljZSB7XG4gICAgaWYgKCFVbmlmaWVkUmVjaXBlU2VydmljZS5pbnN0YW5jZSkge1xuICAgICAgVW5pZmllZFJlY2lwZVNlcnZpY2UuaW5zdGFuY2UgPSBuZXcgVW5pZmllZFJlY2lwZVNlcnZpY2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIFVuaWZpZWRSZWNpcGVTZXJ2aWNlLmluc3RhbmNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbGwgcmVjaXBlc1xuICAgKi9cbiAgYXN5bmMgZ2V0QWxsUmVjaXBlcygpOiBQcm9taXNlPFJlY2lwZVtdPiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFRPRE86IEltcGxlbWVudCByZWNpcGUgZmV0Y2hpbmcgbG9naWNcbiAgICAgIHJldHVybiBbXTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgZXJyb3JIYW5kbGVyLmxvZyhlcnJvciwgeyBjb250ZXh0OiAnVW5pZmllZFJlY2lwZVNlcnZpY2UuZ2V0QWxsUmVjaXBlcycgfSk7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCByZWNpcGUgYnkgSURcbiAgICovXG4gIGFzeW5jIGdldFJlY2lwZUJ5SWQoaWQ6IHN0cmluZyk6IFByb21pc2U8UmVjaXBlIHwgbnVsbD4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBUT0RPOiBJbXBsZW1lbnQgcmVjaXBlIGZldGNoaW5nIGJ5IElEXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgZXJyb3JIYW5kbGVyLmxvZyhlcnJvciwgeyBjb250ZXh0OiAnVW5pZmllZFJlY2lwZVNlcnZpY2UuZ2V0UmVjaXBlQnlJZCcgfSk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2VhcmNoIHJlY2lwZXNcbiAgICovXG4gIGFzeW5jIHNlYXJjaFJlY2lwZXMocXVlcnk6IHN0cmluZyk6IFByb21pc2U8UmVjaXBlW10+IHtcbiAgICB0cnkge1xuICAgICAgLy8gVE9ETzogSW1wbGVtZW50IHJlY2lwZSBzZWFyY2ggbG9naWNcbiAgICAgIHJldHVybiBbXTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgZXJyb3JIYW5kbGVyLmxvZyhlcnJvciwgeyBjb250ZXh0OiAnVW5pZmllZFJlY2lwZVNlcnZpY2Uuc2VhcmNoUmVjaXBlcycgfSk7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBHZXQgcmVjaXBlcyBmb3IgYSBzcGVjaWZpYyBjdWlzaW5lIChQaGFzZSAxMSBhZGRpdGlvbilcbiAgICovXG4gIGFzeW5jIGdldFJlY2lwZXNGb3JDdWlzaW5lKGN1aXNpbmU6IHN0cmluZyk6IFByb21pc2U8RXh0ZW5kZWRSZWNpcGVbXT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBhbGxSZWNpcGVzID0gYXdhaXQgdGhpcy5nZXRBbGxSZWNpcGVzKCk7XG4gICAgICBjb25zdCBmaWx0ZXJlZCA9IChhbGxSZWNpcGVzIHx8IFtdKS5maWx0ZXIocmVjaXBlID0+IHtcbiAgICAgICAgY29uc3QgcmVjaXBlQ3Vpc2luZSA9IHJlY2lwZS5jdWlzaW5lICYmIHR5cGVvZiByZWNpcGUuY3Vpc2luZSA9PT0gJ3N0cmluZycgPyByZWNpcGUuY3Vpc2luZS50b0xvd2VyQ2FzZSgpIDogcmVjaXBlLmN1aXNpbmU7XG4gICAgICAgIGNvbnN0IHRhcmdldEN1aXNpbmUgPSBjdWlzaW5lICYmIHR5cGVvZiBjdWlzaW5lID09PSAnc3RyaW5nJyA/IGN1aXNpbmUudG9Mb3dlckNhc2UoKSA6IGN1aXNpbmU7XG4gICAgICAgIHJldHVybiByZWNpcGVDdWlzaW5lID09PSB0YXJnZXRDdWlzaW5lO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZmlsdGVyZWQgYXMgdW5rbm93biBhcyBFeHRlbmRlZFJlY2lwZVtdO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZXR0aW5nIHJlY2lwZXMgZm9yIGN1aXNpbmU6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgcmVjaXBlcyBieSBjdWlzaW5lIChhbGlhcyBmb3IgY29tcGF0aWJpbGl0eSlcbiAgICovXG4gIGFzeW5jIGdldFJlY2lwZXNCeUN1aXNpbmUoY3Vpc2luZTogc3RyaW5nKTogUHJvbWlzZTxFeHRlbmRlZFJlY2lwZVtdPiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UmVjaXBlc0ZvckN1aXNpbmUoY3Vpc2luZSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGJlc3QgcmVjaXBlIG1hdGNoZXMgKFBoYXNlIDExIGFkZGl0aW9uKVxuICAgKi9cbiAgYXN5bmMgZ2V0QmVzdFJlY2lwZU1hdGNoZXMoY3JpdGVyaWE6IFJlY2lwZVNlYXJjaENyaXRlcmlhKTogUHJvbWlzZTxFeHRlbmRlZFJlY2lwZVtdPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGFsbFJlY2lwZXMgPSBhd2FpdCB0aGlzLmdldEFsbFJlY2lwZXMoKTtcbiAgICAgIC8vIFNpbXBsZSBpbXBsZW1lbnRhdGlvbiBmb3Igbm93XG4gICAgICBjb25zdCBtYXRjaGVzID0gYWxsUmVjaXBlcz8uc2xpY2UoMCwgMTApO1xuICAgICAgcmV0dXJuIG1hdGNoZXMgYXMgdW5rbm93biBhcyBFeHRlbmRlZFJlY2lwZVtdO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZXR0aW5nIGJlc3QgcmVjaXBlIG1hdGNoZXM6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfVxuXG59XG5cbi8vIEV4cG9ydCBzaW5nbGV0b24gaW5zdGFuY2VcbmV4cG9ydCBjb25zdCB1bmlmaWVkUmVjaXBlU2VydmljZSA9IFVuaWZpZWRSZWNpcGVTZXJ2aWNlLmdldEluc3RhbmNlKCk7XG5cbi8vIEV4cG9ydCBkZWZhdWx0XG5leHBvcnQgZGVmYXVsdCB1bmlmaWVkUmVjaXBlU2VydmljZTsgIl0sInZlcnNpb24iOjN9