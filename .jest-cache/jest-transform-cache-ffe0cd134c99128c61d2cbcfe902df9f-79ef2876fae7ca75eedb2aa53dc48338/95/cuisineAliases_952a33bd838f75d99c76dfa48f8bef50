e173e08469a14744dd411cd4687beabf
"use strict";
/**
 * Cuisine Type Aliases System
 *
 * This system unifies regional cuisines under broader ethnic categories
 * to provide consistent cuisine type handling across the application.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isPrimaryCuisineType = exports.normalizeCuisineName = exports.isValidPrimaryCuisine = exports.getPrimaryCuisine = exports.isRegionalCuisine = exports.getRegionalCuisines = exports.resolveCuisineType = exports.CUISINE_ALIASES = void 0;
// ========== REGIONAL CUISINE ALIASES ==========
/**
 * Regional Cuisine Aliases
 * Maps regional cuisines to their primary ethnic category
 */
exports.CUISINE_ALIASES = {
    // Chinese Regional Cuisines
    'sichuanese': 'Chinese',
    'cantonese': 'Chinese',
    'shanghainese': 'Chinese',
    'hunanese': 'Chinese',
    'northern': 'Chinese',
    'sichuan': 'Chinese',
    'canton': 'Chinese',
    'shanghai': 'Chinese',
    'hunan': 'Chinese',
    // Japanese Regional Cuisines
    'tokyo': 'Japanese',
    'osaka': 'Japanese',
    'kyoto': 'Japanese',
    'hokkaido': 'Japanese',
    // Korean Regional Cuisines
    'seoul': 'Korean',
    'busan': 'Korean',
    'jeju': 'Korean',
    // Indian Regional Cuisines
    'punjabi': 'Indian',
    'bengali': 'Indian',
    'gujarati': 'Indian',
    'marathi': 'Indian',
    'tamil': 'Indian',
    'telugu': 'Indian',
    'kannada': 'Indian',
    'malayalam': 'Indian',
    'kashmiri': 'Indian',
    'rajasthani': 'Indian',
    'hyderabadi': 'Indian',
    'lucknowi': 'Indian',
    // Thai Regional Cuisines
    'bangkok': 'Thai',
    'chiangmai': 'Thai',
    'southernthai': 'Thai',
    'northeastern': 'Thai',
    // Vietnamese Regional Cuisines
    'hanoi': 'Vietnamese',
    'saigon': 'Vietnamese',
    'hue': 'Vietnamese',
    // Italian Regional Cuisines
    'tuscan': 'Italian',
    'sicilian': 'Italian',
    'lombard': 'Italian',
    'venetian': 'Italian',
    'roman': 'Italian',
    'neapolitan': 'Italian',
    'piedmontese': 'Italian',
    'ligurian': 'Italian',
    'emilian': 'Italian',
    'sardinian': 'Italian',
    // French Regional Cuisines
    'provencal': 'French',
    'norman': 'French',
    'alsatian': 'French',
    'lyonnais': 'French',
    'bordeaux': 'French',
    'burgundian': 'French',
    'breton': 'French',
    // Spanish Regional Cuisines
    'catalan': 'Spanish',
    'andalusian': 'Spanish',
    'basque': 'Spanish',
    'galician': 'Spanish',
    'valencian': 'Spanish',
    'castilian': 'Spanish',
    // Mexican Regional Cuisines
    'yucatecan': 'Mexican',
    'oaxacan': 'Mexican',
    'poblano': 'Mexican',
    'veracruzano': 'Mexican',
    'jaliscan': 'Mexican',
    'sonoran': 'Mexican',
    // American Regional Cuisines
    'southern': 'American',
    'newengland': 'American',
    'californian': 'American',
    'texmex': 'American',
    'cajun': 'American',
    'creole': 'American',
    'southwestern': 'American',
    'midwestern': 'American',
    'pacificnorthwest': 'American',
    // Middle Eastern Regional Cuisines
    'lebanese': 'Middle-Eastern',
    'syrian': 'Middle-Eastern',
    'jordanian': 'Middle-Eastern',
    'palestinian': 'Middle-Eastern',
    'iraqi': 'Middle-Eastern',
    'iranian': 'Middle-Eastern',
    'turkish': 'Middle-Eastern',
    // African Regional Cuisines (North African primarily assigned to African)
    'ethiopian': 'African',
    'nigerian': 'African',
    'ghanaian': 'African',
    'kenyan': 'African',
    'southafrican': 'African',
    'egyptian': 'African',
    'moroccan': 'African',
    'tunisian': 'African',
    'algerian': 'African',
    'libyan': 'African',
    // Mediterranean Regional Cuisines (European Mediterranean focus)
    'greek': 'Mediterranean',
    'cypriot': 'Mediterranean',
    'maltese': 'Mediterranean',
    // Russian Regional Cuisines
    'moscow': 'Russian',
    'stpetersburg': 'Russian',
    'siberian': 'Russian',
    'caucasian': 'Russian',
    'centralasian': 'Russian',
};
// ========== ALIAS RESOLUTION FUNCTIONS ==========
/**
 * Resolves a cuisine name to its primary cuisine type
 * @param cuisineName - The cuisine name to resolve (case-insensitive)
 * @returns The primary cuisine type, or the original name if no alias exists
 */
function resolveCuisineType(cuisineName) {
    const normalizedName = cuisineName.toLowerCase().replace(/[^a-z]/g, '');
    return exports.CUISINE_ALIASES[normalizedName] || cuisineName;
}
exports.resolveCuisineType = resolveCuisineType;
/**
 * Gets all regional cuisines that map to a primary cuisine type
 * @param primaryCuisine - The primary cuisine type
 * @returns Array of regional cuisine names that map to this primary cuisine
 */
function getRegionalCuisines(primaryCuisine) {
    return Object.entries(exports.CUISINE_ALIASES)
        .filter(([_, primary]) => primary === primaryCuisine)
        .map(([regional, _]) => regional);
}
exports.getRegionalCuisines = getRegionalCuisines;
/**
 * Checks if a cuisine name is a regional variant
 * @param cuisineName - The cuisine name to check
 * @returns True if the cuisine is a regional variant, false if it's a primary cuisine
 */
function isRegionalCuisine(cuisineName) {
    const normalizedName = cuisineName.toLowerCase().replace(/[^a-z]/g, '');
    return normalizedName in exports.CUISINE_ALIASES;
}
exports.isRegionalCuisine = isRegionalCuisine;
/**
 * Gets the primary cuisine type for a regional cuisine
 * @param regionalCuisine - The regional cuisine name
 * @returns The primary cuisine type, or undefined if not found
 */
function getPrimaryCuisine(regionalCuisine) {
    const normalizedName = regionalCuisine.toLowerCase().replace(/[^a-z]/g, '');
    return exports.CUISINE_ALIASES[normalizedName];
}
exports.getPrimaryCuisine = getPrimaryCuisine;
// ========== VALIDATION FUNCTIONS ==========
/**
 * Validates if a cuisine name is a valid primary cuisine type
 * @param cuisineName - The cuisine name to validate
 * @returns True if it's a valid primary cuisine type
 */
function isValidPrimaryCuisine(cuisineName) {
    const primaryCuisines = [
        'Chinese', 'Japanese', 'Korean', 'Indian', 'Thai', 'Vietnamese',
        'Italian', 'French', 'Greek', 'Spanish', 'Mexican', 'American',
        'African', 'Middle-Eastern', 'Mediterranean', 'Russian', 'Fusion'
    ];
    return primaryCuisines.includes(cuisineName);
}
exports.isValidPrimaryCuisine = isValidPrimaryCuisine;
/**
 * Normalizes a cuisine name to ensure consistent casing and formatting
 * @param cuisineName - The cuisine name to normalize
 * @returns The normalized cuisine name
 */
function normalizeCuisineName(cuisineName) {
    // For regional cuisines, just normalize the casing without resolving
    if (isRegionalCuisine(cuisineName)) {
        return cuisineName.charAt(0).toUpperCase() + cuisineName.slice(1).toLowerCase();
    }
    // For primary cuisines, return with proper casing
    if (isValidPrimaryCuisine(cuisineName)) {
        return cuisineName;
    }
    // Otherwise, return the original name with proper casing
    return cuisineName.charAt(0).toUpperCase() + cuisineName.slice(1).toLowerCase();
}
exports.normalizeCuisineName = normalizeCuisineName;
// ========== TYPE GUARDS ==========
/**
 * Type guard to check if a string is a primary cuisine type
 * @param value - The value to check
 * @returns True if the value is a primary cuisine type
 */
function isPrimaryCuisineType(value) {
    return isValidPrimaryCuisine(value);
}
exports.isPrimaryCuisineType = isPrimaryCuisineType;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,