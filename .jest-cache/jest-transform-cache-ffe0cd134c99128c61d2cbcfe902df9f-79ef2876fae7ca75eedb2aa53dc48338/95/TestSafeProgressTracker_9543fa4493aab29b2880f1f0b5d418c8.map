{"file":"/Users/GregCastro/Desktop/WhatToEatNext/.consolidation-backups-2025-08-23T17-54-10-092Z/src/__tests__/utils/TestSafeProgressTracker.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/.consolidation-backups-2025-08-23T17-54-10-092Z/src/__tests__/utils/TestSafeProgressTracker.ts"],"sourcesContent":["/**\n * Test-Safe Progress Tracker\n *\n * Memory-efficient progress tracking system designed specifically for test environments.\n * Prevents memory leaks and provides controlled progress simulation.\n */\n\nimport {\n  ProgressMetrics,\n  ProgressReport,\n  PhaseReport,\n  PhaseStatus,\n  ValidationResult,\n} from '../../types/campaign';\n\nimport { TestMemoryMonitor } from './TestMemoryMonitor';\n\ninterface TestProgressConfig {\n  maxHistorySize: number;\n  memoryCheckFrequency: number;\n  enableMemoryMonitoring: boolean;\n  simulateRealProgress: boolean;\n  progressUpdateInterval: number;\n}\n\ninterface ProgressSnapshot {\n  timestamp: number;\n  metrics: ProgressMetrics;\n  testName?: string;\n  memoryUsage?: number;\n}\n\n/**\n * Test-safe progress tracker that prevents memory leaks and provides\n * controlled progress simulation for testing campaign systems.\n */\nexport class TestSafeProgressTracker {\n  private config: TestProgressConfig;\n  private memoryMonitor: TestMemoryMonitor | null = null;\n  private progressHistory: ProgressSnapshot[] = [];\n  private currentMetrics: ProgressMetrics;\n  private isTracking: boolean = false;\n  private trackingStartTime: number = 0;\n  private progressUpdateTimer: NodeJS.Timeout | null = null;\n  private memoryCheckCounter: number = 0;\n\n  constructor(config?: Partial<TestProgressConfig>) {\n    this.config = {\n      maxHistorySize: 20, // Keep only 20 snapshots to prevent memory issues\n      memoryCheckFrequency: 5, // Check memory every 5 operations\n      enableMemoryMonitoring: true,\n      simulateRealProgress: false,\n      progressUpdateInterval: 1000, // 1 second for simulated progress\n      ...config,\n    };\n\n    this.currentMetrics = this.createInitialMetrics();\n\n    if (this.config.enableMemoryMonitoring) {\n      this.memoryMonitor = new TestMemoryMonitor({\n        heapUsed: 50 * 1024 * 1024, // 50MB\n        heapTotal: 100 * 1024 * 1024, // 100MB\n        external: 25 * 1024 * 1024, // 25MB\n        rss: 150 * 1024 * 1024, // 150MB\n      });\n    }\n  }\n\n  /**\n   * Start progress tracking with memory monitoring\n   */\n  startTracking(testName?: string): void {\n    if (this.isTracking) {\n      console.warn('Progress tracking already active');\n      return;\n    }\n\n    this.isTracking = true;\n    this.trackingStartTime = Date.now();\n\n    if (this.memoryMonitor) {\n      this.memoryMonitor.takeSnapshot(`tracking-start-${testName || 'unknown'}`);\n    }\n\n    // Take initial snapshot\n    this.takeProgressSnapshot(`start-${testName || 'tracking'}`);\n\n    // Start simulated progress updates if enabled\n    if (this.config.simulateRealProgress) {\n      this.startProgressSimulation();\n    }\n\n    console.log(`Test-safe progress tracking started${testName ? ` for ${testName}` : ''}`);\n  }\n\n  /**\n   * Stop progress tracking and perform cleanup\n   */\n  stopTracking(testName?: string): void {\n    if (!this.isTracking) {\n      return;\n    }\n\n    this.isTracking = false;\n\n    // Stop progress simulation\n    if (this.progressUpdateTimer) {\n      clearInterval(this.progressUpdateTimer);\n      this.progressUpdateTimer = null;\n    }\n\n    // Take final snapshot\n    this.takeProgressSnapshot(`stop-${testName || 'tracking'}`);\n\n    // Perform memory cleanup\n    this.performMemoryCleanup(testName);\n\n    console.log(`Test-safe progress tracking stopped${testName ? ` for ${testName}` : ''}`);\n  }\n\n  /**\n   * Get current progress metrics without running actual measurements\n   */\n  async getProgressMetrics(): Promise<ProgressMetrics> {\n    this.checkMemoryPeriodically();\n    return { ...this.currentMetrics };\n  }\n\n  /**\n   * Update progress metrics for testing scenarios\n   */\n  updateMetrics(updates: Partial<ProgressMetrics>, testName?: string): void {\n    // Deep merge the updates\n    this.currentMetrics = this.deepMergeMetrics(this.currentMetrics, updates);\n\n    // Take snapshot of the update\n    this.takeProgressSnapshot(`update-${testName || 'manual'}`);\n\n    this.checkMemoryPeriodically();\n  }\n\n  /**\n   * Simulate progress over time for realistic testing\n   */\n  simulateProgress(\n    targetMetrics: Partial<ProgressMetrics>,\n    durationMs: number,\n    testName?: string,\n  ): Promise<void> {\n    return new Promise(resolve => {\n      const UNUSED_startTime = Date.now();\n      const startMetrics = { ...this.currentMetrics };\n      const steps = Math.max(1, Math.floor(durationMs / 100)); // Update every 100ms\n      let currentStep = 0;\n\n      const progressInterval = setInterval(() => {\n        currentStep++;\n        const progress = Math.min(1, currentStep / steps);\n\n        // Interpolate between start and target metrics\n        const interpolatedMetrics = this.interpolateMetrics(startMetrics, targetMetrics, progress);\n\n        this.currentMetrics = interpolatedMetrics;\n        this.takeProgressSnapshot(`simulate-step-${currentStep}-${testName || 'auto'}`);\n\n        if (currentStep >= steps) {\n          clearInterval(progressInterval);\n          resolve();\n        }\n      }, 100);\n    });\n  }\n\n  /**\n   * Generate test-safe progress report\n   */\n  async generateProgressReport(testName?: string): Promise<ProgressReport> {\n    const currentMetrics = await this.getProgressMetrics();\n    const targetMetrics = this.createTargetMetrics();\n\n    // Calculate overall progress\n    const overallProgress = this.calculateOverallProgress(currentMetrics, targetMetrics);\n\n    // Generate mock phase reports\n    const phases: PhaseReport[] = [\n      {\n        phaseId: 'test-phase-1',\n        phaseName: 'Test Phase 1',\n        startTime: new Date(this.trackingStartTime),\n        status: PhaseStatus.COMPLETED,\n        metrics: currentMetrics,\n        achievements: this.generateMockAchievements(currentMetrics),\n        issues: this.generateMockIssues(currentMetrics),\n        recommendations: this.generateMockRecommendations(currentMetrics),\n      },\n    ];\n\n    const report: ProgressReport = {\n      campaignId: `test-campaign-${testName || 'default'}`,\n      overallProgress,\n      phases,\n      currentMetrics,\n      targetMetrics,\n      estimatedCompletion: new Date(Date.now() + 3600000), // 1 hour from now\n    };\n\n    // Take snapshot for report generation\n    this.takeProgressSnapshot(`report-${testName || 'generated'}`);\n\n    return report;\n  }\n\n  /**\n   * Get progress history with memory-safe access\n   */\n  getProgressHistory(): ProgressSnapshot[] {\n    return [...this.progressHistory]; // Return copy to prevent external modification\n  }\n\n  /**\n   * Get memory usage statistics\n   */\n  getMemoryStatistics(): {\n    currentUsage: string;\n    peakUsage: string;\n    snapshotCount: number;\n    memoryEfficient: boolean;\n  } | null {\n    if (!this.memoryMonitor) {\n      return null;\n    }\n\n    const summary = this.memoryMonitor.getMemorySummary();\n\n    return {\n      currentUsage: `${summary.currentMemory.toFixed(2)}MB`,\n      peakUsage: `${summary.peakMemory.toFixed(2)}MB`,\n      snapshotCount: Math.floor(summary.testDuration / 1000), // Convert duration to a count-like metric\n      memoryEfficient: summary.totalIncrease < 25, // Less than 25MB increase is efficient\n    };\n  }\n\n  /**\n   * Validate progress tracking state\n   */\n  validateTrackingState(): ValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Check memory usage\n    if (this.memoryMonitor) {\n      const memoryCheck = this.memoryMonitor.checkMemoryUsage('validation');\n      errors.push(...memoryCheck.errors);\n      warnings.push(...memoryCheck.warnings);\n    }\n\n    // Check history size\n    if (this.progressHistory.length > this.config.maxHistorySize) {\n      warnings.push(\n        `Progress history size (${this.progressHistory.length}) exceeds maximum (${this.config.maxHistorySize})`,\n      );\n    }\n\n    // Check for tracking consistency\n    if (this.isTracking && this.trackingStartTime === 0) {\n      errors.push('Tracking is active but start time is not set');\n    }\n\n    return {\n      success: errors.length === 0,\n      errors,\n      warnings,\n    };\n  }\n\n  /**\n   * Reset tracker state for clean test isolation\n   */\n  reset(): void {\n    // Stop any active tracking\n    if (this.isTracking) {\n      this.stopTracking('reset');\n    }\n\n    // Clear history\n    this.progressHistory = [];\n\n    // Reset metrics\n    this.currentMetrics = this.createInitialMetrics();\n\n    // Reset counters\n    this.memoryCheckCounter = 0;\n    this.trackingStartTime = 0;\n\n    // Reset memory monitor\n    if (this.memoryMonitor) {\n      this.memoryMonitor = new TestMemoryMonitor({\n        heapUsed: 50 * 1024 * 1024, // 50MB\n        heapTotal: 100 * 1024 * 1024, // 100MB\n        external: 25 * 1024 * 1024, // 25MB\n        rss: 150 * 1024 * 1024, // 150MB\n      });\n    }\n\n    console.log('Test-safe progress tracker reset');\n  }\n\n  /**\n   * Cleanup resources and prevent memory leaks\n   */\n  cleanup(): void {\n    // Stop tracking if active\n    if (this.isTracking) {\n      this.stopTracking('cleanup');\n    }\n\n    // Clear all timers\n    if (this.progressUpdateTimer) {\n      clearInterval(this.progressUpdateTimer);\n      this.progressUpdateTimer = null;\n    }\n\n    // Clear history\n    this.progressHistory = [];\n\n    // Cleanup memory monitor\n    if (this.memoryMonitor) {\n      this.memoryMonitor.cleanup('tracker-cleanup');\n    }\n\n    console.log('Test-safe progress tracker cleaned up');\n  }\n\n  // Private helper methods\n\n  private takeProgressSnapshot(testName: string): void {\n    const snapshot: ProgressSnapshot = {\n      timestamp: Date.now(),\n      metrics: { ...this.currentMetrics },\n      testName,\n      memoryUsage: this.memoryMonitor ? process.memoryUsage().heapUsed : undefined,\n    };\n\n    this.progressHistory.push(snapshot);\n\n    // Maintain history size limit to prevent memory issues\n    if (this.progressHistory.length > this.config.maxHistorySize) {\n      const excessCount = this.progressHistory.length - this.config.maxHistorySize;\n      this.progressHistory.splice(0, excessCount);\n    }\n  }\n\n  private checkMemoryPeriodically(): void {\n    this.memoryCheckCounter++;\n\n    if (this.memoryCheckCounter % this.config.memoryCheckFrequency === 0 && this.memoryMonitor) {\n      const memoryCheck = this.memoryMonitor.checkMemoryUsage(\n        `periodic-${this.memoryCheckCounter}`,\n      );\n\n      if (!memoryCheck.isWithinLimits) {\n        console.warn('Memory check failed in progress tracker:', memoryCheck.errors);\n        this.performMemoryCleanup('periodic-check');\n      }\n    }\n  }\n\n  private performMemoryCleanup(reason?: string): void {\n    // Trim progress history\n    if (this.progressHistory.length > this.config.maxHistorySize / 2) {\n      const keepCount = Math.floor(this.config.maxHistorySize / 2);\n      this.progressHistory = this.progressHistory.slice(-keepCount);\n    }\n\n    // Force memory cleanup if monitor is available\n    if (this.memoryMonitor) {\n      this.memoryMonitor.cleanup(reason || 'progress-tracker-cleanup');\n    }\n\n    // Force garbage collection if available\n    if (global.gc) {\n      try {\n        global.gc();\n      } catch (error) {\n        console.warn('Failed to force garbage collection:', error);\n      }\n    }\n  }\n\n  private startProgressSimulation(): void {\n    if (this.progressUpdateTimer) {\n      return;\n    }\n\n    this.progressUpdateTimer = setInterval(() => {\n      // Simulate small progress increments\n      const updates: Partial<ProgressMetrics> = {\n        typeScriptErrors: {\n          ...this.currentMetrics.typeScriptErrors,\n          current: Math.max(0, this.currentMetrics.typeScriptErrors.current - 1),\n        },\n        lintingWarnings: {\n          ...this.currentMetrics.lintingWarnings,\n          current: Math.max(0, this.currentMetrics.lintingWarnings.current - 5),\n        },\n      };\n\n      this.updateMetrics(updates, 'simulation');\n    }, this.config.progressUpdateInterval);\n  }\n\n  private createInitialMetrics(): ProgressMetrics {\n    return {\n      typeScriptErrors: {\n        current: 86,\n        target: 0,\n        reduction: 0,\n        percentage: 0,\n      },\n      lintingWarnings: {\n        current: 4506,\n        target: 0,\n        reduction: 0,\n        percentage: 0,\n      },\n      buildPerformance: {\n        currentTime: 12.5,\n        targetTime: 10,\n        cacheHitRate: 0.6,\n        memoryUsage: 60,\n      },\n      enterpriseSystems: {\n        current: 0,\n        target: 200,\n        transformedExports: 0,\n      },\n    };\n  }\n\n  private createTargetMetrics(): ProgressMetrics {\n    return {\n      typeScriptErrors: {\n        current: 0,\n        target: 0,\n        reduction: 86,\n        percentage: 100,\n      },\n      lintingWarnings: {\n        current: 0,\n        target: 0,\n        reduction: 4506,\n        percentage: 100,\n      },\n      buildPerformance: {\n        currentTime: 8,\n        targetTime: 10,\n        cacheHitRate: 0.8,\n        memoryUsage: 45,\n      },\n      enterpriseSystems: {\n        current: 200,\n        target: 200,\n        transformedExports: 200,\n      },\n    };\n  }\n\n  private deepMergeMetrics(\n    current: ProgressMetrics,\n    updates: Partial<ProgressMetrics>,\n  ): ProgressMetrics {\n    const result = { ...current };\n\n    Object.keys(updates).forEach(key => {\n      const updateValue = updates[key as keyof ProgressMetrics];\n      if (updateValue && typeof updateValue === 'object') {\n        result[key as keyof ProgressMetrics] = {\n          ...current[key as keyof ProgressMetrics],\n          ...updateValue,\n        } as unknown;\n      }\n    });\n\n    return result;\n  }\n\n  private interpolateMetrics(\n    start: ProgressMetrics,\n    target: Partial<ProgressMetrics>,\n    progress: number,\n  ): ProgressMetrics {\n    const result = { ...start };\n\n    // Interpolate TypeScript errors\n    if (target.typeScriptErrors?.current !== undefined) {\n      const startValue = start.typeScriptErrors.current;\n      const targetValue = target.typeScriptErrors.current;\n      result.typeScriptErrors.current = Math.round(\n        startValue + (targetValue - startValue) * progress,\n      );\n    }\n\n    // Interpolate linting warnings\n    if (target.lintingWarnings?.current !== undefined) {\n      const startValue = start.lintingWarnings.current;\n      const targetValue = target.lintingWarnings.current;\n      result.lintingWarnings.current = Math.round(\n        startValue + (targetValue - startValue) * progress,\n      );\n    }\n\n    return result;\n  }\n\n  private calculateOverallProgress(current: ProgressMetrics, target: ProgressMetrics): number {\n    const tsProgress =\n      target.typeScriptErrors.current === 0 ? (1 - current.typeScriptErrors.current / 86) * 100 : 0;\n\n    const lintProgress =\n      target.lintingWarnings.current === 0 ? (1 - current.lintingWarnings.current / 4506) * 100 : 0;\n\n    const buildProgress =\n      current.buildPerformance.currentTime <= target.buildPerformance.currentTime ? 100 : 0;\n\n    const enterpriseProgress =\n      (current.enterpriseSystems.current / target.enterpriseSystems.current) * 100;\n\n    return Math.round((tsProgress + lintProgress + buildProgress + enterpriseProgress) / 4);\n  }\n\n  private generateMockAchievements(metrics: ProgressMetrics): string[] {\n    const achievements: string[] = [];\n\n    if (metrics.typeScriptErrors.current === 0) {\n      achievements.push('Zero TypeScript errors achieved');\n    }\n\n    if (metrics.lintingWarnings.current === 0) {\n      achievements.push('Zero linting warnings achieved');\n    }\n\n    if (metrics.buildPerformance.currentTime <= 10) {\n      achievements.push('Build time under 10 seconds');\n    }\n\n    return achievements;\n  }\n\n  private generateMockIssues(metrics: ProgressMetrics): string[] {\n    const issues: string[] = [];\n\n    if (metrics.typeScriptErrors.current > 0) {\n      issues.push(`${metrics.typeScriptErrors.current} TypeScript errors remaining`);\n    }\n\n    if (metrics.lintingWarnings.current > 1000) {\n      issues.push(`High linting warning count: ${metrics.lintingWarnings.current}`);\n    }\n\n    return issues;\n  }\n\n  private generateMockRecommendations(metrics: ProgressMetrics): string[] {\n    const recommendations: string[] = [];\n\n    if (metrics.typeScriptErrors.current > 0) {\n      recommendations.push('Continue with TypeScript error elimination');\n    }\n\n    if (metrics.lintingWarnings.current > 0) {\n      recommendations.push('Apply systematic linting fixes');\n    }\n\n    return recommendations;\n  }\n}\n\nexport default TestSafeProgressTracker;\n"],"version":3}