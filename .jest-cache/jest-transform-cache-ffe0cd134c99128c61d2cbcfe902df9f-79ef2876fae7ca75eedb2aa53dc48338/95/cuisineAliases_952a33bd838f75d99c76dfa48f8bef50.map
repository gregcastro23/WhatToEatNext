{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/types/cuisineAliases.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/types/cuisineAliases.ts"],"sourcesContent":["/**\n * Cuisine Type Aliases System\n * \n * This system unifies regional cuisines under broader ethnic categories\n * to provide consistent cuisine type handling across the application.\n */\n\n// ========== PRIMARY CUISINE TYPES ==========\n\n/**\n * Primary Cuisine Types\n * These are the main ethnic cuisine categories that regional cuisines map to\n */\nexport type PrimaryCuisineType = \n  | 'Chinese'\n  | 'Japanese' \n  | 'Korean'\n  | 'Indian'\n  | 'Thai'\n  | 'Vietnamese'\n  | 'Italian'\n  | 'French'\n  | 'Greek'\n  | 'Spanish'\n  | 'Mexican'\n  | 'American'\n  | 'African'\n  | 'Middle-Eastern'\n  | 'Mediterranean'\n  | 'Russian'\n  | 'Fusion';\n\n// ========== REGIONAL CUISINE ALIASES ==========\n\n/**\n * Regional Cuisine Aliases\n * Maps regional cuisines to their primary ethnic category\n */\nexport const CUISINE_ALIASES: Record<string, PrimaryCuisineType> = {\n  // Chinese Regional Cuisines\n  'sichuanese': 'Chinese',\n  'cantonese': 'Chinese', \n  'shanghainese': 'Chinese',\n  'hunanese': 'Chinese',\n  'northern': 'Chinese',\n  'sichuan': 'Chinese',\n  'canton': 'Chinese',\n  'shanghai': 'Chinese',\n  'hunan': 'Chinese',\n  \n  // Japanese Regional Cuisines\n  'tokyo': 'Japanese',\n  'osaka': 'Japanese',\n  'kyoto': 'Japanese',\n  'hokkaido': 'Japanese',\n  \n  // Korean Regional Cuisines\n  'seoul': 'Korean',\n  'busan': 'Korean',\n  'jeju': 'Korean',\n  \n  // Indian Regional Cuisines\n  'punjabi': 'Indian',\n  'bengali': 'Indian',\n  'gujarati': 'Indian',\n  'marathi': 'Indian',\n  'tamil': 'Indian',\n  'telugu': 'Indian',\n  'kannada': 'Indian',\n  'malayalam': 'Indian',\n  'kashmiri': 'Indian',\n  'rajasthani': 'Indian',\n  'hyderabadi': 'Indian',\n  'lucknowi': 'Indian',\n  \n  // Thai Regional Cuisines\n  'bangkok': 'Thai',\n  'chiangmai': 'Thai',\n  'southernthai': 'Thai',\n  'northeastern': 'Thai',\n  \n  // Vietnamese Regional Cuisines\n  'hanoi': 'Vietnamese',\n  'saigon': 'Vietnamese',\n  'hue': 'Vietnamese',\n  \n  // Italian Regional Cuisines\n  'tuscan': 'Italian',\n  'sicilian': 'Italian',\n  'lombard': 'Italian',\n  'venetian': 'Italian',\n  'roman': 'Italian',\n  'neapolitan': 'Italian',\n  'piedmontese': 'Italian',\n  'ligurian': 'Italian',\n  'emilian': 'Italian',\n  'sardinian': 'Italian',\n  \n  // French Regional Cuisines\n  'provencal': 'French',\n  'norman': 'French',\n  'alsatian': 'French',\n  'lyonnais': 'French',\n  'bordeaux': 'French',\n  'burgundian': 'French',\n  'breton': 'French',\n  \n  // Spanish Regional Cuisines\n  'catalan': 'Spanish',\n  'andalusian': 'Spanish',\n  'basque': 'Spanish',\n  'galician': 'Spanish',\n  'valencian': 'Spanish',\n  'castilian': 'Spanish',\n  \n  // Mexican Regional Cuisines\n  'yucatecan': 'Mexican',\n  'oaxacan': 'Mexican',\n  'poblano': 'Mexican',\n  'veracruzano': 'Mexican',\n  'jaliscan': 'Mexican',\n  'sonoran': 'Mexican',\n  \n  // American Regional Cuisines\n  'southern': 'American',\n  'newengland': 'American',\n  'californian': 'American',\n  'texmex': 'American',\n  'cajun': 'American',\n  'creole': 'American',\n  'southwestern': 'American',\n  'midwestern': 'American',\n  'pacificnorthwest': 'American',\n  \n  // Middle Eastern Regional Cuisines\n  'lebanese': 'Middle-Eastern',\n  'syrian': 'Middle-Eastern',\n  'jordanian': 'Middle-Eastern',\n  'palestinian': 'Middle-Eastern',\n  'iraqi': 'Middle-Eastern',\n  'iranian': 'Middle-Eastern',\n  'turkish': 'Middle-Eastern',\n  \n  // African Regional Cuisines (North African primarily assigned to African)\n  'ethiopian': 'African',\n  'nigerian': 'African',\n  'ghanaian': 'African',\n  'kenyan': 'African',\n  'southafrican': 'African',\n  'egyptian': 'African',\n  'moroccan': 'African',\n  'tunisian': 'African',\n  'algerian': 'African',\n  'libyan': 'African',\n  \n  // Mediterranean Regional Cuisines (European Mediterranean focus)\n  'greek': 'Mediterranean',\n  'cypriot': 'Mediterranean',\n  'maltese': 'Mediterranean',\n  \n  // Russian Regional Cuisines\n  'moscow': 'Russian',\n  'stpetersburg': 'Russian',\n  'siberian': 'Russian',\n  'caucasian': 'Russian',\n  'centralasian': 'Russian',\n};\n\n// ========== ALIAS RESOLUTION FUNCTIONS ==========\n\n/**\n * Resolves a cuisine name to its primary cuisine type\n * @param cuisineName - The cuisine name to resolve (case-insensitive)\n * @returns The primary cuisine type, or the original name if no alias exists\n */\nexport function resolveCuisineType(cuisineName: string): PrimaryCuisineType | string {\n  const normalizedName = cuisineName.toLowerCase().replace(/[^a-z]/g, '');\n  return CUISINE_ALIASES[normalizedName] || cuisineName;\n}\n\n/**\n * Gets all regional cuisines that map to a primary cuisine type\n * @param primaryCuisine - The primary cuisine type\n * @returns Array of regional cuisine names that map to this primary cuisine\n */\nexport function getRegionalCuisines(primaryCuisine: PrimaryCuisineType): string[] {\n  return Object.entries(CUISINE_ALIASES)\n    .filter(([_, primary]) => primary === primaryCuisine)\n    .map(([regional, _]) => regional);\n}\n\n/**\n * Checks if a cuisine name is a regional variant\n * @param cuisineName - The cuisine name to check\n * @returns True if the cuisine is a regional variant, false if it's a primary cuisine\n */\nexport function isRegionalCuisine(cuisineName: string): boolean {\n  const normalizedName = cuisineName.toLowerCase().replace(/[^a-z]/g, '');\n  return normalizedName in CUISINE_ALIASES;\n}\n\n/**\n * Gets the primary cuisine type for a regional cuisine\n * @param regionalCuisine - The regional cuisine name\n * @returns The primary cuisine type, or undefined if not found\n */\nexport function getPrimaryCuisine(regionalCuisine: string): PrimaryCuisineType | undefined {\n  const normalizedName = regionalCuisine.toLowerCase().replace(/[^a-z]/g, '');\n  return CUISINE_ALIASES[normalizedName];\n}\n\n// ========== VALIDATION FUNCTIONS ==========\n\n/**\n * Validates if a cuisine name is a valid primary cuisine type\n * @param cuisineName - The cuisine name to validate\n * @returns True if it's a valid primary cuisine type\n */\nexport function isValidPrimaryCuisine(cuisineName: string): cuisineName is PrimaryCuisineType {\n  const primaryCuisines: PrimaryCuisineType[] = [\n    'Chinese', 'Japanese', 'Korean', 'Indian', 'Thai', 'Vietnamese',\n    'Italian', 'French', 'Greek', 'Spanish', 'Mexican', 'American',\n    'African', 'Middle-Eastern', 'Mediterranean', 'Russian', 'Fusion'\n  ];\n  return primaryCuisines.includes(cuisineName as PrimaryCuisineType);\n}\n\n/**\n * Normalizes a cuisine name to ensure consistent casing and formatting\n * @param cuisineName - The cuisine name to normalize\n * @returns The normalized cuisine name\n */\nexport function normalizeCuisineName(cuisineName: string): string {\n  // For regional cuisines, just normalize the casing without resolving\n  if (isRegionalCuisine(cuisineName)) {\n    return cuisineName.charAt(0).toUpperCase() + cuisineName.slice(1).toLowerCase();\n  }\n  \n  // For primary cuisines, return with proper casing\n  if (isValidPrimaryCuisine(cuisineName)) {\n    return cuisineName;\n  }\n  \n  // Otherwise, return the original name with proper casing\n  return cuisineName.charAt(0).toUpperCase() + cuisineName.slice(1).toLowerCase();\n}\n\n// ========== TYPE GUARDS ==========\n\n/**\n * Type guard to check if a string is a primary cuisine type\n * @param value - The value to check\n * @returns True if the value is a primary cuisine type\n */\nexport function isPrimaryCuisineType(value: string): value is PrimaryCuisineType {\n  return isValidPrimaryCuisine(value);\n}\n\n// ========== EXPORT TYPES ==========\n\n/**\n * Union type for all possible cuisine names (primary + regional)\n */\nexport type AllCuisineTypes = PrimaryCuisineType | keyof typeof CUISINE_ALIASES;\n\n/**\n * Type for cuisine alias mapping\n */\nexport type CuisineAliasMap = typeof CUISINE_ALIASES;\n\n// ========== TYPE ALIASES FOR BACKWARDS COMPATIBILITY ==========\n\n/**\n * CuisineType alias for backwards compatibility\n */\nexport type CuisineType = PrimaryCuisineType; "],"version":3}