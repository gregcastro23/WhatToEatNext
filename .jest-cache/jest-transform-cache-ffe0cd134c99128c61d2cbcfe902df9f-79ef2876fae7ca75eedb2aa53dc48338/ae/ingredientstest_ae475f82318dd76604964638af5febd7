50125d26e1661388b5f9984cc5a27a20
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const recipeIngredient_1 = require("@/types/recipeIngredient");
// Removed duplicate: // Removed duplicate: // Removed duplicate: import type { RecipeIngredient } from '@/types/recipeIngredient';
describe('Ingredient Data Structure', () => {
    it('should validate a correctly structured ingredient', () => {
        const validIngredient = {
            name: 'Test Ingredient',
            amount: 1,
            unit: 'cup',
            category: 'vegetables',
            elementalProperties: {
                Fire: 0.25,
                Water: 0.25,
                Earth: 0.25,
                Air: 0.25,
            },
        };
        expect((0, recipeIngredient_1.validateIngredient)(validIngredient)).toBe(true);
    });
    it('should reject an ingredient with missing required fields', () => {
        const missingNameIngredient = {
            amount: 1,
            unit: 'cup',
        };
        expect((0, recipeIngredient_1.validateIngredient)(missingNameIngredient)).toBe(false);
    });
    it('should handle ingredients with missing elemental properties', () => {
        const noElementalIngredient = {
            name: 'Test Ingredient',
            amount: 1,
            unit: 'cup',
            category: 'vegetables',
        };
        // This should still be valid as elemental properties are optional
        expect((0, recipeIngredient_1.validateIngredient)(noElementalIngredient)).toBe(true);
    });
    it('should validate ingredients with fractional amounts', () => {
        const fractionIngredient = {
            name: 'Test Ingredient',
            amount: 0.5,
            unit: 'cup',
            category: 'vegetables',
        };
        expect((0, recipeIngredient_1.validateIngredient)(fractionIngredient)).toBe(true);
    });
    it('should validate ingredients with different unit types', () => {
        const units = [
            'cup',
            'tablespoon',
            'teaspoon',
            'gram',
            'ounce',
            'pound',
            'piece',
        ];
        for (const unit of units) {
            const ingredient = {
                name: 'Test Ingredient',
                amount: 1,
                unit,
                category: 'vegetables',
            };
            expect((0, recipeIngredient_1.validateIngredient)(ingredient)).toBe(true);
        }
    });
    it('should handle ingredients with additional optional properties', () => {
        const fullIngredient = {
            name: 'Test Ingredient',
            amount: 1,
            unit: 'cup',
            category: 'vegetables',
            optional: true,
            preparation: 'diced',
            notes: 'Use fresh if possible',
            elementalProperties: {
                Fire: 0.25,
                Water: 0.25,
                Earth: 0.25,
                Air: 0.25,
            },
            season: ['summer', 'fall'],
        };
        expect((0, recipeIngredient_1.validateIngredient)(fullIngredient)).toBe(true);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9fX3Rlc3RzX18vZGF0YS9pbmdyZWRpZW50cy50ZXN0LnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsK0RBQWlGO0FBQ2pGLG1JQUFtSTtBQUVuSSxRQUFRLENBQUMsMkJBQTJCLEVBQUUsR0FBRyxFQUFFO0lBQ3pDLEVBQUUsQ0FBQyxtREFBbUQsRUFBRSxHQUFHLEVBQUU7UUFDM0QsTUFBTSxlQUFlLEdBQXFCO1lBQ3hDLElBQUksRUFBRSxpQkFBaUI7WUFDdkIsTUFBTSxFQUFFLENBQUM7WUFDVCxJQUFJLEVBQUUsS0FBSztZQUNYLFFBQVEsRUFBRSxZQUFZO1lBQ3RCLG1CQUFtQixFQUFFO2dCQUNuQixJQUFJLEVBQUUsSUFBSTtnQkFDVixLQUFLLEVBQUUsSUFBSTtnQkFDWCxLQUFLLEVBQUUsSUFBSTtnQkFDWCxHQUFHLEVBQUUsSUFBSTthQUNWO1NBQ0YsQ0FBQztRQUVGLE1BQU0sQ0FBQyxJQUFBLHFDQUFrQixFQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDBEQUEwRCxFQUFFLEdBQUcsRUFBRTtRQUNsRSxNQUFNLHFCQUFxQixHQUFHO1lBQzVCLE1BQU0sRUFBRSxDQUFDO1lBQ1QsSUFBSSxFQUFFLEtBQUs7U0FDWixDQUFDO1FBRUYsTUFBTSxDQUFDLElBQUEscUNBQWtCLEVBQUMscUJBQW9ELENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMvRixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyw2REFBNkQsRUFBRSxHQUFHLEVBQUU7UUFDckUsTUFBTSxxQkFBcUIsR0FBcUI7WUFDOUMsSUFBSSxFQUFFLGlCQUFpQjtZQUN2QixNQUFNLEVBQUUsQ0FBQztZQUNULElBQUksRUFBRSxLQUFLO1lBQ1gsUUFBUSxFQUFFLFlBQVk7U0FDdkIsQ0FBQztRQUVGLGtFQUFrRTtRQUNsRSxNQUFNLENBQUMsSUFBQSxxQ0FBa0IsRUFBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9ELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHFEQUFxRCxFQUFFLEdBQUcsRUFBRTtRQUM3RCxNQUFNLGtCQUFrQixHQUFxQjtZQUMzQyxJQUFJLEVBQUUsaUJBQWlCO1lBQ3ZCLE1BQU0sRUFBRSxHQUFHO1lBQ1gsSUFBSSxFQUFFLEtBQUs7WUFDWCxRQUFRLEVBQUUsWUFBWTtTQUN2QixDQUFDO1FBRUYsTUFBTSxDQUFDLElBQUEscUNBQWtCLEVBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1RCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx1REFBdUQsRUFBRSxHQUFHLEVBQUU7UUFDL0QsTUFBTSxLQUFLLEdBQUc7WUFDWixLQUFLO1lBQ0wsWUFBWTtZQUNaLFVBQVU7WUFDVixNQUFNO1lBQ04sT0FBTztZQUNQLE9BQU87WUFDUCxPQUFPO1NBQ1IsQ0FBQztRQUVGLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO1lBQ3hCLE1BQU0sVUFBVSxHQUFxQjtnQkFDbkMsSUFBSSxFQUFFLGlCQUFpQjtnQkFDdkIsTUFBTSxFQUFFLENBQUM7Z0JBQ1QsSUFBSTtnQkFDSixRQUFRLEVBQUUsWUFBWTthQUN2QixDQUFDO1lBRUYsTUFBTSxDQUFDLElBQUEscUNBQWtCLEVBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDbkQ7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywrREFBK0QsRUFBRSxHQUFHLEVBQUU7UUFDdkUsTUFBTSxjQUFjLEdBQXFCO1lBQ3ZDLElBQUksRUFBRSxpQkFBaUI7WUFDdkIsTUFBTSxFQUFFLENBQUM7WUFDVCxJQUFJLEVBQUUsS0FBSztZQUNYLFFBQVEsRUFBRSxZQUFZO1lBQ3RCLFFBQVEsRUFBRSxJQUFJO1lBQ2QsV0FBVyxFQUFFLE9BQU87WUFDcEIsS0FBSyxFQUFFLHVCQUF1QjtZQUM5QixtQkFBbUIsRUFBRTtnQkFDbkIsSUFBSSxFQUFFLElBQUk7Z0JBQ1YsS0FBSyxFQUFFLElBQUk7Z0JBQ1gsS0FBSyxFQUFFLElBQUk7Z0JBQ1gsR0FBRyxFQUFFLElBQUk7YUFDVjtZQUNELE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUM7U0FDM0IsQ0FBQztRQUVGLE1BQU0sQ0FBQyxJQUFBLHFDQUFrQixFQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hELENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9fX3Rlc3RzX18vZGF0YS9pbmdyZWRpZW50cy50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlY2lwZUluZ3JlZGllbnQgLCB2YWxpZGF0ZUluZ3JlZGllbnQgfSBmcm9tICdAL3R5cGVzL3JlY2lwZUluZ3JlZGllbnQnO1xuLy8gUmVtb3ZlZCBkdXBsaWNhdGU6IC8vIFJlbW92ZWQgZHVwbGljYXRlOiAvLyBSZW1vdmVkIGR1cGxpY2F0ZTogaW1wb3J0IHR5cGUgeyBSZWNpcGVJbmdyZWRpZW50IH0gZnJvbSAnQC90eXBlcy9yZWNpcGVJbmdyZWRpZW50JztcblxuZGVzY3JpYmUoJ0luZ3JlZGllbnQgRGF0YSBTdHJ1Y3R1cmUnLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgdmFsaWRhdGUgYSBjb3JyZWN0bHkgc3RydWN0dXJlZCBpbmdyZWRpZW50JywgKCkgPT4ge1xuICAgIGNvbnN0IHZhbGlkSW5ncmVkaWVudDogUmVjaXBlSW5ncmVkaWVudCA9IHtcbiAgICAgIG5hbWU6ICdUZXN0IEluZ3JlZGllbnQnLFxuICAgICAgYW1vdW50OiAxLFxuICAgICAgdW5pdDogJ2N1cCcsXG4gICAgICBjYXRlZ29yeTogJ3ZlZ2V0YWJsZXMnLFxuICAgICAgZWxlbWVudGFsUHJvcGVydGllczoge1xuICAgICAgICBGaXJlOiAwLjI1LFxuICAgICAgICBXYXRlcjogMC4yNSxcbiAgICAgICAgRWFydGg6IDAuMjUsXG4gICAgICAgIEFpcjogMC4yNSxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIGV4cGVjdCh2YWxpZGF0ZUluZ3JlZGllbnQodmFsaWRJbmdyZWRpZW50KSkudG9CZSh0cnVlKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZWplY3QgYW4gaW5ncmVkaWVudCB3aXRoIG1pc3NpbmcgcmVxdWlyZWQgZmllbGRzJywgKCkgPT4ge1xuICAgIGNvbnN0IG1pc3NpbmdOYW1lSW5ncmVkaWVudCA9IHtcbiAgICAgIGFtb3VudDogMSxcbiAgICAgIHVuaXQ6ICdjdXAnLFxuICAgIH07XG5cbiAgICBleHBlY3QodmFsaWRhdGVJbmdyZWRpZW50KG1pc3NpbmdOYW1lSW5ncmVkaWVudCBhcyB1bmtub3duIGFzIFJlY2lwZUluZ3JlZGllbnQpKS50b0JlKGZhbHNlKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBoYW5kbGUgaW5ncmVkaWVudHMgd2l0aCBtaXNzaW5nIGVsZW1lbnRhbCBwcm9wZXJ0aWVzJywgKCkgPT4ge1xuICAgIGNvbnN0IG5vRWxlbWVudGFsSW5ncmVkaWVudDogUmVjaXBlSW5ncmVkaWVudCA9IHtcbiAgICAgIG5hbWU6ICdUZXN0IEluZ3JlZGllbnQnLFxuICAgICAgYW1vdW50OiAxLFxuICAgICAgdW5pdDogJ2N1cCcsXG4gICAgICBjYXRlZ29yeTogJ3ZlZ2V0YWJsZXMnLFxuICAgIH07XG5cbiAgICAvLyBUaGlzIHNob3VsZCBzdGlsbCBiZSB2YWxpZCBhcyBlbGVtZW50YWwgcHJvcGVydGllcyBhcmUgb3B0aW9uYWxcbiAgICBleHBlY3QodmFsaWRhdGVJbmdyZWRpZW50KG5vRWxlbWVudGFsSW5ncmVkaWVudCkpLnRvQmUodHJ1ZSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgdmFsaWRhdGUgaW5ncmVkaWVudHMgd2l0aCBmcmFjdGlvbmFsIGFtb3VudHMnLCAoKSA9PiB7XG4gICAgY29uc3QgZnJhY3Rpb25JbmdyZWRpZW50OiBSZWNpcGVJbmdyZWRpZW50ID0ge1xuICAgICAgbmFtZTogJ1Rlc3QgSW5ncmVkaWVudCcsXG4gICAgICBhbW91bnQ6IDAuNSxcbiAgICAgIHVuaXQ6ICdjdXAnLFxuICAgICAgY2F0ZWdvcnk6ICd2ZWdldGFibGVzJyxcbiAgICB9O1xuXG4gICAgZXhwZWN0KHZhbGlkYXRlSW5ncmVkaWVudChmcmFjdGlvbkluZ3JlZGllbnQpKS50b0JlKHRydWUpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHZhbGlkYXRlIGluZ3JlZGllbnRzIHdpdGggZGlmZmVyZW50IHVuaXQgdHlwZXMnLCAoKSA9PiB7XG4gICAgY29uc3QgdW5pdHMgPSBbXG4gICAgICAnY3VwJyxcbiAgICAgICd0YWJsZXNwb29uJyxcbiAgICAgICd0ZWFzcG9vbicsXG4gICAgICAnZ3JhbScsXG4gICAgICAnb3VuY2UnLFxuICAgICAgJ3BvdW5kJyxcbiAgICAgICdwaWVjZScsXG4gICAgXTtcblxuICAgIGZvciAoY29uc3QgdW5pdCBvZiB1bml0cykge1xuICAgICAgY29uc3QgaW5ncmVkaWVudDogUmVjaXBlSW5ncmVkaWVudCA9IHtcbiAgICAgICAgbmFtZTogJ1Rlc3QgSW5ncmVkaWVudCcsXG4gICAgICAgIGFtb3VudDogMSxcbiAgICAgICAgdW5pdCxcbiAgICAgICAgY2F0ZWdvcnk6ICd2ZWdldGFibGVzJyxcbiAgICAgIH07XG5cbiAgICAgIGV4cGVjdCh2YWxpZGF0ZUluZ3JlZGllbnQoaW5ncmVkaWVudCkpLnRvQmUodHJ1ZSk7XG4gICAgfVxuICB9KTtcblxuICBpdCgnc2hvdWxkIGhhbmRsZSBpbmdyZWRpZW50cyB3aXRoIGFkZGl0aW9uYWwgb3B0aW9uYWwgcHJvcGVydGllcycsICgpID0+IHtcbiAgICBjb25zdCBmdWxsSW5ncmVkaWVudDogUmVjaXBlSW5ncmVkaWVudCA9IHtcbiAgICAgIG5hbWU6ICdUZXN0IEluZ3JlZGllbnQnLFxuICAgICAgYW1vdW50OiAxLFxuICAgICAgdW5pdDogJ2N1cCcsXG4gICAgICBjYXRlZ29yeTogJ3ZlZ2V0YWJsZXMnLFxuICAgICAgb3B0aW9uYWw6IHRydWUsXG4gICAgICBwcmVwYXJhdGlvbjogJ2RpY2VkJyxcbiAgICAgIG5vdGVzOiAnVXNlIGZyZXNoIGlmIHBvc3NpYmxlJyxcbiAgICAgIGVsZW1lbnRhbFByb3BlcnRpZXM6IHtcbiAgICAgICAgRmlyZTogMC4yNSxcbiAgICAgICAgV2F0ZXI6IDAuMjUsXG4gICAgICAgIEVhcnRoOiAwLjI1LFxuICAgICAgICBBaXI6IDAuMjUsXG4gICAgICB9LFxuICAgICAgc2Vhc29uOiBbJ3N1bW1lcicsICdmYWxsJ10sXG4gICAgfTtcblxuICAgIGV4cGVjdCh2YWxpZGF0ZUluZ3JlZGllbnQoZnVsbEluZ3JlZGllbnQpKS50b0JlKHRydWUpO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9