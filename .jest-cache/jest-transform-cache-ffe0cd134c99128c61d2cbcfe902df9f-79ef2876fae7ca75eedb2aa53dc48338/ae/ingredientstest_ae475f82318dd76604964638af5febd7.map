{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/data/ingredients.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/data/ingredients.test.ts"],"sourcesContent":["import { RecipeIngredient , validateIngredient } from '@/types/recipeIngredient';\n// Removed duplicate: // Removed duplicate: // Removed duplicate: import type { RecipeIngredient } from '@/types/recipeIngredient';\n\ndescribe('Ingredient Data Structure', () => {\n  it('should validate a correctly structured ingredient', () => {\n    const validIngredient: RecipeIngredient = {\n      name: 'Test Ingredient',\n      amount: 1,\n      unit: 'cup',\n      category: 'vegetables',\n      elementalProperties: {\n        Fire: 0.25,\n        Water: 0.25,\n        Earth: 0.25,\n        Air: 0.25,\n      },\n    };\n\n    expect(validateIngredient(validIngredient)).toBe(true);\n  });\n\n  it('should reject an ingredient with missing required fields', () => {\n    const missingNameIngredient = {\n      amount: 1,\n      unit: 'cup',\n    };\n\n    expect(validateIngredient(missingNameIngredient as unknown as RecipeIngredient)).toBe(false);\n  });\n\n  it('should handle ingredients with missing elemental properties', () => {\n    const noElementalIngredient: RecipeIngredient = {\n      name: 'Test Ingredient',\n      amount: 1,\n      unit: 'cup',\n      category: 'vegetables',\n    };\n\n    // This should still be valid as elemental properties are optional\n    expect(validateIngredient(noElementalIngredient)).toBe(true);\n  });\n\n  it('should validate ingredients with fractional amounts', () => {\n    const fractionIngredient: RecipeIngredient = {\n      name: 'Test Ingredient',\n      amount: 0.5,\n      unit: 'cup',\n      category: 'vegetables',\n    };\n\n    expect(validateIngredient(fractionIngredient)).toBe(true);\n  });\n\n  it('should validate ingredients with different unit types', () => {\n    const units = [\n      'cup',\n      'tablespoon',\n      'teaspoon',\n      'gram',\n      'ounce',\n      'pound',\n      'piece',\n    ];\n\n    for (const unit of units) {\n      const ingredient: RecipeIngredient = {\n        name: 'Test Ingredient',\n        amount: 1,\n        unit,\n        category: 'vegetables',\n      };\n\n      expect(validateIngredient(ingredient)).toBe(true);\n    }\n  });\n\n  it('should handle ingredients with additional optional properties', () => {\n    const fullIngredient: RecipeIngredient = {\n      name: 'Test Ingredient',\n      amount: 1,\n      unit: 'cup',\n      category: 'vegetables',\n      optional: true,\n      preparation: 'diced',\n      notes: 'Use fresh if possible',\n      elementalProperties: {\n        Fire: 0.25,\n        Water: 0.25,\n        Earth: 0.25,\n        Air: 0.25,\n      },\n      season: ['summer', 'fall'],\n    };\n\n    expect(validateIngredient(fullIngredient)).toBe(true);\n  });\n});\n"],"version":3}