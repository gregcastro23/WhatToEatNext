{"file":"/Users/GregCastro/Desktop/WhatToEatNext/backups/first-wave-2025-08-11T05-19-26-813Z/src/__tests__/linting/AstrologicalRuleValidation.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/backups/first-wave-2025-08-11T05-19-26-813Z/src/__tests__/linting/AstrologicalRuleValidation.test.ts"],"sourcesContent":["/**\n * Astrological Rule Validation Test Suite\n *\n * Tests the domain-specific ESLint rules for astrological calculation files\n * to ensure mathematical constants and planetary variables are preserved.\n *\n * Requirements: 4.1, 4.2\n */\n\nimport { execSync } from 'child_process';\nimport { writeFileSync } from 'fs';\nimport { join } from 'path';\n\ndescribe('Astrological Rule Validation', () => {\n  const projectRoot = process.cwd();\n  const tempFiles: string[] = [];\n\n  afterEach(() => {\n    // Clean up temporary test files\n    tempFiles.forEach(file => {\n      try {\n        execSync(`rm -f \"${file}\"`);\n      } catch {}\n    });\n    tempFiles.length = 0;\n  });\n\n  describe('Mathematical Constants Preservation', () => {\n    test('should preserve DEGREES_PER_SIGN constant', async () => {\n      const testContent = `\n        const DEGREES_PER_SIGN = 30;\n\n        function calculatePosition(longitude: number) {\n          return Math.floor(longitude / DEGREES_PER_SIGN);\n        }\n      `;\n\n      const testFile = join(projectRoot, 'src/calculations/temp-degrees-test.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs`, {\n          stdio: 'pipe',\n          cwd: projectRoot,\n        });\n\n        // Should not throw error for valid constant usage\n        expect(true).toBe(true);\n      } catch (error) {\n        const output = (error as any).stderr?.toString() || '';\n        if (output.includes('preserve-planetary-constants')) {\n          fail('Valid constant usage should not be flagged');\n        }\n      }\n    });\n\n    test('should preserve RELIABLE_POSITIONS constant', async () => {\n      const testContent = `\n        const RELIABLE_POSITIONS = {\n  sun: { sign: 'aries', degree: 8.5, exactLongitude: 8.5, isRetrograde: false },\n          moon: { sign: 'aries', degree: 1.57, exactLongitude: 1.57, isRetrograde: false }\n        };\n\n        function getFallbackPosition(planet: string) {\n          return RELIABLE_POSITIONS[planet];\n        }\n      `;\n\n      const testFile = join(projectRoot, 'src/calculations/temp-reliable-test.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs`, {\n          stdio: 'pipe',\n          cwd: projectRoot,\n        });\n\n        expect(true).toBe(true);\n      } catch (error) {\n        const output = (error as any).stderr?.toString() || '';\n        if (output.includes('preserve-planetary-constants')) {\n          fail('Valid RELIABLE_POSITIONS usage should not be flagged');\n        }\n      }\n    });\n\n    test('should flag modification of protected constants', async () => {\n      const testContent = `\n        const DEGREES_PER_SIGN = 30;\n\n        // This should be flagged\n        DEGREES_PER_SIGN = 25;\n      `;\n\n      const testFile = join(projectRoot, 'src/calculations/temp-modify-test.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs`, {\n          stdio: 'pipe',\n          cwd: projectRoot,\n        });\n\n        // Should have caught the constant modification\n        console.warn('Constant modification not caught by validation rule');\n      } catch (error) {\n        const output = (error as any).stderr?.toString() || '';\n        // We expect this to fail with our custom rule or TypeScript error\n        expect(output.length > 0).toBe(true);\n      }\n    });\n\n    test('should preserve MARCH2025_POSITIONS fallback data', async () => {\n      const testContent = `\n        const MARCH2025_POSITIONS = {\n  sun: { sign: 'aries', degree: 8.5, exactLongitude: 8.5, isRetrograde: false },\n          mercury: { sign: 'aries', degree: 0.85, exactLongitude: 0.85, isRetrograde: true }\n        };\n\n        function getMarch2025Fallback() {\n          return MARCH2025_POSITIONS;\n        }\n      `;\n\n      const testFile = join(projectRoot, 'src/calculations/temp-march2025-test.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs`, {\n          stdio: 'pipe',\n          cwd: projectRoot,\n        });\n\n        expect(true).toBe(true);\n      } catch (error) {\n        const output = (error as any).stderr?.toString() || '';\n        if (output.includes('preserve-planetary-constants')) {\n          fail('Valid MARCH2025_POSITIONS usage should not be flagged');\n        }\n      }\n    });\n  });\n\n  describe('Planetary Variable Patterns', () => {\n    test('should ignore unused planetary variables', async () => {\n      const testContent = `\n        const planet = 'mars';\n        const position = { sign: 'cancer', degree: 22.63 };\n        const longitude = 112.63;\n        const UNUSED_retrograde = false;\n        const degree = 15.5;\n        const sign = 'leo';\n      `;\n\n      const testFile = join(projectRoot, 'src/calculations/temp-planetary-vars.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n          cwd: projectRoot,\n        });\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const unusedVarErrors = result[0].messages.filter(\n            (msg: any) =>\n              msg.ruleId === '@typescript-eslint/no-unused-vars' &&\n              (msg.message.includes('planet') ||\n                msg.message.includes('position') ||\n                msg.message.includes('longitude') ||\n                msg.message.includes('degree') ||\n                msg.message.includes('sign')),\n          );\n\n          expect(unusedVarErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const unusedVarErrors = result[0].messages.filter(\n              (msg: any) =>\n                msg.ruleId === '@typescript-eslint/no-unused-vars' &&\n                (msg.message.includes('planet') ||\n                  msg.message.includes('position') ||\n                  msg.message.includes('longitude') ||\n                  msg.message.includes('degree') ||\n                  msg.message.includes('sign')),\n            );\n\n            expect(unusedVarErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n\n    test('should ignore UNUSED_ prefixed planetary variables', async () => {\n      const testContent = `\n        const UNUSED_planet = 'jupiter';\n        const UNUSED_position = { sign: 'gemini', degree: 15.52 };\n        const UNUSED_longitude = 75.52;\n        const UNUSED_retrograde = false;\n      `;\n\n      const testFile = join(projectRoot, 'src/calculations/temp-unused-planetary.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n          cwd: projectRoot,\n        });\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const unusedVarErrors = result[0].messages.filter(\n            (msg: any) => msg.ruleId === '@typescript-eslint/no-unused-vars',\n          );\n\n          expect(unusedVarErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const unusedVarErrors = result[0].messages.filter(\n              (msg: any) => msg.ruleId === '@typescript-eslint/no-unused-vars',\n            );\n\n            expect(unusedVarErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n\n    test('should preserve astrological naming conventions', async () => {\n      const testContent = `\n        const exactLongitude = 112.63;\n        const isRetrograde = false;\n        const UNUSED_TransitDates = { Start: '2024-07-01', End: '2024-09-15' };\n        const UNUSED_PlanetSpecific = { mars: 'cancer' };\n        const UNUSED_ZodiacTransit = { sign: 'cancer', degree: 22.63 };\n        const UNUSED_RetrogradePhases = { current: false };\n      `;\n\n      const testFile = join(projectRoot, 'src/calculations/temp-naming-test.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n          cwd: projectRoot,\n        });\n\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const camelCaseErrors = result[0].messages.filter(\n            (msg: any) => msg.ruleId === 'camelcase' && msg.severity === 2, // error level\n          );\n\n          // These naming conventions should be allowed\n          expect(camelCaseErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const camelCaseErrors = result[0].messages.filter(\n              (msg: any) => msg.ruleId === 'camelcase' && msg.severity === 2,\n            );\n\n            expect(camelCaseErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n  });\n\n  describe('Elemental Properties Validation', () => {\n    test('should validate complete elemental properties', async () => {\n      const testContent = `\n        const elementalProps = {\n          Fire: 0.8,\n          Water: 0.2,\n          Earth: 0.1,\n          Air: 0.3\n        };\n\n        function getElementalBalance() {\n          return elementalProps;\n        }\n      `;\n\n      const testFile = join(projectRoot, 'src/calculations/temp-elemental-complete.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs`, {\n          stdio: 'pipe',\n          cwd: projectRoot,\n        });\n\n        // Complete elemental properties should not cause errors\n        expect(true).toBe(true);\n      } catch (error) {\n        const output = (error as any).stderr?.toString() || '';\n        if (output.includes('validate-elemental-properties')) {\n          fail('Complete elemental properties should not be flagged');\n        }\n      }\n    });\n\n    test('should detect incomplete elemental properties', async () => {\n      const testContent = `\n        const incompleteElemental = {\n          Fire: 0.8,\n          Water: 0.2\n          // Missing Earth and Air\n        };\n      `;\n\n      const testFile = join(projectRoot, 'src/calculations/temp-elemental-incomplete.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs`, {\n          stdio: 'pipe',\n          cwd: projectRoot,\n        });\n\n        // Should have caught incomplete elemental properties\n        console.warn('Incomplete elemental properties not caught');\n      } catch (error) {\n        const output = (error as any).stderr?.toString() || '';\n        // We expect this to fail with validation or syntax error\n        expect(output.length > 0).toBe(true);\n      }\n    });\n\n    test('should validate elemental property values', async () => {\n      const testContent = `\n        const validElemental = {\n          Fire: 0.8,\n          Water: 0.2,\n          Earth: 0.0,\n          Air: 1.0\n        };\n\n        const invalidElemental = {\n          Fire: 1.5, // Invalid: > 1\n          Water: -0.1, // Invalid: < 0\n          Earth: 0.5,\n          Air: 0.3\n        };\n      `;\n\n      const testFile = join(projectRoot, 'src/calculations/temp-elemental-values.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs`, {\n          stdio: 'pipe',\n          cwd: projectRoot,\n        });\n\n        // Should have caught invalid elemental values\n        console.warn('Invalid elemental values not caught');\n      } catch (error) {\n        const output = (error as any).stderr?.toString() || '';\n        // We expect this to fail with validation error\n        expect(output.length > 0).toBe(true);\n      }\n    });\n\n    test('should detect invalid element names', async () => {\n      const testContent = `\n        const invalidElements = {\n          Fire: 0.8,\n          Water: 0.2,\n          Earth: 0.1,\n          Wind: 0.3 // Invalid: should be Air\n        };\n      `;\n\n      const testFile = join(projectRoot, 'src/calculations/temp-invalid-elements.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs`, {\n          stdio: 'pipe',\n          cwd: projectRoot,\n        });\n\n        // Should have caught invalid element name\n        console.warn('Invalid element name not caught');\n      } catch (error) {\n        const output = (error as any).stderr?.toString() || '';\n        // We expect this to fail with validation error\n        expect(output.length > 0).toBe(true);\n      }\n    });\n  });\n\n  describe('Planetary Position Structure Validation', () => {\n    test('should validate complete planetary position structure', async () => {\n      const testContent = `\n        const planetPosition = {\n  sign: 'cancer',\n          degree: 22.63,\n          exactLongitude: 112.63,\n          isRetrograde: false\n        };\n\n        function getPosition() {\n          return planetPosition;\n        }\n      `;\n\n      const testFile = join(projectRoot, 'src/calculations/temp-position-complete.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs`, {\n          stdio: 'pipe',\n          cwd: projectRoot,\n        });\n\n        // Complete planetary position should not cause errors\n        expect(true).toBe(true);\n      } catch (error) {\n        const output = (error as any).stderr?.toString() || '';\n        if (output.includes('validate-planetary-position-structure')) {\n          fail('Complete planetary position should not be flagged');\n        }\n      }\n    });\n\n    test('should detect incomplete planetary position structure', async () => {\n      const testContent = `\n        const incompletePosition = {\n  sign: 'cancer',\n          degree: 22.63\n          // Missing exactLongitude and isRetrograde\n        };\n      `;\n\n      const testFile = join(projectRoot, 'src/calculations/temp-position-incomplete.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs`, {\n          stdio: 'pipe',\n          cwd: projectRoot,\n        });\n\n        // Should have caught incomplete position structure\n        console.warn('Incomplete planetary position not caught');\n      } catch (error) {\n        const output = (error as any).stderr?.toString() || '';\n        // We expect this to fail with validation error\n        expect(output.length > 0).toBe(true);\n      }\n    });\n  });\n\n  describe('Fallback Value Preservation', () => {\n    test('should preserve valid fallback values', async () => {\n      const testContent = `\n        const FALLBACK_POSITIONS = {\n  sun: { sign: 'aries', degree: 8.5, exactLongitude: 8.5, isRetrograde: false }\n        };\n\n        const RELIABLE_DATA = {\n  mars: { sign: 'cancer', degree: 22.63, exactLongitude: 112.63, isRetrograde: false }\n        };\n\n        const MARCH2025_BACKUP = {\n  moon: { sign: 'aries', degree: 1.57, exactLongitude: 1.57, isRetrograde: false }\n        };\n      `;\n\n      const testFile = join(projectRoot, 'src/calculations/temp-fallback-valid.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs`, {\n          stdio: 'pipe',\n          cwd: projectRoot,\n        });\n\n        // Valid fallback values should not cause errors\n        expect(true).toBe(true);\n      } catch (error) {\n        const output = (error as any).stderr?.toString() || '';\n        if (output.includes('preserve-fallback-values')) {\n          fail('Valid fallback values should not be flagged');\n        }\n      }\n    });\n\n    test('should detect null fallback values', async () => {\n      const testContent = `\n        const FALLBACK_POSITIONS = null; // Should be flagged\n        const RELIABLE_DATA = undefined; // Should be flagged\n      `;\n\n      const testFile = join(projectRoot, 'src/calculations/temp-fallback-null.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs`, {\n          stdio: 'pipe',\n          cwd: projectRoot,\n        });\n\n        // Should have caught null fallback values\n        console.warn('Null fallback values not caught');\n      } catch (error) {\n        const output = (error as any).stderr?.toString() || '';\n        // We expect this to fail with validation error\n        expect(output.length > 0).toBe(true);\n      }\n    });\n  });\n\n  describe('Transit Date Validation Requirements', () => {\n    test('should suggest transit validation imports', async () => {\n      const testContent = `\n        function calculatePlanetaryInfluence(date: Date) {\n          // This file should import transit validation\n          const positions = getPlanetaryPositions();\n          return processPositions();\n        }\n      `;\n\n      const testFile = join(projectRoot, 'src/calculations/temp-transit-suggestion.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync('yarn eslint --format json --no-eslintrc --config eslint.config.cjs ' + testFile, {\n          encoding: 'utf8',\n        });\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const transitWarnings = result[0].messages.filter(\n            (msg: any) => msg.ruleId === 'astrological/require-transit-date-validation',\n          );\n\n          // Should suggest transit validation\n          expect(transitWarnings.length).toBeGreaterThan(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const transitWarnings = result[0].messages.filter(\n              (msg: any) => msg.ruleId === 'astrological/require-transit-date-validation',\n            );\n\n            // Should suggest transit validation\n            expect(transitWarnings.length).toBeGreaterThan(0);\n          }\n        }\n      }\n    });\n\n    test('should not warn when transit validation is present', async () => {\n      const testContent = `\n        import { validateTransitDate } from '@/utils/astrology/transitValidation';\n\n        function calculatePlanetaryInfluence(date: Date) {\n          const isValid = validateTransitDate('mars', date, 'cancer');\n          if (!isValid) return null;\n\n          const positions = getPlanetaryPositions();\n          return processPositions();\n        }\n      `;\n\n      const testFile = join(projectRoot, 'src/calculations/temp-transit-valid.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n          cwd: projectRoot,\n        });\n\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const transitWarnings = result[0].messages.filter(\n            (msg: any) => msg.ruleId === 'astrological/require-transit-date-validation',\n          );\n\n          // Should not warn when validation is present\n          expect(transitWarnings.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const transitWarnings = result[0].messages.filter(\n              (msg: any) => msg.ruleId === 'astrological/require-transit-date-validation',\n            );\n\n            expect(transitWarnings.length).toBe(0);\n          }\n        }\n      }\n    });\n  });\n\n  describe('Console Debugging Allowance', () => {\n    test('should allow console statements in astrological files', async () => {\n      const testContent = `\n        function calculatePlanetaryPosition(date: Date) {\n          console.info('Calculating planetary position for', date);\n          console.debug('Using reliable astronomy calculations');\n          console.warn('Fallback to cached positions if API fails');\n\n          const position = getPosition();\n          return position;\n        }\n      `;\n\n      const testFile = join(projectRoot, 'src/calculations/temp-console-allowed.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n          cwd: projectRoot,\n        });\n\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const consoleErrors = result[0].messages.filter(\n            (msg: any) => msg.ruleId === 'no-console' && msg.severity === 2, // error level\n          );\n\n          // Console statements should be allowed in astrological files\n          expect(consoleErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const consoleErrors = result[0].messages.filter(\n              (msg: any) => msg.ruleId === 'no-console' && msg.severity === 2,\n            );\n\n            expect(consoleErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n  });\n\n  describe('Complexity Allowances', () => {\n    test('should allow complex astronomical calculations', async () => {\n      const testContent = `\n        function complexAstronomicalCalculation(date: Date) {\n          // Complex calculation with multiple nested conditions\n          let result = 0;\n\n          for (let i = 0; i < 12; i++) { // 12 zodiac signs\n            for (let j = 0; j < 30; j++) { // 30 degrees per sign\n              if (i % 2 === 0) {\n                if (j < 10) {\n                  if (date.getMonth() > 6) {\n                    result += i * j * 0.1;\n                  } else {\n                    result += i + j * 0.05;\n                  }\n                } else if (j < 20) {\n                  result += Math.sin(i * j * Math.PI / 180);\n                } else {\n                  result += Math.cos(i * j * Math.PI / 180);\n                }\n              } else {\n                if (j < 15) {\n                  result += Math.tan(i * j * Math.PI / 180);\n                } else {\n                  result += Math.atan(i * j * Math.PI / 180);\n                }\n              }\n            }\n          }\n\n          return result;\n        }\n      `;\n\n      const testFile = join(projectRoot, 'src/calculations/temp-complex-calc.ts');\n      tempFiles.push(testFile);\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n          cwd: projectRoot,\n        });\n\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const complexityErrors = result[0].messages.filter(\n            (msg: any) => msg.ruleId === 'complexity' && msg.severity === 2, // error level\n          );\n\n          // Complex astronomical calculations should be allowed\n          expect(complexityErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const complexityErrors = result[0].messages.filter(\n              (msg: any) => msg.ruleId === 'complexity' && msg.severity === 2,\n            );\n\n            expect(complexityErrors.length).toBe(0);\n          }\n        }\n      }\n    });\n  });\n});\n"],"version":3}