{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/utils/TestResultValidator.ts","mappings":";AAAA;;;;;;GAMG;;;AA8BH,MAAa,mBAAmB;IACtB,MAAM,CAAC,QAAQ,CAAsB;IACrC,eAAe,GAAsC,IAAI,GAAG,EAAE,CAAC;IAC/D,iBAAiB,GAAsC,IAAI,GAAG,EAAE,CAAC;IAEzE,MAAM,CAAC,WAAW;QAChB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,IAAI,CAAC,QAAQ,GAAG,IAAI,mBAAmB,EAAE,CAAC;YAC1C,IAAI,CAAC,QAAQ,CAAC,sBAAsB,EAAE,CAAC;SACxC;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED;;OAEG;IACK,sBAAsB;QAC5B,oCAAoC;QACpC,IAAI,CAAC,kBAAkB,CAAC,aAAa,EAAE;YACrC;gBACE,IAAI,EAAE,gBAAgB;gBACtB,SAAS,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,OAAO,MAAM,CAAC,aAAa,KAAK,QAAQ,IAAI,MAAM,CAAC,aAAa,GAAG,CAAC;gBAC3F,YAAY,EAAE,0CAA0C;gBACxD,QAAQ,EAAE,OAAO;aAClB;YACD;gBACE,IAAI,EAAE,cAAc;gBACpB,SAAS,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,OAAO,MAAM,CAAC,WAAW,KAAK,QAAQ,IAAI,MAAM,CAAC,WAAW,IAAI,CAAC;gBACxF,YAAY,EAAE,4CAA4C;gBAC1D,QAAQ,EAAE,OAAO;aAClB;YACD;gBACE,IAAI,EAAE,2BAA2B;gBACjC,SAAS,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,aAAa,GAAG,KAAK;gBACnD,YAAY,EAAE,sDAAsD;gBACpE,QAAQ,EAAE,SAAS;aACpB;YACD;gBACE,IAAI,EAAE,mBAAmB;gBACzB,SAAS,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,WAAW,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI;gBAC9D,YAAY,EAAE,iDAAiD;gBAC/D,QAAQ,EAAE,SAAS;aACpB;SACF,CAAC,CAAC;QAEH,6CAA6C;QAC7C,IAAI,CAAC,kBAAkB,CAAC,UAAU,EAAE;YAClC;gBACE,IAAI,EAAE,eAAe;gBACrB,SAAS,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,YAAY,GAAG,IAAI;gBACjD,YAAY,EAAE,8DAA8D;gBAC5E,QAAQ,EAAE,OAAO;aAClB;YACD;gBACE,IAAI,EAAE,qBAAqB;gBAC3B,SAAS,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,QAAQ,IAAI,IAAI;gBAC9C,YAAY,EAAE,sDAAsD;gBACpE,QAAQ,EAAE,OAAO;aAClB;YACD;gBACE,IAAI,EAAE,kBAAkB;gBACxB,SAAS,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,kBAAkB,KAAK,IAAI;gBACzD,YAAY,EAAE,wCAAwC;gBACtD,QAAQ,EAAE,SAAS;aACpB;SACF,CAAC,CAAC;QAEH,8CAA8C;QAC9C,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE;YAC/B;gBACE,IAAI,EAAE,eAAe;gBACrB,SAAS,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO,KAAK,IAAI;gBAC9C,YAAY,EAAE,qCAAqC;gBACnD,QAAQ,EAAE,OAAO;aAClB;YACD;gBACE,IAAI,EAAE,aAAa;gBACnB,SAAS,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,OAAO,MAAM,CAAC,UAAU,KAAK,QAAQ,IAAI,MAAM,CAAC,UAAU,IAAI,CAAC;gBACtF,YAAY,EAAE,2CAA2C;gBACzD,QAAQ,EAAE,OAAO;aAClB;YACD;gBACE,IAAI,EAAE,YAAY;gBAClB,SAAS,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,SAAS,GAAG,MAAM;gBAChD,YAAY,EAAE,iDAAiD;gBAC/D,QAAQ,EAAE,SAAS;aACpB;SACF,CAAC,CAAC;QAEH,+BAA+B;QAC/B,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE;YAChC;gBACE,IAAI,EAAE,mBAAmB;gBACzB,SAAS,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,kBAAkB,KAAK,IAAI;gBACzD,YAAY,EAAE,4CAA4C;gBAC1D,QAAQ,EAAE,OAAO;aAClB;YACD;gBACE,IAAI,EAAE,aAAa;gBACnB,SAAS,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,UAAU,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI;gBAC7D,YAAY,EAAE,uCAAuC;gBACrD,QAAQ,EAAE,OAAO;aAClB;YACD;gBACE,IAAI,EAAE,kBAAkB;gBACxB,SAAS,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,cAAc,GAAG,GAAG;gBAClD,YAAY,EAAE,yDAAyD;gBACvE,QAAQ,EAAE,SAAS;aACpB;SACF,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,kBAAkB,CAAC,QAAgB,EAAE,KAA2B;QAC9D,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IAC5C,CAAC;IAED;;OAEG;IACH,mBAAmB,CAAC,QAAgB,EAAE,KAA2B;QAC/D,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IAC9C,CAAC;IAED;;OAEG;IACH,cAAc,CAAC,MAAW,EAAE,QAAgB;QAC1C,MAAM,gBAAgB,GAAqB;YACzC,OAAO,EAAE,IAAI;YACb,MAAM,EAAE,EAAE;YACV,QAAQ,EAAE,EAAE;YACZ,IAAI,EAAE,EAAE;YACR,OAAO,EAAE;gBACP,WAAW,EAAE,CAAC;gBACd,YAAY,EAAE,CAAC;gBACf,YAAY,EAAE,CAAC;gBACf,aAAa,EAAE,CAAC;aACjB;SACF,CAAC;QAEF,MAAM,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACvD,gBAAgB,CAAC,OAAO,CAAC,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC;QAEpD,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACxB,IAAI;gBACF,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;gBAEvC,IAAI,OAAO,EAAE;oBACX,gBAAgB,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;iBACzC;qBAAM;oBACL,QAAQ,IAAI,CAAC,QAAQ,EAAE;wBACrB,KAAK,OAAO;4BACV,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;4BACnE,gBAAgB,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;4BACxC,gBAAgB,CAAC,OAAO,GAAG,KAAK,CAAC;4BACjC,MAAM;wBACR,KAAK,SAAS;4BACZ,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;4BACrE,gBAAgB,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC;4BACzC,MAAM;wBACR,KAAK,MAAM;4BACT,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;4BACjE,MAAM;qBACT;iBACF;aACF;YAAC,OAAO,KAAK,EAAE;gBACd,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,wBAAwB,KAAK,EAAE,CAAC,CAAC;gBAC1E,gBAAgB,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;gBACxC,gBAAgB,CAAC,OAAO,GAAG,KAAK,CAAC;aAClC;SACF;QAED,OAAO,gBAAgB,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,mBAAmB,CAAC,QAAgB,EAAE,OAAc;QAClD,MAAM,gBAAgB,GAAqB;YACzC,OAAO,EAAE,IAAI;YACb,MAAM,EAAE,EAAE;YACV,QAAQ,EAAE,EAAE;YACZ,IAAI,EAAE,EAAE;YACR,OAAO,EAAE;gBACP,WAAW,EAAE,CAAC;gBACd,YAAY,EAAE,CAAC;gBACf,YAAY,EAAE,CAAC;gBACf,aAAa,EAAE,CAAC;aACjB;SACF,CAAC;QAEF,MAAM,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACnD,IAAI,CAAC,KAAK,EAAE;YACV,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,0CAA0C,QAAQ,EAAE,CAAC,CAAC;YACrF,OAAO,gBAAgB,CAAC;SACzB;QAED,gBAAgB,CAAC,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC;QAEzC,IAAI;YACF,4CAA4C;YAC5C,MAAM,SAAS,GAAG,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO,MAAM,KAAK,KAAK,CAAC,YAAY,CAAC,CAAC;YAChF,IAAI,CAAC,SAAS,EAAE;gBACd,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,oCAAoC,KAAK,CAAC,YAAY,EAAE,CAAC,CAAC;gBACvF,gBAAgB,CAAC,OAAO,GAAG,KAAK,CAAC;gBACjC,gBAAgB,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;gBACxC,OAAO,gBAAgB,CAAC;aACzB;YAED,qCAAqC;YACrC,IAAI,KAAK,CAAC,cAAc,EAAE;gBACxB,KAAK,MAAM,KAAK,IAAI,KAAK,CAAC,cAAc,EAAE;oBACxC,MAAM,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CACxC,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,KAAK,IAAI,IAAI,KAAK,IAAI,MAAM,CACjE,CAAC;oBACF,IAAI,CAAC,UAAU,EAAE;wBACf,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,2BAA2B,KAAK,EAAE,CAAC,CAAC;wBACjE,gBAAgB,CAAC,OAAO,GAAG,KAAK,CAAC;wBACjC,gBAAgB,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;qBACzC;iBACF;aACF;YAED,sCAAsC;YACtC,IAAI,KAAK,CAAC,gBAAgB,IAAI,KAAK,CAAC,YAAY,KAAK,QAAQ,EAAE;gBAC7D,MAAM,cAAc,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,QAAQ,CAAC,CAAC;gBAClE,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;oBAC7B,MAAM,IAAI,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,cAAc,CAAC,MAAM,CAAC;oBAC/E,MAAM,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;oBAC9D,MAAM,eAAe,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC;oBAEhD,IAAI,eAAe,GAAG,KAAK,CAAC,gBAAgB,EAAE;wBAC5C,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAC5B,YAAY,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,uBAAuB,KAAK,CAAC,gBAAgB,GAAG,CACvF,CAAC;wBACF,gBAAgB,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC;qBAC1C;yBAAM;wBACL,gBAAgB,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;qBACzC;iBACF;aACF;YAED,mCAAmC;YACnC,IAAI,KAAK,CAAC,eAAe,EAAE;gBACzB,MAAM,YAAY,GAAG,KAAK,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;gBACpD,IAAI,YAAY,EAAE;oBAChB,gBAAgB,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;iBACzC;qBAAM;oBACL,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;oBACzD,gBAAgB,CAAC,OAAO,GAAG,KAAK,CAAC;oBACjC,gBAAgB,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;iBACzC;aACF;YAED,+CAA+C;YAC/C,IAAI,gBAAgB,CAAC,OAAO,CAAC,YAAY,KAAK,CAAC,IAAI,gBAAgB,CAAC,OAAO,CAAC,YAAY,KAAK,CAAC,EAAE;gBAC9F,gBAAgB,CAAC,OAAO,CAAC,YAAY,GAAG,CAAC,CAAC;aAC3C;SAEF;QAAC,OAAO,KAAK,EAAE;YACd,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,iCAAiC,KAAK,EAAE,CAAC,CAAC;YACvE,gBAAgB,CAAC,OAAO,GAAG,KAAK,CAAC;YACjC,gBAAgB,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;SACzC;QAED,OAAO,gBAAgB,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,iBAAiB,CACf,YAA8B,EAC9B,eAAoC;QAEpC,MAAM,iBAAiB,GAAG,IAAI,GAAG,EAA4B,CAAC;QAE9D,KAAK,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,IAAI,YAAY,EAAE;YAC7C,MAAM,QAAQ,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,SAAS,CAAC;YAC5D,MAAM,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YACzD,iBAAiB,CAAC,GAAG,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;SAC7C;QAED,OAAO,iBAAiB,CAAC;IAC3B,CAAC;IAED;;OAEG;IACH,qBAAqB,CAAC,iBAAgD;QAepE,MAAM,OAAO,GAAG;YACd,YAAY,EAAE,IAAI;YAClB,UAAU,EAAE,iBAAiB,CAAC,IAAI;YAClC,UAAU,EAAE,CAAC;YACb,YAAY,EAAE,CAAC;YACf,WAAW,EAAE,CAAC;YACd,aAAa,EAAE,CAAC;YAChB,OAAO,EAAE,EAMP;SACH,CAAC;QAEF,KAAK,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,IAAI,iBAAiB,EAAE;YAClD,IAAI,MAAM,CAAC,OAAO,EAAE;gBAClB,OAAO,CAAC,UAAU,EAAE,CAAC;aACtB;iBAAM;gBACL,OAAO,CAAC,YAAY,EAAE,CAAC;gBACvB,OAAO,CAAC,YAAY,GAAG,KAAK,CAAC;aAC9B;YAED,OAAO,CAAC,WAAW,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;YAC5C,OAAO,CAAC,aAAa,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;YAEhD,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;gBACnB,QAAQ;gBACR,OAAO,EAAE,MAAM,CAAC,OAAO;gBACvB,UAAU,EAAE,MAAM,CAAC,MAAM,CAAC,MAAM;gBAChC,YAAY,EAAE,MAAM,CAAC,QAAQ,CAAC,MAAM;gBACpC,MAAM,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC,QAAQ,CAAC;aAC/C,CAAC,CAAC;SACJ;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;OAEG;IACK,iBAAiB,CAAC,OAAiB,EAAE,IAAY;QACvD,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;QAC7D,OAAO,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;IAClF,CAAC;IAED;;OAEG;IACH,KAAK;QACH,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;QAC7B,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,CAAC;IACjC,CAAC;IAED;;OAEG;IACH,kBAAkB,CAAC,QAAgB;QACjC,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;IAClD,CAAC;IAED;;OAEG;IACH,mBAAmB,CAAC,QAAgB;QAClC,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC9C,CAAC;CACF;AAxXD,kDAwXC;AAED;;GAEG;AACH,SAAgB,kBAAkB,CAAC,MAAW,EAAE,QAAgB;IAC9D,MAAM,SAAS,GAAG,mBAAmB,CAAC,WAAW,EAAE,CAAC;IACpD,OAAO,SAAS,CAAC,cAAc,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AACpD,CAAC;AAHD,gDAGC;AAED;;GAEG;AACH,SAAgB,uBAAuB,CAAC,QAAgB,EAAE,OAAc;IACtE,MAAM,SAAS,GAAG,mBAAmB,CAAC,WAAW,EAAE,CAAC;IACpD,OAAO,SAAS,CAAC,mBAAmB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;AAC1D,CAAC;AAHD,0DAGC;AAED;;GAEG;AACH,SAAgB,oBAAoB,CAClC,IAAY,EACZ,SAAmC,EACnC,YAAoB,EACpB,WAAyC,OAAO;IAEhD,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,YAAY,EAAE,QAAQ,EAAE,CAAC;AACrD,CAAC;AAPD,oDAOC;AAED;;GAEG;AACH,SAAgB,sBAAsB,CACpC,QAAgB,EAChB,YAAoB,EACpB,UAII,EAAE;IAEN,OAAO;QACL,QAAQ;QACR,YAAY;QACZ,GAAG,OAAO;KACX,CAAC;AACJ,CAAC;AAdD,wDAcC","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/utils/TestResultValidator.ts"],"sourcesContent":["/**\n * Test Result Validation and Consistency Checking\n *\n * Provides comprehensive validation of test results to ensure\n * consistency, reliability, and proper error handling across\n * the test suite.\n */\n\nexport interface TestValidationRule {\n  name: string;\n  validator: (result: any) => boolean;\n  errorMessage: string;\n  severity: 'error' | 'warning' | 'info';\n}\n\nexport interface TestConsistencyCheck {\n  testName: string;\n  expectedType: string;\n  tolerancePercent?: number;\n  requiredFields?: string[];\n  customValidator?: (results: any[]) => boolean;\n}\n\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n  info: string[];\n  summary: {\n    totalChecks: number;\n    passedChecks: number;\n    failedChecks: number;\n    warningChecks: number;\n  };\n}\n\nexport class TestResultValidator {\n  private static instance: TestResultValidator;\n  private validationRules: Map<string, TestValidationRule[]> = new Map();\n  private consistencyChecks: Map<string, TestConsistencyCheck> = new Map();\n\n  static getInstance(): TestResultValidator {\n    if (!this.instance) {\n      this.instance = new TestResultValidator();\n      this.instance.initializeDefaultRules();\n    }\n    return this.instance;\n  }\n\n  /**\n   * Initialize default validation rules\n   */\n  private initializeDefaultRules(): void {\n    // Performance test validation rules\n    this.addValidationRules('performance', [\n      {\n        name: 'execution_time',\n        validator: (result) => typeof result.executionTime === 'number' && result.executionTime > 0,\n        errorMessage: 'Execution time must be a positive number',\n        severity: 'error'\n      },\n      {\n        name: 'memory_usage',\n        validator: (result) => typeof result.memoryUsage === 'number' && result.memoryUsage >= 0,\n        errorMessage: 'Memory usage must be a non-negative number',\n        severity: 'error'\n      },\n      {\n        name: 'reasonable_execution_time',\n        validator: (result) => result.executionTime < 60000, // 1 minute\n        errorMessage: 'Execution time exceeds reasonable limit (60 seconds)',\n        severity: 'warning'\n      },\n      {\n        name: 'memory_efficiency',\n        validator: (result) => result.memoryUsage < 1024 * 1024 * 1024, // 1GB\n        errorMessage: 'Memory usage exceeds efficiency threshold (1GB)',\n        severity: 'warning'\n      }\n    ]);\n\n    // Real-time monitoring test validation rules\n    this.addValidationRules('realtime', [\n      {\n        name: 'response_time',\n        validator: (result) => result.responseTime < 5000, // 5 seconds\n        errorMessage: 'Real-time response time exceeds acceptable limit (5 seconds)',\n        severity: 'error'\n      },\n      {\n        name: 'monitoring_accuracy',\n        validator: (result) => result.accuracy >= 0.95, // 95% accuracy\n        errorMessage: 'Monitoring accuracy below acceptable threshold (95%)',\n        severity: 'error'\n      },\n      {\n        name: 'resource_cleanup',\n        validator: (result) => result.resourcesCleanedUp === true,\n        errorMessage: 'Resources were not properly cleaned up',\n        severity: 'warning'\n      }\n    ]);\n\n    // Build and compilation test validation rules\n    this.addValidationRules('build', [\n      {\n        name: 'build_success',\n        validator: (result) => result.success === true,\n        errorMessage: 'Build did not complete successfully',\n        severity: 'error'\n      },\n      {\n        name: 'error_count',\n        validator: (result) => typeof result.errorCount === 'number' && result.errorCount >= 0,\n        errorMessage: 'Error count must be a non-negative number',\n        severity: 'error'\n      },\n      {\n        name: 'build_time',\n        validator: (result) => result.buildTime < 120000, // 2 minutes\n        errorMessage: 'Build time exceeds acceptable limit (2 minutes)',\n        severity: 'warning'\n      }\n    ]);\n\n    // Memory test validation rules\n    this.addValidationRules('memory', [\n      {\n        name: 'memory_leak_check',\n        validator: (result) => result.memoryLeakDetected !== true,\n        errorMessage: 'Memory leak detected during test execution',\n        severity: 'error'\n      },\n      {\n        name: 'peak_memory',\n        validator: (result) => result.peakMemory < 2048 * 1024 * 1024, // 2GB\n        errorMessage: 'Peak memory usage exceeds limit (2GB)',\n        severity: 'error'\n      },\n      {\n        name: 'memory_stability',\n        validator: (result) => result.memoryVariance < 0.3, // 30% variance\n        errorMessage: 'Memory usage variance exceeds stability threshold (30%)',\n        severity: 'warning'\n      }\n    ]);\n  }\n\n  /**\n   * Add validation rules for a specific test category\n   */\n  addValidationRules(category: string, rules: TestValidationRule[]): void {\n    this.validationRules.set(category, rules);\n  }\n\n  /**\n   * Add consistency check for a test\n   */\n  addConsistencyCheck(testName: string, check: TestConsistencyCheck): void {\n    this.consistencyChecks.set(testName, check);\n  }\n\n  /**\n   * Validate a single test result\n   */\n  validateResult(result: any, category: string): ValidationResult {\n    const validationResult: ValidationResult = {\n      isValid: true,\n      errors: [],\n      warnings: [],\n      info: [],\n      summary: {\n        totalChecks: 0,\n        passedChecks: 0,\n        failedChecks: 0,\n        warningChecks: 0\n      }\n    };\n\n    const rules = this.validationRules.get(category) || [];\n    validationResult.summary.totalChecks = rules.length;\n\n    for (const rule of rules) {\n      try {\n        const isValid = rule.validator(result);\n\n        if (isValid) {\n          validationResult.summary.passedChecks++;\n        } else {\n          switch (rule.severity) {\n            case 'error':\n              validationResult.errors.push(`${rule.name}: ${rule.errorMessage}`);\n              validationResult.summary.failedChecks++;\n              validationResult.isValid = false;\n              break;\n            case 'warning':\n              validationResult.warnings.push(`${rule.name}: ${rule.errorMessage}`);\n              validationResult.summary.warningChecks++;\n              break;\n            case 'info':\n              validationResult.info.push(`${rule.name}: ${rule.errorMessage}`);\n              break;\n          }\n        }\n      } catch (error) {\n        validationResult.errors.push(`${rule.name}: Validation error - ${error}`);\n        validationResult.summary.failedChecks++;\n        validationResult.isValid = false;\n      }\n    }\n\n    return validationResult;\n  }\n\n  /**\n   * Validate multiple test results for consistency\n   */\n  validateConsistency(testName: string, results: any[]): ValidationResult {\n    const validationResult: ValidationResult = {\n      isValid: true,\n      errors: [],\n      warnings: [],\n      info: [],\n      summary: {\n        totalChecks: 0,\n        passedChecks: 0,\n        failedChecks: 0,\n        warningChecks: 0\n      }\n    };\n\n    const check = this.consistencyChecks.get(testName);\n    if (!check) {\n      validationResult.warnings.push(`No consistency check defined for test: ${testName}`);\n      return validationResult;\n    }\n\n    validationResult.summary.totalChecks = 1;\n\n    try {\n      // Check if all results are of expected type\n      const typeCheck = results.every(result => typeof result === check.expectedType);\n      if (!typeCheck) {\n        validationResult.errors.push(`Results type mismatch. Expected: ${check.expectedType}`);\n        validationResult.isValid = false;\n        validationResult.summary.failedChecks++;\n        return validationResult;\n      }\n\n      // Check required fields if specified\n      if (check.requiredFields) {\n        for (const field of check.requiredFields) {\n          const fieldCheck = results.every(result =>\n            typeof result === 'object' && result !== null && field in result\n          );\n          if (!fieldCheck) {\n            validationResult.errors.push(`Required field missing: ${field}`);\n            validationResult.isValid = false;\n            validationResult.summary.failedChecks++;\n          }\n        }\n      }\n\n      // Check tolerance for numeric results\n      if (check.tolerancePercent && check.expectedType === 'number') {\n        const numericResults = results.filter(r => typeof r === 'number');\n        if (numericResults.length > 1) {\n          const mean = numericResults.reduce((a, b) => a + b, 0) / numericResults.length;\n          const variance = this.calculateVariance(numericResults, mean);\n          const variancePercent = (variance / mean) * 100;\n\n          if (variancePercent > check.tolerancePercent) {\n            validationResult.warnings.push(\n              `Variance ${variancePercent.toFixed(2)}% exceeds tolerance ${check.tolerancePercent}%`\n            );\n            validationResult.summary.warningChecks++;\n          } else {\n            validationResult.summary.passedChecks++;\n          }\n        }\n      }\n\n      // Run custom validator if provided\n      if (check.customValidator) {\n        const customResult = check.customValidator(results);\n        if (customResult) {\n          validationResult.summary.passedChecks++;\n        } else {\n          validationResult.errors.push('Custom validation failed');\n          validationResult.isValid = false;\n          validationResult.summary.failedChecks++;\n        }\n      }\n\n      // If no specific checks failed, mark as passed\n      if (validationResult.summary.failedChecks === 0 && validationResult.summary.passedChecks === 0) {\n        validationResult.summary.passedChecks = 1;\n      }\n\n    } catch (error) {\n      validationResult.errors.push(`Consistency validation error: ${error}`);\n      validationResult.isValid = false;\n      validationResult.summary.failedChecks++;\n    }\n\n    return validationResult;\n  }\n\n  /**\n   * Validate test suite results\n   */\n  validateTestSuite(\n    suiteResults: Map<string, any>,\n    categoryMapping: Map<string, string>\n  ): Map<string, ValidationResult> {\n    const validationResults = new Map<string, ValidationResult>();\n\n    for (const [testName, result] of suiteResults) {\n      const category = categoryMapping.get(testName) || 'default';\n      const validation = this.validateResult(result, category);\n      validationResults.set(testName, validation);\n    }\n\n    return validationResults;\n  }\n\n  /**\n   * Generate validation summary report\n   */\n  generateSummaryReport(validationResults: Map<string, ValidationResult>): {\n    overallValid: boolean;\n    totalTests: number;\n    validTests: number;\n    invalidTests: number;\n    totalErrors: number;\n    totalWarnings: number;\n    details: Array<{\n      testName: string;\n      isValid: boolean;\n      errorCount: number;\n      warningCount: number;\n      issues: string[];\n    }>;\n  } {\n    const summary = {\n      overallValid: true,\n      totalTests: validationResults.size,\n      validTests: 0,\n      invalidTests: 0,\n      totalErrors: 0,\n      totalWarnings: 0,\n      details: [] as Array<{\n        testName: string;\n        isValid: boolean;\n        errorCount: number;\n        warningCount: number;\n        issues: string[];\n      }>\n    };\n\n    for (const [testName, result] of validationResults) {\n      if (result.isValid) {\n        summary.validTests++;\n      } else {\n        summary.invalidTests++;\n        summary.overallValid = false;\n      }\n\n      summary.totalErrors += result.errors.length;\n      summary.totalWarnings += result.warnings.length;\n\n      summary.details.push({\n        testName,\n        isValid: result.isValid,\n        errorCount: result.errors.length,\n        warningCount: result.warnings.length,\n        issues: [...result.errors, ...result.warnings]\n      });\n    }\n\n    return summary;\n  }\n\n  /**\n   * Calculate variance for numeric array\n   */\n  private calculateVariance(numbers: number[], mean: number): number {\n    const squaredDiffs = numbers.map(x => Math.pow(x - mean, 2));\n    return Math.sqrt(squaredDiffs.reduce((a, b) => a + b, 0) / squaredDiffs.length);\n  }\n\n  /**\n   * Clear all validation rules and checks\n   */\n  clear(): void {\n    this.validationRules.clear();\n    this.consistencyChecks.clear();\n  }\n\n  /**\n   * Get validation rules for a category\n   */\n  getValidationRules(category: string): TestValidationRule[] {\n    return this.validationRules.get(category) || [];\n  }\n\n  /**\n   * Get consistency check for a test\n   */\n  getConsistencyCheck(testName: string): TestConsistencyCheck | undefined {\n    return this.consistencyChecks.get(testName);\n  }\n}\n\n/**\n * Convenience function for validating a single test result\n */\nexport function validateTestResult(result: any, category: string): ValidationResult {\n  const validator = TestResultValidator.getInstance();\n  return validator.validateResult(result, category);\n}\n\n/**\n * Convenience function for validating test consistency\n */\nexport function validateTestConsistency(testName: string, results: any[]): ValidationResult {\n  const validator = TestResultValidator.getInstance();\n  return validator.validateConsistency(testName, results);\n}\n\n/**\n * Convenience function for creating custom validation rules\n */\nexport function createValidationRule(\n  name: string,\n  validator: (result: any) => boolean,\n  errorMessage: string,\n  severity: 'error' | 'warning' | 'info' = 'error'\n): TestValidationRule {\n  return { name, validator, errorMessage, severity };\n}\n\n/**\n * Convenience function for creating consistency checks\n */\nexport function createConsistencyCheck(\n  testName: string,\n  expectedType: string,\n  options: {\n    tolerancePercent?: number;\n    requiredFields?: string[];\n    customValidator?: (results: any[]) => boolean;\n  } = {}\n): TestConsistencyCheck {\n  return {\n    testName,\n    expectedType,\n    ...options\n  };\n}\n"],"version":3}