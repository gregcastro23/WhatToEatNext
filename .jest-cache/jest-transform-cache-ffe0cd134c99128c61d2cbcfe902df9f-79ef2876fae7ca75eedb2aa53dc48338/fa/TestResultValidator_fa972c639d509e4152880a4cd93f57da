331093396005b5f5e5d904ef947fc110
"use strict";
/**
 * Test Result Validation and Consistency Checking
 *
 * Provides comprehensive validation of test results to ensure
 * consistency, reliability, and proper error handling across
 * the test suite.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createConsistencyCheck = exports.createValidationRule = exports.validateTestConsistency = exports.validateTestResult = exports.TestResultValidator = void 0;
class TestResultValidator {
    static instance;
    validationRules = new Map();
    consistencyChecks = new Map();
    static getInstance() {
        if (!this.instance) {
            this.instance = new TestResultValidator();
            this.instance.initializeDefaultRules();
        }
        return this.instance;
    }
    /**
     * Initialize default validation rules
     */
    initializeDefaultRules() {
        // Performance test validation rules
        this.addValidationRules('performance', [
            {
                name: 'execution_time',
                validator: (result) => typeof result.executionTime === 'number' && result.executionTime > 0,
                errorMessage: 'Execution time must be a positive number',
                severity: 'error'
            },
            {
                name: 'memory_usage',
                validator: (result) => typeof result.memoryUsage === 'number' && result.memoryUsage >= 0,
                errorMessage: 'Memory usage must be a non-negative number',
                severity: 'error'
            },
            {
                name: 'reasonable_execution_time',
                validator: (result) => result.executionTime < 60000,
                errorMessage: 'Execution time exceeds reasonable limit (60 seconds)',
                severity: 'warning'
            },
            {
                name: 'memory_efficiency',
                validator: (result) => result.memoryUsage < 1024 * 1024 * 1024,
                errorMessage: 'Memory usage exceeds efficiency threshold (1GB)',
                severity: 'warning'
            }
        ]);
        // Real-time monitoring test validation rules
        this.addValidationRules('realtime', [
            {
                name: 'response_time',
                validator: (result) => result.responseTime < 5000,
                errorMessage: 'Real-time response time exceeds acceptable limit (5 seconds)',
                severity: 'error'
            },
            {
                name: 'monitoring_accuracy',
                validator: (result) => result.accuracy >= 0.95,
                errorMessage: 'Monitoring accuracy below acceptable threshold (95%)',
                severity: 'error'
            },
            {
                name: 'resource_cleanup',
                validator: (result) => result.resourcesCleanedUp === true,
                errorMessage: 'Resources were not properly cleaned up',
                severity: 'warning'
            }
        ]);
        // Build and compilation test validation rules
        this.addValidationRules('build', [
            {
                name: 'build_success',
                validator: (result) => result.success === true,
                errorMessage: 'Build did not complete successfully',
                severity: 'error'
            },
            {
                name: 'error_count',
                validator: (result) => typeof result.errorCount === 'number' && result.errorCount >= 0,
                errorMessage: 'Error count must be a non-negative number',
                severity: 'error'
            },
            {
                name: 'build_time',
                validator: (result) => result.buildTime < 120000,
                errorMessage: 'Build time exceeds acceptable limit (2 minutes)',
                severity: 'warning'
            }
        ]);
        // Memory test validation rules
        this.addValidationRules('memory', [
            {
                name: 'memory_leak_check',
                validator: (result) => result.memoryLeakDetected !== true,
                errorMessage: 'Memory leak detected during test execution',
                severity: 'error'
            },
            {
                name: 'peak_memory',
                validator: (result) => result.peakMemory < 2048 * 1024 * 1024,
                errorMessage: 'Peak memory usage exceeds limit (2GB)',
                severity: 'error'
            },
            {
                name: 'memory_stability',
                validator: (result) => result.memoryVariance < 0.3,
                errorMessage: 'Memory usage variance exceeds stability threshold (30%)',
                severity: 'warning'
            }
        ]);
    }
    /**
     * Add validation rules for a specific test category
     */
    addValidationRules(category, rules) {
        this.validationRules.set(category, rules);
    }
    /**
     * Add consistency check for a test
     */
    addConsistencyCheck(testName, check) {
        this.consistencyChecks.set(testName, check);
    }
    /**
     * Validate a single test result
     */
    validateResult(result, category) {
        const validationResult = {
            isValid: true,
            errors: [],
            warnings: [],
            info: [],
            summary: {
                totalChecks: 0,
                passedChecks: 0,
                failedChecks: 0,
                warningChecks: 0
            }
        };
        const rules = this.validationRules.get(category) || [];
        validationResult.summary.totalChecks = rules.length;
        for (const rule of rules) {
            try {
                const isValid = rule.validator(result);
                if (isValid) {
                    validationResult.summary.passedChecks++;
                }
                else {
                    switch (rule.severity) {
                        case 'error':
                            validationResult.errors.push(`${rule.name}: ${rule.errorMessage}`);
                            validationResult.summary.failedChecks++;
                            validationResult.isValid = false;
                            break;
                        case 'warning':
                            validationResult.warnings.push(`${rule.name}: ${rule.errorMessage}`);
                            validationResult.summary.warningChecks++;
                            break;
                        case 'info':
                            validationResult.info.push(`${rule.name}: ${rule.errorMessage}`);
                            break;
                    }
                }
            }
            catch (error) {
                validationResult.errors.push(`${rule.name}: Validation error - ${error}`);
                validationResult.summary.failedChecks++;
                validationResult.isValid = false;
            }
        }
        return validationResult;
    }
    /**
     * Validate multiple test results for consistency
     */
    validateConsistency(testName, results) {
        const validationResult = {
            isValid: true,
            errors: [],
            warnings: [],
            info: [],
            summary: {
                totalChecks: 0,
                passedChecks: 0,
                failedChecks: 0,
                warningChecks: 0
            }
        };
        const check = this.consistencyChecks.get(testName);
        if (!check) {
            validationResult.warnings.push(`No consistency check defined for test: ${testName}`);
            return validationResult;
        }
        validationResult.summary.totalChecks = 1;
        try {
            // Check if all results are of expected type
            const typeCheck = results.every(result => typeof result === check.expectedType);
            if (!typeCheck) {
                validationResult.errors.push(`Results type mismatch. Expected: ${check.expectedType}`);
                validationResult.isValid = false;
                validationResult.summary.failedChecks++;
                return validationResult;
            }
            // Check required fields if specified
            if (check.requiredFields) {
                for (const field of check.requiredFields) {
                    const fieldCheck = results.every(result => typeof result === 'object' && result !== null && field in result);
                    if (!fieldCheck) {
                        validationResult.errors.push(`Required field missing: ${field}`);
                        validationResult.isValid = false;
                        validationResult.summary.failedChecks++;
                    }
                }
            }
            // Check tolerance for numeric results
            if (check.tolerancePercent && check.expectedType === 'number') {
                const numericResults = results.filter(r => typeof r === 'number');
                if (numericResults.length > 1) {
                    const mean = numericResults.reduce((a, b) => a + b, 0) / numericResults.length;
                    const variance = this.calculateVariance(numericResults, mean);
                    const variancePercent = (variance / mean) * 100;
                    if (variancePercent > check.tolerancePercent) {
                        validationResult.warnings.push(`Variance ${variancePercent.toFixed(2)}% exceeds tolerance ${check.tolerancePercent}%`);
                        validationResult.summary.warningChecks++;
                    }
                    else {
                        validationResult.summary.passedChecks++;
                    }
                }
            }
            // Run custom validator if provided
            if (check.customValidator) {
                const customResult = check.customValidator(results);
                if (customResult) {
                    validationResult.summary.passedChecks++;
                }
                else {
                    validationResult.errors.push('Custom validation failed');
                    validationResult.isValid = false;
                    validationResult.summary.failedChecks++;
                }
            }
            // If no specific checks failed, mark as passed
            if (validationResult.summary.failedChecks === 0 && validationResult.summary.passedChecks === 0) {
                validationResult.summary.passedChecks = 1;
            }
        }
        catch (error) {
            validationResult.errors.push(`Consistency validation error: ${error}`);
            validationResult.isValid = false;
            validationResult.summary.failedChecks++;
        }
        return validationResult;
    }
    /**
     * Validate test suite results
     */
    validateTestSuite(suiteResults, categoryMapping) {
        const validationResults = new Map();
        for (const [testName, result] of suiteResults) {
            const category = categoryMapping.get(testName) || 'default';
            const validation = this.validateResult(result, category);
            validationResults.set(testName, validation);
        }
        return validationResults;
    }
    /**
     * Generate validation summary report
     */
    generateSummaryReport(validationResults) {
        const summary = {
            overallValid: true,
            totalTests: validationResults.size,
            validTests: 0,
            invalidTests: 0,
            totalErrors: 0,
            totalWarnings: 0,
            details: []
        };
        for (const [testName, result] of validationResults) {
            if (result.isValid) {
                summary.validTests++;
            }
            else {
                summary.invalidTests++;
                summary.overallValid = false;
            }
            summary.totalErrors += result.errors.length;
            summary.totalWarnings += result.warnings.length;
            summary.details.push({
                testName,
                isValid: result.isValid,
                errorCount: result.errors.length,
                warningCount: result.warnings.length,
                issues: [...result.errors, ...result.warnings]
            });
        }
        return summary;
    }
    /**
     * Calculate variance for numeric array
     */
    calculateVariance(numbers, mean) {
        const squaredDiffs = numbers.map(x => Math.pow(x - mean, 2));
        return Math.sqrt(squaredDiffs.reduce((a, b) => a + b, 0) / squaredDiffs.length);
    }
    /**
     * Clear all validation rules and checks
     */
    clear() {
        this.validationRules.clear();
        this.consistencyChecks.clear();
    }
    /**
     * Get validation rules for a category
     */
    getValidationRules(category) {
        return this.validationRules.get(category) || [];
    }
    /**
     * Get consistency check for a test
     */
    getConsistencyCheck(testName) {
        return this.consistencyChecks.get(testName);
    }
}
exports.TestResultValidator = TestResultValidator;
/**
 * Convenience function for validating a single test result
 */
function validateTestResult(result, category) {
    const validator = TestResultValidator.getInstance();
    return validator.validateResult(result, category);
}
exports.validateTestResult = validateTestResult;
/**
 * Convenience function for validating test consistency
 */
function validateTestConsistency(testName, results) {
    const validator = TestResultValidator.getInstance();
    return validator.validateConsistency(testName, results);
}
exports.validateTestConsistency = validateTestConsistency;
/**
 * Convenience function for creating custom validation rules
 */
function createValidationRule(name, validator, errorMessage, severity = 'error') {
    return { name, validator, errorMessage, severity };
}
exports.createValidationRule = createValidationRule;
/**
 * Convenience function for creating consistency checks
 */
function createConsistencyCheck(testName, expectedType, options = {}) {
    return {
        testName,
        expectedType,
        ...options
    };
}
exports.createConsistencyCheck = createConsistencyCheck;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,