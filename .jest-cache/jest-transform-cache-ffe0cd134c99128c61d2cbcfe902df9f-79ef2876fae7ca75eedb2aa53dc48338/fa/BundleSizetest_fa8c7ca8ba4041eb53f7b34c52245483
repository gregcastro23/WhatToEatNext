56c6e71bc128595b541a7f4181f3d95f
"use strict";
/**
 * Performance Tests for Bundle Size Regression Testing
 * Perfect Codebase Campaign - Bundle Size Performance Testing
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock dependencies
jest.mock('child_process');
jest.mock('fs');
const ProgressTracker_1 = require("../../ProgressTracker");
const CampaignController_1 = require("../../CampaignController");
const campaign_1 = require("../../../../types/campaign");
const child_process_1 = require("child_process");
const fs = __importStar(require("fs"));
const mockExecSync = child_process_1.execSync;
const mockFs = fs;
describe('Bundle Size Performance Tests', () => {
    let progressTracker;
    let campaignController;
    let mockConfig;
    beforeEach(() => {
        const safetySettings = {
            maxFilesPerBatch: 25,
            buildValidationFrequency: 5,
            testValidationFrequency: 10,
            corruptionDetectionEnabled: true,
            automaticRollbackEnabled: true,
            stashRetentionDays: 7
        };
        mockConfig = {
            phases: [{
                    id: 'bundle-test-phase',
                    name: 'Bundle Test Phase',
                    description: 'Phase for bundle size testing',
                    tools: [{
                            scriptPath: 'scripts/bundle/optimize-script.js',
                            parameters: { optimizeBundle: true },
                            batchSize: 50,
                            safetyLevel: campaign_1.SafetyLevel.MEDIUM
                        }],
                    successCriteria: { buildTime: 10 },
                    safetyCheckpoints: []
                }],
            safetySettings,
            progressTargets: { typeScriptErrors: 0, lintingWarnings: 0, buildTime: 10, enterpriseSystems: 200 },
            toolConfiguration: {
                enhancedErrorFixer: 'scripts/typescript-fixes/fix-typescript-errors-enhanced-v3.js',
                explicitAnyFixer: 'scripts/typescript-fixes/fix-explicit-any-systematic.js',
                unusedVariablesFixer: 'scripts/typescript-fixes/fix-unused-variables-enhanced.js',
                consoleStatementFixer: 'scripts/lint-fixes/fix-console-statements-only.js'
            }
        };
        progressTracker = new ProgressTracker_1.ProgressTracker();
        campaignController = new CampaignController_1.CampaignController(mockConfig);
        // Reset mocks
        jest.clearAllMocks();
        // Default mock implementations
        mockExecSync.mockReturnValue('');
        mockFs.existsSync.mockReturnValue(true);
    });
    describe('Bundle Size Validation', () => {
        it('should validate bundle size under 420kB target', async () => {
            // Mock optimal bundle size
            mockFs.existsSync.mockImplementation((path) => {
                return path === '.next' || path === 'dist';
            });
            mockExecSync.mockImplementation((command) => {
                const cmd = command.toString();
                if (cmd.includes('du -sk .next')) {
                    return '300'; // 300kB
                }
                if (cmd.includes('du -sk dist')) {
                    return '100'; // 100kB
                }
                return '';
            });
            const bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(400); // 300 + 100 = 400kB
            expect(bundleSize).toBeLessThan(420); // Under 420kB target
        });
        it('should detect bundle size regression', async () => {
            // Mock bundle size that exceeds target
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation((command) => {
                if (command.toString().includes('du -sk')) {
                    return '450'; // 450kB - exceeds 420kB target
                }
                return '';
            });
            const bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(450);
            expect(bundleSize).toBeGreaterThan(420); // Exceeds target
        });
        it('should handle missing build directories', async () => {
            mockFs.existsSync.mockReturnValue(false);
            const bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(0); // No build directories found
        });
        it('should track bundle size trends over campaign execution', async () => {
            const bundleSizes = [];
            let optimizationStep = 0;
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation((command) => {
                if (command.toString().includes('du -sk')) {
                    optimizationStep++;
                    // Simulate bundle size optimization over time
                    const baseSize = 500; // Start with large bundle
                    const optimization = Math.min(100, optimizationStep * 20); // Up to 100kB reduction
                    return Math.max(350, baseSize - optimization).toString();
                }
                return '';
            });
            // Collect bundle sizes over multiple measurements
            for (let i = 0; i < 6; i++) {
                const bundleSize = await progressTracker.getBundleSize();
                bundleSizes.push(bundleSize);
            }
            expect(bundleSizes.length).toBe(6);
            // Bundle size should decrease over time (optimization)
            const firstSize = bundleSizes[0];
            const lastSize = bundleSizes[bundleSizes.length - 1];
            expect(lastSize).toBeLessThan(firstSize);
            expect(lastSize).toBeLessThan(420); // Should reach target
        });
    });
    describe('Bundle Composition Analysis', () => {
        it('should analyze bundle composition across different build outputs', async () => {
            const buildOutputs = [
                { dir: '.next', expectedSize: 250 },
                { dir: 'dist', expectedSize: 120 },
                { dir: 'build', expectedSize: 50 }
            ];
            mockFs.existsSync.mockImplementation((path) => {
                return buildOutputs.some(output => output.dir === path);
            });
            mockExecSync.mockImplementation((command) => {
                const cmd = command.toString();
                for (const output of buildOutputs) {
                    if (cmd.includes(`du -sk ${output.dir}`)) {
                        return output.expectedSize.toString();
                    }
                }
                return '';
            });
            const bundleSize = await progressTracker.getBundleSize();
            const expectedTotal = buildOutputs.reduce((sum, output) => sum + output.expectedSize, 0);
            expect(bundleSize).toBe(expectedTotal); // 250 + 120 + 50 = 420kB
            expect(bundleSize).toBeLessThanOrEqual(420); // At target limit
        });
        it('should handle partial build outputs', async () => {
            // Only some build directories exist
            mockFs.existsSync.mockImplementation((path) => {
                return path === '.next'; // Only .next exists
            });
            mockExecSync.mockImplementation((command) => {
                if (command.toString().includes('du -sk .next')) {
                    return '380'; // 380kB
                }
                return '';
            });
            const bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(380);
            expect(bundleSize).toBeLessThan(420); // Under target
        });
        it('should detect bundle bloat in specific directories', async () => {
            const bloatedBuild = {
                '.next': 350,
                'dist': 200,
                'build': 50 // Normal size
            };
            mockFs.existsSync.mockImplementation((path) => {
                return Object.keys(bloatedBuild).includes(path);
            });
            mockExecSync.mockImplementation((command) => {
                const cmd = command.toString();
                for (const [dir, size] of Object.entries(bloatedBuild)) {
                    if (cmd.includes(`du -sk ${dir}`)) {
                        return size.toString();
                    }
                }
                return '';
            });
            const bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(600); // 350 + 200 + 50 = 600kB
            expect(bundleSize).toBeGreaterThan(420); // Exceeds target due to bloat
        });
    });
    describe('Bundle Optimization Performance', () => {
        it('should validate lazy loading impact on bundle size', async () => {
            let lazyLoadingEnabled = false;
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation((command) => {
                if (command.toString().includes('du -sk')) {
                    // Lazy loading should reduce main bundle size
                    return lazyLoadingEnabled ? '320' : '450';
                }
                return '';
            });
            // Before lazy loading
            let bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(450);
            expect(bundleSize).toBeGreaterThan(420); // Exceeds target
            // After enabling lazy loading
            lazyLoadingEnabled = true;
            bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(320);
            expect(bundleSize).toBeLessThan(420); // Under target
        });
        it('should validate tree shaking effectiveness', async () => {
            let treeShakingEnabled = false;
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation((command) => {
                if (command.toString().includes('du -sk')) {
                    // Tree shaking should remove unused code
                    return treeShakingEnabled ? '380' : '480';
                }
                return '';
            });
            // Before tree shaking
            let bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(480);
            expect(bundleSize).toBeGreaterThan(420); // Exceeds target
            // After enabling tree shaking
            treeShakingEnabled = true;
            bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(380);
            expect(bundleSize).toBeLessThan(420); // Under target
        });
        it('should validate code splitting impact', async () => {
            let codeSplittingEnabled = false;
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation((command) => {
                if (command.toString().includes('du -sk')) {
                    if (codeSplittingEnabled) {
                        // Code splitting creates multiple smaller bundles
                        // Main bundle should be smaller
                        return '280';
                    }
                    else {
                        // Single large bundle
                        return '440';
                    }
                }
                return '';
            });
            // Before code splitting
            let bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(440);
            expect(bundleSize).toBeGreaterThan(420); // Exceeds target
            // After enabling code splitting
            codeSplittingEnabled = true;
            bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(280);
            expect(bundleSize).toBeLessThan(420); // Well under target
        });
        it('should validate compression effectiveness', async () => {
            let compressionEnabled = false;
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation((command) => {
                if (command.toString().includes('du -sk')) {
                    // Compression should reduce bundle size significantly
                    return compressionEnabled ? '300' : '500';
                }
                return '';
            });
            // Before compression
            let bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(500);
            expect(bundleSize).toBeGreaterThan(420); // Exceeds target
            // After enabling compression
            compressionEnabled = true;
            bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(300);
            expect(bundleSize).toBeLessThan(420); // Well under target
        });
    });
    describe('Bundle Size Regression Testing', () => {
        it('should detect bundle size regression during campaign', async () => {
            const phase = mockConfig.phases[0];
            let executionCount = 0;
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation((command) => {
                if (command.toString().includes('du -sk')) {
                    executionCount++;
                    // Simulate bundle size regression over time
                    const baseSize = 350;
                    const regression = executionCount * 25; // 25kB increase per execution
                    return (baseSize + regression).toString();
                }
                return '';
            });
            const bundleSizes = [];
            // Execute phase multiple times to simulate regression
            for (let i = 0; i < 4; i++) {
                await campaignController.executePhase(phase);
                const bundleSize = await progressTracker.getBundleSize();
                bundleSizes.push(bundleSize);
            }
            expect(bundleSizes.length).toBe(4);
            // Should detect increasing bundle size (regression)
            const firstSize = bundleSizes[0];
            const lastSize = bundleSizes[bundleSizes.length - 1];
            expect(lastSize).toBeGreaterThan(firstSize);
            expect(lastSize).toBeGreaterThan(420); // Should exceed target
        });
        it('should validate bundle size improvements during optimization', async () => {
            const phase = mockConfig.phases[0];
            let optimizationStep = 0;
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation((command) => {
                if (command.toString().includes('du -sk')) {
                    optimizationStep++;
                    // Simulate bundle size optimization
                    const baseSize = 500;
                    const optimization = optimizationStep * 30; // 30kB reduction per step
                    return Math.max(320, baseSize - optimization).toString();
                }
                return '';
            });
            const bundleSizes = [];
            // Execute optimization phases
            for (let i = 0; i < 5; i++) {
                await campaignController.executePhase(phase);
                const bundleSize = await progressTracker.getBundleSize();
                bundleSizes.push(bundleSize);
            }
            expect(bundleSizes.length).toBe(5);
            // Should show decreasing bundle size (optimization)
            const firstSize = bundleSizes[0];
            const lastSize = bundleSizes[bundleSizes.length - 1];
            expect(lastSize).toBeLessThan(firstSize);
            expect(lastSize).toBeLessThan(420); // Should be under target
        });
        it('should track bundle size across different optimization strategies', async () => {
            const optimizationStrategies = [
                { name: 'baseline', expectedSize: 480 },
                { name: 'minification', expectedSize: 420 },
                { name: 'tree-shaking', expectedSize: 380 },
                { name: 'code-splitting', expectedSize: 340 },
                { name: 'compression', expectedSize: 300 }
            ];
            const results = [];
            for (const strategy of optimizationStrategies) {
                mockFs.existsSync.mockReturnValue(true);
                mockExecSync.mockImplementation((command) => {
                    if (command.toString().includes('du -sk')) {
                        return strategy.expectedSize.toString();
                    }
                    return '';
                });
                const bundleSize = await progressTracker.getBundleSize();
                results.push({
                    strategy: strategy.name,
                    size: bundleSize,
                    underTarget: bundleSize < 420
                });
            }
            expect(results.length).toBe(5);
            // Baseline should exceed target
            expect(results[0].underTarget).toBe(false);
            expect(results[0].size).toBe(480);
            // Progressive optimization should reduce bundle size
            for (let i = 1; i < results.length; i++) {
                expect(results[i].size).toBeLessThan(results[i - 1].size);
            }
            // Final optimizations should be under target
            expect(results[results.length - 1].underTarget).toBe(true);
            expect(results[results.length - 1].size).toBe(300);
        });
    });
    describe('Bundle Size Performance Benchmarks', () => {
        it('should benchmark bundle analysis performance', async () => {
            const analysisTimes = [];
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation((command) => {
                if (command.toString().includes('du -sk')) {
                    const startTime = Date.now();
                    // Simulate bundle analysis time
                    const delay = 20 + Math.random() * 30; // 20-50ms
                    const endTime = startTime + delay;
                    while (Date.now() < endTime) {
                        // Busy wait
                    }
                    analysisTimes.push(Date.now() - startTime);
                    return '400';
                }
                return '';
            });
            // Perform multiple bundle size analyses
            for (let i = 0; i < 10; i++) {
                await progressTracker.getBundleSize();
            }
            expect(analysisTimes.length).toBe(10);
            expect(analysisTimes.every(time => time > 0)).toBe(true);
            // Average analysis time should be reasonable
            const averageTime = analysisTimes.reduce((sum, time) => sum + time, 0) / analysisTimes.length;
            expect(averageTime).toBeLessThan(100); // Should be under 100ms
        });
        it('should handle large bundle analysis efficiently', async () => {
            // Mock very large bundle
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation((command) => {
                if (command.toString().includes('du -sk')) {
                    // Simulate longer analysis time for large bundle
                    const delay = 50; // 50ms for large bundle
                    const endTime = Date.now() + delay;
                    while (Date.now() < endTime) {
                        // Busy wait
                    }
                    return '2000'; // 2MB bundle - very large
                }
                return '';
            });
            const startTime = Date.now();
            const bundleSize = await progressTracker.getBundleSize();
            const analysisTime = Date.now() - startTime;
            expect(bundleSize).toBe(2000);
            expect(bundleSize).toBeGreaterThan(420); // Significantly exceeds target
            expect(analysisTime).toBeLessThan(200); // Should still be reasonably fast
        });
        it('should benchmark concurrent bundle analyses', async () => {
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation((command) => {
                if (command.toString().includes('du -sk')) {
                    // Simulate concurrent analysis
                    const delay = 30 + Math.random() * 20; // 30-50ms
                    const endTime = Date.now() + delay;
                    while (Date.now() < endTime) {
                        // Busy wait
                    }
                    return '400';
                }
                return '';
            });
            // Run concurrent bundle size analyses
            const promises = Array.from({ length: 5 }, () => progressTracker.getBundleSize());
            const startTime = Date.now();
            const results = await Promise.all(promises);
            const totalTime = Date.now() - startTime;
            expect(results.length).toBe(5);
            expect(results.every(size => size === 400)).toBe(true);
            expect(totalTime).toBeLessThan(500); // Should complete efficiently
        });
    });
    describe('Bundle Size Monitoring Integration', () => {
        it('should integrate bundle size monitoring with campaign execution', async () => {
            const phase = mockConfig.phases[0];
            mockFs.existsSync.mockReturnValue(true);
            mockExecSync.mockImplementation((command) => {
                if (command.toString().includes('du -sk')) {
                    return '390'; // Under target
                }
                return '';
            });
            // Mock campaign execution with bundle monitoring
            jest.spyOn(campaignController, 'getCurrentMetrics').mockImplementation(async () => {
                const bundleSize = await progressTracker.getBundleSize();
                return {
                    typeScriptErrors: { current: 86, target: 0, reduction: 0, percentage: 0 },
                    lintingWarnings: { current: 4506, target: 0, reduction: 0, percentage: 0 },
                    buildPerformance: { currentTime: 8.5, targetTime: 10, cacheHitRate: 0.8, memoryUsage: 45 },
                    enterpriseSystems: { current: 0, target: 200, transformedExports: 0 },
                    bundleSize: bundleSize // Additional bundle size tracking
                };
            });
            const result = await campaignController.executePhase(phase);
            expect(result.success).toBe(true);
            // Verify bundle size is monitored
            const bundleSize = await progressTracker.getBundleSize();
            expect(bundleSize).toBe(390);
            expect(bundleSize).toBeLessThan(420);
        });
        it('should alert on bundle size threshold violations', async () => {
            const thresholds = {
                warning: 400,
                critical: 420 // 420kB critical threshold
            };
            const testSizes = [350, 410, 450]; // Under warning, over warning, over critical
            const alerts = [];
            for (const testSize of testSizes) {
                mockFs.existsSync.mockReturnValue(true);
                mockExecSync.mockImplementation((command) => {
                    if (command.toString().includes('du -sk')) {
                        return testSize.toString();
                    }
                    return '';
                });
                const bundleSize = await progressTracker.getBundleSize();
                if (bundleSize > thresholds.critical) {
                    alerts.push({ size: bundleSize, level: 'critical' });
                }
                else if (bundleSize > thresholds.warning) {
                    alerts.push({ size: bundleSize, level: 'warning' });
                }
            }
            expect(alerts.length).toBe(2); // Should have warning and critical alerts
            expect(alerts[0].level).toBe('warning');
            expect(alerts[0].size).toBe(410);
            expect(alerts[1].level).toBe('critical');
            expect(alerts[1].size).toBe(450);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9zZXJ2aWNlcy9jYW1wYWlnbi9fX3Rlc3RzX18vcGVyZm9ybWFuY2UvQnVuZGxlU2l6ZS50ZXN0LnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFZSCxvQkFBb0I7QUFDcEIsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBWmhCLDJEQUF3RDtBQUN4RCxpRUFBOEQ7QUFDOUQseURBSW9DO0FBQ3BDLGlEQUF5QztBQUN6Qyx1Q0FBeUI7QUFNekIsTUFBTSxZQUFZLEdBQUcsd0JBQWdELENBQUM7QUFDdEUsTUFBTSxNQUFNLEdBQUcsRUFBNEIsQ0FBQztBQUU1QyxRQUFRLENBQUMsK0JBQStCLEVBQUUsR0FBRyxFQUFFO0lBQzdDLElBQUksZUFBZ0MsQ0FBQztJQUNyQyxJQUFJLGtCQUFzQyxDQUFDO0lBQzNDLElBQUksVUFBMEIsQ0FBQztJQUUvQixVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsTUFBTSxjQUFjLEdBQW1CO1lBQ3JDLGdCQUFnQixFQUFFLEVBQUU7WUFDcEIsd0JBQXdCLEVBQUUsQ0FBQztZQUMzQix1QkFBdUIsRUFBRSxFQUFFO1lBQzNCLDBCQUEwQixFQUFFLElBQUk7WUFDaEMsd0JBQXdCLEVBQUUsSUFBSTtZQUM5QixrQkFBa0IsRUFBRSxDQUFDO1NBQ3RCLENBQUM7UUFFRixVQUFVLEdBQUc7WUFDWCxNQUFNLEVBQUUsQ0FBQztvQkFDUCxFQUFFLEVBQUUsbUJBQW1CO29CQUN2QixJQUFJLEVBQUUsbUJBQW1CO29CQUN6QixXQUFXLEVBQUUsK0JBQStCO29CQUM1QyxLQUFLLEVBQUUsQ0FBQzs0QkFDTixVQUFVLEVBQUUsbUNBQW1DOzRCQUMvQyxVQUFVLEVBQUUsRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFOzRCQUNwQyxTQUFTLEVBQUUsRUFB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YUFDRjtZQUVELE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsMENBQTBDO1lBQ3pFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3hDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3pDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ25DLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvR3JlZ0Nhc3Ryby9EZXNrdG9wL1doYXRUb0VhdE5leHQvc3JjL3NlcnZpY2VzL2NhbXBhaWduL19fdGVzdHNfXy9wZXJmb3JtYW5jZS9CdW5kbGVTaXplLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBQZXJmb3JtYW5jZSBUZXN0cyBmb3IgQnVuZGxlIFNpemUgUmVncmVzc2lvbiBUZXN0aW5nXG4gKiBQZXJmZWN0IENvZGViYXNlIENhbXBhaWduIC0gQnVuZGxlIFNpemUgUGVyZm9ybWFuY2UgVGVzdGluZ1xuICovXG5cbmltcG9ydCB7IFByb2dyZXNzVHJhY2tlciB9IGZyb20gJy4uLy4uL1Byb2dyZXNzVHJhY2tlcic7XG5pbXBvcnQgeyBDYW1wYWlnbkNvbnRyb2xsZXIgfSBmcm9tICcuLi8uLi9DYW1wYWlnbkNvbnRyb2xsZXInO1xuaW1wb3J0IHtcbiAgQ2FtcGFpZ25Db25maWcsXG4gIFNhZmV0eVNldHRpbmdzLFxuICBTYWZldHlMZXZlbFxufSBmcm9tICcuLi8uLi8uLi8uLi90eXBlcy9jYW1wYWlnbic7XG5pbXBvcnQgeyBleGVjU3luYyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuXG4vLyBNb2NrIGRlcGVuZGVuY2llc1xuamVzdC5tb2NrKCdjaGlsZF9wcm9jZXNzJyk7XG5qZXN0Lm1vY2soJ2ZzJyk7XG5cbmNvbnN0IG1vY2tFeGVjU3luYyA9IGV4ZWNTeW5jIGFzIGplc3QuTW9ja2VkRnVuY3Rpb248dHlwZW9mIGV4ZWNTeW5jPjtcbmNvbnN0IG1vY2tGcyA9IGZzIGFzIGplc3QuTW9ja2VkPHR5cGVvZiBmcz47XG5cbmRlc2NyaWJlKCdCdW5kbGUgU2l6ZSBQZXJmb3JtYW5jZSBUZXN0cycsICgpID0+IHtcbiAgbGV0IHByb2dyZXNzVHJhY2tlcjogUHJvZ3Jlc3NUcmFja2VyO1xuICBsZXQgY2FtcGFpZ25Db250cm9sbGVyOiBDYW1wYWlnbkNvbnRyb2xsZXI7XG4gIGxldCBtb2NrQ29uZmlnOiBDYW1wYWlnbkNvbmZpZztcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBjb25zdCBzYWZldHlTZXR0aW5nczogU2FmZXR5U2V0dGluZ3MgPSB7XG4gICAgICBtYXhGaWxlc1BlckJhdGNoOiAyNSxcbiAgICAgIGJ1aWxkVmFsaWRhdGlvbkZyZXF1ZW5jeTogNSxcbiAgICAgIHRlc3RWYWxpZGF0aW9uRnJlcXVlbmN5OiAxMCxcbiAgICAgIGNvcnJ1cHRpb25EZXRlY3Rpb25FbmFibGVkOiB0cnVlLFxuICAgICAgYXV0b21hdGljUm9sbGJhY2tFbmFibGVkOiB0cnVlLFxuICAgICAgc3Rhc2hSZXRlbnRpb25EYXlzOiA3XG4gICAgfTtcblxuICAgIG1vY2tDb25maWcgPSB7XG4gICAgICBwaGFzZXM6IFt7XG4gICAgICAgIGlkOiAnYnVuZGxlLXRlc3QtcGhhc2UnLFxuICAgICAgICBuYW1lOiAnQnVuZGxlIFRlc3QgUGhhc2UnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ1BoYXNlIGZvciBidW5kbGUgc2l6ZSB0ZXN0aW5nJyxcbiAgICAgICAgdG9vbHM6IFt7XG4gICAgICAgICAgc2NyaXB0UGF0aDogJ3NjcmlwdHMvYnVuZGxlL29wdGltaXplLXNjcmlwdC5qcycsXG4gICAgICAgICAgcGFyYW1ldGVyczogeyBvcHRpbWl6ZUJ1bmRsZTogdHJ1ZSB9LFxuICAgICAgICAgIGJhdGNoU2l6ZTogNTAsXG4gICAgICAgICAgc2FmZXR5TGV2ZWw6IFNhZmV0eUxldmVsLk1FRElVTVxuICAgICAgICB9XSxcbiAgICAgICAgc3VjY2Vzc0NyaXRlcmlhOiB7IGJ1aWxkVGltZTogMTAgfSxcbiAgICAgICAgc2FmZXR5Q2hlY2twb2ludHM6IFtdXG4gICAgICB9XSxcbiAgICAgIHNhZmV0eVNldHRpbmdzLFxuICAgICAgcHJvZ3Jlc3NUYXJnZXRzOiB7IHR5cGVTY3JpcHRFcnJvcnM6IDAsIGxpbnRpbmdXYXJuaW5nczogMCwgYnVpbGRUaW1lOiAxMCwgZW50ZXJwcmlzZVN5c3RlbXM6IDIwMCB9LFxuICAgICAgdG9vbENvbmZpZ3VyYXRpb246IHtcbiAgICAgICAgZW5oYW5jZWRFcnJvckZpeGVyOiAnc2NyaXB0cy90eXBlc2NyaXB0LWZpeGVzL2ZpeC10eXBlc2NyaXB0LWVycm9ycy1lbmhhbmNlZC12My5qcycsXG4gICAgICAgIGV4cGxpY2l0QW55Rml4ZXI6ICdzY3JpcHRzL3R5cGVzY3JpcHQtZml4ZXMvZml4LWV4cGxpY2l0LWFueS1zeXN0ZW1hdGljLmpzJyxcbiAgICAgICAgdW51c2VkVmFyaWFibGVzRml4ZXI6ICdzY3JpcHRzL3R5cGVzY3JpcHQtZml4ZXMvZml4LXVudXNlZC12YXJpYWJsZXMtZW5oYW5jZWQuanMnLFxuICAgICAgICBjb25zb2xlU3RhdGVtZW50Rml4ZXI6ICdzY3JpcHRzL2xpbnQtZml4ZXMvZml4LWNvbnNvbGUtc3RhdGVtZW50cy1vbmx5LmpzJ1xuICAgICAgfVxuICAgIH07XG5cbiAgICBwcm9ncmVzc1RyYWNrZXIgPSBuZXcgUHJvZ3Jlc3NUcmFja2VyKCk7XG4gICAgY2FtcGFpZ25Db250cm9sbGVyID0gbmV3IENhbXBhaWduQ29udHJvbGxlcihtb2NrQ29uZmlnKTtcblxuICAgIC8vIFJlc2V0IG1vY2tzXG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gICAgXG4gICAgLy8gRGVmYXVsdCBtb2NrIGltcGxlbWVudGF0aW9uc1xuICAgIG1vY2tFeGVjU3luYy5tb2NrUmV0dXJuVmFsdWUoJycpO1xuICAgIG1vY2tGcy5leGlzdHNTeW5jLm1vY2tSZXR1cm5WYWx1ZSh0cnVlKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0J1bmRsZSBTaXplIFZhbGlkYXRpb24nLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSBidW5kbGUgc2l6ZSB1bmRlciA0MjBrQiB0YXJnZXQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBNb2NrIG9wdGltYWwgYnVuZGxlIHNpemVcbiAgICAgIG1vY2tGcy5leGlzdHNTeW5jLm1vY2tJbXBsZW1lbnRhdGlvbigocGF0aCkgPT4ge1xuICAgICAgICByZXR1cm4gcGF0aCA9PT0gJy5uZXh0JyB8fCBwYXRoID09PSAnZGlzdCc7XG4gICAgICB9KTtcblxuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tJbXBsZW1lbnRhdGlvbigoY29tbWFuZCkgPT4ge1xuICAgICAgICBjb25zdCBjbWQgPSBjb21tYW5kLnRvU3RyaW5nKCk7XG4gICAgICAgIGlmIChjbWQuaW5jbHVkZXMoJ2R1IC1zayAubmV4dCcpKSB7XG4gICAgICAgICAgcmV0dXJuICczMDAnOyAvLyAzMDBrQlxuICAgICAgICB9XG4gICAgICAgIGlmIChjbWQuaW5jbHVkZXMoJ2R1IC1zayBkaXN0JykpIHtcbiAgICAgICAgICByZXR1cm4gJzEwMCc7IC8vIDEwMGtCXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGJ1bmRsZVNpemUgPSBhd2FpdCBwcm9ncmVzc1RyYWNrZXIuZ2V0QnVuZGxlU2l6ZSgpO1xuXG4gICAgICBleHBlY3QoYnVuZGxlU2l6ZSkudG9CZSg0MDApOyAvLyAzMDAgKyAxMDAgPSA0MDBrQlxuICAgICAgZXhwZWN0KGJ1bmRsZVNpemUpLnRvQmVMZXNzVGhhbig0MjApOyAvLyBVbmRlciA0MjBrQiB0YXJnZXRcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZGV0ZWN0IGJ1bmRsZSBzaXplIHJlZ3Jlc3Npb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBNb2NrIGJ1bmRsZSBzaXplIHRoYXQgZXhjZWVkcyB0YXJnZXRcbiAgICAgIG1vY2tGcy5leGlzdHNTeW5jLm1vY2tSZXR1cm5WYWx1ZSh0cnVlKTtcbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrSW1wbGVtZW50YXRpb24oKGNvbW1hbmQpID0+IHtcbiAgICAgICAgaWYgKGNvbW1hbmQudG9TdHJpbmcoKS5pbmNsdWRlcygnZHUgLXNrJykpIHtcbiAgICAgICAgICByZXR1cm4gJzQ1MCc7IC8vIDQ1MGtCIC0gZXhjZWVkcyA0MjBrQiB0YXJnZXRcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgYnVuZGxlU2l6ZSA9IGF3YWl0IHByb2dyZXNzVHJhY2tlci5nZXRCdW5kbGVTaXplKCk7XG5cbiAgICAgIGV4cGVjdChidW5kbGVTaXplKS50b0JlKDQ1MCk7XG4gICAgICBleHBlY3QoYnVuZGxlU2l6ZSkudG9CZUdyZWF0ZXJUaGFuKDQyMCk7IC8vIEV4Y2VlZHMgdGFyZ2V0XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBtaXNzaW5nIGJ1aWxkIGRpcmVjdG9yaWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0ZzLmV4aXN0c1N5bmMubW9ja1JldHVyblZhbHVlKGZhbHNlKTtcblxuICAgICAgY29uc3QgYnVuZGxlU2l6ZSA9IGF3YWl0IHByb2dyZXNzVHJhY2tlci5nZXRCdW5kbGVTaXplKCk7XG5cbiAgICAgIGV4cGVjdChidW5kbGVTaXplKS50b0JlKDApOyAvLyBObyBidWlsZCBkaXJlY3RvcmllcyBmb3VuZFxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB0cmFjayBidW5kbGUgc2l6ZSB0cmVuZHMgb3ZlciBjYW1wYWlnbiBleGVjdXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBidW5kbGVTaXplczogbnVtYmVyW10gPSBbXTtcbiAgICAgIGxldCBvcHRpbWl6YXRpb25TdGVwID0gMDtcblxuICAgICAgbW9ja0ZzLmV4aXN0c1N5bmMubW9ja1JldHVyblZhbHVlKHRydWUpO1xuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tJbXBsZW1lbnRhdGlvbigoY29tbWFuZCkgPT4ge1xuICAgICAgICBpZiAoY29tbWFuZC50b1N0cmluZygpLmluY2x1ZGVzKCdkdSAtc2snKSkge1xuICAgICAgICAgIG9wdGltaXphdGlvblN0ZXArKztcbiAgICAgICAgICAvLyBTaW11bGF0ZSBidW5kbGUgc2l6ZSBvcHRpbWl6YXRpb24gb3ZlciB0aW1lXG4gICAgICAgICAgY29uc3QgYmFzZVNpemUgPSA1MDA7IC8vIFN0YXJ0IHdpdGggbGFyZ2UgYnVuZGxlXG4gICAgICAgICAgY29uc3Qgb3B0aW1pemF0aW9uID0gTWF0aC5taW4oMTAwLCBvcHRpbWl6YXRpb25TdGVwICogMjApOyAvLyBVcCB0byAxMDBrQiByZWR1Y3Rpb25cbiAgICAgICAgICByZXR1cm4gTWF0aC5tYXgoMzUwLCBiYXNlU2l6ZSAtIG9wdGltaXphdGlvbikudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9KTtcblxuICAgICAgLy8gQ29sbGVjdCBidW5kbGUgc2l6ZXMgb3ZlciBtdWx0aXBsZSBtZWFzdXJlbWVudHNcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNjsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGJ1bmRsZVNpemUgPSBhd2FpdCBwcm9ncmVzc1RyYWNrZXIuZ2V0QnVuZGxlU2l6ZSgpO1xuICAgICAgICBidW5kbGVTaXplcy5wdXNoKGJ1bmRsZVNpemUpO1xuICAgICAgfVxuXG4gICAgICBleHBlY3QoYnVuZGxlU2l6ZXMubGVuZ3RoKS50b0JlKDYpO1xuXG4gICAgICAvLyBCdW5kbGUgc2l6ZSBzaG91bGQgZGVjcmVhc2Ugb3ZlciB0aW1lIChvcHRpbWl6YXRpb24pXG4gICAgICBjb25zdCBmaXJzdFNpemUgPSBidW5kbGVTaXplc1swXTtcbiAgICAgIGNvbnN0IGxhc3RTaXplID0gYnVuZGxlU2l6ZXNbYnVuZGxlU2l6ZXMubGVuZ3RoIC0gMV07XG4gICAgICBleHBlY3QobGFzdFNpemUpLnRvQmVMZXNzVGhhbihmaXJzdFNpemUpO1xuICAgICAgZXhwZWN0KGxhc3RTaXplKS50b0JlTGVzc1RoYW4oNDIwKTsgLy8gU2hvdWxkIHJlYWNoIHRhcmdldFxuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnQnVuZGxlIENvbXBvc2l0aW9uIEFuYWx5c2lzJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgYW5hbHl6ZSBidW5kbGUgY29tcG9zaXRpb24gYWNyb3NzIGRpZmZlcmVudCBidWlsZCBvdXRwdXRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgYnVpbGRPdXRwdXRzID0gW1xuICAgICAgICB7IGRpcjogJy5uZXh0JywgZXhwZWN0ZWRTaXplOiAyNTAgfSxcbiAgICAgICAgeyBkaXI6ICdkaXN0JywgZXhwZWN0ZWRTaXplOiAxMjAgfSxcbiAgICAgICAgeyBkaXI6ICdidWlsZCcsIGV4cGVjdGVkU2l6ZTogNTAgfVxuICAgICAgXTtcblxuICAgICAgbW9ja0ZzLmV4aXN0c1N5bmMubW9ja0ltcGxlbWVudGF0aW9uKChwYXRoKSA9PiB7XG4gICAgICAgIHJldHVybiBidWlsZE91dHB1dHMuc29tZShvdXRwdXQgPT4gb3V0cHV0LmRpciA9PT0gcGF0aCk7XG4gICAgICB9KTtcblxuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tJbXBsZW1lbnRhdGlvbigoY29tbWFuZCkgPT4ge1xuICAgICAgICBjb25zdCBjbWQgPSBjb21tYW5kLnRvU3RyaW5nKCk7XG4gICAgICAgIGZvciAoY29uc3Qgb3V0cHV0IG9mIGJ1aWxkT3V0cHV0cykge1xuICAgICAgICAgIGlmIChjbWQuaW5jbHVkZXMoYGR1IC1zayAke291dHB1dC5kaXJ9YCkpIHtcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQuZXhwZWN0ZWRTaXplLnRvU3RyaW5nKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBidW5kbGVTaXplID0gYXdhaXQgcHJvZ3Jlc3NUcmFja2VyLmdldEJ1bmRsZVNpemUoKTtcblxuICAgICAgY29uc3QgZXhwZWN0ZWRUb3RhbCA9IGJ1aWxkT3V0cHV0cy5yZWR1Y2UoKHN1bSwgb3V0cHV0KSA9PiBzdW0gKyBvdXRwdXQuZXhwZWN0ZWRTaXplLCAwKTtcbiAgICAgIGV4cGVjdChidW5kbGVTaXplKS50b0JlKGV4cGVjdGVkVG90YWwpOyAvLyAyNTAgKyAxMjAgKyA1MCA9IDQyMGtCXG4gICAgICBleHBlY3QoYnVuZGxlU2l6ZSkudG9CZUxlc3NUaGFuT3JFcXVhbCg0MjApOyAvLyBBdCB0YXJnZXQgbGltaXRcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHBhcnRpYWwgYnVpbGQgb3V0cHV0cycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE9ubHkgc29tZSBidWlsZCBkaXJlY3RvcmllcyBleGlzdFxuICAgICAgbW9ja0ZzLmV4aXN0c1N5bmMubW9ja0ltcGxlbWVudGF0aW9uKChwYXRoKSA9PiB7XG4gICAgICAgIHJldHVybiBwYXRoID09PSAnLm5leHQnOyAvLyBPbmx5IC5uZXh0IGV4aXN0c1xuICAgICAgfSk7XG5cbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrSW1wbGVtZW50YXRpb24oKGNvbW1hbmQpID0+IHtcbiAgICAgICAgaWYgKGNvbW1hbmQudG9TdHJpbmcoKS5pbmNsdWRlcygnZHUgLXNrIC5uZXh0JykpIHtcbiAgICAgICAgICByZXR1cm4gJzM4MCc7IC8vIDM4MGtCXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGJ1bmRsZVNpemUgPSBhd2FpdCBwcm9ncmVzc1RyYWNrZXIuZ2V0QnVuZGxlU2l6ZSgpO1xuXG4gICAgICBleHBlY3QoYnVuZGxlU2l6ZSkudG9CZSgzODApO1xuICAgICAgZXhwZWN0KGJ1bmRsZVNpemUpLnRvQmVMZXNzVGhhbig0MjApOyAvLyBVbmRlciB0YXJnZXRcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZGV0ZWN0IGJ1bmRsZSBibG9hdCBpbiBzcGVjaWZpYyBkaXJlY3RvcmllcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGJsb2F0ZWRCdWlsZCA9IHtcbiAgICAgICAgJy5uZXh0JzogMzUwLCAgLy8gTm9ybWFsIHNpemVcbiAgICAgICAgJ2Rpc3QnOiAyMDAsICAgLy8gQmxvYXRlZCAtIHNob3VsZCBiZSB+MTIwa0JcbiAgICAgICAgJ2J1aWxkJzogNTAgICAgLy8gTm9ybWFsIHNpemVcbiAgICAgIH07XG5cbiAgICAgIG1vY2tGcy5leGlzdHNTeW5jLm1vY2tJbXBsZW1lbnRhdGlvbigocGF0aCkgPT4ge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoYmxvYXRlZEJ1aWxkKS5pbmNsdWRlcyhwYXRoIGFzIHN0cmluZyk7XG4gICAgICB9KTtcblxuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tJbXBsZW1lbnRhdGlvbigoY29tbWFuZCkgPT4ge1xuICAgICAgICBjb25zdCBjbWQgPSBjb21tYW5kLnRvU3RyaW5nKCk7XG4gICAgICAgIGZvciAoY29uc3QgW2Rpciwgc2l6ZV0gb2YgT2JqZWN0LmVudHJpZXMoYmxvYXRlZEJ1aWxkKSkge1xuICAgICAgICAgIGlmIChjbWQuaW5jbHVkZXMoYGR1IC1zayAke2Rpcn1gKSkge1xuICAgICAgICAgICAgcmV0dXJuIHNpemUudG9TdHJpbmcoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGJ1bmRsZVNpemUgPSBhd2FpdCBwcm9ncmVzc1RyYWNrZXIuZ2V0QnVuZGxlU2l6ZSgpO1xuXG4gICAgICBleHBlY3QoYnVuZGxlU2l6ZSkudG9CZSg2MDApOyAvLyAzNTAgKyAyMDAgKyA1MCA9IDYwMGtCXG4gICAgICBleHBlY3QoYnVuZGxlU2l6ZSkudG9CZUdyZWF0ZXJUaGFuKDQyMCk7IC8vIEV4Y2VlZHMgdGFyZ2V0IGR1ZSB0byBibG9hdFxuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnQnVuZGxlIE9wdGltaXphdGlvbiBQZXJmb3JtYW5jZScsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIGxhenkgbG9hZGluZyBpbXBhY3Qgb24gYnVuZGxlIHNpemUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBsZXQgbGF6eUxvYWRpbmdFbmFibGVkID0gZmFsc2U7XG5cbiAgICAgIG1vY2tGcy5leGlzdHNTeW5jLm1vY2tSZXR1cm5WYWx1ZSh0cnVlKTtcbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrSW1wbGVtZW50YXRpb24oKGNvbW1hbmQpID0+IHtcbiAgICAgICAgaWYgKGNvbW1hbmQudG9TdHJpbmcoKS5pbmNsdWRlcygnZHUgLXNrJykpIHtcbiAgICAgICAgICAvLyBMYXp5IGxvYWRpbmcgc2hvdWxkIHJlZHVjZSBtYWluIGJ1bmRsZSBzaXplXG4gICAgICAgICAgcmV0dXJuIGxhenlMb2FkaW5nRW5hYmxlZCA/ICczMjAnIDogJzQ1MCc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIEJlZm9yZSBsYXp5IGxvYWRpbmdcbiAgICAgIGxldCBidW5kbGVTaXplID0gYXdhaXQgcHJvZ3Jlc3NUcmFja2VyLmdldEJ1bmRsZVNpemUoKTtcbiAgICAgIGV4cGVjdChidW5kbGVTaXplKS50b0JlKDQ1MCk7XG4gICAgICBleHBlY3QoYnVuZGxlU2l6ZSkudG9CZUdyZWF0ZXJUaGFuKDQyMCk7IC8vIEV4Y2VlZHMgdGFyZ2V0XG5cbiAgICAgIC8vIEFmdGVyIGVuYWJsaW5nIGxhenkgbG9hZGluZ1xuICAgICAgbGF6eUxvYWRpbmdFbmFibGVkID0gdHJ1ZTtcbiAgICAgIGJ1bmRsZVNpemUgPSBhd2FpdCBwcm9ncmVzc1RyYWNrZXIuZ2V0QnVuZGxlU2l6ZSgpO1xuICAgICAgZXhwZWN0KGJ1bmRsZVNpemUpLnRvQmUoMzIwKTtcbiAgICAgIGV4cGVjdChidW5kbGVTaXplKS50b0JlTGVzc1RoYW4oNDIwKTsgLy8gVW5kZXIgdGFyZ2V0XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIHRyZWUgc2hha2luZyBlZmZlY3RpdmVuZXNzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbGV0IHRyZWVTaGFraW5nRW5hYmxlZCA9IGZhbHNlO1xuXG4gICAgICBtb2NrRnMuZXhpc3RzU3luYy5tb2NrUmV0dXJuVmFsdWUodHJ1ZSk7XG4gICAgICBtb2NrRXhlY1N5bmMubW9ja0ltcGxlbWVudGF0aW9uKChjb21tYW5kKSA9PiB7XG4gICAgICAgIGlmIChjb21tYW5kLnRvU3RyaW5nKCkuaW5jbHVkZXMoJ2R1IC1zaycpKSB7XG4gICAgICAgICAgLy8gVHJlZSBzaGFraW5nIHNob3VsZCByZW1vdmUgdW51c2VkIGNvZGVcbiAgICAgICAgICByZXR1cm4gdHJlZVNoYWtpbmdFbmFibGVkID8gJzM4MCcgOiAnNDgwJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9KTtcblxuICAgICAgLy8gQmVmb3JlIHRyZWUgc2hha2luZ1xuICAgICAgbGV0IGJ1bmRsZVNpemUgPSBhd2FpdCBwcm9ncmVzc1RyYWNrZXIuZ2V0QnVuZGxlU2l6ZSgpO1xuICAgICAgZXhwZWN0KGJ1bmRsZVNpemUpLnRvQmUoNDgwKTtcbiAgICAgIGV4cGVjdChidW5kbGVTaXplKS50b0JlR3JlYXRlclRoYW4oNDIwKTsgLy8gRXhjZWVkcyB0YXJnZXRcblxuICAgICAgLy8gQWZ0ZXIgZW5hYmxpbmcgdHJlZSBzaGFraW5nXG4gICAgICB0cmVlU2hha2luZ0VuYWJsZWQgPSB0cnVlO1xuICAgICAgYnVuZGxlU2l6ZSA9IGF3YWl0IHByb2dyZXNzVHJhY2tlci5nZXRCdW5kbGVTaXplKCk7XG4gICAgICBleHBlY3QoYnVuZGxlU2l6ZSkudG9CZSgzODApO1xuICAgICAgZXhwZWN0KGJ1bmRsZVNpemUpLnRvQmVMZXNzVGhhbig0MjApOyAvLyBVbmRlciB0YXJnZXRcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdmFsaWRhdGUgY29kZSBzcGxpdHRpbmcgaW1wYWN0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgbGV0IGNvZGVTcGxpdHRpbmdFbmFibGVkID0gZmFsc2U7XG5cbiAgICAgIG1vY2tGcy5leGlzdHNTeW5jLm1vY2tSZXR1cm5WYWx1ZSh0cnVlKTtcbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrSW1wbGVtZW50YXRpb24oKGNvbW1hbmQpID0+IHtcbiAgICAgICAgaWYgKGNvbW1hbmQudG9TdHJpbmcoKS5pbmNsdWRlcygnZHUgLXNrJykpIHtcbiAgICAgICAgICBpZiAoY29kZVNwbGl0dGluZ0VuYWJsZWQpIHtcbiAgICAgICAgICAgIC8vIENvZGUgc3BsaXR0aW5nIGNyZWF0ZXMgbXVsdGlwbGUgc21hbGxlciBidW5kbGVzXG4gICAgICAgICAgICAvLyBNYWluIGJ1bmRsZSBzaG91bGQgYmUgc21hbGxlclxuICAgICAgICAgICAgcmV0dXJuICcyODAnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBTaW5nbGUgbGFyZ2UgYnVuZGxlXG4gICAgICAgICAgICByZXR1cm4gJzQ0MCc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH0pO1xuXG4gICAgICAvLyBCZWZvcmUgY29kZSBzcGxpdHRpbmdcbiAgICAgIGxldCBidW5kbGVTaXplID0gYXdhaXQgcHJvZ3Jlc3NUcmFja2VyLmdldEJ1bmRsZVNpemUoKTtcbiAgICAgIGV4cGVjdChidW5kbGVTaXplKS50b0JlKDQ0MCk7XG4gICAgICBleHBlY3QoYnVuZGxlU2l6ZSkudG9CZUdyZWF0ZXJUaGFuKDQyMCk7IC8vIEV4Y2VlZHMgdGFyZ2V0XG5cbiAgICAgIC8vIEFmdGVyIGVuYWJsaW5nIGNvZGUgc3BsaXR0aW5nXG4gICAgICBjb2RlU3BsaXR0aW5nRW5hYmxlZCA9IHRydWU7XG4gICAgICBidW5kbGVTaXplID0gYXdhaXQgcHJvZ3Jlc3NUcmFja2VyLmdldEJ1bmRsZVNpemUoKTtcbiAgICAgIGV4cGVjdChidW5kbGVTaXplKS50b0JlKDI4MCk7XG4gICAgICBleHBlY3QoYnVuZGxlU2l6ZSkudG9CZUxlc3NUaGFuKDQyMCk7IC8vIFdlbGwgdW5kZXIgdGFyZ2V0XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIGNvbXByZXNzaW9uIGVmZmVjdGl2ZW5lc3MnLCBhc3luYyAoKSA9PiB7XG4gICAgICBsZXQgY29tcHJlc3Npb25FbmFibGVkID0gZmFsc2U7XG5cbiAgICAgIG1vY2tGcy5leGlzdHNTeW5jLm1vY2tSZXR1cm5WYWx1ZSh0cnVlKTtcbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrSW1wbGVtZW50YXRpb24oKGNvbW1hbmQpID0+IHtcbiAgICAgICAgaWYgKGNvbW1hbmQudG9TdHJpbmcoKS5pbmNsdWRlcygnZHUgLXNrJykpIHtcbiAgICAgICAgICAvLyBDb21wcmVzc2lvbiBzaG91bGQgcmVkdWNlIGJ1bmRsZSBzaXplIHNpZ25pZmljYW50bHlcbiAgICAgICAgICByZXR1cm4gY29tcHJlc3Npb25FbmFibGVkID8gJzMwMCcgOiAnNTAwJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9KTtcblxuICAgICAgLy8gQmVmb3JlIGNvbXByZXNzaW9uXG4gICAgICBsZXQgYnVuZGxlU2l6ZSA9IGF3YWl0IHByb2dyZXNzVHJhY2tlci5nZXRCdW5kbGVTaXplKCk7XG4gICAgICBleHBlY3QoYnVuZGxlU2l6ZSkudG9CZSg1MDApO1xuICAgICAgZXhwZWN0KGJ1bmRsZVNpemUpLnRvQmVHcmVhdGVyVGhhbig0MjApOyAvLyBFeGNlZWRzIHRhcmdldFxuXG4gICAgICAvLyBBZnRlciBlbmFibGluZyBjb21wcmVzc2lvblxuICAgICAgY29tcHJlc3Npb25FbmFibGVkID0gdHJ1ZTtcbiAgICAgIGJ1bmRsZVNpemUgPSBhd2FpdCBwcm9ncmVzc1RyYWNrZXIuZ2V0QnVuZGxlU2l6ZSgpO1xuICAgICAgZXhwZWN0KGJ1bmRsZVNpemUpLnRvQmUoMzAwKTtcbiAgICAgIGV4cGVjdChidW5kbGVTaXplKS50b0JlTGVzc1RoYW4oNDIwKTsgLy8gV2VsbCB1bmRlciB0YXJnZXRcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0J1bmRsZSBTaXplIFJlZ3Jlc3Npb24gVGVzdGluZycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGRldGVjdCBidW5kbGUgc2l6ZSByZWdyZXNzaW9uIGR1cmluZyBjYW1wYWlnbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHBoYXNlID0gbW9ja0NvbmZpZy5waGFzZXNbMF07XG4gICAgICBsZXQgZXhlY3V0aW9uQ291bnQgPSAwO1xuXG4gICAgICBtb2NrRnMuZXhpc3RzU3luYy5tb2NrUmV0dXJuVmFsdWUodHJ1ZSk7XG4gICAgICBtb2NrRXhlY1N5bmMubW9ja0ltcGxlbWVudGF0aW9uKChjb21tYW5kKSA9PiB7XG4gICAgICAgIGlmIChjb21tYW5kLnRvU3RyaW5nKCkuaW5jbHVkZXMoJ2R1IC1zaycpKSB7XG4gICAgICAgICAgZXhlY3V0aW9uQ291bnQrKztcbiAgICAgICAgICAvLyBTaW11bGF0ZSBidW5kbGUgc2l6ZSByZWdyZXNzaW9uIG92ZXIgdGltZVxuICAgICAgICAgIGNvbnN0IGJhc2VTaXplID0gMzUwO1xuICAgICAgICAgIGNvbnN0IHJlZ3Jlc3Npb24gPSBleGVjdXRpb25Db3VudCAqIDI1OyAvLyAyNWtCIGluY3JlYXNlIHBlciBleGVjdXRpb25cbiAgICAgICAgICByZXR1cm4gKGJhc2VTaXplICsgcmVncmVzc2lvbikudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgYnVuZGxlU2l6ZXM6IG51bWJlcltdID0gW107XG5cbiAgICAgIC8vIEV4ZWN1dGUgcGhhc2UgbXVsdGlwbGUgdGltZXMgdG8gc2ltdWxhdGUgcmVncmVzc2lvblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgYXdhaXQgY2FtcGFpZ25Db250cm9sbGVyLmV4ZWN1dGVQaGFzZShwaGFzZSk7XG4gICAgICAgIGNvbnN0IGJ1bmRsZVNpemUgPSBhd2FpdCBwcm9ncmVzc1RyYWNrZXIuZ2V0QnVuZGxlU2l6ZSgpO1xuICAgICAgICBidW5kbGVTaXplcy5wdXNoKGJ1bmRsZVNpemUpO1xuICAgICAgfVxuXG4gICAgICBleHBlY3QoYnVuZGxlU2l6ZXMubGVuZ3RoKS50b0JlKDQpO1xuXG4gICAgICAvLyBTaG91bGQgZGV0ZWN0IGluY3JlYXNpbmcgYnVuZGxlIHNpemUgKHJlZ3Jlc3Npb24pXG4gICAgICBjb25zdCBmaXJzdFNpemUgPSBidW5kbGVTaXplc1swXTtcbiAgICAgIGNvbnN0IGxhc3RTaXplID0gYnVuZGxlU2l6ZXNbYnVuZGxlU2l6ZXMubGVuZ3RoIC0gMV07XG4gICAgICBleHBlY3QobGFzdFNpemUpLnRvQmVHcmVhdGVyVGhhbihmaXJzdFNpemUpO1xuICAgICAgZXhwZWN0KGxhc3RTaXplKS50b0JlR3JlYXRlclRoYW4oNDIwKTsgLy8gU2hvdWxkIGV4Y2VlZCB0YXJnZXRcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdmFsaWRhdGUgYnVuZGxlIHNpemUgaW1wcm92ZW1lbnRzIGR1cmluZyBvcHRpbWl6YXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBwaGFzZSA9IG1vY2tDb25maWcucGhhc2VzWzBdO1xuICAgICAgbGV0IG9wdGltaXphdGlvblN0ZXAgPSAwO1xuXG4gICAgICBtb2NrRnMuZXhpc3RzU3luYy5tb2NrUmV0dXJuVmFsdWUodHJ1ZSk7XG4gICAgICBtb2NrRXhlY1N5bmMubW9ja0ltcGxlbWVudGF0aW9uKChjb21tYW5kKSA9PiB7XG4gICAgICAgIGlmIChjb21tYW5kLnRvU3RyaW5nKCkuaW5jbHVkZXMoJ2R1IC1zaycpKSB7XG4gICAgICAgICAgb3B0aW1pemF0aW9uU3RlcCsrO1xuICAgICAgICAgIC8vIFNpbXVsYXRlIGJ1bmRsZSBzaXplIG9wdGltaXphdGlvblxuICAgICAgICAgIGNvbnN0IGJhc2VTaXplID0gNTAwO1xuICAgICAgICAgIGNvbnN0IG9wdGltaXphdGlvbiA9IG9wdGltaXphdGlvblN0ZXAgKiAzMDsgLy8gMzBrQiByZWR1Y3Rpb24gcGVyIHN0ZXBcbiAgICAgICAgICByZXR1cm4gTWF0aC5tYXgoMzIwLCBiYXNlU2l6ZSAtIG9wdGltaXphdGlvbikudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgYnVuZGxlU2l6ZXM6IG51bWJlcltdID0gW107XG5cbiAgICAgIC8vIEV4ZWN1dGUgb3B0aW1pemF0aW9uIHBoYXNlc1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA1OyBpKyspIHtcbiAgICAgICAgYXdhaXQgY2FtcGFpZ25Db250cm9sbGVyLmV4ZWN1dGVQaGFzZShwaGFzZSk7XG4gICAgICAgIGNvbnN0IGJ1bmRsZVNpemUgPSBhd2FpdCBwcm9ncmVzc1RyYWNrZXIuZ2V0QnVuZGxlU2l6ZSgpO1xuICAgICAgICBidW5kbGVTaXplcy5wdXNoKGJ1bmRsZVNpemUpO1xuICAgICAgfVxuXG4gICAgICBleHBlY3QoYnVuZGxlU2l6ZXMubGVuZ3RoKS50b0JlKDUpO1xuXG4gICAgICAvLyBTaG91bGQgc2hvdyBkZWNyZWFzaW5nIGJ1bmRsZSBzaXplIChvcHRpbWl6YXRpb24pXG4gICAgICBjb25zdCBmaXJzdFNpemUgPSBidW5kbGVTaXplc1swXTtcbiAgICAgIGNvbnN0IGxhc3RTaXplID0gYnVuZGxlU2l6ZXNbYnVuZGxlU2l6ZXMubGVuZ3RoIC0gMV07XG4gICAgICBleHBlY3QobGFzdFNpemUpLnRvQmVMZXNzVGhhbihmaXJzdFNpemUpO1xuICAgICAgZXhwZWN0KGxhc3RTaXplKS50b0JlTGVzc1RoYW4oNDIwKTsgLy8gU2hvdWxkIGJlIHVuZGVyIHRhcmdldFxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB0cmFjayBidW5kbGUgc2l6ZSBhY3Jvc3MgZGlmZmVyZW50IG9wdGltaXphdGlvbiBzdHJhdGVnaWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgb3B0aW1pemF0aW9uU3RyYXRlZ2llcyA9IFtcbiAgICAgICAgeyBuYW1lOiAnYmFzZWxpbmUnLCBleHBlY3RlZFNpemU6IDQ4MCB9LFxuICAgICAgICB7IG5hbWU6ICdtaW5pZmljYXRpb24nLCBleHBlY3RlZFNpemU6IDQyMCB9LFxuICAgICAgICB7IG5hbWU6ICd0cmVlLXNoYWtpbmcnLCBleHBlY3RlZFNpemU6IDM4MCB9LFxuICAgICAgICB7IG5hbWU6ICdjb2RlLXNwbGl0dGluZycsIGV4cGVjdGVkU2l6ZTogMzQwIH0sXG4gICAgICAgIHsgbmFtZTogJ2NvbXByZXNzaW9uJywgZXhwZWN0ZWRTaXplOiAzMDAgfVxuICAgICAgXTtcblxuICAgICAgY29uc3QgcmVzdWx0czogQXJyYXk8eyBzdHJhdGVneTogc3RyaW5nOyBzaXplOiBudW1iZXI7IHVuZGVyVGFyZ2V0OiBib29sZWFuIH0+ID0gW107XG5cbiAgICAgIGZvciAoY29uc3Qgc3RyYXRlZ3kgb2Ygb3B0aW1pemF0aW9uU3RyYXRlZ2llcykge1xuICAgICAgICBtb2NrRnMuZXhpc3RzU3luYy5tb2NrUmV0dXJuVmFsdWUodHJ1ZSk7XG4gICAgICAgIG1vY2tFeGVjU3luYy5tb2NrSW1wbGVtZW50YXRpb24oKGNvbW1hbmQpID0+IHtcbiAgICAgICAgICBpZiAoY29tbWFuZC50b1N0cmluZygpLmluY2x1ZGVzKCdkdSAtc2snKSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmF0ZWd5LmV4cGVjdGVkU2l6ZS50b1N0cmluZygpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGJ1bmRsZVNpemUgPSBhd2FpdCBwcm9ncmVzc1RyYWNrZXIuZ2V0QnVuZGxlU2l6ZSgpO1xuICAgICAgICByZXN1bHRzLnB1c2goe1xuICAgICAgICAgIHN0cmF0ZWd5OiBzdHJhdGVneS5uYW1lLFxuICAgICAgICAgIHNpemU6IGJ1bmRsZVNpemUsXG4gICAgICAgICAgdW5kZXJUYXJnZXQ6IGJ1bmRsZVNpemUgPCA0MjBcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGV4cGVjdChyZXN1bHRzLmxlbmd0aCkudG9CZSg1KTtcblxuICAgICAgLy8gQmFzZWxpbmUgc2hvdWxkIGV4Y2VlZCB0YXJnZXRcbiAgICAgIGV4cGVjdChyZXN1bHRzWzBdLnVuZGVyVGFyZ2V0KS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXN1bHRzWzBdLnNpemUpLnRvQmUoNDgwKTtcblxuICAgICAgLy8gUHJvZ3Jlc3NpdmUgb3B0aW1pemF0aW9uIHNob3VsZCByZWR1Y2UgYnVuZGxlIHNpemVcbiAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBleHBlY3QocmVzdWx0c1tpXS5zaXplKS50b0JlTGVzc1RoYW4ocmVzdWx0c1tpIC0gMV0uc2l6ZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEZpbmFsIG9wdGltaXphdGlvbnMgc2hvdWxkIGJlIHVuZGVyIHRhcmdldFxuICAgICAgZXhwZWN0KHJlc3VsdHNbcmVzdWx0cy5sZW5ndGggLSAxXS51bmRlclRhcmdldCkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChyZXN1bHRzW3Jlc3VsdHMubGVuZ3RoIC0gMV0uc2l6ZSkudG9CZSgzMDApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnQnVuZGxlIFNpemUgUGVyZm9ybWFuY2UgQmVuY2htYXJrcycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGJlbmNobWFyayBidW5kbGUgYW5hbHlzaXMgcGVyZm9ybWFuY2UnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBhbmFseXNpc1RpbWVzOiBudW1iZXJbXSA9IFtdO1xuXG4gICAgICBtb2NrRnMuZXhpc3RzU3luYy5tb2NrUmV0dXJuVmFsdWUodHJ1ZSk7XG4gICAgICBtb2NrRXhlY1N5bmMubW9ja0ltcGxlbWVudGF0aW9uKChjb21tYW5kKSA9PiB7XG4gICAgICAgIGlmIChjb21tYW5kLnRvU3RyaW5nKCkuaW5jbHVkZXMoJ2R1IC1zaycpKSB7XG4gICAgICAgICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAvLyBTaW11bGF0ZSBidW5kbGUgYW5hbHlzaXMgdGltZVxuICAgICAgICAgIGNvbnN0IGRlbGF5ID0gMjAgKyBNYXRoLnJhbmRvbSgpICogMzA7IC8vIDIwLTUwbXNcbiAgICAgICAgICBjb25zdCBlbmRUaW1lID0gc3RhcnRUaW1lICsgZGVsYXk7XG4gICAgICAgICAgd2hpbGUgKERhdGUubm93KCkgPCBlbmRUaW1lKSB7XG4gICAgICAgICAgICAvLyBCdXN5IHdhaXRcbiAgICAgICAgICB9XG4gICAgICAgICAgYW5hbHlzaXNUaW1lcy5wdXNoKERhdGUubm93KCkgLSBzdGFydFRpbWUpO1xuICAgICAgICAgIHJldHVybiAnNDAwJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9KTtcblxuICAgICAgLy8gUGVyZm9ybSBtdWx0aXBsZSBidW5kbGUgc2l6ZSBhbmFseXNlc1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgICAgIGF3YWl0IHByb2dyZXNzVHJhY2tlci5nZXRCdW5kbGVTaXplKCk7XG4gICAgICB9XG5cbiAgICAgIGV4cGVjdChhbmFseXNpc1RpbWVzLmxlbmd0aCkudG9CZSgxMCk7XG4gICAgICBleHBlY3QoYW5hbHlzaXNUaW1lcy5ldmVyeSh0aW1lID0+IHRpbWUgPiAwKSkudG9CZSh0cnVlKTtcblxuICAgICAgLy8gQXZlcmFnZSBhbmFseXNpcyB0aW1lIHNob3VsZCBiZSByZWFzb25hYmxlXG4gICAgICBjb25zdCBhdmVyYWdlVGltZSA9IGFuYWx5c2lzVGltZXMucmVkdWNlKChzdW0sIHRpbWUpID0+IHN1bSArIHRpbWUsIDApIC8gYW5hbHlzaXNUaW1lcy5sZW5ndGg7XG4gICAgICBleHBlY3QoYXZlcmFnZVRpbWUpLnRvQmVMZXNzVGhhbigxMDApOyAvLyBTaG91bGQgYmUgdW5kZXIgMTAwbXNcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGxhcmdlIGJ1bmRsZSBhbmFseXNpcyBlZmZpY2llbnRseScsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE1vY2sgdmVyeSBsYXJnZSBidW5kbGVcbiAgICAgIG1vY2tGcy5leGlzdHNTeW5jLm1vY2tSZXR1cm5WYWx1ZSh0cnVlKTtcbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrSW1wbGVtZW50YXRpb24oKGNvbW1hbmQpID0+IHtcbiAgICAgICAgaWYgKGNvbW1hbmQudG9TdHJpbmcoKS5pbmNsdWRlcygnZHUgLXNrJykpIHtcbiAgICAgICAgICAvLyBTaW11bGF0ZSBsb25nZXIgYW5hbHlzaXMgdGltZSBmb3IgbGFyZ2UgYnVuZGxlXG4gICAgICAgICAgY29uc3QgZGVsYXkgPSA1MDsgLy8gNTBtcyBmb3IgbGFyZ2UgYnVuZGxlXG4gICAgICAgICAgY29uc3QgZW5kVGltZSA9IERhdGUubm93KCkgKyBkZWxheTtcbiAgICAgICAgICB3aGlsZSAoRGF0ZS5ub3coKSA8IGVuZFRpbWUpIHtcbiAgICAgICAgICAgIC8vIEJ1c3kgd2FpdFxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gJzIwMDAnOyAvLyAyTUIgYnVuZGxlIC0gdmVyeSBsYXJnZVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgY29uc3QgYnVuZGxlU2l6ZSA9IGF3YWl0IHByb2dyZXNzVHJhY2tlci5nZXRCdW5kbGVTaXplKCk7XG4gICAgICBjb25zdCBhbmFseXNpc1RpbWUgPSBEYXRlLm5vdygpIC0gc3RhcnRUaW1lO1xuXG4gICAgICBleHBlY3QoYnVuZGxlU2l6ZSkudG9CZSgyMDAwKTtcbiAgICAgIGV4cGVjdChidW5kbGVTaXplKS50b0JlR3JlYXRlclRoYW4oNDIwKTsgLy8gU2lnbmlmaWNhbnRseSBleGNlZWRzIHRhcmdldFxuICAgICAgZXhwZWN0KGFuYWx5c2lzVGltZSkudG9CZUxlc3NUaGFuKDIwMCk7IC8vIFNob3VsZCBzdGlsbCBiZSByZWFzb25hYmx5IGZhc3RcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgYmVuY2htYXJrIGNvbmN1cnJlbnQgYnVuZGxlIGFuYWx5c2VzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0ZzLmV4aXN0c1N5bmMubW9ja1JldHVyblZhbHVlKHRydWUpO1xuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tJbXBsZW1lbnRhdGlvbigoY29tbWFuZCkgPT4ge1xuICAgICAgICBpZiAoY29tbWFuZC50b1N0cmluZygpLmluY2x1ZGVzKCdkdSAtc2snKSkge1xuICAgICAgICAgIC8vIFNpbXVsYXRlIGNvbmN1cnJlbnQgYW5hbHlzaXNcbiAgICAgICAgICBjb25zdCBkZWxheSA9IDMwICsgTWF0aC5yYW5kb20oKSAqIDIwOyAvLyAzMC01MG1zXG4gICAgICAgICAgY29uc3QgZW5kVGltZSA9IERhdGUubm93KCkgKyBkZWxheTtcbiAgICAgICAgICB3aGlsZSAoRGF0ZS5ub3coKSA8IGVuZFRpbWUpIHtcbiAgICAgICAgICAgIC8vIEJ1c3kgd2FpdFxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gJzQwMCc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFJ1biBjb25jdXJyZW50IGJ1bmRsZSBzaXplIGFuYWx5c2VzXG4gICAgICBjb25zdCBwcm9taXNlcyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDUgfSwgKCkgPT4gXG4gICAgICAgIHByb2dyZXNzVHJhY2tlci5nZXRCdW5kbGVTaXplKClcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICAgICAgY29uc3QgdG90YWxUaW1lID0gRGF0ZS5ub3coKSAtIHN0YXJ0VGltZTtcblxuICAgICAgZXhwZWN0KHJlc3VsdHMubGVuZ3RoKS50b0JlKDUpO1xuICAgICAgZXhwZWN0KHJlc3VsdHMuZXZlcnkoc2l6ZSA9PiBzaXplID09PSA0MDApKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHRvdGFsVGltZSkudG9CZUxlc3NUaGFuKDUwMCk7IC8vIFNob3VsZCBjb21wbGV0ZSBlZmZpY2llbnRseVxuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnQnVuZGxlIFNpemUgTW9uaXRvcmluZyBJbnRlZ3JhdGlvbicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGludGVncmF0ZSBidW5kbGUgc2l6ZSBtb25pdG9yaW5nIHdpdGggY2FtcGFpZ24gZXhlY3V0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcGhhc2UgPSBtb2NrQ29uZmlnLnBoYXNlc1swXTtcbiAgICAgIFxuICAgICAgbW9ja0ZzLmV4aXN0c1N5bmMubW9ja1JldHVyblZhbHVlKHRydWUpO1xuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tJbXBsZW1lbnRhdGlvbigoY29tbWFuZCkgPT4ge1xuICAgICAgICBpZiAoY29tbWFuZC50b1N0cmluZygpLmluY2x1ZGVzKCdkdSAtc2snKSkge1xuICAgICAgICAgIHJldHVybiAnMzkwJzsgLy8gVW5kZXIgdGFyZ2V0XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIE1vY2sgY2FtcGFpZ24gZXhlY3V0aW9uIHdpdGggYnVuZGxlIG1vbml0b3JpbmdcbiAgICAgIGplc3Quc3B5T24oY2FtcGFpZ25Db250cm9sbGVyIGFzIGFueSwgJ2dldEN1cnJlbnRNZXRyaWNzJykubW9ja0ltcGxlbWVudGF0aW9uKGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgYnVuZGxlU2l6ZSA9IGF3YWl0IHByb2dyZXNzVHJhY2tlci5nZXRCdW5kbGVTaXplKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZVNjcmlwdEVycm9yczogeyBjdXJyZW50OiA4NiwgdGFyZ2V0OiAwLCByZWR1Y3Rpb246IDAsIHBlcmNlbnRhZ2U6IDAgfSxcbiAgICAgICAgICBsaW50aW5nV2FybmluZ3M6IHsgY3VycmVudDogNDUwNiwgdGFyZ2V0OiAwLCByZWR1Y3Rpb246IDAsIHBlcmNlbnRhZ2U6IDAgfSxcbiAgICAgICAgICBidWlsZFBlcmZvcm1hbmNlOiB7IGN1cnJlbnRUaW1lOiA4LjUsIHRhcmdldFRpbWU6IDEwLCBjYWNoZUhpdFJhdGU6IDAuOCwgbWVtb3J5VXNhZ2U6IDQ1IH0sXG4gICAgICAgICAgZW50ZXJwcmlzZVN5c3RlbXM6IHsgY3VycmVudDogMCwgdGFyZ2V0OiAyMDAsIHRyYW5zZm9ybWVkRXhwb3J0czogMCB9LFxuICAgICAgICAgIGJ1bmRsZVNpemU6IGJ1bmRsZVNpemUgLy8gQWRkaXRpb25hbCBidW5kbGUgc2l6ZSB0cmFja2luZ1xuICAgICAgICB9O1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNhbXBhaWduQ29udHJvbGxlci5leGVjdXRlUGhhc2UocGhhc2UpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICBcbiAgICAgIC8vIFZlcmlmeSBidW5kbGUgc2l6ZSBpcyBtb25pdG9yZWRcbiAgICAgIGNvbnN0IGJ1bmRsZVNpemUgPSBhd2FpdCBwcm9ncmVzc1RyYWNrZXIuZ2V0QnVuZGxlU2l6ZSgpO1xuICAgICAgZXhwZWN0KGJ1bmRsZVNpemUpLnRvQmUoMzkwKTtcbiAgICAgIGV4cGVjdChidW5kbGVTaXplKS50b0JlTGVzc1RoYW4oNDIwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgYWxlcnQgb24gYnVuZGxlIHNpemUgdGhyZXNob2xkIHZpb2xhdGlvbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB0aHJlc2hvbGRzID0ge1xuICAgICAgICB3YXJuaW5nOiA0MDAsICAvLyA0MDBrQiB3YXJuaW5nIHRocmVzaG9sZFxuICAgICAgICBjcml0aWNhbDogNDIwICAvLyA0MjBrQiBjcml0aWNhbCB0aHJlc2hvbGRcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHRlc3RTaXplcyA9IFszNTAsIDQxMCwgNDUwXTsgLy8gVW5kZXIgd2FybmluZywgb3ZlciB3YXJuaW5nLCBvdmVyIGNyaXRpY2FsXG4gICAgICBjb25zdCBhbGVydHM6IEFycmF5PHsgc2l6ZTogbnVtYmVyOyBsZXZlbDogc3RyaW5nIH0+ID0gW107XG5cbiAgICAgIGZvciAoY29uc3QgdGVzdFNpemUgb2YgdGVzdFNpemVzKSB7XG4gICAgICAgIG1vY2tGcy5leGlzdHNTeW5jLm1vY2tSZXR1cm5WYWx1ZSh0cnVlKTtcbiAgICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tJbXBsZW1lbnRhdGlvbigoY29tbWFuZCkgPT4ge1xuICAgICAgICAgIGlmIChjb21tYW5kLnRvU3RyaW5nKCkuaW5jbHVkZXMoJ2R1IC1zaycpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGVzdFNpemUudG9TdHJpbmcoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBidW5kbGVTaXplID0gYXdhaXQgcHJvZ3Jlc3NUcmFja2VyLmdldEJ1bmRsZVNpemUoKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChidW5kbGVTaXplID4gdGhyZXNob2xkcy5jcml0aWNhbCkge1xuICAgICAgICAgIGFsZXJ0cy5wdXNoKHsgc2l6ZTogYnVuZGxlU2l6ZSwgbGV2ZWw6ICdjcml0aWNhbCcgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoYnVuZGxlU2l6ZSA+IHRocmVzaG9sZHMud2FybmluZykge1xuICAgICAgICAgIGFsZXJ0cy5wdXNoKHsgc2l6ZTogYnVuZGxlU2l6ZSwgbGV2ZWw6ICd3YXJuaW5nJyB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBleHBlY3QoYWxlcnRzLmxlbmd0aCkudG9CZSgyKTsgLy8gU2hvdWxkIGhhdmUgd2FybmluZyBhbmQgY3JpdGljYWwgYWxlcnRzXG4gICAgICBleHBlY3QoYWxlcnRzWzBdLmxldmVsKS50b0JlKCd3YXJuaW5nJyk7XG4gICAgICBleHBlY3QoYWxlcnRzWzBdLnNpemUpLnRvQmUoNDEwKTtcbiAgICAgIGV4cGVjdChhbGVydHNbMV0ubGV2ZWwpLnRvQmUoJ2NyaXRpY2FsJyk7XG4gICAgICBleHBlY3QoYWxlcnRzWzFdLnNpemUpLnRvQmUoNDUwKTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwidmVyc2lvbiI6M30=