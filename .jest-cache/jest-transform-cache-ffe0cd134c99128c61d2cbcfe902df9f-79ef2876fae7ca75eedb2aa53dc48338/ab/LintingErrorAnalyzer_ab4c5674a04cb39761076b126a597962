c1e6b1b570bd9c85b9e16a27f1479781
"use strict";
/**
 * LintingErrorAnalyzer - Automated linting error analysis and categorization system
 *
 * This class implements comprehensive error analysis, categorization, and resolution
 * strategy generation for ESLint issues across the WhatToEatNext codebase.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LintingErrorAnalyzer = void 0;
const child_process_1 = require("child_process");
const path = __importStar(require("path"));
const LoggingService_1 = require("@/services/LoggingService");
/**
 * Main LintingErrorAnalyzer class
 */
class LintingErrorAnalyzer {
    workspaceRoot;
    eslintConfigPath;
    domainPatterns;
    constructor(workspaceRoot = process.cwd()) {
        this.workspaceRoot = workspaceRoot;
        this.eslintConfigPath = path.join(workspaceRoot, 'eslint.config.cjs');
        // Define domain-specific file patterns
        this.domainPatterns = {
            astrological: [
                /\/calculations\//,
                /\/data\/planets\//,
                /reliableAstronomy/,
                /planetaryConsistencyCheck/,
                /Astrological/,
                /Alchemical/,
            ],
            campaign: [/\/services\/campaign\//, /\/types\/campaign/, /Campaign/, /Progress/],
            test: [/\.test\./, /\.spec\./, /__tests__/],
            script: [/\/scripts\//, /\.config\./, /\.setup\./],
        };
    }
    /**
     * Analyze all linting issues in the codebase
     */
    async analyzeAllIssues() {
        void LoggingService_1.log.info('🔍 Starting comprehensive linting error analysis...');
        try {
            // Run ESLint to get all issues
            const eslintOutput = await this.runESLint();
            const rawIssues = this.parseESLintOutput(eslintOutput);
            void LoggingService_1.log.info(`📊 Found ${rawIssues.length} total linting issues`);
            // Categorize and analyze each issue
            const analyzedIssues = rawIssues.map(issue => this.analyzeIssue(issue));
            // Categorize issues
            const categorized = this.categorizeIssues(analyzedIssues);
            void LoggingService_1.log.info('✅ Linting error analysis complete');
            void this.logAnalysisSummary(categorized);
            return categorized;
        }
        catch (error) {
            console.error('❌ Error during linting analysis:', error);
            throw error;
        }
    }
    /**
     * Generate resolution strategies for categorized errors
     */
    generateResolutionPlan(categorizedErrors) {
        void LoggingService_1.log.info('🎯 Generating resolution plan...');
        const phases = [];
        let totalTime = 0;
        // Phase 1: Auto-fixable issues (low risk)
        if (categorizedErrors.autoFixable.length > 0) {
            const autoFixPhase = {
                id: 'auto-fix',
                name: 'Automated Fixes',
                issues: categorizedErrors.autoFixable,
                estimatedTime: Math.ceil(categorizedErrors.autoFixable.length * 0.1),
                riskLevel: 'low',
                dependencies: [],
            };
            void phases.push(autoFixPhase);
            totalTime += autoFixPhase.estimatedTime;
        }
        // Phase 2: Import and style issues (medium risk)
        const importStyleIssues = [
            ...(categorizedErrors.byCategory['import'] || []),
            ...(categorizedErrors.byCategory['style'] || []),
        ].filter(issue => issue.resolutionStrategy.type !== 'auto-fix');
        if (importStyleIssues.length > 0) {
            const importStylePhase = {
                id: 'import-style',
                name: 'Import and Style Fixes',
                issues: importStyleIssues,
                estimatedTime: Math.ceil(importStyleIssues.length * 0.5),
                riskLevel: 'medium',
                dependencies: ['auto-fix'],
            };
            void phases.push(importStylePhase);
            totalTime += importStylePhase.estimatedTime;
        }
        // Phase 3: TypeScript issues (high risk)
        const typescriptIssues = categorizedErrors.byCategory['typescript'] || [];
        if (typescriptIssues.length > 0) {
            const typescriptPhase = {
                id: 'typescript',
                name: 'TypeScript Fixes',
                issues: typescriptIssues,
                estimatedTime: Math.ceil(typescriptIssues.length * 2),
                riskLevel: 'high',
                dependencies: ['auto-fix', 'import-style'],
            };
            void phases.push(typescriptPhase);
            totalTime += typescriptPhase.estimatedTime;
        }
        // Phase 4: React issues (medium risk)
        const reactIssues = categorizedErrors.byCategory['react'] || [];
        if (reactIssues.length > 0) {
            const reactPhase = {
                id: 'react',
                name: 'React Fixes',
                issues: reactIssues,
                estimatedTime: Math.ceil(reactIssues.length * 1),
                riskLevel: 'medium',
                dependencies: ['typescript'],
            };
            void phases.push(reactPhase);
            totalTime += reactPhase.estimatedTime;
        }
        // Phase 5: Domain-specific issues (varies by context)
        const domainIssues = categorizedErrors.byCategory['domain'] || [];
        if (domainIssues.length > 0) {
            const domainPhase = {
                id: 'domain',
                name: 'Domain-Specific Fixes',
                issues: domainIssues,
                estimatedTime: Math.ceil(domainIssues.length * 3),
                riskLevel: 'high',
                dependencies: ['typescript', 'react'],
            };
            void phases.push(domainPhase);
            totalTime += domainPhase.estimatedTime;
        }
        // Calculate risk assessment
        const riskAssessment = this.assessResolutionRisk(categorizedErrors, phases);
        // Calculate success probability based on issue types and complexity
        const successProbability = this.calculateSuccessProbability(categorizedErrors);
        const plan = {
            phases,
            totalEstimatedTime: totalTime,
            riskAssessment,
            successProbability,
        };
        void LoggingService_1.log.info(`📋 Resolution plan generated: ${phases.length} phases, ${totalTime} minutes estimated`);
        return plan;
    }
    /**
     * Run ESLint and capture output
     */
    async runESLint() {
        try {
            const command = `npx eslint --config ${this.eslintConfigPath} src --format json --max-warnings=10000`;
            const output = (0, child_process_1.execSync)(command, {
                encoding: 'utf8',
                cwd: this.workspaceRoot,
                maxBuffer: 10 * 1024 * 1024, // 10MB buffer
            });
            return output;
        }
        catch (error) {
            // ESLint returns non-zero exit code when issues are found
            const err = error;
            if (err.stdout) {
                return err.stdout;
            }
            throw error;
        }
    }
    /**
     * Parse ESLint JSON output into raw issues
     */
    parseESLintOutput(output) {
        try {
            const results = JSON.parse(output);
            const issues = [];
            for (const fileResult of results) {
                for (const message of fileResult.messages) {
                    issues.push({
                        ...message,
                        filePath: fileResult.filePath,
                    });
                }
            }
            return issues;
        }
        catch (error) {
            console.error('Failed to parse ESLint output:', error);
            return [];
        }
    }
    /**
     * Analyze individual issue and determine resolution strategy
     */
    analyzeIssue(rawIssue) {
        const file = String(rawIssue.filePath || '')
            .replace(this.workspaceRoot, '')
            .replace(/^\//, '');
        const domainContext = this.detectDomainContext(file);
        const category = this.categorizeIssue(rawIssue, domainContext);
        const resolutionStrategy = this.determineResolutionStrategy(rawIssue, category, domainContext);
        const issue = {
            id: `${file}:${String(rawIssue.line)}:${String(rawIssue.column)}:${String(rawIssue.ruleId)}`,
            file,
            line: Number(rawIssue.line || 0),
            column: Number(rawIssue.column || 0),
            rule: String(rawIssue.ruleId || 'unknown'),
            message: String(rawIssue.message || ''),
            severity: Number(rawIssue.severity) === 2 ? 'error' : 'warning',
            category,
            autoFixable: Boolean(rawIssue.fix),
            domainContext,
            resolutionStrategy,
        };
        return issue;
    }
    /**
     * Detect domain context for a file
     */
    detectDomainContext(filePath) {
        const context = {
            isAstrologicalCalculation: false,
            isCampaignSystem: false,
            isTestFile: false,
            isScriptFile: false,
            requiresSpecialHandling: false,
        };
        // Check astrological patterns
        context.isAstrologicalCalculation = this.domainPatterns.astrological.some(pattern => pattern.test(filePath));
        // Check campaign system patterns
        context.isCampaignSystem = this.domainPatterns.campaign.some(pattern => pattern.test(filePath));
        // Check test file patterns
        context.isTestFile = this.domainPatterns.test.some(pattern => pattern.test(filePath));
        // Check script file patterns
        context.isScriptFile = this.domainPatterns.script.some(pattern => pattern.test(filePath));
        // Determine if special handling is required
        context.requiresSpecialHandling =
            context.isAstrologicalCalculation ||
                context.isCampaignSystem ||
                context.isTestFile ||
                context.isScriptFile;
        return context;
    }
    /**
     * Categorize individual issue
     */
    categorizeIssue(rawIssue, domainContext) {
        const rule = String(rawIssue.ruleId || '');
        // Import-related issues
        if (rule.startsWith('import/')) {
            return {
                primary: 'import',
                secondary: rule.replace('import/', ''),
                priority: 2,
            };
        }
        // TypeScript-related issues
        if (rule.startsWith('@typescript-eslint/')) {
            return {
                primary: 'typescript',
                secondary: rule.replace('@typescript-eslint/', ''),
                priority: rule.includes('no-explicit-any') ? 3 : 1,
            };
        }
        // React-related issues
        if (rule.startsWith('react') || rule.startsWith('react-hooks')) {
            return {
                primary: 'react',
                secondary: rule.replace(/^react(-hooks)?\//, ''),
                priority: rule.includes('exhaustive-deps') ? 2 : 1,
            };
        }
        // Domain-specific issues
        if (domainContext.requiresSpecialHandling) {
            return {
                primary: 'domain',
                secondary: domainContext.isAstrologicalCalculation
                    ? 'astrological'
                    : domainContext.isCampaignSystem
                        ? 'campaign'
                        : domainContext.isTestFile
                            ? 'test'
                            : 'script',
                priority: 4,
            };
        }
        // Style and formatting issues
        return {
            primary: 'style',
            secondary: rule,
            priority: 4,
        };
    }
    /**
     * Determine resolution strategy for an issue
     */
    determineResolutionStrategy(rawIssue, category, domainContext) {
        const rule = String(rawIssue.ruleId || '');
        const hasAutoFix = Boolean(rawIssue.fix);
        // Auto-fixable issues with low risk
        if (hasAutoFix && this.isLowRiskAutoFix(rule)) {
            return {
                type: 'auto-fix',
                confidence: 0.9,
                riskLevel: 'low',
                requiredValidation: [
                    { type: 'build', description: 'Verify build still passes', automated: true },
                ],
                estimatedEffort: 0.1,
                dependencies: [],
            };
        }
        // Import issues - usually safe to auto-fix
        if (category.primary === 'import') {
            return {
                type: hasAutoFix ? 'auto-fix' : 'manual-review',
                confidence: hasAutoFix ? 0.8 : 0.6,
                riskLevel: 'medium',
                requiredValidation: [
                    { type: 'build', description: 'Verify imports resolve correctly', automated: true },
                    { type: 'type-check', description: 'Verify TypeScript compilation', automated: true },
                ],
                estimatedEffort: hasAutoFix ? 0.2 : 1.0,
                dependencies: [],
            };
        }
        // TypeScript issues - require careful handling
        if (category.primary === 'typescript') {
            const isExplicitAny = rule.includes('no-explicit-any');
            return {
                type: isExplicitAny ? 'manual-review' : 'auto-fix',
                confidence: isExplicitAny ? 0.4 : 0.7,
                riskLevel: isExplicitAny ? 'high' : 'medium',
                requiredValidation: [
                    { type: 'type-check', description: 'Verify TypeScript compilation', automated: true },
                    { type: 'test', description: 'Run relevant tests', automated: true },
                ],
                estimatedEffort: isExplicitAny ? 5.0 : 1.0,
                dependencies: [],
            };
        }
        // React issues - moderate risk
        if (category.primary === 'react') {
            const isExhaustiveDeps = rule.includes('exhaustive-deps');
            return {
                type: isExhaustiveDeps ? 'manual-review' : 'auto-fix',
                confidence: isExhaustiveDeps ? 0.5 : 0.8,
                riskLevel: isExhaustiveDeps ? 'high' : 'medium',
                requiredValidation: [
                    { type: 'build', description: 'Verify React components render', automated: true },
                    { type: 'test', description: 'Run component tests', automated: true },
                ],
                estimatedEffort: isExhaustiveDeps ? 3.0 : 0.5,
                dependencies: [],
            };
        }
        // Domain-specific issues - require special handling
        if (domainContext.requiresSpecialHandling) {
            return {
                type: 'manual-review',
                confidence: 0.3,
                riskLevel: 'high',
                requiredValidation: [
                    { type: 'manual-review', description: 'Domain expert review required', automated: false },
                    { type: 'test', description: 'Run domain-specific tests', automated: true },
                ],
                estimatedEffort: 10.0,
                dependencies: [],
            };
        }
        // Default strategy for other issues
        return {
            type: hasAutoFix ? 'auto-fix' : 'rule-adjustment',
            confidence: 0.6,
            riskLevel: 'low',
            requiredValidation: [{ type: 'build', description: 'Verify build passes', automated: true }],
            estimatedEffort: hasAutoFix ? 0.5 : 2.0,
            dependencies: [],
        };
    }
    /**
     * Check if a rule is safe for auto-fixing
     */
    isLowRiskAutoFix(rule) {
        const lowRiskRules = [
            'import/order',
            'import/newline-after-import',
            'semi',
            'quotes',
            'comma-dangle',
            'trailing-comma',
            'indent',
            'no-trailing-spaces',
            'eol-last',
        ];
        return lowRiskRules.some(lowRiskRule => rule.includes(lowRiskRule));
    }
    /**
     * Categorize all analyzed issues
     */
    categorizeIssues(issues) {
        const categorized = {
            total: issues.length,
            errors: issues.filter(i => i.severity === 'error').length,
            warnings: issues.filter(i => i.severity === 'warning').length,
            byCategory: {},
            byPriority: {},
            byFile: {},
            autoFixable: issues.filter(i => i.autoFixable),
            requiresManualReview: issues.filter(i => i.resolutionStrategy.type === 'manual-review'),
        };
        // Group by category
        for (const issue of issues) {
            const categoryKey = issue.category.primary;
            if (!categorized.byCategory[categoryKey]) {
                categorized.byCategory[categoryKey] = [];
            }
            categorized.byCategory[categoryKey].push(issue);
        }
        // Group by priority
        for (const issue of issues) {
            const priority = issue.category.priority;
            if (!categorized.byPriority[priority]) {
                categorized.byPriority[priority] = [];
            }
            categorized.byPriority[priority].push(issue);
        }
        // Group by file
        for (const issue of issues) {
            if (!categorized.byFile[issue.file]) {
                categorized.byFile[issue.file] = [];
            }
            categorized.byFile[issue.file].push(issue);
        }
        return categorized;
    }
    /**
     * Assess risk of resolution plan
     */
    assessResolutionRisk(categorized, phases) {
        const factors = [];
        const mitigations = [];
        // Check for high-risk factors
        if (categorized.byCategory['typescript'].length > 50) {
            void factors.push('High number of TypeScript issues');
            mitigations.push('Implement gradual TypeScript fixes with validation');
        }
        if (categorized.byCategory['domain'].length > 0) {
            void factors.push('Domain-specific issues require expert knowledge');
            mitigations.push('Manual review by domain experts required');
        }
        if (categorized.requiresManualReview.length > categorized.autoFixable.length) {
            void factors.push('More manual fixes than automated fixes');
            mitigations.push('Prioritize automated fixes first to reduce workload');
        }
        // Determine overall risk
        const highRiskPhases = phases.filter(p => p.riskLevel === 'high').length;
        const overall = highRiskPhases > 2 ? 'high' : highRiskPhases > 0 ? 'medium' : 'low';
        return { overall, factors, mitigations };
    }
    /**
     * Calculate success probability based on issue complexity
     */
    calculateSuccessProbability(categorized) {
        let baseScore = 0.8; // Start with 80% confidence
        // Reduce confidence for complex issues
        const complexIssues = categorized.requiresManualReview.length;
        const totalIssues = categorized.total;
        if (totalIssues > 0) {
            const complexityRatio = complexIssues / totalIssues;
            baseScore -= complexityRatio * 0.3; // Reduce up to 30% for complexity
        }
        // Increase confidence for auto-fixable issues
        const autoFixRatio = categorized.autoFixable.length / totalIssues;
        baseScore += autoFixRatio * 0.1; // Increase up to 10% for auto-fixes
        return Math.max(0.3, Math.min(0.95, baseScore)); // Clamp between 30% and 95%
    }
    /**
     * Log analysis summary
     */
    logAnalysisSummary(categorized) {
        void LoggingService_1.log.info('\n📊 LINTING ANALYSIS SUMMARY');
        LoggingService_1.log.info('============================');
        void LoggingService_1.log.info(`Total Issues: ${categorized.total}`);
        void LoggingService_1.log.info(`Errors: ${categorized.errors}`);
        void LoggingService_1.log.info(`Warnings: ${categorized.warnings}`);
        void LoggingService_1.log.info(`Auto-fixable: ${categorized.autoFixable.length}`);
        void LoggingService_1.log.info(`Manual Review Required: ${categorized.requiresManualReview.length}`);
        void LoggingService_1.log.info('\n📋 BY CATEGORY:');
        Object.entries(categorized.byCategory).forEach(([category, issues]) => {
            void LoggingService_1.log.info(`  ${category}: ${issues.length} issues`);
        });
        void LoggingService_1.log.info('\n🎯 BY PRIORITY:');
        Object.entries(categorized.byPriority).forEach(([priority, issues]) => {
            LoggingService_1.log.info(`  Priority ${priority}: ${issues.length} issues`);
        });
        LoggingService_1.log.info('============================\n');
    }
}
exports.LintingErrorAnalyzer = LintingErrorAnalyzer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,