{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/linting/__tests__/LintingProgressTracker.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/linting/__tests__/LintingProgressTracker.test.ts"],"sourcesContent":["/**\n * Test suite for LintingProgressTracker\n * \n * Tests the linting progress tracking functionality including metrics collection,\n * progress reporting, and campaign integration.\n */\n\nimport { LintingProgressTracker, LintingMetrics, LintingProgressReport } from '../LintingProgressTracker';\nimport { execSync } from 'child_process';\nimport { writeFileSync, readFileSync, existsSync, unlinkSync } from 'fs';\n\n// Mock dependencies\njest.mock('child_process');\njest.mock('fs');\njest.mock('@/utils/logger', () => ({\n  logger: {\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n    debug: jest.fn()\n  }\n}));\n\nconst mockExecSync = execSync as jest.MockedFunction<typeof execSync>;\nconst mockWriteFileSync = writeFileSync as jest.MockedFunction<typeof writeFileSync>;\nconst mockReadFileSync = readFileSync as jest.MockedFunction<typeof readFileSync>;\nconst mockExistsSync = existsSync as jest.MockedFunction<typeof existsSync>;\n\ndescribe('LintingProgressTracker', () => {\n  let tracker: LintingProgressTracker;\n  \n  beforeEach(() => {\n    tracker = new LintingProgressTracker();\n    jest.clearAllMocks();\n  });\n\n  describe('collectMetrics', () => {\n    test('should collect and parse linting metrics successfully', async () => {\n      const mockLintOutput = JSON.stringify([\n        {\n          filePath: '/test/file1.ts',\n          messages: [\n            { ruleId: 'no-unused-vars', severity: 1, fix: null },\n            { ruleId: 'no-console', severity: 2, fix: { range: [0, 10], text: '' } }\n          ]\n        },\n        {\n          filePath: '/test/file2.ts',\n          messages: [\n            { ruleId: 'prefer-const', severity: 1, fix: { range: [0, 5], text: 'const' } }\n          ]\n        }\n      ]);\n\n      mockExecSync.mockReturnValue(mockLintOutput);\n\n      const metrics = await tracker.collectMetrics();\n\n      expect(metrics).toMatchObject({\n        totalIssues: 3,\n        errors: 1,\n        warnings: 2,\n        filesCovered: 2,\n        fixableIssues: 2,\n        errorsByCategory: {\n          'no-console': 1\n        },\n        warningsByCategory: {\n          'no-unused-vars': 1,\n          'prefer-const': 1\n        }\n      });\n\n      expect(metrics.timestamp).toBeInstanceOf(Date);\n      expect(metrics.performanceMetrics).toBeDefined();\n      expect(mockWriteFileSync).toHaveBeenCalled();\n    });\n\n    test('should handle ESLint execution errors gracefully', async () => {\n      const mockError = new Error('ESLint failed') as any;\n      mockError.stdout = JSON.stringify([]);\n      mockExecSync.mockImplementation(() => {\n        throw mockError;\n      });\n\n      const metrics = await tracker.collectMetrics();\n\n      expect(metrics.totalIssues).toBe(0);\n      expect(metrics.errors).toBe(0);\n      expect(metrics.warnings).toBe(0);\n    });\n\n    test('should handle invalid JSON output', async () => {\n      mockExecSync.mockReturnValue('invalid json');\n\n      await expect(tracker.collectMetrics()).rejects.toThrow();\n    });\n  });\n\n  describe('generateProgressReport', () => {\n    test('should generate comprehensive progress report', async () => {\n      const mockCurrentMetrics: LintingMetrics = {\n        timestamp: new Date(),\n        totalIssues: 50,\n        errors: 5,\n        warnings: 45,\n        errorsByCategory: { 'no-console': 3, 'no-unused-vars': 2 },\n        warningsByCategory: { 'prefer-const': 25, 'no-explicit-any': 20 },\n        filesCovered: 100,\n        fixableIssues: 30,\n        performanceMetrics: {\n          executionTime: 5000,\n          memoryUsage: 256,\n          cacheHitRate: 0.8\n        }\n      };\n\n      const mockPreviousMetrics: LintingMetrics = {\n        ...mockCurrentMetrics,\n        totalIssues: 80,\n        errors: 15,\n        warnings: 65\n      };\n\n      // Mock the collectMetrics method\n      jest.spyOn(tracker, 'collectMetrics').mockResolvedValue(mockCurrentMetrics);\n      \n      // Mock file system calls for previous metrics\n      mockExistsSync.mockReturnValue(true);\n      mockReadFileSync.mockReturnValue(JSON.stringify(mockPreviousMetrics));\n\n      const report = await tracker.generateProgressReport();\n\n      expect(report.currentMetrics).toEqual(mockCurrentMetrics);\n      expect(report.previousMetrics).toEqual(mockPreviousMetrics);\n      expect(report.improvement).toEqual({\n        totalIssuesReduced: 30,\n        errorsReduced: 10,\n        warningsReduced: 20,\n        percentageImprovement: 37.5\n      });\n      expect(report.qualityGates).toBeDefined();\n      expect(report.trends).toBeDefined();\n    });\n\n    test('should handle missing previous metrics', async () => {\n      const mockCurrentMetrics: LintingMetrics = {\n        timestamp: new Date(),\n        totalIssues: 50,\n        errors: 5,\n        warnings: 45,\n        errorsByCategory: {},\n        warningsByCategory: {},\n        filesCovered: 100,\n        fixableIssues: 30,\n        performanceMetrics: {\n          executionTime: 5000,\n          memoryUsage: 256,\n          cacheHitRate: 0.8\n        }\n      };\n\n      jest.spyOn(tracker, 'collectMetrics').mockResolvedValue(mockCurrentMetrics);\n      mockExistsSync.mockReturnValue(false);\n\n      const report = await tracker.generateProgressReport();\n\n      expect(report.previousMetrics).toBeUndefined();\n      expect(report.improvement).toEqual({\n        totalIssuesReduced: 0,\n        errorsReduced: 0,\n        warningsReduced: 0,\n        percentageImprovement: 0\n      });\n    });\n  });\n\n  describe('integrateCampaignProgress', () => {\n    test('should integrate with campaign system successfully', async () => {\n      const campaignData = {\n        campaignId: 'test-campaign',\n        phase: 'phase-1',\n        targetReduction: 100,\n        currentProgress: 50,\n        estimatedCompletion: new Date(),\n        safetyProtocols: ['backup', 'validate']\n      };\n\n      const mockReport: LintingProgressReport = {\n        currentMetrics: {\n          timestamp: new Date(),\n          totalIssues: 25,\n          errors: 2,\n          warnings: 23,\n          errorsByCategory: {},\n          warningsByCategory: {},\n          filesCovered: 50,\n          fixableIssues: 15,\n          performanceMetrics: {\n            executionTime: 3000,\n            memoryUsage: 128,\n            cacheHitRate: 0.9\n          }\n        },\n        improvement: {\n          totalIssuesReduced: 25,\n          errorsReduced: 8,\n          warningsReduced: 17,\n          percentageImprovement: 50\n        },\n        trends: {\n          last24Hours: 10,\n          last7Days: 20,\n          last30Days: 30\n        },\n        qualityGates: {\n          zeroErrors: false,\n          warningsUnderThreshold: true,\n          performanceAcceptable: true\n        }\n      };\n\n      jest.spyOn(tracker, 'generateProgressReport').mockResolvedValue(mockReport);\n\n      await tracker.integrateCampaignProgress(campaignData);\n\n      expect(mockWriteFileSync).toHaveBeenCalledWith(\n        expect.stringContaining('campaign-integration.json'),\n        expect.stringContaining(campaignData.campaignId)\n      );\n    });\n  });\n\n  describe('createQualityGates', () => {\n    test('should evaluate quality gates correctly', () => {\n      const mockMetrics: LintingMetrics = {\n        timestamp: new Date(),\n        totalIssues: 10,\n        errors: 0,\n        warnings: 10,\n        errorsByCategory: {},\n        warningsByCategory: {},\n        filesCovered: 50,\n        fixableIssues: 5,\n        performanceMetrics: {\n          executionTime: 30000,\n          memoryUsage: 256,\n          cacheHitRate: 0.8\n        }\n      };\n\n      // Mock getLatestMetrics\n      jest.spyOn(tracker as any, 'getLatestMetrics').mockReturnValue(mockMetrics);\n\n      const thresholds = {\n        maxErrors: 0,\n        maxWarnings: 50,\n        maxExecutionTime: 60000\n      };\n\n      const result = tracker.createQualityGates(thresholds);\n\n      expect(result).toBe(true);\n    });\n\n    test('should fail quality gates when thresholds exceeded', () => {\n      const mockMetrics: LintingMetrics = {\n        timestamp: new Date(),\n        totalIssues: 100,\n        errors: 5,\n        warnings: 95,\n        errorsByCategory: {},\n        warningsByCategory: {},\n        filesCovered: 50,\n        fixableIssues: 20,\n        performanceMetrics: {\n          executionTime: 90000,\n          memoryUsage: 512,\n          cacheHitRate: 0.6\n        }\n      };\n\n      jest.spyOn(tracker as any, 'getLatestMetrics').mockReturnValue(mockMetrics);\n\n      const thresholds = {\n        maxErrors: 0,\n        maxWarnings: 50,\n        maxExecutionTime: 60000\n      };\n\n      const result = tracker.createQualityGates(thresholds);\n\n      expect(result).toBe(false);\n    });\n\n    test('should handle missing metrics gracefully', () => {\n      jest.spyOn(tracker as any, 'getLatestMetrics').mockReturnValue(null);\n\n      const thresholds = {\n        maxErrors: 0,\n        maxWarnings: 50,\n        maxExecutionTime: 60000\n      };\n\n      const result = tracker.createQualityGates(thresholds);\n\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('private methods', () => {\n    test('should parse linting output correctly', () => {\n      const mockOutput = JSON.stringify([\n        {\n          filePath: '/test/file.ts',\n          messages: [\n            { ruleId: 'no-unused-vars', severity: 1, fix: null },\n            { ruleId: 'no-console', severity: 2, fix: { range: [0, 10], text: '' } },\n            { ruleId: null, severity: 1, fix: null } // Test unknown rule\n          ]\n        }\n      ]);\n\n      const result = (tracker as any).parseLintingOutput(mockOutput);\n\n      expect(result).toEqual({\n        totalIssues: 3,\n        errors: 1,\n        warnings: 2,\n        filesCovered: 1,\n        fixableIssues: 1,\n        errorsByCategory: {\n          'no-console': 1\n        },\n        warningsByCategory: {\n          'no-unused-vars': 1,\n          'unknown': 1\n        }\n      });\n    });\n\n    test('should calculate improvement metrics correctly', () => {\n      const current: LintingMetrics = {\n        timestamp: new Date(),\n        totalIssues: 50,\n        errors: 5,\n        warnings: 45,\n        errorsByCategory: {},\n        warningsByCategory: {},\n        filesCovered: 100,\n        fixableIssues: 25,\n        performanceMetrics: {\n          executionTime: 5000,\n          memoryUsage: 256,\n          cacheHitRate: 0.8\n        }\n      };\n\n      const previous: LintingMetrics = {\n        ...current,\n        totalIssues: 100,\n        errors: 20,\n        warnings: 80\n      };\n\n      const improvement = (tracker as any).calculateImprovement(current, previous);\n\n      expect(improvement).toEqual({\n        totalIssuesReduced: 50,\n        errorsReduced: 15,\n        warningsReduced: 35,\n        percentageImprovement: 50\n      });\n    });\n\n    test('should handle improvement calculation with no previous metrics', () => {\n      const current: LintingMetrics = {\n        timestamp: new Date(),\n        totalIssues: 50,\n        errors: 5,\n        warnings: 45,\n        errorsByCategory: {},\n        warningsByCategory: {},\n        filesCovered: 100,\n        fixableIssues: 25,\n        performanceMetrics: {\n          executionTime: 5000,\n          memoryUsage: 256,\n          cacheHitRate: 0.8\n        }\n      };\n\n      const improvement = (tracker as any).calculateImprovement(current, undefined);\n\n      expect(improvement).toEqual({\n        totalIssuesReduced: 0,\n        errorsReduced: 0,\n        warningsReduced: 0,\n        percentageImprovement: 0\n      });\n    });\n\n    test('should evaluate quality gates correctly', () => {\n      const metrics: LintingMetrics = {\n        timestamp: new Date(),\n        totalIssues: 50,\n        errors: 0,\n        warnings: 50,\n        errorsByCategory: {},\n        warningsByCategory: {},\n        filesCovered: 100,\n        fixableIssues: 25,\n        performanceMetrics: {\n          executionTime: 30000,\n          memoryUsage: 256,\n          cacheHitRate: 0.8\n        }\n      };\n\n      const gates = (tracker as any).evaluateQualityGates(metrics);\n\n      expect(gates).toEqual({\n        zeroErrors: true,\n        warningsUnderThreshold: true,\n        performanceAcceptable: true\n      });\n    });\n  });\n});"],"version":3}