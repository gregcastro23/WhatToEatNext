{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/calculations/culinary/cuisineRecommendations.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/calculations/culinary/cuisineRecommendations.ts"],"sourcesContent":["/**\n * Cuisine Recommendations Module\n * \n * Generates cuisine recommendations based on alchemical and planetary influences\n */\n\n\n\nimport type { ElementalProperties } from \"@/types/alchemy\";\nimport { Element } from \"@/types/alchemy\";\n\n/**\n * Cuisine recommendation result\n */\nexport interface CuisineRecommendation {\n  cuisine: string;\n  compatibility: number;\n  reasons: string[];\n  elementalAlignment: ElementalProperties;\n  suggestedDishes: string[];\n}\n\n/**\n * Planetary cuisine associations\n */\nconst PLANETARY_CUISINES = {\n  Sun: ['Mediterranean', 'Italian', 'Spanish', 'Greek'],\n  moon: ['Japanese', 'Korean', 'Scandinavian', 'British'],\n  Mercury: ['Thai', 'Vietnamese', 'Lebanese', 'Moroccan'],\n  Venus: ['French', 'Indian', 'Persian', 'Turkish'],\n  Mars: ['Mexican', 'Cajun', 'Ethiopian', 'Szechuan'],\n  Jupiter: ['German', 'Russian', 'Hungarian', 'Brazilian'],\n  Saturn: ['Chinese', 'Tibetan', 'Mongolian', 'Nordic'],\n  Uranus: ['Fusion', 'Molecular', 'Experimental', 'Modern'],\n  Neptune: ['Seafood', 'Coastal', 'Island', 'Aquatic'],\n  Pluto: ['Underground', 'Fermented', 'Aged', 'Transformed']\n};\n\n/**\n * Elemental cuisine characteristics\n */\nconst ELEMENTAL_CUISINES = { Fire: {\n    cuisines: ['Mexican', 'Indian', 'Thai', 'Cajun', 'Ethiopian'],\n    characteristics: ['Spicy', 'Grilled', 'Roasted', 'High heat cooking'],\n    ingredients: ['Chili peppers', 'Ginger', 'Garlic', 'Spices']\n  },\n  Water: {\n    cuisines: ['Japanese', 'Scandinavian', 'Coastal', 'Seafood'],\n    characteristics: ['Steamed', 'Boiled', 'Raw', 'Liquid-based'],\n    ingredients: ['Fish', 'Seaweed', 'Rice', 'Broths']\n  },\n  Air: {\n    cuisines: ['Mediterranean', 'Lebanese', 'Greek', 'Light'],\n    characteristics: ['Light', 'Airy', 'Whipped', 'Fermented'],\n    ingredients: ['Herbs', 'Citrus', 'Olive oil', 'Fresh vegetables']\n  },\n  Earth: {\n    cuisines: ['German', 'Russian', 'British', 'Comfort food'],\n    characteristics: ['Hearty', 'Roasted', 'Baked', 'Grounding'],\n    ingredients: ['Root vegetables', 'Grains', 'Meat', 'Dairy']\n  }\n};\n\n/**\n * Generate cuisine recommendations based on dominant planets\n */\nexport function generateCuisineRecommendations(\n  dominantPlanets: Array<{ planet: string; strength: number; element: Element }>,\n  elementalProperties: ElementalProperties\n): CuisineRecommendation[] {\n  const recommendations: CuisineRecommendation[] = [];\n  const processedCuisines = new Set<string>();\n\n  // Get recommendations from dominant planets\n  dominantPlanets?.slice(0, 3).forEach(({ planet, strength, element }) => {\n    const planetaryCuisines = PLANETARY_CUISINES[planet as keyof typeof PLANETARY_CUISINES] || [];\n    \n    (planetaryCuisines || []).forEach(cuisine => {\n      if (!processedCuisines.has(cuisine)) {\n        processedCuisines.add(cuisine);\n        \n        const compatibility = calculateCuisineCompatibility(cuisine, elementalProperties, strength);\n        const reasons = generateCuisineReasons(cuisine, planet, element, strength);\n        const suggestedDishes = getSuggestedDishes(cuisine, elementalProperties);\n        \n        recommendations?.push({\n          cuisine,\n          compatibility,\n          reasons,\n          elementalAlignment: calculateCuisineElementalAlignment(cuisine),\n          suggestedDishes\n        });\n      }\n    });\n  });\n\n  // Add elemental cuisine recommendations\n  Object.entries(elementalProperties || {}).forEach(([element, value]) => {\n    if (value > 0.3) { // Only recommend if element is prominent\n      const elementalCuisines = ELEMENTAL_CUISINES[element as keyof typeof ELEMENTAL_CUISINES];\n      \n      (elementalCuisines.cuisines || []).forEach(cuisine => {\n        if (!processedCuisines.has(cuisine)) {\n          processedCuisines.add(cuisine);\n          \n          const compatibility = value * 0.8; // Base on elemental strength\n          const reasons = [`Strong ${element} element aligns with ${cuisine} cuisine characteristics`];\n          const suggestedDishes = getSuggestedDishes(cuisine, elementalProperties);\n          \n          recommendations?.push({\n            cuisine,\n            compatibility,\n            reasons,\n            elementalAlignment: calculateCuisineElementalAlignment(cuisine),\n            suggestedDishes\n          });\n        }\n      });\n    }\n  });\n\n  // Sort by compatibility and return top recommendations\n  return recommendations\n    .sort((a, b) => b.compatibility - a.compatibility)\n    .slice(0, 8);\n}\n\n/**\n * Calculate cuisine compatibility with user's elemental properties\n */\nfunction calculateCuisineCompatibility(\n  cuisine: string,\n  userElementals: ElementalProperties,\n  planetaryStrength: number = 1.0\n): number {\n  const cuisineElementals = calculateCuisineElementalAlignment(cuisine);\n  \n  // Calculate elemental similarity\n  const similarity = (\n    Math.abs(cuisineElementals.Fire - userElementals.Fire) +\n    Math.abs(cuisineElementals.Water - userElementals.Water) +\n    Math.abs(cuisineElementals.Air - userElementals.Air) +\n    Math.abs(cuisineElementals.Earth - userElementals.Earth)\n  ) / 4;\n  \n  const elementalCompatibility = 1 - similarity;\n  \n  // Combine with planetary strength\n  return (elementalCompatibility * 0.7) + (planetaryStrength * 0.3);\n}\n\n/**\n * Calculate elemental alignment for a cuisine\n */\nfunction calculateCuisineElementalAlignment(cuisine: string): ElementalProperties {\n  // Default balanced alignment\n  let alignment: ElementalProperties = { Fire: 0.25, Water: 0.25, Air: 0.25, Earth: 0.25 };\n\n  // Adjust based on cuisine characteristics\n  const lowerCuisine = cuisine?.toLowerCase();\n\n  if (['mexican', 'indian', 'thai', 'cajun', 'ethiopian', 'szechuan'].includes(lowerCuisine)) {\n    alignment = { Fire: 0.4, Water: 0.2, Air: 0.2, Earth: 0.2 };\n  } else if (['japanese', 'scandinavian', 'seafood', 'coastal'].includes(lowerCuisine)) {\n    alignment = { Fire: 0.15, Water: 0.45, Air: 0.2, Earth: 0.2 };\n  } else if (['mediterranean', 'lebanese', 'greek', 'moroccan'].includes(lowerCuisine)) {\n    alignment = { Fire: 0.2, Water: 0.2, Air: 0.4, Earth: 0.2 };\n  } else if (['german', 'russian', 'british', 'hungarian'].includes(lowerCuisine)) {\n    alignment = { Fire: 0.2, Water: 0.2, Air: 0.15, Earth: 0.45 };\n  } else if (['french', 'italian', 'spanish'].includes(lowerCuisine)) {\n    alignment = { Fire: 0.3, Water: 0.2, Air: 0.3, Earth: 0.2 };\n  }\n\n  return alignment;\n}\n\n/**\n * Generate reasons for cuisine recommendation\n */\nfunction generateCuisineReasons(\n  cuisine: string,\n  planet: string,\n  element: Element,\n  strength: number\n): string[] {\n  const reasons: string[] = [];\n\n  reasons?.push(`${planet} influence (${(strength * 100)?.toFixed(0)}%) aligns with ${cuisine} cuisine`);\n  reasons?.push(`${element} elemental energy complements ${cuisine} cooking methods`);\n\n  if (strength > 0.7) {\n    reasons?.push(`Strong planetary influence makes this an excellent match`);\n  } else if (strength > 0.5) {\n    reasons?.push(`Good planetary alignment for this cuisine style`);\n  }\n\n  return reasons;\n}\n\n/**\n * Get suggested dishes for a cuisine based on elemental properties\n */\nfunction getSuggestedDishes(cuisine: string, elementals: ElementalProperties): string[] {\n  const dishes: Record<string, string[]> = {\n    'Mexican': ['Tacos al pastor', 'Mole poblano', 'Ceviche', 'Pozole'],\n    'Indian': ['Curry', 'Biryani', 'Tandoori', 'Dal'],\n    'Thai': ['Pad thai', 'Tom yum', 'Green curry', 'Som tam'],\n    'Japanese': ['Sushi', 'Ramen', 'Tempura', 'Miso soup'],\n    'Italian': ['Pasta', 'Risotto', 'Pizza', 'Osso buco'],\n    'French': ['Coq au vin', 'Bouillabaisse', 'Ratatouille', 'Soufflé'],\n    'Mediterranean': ['Paella', 'Moussaka', 'Hummus', 'Grilled fish'],\n    'Chinese': ['Stir-fry', 'Dim sum', 'Hot pot', 'Peking duck'],\n    'German': ['Sauerbraten', 'Schnitzel', 'Sauerkraut', 'Bratwurst'],\n    'Cajun': ['Gumbo', 'Jambalaya', 'Crawfish étouffee', 'Beignets']\n  };\n\n  const cuisineDishes = dishes[cuisine] || ['Traditional dishes', 'Regional specialties'];\n  \n  // Filter based on dominant element\n  const dominantElement = Object.entries(elementals)\n    .reduce((a, b) => elementals[a[0] as keyof ElementalProperties] > elementals[b[0] as keyof ElementalProperties] ? a : b)[0];\n\n  // Return dishes that align with dominant element\n  return cuisineDishes?.slice(0, 3);\n}\n\nexport default {\n  generateCuisineRecommendations,\n  calculateCuisineCompatibility,\n  calculateCuisineElementalAlignment\n}; "],"version":3}