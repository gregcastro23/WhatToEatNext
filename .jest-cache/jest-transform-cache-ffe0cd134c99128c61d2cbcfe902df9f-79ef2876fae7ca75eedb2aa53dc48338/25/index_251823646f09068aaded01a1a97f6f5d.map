{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/data/ingredients/index.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/data/ingredients/index.ts"],"sourcesContent":["import { wholeGrains } from './grains/wholeGrains';\nimport { refinedGrains } from './grains/refinedGrains';\nimport { allGrains, grainNames } from './grains';\nimport { medicinalHerbs } from './herbs/medicinalHerbs';\nimport type { Ingredient } from '@/types/alchemy';\nimport { seafood , seafood as seafoodData } from './proteins/seafood';\nimport { poultry , poultry as poultryData } from './proteins/poultry';\nimport { plantBased , plantBased as plantBasedData } from './proteins/plantBased';\nimport { meats } from './proteins/meat';\nimport { herbs, allHerbs } from './herbs';\nimport { processedOils, allOils } from './oils';\nimport { spices } from './spices';\nimport { warmSpices } from './spices/warmSpices';\nimport { vinegars, allVinegars, artisanalVinegars } from './vinegars/vinegars';\nimport { french } from '@/data/cuisines/french';\nimport { italian } from '@/data/cuisines/italian';\nimport { middleEastern } from '@/data/cuisines/middle-eastern';\nimport { thai } from '@/data/cuisines/thai';\nimport {\n  calculateAlchemicalProperties,\n  calculateThermodynamicProperties,\n  determineIngredientModality,\n} from '@/utils/ingredientUtils';\nimport { fruits } from './fruits';\nimport { enhancedVegetables, standardizedVegetables } from './vegetables';\nimport { seasonings } from './seasonings';\nimport { standardizeIngredient } from '@/utils/dataStandardization';\nimport { fixIngredientMappings } from '@/utils/elementalUtils';\n\n// Add explicit exports needed by imports elsewhere in the codebase\nexport { fruits } from './fruits';\nexport { enhancedVegetables as vegetables } from './vegetables';\nexport { herbs } from './herbs';\nexport { spices } from './spices';\nexport { allGrains as grains } from './grains';\nexport { allOils as oils } from './oils';\nexport { seasonings } from './seasonings';\nexport { vinegars } from './vinegars/vinegars';\nexport { meats, poultry, seafood, plantBased } from './proteins/index';\n\n// Create a combined proteins object for easier imports\nimport { meats as meatsData } from './proteins/meat';\n\nexport const proteins = {\n  ...meatsData,\n  ...poultryData,\n  ...seafoodData,\n  ...plantBasedData\n};\n\n// Calculate elemental properties from astrological data\nconst calculateElementalProperties = (\n  ingredientData: Ingredient | UnifiedIngredient\n): Record<string, number> => {\n  // Use actual elemental properties if they exist\n  if (ingredientData?.elementalProperties && \n      Object.keys(ingredientData.elementalProperties).length > 0) {\n    \n    const props = ingredientData.elementalProperties;\n    const sum = Object.values(props).reduce((acc: number, val: unknown) => acc + (Number(val) || 0), 0);\n    \n    if (sum > 0) {\n      return {\n        Fire: (Number(props.Fire) || 0) / sum,\n        Water: (Number(props.Water) || 0) / sum,\n        Earth: (Number(props.Earth) || 0) / sum,\n        Air: (Number(props.Air) || 0) / sum,\n      };\n    }\n  }\n  \n  // Calculate from astrological correspondences if available\n  if (ingredientData?.astrologicalCorrespondence) {\n    const astro = ingredientData.astrologicalCorrespondence;\n    const elementalProps = { Fire: 0, Water: 0, Earth: 0, Air: 0 };\n    \n    // Add elemental influence from planetary rulers\n    if (astro.planetaryRulers) {\n      astro.planetaryRulers.forEach((planet: string) => {\n        const planetElement = getPlanetaryElement(planet);\n        if (planetElement) {\n          elementalProps[planetElement] += 0.3;\n        }\n      });\n    }\n    \n    // Add elemental influence from zodiac signs\n    if (astro.zodiacSigns) {\n      astro.zodiacSigns.forEach((sign: string) => {\n        const signElement = getZodiacElement(sign);\n        if (signElement) {\n          elementalProps[signElement] += 0.2;\n        }\n      });\n    }\n    \n    const sum = Object.values(elementalProps).reduce((acc, val) => acc + val, 0);\n    if (sum > 0) {\n      return {\n        Fire: elementalProps.Fire / sum,\n        Water: elementalProps.Water / sum,\n        Earth: elementalProps.Earth / sum,\n        Air: elementalProps.Air / sum,\n      };\n    }\n  }\n  \n  // If no astrological data, calculate from ingredient category\n  return calculateElementalPropertiesFromCategory(ingredientData?.category || 'culinary_herb');\n};\n\n// Helper function to get planetary element\nfunction getPlanetaryElement(planet: string): string | null {\n  const planetElements: Record<string, string> = {\n    'Sun': 'Fire',\n    'Mars': 'Fire',\n    'Jupiter': 'Fire',\n    'Moon': 'Water',\n    'Venus': 'Water',\n    'Neptune': 'Water',\n    'Mercury': 'Air',\n    'Uranus': 'Air',\n    'Saturn': 'Earth',\n    'Pluto': 'Earth'\n  };\n  return planetElements[planet] || null;\n}\n\n// Helper function to get zodiac element\nfunction getZodiacElement(sign: string): string | null {\n  const signElements: Record<string, string> = {\n    'aries': 'Fire', 'leo': 'Fire', 'sagittarius': 'Fire',\n    'taurus': 'Earth', 'virgo': 'Earth', 'capricorn': 'Earth',\n    'gemini': 'Air', 'libra': 'Air', 'aquarius': 'Air',\n    'cancer': 'Water', 'scorpio': 'Water', 'pisces': 'Water'\n  };\n  return signElements[sign.toLowerCase()] || null;\n}\n\n// Helper function to calculate elemental properties from category\nfunction calculateElementalPropertiesFromCategory(category: string): Record<string, number> {\n  const categoryElements: Record<string, Record<string, number>> = {\n    'spice': { Fire: 0.6, Air: 0.3, Earth: 0.1, Water: 0.0 },\n    'culinary_herb': { Earth: 0.4, Air: 0.3, Water: 0.2, Fire: 0.1 },\n    'protein': { Fire: 0.4, Earth: 0.4, Water: 0.2, Air: 0.0 },\n    'oil': { Fire: 0.3, Water: 0.3, Earth: 0.2, Air: 0.2 },\n    'grain': { Earth: 0.7, Air: 0.2, Water: 0.1, Fire: 0.0 },\n    'vegetable': { Earth: 0.5, Water: 0.3, Air: 0.2, Fire: 0.0 },\n    'fruit': { Water: 0.5, Air: 0.3, Earth: 0.2, Fire: 0.0 },\n    'vinegar': { Fire: 0.2, Water: 0.4, Air: 0.3, Earth: 0.1 },\n    'seasoning': { Fire: 0.4, Air: 0.3, Earth: 0.2, Water: 0.1 }\n  };\n  \n  return categoryElements[category] || { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 };\n};\n\n// Process and validate a single ingredient\nconst processIngredient = (ingredient: unknown, name: string): Ingredient => {\n  if (!ingredient) {\n    throw new Error(`Invalid ingredient data for ${name}`);\n  }\n\n  // Create default lunar phase modifiers if none exist\n  const defaultLunarPhaseModifiers = {\n    newMoon: {\n      elementalBoost: { Earth: 0.05, Water: 0.05 },\n      preparationTips: ['Best for subtle preparation methods'],\n      thermodynamicEffects: { heat: -0.1, entropy: -0.05 },\n    },\n    fullMoon: {\n      elementalBoost: { Water: 0.1, Air: 0.05 },\n      preparationTips: ['Enhanced flavor extraction'],\n      thermodynamicEffects: { reactivity: 0.1, energy: 0.05 },\n    },\n  };\n\n  // Apply uniform standardization to the ingredient\n  const ingredientData = ingredient as Record<string, unknown>;\n  const standardized = standardizeIngredient({\n    name: name,\n    category: ingredientData?.category || 'culinary_herb',\n    elementalProperties: calculateElementalProperties(ingredientData),\n    qualities: Array.isArray(ingredientData?.qualities) ? ingredientData.qualities : [],\n    lunarPhaseModifiers:\n      ingredientData?.lunarPhaseModifiers || defaultLunarPhaseModifiers,\n    storage: ingredientData?.storage || { duration: 'unknown' },\n    elementalTransformation: ingredientData?.elementalTransformation || {\n      whenCooked: { Fire: 0.1, Air: 0.05 },\n    },\n    ...ingredientData,\n  });\n\n  return standardized as Ingredient;\n};\n\n// Process a collection of ingredients with the new properties\nconst processIngredientCollection = (\n  collection: Record<string, unknown>\n): Record<string, Ingredient> => {\n  return Object.entries(collection).reduce((acc, [key, value]) => {\n    try {\n      const processedIngredient = processIngredient(value as Record<string, unknown>, key) as Record<string, unknown>;\n\n      // Add alchemical and thermodynamic properties\n      const alchemicalProps =\n        calculateAlchemicalProperties(processedIngredient);\n      const thermodynamicProps = calculateThermodynamicProperties(\n        alchemicalProps,\n        processedIngredient.elementalProperties\n      );\n\n      // Determine modality\n      const modality = determineIngredientModality(\n        (processedIngredient as Record<string, unknown>)?.qualities || [],\n        processedIngredient.elementalProperties\n      );\n\n      // Create elementalSignature (dominant elements in order)\n      const elementalSignature = Object.entries(\n        processedIngredient.elementalProperties\n      )\n        .sort((a, b) => {\n          // Pattern KK-10: Final Arithmetic Elimination for data processing\n          const numericA = Number(a[1]) || 0;\n          const numericB = Number(b[1]) || 0;\n          return numericB - numericA;\n        })\n        .map(([element, value]) => [element, Number(value) || 0] as [string, number]);\n\n      acc[key] = {\n        ...processedIngredient,\n        alchemicalProperties: alchemicalProps,\n        thermodynamicProperties: thermodynamicProps,\n        modality,\n        elementalSignature:\n          elementalSignature.length > 0 ? elementalSignature : undefined,\n        // Process other enhanced properties if they exist\n        astrologicalCorrespondence:\n          (processedIngredient as Record<string, unknown>)?.astrologicalCorrespondence || undefined,\n        pairingRecommendations:\n          (processedIngredient as Record<string, unknown>)?.pairingRecommendations || undefined,\n        celestialBoost: (processedIngredient as Record<string, unknown>)?.celestialBoost || undefined,\n        planetaryInfluence: (processedIngredient as Record<string, unknown>)?.planetaryInfluence || undefined,\n      } as Ingredient;\n    } catch (error) {\n      console.warn(`Skipping invalid ingredient ${key}:`, error);\n    }\n    return acc;\n  }, {} as Record<string, Ingredient>);\n};\n\n// Create comprehensive collections that combine all available sources\nexport const herbsCollection = processIngredientCollection(allHerbs);\nexport const oilsCollection = processIngredientCollection(allOils);\nexport const vinegarsCollection = processIngredientCollection(allVinegars);\nexport const grainsCollection = processIngredientCollection(allGrains);\nexport const spicesCollection = processIngredientCollection({\n  ...spices,\n  ...warmSpices,\n});\nexport const vegetablesCollection = processIngredientCollection(enhancedVegetables);\n\nexport const VALID_CATEGORIES = [\n  'culinary_herb',\n  'spice',\n  'protein',\n  'oil',\n  'grain',\n  'medicinal_herb',\n  'vegetable',\n  'fruit',\n  'vinegar',\n  'seasoning',\n] as const;\n\n// Compile all ingredients into a single collection with deduplication\n// Order matters - later sources overwrite earlier ones\nexport const allIngredients = (() => {\n  // First process all collections separately\n  const processedSeasonings = processIngredientCollection(seasonings);\n  const processedVegetables = processIngredientCollection(enhancedVegetables);\n  const processedFruits = processIngredientCollection(fruits);\n  const processedGrains = processIngredientCollection(grainsCollection);\n  const processedVinegars = processIngredientCollection(vinegarsCollection);\n  const processedOils = processIngredientCollection(oilsCollection);\n  const processedPlantBased = processIngredientCollection(plantBased);\n  const processedMeats = processIngredientCollection(meats);\n  const processedPoultry = processIngredientCollection(poultry);\n  const processedSeafood = processIngredientCollection(seafood);\n  const processedHerbs = processIngredientCollection(herbsCollection);\n  const processedSpices = processIngredientCollection(spicesCollection);\n  \n  // Create a map to deduplicate by normalized name\n  const result: Record<string, Ingredient> = {};\n  \n  // Helper function to normalize ingredient name for comparison\n  const normalizeIngredientName = (name: string): string => {\n    return name.toLowerCase()\n      .trim()\n      .replace(/\\s+/g, '_')\n      .replace(/[^a-z0-9_]/g, '');\n  };\n  \n  // Build a list of collections in priority order (lowest to highest)\n  const collectionsList = [\n    { source: processedSeasonings, priority: 1 },\n    { source: processedVegetables, priority: 2 },\n    { source: processedFruits, priority: 3 },\n    { source: processedGrains, priority: 4 },\n    { source: processedVinegars, priority: 5 },\n    { source: processedOils, priority: 6 },\n    { source: processedPlantBased, priority: 7 },\n    { source: processedMeats, priority: 8 },\n    { source: processedPoultry, priority: 9 },\n    { source: processedSeafood, priority: 10 },\n    { source: processedHerbs, priority: 11 },\n    { source: processedSpices, priority: 12 } // Highest priority\n  ];\n  \n  // Sort collections by priority\n  collectionsList.sort((a, b) => a.priority - b.priority);\n  \n  // Process collections in order\n  collectionsList.forEach(({ source }) => {\n    // Process each ingredient in the collection\n    Object.entries(source).forEach(([key, ingredient]) => {\n      // Store both the original key and any potential name-based key\n      // for better deduplication\n      result[key] = ingredient;\n      \n      // Also index by normalized name if it differs from the key\n      const normalizedKey = normalizeIngredientName(ingredient.name || key);\n      if (normalizedKey !== key.toLowerCase().replace(/\\s+/g, '_')) {\n        // Add \"name_\" prefix to avoid collisions with original keys\n        result[`name_${normalizedKey}`] = ingredient;\n      }\n    });\n  });\n  \n  // Remove the name_ prefixed duplicates for final export\n  const finalResult: Record<string, Ingredient> = {};\n  Object.entries(result).forEach(([key, value]) => {\n    if (!key.startsWith('name_')) {\n      finalResult[key] = value;\n    }\n  });\n  \n  return finalResult;\n})();\n\n// Get a complete list of all ingredient names\nexport const allIngredientNames = Object.keys(allIngredients);\n\n// Create a map of ingredients for easy lookup by name - defining AFTER allIngredients is initialized\nexport const ingredientsMap = { ...allIngredients };\n\n// Function to get all ingredients of a specific category\nexport function getAllIngredientsByCategory(category: string): Ingredient[] {\n  return Object.values(allIngredients).filter(\n    (ingredient) => ingredient.category === category\n  );\n}\n\n// Function to get all vegetable ingredients\nexport function getAllVegetables(): Ingredient[] {\n  return getAllIngredientsByCategory('vegetable');\n}\n\n// Function to get all protein ingredients\nexport function getAllProteins(): Ingredient[] {\n  return getAllIngredientsByCategory('protein');\n}\n\n// Function to get all herb ingredients\nexport function getAllHerbs(): Ingredient[] {\n  return getAllIngredientsByCategory('culinary_herb');\n}\n\n// Function to get all spice ingredients\nexport function getAllSpices(): Ingredient[] {\n  return getAllIngredientsByCategory('spice');\n}\n\n// Function to get all grain ingredients\nexport function getAllGrains(): Ingredient[] {\n  return getAllIngredientsByCategory('grain');\n}\n\n// Function to get ingredients by category (subcategory functionality removed - use category instead)\n// Note: subCategory property does not exist on Ingredient type\n\n// Export the functions to make them available\nexport default {\n  allIngredients,\n  allIngredientNames,\n  VALID_CATEGORIES,\n  getAllIngredientsByCategory,\n  getAllVegetables,\n  getAllProteins,\n  getAllHerbs,\n  getAllSpices,\n  getAllGrains,\n  ingredientsMap,\n};\n\n"],"version":3}