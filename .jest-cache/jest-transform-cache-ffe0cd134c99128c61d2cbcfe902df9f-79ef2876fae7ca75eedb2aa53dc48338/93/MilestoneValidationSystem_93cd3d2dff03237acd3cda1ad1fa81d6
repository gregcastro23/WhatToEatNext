ef97c65c83611c180dd82506073af932
"use strict";
/**
 * Milestone Validation System
 * Perfect Codebase Campaign - Automated Success Verification
 * Requirements: 6.5, 6.6, 6.7, 6.8
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MilestoneValidationSystem = void 0;
const child_process_1 = require("child_process");
const fs = __importStar(require("fs"));
const MetricsCollectionSystem_1 = require("./MetricsCollectionSystem");
class MilestoneValidationSystem {
    metricsCollector;
    validationHistory = [];
    constructor() {
        this.metricsCollector = new MetricsCollectionSystem_1.MetricsCollectionSystem();
    }
    /**
     * Validate Phase 1: TypeScript Error Elimination
     * Requirements: 6.5 - Zero TypeScript errors achieved
     */
    async validatePhase1() {
        console.log('🔍 Validating Phase 1: TypeScript Error Elimination');
        const metrics = await this.metricsCollector.collectDetailedMetrics();
        const milestones = [];
        // Milestone 1.1: Zero TypeScript Errors
        const zeroErrorsMilestone = await this.validateZeroTypeScriptErrors(metrics);
        milestones.push(zeroErrorsMilestone);
        // Milestone 1.2: Error Type Distribution Elimination
        const errorDistributionMilestone = await this.validateErrorDistributionElimination(metrics);
        milestones.push(errorDistributionMilestone);
        // Milestone 1.3: Build Stability Maintenance
        const buildStabilityMilestone = await this.validateBuildStability();
        milestones.push(buildStabilityMilestone);
        // Calculate overall phase success
        const overallSuccess = milestones.every(m => m.success);
        const completionPercentage = this.calculateCompletionPercentage(milestones);
        const criticalFailures = milestones
            .filter(m => !m.success)
            .map(m => `${m.milestone}: ${m.failureReasons.join(', ')}`);
        const nextSteps = this.generatePhase1NextSteps(milestones);
        const result = {
            phaseId: 'phase1',
            phaseName: 'TypeScript Error Elimination',
            overallSuccess,
            completionPercentage,
            milestones,
            criticalFailures,
            nextSteps,
        };
        console.log(`✅ Phase 1 Validation Complete: ${overallSuccess ? 'PASSED' : 'FAILED'} (${completionPercentage}%)`);
        return result;
    }
    /**
     * Validate Phase 2: Linting Excellence Achievement
     * Requirements: 6.6 - Zero linting warnings achieved
     */
    async validatePhase2() {
        console.log('🔍 Validating Phase 2: Linting Excellence Achievement');
        const metrics = await this.metricsCollector.collectDetailedMetrics();
        const milestones = [];
        // Milestone 2.1: Zero Linting Warnings
        const zeroWarningsMilestone = await this.validateZeroLintingWarnings(metrics);
        milestones.push(zeroWarningsMilestone);
        // Milestone 2.2: Warning Category Elimination
        const warningCategoriesMilestone = await this.validateWarningCategoryElimination(metrics);
        milestones.push(warningCategoriesMilestone);
        // Milestone 2.3: Code Quality Standards
        const codeQualityMilestone = await this.validateCodeQualityStandards();
        milestones.push(codeQualityMilestone);
        const overallSuccess = milestones.every(m => m.success);
        const completionPercentage = this.calculateCompletionPercentage(milestones);
        const criticalFailures = milestones
            .filter(m => !m.success)
            .map(m => `${m.milestone}: ${m.failureReasons.join(', ')}`);
        const nextSteps = this.generatePhase2NextSteps(milestones);
        const result = {
            phaseId: 'phase2',
            phaseName: 'Linting Excellence Achievement',
            overallSuccess,
            completionPercentage,
            milestones,
            criticalFailures,
            nextSteps,
        };
        console.log(`✅ Phase 2 Validation Complete: ${overallSuccess ? 'PASSED' : 'FAILED'} (${completionPercentage}%)`);
        return result;
    }
    /**
     * Validate Phase 3: Enterprise Intelligence Transformation
     * Requirements: 6.7 - All exports transformed to enterprise systems
     */
    async validatePhase3() {
        console.log('🔍 Validating Phase 3: Enterprise Intelligence Transformation');
        const metrics = await this.metricsCollector.collectDetailedMetrics();
        const milestones = [];
        // Milestone 3.1: Export Transformation Complete
        const exportTransformationMilestone = await this.validateExportTransformation(metrics);
        milestones.push(exportTransformationMilestone);
        // Milestone 3.2: Enterprise System Count Target
        const systemCountMilestone = await this.validateEnterpriseSystemCount(metrics);
        milestones.push(systemCountMilestone);
        // Milestone 3.3: Intelligence System Quality
        const systemQualityMilestone = await this.validateIntelligenceSystemQuality();
        milestones.push(systemQualityMilestone);
        const overallSuccess = milestones.every(m => m.success);
        const completionPercentage = this.calculateCompletionPercentage(milestones);
        const criticalFailures = milestones
            .filter(m => !m.success)
            .map(m => `${m.milestone}: ${m.failureReasons.join(', ')}`);
        const nextSteps = this.generatePhase3NextSteps(milestones);
        const result = {
            phaseId: 'phase3',
            phaseName: 'Enterprise Intelligence Transformation',
            overallSuccess,
            completionPercentage,
            milestones,
            criticalFailures,
            nextSteps,
        };
        console.log(`✅ Phase 3 Validation Complete: ${overallSuccess ? 'PASSED' : 'FAILED'} (${completionPercentage}%)`);
        return result;
    }
    /**
     * Validate Phase 4: Performance Optimization Maintenance
     * Requirements: 6.8 - Perfect performance and test coverage achieved
     */
    async validatePhase4() {
        console.log('🔍 Validating Phase 4: Performance Optimization Maintenance');
        const metrics = await this.metricsCollector.collectDetailedMetrics();
        const milestones = [];
        // Milestone 4.1: Build Performance Targets
        const buildPerformanceMilestone = await this.validateBuildPerformance(metrics);
        milestones.push(buildPerformanceMilestone);
        // Milestone 4.2: Cache Performance Optimization
        const cachePerformanceMilestone = await this.validateCachePerformance(metrics);
        milestones.push(cachePerformanceMilestone);
        // Milestone 4.3: Memory and Resource Optimization
        const resourceOptimizationMilestone = await this.validateResourceOptimization(metrics);
        milestones.push(resourceOptimizationMilestone);
        // Milestone 4.4: Bundle Size Optimization
        const bundleSizeMilestone = await this.validateBundleSize(metrics);
        milestones.push(bundleSizeMilestone);
        const overallSuccess = milestones.every(m => m.success);
        const completionPercentage = this.calculateCompletionPercentage(milestones);
        const criticalFailures = milestones
            .filter(m => !m.success)
            .map(m => `${m.milestone}: ${m.failureReasons.join(', ')}`);
        const nextSteps = this.generatePhase4NextSteps(milestones);
        const result = {
            phaseId: 'phase4',
            phaseName: 'Performance Optimization Maintenance',
            overallSuccess,
            completionPercentage,
            milestones,
            criticalFailures,
            nextSteps,
        };
        console.log(`✅ Phase 4 Validation Complete: ${overallSuccess ? 'PASSED' : 'FAILED'} (${completionPercentage}%)`);
        return result;
    }
    /**
     * Individual milestone validation methods
     */
    async validateZeroTypeScriptErrors(metrics) {
        const criteria = [
            {
                name: 'TypeScript Error Count',
                description: 'Total TypeScript compilation errors must be zero',
                target: 0,
                actual: metrics.typeScriptErrors.current,
                passed: metrics.typeScriptErrors.current === 0,
                weight: 10,
            },
            {
                name: 'Error Reduction Achievement',
                description: 'Must achieve 100% error reduction from initial 86 errors',
                target: 100,
                actual: metrics.typeScriptErrors.percentage,
                passed: metrics.typeScriptErrors.percentage === 100,
                weight: 8,
            },
        ];
        const success = criteria.every(c => c.passed);
        const failureReasons = criteria
            .filter(c => !c.passed)
            .map(c => `${c.name}: expected ${c.target}, got ${c.actual}`);
        const recommendations = success
            ? []
            : [
                'Continue with Enhanced TypeScript Error Fixer v3.0',
                'Focus on remaining error types in breakdown',
                'Ensure build validation after each batch',
            ];
        return {
            milestone: 'Zero TypeScript Errors',
            phase: 'phase1',
            success,
            timestamp: new Date(),
            metrics,
            criteria,
            failureReasons,
            recommendations,
        };
    }
    async validateErrorDistributionElimination(metrics) {
        const errorBreakdown = metrics.errorBreakdown || {};
        const criticalErrorTypes = ['TS2352', 'TS2345', 'TS2698', 'TS2304', 'TS2362'];
        const criteria = criticalErrorTypes.map(errorType => ({
            name: `${errorType} Errors`,
            description: `All ${errorType} errors must be eliminated`,
            target: 0,
            actual: errorBreakdown[errorType] || 0,
            passed: (errorBreakdown[errorType] || 0) === 0,
            weight: 7,
        }));
        const success = criteria.every(c => c.passed);
        const failureReasons = criteria
            .filter(c => !c.passed)
            .map(c => `${c.name}: ${c.actual} remaining`);
        return {
            milestone: 'Error Distribution Elimination',
            phase: 'phase1',
            success,
            timestamp: new Date(),
            metrics,
            criteria,
            failureReasons,
            recommendations: success ? [] : ['Focus on specific error types with targeted fixes'],
        };
    }
    async validateBuildStability() {
        let buildSuccess = false;
        let buildTime = -1;
        try {
            const startTime = Date.now();
            (0, child_process_1.execSync)('yarn build', { stdio: 'pipe' });
            buildTime = (Date.now() - startTime) / 1000;
            buildSuccess = true;
        }
        catch (error) {
            buildSuccess = false;
        }
        const criteria = [
            {
                name: 'Build Success',
                description: 'Project must build successfully without errors',
                target: true,
                actual: buildSuccess,
                passed: buildSuccess,
                weight: 10,
            },
            {
                name: 'Build Time',
                description: 'Build time should be reasonable (under 60 seconds)',
                target: 60,
                actual: buildTime,
                passed: buildTime > 0 && buildTime < 60,
                weight: 5,
            },
        ];
        const success = criteria.every(c => c.passed);
        const failureReasons = criteria
            .filter(c => !c.passed)
            .map(c => `${c.name}: expected ${c.target}, got ${c.actual}`);
        return {
            milestone: 'Build Stability',
            phase: 'phase1',
            success,
            timestamp: new Date(),
            metrics: {},
            criteria,
            failureReasons,
            recommendations: success
                ? []
                : ['Fix build errors before proceeding', 'Check for syntax or import issues'],
        };
    }
    async validateZeroLintingWarnings(metrics) {
        const criteria = [
            {
                name: 'Linting Warning Count',
                description: 'Total linting warnings must be zero',
                target: 0,
                actual: metrics.lintingWarnings.current,
                passed: metrics.lintingWarnings.current === 0,
                weight: 10,
            },
            {
                name: 'Warning Reduction Achievement',
                description: 'Must achieve 100% warning reduction from initial 4506 warnings',
                target: 100,
                actual: metrics.lintingWarnings.percentage,
                passed: metrics.lintingWarnings.percentage === 100,
                weight: 8,
            },
        ];
        const success = criteria.every(c => c.passed);
        const failureReasons = criteria
            .filter(c => !c.passed)
            .map(c => `${c.name}: expected ${c.target}, got ${c.actual}`);
        return {
            milestone: 'Zero Linting Warnings',
            phase: 'phase2',
            success,
            timestamp: new Date(),
            metrics,
            criteria,
            failureReasons,
            recommendations: success
                ? []
                : ['Continue with systematic linting fixes', 'Focus on high-priority warning types'],
        };
    }
    async validateWarningCategoryElimination(metrics) {
        const warningBreakdown = metrics.warningBreakdown || {};
        const criticalWarningTypes = [
            '@typescript-eslint/no-explicit-any',
            'no-unused-vars',
            'no-console',
        ];
        const criteria = criticalWarningTypes.map(warningType => ({
            name: `${warningType} Warnings`,
            description: `All ${warningType} warnings must be eliminated`,
            target: 0,
            actual: warningBreakdown[warningType] || 0,
            passed: (warningBreakdown[warningType] || 0) === 0,
            weight: 8,
        }));
        const success = criteria.every(c => c.passed);
        const failureReasons = criteria
            .filter(c => !c.passed)
            .map(c => `${c.name}: ${c.actual} remaining`);
        return {
            milestone: 'Warning Category Elimination',
            phase: 'phase2',
            success,
            timestamp: new Date(),
            metrics,
            criteria,
            failureReasons,
            recommendations: success ? [] : ['Use specialized fixers for each warning type'],
        };
    }
    async validateCodeQualityStandards() {
        // This would integrate with actual code quality tools
        // For now, we'll simulate the validation
        const criteria = [
            {
                name: 'ESLint Compliance',
                description: 'All ESLint rules must pass',
                target: true,
                actual: true,
                passed: true,
                weight: 9,
            },
        ];
        return {
            milestone: 'Code Quality Standards',
            phase: 'phase2',
            success: true,
            timestamp: new Date(),
            metrics: {},
            criteria,
            failureReasons: [],
            recommendations: [],
        };
    }
    async validateExportTransformation(metrics) {
        // Count unused exports (should be 0 after transformation)
        let unusedExportCount = 0;
        try {
            const output = (0, child_process_1.execSync)('grep -r "export.*unused" src/ | wc -l || echo "0"', {
                encoding: 'utf8',
                stdio: 'pipe',
            });
            unusedExportCount = parseInt(output.trim()) || 0;
        }
        catch (error) {
            // Handle gracefully
        }
        const criteria = [
            {
                name: 'Unused Export Count',
                description: 'All unused exports must be transformed to intelligence systems',
                target: 0,
                actual: unusedExportCount,
                passed: unusedExportCount === 0,
                weight: 10,
            },
        ];
        const success = criteria.every(c => c.passed);
        const failureReasons = criteria
            .filter(c => !c.passed)
            .map(c => `${c.name}: ${c.actual} remaining`);
        return {
            milestone: 'Export Transformation Complete',
            phase: 'phase3',
            success,
            timestamp: new Date(),
            metrics,
            criteria,
            failureReasons,
            recommendations: success
                ? []
                : ['Continue transforming unused exports to intelligence systems'],
        };
    }
    async validateEnterpriseSystemCount(metrics) {
        const criteria = [
            {
                name: 'Enterprise System Count',
                description: 'Must achieve target of 200+ enterprise intelligence systems',
                target: 200,
                actual: metrics.enterpriseSystems.current,
                passed: metrics.enterpriseSystems.current >= 200,
                weight: 9,
            },
        ];
        const success = criteria.every(c => c.passed);
        const failureReasons = criteria
            .filter(c => !c.passed)
            .map(c => `${c.name}: expected >= ${c.target}, got ${c.actual}`);
        return {
            milestone: 'Enterprise System Count Target',
            phase: 'phase3',
            success,
            timestamp: new Date(),
            metrics,
            criteria,
            failureReasons,
            recommendations: success ? [] : ['Continue transforming exports to reach 200+ systems'],
        };
    }
    async validateIntelligenceSystemQuality() {
        // Validate that intelligence systems have proper structure
        let qualityScore = 0;
        try {
            const analyticsCount = (0, child_process_1.execSync)('grep -r "analyzePatterns" src/ | wc -l', {
                encoding: 'utf8',
                stdio: 'pipe',
            });
            const recommendationsCount = (0, child_process_1.execSync)('grep -r "generateRecommendations" src/ | wc -l', {
                encoding: 'utf8',
                stdio: 'pipe',
            });
            const demonstrationsCount = (0, child_process_1.execSync)('grep -r "demonstrateCapabilities" src/ | wc -l', {
                encoding: 'utf8',
                stdio: 'pipe',
            });
            const analytics = parseInt(analyticsCount.trim()) || 0;
            const recommendations = parseInt(recommendationsCount.trim()) || 0;
            const demonstrations = parseInt(demonstrationsCount.trim()) || 0;
            qualityScore = Math.min(analytics, recommendations, demonstrations);
        }
        catch (error) {
            // Handle gracefully
        }
        const criteria = [
            {
                name: 'Intelligence System Quality',
                description: 'Intelligence systems must have analytics, recommendations, and demonstrations',
                target: 50,
                actual: qualityScore,
                passed: qualityScore >= 50,
                weight: 8,
            },
        ];
        const success = criteria.every(c => c.passed);
        const failureReasons = criteria
            .filter(c => !c.passed)
            .map(c => `${c.name}: expected >= ${c.target}, got ${c.actual}`);
        return {
            milestone: 'Intelligence System Quality',
            phase: 'phase3',
            success,
            timestamp: new Date(),
            metrics: {},
            criteria,
            failureReasons,
            recommendations: success
                ? []
                : ['Ensure all intelligence systems have complete functionality'],
        };
    }
    async validateBuildPerformance(metrics) {
        const criteria = [
            {
                name: 'Build Time',
                description: 'Build time must be under 10 seconds',
                target: 10,
                actual: metrics.buildPerformance.currentTime,
                passed: metrics.buildPerformance.currentTime <= 10,
                weight: 9,
            },
        ];
        const success = criteria.every(c => c.passed);
        const failureReasons = criteria
            .filter(c => !c.passed)
            .map(c => `${c.name}: expected <= ${c.target}s, got ${c.actual}s`);
        return {
            milestone: 'Build Performance Targets',
            phase: 'phase4',
            success,
            timestamp: new Date(),
            metrics,
            criteria,
            failureReasons,
            recommendations: success
                ? []
                : ['Optimize build performance with caching and bundling improvements'],
        };
    }
    async validateCachePerformance(metrics) {
        const criteria = [
            {
                name: 'Cache Hit Rate',
                description: 'Cache hit rate must be 80% or higher',
                target: 0.8,
                actual: metrics.buildPerformance.cacheHitRate,
                passed: metrics.buildPerformance.cacheHitRate >= 0.8,
                weight: 7,
            },
        ];
        const success = criteria.every(c => c.passed);
        const failureReasons = criteria
            .filter(c => !c.passed)
            .map(c => `${c.name}: expected >= ${Number(c.target) * 100}%, got ${Number(c.actual) * 100}%`);
        return {
            milestone: 'Cache Performance Optimization',
            phase: 'phase4',
            success,
            timestamp: new Date(),
            metrics,
            criteria,
            failureReasons,
            recommendations: success ? [] : ['Improve caching strategy and cache invalidation'],
        };
    }
    async validateResourceOptimization(metrics) {
        const criteria = [
            {
                name: 'Memory Usage',
                description: 'Memory usage must be under 50MB',
                target: 50,
                actual: metrics.buildPerformance.memoryUsage,
                passed: metrics.buildPerformance.memoryUsage <= 50,
                weight: 6,
            },
        ];
        const success = criteria.every(c => c.passed);
        const failureReasons = criteria
            .filter(c => !c.passed)
            .map(c => `${c.name}: expected <= ${c.target}MB, got ${c.actual}MB`);
        return {
            milestone: 'Memory and Resource Optimization',
            phase: 'phase4',
            success,
            timestamp: new Date(),
            metrics,
            criteria,
            failureReasons,
            recommendations: success ? [] : ['Optimize memory usage and resource allocation'],
        };
    }
    async validateBundleSize(metrics) {
        const bundleSize = Number(metrics.buildMetrics
            .bundleSize) || 0;
        const criteria = [
            {
                name: 'Bundle Size',
                description: 'Bundle size should be around 420kB target',
                target: 420,
                actual: bundleSize,
                passed: bundleSize <= 500,
                weight: 7,
            },
        ];
        const success = criteria.every(c => c.passed);
        const failureReasons = criteria
            .filter(c => !c.passed)
            .map(c => `${c.name}: expected <= ${c.target}kB, got ${c.actual}kB`);
        return {
            milestone: 'Bundle Size Optimization',
            phase: 'phase4',
            success,
            timestamp: new Date(),
            metrics,
            criteria,
            failureReasons,
            recommendations: success ? [] : ['Optimize bundle size with tree shaking and code splitting'],
        };
    }
    /**
     * Helper methods
     */
    calculateCompletionPercentage(milestones) {
        if (milestones.length === 0)
            return 0;
        const totalWeight = milestones.reduce((sum, m) => sum + m.criteria.reduce((criteriaSum, c) => criteriaSum + c.weight, 0), 0);
        const passedWeight = milestones.reduce((sum, m) => sum +
            m.criteria.filter(c => c.passed).reduce((criteriaSum, c) => criteriaSum + c.weight, 0), 0);
        return Math.round((passedWeight / totalWeight) * 100);
    }
    generatePhase1NextSteps(milestones) {
        const failedMilestones = milestones.filter(m => !m.success);
        if (failedMilestones.length === 0) {
            return ['Phase 1 complete - proceed to Phase 2: Linting Excellence'];
        }
        const steps = [];
        failedMilestones.forEach(m => {
            steps.push(...m.recommendations);
        });
        return [...new Set(steps)]; // Remove duplicates
    }
    generatePhase2NextSteps(milestones) {
        const failedMilestones = milestones.filter(m => !m.success);
        if (failedMilestones.length === 0) {
            return ['Phase 2 complete - proceed to Phase 3: Enterprise Intelligence Transformation'];
        }
        const steps = [];
        failedMilestones.forEach(m => {
            steps.push(...m.recommendations);
        });
        return [...new Set(steps)];
    }
    generatePhase3NextSteps(milestones) {
        const failedMilestones = milestones.filter(m => !m.success);
        if (failedMilestones.length === 0) {
            return ['Phase 3 complete - proceed to Phase 4: Performance Optimization'];
        }
        const steps = [];
        failedMilestones.forEach(m => {
            steps.push(...m.recommendations);
        });
        return [...new Set(steps)];
    }
    generatePhase4NextSteps(milestones) {
        const failedMilestones = milestones.filter(m => !m.success);
        if (failedMilestones.length === 0) {
            return ['Perfect Codebase Campaign Complete! 🎉'];
        }
        const steps = [];
        failedMilestones.forEach(m => {
            steps.push(...m.recommendations);
        });
        return [...new Set(steps)];
    }
    /**
     * Validate all phases in sequence
     */
    async validateAllPhases() {
        console.log('🔍 Running comprehensive campaign validation...');
        const results = await Promise.all([
            this.validatePhase1(),
            this.validatePhase2(),
            this.validatePhase3(),
            this.validatePhase4(),
        ]);
        const overallSuccess = results.every(r => r.overallSuccess);
        const overallCompletion = Math.round(results.reduce((sum, r) => sum + r.completionPercentage, 0) / results.length);
        console.log(`🎯 Campaign Validation Complete: ${overallSuccess ? 'SUCCESS' : 'IN PROGRESS'} (${overallCompletion}%)`);
        return results;
    }
    /**
     * Get validation history
     */
    getValidationHistory() {
        return [...this.validationHistory];
    }
    /**
     * Export validation results
     */
    async exportValidationResults(filePath) {
        const allPhaseResults = await this.validateAllPhases();
        const exportData = {
            timestamp: new Date().toISOString(),
            campaignId: 'perfect-codebase-campaign',
            phases: allPhaseResults,
            summary: {
                overallSuccess: allPhaseResults.every(r => r.overallSuccess),
                completionPercentage: Math.round(allPhaseResults.reduce((sum, r) => sum + r.completionPercentage, 0) /
                    allPhaseResults.length),
                totalMilestones: allPhaseResults.reduce((sum, r) => sum + r.milestones.length, 0),
                passedMilestones: allPhaseResults.reduce((sum, r) => sum + r.milestones.filter(m => m.success).length, 0),
            },
        };
        fs.writeFileSync(filePath, JSON.stringify(exportData, null, 2));
        console.log(`📊 Validation results exported to: ${filePath}`);
    }
}
exports.MilestoneValidationSystem = MilestoneValidationSystem;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,