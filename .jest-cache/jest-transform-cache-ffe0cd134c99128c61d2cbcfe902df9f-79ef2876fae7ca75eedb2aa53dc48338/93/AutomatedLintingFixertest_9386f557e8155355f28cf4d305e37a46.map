{"file":"/Users/GregCastro/Desktop/WhatToEatNext/backups/conservative-wave-2025-08-11T05-21-33-410Z/src/services/linting/__tests__/AutomatedLintingFixer.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/backups/conservative-wave-2025-08-11T05-21-33-410Z/src/services/linting/__tests__/AutomatedLintingFixer.test.ts"],"sourcesContent":["/**\n * AutomatedLintingFixer Tests\n *\n * Comprehensive test suite for the automated linting fixer with safety protocols\n */\n\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\n\nimport {\n  AutomatedLintingFixer,\n  AutomatedFixResult,\n  BatchProcessingOptions,\n  SafetyProtocols,\n} from '../AutomatedLintingFixer';\nimport { LintingIssue, CategorizedErrors } from '../LintingErrorAnalyzer';\n\n// Mock external dependencies\njest.mock('child_process');\njest.mock('fs');\n\nconst mockExecSync = execSync as jest.MockedFunction<typeof execSync>;\nconst mockFs = fs as jest.Mocked<typeof fs>;\n\ndescribe('AutomatedLintingFixer', () => {\n  let fixer: AutomatedLintingFixer;\n  let mockCategorizedErrors: CategorizedErrors;\n  let mockLintingIssues: LintingIssue[];\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Setup default mocks\n    mockExecSync.mockReturnValue('');\n    mockFs.readFileSync.mockReturnValue('const unusedVar = \"test\";\\nconsole.log(\"hello\");');\n    mockFs.writeFileSync.mockImplementation(() => {});\n    mockFs.existsSync.mockReturnValue(true);\n\n    // Create fixer instance\n    fixer = new AutomatedLintingFixer('/test/workspace', {\n      enableRollback: true,\n      validateBeforeFix: true,\n      validateAfterFix: true,\n      maxFailuresBeforeStop: 3,\n    });\n\n    // Setup mock linting issues\n    mockLintingIssues = [\n      {\n        id: 'test-1',\n        file: 'src/test.ts',\n        line: 1,\n        column: 7,\n        rule: '@typescript-eslint/no-unused-vars',\n        message: \"'unusedVar' is defined but never used\",\n        severity: 'warning',\n        category: { primary: 'typescript', secondary: 'no-unused-vars', priority: 2 },\n        autoFixable: true,\n        resolutionStrategy: {\n          type: 'auto-fix',\n          confidence: 0.8,\n          riskLevel: 'low',\n          requiredValidation: [],\n          estimatedEffort: 1,\n          dependencies: [],\n        },\n      },\n      {\n        id: 'test-2',\n        file: 'src/imports.ts',\n        line: 1,\n        column: 1,\n        rule: 'import/order',\n        message: 'Import order is incorrect',\n        severity: 'warning',\n        category: { primary: 'import', secondary: 'order', priority: 3 },\n        autoFixable: true,\n        resolutionStrategy: {\n          type: 'auto-fix',\n          confidence: 0.9,\n          riskLevel: 'low',\n          requiredValidation: [],\n          estimatedEffort: 0.5,\n          dependencies: [],\n        },\n      },\n    ];\n\n    mockCategorizedErrors = {\n      total: mockLintingIssues.length,\n      errors: 0,\n      warnings: mockLintingIssues.length,\n      byCategory: {\n        typescript: [mockLintingIssues[0]],\n        import: [mockLintingIssues[1]],\n      },\n      byPriority: {\n        2: [mockLintingIssues[0]],\n        3: [mockLintingIssues[1]],\n      },\n      byFile: {\n        'src/test.ts': [mockLintingIssues[0]],\n        'src/imports.ts': [mockLintingIssues[1]],\n      },\n      autoFixable: mockLintingIssues,\n      requiresManualReview: [],\n    };\n  });\n\n  describe('applyAutomatedFixes', () => {\n    it('should successfully apply automated fixes with default options', async () => {\n      // Mock successful validation\n      mockExecSync\n        .mockReturnValueOnce('') // build\n        .mockReturnValueOnce('') // type-check\n        .mockReturnValueOnce('') // lint\n        .mockReturnValueOnce('stash@{0}: automated-linting-fixes') // git stash\n        .mockReturnValueOnce('') // eslint fix file 1\n        .mockReturnValueOnce('') // eslint fix file 2\n        .mockReturnValueOnce('') // final build\n        .mockReturnValueOnce('') // final type-check\n        .mockReturnValueOnce(''); // final lint\n\n      const result = await fixer.applyAutomatedFixes(mockCategorizedErrors);\n\n      expect(result.success).toBe(true);\n      expect(result.fixedIssues).toBe(2);\n      expect(result.failedIssues).toBe(0);\n      expect(result.processedFiles).toHaveLength(2);\n      expect(result.rollbackInfo).toBeDefined();\n    });\n\n    it('should handle batch processing with custom batch size', async () => {\n      const batchOptions: Partial<BatchProcessingOptions> = {\n        batchSize: 1,\n        validateAfterEachBatch: true,\n      };\n\n      // Mock successful operations\n      mockExecSync.mockReturnValue('');\n\n      const result = await fixer.applyAutomatedFixes(mockCategorizedErrors, batchOptions);\n\n      expect(result.success).toBe(true);\n      expect(result.fixedIssues).toBe(2);\n      expect(mockExecSync).toHaveBeenCalledWith(expect.stringContaining('eslint --config'), expect.any(Object));\n    });\n\n    it('should perform rollback on validation failure', async () => {\n      // Mock validation failure after first batch\n      mockExecSync\n        .mockReturnValueOnce('') // initial build\n        .mockReturnValueOnce('') // initial type-check\n        .mockReturnValueOnce('') // initial lint\n        .mockReturnValueOnce('stash@{0}: automated-linting-fixes') // git stash\n        .mockReturnValueOnce('') // eslint fix\n        .mockImplementationOnce(() => {\n          throw new Error('Build failed');\n        }) // build validation fails\n        .mockReturnValueOnce(''); // rollback\n\n      const result = await fixer.applyAutomatedFixes(mockCategorizedErrors, {\n        batchSize: 1,\n        validateAfterEachBatch: true,\n      });\n\n      expect(result.metrics.rollbacksPerformed).toBe(1);\n      expect(mockExecSync).toHaveBeenCalledWith(expect.stringContaining('git stash pop'), expect.any(Object));\n    });\n\n    it('should skip preserved files', async () => {\n      const preservedIssue: LintingIssue = {\n        ...mockLintingIssues[0],\n        file: 'src/calculations/astrological.ts',\n      };\n\n      const categorizedWithPreserved: CategorizedErrors = {\n        ...mockCategorizedErrors,\n        autoFixable: [preservedIssue],\n      };\n\n      mockExecSync.mockReturnValue('');\n\n      const result = await fixer.applyAutomatedFixes(categorizedWithPreserved);\n\n      expect(result.fixedIssues).toBe(0);\n      expect(result.processedFiles).toHaveLength(0);\n    });\n\n    it('should handle dry run mode', async () => {\n      mockExecSync.mockReturnValue('');\n\n      const result = await fixer.applyAutomatedFixes(mockCategorizedErrors, {\n        dryRun: true,\n      });\n\n      expect(result.success).toBe(true);\n      expect(result.fixedIssues).toBe(2);\n      // Should not actually run eslint fix commands in dry run\n      expect(mockExecSync).not.toHaveBeenCalledWith(expect.stringContaining('eslint --config'), expect.any(Object));\n    });\n\n    it('should stop after max failures', async () => {\n      // Mock failures\n      mockExecSync\n        .mockReturnValueOnce('') // initial validation\n        .mockReturnValueOnce('') // initial validation\n        .mockReturnValueOnce('') // initial validation\n        .mockReturnValueOnce('stash@{0}') // git stash\n        .mockImplementationOnce(() => {\n          throw new Error('Fix failed');\n        }) // first fix fails\n        .mockImplementationOnce(() => {\n          throw new Error('Build failed');\n        }) // validation fails\n        .mockReturnValueOnce('') // rollback\n        .mockImplementationOnce(() => {\n          throw new Error('Fix failed');\n        }) // second fix fails\n        .mockImplementationOnce(() => {\n          throw new Error('Build failed');\n        }) // validation fails\n        .mockReturnValueOnce('') // rollback\n        .mockImplementationOnce(() => {\n          throw new Error('Fix failed');\n        }); // third fix fails\n\n      const result = await fixer.applyAutomatedFixes(mockCategorizedErrors, {\n        batchSize: 1,\n        continueOnError: true,\n      });\n\n      expect(result.success).toBe(false);\n      expect(result.metrics.rollbacksPerformed).toBeGreaterThan(0);\n    });\n  });\n\n  describe('handleUnusedVariables', () => {\n    it('should prefix unused variables with underscore', async () => {\n      const unusedVarIssues = [mockLintingIssues[0]];\n\n      const result = await fixer.handleUnusedVariables(unusedVarIssues, {\n        prefixWithUnderscore: true,\n        removeCompletely: false,\n      });\n\n      expect(result.success).toBe(true);\n      expect(result.fixedIssues).toBe(1);\n      expect(mockFs.writeFileSync).toHaveBeenCalledWith(\n        expect.stringContaining('src/test.ts'),\n        expect.stringContaining('_unusedVar'),\n      );\n    });\n\n    it('should skip domain files when configured', async () => {\n      const domainIssue: LintingIssue = {\n        ...mockLintingIssues[0],\n        file: 'src/calculations/planetary.ts',\n        domainContext: {\n          isAstrologicalCalculation: true,\n          isCampaignSystem: false,\n          isTestFile: false,\n          isScriptFile: false,\n          requiresSpecialHandling: true,\n        },\n      };\n\n      const result = await fixer.handleUnusedVariables([domainIssue], {\n        skipDomainFiles: true,\n      });\n\n      expect(result.fixedIssues).toBe(0);\n      expect(mockFs.writeFileSync).not.toHaveBeenCalled();\n    });\n\n    it('should skip test files when configured', async () => {\n      const testIssue: LintingIssue = {\n        ...mockLintingIssues[0],\n        file: 'src/test.spec.ts',\n        domainContext: {\n          isAstrologicalCalculation: false,\n          isCampaignSystem: false,\n          isTestFile: true,\n          isScriptFile: false,\n          requiresSpecialHandling: true,\n        },\n      };\n\n      const result = await fixer.handleUnusedVariables([testIssue], {\n        skipTestFiles: true,\n      });\n\n      expect(result.fixedIssues).toBe(0);\n      expect(mockFs.writeFileSync).not.toHaveBeenCalled();\n    });\n\n    it('should handle file read/write errors gracefully', async () => {\n      mockFs.readFileSync.mockImplementationOnce(() => {\n        throw new Error('File read error');\n      });\n\n      const result = await fixer.handleUnusedVariables([mockLintingIssues[0]]);\n\n      expect(result.success).toBe(false);\n      expect(result.failedIssues).toBe(1);\n      expect(result.errors).toHaveLength(1);\n      expect(result.errors[0].severity).toBe('error');\n    });\n  });\n\n  describe('optimizeImports', () => {\n    it('should optimize import statements successfully', async () => {\n      const importIssues = [mockLintingIssues[1]];\n      mockExecSync.mockReturnValue('');\n\n      const result = await fixer.optimizeImports(importIssues, {\n        removeDuplicates: true,\n        organizeImports: true,\n        sortImports: true,\n      });\n\n      expect(result.success).toBe(true);\n      expect(result.fixedIssues).toBe(1);\n      expect(mockExecSync).toHaveBeenCalledWith(expect.stringContaining('eslint --config'), expect.any(Object));\n    });\n\n    it('should group issues by file for batch processing', async () => {\n      const multipleImportIssues = [\n        mockLintingIssues[1],\n        {\n          ...mockLintingIssues[1],\n          id: 'test-3',\n          rule: 'import/newline-after-import',\n        },\n      ];\n\n      mockExecSync.mockReturnValue('');\n\n      const result = await fixer.optimizeImports(multipleImportIssues);\n\n      expect(result.success).toBe(true);\n      expect(result.fixedIssues).toBe(2);\n      expect(result.processedFiles).toHaveLength(1); // Same file, so only one processed\n    });\n\n    it('should handle eslint command failures', async () => {\n      mockExecSync.mockImplementationOnce(() => {\n        throw new Error('ESLint command failed');\n      });\n\n      const result = await fixer.optimizeImports([mockLintingIssues[1]]);\n\n      expect(result.success).toBe(false);\n      expect(result.failedIssues).toBe(1);\n      expect(result.errors).toHaveLength(1);\n    });\n  });\n\n  describe('improveTypeAnnotations', () => {\n    it('should improve simple type annotations', async () => {\n      const typeIssue: LintingIssue = {\n        ...mockLintingIssues[0],\n        rule: '@typescript-eslint/no-explicit-any',\n        message: \"'any' type should be replaced with specific type in parameter\",\n        autoFixable: true,\n      };\n\n      mockExecSync.mockReturnValue('');\n\n      const result = await fixer.improveTypeAnnotations([typeIssue], {\n        maxComplexity: 'simple',\n        inferFromUsage: true,\n      });\n\n      expect(result.success).toBe(true);\n      expect(result.fixedIssues).toBe(1);\n    });\n\n    it('should skip complex type issues when configured for simple only', async () => {\n      const complexTypeIssue: LintingIssue = {\n        ...mockLintingIssues[0],\n        rule: '@typescript-eslint/no-explicit-any',\n        message: \"'any' type in complex generic constraint\",\n        autoFixable: false,\n      };\n\n      const result = await fixer.improveTypeAnnotations([complexTypeIssue], {\n        maxComplexity: 'simple',\n      });\n\n      expect(result.fixedIssues).toBe(0);\n    });\n\n    it('should preserve explicit any in specified patterns', async () => {\n      const astroTypeIssue: LintingIssue = {\n        ...mockLintingIssues[0],\n        file: 'src/calculations/planetary.ts',\n        rule: '@typescript-eslint/no-explicit-any',\n      };\n\n      const result = await fixer.improveTypeAnnotations([astroTypeIssue], {\n        preserveExplicitAny: ['**/calculations/**'],\n      });\n\n      expect(result.fixedIssues).toBe(0);\n    });\n  });\n\n  describe('validateFixes', () => {\n    it('should run comprehensive validation successfully', async () => {\n      mockExecSync\n        .mockReturnValueOnce('') // build\n        .mockReturnValueOnce('') // type-check\n        .mockReturnValueOnce('') // lint\n        .mockReturnValueOnce(''); // test\n\n      const results = await fixer.validateFixes();\n\n      expect(results).toHaveLength(4);\n      expect(results.every(r => r.success)).toBe(true);\n      expect(results.map(r => r.type)).toEqual(['build', 'type-check', 'lint', 'test']);\n    });\n\n    it('should handle validation failures gracefully', async () => {\n      mockExecSync\n        .mockImplementationOnce(() => {\n          throw new Error('Build failed');\n        })\n        .mockReturnValueOnce('') // type-check\n        .mockReturnValueOnce('') // lint\n        .mockReturnValueOnce(''); // test\n\n      const results = await fixer.validateFixes();\n\n      expect(results[0].success).toBe(false);\n      expect(results[0].type).toBe('build');\n      expect(results[0].details).toContain('Build failed');\n    });\n\n    it('should skip test validation if no jest config exists', async () => {\n      mockFs.existsSync.mockReturnValue(false);\n      mockExecSync\n        .mockReturnValueOnce('') // build\n        .mockReturnValueOnce('') // type-check\n        .mockReturnValueOnce(''); // lint\n\n      const results = await fixer.validateFixes();\n\n      expect(results).toHaveLength(3);\n      expect(results.map(r => r.type)).not.toContain('test');\n    });\n  });\n\n  describe('performRollback', () => {\n    it('should perform rollback successfully', async () => {\n      // First create a backup\n      mockExecSync\n        .mockReturnValueOnce('') // git add and stash\n        .mockReturnValueOnce('stash@{0}: automated-linting-fixes-test'); // git stash list\n\n      await fixer.applyAutomatedFixes(mockCategorizedErrors, { createBackups: true });\n\n      // Then perform rollback\n      mockExecSync.mockReturnValueOnce(''); // git stash pop\n\n      const rollbackSuccess = await fixer.performRollback();\n\n      expect(rollbackSuccess).toBe(true);\n      expect(mockExecSync).toHaveBeenCalledWith(expect.stringContaining('git stash pop'), expect.any(Object));\n    });\n\n    it('should handle rollback failure gracefully', async () => {\n      // Create backup first\n      mockExecSync.mockReturnValueOnce('').mockReturnValueOnce('stash@{0}: test');\n\n      await fixer.applyAutomatedFixes(mockCategorizedErrors, { createBackups: true });\n\n      // Mock rollback failure\n      mockExecSync.mockImplementationOnce(() => {\n        throw new Error('Rollback failed');\n      });\n\n      const rollbackSuccess = await fixer.performRollback();\n\n      expect(rollbackSuccess).toBe(false);\n    });\n\n    it('should return false when no rollback info available', async () => {\n      const rollbackSuccess = await fixer.performRollback();\n      expect(rollbackSuccess).toBe(false);\n    });\n  });\n\n  describe('Safety Protocols', () => {\n    it('should respect safety protocols configuration', () => {\n      const strictSafetyProtocols: SafetyProtocols = {\n        enableRollback: true,\n        validateBeforeFix: true,\n        validateAfterFix: true,\n        maxFailuresBeforeStop: 1,\n        requireManualApproval: true,\n        preservePatterns: ['**/critical/**'],\n      };\n\n      const strictFixer = new AutomatedLintingFixer('/test', strictSafetyProtocols);\n      expect(strictFixer).toBeDefined();\n    });\n\n    it('should preserve files matching safety patterns', async () => {\n      const criticalIssue: LintingIssue = {\n        ...mockLintingIssues[0],\n        file: 'src/calculations/critical-astro.ts',\n      };\n\n      const result = await fixer.applyAutomatedFixes({\n        ...mockCategorizedErrors,\n        autoFixable: [criticalIssue],\n      });\n\n      expect(result.fixedIssues).toBe(0);\n    });\n\n    it('should skip high-risk issues', async () => {\n      const highRiskIssue: LintingIssue = {\n        ...mockLintingIssues[0],\n        resolutionStrategy: {\n          ...mockLintingIssues[0].resolutionStrategy,\n          riskLevel: 'high',\n        },\n      };\n\n      const result = await fixer.applyAutomatedFixes({\n        ...mockCategorizedErrors,\n        autoFixable: [highRiskIssue],\n      });\n\n      expect(result.fixedIssues).toBe(0);\n    });\n\n    it('should skip low-confidence fixes', async () => {\n      const lowConfidenceIssue: LintingIssue = {\n        ...mockLintingIssues[0],\n        resolutionStrategy: {\n          ...mockLintingIssues[0].resolutionStrategy,\n          confidence: 0.3,\n        },\n      };\n\n      const result = await fixer.applyAutomatedFixes({\n        ...mockCategorizedErrors,\n        autoFixable: [lowConfidenceIssue],\n      });\n\n      expect(result.fixedIssues).toBe(0);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should collect and report errors properly', async () => {\n      mockExecSync\n        .mockReturnValueOnce('') // initial validation\n        .mockReturnValueOnce('') // initial validation\n        .mockReturnValueOnce('') // initial validation\n        .mockReturnValueOnce('stash@{0}') // backup\n        .mockImplementationOnce(() => {\n          throw new Error('Fix command failed');\n        });\n\n      const result = await fixer.applyAutomatedFixes(mockCategorizedErrors);\n\n      expect(result.errors).toHaveLength(1);\n      expect(result.errors[0].severity).toBe('error');\n      expect(result.errors[0].message).toContain('batch');\n    });\n\n    it('should perform emergency rollback on critical failure', async () => {\n      mockExecSync\n        .mockReturnValueOnce('') // initial validation\n        .mockReturnValueOnce('') // initial validation\n        .mockReturnValueOnce('') // initial validation\n        .mockReturnValueOnce('stash@{0}') // backup\n        .mockImplementationOnce(() => {\n          throw new Error('Critical system failure');\n        })\n        .mockReturnValueOnce(''); // emergency rollback\n\n      const result = await fixer.applyAutomatedFixes(mockCategorizedErrors);\n\n      expect(result.success).toBe(false);\n      expect(result.metrics.rollbacksPerformed).toBe(1);\n      expect(result.errors.some(e => e.severity === 'critical')).toBe(true);\n    });\n  });\n\n  describe('Metrics Collection', () => {\n    it('should collect comprehensive metrics', async () => {\n      mockExecSync.mockReturnValue('');\n\n      const result = await fixer.applyAutomatedFixes(mockCategorizedErrors);\n\n      expect(result.metrics).toBeDefined();\n      expect(result.metrics.startTime).toBeInstanceOf(Date);\n      expect(result.metrics.endTime).toBeInstanceOf(Date);\n      expect(result.metrics.totalTime).toBeGreaterThan(0);\n      expect(result.metrics.filesProcessed).toBe(2);\n      expect(result.metrics.issuesAttempted).toBe(2);\n      expect(result.metrics.issuesFixed).toBe(2);\n      expect(result.metrics.issuesFailed).toBe(0);\n    });\n\n    it('should track rollback metrics', async () => {\n      mockExecSync\n        .mockReturnValueOnce('') // validation\n        .mockReturnValueOnce('') // validation\n        .mockReturnValueOnce('') // validation\n        .mockReturnValueOnce('stash@{0}') // backup\n        .mockReturnValueOnce('') // fix\n        .mockImplementationOnce(() => {\n          throw new Error('Validation failed');\n        }) // validation fails\n        .mockReturnValueOnce(''); // rollback\n\n      const result = await fixer.applyAutomatedFixes(mockCategorizedErrors, {\n        validateAfterEachBatch: true,\n      });\n\n      expect(result.metrics.rollbacksPerformed).toBe(1);\n    });\n  });\n});\n"],"version":3}