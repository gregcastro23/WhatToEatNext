{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/scripts/validation/__tests__/ServiceIntegrationValidator.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/scripts/validation/__tests__/ServiceIntegrationValidator.test.ts"],"sourcesContent":["/**\n * Test Suite for Service Integration Validator\n *\n * This test suite validates the service integration validation functionality\n * including API endpoint verification, service method validation, and quality assurance reporting.\n */\n\nimport { execSync } from 'child_process';\nimport fs from 'fs';\nimport { ServiceIntegrationConfig, ServiceIntegrationValidator } from '../ServiceIntegrationValidator';\n\n// Mock external dependencies\njest.mock('fs');\njest.mock('child_process');\n\nconst mockFs = fs as jest.Mocked<typeof fs>;\nconst mockExecSync = execSync as jest.MockedFunction<typeof execSync>;\n\ndescribe('ServiceIntegrationValidator', () => {\n  let validator: ServiceIntegrationValidator;\n  let mockProcessedFiles: string[];\n\n  beforeEach(() => {\n    // Reset mocks\n    jest.clearAllMocks();\n\n    // Setup default configuration\n    const config: Partial<ServiceIntegrationConfig> = {\n      enableApiEndpointValidation: true,\n      enableServiceMethodValidation: true,\n      enableConfigurationValidation: true,\n      enableIntegrationTests: true,\n      apiTimeout: 10000,\n      testTimeout: 30000,\n      qualityTarget: 90,\n      buildStabilityTarget: 100,\n      logLevel: 'info'\n    };\n\n    validator = new ServiceIntegrationValidator(config);\n\n    // Setup mock processed files\n    mockProcessedFiles = [\n      '/project/src/services/ApiService.ts',\n      '/project/src/services/UserService.ts',\n      '/project/src/components/TestComponent.tsx',\n      '/project/src/utils/helper.ts'\n    ];\n\n    // Mock successful executions by default\n    mockExecSync.mockReturnValue(Buffer.from(''));\n    mockFs.readFileSync.mockReturnValue('export default Service;');\n    mockFs.existsSync.mockReturnValue(true);\n    mockFs.mkdirSync.mockReturnValue(undefined);\n    mockFs.writeFileSync.mockReturnValue(undefined);\n  });\n\n  describe('Service Integration Validation', () => {\n    test('should validate service integration successfully', async () => {\n      // Mock service file content\n      mockFs.readFileSync.mockImplementation((path) => {\n        if (path.toString().includes('ApiService.ts')) {\n          return `\n            export class ApiService {\n              async fetchData() {\n                return fetch('/api/data');\n              }\n\n              async postData(data: any) {\n                return fetch('/api/submit', { method: 'POST' });\n              }\n            }\n          `;\n        }\n        return 'export default Service;';\n      });\n\n      // Mock successful lint and build\n      mockExecSync.mockImplementation((cmd) => {\n        if (cmd.toString().includes('yarn lint')) {\n          return Buffer.from('[]'); // No lint errors\n        }\n        if (cmd.toString().includes('yarn tsc')) {\n          return Buffer.from(''); // No build errors\n        }\n        if (cmd.toString().includes('yarn test')) {\n          return Buffer.from('5 passed, 0 failed, 5 total');\n        }\n        return Buffer.from('');\n      });\n\n      const report = await validator.validateServiceIntegration(mockProcessedFiles, 'test-batch-1');\n\n      expect(report.batchId).toBe('test-batch-1');\n      expect(report.processedServices.length).toBeGreaterThan(0);\n      expect(report.qualityMetrics).toBeDefined();\n      expect(report.targetStatus.readyForProduction).toBeDefined();\n    });\n\n    test('should identify service files correctly', async () => {\n      const mixedFiles = [\n        '/project/src/services/ApiService.ts',\n        '/project/src/components/Component.tsx',\n        '/project/src/utils/helper.ts',\n        '/project/src/services/UserService.ts',\n        '/project/src/api/routes.ts'\n      ];\n\n      const report = await validator.validateServiceIntegration(mixedFiles, 'test-batch-1');\n\n      // Should identify 3 service files: ApiService.ts, UserService.ts, and routes.ts\n      expect(report.processedServices.length).toBe(3);\n      expect(report.processedServices).toContain('/project/src/services/ApiService.ts');\n      expect(report.processedServices).toContain('/project/src/services/UserService.ts');\n      expect(report.processedServices).toContain('/project/src/api/routes.ts');\n    });\n\n    test('should calculate quality metrics correctly', async () => {\n      // Mock baseline metrics\n      const baselineMetrics = { unusedVariables: 100, buildErrors: 0 };\n\n      // Mock current state with reduced unused variables\n      mockExecSync.mockImplementation((cmd) => {\n        if (cmd.toString().includes('yarn lint')) {\n          // Simulate 10 remaining unused variables (90% reduction)\n          const lintResults = Array.from({ length: 10 }, () => ({\n            messages: [{ ruleId: '@typescript-eslint/no-unused-vars' }]\n          }));\n          return Buffer.from(JSON.stringify(lintResults));\n        }\n        if (cmd.toString().includes('yarn tsc')) {\n          return Buffer.from(''); // No build errors\n        }\n        return Buffer.from('');\n      });\n\n      const report = await validator.validateServiceIntegration(\n        mockProcessedFiles,\n        'test-batch-1',\n        baselineMetrics\n      );\n\n      expect(report.qualityMetrics.unusedVariableReduction).toBe(90);\n      expect(report.qualityMetrics.buildStabilityScore).toBe(100);\n      expect(report.qualityMetrics.targetAchievement.reductionAchieved).toBe(true);\n      expect(report.qualityMetrics.targetAchievement.stabilityAchieved).toBe(true);\n    });\n\n    test('should handle quality targets not met', async () => {\n      // Mock insufficient reduction and build errors\n      mockExecSync.mockImplementation((cmd) => {\n        if (cmd.toString().includes('yarn lint')) {\n          // Simulate 50 remaining unused variables (50% reduction)\n          const lintResults = Array.from({ length: 50 }, () => ({\n            messages: [{ ruleId: '@typescript-eslint/no-unused-vars' }]\n          }));\n          return Buffer.from(JSON.stringify(lintResults));\n        }\n        if (cmd.toString().includes('yarn tsc')) {\n          // Simulate build errors\n          const error = new Error('Build failed') as any;\n          error.stdout = 'error TS2322: Type error\\nerror TS2339: Property error';\n          throw error;\n        }\n        return Buffer.from('');\n      });\n\n      const baselineMetrics = { unusedVariables: 100, buildErrors: 0 };\n      const report = await validator.validateServiceIntegration(\n        mockProcessedFiles,\n        'test-batch-1',\n        baselineMetrics\n      );\n\n      expect(report.qualityMetrics.unusedVariableReduction).toBe(50);\n      expect(report.qualityMetrics.buildStabilityScore).toBeLessThan(100);\n      expect(report.qualityMetrics.targetAchievement.reductionAchieved).toBe(false);\n      expect(report.qualityMetrics.targetAchievement.stabilityAchieved).toBe(false);\n      expect(report.targetStatus.readyForProduction).toBe(false);\n    });\n  });\n\n  describe('API Endpoint Validation', () => {\n    test('should analyze API endpoints correctly', async () => {\n      mockFs.readFileSync.mockReturnValue(`\n        export class ApiService {\n          async fetchUsers() {\n            return fetch('/api/users');\n          }\n\n          async createUser(userData: any) {\n            return axios.post('/api/users', userData);\n          }\n\n          async updateUser(id: string, data: any) {\n            return fetch(\\`/api/users/\\${id}\\`, { method: 'PUT' });\n          }\n        }\n      `);\n\n      const report = await validator.validateServiceIntegration(mockProcessedFiles, 'test-batch-1');\n\n      const apiResults = report.serviceResults.filter(r => r.validationType === 'api-endpoint');\n      expect(apiResults.length).toBeGreaterThan(0);\n\n      const apiResult = apiResults[0];\n      expect(apiResult.details.apiEndpoints).toBeDefined();\n      expect(apiResult.details.apiEndpoints?.length).toBeGreaterThan(0);\n\n      const endpoints = apiResult.details.apiEndpoints!;\n      expect(endpoints.some(e => e.endpoint === '/api/users')).toBe(true);\n    });\n\n    test('should handle services with no API endpoints', async () => {\n      mockFs.readFileSync.mockReturnValue(`\n        export class UtilityService {\n          formatData(data: any) {\n            return data.toString();\n          }\n        }\n      `);\n\n      const report = await validator.validateServiceIntegration(mockProcessedFiles, 'test-batch-1');\n\n      const apiResults = report.serviceResults.filter(r => r.validationType === 'api-endpoint');\n      const apiResult = apiResults[0];\n\n      expect(apiResult.warnings).toContain('No API endpoints found in service file');\n      expect(apiResult.recommendations).toContain('Verify if this service should contain API endpoints');\n    });\n\n    test('should detect invalid API endpoints', async () => {\n      mockFs.readFileSync.mockReturnValue(`\n        export class ApiService {\n          async fetchData() {\n            return fetch('invalid-endpoint');\n          }\n        }\n      `);\n\n      const report = await validator.validateServiceIntegration(mockProcessedFiles, 'test-batch-1');\n\n      const apiResults = report.serviceResults.filter(r => r.validationType === 'api-endpoint');\n      const apiResult = apiResults[0];\n\n      expect(apiResult.passed).toBe(false);\n      expect(apiResult.errors.some(e => e.includes('validation failed'))).toBe(true);\n    });\n  });\n\n  describe('Service Method Validation', () => {\n    test('should analyze service methods correctly', async () => {\n      mockFs.readFileSync.mockReturnValue(`\n        export class UserService {\n          async getUser(id: string) {\n            return this.fetchUser(id);\n          }\n\n          async createUser(userData: UserData) {\n            return this.saveUser(userData);\n          }\n\n          private fetchUser(id: string) {\n            return fetch(\\`/api/users/\\${id}\\`);\n          }\n        }\n\n        export const userService = new UserService();\n      `);\n\n      const report = await validator.validateServiceIntegration(mockProcessedFiles, 'test-batch-1');\n\n      const methodResults = report.serviceResults.filter(r => r.validationType === 'service-method');\n      expect(methodResults.length).toBeGreaterThan(0);\n\n      const methodResult = methodResults[0];\n      expect(methodResult.details.serviceMethods).toBeDefined();\n      expect(methodResult.details.serviceMethods?.length).toBeGreaterThan(0);\n\n      const methods = methodResult.details.serviceMethods!;\n      expect(methods.some(m => m.methodName === 'UserService')).toBe(true);\n      expect(methods.some(m => m.methodName === 'userService')).toBe(true);\n    });\n\n    test('should handle services with no exported methods', async () => {\n      mockFs.readFileSync.mockReturnValue(`\n        class InternalService {\n          private processData() {\n            return 'processed';\n          }\n        }\n      `);\n\n      const report = await validator.validateServiceIntegration(mockProcessedFiles, 'test-batch-1');\n\n      const methodResults = report.serviceResults.filter(r => r.validationType === 'service-method');\n      const methodResult = methodResults[0];\n\n      expect(methodResult.warnings).toContain('No exported service methods found');\n      expect(methodResult.recommendations).toContain('Verify if this service should export methods');\n    });\n  });\n\n  describe('Configuration Validation', () => {\n    test('should analyze configuration dependencies correctly', async () => {\n      mockFs.readFileSync.mockReturnValue(`\n        export class ConfigService {\n          private apiUrl = process.env.API_URL || 'http://localhost:3000';\n          private apiKey = process.env.API_KEY;\n          private timeout = config.timeout ?? 5000;\n\n          getConfig(key: string) {\n            return getConfig(key);\n          }\n        }\n      `);\n\n      const report = await validator.validateServiceIntegration(mockProcessedFiles, 'test-batch-1');\n\n      const configResults = report.serviceResults.filter(r => r.validationType === 'configuration');\n      expect(configResults.length).toBeGreaterThan(0);\n\n      const configResult = configResults[0];\n      expect(configResult.details.configDependencies).toBeDefined();\n      expect(configResult.details.configDependencies?.length).toBeGreaterThan(0);\n\n      const configs = configResult.details.configDependencies!;\n      expect(configs.some(c => c.key === 'API_URL')).toBe(true);\n      expect(configs.some(c => c.key === 'API_KEY')).toBe(true);\n    });\n\n    test('should identify required vs optional configuration', async () => {\n      mockFs.readFileSync.mockReturnValue(`\n        const requiredConfig = process.env.REQUIRED_API_KEY;\n        const optionalConfig = process.env.OPTIONAL_SETTING || 'default';\n      `);\n\n      const report = await validator.validateServiceIntegration(mockProcessedFiles, 'test-batch-1');\n\n      const configResults = report.serviceResults.filter(r => r.validationType === 'configuration');\n      const configResult = configResults[0];\n      const configs = configResult.details.configDependencies!;\n\n      const requiredConfig = configs.find(c => c.key === 'REQUIRED_API_KEY');\n      const optionalConfig = configs.find(c => c.key === 'OPTIONAL_SETTING');\n\n      expect(requiredConfig?.isRequired).toBe(true);\n      expect(optionalConfig?.isRequired).toBe(false);\n    });\n  });\n\n  describe('Integration Test Validation', () => {\n    test('should find and run integration tests', async () => {\n      // Mock test files exist\n      mockFs.existsSync.mockImplementation((path) => {\n        return path.toString().includes('.integration.test.ts');\n      });\n\n      // Mock successful test execution\n      mockExecSync.mockImplementation((cmd) => {\n        if (cmd.toString().includes('yarn test')) {\n          return Buffer.from('3 passed, 0 failed, 3 total');\n        }\n        return Buffer.from('');\n      });\n\n      const report = await validator.validateServiceIntegration(mockProcessedFiles, 'test-batch-1');\n\n      const testResults = report.serviceResults.filter(r => r.validationType === 'integration-test');\n      expect(testResults.length).toBeGreaterThan(0);\n\n      const testResult = testResults[0];\n      expect(testResult.passed).toBe(true);\n      expect(testResult.details.testResults).toEqual({\n        passed: 3,\n        failed: 0,\n        total: 3\n      });\n    });\n\n    test('should handle services with no integration tests', async () => {\n      // Mock no test files exist\n      mockFs.existsSync.mockReturnValue(false);\n\n      const report = await validator.validateServiceIntegration(mockProcessedFiles, 'test-batch-1');\n\n      const testResults = report.serviceResults.filter(r => r.validationType === 'integration-test');\n      const testResult = testResults[0];\n\n      expect(testResult.warnings).toContain('No integration test files found for service');\n      expect(testResult.recommendations).toContain('Consider adding integration tests for this service');\n    });\n\n    test('should handle failing integration tests', async () => {\n      mockFs.existsSync.mockReturnValue(true);\n\n      // Mock failing test execution\n      mockExecSync.mockImplementation((cmd) => {\n        if (cmd.toString().includes('yarn test')) {\n          const error = new Error('Tests failed') as any;\n          error.stdout = '2 passed, 1 failed, 3 total';\n          throw error;\n        }\n        return Buffer.from('');\n      });\n\n      const report = await validator.validateServiceIntegration(mockProcessedFiles, 'test-batch-1');\n\n      const testResults = report.serviceResults.filter(r => r.validationType === 'integration-test');\n      const testResult = testResults[0];\n\n      expect(testResult.passed).toBe(false);\n      expect(testResult.errors).toContain('1 integration tests failed');\n      expect(testResult.recommendations).toContain('Review and fix failing integration tests');\n    });\n  });\n\n  describe('Quality Metrics Calculation', () => {\n    test('should calculate unused variable reduction correctly', async () => {\n      const baselineMetrics = { unusedVariables: 200, buildErrors: 0 };\n\n      // Mock 20 remaining unused variables (90% reduction)\n      mockExecSync.mockImplementation((cmd) => {\n        if (cmd.toString().includes('yarn lint')) {\n          const lintResults = Array.from({ length: 20 }, () => ({\n            messages: [{ ruleId: '@typescript-eslint/no-unused-vars' }]\n          }));\n          return Buffer.from(JSON.stringify(lintResults));\n        }\n        if (cmd.toString().includes('yarn tsc')) {\n          return Buffer.from(''); // No build errors\n        }\n        return Buffer.from('');\n      });\n\n      const report = await validator.validateServiceIntegration(\n        mockProcessedFiles,\n        'test-batch-1',\n        baselineMetrics\n      );\n\n      expect(report.qualityMetrics.unusedVariableReduction).toBe(90);\n      expect(report.qualityMetrics.targetAchievement.reductionAchieved).toBe(true);\n    });\n\n    test('should calculate build stability score correctly', async () => {\n      // Mock build with errors\n      mockExecSync.mockImplementation((cmd) => {\n        if (cmd.toString().includes('yarn tsc')) {\n          const error = new Error('Build failed') as any;\n          error.stdout = 'error TS2322: Type error\\nerror TS2339: Property error\\nerror TS2345: Argument error';\n          throw error;\n        }\n        if (cmd.toString().includes('yarn lint')) {\n          return Buffer.from('[]');\n        }\n        return Buffer.from('');\n      });\n\n      const report = await validator.validateServiceIntegration(mockProcessedFiles, 'test-batch-1');\n\n      // 3 build errors should result in score of 70 (100 - 3*10)\n      expect(report.qualityMetrics.buildStabilityScore).toBe(70);\n      expect(report.qualityMetrics.targetAchievement.stabilityAchieved).toBe(false);\n    });\n\n    test('should calculate overall quality score correctly', async () => {\n      const baselineMetrics = { unusedVariables: 100, buildErrors: 0 };\n\n      // Mock perfect scenario\n      mockExecSync.mockImplementation((cmd) => {\n        if (cmd.toString().includes('yarn lint')) {\n          return Buffer.from('[]'); // No unused variables (100% reduction)\n        }\n        if (cmd.toString().includes('yarn tsc')) {\n          return Buffer.from(''); // No build errors (100% stability)\n        }\n        return Buffer.from('');\n      });\n\n      const report = await validator.validateServiceIntegration(\n        mockProcessedFiles,\n        'test-batch-1',\n        baselineMetrics\n      );\n\n      // Perfect scores should result in high overall quality\n      expect(report.qualityMetrics.overallQualityScore).toBeGreaterThan(95);\n      expect(report.overallAssessment).toBe('excellent');\n      expect(report.targetStatus.readyForProduction).toBe(true);\n    });\n  });\n\n  describe('Quality Assurance Reporting', () => {\n    test('should generate comprehensive quality report', async () => {\n      const report = await validator.validateServiceIntegration(mockProcessedFiles, 'test-batch-1');\n\n      expect(report.timestamp).toBeInstanceOf(Date);\n      expect(report.batchId).toBe('test-batch-1');\n      expect(report.processedServices).toBeDefined();\n      expect(report.qualityMetrics).toBeDefined();\n      expect(report.serviceResults).toBeDefined();\n      expect(report.overallAssessment).toBeDefined();\n      expect(report.actionItems).toBeDefined();\n      expect(report.recommendations).toBeDefined();\n      expect(report.targetStatus).toBeDefined();\n    });\n\n    test('should generate appropriate action items for unmet targets', async () => {\n      // Mock scenario where targets are not met\n      mockExecSync.mockImplementation((cmd) => {\n        if (cmd.toString().includes('yarn lint')) {\n          // 50% reduction (below 90% target)\n          const lintResults = Array.from({ length: 50 }, () => ({\n            messages: [{ ruleId: '@typescript-eslint/no-unused-vars' }]\n          }));\n          return Buffer.from(JSON.stringify(lintResults));\n        }\n        if (cmd.toString().includes('yarn tsc')) {\n          // Build errors (below 100% stability target)\n          const error = new Error('Build failed') as any;\n          error.stdout = 'error TS2322: Type error';\n          throw error;\n        }\n        return Buffer.from('');\n      });\n\n      const baselineMetrics = { unusedVariables: 100, buildErrors: 0 };\n      const report = await validator.validateServiceIntegration(\n        mockProcessedFiles,\n        'test-batch-1',\n        baselineMetrics\n      );\n\n      expect(report.actionItems).toContain('Achieve 90% unused variable reduction target');\n      expect(report.actionItems).toContain('Resolve all build errors to achieve 100% build stability');\n      expect(report.targetStatus.readyForProduction).toBe(false);\n    });\n\n    test('should export quality reports to file system', async () => {\n      await validator.validateServiceIntegration(mockProcessedFiles, 'test-batch-1');\n      await validator.exportQualityReports('./test-reports');\n\n      expect(mockFs.mkdirSync).toHaveBeenCalledWith('./test-reports', { recursive: true });\n      expect(mockFs.writeFileSync).toHaveBeenCalledWith(\n        expect.stringContaining('service-integration-test-batch-1.json'),\n        expect.any(String)\n      );\n    });\n  });\n\n  describe('Configuration Options', () => {\n    test('should respect disabled validation options', async () => {\n      const configWithDisabledValidations: Partial<ServiceIntegrationConfig> = {\n        enableApiEndpointValidation: false,\n        enableServiceMethodValidation: false,\n        enableConfigurationValidation: false,\n        enableIntegrationTests: false\n      };\n\n      const validatorWithDisabledValidations = new ServiceIntegrationValidator(configWithDisabledValidations);\n      const report = await validatorWithDisabledValidations.validateServiceIntegration(mockProcessedFiles, 'test-batch-1');\n\n      // Should have no service results since all validations are disabled\n      expect(report.serviceResults.length).toBe(0);\n    });\n\n    test('should respect timeout configurations', async () => {\n      const configWithShortTimeouts: Partial<ServiceIntegrationConfig> = {\n        apiTimeout: 1000,\n        testTimeout: 1000\n      };\n\n      const validatorWithShortTimeouts = new ServiceIntegrationValidator(configWithShortTimeouts);\n\n      // Mock long-running command\n      mockExecSync.mockImplementation((cmd) => {\n        if (cmd.toString().includes('yarn test')) {\n          // Simulate timeout\n          const error = new Error('Command timed out') as any;\n          error.code = 'TIMEOUT';\n          throw error;\n        }\n        return Buffer.from('');\n      });\n\n      const report = await validatorWithShortTimeouts.validateServiceIntegration(mockProcessedFiles, 'test-batch-1');\n\n      const testResults = report.serviceResults.filter(r => r.validationType === 'integration-test');\n      if (testResults.length > 0) {\n        expect(testResults[0].passed).toBe(false);\n      }\n    });\n  });\n\n  describe('Error Handling', () => {\n    test('should handle service file read errors gracefully', async () => {\n      mockFs.readFileSync.mockImplementation(() => {\n        throw new Error('File read error');\n      });\n\n      const report = await validator.validateServiceIntegration(mockProcessedFiles, 'test-batch-1');\n\n      // Should still generate a report even with file read errors\n      expect(report).toBeDefined();\n      expect(report.serviceResults.some(r => !r.passed)).toBe(true);\n    });\n\n    test('should handle command execution errors gracefully', async () => {\n      mockExecSync.mockImplementation(() => {\n        throw new Error('Command execution failed');\n      });\n\n      const report = await validator.validateServiceIntegration(mockProcessedFiles, 'test-batch-1');\n\n      // Should still generate a report even with command execution errors\n      expect(report).toBeDefined();\n      expect(report.qualityMetrics).toBeDefined();\n    });\n  });\n});\n"],"version":3}