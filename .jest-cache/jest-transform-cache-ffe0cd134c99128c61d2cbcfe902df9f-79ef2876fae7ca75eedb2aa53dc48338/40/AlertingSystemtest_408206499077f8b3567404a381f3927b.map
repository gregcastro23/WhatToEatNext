{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/__tests__/AlertingSystem.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/__tests__/AlertingSystem.test.ts"],"sourcesContent":["import AlertingSystem, { Alert, AlertRule } from '../AlertingSystem';\n\n// Mock the dependencies\njest.mock('../BuildPerformanceMonitor', () => ({\n  buildPerformanceMonitor: {\n    subscribe: jest.fn(),\n    getPerformanceSummary: jest.fn(() => ({\n      averageBuildTime: 45000,\n      averageCompilationTime: 30000,\n      averageBundleSize: 3 * 1024 * 1024,\n      averageMemoryUsage: 256 * 1024 * 1024,\n      cacheEfficiency: 85,\n      performanceScore: 75,\n    })),\n  },\n}));\n\njest.mock('../ErrorTrackingSystem', () => ({\n  errorTrackingSystem: {\n    subscribe: jest.fn(),\n    getErrorSummary: jest.fn(() => ({\n      totalActiveErrors: 150,\n      totalActiveLintViolations: 300,\n      totalRecentFailures: 2,\n      criticalIssues: 5,\n      automationOpportunities: 10,\n    })),\n    getCurrentQualityMetrics: jest.fn(() => ({\n      codeQualityScore: 75,\n      technicalDebtScore: 45,\n      maintainabilityIndex: 80,\n      errorRate: 0.05,\n      warningRate: 0.1,\n    })),\n  },\n}));\n\njest.mock('../QualityMetricsService', () => ({\n  qualityMetricsService: {\n    subscribe: jest.fn(),\n  },\n}));\n\ndescribe('AlertingSystem', () => {\n  let alertingSystem: AlertingSystem;\n  let mockSubscriber: jest.Mock;\n\n  beforeEach(() => {\n    // Clear all mocks\n    jest.clearAllMocks();\n\n    // Create a new instance for each test\n    alertingSystem = new (AlertingSystem as any)();\n\n    // Reset the instance to ensure clean state\n    alertingSystem.reset();\n\n    // Mock subscriber\n    mockSubscriber = jest.fn();\n    alertingSystem.subscribe(mockSubscriber);\n  });\n\n  afterEach(() => {\n    if (alertingSystem) {\n      alertingSystem.reset();\n    }\n  });\n\n  describe('Alert Rule Management', () => {\n    test('should add new alert rule', () => {\n      const rule: Omit<AlertRule, 'id'> = {\n        name: 'Test Rule',\n        description: 'Test alert rule',\n        type: 'performance',\n        metric: 'build_time',\n        condition: 'greater_than',\n        threshold: 60000,\n        severity: 'warning',\n        enabled: true,\n        cooldownMinutes: 10,\n        escalationMinutes: 30,\n        autoResponse: false,\n        responseActions: [],\n        notificationChannels: ['console'],\n      };\n\n      const ruleId = alertingSystem.addAlertRule(rule);\n      expect(ruleId).toBeDefined();\n      expect(ruleId).toMatch(/^rule-\\d+$/);\n\n      const rules = alertingSystem.getAlertRules();\n      const addedRule = rules.find(r => r.id === ruleId);\n      expect(addedRule).toBeDefined();\n      expect(addedRule?.name).toBe('Test Rule');\n    });\n\n    test('should update existing alert rule', () => {\n      const rule: Omit<AlertRule, 'id'> = {\n        name: 'Test Rule',\n        description: 'Test alert rule',\n        type: 'performance',\n        metric: 'build_time',\n        condition: 'greater_than',\n        threshold: 60000,\n        severity: 'warning',\n        enabled: true,\n        cooldownMinutes: 10,\n        escalationMinutes: 30,\n        autoResponse: false,\n        responseActions: [],\n        notificationChannels: ['console'],\n      };\n\n      const ruleId = alertingSystem.addAlertRule(rule);\n      const updated = alertingSystem.updateAlertRule(ruleId, {\n        threshold: 90000,\n        severity: 'error',\n      });\n\n      expect(updated).toBe(true);\n\n      const rules = alertingSystem.getAlertRules();\n      const updatedRule = rules.find(r => r.id === ruleId);\n      expect(updatedRule?.threshold).toBe(90000);\n      expect(updatedRule?.severity).toBe('error');\n    });\n\n    test('should delete alert rule', () => {\n      const rule: Omit<AlertRule, 'id'> = {\n        name: 'Test Rule',\n        description: 'Test alert rule',\n        type: 'performance',\n        metric: 'build_time',\n        condition: 'greater_than',\n        threshold: 60000,\n        severity: 'warning',\n        enabled: true,\n        cooldownMinutes: 10,\n        escalationMinutes: 30,\n        autoResponse: false,\n        responseActions: [],\n        notificationChannels: ['console'],\n      };\n\n      const ruleId = alertingSystem.addAlertRule(rule);\n      const deleted = alertingSystem.deleteAlertRule(ruleId);\n\n      expect(deleted).toBe(true);\n\n      const rules = alertingSystem.getAlertRules();\n      const deletedRule = rules.find(r => r.id === ruleId);\n      expect(deletedRule).toBeUndefined();\n    });\n  });\n\n  describe('Alert Generation', () => {\n    test('should create alert when threshold is exceeded', () => {\n      // Add a rule that should trigger based on mocked data\n      const ruleId = alertingSystem.addAlertRule({\n        name: 'High Error Count',\n        description: 'Too many TypeScript errors',\n        type: 'error',\n        metric: 'typescript_errors',\n        condition: 'greater_than',\n        threshold: 100, // Mock returns 150, so this should trigger\n        severity: 'warning',\n        enabled: true,\n        cooldownMinutes: 5,\n        escalationMinutes: 15,\n        autoResponse: false,\n        responseActions: [],\n        notificationChannels: ['console'],\n      });\n\n      // Manually trigger rule evaluation (in real system this happens automatically)\n      const rule = alertingSystem.getAlertRules().find(r => r.id === ruleId);\n      if (rule) {\n        (alertingSystem as any).evaluateRule(rule);\n      }\n\n      // Check if alert was created\n      const alerts = alertingSystem.getAlerts({ resolved: false });\n      expect(alerts.length).toBeGreaterThan(0);\n\n      const alert = alerts.find(a => a.title === 'High Error Count');\n      expect(alert).toBeDefined();\n      expect(alert?.currentValue).toBe(150);\n      expect(alert?.threshold).toBe(100);\n      expect(alert?.severity).toBe('warning');\n    });\n\n    test('should not create alert when threshold is not exceeded', () => {\n      // Add a rule that should NOT trigger based on mocked data\n      const ruleId = alertingSystem.addAlertRule({\n        name: 'Very High Error Count',\n        description: 'Extremely high TypeScript errors',\n        type: 'error',\n        metric: 'typescript_errors',\n        condition: 'greater_than',\n        threshold: 1000, // Mock returns 150, so this should NOT trigger\n        severity: 'critical',\n        enabled: true,\n        cooldownMinutes: 5,\n        escalationMinutes: 15,\n        autoResponse: false,\n        responseActions: [],\n        notificationChannels: ['console'],\n      });\n\n      // Manually trigger rule evaluation\n      const rule = alertingSystem.getAlertRules().find(r => r.id === ruleId);\n      if (rule) {\n        (alertingSystem as any).evaluateRule(rule);\n      }\n\n      // Check that no alert was created for this rule\n      const alerts = alertingSystem.getAlerts({ resolved: false });\n      const alert = alerts.find(a => a.title === 'Very High Error Count');\n      expect(alert).toBeUndefined();\n    });\n\n    test('should respect cooldown period', () => {\n      const ruleId = alertingSystem.addAlertRule({\n        name: 'Cooldown Test',\n        description: 'Test cooldown functionality',\n        type: 'error',\n        metric: 'typescript_errors',\n        condition: 'greater_than',\n        threshold: 100,\n        severity: 'warning',\n        enabled: true,\n        cooldownMinutes: 0.01, // Very short cooldown for testing (0.6 seconds)\n        escalationMinutes: 120,\n        autoResponse: false,\n        responseActions: [],\n        notificationChannels: ['console'],\n      });\n\n      const rule = alertingSystem.getAlertRules().find(r => r.id === ruleId);\n      if (rule) {\n        // First evaluation should create alert\n        (alertingSystem as any).evaluateRule(rule);\n\n        // Second evaluation should be blocked by cooldown (immediate)\n        (alertingSystem as any).evaluateRule(rule);\n      }\n\n      // Should only have one alert despite two evaluations\n      const alerts = alertingSystem.getAlerts({ resolved: false });\n      const cooldownAlerts = alerts.filter(a => a.title === 'Cooldown Test');\n      expect(cooldownAlerts.length).toBe(1);\n    });\n  });\n\n  describe('Alert Management', () => {\n    test('should acknowledge alert', () => {\n      // Create an alert first\n      const ruleId = alertingSystem.addAlertRule({\n        name: 'Test Alert',\n        description: 'Test alert for acknowledgment',\n        type: 'error',\n        metric: 'typescript_errors',\n        condition: 'greater_than',\n        threshold: 100,\n        severity: 'warning',\n        enabled: true,\n        cooldownMinutes: 5,\n        escalationMinutes: 15,\n        autoResponse: false,\n        responseActions: [],\n        notificationChannels: ['console'],\n      });\n\n      const rule = alertingSystem.getAlertRules().find(r => r.id === ruleId);\n      if (rule) {\n        (alertingSystem as any).evaluateRule(rule);\n      }\n\n      const alerts = alertingSystem.getAlerts({ resolved: false });\n      const alert = alerts.find(a => a.title === 'Test Alert');\n      expect(alert).toBeDefined();\n      expect(alert?.acknowledged).toBe(false);\n\n      // Acknowledge the alert\n      const acknowledged = alertingSystem.acknowledgeAlert(alert!.id);\n      expect(acknowledged).toBe(true);\n\n      // Check that alert is now acknowledged\n      const updatedAlerts = alertingSystem.getAlerts({ resolved: false });\n      const acknowledgedAlert = updatedAlerts.find(a => a.id === alert!.id);\n      expect(acknowledgedAlert?.acknowledged).toBe(true);\n    });\n\n    test('should resolve alert', () => {\n      // Create an alert first\n      const ruleId = alertingSystem.addAlertRule({\n        name: 'Test Alert',\n        description: 'Test alert for resolution',\n        type: 'error',\n        metric: 'typescript_errors',\n        condition: 'greater_than',\n        threshold: 100,\n        severity: 'warning',\n        enabled: true,\n        cooldownMinutes: 5,\n        escalationMinutes: 15,\n        autoResponse: false,\n        responseActions: [],\n        notificationChannels: ['console'],\n      });\n\n      const rule = alertingSystem.getAlertRules().find(r => r.id === ruleId);\n      if (rule) {\n        (alertingSystem as any).evaluateRule(rule);\n      }\n\n      const alerts = alertingSystem.getAlerts({ resolved: false });\n      const alert = alerts.find(a => a.title === 'Test Alert');\n      expect(alert).toBeDefined();\n      expect(alert?.resolved).toBe(false);\n\n      // Resolve the alert\n      const resolved = alertingSystem.resolveAlert(alert!.id);\n      expect(resolved).toBe(true);\n\n      // Check that alert is now resolved\n      const unresolvedAlerts = alertingSystem.getAlerts({ resolved: false });\n      const unresolvedAlert = unresolvedAlerts.find(a => a.id === alert!.id);\n      expect(unresolvedAlert).toBeUndefined();\n\n      const resolvedAlerts = alertingSystem.getAlerts({ resolved: true });\n      const resolvedAlert = resolvedAlerts.find(a => a.id === alert!.id);\n      expect(resolvedAlert?.resolved).toBe(true);\n      expect(resolvedAlert?.resolvedAt).toBeDefined();\n    });\n  });\n\n  describe('Alert Filtering', () => {\n    beforeEach(() => {\n      // Create multiple alerts for testing\n      const rules = [\n        {\n          name: 'Performance Alert',\n          type: 'performance' as const,\n          severity: 'warning' as const,\n          metric: 'build_time',\n          threshold: 30000,\n        },\n        {\n          name: 'Error Alert',\n          type: 'error' as const,\n          severity: 'error' as const,\n          metric: 'typescript_errors',\n          threshold: 100,\n        },\n        {\n          name: 'Critical Quality Alert',\n          type: 'quality' as const,\n          severity: 'critical' as const,\n          metric: 'code_quality_score',\n          threshold: 80, // Mock returns 75, so this should trigger with less_than condition\n        },\n      ];\n\n      for (const ruleConfig of rules) {\n        const ruleId = alertingSystem.addAlertRule({\n          ...ruleConfig,\n          description: `Test ${ruleConfig.name}`,\n          condition:\n            ruleConfig.type === 'quality' ? 'less_than' : 'greater_than',\n          enabled: true,\n          cooldownMinutes: 5,\n          escalationMinutes: 15,\n          autoResponse: false,\n          responseActions: [],\n          notificationChannels: ['console'],\n        });\n\n        const rule = alertingSystem.getAlertRules().find(r => r.id === ruleId);\n        if (rule) {\n          (alertingSystem as any).evaluateRule(rule);\n        }\n      }\n    });\n\n    test('should filter alerts by type', () => {\n      const performanceAlerts = alertingSystem.getAlerts({\n        type: 'performance',\n      });\n      expect(performanceAlerts.length).toBe(1);\n      expect(performanceAlerts[0].type).toBe('performance');\n\n      const errorAlerts = alertingSystem.getAlerts({ type: 'error' });\n      expect(errorAlerts.length).toBe(1);\n      expect(errorAlerts[0].type).toBe('error');\n    });\n\n    test('should filter alerts by severity', () => {\n      const criticalAlerts = alertingSystem.getAlerts({ severity: 'critical' });\n      expect(criticalAlerts.length).toBe(1);\n      expect(criticalAlerts[0].severity).toBe('critical');\n\n      const warningAlerts = alertingSystem.getAlerts({ severity: 'warning' });\n      expect(warningAlerts.length).toBe(1);\n      expect(warningAlerts[0].severity).toBe('warning');\n    });\n\n    test('should limit number of alerts returned', () => {\n      const limitedAlerts = alertingSystem.getAlerts({ limit: 2 });\n      expect(limitedAlerts.length).toBe(2);\n    });\n  });\n\n  describe('Alert Summary', () => {\n    test('should provide accurate alert summary', () => {\n      // Create some test alerts\n      const ruleId = alertingSystem.addAlertRule({\n        name: 'Summary Test Alert',\n        description: 'Test alert for summary',\n        type: 'error',\n        metric: 'typescript_errors',\n        condition: 'greater_than',\n        threshold: 100,\n        severity: 'critical',\n        enabled: true,\n        cooldownMinutes: 5,\n        escalationMinutes: 15,\n        autoResponse: false,\n        responseActions: [],\n        notificationChannels: ['console'],\n      });\n\n      const rule = alertingSystem.getAlertRules().find(r => r.id === ruleId);\n      if (rule) {\n        (alertingSystem as any).evaluateRule(rule);\n      }\n\n      const summary = alertingSystem.getAlertSummary();\n\n      expect(summary.totalAlerts).toBeGreaterThan(0);\n      expect(summary.unresolvedAlerts).toBeGreaterThan(0);\n      expect(summary.criticalAlerts).toBeGreaterThan(0);\n      expect(summary.alertsByType).toBeDefined();\n      expect(summary.alertsBySeverity).toBeDefined();\n      expect(typeof summary.responseSuccessRate).toBe('number');\n      expect(typeof summary.averageResolutionTime).toBe('number');\n    });\n  });\n\n  describe('Test Alert Functionality', () => {\n    test('should create test alert', () => {\n      const ruleId = alertingSystem.addAlertRule({\n        name: 'Test Rule for Testing',\n        description: 'Rule to test alert creation',\n        type: 'performance',\n        metric: 'build_time',\n        condition: 'greater_than',\n        threshold: 60000,\n        severity: 'warning',\n        enabled: true,\n        cooldownMinutes: 5,\n        escalationMinutes: 15,\n        autoResponse: false,\n        responseActions: [],\n        notificationChannels: ['console'],\n      });\n\n      const testResult = alertingSystem.testAlert(ruleId);\n      expect(testResult).toBe(true);\n\n      // Check that test alert was created\n      const alerts = alertingSystem.getAlerts({ resolved: false });\n      const testAlert = alerts.find(a => a.title === 'Test Rule for Testing');\n      expect(testAlert).toBeDefined();\n      expect(testAlert?.currentValue).toBe(60001); // threshold + 1\n    });\n\n    test('should return false for non-existent rule', () => {\n      const testResult = alertingSystem.testAlert('non-existent-rule');\n      expect(testResult).toBe(false);\n    });\n  });\n});\n"],"version":3}