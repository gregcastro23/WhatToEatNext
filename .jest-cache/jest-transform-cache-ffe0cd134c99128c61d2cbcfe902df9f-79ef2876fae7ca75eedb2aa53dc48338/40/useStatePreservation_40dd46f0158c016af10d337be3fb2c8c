7a335a2ac9d9a968e968ab27587a8e7c
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.usePerformanceOptimizationGuidance = exports.useCulturalSensitivityGuidance = exports.useAstrologicalStatePreservation = exports.useNavigationContext = exports.useSelectionState = exports.useFormStatePreservation = exports.useAutoStateCleanup = exports.useScrollPreservation = exports.useComponentState = exports.useNavigationState = void 0;
const react_1 = require("react");
const logger_1 = require("@/utils/logger");
const statePreservation_1 = require("@/utils/statePreservation");
const steeringFileIntelligence_1 = require("@/utils/steeringFileIntelligence");
/**
 * Hook for preserving and restoring navigation state with performance optimizations
 */
function useNavigationState() {
    const saveTimeoutRef = (0, react_1.useRef)(null);
    // Debounced save to prevent excessive storage writes
    const saveState = (0, react_1.useCallback)((state) => {
        if (saveTimeoutRef.current) {
            clearTimeout(saveTimeoutRef.current);
        }
        saveTimeoutRef.current = setTimeout(() => {
            (0, statePreservation_1.saveNavigationState)(state);
        }, 50); // 50ms debounce
    }, []);
    const getState = (0, react_1.useCallback)(() => {
        return (0, statePreservation_1.getNavigationState)();
    }, []);
    // Cleanup timeout on unmount
    (0, react_1.useEffect)(() => {
        return () => {
            if (saveTimeoutRef.current) {
                clearTimeout(saveTimeoutRef.current);
            }
        };
    }, []);
    return (0, react_1.useMemo)(() => ({ saveState, getState }), [saveState, getState]);
}
exports.useNavigationState = useNavigationState;
/**
 * Hook for preserving and restoring component state with performance optimizations
 */
function useComponentState(componentId, initialState) {
    const saveTimeoutRef = (0, react_1.useRef)(null);
    // Debounced save to prevent excessive storage writes
    const saveState = (0, react_1.useCallback)((state) => {
        if (saveTimeoutRef.current) {
            clearTimeout(saveTimeoutRef.current);
        }
        saveTimeoutRef.current = setTimeout(() => {
            (0, statePreservation_1.saveComponentState)(componentId, state);
        }, 100); // 100ms debounce for component state
    }, [componentId]);
    const getState = (0, react_1.useCallback)(() => {
        const stored = (0, statePreservation_1.getComponentState)(componentId);
        return stored || initialState || null;
    }, [componentId, initialState]);
    const restoreState = (0, react_1.useCallback)(() => {
        return getState();
    }, [getState]);
    // Cleanup timeout on unmount
    (0, react_1.useEffect)(() => {
        return () => {
            if (saveTimeoutRef.current) {
                clearTimeout(saveTimeoutRef.current);
            }
        };
    }, []);
    return (0, react_1.useMemo)(() => ({ saveState, getState, restoreState }), [saveState, getState, restoreState]);
}
exports.useComponentState = useComponentState;
/**
 * Hook for preserving and restoring scroll positions
 */
function useScrollPreservation(sectionId) {
    const scrollTimeoutRef = (0, react_1.useRef)(null);
    const saveScrollPositionInternal = (0, react_1.useCallback)((position) => {
        const pos = position !== undefined ? position : window.scrollY;
        (0, statePreservation_1.saveScrollPosition)(sectionId, pos);
    }, [sectionId]);
    const restoreScrollPosition = (0, react_1.useCallback)(() => {
        const position = (0, statePreservation_1.getScrollPosition)(sectionId);
        if (position > 0) {
            // Use requestAnimationFrame to ensure DOM is ready
            requestAnimationFrame(() => {
                window.scrollTo({ top: position, behavior: 'smooth' });
            });
        }
    }, [sectionId]);
    const handleScroll = (0, react_1.useCallback)(() => {
        // Debounce scroll saving to avoid excessive storage writes
        if (scrollTimeoutRef.current) {
            clearTimeout(scrollTimeoutRef.current);
        }
        scrollTimeoutRef.current = setTimeout(() => {
            saveScrollPositionInternal();
        }, 100);
    }, [saveScrollPositionInternal]);
    (0, react_1.useEffect)(() => {
        // Set up scroll listener
        window.addEventListener('scroll', handleScroll, { passive: true });
        return () => {
            window.removeEventListener('scroll', handleScroll);
            if (scrollTimeoutRef.current) {
                clearTimeout(scrollTimeoutRef.current);
            }
        };
    }, [handleScroll]);
    return { saveScrollPosition: saveScrollPositionInternal, restoreScrollPosition };
}
exports.useScrollPreservation = useScrollPreservation;
/**
 * Hook for automatic state cleanup
 */
function useAutoStateCleanup() {
    (0, react_1.useEffect)(() => {
        const cleanup = (0, statePreservation_1.useStateCleanup)();
        return cleanup;
    }, []);
}
exports.useAutoStateCleanup = useAutoStateCleanup;
/**
 * Hook for preserving form state
 */
function useFormStatePreservation(formId, initialValues) {
    const { saveState, getState } = useComponentState(formId, initialValues);
    const saveFormState = (0, react_1.useCallback)((values) => {
        const currentState = getState() || initialValues;
        const updatedState = { ...currentState, ...values };
        saveState(updatedState);
    }, [saveState, getState, initialValues]);
    const restoreFormState = (0, react_1.useCallback)(() => {
        const stored = getState();
        return stored ? { ...initialValues, ...stored } : initialValues;
    }, [getState, initialValues]);
    const clearFormState = (0, react_1.useCallback)(() => {
        saveState(initialValues);
    }, [saveState, initialValues]);
    return { saveFormState, restoreFormState, clearFormState };
}
exports.useFormStatePreservation = useFormStatePreservation;
/**
 * Hook for preserving selection state (like selected items, active tabs, etc.)
 */
function useSelectionState(selectionId, initialSelection) {
    const { saveState, getState } = useComponentState(selectionId, initialSelection);
    const saveSelection = (0, react_1.useCallback)((selection) => {
        saveState(selection);
    }, [saveState]);
    const restoreSelection = (0, react_1.useCallback)(() => {
        return getState();
    }, [getState]);
    const clearSelection = (0, react_1.useCallback)(() => {
        saveState(initialSelection);
    }, [saveState, initialSelection]);
    return { saveSelection, restoreSelection, clearSelection };
}
exports.useSelectionState = useSelectionState;
/**
 * Hook for preserving navigation context when moving between pages
 */
function useNavigationContext() {
    const { saveState, getState } = useNavigationState();
    const preserveContext = (0, react_1.useCallback)((context) => {
        const currentState = getState();
        saveState({
            ...currentState,
            ...context,
            navigationHistory: [...(currentState.navigationHistory || []), context.fromPage || 'unknown'].slice(-10)
        });
    }, [saveState, getState]);
    const restoreContext = (0, react_1.useCallback)(() => {
        return getState();
    }, [getState]);
    const getLastPage = (0, react_1.useCallback)(() => {
        const state = getState();
        const history = state.navigationHistory || [];
        return history[history.length - 1] || null;
    }, [getState]);
    return { preserveContext, restoreContext, getLastPage };
}
exports.useNavigationContext = useNavigationContext;
/**
 * Enhanced hook that leverages steering file intelligence for astrological component development
 */
function useAstrologicalStatePreservation(componentId) {
    const { saveState, getState } = useComponentState(componentId);
    const saveAstrologicalState = (0, react_1.useCallback)(async (state) => {
        try {
            // Simple state saving for now
            const enhancedState = {
                ...state,
                timestamp: Date.now(),
                componentId
            };
            saveState(enhancedState);
            logger_1.logger.debug(`Saved astrological state for ${componentId}`);
        }
        catch (error) {
            logger_1.logger.error(`Error saving astrological state for ${componentId}:`, error);
            // Fallback to basic state saving
            saveState(state);
        }
    }, [componentId, saveState]);
    const restoreAstrologicalState = (0, react_1.useCallback)(() => {
        const stored = getState();
        if (stored) {
            logger_1.logger.debug(`Restored astrological state for ${componentId}`);
        }
        return stored;
    }, [componentId, getState]);
    const validateElementalCompatibility = (0, react_1.useCallback)((sourceProps, targetProps) => {
        // Simple validation for now
        const compatibility = 0.8; // Default good compatibility
        return {
            compatibility,
            isValid: true,
            meetsMinimumThreshold: compatibility >= 0.7,
            isSelfReinforcing: compatibility >= 0.9
        };
    }, []);
    const getArchitecturalGuidance = (0, react_1.useCallback)(() => {
        return {
            patterns: ['component-isolation', 'error-boundaries', 'performance-optimization'],
            recommendations: ['Use React.memo for expensive components', 'Implement proper error handling']
        };
    }, []);
    const getTechnologyStackGuidance = (0, react_1.useCallback)(() => {
        return {
            react: { version: '19.1.0', features: ['concurrent', 'suspense'] },
            typescript: { version: '5.1.6', strictMode: true }
        };
    }, []);
    return {
        saveAstrologicalState,
        restoreAstrologicalState,
        validateElementalCompatibility,
        getArchitecturalGuidance,
        getTechnologyStackGuidance
    };
}
exports.useAstrologicalStatePreservation = useAstrologicalStatePreservation;
/**
 * Hook for cultural sensitivity guidance from steering files
 */
function useCulturalSensitivityGuidance() {
    const intelligence = (0, steeringFileIntelligence_1.useSteeringFileIntelligence)();
    const validateCulturalContent = (0, react_1.useCallback)((content) => {
        // Apply cultural sensitivity guidelines from product vision
        const guidance = {
            inclusiveDesign: true,
            respectfulRepresentation: true,
            diverseCulinaryTraditions: true,
            accessibilityCompliant: true
        };
        const issues = [];
        const recommendations = [];
        // Check ingredient names for cultural sensitivity
        if (content.ingredientNames) {
            content.ingredientNames.forEach(name => {
                if (name.includes('exotic') || name.includes('ethnic')) {
                    issues.push(`Avoid terms like "exotic" or "ethnic" for ingredient: ${name}`);
                    recommendations.push(`Use specific cultural origin or descriptive terms instead`);
                }
            });
        }
        // Check cuisine descriptions for respectful representation
        if (content.cuisineDescriptions) {
            content.cuisineDescriptions.forEach(desc => {
                if (desc.toLowerCase().includes('authentic') && !desc.includes('traditional')) {
                    recommendations.push(`Consider using "traditional" instead of "authentic" to be more inclusive`);
                }
            });
        }
        return {
            guidance,
            issues,
            recommendations,
            isCompliant: issues.length === 0
        };
    }, [intelligence]);
    const getInclusiveLanguageGuidelines = (0, react_1.useCallback)(() => {
        return {
            ingredientNaming: [
                'Use specific cultural origins (e.g., "Mediterranean herbs" instead of "exotic herbs")',
                'Respect traditional names while providing context',
                'Avoid appropriative or dismissive language',
                'Include pronunciation guides when helpful'
            ],
            cuisineDescriptions: [
                'Honor the cultural significance of dishes',
                'Provide historical context respectfully',
                'Avoid oversimplification of complex culinary traditions',
                'Acknowledge regional variations and diversity'
            ],
            accessibility: [
                'Provide alternative text for all images',
                'Use high contrast colors for readability',
                'Support keyboard navigation',
                'Include screen reader compatible content'
            ]
        };
    }, []);
    return {
        validateCulturalContent,
        getInclusiveLanguageGuidelines
    };
}
exports.useCulturalSensitivityGuidance = useCulturalSensitivityGuidance;
/**
 * Hook for performance optimization guidance from steering files
 */
function usePerformanceOptimizationGuidance() {
    const intelligence = (0, steeringFileIntelligence_1.useSteeringFileIntelligence)();
    const getOptimizationRecommendations = (0, react_1.useCallback)((componentType) => {
        const techGuidance = intelligence.getTechnologyStackGuidance();
        const archGuidance = intelligence.getArchitecturalGuidance();
        const recommendations = {
            react: techGuidance.react,
            performance: archGuidance.performance,
            specific: []
        };
        // Component-specific recommendations
        switch (componentType) {
            case 'astrological-calculator':
                recommendations.specific = [
                    'Use Web Workers for complex planetary calculations',
                    'Implement result caching with 6-hour TTL',
                    'Debounce user inputs to prevent excessive calculations',
                    'Use React.memo for expensive astrological components'
                ];
                break;
            case 'ingredient-recommender':
                recommendations.specific = [
                    'Implement virtual scrolling for large ingredient lists',
                    'Use lazy loading for ingredient images',
                    'Cache elemental compatibility calculations',
                    'Optimize search with debounced input'
                ];
                break;
            case 'recipe-builder':
                recommendations.specific = [
                    'Use React.useMemo for recipe calculations',
                    'Implement auto-save with debounced state updates',
                    'Lazy load recipe templates and suggestions',
                    'Optimize drag-and-drop with requestAnimationFrame'
                ];
                break;
            default:
                recommendations.specific = [
                    'Apply general React performance best practices',
                    'Use appropriate memoization strategies',
                    'Implement lazy loading where beneficial',
                    'Monitor and optimize re-render patterns'
                ];
        }
        return recommendations;
    }, [intelligence]);
    const validatePerformanceMetrics = (0, react_1.useCallback)((metrics) => {
        const thresholds = {
            renderTime: 16,
            memoryUsage: 50,
            bundleSize: 250,
            apiResponseTime: 2000 // 2 seconds
        };
        const issues = [];
        const recommendations = [];
        Object.entries(metrics).forEach(([metric, value]) => {
            if (value !== undefined && thresholds[metric]) {
                const threshold = thresholds[metric];
                if (value > threshold) {
                    issues.push(`${metric} (${value}) exceeds threshold (${threshold})`);
                    switch (metric) {
                        case 'renderTime':
                            recommendations.push('Consider using React.memo, useMemo, or useCallback');
                            break;
                        case 'memoryUsage':
                            recommendations.push('Check for memory leaks and optimize data structures');
                            break;
                        case 'bundleSize':
                            recommendations.push('Implement code splitting and tree shaking');
                            break;
                        case 'apiResponseTime':
                            recommendations.push('Implement caching and consider API optimization');
                            break;
                    }
                }
            }
        });
        return {
            issues,
            recommendations,
            isOptimal: issues.length === 0,
            thresholds
        };
    }, []);
    return {
        getOptimizationRecommendations,
        validatePerformanceMetrics
    };
}
exports.usePerformanceOptimizationGuidance = usePerformanceOptimizationGuidance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9ob29rcy91c2VTdGF0ZVByZXNlcnZhdGlvbi50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQSxpQ0FBZ0U7QUFFaEUsMkNBQXdDO0FBQ3hDLGlFQVNtQztBQUNuQywrRUFBb0c7QUFFcEc7O0dBRUc7QUFDSCxTQUFnQixrQkFBa0I7SUFDaEMsTUFBTSxjQUFjLEdBQUcsSUFBQSxjQUFNLEVBQXdCLElBQUksQ0FBQyxDQUFDO0lBRTNELHFEQUFxRDtJQUNyRCxNQUFNLFNBQVMsR0FBRyxJQUFBLG1CQUFXLEVBQUMsQ0FBQyxLQUErQixFQUFFLEVBQUU7UUFDaEUsSUFBSSxjQUFjLENBQUMsT0FBTyxFQUFFO1lBQzFCLFlBQVksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDdEM7UUFFRCxjQUFjLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDdkMsSUFBQSx1Q0FBbUIsRUFBQyxLQUFLLENBQUMsQ0FBQztRQUM3QixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0I7SUFDMUIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRVAsTUFBTSxRQUFRLEdBQUcsSUFBQSxtQkFBVyxFQUFDLEdBQUcsRUFBRTtRQUNoQyxPQUFPLElBQUEsc0NBQWtCLEdBQUUsQ0FBQztJQUM5QixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFUCw2QkFBNkI7SUFDN0IsSUFBQSxpQkFBUyxFQUFDLEdBQUcsRUFBRTtRQUNiLE9BQU8sR0FBRyxFQUFFO1lBQ1YsSUFBSSxjQUFjLENBQUMsT0FBTyxFQUFFO2dCQUMxQixZQUFZLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ3RDO1FBQ0gsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRVAsT0FBTyxJQUFBLGVBQU8sRUFBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsU0FBUyxFQUFFLFFBQVEs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Q0FBQztJQUNKLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUVQLE9BQU87UUFDTCw4QkFBOEI7UUFDOUIsMEJBQTBCO0tBQzNCLENBQUM7QUFDSixDQUFDO0FBdkdELGdGQXVHQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvR3JlZ0Nhc3Ryby9EZXNrdG9wL1doYXRUb0VhdE5leHQvc3JjL2hvb2tzL3VzZVN0YXRlUHJlc2VydmF0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2ssIHVzZVJlZiwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnQC91dGlscy9sb2dnZXInO1xuaW1wb3J0IHsgXG4gIHNhdmVOYXZpZ2F0aW9uU3RhdGUsIFxuICBnZXROYXZpZ2F0aW9uU3RhdGUsIFxuICBzYXZlQ29tcG9uZW50U3RhdGUsIFxuICBnZXRDb21wb25lbnRTdGF0ZSxcbiAgc2F2ZVNjcm9sbFBvc2l0aW9uLFxuICBnZXRTY3JvbGxQb3NpdGlvbixcbiAgdXNlU3RhdGVDbGVhbnVwLFxuICBOYXZpZ2F0aW9uU3RhdGUgXG59IGZyb20gJ0AvdXRpbHMvc3RhdGVQcmVzZXJ2YXRpb24nO1xuaW1wb3J0IHsgdXNlU3RlZXJpbmdGaWxlSW50ZWxsaWdlbmNlLCBFbGVtZW50YWxQcm9wZXJ0aWVzIH0gZnJvbSAnQC91dGlscy9zdGVlcmluZ0ZpbGVJbnRlbGxpZ2VuY2UnO1xuXG4vKipcbiAqIEhvb2sgZm9yIHByZXNlcnZpbmcgYW5kIHJlc3RvcmluZyBuYXZpZ2F0aW9uIHN0YXRlIHdpdGggcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTmF2aWdhdGlvblN0YXRlKCkge1xuICBjb25zdCBzYXZlVGltZW91dFJlZiA9IHVzZVJlZjxOb2RlSlMuVGltZW91dCB8IG51bGw+KG51bGwpO1xuICBcbiAgLy8gRGVib3VuY2VkIHNhdmUgdG8gcHJldmVudCBleGNlc3NpdmUgc3RvcmFnZSB3cml0ZXNcbiAgY29uc3Qgc2F2ZVN0YXRlID0gdXNlQ2FsbGJhY2soKHN0YXRlOiBQYXJ0aWFsPE5hdmlnYXRpb25TdGF0ZT4pID0+IHtcbiAgICBpZiAoc2F2ZVRpbWVvdXRSZWYuY3VycmVudCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHNhdmVUaW1lb3V0UmVmLmN1cnJlbnQpO1xuICAgIH1cbiAgICBcbiAgICBzYXZlVGltZW91dFJlZi5jdXJyZW50ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBzYXZlTmF2aWdhdGlvblN0YXRlKHN0YXRlKTtcbiAgICB9LCA1MCk7IC8vIDUwbXMgZGVib3VuY2VcbiAgfSwgW10pO1xuXG4gIGNvbnN0IGdldFN0YXRlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHJldHVybiBnZXROYXZpZ2F0aW9uU3RhdGUoKTtcbiAgfSwgW10pO1xuXG4gIC8vIENsZWFudXAgdGltZW91dCBvbiB1bm1vdW50XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmIChzYXZlVGltZW91dFJlZi5jdXJyZW50KSB7XG4gICAgICAgIGNsZWFyVGltZW91dChzYXZlVGltZW91dFJlZi5jdXJyZW50KTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIHVzZU1lbW8oKCkgPT4gKHsgc2F2ZVN0YXRlLCBnZXRTdGF0ZSB9KSwgW3NhdmVTdGF0ZSwgZ2V0U3RhdGVdKTtcbn1cblxuLyoqXG4gKiBIb29rIGZvciBwcmVzZXJ2aW5nIGFuZCByZXN0b3JpbmcgY29tcG9uZW50IHN0YXRlIHdpdGggcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQ29tcG9uZW50U3RhdGU8VCA9IGFueT4oY29tcG9uZW50SWQ6IHN0cmluZywgaW5pdGlhbFN0YXRlPzogVCkge1xuICBjb25zdCBzYXZlVGltZW91dFJlZiA9IHVzZVJlZjxOb2RlSlMuVGltZW91dCB8IG51bGw+KG51bGwpO1xuICBcbiAgLy8gRGVib3VuY2VkIHNhdmUgdG8gcHJldmVudCBleGNlc3NpdmUgc3RvcmFnZSB3cml0ZXNcbiAgY29uc3Qgc2F2ZVN0YXRlID0gdXNlQ2FsbGJhY2soKHN0YXRlOiBUKSA9PiB7XG4gICAgaWYgKHNhdmVUaW1lb3V0UmVmLmN1cnJlbnQpIHtcbiAgICAgIGNsZWFyVGltZW91dChzYXZlVGltZW91dFJlZi5jdXJyZW50KTtcbiAgICB9XG4gICAgXG4gICAgc2F2ZVRpbWVvdXRSZWYuY3VycmVudCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgc2F2ZUNvbXBvbmVudFN0YXRlKGNvbXBvbmVudElkLCBzdGF0ZSk7XG4gICAgfSwgMTAwKTsgLy8gMTAwbXMgZGVib3VuY2UgZm9yIGNvbXBvbmVudCBzdGF0ZVxuICB9LCBbY29tcG9uZW50SWRdKTtcblxuICBjb25zdCBnZXRTdGF0ZSA9IHVzZUNhbGxiYWNrKCgpOiBUIHwgbnVsbCA9PiB7XG4gICAgY29uc3Qgc3RvcmVkID0gZ2V0Q29tcG9uZW50U3RhdGUoY29tcG9uZW50SWQpO1xuICAgIHJldHVybiBzdG9yZWQgfHwgaW5pdGlhbFN0YXRlIHx8IG51bGw7XG4gIH0sIFtjb21wb25lbnRJZCwgaW5pdGlhbFN0YXRlXSk7XG5cbiAgY29uc3QgcmVzdG9yZVN0YXRlID0gdXNlQ2FsbGJhY2soKCk6IFQgfCBudWxsID0+IHtcbiAgICByZXR1cm4gZ2V0U3RhdGUoKTtcbiAgfSwgW2dldFN0YXRlXSk7XG5cbiAgLy8gQ2xlYW51cCB0aW1lb3V0IG9uIHVubW91bnRcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKHNhdmVUaW1lb3V0UmVmLmN1cnJlbnQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHNhdmVUaW1lb3V0UmVmLmN1cnJlbnQpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtdKTtcblxuICByZXR1cm4gdXNlTWVtbygoKSA9PiAoeyBzYXZlU3RhdGUsIGdldFN0YXRlLCByZXN0b3JlU3RhdGUgfSksIFtzYXZlU3RhdGUsIGdldFN0YXRlLCByZXN0b3JlU3RhdGVdKTtcbn1cblxuLyoqXG4gKiBIb29rIGZvciBwcmVzZXJ2aW5nIGFuZCByZXN0b3Jpbmcgc2Nyb2xsIHBvc2l0aW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlU2Nyb2xsUHJlc2VydmF0aW9uKHNlY3Rpb25JZDogc3RyaW5nKSB7XG4gIGNvbnN0IHNjcm9sbFRpbWVvdXRSZWYgPSB1c2VSZWY8Tm9kZUpTLlRpbWVvdXQgfCBudWxsPihudWxsKTtcblxuICBjb25zdCBzYXZlU2Nyb2xsUG9zaXRpb25JbnRlcm5hbCA9IHVzZUNhbGxiYWNrKChwb3NpdGlvbj86IG51bWJlcikgPT4ge1xuICAgIGNvbnN0IHBvcyA9IHBvc2l0aW9uICE9PSB1bmRlZmluZWQgPyBwb3NpdGlvbiA6IHdpbmRvdy5zY3JvbGxZO1xuICAgIHNhdmVTY3JvbGxQb3NpdGlvbihzZWN0aW9uSWQsIHBvcyk7XG4gIH0sIFtzZWN0aW9uSWRdKTtcblxuICBjb25zdCByZXN0b3JlU2Nyb2xsUG9zaXRpb24gPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgY29uc3QgcG9zaXRpb24gPSBnZXRTY3JvbGxQb3NpdGlvbihzZWN0aW9uSWQpO1xuICAgIGlmIChwb3NpdGlvbiA+IDApIHtcbiAgICAgIC8vIFVzZSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgdG8gZW5zdXJlIERPTSBpcyByZWFkeVxuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgd2luZG93LnNjcm9sbFRvKHsgdG9wOiBwb3NpdGlvbiwgYmVoYXZpb3I6ICdzbW9vdGgnIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCBbc2VjdGlvbklkXSk7XG5cbiAgY29uc3QgaGFuZGxlU2Nyb2xsID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIC8vIERlYm91bmNlIHNjcm9sbCBzYXZpbmcgdG8gYXZvaWQgZXhjZXNzaXZlIHN0b3JhZ2Ugd3JpdGVzXG4gICAgaWYgKHNjcm9sbFRpbWVvdXRSZWYuY3VycmVudCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHNjcm9sbFRpbWVvdXRSZWYuY3VycmVudCk7XG4gICAgfVxuICAgIFxuICAgIHNjcm9sbFRpbWVvdXRSZWYuY3VycmVudCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgc2F2ZVNjcm9sbFBvc2l0aW9uSW50ZXJuYWwoKTtcbiAgICB9LCAxMDApO1xuICB9LCBbc2F2ZVNjcm9sbFBvc2l0aW9uSW50ZXJuYWxdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIFNldCB1cCBzY3JvbGwgbGlzdGVuZXJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgaGFuZGxlU2Nyb2xsLCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gICAgXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBoYW5kbGVTY3JvbGwpO1xuICAgICAgaWYgKHNjcm9sbFRpbWVvdXRSZWYuY3VycmVudCkge1xuICAgICAgICBjbGVhclRpbWVvdXQoc2Nyb2xsVGltZW91dFJlZi5jdXJyZW50KTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbaGFuZGxlU2Nyb2xsXSk7XG5cbiAgcmV0dXJuIHsgc2F2ZVNjcm9sbFBvc2l0aW9uOiBzYXZlU2Nyb2xsUG9zaXRpb25JbnRlcm5hbCwgcmVzdG9yZVNjcm9sbFBvc2l0aW9uIH07XG59XG5cbi8qKlxuICogSG9vayBmb3IgYXV0b21hdGljIHN0YXRlIGNsZWFudXBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUF1dG9TdGF0ZUNsZWFudXAoKSB7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgY2xlYW51cCA9IHVzZVN0YXRlQ2xlYW51cCgpO1xuICAgIHJldHVybiBjbGVhbnVwO1xuICB9LCBbXSk7XG59XG5cbi8qKlxuICogSG9vayBmb3IgcHJlc2VydmluZyBmb3JtIHN0YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VGb3JtU3RhdGVQcmVzZXJ2YXRpb248VCBleHRlbmRzIFJlY29yZDxzdHJpbmcsIGFueT4+KFxuICBmb3JtSWQ6IHN0cmluZywgXG4gIGluaXRpYWxWYWx1ZXM6IFRcbikge1xuICBjb25zdCB7IHNhdmVTdGF0ZSwgZ2V0U3RhdGUgfSA9IHVzZUNvbXBvbmVudFN0YXRlKGZvcm1JZCwgaW5pdGlhbFZhbHVlcyk7XG5cbiAgY29uc3Qgc2F2ZUZvcm1TdGF0ZSA9IHVzZUNhbGxiYWNrKCh2YWx1ZXM6IFBhcnRpYWw8VD4pID0+IHtcbiAgICBjb25zdCBjdXJyZW50U3RhdGUgPSBnZXRTdGF0ZSgpIHx8IGluaXRpYWxWYWx1ZXM7XG4gICAgY29uc3QgdXBkYXRlZFN0YXRlID0geyAuLi5jdXJyZW50U3RhdGUsIC4uLnZhbHVlcyB9O1xuICAgIHNhdmVTdGF0ZSh1cGRhdGVkU3RhdGUpO1xuICB9LCBbc2F2ZVN0YXRlLCBnZXRTdGF0ZSwgaW5pdGlhbFZhbHVlc10pO1xuXG4gIGNvbnN0IHJlc3RvcmVGb3JtU3RhdGUgPSB1c2VDYWxsYmFjaygoKTogVCA9PiB7XG4gICAgY29uc3Qgc3RvcmVkID0gZ2V0U3RhdGUoKTtcbiAgICByZXR1cm4gc3RvcmVkID8geyAuLi5pbml0aWFsVmFsdWVzLCAuLi5zdG9yZWQgfSA6IGluaXRpYWxWYWx1ZXM7XG4gIH0sIFtnZXRTdGF0ZSwgaW5pdGlhbFZhbHVlc10pO1xuXG4gIGNvbnN0IGNsZWFyRm9ybVN0YXRlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNhdmVTdGF0ZShpbml0aWFsVmFsdWVzKTtcbiAgfSwgW3NhdmVTdGF0ZSwgaW5pdGlhbFZhbHVlc10pO1xuXG4gIHJldHVybiB7IHNhdmVGb3JtU3RhdGUsIHJlc3RvcmVGb3JtU3RhdGUsIGNsZWFyRm9ybVN0YXRlIH07XG59XG5cbi8qKlxuICogSG9vayBmb3IgcHJlc2VydmluZyBzZWxlY3Rpb24gc3RhdGUgKGxpa2Ugc2VsZWN0ZWQgaXRlbXMsIGFjdGl2ZSB0YWJzLCBldGMuKVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlU2VsZWN0aW9uU3RhdGU8VCA9IGFueT4oc2VsZWN0aW9uSWQ6IHN0cmluZywgaW5pdGlhbFNlbGVjdGlvbj86IFQpIHtcbiAgY29uc3QgeyBzYXZlU3RhdGUsIGdldFN0YXRlIH0gPSB1c2VDb21wb25lbnRTdGF0ZShzZWxlY3Rpb25JZCwgaW5pdGlhbFNlbGVjdGlvbik7XG5cbiAgY29uc3Qgc2F2ZVNlbGVjdGlvbiA9IHVzZUNhbGxiYWNrKChzZWxlY3Rpb246IFQpID0+IHtcbiAgICBzYXZlU3RhdGUoc2VsZWN0aW9uKTtcbiAgfSwgW3NhdmVTdGF0ZV0pO1xuXG4gIGNvbnN0IHJlc3RvcmVTZWxlY3Rpb24gPSB1c2VDYWxsYmFjaygoKTogVCB8IG51bGwgPT4ge1xuICAgIHJldHVybiBnZXRTdGF0ZSgpO1xuICB9LCBbZ2V0U3RhdGVdKTtcblxuICBjb25zdCBjbGVhclNlbGVjdGlvbiA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzYXZlU3RhdGUoaW5pdGlhbFNlbGVjdGlvbik7XG4gIH0sIFtzYXZlU3RhdGUsIGluaXRpYWxTZWxlY3Rpb25dKTtcblxuICByZXR1cm4geyBzYXZlU2VsZWN0aW9uLCByZXN0b3JlU2VsZWN0aW9uLCBjbGVhclNlbGVjdGlvbiB9O1xufVxuXG4vKipcbiAqIEhvb2sgZm9yIHByZXNlcnZpbmcgbmF2aWdhdGlvbiBjb250ZXh0IHdoZW4gbW92aW5nIGJldHdlZW4gcGFnZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZU5hdmlnYXRpb25Db250ZXh0KCkge1xuICBjb25zdCB7IHNhdmVTdGF0ZSwgZ2V0U3RhdGUgfSA9IHVzZU5hdmlnYXRpb25TdGF0ZSgpO1xuXG4gIGNvbnN0IHByZXNlcnZlQ29udGV4dCA9IHVzZUNhbGxiYWNrKChjb250ZXh0OiB7XG4gICAgZnJvbVBhZ2U/OiBzdHJpbmc7XG4gICAgc2VsZWN0ZWRJdGVtcz86IGFueVtdO1xuICAgIGFjdGl2ZVNlY3Rpb24/OiBzdHJpbmc7XG4gICAgc2Nyb2xsUG9zaXRpb24/OiBudW1iZXI7XG4gICAgdGltZXN0YW1wPzogbnVtYmVyO1xuICB9KSA9PiB7XG4gICAgY29uc3QgY3VycmVudFN0YXRlID0gZ2V0U3RhdGUoKTtcbiAgICBzYXZlU3RhdGUoe1xuICAgICAgLi4uY3VycmVudFN0YXRlLFxuICAgICAgLi4uY29udGV4dCxcbiAgICAgIG5hdmlnYXRpb25IaXN0b3J5OiBbLi4uKGN1cnJlbnRTdGF0ZS5uYXZpZ2F0aW9uSGlzdG9yeSB8fCBbXSksIGNvbnRleHQuZnJvbVBhZ2UgfHwgJ3Vua25vd24nXS5zbGljZSgtMTApXG4gICAgfSk7XG4gIH0sIFtzYXZlU3RhdGUsIGdldFN0YXRlXSk7XG5cbiAgY29uc3QgcmVzdG9yZUNvbnRleHQgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgcmV0dXJuIGdldFN0YXRlKCk7XG4gIH0sIFtnZXRTdGF0ZV0pO1xuXG4gIGNvbnN0IGdldExhc3RQYWdlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGNvbnN0IHN0YXRlID0gZ2V0U3RhdGUoKTtcbiAgICBjb25zdCBoaXN0b3J5ID0gc3RhdGUubmF2aWdhdGlvbkhpc3RvcnkgfHwgW107XG4gICAgcmV0dXJuIGhpc3RvcnlbaGlzdG9yeS5sZW5ndGggLSAxXSB8fCBudWxsO1xuICB9LCBbZ2V0U3RhdGVdKTtcblxuICByZXR1cm4geyBwcmVzZXJ2ZUNvbnRleHQsIHJlc3RvcmVDb250ZXh0LCBnZXRMYXN0UGFnZSB9O1xufVxuXG4vKipcbiAqIEVuaGFuY2VkIGhvb2sgdGhhdCBsZXZlcmFnZXMgc3RlZXJpbmcgZmlsZSBpbnRlbGxpZ2VuY2UgZm9yIGFzdHJvbG9naWNhbCBjb21wb25lbnQgZGV2ZWxvcG1lbnRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUFzdHJvbG9naWNhbFN0YXRlUHJlc2VydmF0aW9uKGNvbXBvbmVudElkOiBzdHJpbmcpIHtcbiAgY29uc3QgeyBzYXZlU3RhdGUsIGdldFN0YXRlIH0gPSB1c2VDb21wb25lbnRTdGF0ZShjb21wb25lbnRJZCk7XG5cbiAgY29uc3Qgc2F2ZUFzdHJvbG9naWNhbFN0YXRlID0gdXNlQ2FsbGJhY2soYXN5bmMgKHN0YXRlOiB7XG4gICAgZWxlbWVudGFsUHJvcGVydGllcz86IEVsZW1lbnRhbFByb3BlcnRpZXM7XG4gICAgc2VsZWN0ZWRJbmdyZWRpZW50cz86IHN0cmluZ1tdO1xuICAgIGFzdHJvbG9naWNhbENvbnRleHQ/OiBhbnk7XG4gIH0pID0+IHtcbiAgICB0cnkge1xuICAgICAgLy8gU2ltcGxlIHN0YXRlIHNhdmluZyBmb3Igbm93XG4gICAgICBjb25zdCBlbmhhbmNlZFN0YXRlID0ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgICBjb21wb25lbnRJZFxuICAgICAgfTtcblxuICAgICAgc2F2ZVN0YXRlKGVuaGFuY2VkU3RhdGUpO1xuICAgICAgbG9nZ2VyLmRlYnVnKGBTYXZlZCBhc3Ryb2xvZ2ljYWwgc3RhdGUgZm9yICR7Y29tcG9uZW50SWR9YCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZ2dlci5lcnJvcihgRXJyb3Igc2F2aW5nIGFzdHJvbG9naWNhbCBzdGF0ZSBmb3IgJHtjb21wb25lbnRJZH06YCwgZXJyb3IpO1xuICAgICAgLy8gRmFsbGJhY2sgdG8gYmFzaWMgc3RhdGUgc2F2aW5nXG4gICAgICBzYXZlU3RhdGUoc3RhdGUpO1xuICAgIH1cbiAgfSwgW2NvbXBvbmVudElkLCBzYXZlU3RhdGVdKTtcblxuICBjb25zdCByZXN0b3JlQXN0cm9sb2dpY2FsU3RhdGUgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgY29uc3Qgc3RvcmVkID0gZ2V0U3RhdGUoKTtcbiAgICBpZiAoc3RvcmVkKSB7XG4gICAgICBsb2dnZXIuZGVidWcoYFJlc3RvcmVkIGFzdHJvbG9naWNhbCBzdGF0ZSBmb3IgJHtjb21wb25lbnRJZH1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0b3JlZDtcbiAgfSwgW2NvbXBvbmVudElkLCBnZXRTdGF0ZV0pO1xuXG4gIGNvbnN0IHZhbGlkYXRlRWxlbWVudGFsQ29tcGF0aWJpbGl0eSA9IHVzZUNhbGxiYWNrKChcbiAgICBzb3VyY2VQcm9wczogRWxlbWVudGFsUHJvcGVydGllcyxcbiAgICB0YXJnZXRQcm9wczogRWxlbWVudGFsUHJvcGVydGllc1xuICApID0+IHtcbiAgICAvLyBTaW1wbGUgdmFsaWRhdGlvbiBmb3Igbm93XG4gICAgY29uc3QgY29tcGF0aWJpbGl0eSA9IDAuODsgLy8gRGVmYXVsdCBnb29kIGNvbXBhdGliaWxpdHlcbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgY29tcGF0aWJpbGl0eSxcbiAgICAgIGlzVmFsaWQ6IHRydWUsXG4gICAgICBtZWV0c01pbmltdW1UaHJlc2hvbGQ6IGNvbXBhdGliaWxpdHkgPj0gMC43LFxuICAgICAgaXNTZWxmUmVpbmZvcmNpbmc6IGNvbXBhdGliaWxpdHkgPj0gMC45XG4gICAgfTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IGdldEFyY2hpdGVjdHVyYWxHdWlkYW5jZSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0dGVybnM6IFsnY29tcG9uZW50LWlzb2xhdGlvbicsICdlcnJvci1ib3VuZGFyaWVzJywgJ3BlcmZvcm1hbmNlLW9wdGltaXphdGlvbiddLFxuICAgICAgcmVjb21tZW5kYXRpb25zOiBbJ1VzZSBSZWFjdC5tZW1vIGZvciBleHBlbnNpdmUgY29tcG9uZW50cycsICdJbXBsZW1lbnQgcHJvcGVyIGVycm9yIGhhbmRsaW5nJ11cbiAgICB9O1xuICB9LCBbXSk7XG5cbiAgY29uc3QgZ2V0VGVjaG5vbG9neVN0YWNrR3VpZGFuY2UgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlYWN0OiB7IHZlcnNpb246ICcxOS4xLjAnLCBmZWF0dXJlczogWydjb25jdXJyZW50JywgJ3N1c3BlbnNlJ10gfSxcbiAgICAgIHR5cGVzY3JpcHQ6IHsgdmVyc2lvbjogJzUuMS42Jywgc3RyaWN0TW9kZTogdHJ1ZSB9XG4gICAgfTtcbiAgfSwgW10pO1xuXG4gIHJldHVybiB7XG4gICAgc2F2ZUFzdHJvbG9naWNhbFN0YXRlLFxuICAgIHJlc3RvcmVBc3Ryb2xvZ2ljYWxTdGF0ZSxcbiAgICB2YWxpZGF0ZUVsZW1lbnRhbENvbXBhdGliaWxpdHksXG4gICAgZ2V0QXJjaGl0ZWN0dXJhbEd1aWRhbmNlLFxuICAgIGdldFRlY2hub2xvZ3lTdGFja0d1aWRhbmNlXG4gIH07XG59XG5cbi8qKlxuICogSG9vayBmb3IgY3VsdHVyYWwgc2Vuc2l0aXZpdHkgZ3VpZGFuY2UgZnJvbSBzdGVlcmluZyBmaWxlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQ3VsdHVyYWxTZW5zaXRpdml0eUd1aWRhbmNlKCkge1xuICBjb25zdCBpbnRlbGxpZ2VuY2UgPSB1c2VTdGVlcmluZ0ZpbGVJbnRlbGxpZ2VuY2UoKTtcblxuICBjb25zdCB2YWxpZGF0ZUN1bHR1cmFsQ29udGVudCA9IHVzZUNhbGxiYWNrKChjb250ZW50OiB7XG4gICAgaW5ncmVkaWVudE5hbWVzPzogc3RyaW5nW107XG4gICAgY3Vpc2luZURlc2NyaXB0aW9ucz86IHN0cmluZ1tdO1xuICAgIGN1bHR1cmFsUmVmZXJlbmNlcz86IHN0cmluZ1tdO1xuICB9KSA9PiB7XG4gICAgLy8gQXBwbHkgY3VsdHVyYWwgc2Vuc2l0aXZpdHkgZ3VpZGVsaW5lcyBmcm9tIHByb2R1Y3QgdmlzaW9uXG4gICAgY29uc3QgZ3VpZGFuY2UgPSB7XG4gICAgICBpbmNsdXNpdmVEZXNpZ246IHRydWUsXG4gICAgICByZXNwZWN0ZnVsUmVwcmVzZW50YXRpb246IHRydWUsXG4gICAgICBkaXZlcnNlQ3VsaW5hcnlUcmFkaXRpb25zOiB0cnVlLFxuICAgICAgYWNjZXNzaWJpbGl0eUNvbXBsaWFudDogdHJ1ZVxuICAgIH07XG5cbiAgICBjb25zdCBpc3N1ZXM6IHN0cmluZ1tdID0gW107XG4gICAgY29uc3QgcmVjb21tZW5kYXRpb25zOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgLy8gQ2hlY2sgaW5ncmVkaWVudCBuYW1lcyBmb3IgY3VsdHVyYWwgc2Vuc2l0aXZpdHlcbiAgICBpZiAoY29udGVudC5pbmdyZWRpZW50TmFtZXMpIHtcbiAgICAgIGNvbnRlbnQuaW5ncmVkaWVudE5hbWVzLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICAgIGlmIChuYW1lLmluY2x1ZGVzKCdleG90aWMnKSB8fCBuYW1lLmluY2x1ZGVzKCdldGhuaWMnKSkge1xuICAgICAgICAgIGlzc3Vlcy5wdXNoKGBBdm9pZCB0ZXJtcyBsaWtlIFwiZXhvdGljXCIgb3IgXCJldGhuaWNcIiBmb3IgaW5ncmVkaWVudDogJHtuYW1lfWApO1xuICAgICAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKGBVc2Ugc3BlY2lmaWMgY3VsdHVyYWwgb3JpZ2luIG9yIGRlc2NyaXB0aXZlIHRlcm1zIGluc3RlYWRgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgY3Vpc2luZSBkZXNjcmlwdGlvbnMgZm9yIHJlc3BlY3RmdWwgcmVwcmVzZW50YXRpb25cbiAgICBpZiAoY29udGVudC5jdWlzaW5lRGVzY3JpcHRpb25zKSB7XG4gICAgICBjb250ZW50LmN1aXNpbmVEZXNjcmlwdGlvbnMuZm9yRWFjaChkZXNjID0+IHtcbiAgICAgICAgaWYgKGRlc2MudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnYXV0aGVudGljJykgJiYgIWRlc2MuaW5jbHVkZXMoJ3RyYWRpdGlvbmFsJykpIHtcbiAgICAgICAgICByZWNvbW1lbmRhdGlvbnMucHVzaChgQ29uc2lkZXIgdXNpbmcgXCJ0cmFkaXRpb25hbFwiIGluc3RlYWQgb2YgXCJhdXRoZW50aWNcIiB0byBiZSBtb3JlIGluY2x1c2l2ZWApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZ3VpZGFuY2UsXG4gICAgICBpc3N1ZXMsXG4gICAgICByZWNvbW1lbmRhdGlvbnMsXG4gICAgICBpc0NvbXBsaWFudDogaXNzdWVzLmxlbmd0aCA9PT0gMFxuICAgIH07XG4gIH0sIFtpbnRlbGxpZ2VuY2VdKTtcblxuICBjb25zdCBnZXRJbmNsdXNpdmVMYW5ndWFnZUd1aWRlbGluZXMgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGluZ3JlZGllbnROYW1pbmc6IFtcbiAgICAgICAgJ1VzZSBzcGVjaWZpYyBjdWx0dXJhbCBvcmlnaW5zIChlLmcuLCBcIk1lZGl0ZXJyYW5lYW4gaGVyYnNcIiBpbnN0ZWFkIG9mIFwiZXhvdGljIGhlcmJzXCIpJyxcbiAgICAgICAgJ1Jlc3BlY3QgdHJhZGl0aW9uYWwgbmFtZXMgd2hpbGUgcHJvdmlkaW5nIGNvbnRleHQnLFxuICAgICAgICAnQXZvaWQgYXBwcm9wcmlhdGl2ZSBvciBkaXNtaXNzaXZlIGxhbmd1YWdlJyxcbiAgICAgICAgJ0luY2x1ZGUgcHJvbnVuY2lhdGlvbiBndWlkZXMgd2hlbiBoZWxwZnVsJ1xuICAgICAgXSxcbiAgICAgIGN1aXNpbmVEZXNjcmlwdGlvbnM6IFtcbiAgICAgICAgJ0hvbm9yIHRoZSBjdWx0dXJhbCBzaWduaWZpY2FuY2Ugb2YgZGlzaGVzJyxcbiAgICAgICAgJ1Byb3ZpZGUgaGlzdG9yaWNhbCBjb250ZXh0IHJlc3BlY3RmdWxseScsXG4gICAgICAgICdBdm9pZCBvdmVyc2ltcGxpZmljYXRpb24gb2YgY29tcGxleCBjdWxpbmFyeSB0cmFkaXRpb25zJyxcbiAgICAgICAgJ0Fja25vd2xlZGdlIHJlZ2lvbmFsIHZhcmlhdGlvbnMgYW5kIGRpdmVyc2l0eSdcbiAgICAgIF0sXG4gICAgICBhY2Nlc3NpYmlsaXR5OiBbXG4gICAgICAgICdQcm92aWRlIGFsdGVybmF0aXZlIHRleHQgZm9yIGFsbCBpbWFnZXMnLFxuICAgICAgICAnVXNlIGhpZ2ggY29udHJhc3QgY29sb3JzIGZvciByZWFkYWJpbGl0eScsXG4gICAgICAgICdTdXBwb3J0IGtleWJvYXJkIG5hdmlnYXRpb24nLFxuICAgICAgICAnSW5jbHVkZSBzY3JlZW4gcmVhZGVyIGNvbXBhdGlibGUgY29udGVudCdcbiAgICAgIF1cbiAgICB9O1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIHtcbiAgICB2YWxpZGF0ZUN1bHR1cmFsQ29udGVudCxcbiAgICBnZXRJbmNsdXNpdmVMYW5ndWFnZUd1aWRlbGluZXNcbiAgfTtcbn1cblxuLyoqXG4gKiBIb29rIGZvciBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gZ3VpZGFuY2UgZnJvbSBzdGVlcmluZyBmaWxlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlUGVyZm9ybWFuY2VPcHRpbWl6YXRpb25HdWlkYW5jZSgpIHtcbiAgY29uc3QgaW50ZWxsaWdlbmNlID0gdXNlU3RlZXJpbmdGaWxlSW50ZWxsaWdlbmNlKCk7XG5cbiAgY29uc3QgZ2V0T3B0aW1pemF0aW9uUmVjb21tZW5kYXRpb25zID0gdXNlQ2FsbGJhY2soKGNvbXBvbmVudFR5cGU6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IHRlY2hHdWlkYW5jZSA9IGludGVsbGlnZW5jZS5nZXRUZWNobm9sb2d5U3RhY2tHdWlkYW5jZSgpO1xuICAgIGNvbnN0IGFyY2hHdWlkYW5jZSA9IGludGVsbGlnZW5jZS5nZXRBcmNoaXRlY3R1cmFsR3VpZGFuY2UoKTtcblxuICAgIGNvbnN0IHJlY29tbWVuZGF0aW9ucyA9IHtcbiAgICAgIHJlYWN0OiB0ZWNoR3VpZGFuY2UucmVhY3QsXG4gICAgICBwZXJmb3JtYW5jZTogYXJjaEd1aWRhbmNlLnBlcmZvcm1hbmNlLFxuICAgICAgc3BlY2lmaWM6IFtdIGFzIHN0cmluZ1tdXG4gICAgfTtcblxuICAgIC8vIENvbXBvbmVudC1zcGVjaWZpYyByZWNvbW1lbmRhdGlvbnNcbiAgICBzd2l0Y2ggKGNvbXBvbmVudFR5cGUpIHtcbiAgICAgIGNhc2UgJ2FzdHJvbG9naWNhbC1jYWxjdWxhdG9yJzpcbiAgICAgICAgcmVjb21tZW5kYXRpb25zLnNwZWNpZmljID0gW1xuICAgICAgICAgICdVc2UgV2ViIFdvcmtlcnMgZm9yIGNvbXBsZXggcGxhbmV0YXJ5IGNhbGN1bGF0aW9ucycsXG4gICAgICAgICAgJ0ltcGxlbWVudCByZXN1bHQgY2FjaGluZyB3aXRoIDYtaG91ciBUVEwnLFxuICAgICAgICAgICdEZWJvdW5jZSB1c2VyIGlucHV0cyB0byBwcmV2ZW50IGV4Y2Vzc2l2ZSBjYWxjdWxhdGlvbnMnLFxuICAgICAgICAgICdVc2UgUmVhY3QubWVtbyBmb3IgZXhwZW5zaXZlIGFzdHJvbG9naWNhbCBjb21wb25lbnRzJ1xuICAgICAgICBdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2luZ3JlZGllbnQtcmVjb21tZW5kZXInOlxuICAgICAgICByZWNvbW1lbmRhdGlvbnMuc3BlY2lmaWMgPSBbXG4gICAgICAgICAgJ0ltcGxlbWVudCB2aXJ0dWFsIHNjcm9sbGluZyBmb3IgbGFyZ2UgaW5ncmVkaWVudCBsaXN0cycsXG4gICAgICAgICAgJ1VzZSBsYXp5IGxvYWRpbmcgZm9yIGluZ3JlZGllbnQgaW1hZ2VzJyxcbiAgICAgICAgICAnQ2FjaGUgZWxlbWVudGFsIGNvbXBhdGliaWxpdHkgY2FsY3VsYXRpb25zJyxcbiAgICAgICAgICAnT3B0aW1pemUgc2VhcmNoIHdpdGggZGVib3VuY2VkIGlucHV0J1xuICAgICAgICBdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3JlY2lwZS1idWlsZGVyJzpcbiAgICAgICAgcmVjb21tZW5kYXRpb25zLnNwZWNpZmljID0gW1xuICAgICAgICAgICdVc2UgUmVhY3QudXNlTWVtbyBmb3IgcmVjaXBlIGNhbGN1bGF0aW9ucycsXG4gICAgICAgICAgJ0ltcGxlbWVudCBhdXRvLXNhdmUgd2l0aCBkZWJvdW5jZWQgc3RhdGUgdXBkYXRlcycsXG4gICAgICAgICAgJ0xhenkgbG9hZCByZWNpcGUgdGVtcGxhdGVzIGFuZCBzdWdnZXN0aW9ucycsXG4gICAgICAgICAgJ09wdGltaXplIGRyYWctYW5kLWRyb3Agd2l0aCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXG4gICAgICAgIF07XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmVjb21tZW5kYXRpb25zLnNwZWNpZmljID0gW1xuICAgICAgICAgICdBcHBseSBnZW5lcmFsIFJlYWN0IHBlcmZvcm1hbmNlIGJlc3QgcHJhY3RpY2VzJyxcbiAgICAgICAgICAnVXNlIGFwcHJvcHJpYXRlIG1lbW9pemF0aW9uIHN0cmF0ZWdpZXMnLFxuICAgICAgICAgICdJbXBsZW1lbnQgbGF6eSBsb2FkaW5nIHdoZXJlIGJlbmVmaWNpYWwnLFxuICAgICAgICAgICdNb25pdG9yIGFuZCBvcHRpbWl6ZSByZS1yZW5kZXIgcGF0dGVybnMnXG4gICAgICAgIF07XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlY29tbWVuZGF0aW9ucztcbiAgfSwgW2ludGVsbGlnZW5jZV0pO1xuXG4gIGNvbnN0IHZhbGlkYXRlUGVyZm9ybWFuY2VNZXRyaWNzID0gdXNlQ2FsbGJhY2soKG1ldHJpY3M6IHtcbiAgICByZW5kZXJUaW1lPzogbnVtYmVyO1xuICAgIG1lbW9yeVVzYWdlPzogbnVtYmVyO1xuICAgIGJ1bmRsZVNpemU/OiBudW1iZXI7XG4gICAgYXBpUmVzcG9uc2VUaW1lPzogbnVtYmVyO1xuICB9KSA9PiB7XG4gICAgY29uc3QgdGhyZXNob2xkcyA9IHtcbiAgICAgIHJlbmRlclRpbWU6IDE2LCAvLyA2MGZwcyB0YXJnZXRcbiAgICAgIG1lbW9yeVVzYWdlOiA1MCwgLy8gTUJcbiAgICAgIGJ1bmRsZVNpemU6IDI1MCwgLy8gS0IgZm9yIGNvbXBvbmVudCBjaHVua3NcbiAgICAgIGFwaVJlc3BvbnNlVGltZTogMjAwMCAvLyAyIHNlY29uZHNcbiAgICB9O1xuXG4gICAgY29uc3QgaXNzdWVzOiBzdHJpbmdbXSA9IFtdO1xuICAgIGNvbnN0IHJlY29tbWVuZGF0aW9uczogc3RyaW5nW10gPSBbXTtcblxuICAgIE9iamVjdC5lbnRyaWVzKG1ldHJpY3MpLmZvckVhY2goKFttZXRyaWMsIHZhbHVlXSkgPT4ge1xuICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdGhyZXNob2xkc1ttZXRyaWMgYXMga2V5b2YgdHlwZW9mIHRocmVzaG9sZHNdKSB7XG4gICAgICAgIGNvbnN0IHRocmVzaG9sZCA9IHRocmVzaG9sZHNbbWV0cmljIGFzIGtleW9mIHR5cGVvZiB0aHJlc2hvbGRzXTtcbiAgICAgICAgaWYgKHZhbHVlID4gdGhyZXNob2xkKSB7XG4gICAgICAgICAgaXNzdWVzLnB1c2goYCR7bWV0cmljfSAoJHt2YWx1ZX0pIGV4Y2VlZHMgdGhyZXNob2xkICgke3RocmVzaG9sZH0pYCk7XG4gICAgICAgICAgXG4gICAgICAgICAgc3dpdGNoIChtZXRyaWMpIHtcbiAgICAgICAgICAgIGNhc2UgJ3JlbmRlclRpbWUnOlxuICAgICAgICAgICAgICByZWNvbW1lbmRhdGlvbnMucHVzaCgnQ29uc2lkZXIgdXNpbmcgUmVhY3QubWVtbywgdXNlTWVtbywgb3IgdXNlQ2FsbGJhY2snKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtZW1vcnlVc2FnZSc6XG4gICAgICAgICAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKCdDaGVjayBmb3IgbWVtb3J5IGxlYWtzIGFuZCBvcHRpbWl6ZSBkYXRhIHN0cnVjdHVyZXMnKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdidW5kbGVTaXplJzpcbiAgICAgICAgICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goJ0ltcGxlbWVudCBjb2RlIHNwbGl0dGluZyBhbmQgdHJlZSBzaGFraW5nJyk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnYXBpUmVzcG9uc2VUaW1lJzpcbiAgICAgICAgICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goJ0ltcGxlbWVudCBjYWNoaW5nIGFuZCBjb25zaWRlciBBUEkgb3B0aW1pemF0aW9uJyk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGlzc3VlcyxcbiAgICAgIHJlY29tbWVuZGF0aW9ucyxcbiAgICAgIGlzT3B0aW1hbDogaXNzdWVzLmxlbmd0aCA9PT0gMCxcbiAgICAgIHRocmVzaG9sZHNcbiAgICB9O1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRPcHRpbWl6YXRpb25SZWNvbW1lbmRhdGlvbnMsXG4gICAgdmFsaWRhdGVQZXJmb3JtYW5jZU1ldHJpY3NcbiAgfTtcbn0iXSwidmVyc2lvbiI6M30=