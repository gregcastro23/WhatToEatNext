2f7462ccc963353904ffcbe5924a5cf6
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CUISINES = exports.cuisinesMap = void 0;
// Import all cuisines
const chinese_1 = require("./chinese");
const french_1 = require("./french");
const greek_1 = require("./greek");
const indian_1 = require("./indian");
const italian_1 = require("./italian");
const japanese_1 = require("./japanese");
const korean_1 = require("./korean");
const mexican_1 = require("./mexican");
const middle_eastern_1 = require("./middle-eastern");
const russian_1 = require("./russian");
const thai_1 = require("./thai");
const vietnamese_1 = require("./vietnamese");
const african_1 = require("./african");
const american_1 = require("./american");
// Create a base cuisine structure
const baseCuisine = {
    id: 'base',
    name: '',
    description: '',
    motherSauces: {},
    dishes: {
        breakfast: {
            spring: [],
            summer: [],
            autumn: [],
            winter: []
        },
        lunch: {
            spring: [],
            summer: [],
            autumn: [],
            winter: []
        },
        dinner: {
            spring: [],
            summer: [],
            autumn: [],
            winter: []
        },
        dessert: {
            spring: [],
            summer: [],
            autumn: [],
            winter: []
        }
    },
    traditionalSauces: {},
    sauceRecommender: {
        forProtein: {},
        forVegetable: {},
        forCookingMethod: {},
        byAstrological: {},
        byRegion: {},
        byDietary: {}
    },
    cookingTechniques: [],
    regionalCuisines: {},
    elementalProperties: {
        Fire: 0,
        Water: 0.75,
        Earth: 0.65,
        Air: 0
    },
    astrologicalInfluences: []
};
// Process the recipes to combine seasonal and "all" categories
const processCuisineRecipes = (cuisine) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    if (!cuisine)
        return { ...baseCuisine };
    // Helper to combine "all" recipes with seasonal ones
    const combineRecipes = (mealType) => {
        if (!mealType)
            return { spring: [], summer: [], autumn: [], winter: [] };
        // Use safe type casting for mealType property access
        const mealData = mealType;
        // Extract the "all" recipes that should be added to each season
        // Make sure "all" is an array even if it's not defined
        const allRecipes = Array.isArray(mealData === null || mealData === void 0 ? void 0 : mealData.all) ? mealData.all : [];
        return {
            spring: [...(Array.isArray(mealData === null || mealData === void 0 ? void 0 : mealData.spring) ? mealData.spring : []), ...allRecipes],
            summer: [...(Array.isArray(mealData === null || mealData === void 0 ? void 0 : mealData.summer) ? mealData.summer : []), ...allRecipes],
            autumn: [...(Array.isArray(mealData === null || mealData === void 0 ? void 0 : mealData.autumn) ? mealData.autumn : []), ...allRecipes],
            winter: [...(Array.isArray(mealData === null || mealData === void 0 ? void 0 : mealData.winter) ? mealData.winter : []), ...allRecipes]
        };
    };
    // Ensure the cuisine has at least a valid ID and name
    const name = cuisine.name || '';
    const id = cuisine.id || 'cuisine-' + name.toLowerCase().replace(/\s+/g, '-');
    return {
        id,
        name,
        description: cuisine.description || '',
        motherSauces: cuisine.motherSauces || {},
        dishes: {
            breakfast: combineRecipes((_a = cuisine.dishes) === null || _a === void 0 ? void 0 : _a.breakfast),
            lunch: combineRecipes((_b = cuisine.dishes) === null || _b === void 0 ? void 0 : _b.lunch),
            dinner: combineRecipes((_c = cuisine.dishes) === null || _c === void 0 ? void 0 : _c.dinner),
            dessert: combineRecipes((_d = cuisine.dishes) === null || _d === void 0 ? void 0 : _d.dessert)
        },
        traditionalSauces: cuisine.traditionalSauces || {},
        sauceRecommender: {
            forProtein: ((_e = cuisine.sauceRecommender) === null || _e === void 0 ? void 0 : _e.forProtein) || {},
            forVegetable: ((_f = cuisine.sauceRecommender) === null || _f === void 0 ? void 0 : _f.forVegetable) || {},
            forCookingMethod: ((_g = cuisine.sauceRecommender) === null || _g === void 0 ? void 0 : _g.forCookingMethod) || {},
            byAstrological: ((_h = cuisine.sauceRecommender) === null || _h === void 0 ? void 0 : _h.byAstrological) || {},
            byRegion: ((_j = cuisine.sauceRecommender) === null || _j === void 0 ? void 0 : _j.byRegion) || {},
            byDietary: ((_k = cuisine.sauceRecommender) === null || _k === void 0 ? void 0 : _k.byDietary) || {}
        },
        cookingTechniques: Array.isArray(cuisine.cookingTechniques) ? cuisine.cookingTechniques : [],
        regionalCuisines: cuisine.regionalCuisines || {},
        elementalProperties: cuisine.elementalProperties ||
            cuisine.elementalState || // For backward compatibility
            { ...baseCuisine.elementalProperties },
        regionalVarieties: cuisine.regionalCuisines ? Object.keys(cuisine.regionalCuisines).length : 0,
        astrologicalInfluences: Array.isArray(cuisine.astrologicalInfluences) ? cuisine.astrologicalInfluences : []
    }; // Use type assertion to ensure the return type is Cuisine
};
// Create and export the cuisines map with validated structures
exports.cuisinesMap = {
    African: processCuisineRecipes(african_1.african),
    American: processCuisineRecipes(american_1.american),
    Chinese: processCuisineRecipes(chinese_1.chinese),
    French: processCuisineRecipes(french_1.french),
    Greek: processCuisineRecipes(greek_1.greek),
    Indian: processCuisineRecipes(indian_1.indian),
    Italian: processCuisineRecipes(italian_1.italian),
    Japanese: processCuisineRecipes(japanese_1.japanese),
    Korean: processCuisineRecipes(korean_1.korean),
    Mexican: processCuisineRecipes(mexican_1.mexican),
    'Middle Eastern': processCuisineRecipes(middle_eastern_1.middleEastern),
    Russian: processCuisineRecipes(russian_1.russian),
    Thai: processCuisineRecipes(thai_1.thai),
    Vietnamese: processCuisineRecipes(vietnamese_1.vietnamese),
    // Add lowercase variants for problematic cuisines
    african: processCuisineRecipes(african_1.african),
    american: processCuisineRecipes(american_1.american)
};
exports.default = exports.cuisinesMap;
// Element properties for the refined culinary search
exports.CUISINES = {
    american: {
        name: 'American',
        elementalProperties: {
            Fire: 0.3,
            Water: 0.2,
            Earth: 0.3,
            Air: 0.2
        }
    },
    chinese: {
        name: 'Chinese',
        elementalProperties: {
            Fire: 0.3,
            Water: 0.3,
            Earth: 0.3,
            Air: 0.1
        }
    },
    japanese: {
        name: 'Japanese',
        elementalProperties: {
            Fire: 0.2,
            Water: 0.4,
            Earth: 0.2,
            Air: 0.2
        }
    },
    indian: {
        name: 'Indian',
        elementalProperties: {
            Fire: 0.4,
            Water: 0.2,
            Earth: 0.2,
            Air: 0.2
        }
    },
    french: {
        name: 'French',
        elementalProperties: {
            Fire: 0.2,
            Water: 0.3,
            Earth: 0.3,
            Air: 0.2
        }
    },
    italian: {
        name: 'Italian',
        elementalProperties: {
            Fire: 0.3,
            Earth: 0.4,
            Water: 0.2,
            Air: 0.1
        }
    },
    african: {
        name: 'African',
        elementalProperties: {
            Fire: 0.3,
            Earth: 0.4,
            Water: 0.2,
            Air: 0.1
        }
    },
    middleEastern: {
        name: 'Middle Eastern',
        elementalProperties: {
            Fire: 0.3,
            Earth: 0.3,
            Water: 0.2,
            Air: 0.2
        }
    },
    greek: {
        name: 'Greek',
        elementalProperties: {
            Fire: 0.2,
            Earth: 0.3,
            Water: 0.3,
            Air: 0.2
        }
    },
    mexican: {
        name: 'Mexican',
        elementalProperties: {
            Fire: 0.5,
            Earth: 0.3,
            Water: 0.1,
            Air: 0.1
        }
    },
    thai: {
        name: 'Thai',
        elementalProperties: {
            Fire: 0.4,
            Water: 0.3,
            Earth: 0.2,
            Air: 0.1
        }
    },
    vietnamese: {
        name: 'Vietnamese',
        elementalProperties: {
            Water: 0.4,
            Fire: 0.2,
            Earth: 0.2,
            Air: 0.2
        }
    },
    korean: {
        name: 'Korean',
        elementalProperties: {
            Fire: 0.3,
            Earth: 0.3,
            Water: 0.2,
            Air: 0.2
        }
    },
    russian: {
        name: 'Russian',
        elementalProperties: {
            Earth: 0.5,
            Water: 0.2,
            Fire: 0.2,
            Air: 0.1
        }
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,