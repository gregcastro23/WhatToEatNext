{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/data/cuisines/index.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/data/cuisines/index.ts"],"sourcesContent":["import type { Cuisine } from '@/types/cuisine';\n\n// Import all cuisines\nimport { chinese } from './chinese';\nimport { french } from './french';\nimport { greek } from './greek';\nimport { indian } from './indian';\nimport { italian } from './italian';\nimport { japanese } from './japanese';\nimport { korean } from './korean';\nimport { mexican } from './mexican';\nimport { middleEastern } from './middle-eastern';\nimport { russian } from './russian';\nimport { thai } from './thai';\nimport { vietnamese } from './vietnamese';\nimport { african } from './african';\nimport { american } from './american';\n\n// Create a base cuisine structure\nconst baseCuisine: Cuisine = {\n    id: 'base',\n    name: '',\n    description: '',\n    motherSauces: {},\n    dishes: {\n        breakfast: { \n            spring: [],\n            summer: [],\n            autumn: [],\n            winter: []\n        },\n        lunch: { \n            spring: [],\n            summer: [],\n            autumn: [],\n            winter: []\n        },\n        dinner: { \n            spring: [],\n            summer: [],\n            autumn: [],\n            winter: []\n        },\n        dessert: { \n            spring: [],\n            summer: [],\n            autumn: [],\n            winter: []\n        }\n    },\n    traditionalSauces: {},\n    sauceRecommender: {\n        forProtein: {},\n        forVegetable: {},\n        forCookingMethod: {},\n        byAstrological: {},\n        byRegion: {},\n        byDietary: {}\n    },\n    cookingTechniques: [],\n    regionalCuisines: {},\n    elementalProperties: {\n        Fire: 0,\n        Water: 0.75,\n        Earth: 0.65,\n        Air: 0\n    },\n    astrologicalInfluences: []\n};\n\n// Process the recipes to combine seasonal and \"all\" categories\nconst processCuisineRecipes = (cuisine: Partial<Cuisine>): Cuisine => {\n  if (!cuisine) return { ...baseCuisine };\n  \n  // Helper to combine \"all\" recipes with seasonal ones\n  const combineRecipes = (mealType: unknown) => {\n    if (!mealType) return { spring: [], summer: [], autumn: [], winter: [] };\n    \n    // Use safe type casting for mealType property access\n    const mealData = mealType as Record<string, unknown>;\n    \n    // Extract the \"all\" recipes that should be added to each season\n    // Make sure \"all\" is an array even if it's not defined\n    const allRecipes = Array.isArray(mealData?.all) ? mealData.all : [];\n    \n    return {\n      spring: [...(Array.isArray(mealData?.spring) ? mealData.spring : []), ...allRecipes],\n      summer: [...(Array.isArray(mealData?.summer) ? mealData.summer : []), ...allRecipes],\n      autumn: [...(Array.isArray(mealData?.autumn) ? mealData.autumn : []), ...allRecipes],\n      winter: [...(Array.isArray(mealData?.winter) ? mealData.winter : []), ...allRecipes]\n    };\n  };\n  \n  // Ensure the cuisine has at least a valid ID and name\n  const name = cuisine.name || '';\n  const id = cuisine.id || 'cuisine-' + name.toLowerCase().replace(/\\s+/g, '-');\n  \n  return {\n    id,\n    name,\n    description: cuisine.description || '',\n    motherSauces: cuisine.motherSauces || {},\n    dishes: {\n      breakfast: combineRecipes(cuisine.dishes?.breakfast),\n      lunch: combineRecipes(cuisine.dishes?.lunch),\n      dinner: combineRecipes(cuisine.dishes?.dinner),\n      dessert: combineRecipes(cuisine.dishes?.dessert)\n    },\n    traditionalSauces: cuisine.traditionalSauces || {},\n    sauceRecommender: {\n      forProtein: cuisine.sauceRecommender?.forProtein || {},\n      forVegetable: cuisine.sauceRecommender?.forVegetable || {},\n      forCookingMethod: cuisine.sauceRecommender?.forCookingMethod || {},\n      byAstrological: cuisine.sauceRecommender?.byAstrological || {},\n      byRegion: cuisine.sauceRecommender?.byRegion || {},\n      byDietary: cuisine.sauceRecommender?.byDietary || {}\n    },\n    cookingTechniques: Array.isArray(cuisine.cookingTechniques) ? cuisine.cookingTechniques : [],\n    regionalCuisines: cuisine.regionalCuisines || {},\n    elementalProperties: cuisine.elementalProperties || \n                       (cuisine as Record<string, unknown>).elementalState || // For backward compatibility\n                       { ...baseCuisine.elementalProperties },\n    regionalVarieties: cuisine.regionalCuisines ? Object.keys(cuisine.regionalCuisines).length : 0,\n    astrologicalInfluences: Array.isArray(cuisine.astrologicalInfluences) ? cuisine.astrologicalInfluences : []\n  } as Cuisine; // Use type assertion to ensure the return type is Cuisine\n};\n\n// Create and export the cuisines map with validated structures\nexport const cuisinesMap = {\n    African: processCuisineRecipes(african as unknown),\n    American: processCuisineRecipes(american as unknown),\n    Chinese: processCuisineRecipes(chinese as unknown),\n    French: processCuisineRecipes(french as unknown),\n    Greek: processCuisineRecipes(greek as unknown),\n    Indian: processCuisineRecipes(indian as unknown),\n    Italian: processCuisineRecipes(italian as unknown),\n    Japanese: processCuisineRecipes(japanese as unknown),\n    Korean: processCuisineRecipes(korean as unknown),\n    Mexican: processCuisineRecipes(mexican as unknown),\n    'Middle Eastern': processCuisineRecipes(middleEastern as unknown),\n    Russian: processCuisineRecipes(russian as unknown),\n    Thai: processCuisineRecipes(thai as unknown),\n    Vietnamese: processCuisineRecipes(vietnamese as unknown),\n    // Add lowercase variants for problematic cuisines\n    african: processCuisineRecipes(african as unknown),\n    american: processCuisineRecipes(american as unknown)\n} as const;\n\nexport type CuisineName = keyof typeof cuisinesMap;\nexport default cuisinesMap;\n\n// Element properties for the refined culinary search\nexport const CUISINES = {\n  american: {\n    name: 'American',\n    elementalProperties: {\n      Fire: 0.3,\n      Water: 0.2,\n      Earth: 0.3,\n      Air: 0.2\n    }\n  },\n  chinese: {\n    name: 'Chinese',\n    elementalProperties: {\n      Fire: 0.3,\n      Water: 0.3,\n      Earth: 0.3,\n      Air: 0.1\n    }\n  },\n  japanese: {\n    name: 'Japanese',\n    elementalProperties: {\n      Fire: 0.2,\n      Water: 0.4,\n      Earth: 0.2,\n      Air: 0.2\n    }\n  },\n  indian: {\n    name: 'Indian',\n    elementalProperties: {\n      Fire: 0.4,\n      Water: 0.2,\n      Earth: 0.2,\n      Air: 0.2\n    }\n  },\n  french: {\n    name: 'French',\n    elementalProperties: {\n      Fire: 0.2,\n      Water: 0.3,\n      Earth: 0.3,\n      Air: 0.2\n    }\n  },\n  italian: {\n    name: 'Italian',\n    elementalProperties: {\n      Fire: 0.3,\n      Earth: 0.4,\n      Water: 0.2,\n      Air: 0.1\n    }\n  },\n  african: {\n    name: 'African',\n    elementalProperties: {\n      Fire: 0.3,\n      Earth: 0.4,\n      Water: 0.2,\n      Air: 0.1\n    }\n  },\n  middleEastern: {\n    name: 'Middle Eastern',\n    elementalProperties: {\n      Fire: 0.3,\n      Earth: 0.3,\n      Water: 0.2,\n      Air: 0.2\n    }\n  },\n  greek: {\n    name: 'Greek',\n    elementalProperties: {\n      Fire: 0.2,\n      Earth: 0.3,\n      Water: 0.3,\n      Air: 0.2\n    }\n  },\n  mexican: {\n    name: 'Mexican',\n    elementalProperties: {\n      Fire: 0.5,\n      Earth: 0.3,\n      Water: 0.1,\n      Air: 0.1\n    }\n  },\n  thai: {\n    name: 'Thai',\n    elementalProperties: {\n      Fire: 0.4,\n      Water: 0.3,\n      Earth: 0.2,\n      Air: 0.1\n    }\n  },\n  vietnamese: {\n    name: 'Vietnamese',\n    elementalProperties: {\n      Water: 0.4,\n      Fire: 0.2,\n      Earth: 0.2,\n      Air: 0.2\n    }\n  },\n  korean: {\n    name: 'Korean',\n    elementalProperties: {\n      Fire: 0.3,\n      Earth: 0.3,\n      Water: 0.2,\n      Air: 0.2\n    }\n  },\n  russian: {\n    name: 'Russian',\n    elementalProperties: {\n      Earth: 0.5,\n      Water: 0.2,\n      Fire: 0.2,\n      Air: 0.1\n    }\n  }\n} as const;\n\n// Type for cuisine data\nexport type CuisineData = {\n  name: string;\n  elementalProperties: {\n    Fire: number;\n    Water: number;\n    Earth: number;\n    Air: number;\n  };\n};\n\n// Ensure type safety\nexport type Cuisines = typeof CUISINES;"],"version":3}