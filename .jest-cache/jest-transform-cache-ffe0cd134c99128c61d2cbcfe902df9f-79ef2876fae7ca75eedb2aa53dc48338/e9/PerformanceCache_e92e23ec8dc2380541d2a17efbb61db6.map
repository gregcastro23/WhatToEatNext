{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/PerformanceCache.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/PerformanceCache.ts"],"sourcesContent":["// ===== PHASE 8: INTELLIGENT CACHING SYSTEM =====\n\nexport interface CacheEntry<T> {\n  data: T;\n  timestamp: number;\n  ttl: number; // Time to live in milliseconds\n  accessCount: number;\n  lastAccessed: number;\n}\n\nexport interface CacheStats {\n  totalEntries: number;\n  hitCount: number;\n  missCount: number;\n  hitRate: number;\n  memoryUsage: number; // Estimated in bytes\n  oldestEntry: number;\n  newestEntry: number;\n}\n\nexport interface PerformanceMetrics {\n  calculationTime: number;\n  cacheHitRate: number;\n  memoryUsage: number;\n  recommendationCount: number;\n  averageResponseTime: number;\n  peakMemoryUsage: number;\n}\n\n/**\n * Advanced caching system with TTL, LRU eviction, and performance monitoring\n * Designed for Phase 8 performance optimization\n */\nexport class PerformanceCache<T> {\n  private cache: Map<string, CacheEntry<T>> = new Map();\n  private maxSize: number;\n  private defaultTTL: number;\n  private hitCount: number = 0;\n  private missCount: number = 0;\n  private cleanupInterval: NodeJS.Timeout | null = null;\n\n  constructor(maxSize: number = 1000, defaultTTL: number = 300000) { // 5 minutes default TTL\n    this.maxSize = maxSize;\n    this.defaultTTL = defaultTTL;\n    \n    // Start cleanup interval (every 60 seconds)\n    this.cleanupInterval = setInterval(() => this.cleanup(), 60000);\n  }\n\n  /**\n   * Get item from cache with automatic TTL checking\n   */\n  get(key: string): T | null {\n    const entry = this.cache.get(key);\n    \n    if (!entry) {\n      this.missCount++;\n      return null;\n    }\n    \n    // Check TTL\n    const now = Date.now();\n    if (now - entry.timestamp > entry.ttl) {\n      this.cache.delete(key);\n      this.missCount++;\n      return null;\n    }\n    \n    // Update access statistics\n    entry.accessCount++;\n    entry.lastAccessed = now;\n    this.hitCount++;\n    \n    return entry.data;\n  }\n\n  /**\n   * Set item in cache with optional custom TTL\n   */\n  set(key: string, data: T, customTTL?: number): void {\n    const now = Date.now();\n    const ttl = customTTL || this.defaultTTL;\n    \n    // Check if we need to evict items\n    if (this.cache.size >= this.maxSize && !this.cache.has(key)) {\n      this.evictLRU();\n    }\n    \n    const entry: CacheEntry<T> = {\n      data,\n      timestamp: now,\n      ttl,\n      accessCount: 1,\n      lastAccessed: now\n    };\n    \n    this.cache.set(key, entry);\n  }\n\n  /**\n   * Check if key exists and is valid\n   */\n  has(key: string): boolean {\n    const entry = this.cache.get(key);\n    if (!entry) return false;\n    \n    const now = Date.now();\n    if (now - entry.timestamp > entry.ttl) {\n      this.cache.delete(key);\n      return false;\n    }\n    \n    return true;\n  }\n\n  /**\n   * Delete specific key\n   */\n  delete(key: string): boolean {\n    return this.cache.delete(key);\n  }\n\n  /**\n   * Clear all cache entries\n   */\n  clear(): void {\n    this.cache.clear();\n    this.hitCount = 0;\n    this.missCount = 0;\n  }\n\n  /**\n   * Get cache statistics\n   */\n  getStats(): CacheStats {\n    const now = Date.now();\n    let memoryUsage = 0;\n    let oldestEntry = now;\n    let newestEntry = 0;\n    \n    for (const [key, entry] of this.cache.entries()) {\n      // Estimate memory usage (rough calculation)\n      memoryUsage += (key || []).length * 2; // String characters are 2 bytes each\n      memoryUsage += this.estimateObjectSize(entry.data);\n      memoryUsage += 64; // Overhead for entry metadata\n      \n      if (entry.timestamp < oldestEntry) oldestEntry = entry.timestamp;\n      if (entry.timestamp > newestEntry) newestEntry = entry.timestamp;\n    }\n    \n    const totalRequests = this.hitCount + this.missCount;\n    const hitRate = totalRequests > 0 ? this.hitCount / totalRequests : 0;\n    \n    return {\n      totalEntries: this.cache.size,\n      hitCount: this.hitCount,\n      missCount: this.missCount,\n      hitRate,\n      memoryUsage,\n      oldestEntry: oldestEntry === now ? 0 : oldestEntry,\n      newestEntry\n    };\n  }\n\n  /**\n   * Evict least recently used item\n   */\n  private evictLRU(): void {\n    let lruKey: string | null = null;\n    let lruTime = Date.now();\n    \n    for (const [key, entry] of this.cache.entries()) {\n      if (entry.lastAccessed < lruTime) {\n        lruTime = entry.lastAccessed;\n        lruKey = key;\n      }\n    }\n    \n    if (lruKey) {\n      this.cache.delete(lruKey);\n    }\n  }\n\n  /**\n   * Clean up expired entries\n   */\n  private cleanup(): void {\n    const now = Date.now();\n    const keysToDelete: string[] = [];\n    \n    for (const [key, entry] of this.cache.entries()) {\n      if (now - entry.timestamp > entry.ttl) {\n        keysToDelete?.push(key);\n      }\n    }\n    \n    (keysToDelete || []).forEach(key => this.cache.delete(key));\n  }\n\n  /**\n   * Estimate object size in bytes (rough calculation)\n   */\n  private estimateObjectSize(obj: unknown): number {\n    if (obj === null || obj === undefined) return 0;\n    \n    if (typeof obj === 'string') return (obj || []).length * 2;\n    if (typeof obj === 'number') return 8;\n    if (typeof obj === 'boolean') return 4;\n    \n    if (Array.isArray(obj)) {\n      return obj.reduce((size, item) => size + this.estimateObjectSize(item), 0);\n    }\n    \n    if (typeof obj === 'object') {\n      let size = 0;\n      for (const [key, value] of Object.entries(obj)) {\n        size += (key || []).length * 2; // Key size\n        size += this.estimateObjectSize(value); // Value size\n      }\n      return size;\n    }\n    \n    return 64; // Default size for unknown types\n  }\n\n  /**\n   * Destroy cache and cleanup intervals\n   */\n  destroy(): void {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n      this.cleanupInterval = null;\n    }\n    this.clear();\n  }\n}\n\n/**\n * Performance monitoring utility\n */\nexport class PerformanceMonitor {\n  private metrics: PerformanceMetrics[] = [];\n  private currentMetrics: Partial<PerformanceMetrics> = {};\n  private maxHistorySize: number = 100;\n\n  /**\n   * Start timing an operation\n   */\n  startTiming(operation: string): () => void {\n    const startTime = performance.now();\n    \n    return () => {\n      const endTime = performance.now();\n      const duration = endTime - startTime;\n      \n      this.recordMetric('calculationTime', duration);\n      \n      return duration;\n    };\n  }\n\n  /**\n   * Record a metric value\n   */\n  recordMetric(metric: keyof PerformanceMetrics, value: number): void {\n    if (this.currentMetrics) {\n      this.currentMetrics[metric] = value;\n    }\n  }\n\n  /**\n   * Snapshot current metrics\n   */\n  snapshot(): PerformanceMetrics {\n    const snapshot: PerformanceMetrics = {\n      calculationTime: this.currentMetrics.calculationTime || 0,\n      cacheHitRate: this.currentMetrics.cacheHitRate || 0,\n      memoryUsage: this.currentMetrics.memoryUsage || 0,\n      recommendationCount: this.currentMetrics.recommendationCount || 0,\n      averageResponseTime: this.currentMetrics.averageResponseTime || 0,\n      peakMemoryUsage: this.currentMetrics.peakMemoryUsage || 0\n    };\n    \n    this.metrics?.push(snapshot);\n    \n    // Keep only recent metrics\n    if (this.metrics  || [].length > this.maxHistorySize) {\n      this.metrics?.shift();\n    }\n    \n    return snapshot;\n  }\n\n  /**\n   * Get performance statistics\n   */\n  getStats(): {\n    current: PerformanceMetrics;\n    average: PerformanceMetrics;\n    peak: PerformanceMetrics;\n    history: PerformanceMetrics[];\n  } {\n    if (this.metrics  || [].length === 0) {\n      const empty: PerformanceMetrics = {\n        calculationTime: 0,\n        cacheHitRate: 0,\n        memoryUsage: 0,\n        recommendationCount: 0,\n        averageResponseTime: 0,\n        peakMemoryUsage: 0\n      };\n      return { current: empty, average: empty, peak: empty, history: [] };\n    }\n    \n    const current = this.metrics[(this.metrics || []).length - 1];\n    \n    // Calculate averages\n    // Pattern KK-1: Safe arithmetic with type validation\n    const metricsLength = this.metrics?.length || 1;\n    const average: PerformanceMetrics = {\n      calculationTime: (this?.metrics?.reduce((sum, m) => {\n        const numericSum = typeof sum === 'number' ? sum : 0;\n        const numericValue = typeof m?.calculationTime === 'number' ? m.calculationTime : 0;\n        return numericSum + numericValue;\n      }, 0) || 0) / metricsLength,\n      cacheHitRate: (this?.metrics?.reduce((sum, m) => {\n        const numericSum = typeof sum === 'number' ? sum : 0;\n        const numericValue = typeof m?.cacheHitRate === 'number' ? m.cacheHitRate : 0;\n        return numericSum + numericValue;\n      }, 0) || 0) / metricsLength,\n      memoryUsage: (this?.metrics?.reduce((sum, m) => {\n        const numericSum = typeof sum === 'number' ? sum : 0;\n        const numericValue = typeof m?.memoryUsage === 'number' ? m.memoryUsage : 0;\n        return numericSum + numericValue;\n      }, 0) || 0) / metricsLength,\n      recommendationCount: (this?.metrics?.reduce((sum, m) => {\n        const numericSum = typeof sum === 'number' ? sum : 0;\n        const numericValue = typeof m?.recommendationCount === 'number' ? m.recommendationCount : 0;\n        return numericSum + numericValue;\n      }, 0) || 0) / metricsLength,\n      averageResponseTime: (this?.metrics?.reduce((sum, m) => {\n        const numericSum = typeof sum === 'number' ? sum : 0;\n        const numericValue = typeof m?.averageResponseTime === 'number' ? m.averageResponseTime : 0;\n        return numericSum + numericValue;\n      }, 0) || 0) / metricsLength,\n      peakMemoryUsage: (this?.metrics?.reduce((sum, m) => {\n        const numericSum = typeof sum === 'number' ? sum : 0;\n        const numericValue = typeof m?.peakMemoryUsage === 'number' ? m.peakMemoryUsage : 0;\n        return numericSum + numericValue;\n      }, 0) || 0) / metricsLength\n    };\n    \n    // Calculate peaks\n    const peak: PerformanceMetrics = {\n      calculationTime: Math.max(...this?.metrics || [].map(m => m.calculationTime)),\n      cacheHitRate: Math.max(...this?.metrics || [].map(m => m.cacheHitRate)),\n      memoryUsage: Math.max(...this?.metrics || [].map(m => m.memoryUsage)),\n      recommendationCount: Math.max(...this?.metrics || [].map(m => m.recommendationCount)),\n      averageResponseTime: Math.max(...this?.metrics || [].map(m => m.averageResponseTime)),\n      peakMemoryUsage: Math.max(...this?.metrics || [].map(m => m.peakMemoryUsage))\n    };\n    \n    return { current, average, peak, history: [...this.metrics] };\n  }\n\n  /**\n   * Clear metrics history\n   */\n  clear(): void {\n    this.metrics = [];\n    this.currentMetrics = {};\n  }\n}\n\n// ===== GLOBAL CACHE INSTANCES =====\n\nexport const flavorCompatibilityCache = new PerformanceCache<unknown>(2000, 600000); // 10 minutes TTL\nexport const astrologicalProfileCache = new PerformanceCache<unknown>(500, 300000); // 5 minutes TTL\nexport const ingredientProfileCache = new PerformanceCache<unknown>(1500, 1800000); // 30 minutes TTL\nexport const performanceMonitor = new PerformanceMonitor();\n\n// ===== CACHE WARMING FUNCTIONS =====\n\n/**\n * Warm up caches with common calculations\n */\nexport async function warmupCaches(): Promise<void> {\n  console.log('🔥 Warming up caches for optimal performance...');\n  \n  // This will be implemented with actual data warming\n  // For now, just log the warming process\n  \n  console.log('✅ Cache warmup complete');\n}\n\n/**\n * Get combined cache statistics\n */\nexport function getAllCacheStats(): {\n  flavorCompatibility: CacheStats;\n  astrologicalProfile: CacheStats;\n  ingredientProfile: CacheStats;\n  performance: ReturnType<PerformanceMonitor['getStats']>;\n} {\n  return {\n    flavorCompatibility: flavorCompatibilityCache.getStats(),\n    astrologicalProfile: astrologicalProfileCache.getStats(),\n    ingredientProfile: ingredientProfileCache.getStats(),\n    performance: performanceMonitor.getStats()\n  };\n}\n\n/**\n * Clear all caches\n */\nexport function clearAllCaches(): void {\n  flavorCompatibilityCache.clear();\n  astrologicalProfileCache.clear();\n  ingredientProfileCache.clear();\n  performanceMonitor.clear();\n  console.log('🧹 All caches cleared');\n} "],"version":3}