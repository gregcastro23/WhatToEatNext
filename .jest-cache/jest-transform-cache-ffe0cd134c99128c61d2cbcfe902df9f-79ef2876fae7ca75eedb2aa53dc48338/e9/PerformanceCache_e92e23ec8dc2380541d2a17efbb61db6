d361a92f34da21d7b7d7d88595a5a796
"use strict";
// ===== PHASE 8: INTELLIGENT CACHING SYSTEM =====
Object.defineProperty(exports, "__esModule", { value: true });
exports.clearAllCaches = exports.getAllCacheStats = exports.warmupCaches = exports.performanceMonitor = exports.ingredientProfileCache = exports.astrologicalProfileCache = exports.flavorCompatibilityCache = exports.PerformanceMonitor = exports.PerformanceCache = void 0;
/**
 * Advanced caching system with TTL, LRU eviction, and performance monitoring
 * Designed for Phase 8 performance optimization
 */
class PerformanceCache {
    constructor(maxSize = 1000, defaultTTL = 300000) {
        this.cache = new Map();
        this.hitCount = 0;
        this.missCount = 0;
        this.cleanupInterval = null;
        this.maxSize = maxSize;
        this.defaultTTL = defaultTTL;
        // Start cleanup interval (every 60 seconds)
        this.cleanupInterval = setInterval(() => this.cleanup(), 60000);
    }
    /**
     * Get item from cache with automatic TTL checking
     */
    get(key) {
        const entry = this.cache.get(key);
        if (!entry) {
            this.missCount++;
            return null;
        }
        // Check TTL
        const now = Date.now();
        if (now - entry.timestamp > entry.ttl) {
            this.cache.delete(key);
            this.missCount++;
            return null;
        }
        // Update access statistics
        entry.accessCount++;
        entry.lastAccessed = now;
        this.hitCount++;
        return entry.data;
    }
    /**
     * Set item in cache with optional custom TTL
     */
    set(key, data, customTTL) {
        const now = Date.now();
        const ttl = customTTL || this.defaultTTL;
        // Check if we need to evict items
        if (this.cache.size >= this.maxSize && !this.cache.has(key)) {
            this.evictLRU();
        }
        const entry = {
            data,
            timestamp: now,
            ttl,
            accessCount: 1,
            lastAccessed: now
        };
        this.cache.set(key, entry);
    }
    /**
     * Check if key exists and is valid
     */
    has(key) {
        const entry = this.cache.get(key);
        if (!entry)
            return false;
        const now = Date.now();
        if (now - entry.timestamp > entry.ttl) {
            this.cache.delete(key);
            return false;
        }
        return true;
    }
    /**
     * Delete specific key
     */
    delete(key) {
        return this.cache.delete(key);
    }
    /**
     * Clear all cache entries
     */
    clear() {
        this.cache.clear();
        this.hitCount = 0;
        this.missCount = 0;
    }
    /**
     * Get cache statistics
     */
    getStats() {
        const now = Date.now();
        let memoryUsage = 0;
        let oldestEntry = now;
        let newestEntry = 0;
        for (const [key, entry] of this.cache.entries()) {
            // Estimate memory usage (rough calculation)
            memoryUsage += (key || []).length * 2; // String characters are 2 bytes each
            memoryUsage += this.estimateObjectSize(entry.data);
            memoryUsage += 64; // Overhead for entry metadata
            if (entry.timestamp < oldestEntry)
                oldestEntry = entry.timestamp;
            if (entry.timestamp > newestEntry)
                newestEntry = entry.timestamp;
        }
        const totalRequests = this.hitCount + this.missCount;
        const hitRate = totalRequests > 0 ? this.hitCount / totalRequests : 0;
        return {
            totalEntries: this.cache.size,
            hitCount: this.hitCount,
            missCount: this.missCount,
            hitRate,
            memoryUsage,
            oldestEntry: oldestEntry === now ? 0 : oldestEntry,
            newestEntry
        };
    }
    /**
     * Evict least recently used item
     */
    evictLRU() {
        let lruKey = null;
        let lruTime = Date.now();
        for (const [key, entry] of this.cache.entries()) {
            if (entry.lastAccessed < lruTime) {
                lruTime = entry.lastAccessed;
                lruKey = key;
            }
        }
        if (lruKey) {
            this.cache.delete(lruKey);
        }
    }
    /**
     * Clean up expired entries
     */
    cleanup() {
        const now = Date.now();
        const keysToDelete = [];
        for (const [key, entry] of this.cache.entries()) {
            if (now - entry.timestamp > entry.ttl) {
                keysToDelete === null || keysToDelete === void 0 ? void 0 : keysToDelete.push(key);
            }
        }
        (keysToDelete || []).forEach(key => this.cache.delete(key));
    }
    /**
     * Estimate object size in bytes (rough calculation)
     */
    estimateObjectSize(obj) {
        if (obj === null || obj === undefined)
            return 0;
        if (typeof obj === 'string')
            return (obj || []).length * 2;
        if (typeof obj === 'number')
            return 8;
        if (typeof obj === 'boolean')
            return 4;
        if (Array.isArray(obj)) {
            return obj.reduce((size, item) => size + this.estimateObjectSize(item), 0);
        }
        if (typeof obj === 'object') {
            let size = 0;
            for (const [key, value] of Object.entries(obj)) {
                size += (key || []).length * 2; // Key size
                size += this.estimateObjectSize(value); // Value size
            }
            return size;
        }
        return 64; // Default size for unknown types
    }
    /**
     * Destroy cache and cleanup intervals
     */
    destroy() {
        if (this.cleanupInterval) {
            clearInterval(this.cleanupInterval);
            this.cleanupInterval = null;
        }
        this.clear();
    }
}
exports.PerformanceCache = PerformanceCache;
/**
 * Performance monitoring utility
 */
class PerformanceMonitor {
    constructor() {
        this.metrics = [];
        this.currentMetrics = {};
        this.maxHistorySize = 100;
    }
    /**
     * Start timing an operation
     */
    startTiming(operation) {
        const startTime = performance.now();
        return () => {
            const endTime = performance.now();
            const duration = endTime - startTime;
            this.recordMetric('calculationTime', duration);
            return duration;
        };
    }
    /**
     * Record a metric value
     */
    recordMetric(metric, value) {
        if (this.currentMetrics) {
            this.currentMetrics[metric] = value;
        }
    }
    /**
     * Snapshot current metrics
     */
    snapshot() {
        var _a, _b;
        const snapshot = {
            calculationTime: this.currentMetrics.calculationTime || 0,
            cacheHitRate: this.currentMetrics.cacheHitRate || 0,
            memoryUsage: this.currentMetrics.memoryUsage || 0,
            recommendationCount: this.currentMetrics.recommendationCount || 0,
            averageResponseTime: this.currentMetrics.averageResponseTime || 0,
            peakMemoryUsage: this.currentMetrics.peakMemoryUsage || 0
        };
        (_a = this.metrics) === null || _a === void 0 ? void 0 : _a.push(snapshot);
        // Keep only recent metrics
        if (this.metrics || [].length > this.maxHistorySize) {
            (_b = this.metrics) === null || _b === void 0 ? void 0 : _b.shift();
        }
        return snapshot;
    }
    /**
     * Get performance statistics
     */
    getStats() {
        var _a, _b, _c, _d, _e, _f, _g;
        if (this.metrics || [].length === 0) {
            const empty = {
                calculationTime: 0,
                cacheHitRate: 0,
                memoryUsage: 0,
                recommendationCount: 0,
                averageResponseTime: 0,
                peakMemoryUsage: 0
            };
            return { current: empty, average: empty, peak: empty, history: [] };
        }
        const current = this.metrics[(this.metrics || []).length - 1];
        // Calculate averages
        // Pattern KK-1: Safe arithmetic with type validation
        const metricsLength = ((_a = this.metrics) === null || _a === void 0 ? void 0 : _a.length) || 1;
        const average = {
            calculationTime: (((_b = this === null || this === void 0 ? void 0 : this.metrics) === null || _b === void 0 ? void 0 : _b.reduce((sum, m) => {
                const numericSum = typeof sum === 'number' ? sum : 0;
                const numericValue = typeof (m === null || m === void 0 ? void 0 : m.calculationTime) === 'number' ? m.calculationTime : 0;
                return numericSum + numericValue;
            }, 0)) || 0) / metricsLength,
            cacheHitRate: (((_c = this === null || this === void 0 ? void 0 : this.metrics) === null || _c === void 0 ? void 0 : _c.reduce((sum, m) => {
                const numericSum = typeof sum === 'number' ? sum : 0;
                const numericValue = typeof (m === null || m === void 0 ? void 0 : m.cacheHitRate) === 'number' ? m.cacheHitRate : 0;
                return numericSum + numericValue;
            }, 0)) || 0) / metricsLength,
            memoryUsage: (((_d = this === null || this === void 0 ? void 0 : this.metrics) === null || _d === void 0 ? void 0 : _d.reduce((sum, m) => {
                const numericSum = typeof sum === 'number' ? sum : 0;
                const numericValue = typeof (m === null || m === void 0 ? void 0 : m.memoryUsage) === 'number' ? m.memoryUsage : 0;
                return numericSum + numericValue;
            }, 0)) || 0) / metricsLength,
            recommendationCount: (((_e = this === null || this === void 0 ? void 0 : this.metrics) === null || _e === void 0 ? void 0 : _e.reduce((sum, m) => {
                const numericSum = typeof sum === 'number' ? sum : 0;
                const numericValue = typeof (m === null || m === void 0 ? void 0 : m.recommendationCount) === 'number' ? m.recommendationCount : 0;
                return numericSum + numericValue;
            }, 0)) || 0) / metricsLength,
            averageResponseTime: (((_f = this === null || this === void 0 ? void 0 : this.metrics) === null || _f === void 0 ? void 0 : _f.reduce((sum, m) => {
                const numericSum = typeof sum === 'number' ? sum : 0;
                const numericValue = typeof (m === null || m === void 0 ? void 0 : m.averageResponseTime) === 'number' ? m.averageResponseTime : 0;
                return numericSum + numericValue;
            }, 0)) || 0) / metricsLength,
            peakMemoryUsage: (((_g = this === null || this === void 0 ? void 0 : this.metrics) === null || _g === void 0 ? void 0 : _g.reduce((sum, m) => {
                const numericSum = typeof sum === 'number' ? sum : 0;
                const numericValue = typeof (m === null || m === void 0 ? void 0 : m.peakMemoryUsage) === 'number' ? m.peakMemoryUsage : 0;
                return numericSum + numericValue;
            }, 0)) || 0) / metricsLength
        };
        // Calculate peaks
        const peak = {
            calculationTime: Math.max(...(this === null || this === void 0 ? void 0 : this.metrics) || [].map(m => m.calculationTime)),
            cacheHitRate: Math.max(...(this === null || this === void 0 ? void 0 : this.metrics) || [].map(m => m.cacheHitRate)),
            memoryUsage: Math.max(...(this === null || this === void 0 ? void 0 : this.metrics) || [].map(m => m.memoryUsage)),
            recommendationCount: Math.max(...(this === null || this === void 0 ? void 0 : this.metrics) || [].map(m => m.recommendationCount)),
            averageResponseTime: Math.max(...(this === null || this === void 0 ? void 0 : this.metrics) || [].map(m => m.averageResponseTime)),
            peakMemoryUsage: Math.max(...(this === null || this === void 0 ? void 0 : this.metrics) || [].map(m => m.peakMemoryUsage))
        };
        return { current, average, peak, history: [...this.metrics] };
    }
    /**
     * Clear metrics history
     */
    clear() {
        this.metrics = [];
        this.currentMetrics = {};
    }
}
exports.PerformanceMonitor = PerformanceMonitor;
// ===== GLOBAL CACHE INSTANCES =====
exports.flavorCompatibilityCache = new PerformanceCache(2000, 600000); // 10 minutes TTL
exports.astrologicalProfileCache = new PerformanceCache(500, 300000); // 5 minutes TTL
exports.ingredientProfileCache = new PerformanceCache(1500, 1800000); // 30 minutes TTL
exports.performanceMonitor = new PerformanceMonitor();
// ===== CACHE WARMING FUNCTIONS =====
/**
 * Warm up caches with common calculations
 */
async function warmupCaches() {
    console.log('🔥 Warming up caches for optimal performance...');
    // This will be implemented with actual data warming
    // For now, just log the warming process
    console.log('✅ Cache warmup complete');
}
exports.warmupCaches = warmupCaches;
/**
 * Get combined cache statistics
 */
function getAllCacheStats() {
    return {
        flavorCompatibility: exports.flavorCompatibilityCache.getStats(),
        astrologicalProfile: exports.astrologicalProfileCache.getStats(),
        ingredientProfile: exports.ingredientProfileCache.getStats(),
        performance: exports.performanceMonitor.getStats()
    };
}
exports.getAllCacheStats = getAllCacheStats;
/**
 * Clear all caches
 */
function clearAllCaches() {
    exports.flavorCompatibilityCache.clear();
    exports.astrologicalProfileCache.clear();
    exports.ingredientProfileCache.clear();
    exports.performanceMonitor.clear();
    console.log('🧹 All caches cleared');
}
exports.clearAllCaches = clearAllCaches;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,