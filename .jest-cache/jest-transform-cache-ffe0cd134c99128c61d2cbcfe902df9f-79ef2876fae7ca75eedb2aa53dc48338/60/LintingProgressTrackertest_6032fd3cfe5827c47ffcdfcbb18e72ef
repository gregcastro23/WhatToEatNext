5af958b64f79df3c219e7cbc9a711670
"use strict";
/**
 * Test suite for LintingProgressTracker
 *
 * Tests the linting progress tracking functionality including metrics collection,
 * progress reporting, and campaign integration.
 */
Object.defineProperty(exports, "__esModule", { value: true });
// Mock dependencies
jest.mock('child_process');
jest.mock('fs');
jest.mock('@/utils/logger', () => ({
    logger: {
        info: jest.fn(),
        warn: jest.fn(),
        error: jest.fn(),
        debug: jest.fn()
    }
}));
const LintingProgressTracker_1 = require("../LintingProgressTracker");
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const mockExecSync = child_process_1.execSync;
const mockWriteFileSync = fs_1.writeFileSync;
const mockReadFileSync = fs_1.readFileSync;
const mockExistsSync = fs_1.existsSync;
describe('LintingProgressTracker', () => {
    let tracker;
    beforeEach(() => {
        tracker = new LintingProgressTracker_1.LintingProgressTracker();
        jest.clearAllMocks();
    });
    describe('collectMetrics', () => {
        test('should collect and parse linting metrics successfully', async () => {
            const mockLintOutput = JSON.stringify([
                {
                    filePath: '/test/file1.ts',
                    messages: [
                        { ruleId: 'no-unused-vars', severity: 1, fix: null },
                        { ruleId: 'no-console', severity: 2, fix: { range: [0, 10], text: '' } }
                    ]
                },
                {
                    filePath: '/test/file2.ts',
                    messages: [
                        { ruleId: 'prefer-const', severity: 1, fix: { range: [0, 5], text: 'const' } }
                    ]
                }
            ]);
            mockExecSync.mockReturnValue(mockLintOutput);
            const metrics = await tracker.collectMetrics();
            expect(metrics).toMatchObject({
                totalIssues: 3,
                errors: 1,
                warnings: 2,
                filesCovered: 2,
                fixableIssues: 2,
                errorsByCategory: {
                    'no-console': 1
                },
                warningsByCategory: {
                    'no-unused-vars': 1,
                    'prefer-const': 1
                }
            });
            expect(metrics.timestamp).toBeInstanceOf(Date);
            expect(metrics.performanceMetrics).toBeDefined();
            expect(mockWriteFileSync).toHaveBeenCalled();
        });
        test('should handle ESLint execution errors gracefully', async () => {
            const mockError = new Error('ESLint failed');
            mockError.stdout = JSON.stringify([]);
            mockExecSync.mockImplementation(() => {
                throw mockError;
            });
            const metrics = await tracker.collectMetrics();
            expect(metrics.totalIssues).toBe(0);
            expect(metrics.errors).toBe(0);
            expect(metrics.warnings).toBe(0);
        });
        test('should handle invalid JSON output', async () => {
            mockExecSync.mockReturnValue('invalid json');
            await expect(tracker.collectMetrics()).rejects.toThrow();
        });
    });
    describe('generateProgressReport', () => {
        test('should generate comprehensive progress report', async () => {
            const mockCurrentMetrics = {
                timestamp: new Date(),
                totalIssues: 50,
                errors: 5,
                warnings: 45,
                errorsByCategory: { 'no-console': 3, 'no-unused-vars': 2 },
                warningsByCategory: { 'prefer-const': 25, 'no-explicit-any': 20 },
                filesCovered: 100,
                fixableIssues: 30,
                performanceMetrics: {
                    executionTime: 5000,
                    memoryUsage: 256,
                    cacheHitRate: 0.8
                }
            };
            const mockPreviousMetrics = {
                ...mockCurrentMetrics,
                totalIssues: 80,
                errors: 15,
                warnings: 65
            };
            // Mock the collectMetrics method
            jest.spyOn(tracker, 'collectMetrics').mockResolvedValue(mockCurrentMetrics);
            // Mock file system calls for previous metrics
            mockExistsSync.mockReturnValue(true);
            mockReadFileSync.mockReturnValue(JSON.stringify(mockPreviousMetrics));
            const report = await tracker.generateProgressReport();
            expect(report.currentMetrics).toEqual(mockCurrentMetrics);
            expect(report.previousMetrics).toMatchObject({
                ...mockPreviousMetrics,
                timestamp: expect.any(String) // JSON serialization converts Date to string
            });
            expect(report.improvement).toEqual({
                totalIssuesReduced: 30,
                errorsReduced: 10,
                warningsReduced: 20,
                percentageImprovement: 37.5
            });
            expect(report.qualityGates).toBeDefined();
            expect(report.trends).toBeDefined();
        });
        test('should handle missing previous metrics', async () => {
            const mockCurrentMetrics = {
                timestamp: new Date(),
                totalIssues: 50,
                errors: 5,
                warnings: 45,
                errorsByCategory: {},
                warningsByCategory: {},
                filesCovered: 100,
                fixableIssues: 30,
                performanceMetrics: {
                    executionTime: 5000,
                    memoryUsage: 256,
                    cacheHitRate: 0.8
                }
            };
            jest.spyOn(tracker, 'collectMetrics').mockResolvedValue(mockCurrentMetrics);
            mockExistsSync.mockReturnValue(false);
            const report = await tracker.generateProgressReport();
            expect(report.previousMetrics).toBeUndefined();
            expect(report.improvement).toEqual({
                totalIssuesReduced: 0,
                errorsReduced: 0,
                warningsReduced: 0,
                percentageImprovement: 0
            });
        });
    });
    describe('integrateCampaignProgress', () => {
        test('should integrate with campaign system successfully', async () => {
            const campaignData = {
                campaignId: 'test-campaign',
                phase: 'phase-1',
                targetReduction: 100,
                currentProgress: 50,
                estimatedCompletion: new Date(),
                safetyProtocols: ['backup', 'validate']
            };
            const mockReport = {
                currentMetrics: {
                    timestamp: new Date(),
                    totalIssues: 25,
                    errors: 2,
                    warnings: 23,
                    errorsByCategory: {},
                    warningsByCategory: {},
                    filesCovered: 50,
                    fixableIssues: 15,
                    performanceMetrics: {
                        executionTime: 3000,
                        memoryUsage: 128,
                        cacheHitRate: 0.9
                    }
                },
                improvement: {
                    totalIssuesReduced: 25,
                    errorsReduced: 8,
                    warningsReduced: 17,
                    percentageImprovement: 50
                },
                trends: {
                    last24Hours: 10,
                    last7Days: 20,
                    last30Days: 30
                },
                qualityGates: {
                    zeroErrors: false,
                    warningsUnderThreshold: true,
                    performanceAcceptable: true
                }
            };
            jest.spyOn(tracker, 'generateProgressReport').mockResolvedValue(mockReport);
            await tracker.integrateCampaignProgress(campaignData);
            expect(mockWriteFileSync).toHaveBeenCalledWith(expect.stringContaining('campaign-integration.json'), expect.stringContaining(campaignData.campaignId));
        });
    });
    describe('createQualityGates', () => {
        test('should evaluate quality gates correctly', () => {
            const mockMetrics = {
                timestamp: new Date(),
                totalIssues: 10,
                errors: 0,
                warnings: 10,
                errorsByCategory: {},
                warningsByCategory: {},
                filesCovered: 50,
                fixableIssues: 5,
                performanceMetrics: {
                    executionTime: 30000,
                    memoryUsage: 256,
                    cacheHitRate: 0.8
                }
            };
            // Mock getLatestMetrics
            jest.spyOn(tracker, 'getLatestMetrics').mockReturnValue(mockMetrics);
            const thresholds = {
                maxErrors: 0,
                maxWarnings: 50,
                maxExecutionTime: 60000
            };
            const result = tracker.createQualityGates(thresholds);
            expect(result).toBe(true);
        });
        test('should fail quality gates when thresholds exceeded', () => {
            const mockMetrics = {
                timestamp: new Date(),
                totalIssues: 100,
                errors: 5,
                warnings: 95,
                errorsByCategory: {},
                warningsByCategory: {},
                filesCovered: 50,
                fixableIssues: 20,
                performanceMetrics: {
                    executionTime: 90000,
                    memoryUsage: 512,
                    cacheHitRate: 0.6
                }
            };
            jest.spyOn(tracker, 'getLatestMetrics').mockReturnValue(mockMetrics);
            const thresholds = {
                maxErrors: 0,
                maxWarnings: 50,
                maxExecutionTime: 60000
            };
            const result = tracker.createQualityGates(thresholds);
            expect(result).toBe(false);
        });
        test('should handle missing metrics gracefully', () => {
            jest.spyOn(tracker, 'getLatestMetrics').mockReturnValue(null);
            const thresholds = {
                maxErrors: 0,
                maxWarnings: 50,
                maxExecutionTime: 60000
            };
            const result = tracker.createQualityGates(thresholds);
            expect(result).toBe(false);
        });
    });
    describe('private methods', () => {
        test('should parse linting output correctly', () => {
            const mockOutput = JSON.stringify([
                {
                    filePath: '/test/file.ts',
                    messages: [
                        { ruleId: 'no-unused-vars', severity: 1, fix: null },
                        { ruleId: 'no-console', severity: 2, fix: { range: [0, 10], text: '' } },
                        { ruleId: null, severity: 1, fix: null } // Test unknown rule
                    ]
                }
            ]);
            const result = tracker.parseLintingOutput(mockOutput);
            expect(result).toEqual({
                totalIssues: 3,
                errors: 1,
                warnings: 2,
                filesCovered: 1,
                fixableIssues: 1,
                errorsByCategory: {
                    'no-console': 1
                },
                warningsByCategory: {
                    'no-unused-vars': 1,
                    'unknown': 1
                }
            });
        });
        test('should calculate improvement metrics correctly', () => {
            const current = {
                timestamp: new Date(),
                totalIssues: 50,
                errors: 5,
                warnings: 45,
                errorsByCategory: {},
                warningsByCategory: {},
                filesCovered: 100,
                fixableIssues: 25,
                performanceMetrics: {
                    executionTime: 5000,
                    memoryUsage: 256,
                    cacheHitRate: 0.8
                }
            };
            const previous = {
                ...current,
                totalIssues: 100,
                errors: 20,
                warnings: 80
            };
            const improvement = tracker.calculateImprovement(current, previous);
            expect(improvement).toEqual({
                totalIssuesReduced: 50,
                errorsReduced: 15,
                warningsReduced: 35,
                percentageImprovement: 50
            });
        });
        test('should handle improvement calculation with no previous metrics', () => {
            const current = {
                timestamp: new Date(),
                totalIssues: 50,
                errors: 5,
                warnings: 45,
                errorsByCategory: {},
                warningsByCategory: {},
                filesCovered: 100,
                fixableIssues: 25,
                performanceMetrics: {
                    executionTime: 5000,
                    memoryUsage: 256,
                    cacheHitRate: 0.8
                }
            };
            const improvement = tracker.calculateImprovement(current, undefined);
            expect(improvement).toEqual({
                totalIssuesReduced: 0,
                errorsReduced: 0,
                warningsReduced: 0,
                percentageImprovement: 0
            });
        });
        test('should evaluate quality gates correctly', () => {
            const metrics = {
                timestamp: new Date(),
                totalIssues: 50,
                errors: 0,
                warnings: 50,
                errorsByCategory: {},
                warningsByCategory: {},
                filesCovered: 100,
                fixableIssues: 25,
                performanceMetrics: {
                    executionTime: 30000,
                    memoryUsage: 256,
                    cacheHitRate: 0.8
                }
            };
            const gates = tracker.evaluateQualityGates(metrics);
            expect(gates).toEqual({
                zeroErrors: true,
                warningsUnderThreshold: true,
                performanceAcceptable: true
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9zZXJ2aWNlcy9saW50aW5nL19fdGVzdHNfXy9MaW50aW5nUHJvZ3Jlc3NUcmFja2VyLnRlc3QudHMiLCJtYXBwaW5ncyI6IjtBQUFBOzs7OztHQUtHOztBQU1ILG9CQUFvQjtBQUNwQixJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQzNCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ2pDLE1BQU0sRUFBRTtRQUNOLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDZixLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNoQixLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtLQUNqQjtDQUNGLENBQUMsQ0FBQyxDQUFDO0FBZEosc0VBQTBHO0FBQzFHLGlEQUF5QztBQUN6QywyQkFBeUU7QUFjekUsTUFBTSxZQUFZLEdBQUcsd0JBQWdELENBQUM7QUFDdEUsTUFBTSxpQkFBaUIsR0FBRyxrQkFBMEQsQ0FBQztBQUNyRixNQUFNLGdCQUFnQixHQUFHLGlCQUF3RCxDQUFDO0FBQ2xGLE1BQU0sY0FBYyxHQUFHLGVBQW9ELENBQUM7QUFFNUUsUUFBUSxDQUFDLHdCQUF3QixFQUFFLEdBQUcsRUFBRTtJQUN0QyxJQUFJLE9BQStCLENBQUM7SUFFcEMsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLE9BQU8sR0FBRyxJQUFJLCtDQUFzQixFQUFFLENBQUM7UUFDdkMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtRQUM5QixJQUFJLENBQUMsdURBQXVELEVBQUUsS0FBSyxJQUFJLEVB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QUFDLHlDQUF5QyxFQUFFLEdBQUcsRUFBRTtZQUNuRCxNQUFNLE9BQU8sR0FBbUI7Z0JBQzlCLFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRTtnQkFDckIsV0FBVyxFQUFFLEVBQUU7Z0JBQ2YsTUFBTSxFQUFFLENBQUM7Z0JBQ1QsUUFBUSxFQUFFLEVBQUU7Z0JBQ1osZ0JBQWdCLEVBQUUsRUFBRTtnQkFDcEIsa0JBQWtCLEVBQUUsRUFBRTtnQkFDdEIsWUFBWSxFQUFFLEdBQUc7Z0JBQ2pCLGFBQWEsRUFBRSxFQUFFO2dCQUNqQixrQkFBa0IsRUFBRTtvQkFDbEIsYUFBYSxFQUFFLEtBQUs7b0JBQ3BCLFdBQVcsRUFBRSxHQUFHO29CQUNoQixZQUFZLEVBQUUsR0FBRztpQkFDbEI7YUFDRixDQUFDO1lBRUYsTUFBTSxLQUFLLEdBQUksT0FBZSxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRTdELE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUM7Z0JBQ3BCLFVBQVUsRUFBRSxJQUFJO2dCQUNoQixzQkFBc0IsRUFBRSxJQUFJO2dCQUM1QixxQkFBcUIsRUFBRSxJQUFJO2FBQzVCLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvR3JlZ0Nhc3Ryby9EZXNrdG9wL1doYXRUb0VhdE5leHQvc3JjL3NlcnZpY2VzL2xpbnRpbmcvX190ZXN0c19fL0xpbnRpbmdQcm9ncmVzc1RyYWNrZXIudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRlc3Qgc3VpdGUgZm9yIExpbnRpbmdQcm9ncmVzc1RyYWNrZXJcbiAqIFxuICogVGVzdHMgdGhlIGxpbnRpbmcgcHJvZ3Jlc3MgdHJhY2tpbmcgZnVuY3Rpb25hbGl0eSBpbmNsdWRpbmcgbWV0cmljcyBjb2xsZWN0aW9uLFxuICogcHJvZ3Jlc3MgcmVwb3J0aW5nLCBhbmQgY2FtcGFpZ24gaW50ZWdyYXRpb24uXG4gKi9cblxuaW1wb3J0IHsgTGludGluZ1Byb2dyZXNzVHJhY2tlciwgTGludGluZ01ldHJpY3MsIExpbnRpbmdQcm9ncmVzc1JlcG9ydCB9IGZyb20gJy4uL0xpbnRpbmdQcm9ncmVzc1RyYWNrZXInO1xuaW1wb3J0IHsgZXhlY1N5bmMgfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCB7IHdyaXRlRmlsZVN5bmMsIHJlYWRGaWxlU3luYywgZXhpc3RzU3luYywgdW5saW5rU3luYyB9IGZyb20gJ2ZzJztcblxuLy8gTW9jayBkZXBlbmRlbmNpZXNcbmplc3QubW9jaygnY2hpbGRfcHJvY2VzcycpO1xuamVzdC5tb2NrKCdmcycpO1xuamVzdC5tb2NrKCdAL3V0aWxzL2xvZ2dlcicsICgpID0+ICh7XG4gIGxvZ2dlcjoge1xuICAgIGluZm86IGplc3QuZm4oKSxcbiAgICB3YXJuOiBqZXN0LmZuKCksXG4gICAgZXJyb3I6IGplc3QuZm4oKSxcbiAgICBkZWJ1ZzogamVzdC5mbigpXG4gIH1cbn0pKTtcblxuY29uc3QgbW9ja0V4ZWNTeW5jID0gZXhlY1N5bmMgYXMgamVzdC5Nb2NrZWRGdW5jdGlvbjx0eXBlb2YgZXhlY1N5bmM+O1xuY29uc3QgbW9ja1dyaXRlRmlsZVN5bmMgPSB3cml0ZUZpbGVTeW5jIGFzIGplc3QuTW9ja2VkRnVuY3Rpb248dHlwZW9mIHdyaXRlRmlsZVN5bmM+O1xuY29uc3QgbW9ja1JlYWRGaWxlU3luYyA9IHJlYWRGaWxlU3luYyBhcyBqZXN0Lk1vY2tlZEZ1bmN0aW9uPHR5cGVvZiByZWFkRmlsZVN5bmM+O1xuY29uc3QgbW9ja0V4aXN0c1N5bmMgPSBleGlzdHNTeW5jIGFzIGplc3QuTW9ja2VkRnVuY3Rpb248dHlwZW9mIGV4aXN0c1N5bmM+O1xuXG5kZXNjcmliZSgnTGludGluZ1Byb2dyZXNzVHJhY2tlcicsICgpID0+IHtcbiAgbGV0IHRyYWNrZXI6IExpbnRpbmdQcm9ncmVzc1RyYWNrZXI7XG4gIFxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICB0cmFja2VyID0gbmV3IExpbnRpbmdQcm9ncmVzc1RyYWNrZXIoKTtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2NvbGxlY3RNZXRyaWNzJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBjb2xsZWN0IGFuZCBwYXJzZSBsaW50aW5nIG1ldHJpY3Mgc3VjY2Vzc2Z1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja0xpbnRPdXRwdXQgPSBKU09OLnN0cmluZ2lmeShbXG4gICAgICAgIHtcbiAgICAgICAgICBmaWxlUGF0aDogJy90ZXN0L2ZpbGUxLnRzJyxcbiAgICAgICAgICBtZXNzYWdlczogW1xuICAgICAgICAgICAgeyBydWxlSWQ6ICduby11bnVzZWQtdmFycycsIHNldmVyaXR5OiAxLCBmaXg6IG51bGwgfSxcbiAgICAgICAgICAgIHsgcnVsZUlkOiAnbm8tY29uc29sZScsIHNldmVyaXR5OiAyLCBmaXg6IHsgcmFuZ2U6IFswLCAxMF0sIHRleHQ6ICcnIH0gfVxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGZpbGVQYXRoOiAnL3Rlc3QvZmlsZTIudHMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgICAgICB7IHJ1bGVJZDogJ3ByZWZlci1jb25zdCcsIHNldmVyaXR5OiAxLCBmaXg6IHsgcmFuZ2U6IFswLCA1XSwgdGV4dDogJ2NvbnN0JyB9IH1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF0pO1xuXG4gICAgICBtb2NrRXhlY1N5bmMubW9ja1JldHVyblZhbHVlKG1vY2tMaW50T3V0cHV0KTtcblxuICAgICAgY29uc3QgbWV0cmljcyA9IGF3YWl0IHRyYWNrZXIuY29sbGVjdE1ldHJpY3MoKTtcblxuICAgICAgZXhwZWN0KG1ldHJpY3MpLnRvTWF0Y2hPYmplY3Qoe1xuICAgICAgICB0b3RhbElzc3VlczogMyxcbiAgICAgICAgZXJyb3JzOiAxLFxuICAgICAgICB3YXJuaW5nczogMixcbiAgICAgICAgZmlsZXNDb3ZlcmVkOiAyLFxuICAgICAgICBmaXhhYmxlSXNzdWVzOiAyLFxuICAgICAgICBlcnJvcnNCeUNhdGVnb3J5OiB7XG4gICAgICAgICAgJ25vLWNvbnNvbGUnOiAxXG4gICAgICAgIH0sXG4gICAgICAgIHdhcm5pbmdzQnlDYXRlZ29yeToge1xuICAgICAgICAgICduby11bnVzZWQtdmFycyc6IDEsXG4gICAgICAgICAgJ3ByZWZlci1jb25zdCc6IDFcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChtZXRyaWNzLnRpbWVzdGFtcCkudG9CZUluc3RhbmNlT2YoRGF0ZSk7XG4gICAgICBleHBlY3QobWV0cmljcy5wZXJmb3JtYW5jZU1ldHJpY3MpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QobW9ja1dyaXRlRmlsZVN5bmMpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgRVNMaW50IGV4ZWN1dGlvbiBlcnJvcnMgZ3JhY2VmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tFcnJvciA9IG5ldyBFcnJvcignRVNMaW50IGZhaWxlZCcpIGFzIGFueTtcbiAgICAgIG1vY2tFcnJvci5zdGRvdXQgPSBKU09OLnN0cmluZ2lmeShbXSk7XG4gICAgICBtb2NrRXhlY1N5bmMubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHtcbiAgICAgICAgdGhyb3cgbW9ja0Vycm9yO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IG1ldHJpY3MgPSBhd2FpdCB0cmFja2VyLmNvbGxlY3RNZXRyaWNzKCk7XG5cbiAgICAgIGV4cGVjdChtZXRyaWNzLnRvdGFsSXNzdWVzKS50b0JlKDApO1xuICAgICAgZXhwZWN0KG1ldHJpY3MuZXJyb3JzKS50b0JlKDApO1xuICAgICAgZXhwZWN0KG1ldHJpY3Mud2FybmluZ3MpLnRvQmUoMCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIGludmFsaWQgSlNPTiBvdXRwdXQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrRXhlY1N5bmMubW9ja1JldHVyblZhbHVlKCdpbnZhbGlkIGpzb24nKTtcblxuICAgICAgYXdhaXQgZXhwZWN0KHRyYWNrZXIuY29sbGVjdE1ldHJpY3MoKSkucmVqZWN0cy50b1Rocm93KCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdnZW5lcmF0ZVByb2dyZXNzUmVwb3J0JywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBnZW5lcmF0ZSBjb21wcmVoZW5zaXZlIHByb2dyZXNzIHJlcG9ydCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tDdXJyZW50TWV0cmljczogTGludGluZ01ldHJpY3MgPSB7XG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgdG90YWxJc3N1ZXM6IDUwLFxuICAgICAgICBlcnJvcnM6IDUsXG4gICAgICAgIHdhcm5pbmdzOiA0NSxcbiAgICAgICAgZXJyb3JzQnlDYXRlZ29yeTogeyAnbm8tY29uc29sZSc6IDMsICduby11bnVzZWQtdmFycyc6IDIgfSxcbiAgICAgICAgd2FybmluZ3NCeUNhdGVnb3J5OiB7ICdwcmVmZXItY29uc3QnOiAyNSwgJ25vLWV4cGxpY2l0LWFueSc6IDIwIH0sXG4gICAgICAgIGZpbGVzQ292ZXJlZDogMTAwLFxuICAgICAgICBmaXhhYmxlSXNzdWVzOiAzMCxcbiAgICAgICAgcGVyZm9ybWFuY2VNZXRyaWNzOiB7XG4gICAgICAgICAgZXhlY3V0aW9uVGltZTogNTAwMCxcbiAgICAgICAgICBtZW1vcnlVc2FnZTogMjU2LFxuICAgICAgICAgIGNhY2hlSGl0UmF0ZTogMC44XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IG1vY2tQcmV2aW91c01ldHJpY3M6IExpbnRpbmdNZXRyaWNzID0ge1xuICAgICAgICAuLi5tb2NrQ3VycmVudE1ldHJpY3MsXG4gICAgICAgIHRvdGFsSXNzdWVzOiA4MCxcbiAgICAgICAgZXJyb3JzOiAxNSxcbiAgICAgICAgd2FybmluZ3M6IDY1XG4gICAgICB9O1xuXG4gICAgICAvLyBNb2NrIHRoZSBjb2xsZWN0TWV0cmljcyBtZXRob2RcbiAgICAgIGplc3Quc3B5T24odHJhY2tlciwgJ2NvbGxlY3RNZXRyaWNzJykubW9ja1Jlc29sdmVkVmFsdWUobW9ja0N1cnJlbnRNZXRyaWNzKTtcbiAgICAgIFxuICAgICAgLy8gTW9jayBmaWxlIHN5c3RlbSBjYWxscyBmb3IgcHJldmlvdXMgbWV0cmljc1xuICAgICAgbW9ja0V4aXN0c1N5bmMubW9ja1JldHVyblZhbHVlKHRydWUpO1xuICAgICAgbW9ja1JlYWRGaWxlU3luYy5tb2NrUmV0dXJuVmFsdWUoSlNPTi5zdHJpbmdpZnkobW9ja1ByZXZpb3VzTWV0cmljcykpO1xuXG4gICAgICBjb25zdCByZXBvcnQgPSBhd2FpdCB0cmFja2VyLmdlbmVyYXRlUHJvZ3Jlc3NSZXBvcnQoKTtcblxuICAgICAgZXhwZWN0KHJlcG9ydC5jdXJyZW50TWV0cmljcykudG9FcXVhbChtb2NrQ3VycmVudE1ldHJpY3MpO1xuICAgICAgZXhwZWN0KHJlcG9ydC5wcmV2aW91c01ldHJpY3MpLnRvTWF0Y2hPYmplY3Qoe1xuICAgICAgICAuLi5tb2NrUHJldmlvdXNNZXRyaWNzLFxuICAgICAgICB0aW1lc3RhbXA6IGV4cGVjdC5hbnkoU3RyaW5nKSAvLyBKU09OIHNlcmlhbGl6YXRpb24gY29udmVydHMgRGF0ZSB0byBzdHJpbmdcbiAgICAgIH0pO1xuICAgICAgZXhwZWN0KHJlcG9ydC5pbXByb3ZlbWVudCkudG9FcXVhbCh7XG4gICAgICAgIHRvdGFsSXNzdWVzUmVkdWNlZDogMzAsXG4gICAgICAgIGVycm9yc1JlZHVjZWQ6IDEwLFxuICAgICAgICB3YXJuaW5nc1JlZHVjZWQ6IDIwLFxuICAgICAgICBwZXJjZW50YWdlSW1wcm92ZW1lbnQ6IDM3LjVcbiAgICAgIH0pO1xuICAgICAgZXhwZWN0KHJlcG9ydC5xdWFsaXR5R2F0ZXMpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QocmVwb3J0LnRyZW5kcykudG9CZURlZmluZWQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgbWlzc2luZyBwcmV2aW91cyBtZXRyaWNzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja0N1cnJlbnRNZXRyaWNzOiBMaW50aW5nTWV0cmljcyA9IHtcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICB0b3RhbElzc3VlczogNTAsXG4gICAgICAgIGVycm9yczogNSxcbiAgICAgICAgd2FybmluZ3M6IDQ1LFxuICAgICAgICBlcnJvcnNCeUNhdGVnb3J5OiB7fSxcbiAgICAgICAgd2FybmluZ3NCeUNhdGVnb3J5OiB7fSxcbiAgICAgICAgZmlsZXNDb3ZlcmVkOiAxMDAsXG4gICAgICAgIGZpeGFibGVJc3N1ZXM6IDMwLFxuICAgICAgICBwZXJmb3JtYW5jZU1ldHJpY3M6IHtcbiAgICAgICAgICBleGVjdXRpb25UaW1lOiA1MDAwLFxuICAgICAgICAgIG1lbW9yeVVzYWdlOiAyNTYsXG4gICAgICAgICAgY2FjaGVIaXRSYXRlOiAwLjhcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgamVzdC5zcHlPbih0cmFja2VyLCAnY29sbGVjdE1ldHJpY3MnKS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrQ3VycmVudE1ldHJpY3MpO1xuICAgICAgbW9ja0V4aXN0c1N5bmMubW9ja1JldHVyblZhbHVlKGZhbHNlKTtcblxuICAgICAgY29uc3QgcmVwb3J0ID0gYXdhaXQgdHJhY2tlci5nZW5lcmF0ZVByb2dyZXNzUmVwb3J0KCk7XG5cbiAgICAgIGV4cGVjdChyZXBvcnQucHJldmlvdXNNZXRyaWNzKS50b0JlVW5kZWZpbmVkKCk7XG4gICAgICBleHBlY3QocmVwb3J0LmltcHJvdmVtZW50KS50b0VxdWFsKHtcbiAgICAgICAgdG90YWxJc3N1ZXNSZWR1Y2VkOiAwLFxuICAgICAgICBlcnJvcnNSZWR1Y2VkOiAwLFxuICAgICAgICB3YXJuaW5nc1JlZHVjZWQ6IDAsXG4gICAgICAgIHBlcmNlbnRhZ2VJbXByb3ZlbWVudDogMFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdpbnRlZ3JhdGVDYW1wYWlnblByb2dyZXNzJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBpbnRlZ3JhdGUgd2l0aCBjYW1wYWlnbiBzeXN0ZW0gc3VjY2Vzc2Z1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY2FtcGFpZ25EYXRhID0ge1xuICAgICAgICBjYW1wYWlnbklkOiAndGVzdC1jYW1wYWlnbicsXG4gICAgICAgIHBoYXNlOiAncGhhc2UtMScsXG4gICAgICAgIHRhcmdldFJlZHVjdGlvbjogMTAwLFxuICAgICAgICBjdXJyZW50UHJvZ3Jlc3M6IDUwLFxuICAgICAgICBlc3RpbWF0ZWRDb21wbGV0aW9uOiBuZXcgRGF0ZSgpLFxuICAgICAgICBzYWZldHlQcm90b2NvbHM6IFsnYmFja3VwJywgJ3ZhbGlkYXRlJ11cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IG1vY2tSZXBvcnQ6IExpbnRpbmdQcm9ncmVzc1JlcG9ydCA9IHtcbiAgICAgICAgY3VycmVudE1ldHJpY3M6IHtcbiAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgICAgdG90YWxJc3N1ZXM6IDI1LFxuICAgICAgICAgIGVycm9yczogMixcbiAgICAgICAgICB3YXJuaW5nczogMjMsXG4gICAgICAgICAgZXJyb3JzQnlDYXRlZ29yeToge30sXG4gICAgICAgICAgd2FybmluZ3NCeUNhdGVnb3J5OiB7fSxcbiAgICAgICAgICBmaWxlc0NvdmVyZWQ6IDUwLFxuICAgICAgICAgIGZpeGFibGVJc3N1ZXM6IDE1LFxuICAgICAgICAgIHBlcmZvcm1hbmNlTWV0cmljczoge1xuICAgICAgICAgICAgZXhlY3V0aW9uVGltZTogMzAwMCxcbiAgICAgICAgICAgIG1lbW9yeVVzYWdlOiAxMjgsXG4gICAgICAgICAgICBjYWNoZUhpdFJhdGU6IDAuOVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaW1wcm92ZW1lbnQ6IHtcbiAgICAgICAgICB0b3RhbElzc3Vlc1JlZHVjZWQ6IDI1LFxuICAgICAgICAgIGVycm9yc1JlZHVjZWQ6IDgsXG4gICAgICAgICAgd2FybmluZ3NSZWR1Y2VkOiAxNyxcbiAgICAgICAgICBwZXJjZW50YWdlSW1wcm92ZW1lbnQ6IDUwXG4gICAgICAgIH0sXG4gICAgICAgIHRyZW5kczoge1xuICAgICAgICAgIGxhc3QyNEhvdXJzOiAxMCxcbiAgICAgICAgICBsYXN0N0RheXM6IDIwLFxuICAgICAgICAgIGxhc3QzMERheXM6IDMwXG4gICAgICAgIH0sXG4gICAgICAgIHF1YWxpdHlHYXRlczoge1xuICAgICAgICAgIHplcm9FcnJvcnM6IGZhbHNlLFxuICAgICAgICAgIHdhcm5pbmdzVW5kZXJUaHJlc2hvbGQ6IHRydWUsXG4gICAgICAgICAgcGVyZm9ybWFuY2VBY2NlcHRhYmxlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGplc3Quc3B5T24odHJhY2tlciwgJ2dlbmVyYXRlUHJvZ3Jlc3NSZXBvcnQnKS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrUmVwb3J0KTtcblxuICAgICAgYXdhaXQgdHJhY2tlci5pbnRlZ3JhdGVDYW1wYWlnblByb2dyZXNzKGNhbXBhaWduRGF0YSk7XG5cbiAgICAgIGV4cGVjdChtb2NrV3JpdGVGaWxlU3luYykudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIGV4cGVjdC5zdHJpbmdDb250YWluaW5nKCdjYW1wYWlnbi1pbnRlZ3JhdGlvbi5qc29uJyksXG4gICAgICAgIGV4cGVjdC5zdHJpbmdDb250YWluaW5nKGNhbXBhaWduRGF0YS5jYW1wYWlnbklkKVxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2NyZWF0ZVF1YWxpdHlHYXRlcycsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgZXZhbHVhdGUgcXVhbGl0eSBnYXRlcyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrTWV0cmljczogTGludGluZ01ldHJpY3MgPSB7XG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgdG90YWxJc3N1ZXM6IDEwLFxuICAgICAgICBlcnJvcnM6IDAsXG4gICAgICAgIHdhcm5pbmdzOiAxMCxcbiAgICAgICAgZXJyb3JzQnlDYXRlZ29yeToge30sXG4gICAgICAgIHdhcm5pbmdzQnlDYXRlZ29yeToge30sXG4gICAgICAgIGZpbGVzQ292ZXJlZDogNTAsXG4gICAgICAgIGZpeGFibGVJc3N1ZXM6IDUsXG4gICAgICAgIHBlcmZvcm1hbmNlTWV0cmljczoge1xuICAgICAgICAgIGV4ZWN1dGlvblRpbWU6IDMwMDAwLFxuICAgICAgICAgIG1lbW9yeVVzYWdlOiAyNTYsXG4gICAgICAgICAgY2FjaGVIaXRSYXRlOiAwLjhcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgLy8gTW9jayBnZXRMYXRlc3RNZXRyaWNzXG4gICAgICBqZXN0LnNweU9uKHRyYWNrZXIgYXMgYW55LCAnZ2V0TGF0ZXN0TWV0cmljcycpLm1vY2tSZXR1cm5WYWx1ZShtb2NrTWV0cmljcyk7XG5cbiAgICAgIGNvbnN0IHRocmVzaG9sZHMgPSB7XG4gICAgICAgIG1heEVycm9yczogMCxcbiAgICAgICAgbWF4V2FybmluZ3M6IDUwLFxuICAgICAgICBtYXhFeGVjdXRpb25UaW1lOiA2MDAwMFxuICAgICAgfTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gdHJhY2tlci5jcmVhdGVRdWFsaXR5R2F0ZXModGhyZXNob2xkcyk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgZmFpbCBxdWFsaXR5IGdhdGVzIHdoZW4gdGhyZXNob2xkcyBleGNlZWRlZCcsICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tNZXRyaWNzOiBMaW50aW5nTWV0cmljcyA9IHtcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICB0b3RhbElzc3VlczogMTAwLFxuICAgICAgICBlcnJvcnM6IDUsXG4gICAgICAgIHdhcm5pbmdzOiA5NSxcbiAgICAgICAgZXJyb3JzQnlDYXRlZ29yeToge30sXG4gICAgICAgIHdhcm5pbmdzQnlDYXRlZ29yeToge30sXG4gICAgICAgIGZpbGVzQ292ZXJlZDogNTAsXG4gICAgICAgIGZpeGFibGVJc3N1ZXM6IDIwLFxuICAgICAgICBwZXJmb3JtYW5jZU1ldHJpY3M6IHtcbiAgICAgICAgICBleGVjdXRpb25UaW1lOiA5MDAwMCxcbiAgICAgICAgICBtZW1vcnlVc2FnZTogNTEyLFxuICAgICAgICAgIGNhY2hlSGl0UmF0ZTogMC42XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGplc3Quc3B5T24odHJhY2tlciBhcyBhbnksICdnZXRMYXRlc3RNZXRyaWNzJykubW9ja1JldHVyblZhbHVlKG1vY2tNZXRyaWNzKTtcblxuICAgICAgY29uc3QgdGhyZXNob2xkcyA9IHtcbiAgICAgICAgbWF4RXJyb3JzOiAwLFxuICAgICAgICBtYXhXYXJuaW5nczogNTAsXG4gICAgICAgIG1heEV4ZWN1dGlvblRpbWU6IDYwMDAwXG4gICAgICB9O1xuXG4gICAgICBjb25zdCByZXN1bHQgPSB0cmFja2VyLmNyZWF0ZVF1YWxpdHlHYXRlcyh0aHJlc2hvbGRzKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZShmYWxzZSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIG1pc3NpbmcgbWV0cmljcyBncmFjZWZ1bGx5JywgKCkgPT4ge1xuICAgICAgamVzdC5zcHlPbih0cmFja2VyIGFzIGFueSwgJ2dldExhdGVzdE1ldHJpY3MnKS5tb2NrUmV0dXJuVmFsdWUobnVsbCk7XG5cbiAgICAgIGNvbnN0IHRocmVzaG9sZHMgPSB7XG4gICAgICAgIG1heEVycm9yczogMCxcbiAgICAgICAgbWF4V2FybmluZ3M6IDUwLFxuICAgICAgICBtYXhFeGVjdXRpb25UaW1lOiA2MDAwMFxuICAgICAgfTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gdHJhY2tlci5jcmVhdGVRdWFsaXR5R2F0ZXModGhyZXNob2xkcyk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgncHJpdmF0ZSBtZXRob2RzJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBwYXJzZSBsaW50aW5nIG91dHB1dCBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrT3V0cHV0ID0gSlNPTi5zdHJpbmdpZnkoW1xuICAgICAgICB7XG4gICAgICAgICAgZmlsZVBhdGg6ICcvdGVzdC9maWxlLnRzJyxcbiAgICAgICAgICBtZXNzYWdlczogW1xuICAgICAgICAgICAgeyBydWxlSWQ6ICduby11bnVzZWQtdmFycycsIHNldmVyaXR5OiAxLCBmaXg6IG51bGwgfSxcbiAgICAgICAgICAgIHsgcnVsZUlkOiAnbm8tY29uc29sZScsIHNldmVyaXR5OiAyLCBmaXg6IHsgcmFuZ2U6IFswLCAxMF0sIHRleHQ6ICcnIH0gfSxcbiAgICAgICAgICAgIHsgcnVsZUlkOiBudWxsLCBzZXZlcml0eTogMSwgZml4OiBudWxsIH0gLy8gVGVzdCB1bmtub3duIHJ1bGVcbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF0pO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSAodHJhY2tlciBhcyBhbnkpLnBhcnNlTGludGluZ091dHB1dChtb2NrT3V0cHV0KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7XG4gICAgICAgIHRvdGFsSXNzdWVzOiAzLFxuICAgICAgICBlcnJvcnM6IDEsXG4gICAgICAgIHdhcm5pbmdzOiAyLFxuICAgICAgICBmaWxlc0NvdmVyZWQ6IDEsXG4gICAgICAgIGZpeGFibGVJc3N1ZXM6IDEsXG4gICAgICAgIGVycm9yc0J5Q2F0ZWdvcnk6IHtcbiAgICAgICAgICAnbm8tY29uc29sZSc6IDFcbiAgICAgICAgfSxcbiAgICAgICAgd2FybmluZ3NCeUNhdGVnb3J5OiB7XG4gICAgICAgICAgJ25vLXVudXNlZC12YXJzJzogMSxcbiAgICAgICAgICAndW5rbm93bic6IDFcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgY2FsY3VsYXRlIGltcHJvdmVtZW50IG1ldHJpY3MgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgICAgY29uc3QgY3VycmVudDogTGludGluZ01ldHJpY3MgPSB7XG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgdG90YWxJc3N1ZXM6IDUwLFxuICAgICAgICBlcnJvcnM6IDUsXG4gICAgICAgIHdhcm5pbmdzOiA0NSxcbiAgICAgICAgZXJyb3JzQnlDYXRlZ29yeToge30sXG4gICAgICAgIHdhcm5pbmdzQnlDYXRlZ29yeToge30sXG4gICAgICAgIGZpbGVzQ292ZXJlZDogMTAwLFxuICAgICAgICBmaXhhYmxlSXNzdWVzOiAyNSxcbiAgICAgICAgcGVyZm9ybWFuY2VNZXRyaWNzOiB7XG4gICAgICAgICAgZXhlY3V0aW9uVGltZTogNTAwMCxcbiAgICAgICAgICBtZW1vcnlVc2FnZTogMjU2LFxuICAgICAgICAgIGNhY2hlSGl0UmF0ZTogMC44XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHByZXZpb3VzOiBMaW50aW5nTWV0cmljcyA9IHtcbiAgICAgICAgLi4uY3VycmVudCxcbiAgICAgICAgdG90YWxJc3N1ZXM6IDEwMCxcbiAgICAgICAgZXJyb3JzOiAyMCxcbiAgICAgICAgd2FybmluZ3M6IDgwXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBpbXByb3ZlbWVudCA9ICh0cmFja2VyIGFzIGFueSkuY2FsY3VsYXRlSW1wcm92ZW1lbnQoY3VycmVudCwgcHJldmlvdXMpO1xuXG4gICAgICBleHBlY3QoaW1wcm92ZW1lbnQpLnRvRXF1YWwoe1xuICAgICAgICB0b3RhbElzc3Vlc1JlZHVjZWQ6IDUwLFxuICAgICAgICBlcnJvcnNSZWR1Y2VkOiAxNSxcbiAgICAgICAgd2FybmluZ3NSZWR1Y2VkOiAzNSxcbiAgICAgICAgcGVyY2VudGFnZUltcHJvdmVtZW50OiA1MFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIGltcHJvdmVtZW50IGNhbGN1bGF0aW9uIHdpdGggbm8gcHJldmlvdXMgbWV0cmljcycsICgpID0+IHtcbiAgICAgIGNvbnN0IGN1cnJlbnQ6IExpbnRpbmdNZXRyaWNzID0ge1xuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgIHRvdGFsSXNzdWVzOiA1MCxcbiAgICAgICAgZXJyb3JzOiA1LFxuICAgICAgICB3YXJuaW5nczogNDUsXG4gICAgICAgIGVycm9yc0J5Q2F0ZWdvcnk6IHt9LFxuICAgICAgICB3YXJuaW5nc0J5Q2F0ZWdvcnk6IHt9LFxuICAgICAgICBmaWxlc0NvdmVyZWQ6IDEwMCxcbiAgICAgICAgZml4YWJsZUlzc3VlczogMjUsXG4gICAgICAgIHBlcmZvcm1hbmNlTWV0cmljczoge1xuICAgICAgICAgIGV4ZWN1dGlvblRpbWU6IDUwMDAsXG4gICAgICAgICAgbWVtb3J5VXNhZ2U6IDI1NixcbiAgICAgICAgICBjYWNoZUhpdFJhdGU6IDAuOFxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBjb25zdCBpbXByb3ZlbWVudCA9ICh0cmFja2VyIGFzIGFueSkuY2FsY3VsYXRlSW1wcm92ZW1lbnQoY3VycmVudCwgdW5kZWZpbmVkKTtcblxuICAgICAgZXhwZWN0KGltcHJvdmVtZW50KS50b0VxdWFsKHtcbiAgICAgICAgdG90YWxJc3N1ZXNSZWR1Y2VkOiAwLFxuICAgICAgICBlcnJvcnNSZWR1Y2VkOiAwLFxuICAgICAgICB3YXJuaW5nc1JlZHVjZWQ6IDAsXG4gICAgICAgIHBlcmNlbnRhZ2VJbXByb3ZlbWVudDogMFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgZXZhbHVhdGUgcXVhbGl0eSBnYXRlcyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICBjb25zdCBtZXRyaWNzOiBMaW50aW5nTWV0cmljcyA9IHtcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICB0b3RhbElzc3VlczogNTAsXG4gICAgICAgIGVycm9yczogMCxcbiAgICAgICAgd2FybmluZ3M6IDUwLFxuICAgICAgICBlcnJvcnNCeUNhdGVnb3J5OiB7fSxcbiAgICAgICAgd2FybmluZ3NCeUNhdGVnb3J5OiB7fSxcbiAgICAgICAgZmlsZXNDb3ZlcmVkOiAxMDAsXG4gICAgICAgIGZpeGFibGVJc3N1ZXM6IDI1LFxuICAgICAgICBwZXJmb3JtYW5jZU1ldHJpY3M6IHtcbiAgICAgICAgICBleGVjdXRpb25UaW1lOiAzMDAwMCxcbiAgICAgICAgICBtZW1vcnlVc2FnZTogMjU2LFxuICAgICAgICAgIGNhY2hlSGl0UmF0ZTogMC44XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IGdhdGVzID0gKHRyYWNrZXIgYXMgYW55KS5ldmFsdWF0ZVF1YWxpdHlHYXRlcyhtZXRyaWNzKTtcblxuICAgICAgZXhwZWN0KGdhdGVzKS50b0VxdWFsKHtcbiAgICAgICAgemVyb0Vycm9yczogdHJ1ZSxcbiAgICAgICAgd2FybmluZ3NVbmRlclRocmVzaG9sZDogdHJ1ZSxcbiAgICAgICAgcGVyZm9ybWFuY2VBY2NlcHRhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwidmVyc2lvbiI6M30=