{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/__tests__/performance/CacheHitRate.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/__tests__/performance/CacheHitRate.test.ts"],"sourcesContent":["/**\n * Performance Tests for Cache Hit Rate Validation\n * Perfect Codebase Campaign - Cache Performance Testing\n */\n\nimport { ProgressTracker } from '../../ProgressTracker';\nimport { CampaignController } from '../../CampaignController';\nimport {\n  CampaignConfig,\n  SafetySettings,\n  SafetyLevel\n} from '../../../../types/campaign';\n\ndescribe('Cache Hit Rate Performance Tests', () => {\n  let progressTracker: ProgressTracker;\n  let campaignController: CampaignController;\n  let mockConfig: CampaignConfig;\n\n  beforeEach(() => {\n    const safetySettings: SafetySettings = {\n      maxFilesPerBatch: 25,\n      buildValidationFrequency: 5,\n      testValidationFrequency: 10,\n      corruptionDetectionEnabled: true,\n      automaticRollbackEnabled: true,\n      stashRetentionDays: 7\n    };\n\n    mockConfig = {\n      phases: [{\n        id: 'cache-test-phase',\n        name: 'Cache Test Phase',\n        description: 'Phase for cache testing',\n        tools: [{\n          scriptPath: 'scripts/cache/test-script.js',\n          parameters: { enableCache: true },\n          batchSize: 50,\n          safetyLevel: SafetyLevel.MEDIUM\n        }],\n        successCriteria: { buildTime: 10 },\n        safetyCheckpoints: []\n      }],\n      safetySettings,\n      progressTargets: { typeScriptErrors: 0, lintingWarnings: 0, buildTime: 10, enterpriseSystems: 200 },\n      toolConfiguration: {\n        enhancedErrorFixer: 'scripts/typescript-fixes/fix-typescript-errors-enhanced-v3.js',\n        explicitAnyFixer: 'scripts/typescript-fixes/fix-explicit-any-systematic.js',\n        unusedVariablesFixer: 'scripts/typescript-fixes/fix-unused-variables-enhanced.js',\n        consoleStatementFixer: 'scripts/lint-fixes/fix-console-statements-only.js'\n      }\n    };\n\n    progressTracker = new ProgressTracker();\n    campaignController = new CampaignController(mockConfig);\n\n    // Reset mocks\n    jest.clearAllMocks();\n  });\n\n  describe('Cache Hit Rate Monitoring', () => {\n    it('should validate cache hit rate above 80% target', async () => {\n      // Mock excellent cache performance\n      jest.spyOn(progressTracker, 'getCacheHitRate').mockResolvedValue(0.85);\n\n      const cacheHitRate = await progressTracker.getCacheHitRate();\n\n      expect(cacheHitRate).toBe(0.85);\n      expect(cacheHitRate).toBeGreaterThanOrEqual(0.8); // Above 80% target\n      expect(cacheHitRate).toBeLessThanOrEqual(1.0); // Cannot exceed 100%\n    });\n\n    it('should detect poor cache performance', async () => {\n      // Mock poor cache performance\n      jest.spyOn(progressTracker, 'getCacheHitRate').mockResolvedValue(0.65);\n\n      const cacheHitRate = await progressTracker.getCacheHitRate();\n\n      expect(cacheHitRate).toBe(0.65);\n      expect(cacheHitRate).toBeLessThan(0.8); // Below 80% target\n    });\n\n    it('should handle cache measurement errors gracefully', async () => {\n      // Mock cache measurement error\n      jest.spyOn(progressTracker, 'getCacheHitRate').mockRejectedValue(\n        new Error('Cache measurement failed')\n      );\n\n      const cacheHitRate = await progressTracker.getCacheHitRate().catch(() => 0);\n\n      expect(cacheHitRate).toBe(0); // Error handling returns 0\n    });\n\n    it('should track cache performance trends over time', async () => {\n      const cacheReadings: number[] = [];\n      let callCount = 0;\n\n      // Mock improving cache performance over time\n      jest.spyOn(progressTracker, 'getCacheHitRate').mockImplementation(async () => {\n        callCount++;\n        // Simulate cache warming up - performance improves over time\n        const baseRate = 0.6;\n        const improvement = Math.min(0.3, callCount * 0.05); // Max 30% improvement\n        return Math.min(0.95, baseRate + improvement); // Cap at 95%\n      });\n\n      // Collect multiple cache hit rate readings\n      for (let i = 0; i < 10; i++) {\n        const cacheHitRate = await progressTracker.getCacheHitRate();\n        cacheReadings.push(cacheHitRate);\n      }\n\n      expect(cacheReadings.length).toBe(10);\n      expect(cacheReadings.every(rate => rate >= 0 && rate <= 1)).toBe(true);\n\n      // Cache performance should improve over time\n      const firstReading = cacheReadings[0];\n      const lastReading = cacheReadings[cacheReadings.length - 1];\n      expect(lastReading).toBeGreaterThanOrEqual(firstReading);\n      expect(lastReading).toBeGreaterThanOrEqual(0.8); // Should reach target\n    });\n  });\n\n  describe('Cache Performance Optimization', () => {\n    it('should validate 3-tier caching system performance', async () => {\n      // Mock 3-tier cache system with different hit rates\n      const cacheHitRates = {\n        l1Cache: 0.9,  // 90% L1 cache hit rate\n        l2Cache: 0.7,  // 70% L2 cache hit rate\n        l3Cache: 0.5   // 50% L3 cache hit rate (disk/network)\n      };\n\n      // Calculate overall cache hit rate\n      const overallHitRate = \n        cacheHitRates.l1Cache * 0.6 +  // L1 handles 60% of requests\n        cacheHitRates.l2Cache * 0.3 +  // L2 handles 30% of requests\n        cacheHitRates.l3Cache * 0.1;   // L3 handles 10% of requests\n\n      jest.spyOn(progressTracker, 'getCacheHitRate').mockResolvedValue(overallHitRate);\n\n      const cacheHitRate = await progressTracker.getCacheHitRate();\n\n      expect(cacheHitRate).toBeCloseTo(0.81, 2); // Should be ~81%\n      expect(cacheHitRate).toBeGreaterThan(0.8); // Above target\n    });\n\n    it('should detect cache invalidation impact', async () => {\n      let cacheInvalidated = false;\n      \n      jest.spyOn(progressTracker, 'getCacheHitRate').mockImplementation(async () => {\n        // Simulate cache invalidation impact\n        return cacheInvalidated ? 0.3 : 0.85; // Dramatic drop after invalidation\n      });\n\n      // Before cache invalidation\n      let cacheHitRate = await progressTracker.getCacheHitRate();\n      expect(cacheHitRate).toBe(0.85);\n\n      // Simulate cache invalidation\n      cacheInvalidated = true;\n      cacheHitRate = await progressTracker.getCacheHitRate();\n      expect(cacheHitRate).toBe(0.3);\n      expect(cacheHitRate).toBeLessThan(0.8); // Below target after invalidation\n    });\n\n    it('should validate cache warming strategies', async () => {\n      const warmupReadings: number[] = [];\n      let warmupStep = 0;\n\n      jest.spyOn(progressTracker, 'getCacheHitRate').mockImplementation(async () => {\n        warmupStep++;\n        // Simulate cache warming - exponential improvement\n        const maxRate = 0.9;\n        const warmupRate = maxRate * (1 - Math.exp(-warmupStep * 0.3));\n        return Math.min(maxRate, warmupRate);\n      });\n\n      // Simulate cache warming process\n      for (let i = 0; i < 8; i++) {\n        const cacheHitRate = await progressTracker.getCacheHitRate();\n        warmupReadings.push(cacheHitRate);\n      }\n\n      expect(warmupReadings.length).toBe(8);\n\n      // Cache should warm up progressively\n      expect(warmupReadings[0]).toBeLessThan(0.3); // Cold start\n      expect(warmupReadings[warmupReadings.length - 1]).toBeGreaterThan(0.8); // Warmed up\n\n      // Each reading should be better than or equal to the previous\n      for (let i = 1; i < warmupReadings.length; i++) {\n        expect(warmupReadings[i]).toBeGreaterThanOrEqual(warmupReadings[i - 1]);\n      }\n    });\n\n    it('should handle cache size optimization', async () => {\n      // Mock different cache sizes and their hit rates\n      const cacheSizeTests = [\n        { size: '10MB', hitRate: 0.6 },   // Small cache\n        { size: '50MB', hitRate: 0.8 },   // Medium cache\n        { size: '100MB', hitRate: 0.9 },  // Large cache\n        { size: '200MB', hitRate: 0.92 }  // Very large cache (diminishing returns)\n      ];\n\n      for (const test of cacheSizeTests) {\n        jest.spyOn(progressTracker, 'getCacheHitRate').mockResolvedValue(test.hitRate);\n        \n        const cacheHitRate = await progressTracker.getCacheHitRate();\n        expect(cacheHitRate).toBe(test.hitRate);\n        \n        // Larger caches should generally have better hit rates\n        if (test.size === '100MB') {\n          expect(cacheHitRate).toBeGreaterThan(0.8); // Should exceed target\n        }\n      }\n    });\n  });\n\n  describe('Cache Performance Under Load', () => {\n    it('should maintain cache performance under concurrent access', async () => {\n      let concurrentRequests = 0;\n      const maxConcurrentRequests = 10;\n\n      jest.spyOn(progressTracker, 'getCacheHitRate').mockImplementation(async () => {\n        concurrentRequests++;\n        \n        // Simulate cache performance degradation under high load\n        const loadFactor = Math.min(1, concurrentRequests / maxConcurrentRequests);\n        const baseRate = 0.85;\n        const degradation = loadFactor * 0.1; // Up to 10% degradation under full load\n        \n        setTimeout(() => concurrentRequests--, 100); // Simulate request completion\n        \n        return Math.max(0.7, baseRate - degradation); // Minimum 70% hit rate\n      });\n\n      // Simulate concurrent cache access\n      const promises = Array.from({ length: 15 }, () => \n        progressTracker.getCacheHitRate()\n      );\n\n      const results = await Promise.all(promises);\n\n      expect(results.length).toBe(15);\n      expect(results.every(rate => rate >= 0.7)).toBe(true); // All should be above minimum\n      \n      // Average should still be reasonable\n      const averageHitRate = results.reduce((sum, rate) => sum + rate, 0) / results.length;\n      expect(averageHitRate).toBeGreaterThan(0.75);\n    });\n\n    it('should handle cache thrashing scenarios', async () => {\n      let thrashingActive = false;\n      \n      jest.spyOn(progressTracker, 'getCacheHitRate').mockImplementation(async () => {\n        if (thrashingActive) {\n          // Simulate cache thrashing - very poor hit rate\n          return 0.2 + Math.random() * 0.2; // 20-40% hit rate\n        } else {\n          // Normal cache performance\n          return 0.8 + Math.random() * 0.1; // 80-90% hit rate\n        }\n      });\n\n      // Normal operation\n      let cacheHitRate = await progressTracker.getCacheHitRate();\n      expect(cacheHitRate).toBeGreaterThan(0.8);\n\n      // Simulate cache thrashing\n      thrashingActive = true;\n      const thrashingReadings: number[] = [];\n      \n      for (let i = 0; i < 5; i++) {\n        cacheHitRate = await progressTracker.getCacheHitRate();\n        thrashingReadings.push(cacheHitRate);\n      }\n\n      // All readings during thrashing should be poor\n      expect(thrashingReadings.every(rate => rate < 0.5)).toBe(true);\n      \n      // Recovery from thrashing\n      thrashingActive = false;\n      cacheHitRate = await progressTracker.getCacheHitRate();\n      expect(cacheHitRate).toBeGreaterThan(0.8); // Should recover\n    });\n\n    it('should validate cache performance during campaign execution', async () => {\n      const phase = mockConfig.phases[0];\n      let executionStep = 0;\n\n      // Mock cache performance during different execution phases\n      jest.spyOn(progressTracker, 'getCacheHitRate').mockImplementation(async () => {\n        executionStep++;\n        \n        // Simulate cache performance during campaign execution\n        if (executionStep <= 2) {\n          return 0.6; // Initial cold cache\n        } else if (executionStep <= 5) {\n          return 0.75; // Cache warming up\n        } else {\n          return 0.85; // Optimal cache performance\n        }\n      });\n\n      // Mock campaign execution with cache monitoring\n      jest.spyOn(campaignController as any, 'getCurrentMetrics').mockImplementation(async () => {\n        const cacheHitRate = await progressTracker.getCacheHitRate();\n        return {\n          typeScriptErrors: { current: 86, target: 0, reduction: 0, percentage: 0 },\n          lintingWarnings: { current: 4506, target: 0, reduction: 0, percentage: 0 },\n          buildPerformance: { currentTime: 8.5, targetTime: 10, cacheHitRate, memoryUsage: 45 },\n          enterpriseSystems: { current: 0, target: 200, transformedExports: 0 }\n        };\n      });\n\n      const result = await campaignController.executePhase(phase);\n\n      expect(result.success).toBe(true);\n      \n      // Final cache hit rate should be optimal\n      const finalCacheHitRate = await progressTracker.getCacheHitRate();\n      expect(finalCacheHitRate).toBe(0.85);\n      expect(finalCacheHitRate).toBeGreaterThan(0.8);\n    });\n  });\n\n  describe('Cache Performance Benchmarks', () => {\n    it('should benchmark cache lookup performance', async () => {\n      const lookupTimes: number[] = [];\n      \n      jest.spyOn(progressTracker, 'getCacheHitRate').mockImplementation(async () => {\n        const startTime = Date.now();\n        \n        // Simulate cache lookup time\n        const lookupDelay = 5 + Math.random() * 10; // 5-15ms lookup time\n        const endTime = startTime + lookupDelay;\n        while (Date.now() < endTime) {\n          // Busy wait to simulate lookup\n        }\n        \n        lookupTimes.push(Date.now() - startTime);\n        return 0.85; // Good hit rate\n      });\n\n      // Perform multiple cache lookups\n      for (let i = 0; i < 10; i++) {\n        await progressTracker.getCacheHitRate();\n      }\n\n      expect(lookupTimes.length).toBe(10);\n      expect(lookupTimes.every(time => time > 0)).toBe(true);\n\n      // Average lookup time should be reasonable\n      const averageLookupTime = lookupTimes.reduce((sum, time) => sum + time, 0) / lookupTimes.length;\n      expect(averageLookupTime).toBeLessThan(50); // Should be under 50ms\n    });\n\n    it('should validate cache efficiency across different data sizes', async () => {\n      const dataSizeTests = [\n        { size: 'small', hitRate: 0.95, lookupTime: 5 },\n        { size: 'medium', hitRate: 0.85, lookupTime: 10 },\n        { size: 'large', hitRate: 0.8, lookupTime: 15 },\n        { size: 'xlarge', hitRate: 0.75, lookupTime: 25 }\n      ];\n\n      for (const test of dataSizeTests) {\n        jest.spyOn(progressTracker, 'getCacheHitRate').mockImplementation(async () => {\n          // Simulate lookup time based on data size\n          const delay = test.lookupTime;\n          const endTime = Date.now() + delay;\n          while (Date.now() < endTime) {\n            // Busy wait\n          }\n          return test.hitRate;\n        });\n\n        const startTime = Date.now();\n        const cacheHitRate = await progressTracker.getCacheHitRate();\n        const lookupTime = Date.now() - startTime;\n\n        expect(cacheHitRate).toBe(test.hitRate);\n        expect(lookupTime).toBeGreaterThanOrEqual(test.lookupTime);\n        \n        // Even large data should maintain reasonable performance\n        if (test.size === 'large') {\n          expect(cacheHitRate).toBeGreaterThanOrEqual(0.8);\n          expect(lookupTime).toBeLessThan(50);\n        }\n      }\n    });\n\n    it('should benchmark cache invalidation performance', async () => {\n      let cacheVersion = 1;\n      const invalidationTimes: number[] = [];\n\n      jest.spyOn(progressTracker, 'getCacheHitRate').mockImplementation(async () => {\n        // Simulate cache invalidation impact\n        const currentVersion = cacheVersion;\n        \n        if (currentVersion === 1) {\n          return 0.85; // Good hit rate before invalidation\n        } else {\n          // Simulate cache rebuilding after invalidation\n          const rebuildProgress = Math.min(1, (Date.now() % 1000) / 1000);\n          return 0.3 + (0.55 * rebuildProgress); // 30% to 85% recovery\n        }\n      });\n\n      // Measure performance before invalidation\n      const beforeInvalidation = await progressTracker.getCacheHitRate();\n      expect(beforeInvalidation).toBe(0.85);\n\n      // Simulate cache invalidation\n      const invalidationStart = Date.now();\n      cacheVersion = 2;\n      \n      // Measure recovery time\n      let recoveryComplete = false;\n      while (!recoveryComplete && (Date.now() - invalidationStart) < 2000) {\n        const currentHitRate = await progressTracker.getCacheHitRate();\n        if (currentHitRate >= 0.8) {\n          recoveryComplete = true;\n          invalidationTimes.push(Date.now() - invalidationStart);\n        }\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n\n      // Cache should recover within reasonable time\n      expect(recoveryComplete).toBe(true);\n      if (invalidationTimes.length > 0) {\n        expect(invalidationTimes[0]).toBeLessThan(2000); // Should recover within 2 seconds\n      }\n    });\n  });\n\n  describe('Cache Configuration Optimization', () => {\n    it('should validate optimal cache configuration', async () => {\n      const cacheConfigs = [\n        { name: 'minimal', hitRate: 0.6, memoryUsage: 20 },\n        { name: 'balanced', hitRate: 0.8, memoryUsage: 35 },\n        { name: 'aggressive', hitRate: 0.9, memoryUsage: 48 },\n        { name: 'maximum', hitRate: 0.92, memoryUsage: 55 } // Exceeds memory target\n      ];\n\n      for (const config of cacheConfigs) {\n        jest.spyOn(progressTracker, 'getCacheHitRate').mockResolvedValue(config.hitRate);\n        jest.spyOn(progressTracker, 'getMemoryUsage').mockResolvedValue(config.memoryUsage);\n\n        const cacheHitRate = await progressTracker.getCacheHitRate();\n        const memoryUsage = await progressTracker.getMemoryUsage();\n\n        expect(cacheHitRate).toBe(config.hitRate);\n        expect(memoryUsage).toBe(config.memoryUsage);\n\n        // Balanced configuration should be optimal\n        if (config.name === 'balanced') {\n          expect(cacheHitRate).toBeGreaterThanOrEqual(0.8); // Meets target\n          expect(memoryUsage).toBeLessThan(50); // Under memory limit\n        }\n\n        // Maximum configuration exceeds memory limit\n        if (config.name === 'maximum') {\n          expect(memoryUsage).toBeGreaterThan(50); // Exceeds memory target\n        }\n      }\n    });\n\n    it('should handle cache configuration changes dynamically', async () => {\n      let currentConfig = 'default';\n      \n      jest.spyOn(progressTracker, 'getCacheHitRate').mockImplementation(async () => {\n        switch (currentConfig) {\n          case 'default':\n            return 0.75;\n          case 'optimized':\n            return 0.85;\n          case 'high-performance':\n            return 0.9;\n          default:\n            return 0.7;\n        }\n      });\n\n      // Test default configuration\n      let cacheHitRate = await progressTracker.getCacheHitRate();\n      expect(cacheHitRate).toBe(0.75);\n\n      // Switch to optimized configuration\n      currentConfig = 'optimized';\n      cacheHitRate = await progressTracker.getCacheHitRate();\n      expect(cacheHitRate).toBe(0.85);\n      expect(cacheHitRate).toBeGreaterThan(0.8); // Meets target\n\n      // Switch to high-performance configuration\n      currentConfig = 'high-performance';\n      cacheHitRate = await progressTracker.getCacheHitRate();\n      expect(cacheHitRate).toBe(0.9);\n      expect(cacheHitRate).toBeGreaterThan(0.85); // Exceeds target\n    });\n  });\n});"],"version":3}