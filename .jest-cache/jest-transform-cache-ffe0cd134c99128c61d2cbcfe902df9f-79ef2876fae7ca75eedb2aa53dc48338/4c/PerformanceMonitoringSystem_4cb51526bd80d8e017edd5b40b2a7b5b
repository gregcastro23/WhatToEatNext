012b62f853f4f54493695c6754ac61a1
"use strict";
/**
 * Performance Monitoring System
 * Perfect Codebase Campaign - Phase 4 Implementation
 *
 * Implements comprehensive performance monitoring with:
 * - Build time measurement using `time yarn build` integration
 * - Cache hit rate monitoring and memory usage tracking
 * - Performance regression detection with automatic alerts
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PerformanceMonitoringSystem = void 0;
const child_process_1 = require("child_process");
const fs = __importStar(require("fs"));
const ProgressTracker_1 = require("./ProgressTracker");
class PerformanceMonitoringSystem extends ProgressTracker_1.ProgressTracker {
    constructor() {
        super();
        this.performanceHistory = [];
        this.alerts = [];
        this.monitoringInterval = null;
        this.PERFORMANCE_TARGETS = {
            buildTime: 10,
            cacheHitRate: 0.8,
            memoryUsage: 50,
            bundleSize: 420 // kB
        };
    }
    /**
     * Measure build time using time command integration
     */
    async measureBuildTime() {
        try {
            console.log('üìä Measuring build time...');
            // Use time command to measure build execution
            const startTime = process.hrtime.bigint();
            // Execute build with time measurement
            const timeOutput = (0, child_process_1.execSync)('time -p yarn build 2>&1', {
                encoding: 'utf8',
                stdio: 'pipe'
            });
            const endTime = process.hrtime.bigint();
            const buildTimeSeconds = Number(endTime - startTime) / 1000000000;
            // Also try to extract time from the time command output
            const timeMatch = timeOutput.match(/real\s+(\d+\.\d+)/);
            const measuredTime = timeMatch ? parseFloat(timeMatch[1]) : buildTimeSeconds;
            console.log(`‚è±Ô∏è  Build completed in ${measuredTime.toFixed(2)}s`);
            return measuredTime;
        }
        catch (error) {
            console.warn(`‚ö†Ô∏è  Build time measurement failed: ${error.message}`);
            // Fallback to simple timing if time command fails
            try {
                const startTime = Date.now();
                (0, child_process_1.execSync)('yarn build', { encoding: 'utf8', stdio: 'pipe' });
                const endTime = Date.now();
                const fallbackTime = (endTime - startTime) / 1000;
                console.log(`‚è±Ô∏è  Build completed in ${fallbackTime.toFixed(2)}s (fallback timing)`);
                return fallbackTime;
            }
            catch (buildError) {
                console.error(`‚ùå Build failed: ${buildError.message}`);
                return -1;
            }
        }
    }
    /**
     * Monitor cache hit rate from build system
     */
    async monitorCacheHitRate() {
        try {
            // Check for Next.js cache information
            if (fs.existsSync('.next')) {
                const cacheDir = '.next/cache';
                if (fs.existsSync(cacheDir)) {
                    // Count cache files and estimate hit rate
                    const cacheFiles = (0, child_process_1.execSync)(`find ${cacheDir} -type f | wc -l`, {
                        encoding: 'utf8',
                        stdio: 'pipe'
                    });
                    const cacheCount = parseInt(cacheFiles.trim()) || 0;
                    // Estimate cache hit rate based on cache file count
                    // This is a simplified estimation - in a real system, you'd track actual cache hits
                    const estimatedHitRate = Math.min(0.95, Math.max(0.5, cacheCount / 1000));
                    console.log(`üìà Cache hit rate estimated: ${(estimatedHitRate * 100).toFixed(1)}%`);
                    return estimatedHitRate;
                }
            }
            // Check for other build system caches
            const cacheDirs = ['.yarn/cache', 'node_modules/.cache', '.cache'];
            let totalCacheSize = 0;
            for (const dir of cacheDirs) {
                if (fs.existsSync(dir)) {
                    try {
                        const sizeOutput = (0, child_process_1.execSync)(`du -sk ${dir} | cut -f1`, {
                            encoding: 'utf8',
                            stdio: 'pipe'
                        });
                        totalCacheSize += parseInt(sizeOutput.trim()) || 0;
                    }
                    catch (error) {
                        // Ignore individual cache directory errors
                    }
                }
            }
            // Estimate hit rate based on cache size (simplified heuristic)
            const estimatedHitRate = totalCacheSize > 10000 ? 0.8 : 0.6;
            console.log(`üìà Cache hit rate estimated: ${(estimatedHitRate * 100).toFixed(1)}% (based on cache size: ${totalCacheSize}kB)`);
            return estimatedHitRate;
        }
        catch (error) {
            console.warn(`‚ö†Ô∏è  Cache hit rate monitoring failed: ${error.message}`);
            return 0.7; // Default reasonable estimate
        }
    }
    /**
     * Track memory usage during build and runtime
     */
    async trackMemoryUsage() {
        try {
            // Get current Node.js process memory usage
            const memUsage = process.memoryUsage();
            const currentMB = Math.round(memUsage.heapUsed / 1024 / 1024);
            const peakMB = Math.round(memUsage.heapTotal / 1024 / 1024);
            // Also check system memory if available
            try {
                const systemMemOutput = (0, child_process_1.execSync)('ps -o pid,vsz,rss,comm -p $$ | tail -1', {
                    encoding: 'utf8',
                    stdio: 'pipe'
                });
                const memMatch = systemMemOutput.match(/\s+(\d+)\s+(\d+)\s+(\d+)/);
                if (memMatch) {
                    const systemCurrentMB = Math.round(parseInt(memMatch[3]) / 1024); // RSS in MB
                    console.log(`üíæ Memory usage: ${currentMB}MB (heap), ${systemCurrentMB}MB (system)`);
                    return { current: Math.max(currentMB, systemCurrentMB), peak: peakMB };
                }
            }
            catch (systemError) {
                // Fallback to Node.js memory only
            }
            console.log(`üíæ Memory usage: ${currentMB}MB (current), ${peakMB}MB (peak)`);
            return { current: currentMB, peak: peakMB };
        }
        catch (error) {
            console.warn(`‚ö†Ô∏è  Memory usage tracking failed: ${error.message}`);
            return { current: 0, peak: 0 };
        }
    }
    /**
     * Detect performance regressions automatically
     */
    async detectPerformanceRegression() {
        if (this.performanceHistory.length < 3) {
            return false; // Need at least 3 data points for trend analysis
        }
        const recent = this.performanceHistory.slice(-3);
        let regressionDetected = false;
        // Check build time regression (increasing trend)
        const buildTimes = recent.map(m => m.buildTime.current);
        if (buildTimes[2] > buildTimes[1] && buildTimes[1] > buildTimes[0]) {
            const increase = ((buildTimes[2] - buildTimes[0]) / buildTimes[0]) * 100;
            if (increase > 20) { // 20% increase threshold
                this.addAlert({
                    type: 'build_time',
                    severity: 'warning',
                    message: `Build time regression detected: ${increase.toFixed(1)}% increase over recent builds`,
                    currentValue: buildTimes[2],
                    targetValue: this.PERFORMANCE_TARGETS.buildTime,
                    timestamp: new Date(),
                    recommendations: [
                        'Check for new dependencies or code changes',
                        'Review build configuration for optimization opportunities',
                        'Consider cache invalidation or cleanup'
                    ]
                });
                regressionDetected = true;
            }
        }
        // Check cache hit rate regression (decreasing trend)
        const cacheRates = recent.map(m => m.cacheHitRate.current);
        if (cacheRates[2] < cacheRates[1] && cacheRates[1] < cacheRates[0]) {
            const decrease = ((cacheRates[0] - cacheRates[2]) / cacheRates[0]) * 100;
            if (decrease > 15) { // 15% decrease threshold
                this.addAlert({
                    type: 'cache_hit_rate',
                    severity: 'warning',
                    message: `Cache hit rate regression detected: ${decrease.toFixed(1)}% decrease`,
                    currentValue: cacheRates[2],
                    targetValue: this.PERFORMANCE_TARGETS.cacheHitRate,
                    timestamp: new Date(),
                    recommendations: [
                        'Check cache configuration and invalidation policies',
                        'Review recent changes that might affect caching',
                        'Consider cache warming strategies'
                    ]
                });
                regressionDetected = true;
            }
        }
        // Check memory usage regression (increasing trend)
        const memoryUsages = recent.map(m => m.memoryUsage.current);
        if (memoryUsages[2] > memoryUsages[1] && memoryUsages[1] > memoryUsages[0]) {
            const increase = ((memoryUsages[2] - memoryUsages[0]) / memoryUsages[0]) * 100;
            if (increase > 25) { // 25% increase threshold
                this.addAlert({
                    type: 'memory_usage',
                    severity: 'critical',
                    message: `Memory usage regression detected: ${increase.toFixed(1)}% increase`,
                    currentValue: memoryUsages[2],
                    targetValue: this.PERFORMANCE_TARGETS.memoryUsage,
                    timestamp: new Date(),
                    recommendations: [
                        'Check for memory leaks in recent code changes',
                        'Review data structures and caching strategies',
                        'Consider garbage collection optimization'
                    ]
                });
                regressionDetected = true;
            }
        }
        return regressionDetected;
    }
    /**
     * Generate automatic alerts for performance issues
     */
    addAlert(alert) {
        this.alerts.push(alert);
        // Keep only recent alerts to prevent memory issues
        if (this.alerts.length > 100) {
            this.alerts = this.alerts.slice(-50);
        }
        // Log alert immediately
        const severityIcon = alert.severity === 'critical' ? 'üö®' : '‚ö†Ô∏è';
        console.log(`${severityIcon} Performance Alert: ${alert.message}`);
        if (alert.recommendations.length > 0) {
            console.log('üí° Recommendations:');
            alert.recommendations.forEach(rec => console.log(`   ‚Ä¢ ${rec}`));
        }
    }
    /**
     * Get comprehensive performance metrics
     */
    async getPerformanceMetrics() {
        const buildTime = await this.measureBuildTime();
        const cacheHitRate = await this.monitorCacheHitRate();
        const memoryUsage = await this.trackMemoryUsage();
        const bundleSize = await this.getBundleSize();
        // Calculate averages from history
        const buildTimeAvg = this.performanceHistory.length > 0
            ? this.performanceHistory.reduce((sum, m) => sum + m.buildTime.current, 0) / this.performanceHistory.length
            : buildTime;
        const cacheHitRateAvg = this.performanceHistory.length > 0
            ? this.performanceHistory.reduce((sum, m) => sum + m.cacheHitRate.current, 0) / this.performanceHistory.length
            : cacheHitRate;
        const memoryUsageAvg = this.performanceHistory.length > 0
            ? this.performanceHistory.reduce((sum, m) => sum + m.memoryUsage.current, 0) / this.performanceHistory.length
            : memoryUsage.current;
        // Determine trends
        const buildTimeTrend = this.calculateTrend(this.performanceHistory.map(m => m.buildTime.current), buildTime);
        const cacheHitRateTrend = this.calculateTrend(this.performanceHistory.map(m => m.cacheHitRate.current), cacheHitRate);
        const bundleSizeTrend = this.calculateTrend(this.performanceHistory.map(m => m.bundleSize.current), bundleSize);
        const metrics = {
            buildTime: {
                current: buildTime,
                target: this.PERFORMANCE_TARGETS.buildTime,
                average: buildTimeAvg,
                trend: buildTimeTrend
            },
            cacheHitRate: {
                current: cacheHitRate,
                target: this.PERFORMANCE_TARGETS.cacheHitRate,
                average: cacheHitRateAvg,
                trend: cacheHitRateTrend
            },
            memoryUsage: {
                current: memoryUsage.current,
                target: this.PERFORMANCE_TARGETS.memoryUsage,
                peak: memoryUsage.peak,
                average: memoryUsageAvg
            },
            bundleSize: {
                current: bundleSize,
                target: this.PERFORMANCE_TARGETS.bundleSize,
                compressed: Math.round(bundleSize * 0.7),
                trend: bundleSizeTrend
            }
        };
        // Store in history
        this.performanceHistory.push(metrics);
        // Keep only recent history
        if (this.performanceHistory.length > 50) {
            this.performanceHistory = this.performanceHistory.slice(-25);
        }
        return metrics;
    }
    /**
     * Calculate trend from historical data
     */
    calculateTrend(history, current) {
        if (history.length < 2)
            return 'stable';
        const recent = history.slice(-3);
        const average = recent.reduce((sum, val) => sum + val, 0) / recent.length;
        const changePercent = ((current - average) / average) * 100;
        if (Math.abs(changePercent) < 5)
            return 'stable';
        return changePercent < 0 ? 'improving' : 'degrading';
    }
    /**
     * Generate comprehensive performance report
     */
    async generatePerformanceReport() {
        const metrics = await this.getPerformanceMetrics();
        const regressionDetected = await this.detectPerformanceRegression();
        // Calculate overall performance score (0-100)
        const buildTimeScore = Math.max(0, Math.min(100, (this.PERFORMANCE_TARGETS.buildTime / Math.max(metrics.buildTime.current, 0.1)) * 100));
        const cacheHitRateScore = metrics.cacheHitRate.current * 100;
        const memoryScore = Math.max(0, Math.min(100, (this.PERFORMANCE_TARGETS.memoryUsage / Math.max(metrics.memoryUsage.current, 1)) * 100));
        const bundleSizeScore = Math.max(0, Math.min(100, (this.PERFORMANCE_TARGETS.bundleSize / Math.max(metrics.bundleSize.current, 1)) * 100));
        const overallScore = Math.round((buildTimeScore + cacheHitRateScore + memoryScore + bundleSizeScore) / 4);
        // Generate recommendations
        const recommendations = [];
        if (metrics.buildTime.current > this.PERFORMANCE_TARGETS.buildTime) {
            recommendations.push(`Build time (${metrics.buildTime.current.toFixed(1)}s) exceeds target (${this.PERFORMANCE_TARGETS.buildTime}s)`);
        }
        if (metrics.cacheHitRate.current < this.PERFORMANCE_TARGETS.cacheHitRate) {
            recommendations.push(`Cache hit rate (${(metrics.cacheHitRate.current * 100).toFixed(1)}%) below target (${(this.PERFORMANCE_TARGETS.cacheHitRate * 100)}%)`);
        }
        if (metrics.memoryUsage.current > this.PERFORMANCE_TARGETS.memoryUsage) {
            recommendations.push(`Memory usage (${metrics.memoryUsage.current}MB) exceeds target (${this.PERFORMANCE_TARGETS.memoryUsage}MB)`);
        }
        if (metrics.bundleSize.current > this.PERFORMANCE_TARGETS.bundleSize) {
            recommendations.push(`Bundle size (${metrics.bundleSize.current}kB) exceeds target (${this.PERFORMANCE_TARGETS.bundleSize}kB)`);
        }
        return {
            timestamp: new Date(),
            metrics,
            alerts: [...this.alerts],
            regressionDetected,
            overallScore,
            recommendations
        };
    }
    /**
     * Start continuous performance monitoring
     */
    startMonitoring(intervalMinutes = 5) {
        if (this.monitoringInterval) {
            clearInterval(this.monitoringInterval);
        }
        console.log(`üìä Starting performance monitoring (every ${intervalMinutes} minutes)`);
        this.monitoringInterval = setInterval(async () => {
            try {
                await this.getPerformanceMetrics();
                await this.detectPerformanceRegression();
            }
            catch (error) {
                console.warn(`‚ö†Ô∏è  Performance monitoring error: ${error.message}`);
            }
        }, intervalMinutes * 60 * 1000);
    }
    /**
     * Stop continuous performance monitoring
     */
    stopMonitoring() {
        if (this.monitoringInterval) {
            clearInterval(this.monitoringInterval);
            this.monitoringInterval = null;
            console.log('üìä Performance monitoring stopped');
        }
    }
    /**
     * Export performance data for analysis
     */
    async exportPerformanceData(filePath) {
        try {
            const report = await this.generatePerformanceReport();
            const exportData = {
                timestamp: new Date().toISOString(),
                report,
                history: this.performanceHistory,
                alerts: this.alerts,
                targets: this.PERFORMANCE_TARGETS
            };
            fs.writeFileSync(filePath, JSON.stringify(exportData, null, 2));
            console.log(`üìä Performance data exported to: ${filePath}`);
        }
        catch (error) {
            throw new Error(`Failed to export performance data: ${error.message}`);
        }
    }
    /**
     * Get current alerts
     */
    getCurrentAlerts() {
        return [...this.alerts];
    }
    /**
     * Clear all alerts
     */
    clearAlerts() {
        this.alerts = [];
        console.log('üìä Performance alerts cleared');
    }
    /**
     * Get performance history
     */
    getPerformanceHistory() {
        return [...this.performanceHistory];
    }
}
exports.PerformanceMonitoringSystem = PerformanceMonitoringSystem;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9zZXJ2aWNlcy9jYW1wYWlnbi9QZXJmb3JtYW5jZU1vbml0b3JpbmdTeXN0ZW0udHMiLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7OztHQVFHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVILGlEQUF5QztBQUN6Qyx1Q0FBeUI7QUFFekIsdURBQW9EO0FBZ0RwRCxNQUFhLDJCQUE0QixTQUFRLGlDQUFlO0lBVzlEO1FBQ0UsS0FBSyxFQUFFLENBQUM7UUFYRix1QkFBa0IsR0FBeUIsRUFBRSxDQUFDO1FBQzlDLFdBQU0sR0FBdUIsRUFBRSxDQUFDO1FBQ2hDLHVCQUFrQixHQUEwQixJQUFJLENBQUM7UUFDeEMsd0JBQW1CLEdBQUc7WUFDckMsU0FBUyxFQUFFLEVBQUU7WUFDYixZQUFZLEVBQUUsR0FBRztZQUNqQixXQUFXLEVBQUUsRUFBRTtZQUNmLFVBQVUsRUFBRSxHQUFHLENBQUMsS0FBSztTQUN0QixDQUFDO0lBSUYsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLGdCQUFnQjtRQUNwQixJQUFJO1lBQ0YsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO1lBRTFDLDhDQUE4QztZQUM5QyxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBRTFDLHNDQUFzQztZQUN0QyxNQUFNLFVBQVUsR0FBRyxJQUFBLHdCQUFRLEVBQUMseUJBQXlCLEVBQUU7Z0JBQ3JELFFBQVEsRUFBRSxNQUFNO2dCQUNoQixLQUFLLEVBQUUsTUFBTTthQUNkLENBQUMsQ0FBQztZQUVILE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDeEMsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQyxHQUFHLFVBQWEsQ0FBQztZQUVyRSx3REFBd0Q7WUFDeEQsTUFBTSxTQUFTLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1lBQ3hELE1BQU0sWUFBWSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQztZQUU3RSxPQUFPLENBQUMsR0FBRyxDQUFDLDBCQUEwQixZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNsRSxPQUFPLFlBQVksQ0FBQztTQUVyQjtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsT0FBTyxDQUFDLElBQUksQ0FBQyxzQ0FBc0MsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7WUFFcEUsa0RBQWtEO1lBQ2xELElBQUk7Z0JBQ0YsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO2dCQUM3QixJQUFBLHdCQUFRLEVBQUMsWUFBWSxFQUFFLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztnQkFDNUQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO2dCQUMzQixNQUFNLFlBQVksR0FBRyxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUM7Z0JBRWxELE9BQU8sQ0FBQyxHQUFHLENBQUMsMEJBQTBCLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUM7Z0JBQ3BGLE9BQU8sWUFBWSxDQUFDO2FBQ3JCO1lBQUMsT0FBTyxVQUFVLEVBQUU7Z0JBQ25CLE9BQU8sQ0FBQyxLQUFLLENBQUMsbUJBQW1CLFVBQVUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO2dCQUN2RCxPQUFPLENBQUMsQ0FBQyxDQUFDO2FBQ1g7U0FDRjtJQUNILENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUssQ0FBQyxtQkFBbUI7UUFDdkIsSUFBSTtZQUNGLHNDQUFzQztZQUN0QyxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQzFCLE1BQU0sUUFBUSxHQUFHLGFBQWEsQ0FBQztnQkFDL0IsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFO29CQUMzQiwwQ0FBMEM7b0JBQzFDLE1BQU0sVUFBVSxHQUFHLElBQUEsd0JBQVEsRUFBQyxRQUFRLFFBQVEsa0JBQWtCLEVBQUU7d0JBQzlELFFBQVEsRUFBRSxNQUFNO3dCQUNoQixLQUFLLEVBQUUsTUFBTTtxQkFDZCxDQUFDLENBQUM7b0JBRUgsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFFcEQsb0RBQW9EO29CQUNwRCxvRkFBb0Y7b0JBQ3BGLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsVUFBVSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBRTFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0NBQWdDLENBQUMsZ0JBQWdCLEdBQUcsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDcEYsT0FBTyxnQkFBZ0IsQ0FBQztpQkFDekI7YUFDRjtZQUVELHNDQUFzQztZQUN0QyxNQUFNLFNBQVMsR0FBRyxDQUFDLGFBQWEsRUFBRSxxQkFBcUIsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUNuRSxJQUFJLGNBQWMsR0FBRyxDQUFDLENBQUM7WUFFdkIsS0FBSyxNQUFNLEdBQUcsSUFBSSxTQUFTLEVBQUU7Z0JBQzNCLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtvQkFDdEIsSUFBSTt3QkFDRixNQUFNLFVBQVUsR0FBRyxJQUFBLHdCQUFRLEVBQUMsVUFBVSxHQUFHLFlBQVksRUFBRTs0QkFDckQsUUFBUSxFQUFFLE1BQU07NEJBQ2hCLEtBQUssRUFBRSxNQUFNO3lCQUNkLENBQUMsQ0FBQzt3QkFDSCxjQUFjLElBQUksUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztxQkFDcEQ7b0JBQUMsT0FBTyxLQUFLLEVBQUU7d0JBQ2QsMkNBQTJDO3FCQUM1QztpQkFDRjthQUNGO1lBRUQsK0RBQStEO1lBQy9ELE1BQU0sZ0JBQWdCLEdBQUcsY0FBYyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7WUFFNUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQ0FBZ0MsQ0FBQyxnQkFBZ0IsR0FBRyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLDJCQUEyQixjQUFjLEtBQUssQ0FBQyxDQUFDO1lBQy9ILE9BQU8sZ0JBQWdCLENBQUM7U0FFekI7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLE9BQU8sQ0FBQyxJQUFJLENBQUMseUNBQXlDLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZFLE9BQU8sR0FBRyxDQUFDLENBQUMsOEJBQThCO1NBQzNDO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLGdCQUFnQjtRQUNwQixJQUFJO1lBQ0YsMkNBQTJDO1lBQzNDLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUN2QyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDO1lBQzlELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFNBQVMsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUM7WUFFNUQsd0NBQXdDO1lBQ3hDLElBQUk7Z0JBQ0YsTUFBTSxlQUFlLEdBQUcsSUFBQSx3QkFBUSxFQUFDLHdDQUF3QyxFQUFFO29CQUN6RSxRQUFRLEVBQUUsTUFBTTtvQkFDaEIsS0FBSyxFQUFFLE1BQU07aUJBQ2QsQ0FBQyxDQUFDO2dCQUVILE1BQU0sUUFBUSxHQUFHLGVBQWUsQ0FBQyxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztnQkFDbkUsSUFBSSxRQUFRLEVBQUU7b0JBQ1osTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxZQUFZO29CQUM5RSxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixTQUFTLGNBQWMsZUFBZSxhQUFhLENBQUMsQ0FBQztvQkFDckYsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxlQUFlLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUM7aUJBQ3hFO2FBQ0Y7WUFBQyxPQUFPLFdBQVcsRUFBRTtnQkFDcEIsa0NBQWtDO2FBQ25DO1lBRUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsU0FBUyxpQkFBaUIsTUFBTSxXQUFXLENBQUMsQ0FBQztZQUM3RSxPQUFPLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUM7U0FFN0M7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLE9BQU8sQ0FBQyxJQUFJLENBQUMscUNBQXFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1lBQ25FLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQztTQUNoQztJQUNILENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUssQ0FBQywyQkFBMkI7UUFDL0IsSUFBSSxJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN0QyxPQUFPLEtBQUssQ0FBQyxDQUFDLGlEQUFpRDtTQUNoRTtRQUVELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqRCxJQUFJLGtCQUFrQixHQUFHLEtBQUssQ0FBQztRQUUvQixpREFBaUQ7UUFDakQsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDeEQsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDbEUsTUFBTSxRQUFRLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDekUsSUFBSSxRQUFRLEdBQUcsRUFBRSxFQUFFLEVBQUUseUJBQXlCO2dCQUM1QyxJQUFJLENBQUMsUUFBUSxDQUFDO29CQUNaLElBQUksRUFBRSxZQUFZO29CQUNsQixRQUFRLEVBQUUsU0FBUztvQkFDbkIsT0FBTyxFQUFFLG1DQUFtQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQywrQkFBK0I7b0JBQzlGLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO29CQUMzQixXQUFXLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFNBQVM7b0JBQy9DLFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRTtvQkFDckIsZUFBZSxFQUFFO3dCQUNmLDRDQUE0Qzt3QkFDNUMsMkRBQTJEO3dCQUMzRCx3Q0FBd0M7cUJBQ3pDO2lCQUNGLENBQUMsQ0FBQztnQkFDSCxrQkFBa0IsR0FBRyxJQUFJLENBQUM7YUFDM0I7U0FDRjtRQUVELHFEQUFxRDtRQUNyRCxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzRCxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNsRSxNQUFNLFFBQVEsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUN6RSxJQUFJLFFBQVEsR0FBRyxFQUFFLEVBQUUsRUFBRSx5QkFBeUI7Z0JBQzVDLElBQUksQ0FBQyxRQUFRLENBQUM7b0JBQ1osSUFBSSxFQUFFLGdCQUFnQjtvQkFDdEIsUUFBUSxFQUFFLFNBQVM7b0JBQ25CLE9BQU8sRUFBRSx1Q0FBdUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsWUFBWTtvQkFDL0UsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7b0JBQzNCLFdBQVcsRUFBRSxJQUFJLENBQUMsbUJBQW1CLENBQUMsWUFBWTtvQkFDbEQsU0FBUyxFQUFFLElBQUksSUFBSSxFQUFFO29CQUNyQixlQUFlLEVBQUU7d0JBQ2YscURBQXFEO3dCQUNyRCxpREFBaUQ7d0JBQ2pELG1DQUFtQztxQkFDcEM7aUJBQ0YsQ0FBQyxDQUFDO2dCQUNILGtCQUFrQixHQUFHLElBQUksQ0FBQzthQUMzQjtTQUNGO1FBRUQsbURBQW1EO1FBQ25ELE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzVELElBQUksWUFBWSxDQUFDLENBQUMsQ0FBQyxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxZQUFZLENBQUMsQ0FBQyxDQUFDLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQzFFLE1BQU0sUUFBUSxHQUFHLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQy9FLElBQUksUUFBUSxHQUFHLEVBQUUsRUFBRSxFQUFFLHlCQUF5QjtnQkFDNUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztvQkFDWixJQUFJLEVBQUUsY0FBYztvQkFDcEIsUUFBUSxFQUFFLFVBQVU7b0JBQ3BCLE9BQU8sRUFBRSxxQ0FBcUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsWUFBWTtvQkFDN0UsWUFBWSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7b0JBQzdCLFdBQVcsRUFBRSxJQUFJLENBQUMsbUJBQW1CLENBQUMsV0FBVztvQkFDakQsU0FBUyxFQUFFLElBQUksSUFBSSxFQUFFO29CQUNyQixlQUFlLEVBQUU7d0JBQ2YsK0NBQStDO3dCQUMvQywrQ0FBK0M7d0JBQy9DLDBDQUEwQztxQkFDM0M7aUJBQ0YsQ0FBQyxDQUFDO2dCQUNILGtCQUFrQixHQUFHLElBQUksQ0FBQzthQUMzQjtTQUNGO1FBRUQsT0FBTyxrQkFBa0IsQ0FBQztJQUM1QixDQUFDO0lBRUQ7O09BRUc7SUFDSyxRQUFRLENBQUMsS0FBdUI7UUFDdEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFeEIsbURBQW1EO1FBQ25ELElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFO1lBQzVCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUN0QztRQUVELHdCQUF3QjtRQUN4QixNQUFNLFlBQVksR0FBRyxLQUFLLENBQUMsUUFBUSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDakUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFlBQVksdUJBQXVCLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBRW5FLElBQUksS0FBSyxDQUFDLGVBQWUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3BDLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztZQUNuQyxLQUFLLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDbEU7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMscUJBQXFCO1FBQ3pCLE1BQU0sU0FBUyxHQUFHLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDaEQsTUFBTSxZQUFZLEdBQUcsTUFBTSxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUN0RCxNQUFNLFdBQVcsR0FBRyxNQUFNLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ2xELE1BQU0sVUFBVSxHQUFHLE1BQU0sSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBRTlDLGtDQUFrQztRQUNsQyxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxHQUFHLENBQUM7WUFDckQsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU07WUFDM0csQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUVkLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQztZQUN4RCxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTTtZQUM5RyxDQUFDLENBQUMsWUFBWSxDQUFDO1FBRWpCLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQztZQUN2RCxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTTtZQUM3RyxDQUFDLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQztRQUV4QixtQkFBbUI7UUFDbkIsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUM3RyxNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDdEgsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUVoSCxNQUFNLE9BQU8sR0FBdUI7WUFDbEMsU0FBUyxFQUFFO2dCQUNULE9BQU8sRUFBRSxTQUFTO2dCQUNsQixNQUFNLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFNBQVM7Z0JBQzFDLE9BQU8sRUFBRSxZQUFZO2dCQUNyQixLQUFLLEVBQUUsY0FBYzthQUN0QjtZQUNELFlBQVksRUFBRTtnQkFDWixPQUFPLEVBQUUsWUFBWTtnQkFDckIsTUFBTSxFQUFFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZO2dCQUM3QyxPQUFPLEVBQUUsZUFBZTtnQkFDeEIsS0FBSyxFQUFFLGlCQUFpQjthQUN6QjtZQUNELFdBQVcsRUFBRTtnQkFDWCxPQUFPLEVBQUUsV0FBVyxDQUFDLE9BQU87Z0JBQzVCLE1BQU0sRUFBRSxJQUFJLENBQUMsbUJBQW1CLENBQUMsV0FBVztnQkFDNUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJO2dCQUN0QixPQUFPLEVBQUUsY0FBYzthQUN4QjtZQUNELFVBQVUsRUFBRTtnQkFDVixPQUFPLEVBQUUsVUFBVTtnQkFDbkIsTUFBTSxFQUFFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVO2dCQUMzQyxVQUFVLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO2dCQUN4QyxLQUFLLEVBQUUsZUFBZTthQUN2QjtTQUNGLENBQUM7UUFFRixtQkFBbUI7UUFDbkIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV0QywyQkFBMkI7UUFDM0IsSUFBSSxJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxHQUFHLEVBQUUsRUFBRTtZQUN2QyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQzlEO1FBRUQsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUVEOztPQUVHO0lBQ0ssY0FBYyxDQUFDLE9BQWlCLEVBQUUsT0FBZTtRQUN2RCxJQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQztZQUFFLE9BQU8sUUFBUSxDQUFDO1FBRXhDLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqQyxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBRTFFLE1BQU0sYUFBYSxHQUFHLENBQUMsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQUcsT0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBRTVELElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDO1lBQUUsT0FBTyxRQUFRLENBQUM7UUFDakQsT0FBTyxhQUFhLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQztJQUN2RCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMseUJBQXlCO1FBQzdCLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDbkQsTUFBTSxrQkFBa0IsR0FBRyxNQUFNLElBQUksQ0FBQywyQkFBMkIsRUFBRSxDQUFDO1FBRXBFLDhDQUE4QztRQUM5QyxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDekksTUFBTSxpQkFBaUIsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUM7UUFDN0QsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3hJLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUUxSSxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsY0FBYyxHQUFHLGlCQUFpQixHQUFHLFdBQVcsR0FBRyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUUxRywyQkFBMkI7UUFDM0IsTUFBTSxlQUFlLEdBQWEsRUFBRSxDQUFDO1FBRXJDLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsRUFBRTtZQUNsRSxlQUFlLENBQUMsSUFBSSxDQUFDLGVBQWUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsSUFBSSxDQUFDLENBQUM7U0FDdkk7UUFFRCxJQUFJLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLEVBQUU7WUFDeEUsZUFBZSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQy9KO1FBRUQsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsV0FBVyxFQUFFO1lBQ3RFLGVBQWUsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLE9BQU8sQ0FBQyxXQUFXLENBQUMsT0FBTyx1QkFBdUIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFdBQVcsS0FBSyxDQUFDLENBQUM7U0FDcEk7UUFFRCxJQUFJLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLEVBQUU7WUFDcEUsZUFBZSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLHVCQUF1QixJQUFJLENBQUMsbUJBQW1CLENBQUMsVUFBVSxLQUFLLENBQUMsQ0FBQztTQUNqSTtRQUVELE9BQU87WUFDTCxTQUFTLEVBQUUsSUFBSSxJQUFJLEVBQUU7WUFDckIsT0FBTztZQUNQLE1BQU0sRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUN4QixrQkFBa0I7WUFDbEIsWUFBWTtZQUNaLGVBQWU7U0FDaEIsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNILGVBQWUsQ0FBQyxrQkFBMEIsQ0FBQztRQUN6QyxJQUFJLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtZQUMzQixhQUFhLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7U0FDeEM7UUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLDZDQUE2QyxlQUFlLFdBQVcsQ0FBQyxDQUFDO1FBRXJGLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxXQUFXLENBQUMsS0FBSyxJQUFJLEVBQUU7WUFDL0MsSUFBSTtnQkFDRixNQUFNLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO2dCQUNuQyxNQUFNLElBQUksQ0FBQywyQkFBMkIsRUFBRSxDQUFDO2FBQzFDO1lBQUMsT0FBTyxLQUFLLEVBQUU7Z0JBQ2QsT0FBTyxDQUFDLElBQUksQ0FBQyxxQ0FBcUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7YUFDcEU7UUFDSCxDQUFDLEVBQUUsZUFBZSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxjQUFjO1FBQ1osSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUU7WUFDM0IsYUFBYSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUM7WUFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO1NBQ2xEO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLHFCQUFxQixDQUFDLFFBQWdCO1FBQzFDLElBQUk7WUFDRixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxDQUFDO1lBQ3RELE1BQU0sVUFBVSxHQUFHO2dCQUNqQixTQUFTLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUU7Z0JBQ25DLE1BQU07Z0JBQ04sT0FBTyxFQUFFLElBQUksQ0FBQyxrQkFBa0I7Z0JBQ2hDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtnQkFDbkIsT0FBTyxFQUFFLElBQUksQ0FBQyxtQkFBbUI7YUFDbEMsQ0FBQztZQUVGLEVBQUUsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hFLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0NBQW9DLFFBQVEsRUFBRSxDQUFDLENBQUM7U0FFN0Q7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLE1BQU0sSUFBSSxLQUFLLENBQUMsc0NBQXNDLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1NBQ3hFO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0gsZ0JBQWdCO1FBQ2QsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRDs7T0FFRztJQUNILFdBQVc7UUFDVCxJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNqQixPQUFPLENBQUMsR0FBRyxDQUFDLCtCQUErQixDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVEOztPQUVHO0lBQ0gscUJBQXFCO1FBQ25CLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7Q0FDRjtBQW5jRCxrRUFtY0MiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9zZXJ2aWNlcy9jYW1wYWlnbi9QZXJmb3JtYW5jZU1vbml0b3JpbmdTeXN0ZW0udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBQZXJmb3JtYW5jZSBNb25pdG9yaW5nIFN5c3RlbVxuICogUGVyZmVjdCBDb2RlYmFzZSBDYW1wYWlnbiAtIFBoYXNlIDQgSW1wbGVtZW50YXRpb25cbiAqIFxuICogSW1wbGVtZW50cyBjb21wcmVoZW5zaXZlIHBlcmZvcm1hbmNlIG1vbml0b3Jpbmcgd2l0aDpcbiAqIC0gQnVpbGQgdGltZSBtZWFzdXJlbWVudCB1c2luZyBgdGltZSB5YXJuIGJ1aWxkYCBpbnRlZ3JhdGlvblxuICogLSBDYWNoZSBoaXQgcmF0ZSBtb25pdG9yaW5nIGFuZCBtZW1vcnkgdXNhZ2UgdHJhY2tpbmdcbiAqIC0gUGVyZm9ybWFuY2UgcmVncmVzc2lvbiBkZXRlY3Rpb24gd2l0aCBhdXRvbWF0aWMgYWxlcnRzXG4gKi9cblxuaW1wb3J0IHsgZXhlY1N5bmMgfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBQcm9ncmVzc1RyYWNrZXIgfSBmcm9tICcuL1Byb2dyZXNzVHJhY2tlcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGVyZm9ybWFuY2VNZXRyaWNzIHtcbiAgYnVpbGRUaW1lOiB7XG4gICAgY3VycmVudDogbnVtYmVyO1xuICAgIHRhcmdldDogbnVtYmVyO1xuICAgIGF2ZXJhZ2U6IG51bWJlcjtcbiAgICB0cmVuZDogJ2ltcHJvdmluZycgfCAnc3RhYmxlJyB8ICdkZWdyYWRpbmcnO1xuICB9O1xuICBjYWNoZUhpdFJhdGU6IHtcbiAgICBjdXJyZW50OiBudW1iZXI7XG4gICAgdGFyZ2V0OiBudW1iZXI7XG4gICAgYXZlcmFnZTogbnVtYmVyO1xuICAgIHRyZW5kOiAnaW1wcm92aW5nJyB8ICdzdGFibGUnIHwgJ2RlZ3JhZGluZyc7XG4gIH07XG4gIG1lbW9yeVVzYWdlOiB7XG4gICAgY3VycmVudDogbnVtYmVyO1xuICAgIHRhcmdldDogbnVtYmVyO1xuICAgIHBlYWs6IG51bWJlcjtcbiAgICBhdmVyYWdlOiBudW1iZXI7XG4gIH07XG4gIGJ1bmRsZVNpemU6IHtcbiAgICBjdXJyZW50OiBudW1iZXI7XG4gICAgdGFyZ2V0OiBudW1iZXI7XG4gICAgY29tcHJlc3NlZDogbnVtYmVyO1xuICAgIHRyZW5kOiAnaW1wcm92aW5nJyB8ICdzdGFibGUnIHwgJ2RlZ3JhZGluZyc7XG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGVyZm9ybWFuY2VBbGVydCB7XG4gIHR5cGU6ICdidWlsZF90aW1lJyB8ICdjYWNoZV9oaXRfcmF0ZScgfCAnbWVtb3J5X3VzYWdlJyB8ICdidW5kbGVfc2l6ZSc7XG4gIHNldmVyaXR5OiAnd2FybmluZycgfCAnY3JpdGljYWwnO1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIGN1cnJlbnRWYWx1ZTogbnVtYmVyO1xuICB0YXJnZXRWYWx1ZTogbnVtYmVyO1xuICB0aW1lc3RhbXA6IERhdGU7XG4gIHJlY29tbWVuZGF0aW9uczogc3RyaW5nW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGVyZm9ybWFuY2VSZXBvcnQge1xuICB0aW1lc3RhbXA6IERhdGU7XG4gIG1ldHJpY3M6IFBlcmZvcm1hbmNlTWV0cmljcztcbiAgYWxlcnRzOiBQZXJmb3JtYW5jZUFsZXJ0W107XG4gIHJlZ3Jlc3Npb25EZXRlY3RlZDogYm9vbGVhbjtcbiAgb3ZlcmFsbFNjb3JlOiBudW1iZXI7XG4gIHJlY29tbWVuZGF0aW9uczogc3RyaW5nW107XG59XG5cbmV4cG9ydCBjbGFzcyBQZXJmb3JtYW5jZU1vbml0b3JpbmdTeXN0ZW0gZXh0ZW5kcyBQcm9ncmVzc1RyYWNrZXIge1xuICBwcml2YXRlIHBlcmZvcm1hbmNlSGlzdG9yeTogUGVyZm9ybWFuY2VNZXRyaWNzW10gPSBbXTtcbiAgcHJpdmF0ZSBhbGVydHM6IFBlcmZvcm1hbmNlQWxlcnRbXSA9IFtdO1xuICBwcml2YXRlIG1vbml0b3JpbmdJbnRlcnZhbDogTm9kZUpTLlRpbWVvdXQgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSByZWFkb25seSBQRVJGT1JNQU5DRV9UQVJHRVRTID0ge1xuICAgIGJ1aWxkVGltZTogMTAsIC8vIHNlY29uZHNcbiAgICBjYWNoZUhpdFJhdGU6IDAuOCwgLy8gODAlXG4gICAgbWVtb3J5VXNhZ2U6IDUwLCAvLyBNQlxuICAgIGJ1bmRsZVNpemU6IDQyMCAvLyBrQlxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogTWVhc3VyZSBidWlsZCB0aW1lIHVzaW5nIHRpbWUgY29tbWFuZCBpbnRlZ3JhdGlvblxuICAgKi9cbiAgYXN5bmMgbWVhc3VyZUJ1aWxkVGltZSgpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zb2xlLmxvZygn8J+TiiBNZWFzdXJpbmcgYnVpbGQgdGltZS4uLicpO1xuICAgICAgXG4gICAgICAvLyBVc2UgdGltZSBjb21tYW5kIHRvIG1lYXN1cmUgYnVpbGQgZXhlY3V0aW9uXG4gICAgICBjb25zdCBzdGFydFRpbWUgPSBwcm9jZXNzLmhydGltZS5iaWdpbnQoKTtcbiAgICAgIFxuICAgICAgLy8gRXhlY3V0ZSBidWlsZCB3aXRoIHRpbWUgbWVhc3VyZW1lbnRcbiAgICAgIGNvbnN0IHRpbWVPdXRwdXQgPSBleGVjU3luYygndGltZSAtcCB5YXJuIGJ1aWxkIDI+JjEnLCB7XG4gICAgICAgIGVuY29kaW5nOiAndXRmOCcsXG4gICAgICAgIHN0ZGlvOiAncGlwZSdcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBjb25zdCBlbmRUaW1lID0gcHJvY2Vzcy5ocnRpbWUuYmlnaW50KCk7XG4gICAgICBjb25zdCBidWlsZFRpbWVTZWNvbmRzID0gTnVtYmVyKGVuZFRpbWUgLSBzdGFydFRpbWUpIC8gMV8wMDBfMDAwXzAwMDtcbiAgICAgIFxuICAgICAgLy8gQWxzbyB0cnkgdG8gZXh0cmFjdCB0aW1lIGZyb20gdGhlIHRpbWUgY29tbWFuZCBvdXRwdXRcbiAgICAgIGNvbnN0IHRpbWVNYXRjaCA9IHRpbWVPdXRwdXQubWF0Y2goL3JlYWxcXHMrKFxcZCtcXC5cXGQrKS8pO1xuICAgICAgY29uc3QgbWVhc3VyZWRUaW1lID0gdGltZU1hdGNoID8gcGFyc2VGbG9hdCh0aW1lTWF0Y2hbMV0pIDogYnVpbGRUaW1lU2Vjb25kcztcbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coYOKPse+4jyAgQnVpbGQgY29tcGxldGVkIGluICR7bWVhc3VyZWRUaW1lLnRvRml4ZWQoMil9c2ApO1xuICAgICAgcmV0dXJuIG1lYXN1cmVkVGltZTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oYOKaoO+4jyAgQnVpbGQgdGltZSBtZWFzdXJlbWVudCBmYWlsZWQ6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgIFxuICAgICAgLy8gRmFsbGJhY2sgdG8gc2ltcGxlIHRpbWluZyBpZiB0aW1lIGNvbW1hbmQgZmFpbHNcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgICAgIGV4ZWNTeW5jKCd5YXJuIGJ1aWxkJywgeyBlbmNvZGluZzogJ3V0ZjgnLCBzdGRpbzogJ3BpcGUnIH0pO1xuICAgICAgICBjb25zdCBlbmRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgY29uc3QgZmFsbGJhY2tUaW1lID0gKGVuZFRpbWUgLSBzdGFydFRpbWUpIC8gMTAwMDtcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nKGDij7HvuI8gIEJ1aWxkIGNvbXBsZXRlZCBpbiAke2ZhbGxiYWNrVGltZS50b0ZpeGVkKDIpfXMgKGZhbGxiYWNrIHRpbWluZylgKTtcbiAgICAgICAgcmV0dXJuIGZhbGxiYWNrVGltZTtcbiAgICAgIH0gY2F0Y2ggKGJ1aWxkRXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihg4p2MIEJ1aWxkIGZhaWxlZDogJHtidWlsZEVycm9yLm1lc3NhZ2V9YCk7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTW9uaXRvciBjYWNoZSBoaXQgcmF0ZSBmcm9tIGJ1aWxkIHN5c3RlbVxuICAgKi9cbiAgYXN5bmMgbW9uaXRvckNhY2hlSGl0UmF0ZSgpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBDaGVjayBmb3IgTmV4dC5qcyBjYWNoZSBpbmZvcm1hdGlvblxuICAgICAgaWYgKGZzLmV4aXN0c1N5bmMoJy5uZXh0JykpIHtcbiAgICAgICAgY29uc3QgY2FjaGVEaXIgPSAnLm5leHQvY2FjaGUnO1xuICAgICAgICBpZiAoZnMuZXhpc3RzU3luYyhjYWNoZURpcikpIHtcbiAgICAgICAgICAvLyBDb3VudCBjYWNoZSBmaWxlcyBhbmQgZXN0aW1hdGUgaGl0IHJhdGVcbiAgICAgICAgICBjb25zdCBjYWNoZUZpbGVzID0gZXhlY1N5bmMoYGZpbmQgJHtjYWNoZURpcn0gLXR5cGUgZiB8IHdjIC1sYCwge1xuICAgICAgICAgICAgZW5jb2Rpbmc6ICd1dGY4JyxcbiAgICAgICAgICAgIHN0ZGlvOiAncGlwZSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBcbiAgICAgICAgICBjb25zdCBjYWNoZUNvdW50ID0gcGFyc2VJbnQoY2FjaGVGaWxlcy50cmltKCkpIHx8IDA7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gRXN0aW1hdGUgY2FjaGUgaGl0IHJhdGUgYmFzZWQgb24gY2FjaGUgZmlsZSBjb3VudFxuICAgICAgICAgIC8vIFRoaXMgaXMgYSBzaW1wbGlmaWVkIGVzdGltYXRpb24gLSBpbiBhIHJlYWwgc3lzdGVtLCB5b3UnZCB0cmFjayBhY3R1YWwgY2FjaGUgaGl0c1xuICAgICAgICAgIGNvbnN0IGVzdGltYXRlZEhpdFJhdGUgPSBNYXRoLm1pbigwLjk1LCBNYXRoLm1heCgwLjUsIGNhY2hlQ291bnQgLyAxMDAwKSk7XG4gICAgICAgICAgXG4gICAgICAgICAgY29uc29sZS5sb2coYPCfk4ggQ2FjaGUgaGl0IHJhdGUgZXN0aW1hdGVkOiAkeyhlc3RpbWF0ZWRIaXRSYXRlICogMTAwKS50b0ZpeGVkKDEpfSVgKTtcbiAgICAgICAgICByZXR1cm4gZXN0aW1hdGVkSGl0UmF0ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBDaGVjayBmb3Igb3RoZXIgYnVpbGQgc3lzdGVtIGNhY2hlc1xuICAgICAgY29uc3QgY2FjaGVEaXJzID0gWycueWFybi9jYWNoZScsICdub2RlX21vZHVsZXMvLmNhY2hlJywgJy5jYWNoZSddO1xuICAgICAgbGV0IHRvdGFsQ2FjaGVTaXplID0gMDtcbiAgICAgIFxuICAgICAgZm9yIChjb25zdCBkaXIgb2YgY2FjaGVEaXJzKSB7XG4gICAgICAgIGlmIChmcy5leGlzdHNTeW5jKGRpcikpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3Qgc2l6ZU91dHB1dCA9IGV4ZWNTeW5jKGBkdSAtc2sgJHtkaXJ9IHwgY3V0IC1mMWAsIHtcbiAgICAgICAgICAgICAgZW5jb2Rpbmc6ICd1dGY4JyxcbiAgICAgICAgICAgICAgc3RkaW86ICdwaXBlJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0b3RhbENhY2hlU2l6ZSArPSBwYXJzZUludChzaXplT3V0cHV0LnRyaW0oKSkgfHwgMDtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgLy8gSWdub3JlIGluZGl2aWR1YWwgY2FjaGUgZGlyZWN0b3J5IGVycm9yc1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBFc3RpbWF0ZSBoaXQgcmF0ZSBiYXNlZCBvbiBjYWNoZSBzaXplIChzaW1wbGlmaWVkIGhldXJpc3RpYylcbiAgICAgIGNvbnN0IGVzdGltYXRlZEhpdFJhdGUgPSB0b3RhbENhY2hlU2l6ZSA+IDEwMDAwID8gMC44IDogMC42O1xuICAgICAgXG4gICAgICBjb25zb2xlLmxvZyhg8J+TiCBDYWNoZSBoaXQgcmF0ZSBlc3RpbWF0ZWQ6ICR7KGVzdGltYXRlZEhpdFJhdGUgKiAxMDApLnRvRml4ZWQoMSl9JSAoYmFzZWQgb24gY2FjaGUgc2l6ZTogJHt0b3RhbENhY2hlU2l6ZX1rQilgKTtcbiAgICAgIHJldHVybiBlc3RpbWF0ZWRIaXRSYXRlO1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2Fybihg4pqg77iPICBDYWNoZSBoaXQgcmF0ZSBtb25pdG9yaW5nIGZhaWxlZDogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgcmV0dXJuIDAuNzsgLy8gRGVmYXVsdCByZWFzb25hYmxlIGVzdGltYXRlXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRyYWNrIG1lbW9yeSB1c2FnZSBkdXJpbmcgYnVpbGQgYW5kIHJ1bnRpbWVcbiAgICovXG4gIGFzeW5jIHRyYWNrTWVtb3J5VXNhZ2UoKTogUHJvbWlzZTx7IGN1cnJlbnQ6IG51bWJlcjsgcGVhazogbnVtYmVyIH0+IHtcbiAgICB0cnkge1xuICAgICAgLy8gR2V0IGN1cnJlbnQgTm9kZS5qcyBwcm9jZXNzIG1lbW9yeSB1c2FnZVxuICAgICAgY29uc3QgbWVtVXNhZ2UgPSBwcm9jZXNzLm1lbW9yeVVzYWdlKCk7XG4gICAgICBjb25zdCBjdXJyZW50TUIgPSBNYXRoLnJvdW5kKG1lbVVzYWdlLmhlYXBVc2VkIC8gMTAyNCAvIDEwMjQpO1xuICAgICAgY29uc3QgcGVha01CID0gTWF0aC5yb3VuZChtZW1Vc2FnZS5oZWFwVG90YWwgLyAxMDI0IC8gMTAyNCk7XG4gICAgICBcbiAgICAgIC8vIEFsc28gY2hlY2sgc3lzdGVtIG1lbW9yeSBpZiBhdmFpbGFibGVcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHN5c3RlbU1lbU91dHB1dCA9IGV4ZWNTeW5jKCdwcyAtbyBwaWQsdnN6LHJzcyxjb21tIC1wICQkIHwgdGFpbCAtMScsIHtcbiAgICAgICAgICBlbmNvZGluZzogJ3V0ZjgnLFxuICAgICAgICAgIHN0ZGlvOiAncGlwZSdcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBtZW1NYXRjaCA9IHN5c3RlbU1lbU91dHB1dC5tYXRjaCgvXFxzKyhcXGQrKVxccysoXFxkKylcXHMrKFxcZCspLyk7XG4gICAgICAgIGlmIChtZW1NYXRjaCkge1xuICAgICAgICAgIGNvbnN0IHN5c3RlbUN1cnJlbnRNQiA9IE1hdGgucm91bmQocGFyc2VJbnQobWVtTWF0Y2hbM10pIC8gMTAyNCk7IC8vIFJTUyBpbiBNQlxuICAgICAgICAgIGNvbnNvbGUubG9nKGDwn5K+IE1lbW9yeSB1c2FnZTogJHtjdXJyZW50TUJ9TUIgKGhlYXApLCAke3N5c3RlbUN1cnJlbnRNQn1NQiAoc3lzdGVtKWApO1xuICAgICAgICAgIHJldHVybiB7IGN1cnJlbnQ6IE1hdGgubWF4KGN1cnJlbnRNQiwgc3lzdGVtQ3VycmVudE1CKSwgcGVhazogcGVha01CIH07XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKHN5c3RlbUVycm9yKSB7XG4gICAgICAgIC8vIEZhbGxiYWNrIHRvIE5vZGUuanMgbWVtb3J5IG9ubHlcbiAgICAgIH1cbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coYPCfkr4gTWVtb3J5IHVzYWdlOiAke2N1cnJlbnRNQn1NQiAoY3VycmVudCksICR7cGVha01CfU1CIChwZWFrKWApO1xuICAgICAgcmV0dXJuIHsgY3VycmVudDogY3VycmVudE1CLCBwZWFrOiBwZWFrTUIgfTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oYOKaoO+4jyAgTWVtb3J5IHVzYWdlIHRyYWNraW5nIGZhaWxlZDogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgcmV0dXJuIHsgY3VycmVudDogMCwgcGVhazogMCB9O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlY3QgcGVyZm9ybWFuY2UgcmVncmVzc2lvbnMgYXV0b21hdGljYWxseVxuICAgKi9cbiAgYXN5bmMgZGV0ZWN0UGVyZm9ybWFuY2VSZWdyZXNzaW9uKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGlmICh0aGlzLnBlcmZvcm1hbmNlSGlzdG9yeS5sZW5ndGggPCAzKSB7XG4gICAgICByZXR1cm4gZmFsc2U7IC8vIE5lZWQgYXQgbGVhc3QgMyBkYXRhIHBvaW50cyBmb3IgdHJlbmQgYW5hbHlzaXNcbiAgICB9XG4gICAgXG4gICAgY29uc3QgcmVjZW50ID0gdGhpcy5wZXJmb3JtYW5jZUhpc3Rvcnkuc2xpY2UoLTMpO1xuICAgIGxldCByZWdyZXNzaW9uRGV0ZWN0ZWQgPSBmYWxzZTtcbiAgICBcbiAgICAvLyBDaGVjayBidWlsZCB0aW1lIHJlZ3Jlc3Npb24gKGluY3JlYXNpbmcgdHJlbmQpXG4gICAgY29uc3QgYnVpbGRUaW1lcyA9IHJlY2VudC5tYXAobSA9PiBtLmJ1aWxkVGltZS5jdXJyZW50KTtcbiAgICBpZiAoYnVpbGRUaW1lc1syXSA+IGJ1aWxkVGltZXNbMV0gJiYgYnVpbGRUaW1lc1sxXSA+IGJ1aWxkVGltZXNbMF0pIHtcbiAgICAgIGNvbnN0IGluY3JlYXNlID0gKChidWlsZFRpbWVzWzJdIC0gYnVpbGRUaW1lc1swXSkgLyBidWlsZFRpbWVzWzBdKSAqIDEwMDtcbiAgICAgIGlmIChpbmNyZWFzZSA+IDIwKSB7IC8vIDIwJSBpbmNyZWFzZSB0aHJlc2hvbGRcbiAgICAgICAgdGhpcy5hZGRBbGVydCh7XG4gICAgICAgICAgdHlwZTogJ2J1aWxkX3RpbWUnLFxuICAgICAgICAgIHNldmVyaXR5OiAnd2FybmluZycsXG4gICAgICAgICAgbWVzc2FnZTogYEJ1aWxkIHRpbWUgcmVncmVzc2lvbiBkZXRlY3RlZDogJHtpbmNyZWFzZS50b0ZpeGVkKDEpfSUgaW5jcmVhc2Ugb3ZlciByZWNlbnQgYnVpbGRzYCxcbiAgICAgICAgICBjdXJyZW50VmFsdWU6IGJ1aWxkVGltZXNbMl0sXG4gICAgICAgICAgdGFyZ2V0VmFsdWU6IHRoaXMuUEVSRk9STUFOQ0VfVEFSR0VUUy5idWlsZFRpbWUsXG4gICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICAgIHJlY29tbWVuZGF0aW9uczogW1xuICAgICAgICAgICAgJ0NoZWNrIGZvciBuZXcgZGVwZW5kZW5jaWVzIG9yIGNvZGUgY2hhbmdlcycsXG4gICAgICAgICAgICAnUmV2aWV3IGJ1aWxkIGNvbmZpZ3VyYXRpb24gZm9yIG9wdGltaXphdGlvbiBvcHBvcnR1bml0aWVzJyxcbiAgICAgICAgICAgICdDb25zaWRlciBjYWNoZSBpbnZhbGlkYXRpb24gb3IgY2xlYW51cCdcbiAgICAgICAgICBdXG4gICAgICAgIH0pO1xuICAgICAgICByZWdyZXNzaW9uRGV0ZWN0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyBDaGVjayBjYWNoZSBoaXQgcmF0ZSByZWdyZXNzaW9uIChkZWNyZWFzaW5nIHRyZW5kKVxuICAgIGNvbnN0IGNhY2hlUmF0ZXMgPSByZWNlbnQubWFwKG0gPT4gbS5jYWNoZUhpdFJhdGUuY3VycmVudCk7XG4gICAgaWYgKGNhY2hlUmF0ZXNbMl0gPCBjYWNoZVJhdGVzWzFdICYmIGNhY2hlUmF0ZXNbMV0gPCBjYWNoZVJhdGVzWzBdKSB7XG4gICAgICBjb25zdCBkZWNyZWFzZSA9ICgoY2FjaGVSYXRlc1swXSAtIGNhY2hlUmF0ZXNbMl0pIC8gY2FjaGVSYXRlc1swXSkgKiAxMDA7XG4gICAgICBpZiAoZGVjcmVhc2UgPiAxNSkgeyAvLyAxNSUgZGVjcmVhc2UgdGhyZXNob2xkXG4gICAgICAgIHRoaXMuYWRkQWxlcnQoe1xuICAgICAgICAgIHR5cGU6ICdjYWNoZV9oaXRfcmF0ZScsXG4gICAgICAgICAgc2V2ZXJpdHk6ICd3YXJuaW5nJyxcbiAgICAgICAgICBtZXNzYWdlOiBgQ2FjaGUgaGl0IHJhdGUgcmVncmVzc2lvbiBkZXRlY3RlZDogJHtkZWNyZWFzZS50b0ZpeGVkKDEpfSUgZGVjcmVhc2VgLFxuICAgICAgICAgIGN1cnJlbnRWYWx1ZTogY2FjaGVSYXRlc1syXSxcbiAgICAgICAgICB0YXJnZXRWYWx1ZTogdGhpcy5QRVJGT1JNQU5DRV9UQVJHRVRTLmNhY2hlSGl0UmF0ZSxcbiAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgICAgcmVjb21tZW5kYXRpb25zOiBbXG4gICAgICAgICAgICAnQ2hlY2sgY2FjaGUgY29uZmlndXJhdGlvbiBhbmQgaW52YWxpZGF0aW9uIHBvbGljaWVzJyxcbiAgICAgICAgICAgICdSZXZpZXcgcmVjZW50IGNoYW5nZXMgdGhhdCBtaWdodCBhZmZlY3QgY2FjaGluZycsXG4gICAgICAgICAgICAnQ29uc2lkZXIgY2FjaGUgd2FybWluZyBzdHJhdGVnaWVzJ1xuICAgICAgICAgIF1cbiAgICAgICAgfSk7XG4gICAgICAgIHJlZ3Jlc3Npb25EZXRlY3RlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vIENoZWNrIG1lbW9yeSB1c2FnZSByZWdyZXNzaW9uIChpbmNyZWFzaW5nIHRyZW5kKVxuICAgIGNvbnN0IG1lbW9yeVVzYWdlcyA9IHJlY2VudC5tYXAobSA9PiBtLm1lbW9yeVVzYWdlLmN1cnJlbnQpO1xuICAgIGlmIChtZW1vcnlVc2FnZXNbMl0gPiBtZW1vcnlVc2FnZXNbMV0gJiYgbWVtb3J5VXNhZ2VzWzFdID4gbWVtb3J5VXNhZ2VzWzBdKSB7XG4gICAgICBjb25zdCBpbmNyZWFzZSA9ICgobWVtb3J5VXNhZ2VzWzJdIC0gbWVtb3J5VXNhZ2VzWzBdKSAvIG1lbW9yeVVzYWdlc1swXSkgKiAxMDA7XG4gICAgICBpZiAoaW5jcmVhc2UgPiAyNSkgeyAvLyAyNSUgaW5jcmVhc2UgdGhyZXNob2xkXG4gICAgICAgIHRoaXMuYWRkQWxlcnQoe1xuICAgICAgICAgIHR5cGU6ICdtZW1vcnlfdXNhZ2UnLFxuICAgICAgICAgIHNldmVyaXR5OiAnY3JpdGljYWwnLFxuICAgICAgICAgIG1lc3NhZ2U6IGBNZW1vcnkgdXNhZ2UgcmVncmVzc2lvbiBkZXRlY3RlZDogJHtpbmNyZWFzZS50b0ZpeGVkKDEpfSUgaW5jcmVhc2VgLFxuICAgICAgICAgIGN1cnJlbnRWYWx1ZTogbWVtb3J5VXNhZ2VzWzJdLFxuICAgICAgICAgIHRhcmdldFZhbHVlOiB0aGlzLlBFUkZPUk1BTkNFX1RBUkdFVFMubWVtb3J5VXNhZ2UsXG4gICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICAgIHJlY29tbWVuZGF0aW9uczogW1xuICAgICAgICAgICAgJ0NoZWNrIGZvciBtZW1vcnkgbGVha3MgaW4gcmVjZW50IGNvZGUgY2hhbmdlcycsXG4gICAgICAgICAgICAnUmV2aWV3IGRhdGEgc3RydWN0dXJlcyBhbmQgY2FjaGluZyBzdHJhdGVnaWVzJyxcbiAgICAgICAgICAgICdDb25zaWRlciBnYXJiYWdlIGNvbGxlY3Rpb24gb3B0aW1pemF0aW9uJ1xuICAgICAgICAgIF1cbiAgICAgICAgfSk7XG4gICAgICAgIHJlZ3Jlc3Npb25EZXRlY3RlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIHJldHVybiByZWdyZXNzaW9uRGV0ZWN0ZWQ7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgYXV0b21hdGljIGFsZXJ0cyBmb3IgcGVyZm9ybWFuY2UgaXNzdWVzXG4gICAqL1xuICBwcml2YXRlIGFkZEFsZXJ0KGFsZXJ0OiBQZXJmb3JtYW5jZUFsZXJ0KTogdm9pZCB7XG4gICAgdGhpcy5hbGVydHMucHVzaChhbGVydCk7XG4gICAgXG4gICAgLy8gS2VlcCBvbmx5IHJlY2VudCBhbGVydHMgdG8gcHJldmVudCBtZW1vcnkgaXNzdWVzXG4gICAgaWYgKHRoaXMuYWxlcnRzLmxlbmd0aCA+IDEwMCkge1xuICAgICAgdGhpcy5hbGVydHMgPSB0aGlzLmFsZXJ0cy5zbGljZSgtNTApO1xuICAgIH1cbiAgICBcbiAgICAvLyBMb2cgYWxlcnQgaW1tZWRpYXRlbHlcbiAgICBjb25zdCBzZXZlcml0eUljb24gPSBhbGVydC5zZXZlcml0eSA9PT0gJ2NyaXRpY2FsJyA/ICfwn5qoJyA6ICfimqDvuI8nO1xuICAgIGNvbnNvbGUubG9nKGAke3NldmVyaXR5SWNvbn0gUGVyZm9ybWFuY2UgQWxlcnQ6ICR7YWxlcnQubWVzc2FnZX1gKTtcbiAgICBcbiAgICBpZiAoYWxlcnQucmVjb21tZW5kYXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnNvbGUubG9nKCfwn5KhIFJlY29tbWVuZGF0aW9uczonKTtcbiAgICAgIGFsZXJ0LnJlY29tbWVuZGF0aW9ucy5mb3JFYWNoKHJlYyA9PiBjb25zb2xlLmxvZyhgICAg4oCiICR7cmVjfWApKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IGNvbXByZWhlbnNpdmUgcGVyZm9ybWFuY2UgbWV0cmljc1xuICAgKi9cbiAgYXN5bmMgZ2V0UGVyZm9ybWFuY2VNZXRyaWNzKCk6IFByb21pc2U8UGVyZm9ybWFuY2VNZXRyaWNzPiB7XG4gICAgY29uc3QgYnVpbGRUaW1lID0gYXdhaXQgdGhpcy5tZWFzdXJlQnVpbGRUaW1lKCk7XG4gICAgY29uc3QgY2FjaGVIaXRSYXRlID0gYXdhaXQgdGhpcy5tb25pdG9yQ2FjaGVIaXRSYXRlKCk7XG4gICAgY29uc3QgbWVtb3J5VXNhZ2UgPSBhd2FpdCB0aGlzLnRyYWNrTWVtb3J5VXNhZ2UoKTtcbiAgICBjb25zdCBidW5kbGVTaXplID0gYXdhaXQgdGhpcy5nZXRCdW5kbGVTaXplKCk7XG4gICAgXG4gICAgLy8gQ2FsY3VsYXRlIGF2ZXJhZ2VzIGZyb20gaGlzdG9yeVxuICAgIGNvbnN0IGJ1aWxkVGltZUF2ZyA9IHRoaXMucGVyZm9ybWFuY2VIaXN0b3J5Lmxlbmd0aCA+IDAgXG4gICAgICA/IHRoaXMucGVyZm9ybWFuY2VIaXN0b3J5LnJlZHVjZSgoc3VtLCBtKSA9PiBzdW0gKyBtLmJ1aWxkVGltZS5jdXJyZW50LCAwKSAvIHRoaXMucGVyZm9ybWFuY2VIaXN0b3J5Lmxlbmd0aFxuICAgICAgOiBidWlsZFRpbWU7XG4gICAgXG4gICAgY29uc3QgY2FjaGVIaXRSYXRlQXZnID0gdGhpcy5wZXJmb3JtYW5jZUhpc3RvcnkubGVuZ3RoID4gMFxuICAgICAgPyB0aGlzLnBlcmZvcm1hbmNlSGlzdG9yeS5yZWR1Y2UoKHN1bSwgbSkgPT4gc3VtICsgbS5jYWNoZUhpdFJhdGUuY3VycmVudCwgMCkgLyB0aGlzLnBlcmZvcm1hbmNlSGlzdG9yeS5sZW5ndGhcbiAgICAgIDogY2FjaGVIaXRSYXRlO1xuICAgIFxuICAgIGNvbnN0IG1lbW9yeVVzYWdlQXZnID0gdGhpcy5wZXJmb3JtYW5jZUhpc3RvcnkubGVuZ3RoID4gMFxuICAgICAgPyB0aGlzLnBlcmZvcm1hbmNlSGlzdG9yeS5yZWR1Y2UoKHN1bSwgbSkgPT4gc3VtICsgbS5tZW1vcnlVc2FnZS5jdXJyZW50LCAwKSAvIHRoaXMucGVyZm9ybWFuY2VIaXN0b3J5Lmxlbmd0aFxuICAgICAgOiBtZW1vcnlVc2FnZS5jdXJyZW50O1xuICAgIFxuICAgIC8vIERldGVybWluZSB0cmVuZHNcbiAgICBjb25zdCBidWlsZFRpbWVUcmVuZCA9IHRoaXMuY2FsY3VsYXRlVHJlbmQodGhpcy5wZXJmb3JtYW5jZUhpc3RvcnkubWFwKG0gPT4gbS5idWlsZFRpbWUuY3VycmVudCksIGJ1aWxkVGltZSk7XG4gICAgY29uc3QgY2FjaGVIaXRSYXRlVHJlbmQgPSB0aGlzLmNhbGN1bGF0ZVRyZW5kKHRoaXMucGVyZm9ybWFuY2VIaXN0b3J5Lm1hcChtID0+IG0uY2FjaGVIaXRSYXRlLmN1cnJlbnQpLCBjYWNoZUhpdFJhdGUpO1xuICAgIGNvbnN0IGJ1bmRsZVNpemVUcmVuZCA9IHRoaXMuY2FsY3VsYXRlVHJlbmQodGhpcy5wZXJmb3JtYW5jZUhpc3RvcnkubWFwKG0gPT4gbS5idW5kbGVTaXplLmN1cnJlbnQpLCBidW5kbGVTaXplKTtcbiAgICBcbiAgICBjb25zdCBtZXRyaWNzOiBQZXJmb3JtYW5jZU1ldHJpY3MgPSB7XG4gICAgICBidWlsZFRpbWU6IHtcbiAgICAgICAgY3VycmVudDogYnVpbGRUaW1lLFxuICAgICAgICB0YXJnZXQ6IHRoaXMuUEVSRk9STUFOQ0VfVEFSR0VUUy5idWlsZFRpbWUsXG4gICAgICAgIGF2ZXJhZ2U6IGJ1aWxkVGltZUF2ZyxcbiAgICAgICAgdHJlbmQ6IGJ1aWxkVGltZVRyZW5kXG4gICAgICB9LFxuICAgICAgY2FjaGVIaXRSYXRlOiB7XG4gICAgICAgIGN1cnJlbnQ6IGNhY2hlSGl0UmF0ZSxcbiAgICAgICAgdGFyZ2V0OiB0aGlzLlBFUkZPUk1BTkNFX1RBUkdFVFMuY2FjaGVIaXRSYXRlLFxuICAgICAgICBhdmVyYWdlOiBjYWNoZUhpdFJhdGVBdmcsXG4gICAgICAgIHRyZW5kOiBjYWNoZUhpdFJhdGVUcmVuZFxuICAgICAgfSxcbiAgICAgIG1lbW9yeVVzYWdlOiB7XG4gICAgICAgIGN1cnJlbnQ6IG1lbW9yeVVzYWdlLmN1cnJlbnQsXG4gICAgICAgIHRhcmdldDogdGhpcy5QRVJGT1JNQU5DRV9UQVJHRVRTLm1lbW9yeVVzYWdlLFxuICAgICAgICBwZWFrOiBtZW1vcnlVc2FnZS5wZWFrLFxuICAgICAgICBhdmVyYWdlOiBtZW1vcnlVc2FnZUF2Z1xuICAgICAgfSxcbiAgICAgIGJ1bmRsZVNpemU6IHtcbiAgICAgICAgY3VycmVudDogYnVuZGxlU2l6ZSxcbiAgICAgICAgdGFyZ2V0OiB0aGlzLlBFUkZPUk1BTkNFX1RBUkdFVFMuYnVuZGxlU2l6ZSxcbiAgICAgICAgY29tcHJlc3NlZDogTWF0aC5yb3VuZChidW5kbGVTaXplICogMC43KSwgLy8gRXN0aW1hdGUgY29tcHJlc3NlZCBzaXplXG4gICAgICAgIHRyZW5kOiBidW5kbGVTaXplVHJlbmRcbiAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIC8vIFN0b3JlIGluIGhpc3RvcnlcbiAgICB0aGlzLnBlcmZvcm1hbmNlSGlzdG9yeS5wdXNoKG1ldHJpY3MpO1xuICAgIFxuICAgIC8vIEtlZXAgb25seSByZWNlbnQgaGlzdG9yeVxuICAgIGlmICh0aGlzLnBlcmZvcm1hbmNlSGlzdG9yeS5sZW5ndGggPiA1MCkge1xuICAgICAgdGhpcy5wZXJmb3JtYW5jZUhpc3RvcnkgPSB0aGlzLnBlcmZvcm1hbmNlSGlzdG9yeS5zbGljZSgtMjUpO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gbWV0cmljcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdHJlbmQgZnJvbSBoaXN0b3JpY2FsIGRhdGFcbiAgICovXG4gIHByaXZhdGUgY2FsY3VsYXRlVHJlbmQoaGlzdG9yeTogbnVtYmVyW10sIGN1cnJlbnQ6IG51bWJlcik6ICdpbXByb3ZpbmcnIHwgJ3N0YWJsZScgfCAnZGVncmFkaW5nJyB7XG4gICAgaWYgKGhpc3RvcnkubGVuZ3RoIDwgMikgcmV0dXJuICdzdGFibGUnO1xuICAgIFxuICAgIGNvbnN0IHJlY2VudCA9IGhpc3Rvcnkuc2xpY2UoLTMpO1xuICAgIGNvbnN0IGF2ZXJhZ2UgPSByZWNlbnQucmVkdWNlKChzdW0sIHZhbCkgPT4gc3VtICsgdmFsLCAwKSAvIHJlY2VudC5sZW5ndGg7XG4gICAgXG4gICAgY29uc3QgY2hhbmdlUGVyY2VudCA9ICgoY3VycmVudCAtIGF2ZXJhZ2UpIC8gYXZlcmFnZSkgKiAxMDA7XG4gICAgXG4gICAgaWYgKE1hdGguYWJzKGNoYW5nZVBlcmNlbnQpIDwgNSkgcmV0dXJuICdzdGFibGUnO1xuICAgIHJldHVybiBjaGFuZ2VQZXJjZW50IDwgMCA/ICdpbXByb3ZpbmcnIDogJ2RlZ3JhZGluZyc7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgY29tcHJlaGVuc2l2ZSBwZXJmb3JtYW5jZSByZXBvcnRcbiAgICovXG4gIGFzeW5jIGdlbmVyYXRlUGVyZm9ybWFuY2VSZXBvcnQoKTogUHJvbWlzZTxQZXJmb3JtYW5jZVJlcG9ydD4ge1xuICAgIGNvbnN0IG1ldHJpY3MgPSBhd2FpdCB0aGlzLmdldFBlcmZvcm1hbmNlTWV0cmljcygpO1xuICAgIGNvbnN0IHJlZ3Jlc3Npb25EZXRlY3RlZCA9IGF3YWl0IHRoaXMuZGV0ZWN0UGVyZm9ybWFuY2VSZWdyZXNzaW9uKCk7XG4gICAgXG4gICAgLy8gQ2FsY3VsYXRlIG92ZXJhbGwgcGVyZm9ybWFuY2Ugc2NvcmUgKDAtMTAwKVxuICAgIGNvbnN0IGJ1aWxkVGltZVNjb3JlID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMTAwLCAodGhpcy5QRVJGT1JNQU5DRV9UQVJHRVRTLmJ1aWxkVGltZSAvIE1hdGgubWF4KG1ldHJpY3MuYnVpbGRUaW1lLmN1cnJlbnQsIDAuMSkpICogMTAwKSk7XG4gICAgY29uc3QgY2FjaGVIaXRSYXRlU2NvcmUgPSBtZXRyaWNzLmNhY2hlSGl0UmF0ZS5jdXJyZW50ICogMTAwO1xuICAgIGNvbnN0IG1lbW9yeVNjb3JlID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMTAwLCAodGhpcy5QRVJGT1JNQU5DRV9UQVJHRVRTLm1lbW9yeVVzYWdlIC8gTWF0aC5tYXgobWV0cmljcy5tZW1vcnlVc2FnZS5jdXJyZW50LCAxKSkgKiAxMDApKTtcbiAgICBjb25zdCBidW5kbGVTaXplU2NvcmUgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxMDAsICh0aGlzLlBFUkZPUk1BTkNFX1RBUkdFVFMuYnVuZGxlU2l6ZSAvIE1hdGgubWF4KG1ldHJpY3MuYnVuZGxlU2l6ZS5jdXJyZW50LCAxKSkgKiAxMDApKTtcbiAgICBcbiAgICBjb25zdCBvdmVyYWxsU2NvcmUgPSBNYXRoLnJvdW5kKChidWlsZFRpbWVTY29yZSArIGNhY2hlSGl0UmF0ZVNjb3JlICsgbWVtb3J5U2NvcmUgKyBidW5kbGVTaXplU2NvcmUpIC8gNCk7XG4gICAgXG4gICAgLy8gR2VuZXJhdGUgcmVjb21tZW5kYXRpb25zXG4gICAgY29uc3QgcmVjb21tZW5kYXRpb25zOiBzdHJpbmdbXSA9IFtdO1xuICAgIFxuICAgIGlmIChtZXRyaWNzLmJ1aWxkVGltZS5jdXJyZW50ID4gdGhpcy5QRVJGT1JNQU5DRV9UQVJHRVRTLmJ1aWxkVGltZSkge1xuICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goYEJ1aWxkIHRpbWUgKCR7bWV0cmljcy5idWlsZFRpbWUuY3VycmVudC50b0ZpeGVkKDEpfXMpIGV4Y2VlZHMgdGFyZ2V0ICgke3RoaXMuUEVSRk9STUFOQ0VfVEFSR0VUUy5idWlsZFRpbWV9cylgKTtcbiAgICB9XG4gICAgXG4gICAgaWYgKG1ldHJpY3MuY2FjaGVIaXRSYXRlLmN1cnJlbnQgPCB0aGlzLlBFUkZPUk1BTkNFX1RBUkdFVFMuY2FjaGVIaXRSYXRlKSB7XG4gICAgICByZWNvbW1lbmRhdGlvbnMucHVzaChgQ2FjaGUgaGl0IHJhdGUgKCR7KG1ldHJpY3MuY2FjaGVIaXRSYXRlLmN1cnJlbnQgKiAxMDApLnRvRml4ZWQoMSl9JSkgYmVsb3cgdGFyZ2V0ICgkeyh0aGlzLlBFUkZPUk1BTkNFX1RBUkdFVFMuY2FjaGVIaXRSYXRlICogMTAwKX0lKWApO1xuICAgIH1cbiAgICBcbiAgICBpZiAobWV0cmljcy5tZW1vcnlVc2FnZS5jdXJyZW50ID4gdGhpcy5QRVJGT1JNQU5DRV9UQVJHRVRTLm1lbW9yeVVzYWdlKSB7XG4gICAgICByZWNvbW1lbmRhdGlvbnMucHVzaChgTWVtb3J5IHVzYWdlICgke21ldHJpY3MubWVtb3J5VXNhZ2UuY3VycmVudH1NQikgZXhjZWVkcyB0YXJnZXQgKCR7dGhpcy5QRVJGT1JNQU5DRV9UQVJHRVRTLm1lbW9yeVVzYWdlfU1CKWApO1xuICAgIH1cbiAgICBcbiAgICBpZiAobWV0cmljcy5idW5kbGVTaXplLmN1cnJlbnQgPiB0aGlzLlBFUkZPUk1BTkNFX1RBUkdFVFMuYnVuZGxlU2l6ZSkge1xuICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goYEJ1bmRsZSBzaXplICgke21ldHJpY3MuYnVuZGxlU2l6ZS5jdXJyZW50fWtCKSBleGNlZWRzIHRhcmdldCAoJHt0aGlzLlBFUkZPUk1BTkNFX1RBUkdFVFMuYnVuZGxlU2l6ZX1rQilgKTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgIG1ldHJpY3MsXG4gICAgICBhbGVydHM6IFsuLi50aGlzLmFsZXJ0c10sXG4gICAgICByZWdyZXNzaW9uRGV0ZWN0ZWQsXG4gICAgICBvdmVyYWxsU2NvcmUsXG4gICAgICByZWNvbW1lbmRhdGlvbnNcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IGNvbnRpbnVvdXMgcGVyZm9ybWFuY2UgbW9uaXRvcmluZ1xuICAgKi9cbiAgc3RhcnRNb25pdG9yaW5nKGludGVydmFsTWludXRlczogbnVtYmVyID0gNSk6IHZvaWQge1xuICAgIGlmICh0aGlzLm1vbml0b3JpbmdJbnRlcnZhbCkge1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLm1vbml0b3JpbmdJbnRlcnZhbCk7XG4gICAgfVxuICAgIFxuICAgIGNvbnNvbGUubG9nKGDwn5OKIFN0YXJ0aW5nIHBlcmZvcm1hbmNlIG1vbml0b3JpbmcgKGV2ZXJ5ICR7aW50ZXJ2YWxNaW51dGVzfSBtaW51dGVzKWApO1xuICAgIFxuICAgIHRoaXMubW9uaXRvcmluZ0ludGVydmFsID0gc2V0SW50ZXJ2YWwoYXN5bmMgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgdGhpcy5nZXRQZXJmb3JtYW5jZU1ldHJpY3MoKTtcbiAgICAgICAgYXdhaXQgdGhpcy5kZXRlY3RQZXJmb3JtYW5jZVJlZ3Jlc3Npb24oKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUud2Fybihg4pqg77iPICBQZXJmb3JtYW5jZSBtb25pdG9yaW5nIGVycm9yOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgICB9XG4gICAgfSwgaW50ZXJ2YWxNaW51dGVzICogNjAgKiAxMDAwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9wIGNvbnRpbnVvdXMgcGVyZm9ybWFuY2UgbW9uaXRvcmluZ1xuICAgKi9cbiAgc3RvcE1vbml0b3JpbmcoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubW9uaXRvcmluZ0ludGVydmFsKSB7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMubW9uaXRvcmluZ0ludGVydmFsKTtcbiAgICAgIHRoaXMubW9uaXRvcmluZ0ludGVydmFsID0gbnVsbDtcbiAgICAgIGNvbnNvbGUubG9nKCfwn5OKIFBlcmZvcm1hbmNlIG1vbml0b3Jpbmcgc3RvcHBlZCcpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFeHBvcnQgcGVyZm9ybWFuY2UgZGF0YSBmb3IgYW5hbHlzaXNcbiAgICovXG4gIGFzeW5jIGV4cG9ydFBlcmZvcm1hbmNlRGF0YShmaWxlUGF0aDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlcG9ydCA9IGF3YWl0IHRoaXMuZ2VuZXJhdGVQZXJmb3JtYW5jZVJlcG9ydCgpO1xuICAgICAgY29uc3QgZXhwb3J0RGF0YSA9IHtcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIHJlcG9ydCxcbiAgICAgICAgaGlzdG9yeTogdGhpcy5wZXJmb3JtYW5jZUhpc3RvcnksXG4gICAgICAgIGFsZXJ0czogdGhpcy5hbGVydHMsXG4gICAgICAgIHRhcmdldHM6IHRoaXMuUEVSRk9STUFOQ0VfVEFSR0VUU1xuICAgICAgfTtcblxuICAgICAgZnMud3JpdGVGaWxlU3luYyhmaWxlUGF0aCwgSlNPTi5zdHJpbmdpZnkoZXhwb3J0RGF0YSwgbnVsbCwgMikpO1xuICAgICAgY29uc29sZS5sb2coYPCfk4ogUGVyZm9ybWFuY2UgZGF0YSBleHBvcnRlZCB0bzogJHtmaWxlUGF0aH1gKTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBleHBvcnQgcGVyZm9ybWFuY2UgZGF0YTogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgY3VycmVudCBhbGVydHNcbiAgICovXG4gIGdldEN1cnJlbnRBbGVydHMoKTogUGVyZm9ybWFuY2VBbGVydFtdIHtcbiAgICByZXR1cm4gWy4uLnRoaXMuYWxlcnRzXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciBhbGwgYWxlcnRzXG4gICAqL1xuICBjbGVhckFsZXJ0cygpOiB2b2lkIHtcbiAgICB0aGlzLmFsZXJ0cyA9IFtdO1xuICAgIGNvbnNvbGUubG9nKCfwn5OKIFBlcmZvcm1hbmNlIGFsZXJ0cyBjbGVhcmVkJyk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHBlcmZvcm1hbmNlIGhpc3RvcnlcbiAgICovXG4gIGdldFBlcmZvcm1hbmNlSGlzdG9yeSgpOiBQZXJmb3JtYW5jZU1ldHJpY3NbXSB7XG4gICAgcmV0dXJuIFsuLi50aGlzLnBlcmZvcm1hbmNlSGlzdG9yeV07XG4gIH1cbn0iXSwidmVyc2lvbiI6M30=