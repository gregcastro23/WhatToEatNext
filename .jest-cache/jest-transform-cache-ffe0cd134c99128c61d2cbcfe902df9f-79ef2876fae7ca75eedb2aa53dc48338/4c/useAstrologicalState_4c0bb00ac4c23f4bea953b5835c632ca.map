{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/hooks/useAstrologicalState.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/hooks/useAstrologicalState.ts"],"sourcesContent":["import { useState, useEffect, useMemo, useCallback } from 'react';\nimport { AstrologicalService } from '@/services/AstrologicalService';\nimport { LunarPhase } from '@/constants/planetaryFoodAssociations';\nimport { \n  calculatePlanetaryPositions, \n  calculateSunSign, \n  calculateLunarPhase, \n  calculateMoonSign, \n  longitudeToZodiacPosition, \n  getLunarPhaseName,\n  calculateAspects\n} from '@/utils/astrologyUtils';\nimport { useAlchemical } from '@/contexts/AlchemicalContext/hooks';\nimport { PlanetaryHourCalculator } from '@/lib/PlanetaryHourCalculator';\nimport { logger } from '@/utils/logger';\nimport {\n  CelestialPosition,\n  AstrologicalState\n} from '@/types/celestial';\nimport { ZodiacSign, PlanetaryAlignment } from '@/types/common';\n\n// Interface for hook return value\nexport interface AstrologyHookData {\n  currentZodiac: ZodiacSign;\n  currentPlanetaryAlignment: PlanetaryAlignment;\n  lunarPhase: LunarPhase;\n  activePlanets: string[];\n  domElements: { Fire: number; Water: number; Earth: number; Air: number };\n  loading: boolean;\n  isReady: boolean;\n  isDaytime: boolean;\n  renderCount: number;\n  currentPlanetaryHour: string | null;\n}\n\n// Helper function to create a celestial position with defaults\nfunction _createCelestialPosition(sign: ZodiacSign, longOffset = 0, options?: { planetName?: string }): CelestialPosition {\n  // Calculate a reasonable longitude based on the zodiac sign\n  const signIndex = [\n    'aries', 'taurus', 'gemini', 'cancer', \n    'leo', 'virgo', 'libra', 'scorpio',\n    'sagittarius', 'capricorn', 'aquarius', 'pisces'\n  ].indexOf(sign);\n  \n  const baseLongitude = signIndex * 30 + longOffset;\n  \n  // Determine default speed based on planet traits\n  // Moon moves fastest, inner planets medium, outer planets slow\n  const getPlanetSpeed = (planetName?: string): number => {\n    if (!planetName) return 0.5; // Default\n    \n    const planetSpeeds: Record<string, number> = {\n      moon: 13.2,\n      sun: 1.0,\n      mercury: 1.4,\n      venus: 1.2,\n      mars: 0.5,\n      jupiter: 0.1,\n      saturn: 0.03,\n      uranus: 0.01,\n      neptune: 0.005,\n      pluto: 0.002\n    };\n    \n    return planetSpeeds[planetName.toLowerCase()] || 0.5;\n  };\n  \n  return {\n    sign,\n    degree: Math.floor(longOffset),\n    exactLongitude: baseLongitude,\n    isRetrograde: false,\n    minutes: Math.floor((longOffset % 1) * 60),\n    speed: getPlanetSpeed(options?.planetName)\n  };\n}\n\nexport function useAstrologicalState(): AstrologyHookData {\n  const { planetaryPositions, isDaytime } = useAlchemical();\n  const [isReady, setIsReady] = useState<boolean>(false);\n  const [renderCount, setRenderCount] = useState<number>(0);\n  \n  // Track renders for debugging - add empty dependency array to run only once\n  useEffect(() => {\n    // We don't want to increment renderCount in every render cycle\n    if (renderCount === 0) {\n      setRenderCount(1);\n      logger.debug(`Hook initialized`);\n    }\n  }, []); // Empty dependency array means this runs only once\n  \n  // Initial state\n  const [astroState, setAstroState] = useState<{\n    currentZodiac: string;\n    currentPlanetaryAlignment: Record<string, CelestialPosition>;\n    lunarPhase: LunarPhase;\n    activePlanets: string[];\n    domElements: { Fire: number; Water: number; Earth: number; Air: number };\n    loading: boolean;\n  }>({\n    currentZodiac: '',\n    currentPlanetaryAlignment: {},\n    lunarPhase: 'waxing crescent' as LunarPhase, // More reasonable default based on current actual phase\n    activePlanets: [] as string[],\n    domElements: { Fire: 0, Water: 0, Earth: 0, Air: 0 },\n    loading: true\n  });\n  \n  // Calculate active planets based on their positions and dignities\n  const getActivePlanets = useCallback((positions: Record<string, { sign?: string; degree?: number; exactLongitude?: number }>): string[] => {\n    if (!positions || typeof positions !== 'object') {\n      logger.warn('Invalid planetary positions for calculating active planets');\n      return [];\n    }\n    \n    // List of planets we want to check\n    const planetKeys = ['sun', 'moon', 'mercury', 'venus', 'mars', 'jupiter', 'saturn', 'uranus', 'neptune', 'pluto'];\n    const activePlanets: string[] = [];\n    \n    try {\n      // Add ruling planet of current sun sign\n      const sunSign = positions.sun?.sign?.toLowerCase();\n      if (sunSign) {\n        // Map signs to their ruling planets\n        const signRulers: Record<string, string> = {\n          'aries': 'mars',\n          'taurus': 'venus',\n          'gemini': 'mercury',\n          'cancer': 'moon',\n          'leo': 'sun',\n          'virgo': 'mercury',\n          'libra': 'venus',\n          'scorpio': 'mars',\n          'sagittarius': 'jupiter',\n          'capricorn': 'saturn',\n          'aquarius': 'saturn', // Traditional ruler\n          'pisces': 'jupiter'  // Traditional ruler\n        };\n        \n        // Add the ruler of the current sun sign\n        if (signRulers[sunSign] && !activePlanets.includes(signRulers[sunSign])) {\n          activePlanets.push(signRulers[sunSign]);\n        }\n      }\n      \n      Object.entries(positions).forEach(([planet, position]) => {\n        if (!planetKeys.includes(planet.toLowerCase()) || !position || !position.sign) {\n          return;\n        }\n        \n        const planetLower = planet.toLowerCase();\n        const signLower = position.sign.toLowerCase();\n        \n        // Simple planet-sign dignity mapping\n        const dignities: Record<string, string[]> = {\n          sun: ['leo', 'aries'],\n          moon: ['cancer', 'taurus'],\n          mercury: ['gemini', 'virgo'],\n          venus: ['taurus', 'libra', 'pisces'],\n          mars: ['aries', 'scorpio', 'capricorn'],\n          jupiter: ['sagittarius', 'pisces', 'cancer'],\n          saturn: ['capricorn', 'aquarius', 'libra'],\n          uranus: ['aquarius', 'scorpio'],\n          neptune: ['pisces', 'cancer'],\n          pluto: ['scorpio', 'leo']\n        };\n        \n        // Check if planet is in a powerful sign position\n        if (dignities[planetLower]?.includes(signLower)) {\n          activePlanets.push(planetLower);\n        }\n        \n        // Add special rulerships based on degree\n        const degree = position.degree || 0;\n        if (degree >= 0 && degree <= 15) {\n          // Planets in early degrees are more powerful\n          if (!activePlanets.includes(planetLower)) {\n            activePlanets.push(planetLower);\n          }\n        }\n      });\n    } catch (error) {\n      logger.error('Error calculating active planets', error);\n    }\n    \n    // Ensure uniqueness\n    return [...new Set(activePlanets)];\n  }, []);\n  \n  // Memoize key values to prevent unnecessary updates\n  const memoizedPlanetaryPositions = useMemo(() => {\n    return planetaryPositions;\n  }, [JSON.stringify(planetaryPositions)]);\n  \n  // Track changes to planetary positions and update state\n  useEffect(() => {\n    try {\n      if (Object.keys(memoizedPlanetaryPositions).length > 0) {\n        const activePlanets = getActivePlanets(memoizedPlanetaryPositions);\n        const currentZodiac = ((memoizedPlanetaryPositions.sun as any)?.sign || '').toLowerCase();\n        \n        logger.debug('Updating astrological state:', {\n          currentZodiac,\n          activePlanets,\n          time: new Date().toISOString()\n        });\n        \n        setAstroState(prev => {\n          // Skip update if nothing changed to prevent unnecessary re-renders\n          if (\n            prev.currentZodiac === currentZodiac &&\n            JSON.stringify(prev.activePlanets) === JSON.stringify(activePlanets) &&\n            JSON.stringify(prev.currentPlanetaryAlignment) === JSON.stringify(memoizedPlanetaryPositions)\n          ) {\n            logger.debug('Skipping astro state update as nothing changed');\n            return prev;\n          }\n          \n          return {\n            ...prev,\n            currentZodiac,\n            currentPlanetaryAlignment: memoizedPlanetaryPositions,\n            activePlanets,\n            loading: false\n          };\n        });\n        setIsReady(true);\n      }\n    } catch (error) {\n      logger.error('Failed to update astrological state', error);\n    }\n  }, [memoizedPlanetaryPositions, getActivePlanets]);\n  \n  // Memoize the current planetary alignment to prevent unnecessary recalculations\n  const currentPlanetaryAlignment = useMemo(() => {\n    return astroState.currentPlanetaryAlignment;\n  }, [astroState.currentPlanetaryAlignment]);\n  \n  const [currentPlanetaryHour, setCurrentPlanetaryHour] = useState<string | null>(null);\n\n  useEffect(() => {\n    try {\n      const calculator = new PlanetaryHourCalculator();\n      const hourInfo = calculator.getCurrentPlanetaryHour();\n      setCurrentPlanetaryHour(hourInfo.planet);\n      \n      // Add a refresh interval if needed\n      const intervalId = setInterval(() => {\n        const hourInfo = calculator.getCurrentPlanetaryHour();\n        setCurrentPlanetaryHour(hourInfo.planet);\n      }, 60000); // Update every minute\n      \n      return () => clearInterval(intervalId);\n    } catch (error) {\n      logger.error('Failed to calculate planetary hour', error);\n      setCurrentPlanetaryHour(null);\n      return () => {\n        // Intentionally empty - no cleanup needed in error case\n      };\n    }\n  }, []);\n  \n  // Return the astro state with isReady flag\n  return {\n    ...astroState,\n    isReady,\n    isDaytime: isDaytime as boolean,\n    renderCount,\n    currentPlanetaryHour: currentPlanetaryHour || 'sun',\n    currentZodiac: (astroState.currentZodiac || 'aries') as ZodiacSign,\n    currentPlanetaryAlignment: astroState.currentPlanetaryAlignment as unknown as PlanetaryAlignment,\n    lunarPhase: astroState.lunarPhase as LunarPhase\n  } as AstrologyHookData;\n} "],"version":3}