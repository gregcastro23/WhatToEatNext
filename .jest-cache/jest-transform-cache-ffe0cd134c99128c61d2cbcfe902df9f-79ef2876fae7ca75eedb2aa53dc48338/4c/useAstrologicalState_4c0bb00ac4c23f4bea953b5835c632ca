ccc25668b9b0c535d1f34bc7616b3558
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAstrologicalState = void 0;
const react_1 = require("react");
const hooks_1 = require("@/contexts/AlchemicalContext/hooks");
const PlanetaryHourCalculator_1 = require("@/lib/PlanetaryHourCalculator");
const logger_1 = require("@/utils/logger");
// Helper function to create a celestial position with defaults
function _createCelestialPosition(sign, longOffset = 0, options) {
    // Calculate a reasonable longitude based on the zodiac sign
    const signIndex = [
        'aries', 'taurus', 'gemini', 'cancer',
        'leo', 'virgo', 'libra', 'scorpio',
        'sagittarius', 'capricorn', 'aquarius', 'pisces'
    ].indexOf(sign);
    const baseLongitude = signIndex * 30 + longOffset;
    // Determine default speed based on planet traits
    // Moon moves fastest, inner planets medium, outer planets slow
    const getPlanetSpeed = (planetName) => {
        if (!planetName)
            return 0.5; // Default
        const planetSpeeds = {
            moon: 13.2,
            sun: 1.0,
            mercury: 1.4,
            venus: 1.2,
            mars: 0.5,
            jupiter: 0.1,
            saturn: 0.03,
            uranus: 0.01,
            neptune: 0.005,
            pluto: 0.002
        };
        return planetSpeeds[planetName.toLowerCase()] || 0.5;
    };
    return {
        sign,
        degree: Math.floor(longOffset),
        exactLongitude: baseLongitude,
        isRetrograde: false,
        minutes: Math.floor((longOffset % 1) * 60),
        speed: getPlanetSpeed(options === null || options === void 0 ? void 0 : options.planetName)
    };
}
function useAstrologicalState() {
    const { planetaryPositions, isDaytime } = (0, hooks_1.useAlchemical)();
    const [isReady, setIsReady] = (0, react_1.useState)(false);
    const [renderCount, setRenderCount] = (0, react_1.useState)(0);
    // Track renders for debugging - add empty dependency array to run only once
    (0, react_1.useEffect)(() => {
        // We don't want to increment renderCount in every render cycle
        if (renderCount === 0) {
            setRenderCount(1);
            logger_1.logger.debug(`Hook initialized`);
        }
    }, []); // Empty dependency array means this runs only once
    // Initial state
    const [astroState, setAstroState] = (0, react_1.useState)({
        currentZodiac: '',
        currentPlanetaryAlignment: {},
        lunarPhase: 'waxing crescent',
        activePlanets: [],
        domElements: { Fire: 0, Water: 0, Earth: 0, Air: 0 },
        loading: true
    });
    // Calculate active planets based on their positions and dignities
    const getActivePlanets = (0, react_1.useCallback)((positions) => {
        var _a, _b;
        if (!positions || typeof positions !== 'object') {
            logger_1.logger.warn('Invalid planetary positions for calculating active planets');
            return [];
        }
        // List of planets we want to check
        const planetKeys = ['sun', 'moon', 'mercury', 'venus', 'mars', 'jupiter', 'saturn', 'uranus', 'neptune', 'pluto'];
        const activePlanets = [];
        try {
            // Add ruling planet of current sun sign
            const sunSign = (_b = (_a = positions.sun) === null || _a === void 0 ? void 0 : _a.sign) === null || _b === void 0 ? void 0 : _b.toLowerCase();
            if (sunSign) {
                // Map signs to their ruling planets
                const signRulers = {
                    'aries': 'mars',
                    'taurus': 'venus',
                    'gemini': 'mercury',
                    'cancer': 'moon',
                    'leo': 'sun',
                    'virgo': 'mercury',
                    'libra': 'venus',
                    'scorpio': 'mars',
                    'sagittarius': 'jupiter',
                    'capricorn': 'saturn',
                    'aquarius': 'saturn',
                    'pisces': 'jupiter' // Traditional ruler
                };
                // Add the ruler of the current sun sign
                if (signRulers[sunSign] && !activePlanets.includes(signRulers[sunSign])) {
                    activePlanets.push(signRulers[sunSign]);
                }
            }
            Object.entries(positions).forEach(([planet, position]) => {
                var _a;
                if (!planetKeys.includes(planet.toLowerCase()) || !position || !position.sign) {
                    return;
                }
                const planetLower = planet.toLowerCase();
                const signLower = position.sign.toLowerCase();
                // Simple planet-sign dignity mapping
                const dignities = {
                    sun: ['leo', 'aries'],
                    moon: ['cancer', 'taurus'],
                    mercury: ['gemini', 'virgo'],
                    venus: ['taurus', 'libra', 'pisces'],
                    mars: ['aries', 'scorpio', 'capricorn'],
                    jupiter: ['sagittarius', 'pisces', 'cancer'],
                    saturn: ['capricorn', 'aquarius', 'libra'],
                    uranus: ['aquarius', 'scorpio'],
                    neptune: ['pisces', 'cancer'],
                    pluto: ['scorpio', 'leo']
                };
                // Check if planet is in a powerful sign position
                if ((_a = dignities[planetLower]) === null || _a === void 0 ? void 0 : _a.includes(signLower)) {
                    activePlanets.push(planetLower);
                }
                // Add special rulerships based on degree
                const degree = position.degree || 0;
                if (degree >= 0 && degree <= 15) {
                    // Planets in early degrees are more powerful
                    if (!activePlanets.includes(planetLower)) {
                        activePlanets.push(planetLower);
                    }
                }
            });
        }
        catch (error) {
            logger_1.logger.error('Error calculating active planets', error);
        }
        // Ensure uniqueness
        return [...new Set(activePlanets)];
    }, []);
    // Memoize key values to prevent unnecessary updates
    const memoizedPlanetaryPositions = (0, react_1.useMemo)(() => {
        return planetaryPositions;
    }, [JSON.stringify(planetaryPositions)]);
    // Track changes to planetary positions and update state
    (0, react_1.useEffect)(() => {
        var _a;
        try {
            if (Object.keys(memoizedPlanetaryPositions).length > 0) {
                const activePlanets = getActivePlanets(memoizedPlanetaryPositions);
                const currentZodiac = (((_a = memoizedPlanetaryPositions.sun) === null || _a === void 0 ? void 0 : _a.sign) || '').toLowerCase();
                logger_1.logger.debug('Updating astrological state:', {
                    currentZodiac,
                    activePlanets,
                    time: new Date().toISOString()
                });
                setAstroState(prev => {
                    // Skip update if nothing changed to prevent unnecessary re-renders
                    if (prev.currentZodiac === currentZodiac &&
                        JSON.stringify(prev.activePlanets) === JSON.stringify(activePlanets) &&
                        JSON.stringify(prev.currentPlanetaryAlignment) === JSON.stringify(memoizedPlanetaryPositions)) {
                        logger_1.logger.debug('Skipping astro state update as nothing changed');
                        return prev;
                    }
                    return {
                        ...prev,
                        currentZodiac,
                        currentPlanetaryAlignment: memoizedPlanetaryPositions,
                        activePlanets,
                        loading: false
                    };
                });
                setIsReady(true);
            }
        }
        catch (error) {
            logger_1.logger.error('Failed to update astrological state', error);
        }
    }, [memoizedPlanetaryPositions, getActivePlanets]);
    // Memoize the current planetary alignment to prevent unnecessary recalculations
    const currentPlanetaryAlignment = (0, react_1.useMemo)(() => {
        return astroState.currentPlanetaryAlignment;
    }, [astroState.currentPlanetaryAlignment]);
    const [currentPlanetaryHour, setCurrentPlanetaryHour] = (0, react_1.useState)(null);
    (0, react_1.useEffect)(() => {
        try {
            const calculator = new PlanetaryHourCalculator_1.PlanetaryHourCalculator();
            const hourInfo = calculator.getCurrentPlanetaryHour();
            setCurrentPlanetaryHour(hourInfo.planet);
            // Add a refresh interval if needed
            const intervalId = setInterval(() => {
                const hourInfo = calculator.getCurrentPlanetaryHour();
                setCurrentPlanetaryHour(hourInfo.planet);
            }, 60000); // Update every minute
            return () => clearInterval(intervalId);
        }
        catch (error) {
            logger_1.logger.error('Failed to calculate planetary hour', error);
            setCurrentPlanetaryHour(null);
            return () => {
                // Intentionally empty - no cleanup needed in error case
            };
        }
    }, []);
    // Return the astro state with isReady flag
    return {
        ...astroState,
        isReady,
        isDaytime: isDaytime,
        renderCount,
        currentPlanetaryHour: currentPlanetaryHour || 'sun',
        currentZodiac: (astroState.currentZodiac || 'aries'),
        currentPlanetaryAlignment: astroState.currentPlanetaryAlignment,
        lunarPhase: astroState.lunarPhase
    };
}
exports.useAstrologicalState = useAstrologicalState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,