{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/ElementalCalculator.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/ElementalCalculator.ts"],"sourcesContent":["import {\n  ElementalProperties,\n  Recipe,\n  Season,\n  Element,\n  Ingredient,\n  ZodiacSign,\n  AstrologicalState,\n} from '../types/alchemy';\nimport { normalizeProperties } from '../utils/elementalUtils';\nimport { DEFAULT_ELEMENTAL_PROPERTIES } from '../constants/elementalConstants';\nimport { createLogger } from '@/utils/logger';\nimport { planetInfo, signInfo } from '../data/astrology';\nimport { getLatestAstrologicalState } from '@/services/AstrologicalService';\n\ninterface ElementalSummary {\n  totalFire: number;\n  totalWater: number;\n  totalEarth: number;\n  totalAir: number;\n  dominantElement: keyof ElementalProperties;\n}\n\nconst logger = createLogger('ElementalCalculator');\n\nexport class ElementalCalculator {\n  private static instance: ElementalCalculator;\n  private currentBalance: ElementalProperties = DEFAULT_ELEMENTAL_PROPERTIES;\n  private initialized = false;\n  private debugMode: boolean;\n\n  public constructor(debugMode = false) {\n    this.debugMode = debugMode;\n    \n    if (this.debugMode) {\n      console.log(\"[ElementalCalculator] Instance created with debug mode\");\n    }\n  }\n\n  /**\n   * Get the singleton instance\n   */\n  static getInstance(): ElementalCalculator {\n    if (!ElementalCalculator.instance) {\n      ElementalCalculator.instance = new ElementalCalculator();\n    }\n    return ElementalCalculator.instance;\n  }\n\n  /**\n   * Create a new instance (helper method for when singleton is not needed)\n   */\n  static createInstance(debugMode = false): ElementalCalculator {\n    return new ElementalCalculator(debugMode);\n  }\n\n  static initialize(initialState?: ElementalProperties): void {\n    const instance = ElementalCalculator.getInstance();\n    instance.currentBalance = initialState || {\n      ...DEFAULT_ELEMENTAL_PROPERTIES,\n    };\n    instance.initialized = true;\n    logger.debug(\n      'ElementalCalculator initialized with',\n      instance.currentBalance\n    );\n  }\n\n  static updateElementalState(newState: ElementalProperties): void {\n    const instance = ElementalCalculator.getInstance();\n    instance.currentBalance = { ...newState };\n    logger.debug('ElementalCalculator state updated', instance.currentBalance);\n  }\n\n  static getCurrentElementalState(): ElementalProperties {\n    const instance = ElementalCalculator.getInstance();\n    if (!instance.initialized) {\n      // Only use direct initialization without the dynamic import of useAlchemical\n      // which causes \"Invalid hook call\" errors in tests\n      ElementalCalculator.initialize();\n\n      // In a browser, the AlchemicalContext provider will call updateElementalState\n      // so we don't need to worry about initializing with the correct state here\n    }\n    return instance.currentBalance;\n  }\n\n  static calculateMatchScore(\n    item: Recipe | { elementalProperties: ElementalProperties | undefined }\n  ): number {\n    if (!item.elementalProperties) {\n      return 0;\n    }\n\n    const currentBalance = ElementalCalculator.getCurrentElementalState();\n\n    // Use the more robust weighted calculation instead of simplified approach\n    let matchScore = 0;\n    let totalWeight = 0;\n\n    Object.entries(currentBalance).forEach(([element, value]) => {\n      const elementKey = element as keyof ElementalProperties;\n      // Use optional chaining with nullish coalescing to handle undefined values\n      const itemValue =\n        (item.elementalProperties && item.elementalProperties[elementKey]) || 0;\n\n      // Calculate weighted difference (more important elements get higher weight)\n      const weight = value * 2; // Emphasize elements that are strong in current state\n      matchScore += (1 - Math.abs(value - itemValue)) * weight;\n      totalWeight += weight;\n    });\n\n    // Normalize to 0-100 range\n    return Math.round(totalWeight > 0 ? (matchScore /totalWeight) * 100 : 50);\n  }\n\n  static getSeasonalModifiers(season: Season): ElementalProperties {\n    // Start with a balanced base\n    const baseModifiers: ElementalProperties = {\n      Fire: 0.25,\n      Water: 0.25,\n      Earth: 0.25,\n      Air: 0.25,\n    };\n\n    // Normalize season to lowercase for consistency with type definition\n    const seasonLower = season.toLowerCase() as Season;\n\n    switch (seasonLower) {\n      case 'spring':\n        baseModifiers.Air = 0.4;\n        baseModifiers.Fire = 0.3;\n        baseModifiers.Water = 0.2;\n        baseModifiers.Earth = 0.1;\n        break;\n      case 'summer':\n        baseModifiers.Fire = 0.4;\n        baseModifiers.Air = 0.3;\n        baseModifiers.Earth = 0.2;\n        baseModifiers.Water = 0.1;\n        break;\n      case 'autumn':\n      case 'fall':\n        baseModifiers.Earth = 0.4;\n        baseModifiers.Air = 0.3;\n        baseModifiers.Water = 0.2;\n        baseModifiers.Fire = 0.1;\n        break;\n      case 'winter':\n        baseModifiers.Water = 0.4;\n        baseModifiers.Earth = 0.3;\n        baseModifiers.Fire = 0.2;\n        baseModifiers.Air = 0.1;\n        break;\n      case 'all':\n        // Balanced for 'all' season\n        baseModifiers.Fire = 0.25;\n        baseModifiers.Water = 0.25;\n        baseModifiers.Earth = 0.25;\n        baseModifiers.Air = 0.25;\n        break;\n      default:\n        // Balanced for unknown seasons\n        baseModifiers.Fire = 0.25;\n        baseModifiers.Water = 0.25;\n        baseModifiers.Earth = 0.25;\n        baseModifiers.Air = 0.25;\n    }\n\n    return baseModifiers;\n  }\n\n  calculateElementalState(positions: unknown): {\n    Fire: number;\n    Water: number;\n    Earth: number;\n    Air: number;\n  } {\n    if (this.debugMode) {\n      console.log(\"[ElementalCalculator] Calculating elemental state from: \", positions);\n    }\n\n    // Initialize elemental values\n    const elementalValues: ElementalProperties = {\n      Fire: 0,\n      Water: 0,\n      Earth: 0,\n      Air: 0,\n    };\n\n    // Handle empty or invalid positions\n    if (!positions || typeof positions !== 'object') {\n      if (this.debugMode) {\n        console.log(\"[ElementalCalculator] No elemental data calculated, returning default values\");\n      }\n      return { ...DEFAULT_ELEMENTAL_PROPERTIES };\n    }\n\n    // Try to extract planet positions directly if they exist\n    try {\n      if (this.debugMode) {\n        console.log(\"[ElementalCalculator] Trying to extract planets from general structure\");\n      }\n\n      // Handle different API response formats\n      const hasPlanets = 'planets' in positions;\n      const hasCelestialBodies = 'CelestialBodies' in positions;\n      const hasTropical = 'tropical' in positions;\n\n      // Process planets if available in various formats\n      if (hasPlanets) {\n        // Direct planets object\n        this.processPlanetsObject(positions.planets, elementalValues);\n      } else if (hasCelestialBodies) {\n        // Celestial bodies from API\n        this.processCelestialBodies(positions.CelestialBodies, elementalValues);\n      } else if (hasTropical && positions.tropical?.CelestialBodies) {\n        // Nested within tropical\n        this.processCelestialBodies(positions.tropical.CelestialBodies, elementalValues);\n      } else {\n        // Try to process as generic structure\n        this.processPlanetKeys(positions, elementalValues);\n      }\n\n      // Normalize values\n      const total = Object.values(elementalValues).reduce((sum, val) => sum + val, 0);\n      if (total > 0) {\n        Object.keys(elementalValues).forEach((element) => {\n          const elementKey = element as keyof ElementalProperties;\n          elementalValues[elementKey] = elementalValues[elementKey] /total;\n        });\n      } else {\n        // Return default values if we couldn't calculate anything\n        if (this.debugMode) {\n          console.log(\"[ElementalCalculator] No elemental data calculated, returning default values\");\n        }\n        return { ...DEFAULT_ELEMENTAL_PROPERTIES };\n      }\n\n      return elementalValues;\n    } catch (error) {\n      console.error(\"[ElementalCalculator] Error calculating elemental state:\", error);\n      return { ...DEFAULT_ELEMENTAL_PROPERTIES };\n    }\n  }\n\n  // Fix method naming conflict - rename the second implementation to avoid duplicate method name\n  calculatePlanetaryElementalState(positions: unknown): ElementalProperties {\n    return this.calculateElementalState(positions);\n  }\n\n  // Add methods to process different types of planetary position data\n  private processPlanetsObject(planets: Planet, elementalValues: ElementalProperties): void {\n    if (!planets) return;\n    \n    // Handle both array and object formats of planets\n    if (Array.isArray(planets)) {\n      planets.forEach(planet => {\n        if (planet) this.processPlanetData(planet, elementalValues);\n      });\n    } else if (typeof planets === 'object') {\n      // Process object format where keys are planet names\n      Object.entries(planets).forEach(([name, data]) => {\n        if (data) {\n          const planetData = { ...data as Record<string, unknown>, name, label: name };\n          this.processPlanetData(planetData, elementalValues);\n        }\n      });\n    }\n  }\n\n  private processCelestialBodies(bodies: unknown, elementalValues: ElementalProperties): void {\n    if (!bodies) return;\n    \n    // Handle CelestialBodies format from API\n    if (Array.isArray(bodies.all)) {\n      bodies.all.forEach((body: unknown) => {\n        if (body) this.processPlanetData(body, elementalValues);\n      });\n    } else {\n      // Handle individual planet objects\n      const planetNames = ['sun', 'moon', 'mercury', 'venus', 'mars', 'jupiter', \n                          'saturn', 'uranus', 'neptune', 'pluto'];\n      \n      planetNames.forEach(planetName => {\n        if (bodies[planetName]) {\n          const planet = bodies[planetName];\n          // Add name and label if not present\n          const enhancedPlanet = {\n            ...planet,\n            name: planetName,\n            label: planetName\n          };\n          this.processPlanetData(enhancedPlanet, elementalValues);\n        }\n      });\n\n      // Process ascendant if available\n      if (bodies.ascendant || bodies.Ascendant) {\n        const ascendant = bodies.ascendant || bodies.Ascendant;\n        this.processAscendantData(ascendant, elementalValues);\n      }\n    }\n  }\n\n  private processPlanetKeys(data: Record<string, unknown>, elementalValues: ElementalProperties): void {\n    if (!data) return;\n    \n    // Try to find planets in a generic object structure\n    const planetNames = ['Sun', 'Moon', 'Mercury', 'Venus', 'Mars', 'Jupiter', \n                        'Saturn', 'Uranus', 'Neptune', 'Pluto'];\n    \n    // Look for objects that might represent planets\n    this.findPlanetsRecursively(data, planetNames, elementalValues);\n    \n    // Also look for ascendant\n    if (data.Ascendant || data.ascendant) {\n      this.processAscendantData(data.Ascendant || data.ascendant, elementalValues);\n    }\n  }\n\n  private findPlanetsRecursively(obj: unknown, planetNames: string[], elementalValues: ElementalProperties, depth = 0): void {\n    if (!obj || typeof obj !== 'object' || depth > 5) return; // Limit recursion depth\n    \n    // Check if this object looks like a planet\n    if (this.objectLooksPlanetLike(obj, planetNames)) {\n      this.processPlanetData(obj, elementalValues);\n      return;\n    }\n    \n    // Search through all properties\n    for (const key in obj) {\n      if (obj[key] && typeof obj[key] === 'object') {\n        // If key name matches a planet, augment with that name\n        const isPlanetKey = planetNames.find(p => \n          p.toLowerCase() === key.toLowerCase()\n        );\n        \n        if (isPlanetKey && obj[key]) {\n          // Add planet name to object if not already present\n          const planetObj = {\n            ...obj[key],\n            name: isPlanetKey,\n            label: isPlanetKey\n          };\n          this.processPlanetData(planetObj, elementalValues);\n        } else {\n          this.findPlanetsRecursively(obj[key], planetNames, elementalValues, depth + 1);\n        }\n      }\n    }\n  }\n\n  private objectLooksPlanetLike(obj: unknown, planetNames: string[]): boolean {\n    // Check for typical planet properties\n    if (!obj) return false;\n    \n    // Has sign property directly\n    if (obj.sign || obj.Sign) return true;\n    \n    // Has a name or label that matches a planet name\n    if (obj.name && planetNames.includes(obj.name)) return true;\n    if (obj.label && planetNames.includes(obj.label)) return true;\n    \n    return false;\n  }\n\n  private processPlanetData(planet: Planet, elementalValues: ElementalProperties): void {\n    if (!planet) return;\n    \n    try {\n      // Extract planet info\n      const planetName = planet.name || planet.label || planet.planet || '';\n      const sign = planet.Sign?.label || planet.sign || '';\n      \n      if (!planetName || !sign) return;\n      \n      // Get element from sign\n      const signElement = this.getSignElement(sign);\n      if (signElement) {\n        // Weight by planet importance\n        const weight = this.getPlanetWeight(planetName);\n        \n        // Add to appropriate element\n        switch (signElement) {\n          case 'Fire': elementalValues.Fire += weight; break;\n          case 'Water': elementalValues.Water += weight; break;\n          case 'Earth': elementalValues.Earth += weight; break;\n          case 'Air': elementalValues.Air += weight; break;\n        }\n      }\n    } catch (error) {\n      console.error(\"[ElementalCalculator] Error processing planet data:\", error);\n    }\n  }\n\n  private processAscendantData(ascendant: unknown, elementalValues: ElementalProperties): void {\n    try {\n      const ascendantSign = typeof ascendant === 'string' \n        ? ascendant \n        : ascendant?.Sign?.label || ascendant.sign || '';\n      \n      if (ascendantSign) {\n        const ascendantElement = this.getSignElement(ascendantSign);\n        if (ascendantElement) {\n          const weight = 0.75; // Ascendant has significant influence\n          \n          switch (ascendantElement) {\n            case 'Fire': elementalValues.Fire += weight; break;\n            case 'Water': elementalValues.Water += weight; break;\n            case 'Earth': elementalValues.Earth += weight; break;\n            case 'Air': elementalValues.Air += weight; break;\n          }\n        }\n      }\n    } catch (error) {\n      console.error(\"[ElementalCalculator] Error processing ascendant data:\", error);\n    }\n  }\n\n  /**\n   * Get the elemental association of a zodiac sign\n   */\n  private getSignElement(sign: string): string | null {\n    const lowerSign = sign.toLowerCase();\n    \n    // Fire signs\n    if (lowerSign.includes('aries') || lowerSign.includes('leo') || lowerSign.includes('sagittarius')) {\n      return 'Fire';\n    }\n    \n    // Water signs\n    if (lowerSign.includes('cancer') || lowerSign.includes('scorpio') || lowerSign.includes('pisces')) {\n      return 'Water';\n    }\n    \n    // Earth signs\n    if (lowerSign.includes('taurus') || lowerSign.includes('virgo') || lowerSign.includes('capricorn')) {\n      return 'Earth';\n    }\n    \n    // Air signs\n    if (lowerSign.includes('gemini') || lowerSign.includes('libra') || lowerSign.includes('aquarius')) {\n      return 'Air';\n    }\n    \n    console.warn(`[ElementalCalculator] Unknown sign: ${sign}`);\n    return null;\n  }\n  \n  /**\n   * Get the weight of planetary influence\n   */\n  private getPlanetWeight(planet: string): number {\n    const lowerPlanet = planet.toLowerCase();\n    \n    // Luminaries have strongest influence\n    if (lowerPlanet.includes('sun') || lowerPlanet.includes('moon')) {\n      return 1.0;\n    }\n    \n    // Personal planets have significant influence\n    if (\n      lowerPlanet.includes('mercury') || \n      lowerPlanet.includes('venus') || \n      lowerPlanet.includes('mars')\n    ) {\n      return 0.8;\n    }\n    \n    // Social planets have moderate influence\n    if (lowerPlanet.includes('jupiter') || lowerPlanet.includes('saturn')) {\n      return 0.6;\n    }\n    \n    // Outer planets have subtle influence\n    if (\n      lowerPlanet.includes('uranus') || \n      lowerPlanet.includes('neptune') || \n      lowerPlanet.includes('pluto')\n    ) {\n      return 0.4;\n    }\n    \n    // Default weight for unknown planets\n    return 0.3;\n  }\n\n  private static validateElementalProperties(\n    properties: ElementalProperties\n  ): boolean {\n    if (!properties) return false;\n\n    const requiredElements = ['Fire', 'Water', 'Earth', 'Air'];\n    const hasAllElements = requiredElements.every(\n      (element) =>\n        typeof properties[element as keyof ElementalProperties] === 'number'\n    );\n\n    if (!hasAllElements) return false;\n\n    const sum = Object.values(properties).reduce((acc, val) => acc + val, 0);\n    return Math.abs(sum - 1) < 0.01;\n  }\n\n  public static calculateIngredientMatch(ingredient: unknown): number {\n    // Apply surgical type casting with variable extraction\n    const ingredientData = ingredient as Record<string, unknown>;\n    const elementalProperties = ingredientData?.elementalProperties;\n    \n    // If the ingredient has elementalProperties, use those\n    if (elementalProperties) {\n      const currentState = this.getCurrentElementalState();\n\n      // Calculate similarity between ingredient's elemental properties and current state\n      let matchScore = 0;\n      let totalWeight = 0;\n\n      Object.entries(currentState).forEach(([element, value]) => {\n        const elementKey = element as keyof ElementalProperties;\n        const ingredientValue = elementalProperties[elementKey] || 0;\n\n        // Calculate weighted difference (more important elements get higher weight)\n        const weight = value * 2; // Emphasize elements that are strong in current state\n        matchScore += (1 - Math.abs(value - ingredientValue)) * weight;\n        totalWeight += weight;\n      });\n\n      // Normalize score to 0-100 range\n      return totalWeight > 0 ? (matchScore /totalWeight) * 100 : 50;\n    }\n\n    // Default score if no elemental properties\n    return 50;\n  }\n\n  public static calculateElementalBalance(\n    elementalProperties: ElementalProperties\n  ): number {\n    // Use actual current elemental state for comparison\n    const currentState = this.getCurrentElementalState();\n\n    // Calculate similarity between ingredient and current state\n    let totalSimilarity = 0;\n    let count = 0;\n\n    // Use all four elements for calculation\n    ['Fire', 'Water', 'Earth', 'Air'].forEach((element) => {\n      const elementKey = element as keyof ElementalProperties;\n      const currentValue = currentState[elementKey] || 0;\n      const ingredientValue = elementalProperties[elementKey] || 0;\n\n      // Calculate similarity (1 - difference)\n      const similarity = 1 - Math.abs(currentValue - ingredientValue);\n      totalSimilarity += similarity;\n      count++;\n    });\n\n    // Return average similarity as percentage\n    return count > 0 ? (totalSimilarity /count) * 100 : 50;\n  }\n\n  private calculateElementalTotals(\n    properties: ElementalProperties\n  ): ElementalSummary {\n    return {\n      totalFire: properties.Fire,\n      totalWater: properties.Water,\n      totalEarth: properties.Earth,\n      totalAir: properties.Air,\n      dominantElement: this.getDominantElement(properties),\n    };\n  }\n\n  private static getSeasonFromZodiacSign(sign: ZodiacSign): Season {\n    // Map zodiac signs to seasons\n    const zodiacSeasons: Record<ZodiacSign, Season> = {\n      aries: 'spring',\n      taurus: 'spring',\n      gemini: 'spring',\n      cancer: 'summer',\n      leo: 'summer',\n      virgo: 'summer',\n      libra: 'autumn',\n      scorpio: 'autumn',\n      sagittarius: 'autumn',\n      capricorn: 'winter',\n      aquarius: 'winter',\n      pisces: 'winter',\n    };\n\n    return zodiacSeasons[sign] || 'all';\n  }\n\n  // Method to get seasonal modifiers based on zodiac sign\n  public static getZodiacSeasonalModifiers(\n    sign: ZodiacSign\n  ): ElementalProperties {\n    const season = this.getSeasonFromZodiacSign(sign);\n    return this.getSeasonalModifiers(season);\n  }\n\n  public static getZodiacElementalInfluence(\n    sign: ZodiacSign\n  ): ElementalProperties {\n    // Base seasonal influence\n    const seasonalModifiers = this.getZodiacSeasonalModifiers(sign);\n\n    // Specific zodiac sign adjustments\n    const zodiacModifiers: Record<ZodiacSign, Partial<ElementalProperties>> = {\n      aries: { Fire: 0.2 }, // Extra Fire boost for aries\n      taurus: { Earth: 0.2 }, // Extra Earth boost for taurus\n      gemini: { Air: 0.2 }, // Extra Air boost for gemini\n      cancer: { Water: 0.2 }, // Extra Water boost for cancer\n      leo: { Fire: 0.2 }, // Extra Fire boost for leo\n      virgo: { Earth: 0.2 }, // Extra Earth boost for virgo\n      libra: { Air: 0.2 }, // Extra Air boost for Libra\n      scorpio: { Water: 0.2 }, // Extra Water boost for Scorpio\n      sagittarius: { Fire: 0.2 }, // Extra Fire boost for sagittarius\n      capricorn: { Earth: 0.2 }, // Extra Earth boost for capricorn\n      aquarius: { Air: 0.2 }, // Extra Air boost for aquarius\n      pisces: { Water: 0.2 }, // Extra Water boost for pisces\n    };\n\n    // Apply specific zodiac adjustments\n    const specificAdjustments = zodiacModifiers[sign] || {};\n\n    // Combine seasonal modifiers with specific zodiac adjustments\n    const result = { ...seasonalModifiers };\n    Object.entries(specificAdjustments).forEach(([element, value]) => {\n      // Use nullish coalescing to ensure value is never undefined\n      result[element as keyof ElementalProperties] += value || 0;\n    });\n\n    // Normalize to ensure values stay in valid range\n    return normalizeProperties(result);\n  }\n\n  public static combineElementalProperties(\n    properties: ElementalProperties[]\n  ): ElementalProperties {\n    const result: ElementalProperties = {\n      Fire: 0,\n      Water: 0,\n      Earth: 0,\n      Air: 0,\n    };\n\n    if (properties.length === 0) {\n      return {\n        Fire: 0.25,\n        Water: 0.25,\n        Earth: 0.25,\n        Air: 0.25,\n      };\n    }\n\n    // Sum up all properties\n    properties.forEach((prop) => {\n      Object.entries(prop).forEach(([element, value]) => {\n        // Use nullish coalescing to handle undefined values\n        const elementKey = element as keyof ElementalProperties;\n        result[elementKey] += value || 0;\n      });\n    });\n\n    // Normalize to ensure they sum to 1\n    const total = Object.values(result).reduce((sum, val) => sum + val, 0);\n    if (total > 0) {\n      Object.keys(result).forEach((element) => {\n        const elementKey = element as keyof ElementalProperties;\n        result[elementKey] = result[elementKey] /total;\n      });\n    } else {\n      // Default to equal distribution if total is 0\n      Object.keys(result).forEach((element) => {\n        const elementKey = element as keyof ElementalProperties;\n        result[elementKey] = 0.25;\n      });\n    }\n\n    return result;\n  }\n\n  private getDominantElement(\n    elementalProperties: ElementalProperties\n  ): keyof ElementalProperties {\n    let maxElement: keyof ElementalProperties = 'Fire';\n    let maxValue = elementalProperties.Fire;\n\n    // Check each element to find the one with the highest value\n    Object.entries(elementalProperties).forEach(([element, value]) => {\n      const elementKey = element as keyof ElementalProperties;\n      if (value > maxValue) {\n        maxValue = value;\n        maxElement = elementKey;\n      }\n    });\n\n    return maxElement;\n  }\n\n  // Method to process planet object and extract elemental properties\n  processPlanetElementalEffect(planet: Planet, sign: string): Record<string, number> {\n    if (!planet || !sign) {\n      return { Fire: 0, Water: 0, Earth: 0, Air: 0 };\n    }\n    \n    const elementalEffect: Record<string, number> = { Fire: 0, Water: 0, Earth: 0, Air: 0 };\n    \n    // Process dignity effect\n    if (planetInfo[planet]?.[\"Dignity Effect\"]?.[sign]) {\n      const dignityEffectValue = planetInfo[planet][\"Dignity Effect\"][sign];\n      if (dignityEffectValue) {\n        if (Math.abs(dignityEffectValue) === 1 || Math.abs(dignityEffectValue) === 3) {\n          const signElement = signInfo[sign]?.Element || 'Fire';\n          elementalEffect[signElement] = 1 * (dignityEffectValue / Math.abs(dignityEffectValue));\n        }\n        \n        if (Math.abs(dignityEffectValue) > 1) {\n          const diurnalElement = planetInfo[planet]?.['Diurnal Element'] || 'Fire';\n          const nocturnalElement = planetInfo[planet]?.['Nocturnal Element'] || 'Fire';\n          \n          elementalEffect[diurnalElement] += (1 * (dignityEffectValue / (Math.abs(dignityEffectValue || 1))));\n          elementalEffect[nocturnalElement] += (1 * (dignityEffectValue / Math.abs(dignityEffectValue)));\n        }\n      }\n    }\n    \n    return elementalEffect;\n  }\n\n  // Method to process celestial bodies data\n  processCelestialBodiesData(celestialData: Record<string, unknown>): Record<string, number> {\n    if (!celestialData) {\n      return { Fire: 0, Water: 0, Earth: 0, Air: 0 };\n    }\n    \n    const totalElementalEffect: Record<string, number> = { Fire: 0, Water: 0, Earth: 0, Air: 0 };\n    \n    // Process each planet\n    for (const planetKey of Object.keys(planetInfo)) {\n      if (celestialData[planetKey.toLowerCase()]) {\n        const planet = planetKey;\n        const sign = celestialData[planetKey.toLowerCase()]?.Sign?.label;\n        \n        if (sign) {\n          const planetEffect = this.processPlanetElementalEffect(planet, sign);\n          \n          // Combine effects\n          for (const element of Object.keys(totalElementalEffect)) {\n            totalElementalEffect[element] += planetEffect[element] || 0;\n          }\n        }\n      }\n    }\n    \n    return totalElementalEffect;\n  }\n\n  // Process planet keys to get element effects\n  processPlanetKeysData(planets: Planet): Record<string, number> {\n    if (!planets) {\n      return { Fire: 0, Water: 0, Earth: 0, Air: 0 };\n    }\n    \n    const elementalEffect: Record<string, number> = { Fire: 0, Water: 0, Earth: 0, Air: 0 };\n    \n    // Extract all planet keys\n    const planetKeys = Object.keys(planets).filter(key => \n      typeof planets[key] === 'object' && planets[key] !== null && \n      (planetInfo && planetInfo[key] || false)\n    );\n    \n    // Process each planet\n    for (const planet of planetKeys) {\n      if (planets[planet]?.Sign) {\n        const sign = planets[planet].Sign;\n        const planetEffect = this.processPlanetElementalEffect(planet, sign);\n        \n        // Combine effects\n        for (const element of Object.keys(elementalEffect)) {\n          elementalEffect[element] += planetEffect[element] || 0;\n        }\n      }\n    }\n    \n    return elementalEffect;\n  }\n\n  // Get dominant element from elemental effects\n  getDominantElementFromEffects(elementalEffects: Record<string, number>): string {\n    if (!elementalEffects) {\n      return 'Fire';\n    }\n    \n    let dominantElement = 'Fire';\n    let highestValue = -Infinity;\n    \n    for (const [element, value] of Object.entries(elementalEffects)) {\n      if (value > highestValue) {\n        highestValue = value;\n        dominantElement = element;\n      }\n    }\n    \n    return dominantElement;\n  }\n\n  // Normalize elemental values to ensure they sum to 1.0\n  normalizeElementalValues(elementalEffects: Record<string, number>): Record<string, number> {\n    if (!elementalEffects) {\n      return { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 };\n    }\n    \n    const sum = Object.values(elementalEffects).reduce((a, b) => a + b, 0);\n    \n    // If sum is zero or very small, return equal distribution\n    if (Math.abs(sum) < 0.001) {\n      return { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 };\n    }\n    \n    const normalized: Record<string, number> = {};\n    \n    for (const element of Object.keys(elementalEffects)) {\n      normalized[element] = elementalEffects[element] /sum;\n    }\n    \n    return normalized;\n  }\n}\n\nexport default ElementalCalculator;\n"],"version":3}