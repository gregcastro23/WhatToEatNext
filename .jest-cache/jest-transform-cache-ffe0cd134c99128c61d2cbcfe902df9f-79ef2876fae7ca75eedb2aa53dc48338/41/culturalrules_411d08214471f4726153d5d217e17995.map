{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/data/culturalrules.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/data/culturalrules.ts"],"sourcesContent":["// src/data/culturalRules.ts\n\nimport { CulturalBalance } from './foodTypes';\n\nexport const culturalRules: Record<string, CulturalBalance> = {\n  japanese: {\n    cuisineId: 'japanese',\n    principles: [\n      \"Balance of five flavors (sweet, salty, sour, bitter, umami)\",\n      \"Color harmony (five colors: red, yellow, green, white, black)\",\n      \"Multiple small dishes rather than one large serving\",\n      \"Seasonal ingredients (shun) are preferred\",\n      \"Temperature balance between hot and cold dishes\"\n    ],\n    preferredCombinations: [\n      {\n        foods: ['rice', 'miso soup', 'grilled fish'],\n        reason: 'Traditional ichiju-sansai (one soup, three sides) balance'\n      },\n      {\n        foods: ['cold noodles', 'hot broth'],\n        reason: 'Temperature contrast provides balance'\n      },\n      {\n        foods: ['rich foods', 'pickled vegetables'],\n        reason: 'Pickles aid digestion and provide contrast'\n      }\n    ],\n    avoidCombinations: [\n      {\n        foods: ['green tea', 'oily foods'],\n        reason: 'Can cause stomach discomfort'\n      },\n      {\n        foods: ['raw fish', 'dairy'],\n        reason: 'Conflicts with traditional flavor profiles'\n      }\n    ]\n  },\n  middleEastern: {\n    cuisineId: 'middleEastern',\n    principles: [\n      \"Balance of warm and cool ingredients\",\n      \"Combination of protein with fresh herbs\",\n      \"Use of yogurt to balance spicy dishes\",\n      \"Incorporation of sweet and savory elements\"\n    ],\n    preferredCombinations: [\n      {\n        foods: ['hummus', 'warm pita', 'olive oil'],\n        reason: 'Traditional combination enhancing flavors and textures'\n      },\n      {\n        foods: ['grilled meats', 'fresh herbs', 'yogurt sauce'],\n        reason: 'Balanced protein with cooling elements'\n      }\n    ],\n    avoidCombinations: [\n      {\n        foods: ['fish', 'dairy'],\n        reason: 'Traditional dietary guideline'\n      }\n    ]\n  },\n  thai: {\n    cuisineId: 'thai',\n    principles: [\n      \"Balance of sweet, sour, salty, and spicy\",\n      \"Contrast of textures in each meal\",\n      \"Fresh herbs and aromatics in every dish\",\n      \"Light to heavy dish progression\"\n    ],\n    preferredCombinations: [\n      {\n        foods: ['spicy curry', 'plain rice', 'fresh vegetables'],\n        reason: 'Balances heat and provides textural contrast'\n      },\n      {\n        foods: ['papaya salad', 'grilled protein', 'sticky rice'],\n        reason: 'Traditional Isaan combination'\n      }\n    ],\n    avoidCombinations: [\n      {\n        foods: ['very spicy dishes', 'very sweet dishes'],\n        reason: 'Overwhelms palate'\n      }\n    ]\n  },\n  chinese: {\n    cuisineId: 'chinese',\n    principles: [\n      \"Balance of yin and yang in ingredients\",\n      \"Five flavors (sweet, sour, bitter, spicy, salty)\",\n      \"Color harmony and presentation\",\n      \"Combination of textures\",\n      \"Medicinal properties of ingredients\"\n    ],\n    preferredCombinations: [\n      {\n        foods: ['rice', 'stir-fried vegetables', 'protein'],\n        reason: 'Traditional balanced meal structure'\n      },\n      {\n        foods: ['soup', 'cold dishes'],\n        reason: 'Temperature and texture contrast'\n      },\n      {\n        foods: ['congee', 'pickled vegetables'],\n        reason: 'Digestive harmony'\n      }\n    ],\n    avoidCombinations: [\n      {\n        foods: ['cold drinks', 'spicy food'],\n        reason: 'Disrupts digestive balance'\n      },\n      {\n        foods: ['crab', 'persimmon'],\n        reason: 'Traditional dietary restriction'\n      }\n    ]\n  },\n  indian: {\n    cuisineId: 'indian',\n    principles: [\n      \"Six tastes (sweet, sour, salty, bitter, pungent, astringent)\",\n      \"Balance of warming and cooling foods\",\n      \"Use of spices for digestive health\",\n      \"Proper food combinations\",\n      \"Seasonal eating practices\"\n    ],\n    preferredCombinations: [\n      {\n        foods: ['dal', 'rice', 'ghee'],\n        reason: 'Complete protein combination'\n      },\n      {\n        foods: ['curry', 'yogurt', 'rice'],\n        reason: 'Balanced meal with cooling element'\n      },\n      {\n        foods: ['spicy dishes', 'raita'],\n        reason: 'Temperature and flavor balance'\n      }\n    ],\n    avoidCombinations: [\n      {\n        foods: ['milk', 'fish'],\n        reason: 'Ayurvedic incompatibility'\n      },\n      {\n        foods: ['honey', 'hot foods'],\n        reason: 'Creates toxins according to Ayurveda'\n      }\n    ]\n  },\n  vietnamese: {\n    cuisineId: 'vietnamese',\n    principles: [\n      \"Balance of five elements\",\n      \"Combination of fresh herbs and cooked ingredients\",\n      \"Light to heavy progression\",\n      \"Contrast in textures and temperatures\",\n      \"Use of dipping sauces for personalization\"\n    ],\n    preferredCombinations: [\n      {\n        foods: ['rice noodles', 'fresh herbs', 'protein'],\n        reason: 'Traditional pho combination'\n      },\n      {\n        foods: ['rice paper rolls', 'dipping sauce'],\n        reason: 'Classic pairing for texture and flavor'\n      }\n    ],\n    avoidCombinations: [\n      {\n        foods: ['durian', 'alcohol'],\n        reason: 'Traditional belief of negative effects'\n      }\n    ]\n  },\n  korean: {\n    cuisineId: 'korean',\n    principles: [\n      \"Balance of colors (obangsaek)\",\n      \"Fermented food with fresh ingredients\",\n      \"Harmony of main and side dishes\",\n      \"Temperature contrast in serving\",\n      \"Medicinal food philosophy\"\n    ],\n    preferredCombinations: [\n      {\n        foods: ['rice', 'kimchi', 'soup'],\n        reason: 'Traditional Korean meal structure'\n      },\n      {\n        foods: ['grilled meat', 'lettuce wraps', 'ssamjang'],\n        reason: 'Classic Korean BBQ combination'\n      }\n    ],\n    avoidCombinations: [\n      {\n        foods: ['kimchi', 'milk'],\n        reason: 'Flavor clash and digestive concerns'\n      }\n    ]\n  },\n  mexican: {\n    cuisineId: 'mexican',\n    principles: [\n      \"Balance of heat levels\",\n      \"Fresh and cooked ingredient combinations\",\n      \"Use of acid to balance richness\",\n      \"Layering of flavors\",\n      \"Complementary textures\"\n    ],\n    preferredCombinations: [\n      {\n        foods: ['beans', 'rice', 'corn tortillas'],\n        reason: 'Complete protein combination'\n      },\n      {\n        foods: ['spicy dishes', 'crema', 'lime'],\n        reason: 'Heat balanced with cooling elements'\n      }\n    ],\n    avoidCombinations: [\n      {\n        foods: ['fish', 'cheese'],\n        reason: 'Traditional flavor conflict'\n      }\n    ]\n  }\n};\n\n// Helper function to get cultural recommendations\nexport function getCulturalRecommendations(\n  cuisineId: string,\n  currentDishes: string[]\n): { recommended: string[]; avoid: string[] } {\n  const rules = culturalRules[cuisineId];\n  if (!rules) return { recommended: [], avoid: [] };\n\n  const recommended = rules.preferredCombinations\n    .filter(combo => \n      currentDishes.some(dish => combo.foods.includes(dish))\n    )\n    .map(combo => combo.foods.filter(food => !currentDishes.includes(food)))\n    .flat();\n\n  const avoid = rules.avoidCombinations\n    .filter(combo => \n      currentDishes.some(dish => combo.foods.includes(dish))\n    )\n    .map(combo => combo.foods.filter(food => !currentDishes.includes(food)))\n    .flat();\n\n  return { recommended, avoid };\n}"],"version":3}