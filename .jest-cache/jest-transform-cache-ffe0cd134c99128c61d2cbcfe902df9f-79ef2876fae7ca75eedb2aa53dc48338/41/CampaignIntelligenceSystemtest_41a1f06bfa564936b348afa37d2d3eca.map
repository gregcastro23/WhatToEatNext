{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/CampaignIntelligenceSystem.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/CampaignIntelligenceSystem.test.ts"],"sourcesContent":["/**\n * Tests for Campaign Intelligence System\n *\n * Verifies Enterprise Intelligence integration and analytics capabilities\n */\n\nimport {\n  ERROR_PATTERN_INTELLIGENCE,\n  CAMPAIGN_PROGRESS_INTELLIGENCE,\n  CAMPAIGN_ENTERPRISE_INTELLIGENCE,\n  CAMPAIGN_INTELLIGENCE_DEMO,\n  CampaignIntelligenceMetrics,\n  ErrorPatternIntelligence,\n  CampaignProgressIntelligence,\n} from './CampaignIntelligenceSystem';\nimport { ErrorCategory } from './TypeScriptErrorAnalyzer';\nimport { FixerResult } from './EnhancedErrorFixerIntegration';\nimport { CampaignProgress } from './ExplicitAnyEliminationSystem';\n\ndescribe('Campaign Intelligence System', () => {\n  describe('ERROR_PATTERN_INTELLIGENCE', () => {\n    it('should analyze error patterns correctly', () => {\n      const sampleErrors = [\n        {\n          code: 'TS2352',\n          category: ErrorCategory.TS2352_TYPE_CONVERSION,\n          priority: 20,\n        },\n        {\n          code: 'TS2352',\n          category: ErrorCategory.TS2352_TYPE_CONVERSION,\n          priority: 18,\n        },\n        {\n          code: 'TS2345',\n          category: ErrorCategory.TS2345_ARGUMENT_MISMATCH,\n          priority: 15,\n        },\n        {\n          code: 'TS2304',\n          category: ErrorCategory.TS2304_CANNOT_FIND_NAME,\n          priority: 22,\n        },\n      ];\n\n      const patterns =\n        ERROR_PATTERN_INTELLIGENCE.analyzeErrorPatterns(sampleErrors);\n\n      expect(patterns.patternRecognition['TS2352_TS2352_TYPE_CONVERSION']).toBe(\n        2\n      );\n      expect(\n        patterns.patternRecognition['TS2345_TS2345_ARGUMENT_MISMATCH']\n      ).toBe(1);\n      expect(\n        patterns.patternRecognition['TS2304_TS2304_CANNOT_FIND_NAME']\n      ).toBe(1);\n\n      expect(\n        patterns.errorCategoryTrends[ErrorCategory.TS2352_TYPE_CONVERSION]\n      ).toBe(2);\n      expect(\n        patterns.errorCategoryTrends[ErrorCategory.TS2345_ARGUMENT_MISMATCH]\n      ).toBe(1);\n      expect(\n        patterns.errorCategoryTrends[ErrorCategory.TS2304_CANNOT_FIND_NAME]\n      ).toBe(1);\n\n      expect(patterns.fixSuccessRates['TS2352_TS2352_TYPE_CONVERSION']).toBe(\n        0.92\n      );\n      expect(patterns.fixSuccessRates['TS2304_TS2304_CANNOT_FIND_NAME']).toBe(\n        0.95\n      );\n\n      expect(\n        patterns.predictiveAnalytics.errorReductionPotential\n      ).toBeGreaterThan(0);\n      expect(\n        patterns.predictiveAnalytics.campaignDurationEstimate\n      ).toBeGreaterThan(0);\n      expect(\n        patterns.predictiveAnalytics.buildStabilityPrediction\n      ).toBeGreaterThan(0.6);\n    });\n\n    it('should generate error intelligence report', () => {\n      const patterns: ErrorPatternIntelligence = {\n        patternRecognition: {\n          TS2352_TYPE_CONVERSION: 10,\n          TS2345_ARGUMENT_MISMATCH: 5,\n        },\n        fixSuccessRates: {\n          TS2352_TYPE_CONVERSION: 0.92,\n          TS2345_ARGUMENT_MISMATCH: 0.87,\n        },\n        errorCategoryTrends: {\n          [ErrorCategory.TS2352_TYPE_CONVERSION]: 10,\n          [ErrorCategory.TS2345_ARGUMENT_MISMATCH]: 5,\n          [ErrorCategory.TS2698_SPREAD_TYPE]: 0,\n          [ErrorCategory.TS2304_CANNOT_FIND_NAME]: 0,\n          [ErrorCategory.TS2362_ARITHMETIC_OPERATION]: 0,\n          [ErrorCategory.OTHER]: 0,\n        },\n        priorityOptimization: {\n          TS2352_TYPE_CONVERSION: 9.2,\n          TS2345_ARGUMENT_MISMATCH: 4.35,\n        },\n        predictiveAnalytics: {\n          errorReductionPotential: 0.85,\n          campaignDurationEstimate: 30,\n          buildStabilityPrediction: 0.94,\n        },\n      };\n\n      const report =\n        ERROR_PATTERN_INTELLIGENCE.generateErrorIntelligenceReport(patterns);\n\n      expect(report).toContain(\n        'Dominant error pattern: TS2352_TYPE_CONVERSION (10 occurrences)'\n      );\n      expect(report).toContain(\n        'High-success fix patterns identified: TS2352_TYPE_CONVERSION'\n      );\n      expect(report).toContain('Projected error reduction potential: 85.0%');\n      expect(report).toContain('Estimated campaign duration: 30.0 days');\n    });\n  });\n\n  describe('CAMPAIGN_PROGRESS_INTELLIGENCE', () => {\n    it('should analyze campaign progress correctly', () => {\n      const sampleFixerResults: FixerResult[] = [\n        {\n          success: true,\n          filesProcessed: 15,\n          errorsFixed: 50,\n          errorsRemaining: 2450,\n          buildValidationPassed: true,\n          executionTime: 60000, // 1 minute\n          safetyScore: 0.85,\n          warnings: [],\n          errors: [],\n        },\n        {\n          success: true,\n          filesProcessed: 12,\n          errorsFixed: 30,\n          errorsRemaining: 2420,\n          buildValidationPassed: true,\n          executionTime: 45000, // 45 seconds\n          safetyScore: 0.9,\n          warnings: [],\n          errors: [],\n        },\n      ];\n\n      const sampleCampaignProgress: CampaignProgress = {\n        totalExplicitAnyStart: 1000,\n        totalExplicitAnyRemaining: 200,\n        reductionAchieved: 800,\n        reductionPercentage: 80,\n        campaignTarget: 75.5,\n        isTargetMet: true,\n      };\n\n      const progress = CAMPAIGN_PROGRESS_INTELLIGENCE.analyzeCampaignProgress(\n        2420,\n        2500,\n        sampleFixerResults,\n        sampleCampaignProgress\n      );\n\n      expect(progress.velocityAnalysis.currentVelocity).toBeGreaterThan(0);\n      expect(progress.velocityAnalysis.projectedCompletion).toBeInstanceOf(\n        Date\n      );\n      expect(progress.velocityAnalysis.efficiencyTrends).toHaveLength(2);\n\n      expect(progress.qualityMetrics.codeHealthScore).toBeGreaterThan(0.3);\n      expect(progress.qualityMetrics.maintainabilityIndex).toBeGreaterThan(0);\n      expect(progress.qualityMetrics.technicalDebtRatio).toBeLessThan(1);\n      expect(progress.qualityMetrics.buildReliability).toBe(1); // All builds passed\n\n      expect(progress.strategicInsights.recommendedActions).toBeInstanceOf(\n        Array\n      );\n      expect(progress.strategicInsights.riskAssessment).toBeInstanceOf(Array);\n      expect(\n        progress.strategicInsights.opportunityIdentification\n      ).toBeInstanceOf(Array);\n      expect(progress.strategicInsights.resourceOptimization).toBeInstanceOf(\n        Array\n      );\n    });\n\n    it('should generate progress intelligence report', () => {\n      const progress: CampaignProgressIntelligence = {\n        velocityAnalysis: {\n          currentVelocity: 1.5,\n          projectedCompletion: new Date('2025-02-01'),\n          efficiencyTrends: [1.2, 1.5, 1.8],\n          bottleneckIdentification: ['Low error fixing velocity'],\n        },\n        qualityMetrics: {\n          codeHealthScore: 0.85,\n          maintainabilityIndex: 0.8,\n          technicalDebtRatio: 0.15,\n          buildReliability: 0.95,\n        },\n        strategicInsights: {\n          recommendedActions: ['Increase batch size for higher throughput'],\n          riskAssessment: ['Build stability risk detected'],\n          opportunityIdentification: [\n            'High success rate - consider aggressive mode',\n          ],\n          resourceOptimization: ['Focus on remaining high-impact errors'],\n        },\n      };\n\n      const report =\n        CAMPAIGN_PROGRESS_INTELLIGENCE.generateProgressIntelligenceReport(\n          progress\n        );\n\n      expect(report).toContain('Current velocity: 1.50 errors/minute');\n      expect(report).toContain('Projected completion: 2/1/2025');\n      expect(report).toContain('Code health score: 85.0%');\n      expect(report).toContain('Build reliability: 95.0%');\n      expect(report).toContain(\n        'Bottlenecks identified: Low error fixing velocity'\n      );\n      expect(report).toContain(\n        'Top recommendation: Increase batch size for higher throughput'\n      );\n    });\n  });\n\n  describe('CAMPAIGN_ENTERPRISE_INTELLIGENCE', () => {\n    it('should generate comprehensive intelligence', async () => {\n      // Mock the analyzer methods to avoid actual system calls\n      const mockErrorAnalyzer = {\n        analyzeErrors: jest.fn().mockResolvedValue({\n          distribution: {\n            totalErrors: 2500,\n            priorityRanking: [\n              {\n                code: 'TS2352',\n                category: ErrorCategory.TS2352_TYPE_CONVERSION,\n                priority: 20,\n              },\n            ],\n          },\n        }),\n        getCurrentErrorCount: jest.fn().mockResolvedValue(2500),\n      };\n\n      const mockFixerIntegration = {};\n\n      const mockAnyElimination = {\n        showCampaignProgress: jest.fn().mockResolvedValue({\n          totalExplicitAnyStart: 1000,\n          totalExplicitAnyRemaining: 250,\n          reductionAchieved: 750,\n          reductionPercentage: 75,\n          campaignTarget: 75.5,\n          isTargetMet: false,\n        }),\n      };\n\n      const intelligence =\n        await CAMPAIGN_ENTERPRISE_INTELLIGENCE.generateComprehensiveIntelligence(\n          mockErrorAnalyzer as any,\n          mockFixerIntegration as any,\n          mockAnyElimination as any\n        );\n\n      expect(intelligence.campaignMetrics).toBeDefined();\n      expect(intelligence.errorPatterns).toBeDefined();\n      expect(intelligence.progressAnalysis).toBeDefined();\n      expect(intelligence.systemIntegration).toBeDefined();\n      expect(intelligence.intelligenceRecommendations).toBeInstanceOf(Array);\n      expect(intelligence.enterpriseReadinessScore).toBeGreaterThanOrEqual(0);\n      expect(intelligence.enterpriseReadinessScore).toBeLessThanOrEqual(1);\n\n      // Verify campaign metrics structure\n      expect(\n        intelligence.campaignMetrics.errorReductionVelocity\n      ).toBeGreaterThanOrEqual(0);\n      expect(\n        intelligence.campaignMetrics.codeQualityImprovement\n      ).toBeGreaterThanOrEqual(0);\n      expect(\n        intelligence.campaignMetrics.buildStabilityScore\n      ).toBeGreaterThanOrEqual(0);\n      expect(\n        intelligence.campaignMetrics.technicalDebtReduction\n      ).toBeGreaterThanOrEqual(0);\n      expect(\n        intelligence.campaignMetrics.enterpriseReadiness\n      ).toBeGreaterThanOrEqual(0);\n      expect([\n        'basic',\n        'intermediate',\n        'advanced',\n        'enterprise_level',\n      ]).toContain(intelligence.campaignMetrics.intelligenceDepth);\n\n      // Verify system integration metrics\n      expect(\n        intelligence.systemIntegration.overallSystemIntegration\n      ).toBeGreaterThan(0.9);\n    });\n\n    it('should display enterprise intelligence correctly', () => {\n      const mockIntelligence = {\n        campaignMetrics: {\n          errorReductionVelocity: 1.5,\n          codeQualityImprovement: 0.85,\n          buildStabilityScore: 0.95,\n          technicalDebtReduction: 0.75,\n          enterpriseReadiness: 0.88,\n          systemComplexity: 0.6,\n          intelligenceDepth: 'advanced' as const,\n          campaignEffectiveness: 0.82,\n        },\n        errorPatterns: {\n          patternRecognition: {\n            TS2352_TYPE_CONVERSION: 10,\n            TS2345_ARGUMENT_MISMATCH: 5,\n          },\n          fixSuccessRates: {},\n          errorCategoryTrends: {} as any,\n          priorityOptimization: {},\n          predictiveAnalytics: {},\n        },\n        progressAnalysis: {\n          velocityAnalysis: {\n            currentVelocity: 1.5,\n            projectedCompletion: new Date('2025-02-01'),\n            efficiencyTrends: [],\n            bottleneckIdentification: [],\n          },\n          qualityMetrics: {\n            codeHealthScore: 0.85,\n            maintainabilityIndex: 0.8,\n            technicalDebtRatio: 0.15,\n            buildReliability: 0.95,\n          },\n          strategicInsights: {\n            recommendedActions: [],\n            riskAssessment: [],\n            opportunityIdentification: [],\n            resourceOptimization: [],\n          },\n        },\n        systemIntegration: { overallSystemIntegration: 0.92 },\n        intelligenceRecommendations: ['Test recommendation'],\n        enterpriseReadinessScore: 0.88,\n      };\n\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n\n      CAMPAIGN_ENTERPRISE_INTELLIGENCE.displayEnterpriseIntelligence(\n        mockIntelligence\n      );\n\n      expect(consoleSpy).toHaveBeenCalledWith(\n        expect.stringContaining('CAMPAIGN ENTERPRISE INTELLIGENCE SYSTEM')\n      );\n      expect(consoleSpy).toHaveBeenCalledWith(\n        expect.stringContaining('Error Reduction Velocity: 1.50 errors/min')\n      );\n      expect(consoleSpy).toHaveBeenCalledWith(\n        expect.stringContaining('Enterprise Readiness: 88.0%')\n      );\n      expect(consoleSpy).toHaveBeenCalledWith(\n        expect.stringContaining('Intelligence Depth: advanced')\n      );\n      expect(consoleSpy).toHaveBeenCalledWith(\n        expect.stringContaining(\n          'ADVANCED LEVEL - Approaching enterprise readiness'\n        )\n      );\n\n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('CAMPAIGN_INTELLIGENCE_DEMO', () => {\n    it('should demonstrate all intelligence capabilities', async () => {\n      const demo =\n        await CAMPAIGN_INTELLIGENCE_DEMO.demonstrateAllIntelligence();\n\n      expect(demo.errorPatternDemo).toBeDefined();\n      expect(demo.progressAnalysisDemo).toBeDefined();\n      expect(demo.enterpriseIntelligenceDemo).toBeDefined();\n      expect(demo.integrationMetrics).toBeDefined();\n      expect(demo.demonstrationSummary).toBeDefined();\n\n      // Verify demonstration summary\n      expect(demo.demonstrationSummary.intelligenceSystemsCount).toBe(3);\n      expect(demo.demonstrationSummary.analysisMethodsCount).toBe(6);\n      expect(demo.demonstrationSummary.demonstrationCompleteness).toBe(1.0);\n      expect(demo.demonstrationSummary.intelligenceCapabilities).toBeInstanceOf(\n        Array\n      );\n      expect(demo.demonstrationSummary.intelligenceCapabilities).toContain(\n        'Error Pattern Recognition'\n      );\n      expect(demo.demonstrationSummary.intelligenceCapabilities).toContain(\n        'Enterprise Readiness Assessment'\n      );\n\n      // Verify integration metrics\n      expect(\n        demo.integrationMetrics.overallIntelligenceIntegration\n      ).toBeGreaterThan(0.9);\n      expect(demo.integrationMetrics.errorPatternIntegration).toBeGreaterThan(\n        0.9\n      );\n      expect(\n        demo.integrationMetrics.progressAnalysisIntegration\n      ).toBeGreaterThan(0.9);\n      expect(\n        demo.integrationMetrics.enterpriseIntelligenceIntegration\n      ).toBeGreaterThan(0.9);\n    });\n  });\n});\n"],"version":3}