{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/data/cooking/methods/index.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/data/cooking/methods/index.ts"],"sourcesContent":["import { dryCookingMethods } from './dry';\nimport { wetCookingMethods } from './wet';\nimport { molecularCookingMethods } from './molecular';\nimport { traditionalCookingMethods } from './traditional';\nimport { rawCookingMethods } from './raw';\n// Import other method categories as they are added\nimport { transformationMethods } from './transformation';\n\nimport type { CookingMethodData } from '@/types/cookingMethod';\nimport type { ZodiacSign, AstrologicalState, Element } from '@/types/alchemy';\n\n/**\n * Collection of all cooking methods from all categories\n */\nexport const allCookingMethods = {\n  ...dryCookingMethods,\n  ...wetCookingMethods,\n  ...molecularCookingMethods,\n  ...traditionalCookingMethods,\n  ...rawCookingMethods,\n  // Add other method categories as they are implemented\n  ...transformationMethods,\n};\n\n/**\n * Get cooking methods that are favorable for a specific zodiac sign\n * @param sign The zodiac sign to check\n * @returns Object containing cooking methods favorable for the sign\n */\nexport const getMethodsForZodiacSign = (sign: ZodiacSign): Record<string, CookingMethodData> => {\n  return Object.entries(allCookingMethods)\n    .filter(([_, method]) => {\n      // Apply safe type casting for method property access\n      const methodData = method as any;\n      return methodData?.astrologicalInfluences?.favorableZodiac?.includes(sign);\n    })\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\n};\n\n/**\n * Get cooking methods that have a specific dominant element\n * @param element The element to check for (Fire, Water, Earth, Air)\n * @param threshold The minimum value for that element (0.0-1.0)\n * @returns Object containing cooking methods with that elemental dominance\n */\nexport const getMethodsByElement = (element: Element, threshold = 0.4): Record<string, CookingMethodData> => {\n  return Object.entries(allCookingMethods)\n    .filter(([_, method]) => {\n      // Apply safe type casting for method property access\n      const methodData = method as any;\n      return (methodData?.elementalEffect?.[element] || 0) >= threshold;\n    })\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\n};\n\n/**\n * Get cooking methods suitable for a specific ingredient type\n * @param ingredientType The type of ingredient (e.g., 'meat', 'vegetables')\n * @returns Object containing suitable cooking methods\n */\nexport const getMethodsForIngredientType = (ingredientType: string): Record<string, CookingMethodData> => {\n  return Object.entries(allCookingMethods)\n    .filter(([_, method]) => {\n      // Apply safe type casting for method property access\n      const methodData = method as any;\n      return (methodData?.suitable_for || []).some((type: any) => \n        type?.toLowerCase()?.includes(ingredientType.toLowerCase())\n      );\n    })\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\n};\n\n/**\n * Get cooking methods influenced by a specific planet\n * @param planet The planet to check for influence\n * @returns Object containing methods influenced by the planet\n */\nexport const getMethodsByPlanet = (planet: string): Record<string, CookingMethodData> => {\n  return Object.entries(allCookingMethods)\n    .filter(([_, method]) => {\n      // Apply safe type casting for method property access\n      const methodData = method as any;\n      return methodData?.astrologicalInfluences?.dominantPlanets?.includes(planet) ||\n             methodData?.astrologicalInfluences?.rulingPlanets?.includes(planet);\n    })\n    .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\n};\n\n// Export individual categories\nexport {\n  dryCookingMethods,\n  wetCookingMethods,\n  molecularCookingMethods,\n  traditionalCookingMethods,\n  rawCookingMethods,\n  transformationMethods,\n}; "],"version":3}