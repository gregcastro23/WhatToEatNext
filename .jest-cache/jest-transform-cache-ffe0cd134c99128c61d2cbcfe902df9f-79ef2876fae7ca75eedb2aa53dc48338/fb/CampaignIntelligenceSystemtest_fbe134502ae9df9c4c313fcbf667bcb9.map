{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/CampaignIntelligenceSystem.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/CampaignIntelligenceSystem.test.ts"],"sourcesContent":["/**\n * Tests for Campaign Intelligence System\n * \n * Verifies Enterprise Intelligence integration and analytics capabilities\n */\n\nimport {\n  ERROR_PATTERN_INTELLIGENCE,\n  CAMPAIGN_PROGRESS_INTELLIGENCE,\n  CAMPAIGN_ENTERPRISE_INTELLIGENCE,\n  CAMPAIGN_INTELLIGENCE_DEMO,\n  CampaignIntelligenceMetrics,\n  ErrorPatternIntelligence,\n  CampaignProgressIntelligence\n} from './CampaignIntelligenceSystem';\nimport { ErrorCategory } from './TypeScriptErrorAnalyzer';\nimport { FixerResult } from './EnhancedErrorFixerIntegration';\nimport { CampaignProgress } from './ExplicitAnyEliminationSystem';\n\ndescribe('Campaign Intelligence System', () => {\n  describe('ERROR_PATTERN_INTELLIGENCE', () => {\n    it('should analyze error patterns correctly', () => {\n      const sampleErrors = [\n        { code: 'TS2352', category: ErrorCategory.TS2352_TYPE_CONVERSION, priority: 20 },\n        { code: 'TS2352', category: ErrorCategory.TS2352_TYPE_CONVERSION, priority: 18 },\n        { code: 'TS2345', category: ErrorCategory.TS2345_ARGUMENT_MISMATCH, priority: 15 },\n        { code: 'TS2304', category: ErrorCategory.TS2304_CANNOT_FIND_NAME, priority: 22 }\n      ];\n\n      const patterns = ERROR_PATTERN_INTELLIGENCE.analyzeErrorPatterns(sampleErrors);\n\n      expect(patterns.patternRecognition['TS2352_TS2352_TYPE_CONVERSION']).toBe(2);\n      expect(patterns.patternRecognition['TS2345_TS2345_ARGUMENT_MISMATCH']).toBe(1);\n      expect(patterns.patternRecognition['TS2304_TS2304_CANNOT_FIND_NAME']).toBe(1);\n      \n      expect(patterns.errorCategoryTrends[ErrorCategory.TS2352_TYPE_CONVERSION]).toBe(2);\n      expect(patterns.errorCategoryTrends[ErrorCategory.TS2345_ARGUMENT_MISMATCH]).toBe(1);\n      expect(patterns.errorCategoryTrends[ErrorCategory.TS2304_CANNOT_FIND_NAME]).toBe(1);\n      \n      expect(patterns.fixSuccessRates['TS2352_TS2352_TYPE_CONVERSION']).toBe(0.92);\n      expect(patterns.fixSuccessRates['TS2304_TS2304_CANNOT_FIND_NAME']).toBe(0.95);\n      \n      expect(patterns.predictiveAnalytics.errorReductionPotential).toBeGreaterThan(0);\n      expect(patterns.predictiveAnalytics.campaignDurationEstimate).toBeGreaterThan(0);\n      expect(patterns.predictiveAnalytics.buildStabilityPrediction).toBeGreaterThan(0.6);\n    });\n\n    it('should generate error intelligence report', () => {\n      const patterns: ErrorPatternIntelligence = {\n        patternRecognition: { 'TS2352_TYPE_CONVERSION': 10, 'TS2345_ARGUMENT_MISMATCH': 5 },\n        fixSuccessRates: { 'TS2352_TYPE_CONVERSION': 0.92, 'TS2345_ARGUMENT_MISMATCH': 0.87 },\n        errorCategoryTrends: {\n          [ErrorCategory.TS2352_TYPE_CONVERSION]: 10,\n          [ErrorCategory.TS2345_ARGUMENT_MISMATCH]: 5,\n          [ErrorCategory.TS2698_SPREAD_TYPE]: 0,\n          [ErrorCategory.TS2304_CANNOT_FIND_NAME]: 0,\n          [ErrorCategory.TS2362_ARITHMETIC_OPERATION]: 0,\n          [ErrorCategory.OTHER]: 0\n        },\n        priorityOptimization: { 'TS2352_TYPE_CONVERSION': 9.2, 'TS2345_ARGUMENT_MISMATCH': 4.35 },\n        predictiveAnalytics: { errorReductionPotential: 0.85, campaignDurationEstimate: 30, buildStabilityPrediction: 0.94 }\n      };\n\n      const report = ERROR_PATTERN_INTELLIGENCE.generateErrorIntelligenceReport(patterns);\n\n      expect(report).toContain('Dominant error pattern: TS2352_TYPE_CONVERSION (10 occurrences)');\n      expect(report).toContain('High-success fix patterns identified: TS2352_TYPE_CONVERSION');\n      expect(report).toContain('Projected error reduction potential: 85.0%');\n      expect(report).toContain('Estimated campaign duration: 30.0 days');\n    });\n  });\n\n  describe('CAMPAIGN_PROGRESS_INTELLIGENCE', () => {\n    it('should analyze campaign progress correctly', () => {\n      const sampleFixerResults: FixerResult[] = [\n        {\n          success: true,\n          filesProcessed: 15,\n          errorsFixed: 50,\n          errorsRemaining: 2450,\n          buildValidationPassed: true,\n          executionTime: 60000, // 1 minute\n          safetyScore: 0.85,\n          warnings: [],\n          errors: []\n        },\n        {\n          success: true,\n          filesProcessed: 12,\n          errorsFixed: 30,\n          errorsRemaining: 2420,\n          buildValidationPassed: true,\n          executionTime: 45000, // 45 seconds\n          safetyScore: 0.90,\n          warnings: [],\n          errors: []\n        }\n      ];\n\n      const sampleCampaignProgress: CampaignProgress = {\n        totalExplicitAnyStart: 1000,\n        totalExplicitAnyRemaining: 200,\n        reductionAchieved: 800,\n        reductionPercentage: 80,\n        campaignTarget: 75.5,\n        isTargetMet: true\n      };\n\n      const progress = CAMPAIGN_PROGRESS_INTELLIGENCE.analyzeCampaignProgress(\n        2420, 2500, sampleFixerResults, sampleCampaignProgress\n      );\n\n      expect(progress.velocityAnalysis.currentVelocity).toBeGreaterThan(0);\n      expect(progress.velocityAnalysis.projectedCompletion).toBeInstanceOf(Date);\n      expect(progress.velocityAnalysis.efficiencyTrends).toHaveLength(2);\n      \n      expect(progress.qualityMetrics.codeHealthScore).toBeGreaterThan(0.3);\n      expect(progress.qualityMetrics.maintainabilityIndex).toBeGreaterThan(0);\n      expect(progress.qualityMetrics.technicalDebtRatio).toBeLessThan(1);\n      expect(progress.qualityMetrics.buildReliability).toBe(1); // All builds passed\n      \n      expect(progress.strategicInsights.recommendedActions).toBeInstanceOf(Array);\n      expect(progress.strategicInsights.riskAssessment).toBeInstanceOf(Array);\n      expect(progress.strategicInsights.opportunityIdentification).toBeInstanceOf(Array);\n      expect(progress.strategicInsights.resourceOptimization).toBeInstanceOf(Array);\n    });\n\n    it('should generate progress intelligence report', () => {\n      const progress: CampaignProgressIntelligence = {\n        velocityAnalysis: {\n          currentVelocity: 1.5,\n          projectedCompletion: new Date('2025-02-01'),\n          efficiencyTrends: [1.2, 1.5, 1.8],\n          bottleneckIdentification: ['Low error fixing velocity']\n        },\n        qualityMetrics: {\n          codeHealthScore: 0.85,\n          maintainabilityIndex: 0.80,\n          technicalDebtRatio: 0.15,\n          buildReliability: 0.95\n        },\n        strategicInsights: {\n          recommendedActions: ['Increase batch size for higher throughput'],\n          riskAssessment: ['Build stability risk detected'],\n          opportunityIdentification: ['High success rate - consider aggressive mode'],\n          resourceOptimization: ['Focus on remaining high-impact errors']\n        }\n      };\n\n      const report = CAMPAIGN_PROGRESS_INTELLIGENCE.generateProgressIntelligenceReport(progress);\n\n      expect(report).toContain('Current velocity: 1.50 errors/minute');\n      expect(report).toContain('Projected completion: 2/1/2025');\n      expect(report).toContain('Code health score: 85.0%');\n      expect(report).toContain('Build reliability: 95.0%');\n      expect(report).toContain('Bottlenecks identified: Low error fixing velocity');\n      expect(report).toContain('Top recommendation: Increase batch size for higher throughput');\n    });\n  });\n\n  describe('CAMPAIGN_ENTERPRISE_INTELLIGENCE', () => {\n    it('should generate comprehensive intelligence', async () => {\n      // Mock the analyzer methods to avoid actual system calls\n      const mockErrorAnalyzer = {\n        analyzeErrors: jest.fn().mockResolvedValue({\n          distribution: {\n            totalErrors: 2500,\n            priorityRanking: [\n              { code: 'TS2352', category: ErrorCategory.TS2352_TYPE_CONVERSION, priority: 20 }\n            ]\n          }\n        }),\n        getCurrentErrorCount: jest.fn().mockResolvedValue(2500)\n      };\n\n      const mockFixerIntegration = {};\n\n      const mockAnyElimination = {\n        showCampaignProgress: jest.fn().mockResolvedValue({\n          totalExplicitAnyStart: 1000,\n          totalExplicitAnyRemaining: 250,\n          reductionAchieved: 750,\n          reductionPercentage: 75,\n          campaignTarget: 75.5,\n          isTargetMet: false\n        })\n      };\n\n      const intelligence = await CAMPAIGN_ENTERPRISE_INTELLIGENCE.generateComprehensiveIntelligence(\n        mockErrorAnalyzer as any,\n        mockFixerIntegration as any,\n        mockAnyElimination as any\n      );\n\n      expect(intelligence.campaignMetrics).toBeDefined();\n      expect(intelligence.errorPatterns).toBeDefined();\n      expect(intelligence.progressAnalysis).toBeDefined();\n      expect(intelligence.systemIntegration).toBeDefined();\n      expect(intelligence.intelligenceRecommendations).toBeInstanceOf(Array);\n      expect(intelligence.enterpriseReadinessScore).toBeGreaterThanOrEqual(0);\n      expect(intelligence.enterpriseReadinessScore).toBeLessThanOrEqual(1);\n\n      // Verify campaign metrics structure\n      expect(intelligence.campaignMetrics.errorReductionVelocity).toBeGreaterThanOrEqual(0);\n      expect(intelligence.campaignMetrics.codeQualityImprovement).toBeGreaterThanOrEqual(0);\n      expect(intelligence.campaignMetrics.buildStabilityScore).toBeGreaterThanOrEqual(0);\n      expect(intelligence.campaignMetrics.technicalDebtReduction).toBeGreaterThanOrEqual(0);\n      expect(intelligence.campaignMetrics.enterpriseReadiness).toBeGreaterThanOrEqual(0);\n      expect(['basic', 'intermediate', 'advanced', 'enterprise_level']).toContain(intelligence.campaignMetrics.intelligenceDepth);\n\n      // Verify system integration metrics\n      expect(intelligence.systemIntegration.overallSystemIntegration).toBeGreaterThan(0.9);\n    });\n\n    it('should display enterprise intelligence correctly', () => {\n      const mockIntelligence = {\n        campaignMetrics: {\n          errorReductionVelocity: 1.5,\n          codeQualityImprovement: 0.85,\n          buildStabilityScore: 0.95,\n          technicalDebtReduction: 0.75,\n          enterpriseReadiness: 0.88,\n          systemComplexity: 0.6,\n          intelligenceDepth: 'advanced' as const,\n          campaignEffectiveness: 0.82\n        },\n        errorPatterns: {\n          patternRecognition: { 'TS2352_TYPE_CONVERSION': 10, 'TS2345_ARGUMENT_MISMATCH': 5 },\n          fixSuccessRates: {},\n          errorCategoryTrends: {} as any,\n          priorityOptimization: {},\n          predictiveAnalytics: {}\n        },\n        progressAnalysis: {\n          velocityAnalysis: {\n            currentVelocity: 1.5,\n            projectedCompletion: new Date('2025-02-01'),\n            efficiencyTrends: [],\n            bottleneckIdentification: []\n          },\n          qualityMetrics: {\n            codeHealthScore: 0.85,\n            maintainabilityIndex: 0.80,\n            technicalDebtRatio: 0.15,\n            buildReliability: 0.95\n          },\n          strategicInsights: {\n            recommendedActions: [],\n            riskAssessment: [],\n            opportunityIdentification: [],\n            resourceOptimization: []\n          }\n        },\n        systemIntegration: { overallSystemIntegration: 0.92 },\n        intelligenceRecommendations: ['Test recommendation'],\n        enterpriseReadinessScore: 0.88\n      };\n\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n\n      CAMPAIGN_ENTERPRISE_INTELLIGENCE.displayEnterpriseIntelligence(mockIntelligence);\n\n      expect(consoleSpy).toHaveBeenCalledWith(expect.stringContaining('CAMPAIGN ENTERPRISE INTELLIGENCE SYSTEM'));\n      expect(consoleSpy).toHaveBeenCalledWith(expect.stringContaining('Error Reduction Velocity: 1.50 errors/min'));\n      expect(consoleSpy).toHaveBeenCalledWith(expect.stringContaining('Enterprise Readiness: 88.0%'));\n      expect(consoleSpy).toHaveBeenCalledWith(expect.stringContaining('Intelligence Depth: advanced'));\n      expect(consoleSpy).toHaveBeenCalledWith(expect.stringContaining('ADVANCED LEVEL - Approaching enterprise readiness'));\n\n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('CAMPAIGN_INTELLIGENCE_DEMO', () => {\n    it('should demonstrate all intelligence capabilities', async () => {\n      const demo = await CAMPAIGN_INTELLIGENCE_DEMO.demonstrateAllIntelligence();\n\n      expect(demo.errorPatternDemo).toBeDefined();\n      expect(demo.progressAnalysisDemo).toBeDefined();\n      expect(demo.enterpriseIntelligenceDemo).toBeDefined();\n      expect(demo.integrationMetrics).toBeDefined();\n      expect(demo.demonstrationSummary).toBeDefined();\n\n      // Verify demonstration summary\n      expect(demo.demonstrationSummary.intelligenceSystemsCount).toBe(3);\n      expect(demo.demonstrationSummary.analysisMethodsCount).toBe(6);\n      expect(demo.demonstrationSummary.demonstrationCompleteness).toBe(1.0);\n      expect(demo.demonstrationSummary.intelligenceCapabilities).toBeInstanceOf(Array);\n      expect(demo.demonstrationSummary.intelligenceCapabilities).toContain('Error Pattern Recognition');\n      expect(demo.demonstrationSummary.intelligenceCapabilities).toContain('Enterprise Readiness Assessment');\n\n      // Verify integration metrics\n      expect(demo.integrationMetrics.overallIntelligenceIntegration).toBeGreaterThan(0.9);\n      expect(demo.integrationMetrics.errorPatternIntegration).toBeGreaterThan(0.9);\n      expect(demo.integrationMetrics.progressAnalysisIntegration).toBeGreaterThan(0.9);\n      expect(demo.integrationMetrics.enterpriseIntelligenceIntegration).toBeGreaterThan(0.9);\n    });\n  });\n});"],"version":3}