9d6864fa077aba9fd3ccac187f4c6c4f
"use strict";
/**
 * Campaign Infrastructure Types
 * Perfect Codebase Campaign - Type Definitions
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorCategory = exports.PhaseStatus = exports.RecoveryAction = exports.CorruptionSeverity = exports.SafetyEventSeverity = exports.SafetyEventType = exports.SafetyLevel = void 0;
// Enums
var SafetyLevel;
(function (SafetyLevel) {
    SafetyLevel["LOW"] = "LOW";
    SafetyLevel["MEDIUM"] = "MEDIUM";
    SafetyLevel["HIGH"] = "HIGH";
    SafetyLevel["MAXIMUM"] = "MAXIMUM";
})(SafetyLevel || (exports.SafetyLevel = SafetyLevel = {}));
var SafetyEventType;
(function (SafetyEventType) {
    SafetyEventType["CHECKPOINT_CREATED"] = "CHECKPOINT_CREATED";
    SafetyEventType["ROLLBACK_TRIGGERED"] = "ROLLBACK_TRIGGERED";
    SafetyEventType["CORRUPTION_DETECTED"] = "CORRUPTION_DETECTED";
    SafetyEventType["BUILD_FAILURE"] = "BUILD_FAILURE";
    SafetyEventType["TEST_FAILURE"] = "TEST_FAILURE";
    SafetyEventType["EMERGENCY_RECOVERY"] = "EMERGENCY_RECOVERY";
})(SafetyEventType || (exports.SafetyEventType = SafetyEventType = {}));
var SafetyEventSeverity;
(function (SafetyEventSeverity) {
    SafetyEventSeverity["INFO"] = "INFO";
    SafetyEventSeverity["WARNING"] = "WARNING";
    SafetyEventSeverity["ERROR"] = "ERROR";
    SafetyEventSeverity["CRITICAL"] = "CRITICAL";
})(SafetyEventSeverity || (exports.SafetyEventSeverity = SafetyEventSeverity = {}));
var CorruptionSeverity;
(function (CorruptionSeverity) {
    CorruptionSeverity["LOW"] = "LOW";
    CorruptionSeverity["MEDIUM"] = "MEDIUM";
    CorruptionSeverity["HIGH"] = "HIGH";
    CorruptionSeverity["CRITICAL"] = "CRITICAL";
})(CorruptionSeverity || (exports.CorruptionSeverity = CorruptionSeverity = {}));
var RecoveryAction;
(function (RecoveryAction) {
    RecoveryAction["CONTINUE"] = "CONTINUE";
    RecoveryAction["RETRY"] = "RETRY";
    RecoveryAction["ROLLBACK"] = "ROLLBACK";
    RecoveryAction["EMERGENCY_RESTORE"] = "EMERGENCY_RESTORE";
})(RecoveryAction || (exports.RecoveryAction = RecoveryAction = {}));
var PhaseStatus;
(function (PhaseStatus) {
    PhaseStatus["NOT_STARTED"] = "NOT_STARTED";
    PhaseStatus["IN_PROGRESS"] = "IN_PROGRESS";
    PhaseStatus["COMPLETED"] = "COMPLETED";
    PhaseStatus["FAILED"] = "FAILED";
    PhaseStatus["ROLLED_BACK"] = "ROLLED_BACK";
})(PhaseStatus || (exports.PhaseStatus = PhaseStatus = {}));
var ErrorCategory;
(function (ErrorCategory) {
    // High-priority TypeScript errors
    ErrorCategory["TS2352_TYPE_CONVERSION"] = "TS2352";
    ErrorCategory["TS2345_ARGUMENT_MISMATCH"] = "TS2345";
    ErrorCategory["TS2698_SPREAD_TYPE"] = "TS2698";
    ErrorCategory["TS2304_CANNOT_FIND_NAME"] = "TS2304";
    ErrorCategory["TS2362_ARITHMETIC_OPERATION"] = "TS2362";
    // Linting categories
    ErrorCategory["EXPLICIT_ANY_WARNING"] = "explicit-any";
    ErrorCategory["UNUSED_VARIABLES"] = "unused-vars";
    ErrorCategory["CONSOLE_STATEMENTS"] = "no-console";
    // Safety categories
    ErrorCategory["CORRUPTION_DETECTED"] = "corruption";
    ErrorCategory["BUILD_FAILURE"] = "build-fail";
    ErrorCategory["TEST_FAILURE"] = "test-fail";
})(ErrorCategory || (exports.ErrorCategory = ErrorCategory = {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L2JhY2t1cHMvZmlyc3Qtd2F2ZS0yMDI1LTA4LTExVDA1LTE5LTI2LTgxM1ovc3JjL3R5cGVzL2NhbXBhaWduLnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7OztBQXNOSCxRQUFRO0FBQ1IsSUFBWSxXQUtYO0FBTEQsV0FBWSxXQUFXO0lBQ3JCLDBCQUFXLENBQUE7SUFDWCxnQ0FBaUIsQ0FBQTtJQUNqQiw0QkFBYSxDQUFBO0lBQ2Isa0NBQW1CLENBQUE7QUFDckIsQ0FBQyxFQUxXLFdBQVcsMkJBQVgsV0FBVyxRQUt0QjtBQUVELElBQVksZUFPWDtBQVBELFdBQVksZUFBZTtJQUN6Qiw0REFBeUMsQ0FBQTtJQUN6Qyw0REFBeUMsQ0FBQTtJQUN6Qyw4REFBMkMsQ0FBQTtJQUMzQyxrREFBK0IsQ0FBQTtJQUMvQixnREFBNkIsQ0FBQTtJQUM3Qiw0REFBeUMsQ0FBQTtBQUMzQyxDQUFDLEVBUFcsZUFBZSwrQkFBZixlQUFlLFFBTzFCO0FBRUQsSUFBWSxtQkFLWDtBQUxELFdBQVksbUJBQW1CO0lBQzdCLG9DQUFhLENBQUE7SUFDYiwwQ0FBbUIsQ0FBQTtJQUNuQixzQ0FBZSxDQUFBO0lBQ2YsNENBQXFCLENBQUE7QUFDdkIsQ0FBQyxFQUxXLG1CQUFtQixtQ0FBbkIsbUJBQW1CLFFBSzlCO0FBRUQsSUFBWSxrQkFLWDtBQUxELFdBQVksa0JBQWtCO0lBQzVCLGlDQUFXLENBQUE7SUFDWCx1Q0FBaUIsQ0FBQTtJQUNqQixtQ0FBYSxDQUFBO0lBQ2IsMkNBQXFCLENBQUE7QUFDdkIsQ0FBQyxFQUxXLGtCQUFrQixrQ0FBbEIsa0JBQWtCLFFBSzdCO0FBRUQsSUFBWSxjQUtYO0FBTEQsV0FBWSxjQUFjO0lBQ3hCLHVDQUFxQixDQUFBO0lBQ3JCLGlDQUFlLENBQUE7SUFDZix1Q0FBcUIsQ0FBQTtJQUNyQix5REFBdUMsQ0FBQTtBQUN6QyxDQUFDLEVBTFcsY0FBYyw4QkFBZCxjQUFjLFFBS3pCO0FBRUQsSUFBWSxXQU1YO0FBTkQsV0FBWSxXQUFXO0lBQ3JCLDBDQUEyQixDQUFBO0lBQzNCLDBDQUEyQixDQUFBO0lBQzNCLHNDQUF1QixDQUFBO0lBQ3ZCLGdDQUFpQixDQUFBO0lBQ2pCLDBDQUEyQixDQUFBO0FBQzdCLENBQUMsRUFOVyxXQUFXLDJCQUFYLFdBQVcsUUFNdEI7QUFFRCxJQUFZLGFBaUJYO0FBakJELFdBQVksYUFBYTtJQUN2QixrQ0FBa0M7SUFDbEMsa0RBQWlDLENBQUE7SUFDakMsb0RBQW1DLENBQUE7SUFDbkMsOENBQTZCLENBQUE7SUFDN0IsbURBQWtDLENBQUE7SUFDbEMsdURBQXNDLENBQUE7SUFFdEMscUJBQXFCO0lBQ3JCLHNEQUFxQyxDQUFBO0lBQ3JDLGlEQUFnQyxDQUFBO0lBQ2hDLGtEQUFpQyxDQUFBO0lBRWpDLG9CQUFvQjtJQUNwQixtREFBa0MsQ0FBQTtJQUNsQyw2Q0FBNEIsQ0FBQTtJQUM1QiwyQ0FBMEIsQ0FBQTtBQUM1QixDQUFDLEVBakJXLGFBQWEsNkJBQWIsYUFBYSxRQWlCeEIiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L2JhY2t1cHMvZmlyc3Qtd2F2ZS0yMDI1LTA4LTExVDA1LTE5LTI2LTgxM1ovc3JjL3R5cGVzL2NhbXBhaWduLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ2FtcGFpZ24gSW5mcmFzdHJ1Y3R1cmUgVHlwZXNcbiAqIFBlcmZlY3QgQ29kZWJhc2UgQ2FtcGFpZ24gLSBUeXBlIERlZmluaXRpb25zXG4gKi9cblxuZXhwb3J0IGludGVyZmFjZSBDYW1wYWlnbkNvbmZpZyB7XG4gIHBoYXNlczogQ2FtcGFpZ25QaGFzZVtdO1xuICBzYWZldHlTZXR0aW5nczogU2FmZXR5U2V0dGluZ3M7XG4gIHByb2dyZXNzVGFyZ2V0czogUHJvZ3Jlc3NUYXJnZXRzO1xuICB0b29sQ29uZmlndXJhdGlvbjogVG9vbENvbmZpZ3VyYXRpb247XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FtcGFpZ25QaGFzZSB7XG4gIGlkOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgdG9vbHM6IFNjcmlwdFRvb2xbXTtcbiAgc3VjY2Vzc0NyaXRlcmlhOiBTdWNjZXNzQ3JpdGVyaWE7XG4gIHNhZmV0eUNoZWNrcG9pbnRzOiBTYWZldHlDaGVja3BvaW50W107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2NyaXB0VG9vbCB7XG4gIHNjcmlwdFBhdGg6IHN0cmluZztcbiAgcGFyYW1ldGVyczogU2NyaXB0UGFyYW1ldGVycztcbiAgYmF0Y2hTaXplOiBudW1iZXI7XG4gIHNhZmV0eUxldmVsOiBTYWZldHlMZXZlbDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTY3JpcHRQYXJhbWV0ZXJzIHtcbiAgbWF4RmlsZXM/OiBudW1iZXI7XG4gIGF1dG9GaXg/OiBib29sZWFuO1xuICB2YWxpZGF0ZVNhZmV0eT86IGJvb2xlYW47XG4gIHJlc2V0TWV0cmljcz86IGJvb2xlYW47XG4gIGRyeVJ1bj86IGJvb2xlYW47XG4gIFtrZXk6IHN0cmluZ106IHVua25vd247IC8vIEVudGVycHJpc2UgaW50ZWxsaWdlbmNlOiBhbGxvdyBhZGRpdGlvbmFsIGNvbmZpZ3VyYXRpb24gb3B0aW9uc1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN1Y2Nlc3NDcml0ZXJpYSB7XG4gIHR5cGVTY3JpcHRFcnJvcnM/OiBudW1iZXI7XG4gIGxpbnRpbmdXYXJuaW5ncz86IG51bWJlcjtcbiAgYnVpbGRUaW1lPzogbnVtYmVyO1xuICBlbnRlcnByaXNlU3lzdGVtcz86IG51bWJlcjtcbiAgY3VzdG9tVmFsaWRhdGlvbj86ICgpID0+IFByb21pc2U8Ym9vbGVhbj47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2FmZXR5Q2hlY2twb2ludCB7XG4gIGlkOiBzdHJpbmc7XG4gIHRpbWVzdGFtcDogRGF0ZTtcbiAgc3Rhc2hJZDogc3RyaW5nO1xuICBtZXRyaWNzOiBQcm9ncmVzc01ldHJpY3M7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvZ3Jlc3NNZXRyaWNzIHtcbiAgdHlwZVNjcmlwdEVycm9yczoge1xuICAgIGN1cnJlbnQ6IG51bWJlcjtcbiAgICB0YXJnZXQ6IG51bWJlcjtcbiAgICByZWR1Y3Rpb246IG51bWJlcjtcbiAgICBwZXJjZW50YWdlOiBudW1iZXI7XG4gIH07XG4gIGxpbnRpbmdXYXJuaW5nczoge1xuICAgIGN1cnJlbnQ6IG51bWJlcjtcbiAgICB0YXJnZXQ6IG51bWJlcjtcbiAgICByZWR1Y3Rpb246IG51bWJlcjtcbiAgICBwZXJjZW50YWdlOiBudW1iZXI7XG4gIH07XG4gIGJ1aWxkUGVyZm9ybWFuY2U6IHtcbiAgICBjdXJyZW50VGltZTogbnVtYmVyO1xuICAgIHRhcmdldFRpbWU6IG51bWJlcjtcbiAgICBjYWNoZUhpdFJhdGU6IG51bWJlcjtcbiAgICBtZW1vcnlVc2FnZTogbnVtYmVyO1xuICB9O1xuICBlbnRlcnByaXNlU3lzdGVtczoge1xuICAgIGN1cnJlbnQ6IG51bWJlcjtcbiAgICB0YXJnZXQ6IG51bWJlcjtcbiAgICB0cmFuc2Zvcm1lZEV4cG9ydHM6IG51bWJlcjtcbiAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQaGFzZVJlc3VsdCB7XG4gIHBoYXNlSWQ6IHN0cmluZztcbiAgc3VjY2VzczogYm9vbGVhbjtcbiAgbWV0cmljc0ltcHJvdmVtZW50OiBNZXRyaWNzSW1wcm92ZW1lbnQ7XG4gIGZpbGVzUHJvY2Vzc2VkOiBudW1iZXI7XG4gIGVycm9yc0ZpeGVkOiBudW1iZXI7XG4gIHdhcm5pbmdzRml4ZWQ6IG51bWJlcjtcbiAgZXhlY3V0aW9uVGltZTogbnVtYmVyO1xuICBzYWZldHlFdmVudHM6IFNhZmV0eUV2ZW50W107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWV0cmljc0ltcHJvdmVtZW50IHtcbiAgdHlwZVNjcmlwdEVycm9yc1JlZHVjZWQ6IG51bWJlcjtcbiAgbGludGluZ1dhcm5pbmdzUmVkdWNlZDogbnVtYmVyO1xuICBidWlsZFRpbWVJbXByb3ZlZDogbnVtYmVyO1xuICBlbnRlcnByaXNlU3lzdGVtc0FkZGVkOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2FmZXR5RXZlbnQge1xuICB0eXBlOiBTYWZldHlFdmVudFR5cGU7XG4gIHRpbWVzdGFtcDogRGF0ZTtcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgc2V2ZXJpdHk6IFNhZmV0eUV2ZW50U2V2ZXJpdHk7XG4gIGFjdGlvbjogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNhZmV0eVNldHRpbmdzIHtcbiAgbWF4RmlsZXNQZXJCYXRjaDogbnVtYmVyO1xuICBidWlsZFZhbGlkYXRpb25GcmVxdWVuY3k6IG51bWJlcjtcbiAgdGVzdFZhbGlkYXRpb25GcmVxdWVuY3k6IG51bWJlcjtcbiAgY29ycnVwdGlvbkRldGVjdGlvbkVuYWJsZWQ6IGJvb2xlYW47XG4gIGF1dG9tYXRpY1JvbGxiYWNrRW5hYmxlZDogYm9vbGVhbjtcbiAgc3Rhc2hSZXRlbnRpb25EYXlzOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvZ3Jlc3NUYXJnZXRzIHtcbiAgdHlwZVNjcmlwdEVycm9yczogbnVtYmVyO1xuICBsaW50aW5nV2FybmluZ3M6IG51bWJlcjtcbiAgYnVpbGRUaW1lOiBudW1iZXI7XG4gIGVudGVycHJpc2VTeXN0ZW1zOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVG9vbENvbmZpZ3VyYXRpb24ge1xuICBlbmhhbmNlZEVycm9yRml4ZXI6IHN0cmluZztcbiAgZXhwbGljaXRBbnlGaXhlcjogc3RyaW5nO1xuICB1bnVzZWRWYXJpYWJsZXNGaXhlcjogc3RyaW5nO1xuICBjb25zb2xlU3RhdGVtZW50Rml4ZXI6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb3JydXB0aW9uUmVwb3J0IHtcbiAgZGV0ZWN0ZWRGaWxlczogc3RyaW5nW107XG4gIGNvcnJ1cHRpb25QYXR0ZXJuczogQ29ycnVwdGlvblBhdHRlcm5bXTtcbiAgc2V2ZXJpdHk6IENvcnJ1cHRpb25TZXZlcml0eTtcbiAgcmVjb21tZW5kZWRBY3Rpb246IFJlY292ZXJ5QWN0aW9uO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvcnJ1cHRpb25QYXR0ZXJuIHtcbiAgcGF0dGVybjogc3RyaW5nO1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICBmaWxlczogc3RyaW5nW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmFsaWRhdGlvblJlc3VsdCB7XG4gIHN1Y2Nlc3M6IGJvb2xlYW47XG4gIGVycm9yczogc3RyaW5nW107XG4gIHdhcm5pbmdzOiBzdHJpbmdbXTtcbiAgbWV0cmljcz86IFByb2dyZXNzTWV0cmljcztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCdWlsZFZhbGlkYXRpb24ge1xuICBzdWNjZXNzOiBib29sZWFuO1xuICBidWlsZFRpbWU6IG51bWJlcjtcbiAgZXJyb3JzOiBzdHJpbmdbXTtcbiAgd2FybmluZ3M6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRlc3RWYWxpZGF0aW9uIHtcbiAgc3VjY2VzczogYm9vbGVhbjtcbiAgdGVzdHNSdW46IG51bWJlcjtcbiAgdGVzdHNQYXNzZWQ6IG51bWJlcjtcbiAgdGVzdHNGYWlsZWQ6IG51bWJlcjtcbiAgZXJyb3JzOiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEcnlSdW5SZXN1bHQge1xuICB3b3VsZFByb2Nlc3M6IHN0cmluZ1tdO1xuICBlc3RpbWF0ZWRDaGFuZ2VzOiBudW1iZXI7XG4gIHBvdGVudGlhbElzc3Vlczogc3RyaW5nW107XG4gIHNhZmV0eVNjb3JlOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXhlY3V0aW9uUmVzdWx0IHtcbiAgc3VjY2VzczogYm9vbGVhbjtcbiAgZmlsZXNQcm9jZXNzZWQ6IHN0cmluZ1tdO1xuICBjaGFuZ2VzQXBwbGllZDogbnVtYmVyO1xuICBlcnJvcnM6IHN0cmluZ1tdO1xuICB3YXJuaW5nczogc3RyaW5nW107XG4gIGV4ZWN1dGlvblRpbWU6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCYXRjaFJlc3VsdCB7XG4gIGJhdGNoSWQ6IHN0cmluZztcbiAgZmlsZXNQcm9jZXNzZWQ6IHN0cmluZ1tdO1xuICBzdWNjZXNzOiBib29sZWFuO1xuICBlcnJvcnM6IHN0cmluZ1tdO1xuICB3YXJuaW5nczogc3RyaW5nW107XG4gIG1ldHJpY3NDaGFuZ2U6IFBhcnRpYWw8UHJvZ3Jlc3NNZXRyaWNzPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHaXRTdGFzaCB7XG4gIGlkOiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIHRpbWVzdGFtcDogRGF0ZTtcbiAgYnJhbmNoOiBzdHJpbmc7XG4gIHJlZj86IHN0cmluZzsgLy8gR2l0IHN0YXNoIHJlZmVyZW5jZSAoZS5nLiwgc3Rhc2hAezB9KVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBoYXNlUmVwb3J0IHtcbiAgcGhhc2VJZDogc3RyaW5nO1xuICBwaGFzZU5hbWU6IHN0cmluZztcbiAgc3RhcnRUaW1lOiBEYXRlO1xuICBlbmRUaW1lPzogRGF0ZTtcbiAgc3RhdHVzOiBQaGFzZVN0YXR1cztcbiAgbWV0cmljczogUHJvZ3Jlc3NNZXRyaWNzO1xuICBhY2hpZXZlbWVudHM6IHN0cmluZ1tdO1xuICBpc3N1ZXM6IHN0cmluZ1tdO1xuICByZWNvbW1lbmRhdGlvbnM6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByb2dyZXNzUmVwb3J0IHtcbiAgY2FtcGFpZ25JZDogc3RyaW5nO1xuICBvdmVyYWxsUHJvZ3Jlc3M6IG51bWJlcjtcbiAgcGhhc2VzOiBQaGFzZVJlcG9ydFtdO1xuICBjdXJyZW50TWV0cmljczogUHJvZ3Jlc3NNZXRyaWNzO1xuICB0YXJnZXRNZXRyaWNzOiBQcm9ncmVzc01ldHJpY3M7XG4gIGVzdGltYXRlZENvbXBsZXRpb246IERhdGU7XG59XG5cbi8vIEVudW1zXG5leHBvcnQgZW51bSBTYWZldHlMZXZlbCB7XG4gIExPVyA9ICdMT1cnLFxuICBNRURJVU0gPSAnTUVESVVNJyxcbiAgSElHSCA9ICdISUdIJyxcbiAgTUFYSU1VTSA9ICdNQVhJTVVNJyxcbn1cblxuZXhwb3J0IGVudW0gU2FmZXR5RXZlbnRUeXBlIHtcbiAgQ0hFQ0tQT0lOVF9DUkVBVEVEID0gJ0NIRUNLUE9JTlRfQ1JFQVRFRCcsXG4gIFJPTExCQUNLX1RSSUdHRVJFRCA9ICdST0xMQkFDS19UUklHR0VSRUQnLFxuICBDT1JSVVBUSU9OX0RFVEVDVEVEID0gJ0NPUlJVUFRJT05fREVURUNURUQnLFxuICBCVUlMRF9GQUlMVVJFID0gJ0JVSUxEX0ZBSUxVUkUnLFxuICBURVNUX0ZBSUxVUkUgPSAnVEVTVF9GQUlMVVJFJyxcbiAgRU1FUkdFTkNZX1JFQ09WRVJZID0gJ0VNRVJHRU5DWV9SRUNPVkVSWScsXG59XG5cbmV4cG9ydCBlbnVtIFNhZmV0eUV2ZW50U2V2ZXJpdHkge1xuICBJTkZPID0gJ0lORk8nLFxuICBXQVJOSU5HID0gJ1dBUk5JTkcnLFxuICBFUlJPUiA9ICdFUlJPUicsXG4gIENSSVRJQ0FMID0gJ0NSSVRJQ0FMJyxcbn1cblxuZXhwb3J0IGVudW0gQ29ycnVwdGlvblNldmVyaXR5IHtcbiAgTE9XID0gJ0xPVycsXG4gIE1FRElVTSA9ICdNRURJVU0nLFxuICBISUdIID0gJ0hJR0gnLFxuICBDUklUSUNBTCA9ICdDUklUSUNBTCcsXG59XG5cbmV4cG9ydCBlbnVtIFJlY292ZXJ5QWN0aW9uIHtcbiAgQ09OVElOVUUgPSAnQ09OVElOVUUnLFxuICBSRVRSWSA9ICdSRVRSWScsXG4gIFJPTExCQUNLID0gJ1JPTExCQUNLJyxcbiAgRU1FUkdFTkNZX1JFU1RPUkUgPSAnRU1FUkdFTkNZX1JFU1RPUkUnLFxufVxuXG5leHBvcnQgZW51bSBQaGFzZVN0YXR1cyB7XG4gIE5PVF9TVEFSVEVEID0gJ05PVF9TVEFSVEVEJyxcbiAgSU5fUFJPR1JFU1MgPSAnSU5fUFJPR1JFU1MnLFxuICBDT01QTEVURUQgPSAnQ09NUExFVEVEJyxcbiAgRkFJTEVEID0gJ0ZBSUxFRCcsXG4gIFJPTExFRF9CQUNLID0gJ1JPTExFRF9CQUNLJyxcbn1cblxuZXhwb3J0IGVudW0gRXJyb3JDYXRlZ29yeSB7XG4gIC8vIEhpZ2gtcHJpb3JpdHkgVHlwZVNjcmlwdCBlcnJvcnNcbiAgVFMyMzUyX1RZUEVfQ09OVkVSU0lPTiA9ICdUUzIzNTInLFxuICBUUzIzNDVfQVJHVU1FTlRfTUlTTUFUQ0ggPSAnVFMyMzQ1JyxcbiAgVFMyNjk4X1NQUkVBRF9UWVBFID0gJ1RTMjY5OCcsXG4gIFRTMjMwNF9DQU5OT1RfRklORF9OQU1FID0gJ1RTMjMwNCcsXG4gIFRTMjM2Ml9BUklUSE1FVElDX09QRVJBVElPTiA9ICdUUzIzNjInLFxuXG4gIC8vIExpbnRpbmcgY2F0ZWdvcmllc1xuICBFWFBMSUNJVF9BTllfV0FSTklORyA9ICdleHBsaWNpdC1hbnknLFxuICBVTlVTRURfVkFSSUFCTEVTID0gJ3VudXNlZC12YXJzJyxcbiAgQ09OU09MRV9TVEFURU1FTlRTID0gJ25vLWNvbnNvbGUnLFxuXG4gIC8vIFNhZmV0eSBjYXRlZ29yaWVzXG4gIENPUlJVUFRJT05fREVURUNURUQgPSAnY29ycnVwdGlvbicsXG4gIEJVSUxEX0ZBSUxVUkUgPSAnYnVpbGQtZmFpbCcsXG4gIFRFU1RfRkFJTFVSRSA9ICd0ZXN0LWZhaWwnLFxufVxuXG5leHBvcnQgdHlwZSBDaGVja3BvaW50SWQgPSBzdHJpbmc7XG5leHBvcnQgdHlwZSBTdGFzaElkID0gc3RyaW5nO1xuZXhwb3J0IHR5cGUgTWlsZXN0b25lID0gc3RyaW5nO1xuIl0sInZlcnNpb24iOjN9