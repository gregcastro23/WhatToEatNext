{"file":"/Users/GregCastro/Desktop/WhatToEatNext/backups/conservative-wave-2025-08-11T05-21-33-410Z/src/services/campaign/EnterpriseIntelligenceGenerator.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/backups/conservative-wave-2025-08-11T05-21-33-410Z/src/services/campaign/EnterpriseIntelligenceGenerator.test.ts"],"sourcesContent":["/**\n * Enterprise Intelligence Generator Tests\n * Perfect Codebase Campaign - Phase 3 Implementation\n */\n\nimport * as fs from 'fs';\n\nimport {\n  EnterpriseIntelligenceGenerator,\n  CapabilityComplexity,\n  IntegrationMethod,\n  IntegrationPriority,\n  GenerationComplexity,\n} from './EnterpriseIntelligenceGenerator';\nimport { FileAnalysis, FilePriority, FileCategory, TransformationComplexity } from './UnusedExportAnalyzer';\n\n// Mock fs\njest.mock('fs');\nconst mockFs = fs as jest.Mocked<typeof fs>;\n\ndescribe('EnterpriseIntelligenceGenerator', () => {\n  let generator: EnterpriseIntelligenceGenerator;\n\n  beforeEach(() => {\n    generator = new EnterpriseIntelligenceGenerator('test-output');\n    jest.clearAllMocks();\n\n    // Mock fs operations\n    mockFs.promises = {\n      access: jest.fn().mockRejectedValue(new Error('Directory does not exist')),\n      mkdir: jest.fn().mockResolvedValue(undefined),\n      writeFile: jest.fn().mockResolvedValue(undefined),\n    } as unknown as typeof fs.promises;\n  });\n\n  describe('constructor', () => {\n    it('should initialize with default output directory', () => {\n      const defaultGenerator = new EnterpriseIntelligenceGenerator();\n      expect(defaultGenerator).toBeInstanceOf(EnterpriseIntelligenceGenerator);\n    });\n\n    it('should initialize with custom output directory', () => {\n      const customGenerator = new EnterpriseIntelligenceGenerator('custom-output');\n      expect(customGenerator).toBeInstanceOf(EnterpriseIntelligenceGenerator);\n    });\n  });\n\n  describe('generateIntelligenceSystems', () => {\n    const mockFileAnalysis: FileAnalysis = {\n      filePath: '/test/TestFile.ts',\n      priority: FilePriority.HIGH,\n      unusedExports: [\n        {\n          filePath: '/test/TestFile.ts',\n          exportName: 'testFunction',\n          exportType: 'function',\n          lineNumber: 1,\n          isDefault: false,\n          complexity: 5,\n          usageCount: 0,\n        },\n      ],\n      safetyScore: 90,\n      transformationCandidates: [\n        {\n          export: {\n            filePath: '/test/TestFile.ts',\n            exportName: 'testFunction',\n            exportType: 'function',\n            lineNumber: 1,\n            isDefault: false,\n            complexity: 5,\n            usageCount: 0,\n          },\n          intelligenceSystemName: 'TEST_FUNCTION_INTELLIGENCE_SYSTEM',\n          transformationComplexity: TransformationComplexity.MODERATE,\n          safetyScore: 85,\n          estimatedBenefit: 75,\n        },\n      ],\n      category: FileCategory.CORE,\n    };\n\n    it('should generate intelligence systems from file analyses', async () => {\n      const results = await generator.generateIntelligenceSystems([mockFileAnalysis]);\n\n      expect(results).toHaveLength(1);\n      expect(results[0]).toHaveProperty('systemName', 'TEST_FUNCTION_INTELLIGENCE_SYSTEM');\n      expect(results[0]).toHaveProperty('originalExport');\n      expect(results[0]).toHaveProperty('generatedCode');\n      expect(results[0]).toHaveProperty('capabilities');\n      expect(results[0]).toHaveProperty('integrationPoints');\n      expect(results[0]).toHaveProperty('estimatedValue');\n      expect(results[0]).toHaveProperty('complexity');\n    });\n\n    it('should create output directory if it does not exist', async () => {\n      await generator.generateIntelligenceSystems([mockFileAnalysis]);\n\n      expect(mockFs.promises.mkdir).toHaveBeenCalledWith('test-output', { recursive: true });\n    });\n\n    it('should write generated code to files', async () => {\n      await generator.generateIntelligenceSystems([mockFileAnalysis]);\n\n      expect(mockFs.promises.writeFile).toHaveBeenCalledWith(\n        expect.stringContaining('TEST_FUNCTION_INTELLIGENCE_SYSTEM.ts'),\n        expect.stringContaining('TEST_FUNCTION_INTELLIGENCE_SYSTEM'),\n      );\n    });\n\n    it('should handle generation errors gracefully', async () => {\n      const invalidAnalysis = {\n        ...mockFileAnalysis,\n        transformationCandidates: [\n          {\n            ...mockFileAnalysis.transformationCandidates[0],\n            export: {\n              ...mockFileAnalysis.transformationCandidates[0].export,\n              exportName: null as unknown, // Invalid export name\n            },\n          },\n        ],\n      };\n\n      const results = await generator.generateIntelligenceSystems([invalidAnalysis]);\n      expect(results).toHaveLength(0); // Should handle error and continue\n    });\n  });\n\n  describe('selectTemplate', () => {\n    it('should select function template for function exports', () => {\n      const candidate = {\n        export: {\n          filePath: '/test/test.ts',\n          exportName: 'testFunction',\n          exportType: 'function' as const,\n          lineNumber: 1,\n          isDefault: false,\n          complexity: 5,\n          usageCount: 0,\n        },\n        intelligenceSystemName: 'TEST_FUNCTION_INTELLIGENCE_SYSTEM',\n        transformationComplexity: TransformationComplexity.MODERATE,\n        safetyScore: 85,\n        estimatedBenefit: 75,\n      };\n\n      const template = (\n        generator as unknown as { selectTemplate: (candidate: Record<string, unknown>) => { name: string } }\n      ).selectTemplate(candidate);\n      expect(template.name).toBe('Function Intelligence System');\n    });\n\n    it('should select class template for class exports', () => {\n      const candidate = {\n        export: {\n          filePath: '/test/test.ts',\n          exportName: 'TestClass',\n          exportType: 'class' as const,\n          lineNumber: 1,\n          isDefault: false,\n          complexity: 10,\n          usageCount: 0,\n        },\n        intelligenceSystemName: 'TEST_CLASS_INTELLIGENCE_SYSTEM',\n        transformationComplexity: TransformationComplexity.COMPLEX,\n        safetyScore: 80,\n        estimatedBenefit: 85,\n      };\n\n      const template = (\n        generator as unknown as { selectTemplate: (candidate: Record<string, unknown>) => { name: string } }\n      ).selectTemplate(candidate);\n      expect(template.name).toBe('Class Intelligence System');\n    });\n\n    it('should select type template for interface exports', () => {\n      const candidate = {\n        export: {\n          filePath: '/test/test.ts',\n          exportName: 'TestInterface',\n          exportType: 'interface' as const,\n          lineNumber: 1,\n          isDefault: false,\n          complexity: 3,\n          usageCount: 0,\n        },\n        intelligenceSystemName: 'TEST_INTERFACE_INTELLIGENCE_SYSTEM',\n        transformationComplexity: TransformationComplexity.SIMPLE,\n        safetyScore: 95,\n        estimatedBenefit: 60,\n      };\n\n      const template = (\n        generator as unknown as { selectTemplate: (candidate: Record<string, unknown>) => { name: string } }\n      ).selectTemplate(candidate);\n      expect(template.name).toBe('Type Intelligence System');\n    });\n\n    it('should select data template for const exports', () => {\n      const candidate = {\n        export: {\n          filePath: '/test/test.ts',\n          exportName: 'TEST_CONSTANT',\n          exportType: 'const' as const,\n          lineNumber: 1,\n          isDefault: false,\n          complexity: 2,\n          usageCount: 0,\n        },\n        intelligenceSystemName: 'TEST_CONSTANT_INTELLIGENCE_SYSTEM',\n        transformationComplexity: TransformationComplexity.SIMPLE,\n        safetyScore: 90,\n        estimatedBenefit: 50,\n      };\n\n      const template = (\n        generator as unknown as { selectTemplate: (candidate: Record<string, unknown>) => { name: string } }\n      ).selectTemplate(candidate);\n      expect(template.name).toBe('Data Intelligence System');\n    });\n  });\n\n  describe('generateCapabilities', () => {\n    it('should generate function-specific capabilities', () => {\n      const candidate = {\n        export: {\n          filePath: '/test/test.ts',\n          exportName: 'testFunction',\n          exportType: 'function' as const,\n          lineNumber: 1,\n          isDefault: false,\n          complexity: 5,\n          usageCount: 0,\n        },\n        intelligenceSystemName: 'TEST_FUNCTION_INTELLIGENCE_SYSTEM',\n        transformationComplexity: TransformationComplexity.MODERATE,\n        safetyScore: 85,\n        estimatedBenefit: 75,\n      };\n\n      const template = (\n        generator as unknown as { selectTemplate: (candidate: Record<string, unknown>) => { name: string } }\n      ).selectTemplate(candidate);\n      const capabilities = (\n        generator as unknown as {\n          generateCapabilities: (\n            candidate: Record<string, unknown>,\n            template: Record<string, unknown>,\n          ) => Record<string, unknown>;\n        }\n      ).generateCapabilities(candidate, template);\n\n      expect((capabilities as Record<string, unknown>).some((cap: any) => cap.name === 'analyzeFunction')).toBe(true);\n      expect(capabilities.length).toBeGreaterThan(2);\n    });\n\n    it('should generate class-specific capabilities', () => {\n      const candidate = {\n        export: {\n          filePath: '/test/test.ts',\n          exportName: 'TestClass',\n          exportType: 'class' as const,\n          lineNumber: 1,\n          isDefault: false,\n          complexity: 10,\n          usageCount: 0,\n        },\n        intelligenceSystemName: 'TEST_CLASS_INTELLIGENCE_SYSTEM',\n        transformationComplexity: TransformationComplexity.COMPLEX,\n        safetyScore: 80,\n        estimatedBenefit: 85,\n      };\n\n      const template = (\n        generator as unknown as { selectTemplate: (candidate: Record<string, unknown>) => { name: string } }\n      ).selectTemplate(candidate);\n      const capabilities = (\n        generator as unknown as {\n          generateCapabilities: (\n            candidate: Record<string, unknown>,\n            template: Record<string, unknown>,\n          ) => Record<string, unknown>;\n        }\n      ).generateCapabilities(candidate, template);\n\n      expect((capabilities as Record<string, unknown>).some((cap: any) => cap.name === 'analyzeClassStructure')).toBe(\n        true,\n      );\n    });\n\n    it('should add advanced capabilities for complex exports', () => {\n      const candidate = {\n        export: {\n          filePath: '/test/test.ts',\n          exportName: 'complexFunction',\n          exportType: 'function' as const,\n          lineNumber: 1,\n          isDefault: false,\n          complexity: 25,\n          usageCount: 0,\n        },\n        intelligenceSystemName: 'COMPLEX_FUNCTION_INTELLIGENCE_SYSTEM',\n        transformationComplexity: TransformationComplexity.VERY_COMPLEX,\n        safetyScore: 70,\n        estimatedBenefit: 90,\n      };\n\n      const template = (\n        generator as unknown as { selectTemplate: (candidate: Record<string, unknown>) => { name: string } }\n      ).selectTemplate(candidate);\n      const capabilities = (\n        generator as unknown as {\n          generateCapabilities: (\n            candidate: Record<string, unknown>,\n            template: Record<string, unknown>,\n          ) => Record<string, unknown>;\n        }\n      ).generateCapabilities(candidate, template);\n\n      expect(\n        (capabilities as Record<string, unknown>).some((cap: any) => cap.name === 'generateAdvancedInsights'),\n      ).toBe(true);\n    });\n  });\n\n  describe('generateIntegrationPoints', () => {\n    it('should generate integration points for intelligence systems', () => {\n      const candidate = {\n        export: {\n          filePath: '/test/test.ts',\n          exportName: 'testFunction',\n          exportType: 'function' as const,\n          lineNumber: 1,\n          isDefault: false,\n          complexity: 5,\n          usageCount: 0,\n        },\n        intelligenceSystemName: 'TEST_FUNCTION_INTELLIGENCE_SYSTEM',\n        transformationComplexity: TransformationComplexity.MODERATE,\n        safetyScore: 85,\n        estimatedBenefit: 75,\n      };\n\n      const integrationPoints = (\n        generator as unknown as {\n          generateIntegrationPoints: (candidate: Record<string, unknown>, path: string) => Record<string, unknown>;\n        }\n      ).generateIntegrationPoints(candidate, '/test/test.ts');\n\n      expect(integrationPoints.length).toBeGreaterThan(0);\n      expect(\n        (integrationPoints as Record<string, unknown>).some((ip: any) => ip.method === IntegrationMethod.DIRECT_IMPORT),\n      ).toBe(true);\n      expect(\n        (integrationPoints as Record<string, unknown>).some((ip: any) => ip.method === IntegrationMethod.API_ENDPOINT),\n      ).toBe(true);\n    });\n\n    it('should include original file integration for safe candidates', () => {\n      const candidate = {\n        export: {\n          filePath: '/test/test.ts',\n          exportName: 'safeFunction',\n          exportType: 'function' as const,\n          lineNumber: 1,\n          isDefault: false,\n          complexity: 3,\n          usageCount: 0,\n        },\n        intelligenceSystemName: 'SAFE_FUNCTION_INTELLIGENCE_SYSTEM',\n        transformationComplexity: TransformationComplexity.SIMPLE,\n        safetyScore: 95,\n        estimatedBenefit: 70,\n      };\n\n      const integrationPoints = (\n        generator as unknown as {\n          generateIntegrationPoints: (candidate: Record<string, unknown>, path: string) => Record<string, unknown>;\n        }\n      ).generateIntegrationPoints(candidate, '/test/test.ts');\n\n      expect((integrationPoints as Record<string, unknown>).some((ip: any) => ip.target === '/test/test.ts')).toBe(\n        true,\n      );\n    });\n  });\n\n  describe('generateCode', () => {\n    it('should generate complete intelligence system code', () => {\n      const candidate = {\n        export: {\n          filePath: '/test/test.ts',\n          exportName: 'testFunction',\n          exportType: 'function' as const,\n          lineNumber: 1,\n          isDefault: false,\n          complexity: 5,\n          usageCount: 0,\n        },\n        intelligenceSystemName: 'TEST_FUNCTION_INTELLIGENCE_SYSTEM',\n        transformationComplexity: TransformationComplexity.MODERATE,\n        safetyScore: 85,\n        estimatedBenefit: 75,\n      };\n\n      const template = (\n        generator as unknown as { selectTemplate: (candidate: Record<string, unknown>) => { name: string } }\n      ).selectTemplate(candidate);\n      const capabilities = (\n        generator as unknown as {\n          generateCapabilities: (\n            candidate: Record<string, unknown>,\n            template: Record<string, unknown>,\n          ) => Record<string, unknown>;\n        }\n      ).generateCapabilities(candidate, template);\n      const code = (\n        generator as unknown as {\n          generateCode: (\n            candidate: Record<string, unknown>,\n            template: Record<string, unknown>,\n            capabilities: Record<string, unknown>,\n          ) => string;\n        }\n      ).generateCode(candidate, template, capabilities);\n\n      expect(code).toContain('TEST_FUNCTION_INTELLIGENCE_SYSTEM');\n      expect(code).toContain('class TEST_FUNCTION_INTELLIGENCE_SYSTEM');\n      expect(code).toContain('analyzePatterns');\n      expect(code).toContain('generateRecommendations');\n      expect(code).toContain('demonstrateCapabilities');\n      expect(code).toContain('export const test_function_intelligence_system');\n    });\n\n    it('should include original export information in comments', () => {\n      const candidate = {\n        export: {\n          filePath: '/test/test.ts',\n          exportName: 'originalFunction',\n          exportType: 'function' as const,\n          lineNumber: 10,\n          isDefault: false,\n          complexity: 8,\n          usageCount: 0,\n        },\n        intelligenceSystemName: 'ORIGINAL_FUNCTION_INTELLIGENCE_SYSTEM',\n        transformationComplexity: TransformationComplexity.MODERATE,\n        safetyScore: 80,\n        estimatedBenefit: 70,\n      };\n\n      const template = (\n        generator as unknown as { selectTemplate: (candidate: Record<string, unknown>) => { name: string } }\n      ).selectTemplate(candidate);\n      const capabilities = (\n        generator as unknown as {\n          generateCapabilities: (\n            candidate: Record<string, unknown>,\n            template: Record<string, unknown>,\n          ) => Record<string, unknown>;\n        }\n      ).generateCapabilities(candidate, template);\n      const code = (\n        generator as unknown as {\n          generateCode: (\n            candidate: Record<string, unknown>,\n            template: Record<string, unknown>,\n            capabilities: Record<string, unknown>,\n          ) => string;\n        }\n      ).generateCode(candidate, template, capabilities);\n\n      expect(code).toContain('Original Export: originalFunction (function)');\n      expect(code).toContain('Estimated Value: 70/100');\n    });\n  });\n\n  describe('calculateEstimatedValue', () => {\n    it('should calculate value based on candidate benefit and capabilities', () => {\n      const candidate = {\n        export: {\n          filePath: '/test/test.ts',\n          exportName: 'testFunction',\n          exportType: 'function' as const,\n          lineNumber: 1,\n          isDefault: false,\n          complexity: 5,\n          usageCount: 0,\n        },\n        intelligenceSystemName: 'TEST_FUNCTION_INTELLIGENCE_SYSTEM',\n        transformationComplexity: TransformationComplexity.MODERATE,\n        safetyScore: 85,\n        estimatedBenefit: 50,\n      };\n\n      const capabilities = [\n        {\n          name: 'basicCapability',\n          description: 'Basic capability',\n          implementation: 'return {};',\n          complexity: CapabilityComplexity.BASIC,\n        },\n        {\n          name: 'advancedCapability',\n          description: 'Advanced capability',\n          implementation: 'return {};',\n          complexity: CapabilityComplexity.ADVANCED,\n        },\n      ];\n\n      const value = (\n        generator as unknown as {\n          calculateEstimatedValue: (\n            candidate: Record<string, unknown>,\n            capabilities: Record<string, unknown>,\n          ) => number;\n        }\n      ).calculateEstimatedValue(candidate, capabilities);\n      expect(value).toBeGreaterThan(50); // Should be higher than base benefit\n      expect(value).toBeLessThanOrEqual(100); // Should be capped at 100\n    });\n  });\n\n  describe('assessGenerationComplexity', () => {\n    it('should assess SIMPLE complexity for simple candidates', () => {\n      const candidate = {\n        export: {\n          filePath: '/test/test.ts',\n          exportName: 'simpleFunction',\n          exportType: 'const' as const,\n          lineNumber: 1,\n          isDefault: false,\n          complexity: 2,\n          usageCount: 0,\n        },\n        intelligenceSystemName: 'SIMPLE_FUNCTION_INTELLIGENCE_SYSTEM',\n        transformationComplexity: TransformationComplexity.SIMPLE,\n        safetyScore: 95,\n        estimatedBenefit: 40,\n      };\n\n      const capabilities = [\n        {\n          name: 'basicCapability',\n          description: 'Basic capability',\n          implementation: 'return {};',\n          complexity: CapabilityComplexity.BASIC,\n        },\n      ];\n\n      const complexity = (\n        generator as unknown as {\n          assessGenerationComplexity: (\n            candidate: Record<string, unknown>,\n            capabilities: Record<string, unknown>,\n          ) => GenerationComplexity;\n        }\n      ).assessGenerationComplexity(candidate, capabilities);\n      expect(complexity).toBe(GenerationComplexity.SIMPLE);\n    });\n\n    it('should assess VERY_COMPLEX complexity for complex candidates', () => {\n      const candidate = {\n        export: {\n          filePath: '/test/test.ts',\n          exportName: 'complexFunction',\n          exportType: 'class' as const,\n          lineNumber: 1,\n          isDefault: false,\n          complexity: 30,\n          usageCount: 0,\n        },\n        intelligenceSystemName: 'COMPLEX_FUNCTION_INTELLIGENCE_SYSTEM',\n        transformationComplexity: TransformationComplexity.VERY_COMPLEX,\n        safetyScore: 60,\n        estimatedBenefit: 95,\n      };\n\n      const capabilities = [\n        {\n          name: 'expertCapability',\n          description: 'Expert capability',\n          implementation: 'return {};',\n          complexity: CapabilityComplexity.EXPERT,\n        },\n      ];\n\n      const complexity = (\n        generator as unknown as {\n          assessGenerationComplexity: (\n            candidate: Record<string, unknown>,\n            capabilities: Record<string, unknown>,\n          ) => GenerationComplexity;\n        }\n      ).assessGenerationComplexity(candidate, capabilities);\n      expect(complexity).toBe(GenerationComplexity.VERY_COMPLEX);\n    });\n  });\n\n  describe('generateSummary', () => {\n    it('should generate comprehensive summary of results', () => {\n      const mockResults = [\n        {\n          systemName: 'SYSTEM_1',\n          filePath: '/output/SYSTEM_1.ts',\n          originalExport: {\n            filePath: '/test/test1.ts',\n            exportName: 'function1',\n            exportType: 'function' as const,\n            lineNumber: 1,\n            isDefault: false,\n            complexity: 5,\n            usageCount: 0,\n          },\n          generatedCode: 'code1',\n          capabilities: [\n            { name: 'cap1', description: 'desc1', implementation: 'impl1', complexity: CapabilityComplexity.BASIC },\n            {\n              name: 'cap2',\n              description: 'desc2',\n              implementation: 'impl2',\n              complexity: CapabilityComplexity.INTERMEDIATE,\n            },\n          ],\n          integrationPoints: [\n            {\n              target: 'target1',\n              method: IntegrationMethod.DIRECT_IMPORT,\n              code: 'code1',\n              priority: IntegrationPriority.HIGH,\n            },\n          ],\n          estimatedValue: 75,\n          complexity: GenerationComplexity.MODERATE,\n        },\n        {\n          systemName: 'SYSTEM_2',\n          filePath: '/output/SYSTEM_2.ts',\n          originalExport: {\n            filePath: '/test/test2.ts',\n            exportName: 'class2',\n            exportType: 'class' as const,\n            lineNumber: 1,\n            isDefault: false,\n            complexity: 10,\n            usageCount: 0,\n          },\n          generatedCode: 'code2',\n          capabilities: [\n            { name: 'cap3', description: 'desc3', implementation: 'impl3', complexity: CapabilityComplexity.ADVANCED },\n          ],\n          integrationPoints: [\n            {\n              target: 'target2',\n              method: IntegrationMethod.API_ENDPOINT,\n              code: 'code2',\n              priority: IntegrationPriority.MEDIUM,\n            },\n          ],\n          estimatedValue: 85,\n          complexity: GenerationComplexity.COMPLEX,\n        },\n      ];\n\n      const summary = generator.generateSummary(mockResults);\n\n      expect(summary.totalSystemsGenerated).toBe(2);\n      expect(summary.totalCapabilitiesAdded).toBe(3);\n      expect(summary.totalIntegrationPoints).toBe(2);\n      expect(summary.estimatedTotalValue).toBe(160);\n      expect(summary.generationsByCategory).toHaveProperty('function', 1);\n      expect(summary.generationsByCategory).toHaveProperty('class', 1);\n    });\n  });\n\n  describe('generateIntegrationGuide', () => {\n    it('should generate comprehensive integration guide', () => {\n      const mockResults = [\n        {\n          systemName: 'TEST_SYSTEM_INTELLIGENCE_SYSTEM',\n          filePath: '/output/TEST_SYSTEM_INTELLIGENCE_SYSTEM.ts',\n          originalExport: {\n            filePath: '/test/test.ts',\n            exportName: 'testFunction',\n            exportType: 'function' as const,\n            lineNumber: 1,\n            isDefault: false,\n            complexity: 5,\n            usageCount: 0,\n          },\n          generatedCode: 'code',\n          capabilities: [],\n          integrationPoints: [\n            {\n              target: 'src/components/dashboard/IntelligenceDashboard.tsx',\n              method: IntegrationMethod.DEPENDENCY_INJECTION,\n              code: 'dashboard integration code',\n              priority: IntegrationPriority.MEDIUM,\n            },\n          ],\n          estimatedValue: 75,\n          complexity: GenerationComplexity.MODERATE,\n        },\n      ];\n\n      const guide = generator.generateIntegrationGuide(mockResults);\n\n      expect(guide).toContain('# Enterprise Intelligence Systems Integration Guide');\n      expect(guide).toContain('Generated 1 intelligence systems');\n      expect(guide).toContain('TEST_SYSTEM_INTELLIGENCE_SYSTEM');\n      expect(guide).toContain('Integration Steps');\n      expect(guide).toContain('Dashboard Integration');\n      expect(guide).toContain('Next Steps');\n    });\n  });\n});\n"],"version":3}