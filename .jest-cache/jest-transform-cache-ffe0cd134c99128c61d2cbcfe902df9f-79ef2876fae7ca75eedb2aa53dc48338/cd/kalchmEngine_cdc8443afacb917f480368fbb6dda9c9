73e489588d92ae82194a85ff0ac9131d
"use strict";
/**
 * Kalchm and Monica Constants Calculation Engine
 *
 * This module implements the core alchemical calculations using the exact formulas
 * for Kalchm (K_alchm) and Monica Constant (M) as specified in the system requirements.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.toElementalProperties = exports.calculateKalchmResults = exports.calculateElementalValues = exports.calculateAlchemicalProperties = exports.calculateMonicaConstant = exports.calculateKAlchm = exports.calculateGregsEnergy = exports.calculateReactivity = exports.calculateEntropy = exports.calculateHeat = void 0;
const calculationCache_1 = require("../../utils/calculationCache");
/**
 * Calculate Heat using the exact formula:
 * Heat = (Spirit^2 + Fire^2) / (Substance + Essence + Matter + Water + (Air || 0) + (Earth || 0))^2
 */
function calculateHeat(Spirit, Fire, Substance, Essence, Matter, Water, Air, Earth) {
    const numerator = Math.pow(Spirit, 2) + Math.pow(Fire, 2);
    const denominator = Math.pow(Substance + Essence + Matter + Water + (Air || 0) + (Earth || 0), 2);
    // Prevent division by zero
    if (denominator === 0)
        return 0.5;
    return numerator / denominator;
}
exports.calculateHeat = calculateHeat;
/**
 * Calculate Entropy using the exact formula:
 * Entropy = (Spirit^2 + Substance^2 + Fire^2 + Air^2) / (Essence + Matter + Earth + Water)^2
 */
function calculateEntropy(Spirit, Substance, Fire, Air, Essence, Matter, Earth, Water) {
    const numerator = Math.pow(Spirit, 2) + Math.pow(Substance, 2) + Math.pow(Fire, 2) + Math.pow(Air, 2);
    const denominator = Math.pow(Essence + Matter + (Earth || 0) + (Water || 0), 2);
    // Prevent division by zero
    if (denominator === 0)
        return 0.5;
    return numerator / denominator;
}
exports.calculateEntropy = calculateEntropy;
/**
 * Calculate Reactivity using the exact formula:
 * Reactivity = (Spirit^2 + Substance^2 + Essence^2 + Fire^2 + Air^2 + Water^2) / (Matter + Earth)^2
 */
function calculateReactivity(Spirit, Substance, Essence, Fire, Air, Water, Matter, Earth) {
    const numerator = Math.pow(Spirit, 2) + Math.pow(Substance, 2) + Math.pow(Essence, 2)
        + Math.pow(Fire, 2) + Math.pow(Air, 2) + Math.pow(Water, 2);
    const denominator = Math.pow((Matter || 0) + (Earth || 0), 2);
    // Prevent division by zero
    if (denominator === 0)
        return 0.5;
    return numerator / denominator;
}
exports.calculateReactivity = calculateReactivity;
/**
 * Calculate Greg's Energy using the exact formula:
 * Greg's Energy = Heat - (Entropy × Reactivity)
 */
function calculateGregsEnergy(heat, entropy, reactivity) {
    return heat - (entropy * reactivity);
}
exports.calculateGregsEnergy = calculateGregsEnergy;
/**
 * Calculate Kalchm (K_alchm) using the exact formula:
 * K_alchm = (Spirit^Spirit * Essence^Essence) / (Matter^Matter * Substance^Substance)
 */
function calculateKAlchm(Spirit, Essence, Matter, Substance) {
    // Ensure all values are positive to avoid NaN in power calculations
    const safespirit = Math.max(0.1, Spirit);
    const safeessence = Math.max(0.1, Essence);
    const safematter = Math.max(0.1, Matter);
    const safesubstance = Math.max(0.1, Substance);
    const numerator = Math.pow(safespirit, safespirit) * Math.pow(safeessence, safeessence);
    const denominator = Math.pow(safematter, safematter) * Math.pow(safesubstance, safesubstance);
    // Prevent division by zero
    if (denominator === 0)
        return 1.0;
    return numerator / denominator;
}
exports.calculateKAlchm = calculateKAlchm;
/**
 * Calculate Monica Constant using the exact formula:
 * M = -Greg's Energy / (Reactivity × ln(K_alchm))
 */
function calculateMonicaConstant(gregsEnergy, reactivity, K_alchm) {
    // Check for valid K_alchm
    if (K_alchm <= 0)
        return NaN;
    const ln_K = Math.log(K_alchm);
    // Check for valid natural log
    if (ln_K === 0)
        return NaN;
    return -gregsEnergy / (reactivity * ln_K);
}
exports.calculateMonicaConstant = calculateMonicaConstant;
/**
 * Map planetary positions to alchemical properties
 * Based on traditional planetary correspondences
 */
function calculateAlchemicalProperties(planetaryPositions) {
    const properties = {
        Spirit: 0,
        Essence: 0,
        Matter: 0,
        Substance: 0
    };
    // Planetary to alchemical property mappings
    const planetaryMappings = {
        Sun: { Spirit: 1.0, Essence: 0.3, Matter: 0.2, Substance: 0.1 },
        moon: { Spirit: 0.2, Essence: 1.0, Matter: 0.8, Substance: 0.3 },
        Mercury: { Spirit: 0.8, Essence: 0.2, Matter: 0.1, Substance: 0.9 },
        Venus: { Spirit: 0.3, Essence: 0.9, Matter: 0.7, Substance: 0.2 },
        Mars: { Spirit: 0.6, Essence: 0.8, Matter: 0.9, Substance: 0.1 },
        Jupiter: { Spirit: 0.9, Essence: 0.7, Matter: 0.2, Substance: 0.3 },
        Saturn: { Spirit: 0.7, Essence: 0.1, Matter: 0.9, Substance: 0.8 },
        Uranus: { Spirit: 0.4, Essence: 0.6, Matter: 0.3, Substance: 0.7 },
        Neptune: { Spirit: 0.2, Essence: 0.8, Matter: 0.4, Substance: 0.6 },
        Pluto: { Spirit: 0.5, Essence: 0.7, Matter: 0.9, Substance: 0.4 }
    };
    // Process each planet
    Object.entries(planetaryPositions || {}).forEach(([planet, position]) => {
        const planetKey = (planet === null || planet === void 0 ? void 0 : planet.charAt(0).toUpperCase()) + (planet === null || planet === void 0 ? void 0 : planet.slice(1).toLowerCase());
        const mapping = planetaryMappings[planetKey];
        if (mapping && position) {
            // Base contribution
            let strength = 1.0;
            // Apply dignity modifiers if available
            if (position.sign) {
                strength *= getDignityModifier(planet, position.sign);
            }
            // Add to properties
            properties.Spirit += (mapping.Spirit || 0) * strength;
            properties.Essence += (mapping.Essence || 0) * strength;
            properties.Matter += (mapping.Matter || 0) * strength;
            properties.Substance += (mapping.Substance || 0) * strength;
        }
    });
    // Normalize to reasonable ranges (1-10 scale as in the example)
    const total = properties.Spirit + properties.Essence + properties.Matter + properties.Substance;
    if (total > 0) {
        const scale = 20 / total; // Scale to approximately match example values
        properties.Spirit = Math.max(1, properties.Spirit * scale);
        properties.Essence = Math.max(1, properties.Essence * scale);
        properties.Matter = Math.max(1, properties.Matter * scale);
        properties.Substance = Math.max(1, properties.Substance * scale);
    }
    return properties;
}
exports.calculateAlchemicalProperties = calculateAlchemicalProperties;
/**
 * Calculate elemental values from zodiac signs and planetary influences
 */
function calculateElementalValues(planetaryPositions) {
    const elements = { Fire: 0, Water: 0, Air: 0, Earth: 0
    };
    // Sign to element mapping
    const signElements = {
        aries: 'Fire', leo: 'Fire', sagittarius: 'Fire',
        cancer: 'Water', scorpio: 'Water', pisces: 'Water',
        gemini: 'Air', libra: 'Air', aquarius: 'Air',
        taurus: 'Earth', virgo: 'Earth', capricorn: 'Earth'
    };
    // Process each planet's sign
    Object.entries(planetaryPositions || {}).forEach(([planet, position]) => {
        var _a;
        if (position.sign) {
            const element = signElements[(_a = position.sign) === null || _a === void 0 ? void 0 : _a.toLowerCase()];
            if (element) {
                // Weight by planet importance
                let weight = 1.0;
                const planetName = (planet === null || planet === void 0 ? void 0 : planet.charAt(0).toUpperCase()) + (planet === null || planet === void 0 ? void 0 : planet.slice(1).toLowerCase());
                if (planetName === 'Sun' || planetName === 'Moon') {
                    weight = 2.0;
                }
                else if (['Mercury', 'Venus', 'Mars'].includes(planetName)) {
                    weight = 1.5;
                }
                elements[element] += weight;
            }
        }
    });
    // Normalize to 0.1-1.0 range as in the example
    const total = elements.Fire + elements.Water + elements.Air + elements.Earth;
    if (total > 0) {
        const scale = 2.9 / total; // Scale to match example range
        elements.Fire = Math.max(0.1, Math.min(1.0, elements.Fire * scale));
        elements.Water = Math.max(0.1, Math.min(1.0, elements.Water * scale));
        elements.Air = Math.max(0.1, Math.min(1.0, elements.Air * scale));
        elements.Earth = Math.max(0.1, Math.min(1.0, elements.Earth * scale));
    }
    return elements;
}
exports.calculateElementalValues = calculateElementalValues;
/**
 * Get dignity modifier for a planet in a sign
 */
function getDignityModifier(planet, sign) {
    var _a;
    const dignities = {
        Sun: {},
        moon: {},
        Mercury: {},
        Venus: {},
        Mars: {},
        Jupiter: {},
        Saturn: { capricorn: 1.5, aquarius: 1.5, libra: 1.3, cancer: 0.7, leo: 0.7, aries: 0.5 }
    };
    const planetKey = (planet === null || planet === void 0 ? void 0 : planet.charAt(0).toUpperCase()) + (planet === null || planet === void 0 ? void 0 : planet.slice(1).toLowerCase());
    const signKey = sign === null || sign === void 0 ? void 0 : sign.toLowerCase();
    return ((_a = dignities[planetKey]) === null || _a === void 0 ? void 0 : _a[signKey]) || 1.0;
}
/**
 * Main Kalchm calculation function
 * Integrates all calculations and returns complete results
 */
function calculateKalchmResults(planetaryPositions) {
    const cacheKey = `kalchm_${JSON.stringify(planetaryPositions)}`;
    return (0, calculationCache_1.getCachedCalculation)(cacheKey, { positions: planetaryPositions }, () => {
        var _a;
        // Calculate alchemical properties
        const alchemicalProperties = calculateAlchemicalProperties(planetaryPositions);
        // Calculate elemental values
        const elementalValues = calculateElementalValues(planetaryPositions);
        // Calculate thermodynamic properties
        const heat = calculateHeat(alchemicalProperties.Spirit, elementalValues.Fire, alchemicalProperties.Substance, alchemicalProperties.Essence, alchemicalProperties.Matter, elementalValues.Water, elementalValues.Air, elementalValues.Earth);
        const entropy = calculateEntropy(alchemicalProperties.Spirit, alchemicalProperties.Substance, elementalValues.Fire, elementalValues.Air, alchemicalProperties.Essence, alchemicalProperties.Matter, elementalValues.Earth, elementalValues.Water);
        const reactivity = calculateReactivity(alchemicalProperties.Spirit, alchemicalProperties.Substance, alchemicalProperties.Essence, elementalValues.Fire, elementalValues.Air, elementalValues.Water, alchemicalProperties.Matter, elementalValues.Earth);
        const gregsEnergy = calculateGregsEnergy(heat, entropy, reactivity);
        const kalchm = calculateKAlchm(alchemicalProperties.Spirit, alchemicalProperties.Essence, alchemicalProperties.Matter, alchemicalProperties.Substance);
        const monicaConstant = calculateMonicaConstant(gregsEnergy, reactivity, kalchm);
        // Determine dominant element and property
        const dominantElement = Object.entries(elementalValues)
            .reduce((a, b) => elementalValues[a[0]] > elementalValues[b[0]] ? a : b)[0];
        const dominantProperty = Object.entries(alchemicalProperties)
            .reduce((a, b) => alchemicalProperties[a[0]] > alchemicalProperties[b[0]] ? a : b)[0];
        return {
            alchemicalProperties,
            elementalValues,
            thermodynamics: {
                heat,
                entropy,
                reactivity,
                gregsEnergy,
                kalchm,
                monicaConstant
            },
            dominantElement,
            dominantProperty,
            timestamp: (_a = new Date()) === null || _a === void 0 ? void 0 : _a.toISOString()
        };
    }, 300000 // 5 minute cache
    );
}
exports.calculateKalchmResults = calculateKalchmResults;
/**
 * Convert KalchmResult to ElementalProperties format for compatibility
 */
function toElementalProperties(result) {
    var _a, _b, _c;
    return { Fire: (_a = result === null || result === void 0 ? void 0 : result.elementalValues) === null || _a === void 0 ? void 0 : _a.Fire, Water: (_b = result === null || result === void 0 ? void 0 : result.elementalValues) === null || _b === void 0 ? void 0 : _b.Water, Air: (_c = result === null || result === void 0 ? void 0 : result.elementalValues) === null || _c === void 0 ? void 0 : _c.Air, Earth: result.elementalValues.Earth };
}
exports.toElementalProperties = toElementalProperties;
/**
 * Get dominant property from alchemical properties
 */
function getDominantProperty(properties) {
    return Object.entries(properties)
        .reduce((max, [key, value]) => value > max.value ? { key: key, value } : max, { key: 'Spirit', value: 0 }).key;
}
/**
 * Default export providing all kalchm engine functionality
 */
const kalchmEngine = {
    calculateHeat,
    calculateEntropy,
    calculateReactivity,
    calculateGregsEnergy,
    calculateKAlchm,
    calculateMonicaConstant,
    calculateAlchemicalProperties,
    calculateElementalValues,
    calculateKalchmResults,
    toElementalProperties,
    getDominantProperty
};
exports.default = kalchmEngine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,