bcfb6c2c79aa36094fa5771bfc3764b5
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ElementalRecommendationService = void 0;
const elementalUtils_1 = require("@/utils/elementalUtils");
const elementalConstants_1 = require("@/constants/elementalConstants");
/**
 * Service to generate comprehensive elemental-based food and recipe recommendations
 */
class ElementalRecommendationService {
    /**
     * Generates a complete recommendation based on elemental properties
     * @param properties The elemental properties to base recommendations on
     * @returns A comprehensive recommendation object
     */
    static generateRecommendation(properties) {
        var _a, _b;
        const profile = elementalUtils_1.elementalUtils.getElementalProfile(properties);
        const dominantElement = this.getDominantElement(properties);
        // Fix TS2339: Property access on service object using safe type casting
        const utilsService = elementalUtils_1.elementalUtils;
        return {
            elementalBalance: properties,
            dominantElement,
            cookingTechniques: elementalUtils_1.elementalUtils.getSuggestedCookingTechniques(properties),
            // âœ… Pattern MM-1: getComplementaryElement returns element key, convert to string and wrap in array
            complementaryIngredients: [elementalUtils_1.elementalUtils.getComplementaryElement(dominantElement)],
            flavorProfiles: ((_a = utilsService === null || utilsService === void 0 ? void 0 : utilsService.getFlavorProfileRecommendations) === null || _a === void 0 ? void 0 : _a.call(utilsService, properties)) || [],
            healthBenefits: ((_b = utilsService === null || utilsService === void 0 ? void 0 : utilsService.getHealthBenefits) === null || _b === void 0 ? void 0 : _b.call(utilsService, properties)) || [],
            timeOfDay: elementalUtils_1.elementalUtils.getRecommendedTimeOfDay(properties),
            seasonalBest: this.getSeasonalRecommendations(dominantElement),
            // Fix TS2339: Property access on array type using safe type casting
            moodEffects: (() => {
                const characteristics = profile.characteristics;
                return (characteristics === null || characteristics === void 0 ? void 0 : characteristics.moodEffects) || [];
            })(),
            culinaryHerbs: (() => {
                const characteristics = profile.characteristics;
                return (characteristics === null || characteristics === void 0 ? void 0 : characteristics.culinaryHerbs) || [];
            })()
        };
    }
    /**
     * Generates zodiac-specific recommendations
     * @param zodiacSign The zodiac sign to generate recommendations for
     * @returns A recommendation tailored to the zodiac sign
     */
    static generateZodiacRecommendation(zodiacSign) {
        const element = elementalConstants_1.ZODIAC_ELEMENTS[zodiacSign];
        const properties = {
            Fire: element === 'Fire' ? 0.6 : 0.1,
            Water: element === 'Water' ? 0.6 : 0.1,
            Earth: element === 'Earth' ? 0.6 : 0.1,
            Air: element === 'Air' ? 0.6 : 0.1
        };
        return this.generateRecommendation(elementalUtils_1.elementalUtils.normalizeProperties(properties));
    }
    /**
     * Generates lunar phase-specific recommendations
     * @param lunarPhase The lunar phase to generate recommendations for
     * @returns A recommendation tailored to the lunar phase
     */
    static generateLunarRecommendation(lunarPhase) {
        var _a, _b, _c, _d;
        // Map lunar phases to elemental properties
        const lunarElementalMap = {
            'new moon': { Earth: 0.4, Air: 0.3 },
            'waxing crescent': { Fire: 0.3, Air: 0.4 },
            'first quarter': { Fire: 0.4, Air: 0.3 },
            'waxing gibbous': { Fire: 0.5, Water: 0.3 },
            'full moon': { Water: 0.5, Fire: 0.3 },
            'waning gibbous': { Water: 0.4, Earth: 0.3 },
            'last quarter': { Earth: 0.4, Water: 0.3 },
            'waning crescent': { Earth: 0.5, Air: 0.2 }
        };
        const properties = {
            Fire: ((_a = lunarElementalMap[lunarPhase]) === null || _a === void 0 ? void 0 : _a.Fire) || 0.25,
            Water: ((_b = lunarElementalMap[lunarPhase]) === null || _b === void 0 ? void 0 : _b.Water) || 0.25,
            Earth: ((_c = lunarElementalMap[lunarPhase]) === null || _c === void 0 ? void 0 : _c.Earth) || 0.25,
            Air: ((_d = lunarElementalMap[lunarPhase]) === null || _d === void 0 ? void 0 : _d.Air) || 0.25
        };
        return this.generateRecommendation(elementalUtils_1.elementalUtils.normalizeProperties(properties));
    }
    /**
     * Generates recipe-specific recommendations based on the recipe's elemental balance
     * @param recipe The recipe to generate recommendations for
     * @returns A recommendation tailored to the recipe
     */
    static generateRecipeRecommendation(recipe) {
        const properties = elementalUtils_1.elementalUtils.calculateelementalState(recipe);
        return this.generateRecommendation(properties);
    }
    /**
     * Gets the dominant element from elemental properties
     * @param properties The elemental properties
     * @returns The dominant element
     */
    static getDominantElement(properties) {
        return Object.entries(properties)
            .reduce((max, [element, value]) => value > max.value ? { element, value } : max, { element: '', value: 0 }).element;
    }
    /**
     * Gets seasonal recommendations based on element
     * @param element The dominant element
     * @returns Array of seasonal recommendations
     */
    static getSeasonalRecommendations(element) {
        const seasonalMap = {
            'Fire': ['Summer', 'Late Spring'],
            'Water': ['Winter', 'Late Autumn'],
            'Earth': ['Autumn', 'Late Summer'],
            'Air': ['Spring', 'Early Summer']
        };
        return seasonalMap[element] || ['Any season'];
    }
}
exports.ElementalRecommendationService = ElementalRecommendationService;
exports.default = ElementalRecommendationService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,