{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/ElementalRecommendationService.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/ElementalRecommendationService.ts"],"sourcesContent":["import type { \n  ElementalProperties, \n  Recipe,\n  ZodiacSign,\n  LunarPhase\n} from '@/types/alchemy';\nimport { elementalUtils } from '@/utils/elementalUtils';\nimport { ZODIAC_ELEMENTS } from '@/constants/elementalConstants';\n\n/**\n * Service to generate comprehensive elemental-based food and recipe recommendations\n */\nexport class ElementalRecommendationService {\n  /**\n   * Generates a complete recommendation based on elemental properties\n   * @param properties The elemental properties to base recommendations on\n   * @returns A comprehensive recommendation object\n   */\n  public static generateRecommendation(properties: ElementalProperties): ElementalRecommendation {\n    const profile = elementalUtils.getElementalProfile(properties);\n    const dominantElement = this.getDominantElement(properties);\n\n    // Fix TS2339: Property access on service object using safe type casting\n    const utilsService = elementalUtils as Record<string, unknown>;\n\n    return {\n      elementalBalance: properties,\n      dominantElement,\n      cookingTechniques: elementalUtils.getSuggestedCookingTechniques(properties),\n      // âœ… Pattern MM-1: getComplementaryElement returns element key, convert to string and wrap in array\n      complementaryIngredients: [elementalUtils.getComplementaryElement(dominantElement) as string],\n      flavorProfiles: utilsService?.getFlavorProfileRecommendations?.(properties) || [],\n      healthBenefits: utilsService?.getHealthBenefits?.(properties) || [],\n      timeOfDay: elementalUtils.getRecommendedTimeOfDay(properties),\n      seasonalBest: this.getSeasonalRecommendations(dominantElement),\n      // Fix TS2339: Property access on array type using safe type casting\n      moodEffects: (() => {\n        const characteristics = profile.characteristics as Record<string, unknown>;\n        return characteristics?.moodEffects || [];\n      })(),\n      culinaryHerbs: (() => {\n        const characteristics = profile.characteristics as Record<string, unknown>;\n        return characteristics?.culinaryHerbs || [];\n      })()\n    };\n  }\n\n  /**\n   * Generates zodiac-specific recommendations\n   * @param zodiacSign The zodiac sign to generate recommendations for\n   * @returns A recommendation tailored to the zodiac sign\n   */\n  public static generateZodiacRecommendation(zodiacSign: ZodiacSign): ElementalRecommendation {\n    const element = ZODIAC_ELEMENTS[zodiacSign];\n    const properties = {\n      Fire: element === 'Fire' ? 0.6 : 0.1,\n      Water: element === 'Water' ? 0.6 : 0.1,\n      Earth: element === 'Earth' ? 0.6 : 0.1,\n      Air: element === 'Air' ? 0.6 : 0.1\n    };\n\n    return this.generateRecommendation(elementalUtils.normalizeProperties(properties));\n  }\n\n  /**\n   * Generates lunar phase-specific recommendations\n   * @param lunarPhase The lunar phase to generate recommendations for\n   * @returns A recommendation tailored to the lunar phase\n   */\n  public static generateLunarRecommendation(lunarPhase: LunarPhase): ElementalRecommendation {\n    // Map lunar phases to elemental properties\n    const lunarElementalMap: Record<string, Partial<ElementalProperties>> = {\n      'new moon': { Earth: 0.4, Air: 0.3 },\n      'waxing crescent': { Fire: 0.3, Air: 0.4 },\n      'first quarter': { Fire: 0.4, Air: 0.3 },\n      'waxing gibbous': { Fire: 0.5, Water: 0.3 },\n      'full moon': { Water: 0.5, Fire: 0.3 },\n      'waning gibbous': { Water: 0.4, Earth: 0.3 },\n      'last quarter': { Earth: 0.4, Water: 0.3 },\n      'waning crescent': { Earth: 0.5, Air: 0.2 }\n    };\n\n    const properties = {\n      Fire: lunarElementalMap[lunarPhase]?.Fire || 0.25,\n      Water: lunarElementalMap[lunarPhase]?.Water || 0.25,\n      Earth: lunarElementalMap[lunarPhase]?.Earth || 0.25,\n      Air: lunarElementalMap[lunarPhase]?.Air || 0.25\n    };\n\n    return this.generateRecommendation(elementalUtils.normalizeProperties(properties));\n  }\n\n  /**\n   * Generates recipe-specific recommendations based on the recipe's elemental balance\n   * @param recipe The recipe to generate recommendations for\n   * @returns A recommendation tailored to the recipe\n   */\n  public static generateRecipeRecommendation(recipe: Recipe): ElementalRecommendation {\n    const properties = elementalUtils.calculateelementalState(recipe);\n    return this.generateRecommendation(properties);\n  }\n\n  /**\n   * Gets the dominant element from elemental properties\n   * @param properties The elemental properties\n   * @returns The dominant element\n   */\n  private static getDominantElement(properties: ElementalProperties): string {\n    return Object.entries(properties)\n      .reduce((max, [element, value]) => \n        value > max.value ? { element, value } : max, \n        { element: '', value: 0 }\n      ).element;\n  }\n\n  /**\n   * Gets seasonal recommendations based on element\n   * @param element The dominant element\n   * @returns Array of seasonal recommendations\n   */\n  private static getSeasonalRecommendations(element: string): string[] {\n    const seasonalMap: Record<string, string[]> = {\n      'Fire': ['Summer', 'Late Spring'],\n      'Water': ['Winter', 'Late Autumn'],\n      'Earth': ['Autumn', 'Late Summer'],\n      'Air': ['Spring', 'Early Summer']\n    };\n\n    return seasonalMap[element] || ['Any season'];\n  }\n}\n\n/**\n * Comprehensive elemental recommendation type\n */\nexport interface ElementalRecommendation {\n  elementalBalance: ElementalProperties;\n  dominantElement: string;\n  cookingTechniques: string[];\n  complementaryIngredients: string[];\n  flavorProfiles: string[];\n  healthBenefits: string[];\n  timeOfDay: string[];\n  seasonalBest: string[];\n  moodEffects: string[];\n  culinaryHerbs: string[];\n}\n\nexport default ElementalRecommendationService; "],"version":3}