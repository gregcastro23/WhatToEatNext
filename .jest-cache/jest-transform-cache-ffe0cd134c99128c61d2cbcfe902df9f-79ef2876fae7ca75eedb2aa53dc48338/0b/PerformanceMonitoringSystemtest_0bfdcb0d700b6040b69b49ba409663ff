1c88a790c18dc8f5d76c51eb0f2b45cc
"use strict";
/**
 * Performance Monitoring System Tests
 * Perfect Codebase Campaign - Phase 4 Implementation Tests
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock external dependencies
jest.mock('child_process');
jest.mock('fs');
const PerformanceMonitoringSystem_1 = require("./PerformanceMonitoringSystem");
const fs = __importStar(require("fs"));
const child_process_1 = require("child_process");
const mockExecSync = child_process_1.execSync;
const mockFs = fs;
describe('PerformanceMonitoringSystem', () => {
    let performanceMonitor;
    beforeEach(() => {
        performanceMonitor = new PerformanceMonitoringSystem_1.PerformanceMonitoringSystem();
        jest.clearAllMocks();
        // Mock process.hrtime.bigint for build time measurement
        const mockHrtime = jest.fn();
        mockHrtime.mockReturnValueOnce(BigInt(1000000000)); // 1 second in nanoseconds
        mockHrtime.mockReturnValueOnce(BigInt(9000000000)); // 9 seconds in nanoseconds
        process.hrtime = { bigint: mockHrtime };
        // Mock process.memoryUsage
        process.memoryUsage = jest.fn().mockReturnValue({
            heapUsed: 40 * 1024 * 1024,
            heapTotal: 50 * 1024 * 1024,
            external: 5 * 1024 * 1024,
            arrayBuffers: 1 * 1024 * 1024,
        });
    });
    afterEach(() => {
        performanceMonitor.stopMonitoring();
    });
    describe('measureBuildTime', () => {
        it('should measure build time using time command', async () => {
            mockExecSync.mockReturnValue('real 8.50\nuser 7.20\nsys 1.30\n');
            const buildTime = await performanceMonitor.measureBuildTime();
            expect(buildTime).toBe(8.5);
            expect(mockExecSync).toHaveBeenCalledWith('time -p yarn build 2>&1', {
                encoding: 'utf8',
                stdio: 'pipe',
            });
        });
        it('should fallback to simple timing if time command fails', async () => {
            mockExecSync
                .mockImplementationOnce(() => {
                throw new Error('time command not found');
            })
                .mockReturnValueOnce('Build completed successfully');
            // Mock Date.now for timing
            const mockDateNow = jest.spyOn(Date, 'now');
            mockDateNow.mockReturnValueOnce(1000).mockReturnValueOnce(9000); // 8 second difference
            const buildTime = await performanceMonitor.measureBuildTime();
            expect(buildTime).toBe(8); // 8 seconds
            expect(mockExecSync).toHaveBeenCalledWith('yarn build', {
                encoding: 'utf8',
                stdio: 'pipe',
            });
            mockDateNow.mockRestore();
        });
        it('should return -1 if build fails', async () => {
            mockExecSync.mockImplementation(() => {
                throw new Error('Build failed');
            });
            const buildTime = await performanceMonitor.measureBuildTime();
            expect(buildTime).toBe(-1);
        });
    });
    describe('monitorCacheHitRate', () => {
        it('should estimate cache hit rate from Next.js cache', async () => {
            mockFs.existsSync.mockImplementation((path) => {
                return path === '.next' || path === '.next/cache';
            });
            mockExecSync.mockReturnValue('150\n'); // 150 cache files
            const cacheHitRate = await performanceMonitor.monitorCacheHitRate();
            expect(cacheHitRate).toBeGreaterThan(0);
            expect(cacheHitRate).toBeLessThanOrEqual(1);
        });
        it('should estimate cache hit rate from other cache directories', async () => {
            mockFs.existsSync.mockImplementation((path) => {
                return path === '.yarn/cache';
            });
            mockExecSync.mockReturnValue('15000\n'); // 15MB cache size
            const cacheHitRate = await performanceMonitor.monitorCacheHitRate();
            expect(cacheHitRate).toBe(0.8); // Should return high hit rate for large cache
        });
        it('should return default estimate if cache monitoring fails', async () => {
            mockFs.existsSync.mockReturnValue(false);
            mockExecSync.mockImplementation(() => {
                throw new Error('Cache monitoring failed');
            });
            const cacheHitRate = await performanceMonitor.monitorCacheHitRate();
            expect(cacheHitRate).toBe(0.6); // Default estimate for small cache
        });
    });
    describe('trackMemoryUsage', () => {
        it('should track Node.js process memory usage', async () => {
            const memoryUsage = await performanceMonitor.trackMemoryUsage();
            expect(memoryUsage.current).toBe(40); // 40MB from mock
            expect(memoryUsage.peak).toBe(50); // 50MB from mock
        });
        it('should include system memory if available', async () => {
            mockExecSync.mockReturnValue('  1234  100000  51200  node\n'); // 50MB RSS
            const memoryUsage = await performanceMonitor.trackMemoryUsage();
            expect(memoryUsage.current).toBe(50); // Should use system memory (higher)
            expect(memoryUsage.peak).toBe(50);
        });
        it('should handle memory tracking errors gracefully', async () => {
            process.memoryUsage.mockImplementation(() => {
                throw new Error('Memory tracking failed');
            });
            const memoryUsage = await performanceMonitor.trackMemoryUsage();
            expect(memoryUsage.current).toBe(0);
            expect(memoryUsage.peak).toBe(0);
        });
    });
    describe('detectPerformanceRegression', () => {
        it('should detect build time regression', async () => {
            // Add performance history with increasing build times
            const mockMetrics1 = {
                buildTime: { current: 5, target: 10, average: 5, trend: 'stable' },
                cacheHitRate: {
                    current: 0.8,
                    target: 0.8,
                    average: 0.8,
                    trend: 'stable',
                },
                memoryUsage: { current: 40, target: 50, peak: 45, average: 40 },
                bundleSize: {
                    current: 400,
                    target: 420,
                    compressed: 280,
                    trend: 'stable',
                },
            };
            const mockMetrics2 = {
                ...mockMetrics1,
                buildTime: { current: 7, target: 10, average: 6, trend: 'degrading' },
            };
            const mockMetrics3 = {
                ...mockMetrics1,
                buildTime: { current: 9, target: 10, average: 7, trend: 'degrading' },
            };
            // Manually add to history
            performanceMonitor.performanceHistory = [
                mockMetrics1,
                mockMetrics2,
                mockMetrics3,
            ];
            const regressionDetected = await performanceMonitor.detectPerformanceRegression();
            expect(regressionDetected).toBe(true);
            const alerts = performanceMonitor.getCurrentAlerts();
            expect(alerts).toHaveLength(1);
            expect(alerts[0].type).toBe('build_time');
            expect(alerts[0].severity).toBe('warning');
        });
        it('should detect cache hit rate regression', async () => {
            const mockMetrics1 = {
                buildTime: { current: 8, target: 10, average: 8, trend: 'stable' },
                cacheHitRate: {
                    current: 0.9,
                    target: 0.8,
                    average: 0.9,
                    trend: 'stable',
                },
                memoryUsage: { current: 40, target: 50, peak: 45, average: 40 },
                bundleSize: {
                    current: 400,
                    target: 420,
                    compressed: 280,
                    trend: 'stable',
                },
            };
            const mockMetrics2 = {
                ...mockMetrics1,
                cacheHitRate: {
                    current: 0.75,
                    target: 0.8,
                    average: 0.825,
                    trend: 'degrading',
                },
            };
            const mockMetrics3 = {
                ...mockMetrics1,
                cacheHitRate: {
                    current: 0.6,
                    target: 0.8,
                    average: 0.75,
                    trend: 'degrading',
                },
            };
            performanceMonitor.performanceHistory = [
                mockMetrics1,
                mockMetrics2,
                mockMetrics3,
            ];
            const regressionDetected = await performanceMonitor.detectPerformanceRegression();
            expect(regressionDetected).toBe(true);
            const alerts = performanceMonitor.getCurrentAlerts();
            expect(alerts).toHaveLength(1);
            expect(alerts[0].type).toBe('cache_hit_rate');
        });
        it('should detect memory usage regression', async () => {
            const mockMetrics1 = {
                buildTime: { current: 8, target: 10, average: 8, trend: 'stable' },
                cacheHitRate: {
                    current: 0.8,
                    target: 0.8,
                    average: 0.8,
                    trend: 'stable',
                },
                memoryUsage: { current: 30, target: 50, peak: 35, average: 30 },
                bundleSize: {
                    current: 400,
                    target: 420,
                    compressed: 280,
                    trend: 'stable',
                },
            };
            const mockMetrics2 = {
                ...mockMetrics1,
                memoryUsage: { current: 40, target: 50, peak: 45, average: 35 },
            };
            const mockMetrics3 = {
                ...mockMetrics1,
                memoryUsage: { current: 55, target: 50, peak: 60, average: 42 },
            };
            performanceMonitor.performanceHistory = [
                mockMetrics1,
                mockMetrics2,
                mockMetrics3,
            ];
            const regressionDetected = await performanceMonitor.detectPerformanceRegression();
            expect(regressionDetected).toBe(true);
            const alerts = performanceMonitor.getCurrentAlerts();
            expect(alerts).toHaveLength(1);
            expect(alerts[0].type).toBe('memory_usage');
            expect(alerts[0].severity).toBe('critical');
        });
        it('should not detect regression with insufficient data', async () => {
            const regressionDetected = await performanceMonitor.detectPerformanceRegression();
            expect(regressionDetected).toBe(false);
        });
    });
    describe('getPerformanceMetrics', () => {
        it('should return comprehensive performance metrics', async () => {
            mockExecSync
                .mockReturnValueOnce('real 8.50\nuser 7.20\nsys 1.30\n') // build time
                .mockReturnValueOnce('150\n') // cache files
                .mockReturnValueOnce('400\n'); // bundle size
            mockFs.existsSync.mockImplementation((path) => {
                return path === '.next' || path === '.next/cache';
            });
            const metrics = await performanceMonitor.getPerformanceMetrics();
            expect(metrics).toHaveProperty('buildTime');
            expect(metrics).toHaveProperty('cacheHitRate');
            expect(metrics).toHaveProperty('memoryUsage');
            expect(metrics).toHaveProperty('bundleSize');
            expect(metrics.buildTime.current).toBe(8.5);
            expect(metrics.buildTime.target).toBe(10);
            expect(metrics.memoryUsage.current).toBe(40);
            expect(metrics.memoryUsage.target).toBe(50);
        });
        it('should calculate trends correctly', async () => {
            // First measurement
            mockExecSync.mockReturnValue('real 8.00\n');
            mockFs.existsSync.mockReturnValue(false);
            const metrics1 = await performanceMonitor.getPerformanceMetrics();
            // Add more measurements to establish trend (need at least 3 for trend calculation)
            mockExecSync.mockReturnValue('real 7.50\n');
            const metrics2 = await performanceMonitor.getPerformanceMetrics();
            // Third measurement with significant improvement
            mockExecSync.mockReturnValue('real 6.00\n');
            const metrics3 = await performanceMonitor.getPerformanceMetrics();
            expect(metrics3.buildTime.trend).toBe('improving');
        });
    });
    describe('generatePerformanceReport', () => {
        it('should generate comprehensive performance report', async () => {
            mockExecSync.mockReturnValue('real 8.50\n');
            mockFs.existsSync.mockReturnValue(false);
            const report = await performanceMonitor.generatePerformanceReport();
            expect(report).toHaveProperty('timestamp');
            expect(report).toHaveProperty('metrics');
            expect(report).toHaveProperty('alerts');
            expect(report).toHaveProperty('regressionDetected');
            expect(report).toHaveProperty('overallScore');
            expect(report).toHaveProperty('recommendations');
            expect(typeof report.overallScore).toBe('number');
            expect(report.overallScore).toBeGreaterThanOrEqual(0);
            expect(report.overallScore).toBeLessThanOrEqual(100);
        });
        it('should include recommendations for performance issues', async () => {
            mockExecSync.mockReturnValue('real 15.00\n'); // Exceeds 10s target
            mockFs.existsSync.mockReturnValue(false);
            const report = await performanceMonitor.generatePerformanceReport();
            expect(report.recommendations.length).toBeGreaterThan(0);
            expect(report.recommendations[0]).toContain('Build time');
            expect(report.recommendations[0]).toContain('exceeds target');
        });
    });
    describe('monitoring lifecycle', () => {
        it('should start and stop continuous monitoring', () => {
            jest.useFakeTimers();
            // Mock setInterval and clearInterval
            const mockSetInterval = jest.spyOn(global, 'setInterval');
            const mockClearInterval = jest.spyOn(global, 'clearInterval');
            performanceMonitor.startMonitoring(1); // 1 minute interval
            expect(mockSetInterval).toHaveBeenCalledWith(expect.any(Function), 60000);
            performanceMonitor.stopMonitoring();
            expect(mockClearInterval).toHaveBeenCalled();
            mockSetInterval.mockRestore();
            mockClearInterval.mockRestore();
            jest.useRealTimers();
        });
    });
    describe('data export', () => {
        it('should export performance data to file', async () => {
            mockFs.writeFileSync.mockImplementation(() => { });
            mockExecSync.mockReturnValue('real 8.50\n');
            mockFs.existsSync.mockReturnValue(false);
            await performanceMonitor.exportPerformanceData('./test-performance-data.json');
            expect(mockFs.writeFileSync).toHaveBeenCalledWith('./test-performance-data.json', expect.stringContaining('"timestamp"'));
        });
        it('should handle export errors gracefully', async () => {
            mockFs.writeFileSync.mockImplementation(() => {
                throw new Error('Write failed');
            });
            await expect(performanceMonitor.exportPerformanceData('./test-performance-data.json')).rejects.toThrow('Failed to export performance data');
        });
    });
    describe('alert management', () => {
        it('should manage alerts correctly', () => {
            const initialAlerts = performanceMonitor.getCurrentAlerts();
            expect(initialAlerts).toHaveLength(0);
            // Add alert through private method (simulate regression detection)
            const mockAlert = {
                type: 'build_time',
                severity: 'warning',
                message: 'Test alert',
                currentValue: 15,
                targetValue: 10,
                timestamp: new Date(),
                recommendations: ['Test recommendation'],
            };
            performanceMonitor.addAlert(mockAlert);
            const alertsAfterAdd = performanceMonitor.getCurrentAlerts();
            expect(alertsAfterAdd).toHaveLength(1);
            expect(alertsAfterAdd[0]).toEqual(mockAlert);
            performanceMonitor.clearAlerts();
            const alertsAfterClear = performanceMonitor.getCurrentAlerts();
            expect(alertsAfterClear).toHaveLength(0);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,