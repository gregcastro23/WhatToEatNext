037562f97e4ac121ca30421dc9df2937
"use strict";
/**
 * Domain-Specific Rule Validation Tests
 *
 * Comprehensive validation of ESLint domain-specific rules for:
 * - Astrological calculation files
 * - Campaign system files
 * - Test files
 * - Configuration files
 *
 * Requirements: 4.1, 4.2, 4.3, 4.4
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const eslint_1 = require("eslint");
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
describe('Domain-Specific Rule Validation', () => {
    let eslint;
    beforeAll(async () => {
        eslint = new eslint_1.ESLint({
            configFile: path_1.default.resolve(__dirname, '../../..', 'eslint.config.cjs'),
            useEslintrc: false,
            cwd: path_1.default.resolve(__dirname, '../../..')
        });
    });
    describe('Astrological Calculation File Rules', () => {
        const astrologicalTestCode = `
// Test astrological calculation file
import { getReliablePlanetaryPositions } from '@/utils/reliableAstronomy';

// Mathematical constants should be preserved
const DEGREES_PER_SIGN = 30;
const RELIABLE_POSITIONS = {
  sun: { sign: 'aries', degree: 8.5, exactLongitude: 8.5, isRetrograde: false },
  moon: { sign: 'aries', degree: 1.57, exactLongitude: 1.57, isRetrograde: false }
};

// Planetary variables should be preserved
const planet = 'mars';
const degree = 22.63;
const sign = 'cancer';
const longitude = 112.63;

// Fallback values should be preserved
const FALLBACK_POSITION = { sign: 'aries', degree: 0, exactLongitude: 0, isRetrograde: false };

// Console debugging should be allowed
console.info('Calculating planetary positions');
console.debug('Position data:', { planet, degree, sign });

// Complex astronomical calculations
function calculatePlanetaryInfluence(planetPosition: any): number {
  const baseInfluence = planetPosition.degree / DEGREES_PER_SIGN;
  return planetPosition.isRetrograde ? baseInfluence * 0.8 : baseInfluence;
}

// Elemental properties structure
const elementalProperties = {
  Fire: 0.7,
  Water: 0.2,
  Earth: 0.1,
  Air: 0.0
};
`;
        it('should preserve mathematical constants and planetary variables', async () => {
            const results = await eslint.lintText(astrologicalTestCode, {
                filePath: 'src/calculations/test-planetary.ts'
            });
            const errors = results[0]?.messages || [];
            // Should not flag mathematical constants as unused
            const unusedConstantErrors = errors.filter(error => error.message.includes('DEGREES_PER_SIGN') &&
                error.message.includes('unused'));
            expect(unusedConstantErrors).toHaveLength(0);
            // Should not flag planetary variables as unused
            const unusedPlanetaryErrors = errors.filter(error => (error.message.includes('planet') ||
                error.message.includes('degree') ||
                error.message.includes('sign')) &&
                error.message.includes('unused'));
            expect(unusedPlanetaryErrors).toHaveLength(0);
            // Should not flag fallback values as unused
            const unusedFallbackErrors = errors.filter(error => error.message.includes('FALLBACK') &&
                error.message.includes('unused'));
            expect(unusedFallbackErrors).toHaveLength(0);
        });
        it('should allow console debugging in astrological calculations', async () => {
            const results = await eslint.lintText(astrologicalTestCode, {
                filePath: 'src/calculations/test-planetary.ts'
            });
            const errors = results[0]?.messages || [];
            // Should allow console.info and console.debug
            const consoleErrors = errors.filter(error => error.ruleId === 'no-console' &&
                (error.message.includes('info') || error.message.includes('debug')));
            expect(consoleErrors).toHaveLength(0);
        });
        it('should validate planetary position structure', async () => {
            const invalidPositionCode = `
const invalidPosition = {
  sign: 'aries',
  degree: 8.5
  // Missing exactLongitude and isRetrograde
};
`;
            const results = await eslint.lintText(invalidPositionCode, {
                filePath: 'src/calculations/test-invalid-position.ts'
            });
            const errors = results[0]?.messages || [];
            const structureErrors = errors.filter(error => error.ruleId === 'astrological/validate-planetary-position-structure');
            expect(structureErrors.length).toBeGreaterThan(0);
        });
        it('should validate elemental properties structure', async () => {
            const invalidElementalCode = `
const invalidElemental = {
  Fire: 0.7,
  Water: 0.2
  // Missing Earth and Air
};
`;
            const results = await eslint.lintText(invalidElementalCode, {
                filePath: 'src/calculations/test-invalid-elemental.ts'
            });
            const errors = results[0]?.messages || [];
            const elementalErrors = errors.filter(error => error.ruleId === 'astrological/validate-elemental-properties');
            expect(elementalErrors.length).toBeGreaterThan(0);
        });
        it('should preserve fallback values', async () => {
            const fallbackViolationCode = `
let FALLBACK_POSITION = null; // This should trigger an error
const RELIABLE_DATA = undefined; // This should trigger an error
`;
            const results = await eslint.lintText(fallbackViolationCode, {
                filePath: 'src/calculations/test-fallback-violation.ts'
            });
            const errors = results[0]?.messages || [];
            const fallbackErrors = errors.filter(error => error.ruleId === 'astrological/preserve-fallback-values');
            expect(fallbackErrors.length).toBeGreaterThan(0);
        });
    });
    describe('Campaign System File Rules', () => {
        const campaignTestCode = `
// Test campaign system file
import { CampaignController } from './CampaignController';

// Campaign system variables should be preserved
const campaign = 'typescript-error-elimination';
const progress = 75.5;
const metrics = { errors: 100, warnings: 500 };
const safety = 'MAXIMUM';

// Extensive logging should be allowed
console.log('Campaign started:', campaign);
console.info('Progress update:', progress);
console.warn('Safety protocol activated');
console.error('Campaign error detected');
console.debug('Detailed metrics:', metrics);

// Enterprise patterns should be allowed
const CAMPAIGN_CONFIG: any = {
  errorThreshold: 100,
  automationLevel: 'conservative',
  rollbackStrategy: 'git-stash'
};

// Complex error handling
function handleCampaignError(error: any): void {
  console.error('Campaign error:', error);
  if (error.critical) {
    process.exit(1); // Should be allowed in campaign emergency protocols
  }
}

// Dynamic imports for campaign tools
const loadCampaignTool = async (toolName: string) => {
  return await import(\`./tools/\${toolName}\`);
};
`;
        it('should allow enterprise patterns and extensive logging', async () => {
            const results = await eslint.lintText(campaignTestCode, {
                filePath: 'src/services/campaign/test-campaign.ts'
            });
            const errors = results[0]?.messages || [];
            // Should allow all console statements
            const consoleErrors = errors.filter(error => error.ruleId === 'no-console');
            expect(consoleErrors).toHaveLength(0);
            // Should allow explicit any for enterprise patterns
            const explicitAnyErrors = errors.filter(error => error.ruleId === '@typescript-eslint/no-explicit-any' &&
                error.severity === 2 // error level
            );
            expect(explicitAnyErrors).toHaveLength(0);
            // Should allow process.exit in emergency protocols
            const processExitErrors = errors.filter(error => error.ruleId === 'no-process-exit');
            expect(processExitErrors).toHaveLength(0);
            // Should allow dynamic imports
            const dynamicImportErrors = errors.filter(error => error.ruleId === 'import/no-dynamic-require');
            expect(dynamicImportErrors).toHaveLength(0);
        });
        it('should preserve campaign system variable patterns', async () => {
            const results = await eslint.lintText(campaignTestCode, {
                filePath: 'src/services/campaign/test-campaign.ts'
            });
            const errors = results[0]?.messages || [];
            // Should not flag campaign variables as unused
            const unusedCampaignErrors = errors.filter(error => (error.message.includes('campaign') ||
                error.message.includes('progress') ||
                error.message.includes('metrics') ||
                error.message.includes('safety')) &&
                error.message.includes('unused'));
            expect(unusedCampaignErrors).toHaveLength(0);
        });
    });
    describe('Test File Rules', () => {
        const testFileCode = `
// Test file
import { describe, it, expect, beforeEach, jest } from '@jest/globals';

describe('Test Suite', () => {
  let mockService: any; // Should be allowed
  let stubFunction: any; // Should be allowed
  const testData = { value: 123 };
  const UNUSED_CONSTANT = 'test'; // Should be allowed with UNUSED_ prefix

  beforeEach(() => {
    mockService = jest.fn();
    stubFunction = jest.fn();
    console.log('Test setup'); // Should be allowed
  });

  it('should allow test patterns', () => {
    const result = mockService();
    expect(result).toBeDefined();
    
    // Non-null assertions should be allowed in tests
    const value = testData.value!;
    expect(value).toBe(123);
    
    // Magic numbers should be allowed in tests
    expect(value).toBe(123);
    expect(mockService).toHaveBeenCalledTimes(1);
  });
});
`;
        it('should provide appropriate relaxations for mock variables', async () => {
            const results = await eslint.lintText(testFileCode, {
                filePath: 'src/__tests__/test-example.test.ts'
            });
            const errors = results[0]?.messages || [];
            // Should allow explicit any in tests
            const explicitAnyErrors = errors.filter(error => error.ruleId === '@typescript-eslint/no-explicit-any');
            expect(explicitAnyErrors).toHaveLength(0);
            // Should allow console statements in tests
            const consoleErrors = errors.filter(error => error.ruleId === 'no-console');
            expect(consoleErrors).toHaveLength(0);
            // Should allow non-null assertions in tests
            const nonNullErrors = errors.filter(error => error.ruleId === '@typescript-eslint/no-non-null-assertion');
            expect(nonNullErrors).toHaveLength(0);
            // Should allow magic numbers in tests
            const magicNumberErrors = errors.filter(error => error.ruleId === 'no-magic-numbers');
            expect(magicNumberErrors).toHaveLength(0);
            // Should not flag mock/stub variables as unused
            const unusedMockErrors = errors.filter(error => (error.message.includes('mock') || error.message.includes('stub')) &&
                error.message.includes('unused'));
            expect(unusedMockErrors).toHaveLength(0);
        });
    });
    describe('Configuration File Rules', () => {
        const configFileCode = `
// Configuration file
const path = require('path');
const fs = require('fs');

module.exports = {
  // Dynamic requires should be allowed
  plugins: [
    require('./custom-plugin'),
    require(\`./plugins/\${process.env.NODE_ENV}\`)
  ],
  
  // Console statements should be allowed
  setup() {
    console.log('Configuration loaded');
    console.warn('Development mode active');
  },
  
  // Explicit any should be allowed for config flexibility
  customConfig: {
    handler: (options: any) => {
      return options.transform ? options.transform(options.data) : options.data;
    }
  },
  
  // Build tool patterns
  webpack: (config: any) => {
    config.resolve.alias = {
      '@': path.resolve(__dirname, 'src')
    };
    return config;
  }
};
`;
        it('should optimize configuration file rules for dynamic requires and build tools', async () => {
            const results = await eslint.lintText(configFileCode, {
                filePath: 'next.config.js'
            });
            const errors = results[0]?.messages || [];
            // Should allow console statements in config files
            const consoleErrors = errors.filter(error => error.ruleId === 'no-console');
            expect(consoleErrors).toHaveLength(0);
            // Should allow explicit any in config files
            const explicitAnyErrors = errors.filter(error => error.ruleId === '@typescript-eslint/no-explicit-any');
            expect(explicitAnyErrors).toHaveLength(0);
            // Should allow dynamic requires in config files
            const dynamicRequireErrors = errors.filter(error => error.ruleId === 'import/no-dynamic-require');
            expect(dynamicRequireErrors).toHaveLength(0);
            // Should allow var-requires in config files
            const varRequiresErrors = errors.filter(error => error.ruleId === '@typescript-eslint/no-var-requires');
            expect(varRequiresErrors).toHaveLength(0);
        });
    });
    describe('Real File Validation', () => {
        it('should validate actual astrological calculation files', async () => {
            const astrologicalFiles = [
                'src/calculations/culinary/culinaryAstrology.ts',
                'src/utils/reliableAstronomy.ts',
                'src/utils/astrology/astrologicalValidation.ts'
            ];
            for (const filePath of astrologicalFiles) {
                try {
                    const fullPath = path_1.default.resolve(__dirname, '../../..', filePath);
                    await fs_1.promises.access(fullPath);
                    const results = await eslint.lintFile(fullPath);
                    const errors = results[0]?.messages || [];
                    // Check that astrological rules are being applied
                    const astrologicalRuleErrors = errors.filter(error => error.ruleId?.startsWith('astrological/'));
                    // Should have some astrological rule validations (or none if code is perfect)
                    expect(astrologicalRuleErrors.length).toBeGreaterThanOrEqual(0);
                    // Should not have excessive unused variable errors for planetary constants
                    const unusedPlanetaryErrors = errors.filter(error => error.ruleId === '@typescript-eslint/no-unused-vars' &&
                        (error.message.includes('planet') ||
                            error.message.includes('degree') ||
                            error.message.includes('FALLBACK')));
                    expect(unusedPlanetaryErrors.length).toBeLessThan(5);
                }
                catch (error) {
                    // File doesn't exist, skip validation
                    console.warn(`Skipping validation for non-existent file: ${filePath}`);
                }
            }
        });
        it('should validate actual campaign system files', async () => {
            const campaignFiles = [
                'src/services/campaign/CampaignController.ts',
                'src/services/campaign/ProgressTracker.ts',
                'src/types/campaign.ts'
            ];
            for (const filePath of campaignFiles) {
                try {
                    const fullPath = path_1.default.resolve(__dirname, '../../..', filePath);
                    await fs_1.promises.access(fullPath);
                    const results = await eslint.lintFile(fullPath);
                    const errors = results[0]?.messages || [];
                    // Should allow console statements in campaign files
                    const consoleErrors = errors.filter(error => error.ruleId === 'no-console');
                    expect(consoleErrors.length).toBeLessThan(10); // Some may be intentional warnings
                    // Should not have excessive explicit any errors (should be warnings, not errors)
                    const explicitAnyErrors = errors.filter(error => error.ruleId === '@typescript-eslint/no-explicit-any' &&
                        error.severity === 2);
                    expect(explicitAnyErrors.length).toBeLessThan(5);
                }
                catch (error) {
                    // File doesn't exist, skip validation
                    console.warn(`Skipping validation for non-existent file: ${filePath}`);
                }
            }
        });
        it('should validate actual test files', async () => {
            const testFiles = [
                'src/__tests__/linting/ESLintConfigurationValidation.test.ts',
                'src/__tests__/validation/ComprehensiveValidation.test.ts'
            ];
            for (const filePath of testFiles) {
                try {
                    const fullPath = path_1.default.resolve(__dirname, '../../..', filePath);
                    await fs_1.promises.access(fullPath);
                    const results = await eslint.lintFile(fullPath);
                    const errors = results[0]?.messages || [];
                    // Should allow explicit any in test files
                    const explicitAnyErrors = errors.filter(error => error.ruleId === '@typescript-eslint/no-explicit-any');
                    expect(explicitAnyErrors).toHaveLength(0);
                    // Should allow console statements in test files
                    const consoleErrors = errors.filter(error => error.ruleId === 'no-console');
                    expect(consoleErrors).toHaveLength(0);
                    // Should allow non-null assertions in test files
                    const nonNullErrors = errors.filter(error => error.ruleId === '@typescript-eslint/no-non-null-assertion');
                    expect(nonNullErrors).toHaveLength(0);
                }
                catch (error) {
                    // File doesn't exist, skip validation
                    console.warn(`Skipping validation for non-existent file: ${filePath}`);
                }
            }
        });
        it('should validate actual configuration files', async () => {
            const configFiles = [
                'next.config.js',
                'jest.config.js',
                'tailwind.config.js'
            ];
            for (const filePath of configFiles) {
                try {
                    const fullPath = path_1.default.resolve(__dirname, '../../..', filePath);
                    await fs_1.promises.access(fullPath);
                    const results = await eslint.lintFile(fullPath);
                    const errors = results[0]?.messages || [];
                    // Should allow console statements in config files
                    const consoleErrors = errors.filter(error => error.ruleId === 'no-console');
                    expect(consoleErrors).toHaveLength(0);
                    // Should allow dynamic requires in config files
                    const dynamicRequireErrors = errors.filter(error => error.ruleId === 'import/no-dynamic-require');
                    expect(dynamicRequireErrors).toHaveLength(0);
                }
                catch (error) {
                    // File doesn't exist, skip validation
                    console.warn(`Skipping validation for non-existent file: ${filePath}`);
                }
            }
        });
    });
    describe('Performance and Optimization', () => {
        it('should have reasonable performance for domain-specific rules', async () => {
            const testCode = `
import { getReliablePlanetaryPositions } from '@/utils/reliableAstronomy';

const DEGREES_PER_SIGN = 30;
const planet = 'mars';
const elementalProperties = { Fire: 0.7, Water: 0.2, Earth: 0.1, Air: 0.0 };

console.info('Test performance');
`;
            const startTime = Date.now();
            const results = await eslint.lintText(testCode, {
                filePath: 'src/calculations/performance-test.ts'
            });
            const endTime = Date.now();
            const duration = endTime - startTime;
            // Should complete within reasonable time (less than 1 second)
            expect(duration).toBeLessThan(1000);
            // Should still produce valid results
            expect(results).toBeDefined();
            expect(results[0]).toBeDefined();
        });
        it('should cache domain-specific rule results effectively', async () => {
            const testCode = `
const RELIABLE_POSITIONS = { sun: { sign: 'aries', degree: 8.5, exactLongitude: 8.5, isRetrograde: false } };
`;
            // First run
            const startTime1 = Date.now();
            await eslint.lintText(testCode, { filePath: 'src/calculations/cache-test-1.ts' });
            const duration1 = Date.now() - startTime1;
            // Second run (should be faster due to caching)
            const startTime2 = Date.now();
            await eslint.lintText(testCode, { filePath: 'src/calculations/cache-test-2.ts' });
            const duration2 = Date.now() - startTime2;
            // Second run should be faster or similar (caching effect)
            expect(duration2).toBeLessThanOrEqual(duration1 * 1.5);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,