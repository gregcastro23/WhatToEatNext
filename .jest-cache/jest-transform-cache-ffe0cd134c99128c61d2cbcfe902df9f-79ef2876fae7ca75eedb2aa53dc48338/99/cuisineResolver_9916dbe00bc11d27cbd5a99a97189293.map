{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/cuisineResolver.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/cuisineResolver.ts"],"sourcesContent":["/**\n * Cuisine Resolver Utilities\n * \n * Provides utility functions for resolving and working with cuisine types\n * using the new cuisine alias system.\n */\n\nimport { \n  resolveCuisineType, \n  getRegionalCuisines, \n  isRegionalCuisine, \n  getPrimaryCuisine,\n  normalizeCuisineName,\n  CUISINE_ALIASES,\n  type PrimaryCuisineType,\n  type AllCuisineTypes\n} from '@/types/cuisineAliases';\n\n/**\n * Resolves a cuisine name to its standardized primary cuisine type\n * @param cuisineName - The cuisine name to resolve\n * @returns The standardized primary cuisine type\n */\nexport function standardizeCuisine(cuisineName: string): PrimaryCuisineType {\n  const resolved = resolveCuisineType(cuisineName);\n  \n  // If the resolved type is a primary cuisine, return it\n  if (typeof resolved === 'string' && !isRegionalCuisine(resolved)) {\n    return resolved as PrimaryCuisineType;\n  }\n  \n  // If it's a regional cuisine, get its primary cuisine\n  const primary = getPrimaryCuisine(cuisineName);\n  if (primary) {\n    return primary;\n  }\n  \n  // Fallback to normalized name\n  return normalizeCuisineName(cuisineName) as PrimaryCuisineType;\n}\n\n/**\n * Gets all regional variants for a primary cuisine type\n * @param primaryCuisine - The primary cuisine type\n * @returns Array of regional cuisine names\n */\nexport function getCuisineVariants(primaryCuisine: PrimaryCuisineType): string[] {\n  return getRegionalCuisines(primaryCuisine);\n}\n\n/**\n * Checks if two cuisine names belong to the same primary cuisine type\n * @param cuisine1 - First cuisine name\n * @param cuisine2 - Second cuisine name\n * @returns True if both cuisines belong to the same primary type\n */\nexport function areCuisinesRelated(cuisine1: string, cuisine2: string): boolean {\n  const primary1 = standardizeCuisine(cuisine1);\n  const primary2 = standardizeCuisine(cuisine2);\n  return primary1 === primary2;\n}\n\n/**\n * Groups cuisine names by their primary cuisine type\n * @param cuisineNames - Array of cuisine names to group\n * @returns Object mapping primary cuisine types to arrays of regional variants\n */\nexport function groupCuisinesByType(cuisineNames: string[]): Record<PrimaryCuisineType, string[]> {\n  const groups: Record<PrimaryCuisineType, string[]> = {} as Record<PrimaryCuisineType, string[]>;\n  \n  cuisineNames.forEach(cuisineName => {\n    const primary = standardizeCuisine(cuisineName);\n    if (!groups[primary]) {\n      groups[primary] = [];\n    }\n    groups[primary].push(cuisineName);\n  });\n  \n  return groups;\n}\n\n/**\n * Filters cuisine names to only include primary cuisine types\n * @param cuisineNames - Array of cuisine names to filter\n * @returns Array containing only primary cuisine types\n */\nexport function filterPrimaryCuisines(cuisineNames: string[]): PrimaryCuisineType[] {\n  return cuisineNames\n    .map(cuisine => standardizeCuisine(cuisine))\n    .filter((cuisine, index, array) => array.indexOf(cuisine) === index); // Remove duplicates\n}\n\n/**\n * Gets a display name for a cuisine, showing both regional and primary if applicable\n * @param cuisineName - The cuisine name\n * @returns Display name for the cuisine\n */\nexport function getCuisineDisplayName(cuisineName: string): string {\n  // Check if it's a regional cuisine first\n  if (isRegionalCuisine(cuisineName)) {\n    const primary = getPrimaryCuisine(cuisineName);\n    if (primary) {\n      const normalized = normalizeCuisineName(cuisineName);\n      return `${normalized} (${primary})`;\n    }\n  }\n  \n  // For primary cuisines or unknown cuisines, just normalize\n  return normalizeCuisineName(cuisineName);\n}\n\n/**\n * Validates if a cuisine name is supported by the system\n * @param cuisineName - The cuisine name to validate\n * @returns True if the cuisine is supported\n */\nexport function isSupportedCuisine(cuisineName: string): boolean {\n  // Check if it's a known regional cuisine\n  if (isRegionalCuisine(cuisineName)) {\n    return true;\n  }\n  \n  // Check if it's a primary cuisine type\n  const primaryCuisines: PrimaryCuisineType[] = [\n    'Chinese', 'Japanese', 'Korean', 'Indian', 'Thai', 'Vietnamese',\n    'Italian', 'French', 'Greek', 'Spanish', 'Mexican', 'American',\n    'African', 'Middle-Eastern', 'Mediterranean', 'Russian', 'Fusion'\n  ];\n  \n  return primaryCuisines.includes(cuisineName as PrimaryCuisineType);\n}\n\n/**\n * Gets cuisine suggestions based on partial input\n * @param partialName - Partial cuisine name\n * @returns Array of matching cuisine names\n */\nexport function getCuisineSuggestions(partialName: string): string[] {\n  const normalized = partialName.toLowerCase();\n  const allCuisines = Object.keys(CUISINE_ALIASES);\n  const primaryCuisines: PrimaryCuisineType[] = [\n    'Chinese', 'Japanese', 'Korean', 'Indian', 'Thai', 'Vietnamese',\n    'Italian', 'French', 'Greek', 'Spanish', 'Mexican', 'American',\n    'African', 'Middle-Eastern', 'Mediterranean', 'Russian', 'Fusion'\n  ];\n  \n  const suggestions = [\n    ...allCuisines.filter(cuisine => cuisine.includes(normalized)),\n    ...primaryCuisines.filter(cuisine => cuisine.toLowerCase().includes(normalized))\n  ];\n  \n  return [...new Set(suggestions)]; // Remove duplicates\n}\n\n// Re-export types for convenience\nexport type { PrimaryCuisineType, AllCuisineTypes }; "],"version":3}