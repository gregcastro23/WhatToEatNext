86d3c9b3ee372afca8f3cce6316f1837
"use strict";
/**
 * Cuisine Resolver Utilities
 *
 * Provides utility functions for resolving and working with cuisine types
 * using the new cuisine alias system.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCuisineSuggestions = exports.isSupportedCuisine = exports.getCuisineDisplayName = exports.filterPrimaryCuisines = exports.groupCuisinesByType = exports.areCuisinesRelated = exports.getCuisineVariants = exports.standardizeCuisine = void 0;
const cuisineAliases_1 = require("@/types/cuisineAliases");
/**
 * Resolves a cuisine name to its standardized primary cuisine type
 * @param cuisineName - The cuisine name to resolve
 * @returns The standardized primary cuisine type
 */
function standardizeCuisine(cuisineName) {
    const resolved = (0, cuisineAliases_1.resolveCuisineType)(cuisineName);
    // If the resolved type is a primary cuisine, return it
    if (typeof resolved === 'string' && !(0, cuisineAliases_1.isRegionalCuisine)(resolved)) {
        return resolved;
    }
    // If it's a regional cuisine, get its primary cuisine
    const primary = (0, cuisineAliases_1.getPrimaryCuisine)(cuisineName);
    if (primary) {
        return primary;
    }
    // Fallback to normalized name
    return (0, cuisineAliases_1.normalizeCuisineName)(cuisineName);
}
exports.standardizeCuisine = standardizeCuisine;
/**
 * Gets all regional variants for a primary cuisine type
 * @param primaryCuisine - The primary cuisine type
 * @returns Array of regional cuisine names
 */
function getCuisineVariants(primaryCuisine) {
    return (0, cuisineAliases_1.getRegionalCuisines)(primaryCuisine);
}
exports.getCuisineVariants = getCuisineVariants;
/**
 * Checks if two cuisine names belong to the same primary cuisine type
 * @param cuisine1 - First cuisine name
 * @param cuisine2 - Second cuisine name
 * @returns True if both cuisines belong to the same primary type
 */
function areCuisinesRelated(cuisine1, cuisine2) {
    const primary1 = standardizeCuisine(cuisine1);
    const primary2 = standardizeCuisine(cuisine2);
    return primary1 === primary2;
}
exports.areCuisinesRelated = areCuisinesRelated;
/**
 * Groups cuisine names by their primary cuisine type
 * @param cuisineNames - Array of cuisine names to group
 * @returns Object mapping primary cuisine types to arrays of regional variants
 */
function groupCuisinesByType(cuisineNames) {
    const groups = {};
    cuisineNames.forEach(cuisineName => {
        const primary = standardizeCuisine(cuisineName);
        if (!groups[primary]) {
            groups[primary] = [];
        }
        groups[primary].push(cuisineName);
    });
    return groups;
}
exports.groupCuisinesByType = groupCuisinesByType;
/**
 * Filters cuisine names to only include primary cuisine types
 * @param cuisineNames - Array of cuisine names to filter
 * @returns Array containing only primary cuisine types
 */
function filterPrimaryCuisines(cuisineNames) {
    return cuisineNames
        .map(cuisine => standardizeCuisine(cuisine))
        .filter((cuisine, index, array) => array.indexOf(cuisine) === index); // Remove duplicates
}
exports.filterPrimaryCuisines = filterPrimaryCuisines;
/**
 * Gets a display name for a cuisine, showing both regional and primary if applicable
 * @param cuisineName - The cuisine name
 * @returns Display name for the cuisine
 */
function getCuisineDisplayName(cuisineName) {
    // Check if it's a regional cuisine first
    if ((0, cuisineAliases_1.isRegionalCuisine)(cuisineName)) {
        const primary = (0, cuisineAliases_1.getPrimaryCuisine)(cuisineName);
        if (primary) {
            const normalized = (0, cuisineAliases_1.normalizeCuisineName)(cuisineName);
            return `${normalized} (${primary})`;
        }
    }
    // For primary cuisines or unknown cuisines, just normalize
    return (0, cuisineAliases_1.normalizeCuisineName)(cuisineName);
}
exports.getCuisineDisplayName = getCuisineDisplayName;
/**
 * Validates if a cuisine name is supported by the system
 * @param cuisineName - The cuisine name to validate
 * @returns True if the cuisine is supported
 */
function isSupportedCuisine(cuisineName) {
    // Check if it's a known regional cuisine
    if ((0, cuisineAliases_1.isRegionalCuisine)(cuisineName)) {
        return true;
    }
    // Check if it's a primary cuisine type
    const primaryCuisines = [
        'Chinese', 'Japanese', 'Korean', 'Indian', 'Thai', 'Vietnamese',
        'Italian', 'French', 'Greek', 'Spanish', 'Mexican', 'American',
        'African', 'Middle-Eastern', 'Mediterranean', 'Russian', 'Fusion'
    ];
    return primaryCuisines.includes(cuisineName);
}
exports.isSupportedCuisine = isSupportedCuisine;
/**
 * Gets cuisine suggestions based on partial input
 * @param partialName - Partial cuisine name
 * @returns Array of matching cuisine names
 */
function getCuisineSuggestions(partialName) {
    const normalized = partialName.toLowerCase();
    const allCuisines = Object.keys(cuisineAliases_1.CUISINE_ALIASES);
    const primaryCuisines = [
        'Chinese', 'Japanese', 'Korean', 'Indian', 'Thai', 'Vietnamese',
        'Italian', 'French', 'Greek', 'Spanish', 'Mexican', 'American',
        'African', 'Middle-Eastern', 'Mediterranean', 'Russian', 'Fusion'
    ];
    const suggestions = [
        ...allCuisines.filter(cuisine => cuisine.includes(normalized)),
        ...primaryCuisines.filter(cuisine => cuisine.toLowerCase().includes(normalized))
    ];
    return [...new Set(suggestions)]; // Remove duplicates
}
exports.getCuisineSuggestions = getCuisineSuggestions;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,