{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/linting/DomainSpecificRuleValidation.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/linting/DomainSpecificRuleValidation.test.ts"],"sourcesContent":["/**\n * Domain-Specific Rule Validation Tests\n * \n * Comprehensive validation of ESLint domain-specific rules for:\n * - Astrological calculation files\n * - Campaign system files  \n * - Test files\n * - Configuration files\n * \n * Requirements: 4.1, 4.2, 4.3, 4.4\n */\n\nimport { ESLint } from 'eslint';\nimport { promises as fs } from 'fs';\nimport path from 'path';\n\ndescribe('Domain-Specific Rule Validation', () => {\n  let eslint: ESLint;\n\n  beforeAll(async () => {\n    eslint = new ESLint({\n      configFile: path.resolve(__dirname, '../../..', 'eslint.config.cjs'),\n      useEslintrc: false,\n      cwd: path.resolve(__dirname, '../../..')\n    });\n  });\n\n  describe('Astrological Calculation File Rules', () => {\n    const astrologicalTestCode = `\n// Test astrological calculation file\nimport { getReliablePlanetaryPositions } from '@/utils/reliableAstronomy';\n\n// Mathematical constants should be preserved\nconst DEGREES_PER_SIGN = 30;\nconst RELIABLE_POSITIONS = {\n  sun: { sign: 'aries', degree: 8.5, exactLongitude: 8.5, isRetrograde: false },\n  moon: { sign: 'aries', degree: 1.57, exactLongitude: 1.57, isRetrograde: false }\n};\n\n// Planetary variables should be preserved\nconst planet = 'mars';\nconst degree = 22.63;\nconst sign = 'cancer';\nconst longitude = 112.63;\n\n// Fallback values should be preserved\nconst FALLBACK_POSITION = { sign: 'aries', degree: 0, exactLongitude: 0, isRetrograde: false };\n\n// Console debugging should be allowed\nconsole.info('Calculating planetary positions');\nconsole.debug('Position data:', { planet, degree, sign });\n\n// Complex astronomical calculations\nfunction calculatePlanetaryInfluence(planetPosition: any): number {\n  const baseInfluence = planetPosition.degree / DEGREES_PER_SIGN;\n  return planetPosition.isRetrograde ? baseInfluence * 0.8 : baseInfluence;\n}\n\n// Elemental properties structure\nconst elementalProperties = {\n  Fire: 0.7,\n  Water: 0.2,\n  Earth: 0.1,\n  Air: 0.0\n};\n`;\n\n    it('should preserve mathematical constants and planetary variables', async () => {\n      const results = await eslint.lintText(astrologicalTestCode, {\n        filePath: 'src/calculations/test-planetary.ts'\n      });\n\n      const errors = results[0]?.messages || [];\n      \n      // Should not flag mathematical constants as unused\n      const unusedConstantErrors = errors.filter(error => \n        error.message.includes('DEGREES_PER_SIGN') && \n        error.message.includes('unused')\n      );\n      expect(unusedConstantErrors).toHaveLength(0);\n\n      // Should not flag planetary variables as unused\n      const unusedPlanetaryErrors = errors.filter(error => \n        (error.message.includes('planet') || \n         error.message.includes('degree') || \n         error.message.includes('sign')) && \n        error.message.includes('unused')\n      );\n      expect(unusedPlanetaryErrors).toHaveLength(0);\n\n      // Should not flag fallback values as unused\n      const unusedFallbackErrors = errors.filter(error => \n        error.message.includes('FALLBACK') && \n        error.message.includes('unused')\n      );\n      expect(unusedFallbackErrors).toHaveLength(0);\n    });\n\n    it('should allow console debugging in astrological calculations', async () => {\n      const results = await eslint.lintText(astrologicalTestCode, {\n        filePath: 'src/calculations/test-planetary.ts'\n      });\n\n      const errors = results[0]?.messages || [];\n      \n      // Should allow console.info and console.debug\n      const consoleErrors = errors.filter(error => \n        error.ruleId === 'no-console' && \n        (error.message.includes('info') || error.message.includes('debug'))\n      );\n      expect(consoleErrors).toHaveLength(0);\n    });\n\n    it('should validate planetary position structure', async () => {\n      const invalidPositionCode = `\nconst invalidPosition = {\n  sign: 'aries',\n  degree: 8.5\n  // Missing exactLongitude and isRetrograde\n};\n`;\n\n      const results = await eslint.lintText(invalidPositionCode, {\n        filePath: 'src/calculations/test-invalid-position.ts'\n      });\n\n      const errors = results[0]?.messages || [];\n      const structureErrors = errors.filter(error => \n        error.ruleId === 'astrological/validate-planetary-position-structure'\n      );\n      \n      expect(structureErrors.length).toBeGreaterThan(0);\n    });\n\n    it('should validate elemental properties structure', async () => {\n      const invalidElementalCode = `\nconst invalidElemental = {\n  Fire: 0.7,\n  Water: 0.2\n  // Missing Earth and Air\n};\n`;\n\n      const results = await eslint.lintText(invalidElementalCode, {\n        filePath: 'src/calculations/test-invalid-elemental.ts'\n      });\n\n      const errors = results[0]?.messages || [];\n      const elementalErrors = errors.filter(error => \n        error.ruleId === 'astrological/validate-elemental-properties'\n      );\n      \n      expect(elementalErrors.length).toBeGreaterThan(0);\n    });\n\n    it('should preserve fallback values', async () => {\n      const fallbackViolationCode = `\nlet FALLBACK_POSITION = null; // This should trigger an error\nconst RELIABLE_DATA = undefined; // This should trigger an error\n`;\n\n      const results = await eslint.lintText(fallbackViolationCode, {\n        filePath: 'src/calculations/test-fallback-violation.ts'\n      });\n\n      const errors = results[0]?.messages || [];\n      const fallbackErrors = errors.filter(error => \n        error.ruleId === 'astrological/preserve-fallback-values'\n      );\n      \n      expect(fallbackErrors.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Campaign System File Rules', () => {\n    const campaignTestCode = `\n// Test campaign system file\nimport { CampaignController } from './CampaignController';\n\n// Campaign system variables should be preserved\nconst campaign = 'typescript-error-elimination';\nconst progress = 75.5;\nconst metrics = { errors: 100, warnings: 500 };\nconst safety = 'MAXIMUM';\n\n// Extensive logging should be allowed\nconsole.log('Campaign started:', campaign);\nconsole.info('Progress update:', progress);\nconsole.warn('Safety protocol activated');\nconsole.error('Campaign error detected');\nconsole.debug('Detailed metrics:', metrics);\n\n// Enterprise patterns should be allowed\nconst CAMPAIGN_CONFIG: any = {\n  errorThreshold: 100,\n  automationLevel: 'conservative',\n  rollbackStrategy: 'git-stash'\n};\n\n// Complex error handling\nfunction handleCampaignError(error: any): void {\n  console.error('Campaign error:', error);\n  if (error.critical) {\n    process.exit(1); // Should be allowed in campaign emergency protocols\n  }\n}\n\n// Dynamic imports for campaign tools\nconst loadCampaignTool = async (toolName: string) => {\n  return await import(\\`./tools/\\${toolName}\\`);\n};\n`;\n\n    it('should allow enterprise patterns and extensive logging', async () => {\n      const results = await eslint.lintText(campaignTestCode, {\n        filePath: 'src/services/campaign/test-campaign.ts'\n      });\n\n      const errors = results[0]?.messages || [];\n      \n      // Should allow all console statements\n      const consoleErrors = errors.filter(error => error.ruleId === 'no-console');\n      expect(consoleErrors).toHaveLength(0);\n\n      // Should allow explicit any for enterprise patterns\n      const explicitAnyErrors = errors.filter(error => \n        error.ruleId === '@typescript-eslint/no-explicit-any' && \n        error.severity === 2 // error level\n      );\n      expect(explicitAnyErrors).toHaveLength(0);\n\n      // Should allow process.exit in emergency protocols\n      const processExitErrors = errors.filter(error => error.ruleId === 'no-process-exit');\n      expect(processExitErrors).toHaveLength(0);\n\n      // Should allow dynamic imports\n      const dynamicImportErrors = errors.filter(error => \n        error.ruleId === 'import/no-dynamic-require'\n      );\n      expect(dynamicImportErrors).toHaveLength(0);\n    });\n\n    it('should preserve campaign system variable patterns', async () => {\n      const results = await eslint.lintText(campaignTestCode, {\n        filePath: 'src/services/campaign/test-campaign.ts'\n      });\n\n      const errors = results[0]?.messages || [];\n      \n      // Should not flag campaign variables as unused\n      const unusedCampaignErrors = errors.filter(error => \n        (error.message.includes('campaign') || \n         error.message.includes('progress') || \n         error.message.includes('metrics') || \n         error.message.includes('safety')) && \n        error.message.includes('unused')\n      );\n      expect(unusedCampaignErrors).toHaveLength(0);\n    });\n  });\n\n  describe('Test File Rules', () => {\n    const testFileCode = `\n// Test file\nimport { describe, it, expect, beforeEach, jest } from '@jest/globals';\n\ndescribe('Test Suite', () => {\n  let mockService: any; // Should be allowed\n  let stubFunction: any; // Should be allowed\n  const testData = { value: 123 };\n  const UNUSED_CONSTANT = 'test'; // Should be allowed with UNUSED_ prefix\n\n  beforeEach(() => {\n    mockService = jest.fn();\n    stubFunction = jest.fn();\n    console.log('Test setup'); // Should be allowed\n  });\n\n  it('should allow test patterns', () => {\n    const result = mockService();\n    expect(result).toBeDefined();\n    \n    // Non-null assertions should be allowed in tests\n    const value = testData.value!;\n    expect(value).toBe(123);\n    \n    // Magic numbers should be allowed in tests\n    expect(value).toBe(123);\n    expect(mockService).toHaveBeenCalledTimes(1);\n  });\n});\n`;\n\n    it('should provide appropriate relaxations for mock variables', async () => {\n      const results = await eslint.lintText(testFileCode, {\n        filePath: 'src/__tests__/test-example.test.ts'\n      });\n\n      const errors = results[0]?.messages || [];\n      \n      // Should allow explicit any in tests\n      const explicitAnyErrors = errors.filter(error => \n        error.ruleId === '@typescript-eslint/no-explicit-any'\n      );\n      expect(explicitAnyErrors).toHaveLength(0);\n\n      // Should allow console statements in tests\n      const consoleErrors = errors.filter(error => error.ruleId === 'no-console');\n      expect(consoleErrors).toHaveLength(0);\n\n      // Should allow non-null assertions in tests\n      const nonNullErrors = errors.filter(error => \n        error.ruleId === '@typescript-eslint/no-non-null-assertion'\n      );\n      expect(nonNullErrors).toHaveLength(0);\n\n      // Should allow magic numbers in tests\n      const magicNumberErrors = errors.filter(error => error.ruleId === 'no-magic-numbers');\n      expect(magicNumberErrors).toHaveLength(0);\n\n      // Should not flag mock/stub variables as unused\n      const unusedMockErrors = errors.filter(error => \n        (error.message.includes('mock') || error.message.includes('stub')) && \n        error.message.includes('unused')\n      );\n      expect(unusedMockErrors).toHaveLength(0);\n    });\n  });\n\n  describe('Configuration File Rules', () => {\n    const configFileCode = `\n// Configuration file\nconst path = require('path');\nconst fs = require('fs');\n\nmodule.exports = {\n  // Dynamic requires should be allowed\n  plugins: [\n    require('./custom-plugin'),\n    require(\\`./plugins/\\${process.env.NODE_ENV}\\`)\n  ],\n  \n  // Console statements should be allowed\n  setup() {\n    console.log('Configuration loaded');\n    console.warn('Development mode active');\n  },\n  \n  // Explicit any should be allowed for config flexibility\n  customConfig: {\n    handler: (options: any) => {\n      return options.transform ? options.transform(options.data) : options.data;\n    }\n  },\n  \n  // Build tool patterns\n  webpack: (config: any) => {\n    config.resolve.alias = {\n      '@': path.resolve(__dirname, 'src')\n    };\n    return config;\n  }\n};\n`;\n\n    it('should optimize configuration file rules for dynamic requires and build tools', async () => {\n      const results = await eslint.lintText(configFileCode, {\n        filePath: 'next.config.js'\n      });\n\n      const errors = results[0]?.messages || [];\n      \n      // Should allow console statements in config files\n      const consoleErrors = errors.filter(error => error.ruleId === 'no-console');\n      expect(consoleErrors).toHaveLength(0);\n\n      // Should allow explicit any in config files\n      const explicitAnyErrors = errors.filter(error => \n        error.ruleId === '@typescript-eslint/no-explicit-any'\n      );\n      expect(explicitAnyErrors).toHaveLength(0);\n\n      // Should allow dynamic requires in config files\n      const dynamicRequireErrors = errors.filter(error => \n        error.ruleId === 'import/no-dynamic-require'\n      );\n      expect(dynamicRequireErrors).toHaveLength(0);\n\n      // Should allow var-requires in config files\n      const varRequiresErrors = errors.filter(error => \n        error.ruleId === '@typescript-eslint/no-var-requires'\n      );\n      expect(varRequiresErrors).toHaveLength(0);\n    });\n  });\n\n  describe('Real File Validation', () => {\n    it('should validate actual astrological calculation files', async () => {\n      const astrologicalFiles = [\n        'src/calculations/culinary/culinaryAstrology.ts',\n        'src/utils/reliableAstronomy.ts',\n        'src/utils/astrology/astrologicalValidation.ts'\n      ];\n\n      for (const filePath of astrologicalFiles) {\n        try {\n          const fullPath = path.resolve(__dirname, '../../..', filePath);\n          await fs.access(fullPath);\n          \n          const results = await eslint.lintFile(fullPath);\n          const errors = results[0]?.messages || [];\n          \n          // Check that astrological rules are being applied\n          const astrologicalRuleErrors = errors.filter(error => \n            error.ruleId?.startsWith('astrological/')\n          );\n          \n          // Should have some astrological rule validations (or none if code is perfect)\n          expect(astrologicalRuleErrors.length).toBeGreaterThanOrEqual(0);\n          \n          // Should not have excessive unused variable errors for planetary constants\n          const unusedPlanetaryErrors = errors.filter(error => \n            error.ruleId === '@typescript-eslint/no-unused-vars' &&\n            (error.message.includes('planet') || \n             error.message.includes('degree') || \n             error.message.includes('FALLBACK'))\n          );\n          expect(unusedPlanetaryErrors.length).toBeLessThan(5);\n          \n        } catch (error) {\n          // File doesn't exist, skip validation\n          console.warn(`Skipping validation for non-existent file: ${filePath}`);\n        }\n      }\n    });\n\n    it('should validate actual campaign system files', async () => {\n      const campaignFiles = [\n        'src/services/campaign/CampaignController.ts',\n        'src/services/campaign/ProgressTracker.ts',\n        'src/types/campaign.ts'\n      ];\n\n      for (const filePath of campaignFiles) {\n        try {\n          const fullPath = path.resolve(__dirname, '../../..', filePath);\n          await fs.access(fullPath);\n          \n          const results = await eslint.lintFile(fullPath);\n          const errors = results[0]?.messages || [];\n          \n          // Should allow console statements in campaign files\n          const consoleErrors = errors.filter(error => error.ruleId === 'no-console');\n          expect(consoleErrors.length).toBeLessThan(10); // Some may be intentional warnings\n          \n          // Should not have excessive explicit any errors (should be warnings, not errors)\n          const explicitAnyErrors = errors.filter(error => \n            error.ruleId === '@typescript-eslint/no-explicit-any' && \n            error.severity === 2\n          );\n          expect(explicitAnyErrors.length).toBeLessThan(5);\n          \n        } catch (error) {\n          // File doesn't exist, skip validation\n          console.warn(`Skipping validation for non-existent file: ${filePath}`);\n        }\n      }\n    });\n\n    it('should validate actual test files', async () => {\n      const testFiles = [\n        'src/__tests__/linting/ESLintConfigurationValidation.test.ts',\n        'src/__tests__/validation/ComprehensiveValidation.test.ts'\n      ];\n\n      for (const filePath of testFiles) {\n        try {\n          const fullPath = path.resolve(__dirname, '../../..', filePath);\n          await fs.access(fullPath);\n          \n          const results = await eslint.lintFile(fullPath);\n          const errors = results[0]?.messages || [];\n          \n          // Should allow explicit any in test files\n          const explicitAnyErrors = errors.filter(error => \n            error.ruleId === '@typescript-eslint/no-explicit-any'\n          );\n          expect(explicitAnyErrors).toHaveLength(0);\n          \n          // Should allow console statements in test files\n          const consoleErrors = errors.filter(error => error.ruleId === 'no-console');\n          expect(consoleErrors).toHaveLength(0);\n          \n          // Should allow non-null assertions in test files\n          const nonNullErrors = errors.filter(error => \n            error.ruleId === '@typescript-eslint/no-non-null-assertion'\n          );\n          expect(nonNullErrors).toHaveLength(0);\n          \n        } catch (error) {\n          // File doesn't exist, skip validation\n          console.warn(`Skipping validation for non-existent file: ${filePath}`);\n        }\n      }\n    });\n\n    it('should validate actual configuration files', async () => {\n      const configFiles = [\n        'next.config.js',\n        'jest.config.js',\n        'tailwind.config.js'\n      ];\n\n      for (const filePath of configFiles) {\n        try {\n          const fullPath = path.resolve(__dirname, '../../..', filePath);\n          await fs.access(fullPath);\n          \n          const results = await eslint.lintFile(fullPath);\n          const errors = results[0]?.messages || [];\n          \n          // Should allow console statements in config files\n          const consoleErrors = errors.filter(error => error.ruleId === 'no-console');\n          expect(consoleErrors).toHaveLength(0);\n          \n          // Should allow dynamic requires in config files\n          const dynamicRequireErrors = errors.filter(error => \n            error.ruleId === 'import/no-dynamic-require'\n          );\n          expect(dynamicRequireErrors).toHaveLength(0);\n          \n        } catch (error) {\n          // File doesn't exist, skip validation\n          console.warn(`Skipping validation for non-existent file: ${filePath}`);\n        }\n      }\n    });\n  });\n\n  describe('Performance and Optimization', () => {\n    it('should have reasonable performance for domain-specific rules', async () => {\n      const testCode = `\nimport { getReliablePlanetaryPositions } from '@/utils/reliableAstronomy';\n\nconst DEGREES_PER_SIGN = 30;\nconst planet = 'mars';\nconst elementalProperties = { Fire: 0.7, Water: 0.2, Earth: 0.1, Air: 0.0 };\n\nconsole.info('Test performance');\n`;\n\n      const startTime = Date.now();\n      \n      const results = await eslint.lintText(testCode, {\n        filePath: 'src/calculations/performance-test.ts'\n      });\n      \n      const endTime = Date.now();\n      const duration = endTime - startTime;\n      \n      // Should complete within reasonable time (less than 1 second)\n      expect(duration).toBeLessThan(1000);\n      \n      // Should still produce valid results\n      expect(results).toBeDefined();\n      expect(results[0]).toBeDefined();\n    });\n\n    it('should cache domain-specific rule results effectively', async () => {\n      const testCode = `\nconst RELIABLE_POSITIONS = { sun: { sign: 'aries', degree: 8.5, exactLongitude: 8.5, isRetrograde: false } };\n`;\n\n      // First run\n      const startTime1 = Date.now();\n      await eslint.lintText(testCode, { filePath: 'src/calculations/cache-test-1.ts' });\n      const duration1 = Date.now() - startTime1;\n\n      // Second run (should be faster due to caching)\n      const startTime2 = Date.now();\n      await eslint.lintText(testCode, { filePath: 'src/calculations/cache-test-2.ts' });\n      const duration2 = Date.now() - startTime2;\n\n      // Second run should be faster or similar (caching effect)\n      expect(duration2).toBeLessThanOrEqual(duration1 * 1.5);\n    });\n  });\n});"],"version":3}