{"file":"/Users/GregCastro/Desktop/WhatToEatNext/backups/first-wave-2025-08-11T05-19-26-813Z/src/services/campaign/TypeScriptErrorAnalyzer.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/backups/first-wave-2025-08-11T05-19-26-813Z/src/services/campaign/TypeScriptErrorAnalyzer.ts"],"sourcesContent":["/**\n * TypeScript Error Analyzer for Perfect Codebase Campaign\n *\n * Implements systematic TypeScript error elimination using existing Enhanced Error Fixer v3.0 patterns\n * Provides error distribution analysis, categorization, and priority ranking system\n *\n * Requirements: 1.2, 1.3, 1.4, 1.5\n */\n\nimport { execSync } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\n\nexport interface TypeScriptError {\n  filePath: string;\n  line: number;\n  column: number;\n  code: string;\n  message: string;\n  category: ErrorCategory;\n  priority: number;\n  severity: ErrorSeverity;\n}\n\nexport enum ErrorCategory {\n  TS2352_TYPE_CONVERSION = 'TS2352',\n  TS2345_ARGUMENT_MISMATCH = 'TS2345',\n  TS2698_SPREAD_TYPE = 'TS2698',\n  TS2304_CANNOT_FIND_NAME = 'TS2304',\n  TS2362_ARITHMETIC_OPERATION = 'TS2362',\n  OTHER = 'OTHER',\n}\n\nexport enum ErrorSeverity {\n  HIGH = 'HIGH',\n  MEDIUM = 'MEDIUM',\n  LOW = 'LOW',\n}\n\nexport interface ErrorDistribution {\n  totalErrors: number;\n  errorsByCategory: Record<ErrorCategory, TypeScriptError[]>;\n  errorsByFile: Record<string, TypeScriptError[]>;\n  priorityRanking: TypeScriptError[];\n  highImpactFiles: Array<{\n    filePath: string;\n    errorCount: number;\n    categories: ErrorCategory[];\n    averagePriority: number;\n  }>;\n}\n\nexport interface AnalysisResult {\n  distribution: ErrorDistribution;\n  recommendations: Array<{\n    category: ErrorCategory;\n    errorCount: number;\n    priority: number;\n    description: string;\n    estimatedReduction: number;\n  }>;\n  timestamp: string;\n}\n\nexport class TypeScriptErrorAnalyzer {\n  private readonly HIGH_PRIORITY_ERRORS = ['TS2352', 'TS2345', 'TS2698', 'TS2304', 'TS2362'];\n  private readonly MEDIUM_PRIORITY_ERRORS = ['TS2322', 'TS2740', 'TS2339', 'TS2741', 'TS2688'];\n  private readonly LOW_PRIORITY_ERRORS = ['TS2820', 'TS2588', 'TS2300'];\n\n  /**\n   * Analyze TypeScript errors using `yarn tsc --noEmit --skipLibCheck` output\n   */\n  async analyzeErrors(): Promise<AnalysisResult> {\n    console.log('🔍 Analyzing TypeScript errors...');\n\n    const errors = await this.getTypeScriptErrors();\n    const distribution = this.createErrorDistribution(errors);\n    const recommendations = this.generateRecommendations(distribution);\n\n    return {\n      distribution,\n      recommendations,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  /**\n   * Get TypeScript errors using compiler output\n   */\n  private async getTypeScriptErrors(): Promise<TypeScriptError[]> {\n    try {\n      // Run TypeScript compiler with no emit and skip lib check for faster analysis\n      execSync('yarn tsc --noEmit --skipLibCheck', {\n        encoding: 'utf8',\n        stdio: 'pipe',\n        timeout: 120000, // 2 minute timeout\n      });\n\n      // If no errors, return empty array\n      return [];\n    } catch (error: any) {\n      const output = error.stdout || error.stderr || '';\n      return this.parseErrorsFromOutput(output);\n    }\n  }\n\n  /**\n   * Parse TypeScript compiler output to extract error information\n   */\n  private parseErrorsFromOutput(output: string): TypeScriptError[] {\n    const lines = output.split('\\n');\n    const errors: TypeScriptError[] = [];\n\n    for (const line of lines) {\n      // Parse TypeScript error format: file(line,col): error TS#### message\n      const match = line.match(/^(.+?)\\((\\d+),(\\d+)\\):\\s+error\\s+(TS\\d+):\\s*(.+)$/);\n      if (match) {\n        const [, filePath, lineNum, colNum, code, message] = match;\n\n        // Clean up file path to be relative to project root\n        const cleanFilePath = filePath.replace(/^.*?\\/WhatToEatNext\\//, '');\n\n        const error: TypeScriptError = {\n          filePath: cleanFilePath,\n          line: parseInt(lineNum),\n          column: parseInt(colNum),\n          code,\n          message: message.trim(),\n          category: this.categorizeError(code),\n          priority: this.calculateErrorPriority(code, cleanFilePath, message),\n          severity: this.determineSeverity(code, message),\n        };\n\n        errors.push(error);\n      }\n    }\n\n    console.log(`📊 Found ${errors.length} TypeScript errors`);\n    return errors;\n  }\n\n  /**\n   * Categorize error by code for targeted fixing\n   */\n  private categorizeError(code: string): ErrorCategory {\n    switch (code) {\n      case 'TS2352':\n        return ErrorCategory.TS2352_TYPE_CONVERSION;\n      case 'TS2345':\n        return ErrorCategory.TS2345_ARGUMENT_MISMATCH;\n      case 'TS2698':\n        return ErrorCategory.TS2698_SPREAD_TYPE;\n      case 'TS2304':\n        return ErrorCategory.TS2304_CANNOT_FIND_NAME;\n      case 'TS2362':\n        return ErrorCategory.TS2362_ARITHMETIC_OPERATION;\n      default:\n        return ErrorCategory.OTHER;\n    }\n  }\n\n  /**\n   * Calculate priority ranking based on error frequency and impact\n   */\n  private calculateErrorPriority(code: string, filePath: string, message: string): number {\n    let priority = 0;\n\n    // Error code priority (based on requirements 1.2, 1.3, 1.4, 1.5)\n    if (this.HIGH_PRIORITY_ERRORS.includes(code)) {\n      priority += 15;\n    } else if (this.MEDIUM_PRIORITY_ERRORS.includes(code)) {\n      priority += 10;\n    } else if (this.LOW_PRIORITY_ERRORS.includes(code)) {\n      priority += 5;\n    }\n\n    // File type priority - core system files get higher priority\n    if (filePath.includes('/types/')) priority += 8;\n    if (filePath.includes('/services/')) priority += 7;\n    if (filePath.includes('/components/')) priority += 6;\n    if (filePath.includes('/utils/')) priority += 4;\n    if (filePath.includes('/data/')) priority += 3;\n\n    // Message content priority - critical errors get higher priority\n    if (message.includes('not assignable')) priority += 5;\n    if (message.includes('Cannot find')) priority += 6;\n    if (message.includes('not exported')) priority += 7;\n    if (message.includes('missing')) priority += 4;\n    if (message.includes('Conversion of type')) priority += 8; // TS2352 specific\n    if (message.includes('Argument of type')) priority += 6; // TS2345 specific\n\n    return priority;\n  }\n\n  /**\n   * Determine error severity for processing order\n   */\n  private determineSeverity(code: string, message: string): ErrorSeverity {\n    // High severity - breaks builds or critical type safety\n    if (this.HIGH_PRIORITY_ERRORS.includes(code)) {\n      return ErrorSeverity.HIGH;\n    }\n\n    // Medium severity - type safety issues but not build-breaking\n    if (this.MEDIUM_PRIORITY_ERRORS.includes(code)) {\n      return ErrorSeverity.MEDIUM;\n    }\n\n    // Low severity - style or minor issues\n    return ErrorSeverity.LOW;\n  }\n\n  /**\n   * Create comprehensive error distribution analysis\n   */\n  private createErrorDistribution(errors: TypeScriptError[]): ErrorDistribution {\n    const errorsByCategory: Record<ErrorCategory, TypeScriptError[]> = {\n      [ErrorCategory.TS2352_TYPE_CONVERSION]: [],\n      [ErrorCategory.TS2345_ARGUMENT_MISMATCH]: [],\n      [ErrorCategory.TS2698_SPREAD_TYPE]: [],\n      [ErrorCategory.TS2304_CANNOT_FIND_NAME]: [],\n      [ErrorCategory.TS2362_ARITHMETIC_OPERATION]: [],\n      [ErrorCategory.OTHER]: [],\n    };\n\n    const errorsByFile: Record<string, TypeScriptError[]> = {};\n\n    // Categorize errors\n    for (const error of errors) {\n      errorsByCategory[error.category].push(error);\n\n      if (!errorsByFile[error.filePath]) {\n        errorsByFile[error.filePath] = [];\n      }\n      errorsByFile[error.filePath].push(error);\n    }\n\n    // Create priority ranking\n    const priorityRanking = [...errors].sort((a, b) => b.priority - a.priority);\n\n    // Identify high-impact files (>10 errors)\n    const highImpactFiles = Object.entries(errorsByFile)\n      .filter(([, fileErrors]) => fileErrors.length > 10)\n      .map(([filePath, fileErrors]) => ({\n        filePath,\n        errorCount: fileErrors.length,\n        categories: [...new Set(fileErrors.map(e => e.category))],\n        averagePriority: fileErrors.reduce((sum, e) => sum + e.priority, 0) / fileErrors.length,\n      }))\n      .sort((a, b) => b.errorCount - a.errorCount);\n\n    return {\n      totalErrors: errors.length,\n      errorsByCategory,\n      errorsByFile,\n      priorityRanking,\n      highImpactFiles,\n    };\n  }\n\n  /**\n   * Generate fix recommendations based on error distribution\n   */\n  private generateRecommendations(distribution: ErrorDistribution): Array<{\n    category: ErrorCategory;\n    errorCount: number;\n    priority: number;\n    description: string;\n    estimatedReduction: number;\n  }> {\n    const recommendations: Array<{\n      category: ErrorCategory;\n      errorCount: number;\n      priority: number;\n      description: string;\n      estimatedReduction: number;\n    }> = [];\n\n    // TS2352 Type Conversion Errors (highest priority per requirements)\n    const ts2352Count = distribution.errorsByCategory[ErrorCategory.TS2352_TYPE_CONVERSION].length;\n    if (ts2352Count > 0) {\n      recommendations.push({\n        category: ErrorCategory.TS2352_TYPE_CONVERSION,\n        errorCount: ts2352Count,\n        priority: 1,\n        description:\n          'Fix type conversion errors - often caused by incorrect type assertions or unsafe casts',\n        estimatedReduction: Math.round(ts2352Count * 0.9), // High success rate expected\n      });\n    }\n\n    // TS2345 Argument Type Mismatch (second priority)\n    const ts2345Count =\n      distribution.errorsByCategory[ErrorCategory.TS2345_ARGUMENT_MISMATCH].length;\n    if (ts2345Count > 0) {\n      recommendations.push({\n        category: ErrorCategory.TS2345_ARGUMENT_MISMATCH,\n        errorCount: ts2345Count,\n        priority: 2,\n        description:\n          'Fix argument type mismatches - usually requires type assertions or interface updates',\n        estimatedReduction: Math.round(ts2345Count * 0.85),\n      });\n    }\n\n    // TS2304 Cannot Find Name (third priority)\n    const ts2304Count = distribution.errorsByCategory[ErrorCategory.TS2304_CANNOT_FIND_NAME].length;\n    if (ts2304Count > 0) {\n      recommendations.push({\n        category: ErrorCategory.TS2304_CANNOT_FIND_NAME,\n        errorCount: ts2304Count,\n        priority: 3,\n        description:\n          'Fix missing imports and undefined references - often cascades to fix other errors',\n        estimatedReduction: Math.round(ts2304Count * 1.2), // Can fix cascading errors\n      });\n    }\n\n    // TS2698 Spread Type Errors\n    const ts2698Count = distribution.errorsByCategory[ErrorCategory.TS2698_SPREAD_TYPE].length;\n    if (ts2698Count > 0) {\n      recommendations.push({\n        category: ErrorCategory.TS2698_SPREAD_TYPE,\n        errorCount: ts2698Count,\n        priority: 4,\n        description: 'Fix spread operator type errors - requires careful type analysis',\n        estimatedReduction: Math.round(ts2698Count * 0.8),\n      });\n    }\n\n    // TS2362 Arithmetic Operation Errors\n    const ts2362Count =\n      distribution.errorsByCategory[ErrorCategory.TS2362_ARITHMETIC_OPERATION].length;\n    if (ts2362Count > 0) {\n      recommendations.push({\n        category: ErrorCategory.TS2362_ARITHMETIC_OPERATION,\n        errorCount: ts2362Count,\n        priority: 5,\n        description:\n          'Fix arithmetic operation type errors - usually requires number type assertions',\n        estimatedReduction: Math.round(ts2362Count * 0.9),\n      });\n    }\n\n    return recommendations.sort((a, b) => a.priority - b.priority);\n  }\n\n  /**\n   * Display analysis results in formatted output\n   */\n  displayResults(result: AnalysisResult): void {\n    console.log('\\n📊 TYPESCRIPT ERROR ANALYSIS RESULTS');\n    console.log('=====================================');\n\n    console.log(`\\n📈 Total Errors: ${result.distribution.totalErrors}`);\n\n    console.log('\\n🏷️  Errors by Category:');\n    Object.entries(result.distribution.errorsByCategory).forEach(([category, errors]) => {\n      if (errors.length > 0) {\n        console.log(`  ${category}: ${errors.length} errors`);\n      }\n    });\n\n    console.log('\\n🔥 High-Impact Files (>10 errors):');\n    result.distribution.highImpactFiles.slice(0, 10).forEach(file => {\n      console.log(\n        `  ${file.filePath}: ${file.errorCount} errors (avg priority: ${file.averagePriority.toFixed(1)})`,\n      );\n      console.log(`    Categories: ${file.categories.join(', ')}`);\n    });\n\n    console.log('\\n💡 Recommended Fix Order:');\n    result.recommendations.forEach(rec => {\n      console.log(`  ${rec.priority}. ${rec.category}: ${rec.errorCount} errors`);\n      console.log(`     Expected reduction: ~${rec.estimatedReduction} errors`);\n      console.log(`     ${rec.description}\\n`);\n    });\n\n    const totalEstimatedReduction = result.recommendations.reduce(\n      (sum, rec) => sum + rec.estimatedReduction,\n      0,\n    );\n\n    console.log(`📉 Estimated total error reduction: ${totalEstimatedReduction} errors`);\n    console.log(\n      `📊 Estimated remaining errors: ${result.distribution.totalErrors - totalEstimatedReduction}`,\n    );\n    console.log(`⏰ Analysis completed at: ${new Date(result.timestamp).toLocaleString()}`);\n  }\n\n  /**\n   * Save analysis results to file for tracking progress\n   */\n  async saveAnalysis(result: AnalysisResult, outputPath?: string): Promise<void> {\n    const defaultPath = path.join(process.cwd(), '.typescript-error-analysis.json');\n    const filePath = outputPath || defaultPath;\n\n    try {\n      await fs.promises.writeFile(filePath, JSON.stringify(result, null, 2));\n      console.log(`\\n💾 Analysis saved to: ${filePath}`);\n    } catch (error) {\n      console.error(`❌ Failed to save analysis: ${error}`);\n    }\n  }\n\n  /**\n   * Get current error count for progress tracking\n   */\n  async getCurrentErrorCount(): Promise<number> {\n    try {\n      const output = execSync('yarn tsc --noEmit --skipLibCheck 2>&1 | grep -c \"error TS\"', {\n        encoding: 'utf8',\n        stdio: 'pipe',\n        timeout: 30000, // 30 second timeout\n      });\n      return parseInt(output.trim()) || 0;\n    } catch (error) {\n      // If grep finds no matches, it returns exit code 1, or timeout occurred\n      console.warn('TypeScript error count check failed or timed out:', (error as Error).message);\n      return 0;\n    }\n  }\n}\n"],"version":3}