{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/scripts/validateDomainSpecificRules.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/scripts/validateDomainSpecificRules.ts"],"sourcesContent":["\n\n/**\n * Domain-Specific Rule Validation Script\n * \n * Validates that ESLint domain-specific rules are working correctly by\n * testing actual files and configurations rather than programmatic ESLint API.\n * \n * Requirements: 4.1, 4.2, 4.3, 4.4\n */\n\nimport { execSync } from 'child_process';\nimport { writeFileSync, unlinkSync, existsSync } from 'fs';\nimport path from 'path';\n\ninterface ValidationResult {\n  testName: string;\n  passed: boolean;\n  details: string;\n  errors?: string[];\n}\n\nclass DomainSpecificRuleValidator {\n  private results: ValidationResult[] = [];\n  private tempFiles: string[] = [];\n\n  async validateAll(): Promise<void> {\n    console.log('🔍 Starting Domain-Specific Rule Validation...\\n');\n\n    try {\n      await this.validateAstrologicalRules();\n      await this.validateCampaignSystemRules();\n      await this.validateTestFileRules();\n      await this.validateConfigurationFileRules();\n      await this.validateRealFiles();\n      \n      this.printResults();\n    } finally {\n      this.cleanup();\n    }\n  }\n\n  private async validateAstrologicalRules(): Promise<void> {\n    console.log('🌟 Testing Astrological Calculation File Rules...');\n\n    // Test 1: Mathematical constants and planetary variables preservation\n    const astroCode = `\n// Astrological calculation file\nconst DEGREES_PER_SIGN = 30;\nconst RELIABLE_POSITIONS = {\n  sun: { sign: 'aries', degree: 8.5, exactLongitude: 8.5, isRetrograde: false }\n};\nconst planet = 'mars';\nconst degree = 22.63;\nconst FALLBACK_VALUE = { sign: 'aries', degree: 0 };\n\nconsole.info('Calculating planetary positions');\nconsole.debug('Position data:', { planet, degree });\n\nfunction calculateInfluence(): number {\n  return DEGREES_PER_SIGN * 2;\n}\n`;\n\n    const astroFile = this.createTempFile('test-astro.ts', astroCode, 'src/calculations/');\n    const astroResult = this.runESLint(astroFile);\n    \n    // Should not flag astrological variables as unused\n    const unusedAstroErrors = astroResult.filter(error => \n      error.includes('unused') && \n      (error.includes('DEGREES_PER_SIGN') || \n       error.includes('planet') || \n       error.includes('degree') || \n       error.includes('FALLBACK_VALUE'))\n    );\n\n    // Should allow console debugging\n    const consoleErrors = astroResult.filter(error => \n      error.includes('no-console') && \n      (error.includes('info') || error.includes('debug'))\n    );\n\n    this.results.push({\n      testName: 'Astrological Variables Preservation',\n      passed: unusedAstroErrors.length === 0,\n      details: `Found ${unusedAstroErrors.length} unused variable errors for astrological patterns`,\n      errors: unusedAstroErrors\n    });\n\n    this.results.push({\n      testName: 'Astrological Console Debugging',\n      passed: consoleErrors.length === 0,\n      details: `Found ${consoleErrors.length} console errors in astrological files`,\n      errors: consoleErrors\n    });\n\n    // Test 2: Custom astrological rules (if plugin is working)\n    const invalidPositionCode = `\nconst invalidPosition = {\n  sign: 'aries',\n  degree: 8.5\n  // Missing exactLongitude and isRetrograde\n};\n`;\n\n    const invalidFile = this.createTempFile('test-invalid-position.ts', invalidPositionCode, 'src/calculations/');\n    const invalidResult = this.runESLint(invalidFile);\n    \n    const structureErrors = invalidResult.filter(error => \n      error.includes('astrological/validate-planetary-position-structure')\n    );\n\n    this.results.push({\n      testName: 'Planetary Position Structure Validation',\n      passed: structureErrors.length > 0,\n      details: `Found ${structureErrors.length} planetary position structure errors`,\n      errors: structureErrors\n    });\n  }\n\n  private async validateCampaignSystemRules(): Promise<void> {\n    console.log('🚀 Testing Campaign System File Rules...');\n\n    const campaignCode = `\n// Campaign system file\nconst campaign = 'typescript-error-elimination';\nconst progress = 75.5;\nconst metrics = { errors: 100, warnings: 500 };\nconst safety = 'MAXIMUM';\n\nconsole.log('Campaign started:', campaign);\nconsole.info('Progress update:', progress);\nconsole.warn('Safety protocol activated');\nconsole.error('Campaign error detected');\n\nconst CAMPAIGN_CONFIG: any = {\n  errorThreshold: 100,\n  automationLevel: 'conservative'\n};\n\nfunction handleError(error: any): void {\n  console.error('Campaign error:', error);\n  if (error.critical) {\n    process.exit(1);\n  }\n}\n\nconst loadTool = async (toolName: string) => {\n  return await import(\\`./tools/\\${toolName}\\`);\n};\n`;\n\n    const campaignFile = this.createTempFile('test-campaign.ts', campaignCode, 'src/services/campaign/');\n    const campaignResult = this.runESLint(campaignFile);\n\n    // Should allow all console statements\n    const consoleErrors = campaignResult.filter(error => error.includes('no-console'));\n    \n    // Should allow explicit any (warnings, not errors)\n    const explicitAnyErrors = campaignResult.filter(error => \n      error.includes('@typescript-eslint/no-explicit-any') && \n      error.includes('error')\n    );\n\n    // Should allow process.exit\n    const processExitErrors = campaignResult.filter(error => error.includes('no-process-exit'));\n\n    // Should allow dynamic imports\n    const dynamicImportErrors = campaignResult.filter(error => \n      error.includes('import/no-dynamic-require')\n    );\n\n    this.results.push({\n      testName: 'Campaign System Console Logging',\n      passed: consoleErrors.length === 0,\n      details: `Found ${consoleErrors.length} console errors in campaign files`,\n      errors: consoleErrors\n    });\n\n    this.results.push({\n      testName: 'Campaign System Explicit Any',\n      passed: explicitAnyErrors.length === 0,\n      details: `Found ${explicitAnyErrors.length} explicit any errors in campaign files`,\n      errors: explicitAnyErrors\n    });\n\n    this.results.push({\n      testName: 'Campaign System Process Exit',\n      passed: processExitErrors.length === 0,\n      details: `Found ${processExitErrors.length} process.exit errors in campaign files`,\n      errors: processExitErrors\n    });\n\n    this.results.push({\n      testName: 'Campaign System Dynamic Imports',\n      passed: dynamicImportErrors.length === 0,\n      details: `Found ${dynamicImportErrors.length} dynamic import errors in campaign files`,\n      errors: dynamicImportErrors\n    });\n  }\n\n  private async validateTestFileRules(): Promise<void> {\n    console.log('🧪 Testing Test File Rules...');\n\n    const testCode = `\n// Test file\nimport { describe, it, expect, jest } from '@jest/globals';\n\ndescribe('Test Suite', () => {\n  let mockService: any;\n  let stubFunction: any;\n  const testData = { value: 123 };\n  const UNUSED_CONSTANT = 'test';\n\n  beforeEach(() => {\n    mockService = jest.fn();\n    stubFunction = jest.fn();\n    console.log('Test setup');\n  });\n\n  it('should allow test patterns', () => {\n    const result = mockService();\n    expect(result).toBeDefined();\n    \n    const value = testData.value!;\n    expect(value).toBe(123);\n    \n    expect(mockService).toHaveBeenCalledTimes(1);\n  });\n});\n`;\n\n    const testFile = this.createTempFile('test-example.test.ts', testCode, 'src/__tests__/');\n    const testResult = this.runESLint(testFile);\n\n    // Should allow explicit any\n    const explicitAnyErrors = testResult.filter(error => \n      error.includes('@typescript-eslint/no-explicit-any')\n    );\n\n    // Should allow console statements\n    const consoleErrors = testResult.filter(error => error.includes('no-console'));\n\n    // Should allow non-null assertions\n    const nonNullErrors = testResult.filter(error => \n      error.includes('@typescript-eslint/no-non-null-assertion')\n    );\n\n    // Should allow magic numbers\n    const magicNumberErrors = testResult.filter(error => error.includes('no-magic-numbers'));\n\n    this.results.push({\n      testName: 'Test File Explicit Any',\n      passed: explicitAnyErrors.length === 0,\n      details: `Found ${explicitAnyErrors.length} explicit any errors in test files`,\n      errors: explicitAnyErrors\n    });\n\n    this.results.push({\n      testName: 'Test File Console Statements',\n      passed: consoleErrors.length === 0,\n      details: `Found ${consoleErrors.length} console errors in test files`,\n      errors: consoleErrors\n    });\n\n    this.results.push({\n      testName: 'Test File Non-null Assertions',\n      passed: nonNullErrors.length === 0,\n      details: `Found ${nonNullErrors.length} non-null assertion errors in test files`,\n      errors: nonNullErrors\n    });\n\n    this.results.push({\n      testName: 'Test File Magic Numbers',\n      passed: magicNumberErrors.length === 0,\n      details: `Found ${magicNumberErrors.length} magic number errors in test files`,\n      errors: magicNumberErrors\n    });\n  }\n\n  private async validateConfigurationFileRules(): Promise<void> {\n    console.log('⚙️ Testing Configuration File Rules...');\n\n    const configCode = `\n// Configuration file\nconst path = require('path');\n\nmodule.exports = {\n  plugins: [\n    require('./custom-plugin'),\n    require(\\`./plugins/\\${process.env.NODE_ENV}\\`)\n  ],\n  \n  setup() {\n    console.log('Configuration loaded');\n    console.warn('Development mode active');\n  },\n  \n  customConfig: {\n    handler: (options: any) => {\n      return options.transform ? options.transform(options.data) : options.data;\n    }\n  },\n  \n  webpack: (config: any) => {\n    config.resolve.alias = {\n      '@': path.resolve(__dirname, 'src')\n    };\n    return config;\n  }\n};\n`;\n\n    const configFile = this.createTempFile('test.config.js', configCode);\n    const configResult = this.runESLint(configFile);\n\n    // Should allow console statements\n    const consoleErrors = configResult.filter(error => error.includes('no-console'));\n\n    // Should allow explicit any\n    const explicitAnyErrors = configResult.filter(error => \n      error.includes('@typescript-eslint/no-explicit-any')\n    );\n\n    // Should allow dynamic requires\n    const dynamicRequireErrors = configResult.filter(error => \n      error.includes('import/no-dynamic-require')\n    );\n\n    // Should allow var-requires\n    const varRequireErrors = configResult.filter(error => \n      error.includes('@typescript-eslint/no-var-requires')\n    );\n\n    this.results.push({\n      testName: 'Config File Console Statements',\n      passed: consoleErrors.length === 0,\n      details: `Found ${consoleErrors.length} console errors in config files`,\n      errors: consoleErrors\n    });\n\n    this.results.push({\n      testName: 'Config File Explicit Any',\n      passed: explicitAnyErrors.length === 0,\n      details: `Found ${explicitAnyErrors.length} explicit any errors in config files`,\n      errors: explicitAnyErrors\n    });\n\n    this.results.push({\n      testName: 'Config File Dynamic Requires',\n      passed: dynamicRequireErrors.length === 0,\n      details: `Found ${dynamicRequireErrors.length} dynamic require errors in config files`,\n      errors: dynamicRequireErrors\n    });\n\n    this.results.push({\n      testName: 'Config File Var Requires',\n      passed: varRequireErrors.length === 0,\n      details: `Found ${varRequireErrors.length} var require errors in config files`,\n      errors: varRequireErrors\n    });\n  }\n\n  private async validateRealFiles(): Promise<void> {\n    console.log('📁 Testing Real Files...');\n\n    const realFiles = [\n      { path: 'src/calculations/culinary/culinaryAstrology.ts', type: 'astrological' },\n      { path: 'src/utils/reliableAstronomy.ts', type: 'astrological' },\n      { path: 'src/services/campaign/CampaignController.ts', type: 'campaign' },\n      { path: 'src/__tests__/linting/ESLintConfigurationValidation.test.ts', type: 'test' },\n      { path: 'next.config.js', type: 'config' },\n      { path: 'jest.config.js', type: 'config' }\n    ];\n\n    for (const file of realFiles) {\n      if (existsSync(file.path)) {\n        try {\n          const result = this.runESLint(file.path);\n          const errorCount = result.length;\n          \n          this.results.push({\n            testName: `Real File: ${file.path}`,\n            passed: errorCount < 50, // Allow some errors but not excessive\n            details: `Found ${errorCount} linting issues`,\n            errors: errorCount > 10 ? result.slice(0, 10) : result\n          });\n        } catch (error) {\n          this.results.push({\n            testName: `Real File: ${file.path}`,\n            passed: false,\n            details: `Failed to lint file: ${error}`,\n            errors: [String(error)]\n          });\n        }\n      } else {\n        this.results.push({\n          testName: `Real File: ${file.path}`,\n          passed: true,\n          details: 'File does not exist (skipped)',\n          errors: []\n        });\n      }\n    }\n  }\n\n  private createTempFile(filename: string, content: string, directory = ''): string {\n    const tempDir = path.join(process.cwd(), '.temp-validation');\n    const fullDir = path.join(tempDir, directory);\n    \n    // Create directory structure\n    try {\n      execSync(`mkdir -p \"${fullDir}\"`, { stdio: 'ignore' });\n    } catch (error) {\n      // Directory might already exist\n    }\n    \n    const filePath = path.join(fullDir, filename);\n    writeFileSync(filePath, content);\n    this.tempFiles.push(filePath);\n    return filePath;\n  }\n\n  private runESLint(filePath: string): string[] {\n    try {\n      // Run ESLint and capture output\n      execSync(`npx eslint \"${filePath}\" --format=compact`, { \n        stdio: 'pipe',\n        encoding: 'utf8'\n      });\n      return []; // No errors\n    } catch (error: any) {\n      // ESLint found issues, parse the output\n      const output = error.stdout || error.stderr || '';\n      return output\n        .split('\\n')\n        .filter((line: string) => line.trim() && !line.includes('✖'))\n        .map((line: string) => line.trim());\n    }\n  }\n\n  private printResults(): void {\n    console.log('\\n📊 Domain-Specific Rule Validation Results\\n');\n    console.log('='.repeat(60));\n\n    const passed = this.results.filter(r => r.passed).length;\n    const total = this.results.length;\n    \n    console.log(`\\n✅ Passed: ${passed}/${total} tests`);\n    console.log(`❌ Failed: ${total - passed}/${total} tests\\n`);\n\n    // Group results by category\n    const categories = {\n      'Astrological Rules': this.results.filter(r => r.testName.includes('Astrological')),\n      'Campaign System Rules': this.results.filter(r => r.testName.includes('Campaign')),\n      'Test File Rules': this.results.filter(r => r.testName.includes('Test File')),\n      'Config File Rules': this.results.filter(r => r.testName.includes('Config File')),\n      'Real Files': this.results.filter(r => r.testName.includes('Real File'))\n    };\n\n    for (const [category, results] of Object.entries(categories)) {\n      if (results.length === 0) continue;\n      \n      console.log(`\\n📋 ${category}:`);\n      console.log('-'.repeat(40));\n      \n      for (const result of results) {\n        const icon = result.passed ? '✅' : '❌';\n        console.log(`${icon} ${result.testName}`);\n        console.log(`   ${result.details}`);\n        \n        if (!result.passed && result.errors && result.errors.length > 0) {\n          console.log('   Errors:');\n          result.errors.slice(0, 3).forEach(error => {\n            console.log(`     • ${error}`);\n          });\n          if (result.errors.length > 3) {\n            console.log(`     ... and ${result.errors.length - 3} more`);\n          }\n        }\n        console.log();\n      }\n    }\n\n    // Summary\n    const overallPassed = (passed / total) >= 0.8; // 80% pass rate\n    console.log('='.repeat(60));\n    console.log(`\\n🎯 Overall Result: ${overallPassed ? '✅ PASSED' : '❌ FAILED'}`);\n    console.log(`   Success Rate: ${Math.round((passed / total) * 100)}%`);\n    \n    if (!overallPassed) {\n      console.log('\\n⚠️  Some domain-specific rules may need adjustment.');\n      console.log('   Check the failed tests above for details.');\n    } else {\n      console.log('\\n🎉 Domain-specific rules are working correctly!');\n    }\n  }\n\n  private cleanup(): void {\n    // Clean up temporary files\n    for (const file of this.tempFiles) {\n      try {\n        unlinkSync(file);\n      } catch (error) {\n        // File might not exist\n      }\n    }\n    \n    // Clean up temp directory\n    try {\n      execSync('rm -rf .temp-validation', { stdio: 'ignore' });\n    } catch (error) {\n      // Directory might not exist\n    }\n  }\n}\n\n// Run validation if called directly\nif (require.main === module) {\n  const validator = new DomainSpecificRuleValidator();\n  validator.validateAll().catch(error => {\n    console.error('❌ Validation failed:', error);\n    process.exit(1);\n  });\n}\n\nexport { DomainSpecificRuleValidator };"],"version":3}