{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/unintentional-any-elimination/ConservativeReplacementPilot.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/unintentional-any-elimination/ConservativeReplacementPilot.ts"],"sourcesContent":["/**\n * Conservative Replacement Pilot\n * Executes limited batch processing on high-confidence cases with real-time validation\n *\n * Task 12.2 Implementation:\n * - Run limited batch processing on high-confidence cases (10-15 files per batch)\n * - Focus on array types (any[] → unknown[]) and simple Record types\n * - Monitor build stability and rollback frequency with real-time validation\n * - Collect success rate metrics and safety protocol effectiveness\n * - Validate integration with existing campaign infrastructure\n * - Target >80% successful replacements with zero build failures\n */\n\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport { AnyTypeClassifier } from './AnyTypeClassifier';\nimport { CampaignIntegration } from './CampaignIntegration';\nimport { MetricsIntegration } from './MetricsIntegration';\nimport { ProgressiveImprovementEngine } from './ProgressiveImprovementEngine';\nimport { SafeTypeReplacer } from './SafeTypeReplacer';\nimport {\n    AnyTypeCategory,\n    AnyTypeClassification,\n    BatchProcessingResult,\n    ConservativePilotConfig,\n    ConservativePilotResult,\n    RealTimeValidationResult,\n    ReplacementResult,\n    SafetyMetrics,\n    TypeReplacement\n} from './types';\n\nexport class ConservativeReplacementPilot {\n  private classifier: AnyTypeClassifier;\n  private replacer: SafeTypeReplacer;\n  private progressiveEngine: ProgressiveImprovementEngine;\n  private campaignIntegration: CampaignIntegration;\n  private metricsIntegration: MetricsIntegration;\n  private config: ConservativePilotConfig;\n  private pilotStartTime: Date;\n  private batchResults: BatchProcessingResult[] = [];\n  private safetyMetrics: SafetyMetrics;\n\n  constructor(config: Partial<ConservativePilotConfig> = {}) {\n    this.config = {\n      maxFilesPerBatch: 15,\n      minFilesPerBatch: 10,\n      targetSuccessRate: 0.8,\n      maxBatches: 10,\n      realTimeValidation: true,\n      rollbackOnFailure: true,\n      safetyThreshold: 0.7,\n      focusCategories: [AnyTypeCategory.ARRAY_TYPE, AnyTypeCategory.RECORD_TYPE],\n      buildValidationFrequency: 1, // Validate after every batch\n      ...config\n    };\n\n    this.classifier = new AnyTypeClassifier();\n    this.replacer = new SafeTypeReplacer(\n      './.conservative-pilot-backups',\n      this.config.safetyThreshold\n    );\n    this.progressiveEngine = new ProgressiveImprovementEngine();\n    this.campaignIntegration = new CampaignIntegration();\n    this.metricsIntegration = new MetricsIntegration();\n    this.pilotStartTime = new Date();\n    this.safetyMetrics = this.initializeSafetyMetrics();\n  }\n\n  /**\n   * Execute the conservative replacement pilot\n   * Main entry point for Task 12.2\n   */\n  async executePilot(): Promise<ConservativePilotResult> {\n    console.log('🚀 Starting Conservative Replacement Pilot...');\n    console.log(`Configuration: ${this.config.maxFilesPerBatch} files per batch, ${this.config.maxBatches} max batches`);\n\n    try {\n      // Phase 1: Identify high-confidence cases\n      const highConfidenceCases = await this.identifyHighConfidenceCases();\n      console.log(`📊 Found ${highConfidenceCases.length} high-confidence cases`);\n\n      if (highConfidenceCases.length === 0) {\n        return this.createPilotResult(false, 'No high-confidence cases found for replacement');\n      }\n\n      // Phase 2: Execute batch processing\n      const batchProcessingResult = await this.executeBatchProcessing(highConfidenceCases);\n\n      // Phase 3: Validate integration with campaign infrastructure\n      const integrationValidation = await this.validateCampaignIntegration();\n\n      // Phase 4: Generate comprehensive results\n      const pilotResult = this.createPilotResult(\n        batchProcessingResult.success && integrationValidation.success,\n        batchProcessingResult.success ? 'Pilot completed successfully' : batchProcessingResult.error\n      );\n\n      // Phase 5: Report results\n      await this.generatePilotReport(pilotResult);\n\n      return pilotResult;\n\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      console.error('❌ Conservative Replacement Pilot failed:', errorMessage);\n\n      return this.createPilotResult(false, `Pilot execution failed: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Identify high-confidence cases for replacement\n   * Focus on array types and simple Record types\n   */\n  private async identifyHighConfidenceCases(): Promise<TypeReplacement[]> {\n    console.log('🔍 Identifying high-confidence replacement cases...');\n\n    const highConfidenceCases: TypeReplacement[] = [];\n\n    try {\n      // Get TypeScript files from the codebase\n      const tsFiles = await this.getTypeScriptFiles();\n      console.log(`📁 Analyzing ${tsFiles.length} TypeScript files`);\n\n      let filesAnalyzed = 0;\n      const maxFilesToAnalyze = 100; // Limit for pilot\n\n      for (const filePath of tsFiles.slice(0, maxFilesToAnalyze)) {\n        try {\n          const fileContent = fs.readFileSync(filePath, 'utf8');\n          const anyTypeOccurrences = this.findAnyTypeOccurrences(fileContent, filePath);\n\n          for (const occurrence of anyTypeOccurrences) {\n            const classification = await this.classifier.classify(occurrence.context);\n\n            // Focus on high-confidence, low-risk categories\n            if (this.isHighConfidenceCase(classification)) {\n              const replacement = this.createTypeReplacement(occurrence, classification);\n              if (replacement) {\n                highConfidenceCases.push(replacement);\n              }\n            }\n          }\n\n          filesAnalyzed++;\n          if (filesAnalyzed % 10 === 0) {\n            console.log(`📊 Analyzed ${filesAnalyzed} files, found ${highConfidenceCases.length} high-confidence cases`);\n          }\n\n        } catch (error) {\n          console.warn(`⚠️ Failed to analyze file ${filePath}:`, error);\n          continue;\n        }\n      }\n\n      // Sort by confidence score (highest first)\n      highConfidenceCases.sort((a, b) => b.confidence - a.confidence);\n\n      console.log(`✅ Identified ${highConfidenceCases.length} high-confidence cases from ${filesAnalyzed} files`);\n      return highConfidenceCases;\n\n    } catch (error) {\n      console.error('❌ Failed to identify high-confidence cases:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Execute batch processing with real-time validation\n   */\n  private async executeBatchProcessing(cases: TypeReplacement[]): Promise<BatchProcessingResult> {\n    console.log(`🔄 Starting batch processing of ${cases.length} cases...`);\n\n    let totalProcessed = 0;\n    let totalSuccessful = 0;\n    let totalFailed = 0;\n    let batchNumber = 0;\n\n    try {\n      // Group cases by file to optimize processing\n      const casesByFile = this.groupCasesByFile(cases);\n      const fileGroups = Array.from(casesByFile.entries());\n\n      while (totalProcessed < cases.length && batchNumber < this.config.maxBatches) {\n        batchNumber++;\n        console.log(`\\n📦 Processing Batch ${batchNumber}...`);\n\n        // Select files for this batch\n        const batchFiles = this.selectBatchFiles(fileGroups, totalProcessed);\n        const batchCases = batchFiles.flatMap(([_, fileCases]) => fileCases);\n\n        if (batchCases.length === 0) {\n          console.log('ℹ️ No more cases to process');\n          break;\n        }\n\n        console.log(`📊 Batch ${batchNumber}: Processing ${batchCases.length} cases across ${batchFiles.length} files`);\n\n        // Execute batch with real-time validation\n        const batchResult = await this.executeBatch(batchCases, batchNumber);\n        this.batchResults.push(batchResult);\n\n        // Update totals\n        totalProcessed += batchCases.length;\n        totalSuccessful += batchResult.successfulReplacements;\n        totalFailed += batchResult.failedReplacements;\n\n        // Real-time validation and safety checks\n        const validationResult = await this.performRealTimeValidation(batchResult);\n        if (!validationResult.buildStable) {\n          console.error('❌ Build stability compromised, stopping pilot');\n          return {\n            success: false,\n            error: 'Build stability compromised during batch processing',\n            totalProcessed,\n            totalSuccessful,\n            totalFailed,\n            batchResults: this.batchResults\n          };\n        }\n\n        // Check success rate\n        const currentSuccessRate = totalSuccessful / totalProcessed;\n        console.log(`📈 Current success rate: ${(currentSuccessRate * 100).toFixed(1)}%`);\n\n        if (currentSuccessRate < this.config.targetSuccessRate && batchNumber > 2) {\n          console.warn(`⚠️ Success rate ${(currentSuccessRate * 100).toFixed(1)}% below target ${(this.config.targetSuccessRate * 100).toFixed(1)}%`);\n          // Continue but with increased caution\n        }\n\n        // Brief pause between batches for system stability\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n\n      const finalSuccessRate = totalSuccessful / totalProcessed;\n      const success = finalSuccessRate >= this.config.targetSuccessRate && this.safetyMetrics.buildFailures === 0;\n\n      console.log(`\\n✅ Batch processing completed:`);\n      console.log(`   Total processed: ${totalProcessed}`);\n      console.log(`   Successful: ${totalSuccessful}`);\n      console.log(`   Failed: ${totalFailed}`);\n      console.log(`   Success rate: ${(finalSuccessRate * 100).toFixed(1)}%`);\n      console.log(`   Build failures: ${this.safetyMetrics.buildFailures}`);\n\n      return {\n        success,\n        totalProcessed,\n        totalSuccessful,\n        totalFailed,\n        batchResults: this.batchResults,\n        finalSuccessRate\n      };\n\n    } catch (error) {\n      console.error('❌ Batch processing failed:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : String(error),\n        totalProcessed,\n        totalSuccessful,\n        totalFailed,\n        batchResults: this.batchResults\n      };\n    }\n  }\n\n  /**\n   * Execute a single batch with comprehensive safety monitoring\n   */\n  private async executeBatch(cases: TypeReplacement[], batchNumber: number): Promise<BatchProcessingResult> {\n    const batchStartTime = new Date();\n    console.log(`⚡ Executing batch ${batchNumber} with ${cases.length} cases...`);\n\n    try {\n      // Pre-batch validation\n      const preBatchValidation = await this.validateBuildStability();\n      if (!preBatchValidation.buildSuccessful) {\n        console.error('❌ Pre-batch build validation failed');\n        this.safetyMetrics.buildFailures++;\n        return {\n          batchNumber,\n          startTime: batchStartTime,\n          endTime: new Date(),\n          casesProcessed: 0,\n          successfulReplacements: 0,\n          failedReplacements: cases.length,\n          buildStable: false,\n          rollbackPerformed: false,\n          error: 'Pre-batch build validation failed'\n        };\n      }\n\n      // Execute replacements\n      const replacementResult = await this.replacer.processBatch(cases);\n\n      // Post-batch validation\n      const postBatchValidation = await this.validateBuildStability();\n      const buildStable = postBatchValidation.buildSuccessful;\n\n      if (!buildStable && this.config.rollbackOnFailure) {\n        console.warn('⚠️ Post-batch build validation failed, performing rollback...');\n        // The SafeTypeReplacer should have already performed rollback\n        this.safetyMetrics.rollbacksPerformed++;\n        this.safetyMetrics.buildFailures++;\n      }\n\n      // Update safety metrics\n      this.updateSafetyMetrics(replacementResult, buildStable);\n\n      const batchResult: BatchProcessingResult = {\n        batchNumber,\n        startTime: batchStartTime,\n        endTime: new Date(),\n        casesProcessed: cases.length,\n        successfulReplacements: replacementResult.appliedReplacements.length,\n        failedReplacements: replacementResult.failedReplacements.length,\n        buildStable,\n        rollbackPerformed: replacementResult.rollbackPerformed,\n        compilationErrors: replacementResult.compilationErrors\n      };\n\n      console.log(`✅ Batch ${batchNumber} completed: ${batchResult.successfulReplacements}/${batchResult.casesProcessed} successful`);\n\n      return batchResult;\n\n    } catch (error) {\n      console.error(`❌ Batch ${batchNumber} execution failed:`, error);\n      this.safetyMetrics.batchFailures++;\n\n      return {\n        batchNumber,\n        startTime: batchStartTime,\n        endTime: new Date(),\n        casesProcessed: cases.length,\n        successfulReplacements: 0,\n        failedReplacements: cases.length,\n        buildStable: false,\n        rollbackPerformed: false,\n        error: error instanceof Error ? error.message : String(error)\n      };\n    }\n  }\n\n  /**\n   * Perform real-time validation after each batch\n   */\n  private async performRealTimeValidation(batchResult: BatchProcessingResult): Promise<RealTimeValidationResult> {\n    console.log('🔍 Performing real-time validation...');\n\n    try {\n      // Build stability check\n      const buildValidation = await this.validateBuildStability();\n\n      // TypeScript error count check\n      const currentErrorCount = await this.getCurrentTypeScriptErrorCount();\n\n      // Safety metrics check\n      const safetyScore = this.calculateSafetyScore();\n\n      const validationResult: RealTimeValidationResult = {\n        buildStable: buildValidation.buildSuccessful,\n        typeScriptErrorCount: currentErrorCount,\n        safetyScore,\n        validationTime: new Date(),\n        batchNumber: batchResult.batchNumber,\n        warnings: []\n      };\n\n      // Add warnings based on validation results\n      if (!buildValidation.buildSuccessful) {\n        validationResult.warnings.push('Build compilation failed');\n      }\n\n      if (safetyScore < this.config.safetyThreshold) {\n        validationResult.warnings.push(`Safety score ${safetyScore.toFixed(2)} below threshold ${this.config.safetyThreshold}`);\n      }\n\n      if (this.safetyMetrics.rollbacksPerformed > 0) {\n        validationResult.warnings.push(`${this.safetyMetrics.rollbacksPerformed} rollbacks performed`);\n      }\n\n      console.log(`📊 Validation result: Build stable: ${validationResult.buildStable}, Safety score: ${safetyScore.toFixed(2)}`);\n\n      return validationResult;\n\n    } catch (error) {\n      console.error('❌ Real-time validation failed:', error);\n      return {\n        buildStable: false,\n        typeScriptErrorCount: -1,\n        safetyScore: 0,\n        validationTime: new Date(),\n        batchNumber: batchResult.batchNumber,\n        warnings: ['Validation process failed'],\n        error: error instanceof Error ? error.message : String(error)\n      };\n    }\n  }\n\n  /**\n   * Validate integration with existing campaign infrastructure\n   */\n  private async validateCampaignIntegration(): Promise<{ success: boolean; error?: string }> {\n    console.log('🔗 Validating campaign infrastructure integration...');\n\n    try {\n      // Test campaign integration\n      const campaignValidation = await this.campaignIntegration.validateIntegration();\n      if (!campaignValidation.success) {\n        return { success: false, error: 'Campaign integration validation failed' };\n      }\n\n      // Test metrics integration\n      const metricsValidation = await this.metricsIntegration.validateIntegration();\n      if (!metricsValidation.success) {\n        return { success: false, error: 'Metrics integration validation failed' };\n      }\n\n      // Test progressive engine integration\n      const engineValidation = await this.progressiveEngine.validateConfiguration();\n      if (!engineValidation.isValid) {\n        return { success: false, error: 'Progressive engine validation failed' };\n      }\n\n      console.log('✅ Campaign infrastructure integration validated successfully');\n      return { success: true };\n\n    } catch (error) {\n      console.error('❌ Campaign integration validation failed:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : String(error)\n      };\n    }\n  }\n\n  /**\n   * Generate comprehensive pilot report\n   */\n  private async generatePilotReport(result: ConservativePilotResult): Promise<void> {\n    console.log('📄 Generating pilot report...');\n\n    const reportPath = '.kiro/campaign-reports/conservative-pilot';\n    if (!fs.existsSync(reportPath)) {\n      fs.mkdirSync(reportPath, { recursive: true });\n    }\n\n    // Generate detailed report\n    const report = {\n      pilotId: `conservative-pilot-${Date.now()}`,\n      timestamp: new Date().toISOString(),\n      configuration: this.config,\n      results: result,\n      batchResults: this.batchResults,\n      safetyMetrics: this.safetyMetrics,\n      executionTime: new Date().getTime() - this.pilotStartTime.getTime(),\n      recommendations: this.generateRecommendations(result)\n    };\n\n    // Save JSON report\n    const jsonReportPath = path.join(reportPath, 'pilot-report.json');\n    fs.writeFileSync(jsonReportPath, JSON.stringify(report, null, 2));\n\n    // Save markdown summary\n    const markdownReportPath = path.join(reportPath, 'pilot-summary.md');\n    const markdownContent = this.generateMarkdownReport(report);\n    fs.writeFileSync(markdownReportPath, markdownContent);\n\n    console.log(`📊 Pilot report saved to ${reportPath}`);\n  }\n\n  // Helper Methods\n\n  private async getTypeScriptFiles(): Promise<string[]> {\n    try {\n      const output = execSync('find src -name \"*.ts\" -o -name \"*.tsx\" | grep -v __tests__ | grep -v .test. | head -200', {\n        encoding: 'utf8',\n        stdio: 'pipe'\n      });\n      return output.trim().split('\\n').filter(file => file.trim());\n    } catch (error) {\n      console.warn('Failed to get TypeScript files, using fallback method');\n      return this.getFallbackTypeScriptFiles();\n    }\n  }\n\n  private getFallbackTypeScriptFiles(): string[] {\n    // Fallback method to get TypeScript files\n    const files: string[] = [];\n    const srcDir = 'src';\n\n    if (fs.existsSync(srcDir)) {\n      const walkDir = (dir: string) => {\n        const items = fs.readdirSync(dir);\n        for (const item of items) {\n          const fullPath = path.join(dir, item);\n          const stat = fs.statSync(fullPath);\n\n          if (stat.isDirectory() && !item.includes('__tests__') && !item.includes('node_modules')) {\n            walkDir(fullPath);\n          } else if (stat.isFile() && (item.endsWith('.ts') || item.endsWith('.tsx')) && !item.includes('.test.')) {\n            files.push(fullPath);\n          }\n        }\n      };\n\n      walkDir(srcDir);\n    }\n\n    return files.slice(0, 100); // Limit for pilot\n  }\n\n  private findAnyTypeOccurrences(content: string, filePath: string): Array<{ context: any; lineNumber: number }> {\n    const lines = content.split('\\n');\n    const occurrences: Array<{ context: any; lineNumber: number }> = [];\n\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i];\n\n      // Look for any[] patterns\n      if (line.includes('any[]')) {\n        occurrences.push({\n          context: {\n            filePath,\n            lineNumber: i + 1,\n            codeSnippet: line.trim(),\n            surroundingLines: this.getSurroundingLines(lines, i),\n            hasExistingComment: this.hasCommentAbove(lines, i),\n            isInTestFile: filePath.includes('.test.') || filePath.includes('__tests__'),\n            domainContext: { domain: this.inferDomain(filePath) }\n          },\n          lineNumber: i + 1\n        });\n      }\n\n      // Look for Record<string, any> patterns\n      if (line.includes('Record<string, any>')) {\n        occurrences.push({\n          context: {\n            filePath,\n            lineNumber: i + 1,\n            codeSnippet: line.trim(),\n            surroundingLines: this.getSurroundingLines(lines, i),\n            hasExistingComment: this.hasCommentAbove(lines, i),\n            isInTestFile: filePath.includes('.test.') || filePath.includes('__tests__'),\n            domainContext: { domain: this.inferDomain(filePath) }\n          },\n          lineNumber: i + 1\n        });\n      }\n    }\n\n    return occurrences;\n  }\n\n  private getSurroundingLines(lines: string[], index: number, context = 2): string[] {\n    const start = Math.max(0, index - context);\n    const end = Math.min(lines.length, index + context + 1);\n    return lines.slice(start, end);\n  }\n\n  private hasCommentAbove(lines: string[], index: number): boolean {\n    if (index > 0) {\n      const previousLine = lines[index - 1].trim();\n      return previousLine.startsWith('//') || previousLine.startsWith('/*');\n    }\n    return false;\n  }\n\n  private inferDomain(filePath: string): string {\n    if (filePath.includes('astro') || filePath.includes('planet') || filePath.includes('calculation')) {\n      return 'astrological';\n    }\n    if (filePath.includes('recipe') || filePath.includes('ingredient') || filePath.includes('food')) {\n      return 'recipe';\n    }\n    if (filePath.includes('campaign') || filePath.includes('intelligence')) {\n      return 'campaign';\n    }\n    if (filePath.includes('service') || filePath.includes('api')) {\n      return 'service';\n    }\n    return 'utility';\n  }\n\n  private isHighConfidenceCase(classification: AnyTypeClassification): boolean {\n    // Focus on specific categories for conservative pilot\n    if (!this.config.focusCategories.includes(classification.category)) {\n      return false;\n    }\n\n    // High confidence threshold\n    if (classification.confidence < 0.8) {\n      return false;\n    }\n\n    // Must be classified as unintentional\n    if (classification.isIntentional) {\n      return false;\n    }\n\n    // Additional safety checks\n    if (classification.category === AnyTypeCategory.ARRAY_TYPE) {\n      return true; // Array types are very safe\n    }\n\n    if (classification.category === AnyTypeCategory.RECORD_TYPE) {\n      // Only simple Record types\n      return classification.suggestedReplacement?.includes('unknown') || false;\n    }\n\n    return false;\n  }\n\n  private createTypeReplacement(occurrence: any, classification: AnyTypeClassification): TypeReplacement | null {\n    if (!classification.suggestedReplacement) {\n      return null;\n    }\n\n    let original: string;\n    let replacement: string;\n\n    if (classification.category === AnyTypeCategory.ARRAY_TYPE) {\n      original = 'any[]';\n      replacement = 'unknown[]';\n    } else if (classification.category === AnyTypeCategory.RECORD_TYPE) {\n      original = 'Record<string, any>';\n      replacement = 'Record<string, unknown>';\n    } else {\n      return null;\n    }\n\n    return {\n      original,\n      replacement,\n      filePath: occurrence.context.filePath,\n      lineNumber: occurrence.lineNumber,\n      confidence: classification.confidence,\n      validationRequired: true\n    };\n  }\n\n  private groupCasesByFile(cases: TypeReplacement[]): Map<string, TypeReplacement[]> {\n    const grouped = new Map<string, TypeReplacement[]>();\n\n    for (const case_ of cases) {\n      if (!grouped.has(case_.filePath)) {\n        grouped.set(case_.filePath, []);\n      }\n      grouped.get(case_.filePath)!.push(case_);\n    }\n\n    return grouped;\n  }\n\n  private selectBatchFiles(\n    fileGroups: Array<[string, TypeReplacement[]]>,\n    processedCount: number\n  ): Array<[string, TypeReplacement[]]> {\n    const remainingFiles = fileGroups.filter(([_, cases]) =>\n      cases.some(c => !this.isProcessed(c, processedCount))\n    );\n\n    // Select files to fit within batch size limits\n    const selectedFiles: Array<[string, TypeReplacement[]]> = [];\n    let totalCases = 0;\n\n    for (const [filePath, cases] of remainingFiles) {\n      const unprocessedCases = cases.filter(c => !this.isProcessed(c, processedCount));\n\n      if (totalCases + unprocessedCases.length <= this.config.maxFilesPerBatch) {\n        selectedFiles.push([filePath, unprocessedCases]);\n        totalCases += unprocessedCases.length;\n      }\n\n      if (selectedFiles.length >= this.config.maxFilesPerBatch || totalCases >= this.config.maxFilesPerBatch) {\n        break;\n      }\n    }\n\n    return selectedFiles;\n  }\n\n  private isProcessed(case_: TypeReplacement, processedCount: number): boolean {\n    // Simple tracking - in a real implementation, this would be more sophisticated\n    return false; // For now, assume no cases are pre-processed\n  }\n\n  private async validateBuildStability(): Promise<{ buildSuccessful: boolean; errors?: string[] }> {\n    try {\n      execSync('yarn tsc --noEmit --skipLibCheck', {\n        stdio: 'pipe',\n        timeout: 30000\n      });\n      return { buildSuccessful: true };\n    } catch (error) {\n      return {\n        buildSuccessful: false,\n        errors: [error instanceof Error ? error.message : String(error)]\n      };\n    }\n  }\n\n  private async getCurrentTypeScriptErrorCount(): Promise<number> {\n    try {\n      const output = execSync('yarn tsc --noEmit --skipLibCheck 2>&1 | grep -c \"error TS\" || echo \"0\"', {\n        encoding: 'utf8',\n        stdio: 'pipe'\n      });\n      return parseInt(output.trim()) || 0;\n    } catch (error) {\n      return -1; // Error in getting count\n    }\n  }\n\n  private initializeSafetyMetrics(): SafetyMetrics {\n    return {\n      buildFailures: 0,\n      rollbacksPerformed: 0,\n      batchFailures: 0,\n      compilationErrors: 0,\n      safetyProtocolActivations: 0\n    };\n  }\n\n  private updateSafetyMetrics(result: ReplacementResult, buildStable: boolean): void {\n    if (!buildStable) {\n      this.safetyMetrics.buildFailures++;\n    }\n\n    if (result.rollbackPerformed) {\n      this.safetyMetrics.rollbacksPerformed++;\n    }\n\n    if (result.compilationErrors.length > 0) {\n      this.safetyMetrics.compilationErrors += result.compilationErrors.length;\n    }\n  }\n\n  private calculateSafetyScore(): number {\n    const totalBatches = this.batchResults.length;\n    if (totalBatches === 0) return 1.0;\n\n    const successfulBatches = this.batchResults.filter(b => b.buildStable && !b.rollbackPerformed).length;\n    const baseScore = successfulBatches / totalBatches;\n\n    // Penalize for safety issues\n    const penalties = (\n      this.safetyMetrics.buildFailures * 0.2 +\n      this.safetyMetrics.rollbacksPerformed * 0.1 +\n      this.safetyMetrics.batchFailures * 0.15\n    );\n\n    return Math.max(0, baseScore - penalties);\n  }\n\n  private createPilotResult(success: boolean, message?: string): ConservativePilotResult {\n    const totalProcessed = this.batchResults.reduce((sum, batch) => sum + batch.casesProcessed, 0);\n    const totalSuccessful = this.batchResults.reduce((sum, batch) => sum + batch.successfulReplacements, 0);\n    const successRate = totalProcessed > 0 ? totalSuccessful / totalProcessed : 0;\n\n    return {\n      success,\n      message,\n      pilotStartTime: this.pilotStartTime,\n      pilotEndTime: new Date(),\n      totalCasesProcessed: totalProcessed,\n      totalSuccessfulReplacements: totalSuccessful,\n      successRate,\n      batchesExecuted: this.batchResults.length,\n      buildFailures: this.safetyMetrics.buildFailures,\n      rollbacksPerformed: this.safetyMetrics.rollbacksPerformed,\n      safetyScore: this.calculateSafetyScore(),\n      targetAchieved: successRate >= this.config.targetSuccessRate && this.safetyMetrics.buildFailures === 0,\n      batchResults: this.batchResults,\n      safetyMetrics: this.safetyMetrics\n    };\n  }\n\n  private generateRecommendations(result: ConservativePilotResult): string[] {\n    const recommendations: string[] = [];\n\n    if (result.successRate < this.config.targetSuccessRate) {\n      recommendations.push(`Success rate ${(result.successRate * 100).toFixed(1)}% below target ${(this.config.targetSuccessRate * 100).toFixed(1)}%. Consider more conservative classification thresholds.`);\n    }\n\n    if (result.buildFailures > 0) {\n      recommendations.push(`${result.buildFailures} build failures occurred. Review failed cases and improve safety validation.`);\n    }\n\n    if (result.rollbacksPerformed > 0) {\n      recommendations.push(`${result.rollbacksPerformed} rollbacks performed. Analyze rollback causes to improve replacement strategies.`);\n    }\n\n    if (result.safetyScore < this.config.safetyThreshold) {\n      recommendations.push(`Safety score ${result.safetyScore.toFixed(2)} below threshold. Implement additional safety measures before full campaign.`);\n    }\n\n    if (result.targetAchieved) {\n      recommendations.push('Pilot successful! Ready to proceed to full campaign execution (Task 12.3).');\n    } else {\n      recommendations.push('Pilot did not meet all targets. Review results and adjust strategy before full campaign.');\n    }\n\n    return recommendations;\n  }\n\n  private generateMarkdownReport(report: any): string {\n    return `# Conservative Replacement Pilot Report\n\n## Executive Summary\n\n**Pilot Status**: ${report.results.success ? '✅ SUCCESS' : '❌ FAILED'}\n**Execution Time**: ${Math.round(report.executionTime / 1000)}s\n**Target Achievement**: ${report.results.targetAchieved ? '✅ YES' : '❌ NO'}\n\n## Key Metrics\n\n- **Cases Processed**: ${report.results.totalCasesProcessed}\n- **Successful Replacements**: ${report.results.totalSuccessfulReplacements}\n- **Success Rate**: ${(report.results.successRate * 100).toFixed(1)}% (Target: ${(report.configuration.targetSuccessRate * 100).toFixed(1)}%)\n- **Batches Executed**: ${report.results.batchesExecuted}\n- **Build Failures**: ${report.results.buildFailures} (Target: 0)\n- **Rollbacks Performed**: ${report.results.rollbacksPerformed}\n- **Safety Score**: ${report.results.safetyScore.toFixed(2)} (Threshold: ${report.configuration.safetyThreshold})\n\n## Batch Results\n\n${report.batchResults.map((batch: any, index: number) => `\n### Batch ${batch.batchNumber}\n- **Cases**: ${batch.casesProcessed}\n- **Successful**: ${batch.successfulReplacements}\n- **Failed**: ${batch.failedReplacements}\n- **Build Stable**: ${batch.buildStable ? '✅' : '❌'}\n- **Rollback**: ${batch.rollbackPerformed ? '⚠️ YES' : '✅ NO'}\n`).join('')}\n\n## Safety Metrics\n\n- **Build Failures**: ${report.safetyMetrics.buildFailures}\n- **Rollbacks Performed**: ${report.safetyMetrics.rollbacksPerformed}\n- **Batch Failures**: ${report.safetyMetrics.batchFailures}\n- **Compilation Errors**: ${report.safetyMetrics.compilationErrors}\n\n## Recommendations\n\n${report.recommendations.map((rec: string) => `- ${rec}`).join('\\n')}\n\n## Configuration\n\n\\`\\`\\`json\n${JSON.stringify(report.configuration, null, 2)}\n\\`\\`\\`\n\n---\n*Report generated on ${new Date().toISOString()}*\n`;\n  }\n}\n"],"version":3}