74dd596beba621e28cbadff0884baa83
"use strict";
/**
 * Conservative Replacement Pilot
 * Executes limited batch processing on high-confidence cases with real-time validation
 *
 * Task 12.2 Implementation:
 * - Run limited batch processing on high-confidence cases (10-15 files per batch)
 * - Focus on array types (any[] ‚Üí unknown[]) and simple Record types
 * - Monitor build stability and rollback frequency with real-time validation
 * - Collect success rate metrics and safety protocol effectiveness
 * - Validate integration with existing campaign infrastructure
 * - Target >80% successful replacements with zero build failures
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConservativeReplacementPilot = void 0;
const child_process_1 = require("child_process");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const AnyTypeClassifier_1 = require("./AnyTypeClassifier");
const CampaignIntegration_1 = require("./CampaignIntegration");
const MetricsIntegration_1 = require("./MetricsIntegration");
const ProgressiveImprovementEngine_1 = require("./ProgressiveImprovementEngine");
const SafeTypeReplacer_1 = require("./SafeTypeReplacer");
const types_1 = require("./types");
class ConservativeReplacementPilot {
    classifier;
    replacer;
    progressiveEngine;
    campaignIntegration;
    metricsIntegration;
    config;
    pilotStartTime;
    batchResults = [];
    safetyMetrics;
    constructor(config = {}) {
        this.config = {
            maxFilesPerBatch: 15,
            minFilesPerBatch: 10,
            targetSuccessRate: 0.8,
            maxBatches: 10,
            realTimeValidation: true,
            rollbackOnFailure: true,
            safetyThreshold: 0.7,
            focusCategories: [types_1.AnyTypeCategory.ARRAY_TYPE, types_1.AnyTypeCategory.RECORD_TYPE],
            buildValidationFrequency: 1,
            ...config
        };
        this.classifier = new AnyTypeClassifier_1.AnyTypeClassifier();
        this.replacer = new SafeTypeReplacer_1.SafeTypeReplacer('./.conservative-pilot-backups', this.config.safetyThreshold);
        this.progressiveEngine = new ProgressiveImprovementEngine_1.ProgressiveImprovementEngine();
        this.campaignIntegration = new CampaignIntegration_1.CampaignIntegration();
        this.metricsIntegration = new MetricsIntegration_1.MetricsIntegration();
        this.pilotStartTime = new Date();
        this.safetyMetrics = this.initializeSafetyMetrics();
    }
    /**
     * Execute the conservative replacement pilot
     * Main entry point for Task 12.2
     */
    async executePilot() {
        console.log('üöÄ Starting Conservative Replacement Pilot...');
        console.log(`Configuration: ${this.config.maxFilesPerBatch} files per batch, ${this.config.maxBatches} max batches`);
        try {
            // Phase 1: Identify high-confidence cases
            const highConfidenceCases = await this.identifyHighConfidenceCases();
            console.log(`üìä Found ${highConfidenceCases.length} high-confidence cases`);
            if (highConfidenceCases.length === 0) {
                return this.createPilotResult(false, 'No high-confidence cases found for replacement');
            }
            // Phase 2: Execute batch processing
            const batchProcessingResult = await this.executeBatchProcessing(highConfidenceCases);
            // Phase 3: Validate integration with campaign infrastructure
            const integrationValidation = await this.validateCampaignIntegration();
            // Phase 4: Generate comprehensive results
            const pilotResult = this.createPilotResult(batchProcessingResult.success && integrationValidation.success, batchProcessingResult.success ? 'Pilot completed successfully' : batchProcessingResult.error);
            // Phase 5: Report results
            await this.generatePilotReport(pilotResult);
            return pilotResult;
        }
        catch (error) {
            const errorMessage = error instanceof Error ? error.message : String(error);
            console.error('‚ùå Conservative Replacement Pilot failed:', errorMessage);
            return this.createPilotResult(false, `Pilot execution failed: ${errorMessage}`);
        }
    }
    /**
     * Identify high-confidence cases for replacement
     * Focus on array types and simple Record types
     */
    async identifyHighConfidenceCases() {
        console.log('üîç Identifying high-confidence replacement cases...');
        const highConfidenceCases = [];
        try {
            // Get TypeScript files from the codebase
            const tsFiles = await this.getTypeScriptFiles();
            console.log(`üìÅ Analyzing ${tsFiles.length} TypeScript files`);
            let filesAnalyzed = 0;
            const maxFilesToAnalyze = 100; // Limit for pilot
            for (const filePath of tsFiles.slice(0, maxFilesToAnalyze)) {
                try {
                    const fileContent = fs.readFileSync(filePath, 'utf8');
                    const anyTypeOccurrences = this.findAnyTypeOccurrences(fileContent, filePath);
                    for (const occurrence of anyTypeOccurrences) {
                        const classification = await this.classifier.classify(occurrence.context);
                        // Focus on high-confidence, low-risk categories
                        if (this.isHighConfidenceCase(classification)) {
                            const replacement = this.createTypeReplacement(occurrence, classification);
                            if (replacement) {
                                highConfidenceCases.push(replacement);
                            }
                        }
                    }
                    filesAnalyzed++;
                    if (filesAnalyzed % 10 === 0) {
                        console.log(`üìä Analyzed ${filesAnalyzed} files, found ${highConfidenceCases.length} high-confidence cases`);
                    }
                }
                catch (error) {
                    console.warn(`‚ö†Ô∏è Failed to analyze file ${filePath}:`, error);
                    continue;
                }
            }
            // Sort by confidence score (highest first)
            highConfidenceCases.sort((a, b) => b.confidence - a.confidence);
            console.log(`‚úÖ Identified ${highConfidenceCases.length} high-confidence cases from ${filesAnalyzed} files`);
            return highConfidenceCases;
        }
        catch (error) {
            console.error('‚ùå Failed to identify high-confidence cases:', error);
            return [];
        }
    }
    /**
     * Execute batch processing with real-time validation
     */
    async executeBatchProcessing(cases) {
        console.log(`üîÑ Starting batch processing of ${cases.length} cases...`);
        let totalProcessed = 0;
        let totalSuccessful = 0;
        let totalFailed = 0;
        let batchNumber = 0;
        try {
            // Group cases by file to optimize processing
            const casesByFile = this.groupCasesByFile(cases);
            const fileGroups = Array.from(casesByFile.entries());
            while (totalProcessed < cases.length && batchNumber < this.config.maxBatches) {
                batchNumber++;
                console.log(`\nüì¶ Processing Batch ${batchNumber}...`);
                // Select files for this batch
                const batchFiles = this.selectBatchFiles(fileGroups, totalProcessed);
                const batchCases = batchFiles.flatMap(([_, fileCases]) => fileCases);
                if (batchCases.length === 0) {
                    console.log('‚ÑπÔ∏è No more cases to process');
                    break;
                }
                console.log(`üìä Batch ${batchNumber}: Processing ${batchCases.length} cases across ${batchFiles.length} files`);
                // Execute batch with real-time validation
                const batchResult = await this.executeBatch(batchCases, batchNumber);
                this.batchResults.push(batchResult);
                // Update totals
                totalProcessed += batchCases.length;
                totalSuccessful += batchResult.successfulReplacements;
                totalFailed += batchResult.failedReplacements;
                // Real-time validation and safety checks
                const validationResult = await this.performRealTimeValidation(batchResult);
                if (!validationResult.buildStable) {
                    console.error('‚ùå Build stability compromised, stopping pilot');
                    return {
                        success: false,
                        error: 'Build stability compromised during batch processing',
                        totalProcessed,
                        totalSuccessful,
                        totalFailed,
                        batchResults: this.batchResults
                    };
                }
                // Check success rate
                const currentSuccessRate = totalSuccessful / totalProcessed;
                console.log(`üìà Current success rate: ${(currentSuccessRate * 100).toFixed(1)}%`);
                if (currentSuccessRate < this.config.targetSuccessRate && batchNumber > 2) {
                    console.warn(`‚ö†Ô∏è Success rate ${(currentSuccessRate * 100).toFixed(1)}% below target ${(this.config.targetSuccessRate * 100).toFixed(1)}%`);
                    // Continue but with increased caution
                }
                // Brief pause between batches for system stability
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
            const finalSuccessRate = totalSuccessful / totalProcessed;
            const success = finalSuccessRate >= this.config.targetSuccessRate && this.safetyMetrics.buildFailures === 0;
            console.log(`\n‚úÖ Batch processing completed:`);
            console.log(`   Total processed: ${totalProcessed}`);
            console.log(`   Successful: ${totalSuccessful}`);
            console.log(`   Failed: ${totalFailed}`);
            console.log(`   Success rate: ${(finalSuccessRate * 100).toFixed(1)}%`);
            console.log(`   Build failures: ${this.safetyMetrics.buildFailures}`);
            return {
                success,
                totalProcessed,
                totalSuccessful,
                totalFailed,
                batchResults: this.batchResults,
                finalSuccessRate
            };
        }
        catch (error) {
            console.error('‚ùå Batch processing failed:', error);
            return {
                success: false,
                error: error instanceof Error ? error.message : String(error),
                totalProcessed,
                totalSuccessful,
                totalFailed,
                batchResults: this.batchResults
            };
        }
    }
    /**
     * Execute a single batch with comprehensive safety monitoring
     */
    async executeBatch(cases, batchNumber) {
        const batchStartTime = new Date();
        console.log(`‚ö° Executing batch ${batchNumber} with ${cases.length} cases...`);
        try {
            // Pre-batch validation
            const preBatchValidation = await this.validateBuildStability();
            if (!preBatchValidation.buildSuccessful) {
                console.error('‚ùå Pre-batch build validation failed');
                this.safetyMetrics.buildFailures++;
                return {
                    batchNumber,
                    startTime: batchStartTime,
                    endTime: new Date(),
                    casesProcessed: 0,
                    successfulReplacements: 0,
                    failedReplacements: cases.length,
                    buildStable: false,
                    rollbackPerformed: false,
                    error: 'Pre-batch build validation failed'
                };
            }
            // Execute replacements
            const replacementResult = await this.replacer.processBatch(cases);
            // Post-batch validation
            const postBatchValidation = await this.validateBuildStability();
            const buildStable = postBatchValidation.buildSuccessful;
            if (!buildStable && this.config.rollbackOnFailure) {
                console.warn('‚ö†Ô∏è Post-batch build validation failed, performing rollback...');
                // The SafeTypeReplacer should have already performed rollback
                this.safetyMetrics.rollbacksPerformed++;
                this.safetyMetrics.buildFailures++;
            }
            // Update safety metrics
            this.updateSafetyMetrics(replacementResult, buildStable);
            const batchResult = {
                batchNumber,
                startTime: batchStartTime,
                endTime: new Date(),
                casesProcessed: cases.length,
                successfulReplacements: replacementResult.appliedReplacements.length,
                failedReplacements: replacementResult.failedReplacements.length,
                buildStable,
                rollbackPerformed: replacementResult.rollbackPerformed,
                compilationErrors: replacementResult.compilationErrors
            };
            console.log(`‚úÖ Batch ${batchNumber} completed: ${batchResult.successfulReplacements}/${batchResult.casesProcessed} successful`);
            return batchResult;
        }
        catch (error) {
            console.error(`‚ùå Batch ${batchNumber} execution failed:`, error);
            this.safetyMetrics.batchFailures++;
            return {
                batchNumber,
                startTime: batchStartTime,
                endTime: new Date(),
                casesProcessed: cases.length,
                successfulReplacements: 0,
                failedReplacements: cases.length,
                buildStable: false,
                rollbackPerformed: false,
                error: error instanceof Error ? error.message : String(error)
            };
        }
    }
    /**
     * Perform real-time validation after each batch
     */
    async performRealTimeValidation(batchResult) {
        console.log('üîç Performing real-time validation...');
        try {
            // Build stability check
            const buildValidation = await this.validateBuildStability();
            // TypeScript error count check
            const currentErrorCount = await this.getCurrentTypeScriptErrorCount();
            // Safety metrics check
            const safetyScore = this.calculateSafetyScore();
            const validationResult = {
                buildStable: buildValidation.buildSuccessful,
                typeScriptErrorCount: currentErrorCount,
                safetyScore,
                validationTime: new Date(),
                batchNumber: batchResult.batchNumber,
                warnings: []
            };
            // Add warnings based on validation results
            if (!buildValidation.buildSuccessful) {
                validationResult.warnings.push('Build compilation failed');
            }
            if (safetyScore < this.config.safetyThreshold) {
                validationResult.warnings.push(`Safety score ${safetyScore.toFixed(2)} below threshold ${this.config.safetyThreshold}`);
            }
            if (this.safetyMetrics.rollbacksPerformed > 0) {
                validationResult.warnings.push(`${this.safetyMetrics.rollbacksPerformed} rollbacks performed`);
            }
            console.log(`üìä Validation result: Build stable: ${validationResult.buildStable}, Safety score: ${safetyScore.toFixed(2)}`);
            return validationResult;
        }
        catch (error) {
            console.error('‚ùå Real-time validation failed:', error);
            return {
                buildStable: false,
                typeScriptErrorCount: -1,
                safetyScore: 0,
                validationTime: new Date(),
                batchNumber: batchResult.batchNumber,
                warnings: ['Validation process failed'],
                error: error instanceof Error ? error.message : String(error)
            };
        }
    }
    /**
     * Validate integration with existing campaign infrastructure
     */
    async validateCampaignIntegration() {
        console.log('üîó Validating campaign infrastructure integration...');
        try {
            // Test campaign integration
            const campaignValidation = await this.campaignIntegration.validateIntegration();
            if (!campaignValidation.success) {
                return { success: false, error: 'Campaign integration validation failed' };
            }
            // Test metrics integration
            const metricsValidation = await this.metricsIntegration.validateIntegration();
            if (!metricsValidation.success) {
                return { success: false, error: 'Metrics integration validation failed' };
            }
            // Test progressive engine integration
            const engineValidation = await this.progressiveEngine.validateConfiguration();
            if (!engineValidation.isValid) {
                return { success: false, error: 'Progressive engine validation failed' };
            }
            console.log('‚úÖ Campaign infrastructure integration validated successfully');
            return { success: true };
        }
        catch (error) {
            console.error('‚ùå Campaign integration validation failed:', error);
            return {
                success: false,
                error: error instanceof Error ? error.message : String(error)
            };
        }
    }
    /**
     * Generate comprehensive pilot report
     */
    async generatePilotReport(result) {
        console.log('üìÑ Generating pilot report...');
        const reportPath = '.kiro/campaign-reports/conservative-pilot';
        if (!fs.existsSync(reportPath)) {
            fs.mkdirSync(reportPath, { recursive: true });
        }
        // Generate detailed report
        const report = {
            pilotId: `conservative-pilot-${Date.now()}`,
            timestamp: new Date().toISOString(),
            configuration: this.config,
            results: result,
            batchResults: this.batchResults,
            safetyMetrics: this.safetyMetrics,
            executionTime: new Date().getTime() - this.pilotStartTime.getTime(),
            recommendations: this.generateRecommendations(result)
        };
        // Save JSON report
        const jsonReportPath = path.join(reportPath, 'pilot-report.json');
        fs.writeFileSync(jsonReportPath, JSON.stringify(report, null, 2));
        // Save markdown summary
        const markdownReportPath = path.join(reportPath, 'pilot-summary.md');
        const markdownContent = this.generateMarkdownReport(report);
        fs.writeFileSync(markdownReportPath, markdownContent);
        console.log(`üìä Pilot report saved to ${reportPath}`);
    }
    // Helper Methods
    async getTypeScriptFiles() {
        try {
            const output = (0, child_process_1.execSync)('find src -name "*.ts" -o -name "*.tsx" | grep -v __tests__ | grep -v .test. | head -200', {
                encoding: 'utf8',
                stdio: 'pipe'
            });
            return output.trim().split('\n').filter(file => file.trim());
        }
        catch (error) {
            console.warn('Failed to get TypeScript files, using fallback method');
            return this.getFallbackTypeScriptFiles();
        }
    }
    getFallbackTypeScriptFiles() {
        // Fallback method to get TypeScript files
        const files = [];
        const srcDir = 'src';
        if (fs.existsSync(srcDir)) {
            const walkDir = (dir) => {
                const items = fs.readdirSync(dir);
                for (const item of items) {
                    const fullPath = path.join(dir, item);
                    const stat = fs.statSync(fullPath);
                    if (stat.isDirectory() && !item.includes('__tests__') && !item.includes('node_modules')) {
                        walkDir(fullPath);
                    }
                    else if (stat.isFile() && (item.endsWith('.ts') || item.endsWith('.tsx')) && !item.includes('.test.')) {
                        files.push(fullPath);
                    }
                }
            };
            walkDir(srcDir);
        }
        return files.slice(0, 100); // Limit for pilot
    }
    findAnyTypeOccurrences(content, filePath) {
        const lines = content.split('\n');
        const occurrences = [];
        for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            // Look for any[] patterns
            if (line.includes('any[]')) {
                occurrences.push({
                    context: {
                        filePath,
                        lineNumber: i + 1,
                        codeSnippet: line.trim(),
                        surroundingLines: this.getSurroundingLines(lines, i),
                        hasExistingComment: this.hasCommentAbove(lines, i),
                        isInTestFile: filePath.includes('.test.') || filePath.includes('__tests__'),
                        domainContext: { domain: this.inferDomain(filePath) }
                    },
                    lineNumber: i + 1
                });
            }
            // Look for Record<string, any> patterns
            if (line.includes('Record<string, any>')) {
                occurrences.push({
                    context: {
                        filePath,
                        lineNumber: i + 1,
                        codeSnippet: line.trim(),
                        surroundingLines: this.getSurroundingLines(lines, i),
                        hasExistingComment: this.hasCommentAbove(lines, i),
                        isInTestFile: filePath.includes('.test.') || filePath.includes('__tests__'),
                        domainContext: { domain: this.inferDomain(filePath) }
                    },
                    lineNumber: i + 1
                });
            }
        }
        return occurrences;
    }
    getSurroundingLines(lines, index, context = 2) {
        const start = Math.max(0, index - context);
        const end = Math.min(lines.length, index + context + 1);
        return lines.slice(start, end);
    }
    hasCommentAbove(lines, index) {
        if (index > 0) {
            const previousLine = lines[index - 1].trim();
            return previousLine.startsWith('//') || previousLine.startsWith('/*');
        }
        return false;
    }
    inferDomain(filePath) {
        if (filePath.includes('astro') || filePath.includes('planet') || filePath.includes('calculation')) {
            return 'astrological';
        }
        if (filePath.includes('recipe') || filePath.includes('ingredient') || filePath.includes('food')) {
            return 'recipe';
        }
        if (filePath.includes('campaign') || filePath.includes('intelligence')) {
            return 'campaign';
        }
        if (filePath.includes('service') || filePath.includes('api')) {
            return 'service';
        }
        return 'utility';
    }
    isHighConfidenceCase(classification) {
        // Focus on specific categories for conservative pilot
        if (!this.config.focusCategories.includes(classification.category)) {
            return false;
        }
        // High confidence threshold
        if (classification.confidence < 0.8) {
            return false;
        }
        // Must be classified as unintentional
        if (classification.isIntentional) {
            return false;
        }
        // Additional safety checks
        if (classification.category === types_1.AnyTypeCategory.ARRAY_TYPE) {
            return true; // Array types are very safe
        }
        if (classification.category === types_1.AnyTypeCategory.RECORD_TYPE) {
            // Only simple Record types
            return classification.suggestedReplacement?.includes('unknown') || false;
        }
        return false;
    }
    createTypeReplacement(occurrence, classification) {
        if (!classification.suggestedReplacement) {
            return null;
        }
        let original;
        let replacement;
        if (classification.category === types_1.AnyTypeCategory.ARRAY_TYPE) {
            original = 'any[]';
            replacement = 'unknown[]';
        }
        else if (classification.category === types_1.AnyTypeCategory.RECORD_TYPE) {
            original = 'Record<string, any>';
            replacement = 'Record<string, unknown>';
        }
        else {
            return null;
        }
        return {
            original,
            replacement,
            filePath: occurrence.context.filePath,
            lineNumber: occurrence.lineNumber,
            confidence: classification.confidence,
            validationRequired: true
        };
    }
    groupCasesByFile(cases) {
        const grouped = new Map();
        for (const case_ of cases) {
            if (!grouped.has(case_.filePath)) {
                grouped.set(case_.filePath, []);
            }
            grouped.get(case_.filePath).push(case_);
        }
        return grouped;
    }
    selectBatchFiles(fileGroups, processedCount) {
        const remainingFiles = fileGroups.filter(([_, cases]) => cases.some(c => !this.isProcessed(c, processedCount)));
        // Select files to fit within batch size limits
        const selectedFiles = [];
        let totalCases = 0;
        for (const [filePath, cases] of remainingFiles) {
            const unprocessedCases = cases.filter(c => !this.isProcessed(c, processedCount));
            if (totalCases + unprocessedCases.length <= this.config.maxFilesPerBatch) {
                selectedFiles.push([filePath, unprocessedCases]);
                totalCases += unprocessedCases.length;
            }
            if (selectedFiles.length >= this.config.maxFilesPerBatch || totalCases >= this.config.maxFilesPerBatch) {
                break;
            }
        }
        return selectedFiles;
    }
    isProcessed(case_, processedCount) {
        // Simple tracking - in a real implementation, this would be more sophisticated
        return false; // For now, assume no cases are pre-processed
    }
    async validateBuildStability() {
        try {
            (0, child_process_1.execSync)('yarn tsc --noEmit --skipLibCheck', {
                stdio: 'pipe',
                timeout: 30000
            });
            return { buildSuccessful: true };
        }
        catch (error) {
            return {
                buildSuccessful: false,
                errors: [error instanceof Error ? error.message : String(error)]
            };
        }
    }
    async getCurrentTypeScriptErrorCount() {
        try {
            const output = (0, child_process_1.execSync)('yarn tsc --noEmit --skipLibCheck 2>&1 | grep -c "error TS" || echo "0"', {
                encoding: 'utf8',
                stdio: 'pipe'
            });
            return parseInt(output.trim()) || 0;
        }
        catch (error) {
            return -1; // Error in getting count
        }
    }
    initializeSafetyMetrics() {
        return {
            buildFailures: 0,
            rollbacksPerformed: 0,
            batchFailures: 0,
            compilationErrors: 0,
            safetyProtocolActivations: 0
        };
    }
    updateSafetyMetrics(result, buildStable) {
        if (!buildStable) {
            this.safetyMetrics.buildFailures++;
        }
        if (result.rollbackPerformed) {
            this.safetyMetrics.rollbacksPerformed++;
        }
        if (result.compilationErrors.length > 0) {
            this.safetyMetrics.compilationErrors += result.compilationErrors.length;
        }
    }
    calculateSafetyScore() {
        const totalBatches = this.batchResults.length;
        if (totalBatches === 0)
            return 1.0;
        const successfulBatches = this.batchResults.filter(b => b.buildStable && !b.rollbackPerformed).length;
        const baseScore = successfulBatches / totalBatches;
        // Penalize for safety issues
        const penalties = (this.safetyMetrics.buildFailures * 0.2 +
            this.safetyMetrics.rollbacksPerformed * 0.1 +
            this.safetyMetrics.batchFailures * 0.15);
        return Math.max(0, baseScore - penalties);
    }
    createPilotResult(success, message) {
        const totalProcessed = this.batchResults.reduce((sum, batch) => sum + batch.casesProcessed, 0);
        const totalSuccessful = this.batchResults.reduce((sum, batch) => sum + batch.successfulReplacements, 0);
        const successRate = totalProcessed > 0 ? totalSuccessful / totalProcessed : 0;
        return {
            success,
            message,
            pilotStartTime: this.pilotStartTime,
            pilotEndTime: new Date(),
            totalCasesProcessed: totalProcessed,
            totalSuccessfulReplacements: totalSuccessful,
            successRate,
            batchesExecuted: this.batchResults.length,
            buildFailures: this.safetyMetrics.buildFailures,
            rollbacksPerformed: this.safetyMetrics.rollbacksPerformed,
            safetyScore: this.calculateSafetyScore(),
            targetAchieved: successRate >= this.config.targetSuccessRate && this.safetyMetrics.buildFailures === 0,
            batchResults: this.batchResults,
            safetyMetrics: this.safetyMetrics
        };
    }
    generateRecommendations(result) {
        const recommendations = [];
        if (result.successRate < this.config.targetSuccessRate) {
            recommendations.push(`Success rate ${(result.successRate * 100).toFixed(1)}% below target ${(this.config.targetSuccessRate * 100).toFixed(1)}%. Consider more conservative classification thresholds.`);
        }
        if (result.buildFailures > 0) {
            recommendations.push(`${result.buildFailures} build failures occurred. Review failed cases and improve safety validation.`);
        }
        if (result.rollbacksPerformed > 0) {
            recommendations.push(`${result.rollbacksPerformed} rollbacks performed. Analyze rollback causes to improve replacement strategies.`);
        }
        if (result.safetyScore < this.config.safetyThreshold) {
            recommendations.push(`Safety score ${result.safetyScore.toFixed(2)} below threshold. Implement additional safety measures before full campaign.`);
        }
        if (result.targetAchieved) {
            recommendations.push('Pilot successful! Ready to proceed to full campaign execution (Task 12.3).');
        }
        else {
            recommendations.push('Pilot did not meet all targets. Review results and adjust strategy before full campaign.');
        }
        return recommendations;
    }
    generateMarkdownReport(report) {
        return `# Conservative Replacement Pilot Report

## Executive Summary

**Pilot Status**: ${report.results.success ? '‚úÖ SUCCESS' : '‚ùå FAILED'}
**Execution Time**: ${Math.round(report.executionTime / 1000)}s
**Target Achievement**: ${report.results.targetAchieved ? '‚úÖ YES' : '‚ùå NO'}

## Key Metrics

- **Cases Processed**: ${report.results.totalCasesProcessed}
- **Successful Replacements**: ${report.results.totalSuccessfulReplacements}
- **Success Rate**: ${(report.results.successRate * 100).toFixed(1)}% (Target: ${(report.configuration.targetSuccessRate * 100).toFixed(1)}%)
- **Batches Executed**: ${report.results.batchesExecuted}
- **Build Failures**: ${report.results.buildFailures} (Target: 0)
- **Rollbacks Performed**: ${report.results.rollbacksPerformed}
- **Safety Score**: ${report.results.safetyScore.toFixed(2)} (Threshold: ${report.configuration.safetyThreshold})

## Batch Results

${report.batchResults.map((batch, index) => `
### Batch ${batch.batchNumber}
- **Cases**: ${batch.casesProcessed}
- **Successful**: ${batch.successfulReplacements}
- **Failed**: ${batch.failedReplacements}
- **Build Stable**: ${batch.buildStable ? '‚úÖ' : '‚ùå'}
- **Rollback**: ${batch.rollbackPerformed ? '‚ö†Ô∏è YES' : '‚úÖ NO'}
`).join('')}

## Safety Metrics

- **Build Failures**: ${report.safetyMetrics.buildFailures}
- **Rollbacks Performed**: ${report.safetyMetrics.rollbacksPerformed}
- **Batch Failures**: ${report.safetyMetrics.batchFailures}
- **Compilation Errors**: ${report.safetyMetrics.compilationErrors}

## Recommendations

${report.recommendations.map((rec) => `- ${rec}`).join('\n')}

## Configuration

\`\`\`json
${JSON.stringify(report.configuration, null, 2)}
\`\`\`

---
*Report generated on ${new Date().toISOString()}*
`;
    }
}
exports.ConservativeReplacementPilot = ConservativeReplacementPilot;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,