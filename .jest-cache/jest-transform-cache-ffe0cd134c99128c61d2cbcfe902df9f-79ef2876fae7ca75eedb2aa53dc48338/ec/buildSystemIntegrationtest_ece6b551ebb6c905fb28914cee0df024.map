{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/integration/buildSystemIntegration.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/integration/buildSystemIntegration.test.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport { execSync } from 'child_process';\n\n/**\n * Integration tests for build system repair functionality\n * Tests the actual build system repair CLI and functionality\n */\ndescribe('Build System Integration', () => {\n  const buildDir = '.next';\n  const serverDir = path.join(buildDir, 'server');\n\n  beforeAll(() => {\n    // Ensure we have a clean test environment\n    if (process.env.NODE_ENV !== 'test') {\n      console.warn('Build system integration tests should run in test environment');\n    }\n  });\n\n  describe('Build System Repair CLI', () => {\n    it('should validate existing build system', () => {\n      const output = execSync('node scripts/build-system-repair.cjs validate', {\n        encoding: 'utf8',\n        stdio: 'pipe'\n      });\n\n      expect(output).toContain('Validating build system');\n      expect(output).toMatch(/Build system is (valid|has issues)/);\n    });\n\n    it('should check build system health', () => {\n      const output = execSync('node scripts/build-system-repair.cjs health', {\n        encoding: 'utf8',\n        stdio: 'pipe'\n      });\n\n      expect(output).toContain('Health Report');\n      expect(output).toContain('Build exists:');\n      expect(output).toContain('Manifests valid:');\n      expect(output).toContain('Build size:');\n    });\n\n    it('should show help information', () => {\n      const output = execSync('node scripts/build-system-repair.cjs help', {\n        encoding: 'utf8',\n        stdio: 'pipe'\n      });\n\n      expect(output).toContain('Build System Repair CLI');\n      expect(output).toContain('Commands:');\n      expect(output).toContain('validate');\n      expect(output).toContain('repair');\n      expect(output).toContain('rebuild');\n    });\n  });\n\n  describe('Build System Validation', () => {\n    it('should detect when build directory exists', () => {\n      if (fs.existsSync(buildDir)) {\n        const output = execSync('node scripts/build-system-repair.cjs validate', {\n          encoding: 'utf8',\n          stdio: 'pipe'\n        });\n\n        expect(output).toContain('Build system is valid');\n      } else {\n        const output = execSync('node scripts/build-system-repair.cjs validate', {\n          encoding: 'utf8',\n          stdio: 'pipe'\n        });\n\n        expect(output).toContain('Missing files');\n      }\n    });\n\n    it('should provide meaningful health metrics', () => {\n      const output = execSync('node scripts/build-system-repair.cjs health', {\n        encoding: 'utf8',\n        stdio: 'pipe'\n      });\n\n      // Should contain timestamp\n      expect(output).toMatch(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\n      \n      // Should contain size information\n      expect(output).toMatch(/Build size: \\d+\\.\\d+ MB/);\n      \n      // Should contain status indicators\n      expect(output).toMatch(/(✅|❌)/);\n    });\n  });\n\n  describe('Build System Repair', () => {\n    it('should handle repair operations gracefully', () => {\n      // This test runs repair but should not break existing build\n      const output = execSync('node scripts/build-system-repair.cjs quick', {\n        encoding: 'utf8',\n        stdio: 'pipe'\n      });\n\n      expect(output).toContain('quick repair');\n      expect(output).toMatch(/(completed|successful)/);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle invalid commands gracefully', () => {\n      try {\n        execSync('node scripts/build-system-repair.cjs invalid-command', {\n          encoding: 'utf8',\n          stdio: 'pipe'\n        });\n        fail('Should have thrown an error for invalid command');\n      } catch (error: any) {\n        expect(error.status).toBe(1);\n        expect(error.stdout).toContain('Invalid or missing command');\n      }\n    });\n\n    it('should show help when no command provided', () => {\n      try {\n        execSync('node scripts/build-system-repair.cjs', {\n          encoding: 'utf8',\n          stdio: 'pipe'\n        });\n        fail('Should have thrown an error for missing command');\n      } catch (error: any) {\n        expect(error.status).toBe(1);\n        expect(error.stdout).toContain('Invalid or missing command');\n      }\n    });\n  });\n\n  describe('Package.json Scripts Integration', () => {\n    it('should have all build repair scripts defined', () => {\n      const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));\n      const scripts = packageJson.scripts;\n\n      expect(scripts['build:validate']).toBeDefined();\n      expect(scripts['build:repair']).toBeDefined();\n      expect(scripts['build:rebuild']).toBeDefined();\n      expect(scripts['build:comprehensive']).toBeDefined();\n      expect(scripts['build:quick']).toBeDefined();\n      expect(scripts['build:health']).toBeDefined();\n      expect(scripts['build:emergency']).toBeDefined();\n    });\n\n    it('should be able to run build validation via yarn script', () => {\n      const output = execSync('yarn build:validate', {\n        encoding: 'utf8',\n        stdio: 'pipe'\n      });\n\n      expect(output).toContain('Validating build system');\n    });\n\n    it('should be able to run health check via yarn script', () => {\n      const output = execSync('yarn build:health', {\n        encoding: 'utf8',\n        stdio: 'pipe'\n      });\n\n      expect(output).toContain('Health Report');\n    });\n  });\n});"],"version":3}