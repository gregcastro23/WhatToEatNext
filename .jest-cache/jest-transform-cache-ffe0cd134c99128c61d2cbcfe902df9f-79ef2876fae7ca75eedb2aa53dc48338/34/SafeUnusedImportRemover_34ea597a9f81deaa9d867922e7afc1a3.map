{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/linting/SafeUnusedImportRemover.ts","mappings":";AAAA;;;;;;;;;;GAUG;;;;;;AAEH,iDAAyC;AAEzC,gDAAwB;AAExB,8DAAgD;AA0BhD,MAAa,uBAAuB;IACjB,oBAAoB,GAAG;QACtC,gBAAgB;QAChB,gBAAgB;QAChB,0BAA0B;QAC1B,uBAAuB;QACvB,kCAAkC;QAClC,cAAc;QACd,WAAW;QACX,WAAW;QACX,cAAc;QACd,WAAW;QACX,SAAS;QACT,QAAQ;KACT,CAAC;IAEe,sBAAsB,GAAG;QACxC,qBAAqB;QACrB,gDAAgD;QAChD,iCAAiC;QACjC,yCAAyC;QACzC,UAAU;QACV,cAAc;QACd,WAAW;QACX,UAAU;QACV,SAAS;QACT,QAAQ;KACT,CAAC;IAEF;;OAEG;IACI,KAAK,CAAC,oBAAoB,CAAC,SAAkB,IAAI;QACtD,oBAAG,CAAC,IAAI,CAAC,8CAA8C,CAAC,CAAC;QAEzD,MAAM,MAAM,GAAwB;YAClC,aAAa,EAAE,CAAC;YAChB,YAAY,EAAE,CAAC;YACf,cAAc,EAAE,CAAC;YACjB,SAAS,EAAE,CAAC;YACZ,eAAe,EAAE,CAAC;YAClB,MAAM,EAAE,EAAE;YACV,QAAQ,EAAE,EAAE;YACZ,UAAU,EAAE,KAAK;SAClB,CAAC;QAEF,IAAI;YACF,iCAAiC;YACjC,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;YACxD,MAAM,CAAC,aAAa,GAAG,aAAa,CAAC,MAAM,CAAC;YAE5C,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC9B,oBAAG,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;gBACvC,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC;gBACzB,OAAO,MAAM,CAAC;aACf;YAED,6BAA6B;YAC7B,MAAM,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;YAC1D,MAAM,CAAC,YAAY,GAAG,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC;YAC9C,MAAM,CAAC,cAAc,GAAG,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC;YAClD,MAAM,CAAC,SAAS,GAAG,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC;YAE/C,mCAAmC;YACnC,IAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC,CAAC;YAEzC,IAAI,MAAM,EAAE;gBACV,oBAAG,CAAC,IAAI,CAAC,6CAA6C,CAAC,CAAC;gBACxD,oBAAG,CAAC,IAAI,CAAC,oDAAoD,CAAC,CAAC;gBAC/D,OAAO,MAAM,CAAC;aACf;YAED,8BAA8B;YAC9B,IAAI,WAAW,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC/B,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;gBACtE,MAAM,CAAC,eAAe,GAAG,cAAc,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;aACvE;YAED,2BAA2B;YAC3B,MAAM,CAAC,UAAU,GAAG,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;YAEjD,IAAI,MAAM,CAAC,UAAU,EAAE;gBACrB,oBAAG,CAAC,IAAI,CAAC,yDAAyD,CAAC,CAAC;gBACpE,oBAAG,CAAC,IAAI,CAAC,aAAa,MAAM,CAAC,eAAe,iBAAiB,CAAC,CAAC;gBAC/D,oBAAG,CAAC,IAAI,CAAC,kBAAkB,MAAM,CAAC,SAAS,mBAAmB,CAAC,CAAC;aACjE;iBAAM;gBACL,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,8CAA8C,CAAC,CAAC;aACpE;SACF;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,0BAA0B,KAAK,EAAE,CAAC,CAAC;YACtD,OAAO,CAAC,KAAK,CAAC,0BAA0B,EAAE,KAAK,CAAC,CAAC;SAClD;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,oBAAoB;QAChC,oBAAG,CAAC,IAAI,CAAC,4CAA4C,CAAC,CAAC;QAEvD,IAAI;YACF,MAAM,UAAU,GAAG,IAAA,wBAAQ,EAAC,iCAAiC,EAAE;gBAC7D,QAAQ,EAAE,MAAM;gBAChB,SAAS,EAAE,EAAE,GAAG,IAAI,GAAG,IAAI;aAC5B,CAAC,CAAC;YAEH,MAAM,aAAa,GAAmB,EAAE,CAAC;YACzC,MAAM,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAErC,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;gBACxB,IACE,IAAI,CAAC,QAAQ,CAAC,mCAAmC,CAAC;oBAClD,CAAC,IAAI,CAAC,QAAQ,CAAC,2BAA2B,CAAC;wBACzC,IAAI,CAAC,QAAQ,CAAC,4BAA4B,CAAC,CAAC,EAC9C;oBACA,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CACtB,mFAAmF,CACpF,CAAC;oBACF,IAAI,KAAK,EAAE;wBACT,MAAM,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC,GAAG,KAAK,CAAC;wBAE/D,MAAM,eAAe,GAAG,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;wBACnD,MAAM,UAAU,GAAG,eAAe,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;wBAE7D,aAAa,CAAC,IAAI,CAAC;4BACjB,IAAI,EAAE,QAAQ;4BACd,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC;4BACvB,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC;4BACxB,UAAU;4BACV,OAAO;4BACP,YAAY,EAAE,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC;4BACtC,eAAe,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC;4BACvC,iBAAiB,EAAE,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC;4BAC3C,QAAQ,EAAE,QAAQ;4BAClB,MAAM,EAAE,EAAE;yBACX,CAAC,CAAC;qBACJ;iBACF;aACF;YAED,oBAAG,CAAC,IAAI,CAAC,YAAY,aAAa,CAAC,MAAM,iBAAiB,CAAC,CAAC;YAC5D,OAAO,aAAa,CAAC;SACtB;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,qCAAqC,EAAE,KAAK,CAAC,CAAC;YAC5D,OAAO,EAAE,CAAC;SACX;IACH,CAAC;IAED;;OAEG;IACK,iBAAiB,CAAC,aAA6B;QAKrD,oBAAG,CAAC,IAAI,CAAC,4CAA4C,CAAC,CAAC;QAEvD,MAAM,WAAW,GAAG;YAClB,IAAI,EAAE,EAAoB;YAC1B,MAAM,EAAE,EAAoB;YAC5B,QAAQ,EAAE,EAAoB;SAC/B,CAAC;QAEF,KAAK,MAAM,YAAY,IAAI,aAAa,EAAE;YACxC,MAAM,QAAQ,GAAG,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;YAC1D,YAAY,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;YAC1C,YAAY,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;YAEtC,QAAQ,QAAQ,CAAC,QAAQ,EAAE;gBACzB,KAAK,MAAM;oBACT,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;oBACpC,MAAM;gBACR,KAAK,QAAQ;oBACX,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;oBACtC,MAAM;gBACR,KAAK,UAAU;oBACb,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;oBACxC,MAAM;aACT;SACF;QAED,OAAO,WAAW,CAAC;IACrB,CAAC;IAED;;OAEG;IACK,qBAAqB,CAAC,YAA0B;QAItD,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,YAAY,EAAE,GAAG,YAAY,CAAC;QAEjE,yDAAyD;QACzD,IAAI,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE;YACrE,OAAO;gBACL,QAAQ,EAAE,UAAU;gBACpB,MAAM,EAAE,wCAAwC;aACjD,CAAC;SACH;QAED,mDAAmD;QACnD,IAAI,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE;YACvE,OAAO;gBACL,QAAQ,EAAE,UAAU;gBACpB,MAAM,EAAE,mCAAmC;aAC5C,CAAC;SACH;QAED,gDAAgD;QAChD,IAAI,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YACvD,OAAO;gBACL,QAAQ,EAAE,UAAU;gBACpB,MAAM,EAAE,oCAAoC;aAC7C,CAAC;SACH;QAED,4DAA4D;QAC5D,IAAI,YAAY,EAAE;YAChB,OAAO;gBACL,QAAQ,EAAE,UAAU;gBACpB,MAAM,EAAE,wCAAwC;aACjD,CAAC;SACH;QAED,iEAAiE;QACjE,MAAM,YAAY,GAAG;YACnB,kBAAkB;YAClB,WAAW;YACX,SAAS;YACT,SAAS;YACT,SAAS;YACT,aAAa,EAAE,YAAY;SAC5B,CAAC;QAEF,IACE,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACtD,OAAO,CAAC,QAAQ,CAAC,2BAA2B,CAAC;YAC7C,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EACvB;YACA,OAAO;gBACL,QAAQ,EAAE,MAAM;gBAChB,MAAM,EAAE,8CAA8C;aACvD,CAAC;SACH;QAED,qCAAqC;QACrC,OAAO;YACL,QAAQ,EAAE,QAAQ;YAClB,MAAM,EAAE,mCAAmC;SAC5C,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,sBAAsB,CAAC,WAI9B;QACC,oBAAG,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;QAC1C,oBAAG,CAAC,IAAI,CAAC,qBAAqB,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;QACzD,oBAAG,CAAC,IAAI,CAAC,wBAAwB,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;QAC9D,oBAAG,CAAC,IAAI,CAAC,8BAA8B,WAAW,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,CAAC;QAExE,IAAI,WAAW,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;YAC/B,oBAAG,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;YAC9B,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;SAC7C;QAED,IAAI,WAAW,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;YACnC,oBAAG,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;YACzC,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,gBAAgB;YAC9E,IAAI,WAAW,CAAC,QAAQ,CAAC,MAAM,GAAG,EAAE,EAAE;gBACpC,oBAAG,CAAC,IAAI,CAAC,cAAc,WAAW,CAAC,QAAQ,CAAC,MAAM,GAAG,EAAE,OAAO,CAAC,CAAC;aACjE;SACF;QAED,IAAI,WAAW,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACjC,oBAAG,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;YAC1C,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,eAAe;YAC1E,IAAI,WAAW,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;gBACjC,oBAAG,CAAC,IAAI,CAAC,cAAc,WAAW,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,OAAO,CAAC,CAAC;aAC9D;SACF;IACH,CAAC;IAED;;OAEG;IACK,oBAAoB,CAAC,OAAuB;QAClD,MAAM,aAAa,GAAG,OAAO,CAAC,MAAM,CAClC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;YACX,MAAM,YAAY,GAAG,cAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;YAC5D,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC;gBAAE,GAAG,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC;YAC/C,GAAG,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC5B,OAAO,GAAG,CAAC;QACb,CAAC,EACD,EAAoC,CACrC,CAAC;QAEF,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,WAAW,CAAC,EAAE,EAAE;YAC5D,oBAAG,CAAC,IAAI,CAAC,SAAS,IAAI,GAAG,CAAC,CAAC;YAC3B,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;gBACxB,oBAAG,CAAC,IAAI,CAAC,gBAAgB,GAAG,CAAC,IAAI,MAAM,GAAG,CAAC,UAAU,MAAM,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC;YAC5E,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,iBAAiB,CAAC,WAA2B;QACzD,oBAAG,CAAC,IAAI,CAAC,mBAAmB,WAAW,CAAC,MAAM,yBAAyB,CAAC,CAAC;QAEzE,IAAI;YACF,2DAA2D;YAC3D,IAAA,wBAAQ,EAAC,mEAAmE,EAAE;gBAC5E,KAAK,EAAE,MAAM;gBACb,QAAQ,EAAE,MAAM;aACjB,CAAC,CAAC;YAEH,oBAAG,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;YAC5C,OAAO,IAAI,CAAC;SACb;QAAC,OAAO,KAAU,EAAE;YACnB,8DAA8D;YAC9D,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;gBACnD,oBAAG,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;gBAC5C,OAAO,IAAI,CAAC;aACb;iBAAM;gBACL,OAAO,CAAC,KAAK,CAAC,+BAA+B,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;gBAC9D,OAAO,KAAK,CAAC;aACd;SACF;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,eAAe;QAC3B,oBAAG,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;QAEvC,IAAI;YACF,+BAA+B;YAC/B,IAAA,wBAAQ,EAAC,kCAAkC,EAAE;gBAC3C,KAAK,EAAE,MAAM;gBACb,QAAQ,EAAE,MAAM;aACjB,CAAC,CAAC;YACH,oBAAG,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;YAE3C,OAAO,IAAI,CAAC;SACb;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;YACrC,OAAO,KAAK,CAAC;SACd;IACH,CAAC;IAED;;OAEG;IACI,cAAc;QAKnB,IAAI;YACF,oCAAoC;YACpC,MAAM,gBAAgB,GAAG,IAAA,wBAAQ,EAC/B,iFAAiF,EACjF;gBACE,QAAQ,EAAE,MAAM;aACjB,CACF,CAAC;YACF,MAAM,UAAU,GAAG,QAAQ,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC;YAE1D,sCAAsC;YACtC,MAAM,aAAa,GAAG,IAAA,wBAAQ,EAAC,gDAAgD,EAAE;gBAC/E,QAAQ,EAAE,MAAM;aACjB,CAAC,CAAC;YACH,MAAM,eAAe,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC;YAE5D,6CAA6C;YAC7C,MAAM,mBAAmB,GAAG,IAAA,wBAAQ,EAClC,kHAAkH,EAClH;gBACE,QAAQ,EAAE,MAAM;aACjB,CACF,CAAC;YACF,MAAM,aAAa,GAAG,QAAQ,CAAC,mBAAmB,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC;YAEhE,OAAO,EAAE,UAAU,EAAE,aAAa,EAAE,eAAe,EAAE,CAAC;SACvD;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,EAAE,UAAU,EAAE,CAAC,EAAE,aAAa,EAAE,CAAC,EAAE,eAAe,EAAE,CAAC,EAAE,CAAC;SAChE;IACH,CAAC;CACF;AA/YD,0DA+YC","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/linting/SafeUnusedImportRemover.ts"],"sourcesContent":["/**\n * Safe Unused Import Removal System\n *\n * Implements comprehensive unused import removal while preserving:\n * - Imports used in type annotations or JSX\n * - Dynamic imports and conditional imports\n * - Critical astrological calculation imports\n * - Campaign system intelligence imports\n *\n * Requirements: 3.2, 4.1\n */\n\nimport { execSync } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\n\nimport { log } from '@/services/LoggingService';\n\ninterface UnusedImport {\n  file: string;\n  line: number;\n  column: number;\n  importName: string;\n  message: string;\n  isTypeImport: boolean;\n  isDefaultImport: boolean;\n  isNamespaceImport: boolean;\n  severity: 'safe' | 'review' | 'preserve';\n  reason?: string;\n}\n\ninterface ImportRemovalResult {\n  totalAnalyzed: number;\n  safeToRemove: number;\n  requiresReview: number;\n  preserved: number;\n  actuallyRemoved: number;\n  errors: string[];\n  warnings: string[];\n  buildValid: boolean;\n}\n\nexport class SafeUnusedImportRemover {\n  private readonly astrologicalPatterns = [\n    '/calculations/',\n    '/data/planets/',\n    '/utils/reliableAstronomy',\n    '/utils/astrologyUtils',\n    '/utils/planetaryConsistencyCheck',\n    'astrological',\n    'planetary',\n    'elemental',\n    'astronomical',\n    'ephemeris',\n    'transit',\n    'zodiac',\n  ];\n\n  private readonly campaignSystemPatterns = [\n    '/services/campaign/',\n    '/services/AdvancedAnalyticsIntelligenceService',\n    '/services/MLIntelligenceService',\n    '/services/PredictiveIntelligenceService',\n    'Campaign',\n    'Intelligence',\n    'Analytics',\n    'Progress',\n    'Metrics',\n    'Safety',\n  ];\n\n  /**\n   * Analyze and remove unused imports safely\n   */\n  public async processUnusedImports(dryRun: boolean = true): Promise<ImportRemovalResult> {\n    log.info('🔍 Starting Safe Unused Import Analysis...\\n');\n\n    const result: ImportRemovalResult = {\n      totalAnalyzed: 0,\n      safeToRemove: 0,\n      requiresReview: 0,\n      preserved: 0,\n      actuallyRemoved: 0,\n      errors: [],\n      warnings: [],\n      buildValid: false,\n    };\n\n    try {\n      // Step 1: Analyze unused imports\n      const unusedImports = await this.analyzeUnusedImports();\n      result.totalAnalyzed = unusedImports.length;\n\n      if (unusedImports.length === 0) {\n        log.info('✅ No unused imports found!');\n        result.buildValid = true;\n        return result;\n      }\n\n      // Step 2: Categorize imports\n      const categorized = this.categorizeImports(unusedImports);\n      result.safeToRemove = categorized.safe.length;\n      result.requiresReview = categorized.review.length;\n      result.preserved = categorized.preserve.length;\n\n      // Step 3: Display analysis results\n      this.displayAnalysisResults(categorized);\n\n      if (dryRun) {\n        log.info('\\n🔍 DRY RUN MODE - No changes will be made');\n        log.info('Use processUnusedImports(false) to execute removal');\n        return result;\n      }\n\n      // Step 4: Remove safe imports\n      if (categorized.safe.length > 0) {\n        const removalSuccess = await this.removeSafeImports(categorized.safe);\n        result.actuallyRemoved = removalSuccess ? categorized.safe.length : 0;\n      }\n\n      // Step 5: Validate changes\n      result.buildValid = await this.validateChanges();\n\n      if (result.buildValid) {\n        log.info('\\n🎉 Safe unused import removal completed successfully!');\n        log.info(`✅ Removed ${result.actuallyRemoved} unused imports`);\n        log.info(`🛡️  Preserved ${result.preserved} critical imports`);\n      } else {\n        result.errors.push('Build validation failed after import removal');\n      }\n    } catch (error) {\n      result.errors.push(`Import removal failed: ${error}`);\n      console.error('❌ Import removal failed:', error);\n    }\n\n    return result;\n  }\n\n  /**\n   * Analyze unused imports from ESLint output\n   */\n  private async analyzeUnusedImports(): Promise<UnusedImport[]> {\n    log.info('🔍 Analyzing unused imports from ESLint...');\n\n    try {\n      const lintOutput = execSync('yarn lint --format=compact 2>&1', {\n        encoding: 'utf8',\n        maxBuffer: 20 * 1024 * 1024,\n      });\n\n      const unusedImports: UnusedImport[] = [];\n      const lines = lintOutput.split('\\n');\n\n      for (const line of lines) {\n        if (\n          line.includes('@typescript-eslint/no-unused-vars') &&\n          (line.includes('is defined but never used') ||\n            line.includes('is imported but never used'))\n        ) {\n          const match = line.match(\n            /^(.+):(\\d+):(\\d+):\\s+(warning|error)\\s+(.+?)\\s+@typescript-eslint\\/no-unused-vars/,\n          );\n          if (match) {\n            const [, filePath, lineNum, colNum, severity, message] = match;\n\n            const importNameMatch = message.match(/'([^']+)'/);\n            const importName = importNameMatch ? importNameMatch[1] : '';\n\n            unusedImports.push({\n              file: filePath,\n              line: parseInt(lineNum),\n              column: parseInt(colNum),\n              importName,\n              message,\n              isTypeImport: message.includes('type'),\n              isDefaultImport: !message.includes('{'),\n              isNamespaceImport: message.includes('* as'),\n              severity: 'review',\n              reason: '',\n            });\n          }\n        }\n      }\n\n      log.info(`📊 Found ${unusedImports.length} unused imports`);\n      return unusedImports;\n    } catch (error) {\n      console.error('❌ Failed to analyze unused imports:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Categorize imports by safety level\n   */\n  private categorizeImports(unusedImports: UnusedImport[]): {\n    safe: UnusedImport[];\n    review: UnusedImport[];\n    preserve: UnusedImport[];\n  } {\n    log.info('📋 Categorizing imports by safety level...');\n\n    const categorized = {\n      safe: [] as UnusedImport[],\n      review: [] as UnusedImport[],\n      preserve: [] as UnusedImport[],\n    };\n\n    for (const unusedImport of unusedImports) {\n      const category = this.determineImportSafety(unusedImport);\n      unusedImport.severity = category.severity;\n      unusedImport.reason = category.reason;\n\n      switch (category.severity) {\n        case 'safe':\n          categorized.safe.push(unusedImport);\n          break;\n        case 'review':\n          categorized.review.push(unusedImport);\n          break;\n        case 'preserve':\n          categorized.preserve.push(unusedImport);\n          break;\n      }\n    }\n\n    return categorized;\n  }\n\n  /**\n   * Determine the safety level of removing an import\n   */\n  private determineImportSafety(unusedImport: UnusedImport): {\n    severity: 'safe' | 'review' | 'preserve';\n    reason: string;\n  } {\n    const { file, importName, message, isTypeImport } = unusedImport;\n\n    // Always preserve imports in critical astrological files\n    if (this.astrologicalPatterns.some(pattern => file.includes(pattern))) {\n      return {\n        severity: 'preserve',\n        reason: 'Critical astrological calculation file',\n      };\n    }\n\n    // Always preserve imports in campaign system files\n    if (this.campaignSystemPatterns.some(pattern => file.includes(pattern))) {\n      return {\n        severity: 'preserve',\n        reason: 'Campaign system intelligence file',\n      };\n    }\n\n    // Preserve React component imports in TSX files\n    if (importName.match(/^[A-Z]/) && file.endsWith('.tsx')) {\n      return {\n        severity: 'preserve',\n        reason: 'React component import in TSX file',\n      };\n    }\n\n    // Preserve type imports (might be used in type annotations)\n    if (isTypeImport) {\n      return {\n        severity: 'preserve',\n        reason: 'Type import may be used in annotations',\n      };\n    }\n\n    // Safe to remove: simple utility imports that are clearly unused\n    const safePatterns = [\n      /^[a-z][a-zA-Z]*$/, // camelCase function names\n      /^[A-Z_]+$/, // CONSTANT names\n      /Utils?$/, // Utility functions\n      /Helper$/, // Helper functions\n      /Config$/, // Configuration objects\n      /Constants?$/, // Constants\n    ];\n\n    if (\n      safePatterns.some(pattern => pattern.test(importName)) &&\n      message.includes('is defined but never used') &&\n      !file.includes('.d.ts')\n    ) {\n      return {\n        severity: 'safe',\n        reason: 'Simple utility import that is clearly unused',\n      };\n    }\n\n    // Default to requiring manual review\n    return {\n      severity: 'review',\n      reason: 'Requires manual review for safety',\n    };\n  }\n\n  /**\n   * Display analysis results\n   */\n  private displayAnalysisResults(categorized: {\n    safe: UnusedImport[];\n    review: UnusedImport[];\n    preserve: UnusedImport[];\n  }): void {\n    log.info('\\n📊 Import Analysis Results:');\n    log.info(`✅ Safe to remove: ${categorized.safe.length}`);\n    log.info(`⚠️  Requires review: ${categorized.review.length}`);\n    log.info(`🛡️  Preserved (critical): ${categorized.preserve.length}\\n`);\n\n    if (categorized.safe.length > 0) {\n      log.info('✅ Safe to Remove:');\n      this.displayImportsByFile(categorized.safe);\n    }\n\n    if (categorized.preserve.length > 0) {\n      log.info('\\n🛡️  Preserved (Critical):');\n      this.displayImportsByFile(categorized.preserve.slice(0, 10)); // Show first 10\n      if (categorized.preserve.length > 10) {\n        log.info(`   ... and ${categorized.preserve.length - 10} more`);\n      }\n    }\n\n    if (categorized.review.length > 0) {\n      log.info('\\n⚠️  Requires Manual Review:');\n      this.displayImportsByFile(categorized.review.slice(0, 5)); // Show first 5\n      if (categorized.review.length > 5) {\n        log.info(`   ... and ${categorized.review.length - 5} more`);\n      }\n    }\n  }\n\n  /**\n   * Display imports grouped by file\n   */\n  private displayImportsByFile(imports: UnusedImport[]): void {\n    const groupedByFile = imports.reduce(\n      (acc, imp) => {\n        const relativePath = path.relative(process.cwd(), imp.file);\n        if (!acc[relativePath]) acc[relativePath] = [];\n        acc[relativePath].push(imp);\n        return acc;\n      },\n      {} as Record<string, UnusedImport[]>,\n    );\n\n    Object.entries(groupedByFile).forEach(([file, fileImports]) => {\n      log.info(`   📄 ${file}:`);\n      fileImports.forEach(imp => {\n        log.info(`      - Line ${imp.line}: '${imp.importName}' (${imp.reason})`);\n      });\n    });\n  }\n\n  /**\n   * Remove safe imports using ESLint auto-fix\n   */\n  private async removeSafeImports(safeImports: UnusedImport[]): Promise<boolean> {\n    log.info(`\\n🗑️  Removing ${safeImports.length} safe unused imports...`);\n\n    try {\n      // Run ESLint auto-fix with focused unused variable removal\n      execSync('yarn lint --fix --rule \"@typescript-eslint/no-unused-vars: error\"', {\n        stdio: 'pipe',\n        encoding: 'utf8',\n      });\n\n      log.info('✅ Safe import removal completed');\n      return true;\n    } catch (error: any) {\n      // ESLint returns non-zero exit code even for successful fixes\n      if (error.stdout && !error.stdout.includes('error')) {\n        log.info('✅ Safe import removal completed');\n        return true;\n      } else {\n        console.error('❌ Safe import removal failed:', error.message);\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Validate changes by running TypeScript check and build\n   */\n  private async validateChanges(): Promise<boolean> {\n    log.info('\\n🔍 Validating changes...');\n\n    try {\n      // Check TypeScript compilation\n      execSync('yarn tsc --noEmit --skipLibCheck', {\n        stdio: 'pipe',\n        encoding: 'utf8',\n      });\n      log.info('✅ TypeScript validation passed');\n\n      return true;\n    } catch (error) {\n      console.error('❌ Validation failed');\n      return false;\n    }\n  }\n\n  /**\n   * Get current import statistics\n   */\n  public getImportStats(): {\n    totalFiles: number;\n    unusedImports: number;\n    typeScriptFiles: number;\n  } {\n    try {\n      // Count TypeScript/JavaScript files\n      const totalFilesOutput = execSync(\n        'find src -name \"*.ts\" -o -name \"*.tsx\" -o -name \"*.js\" -o -name \"*.jsx\" | wc -l',\n        {\n          encoding: 'utf8',\n        },\n      );\n      const totalFiles = parseInt(totalFilesOutput.trim()) || 0;\n\n      // Count TypeScript files specifically\n      const tsFilesOutput = execSync('find src -name \"*.ts\" -o -name \"*.tsx\" | wc -l', {\n        encoding: 'utf8',\n      });\n      const typeScriptFiles = parseInt(tsFilesOutput.trim()) || 0;\n\n      // Count unused import warnings (approximate)\n      const unusedImportsOutput = execSync(\n        'yarn lint --format=compact 2>&1 | grep -E \"@typescript-eslint/no-unused-vars.*is defined but never used\" | wc -l',\n        {\n          encoding: 'utf8',\n        },\n      );\n      const unusedImports = parseInt(unusedImportsOutput.trim()) || 0;\n\n      return { totalFiles, unusedImports, typeScriptFiles };\n    } catch (error) {\n      return { totalFiles: 0, unusedImports: 0, typeScriptFiles: 0 };\n    }\n  }\n}\n"],"version":3}