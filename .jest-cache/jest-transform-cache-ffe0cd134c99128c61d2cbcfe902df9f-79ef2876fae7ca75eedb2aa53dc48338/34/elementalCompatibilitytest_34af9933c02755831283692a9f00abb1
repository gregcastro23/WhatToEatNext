88df1abacf355d77a9e41764b68e0c9a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const elementalCompatibility_1 = require("@/utils/elementalCompatibility");
describe('Food Recommendation Engine', () => {
    it('should calculate compatibility correctly for identical elemental profiles', async () => {
        const recipeProps = {
            Fire: 0.25,
            Water: 0.25,
            Earth: 0.25,
            Air: 0.25
        };
        const userProps = {
            Fire: 0.25,
            Water: 0.25,
            Earth: 0.25,
            Air: 0.25
        };
        const result = await (0, elementalCompatibility_1.calculateElementalCompatibility)(recipeProps, userProps);
        expect(result.compatibility).toBeGreaterThanOrEqual(0.88);
        expect(result.recommendation).toBeDefined();
    });
    it('should calculate high compatibility for different elements', async () => {
        const recipeProps = {
            Fire: 0.7,
            Water: 0.1,
            Earth: 0.1,
            Air: 0.1
        };
        const userProps = {
            Fire: 0.1,
            Water: 0.7,
            Earth: 0.1,
            Air: 0.1
        };
        const result = await (0, elementalCompatibility_1.calculateElementalCompatibility)(recipeProps, userProps);
        // Even different elements should have good compatibility (according to our rules)
        expect(result.compatibility).toBeGreaterThanOrEqual(0.7);
        expect(result.recommendation).toBeDefined();
    });
    it('should generate appropriate recommendations based on compatibility', async () => {
        const recipeProps = {
            Fire: 0.25,
            Water: 0.25,
            Earth: 0.25,
            Air: 0.25
        };
        const userProps = {
            Fire: 0.25,
            Water: 0.25,
            Earth: 0.25,
            Air: 0.25
        };
        const result = await (0, elementalCompatibility_1.calculateElementalCompatibility)(recipeProps, userProps);
        // Balanced elements should have moderate compatibility
        expect(result.recommendation).toBeDefined();
        expect(result.recommendation.length).toBeGreaterThan(10);
    });
    it('should handle edge case with extremely imbalanced elements', async () => {
        const recipeProps = {
            Fire: 0.97,
            Water: 0.01,
            Earth: 0.01,
            Air: 0.01
        };
        const userProps = {
            Fire: 0.01,
            Water: 0.01,
            Earth: 0.01,
            Air: 0.97
        };
        const result = await (0, elementalCompatibility_1.calculateElementalCompatibility)(recipeProps, userProps);
        // Even with extreme values, result should still show good compatibility
        expect(result.compatibility).toBeGreaterThanOrEqual(0.7);
        expect(result.recommendation).toBeDefined();
    });
    it('should calculate balance score correctly', async () => {
        // User with a weak Earth element
        const userProps = {
            Fire: 0.3,
            Water: 0.3,
            Earth: 0.1,
            Air: 0.3
        };
        // Recipe with strong Earth element
        const recipeProps = {
            Fire: 0.2,
            Water: 0.2,
            Earth: 0.4,
            Air: 0.2
        };
        const result = await (0, elementalCompatibility_1.calculateElementalCompatibility)(recipeProps, userProps);
        // Recipe should help balance user's weak Earth element
        expect(result.balanceScore).toBeGreaterThan(0.5);
    });
    it('should handle missing or partial elemental properties gracefully', async () => {
        const partialRecipeProps = {
            Fire: 0.5,
            Water: 0.5
            // Missing Earth and Air
        };
        const partialUserProps = {
            Earth: 0.5,
            Air: 0.5
            // Missing Fire and Water
        };
        // Should not throw errors
        const result = await (0, elementalCompatibility_1.calculateElementalCompatibility)(partialRecipeProps, partialUserProps);
        // Result should still be within valid range
        expect(result.compatibility).toBeGreaterThanOrEqual(0);
        expect(result.compatibility).toBeLessThanOrEqual(1);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,