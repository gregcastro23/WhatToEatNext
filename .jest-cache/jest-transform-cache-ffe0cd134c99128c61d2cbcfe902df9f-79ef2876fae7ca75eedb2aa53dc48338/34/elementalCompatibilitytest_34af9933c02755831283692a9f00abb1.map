{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/utils/elementalCompatibility.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/utils/elementalCompatibility.test.ts"],"sourcesContent":["import { calculateElementalCompatibility } from '@/utils/elementalCompatibility';\nimport type { ElementalProperties } from '@/types/alchemy';\n\ndescribe('Food Recommendation Engine', () => {\n  it('should calculate compatibility correctly for identical elemental profiles', async () => {\n    const recipeProps: ElementalProperties = { \n      Fire: 0.25, \n      Water: 0.25, \n      Earth: 0.25, \n      Air: 0.25 \n    };\n    \n    const userProps: ElementalProperties = { \n      Fire: 0.25, \n      Water: 0.25, \n      Earth: 0.25, \n      Air: 0.25 \n    };\n    \n    const result = await calculateElementalCompatibility(recipeProps, userProps);\n    \n    expect(result.compatibility).toBeGreaterThanOrEqual(0.88);\n    expect(result.recommendation).toBeDefined();\n  });\n\n  it('should calculate high compatibility for different elements', async () => {\n    const recipeProps: ElementalProperties = { \n      Fire: 0.7, \n      Water: 0.1, \n      Earth: 0.1, \n      Air: 0.1 \n    };\n    \n    const userProps: ElementalProperties = { \n      Fire: 0.1, \n      Water: 0.7, \n      Earth: 0.1, \n      Air: 0.1 \n    };\n    \n    const result = await calculateElementalCompatibility(recipeProps, userProps);\n    \n    // Even different elements should have good compatibility (according to our rules)\n    expect(result.compatibility).toBeGreaterThanOrEqual(0.7);\n    expect(result.recommendation).toBeDefined();\n  });\n\n  it('should generate appropriate recommendations based on compatibility', async () => {\n    const recipeProps: ElementalProperties = { \n      Fire: 0.25, \n      Water: 0.25, \n      Earth: 0.25, \n      Air: 0.25 \n    };\n    \n    const userProps: ElementalProperties = { \n      Fire: 0.25, \n      Water: 0.25, \n      Earth: 0.25, \n      Air: 0.25 \n    };\n    \n    const result = await calculateElementalCompatibility(recipeProps, userProps);\n    \n    // Balanced elements should have moderate compatibility\n    expect(result.recommendation).toBeDefined();\n    expect(result.recommendation.length).toBeGreaterThan(10);\n  });\n\n  it('should handle edge case with extremely imbalanced elements', async () => {\n    const recipeProps: ElementalProperties = { \n      Fire: 0.97, \n      Water: 0.01, \n      Earth: 0.01, \n      Air: 0.01 \n    };\n    \n    const userProps: ElementalProperties = { \n      Fire: 0.01, \n      Water: 0.01, \n      Earth: 0.01, \n      Air: 0.97 \n    };\n    \n    const result = await calculateElementalCompatibility(recipeProps, userProps);\n    \n    // Even with extreme values, result should still show good compatibility\n    expect(result.compatibility).toBeGreaterThanOrEqual(0.7);\n    expect(result.recommendation).toBeDefined();\n  });\n\n  it('should calculate balance score correctly', async () => {\n    // User with a weak Earth element\n    const userProps: ElementalProperties = { \n      Fire: 0.3, \n      Water: 0.3, \n      Earth: 0.1, \n      Air: 0.3 \n    };\n    \n    // Recipe with strong Earth element\n    const recipeProps: ElementalProperties = { \n      Fire: 0.2, \n      Water: 0.2, \n      Earth: 0.4, \n      Air: 0.2 \n    };\n    \n    const result = await calculateElementalCompatibility(recipeProps, userProps);\n    \n    // Recipe should help balance user's weak Earth element\n    expect(result.balanceScore).toBeGreaterThan(0.5);\n  });\n\n  it('should handle missing or partial elemental properties gracefully', async () => {\n    const partialRecipeProps: Partial<ElementalProperties> = { \n      Fire: 0.5,\n      Water: 0.5\n      // Missing Earth and Air\n    };\n    \n    const partialUserProps: Partial<ElementalProperties> = { \n      Earth: 0.5,\n      Air: 0.5\n      // Missing Fire and Water\n    };\n    \n    // Should not throw errors\n    const result = await calculateElementalCompatibility(\n      partialRecipeProps as ElementalProperties, \n      partialUserProps as ElementalProperties\n    );\n    \n    // Result should still be within valid range\n    expect(result.compatibility).toBeGreaterThanOrEqual(0);\n    expect(result.compatibility).toBeLessThanOrEqual(1);\n  });\n}); "],"version":3}