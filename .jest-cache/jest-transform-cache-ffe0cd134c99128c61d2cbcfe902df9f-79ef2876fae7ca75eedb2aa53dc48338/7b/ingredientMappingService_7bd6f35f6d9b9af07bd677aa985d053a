f76549803c56c93ac851142eeb52ba12
"use strict";
/**
 * Ingredient Mapping Service
 *
 * Provides centralized functionality for mapping recipe ingredients
 * to their corresponding ingredient database entries.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const recipeMatching_1 = require("@/utils/recipeMatching");
const recipeFilters_1 = require("@/utils/recipeFilters");
const ingredients_1 = require("@/data/ingredients");
const cuisines_1 = require("@/data/cuisines");
/**
 * Unified service for ingredient mapping operations
 */
class IngredientMappingService {
    /**
     * Map ingredients from a recipe to their corresponding database entries
     */
    mapRecipeIngredients(recipe) {
        // Pattern HH: Safe Recipe type casting for connectIngredientsToMappings with proper import resolution
        return (0, recipeMatching_1.connectIngredientsToMappings)(recipe);
    }
    /**
     * Find recipes that match specific elemental and ingredient requirements
     */
    findMatchingRecipes(options = {}) {
        // Collect recipes based on filters
        const allRecipes = [];
        // Filter by cuisine if specified
        const cuisines = options.cuisineType
            ? [cuisines_1.cuisinesMap[options.cuisineType]].filter(Boolean)
            : Object.values(cuisines_1.cuisinesMap);
        // Collect recipes from specified cuisines
        cuisines.forEach(cuisine => {
            if (!(cuisine === null || cuisine === void 0 ? void 0 : cuisine.dishes))
                return;
            // Define which meal types to include
            const mealTypes = options.mealType
                ? [options.mealType].filter(mealType => cuisine.dishes[mealType])
                : ['breakfast', 'lunch', 'dinner', 'dessert'];
            // Define which seasons to include
            const seasons = options.season
                ? [options.season]
                : ['spring', 'summer', 'autumn', 'winter'];
            // Collect recipes matching criteria
            mealTypes.forEach(mealType => {
                const mealDishes = cuisine.dishes[mealType];
                if (!mealDishes)
                    return;
                seasons.forEach(season => {
                    const seasonalDishes = mealDishes[season];
                    if (Array.isArray(seasonalDishes)) {
                        // Pattern LL: Safe Recipe type casting for seasonal dishes array
                        allRecipes.push(...seasonalDishes);
                    }
                });
            });
        });
        // Use the filter function with collected recipes
        return (0, recipeFilters_1.filterRecipesByIngredientMappings)(allRecipes, options.elementalTarget, {
            required: options.requiredIngredients || [],
            excluded: options.excludedIngredients || [],
            dietaryRestrictions: options.dietaryRestrictions || [],
            emphasized: options.emphasizedIngredients || []
        });
    }
    /**
     * Suggest alternative ingredients with similar elemental properties
     */
    suggestAlternativeIngredients(ingredientName, options = {}) {
        // Find the original ingredient
        const originalIngredient = ingredients_1.ingredientsMap[ingredientName.toLowerCase()];
        if (!originalIngredient) {
            return {
                success: false,
                message: `Ingredient '${ingredientName}' not found in database`,
                suggestions: []
            };
        }
        const { similarityThreshold = 0.7, maxResults = 5, category } = options;
        // Find alternatives with similar elemental properties
        const potentialAlternatives = Object.entries(ingredients_1.ingredientsMap)
            .filter(([name, mapping]) => {
            // Skip the original ingredient
            if (name.toLowerCase() === ingredientName.toLowerCase())
                return false;
            // Filter by category if specified
            if (category && mapping.category !== category)
                return false;
            // Otherwise match the original ingredient's category
            if (!category && mapping.category !== originalIngredient.category)
                return false;
            // Check elemental similarity
            const similarity = this.calculateElementalSimilarity(originalIngredient.elementalProperties, mapping.elementalProperties);
            return similarity >= similarityThreshold;
        })
            .map(([name, mapping]) => ({
            name,
            similarity: this.calculateElementalSimilarity(originalIngredient.elementalProperties, mapping.elementalProperties),
            mapping
        }))
            .sort((a, b) => b.similarity - a.similarity)
            .slice(0, maxResults);
        return {
            success: true,
            original: originalIngredient,
            suggestions: potentialAlternatives
        };
    }
    /**
     * Calculate elemental compatibility between two ingredients
     */
    calculateCompatibility(ingredient1, ingredient2) {
        // Convert string names to ingredient mappings if needed
        const mapping1 = typeof ingredient1 === 'string'
            ? ingredients_1.ingredientsMap[ingredient1.toLowerCase()]
            : ingredient1;
        const mapping2 = typeof ingredient2 === 'string'
            ? ingredients_1.ingredientsMap[ingredient2.toLowerCase()]
            : ingredient2;
        if (!mapping1 || !mapping2) {
            return {
                success: false,
                message: !mapping1
                    ? `Ingredient '${ingredient1}' not found`
                    : `Ingredient '${ingredient2}' not found`,
                compatibility: 0
            };
        }
        // Calculate base elemental similarity
        const similarity = this.calculateElementalSimilarity(mapping1.elementalProperties, mapping2.elementalProperties);
        // Determine compatibility type based on similarity
        let compatibilityType = 'neutral';
        if (similarity > 0.8)
            compatibilityType = 'excellent';
        else if (similarity > 0.6)
            compatibilityType = 'good';
        else if (similarity > 0.4)
            compatibilityType = 'fair';
        else
            compatibilityType = 'poor';
        // Apply category compatibility rules
        let categoryAdjustment = 0;
        // Some ingredients work well together despite different elements
        const complementaryCategories = {
            'protein': ['spice', 'herb', 'oil'],
            'grain': ['vegetable', 'protein'],
            'vegetable': ['oil', 'herb'],
            'fruit': ['spice', 'sweetener'],
            'dairy': ['fruit', 'sweetener'],
            'spice': ['protein', 'vegetable', 'fruit']
        };
        const category1 = mapping1.category;
        const category2 = mapping2.category;
        if (category1 && category2) {
            // Same category usually works well together
            if (category1 === category2) {
                categoryAdjustment = 0.1;
            }
            // Check for complementary categories
            else if ((complementaryCategories[category1] && complementaryCategories[category1].includes(category2)) ||
                (complementaryCategories[category2] && complementaryCategories[category2].includes(category1))) {
                categoryAdjustment = 0.15;
            }
        }
        // Adjust final compatibility score
        const adjustedCompatibility = Math.min(1, Math.max(0, similarity + categoryAdjustment));
        return {
            success: true,
            compatibility: adjustedCompatibility,
            type: compatibilityType,
            ingredients: {
                first: mapping1,
                second: mapping2
            }
        };
    }
    /**
     * Analyze ingredient combinations for a recipe
     */
    analyzeRecipeIngredientCombinations(recipe) {
        const mappedIngredients = this.mapRecipeIngredients(recipe);
        const validMappings = mappedIngredients.filter(mapping => mapping.matchedTo);
        // Not enough ingredients with mappings to analyze
        if (validMappings.length < 2) {
            return {
                success: false,
                message: 'Not enough mapped ingredients to analyze combinations',
                mappingQuality: validMappings.length / Math.max(1, recipe.ingredients.length)
            };
        }
        // Analyze all ingredient pairs
        const combinations = [];
        for (let i = 0; i < validMappings.length; i++) {
            for (let j = i + 1; j < validMappings.length; j++) {
                const ing1 = validMappings[i];
                const ing2 = validMappings[j];
                if (ing1.matchedTo && ing2.matchedTo) {
                    const result = this.calculateCompatibility(ing1.matchedTo, ing2.matchedTo);
                    if (result.success) {
                        combinations.push({
                            ingredients: [ing1.name, ing2.name],
                            compatibility: result.compatibility,
                            type: result.type
                        });
                    }
                }
            }
        }
        // Calculate overall recipe harmony
        const averageCompatibility = combinations.length > 0
            ? combinations.reduce((sum, combo) => sum + combo.compatibility, 0) / combinations.length
            : 0;
        // Find strongest and weakest combinations
        const sortedCombinations = [...combinations].sort((a, b) => b.compatibility - a.compatibility);
        return {
            success: true,
            averageCompatibility,
            bestCombinations: sortedCombinations.slice(0, 3),
            weakestCombinations: sortedCombinations.slice(-3).reverse(),
            allCombinations: combinations,
            mappingQuality: validMappings.length / Math.max(1, recipe.ingredients.length)
        };
    }
    /**
     * Helper to calculate similarity between elemental properties
     */
    calculateElementalSimilarity(properties1, properties2) {
        if (!properties1 || !properties2)
            return 0;
        // Calculate difference for each element
        const fireDiff = Math.abs((properties1.Fire || 0) - (properties2.Fire || 0));
        const waterDiff = Math.abs((properties1.Water || 0) - (properties2.Water || 0));
        const earthDiff = Math.abs((properties1.Earth || 0) - (properties2.Earth || 0));
        const airDiff = Math.abs((properties1.Air || 0) - (properties2.Air || 0));
        // Total difference (maximum possible is 4)
        const totalDiff = fireDiff + waterDiff + earthDiff + airDiff;
        // Convert to similarity (0-1 range)
        return 1 - (totalDiff / 4);
    }
}
// Create singleton instance
const ingredientMappingService = new IngredientMappingService();
exports.default = ingredientMappingService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,