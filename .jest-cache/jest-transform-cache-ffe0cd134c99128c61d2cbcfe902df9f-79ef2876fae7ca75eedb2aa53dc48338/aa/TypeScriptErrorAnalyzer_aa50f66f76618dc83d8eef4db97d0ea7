f20d60067dc8990c1d51a16546f63b7a
"use strict";
/**
 * TypeScript Error Analyzer for Perfect Codebase Campaign
 *
 * Implements systematic TypeScript error elimination using existing Enhanced Error Fixer v3.0 patterns
 * Provides error distribution analysis, categorization, and priority ranking system
 *
 * Requirements: 1.2, 1.3, 1.4, 1.5
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeScriptErrorAnalyzer = exports.ErrorSeverity = exports.ErrorCategory = void 0;
const child_process_1 = require("child_process");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
var ErrorCategory;
(function (ErrorCategory) {
    ErrorCategory["TS2352_TYPE_CONVERSION"] = "TS2352";
    ErrorCategory["TS2345_ARGUMENT_MISMATCH"] = "TS2345";
    ErrorCategory["TS2698_SPREAD_TYPE"] = "TS2698";
    ErrorCategory["TS2304_CANNOT_FIND_NAME"] = "TS2304";
    ErrorCategory["TS2362_ARITHMETIC_OPERATION"] = "TS2362";
    ErrorCategory["OTHER"] = "OTHER";
})(ErrorCategory || (exports.ErrorCategory = ErrorCategory = {}));
var ErrorSeverity;
(function (ErrorSeverity) {
    ErrorSeverity["HIGH"] = "HIGH";
    ErrorSeverity["MEDIUM"] = "MEDIUM";
    ErrorSeverity["LOW"] = "LOW";
})(ErrorSeverity || (exports.ErrorSeverity = ErrorSeverity = {}));
class TypeScriptErrorAnalyzer {
    constructor() {
        this.HIGH_PRIORITY_ERRORS = ['TS2352', 'TS2345', 'TS2698', 'TS2304', 'TS2362'];
        this.MEDIUM_PRIORITY_ERRORS = ['TS2322', 'TS2740', 'TS2339', 'TS2741', 'TS2688'];
        this.LOW_PRIORITY_ERRORS = ['TS2820', 'TS2588', 'TS2300'];
    }
    /**
     * Analyze TypeScript errors using `yarn tsc --noEmit --skipLibCheck` output
     */
    async analyzeErrors() {
        console.log('🔍 Analyzing TypeScript errors...');
        const errors = await this.getTypeScriptErrors();
        const distribution = this.createErrorDistribution(errors);
        const recommendations = this.generateRecommendations(distribution);
        return {
            distribution,
            recommendations,
            timestamp: new Date().toISOString()
        };
    }
    /**
     * Get TypeScript errors using compiler output
     */
    async getTypeScriptErrors() {
        try {
            // Run TypeScript compiler with no emit and skip lib check for faster analysis
            (0, child_process_1.execSync)('yarn tsc --noEmit --skipLibCheck', {
                encoding: 'utf8',
                stdio: 'pipe',
                timeout: 120000 // 2 minute timeout
            });
            // If no errors, return empty array
            return [];
        }
        catch (error) {
            const output = error.stdout || error.stderr || '';
            return this.parseErrorsFromOutput(output);
        }
    }
    /**
     * Parse TypeScript compiler output to extract error information
     */
    parseErrorsFromOutput(output) {
        const lines = output.split('\n');
        const errors = [];
        for (const line of lines) {
            // Parse TypeScript error format: file(line,col): error TS#### message
            const match = line.match(/^(.+?)\((\d+),(\d+)\):\s+error\s+(TS\d+):\s*(.+)$/);
            if (match) {
                const [, filePath, lineNum, colNum, code, message] = match;
                // Clean up file path to be relative to project root
                const cleanFilePath = filePath.replace(/^.*?\/WhatToEatNext\//, '');
                const error = {
                    filePath: cleanFilePath,
                    line: parseInt(lineNum),
                    column: parseInt(colNum),
                    code,
                    message: message.trim(),
                    category: this.categorizeError(code),
                    priority: this.calculateErrorPriority(code, cleanFilePath, message),
                    severity: this.determineSeverity(code, message)
                };
                errors.push(error);
            }
        }
        console.log(`📊 Found ${errors.length} TypeScript errors`);
        return errors;
    }
    /**
     * Categorize error by code for targeted fixing
     */
    categorizeError(code) {
        switch (code) {
            case 'TS2352':
                return ErrorCategory.TS2352_TYPE_CONVERSION;
            case 'TS2345':
                return ErrorCategory.TS2345_ARGUMENT_MISMATCH;
            case 'TS2698':
                return ErrorCategory.TS2698_SPREAD_TYPE;
            case 'TS2304':
                return ErrorCategory.TS2304_CANNOT_FIND_NAME;
            case 'TS2362':
                return ErrorCategory.TS2362_ARITHMETIC_OPERATION;
            default:
                return ErrorCategory.OTHER;
        }
    }
    /**
     * Calculate priority ranking based on error frequency and impact
     */
    calculateErrorPriority(code, filePath, message) {
        let priority = 0;
        // Error code priority (based on requirements 1.2, 1.3, 1.4, 1.5)
        if (this.HIGH_PRIORITY_ERRORS.includes(code)) {
            priority += 15;
        }
        else if (this.MEDIUM_PRIORITY_ERRORS.includes(code)) {
            priority += 10;
        }
        else if (this.LOW_PRIORITY_ERRORS.includes(code)) {
            priority += 5;
        }
        // File type priority - core system files get higher priority
        if (filePath.includes('/types/'))
            priority += 8;
        if (filePath.includes('/services/'))
            priority += 7;
        if (filePath.includes('/components/'))
            priority += 6;
        if (filePath.includes('/utils/'))
            priority += 4;
        if (filePath.includes('/data/'))
            priority += 3;
        // Message content priority - critical errors get higher priority
        if (message.includes('not assignable'))
            priority += 5;
        if (message.includes('Cannot find'))
            priority += 6;
        if (message.includes('not exported'))
            priority += 7;
        if (message.includes('missing'))
            priority += 4;
        if (message.includes('Conversion of type'))
            priority += 8; // TS2352 specific
        if (message.includes('Argument of type'))
            priority += 6; // TS2345 specific
        return priority;
    }
    /**
     * Determine error severity for processing order
     */
    determineSeverity(code, message) {
        // High severity - breaks builds or critical type safety
        if (this.HIGH_PRIORITY_ERRORS.includes(code)) {
            return ErrorSeverity.HIGH;
        }
        // Medium severity - type safety issues but not build-breaking
        if (this.MEDIUM_PRIORITY_ERRORS.includes(code)) {
            return ErrorSeverity.MEDIUM;
        }
        // Low severity - style or minor issues
        return ErrorSeverity.LOW;
    }
    /**
     * Create comprehensive error distribution analysis
     */
    createErrorDistribution(errors) {
        const errorsByCategory = {
            [ErrorCategory.TS2352_TYPE_CONVERSION]: [],
            [ErrorCategory.TS2345_ARGUMENT_MISMATCH]: [],
            [ErrorCategory.TS2698_SPREAD_TYPE]: [],
            [ErrorCategory.TS2304_CANNOT_FIND_NAME]: [],
            [ErrorCategory.TS2362_ARITHMETIC_OPERATION]: [],
            [ErrorCategory.OTHER]: []
        };
        const errorsByFile = {};
        // Categorize errors
        for (const error of errors) {
            errorsByCategory[error.category].push(error);
            if (!errorsByFile[error.filePath]) {
                errorsByFile[error.filePath] = [];
            }
            errorsByFile[error.filePath].push(error);
        }
        // Create priority ranking
        const priorityRanking = [...errors].sort((a, b) => b.priority - a.priority);
        // Identify high-impact files (>10 errors)
        const highImpactFiles = Object.entries(errorsByFile)
            .filter(([, fileErrors]) => fileErrors.length > 10)
            .map(([filePath, fileErrors]) => ({
            filePath,
            errorCount: fileErrors.length,
            categories: [...new Set(fileErrors.map(e => e.category))],
            averagePriority: fileErrors.reduce((sum, e) => sum + e.priority, 0) / fileErrors.length
        }))
            .sort((a, b) => b.errorCount - a.errorCount);
        return {
            totalErrors: errors.length,
            errorsByCategory,
            errorsByFile,
            priorityRanking,
            highImpactFiles
        };
    }
    /**
     * Generate fix recommendations based on error distribution
     */
    generateRecommendations(distribution) {
        const recommendations = [];
        // TS2352 Type Conversion Errors (highest priority per requirements)
        const ts2352Count = distribution.errorsByCategory[ErrorCategory.TS2352_TYPE_CONVERSION].length;
        if (ts2352Count > 0) {
            recommendations.push({
                category: ErrorCategory.TS2352_TYPE_CONVERSION,
                errorCount: ts2352Count,
                priority: 1,
                description: 'Fix type conversion errors - often caused by incorrect type assertions or unsafe casts',
                estimatedReduction: Math.round(ts2352Count * 0.9) // High success rate expected
            });
        }
        // TS2345 Argument Type Mismatch (second priority)
        const ts2345Count = distribution.errorsByCategory[ErrorCategory.TS2345_ARGUMENT_MISMATCH].length;
        if (ts2345Count > 0) {
            recommendations.push({
                category: ErrorCategory.TS2345_ARGUMENT_MISMATCH,
                errorCount: ts2345Count,
                priority: 2,
                description: 'Fix argument type mismatches - usually requires type assertions or interface updates',
                estimatedReduction: Math.round(ts2345Count * 0.85)
            });
        }
        // TS2304 Cannot Find Name (third priority)
        const ts2304Count = distribution.errorsByCategory[ErrorCategory.TS2304_CANNOT_FIND_NAME].length;
        if (ts2304Count > 0) {
            recommendations.push({
                category: ErrorCategory.TS2304_CANNOT_FIND_NAME,
                errorCount: ts2304Count,
                priority: 3,
                description: 'Fix missing imports and undefined references - often cascades to fix other errors',
                estimatedReduction: Math.round(ts2304Count * 1.2) // Can fix cascading errors
            });
        }
        // TS2698 Spread Type Errors
        const ts2698Count = distribution.errorsByCategory[ErrorCategory.TS2698_SPREAD_TYPE].length;
        if (ts2698Count > 0) {
            recommendations.push({
                category: ErrorCategory.TS2698_SPREAD_TYPE,
                errorCount: ts2698Count,
                priority: 4,
                description: 'Fix spread operator type errors - requires careful type analysis',
                estimatedReduction: Math.round(ts2698Count * 0.8)
            });
        }
        // TS2362 Arithmetic Operation Errors
        const ts2362Count = distribution.errorsByCategory[ErrorCategory.TS2362_ARITHMETIC_OPERATION].length;
        if (ts2362Count > 0) {
            recommendations.push({
                category: ErrorCategory.TS2362_ARITHMETIC_OPERATION,
                errorCount: ts2362Count,
                priority: 5,
                description: 'Fix arithmetic operation type errors - usually requires number type assertions',
                estimatedReduction: Math.round(ts2362Count * 0.9)
            });
        }
        return recommendations.sort((a, b) => a.priority - b.priority);
    }
    /**
     * Display analysis results in formatted output
     */
    displayResults(result) {
        console.log('\n📊 TYPESCRIPT ERROR ANALYSIS RESULTS');
        console.log('=====================================');
        console.log(`\n📈 Total Errors: ${result.distribution.totalErrors}`);
        console.log('\n🏷️  Errors by Category:');
        Object.entries(result.distribution.errorsByCategory).forEach(([category, errors]) => {
            if (errors.length > 0) {
                console.log(`  ${category}: ${errors.length} errors`);
            }
        });
        console.log('\n🔥 High-Impact Files (>10 errors):');
        result.distribution.highImpactFiles.slice(0, 10).forEach(file => {
            console.log(`  ${file.filePath}: ${file.errorCount} errors (avg priority: ${file.averagePriority.toFixed(1)})`);
            console.log(`    Categories: ${file.categories.join(', ')}`);
        });
        console.log('\n💡 Recommended Fix Order:');
        result.recommendations.forEach(rec => {
            console.log(`  ${rec.priority}. ${rec.category}: ${rec.errorCount} errors`);
            console.log(`     Expected reduction: ~${rec.estimatedReduction} errors`);
            console.log(`     ${rec.description}\n`);
        });
        const totalEstimatedReduction = result.recommendations
            .reduce((sum, rec) => sum + rec.estimatedReduction, 0);
        console.log(`📉 Estimated total error reduction: ${totalEstimatedReduction} errors`);
        console.log(`📊 Estimated remaining errors: ${result.distribution.totalErrors - totalEstimatedReduction}`);
        console.log(`⏰ Analysis completed at: ${new Date(result.timestamp).toLocaleString()}`);
    }
    /**
     * Save analysis results to file for tracking progress
     */
    async saveAnalysis(result, outputPath) {
        const defaultPath = path_1.default.join(process.cwd(), '.typescript-error-analysis.json');
        const filePath = outputPath || defaultPath;
        try {
            await fs_1.default.promises.writeFile(filePath, JSON.stringify(result, null, 2));
            console.log(`\n💾 Analysis saved to: ${filePath}`);
        }
        catch (error) {
            console.error(`❌ Failed to save analysis: ${error}`);
        }
    }
    /**
     * Get current error count for progress tracking
     */
    async getCurrentErrorCount() {
        try {
            const output = (0, child_process_1.execSync)('yarn tsc --noEmit --skipLibCheck 2>&1 | grep -c "error TS"', {
                encoding: 'utf8',
                stdio: 'pipe'
            });
            return parseInt(output.trim()) || 0;
        }
        catch (error) {
            // If grep finds no matches, it returns exit code 1
            return 0;
        }
    }
}
exports.TypeScriptErrorAnalyzer = TypeScriptErrorAnalyzer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,