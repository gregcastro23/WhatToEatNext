{"file":"/Users/GregCastro/Desktop/WhatToEatNext/backups/conservative-wave-2025-08-11T05-21-33-410Z/src/services/linting/ErrorClassificationSystem.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/backups/conservative-wave-2025-08-11T05-21-33-410Z/src/services/linting/ErrorClassificationSystem.ts"],"sourcesContent":["/**\n * ErrorClassificationSystem - Advanced error classification with severity and auto-fix assessment\n *\n * This system provides detailed classification of linting errors with sophisticated\n * severity assessment and auto-fix capability analysis.\n */\n\nexport interface ErrorClassification {\n  ruleId: string;\n  category: ErrorCategory;\n  severity: ErrorSeverity;\n  autoFixCapability: AutoFixCapability;\n  domainImpact: DomainImpact;\n  riskProfile: RiskProfile;\n}\n\nexport interface ErrorCategory {\n  primary: 'syntax' | 'style' | 'logic' | 'performance' | 'security' | 'maintainability';\n  secondary: string;\n  description: string;\n}\n\nexport interface ErrorSeverity {\n  level: 'critical' | 'high' | 'medium' | 'low' | 'info';\n  score: number; // 0-100\n  factors: SeverityFactor[];\n  businessImpact: 'blocking' | 'degrading' | 'cosmetic' | 'none';\n}\n\nexport interface SeverityFactor {\n  factor: string;\n  weight: number;\n  description: string;\n}\n\nexport interface AutoFixCapability {\n  canAutoFix: boolean;\n  confidence: number; // 0-1\n  complexity: 'trivial' | 'simple' | 'moderate' | 'complex' | 'manual-only';\n  prerequisites: string[];\n  risks: AutoFixRisk[];\n}\n\nexport interface AutoFixRisk {\n  type: 'breaking-change' | 'logic-change' | 'performance-impact' | 'side-effects';\n  probability: number; // 0-1\n  impact: 'low' | 'medium' | 'high';\n  mitigation: string;\n}\n\nexport interface DomainImpact {\n  affectsAstrology: boolean;\n  affectsCampaign: boolean;\n  affectsCore: boolean;\n  specialHandlingRequired: boolean;\n  expertiseRequired: string[];\n}\n\nexport interface RiskProfile {\n  overall: 'low' | 'medium' | 'high' | 'critical';\n  factors: string[];\n  mitigationStrategies: string[];\n}\n\n/**\n * Main ErrorClassificationSystem class\n */\nexport class ErrorClassificationSystem {\n  private ruleClassifications: Map<string, ErrorClassification>;\n  private domainPatterns: Record<string, RegExp[]>;\n\n  constructor() {\n    this.ruleClassifications = new Map();\n    this.initializeRuleClassifications();\n\n    this.domainPatterns = {\n      astrological: [\n        /\\/calculations\\//,\n        /\\/data\\/planets\\//,\n        /reliableAstronomy/,\n        /planetaryConsistencyCheck/,\n        /Astrological/,\n        /Alchemical/,\n      ],\n      campaign: [/\\/services\\/campaign\\//, /\\/types\\/campaign/, /Campaign/, /Progress/],\n    };\n  }\n\n  /**\n   * Classify a linting error with comprehensive analysis\n   */\n  classifyError(\n    ruleId: string,\n    message: string,\n    filePath: string,\n    hasAutoFix: boolean = false,\n  ): ErrorClassification {\n    // Get base classification for the rule\n    let classification =\n      this.ruleClassifications.get(ruleId) || this.createDefaultClassification(ruleId);\n\n    // Enhance classification based on context\n    classification = this.enhanceWithContext(classification, message, filePath, hasAutoFix);\n\n    return classification;\n  }\n\n  /**\n   * Get severity assessment for multiple errors\n   */\n  assessOverallSeverity(classifications: ErrorClassification[]): {\n    overallSeverity: ErrorSeverity;\n    criticalCount: number;\n    highCount: number;\n    recommendations: string[];\n  } {\n    const criticalCount = classifications.filter(c => c.severity.level === 'critical').length;\n    const highCount = classifications.filter(c => c.severity.level === 'high').length;\n    const mediumCount = classifications.filter(c => c.severity.level === 'medium').length;\n\n    // Calculate overall severity\n    const totalScore = classifications.reduce((sum, c) => sum + c.severity.score, 0);\n    const averageScore = totalScore / classifications.length;\n\n    let overallLevel: ErrorSeverity['level'];\n    if (criticalCount > 0) overallLevel = 'critical';\n    else if (highCount > 10) overallLevel = 'high';\n    else if (averageScore > 70) overallLevel = 'high';\n    else if (averageScore > 40) overallLevel = 'medium';\n    else overallLevel = 'low';\n\n    const overallSeverity: ErrorSeverity = {\n      level: overallLevel,\n      score: Math.round(averageScore),\n      factors: [\n        {\n          factor: 'Critical Issues',\n          weight: criticalCount,\n          description: `${criticalCount} critical issues found`,\n        },\n        {\n          factor: 'High Priority Issues',\n          weight: highCount,\n          description: `${highCount} high priority issues found`,\n        },\n        {\n          factor: 'Medium Priority Issues',\n          weight: mediumCount,\n          description: `${mediumCount} medium priority issues found`,\n        },\n      ],\n      businessImpact:\n        criticalCount > 0\n          ? 'blocking'\n          : highCount > 5\n            ? 'degrading'\n            : mediumCount > 20\n              ? 'cosmetic'\n              : 'none',\n    };\n\n    // Generate recommendations\n    const recommendations: string[] = [];\n    if (criticalCount > 0) {\n      recommendations.push('Address critical issues immediately before proceeding');\n    }\n    if (highCount > 10) {\n      recommendations.push('Prioritize high-severity issues in next sprint');\n    }\n    if (averageScore > 50) {\n      recommendations.push('Consider implementing automated fixing for eligible issues');\n    }\n\n    return { overallSeverity, criticalCount, highCount, recommendations };\n  }\n\n  /**\n   * Analyze auto-fix capabilities across multiple errors\n   */\n  analyzeAutoFixCapabilities(classifications: ErrorClassification[]): {\n    totalAutoFixable: number;\n    safeAutoFixes: ErrorClassification[];\n    riskyAutoFixes: ErrorClassification[];\n    manualOnlyFixes: ErrorClassification[];\n    recommendations: string[];\n  } {\n    const autoFixable = classifications.filter(c => c.autoFixCapability.canAutoFix);\n    const safeAutoFixes = autoFixable.filter(\n      c => c.autoFixCapability.confidence > 0.8 && c.riskProfile.overall === 'low',\n    );\n    const riskyAutoFixes = autoFixable.filter(\n      c => c.autoFixCapability.confidence <= 0.8 || c.riskProfile.overall !== 'low',\n    );\n    const manualOnlyFixes = classifications.filter(c => !c.autoFixCapability.canAutoFix);\n\n    const recommendations: string[] = [];\n\n    if (safeAutoFixes.length > 0) {\n      recommendations.push(`${safeAutoFixes.length} issues can be safely auto-fixed`);\n    }\n    if (riskyAutoFixes.length > 0) {\n      recommendations.push(`${riskyAutoFixes.length} auto-fixes require careful validation`);\n    }\n    if (manualOnlyFixes.length > 0) {\n      recommendations.push(`${manualOnlyFixes.length} issues require manual intervention`);\n    }\n\n    return {\n      totalAutoFixable: autoFixable.length,\n      safeAutoFixes,\n      riskyAutoFixes,\n      manualOnlyFixes,\n      recommendations,\n    };\n  }\n\n  /**\n   * Initialize rule classifications with comprehensive data\n   */\n  private initializeRuleClassifications(): void {\n    // Import/Export Rules\n    this.addRuleClassification('import/order', {\n      ruleId: 'import/order',\n      category: {\n        primary: 'style',\n        secondary: 'import-organization',\n        description: 'Import statements should be organized consistently',\n      },\n      severity: {\n        level: 'low',\n        score: 20,\n        factors: [\n          { factor: 'Code Readability', weight: 0.8, description: 'Affects code organization' },\n        ],\n        businessImpact: 'cosmetic',\n      },\n      autoFixCapability: {\n        canAutoFix: true,\n        confidence: 0.95,\n        complexity: 'trivial',\n        prerequisites: [],\n        risks: [],\n      },\n      domainImpact: {\n        affectsAstrology: false,\n        affectsCampaign: false,\n        affectsCore: false,\n        specialHandlingRequired: false,\n        expertiseRequired: [],\n      },\n      riskProfile: {\n        overall: 'low',\n        factors: ['Cosmetic change only'],\n        mitigationStrategies: ['Automated fixing with build validation'],\n      },\n    });\n\n    this.addRuleClassification('import/no-unresolved', {\n      ruleId: 'import/no-unresolved',\n      category: {\n        primary: 'logic',\n        secondary: 'module-resolution',\n        description: 'Import paths must resolve to actual modules',\n      },\n      severity: {\n        level: 'high',\n        score: 85,\n        factors: [\n          { factor: 'Build Breaking', weight: 1.0, description: 'Can break application build' },\n          { factor: 'Runtime Errors', weight: 0.9, description: 'May cause runtime failures' },\n        ],\n        businessImpact: 'blocking',\n      },\n      autoFixCapability: {\n        canAutoFix: false,\n        confidence: 0.3,\n        complexity: 'complex',\n        prerequisites: ['Path mapping configuration', 'Module availability check'],\n        risks: [\n          {\n            type: 'breaking-change',\n            probability: 0.7,\n            impact: 'high',\n            mitigation: 'Verify all import paths before applying fixes',\n          },\n        ],\n      },\n      domainImpact: {\n        affectsAstrology: false,\n        affectsCampaign: false,\n        affectsCore: true,\n        specialHandlingRequired: true,\n        expertiseRequired: ['Module bundling', 'TypeScript configuration'],\n      },\n      riskProfile: {\n        overall: 'high',\n        factors: ['Can break builds', 'Affects module loading'],\n        mitigationStrategies: ['Manual verification of import paths', 'Build testing after fixes'],\n      },\n    });\n\n    // TypeScript Rules\n    this.addRuleClassification('@typescript-eslint/no-explicit-any', {\n      ruleId: '@typescript-eslint/no-explicit-any',\n      category: {\n        primary: 'maintainability',\n        secondary: 'type-safety',\n        description: 'Explicit any types reduce type safety benefits',\n      },\n      severity: {\n        level: 'medium',\n        score: 60,\n        factors: [\n          { factor: 'Type Safety', weight: 0.8, description: 'Reduces TypeScript benefits' },\n          { factor: 'Code Quality', weight: 0.6, description: 'Makes code less maintainable' },\n        ],\n        businessImpact: 'degrading',\n      },\n      autoFixCapability: {\n        canAutoFix: false,\n        confidence: 0.2,\n        complexity: 'manual-only',\n        prerequisites: ['Type analysis', 'Domain knowledge'],\n        risks: [\n          {\n            type: 'logic-change',\n            probability: 0.8,\n            impact: 'medium',\n            mitigation: 'Careful type analysis and testing required',\n          },\n        ],\n      },\n      domainImpact: {\n        affectsAstrology: true,\n        affectsCampaign: true,\n        affectsCore: true,\n        specialHandlingRequired: true,\n        expertiseRequired: ['TypeScript', 'Domain knowledge'],\n      },\n      riskProfile: {\n        overall: 'medium',\n        factors: ['Requires type analysis', 'Domain-specific knowledge needed'],\n        mitigationStrategies: ['Gradual typing', 'Comprehensive testing', 'Domain expert review'],\n      },\n    });\n\n    this.addRuleClassification('@typescript-eslint/no-unused-vars', {\n      ruleId: '@typescript-eslint/no-unused-vars',\n      category: {\n        primary: 'maintainability',\n        secondary: 'code-cleanliness',\n        description: 'Unused variables clutter code and may indicate bugs',\n      },\n      severity: {\n        level: 'medium',\n        score: 45,\n        factors: [\n          { factor: 'Code Cleanliness', weight: 0.7, description: 'Improves code readability' },\n          { factor: 'Potential Bugs', weight: 0.5, description: 'May indicate incomplete logic' },\n        ],\n        businessImpact: 'cosmetic',\n      },\n      autoFixCapability: {\n        canAutoFix: true,\n        confidence: 0.7,\n        complexity: 'simple',\n        prerequisites: ['Variable usage analysis'],\n        risks: [\n          {\n            type: 'logic-change',\n            probability: 0.3,\n            impact: 'low',\n            mitigation: 'Verify variable is truly unused before removal',\n          },\n        ],\n      },\n      domainImpact: {\n        affectsAstrology: true,\n        affectsCampaign: true,\n        affectsCore: false,\n        specialHandlingRequired: true,\n        expertiseRequired: ['Domain knowledge for critical variables'],\n      },\n      riskProfile: {\n        overall: 'low',\n        factors: ['Usually safe to remove', 'May affect domain calculations'],\n        mitigationStrategies: [\n          'Underscore prefix for intentional unused vars',\n          'Domain expert review for calculations',\n        ],\n      },\n    });\n\n    // React Rules\n    this.addRuleClassification('react-hooks/exhaustive-deps', {\n      ruleId: 'react-hooks/exhaustive-deps',\n      category: {\n        primary: 'logic',\n        secondary: 'react-hooks',\n        description: 'useEffect dependencies must be complete to avoid bugs',\n      },\n      severity: {\n        level: 'high',\n        score: 80,\n        factors: [\n          {\n            factor: 'Runtime Bugs',\n            weight: 0.9,\n            description: 'Can cause infinite loops or stale closures',\n          },\n          { factor: 'Performance', weight: 0.7, description: 'May cause unnecessary re-renders' },\n        ],\n        businessImpact: 'degrading',\n      },\n      autoFixCapability: {\n        canAutoFix: true,\n        confidence: 0.4,\n        complexity: 'complex',\n        prerequisites: ['Dependency analysis', 'Effect logic understanding'],\n        risks: [\n          {\n            type: 'logic-change',\n            probability: 0.6,\n            impact: 'high',\n            mitigation: 'Careful analysis of effect dependencies and potential infinite loops',\n          },\n          {\n            type: 'performance-impact',\n            probability: 0.4,\n            impact: 'medium',\n            mitigation: 'Performance testing after dependency changes',\n          },\n        ],\n      },\n      domainImpact: {\n        affectsAstrology: true,\n        affectsCampaign: false,\n        affectsCore: true,\n        specialHandlingRequired: true,\n        expertiseRequired: ['React hooks', 'Component lifecycle'],\n      },\n      riskProfile: {\n        overall: 'high',\n        factors: ['Can cause infinite loops', 'Complex dependency analysis required'],\n        mitigationStrategies: [\n          'Manual review of each case',\n          'Thorough testing',\n          'useCallback/useMemo optimization',\n        ],\n      },\n    });\n\n    // Console Rules\n    this.addRuleClassification('no-console', {\n      ruleId: 'no-console',\n      category: {\n        primary: 'style',\n        secondary: 'debugging',\n        description: 'Console statements should not be in production code',\n      },\n      severity: {\n        level: 'low',\n        score: 25,\n        factors: [\n          {\n            factor: 'Production Cleanliness',\n            weight: 0.6,\n            description: 'Console logs in production',\n          },\n        ],\n        businessImpact: 'cosmetic',\n      },\n      autoFixCapability: {\n        canAutoFix: true,\n        confidence: 0.8,\n        complexity: 'simple',\n        prerequisites: ['Context analysis for debugging vs logging'],\n        risks: [\n          {\n            type: 'logic-change',\n            probability: 0.2,\n            impact: 'low',\n            mitigation: 'Preserve console.warn and console.error for important logging',\n          },\n        ],\n      },\n      domainImpact: {\n        affectsAstrology: true,\n        affectsCampaign: true,\n        affectsCore: false,\n        specialHandlingRequired: true,\n        expertiseRequired: ['Debugging context'],\n      },\n      riskProfile: {\n        overall: 'low',\n        factors: ['May remove important debugging info'],\n        mitigationStrategies: [\n          'Preserve error and warning logs',\n          'Replace with proper logging service',\n        ],\n      },\n    });\n  }\n\n  /**\n   * Add a rule classification to the system\n   */\n  private addRuleClassification(ruleId: string, classification: ErrorClassification): void {\n    this.ruleClassifications.set(ruleId, classification);\n  }\n\n  /**\n   * Create default classification for unknown rules\n   */\n  private createDefaultClassification(ruleId: string): ErrorClassification {\n    return {\n      ruleId,\n      category: {\n        primary: 'style',\n        secondary: 'unknown',\n        description: `Unknown rule: ${ruleId}`,\n      },\n      severity: {\n        level: 'medium',\n        score: 50,\n        factors: [{ factor: 'Unknown Impact', weight: 0.5, description: 'Impact not analyzed' }],\n        businessImpact: 'cosmetic',\n      },\n      autoFixCapability: {\n        canAutoFix: false,\n        confidence: 0.1,\n        complexity: 'manual-only',\n        prerequisites: ['Rule analysis'],\n        risks: [\n          {\n            type: 'side-effects',\n            probability: 0.5,\n            impact: 'medium',\n            mitigation: 'Manual analysis required for unknown rule',\n          },\n        ],\n      },\n      domainImpact: {\n        affectsAstrology: false,\n        affectsCampaign: false,\n        affectsCore: false,\n        specialHandlingRequired: false,\n        expertiseRequired: ['ESLint rule analysis'],\n      },\n      riskProfile: {\n        overall: 'medium',\n        factors: ['Unknown rule impact'],\n        mitigationStrategies: ['Manual analysis', 'Conservative approach'],\n      },\n    };\n  }\n\n  /**\n   * Enhance classification based on context\n   */\n  private enhanceWithContext(\n    classification: ErrorClassification,\n    message: string,\n    filePath: string,\n    hasAutoFix: boolean,\n  ): ErrorClassification {\n    const enhanced = { ...classification };\n\n    // Update auto-fix capability based on actual availability\n    if (hasAutoFix && !enhanced.autoFixCapability.canAutoFix) {\n      enhanced.autoFixCapability.canAutoFix = true;\n      enhanced.autoFixCapability.confidence = Math.min(\n        0.8,\n        enhanced.autoFixCapability.confidence + 0.3,\n      );\n    }\n\n    // Enhance domain impact based on file path\n    const isDomainFile = this.isDomainSpecificFile(filePath);\n    if (isDomainFile.isAstrological) {\n      enhanced.domainImpact.affectsAstrology = true;\n      enhanced.domainImpact.specialHandlingRequired = true;\n      enhanced.domainImpact.expertiseRequired.push('Astrological calculations');\n\n      // Increase severity for astrological files\n      enhanced.severity.score = Math.min(100, enhanced.severity.score + 10);\n      if (enhanced.severity.level === 'low') enhanced.severity.level = 'medium';\n    }\n\n    if (isDomainFile.isCampaign) {\n      enhanced.domainImpact.affectsCampaign = true;\n      enhanced.domainImpact.specialHandlingRequired = true;\n      enhanced.domainImpact.expertiseRequired.push('Campaign system');\n\n      // Increase severity for campaign files\n      enhanced.severity.score = Math.min(100, enhanced.severity.score + 5);\n    }\n\n    // Adjust risk profile based on context\n    if (enhanced.domainImpact.specialHandlingRequired) {\n      if (enhanced.riskProfile.overall === 'low') {\n        enhanced.riskProfile.overall = 'medium';\n      }\n      enhanced.riskProfile.factors.push('Domain-specific file requires expert review');\n    }\n\n    return enhanced;\n  }\n\n  /**\n   * Check if file is domain-specific\n   */\n  private isDomainSpecificFile(filePath: string): { isAstrological: boolean; isCampaign: boolean } {\n    const isAstrological = this.domainPatterns.astrological.some(pattern => pattern.test(filePath));\n    const isCampaign = this.domainPatterns.campaign.some(pattern => pattern.test(filePath));\n\n    return { isAstrological, isCampaign };\n  }\n}\n"],"version":3}