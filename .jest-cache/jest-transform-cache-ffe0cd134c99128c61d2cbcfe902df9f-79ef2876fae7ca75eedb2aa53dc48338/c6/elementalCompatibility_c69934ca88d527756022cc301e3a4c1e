a90992c606acae3d021a1afdc5d2e121
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateElementalCompatibility = void 0;
const RecipeElementalService_1 = require("@/services/RecipeElementalService");
const elementalUtils_1 = require("@/utils/elementalUtils");
/**
 * Calculate the elemental compatibility between a recipe and user's preference
 */
async function calculateElementalCompatibility(recipeElemental, userElemental = (0, elementalUtils_1.getCurrentElementalState)()) {
    // Ensure properties are standardized
    const recipe = RecipeElementalService_1.recipeElementalService.standardizeRecipe({ elementalProperties: recipeElemental });
    const user = RecipeElementalService_1.recipeElementalService.standardizeRecipe({ elementalProperties: userElemental });
    // Calculate simple similarity score
    const similarity = RecipeElementalService_1.recipeElementalService.calculateSimilarity(recipe.elementalProperties, user.elementalProperties);
    // Find dominant elements
    const recipeDominant = getDominantElement(recipe.elementalProperties);
    const userDominant = getDominantElement(user.elementalProperties);
    // Calculate complementary score - check if dominant elements complement each other
    const complementaryScore = calculateComplementaryScore(recipeDominant, userDominant);
    // Calculate balance score - how well the recipe balances user's elemental profile
    const balanceScore = calculateBalanceScore(recipe.elementalProperties, user.elementalProperties);
    // Calculate overall compatibility (weighted average)
    const compatibility = (similarity * 0.4 +
        complementaryScore * 0.3 +
        balanceScore * 0.3);
    return {
        compatibility: Math.min(1, Math.max(0, compatibility)),
        dominantPair: {
            recipe: recipeDominant,
            user: userDominant
        },
        complementaryScore,
        balanceScore,
        recommendation: generateRecommendation(compatibility, recipeDominant, userDominant)
    };
}
exports.calculateElementalCompatibility = calculateElementalCompatibility;
/**
 * Get the dominant element from elemental properties
 */
function getDominantElement(props) {
    return Object.entries(props)
        .sort(([, a], [, b]) => b - a)[0][0];
}
/**
 * Calculate how well two elements complement each other
 * Each element should be treated individually, without opposition
 */
function calculateComplementaryScore(element1, element2) {
    // All elements work together in various ways
    if (element1 === element2) {
        return 0.9; // Same element - highest compatibility (like reinforces like)
    }
    else {
        // All combinations of different elements are complementary
        // Providing different yet harmonious qualities
        return 0.7; // Different elements - good compatibility
    }
}
/**
 * Calculate how well recipe balances user's elemental profile
 */
function calculateBalanceScore(recipeProps, userProps) {
    // Find user's weakest element
    const userWeakest = Object.entries(userProps)
        .sort(([, a], [, b]) => a - b)[0][0];
    // Find user's strongest element
    const userStrongest = Object.entries(userProps)
        .sort(([, a], [, b]) => b - a)[0][0];
    // Check if recipe strengthens user's weakest element
    const weakestScore = recipeProps[userWeakest] * 2; // Higher is better
    // Check if recipe moderates user's strongest element
    const strongestDifference = Math.abs(recipeProps[userStrongest] - userProps[userStrongest]);
    const strongestScore = 1 - strongestDifference; // Lower difference is better
    // Combined balance score
    return (weakestScore * 0.6) + (strongestScore * 0.4);
}
/**
 * Generate a text recommendation based on compatibility
 */
function generateRecommendation(score, recipeDominant, userDominant) {
    if (score <= 0.4) {
        return `This recipe's ${recipeDominant} energy contrasts with your ${userDominant} energy. This contrasts with your natural balance and might feel disharmonious.`;
    }
    else if (score > 0.8) {
        return `Excellent match! This ${recipeDominant}-dominant recipe complements your ${userDominant} energy perfectly.`;
    }
    else if (score > 0.6) {
        return `Good match. This recipe's ${recipeDominant} qualities work well with your ${userDominant} energy.`;
    }
    else {
        return `Moderate match. This recipe will provide a different but balanced energy to your ${userDominant} dominant profile.`;
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,