{"file":"/Users/GregCastro/Desktop/WhatToEatNext/.consolidation-backups-2025-08-23T17-54-10-092Z/src/services/campaign/unintentional-any-elimination/MetricsIntegration.ts","mappings":";AAAA;;;GAGG;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,iDAAyC;AACzC,uCAAyB;AAEzB,sDAIiC;AAEjC,wDAAqD;AAMrD,6EAA0E;AAC1E,mFAAgF;AAEhF;;GAEG;AACH,MAAa,+BAAgC,SAAQ,iCAAe;IAC1D,sBAAsB,CAA6B;IACnD,gBAAgB,CAAgC;IAChD,eAAe,CAA2B;IAC1C,cAAc,GAA8B,EAAE,CAAC;IAEvD;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,sBAAsB,GAAG,IAAI,uDAA0B,EAAE,CAAC;QAC/D,IAAI,CAAC,gBAAgB,GAAG,IAAI,6DAA6B,CAAC;YACxD,iBAAiB,EAAE,CAAC,KAAK,CAAC;YAC1B,eAAe,EAAE;gBACf,iBAAiB;gBACjB,SAAS;gBACT,UAAU;gBACV,cAAc;gBACd,eAAe;gBACf,cAAc;gBACd,eAAe;aAChB;SACF,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,0BAA0B;QAC9B,IAAI;YACF,8CAA8C;YAC9C,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;YAEjE,2BAA2B;YAC3B,MAAM,mBAAmB,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,uBAAuB,EAAE,CAAC;YAElF,oBAAoB;YACpB,MAAM,mBAAmB,GAAG,mBAAmB,CAAC,wBAAwB,CAAC;YACzE,MAAM,qBAAqB,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,gBAAgB,GAAG,mBAAmB,CAAC,CAAC;YAClF,MAAM,kBAAkB,GAAG,IAAI,CAAC,KAAK,CAAC,mBAAmB,GAAG,mBAAmB,CAAC,qBAAqB,GAAG,GAAG,CAAC,CAAC;YAE7G,oCAAoC;YACpC,IAAI,qBAAqB,GAAG,CAAC,CAAC;YAC9B,IAAI,IAAI,CAAC,eAAe,EAAE;gBACxB,MAAM,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC;gBACzD,IAAI,aAAa,GAAG,CAAC,EAAE;oBACrB,qBAAqB,GAAG,CAAC,CAAC,aAAa,GAAG,gBAAgB,CAAC,GAAG,aAAa,CAAC,GAAG,GAAG,CAAC;iBACpF;aACF;YAED,MAAM,OAAO,GAA4B;gBACvC,aAAa,EAAE,gBAAgB;gBAC/B,mBAAmB;gBACnB,qBAAqB;gBACrB,kBAAkB;gBAClB,qBAAqB,EAAE,mBAAmB,CAAC,qBAAqB;gBAChE,qBAAqB;gBACrB,eAAe,EAAE,EAAE,CAAC,oCAAoC;aACzD,CAAC;YAEF,mBAAmB;YACnB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAClC,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,GAAG,EAAE;gBACpC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;aACtD;YAED,OAAO,OAAO,CAAC;SAEhB;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,IAAI,CAAC,qDAAqD,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YAE5H,OAAO;gBACL,aAAa,EAAE,CAAC;gBAChB,mBAAmB,EAAE,CAAC;gBACtB,qBAAqB,EAAE,CAAC;gBACxB,kBAAkB,EAAE,CAAC;gBACrB,qBAAqB,EAAE,CAAC;gBACxB,qBAAqB,EAAE,CAAC;gBACxB,eAAe,EAAE,EAAE;aACpB,CAAC;SACH;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,kCAAkC;QACtC,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;QACpD,MAAM,uBAAuB,GAAG,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;QAExE,OAAO;YACL,GAAG,WAAW;YACd,uBAAuB;SACxB,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,kBAAkB;QACtB,IAAI,CAAC,eAAe,GAAG,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;QAC/D,OAAO,CAAC,GAAG,CAAC,0BAA0B,EAAE;YACtC,aAAa,EAAE,IAAI,CAAC,eAAe,CAAC,aAAa;YACjD,mBAAmB,EAAE,IAAI,CAAC,eAAe,CAAC,mBAAmB;YAC7D,qBAAqB,EAAE,IAAI,CAAC,eAAe,CAAC,qBAAqB;YACjE,qBAAqB,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG;SACnF,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,0BAA0B;QAC9B,IAAI;YACF,MAAM,MAAM,GAAG,IAAA,wBAAQ,EAAC,gBAAgB,EAAE;gBACxC,QAAQ,EAAE,MAAM;gBAChB,KAAK,EAAE,MAAM;aACd,CAAC,CAAC;YAEH,oDAAoD;YACpD,MAAM,kBAAkB,GAAG,MAAM,CAAC,KAAK,CAAC,sCAAsC,CAAC,CAAC;YAChF,OAAO,kBAAkB,CAAC,CAAC,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;SAE3D;QAAC,OAAO,KAAc,EAAE;YACvB,mEAAmE;YACnE,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,OAAO,IAAI,EAAE,CAAC;YACnD,MAAM,kBAAkB,GAAG,MAAM,CAAC,KAAK,CAAC,sCAAsC,CAAC,CAAC;YAChF,OAAO,kBAAkB,CAAC,CAAC,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;SAC3D;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,6BAA6B;QACjC,IAAI;YACF,MAAM,MAAM,GAAG,IAAA,wBAAQ,EAAC,gBAAgB,EAAE;gBACxC,QAAQ,EAAE,MAAM;gBAChB,KAAK,EAAE,MAAM;aACd,CAAC,CAAC;YAEH,MAAM,SAAS,GAA2B,EAAE,CAAC;YAC7C,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAEjC,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;gBACxB,IAAI,IAAI,CAAC,QAAQ,CAAC,oCAAoC,CAAC,EAAE;oBACvD,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;oBAC1C,IAAI,SAAS,EAAE;wBACb,MAAM,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;wBAC9B,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;qBACtD;iBACF;aACF;YAED,OAAO,SAAS,CAAC;SAElB;QAAC,OAAO,KAAc,EAAE;YACvB,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,OAAO,IAAI,EAAE,CAAC;YACnD,MAAM,SAAS,GAA2B,EAAE,CAAC;YAC7C,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAEjC,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;gBACxB,IAAI,IAAI,CAAC,QAAQ,CAAC,oCAAoC,CAAC,EAAE;oBACvD,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;oBAC1C,IAAI,SAAS,EAAE;wBACb,MAAM,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;wBAC9B,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;qBACtD;iBACF;aACF;YAED,OAAO,SAAS,CAAC;SAClB;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,sCAAsC;QAC1C,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,sBAAsB,EAAE,CAAC;QACvD,MAAM,uBAAuB,GAAG,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;QACxE,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,6BAA6B,EAAE,CAAC;QAEjE,kDAAkD;QAClD,MAAM,sBAAsB,GAAkB;YAC5C;gBACE,OAAO,EAAE,4BAA4B;gBACrC,SAAS,EAAE,iCAAiC;gBAC5C,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,MAAM,EAAE,sBAAW,CAAC,SAAS;gBAC7B,OAAO,EAAE,MAAM,IAAI,CAAC,kBAAkB,EAAE;gBACxC,YAAY,EAAE;oBACZ,YAAY,uBAAuB,CAAC,aAAa,YAAY;oBAC7D,cAAc,uBAAuB,CAAC,mBAAmB,wBAAwB;oBACjF,SAAS,uBAAuB,CAAC,qBAAqB,0BAA0B;iBACjF;gBACD,MAAM,EAAE,uBAAuB,CAAC,qBAAqB,GAAG,CAAC,CAAC,CAAC;oBACzD,CAAC,GAAG,uBAAuB,CAAC,qBAAqB,yCAAyC,CAAC,CAAC,CAAC,CAAC,EAAE;gBAClG,eAAe,EAAE,IAAI,CAAC,uCAAuC,CAAC,uBAAuB,CAAC;aACvF;YACD;gBACE,OAAO,EAAE,+BAA+B;gBACxC,SAAS,EAAE,oCAAoC;gBAC/C,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,MAAM,EAAE,uBAAuB,CAAC,qBAAqB,GAAG,CAAC,CAAC,CAAC,CAAC,sBAAW,CAAC,SAAS,CAAC,CAAC,CAAC,sBAAW,CAAC,WAAW;gBAC3G,OAAO,EAAE,MAAM,IAAI,CAAC,kBAAkB,EAAE;gBACxC,YAAY,EAAE,uBAAuB,CAAC,qBAAqB,GAAG,CAAC,CAAC,CAAC;oBAC/D,CAAC,YAAY,uBAAuB,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,EAAE;gBAC1F,MAAM,EAAE,uBAAuB,CAAC,qBAAqB,GAAG,uBAAuB,CAAC,eAAe,CAAC,CAAC;oBAC/F,CAAC,aAAa,uBAAuB,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,CAAC,kBAAkB,uBAAuB,CAAC,eAAe,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;gBAC1I,eAAe,EAAE,IAAI,CAAC,kCAAkC,CAAC,uBAAuB,CAAC;aAClF;YACD;gBACE,OAAO,EAAE,+BAA+B;gBACxC,SAAS,EAAE,oCAAoC;gBAC/C,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,MAAM,EAAE,uBAAuB,CAAC,qBAAqB,IAAI,EAAE,CAAC,CAAC,CAAC,sBAAW,CAAC,SAAS,CAAC,CAAC,CAAC,sBAAW,CAAC,WAAW;gBAC7G,OAAO,EAAE,MAAM,IAAI,CAAC,kBAAkB,EAAE;gBACxC,YAAY,EAAE,uBAAuB,CAAC,qBAAqB,IAAI,EAAE,CAAC,CAAC;oBACjE,CAAC,2BAA2B,uBAAuB,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;gBAC/F,MAAM,EAAE,uBAAuB,CAAC,qBAAqB,GAAG,EAAE,CAAC,CAAC;oBAC1D,CAAC,0BAA0B,uBAAuB,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,EAAE;gBACxG,eAAe,EAAE,IAAI,CAAC,oCAAoC,CAAC,uBAAuB,CAAC;aACpF;SACF,CAAC;QAEF,OAAO;YACL,GAAG,UAAU;YACb,uBAAuB;YACvB,sBAAsB;YACtB,aAAa;YACb,cAAc,EAAE,IAAI,CAAC,iCAAiC,EAAE;YACxD,WAAW,EAAE,IAAI,CAAC,oCAAoC,EAAE;SACzD,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,6BAA6B,CAAC,QAAgB;QAClD,IAAI;YACF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,sCAAsC,EAAE,CAAC;YACnE,MAAM,UAAU,GAAG;gBACjB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,MAAM;gBACN,OAAO,EAAE,IAAI,CAAC,cAAc;gBAC5B,QAAQ,EAAE,IAAI,CAAC,eAAe;gBAC9B,aAAa,EAAE,MAAM,IAAI,CAAC,6BAA6B,EAAE;aAC1D,CAAC;YAEF,EAAE,CAAC,aAAa,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;YAChE,OAAO,CAAC,GAAG,CAAC,6CAA6C,QAAQ,EAAE,CAAC,CAAC;SACtE;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,+CAA+C,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;SAC1H;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,mBAAmB;QACvB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;QACxD,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,6BAA6B,EAAE,CAAC;QAEjE,oCAAoC;QACpC,MAAM,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC;aAC3C,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;aAC7B,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;aACZ,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;QAE7C,kBAAkB;QAClB,MAAM,KAAK,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAE3C,OAAO;YACL,OAAO,EAAE,OAAO;YAChB,KAAK;YACL,QAAQ;YACR,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC;YACpC,eAAe,EAAE,IAAI,CAAC,uCAAuC,CAAC,OAAO,CAAC;YACtE,WAAW,EAAE,IAAI,IAAI,EAAE;SACxB,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,iCAAiC,CAAC,SAAoC;QAC1E,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,0BAA0B,EAAE,CAAC;QAExD,QAAQ,SAAS,EAAE;YACjB,KAAK,sBAAsB;gBACzB,OAAO,IAAI,CAAC,eAAe,KAAK,SAAS,CAAC;YAE5C,KAAK,mBAAmB;gBACtB,OAAO,OAAO,CAAC,aAAa,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,mBAAmB,GAAG,OAAO,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC;YAExG,KAAK,2BAA2B;gBAC9B,OAAO,OAAO,CAAC,qBAAqB,IAAI,OAAO,CAAC,eAAe,CAAC;YAElE,KAAK,wBAAwB;gBAC3B,OAAO,OAAO,CAAC,qBAAqB,IAAI,EAAE,CAAC;YAE7C,KAAK,wBAAwB;gBAC3B,OAAO,OAAO,CAAC,qBAAqB,KAAK,CAAC,CAAC;YAE7C;gBACE,OAAO,CAAC,IAAI,CAAC,wCAAwC,SAAS,EAAE,CAAC,CAAC;gBAClE,OAAO,KAAK,CAAC;SAChB;IACH,CAAC;IAED;;OAEG;IACH,iCAAiC;QAC/B,OAAO,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC;IAClC,CAAC;IAED;;OAEG;IACK,oCAAoC;QAC1C,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;YAClC,OAAO;gBACL,oBAAoB,EAAE,CAAC;gBACvB,4BAA4B,EAAE,CAAC;gBAC/B,qBAAqB,EAAE,CAAC;gBACxB,aAAa,EAAE,CAAC;aACjB,CAAC;SACH;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;QACrC,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAEnE,OAAO;YACL,oBAAoB,EAAE,KAAK,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa;YAChE,4BAA4B,EAAE,KAAK,CAAC,qBAAqB,GAAG,MAAM,CAAC,qBAAqB;YACxF,qBAAqB,EAAE,MAAM,CAAC,qBAAqB,GAAG,KAAK,CAAC,qBAAqB;YACjF,aAAa,EAAE,MAAM,CAAC,qBAAqB;SAC5C,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,qBAAqB;QAC3B,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;YAClC,OAAO,QAAQ,CAAC;SACjB;QAED,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7C,MAAM,aAAa,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC;QACxE,MAAM,kBAAkB,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,qBAAqB,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,qBAAqB,CAAC;QAE7F,IAAI,aAAa,GAAG,CAAC,CAAC,IAAI,kBAAkB,GAAG,CAAC,CAAC,EAAE;YACjD,OAAO,WAAW,CAAC;SACpB;aAAM,IAAI,aAAa,GAAG,CAAC,IAAI,kBAAkB,GAAG,CAAC,EAAE;YACtD,OAAO,WAAW,CAAC;SACpB;aAAM;YACL,OAAO,QAAQ,CAAC;SACjB;IACH,CAAC;IAED;;OAEG;IACK,cAAc,CAAC,OAAgC;QACrD,MAAM,MAAM,GAA4B,EAAE,CAAC;QAE3C,IAAI,OAAO,CAAC,qBAAqB,GAAG,GAAG,EAAE;YACvC,MAAM,CAAC,IAAI,CAAC;gBACV,IAAI,EAAE,8BAA8B;gBACpC,QAAQ,EAAE,SAAS;gBACnB,OAAO,EAAE,2CAA2C,OAAO,CAAC,qBAAqB,EAAE;gBACnF,cAAc,EAAE,6DAA6D;aAC9E,CAAC,CAAC;SACJ;QAED,IAAI,OAAO,CAAC,qBAAqB,GAAG,EAAE,EAAE;YACtC,MAAM,CAAC,IAAI,CAAC;gBACV,IAAI,EAAE,4BAA4B;gBAClC,QAAQ,EAAE,OAAO;gBACjB,OAAO,EAAE,0CAA0C,OAAO,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG;gBAC9F,cAAc,EAAE,4CAA4C;aAC7D,CAAC,CAAC;SACJ;QAED,IAAI,OAAO,CAAC,qBAAqB,GAAG,CAAC,EAAE;YACrC,MAAM,CAAC,IAAI,CAAC;gBACV,IAAI,EAAE,qBAAqB;gBAC3B,QAAQ,EAAE,OAAO;gBACjB,OAAO,EAAE,6DAA6D;gBACtE,cAAc,EAAE,6CAA6C;aAC9D,CAAC,CAAC;SACJ;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;OAEG;IACK,uCAAuC,CAAC,OAAgC;QAC9E,MAAM,eAAe,GAAa,EAAE,CAAC;QAErC,IAAI,OAAO,CAAC,qBAAqB,GAAG,EAAE,EAAE;YACtC,eAAe,CAAC,IAAI,CAAC,8EAA8E,CAAC,CAAC;SACtG;QAED,IAAI,OAAO,CAAC,qBAAqB,GAAG,EAAE,EAAE;YACtC,eAAe,CAAC,IAAI,CAAC,gEAAgE,CAAC,CAAC;SACxF;QAED,IAAI,OAAO,CAAC,qBAAqB,GAAG,OAAO,CAAC,eAAe,EAAE;YAC3D,eAAe,CAAC,IAAI,CAAC,iDAAiD,OAAO,CAAC,eAAe,GAAG,CAAC,CAAC;SACnG;QAED,IAAI,OAAO,CAAC,aAAa,KAAK,CAAC,EAAE;YAC/B,eAAe,CAAC,IAAI,CAAC,0FAA0F,CAAC,CAAC;SAClH;QAED,OAAO,eAAe,CAAC;IACzB,CAAC;IAED;;OAEG;IACK,kCAAkC,CAAC,OAAgC;QACzE,MAAM,eAAe,GAAa,EAAE,CAAC;QAErC,IAAI,OAAO,CAAC,qBAAqB,GAAG,CAAC,EAAE;YACrC,eAAe,CAAC,IAAI,CAAC,kEAAkE,CAAC,CAAC;SAC1F;QAED,IAAI,OAAO,CAAC,qBAAqB,GAAG,EAAE,EAAE;YACtC,eAAe,CAAC,IAAI,CAAC,0EAA0E,CAAC,CAAC;SAClG;QAED,IAAI,OAAO,CAAC,qBAAqB,IAAI,OAAO,CAAC,eAAe,EAAE;YAC5D,eAAe,CAAC,IAAI,CAAC,6DAA6D,CAAC,CAAC;SACrF;QAED,OAAO,eAAe,CAAC;IACzB,CAAC;IAED;;OAEG;IACK,oCAAoC,CAAC,OAAgC;QAC3E,MAAM,eAAe,GAAa,EAAE,CAAC;QAErC,IAAI,OAAO,CAAC,qBAAqB,GAAG,EAAE,EAAE;YACtC,eAAe,CAAC,IAAI,CAAC,sDAAsD,CAAC,CAAC;SAC9E;aAAM,IAAI,OAAO,CAAC,qBAAqB,GAAG,EAAE,EAAE;YAC7C,eAAe,CAAC,IAAI,CAAC,oDAAoD,CAAC,CAAC;SAC5E;QAED,IAAI,OAAO,CAAC,mBAAmB,GAAG,CAAC,IAAI,OAAO,CAAC,kBAAkB,KAAK,CAAC,EAAE;YACvE,eAAe,CAAC,IAAI,CAAC,mEAAmE,CAAC,CAAC;SAC3F;QAED,OAAO,eAAe,CAAC;IACzB,CAAC;IAED;;OAEG;IACH,mCAAmC;QACjC,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;QACzB,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;QACjC,OAAO,CAAC,GAAG,CAAC,4CAA4C,CAAC,CAAC;IAC5D,CAAC;CACF;AAtdD,0EAsdC;AAyCD;;;GAGG;AACH,MAAa,iCAAiC;IACpC,eAAe,CAAkC;IAEzD;QACE,IAAI,CAAC,eAAe,GAAG,IAAI,+BAA+B,EAAE,CAAC;IAC/D,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,qBAAqB;QAKzB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,0BAA0B,EAAE,CAAC;QAExE,yBAAyB;QACzB,IAAI,OAAO,CAAC,qBAAqB,GAAG,GAAG,EAAE;YACvC,OAAO;gBACL,aAAa,EAAE,IAAI;gBACnB,MAAM,EAAE,2CAA2C,OAAO,CAAC,qBAAqB,EAAE;gBAClF,QAAQ,EAAE,MAAM;aACjB,CAAC;SACH;QAED,IAAI,OAAO,CAAC,qBAAqB,GAAG,CAAC,CAAC,EAAE;YACtC,OAAO;gBACL,aAAa,EAAE,IAAI;gBACnB,MAAM,EAAE,6DAA6D;gBACrE,QAAQ,EAAE,MAAM;aACjB,CAAC;SACH;QAED,2BAA2B;QAC3B,IAAI,OAAO,CAAC,qBAAqB,GAAG,EAAE,EAAE;YACtC,OAAO;gBACL,aAAa,EAAE,IAAI;gBACnB,MAAM,EAAE,+CAA+C,OAAO,CAAC,qBAAqB,EAAE;gBACtF,QAAQ,EAAE,QAAQ;aACnB,CAAC;SACH;QAED,IAAI,OAAO,CAAC,qBAAqB,GAAG,EAAE,EAAE;YACtC,OAAO;gBACL,aAAa,EAAE,IAAI;gBACnB,MAAM,EAAE,+BAA+B,OAAO,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG;gBAClF,QAAQ,EAAE,QAAQ;aACnB,CAAC;SACH;QAED,wBAAwB;QACxB,IAAI,OAAO,CAAC,qBAAqB,GAAG,EAAE,EAAE;YACtC,OAAO;gBACL,aAAa,EAAE,IAAI;gBACnB,MAAM,EAAE,yCAAyC,OAAO,CAAC,qBAAqB,EAAE;gBAChF,QAAQ,EAAE,KAAK;aAChB,CAAC;SACH;QAED,OAAO;YACL,aAAa,EAAE,KAAK;YACpB,MAAM,EAAE,kDAAkD;YAC1D,QAAQ,EAAE,KAAK;SAChB,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,wBAAwB,CACtB,eAAyB,EACzB,gBAAiD;QAMjD,MAAM,oBAAoB,GAAG,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAC7D,QAAQ,CAAC,QAAQ,CAAC,YAAY,CAAC;YAC/B,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC;YAC5B,QAAQ,CAAC,QAAQ,CAAC,cAAc,CAAC,CAClC,CAAC;QAEF,IAAI,oBAAoB,CAAC,MAAM,KAAK,CAAC,EAAE;YACrC,OAAO;gBACL,UAAU,EAAE,IAAI;gBAChB,oBAAoB,EAAE,EAAE;gBACxB,UAAU,EAAE,oCAAoC;aACjD,CAAC;SACH;QAED,qCAAqC;QACrC,MAAM,UAAU,GAAG,oBAAoB,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CACvD,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,CAAC,CAClE,CAAC;QAEF,IAAI,UAAU,EAAE;YACd,OAAO;gBACL,UAAU,EAAE,IAAI;gBAChB,oBAAoB;gBACpB,UAAU,EAAE,4DAA4D;aACzE,CAAC;SACH;QAED,OAAO;YACL,UAAU,EAAE,KAAK;YACjB,oBAAoB;YACpB,UAAU,EAAE,2DAA2D;SACxE,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,2BAA2B,CACzB,eAAyB,EACzB,UAAqC;QAMrC,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;QACvB,IAAI,eAAe,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;QACpC,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,IAAI,iBAAiB,GAAG,EAAE,CAAC,CAAC,qBAAqB;QAEjD,IAAI,UAAU,KAAK,MAAM,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;YACvD,+CAA+C;YAC/C,eAAe,CAAC,QAAQ,CAAC,eAAe,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;YACzD,MAAM,GAAG,iEAAiE,CAAC;YAC3E,iBAAiB,GAAG,EAAE,CAAC;SACxB;aAAM,IAAI,UAAU,KAAK,QAAQ,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;YAChE,2BAA2B;YAC3B,eAAe,CAAC,UAAU,CAAC,eAAe,CAAC,UAAU,EAAE,GAAG,EAAE,CAAC,CAAC;YAC9D,MAAM,GAAG,uDAAuD,CAAC;YACjE,iBAAiB,GAAG,EAAE,CAAC;SACxB;aAAM;YACL,0BAA0B;YAC1B,MAAM,GAAG,4DAA4D,CAAC;YACtE,iBAAiB,GAAG,EAAE,CAAC;SACxB;QAED,OAAO;YACL,eAAe;YACf,MAAM;YACN,iBAAiB;SAClB,CAAC;IACJ,CAAC;CACF;AAtJD,8EAsJC","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/.consolidation-backups-2025-08-23T17-54-10-092Z/src/services/campaign/unintentional-any-elimination/MetricsIntegration.ts"],"sourcesContent":["/**\n * Metrics Integration for Unintentional Any Elimination\n * Integrates unintentional any metrics with existing campaign reporting and dashboard systems\n */\n\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\n\nimport {\n    PhaseReport,\n    PhaseStatus,\n    ProgressReport\n} from '../../../types/campaign';\n\nimport { ProgressTracker } from '../ProgressTracker';\nimport {\n    UnintentionalAnyMetrics,\n    UnintentionalAnyProgressMetrics\n} from './types';\n\nimport { AutoDocumentationGenerator } from './AutoDocumentationGenerator';\nimport { DocumentationQualityAssurance } from './DocumentationQualityAssurance';\n\n/**\n * Enhanced Progress Tracker with Unintentional Any Metrics\n */\nexport class UnintentionalAnyProgressTracker extends ProgressTracker {\n  private documentationGenerator: AutoDocumentationGenerator;\n  private qualityAssurance: DocumentationQualityAssurance;\n  private baselineMetrics?: UnintentionalAnyMetrics;\n  private metricsHistory: UnintentionalAnyMetrics[] = [];\n\n  constructor() {\n    super();\n    this.documentationGenerator = new AutoDocumentationGenerator();\n    this.qualityAssurance = new DocumentationQualityAssurance({\n      sourceDirectories: ['src'],\n      excludePatterns: [\n        'node_modules/**',\n        'dist/**',\n        'build/**',\n        '**/*.test.ts',\n        '**/*.test.tsx',\n        '**/*.spec.ts',\n        '**/*.spec.tsx'\n      ]\n    });\n  }\n\n  /**\n   * Get comprehensive unintentional any metrics\n   */\n  async getUnintentionalAnyMetrics(): Promise<UnintentionalAnyMetrics> {\n    try {\n      // Get explicit-any warning count from linting\n      const explicitAnyCount = await this.getExplicitAnyWarningCount();\n\n      // Get documentation report\n      const documentationReport = await this.qualityAssurance.performQualityAssurance();\n\n      // Calculate metrics\n      const intentionalAnyTypes = documentationReport.totalIntentionalAnyTypes;\n      const unintentionalAnyTypes = Math.max(0, explicitAnyCount - intentionalAnyTypes);\n      const documentedAnyTypes = Math.round(intentionalAnyTypes * documentationReport.documentationCoverage / 100);\n\n      // Calculate reduction from baseline\n      let reductionFromBaseline = 0;\n      if (this.baselineMetrics) {\n        const baselineTotal = this.baselineMetrics.totalAnyTypes;\n        if (baselineTotal > 0) {\n          reductionFromBaseline = ((baselineTotal - explicitAnyCount) / baselineTotal) * 100;\n        }\n      }\n\n      const metrics: UnintentionalAnyMetrics = {\n        totalAnyTypes: explicitAnyCount,\n        intentionalAnyTypes,\n        unintentionalAnyTypes,\n        documentedAnyTypes,\n        documentationCoverage: documentationReport.documentationCoverage,\n        reductionFromBaseline,\n        targetReduction: 15 // Default target, can be configured\n      };\n\n      // Store in history\n      this.metricsHistory.push(metrics);\n      if (this.metricsHistory.length > 100) {\n        this.metricsHistory = this.metricsHistory.slice(-50);\n      }\n\n      return metrics;\n\n    } catch (error) {\n      console.warn(`Warning: Could not get unintentional any metrics: ${error instanceof Error ? error.message : String(error)}`);\n\n      return {\n        totalAnyTypes: 0,\n        intentionalAnyTypes: 0,\n        unintentionalAnyTypes: 0,\n        documentedAnyTypes: 0,\n        documentationCoverage: 0,\n        reductionFromBaseline: 0,\n        targetReduction: 15\n      };\n    }\n  }\n\n  /**\n   * Get enhanced progress metrics that include unintentional any data\n   */\n  async getUnintentionalAnyProgressMetrics(): Promise<UnintentionalAnyProgressMetrics> {\n    const baseMetrics = await this.getProgressMetrics();\n    const unintentionalAnyMetrics = await this.getUnintentionalAnyMetrics();\n\n    return {\n      ...baseMetrics,\n      unintentionalAnyMetrics\n    };\n  }\n\n  /**\n   * Set baseline metrics for comparison\n   */\n  async setBaselineMetrics(): Promise<void> {\n    this.baselineMetrics = await this.getUnintentionalAnyMetrics();\n    console.log(`📊 Baseline metrics set:`, {\n      totalAnyTypes: this.baselineMetrics.totalAnyTypes,\n      intentionalAnyTypes: this.baselineMetrics.intentionalAnyTypes,\n      unintentionalAnyTypes: this.baselineMetrics.unintentionalAnyTypes,\n      documentationCoverage: `${this.baselineMetrics.documentationCoverage.toFixed(1)}%`\n    });\n  }\n\n  /**\n   * Get explicit-any warning count from ESLint\n   */\n  async getExplicitAnyWarningCount(): Promise<number> {\n    try {\n      const output = execSync('yarn lint 2>&1', {\n        encoding: 'utf8',\n        stdio: 'pipe'\n      });\n\n      // Count @typescript-eslint/no-explicit-any warnings\n      const explicitAnyMatches = output.match(/@typescript-eslint\\/no-explicit-any/g);\n      return explicitAnyMatches ? explicitAnyMatches.length : 0;\n\n    } catch (error: unknown) {\n      // ESLint returns non-zero exit code when warnings/errors are found\n      const output = error.stdout || error.message || '';\n      const explicitAnyMatches = output.match(/@typescript-eslint\\/no-explicit-any/g);\n      return explicitAnyMatches ? explicitAnyMatches.length : 0;\n    }\n  }\n\n  /**\n   * Get detailed breakdown of explicit-any warnings by file\n   */\n  async getExplicitAnyBreakdownByFile(): Promise<Record<string, number>> {\n    try {\n      const output = execSync('yarn lint 2>&1', {\n        encoding: 'utf8',\n        stdio: 'pipe'\n      });\n\n      const breakdown: Record<string, number> = {};\n      const lines = output.split('\\n');\n\n      for (const line of lines) {\n        if (line.includes('@typescript-eslint/no-explicit-any')) {\n          const fileMatch = line.match(/^([^:]+):/);\n          if (fileMatch) {\n            const filePath = fileMatch[1];\n            breakdown[filePath] = (breakdown[filePath] || 0) + 1;\n          }\n        }\n      }\n\n      return breakdown;\n\n    } catch (error: unknown) {\n      const output = error.stdout || error.message || '';\n      const breakdown: Record<string, number> = {};\n      const lines = output.split('\\n');\n\n      for (const line of lines) {\n        if (line.includes('@typescript-eslint/no-explicit-any')) {\n          const fileMatch = line.match(/^([^:]+):/);\n          if (fileMatch) {\n            const filePath = fileMatch[1];\n            breakdown[filePath] = (breakdown[filePath] || 0) + 1;\n          }\n        }\n      }\n\n      return breakdown;\n    }\n  }\n\n  /**\n   * Generate comprehensive progress report with unintentional any metrics\n   */\n  async generateUnintentionalAnyProgressReport(): Promise<UnintentionalAnyProgressReport> {\n    const baseReport = await this.generateProgressReport();\n    const unintentionalAnyMetrics = await this.getUnintentionalAnyMetrics();\n    const fileBreakdown = await this.getExplicitAnyBreakdownByFile();\n\n    // Create unintentional any specific phase reports\n    const unintentionalAnyPhases: PhaseReport[] = [\n      {\n        phaseId: 'unintentional-any-analysis',\n        phaseName: 'Unintentional Any Type Analysis',\n        startTime: new Date(),\n        status: PhaseStatus.COMPLETED,\n        metrics: await this.getProgressMetrics(),\n        achievements: [\n          `Analyzed ${unintentionalAnyMetrics.totalAnyTypes} any types`,\n          `Identified ${unintentionalAnyMetrics.intentionalAnyTypes} intentional any types`,\n          `Found ${unintentionalAnyMetrics.unintentionalAnyTypes} unintentional any types`\n        ],\n        issues: unintentionalAnyMetrics.unintentionalAnyTypes > 0 ?\n          [`${unintentionalAnyMetrics.unintentionalAnyTypes} unintentional any types need attention`] : [],\n        recommendations: this.generateUnintentionalAnyRecommendations(unintentionalAnyMetrics)\n      },\n      {\n        phaseId: 'unintentional-any-replacement',\n        phaseName: 'Unintentional Any Type Replacement',\n        startTime: new Date(),\n        status: unintentionalAnyMetrics.reductionFromBaseline > 0 ? PhaseStatus.COMPLETED : PhaseStatus.NOT_STARTED,\n        metrics: await this.getProgressMetrics(),\n        achievements: unintentionalAnyMetrics.reductionFromBaseline > 0 ?\n          [`Achieved ${unintentionalAnyMetrics.reductionFromBaseline.toFixed(1)}% reduction`] : [],\n        issues: unintentionalAnyMetrics.reductionFromBaseline < unintentionalAnyMetrics.targetReduction ?\n          [`Reduction ${unintentionalAnyMetrics.reductionFromBaseline.toFixed(1)}% below target ${unintentionalAnyMetrics.targetReduction}%`] : [],\n        recommendations: this.generateReplacementRecommendations(unintentionalAnyMetrics)\n      },\n      {\n        phaseId: 'intentional-any-documentation',\n        phaseName: 'Intentional Any Type Documentation',\n        startTime: new Date(),\n        status: unintentionalAnyMetrics.documentationCoverage >= 80 ? PhaseStatus.COMPLETED : PhaseStatus.IN_PROGRESS,\n        metrics: await this.getProgressMetrics(),\n        achievements: unintentionalAnyMetrics.documentationCoverage >= 80 ?\n          [`Documentation coverage: ${unintentionalAnyMetrics.documentationCoverage.toFixed(1)}%`] : [],\n        issues: unintentionalAnyMetrics.documentationCoverage < 80 ?\n          [`Documentation coverage ${unintentionalAnyMetrics.documentationCoverage.toFixed(1)}% below 80%`] : [],\n        recommendations: this.generateDocumentationRecommendations(unintentionalAnyMetrics)\n      }\n    ];\n\n    return {\n      ...baseReport,\n      unintentionalAnyMetrics,\n      unintentionalAnyPhases,\n      fileBreakdown,\n      metricsHistory: this.getUnintentionalAnyMetricsHistory(),\n      improvement: this.calculateUnintentionalAnyImprovement()\n    };\n  }\n\n  /**\n   * Export unintentional any metrics to JSON for external analysis\n   */\n  async exportUnintentionalAnyMetrics(filePath: string): Promise<void> {\n    try {\n      const report = await this.generateUnintentionalAnyProgressReport();\n      const exportData = {\n        timestamp: new Date().toISOString(),\n        report,\n        history: this.metricsHistory,\n        baseline: this.baselineMetrics,\n        fileBreakdown: await this.getExplicitAnyBreakdownByFile()\n      };\n\n      fs.writeFileSync(filePath, JSON.stringify(exportData, null, 2));\n      console.log(`📊 Unintentional Any metrics exported to: ${filePath}`);\n    } catch (error) {\n      throw new Error(`Failed to export unintentional any metrics: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * Create dashboard-compatible metrics for real-time monitoring\n   */\n  async getDashboardMetrics(): Promise<UnintentionalAnyDashboardMetrics> {\n    const metrics = await this.getUnintentionalAnyMetrics();\n    const fileBreakdown = await this.getExplicitAnyBreakdownByFile();\n\n    // Get top files with most any types\n    const topFiles = Object.entries(fileBreakdown)\n      .sort(([, a], [, b]) => b - a)\n      .slice(0, 10)\n      .map(([file, count]) => ({ file, count }));\n\n    // Calculate trend\n    const trend = this.calculateMetricsTrend();\n\n    return {\n      current: metrics,\n      trend,\n      topFiles,\n      alerts: this.generateAlerts(metrics),\n      recommendations: this.generateUnintentionalAnyRecommendations(metrics),\n      lastUpdated: new Date()\n    };\n  }\n\n  /**\n   * Validate milestone achievement for unintentional any elimination\n   */\n  async validateUnintentionalAnyMilestone(milestone: UnintentionalAnyMilestone): Promise<boolean> {\n    const metrics = await this.getUnintentionalAnyMetrics();\n\n    switch (milestone) {\n      case 'baseline-established':\n        return this.baselineMetrics !== undefined;\n\n      case 'analysis-complete':\n        return metrics.totalAnyTypes > 0 && (metrics.intentionalAnyTypes + metrics.unintentionalAnyTypes) > 0;\n\n      case 'target-reduction-achieved':\n        return metrics.reductionFromBaseline >= metrics.targetReduction;\n\n      case 'documentation-complete':\n        return metrics.documentationCoverage >= 80;\n\n      case 'zero-unintentional-any':\n        return metrics.unintentionalAnyTypes === 0;\n\n      default:\n        console.warn(`Unknown unintentional any milestone: ${milestone}`);\n        return false;\n    }\n  }\n\n  /**\n   * Get metrics history for trend analysis\n   */\n  getUnintentionalAnyMetricsHistory(): UnintentionalAnyMetrics[] {\n    return [...this.metricsHistory];\n  }\n\n  /**\n   * Calculate improvement over time\n   */\n  private calculateUnintentionalAnyImprovement(): UnintentionalAnyImprovement {\n    if (this.metricsHistory.length < 2) {\n      return {\n        totalAnyTypesReduced: 0,\n        unintentionalAnyTypesReduced: 0,\n        documentationImproved: 0,\n        reductionRate: 0\n      };\n    }\n\n    const first = this.metricsHistory[0];\n    const latest = this.metricsHistory[this.metricsHistory.length - 1];\n\n    return {\n      totalAnyTypesReduced: first.totalAnyTypes - latest.totalAnyTypes,\n      unintentionalAnyTypesReduced: first.unintentionalAnyTypes - latest.unintentionalAnyTypes,\n      documentationImproved: latest.documentationCoverage - first.documentationCoverage,\n      reductionRate: latest.reductionFromBaseline\n    };\n  }\n\n  /**\n   * Calculate metrics trend\n   */\n  private calculateMetricsTrend(): 'improving' | 'stable' | 'declining' {\n    if (this.metricsHistory.length < 3) {\n      return 'stable';\n    }\n\n    const recent = this.metricsHistory.slice(-3);\n    const totalAnyTrend = recent[2].totalAnyTypes - recent[0].totalAnyTypes;\n    const unintentionalTrend = recent[2].unintentionalAnyTypes - recent[0].unintentionalAnyTypes;\n\n    if (totalAnyTrend < -2 || unintentionalTrend < -2) {\n      return 'improving';\n    } else if (totalAnyTrend > 2 || unintentionalTrend > 2) {\n      return 'declining';\n    } else {\n      return 'stable';\n    }\n  }\n\n  /**\n   * Generate alerts based on metrics\n   */\n  private generateAlerts(metrics: UnintentionalAnyMetrics): UnintentionalAnyAlert[] {\n    const alerts: UnintentionalAnyAlert[] = [];\n\n    if (metrics.unintentionalAnyTypes > 100) {\n      alerts.push({\n        type: 'high-unintentional-any-count',\n        severity: 'warning',\n        message: `High number of unintentional any types: ${metrics.unintentionalAnyTypes}`,\n        recommendation: 'Consider running the unintentional any elimination campaign'\n      });\n    }\n\n    if (metrics.documentationCoverage < 50) {\n      alerts.push({\n        type: 'low-documentation-coverage',\n        severity: 'error',\n        message: `Documentation coverage critically low: ${metrics.documentationCoverage.toFixed(1)}%`,\n        recommendation: 'Add documentation to intentional any types'\n      });\n    }\n\n    if (metrics.reductionFromBaseline < 0) {\n      alerts.push({\n        type: 'regression-detected',\n        severity: 'error',\n        message: 'Regression detected: any types have increased from baseline',\n        recommendation: 'Review recent changes and consider rollback'\n      });\n    }\n\n    return alerts;\n  }\n\n  /**\n   * Generate recommendations based on metrics\n   */\n  private generateUnintentionalAnyRecommendations(metrics: UnintentionalAnyMetrics): string[] {\n    const recommendations: string[] = [];\n\n    if (metrics.unintentionalAnyTypes > 50) {\n      recommendations.push('Run unintentional any elimination campaign to reduce unintentional any types');\n    }\n\n    if (metrics.documentationCoverage < 80) {\n      recommendations.push('Add documentation to intentional any types to improve coverage');\n    }\n\n    if (metrics.reductionFromBaseline < metrics.targetReduction) {\n      recommendations.push(`Increase efforts to reach target reduction of ${metrics.targetReduction}%`);\n    }\n\n    if (metrics.totalAnyTypes === 0) {\n      recommendations.push('Excellent! Zero any types achieved. Consider setting up monitoring to prevent regression');\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Generate replacement-specific recommendations\n   */\n  private generateReplacementRecommendations(metrics: UnintentionalAnyMetrics): string[] {\n    const recommendations: string[] = [];\n\n    if (metrics.unintentionalAnyTypes > 0) {\n      recommendations.push('Continue with progressive replacement of unintentional any types');\n    }\n\n    if (metrics.reductionFromBaseline < 10) {\n      recommendations.push('Consider increasing confidence threshold for more aggressive replacement');\n    }\n\n    if (metrics.reductionFromBaseline >= metrics.targetReduction) {\n      recommendations.push('Target reduction achieved! Consider setting a higher target');\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Generate documentation-specific recommendations\n   */\n  private generateDocumentationRecommendations(metrics: UnintentionalAnyMetrics): string[] {\n    const recommendations: string[] = [];\n\n    if (metrics.documentationCoverage < 50) {\n      recommendations.push('Critical: Add documentation to intentional any types');\n    } else if (metrics.documentationCoverage < 80) {\n      recommendations.push('Improve documentation coverage to reach 80% target');\n    }\n\n    if (metrics.intentionalAnyTypes > 0 && metrics.documentedAnyTypes === 0) {\n      recommendations.push('Start documenting intentional any types with explanatory comments');\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Reset metrics history (for testing or fresh start)\n   */\n  resetUnintentionalAnyMetricsHistory(): void {\n    this.metricsHistory = [];\n    this.baselineMetrics = undefined;\n    console.log('📊 Unintentional Any metrics history reset');\n  }\n}\n\n// Additional types for metrics integration\nexport interface UnintentionalAnyProgressReport extends ProgressReport {\n  unintentionalAnyMetrics: UnintentionalAnyMetrics;\n  unintentionalAnyPhases: PhaseReport[];\n  fileBreakdown: Record<string, number>;\n  metricsHistory: UnintentionalAnyMetrics[];\n  improvement: UnintentionalAnyImprovement;\n}\n\nexport interface UnintentionalAnyImprovement {\n  totalAnyTypesReduced: number;\n  unintentionalAnyTypesReduced: number;\n  documentationImproved: number;\n  reductionRate: number;\n}\n\nexport interface UnintentionalAnyDashboardMetrics {\n  current: UnintentionalAnyMetrics;\n  trend: 'improving' | 'stable' | 'declining';\n  topFiles: Array<{ file: string; count: number }>;\n  alerts: UnintentionalAnyAlert[];\n  recommendations: string[];\n  lastUpdated: Date;\n}\n\nexport interface UnintentionalAnyAlert {\n  type: string;\n  severity: 'info' | 'warning' | 'error';\n  message: string;\n  recommendation: string;\n}\n\nexport type UnintentionalAnyMilestone =\n  | 'baseline-established'\n  | 'analysis-complete'\n  | 'target-reduction-achieved'\n  | 'documentation-complete'\n  | 'zero-unintentional-any';\n\n/**\n * Campaign Scheduling Integration\n * Provides compatibility with existing campaign scheduling systems\n */\nexport class UnintentionalAnyCampaignScheduler {\n  private progressTracker: UnintentionalAnyProgressTracker;\n\n  constructor() {\n    this.progressTracker = new UnintentionalAnyProgressTracker();\n  }\n\n  /**\n   * Check if unintentional any elimination campaign should be triggered\n   */\n  async shouldTriggerCampaign(): Promise<{\n    shouldTrigger: boolean;\n    reason: string;\n    priority: 'low' | 'medium' | 'high';\n  }> {\n    const metrics = await this.progressTracker.getUnintentionalAnyMetrics();\n\n    // High priority triggers\n    if (metrics.unintentionalAnyTypes > 200) {\n      return {\n        shouldTrigger: true,\n        reason: `High number of unintentional any types: ${metrics.unintentionalAnyTypes}`,\n        priority: 'high'\n      };\n    }\n\n    if (metrics.reductionFromBaseline < -5) {\n      return {\n        shouldTrigger: true,\n        reason: 'Regression detected: any types have increased significantly',\n        priority: 'high'\n      };\n    }\n\n    // Medium priority triggers\n    if (metrics.unintentionalAnyTypes > 50) {\n      return {\n        shouldTrigger: true,\n        reason: `Moderate number of unintentional any types: ${metrics.unintentionalAnyTypes}`,\n        priority: 'medium'\n      };\n    }\n\n    if (metrics.documentationCoverage < 50) {\n      return {\n        shouldTrigger: true,\n        reason: `Low documentation coverage: ${metrics.documentationCoverage.toFixed(1)}%`,\n        priority: 'medium'\n      };\n    }\n\n    // Low priority triggers\n    if (metrics.unintentionalAnyTypes > 10) {\n      return {\n        shouldTrigger: true,\n        reason: `Some unintentional any types present: ${metrics.unintentionalAnyTypes}`,\n        priority: 'low'\n      };\n    }\n\n    return {\n      shouldTrigger: false,\n      reason: 'No significant unintentional any issues detected',\n      priority: 'low'\n    };\n  }\n\n  /**\n   * Resolve conflicts with other campaign priorities\n   */\n  resolveCampaignConflicts(\n    activeCampaigns: string[],\n    proposedCampaign: 'unintentional-any-elimination'\n  ): {\n    canProceed: boolean;\n    conflictingCampaigns: string[];\n    resolution: string;\n  } {\n    const conflictingCampaigns = activeCampaigns.filter(campaign =>\n      campaign.includes('typescript') ||\n      campaign.includes('linting') ||\n      campaign.includes('explicit-any')\n    );\n\n    if (conflictingCampaigns.length === 0) {\n      return {\n        canProceed: true,\n        conflictingCampaigns: [],\n        resolution: 'No conflicts detected, can proceed'\n      };\n    }\n\n    // Check if conflicts can be resolved\n    const canResolve = conflictingCampaigns.every(campaign =>\n      !campaign.includes('critical') && !campaign.includes('emergency')\n    );\n\n    if (canResolve) {\n      return {\n        canProceed: true,\n        conflictingCampaigns,\n        resolution: 'Conflicts can be resolved by coordinating batch processing'\n      };\n    }\n\n    return {\n      canProceed: false,\n      conflictingCampaigns,\n      resolution: 'Wait for critical campaigns to complete before proceeding'\n    };\n  }\n\n  /**\n   * Get recommended execution time based on system load and other campaigns\n   */\n  getRecommendedExecutionTime(\n    activeCampaigns: string[],\n    systemLoad: 'low' | 'medium' | 'high'\n  ): {\n    recommendedTime: Date;\n    reason: string;\n    estimatedDuration: number; // minutes\n  } {\n    const now = new Date();\n    let recommendedTime = new Date(now);\n    let reason = '';\n    let estimatedDuration = 30; // Default 30 minutes\n\n    if (systemLoad === 'high' || activeCampaigns.length > 2) {\n      // Schedule for later when system load is lower\n      recommendedTime.setHours(recommendedTime.getHours() + 2);\n      reason = 'Scheduled for later due to high system load or active campaigns';\n      estimatedDuration = 45;\n    } else if (systemLoad === 'medium' || activeCampaigns.length > 0) {\n      // Schedule for near future\n      recommendedTime.setMinutes(recommendedTime.getMinutes() + 30);\n      reason = 'Scheduled for near future due to moderate system load';\n      estimatedDuration = 35;\n    } else {\n      // Can execute immediately\n      reason = 'Can execute immediately - low system load and no conflicts';\n      estimatedDuration = 25;\n    }\n\n    return {\n      recommendedTime,\n      reason,\n      estimatedDuration\n    };\n  }\n}\n"],"version":3}