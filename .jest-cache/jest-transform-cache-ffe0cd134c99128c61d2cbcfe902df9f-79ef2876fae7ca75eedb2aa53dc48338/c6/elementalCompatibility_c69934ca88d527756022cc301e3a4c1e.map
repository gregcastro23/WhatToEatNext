{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/elementalCompatibility.ts","mappings":";;;AACA,8EAA2E;AAG3E,2DAAkE;AAgBlE;;GAEG;AACI,KAAK,UAAU,+BAA+B,CACnD,eAAoC,EACpC,gBAAqC,IAAA,yCAAwB,GAAE;IAE/D,qCAAqC;IACrC,MAAM,MAAM,GAAG,+CAAsB,CAAC,iBAAiB,CAAC,EAAE,mBAAmB,EAAE,eAAe,EAAE,CAAC,CAAC;IAClG,MAAM,IAAI,GAAG,+CAAsB,CAAC,iBAAiB,CAAC,EAAE,mBAAmB,EAAE,aAAa,EAAE,CAAC,CAAC;IAE9F,oCAAoC;IACpC,MAAM,UAAU,GAAG,+CAAsB,CAAC,mBAAmB,CAC3D,MAAM,CAAC,mBAAmB,EAC1B,IAAI,CAAC,mBAAmB,CACzB,CAAC;IAEF,yBAAyB;IACzB,MAAM,cAAc,GAAG,kBAAkB,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;IACtE,MAAM,YAAY,GAAG,kBAAkB,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;IAElE,mFAAmF;IACnF,MAAM,kBAAkB,GAAG,2BAA2B,CACpD,cAAc,EACd,YAAY,CACb,CAAC;IAEF,kFAAkF;IAClF,MAAM,YAAY,GAAG,qBAAqB,CACxC,MAAM,CAAC,mBAAmB,EAC1B,IAAI,CAAC,mBAAmB,CACzB,CAAC;IAEF,qDAAqD;IACrD,MAAM,aAAa,GAAG,CACpB,UAAU,GAAG,GAAG;QAChB,kBAAkB,GAAG,GAAG;QACxB,YAAY,GAAG,GAAG,CACnB,CAAC;IAEF,OAAO;QACL,aAAa,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;QACtD,YAAY,EAAE;YACZ,MAAM,EAAE,cAAc;YACtB,IAAI,EAAE,YAAY;SACnB;QACD,kBAAkB;QAClB,YAAY;QACZ,cAAc,EAAE,sBAAsB,CACpC,aAAa,EACb,cAAc,EACd,YAAY,CACb;KACF,CAAC;AACJ,CAAC;AAnDD,0EAmDC;AAED;;GAEG;AACH,SAAS,kBAAkB,CAAC,KAA0B;IACpD,OAAO,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC;SACzB,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAA8B,CAAC;AACtE,CAAC;AAED;;;GAGG;AACH,SAAS,2BAA2B,CAClC,QAAmC,EACnC,QAAmC;IAEnC,6CAA6C;IAC7C,IAAI,QAAQ,KAAK,QAAQ,EAAE;QACzB,OAAO,GAAG,CAAC,CAAC,8DAA8D;KAC3E;SAAM;QACL,2DAA2D;QAC3D,+CAA+C;QAC/C,OAAO,GAAG,CAAC,CAAC,0CAA0C;KACvD;AACH,CAAC;AAED;;GAEG;AACH,SAAS,qBAAqB,CAC5B,WAAgC,EAChC,SAA8B;IAE9B,8BAA8B;IAC9B,MAAM,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC;SAC1C,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAA8B,CAAC;IAEpE,gCAAgC;IAChC,MAAM,aAAa,GAAG,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC;SAC5C,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAA8B,CAAC;IAEpE,qDAAqD;IACrD,MAAM,YAAY,GAAG,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,mBAAmB;IAEtE,qDAAqD;IACrD,MAAM,mBAAmB,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC;IAC5F,MAAM,cAAc,GAAG,CAAC,GAAG,mBAAmB,CAAC,CAAC,6BAA6B;IAE7E,yBAAyB;IACzB,OAAO,CAAC,YAAY,GAAG,GAAG,CAAC,GAAG,CAAC,cAAc,GAAG,GAAG,CAAC,CAAC;AACvD,CAAC;AAED;;GAEG;AACH,SAAS,sBAAsB,CAC7B,KAAa,EACb,cAAyC,EACzC,YAAuC;IAEvC,IAAI,KAAK,IAAI,GAAG,EAAE;QAChB,OAAO,iBAAiB,cAAc,+BAA+B,YAAY,iFAAiF,CAAC;KACpK;SAAM,IAAI,KAAK,GAAG,GAAG,EAAE;QACtB,OAAO,yBAAyB,cAAc,qCAAqC,YAAY,oBAAoB,CAAC;KACrH;SAAM,IAAI,KAAK,GAAG,GAAG,EAAE;QACtB,OAAO,6BAA6B,cAAc,kCAAkC,YAAY,UAAU,CAAC;KAC5G;SAAM;QACL,OAAO,oFAAoF,YAAY,oBAAoB,CAAC;KAC7H;AACH,CAAC","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/elementalCompatibility.ts"],"sourcesContent":["import type { ElementalProperties } from '@/types/alchemy';\nimport { recipeElementalService } from '@/services/RecipeElementalService';\nimport { DEFAULT_ELEMENTAL_PROPERTIES, ELEMENTS } from '@/constants/elementalConstants';\nimport { getLatestAstrologicalState } from '@/services/AstrologicalService';\nimport { getCurrentElementalState } from '@/utils/elementalUtils';\n\n/**\n * Interface for elemental compatibility results\n */\nexport interface ElementalCompatibility {\n  compatibility: number; // 0-1 score\n  dominantPair: {\n    recipe: keyof ElementalProperties;\n    user: keyof ElementalProperties;\n  };\n  complementaryScore: number; // 0-1 score for how well elements complement each other\n  balanceScore: number; // 0-1 score for overall balance\n  recommendation: string; // Text recommendation\n}\n\n/**\n * Calculate the elemental compatibility between a recipe and user's preference\n */\nexport async function calculateElementalCompatibility(\n  recipeElemental: ElementalProperties,\n  userElemental: ElementalProperties = getCurrentElementalState()\n): Promise<ElementalCompatibility> {\n  // Ensure properties are standardized\n  const recipe = recipeElementalService.standardizeRecipe({ elementalProperties: recipeElemental });\n  const user = recipeElementalService.standardizeRecipe({ elementalProperties: userElemental });\n  \n  // Calculate simple similarity score\n  const similarity = recipeElementalService.calculateSimilarity(\n    recipe.elementalProperties,\n    user.elementalProperties\n  );\n  \n  // Find dominant elements\n  const recipeDominant = getDominantElement(recipe.elementalProperties);\n  const userDominant = getDominantElement(user.elementalProperties);\n  \n  // Calculate complementary score - check if dominant elements complement each other\n  const complementaryScore = calculateComplementaryScore(\n    recipeDominant,\n    userDominant\n  );\n  \n  // Calculate balance score - how well the recipe balances user's elemental profile\n  const balanceScore = calculateBalanceScore(\n    recipe.elementalProperties,\n    user.elementalProperties\n  );\n  \n  // Calculate overall compatibility (weighted average)\n  const compatibility = (\n    similarity * 0.4 +\n    complementaryScore * 0.3 +\n    balanceScore * 0.3\n  );\n  \n  return {\n    compatibility: Math.min(1, Math.max(0, compatibility)),\n    dominantPair: {\n      recipe: recipeDominant,\n      user: userDominant\n    },\n    complementaryScore,\n    balanceScore,\n    recommendation: generateRecommendation(\n      compatibility,\n      recipeDominant,\n      userDominant\n    )\n  };\n}\n\n/**\n * Get the dominant element from elemental properties\n */\nfunction getDominantElement(props: ElementalProperties): keyof ElementalProperties {\n  return Object.entries(props)\n    .sort(([, a], [, b]) => b - a)[0][0] as keyof ElementalProperties;\n}\n\n/**\n * Calculate how well two elements complement each other\n * Each element should be treated individually, without opposition\n */\nfunction calculateComplementaryScore(\n  element1: keyof ElementalProperties,\n  element2: keyof ElementalProperties\n): number {\n  // All elements work together in various ways\n  if (element1 === element2) {\n    return 0.9; // Same element - highest compatibility (like reinforces like)\n  } else {\n    // All combinations of different elements are complementary\n    // Providing different yet harmonious qualities\n    return 0.7; // Different elements - good compatibility\n  }\n}\n\n/**\n * Calculate how well recipe balances user's elemental profile\n */\nfunction calculateBalanceScore(\n  recipeProps: ElementalProperties,\n  userProps: ElementalProperties\n): number {\n  // Find user's weakest element\n  const userWeakest = Object.entries(userProps)\n    .sort(([, a], [, b]) => a - b)[0][0] as keyof ElementalProperties;\n  \n  // Find user's strongest element\n  const userStrongest = Object.entries(userProps)\n    .sort(([, a], [, b]) => b - a)[0][0] as keyof ElementalProperties;\n  \n  // Check if recipe strengthens user's weakest element\n  const weakestScore = recipeProps[userWeakest] * 2; // Higher is better\n  \n  // Check if recipe moderates user's strongest element\n  const strongestDifference = Math.abs(recipeProps[userStrongest] - userProps[userStrongest]);\n  const strongestScore = 1 - strongestDifference; // Lower difference is better\n  \n  // Combined balance score\n  return (weakestScore * 0.6) + (strongestScore * 0.4);\n}\n\n/**\n * Generate a text recommendation based on compatibility\n */\nfunction generateRecommendation(\n  score: number,\n  recipeDominant: keyof ElementalProperties,\n  userDominant: keyof ElementalProperties\n): string {\n  if (score <= 0.4) {\n    return `This recipe's ${recipeDominant} energy contrasts with your ${userDominant} energy. This contrasts with your natural balance and might feel disharmonious.`;\n  } else if (score > 0.8) {\n    return `Excellent match! This ${recipeDominant}-dominant recipe complements your ${userDominant} energy perfectly.`;\n  } else if (score > 0.6) {\n    return `Good match. This recipe's ${recipeDominant} qualities work well with your ${userDominant} energy.`;\n  } else {\n    return `Moderate match. This recipe will provide a different but balanced energy to your ${userDominant} dominant profile.`;\n  }\n} "],"version":3}