43f5e0e66bc2746956e47cd6ae795293
"use strict";
/**
 * Linting Campaign Integration Service
 *
 * Integrates linting progress tracking with the existing campaign system
 * for comprehensive quality improvement campaigns.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LintingCampaignIntegration = void 0;
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const logger_1 = require("@/utils/logger");
const LintingProgressTracker_1 = require("./LintingProgressTracker");
/**
 * Linting Campaign Integration Service
 */
class LintingCampaignIntegration {
    progressTracker;
    campaignConfigFile = '.kiro/campaigns/linting-campaigns.json';
    activeConfigFile = '.kiro/campaigns/active-linting-campaign.json';
    constructor() {
        this.progressTracker = new LintingProgressTracker_1.LintingProgressTracker();
        this.ensureDirectoryExists();
    }
    /**
     * Start a linting improvement campaign
     */
    async startCampaign(config) {
        try {
            logger_1.logger.info(`Starting linting campaign: ${config.name}`);
            // Collect baseline metrics
            const baselineReport = await this.progressTracker.generateProgressReport();
            // Save campaign configuration
            this.saveCampaignConfig(config);
            this.setActiveCampaign(config.campaignId, baselineReport);
            // Execute campaign phases
            for (const phase of config.phases) {
                await this.executePhase(config, phase);
            }
            // Generate final report
            const finalReport = await this.generateCampaignReport(config.campaignId);
            logger_1.logger.info('Linting campaign completed:', finalReport);
        }
        catch (error) {
            logger_1.logger.error('Error executing linting campaign:', error);
            throw error;
        }
    }
    /**
     * Execute a specific campaign phase
     */
    async executePhase(config, phase) {
        const startTime = Date.now();
        try {
            logger_1.logger.info(`Executing campaign phase: ${phase.name}`);
            // Collect pre-phase metrics
            const prePhaseReport = await this.progressTracker.generateProgressReport();
            // Execute phase tools
            const toolResults = await this.executePhaseTools(phase.tools);
            // Collect post-phase metrics
            const postPhaseReport = await this.progressTracker.generateProgressReport();
            // Evaluate success criteria
            const success = this.evaluatePhaseSuccess(phase, prePhaseReport, postPhaseReport);
            const result = {
                campaignId: config.campaignId,
                phase: phase.id,
                success,
                metricsImprovement: {
                    errorsBefore: prePhaseReport.currentMetrics.errors,
                    errorsAfter: postPhaseReport.currentMetrics.errors,
                    warningsBefore: prePhaseReport.currentMetrics.warnings,
                    warningsAfter: postPhaseReport.currentMetrics.warnings,
                    improvementPercentage: postPhaseReport.improvement.percentageImprovement,
                },
                executionTime: Date.now() - startTime,
                issues: toolResults.issues,
                recommendations: toolResults.recommendations,
            };
            // Update campaign progress
            await this.updateCampaignProgress(config.campaignId, phase.id, result);
            // Check for notifications
            if (config.notifications.onProgress) {
                await this.sendProgressNotification(config, result);
            }
            logger_1.logger.info(`Phase ${phase.name} completed:`, {
                success,
                improvement: result.metricsImprovement.improvementPercentage,
            });
            return result;
        }
        catch (error) {
            logger_1.logger.error(`Error executing phase ${phase.name}:`, error);
            throw error;
        }
    }
    /**
     * Execute phase tools
     */
    async executePhaseTools(tools) {
        const issues = [];
        const recommendations = [];
        for (const tool of tools) {
            try {
                const result = await this.executeTool(tool);
                issues.push(...result.issues);
                recommendations.push(...result.recommendations);
            }
            catch (error) {
                issues.push(`Tool ${tool} failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
            }
        }
        return { issues, recommendations };
    }
    /**
     * Execute a specific tool
     */
    async executeTool(tool) {
        const issues = [];
        const recommendations = [];
        try {
            switch (tool) {
                case 'eslint-fix':
                    await this.executeESLintFix();
                    recommendations.push('Applied ESLint auto-fixes');
                    break;
                case 'unused-imports':
                    await this.executeUnusedImportRemoval();
                    recommendations.push('Removed unused imports');
                    break;
                case 'import-organization':
                    await this.executeImportOrganization();
                    recommendations.push('Organized import statements');
                    break;
                case 'explicit-any-elimination':
                    await this.executeExplicitAnyElimination();
                    recommendations.push('Reduced explicit any usage');
                    break;
                case 'console-cleanup':
                    await this.executeConsoleCleanup();
                    recommendations.push('Cleaned up console statements');
                    break;
                default:
                    issues.push(`Unknown tool: ${tool}`);
            }
        }
        catch (error) {
            issues.push(`Tool ${tool} execution failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
        return { issues, recommendations };
    }
    /**
     * Tool execution methods
     */
    async executeESLintFix() {
        try {
            (0, child_process_1.execSync)('yarn lint:fix', { stdio: 'pipe' });
        }
        catch (error) {
            // ESLint fix may return non-zero exit code but still apply fixes
            logger_1.logger.debug('ESLint fix completed with warnings');
        }
    }
    async executeUnusedImportRemoval() {
        try {
            // Use the existing SafeUnusedImportRemover
            const { SafeUnusedImportRemover } = await Promise.resolve().then(() => __importStar(require('./SafeUnusedImportRemover')));
            const remover = new SafeUnusedImportRemover();
            await remover.processUnusedImports();
        }
        catch (error) {
            logger_1.logger.warn('Unused import removal failed:', error);
        }
    }
    async executeImportOrganization() {
        try {
            (0, child_process_1.execSync)('yarn lint --fix-type layout', { stdio: 'pipe' });
        }
        catch (error) {
            logger_1.logger.debug('Import organization completed with warnings');
        }
    }
    async executeExplicitAnyElimination() {
        try {
            // This would integrate with existing explicit any elimination tools
            logger_1.logger.info('Explicit any elimination would be executed here');
        }
        catch (error) {
            logger_1.logger.warn('Explicit any elimination failed:', error);
        }
    }
    async executeConsoleCleanup() {
        try {
            // This would integrate with existing console cleanup tools
            logger_1.logger.info('Console cleanup would be executed here');
        }
        catch (error) {
            logger_1.logger.warn('Console cleanup failed:', error);
        }
    }
    /**
     * Evaluate phase success criteria
     */
    evaluatePhaseSuccess(phase, preReport, postReport) {
        const errorReduction = preReport.currentMetrics.errors - postReport.currentMetrics.errors;
        const warningReduction = preReport.currentMetrics.warnings - postReport.currentMetrics.warnings;
        const performanceAcceptable = postReport.currentMetrics.performanceMetrics.executionTime <=
            phase.successCriteria.performanceThreshold;
        return (errorReduction >= phase.successCriteria.errorReduction &&
            warningReduction >= phase.successCriteria.warningReduction &&
            performanceAcceptable);
    }
    /**
     * Generate comprehensive campaign report
     */
    async generateCampaignReport(campaignId) {
        try {
            const config = this.getCampaignConfig(campaignId);
            const activeCampaign = this.getActiveCampaign();
            const currentReport = await this.progressTracker.generateProgressReport();
            if (!config || !activeCampaign) {
                throw new Error('Campaign data not found');
            }
            const report = {
                campaignId,
                name: config.name,
                startTime: activeCampaign.startTime,
                endTime: new Date(),
                baselineMetrics: activeCampaign.baselineMetrics,
                finalMetrics: currentReport.currentMetrics,
                totalImprovement: {
                    errorReduction: activeCampaign.baselineMetrics.errors - currentReport.currentMetrics.errors,
                    warningReduction: activeCampaign.baselineMetrics.warnings - currentReport.currentMetrics.warnings,
                    percentageImprovement: currentReport.improvement.percentageImprovement,
                },
                phasesExecuted: activeCampaign.phasesExecuted || [],
                qualityGatesStatus: currentReport.qualityGates,
                recommendations: currentReport.improvement.percentageImprovement > 0
                    ? ['Continue monitoring for regressions', 'Consider additional optimization phases']
                    : ['Investigate why improvements were not achieved', 'Review tool configurations'],
            };
            // Save final report
            this.saveCampaignReport(report);
            return report;
        }
        catch (error) {
            logger_1.logger.error('Error generating campaign report:', error);
            throw error;
        }
    }
    /**
     * Create predefined campaign configurations
     */
    createStandardCampaigns() {
        return [
            {
                campaignId: 'linting-excellence-standard',
                name: 'Standard Linting Excellence Campaign',
                description: 'Comprehensive linting improvement campaign targeting zero errors',
                phases: [
                    {
                        id: 'phase-1-auto-fixes',
                        name: 'Automated Fixes',
                        description: 'Apply all available ESLint auto-fixes',
                        tools: ['eslint-fix'],
                        successCriteria: {
                            errorReduction: 50,
                            warningReduction: 100,
                            performanceThreshold: 60000,
                        },
                        estimatedDuration: 15,
                    },
                    {
                        id: 'phase-2-imports',
                        name: 'Import Organization',
                        description: 'Clean up and organize import statements',
                        tools: ['unused-imports', 'import-organization'],
                        successCriteria: {
                            errorReduction: 20,
                            warningReduction: 200,
                            performanceThreshold: 60000,
                        },
                        estimatedDuration: 30,
                    },
                    {
                        id: 'phase-3-types',
                        name: 'Type Safety Improvement',
                        description: 'Eliminate explicit any and improve type safety',
                        tools: ['explicit-any-elimination'],
                        successCriteria: {
                            errorReduction: 10,
                            warningReduction: 50,
                            performanceThreshold: 60000,
                        },
                        estimatedDuration: 45,
                    },
                    {
                        id: 'phase-4-cleanup',
                        name: 'Code Cleanup',
                        description: 'Clean up console statements and other code quality issues',
                        tools: ['console-cleanup'],
                        successCriteria: {
                            errorReduction: 5,
                            warningReduction: 30,
                            performanceThreshold: 60000,
                        },
                        estimatedDuration: 20,
                    },
                ],
                targets: {
                    maxErrors: 0,
                    maxWarnings: 100,
                    targetReduction: 80,
                },
                safetyProtocols: ['backup-before-changes', 'validate-build', 'rollback-on-failure'],
                notifications: {
                    onProgress: true,
                    onCompletion: true,
                    onRegression: true,
                },
            },
        ];
    }
    /**
     * Utility methods
     */
    ensureDirectoryExists() {
        try {
            (0, child_process_1.execSync)('mkdir -p .kiro/campaigns', { stdio: 'pipe' });
        }
        catch (error) {
            // Directory might already exist
        }
    }
    saveCampaignConfig(config) {
        try {
            const configs = this.getAllCampaignConfigs();
            configs[config.campaignId] = config;
            (0, fs_1.writeFileSync)(this.campaignConfigFile, JSON.stringify(configs, null, 2));
        }
        catch (error) {
            logger_1.logger.error('Error saving campaign config:', error);
        }
    }
    getCampaignConfig(campaignId) {
        try {
            const configs = this.getAllCampaignConfigs();
            return configs[campaignId];
        }
        catch (error) {
            logger_1.logger.error('Error reading campaign config:', error);
            return undefined;
        }
    }
    getAllCampaignConfigs() {
        try {
            if ((0, fs_1.existsSync)(this.campaignConfigFile)) {
                const data = (0, fs_1.readFileSync)(this.campaignConfigFile, 'utf8');
                return JSON.parse(data);
            }
        }
        catch (error) {
            logger_1.logger.warn('Error reading campaign configs:', error);
        }
        return {};
    }
    setActiveCampaign(campaignId, baselineReport) {
        try {
            const activeCampaign = {
                campaignId,
                startTime: new Date(),
                baselineMetrics: baselineReport.currentMetrics,
                phasesExecuted: [],
            };
            (0, fs_1.writeFileSync)(this.activeConfigFile, JSON.stringify(activeCampaign, null, 2));
        }
        catch (error) {
            logger_1.logger.error('Error setting active campaign:', error);
        }
    }
    getActiveCampaign() {
        try {
            if ((0, fs_1.existsSync)(this.activeConfigFile)) {
                const data = (0, fs_1.readFileSync)(this.activeConfigFile, 'utf8');
                return JSON.parse(data);
            }
        }
        catch (error) {
            logger_1.logger.warn('Error reading active campaign:', error);
        }
        return null;
    }
    async updateCampaignProgress(campaignId, phaseId, result) {
        try {
            const activeCampaign = this.getActiveCampaign();
            if (activeCampaign && activeCampaign.campaignId === campaignId) {
                activeCampaign.phasesExecuted = activeCampaign.phasesExecuted || [];
                activeCampaign.phasesExecuted.push({
                    phaseId,
                    result,
                    timestamp: new Date(),
                });
                (0, fs_1.writeFileSync)(this.activeConfigFile, JSON.stringify(activeCampaign, null, 2));
            }
        }
        catch (error) {
            logger_1.logger.error('Error updating campaign progress:', error);
        }
    }
    async sendProgressNotification(config, result) {
        // This would integrate with notification systems
        logger_1.logger.info(`Campaign ${config.name} progress notification:`, {
            phase: result.phase,
            success: result.success,
            improvement: result.metricsImprovement.improvementPercentage,
        });
    }
    saveCampaignReport(report) {
        try {
            const reportFile = `.kiro/campaigns/report-${report.campaignId}-${Date.now()}.json`;
            (0, fs_1.writeFileSync)(reportFile, JSON.stringify(report, null, 2));
        }
        catch (error) {
            logger_1.logger.error('Error saving campaign report:', error);
        }
    }
}
exports.LintingCampaignIntegration = LintingCampaignIntegration;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,