{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/linting/LintingCampaignIntegration.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/linting/LintingCampaignIntegration.ts"],"sourcesContent":["/**\n * Linting Campaign Integration Service\n *\n * Integrates linting progress tracking with the existing campaign system\n * for comprehensive quality improvement campaigns.\n */\n\nimport { execSync } from 'child_process';\nimport { writeFileSync, readFileSync, existsSync } from 'fs';\n\nimport { logger } from '@/utils/logger';\n\nimport {\n  LintingProgressTracker,\n  LintingProgressReport,\n  CampaignIntegrationData,\n} from './LintingProgressTracker';\n\n/**\n * Linting campaign configuration\n */\nexport interface LintingCampaignConfig {\n  campaignId: string;\n  name: string;\n  description: string;\n  phases: LintingCampaignPhase[];\n  targets: {\n    maxErrors: number;\n    maxWarnings: number;\n    targetReduction: number;\n  };\n  safetyProtocols: string[];\n  notifications: {\n    onProgress: boolean;\n    onCompletion: boolean;\n    onRegression: boolean;\n  };\n}\n\n/**\n * Linting campaign phase\n */\nexport interface LintingCampaignPhase {\n  id: string;\n  name: string;\n  description: string;\n  tools: string[];\n  successCriteria: {\n    errorReduction: number;\n    warningReduction: number;\n    performanceThreshold: number;\n  };\n  estimatedDuration: number; // minutes\n}\n\n/**\n * Campaign execution result\n */\nexport interface CampaignExecutionResult {\n  campaignId: string;\n  phase: string;\n  success: boolean;\n  metricsImprovement: {\n    errorsBefore: number;\n    errorsAfter: number;\n    warningsBefore: number;\n    warningsAfter: number;\n    improvementPercentage: number;\n  };\n  executionTime: number;\n  issues: string[];\n  recommendations: string[];\n}\n\n/**\n * Linting Campaign Integration Service\n */\nexport class LintingCampaignIntegration {\n  private progressTracker: LintingProgressTracker;\n  private campaignConfigFile = '.kiro/campaigns/linting-campaigns.json';\n  private activeConfigFile = '.kiro/campaigns/active-linting-campaign.json';\n\n  constructor() {\n    this.progressTracker = new LintingProgressTracker();\n    this.ensureDirectoryExists();\n  }\n\n  /**\n   * Start a linting improvement campaign\n   */\n  async startCampaign(config: LintingCampaignConfig): Promise<void> {\n    try {\n      logger.info(`Starting linting campaign: ${config.name}`);\n\n      // Collect baseline metrics\n      const baselineReport = await this.progressTracker.generateProgressReport();\n\n      // Save campaign configuration\n      this.saveCampaignConfig(config);\n      this.setActiveCampaign(config.campaignId, baselineReport);\n\n      // Execute campaign phases\n      for (const phase of config.phases) {\n        await this.executePhase(config, phase);\n      }\n\n      // Generate final report\n      const finalReport = await this.generateCampaignReport(config.campaignId);\n      logger.info('Linting campaign completed:', finalReport);\n    } catch (error) {\n      logger.error('Error executing linting campaign:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Execute a specific campaign phase\n   */\n  async executePhase(\n    config: LintingCampaignConfig,\n    phase: LintingCampaignPhase,\n  ): Promise<CampaignExecutionResult> {\n    const startTime = Date.now();\n\n    try {\n      logger.info(`Executing campaign phase: ${phase.name}`);\n\n      // Collect pre-phase metrics\n      const prePhaseReport = await this.progressTracker.generateProgressReport();\n\n      // Execute phase tools\n      const toolResults = await this.executePhaseTools(phase.tools);\n\n      // Collect post-phase metrics\n      const postPhaseReport = await this.progressTracker.generateProgressReport();\n\n      // Evaluate success criteria\n      const success = this.evaluatePhaseSuccess(phase, prePhaseReport, postPhaseReport);\n\n      const result: CampaignExecutionResult = {\n        campaignId: config.campaignId,\n        phase: phase.id,\n        success,\n        metricsImprovement: {\n          errorsBefore: prePhaseReport.currentMetrics.errors,\n          errorsAfter: postPhaseReport.currentMetrics.errors,\n          warningsBefore: prePhaseReport.currentMetrics.warnings,\n          warningsAfter: postPhaseReport.currentMetrics.warnings,\n          improvementPercentage: postPhaseReport.improvement.percentageImprovement,\n        },\n        executionTime: Date.now() - startTime,\n        issues: toolResults.issues,\n        recommendations: toolResults.recommendations,\n      };\n\n      // Update campaign progress\n      await this.updateCampaignProgress(config.campaignId, phase.id, result);\n\n      // Check for notifications\n      if (config.notifications.onProgress) {\n        await this.sendProgressNotification(config, result);\n      }\n\n      logger.info(`Phase ${phase.name} completed:`, {\n        success,\n        improvement: result.metricsImprovement.improvementPercentage,\n      });\n\n      return result;\n    } catch (error) {\n      logger.error(`Error executing phase ${phase.name}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Execute phase tools\n   */\n  private async executePhaseTools(\n    tools: string[],\n  ): Promise<{ issues: string[]; recommendations: string[] }> {\n    const issues: string[] = [];\n    const recommendations: string[] = [];\n\n    for (const tool of tools) {\n      try {\n        const result = await this.executeTool(tool);\n        issues.push(...result.issues);\n        recommendations.push(...result.recommendations);\n      } catch (error) {\n        issues.push(\n          `Tool ${tool} failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        );\n      }\n    }\n\n    return { issues, recommendations };\n  }\n\n  /**\n   * Execute a specific tool\n   */\n  private async executeTool(\n    tool: string,\n  ): Promise<{ issues: string[]; recommendations: string[] }> {\n    const issues: string[] = [];\n    const recommendations: string[] = [];\n\n    try {\n      switch (tool) {\n        case 'eslint-fix':\n          await this.executeESLintFix();\n          recommendations.push('Applied ESLint auto-fixes');\n          break;\n\n        case 'unused-imports':\n          await this.executeUnusedImportRemoval();\n          recommendations.push('Removed unused imports');\n          break;\n\n        case 'import-organization':\n          await this.executeImportOrganization();\n          recommendations.push('Organized import statements');\n          break;\n\n        case 'explicit-any-elimination':\n          await this.executeExplicitAnyElimination();\n          recommendations.push('Reduced explicit any usage');\n          break;\n\n        case 'console-cleanup':\n          await this.executeConsoleCleanup();\n          recommendations.push('Cleaned up console statements');\n          break;\n\n        default:\n          issues.push(`Unknown tool: ${tool}`);\n      }\n    } catch (error) {\n      issues.push(\n        `Tool ${tool} execution failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      );\n    }\n\n    return { issues, recommendations };\n  }\n\n  /**\n   * Tool execution methods\n   */\n  private async executeESLintFix(): Promise<void> {\n    try {\n      execSync('yarn lint:fix', { stdio: 'pipe' });\n    } catch (error) {\n      // ESLint fix may return non-zero exit code but still apply fixes\n      logger.debug('ESLint fix completed with warnings');\n    }\n  }\n\n  private async executeUnusedImportRemoval(): Promise<void> {\n    try {\n      // Use the existing SafeUnusedImportRemover\n      const { SafeUnusedImportRemover } = await import('./SafeUnusedImportRemover');\n      const remover = new SafeUnusedImportRemover();\n      await remover.processUnusedImports();\n    } catch (error) {\n      logger.warn('Unused import removal failed:', error);\n    }\n  }\n\n  private async executeImportOrganization(): Promise<void> {\n    try {\n      execSync('yarn lint --fix-type layout', { stdio: 'pipe' });\n    } catch (error) {\n      logger.debug('Import organization completed with warnings');\n    }\n  }\n\n  private async executeExplicitAnyElimination(): Promise<void> {\n    try {\n      // This would integrate with existing explicit any elimination tools\n      logger.info('Explicit any elimination would be executed here');\n    } catch (error) {\n      logger.warn('Explicit any elimination failed:', error);\n    }\n  }\n\n  private async executeConsoleCleanup(): Promise<void> {\n    try {\n      // This would integrate with existing console cleanup tools\n      logger.info('Console cleanup would be executed here');\n    } catch (error) {\n      logger.warn('Console cleanup failed:', error);\n    }\n  }\n\n  /**\n   * Evaluate phase success criteria\n   */\n  private evaluatePhaseSuccess(\n    phase: LintingCampaignPhase,\n    preReport: LintingProgressReport,\n    postReport: LintingProgressReport,\n  ): boolean {\n    const errorReduction = preReport.currentMetrics.errors - postReport.currentMetrics.errors;\n    const warningReduction = preReport.currentMetrics.warnings - postReport.currentMetrics.warnings;\n    const performanceAcceptable =\n      postReport.currentMetrics.performanceMetrics.executionTime <=\n      phase.successCriteria.performanceThreshold;\n\n    return (\n      errorReduction >= phase.successCriteria.errorReduction &&\n      warningReduction >= phase.successCriteria.warningReduction &&\n      performanceAcceptable\n    );\n  }\n\n  /**\n   * Generate comprehensive campaign report\n   */\n  async generateCampaignReport(campaignId: string): Promise<any> {\n    try {\n      const config = this.getCampaignConfig(campaignId);\n      const activeCampaign = this.getActiveCampaign();\n      const currentReport = await this.progressTracker.generateProgressReport();\n\n      if (!config || !activeCampaign) {\n        throw new Error('Campaign data not found');\n      }\n\n      const report = {\n        campaignId,\n        name: config.name,\n        startTime: activeCampaign.startTime,\n        endTime: new Date(),\n        baselineMetrics: activeCampaign.baselineMetrics,\n        finalMetrics: currentReport.currentMetrics,\n        totalImprovement: {\n          errorReduction:\n            activeCampaign.baselineMetrics.errors - currentReport.currentMetrics.errors,\n          warningReduction:\n            activeCampaign.baselineMetrics.warnings - currentReport.currentMetrics.warnings,\n          percentageImprovement: currentReport.improvement.percentageImprovement,\n        },\n        phasesExecuted: activeCampaign.phasesExecuted || [],\n        qualityGatesStatus: currentReport.qualityGates,\n        recommendations:\n          currentReport.improvement.percentageImprovement > 0\n            ? ['Continue monitoring for regressions', 'Consider additional optimization phases']\n            : ['Investigate why improvements were not achieved', 'Review tool configurations'],\n      };\n\n      // Save final report\n      this.saveCampaignReport(report);\n\n      return report;\n    } catch (error) {\n      logger.error('Error generating campaign report:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create predefined campaign configurations\n   */\n  createStandardCampaigns(): LintingCampaignConfig[] {\n    return [\n      {\n        campaignId: 'linting-excellence-standard',\n        name: 'Standard Linting Excellence Campaign',\n        description: 'Comprehensive linting improvement campaign targeting zero errors',\n        phases: [\n          {\n            id: 'phase-1-auto-fixes',\n            name: 'Automated Fixes',\n            description: 'Apply all available ESLint auto-fixes',\n            tools: ['eslint-fix'],\n            successCriteria: {\n              errorReduction: 50,\n              warningReduction: 100,\n              performanceThreshold: 60000,\n            },\n            estimatedDuration: 15,\n          },\n          {\n            id: 'phase-2-imports',\n            name: 'Import Organization',\n            description: 'Clean up and organize import statements',\n            tools: ['unused-imports', 'import-organization'],\n            successCriteria: {\n              errorReduction: 20,\n              warningReduction: 200,\n              performanceThreshold: 60000,\n            },\n            estimatedDuration: 30,\n          },\n          {\n            id: 'phase-3-types',\n            name: 'Type Safety Improvement',\n            description: 'Eliminate explicit any and improve type safety',\n            tools: ['explicit-any-elimination'],\n            successCriteria: {\n              errorReduction: 10,\n              warningReduction: 50,\n              performanceThreshold: 60000,\n            },\n            estimatedDuration: 45,\n          },\n          {\n            id: 'phase-4-cleanup',\n            name: 'Code Cleanup',\n            description: 'Clean up console statements and other code quality issues',\n            tools: ['console-cleanup'],\n            successCriteria: {\n              errorReduction: 5,\n              warningReduction: 30,\n              performanceThreshold: 60000,\n            },\n            estimatedDuration: 20,\n          },\n        ],\n        targets: {\n          maxErrors: 0,\n          maxWarnings: 100,\n          targetReduction: 80,\n        },\n        safetyProtocols: ['backup-before-changes', 'validate-build', 'rollback-on-failure'],\n        notifications: {\n          onProgress: true,\n          onCompletion: true,\n          onRegression: true,\n        },\n      },\n    ];\n  }\n\n  /**\n   * Utility methods\n   */\n  private ensureDirectoryExists(): void {\n    try {\n      execSync('mkdir -p .kiro/campaigns', { stdio: 'pipe' });\n    } catch (error) {\n      // Directory might already exist\n    }\n  }\n\n  private saveCampaignConfig(config: LintingCampaignConfig): void {\n    try {\n      const configs = this.getAllCampaignConfigs();\n      configs[config.campaignId] = config;\n      writeFileSync(this.campaignConfigFile, JSON.stringify(configs, null, 2));\n    } catch (error) {\n      logger.error('Error saving campaign config:', error);\n    }\n  }\n\n  private getCampaignConfig(campaignId: string): LintingCampaignConfig | undefined {\n    try {\n      const configs = this.getAllCampaignConfigs();\n      return configs[campaignId];\n    } catch (error) {\n      logger.error('Error reading campaign config:', error);\n      return undefined;\n    }\n  }\n\n  private getAllCampaignConfigs(): Record<string, LintingCampaignConfig> {\n    try {\n      if (existsSync(this.campaignConfigFile)) {\n        const data = readFileSync(this.campaignConfigFile, 'utf8');\n        return JSON.parse(data);\n      }\n    } catch (error) {\n      logger.warn('Error reading campaign configs:', error);\n    }\n    return {};\n  }\n\n  private setActiveCampaign(campaignId: string, baselineReport: LintingProgressReport): void {\n    try {\n      const activeCampaign = {\n        campaignId,\n        startTime: new Date(),\n        baselineMetrics: baselineReport.currentMetrics,\n        phasesExecuted: [],\n      };\n      writeFileSync(this.activeConfigFile, JSON.stringify(activeCampaign, null, 2));\n    } catch (error) {\n      logger.error('Error setting active campaign:', error);\n    }\n  }\n\n  private getActiveCampaign(): unknown {\n    try {\n      if (existsSync(this.activeConfigFile)) {\n        const data = readFileSync(this.activeConfigFile, 'utf8');\n        return JSON.parse(data);\n      }\n    } catch (error) {\n      logger.warn('Error reading active campaign:', error);\n    }\n    return null;\n  }\n\n  private async updateCampaignProgress(\n    campaignId: string,\n    phaseId: string,\n    result: CampaignExecutionResult,\n  ): Promise<void> {\n    try {\n      const activeCampaign = this.getActiveCampaign();\n      if (activeCampaign && activeCampaign.campaignId === campaignId) {\n        activeCampaign.phasesExecuted = activeCampaign.phasesExecuted || [];\n        activeCampaign.phasesExecuted.push({\n          phaseId,\n          result,\n          timestamp: new Date(),\n        });\n        writeFileSync(this.activeConfigFile, JSON.stringify(activeCampaign, null, 2));\n      }\n    } catch (error) {\n      logger.error('Error updating campaign progress:', error);\n    }\n  }\n\n  private async sendProgressNotification(\n    config: LintingCampaignConfig,\n    result: CampaignExecutionResult,\n  ): Promise<void> {\n    // This would integrate with notification systems\n    logger.info(`Campaign ${config.name} progress notification:`, {\n      phase: result.phase,\n      success: result.success,\n      improvement: result.metricsImprovement.improvementPercentage,\n    });\n  }\n\n  private saveCampaignReport(report: unknown): void {\n    try {\n      const reportFile = `.kiro/campaigns/report-${report.campaignId}-${Date.now()}.json`;\n      writeFileSync(reportFile, JSON.stringify(report, null, 2));\n    } catch (error) {\n      logger.error('Error saving campaign report:', error);\n    }\n  }\n}\n"],"version":3}