{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/MakefileIntegration.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/MakefileIntegration.ts"],"sourcesContent":["/**\n * Makefile Integration System\n *\n * Integrates with existing make commands and implements campaign-specific\n * make targets for phase execution and progress reporting.\n *\n * Requirements: 7.7\n */\n\nimport { execSync } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\n\nexport interface MakeTarget {\n  name: string;\n  description: string;\n  dependencies?: string[];\n  commands: string[];\n  phony?: boolean;\n}\n\nexport interface MakeExecutionResult {\n  success: boolean;\n  exitCode: number;\n  output: string;\n  executionTime: number;\n  target: string;\n}\n\nexport interface CampaignProgress {\n  currentPhase: number;\n  totalPhases: number;\n  typeScriptErrors: number;\n  lintingWarnings: number;\n  buildTime: number;\n  enterpriseSystems: number;\n  lastUpdate: Date;\n}\n\n/**\n * Makefile Integration for Campaign Execution Framework\n */\nexport class MakefileIntegration {\n  private readonly makefilePath: string;\n  private readonly campaignTargets: Map<string, MakeTarget>;\n\n  constructor(makefilePath: string = 'Makefile') {\n    this.makefilePath = makefilePath;\n    this.campaignTargets = new Map();\n    this.initializeCampaignTargets();\n  }\n\n  /**\n   * Initialize campaign-specific make targets\n   */\n  private initializeCampaignTargets(): void {\n    // Campaign Phase Execution Targets\n    this.campaignTargets.set('campaign-phase1', {\n      name: 'campaign-phase1',\n      description: 'Execute Phase 1: TypeScript Error Elimination',\n      commands: [\n        '@echo \"🎯 Starting Phase 1: TypeScript Error Elimination\"',\n        '@echo \"Target: Zero TypeScript compilation errors\"',\n        'node src/services/campaign/CampaignController.js --phase=1 --execute',\n        '@make campaign-validate-phase1',\n      ],\n      phony: true,\n    });\n\n    this.campaignTargets.set('campaign-phase2', {\n      name: 'campaign-phase2',\n      description: 'Execute Phase 2: Linting Excellence Achievement',\n      dependencies: ['campaign-validate-phase1'],\n      commands: [\n        '@echo \"🎯 Starting Phase 2: Linting Excellence Achievement\"',\n        '@echo \"Target: Zero linting warnings\"',\n        'node src/services/campaign/CampaignController.js --phase=2 --execute',\n        '@make campaign-validate-phase2',\n      ],\n      phony: true,\n    });\n\n    this.campaignTargets.set('campaign-phase3', {\n      name: 'campaign-phase3',\n      description: 'Execute Phase 3: Enterprise Intelligence Transformation',\n      dependencies: ['campaign-validate-phase2'],\n      commands: [\n        '@echo \"🎯 Starting Phase 3: Enterprise Intelligence Transformation\"',\n        '@echo \"Target: Transform all unused exports to intelligence systems\"',\n        'node src/services/campaign/CampaignController.js --phase=3 --execute',\n        '@make campaign-validate-phase3',\n      ],\n      phony: true,\n    });\n\n    this.campaignTargets.set('campaign-phase4', {\n      name: 'campaign-phase4',\n      description: 'Execute Phase 4: Performance Optimization Maintenance',\n      dependencies: ['campaign-validate-phase3'],\n      commands: [\n        '@echo \"🎯 Starting Phase 4: Performance Optimization Maintenance\"',\n        '@echo \"Target: Maintain <10s build times and performance targets\"',\n        'node src/services/campaign/CampaignController.js --phase=4 --execute',\n        '@make campaign-validate-phase4',\n      ],\n      phony: true,\n    });\n\n    // Campaign Validation Targets\n    this.campaignTargets.set('campaign-validate-phase1', {\n      name: 'campaign-validate-phase1',\n      description: 'Validate Phase 1 completion (zero TypeScript errors)',\n      commands: [\n        '@echo \"🔍 Validating Phase 1 completion...\"',\n        '@ERRORS=$$(yarn tsc --noEmit --skipLibCheck 2>&1 | grep -c \"error TS\" || echo \"0\"); \\\\',\n        'if [ \"$$ERRORS\" -eq 0 ]; then \\\\',\n        '  echo \"✅ Phase 1 COMPLETE: Zero TypeScript errors achieved!\"; \\\\',\n        'else \\\\',\n        '  echo \"❌ Phase 1 INCOMPLETE: $$ERRORS TypeScript errors remaining\"; \\\\',\n        '  exit 1; \\\\',\n        'fi',\n      ],\n      phony: true,\n    });\n\n    this.campaignTargets.set('campaign-validate-phase2', {\n      name: 'campaign-validate-phase2',\n      description: 'Validate Phase 2 completion (zero linting warnings)',\n      commands: [\n        '@echo \"🔍 Validating Phase 2 completion...\"',\n        '@WARNINGS=$$(yarn lint 2>&1 | grep -c \"warning\" || echo \"0\"); \\\\',\n        'if [ \"$$WARNINGS\" -eq 0 ]; then \\\\',\n        '  echo \"✅ Phase 2 COMPLETE: Zero linting warnings achieved!\"; \\\\',\n        'else \\\\',\n        '  echo \"❌ Phase 2 INCOMPLETE: $$WARNINGS linting warnings remaining\"; \\\\',\n        '  exit 1; \\\\',\n        'fi',\n      ],\n      phony: true,\n    });\n\n    this.campaignTargets.set('campaign-validate-phase3', {\n      name: 'campaign-validate-phase3',\n      description: 'Validate Phase 3 completion (all exports transformed)',\n      commands: [\n        '@echo \"🔍 Validating Phase 3 completion...\"',\n        '@SYSTEMS=$$(grep -r \"INTELLIGENCE_SYSTEM\" src/ | wc -l || echo \"0\"); \\\\',\n        'if [ \"$$SYSTEMS\" -ge 200 ]; then \\\\',\n        '  echo \"✅ Phase 3 COMPLETE: $$SYSTEMS enterprise intelligence systems active!\"; \\\\',\n        'else \\\\',\n        '  echo \"❌ Phase 3 INCOMPLETE: Only $$SYSTEMS intelligence systems (target: 200+)\"; \\\\',\n        '  exit 1; \\\\',\n        'fi',\n      ],\n      phony: true,\n    });\n\n    this.campaignTargets.set('campaign-validate-phase4', {\n      name: 'campaign-validate-phase4',\n      description: 'Validate Phase 4 completion (performance targets met)',\n      commands: [\n        '@echo \"🔍 Validating Phase 4 completion...\"',\n        '@BUILD_TIME=$$(time yarn build 2>&1 | grep real | cut -d\"m\" -f2 | cut -d\"s\" -f1 || echo \"999\"); \\\\',\n        'if [ \"$$(echo \"$$BUILD_TIME < 10\" | bc -l)\" -eq 1 ]; then \\\\',\n        '  echo \"✅ Phase 4 COMPLETE: Build time $$BUILD_TIME seconds (target: <10s)\"; \\\\',\n        'else \\\\',\n        '  echo \"❌ Phase 4 INCOMPLETE: Build time $$BUILD_TIME seconds exceeds 10s target\"; \\\\',\n        '  exit 1; \\\\',\n        'fi',\n      ],\n      phony: true,\n    });\n\n    // Campaign Progress and Reporting Targets\n    this.campaignTargets.set('campaign-status', {\n      name: 'campaign-status',\n      description: 'Show comprehensive campaign progress status',\n      commands: [\n        '@echo \"📊 PERFECT CODEBASE CAMPAIGN STATUS\"',\n        '@echo \"==================================\"',\n        '@echo \"\"',\n        '@echo \"📈 Current Metrics:\"',\n        '@echo \"TypeScript Errors: $$(yarn tsc --noEmit --skipLibCheck 2>&1 | grep -c \"error TS\" || echo \"0\")\"',\n        '@echo \"Linting Warnings: $$(yarn lint 2>&1 | grep -c \"warning\" || echo \"0\")\"',\n        '@echo \"Enterprise Systems: $$(grep -r \"INTELLIGENCE_SYSTEM\" src/ | wc -l || echo \"0\")\"',\n        '@echo \"Build Time: $$(time yarn build >/dev/null 2>&1 && echo \"Build successful\" || echo \"Build failed\")\"',\n        '@echo \"\"',\n        '@echo \"🎯 Phase Status:\"',\n        '@make campaign-validate-phase1 2>/dev/null && echo \"✅ Phase 1: TypeScript Errors\" || echo \"❌ Phase 1: TypeScript Errors\"',\n        '@make campaign-validate-phase2 2>/dev/null && echo \"✅ Phase 2: Linting Warnings\" || echo \"❌ Phase 2: Linting Warnings\"',\n        '@make campaign-validate-phase3 2>/dev/null && echo \"✅ Phase 3: Enterprise Intelligence\" || echo \"❌ Phase 3: Enterprise Intelligence\"',\n        '@make campaign-validate-phase4 2>/dev/null && echo \"✅ Phase 4: Performance Optimization\" || echo \"❌ Phase 4: Performance Optimization\"',\n        '@echo \"\"',\n        '@echo \"🚀 Next Steps:\"',\n        '@echo \"Run: make campaign-execute-next\"',\n      ],\n      phony: true,\n    });\n\n    this.campaignTargets.set('campaign-execute-next', {\n      name: 'campaign-execute-next',\n      description: 'Execute the next incomplete campaign phase',\n      commands: [\n        '@echo \"🎯 Determining next campaign phase...\"',\n        '@if ! make campaign-validate-phase1 >/dev/null 2>&1; then \\\\',\n        '  echo \"▶️ Executing Phase 1: TypeScript Error Elimination\"; \\\\',\n        '  make campaign-phase1; \\\\',\n        'elif ! make campaign-validate-phase2 >/dev/null 2>&1; then \\\\',\n        '  echo \"▶️ Executing Phase 2: Linting Excellence Achievement\"; \\\\',\n        '  make campaign-phase2; \\\\',\n        'elif ! make campaign-validate-phase3 >/dev/null 2>&1; then \\\\',\n        '  echo \"▶️ Executing Phase 3: Enterprise Intelligence Transformation\"; \\\\',\n        '  make campaign-phase3; \\\\',\n        'elif ! make campaign-validate-phase4 >/dev/null 2>&1; then \\\\',\n        '  echo \"▶️ Executing Phase 4: Performance Optimization Maintenance\"; \\\\',\n        '  make campaign-phase4; \\\\',\n        'else \\\\',\n        '  echo \"🎉 ALL PHASES COMPLETE! Perfect Codebase Campaign achieved!\"; \\\\',\n        '  make campaign-celebration; \\\\',\n        'fi',\n      ],\n      phony: true,\n    });\n\n    this.campaignTargets.set('campaign-celebration', {\n      name: 'campaign-celebration',\n      description: 'Celebrate campaign completion',\n      commands: [\n        '@echo \"🎉🎉🎉 PERFECT CODEBASE CAMPAIGN COMPLETE! 🎉🎉🎉\"',\n        '@echo \"\"',\n        '@echo \"🏆 ACHIEVEMENTS UNLOCKED:\"',\n        '@echo \"✅ Zero TypeScript compilation errors\"',\n        '@echo \"✅ Zero linting warnings\"',\n        '@echo \"✅ 200+ enterprise intelligence systems\"',\n        '@echo \"✅ Sub-10 second build times\"',\n        '@echo \"✅ 100% build stability maintained\"',\n        '@echo \"\"',\n        '@echo \"📊 Final Metrics:\"',\n        '@make campaign-status',\n        '@echo \"\"',\n        '@echo \"🚀 Ready for production deployment!\"',\n      ],\n      phony: true,\n    });\n\n    // Campaign Safety and Recovery Targets\n    this.campaignTargets.set('campaign-safety-check', {\n      name: 'campaign-safety-check',\n      description: 'Comprehensive safety validation before campaign execution',\n      commands: [\n        '@echo \"🛡️ Campaign Safety Check\"',\n        '@echo \"======================\"',\n        '@echo \"\"',\n        '@echo \"1. Git Status Check:\"',\n        '@git status --porcelain | wc -l | xargs -I {} echo \"Uncommitted changes: {}\"',\n        '@echo \"\"',\n        '@echo \"2. Build Stability Check:\"',\n        '@yarn build >/dev/null 2>&1 && echo \"✅ Build stable\" || echo \"❌ Build unstable\"',\n        '@echo \"\"',\n        '@echo \"3. Test Suite Check:\"',\n        '@yarn test --run >/dev/null 2>&1 && echo \"✅ Tests passing\" || echo \"❌ Tests failing\"',\n        '@echo \"\"',\n        '@echo \"4. Script Availability Check:\"',\n        '@test -f scripts/typescript-fixes/fix-typescript-errors-enhanced-v3.js && echo \"✅ Enhanced TypeScript Fixer available\" || echo \"❌ Enhanced TypeScript Fixer missing\"',\n        '@test -f scripts/typescript-fixes/fix-explicit-any-systematic.js && echo \"✅ Explicit-Any Fixer available\" || echo \"❌ Explicit-Any Fixer missing\"',\n        '@echo \"\"',\n        '@echo \"🎯 Safety Status: Ready for campaign execution\"',\n      ],\n      phony: true,\n    });\n\n    this.campaignTargets.set('campaign-emergency-rollback', {\n      name: 'campaign-emergency-rollback',\n      description: 'Emergency rollback to last safe state',\n      commands: [\n        '@echo \"🚨 EMERGENCY ROLLBACK INITIATED\"',\n        '@echo \"===============================\"',\n        '@echo \"\"',\n        '@echo \"1. Checking for git stashes...\"',\n        '@git stash list | head -5',\n        '@echo \"\"',\n        '@echo \"2. Recent commits with checkpoints:\"',\n        '@git log --oneline --grep=\"checkpoint\\\\|Phase\" -5',\n        '@echo \"\"',\n        '@echo \"⚠️ MANUAL ACTION REQUIRED:\"',\n        '@echo \"Choose recovery option:\"',\n        '@echo \"  git stash apply stash@{0}  # Apply most recent stash\"',\n        '@echo \"  git reset --hard <commit>  # Reset to specific commit\"',\n        '@echo \"\"',\n        '@echo \"After recovery, run: make campaign-safety-check\"',\n      ],\n      phony: true,\n    });\n\n    // Integration with existing make targets\n    this.campaignTargets.set('campaign-errors-analysis', {\n      name: 'campaign-errors-analysis',\n      description: 'Enhanced error analysis for campaign planning',\n      commands: [\n        '@echo \"📊 Campaign-Focused Error Analysis\"',\n        '@echo \"=================================\"',\n        '@make errors-by-type',\n        '@echo \"\"',\n        '@echo \"🎯 Phase 1 Target Errors:\"',\n        '@yarn tsc --noEmit --skipLibCheck 2>&1 | grep -E \"(TS2352|TS2345|TS2698|TS2304|TS2362)\" | wc -l | xargs -I {} echo \"High-priority errors: {}\"',\n        '@echo \"\"',\n        '@echo \"🎯 Phase 2 Target Warnings:\"',\n        '@yarn lint 2>&1 | grep -E \"(no-explicit-any|no-unused-vars|no-console)\" | wc -l | xargs -I {} echo \"Target linting warnings: {}\"',\n        '@echo \"\"',\n        '@make errors-by-file | head -10',\n      ],\n      phony: true,\n    });\n  }\n\n  /**\n   * Execute a make target\n   */\n  async executeMakeTarget(\n    target: string,\n    options: {\n      silent?: boolean;\n      dryRun?: boolean;\n      timeout?: number;\n    } = {}\n  ): Promise<MakeExecutionResult> {\n    const { silent = false, dryRun = false, timeout = 300000 } = options;\n\n    console.log(`🔨 Executing make target: ${target}`);\n\n    if (dryRun) {\n      console.log(`🔍 DRY RUN: Would execute 'make ${target}'`);\n      return {\n        success: true,\n        exitCode: 0,\n        output: `DRY RUN: make ${target}`,\n        executionTime: 0,\n        target,\n      };\n    }\n\n    const startTime = Date.now();\n\n    try {\n      const output = execSync(`make ${target}`, {\n        encoding: 'utf8',\n        stdio: silent ? 'pipe' : 'inherit',\n        timeout,\n        maxBuffer: 10 * 1024 * 1024, // 10MB buffer\n      });\n\n      const executionTime = Date.now() - startTime;\n\n      return {\n        success: true,\n        exitCode: 0,\n        output: output || '',\n        executionTime,\n        target,\n      };\n    } catch (error: any) {\n      const executionTime = Date.now() - startTime;\n\n      return {\n        success: false,\n        exitCode: error.status || 1,\n        output: error.stdout || error.message || '',\n        executionTime,\n        target,\n      };\n    }\n  }\n\n  /**\n   * Get current campaign progress\n   */\n  async getCampaignProgress(): Promise<CampaignProgress> {\n    try {\n      // Get TypeScript errors count\n      const tsErrorsResult = await this.executeMakeTarget('errors', {\n        silent: true,\n      });\n      const tsErrors = this.parseErrorCount(tsErrorsResult.output);\n\n      // Get linting warnings count\n      const lintResult = execSync(\n        'yarn lint 2>&1 | grep -c \"warning\" || echo \"0\"',\n        {\n          encoding: 'utf8',\n        }\n      );\n      const lintingWarnings = parseInt(lintResult.trim()) || 0;\n\n      // Get enterprise systems count\n      const systemsResult = execSync(\n        'grep -r \"INTELLIGENCE_SYSTEM\" src/ | wc -l || echo \"0\"',\n        {\n          encoding: 'utf8',\n        }\n      );\n      const enterpriseSystems = parseInt(systemsResult.trim()) || 0;\n\n      // Get build time (approximate)\n      let buildTime = 0;\n      try {\n        const buildStart = Date.now();\n        execSync('yarn build', { stdio: 'pipe', timeout: 60000 });\n        buildTime = Date.now() - buildStart;\n      } catch (error) {\n        buildTime = -1; // Build failed\n      }\n\n      // Determine current phase\n      let currentPhase = 1;\n      if (tsErrors === 0) currentPhase = 2;\n      if (tsErrors === 0 && lintingWarnings === 0) currentPhase = 3;\n      if (tsErrors === 0 && lintingWarnings === 0 && enterpriseSystems >= 200)\n        currentPhase = 4;\n      if (\n        tsErrors === 0 &&\n        lintingWarnings === 0 &&\n        enterpriseSystems >= 200 &&\n        buildTime > 0 &&\n        buildTime < 10000\n      ) {\n        currentPhase = 5; // Complete\n      }\n\n      return {\n        currentPhase,\n        totalPhases: 4,\n        typeScriptErrors: tsErrors,\n        lintingWarnings,\n        buildTime,\n        enterpriseSystems,\n        lastUpdate: new Date(),\n      };\n    } catch (error) {\n      console.warn('⚠️ Could not get campaign progress:', error);\n      return {\n        currentPhase: 1,\n        totalPhases: 4,\n        typeScriptErrors: -1,\n        lintingWarnings: -1,\n        buildTime: -1,\n        enterpriseSystems: -1,\n        lastUpdate: new Date(),\n      };\n    }\n  }\n\n  /**\n   * Add campaign targets to existing Makefile\n   */\n  async addCampaignTargetsToMakefile(): Promise<boolean> {\n    try {\n      if (!fs.existsSync(this.makefilePath)) {\n        console.warn(`⚠️ Makefile not found at ${this.makefilePath}`);\n        return false;\n      }\n\n      let makefileContent = fs.readFileSync(this.makefilePath, 'utf8');\n\n      // Check if campaign targets already exist\n      if (makefileContent.includes('# Campaign Execution Framework')) {\n        console.log('✅ Campaign targets already exist in Makefile');\n        return true;\n      }\n\n      // Add campaign targets section\n      const campaignSection = this.generateCampaignMakefileSection();\n      makefileContent += '\\n' + campaignSection;\n\n      // Write updated Makefile\n      fs.writeFileSync(this.makefilePath, makefileContent, 'utf8');\n      console.log('✅ Campaign targets added to Makefile');\n\n      return true;\n    } catch (error) {\n      console.error('❌ Failed to add campaign targets to Makefile:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Generate campaign Makefile section\n   */\n  private generateCampaignMakefileSection(): string {\n    const lines: string[] = [\n      '',\n      '# Campaign Execution Framework',\n      '# Perfect Codebase Campaign - Systematic Excellence Initiative',\n      '',\n    ];\n\n    // Add phony declaration\n    const phonyTargets = Array.from(this.campaignTargets.values())\n      .filter(target => target.phony)\n      .map(target => target.name);\n\n    if (phonyTargets.length > 0) {\n      lines.push(`.PHONY: ${phonyTargets.join(' ')}`);\n      lines.push('');\n    }\n\n    // Add each target\n    for (const target of this.campaignTargets.values()) {\n      lines.push(`# ${target.description}`);\n\n      let targetLine = `${target.name}:`;\n      if (target.dependencies && target.dependencies.length > 0) {\n        targetLine += ` ${target.dependencies.join(' ')}`;\n      }\n      lines.push(targetLine);\n\n      for (const command of target.commands) {\n        lines.push(`\\t${command}`);\n      }\n      lines.push('');\n    }\n\n    return lines.join('\\n');\n  }\n\n  /**\n   * Parse error count from make output\n   */\n  private parseErrorCount(output: string): number {\n    const lines = output.split('\\n');\n    for (const line of lines) {\n      const match = line.match(/(\\d+)/);\n      if (match) {\n        return parseInt(match[1]);\n      }\n    }\n    return 0;\n  }\n\n  /**\n   * Get available campaign targets\n   */\n  getCampaignTargets(): MakeTarget[] {\n    return Array.from(this.campaignTargets.values());\n  }\n\n  /**\n   * Validate that required make targets exist\n   */\n  async validateExistingTargets(): Promise<{\n    valid: boolean;\n    missing: string[];\n  }> {\n    const requiredTargets = [\n      'errors',\n      'errors-by-type',\n      'errors-by-file',\n      'check',\n      'build',\n      'test',\n      'lint',\n    ];\n\n    const missing: string[] = [];\n\n    for (const target of requiredTargets) {\n      try {\n        await this.executeMakeTarget(target, { silent: true, timeout: 5000 });\n      } catch (error) {\n        missing.push(target);\n      }\n    }\n\n    return {\n      valid: missing.length === 0,\n      missing,\n    };\n  }\n}\n"],"version":3}