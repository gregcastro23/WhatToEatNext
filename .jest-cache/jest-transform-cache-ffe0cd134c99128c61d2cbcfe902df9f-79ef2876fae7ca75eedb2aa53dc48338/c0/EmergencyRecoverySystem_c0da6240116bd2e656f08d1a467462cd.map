{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/EmergencyRecoverySystem.ts","mappings":";AAAA;;;;;;GAMG;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,iDAAyC;AACzC,uCAAyB;AACzB,2CAA6B;AAC7B,qDAAkD;AAClD,mDAU8B;AA6B9B,MAAa,uBAAwB,SAAQ,+BAAc;IAIzD,YAAY,QAAwB;QAClC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAJV,mBAAc,GAAkB,EAAE,CAAC;QAKzC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,mBAAmB,CAAC,CAAC;QAC/D,IAAI,CAAC,qBAAqB,EAAE,CAAC;IAC/B,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,4BAA4B,CAChC,UAAoC,EAAE;QAEtC,OAAO,CAAC,GAAG,CAAC,2DAA2D,CAAC,CAAC;QAEzE,IAAI;YACF,6CAA6C;YAC7C,IAAI,UAA8B,CAAC;YACnC,IAAI,OAAO,CAAC,uBAAuB,EAAE;gBACnC,UAAU,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,CAAC;aAC/D;YAED,uBAAuB;YACvB,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAE/B,iCAAiC;YACjC,MAAM,gBAAgB,GAAG,OAAO,CAAC,qBAAqB;gBACpD,CAAC,CAAC,MAAM,IAAI,CAAC,uBAAuB,CAAC,oBAAoB,CAAC;gBAC1D,CAAC,CAAC,IAAI,CAAC,2BAA2B,CAAC,oBAAoB,CAAC,CAAC;YAE3D,IAAI,CAAC,gBAAgB,CAAC;gBACpB,IAAI,EAAE,0BAAe,CAAC,kBAAkB;gBACxC,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,WAAW,EAAE,8CAA8C,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;gBACpF,QAAQ,EAAE,8BAAmB,CAAC,OAAO;gBACrC,MAAM,EAAE,iCAAiC;aAC1C,CAAC,CAAC;YAEH,OAAO,CAAC,GAAG,CAAC,6CAA6C,CAAC,CAAC;YAC3D,OAAO,gBAAgB,CAAC;SACzB;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,YAAY,GAAG,8BAA8B,KAAK,CAAC,OAAO,EAAE,CAAC;YACnE,OAAO,CAAC,KAAK,CAAC,KAAK,YAAY,EAAE,CAAC,CAAC;YAEnC,IAAI,CAAC,gBAAgB,CAAC;gBACpB,IAAI,EAAE,0BAAe,CAAC,kBAAkB;gBACxC,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,WAAW,EAAE,YAAY;gBACzB,QAAQ,EAAE,8BAAmB,CAAC,QAAQ;gBACtC,MAAM,EAAE,2BAA2B;aACpC,CAAC,CAAC;YAEH,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;SAC/B;IACH,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,gBAAgB,CACpB,UAAkB,EAClB,UAAoC,EAAE;QAEtC,OAAO,CAAC,GAAG,CAAC,8BAA8B,UAAU,EAAE,CAAC,CAAC;QAExD,IAAI;YACF,yBAAyB;YACzB,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC;YACjE,IAAI,CAAC,YAAY,EAAE;gBACjB,MAAM,IAAI,KAAK,CAAC,UAAU,UAAU,iBAAiB,CAAC,CAAC;aACxD;YAED,6BAA6B;YAC7B,IAAI,OAAO,CAAC,uBAAuB,EAAE;gBACnC,MAAM,IAAI,CAAC,qBAAqB,CAC9B,uBAAuB,UAAU,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CACpD,CAAC;aACH;YAED,+BAA+B;YAC/B,IAAA,wBAAQ,EAAC,oBAAoB,UAAU,EAAE,EAAE;gBACzC,QAAQ,EAAE,MAAM;gBAChB,KAAK,EAAE,MAAM;aACd,CAAC,CAAC;YAEH,wBAAwB;YACxB,IAAA,wBAAQ,EAAC,eAAe,EAAE;gBACxB,QAAQ,EAAE,MAAM;gBAChB,KAAK,EAAE,MAAM;aACd,CAAC,CAAC;YAEH,MAAM,gBAAgB,GACpB,MAAM,IAAI,CAAC,uBAAuB,CAAC,iBAAiB,CAAC,CAAC;YAExD,IAAI,CAAC,gBAAgB,CAAC;gBACpB,IAAI,EAAE,0BAAe,CAAC,kBAAkB;gBACxC,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,WAAW,EAAE,sBAAsB,UAAU,YAAY;gBACzD,QAAQ,EAAE,8BAAmB,CAAC,OAAO;gBACrC,MAAM,EAAE,iBAAiB;aAC1B,CAAC,CAAC;YAEH,OAAO,CAAC,GAAG,CAAC,yCAAyC,UAAU,EAAE,CAAC,CAAC;YACnE,OAAO,gBAAgB,CAAC;SACzB;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,YAAY,GAAG,2BAA2B,KAAK,CAAC,OAAO,EAAE,CAAC;YAChE,OAAO,CAAC,KAAK,CAAC,KAAK,YAAY,EAAE,CAAC,CAAC;YAEnC,IAAI,CAAC,gBAAgB,CAAC;gBACpB,IAAI,EAAE,0BAAe,CAAC,kBAAkB;gBACxC,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,WAAW,EAAE,YAAY;gBACzB,QAAQ,EAAE,8BAAmB,CAAC,QAAQ;gBACtC,MAAM,EAAE,wBAAwB;aACjC,CAAC,CAAC;YAEH,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;SAC/B;IACH,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,YAAY,CAChB,UAAoC,EAAE;QAEtC,OAAO,CAAC,GAAG,CAAC,2DAA2D,CAAC,CAAC;QACzE,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;QACvC,OAAO,CAAC,GAAG,CAAC,qCAAqC,CAAC,CAAC;QACnD,OAAO,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;QAC/C,OAAO,CAAC,GAAG,CAAC,4CAA4C,CAAC,CAAC;QAC1D,OAAO,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAC;QAExD,IAAI;YACF,MAAM,MAAM,GAAuB;gBACjC,OAAO,EAAE,KAAK;gBACd,UAAU,EAAE,CAAC;gBACb,cAAc,EAAE,KAAK;gBACrB,cAAc,EAAE,CAAC;gBACjB,gBAAgB,EAAE,IAAI,CAAC,2BAA2B,CAAC,eAAe,CAAC;gBACnE,MAAM,EAAE,EAAE;aACX,CAAC;YAEF,mDAAmD;YACnD,IAAI,OAAO,CAAC,uBAAuB,KAAK,KAAK,EAAE;gBAC7C,oCAAoC;gBACpC,MAAM,CAAC,aAAa;oBAClB,MAAM,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,CAAC;gBACxD,OAAO,CAAC,GAAG,CAAC,gCAAgC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC;aACrE;YAED,8CAA8C;YAC9C,OAAO,CAAC,GAAG,CAAC,wCAAwC,CAAC,CAAC;YACtD,MAAM,WAAW,GACf,OAAO,CAAC,aAAa,IAAI,CAAC,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC;YAE9D,IAAA,wBAAQ,EAAC,oBAAoB,WAAW,EAAE,EAAE;gBAC1C,QAAQ,EAAE,MAAM;gBAChB,KAAK,EAAE,MAAM;aACd,CAAC,CAAC;YAEH,IAAA,wBAAQ,EAAC,eAAe,EAAE;gBACxB,QAAQ,EAAE,MAAM;gBAChB,KAAK,EAAE,MAAM;aACd,CAAC,CAAC;YAEH,MAAM,CAAC,UAAU,GAAG,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;YAEjD,qCAAqC;YACrC,OAAO,CAAC,GAAG,CAAC,yCAAyC,CAAC,CAAC;YACvD,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE;gBAC5B,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;gBAC7B,MAAM,CAAC,cAAc,GAAG,IAAI,CAAC;aAC9B;YAED,2CAA2C;YAC3C,OAAO,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;YAC/C,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE;gBAC5B,MAAM,CAAC,cAAc,GAAG,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;aACtD;YAED,wCAAwC;YACxC,OAAO,CAAC,GAAG,CAAC,kDAAkD,CAAC,CAAC;YAChE,MAAM,IAAI,CAAC,2BAA2B,EAAE,CAAC;YAEzC,yCAAyC;YACzC,OAAO,CAAC,GAAG,CAAC,uCAAuC,CAAC,CAAC;YACrD,IAAI,OAAO,CAAC,qBAAqB,KAAK,KAAK,EAAE;gBAC3C,oCAAoC;gBACpC,MAAM,CAAC,gBAAgB,GAAG,MAAM,IAAI,CAAC,2BAA2B,EAAE,CAAC;aACpE;YAED,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;YAEtB,IAAI,CAAC,gBAAgB,CAAC;gBACpB,IAAI,EAAE,0BAAe,CAAC,kBAAkB;gBACxC,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,WAAW,EAAE,sCAAsC;gBACnD,QAAQ,EAAE,8BAAmB,CAAC,QAAQ;gBACtC,MAAM,EAAE,uBAAuB;aAChC,CAAC,CAAC;YAEH,OAAO,CAAC,GAAG,CAAC,yCAAyC,CAAC,CAAC;YACvD,OAAO,CAAC,GAAG,CAAC,mBAAmB,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC;YACpD,OAAO,CAAC,GAAG,CAAC,uBAAuB,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC;YAC5D,OAAO,CAAC,GAAG,CAAC,uBAAuB,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC;YAE5D,OAAO,MAAM,CAAC;SACf;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,YAAY,GAAG,yBAAyB,KAAK,CAAC,OAAO,EAAE,CAAC;YAC9D,OAAO,CAAC,KAAK,CAAC,KAAK,YAAY,EAAE,CAAC,CAAC;YAEnC,IAAI,CAAC,gBAAgB,CAAC;gBACpB,IAAI,EAAE,0BAAe,CAAC,kBAAkB;gBACxC,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,WAAW,EAAE,YAAY;gBACzB,QAAQ,EAAE,8BAAmB,CAAC,QAAQ;gBACtC,MAAM,EAAE,sBAAsB;aAC/B,CAAC,CAAC;YAEH,OAAO;gBACL,OAAO,EAAE,KAAK;gBACd,UAAU,EAAE,CAAC;gBACb,cAAc,EAAE,KAAK;gBACrB,cAAc,EAAE,CAAC;gBACjB,gBAAgB,EAAE,IAAI,CAAC,2BAA2B,CAAC,eAAe,CAAC;gBACnE,MAAM,EAAE,CAAC,YAAY,CAAC;aACvB,CAAC;SACH;IACH,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,iBAAiB,CACrB,OAAiB,EACjB,SAAkB;;QAElB,OAAO,CAAC,GAAG,CACT,wCAAwC,OAAO,CAAC,MAAM,aAAa,CACpE,CAAC;QAEF,IAAI;YACF,iDAAiD;YACjD,MAAM,UAAU,GAAG,SAAS,KAAI,MAAA,CAAC,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC,0CAAE,EAAE,CAAA,CAAC;YAClE,IAAI,CAAC,UAAU,EAAE;gBACf,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;aAChE;YAED,iDAAiD;YACjD,MAAM,UAAU,GAAG,iBAAiB,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;YACjD,IAAA,wBAAQ,EAAC,mBAAmB,UAAU,EAAE,EAAE;gBACxC,QAAQ,EAAE,MAAM;gBAChB,KAAK,EAAE,MAAM;aACd,CAAC,CAAC;YAEH,IAAI;gBACF,kCAAkC;gBAClC,MAAM,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;gBAEzC,wCAAwC;gBACxC,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;oBAC5B,IAAI,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;wBACzB,IAAA,wBAAQ,EAAC,yBAAyB,MAAM,GAAG,EAAE;4BAC3C,QAAQ,EAAE,MAAM;4BAChB,KAAK,EAAE,MAAM;yBACd,CAAC,CAAC;wBACH,OAAO,CAAC,GAAG,CAAC,eAAe,MAAM,EAAE,CAAC,CAAC;qBACtC;yBAAM;wBACL,OAAO,CAAC,IAAI,CAAC,wBAAwB,MAAM,EAAE,CAAC,CAAC;qBAChD;iBACF;gBAED,4BAA4B;gBAC5B,MAAM,cAAc,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBAC/C,IAAA,wBAAQ,EAAC,gBAAgB,cAAc,EAAE,EAAE;oBACzC,QAAQ,EAAE,MAAM;oBAChB,KAAK,EAAE,MAAM;iBACd,CAAC,CAAC;gBAEH,0BAA0B;gBAC1B,IAAA,wBAAQ,EAAC,iBAAiB,UAAU,EAAE,EAAE;oBACtC,QAAQ,EAAE,MAAM;oBAChB,KAAK,EAAE,MAAM;iBACd,CAAC,CAAC;aACJ;YAAC,OAAO,KAAK,EAAE;gBACd,4DAA4D;gBAC5D,IAAI;oBACF,MAAM,cAAc,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;oBAC/C,IAAI,cAAc,KAAK,UAAU,EAAE;wBACjC,IAAA,wBAAQ,EAAC,gBAAgB,cAAc,EAAE,EAAE;4BACzC,QAAQ,EAAE,MAAM;4BAChB,KAAK,EAAE,MAAM;yBACd,CAAC,CAAC;qBACJ;oBACD,IAAA,wBAAQ,EAAC,iBAAiB,UAAU,EAAE,EAAE;wBACtC,QAAQ,EAAE,MAAM;wBAChB,KAAK,EAAE,MAAM;qBACd,CAAC,CAAC;iBACJ;gBAAC,OAAO,YAAY,EAAE;oBACrB,OAAO,CAAC,IAAI,CAAC,uBAAuB,YAAY,CAAC,OAAO,EAAE,CAAC,CAAC;iBAC7D;gBACD,MAAM,KAAK,CAAC;aACb;YAED,MAAM,gBAAgB,GACpB,MAAM,IAAI,CAAC,uBAAuB,CAAC,oBAAoB,CAAC,CAAC;YAE3D,IAAI,CAAC,gBAAgB,CAAC;gBACpB,IAAI,EAAE,0BAAe,CAAC,kBAAkB;gBACxC,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,WAAW,EAAE,oCAAoC,OAAO,CAAC,MAAM,UAAU;gBACzE,QAAQ,EAAE,8BAAmB,CAAC,IAAI;gBAClC,MAAM,EAAE,oBAAoB;aAC7B,CAAC,CAAC;YAEH,OAAO,CAAC,GAAG,CACT,sCAAsC,OAAO,CAAC,MAAM,UAAU,CAC/D,CAAC;YACF,OAAO,gBAAgB,CAAC;SACzB;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,YAAY,GAAG,8BAA8B,KAAK,CAAC,OAAO,EAAE,CAAC;YACnE,OAAO,CAAC,KAAK,CAAC,KAAK,YAAY,EAAE,CAAC,CAAC;YAEnC,IAAI,CAAC,gBAAgB,CAAC;gBACpB,IAAI,EAAE,0BAAe,CAAC,kBAAkB;gBACxC,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,WAAW,EAAE,YAAY;gBACzB,QAAQ,EAAE,8BAAmB,CAAC,KAAK;gBACnC,MAAM,EAAE,2BAA2B;aACpC,CAAC,CAAC;YAEH,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;SAC/B;IACH,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,uBAAuB,CAC3B,cAAsB;QAEtB,OAAO,CAAC,GAAG,CAAC,8CAA8C,cAAc,EAAE,CAAC,CAAC;QAE5E,MAAM,MAAM,GAA6B;YACvC,OAAO,EAAE,IAAI;YACb,MAAM,EAAE,EAAE;YACV,QAAQ,EAAE,EAAE;YACZ,cAAc;YACd,aAAa,EAAE,CAAC;YAChB,cAAc,EAAE,KAAK;YACrB,gBAAgB,EAAE,KAAK;YACvB,eAAe,EAAE,KAAK;YACtB,cAAc,EAAE,KAAK;SACtB,CAAC;QAEF,IAAI;YACF,mCAAmC;YACnC,OAAO,CAAC,GAAG,CAAC,uCAAuC,CAAC,CAAC;YACrD,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACpD,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE;gBAC1B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;gBAC5C,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC;aACxB;YACD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC;YAEhD,0BAA0B;YAC1B,MAAM,CAAC,aAAa,GAAG,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAEtD,2BAA2B;YAC3B,OAAO,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;YAC7C,IAAI;gBACF,IAAA,wBAAQ,EAAC,YAAY,EAAE;oBACrB,QAAQ,EAAE,MAAM;oBAChB,KAAK,EAAE,MAAM;oBACb,OAAO,EAAE,KAAK,EAAE,oBAAoB;iBACrC,CAAC,CAAC;gBACH,MAAM,CAAC,eAAe,GAAG,IAAI,CAAC;gBAC9B,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;aAC1C;YAAC,OAAO,UAAU,EAAE;gBACnB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,4BAA4B,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC;gBACrE,MAAM,CAAC,eAAe,GAAG,KAAK,CAAC;gBAC/B,OAAO,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;aAC5C;YAED,0BAA0B;YAC1B,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;YAC5C,IAAI;gBACF,IAAA,wBAAQ,EAAC,kCAAkC,EAAE;oBAC3C,QAAQ,EAAE,MAAM;oBAChB,KAAK,EAAE,MAAM;oBACb,OAAO,EAAE,KAAK,EAAE,oBAAoB;iBACrC,CAAC,CAAC;gBACH,MAAM,CAAC,cAAc,GAAG,IAAI,CAAC;gBAC7B,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;aACzC;YAAC,OAAO,SAAS,EAAE;gBAClB,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,4BAA4B,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC;gBACtE,MAAM,CAAC,cAAc,GAAG,KAAK,CAAC;gBAC9B,OAAO,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;aAC/C;YAED,qCAAqC;YACrC,OAAO,CAAC,GAAG,CAAC,8CAA8C,CAAC,CAAC;YAC5D,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC;gBACnD,aAAa;gBACb,cAAc;aACf,CAAC,CAAC;YACH,IAAI,gBAAgB,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC7C,MAAM,CAAC,MAAM,CAAC,IAAI,CAChB,uCAAuC,gBAAgB,CAAC,aAAa,CAAC,MAAM,QAAQ,CACrF,CAAC;gBACF,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC;aACxB;YAED,4BAA4B;YAC5B,MAAM,CAAC,cAAc,GAAG,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACvD,MAAM,CAAC,gBAAgB,GAAG,CAAC,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;YAEhE,8BAA8B;YAC9B,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,MAAM,CAAC,eAAe,CAAC;YAEtE,IAAI,CAAC,gBAAgB,CAAC;gBACpB,IAAI,EAAE,0BAAe,CAAC,kBAAkB;gBACxC,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,WAAW,EAAE,kCAAkC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ,EAAE;gBACtF,QAAQ,EAAE,MAAM,CAAC,OAAO;oBACtB,CAAC,CAAC,8BAAmB,CAAC,IAAI;oBAC1B,CAAC,CAAC,8BAAmB,CAAC,KAAK;gBAC7B,MAAM,EAAE,qBAAqB;aAC9B,CAAC,CAAC;YAEH,OAAO,CAAC,GAAG,CACT,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,wBAAwB,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,EAAE,CAC5F,CAAC;YACF,OAAO,MAAM,CAAC;SACf;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC;YACvB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,8BAA8B,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAElE,OAAO,CAAC,KAAK,CAAC,gCAAgC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAC/D,OAAO,MAAM,CAAC;SACf;IACH,CAAC;IAED;;OAEG;IACH,qBAAqB;QAQnB,MAAM,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAC/C,CAAC,CAAC,EAAE,CACF,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC;YAC7B,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC;YAC7B,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAC7B,CAAC;QAEF,MAAM,oBAAoB,GAAG,cAAc,CAAC,MAAM,CAChD,CAAC,CAAC,EAAE,CACF,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,QAAQ,KAAK,8BAAmB,CAAC,IAAI,CAC1E,CAAC,MAAM,CAAC;QAET,MAAM,gBAAgB,GAAG,cAAc,CAAC,MAAM,CAC5C,CAAC,CAAC,EAAE,CACF,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;YAC3B,CAAC,CAAC,QAAQ,KAAK,8BAAmB,CAAC,QAAQ,CAC9C,CAAC,MAAM,CAAC;QAET,MAAM,aAAa,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAC9C,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,eAAe,CAAC,CACnC,CAAC,MAAM,CAAC;QAET,MAAM,eAAe,GAA2B,EAAE,CAAC;QACnD,KAAK,MAAM,KAAK,IAAI,cAAc,EAAE;YAClC,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1C,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;SAC9D;QAED,MAAM,YAAY,GAChB,cAAc,CAAC,MAAM,GAAG,CAAC;YACvB,CAAC,CAAC,cAAc,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,SAAS;YACrD,CAAC,CAAC,SAAS,CAAC;QAEhB,OAAO;YACL,eAAe,EAAE,cAAc,CAAC,MAAM;YACtC,oBAAoB;YACpB,gBAAgB;YAChB,aAAa;YACb,YAAY;YACZ,eAAe;SAChB,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,iBAAiB;QACf,OAAO,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC;IAClC,CAAC;IAED,yBAAyB;IAEjB,qBAAqB;QAC3B,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE;YACxC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;SACzD;IACH,CAAC;IAEO,KAAK,CAAC,qBAAqB,CAAC,WAAmB;QACrD,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;QACjE,MAAM,UAAU,GAAG,oBAAoB,WAAW,IAAI,SAAS,EAAE,CAAC;QAClE,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;QAE/D,kCAAkC;QAClC,IAAA,wBAAQ,EACN,yCAAyC,UAAU,eAAe,EAClE;YACE,QAAQ,EAAE,MAAM;YAChB,KAAK,EAAE,MAAM;SACd,CACF,CAAC;QAEF,OAAO,CAAC,GAAG,CAAC,gCAAgC,UAAU,SAAS,CAAC,CAAC;QACjE,OAAO,GAAG,UAAU,SAAS,CAAC;IAChC,CAAC;IAEO,KAAK,CAAC,oBAAoB,CAAC,UAAkB;QACnD,IAAI;YACF,IAAA,wBAAQ,EAAC,mBAAmB,UAAU,EAAE,EAAE;gBACxC,QAAQ,EAAE,MAAM;gBAChB,KAAK,EAAE,MAAM;aACd,CAAC,CAAC;YACH,OAAO,IAAI,CAAC;SACb;QAAC,WAAM;YACN,OAAO,KAAK,CAAC;SACd;IACH,CAAC;IAEO,KAAK,CAAC,mBAAmB;QAC/B,IAAI;YACF,qEAAqE;YACrE,MAAM,OAAO,GAAG,IAAA,wBAAQ,EAAC,uBAAuB,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC;iBACpE,KAAK,CAAC,IAAI,CAAC;iBACX,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;iBAC3B,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAEnC,uCAAuC;YACvC,OAAO,OAAO,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC;SAC7B;QAAC,WAAM;YACN,OAAO,MAAM,CAAC;SACf;IACH,CAAC;IAEO,KAAK,CAAC,eAAe;QAC3B,IAAI;YACF,MAAM,MAAM,GAAG,IAAA,wBAAQ,EAAC,sBAAsB,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;YACtE,OAAO,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;SACzC;QAAC,WAAM;YACN,OAAO,CAAC,CAAC;SACV;IACH,CAAC;IAEO,KAAK,CAAC,iBAAiB;QAC7B,IAAI;YACF,MAAM,MAAM,GAAG,IAAA,wBAAQ,EAAC,sBAAsB,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;YACtE,OAAO,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;SACzC;QAAC,WAAM;YACN,OAAO,CAAC,CAAC;SACV;IACH,CAAC;IAEO,KAAK,CAAC,eAAe;QAC3B,MAAM,YAAY,GAAG;YACnB,iCAAiC;YACjC,gCAAgC;YAChC,4BAA4B;YAC5B,gCAAgC;YAChC,4BAA4B;YAC5B,yCAAyC;YACzC,8BAA8B;YAC9B,kCAAkC;YAClC,8BAA8B;SAC/B,CAAC;QAEF,KAAK,MAAM,IAAI,IAAI,YAAY,EAAE;YAC/B,IAAI,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;gBACvB,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;gBACpB,OAAO,CAAC,GAAG,CAAC,6BAA6B,IAAI,EAAE,CAAC,CAAC;aAClD;SACF;QAED,kCAAkC;QAClC,MAAM,mBAAmB,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,uBAAuB,CAAC,CAAC;QACxE,IAAI,EAAE,CAAC,UAAU,CAAC,mBAAmB,CAAC,EAAE;YACtC,EAAE,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC;YACnC,OAAO,CAAC,GAAG,CAAC,iCAAiC,mBAAmB,EAAE,CAAC,CAAC;SACrE;IACH,CAAC;IAEO,KAAK,CAAC,eAAe;QAC3B,IAAI;YACF,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;YACzC,IAAI,YAAY,GAAG,CAAC,CAAC;YAErB,oBAAoB;YACpB,IAAI;gBACF,IAAA,wBAAQ,EAAC,iBAAiB,EAAE;oBAC1B,QAAQ,EAAE,MAAM;oBAChB,KAAK,EAAE,MAAM;iBACd,CAAC,CAAC;gBACH,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC;aAC/B;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,CAAC,IAAI,CAAC,mCAAmC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;aAClE;YAED,2BAA2B;YAC3B,MAAM,iBAAiB,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,uBAAuB,CAAC,CAAC;YACtE,IAAI,EAAE,CAAC,UAAU,CAAC,iBAAiB,CAAC,EAAE;gBACpC,EAAE,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;aAClC;YAED,OAAO,CAAC,GAAG,CAAC,eAAe,YAAY,UAAU,CAAC,CAAC;YACnD,OAAO,YAAY,CAAC;SACrB;QAAC,WAAM;YACN,OAAO,CAAC,CAAC;SACV;IACH,CAAC;IAEO,KAAK,CAAC,2BAA2B;QACvC,gDAAgD;QAChD,MAAM,aAAa,GAAG;YACpB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,wBAAwB,CAAC;YAC5C,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,2BAA2B,CAAC;YAC/C,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC;SACpC,CAAC;QAEF,KAAK,MAAM,YAAY,IAAI,aAAa,EAAE;YACxC,IAAI,EAAE,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE;gBAC/B,IAAI,EAAE,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,WAAW,EAAE,EAAE;oBAC3C,EAAE,CAAC,MAAM,CAAC,YAAY,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;iBAC3D;qBAAM;oBACL,EAAE,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;iBAC7B;gBACD,OAAO,CAAC,GAAG,CAAC,sCAAsC,YAAY,EAAE,CAAC,CAAC;aACnE;SACF;IACH,CAAC;IAEO,KAAK,CAAC,2BAA2B;QACvC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,eAAe,CAAC,CAAC;QAEnE,gDAAgD;QAChD,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACtD,MAAM,cAAc,GAAG,CAAC,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC;QAE/D,MAAM,CAAC,cAAc,GAAG,cAAc,CAAC;QACvC,MAAM,CAAC,gBAAgB,GAAG,CAAC,cAAc,CAAC;QAE1C,IAAI,CAAC,cAAc,EAAE;YACnB,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;SAC5D;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,KAAK,CAAC,iBAAiB;QAC7B,MAAM,YAAY,GAAG;YACnB,iCAAiC;YACjC,gCAAgC;YAChC,4BAA4B;YAC5B,gCAAgC;SACjC,CAAC;QAEF,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;IACzD,CAAC;IAEO,2BAA2B,CACjC,cAAsB;QAEtB,OAAO;YACL,OAAO,EAAE,IAAI;YACb,MAAM,EAAE,EAAE;YACV,QAAQ,EAAE,EAAE;YACZ,cAAc;YACd,aAAa,EAAE,CAAC;YAChB,cAAc,EAAE,KAAK;YACrB,gBAAgB,EAAE,KAAK;YACvB,eAAe,EAAE,KAAK;YACtB,cAAc,EAAE,KAAK;SACtB,CAAC;IACJ,CAAC;IAEO,gBAAgB;QACtB,IAAI;YACF,OAAO,IAAA,wBAAQ,EAAC,2BAA2B,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;SAC3E;QAAC,WAAM;YACN,OAAO,MAAM,CAAC;SACf;IACH,CAAC;IAEO,gBAAgB,CAAC,KAAkB;QACzC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAEhC,mDAAmD;QACnD,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,GAAG,EAAE;YACpC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;SACvD;IACH,CAAC;CACF;AAjtBD,0DAitBC","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/EmergencyRecoverySystem.ts"],"sourcesContent":["/**\n * Emergency Recovery System\n * Perfect Codebase Campaign - Task 6.3 Implementation\n *\n * Provides comprehensive emergency recovery procedures with multiple recovery options,\n * nuclear option reset with complete metrics clearing, and recovery validation system.\n */\n\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { SafetyProtocol } from './SafetyProtocol';\nimport {\n  SafetySettings,\n  ValidationResult,\n  SafetyEvent,\n  SafetyEventType,\n  SafetyEventSeverity,\n  CorruptionReport,\n  RecoveryAction,\n  GitStash,\n  ProgressMetrics,\n} from '../../types/campaign';\n\nexport interface EmergencyRecoveryOptions {\n  preserveStashes?: boolean;\n  preserveMetrics?: boolean;\n  validateAfterRecovery?: boolean;\n  createBackupBeforeReset?: boolean;\n  resetToCommit?: string;\n}\n\nexport interface RecoveryValidationResult extends ValidationResult {\n  recoveryMethod: string;\n  filesRestored: number;\n  metricsCleared: boolean;\n  stashesPreserved: boolean;\n  buildValidation: boolean;\n  testValidation: boolean;\n}\n\nexport interface NuclearResetResult {\n  success: boolean;\n  backupCreated?: string;\n  filesReset: number;\n  metricsCleared: boolean;\n  stashesCleared: number;\n  validationResult: RecoveryValidationResult;\n  errors: string[];\n}\n\nexport class EmergencyRecoverySystem extends SafetyProtocol {\n  private recoveryEvents: SafetyEvent[] = [];\n  private backupDirectory: string;\n\n  constructor(settings: SafetySettings) {\n    super(settings);\n    this.backupDirectory = path.join('.kiro', 'emergency-backups');\n    this.ensureBackupDirectory();\n  }\n\n  /**\n   * Emergency rollback with multiple recovery options\n   * Requirements: 5.7, 5.8\n   */\n  async emergencyRollbackWithOptions(\n    options: EmergencyRecoveryOptions = {}\n  ): Promise<RecoveryValidationResult> {\n    console.log('🚨 Initiating emergency rollback with advanced options...');\n\n    try {\n      // Create backup before recovery if requested\n      let backupPath: string | undefined;\n      if (options.createBackupBeforeReset) {\n        backupPath = await this.createEmergencyBackup('pre-rollback');\n      }\n\n      // Perform the rollback\n      await this.emergencyRollback();\n\n      // Validate recovery if requested\n      const validationResult = options.validateAfterRecovery\n        ? await this.validateRecoverySuccess('emergency-rollback')\n        : this.createBasicValidationResult('emergency-rollback');\n\n      this.addRecoveryEvent({\n        type: SafetyEventType.EMERGENCY_RECOVERY,\n        timestamp: new Date(),\n        description: `Emergency rollback completed with options: ${JSON.stringify(options)}`,\n        severity: SafetyEventSeverity.WARNING,\n        action: 'EMERGENCY_ROLLBACK_WITH_OPTIONS',\n      });\n\n      console.log('✅ Emergency rollback completed successfully');\n      return validationResult;\n    } catch (error) {\n      const errorMessage = `Emergency rollback failed: ${error.message}`;\n      console.error(`❌ ${errorMessage}`);\n\n      this.addRecoveryEvent({\n        type: SafetyEventType.EMERGENCY_RECOVERY,\n        timestamp: new Date(),\n        description: errorMessage,\n        severity: SafetyEventSeverity.CRITICAL,\n        action: 'EMERGENCY_ROLLBACK_FAILED',\n      });\n\n      throw new Error(errorMessage);\n    }\n  }\n\n  /**\n   * Rollback to specific commit with validation\n   * Requirements: 5.7, 5.8\n   */\n  async rollbackToCommit(\n    commitHash: string,\n    options: EmergencyRecoveryOptions = {}\n  ): Promise<RecoveryValidationResult> {\n    console.log(`🔄 Rolling back to commit: ${commitHash}`);\n\n    try {\n      // Validate commit exists\n      const commitExists = await this.validateCommitExists(commitHash);\n      if (!commitExists) {\n        throw new Error(`Commit ${commitHash} does not exist`);\n      }\n\n      // Create backup if requested\n      if (options.createBackupBeforeReset) {\n        await this.createEmergencyBackup(\n          `pre-commit-rollback-${commitHash.substring(0, 8)}`\n        );\n      }\n\n      // Perform hard reset to commit\n      execSync(`git reset --hard ${commitHash}`, {\n        encoding: 'utf8',\n        stdio: 'pipe',\n      });\n\n      // Clean untracked files\n      execSync('git clean -fd', {\n        encoding: 'utf8',\n        stdio: 'pipe',\n      });\n\n      const validationResult =\n        await this.validateRecoverySuccess('commit-rollback');\n\n      this.addRecoveryEvent({\n        type: SafetyEventType.EMERGENCY_RECOVERY,\n        timestamp: new Date(),\n        description: `Rollback to commit ${commitHash} completed`,\n        severity: SafetyEventSeverity.WARNING,\n        action: 'COMMIT_ROLLBACK',\n      });\n\n      console.log(`✅ Successfully rolled back to commit: ${commitHash}`);\n      return validationResult;\n    } catch (error) {\n      const errorMessage = `Commit rollback failed: ${error.message}`;\n      console.error(`❌ ${errorMessage}`);\n\n      this.addRecoveryEvent({\n        type: SafetyEventType.EMERGENCY_RECOVERY,\n        timestamp: new Date(),\n        description: errorMessage,\n        severity: SafetyEventSeverity.CRITICAL,\n        action: 'COMMIT_ROLLBACK_FAILED',\n      });\n\n      throw new Error(errorMessage);\n    }\n  }\n\n  /**\n   * Nuclear option reset with complete metrics clearing\n   * Requirements: 5.7, 5.8\n   */\n  async nuclearReset(\n    options: EmergencyRecoveryOptions = {}\n  ): Promise<NuclearResetResult> {\n    console.log('☢️ Initiating NUCLEAR RESET - This will reset everything!');\n    console.log('⚠️ This operation will:');\n    console.log('   - Reset all files to clean state');\n    console.log('   - Clear all campaign metrics');\n    console.log('   - Remove all stashes (unless preserved)');\n    console.log('   - Reset git repository to clean state');\n\n    try {\n      const result: NuclearResetResult = {\n        success: false,\n        filesReset: 0,\n        metricsCleared: false,\n        stashesCleared: 0,\n        validationResult: this.createBasicValidationResult('nuclear-reset'),\n        errors: [],\n      };\n\n      // Create comprehensive backup before nuclear reset\n      if (options.createBackupBeforeReset !== false) {\n        // Default to true for nuclear reset\n        result.backupCreated =\n          await this.createEmergencyBackup('pre-nuclear-reset');\n        console.log(`📦 Emergency backup created: ${result.backupCreated}`);\n      }\n\n      // Step 1: Reset git repository to clean state\n      console.log('🔄 Step 1: Resetting git repository...');\n      const resetCommit =\n        options.resetToCommit || (await this.findLastCleanCommit());\n\n      execSync(`git reset --hard ${resetCommit}`, {\n        encoding: 'utf8',\n        stdio: 'pipe',\n      });\n\n      execSync('git clean -fd', {\n        encoding: 'utf8',\n        stdio: 'pipe',\n      });\n\n      result.filesReset = await this.countResetFiles();\n\n      // Step 2: Clear all campaign metrics\n      console.log('🧹 Step 2: Clearing campaign metrics...');\n      if (!options.preserveMetrics) {\n        await this.clearAllMetrics();\n        result.metricsCleared = true;\n      }\n\n      // Step 3: Clear stashes (unless preserved)\n      console.log('🗑️ Step 3: Managing stashes...');\n      if (!options.preserveStashes) {\n        result.stashesCleared = await this.clearAllStashes();\n      }\n\n      // Step 4: Reset campaign infrastructure\n      console.log('🏗️ Step 4: Resetting campaign infrastructure...');\n      await this.resetCampaignInfrastructure();\n\n      // Step 5: Validate nuclear reset success\n      console.log('✅ Step 5: Validating nuclear reset...');\n      if (options.validateAfterRecovery !== false) {\n        // Default to true for nuclear reset\n        result.validationResult = await this.validateNuclearResetSuccess();\n      }\n\n      result.success = true;\n\n      this.addRecoveryEvent({\n        type: SafetyEventType.EMERGENCY_RECOVERY,\n        timestamp: new Date(),\n        description: `Nuclear reset completed successfully`,\n        severity: SafetyEventSeverity.CRITICAL,\n        action: 'NUCLEAR_RESET_SUCCESS',\n      });\n\n      console.log('☢️ NUCLEAR RESET COMPLETED SUCCESSFULLY');\n      console.log(`   Files reset: ${result.filesReset}`);\n      console.log(`   Metrics cleared: ${result.metricsCleared}`);\n      console.log(`   Stashes cleared: ${result.stashesCleared}`);\n\n      return result;\n    } catch (error) {\n      const errorMessage = `Nuclear reset failed: ${error.message}`;\n      console.error(`❌ ${errorMessage}`);\n\n      this.addRecoveryEvent({\n        type: SafetyEventType.EMERGENCY_RECOVERY,\n        timestamp: new Date(),\n        description: errorMessage,\n        severity: SafetyEventSeverity.CRITICAL,\n        action: 'NUCLEAR_RESET_FAILED',\n      });\n\n      return {\n        success: false,\n        filesReset: 0,\n        metricsCleared: false,\n        stashesCleared: 0,\n        validationResult: this.createBasicValidationResult('nuclear-reset'),\n        errors: [errorMessage],\n      };\n    }\n  }\n\n  /**\n   * Selective recovery - restore specific files or directories\n   * Requirements: 5.7, 5.8\n   */\n  async selectiveRecovery(\n    targets: string[],\n    fromStash?: string\n  ): Promise<RecoveryValidationResult> {\n    console.log(\n      `🎯 Initiating selective recovery for ${targets.length} targets...`\n    );\n\n    try {\n      // If no stash specified, use the most recent one\n      const stashToUse = fromStash || (await this.listStashes())[0]?.id;\n      if (!stashToUse) {\n        throw new Error('No stashes available for selective recovery');\n      }\n\n      // Create temporary branch for selective recovery\n      const tempBranch = `temp-recovery-${Date.now()}`;\n      execSync(`git checkout -b ${tempBranch}`, {\n        encoding: 'utf8',\n        stdio: 'pipe',\n      });\n\n      try {\n        // Apply stash to temporary branch\n        await this.applyStash(stashToUse, false);\n\n        // Selectively checkout files from stash\n        for (const target of targets) {\n          if (fs.existsSync(target)) {\n            execSync(`git checkout HEAD -- \"${target}\"`, {\n              encoding: 'utf8',\n              stdio: 'pipe',\n            });\n            console.log(`✅ Restored: ${target}`);\n          } else {\n            console.warn(`⚠️ Target not found: ${target}`);\n          }\n        }\n\n        // Return to original branch\n        const originalBranch = this.getCurrentBranch();\n        execSync(`git checkout ${originalBranch}`, {\n          encoding: 'utf8',\n          stdio: 'pipe',\n        });\n\n        // Delete temporary branch\n        execSync(`git branch -D ${tempBranch}`, {\n          encoding: 'utf8',\n          stdio: 'pipe',\n        });\n      } catch (error) {\n        // Cleanup: return to original branch and delete temp branch\n        try {\n          const originalBranch = this.getCurrentBranch();\n          if (originalBranch !== tempBranch) {\n            execSync(`git checkout ${originalBranch}`, {\n              encoding: 'utf8',\n              stdio: 'pipe',\n            });\n          }\n          execSync(`git branch -D ${tempBranch}`, {\n            encoding: 'utf8',\n            stdio: 'pipe',\n          });\n        } catch (cleanupError) {\n          console.warn(`⚠️ Cleanup warning: ${cleanupError.message}`);\n        }\n        throw error;\n      }\n\n      const validationResult =\n        await this.validateRecoverySuccess('selective-recovery');\n\n      this.addRecoveryEvent({\n        type: SafetyEventType.EMERGENCY_RECOVERY,\n        timestamp: new Date(),\n        description: `Selective recovery completed for ${targets.length} targets`,\n        severity: SafetyEventSeverity.INFO,\n        action: 'SELECTIVE_RECOVERY',\n      });\n\n      console.log(\n        `✅ Selective recovery completed for ${targets.length} targets`\n      );\n      return validationResult;\n    } catch (error) {\n      const errorMessage = `Selective recovery failed: ${error.message}`;\n      console.error(`❌ ${errorMessage}`);\n\n      this.addRecoveryEvent({\n        type: SafetyEventType.EMERGENCY_RECOVERY,\n        timestamp: new Date(),\n        description: errorMessage,\n        severity: SafetyEventSeverity.ERROR,\n        action: 'SELECTIVE_RECOVERY_FAILED',\n      });\n\n      throw new Error(errorMessage);\n    }\n  }\n\n  /**\n   * Recovery validation system ensuring successful restoration\n   * Requirements: 5.7, 5.8\n   */\n  async validateRecoverySuccess(\n    recoveryMethod: string\n  ): Promise<RecoveryValidationResult> {\n    console.log(`🔍 Validating recovery success for method: ${recoveryMethod}`);\n\n    const result: RecoveryValidationResult = {\n      success: true,\n      errors: [],\n      warnings: [],\n      recoveryMethod,\n      filesRestored: 0,\n      metricsCleared: false,\n      stashesPreserved: false,\n      buildValidation: false,\n      testValidation: false,\n    };\n\n    try {\n      // 1. Validate git repository state\n      console.log('🔍 Validating git repository state...');\n      const gitValidation = await this.validateGitState();\n      if (!gitValidation.success) {\n        result.errors.push(...gitValidation.errors);\n        result.success = false;\n      }\n      result.warnings.push(...gitValidation.warnings);\n\n      // 2. Count restored files\n      result.filesRestored = await this.countTrackedFiles();\n\n      // 3. Validate build system\n      console.log('🔍 Validating build system...');\n      try {\n        execSync('yarn build', {\n          encoding: 'utf8',\n          stdio: 'pipe',\n          timeout: 30000, // 30 second timeout\n        });\n        result.buildValidation = true;\n        console.log('✅ Build validation passed');\n      } catch (buildError) {\n        result.errors.push(`Build validation failed: ${buildError.message}`);\n        result.buildValidation = false;\n        console.error('❌ Build validation failed');\n      }\n\n      // 4. Validate test system\n      console.log('🔍 Validating test system...');\n      try {\n        execSync('yarn test --run --reporter=basic', {\n          encoding: 'utf8',\n          stdio: 'pipe',\n          timeout: 60000, // 60 second timeout\n        });\n        result.testValidation = true;\n        console.log('✅ Test validation passed');\n      } catch (testError) {\n        result.warnings.push(`Test validation warning: ${testError.message}`);\n        result.testValidation = false;\n        console.warn('⚠️ Test validation had issues');\n      }\n\n      // 5. Check corruption after recovery\n      console.log('🔍 Checking for corruption after recovery...');\n      const corruptionReport = await this.detectCorruption([\n        'src/**/*.ts',\n        'src/**/*.tsx',\n      ]);\n      if (corruptionReport.detectedFiles.length > 0) {\n        result.errors.push(\n          `Corruption detected after recovery: ${corruptionReport.detectedFiles.length} files`\n        );\n        result.success = false;\n      }\n\n      // 6. Validate metrics state\n      result.metricsCleared = await this.areMetricsCleared();\n      result.stashesPreserved = (await this.listStashes()).length > 0;\n\n      // Final success determination\n      result.success = result.errors.length === 0 && result.buildValidation;\n\n      this.addRecoveryEvent({\n        type: SafetyEventType.EMERGENCY_RECOVERY,\n        timestamp: new Date(),\n        description: `Recovery validation completed: ${result.success ? 'SUCCESS' : 'FAILED'}`,\n        severity: result.success\n          ? SafetyEventSeverity.INFO\n          : SafetyEventSeverity.ERROR,\n        action: 'RECOVERY_VALIDATION',\n      });\n\n      console.log(\n        `${result.success ? '✅' : '❌'} Recovery validation ${result.success ? 'passed' : 'failed'}`\n      );\n      return result;\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Recovery validation error: ${error.message}`);\n\n      console.error(`❌ Recovery validation error: ${error.message}`);\n      return result;\n    }\n  }\n\n  /**\n   * Get recovery statistics and history\n   */\n  getRecoveryStatistics(): {\n    totalRecoveries: number;\n    successfulRecoveries: number;\n    failedRecoveries: number;\n    nuclearResets: number;\n    lastRecovery?: Date;\n    recoveryMethods: Record<string, number>;\n  } {\n    const recoveryEvents = this.recoveryEvents.filter(\n      e =>\n        e.action.includes('RECOVERY') ||\n        e.action.includes('ROLLBACK') ||\n        e.action.includes('RESET')\n    );\n\n    const successfulRecoveries = recoveryEvents.filter(\n      e =>\n        e.action.includes('SUCCESS') || e.severity === SafetyEventSeverity.INFO\n    ).length;\n\n    const failedRecoveries = recoveryEvents.filter(\n      e =>\n        e.action.includes('FAILED') ||\n        e.severity === SafetyEventSeverity.CRITICAL\n    ).length;\n\n    const nuclearResets = recoveryEvents.filter(e =>\n      e.action.includes('NUCLEAR_RESET')\n    ).length;\n\n    const recoveryMethods: Record<string, number> = {};\n    for (const event of recoveryEvents) {\n      const method = event.action.split('_')[0];\n      recoveryMethods[method] = (recoveryMethods[method] || 0) + 1;\n    }\n\n    const lastRecovery =\n      recoveryEvents.length > 0\n        ? recoveryEvents[recoveryEvents.length - 1].timestamp\n        : undefined;\n\n    return {\n      totalRecoveries: recoveryEvents.length,\n      successfulRecoveries,\n      failedRecoveries,\n      nuclearResets,\n      lastRecovery,\n      recoveryMethods,\n    };\n  }\n\n  /**\n   * Get all recovery events for reporting\n   */\n  getRecoveryEvents(): SafetyEvent[] {\n    return [...this.recoveryEvents];\n  }\n\n  // Private helper methods\n\n  private ensureBackupDirectory(): void {\n    if (!fs.existsSync(this.backupDirectory)) {\n      fs.mkdirSync(this.backupDirectory, { recursive: true });\n    }\n  }\n\n  private async createEmergencyBackup(description: string): Promise<string> {\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const backupName = `emergency-backup-${description}-${timestamp}`;\n    const backupPath = path.join(this.backupDirectory, backupName);\n\n    // Create backup using git archive\n    execSync(\n      `git archive --format=tar.gz --output=\"${backupPath}.tar.gz\" HEAD`,\n      {\n        encoding: 'utf8',\n        stdio: 'pipe',\n      }\n    );\n\n    console.log(`📦 Emergency backup created: ${backupPath}.tar.gz`);\n    return `${backupPath}.tar.gz`;\n  }\n\n  private async validateCommitExists(commitHash: string): Promise<boolean> {\n    try {\n      execSync(`git cat-file -e ${commitHash}`, {\n        encoding: 'utf8',\n        stdio: 'pipe',\n      });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  private async findLastCleanCommit(): Promise<string> {\n    try {\n      // Find the last commit that doesn't contain campaign-related changes\n      const commits = execSync('git log --oneline -20', { encoding: 'utf8' })\n        .split('\\n')\n        .filter(line => line.trim())\n        .map(line => line.split(' ')[0]);\n\n      // Return the most recent commit (HEAD)\n      return commits[0] || 'HEAD';\n    } catch {\n      return 'HEAD';\n    }\n  }\n\n  private async countResetFiles(): Promise<number> {\n    try {\n      const output = execSync('git ls-files | wc -l', { encoding: 'utf8' });\n      return parseInt(output.trim(), 10) || 0;\n    } catch {\n      return 0;\n    }\n  }\n\n  private async countTrackedFiles(): Promise<number> {\n    try {\n      const output = execSync('git ls-files | wc -l', { encoding: 'utf8' });\n      return parseInt(output.trim(), 10) || 0;\n    } catch {\n      return 0;\n    }\n  }\n\n  private async clearAllMetrics(): Promise<void> {\n    const metricsFiles = [\n      '.typescript-errors-metrics.json',\n      '.linting-analysis-metrics.json',\n      '.explicit-any-metrics.json',\n      '.unused-variables-metrics.json',\n      '.api-response-metrics.json',\n      '.enhanced-unused-variables-metrics.json',\n      '.import-cleaner-metrics.json',\n      '.unicode-validation-metrics.json',\n      '.unified-safety-metrics.json',\n    ];\n\n    for (const file of metricsFiles) {\n      if (fs.existsSync(file)) {\n        fs.unlinkSync(file);\n        console.log(`🗑️ Cleared metrics file: ${file}`);\n      }\n    }\n\n    // Clear campaign-specific metrics\n    const campaignMetricsPath = path.join('.kiro', 'campaign-metrics.json');\n    if (fs.existsSync(campaignMetricsPath)) {\n      fs.unlinkSync(campaignMetricsPath);\n      console.log(`🗑️ Cleared campaign metrics: ${campaignMetricsPath}`);\n    }\n  }\n\n  private async clearAllStashes(): Promise<number> {\n    try {\n      const stashes = await this.listStashes();\n      let clearedCount = 0;\n\n      // Clear git stashes\n      try {\n        execSync('git stash clear', {\n          encoding: 'utf8',\n          stdio: 'pipe',\n        });\n        clearedCount = stashes.length;\n      } catch (error) {\n        console.warn(`⚠️ Could not clear git stashes: ${error.message}`);\n      }\n\n      // Clear our stash tracking\n      const stashTrackingPath = path.join('.kiro', 'campaign-stashes.json');\n      if (fs.existsSync(stashTrackingPath)) {\n        fs.unlinkSync(stashTrackingPath);\n      }\n\n      console.log(`🗑️ Cleared ${clearedCount} stashes`);\n      return clearedCount;\n    } catch {\n      return 0;\n    }\n  }\n\n  private async resetCampaignInfrastructure(): Promise<void> {\n    // Reset campaign-specific directories and files\n    const campaignPaths = [\n      path.join('.kiro', 'campaign-progress.json'),\n      path.join('.kiro', 'campaign-checkpoints.json'),\n      path.join('.kiro', 'phase-reports'),\n    ];\n\n    for (const campaignPath of campaignPaths) {\n      if (fs.existsSync(campaignPath)) {\n        if (fs.statSync(campaignPath).isDirectory()) {\n          fs.rmSync(campaignPath, { recursive: true, force: true });\n        } else {\n          fs.unlinkSync(campaignPath);\n        }\n        console.log(`🗑️ Reset campaign infrastructure: ${campaignPath}`);\n      }\n    }\n  }\n\n  private async validateNuclearResetSuccess(): Promise<RecoveryValidationResult> {\n    const result = await this.validateRecoverySuccess('nuclear-reset');\n\n    // Additional nuclear reset specific validations\n    const metricsCleared = await this.areMetricsCleared();\n    const stashesCleared = (await this.listStashes()).length === 0;\n\n    result.metricsCleared = metricsCleared;\n    result.stashesPreserved = !stashesCleared;\n\n    if (!metricsCleared) {\n      result.warnings.push('Some metrics files may still exist');\n    }\n\n    return result;\n  }\n\n  private async areMetricsCleared(): Promise<boolean> {\n    const metricsFiles = [\n      '.typescript-errors-metrics.json',\n      '.linting-analysis-metrics.json',\n      '.explicit-any-metrics.json',\n      '.unused-variables-metrics.json',\n    ];\n\n    return !metricsFiles.some(file => fs.existsSync(file));\n  }\n\n  private createBasicValidationResult(\n    recoveryMethod: string\n  ): RecoveryValidationResult {\n    return {\n      success: true,\n      errors: [],\n      warnings: [],\n      recoveryMethod,\n      filesRestored: 0,\n      metricsCleared: false,\n      stashesPreserved: false,\n      buildValidation: false,\n      testValidation: false,\n    };\n  }\n\n  private getCurrentBranch(): string {\n    try {\n      return execSync('git branch --show-current', { encoding: 'utf8' }).trim();\n    } catch {\n      return 'main';\n    }\n  }\n\n  private addRecoveryEvent(event: SafetyEvent): void {\n    this.recoveryEvents.push(event);\n\n    // Keep only recent events to prevent memory issues\n    if (this.recoveryEvents.length > 500) {\n      this.recoveryEvents = this.recoveryEvents.slice(-250);\n    }\n  }\n}\n"],"version":3}