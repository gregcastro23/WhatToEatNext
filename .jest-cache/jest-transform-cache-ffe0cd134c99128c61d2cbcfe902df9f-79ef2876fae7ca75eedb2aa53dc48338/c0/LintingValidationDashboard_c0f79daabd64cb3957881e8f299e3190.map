{"file":"/Users/GregCastro/Desktop/WhatToEatNext/.consolidation-backups-2025-08-23T17-54-10-092Z/src/services/linting/LintingValidationDashboard.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/.consolidation-backups-2025-08-23T17-54-10-092Z/src/services/linting/LintingValidationDashboard.ts"],"sourcesContent":["/**\n * Comprehensive Linting Validation and Monitoring Dashboard\n *\n * This service provides real-time monitoring, validation, and alerting\n * for the enhanced ESLint configuration with domain-specific tracking.\n */\n\nimport { execSync } from 'child_process';\nimport { writeFileSync, readFileSync, existsSync } from 'fs';\nimport { join } from 'path';\n\nexport interface LintingMetrics {\n  timestamp: Date;\n  totalIssues: number;\n  errors: number;\n  warnings: number;\n  parserErrors: number;\n  explicitAnyErrors: number;\n  importOrderIssues: number;\n  unusedVariables: number;\n  reactHooksIssues: number;\n  consoleStatements: number;\n  domainSpecificIssues: {\n    astrologicalCalculations: number;\n    campaignSystem: number;\n    testFiles: number;\n  };\n  performanceMetrics: {\n    lintingDuration: number;\n    cacheHitRate: number;\n    memoryUsage: number;\n    filesProcessed: number;\n  };\n  qualityScore: number; // 0-100\n  regressionDetected: boolean;\n}\n\nexport interface AlertThreshold {\n  metric: keyof LintingMetrics | string;\n  threshold: number;\n  severity: 'info' | 'warning' | 'error' | 'critical';\n  message: string;\n}\n\nexport interface ValidationResult {\n  passed: boolean;\n  metrics: LintingMetrics;\n  alerts: Alert[];\n  recommendations: string[];\n  regressionAnalysis: RegressionAnalysis;\n}\n\nexport interface Alert {\n  id: string;\n  timestamp: Date;\n  severity: 'info' | 'warning' | 'error' | 'critical';\n  metric: string;\n  currentValue: number;\n  threshold: number;\n  message: string;\n  resolved: boolean;\n}\n\nexport interface RegressionAnalysis {\n  detected: boolean;\n  affectedMetrics: string[];\n  severity: 'minor' | 'moderate' | 'major' | 'critical';\n  recommendations: string[];\n  historicalComparison: {\n    current: number;\n    previous: number;\n    change: number;\n    changePercentage: number;\n  };\n}\n\nexport class LintingValidationDashboard {\n  private readonly metricsHistoryFile = '.kiro/metrics/linting-metrics-history.json';\n  private readonly alertsFile = '.kiro/metrics/linting-alerts.json';\n  private readonly configFile = '.kiro/metrics/linting-dashboard-config.json';\n\n  private readonly defaultThresholds: AlertThreshold[] = [\n    {\n      metric: 'parserErrors',\n      threshold: 0,\n      severity: 'critical',\n      message: 'Parser errors detected - blocking accurate linting analysis',\n    },\n    {\n      metric: 'explicitAnyErrors',\n      threshold: 100,\n      severity: 'error',\n      message: 'Explicit any errors exceed acceptable threshold',\n    },\n    {\n      metric: 'totalIssues',\n      threshold: 2000,\n      severity: 'warning',\n      message: 'Total linting issues exceed warning threshold',\n    },\n    {\n      metric: 'qualityScore',\n      threshold: 80,\n      severity: 'warning',\n      message: 'Code quality score below target',\n    },\n    {\n      metric: 'performanceMetrics.lintingDuration',\n      threshold: 30000,\n      severity: 'warning',\n      message: 'Linting performance degraded - exceeds 30 seconds',\n    },\n  ];\n\n  constructor() {\n    this.ensureDirectoriesExist();\n    this.initializeConfiguration();\n  }\n\n  /**\n   * Run comprehensive linting validation across entire codebase\n   */\n  async runComprehensiveValidation(): Promise<ValidationResult> {\n    console.log('🔍 Starting comprehensive linting validation...');\n\n    const startTime = Date.now();\n    const metrics = await this.collectMetrics();\n    const alerts = this.evaluateAlerts(metrics);\n    const regressionAnalysis = await this.analyzeRegression(metrics);\n    const recommendations = this.generateRecommendations(metrics, alerts);\n\n    const result: ValidationResult = {\n      passed: alerts.filter(a => a.severity === 'error' || a.severity === 'critical').length === 0,\n      metrics,\n      alerts,\n      recommendations,\n      regressionAnalysis,\n    };\n\n    // Store metrics and alerts\n    await this.storeMetrics(metrics);\n    await this.storeAlerts(alerts);\n\n    // Generate dashboard report\n    await this.generateDashboardReport(result);\n\n    console.log(`✅ Validation completed in ${Date.now() - startTime}ms`);\n    return result;\n  }\n\n  /**\n   * Collect comprehensive linting metrics\n   */\n  private async collectMetrics(): Promise<LintingMetrics> {\n    const startTime = Date.now();\n\n    try {\n      // Run ESLint with enhanced configuration\n      const lintOutput = execSync('yarn lint --format json --max-warnings 10000', {\n        encoding: 'utf8',\n        stdio: 'pipe',\n        timeout: 60000, // 60 second timeout\n      });\n\n      const lintResults = JSON.parse(lintOutput);\n      const metrics = this.parseLintResults(lintResults);\n\n      // Add performance metrics\n      metrics.performanceMetrics = {\n        lintingDuration: Date.now() - startTime,\n        cacheHitRate: await this.calculateCacheHitRate(),\n        memoryUsage: process.memoryUsage().heapUsed / 1024 / 1024, // MB\n        filesProcessed: lintResults.length,\n      };\n\n      // Calculate quality score\n      metrics.qualityScore = this.calculateQualityScore(metrics);\n\n      return metrics;\n    } catch (error) {\n      console.error('Error collecting linting metrics:', error);\n\n      // Return fallback metrics\n      return {\n        timestamp: new Date(),\n        totalIssues: -1,\n        errors: -1,\n        warnings: -1,\n        parserErrors: -1,\n        explicitAnyErrors: -1,\n        importOrderIssues: -1,\n        unusedVariables: -1,\n        reactHooksIssues: -1,\n        consoleStatements: -1,\n        domainSpecificIssues: {\n          astrologicalCalculations: -1,\n          campaignSystem: -1,\n          testFiles: -1,\n        },\n        performanceMetrics: {\n          lintingDuration: Date.now() - startTime,\n          cacheHitRate: 0,\n          memoryUsage: process.memoryUsage().heapUsed / 1024 / 1024,\n          filesProcessed: 0,\n        },\n        qualityScore: 0,\n        regressionDetected: false,\n      };\n    }\n  }\n\n  /**\n   * Parse ESLint results into structured metrics\n   */\n  private parseLintResults(lintResults: unknown[]): LintingMetrics {\n    let totalIssues = 0;\n    let errors = 0;\n    let warnings = 0;\n    let parserErrors = 0;\n    let explicitAnyErrors = 0;\n    let importOrderIssues = 0;\n    let unusedVariables = 0;\n    let reactHooksIssues = 0;\n    let consoleStatements = 0;\n\n    const domainSpecificIssues = {\n      astrologicalCalculations: 0,\n      campaignSystem: 0,\n      testFiles: 0,\n    };\n\n    for (const result of lintResults) {\n      const filePath = result.filePath;\n\n      for (const message of result.messages) {\n        totalIssues++;\n\n        if (message.severity === 2) {\n          errors++;\n        } else {\n          warnings++;\n        }\n\n        // Categorize by rule type\n        const ruleId = message.ruleId;\n\n        if (message.fatal || ruleId === 'parseForESLint') {\n          parserErrors++;\n        } else if (ruleId === '@typescript-eslint/no-explicit-any') {\n          explicitAnyErrors++;\n        } else if (ruleId === 'import/order') {\n          importOrderIssues++;\n        } else if (ruleId === '@typescript-eslint/no-unused-vars') {\n          unusedVariables++;\n        } else if (ruleId?.startsWith('react-hooks/')) {\n          reactHooksIssues++;\n        } else if (ruleId === 'no-console') {\n          consoleStatements++;\n        }\n\n        // Domain-specific categorization\n        if (this.isAstrologicalFile(filePath)) {\n          domainSpecificIssues.astrologicalCalculations++;\n        } else if (this.isCampaignFile(filePath)) {\n          domainSpecificIssues.campaignSystem++;\n        } else if (this.isTestFile(filePath)) {\n          domainSpecificIssues.testFiles++;\n        }\n      }\n    }\n\n    return {\n      timestamp: new Date(),\n      totalIssues,\n      errors,\n      warnings,\n      parserErrors,\n      explicitAnyErrors,\n      importOrderIssues,\n      unusedVariables,\n      reactHooksIssues,\n      consoleStatements,\n      domainSpecificIssues,\n      performanceMetrics: {\n        lintingDuration: 0, // Will be set by caller\n        cacheHitRate: 0,\n        memoryUsage: 0,\n        filesProcessed: lintResults.length,\n      },\n      qualityScore: 0, // Will be calculated\n      regressionDetected: false,\n    };\n  }\n\n  /**\n   * Calculate overall quality score (0-100)\n   */\n  private calculateQualityScore(metrics: LintingMetrics): number {\n    if (metrics.totalIssues === -1) return 0; // Error state\n\n    // Base score starts at 100\n    let score = 100;\n\n    // Deduct points for different issue types\n    score -= Math.min(50, metrics.parserErrors * 10); // Parser errors are critical\n    score -= Math.min(30, metrics.explicitAnyErrors * 0.1); // Explicit any errors\n    score -= Math.min(20, metrics.errors * 0.5); // General errors\n    score -= Math.min(15, metrics.warnings * 0.01); // Warnings (less impact)\n\n    // Performance penalty\n    if (metrics.performanceMetrics.lintingDuration > 30000) {\n      score -= 10; // Performance penalty\n    }\n\n    // Bonus for zero critical issues\n    if (metrics.parserErrors === 0 && metrics.explicitAnyErrors < 10) {\n      score += 5;\n    }\n\n    return Math.max(0, Math.min(100, Math.round(score)));\n  }\n\n  /**\n   * Evaluate alerts based on current metrics\n   */\n  private evaluateAlerts(metrics: LintingMetrics): Alert[] {\n    const alerts: Alert[] = [];\n    const thresholds = this.loadThresholds();\n\n    for (const threshold of thresholds) {\n      const currentValue = this.getMetricValue(metrics, threshold.metric);\n\n      if (this.shouldTriggerAlert(currentValue, threshold)) {\n        alerts.push({\n          id: `${threshold.metric}-${Date.now()}`,\n          timestamp: new Date(),\n          severity: threshold.severity,\n          metric: threshold.metric,\n          currentValue,\n          threshold: threshold.threshold,\n          message: threshold.message,\n          resolved: false,\n        });\n      }\n    }\n\n    return alerts;\n  }\n\n  /**\n   * Analyze regression compared to historical data\n   */\n  private async analyzeRegression(currentMetrics: LintingMetrics): Promise<RegressionAnalysis> {\n    const history = this.loadMetricsHistory();\n\n    if (history.length < 2) {\n      return {\n        detected: false,\n        affectedMetrics: [],\n        severity: 'minor',\n        recommendations: ['Insufficient historical data for regression analysis'],\n        historicalComparison: {\n          current: currentMetrics.totalIssues,\n          previous: 0,\n          change: 0,\n          changePercentage: 0,\n        },\n      };\n    }\n\n    const previousMetrics = history[history.length - 2];\n    const affectedMetrics: string[] = [];\n\n    // Check for regressions in key metrics\n    const keyMetrics = [\n      'totalIssues',\n      'errors',\n      'parserErrors',\n      'explicitAnyErrors',\n      'qualityScore',\n    ];\n\n    for (const metric of keyMetrics) {\n      const current = this.getMetricValue(currentMetrics, metric);\n      const previous = this.getMetricValue(previousMetrics, metric);\n\n      // Detect regression (increase in issues or decrease in quality score)\n      const isRegression =\n        metric === 'qualityScore'\n          ? current < previous - 5 // Quality score decreased by more than 5 points\n          : current > previous * 1.1; // Other metrics increased by more than 10%\n\n      if (isRegression) {\n        affectedMetrics.push(metric);\n      }\n    }\n\n    const severity = this.calculateRegressionSeverity(\n      affectedMetrics,\n      currentMetrics,\n      previousMetrics,\n    );\n\n    return {\n      detected: affectedMetrics.length > 0,\n      affectedMetrics,\n      severity,\n      recommendations: this.generateRegressionRecommendations(affectedMetrics),\n      historicalComparison: {\n        current: currentMetrics.totalIssues,\n        previous: previousMetrics.totalIssues,\n        change: currentMetrics.totalIssues - previousMetrics.totalIssues,\n        changePercentage:\n          previousMetrics.totalIssues > 0\n            ? ((currentMetrics.totalIssues - previousMetrics.totalIssues) /\n                previousMetrics.totalIssues) *\n              100\n            : 0,\n      },\n    };\n  }\n\n  /**\n   * Generate recommendations based on metrics and alerts\n   */\n  private generateRecommendations(metrics: LintingMetrics, alerts: Alert[]): string[] {\n    const recommendations: string[] = [];\n\n    // Parser error recommendations\n    if (metrics.parserErrors > 0) {\n      recommendations.push(\n        '🚨 URGENT: Fix parser errors immediately - they block accurate linting analysis',\n        'Check src/utils/recommendationEngine.ts and other files with syntax errors',\n        'Run `yarn tsc --noEmit` to identify TypeScript compilation issues',\n      );\n    }\n\n    // Explicit any recommendations\n    if (metrics.explicitAnyErrors > 100) {\n      recommendations.push(\n        '⚡ HIGH PRIORITY: Reduce explicit any types using systematic type inference',\n        'Focus on React components, service layers, and utility functions first',\n        'Use domain-specific exceptions for astrological calculations where needed',\n      );\n    }\n\n    // Import organization recommendations\n    if (metrics.importOrderIssues > 50) {\n      recommendations.push(\n        '🚀 READY: Deploy enhanced import organization with alphabetical sorting',\n        'Run `yarn lint:fix` to automatically organize imports',\n        'Use batch processing for systematic completion of remaining issues',\n      );\n    }\n\n    // Performance recommendations\n    if (metrics.performanceMetrics.lintingDuration > 30000) {\n      recommendations.push(\n        '⚡ PERFORMANCE: Linting duration exceeds 30 seconds',\n        'Enable ESLint caching with `yarn lint:fast` for incremental changes',\n        'Consider using `yarn lint:changed` for git-aware changed-files-only processing',\n      );\n    }\n\n    // Quality score recommendations\n    if (metrics.qualityScore < 80) {\n      recommendations.push(\n        '📊 QUALITY: Code quality score below target (80%)',\n        'Focus on eliminating critical errors first, then warnings',\n        'Use domain-specific linting commands for targeted improvements',\n      );\n    }\n\n    // Domain-specific recommendations\n    if (metrics.domainSpecificIssues.astrologicalCalculations > 20) {\n      recommendations.push(\n        '🌟 DOMAIN: Review astrological calculation files for rule compliance',\n        'Ensure mathematical constants and planetary variables are preserved',\n        'Use `yarn lint:domain-astro` for specialized astrological file linting',\n      );\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Generate comprehensive dashboard report\n   */\n  private async generateDashboardReport(result: ValidationResult): Promise<void> {\n    const reportPath = '.kiro/metrics/linting-dashboard-report.md';\n\n    const report = `# Linting Excellence Dashboard Report\n\nGenerated: ${new Date().toISOString()}\n\n## 📊 Overall Status\n\n- **Validation Status**: ${result.passed ? '✅ PASSED' : '❌ FAILED'}\n- **Quality Score**: ${result.metrics.qualityScore}/100\n- **Total Issues**: ${result.metrics.totalIssues}\n- **Regression Detected**: ${result.regressionAnalysis.detected ? '⚠️ YES' : '✅ NO'}\n\n## 🔍 Detailed Metrics\n\n### Error Breakdown\n- **Parser Errors**: ${result.metrics.parserErrors} ${result.metrics.parserErrors === 0 ? '✅' : '🚨'}\n- **TypeScript Errors**: ${result.metrics.errors}\n- **Explicit Any Errors**: ${result.metrics.explicitAnyErrors} ${result.metrics.explicitAnyErrors < 100 ? '✅' : '⚡'}\n- **Warnings**: ${result.metrics.warnings}\n\n### Code Quality Issues\n- **Import Order Issues**: ${result.metrics.importOrderIssues}\n- **Unused Variables**: ${result.metrics.unusedVariables}\n- **React Hooks Issues**: ${result.metrics.reactHooksIssues}\n- **Console Statements**: ${result.metrics.consoleStatements}\n\n### Domain-Specific Issues\n- **Astrological Calculations**: ${result.metrics.domainSpecificIssues.astrologicalCalculations}\n- **Campaign System**: ${result.metrics.domainSpecificIssues.campaignSystem}\n- **Test Files**: ${result.metrics.domainSpecificIssues.testFiles}\n\n### Performance Metrics\n- **Linting Duration**: ${result.metrics.performanceMetrics.lintingDuration}ms\n- **Cache Hit Rate**: ${(result.metrics.performanceMetrics.cacheHitRate * 100).toFixed(1)}%\n- **Memory Usage**: ${result.metrics.performanceMetrics.memoryUsage.toFixed(1)}MB\n- **Files Processed**: ${result.metrics.performanceMetrics.filesProcessed}\n\n## 🚨 Active Alerts\n\n${\n  result.alerts.length === 0\n    ? 'No active alerts ✅'\n    : result.alerts\n        .map(\n          alert =>\n            `- **${alert.severity.toUpperCase()}**: ${alert.message} (${alert.currentValue} > ${alert.threshold})`,\n        )\n        .join('\\n')\n}\n\n## 📈 Regression Analysis\n\n${\n  result.regressionAnalysis.detected\n    ? `\n**Regression Detected**: ${result.regressionAnalysis.severity.toUpperCase()}\n- **Affected Metrics**: ${result.regressionAnalysis.affectedMetrics.join(', ')}\n- **Change**: ${result.regressionAnalysis.historicalComparison.change} issues (${result.regressionAnalysis.historicalComparison.changePercentage.toFixed(1)}%)\n`\n    : '**No Regression Detected** ✅'\n}\n\n## 💡 Recommendations\n\n${result.recommendations.map(rec => `- ${rec}`).join('\\n')}\n\n## 🎯 Next Actions\n\n### Immediate (Next 30 Minutes)\n1. ${result.metrics.parserErrors > 0 ? '🚨 **URGENT**: Fix parser errors in recommendationEngine.ts' : '✅ No parser errors'}\n2. ${result.metrics.explicitAnyErrors > 100 ? '⚡ **Deploy Explicit Any Campaign**: Address error-level explicit any types' : '✅ Explicit any errors under control'}\n3. ${result.metrics.importOrderIssues > 50 ? '🚀 **Execute Import Organization**: Apply alphabetical sorting and grouping' : '✅ Import organization acceptable'}\n\n### Next 2 Hours\n1. **Enhanced Unused Variable Cleanup**: Apply domain-specific variable patterns\n2. **React Hooks Enhancement**: Implement enhanced dependency analysis\n3. **Performance Optimization**: Enable caching and parallel processing\n\n### Success Metrics Target\n- **Target**: ${result.metrics.totalIssues} → <2,000 total issues (${Math.round((1 - 2000 / Math.max(result.metrics.totalIssues, 1)) * 100)}% reduction)\n- **Critical Path**: Parser errors → Explicit any errors → Import organization\n- **Timeline**: 3-4 hours for major reduction with enhanced safety protocols\n- **Quality Gate**: Zero parser errors, <100 explicit any errors, enhanced import organization\n\n---\n\n*Report generated by Linting Excellence Dashboard v1.0*\n*Enhanced Configuration: React 19, TypeScript strict rules, domain-specific configurations*\n`;\n\n    writeFileSync(reportPath, report, 'utf8');\n    console.log(`📊 Dashboard report generated: ${reportPath}`);\n  }\n\n  // Helper methods\n  private ensureDirectoriesExist(): void {\n    const dirs = ['.kiro/metrics'];\n    for (const dir of dirs) {\n      if (!existsSync(dir)) {\n        execSync(`mkdir -p ${dir}`);\n      }\n    }\n  }\n\n  private initializeConfiguration(): void {\n    if (!existsSync(this.configFile)) {\n      const config = {\n        thresholds: this.defaultThresholds,\n        alertingEnabled: true,\n        regressionDetectionEnabled: true,\n        performanceMonitoringEnabled: true,\n        domainSpecificTrackingEnabled: true,\n      };\n      writeFileSync(this.configFile, JSON.stringify(config, null, 2));\n    }\n  }\n\n  private loadThresholds(): AlertThreshold[] {\n    try {\n      const config = JSON.parse(readFileSync(this.configFile, 'utf8'));\n      return config.thresholds || this.defaultThresholds;\n    } catch {\n      return this.defaultThresholds;\n    }\n  }\n\n  private loadMetricsHistory(): LintingMetrics[] {\n    try {\n      if (existsSync(this.metricsHistoryFile)) {\n        return JSON.parse(readFileSync(this.metricsHistoryFile, 'utf8'));\n      }\n    } catch (error) {\n      console.warn('Error loading metrics history:', error);\n    }\n    return [];\n  }\n\n  private async storeMetrics(metrics: LintingMetrics): Promise<void> {\n    const history = this.loadMetricsHistory();\n    history.push(metrics);\n\n    // Keep only last 100 entries\n    if (history.length > 100) {\n      history.splice(0, history.length - 100);\n    }\n\n    writeFileSync(this.metricsHistoryFile, JSON.stringify(history, null, 2));\n  }\n\n  private async storeAlerts(alerts: Alert[]): Promise<void> {\n    writeFileSync(this.alertsFile, JSON.stringify(alerts, null, 2));\n  }\n\n  private getMetricValue(metrics: LintingMetrics, metricPath: string): number {\n    const parts = metricPath.split('.');\n    let value: unknown = metrics;\n\n    for (const part of parts) {\n      value = value?.[part];\n    }\n\n    return typeof value === 'number' ? value : 0;\n  }\n\n  private shouldTriggerAlert(currentValue: number, threshold: AlertThreshold): boolean {\n    if (threshold.metric === 'qualityScore') {\n      return currentValue < threshold.threshold; // Quality score should be above threshold\n    }\n    return currentValue > threshold.threshold; // Other metrics should be below threshold\n  }\n\n  private calculateRegressionSeverity(\n    affectedMetrics: string[],\n    current: LintingMetrics,\n    previous: LintingMetrics,\n  ): 'minor' | 'moderate' | 'major' | 'critical' {\n    if (affectedMetrics.includes('parserErrors') && current.parserErrors > previous.parserErrors) {\n      return 'critical';\n    }\n\n    if (\n      affectedMetrics.includes('explicitAnyErrors') &&\n      current.explicitAnyErrors > previous.explicitAnyErrors + 50\n    ) {\n      return 'major';\n    }\n\n    if (affectedMetrics.length > 2) {\n      return 'moderate';\n    }\n\n    return 'minor';\n  }\n\n  private generateRegressionRecommendations(affectedMetrics: string[]): string[] {\n    const recommendations: string[] = [];\n\n    if (affectedMetrics.includes('parserErrors')) {\n      recommendations.push('Immediately investigate and fix new parser errors');\n    }\n\n    if (affectedMetrics.includes('explicitAnyErrors')) {\n      recommendations.push('Review recent changes that introduced explicit any types');\n    }\n\n    if (affectedMetrics.includes('totalIssues')) {\n      recommendations.push('Run comprehensive linting validation to identify new issues');\n    }\n\n    return recommendations;\n  }\n\n  private async calculateCacheHitRate(): Promise<number> {\n    try {\n      // Check if ESLint cache exists and calculate hit rate\n      if (existsSync('.eslintcache')) {\n        // Simplified cache hit rate calculation\n        return 0.75; // Assume 75% cache hit rate for now\n      }\n    } catch {\n      // Ignore errors\n    }\n    return 0;\n  }\n\n  private isAstrologicalFile(filePath: string): boolean {\n    return (\n      filePath.includes('/calculations/') ||\n      filePath.includes('/data/planets/') ||\n      filePath.includes('reliableAstronomy') ||\n      filePath.includes('/astrology/')\n    );\n  }\n\n  private isCampaignFile(filePath: string): boolean {\n    return (\n      filePath.includes('/campaign/') ||\n      filePath.includes('Campaign') ||\n      filePath.includes('Progress')\n    );\n  }\n\n  private isTestFile(filePath: string): boolean {\n    return (\n      filePath.includes('.test.') || filePath.includes('.spec.') || filePath.includes('__tests__')\n    );\n  }\n}\n"],"version":3}