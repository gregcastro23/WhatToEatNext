{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/automatedQualityAssurance.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/automatedQualityAssurance.ts"],"sourcesContent":["/**\n * Automated Quality Assurance Integration\n * \n * This module implements automated quality assurance with agent hooks for:\n * - Automatic planetary data validation\n * - Ingredient consistency checking for elemental properties\n * - TypeScript campaign triggers for error threshold management\n * - Build quality monitoring for performance tracking\n */\n\nimport { logger } from '@/utils/logger';\nimport { getReliablePlanetaryPositions } from '@/utils/reliableAstronomy';\nimport { ElementalProperties, getSteeringFileIntelligence } from '@/utils/steeringFileIntelligence';\n\n// Quality assurance thresholds from campaign-integration.md\nexport const QA_THRESHOLDS = {\n  typescript: {\n    criticalThreshold: 100,\n    warningThreshold: 500,\n    target: 0\n  },\n  linting: {\n    criticalThreshold: 1000,\n    warningThreshold: 2000,\n    target: 0\n  },\n  performance: {\n    renderTime: 16, // 60fps target\n    memoryUsage: 50, // MB\n    bundleSize: 250, // KB\n    apiResponseTime: 2000 // 2 seconds\n  },\n  planetaryData: {\n    positionAccuracy: 0.1, // degrees\n    cacheValidityHours: 6,\n    fallbackThresholdMs: 5000\n  }\n} as const;\n\nexport interface QualityMetrics {\n  typeScriptErrors: number;\n  lintingWarnings: number;\n  performanceMetrics: {\n    renderTime: number;\n    memoryUsage: number;\n    bundleSize: number;\n    apiResponseTime: number;\n  };\n  planetaryDataQuality: {\n    accuracy: number;\n    freshness: number;\n    reliability: number;\n  };\n  ingredientConsistency: {\n    elementalValidation: number;\n    compatibilityScores: number;\n    culturalSensitivity: number;\n  };\n}\n\nexport interface QualityAssuranceConfig {\n  enableAutomaticValidation: boolean;\n  enableCampaignTriggers: boolean;\n  enablePerformanceMonitoring: boolean;\n  enablePlanetaryDataValidation: boolean;\n  enableIngredientConsistencyChecking: boolean;\n  thresholds: typeof QA_THRESHOLDS;\n}\n\nexport interface ValidationResult {\n  isValid: boolean;\n  score: number;\n  issues: string[];\n  recommendations: string[];\n  timestamp: number;\n}\n\nexport interface CampaignTrigger {\n  type: 'typescript' | 'linting' | 'performance' | 'planetary' | 'ingredient';\n  threshold: number;\n  currentValue: number;\n  action: 'monitor' | 'warn' | 'campaign' | 'emergency';\n  triggered: boolean;\n  timestamp: number;\n}\n\n/**\n * Automated Quality Assurance System\n */\nexport class AutomatedQualityAssurance {\n  private static instance: AutomatedQualityAssurance;\n  private config: QualityAssuranceConfig;\n  private metrics: QualityMetrics;\n  private lastValidation: number = 0;\n  private validationInterval: NodeJS.Timeout | null = null;\n  private campaignTriggers: CampaignTrigger[] = [];\n\n  private constructor(config?: Partial<QualityAssuranceConfig>) {\n    this.config = {\n      enableAutomaticValidation: true,\n      enableCampaignTriggers: true,\n      enablePerformanceMonitoring: true,\n      enablePlanetaryDataValidation: true,\n      enableIngredientConsistencyChecking: true,\n      thresholds: QA_THRESHOLDS,\n      ...config\n    };\n\n    this.metrics = this.initializeMetrics();\n    this.startAutomaticValidation();\n  }\n\n  public static getInstance(config?: Partial<QualityAssuranceConfig>): AutomatedQualityAssurance {\n    if (!AutomatedQualityAssurance.instance) {\n      AutomatedQualityAssurance.instance = new AutomatedQualityAssurance(config);\n    }\n    return AutomatedQualityAssurance.instance;\n  }\n\n  /**\n   * Agent hook for automatic planetary data validation\n   */\n  public async validatePlanetaryData(date: Date = new Date()): Promise<ValidationResult> {\n    if (!this.config.enablePlanetaryDataValidation) {\n      return this.createValidationResult(true, 1.0, [], []);\n    }\n\n    try {\n      const startTime = performance.now();\n      const positions = await getReliablePlanetaryPositions(date);\n      const responseTime = performance.now() - startTime;\n\n      const issues: string[] = [];\n      const recommendations: string[] = [];\n      let score = 1.0;\n\n      // Validate response time\n      if (responseTime > this.config.thresholds.planetaryData.fallbackThresholdMs) {\n        issues.push(`Planetary data fetch time (${responseTime.toFixed(0)}ms) exceeds threshold`);\n        recommendations.push('Consider implementing more aggressive caching');\n        score -= 0.2;\n      }\n\n      // Validate data completeness\n      const requiredPlanets = ['sun', 'moon', 'mercury', 'venus', 'mars', 'jupiter', 'saturn'];\n      const missingPlanets = requiredPlanets.filter(planet => !positions[planet]);\n      \n      if (missingPlanets.length > 0) {\n        issues.push(`Missing planetary data for: ${missingPlanets.join(', ')}`);\n        recommendations.push('Verify API connectivity and fallback mechanisms');\n        score -= 0.1 * missingPlanets.length;\n      }\n\n      // Validate position accuracy (check for reasonable longitude values)\n      Object.entries(positions).forEach(([planet, data]: [string, any]) => {\n        if (data?.exactLongitude !== undefined) {\n          if (data.exactLongitude < 0 || data.exactLongitude >= 360) {\n            issues.push(`Invalid longitude for ${planet}: ${data.exactLongitude}`);\n            score -= 0.1;\n          }\n        }\n      });\n\n      // Update metrics\n      this.metrics.planetaryDataQuality = {\n        accuracy: Math.max(0, score),\n        freshness: this.calculateDataFreshness(positions),\n        reliability: issues.length === 0 ? 1.0 : Math.max(0, 1.0 - (issues.length * 0.1))\n      };\n\n      // Check for campaign triggers\n      this.checkCampaignTriggers('planetary', score);\n\n      logger.debug('Planetary data validation completed', { score, issues: issues.length });\n      return this.createValidationResult(score >= 0.8, score, issues, recommendations);\n\n    } catch (error) {\n      logger.error('Error validating planetary data:', error);\n      return this.createValidationResult(false, 0, ['Planetary data validation failed'], ['Check API connectivity and error handling']);\n    }\n  }\n\n  /**\n   * Agent hook for ingredient consistency checking\n   */\n  public validateIngredientConsistency(ingredients: Array<{\n    name: string;\n    elementalProperties: ElementalProperties;\n    category?: string;\n  }>): ValidationResult {\n    if (!this.config.enableIngredientConsistencyChecking) {\n      return this.createValidationResult(true, 1.0, [], []);\n    }\n\n    const intelligence = getSteeringFileIntelligence();\n    const issues: string[] = [];\n    const recommendations: string[] = [];\n    let totalScore = 0;\n    let validatedCount = 0;\n\n    ingredients.forEach((ingredient, index) => {\n      // Validate elemental properties structure\n      const isValidStructure = intelligence.validateElementalProperties(ingredient.elementalProperties);\n      if (!isValidStructure) {\n        issues.push(`Invalid elemental properties for ingredient: ${ingredient.name}`);\n        recommendations.push(`Fix elemental properties for ${ingredient.name} to meet minimum standards`);\n      } else {\n        validatedCount++;\n        \n        // Calculate elemental consistency score\n        const elementalSum = Object.values(ingredient.elementalProperties).reduce((sum, val) => sum + val, 0);\n        const consistencyScore = elementalSum > 0 ? Math.min(1.0, elementalSum / 1.0) : 0;\n        totalScore += consistencyScore;\n\n        // Check for elemental balance (no single element should dominate too much)\n        const maxElement = Math.max(...Object.values(ingredient.elementalProperties));\n        if (maxElement > 0.8) {\n          recommendations.push(`Consider balancing elemental properties for ${ingredient.name} (max: ${maxElement.toFixed(2)})`);\n        }\n      }\n\n      // Validate compatibility with other ingredients\n      if (index > 0) {\n        const prevIngredient = ingredients[index - 1];\n        const compatibility = intelligence.calculateCompatibility(\n          ingredient.elementalProperties,\n          prevIngredient.elementalProperties\n        );\n\n        if (compatibility < 0.7) {\n          issues.push(`Low compatibility between ${ingredient.name} and ${prevIngredient.name}: ${compatibility.toFixed(2)}`);\n          recommendations.push('Consider adjusting elemental properties to improve compatibility');\n        }\n      }\n    });\n\n    const averageScore = validatedCount > 0 ? totalScore / validatedCount : 0;\n    \n    // Update metrics\n    this.metrics.ingredientConsistency = {\n      elementalValidation: averageScore,\n      compatibilityScores: issues.filter(issue => issue.includes('compatibility')).length === 0 ? 1.0 : 0.7,\n      culturalSensitivity: this.validateCulturalSensitivity(ingredients.map(i => i.name))\n    };\n\n    // Check for campaign triggers\n    this.checkCampaignTriggers('ingredient', averageScore);\n\n    logger.debug('Ingredient consistency validation completed', { \n      score: averageScore, \n      issues: issues.length,\n      validatedCount \n    });\n\n    return this.createValidationResult(averageScore >= 0.8, averageScore, issues, recommendations);\n  }\n\n  /**\n   * TypeScript campaign trigger for error threshold management\n   */\n  public async checkTypeScriptErrorThreshold(): Promise<CampaignTrigger | null> {\n    if (!this.config.enableCampaignTriggers) {\n      return null;\n    }\n\n    try {\n      // Simulate TypeScript error count check (in real implementation, this would run tsc)\n      const errorCount = await this.getTypeScriptErrorCount();\n      \n      this.metrics.typeScriptErrors = errorCount;\n\n      const trigger: CampaignTrigger = {\n        type: 'typescript',\n        threshold: this.config.thresholds.typescript.criticalThreshold,\n        currentValue: errorCount,\n        action: this.determineAction('typescript', errorCount),\n        triggered: errorCount > this.config.thresholds.typescript.criticalThreshold,\n        timestamp: Date.now()\n      };\n\n      if (trigger.triggered) {\n        logger.warn(`TypeScript error threshold exceeded: ${errorCount} > ${trigger.threshold}`);\n        this.campaignTriggers.push(trigger);\n        \n        // In a real implementation, this would trigger the campaign system\n        this.triggerCampaign('typescript-error-elimination', {\n          errorCount,\n          threshold: trigger.threshold,\n          action: trigger.action\n        });\n      }\n\n      return trigger;\n    } catch (error) {\n      logger.error('Error checking TypeScript error threshold:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Build quality monitoring for performance tracking\n   */\n  public monitorBuildQuality(buildMetrics: {\n    buildTime?: number;\n    bundleSize?: number;\n    memoryUsage?: number;\n    errorCount?: number;\n  }): ValidationResult {\n    if (!this.config.enablePerformanceMonitoring) {\n      return this.createValidationResult(true, 1.0, [], []);\n    }\n\n    const issues: string[] = [];\n    const recommendations: string[] = [];\n    let score = 1.0;\n\n    // Check build time\n    if (buildMetrics.buildTime && buildMetrics.buildTime > 30000) { // 30 seconds\n      issues.push(`Build time (${buildMetrics.buildTime}ms) exceeds recommended threshold`);\n      recommendations.push('Consider optimizing build configuration and dependencies');\n      score -= 0.2;\n    }\n\n    // Check bundle size\n    if (buildMetrics.bundleSize && buildMetrics.bundleSize > this.config.thresholds.performance.bundleSize * 1024) {\n      issues.push(`Bundle size (${Math.round(buildMetrics.bundleSize / 1024)}KB) exceeds threshold`);\n      recommendations.push('Implement code splitting and tree shaking optimizations');\n      score -= 0.2;\n    }\n\n    // Check memory usage\n    if (buildMetrics.memoryUsage && buildMetrics.memoryUsage > this.config.thresholds.performance.memoryUsage) {\n      issues.push(`Memory usage (${buildMetrics.memoryUsage}MB) exceeds threshold`);\n      recommendations.push('Optimize memory usage and check for memory leaks');\n      score -= 0.2;\n    }\n\n    // Check error count\n    if (buildMetrics.errorCount && buildMetrics.errorCount > 0) {\n      issues.push(`Build contains ${buildMetrics.errorCount} errors`);\n      recommendations.push('Fix all build errors before deployment');\n      score -= 0.3;\n    }\n\n    // Update performance metrics\n    this.metrics.performanceMetrics = {\n      renderTime: 0, // Will be updated by component monitoring\n      memoryUsage: buildMetrics.memoryUsage || 0,\n      bundleSize: buildMetrics.bundleSize || 0,\n      apiResponseTime: 0 // Will be updated by API monitoring\n    };\n\n    // Check for campaign triggers\n    this.checkCampaignTriggers('performance', score);\n\n    logger.debug('Build quality monitoring completed', { score, issues: issues.length });\n    return this.createValidationResult(score >= 0.8, score, issues, recommendations);\n  }\n\n  /**\n   * Get current quality metrics\n   */\n  public getQualityMetrics(): QualityMetrics {\n    return { ...this.metrics };\n  }\n\n  /**\n   * Get active campaign triggers\n   */\n  public getActiveCampaignTriggers(): CampaignTrigger[] {\n    return this.campaignTriggers.filter(trigger => \n      Date.now() - trigger.timestamp < 24 * 60 * 60 * 1000 // Last 24 hours\n    );\n  }\n\n  /**\n   * Update configuration\n   */\n  public updateConfig(newConfig: Partial<QualityAssuranceConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    logger.debug('Quality assurance configuration updated', newConfig);\n  }\n\n  /**\n   * Stop automatic validation\n   */\n  public stop(): void {\n    if (this.validationInterval) {\n      clearInterval(this.validationInterval);\n      this.validationInterval = null;\n    }\n  }\n\n  // Private helper methods\n\n  private initializeMetrics(): QualityMetrics {\n    return {\n      typeScriptErrors: 0,\n      lintingWarnings: 0,\n      performanceMetrics: {\n        renderTime: 0,\n        memoryUsage: 0,\n        bundleSize: 0,\n        apiResponseTime: 0\n      },\n      planetaryDataQuality: {\n        accuracy: 1.0,\n        freshness: 1.0,\n        reliability: 1.0\n      },\n      ingredientConsistency: {\n        elementalValidation: 1.0,\n        compatibilityScores: 1.0,\n        culturalSensitivity: 1.0\n      }\n    };\n  }\n\n  private startAutomaticValidation(): void {\n    if (!this.config.enableAutomaticValidation) {\n      return;\n    }\n\n    // Run validation every 5 minutes\n    this.validationInterval = setInterval(async () => {\n      try {\n        await this.validatePlanetaryData();\n        await this.checkTypeScriptErrorThreshold();\n        logger.debug('Automatic quality validation completed');\n      } catch (error) {\n        logger.error('Error in automatic validation:', error);\n      }\n    }, 5 * 60 * 1000);\n\n    logger.debug('Automatic quality validation started');\n  }\n\n  private createValidationResult(\n    isValid: boolean,\n    score: number,\n    issues: string[],\n    recommendations: string[]\n  ): ValidationResult {\n    return {\n      isValid,\n      score: Math.max(0, Math.min(1, score)),\n      issues,\n      recommendations,\n      timestamp: Date.now()\n    };\n  }\n\n  private calculateDataFreshness(positions: Record<string, any>): number {\n    // In a real implementation, this would check the timestamp of the data\n    // For now, return 1.0 (fresh) as a placeholder\n    return 1.0;\n  }\n\n  private validateCulturalSensitivity(ingredientNames: string[]): number {\n    // Check for potentially insensitive terms\n    const sensitiveTerms = ['exotic', 'ethnic', 'primitive', 'weird'];\n    const issues = ingredientNames.filter(name => \n      sensitiveTerms.some(term => name.toLowerCase().includes(term))\n    );\n    \n    return issues.length === 0 ? 1.0 : Math.max(0, 1.0 - (issues.length * 0.2));\n  }\n\n  private checkCampaignTriggers(type: CampaignTrigger['type'], value: number): void {\n    if (!this.config.enableCampaignTriggers) {\n      return;\n    }\n\n    const thresholds = this.getThresholdsForType(type);\n    if (!thresholds) return;\n\n    const trigger: CampaignTrigger = {\n      type,\n      threshold: thresholds.critical,\n      currentValue: value,\n      action: this.determineAction(type, value),\n      triggered: value < thresholds.critical,\n      timestamp: Date.now()\n    };\n\n    if (trigger.triggered) {\n      this.campaignTriggers.push(trigger);\n      logger.warn(`Campaign trigger activated for ${type}:`, trigger);\n    }\n  }\n\n  private getThresholdsForType(type: CampaignTrigger['type']): { critical: number; warning: number } | null {\n    switch (type) {\n      case 'typescript':\n        return { critical: this.config.thresholds.typescript.criticalThreshold, warning: this.config.thresholds.typescript.warningThreshold };\n      case 'linting':\n        return { critical: this.config.thresholds.linting.criticalThreshold, warning: this.config.thresholds.linting.warningThreshold };\n      case 'performance':\n      case 'planetary':\n      case 'ingredient':\n        return { critical: 0.8, warning: 0.9 }; // Score-based thresholds\n      default:\n        return null;\n    }\n  }\n\n  private determineAction(type: string, value: number): CampaignTrigger['action'] {\n    const thresholds = this.getThresholdsForType(type as CampaignTrigger['type']);\n    if (!thresholds) return 'monitor';\n\n    if (type === 'typescript' || type === 'linting') {\n      // For error counts, higher values are worse\n      if (value > thresholds.critical) return 'emergency';\n      if (value > thresholds.warning) return 'campaign';\n      return 'monitor';\n    } else {\n      // For scores, lower values are worse\n      if (value < 0.7) return 'emergency';\n      if (value < thresholds.critical) return 'campaign';\n      if (value < thresholds.warning) return 'warn';\n      return 'monitor';\n    }\n  }\n\n  private async getTypeScriptErrorCount(): Promise<number> {\n    // In a real implementation, this would run: yarn tsc --noEmit --skipLibCheck 2>&1 | grep -c \"error TS\"\n    // For now, return a simulated count\n    return Math.floor(Math.random() * 50); // Simulate 0-50 errors\n  }\n\n  private triggerCampaign(campaignType: string, context: any): void {\n    // In a real implementation, this would integrate with the campaign system\n    logger.info(`Campaign triggered: ${campaignType}`, context);\n    \n    // Simulate campaign system integration\n    if (typeof window !== 'undefined') {\n      // Dispatch custom event for campaign system integration\n      window.dispatchEvent(new CustomEvent('kiro-campaign-trigger', {\n        detail: { campaignType, context }\n      }));\n    }\n  }\n}\n\n/**\n * Convenience function to get quality assurance instance\n */\nexport function getAutomatedQualityAssurance(config?: Partial<QualityAssuranceConfig>): AutomatedQualityAssurance {\n  return AutomatedQualityAssurance.getInstance(config);\n}\n\n/**\n * Hook for components to use automated quality assurance\n */\nexport function useAutomatedQualityAssurance() {\n  const qa = getAutomatedQualityAssurance();\n  \n  return {\n    validatePlanetaryData: (date?: Date) => qa.validatePlanetaryData(date),\n    validateIngredientConsistency: (ingredients: Array<{ name: string; elementalProperties: ElementalProperties; category?: string }>) => \n      qa.validateIngredientConsistency(ingredients),\n    checkTypeScriptErrorThreshold: () => qa.checkTypeScriptErrorThreshold(),\n    monitorBuildQuality: (metrics: any) => qa.monitorBuildQuality(metrics),\n    getQualityMetrics: () => qa.getQualityMetrics(),\n    getActiveCampaignTriggers: () => qa.getActiveCampaignTriggers(),\n    updateConfig: (config: Partial<QualityAssuranceConfig>) => qa.updateConfig(config)\n  };\n}"],"version":3}