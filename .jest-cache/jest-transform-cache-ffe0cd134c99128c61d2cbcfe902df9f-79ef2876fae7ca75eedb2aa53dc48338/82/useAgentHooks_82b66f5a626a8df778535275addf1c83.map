{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/hooks/useAgentHooks.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/hooks/useAgentHooks.ts"],"sourcesContent":["/**\n * Agent Hooks for Automated Quality Assurance\n *\n * This module provides React hooks that integrate with Kiro's agent hook system\n * for automatic planetary data validation, ingredient consistency checking,\n * and campaign trigger management.\n */\n\nimport { useEffect, useCallback, useState, useRef } from 'react';\nimport {\n  getAutomatedQualityAssurance,\n  ValidationResult,\n  CampaignTrigger,\n  QualityMetrics,\n  QualityAssuranceConfig,\n} from '@/utils/automatedQualityAssurance';\nimport { ElementalProperties } from '@/utils/steeringFileIntelligence';\nimport { logger } from '@/utils/logger';\n\nexport interface AgentHookConfig {\n  enablePlanetaryValidation: boolean;\n  enableIngredientValidation: boolean;\n  enableCampaignTriggers: boolean;\n  enablePerformanceMonitoring: boolean;\n  validationInterval: number; // minutes\n}\n\nexport interface AgentHookState {\n  isActive: boolean;\n  lastValidation: number;\n  validationResults: Record<string, ValidationResult>;\n  campaignTriggers: CampaignTrigger[];\n  qualityMetrics: QualityMetrics;\n}\n\n/**\n * Main agent hook for automated quality assurance integration\n */\nexport function useAgentHooks(config: Partial<AgentHookConfig> = {}) {\n  const defaultConfig: AgentHookConfig = {\n    enablePlanetaryValidation: true,\n    enableIngredientValidation: true,\n    enableCampaignTriggers: true,\n    enablePerformanceMonitoring: true,\n    validationInterval: 5, // 5 minutes\n  };\n\n  const finalConfig = { ...defaultConfig, ...config };\n  const qa = getAutomatedQualityAssurance();\n\n  const [hookState, setHookState] = useState<AgentHookState>({\n    isActive: false,\n    lastValidation: 0,\n    validationResults: {},\n    campaignTriggers: [],\n    qualityMetrics: qa.getQualityMetrics(),\n  });\n\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Start agent hooks\n  const startAgentHooks = useCallback(() => {\n    if (hookState.isActive) return;\n\n    setHookState(prev => ({ ...prev, isActive: true }));\n\n    // Set up validation interval\n    intervalRef.current = setInterval(\n      async () => {\n        try {\n          const results: Record<string, ValidationResult> = {};\n\n          // Planetary data validation\n          if (finalConfig.enablePlanetaryValidation) {\n            const planetaryResult = await qa.validatePlanetaryData();\n            results.planetary = planetaryResult;\n\n            if (!planetaryResult.isValid) {\n              logger.warn(\n                'Planetary data validation failed:',\n                planetaryResult.issues\n              );\n            }\n          }\n\n          // TypeScript error threshold check\n          if (finalConfig.enableCampaignTriggers) {\n            const trigger = await qa.checkTypeScriptErrorThreshold();\n            if (trigger?.triggered) {\n              logger.warn('TypeScript campaign trigger activated:', trigger);\n            }\n          }\n\n          // Update state\n          setHookState(prev => ({\n            ...prev,\n            lastValidation: Date.now(),\n            validationResults: { ...prev.validationResults, ...results },\n            campaignTriggers: qa.getActiveCampaignTriggers(),\n            qualityMetrics: qa.getQualityMetrics(),\n          }));\n\n          logger.debug('Agent hooks validation cycle completed');\n        } catch (error) {\n          logger.error('Error in agent hooks validation cycle:', error);\n        }\n      },\n      finalConfig.validationInterval * 60 * 1000\n    );\n\n    logger.info('Agent hooks started with config:', finalConfig);\n  }, [finalConfig, hookState.isActive, qa]);\n\n  // Stop agent hooks\n  const stopAgentHooks = useCallback(() => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n\n    setHookState(prev => ({ ...prev, isActive: false }));\n    logger.info('Agent hooks stopped');\n  }, []);\n\n  // Manual validation trigger\n  const triggerValidation = useCallback(\n    async (type?: 'planetary' | 'ingredient' | 'typescript' | 'all') => {\n      try {\n        const results: Record<string, ValidationResult> = {};\n\n        if (!type || type === 'all' || type === 'planetary') {\n          results.planetary = await qa.validatePlanetaryData();\n        }\n\n        if (!type || type === 'all' || type === 'typescript') {\n          const trigger = await qa.checkTypeScriptErrorThreshold();\n          if (trigger) {\n            setHookState(prev => ({\n              ...prev,\n              campaignTriggers: [...prev.campaignTriggers, trigger],\n            }));\n          }\n        }\n\n        setHookState(prev => ({\n          ...prev,\n          lastValidation: Date.now(),\n          validationResults: { ...prev.validationResults, ...results },\n          qualityMetrics: qa.getQualityMetrics(),\n        }));\n\n        logger.debug('Manual validation triggered:', { type, results });\n        return results;\n      } catch (error) {\n        logger.error('Error in manual validation:', error);\n        throw error;\n      }\n    },\n    [qa]\n  );\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      stopAgentHooks();\n    };\n  }, [stopAgentHooks]);\n\n  return {\n    hookState,\n    startAgentHooks,\n    stopAgentHooks,\n    triggerValidation,\n    isActive: hookState.isActive,\n  };\n}\n\n/**\n * Agent hook specifically for planetary data validation\n */\nexport function usePlanetaryDataValidationHook(autoStart: boolean = true) {\n  const qa = getAutomatedQualityAssurance();\n  const [validationResult, setValidationResult] =\n    useState<ValidationResult | null>(null);\n  const [isValidating, setIsValidating] = useState(false);\n\n  const validatePlanetaryData = useCallback(\n    async (date?: Date) => {\n      setIsValidating(true);\n      try {\n        const result = await qa.validatePlanetaryData(date);\n        setValidationResult(result);\n\n        if (!result.isValid) {\n          logger.warn(\n            'Planetary data validation hook detected issues:',\n            result.issues\n          );\n\n          // Dispatch event for external systems\n          if (typeof window !== 'undefined') {\n            window.dispatchEvent(\n              new CustomEvent('planetary-validation-failed', {\n                detail: result,\n              })\n            );\n          }\n        }\n\n        return result;\n      } catch (error) {\n        logger.error('Error in planetary data validation hook:', error);\n        throw error;\n      } finally {\n        setIsValidating(false);\n      }\n    },\n    [qa]\n  );\n\n  // Auto-start validation\n  useEffect(() => {\n    if (autoStart) {\n      validatePlanetaryData();\n    }\n  }, [autoStart, validatePlanetaryData]);\n\n  return {\n    validationResult,\n    isValidating,\n    validatePlanetaryData,\n    isValid: validationResult?.isValid ?? null,\n  };\n}\n\n/**\n * Agent hook for ingredient consistency checking\n */\nexport function useIngredientConsistencyHook() {\n  const qa = getAutomatedQualityAssurance();\n  const [validationResult, setValidationResult] =\n    useState<ValidationResult | null>(null);\n  const [isValidating, setIsValidating] = useState(false);\n\n  const validateIngredients = useCallback(\n    async (\n      ingredients: Array<{\n        name: string;\n        elementalProperties: ElementalProperties;\n        category?: string;\n      }>\n    ) => {\n      if (ingredients.length === 0) {\n        return null;\n      }\n\n      setIsValidating(true);\n      try {\n        const result = qa.validateIngredientConsistency(ingredients);\n        setValidationResult(result);\n\n        if (!result.isValid) {\n          logger.warn(\n            'Ingredient consistency validation detected issues:',\n            result.issues\n          );\n\n          // Dispatch event for external systems\n          if (typeof window !== 'undefined') {\n            window.dispatchEvent(\n              new CustomEvent('ingredient-validation-failed', {\n                detail: { result, ingredients },\n              })\n            );\n          }\n        }\n\n        return result;\n      } catch (error) {\n        logger.error('Error in ingredient consistency validation:', error);\n        throw error;\n      } finally {\n        setIsValidating(false);\n      }\n    },\n    [qa]\n  );\n\n  return {\n    validationResult,\n    isValidating,\n    validateIngredients,\n    isValid: validationResult?.isValid ?? null,\n  };\n}\n\n/**\n * Agent hook for TypeScript campaign triggers\n */\nexport function useTypeScriptCampaignHook(autoCheck: boolean = true) {\n  const qa = getAutomatedQualityAssurance();\n  const [campaignTrigger, setCampaignTrigger] =\n    useState<CampaignTrigger | null>(null);\n  const [isChecking, setIsChecking] = useState(false);\n\n  const checkErrorThreshold = useCallback(async () => {\n    setIsChecking(true);\n    try {\n      const trigger = await qa.checkTypeScriptErrorThreshold();\n      setCampaignTrigger(trigger);\n\n      if (trigger?.triggered) {\n        logger.warn('TypeScript campaign trigger activated:', trigger);\n\n        // Dispatch event for campaign system integration\n        if (typeof window !== 'undefined') {\n          window.dispatchEvent(\n            new CustomEvent('typescript-campaign-trigger', {\n              detail: trigger,\n            })\n          );\n        }\n      }\n\n      return trigger;\n    } catch (error) {\n      logger.error('Error checking TypeScript error threshold:', error);\n      throw error;\n    } finally {\n      setIsChecking(false);\n    }\n  }, [qa]);\n\n  // Auto-check on mount and periodically\n  useEffect(() => {\n    if (autoCheck) {\n      checkErrorThreshold();\n\n      // Check every 10 minutes\n      const interval = setInterval(checkErrorThreshold, 10 * 60 * 1000);\n      return () => clearInterval(interval);\n    }\n  }, [autoCheck, checkErrorThreshold]);\n\n  return {\n    campaignTrigger,\n    isChecking,\n    checkErrorThreshold,\n    isTriggered: campaignTrigger?.triggered ?? false,\n  };\n}\n\n/**\n * Agent hook for build quality monitoring\n */\nexport function useBuildQualityMonitoringHook() {\n  const qa = getAutomatedQualityAssurance();\n  const [qualityResult, setQualityResult] = useState<ValidationResult | null>(\n    null\n  );\n  const [isMonitoring, setIsMonitoring] = useState(false);\n\n  const monitorBuildQuality = useCallback(\n    async (buildMetrics: {\n      buildTime?: number;\n      bundleSize?: number;\n      memoryUsage?: number;\n      errorCount?: number;\n    }) => {\n      setIsMonitoring(true);\n      try {\n        const result = qa.monitorBuildQuality(buildMetrics);\n        setQualityResult(result);\n\n        if (!result.isValid) {\n          logger.warn(\n            'Build quality monitoring detected issues:',\n            result.issues\n          );\n\n          // Dispatch event for external systems\n          if (typeof window !== 'undefined') {\n            window.dispatchEvent(\n              new CustomEvent('build-quality-issues', {\n                detail: { result, buildMetrics },\n              })\n            );\n          }\n        }\n\n        return result;\n      } catch (error) {\n        logger.error('Error in build quality monitoring:', error);\n        throw error;\n      } finally {\n        setIsMonitoring(false);\n      }\n    },\n    [qa]\n  );\n\n  return {\n    qualityResult,\n    isMonitoring,\n    monitorBuildQuality,\n    isQualityGood: qualityResult?.isValid ?? null,\n  };\n}\n\n/**\n * Agent hook for comprehensive quality metrics monitoring\n */\nexport function useQualityMetricsHook(updateInterval: number = 30000) {\n  // 30 seconds\n  const qa = getAutomatedQualityAssurance();\n  const [metrics, setMetrics] = useState<QualityMetrics>(\n    qa.getQualityMetrics()\n  );\n  const [lastUpdate, setLastUpdate] = useState(Date.now());\n\n  const updateMetrics = useCallback(() => {\n    const newMetrics = qa.getQualityMetrics();\n    setMetrics(newMetrics);\n    setLastUpdate(Date.now());\n  }, [qa]);\n\n  // Update metrics periodically\n  useEffect(() => {\n    const interval = setInterval(updateMetrics, updateInterval);\n    return () => clearInterval(interval);\n  }, [updateMetrics, updateInterval]);\n\n  return {\n    metrics,\n    lastUpdate,\n    updateMetrics,\n  };\n}\n\n/**\n * Agent hook configuration management\n */\nexport function useAgentHookConfiguration() {\n  const qa = getAutomatedQualityAssurance();\n\n  const updateConfiguration = useCallback(\n    (config: Partial<QualityAssuranceConfig>) => {\n      qa.updateConfig(config);\n      logger.info('Agent hook configuration updated:', config);\n    },\n    [qa]\n  );\n\n  const getActiveTriggers = useCallback(() => {\n    return qa.getActiveCampaignTriggers();\n  }, [qa]);\n\n  return {\n    updateConfiguration,\n    getActiveTriggers,\n  };\n}\n"],"version":3}