{"file":"/Users/GregCastro/Desktop/WhatToEatNext/backups/conservative-wave-2025-08-11T05-21-33-410Z/src/services/campaign/unintentional-any-elimination/AutoDocumentationGenerator.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/backups/conservative-wave-2025-08-11T05-21-33-410Z/src/services/campaign/unintentional-any-elimination/AutoDocumentationGenerator.ts"],"sourcesContent":["/**\n * Automatic Documentation Generator for Intentional Any Types\n *\n * This system automatically adds explanatory comments and ESLint disable comments\n * for intentional any types, with domain-specific templates and validation.\n */\n\nimport * as fs from 'fs/promises';\nimport {\n    AnyTypeCategory,\n    AnyTypeClassification,\n    AutoDocumentationGenerator,\n    ClassificationContext,\n    CodeDomain,\n    DocumentationReport,\n    DocumentationResult,\n    DocumentationTemplate,\n    DocumentationValidation\n} from './types';\n\nexport class AutoDocumentationGeneratorImpl implements AutoDocumentationGenerator {\n  private templates: Map<string, DocumentationTemplate> = new Map();\n  private processedFiles: Set<string> = new Set();\n\n  constructor() {\n    this.initializeTemplates();\n  }\n\n  /**\n   * Initialize domain-specific documentation templates\n   */\n  private initializeTemplates(): void {\n    const templates: DocumentationTemplate[] = [\n      // Error Handling Templates\n      {\n        category: AnyTypeCategory.ERROR_HANDLING,\n        domain: CodeDomain.UTILITY,\n        template: '// Intentionally any: Error handling requires flexible typing for unknown error structures',\n        eslintDisableComment: '// eslint-disable-next-line @typescript-eslint/no-explicit-any',\n        explanation: 'Error objects can have unpredictable structures from various sources'\n      },\n      {\n        category: AnyTypeCategory.ERROR_HANDLING,\n        domain: CodeDomain.SERVICE,\n        template: '// Intentionally any: Service error handling for external API failures',\n        eslintDisableComment: '// eslint-disable-next-line @typescript-eslint/no-explicit-any',\n        explanation: 'External services may return varied error formats'\n      },\n\n      // External API Templates\n      {\n        category: AnyTypeCategory.EXTERNAL_API,\n        domain: CodeDomain.ASTROLOGICAL,\n        template: '// Intentionally any: External astrological API response with dynamic structure',\n        eslintDisableComment: '// eslint-disable-next-line @typescript-eslint/no-explicit-any',\n        explanation: 'Astrological APIs may return varied planetary position formats'\n      },\n      {\n        category: AnyTypeCategory.EXTERNAL_API,\n        domain: CodeDomain.RECIPE,\n        template: '// Intentionally any: External recipe API with flexible ingredient data',\n        eslintDisableComment: '// eslint-disable-next-line @typescript-eslint/no-explicit-any',\n        explanation: 'Recipe APIs have diverse ingredient and nutritional data structures'\n      },\n      {\n        category: AnyTypeCategory.EXTERNAL_API,\n        domain: CodeDomain.SERVICE,\n        template: '// Intentionally any: External API response with unknown structure',\n        eslintDisableComment: '// eslint-disable-next-line @typescript-eslint/no-explicit-any',\n        explanation: 'Third-party APIs may change response formats without notice'\n      },\n\n      // Test Mock Templates\n      {\n        category: AnyTypeCategory.TEST_MOCK,\n        domain: CodeDomain.TEST,\n        template: '// Intentionally any: Test mock requires flexible typing for comprehensive testing',\n        eslintDisableComment: '// eslint-disable-next-line @typescript-eslint/no-explicit-any',\n        explanation: 'Test mocks need to simulate various data structures and edge cases'\n      },\n\n      // Dynamic Configuration Templates\n      {\n        category: AnyTypeCategory.DYNAMIC_CONFIG,\n        domain: CodeDomain.CAMPAIGN,\n        template: '// Intentionally any: Campaign system requires flexible configuration for dynamic behavior',\n        eslintDisableComment: '// eslint-disable-next-line @typescript-eslint/no-explicit-any',\n        explanation: 'Campaign configurations adapt to various automation scenarios'\n      },\n      {\n        category: AnyTypeCategory.DYNAMIC_CONFIG,\n        domain: CodeDomain.INTELLIGENCE,\n        template: '// Intentionally any: Intelligence system configuration with adaptive parameters',\n        eslintDisableComment: '// eslint-disable-next-line @typescript-eslint/no-explicit-any',\n        explanation: 'Intelligence systems require flexible configuration for learning algorithms'\n      },\n\n      // Legacy Compatibility Templates\n      {\n        category: AnyTypeCategory.LEGACY_COMPATIBILITY,\n        domain: CodeDomain.UTILITY,\n        template: '// Intentionally any: Legacy compatibility layer for gradual migration',\n        eslintDisableComment: '// eslint-disable-next-line @typescript-eslint/no-explicit-any',\n        explanation: 'Maintains compatibility with existing untyped code during migration'\n      },\n\n      // Component Templates\n      {\n        category: AnyTypeCategory.EXTERNAL_API,\n        domain: CodeDomain.COMPONENT,\n        template: '// Intentionally any: React component props with dynamic external data',\n        eslintDisableComment: '// eslint-disable-next-line @typescript-eslint/no-explicit-any',\n        explanation: 'Component receives data from external sources with varying structures'\n      },\n\n      // Default fallback template\n      {\n        category: AnyTypeCategory.LEGACY_COMPATIBILITY,\n        domain: CodeDomain.UTILITY,\n        template: '// Intentionally any: Requires flexible typing for specific use case',\n        eslintDisableComment: '// eslint-disable-next-line @typescript-eslint/no-explicit-any',\n        explanation: 'Type flexibility needed for this specific implementation'\n      }\n    ];\n\n    templates.forEach(template => {\n      const key = `${template.category}_${template.domain}`;\n      this.templates.set(key, template);\n    });\n  }\n\n  /**\n   * Generate documentation for an intentional any type\n   */\n  async generateDocumentation(\n    classification: AnyTypeClassification,\n    context: ClassificationContext\n  ): Promise<DocumentationResult> {\n    try {\n      if (!classification.isIntentional || !classification.requiresDocumentation) {\n        return {\n          filePath: context.filePath,\n          lineNumber: context.lineNumber,\n          originalCode: context.codeSnippet,\n          documentedCode: context.codeSnippet,\n          commentAdded: '',\n          success: false,\n          error: 'Type is not intentional or does not require documentation'\n        };\n      }\n\n      // Skip if already has adequate documentation\n      if (context.hasExistingComment && this.isCommentAdequate(context.existingComment || '')) {\n        return {\n          filePath: context.filePath,\n          lineNumber: context.lineNumber,\n          originalCode: context.codeSnippet,\n          documentedCode: context.codeSnippet,\n          commentAdded: context.existingComment || '',\n          success: true\n        };\n      }\n\n      const template = this.getTemplate(classification.category, context.domainContext.domain);\n      const fileContent = await fs.readFile(context.filePath, 'utf-8');\n      const lines = fileContent.split('\\n');\n\n      // Generate documentation comment\n      const documentationComment = this.generateComment(template, classification, context);\n      const eslintDisableComment = template.eslintDisableComment;\n\n      // Insert documentation\n      const { updatedLines, insertedComment } = this.insertDocumentation(\n        lines,\n        context.lineNumber,\n        documentationComment,\n        eslintDisableComment\n      );\n\n      // Write updated file\n      const updatedContent = updatedLines.join('\\n');\n      await fs.writeFile(context.filePath, updatedContent, 'utf-8');\n\n      this.processedFiles.add(context.filePath);\n\n      return {\n        filePath: context.filePath,\n        lineNumber: context.lineNumber,\n        originalCode: context.codeSnippet,\n        documentedCode: updatedLines[context.lineNumber - 1] || context.codeSnippet,\n        commentAdded: insertedComment,\n        eslintDisableAdded: eslintDisableComment,\n        success: true\n      };\n\n    } catch (error) {\n      return {\n        filePath: context.filePath,\n        lineNumber: context.lineNumber,\n        originalCode: context.codeSnippet,\n        documentedCode: context.codeSnippet,\n        commentAdded: '',\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Validate existing documentation quality\n   */\n  async validateDocumentation(context: ClassificationContext): Promise<DocumentationValidation> {\n    const hasComment = context.hasExistingComment;\n    const comment = context.existingComment || '';\n\n    // Check for ESLint disable comment\n    const fileContent = await fs.readFile(context.filePath, 'utf-8');\n    const lines = fileContent.split('\\n');\n    const lineIndex = context.lineNumber - 1;\n\n    const hasEslintDisable = this.hasEslintDisableComment(lines, lineIndex);\n    const eslintDisableHasExplanation = hasEslintDisable &&\n      this.eslintDisableHasExplanation(lines, lineIndex);\n\n    // Assess comment quality\n    const commentQuality = this.assessCommentQuality(comment);\n\n    // Check completeness\n    const isComplete = hasComment &&\n      commentQuality !== 'poor' &&\n      hasEslintDisable &&\n      eslintDisableHasExplanation;\n\n    // Generate suggestions\n    const suggestions = this.generateSuggestions(\n      hasComment,\n      commentQuality,\n      hasEslintDisable,\n      eslintDisableHasExplanation\n    );\n\n    return {\n      hasComment,\n      commentQuality,\n      hasEslintDisable,\n      eslintDisableHasExplanation,\n      isComplete,\n      suggestions\n    };\n  }\n\n  /**\n   * Generate comprehensive documentation report\n   */\n  async generateReport(): Promise<DocumentationReport> {\n    // This would typically scan the entire codebase\n    // For now, we'll return a basic structure\n    const report: DocumentationReport = {\n      totalIntentionalAnyTypes: 0,\n      documentedTypes: 0,\n      undocumentedTypes: 0,\n      documentationCoverage: 0,\n      qualityBreakdown: {\n        poor: 0,\n        fair: 0,\n        good: 0,\n        excellent: 0\n      },\n      undocumentedFiles: [],\n      recommendations: [\n        'Add explanatory comments for all intentional any types',\n        'Include ESLint disable comments with explanations',\n        'Use domain-specific documentation templates',\n        'Regularly validate documentation completeness'\n      ]\n    };\n\n    return report;\n  }\n\n  /**\n   * Get appropriate template for category and domain\n   */\n  private getTemplate(category: AnyTypeCategory, domain: CodeDomain): DocumentationTemplate {\n    const key = `${category}_${domain}`;\n    const template = this.templates.get(key);\n\n    if (template) {\n      return template;\n    }\n\n    // Try with default domain\n    const defaultKey = `${category}_${CodeDomain.UTILITY}`;\n    const defaultTemplate = this.templates.get(defaultKey);\n\n    if (defaultTemplate) {\n      return defaultTemplate;\n    }\n\n    // Fallback to generic template\n    return {\n      category,\n      domain,\n      template: '// Intentionally any: Requires flexible typing for specific use case',\n      eslintDisableComment: '// eslint-disable-next-line @typescript-eslint/no-explicit-any',\n      explanation: 'Type flexibility needed for this specific implementation'\n    };\n  }\n\n  /**\n   * Generate contextual comment based on template and classification\n   */\n  private generateComment(\n    template: DocumentationTemplate,\n    classification: AnyTypeClassification,\n    context: ClassificationContext\n  ): string {\n    let comment = template.template;\n\n    // Add specific reasoning if available\n    if (classification.reasoning && classification.reasoning !== template.explanation) {\n      comment += ` - ${classification.reasoning}`;\n    }\n\n    // Add domain-specific context\n    if (context.domainContext.preservationReasons.length > 0) {\n      const reason = context.domainContext.preservationReasons[0];\n      if (!comment.includes(reason)) {\n        comment += ` (${reason})`;\n      }\n    }\n\n    return comment;\n  }\n\n  /**\n   * Insert documentation into file lines\n   */\n  private insertDocumentation(\n    lines: string[],\n    lineNumber: number,\n    comment: string,\n    eslintDisable?: string\n  ): { updatedLines: string[]; insertedComment: string } {\n    const lineIndex = lineNumber - 1;\n    const updatedLines = [...lines];\n    const indentation = this.getIndentation(lines[lineIndex] || '');\n\n    let insertIndex = lineIndex;\n    let insertedComment = comment;\n\n    // Check if there's already a comment on the previous line\n    if (lineIndex > 0 && lines[lineIndex - 1] && lines[lineIndex - 1].trim().startsWith('//')) {\n      // Replace existing comment\n      updatedLines[lineIndex - 1] = `${indentation}${comment}`;\n    } else {\n      // Insert new comment\n      updatedLines.splice(insertIndex, 0, `${indentation}${comment}`);\n      insertIndex++;\n    }\n\n    // Add ESLint disable comment if needed\n    if (eslintDisable && !this.hasEslintDisableComment(lines, lineIndex)) {\n      updatedLines.splice(insertIndex, 0, `${indentation}${eslintDisable}`);\n      insertedComment += `\\n${indentation}${eslintDisable}`;\n    }\n\n    return { updatedLines, insertedComment };\n  }\n\n  /**\n   * Get indentation from a line\n   */\n  private getIndentation(line: string): string {\n    const match = line.match(/^(\\s*)/);\n    return match ? match[1] : '';\n  }\n\n  /**\n   * Check if comment is adequate\n   */\n  private isCommentAdequate(comment: string): boolean {\n    if (!comment || comment.trim().length < 15) return false;\n\n    const lowerComment = comment.toLowerCase();\n    return lowerComment.includes('intentionally') ||\n           lowerComment.includes('deliberately') ||\n           lowerComment.includes('required for') ||\n           lowerComment.includes('needed for');\n  }\n\n  /**\n   * Check if ESLint disable comment exists\n   */\n  private hasEslintDisableComment(lines: string[], lineIndex: number): boolean {\n    // Check current line and previous lines\n    for (let i = Math.max(0, lineIndex - 2); i <= lineIndex; i++) {\n      if (lines[i] && lines[i].includes('eslint-disable') &&\n          lines[i].includes('no-explicit-any')) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if ESLint disable comment has explanation\n   */\n  private eslintDisableHasExplanation(lines: string[], lineIndex: number): boolean {\n    for (let i = Math.max(0, lineIndex - 2); i <= lineIndex; i++) {\n      const line = lines[i];\n      if (line && line.includes('eslint-disable') && line.includes('no-explicit-any')) {\n        // Check if it's just the disable comment or has explanation\n        const parts = line.split('eslint-disable-next-line');\n        return parts.length > 1 && parts[1].trim().length > '@typescript-eslint/no-explicit-any'.length;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Assess comment quality\n   */\n  private assessCommentQuality(comment: string): 'poor' | 'fair' | 'good' | 'excellent' {\n    if (!comment || comment.trim().length < 10) {\n      return 'poor';\n    }\n\n    const lowerComment = comment.toLowerCase();\n    let score = 0;\n\n    // Check for intentionality indicators (required for fair+)\n    const hasIntentionality = lowerComment.includes('intentionally') || lowerComment.includes('deliberately');\n    if (hasIntentionality) {\n      score += 2;\n    }\n\n    // Check for explanation (required for good+)\n    const hasExplanation = lowerComment.includes('because') || lowerComment.includes('for') ||\n        lowerComment.includes('due to') || lowerComment.includes('requires');\n    if (hasExplanation) {\n      score += 2;\n    }\n\n    // Check for domain-specific context\n    const hasDomainContext = lowerComment.includes('api') || lowerComment.includes('external') ||\n        lowerComment.includes('dynamic') || lowerComment.includes('flexible');\n    if (hasDomainContext) {\n      score += 1;\n    }\n\n    // Check length and detail (required for excellent)\n    const hasDetail = comment.length > 80;\n    if (hasDetail) {\n      score += 1;\n    }\n\n    // More strict scoring\n    if (score >= 6) return 'excellent';  // All criteria + detail\n    if (score >= 4 && hasIntentionality && hasExplanation) return 'good';  // Intent + explanation + context\n    if (score >= 2 && hasIntentionality) return 'fair';  // At least intentionality\n    return 'poor';\n  }\n\n  /**\n   * Generate improvement suggestions\n   */\n  private generateSuggestions(\n    hasComment: boolean,\n    commentQuality: 'poor' | 'fair' | 'good' | 'excellent',\n    hasEslintDisable: boolean,\n    eslintDisableHasExplanation: boolean\n  ): string[] {\n    const suggestions: string[] = [];\n\n    if (!hasComment) {\n      suggestions.push('Add explanatory comment indicating intentional use of any type');\n    } else if (commentQuality === 'poor') {\n      suggestions.push('Improve comment quality with more detailed explanation');\n    } else if (commentQuality === 'fair') {\n      suggestions.push('Consider adding more context about why any type is necessary');\n    }\n\n    if (!hasEslintDisable) {\n      suggestions.push('Add ESLint disable comment to suppress warnings');\n    } else if (!eslintDisableHasExplanation) {\n      suggestions.push('Add explanation to ESLint disable comment');\n    }\n\n    if (suggestions.length === 0) {\n      suggestions.push('Documentation is complete and well-structured');\n    }\n\n    return suggestions;\n  }\n}\n"],"version":3}