2d414e033f8a4f1dcbed7fb611fc23d2
"use strict";
/**
 * Agent Hooks for Automated Quality Assurance
 *
 * This module provides React hooks that integrate with Kiro's agent hook system
 * for automatic planetary data validation, ingredient consistency checking,
 * and campaign trigger management.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAgentHookConfiguration = exports.useQualityMetricsHook = exports.useBuildQualityMonitoringHook = exports.useTypeScriptCampaignHook = exports.useIngredientConsistencyHook = exports.usePlanetaryDataValidationHook = exports.useAgentHooks = void 0;
const react_1 = require("react");
const automatedQualityAssurance_1 = require("@/utils/automatedQualityAssurance");
const logger_1 = require("@/utils/logger");
/**
 * Main agent hook for automated quality assurance integration
 */
function useAgentHooks(config = {}) {
    const defaultConfig = {
        enablePlanetaryValidation: true,
        enableIngredientValidation: true,
        enableCampaignTriggers: true,
        enablePerformanceMonitoring: true,
        validationInterval: 5, // 5 minutes
    };
    const finalConfig = { ...defaultConfig, ...config };
    const qa = (0, automatedQualityAssurance_1.getAutomatedQualityAssurance)();
    const [hookState, setHookState] = (0, react_1.useState)({
        isActive: false,
        lastValidation: 0,
        validationResults: {},
        campaignTriggers: [],
        qualityMetrics: qa.getQualityMetrics(),
    });
    const intervalRef = (0, react_1.useRef)(null);
    // Start agent hooks
    const startAgentHooks = (0, react_1.useCallback)(() => {
        if (hookState.isActive)
            return;
        setHookState(prev => ({ ...prev, isActive: true }));
        // Set up validation interval
        intervalRef.current = setInterval(async () => {
            try {
                const results = {};
                // Planetary data validation
                if (finalConfig.enablePlanetaryValidation) {
                    const planetaryResult = await qa.validatePlanetaryData();
                    results.planetary = planetaryResult;
                    if (!planetaryResult.isValid) {
                        logger_1.logger.warn('Planetary data validation failed:', planetaryResult.issues);
                    }
                }
                // TypeScript error threshold check
                if (finalConfig.enableCampaignTriggers) {
                    const trigger = await qa.checkTypeScriptErrorThreshold();
                    if (trigger === null || trigger === void 0 ? void 0 : trigger.triggered) {
                        logger_1.logger.warn('TypeScript campaign trigger activated:', trigger);
                    }
                }
                // Update state
                setHookState(prev => ({
                    ...prev,
                    lastValidation: Date.now(),
                    validationResults: { ...prev.validationResults, ...results },
                    campaignTriggers: qa.getActiveCampaignTriggers(),
                    qualityMetrics: qa.getQualityMetrics(),
                }));
                logger_1.logger.debug('Agent hooks validation cycle completed');
            }
            catch (error) {
                logger_1.logger.error('Error in agent hooks validation cycle:', error);
            }
        }, finalConfig.validationInterval * 60 * 1000);
        logger_1.logger.info('Agent hooks started with config:', finalConfig);
    }, [finalConfig, hookState.isActive, qa]);
    // Stop agent hooks
    const stopAgentHooks = (0, react_1.useCallback)(() => {
        if (intervalRef.current) {
            clearInterval(intervalRef.current);
            intervalRef.current = null;
        }
        setHookState(prev => ({ ...prev, isActive: false }));
        logger_1.logger.info('Agent hooks stopped');
    }, []);
    // Manual validation trigger
    const triggerValidation = (0, react_1.useCallback)(async (type) => {
        try {
            const results = {};
            if (!type || type === 'all' || type === 'planetary') {
                results.planetary = await qa.validatePlanetaryData();
            }
            if (!type || type === 'all' || type === 'typescript') {
                const trigger = await qa.checkTypeScriptErrorThreshold();
                if (trigger) {
                    setHookState(prev => ({
                        ...prev,
                        campaignTriggers: [...prev.campaignTriggers, trigger],
                    }));
                }
            }
            setHookState(prev => ({
                ...prev,
                lastValidation: Date.now(),
                validationResults: { ...prev.validationResults, ...results },
                qualityMetrics: qa.getQualityMetrics(),
            }));
            logger_1.logger.debug('Manual validation triggered:', { type, results });
            return results;
        }
        catch (error) {
            logger_1.logger.error('Error in manual validation:', error);
            throw error;
        }
    }, [qa]);
    // Cleanup on unmount
    (0, react_1.useEffect)(() => {
        return () => {
            stopAgentHooks();
        };
    }, [stopAgentHooks]);
    return {
        hookState,
        startAgentHooks,
        stopAgentHooks,
        triggerValidation,
        isActive: hookState.isActive,
    };
}
exports.useAgentHooks = useAgentHooks;
/**
 * Agent hook specifically for planetary data validation
 */
function usePlanetaryDataValidationHook(autoStart = true) {
    var _a;
    const qa = (0, automatedQualityAssurance_1.getAutomatedQualityAssurance)();
    const [validationResult, setValidationResult] = (0, react_1.useState)(null);
    const [isValidating, setIsValidating] = (0, react_1.useState)(false);
    const validatePlanetaryData = (0, react_1.useCallback)(async (date) => {
        setIsValidating(true);
        try {
            const result = await qa.validatePlanetaryData(date);
            setValidationResult(result);
            if (!result.isValid) {
                logger_1.logger.warn('Planetary data validation hook detected issues:', result.issues);
                // Dispatch event for external systems
                if (typeof window !== 'undefined') {
                    window.dispatchEvent(new CustomEvent('planetary-validation-failed', {
                        detail: result,
                    }));
                }
            }
            return result;
        }
        catch (error) {
            logger_1.logger.error('Error in planetary data validation hook:', error);
            throw error;
        }
        finally {
            setIsValidating(false);
        }
    }, [qa]);
    // Auto-start validation
    (0, react_1.useEffect)(() => {
        if (autoStart) {
            validatePlanetaryData();
        }
    }, [autoStart, validatePlanetaryData]);
    return {
        validationResult,
        isValidating,
        validatePlanetaryData,
        isValid: (_a = validationResult === null || validationResult === void 0 ? void 0 : validationResult.isValid) !== null && _a !== void 0 ? _a : null,
    };
}
exports.usePlanetaryDataValidationHook = usePlanetaryDataValidationHook;
/**
 * Agent hook for ingredient consistency checking
 */
function useIngredientConsistencyHook() {
    var _a;
    const qa = (0, automatedQualityAssurance_1.getAutomatedQualityAssurance)();
    const [validationResult, setValidationResult] = (0, react_1.useState)(null);
    const [isValidating, setIsValidating] = (0, react_1.useState)(false);
    const validateIngredients = (0, react_1.useCallback)(async (ingredients) => {
        if (ingredients.length === 0) {
            return null;
        }
        setIsValidating(true);
        try {
            const result = qa.validateIngredientConsistency(ingredients);
            setValidationResult(result);
            if (!result.isValid) {
                logger_1.logger.warn('Ingredient consistency validation detected issues:', result.issues);
                // Dispatch event for external systems
                if (typeof window !== 'undefined') {
                    window.dispatchEvent(new CustomEvent('ingredient-validation-failed', {
                        detail: { result, ingredients },
                    }));
                }
            }
            return result;
        }
        catch (error) {
            logger_1.logger.error('Error in ingredient consistency validation:', error);
            throw error;
        }
        finally {
            setIsValidating(false);
        }
    }, [qa]);
    return {
        validationResult,
        isValidating,
        validateIngredients,
        isValid: (_a = validationResult === null || validationResult === void 0 ? void 0 : validationResult.isValid) !== null && _a !== void 0 ? _a : null,
    };
}
exports.useIngredientConsistencyHook = useIngredientConsistencyHook;
/**
 * Agent hook for TypeScript campaign triggers
 */
function useTypeScriptCampaignHook(autoCheck = true) {
    var _a;
    const qa = (0, automatedQualityAssurance_1.getAutomatedQualityAssurance)();
    const [campaignTrigger, setCampaignTrigger] = (0, react_1.useState)(null);
    const [isChecking, setIsChecking] = (0, react_1.useState)(false);
    const checkErrorThreshold = (0, react_1.useCallback)(async () => {
        setIsChecking(true);
        try {
            const trigger = await qa.checkTypeScriptErrorThreshold();
            setCampaignTrigger(trigger);
            if (trigger === null || trigger === void 0 ? void 0 : trigger.triggered) {
                logger_1.logger.warn('TypeScript campaign trigger activated:', trigger);
                // Dispatch event for campaign system integration
                if (typeof window !== 'undefined') {
                    window.dispatchEvent(new CustomEvent('typescript-campaign-trigger', {
                        detail: trigger,
                    }));
                }
            }
            return trigger;
        }
        catch (error) {
            logger_1.logger.error('Error checking TypeScript error threshold:', error);
            throw error;
        }
        finally {
            setIsChecking(false);
        }
    }, [qa]);
    // Auto-check on mount and periodically
    (0, react_1.useEffect)(() => {
        if (autoCheck) {
            checkErrorThreshold();
            // Check every 10 minutes
            const interval = setInterval(checkErrorThreshold, 10 * 60 * 1000);
            return () => clearInterval(interval);
        }
    }, [autoCheck, checkErrorThreshold]);
    return {
        campaignTrigger,
        isChecking,
        checkErrorThreshold,
        isTriggered: (_a = campaignTrigger === null || campaignTrigger === void 0 ? void 0 : campaignTrigger.triggered) !== null && _a !== void 0 ? _a : false,
    };
}
exports.useTypeScriptCampaignHook = useTypeScriptCampaignHook;
/**
 * Agent hook for build quality monitoring
 */
function useBuildQualityMonitoringHook() {
    var _a;
    const qa = (0, automatedQualityAssurance_1.getAutomatedQualityAssurance)();
    const [qualityResult, setQualityResult] = (0, react_1.useState)(null);
    const [isMonitoring, setIsMonitoring] = (0, react_1.useState)(false);
    const monitorBuildQuality = (0, react_1.useCallback)(async (buildMetrics) => {
        setIsMonitoring(true);
        try {
            const result = qa.monitorBuildQuality(buildMetrics);
            setQualityResult(result);
            if (!result.isValid) {
                logger_1.logger.warn('Build quality monitoring detected issues:', result.issues);
                // Dispatch event for external systems
                if (typeof window !== 'undefined') {
                    window.dispatchEvent(new CustomEvent('build-quality-issues', {
                        detail: { result, buildMetrics },
                    }));
                }
            }
            return result;
        }
        catch (error) {
            logger_1.logger.error('Error in build quality monitoring:', error);
            throw error;
        }
        finally {
            setIsMonitoring(false);
        }
    }, [qa]);
    return {
        qualityResult,
        isMonitoring,
        monitorBuildQuality,
        isQualityGood: (_a = qualityResult === null || qualityResult === void 0 ? void 0 : qualityResult.isValid) !== null && _a !== void 0 ? _a : null,
    };
}
exports.useBuildQualityMonitoringHook = useBuildQualityMonitoringHook;
/**
 * Agent hook for comprehensive quality metrics monitoring
 */
function useQualityMetricsHook(updateInterval = 30000) {
    // 30 seconds
    const qa = (0, automatedQualityAssurance_1.getAutomatedQualityAssurance)();
    const [metrics, setMetrics] = (0, react_1.useState)(qa.getQualityMetrics());
    const [lastUpdate, setLastUpdate] = (0, react_1.useState)(Date.now());
    const updateMetrics = (0, react_1.useCallback)(() => {
        const newMetrics = qa.getQualityMetrics();
        setMetrics(newMetrics);
        setLastUpdate(Date.now());
    }, [qa]);
    // Update metrics periodically
    (0, react_1.useEffect)(() => {
        const interval = setInterval(updateMetrics, updateInterval);
        return () => clearInterval(interval);
    }, [updateMetrics, updateInterval]);
    return {
        metrics,
        lastUpdate,
        updateMetrics,
    };
}
exports.useQualityMetricsHook = useQualityMetricsHook;
/**
 * Agent hook configuration management
 */
function useAgentHookConfiguration() {
    const qa = (0, automatedQualityAssurance_1.getAutomatedQualityAssurance)();
    const updateConfiguration = (0, react_1.useCallback)((config) => {
        qa.updateConfig(config);
        logger_1.logger.info('Agent hook configuration updated:', config);
    }, [qa]);
    const getActiveTriggers = (0, react_1.useCallback)(() => {
        return qa.getActiveCampaignTriggers();
    }, [qa]);
    return {
        updateConfiguration,
        getActiveTriggers,
    };
}
exports.useAgentHookConfiguration = useAgentHookConfiguration;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,