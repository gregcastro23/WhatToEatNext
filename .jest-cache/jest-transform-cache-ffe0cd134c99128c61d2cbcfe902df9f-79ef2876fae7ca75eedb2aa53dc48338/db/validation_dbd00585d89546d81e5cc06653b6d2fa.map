{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/validation.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/validation.ts"],"sourcesContent":["import { z } from 'zod';\nimport type { Recipe } from '@/types/recipe';\n\nexport const recipeSchema = z.object({\n  name: z.string().min(1),\n  description: z.string().optional(),\n  cuisine: z.string().optional(),\n  regionalCuisine: z.string().optional(),\n  ingredients: z.array(z.object({\n    name: z.string(),\n    amount: z.string(),\n    unit: z.string(),\n    category: z.string(),\n  })),\n  mealType: z.array(z.string()),\n  season: z.array(z.string()).optional(),\n  timeToMake: z.string(),\n  elementalProperties: z.object({\n    Fire: z.number(),\n    Earth: z.number(),\n    Air: z.number(),\n    Water: z.number(),\n  }).optional(),\n  properties: z.object({\n    light: z.boolean().optional(),\n    festive: z.boolean().optional(),\n    grounding: z.boolean().optional(),\n    comforting: z.boolean().optional(),\n    luxurious: z.boolean().optional(),\n    transformative: z.boolean().optional(),\n  }).optional(),\n  nutrition: z.object({\n    calories: z.number().optional(),\n    protein: z.number().optional(),\n    balanced: z.boolean().optional(),\n  }).optional(),\n  traditional: z.number().optional(),\n  popularity: z.number().optional(),\n});\n\nexport function validateRecipe(recipe: Recipe) {\n  return recipeSchema.safeParse(recipe);\n}\n\n// Re-export validation functions from elemental utilities\nexport { isElementalProperties } from './elemental/elementalUtils';\n\n// Type guard to check if a string is a valid elemental property key\nexport function isElementalPropertyKey(key: unknown): key is keyof import('@/types/alchemy').ElementalProperties {\n  return typeof key === 'string' && ['Fire', 'Water', 'Earth', 'Air'].includes(key);\n}\n\n// Logs unexpected values for debugging purposes\nexport function logUnexpectedValue(context: string, details: unknown): void {\n  console.warn(`Unexpected value in ${context}:`, details);\n}\n\n/**\n * Validates and provides default values for any type\n * @param value The value to validate\n * @param defaultValue The default value to use if validation fails\n * @param validator Optional validation function\n * @returns The validated value or default\n */\nexport function validateOrDefault<T>(\n  value: unknown,\n  defaultValue: T,\n  validator?: (val: unknown) => val is T\n): T {\n  try {\n    // If no validator provided, just check if value is not null/undefined\n    if (!validator) {\n      return value !== null && value !== undefined ? (value as T) : defaultValue;\n    }\n    \n    // Use the provided validator\n    return validator(value) ? value : defaultValue;\n  } catch (error) {\n    logUnexpectedValue('validateOrDefault', { value, error });\n    return defaultValue;\n  }\n} "],"version":3}