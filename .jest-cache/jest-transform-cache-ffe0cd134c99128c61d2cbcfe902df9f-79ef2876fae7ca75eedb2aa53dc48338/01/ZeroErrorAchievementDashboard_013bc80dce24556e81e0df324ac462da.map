{"file":"/Users/GregCastro/Desktop/WhatToEatNext/.consolidation-backups-2025-08-23T17-54-10-092Z/src/services/linting/ZeroErrorAchievementDashboard.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/.consolidation-backups-2025-08-23T17-54-10-092Z/src/services/linting/ZeroErrorAchievementDashboard.ts"],"sourcesContent":["/**\n * Zero-Error Achievement Dashboard\n *\n * Comprehensive monitoring system for achieving and maintaining\n * zero linting errors with real-time metrics, alerting, and\n * automated maintenance procedures.\n */\n\nimport { execSync } from 'child_process';\nimport { writeFileSync, readFileSync, existsSync, mkdirSync } from 'fs';\nimport { join } from 'path';\n\nimport { LintingAlertingSystem } from './LintingAlertingSystem';\nimport {\n  LintingValidationDashboard,\n  LintingMetrics,\n  Alert,\n  ValidationResult,\n} from './LintingValidationDashboard';\n\nexport interface ZeroErrorTarget {\n  metric: string;\n  currentValue: number;\n  targetValue: number;\n  deadline: Date;\n  priority: 'critical' | 'high' | 'medium' | 'low';\n  strategy: string;\n  progress: number; // 0-100%\n  estimatedCompletion: Date;\n}\n\nexport interface MaintenanceProcedure {\n  id: string;\n  name: string;\n  description: string;\n  frequency: 'daily' | 'weekly' | 'monthly' | 'quarterly';\n  lastRun: Date | null;\n  nextRun: Date;\n  automated: boolean;\n  procedure: () => Promise<MaintenanceResult>;\n}\n\nexport interface MaintenanceResult {\n  success: boolean;\n  duration: number;\n  issues: string[];\n  improvements: string[];\n  nextActions: string[];\n}\n\nexport interface TrendAnalysis {\n  metric: string;\n  trend: 'improving' | 'stable' | 'degrading';\n  velocity: number; // change per day\n  projection: {\n    sevenDays: number;\n    thirtyDays: number;\n    ninetyDays: number;\n  };\n  confidence: number; // 0-1\n}\n\nexport interface QualityGate {\n  id: string;\n  name: string;\n  condition: string;\n  threshold: number;\n  status: 'passing' | 'failing' | 'warning';\n  blocksDeployment: boolean;\n  lastCheck: Date;\n}\n\nexport class ZeroErrorAchievementDashboard {\n  private readonly dashboardDir = '.kiro/dashboard';\n  private readonly metricsDir = '.kiro/metrics';\n  private readonly configFile = join(this.dashboardDir, 'zero-error-config.json');\n  private readonly targetsFile = join(this.dashboardDir, 'zero-error-targets.json');\n  private readonly trendsFile = join(this.dashboardDir, 'trend-analysis.json');\n  private readonly qualityGatesFile = join(this.dashboardDir, 'quality-gates.json');\n\n  private validationDashboard: LintingValidationDashboard;\n  private alertingSystem: LintingAlertingSystem;\n  private maintenanceProcedures: Map<string, MaintenanceProcedure> = new Map();\n\n  constructor() {\n    this.ensureDirectoriesExist();\n    this.validationDashboard = new LintingValidationDashboard();\n    this.alertingSystem = new LintingAlertingSystem();\n    this.initializeMaintenanceProcedures();\n    this.initializeQualityGates();\n  }\n\n  /**\n   * Generate comprehensive zero-error achievement dashboard\n   */\n  async generateDashboard(): Promise<void> {\n    console.log('🎯 Generating Zero-Error Achievement Dashboard...\\n');\n\n    const startTime = Date.now();\n\n    // Collect current metrics\n    const validationResult = await this.validationDashboard.runComprehensiveValidation();\n\n    // Analyze trends\n    const trendAnalysis = await this.analyzeTrends(validationResult.metrics);\n\n    // Update targets\n    const targets = await this.updateTargets(validationResult.metrics);\n\n    // Check quality gates\n    const qualityGates = await this.checkQualityGates(validationResult.metrics);\n\n    // Run maintenance procedures\n    const maintenanceResults = await this.runScheduledMaintenance();\n\n    // Generate comprehensive report\n    await this.generateComprehensiveReport({\n      validationResult,\n      trendAnalysis,\n      targets,\n      qualityGates,\n      maintenanceResults,\n      generationTime: Date.now() - startTime,\n    });\n\n    // Process alerts\n    if (validationResult.alerts.length > 0) {\n      await this.alertingSystem.processAlerts(validationResult.alerts, validationResult.metrics);\n    }\n\n    console.log(`✅ Dashboard generated in ${Date.now() - startTime}ms`);\n  }\n\n  /**\n   * Real-time monitoring with continuous updates\n   */\n  async startRealTimeMonitoring(intervalMinutes: number = 5): Promise<void> {\n    console.log(`👀 Starting real-time monitoring (${intervalMinutes} minute intervals)...\\n`);\n\n    let lastMetrics: LintingMetrics | null = null;\n\n    const monitoringLoop = async () => {\n      try {\n        const validationResult = await this.validationDashboard.runComprehensiveValidation();\n        const currentMetrics = validationResult.metrics;\n\n        // Detect significant changes\n        if (lastMetrics) {\n          const significantChanges = this.detectSignificantChanges(lastMetrics, currentMetrics);\n\n          if (significantChanges.length > 0) {\n            console.log(`\\n⚠️  [${new Date().toISOString()}] Significant changes detected:`);\n            for (const change of significantChanges) {\n              console.log(`   ${change}`);\n            }\n\n            // Trigger immediate dashboard update\n            await this.generateDashboard();\n          }\n        }\n\n        // Check for critical issues\n        const criticalIssues = this.identifyCriticalIssues(currentMetrics);\n        if (criticalIssues.length > 0) {\n          console.log(`\\n🚨 [${new Date().toISOString()}] CRITICAL ISSUES:`);\n          for (const issue of criticalIssues) {\n            console.log(`   ${issue}`);\n          }\n        }\n\n        // Update real-time status\n        await this.updateRealTimeStatus(currentMetrics);\n\n        lastMetrics = currentMetrics;\n      } catch (error) {\n        console.error(`❌ [${new Date().toISOString()}] Monitoring error:`, error);\n      }\n    };\n\n    // Initial run\n    await monitoringLoop();\n\n    // Schedule periodic runs\n    setInterval(monitoringLoop, intervalMinutes * 60 * 1000);\n\n    console.log('✅ Real-time monitoring started');\n  }\n\n  /**\n   * Analyze trends in linting metrics\n   */\n  private async analyzeTrends(currentMetrics: LintingMetrics): Promise<TrendAnalysis[]> {\n    const history = this.loadMetricsHistory();\n\n    if (history.length < 3) {\n      return []; // Need at least 3 data points for trend analysis\n    }\n\n    const trends: TrendAnalysis[] = [];\n    const metricsToAnalyze = [\n      'totalIssues',\n      'errors',\n      'parserErrors',\n      'explicitAnyErrors',\n      'qualityScore',\n    ];\n\n    for (const metric of metricsToAnalyze) {\n      const values = history.slice(-10).map(h => this.getMetricValue(h, metric));\n      const trend = this.calculateTrend(values);\n\n      trends.push({\n        metric,\n        trend: trend.direction,\n        velocity: trend.velocity,\n        projection: this.projectFuture(trend.velocity, this.getMetricValue(currentMetrics, metric)),\n        confidence: trend.confidence,\n      });\n    }\n\n    // Store trend analysis\n    writeFileSync(this.trendsFile, JSON.stringify(trends, null, 2));\n\n    return trends;\n  }\n\n  /**\n   * Update zero-error targets based on current progress\n   */\n  private async updateTargets(currentMetrics: LintingMetrics): Promise<ZeroErrorTarget[]> {\n    const existingTargets = this.loadTargets();\n    const updatedTargets: ZeroErrorTarget[] = [];\n\n    const defaultTargets = [\n      {\n        metric: 'parserErrors',\n        targetValue: 0,\n        deadline: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 1 week\n        priority: 'critical' as const,\n        strategy: 'Immediate syntax error fixes with TypeScript compiler validation',\n      },\n      {\n        metric: 'explicitAnyErrors',\n        targetValue: 0,\n        deadline: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 1 month\n        priority: 'high' as const,\n        strategy: 'Systematic type inference and interface generation',\n      },\n      {\n        metric: 'totalIssues',\n        targetValue: 500,\n        deadline: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000), // 3 months\n        priority: 'medium' as const,\n        strategy: 'Comprehensive automated fixing with domain-specific preservation',\n      },\n      {\n        metric: 'qualityScore',\n        targetValue: 95,\n        deadline: new Date(Date.now() + 60 * 24 * 60 * 60 * 1000), // 2 months\n        priority: 'high' as const,\n        strategy: 'Multi-phase quality improvement with performance optimization',\n      },\n    ];\n\n    for (const defaultTarget of defaultTargets) {\n      const currentValue = this.getMetricValue(currentMetrics, defaultTarget.metric);\n      const existingTarget = existingTargets.find(t => t.metric === defaultTarget.metric);\n\n      const progress = this.calculateProgress(\n        currentValue,\n        defaultTarget.targetValue,\n        defaultTarget.metric,\n      );\n      const estimatedCompletion = this.estimateCompletion(\n        currentValue,\n        defaultTarget.targetValue,\n        defaultTarget.deadline,\n      );\n\n      updatedTargets.push({\n        ...defaultTarget,\n        currentValue,\n        progress,\n        estimatedCompletion,\n        ...(existingTarget && { deadline: existingTarget.deadline }), // Preserve custom deadlines\n      });\n    }\n\n    // Store updated targets\n    writeFileSync(this.targetsFile, JSON.stringify(updatedTargets, null, 2));\n\n    return updatedTargets;\n  }\n\n  /**\n   * Check quality gates status\n   */\n  private async checkQualityGates(currentMetrics: LintingMetrics): Promise<QualityGate[]> {\n    const gates: QualityGate[] = [\n      {\n        id: 'no-parser-errors',\n        name: 'Zero Parser Errors',\n        condition: 'parserErrors === 0',\n        threshold: 0,\n        status: 'passing',\n        blocksDeployment: true,\n        lastCheck: new Date(),\n      },\n      {\n        id: 'explicit-any-limit',\n        name: 'Explicit Any Limit',\n        condition: 'explicitAnyErrors <= 100',\n        threshold: 100,\n        status: 'passing',\n        blocksDeployment: true,\n        lastCheck: new Date(),\n      },\n      {\n        id: 'quality-score-minimum',\n        name: 'Minimum Quality Score',\n        condition: 'qualityScore >= 80',\n        threshold: 80,\n        status: 'passing',\n        blocksDeployment: false,\n        lastCheck: new Date(),\n      },\n      {\n        id: 'performance-threshold',\n        name: 'Performance Threshold',\n        condition: 'lintingDuration <= 30000',\n        threshold: 30000,\n        status: 'passing',\n        blocksDeployment: false,\n        lastCheck: new Date(),\n      },\n    ];\n\n    // Evaluate each gate\n    for (const gate of gates) {\n      const metricValue = this.getMetricValue(currentMetrics, gate.condition.split(' ')[0]);\n\n      switch (gate.id) {\n        case 'no-parser-errors':\n          gate.status = currentMetrics.parserErrors === 0 ? 'passing' : 'failing';\n          break;\n        case 'explicit-any-limit':\n          gate.status =\n            currentMetrics.explicitAnyErrors <= 100\n              ? 'passing'\n              : currentMetrics.explicitAnyErrors <= 150\n                ? 'warning'\n                : 'failing';\n          break;\n        case 'quality-score-minimum':\n          gate.status =\n            currentMetrics.qualityScore >= 80\n              ? 'passing'\n              : currentMetrics.qualityScore >= 70\n                ? 'warning'\n                : 'failing';\n          break;\n        case 'performance-threshold':\n          gate.status =\n            currentMetrics.performanceMetrics.lintingDuration <= 30000\n              ? 'passing'\n              : currentMetrics.performanceMetrics.lintingDuration <= 45000\n                ? 'warning'\n                : 'failing';\n          break;\n      }\n    }\n\n    // Store quality gates status\n    writeFileSync(this.qualityGatesFile, JSON.stringify(gates, null, 2));\n\n    return gates;\n  }\n\n  /**\n   * Run scheduled maintenance procedures\n   */\n  private async runScheduledMaintenance(): Promise<Map<string, MaintenanceResult>> {\n    const results = new Map<string, MaintenanceResult>();\n    const now = new Date();\n\n    for (const [id, procedure] of this.maintenanceProcedures) {\n      if (procedure.automated && now >= procedure.nextRun) {\n        console.log(`🔧 Running maintenance: ${procedure.name}...`);\n\n        try {\n          const result = await procedure.procedure();\n          results.set(id, result);\n\n          // Update next run time\n          procedure.lastRun = now;\n          procedure.nextRun = this.calculateNextRun(now, procedure.frequency);\n\n          console.log(\n            `   ${result.success ? '✅' : '❌'} ${procedure.name} (${result.duration}ms)`,\n          );\n        } catch (error) {\n          console.error(`   ❌ ${procedure.name} failed:`, error);\n          results.set(id, {\n            success: false,\n            duration: 0,\n            issues: [(error as Error).toString()],\n            improvements: [],\n            nextActions: ['Investigate maintenance procedure failure'],\n          });\n        }\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Generate comprehensive dashboard report\n   */\n  private async generateComprehensiveReport(data: {\n    validationResult: ValidationResult;\n    trendAnalysis: TrendAnalysis[];\n    targets: ZeroErrorTarget[];\n    qualityGates: QualityGate[];\n    maintenanceResults: Map<string, MaintenanceResult>;\n    generationTime: number;\n  }): Promise<void> {\n    const reportPath = join(this.dashboardDir, 'zero-error-achievement-dashboard.md');\n\n    const report = `# 🎯 Zero-Error Achievement Dashboard\n\nGenerated: ${new Date().toISOString()}  \nGeneration Time: ${data.generationTime}ms\n\n## 📊 Executive Summary\n\n- **Overall Status**: ${this.getOverallStatus(data.validationResult, data.qualityGates)}\n- **Quality Score**: ${data.validationResult.metrics.qualityScore}/100 ${this.getScoreIcon(data.validationResult.metrics.qualityScore)}\n- **Zero-Error Progress**: ${this.calculateOverallProgress(data.targets)}%\n- **Quality Gates**: ${data.qualityGates.filter(g => g.status === 'passing').length}/${data.qualityGates.length} passing\n- **Critical Issues**: ${this.identifyCriticalIssues(data.validationResult.metrics).length}\n\n## 🎯 Zero-Error Targets\n\n${data.targets\n  .map(\n    target => `\n### ${target.metric.charAt(0).toUpperCase() + target.metric.slice(1)}\n- **Current**: ${target.currentValue}\n- **Target**: ${target.targetValue}\n- **Progress**: ${target.progress}% ${this.getProgressBar(target.progress)}\n- **Priority**: ${target.priority.toUpperCase()} ${this.getPriorityIcon(target.priority)}\n- **Deadline**: ${target.deadline.toLocaleDateString()}\n- **Est. Completion**: ${target.estimatedCompletion.toLocaleDateString()}\n- **Strategy**: ${target.strategy}\n`,\n  )\n  .join('')}\n\n## 📈 Trend Analysis\n\n${\n  data.trendAnalysis.length === 0\n    ? 'Insufficient data for trend analysis (need 3+ data points)'\n    : data.trendAnalysis\n        .map(\n          trend => `\n### ${trend.metric}\n- **Trend**: ${trend.trend.toUpperCase()} ${this.getTrendIcon(trend.trend)}\n- **Velocity**: ${trend.velocity.toFixed(2)} per day\n- **7-day projection**: ${trend.projection.sevenDays.toFixed(0)}\n- **30-day projection**: ${trend.projection.thirtyDays.toFixed(0)}\n- **Confidence**: ${(trend.confidence * 100).toFixed(0)}%\n`,\n        )\n        .join('')\n}\n\n## 🚦 Quality Gates\n\n${data.qualityGates\n  .map(\n    gate => `\n### ${gate.name}\n- **Status**: ${gate.status.toUpperCase()} ${this.getGateStatusIcon(gate.status)}\n- **Condition**: \\`${gate.condition}\\`\n- **Blocks Deployment**: ${gate.blocksDeployment ? '🚫 YES' : '✅ NO'}\n- **Last Check**: ${gate.lastCheck.toLocaleString()}\n`,\n  )\n  .join('')}\n\n## 🔍 Current Metrics Breakdown\n\n### Critical Issues\n- **Parser Errors**: ${data.validationResult.metrics.parserErrors} ${data.validationResult.metrics.parserErrors === 0 ? '✅' : '🚨'}\n- **TypeScript Errors**: ${data.validationResult.metrics.errors}\n- **Explicit Any Errors**: ${data.validationResult.metrics.explicitAnyErrors} ${data.validationResult.metrics.explicitAnyErrors < 100 ? '✅' : '⚡'}\n\n### Code Quality\n- **Import Order Issues**: ${data.validationResult.metrics.importOrderIssues}\n- **Unused Variables**: ${data.validationResult.metrics.unusedVariables}\n- **React Hooks Issues**: ${data.validationResult.metrics.reactHooksIssues}\n- **Console Statements**: ${data.validationResult.metrics.consoleStatements}\n\n### Domain-Specific\n- **Astrological Calculations**: ${data.validationResult.metrics.domainSpecificIssues.astrologicalCalculations}\n- **Campaign System**: ${data.validationResult.metrics.domainSpecificIssues.campaignSystem}\n- **Test Files**: ${data.validationResult.metrics.domainSpecificIssues.testFiles}\n\n### Performance\n- **Linting Duration**: ${data.validationResult.metrics.performanceMetrics.lintingDuration}ms\n- **Cache Hit Rate**: ${(data.validationResult.metrics.performanceMetrics.cacheHitRate * 100).toFixed(1)}%\n- **Memory Usage**: ${data.validationResult.metrics.performanceMetrics.memoryUsage.toFixed(1)}MB\n- **Files Processed**: ${data.validationResult.metrics.performanceMetrics.filesProcessed}\n\n## 🚨 Active Alerts\n\n${\n  data.validationResult.alerts.length === 0\n    ? '✅ No active alerts'\n    : data.validationResult.alerts\n        .map(\n          alert =>\n            `- **${alert.severity.toUpperCase()}**: ${alert.message} (${alert.currentValue}/${alert.threshold})`,\n        )\n        .join('\\n')\n}\n\n## 🔧 Maintenance Status\n\n${\n  data.maintenanceResults.size === 0\n    ? 'No maintenance procedures run this cycle'\n    : Array.from(data.maintenanceResults.entries())\n        .map(\n          ([id, result]) => `\n### ${this.maintenanceProcedures.get(id)?.name || id}\n- **Status**: ${result.success ? '✅ SUCCESS' : '❌ FAILED'}\n- **Duration**: ${result.duration}ms\n- **Issues**: ${result.issues.length === 0 ? 'None' : result.issues.join(', ')}\n- **Improvements**: ${result.improvements.length === 0 ? 'None' : result.improvements.join(', ')}\n`,\n        )\n        .join('')\n}\n\n## 💡 Immediate Actions Required\n\n${this.generateImmediateActions(data.validationResult.metrics, data.targets, data.qualityGates)}\n\n## 📋 Next Steps (Priority Order)\n\n${this.generateNextSteps(data.validationResult.metrics, data.targets, data.trendAnalysis)}\n\n## 🎯 Success Metrics Dashboard\n\n### Current vs Target\n- **Parser Errors**: ${data.validationResult.metrics.parserErrors}/0 (${data.validationResult.metrics.parserErrors === 0 ? '✅ ACHIEVED' : '🎯 IN PROGRESS'})\n- **Explicit Any**: ${data.validationResult.metrics.explicitAnyErrors}/0 (${Math.round((1 - data.validationResult.metrics.explicitAnyErrors / Math.max(data.validationResult.metrics.explicitAnyErrors, 1000)) * 100)}% progress)\n- **Quality Score**: ${data.validationResult.metrics.qualityScore}/95 (${Math.round((data.validationResult.metrics.qualityScore / 95) * 100)}% progress)\n- **Total Issues**: ${data.validationResult.metrics.totalIssues}/500 (${Math.round((1 - data.validationResult.metrics.totalIssues / Math.max(data.validationResult.metrics.totalIssues, 10000)) * 100)}% progress)\n\n### Performance Metrics\n- **Linting Speed**: ${data.validationResult.metrics.performanceMetrics.lintingDuration}ms (target: <15s)\n- **Cache Efficiency**: ${(data.validationResult.metrics.performanceMetrics.cacheHitRate * 100).toFixed(1)}% (target: >85%)\n- **Memory Usage**: ${data.validationResult.metrics.performanceMetrics.memoryUsage.toFixed(1)}MB (target: <256MB)\n\n---\n\n## 🔄 Automated Actions Available\n\n- **Fix Parser Errors**: \\`yarn tsc --noEmit && yarn lint:fix\\`\n- **Explicit Any Campaign**: \\`yarn lint:campaign explicit-any\\`\n- **Import Organization**: \\`yarn lint:fix --rule \"import/order\"\\`\n- **Performance Optimization**: \\`yarn lint:fast --cache\\`\n- **Comprehensive Cleanup**: \\`yarn lint:workflow-auto\\`\n\n## 📊 Historical Context\n\nThis dashboard tracks progress toward zero linting errors with enhanced ESLint configuration including:\n- React 19 & Next.js 15 compatibility\n- Enhanced TypeScript strict rules\n- Domain-specific configurations for astrological calculations\n- Performance optimizations (60-80% improvement)\n- Comprehensive safety protocols\n\n**Configuration Status**: ✅ Enhanced (January 2025)  \n**Performance**: ✅ Optimized (60-80% faster)  \n**Domain Rules**: ✅ Implemented (Astrological + Campaign)  \n**Safety Protocols**: ✅ Enhanced (Backup + Rollback)\n\n---\n\n*Dashboard auto-generated by Zero-Error Achievement System*  \n*Next update: ${new Date(Date.now() + 5 * 60 * 1000).toISOString()}*\n`;\n\n    writeFileSync(reportPath, report, 'utf8');\n\n    // Also generate JSON version for programmatic access\n    const jsonReport = {\n      timestamp: new Date().toISOString(),\n      generationTime: data.generationTime,\n      summary: {\n        overallStatus: this.getOverallStatus(data.validationResult, data.qualityGates),\n        qualityScore: data.validationResult.metrics.qualityScore,\n        zeroErrorProgress: this.calculateOverallProgress(data.targets),\n        qualityGatesPassing: data.qualityGates.filter(g => g.status === 'passing').length,\n        totalQualityGates: data.qualityGates.length,\n        criticalIssues: this.identifyCriticalIssues(data.validationResult.metrics).length,\n      },\n      metrics: data.validationResult.metrics,\n      targets: data.targets,\n      trends: data.trendAnalysis,\n      qualityGates: data.qualityGates,\n      alerts: data.validationResult.alerts,\n      maintenance: Object.fromEntries(data.maintenanceResults),\n    };\n\n    writeFileSync(\n      join(this.dashboardDir, 'zero-error-achievement-dashboard.json'),\n      JSON.stringify(jsonReport, null, 2),\n    );\n\n    console.log(`📊 Dashboard report generated: ${reportPath}`);\n  }\n\n  /**\n   * Initialize maintenance procedures\n   */\n  private initializeMaintenanceProcedures(): void {\n    // Daily procedures\n    this.maintenanceProcedures.set('daily-health-check', {\n      id: 'daily-health-check',\n      name: 'Daily Health Check',\n      description: 'Quick validation of parser errors and critical issues',\n      frequency: 'daily',\n      lastRun: null,\n      nextRun: new Date(),\n      automated: true,\n      procedure: async () => {\n        const startTime = Date.now();\n        const issues: string[] = [];\n        const improvements: string[] = [];\n\n        try {\n          // Check for parser errors\n          const tscOutput = execSync('yarn tsc --noEmit --skipLibCheck 2>&1 || true', {\n            encoding: 'utf8',\n          });\n          const parserErrors = (tscOutput.match(/error TS/g) || []).length;\n\n          if (parserErrors > 0) {\n            issues.push(`${parserErrors} parser errors detected`);\n          } else {\n            improvements.push('Zero parser errors maintained');\n          }\n\n          // Quick lint check\n          const lintOutput = execSync('yarn lint:summary 2>&1 || true', { encoding: 'utf8' });\n          if (lintOutput.includes('error')) {\n            issues.push('Linting errors detected in summary check');\n          }\n\n          return {\n            success: issues.length === 0,\n            duration: Date.now() - startTime,\n            issues,\n            improvements,\n            nextActions:\n              issues.length > 0 ? ['Run comprehensive validation', 'Fix critical issues'] : [],\n          };\n        } catch (error) {\n          return {\n            success: false,\n            duration: Date.now() - startTime,\n            issues: [(error as Error).toString()],\n            improvements: [],\n            nextActions: ['Investigate health check failure'],\n          };\n        }\n      },\n    });\n\n    // Weekly procedures\n    this.maintenanceProcedures.set('weekly-cache-optimization', {\n      id: 'weekly-cache-optimization',\n      name: 'Weekly Cache Optimization',\n      description: 'Clear and rebuild ESLint cache for optimal performance',\n      frequency: 'weekly',\n      lastRun: null,\n      nextRun: new Date(),\n      automated: true,\n      procedure: async () => {\n        const startTime = Date.now();\n        const issues: string[] = [];\n        const improvements: string[] = [];\n\n        try {\n          // Clear cache\n          execSync('rm -rf .eslintcache .eslint-ts-cache/', { stdio: 'pipe' });\n          improvements.push('ESLint cache cleared');\n\n          // Rebuild cache\n          execSync('yarn lint:fast --quiet', { stdio: 'pipe' });\n          improvements.push('ESLint cache rebuilt');\n\n          return {\n            success: true,\n            duration: Date.now() - startTime,\n            issues,\n            improvements,\n            nextActions: [],\n          };\n        } catch (error) {\n          issues.push(`Cache optimization failed: ${error}`);\n          return {\n            success: false,\n            duration: Date.now() - startTime,\n            issues,\n            improvements,\n            nextActions: ['Manual cache cleanup required'],\n          };\n        }\n      },\n    });\n\n    // Monthly procedures\n    this.maintenanceProcedures.set('monthly-metrics-cleanup', {\n      id: 'monthly-metrics-cleanup',\n      name: 'Monthly Metrics Cleanup',\n      description: 'Clean old metrics and optimize storage',\n      frequency: 'monthly',\n      lastRun: null,\n      nextRun: new Date(),\n      automated: true,\n      procedure: async () => {\n        const startTime = Date.now();\n        const issues: string[] = [];\n        const improvements: string[] = [];\n\n        try {\n          // Clean metrics history (keep last 100 entries)\n          const metricsFile = join(this.metricsDir, 'linting-metrics-history.json');\n          if (existsSync(metricsFile)) {\n            const history = JSON.parse(readFileSync(metricsFile, 'utf8'));\n            if (history.length > 100) {\n              const trimmed = history.slice(-100);\n              writeFileSync(metricsFile, JSON.stringify(trimmed, null, 2));\n              improvements.push(`Trimmed metrics history to 100 entries (was ${history.length})`);\n            }\n          }\n\n          // Clean alert history\n          const alertsFile = join(this.metricsDir, 'alerting-history.json');\n          if (existsSync(alertsFile)) {\n            const alertHistory = JSON.parse(readFileSync(alertsFile, 'utf8'));\n            if (alertHistory.alerts && alertHistory.alerts.length > 500) {\n              alertHistory.alerts = alertHistory.alerts.slice(-500);\n              writeFileSync(alertsFile, JSON.stringify(alertHistory, null, 2));\n              improvements.push('Trimmed alert history to 500 entries');\n            }\n          }\n\n          return {\n            success: true,\n            duration: Date.now() - startTime,\n            issues,\n            improvements,\n            nextActions: [],\n          };\n        } catch (error) {\n          issues.push(`Metrics cleanup failed: ${error}`);\n          return {\n            success: false,\n            duration: Date.now() - startTime,\n            issues,\n            improvements,\n            nextActions: ['Manual metrics cleanup required'],\n          };\n        }\n      },\n    });\n  }\n\n  /**\n   * Initialize quality gates\n   */\n  private initializeQualityGates(): void {\n    if (!existsSync(this.qualityGatesFile)) {\n      const defaultGates: QualityGate[] = [\n        {\n          id: 'no-parser-errors',\n          name: 'Zero Parser Errors',\n          condition: 'parserErrors === 0',\n          threshold: 0,\n          status: 'passing',\n          blocksDeployment: true,\n          lastCheck: new Date(),\n        },\n        {\n          id: 'explicit-any-limit',\n          name: 'Explicit Any Limit',\n          condition: 'explicitAnyErrors <= 100',\n          threshold: 100,\n          status: 'passing',\n          blocksDeployment: true,\n          lastCheck: new Date(),\n        },\n        {\n          id: 'quality-score-minimum',\n          name: 'Minimum Quality Score',\n          condition: 'qualityScore >= 80',\n          threshold: 80,\n          status: 'passing',\n          blocksDeployment: false,\n          lastCheck: new Date(),\n        },\n      ];\n\n      writeFileSync(this.qualityGatesFile, JSON.stringify(defaultGates, null, 2));\n    }\n  }\n\n  // Helper methods\n  private ensureDirectoriesExist(): void {\n    const dirs = [this.dashboardDir, this.metricsDir];\n    for (const dir of dirs) {\n      if (!existsSync(dir)) {\n        mkdirSync(dir, { recursive: true });\n      }\n    }\n  }\n\n  private loadTargets(): ZeroErrorTarget[] {\n    try {\n      if (existsSync(this.targetsFile)) {\n        return JSON.parse(readFileSync(this.targetsFile, 'utf8'));\n      }\n    } catch (error) {\n      console.warn('Error loading targets:', error);\n    }\n    return [];\n  }\n\n  private loadMetricsHistory(): LintingMetrics[] {\n    try {\n      const historyFile = join(this.metricsDir, 'linting-metrics-history.json');\n      if (existsSync(historyFile)) {\n        return JSON.parse(readFileSync(historyFile, 'utf8'));\n      }\n    } catch (error) {\n      console.warn('Error loading metrics history:', error);\n    }\n    return [];\n  }\n\n  private getMetricValue(metrics: LintingMetrics, metricPath: string): number {\n    const parts = metricPath.split('.');\n    let value: unknown = metrics;\n\n    for (const part of parts) {\n      value = value?.[part];\n    }\n\n    return typeof value === 'number' ? value : 0;\n  }\n\n  private calculateProgress(current: number, target: number, metric: string): number {\n    if (metric === 'qualityScore') {\n      return Math.min(100, (current / target) * 100);\n    } else {\n      // For error metrics, progress is reduction toward target\n      if (current <= target) return 100;\n      const maxValue = Math.max(current, target * 10); // Assume 10x target as baseline\n      return Math.max(0, ((maxValue - current) / (maxValue - target)) * 100);\n    }\n  }\n\n  private estimateCompletion(current: number, target: number, deadline: Date): Date {\n    // Simple linear projection based on deadline\n    const progress = this.calculateProgress(current, target, 'generic');\n    if (progress >= 100) return new Date(); // Already achieved\n\n    const remainingProgress = 100 - progress;\n    const timeToDeadline = deadline.getTime() - Date.now();\n    const estimatedTime = (timeToDeadline * remainingProgress) / 100;\n\n    return new Date(Date.now() + estimatedTime);\n  }\n\n  private calculateTrend(values: number[]): {\n    direction: 'improving' | 'stable' | 'degrading';\n    velocity: number;\n    confidence: number;\n  } {\n    if (values.length < 2) {\n      return { direction: 'stable', velocity: 0, confidence: 0 };\n    }\n\n    // Simple linear regression\n    const n = values.length;\n    const x = Array.from({ length: n }, (_, i) => i);\n    const sumX = x.reduce((a, b) => a + b, 0);\n    const sumY = values.reduce((a, b) => a + b, 0);\n    const sumXY = x.reduce((sum, xi, i) => sum + xi * values[i], 0);\n    const sumXX = x.reduce((sum, xi) => sum + xi * xi, 0);\n\n    const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\n    const confidence = Math.min(1, n / 10); // Higher confidence with more data points\n\n    let direction: 'improving' | 'stable' | 'degrading';\n    if (Math.abs(slope) < 0.1) {\n      direction = 'stable';\n    } else if (slope < 0) {\n      direction = 'improving'; // Negative slope means decreasing errors\n    } else {\n      direction = 'degrading';\n    }\n\n    return { direction, velocity: slope, confidence };\n  }\n\n  private projectFuture(\n    velocity: number,\n    currentValue: number,\n  ): { sevenDays: number; thirtyDays: number; ninetyDays: number } {\n    return {\n      sevenDays: Math.max(0, currentValue + velocity * 7),\n      thirtyDays: Math.max(0, currentValue + velocity * 30),\n      ninetyDays: Math.max(0, currentValue + velocity * 90),\n    };\n  }\n\n  private calculateNextRun(lastRun: Date, frequency: string): Date {\n    const next = new Date(lastRun);\n    switch (frequency) {\n      case 'daily':\n        next.setDate(next.getDate() + 1);\n        break;\n      case 'weekly':\n        next.setDate(next.getDate() + 7);\n        break;\n      case 'monthly':\n        next.setMonth(next.getMonth() + 1);\n        break;\n      case 'quarterly':\n        next.setMonth(next.getMonth() + 3);\n        break;\n    }\n    return next;\n  }\n\n  private detectSignificantChanges(previous: LintingMetrics, current: LintingMetrics): string[] {\n    const changes: string[] = [];\n    const threshold = 0.1; // 10% change threshold\n\n    const metricsToCheck = [\n      { key: 'totalIssues', name: 'Total Issues' },\n      { key: 'parserErrors', name: 'Parser Errors' },\n      { key: 'explicitAnyErrors', name: 'Explicit Any Errors' },\n      { key: 'qualityScore', name: 'Quality Score' },\n    ];\n\n    for (const metric of metricsToCheck) {\n      const prevValue = this.getMetricValue(previous, metric.key);\n      const currValue = this.getMetricValue(current, metric.key);\n\n      if (prevValue > 0) {\n        const changePercent = Math.abs((currValue - prevValue) / prevValue);\n        if (changePercent > threshold) {\n          const direction = currValue > prevValue ? 'increased' : 'decreased';\n          changes.push(\n            `${metric.name} ${direction} by ${(changePercent * 100).toFixed(1)}% (${prevValue} → ${currValue})`,\n          );\n        }\n      } else if (currValue > 0) {\n        changes.push(`${metric.name} appeared: ${currValue}`);\n      }\n    }\n\n    return changes;\n  }\n\n  private identifyCriticalIssues(metrics: LintingMetrics): string[] {\n    const issues: string[] = [];\n\n    if (metrics.parserErrors > 0) {\n      issues.push(`${metrics.parserErrors} parser errors blocking analysis`);\n    }\n\n    if (metrics.explicitAnyErrors > 200) {\n      issues.push(`${metrics.explicitAnyErrors} explicit any errors (critical threshold exceeded)`);\n    }\n\n    if (metrics.performanceMetrics.lintingDuration > 60000) {\n      issues.push(\n        `Linting duration ${metrics.performanceMetrics.lintingDuration}ms (critical performance issue)`,\n      );\n    }\n\n    if (metrics.qualityScore < 50) {\n      issues.push(`Quality score ${metrics.qualityScore}/100 (critically low)`);\n    }\n\n    return issues;\n  }\n\n  private async updateRealTimeStatus(metrics: LintingMetrics): Promise<void> {\n    const statusFile = join(this.dashboardDir, 'real-time-status.json');\n    const status = {\n      timestamp: new Date().toISOString(),\n      status: this.getOverallStatusSimple(metrics),\n      qualityScore: metrics.qualityScore,\n      totalIssues: metrics.totalIssues,\n      parserErrors: metrics.parserErrors,\n      explicitAnyErrors: metrics.explicitAnyErrors,\n      criticalIssues: this.identifyCriticalIssues(metrics).length,\n    };\n\n    writeFileSync(statusFile, JSON.stringify(status, null, 2));\n  }\n\n  // UI Helper methods\n  private getOverallStatus(\n    validationResult: ValidationResult,\n    qualityGates: QualityGate[],\n  ): string {\n    const failingGates = qualityGates.filter(g => g.status === 'failing' && g.blocksDeployment);\n    if (failingGates.length > 0) return '🚨 CRITICAL';\n\n    const warningGates = qualityGates.filter(g => g.status === 'warning');\n    if (warningGates.length > 0) return '⚠️ WARNING';\n\n    if (validationResult.metrics.qualityScore >= 90) return '✅ EXCELLENT';\n    if (validationResult.metrics.qualityScore >= 80) return '👍 GOOD';\n    return '📈 IMPROVING';\n  }\n\n  private getOverallStatusSimple(metrics: LintingMetrics): string {\n    if (metrics.parserErrors > 0) return 'critical';\n    if (metrics.explicitAnyErrors > 200) return 'warning';\n    if (metrics.qualityScore >= 90) return 'excellent';\n    if (metrics.qualityScore >= 80) return 'good';\n    return 'improving';\n  }\n\n  private calculateOverallProgress(targets: ZeroErrorTarget[]): number {\n    if (targets.length === 0) return 0;\n    const totalProgress = targets.reduce((sum, target) => sum + target.progress, 0);\n    return Math.round(totalProgress / targets.length);\n  }\n\n  private getScoreIcon(score: number): string {\n    if (score >= 95) return '🏆';\n    if (score >= 90) return '🥇';\n    if (score >= 80) return '🥈';\n    if (score >= 70) return '🥉';\n    return '📊';\n  }\n\n  private getProgressBar(progress: number): string {\n    const filled = Math.round(progress / 10);\n    const empty = 10 - filled;\n    return '█'.repeat(filled) + '░'.repeat(empty);\n  }\n\n  private getPriorityIcon(priority: string): string {\n    switch (priority) {\n      case 'critical':\n        return '🚨';\n      case 'high':\n        return '⚡';\n      case 'medium':\n        return '📋';\n      case 'low':\n        return '📝';\n      default:\n        return '📋';\n    }\n  }\n\n  private getTrendIcon(trend: string): string {\n    switch (trend) {\n      case 'improving':\n        return '📈';\n      case 'stable':\n        return '➡️';\n      case 'degrading':\n        return '📉';\n      default:\n        return '➡️';\n    }\n  }\n\n  private getGateStatusIcon(status: string): string {\n    switch (status) {\n      case 'passing':\n        return '✅';\n      case 'warning':\n        return '⚠️';\n      case 'failing':\n        return '❌';\n      default:\n        return '❓';\n    }\n  }\n\n  private generateImmediateActions(\n    metrics: LintingMetrics,\n    targets: ZeroErrorTarget[],\n    qualityGates: QualityGate[],\n  ): string {\n    const actions: string[] = [];\n\n    if (metrics.parserErrors > 0) {\n      actions.push('1. 🚨 **URGENT**: Fix parser errors immediately');\n      actions.push('   - Run: `yarn tsc --noEmit` to identify syntax errors');\n      actions.push('   - Focus on: src/utils/recommendationEngine.ts and other failing files');\n    }\n\n    const failingGates = qualityGates.filter(g => g.status === 'failing' && g.blocksDeployment);\n    if (failingGates.length > 0) {\n      actions.push(`2. 🚫 **BLOCKING**: ${failingGates.length} quality gates failing`);\n      for (const gate of failingGates) {\n        actions.push(`   - ${gate.name}: ${gate.condition}`);\n      }\n    }\n\n    if (metrics.explicitAnyErrors > 100) {\n      actions.push('3. ⚡ **HIGH PRIORITY**: Reduce explicit any errors');\n      actions.push('   - Run: `yarn lint:campaign explicit-any`');\n      actions.push('   - Target: Systematic type inference and interface generation');\n    }\n\n    if (actions.length === 0) {\n      actions.push('✅ No immediate critical actions required');\n      actions.push('Continue with systematic improvement using `yarn lint:workflow-auto`');\n    }\n\n    return actions.join('\\n');\n  }\n\n  private generateNextSteps(\n    metrics: LintingMetrics,\n    targets: ZeroErrorTarget[],\n    trends: TrendAnalysis[],\n  ): string {\n    const steps: string[] = [];\n\n    // Sort targets by priority and progress\n    const sortedTargets = targets.sort((a, b) => {\n      const priorityOrder = { critical: 0, high: 1, medium: 2, low: 3 };\n      return priorityOrder[a.priority] - priorityOrder[b.priority] || a.progress - b.progress;\n    });\n\n    for (let i = 0; i < Math.min(5, sortedTargets.length); i++) {\n      const target = sortedTargets[i];\n      steps.push(`${i + 1}. **${target.metric}**: ${target.strategy}`);\n      steps.push(\n        `   - Progress: ${target.progress}% (${target.currentValue} → ${target.targetValue})`,\n      );\n      steps.push(`   - Deadline: ${target.deadline.toLocaleDateString()}`);\n    }\n\n    // Add trend-based recommendations\n    const degradingTrends = trends.filter(t => t.trend === 'degrading' && t.confidence > 0.5);\n    if (degradingTrends.length > 0) {\n      steps.push('');\n      steps.push('**Trend Alerts**:');\n      for (const trend of degradingTrends) {\n        steps.push(\n          `- ${trend.metric} is degrading (${trend.velocity.toFixed(2)}/day) - investigate recent changes`,\n        );\n      }\n    }\n\n    return steps.join('\\n');\n  }\n}\n"],"version":3}