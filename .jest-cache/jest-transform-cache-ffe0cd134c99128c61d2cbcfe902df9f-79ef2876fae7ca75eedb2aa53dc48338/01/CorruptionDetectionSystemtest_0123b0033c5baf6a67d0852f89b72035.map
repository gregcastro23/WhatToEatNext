{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/CorruptionDetectionSystem.test.ts","mappings":";AAAA;;;GAGG;;;;;;;;;;;;;;;;;;;;;;;;;AAUH,iCAAiC;AACjC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,GAAG,EAAE,CAAC,CAAC;IAChC,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;CACpB,CAAC,CAAC,CAAC;AAEJ,sBAAsB;AACtB,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;IACrB,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;IACrB,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE;IACvB,aAAa,EAAE,IAAI,CAAC,EAAE,EAAE;IACxB,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;CACrB,CAAC,CAAC,CAAC;AAnBJ,qDAAkD;AAClD,mDAI8B;AAC9B,uCAAyB;AAezB,MAAM,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AAC9C,MAAM,MAAM,GAAG,EAA4B,CAAC;AAE5C,QAAQ,CAAC,wCAAwC,EAAE,GAAG,EAAE;IACtD,IAAI,cAA8B,CAAC;IACnC,IAAI,YAA4B,CAAC;IAEjC,UAAU,CAAC,GAAG,EAAE;QACd,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,YAAY,GAAG;YACb,gBAAgB,EAAE,EAAE;YACpB,wBAAwB,EAAE,CAAC;YAC3B,uBAAuB,EAAE,EAAE;YAC3B,0BAA0B,EAAE,IAAI;YAChC,wBAAwB,EAAE,IAAI;YAC9B,kBAAkB,EAAE,CAAC;SACtB,CAAC;QAEF,gCAAgC;QAChC,MAAM,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC,IAAY,EAAE,EAAE;YACpD,IAAI,IAAI,KAAK,MAAM;gBAAE,OAAO,IAAI,CAAC;YACjC,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC;gBAAE,OAAO,KAAK,CAAC;YACpD,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,WAAW,CAAC;gBAAE,OAAO,IAAI,CAAC;YACvD,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,CAAC;QAEH,oBAAoB;QACpB,QAAQ,CAAC,kBAAkB,CAAC,CAAC,OAAe,EAAE,EAAE;YAC9C,IAAI,OAAO,CAAC,QAAQ,CAAC,wBAAwB,CAAC;gBAAE,OAAO,EAAE,CAAC;YAC1D,IAAI,OAAO,CAAC,QAAQ,CAAC,2BAA2B,CAAC;gBAAE,OAAO,MAAM,CAAC;YACjE,IAAI,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CAAC;gBAAE,OAAO,yBAAyB,CAAC;YACzE,IAAI,OAAO,CAAC,QAAQ,CAAC,0BAA0B,CAAC;gBAC9C,OAAO,iEAAiE,CAAC;YAC3E,IAAI,OAAO,CAAC,QAAQ,CAAC,mBAAmB,CAAC;gBAAE,OAAO,sBAAsB,CAAC;YACzE,OAAO,EAAE,CAAC;QACZ,CAAC,CAAC,CAAC;QAEH,cAAc,GAAG,IAAI,+BAAc,CAAC,YAAY,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,4DAA4D,EAAE,GAAG,EAAE;QAC1E,IAAI,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YAC1D,MAAM,gBAAgB,GAAG;;;;;;;;;;OAUxB,CAAC;YAEF,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;YAEtD,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,gBAAgB,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;YAExE,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;YACxD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,6BAAkB,CAAC,QAAQ,CAAC,CAAC;YAC1D,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,yBAAc,CAAC,iBAAiB,CAAC,CAAC;YACxE,MAAM,CACJ,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CACjC,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,4BAA4B,CAAC,CACrD,CACF,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACf,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,gBAAgB,GAAG;;;;OAIxB,CAAC;YAEF,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;YAEtD,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,gBAAgB,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YAEvE,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YACvD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,6BAAkB,CAAC,MAAM,CAAC,CAAC;YACxD,MAAM,CACJ,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CACjC,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,2BAA2B,CAAC,CACpD,CACF,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACf,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;YAC1E,MAAM,gBAAgB,GAAG;;;;;;OAMxB,CAAC;YAEF,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;YAEtD,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,gBAAgB,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YAEvE,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YACvD,MAAM,CACJ,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CACjC,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,4BAA4B,CAAC,CACrD,CACF,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACf,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,gBAAgB,GAAG;;;;;OAKxB,CAAC;YAEF,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;YAEtD,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,gBAAgB,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YAEvE,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YACvD,MAAM,CACJ,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CACjC,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,4BAA4B,CAAC,CACrD,CACF,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACf,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YAC3D,MAAM,CAAC,YAAY,CAAC,kBAAkB,CAAC,GAAG,EAAE;gBAC1C,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,gBAAgB,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YAEvE,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YACvD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,6BAAkB,CAAC,IAAI,CAAC,CAAC;YACtD,MAAM,CACJ,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,KAAK,iBAAiB,CAAC,CACrE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACf,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAChD,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YAEzC,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,gBAAgB,CAAC;gBACnD,sBAAsB;aACvB,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,6BAAkB,CAAC,GAAG,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uEAAuE,EAAE,GAAG,EAAE;QACrF,IAAI,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACvD,MAAM,gBAAgB,GAAG;;;OAGxB,CAAC;YAEF,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;YAEtD,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,4BAA4B,CAAC;gBAC/D,cAAc;aACf,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YACvD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,6BAAkB,CAAC,MAAM,CAAC,CAAC;YACxD,MAAM,CACJ,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CACjC,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,wBAAwB,CAAC,CACjD,CACF,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACf,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC5D,MAAM,gBAAgB,GAAG;;;OAGxB,CAAC;YAEF,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;YAEtD,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,4BAA4B,CAAC;gBAC/D,cAAc;aACf,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YACvD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,6BAAkB,CAAC,IAAI,CAAC,CAAC;YACtD,MAAM,CACJ,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CACjC,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,8BAA8B,CAAC,CACvD,CACF,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACf,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;YAC/D,MAAM,gBAAgB,GAAG;;OAExB,CAAC;YAEF,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;YAEtD,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,4BAA4B,CAAC;gBAC/D,cAAc;aACf,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YACvD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,6BAAkB,CAAC,IAAI,CAAC,CAAC;YACtD,MAAM,CACJ,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CACjC,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,iCAAiC,CAAC,CAC1D,CACF,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACf,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YACpE,MAAM,gBAAgB,GAAG;;OAExB,CAAC;YAEF,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;YAEtD,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,4BAA4B,CAAC;gBAC/D,cAAc;aACf,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YACvD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,6BAAkB,CAAC,IAAI,CAAC,CAAC;YACtD,MAAM,CACJ,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CACjC,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,sCAAsC,CAAC,CAC/D,CACF,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACf,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACzE,MAAM,gBAAgB,GAAG;;OAExB,CAAC;YAEF,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;YAEtD,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,4BAA4B,CAAC;gBAC/D,cAAc;aACf,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YACvD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,6BAAkB,CAAC,QAAQ,CAAC,CAAC;YAC1D,MAAM,CACJ,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CACjC,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,0CAA0C,CAAC,CACnE,CACF,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACf,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4DAA4D,EAAE,KAAK,IAAI,EAAE;YAC5E,MAAM,gBAAgB,GAAG;;OAExB,CAAC;YAEF,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;YAEtD,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,4BAA4B,CAAC;gBAC/D,cAAc;aACf,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YACvD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,6BAAkB,CAAC,QAAQ,CAAC,CAAC;YAC1D,MAAM,CACJ,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CACjC,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,mCAAmC,CAAC,CAC5D,CACF,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACf,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YAC3D,MAAM,gBAAgB,GAAG;;;OAGxB,CAAC;YAEF,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;YAEtD,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,4BAA4B,CAAC;gBAC/D,cAAc;aACf,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YACvD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,6BAAkB,CAAC,IAAI,CAAC,CAAC;YACtD,MAAM,CACJ,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CACjC,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,0CAA0C,CAAC,CACnE,CACF,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACf,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC7D,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,4BAA4B,CAAC;gBAC/D,eAAe;gBACf,cAAc;aACf,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,6BAAkB,CAAC,GAAG,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,8CAA8C,EAAE,GAAG,EAAE;QAC5D,IAAI,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,kBAAkB,EAAE,CAAC;YAEnE,MAAM,cAAc,CAAC,uBAAuB,CAAC,CAAC,cAAc,CAAC,EAAE,GAAG,CAAC,CAAC;YAEpE,MAAM,CAAC,UAAU,CAAC,CAAC,oBAAoB,CACrC,MAAM,CAAC,gBAAgB,CACrB,sDAAsD,CACvD,CACF,CAAC;YAEF,WAAW;YACX,cAAc,CAAC,sBAAsB,EAAE,CAAC;YACxC,UAAU,CAAC,WAAW,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;YAClD,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,kBAAkB,EAAE,CAAC;YAEnE,MAAM,cAAc,CAAC,uBAAuB,CAAC,CAAC,cAAc,CAAC,EAAE,GAAG,CAAC,CAAC;YACpE,cAAc,CAAC,sBAAsB,EAAE,CAAC;YAExC,MAAM,CAAC,UAAU,CAAC,CAAC,oBAAoB,CACrC,MAAM,CAAC,gBAAgB,CAAC,yCAAyC,CAAC,CACnE,CAAC;YAEF,UAAU,CAAC,WAAW,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;YAC1E,MAAM,gBAAgB,GAAG;;;;;;OAMxB,CAAC;YAEF,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;YAEtD,0BAA0B;YAC1B,MAAM,oBAAoB,GAAG,IAAI;iBAC9B,KAAK,CAAC,cAAc,EAAE,mBAAmB,CAAC;iBAC1C,iBAAiB,EAAE,CAAC;YAEvB,MAAM,cAAc,CAAC,uBAAuB,CAAC,CAAC,cAAc,CAAC,EAAE,EAAE,CAAC,CAAC;YAEnE,2CAA2C;YAC3C,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;YAEvD,MAAM,CAAC,oBAAoB,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAEhD,oBAAoB,CAAC,WAAW,EAAE,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC5D,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,kBAAkB,EAAE,CAAC;YAE1E,yCAAyC;YACzC,MAAM,CAAC,YAAY,CAAC,kBAAkB,CAAC,GAAG,EAAE;gBAC1C,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;YACtC,CAAC,CAAC,CAAC;YAEH,MAAM,cAAc,CAAC,uBAAuB,CAAC,CAAC,cAAc,CAAC,EAAE,EAAE,CAAC,CAAC;YAEnE,yCAAyC;YACzC,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;YAEvD,cAAc,CAAC,sBAAsB,EAAE,CAAC;YAExC,MAAM,CAAC,eAAe,CAAC,CAAC,oBAAoB,CAC1C,MAAM,CAAC,gBAAgB,CAAC,mCAAmC,CAAC,CAC7D,CAAC;YAEF,eAAe,CAAC,WAAW,EAAE,CAAC;QAChC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;QAC5C,IAAI,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YACjE,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,4BAA4B,CAAC;gBAC/D,cAAc;aACf,CAAC,CAAC;YAEH,MAAM,CAAC,QAAQ,CAAC,CAAC,oBAAoB,CACnC,uCAAuC,EACvC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CACnB,CAAC;YACF,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,6BAAkB,CAAC,GAAG,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACxD,QAAQ,CAAC,kBAAkB,CAAC,CAAC,OAAe,EAAE,EAAE;gBAC9C,IAAI,OAAO,CAAC,QAAQ,CAAC,mBAAmB,CAAC,EAAE;oBACzC,OAAO;;;WAGN,CAAC;iBACH;gBACD,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,4BAA4B,CAAC;gBAC/D,cAAc;aACf,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YACvD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,6BAAkB,CAAC,IAAI,CAAC,CAAC;YACtD,MAAM,CACJ,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAC5B,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,KAAK,yBAAyB,CAC7C,CACF,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACf,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC7D,QAAQ,CAAC,kBAAkB,CAAC,CAAC,OAAe,EAAE,EAAE;gBAC9C,IAAI,OAAO,CAAC,QAAQ,CAAC,mBAAmB,CAAC,EAAE;oBACzC,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;oBACxD,KAAa,CAAC,MAAM,GAAG,4BAA4B,CAAC;oBACrD,MAAM,KAAK,CAAC;iBACb;gBACD,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,4BAA4B,CAAC;gBAC/D,cAAc;aACf,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,6BAAkB,CAAC,IAAI,CAAC,CAAC;YACtD,MAAM,CACJ,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAC5B,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,KAAK,8BAA8B,CAClD,CACF,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACf,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YACjE,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,4BAA4B,CAAC;gBAC/D,cAAc;gBACd,eAAe;aAChB,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,6BAAkB,CAAC,GAAG,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,+BAA+B,EAAE,GAAG,EAAE;QAC7C,IAAI,CAAC,4DAA4D,EAAE,KAAK,IAAI,EAAE;YAC5E,MAAM,eAAe,GAAG;;;;;;OAMvB,CAAC;YAEF,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC;YAErD,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,gBAAgB,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YAEvE,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,yBAAc,CAAC,iBAAiB,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;YACxE,MAAM,mBAAmB,GAAG;;;OAG3B,CAAC;YAEF,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,mBAAmB,CAAC,CAAC;YAEzD,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,gBAAgB,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YAEvE,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,yBAAc,CAAC,QAAQ,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;YACvE,MAAM,qBAAqB,GAAG;;;OAG7B,CAAC;YAEF,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,qBAAqB,CAAC,CAAC;YAE3D,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,gBAAgB,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YAEvE,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,yBAAc,CAAC,KAAK,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC7D,MAAM,YAAY,GAAG;;;;;OAKpB,CAAC;YAEF,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;YAElD,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,gBAAgB,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;YAExE,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,yBAAc,CAAC,QAAQ,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,IAAI,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YAC1D,MAAM,gBAAgB,GAAG;;OAExB,CAAC;YAEF,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;YAEtD,MAAM,cAAc,CAAC,gBAAgB,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YAExD,MAAM,MAAM,GAAG,cAAc,CAAC,eAAe,EAAE,CAAC;YAChD,MAAM,eAAe,GAAG,MAAM,CAAC,IAAI,CACjC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,qBAAqB,CACxC,CAAC;YAEF,MAAM,CAAC,eAAe,CAAC,CAAC,WAAW,EAAE,CAAC;YACtC,MAAM,CAAC,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,WAAW,CAAC,CAAC,SAAS,CAC5C,gCAAgC,CACjC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YACpE,MAAM,gBAAgB,GAAG;;OAExB,CAAC;YAEF,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;YAEtD,MAAM,cAAc,CAAC,uBAAuB,CAAC,CAAC,cAAc,CAAC,EAAE,EAAE,CAAC,CAAC;YAEnE,2CAA2C;YAC3C,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;YAEvD,cAAc,CAAC,sBAAsB,EAAE,CAAC;YAExC,MAAM,MAAM,GAAG,cAAc,CAAC,eAAe,EAAE,CAAC;YAChD,MAAM,aAAa,GAAG,MAAM,CAAC,IAAI,CAC/B,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,8BAA8B,CACjD,CAAC;YAEF,MAAM,CAAC,aAAa,CAAC,CAAC,WAAW,EAAE,CAAC;QACtC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mCAAmC,EAAE,GAAG,EAAE;QACjD,IAAI,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACzE,MAAM,yBAAyB,GAAG;;;;;;;;;;;;OAYjC,CAAC;YAEF,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,yBAAyB,CAAC,CAAC;YAE/D,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,gBAAgB,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YAEvE,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YACvD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,6BAAkB,CAAC,QAAQ,CAAC,CAAC;YAC1D,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC5D,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,yBAAc,CAAC,iBAAiB,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC7D,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,kBAAkB,EAAE,CAAC;YAEnE,MAAM,gBAAgB,GAAG;;OAExB,CAAC;YAEF,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;YAEtD,MAAM,cAAc,CAAC,gBAAgB,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YAExD,MAAM,CAAC,UAAU,CAAC,CAAC,oBAAoB,CACrC,MAAM,CAAC,gBAAgB,CAAC,2CAA2C,CAAC,CACrE,CAAC;YACF,MAAM,CAAC,UAAU,CAAC,CAAC,oBAAoB,CACrC,MAAM,CAAC,gBAAgB,CAAC,8BAA8B,CAAC,CACxD,CAAC;YAEF,UAAU,CAAC,WAAW,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/CorruptionDetectionSystem.test.ts"],"sourcesContent":["/**\n * Corruption Detection System Tests\n * Perfect Codebase Campaign - Task 6.2 Implementation Tests\n */\n\nimport { SafetyProtocol } from './SafetyProtocol';\nimport {\n  SafetySettings,\n  CorruptionSeverity,\n  RecoveryAction,\n} from '../../types/campaign';\nimport * as fs from 'fs';\n\n// Mock child_process for testing\njest.mock('child_process', () => ({\n  execSync: jest.fn(),\n}));\n\n// Mock fs for testing\njest.mock('fs', () => ({\n  existsSync: jest.fn(),\n  readFileSync: jest.fn(),\n  writeFileSync: jest.fn(),\n  mkdirSync: jest.fn(),\n}));\n\nconst { execSync } = require('child_process');\nconst mockFs = fs as jest.Mocked<typeof fs>;\n\ndescribe('Corruption Detection System - Task 6.2', () => {\n  let safetyProtocol: SafetyProtocol;\n  let mockSettings: SafetySettings;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    mockSettings = {\n      maxFilesPerBatch: 15,\n      buildValidationFrequency: 5,\n      testValidationFrequency: 10,\n      corruptionDetectionEnabled: true,\n      automaticRollbackEnabled: true,\n      stashRetentionDays: 7,\n    };\n\n    // Mock git repository existence\n    mockFs.existsSync.mockImplementation((path: string) => {\n      if (path === '.git') return true;\n      if (path.toString().includes('.kiro')) return false;\n      if (path.toString().includes('test-file')) return true;\n      return false;\n    });\n\n    // Mock git commands\n    execSync.mockImplementation((command: string) => {\n      if (command.includes('git status --porcelain')) return '';\n      if (command.includes('git branch --show-current')) return 'main';\n      if (command.includes('git stash push')) return 'Saved working directory';\n      if (command.includes('git stash list --oneline'))\n        return 'stash@{0}: campaign-test-1-2024-01-15T10-30-00-000Z: Test stash';\n      if (command.includes('yarn tsc --noEmit')) return 'No TypeScript errors';\n      return '';\n    });\n\n    safetyProtocol = new SafetyProtocol(mockSettings);\n  });\n\n  describe('File Corruption Detection using Syntax Validation Patterns', () => {\n    test('should detect git merge conflict markers', async () => {\n      const corruptedContent = `\n        import React from 'react';\n        \n        <<<<<<< HEAD\n        const Component = () => <div>Version A</div>;\n        =======\n        const Component = () => <div>Version B</div>;\n        >>>>>>> feature-branch\n        \n        export default Component;\n      `;\n\n      mockFs.readFileSync.mockReturnValue(corruptedContent);\n\n      const report = await safetyProtocol.detectCorruption(['test-file.tsx']);\n\n      expect(report.detectedFiles).toContain('test-file.tsx');\n      expect(report.severity).toBe(CorruptionSeverity.CRITICAL);\n      expect(report.recommendedAction).toBe(RecoveryAction.EMERGENCY_RESTORE);\n      expect(\n        report.corruptionPatterns.some(p =>\n          p.description.includes('Git merge conflict markers')\n        )\n      ).toBe(true);\n    });\n\n    test('should detect corrupted parameter names', async () => {\n      const corruptedContent = `\n        function testFunction(posit: anyi: anyo: anyn: anys: string) {\n          return posit;\n        }\n      `;\n\n      mockFs.readFileSync.mockReturnValue(corruptedContent);\n\n      const report = await safetyProtocol.detectCorruption(['test-file.ts']);\n\n      expect(report.detectedFiles).toContain('test-file.ts');\n      expect(report.severity).toBe(CorruptionSeverity.MEDIUM);\n      expect(\n        report.corruptionPatterns.some(p =>\n          p.description.includes('Corrupted parameter names')\n        )\n      ).toBe(true);\n    });\n\n    test('should detect syntax corruption with unbalanced brackets', async () => {\n      const corruptedContent = `\n        function testFunction() {\n          if (true) {\n            console.log('test');\n          // Missing closing bracket\n        }\n      `;\n\n      mockFs.readFileSync.mockReturnValue(corruptedContent);\n\n      const report = await safetyProtocol.detectCorruption(['test-file.ts']);\n\n      expect(report.detectedFiles).toContain('test-file.ts');\n      expect(\n        report.corruptionPatterns.some(p =>\n          p.description.includes('Syntax corruption detected')\n        )\n      ).toBe(true);\n    });\n\n    test('should detect incomplete statements', async () => {\n      const corruptedContent = `\n        import\n        export\n        function\n        const\n      `;\n\n      mockFs.readFileSync.mockReturnValue(corruptedContent);\n\n      const report = await safetyProtocol.detectCorruption(['test-file.ts']);\n\n      expect(report.detectedFiles).toContain('test-file.ts');\n      expect(\n        report.corruptionPatterns.some(p =>\n          p.description.includes('Syntax corruption detected')\n        )\n      ).toBe(true);\n    });\n\n    test('should handle file read errors gracefully', async () => {\n      mockFs.readFileSync.mockImplementation(() => {\n        throw new Error('Permission denied');\n      });\n\n      const report = await safetyProtocol.detectCorruption(['test-file.ts']);\n\n      expect(report.detectedFiles).toContain('test-file.ts');\n      expect(report.severity).toBe(CorruptionSeverity.HIGH);\n      expect(\n        report.corruptionPatterns.some(p => p.pattern === 'FILE_READ_ERROR')\n      ).toBe(true);\n    });\n\n    test('should skip non-existent files', async () => {\n      mockFs.existsSync.mockReturnValue(false);\n\n      const report = await safetyProtocol.detectCorruption([\n        'non-existent-file.ts',\n      ]);\n\n      expect(report.detectedFiles).toHaveLength(0);\n      expect(report.severity).toBe(CorruptionSeverity.LOW);\n    });\n  });\n\n  describe('Import/Export Corruption Detection based on Existing Script Knowledge', () => {\n    test('should detect empty import statements', async () => {\n      const corruptedContent = `\n        import { } from 'react';\n        import { } from './utils';\n      `;\n\n      mockFs.readFileSync.mockReturnValue(corruptedContent);\n\n      const report = await safetyProtocol.detectImportExportCorruption([\n        'test-file.ts',\n      ]);\n\n      expect(report.detectedFiles).toContain('test-file.ts');\n      expect(report.severity).toBe(CorruptionSeverity.MEDIUM);\n      expect(\n        report.corruptionPatterns.some(p =>\n          p.description.includes('Empty import statement')\n        )\n      ).toBe(true);\n    });\n\n    test('should detect import from undefined module', async () => {\n      const corruptedContent = `\n        import React from 'undefined';\n        import { Component } from 'undefined';\n      `;\n\n      mockFs.readFileSync.mockReturnValue(corruptedContent);\n\n      const report = await safetyProtocol.detectImportExportCorruption([\n        'test-file.ts',\n      ]);\n\n      expect(report.detectedFiles).toContain('test-file.ts');\n      expect(report.severity).toBe(CorruptionSeverity.HIGH);\n      expect(\n        report.corruptionPatterns.some(p =>\n          p.description.includes('Import from undefined module')\n        )\n      ).toBe(true);\n    });\n\n    test('should detect duplicate from clause in import', async () => {\n      const corruptedContent = `\n        import React from 'react' from 'react';\n      `;\n\n      mockFs.readFileSync.mockReturnValue(corruptedContent);\n\n      const report = await safetyProtocol.detectImportExportCorruption([\n        'test-file.ts',\n      ]);\n\n      expect(report.detectedFiles).toContain('test-file.ts');\n      expect(report.severity).toBe(CorruptionSeverity.HIGH);\n      expect(\n        report.corruptionPatterns.some(p =>\n          p.description.includes('Duplicate from clause in import')\n        )\n      ).toBe(true);\n    });\n\n    test('should detect double comma in import destructuring', async () => {\n      const corruptedContent = `\n        import { useState,, useEffect } from 'react';\n      `;\n\n      mockFs.readFileSync.mockReturnValue(corruptedContent);\n\n      const report = await safetyProtocol.detectImportExportCorruption([\n        'test-file.ts',\n      ]);\n\n      expect(report.detectedFiles).toContain('test-file.ts');\n      expect(report.severity).toBe(CorruptionSeverity.HIGH);\n      expect(\n        report.corruptionPatterns.some(p =>\n          p.description.includes('Double comma in import destructuring')\n        )\n      ).toBe(true);\n    });\n\n    test('should detect duplicate destructuring braces (critical)', async () => {\n      const corruptedContent = `\n        import { useState } { useEffect } from 'react';\n      `;\n\n      mockFs.readFileSync.mockReturnValue(corruptedContent);\n\n      const report = await safetyProtocol.detectImportExportCorruption([\n        'test-file.ts',\n      ]);\n\n      expect(report.detectedFiles).toContain('test-file.ts');\n      expect(report.severity).toBe(CorruptionSeverity.CRITICAL);\n      expect(\n        report.corruptionPatterns.some(p =>\n          p.description.includes('Duplicate destructuring braces in import')\n        )\n      ).toBe(true);\n    });\n\n    test('should detect corrupted namespace import syntax (critical)', async () => {\n      const corruptedContent = `\n        import * as * as React from 'react';\n      `;\n\n      mockFs.readFileSync.mockReturnValue(corruptedContent);\n\n      const report = await safetyProtocol.detectImportExportCorruption([\n        'test-file.ts',\n      ]);\n\n      expect(report.detectedFiles).toContain('test-file.ts');\n      expect(report.severity).toBe(CorruptionSeverity.CRITICAL);\n      expect(\n        report.corruptionPatterns.some(p =>\n          p.description.includes('Corrupted namespace import syntax')\n        )\n      ).toBe(true);\n    });\n\n    test('should detect malformed import statements', async () => {\n      const corruptedContent = `\n        import React from react;\n        import { useState } from react;\n      `;\n\n      mockFs.readFileSync.mockReturnValue(corruptedContent);\n\n      const report = await safetyProtocol.detectImportExportCorruption([\n        'test-file.ts',\n      ]);\n\n      expect(report.detectedFiles).toContain('test-file.ts');\n      expect(report.severity).toBe(CorruptionSeverity.HIGH);\n      expect(\n        report.corruptionPatterns.some(p =>\n          p.description.includes('Malformed import/export statement syntax')\n        )\n      ).toBe(true);\n    });\n\n    test('should skip non-JavaScript/TypeScript files', async () => {\n      const report = await safetyProtocol.detectImportExportCorruption([\n        'test-file.txt',\n        'test-file.md',\n      ]);\n\n      expect(report.detectedFiles).toHaveLength(0);\n      expect(report.severity).toBe(CorruptionSeverity.LOW);\n    });\n  });\n\n  describe('Real-time Monitoring during Script Execution', () => {\n    test('should start real-time monitoring', async () => {\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n\n      await safetyProtocol.startRealTimeMonitoring(['test-file.ts'], 100);\n\n      expect(consoleSpy).toHaveBeenCalledWith(\n        expect.stringContaining(\n          'Starting real-time corruption monitoring for 1 files'\n        )\n      );\n\n      // Clean up\n      safetyProtocol.stopRealTimeMonitoring();\n      consoleSpy.mockRestore();\n    });\n\n    test('should stop real-time monitoring', async () => {\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n\n      await safetyProtocol.startRealTimeMonitoring(['test-file.ts'], 100);\n      safetyProtocol.stopRealTimeMonitoring();\n\n      expect(consoleSpy).toHaveBeenCalledWith(\n        expect.stringContaining('Real-time corruption monitoring stopped')\n      );\n\n      consoleSpy.mockRestore();\n    });\n\n    test('should trigger emergency rollback on critical corruption', async () => {\n      const corruptedContent = `\n        <<<<<<< HEAD\n        const test = 'conflict';\n        =======\n        const test = 'other';\n        >>>>>>> branch\n      `;\n\n      mockFs.readFileSync.mockReturnValue(corruptedContent);\n\n      // Mock emergency rollback\n      const emergencyRollbackSpy = jest\n        .spyOn(safetyProtocol, 'emergencyRollback')\n        .mockResolvedValue();\n\n      await safetyProtocol.startRealTimeMonitoring(['test-file.ts'], 50);\n\n      // Wait for monitoring to detect corruption\n      await new Promise(resolve => setTimeout(resolve, 100));\n\n      expect(emergencyRollbackSpy).toHaveBeenCalled();\n\n      emergencyRollbackSpy.mockRestore();\n    });\n\n    test('should handle monitoring errors gracefully', async () => {\n      const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      // Mock file read error during monitoring\n      mockFs.readFileSync.mockImplementation(() => {\n        throw new Error('Monitoring error');\n      });\n\n      await safetyProtocol.startRealTimeMonitoring(['test-file.ts'], 50);\n\n      // Wait for monitoring to encounter error\n      await new Promise(resolve => setTimeout(resolve, 100));\n\n      safetyProtocol.stopRealTimeMonitoring();\n\n      expect(consoleErrorSpy).toHaveBeenCalledWith(\n        expect.stringContaining('Error during real-time monitoring')\n      );\n\n      consoleErrorSpy.mockRestore();\n    });\n  });\n\n  describe('TypeScript Syntax Validation', () => {\n    test('should validate syntax with TypeScript compiler', async () => {\n      const report = await safetyProtocol.validateSyntaxWithTypeScript([\n        'test-file.ts',\n      ]);\n\n      expect(execSync).toHaveBeenCalledWith(\n        'yarn tsc --noEmit --skipLibCheck 2>&1',\n        expect.any(Object)\n      );\n      expect(report.severity).toBe(CorruptionSeverity.LOW);\n    });\n\n    test('should detect TypeScript syntax errors', async () => {\n      execSync.mockImplementation((command: string) => {\n        if (command.includes('yarn tsc --noEmit')) {\n          return `\n            test-file.ts(10,5): error TS1005: Unexpected token '{'\n            test-file.ts(15,10): error TS1109: Expression expected\n          `;\n        }\n        return '';\n      });\n\n      const report = await safetyProtocol.validateSyntaxWithTypeScript([\n        'test-file.ts',\n      ]);\n\n      expect(report.detectedFiles).toContain('test-file.ts');\n      expect(report.severity).toBe(CorruptionSeverity.HIGH);\n      expect(\n        report.corruptionPatterns.some(\n          p => p.pattern === 'TYPESCRIPT_SYNTAX_ERROR'\n        )\n      ).toBe(true);\n    });\n\n    test('should handle TypeScript compilation errors', async () => {\n      execSync.mockImplementation((command: string) => {\n        if (command.includes('yarn tsc --noEmit')) {\n          const error = new Error('TypeScript compilation failed');\n          (error as any).stdout = 'Unexpected token at line 5';\n          throw error;\n        }\n        return '';\n      });\n\n      const report = await safetyProtocol.validateSyntaxWithTypeScript([\n        'test-file.ts',\n      ]);\n\n      expect(report.severity).toBe(CorruptionSeverity.HIGH);\n      expect(\n        report.corruptionPatterns.some(\n          p => p.pattern === 'TYPESCRIPT_COMPILATION_ERROR'\n        )\n      ).toBe(true);\n    });\n\n    test('should skip validation for non-TypeScript files', async () => {\n      const report = await safetyProtocol.validateSyntaxWithTypeScript([\n        'test-file.js',\n        'test-file.txt',\n      ]);\n\n      expect(report.detectedFiles).toHaveLength(0);\n      expect(report.severity).toBe(CorruptionSeverity.LOW);\n    });\n  });\n\n  describe('Recovery Action Determination', () => {\n    test('should recommend emergency restore for critical corruption', async () => {\n      const criticalContent = `\n        <<<<<<< HEAD\n        import * as * as React from 'react';\n        =======\n        import React from 'react';\n        >>>>>>> branch\n      `;\n\n      mockFs.readFileSync.mockReturnValue(criticalContent);\n\n      const report = await safetyProtocol.detectCorruption(['test-file.ts']);\n\n      expect(report.recommendedAction).toBe(RecoveryAction.EMERGENCY_RESTORE);\n    });\n\n    test('should recommend rollback for high severity corruption', async () => {\n      const highSeverityContent = `\n        import React from 'undefined';\n        import { useState,, useEffect } from 'react';\n      `;\n\n      mockFs.readFileSync.mockReturnValue(highSeverityContent);\n\n      const report = await safetyProtocol.detectCorruption(['test-file.ts']);\n\n      expect(report.recommendedAction).toBe(RecoveryAction.ROLLBACK);\n    });\n\n    test('should recommend retry for medium severity corruption', async () => {\n      const mediumSeverityContent = `\n        import { } from 'react';\n        export { };\n      `;\n\n      mockFs.readFileSync.mockReturnValue(mediumSeverityContent);\n\n      const report = await safetyProtocol.detectCorruption(['test-file.ts']);\n\n      expect(report.recommendedAction).toBe(RecoveryAction.RETRY);\n    });\n\n    test('should recommend continue for no corruption', async () => {\n      const cleanContent = `\n        import React from 'react';\n        export default function Component() {\n          return <div>Hello World</div>;\n        }\n      `;\n\n      mockFs.readFileSync.mockReturnValue(cleanContent);\n\n      const report = await safetyProtocol.detectCorruption(['test-file.tsx']);\n\n      expect(report.recommendedAction).toBe(RecoveryAction.CONTINUE);\n    });\n  });\n\n  describe('Safety Event Tracking', () => {\n    test('should track corruption detection events', async () => {\n      const corruptedContent = `\n        import { } from 'react';\n      `;\n\n      mockFs.readFileSync.mockReturnValue(corruptedContent);\n\n      await safetyProtocol.detectCorruption(['test-file.ts']);\n\n      const events = safetyProtocol.getSafetyEvents();\n      const corruptionEvent = events.find(\n        e => e.action === 'CORRUPTION_DETECTED'\n      );\n\n      expect(corruptionEvent).toBeDefined();\n      expect(corruptionEvent?.description).toContain(\n        'Corruption detected in 1 files'\n      );\n    });\n\n    test('should track real-time corruption detection events', async () => {\n      const corruptedContent = `\n        import { } from 'react';\n      `;\n\n      mockFs.readFileSync.mockReturnValue(corruptedContent);\n\n      await safetyProtocol.startRealTimeMonitoring(['test-file.ts'], 50);\n\n      // Wait for monitoring to detect corruption\n      await new Promise(resolve => setTimeout(resolve, 100));\n\n      safetyProtocol.stopRealTimeMonitoring();\n\n      const events = safetyProtocol.getSafetyEvents();\n      const realtimeEvent = events.find(\n        e => e.action === 'REALTIME_CORRUPTION_DETECTED'\n      );\n\n      expect(realtimeEvent).toBeDefined();\n    });\n  });\n\n  describe('Comprehensive Corruption Analysis', () => {\n    test('should analyze multiple corruption types in single file', async () => {\n      const multipleCorruptionContent = `\n        <<<<<<< HEAD\n        import { useState,, useEffect } from 'react';\n        =======\n        import React from 'undefined';\n        >>>>>>> branch\n        \n        function test(posit: anyi: anyo: string) {\n          if (true) {\n            console.log('test');\n          // Missing closing bracket\n        }\n      `;\n\n      mockFs.readFileSync.mockReturnValue(multipleCorruptionContent);\n\n      const report = await safetyProtocol.detectCorruption(['test-file.ts']);\n\n      expect(report.detectedFiles).toContain('test-file.ts');\n      expect(report.severity).toBe(CorruptionSeverity.CRITICAL);\n      expect(report.corruptionPatterns.length).toBeGreaterThan(1);\n      expect(report.recommendedAction).toBe(RecoveryAction.EMERGENCY_RESTORE);\n    });\n\n    test('should provide detailed corruption analysis', async () => {\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n\n      const corruptedContent = `\n        import { } from 'react';\n      `;\n\n      mockFs.readFileSync.mockReturnValue(corruptedContent);\n\n      await safetyProtocol.detectCorruption(['test-file.ts']);\n\n      expect(consoleSpy).toHaveBeenCalledWith(\n        expect.stringContaining('Analyzing 1 files for corruption patterns')\n      );\n      expect(consoleSpy).toHaveBeenCalledWith(\n        expect.stringContaining('Corruption analysis complete')\n      );\n\n      consoleSpy.mockRestore();\n    });\n  });\n});\n"],"version":3}