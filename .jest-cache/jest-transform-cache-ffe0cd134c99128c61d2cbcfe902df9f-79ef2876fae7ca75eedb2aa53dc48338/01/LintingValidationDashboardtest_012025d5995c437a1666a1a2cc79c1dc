0ff8956f4bb933ab44c109c5c2f63d3b
"use strict";
/**
 * Comprehensive tests for the Linting Validation Dashboard
 *
 * Tests the enhanced validation and monitoring system with
 * domain-specific tracking and performance monitoring.
 */
Object.defineProperty(exports, "__esModule", { value: true });
// Mock child_process
jest.mock('child_process');
// Mock fs
jest.mock('fs');
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const LintingAlertingSystem_1 = require("../../services/linting/LintingAlertingSystem");
const LintingValidationDashboard_1 = require("../../services/linting/LintingValidationDashboard");
const mockExecSync = child_process_1.execSync;
const mockWriteFileSync = fs_1.writeFileSync;
const mockReadFileSync = fs_1.readFileSync;
const mockExistsSync = fs_1.existsSync;
describe('LintingValidationDashboard', () => {
    let dashboard;
    let alerting;
    beforeEach(() => {
        jest.clearAllMocks();
        // Mock directory existence
        mockExistsSync.mockImplementation((path) => {
            return path.includes('.kiro/metrics') || path.includes('eslint.config.cjs');
        });
        // Mock file operations
        mockWriteFileSync.mockImplementation(() => { });
        mockReadFileSync.mockImplementation((path) => {
            if (path.includes('config.json')) {
                return JSON.stringify({
                    thresholds: [],
                    alertingEnabled: true,
                    regressionDetectionEnabled: true,
                });
            }
            if (path.includes('history.json')) {
                return JSON.stringify([]);
            }
            return '{}';
        });
        dashboard = new LintingValidationDashboard_1.LintingValidationDashboard();
        alerting = new LintingAlertingSystem_1.LintingAlertingSystem();
    });
    describe('Comprehensive Validation', () => {
        test('should run comprehensive validation successfully', async () => {
            // Mock successful ESLint output
            const mockLintResults = [
                {
                    filePath: '/src/components/TestComponent.tsx',
                    messages: [
                        {
                            ruleId: '@typescript-eslint/no-explicit-any',
                            severity: 2,
                            message: 'Unexpected any',
                            line: 10,
                            column: 5,
                        },
                        {
                            ruleId: 'import/order',
                            severity: 1,
                            message: 'Import order incorrect',
                            line: 1,
                            column: 1,
                        },
                    ],
                },
                {
                    filePath: '/src/calculations/astrology.ts',
                    messages: [
                        {
                            ruleId: '@typescript-eslint/no-unused-vars',
                            severity: 1,
                            message: 'Unused variable',
                            line: 5,
                            column: 10,
                        },
                    ],
                },
            ];
            mockExecSync.mockReturnValue(JSON.stringify(mockLintResults));
            const result = await dashboard.runComprehensiveValidation();
            expect(result).toBeDefined();
            expect(result.metrics).toBeDefined();
            expect(result.metrics.totalIssues).toBe(3);
            expect(result.metrics.errors).toBe(1);
            expect(result.metrics.warnings).toBe(2);
            expect(result.metrics.explicitAnyErrors).toBe(1);
            expect(result.metrics.importOrderIssues).toBe(1);
            expect(result.metrics.unusedVariables).toBe(1);
        });
        test('should handle ESLint execution errors gracefully', async () => {
            mockExecSync.mockImplementation(() => {
                throw new Error('ESLint execution failed');
            });
            const result = await dashboard.runComprehensiveValidation();
            expect(result).toBeDefined();
            expect(result.metrics.totalIssues).toBe(-1); // Error state
            expect(result.metrics.qualityScore).toBe(0);
            expect(result.passed).toBe(true); // No critical alerts in error state
        });
        test('should categorize domain-specific issues correctly', async () => {
            const mockLintResults = [
                {
                    filePath: '/src/calculations/culinary/astrology.ts',
                    messages: [
                        {
                            ruleId: '@typescript-eslint/no-explicit-any',
                            severity: 2,
                            message: 'Unexpected any',
                            line: 10,
                            column: 5,
                        },
                    ],
                },
                {
                    filePath: '/src/services/campaign/CampaignController.ts',
                    messages: [
                        {
                            ruleId: 'no-console',
                            severity: 1,
                            message: 'Console statement',
                            line: 15,
                            column: 8,
                        },
                    ],
                },
                {
                    filePath: '/src/__tests__/validation/test.spec.ts',
                    messages: [
                        {
                            ruleId: '@typescript-eslint/no-unused-vars',
                            severity: 1,
                            message: 'Unused variable',
                            line: 5,
                            column: 10,
                        },
                    ],
                },
            ];
            mockExecSync.mockReturnValue(JSON.stringify(mockLintResults));
            const result = await dashboard.runComprehensiveValidation();
            expect(result.metrics.domainSpecificIssues.astrologicalCalculations).toBe(1);
            expect(result.metrics.domainSpecificIssues.campaignSystem).toBe(1);
            expect(result.metrics.domainSpecificIssues.testFiles).toBe(1);
        });
    });
    describe('Quality Score Calculation', () => {
        test('should calculate quality score correctly for good metrics', async () => {
            const mockLintResults = [
                {
                    filePath: '/src/components/TestComponent.tsx',
                    messages: [
                        {
                            ruleId: 'import/order',
                            severity: 1,
                            message: 'Import order incorrect',
                            line: 1,
                            column: 1,
                        },
                    ],
                },
            ];
            mockExecSync.mockReturnValue(JSON.stringify(mockLintResults));
            const result = await dashboard.runComprehensiveValidation();
            expect(result.metrics.qualityScore).toBeGreaterThan(90); // Should be high with only minor issues
        });
        test('should penalize quality score for parser errors', async () => {
            const mockLintResults = [
                {
                    filePath: '/src/utils/recommendationEngine.ts',
                    messages: [
                        {
                            ruleId: 'parseForESLint',
                            severity: 2,
                            fatal: true,
                            message: 'Parser error',
                            line: 68,
                            column: 1,
                        },
                    ],
                },
            ];
            mockExecSync.mockReturnValue(JSON.stringify(mockLintResults));
            const result = await dashboard.runComprehensiveValidation();
            expect(result.metrics.parserErrors).toBe(1);
            expect(result.metrics.qualityScore).toBeLessThan(60); // Should be heavily penalized
        });
        test('should penalize quality score for explicit any errors', async () => {
            const mockLintResults = Array.from({ length: 150 }, (_, i) => ({
                filePath: `/src/components/Component${i}.tsx`,
                messages: [
                    {
                        ruleId: '@typescript-eslint/no-explicit-any',
                        severity: 2,
                        message: 'Unexpected any',
                        line: 10,
                        column: 5,
                    },
                ],
            }));
            mockExecSync.mockReturnValue(JSON.stringify(mockLintResults));
            const result = await dashboard.runComprehensiveValidation();
            expect(result.metrics.explicitAnyErrors).toBe(150);
            expect(result.metrics.qualityScore).toBeLessThan(80); // Should be penalized for many explicit any
        });
    });
    describe('Alert Generation', () => {
        test('should generate critical alert for parser errors', async () => {
            const mockLintResults = [
                {
                    filePath: '/src/utils/recommendationEngine.ts',
                    messages: [
                        {
                            ruleId: 'parseForESLint',
                            severity: 2,
                            fatal: true,
                            message: 'Parser error',
                            line: 68,
                            column: 1,
                        },
                    ],
                },
            ];
            mockExecSync.mockReturnValue(JSON.stringify(mockLintResults));
            const result = await dashboard.runComprehensiveValidation();
            const criticalAlerts = result.alerts.filter(alert => alert.severity === 'critical');
            expect(criticalAlerts.length).toBeGreaterThan(0);
            expect(criticalAlerts[0].metric).toBe('parserErrors');
        });
        test('should generate error alert for excessive explicit any', async () => {
            const mockLintResults = Array.from({ length: 150 }, (_, i) => ({
                filePath: `/src/components/Component${i}.tsx`,
                messages: [
                    {
                        ruleId: '@typescript-eslint/no-explicit-any',
                        severity: 2,
                        message: 'Unexpected any',
                        line: 10,
                        column: 5,
                    },
                ],
            }));
            mockExecSync.mockReturnValue(JSON.stringify(mockLintResults));
            const result = await dashboard.runComprehensiveValidation();
            const errorAlerts = result.alerts.filter(alert => alert.severity === 'error');
            expect(errorAlerts.some(alert => alert.metric === 'explicitAnyErrors')).toBe(true);
        });
        test('should generate warning alert for performance issues', async () => {
            // Mock slow linting performance
            mockExecSync.mockImplementation(() => {
                // Simulate slow execution
                const start = Date.now();
                while (Date.now() - start < 100) {
                    // Busy wait to simulate slow execution
                }
                return JSON.stringify([]);
            });
            const result = await dashboard.runComprehensiveValidation();
            // Performance alerts are based on actual execution time
            // This test verifies the alert generation logic exists
            expect(result.alerts).toBeDefined();
        });
    });
    describe('Regression Analysis', () => {
        test('should detect regression when issues increase', async () => {
            // Mock historical data with fewer issues
            const historicalMetrics = [
                {
                    timestamp: new Date(Date.now() - 86400000),
                    totalIssues: 100,
                    qualityScore: 85,
                    parserErrors: 0,
                    explicitAnyErrors: 50,
                },
            ];
            mockReadFileSync.mockImplementation((path) => {
                if (path.includes('history.json')) {
                    return JSON.stringify(historicalMetrics);
                }
                return JSON.stringify({ thresholds: [], alertingEnabled: true });
            });
            // Mock current results with more issues
            const mockLintResults = Array.from({ length: 200 }, (_, i) => ({
                filePath: `/src/components/Component${i}.tsx`,
                messages: [
                    {
                        ruleId: '@typescript-eslint/no-explicit-any',
                        severity: 2,
                        message: 'Unexpected any',
                        line: 10,
                        column: 5,
                    },
                ],
            }));
            mockExecSync.mockReturnValue(JSON.stringify(mockLintResults));
            const result = await dashboard.runComprehensiveValidation();
            expect(result.regressionAnalysis.detected).toBe(true);
            expect(result.regressionAnalysis.affectedMetrics).toContain('totalIssues');
            expect(result.regressionAnalysis.severity).toBeDefined();
        });
        test('should not detect regression with insufficient historical data', async () => {
            mockReadFileSync.mockImplementation((path) => {
                if (path.includes('history.json')) {
                    return JSON.stringify([]); // No historical data
                }
                return JSON.stringify({ thresholds: [], alertingEnabled: true });
            });
            mockExecSync.mockReturnValue(JSON.stringify([]));
            const result = await dashboard.runComprehensiveValidation();
            expect(result.regressionAnalysis.detected).toBe(false);
            expect(result.regressionAnalysis.recommendations).toContain('Insufficient historical data for regression analysis');
        });
    });
    describe('Recommendations Generation', () => {
        test('should generate parser error recommendations', async () => {
            const mockLintResults = [
                {
                    filePath: '/src/utils/recommendationEngine.ts',
                    messages: [
                        {
                            ruleId: 'parseForESLint',
                            severity: 2,
                            fatal: true,
                            message: 'Parser error',
                            line: 68,
                            column: 1,
                        },
                    ],
                },
            ];
            mockExecSync.mockReturnValue(JSON.stringify(mockLintResults));
            const result = await dashboard.runComprehensiveValidation();
            expect(result.recommendations.some(rec => rec.includes('URGENT: Fix parser errors immediately'))).toBe(true);
            expect(result.recommendations.some(rec => rec.includes('recommendationEngine.ts'))).toBe(true);
        });
        test('should generate explicit any recommendations', async () => {
            const mockLintResults = Array.from({ length: 150 }, (_, i) => ({
                filePath: `/src/components/Component${i}.tsx`,
                messages: [
                    {
                        ruleId: '@typescript-eslint/no-explicit-any',
                        severity: 2,
                        message: 'Unexpected any',
                        line: 10,
                        column: 5,
                    },
                ],
            }));
            mockExecSync.mockReturnValue(JSON.stringify(mockLintResults));
            const result = await dashboard.runComprehensiveValidation();
            expect(result.recommendations.some(rec => rec.includes('HIGH PRIORITY: Reduce explicit any types'))).toBe(true);
            expect(result.recommendations.some(rec => rec.includes('systematic type inference'))).toBe(true);
        });
        test('should generate import organization recommendations', async () => {
            const mockLintResults = Array.from({ length: 60 }, (_, i) => ({
                filePath: `/src/components/Component${i}.tsx`,
                messages: [
                    {
                        ruleId: 'import/order',
                        severity: 1,
                        message: 'Import order incorrect',
                        line: 1,
                        column: 1,
                    },
                ],
            }));
            mockExecSync.mockReturnValue(JSON.stringify(mockLintResults));
            const result = await dashboard.runComprehensiveValidation();
            expect(result.recommendations.some(rec => rec.includes('READY: Deploy enhanced import organization'))).toBe(true);
            expect(result.recommendations.some(rec => rec.includes('alphabetical sorting'))).toBe(true);
        });
        test('should generate domain-specific recommendations', async () => {
            const mockLintResults = Array.from({ length: 25 }, (_, i) => ({
                filePath: `/src/calculations/astrology/calculation${i}.ts`,
                messages: [
                    {
                        ruleId: '@typescript-eslint/no-explicit-any',
                        severity: 2,
                        message: 'Unexpected any',
                        line: 10,
                        column: 5,
                    },
                ],
            }));
            mockExecSync.mockReturnValue(JSON.stringify(mockLintResults));
            const result = await dashboard.runComprehensiveValidation();
            expect(result.recommendations.some(rec => rec.includes('DOMAIN: Review astrological calculation files'))).toBe(true);
            expect(result.recommendations.some(rec => rec.includes('lint:domain-astro'))).toBe(true);
        });
    });
    describe('Performance Metrics', () => {
        test('should collect performance metrics', async () => {
            mockExecSync.mockReturnValue(JSON.stringify([]));
            const result = await dashboard.runComprehensiveValidation();
            expect(result.metrics.performanceMetrics).toBeDefined();
            expect(result.metrics.performanceMetrics.lintingDuration).toBeGreaterThan(0);
            expect(result.metrics.performanceMetrics.memoryUsage).toBeGreaterThan(0);
            expect(result.metrics.performanceMetrics.filesProcessed).toBeGreaterThanOrEqual(0);
            expect(result.metrics.performanceMetrics.cacheHitRate).toBeGreaterThanOrEqual(0);
        });
        test('should generate performance recommendations when slow', async () => {
            // Mock slow execution
            mockExecSync.mockImplementation(() => {
                const start = Date.now();
                while (Date.now() - start < 100) {
                    // Simulate slow execution
                }
                return JSON.stringify([]);
            });
            const result = await dashboard.runComprehensiveValidation();
            // Check if performance recommendations are generated
            // (This depends on actual execution time, so we check the structure);
            expect(result.recommendations).toBeDefined();
            expect(Array.isArray(result.recommendations)).toBe(true);
        });
    });
    describe('Dashboard Report Generation', () => {
        test('should generate comprehensive dashboard report', async () => {
            mockExecSync.mockReturnValue(JSON.stringify([]));
            const _result = await dashboard.runComprehensiveValidation();
            // Verify that writeFileSync was called to generate the report
            expect(mockWriteFileSync).toHaveBeenCalledWith(expect.stringContaining('linting-dashboard-report.md'), expect.stringContaining('# Linting Excellence Dashboard Report'), 'utf8');
        });
        test('should include all required sections in report', async () => {
            mockExecSync.mockReturnValue(JSON.stringify([]));
            await dashboard.runComprehensiveValidation();
            // Get the report content from the mock call
            const reportCall = mockWriteFileSync.mock.calls.find(call => call[0].includes('linting-validation-report.md'));
            expect(reportCall).toBeDefined();
            const reportContent = reportCall[1];
            expect(reportContent).toContain('📊 Overall Status');
            expect(reportContent).toContain('🔍 DETAILED METRICS');
            expect(reportContent).toContain('🌟 DOMAIN-SPECIFIC METRICS');
            expect(reportContent).toContain('⚡ PERFORMANCE METRICS');
            expect(reportContent).toContain('💡 RECOMMENDATIONS');
            expect(reportContent).toContain('🎯 Next Actions');
        });
    });
    describe('Error Handling', () => {
        test('should handle JSON parsing errors gracefully', async () => {
            mockExecSync.mockReturnValue('invalid json');
            const result = await dashboard.runComprehensiveValidation();
            expect(result.metrics.totalIssues).toBe(-1); // Error state
            expect(result.passed).toBe(true); // No critical alerts in error state
        });
        test('should handle file system errors gracefully', async () => {
            mockWriteFileSync.mockImplementation(() => {
                throw new Error('File system error');
            });
            mockExecSync.mockReturnValue(JSON.stringify([]));
            // Should not throw, but handle the error gracefully
            await expect(dashboard.runComprehensiveValidation()).resolves.toBeDefined();
        });
        test('should handle missing configuration files', async () => {
            mockExistsSync.mockReturnValue(false);
            mockReadFileSync.mockImplementation(() => {
                throw new Error('File not found');
            });
            // Should create dashboard with default configuration
            const newDashboard = new LintingValidationDashboard_1.LintingValidationDashboard();
            expect(newDashboard).toBeDefined();
        });
    });
    describe('Integration with Alerting System', () => {
        test('should process alerts through alerting system', async () => {
            const mockLintResults = [
                {
                    filePath: '/src/utils/recommendationEngine.ts',
                    messages: [
                        {
                            ruleId: 'parseForESLint',
                            severity: 2,
                            fatal: true,
                            message: 'Parser error',
                            line: 68,
                            column: 1,
                        },
                    ],
                },
            ];
            mockExecSync.mockReturnValue(JSON.stringify(mockLintResults));
            const result = await dashboard.runComprehensiveValidation();
            // Verify alerts were generated
            expect(result.alerts.length).toBeGreaterThan(0);
            // Test alerting system processing
            const processAlertsSpy = jest.spyOn(alerting, 'processAlerts');
            alerting.processAlerts(result.alerts, result.metrics);
            expect(processAlertsSpy).toHaveBeenCalledWith(result.alerts, result.metrics);
        });
    });
});
describe('LintingAlertingSystem', () => {
    let alerting;
    beforeEach(() => {
        jest.clearAllMocks();
        mockExistsSync.mockImplementation((path) => {
            return path.includes('.kiro/metrics');
        });
        mockReadFileSync.mockImplementation(() => {
            return JSON.stringify({
                enabled: true,
                channels: [{ type: 'console', config: {}, severityFilter: ['error', 'critical'] }],
                regressionDetection: { enabled: true, sensitivity: 'medium', cooldownPeriod: 15 },
                performanceMonitoring: { enabled: true, thresholds: [] },
                autoResponse: { enabled: true, actions: [] },
            });
        });
        alerting = new LintingAlertingSystem_1.LintingAlertingSystem();
    });
    describe('Alert Processing', () => {
        test('should process alerts when enabled', async () => {
            const mockAlerts = [
                {
                    id: 'test-alert-1',
                    timestamp: new Date(),
                    severity: 'critical',
                    metric: 'parserErrors',
                    currentValue: 1,
                    threshold: 0,
                    message: 'Parser errors detected',
                    resolved: false,
                },
            ];
            const mockMetrics = {
                timestamp: new Date(),
                totalIssues: 1,
                errors: 1,
                warnings: 0,
                parserErrors: 1,
                explicitAnyErrors: 0,
                importOrderIssues: 0,
                unusedVariables: 0,
                reactHooksIssues: 0,
                consoleStatements: 0,
                domainSpecificIssues: {
                    astrologicalCalculations: 0,
                    campaignSystem: 0,
                    testFiles: 0,
                },
                performanceMetrics: {
                    lintingDuration: 5000,
                    cacheHitRate: 0.75,
                    memoryUsage: 256,
                    filesProcessed: 100,
                },
                qualityScore: 85,
                regressionDetected: false,
            };
            // Should not throw
            await expect(alerting.processAlerts(mockAlerts, mockMetrics)).resolves.toBeUndefined();
        });
        test('should skip processing when disabled', async () => {
            // Mock disabled configuration
            mockReadFileSync.mockImplementation(() => {
                return JSON.stringify({
                    enabled: false,
                    channels: [],
                    regressionDetection: { enabled: false },
                    performanceMonitoring: { enabled: false },
                    autoResponse: { enabled: false },
                });
            });
            const disabledAlerting = new LintingAlertingSystem_1.LintingAlertingSystem();
            const mockAlerts = [
                {
                    id: 'test-alert-1',
                    timestamp: new Date(),
                    severity: 'critical',
                    metric: 'parserErrors',
                    currentValue: 1,
                    threshold: 0,
                    message: 'Parser errors detected',
                    resolved: false,
                },
            ];
            const mockMetrics = {
                timestamp: new Date(),
                totalIssues: 1,
                errors: 1,
                warnings: 0,
                parserErrors: 1,
                explicitAnyErrors: 0,
                importOrderIssues: 0,
                unusedVariables: 0,
                reactHooksIssues: 0,
                consoleStatements: 0,
                domainSpecificIssues: {
                    astrologicalCalculations: 0,
                    campaignSystem: 0,
                    testFiles: 0,
                },
                performanceMetrics: {
                    lintingDuration: 5000,
                    cacheHitRate: 0.75,
                    memoryUsage: 256,
                    filesProcessed: 100,
                },
                qualityScore: 85,
                regressionDetected: false,
            };
            // Should complete quickly when disabled
            await expect(disabledAlerting.processAlerts(mockAlerts, mockMetrics)).resolves.toBeUndefined();
        });
    });
    describe('Performance Monitoring', () => {
        test('should detect performance threshold violations', async () => {
            const mockMetrics = {
                timestamp: new Date(),
                totalIssues: 0,
                errors: 0,
                warnings: 0,
                parserErrors: 0,
                explicitAnyErrors: 0,
                importOrderIssues: 0,
                unusedVariables: 0,
                reactHooksIssues: 0,
                consoleStatements: 0,
                domainSpecificIssues: {
                    astrologicalCalculations: 0,
                    campaignSystem: 0,
                    testFiles: 0,
                },
                performanceMetrics: {
                    lintingDuration: 35000,
                    cacheHitRate: 0.3,
                    memoryUsage: 600,
                    filesProcessed: 100,
                },
                qualityScore: 85,
                regressionDetected: false,
            };
            // Should process performance monitoring
            await expect(alerting.processAlerts([], mockMetrics)).resolves.toBeUndefined();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9fX3Rlc3RzX18vbGludGluZy9MaW50aW5nVmFsaWRhdGlvbkRhc2hib2FyZC50ZXN0LnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7R0FLRzs7QUFRSCxxQkFBcUI7QUFDckIsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUczQixVQUFVO0FBQ1YsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQVhoQixpREFBeUM7QUFDekMsMkJBQTZEO0FBRTdELHdGQUFxRjtBQUNyRixrR0FBK0c7QUFJL0csTUFBTSxZQUFZLEdBQUcsd0JBQWdELENBQUM7QUFJdEUsTUFBTSxpQkFBaUIsR0FBRyxrQkFBMEQsQ0FBQztBQUNyRixNQUFNLGdCQUFnQixHQUFHLGlCQUF3RCxDQUFDO0FBQ2xGLE1BQU0sY0FBYyxHQUFHLGVBQW9ELENBQUM7QUFFNUUsUUFBUSxDQUFDLDRCQUE0QixFQUFFLEdBQUcsRUFBRTtJQUMxQyxJQUFJLFNBQXFDLENBQUM7SUFDMUMsSUFBSSxRQUErQixDQUFDO0lBRXBDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFFckIsMkJBQTJCO1FBQzNCLGNBQWMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLElBQVksRUFBRSxFQUFFO1lBQ2pELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDOUUsQ0FBQyxDQUFDLENBQUM7UUFFSCx1QkFBdUI7UUFDdkIsaUJBQWlCLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFDLENBQUM7UUFDL0MsZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxJQUFZLEVBQUUsRUFBRTtZQUNuRCxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLEVBQUU7Z0JB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dGVzdHNfXy9saW50aW5nL0xpbnRpbmdWYWxpZGF0aW9uRGFzaGJvYXJkLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb21wcmVoZW5zaXZlIHRlc3RzIGZvciB0aGUgTGludGluZyBWYWxpZGF0aW9uIERhc2hib2FyZFxuICpcbiAqIFRlc3RzIHRoZSBlbmhhbmNlZCB2YWxpZGF0aW9uIGFuZCBtb25pdG9yaW5nIHN5c3RlbSB3aXRoXG4gKiBkb21haW4tc3BlY2lmaWMgdHJhY2tpbmcgYW5kIHBlcmZvcm1hbmNlIG1vbml0b3JpbmcuXG4gKi9cblxuaW1wb3J0IHsgZXhlY1N5bmMgfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCB7IGV4aXN0c1N5bmMsIHJlYWRGaWxlU3luYywgd3JpdGVGaWxlU3luYyB9IGZyb20gJ2ZzJztcblxuaW1wb3J0IHsgTGludGluZ0FsZXJ0aW5nU3lzdGVtIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvbGludGluZy9MaW50aW5nQWxlcnRpbmdTeXN0ZW0nO1xuaW1wb3J0IHsgTGludGluZ01ldHJpY3MsIExpbnRpbmdWYWxpZGF0aW9uRGFzaGJvYXJkIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvbGludGluZy9MaW50aW5nVmFsaWRhdGlvbkRhc2hib2FyZCc7XG5cbi8vIE1vY2sgY2hpbGRfcHJvY2Vzc1xuamVzdC5tb2NrKCdjaGlsZF9wcm9jZXNzJyk7XG5jb25zdCBtb2NrRXhlY1N5bmMgPSBleGVjU3luYyBhcyBqZXN0Lk1vY2tlZEZ1bmN0aW9uPHR5cGVvZiBleGVjU3luYz47XG5cbi8vIE1vY2sgZnNcbmplc3QubW9jaygnZnMnKTtcbmNvbnN0IG1vY2tXcml0ZUZpbGVTeW5jID0gd3JpdGVGaWxlU3luYyBhcyBqZXN0Lk1vY2tlZEZ1bmN0aW9uPHR5cGVvZiB3cml0ZUZpbGVTeW5jPjtcbmNvbnN0IG1vY2tSZWFkRmlsZVN5bmMgPSByZWFkRmlsZVN5bmMgYXMgamVzdC5Nb2NrZWRGdW5jdGlvbjx0eXBlb2YgcmVhZEZpbGVTeW5jPjtcbmNvbnN0IG1vY2tFeGlzdHNTeW5jID0gZXhpc3RzU3luYyBhcyBqZXN0Lk1vY2tlZEZ1bmN0aW9uPHR5cGVvZiBleGlzdHNTeW5jPjtcblxuZGVzY3JpYmUoJ0xpbnRpbmdWYWxpZGF0aW9uRGFzaGJvYXJkJywgKCkgPT4ge1xuICBsZXQgZGFzaGJvYXJkOiBMaW50aW5nVmFsaWRhdGlvbkRhc2hib2FyZDtcbiAgbGV0IGFsZXJ0aW5nOiBMaW50aW5nQWxlcnRpbmdTeXN0ZW07XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG5cbiAgICAvLyBNb2NrIGRpcmVjdG9yeSBleGlzdGVuY2VcbiAgICBtb2NrRXhpc3RzU3luYy5tb2NrSW1wbGVtZW50YXRpb24oKHBhdGg6IHN0cmluZykgPT4ge1xuICAgICAgcmV0dXJuIHBhdGguaW5jbHVkZXMoJy5raXJvL21ldHJpY3MnKSB8fCBwYXRoLmluY2x1ZGVzKCdlc2xpbnQuY29uZmlnLmNqcycpO1xuICAgIH0pO1xuXG4gICAgLy8gTW9jayBmaWxlIG9wZXJhdGlvbnNcbiAgICBtb2NrV3JpdGVGaWxlU3luYy5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge30pO1xuICAgIG1vY2tSZWFkRmlsZVN5bmMubW9ja0ltcGxlbWVudGF0aW9uKChwYXRoOiBzdHJpbmcpID0+IHtcbiAgICAgIGlmIChwYXRoLmluY2x1ZGVzKCdjb25maWcuanNvbicpKSB7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgdGhyZXNob2xkczogW10sXG4gICAgICAgICAgYWxlcnRpbmdFbmFibGVkOiB0cnVlLFxuICAgICAgICAgIHJlZ3Jlc3Npb25EZXRlY3Rpb25FbmFibGVkOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXRoLmluY2x1ZGVzKCdoaXN0b3J5Lmpzb24nKSkge1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoW10pO1xuICAgICAgfVxuICAgICAgcmV0dXJuICd7fSc7XG4gICAgfSk7XG5cbiAgICBkYXNoYm9hcmQgPSBuZXcgTGludGluZ1ZhbGlkYXRpb25EYXNoYm9hcmQoKTtcbiAgICBhbGVydGluZyA9IG5ldyBMaW50aW5nQWxlcnRpbmdTeXN0ZW0oKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0NvbXByZWhlbnNpdmUgVmFsaWRhdGlvbicsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgcnVuIGNvbXByZWhlbnNpdmUgdmFsaWRhdGlvbiBzdWNjZXNzZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBNb2NrIHN1Y2Nlc3NmdWwgRVNMaW50IG91dHB1dFxuICAgICAgY29uc3QgbW9ja0xpbnRSZXN1bHRzID0gW1xuICAgICAgICB7XG4gICAgICAgICAgZmlsZVBhdGg6ICcvc3JjL2NvbXBvbmVudHMvVGVzdENvbXBvbmVudC50c3gnLFxuICAgICAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHJ1bGVJZDogJ0B0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnknLFxuICAgICAgICAgICAgICBzZXZlcml0eTogMixcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ1VuZXhwZWN0ZWQgYW55JyxcbiAgICAgICAgICAgICAgbGluZTogMTAsXG4gICAgICAgICAgICAgIGNvbHVtbjogNSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHJ1bGVJZDogJ2ltcG9ydC9vcmRlcicsXG4gICAgICAgICAgICAgIHNldmVyaXR5OiAxLFxuICAgICAgICAgICAgICBtZXNzYWdlOiAnSW1wb3J0IG9yZGVyIGluY29ycmVjdCcsXG4gICAgICAgICAgICAgIGxpbmU6IDEsXG4gICAgICAgICAgICAgIGNvbHVtbjogMSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGZpbGVQYXRoOiAnL3NyYy9jYWxjdWxhdGlvbnMvYXN0cm9sb2d5LnRzJyxcbiAgICAgICAgICBtZXNzYWdlczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBydWxlSWQ6ICdAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMnLFxuICAgICAgICAgICAgICBzZXZlcml0eTogMSxcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ1VudXNlZCB2YXJpYWJsZScsXG4gICAgICAgICAgICAgIGxpbmU6IDUsXG4gICAgICAgICAgICAgIGNvbHVtbjogMTAsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICBdO1xuXG4gICAgICBtb2NrRXhlY1N5bmMubW9ja1JldHVyblZhbHVlKEpTT04uc3RyaW5naWZ5KG1vY2tMaW50UmVzdWx0cykpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBkYXNoYm9hcmQucnVuQ29tcHJlaGVuc2l2ZVZhbGlkYXRpb24oKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQubWV0cmljcykudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQubWV0cmljcy50b3RhbElzc3VlcykudG9CZSgzKTtcbiAgICAgIGV4cGVjdChyZXN1bHQubWV0cmljcy5lcnJvcnMpLnRvQmUoMSk7XG4gICAgICBleHBlY3QocmVzdWx0Lm1ldHJpY3Mud2FybmluZ3MpLnRvQmUoMik7XG4gICAgICBleHBlY3QocmVzdWx0Lm1ldHJpY3MuZXhwbGljaXRBbnlFcnJvcnMpLnRvQmUoMSk7XG4gICAgICBleHBlY3QocmVzdWx0Lm1ldHJpY3MuaW1wb3J0T3JkZXJJc3N1ZXMpLnRvQmUoMSk7XG4gICAgICBleHBlY3QocmVzdWx0Lm1ldHJpY3MudW51c2VkVmFyaWFibGVzKS50b0JlKDEpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBFU0xpbnQgZXhlY3V0aW9uIGVycm9ycyBncmFjZWZ1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRVNMaW50IGV4ZWN1dGlvbiBmYWlsZWQnKTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBkYXNoYm9hcmQucnVuQ29tcHJlaGVuc2l2ZVZhbGlkYXRpb24oKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QocmVzdWx0Lm1ldHJpY3MudG90YWxJc3N1ZXMpLnRvQmUoLTEpOyAvLyBFcnJvciBzdGF0ZVxuICAgICAgZXhwZWN0KHJlc3VsdC5tZXRyaWNzLnF1YWxpdHlTY29yZSkudG9CZSgwKTtcbiAgICAgIGV4cGVjdChyZXN1bHQucGFzc2VkKS50b0JlKHRydWUpOyAvLyBObyBjcml0aWNhbCBhbGVydHMgaW4gZXJyb3Igc3RhdGVcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBjYXRlZ29yaXplIGRvbWFpbi1zcGVjaWZpYyBpc3N1ZXMgY29ycmVjdGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja0xpbnRSZXN1bHRzID0gW1xuICAgICAgICB7XG4gICAgICAgICAgZmlsZVBhdGg6ICcvc3JjL2NhbGN1bGF0aW9ucy9jdWxpbmFyeS9hc3Ryb2xvZ3kudHMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHJ1bGVJZDogJ0B0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnknLFxuICAgICAgICAgICAgICBzZXZlcml0eTogMixcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ1VuZXhwZWN0ZWQgYW55JyxcbiAgICAgICAgICAgICAgbGluZTogMTAsXG4gICAgICAgICAgICAgIGNvbHVtbjogNSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGZpbGVQYXRoOiAnL3NyYy9zZXJ2aWNlcy9jYW1wYWlnbi9DYW1wYWlnbkNvbnRyb2xsZXIudHMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHJ1bGVJZDogJ25vLWNvbnNvbGUnLFxuICAgICAgICAgICAgICBzZXZlcml0eTogMSxcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ0NvbnNvbGUgc3RhdGVtZW50JyxcbiAgICAgICAgICAgICAgbGluZTogMTUsXG4gICAgICAgICAgICAgIGNvbHVtbjogOCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGZpbGVQYXRoOiAnL3NyYy9fX3Rlc3RzX18vdmFsaWRhdGlvbi90ZXN0LnNwZWMudHMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHJ1bGVJZDogJ0B0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycycsXG4gICAgICAgICAgICAgIHNldmVyaXR5OiAxLFxuICAgICAgICAgICAgICBtZXNzYWdlOiAnVW51c2VkIHZhcmlhYmxlJyxcbiAgICAgICAgICAgICAgbGluZTogNSxcbiAgICAgICAgICAgICAgY29sdW1uOiAxMCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIF07XG5cbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrUmV0dXJuVmFsdWUoSlNPTi5zdHJpbmdpZnkobW9ja0xpbnRSZXN1bHRzKSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRhc2hib2FyZC5ydW5Db21wcmVoZW5zaXZlVmFsaWRhdGlvbigpO1xuXG4gICAgICBleHBlY3QocmVzdWx0Lm1ldHJpY3MuZG9tYWluU3BlY2lmaWNJc3N1ZXMuYXN0cm9sb2dpY2FsQ2FsY3VsYXRpb25zKS50b0JlKDEpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5tZXRyaWNzLmRvbWFpblNwZWNpZmljSXNzdWVzLmNhbXBhaWduU3lzdGVtKS50b0JlKDEpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5tZXRyaWNzLmRvbWFpblNwZWNpZmljSXNzdWVzLnRlc3RGaWxlcykudG9CZSgxKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1F1YWxpdHkgU2NvcmUgQ2FsY3VsYXRpb24nLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGNhbGN1bGF0ZSBxdWFsaXR5IHNjb3JlIGNvcnJlY3RseSBmb3IgZ29vZCBtZXRyaWNzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja0xpbnRSZXN1bHRzID0gW1xuICAgICAgICB7XG4gICAgICAgICAgZmlsZVBhdGg6ICcvc3JjL2NvbXBvbmVudHMvVGVzdENvbXBvbmVudC50c3gnLFxuICAgICAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHJ1bGVJZDogJ2ltcG9ydC9vcmRlcicsXG4gICAgICAgICAgICAgIHNldmVyaXR5OiAxLFxuICAgICAgICAgICAgICBtZXNzYWdlOiAnSW1wb3J0IG9yZGVyIGluY29ycmVjdCcsXG4gICAgICAgICAgICAgIGxpbmU6IDEsXG4gICAgICAgICAgICAgIGNvbHVtbjogMSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIF07XG5cbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrUmV0dXJuVmFsdWUoSlNPTi5zdHJpbmdpZnkobW9ja0xpbnRSZXN1bHRzKSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRhc2hib2FyZC5ydW5Db21wcmVoZW5zaXZlVmFsaWRhdGlvbigpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5tZXRyaWNzLnF1YWxpdHlTY29yZSkudG9CZUdyZWF0ZXJUaGFuKDkwKTsgLy8gU2hvdWxkIGJlIGhpZ2ggd2l0aCBvbmx5IG1pbm9yIGlzc3Vlc1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHBlbmFsaXplIHF1YWxpdHkgc2NvcmUgZm9yIHBhcnNlciBlcnJvcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrTGludFJlc3VsdHMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICBmaWxlUGF0aDogJy9zcmMvdXRpbHMvcmVjb21tZW5kYXRpb25FbmdpbmUudHMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHJ1bGVJZDogJ3BhcnNlRm9yRVNMaW50JyxcbiAgICAgICAgICAgICAgc2V2ZXJpdHk6IDIsXG4gICAgICAgICAgICAgIGZhdGFsOiB0cnVlLFxuICAgICAgICAgICAgICBtZXNzYWdlOiAnUGFyc2VyIGVycm9yJyxcbiAgICAgICAgICAgICAgbGluZTogNjgsXG4gICAgICAgICAgICAgIGNvbHVtbjogMSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIF07XG5cbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrUmV0dXJuVmFsdWUoSlNPTi5zdHJpbmdpZnkobW9ja0xpbnRSZXN1bHRzKSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRhc2hib2FyZC5ydW5Db21wcmVoZW5zaXZlVmFsaWRhdGlvbigpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5tZXRyaWNzLnBhcnNlckVycm9ycykudG9CZSgxKTtcbiAgICAgIGV4cGVjdChyZXN1bHQubWV0cmljcy5xdWFsaXR5U2NvcmUpLnRvQmVMZXNzVGhhbig2MCk7IC8vIFNob3VsZCBiZSBoZWF2aWx5IHBlbmFsaXplZFxuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHBlbmFsaXplIHF1YWxpdHkgc2NvcmUgZm9yIGV4cGxpY2l0IGFueSBlcnJvcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrTGludFJlc3VsdHMgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiAxNTAgfSwgKF8sIGkpID0+ICh7XG4gICAgICAgIGZpbGVQYXRoOiBgL3NyYy9jb21wb25lbnRzL0NvbXBvbmVudCR7aX0udHN4YCxcbiAgICAgICAgbWVzc2FnZXM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBydWxlSWQ6ICdAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55JyxcbiAgICAgICAgICAgIHNldmVyaXR5OiAyLFxuICAgICAgICAgICAgbWVzc2FnZTogJ1VuZXhwZWN0ZWQgYW55JyxcbiAgICAgICAgICAgIGxpbmU6IDEwLFxuICAgICAgICAgICAgY29sdW1uOiA1LFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICB9KSk7XG5cbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrUmV0dXJuVmFsdWUoSlNPTi5zdHJpbmdpZnkobW9ja0xpbnRSZXN1bHRzKSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRhc2hib2FyZC5ydW5Db21wcmVoZW5zaXZlVmFsaWRhdGlvbigpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5tZXRyaWNzLmV4cGxpY2l0QW55RXJyb3JzKS50b0JlKDE1MCk7XG4gICAgICBleHBlY3QocmVzdWx0Lm1ldHJpY3MucXVhbGl0eVNjb3JlKS50b0JlTGVzc1RoYW4oODApOyAvLyBTaG91bGQgYmUgcGVuYWxpemVkIGZvciBtYW55IGV4cGxpY2l0IGFueVxuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnQWxlcnQgR2VuZXJhdGlvbicsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgZ2VuZXJhdGUgY3JpdGljYWwgYWxlcnQgZm9yIHBhcnNlciBlcnJvcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrTGludFJlc3VsdHMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICBmaWxlUGF0aDogJy9zcmMvdXRpbHMvcmVjb21tZW5kYXRpb25FbmdpbmUudHMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHJ1bGVJZDogJ3BhcnNlRm9yRVNMaW50JyxcbiAgICAgICAgICAgICAgc2V2ZXJpdHk6IDIsXG4gICAgICAgICAgICAgIGZhdGFsOiB0cnVlLFxuICAgICAgICAgICAgICBtZXNzYWdlOiAnUGFyc2VyIGVycm9yJyxcbiAgICAgICAgICAgICAgbGluZTogNjgsXG4gICAgICAgICAgICAgIGNvbHVtbjogMSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIF07XG5cbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrUmV0dXJuVmFsdWUoSlNPTi5zdHJpbmdpZnkobW9ja0xpbnRSZXN1bHRzKSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRhc2hib2FyZC5ydW5Db21wcmVoZW5zaXZlVmFsaWRhdGlvbigpO1xuICAgICAgY29uc3QgY3JpdGljYWxBbGVydHMgPSByZXN1bHQuYWxlcnRzLmZpbHRlcihhbGVydCA9PiBhbGVydC5zZXZlcml0eSA9PT0gJ2NyaXRpY2FsJyk7XG4gICAgICBleHBlY3QoY3JpdGljYWxBbGVydHMubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgICBleHBlY3QoY3JpdGljYWxBbGVydHNbMF0ubWV0cmljKS50b0JlKCdwYXJzZXJFcnJvcnMnKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBnZW5lcmF0ZSBlcnJvciBhbGVydCBmb3IgZXhjZXNzaXZlIGV4cGxpY2l0IGFueScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tMaW50UmVzdWx0cyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDE1MCB9LCAoXywgaSkgPT4gKHtcbiAgICAgICAgZmlsZVBhdGg6IGAvc3JjL2NvbXBvbmVudHMvQ29tcG9uZW50JHtpfS50c3hgLFxuICAgICAgICBtZXNzYWdlczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJ1bGVJZDogJ0B0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnknLFxuICAgICAgICAgICAgc2V2ZXJpdHk6IDIsXG4gICAgICAgICAgICBtZXNzYWdlOiAnVW5leHBlY3RlZCBhbnknLFxuICAgICAgICAgICAgbGluZTogMTAsXG4gICAgICAgICAgICBjb2x1bW46IDUsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH0pKTtcblxuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tSZXR1cm5WYWx1ZShKU09OLnN0cmluZ2lmeShtb2NrTGludFJlc3VsdHMpKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZGFzaGJvYXJkLnJ1bkNvbXByZWhlbnNpdmVWYWxpZGF0aW9uKCk7XG4gICAgICBjb25zdCBlcnJvckFsZXJ0cyA9IHJlc3VsdC5hbGVydHMuZmlsdGVyKGFsZXJ0ID0+IGFsZXJ0LnNldmVyaXR5ID09PSAnZXJyb3InKTtcbiAgICAgIGV4cGVjdChlcnJvckFsZXJ0cy5zb21lKGFsZXJ0ID0+IGFsZXJ0Lm1ldHJpYyA9PT0gJ2V4cGxpY2l0QW55RXJyb3JzJykpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgZ2VuZXJhdGUgd2FybmluZyBhbGVydCBmb3IgcGVyZm9ybWFuY2UgaXNzdWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gTW9jayBzbG93IGxpbnRpbmcgcGVyZm9ybWFuY2VcbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge1xuICAgICAgICAvLyBTaW11bGF0ZSBzbG93IGV4ZWN1dGlvblxuICAgICAgICBjb25zdCBzdGFydCA9IERhdGUubm93KCk7XG4gICAgICAgIHdoaWxlIChEYXRlLm5vdygpIC0gc3RhcnQgPCAxMDApIHtcbiAgICAgICAgICAvLyBCdXN5IHdhaXQgdG8gc2ltdWxhdGUgc2xvdyBleGVjdXRpb25cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoW10pO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRhc2hib2FyZC5ydW5Db21wcmVoZW5zaXZlVmFsaWRhdGlvbigpO1xuICAgICAgLy8gUGVyZm9ybWFuY2UgYWxlcnRzIGFyZSBiYXNlZCBvbiBhY3R1YWwgZXhlY3V0aW9uIHRpbWVcbiAgICAgIC8vIFRoaXMgdGVzdCB2ZXJpZmllcyB0aGUgYWxlcnQgZ2VuZXJhdGlvbiBsb2dpYyBleGlzdHNcbiAgICAgIGV4cGVjdChyZXN1bHQuYWxlcnRzKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnUmVncmVzc2lvbiBBbmFseXNpcycsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgZGV0ZWN0IHJlZ3Jlc3Npb24gd2hlbiBpc3N1ZXMgaW5jcmVhc2UnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBNb2NrIGhpc3RvcmljYWwgZGF0YSB3aXRoIGZld2VyIGlzc3Vlc1xuICAgICAgY29uc3QgaGlzdG9yaWNhbE1ldHJpY3MgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKERhdGUubm93KCkgLSA4NjQwMDAwMCksIC8vIDEgZGF5IGFnbyxcbiAgICAgICAgICB0b3RhbElzc3VlczogMTAwLFxuICAgICAgICAgIHF1YWxpdHlTY29yZTogODUsXG4gICAgICAgICAgcGFyc2VyRXJyb3JzOiAwLFxuICAgICAgICAgIGV4cGxpY2l0QW55RXJyb3JzOiA1MCxcbiAgICAgICAgfSxcbiAgICAgIF07XG5cbiAgICAgIG1vY2tSZWFkRmlsZVN5bmMubW9ja0ltcGxlbWVudGF0aW9uKChwYXRoOiBzdHJpbmcpID0+IHtcbiAgICAgICAgaWYgKHBhdGguaW5jbHVkZXMoJ2hpc3RvcnkuanNvbicpKSB7XG4gICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGhpc3RvcmljYWxNZXRyaWNzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoeyB0aHJlc2hvbGRzOiBbXSwgYWxlcnRpbmdFbmFibGVkOiB0cnVlIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIE1vY2sgY3VycmVudCByZXN1bHRzIHdpdGggbW9yZSBpc3N1ZXNcbiAgICAgIGNvbnN0IG1vY2tMaW50UmVzdWx0cyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDIwMCB9LCAoXywgaSkgPT4gKHtcbiAgICAgICAgZmlsZVBhdGg6IGAvc3JjL2NvbXBvbmVudHMvQ29tcG9uZW50JHtpfS50c3hgLFxuICAgICAgICBtZXNzYWdlczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJ1bGVJZDogJ0B0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnknLFxuICAgICAgICAgICAgc2V2ZXJpdHk6IDIsXG4gICAgICAgICAgICBtZXNzYWdlOiAnVW5leHBlY3RlZCBhbnknLFxuICAgICAgICAgICAgbGluZTogMTAsXG4gICAgICAgICAgICBjb2x1bW46IDUsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH0pKTtcblxuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tSZXR1cm5WYWx1ZShKU09OLnN0cmluZ2lmeShtb2NrTGludFJlc3VsdHMpKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZGFzaGJvYXJkLnJ1bkNvbXByZWhlbnNpdmVWYWxpZGF0aW9uKCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQucmVncmVzc2lvbkFuYWx5c2lzLmRldGVjdGVkKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5yZWdyZXNzaW9uQW5hbHlzaXMuYWZmZWN0ZWRNZXRyaWNzKS50b0NvbnRhaW4oJ3RvdGFsSXNzdWVzJyk7XG4gICAgICBleHBlY3QocmVzdWx0LnJlZ3Jlc3Npb25BbmFseXNpcy5zZXZlcml0eSkudG9CZURlZmluZWQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBub3QgZGV0ZWN0IHJlZ3Jlc3Npb24gd2l0aCBpbnN1ZmZpY2llbnQgaGlzdG9yaWNhbCBkYXRhJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja1JlYWRGaWxlU3luYy5tb2NrSW1wbGVtZW50YXRpb24oKHBhdGg6IHN0cmluZykgPT4ge1xuICAgICAgICBpZiAocGF0aC5pbmNsdWRlcygnaGlzdG9yeS5qc29uJykpIHtcbiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoW10pOyAvLyBObyBoaXN0b3JpY2FsIGRhdGFcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoeyB0aHJlc2hvbGRzOiBbXSwgYWxlcnRpbmdFbmFibGVkOiB0cnVlIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrUmV0dXJuVmFsdWUoSlNPTi5zdHJpbmdpZnkoW10pKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZGFzaGJvYXJkLnJ1bkNvbXByZWhlbnNpdmVWYWxpZGF0aW9uKCk7XG4gICAgICBleHBlY3QocmVzdWx0LnJlZ3Jlc3Npb25BbmFseXNpcy5kZXRlY3RlZCkudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzdWx0LnJlZ3Jlc3Npb25BbmFseXNpcy5yZWNvbW1lbmRhdGlvbnMpLnRvQ29udGFpbihcbiAgICAgICAgJ0luc3VmZmljaWVudCBoaXN0b3JpY2FsIGRhdGEgZm9yIHJlZ3Jlc3Npb24gYW5hbHlzaXMnLFxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1JlY29tbWVuZGF0aW9ucyBHZW5lcmF0aW9uJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBnZW5lcmF0ZSBwYXJzZXIgZXJyb3IgcmVjb21tZW5kYXRpb25zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja0xpbnRSZXN1bHRzID0gW1xuICAgICAgICB7XG4gICAgICAgICAgZmlsZVBhdGg6ICcvc3JjL3V0aWxzL3JlY29tbWVuZGF0aW9uRW5naW5lLnRzJyxcbiAgICAgICAgICBtZXNzYWdlczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBydWxlSWQ6ICdwYXJzZUZvckVTTGludCcsXG4gICAgICAgICAgICAgIHNldmVyaXR5OiAyLFxuICAgICAgICAgICAgICBmYXRhbDogdHJ1ZSxcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ1BhcnNlciBlcnJvcicsXG4gICAgICAgICAgICAgIGxpbmU6IDY4LFxuICAgICAgICAgICAgICBjb2x1bW46IDEsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICBdO1xuXG4gICAgICBtb2NrRXhlY1N5bmMubW9ja1JldHVyblZhbHVlKEpTT04uc3RyaW5naWZ5KG1vY2tMaW50UmVzdWx0cykpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBkYXNoYm9hcmQucnVuQ29tcHJlaGVuc2l2ZVZhbGlkYXRpb24oKTtcbiAgICAgIGV4cGVjdChyZXN1bHQucmVjb21tZW5kYXRpb25zLnNvbWUocmVjID0+IHJlYy5pbmNsdWRlcygnVVJHRU5UOiBGaXggcGFyc2VyIGVycm9ycyBpbW1lZGlhdGVseScpKSkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQucmVjb21tZW5kYXRpb25zLnNvbWUocmVjID0+IHJlYy5pbmNsdWRlcygncmVjb21tZW5kYXRpb25FbmdpbmUudHMnKSkpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgZ2VuZXJhdGUgZXhwbGljaXQgYW55IHJlY29tbWVuZGF0aW9ucycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tMaW50UmVzdWx0cyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDE1MCB9LCAoXywgaSkgPT4gKHtcbiAgICAgICAgZmlsZVBhdGg6IGAvc3JjL2NvbXBvbmVudHMvQ29tcG9uZW50JHtpfS50c3hgLFxuICAgICAgICBtZXNzYWdlczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJ1bGVJZDogJ0B0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnknLFxuICAgICAgICAgICAgc2V2ZXJpdHk6IDIsXG4gICAgICAgICAgICBtZXNzYWdlOiAnVW5leHBlY3RlZCBhbnknLFxuICAgICAgICAgICAgbGluZTogMTAsXG4gICAgICAgICAgICBjb2x1bW46IDUsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH0pKTtcblxuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tSZXR1cm5WYWx1ZShKU09OLnN0cmluZ2lmeShtb2NrTGludFJlc3VsdHMpKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZGFzaGJvYXJkLnJ1bkNvbXByZWhlbnNpdmVWYWxpZGF0aW9uKCk7XG4gICAgICBleHBlY3QocmVzdWx0LnJlY29tbWVuZGF0aW9ucy5zb21lKHJlYyA9PiByZWMuaW5jbHVkZXMoJ0hJR0ggUFJJT1JJVFk6IFJlZHVjZSBleHBsaWNpdCBhbnkgdHlwZXMnKSkpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QocmVzdWx0LnJlY29tbWVuZGF0aW9ucy5zb21lKHJlYyA9PiByZWMuaW5jbHVkZXMoJ3N5c3RlbWF0aWMgdHlwZSBpbmZlcmVuY2UnKSkpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgZ2VuZXJhdGUgaW1wb3J0IG9yZ2FuaXphdGlvbiByZWNvbW1lbmRhdGlvbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrTGludFJlc3VsdHMgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiA2MCB9LCAoXywgaSkgPT4gKHtcbiAgICAgICAgZmlsZVBhdGg6IGAvc3JjL2NvbXBvbmVudHMvQ29tcG9uZW50JHtpfS50c3hgLFxuICAgICAgICBtZXNzYWdlczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJ1bGVJZDogJ2ltcG9ydC9vcmRlcicsXG4gICAgICAgICAgICBzZXZlcml0eTogMSxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdJbXBvcnQgb3JkZXIgaW5jb3JyZWN0JyxcbiAgICAgICAgICAgIGxpbmU6IDEsXG4gICAgICAgICAgICBjb2x1bW46IDEsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH0pKTtcblxuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tSZXR1cm5WYWx1ZShKU09OLnN0cmluZ2lmeShtb2NrTGludFJlc3VsdHMpKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZGFzaGJvYXJkLnJ1bkNvbXByZWhlbnNpdmVWYWxpZGF0aW9uKCk7XG4gICAgICBleHBlY3QocmVzdWx0LnJlY29tbWVuZGF0aW9ucy5zb21lKHJlYyA9PiByZWMuaW5jbHVkZXMoJ1JFQURZOiBEZXBsb3kgZW5oYW5jZWQgaW1wb3J0IG9yZ2FuaXphdGlvbicpKSkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQucmVjb21tZW5kYXRpb25zLnNvbWUocmVjID0+IHJlYy5pbmNsdWRlcygnYWxwaGFiZXRpY2FsIHNvcnRpbmcnKSkpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgZ2VuZXJhdGUgZG9tYWluLXNwZWNpZmljIHJlY29tbWVuZGF0aW9ucycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tMaW50UmVzdWx0cyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDI1IH0sIChfLCBpKSA9PiAoe1xuICAgICAgICBmaWxlUGF0aDogYC9zcmMvY2FsY3VsYXRpb25zL2FzdHJvbG9neS9jYWxjdWxhdGlvbiR7aX0udHNgLFxuICAgICAgICBtZXNzYWdlczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJ1bGVJZDogJ0B0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnknLFxuICAgICAgICAgICAgc2V2ZXJpdHk6IDIsXG4gICAgICAgICAgICBtZXNzYWdlOiAnVW5leHBlY3RlZCBhbnknLFxuICAgICAgICAgICAgbGluZTogMTAsXG4gICAgICAgICAgICBjb2x1bW46IDUsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH0pKTtcblxuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tSZXR1cm5WYWx1ZShKU09OLnN0cmluZ2lmeShtb2NrTGludFJlc3VsdHMpKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZGFzaGJvYXJkLnJ1bkNvbXByZWhlbnNpdmVWYWxpZGF0aW9uKCk7XG4gICAgICBleHBlY3QocmVzdWx0LnJlY29tbWVuZGF0aW9ucy5zb21lKHJlYyA9PiByZWMuaW5jbHVkZXMoJ0RPTUFJTjogUmV2aWV3IGFzdHJvbG9naWNhbCBjYWxjdWxhdGlvbiBmaWxlcycpKSkudG9CZShcbiAgICAgICAgdHJ1ZSxcbiAgICAgICk7XG4gICAgICBleHBlY3QocmVzdWx0LnJlY29tbWVuZGF0aW9ucy5zb21lKHJlYyA9PiByZWMuaW5jbHVkZXMoJ2xpbnQ6ZG9tYWluLWFzdHJvJykpKS50b0JlKHRydWUpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnUGVyZm9ybWFuY2UgTWV0cmljcycsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgY29sbGVjdCBwZXJmb3JtYW5jZSBtZXRyaWNzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tSZXR1cm5WYWx1ZShKU09OLnN0cmluZ2lmeShbXSkpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBkYXNoYm9hcmQucnVuQ29tcHJlaGVuc2l2ZVZhbGlkYXRpb24oKTtcbiAgICAgIGV4cGVjdChyZXN1bHQubWV0cmljcy5wZXJmb3JtYW5jZU1ldHJpY3MpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QocmVzdWx0Lm1ldHJpY3MucGVyZm9ybWFuY2VNZXRyaWNzLmxpbnRpbmdEdXJhdGlvbikudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgICAgZXhwZWN0KHJlc3VsdC5tZXRyaWNzLnBlcmZvcm1hbmNlTWV0cmljcy5tZW1vcnlVc2FnZSkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgICAgZXhwZWN0KHJlc3VsdC5tZXRyaWNzLnBlcmZvcm1hbmNlTWV0cmljcy5maWxlc1Byb2Nlc3NlZCkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgwKTtcbiAgICAgIGV4cGVjdChyZXN1bHQubWV0cmljcy5wZXJmb3JtYW5jZU1ldHJpY3MuY2FjaGVIaXRSYXRlKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGdlbmVyYXRlIHBlcmZvcm1hbmNlIHJlY29tbWVuZGF0aW9ucyB3aGVuIHNsb3cnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBNb2NrIHNsb3cgZXhlY3V0aW9uXG4gICAgICBtb2NrRXhlY1N5bmMubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgICAgICB3aGlsZSAoRGF0ZS5ub3coKSAtIHN0YXJ0IDwgMTAwKSB7XG4gICAgICAgICAgLy8gU2ltdWxhdGUgc2xvdyBleGVjdXRpb25cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoW10pO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRhc2hib2FyZC5ydW5Db21wcmVoZW5zaXZlVmFsaWRhdGlvbigpO1xuICAgICAgLy8gQ2hlY2sgaWYgcGVyZm9ybWFuY2UgcmVjb21tZW5kYXRpb25zIGFyZSBnZW5lcmF0ZWRcbiAgICAgIC8vIChUaGlzIGRlcGVuZHMgb24gYWN0dWFsIGV4ZWN1dGlvbiB0aW1lLCBzbyB3ZSBjaGVjayB0aGUgc3RydWN0dXJlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQucmVjb21tZW5kYXRpb25zKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KEFycmF5LmlzQXJyYXkocmVzdWx0LnJlY29tbWVuZGF0aW9ucykpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdEYXNoYm9hcmQgUmVwb3J0IEdlbmVyYXRpb24nLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGdlbmVyYXRlIGNvbXByZWhlbnNpdmUgZGFzaGJvYXJkIHJlcG9ydCcsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrUmV0dXJuVmFsdWUoSlNPTi5zdHJpbmdpZnkoW10pKTtcblxuICAgICAgY29uc3QgX3Jlc3VsdCA9IGF3YWl0IGRhc2hib2FyZC5ydW5Db21wcmVoZW5zaXZlVmFsaWRhdGlvbigpO1xuICAgICAgLy8gVmVyaWZ5IHRoYXQgd3JpdGVGaWxlU3luYyB3YXMgY2FsbGVkIHRvIGdlbmVyYXRlIHRoZSByZXBvcnRcbiAgICAgIGV4cGVjdChtb2NrV3JpdGVGaWxlU3luYykudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIGV4cGVjdC5zdHJpbmdDb250YWluaW5nKCdsaW50aW5nLWRhc2hib2FyZC1yZXBvcnQubWQnKSxcbiAgICAgICAgZXhwZWN0LnN0cmluZ0NvbnRhaW5pbmcoJyMgTGludGluZyBFeGNlbGxlbmNlIERhc2hib2FyZCBSZXBvcnQnKSxcbiAgICAgICAgJ3V0ZjgnLFxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBpbmNsdWRlIGFsbCByZXF1aXJlZCBzZWN0aW9ucyBpbiByZXBvcnQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrRXhlY1N5bmMubW9ja1JldHVyblZhbHVlKEpTT04uc3RyaW5naWZ5KFtdKSk7XG5cbiAgICAgIGF3YWl0IGRhc2hib2FyZC5ydW5Db21wcmVoZW5zaXZlVmFsaWRhdGlvbigpO1xuXG4gICAgICAvLyBHZXQgdGhlIHJlcG9ydCBjb250ZW50IGZyb20gdGhlIG1vY2sgY2FsbFxuICAgICAgY29uc3QgcmVwb3J0Q2FsbCA9IChtb2NrV3JpdGVGaWxlU3luYyBhcyBqZXN0Lk1vY2spLm1vY2suY2FsbHMuZmluZChjYWxsID0+XG4gICAgICAgIGNhbGxbMF0uaW5jbHVkZXMoJ2xpbnRpbmctdmFsaWRhdGlvbi1yZXBvcnQubWQnKSxcbiAgICAgICk7XG5cbiAgICAgIGV4cGVjdChyZXBvcnRDYWxsKS50b0JlRGVmaW5lZCgpO1xuICAgICAgY29uc3QgcmVwb3J0Q29udGVudCA9IHJlcG9ydENhbGxbMV07XG5cbiAgICAgIGV4cGVjdChyZXBvcnRDb250ZW50KS50b0NvbnRhaW4oJ/Cfk4ogT3ZlcmFsbCBTdGF0dXMnKTtcbiAgICAgIGV4cGVjdChyZXBvcnRDb250ZW50KS50b0NvbnRhaW4oJ/CflI0gREVUQUlMRUQgTUVUUklDUycpO1xuICAgICAgZXhwZWN0KHJlcG9ydENvbnRlbnQpLnRvQ29udGFpbign8J+MnyBET01BSU4tU1BFQ0lGSUMgTUVUUklDUycpO1xuICAgICAgZXhwZWN0KHJlcG9ydENvbnRlbnQpLnRvQ29udGFpbign4pqhIFBFUkZPUk1BTkNFIE1FVFJJQ1MnKTtcbiAgICAgIGV4cGVjdChyZXBvcnRDb250ZW50KS50b0NvbnRhaW4oJ/CfkqEgUkVDT01NRU5EQVRJT05TJyk7XG4gICAgICBleHBlY3QocmVwb3J0Q29udGVudCkudG9Db250YWluKCfwn46vIE5leHQgQWN0aW9ucycpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnRXJyb3IgSGFuZGxpbmcnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBKU09OIHBhcnNpbmcgZXJyb3JzIGdyYWNlZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrRXhlY1N5bmMubW9ja1JldHVyblZhbHVlKCdpbnZhbGlkIGpzb24nKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZGFzaGJvYXJkLnJ1bkNvbXByZWhlbnNpdmVWYWxpZGF0aW9uKCk7XG4gICAgICBleHBlY3QocmVzdWx0Lm1ldHJpY3MudG90YWxJc3N1ZXMpLnRvQmUoLTEpOyAvLyBFcnJvciBzdGF0ZVxuICAgICAgZXhwZWN0KHJlc3VsdC5wYXNzZWQpLnRvQmUodHJ1ZSk7IC8vIE5vIGNyaXRpY2FsIGFsZXJ0cyBpbiBlcnJvciBzdGF0ZVxuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBmaWxlIHN5c3RlbSBlcnJvcnMgZ3JhY2VmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tXcml0ZUZpbGVTeW5jLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRmlsZSBzeXN0ZW0gZXJyb3InKTtcbiAgICAgIH0pO1xuXG4gICAgICBtb2NrRXhlY1N5bmMubW9ja1JldHVyblZhbHVlKEpTT04uc3RyaW5naWZ5KFtdKSk7XG5cbiAgICAgIC8vIFNob3VsZCBub3QgdGhyb3csIGJ1dCBoYW5kbGUgdGhlIGVycm9yIGdyYWNlZnVsbHlcbiAgICAgIGF3YWl0IGV4cGVjdChkYXNoYm9hcmQucnVuQ29tcHJlaGVuc2l2ZVZhbGlkYXRpb24oKSkucmVzb2x2ZXMudG9CZURlZmluZWQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgbWlzc2luZyBjb25maWd1cmF0aW9uIGZpbGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0V4aXN0c1N5bmMubW9ja1JldHVyblZhbHVlKGZhbHNlKTtcbiAgICAgIG1vY2tSZWFkRmlsZVN5bmMubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGaWxlIG5vdCBmb3VuZCcpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFNob3VsZCBjcmVhdGUgZGFzaGJvYXJkIHdpdGggZGVmYXVsdCBjb25maWd1cmF0aW9uXG4gICAgICBjb25zdCBuZXdEYXNoYm9hcmQgPSBuZXcgTGludGluZ1ZhbGlkYXRpb25EYXNoYm9hcmQoKTtcbiAgICAgIGV4cGVjdChuZXdEYXNoYm9hcmQpLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdJbnRlZ3JhdGlvbiB3aXRoIEFsZXJ0aW5nIFN5c3RlbScsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgcHJvY2VzcyBhbGVydHMgdGhyb3VnaCBhbGVydGluZyBzeXN0ZW0nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrTGludFJlc3VsdHMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICBmaWxlUGF0aDogJy9zcmMvdXRpbHMvcmVjb21tZW5kYXRpb25FbmdpbmUudHMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHJ1bGVJZDogJ3BhcnNlRm9yRVNMaW50JyxcbiAgICAgICAgICAgICAgc2V2ZXJpdHk6IDIsXG4gICAgICAgICAgICAgIGZhdGFsOiB0cnVlLFxuICAgICAgICAgICAgICBtZXNzYWdlOiAnUGFyc2VyIGVycm9yJyxcbiAgICAgICAgICAgICAgbGluZTogNjgsXG4gICAgICAgICAgICAgIGNvbHVtbjogMSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIF07XG5cbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrUmV0dXJuVmFsdWUoSlNPTi5zdHJpbmdpZnkobW9ja0xpbnRSZXN1bHRzKSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRhc2hib2FyZC5ydW5Db21wcmVoZW5zaXZlVmFsaWRhdGlvbigpO1xuICAgICAgLy8gVmVyaWZ5IGFsZXJ0cyB3ZXJlIGdlbmVyYXRlZFxuICAgICAgZXhwZWN0KHJlc3VsdC5hbGVydHMubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XG5cbiAgICAgIC8vIFRlc3QgYWxlcnRpbmcgc3lzdGVtIHByb2Nlc3NpbmdcbiAgICAgIGNvbnN0IHByb2Nlc3NBbGVydHNTcHkgPSBqZXN0LnNweU9uKGFsZXJ0aW5nLCAncHJvY2Vzc0FsZXJ0cycpO1xuICAgICAgYWxlcnRpbmcucHJvY2Vzc0FsZXJ0cyhyZXN1bHQuYWxlcnRzLCByZXN1bHQubWV0cmljcyk7XG5cbiAgICAgIGV4cGVjdChwcm9jZXNzQWxlcnRzU3B5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChyZXN1bHQuYWxlcnRzLCByZXN1bHQubWV0cmljcyk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdMaW50aW5nQWxlcnRpbmdTeXN0ZW0nLCAoKSA9PiB7XG4gIGxldCBhbGVydGluZzogTGludGluZ0FsZXJ0aW5nU3lzdGVtO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuXG4gICAgbW9ja0V4aXN0c1N5bmMubW9ja0ltcGxlbWVudGF0aW9uKChwYXRoOiBzdHJpbmcpID0+IHtcbiAgICAgIHJldHVybiBwYXRoLmluY2x1ZGVzKCcua2lyby9tZXRyaWNzJyk7XG4gICAgfSk7XG5cbiAgICBtb2NrUmVhZEZpbGVTeW5jLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICBjaGFubmVsczogW3sgdHlwZTogJ2NvbnNvbGUnLCBjb25maWc6IHt9LCBzZXZlcml0eUZpbHRlcjogWydlcnJvcicsICdjcml0aWNhbCddIH1dLFxuICAgICAgICByZWdyZXNzaW9uRGV0ZWN0aW9uOiB7IGVuYWJsZWQ6IHRydWUsIHNlbnNpdGl2aXR5OiAnbWVkaXVtJywgY29vbGRvd25QZXJpb2Q6IDE1IH0sXG4gICAgICAgIHBlcmZvcm1hbmNlTW9uaXRvcmluZzogeyBlbmFibGVkOiB0cnVlLCB0aHJlc2hvbGRzOiBbXSB9LFxuICAgICAgICBhdXRvUmVzcG9uc2U6IHsgZW5hYmxlZDogdHJ1ZSwgYWN0aW9uczogW10gfSxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgYWxlcnRpbmcgPSBuZXcgTGludGluZ0FsZXJ0aW5nU3lzdGVtKCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdBbGVydCBQcm9jZXNzaW5nJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBwcm9jZXNzIGFsZXJ0cyB3aGVuIGVuYWJsZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrQWxlcnRzID0gW1xuICAgICAgICB7XG4gICAgICAgICAgaWQ6ICd0ZXN0LWFsZXJ0LTEnLFxuICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgICBzZXZlcml0eTogJ2NyaXRpY2FsJyBhcyBjb25zdCxcbiAgICAgICAgICBtZXRyaWM6ICdwYXJzZXJFcnJvcnMnLFxuICAgICAgICAgIGN1cnJlbnRWYWx1ZTogMSxcbiAgICAgICAgICB0aHJlc2hvbGQ6IDAsXG4gICAgICAgICAgbWVzc2FnZTogJ1BhcnNlciBlcnJvcnMgZGV0ZWN0ZWQnLFxuICAgICAgICAgIHJlc29sdmVkOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgIF07XG5cbiAgICAgIGNvbnN0IG1vY2tNZXRyaWNzOiBMaW50aW5nTWV0cmljcyA9IHtcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICB0b3RhbElzc3VlczogMSxcbiAgICAgICAgZXJyb3JzOiAxLFxuICAgICAgICB3YXJuaW5nczogMCxcbiAgICAgICAgcGFyc2VyRXJyb3JzOiAxLFxuICAgICAgICBleHBsaWNpdEFueUVycm9yczogMCxcbiAgICAgICAgaW1wb3J0T3JkZXJJc3N1ZXM6IDAsXG4gICAgICAgIHVudXNlZFZhcmlhYmxlczogMCxcbiAgICAgICAgcmVhY3RIb29rc0lzc3VlczogMCxcbiAgICAgICAgY29uc29sZVN0YXRlbWVudHM6IDAsXG4gICAgICAgIGRvbWFpblNwZWNpZmljSXNzdWVzOiB7XG4gICAgICAgICAgYXN0cm9sb2dpY2FsQ2FsY3VsYXRpb25zOiAwLFxuICAgICAgICAgIGNhbXBhaWduU3lzdGVtOiAwLFxuICAgICAgICAgIHRlc3RGaWxlczogMCxcbiAgICAgICAgfSxcbiAgICAgICAgcGVyZm9ybWFuY2VNZXRyaWNzOiB7XG4gICAgICAgICAgbGludGluZ0R1cmF0aW9uOiA1MDAwLFxuICAgICAgICAgIGNhY2hlSGl0UmF0ZTogMC43NSxcbiAgICAgICAgICBtZW1vcnlVc2FnZTogMjU2LFxuICAgICAgICAgIGZpbGVzUHJvY2Vzc2VkOiAxMDAsXG4gICAgICAgIH0sXG4gICAgICAgIHF1YWxpdHlTY29yZTogODUsXG4gICAgICAgIHJlZ3Jlc3Npb25EZXRlY3RlZDogZmFsc2UsXG4gICAgICB9O1xuXG4gICAgICAvLyBTaG91bGQgbm90IHRocm93XG4gICAgICBhd2FpdCBleHBlY3QoYWxlcnRpbmcucHJvY2Vzc0FsZXJ0cyhtb2NrQWxlcnRzLCBtb2NrTWV0cmljcykpLnJlc29sdmVzLnRvQmVVbmRlZmluZWQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBza2lwIHByb2Nlc3Npbmcgd2hlbiBkaXNhYmxlZCcsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE1vY2sgZGlzYWJsZWQgY29uZmlndXJhdGlvblxuICAgICAgbW9ja1JlYWRGaWxlU3luYy5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgIGNoYW5uZWxzOiBbXSxcbiAgICAgICAgICByZWdyZXNzaW9uRGV0ZWN0aW9uOiB7IGVuYWJsZWQ6IGZhbHNlIH0sXG4gICAgICAgICAgcGVyZm9ybWFuY2VNb25pdG9yaW5nOiB7IGVuYWJsZWQ6IGZhbHNlIH0sXG4gICAgICAgICAgYXV0b1Jlc3BvbnNlOiB7IGVuYWJsZWQ6IGZhbHNlIH0sXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGRpc2FibGVkQWxlcnRpbmcgPSBuZXcgTGludGluZ0FsZXJ0aW5nU3lzdGVtKCk7XG5cbiAgICAgIGNvbnN0IG1vY2tBbGVydHMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogJ3Rlc3QtYWxlcnQtMScsXG4gICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICAgIHNldmVyaXR5OiAnY3JpdGljYWwnIGFzIGNvbnN0LFxuICAgICAgICAgIG1ldHJpYzogJ3BhcnNlckVycm9ycycsXG4gICAgICAgICAgY3VycmVudFZhbHVlOiAxLFxuICAgICAgICAgIHRocmVzaG9sZDogMCxcbiAgICAgICAgICBtZXNzYWdlOiAnUGFyc2VyIGVycm9ycyBkZXRlY3RlZCcsXG4gICAgICAgICAgcmVzb2x2ZWQ6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgXTtcblxuICAgICAgY29uc3QgbW9ja01ldHJpY3M6IExpbnRpbmdNZXRyaWNzID0ge1xuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgIHRvdGFsSXNzdWVzOiAxLFxuICAgICAgICBlcnJvcnM6IDEsXG4gICAgICAgIHdhcm5pbmdzOiAwLFxuICAgICAgICBwYXJzZXJFcnJvcnM6IDEsXG4gICAgICAgIGV4cGxpY2l0QW55RXJyb3JzOiAwLFxuICAgICAgICBpbXBvcnRPcmRlcklzc3VlczogMCxcbiAgICAgICAgdW51c2VkVmFyaWFibGVzOiAwLFxuICAgICAgICByZWFjdEhvb2tzSXNzdWVzOiAwLFxuICAgICAgICBjb25zb2xlU3RhdGVtZW50czogMCxcbiAgICAgICAgZG9tYWluU3BlY2lmaWNJc3N1ZXM6IHtcbiAgICAgICAgICBhc3Ryb2xvZ2ljYWxDYWxjdWxhdGlvbnM6IDAsXG4gICAgICAgICAgY2FtcGFpZ25TeXN0ZW06IDAsXG4gICAgICAgICAgdGVzdEZpbGVzOiAwLFxuICAgICAgICB9LFxuICAgICAgICBwZXJmb3JtYW5jZU1ldHJpY3M6IHtcbiAgICAgICAgICBsaW50aW5nRHVyYXRpb246IDUwMDAsXG4gICAgICAgICAgY2FjaGVIaXRSYXRlOiAwLjc1LFxuICAgICAgICAgIG1lbW9yeVVzYWdlOiAyNTYsXG4gICAgICAgICAgZmlsZXNQcm9jZXNzZWQ6IDEwMCxcbiAgICAgICAgfSxcbiAgICAgICAgcXVhbGl0eVNjb3JlOiA4NSxcbiAgICAgICAgcmVncmVzc2lvbkRldGVjdGVkOiBmYWxzZSxcbiAgICAgIH07XG5cbiAgICAgIC8vIFNob3VsZCBjb21wbGV0ZSBxdWlja2x5IHdoZW4gZGlzYWJsZWRcbiAgICAgIGF3YWl0IGV4cGVjdChkaXNhYmxlZEFsZXJ0aW5nLnByb2Nlc3NBbGVydHMobW9ja0FsZXJ0cywgbW9ja01ldHJpY3MpKS5yZXNvbHZlcy50b0JlVW5kZWZpbmVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdQZXJmb3JtYW5jZSBNb25pdG9yaW5nJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBkZXRlY3QgcGVyZm9ybWFuY2UgdGhyZXNob2xkIHZpb2xhdGlvbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrTWV0cmljczogTGludGluZ01ldHJpY3MgPSB7XG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgdG90YWxJc3N1ZXM6IDAsXG4gICAgICAgIGVycm9yczogMCxcbiAgICAgICAgd2FybmluZ3M6IDAsXG4gICAgICAgIHBhcnNlckVycm9yczogMCxcbiAgICAgICAgZXhwbGljaXRBbnlFcnJvcnM6IDAsXG4gICAgICAgIGltcG9ydE9yZGVySXNzdWVzOiAwLFxuICAgICAgICB1bnVzZWRWYXJpYWJsZXM6IDAsXG4gICAgICAgIHJlYWN0SG9va3NJc3N1ZXM6IDAsXG4gICAgICAgIGNvbnNvbGVTdGF0ZW1lbnRzOiAwLFxuICAgICAgICBkb21haW5TcGVjaWZpY0lzc3Vlczoge1xuICAgICAgICAgIGFzdHJvbG9naWNhbENhbGN1bGF0aW9uczogMCxcbiAgICAgICAgICBjYW1wYWlnblN5c3RlbTogMCxcbiAgICAgICAgICB0ZXN0RmlsZXM6IDAsXG4gICAgICAgIH0sXG4gICAgICAgIHBlcmZvcm1hbmNlTWV0cmljczoge1xuICAgICAgICAgIGxpbnRpbmdEdXJhdGlvbjogMzUwMDAsIC8vIEV4Y2VlZHMgMzBzIHRocmVzaG9sZFxuICAgICAgICAgIGNhY2hlSGl0UmF0ZTogMC4zLCAvLyBCZWxvdyA1MCUgdGhyZXNob2xkXG4gICAgICAgICAgbWVtb3J5VXNhZ2U6IDYwMCwgLy8gRXhjZWVkcyA1MTJNQiB0aHJlc2hvbGRcbiAgICAgICAgICBmaWxlc1Byb2Nlc3NlZDogMTAwLFxuICAgICAgICB9LFxuICAgICAgICBxdWFsaXR5U2NvcmU6IDg1LFxuICAgICAgICByZWdyZXNzaW9uRGV0ZWN0ZWQ6IGZhbHNlLFxuICAgICAgfTtcblxuICAgICAgLy8gU2hvdWxkIHByb2Nlc3MgcGVyZm9ybWFuY2UgbW9uaXRvcmluZ1xuICAgICAgYXdhaXQgZXhwZWN0KGFsZXJ0aW5nLnByb2Nlc3NBbGVydHMoW10sIG1vY2tNZXRyaWNzKSkucmVzb2x2ZXMudG9CZVVuZGVmaW5lZCgpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9