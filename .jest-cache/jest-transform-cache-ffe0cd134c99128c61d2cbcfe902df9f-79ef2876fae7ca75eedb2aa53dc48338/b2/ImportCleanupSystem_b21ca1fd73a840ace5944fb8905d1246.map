{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/ImportCleanupSystem.ts","mappings":";AAAA;;;;GAIG;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,iDAAyC;AACzC,uCAAyB;AAEzB,+CAA4C;AAqC5C,MAAa,mBAAmB;IAI9B,YAAY,MAA2B;QAF/B,mBAAc,GAAgB,IAAI,GAAG,EAAE,CAAC;QAG9C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,cAAc,CAAC,WAAsB;QACzC,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC7B,eAAM,CAAC,IAAI,CAAC,0CAA0C,CAAC,CAAC;QAExD,IAAI;YACF,uBAAuB;YACvB,MAAM,cAAc,GAAG,WAAW,IAAI,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;YACtE,MAAM,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;YAErD,IAAI,WAAW,GAAwB;gBACrC,cAAc,EAAE,EAAE;gBAClB,oBAAoB,EAAE,CAAC;gBACvB,gBAAgB,EAAE,CAAC;gBACnB,oBAAoB,EAAE,CAAC;gBACvB,qBAAqB,EAAE,IAAI;gBAC3B,MAAM,EAAE,EAAE;gBACV,QAAQ,EAAE,EAAE;aACb,CAAC;YAEF,2BAA2B;YAC3B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC5C,MAAM,KAAK,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;gBAC9B,eAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,IAAI,YAAY,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM,SAAS,CAAC,CAAC;gBAExF,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBACnD,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;gBAE/D,6CAA6C;gBAC7C,IAAI,IAAI,CAAC,MAAM,CAAC,uBAAuB;oBACnC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,wBAAwB,KAAK,CAAC,EAAE;oBACxD,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;oBAC9C,IAAI,CAAC,UAAU,EAAE;wBACf,WAAW,CAAC,qBAAqB,GAAG,KAAK,CAAC;wBAC1C,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,uCAAuC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;wBACxE,MAAM;qBACP;iBACF;aACF;YAED,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;YAC7C,eAAM,CAAC,IAAI,CAAC,+BAA+B,aAAa,IAAI,EAAE;gBAC5D,cAAc,EAAE,WAAW,CAAC,cAAc,CAAC,MAAM;gBACjD,oBAAoB,EAAE,WAAW,CAAC,oBAAoB;gBACtD,gBAAgB,EAAE,WAAW,CAAC,gBAAgB;aAC/C,CAAC,CAAC;YAEH,OAAO,WAAW,CAAC;SAEpB;QAAC,OAAO,KAAK,EAAE;YACd,eAAM,CAAC,KAAK,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;YACpD,OAAO;gBACL,cAAc,EAAE,EAAE;gBAClB,oBAAoB,EAAE,CAAC;gBACvB,gBAAgB,EAAE,CAAC;gBACnB,oBAAoB,EAAE,CAAC;gBACvB,qBAAqB,EAAE,KAAK;gBAC5B,MAAM,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC;gBACvB,QAAQ,EAAE,EAAE;aACb,CAAC;SACH;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,mBAAmB,CAAC,SAAoB;QAC5C,MAAM,KAAK,GAAG,SAAS,IAAI,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC3D,MAAM,aAAa,GAAmB,EAAE,CAAC;QAEzC,KAAK,MAAM,QAAQ,IAAI,KAAK,EAAE;YAC5B,IAAI;gBACF,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,yBAAyB,CAAC,QAAQ,CAAC,CAAC;gBACzE,aAAa,CAAC,IAAI,CAAC,GAAG,iBAAiB,CAAC,CAAC;aAC1C;YAAC,OAAO,KAAK,EAAE;gBACd,eAAM,CAAC,IAAI,CAAC,gCAAgC,QAAQ,EAAE,EAAE,KAAK,CAAC,CAAC;aAChE;SACF;QAED,OAAO,aAAa,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,mBAAmB,CAAC,SAAmB;QAC3C,IAAI,YAAY,GAAG,CAAC,CAAC;QAErB,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;YAChC,IAAI;gBACF,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,2BAA2B,CAAC,QAAQ,CAAC,CAAC;gBACjE,YAAY,IAAI,OAAO,CAAC;gBACxB,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;aACnC;YAAC,OAAO,KAAK,EAAE;gBACd,eAAM,CAAC,KAAK,CAAC,wCAAwC,QAAQ,EAAE,EAAE,KAAK,CAAC,CAAC;aACzE;SACF;QAED,OAAO,YAAY,CAAC;IACtB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,eAAe,CAAC,SAAmB;QACvC,IAAI,cAAc,GAAG,CAAC,CAAC;QAEvB,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;YAChC,IAAI;gBACF,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;gBAC7D,IAAI,SAAS,EAAE;oBACb,cAAc,EAAE,CAAC;oBACjB,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;iBACnC;aACF;YAAC,OAAO,KAAK,EAAE;gBACd,eAAM,CAAC,KAAK,CAAC,iCAAiC,QAAQ,EAAE,EAAE,KAAK,CAAC,CAAC;aAClE;SACF;QAED,OAAO,cAAc,CAAC;IACxB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,kBAAkB,CAAC,SAAmB;QAC1C,IAAI,UAAU,GAAG,CAAC,CAAC;QAEnB,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;YAChC,IAAI;gBACF,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC;gBAC5D,IAAI,KAAK,EAAE;oBACT,UAAU,EAAE,CAAC;oBACb,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;iBACnC;aACF;YAAC,OAAO,KAAK,EAAE;gBACd,eAAM,CAAC,KAAK,CAAC,qCAAqC,QAAQ,EAAE,EAAE,KAAK,CAAC,CAAC;aACtE;SACF;QAED,OAAO,UAAU,CAAC;IACpB,CAAC;IAED,iCAAiC;IAEzB,KAAK,CAAC,YAAY,CAAC,SAAmB;QAC5C,MAAM,MAAM,GAAwB;YAClC,cAAc,EAAE,EAAE;YAClB,oBAAoB,EAAE,CAAC;YACvB,gBAAgB,EAAE,CAAC;YACnB,oBAAoB,EAAE,CAAC;YACvB,qBAAqB,EAAE,IAAI;YAC3B,MAAM,EAAE,EAAE;YACV,QAAQ,EAAE,EAAE;SACb,CAAC;QAEF,gCAAgC;QAChC,IAAI;YACF,MAAM,CAAC,oBAAoB,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;SACzE;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,iCAAiC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;SACtE;QAED,2BAA2B;QAC3B,IAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,oBAAoB;YAClD,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,oBAAoB,EAAE;YACtD,IAAI;gBACF,MAAM,CAAC,gBAAgB,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;aACjE;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,+BAA+B,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;aACpE;SACF;QAED,oCAAoC;QACpC,IAAI,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE;YACtC,IAAI;gBACF,MAAM,CAAC,oBAAoB,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;aACxE;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,oCAAoC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;aACzE;SACF;QAED,MAAM,CAAC,cAAc,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QACxD,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,KAAK,CAAC,yBAAyB,CAAC,QAAgB;QACtD,MAAM,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAClD,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAClC,MAAM,aAAa,GAAmB,EAAE,CAAC;QAEzC,0BAA0B;QAC1B,MAAM,WAAW,GAAG,yFAAyF,CAAC;QAC9G,MAAM,eAAe,GAAG,mBAAmB,CAAC;QAE5C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACrC,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YAC7B,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;YAEtC,IAAI,KAAK,EAAE;gBACT,MAAM,YAAY,GAAG,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAChD,MAAM,eAAe,GAAG,IAAI,CAAC;gBAE7B,yBAAyB;gBACzB,IAAI,aAAa,GAAa,EAAE,CAAC;gBACjC,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE;oBACZ,kCAAkC;oBAClC,aAAa,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;iBAC9D;qBAAM,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE;oBACnB,8BAA8B;oBAC9B,aAAa,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;iBAC5B;qBAAM,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE;oBACnB,uBAAuB;oBACvB,aAAa,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;iBAC5B;gBAED,sCAAsC;gBACtC,KAAK,MAAM,UAAU,IAAI,aAAa,EAAE;oBACtC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC,EAAE;wBAC9C,aAAa,CAAC,IAAI,CAAC;4BACjB,QAAQ;4BACR,UAAU;4BACV,UAAU,EAAE,CAAC,GAAG,CAAC;4BACjB,eAAe;4BACf,YAAY;yBACb,CAAC,CAAC;qBACJ;iBACF;aACF;SACF;QAED,OAAO,aAAa,CAAC;IACvB,CAAC;IAEO,YAAY,CAAC,OAAe,EAAE,UAAkB,EAAE,eAAuB;QAC/E,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAElC,4CAA4C;QAC5C,MAAM,oBAAoB,GAAG,KAAK;aAC/B,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,CAAC,KAAK,KAAK,eAAe,CAAC;aAC/C,IAAI,CAAC,IAAI,CAAC,CAAC;QAEd,2BAA2B;QAC3B,MAAM,aAAa,GAAG;YACpB,IAAI,MAAM,CAAC,MAAM,UAAU,KAAK,EAAE,GAAG,CAAC;YACtC,IAAI,MAAM,CAAC,MAAM,UAAU,KAAK,EAAE,GAAG,CAAC;YACtC,IAAI,MAAM,CAAC,MAAM,UAAU,KAAK,EAAE,GAAG,CAAC;YACtC,IAAI,MAAM,CAAC,IAAI,UAAU,KAAK,EAAE,GAAG,CAAC;YACpC,IAAI,MAAM,CAAC,cAAc,UAAU,KAAK,EAAE,GAAG,CAAC;YAC9C,IAAI,MAAM,CAAC,iBAAiB,UAAU,KAAK,EAAE,GAAG,CAAC;YACjD,IAAI,MAAM,CAAC,QAAQ,UAAU,KAAK,EAAE,GAAG,CAAC,EAAE,kBAAkB;SAC7D,CAAC;QAEF,OAAO,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;IAC3E,CAAC;IAEO,KAAK,CAAC,2BAA2B,CAAC,QAAgB;QACxD,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,yBAAyB,CAAC,QAAQ,CAAC,CAAC;QACrE,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;YAC9B,OAAO,CAAC,CAAC;SACV;QAED,MAAM,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAClD,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAClC,IAAI,YAAY,GAAG,CAAC,CAAC;QAErB,+BAA+B;QAC/B,MAAM,YAAY,GAAG,IAAI,GAAG,EAA0B,CAAC;QACvD,KAAK,MAAM,MAAM,IAAI,aAAa,EAAE;YAClC,MAAM,SAAS,GAAG,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC;YACxC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;gBAChC,YAAY,CAAC,GAAG,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;aACjC;YACD,YAAY,CAAC,GAAG,CAAC,SAAS,CAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SAC3C;QAED,0DAA0D;QAC1D,MAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAE1E,KAAK,MAAM,SAAS,IAAI,WAAW,EAAE;YACnC,MAAM,UAAU,GAAG,YAAY,CAAC,GAAG,CAAC,SAAS,CAAE,CAAC;YAChD,MAAM,YAAY,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC;YAEtC,iEAAiE;YACjE,MAAM,gBAAgB,GAAG,IAAI,CAAC,yBAAyB,CAAC,YAAY,CAAC,CAAC;YACtE,MAAM,SAAS,GAAG,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAC7C,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,UAAU,KAAK,GAAG,CAAC,CACrD,CAAC;YAEF,IAAI,SAAS,EAAE;gBACb,KAAK,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;gBAC3B,YAAY,IAAI,UAAU,CAAC,MAAM,CAAC;aACnC;iBAAM;gBACL,oDAAoD;gBACpD,IAAI,YAAY,GAAG,YAAY,CAAC;gBAChC,KAAK,MAAM,MAAM,IAAI,UAAU,EAAE;oBAC/B,YAAY,GAAG,IAAI,CAAC,oBAAoB,CAAC,YAAY,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;oBAC1E,YAAY,EAAE,CAAC;iBAChB;gBACD,KAAK,CAAC,SAAS,CAAC,GAAG,YAAY,CAAC;aACjC;SACF;QAED,kCAAkC;QAClC,EAAE,CAAC,aAAa,CAAC,QAAQ,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,CAAC;QACrD,OAAO,YAAY,CAAC;IACtB,CAAC;IAEO,yBAAyB,CAAC,IAAY;QAC5C,MAAM,WAAW,GAAG,oEAAoE,CAAC;QACzF,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QAEtC,IAAI,CAAC,KAAK;YAAE,OAAO,EAAE,CAAC;QAEtB,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE;YACZ,gBAAgB;YAChB,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;SACrD;aAAM,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE;YACnB,mBAAmB;YACnB,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;SACnB;aAAM,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE;YACnB,iBAAiB;YACjB,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;SACnB;QAED,OAAO,EAAE,CAAC;IACZ,CAAC;IAEO,oBAAoB,CAAC,IAAY,EAAE,UAAkB;QAC3D,mCAAmC;QACnC,MAAM,QAAQ,GAAG;YACf,yEAAyE;YACzE;gBACE,KAAK,EAAE,IAAI,MAAM,CAAC,iBAAiB,UAAU,kBAAkB,EAAE,GAAG,CAAC;gBACrE,WAAW,EAAE,CAAC,KAAa,EAAE,MAAc,EAAE,KAAa,EAAE,EAAE;oBAC5D,MAAM,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;oBACvD,MAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;oBACrD,MAAM,QAAQ,GAAG,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACtE,OAAO,IAAI,QAAQ,GAAG,CAAC;gBACzB,CAAC;aACF;SACF,CAAC;QAEF,IAAI,YAAY,GAAG,IAAI,CAAC;QACxB,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;YAC9B,YAAY,GAAG,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,WAAkB,CAAC,CAAC;SAChF;QAED,OAAO,YAAY,CAAC;IACtB,CAAC;IAEO,KAAK,CAAC,qBAAqB,CAAC,QAAgB;QAClD,MAAM,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAClD,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAElC,sBAAsB;QACtB,MAAM,WAAW,GAA4E,EAAE,CAAC;QAChG,MAAM,WAAW,GAAG,YAAY,CAAC;QACjC,MAAM,eAAe,GAAG,mBAAmB,CAAC;QAC5C,MAAM,mBAAmB,GAAG,sBAAsB,CAAC;QAEnD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACrC,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YAC7B,IAAI,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBAC1B,WAAW,CAAC,IAAI,CAAC;oBACf,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;oBACd,KAAK,EAAE,CAAC;oBACR,UAAU,EAAE,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC;oBAC1C,MAAM,EAAE,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC;iBACnC,CAAC,CAAC;aACJ;iBAAM,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;gBACnE,6CAA6C;gBAC7C,MAAM;aACP;SACF;QAED,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;YAC5B,OAAO,KAAK,CAAC;SACd;QAED,sCAAsC;QACtC,MAAM,gBAAgB,GAAG,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC;QAE/D,yCAAyC;QACzC,MAAM,qBAAqB,GAAG,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1E,MAAM,sBAAsB,GAAG,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE3D,IAAI,qBAAqB,KAAK,sBAAsB,EAAE;YACpD,OAAO,KAAK,CAAC;SACd;QAED,yBAAyB;QACzB,MAAM,gBAAgB,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;QAC9C,MAAM,eAAe,GAAG,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC;QAElE,MAAM,QAAQ,GAAG;YACf,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,gBAAgB,CAAC;YACnC,GAAG,gBAAgB;YACnB,GAAG,KAAK,CAAC,KAAK,CAAC,eAAe,GAAG,CAAC,CAAC;SACpC,CAAC;QAEF,EAAE,CAAC,aAAa,CAAC,QAAQ,EAAE,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,CAAC;QACxD,OAAO,IAAI,CAAC;IACd,CAAC;IAEO,mBAAmB,CAAC,WAAqE;QAC/F,MAAM,EAAE,iBAAiB,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1C,MAAM,SAAS,GAAa,EAAE,CAAC;QAE/B,2BAA2B;QAC3B,MAAM,eAAe,GAAG,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAClE,MAAM,eAAe,GAAG,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAEnE,gBAAgB;QAChB,MAAM,WAAW,GAAG,CAAC,OAA2B,EAAE,EAAE;YAClD,IAAI,iBAAiB,CAAC,kBAAkB,EAAE;gBACxC,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;aAC7D;YACD,OAAO,OAAO,CAAC;QACjB,CAAC,CAAC;QAEF,sCAAsC;QACtC,IAAI,iBAAiB,CAAC,mBAAmB,EAAE;YACzC,MAAM,mBAAmB,GAAG,WAAW,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;YACnF,MAAM,oBAAoB,GAAG,WAAW,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;YACrF,MAAM,mBAAmB,GAAG,WAAW,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;YACnF,MAAM,oBAAoB,GAAG,WAAW,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;YAErF,uBAAuB;YACvB,IAAI,iBAAiB,CAAC,oBAAoB,EAAE;gBAC1C,SAAS,CAAC,IAAI,CAAC,GAAG,mBAAmB,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC5D,IAAI,mBAAmB,CAAC,MAAM,GAAG,CAAC,IAAI,oBAAoB,CAAC,MAAM,GAAG,CAAC,EAAE;oBACrE,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,4CAA4C;iBACjE;gBACD,SAAS,CAAC,IAAI,CAAC,GAAG,oBAAoB,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;gBAE7D,IAAI,CAAC,mBAAmB,CAAC,MAAM,GAAG,CAAC,IAAI,oBAAoB,CAAC,MAAM,GAAG,CAAC,CAAC;oBACnE,CAAC,mBAAmB,CAAC,MAAM,GAAG,CAAC,IAAI,oBAAoB,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE;oBACvE,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,2CAA2C;iBAChE;aACF;YAED,uBAAuB;YACvB,IAAI,iBAAiB,CAAC,oBAAoB,EAAE;gBAC1C,SAAS,CAAC,IAAI,CAAC,GAAG,mBAAmB,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC5D,IAAI,mBAAmB,CAAC,MAAM,GAAG,CAAC,IAAI,oBAAoB,CAAC,MAAM,GAAG,CAAC,EAAE;oBACrE,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,4CAA4C;iBACjE;gBACD,SAAS,CAAC,IAAI,CAAC,GAAG,oBAAoB,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;aAC9D;SACF;aAAM;YACL,8BAA8B;YAC9B,IAAI,iBAAiB,CAAC,oBAAoB,EAAE;gBAC1C,SAAS,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;gBACrE,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;oBAC5D,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,2CAA2C;iBAChE;aACF;YAED,IAAI,iBAAiB,CAAC,oBAAoB,EAAE;gBAC1C,SAAS,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;aACtE;SACF;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;IAEO,KAAK,CAAC,wBAAwB,CAAC,QAAgB;QACrD,MAAM,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAClD,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAClC,IAAI,QAAQ,GAAG,KAAK,CAAC;QAErB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACrC,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,IAAI,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE;gBAClC,MAAM,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;gBAC/C,IAAI,UAAU,KAAK,IAAI,EAAE;oBACvB,KAAK,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC;oBACtB,QAAQ,GAAG,IAAI,CAAC;iBACjB;aACF;SACF;QAED,IAAI,QAAQ,EAAE;YACZ,EAAE,CAAC,aAAa,CAAC,QAAQ,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,CAAC;SACtD;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAEO,gBAAgB,CAAC,IAAY;QACnC,MAAM,EAAE,iBAAiB,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1C,IAAI,UAAU,GAAG,IAAI,CAAC;QAEtB,gDAAgD;QAChD,IAAI,iBAAiB,CAAC,qBAAqB,EAAE;YAC3C,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,wBAAwB,EAAE,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE;gBAC3E,IAAI,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;oBACzB,OAAO,KAAK,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC;iBACjC;gBACD,OAAO,KAAK,CAAC;YACf,CAAC,CAAC,CAAC;SACJ;QAED,6BAA6B;QAC7B,IAAI,iBAAiB,CAAC,aAAa,IAAI,UAAU,CAAC,MAAM,GAAG,iBAAiB,CAAC,aAAa,EAAE;YAC1F,0BAA0B;YAC1B,MAAM,WAAW,GAAG,UAAU,CAAC,KAAK,CAAC,uDAAuD,CAAC,CAAC;YAC9F,IAAI,WAAW,EAAE;gBACf,MAAM,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC,GAAG,WAAW,CAAC;gBAChD,MAAM,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;gBAE7D,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;oBACzB,MAAM,gBAAgB,GAAG,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACvE,UAAU,GAAG,GAAG,MAAM,KAAK,gBAAgB,KAAK,MAAM,EAAE,CAAC;iBAC1D;aACF;SACF;QAED,OAAO,UAAU,CAAC;IACpB,CAAC;IAEO,KAAK,CAAC,kBAAkB;QAC9B,IAAI;YACF,MAAM,MAAM,GAAG,IAAA,wBAAQ,EACrB,8FAA8F,EAC9F,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,CACpC,CAAC;YACF,OAAO,MAAM,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;SAClD;QAAC,OAAO,KAAK,EAAE;YACd,eAAM,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;YACtD,OAAO,EAAE,CAAC;SACX;IACH,CAAC;IAEO,UAAU,CAAC,KAAe;QAChC,MAAM,OAAO,GAAe,EAAE,CAAC;QAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE;YACnE,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC;SAChE;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IAEO,KAAK,CAAC,aAAa;QACzB,IAAI;YACF,IAAA,wBAAQ,EAAC,kCAAkC,EAAE;gBAC3C,QAAQ,EAAE,MAAM;gBAChB,KAAK,EAAE,MAAM;gBACb,OAAO,EAAE,KAAK;aACf,CAAC,CAAC;YACH,OAAO,IAAI,CAAC;SACb;QAAC,OAAO,KAAK,EAAE;YACd,eAAM,CAAC,IAAI,CAAC,+CAA+C,EAAE,KAAK,CAAC,CAAC;YACpE,OAAO,KAAK,CAAC;SACd;IACH,CAAC;IAEO,iBAAiB,CAAC,KAA0B,EAAE,KAA0B;QAC9E,OAAO;YACL,cAAc,EAAE,CAAC,GAAG,KAAK,CAAC,cAAc,EAAE,GAAG,KAAK,CAAC,cAAc,CAAC;YAClE,oBAAoB,EAAE,KAAK,CAAC,oBAAoB,GAAG,KAAK,CAAC,oBAAoB;YAC7E,gBAAgB,EAAE,KAAK,CAAC,gBAAgB,GAAG,KAAK,CAAC,gBAAgB;YACjE,oBAAoB,EAAE,KAAK,CAAC,oBAAoB,GAAG,KAAK,CAAC,oBAAoB;YAC7E,qBAAqB,EAAE,KAAK,CAAC,qBAAqB,IAAI,KAAK,CAAC,qBAAqB;YACjF,MAAM,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC;YAC1C,QAAQ,EAAE,CAAC,GAAG,KAAK,CAAC,QAAQ,EAAE,GAAG,KAAK,CAAC,QAAQ,CAAC;SACjD,CAAC;IACJ,CAAC;CACF;AAlkBD,kDAkkBC;AAED;;GAEG;AACU,QAAA,6BAA6B,GAAwB;IAChE,gBAAgB,EAAE,EAAE;IACpB,uBAAuB,EAAE,IAAI;IAC7B,wBAAwB,EAAE,CAAC;IAC3B,sBAAsB,EAAE,IAAI;IAC5B,iBAAiB,EAAE;QACjB,oBAAoB,EAAE,IAAI;QAC1B,oBAAoB,EAAE,IAAI;QAC1B,kBAAkB,EAAE,IAAI;QACxB,mBAAmB,EAAE,IAAI;QACzB,qBAAqB,EAAE,IAAI;QAC3B,aAAa,EAAE,GAAG;KACnB;CACF,CAAC","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/ImportCleanupSystem.ts"],"sourcesContent":["/**\n * Import Cleanup System\n * Automated import detection, removal, and organization system\n * Part of the Kiro Optimization Campaign System\n */\n\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { logger } from '../../utils/logger';\n\nexport interface ImportCleanupConfig {\n  maxFilesPerBatch: number;\n  safetyValidationEnabled: boolean;\n  buildValidationFrequency: number;\n  importStyleEnforcement: boolean;\n  organizationRules: ImportOrganizationRules;\n}\n\nexport interface ImportOrganizationRules {\n  groupExternalImports: boolean;\n  groupInternalImports: boolean;\n  sortAlphabetically: boolean;\n  separateTypeImports: boolean;\n  enforceTrailingCommas: boolean;\n  maxLineLength: number;\n}\n\nexport interface ImportCleanupResult {\n  filesProcessed: string[];\n  unusedImportsRemoved: number;\n  importsOrganized: number;\n  styleViolationsFixed: number;\n  buildValidationPassed: boolean;\n  errors: string[];\n  warnings: string[];\n}\n\nexport interface UnusedImport {\n  filePath: string;\n  importName: string;\n  importLine: number;\n  importStatement: string;\n  isTypeImport: boolean;\n}\n\nexport class ImportCleanupSystem {\n  private config: ImportCleanupConfig;\n  private processedFiles: Set<string> = new Set();\n\n  constructor(config: ImportCleanupConfig) {\n    this.config = config;\n  }\n\n  /**\n   * Execute comprehensive import cleanup\n   */\n  async executeCleanup(targetFiles?: string[]): Promise<ImportCleanupResult> {\n    const startTime = Date.now();\n    logger.info('Starting import cleanup system execution');\n\n    try {\n      // Get files to process\n      const filesToProcess = targetFiles || await this.getTypeScriptFiles();\n      const batchedFiles = this.batchFiles(filesToProcess);\n\n      let totalResult: ImportCleanupResult = {\n        filesProcessed: [],\n        unusedImportsRemoved: 0,\n        importsOrganized: 0,\n        styleViolationsFixed: 0,\n        buildValidationPassed: true,\n        errors: [],\n        warnings: []\n      };\n\n      // Process files in batches\n      for (let i = 0; i < batchedFiles.length; i++) {\n        const batch = batchedFiles[i];\n        logger.info(`Processing batch ${i + 1}/${batchedFiles.length} (${batch.length} files)`);\n\n        const batchResult = await this.processBatch(batch);\n        totalResult = this.mergeBatchResults(totalResult, batchResult);\n\n        // Validate build after each batch if enabled\n        if (this.config.safetyValidationEnabled && \n            (i + 1) % this.config.buildValidationFrequency === 0) {\n          const buildValid = await this.validateBuild();\n          if (!buildValid) {\n            totalResult.buildValidationPassed = false;\n            totalResult.errors.push(`Build validation failed after batch ${i + 1}`);\n            break;\n          }\n        }\n      }\n\n      const executionTime = Date.now() - startTime;\n      logger.info(`Import cleanup completed in ${executionTime}ms`, {\n        filesProcessed: totalResult.filesProcessed.length,\n        unusedImportsRemoved: totalResult.unusedImportsRemoved,\n        importsOrganized: totalResult.importsOrganized\n      });\n\n      return totalResult;\n\n    } catch (error) {\n      logger.error('Import cleanup system failed', error);\n      return {\n        filesProcessed: [],\n        unusedImportsRemoved: 0,\n        importsOrganized: 0,\n        styleViolationsFixed: 0,\n        buildValidationPassed: false,\n        errors: [error.message],\n        warnings: []\n      };\n    }\n  }\n\n  /**\n   * Detect unused imports across the codebase\n   */\n  async detectUnusedImports(filePaths?: string[]): Promise<UnusedImport[]> {\n    const files = filePaths || await this.getTypeScriptFiles();\n    const unusedImports: UnusedImport[] = [];\n\n    for (const filePath of files) {\n      try {\n        const fileUnusedImports = await this.detectUnusedImportsInFile(filePath);\n        unusedImports.push(...fileUnusedImports);\n      } catch (error) {\n        logger.warn(`Failed to analyze imports in ${filePath}`, error);\n      }\n    }\n\n    return unusedImports;\n  }\n\n  /**\n   * Remove unused imports from files\n   */\n  async removeUnusedImports(filePaths: string[]): Promise<number> {\n    let removedCount = 0;\n\n    for (const filePath of filePaths) {\n      try {\n        const removed = await this.removeUnusedImportsFromFile(filePath);\n        removedCount += removed;\n        this.processedFiles.add(filePath);\n      } catch (error) {\n        logger.error(`Failed to remove unused imports from ${filePath}`, error);\n      }\n    }\n\n    return removedCount;\n  }\n\n  /**\n   * Organize imports according to style rules\n   */\n  async organizeImports(filePaths: string[]): Promise<number> {\n    let organizedCount = 0;\n\n    for (const filePath of filePaths) {\n      try {\n        const organized = await this.organizeImportsInFile(filePath);\n        if (organized) {\n          organizedCount++;\n          this.processedFiles.add(filePath);\n        }\n      } catch (error) {\n        logger.error(`Failed to organize imports in ${filePath}`, error);\n      }\n    }\n\n    return organizedCount;\n  }\n\n  /**\n   * Enforce import style consistency\n   */\n  async enforceImportStyle(filePaths: string[]): Promise<number> {\n    let fixedCount = 0;\n\n    for (const filePath of filePaths) {\n      try {\n        const fixed = await this.enforceImportStyleInFile(filePath);\n        if (fixed) {\n          fixedCount++;\n          this.processedFiles.add(filePath);\n        }\n      } catch (error) {\n        logger.error(`Failed to enforce import style in ${filePath}`, error);\n      }\n    }\n\n    return fixedCount;\n  }\n\n  // Private implementation methods\n\n  private async processBatch(filePaths: string[]): Promise<ImportCleanupResult> {\n    const result: ImportCleanupResult = {\n      filesProcessed: [],\n      unusedImportsRemoved: 0,\n      importsOrganized: 0,\n      styleViolationsFixed: 0,\n      buildValidationPassed: true,\n      errors: [],\n      warnings: []\n    };\n\n    // Step 1: Remove unused imports\n    try {\n      result.unusedImportsRemoved = await this.removeUnusedImports(filePaths);\n    } catch (error) {\n      result.errors.push(`Unused import removal failed: ${error.message}`);\n    }\n\n    // Step 2: Organize imports\n    if (this.config.organizationRules.groupExternalImports || \n        this.config.organizationRules.groupInternalImports) {\n      try {\n        result.importsOrganized = await this.organizeImports(filePaths);\n      } catch (error) {\n        result.errors.push(`Import organization failed: ${error.message}`);\n      }\n    }\n\n    // Step 3: Enforce style consistency\n    if (this.config.importStyleEnforcement) {\n      try {\n        result.styleViolationsFixed = await this.enforceImportStyle(filePaths);\n      } catch (error) {\n        result.errors.push(`Import style enforcement failed: ${error.message}`);\n      }\n    }\n\n    result.filesProcessed = Array.from(this.processedFiles);\n    return result;\n  }\n\n  private async detectUnusedImportsInFile(filePath: string): Promise<UnusedImport[]> {\n    const content = fs.readFileSync(filePath, 'utf8');\n    const lines = content.split('\\n');\n    const unusedImports: UnusedImport[] = [];\n\n    // Parse import statements\n    const importRegex = /^import\\s+(?:type\\s+)?(?:\\{([^}]+)\\}|\\*\\s+as\\s+(\\w+)|(\\w+))\\s+from\\s+['\"]([^'\"]+)['\"];?/;\n    const typeImportRegex = /^import\\s+type\\s+/;\n\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i].trim();\n      const match = line.match(importRegex);\n      \n      if (match) {\n        const isTypeImport = typeImportRegex.test(line);\n        const importStatement = line;\n        \n        // Extract imported names\n        let importedNames: string[] = [];\n        if (match[1]) {\n          // Named imports: { name1, name2 }\n          importedNames = match[1].split(',').map(name => name.trim());\n        } else if (match[2]) {\n          // Namespace import: * as name\n          importedNames = [match[2]];\n        } else if (match[3]) {\n          // Default import: name\n          importedNames = [match[3]];\n        }\n\n        // Check if each imported name is used\n        for (const importName of importedNames) {\n          if (!this.isImportUsed(content, importName, i)) {\n            unusedImports.push({\n              filePath,\n              importName,\n              importLine: i + 1,\n              importStatement,\n              isTypeImport\n            });\n          }\n        }\n      }\n    }\n\n    return unusedImports;\n  }\n\n  private isImportUsed(content: string, importName: string, importLineIndex: number): boolean {\n    const lines = content.split('\\n');\n    \n    // Remove the import line from consideration\n    const contentWithoutImport = lines\n      .filter((_, index) => index !== importLineIndex)\n      .join('\\n');\n\n    // Check for usage patterns\n    const usagePatterns = [\n      new RegExp(`\\\\b${importName}\\\\b`, 'g'), // Direct usage\n      new RegExp(`\\\\b${importName}\\\\.`, 'g'), // Property access\n      new RegExp(`\\\\b${importName}\\\\(`, 'g'), // Function call\n      new RegExp(`<${importName}\\\\b`, 'g'), // JSX component\n      new RegExp(`extends\\\\s+${importName}\\\\b`, 'g'), // Class extension\n      new RegExp(`implements\\\\s+${importName}\\\\b`, 'g'), // Interface implementation\n      new RegExp(`:\\\\s*${importName}\\\\b`, 'g'), // Type annotation\n    ];\n\n    return usagePatterns.some(pattern => pattern.test(contentWithoutImport));\n  }\n\n  private async removeUnusedImportsFromFile(filePath: string): Promise<number> {\n    const unusedImports = await this.detectUnusedImportsInFile(filePath);\n    if (unusedImports.length === 0) {\n      return 0;\n    }\n\n    const content = fs.readFileSync(filePath, 'utf8');\n    const lines = content.split('\\n');\n    let removedCount = 0;\n\n    // Group unused imports by line\n    const unusedByLine = new Map<number, UnusedImport[]>();\n    for (const unused of unusedImports) {\n      const lineIndex = unused.importLine - 1;\n      if (!unusedByLine.has(lineIndex)) {\n        unusedByLine.set(lineIndex, []);\n      }\n      unusedByLine.get(lineIndex)!.push(unused);\n    }\n\n    // Process lines in reverse order to maintain line numbers\n    const sortedLines = Array.from(unusedByLine.keys()).sort((a, b) => b - a);\n    \n    for (const lineIndex of sortedLines) {\n      const lineUnused = unusedByLine.get(lineIndex)!;\n      const originalLine = lines[lineIndex];\n      \n      // If all imports on this line are unused, remove the entire line\n      const allImportsOnLine = this.extractAllImportsFromLine(originalLine);\n      const allUnused = allImportsOnLine.every(imp => \n        lineUnused.some(unused => unused.importName === imp)\n      );\n\n      if (allUnused) {\n        lines.splice(lineIndex, 1);\n        removedCount += lineUnused.length;\n      } else {\n        // Remove only specific unused imports from the line\n        let modifiedLine = originalLine;\n        for (const unused of lineUnused) {\n          modifiedLine = this.removeImportFromLine(modifiedLine, unused.importName);\n          removedCount++;\n        }\n        lines[lineIndex] = modifiedLine;\n      }\n    }\n\n    // Write the modified content back\n    fs.writeFileSync(filePath, lines.join('\\n'), 'utf8');\n    return removedCount;\n  }\n\n  private extractAllImportsFromLine(line: string): string[] {\n    const importRegex = /^import\\s+(?:type\\s+)?(?:\\{([^}]+)\\}|\\*\\s+as\\s+(\\w+)|(\\w+))\\s+from/;\n    const match = line.match(importRegex);\n    \n    if (!match) return [];\n    \n    if (match[1]) {\n      // Named imports\n      return match[1].split(',').map(name => name.trim());\n    } else if (match[2]) {\n      // Namespace import\n      return [match[2]];\n    } else if (match[3]) {\n      // Default import\n      return [match[3]];\n    }\n    \n    return [];\n  }\n\n  private removeImportFromLine(line: string, importName: string): string {\n    // Handle different import patterns\n    const patterns = [\n      // Remove from named imports: { name1, name2, name3 } -> { name1, name3 }\n      {\n        regex: new RegExp(`\\\\{([^}]*?)\\\\b${importName}\\\\b,?([^}]*?)\\\\}`, 'g'),\n        replacement: (match: string, before: string, after: string) => {\n          const cleanBefore = before.replace(/,\\s*$/, '').trim();\n          const cleanAfter = after.replace(/^\\s*,/, '').trim();\n          const combined = [cleanBefore, cleanAfter].filter(Boolean).join(', ');\n          return `{${combined}}`;\n        }\n      }\n    ];\n\n    let modifiedLine = line;\n    for (const pattern of patterns) {\n      modifiedLine = modifiedLine.replace(pattern.regex, pattern.replacement as any);\n    }\n\n    return modifiedLine;\n  }\n\n  private async organizeImportsInFile(filePath: string): Promise<boolean> {\n    const content = fs.readFileSync(filePath, 'utf8');\n    const lines = content.split('\\n');\n    \n    // Find import section\n    const importLines: { line: string; index: number; isExternal: boolean; isType: boolean }[] = [];\n    const importRegex = /^import\\s+/;\n    const typeImportRegex = /^import\\s+type\\s+/;\n    const externalImportRegex = /from\\s+['\"](?![@./])/;\n\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i].trim();\n      if (importRegex.test(line)) {\n        importLines.push({\n          line: lines[i],\n          index: i,\n          isExternal: externalImportRegex.test(line),\n          isType: typeImportRegex.test(line)\n        });\n      } else if (line && !line.startsWith('//') && !line.startsWith('/*')) {\n        // Stop at first non-import, non-comment line\n        break;\n      }\n    }\n\n    if (importLines.length === 0) {\n      return false;\n    }\n\n    // Organize imports according to rules\n    const organizedImports = this.organizeImportLines(importLines);\n    \n    // Check if organization changed anything\n    const originalImportSection = importLines.map(imp => imp.line).join('\\n');\n    const organizedImportSection = organizedImports.join('\\n');\n    \n    if (originalImportSection === organizedImportSection) {\n      return false;\n    }\n\n    // Replace import section\n    const firstImportIndex = importLines[0].index;\n    const lastImportIndex = importLines[importLines.length - 1].index;\n    \n    const newLines = [\n      ...lines.slice(0, firstImportIndex),\n      ...organizedImports,\n      ...lines.slice(lastImportIndex + 1)\n    ];\n\n    fs.writeFileSync(filePath, newLines.join('\\n'), 'utf8');\n    return true;\n  }\n\n  private organizeImportLines(importLines: { line: string; isExternal: boolean; isType: boolean }[]): string[] {\n    const { organizationRules } = this.config;\n    const organized: string[] = [];\n\n    // Separate imports by type\n    const externalImports = importLines.filter(imp => imp.isExternal);\n    const internalImports = importLines.filter(imp => !imp.isExternal);\n\n    // Sort function\n    const sortImports = (imports: typeof importLines) => {\n      if (organizationRules.sortAlphabetically) {\n        return imports.sort((a, b) => a.line.localeCompare(b.line));\n      }\n      return imports;\n    };\n\n    // Separate type imports if configured\n    if (organizationRules.separateTypeImports) {\n      const externalTypeImports = sortImports(externalImports.filter(imp => imp.isType));\n      const externalValueImports = sortImports(externalImports.filter(imp => !imp.isType));\n      const internalTypeImports = sortImports(internalImports.filter(imp => imp.isType));\n      const internalValueImports = sortImports(internalImports.filter(imp => !imp.isType));\n\n      // Add external imports\n      if (organizationRules.groupExternalImports) {\n        organized.push(...externalTypeImports.map(imp => imp.line));\n        if (externalTypeImports.length > 0 && externalValueImports.length > 0) {\n          organized.push(''); // Empty line between type and value imports\n        }\n        organized.push(...externalValueImports.map(imp => imp.line));\n        \n        if ((externalTypeImports.length > 0 || externalValueImports.length > 0) && \n            (internalTypeImports.length > 0 || internalValueImports.length > 0)) {\n          organized.push(''); // Empty line between external and internal\n        }\n      }\n\n      // Add internal imports\n      if (organizationRules.groupInternalImports) {\n        organized.push(...internalTypeImports.map(imp => imp.line));\n        if (internalTypeImports.length > 0 && internalValueImports.length > 0) {\n          organized.push(''); // Empty line between type and value imports\n        }\n        organized.push(...internalValueImports.map(imp => imp.line));\n      }\n    } else {\n      // Don't separate type imports\n      if (organizationRules.groupExternalImports) {\n        organized.push(...sortImports(externalImports).map(imp => imp.line));\n        if (externalImports.length > 0 && internalImports.length > 0) {\n          organized.push(''); // Empty line between external and internal\n        }\n      }\n\n      if (organizationRules.groupInternalImports) {\n        organized.push(...sortImports(internalImports).map(imp => imp.line));\n      }\n    }\n\n    return organized;\n  }\n\n  private async enforceImportStyleInFile(filePath: string): Promise<boolean> {\n    const content = fs.readFileSync(filePath, 'utf8');\n    const lines = content.split('\\n');\n    let modified = false;\n\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i];\n      if (/^import\\s+/.test(line.trim())) {\n        const styledLine = this.applyImportStyle(line);\n        if (styledLine !== line) {\n          lines[i] = styledLine;\n          modified = true;\n        }\n      }\n    }\n\n    if (modified) {\n      fs.writeFileSync(filePath, lines.join('\\n'), 'utf8');\n    }\n\n    return modified;\n  }\n\n  private applyImportStyle(line: string): string {\n    const { organizationRules } = this.config;\n    let styledLine = line;\n\n    // Enforce trailing commas in multi-line imports\n    if (organizationRules.enforceTrailingCommas) {\n      styledLine = styledLine.replace(/\\{\\s*([^}]+[^,])\\s*\\}/g, (match, imports) => {\n        if (imports.includes(',')) {\n          return `{ ${imports.trim()}, }`;\n        }\n        return match;\n      });\n    }\n\n    // Enforce line length limits\n    if (organizationRules.maxLineLength && styledLine.length > organizationRules.maxLineLength) {\n      // Break long import lines\n      const importMatch = styledLine.match(/^(\\s*import\\s+(?:type\\s+)?\\{)([^}]+)(\\}\\s+from\\s+.+)$/);\n      if (importMatch) {\n        const [, prefix, imports, suffix] = importMatch;\n        const importList = imports.split(',').map(imp => imp.trim());\n        \n        if (importList.length > 1) {\n          const formattedImports = importList.map(imp => `  ${imp}`).join(',\\n');\n          styledLine = `${prefix}\\n${formattedImports}\\n${suffix}`;\n        }\n      }\n    }\n\n    return styledLine;\n  }\n\n  private async getTypeScriptFiles(): Promise<string[]> {\n    try {\n      const output = execSync(\n        'find src -name \"*.ts\" -o -name \"*.tsx\" | grep -v __tests__ | grep -v .test. | grep -v .spec.',\n        { encoding: 'utf8', stdio: 'pipe' }\n      );\n      return output.trim().split('\\n').filter(Boolean);\n    } catch (error) {\n      logger.error('Failed to get TypeScript files', error);\n      return [];\n    }\n  }\n\n  private batchFiles(files: string[]): string[][] {\n    const batches: string[][] = [];\n    for (let i = 0; i < files.length; i += this.config.maxFilesPerBatch) {\n      batches.push(files.slice(i, i + this.config.maxFilesPerBatch));\n    }\n    return batches;\n  }\n\n  private async validateBuild(): Promise<boolean> {\n    try {\n      execSync('yarn tsc --noEmit --skipLibCheck', { \n        encoding: 'utf8', \n        stdio: 'pipe',\n        timeout: 30000 \n      });\n      return true;\n    } catch (error) {\n      logger.warn('Build validation failed during import cleanup', error);\n      return false;\n    }\n  }\n\n  private mergeBatchResults(total: ImportCleanupResult, batch: ImportCleanupResult): ImportCleanupResult {\n    return {\n      filesProcessed: [...total.filesProcessed, ...batch.filesProcessed],\n      unusedImportsRemoved: total.unusedImportsRemoved + batch.unusedImportsRemoved,\n      importsOrganized: total.importsOrganized + batch.importsOrganized,\n      styleViolationsFixed: total.styleViolationsFixed + batch.styleViolationsFixed,\n      buildValidationPassed: total.buildValidationPassed && batch.buildValidationPassed,\n      errors: [...total.errors, ...batch.errors],\n      warnings: [...total.warnings, ...batch.warnings]\n    };\n  }\n}\n\n/**\n * Default configuration for import cleanup\n */\nexport const DEFAULT_IMPORT_CLEANUP_CONFIG: ImportCleanupConfig = {\n  maxFilesPerBatch: 20,\n  safetyValidationEnabled: true,\n  buildValidationFrequency: 5,\n  importStyleEnforcement: true,\n  organizationRules: {\n    groupExternalImports: true,\n    groupInternalImports: true,\n    sortAlphabetically: true,\n    separateTypeImports: true,\n    enforceTrailingCommas: true,\n    maxLineLength: 100\n  }\n};"],"version":3}