f811747f8c855766b26cc6a0ffdb1c37
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnalysisTools = void 0;
const child_process_1 = require("child_process");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const AnyTypeClassifier_1 = require("./AnyTypeClassifier");
const DomainContextAnalyzer_1 = require("./DomainContextAnalyzer");
const types_1 = require("./types");
/**
 * Comprehensive analysis tools for unintentional any type elimination
 * Provides domain distribution analysis, classification accuracy reporting,
 * success rate analysis, and manual review recommendations
 */
class AnalysisTools {
    classifier;
    domainAnalyzer;
    analysisHistory = [];
    constructor() {
        this.classifier = new AnyTypeClassifier_1.AnyTypeClassifier();
        this.domainAnalyzer = new DomainContextAnalyzer_1.DomainContextAnalyzer();
        this.loadAnalysisHistory();
    }
    /**
     * Analyze current any type distribution by domain
     */
    async analyzeDomainDistribution() {
        console.log('Analyzing any type distribution by domain...');
        const anyTypeOccurrences = await this.findAllAnyTypes();
        const domainDistribution = {
            [types_1.CodeDomain.ASTROLOGICAL]: 0,
            [types_1.CodeDomain.RECIPE]: 0,
            [types_1.CodeDomain.CAMPAIGN]: 0,
            [types_1.CodeDomain.INTELLIGENCE]: 0,
            [types_1.CodeDomain.SERVICE]: 0,
            [types_1.CodeDomain.COMPONENT]: 0,
            [types_1.CodeDomain.UTILITY]: 0,
            [types_1.CodeDomain.TEST]: 0
        };
        const categoryDistribution = {
            [types_1.AnyTypeCategory.ERROR_HANDLING]: 0,
            [types_1.AnyTypeCategory.EXTERNAL_API]: 0,
            [types_1.AnyTypeCategory.TEST_MOCK]: 0,
            [types_1.AnyTypeCategory.DYNAMIC_CONFIG]: 0,
            [types_1.AnyTypeCategory.LEGACY_COMPATIBILITY]: 0,
            [types_1.AnyTypeCategory.ARRAY_TYPE]: 0,
            [types_1.AnyTypeCategory.RECORD_TYPE]: 0,
            [types_1.AnyTypeCategory.FUNCTION_PARAM]: 0,
            [types_1.AnyTypeCategory.RETURN_TYPE]: 0,
            [types_1.AnyTypeCategory.TYPE_ASSERTION]: 0
        };
        const intentionalCount = { count: 0 };
        const unintentionalCount = { count: 0 };
        for (const occurrence of anyTypeOccurrences) {
            const context = await this.createClassificationContext(occurrence);
            const domainContext = await this.domainAnalyzer.analyzeDomain(context);
            const classification = await this.classifier.classify(context);
            // Count by domain
            domainDistribution[domainContext.domain]++;
            // Count by category
            categoryDistribution[classification.category]++;
            // Count by intentionality
            if (classification.isIntentional) {
                intentionalCount.count++;
            }
            else {
                unintentionalCount.count++;
            }
        }
        const totalCount = anyTypeOccurrences.length;
        const distribution = {
            totalAnyTypes: totalCount,
            byDomain: Object.entries(domainDistribution).map(([domain, count]) => ({
                domain: domain,
                count,
                percentage: totalCount > 0 ? (count / totalCount) * 100 : 0
            })),
            byCategory: Object.entries(categoryDistribution).map(([category, count]) => ({
                category: category,
                count,
                percentage: totalCount > 0 ? (count / totalCount) * 100 : 0
            })),
            intentionalVsUnintentional: {
                intentional: {
                    count: intentionalCount.count,
                    percentage: totalCount > 0 ? (intentionalCount.count / totalCount) * 100 : 0
                },
                unintentional: {
                    count: unintentionalCount.count,
                    percentage: totalCount > 0 ? (unintentionalCount.count / totalCount) * 100 : 0
                }
            },
            analysisDate: new Date()
        };
        console.log(`Domain distribution analysis complete: ${totalCount} any types found`);
        return distribution;
    }
    /**
     * Implement classification accuracy reporting
     */
    async generateClassificationAccuracyReport() {
        console.log('Generating classification accuracy report...');
        const anyTypeOccurrences = await this.findAllAnyTypes();
        const sampleSize = Math.min(100, anyTypeOccurrences.length); // Sample for accuracy testing
        const sample = anyTypeOccurrences.slice(0, sampleSize);
        let correctClassifications = 0;
        let totalClassifications = 0;
        const confidenceScores = [];
        const categoryAccuracy = {
            [types_1.AnyTypeCategory.ERROR_HANDLING]: { correct: 0, total: 0 },
            [types_1.AnyTypeCategory.EXTERNAL_API]: { correct: 0, total: 0 },
            [types_1.AnyTypeCategory.TEST_MOCK]: { correct: 0, total: 0 },
            [types_1.AnyTypeCategory.DYNAMIC_CONFIG]: { correct: 0, total: 0 },
            [types_1.AnyTypeCategory.LEGACY_COMPATIBILITY]: { correct: 0, total: 0 },
            [types_1.AnyTypeCategory.ARRAY_TYPE]: { correct: 0, total: 0 },
            [types_1.AnyTypeCategory.RECORD_TYPE]: { correct: 0, total: 0 },
            [types_1.AnyTypeCategory.FUNCTION_PARAM]: { correct: 0, total: 0 },
            [types_1.AnyTypeCategory.RETURN_TYPE]: { correct: 0, total: 0 },
            [types_1.AnyTypeCategory.TYPE_ASSERTION]: { correct: 0, total: 0 }
        };
        for (const occurrence of sample) {
            const context = await this.createClassificationContext(occurrence);
            const classification = await this.classifier.classify(context);
            totalClassifications++;
            confidenceScores.push(classification.confidence);
            categoryAccuracy[classification.category].total++;
            // Validate classification accuracy using heuristics
            const isAccurate = await this.validateClassificationAccuracy(context, classification);
            if (isAccurate) {
                correctClassifications++;
                categoryAccuracy[classification.category].correct++;
            }
        }
        const overallAccuracy = totalClassifications > 0 ? (correctClassifications / totalClassifications) * 100 : 0;
        const averageConfidence = confidenceScores.length > 0
            ? confidenceScores.reduce((sum, score) => sum + score, 0) / confidenceScores.length
            : 0;
        const report = {
            overallAccuracy,
            averageConfidence,
            sampleSize,
            categoryAccuracy: Object.entries(categoryAccuracy).map(([category, stats]) => ({
                category: category,
                accuracy: stats.total > 0 ? (stats.correct / stats.total) * 100 : 0,
                sampleCount: stats.total
            })),
            confidenceDistribution: this.calculateConfidenceDistribution(confidenceScores),
            reportDate: new Date()
        };
        console.log(`Classification accuracy report complete: ${overallAccuracy.toFixed(1)}% accuracy`);
        return report;
    }
    /**
     * Add success rate analysis and trending
     */
    async generateSuccessRateAnalysis() {
        console.log('Generating success rate analysis and trending...');
        const currentMetrics = await this.getCurrentMetrics();
        const historicalData = this.getHistoricalTrendingData();
        // Calculate success rates by category
        const categorySuccessRates = await this.calculateCategorySuccessRates();
        // Calculate trending data
        const trendingData = this.calculateTrendingMetrics(historicalData);
        const analysis = {
            currentSuccessRate: currentMetrics.overallSuccessRate,
            targetSuccessRate: 85,
            improvementNeeded: Math.max(0, 85 - currentMetrics.overallSuccessRate),
            categorySuccessRates,
            trendingData,
            projectedCompletion: this.calculateProjectedCompletion(trendingData),
            recommendations: await this.generateSuccessRateRecommendations(categorySuccessRates),
            analysisDate: new Date()
        };
        console.log(`Success rate analysis complete: ${currentMetrics.overallSuccessRate.toFixed(1)}% current success rate`);
        return analysis;
    }
    /**
     * Create recommendations for manual review cases
     */
    async generateManualReviewRecommendations() {
        console.log('Generating manual review recommendations...');
        const anyTypeOccurrences = await this.findAllAnyTypes();
        const recommendations = [];
        for (const occurrence of anyTypeOccurrences) {
            const context = await this.createClassificationContext(occurrence);
            const classification = await this.classifier.classify(context);
            // Identify cases that need manual review
            if (this.requiresManualReview(classification, context)) {
                const recommendation = {
                    filePath: occurrence.filePath,
                    lineNumber: occurrence.lineNumber,
                    codeSnippet: occurrence.codeSnippet,
                    classification,
                    reviewReason: this.getReviewReason(classification, context),
                    priority: this.calculateReviewPriority(classification, context),
                    suggestedActions: await this.generateSuggestedActions(classification, context),
                    estimatedEffort: this.estimateReviewEffort(classification, context),
                    relatedOccurrences: await this.findRelatedOccurrences(occurrence)
                };
                recommendations.push(recommendation);
            }
        }
        // Sort by priority (high to low)
        recommendations.sort((a, b) => {
            const priorityOrder = { high: 3, medium: 2, low: 1 };
            return priorityOrder[b.priority] - priorityOrder[a.priority];
        });
        console.log(`Manual review recommendations complete: ${recommendations.length} cases identified`);
        return recommendations;
    }
    /**
     * Generate comprehensive analysis report
     */
    async generateComprehensiveReport() {
        console.log('Generating comprehensive analysis report...');
        const [domainDistribution, accuracyReport, successRateAnalysis, manualReviewRecommendations] = await Promise.all([
            this.analyzeDomainDistribution(),
            this.generateClassificationAccuracyReport(),
            this.generateSuccessRateAnalysis(),
            this.generateManualReviewRecommendations()
        ]);
        const report = {
            id: `analysis-${Date.now()}`,
            timestamp: new Date(),
            domainDistribution,
            accuracyReport,
            successRateAnalysis,
            manualReviewRecommendations,
            summary: {
                totalAnyTypes: domainDistribution.totalAnyTypes,
                unintentionalCount: domainDistribution.intentionalVsUnintentional.unintentional.count,
                classificationAccuracy: accuracyReport.overallAccuracy,
                currentSuccessRate: successRateAnalysis.currentSuccessRate,
                manualReviewCases: manualReviewRecommendations.length,
                topDomain: this.getTopDomain(domainDistribution),
                topCategory: this.getTopCategory(domainDistribution)
            }
        };
        // Save report to history
        this.analysisHistory.push(report);
        await this.saveAnalysisHistory();
        console.log('Comprehensive analysis report generated successfully');
        return report;
    }
    // Private helper methods
    async findAllAnyTypes() {
        const occurrences = [];
        try {
            // Use grep to find all explicit any types
            const grepCommand = `grep -rn "\\bany\\b" src --include="*.ts" --include="*.tsx" | head -1000`;
            const output = (0, child_process_1.execSync)(grepCommand, { encoding: 'utf8', stdio: 'pipe' });
            const lines = output.trim().split('\n').filter(line => line.trim());
            for (const line of lines) {
                const match = line.match(/^([^:]+):(\d+):(.+)$/);
                if (match) {
                    const [, filePath, lineNumber, codeSnippet] = match;
                    occurrences.push({
                        filePath: filePath.trim(),
                        lineNumber: parseInt(lineNumber),
                        codeSnippet: codeSnippet.trim()
                    });
                }
            }
        }
        catch (error) {
            console.warn('Error finding any types:', error);
        }
        return occurrences;
    }
    async createClassificationContext(occurrence) {
        const surroundingLines = await this.getSurroundingLines(occurrence.filePath, occurrence.lineNumber);
        const hasExistingComment = this.hasExistingComment(surroundingLines);
        const domainContext = await this.domainAnalyzer.analyzeDomain({
            filePath: occurrence.filePath,
            lineNumber: occurrence.lineNumber,
            codeSnippet: occurrence.codeSnippet,
            surroundingLines,
            hasExistingComment,
            isInTestFile: occurrence.filePath.includes('.test.') || occurrence.filePath.includes('__tests__'),
            domainContext: { domain: types_1.CodeDomain.UTILITY, intentionalityHints: [], suggestedTypes: [], preservationReasons: [] }
        });
        return {
            filePath: occurrence.filePath,
            lineNumber: occurrence.lineNumber,
            codeSnippet: occurrence.codeSnippet,
            surroundingLines,
            hasExistingComment,
            existingComment: hasExistingComment ? this.extractComment(surroundingLines) : undefined,
            isInTestFile: occurrence.filePath.includes('.test.') || occurrence.filePath.includes('__tests__'),
            domainContext
        };
    }
    async getSurroundingLines(filePath, lineNumber) {
        try {
            const content = fs.readFileSync(filePath, 'utf8');
            const lines = content.split('\n');
            const start = Math.max(0, lineNumber - 3);
            const end = Math.min(lines.length, lineNumber + 2);
            return lines.slice(start, end);
        }
        catch (error) {
            return [];
        }
    }
    hasExistingComment(surroundingLines) {
        return surroundingLines.some(line => line.trim().startsWith('//') ||
            line.trim().startsWith('/*') ||
            line.trim().startsWith('*'));
    }
    extractComment(surroundingLines) {
        const commentLines = surroundingLines.filter(line => line.trim().startsWith('//') ||
            line.trim().startsWith('/*') ||
            line.trim().startsWith('*'));
        return commentLines.join(' ').trim();
    }
    async validateClassificationAccuracy(context, classification) {
        // Heuristic validation based on context
        // Error handling should be in catch blocks
        if (classification.category === types_1.AnyTypeCategory.ERROR_HANDLING) {
            return context.codeSnippet.includes('catch') || context.codeSnippet.includes('error');
        }
        // Test mocks should be in test files
        if (classification.category === types_1.AnyTypeCategory.TEST_MOCK) {
            return context.isInTestFile;
        }
        // Array types should contain array syntax
        if (classification.category === types_1.AnyTypeCategory.ARRAY_TYPE) {
            return context.codeSnippet.includes('any[]') || context.codeSnippet.includes('Array<any>');
        }
        // Record types should contain Record syntax
        if (classification.category === types_1.AnyTypeCategory.RECORD_TYPE) {
            return context.codeSnippet.includes('Record<') && context.codeSnippet.includes('any');
        }
        // Default to accurate for other categories
        return true;
    }
    calculateConfidenceDistribution(scores) {
        const ranges = [
            { min: 0.9, max: 1.0, label: '90-100%' },
            { min: 0.8, max: 0.9, label: '80-90%' },
            { min: 0.7, max: 0.8, label: '70-80%' },
            { min: 0.6, max: 0.7, label: '60-70%' },
            { min: 0.0, max: 0.6, label: '0-60%' }
        ];
        return ranges.map(range => {
            const count = scores.filter(score => score >= range.min && score < range.max).length;
            return {
                range: range.label,
                count,
                percentage: scores.length > 0 ? (count / scores.length) * 100 : 0
            };
        });
    }
    async getCurrentMetrics() {
        // Simulate current metrics - in real implementation, this would fetch from actual data
        return {
            overallSuccessRate: 78.5,
            totalProcessed: 1250,
            successfulReplacements: 982,
            failedReplacements: 268,
            averageConfidence: 0.82
        };
    }
    getHistoricalTrendingData() {
        // Return last 30 days of trending data from history
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        return this.analysisHistory
            .filter(report => report.timestamp >= thirtyDaysAgo)
            .map(report => ({
            date: report.timestamp,
            successRate: report.successRateAnalysis.currentSuccessRate,
            totalAnyTypes: report.domainDistribution.totalAnyTypes,
            unintentionalCount: report.domainDistribution.intentionalVsUnintentional.unintentional.count,
            classificationAccuracy: report.accuracyReport.overallAccuracy
        }));
    }
    async calculateCategorySuccessRates() {
        // Simulate category success rates - in real implementation, this would calculate from actual data
        return [
            { category: types_1.AnyTypeCategory.ARRAY_TYPE, successRate: 95.2, sampleSize: 156 },
            { category: types_1.AnyTypeCategory.RECORD_TYPE, successRate: 87.3, sampleSize: 203 },
            { category: types_1.AnyTypeCategory.FUNCTION_PARAM, successRate: 65.8, sampleSize: 342 },
            { category: types_1.AnyTypeCategory.RETURN_TYPE, successRate: 72.1, sampleSize: 189 },
            { category: types_1.AnyTypeCategory.TYPE_ASSERTION, successRate: 81.4, sampleSize: 127 },
            { category: types_1.AnyTypeCategory.ERROR_HANDLING, successRate: 45.6, sampleSize: 98 },
            { category: types_1.AnyTypeCategory.EXTERNAL_API, successRate: 52.3, sampleSize: 76 },
            { category: types_1.AnyTypeCategory.TEST_MOCK, successRate: 89.7, sampleSize: 134 },
            { category: types_1.AnyTypeCategory.DYNAMIC_CONFIG, successRate: 38.9, sampleSize: 67 },
            { category: types_1.AnyTypeCategory.LEGACY_COMPATIBILITY, successRate: 41.2, sampleSize: 45 }
        ];
    }
    calculateTrendingMetrics(historicalData) {
        if (historicalData.length === 0) {
            return {
                date: new Date(),
                successRate: 0,
                totalAnyTypes: 0,
                unintentionalCount: 0,
                classificationAccuracy: 0
            };
        }
        const latest = historicalData[historicalData.length - 1];
        const previous = historicalData.length > 1 ? historicalData[historicalData.length - 2] : latest;
        return {
            date: latest.date,
            successRate: latest.successRate,
            totalAnyTypes: latest.totalAnyTypes,
            unintentionalCount: latest.unintentionalCount,
            classificationAccuracy: latest.classificationAccuracy,
            trends: {
                successRateChange: latest.successRate - previous.successRate,
                totalAnyTypesChange: latest.totalAnyTypes - previous.totalAnyTypes,
                unintentionalCountChange: latest.unintentionalCount - previous.unintentionalCount,
                classificationAccuracyChange: latest.classificationAccuracy - previous.classificationAccuracy
            }
        };
    }
    calculateProjectedCompletion(trendingData) {
        // Simple linear projection based on current trend
        const currentRate = trendingData.successRate;
        const targetRate = 85;
        const rateChange = trendingData.trends?.successRateChange || 0.5; // Default 0.5% improvement per analysis
        if (rateChange <= 0 || currentRate >= targetRate) {
            const futureDate = new Date();
            futureDate.setDate(futureDate.getDate() + 30); // Default 30 days if no improvement
            return futureDate;
        }
        const daysNeeded = Math.ceil((targetRate - currentRate) / rateChange);
        const projectedDate = new Date();
        projectedDate.setDate(projectedDate.getDate() + daysNeeded);
        return projectedDate;
    }
    async generateSuccessRateRecommendations(categorySuccessRates) {
        const recommendations = [];
        // Find categories with low success rates
        const lowSuccessCategories = categorySuccessRates.filter(cat => cat.successRate < 70);
        for (const category of lowSuccessCategories) {
            switch (category.category) {
                case types_1.AnyTypeCategory.FUNCTION_PARAM:
                    recommendations.push('Focus on improving function parameter type inference algorithms');
                    break;
                case types_1.AnyTypeCategory.RETURN_TYPE:
                    recommendations.push('Enhance return type analysis with better context understanding');
                    break;
                case types_1.AnyTypeCategory.ERROR_HANDLING:
                    recommendations.push('Consider preserving error handling any types as intentional');
                    break;
                case types_1.AnyTypeCategory.EXTERNAL_API:
                    recommendations.push('Improve external API response type detection');
                    break;
                case types_1.AnyTypeCategory.DYNAMIC_CONFIG:
                    recommendations.push('Review dynamic configuration patterns for better type safety');
                    break;
                case types_1.AnyTypeCategory.LEGACY_COMPATIBILITY:
                    recommendations.push('Evaluate legacy compatibility requirements vs type safety benefits');
                    break;
            }
        }
        // Find categories with high success rates to leverage
        const highSuccessCategories = categorySuccessRates.filter(cat => cat.successRate > 85);
        if (highSuccessCategories.length > 0) {
            recommendations.push(`Prioritize ${highSuccessCategories.map(cat => cat.category).join(', ')} categories for quick wins`);
        }
        return recommendations;
    }
    requiresManualReview(classification, context) {
        // Low confidence classifications need manual review
        if (classification.confidence < 0.7) {
            return true;
        }
        // Complex domain contexts need manual review
        if (context.domainContext.intentionalityHints.length > 2) {
            return true;
        }
        // Conflicting signals need manual review
        if (classification.isIntentional && classification.suggestedReplacement) {
            return true;
        }
        // High-risk categories need manual review
        const highRiskCategories = [
            types_1.AnyTypeCategory.EXTERNAL_API,
            types_1.AnyTypeCategory.DYNAMIC_CONFIG,
            types_1.AnyTypeCategory.LEGACY_COMPATIBILITY
        ];
        return highRiskCategories.includes(classification.category);
    }
    getReviewReason(classification, context) {
        if (classification.confidence < 0.7) {
            return `Low classification confidence (${(classification.confidence * 100).toFixed(1)}%)`;
        }
        if (context.domainContext.intentionalityHints.length > 2) {
            return 'Complex domain context with multiple intentionality hints';
        }
        if (classification.isIntentional && classification.suggestedReplacement) {
            return 'Conflicting signals: classified as intentional but has suggested replacement';
        }
        return `High-risk category: ${classification.category}`;
    }
    calculateReviewPriority(classification, context) {
        // High priority: Low confidence or conflicting signals
        if (classification.confidence < 0.6 || (classification.isIntentional && classification.suggestedReplacement)) {
            return 'high';
        }
        // Medium priority: Moderate confidence or complex context
        if (classification.confidence < 0.8 || context.domainContext.intentionalityHints.length > 1) {
            return 'medium';
        }
        // Low priority: High confidence, simple cases
        return 'low';
    }
    async generateSuggestedActions(classification, context) {
        const actions = [];
        if (classification.confidence < 0.7) {
            actions.push('Review classification logic and add more context');
        }
        if (classification.suggestedReplacement) {
            actions.push(`Consider replacing with: ${classification.suggestedReplacement}`);
        }
        if (!classification.isIntentional) {
            actions.push('Attempt automated replacement with safety validation');
        }
        else {
            actions.push('Add documentation explaining why any type is necessary');
        }
        if (context.domainContext.suggestedTypes.length > 0) {
            actions.push(`Consider domain-specific types: ${context.domainContext.suggestedTypes.join(', ')}`);
        }
        return actions;
    }
    estimateReviewEffort(classification, context) {
        // High effort: Complex domain context or low confidence
        if (classification.confidence < 0.6 || context.domainContext.intentionalityHints.length > 2) {
            return 'high';
        }
        // Medium effort: Moderate complexity
        if (classification.confidence < 0.8 || context.domainContext.intentionalityHints.length > 0) {
            return 'medium';
        }
        // Low effort: Simple cases
        return 'low';
    }
    async findRelatedOccurrences(occurrence) {
        // Find other any types in the same file
        const relatedOccurrences = [];
        try {
            const grepCommand = `grep -n "\\bany\\b" "${occurrence.filePath}"`;
            const output = (0, child_process_1.execSync)(grepCommand, { encoding: 'utf8', stdio: 'pipe' });
            const lines = output.trim().split('\n').filter(line => line.trim());
            for (const line of lines) {
                const match = line.match(/^(\d+):(.+)$/);
                if (match) {
                    const lineNumber = parseInt(match[1]);
                    if (lineNumber !== occurrence.lineNumber) {
                        relatedOccurrences.push({
                            filePath: occurrence.filePath,
                            lineNumber
                        });
                    }
                }
            }
        }
        catch (error) {
            // No related occurrences found
        }
        return relatedOccurrences.slice(0, 5); // Limit to 5 related occurrences
    }
    getTopDomain(distribution) {
        const topDomain = distribution.byDomain.reduce((max, current) => current.count > max.count ? current : max);
        return topDomain.domain;
    }
    getTopCategory(distribution) {
        const topCategory = distribution.byCategory.reduce((max, current) => current.count > max.count ? current : max);
        return topCategory.category;
    }
    loadAnalysisHistory() {
        try {
            const historyPath = path.join(process.cwd(), '.kiro', 'campaign-reports', 'unintentional-any-analysis-history.json');
            if (fs.existsSync(historyPath)) {
                const historyData = fs.readFileSync(historyPath, 'utf8');
                this.analysisHistory = JSON.parse(historyData);
            }
        }
        catch (error) {
            console.warn('Could not load analysis history:', error);
            this.analysisHistory = [];
        }
    }
    async saveAnalysisHistory() {
        try {
            const historyDir = path.join(process.cwd(), '.kiro', 'campaign-reports');
            if (!fs.existsSync(historyDir)) {
                fs.mkdirSync(historyDir, { recursive: true });
            }
            const historyPath = path.join(historyDir, 'unintentional-any-analysis-history.json');
            fs.writeFileSync(historyPath, JSON.stringify(this.analysisHistory, null, 2));
        }
        catch (error) {
            console.warn('Could not save analysis history:', error);
        }
    }
}
exports.AnalysisTools = AnalysisTools;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,