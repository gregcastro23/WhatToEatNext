cd85f049e500087c6b12a7b6e8c2209a
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock dependencies
jest.mock('fs');
jest.mock('child_process');
const child_process_1 = require("child_process");
const fs = __importStar(require("fs"));
const AnalysisTools_1 = require("../AnalysisTools");
const types_1 = require("../types");
const mockFs = fs;
const mockExecSync = child_process_1.execSync;
describe('AnalysisTools', () => {
    let analysisTools;
    beforeEach(() => {
        analysisTools = new AnalysisTools_1.AnalysisTools();
        jest.clearAllMocks();
        // Mock file system operations
        mockFs.existsSync.mockReturnValue(false);
        mockFs.readFileSync.mockReturnValue('');
        mockFs.writeFileSync.mockImplementation(() => { });
        mockFs.mkdirSync.mockImplementation(() => '');
    });
    describe('analyzeDomainDistribution', () => {
        it('should analyze any type distribution by domain', async () => {
            // Mock grep output for finding any types
            mockExecSync.mockReturnValue(`
src/calculations/core.ts:15:const data: any = response;
src/components/RecipeCard.tsx:23:props: any
src/services/campaign/test.ts:8:} catch (error: any) {
src/data/ingredients/spices.ts:12:Record<string, any>
      `.trim());
            // Mock file reading for surrounding lines
            mockFs.readFileSync.mockImplementation((filePath) => {
                if (filePath.includes('core.ts')) {
                    return 'function fetchData() {\n  const data: any = response;\n  return data;\n}';
                }
                if (filePath.includes('RecipeCard.tsx')) {
                    return 'interface Props {\n  props: any\n}';
                }
                if (filePath.includes('test.ts')) {
                    return 'try {\n  // code\n} catch (error: any) {\n  console.log(error);\n}';
                }
                if (filePath.includes('spices.ts')) {
                    return 'const spiceData: Record<string, any> = {};';
                }
                return '';
            });
            const distribution = await analysisTools.analyzeDomainDistribution();
            expect(distribution.totalAnyTypes).toBeGreaterThan(0);
            expect(distribution.byDomain).toHaveLength(8); // All domains
            expect(distribution.byCategory).toHaveLength(10); // All categories
            expect(distribution.intentionalVsUnintentional).toBeDefined();
            expect(distribution.analysisDate).toBeInstanceOf(Date);
            // Verify percentages add up correctly
            const domainPercentages = distribution.byDomain.reduce((sum, item) => sum + item.percentage, 0);
            expect(domainPercentages).toBeCloseTo(100, 1);
        });
        it('should handle empty results gracefully', async () => {
            mockExecSync.mockReturnValue('');
            const distribution = await analysisTools.analyzeDomainDistribution();
            expect(distribution.totalAnyTypes).toBe(0);
            expect(distribution.byDomain.every(item => item.count === 0)).toBe(true);
            expect(distribution.byCategory.every(item => item.count === 0)).toBe(true);
            expect(distribution.intentionalVsUnintentional.intentional.count).toBe(0);
            expect(distribution.intentionalVsUnintentional.unintentional.count).toBe(0);
        });
        it('should handle grep command errors', async () => {
            mockExecSync.mockImplementation(() => {
                throw new Error('grep command failed');
            });
            const distribution = await analysisTools.analyzeDomainDistribution();
            expect(distribution.totalAnyTypes).toBe(0);
            expect(distribution.byDomain.every(item => item.count === 0)).toBe(true);
        });
    });
    describe('generateClassificationAccuracyReport', () => {
        it('should generate classification accuracy report', async () => {
            // Mock grep output
            mockExecSync.mockReturnValue(`
src/test.ts:1:const items: any[] = [];
src/test.ts:2:} catch (error: any) {
src/test.ts:3:Record<string, any>
      `.trim());
            mockFs.readFileSync.mockReturnValue('const items: any[] = [];\n} catch (error: any) {\nRecord<string, any>');
            const report = await analysisTools.generateClassificationAccuracyReport();
            expect(report.overallAccuracy).toBeGreaterThanOrEqual(0);
            expect(report.overallAccuracy).toBeLessThanOrEqual(100);
            expect(report.averageConfidence).toBeGreaterThanOrEqual(0);
            expect(report.averageConfidence).toBeLessThanOrEqual(1);
            expect(report.sampleSize).toBeGreaterThanOrEqual(0);
            expect(report.categoryAccuracy).toBeInstanceOf(Array);
            expect(report.confidenceDistribution).toBeInstanceOf(Array);
            expect(report.reportDate).toBeInstanceOf(Date);
            // Verify confidence distribution percentages (only if there are confidence scores)
            if (report.confidenceDistribution.length > 0) {
                const totalPercentage = report.confidenceDistribution.reduce((sum, item) => sum + item.percentage, 0);
                expect(totalPercentage).toBeCloseTo(100, 1);
            }
        });
        it('should handle array type classifications accurately', async () => {
            mockExecSync.mockReturnValue('src/test.ts:1:const items: any[] = [];');
            mockFs.readFileSync.mockReturnValue('const items: any[] = [];');
            const report = await analysisTools.generateClassificationAccuracyReport();
            const arrayTypeAccuracy = report.categoryAccuracy.find(cat => cat.category === types_1.AnyTypeCategory.ARRAY_TYPE);
            expect(arrayTypeAccuracy).toBeDefined();
        });
        it('should handle error handling classifications accurately', async () => {
            mockExecSync.mockReturnValue('src/test.ts:1:} catch (error: any) {');
            mockFs.readFileSync.mockReturnValue('} catch (error: any) {');
            const report = await analysisTools.generateClassificationAccuracyReport();
            const errorHandlingAccuracy = report.categoryAccuracy.find(cat => cat.category === types_1.AnyTypeCategory.ERROR_HANDLING);
            expect(errorHandlingAccuracy).toBeDefined();
        });
    });
    describe('generateSuccessRateAnalysis', () => {
        it('should generate success rate analysis with trending', async () => {
            const analysis = await analysisTools.generateSuccessRateAnalysis();
            expect(analysis.currentSuccessRate).toBeGreaterThanOrEqual(0);
            expect(analysis.currentSuccessRate).toBeLessThanOrEqual(100);
            expect(analysis.targetSuccessRate).toBe(85);
            expect(analysis.improvementNeeded).toBeGreaterThanOrEqual(0);
            expect(analysis.categorySuccessRates).toBeInstanceOf(Array);
            expect(analysis.trendingData).toBeDefined();
            expect(analysis.projectedCompletion).toBeInstanceOf(Date);
            expect(analysis.recommendations).toBeInstanceOf(Array);
            expect(analysis.analysisDate).toBeInstanceOf(Date);
            // Verify category success rates
            expect(analysis.categorySuccessRates.length).toBe(10); // All categories
            analysis.categorySuccessRates.forEach(category => {
                expect(category.successRate).toBeGreaterThanOrEqual(0);
                expect(category.successRate).toBeLessThanOrEqual(100);
                expect(category.sampleSize).toBeGreaterThanOrEqual(0);
            });
        });
        it('should provide recommendations for low success rate categories', async () => {
            const analysis = await analysisTools.generateSuccessRateAnalysis();
            // Should have recommendations for categories with low success rates
            const lowSuccessCategories = analysis.categorySuccessRates.filter(cat => cat.successRate < 70);
            if (lowSuccessCategories.length > 0) {
                expect(analysis.recommendations.length).toBeGreaterThan(0);
            }
        });
        it('should calculate projected completion date', async () => {
            const analysis = await analysisTools.generateSuccessRateAnalysis();
            expect(analysis.projectedCompletion).toBeInstanceOf(Date);
            expect(analysis.projectedCompletion.getTime()).toBeGreaterThan(Date.now());
        });
    });
    describe('generateManualReviewRecommendations', () => {
        it('should generate manual review recommendations', async () => {
            // Mock grep output with various any types
            mockExecSync.mockReturnValueOnce(`
src/complex.ts:1:const config: any = getConfig();
src/api.ts:2:response: any
src/legacy.ts:3:oldData: any
      `.trim());
            // Mock file reading
            mockFs.readFileSync.mockImplementation((filePath) => {
                if (filePath.includes('complex.ts')) {
                    return 'const config: any = getConfig(); // Complex configuration';
                }
                if (filePath.includes('api.ts')) {
                    return 'interface ApiResponse { response: any }';
                }
                if (filePath.includes('legacy.ts')) {
                    return 'const oldData: any = legacySystem.getData();';
                }
                return '';
            });
            // Mock related occurrences search
            mockExecSync.mockImplementation((command) => {
                if (command.includes('grep -n')) {
                    return '1:const config: any = getConfig();\n5:other: any = value;';
                }
                return '';
            });
            const recommendations = await analysisTools.generateManualReviewRecommendations();
            expect(recommendations).toBeInstanceOf(Array);
            recommendations.forEach(recommendation => {
                expect(recommendation.filePath).toBeDefined();
                expect(recommendation.lineNumber).toBeGreaterThan(0);
                expect(recommendation.codeSnippet).toBeDefined();
                expect(recommendation.classification).toBeDefined();
                expect(recommendation.reviewReason).toBeDefined();
                expect(['high', 'medium', 'low']).toContain(recommendation.priority);
                expect(recommendation.suggestedActions).toBeInstanceOf(Array);
                expect(['low', 'medium', 'high']).toContain(recommendation.estimatedEffort);
                expect(recommendation.relatedOccurrences).toBeInstanceOf(Array);
            });
        });
        it('should prioritize recommendations correctly', async () => {
            mockExecSync.mockReturnValueOnce('src/test.ts:1:const data: any = value;');
            mockFs.readFileSync.mockReturnValue('const data: any = value;');
            mockExecSync.mockImplementation(() => '');
            const recommendations = await analysisTools.generateManualReviewRecommendations();
            // Verify recommendations are sorted by priority (high to low)
            for (let i = 0; i < recommendations.length - 1; i++) {
                const currentPriority = recommendations[i].priority;
                const nextPriority = recommendations[i + 1].priority;
                const priorityOrder = { high: 3, medium: 2, low: 1 };
                expect(priorityOrder[currentPriority]).toBeGreaterThanOrEqual(priorityOrder[nextPriority]);
            }
        });
        it('should find related occurrences in the same file', async () => {
            mockExecSync.mockReturnValueOnce('src/test.ts:1:const data: any = value;');
            mockFs.readFileSync.mockReturnValue('const data: any = value;');
            // Mock related occurrences
            mockExecSync.mockImplementation((command) => {
                if (command.includes('grep -n')) {
                    return '1:const data: any = value;\n3:other: any = something;\n7:more: any[];';
                }
                return '';
            });
            const recommendations = await analysisTools.generateManualReviewRecommendations();
            if (recommendations.length > 0) {
                const firstRecommendation = recommendations[0];
                expect(firstRecommendation.relatedOccurrences.length).toBeGreaterThan(0);
                expect(firstRecommendation.relatedOccurrences.length).toBeLessThanOrEqual(5); // Limited to 5
            }
        });
    });
    describe('generateComprehensiveReport', () => {
        it('should generate comprehensive analysis report', async () => {
            // Mock all the required data
            mockExecSync.mockReturnValue('src/test.ts:1:const data: any = value;');
            mockFs.readFileSync.mockReturnValue('const data: any = value;');
            const report = await analysisTools.generateComprehensiveReport();
            expect(report.id).toBeDefined();
            expect(report.timestamp).toBeInstanceOf(Date);
            expect(report.domainDistribution).toBeDefined();
            expect(report.accuracyReport).toBeDefined();
            expect(report.successRateAnalysis).toBeDefined();
            expect(report.manualReviewRecommendations).toBeInstanceOf(Array);
            expect(report.summary).toBeDefined();
            // Verify summary data
            expect(report.summary.totalAnyTypes).toBeGreaterThanOrEqual(0);
            expect(report.summary.unintentionalCount).toBeGreaterThanOrEqual(0);
            expect(report.summary.classificationAccuracy).toBeGreaterThanOrEqual(0);
            expect(report.summary.currentSuccessRate).toBeGreaterThanOrEqual(0);
            expect(report.summary.manualReviewCases).toBeGreaterThanOrEqual(0);
            expect(Object.values(types_1.CodeDomain)).toContain(report.summary.topDomain);
            expect(Object.values(types_1.AnyTypeCategory)).toContain(report.summary.topCategory);
        });
        it('should save report to history', async () => {
            mockExecSync.mockReturnValue('');
            mockFs.readFileSync.mockReturnValue('');
            await analysisTools.generateComprehensiveReport();
            // Verify that writeFileSync was called to save the history
            expect(mockFs.writeFileSync).toHaveBeenCalled();
        });
        it('should handle file system errors gracefully', async () => {
            mockExecSync.mockReturnValue('');
            mockFs.readFileSync.mockReturnValue('');
            mockFs.writeFileSync.mockImplementation(() => {
                throw new Error('File system error');
            });
            // Should not throw error even if saving fails
            const report = await analysisTools.generateComprehensiveReport();
            expect(report).toBeDefined();
        });
    });
    describe('error handling', () => {
        it('should handle grep command failures gracefully', async () => {
            mockExecSync.mockImplementation(() => {
                throw new Error('Command failed');
            });
            const distribution = await analysisTools.analyzeDomainDistribution();
            expect(distribution.totalAnyTypes).toBe(0);
        });
        it('should handle file reading failures gracefully', async () => {
            mockExecSync.mockReturnValue('src/test.ts:1:const data: any = value;');
            mockFs.readFileSync.mockImplementation(() => {
                throw new Error('File not found');
            });
            const distribution = await analysisTools.analyzeDomainDistribution();
            expect(distribution).toBeDefined();
        });
        it('should handle malformed grep output', async () => {
            mockExecSync.mockReturnValue('invalid output format');
            mockFs.readFileSync.mockReturnValue('');
            const distribution = await analysisTools.analyzeDomainDistribution();
            expect(distribution.totalAnyTypes).toBe(0);
        });
    });
    describe('data validation', () => {
        it('should validate percentage calculations', async () => {
            mockExecSync.mockReturnValue(`
src/test1.ts:1:any
src/test2.ts:1:any
src/test3.ts:1:any
      `.trim());
            mockFs.readFileSync.mockReturnValue('const data: any = value;');
            const distribution = await analysisTools.analyzeDomainDistribution();
            // All percentages should add up to 100%
            const domainTotal = distribution.byDomain.reduce((sum, item) => sum + item.percentage, 0);
            const categoryTotal = distribution.byCategory.reduce((sum, item) => sum + item.percentage, 0);
            const intentionalTotal = distribution.intentionalVsUnintentional.intentional.percentage +
                distribution.intentionalVsUnintentional.unintentional.percentage;
            expect(domainTotal).toBeCloseTo(100, 1);
            expect(categoryTotal).toBeCloseTo(100, 1);
            expect(intentionalTotal).toBeCloseTo(100, 1);
        });
        it('should validate confidence scores are within valid range', async () => {
            mockExecSync.mockReturnValue('src/test.ts:1:const data: any = value;');
            mockFs.readFileSync.mockReturnValue('const data: any = value;');
            const report = await analysisTools.generateClassificationAccuracyReport();
            expect(report.averageConfidence).toBeGreaterThanOrEqual(0);
            expect(report.averageConfidence).toBeLessThanOrEqual(1);
            report.confidenceDistribution.forEach(dist => {
                expect(dist.percentage).toBeGreaterThanOrEqual(0);
                expect(dist.percentage).toBeLessThanOrEqual(100);
            });
        });
        it('should validate success rates are within valid range', async () => {
            const analysis = await analysisTools.generateSuccessRateAnalysis();
            expect(analysis.currentSuccessRate).toBeGreaterThanOrEqual(0);
            expect(analysis.currentSuccessRate).toBeLessThanOrEqual(100);
            analysis.categorySuccessRates.forEach(category => {
                expect(category.successRate).toBeGreaterThanOrEqual(0);
                expect(category.successRate).toBeLessThanOrEqual(100);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9zZXJ2aWNlcy9jYW1wYWlnbi91bmludGVudGlvbmFsLWFueS1lbGltaW5hdGlvbi9fX3Rlc3RzX18vQW5hbHlzaXNUb29scy50ZXN0LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFLQSxvQkFBb0I7QUFDcEIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBUDNCLGlEQUF5QztBQUN6Qyx1Q0FBeUI7QUFDekIsb0RBQWlEO0FBQ2pELG9DQUF1RDtBQU12RCxNQUFNLE1BQU0sR0FBRyxFQUE0QixDQUFDO0FBQzVDLE1BQU0sWUFBWSxHQUFHLHdCQUFnRCxDQUFDO0FBRXRFLFFBQVEsQ0FBQyxlQUFlLEVBQUUsR0FBRyxFQUFFO0lBQzdCLElBQUksYUFBNEIsQ0FBQztJQUVqQyxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsYUFBYSxHQUFHLElBQUksNkJBQWEsRUFBRSxDQUFDO1FBQ3BDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUVyQiw4QkFBOEI7UUFDOUIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDekMsTUFBTSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsR0FBRSxDQUFDLENBQUMsQ0FBQztRQUNsRCxNQUFNLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2hELENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLDJCQUEyQixFQUFFLEdBQUcsRUFBRTtRQUN6QyxFQUFFLENBQUMsZ0RBQWdELEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDOUQseUNBQXlDO1lB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QyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9zZXJ2aWNlcy9jYW1wYWlnbi91bmludGVudGlvbmFsLWFueS1lbGltaW5hdGlvbi9fX3Rlc3RzX18vQW5hbHlzaXNUb29scy50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4ZWNTeW5jIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgeyBBbmFseXNpc1Rvb2xzIH0gZnJvbSAnLi4vQW5hbHlzaXNUb29scyc7XG5pbXBvcnQgeyBBbnlUeXBlQ2F0ZWdvcnksIENvZGVEb21haW4gfSBmcm9tICcuLi90eXBlcyc7XG5cbi8vIE1vY2sgZGVwZW5kZW5jaWVzXG5qZXN0Lm1vY2soJ2ZzJyk7XG5qZXN0Lm1vY2soJ2NoaWxkX3Byb2Nlc3MnKTtcblxuY29uc3QgbW9ja0ZzID0gZnMgYXMgamVzdC5Nb2NrZWQ8dHlwZW9mIGZzPjtcbmNvbnN0IG1vY2tFeGVjU3luYyA9IGV4ZWNTeW5jIGFzIGplc3QuTW9ja2VkRnVuY3Rpb248dHlwZW9mIGV4ZWNTeW5jPjtcblxuZGVzY3JpYmUoJ0FuYWx5c2lzVG9vbHMnLCAoKSA9PiB7XG4gIGxldCBhbmFseXNpc1Rvb2xzOiBBbmFseXNpc1Rvb2xzO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGFuYWx5c2lzVG9vbHMgPSBuZXcgQW5hbHlzaXNUb29scygpO1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuXG4gICAgLy8gTW9jayBmaWxlIHN5c3RlbSBvcGVyYXRpb25zXG4gICAgbW9ja0ZzLmV4aXN0c1N5bmMubW9ja1JldHVyblZhbHVlKGZhbHNlKTtcbiAgICBtb2NrRnMucmVhZEZpbGVTeW5jLm1vY2tSZXR1cm5WYWx1ZSgnJyk7XG4gICAgbW9ja0ZzLndyaXRlRmlsZVN5bmMubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHt9KTtcbiAgICBtb2NrRnMubWtkaXJTeW5jLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAnJyk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdhbmFseXplRG9tYWluRGlzdHJpYnV0aW9uJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgYW5hbHl6ZSBhbnkgdHlwZSBkaXN0cmlidXRpb24gYnkgZG9tYWluJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gTW9jayBncmVwIG91dHB1dCBmb3IgZmluZGluZyBhbnkgdHlwZXNcbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrUmV0dXJuVmFsdWUoYFxuc3JjL2NhbGN1bGF0aW9ucy9jb3JlLnRzOjE1OmNvbnN0IGRhdGE6IGFueSA9IHJlc3BvbnNlO1xuc3JjL2NvbXBvbmVudHMvUmVjaXBlQ2FyZC50c3g6MjM6cHJvcHM6IGFueVxuc3JjL3NlcnZpY2VzL2NhbXBhaWduL3Rlc3QudHM6ODp9IGNhdGNoIChlcnJvcjogYW55KSB7XG5zcmMvZGF0YS9pbmdyZWRpZW50cy9zcGljZXMudHM6MTI6UmVjb3JkPHN0cmluZywgYW55PlxuICAgICAgYC50cmltKCkpO1xuXG4gICAgICAvLyBNb2NrIGZpbGUgcmVhZGluZyBmb3Igc3Vycm91bmRpbmcgbGluZXNcbiAgICAgIG1vY2tGcy5yZWFkRmlsZVN5bmMubW9ja0ltcGxlbWVudGF0aW9uKChmaWxlUGF0aDogc3RyaW5nKSA9PiB7XG4gICAgICAgIGlmIChmaWxlUGF0aC5pbmNsdWRlcygnY29yZS50cycpKSB7XG4gICAgICAgICAgcmV0dXJuICdmdW5jdGlvbiBmZXRjaERhdGEoKSB7XFxuICBjb25zdCBkYXRhOiBhbnkgPSByZXNwb25zZTtcXG4gIHJldHVybiBkYXRhO1xcbn0nO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmaWxlUGF0aC5pbmNsdWRlcygnUmVjaXBlQ2FyZC50c3gnKSkge1xuICAgICAgICAgIHJldHVybiAnaW50ZXJmYWNlIFByb3BzIHtcXG4gIHByb3BzOiBhbnlcXG59JztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmlsZVBhdGguaW5jbHVkZXMoJ3Rlc3QudHMnKSkge1xuICAgICAgICAgIHJldHVybiAndHJ5IHtcXG4gIC8vIGNvZGVcXG59IGNhdGNoIChlcnJvcjogYW55KSB7XFxuICBjb25zb2xlLmxvZyhlcnJvcik7XFxufSc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpbGVQYXRoLmluY2x1ZGVzKCdzcGljZXMudHMnKSkge1xuICAgICAgICAgIHJldHVybiAnY29uc3Qgc3BpY2VEYXRhOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0ge307JztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgZGlzdHJpYnV0aW9uID0gYXdhaXQgYW5hbHlzaXNUb29scy5hbmFseXplRG9tYWluRGlzdHJpYnV0aW9uKCk7XG5cbiAgICAgIGV4cGVjdChkaXN0cmlidXRpb24udG90YWxBbnlUeXBlcykudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgICAgZXhwZWN0KGRpc3RyaWJ1dGlvbi5ieURvbWFpbikudG9IYXZlTGVuZ3RoKDgpOyAvLyBBbGwgZG9tYWluc1xuICAgICAgZXhwZWN0KGRpc3RyaWJ1dGlvbi5ieUNhdGVnb3J5KS50b0hhdmVMZW5ndGgoMTApOyAvLyBBbGwgY2F0ZWdvcmllc1xuICAgICAgZXhwZWN0KGRpc3RyaWJ1dGlvbi5pbnRlbnRpb25hbFZzVW5pbnRlbnRpb25hbCkudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChkaXN0cmlidXRpb24uYW5hbHlzaXNEYXRlKS50b0JlSW5zdGFuY2VPZihEYXRlKTtcblxuICAgICAgLy8gVmVyaWZ5IHBlcmNlbnRhZ2VzIGFkZCB1cCBjb3JyZWN0bHlcbiAgICAgIGNvbnN0IGRvbWFpblBlcmNlbnRhZ2VzID0gZGlzdHJpYnV0aW9uLmJ5RG9tYWluLnJlZHVjZSgoc3VtLCBpdGVtKSA9PiBzdW0gKyBpdGVtLnBlcmNlbnRhZ2UsIDApO1xuICAgICAgZXhwZWN0KGRvbWFpblBlcmNlbnRhZ2VzKS50b0JlQ2xvc2VUbygxMDAsIDEpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZW1wdHkgcmVzdWx0cyBncmFjZWZ1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tSZXR1cm5WYWx1ZSgnJyk7XG5cbiAgICAgIGNvbnN0IGRpc3RyaWJ1dGlvbiA9IGF3YWl0IGFuYWx5c2lzVG9vbHMuYW5hbHl6ZURvbWFpbkRpc3RyaWJ1dGlvbigpO1xuXG4gICAgICBleHBlY3QoZGlzdHJpYnV0aW9uLnRvdGFsQW55VHlwZXMpLnRvQmUoMCk7XG4gICAgICBleHBlY3QoZGlzdHJpYnV0aW9uLmJ5RG9tYWluLmV2ZXJ5KGl0ZW0gPT4gaXRlbS5jb3VudCA9PT0gMCkpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QoZGlzdHJpYnV0aW9uLmJ5Q2F0ZWdvcnkuZXZlcnkoaXRlbSA9PiBpdGVtLmNvdW50ID09PSAwKSkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChkaXN0cmlidXRpb24uaW50ZW50aW9uYWxWc1VuaW50ZW50aW9uYWwuaW50ZW50aW9uYWwuY291bnQpLnRvQmUoMCk7XG4gICAgICBleHBlY3QoZGlzdHJpYnV0aW9uLmludGVudGlvbmFsVnNVbmludGVudGlvbmFsLnVuaW50ZW50aW9uYWwuY291bnQpLnRvQmUoMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBncmVwIGNvbW1hbmQgZXJyb3JzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZ3JlcCBjb21tYW5kIGZhaWxlZCcpO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGRpc3RyaWJ1dGlvbiA9IGF3YWl0IGFuYWx5c2lzVG9vbHMuYW5hbHl6ZURvbWFpbkRpc3RyaWJ1dGlvbigpO1xuXG4gICAgICBleHBlY3QoZGlzdHJpYnV0aW9uLnRvdGFsQW55VHlwZXMpLnRvQmUoMCk7XG4gICAgICBleHBlY3QoZGlzdHJpYnV0aW9uLmJ5RG9tYWluLmV2ZXJ5KGl0ZW0gPT4gaXRlbS5jb3VudCA9PT0gMCkpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdnZW5lcmF0ZUNsYXNzaWZpY2F0aW9uQWNjdXJhY3lSZXBvcnQnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBnZW5lcmF0ZSBjbGFzc2lmaWNhdGlvbiBhY2N1cmFjeSByZXBvcnQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBNb2NrIGdyZXAgb3V0cHV0XG4gICAgICBtb2NrRXhlY1N5bmMubW9ja1JldHVyblZhbHVlKGBcbnNyYy90ZXN0LnRzOjE6Y29uc3QgaXRlbXM6IGFueVtdID0gW107XG5zcmMvdGVzdC50czoyOn0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbnNyYy90ZXN0LnRzOjM6UmVjb3JkPHN0cmluZywgYW55PlxuICAgICAgYC50cmltKCkpO1xuXG4gICAgICBtb2NrRnMucmVhZEZpbGVTeW5jLm1vY2tSZXR1cm5WYWx1ZSgnY29uc3QgaXRlbXM6IGFueVtdID0gW107XFxufSBjYXRjaCAoZXJyb3I6IGFueSkge1xcblJlY29yZDxzdHJpbmcsIGFueT4nKTtcblxuICAgICAgY29uc3QgcmVwb3J0ID0gYXdhaXQgYW5hbHlzaXNUb29scy5nZW5lcmF0ZUNsYXNzaWZpY2F0aW9uQWNjdXJhY3lSZXBvcnQoKTtcblxuICAgICAgZXhwZWN0KHJlcG9ydC5vdmVyYWxsQWNjdXJhY3kpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoMCk7XG4gICAgICBleHBlY3QocmVwb3J0Lm92ZXJhbGxBY2N1cmFjeSkudG9CZUxlc3NUaGFuT3JFcXVhbCgxMDApO1xuICAgICAgZXhwZWN0KHJlcG9ydC5hdmVyYWdlQ29uZmlkZW5jZSkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgwKTtcbiAgICAgIGV4cGVjdChyZXBvcnQuYXZlcmFnZUNvbmZpZGVuY2UpLnRvQmVMZXNzVGhhbk9yRXF1YWwoMSk7XG4gICAgICBleHBlY3QocmVwb3J0LnNhbXBsZVNpemUpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoMCk7XG4gICAgICBleHBlY3QocmVwb3J0LmNhdGVnb3J5QWNjdXJhY3kpLnRvQmVJbnN0YW5jZU9mKEFycmF5KTtcbiAgICAgIGV4cGVjdChyZXBvcnQuY29uZmlkZW5jZURpc3RyaWJ1dGlvbikudG9CZUluc3RhbmNlT2YoQXJyYXkpO1xuICAgICAgZXhwZWN0KHJlcG9ydC5yZXBvcnREYXRlKS50b0JlSW5zdGFuY2VPZihEYXRlKTtcblxuICAgICAgLy8gVmVyaWZ5IGNvbmZpZGVuY2UgZGlzdHJpYnV0aW9uIHBlcmNlbnRhZ2VzIChvbmx5IGlmIHRoZXJlIGFyZSBjb25maWRlbmNlIHNjb3JlcylcbiAgICAgIGlmIChyZXBvcnQuY29uZmlkZW5jZURpc3RyaWJ1dGlvbi5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IHRvdGFsUGVyY2VudGFnZSA9IHJlcG9ydC5jb25maWRlbmNlRGlzdHJpYnV0aW9uLnJlZHVjZSgoc3VtLCBpdGVtKSA9PiBzdW0gKyBpdGVtLnBlcmNlbnRhZ2UsIDApO1xuICAgICAgICBleHBlY3QodG90YWxQZXJjZW50YWdlKS50b0JlQ2xvc2VUbygxMDAsIDEpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgYXJyYXkgdHlwZSBjbGFzc2lmaWNhdGlvbnMgYWNjdXJhdGVseScsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrUmV0dXJuVmFsdWUoJ3NyYy90ZXN0LnRzOjE6Y29uc3QgaXRlbXM6IGFueVtdID0gW107Jyk7XG4gICAgICBtb2NrRnMucmVhZEZpbGVTeW5jLm1vY2tSZXR1cm5WYWx1ZSgnY29uc3QgaXRlbXM6IGFueVtdID0gW107Jyk7XG5cbiAgICAgIGNvbnN0IHJlcG9ydCA9IGF3YWl0IGFuYWx5c2lzVG9vbHMuZ2VuZXJhdGVDbGFzc2lmaWNhdGlvbkFjY3VyYWN5UmVwb3J0KCk7XG5cbiAgICAgIGNvbnN0IGFycmF5VHlwZUFjY3VyYWN5ID0gcmVwb3J0LmNhdGVnb3J5QWNjdXJhY3kuZmluZChcbiAgICAgICAgY2F0ID0+IGNhdC5jYXRlZ29yeSA9PT0gQW55VHlwZUNhdGVnb3J5LkFSUkFZX1RZUEVcbiAgICAgICk7XG4gICAgICBleHBlY3QoYXJyYXlUeXBlQWNjdXJhY3kpLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBlcnJvciBoYW5kbGluZyBjbGFzc2lmaWNhdGlvbnMgYWNjdXJhdGVseScsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrUmV0dXJuVmFsdWUoJ3NyYy90ZXN0LnRzOjE6fSBjYXRjaCAoZXJyb3I6IGFueSkgeycpO1xuICAgICAgbW9ja0ZzLnJlYWRGaWxlU3luYy5tb2NrUmV0dXJuVmFsdWUoJ30gY2F0Y2ggKGVycm9yOiBhbnkpIHsnKTtcblxuICAgICAgY29uc3QgcmVwb3J0ID0gYXdhaXQgYW5hbHlzaXNUb29scy5nZW5lcmF0ZUNsYXNzaWZpY2F0aW9uQWNjdXJhY3lSZXBvcnQoKTtcblxuICAgICAgY29uc3QgZXJyb3JIYW5kbGluZ0FjY3VyYWN5ID0gcmVwb3J0LmNhdGVnb3J5QWNjdXJhY3kuZmluZChcbiAgICAgICAgY2F0ID0+IGNhdC5jYXRlZ29yeSA9PT0gQW55VHlwZUNhdGVnb3J5LkVSUk9SX0hBTkRMSU5HXG4gICAgICApO1xuICAgICAgZXhwZWN0KGVycm9ySGFuZGxpbmdBY2N1cmFjeSkudG9CZURlZmluZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2dlbmVyYXRlU3VjY2Vzc1JhdGVBbmFseXNpcycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGdlbmVyYXRlIHN1Y2Nlc3MgcmF0ZSBhbmFseXNpcyB3aXRoIHRyZW5kaW5nJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgYW5hbHlzaXMgPSBhd2FpdCBhbmFseXNpc1Rvb2xzLmdlbmVyYXRlU3VjY2Vzc1JhdGVBbmFseXNpcygpO1xuXG4gICAgICBleHBlY3QoYW5hbHlzaXMuY3VycmVudFN1Y2Nlc3NSYXRlKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApO1xuICAgICAgZXhwZWN0KGFuYWx5c2lzLmN1cnJlbnRTdWNjZXNzUmF0ZSkudG9CZUxlc3NUaGFuT3JFcXVhbCgxMDApO1xuICAgICAgZXhwZWN0KGFuYWx5c2lzLnRhcmdldFN1Y2Nlc3NSYXRlKS50b0JlKDg1KTtcbiAgICAgIGV4cGVjdChhbmFseXNpcy5pbXByb3ZlbWVudE5lZWRlZCkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgwKTtcbiAgICAgIGV4cGVjdChhbmFseXNpcy5jYXRlZ29yeVN1Y2Nlc3NSYXRlcykudG9CZUluc3RhbmNlT2YoQXJyYXkpO1xuICAgICAgZXhwZWN0KGFuYWx5c2lzLnRyZW5kaW5nRGF0YSkudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChhbmFseXNpcy5wcm9qZWN0ZWRDb21wbGV0aW9uKS50b0JlSW5zdGFuY2VPZihEYXRlKTtcbiAgICAgIGV4cGVjdChhbmFseXNpcy5yZWNvbW1lbmRhdGlvbnMpLnRvQmVJbnN0YW5jZU9mKEFycmF5KTtcbiAgICAgIGV4cGVjdChhbmFseXNpcy5hbmFseXNpc0RhdGUpLnRvQmVJbnN0YW5jZU9mKERhdGUpO1xuXG4gICAgICAvLyBWZXJpZnkgY2F0ZWdvcnkgc3VjY2VzcyByYXRlc1xuICAgICAgZXhwZWN0KGFuYWx5c2lzLmNhdGVnb3J5U3VjY2Vzc1JhdGVzLmxlbmd0aCkudG9CZSgxMCk7IC8vIEFsbCBjYXRlZ29yaWVzXG4gICAgICBhbmFseXNpcy5jYXRlZ29yeVN1Y2Nlc3NSYXRlcy5mb3JFYWNoKGNhdGVnb3J5ID0+IHtcbiAgICAgICAgZXhwZWN0KGNhdGVnb3J5LnN1Y2Nlc3NSYXRlKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApO1xuICAgICAgICBleHBlY3QoY2F0ZWdvcnkuc3VjY2Vzc1JhdGUpLnRvQmVMZXNzVGhhbk9yRXF1YWwoMTAwKTtcbiAgICAgICAgZXhwZWN0KGNhdGVnb3J5LnNhbXBsZVNpemUpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoMCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcHJvdmlkZSByZWNvbW1lbmRhdGlvbnMgZm9yIGxvdyBzdWNjZXNzIHJhdGUgY2F0ZWdvcmllcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGFuYWx5c2lzID0gYXdhaXQgYW5hbHlzaXNUb29scy5nZW5lcmF0ZVN1Y2Nlc3NSYXRlQW5hbHlzaXMoKTtcblxuICAgICAgLy8gU2hvdWxkIGhhdmUgcmVjb21tZW5kYXRpb25zIGZvciBjYXRlZ29yaWVzIHdpdGggbG93IHN1Y2Nlc3MgcmF0ZXNcbiAgICAgIGNvbnN0IGxvd1N1Y2Nlc3NDYXRlZ29yaWVzID0gYW5hbHlzaXMuY2F0ZWdvcnlTdWNjZXNzUmF0ZXMuZmlsdGVyKGNhdCA9PiBjYXQuc3VjY2Vzc1JhdGUgPCA3MCk7XG4gICAgICBpZiAobG93U3VjY2Vzc0NhdGVnb3JpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBleHBlY3QoYW5hbHlzaXMucmVjb21tZW5kYXRpb25zLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBjYWxjdWxhdGUgcHJvamVjdGVkIGNvbXBsZXRpb24gZGF0ZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGFuYWx5c2lzID0gYXdhaXQgYW5hbHlzaXNUb29scy5nZW5lcmF0ZVN1Y2Nlc3NSYXRlQW5hbHlzaXMoKTtcblxuICAgICAgZXhwZWN0KGFuYWx5c2lzLnByb2plY3RlZENvbXBsZXRpb24pLnRvQmVJbnN0YW5jZU9mKERhdGUpO1xuICAgICAgZXhwZWN0KGFuYWx5c2lzLnByb2plY3RlZENvbXBsZXRpb24uZ2V0VGltZSgpKS50b0JlR3JlYXRlclRoYW4oRGF0ZS5ub3coKSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdnZW5lcmF0ZU1hbnVhbFJldmlld1JlY29tbWVuZGF0aW9ucycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGdlbmVyYXRlIG1hbnVhbCByZXZpZXcgcmVjb21tZW5kYXRpb25zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gTW9jayBncmVwIG91dHB1dCB3aXRoIHZhcmlvdXMgYW55IHR5cGVzXG4gICAgICBtb2NrRXhlY1N5bmMubW9ja1JldHVyblZhbHVlT25jZShgXG5zcmMvY29tcGxleC50czoxOmNvbnN0IGNvbmZpZzogYW55ID0gZ2V0Q29uZmlnKCk7XG5zcmMvYXBpLnRzOjI6cmVzcG9uc2U6IGFueVxuc3JjL2xlZ2FjeS50czozOm9sZERhdGE6IGFueVxuICAgICAgYC50cmltKCkpO1xuXG4gICAgICAvLyBNb2NrIGZpbGUgcmVhZGluZ1xuICAgICAgbW9ja0ZzLnJlYWRGaWxlU3luYy5tb2NrSW1wbGVtZW50YXRpb24oKGZpbGVQYXRoOiBzdHJpbmcpID0+IHtcbiAgICAgICAgaWYgKGZpbGVQYXRoLmluY2x1ZGVzKCdjb21wbGV4LnRzJykpIHtcbiAgICAgICAgICByZXR1cm4gJ2NvbnN0IGNvbmZpZzogYW55ID0gZ2V0Q29uZmlnKCk7IC8vIENvbXBsZXggY29uZmlndXJhdGlvbic7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpbGVQYXRoLmluY2x1ZGVzKCdhcGkudHMnKSkge1xuICAgICAgICAgIHJldHVybiAnaW50ZXJmYWNlIEFwaVJlc3BvbnNlIHsgcmVzcG9uc2U6IGFueSB9JztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmlsZVBhdGguaW5jbHVkZXMoJ2xlZ2FjeS50cycpKSB7XG4gICAgICAgICAgcmV0dXJuICdjb25zdCBvbGREYXRhOiBhbnkgPSBsZWdhY3lTeXN0ZW0uZ2V0RGF0YSgpOyc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIE1vY2sgcmVsYXRlZCBvY2N1cnJlbmNlcyBzZWFyY2hcbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrSW1wbGVtZW50YXRpb24oKGNvbW1hbmQ6IHN0cmluZykgPT4ge1xuICAgICAgICBpZiAoY29tbWFuZC5pbmNsdWRlcygnZ3JlcCAtbicpKSB7XG4gICAgICAgICAgcmV0dXJuICcxOmNvbnN0IGNvbmZpZzogYW55ID0gZ2V0Q29uZmlnKCk7XFxuNTpvdGhlcjogYW55ID0gdmFsdWU7JztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcmVjb21tZW5kYXRpb25zID0gYXdhaXQgYW5hbHlzaXNUb29scy5nZW5lcmF0ZU1hbnVhbFJldmlld1JlY29tbWVuZGF0aW9ucygpO1xuXG4gICAgICBleHBlY3QocmVjb21tZW5kYXRpb25zKS50b0JlSW5zdGFuY2VPZihBcnJheSk7XG5cbiAgICAgIHJlY29tbWVuZGF0aW9ucy5mb3JFYWNoKHJlY29tbWVuZGF0aW9uID0+IHtcbiAgICAgICAgZXhwZWN0KHJlY29tbWVuZGF0aW9uLmZpbGVQYXRoKS50b0JlRGVmaW5lZCgpO1xuICAgICAgICBleHBlY3QocmVjb21tZW5kYXRpb24ubGluZU51bWJlcikudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgICAgICBleHBlY3QocmVjb21tZW5kYXRpb24uY29kZVNuaXBwZXQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgIGV4cGVjdChyZWNvbW1lbmRhdGlvbi5jbGFzc2lmaWNhdGlvbikudG9CZURlZmluZWQoKTtcbiAgICAgICAgZXhwZWN0KHJlY29tbWVuZGF0aW9uLnJldmlld1JlYXNvbikudG9CZURlZmluZWQoKTtcbiAgICAgICAgZXhwZWN0KFsnaGlnaCcsICdtZWRpdW0nLCAnbG93J10pLnRvQ29udGFpbihyZWNvbW1lbmRhdGlvbi5wcmlvcml0eSk7XG4gICAgICAgIGV4cGVjdChyZWNvbW1lbmRhdGlvbi5zdWdnZXN0ZWRBY3Rpb25zKS50b0JlSW5zdGFuY2VPZihBcnJheSk7XG4gICAgICAgIGV4cGVjdChbJ2xvdycsICdtZWRpdW0nLCAnaGlnaCddKS50b0NvbnRhaW4ocmVjb21tZW5kYXRpb24uZXN0aW1hdGVkRWZmb3J0KTtcbiAgICAgICAgZXhwZWN0KHJlY29tbWVuZGF0aW9uLnJlbGF0ZWRPY2N1cnJlbmNlcykudG9CZUluc3RhbmNlT2YoQXJyYXkpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHByaW9yaXRpemUgcmVjb21tZW5kYXRpb25zIGNvcnJlY3RseScsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrUmV0dXJuVmFsdWVPbmNlKCdzcmMvdGVzdC50czoxOmNvbnN0IGRhdGE6IGFueSA9IHZhbHVlOycpO1xuICAgICAgbW9ja0ZzLnJlYWRGaWxlU3luYy5tb2NrUmV0dXJuVmFsdWUoJ2NvbnN0IGRhdGE6IGFueSA9IHZhbHVlOycpO1xuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAnJyk7XG5cbiAgICAgIGNvbnN0IHJlY29tbWVuZGF0aW9ucyA9IGF3YWl0IGFuYWx5c2lzVG9vbHMuZ2VuZXJhdGVNYW51YWxSZXZpZXdSZWNvbW1lbmRhdGlvbnMoKTtcblxuICAgICAgLy8gVmVyaWZ5IHJlY29tbWVuZGF0aW9ucyBhcmUgc29ydGVkIGJ5IHByaW9yaXR5IChoaWdoIHRvIGxvdylcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVjb21tZW5kYXRpb25zLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICBjb25zdCBjdXJyZW50UHJpb3JpdHkgPSByZWNvbW1lbmRhdGlvbnNbaV0ucHJpb3JpdHk7XG4gICAgICAgIGNvbnN0IG5leHRQcmlvcml0eSA9IHJlY29tbWVuZGF0aW9uc1tpICsgMV0ucHJpb3JpdHk7XG5cbiAgICAgICAgY29uc3QgcHJpb3JpdHlPcmRlciA9IHsgaGlnaDogMywgbWVkaXVtOiAyLCBsb3c6IDEgfTtcbiAgICAgICAgZXhwZWN0KHByaW9yaXR5T3JkZXJbY3VycmVudFByaW9yaXR5XSkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbChwcmlvcml0eU9yZGVyW25leHRQcmlvcml0eV0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBmaW5kIHJlbGF0ZWQgb2NjdXJyZW5jZXMgaW4gdGhlIHNhbWUgZmlsZScsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrUmV0dXJuVmFsdWVPbmNlKCdzcmMvdGVzdC50czoxOmNvbnN0IGRhdGE6IGFueSA9IHZhbHVlOycpO1xuICAgICAgbW9ja0ZzLnJlYWRGaWxlU3luYy5tb2NrUmV0dXJuVmFsdWUoJ2NvbnN0IGRhdGE6IGFueSA9IHZhbHVlOycpO1xuXG4gICAgICAvLyBNb2NrIHJlbGF0ZWQgb2NjdXJyZW5jZXNcbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrSW1wbGVtZW50YXRpb24oKGNvbW1hbmQ6IHN0cmluZykgPT4ge1xuICAgICAgICBpZiAoY29tbWFuZC5pbmNsdWRlcygnZ3JlcCAtbicpKSB7XG4gICAgICAgICAgcmV0dXJuICcxOmNvbnN0IGRhdGE6IGFueSA9IHZhbHVlO1xcbjM6b3RoZXI6IGFueSA9IHNvbWV0aGluZztcXG43Om1vcmU6IGFueVtdOyc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlY29tbWVuZGF0aW9ucyA9IGF3YWl0IGFuYWx5c2lzVG9vbHMuZ2VuZXJhdGVNYW51YWxSZXZpZXdSZWNvbW1lbmRhdGlvbnMoKTtcblxuICAgICAgaWYgKHJlY29tbWVuZGF0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IGZpcnN0UmVjb21tZW5kYXRpb24gPSByZWNvbW1lbmRhdGlvbnNbMF07XG4gICAgICAgIGV4cGVjdChmaXJzdFJlY29tbWVuZGF0aW9uLnJlbGF0ZWRPY2N1cnJlbmNlcy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICAgICAgZXhwZWN0KGZpcnN0UmVjb21tZW5kYXRpb24ucmVsYXRlZE9jY3VycmVuY2VzLmxlbmd0aCkudG9CZUxlc3NUaGFuT3JFcXVhbCg1KTsgLy8gTGltaXRlZCB0byA1XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdnZW5lcmF0ZUNvbXByZWhlbnNpdmVSZXBvcnQnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBnZW5lcmF0ZSBjb21wcmVoZW5zaXZlIGFuYWx5c2lzIHJlcG9ydCcsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE1vY2sgYWxsIHRoZSByZXF1aXJlZCBkYXRhXG4gICAgICBtb2NrRXhlY1N5bmMubW9ja1JldHVyblZhbHVlKCdzcmMvdGVzdC50czoxOmNvbnN0IGRhdGE6IGFueSA9IHZhbHVlOycpO1xuICAgICAgbW9ja0ZzLnJlYWRGaWxlU3luYy5tb2NrUmV0dXJuVmFsdWUoJ2NvbnN0IGRhdGE6IGFueSA9IHZhbHVlOycpO1xuXG4gICAgICBjb25zdCByZXBvcnQgPSBhd2FpdCBhbmFseXNpc1Rvb2xzLmdlbmVyYXRlQ29tcHJlaGVuc2l2ZVJlcG9ydCgpO1xuXG4gICAgICBleHBlY3QocmVwb3J0LmlkKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHJlcG9ydC50aW1lc3RhbXApLnRvQmVJbnN0YW5jZU9mKERhdGUpO1xuICAgICAgZXhwZWN0KHJlcG9ydC5kb21haW5EaXN0cmlidXRpb24pLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QocmVwb3J0LmFjY3VyYWN5UmVwb3J0KS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHJlcG9ydC5zdWNjZXNzUmF0ZUFuYWx5c2lzKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHJlcG9ydC5tYW51YWxSZXZpZXdSZWNvbW1lbmRhdGlvbnMpLnRvQmVJbnN0YW5jZU9mKEFycmF5KTtcbiAgICAgIGV4cGVjdChyZXBvcnQuc3VtbWFyeSkudG9CZURlZmluZWQoKTtcblxuICAgICAgLy8gVmVyaWZ5IHN1bW1hcnkgZGF0YVxuICAgICAgZXhwZWN0KHJlcG9ydC5zdW1tYXJ5LnRvdGFsQW55VHlwZXMpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoMCk7XG4gICAgICBleHBlY3QocmVwb3J0LnN1bW1hcnkudW5pbnRlbnRpb25hbENvdW50KS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApO1xuICAgICAgZXhwZWN0KHJlcG9ydC5zdW1tYXJ5LmNsYXNzaWZpY2F0aW9uQWNjdXJhY3kpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoMCk7XG4gICAgICBleHBlY3QocmVwb3J0LnN1bW1hcnkuY3VycmVudFN1Y2Nlc3NSYXRlKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApO1xuICAgICAgZXhwZWN0KHJlcG9ydC5zdW1tYXJ5Lm1hbnVhbFJldmlld0Nhc2VzKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApO1xuICAgICAgZXhwZWN0KE9iamVjdC52YWx1ZXMoQ29kZURvbWFpbikpLnRvQ29udGFpbihyZXBvcnQuc3VtbWFyeS50b3BEb21haW4pO1xuICAgICAgZXhwZWN0KE9iamVjdC52YWx1ZXMoQW55VHlwZUNhdGVnb3J5KSkudG9Db250YWluKHJlcG9ydC5zdW1tYXJ5LnRvcENhdGVnb3J5KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgc2F2ZSByZXBvcnQgdG8gaGlzdG9yeScsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrUmV0dXJuVmFsdWUoJycpO1xuICAgICAgbW9ja0ZzLnJlYWRGaWxlU3luYy5tb2NrUmV0dXJuVmFsdWUoJycpO1xuXG4gICAgICBhd2FpdCBhbmFseXNpc1Rvb2xzLmdlbmVyYXRlQ29tcHJlaGVuc2l2ZVJlcG9ydCgpO1xuXG4gICAgICAvLyBWZXJpZnkgdGhhdCB3cml0ZUZpbGVTeW5jIHdhcyBjYWxsZWQgdG8gc2F2ZSB0aGUgaGlzdG9yeVxuICAgICAgZXhwZWN0KG1vY2tGcy53cml0ZUZpbGVTeW5jKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBmaWxlIHN5c3RlbSBlcnJvcnMgZ3JhY2VmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrUmV0dXJuVmFsdWUoJycpO1xuICAgICAgbW9ja0ZzLnJlYWRGaWxlU3luYy5tb2NrUmV0dXJuVmFsdWUoJycpO1xuICAgICAgbW9ja0ZzLndyaXRlRmlsZVN5bmMubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGaWxlIHN5c3RlbSBlcnJvcicpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFNob3VsZCBub3QgdGhyb3cgZXJyb3IgZXZlbiBpZiBzYXZpbmcgZmFpbHNcbiAgICAgIGNvbnN0IHJlcG9ydCA9IGF3YWl0IGFuYWx5c2lzVG9vbHMuZ2VuZXJhdGVDb21wcmVoZW5zaXZlUmVwb3J0KCk7XG4gICAgICBleHBlY3QocmVwb3J0KS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZXJyb3IgaGFuZGxpbmcnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZ3JlcCBjb21tYW5kIGZhaWx1cmVzIGdyYWNlZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrRXhlY1N5bmMubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb21tYW5kIGZhaWxlZCcpO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGRpc3RyaWJ1dGlvbiA9IGF3YWl0IGFuYWx5c2lzVG9vbHMuYW5hbHl6ZURvbWFpbkRpc3RyaWJ1dGlvbigpO1xuICAgICAgZXhwZWN0KGRpc3RyaWJ1dGlvbi50b3RhbEFueVR5cGVzKS50b0JlKDApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZmlsZSByZWFkaW5nIGZhaWx1cmVzIGdyYWNlZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrRXhlY1N5bmMubW9ja1JldHVyblZhbHVlKCdzcmMvdGVzdC50czoxOmNvbnN0IGRhdGE6IGFueSA9IHZhbHVlOycpO1xuICAgICAgbW9ja0ZzLnJlYWRGaWxlU3luYy5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZpbGUgbm90IGZvdW5kJyk7XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgZGlzdHJpYnV0aW9uID0gYXdhaXQgYW5hbHlzaXNUb29scy5hbmFseXplRG9tYWluRGlzdHJpYnV0aW9uKCk7XG4gICAgICBleHBlY3QoZGlzdHJpYnV0aW9uKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbWFsZm9ybWVkIGdyZXAgb3V0cHV0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tSZXR1cm5WYWx1ZSgnaW52YWxpZCBvdXRwdXQgZm9ybWF0Jyk7XG4gICAgICBtb2NrRnMucmVhZEZpbGVTeW5jLm1vY2tSZXR1cm5WYWx1ZSgnJyk7XG5cbiAgICAgIGNvbnN0IGRpc3RyaWJ1dGlvbiA9IGF3YWl0IGFuYWx5c2lzVG9vbHMuYW5hbHl6ZURvbWFpbkRpc3RyaWJ1dGlvbigpO1xuICAgICAgZXhwZWN0KGRpc3RyaWJ1dGlvbi50b3RhbEFueVR5cGVzKS50b0JlKDApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZGF0YSB2YWxpZGF0aW9uJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgdmFsaWRhdGUgcGVyY2VudGFnZSBjYWxjdWxhdGlvbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrRXhlY1N5bmMubW9ja1JldHVyblZhbHVlKGBcbnNyYy90ZXN0MS50czoxOmFueVxuc3JjL3Rlc3QyLnRzOjE6YW55XG5zcmMvdGVzdDMudHM6MTphbnlcbiAgICAgIGAudHJpbSgpKTtcbiAgICAgIG1vY2tGcy5yZWFkRmlsZVN5bmMubW9ja1JldHVyblZhbHVlKCdjb25zdCBkYXRhOiBhbnkgPSB2YWx1ZTsnKTtcblxuICAgICAgY29uc3QgZGlzdHJpYnV0aW9uID0gYXdhaXQgYW5hbHlzaXNUb29scy5hbmFseXplRG9tYWluRGlzdHJpYnV0aW9uKCk7XG5cbiAgICAgIC8vIEFsbCBwZXJjZW50YWdlcyBzaG91bGQgYWRkIHVwIHRvIDEwMCVcbiAgICAgIGNvbnN0IGRvbWFpblRvdGFsID0gZGlzdHJpYnV0aW9uLmJ5RG9tYWluLnJlZHVjZSgoc3VtLCBpdGVtKSA9PiBzdW0gKyBpdGVtLnBlcmNlbnRhZ2UsIDApO1xuICAgICAgY29uc3QgY2F0ZWdvcnlUb3RhbCA9IGRpc3RyaWJ1dGlvbi5ieUNhdGVnb3J5LnJlZHVjZSgoc3VtLCBpdGVtKSA9PiBzdW0gKyBpdGVtLnBlcmNlbnRhZ2UsIDApO1xuICAgICAgY29uc3QgaW50ZW50aW9uYWxUb3RhbCA9IGRpc3RyaWJ1dGlvbi5pbnRlbnRpb25hbFZzVW5pbnRlbnRpb25hbC5pbnRlbnRpb25hbC5wZXJjZW50YWdlICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3RyaWJ1dGlvbi5pbnRlbnRpb25hbFZzVW5pbnRlbnRpb25hbC51bmludGVudGlvbmFsLnBlcmNlbnRhZ2U7XG5cbiAgICAgIGV4cGVjdChkb21haW5Ub3RhbCkudG9CZUNsb3NlVG8oMTAwLCAxKTtcbiAgICAgIGV4cGVjdChjYXRlZ29yeVRvdGFsKS50b0JlQ2xvc2VUbygxMDAsIDEpO1xuICAgICAgZXhwZWN0KGludGVudGlvbmFsVG90YWwpLnRvQmVDbG9zZVRvKDEwMCwgMSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIGNvbmZpZGVuY2Ugc2NvcmVzIGFyZSB3aXRoaW4gdmFsaWQgcmFuZ2UnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrRXhlY1N5bmMubW9ja1JldHVyblZhbHVlKCdzcmMvdGVzdC50czoxOmNvbnN0IGRhdGE6IGFueSA9IHZhbHVlOycpO1xuICAgICAgbW9ja0ZzLnJlYWRGaWxlU3luYy5tb2NrUmV0dXJuVmFsdWUoJ2NvbnN0IGRhdGE6IGFueSA9IHZhbHVlOycpO1xuXG4gICAgICBjb25zdCByZXBvcnQgPSBhd2FpdCBhbmFseXNpc1Rvb2xzLmdlbmVyYXRlQ2xhc3NpZmljYXRpb25BY2N1cmFjeVJlcG9ydCgpO1xuXG4gICAgICBleHBlY3QocmVwb3J0LmF2ZXJhZ2VDb25maWRlbmNlKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApO1xuICAgICAgZXhwZWN0KHJlcG9ydC5hdmVyYWdlQ29uZmlkZW5jZSkudG9CZUxlc3NUaGFuT3JFcXVhbCgxKTtcblxuICAgICAgcmVwb3J0LmNvbmZpZGVuY2VEaXN0cmlidXRpb24uZm9yRWFjaChkaXN0ID0+IHtcbiAgICAgICAgZXhwZWN0KGRpc3QucGVyY2VudGFnZSkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgwKTtcbiAgICAgICAgZXhwZWN0KGRpc3QucGVyY2VudGFnZSkudG9CZUxlc3NUaGFuT3JFcXVhbCgxMDApO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIHN1Y2Nlc3MgcmF0ZXMgYXJlIHdpdGhpbiB2YWxpZCByYW5nZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGFuYWx5c2lzID0gYXdhaXQgYW5hbHlzaXNUb29scy5nZW5lcmF0ZVN1Y2Nlc3NSYXRlQW5hbHlzaXMoKTtcblxuICAgICAgZXhwZWN0KGFuYWx5c2lzLmN1cnJlbnRTdWNjZXNzUmF0ZSkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgwKTtcbiAgICAgIGV4cGVjdChhbmFseXNpcy5jdXJyZW50U3VjY2Vzc1JhdGUpLnRvQmVMZXNzVGhhbk9yRXF1YWwoMTAwKTtcblxuICAgICAgYW5hbHlzaXMuY2F0ZWdvcnlTdWNjZXNzUmF0ZXMuZm9yRWFjaChjYXRlZ29yeSA9PiB7XG4gICAgICAgIGV4cGVjdChjYXRlZ29yeS5zdWNjZXNzUmF0ZSkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgwKTtcbiAgICAgICAgZXhwZWN0KGNhdGVnb3J5LnN1Y2Nlc3NSYXRlKS50b0JlTGVzc1RoYW5PckVxdWFsKDEwMCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==