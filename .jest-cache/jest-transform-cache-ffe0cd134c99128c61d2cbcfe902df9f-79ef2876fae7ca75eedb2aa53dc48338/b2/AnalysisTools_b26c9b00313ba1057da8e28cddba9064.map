{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/unintentional-any-elimination/AnalysisTools.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/unintentional-any-elimination/AnalysisTools.ts"],"sourcesContent":["import { execSync } from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { AnyTypeClassifier } from './AnyTypeClassifier';\nimport { DomainContextAnalyzer } from './DomainContextAnalyzer';\nimport {\n    AnalysisMetrics,\n    AnalysisReport,\n    AnyTypeCategory,\n    AnyTypeClassification,\n    ClassificationAccuracyReport,\n    ClassificationContext,\n    CodeDomain,\n    DomainDistribution,\n    ManualReviewRecommendation,\n    SuccessRateAnalysis,\n    TrendingData\n} from './types';\n\n/**\n * Comprehensive analysis tools for unintentional any type elimination\n * Provides domain distribution analysis, classification accuracy reporting,\n * success rate analysis, and manual review recommendations\n */\nexport class AnalysisTools {\n  private classifier: AnyTypeClassifier;\n  private domainAnalyzer: DomainContextAnalyzer;\n  private analysisHistory: AnalysisReport[] = [];\n\n  constructor() {\n    this.classifier = new AnyTypeClassifier();\n    this.domainAnalyzer = new DomainContextAnalyzer();\n    this.loadAnalysisHistory();\n  }\n\n  /**\n   * Analyze current any type distribution by domain\n   */\n  async analyzeDomainDistribution(): Promise<DomainDistribution> {\n    console.log('Analyzing any type distribution by domain...');\n\n    const anyTypeOccurrences = await this.findAllAnyTypes();\n    const domainDistribution: Record<CodeDomain, number> = {\n      [CodeDomain.ASTROLOGICAL]: 0,\n      [CodeDomain.RECIPE]: 0,\n      [CodeDomain.CAMPAIGN]: 0,\n      [CodeDomain.INTELLIGENCE]: 0,\n      [CodeDomain.SERVICE]: 0,\n      [CodeDomain.COMPONENT]: 0,\n      [CodeDomain.UTILITY]: 0,\n      [CodeDomain.TEST]: 0\n    };\n\n    const categoryDistribution: Record<AnyTypeCategory, number> = {\n      [AnyTypeCategory.ERROR_HANDLING]: 0,\n      [AnyTypeCategory.EXTERNAL_API]: 0,\n      [AnyTypeCategory.TEST_MOCK]: 0,\n      [AnyTypeCategory.DYNAMIC_CONFIG]: 0,\n      [AnyTypeCategory.LEGACY_COMPATIBILITY]: 0,\n      [AnyTypeCategory.ARRAY_TYPE]: 0,\n      [AnyTypeCategory.RECORD_TYPE]: 0,\n      [AnyTypeCategory.FUNCTION_PARAM]: 0,\n      [AnyTypeCategory.RETURN_TYPE]: 0,\n      [AnyTypeCategory.TYPE_ASSERTION]: 0\n    };\n\n    const intentionalCount = { count: 0 };\n    const unintentionalCount = { count: 0 };\n\n    for (const occurrence of anyTypeOccurrences) {\n      const context = await this.createClassificationContext(occurrence);\n      const domainContext = await this.domainAnalyzer.analyzeDomain(context);\n      const classification = await this.classifier.classify(context);\n\n      // Count by domain\n      domainDistribution[domainContext.domain]++;\n\n      // Count by category\n      categoryDistribution[classification.category]++;\n\n      // Count by intentionality\n      if (classification.isIntentional) {\n        intentionalCount.count++;\n      } else {\n        unintentionalCount.count++;\n      }\n    }\n\n    const totalCount = anyTypeOccurrences.length;\n    const distribution: DomainDistribution = {\n      totalAnyTypes: totalCount,\n      byDomain: Object.entries(domainDistribution).map(([domain, count]) => ({\n        domain: domain as CodeDomain,\n        count,\n        percentage: totalCount > 0 ? (count / totalCount) * 100 : 0\n      })),\n      byCategory: Object.entries(categoryDistribution).map(([category, count]) => ({\n        category: category as AnyTypeCategory,\n        count,\n        percentage: totalCount > 0 ? (count / totalCount) * 100 : 0\n      })),\n      intentionalVsUnintentional: {\n        intentional: {\n          count: intentionalCount.count,\n          percentage: totalCount > 0 ? (intentionalCount.count / totalCount) * 100 : 0\n        },\n        unintentional: {\n          count: unintentionalCount.count,\n          percentage: totalCount > 0 ? (unintentionalCount.count / totalCount) * 100 : 0\n        }\n      },\n      analysisDate: new Date()\n    };\n\n    console.log(`Domain distribution analysis complete: ${totalCount} any types found`);\n    return distribution;\n  }\n\n  /**\n   * Implement classification accuracy reporting\n   */\n  async generateClassificationAccuracyReport(): Promise<ClassificationAccuracyReport> {\n    console.log('Generating classification accuracy report...');\n\n    const anyTypeOccurrences = await this.findAllAnyTypes();\n    const sampleSize = Math.min(100, anyTypeOccurrences.length); // Sample for accuracy testing\n    const sample = anyTypeOccurrences.slice(0, sampleSize);\n\n    let correctClassifications = 0;\n    let totalClassifications = 0;\n    const confidenceScores: number[] = [];\n    const categoryAccuracy: Record<AnyTypeCategory, { correct: number; total: number }> = {\n      [AnyTypeCategory.ERROR_HANDLING]: { correct: 0, total: 0 },\n      [AnyTypeCategory.EXTERNAL_API]: { correct: 0, total: 0 },\n      [AnyTypeCategory.TEST_MOCK]: { correct: 0, total: 0 },\n      [AnyTypeCategory.DYNAMIC_CONFIG]: { correct: 0, total: 0 },\n      [AnyTypeCategory.LEGACY_COMPATIBILITY]: { correct: 0, total: 0 },\n      [AnyTypeCategory.ARRAY_TYPE]: { correct: 0, total: 0 },\n      [AnyTypeCategory.RECORD_TYPE]: { correct: 0, total: 0 },\n      [AnyTypeCategory.FUNCTION_PARAM]: { correct: 0, total: 0 },\n      [AnyTypeCategory.RETURN_TYPE]: { correct: 0, total: 0 },\n      [AnyTypeCategory.TYPE_ASSERTION]: { correct: 0, total: 0 }\n    };\n\n    for (const occurrence of sample) {\n      const context = await this.createClassificationContext(occurrence);\n      const classification = await this.classifier.classify(context);\n\n      totalClassifications++;\n      confidenceScores.push(classification.confidence);\n      categoryAccuracy[classification.category].total++;\n\n      // Validate classification accuracy using heuristics\n      const isAccurate = await this.validateClassificationAccuracy(context, classification);\n      if (isAccurate) {\n        correctClassifications++;\n        categoryAccuracy[classification.category].correct++;\n      }\n    }\n\n    const overallAccuracy = totalClassifications > 0 ? (correctClassifications / totalClassifications) * 100 : 0;\n    const averageConfidence = confidenceScores.length > 0\n      ? confidenceScores.reduce((sum, score) => sum + score, 0) / confidenceScores.length\n      : 0;\n\n    const report: ClassificationAccuracyReport = {\n      overallAccuracy,\n      averageConfidence,\n      sampleSize,\n      categoryAccuracy: Object.entries(categoryAccuracy).map(([category, stats]) => ({\n        category: category as AnyTypeCategory,\n        accuracy: stats.total > 0 ? (stats.correct / stats.total) * 100 : 0,\n        sampleCount: stats.total\n      })),\n      confidenceDistribution: this.calculateConfidenceDistribution(confidenceScores),\n      reportDate: new Date()\n    };\n\n    console.log(`Classification accuracy report complete: ${overallAccuracy.toFixed(1)}% accuracy`);\n    return report;\n  }\n\n  /**\n   * Add success rate analysis and trending\n   */\n  async generateSuccessRateAnalysis(): Promise<SuccessRateAnalysis> {\n    console.log('Generating success rate analysis and trending...');\n\n    const currentMetrics = await this.getCurrentMetrics();\n    const historicalData = this.getHistoricalTrendingData();\n\n    // Calculate success rates by category\n    const categorySuccessRates = await this.calculateCategorySuccessRates();\n\n    // Calculate trending data\n    const trendingData = this.calculateTrendingMetrics(historicalData);\n\n    const analysis: SuccessRateAnalysis = {\n      currentSuccessRate: currentMetrics.overallSuccessRate,\n      targetSuccessRate: 85, // Target 85% success rate\n      improvementNeeded: Math.max(0, 85 - currentMetrics.overallSuccessRate),\n      categorySuccessRates,\n      trendingData,\n      projectedCompletion: this.calculateProjectedCompletion(trendingData),\n      recommendations: await this.generateSuccessRateRecommendations(categorySuccessRates),\n      analysisDate: new Date()\n    };\n\n    console.log(`Success rate analysis complete: ${currentMetrics.overallSuccessRate.toFixed(1)}% current success rate`);\n    return analysis;\n  }\n\n  /**\n   * Create recommendations for manual review cases\n   */\n  async generateManualReviewRecommendations(): Promise<ManualReviewRecommendation[]> {\n    console.log('Generating manual review recommendations...');\n\n    const anyTypeOccurrences = await this.findAllAnyTypes();\n    const recommendations: ManualReviewRecommendation[] = [];\n\n    for (const occurrence of anyTypeOccurrences) {\n      const context = await this.createClassificationContext(occurrence);\n      const classification = await this.classifier.classify(context);\n\n      // Identify cases that need manual review\n      if (this.requiresManualReview(classification, context)) {\n        const recommendation: ManualReviewRecommendation = {\n          filePath: occurrence.filePath,\n          lineNumber: occurrence.lineNumber,\n          codeSnippet: occurrence.codeSnippet,\n          classification,\n          reviewReason: this.getReviewReason(classification, context),\n          priority: this.calculateReviewPriority(classification, context),\n          suggestedActions: await this.generateSuggestedActions(classification, context),\n          estimatedEffort: this.estimateReviewEffort(classification, context),\n          relatedOccurrences: await this.findRelatedOccurrences(occurrence)\n        };\n\n        recommendations.push(recommendation);\n      }\n    }\n\n    // Sort by priority (high to low)\n    recommendations.sort((a, b) => {\n      const priorityOrder = { high: 3, medium: 2, low: 1 };\n      return priorityOrder[b.priority] - priorityOrder[a.priority];\n    });\n\n    console.log(`Manual review recommendations complete: ${recommendations.length} cases identified`);\n    return recommendations;\n  }\n\n  /**\n   * Generate comprehensive analysis report\n   */\n  async generateComprehensiveReport(): Promise<AnalysisReport> {\n    console.log('Generating comprehensive analysis report...');\n\n    const [\n      domainDistribution,\n      accuracyReport,\n      successRateAnalysis,\n      manualReviewRecommendations\n    ] = await Promise.all([\n      this.analyzeDomainDistribution(),\n      this.generateClassificationAccuracyReport(),\n      this.generateSuccessRateAnalysis(),\n      this.generateManualReviewRecommendations()\n    ]);\n\n    const report: AnalysisReport = {\n      id: `analysis-${Date.now()}`,\n      timestamp: new Date(),\n      domainDistribution,\n      accuracyReport,\n      successRateAnalysis,\n      manualReviewRecommendations,\n      summary: {\n        totalAnyTypes: domainDistribution.totalAnyTypes,\n        unintentionalCount: domainDistribution.intentionalVsUnintentional.unintentional.count,\n        classificationAccuracy: accuracyReport.overallAccuracy,\n        currentSuccessRate: successRateAnalysis.currentSuccessRate,\n        manualReviewCases: manualReviewRecommendations.length,\n        topDomain: this.getTopDomain(domainDistribution),\n        topCategory: this.getTopCategory(domainDistribution)\n      }\n    };\n\n    // Save report to history\n    this.analysisHistory.push(report);\n    await this.saveAnalysisHistory();\n\n    console.log('Comprehensive analysis report generated successfully');\n    return report;\n  }\n\n  // Private helper methods\n\n  private async findAllAnyTypes(): Promise<Array<{ filePath: string; lineNumber: number; codeSnippet: string }>> {\n    const occurrences: Array<{ filePath: string; lineNumber: number; codeSnippet: string }> = [];\n\n    try {\n      // Use grep to find all explicit any types\n      const grepCommand = `grep -rn \"\\\\bany\\\\b\" src --include=\"*.ts\" --include=\"*.tsx\" | head -1000`;\n      const output = execSync(grepCommand, { encoding: 'utf8', stdio: 'pipe' });\n\n      const lines = output.trim().split('\\n').filter(line => line.trim());\n\n      for (const line of lines) {\n        const match = line.match(/^([^:]+):(\\d+):(.+)$/);\n        if (match) {\n          const [, filePath, lineNumber, codeSnippet] = match;\n          occurrences.push({\n            filePath: filePath.trim(),\n            lineNumber: parseInt(lineNumber),\n            codeSnippet: codeSnippet.trim()\n          });\n        }\n      }\n    } catch (error) {\n      console.warn('Error finding any types:', error);\n    }\n\n    return occurrences;\n  }\n\n  private async createClassificationContext(occurrence: { filePath: string; lineNumber: number; codeSnippet: string }): Promise<ClassificationContext> {\n    const surroundingLines = await this.getSurroundingLines(occurrence.filePath, occurrence.lineNumber);\n    const hasExistingComment = this.hasExistingComment(surroundingLines);\n    const domainContext = await this.domainAnalyzer.analyzeDomain({\n      filePath: occurrence.filePath,\n      lineNumber: occurrence.lineNumber,\n      codeSnippet: occurrence.codeSnippet,\n      surroundingLines,\n      hasExistingComment,\n      isInTestFile: occurrence.filePath.includes('.test.') || occurrence.filePath.includes('__tests__'),\n      domainContext: { domain: CodeDomain.UTILITY, intentionalityHints: [], suggestedTypes: [], preservationReasons: [] }\n    });\n\n    return {\n      filePath: occurrence.filePath,\n      lineNumber: occurrence.lineNumber,\n      codeSnippet: occurrence.codeSnippet,\n      surroundingLines,\n      hasExistingComment,\n      existingComment: hasExistingComment ? this.extractComment(surroundingLines) : undefined,\n      isInTestFile: occurrence.filePath.includes('.test.') || occurrence.filePath.includes('__tests__'),\n      domainContext\n    };\n  }\n\n  private async getSurroundingLines(filePath: string, lineNumber: number): Promise<string[]> {\n    try {\n      const content = fs.readFileSync(filePath, 'utf8');\n      const lines = content.split('\\n');\n      const start = Math.max(0, lineNumber - 3);\n      const end = Math.min(lines.length, lineNumber + 2);\n      return lines.slice(start, end);\n    } catch (error) {\n      return [];\n    }\n  }\n\n  private hasExistingComment(surroundingLines: string[]): boolean {\n    return surroundingLines.some(line =>\n      line.trim().startsWith('//') ||\n      line.trim().startsWith('/*') ||\n      line.trim().startsWith('*')\n    );\n  }\n\n  private extractComment(surroundingLines: string[]): string {\n    const commentLines = surroundingLines.filter(line =>\n      line.trim().startsWith('//') ||\n      line.trim().startsWith('/*') ||\n      line.trim().startsWith('*')\n    );\n    return commentLines.join(' ').trim();\n  }\n\n  private async validateClassificationAccuracy(context: ClassificationContext, classification: AnyTypeClassification): Promise<boolean> {\n    // Heuristic validation based on context\n\n    // Error handling should be in catch blocks\n    if (classification.category === AnyTypeCategory.ERROR_HANDLING) {\n      return context.codeSnippet.includes('catch') || context.codeSnippet.includes('error');\n    }\n\n    // Test mocks should be in test files\n    if (classification.category === AnyTypeCategory.TEST_MOCK) {\n      return context.isInTestFile;\n    }\n\n    // Array types should contain array syntax\n    if (classification.category === AnyTypeCategory.ARRAY_TYPE) {\n      return context.codeSnippet.includes('any[]') || context.codeSnippet.includes('Array<any>');\n    }\n\n    // Record types should contain Record syntax\n    if (classification.category === AnyTypeCategory.RECORD_TYPE) {\n      return context.codeSnippet.includes('Record<') && context.codeSnippet.includes('any');\n    }\n\n    // Default to accurate for other categories\n    return true;\n  }\n\n  private calculateConfidenceDistribution(scores: number[]): { range: string; count: number; percentage: number }[] {\n    const ranges = [\n      { min: 0.9, max: 1.0, label: '90-100%' },\n      { min: 0.8, max: 0.9, label: '80-90%' },\n      { min: 0.7, max: 0.8, label: '70-80%' },\n      { min: 0.6, max: 0.7, label: '60-70%' },\n      { min: 0.0, max: 0.6, label: '0-60%' }\n    ];\n\n    return ranges.map(range => {\n      const count = scores.filter(score => score >= range.min && score < range.max).length;\n      return {\n        range: range.label,\n        count,\n        percentage: scores.length > 0 ? (count / scores.length) * 100 : 0\n      };\n    });\n  }\n\n  private async getCurrentMetrics(): Promise<AnalysisMetrics> {\n    // Simulate current metrics - in real implementation, this would fetch from actual data\n    return {\n      overallSuccessRate: 78.5,\n      totalProcessed: 1250,\n      successfulReplacements: 982,\n      failedReplacements: 268,\n      averageConfidence: 0.82\n    };\n  }\n\n  private getHistoricalTrendingData(): TrendingData[] {\n    // Return last 30 days of trending data from history\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n    return this.analysisHistory\n      .filter(report => report.timestamp >= thirtyDaysAgo)\n      .map(report => ({\n        date: report.timestamp,\n        successRate: report.successRateAnalysis.currentSuccessRate,\n        totalAnyTypes: report.domainDistribution.totalAnyTypes,\n        unintentionalCount: report.domainDistribution.intentionalVsUnintentional.unintentional.count,\n        classificationAccuracy: report.accuracyReport.overallAccuracy\n      }));\n  }\n\n  private async calculateCategorySuccessRates(): Promise<Array<{ category: AnyTypeCategory; successRate: number; sampleSize: number }>> {\n    // Simulate category success rates - in real implementation, this would calculate from actual data\n    return [\n      { category: AnyTypeCategory.ARRAY_TYPE, successRate: 95.2, sampleSize: 156 },\n      { category: AnyTypeCategory.RECORD_TYPE, successRate: 87.3, sampleSize: 203 },\n      { category: AnyTypeCategory.FUNCTION_PARAM, successRate: 65.8, sampleSize: 342 },\n      { category: AnyTypeCategory.RETURN_TYPE, successRate: 72.1, sampleSize: 189 },\n      { category: AnyTypeCategory.TYPE_ASSERTION, successRate: 81.4, sampleSize: 127 },\n      { category: AnyTypeCategory.ERROR_HANDLING, successRate: 45.6, sampleSize: 98 },\n      { category: AnyTypeCategory.EXTERNAL_API, successRate: 52.3, sampleSize: 76 },\n      { category: AnyTypeCategory.TEST_MOCK, successRate: 89.7, sampleSize: 134 },\n      { category: AnyTypeCategory.DYNAMIC_CONFIG, successRate: 38.9, sampleSize: 67 },\n      { category: AnyTypeCategory.LEGACY_COMPATIBILITY, successRate: 41.2, sampleSize: 45 }\n    ];\n  }\n\n  private calculateTrendingMetrics(historicalData: TrendingData[]): TrendingData {\n    if (historicalData.length === 0) {\n      return {\n        date: new Date(),\n        successRate: 0,\n        totalAnyTypes: 0,\n        unintentionalCount: 0,\n        classificationAccuracy: 0\n      };\n    }\n\n    const latest = historicalData[historicalData.length - 1];\n    const previous = historicalData.length > 1 ? historicalData[historicalData.length - 2] : latest;\n\n    return {\n      date: latest.date,\n      successRate: latest.successRate,\n      totalAnyTypes: latest.totalAnyTypes,\n      unintentionalCount: latest.unintentionalCount,\n      classificationAccuracy: latest.classificationAccuracy,\n      trends: {\n        successRateChange: latest.successRate - previous.successRate,\n        totalAnyTypesChange: latest.totalAnyTypes - previous.totalAnyTypes,\n        unintentionalCountChange: latest.unintentionalCount - previous.unintentionalCount,\n        classificationAccuracyChange: latest.classificationAccuracy - previous.classificationAccuracy\n      }\n    };\n  }\n\n  private calculateProjectedCompletion(trendingData: TrendingData): Date {\n    // Simple linear projection based on current trend\n    const currentRate = trendingData.successRate;\n    const targetRate = 85;\n    const rateChange = trendingData.trends?.successRateChange || 0.5; // Default 0.5% improvement per analysis\n\n    if (rateChange <= 0 || currentRate >= targetRate) {\n      const futureDate = new Date();\n      futureDate.setDate(futureDate.getDate() + 30); // Default 30 days if no improvement\n      return futureDate;\n    }\n\n    const daysNeeded = Math.ceil((targetRate - currentRate) / rateChange);\n    const projectedDate = new Date();\n    projectedDate.setDate(projectedDate.getDate() + daysNeeded);\n\n    return projectedDate;\n  }\n\n  private async generateSuccessRateRecommendations(categorySuccessRates: Array<{ category: AnyTypeCategory; successRate: number; sampleSize: number }>): Promise<string[]> {\n    const recommendations: string[] = [];\n\n    // Find categories with low success rates\n    const lowSuccessCategories = categorySuccessRates.filter(cat => cat.successRate < 70);\n\n    for (const category of lowSuccessCategories) {\n      switch (category.category) {\n        case AnyTypeCategory.FUNCTION_PARAM:\n          recommendations.push('Focus on improving function parameter type inference algorithms');\n          break;\n        case AnyTypeCategory.RETURN_TYPE:\n          recommendations.push('Enhance return type analysis with better context understanding');\n          break;\n        case AnyTypeCategory.ERROR_HANDLING:\n          recommendations.push('Consider preserving error handling any types as intentional');\n          break;\n        case AnyTypeCategory.EXTERNAL_API:\n          recommendations.push('Improve external API response type detection');\n          break;\n        case AnyTypeCategory.DYNAMIC_CONFIG:\n          recommendations.push('Review dynamic configuration patterns for better type safety');\n          break;\n        case AnyTypeCategory.LEGACY_COMPATIBILITY:\n          recommendations.push('Evaluate legacy compatibility requirements vs type safety benefits');\n          break;\n      }\n    }\n\n    // Find categories with high success rates to leverage\n    const highSuccessCategories = categorySuccessRates.filter(cat => cat.successRate > 85);\n\n    if (highSuccessCategories.length > 0) {\n      recommendations.push(`Prioritize ${highSuccessCategories.map(cat => cat.category).join(', ')} categories for quick wins`);\n    }\n\n    return recommendations;\n  }\n\n  private requiresManualReview(classification: AnyTypeClassification, context: ClassificationContext): boolean {\n    // Low confidence classifications need manual review\n    if (classification.confidence < 0.7) {\n      return true;\n    }\n\n    // Complex domain contexts need manual review\n    if (context.domainContext.intentionalityHints.length > 2) {\n      return true;\n    }\n\n    // Conflicting signals need manual review\n    if (classification.isIntentional && classification.suggestedReplacement) {\n      return true;\n    }\n\n    // High-risk categories need manual review\n    const highRiskCategories = [\n      AnyTypeCategory.EXTERNAL_API,\n      AnyTypeCategory.DYNAMIC_CONFIG,\n      AnyTypeCategory.LEGACY_COMPATIBILITY\n    ];\n\n    return highRiskCategories.includes(classification.category);\n  }\n\n  private getReviewReason(classification: AnyTypeClassification, context: ClassificationContext): string {\n    if (classification.confidence < 0.7) {\n      return `Low classification confidence (${(classification.confidence * 100).toFixed(1)}%)`;\n    }\n\n    if (context.domainContext.intentionalityHints.length > 2) {\n      return 'Complex domain context with multiple intentionality hints';\n    }\n\n    if (classification.isIntentional && classification.suggestedReplacement) {\n      return 'Conflicting signals: classified as intentional but has suggested replacement';\n    }\n\n    return `High-risk category: ${classification.category}`;\n  }\n\n  private calculateReviewPriority(classification: AnyTypeClassification, context: ClassificationContext): 'high' | 'medium' | 'low' {\n    // High priority: Low confidence or conflicting signals\n    if (classification.confidence < 0.6 || (classification.isIntentional && classification.suggestedReplacement)) {\n      return 'high';\n    }\n\n    // Medium priority: Moderate confidence or complex context\n    if (classification.confidence < 0.8 || context.domainContext.intentionalityHints.length > 1) {\n      return 'medium';\n    }\n\n    // Low priority: High confidence, simple cases\n    return 'low';\n  }\n\n  private async generateSuggestedActions(classification: AnyTypeClassification, context: ClassificationContext): Promise<string[]> {\n    const actions: string[] = [];\n\n    if (classification.confidence < 0.7) {\n      actions.push('Review classification logic and add more context');\n    }\n\n    if (classification.suggestedReplacement) {\n      actions.push(`Consider replacing with: ${classification.suggestedReplacement}`);\n    }\n\n    if (!classification.isIntentional) {\n      actions.push('Attempt automated replacement with safety validation');\n    } else {\n      actions.push('Add documentation explaining why any type is necessary');\n    }\n\n    if (context.domainContext.suggestedTypes.length > 0) {\n      actions.push(`Consider domain-specific types: ${context.domainContext.suggestedTypes.join(', ')}`);\n    }\n\n    return actions;\n  }\n\n  private estimateReviewEffort(classification: AnyTypeClassification, context: ClassificationContext): 'low' | 'medium' | 'high' {\n    // High effort: Complex domain context or low confidence\n    if (classification.confidence < 0.6 || context.domainContext.intentionalityHints.length > 2) {\n      return 'high';\n    }\n\n    // Medium effort: Moderate complexity\n    if (classification.confidence < 0.8 || context.domainContext.intentionalityHints.length > 0) {\n      return 'medium';\n    }\n\n    // Low effort: Simple cases\n    return 'low';\n  }\n\n  private async findRelatedOccurrences(occurrence: { filePath: string; lineNumber: number; codeSnippet: string }): Promise<Array<{ filePath: string; lineNumber: number }>> {\n    // Find other any types in the same file\n    const relatedOccurrences: Array<{ filePath: string; lineNumber: number }> = [];\n\n    try {\n      const grepCommand = `grep -n \"\\\\bany\\\\b\" \"${occurrence.filePath}\"`;\n      const output = execSync(grepCommand, { encoding: 'utf8', stdio: 'pipe' });\n\n      const lines = output.trim().split('\\n').filter(line => line.trim());\n\n      for (const line of lines) {\n        const match = line.match(/^(\\d+):(.+)$/);\n        if (match) {\n          const lineNumber = parseInt(match[1]);\n          if (lineNumber !== occurrence.lineNumber) {\n            relatedOccurrences.push({\n              filePath: occurrence.filePath,\n              lineNumber\n            });\n          }\n        }\n      }\n    } catch (error) {\n      // No related occurrences found\n    }\n\n    return relatedOccurrences.slice(0, 5); // Limit to 5 related occurrences\n  }\n\n  private getTopDomain(distribution: DomainDistribution): CodeDomain {\n    const topDomain = distribution.byDomain.reduce((max, current) =>\n      current.count > max.count ? current : max\n    );\n    return topDomain.domain;\n  }\n\n  private getTopCategory(distribution: DomainDistribution): AnyTypeCategory {\n    const topCategory = distribution.byCategory.reduce((max, current) =>\n      current.count > max.count ? current : max\n    );\n    return topCategory.category;\n  }\n\n  private loadAnalysisHistory(): void {\n    try {\n      const historyPath = path.join(process.cwd(), '.kiro', 'campaign-reports', 'unintentional-any-analysis-history.json');\n      if (fs.existsSync(historyPath)) {\n        const historyData = fs.readFileSync(historyPath, 'utf8');\n        this.analysisHistory = JSON.parse(historyData);\n      }\n    } catch (error) {\n      console.warn('Could not load analysis history:', error);\n      this.analysisHistory = [];\n    }\n  }\n\n  private async saveAnalysisHistory(): Promise<void> {\n    try {\n      const historyDir = path.join(process.cwd(), '.kiro', 'campaign-reports');\n      if (!fs.existsSync(historyDir)) {\n        fs.mkdirSync(historyDir, { recursive: true });\n      }\n\n      const historyPath = path.join(historyDir, 'unintentional-any-analysis-history.json');\n      fs.writeFileSync(historyPath, JSON.stringify(this.analysisHistory, null, 2));\n    } catch (error) {\n      console.warn('Could not save analysis history:', error);\n    }\n  }\n}\n"],"version":3}