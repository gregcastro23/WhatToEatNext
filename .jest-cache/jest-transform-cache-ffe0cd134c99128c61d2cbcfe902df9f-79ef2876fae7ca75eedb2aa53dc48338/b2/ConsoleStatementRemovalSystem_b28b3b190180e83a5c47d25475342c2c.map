{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/ConsoleStatementRemovalSystem.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/ConsoleStatementRemovalSystem.ts"],"sourcesContent":["/**\n * ConsoleStatementRemovalSystem.ts\n *\n * Phase 2.3 Implementation - Console Statement Removal System\n * Integration for scripts/lint-fixes/fix-console-statements-only.js\n *\n * Features:\n * - Dry-run validation before console statement removal\n * - Selective removal system preserving debug-critical statements\n * - Integration with existing console statement removal script\n * - Safety protocols with git stash management\n * - Build validation after removal\n */\n\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nexport interface ConsoleRemovalConfig {\n  maxFiles: number;\n  dryRun: boolean;\n  autoFix: boolean;\n  preserveDebugCritical: boolean;\n  enableGitStash: boolean;\n  buildValidation: boolean;\n  batchSize: number;\n  selectiveRemoval: boolean;\n}\n\nexport interface ConsoleRemovalResult {\n  success: boolean;\n  filesProcessed: number;\n  consoleStatementsRemoved: number;\n  consoleStatementsPreserved: number;\n  buildTime: number;\n  errors: string[];\n  warnings: string[];\n  preservedFiles: string[];\n}\n\nexport interface BatchRemovalResult {\n  totalBatches: number;\n  successfulBatches: number;\n  failedBatches: number;\n  totalFilesProcessed: number;\n  totalConsoleStatementsProcessed: number;\n  averageBuildTime: number;\n  errors: string[];\n  preservedCriticalStatements: number;\n}\n\nexport interface ConsoleStatement {\n  file: string;\n  line: number;\n  column: number;\n  type: 'log' | 'warn' | 'error' | 'info' | 'debug';\n  content: string;\n  context: string;\n  isCritical: boolean;\n  shouldPreserve: boolean;\n}\n\nexport class ConsoleStatementRemovalSystem {\n  private scriptPath: string;\n  private metricsFile: string;\n  private config: ConsoleRemovalConfig;\n\n  constructor(config: Partial<ConsoleRemovalConfig> = {}) {\n    this.scriptPath = path.join(\n      process.cwd(),\n      'scripts/lint-fixes/fix-console-statements-only.js'\n    );\n    this.metricsFile = path.join(\n      process.cwd(),\n      '.console-removal-metrics.json'\n    );\n\n    this.config = {\n      maxFiles: 10,\n      dryRun: true,\n      autoFix: false,\n      preserveDebugCritical: true,\n      enableGitStash: true,\n      buildValidation: true,\n      batchSize: 8,\n      selectiveRemoval: true,\n      ...config,\n    };\n  }\n\n  /**\n   * Execute console statement removal with safety protocols\n   */\n  async executeRemoval(): Promise<ConsoleRemovalResult> {\n    console.log('🔇 Starting Console Statement Removal System...');\n\n    try {\n      // Pre-execution validation\n      await this.validatePreConditions();\n\n      // Analyze console statements before removal\n      const consoleAnalysis = await this.analyzeConsoleStatements();\n\n      // Create safety checkpoint if enabled\n      let stashId: string | null = null;\n      if (this.config.enableGitStash) {\n        stashId = await this.createSafetyStash();\n      }\n\n      // Execute the removal\n      const result = await this.executeScript(consoleAnalysis);\n\n      // Post-execution validation\n      if (this.config.buildValidation && result.success) {\n        const buildValid = await this.validateBuild();\n        if (!buildValid) {\n          result.success = false;\n          result.errors.push('Build validation failed after console removal');\n\n          // Rollback if build fails\n          if (stashId) {\n            await this.rollbackFromStash(stashId);\n          }\n        }\n      }\n\n      // Save metrics\n      await this.saveMetrics(result);\n\n      return result;\n    } catch (error) {\n      console.error('❌ Console statement removal failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Execute batch processing for large-scale console removal\n   */\n  async executeBatchRemoval(totalFiles?: number): Promise<BatchRemovalResult> {\n    console.log(\n      '⚡ Starting batch processing for console statement removal...'\n    );\n\n    const batchResult: BatchRemovalResult = {\n      totalBatches: 0,\n      successfulBatches: 0,\n      failedBatches: 0,\n      totalFilesProcessed: 0,\n      totalConsoleStatementsProcessed: 0,\n      averageBuildTime: 0,\n      errors: [],\n      preservedCriticalStatements: 0,\n    };\n\n    try {\n      // Determine number of batches\n      const estimatedFiles =\n        totalFiles || (await this.estimateFilesWithConsoleStatements());\n      const batchCount = Math.ceil(estimatedFiles / this.config.batchSize);\n      batchResult.totalBatches = batchCount;\n\n      console.log(\n        `📊 Processing ${estimatedFiles} files in ${batchCount} batches of ${this.config.batchSize} files each`\n      );\n\n      const buildTimes: number[] = [];\n\n      // Process each batch\n      for (let i = 0; i < batchCount; i++) {\n        console.log(`\\n🔄 Processing batch ${i + 1}/${batchCount}...`);\n\n        try {\n          const batchConfig = {\n            ...this.config,\n            maxFiles: this.config.batchSize,\n          };\n\n          const batchSystem = new ConsoleStatementRemovalSystem(batchConfig);\n          const result = await batchSystem.executeRemoval();\n\n          if (result.success) {\n            batchResult.successfulBatches++;\n            batchResult.totalFilesProcessed += result.filesProcessed;\n            batchResult.totalConsoleStatementsProcessed +=\n              result.consoleStatementsRemoved;\n            batchResult.preservedCriticalStatements +=\n              result.consoleStatementsPreserved;\n            buildTimes.push(result.buildTime);\n          } else {\n            batchResult.failedBatches++;\n            batchResult.errors.push(\n              `Batch ${i + 1} failed: ${result.errors.join(', ')}`\n            );\n          }\n\n          // Safety pause between batches\n          if (i < batchCount - 1) {\n            console.log('⏸️ Pausing 2 seconds between batches for safety...');\n            await this.sleep(2000);\n          }\n        } catch (error) {\n          batchResult.failedBatches++;\n          batchResult.errors.push(`Batch ${i + 1} error: ${error}`);\n          console.error(`❌ Batch ${i + 1} failed:`, error);\n        }\n      }\n\n      // Calculate averages\n      if (buildTimes.length > 0) {\n        batchResult.averageBuildTime =\n          buildTimes.reduce((a, b) => a + b, 0) / buildTimes.length;\n      }\n\n      console.log(\n        `\\n✅ Batch processing completed: ${batchResult.successfulBatches}/${batchResult.totalBatches} batches successful`\n      );\n\n      return batchResult;\n    } catch (error) {\n      console.error('❌ Batch processing failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Analyze console statements to identify critical ones\n   */\n  async analyzeConsoleStatements(): Promise<ConsoleStatement[]> {\n    console.log('🔍 Analyzing console statements for critical preservation...');\n\n    const statements: ConsoleStatement[] = [];\n    const srcDir = path.join(process.cwd(), 'src');\n    const files = this.getAllSourceFiles(srcDir);\n\n    for (const file of files) {\n      try {\n        const content = fs.readFileSync(file, 'utf-8');\n        const fileStatements = this.analyzeFileConsoleStatements(file, content);\n        statements.push(...fileStatements);\n      } catch (error) {\n        console.warn(`⚠️ Could not analyze file ${file}:`, error);\n      }\n    }\n\n    const criticalCount = statements.filter(s => s.isCritical).length;\n    const totalCount = statements.length;\n\n    console.log(\n      `📊 Found ${totalCount} console statements, ${criticalCount} marked as critical`\n    );\n\n    return statements;\n  }\n\n  /**\n   * Analyze console statements in a single file\n   */\n  private analyzeFileConsoleStatements(\n    filePath: string,\n    content: string\n  ): ConsoleStatement[] {\n    const statements: ConsoleStatement[] = [];\n    const lines = content.split('\\n');\n\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i];\n      const lineNumber = i + 1;\n\n      // Match console statements\n      const consoleMatches = line.matchAll(\n        /console\\.(log|warn|error|info|debug)\\s*\\([^)]*\\)/g\n      );\n\n      for (const match of consoleMatches) {\n        const type = match[1] as 'log' | 'warn' | 'error' | 'info' | 'debug';\n        const column = match.index! + 1;\n        const content = match[0];\n\n        // Get context (surrounding lines)\n        const contextStart = Math.max(0, i - 2);\n        const contextEnd = Math.min(lines.length - 1, i + 2);\n        const context = lines.slice(contextStart, contextEnd + 1).join('\\n');\n\n        // Determine if critical\n        const isCritical = this.isConsoleStatementCritical(\n          filePath,\n          content,\n          context,\n          type\n        );\n        const shouldPreserve = this.config.preserveDebugCritical && isCritical;\n\n        statements.push({\n          file: filePath,\n          line: lineNumber,\n          column,\n          type,\n          content,\n          context,\n          isCritical,\n          shouldPreserve,\n        });\n      }\n    }\n\n    return statements;\n  }\n\n  /**\n   * Determine if a console statement is critical and should be preserved\n   */\n  private isConsoleStatementCritical(\n    filePath: string,\n    content: string,\n    context: string,\n    type: string\n  ): boolean {\n    // Always preserve error statements\n    if (type === 'error') {\n      return true;\n    }\n\n    // Preserve statements in debug/test files\n    const debugFiles = ['debug', 'test', 'spec', '.test.', '.spec.', 'logger'];\n    if (debugFiles.some(pattern => filePath.toLowerCase().includes(pattern))) {\n      return true;\n    }\n\n    // Preserve statements with error handling context\n    const errorHandlingPatterns = [\n      /try\\s*{[\\s\\S]*?catch/i,\n      /catch\\s*\\(/i,\n      /error/i,\n      /exception/i,\n      /fail/i,\n      /throw/i,\n    ];\n\n    if (errorHandlingPatterns.some(pattern => pattern.test(context))) {\n      return true;\n    }\n\n    // Preserve statements with important debugging information\n    const importantPatterns = [\n      /api/i,\n      /request/i,\n      /response/i,\n      /auth/i,\n      /login/i,\n      /security/i,\n      /critical/i,\n      /important/i,\n    ];\n\n    if (importantPatterns.some(pattern => pattern.test(content))) {\n      return true;\n    }\n\n    // Preserve warn statements in production code\n    if (type === 'warn' && !filePath.includes('test')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Get all source files recursively\n   */\n  private getAllSourceFiles(dir: string): string[] {\n    const files: string[] = [];\n\n    if (!fs.existsSync(dir)) {\n      return files;\n    }\n\n    const entries = fs.readdirSync(dir, { withFileTypes: true });\n\n    for (const entry of entries) {\n      const fullPath = path.join(dir, entry.name);\n\n      if (\n        entry.isDirectory() &&\n        !entry.name.startsWith('.') &&\n        entry.name !== 'node_modules'\n      ) {\n        files.push(...this.getAllSourceFiles(fullPath));\n      } else if (entry.isFile() && /\\.(ts|tsx|js|jsx)$/.test(entry.name)) {\n        files.push(fullPath);\n      }\n    }\n\n    return files;\n  }\n\n  /**\n   * Validate pre-conditions before execution\n   */\n  private async validatePreConditions(): Promise<void> {\n    // Check if script exists\n    if (!fs.existsSync(this.scriptPath)) {\n      throw new Error(`Console removal script not found: ${this.scriptPath}`);\n    }\n\n    // Check git status if required\n    if (this.config.enableGitStash) {\n      try {\n        const gitStatus = execSync('git status --porcelain', {\n          encoding: 'utf-8',\n        });\n        if (gitStatus.trim() && !this.config.autoFix) {\n          console.warn(\n            '⚠️ Git working directory has uncommitted changes. Consider using --auto-fix or commit changes first.'\n          );\n        }\n      } catch (error) {\n        console.warn('⚠️ Could not check git status:', error);\n      }\n    }\n  }\n\n  /**\n   * Create safety stash before execution\n   */\n  private async createSafetyStash(): Promise<string> {\n    try {\n      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n      const stashName = `console-removal-${timestamp}`;\n\n      execSync(`git stash push -m \"${stashName}\"`, { encoding: 'utf-8' });\n      console.log(`📦 Created safety stash: ${stashName}`);\n\n      return stashName;\n    } catch (error) {\n      console.warn('⚠️ Could not create git stash:', error);\n      return '';\n    }\n  }\n\n  /**\n   * Execute the console removal script\n   */\n  private async executeScript(\n    consoleAnalysis: ConsoleStatement[]\n  ): Promise<ConsoleRemovalResult> {\n    const result: ConsoleRemovalResult = {\n      success: false,\n      filesProcessed: 0,\n      consoleStatementsRemoved: 0,\n      consoleStatementsPreserved: 0,\n      buildTime: 0,\n      errors: [],\n      warnings: [],\n      preservedFiles: [],\n    };\n\n    try {\n      // Build command arguments\n      const args = [];\n\n      if (this.config.dryRun) {\n        args.push('--dry-run');\n      }\n\n      if (this.config.maxFiles) {\n        args.push('--max-files');\n        args.push(this.config.maxFiles.toString());\n      }\n\n      const command = `node ${this.scriptPath} ${args.join(' ')}`;\n      console.log(`🔧 Executing: ${command}`);\n\n      const startTime = Date.now();\n      const output = execSync(command, {\n        encoding: 'utf-8',\n        maxBuffer: 1024 * 1024 * 10, // 10MB buffer\n      });\n      const endTime = Date.now();\n\n      // Parse output for metrics\n      result.success = !output.includes('❌') && !output.includes('Error:');\n      result.buildTime = endTime - startTime;\n\n      // Extract metrics from output\n      const filesMatch = output.match(/Files processed:\\s*(\\d+)/i);\n      if (filesMatch) {\n        result.filesProcessed = parseInt(filesMatch[1]);\n      }\n\n      const statementsMatch = output.match(\n        /Total console statements fixed:\\s*(\\d+)/i\n      );\n      if (statementsMatch) {\n        result.consoleStatementsRemoved = parseInt(statementsMatch[1]);\n      }\n\n      // Calculate preserved statements\n      const criticalStatements = consoleAnalysis.filter(s => s.shouldPreserve);\n      result.consoleStatementsPreserved = criticalStatements.length;\n      result.preservedFiles = [...new Set(criticalStatements.map(s => s.file))];\n\n      // Extract warnings and errors\n      const lines = output.split('\\n');\n      for (const line of lines) {\n        if (line.includes('⚠️') || line.includes('WARNING')) {\n          result.warnings.push(line.trim());\n        } else if (line.includes('❌') || line.includes('ERROR')) {\n          result.errors.push(line.trim());\n        }\n      }\n\n      console.log(`✅ Script execution completed in ${result.buildTime}ms`);\n      console.log(\n        `📊 Removed: ${result.consoleStatementsRemoved}, Preserved: ${result.consoleStatementsPreserved}`\n      );\n\n      return result;\n    } catch (error) {\n      result.success = false;\n      result.errors.push(`Script execution failed: ${error}`);\n      console.error('❌ Script execution failed:', error);\n      return result;\n    }\n  }\n\n  /**\n   * Validate build after console removal\n   */\n  private async validateBuild(): Promise<boolean> {\n    try {\n      console.log('🔍 Validating build after console removal...');\n\n      const startTime = Date.now();\n      execSync('yarn build', {\n        encoding: 'utf-8',\n        stdio: 'pipe',\n      });\n      const buildTime = Date.now() - startTime;\n\n      console.log(`✅ Build validation successful (${buildTime}ms)`);\n      return true;\n    } catch (error) {\n      console.error('❌ Build validation failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Rollback from git stash\n   */\n  private async rollbackFromStash(stashName: string): Promise<void> {\n    try {\n      console.log(`🔄 Rolling back from stash: ${stashName}`);\n      execSync(`git stash apply stash^{/${stashName}}`, { encoding: 'utf-8' });\n      console.log('✅ Rollback completed');\n    } catch (error) {\n      console.error('❌ Rollback failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Estimate files with console statements\n   */\n  private async estimateFilesWithConsoleStatements(): Promise<number> {\n    try {\n      // Use the analyzer to get current console statements count\n      const { LintingWarningAnalyzer } = await import(\n        './LintingWarningAnalyzer.js'\n      );\n      const analyzer = new LintingWarningAnalyzer();\n      const result = await analyzer.analyzeLintingWarnings();\n\n      return result.distribution.consoleStatements.files.length;\n    } catch (error) {\n      console.warn(\n        '⚠️ Could not estimate files with console statements, using default:',\n        error\n      );\n      return 50; // Default estimate\n    }\n  }\n\n  /**\n   * Save metrics to file\n   */\n  private async saveMetrics(result: ConsoleRemovalResult): Promise<void> {\n    try {\n      const metrics = {\n        timestamp: new Date().toISOString(),\n        config: this.config,\n        result,\n        summary: {\n          success: result.success,\n          filesProcessed: result.filesProcessed,\n          consoleStatementsRemoved: result.consoleStatementsRemoved,\n          consoleStatementsPreserved: result.consoleStatementsPreserved,\n          buildTime: result.buildTime,\n          preservedFiles: result.preservedFiles.length,\n        },\n      };\n\n      fs.writeFileSync(this.metricsFile, JSON.stringify(metrics, null, 2));\n      console.log(`📊 Metrics saved to ${this.metricsFile}`);\n    } catch (error) {\n      console.warn('⚠️ Could not save metrics:', error);\n    }\n  }\n\n  /**\n   * Generate removal report\n   */\n  generateReport(result: ConsoleRemovalResult | BatchRemovalResult): string {\n    if ('totalBatches' in result) {\n      // Batch processing report\n      return this.generateBatchReport(result);\n    } else {\n      // Single execution report\n      return this.generateSingleReport(result);\n    }\n  }\n\n  /**\n   * Generate single execution report\n   */\n  private generateSingleReport(result: ConsoleRemovalResult): string {\n    return `\n# Console Statement Removal Report\nGenerated: ${new Date().toISOString()}\n\n## Execution Summary\n- **Success**: ${result.success ? '✅' : '❌'}\n- **Files Processed**: ${result.filesProcessed}\n- **Console Statements Removed**: ${result.consoleStatementsRemoved}\n- **Console Statements Preserved**: ${result.consoleStatementsPreserved}\n- **Build Time**: ${result.buildTime}ms\n- **Files with Preserved Statements**: ${result.preservedFiles.length}\n\n## Configuration\n- **Max Files**: ${this.config.maxFiles}\n- **Dry Run**: ${this.config.dryRun}\n- **Preserve Debug Critical**: ${this.config.preserveDebugCritical}\n- **Selective Removal**: ${this.config.selectiveRemoval}\n- **Build Validation**: ${this.config.buildValidation}\n- **Git Stash**: ${this.config.enableGitStash}\n\n## Preserved Files\n${\n  result.preservedFiles.length > 0\n    ? result.preservedFiles.map(f => `- ${f}`).join('\\n')\n    : 'No files had critical console statements preserved'\n}\n\n## Issues\n${result.errors.length > 0 ? '### Errors\\n' + result.errors.map(e => `- ${e}`).join('\\n') : 'No errors'}\n${result.warnings.length > 0 ? '### Warnings\\n' + result.warnings.map(w => `- ${w}`).join('\\n') : 'No warnings'}\n\n## Next Steps\n${\n  result.success\n    ? '- ✅ Console removal completed successfully\\n- Review preserved critical statements\\n- Run linting to verify improvements\\n- Consider committing changes'\n    : '- ❌ Console removal failed\\n- Review errors above\\n- Consider running with --dry-run first\\n- Check git stash for rollback if needed'\n}\n`;\n  }\n\n  /**\n   * Generate batch processing report\n   */\n  private generateBatchReport(result: BatchRemovalResult): string {\n    return `\n# Console Statement Batch Removal Report\nGenerated: ${new Date().toISOString()}\n\n## Batch Summary\n- **Total Batches**: ${result.totalBatches}\n- **Successful Batches**: ${result.successfulBatches}\n- **Failed Batches**: ${result.failedBatches}\n- **Success Rate**: ${((result.successfulBatches / result.totalBatches) * 100).toFixed(1)}%\n\n## Processing Summary\n- **Total Files Processed**: ${result.totalFilesProcessed}\n- **Total Console Statements Processed**: ${result.totalConsoleStatementsProcessed}\n- **Critical Statements Preserved**: ${result.preservedCriticalStatements}\n- **Average Build Time**: ${result.averageBuildTime.toFixed(0)}ms\n\n## Batch Configuration\n- **Batch Size**: ${this.config.batchSize} files per batch\n- **Preserve Debug Critical**: ${this.config.preserveDebugCritical}\n- **Selective Removal**: ${this.config.selectiveRemoval}\n- **Build Validation**: ${this.config.buildValidation}\n\n## Issues\n${result.errors.length > 0 ? '### Batch Errors\\n' + result.errors.map(e => `- ${e}`).join('\\n') : 'No batch errors'}\n\n## Recommendations\n${\n  result.successfulBatches === result.totalBatches\n    ? '- ✅ All batches completed successfully\\n- Review preserved critical statements\\n- Run final linting validation\\n- Consider committing all changes'\n    : '- ⚠️ Some batches failed\\n- Review failed batch errors\\n- Consider re-running failed batches\\n- Check git stashes for rollback if needed'\n}\n`;\n  }\n\n  /**\n   * Utility function for delays\n   */\n  private sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n"],"version":3}