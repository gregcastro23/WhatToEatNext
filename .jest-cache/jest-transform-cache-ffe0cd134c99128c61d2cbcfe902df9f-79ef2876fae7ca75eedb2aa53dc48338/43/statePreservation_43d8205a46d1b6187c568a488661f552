f1bb79631e2004bb7e815bdd6c62923e
"use strict";
/**
 * State Preservation Utility
 * Handles saving and restoring component state across navigation
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createStatePreservationHook = exports.useStateCleanup = exports.clearExpiredState = exports.clearAllState = exports.getScrollPosition = exports.saveScrollPosition = exports.getComponentState = exports.saveComponentState = exports.getNavigationState = exports.saveNavigationState = void 0;
const STATE_KEYS = {
    MAIN_PAGE_STATE: 'mainPageState',
    NAVIGATION_STATE: 'navigationState',
    COMPONENT_STATES: 'componentStates',
    SCROLL_POSITIONS: 'scrollPositions'
};
// State expiration time (1 hour)
const STATE_EXPIRATION_TIME = 60 * 60 * 1000;
/**
 * Check if stored state is still valid (not expired)
 */
function isStateValid(timestamp) {
    return Date.now() - timestamp < STATE_EXPIRATION_TIME;
}
/**
 * Safely get item from storage with error handling
 */
function safeGetItem(key) {
    try {
        return sessionStorage.getItem(key);
    }
    catch (error) {
        console.warn(`Failed to get item from sessionStorage: ${key}`, error);
        return null;
    }
}
/**
 * Safely set item in storage with error handling
 */
function safeSetItem(key, value) {
    try {
        sessionStorage.setItem(key, value);
        return true;
    }
    catch (error) {
        console.warn(`Failed to set item in sessionStorage: ${key}`, error);
        return false;
    }
}
/**
 * Save navigation state
 */
function saveNavigationState(state) {
    const currentState = getNavigationState();
    const updatedState = {
        ...currentState,
        ...state,
    };
    const stateWithTimestamp = {
        timestamp: Date.now(),
        data: updatedState
    };
    safeSetItem(STATE_KEYS.NAVIGATION_STATE, JSON.stringify(stateWithTimestamp));
}
exports.saveNavigationState = saveNavigationState;
/**
 * Get navigation state
 */
function getNavigationState() {
    const defaultState = {
        activeSection: null,
        navigationHistory: [],
        selectedIngredients: [],
        selectedCuisine: null,
        selectedCookingMethods: [],
        currentRecipe: null,
        selectedIngredientCategory: null,
        selectedIngredient: null,
        selectedCookingMethod: null,
        scrollPosition: 0
    };
    const stored = safeGetItem(STATE_KEYS.NAVIGATION_STATE);
    if (!stored)
        return defaultState;
    try {
        const parsed = JSON.parse(stored);
        if (!isStateValid(parsed.timestamp)) {
            return defaultState;
        }
        return { ...defaultState, ...parsed.data };
    }
    catch (error) {
        console.warn('Failed to parse navigation state:', error);
        return defaultState;
    }
}
exports.getNavigationState = getNavigationState;
/**
 * Save component-specific state
 */
function saveComponentState(componentId, state) {
    const allStates = getComponentStates();
    allStates[componentId] = {
        timestamp: Date.now(),
        data: state
    };
    safeSetItem(STATE_KEYS.COMPONENT_STATES, JSON.stringify(allStates));
}
exports.saveComponentState = saveComponentState;
/**
 * Get component-specific state
 */
function getComponentState(componentId) {
    const allStates = getComponentStates();
    const componentState = allStates[componentId];
    if (!componentState || !isStateValid(componentState.timestamp)) {
        return null;
    }
    return componentState.data;
}
exports.getComponentState = getComponentState;
/**
 * Get all component states
 */
function getComponentStates() {
    const stored = safeGetItem(STATE_KEYS.COMPONENT_STATES);
    if (!stored)
        return {};
    try {
        return JSON.parse(stored);
    }
    catch (error) {
        console.warn('Failed to parse component states:', error);
        return {};
    }
}
/**
 * Save scroll position for a specific section
 */
function saveScrollPosition(sectionId, position) {
    const positions = getScrollPositions();
    positions[sectionId] = {
        timestamp: Date.now(),
        data: position
    };
    safeSetItem(STATE_KEYS.SCROLL_POSITIONS, JSON.stringify(positions));
}
exports.saveScrollPosition = saveScrollPosition;
/**
 * Get scroll position for a specific section
 */
function getScrollPosition(sectionId) {
    const positions = getScrollPositions();
    const position = positions[sectionId];
    if (!position || !isStateValid(position.timestamp)) {
        return 0;
    }
    return position.data;
}
exports.getScrollPosition = getScrollPosition;
/**
 * Get all scroll positions
 */
function getScrollPositions() {
    const stored = safeGetItem(STATE_KEYS.SCROLL_POSITIONS);
    if (!stored)
        return {};
    try {
        return JSON.parse(stored);
    }
    catch (error) {
        console.warn('Failed to parse scroll positions:', error);
        return {};
    }
}
/**
 * Clear all stored state (useful for cleanup)
 */
function clearAllState() {
    Object.values(STATE_KEYS).forEach(key => {
        try {
            sessionStorage.removeItem(key);
        }
        catch (error) {
            console.warn(`Failed to remove item from sessionStorage: ${key}`, error);
        }
    });
}
exports.clearAllState = clearAllState;
/**
 * Clear expired state entries
 */
function clearExpiredState() {
    // Clear expired navigation state
    const navState = safeGetItem(STATE_KEYS.NAVIGATION_STATE);
    if (navState) {
        try {
            const parsed = JSON.parse(navState);
            if (!isStateValid(parsed.timestamp)) {
                sessionStorage.removeItem(STATE_KEYS.NAVIGATION_STATE);
            }
        }
        catch (error) {
            sessionStorage.removeItem(STATE_KEYS.NAVIGATION_STATE);
        }
    }
    // Clear expired component states
    const componentStates = getComponentStates();
    const validStates = {};
    let hasChanges = false;
    Object.entries(componentStates).forEach(([key, state]) => {
        if (isStateValid(state.timestamp)) {
            validStates[key] = state;
        }
        else {
            hasChanges = true;
        }
    });
    if (hasChanges) {
        safeSetItem(STATE_KEYS.COMPONENT_STATES, JSON.stringify(validStates));
    }
    // Clear expired scroll positions
    const scrollPositions = getScrollPositions();
    const validPositions = {};
    hasChanges = false;
    Object.entries(scrollPositions).forEach(([key, position]) => {
        if (isStateValid(position.timestamp)) {
            validPositions[key] = position;
        }
        else {
            hasChanges = true;
        }
    });
    if (hasChanges) {
        safeSetItem(STATE_KEYS.SCROLL_POSITIONS, JSON.stringify(validPositions));
    }
}
exports.clearExpiredState = clearExpiredState;
/**
 * Hook for automatic state cleanup on page load
 */
function useStateCleanup() {
    if (typeof window !== 'undefined') {
        // Clear expired state on page load
        clearExpiredState();
        // Set up periodic cleanup (every 10 minutes)
        const interval = setInterval(clearExpiredState, 10 * 60 * 1000);
        // Cleanup on page unload
        const cleanup = () => {
            clearInterval(interval);
            clearExpiredState();
        };
        window.addEventListener('beforeunload', cleanup);
        // Return cleanup function
        return cleanup;
    }
}
exports.useStateCleanup = useStateCleanup;
/**
 * Create a state preservation hook for components
 */
function createStatePreservationHook(componentId) {
    return {
        saveState: (state) => saveComponentState(componentId, state),
        getState: () => getComponentState(componentId),
        clearState: () => {
            const allStates = getComponentStates();
            delete allStates[componentId];
            safeSetItem(STATE_KEYS.COMPONENT_STATES, JSON.stringify(allStates));
        }
    };
}
exports.createStatePreservationHook = createStatePreservationHook;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,