4f6c8ef5273810b63100e2335f13d309
"use strict";
/**
 * TestMemoryMonitor - Memory usage tracking and management for tests
 *
 * This class provides comprehensive memory monitoring capabilities for test suites,
 * including memory usage tracking, leak detection, and cleanup procedures.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestMemoryMonitor = void 0;
class TestMemoryMonitor {
    constructor(thresholds) {
        this.snapshots = [];
        this.thresholds = {
            warningThreshold: 100,
            errorThreshold: 500,
            leakThreshold: 50,
            ...thresholds
        };
        this.testStartTime = Date.now();
        this.gcEnabled = typeof global.gc === 'function';
        this.initialMemory = this.takeSnapshot('initial');
        // Enable garbage collection if available
        if (!this.gcEnabled && process.env.NODE_ENV === 'test') {
            console.warn('Garbage collection not available. Run tests with --expose-gc flag for better memory management.');
        }
    }
    /**
     * Take a memory snapshot with optional test name
     */
    takeSnapshot(testName) {
        const memUsage = process.memoryUsage();
        const snapshot = {
            heapUsed: memUsage.heapUsed,
            heapTotal: memUsage.heapTotal,
            external: memUsage.external,
            arrayBuffers: memUsage.arrayBuffers,
            timestamp: Date.now(),
            testName
        };
        this.snapshots.push(snapshot);
        // Prevent memory leaks by limiting snapshot history
        const MAX_SNAPSHOTS = 50;
        if (this.snapshots.length > MAX_SNAPSHOTS) {
            // Keep first (initial) and last N snapshots
            const initial = this.snapshots[0];
            const recent = this.snapshots.slice(-MAX_SNAPSHOTS + 1);
            this.snapshots = [initial, ...recent];
        }
        return snapshot;
    }
    /**
     * Check current memory usage against thresholds
     */
    checkMemoryUsage(testName) {
        const currentSnapshot = this.takeSnapshot(testName);
        const warnings = [];
        const errors = [];
        const heapUsedMB = this.bytesToMB(currentSnapshot.heapUsed);
        const memoryIncreaseMB = this.bytesToMB(currentSnapshot.heapUsed - this.initialMemory.heapUsed);
        // Check against thresholds
        if (heapUsedMB > this.thresholds.errorThreshold) {
            errors.push(`Memory usage (${heapUsedMB.toFixed(2)}MB) exceeds error threshold (${this.thresholds.errorThreshold}MB)`);
        }
        else if (heapUsedMB > this.thresholds.warningThreshold) {
            warnings.push(`Memory usage (${heapUsedMB.toFixed(2)}MB) exceeds warning threshold (${this.thresholds.warningThreshold}MB)`);
        }
        // Check for memory leaks
        if (memoryIncreaseMB > this.thresholds.leakThreshold) {
            warnings.push(`Potential memory leak detected: ${memoryIncreaseMB.toFixed(2)}MB increase since test start`);
        }
        // Log memory usage for debugging
        if (testName && (warnings.length > 0 || errors.length > 0)) {
            console.warn(`Memory check for "${testName}":`, {
                currentUsage: `${heapUsedMB.toFixed(2)}MB`,
                increase: `${memoryIncreaseMB.toFixed(2)}MB`,
                warnings,
                errors
            });
        }
        return {
            isWithinLimits: errors.length === 0,
            warnings,
            errors,
            currentUsage: currentSnapshot
        };
    }
    /**
     * Detect potential memory leaks by comparing snapshots
     */
    detectMemoryLeaks() {
        const leakDetails = [];
        for (let i = 1; i < this.snapshots.length; i++) {
            const current = this.snapshots[i];
            const previous = this.snapshots[i - 1];
            const increase = this.bytesToMB(current.heapUsed - previous.heapUsed);
            if (increase > this.thresholds.leakThreshold) {
                leakDetails.push({
                    testName: current.testName,
                    memoryIncrease: increase,
                    timestamp: current.timestamp
                });
            }
        }
        return {
            hasLeaks: leakDetails.length > 0,
            leakDetails
        };
    }
    /**
     * Force garbage collection if available
     */
    forceGarbageCollection() {
        if (this.gcEnabled && global.gc) {
            try {
                global.gc();
                return true;
            }
            catch (error) {
                console.warn('Failed to force garbage collection:', error);
                return false;
            }
        }
        return false;
    }
    /**
     * Comprehensive cleanup procedure
     */
    cleanup(testName) {
        const memoryBefore = process.memoryUsage().heapUsed;
        // Force garbage collection
        const gcPerformed = this.forceGarbageCollection();
        // Clear any global test caches
        this.clearTestCaches();
        // Take a snapshot after cleanup
        const memoryAfter = process.memoryUsage().heapUsed;
        const memoryFreed = this.bytesToMB(memoryBefore - memoryAfter);
        if (testName) {
            this.takeSnapshot(`${testName}-cleanup`);
        }
        const cleanupEffective = memoryAfter < memoryBefore;
        if (testName && memoryFreed > 1) {
            console.log(`Cleanup for "${testName}" freed ${memoryFreed.toFixed(2)}MB`);
        }
        return {
            memoryBefore: this.bytesToMB(memoryBefore),
            memoryAfter: this.bytesToMB(memoryAfter),
            gcPerformed,
            cleanupEffective
        };
    }
    /**
     * Clear global test caches and references
     */
    clearTestCaches() {
        // Clear global test cache if it exists
        if (global.__TEST_CACHE__) {
            if (typeof global.__TEST_CACHE__.clear === 'function') {
                global.__TEST_CACHE__.clear();
            }
            else {
                global.__TEST_CACHE__ = new Map();
            }
        }
        // Clear Jest module cache for test isolation
        if (jest && jest.resetModules) {
            jest.resetModules();
        }
        // Clear any other global test references
        if (global.__TEST_REFS__) {
            global.__TEST_REFS__.length = 0; // More efficient than reassigning
        }
        // Clear require cache for test files to prevent memory leaks
        if (typeof require !== 'undefined' && require.cache) {
            Object.keys(require.cache).forEach(key => {
                if (key.includes('__tests__') ||
                    key.includes('.test.') ||
                    key.includes('.spec.') ||
                    key.includes('TestMemoryMonitor')) {
                    delete require.cache[key];
                }
            });
        }
        // Clear any lingering timers that might cause memory leaks
        if (typeof global !== 'undefined') {
            // Clear any test-related intervals or timeouts
            const maxTimerId = setTimeout(() => { }, 0);
            for (let i = 1; i <= maxTimerId; i++) {
                clearTimeout(i);
                clearInterval(i);
            }
            clearTimeout(maxTimerId);
        }
    }
    /**
     * Get memory usage summary
     */
    getMemorySummary() {
        const currentMemory = process.memoryUsage().heapUsed;
        const peakMemory = Math.max(...this.snapshots.map(s => s.heapUsed));
        return {
            initialMemory: this.bytesToMB(this.initialMemory.heapUsed),
            currentMemory: this.bytesToMB(currentMemory),
            peakMemory: this.bytesToMB(peakMemory),
            totalIncrease: this.bytesToMB(currentMemory - this.initialMemory.heapUsed),
            snapshotCount: this.snapshots.length,
            testDuration: Date.now() - this.testStartTime
        };
    }
    /**
     * Generate detailed memory report
     */
    generateReport() {
        const summary = this.getMemorySummary();
        const leakAnalysis = this.detectMemoryLeaks();
        let report = `
Memory Usage Report
==================
Initial Memory: ${summary.initialMemory.toFixed(2)}MB
Current Memory: ${summary.currentMemory.toFixed(2)}MB
Peak Memory: ${summary.peakMemory.toFixed(2)}MB
Total Increase: ${summary.totalIncrease.toFixed(2)}MB
Test Duration: ${(summary.testDuration / 1000).toFixed(2)}s
Snapshots Taken: ${summary.snapshotCount}

`;
        if (leakAnalysis.hasLeaks) {
            report += `Memory Leaks Detected:\n`;
            leakAnalysis.leakDetails.forEach((leak, index) => {
                report += `  ${index + 1}. ${leak.testName || 'Unknown test'}: +${leak.memoryIncrease.toFixed(2)}MB\n`;
            });
            report += '\n';
        }
        else {
            report += 'No significant memory leaks detected.\n\n';
        }
        // Add recommendations
        if (summary.totalIncrease > this.thresholds.warningThreshold) {
            report += `Recommendations:\n`;
            report += `- Consider reducing test complexity or splitting large test suites\n`;
            report += `- Ensure proper cleanup in afterEach hooks\n`;
            report += `- Use jest.resetModules() to clear module cache\n`;
            if (!this.gcEnabled) {
                report += `- Run tests with --expose-gc flag for better memory management\n`;
            }
        }
        return report;
    }
    /**
     * Convert bytes to megabytes
     */
    bytesToMB(bytes) {
        return bytes / (1024 * 1024);
    }
    /**
     * Static method to create a monitor with default settings
     */
    static createDefault() {
        return new TestMemoryMonitor();
    }
    /**
     * Static method to create a monitor with strict settings for CI
     */
    static createForCI() {
        return new TestMemoryMonitor({
            warningThreshold: 50,
            errorThreshold: 200,
            leakThreshold: 25
        });
    }
}
exports.TestMemoryMonitor = TestMemoryMonitor;
exports.default = TestMemoryMonitor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,