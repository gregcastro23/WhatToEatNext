{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/utils/TestMemoryMonitor.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/utils/TestMemoryMonitor.ts"],"sourcesContent":["/**\n * TestMemoryMonitor - Memory usage tracking and management for tests\n * \n * This class provides comprehensive memory monitoring capabilities for test suites,\n * including memory usage tracking, leak detection, and cleanup procedures.\n */\n\ninterface MemorySnapshot {\n  heapUsed: number;\n  heapTotal: number;\n  external: number;\n  arrayBuffers: number;\n  timestamp: number;\n  testName?: string;\n}\n\ninterface MemoryThresholds {\n  warningThreshold: number; // MB\n  errorThreshold: number;   // MB\n  leakThreshold: number;    // MB increase between snapshots\n}\n\nexport class TestMemoryMonitor {\n  private initialMemory: MemorySnapshot;\n  private snapshots: MemorySnapshot[] = [];\n  private thresholds: MemoryThresholds;\n  private testStartTime: number;\n  private gcEnabled: boolean;\n\n  constructor(thresholds?: Partial<MemoryThresholds>) {\n    this.thresholds = {\n      warningThreshold: 100, // 100MB warning\n      errorThreshold: 500,   // 500MB error\n      leakThreshold: 50,     // 50MB leak threshold\n      ...thresholds\n    };\n\n    this.testStartTime = Date.now();\n    this.gcEnabled = typeof global.gc === 'function';\n    this.initialMemory = this.takeSnapshot('initial');\n\n    // Enable garbage collection if available\n    if (!this.gcEnabled && process.env.NODE_ENV === 'test') {\n      console.warn('Garbage collection not available. Run tests with --expose-gc flag for better memory management.');\n    }\n  }\n\n  /**\n   * Take a memory snapshot with optional test name\n   */\n  takeSnapshot(testName?: string): MemorySnapshot {\n    const memUsage = process.memoryUsage();\n    const snapshot: MemorySnapshot = {\n      heapUsed: memUsage.heapUsed,\n      heapTotal: memUsage.heapTotal,\n      external: memUsage.external,\n      arrayBuffers: memUsage.arrayBuffers,\n      timestamp: Date.now(),\n      testName\n    };\n\n    this.snapshots.push(snapshot);\n    \n    // Prevent memory leaks by limiting snapshot history\n    const MAX_SNAPSHOTS = 50;\n    if (this.snapshots.length > MAX_SNAPSHOTS) {\n      // Keep first (initial) and last N snapshots\n      const initial = this.snapshots[0];\n      const recent = this.snapshots.slice(-MAX_SNAPSHOTS + 1);\n      this.snapshots = [initial, ...recent];\n    }\n    \n    return snapshot;\n  }\n\n  /**\n   * Check current memory usage against thresholds\n   */\n  checkMemoryUsage(testName?: string): {\n    isWithinLimits: boolean;\n    warnings: string[];\n    errors: string[];\n    currentUsage: MemorySnapshot;\n  } {\n    const currentSnapshot = this.takeSnapshot(testName);\n    const warnings: string[] = [];\n    const errors: string[] = [];\n\n    const heapUsedMB = this.bytesToMB(currentSnapshot.heapUsed);\n    const memoryIncreaseMB = this.bytesToMB(currentSnapshot.heapUsed - this.initialMemory.heapUsed);\n\n    // Check against thresholds\n    if (heapUsedMB > this.thresholds.errorThreshold) {\n      errors.push(`Memory usage (${heapUsedMB.toFixed(2)}MB) exceeds error threshold (${this.thresholds.errorThreshold}MB)`);\n    } else if (heapUsedMB > this.thresholds.warningThreshold) {\n      warnings.push(`Memory usage (${heapUsedMB.toFixed(2)}MB) exceeds warning threshold (${this.thresholds.warningThreshold}MB)`);\n    }\n\n    // Check for memory leaks\n    if (memoryIncreaseMB > this.thresholds.leakThreshold) {\n      warnings.push(`Potential memory leak detected: ${memoryIncreaseMB.toFixed(2)}MB increase since test start`);\n    }\n\n    // Log memory usage for debugging\n    if (testName && (warnings.length > 0 || errors.length > 0)) {\n      console.warn(`Memory check for \"${testName}\":`, {\n        currentUsage: `${heapUsedMB.toFixed(2)}MB`,\n        increase: `${memoryIncreaseMB.toFixed(2)}MB`,\n        warnings,\n        errors\n      });\n    }\n\n    return {\n      isWithinLimits: errors.length === 0,\n      warnings,\n      errors,\n      currentUsage: currentSnapshot\n    };\n  }\n\n  /**\n   * Detect potential memory leaks by comparing snapshots\n   */\n  detectMemoryLeaks(): {\n    hasLeaks: boolean;\n    leakDetails: Array<{\n      testName?: string;\n      memoryIncrease: number;\n      timestamp: number;\n    }>;\n  } {\n    const leakDetails: Array<{\n      testName?: string;\n      memoryIncrease: number;\n      timestamp: number;\n    }> = [];\n\n    for (let i = 1; i < this.snapshots.length; i++) {\n      const current = this.snapshots[i];\n      const previous = this.snapshots[i - 1];\n      const increase = this.bytesToMB(current.heapUsed - previous.heapUsed);\n\n      if (increase > this.thresholds.leakThreshold) {\n        leakDetails.push({\n          testName: current.testName,\n          memoryIncrease: increase,\n          timestamp: current.timestamp\n        });\n      }\n    }\n\n    return {\n      hasLeaks: leakDetails.length > 0,\n      leakDetails\n    };\n  }\n\n  /**\n   * Force garbage collection if available\n   */\n  forceGarbageCollection(): boolean {\n    if (this.gcEnabled && global.gc) {\n      try {\n        global.gc();\n        return true;\n      } catch (error) {\n        console.warn('Failed to force garbage collection:', error);\n        return false;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Comprehensive cleanup procedure\n   */\n  cleanup(testName?: string): {\n    memoryBefore: number;\n    memoryAfter: number;\n    gcPerformed: boolean;\n    cleanupEffective: boolean;\n  } {\n    const memoryBefore = process.memoryUsage().heapUsed;\n\n    // Force garbage collection\n    const gcPerformed = this.forceGarbageCollection();\n\n    // Clear any global test caches\n    this.clearTestCaches();\n\n    // Take a snapshot after cleanup\n    const memoryAfter = process.memoryUsage().heapUsed;\n    const memoryFreed = this.bytesToMB(memoryBefore - memoryAfter);\n\n    if (testName) {\n      this.takeSnapshot(`${testName}-cleanup`);\n    }\n\n    const cleanupEffective = memoryAfter < memoryBefore;\n\n    if (testName && memoryFreed > 1) {\n      console.log(`Cleanup for \"${testName}\" freed ${memoryFreed.toFixed(2)}MB`);\n    }\n\n    return {\n      memoryBefore: this.bytesToMB(memoryBefore),\n      memoryAfter: this.bytesToMB(memoryAfter),\n      gcPerformed,\n      cleanupEffective\n    };\n  }\n\n  /**\n   * Clear global test caches and references\n   */\n  private clearTestCaches(): void {\n    // Clear global test cache if it exists\n    if (global.__TEST_CACHE__) {\n      if (typeof global.__TEST_CACHE__.clear === 'function') {\n        global.__TEST_CACHE__.clear();\n      } else {\n        global.__TEST_CACHE__ = new Map();\n      }\n    }\n\n    // Clear Jest module cache for test isolation\n    if (jest && jest.resetModules) {\n      jest.resetModules();\n    }\n\n    // Clear any other global test references\n    if (global.__TEST_REFS__) {\n      global.__TEST_REFS__.length = 0; // More efficient than reassigning\n    }\n\n    // Clear require cache for test files to prevent memory leaks\n    if (typeof require !== 'undefined' && require.cache) {\n      Object.keys(require.cache).forEach(key => {\n        if (key.includes('__tests__') || \n            key.includes('.test.') || \n            key.includes('.spec.') ||\n            key.includes('TestMemoryMonitor')) {\n          delete require.cache[key];\n        }\n      });\n    }\n\n    // Clear any lingering timers that might cause memory leaks\n    if (typeof global !== 'undefined') {\n      // Clear any test-related intervals or timeouts\n      const maxTimerId = setTimeout(() => {}, 0);\n      for (let i = 1; i <= maxTimerId; i++) {\n        clearTimeout(i);\n        clearInterval(i);\n      }\n      clearTimeout(maxTimerId);\n    }\n  }\n\n  /**\n   * Get memory usage summary\n   */\n  getMemorySummary(): {\n    initialMemory: number;\n    currentMemory: number;\n    peakMemory: number;\n    totalIncrease: number;\n    snapshotCount: number;\n    testDuration: number;\n  } {\n    const currentMemory = process.memoryUsage().heapUsed;\n    const peakMemory = Math.max(...this.snapshots.map(s => s.heapUsed));\n\n    return {\n      initialMemory: this.bytesToMB(this.initialMemory.heapUsed),\n      currentMemory: this.bytesToMB(currentMemory),\n      peakMemory: this.bytesToMB(peakMemory),\n      totalIncrease: this.bytesToMB(currentMemory - this.initialMemory.heapUsed),\n      snapshotCount: this.snapshots.length,\n      testDuration: Date.now() - this.testStartTime\n    };\n  }\n\n  /**\n   * Generate detailed memory report\n   */\n  generateReport(): string {\n    const summary = this.getMemorySummary();\n    const leakAnalysis = this.detectMemoryLeaks();\n\n    let report = `\nMemory Usage Report\n==================\nInitial Memory: ${summary.initialMemory.toFixed(2)}MB\nCurrent Memory: ${summary.currentMemory.toFixed(2)}MB\nPeak Memory: ${summary.peakMemory.toFixed(2)}MB\nTotal Increase: ${summary.totalIncrease.toFixed(2)}MB\nTest Duration: ${(summary.testDuration / 1000).toFixed(2)}s\nSnapshots Taken: ${summary.snapshotCount}\n\n`;\n\n    if (leakAnalysis.hasLeaks) {\n      report += `Memory Leaks Detected:\\n`;\n      leakAnalysis.leakDetails.forEach((leak, index) => {\n        report += `  ${index + 1}. ${leak.testName || 'Unknown test'}: +${leak.memoryIncrease.toFixed(2)}MB\\n`;\n      });\n      report += '\\n';\n    } else {\n      report += 'No significant memory leaks detected.\\n\\n';\n    }\n\n    // Add recommendations\n    if (summary.totalIncrease > this.thresholds.warningThreshold) {\n      report += `Recommendations:\\n`;\n      report += `- Consider reducing test complexity or splitting large test suites\\n`;\n      report += `- Ensure proper cleanup in afterEach hooks\\n`;\n      report += `- Use jest.resetModules() to clear module cache\\n`;\n      if (!this.gcEnabled) {\n        report += `- Run tests with --expose-gc flag for better memory management\\n`;\n      }\n    }\n\n    return report;\n  }\n\n  /**\n   * Convert bytes to megabytes\n   */\n  private bytesToMB(bytes: number): number {\n    return bytes / (1024 * 1024);\n  }\n\n  /**\n   * Static method to create a monitor with default settings\n   */\n  static createDefault(): TestMemoryMonitor {\n    return new TestMemoryMonitor();\n  }\n\n  /**\n   * Static method to create a monitor with strict settings for CI\n   */\n  static createForCI(): TestMemoryMonitor {\n    return new TestMemoryMonitor({\n      warningThreshold: 50,  // Lower thresholds for CI\n      errorThreshold: 200,\n      leakThreshold: 25\n    });\n  }\n}\n\n// Global type declarations\ndeclare global {\n  var gc: (() => void) | undefined;\n  var __TEST_CACHE__: Map<string, any> | { clear: () => void } | undefined;\n  var __TEST_REFS__: any[] | undefined;\n}\n\nexport default TestMemoryMonitor;"],"version":3}