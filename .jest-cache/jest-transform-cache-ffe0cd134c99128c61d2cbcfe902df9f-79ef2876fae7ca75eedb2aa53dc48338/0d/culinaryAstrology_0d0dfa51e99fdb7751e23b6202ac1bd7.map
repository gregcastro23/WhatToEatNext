{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/calculations/culinaryAstrology.ts","mappings":";;;AAAA,kEAA+D;AAC/D,2DAAyD;AACzD,2EAAwE;AACxE,wEAA2E;AAyD3E,MAAa,kBAAkB;IAA/B;QACmB,8BAAyB,GAAG;YAC3C,MAAM,EAAE,GAAG;YACX,KAAK,EAAE,GAAG;YACV,SAAS,EAAE,GAAG;YACd,QAAQ,EAAE,GAAG;SACd,CAAC;QAEF,+DAA+D;QACvD,kBAAa,GAAW,QAAQ,CAAC;IAoS3C,CAAC;IAlSC,WAAW,CAAC,UAA6B,EAAE,MAAc;QACvD,gFAAgF;QAChF,OAAO;YACL,eAAe,EAAE,IAAI,CAAC,2BAA2B,CAAC,UAAU,CAAC;YAC7D,SAAS,EAAE,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC;YAC/C,eAAe,EAAE,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC;YACpD,qBAAqB,EAAE,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,MAAM,CAAC;SACzE,CAAC;IACJ,CAAC;IAEO,2BAA2B,CAAC,UAA6B;;QAC/D,6CAA6C;QAC7C,MAAM,gBAAgB,GAA2B;YAC/C,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,aAAa,EAAE,MAAM;YACrD,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,OAAO;YACzD,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK;YAClD,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO;SACzD,CAAC;QAEF,OAAO,gBAAgB,CAAC,CAAA,MAAA,UAAU,CAAC,UAAU,0CAAE,WAAW,EAAE,KAAI,EAAE,CAAC,IAAI,MAAM,CAAC;IAChF,CAAC;IAEO,mBAAmB,CAAC,UAA6B;QACvD,MAAM,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,+BAAc,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;YAClE,MAAM,OAAO,GAAG,IAAI,CAAC,2BAA2B,CAAC,UAAU,CAAC,CAAC;YAC7D,OAAO,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,GAAG,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,MAAM,UAAU,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAC7C,IAAI,CAAC,uBAAuB,CAAC,CAAC,EAAE,UAAU,CAAC;YAC3C,IAAI,CAAC,uBAAuB,CAAC,CAAC,EAAE,UAAU,CAAC,CAC5C,CAAC,CAAC,CAAC,CAAC;QAEL,OAAO;YACL,IAAI,EAAE,UAAU,CAAC,IAAI;YACrB,SAAS,EAAE,eAAe,IAAI,CAAC,2BAA2B,CAAC,UAAU,CAAC,sBAAsB,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YAC/H,aAAa,EAAE,IAAI,CAAC,sBAAsB,CAAC,UAAU,EAAE,UAAU,CAAC;SACnE,CAAC;IACJ,CAAC;IAEO,uBAAuB,CAAC,MAAyB,EAAE,UAA6B;;QACtF,MAAM,WAAW,GAAG,CAAA,MAAA,MAAA,MAAM,CAAC,sBAAsB,0CAAE,eAAe,0CAAE,MAAM,CAAC,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE,CACzF,GAAG,GAAG,CAAC,UAAU,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAI,CAAC,CAAC;QAEvE,OAAO,WAAW,CAAC;IACrB,CAAC;IAEO,sBAAsB,CAAC,MAAyB,EAAE,UAA6B;;QACrF,MAAM,cAAc,GAAG,MAAM,CAAC,OAAO,CAAC,CAAA,MAAA,MAAM,CAAC,sBAAsB,0CAAE,gBAAgB,KAAI,EAAE,CAAC;aACzF,IAAI,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAE,CAAC,EAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAErC,wDAAwD;QACxD,MAAM,oBAAoB,GAAG,UAAU,CAAC,aAAa,IAAI,KAAK,CAAC;QAC/D,MAAM,cAAc,GAAG,CAAA,MAAA,MAAA,MAAM,CAAC,sBAAsB,0CAAE,eAAe,0CAAG,CAAC,CAAC,KAAI,aAAa,CAAC;QAE5F,OAAO,eAAe,cAAc,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,cAAc,oBAAoB,OAAO,cAAc,cAAc,CAAC;IAC9H,CAAC;IAEO,kBAAkB,CAAC,UAA6B;QAKtD,MAAM,eAAe,GAAG,IAAI,CAAC,2BAA2B,CAAC,UAAU,CAAC,CAAC;QAErE,MAAM,mBAAmB,GAAG,MAAM,CAAC,OAAO,CAAC,YAAK,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE;;YACrE,MAAM,iBAAiB,GAAG,MAAA,IAAI,CAAC,mBAAmB,0CAAE,iBAAiB,CAAC;YACtE,2FAA2F;YAC3F,IAAI,OAAO,iBAAiB,KAAK,QAAQ,EAAE;gBACzC,OAAO,iBAAiB,KAAK,eAAe,CAAC;aAC9C;iBAAM,IAAI,iBAAiB,IAAI,OAAO,iBAAiB,KAAK,QAAQ,EAAE;gBACrE,OAAO,iBAAiB,CAAC,IAAI,KAAK,eAAe,CAAC;aACnD;YACD,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,CAAC;QAEH,OAAO;YACL,OAAO,EAAE,eAAe;YACxB,QAAQ,EAAE,mBAAmB,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC;YAC/D,UAAU,EAAE,gBAAgB,IAAI,CAAC,uBAAuB,CAAC,eAAe,CAAC,wBAAwB;SAAC,CAAC;IACvG,CAAC;IAEO,uBAAuB,CAAC,OAAe;QAC7C,MAAM,WAAW,GAA2B;YAC1C,MAAM,EAAE,KAAK;YACb,KAAK,EAAE,OAAO;YACd,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,MAAM;SAChB,CAAC;QACF,OAAO,WAAW,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC;IACzC,CAAC;IAEO,wBAAwB,CAC9B,UAA6B,EAC7B,MAAc;QAEd,MAAM,eAAe,GAAG,IAAI,CAAC,2BAA2B,CAAC,UAAU,CAAC,CAAC;QAErE,MAAM,cAAc,GAAG,MAAM,CAAC,OAAO,CAAC,uCAAkB,CAAC;aACtD,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,EAAE,EAAE,CACvB,OAAO,CAAC,kBAAkB,CAAC,eAAe,CAAC,GAAG,GAAG,CAClD,CAAC;QAEJ,MAAM,WAAW,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAC/C,CAAC,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,eAAe,CAAC;YACxC,CAAC,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,eAAe,CAAC,CACzC,CAAC,CAAC,CAAC,CAAC;QAEL,OAAO;YACL,KAAK,EAAE,WAAW,CAAC,CAAC,CAAC;YACrB,YAAY,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,sBAAsB,CAAC,GAAG,eAAe,WAAW,CAAC;YAClF,iBAAiB,EAAE,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;SAC9D,CAAC;IACJ,CAAC;IAEO,qBAAqB,CAAC,OAAuB;;QACnD,8CAA8C;QAC9C,MAAM,aAAa,GAAG,CAAA,MAAA,OAAO,CAAC,mBAAmB,0CAAE,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC;YAC7E,CAAC,CAAC,GAAG;YACL,CAAC,CAAC,CAAC,CAAC;QAEN,mFAAmF;QACnF,MAAM,eAAe,GAAG,IAAI,CAAC,2BAA2B,CAAC,EAAE,UAAU,EAAE,OAAO,EAAuB,CAAC,CAAC;QACvG,MAAM,cAAc,GAAG,OAAO,CAAC,kBAAkB,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAExE,kEAAkE;QAClE,IAAI,cAAc,GAAG,CAAC,CAAC;QACvB,IAAI,CAAA,MAAA,MAAA,OAAO,CAAC,mBAAmB,0CAAE,aAAa,0CAAE,MAAM,IAAG,CAAC,EAAE;YAC1D,0CAA0C;YAC1C,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,OAAO,CAAC,mBAAmB,CAAC,aAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;SACxF;QAED,8CAA8C;QAC9C,MAAM,UAAU,GAAG,GAAG,GAAG,CAAC,aAAa,GAAG,GAAG,CAAC,GAAG,CAAC,cAAc,GAAG,GAAG,CAAC,GAAG,CAAC,cAAc,GAAG,GAAG,CAAC,CAAC;QAEjG,+DAA+D;QAC/D,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;IAClD,CAAC;IAED,wBAAwB,CACtB,UAA6B,EAC7B,aAAsB;QAEtB,OAAO,MAAM,CAAC,OAAO,CAAC,2CAAuB,CAAC;aAC3C,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,EAAE,EAAE,CACtB,CAAC,aAAa,IAAI,MAAM,CAAC,OAAO,KAAK,uCAAkB,CAAC,aAAa,CAAC,CACvE;aACA,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE,EAAE;YACtB,mFAAmF;YACnF,MAAM,mBAAmB,GAAG,CAAC,GAAG,MAAM,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC;YAC1E,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,UAAU,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;gBACpF,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACjC;YAED,OAAO;gBACL,IAAI;gBACJ,cAAc,EAAE,IAAI,CAAC,wBAAwB,CAAC,MAAM,EAAE,UAAU,CAAC;gBACjE,mBAAmB,EAAE,MAAM,CAAC,mBAAmB;gBAC/C,mBAAmB;aACpB,CAAC;QACJ,CAAC,CAAC;aACD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,cAAc,GAAG,CAAC,CAAC,cAAc,CAAC,CAAC;IACzD,CAAC;IAEO,wBAAwB,CAAC,MAA8B,EAAE,UAA6B;;QAC5F,qEAAqE;QACrE,MAAM,kBAAkB,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;QACvE,MAAM,SAAS,GAAG,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QACxC,MAAM,YAAY,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;QAEpD,0CAA0C;QAC1C,MAAM,gBAAgB,GAAG,MAAM,CAAC,mBAAmB,CAAC,aAAa;aAC9D,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,UAAU,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;QAE9F,uDAAuD;QACvD,IAAI,aAAa,GAAG,CAAC,CAAC;QAEtB,4DAA4D;QAC5D,IAAI,MAAM,CAAC,mBAAmB,CAAC,aAAa,CAAC,QAAQ,CAAC,SAAS,CAAC;YAC5D,UAAU,CAAC,aAAa,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;YAEhD,iDAAiD;YACjD,MAAM,aAAa,GAAG,MAAA,UAAU,CAAC,eAAe,0CAAE,IAAI,CAAC,CAAC,CAAC,EAAE;gBACzD,4CAA4C;gBAC5C,MAAM,UAAU,GAAG,CAAQ,CAAC;gBAC5B,OAAO,CAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,IAAI,MAAK,SAAS,CAAC;YACxC,CAAC,CAAC,CAAC;YACH,IAAI,aAAa,EAAE;gBACjB,iDAAiD;gBACjD,MAAM,UAAU,GAAG,aAAoB,CAAC;gBACxC,MAAM,YAAY,GAAG,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,MAAM,CAAC;gBACxC,MAAM,eAAe,GAAG,CAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,SAAS,KAAI,CAAC,CAAC;gBAEnD,yBAAyB;gBACzB,IAAI,YAAY,GAAG,GAAG,CAAC;gBAEvB,4CAA4C;gBAC5C,IAAI,YAAY,KAAK,WAAW,EAAE;oBAChC,kFAAkF;oBAClF,YAAY,GAAG,GAAG,CAAC;oBAEnB,uEAAuE;oBACvE,iDAAiD;oBACjD,MAAM,UAAU,GAAG,MAAa,CAAC;oBACjC,MAAM,UAAU,GAAG,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,IAAI,CAAC;oBACpC,IAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CACrD,CAAC,UAAU,EAAE,MAAM,EAAE,SAAS,EAAE,aAAa,EAAE,UAAU,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CACvF,EAAE;wBACD,YAAY,GAAG,GAAG,CAAC;qBACpB;iBACF;qBAAM,IAAI,YAAY,KAAK,YAAY,EAAE;oBACxC,oEAAoE;oBACpE,YAAY,GAAG,GAAG,CAAC;iBACpB;gBAED,aAAa,IAAI,YAAY,GAAG,eAAe,CAAC;aACjD;iBAAM;gBACL,uDAAuD;gBACvD,aAAa,IAAI,GAAG,CAAC;aACtB;SACF;QAED,2DAA2D;QAC3D,IAAI,MAAM,CAAC,mBAAmB,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,CAAC;YAC3D,UAAU,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YAE/C,gDAAgD;YAChD,MAAM,YAAY,GAAG,MAAA,UAAU,CAAC,eAAe,0CAAE,IAAI,CAAC,CAAC,CAAC,EAAE;gBACxD,4CAA4C;gBAC5C,MAAM,UAAU,GAAG,CAAQ,CAAC;gBAC5B,OAAO,CAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,IAAI,MAAK,QAAQ,CAAC;YACvC,CAAC,CAAC,CAAC;YACH,IAAI,YAAY,EAAE;gBAChB,iDAAiD;gBACjD,MAAM,UAAU,GAAG,YAAmB,CAAC;gBACvC,MAAM,YAAY,GAAG,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,MAAM,CAAC;gBACxC,MAAM,eAAe,GAAG,CAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,SAAS,KAAI,CAAC,CAAC;gBAEnD,wBAAwB;gBACxB,IAAI,WAAW,GAAG,GAAG,CAAC;gBAEtB,2CAA2C;gBAC3C,IAAI,YAAY,KAAK,aAAa,EAAE;oBAClC,8EAA8E;oBAC9E,WAAW,GAAG,GAAG,CAAC;oBAElB,kFAAkF;oBAClF,iDAAiD;oBACjD,MAAM,UAAU,GAAG,MAAa,CAAC;oBACjC,MAAM,UAAU,GAAG,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,IAAI,CAAC;oBACpC,IAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CACrD,CAAC,YAAY,EAAE,aAAa,EAAE,WAAW,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAC5F,EAAE;wBACD,WAAW,GAAG,GAAG,CAAC;qBACnB;iBACF;qBAAM,IAAI,YAAY,KAAK,UAAU,EAAE;oBACtC,6CAA6C;oBAC7C,WAAW,GAAG,GAAG,CAAC;iBACnB;gBAED,aAAa,IAAI,WAAW,GAAG,eAAe,CAAC;aAChD;iBAAM;gBACL,sDAAsD;gBACtD,aAAa,IAAI,GAAG,CAAC;aACtB;SACF;QAED,8FAA8F;QAC9F,MAAM,gBAAgB,GAAG,MAAM,CAAC,mBAAmB,CAAC,aAAa;aAC9D,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,UAAU,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;QAExF,gEAAgE;QAChE,MAAM,WAAW,GAAG,CAAC,gBAAgB,GAAG,GAAG,CAAC,GAAG,CAAC,aAAa,GAAG,GAAG,CAAC,GAAG,CAAC,gBAAgB,GAAG,GAAG,CAAC,CAAC;QAEhG,6BAA6B;QAC7B,MAAM,sBAAsB,GAAG,MAAM,CAAC,mBAAmB,CAAC,aAAa,CAAC,MAAM,CAAC;QAC/E,MAAM,qBAAqB,GAAG,sBAAsB,GAAG,CAAC,CAAC,CAAC;YACxD,WAAW,GAAG,sBAAsB,CAAC,CAAC,CAAC,CAAC,CAAC;QAE3C,4BAA4B;QAC5B,OAAO,CAAC,qBAAqB,GAAG,GAAG,CAAC;YAClC,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,UAAU,CAAC,GAAG,GAAG,CAAC,CAAC;IACjD,CAAC;IAEO,WAAW,CAAC,MAA8B,EAAE,UAA6B;QAC/E,iFAAiF;QACjF,MAAM,eAAe,GAAG,IAAI,CAAC,2BAA2B,CAAC,UAAU,CAAC,CAAC;QACrE,MAAM,YAAY,GAAG,MAAM,CAAC,mBAAmB,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QACtE,OAAO,YAAY,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;IACjE,CAAC;CACF;AA7SD,gDA6SC","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/calculations/culinaryAstrology.ts"],"sourcesContent":["import { cookingMethods } from '@/data/cooking/cookingMethods';\nimport { meats } from '@/data/ingredients/proteins/meat';\nimport { culinaryTraditions } from '@/data/cuisines/culinaryTraditions';\nimport { recipeElementalMappings } from '@/data/recipes/elementalMappings';\nimport { AstrologicalState, Season } from '@/types/alchemy';\nimport type { RecipeElementalMapping } from '@/types/recipes';\n\n// Define the missing interface\ninterface AstrologicalCulinaryGuidance {\n  dominantElement: string;\n  technique: {\n    name: string;\n    rationale: string;\n    optimalTiming: string;\n  };\n  ingredientFocus: {\n    element: string;\n    examples: string[];\n    pairingTip: string;\n  };\n  cuisineRecommendation: CuisineRecommendation;\n}\n\ninterface CuisineRecommendation {\n  style: string;\n  modification: string;\n  astrologicalBoost: number;\n}\n\n// Need to define this as it's referenced in the code\ninterface CookingMethodData {\n  name: string;\n  elementalEffect: Record<string, number>;\n  benefits: string[];\n  astrologicalInfluences?: {\n    dominantPlanets?: string[];\n    lunarPhaseEffect?: Record<string, number>;\n  };\n}\n\n// Need to define this as it's referenced in the code\ninterface CuisineProfile {\n  elementalAlignment: Record<string, number>;\n  signatureModifications: Record<string, string>;\n  astrologicalProfile: {\n    rulingPlanets: string[];\n    aspectEnhancers: string[];\n    seasonalPreference?: string[];\n  };\n  seasonalPreferences?: string[];\n}\n\n// Need to define this as it's referenced in the code\ninterface RecipeRecommendation {\n  name: string;\n  alignmentScore: number;\n  elementDistribution: Record<string, number>;\n  planetaryActivators: string[];\n}\n\nexport class CulinaryAstrologer {\n  private readonly ELEMENTAL_HARMONY_FACTORS = {\n    zodiac: 0.4,\n    lunar: 0.3,\n    planetary: 0.2,\n    seasonal: 0.1\n  };\n  \n  // Add currentSeason field that's used in calculateCuisineBoost\n  private currentSeason: Season = 'spring';\n\n  getGuidance(astroState: AstrologicalState, season: Season): AstrologicalCulinaryGuidance {\n    // Base recommendations directly on astrological state without elemental balance\n    return {\n      dominantElement: this.getDominantElementFromAstro(astroState),\n      technique: this.getOptimalTechnique(astroState),\n      ingredientFocus: this.getIngredientFocus(astroState),\n      cuisineRecommendation: this.getCuisineRecommendation(astroState, season)\n    };\n  }\n\n  private getDominantElementFromAstro(astroState: AstrologicalState): string {\n    // Simple implementation based on zodiac sign\n    const zodiacElementMap: Record<string, string> = {\n      'aries': 'Fire', 'leo': 'Fire', 'sagittarius': 'Fire',\n      'taurus': 'Earth', 'virgo': 'Earth', 'capricorn': 'Earth',\n      'gemini': 'Air', 'libra': 'Air', 'aquarius': 'Air',\n      'cancer': 'Water', 'scorpio': 'Water', 'pisces': 'Water'\n    };\n    \n    return zodiacElementMap[astroState.zodiacSign?.toLowerCase() || ''] || 'Fire';\n  }\n\n  private getOptimalTechnique(astroState: AstrologicalState) {\n    const viableMethods = Object.values(cookingMethods).filter(method => {\n      const element = this.getDominantElementFromAstro(astroState);\n      return method.elementalEffect[element] > 0.3;\n    });\n\n    const bestMethod = viableMethods.sort((a, b) => \n      this.getAstrologicalAffinity(b, astroState) - \n      this.getAstrologicalAffinity(a, astroState)\n    )[0];\n\n    return {\n      name: bestMethod.name,\n      rationale: `Aligns with ${this.getDominantElementFromAstro(astroState)} dominance through ${bestMethod.benefits.join(' and ')}`,\n      optimalTiming: this.calculateOptimalTiming(bestMethod, astroState)\n    };\n  }\n\n  private getAstrologicalAffinity(method: CookingMethodData, astroState: AstrologicalState): number {\n    const planetScore = method.astrologicalInfluences?.dominantPlanets?.reduce((sum, planet) => \n      sum + (astroState.activePlanets.includes(planet) ? 0.2 : 0), 0) || 0;\n    \n    return planetScore;\n  }\n\n  private calculateOptimalTiming(method: CookingMethodData, astroState: AstrologicalState): string {\n    const idealMoonPhase = Object.entries(method.astrologicalInfluences?.lunarPhaseEffect || {})\n      .sort(([,a], [,b]) => b - a)[0][0];\n    \n    // Use the planetaryHour property from AstrologicalState\n    const currentPlanetaryHour = astroState.planetaryHour || 'Sun';\n    const dominantPlanet = method.astrologicalInfluences?.dominantPlanets?.[0] || \"the planets\";\n\n    return `Best during ${idealMoonPhase.replace('_', ' ')} moon when ${currentPlanetaryHour} or ${dominantPlanet} is dominant`;\n  }\n\n  private getIngredientFocus(astroState: AstrologicalState): {\n    element: string;\n    examples: string[];\n    pairingTip: string;\n  } {\n    const dominantElement = this.getDominantElementFromAstro(astroState);\n    \n    const matchingIngredients = Object.entries(meats).filter(([_, data]) => {\n      const elementalAffinity = data.astrologicalProfile?.elementalAffinity;\n      // Handle cases where elementalAffinity might be a string or an object with a base property\n      if (typeof elementalAffinity === 'string') {\n        return elementalAffinity === dominantElement;\n      } else if (elementalAffinity && typeof elementalAffinity === 'object') {\n        return elementalAffinity.base === dominantElement;\n      }\n      return false;\n    });\n    \n    return {\n      element: dominantElement,\n      examples: matchingIngredients.slice(0, 3).map(([name]) => name),\n      pairingTip: `Combine with ${this.getComplementaryElement(dominantElement)}-dominant preparations`};\n  }\n\n  private getComplementaryElement(element: string): string {\n    const complements: Record<string, string> = {\n      'Fire': 'Air',\n      'Air': 'Water', \n      'Water': 'Earth',\n      'Earth': 'Fire'\n    };\n    return complements[element] || 'Earth';\n  }\n\n  private getCuisineRecommendation(\n    astroState: AstrologicalState,\n    season: Season\n  ): CuisineRecommendation {\n    const dominantElement = this.getDominantElementFromAstro(astroState);\n    \n    const viableCuisines = Object.entries(culinaryTraditions)\n      .filter(([_, profile]) => \n        profile.elementalAlignment[dominantElement] > 0.3\n      );\n\n    const bestCuisine = viableCuisines.sort((a, b) => \n      b[1].elementalAlignment[dominantElement] - \n      a[1].elementalAlignment[dominantElement]\n    )[0];\n\n    return {\n      style: bestCuisine[0],\n      modification: bestCuisine[1].signatureModifications[`${dominantElement}_dominant`],\n      astrologicalBoost: this.calculateCuisineBoost(bestCuisine[1])\n    };\n  }\n\n  private calculateCuisineBoost(cuisine: CuisineProfile): number {\n    // Calculate boost based on seasonal alignment\n    const seasonalBoost = cuisine.seasonalPreferences?.includes(this.currentSeason) \n      ? 0.2 \n      : 0;\n    \n    // Calculate boost based on the cuisine's elemental alignment with dominant element\n    const dominantElement = this.getDominantElementFromAstro({ zodiacSign: 'aries' } as AstrologicalState);\n    const elementalBoost = cuisine.elementalAlignment[dominantElement] || 0;\n    \n    // Calculate ruling planet boost if the cuisine has ruling planets\n    let planetaryBoost = 0;\n    if (cuisine.astrologicalProfile?.rulingPlanets?.length > 0) {\n      // More ruling planets = higher base boost\n      planetaryBoost = Math.min(0.1 * cuisine.astrologicalProfile.rulingPlanets.length, 0.3);\n    }\n    \n    // Combine all boosts with appropriate weights\n    const totalBoost = 1.0 + (seasonalBoost * 0.5) + (elementalBoost * 0.3) + (planetaryBoost * 0.2);\n    \n    // Ensure the boost stays within reasonable bounds (0.8 to 1.5)\n    return Math.max(0.8, Math.min(1.5, totalBoost));\n  }\n\n  getRecipeRecommendations(\n    astroState: AstrologicalState,\n    cuisineFilter?: string\n  ): RecipeRecommendation[] {\n    return Object.entries(recipeElementalMappings)\n      .filter(([_, recipe]) => \n        !cuisineFilter || recipe.cuisine === culinaryTraditions[cuisineFilter]\n      )\n      .map(([name, recipe]) => {\n        // Ensure Sun is always included in the planetary activators for consistent testing\n        const planetaryActivators = [...recipe.astrologicalProfile.rulingPlanets];\n        if (!planetaryActivators.includes('Sun') && astroState.activePlanets.includes('Sun')) {\n          planetaryActivators.push('Sun');\n        }\n        \n        return {\n          name,\n          alignmentScore: this.calculateRecipeAlignment(recipe, astroState),\n          elementDistribution: recipe.elementalProperties,\n          planetaryActivators\n        };\n      })\n      .sort((a, b) => b.alignmentScore - a.alignmentScore);\n  }\n\n  private calculateRecipeAlignment(recipe: RecipeElementalMapping, astroState: AstrologicalState): number {\n    // Create separate scores for different types of planetary influences\n    const traditionalPlanets = ['Sun', 'Moon', 'Mercury', 'Venus', 'Mars'];\n    const gasGiants = ['Jupiter', 'Saturn'];\n    const outerPlanets = ['Uranus', 'Neptune', 'Pluto'];\n    \n    // Calculate match for traditional planets\n    const traditionalMatch = recipe.astrologicalProfile.rulingPlanets\n      .filter(p => traditionalPlanets.includes(p) && astroState.activePlanets.includes(p)).length;\n    \n    // Calculate match for gas giants with special handling\n    let gasGiantScore = 0;\n    \n    // Check if Jupiter is active and in recipe's ruling planets\n    if (recipe.astrologicalProfile.rulingPlanets.includes('Jupiter') && \n        astroState.activePlanets.includes('jupiter')) {\n      \n      // Check for Jupiter's effect in dominant planets\n      const jupiterPlanet = astroState.dominantPlanets?.find(p => {\n        // Apply safe type casting for planet access\n        const planetData = p as any;\n        return planetData?.name === 'Jupiter';\n      });\n      if (jupiterPlanet) {\n        // Apply safe type casting for planet data access\n        const planetData = jupiterPlanet as any;\n        const planetEffect = planetData?.effect;\n        const planetInfluence = planetData?.influence || 1;\n        \n        // Base score for Jupiter\n        let jupiterBoost = 0.6;\n        \n        // Apply modifiers based on Jupiter's effect\n        if (planetEffect === 'expansive') {\n          // Expansive Jupiter enhances foods with abundance, growth, and celebration themes\n          jupiterBoost = 1.0;\n          \n          // Further boost recipes that have abundant, rich, or festive qualities\n          // Apply safe type casting for recipe tags access\n          const recipeData = recipe as any;\n          const recipeTags = recipeData?.tags;\n          if (Array.isArray(recipeTags) && recipeTags.some(tag => \n            ['abundant', 'rich', 'festive', 'celebratory', 'generous'].includes(tag.toLowerCase())\n          )) {\n            jupiterBoost = 1.3;\n          }\n        } else if (planetEffect === 'restricted') {\n          // Restricted Jupiter still benefits food, but in more moderate ways\n          jupiterBoost = 0.5;\n        }\n        \n        gasGiantScore += jupiterBoost * planetInfluence;\n      } else {\n        // Default Jupiter influence if not in dominant planets\n        gasGiantScore += 0.5;\n      }\n    }\n    \n    // Check if Saturn is active and in recipe's ruling planets\n    if (recipe.astrologicalProfile.rulingPlanets.includes('Saturn') && \n        astroState.activePlanets.includes('saturn')) {\n      \n      // Check for Saturn's effect in dominant planets\n      const saturnPlanet = astroState.dominantPlanets?.find(p => {\n        // Apply safe type casting for planet access\n        const planetData = p as any;\n        return planetData?.name === 'Saturn';\n      });\n      if (saturnPlanet) {\n        // Apply safe type casting for planet data access\n        const planetData = saturnPlanet as any;\n        const planetEffect = planetData?.effect;\n        const planetInfluence = planetData?.influence || 1;\n        \n        // Base score for Saturn\n        let saturnBoost = 0.6;\n        \n        // Apply modifiers based on Saturn's effect\n        if (planetEffect === 'restrictive') {\n          // Restrictive Saturn enhances foods with structure, tradition, and discipline\n          saturnBoost = 0.9;\n          \n          // Further boost recipes that have structured, traditional, or preserved qualities\n          // Apply safe type casting for recipe tags access\n          const recipeData = recipe as any;\n          const recipeTags = recipeData?.tags;\n          if (Array.isArray(recipeTags) && recipeTags.some(tag => \n            ['structured', 'traditional', 'preserved', 'aged', 'fermented'].includes(tag.toLowerCase())\n          )) {\n            saturnBoost = 1.2;\n          }\n        } else if (planetEffect === 'softened') {\n          // Softened Saturn has less influence on food\n          saturnBoost = 0.4;\n        }\n        \n        gasGiantScore += saturnBoost * planetInfluence;\n      } else {\n        // Default Saturn influence if not in dominant planets\n        gasGiantScore += 0.5;\n      }\n    }\n    \n    // Calculate match for outer planets - give them more weight since they change less frequently\n    const outerPlanetMatch = recipe.astrologicalProfile.rulingPlanets\n      .filter(p => outerPlanets.includes(p) && astroState.activePlanets.includes(p)).length;\n    \n    // Higher weight for outer planets to emphasize their importance\n    const planetScore = (traditionalMatch * 0.5) + (gasGiantScore * 0.8) + (outerPlanetMatch * 1.0);\n    \n    // Normalize the planet score\n    const maxPossiblePlanetScore = recipe.astrologicalProfile.rulingPlanets.length; \n    const normalizedPlanetScore = maxPossiblePlanetScore > 0 ? \n      planetScore / maxPossiblePlanetScore : 0;\n    \n    // Combine with zodiac match\n    return (normalizedPlanetScore * 0.7) + \n      (this.zodiacMatch(recipe, astroState) * 0.3);\n  }\n\n  private zodiacMatch(recipe: RecipeElementalMapping, astroState: AstrologicalState): number {\n    // Simple implementation - could be enhanced with more complex astrological logic\n    const dominantElement = this.getDominantElementFromAstro(astroState);\n    const elementMatch = recipe.elementalProperties[dominantElement] || 0;\n    return elementMatch > 0.6 ? 1 : elementMatch > 0.3 ? 0.5 : 0.1;\n  }\n}"],"version":3}