3f52bb2f6e79e0f3381b3cd64d1759c9
"use strict";
/**
 * External Dependencies Mock Implementations
 *
 * Comprehensive mocks for external dependencies used in tests
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.allMocks = exports.mockAlchemicalContext = exports.mockSteeringFileIntelligence = exports.mockErrorHandler = exports.mockStatePreservationHooks = exports.mockDevelopmentExperienceOptimizations = exports.mockMCPServerIntegration = exports.mockAgentHooks = exports.mockReliableAstronomy = exports.mockUseRouter = exports.mockRouter = exports.mockCreateLogger = exports.mockLogger = exports.mockPlanetaryPositions = void 0;
const globals_1 = require("@jest/globals");
// Mock planetary positions data
exports.mockPlanetaryPositions = {
    sun: { sign: 'aries', degree: 8.5, exactLongitude: 8.5, isRetrograde: false },
    moon: { sign: 'aries', degree: 1.57, exactLongitude: 1.57, isRetrograde: false },
    mercury: { sign: 'aries', degree: 0.85, exactLongitude: 0.85, isRetrograde: true },
    venus: { sign: 'pisces', degree: 29.08, exactLongitude: 359.08, isRetrograde: true },
    mars: { sign: 'cancer', degree: 22.63, exactLongitude: 112.63, isRetrograde: false },
    jupiter: { sign: 'gemini', degree: 15.52, exactLongitude: 75.52, isRetrograde: false },
    saturn: { sign: 'pisces', degree: 24.12, exactLongitude: 354.12, isRetrograde: false },
    uranus: { sign: 'taurus', degree: 24.62, exactLongitude: 54.62, isRetrograde: false },
    neptune: { sign: 'pisces', degree: 29.93, exactLongitude: 359.93, isRetrograde: false },
    pluto: { sign: 'aquarius', degree: 3.5, exactLongitude: 333.5, isRetrograde: false },
    northNode: { sign: 'pisces', degree: 26.88, exactLongitude: 356.88, isRetrograde: true },
    southNode: { sign: 'virgo', degree: 26.88, exactLongitude: 176.88, isRetrograde: true }
};
// Mock logger implementation
exports.mockLogger = {
    info: globals_1.jest.fn(),
    debug: globals_1.jest.fn(),
    warn: globals_1.jest.fn(),
    error: globals_1.jest.fn(),
    log: globals_1.jest.fn()
};
// Mock createLogger function
exports.mockCreateLogger = globals_1.jest.fn(() => exports.mockLogger);
// Mock Next.js router
exports.mockRouter = {
    push: globals_1.jest.fn(),
    replace: globals_1.jest.fn(),
    prefetch: globals_1.jest.fn(),
    back: globals_1.jest.fn(),
    forward: globals_1.jest.fn(),
    refresh: globals_1.jest.fn(),
    pathname: '/',
    query: {},
    asPath: '/'
};
// Mock useRouter hook
const mockUseRouter = () => exports.mockRouter;
exports.mockUseRouter = mockUseRouter;
// Mock reliable astronomy utility
exports.mockReliableAstronomy = {
    getReliablePlanetaryPositions: globals_1.jest.fn(() => Promise.resolve(exports.mockPlanetaryPositions))
};
// Mock agent hooks
exports.mockAgentHooks = {
    useAgentHooks: () => ({
        hookState: { isActive: false, lastRun: null, results: [] },
        startAgentHooks: globals_1.jest.fn(),
        stopAgentHooks: globals_1.jest.fn(),
        triggerValidation: globals_1.jest.fn()
    }),
    usePlanetaryDataValidationHook: () => ({
        isValid: true,
        validationResult: { isValid: true, issues: [] },
        validatePlanetaryData: globals_1.jest.fn()
    }),
    useIngredientConsistencyHook: () => ({
        isConsistent: true,
        validationResult: { isValid: true, issues: [] },
        validateIngredients: globals_1.jest.fn()
    }),
    useTypeScriptCampaignHook: () => ({
        campaignActive: false,
        campaignTrigger: { triggered: false },
        checkErrorThreshold: globals_1.jest.fn()
    }),
    useBuildQualityMonitoringHook: () => ({
        quality: 'good',
        qualityResult: { isValid: true, issues: [] },
        monitorBuildQuality: globals_1.jest.fn()
    }),
    useQualityMetricsHook: () => ({
        metrics: {},
        updateMetrics: globals_1.jest.fn()
    })
};
// Mock MCP server integration
exports.mockMCPServerIntegration = {
    useMCPServerIntegration: () => ({
        isConnected: true,
        serverStatus: 'connected',
        availableTools: [],
        getAstrologicalData: globals_1.jest.fn(),
        getNutritionalData: globals_1.jest.fn(),
        getRecipeData: globals_1.jest.fn(),
        testFallbackStrategy: globals_1.jest.fn(() => Promise.resolve({
            overallReliability: 0.95,
            astrological: { source: 'primary' },
            nutritional: { source: 'primary' },
            recipes: { source: 'primary' }
        })),
        getServerStatus: globals_1.jest.fn(() => ({ connected: true, status: 'healthy' }))
    })
};
// Mock development experience optimizations
exports.mockDevelopmentExperienceOptimizations = {
    useDevelopmentExperienceOptimizations: () => ({
        optimizationsActive: true,
        performanceMetrics: {},
        updatePerformanceMetrics: globals_1.jest.fn(),
        getDevelopmentMetrics: globals_1.jest.fn(() => ({})),
        getPerformanceOptimizationRecommendations: globals_1.jest.fn(() => []),
        applyAutomaticOptimizations: globals_1.jest.fn(() => ({ applied: [], errors: [] }))
    })
};
// Mock state preservation hooks
exports.mockStatePreservationHooks = {
    useNavigationState: () => ({
        saveState: globals_1.jest.fn(),
        getState: globals_1.jest.fn(() => null)
    }),
    useScrollPreservation: () => ({
        restoreScrollPosition: globals_1.jest.fn()
    }),
    useAutoStateCleanup: globals_1.jest.fn(),
    useAstrologicalStatePreservation: () => ({
        saveAstrologicalState: globals_1.jest.fn(),
        restoreAstrologicalState: globals_1.jest.fn(),
        validateElementalCompatibility: globals_1.jest.fn(),
        getArchitecturalGuidance: globals_1.jest.fn(),
        getTechnologyStackGuidance: globals_1.jest.fn()
    }),
    useCulturalSensitivityGuidance: () => ({
        validateCulturalContent: globals_1.jest.fn(),
        getInclusiveLanguageGuidelines: globals_1.jest.fn()
    }),
    usePerformanceOptimizationGuidance: () => ({
        getOptimizationRecommendations: globals_1.jest.fn(),
        validatePerformanceMetrics: globals_1.jest.fn()
    })
};
// Mock error handling
exports.mockErrorHandler = {
    useErrorHandler: () => ({
        handleError: globals_1.jest.fn(),
        clearErrors: globals_1.jest.fn(),
        errors: []
    })
};
// Mock steering file intelligence
exports.mockSteeringFileIntelligence = {
    useSteeringFileIntelligence: () => ({
        getGuidance: globals_1.jest.fn(() => Promise.resolve({}))
    })
};
// Mock alchemical context
exports.mockAlchemicalContext = {
    useAlchemical: () => ({
        state: {
            astrologicalState: { sunSign: 'Aries' },
            elementalBalance: { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 }
        },
        planetaryPositions: exports.mockPlanetaryPositions,
        isDaytime: true
    })
};
// Export all mocks for easy importing
exports.allMocks = {
    mockPlanetaryPositions: exports.mockPlanetaryPositions,
    mockLogger: exports.mockLogger,
    mockCreateLogger: exports.mockCreateLogger,
    mockRouter: exports.mockRouter,
    mockUseRouter: exports.mockUseRouter,
    mockReliableAstronomy: exports.mockReliableAstronomy,
    mockAgentHooks: exports.mockAgentHooks,
    mockMCPServerIntegration: exports.mockMCPServerIntegration,
    mockDevelopmentExperienceOptimizations: exports.mockDevelopmentExperienceOptimizations,
    mockStatePreservationHooks: exports.mockStatePreservationHooks,
    mockErrorHandler: exports.mockErrorHandler,
    mockSteeringFileIntelligence: exports.mockSteeringFileIntelligence,
    mockAlchemicalContext: exports.mockAlchemicalContext
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,