{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/PerformanceMonitoringSystem.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/PerformanceMonitoringSystem.ts"],"sourcesContent":["/**\n * Performance Monitoring System\n * Perfect Codebase Campaign - Phase 4 Implementation\n *\n * Implements comprehensive performance monitoring with:\n * - Build time measurement using `time yarn build` integration\n * - Cache hit rate monitoring and memory usage tracking\n * - Performance regression detection with automatic alerts\n */\n\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { ProgressTracker } from './ProgressTracker';\n\nexport interface PerformanceMetrics {\n  buildTime: {\n    current: number;\n    target: number;\n    average: number;\n    trend: 'improving' | 'stable' | 'degrading';\n  };\n  cacheHitRate: {\n    current: number;\n    target: number;\n    average: number;\n    trend: 'improving' | 'stable' | 'degrading';\n  };\n  memoryUsage: {\n    current: number;\n    target: number;\n    peak: number;\n    average: number;\n  };\n  bundleSize: {\n    current: number;\n    target: number;\n    compressed: number;\n    trend: 'improving' | 'stable' | 'degrading';\n  };\n}\n\nexport interface PerformanceAlert {\n  type: 'build_time' | 'cache_hit_rate' | 'memory_usage' | 'bundle_size';\n  severity: 'warning' | 'critical';\n  message: string;\n  currentValue: number;\n  targetValue: number;\n  timestamp: Date;\n  recommendations: string[];\n}\n\nexport interface PerformanceReport {\n  timestamp: Date;\n  metrics: PerformanceMetrics;\n  alerts: PerformanceAlert[];\n  regressionDetected: boolean;\n  overallScore: number;\n  recommendations: string[];\n}\n\nexport class PerformanceMonitoringSystem extends ProgressTracker {\n  private performanceHistory: PerformanceMetrics[] = [];\n  private alerts: PerformanceAlert[] = [];\n  private monitoringInterval: NodeJS.Timeout | null = null;\n  private readonly PERFORMANCE_TARGETS = {\n    buildTime: 10, // seconds\n    cacheHitRate: 0.8, // 80%\n    memoryUsage: 50, // MB\n    bundleSize: 420, // kB\n  };\n\n  constructor() {\n    super();\n  }\n\n  /**\n   * Measure build time using time command integration\n   */\n  async measureBuildTime(): Promise<number> {\n    try {\n      console.log('📊 Measuring build time...');\n\n      // Use time command to measure build execution\n      const startTime = process.hrtime.bigint();\n\n      // Execute build with time measurement\n      const timeOutput = execSync('time -p yarn build 2>&1', {\n        encoding: 'utf8',\n        stdio: 'pipe',\n      });\n\n      const endTime = process.hrtime.bigint();\n      const buildTimeSeconds = Number(endTime - startTime) / 1_000_000_000;\n\n      // Also try to extract time from the time command output\n      const timeMatch = timeOutput.match(/real\\s+(\\d+\\.\\d+)/);\n      const measuredTime = timeMatch\n        ? parseFloat(timeMatch[1])\n        : buildTimeSeconds;\n\n      console.log(`⏱️  Build completed in ${measuredTime.toFixed(2)}s`);\n      return measuredTime;\n    } catch (error) {\n      console.warn(`⚠️  Build time measurement failed: ${error.message}`);\n\n      // Fallback to simple timing if time command fails\n      try {\n        const startTime = Date.now();\n        execSync('yarn build', { encoding: 'utf8', stdio: 'pipe' });\n        const endTime = Date.now();\n        const fallbackTime = (endTime - startTime) / 1000;\n\n        console.log(\n          `⏱️  Build completed in ${fallbackTime.toFixed(2)}s (fallback timing)`\n        );\n        return fallbackTime;\n      } catch (buildError) {\n        console.error(`❌ Build failed: ${buildError.message}`);\n        return -1;\n      }\n    }\n  }\n\n  /**\n   * Monitor cache hit rate from build system\n   */\n  async monitorCacheHitRate(): Promise<number> {\n    try {\n      // Check for Next.js cache information\n      if (fs.existsSync('.next')) {\n        const cacheDir = '.next/cache';\n        if (fs.existsSync(cacheDir)) {\n          // Count cache files and estimate hit rate\n          const cacheFiles = execSync(`find ${cacheDir} -type f | wc -l`, {\n            encoding: 'utf8',\n            stdio: 'pipe',\n          });\n\n          const cacheCount = parseInt(cacheFiles.trim()) || 0;\n\n          // Estimate cache hit rate based on cache file count\n          // This is a simplified estimation - in a real system, you'd track actual cache hits\n          const estimatedHitRate = Math.min(\n            0.95,\n            Math.max(0.5, cacheCount / 1000)\n          );\n\n          console.log(\n            `📈 Cache hit rate estimated: ${(estimatedHitRate * 100).toFixed(1)}%`\n          );\n          return estimatedHitRate;\n        }\n      }\n\n      // Check for other build system caches\n      const cacheDirs = ['.yarn/cache', 'node_modules/.cache', '.cache'];\n      let totalCacheSize = 0;\n\n      for (const dir of cacheDirs) {\n        if (fs.existsSync(dir)) {\n          try {\n            const sizeOutput = execSync(`du -sk ${dir} | cut -f1`, {\n              encoding: 'utf8',\n              stdio: 'pipe',\n            });\n            totalCacheSize += parseInt(sizeOutput.trim()) || 0;\n          } catch (error) {\n            // Ignore individual cache directory errors\n          }\n        }\n      }\n\n      // Estimate hit rate based on cache size (simplified heuristic)\n      const estimatedHitRate = totalCacheSize > 10000 ? 0.8 : 0.6;\n\n      console.log(\n        `📈 Cache hit rate estimated: ${(estimatedHitRate * 100).toFixed(1)}% (based on cache size: ${totalCacheSize}kB)`\n      );\n      return estimatedHitRate;\n    } catch (error) {\n      console.warn(`⚠️  Cache hit rate monitoring failed: ${error.message}`);\n      return 0.7; // Default reasonable estimate\n    }\n  }\n\n  /**\n   * Track memory usage during build and runtime\n   */\n  async trackMemoryUsage(): Promise<{ current: number; peak: number }> {\n    try {\n      // Get current Node.js process memory usage\n      const memUsage = process.memoryUsage();\n      const currentMB = Math.round(memUsage.heapUsed / 1024 / 1024);\n      const peakMB = Math.round(memUsage.heapTotal / 1024 / 1024);\n\n      // Also check system memory if available\n      try {\n        const systemMemOutput = execSync(\n          'ps -o pid,vsz,rss,comm -p $$ | tail -1',\n          {\n            encoding: 'utf8',\n            stdio: 'pipe',\n          }\n        );\n\n        const memMatch = systemMemOutput.match(/\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)/);\n        if (memMatch) {\n          const systemCurrentMB = Math.round(parseInt(memMatch[3]) / 1024); // RSS in MB\n          console.log(\n            `💾 Memory usage: ${currentMB}MB (heap), ${systemCurrentMB}MB (system)`\n          );\n          return {\n            current: Math.max(currentMB, systemCurrentMB),\n            peak: peakMB,\n          };\n        }\n      } catch (systemError) {\n        // Fallback to Node.js memory only\n      }\n\n      console.log(\n        `💾 Memory usage: ${currentMB}MB (current), ${peakMB}MB (peak)`\n      );\n      return { current: currentMB, peak: peakMB };\n    } catch (error) {\n      console.warn(`⚠️  Memory usage tracking failed: ${error.message}`);\n      return { current: 0, peak: 0 };\n    }\n  }\n\n  /**\n   * Detect performance regressions automatically\n   */\n  async detectPerformanceRegression(): Promise<boolean> {\n    if (this.performanceHistory.length < 3) {\n      return false; // Need at least 3 data points for trend analysis\n    }\n\n    const recent = this.performanceHistory.slice(-3);\n    let regressionDetected = false;\n\n    // Check build time regression (increasing trend)\n    const buildTimes = recent.map(m => m.buildTime.current);\n    if (buildTimes[2] > buildTimes[1] && buildTimes[1] > buildTimes[0]) {\n      const increase = ((buildTimes[2] - buildTimes[0]) / buildTimes[0]) * 100;\n      if (increase > 20) {\n        // 20% increase threshold\n        this.addAlert({\n          type: 'build_time',\n          severity: 'warning',\n          message: `Build time regression detected: ${increase.toFixed(1)}% increase over recent builds`,\n          currentValue: buildTimes[2],\n          targetValue: this.PERFORMANCE_TARGETS.buildTime,\n          timestamp: new Date(),\n          recommendations: [\n            'Check for new dependencies or code changes',\n            'Review build configuration for optimization opportunities',\n            'Consider cache invalidation or cleanup',\n          ],\n        });\n        regressionDetected = true;\n      }\n    }\n\n    // Check cache hit rate regression (decreasing trend)\n    const cacheRates = recent.map(m => m.cacheHitRate.current);\n    if (cacheRates[2] < cacheRates[1] && cacheRates[1] < cacheRates[0]) {\n      const decrease = ((cacheRates[0] - cacheRates[2]) / cacheRates[0]) * 100;\n      if (decrease > 15) {\n        // 15% decrease threshold\n        this.addAlert({\n          type: 'cache_hit_rate',\n          severity: 'warning',\n          message: `Cache hit rate regression detected: ${decrease.toFixed(1)}% decrease`,\n          currentValue: cacheRates[2],\n          targetValue: this.PERFORMANCE_TARGETS.cacheHitRate,\n          timestamp: new Date(),\n          recommendations: [\n            'Check cache configuration and invalidation policies',\n            'Review recent changes that might affect caching',\n            'Consider cache warming strategies',\n          ],\n        });\n        regressionDetected = true;\n      }\n    }\n\n    // Check memory usage regression (increasing trend)\n    const memoryUsages = recent.map(m => m.memoryUsage.current);\n    if (\n      memoryUsages[2] > memoryUsages[1] &&\n      memoryUsages[1] > memoryUsages[0]\n    ) {\n      const increase =\n        ((memoryUsages[2] - memoryUsages[0]) / memoryUsages[0]) * 100;\n      if (increase > 25) {\n        // 25% increase threshold\n        this.addAlert({\n          type: 'memory_usage',\n          severity: 'critical',\n          message: `Memory usage regression detected: ${increase.toFixed(1)}% increase`,\n          currentValue: memoryUsages[2],\n          targetValue: this.PERFORMANCE_TARGETS.memoryUsage,\n          timestamp: new Date(),\n          recommendations: [\n            'Check for memory leaks in recent code changes',\n            'Review data structures and caching strategies',\n            'Consider garbage collection optimization',\n          ],\n        });\n        regressionDetected = true;\n      }\n    }\n\n    return regressionDetected;\n  }\n\n  /**\n   * Generate automatic alerts for performance issues\n   */\n  private addAlert(alert: PerformanceAlert): void {\n    this.alerts.push(alert);\n\n    // Keep only recent alerts to prevent memory issues\n    if (this.alerts.length > 100) {\n      this.alerts = this.alerts.slice(-50);\n    }\n\n    // Log alert immediately\n    const severityIcon = alert.severity === 'critical' ? '🚨' : '⚠️';\n    console.log(`${severityIcon} Performance Alert: ${alert.message}`);\n\n    if (alert.recommendations.length > 0) {\n      console.log('💡 Recommendations:');\n      alert.recommendations.forEach(rec => console.log(`   • ${rec}`));\n    }\n  }\n\n  /**\n   * Get comprehensive performance metrics\n   */\n  async getPerformanceMetrics(): Promise<PerformanceMetrics> {\n    const buildTime = await this.measureBuildTime();\n    const cacheHitRate = await this.monitorCacheHitRate();\n    const memoryUsage = await this.trackMemoryUsage();\n    const bundleSize = await this.getBundleSize();\n\n    // Calculate averages from history\n    const buildTimeAvg =\n      this.performanceHistory.length > 0\n        ? this.performanceHistory.reduce(\n            (sum, m) => sum + m.buildTime.current,\n            0\n          ) / this.performanceHistory.length\n        : buildTime;\n\n    const cacheHitRateAvg =\n      this.performanceHistory.length > 0\n        ? this.performanceHistory.reduce(\n            (sum, m) => sum + m.cacheHitRate.current,\n            0\n          ) / this.performanceHistory.length\n        : cacheHitRate;\n\n    const memoryUsageAvg =\n      this.performanceHistory.length > 0\n        ? this.performanceHistory.reduce(\n            (sum, m) => sum + m.memoryUsage.current,\n            0\n          ) / this.performanceHistory.length\n        : memoryUsage.current;\n\n    // Determine trends\n    const buildTimeTrend = this.calculateTrend(\n      this.performanceHistory.map(m => m.buildTime.current),\n      buildTime\n    );\n    const cacheHitRateTrend = this.calculateTrend(\n      this.performanceHistory.map(m => m.cacheHitRate.current),\n      cacheHitRate\n    );\n    const bundleSizeTrend = this.calculateTrend(\n      this.performanceHistory.map(m => m.bundleSize.current),\n      bundleSize\n    );\n\n    const metrics: PerformanceMetrics = {\n      buildTime: {\n        current: buildTime,\n        target: this.PERFORMANCE_TARGETS.buildTime,\n        average: buildTimeAvg,\n        trend: buildTimeTrend,\n      },\n      cacheHitRate: {\n        current: cacheHitRate,\n        target: this.PERFORMANCE_TARGETS.cacheHitRate,\n        average: cacheHitRateAvg,\n        trend: cacheHitRateTrend,\n      },\n      memoryUsage: {\n        current: memoryUsage.current,\n        target: this.PERFORMANCE_TARGETS.memoryUsage,\n        peak: memoryUsage.peak,\n        average: memoryUsageAvg,\n      },\n      bundleSize: {\n        current: bundleSize,\n        target: this.PERFORMANCE_TARGETS.bundleSize,\n        compressed: Math.round(bundleSize * 0.7), // Estimate compressed size\n        trend: bundleSizeTrend,\n      },\n    };\n\n    // Store in history\n    this.performanceHistory.push(metrics);\n\n    // Keep only recent history\n    if (this.performanceHistory.length > 50) {\n      this.performanceHistory = this.performanceHistory.slice(-25);\n    }\n\n    return metrics;\n  }\n\n  /**\n   * Calculate trend from historical data\n   */\n  private calculateTrend(\n    history: number[],\n    current: number\n  ): 'improving' | 'stable' | 'degrading' {\n    if (history.length < 2) return 'stable';\n\n    const recent = history.slice(-3);\n    const average = recent.reduce((sum, val) => sum + val, 0) / recent.length;\n\n    const changePercent = ((current - average) / average) * 100;\n\n    if (Math.abs(changePercent) < 5) return 'stable';\n    return changePercent < 0 ? 'improving' : 'degrading';\n  }\n\n  /**\n   * Generate comprehensive performance report\n   */\n  async generatePerformanceReport(): Promise<PerformanceReport> {\n    const metrics = await this.getPerformanceMetrics();\n    const regressionDetected = await this.detectPerformanceRegression();\n\n    // Calculate overall performance score (0-100)\n    const buildTimeScore = Math.max(\n      0,\n      Math.min(\n        100,\n        (this.PERFORMANCE_TARGETS.buildTime /\n          Math.max(metrics.buildTime.current, 0.1)) *\n          100\n      )\n    );\n    const cacheHitRateScore = metrics.cacheHitRate.current * 100;\n    const memoryScore = Math.max(\n      0,\n      Math.min(\n        100,\n        (this.PERFORMANCE_TARGETS.memoryUsage /\n          Math.max(metrics.memoryUsage.current, 1)) *\n          100\n      )\n    );\n    const bundleSizeScore = Math.max(\n      0,\n      Math.min(\n        100,\n        (this.PERFORMANCE_TARGETS.bundleSize /\n          Math.max(metrics.bundleSize.current, 1)) *\n          100\n      )\n    );\n\n    const overallScore = Math.round(\n      (buildTimeScore + cacheHitRateScore + memoryScore + bundleSizeScore) / 4\n    );\n\n    // Generate recommendations\n    const recommendations: string[] = [];\n\n    if (metrics.buildTime.current > this.PERFORMANCE_TARGETS.buildTime) {\n      recommendations.push(\n        `Build time (${metrics.buildTime.current.toFixed(1)}s) exceeds target (${this.PERFORMANCE_TARGETS.buildTime}s)`\n      );\n    }\n\n    if (metrics.cacheHitRate.current < this.PERFORMANCE_TARGETS.cacheHitRate) {\n      recommendations.push(\n        `Cache hit rate (${(metrics.cacheHitRate.current * 100).toFixed(1)}%) below target (${this.PERFORMANCE_TARGETS.cacheHitRate * 100}%)`\n      );\n    }\n\n    if (metrics.memoryUsage.current > this.PERFORMANCE_TARGETS.memoryUsage) {\n      recommendations.push(\n        `Memory usage (${metrics.memoryUsage.current}MB) exceeds target (${this.PERFORMANCE_TARGETS.memoryUsage}MB)`\n      );\n    }\n\n    if (metrics.bundleSize.current > this.PERFORMANCE_TARGETS.bundleSize) {\n      recommendations.push(\n        `Bundle size (${metrics.bundleSize.current}kB) exceeds target (${this.PERFORMANCE_TARGETS.bundleSize}kB)`\n      );\n    }\n\n    return {\n      timestamp: new Date(),\n      metrics,\n      alerts: [...this.alerts],\n      regressionDetected,\n      overallScore,\n      recommendations,\n    };\n  }\n\n  /**\n   * Start continuous performance monitoring\n   */\n  startMonitoring(intervalMinutes: number = 5): void {\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n    }\n\n    console.log(\n      `📊 Starting performance monitoring (every ${intervalMinutes} minutes)`\n    );\n\n    this.monitoringInterval = setInterval(\n      async () => {\n        try {\n          await this.getPerformanceMetrics();\n          await this.detectPerformanceRegression();\n        } catch (error) {\n          console.warn(`⚠️  Performance monitoring error: ${error.message}`);\n        }\n      },\n      intervalMinutes * 60 * 1000\n    );\n  }\n\n  /**\n   * Stop continuous performance monitoring\n   */\n  stopMonitoring(): void {\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n      this.monitoringInterval = null;\n      console.log('📊 Performance monitoring stopped');\n    }\n  }\n\n  /**\n   * Export performance data for analysis\n   */\n  async exportPerformanceData(filePath: string): Promise<void> {\n    try {\n      const report = await this.generatePerformanceReport();\n      const exportData = {\n        timestamp: new Date().toISOString(),\n        report,\n        history: this.performanceHistory,\n        alerts: this.alerts,\n        targets: this.PERFORMANCE_TARGETS,\n      };\n\n      fs.writeFileSync(filePath, JSON.stringify(exportData, null, 2));\n      console.log(`📊 Performance data exported to: ${filePath}`);\n    } catch (error) {\n      throw new Error(`Failed to export performance data: ${error.message}`);\n    }\n  }\n\n  /**\n   * Get current alerts\n   */\n  getCurrentAlerts(): PerformanceAlert[] {\n    return [...this.alerts];\n  }\n\n  /**\n   * Clear all alerts\n   */\n  clearAlerts(): void {\n    this.alerts = [];\n    console.log('📊 Performance alerts cleared');\n  }\n\n  /**\n   * Get performance history\n   */\n  getPerformanceHistory(): PerformanceMetrics[] {\n    return [...this.performanceHistory];\n  }\n}\n"],"version":3}