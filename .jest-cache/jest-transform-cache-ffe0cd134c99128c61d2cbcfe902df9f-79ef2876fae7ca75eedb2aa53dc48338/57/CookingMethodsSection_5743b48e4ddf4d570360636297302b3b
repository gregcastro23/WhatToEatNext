6e954aa8e1e8ad641514e4237640707f
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CookingMethodsSection = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const lucide_react_1 = require("lucide-react");
const navigation_1 = require("next/navigation");
const hooks_1 = require("@/hooks");
const useAstrologicalState_1 = require("@/hooks/useAstrologicalState");
const CookingMethods_module_css_1 = __importDefault(require("./CookingMethods.module.css"));
const cookingMethodTips_1 = require("@/utils/cookingMethodTips");
const cookingMethods_1 = require("@/data/cooking/cookingMethods");
const CookingMethodsSection = ({ methods: propMethods, onSelectMethod, selectedMethodId, showToggle = true, initiallyExpanded = false, maxDisplayed = 6, onViewMore, isMainPageVersion = false, }) => {
    const router = (0, navigation_1.useRouter)();
    const [isExpanded, setIsExpanded] = (0, react_1.useState)(initiallyExpanded);
    const [expandedMethods, setExpandedMethods] = (0, react_1.useState)({});
    const [showIngredientSearch, setShowIngredientSearch] = (0, react_1.useState)(false);
    const [searchIngredient, setSearchIngredient] = (0, react_1.useState)('');
    const [ingredientCompatibility, setIngredientCompatibility] = (0, react_1.useState)({});
    const [error, setError] = (0, react_1.useState)(null);
    const [isLoading, setIsLoading] = (0, react_1.useState)(false);
    const [showAllMethods, setShowAllMethods] = (0, react_1.useState)(false);
    // Get astrological state for timing recommendations
    const astroState = (0, useAstrologicalState_1.useAstrologicalState)();
    // Convert cooking methods data to component format and add astrological scoring
    const methods = (0, react_1.useMemo)(() => {
        if (propMethods && propMethods.length > 0) {
            return propMethods;
        }
        // Convert from data format to component format with astrological scoring
        return Object.entries(cookingMethods_1.cookingMethods).map(([key, methodData]) => {
            const method = {
                id: key,
                name: methodData.name,
                description: `${methodData.benefits.join(', ')}`,
                elementalEffect: methodData.elementalEffect,
                duration: methodData.duration,
                suitable_for: methodData.suitable_for,
                benefits: methodData.benefits,
                alchemicalProperties: methodData.alchemicalProperties,
                astrologicalInfluences: methodData.astrologicalInfluences,
                thermodynamicProperties: methodData.thermodynamicProperties,
                score: calculateAstrologicalScore(methodData, astroState)
            };
            return method;
        });
    }, [propMethods, astroState]);
    // Calculate astrological score for a cooking method
    const calculateAstrologicalScore = (methodData, astroState) => {
        var _a, _b, _c;
        let score = 0.5; // Base score
        try {
            // Planetary alignment bonus
            if (((_a = methodData.astrologicalInfluences) === null || _a === void 0 ? void 0 : _a.dominantPlanets) && astroState.activePlanets) {
                const alignedPlanets = methodData.astrologicalInfluences.dominantPlanets.filter((planet) => astroState.activePlanets.includes(planet.toLowerCase()));
                score += (alignedPlanets.length / methodData.astrologicalInfluences.dominantPlanets.length) * 0.3;
            }
            // Lunar phase bonus
            if (((_b = methodData.astrologicalInfluences) === null || _b === void 0 ? void 0 : _b.lunarPhaseEffect) && astroState.lunarPhase) {
                const phaseEffect = methodData.astrologicalInfluences.lunarPhaseEffect[astroState.lunarPhase];
                if (phaseEffect) {
                    score += (phaseEffect - 0.5) * 0.2;
                }
            }
            // Planetary hour bonus
            if (((_c = methodData.astrologicalInfluences) === null || _c === void 0 ? void 0 : _c.dominantPlanets) && astroState.currentPlanetaryHour) {
                const isHourAligned = methodData.astrologicalInfluences.dominantPlanets.some((planet) => { var _a; return planet.toLowerCase() === ((_a = astroState.currentPlanetaryHour) === null || _a === void 0 ? void 0 : _a.toLowerCase()); });
                if (isHourAligned) {
                    score += 0.15;
                }
            }
            // Thermodynamic efficiency bonus
            if (methodData.thermodynamicProperties) {
                const efficiency = (methodData.thermodynamicProperties.heat + methodData.thermodynamicProperties.reactivity) /
                    (1 + methodData.thermodynamicProperties.entropy);
                score += (efficiency - 0.5) * 0.1;
            }
        }
        catch (error) {
            console.warn('Error calculating astrological score:', error);
        }
        return Math.min(0.95, Math.max(0.35, score));
    };
    // Get top method based on score
    const topMethod = (0, react_1.useMemo)(() => {
        if (!methods.length)
            return null;
        return [...methods].sort((a, b) => {
            const scoreA = a.score !== undefined ? a.score : 0;
            const scoreB = b.score !== undefined ? b.score : 0;
            return scoreB - scoreA;
        })[0];
    }, [methods]);
    // Sort methods by score and limit display for main page version
    const displayMethods = (0, react_1.useMemo)(() => {
        const sortedMethods = [...methods].sort((a, b) => {
            const scoreA = a.score !== undefined ? a.score : 0;
            const scoreB = b.score !== undefined ? b.score : 0;
            return scoreB - scoreA;
        });
        // For main page version, limit to maxDisplayed
        if (isMainPageVersion) {
            return sortedMethods.slice(0, maxDisplayed);
        }
        return showAllMethods ? sortedMethods : sortedMethods.slice(0, 8);
    }, [methods, showAllMethods, isMainPageVersion, maxDisplayed]);
    // Use our new ingredient mapping hook
    const { suggestAlternatives, calculateCompatibility, isLoading: ingredientMappingLoading, error: ingredientMappingError } = (0, hooks_1.useIngredientMapping)();
    // Auto-expand the section if we have methods and a pre-selected method
    (0, react_1.useEffect)(() => {
        var _a;
        if (methods.length > 0) {
            // Always keep expanded if â‰¤5 methods
            if (methods.length <= 5) {
                setIsExpanded(true);
            }
            // Also expand if there's a selected method
            if (selectedMethodId) {
                setIsExpanded(true);
                // Find the selected method
                const selectedMethod = methods.find(m => m.id === selectedMethodId);
                if (selectedMethod) {
                    // If the selected method has variations, expand it
                    if ((_a = selectedMethod.variations) === null || _a === void 0 ? void 0 : _a.length) {
                        setExpandedMethods(prev => ({
                            ...prev,
                            [selectedMethodId]: true
                        }));
                    }
                    // If this is a variation, find and expand its parent method
                    const parentMethod = methods.find(m => { var _a; return (_a = m.variations) === null || _a === void 0 ? void 0 : _a.some(v => v.id === selectedMethodId); });
                    if (parentMethod) {
                        setExpandedMethods(prev => ({
                            ...prev,
                            [parentMethod.id]: true
                        }));
                    }
                }
            }
        }
    }, [methods, selectedMethodId]);
    // Handle ingredient compatibility calculation
    const calculateIngredientCompatibility = () => {
        if (!searchIngredient.trim())
            return;
        // Calculate compatibility with each cooking method based on elemental properties
        const compatibilityResults = {};
        methods.forEach(method => {
            if (method.elementalEffect) {
                // Create a compatibility object from method's elemental effect
                const methodElemental = {
                    Fire: method.elementalEffect.Fire || 0,
                    Water: method.elementalEffect.Water || 0,
                    Earth: method.elementalEffect.Earth || 0,
                    Air: method.elementalEffect.Air || 0
                };
                // Calculate compatibility between ingredient and cooking method
                const result = calculateCompatibility(searchIngredient, {
                    name: method.name,
                    elementalProperties: methodElemental,
                    category: 'cooking_method'
                });
                if (result.success) {
                    compatibilityResults[method.id] = result.compatibility;
                }
                // Also calculate for variations if they exist
                if (method.variations) {
                    method.variations.forEach(variation => {
                        // Use parent method's elemental effect if variation doesn't have one
                        const variationElemental = variation.elementalEffect || method.elementalEffect;
                        if (variationElemental) {
                            const variationResult = calculateCompatibility(searchIngredient, {
                                name: variation.name,
                                elementalProperties: variationElemental,
                                category: 'cooking_method'
                            });
                            if (variationResult.success) {
                                compatibilityResults[variation.id] = variationResult.compatibility;
                            }
                        }
                    });
                }
            }
        });
        setIngredientCompatibility(compatibilityResults);
    };
    const toggleExpanded = () => {
        // Only allow toggling if there are more than 5 methods
        if (methods.length > 5) {
            setIsExpanded(prev => !prev);
        }
    };
    const toggleMethodExpanded = (methodId, e) => {
        // Prevent the click from selecting the method
        e.stopPropagation();
        setExpandedMethods(prev => ({
            ...prev,
            [methodId]: !prev[methodId]
        }));
    };
    // Toggle ingredient search section
    const toggleIngredientSearch = () => {
        setShowIngredientSearch(prev => !prev);
        // Clear results when hiding
        if (showIngredientSearch) {
            setIngredientCompatibility({});
            setSearchIngredient('');
        }
    };
    // Handle navigation to full cooking methods page
    const handleViewMore = () => {
        if (onViewMore) {
            onViewMore();
        }
        else {
            // Default navigation to cooking methods page
            // Preserve selected method context in URL params
            const params = new URLSearchParams();
            if (selectedMethodId) {
                params.set('selected', selectedMethodId);
            }
            const url = `/cooking-methods${params.toString() ? `?${params.toString()}` : ''}`;
            router.push(url);
        }
    };
    // Handle method selection with enhanced navigation context preservation
    const handleMethodSelect = (method) => {
        if (onSelectMethod) {
            onSelectMethod(method);
        }
        // For main page version, preserve context using enhanced state preservation
        if (isMainPageVersion) {
            // Import and use the state preservation utility
            try {
                const { saveNavigationState } = require('@/utils/statePreservation');
                const { getNavigationState } = require('@/utils/statePreservation');
                const currentState = getNavigationState();
                saveNavigationState({
                    ...currentState,
                    selectedCookingMethod: {
                        id: method.id,
                        name: method.name,
                        timestamp: Date.now()
                    }
                });
            }
            catch (error) {
                console.warn('Failed to store selected method using enhanced state preservation:', error);
                // Fallback to sessionStorage
                try {
                    sessionStorage.setItem('selectedCookingMethod', JSON.stringify({
                        id: method.id,
                        name: method.name,
                        timestamp: Date.now()
                    }));
                }
                catch (fallbackError) {
                    console.warn('Failed to store selected method in session storage:', fallbackError);
                }
            }
        }
    };
    // Calculate elemental transformation capacity from alchemical properties
    const getElementalTransformations = (method) => {
        const transformations = {
            Fire: 0,
            Water: 0,
            Earth: 0,
            Air: 0
        };
        // If method has alchemical properties, use them to calculate transformations
        if (method.alchemicalProperties) {
            // Spirit primarily influences Fire and Air
            if (method.alchemicalProperties.Spirit > 0) {
                transformations.Fire += method.alchemicalProperties.Spirit * 0.6;
                transformations.Air += method.alchemicalProperties.Spirit * 0.4;
            }
            // Essence primarily influences Water and Air
            if (method.alchemicalProperties.Essence > 0) {
                transformations.Water += method.alchemicalProperties.Essence * 0.6;
                transformations.Air += method.alchemicalProperties.Essence * 0.4;
            }
            // Matter primarily influences Earth and Water
            if (method.alchemicalProperties.Matter > 0) {
                transformations.Earth += method.alchemicalProperties.Matter * 0.6;
                transformations.Water += method.alchemicalProperties.Matter * 0.4;
            }
            // Substance primarily influences Earth and Fire
            if (method.alchemicalProperties.Substance > 0) {
                transformations.Earth += method.alchemicalProperties.Substance * 0.6;
                transformations.Fire += method.alchemicalProperties.Substance * 0.4;
            }
        }
        // If no alchemical properties, use elementalEffect as directional indicators
        else if (method.elementalEffect) {
            transformations.Fire = method.elementalEffect.Fire;
            transformations.Water = method.elementalEffect.Water;
            transformations.Earth = method.elementalEffect.Earth;
            transformations.Air = method.elementalEffect.Air;
        }
        return transformations;
    };
    // Determine if an element is increased or decreased by the method
    const getElementalDirection = (value) => {
        if (value > 0.5)
            return { direction: 'increase', intensity: (value - 0.5) * 2 };
        if (value < 0.5)
            return { direction: 'decrease', intensity: (0.5 - value) * 2 };
        return { direction: 'neutral', intensity: 0 };
    };
    // Get alchemical essence label from properties
    const getAlchemicalLabel = (method) => {
        if (!method.alchemicalProperties)
            return null;
        const { Spirit, Essence, Matter, Substance } = method.alchemicalProperties;
        const alchemical = [
            { name: 'Spirit', value: Spirit || 0 },
            { name: 'Essence', value: Essence || 0 },
            { name: 'Matter', value: Matter || 0 },
            { name: 'Substance', value: Substance || 0 }
        ].sort((a, b) => b.value - a.value);
        if (alchemical[0].value === 0)
            return null;
        return {
            primary: alchemical[0].name,
            secondary: alchemical[1].name
        };
    };
    // Map compatibility score to color and label
    const getCompatibilityLabel = (score) => {
        if (score >= 0.8)
            return { label: 'Excellent', className: 'compatibility-excellent' };
        if (score >= 0.6)
            return { label: 'Good', className: 'compatibility-good' };
        if (score >= 0.4)
            return { label: 'Fair', className: 'compatibility-fair' };
        if (score >= 0.2)
            return { label: 'Poor', className: 'compatibility-poor' };
        return { label: 'Incompatible', className: 'compatibility-bad' };
    };
    // Get score class for styling
    const getScoreClass = (score) => {
        if (score >= 0.8)
            return CookingMethods_module_css_1.default['score-excellent'];
        if (score >= 0.6)
            return CookingMethods_module_css_1.default['score-good'];
        if (score >= 0.4)
            return CookingMethods_module_css_1.default['score-fair'];
        if (score >= 0.2)
            return CookingMethods_module_css_1.default['score-poor'];
        return CookingMethods_module_css_1.default['score-bad'];
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: CookingMethods_module_css_1.default['cooking-methods-container'], children: [(0, jsx_runtime_1.jsxs)("div", { className: `${CookingMethods_module_css_1.default['cooking-methods-header']} ${!showToggle ? CookingMethods_module_css_1.default['no-toggle'] : ''}`, onClick: showToggle ? toggleExpanded : undefined, children: [(0, jsx_runtime_1.jsxs)("h3", { className: CookingMethods_module_css_1.default.title, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Sparkles, { size: 18, className: CookingMethods_module_css_1.default.titleIcon }), (0, jsx_runtime_1.jsx)("span", { className: CookingMethods_module_css_1.default.titleText, children: "Alchemical Cooking Methods" }), (0, jsx_runtime_1.jsxs)("span", { className: CookingMethods_module_css_1.default.titleCount, children: ["(", methods.length, ")"] })] }), topMethod && ((0, jsx_runtime_1.jsxs)("div", { className: CookingMethods_module_css_1.default['top-recommendation'], children: ["Top: ", (0, jsx_runtime_1.jsx)("span", { children: topMethod.name })] })), (0, jsx_runtime_1.jsx)("button", { className: `${CookingMethods_module_css_1.default['ingredient-search-toggle']} ${showIngredientSearch ? CookingMethods_module_css_1.default.active : ''}`, onClick: (e) => {
                            e.stopPropagation();
                            toggleIngredientSearch();
                        }, title: "Check ingredient compatibility", children: (0, jsx_runtime_1.jsx)(lucide_react_1.Search, { size: 18 }) }), showToggle && ((0, jsx_runtime_1.jsx)("button", { className: CookingMethods_module_css_1.default['toggle-button'], children: isExpanded ? (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronUp, { size: 18 }) : (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronDown, { size: 18 }) }))] }), showIngredientSearch && ((0, jsx_runtime_1.jsxs)("div", { className: CookingMethods_module_css_1.default['ingredient-search-container'], children: [(0, jsx_runtime_1.jsxs)("div", { className: CookingMethods_module_css_1.default['search-form'], children: [(0, jsx_runtime_1.jsx)("input", { type: "text", placeholder: "Enter ingredient name...", value: searchIngredient, onChange: (e) => setSearchIngredient(e.target.value), className: CookingMethods_module_css_1.default['ingredient-search-input'] }), (0, jsx_runtime_1.jsx)("button", { onClick: calculateIngredientCompatibility, disabled: isLoading || !searchIngredient.trim(), className: CookingMethods_module_css_1.default['search-button'], children: isLoading ? 'Loading...' : 'Check Compatibility' })] }), error && ((0, jsx_runtime_1.jsx)("div", { className: CookingMethods_module_css_1.default['error-message'], children: error })), Object.keys(ingredientCompatibility).length > 0 && ((0, jsx_runtime_1.jsx)("div", { className: CookingMethods_module_css_1.default['compatibility-info'], children: (0, jsx_runtime_1.jsxs)("p", { children: ["Showing compatibility for: ", (0, jsx_runtime_1.jsx)("strong", { children: searchIngredient })] }) }))] })), isExpanded && ((0, jsx_runtime_1.jsxs)("div", { className: CookingMethods_module_css_1.default['cooking-methods-content'], children: [(0, jsx_runtime_1.jsx)("div", { className: CookingMethods_module_css_1.default['methods-grid'], children: displayMethods.map((method) => {
                            var _a, _b, _c;
                            return ((0, jsx_runtime_1.jsxs)("div", { className: `${CookingMethods_module_css_1.default['method-card']} ${selectedMethodId === method.id ? CookingMethods_module_css_1.default.selected : ''}`, onClick: () => handleMethodSelect(method), children: [(0, jsx_runtime_1.jsxs)("div", { className: CookingMethods_module_css_1.default['method-header'], children: [(0, jsx_runtime_1.jsx)("h4", { className: CookingMethods_module_css_1.default['method-name'], children: method.name }), method.score !== undefined && ((0, jsx_runtime_1.jsxs)("div", { className: `${CookingMethods_module_css_1.default['method-score']} ${getScoreClass(method.score)}`, children: [(0, jsx_runtime_1.jsxs)("span", { className: CookingMethods_module_css_1.default['score-value'], children: [Math.round(method.score * 100), "%"] }), (0, jsx_runtime_1.jsx)("div", { className: CookingMethods_module_css_1.default['score-bar'], children: (0, jsx_runtime_1.jsx)("div", { className: CookingMethods_module_css_1.default['score-bar-fill'], style: { width: `${Math.round(method.score * 100)}%` } }) })] })), ingredientCompatibility[method.id] !== undefined && ((0, jsx_runtime_1.jsxs)("div", { className: `${CookingMethods_module_css_1.default['ingredient-compatibility']} ${CookingMethods_module_css_1.default[getCompatibilityLabel(ingredientCompatibility[method.id]).className]}`, children: [(0, jsx_runtime_1.jsx)("span", { children: getCompatibilityLabel(ingredientCompatibility[method.id]).label }), (0, jsx_runtime_1.jsxs)("span", { className: CookingMethods_module_css_1.default['compatibility-value'], children: [Math.round(ingredientCompatibility[method.id] * 100), "%"] }), (0, jsx_runtime_1.jsx)("div", { className: CookingMethods_module_css_1.default['compatibility-bar'], children: (0, jsx_runtime_1.jsx)("div", { className: CookingMethods_module_css_1.default['compatibility-bar-fill'], style: { width: `${Math.round(ingredientCompatibility[method.id] * 100)}%` } }) })] })), method.variations && method.variations.length > 0 && ((0, jsx_runtime_1.jsxs)("button", { className: CookingMethods_module_css_1.default['toggle-variations'], onClick: (e) => toggleMethodExpanded(method.id, e), "aria-label": expandedMethods[method.id] ? "Collapse variations" : "Expand variations", children: [(0, jsx_runtime_1.jsx)("span", { className: CookingMethods_module_css_1.default['variations-count'], children: method.variations.length }), expandedMethods[method.id] ?
                                                        (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronUp, { size: 16 }) :
                                                        (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronDown, { size: 16 })] }))] }), (0, jsx_runtime_1.jsx)("p", { className: CookingMethods_module_css_1.default['method-description'], children: method.description }), (0, jsx_runtime_1.jsxs)("div", { className: CookingMethods_module_css_1.default['transformation-container'], children: [(0, jsx_runtime_1.jsx)("div", { className: CookingMethods_module_css_1.default['transformation-header'], children: (0, jsx_runtime_1.jsx)("span", { children: "Elemental Transformations" }) }), (0, jsx_runtime_1.jsx)("div", { className: CookingMethods_module_css_1.default['elemental-transformations'], children: (() => {
                                                    const transformations = getElementalTransformations(method);
                                                    return Object.entries(transformations).map(([element, value]) => {
                                                        const { direction, intensity } = getElementalDirection(value);
                                                        const displayIntensity = Math.min(Math.round(intensity * 100), 100); // 0-100 range
                                                        // Skip elements with no significant change
                                                        if (direction === 'neutral')
                                                            return null;
                                                        return ((0, jsx_runtime_1.jsxs)("div", { className: `${CookingMethods_module_css_1.default['transformation-item']} ${CookingMethods_module_css_1.default[element.toLowerCase()]} ${CookingMethods_module_css_1.default[`transform-${direction}`]}`, title: `${direction === 'increase' ? 'Increases' : 'Decreases'} ${element} by ${displayIntensity}%`, children: [(0, jsx_runtime_1.jsxs)("div", { className: CookingMethods_module_css_1.default['element-icon'], children: [element === 'Fire' && (0, jsx_runtime_1.jsx)(lucide_react_1.Flame, { size: 16 }), element === 'Water' && (0, jsx_runtime_1.jsx)(lucide_react_1.Droplets, { size: 16 }), element === 'Earth' && (0, jsx_runtime_1.jsx)(lucide_react_1.Mountain, { size: 16 }), element === 'Air' && (0, jsx_runtime_1.jsx)(lucide_react_1.Wind, { size: 16 })] }), (0, jsx_runtime_1.jsxs)("div", { className: CookingMethods_module_css_1.default['transformation-label'], children: [(0, jsx_runtime_1.jsx)("span", { className: CookingMethods_module_css_1.default['element-name'], children: element }), (0, jsx_runtime_1.jsx)("div", { className: CookingMethods_module_css_1.default['direction-indicator'], children: direction === 'increase' ? (0, jsx_runtime_1.jsx)(lucide_react_1.ArrowUp, { size: 14 }) : direction === 'decrease' ? (0, jsx_runtime_1.jsx)(lucide_react_1.ArrowDown, { size: 14 }) : (0, jsx_runtime_1.jsx)(lucide_react_1.Minus, { size: 14 }) })] }), displayIntensity > 0 && ((0, jsx_runtime_1.jsxs)("span", { className: CookingMethods_module_css_1.default['intensity-value'], children: [direction === 'increase' ? '+' : '-', displayIntensity, "%"] }))] }, element));
                                                    }).filter(Boolean); // Filter out null items
                                                })() })] }), method.alchemicalProperties && ((0, jsx_runtime_1.jsxs)("div", { className: CookingMethods_module_css_1.default['alchemical-properties'], children: [(0, jsx_runtime_1.jsxs)("div", { className: CookingMethods_module_css_1.default['alchemy-header'], children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Zap, { size: 14, className: CookingMethods_module_css_1.default['alchemy-icon'] }), (0, jsx_runtime_1.jsx)("span", { children: "Alchemical Properties" })] }), getAlchemicalLabel(method) && ((0, jsx_runtime_1.jsxs)("div", { className: CookingMethods_module_css_1.default['alchemy-label'], children: ["Primary: ", (0, jsx_runtime_1.jsx)("span", { className: CookingMethods_module_css_1.default['alchemy-value'], children: (_a = getAlchemicalLabel(method)) === null || _a === void 0 ? void 0 : _a.primary }), ((_b = getAlchemicalLabel(method)) === null || _b === void 0 ? void 0 : _b.secondary) && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [" | Secondary: ", (0, jsx_runtime_1.jsx)("span", { className: CookingMethods_module_css_1.default['alchemy-value'], children: (_c = getAlchemicalLabel(method)) === null || _c === void 0 ? void 0 : _c.secondary })] }))] }))] })), method.astrologicalInfluences && ((0, jsx_runtime_1.jsxs)("div", { className: CookingMethods_module_css_1.default['astrological-timing'], children: [(0, jsx_runtime_1.jsxs)("div", { className: CookingMethods_module_css_1.default['timing-header'], children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Sparkles, { size: 14, className: CookingMethods_module_css_1.default['timing-icon'] }), (0, jsx_runtime_1.jsx)("span", { children: "Optimal Timing" })] }), (0, jsx_runtime_1.jsxs)("div", { className: CookingMethods_module_css_1.default['timing-recommendations'], children: [method.astrologicalInfluences.dominantPlanets && ((0, jsx_runtime_1.jsxs)("div", { className: CookingMethods_module_css_1.default['timing-item'], children: [(0, jsx_runtime_1.jsx)("span", { className: CookingMethods_module_css_1.default['timing-label'], children: "Best Hours:" }), (0, jsx_runtime_1.jsxs)("span", { className: CookingMethods_module_css_1.default['timing-value'], children: [method.astrologicalInfluences.dominantPlanets.slice(0, 2).join(', '), " hours"] }), astroState.currentPlanetaryHour &&
                                                                method.astrologicalInfluences.dominantPlanets.some((planet) => { var _a; return planet.toLowerCase() === ((_a = astroState.currentPlanetaryHour) === null || _a === void 0 ? void 0 : _a.toLowerCase()); }) && ((0, jsx_runtime_1.jsx)("span", { className: CookingMethods_module_css_1.default['timing-active'], children: "\u2022 Active Now" }))] })), method.astrologicalInfluences.lunarPhaseEffect && ((0, jsx_runtime_1.jsxs)("div", { className: CookingMethods_module_css_1.default['timing-item'], children: [(0, jsx_runtime_1.jsx)("span", { className: CookingMethods_module_css_1.default['timing-label'], children: "Lunar Phase:" }), (0, jsx_runtime_1.jsx)("span", { className: CookingMethods_module_css_1.default['timing-value'], children: Object.entries(method.astrologicalInfluences.lunarPhaseEffect)
                                                                    .sort(([, a], [, b]) => b - a)
                                                                    .slice(0, 1)
                                                                    .map(([phase]) => phase.replace('_', ' '))
                                                                    .join(', ') }), astroState.lunarPhase &&
                                                                method.astrologicalInfluences.lunarPhaseEffect[astroState.lunarPhase] &&
                                                                method.astrologicalInfluences.lunarPhaseEffect[astroState.lunarPhase] > 0.6 && ((0, jsx_runtime_1.jsx)("span", { className: CookingMethods_module_css_1.default['timing-active'], children: "\u2022 Favorable" }))] })), method.elementalEffect && ((0, jsx_runtime_1.jsxs)("div", { className: CookingMethods_module_css_1.default['timing-item'], children: [(0, jsx_runtime_1.jsx)("span", { className: CookingMethods_module_css_1.default['timing-label'], children: "Element:" }), (0, jsx_runtime_1.jsxs)("span", { className: CookingMethods_module_css_1.default['timing-value'], children: [Object.entries(method.elementalEffect)
                                                                        .sort(([, a], [, b]) => b - a)
                                                                        .slice(0, 1)
                                                                        .map(([element]) => element)
                                                                        .join(''), " dominant"] })] }))] })] })), (0, jsx_runtime_1.jsxs)("div", { className: CookingMethods_module_css_1.default['method-details'], children: [method.duration && ((0, jsx_runtime_1.jsxs)("div", { className: CookingMethods_module_css_1.default['detail-item'], children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Clock, { size: 14, className: CookingMethods_module_css_1.default['detail-icon'] }), (0, jsx_runtime_1.jsx)("span", { className: CookingMethods_module_css_1.default['detail-label'], children: "Duration:" }), (0, jsx_runtime_1.jsxs)("span", { className: CookingMethods_module_css_1.default['detail-value'], children: [method.duration.min, "-", method.duration.max, " min"] })] })), method.suitable_for && method.suitable_for.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: CookingMethods_module_css_1.default['detail-item'], children: [(0, jsx_runtime_1.jsx)(lucide_react_1.List, { size: 14, className: CookingMethods_module_css_1.default['detail-icon'] }), (0, jsx_runtime_1.jsx)("span", { className: CookingMethods_module_css_1.default['detail-label'], children: "Ideal for:" }), (0, jsx_runtime_1.jsxs)("span", { className: CookingMethods_module_css_1.default['detail-value'], children: [method.suitable_for.slice(0, 3).join(', '), method.suitable_for.length > 3 && '...'] })] })), method.benefits && method.benefits.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: CookingMethods_module_css_1.default['detail-item'], children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ThumbsUp, { size: 14, className: CookingMethods_module_css_1.default['detail-icon'] }), (0, jsx_runtime_1.jsx)("span", { className: CookingMethods_module_css_1.default['detail-label'], children: "Benefits:" }), (0, jsx_runtime_1.jsxs)("span", { className: CookingMethods_module_css_1.default['detail-value'], children: [method.benefits.slice(0, 1).join(', '), method.benefits.length > 1 && '...'] })] }))] }), method.variations && method.variations.length > 0 && expandedMethods[method.id] && ((0, jsx_runtime_1.jsxs)("div", { className: CookingMethods_module_css_1.default['variations-container'], children: [(0, jsx_runtime_1.jsxs)("h5", { className: CookingMethods_module_css_1.default['variations-header'], children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Globe, { size: 14, className: CookingMethods_module_css_1.default['variations-icon'] }), "Variations & Subcategories"] }), (0, jsx_runtime_1.jsx)("div", { className: CookingMethods_module_css_1.default['variations-list'], children: method.variations.map((variation) => ((0, jsx_runtime_1.jsxs)("div", { className: `${CookingMethods_module_css_1.default['variation-item']} ${selectedMethodId === variation.id ? CookingMethods_module_css_1.default.selected : ''}`, onClick: (e) => {
                                                        e.stopPropagation(); // Prevent parent click
                                                        onSelectMethod && onSelectMethod(variation);
                                                    }, children: [(0, jsx_runtime_1.jsxs)("div", { className: CookingMethods_module_css_1.default['variation-header'], children: [(0, jsx_runtime_1.jsx)("span", { className: CookingMethods_module_css_1.default['variation-name'], children: variation.name }), variation.culturalOrigin && ((0, jsx_runtime_1.jsx)("span", { className: CookingMethods_module_css_1.default['cultural-origin'], children: variation.culturalOrigin })), ingredientCompatibility[variation.id] !== undefined && ((0, jsx_runtime_1.jsxs)("div", { className: `${CookingMethods_module_css_1.default['ingredient-compatibility']} ${CookingMethods_module_css_1.default.small} ${CookingMethods_module_css_1.default[getCompatibilityLabel(ingredientCompatibility[variation.id]).className]}`, children: [(0, jsx_runtime_1.jsx)("span", { children: getCompatibilityLabel(ingredientCompatibility[variation.id]).label }), (0, jsx_runtime_1.jsxs)("span", { className: CookingMethods_module_css_1.default['compatibility-value'], children: [Math.round(ingredientCompatibility[variation.id] * 100), "%"] }), (0, jsx_runtime_1.jsx)("div", { className: CookingMethods_module_css_1.default['compatibility-bar'], children: (0, jsx_runtime_1.jsx)("div", { className: CookingMethods_module_css_1.default['compatibility-bar-fill'], style: { width: `${Math.round(ingredientCompatibility[variation.id] * 100)}%` } }) })] })), variation.score !== undefined && ((0, jsx_runtime_1.jsxs)("div", { className: `${CookingMethods_module_css_1.default['variation-score']} ${getScoreClass(variation.score)}`, children: [(0, jsx_runtime_1.jsxs)("span", { children: [Math.round(variation.score * 100), "%"] }), (0, jsx_runtime_1.jsx)("div", { className: CookingMethods_module_css_1.default['score-bar'], children: (0, jsx_runtime_1.jsx)("div", { className: CookingMethods_module_css_1.default['score-bar-fill'], style: { width: `${Math.round(variation.score * 100)}%` } }) })] }))] }), (variation.elementalEffect || variation.alchemicalProperties) && ((0, jsx_runtime_1.jsx)("div", { className: CookingMethods_module_css_1.default['elemental-transformations-small'], children: (() => {
                                                                const transformations = getElementalTransformations(variation);
                                                                return Object.entries(transformations).map(([element, value]) => {
                                                                    const { direction, intensity } = getElementalDirection(value);
                                                                    const displayIntensity = Math.min(Math.round(intensity * 100), 100); // 0-100 range
                                                                    // Skip elements with no significant change
                                                                    if (direction === 'neutral' || displayIntensity < 5)
                                                                        return null;
                                                                    return ((0, jsx_runtime_1.jsxs)("div", { className: `${CookingMethods_module_css_1.default['transformation-item-small']} ${CookingMethods_module_css_1.default[element.toLowerCase()]} ${CookingMethods_module_css_1.default[`transform-${direction}`]}`, title: `${direction === 'increase' ? 'Increases' : 'Decreases'} ${element} by ${displayIntensity}%`, children: [(0, jsx_runtime_1.jsxs)("div", { className: CookingMethods_module_css_1.default['element-icon-small'], children: [element === 'Fire' && (0, jsx_runtime_1.jsx)(lucide_react_1.Flame, { size: 12 }), element === 'Water' && (0, jsx_runtime_1.jsx)(lucide_react_1.Droplets, { size: 12 }), element === 'Earth' && (0, jsx_runtime_1.jsx)(lucide_react_1.Mountain, { size: 12 }), element === 'Air' && (0, jsx_runtime_1.jsx)(lucide_react_1.Wind, { size: 12 })] }), (0, jsx_runtime_1.jsx)("div", { className: CookingMethods_module_css_1.default['direction-indicator-small'], children: direction === 'increase' ? (0, jsx_runtime_1.jsx)(lucide_react_1.ArrowUp, { size: 10 }) : (0, jsx_runtime_1.jsx)(lucide_react_1.ArrowDown, { size: 10 }) }), displayIntensity > 0 && ((0, jsx_runtime_1.jsxs)("span", { className: CookingMethods_module_css_1.default['intensity-value-small'], children: [direction === 'increase' ? '+' : '-', displayIntensity, "%"] }))] }, element));
                                                                }).filter(Boolean); // Filter out null items
                                                            })() }))] }, variation.id))) })] })), selectedMethodId === method.id && ((0, jsx_runtime_1.jsxs)("div", { className: CookingMethods_module_css_1.default['expanded-details'], children: [(0, jsx_runtime_1.jsxs)("div", { className: CookingMethods_module_css_1.default['technical-tips'], children: [(0, jsx_runtime_1.jsxs)("div", { className: CookingMethods_module_css_1.default['section-header'], children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Info, { size: 14, className: CookingMethods_module_css_1.default['section-icon'] }), (0, jsx_runtime_1.jsx)("span", { children: "Expert Technical Tips" })] }), (0, jsx_runtime_1.jsx)("div", { className: CookingMethods_module_css_1.default['tips-grid'], children: (0, cookingMethodTips_1.getTechnicalTips)(method.name).slice(0, 5).map((tip, index) => ((0, jsx_runtime_1.jsx)("div", { className: CookingMethods_module_css_1.default['tip-item'], children: tip }, index))) })] }), (0, jsx_runtime_1.jsxs)("div", { className: CookingMethods_module_css_1.default['ideal-ingredients'], children: [(0, jsx_runtime_1.jsxs)("div", { className: CookingMethods_module_css_1.default['section-header'], children: [(0, jsx_runtime_1.jsx)(lucide_react_1.List, { size: 14, className: CookingMethods_module_css_1.default['section-icon'] }), (0, jsx_runtime_1.jsx)("span", { children: "Ideal Ingredients" })] }), (0, jsx_runtime_1.jsx)("div", { className: CookingMethods_module_css_1.default['ingredients-grid'], children: (0, cookingMethodTips_1.getIdealIngredients)(method.name).slice(0, 8).map((ingredient, index) => ((0, jsx_runtime_1.jsx)("div", { className: CookingMethods_module_css_1.default['ingredient-item'], children: ingredient }, index))) })] })] }))] }, method.id));
                        }) }), isMainPageVersion && methods.length > maxDisplayed ? ((0, jsx_runtime_1.jsx)("div", { className: CookingMethods_module_css_1.default['show-more-container'], children: (0, jsx_runtime_1.jsxs)("button", { className: CookingMethods_module_css_1.default['view-more-button'], onClick: handleViewMore, children: ["View All Methods (", methods.length, " total) ", (0, jsx_runtime_1.jsx)(lucide_react_1.ExternalLink, { size: 16 })] }) })) : (methods.length > 8 && !isMainPageVersion && ((0, jsx_runtime_1.jsx)("div", { className: CookingMethods_module_css_1.default['show-more-container'], children: (0, jsx_runtime_1.jsx)("button", { className: CookingMethods_module_css_1.default['show-more-button'], onClick: () => setShowAllMethods(!showAllMethods), children: showAllMethods ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: ["Show Less ", (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronUp, { size: 16 })] })) : ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: ["Show More (", methods.length - 8, " more) ", (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronDown, { size: 16 })] })) }) })))] }))] }));
};
exports.CookingMethodsSection = CookingMethodsSection;
exports.default = exports.CookingMethodsSection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,