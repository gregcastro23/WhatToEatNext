12ae2528514721cb9b38863aae4754dc
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSpiceConversionRatio = exports.getTraditionalBlends = exports.getSpicesByPreparationMethod = exports.getSubstitutions = exports.getCompatibleSpices = exports.getSpiceBlendComponents = exports.getSpicesByElementalProperty = exports.getSpicesByOrigin = exports.getSpicesBySubCategory = exports.spiceBlends = exports.groundSpices = exports.wholeSpices = exports.spices = exports.addHeatLevels = void 0;
const wholespices_1 = require("./wholespices");
Object.defineProperty(exports, "wholeSpices", { enumerable: true, get: function () { return wholespices_1.wholeSpices; } });
const groundspices_1 = require("./groundspices");
Object.defineProperty(exports, "groundSpices", { enumerable: true, get: function () { return groundspices_1.groundSpices; } });
const spiceBlends_1 = require("./spiceBlends");
Object.defineProperty(exports, "spiceBlends", { enumerable: true, get: function () { return spiceBlends_1.spiceBlends; } });
const elementalUtils_1 = require("@/utils/elementalUtils");
// Normalize elemental properties to sum to 1
const normalizeElementalProperties = (properties) => {
    if (!properties) {
        return {
            Fire: 0.25,
            Water: 0.25,
            Earth: 0.25,
            Air: 0.25,
        };
    }
    const sum = Object.values(properties).reduce((acc, val) => acc + val, 0);
    if (sum === 0) {
        return {
            Fire: 0.25,
            Water: 0.25,
            Earth: 0.25,
            Air: 0.25,
        };
    }
    return Object.entries(properties).reduce((acc, [key, value]) => ({
        ...acc,
        [key]: value / (sum || 1),
    }), {});
};
// Add heat levels based on Fire element proportion
const addHeatLevels = (spices) => {
    return Object.entries(spices).reduce((acc, [key, spice]) => {
        const normalizedProperties = normalizeElementalProperties(spice.elementalProperties);
        // Calculate heat level with more precision, based on Fire element with slight randomization
        const baseHeatLevel = Math.round(normalizedProperties.Fire * 10);
        const adjustedHeatLevel = Math.min(10, Math.max(1, baseHeatLevel + (Math.random() < 0.5 ? -1 : 1)));
        // Calculate potency based on dominant element with some variation
        const dominantElement = Object.entries(normalizedProperties).sort(([, a], [, b]) => b - a)[0][0];
        const potencyBase = normalizedProperties[dominantElement] * 8;
        const potency = Math.min(10, Math.max(1, Math.round(potencyBase + Math.random() * 2)));
        return {
            ...acc,
            [key]: {
                ...spice,
                elementalProperties: normalizedProperties,
                heatLevel: adjustedHeatLevel,
                potency: potency,
                intensity: Math.round((adjustedHeatLevel + potency) / 2),
            },
        };
    }, {});
};
exports.addHeatLevels = addHeatLevels;
// Combine all spice categories with heat levels
exports.spices = (0, elementalUtils_1.fixIngredientMappings)({
    ...wholespices_1.wholeSpices,
    ...groundspices_1.groundSpices,
    ...spiceBlends_1.spiceBlends,
    cumin: {
        name: 'cumin',
        elementalProperties: { Earth: 0.48, Fire: 0.27, Air: 0.17, Water: 0.08 },
        astrologicalProfile: {
            rulingPlanets: ['Mercury', 'Saturn'],
            favorableZodiac: ['virgo', 'capricorn'],
            elementalAffinity: {
                base: 'Earth',
                decanModifiers: {
                    first: { element: 'Earth', planet: 'Mercury' },
                    second: { element: 'Fire', planet: 'Saturn' },
                    third: { element: 'Air', planet: 'Uranus' },
                },
            },
        },
        qualities: ['earthy', 'warm', 'aromatic'],
        category: 'spice',
        varieties: {
            Indian: {
                origin: 'India',
                flavor: 'intense',
            },
            MiddleEastern: {
                origin: 'Middle East',
                flavor: 'balanced',
            },
        },
    },
    cinnamon: {
        name: 'cinnamon',
        elementalProperties: { Fire: 0.57, Air: 0.23, Earth: 0.12, Water: 0.08 },
        astrologicalProfile: {
            rulingPlanets: ['Sun', 'Moon'],
            favorableZodiac: ['leo', 'cancer'],
            elementalAffinity: {
                base: 'Fire',
                decanModifiers: {
                    first: { element: 'Fire', planet: 'Sun' },
                    second: { element: 'Air', planet: 'Moon' },
                    third: { element: 'Earth', planet: 'Venus' },
                },
            },
            lunarPhaseModifiers: {
                newMoon: {
                    elementalBoost: { Fire: 0.1, Earth: 0.05 },
                    preparationTips: ['Good for subtle infusions'],
                },
                fullMoon: {
                    elementalBoost: { Fire: 0.2 },
                    preparationTips: [
                        'Spice potency enhanced',
                        'Ideal for ceremonial uses',
                    ],
                },
                waxingCrescent: {
                    elementalBoost: { Fire: 0.15 },
                    preparationTips: ['Good for baking applications'],
                },
                firstQuarter: {
                    elementalBoost: { Fire: 0.1, Air: 0.1 },
                    preparationTips: ['Ideal for tea blends'],
                },
            },
        },
        qualities: ['warm', 'sweet', 'aromatic'],
        category: 'spice',
        varieties: {
            Ceylon: {
                origin: 'Sri Lanka',
                flavor: 'delicate, citrusy',
            },
            Cassia: {
                origin: 'China',
                flavor: 'strong, spicy',
            },
        },
    },
    cayenne: {
        name: 'cayenne',
        elementalProperties: { Fire: 0.72, Earth: 0.15, Air: 0.08, Water: 0.05 },
        astrologicalProfile: {
            rulingPlanets: ['Mars', 'Pluto'],
            favorableZodiac: ['aries', 'scorpio'],
            elementalAffinity: {
                base: 'Fire',
                decanModifiers: {
                    first: { element: 'Fire', planet: 'Mars' },
                    second: { element: 'Earth', planet: 'Pluto' },
                    third: { element: 'Air', planet: 'Uranus' },
                },
            },
            lunarPhaseModifiers: {
                newMoon: {
                    elementalBoost: { Fire: 0.1 },
                    preparationTips: ['Use sparingly', 'Good for subtle heat'],
                },
                waxingCrescent: {
                    elementalBoost: { Fire: 0.15 },
                    preparationTips: ['Building heat for marinades'],
                },
                firstQuarter: {
                    elementalBoost: { Fire: 0.2 },
                    preparationTips: ['Ideal for medium-spicy dishes'],
                },
                waxingGibbous: {
                    elementalBoost: { Fire: 0.25 },
                    preparationTips: ['Strong heat for bold dishes'],
                },
                fullMoon: {
                    elementalBoost: { Fire: 0.3 },
                    preparationTips: ['Maximum heat potential', 'Best for spicy feasts'],
                },
            },
        },
        qualities: ['hot', 'spicy', 'stimulating'],
        category: 'spice',
        varieties: {
            Red: {
                origin: 'Global',
                flavor: 'very hot',
            },
        },
    },
    paprika: {
        elementalProperties: { Fire: 0.45, Earth: 0.3, Air: 0.15, Water: 0.1 },
        name: 'paprika',
        qualities: ['earthy', 'warm', 'sweet'],
        category: 'spice',
        varieties: {
            sweet: {
                flavor: 'mild, fruity',
                heatLevel: 2,
            },
            smoked: {
                flavor: 'smoky, rich',
                heatLevel: 3,
            },
            hot: {
                flavor: 'spicy, robust',
                heatLevel: 6,
            },
        },
        lunarPhaseModifiers: {
            newMoon: {
                elementalBoost: { Earth: 0.1, Fire: 0.05 },
                preparationTips: ['Good for subtle color and flavor'],
            },
            waxingCrescent: {
                elementalBoost: { Fire: 0.1, Earth: 0.05 },
                preparationTips: ['Building flavor for rubs and marinades'],
            },
            firstQuarter: {
                elementalBoost: { Fire: 0.15, Earth: 0.1 },
                preparationTips: ['Ideal for stews and goulash'],
            },
            fullMoon: {
                elementalBoost: { Fire: 0.2, Earth: 0.1 },
                preparationTips: [
                    'Color and flavor most vibrant',
                    'Best for showcase dishes',
                ],
            },
            waningGibbous: {
                elementalBoost: { Earth: 0.15, Fire: 0.1 },
                preparationTips: ['Good for hearty roasted dishes'],
            },
            waningCrescent: {
                elementalBoost: { Earth: 0.2 },
                preparationTips: ['Best for subtle, earthy applications'],
            },
        },
    },
    turmeric: {
        elementalProperties: { Fire: 0.3, Earth: 0.5, Air: 0.1, Water: 0.1 },
        name: 'turmeric',
        qualities: ['earthy', 'bitter', 'warm'],
        category: 'spice',
        potency: 7,
        health_benefits: ['anti-inflammatory', 'antioxidant'],
        pigment_strength: 9,
        staining_risk: 8,
        lunarPhaseModifiers: {
            newMoon: {
                elementalBoost: { Earth: 0.15 },
                preparationTips: [
                    'Good for starting cleansing routines',
                    'Subtle medicinal use',
                ],
            },
            waxingCrescent: {
                elementalBoost: { Earth: 0.1, Fire: 0.1 },
                preparationTips: ['Building healing properties', 'Good for curries'],
            },
            firstQuarter: {
                elementalBoost: { Fire: 0.15, Earth: 0.15 },
                preparationTips: [
                    'Medicinal potency increasing',
                    'Ideal for golden milk',
                ],
            },
            waxingGibbous: {
                elementalBoost: { Earth: 0.2, Fire: 0.1 },
                preparationTips: [
                    'Strong healing properties',
                    'Good for therapeutic dishes',
                ],
            },
            fullMoon: {
                elementalBoost: { Earth: 0.25, Fire: 0.1 },
                preparationTips: [
                    'Maximum medicinal potency',
                    'Best for healing rituals',
                ],
            },
            waningGibbous: {
                elementalBoost: { Earth: 0.2, Water: 0.1 },
                preparationTips: ['Good for detoxifying recipes'],
            },
            lastQuarter: {
                elementalBoost: { Earth: 0.15, Water: 0.1 },
                preparationTips: ['Balancing properties for savory dishes'],
            },
            waningCrescent: {
                elementalBoost: { Earth: 0.1, Water: 0.15 },
                preparationTips: ['Gentle applications', 'Good for subtle coloring'],
            },
        },
    },
});
// Validate spice heat levels
Object.values(exports.spices).forEach((spice) => {
    var _a;
    if ((spice === null || spice === void 0 ? void 0 : spice.heatLevel) > 5 && ((_a = spice === null || spice === void 0 ? void 0 : spice.elementalProperties) === null || _a === void 0 ? void 0 : _a.Fire) < 0.3) {
        // console.error(`Fire element too low for heat in ${spice.name}`);
    }
});
// Helper functions
const getSpicesBySubCategory = (subCategory) => {
    return Object.entries(exports.spices)
        .filter(([_, value]) => (value === null || value === void 0 ? void 0 : value.subCategory) === subCategory)
        .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});
};
exports.getSpicesBySubCategory = getSpicesBySubCategory;
const getSpicesByOrigin = (origin) => {
    return Object.entries(exports.spices)
        .filter(([_, value]) => Array.isArray(value === null || value === void 0 ? void 0 : value.origin)
        ? value.origin.includes(origin)
        : (value === null || value === void 0 ? void 0 : value.origin) === origin)
        .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});
};
exports.getSpicesByOrigin = getSpicesByOrigin;
const getSpicesByElementalProperty = (element, minStrength = 0.3) => {
    return Object.entries(exports.spices)
        .filter(([_, value]) => value.elementalProperties[element] >= minStrength)
        .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});
};
exports.getSpicesByElementalProperty = getSpicesByElementalProperty;
const getSpiceBlendComponents = (blendName) => {
    const blend = spiceBlends_1.spiceBlends[blendName];
    return blend ? blend.baseIngredients : [];
};
exports.getSpiceBlendComponents = getSpiceBlendComponents;
const getCompatibleSpices = (spiceName) => {
    const spice = exports.spices[spiceName];
    if (!spice)
        return [];
    return Object.entries(exports.spices)
        .filter(([key, value]) => key !== spiceName &&
        Array.isArray(value === null || value === void 0 ? void 0 : value.affinities) &&
        Array.isArray(spice === null || spice === void 0 ? void 0 : spice.affinities) &&
        value.affinities.some((affinity) => spice.affinities.includes(affinity)))
        .map(([key, _]) => key);
};
exports.getCompatibleSpices = getCompatibleSpices;
const getSubstitutions = (spiceName) => {
    const spice = exports.spices[spiceName];
    if (!spice)
        return [];
    return Object.entries(exports.spices)
        .filter(([key, value]) => {
        var _a;
        return key !== spiceName &&
            Array.isArray(value === null || value === void 0 ? void 0 : value.qualities) &&
            Array.isArray(spice === null || spice === void 0 ? void 0 : spice.qualities) &&
            value.qualities.some((quality) => spice.qualities.includes(quality)) &&
            ((_a = value.elementalProperties) === null || _a === void 0 ? void 0 : _a[Object.keys(spice.elementalProperties)[0]]) >= 0.3;
    })
        .map(([key, _]) => key);
};
exports.getSubstitutions = getSubstitutions;
const getSpicesByPreparationMethod = (method) => {
    return Object.entries(exports.spices)
        .filter(([_, value]) => (value === null || value === void 0 ? void 0 : value.preparation) && Object.keys(value.preparation).includes(method))
        .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});
};
exports.getSpicesByPreparationMethod = getSpicesByPreparationMethod;
const getTraditionalBlends = (region) => {
    return Object.entries(spiceBlends_1.spiceBlends)
        .filter(([_, value]) => {
        var _a;
        return (Array.isArray(value.origin)
            ? value.origin.includes(region)
            : value.origin === region) || ((_a = value.regionalVariations) === null || _a === void 0 ? void 0 : _a[region]);
    })
        .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});
};
exports.getTraditionalBlends = getTraditionalBlends;
const getSpiceConversionRatio = (fromSpice, toSpice) => {
    const source = exports.spices[fromSpice];
    const target = exports.spices[toSpice];
    if (!source ||
        !target ||
        !source.conversionRatio ||
        !target.conversionRatio) {
        return null;
    }
    // Return a default ratio if implementation is missing
    return '1:1';
};
exports.getSpiceConversionRatio = getSpiceConversionRatio;
exports.default = exports.spices;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,