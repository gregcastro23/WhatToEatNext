{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/AlgorithmPerformanceValidator.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/AlgorithmPerformanceValidator.test.ts"],"sourcesContent":["/**\n * Algorithm Performance Validator Tests\n * Perfect Codebase Campaign - Phase 4 Implementation Tests\n */\n\nimport { \n  AlgorithmPerformanceValidator, \n  PerformanceBenchmark, \n  CachePerformanceMetrics,\n  RegressionTestResult,\n  AlgorithmPerformanceReport\n} from './AlgorithmPerformanceValidator';\nimport * as fs from 'fs';\n\n// Mock external dependencies\njest.mock('fs');\n\nconst mockFs = fs as jest.Mocked<typeof fs>;\n\ndescribe('AlgorithmPerformanceValidator', () => {\n  let validator: AlgorithmPerformanceValidator;\n\n  beforeEach(() => {\n    validator = new AlgorithmPerformanceValidator();\n    jest.clearAllMocks();\n  });\n\n  describe('runPerformanceBenchmarks', () => {\n    it('should run comprehensive performance benchmarks', async () => {\n      const benchmarks = await validator.runPerformanceBenchmarks();\n      \n      expect(benchmarks.length).toBeGreaterThan(0);\n      \n      // Check that all categories are represented\n      const categories = benchmarks.map(b => b.category);\n      expect(categories).toContain('algorithm');\n      expect(categories).toContain('cache');\n      expect(categories).toContain('database');\n      expect(categories).toContain('api');\n      expect(categories).toContain('ui');\n      \n      // Check benchmark structure\n      const firstBenchmark = benchmarks[0];\n      expect(firstBenchmark).toHaveProperty('name');\n      expect(firstBenchmark).toHaveProperty('category');\n      expect(firstBenchmark).toHaveProperty('baseline');\n      expect(firstBenchmark).toHaveProperty('current');\n      expect(firstBenchmark).toHaveProperty('improvement');\n      expect(firstBenchmark).toHaveProperty('target');\n      expect(firstBenchmark).toHaveProperty('status');\n      expect(firstBenchmark).toHaveProperty('samples');\n      expect(firstBenchmark).toHaveProperty('timestamp');\n      \n      // Check that samples are arrays of numbers\n      expect(Array.isArray(firstBenchmark.samples)).toBe(true);\n      expect(firstBenchmark.samples.length).toBeGreaterThan(0);\n      expect(typeof firstBenchmark.samples[0]).toBe('number');\n    });\n\n    it('should calculate performance improvements correctly', async () => {\n      const benchmarks = await validator.runPerformanceBenchmarks();\n      \n      for (const benchmark of benchmarks) {\n        expect(benchmark.improvement).toBeGreaterThanOrEqual(0);\n        expect(benchmark.improvement).toBeLessThanOrEqual(1);\n        \n        // Improvement should be calculated as (baseline - current) / baseline\n        const expectedImprovement = Math.max(0, (benchmark.baseline - benchmark.current) / benchmark.baseline);\n        expect(Math.abs(benchmark.improvement - expectedImprovement)).toBeLessThan(0.001);\n      }\n    });\n\n    it('should set correct benchmark status', async () => {\n      const benchmarks = await validator.runPerformanceBenchmarks();\n      \n      for (const benchmark of benchmarks) {\n        if (benchmark.current <= benchmark.target) {\n          expect(benchmark.status).toBe('passing');\n        } else if (benchmark.current <= benchmark.baseline) {\n          expect(benchmark.status).toBe('degraded');\n        } else {\n          expect(benchmark.status).toBe('failing');\n        }\n      }\n    });\n  });\n\n  describe('validateCachePerformance', () => {\n    it('should validate 3-tier caching system', async () => {\n      const cacheMetrics = await validator.validateCachePerformance();\n      \n      expect(cacheMetrics).toHaveProperty('tier1');\n      expect(cacheMetrics).toHaveProperty('tier2');\n      expect(cacheMetrics).toHaveProperty('tier3');\n      expect(cacheMetrics).toHaveProperty('overall');\n      \n      // Check tier 1 (memory cache)\n      expect(cacheMetrics.tier1.name).toBe('memory');\n      expect(cacheMetrics.tier1.hitRate).toBeGreaterThanOrEqual(0);\n      expect(cacheMetrics.tier1.hitRate).toBeLessThanOrEqual(1);\n      expect(cacheMetrics.tier1.avgResponseTime).toBeGreaterThan(0);\n      \n      // Check tier 2 (Redis cache)\n      expect(cacheMetrics.tier2.name).toBe('redis');\n      expect(cacheMetrics.tier2.hitRate).toBeGreaterThanOrEqual(0);\n      expect(cacheMetrics.tier2.hitRate).toBeLessThanOrEqual(1);\n      expect(cacheMetrics.tier2.avgResponseTime).toBeGreaterThan(0);\n      \n      // Check tier 3 (database cache)\n      expect(cacheMetrics.tier3.name).toBe('database');\n      expect(cacheMetrics.tier3.hitRate).toBeGreaterThanOrEqual(0);\n      expect(cacheMetrics.tier3.hitRate).toBeLessThanOrEqual(1);\n      expect(cacheMetrics.tier3.avgResponseTime).toBeGreaterThan(0);\n      \n      // Check overall metrics\n      expect(cacheMetrics.overall.hitRate).toBeGreaterThanOrEqual(0);\n      expect(cacheMetrics.overall.hitRate).toBeLessThanOrEqual(1);\n      expect(cacheMetrics.overall.avgResponseTime).toBeGreaterThan(0);\n      expect(cacheMetrics.overall.efficiency).toBeGreaterThanOrEqual(0);\n      expect(cacheMetrics.overall.efficiency).toBeLessThanOrEqual(100);\n    });\n\n    it('should generate cache performance alerts when hit rate is low', async () => {\n      // Mock low cache performance\n      const mockValidateMemoryCache = jest.spyOn(validator as any, 'validateMemoryCache');\n      mockValidateMemoryCache.mockResolvedValue({\n        name: 'memory',\n        hitRate: 0.5, // Low hit rate\n        avgResponseTime: 5,\n        size: 50,\n        maxSize: 100\n      });\n\n      await validator.validateCachePerformance();\n      \n      const alerts = validator.getCurrentAlerts();\n      const cacheAlert = alerts.find(alert => alert.type === 'cache_miss');\n      \n      expect(cacheAlert).toBeDefined();\n      expect(cacheAlert?.message).toContain('hit rate');\n      \n      mockValidateMemoryCache.mockRestore();\n    });\n  });\n\n  describe('detectPerformanceRegressions', () => {\n    it('should detect performance regressions', async () => {\n      // First, run benchmarks to establish baseline\n      await validator.runPerformanceBenchmarks();\n      \n      // Mock degraded performance for second run\n      const mockRunAlgorithmBenchmark = jest.spyOn(validator as any, 'runAlgorithmBenchmark');\n      mockRunAlgorithmBenchmark.mockResolvedValue([200, 210, 205, 195, 200]); // Slower performance\n      \n      // Run benchmarks again\n      await validator.runPerformanceBenchmarks();\n      \n      const regressionTests = await validator.detectPerformanceRegressions();\n      \n      expect(regressionTests.length).toBeGreaterThan(0);\n      \n      const regressionTest = regressionTests[0];\n      expect(regressionTest).toHaveProperty('testName');\n      expect(regressionTest).toHaveProperty('category');\n      expect(regressionTest).toHaveProperty('previousPerformance');\n      expect(regressionTest).toHaveProperty('currentPerformance');\n      expect(regressionTest).toHaveProperty('regressionDetected');\n      expect(regressionTest).toHaveProperty('regressionPercentage');\n      expect(regressionTest).toHaveProperty('threshold');\n      expect(regressionTest).toHaveProperty('recommendations');\n      \n      mockRunAlgorithmBenchmark.mockRestore();\n    });\n\n    it('should not detect regression when performance improves', async () => {\n      // First, run benchmarks to establish baseline\n      await validator.runPerformanceBenchmarks();\n      \n      // Mock improved performance for all benchmark types\n      const mockRunAlgorithmBenchmark = jest.spyOn(validator as any, 'runAlgorithmBenchmark');\n      const mockRunCacheBenchmark = jest.spyOn(validator as any, 'runCacheBenchmark');\n      const mockRunDatabaseBenchmark = jest.spyOn(validator as any, 'runDatabaseBenchmark');\n      const mockRunApiBenchmark = jest.spyOn(validator as any, 'runApiBenchmark');\n      const mockRunUiBenchmark = jest.spyOn(validator as any, 'runUiBenchmark');\n      \n      mockRunAlgorithmBenchmark.mockResolvedValue([30, 35, 32, 28, 30]); // Better performance\n      mockRunCacheBenchmark.mockResolvedValue([2, 2.5, 2.2, 1.8, 2]); // Better performance\n      mockRunDatabaseBenchmark.mockResolvedValue([80, 85, 82, 78, 80]); // Better performance\n      mockRunApiBenchmark.mockResolvedValue([150, 155, 152, 148, 150]); // Better performance\n      mockRunUiBenchmark.mockResolvedValue([20, 25, 22, 18, 20]); // Better performance\n      \n      // Run benchmarks again\n      await validator.runPerformanceBenchmarks();\n      \n      const regressionTests = await validator.detectPerformanceRegressions();\n      \n      // Should have tests but no regressions detected (or very few due to randomness)\n      const regressionsDetected = regressionTests.filter(t => t.regressionDetected);\n      expect(regressionsDetected.length).toBeLessThanOrEqual(2); // Allow for some randomness in mock data\n      \n      mockRunAlgorithmBenchmark.mockRestore();\n      mockRunCacheBenchmark.mockRestore();\n      mockRunDatabaseBenchmark.mockRestore();\n      mockRunApiBenchmark.mockRestore();\n      mockRunUiBenchmark.mockRestore();\n    });\n\n    it('should generate alerts for detected regressions', async () => {\n      // First, run benchmarks\n      await validator.runPerformanceBenchmarks();\n      \n      // Mock significantly degraded performance\n      const mockRunAlgorithmBenchmark = jest.spyOn(validator as any, 'runAlgorithmBenchmark');\n      mockRunAlgorithmBenchmark.mockResolvedValue([300, 310, 305, 295, 300]); // Much slower\n      \n      // Run benchmarks again\n      await validator.runPerformanceBenchmarks();\n      \n      await validator.detectPerformanceRegressions();\n      \n      const alerts = validator.getCurrentAlerts();\n      const regressionAlert = alerts.find(alert => alert.type === 'regression');\n      \n      expect(regressionAlert).toBeDefined();\n      expect(regressionAlert?.message).toContain('regression detected');\n      \n      mockRunAlgorithmBenchmark.mockRestore();\n    });\n  });\n\n  describe('validateImprovementMaintenance', () => {\n    it('should validate 50% improvement maintenance', async () => {\n      // Run benchmarks to populate history\n      await validator.runPerformanceBenchmarks();\n      \n      const improvementMaintained = await validator.validateImprovementMaintenance();\n      \n      expect(typeof improvementMaintained).toBe('boolean');\n    });\n\n    it('should return false when no benchmark history exists', async () => {\n      const improvementMaintained = await validator.validateImprovementMaintenance();\n      \n      expect(improvementMaintained).toBe(false);\n    });\n\n    it('should generate alert when improvement is below target', async () => {\n      // Mock poor performance benchmarks\n      const mockBenchmarkAlgorithms = jest.spyOn(validator as any, 'benchmarkAlgorithms');\n      mockBenchmarkAlgorithms.mockResolvedValue([\n        {\n          name: 'test_algorithm',\n          category: 'algorithm',\n          baseline: 100,\n          current: 95, // Only 5% improvement\n          improvement: 0.05,\n          target: 50,\n          status: 'failing',\n          samples: [95],\n          timestamp: new Date()\n        }\n      ]);\n      \n      await validator.runPerformanceBenchmarks();\n      await validator.validateImprovementMaintenance();\n      \n      const alerts = validator.getCurrentAlerts();\n      const improvementAlert = alerts.find(alert => alert.type === 'slow_algorithm');\n      \n      expect(improvementAlert).toBeDefined();\n      expect(improvementAlert?.message).toContain('improvement below target');\n      \n      mockBenchmarkAlgorithms.mockRestore();\n    });\n  });\n\n  describe('generatePerformanceReport', () => {\n    it('should generate comprehensive performance report', async () => {\n      const report = await validator.generatePerformanceReport();\n      \n      expect(report).toHaveProperty('timestamp');\n      expect(report).toHaveProperty('benchmarks');\n      expect(report).toHaveProperty('cacheMetrics');\n      expect(report).toHaveProperty('regressionTests');\n      expect(report).toHaveProperty('overallScore');\n      expect(report).toHaveProperty('improvementMaintained');\n      expect(report).toHaveProperty('recommendations');\n      expect(report).toHaveProperty('alerts');\n      \n      expect(report.timestamp).toBeInstanceOf(Date);\n      expect(Array.isArray(report.benchmarks)).toBe(true);\n      expect(Array.isArray(report.regressionTests)).toBe(true);\n      expect(Array.isArray(report.recommendations)).toBe(true);\n      expect(Array.isArray(report.alerts)).toBe(true);\n      \n      expect(typeof report.overallScore).toBe('number');\n      expect(report.overallScore).toBeGreaterThanOrEqual(0);\n      expect(report.overallScore).toBeLessThanOrEqual(100);\n      \n      expect(typeof report.improvementMaintained).toBe('boolean');\n    });\n\n    it('should include recommendations based on performance issues', async () => {\n      // Mock poor performance to trigger recommendations\n      const mockBenchmarkAlgorithms = jest.spyOn(validator as any, 'benchmarkAlgorithms');\n      mockBenchmarkAlgorithms.mockResolvedValue([\n        {\n          name: 'slow_algorithm',\n          category: 'algorithm',\n          baseline: 100,\n          current: 150, // Worse than baseline\n          improvement: -0.5,\n          target: 50,\n          status: 'failing',\n          samples: [150],\n          timestamp: new Date()\n        }\n      ]);\n      \n      const report = await validator.generatePerformanceReport();\n      \n      expect(report.recommendations.length).toBeGreaterThan(0);\n      expect(report.recommendations.some(rec => rec.includes('algorithm'))).toBe(true);\n      \n      mockBenchmarkAlgorithms.mockRestore();\n    });\n  });\n\n  describe('alert management', () => {\n    it('should manage alerts correctly', async () => {\n      const initialAlerts = validator.getCurrentAlerts();\n      expect(initialAlerts).toHaveLength(0);\n      \n      // Trigger alerts by running performance validation with poor metrics\n      const mockValidateMemoryCache = jest.spyOn(validator as any, 'validateMemoryCache');\n      mockValidateMemoryCache.mockResolvedValue({\n        name: 'memory',\n        hitRate: 0.4, // Very low hit rate\n        avgResponseTime: 10,\n        size: 50,\n        maxSize: 100\n      });\n      \n      await validator.validateCachePerformance();\n      \n      const alertsAfterValidation = validator.getCurrentAlerts();\n      expect(alertsAfterValidation.length).toBeGreaterThan(0);\n      \n      validator.clearAlerts();\n      \n      const alertsAfterClear = validator.getCurrentAlerts();\n      expect(alertsAfterClear).toHaveLength(0);\n      \n      mockValidateMemoryCache.mockRestore();\n    });\n  });\n\n  describe('data export', () => {\n    it('should export performance data to file', async () => {\n      mockFs.writeFileSync.mockImplementation(() => {});\n      \n      await validator.exportPerformanceData('./test-performance-data.json');\n      \n      expect(mockFs.writeFileSync).toHaveBeenCalledWith(\n        './test-performance-data.json',\n        expect.stringContaining('\"timestamp\"')\n      );\n    });\n\n    it('should handle export errors gracefully', async () => {\n      mockFs.writeFileSync.mockImplementation(() => {\n        throw new Error('Write failed');\n      });\n      \n      await expect(\n        validator.exportPerformanceData('./test-performance-data.json')\n      ).rejects.toThrow('Failed to export performance data');\n    });\n  });\n\n  describe('benchmark history', () => {\n    it('should maintain benchmark history', async () => {\n      const initialHistory = validator.getBenchmarkHistory();\n      expect(initialHistory).toHaveLength(0);\n      \n      await validator.runPerformanceBenchmarks();\n      \n      const historyAfterBenchmarks = validator.getBenchmarkHistory();\n      expect(historyAfterBenchmarks.length).toBeGreaterThan(0);\n      \n      // Run benchmarks again\n      await validator.runPerformanceBenchmarks();\n      \n      const historyAfterSecondRun = validator.getBenchmarkHistory();\n      expect(historyAfterSecondRun.length).toBeGreaterThan(historyAfterBenchmarks.length);\n    });\n\n    it('should limit benchmark history size', async () => {\n      // Mock a large number of benchmarks\n      const mockBenchmarks = Array.from({ length: 1200 }, (_, i) => ({\n        name: `test_${i}`,\n        category: 'algorithm' as const,\n        baseline: 100,\n        current: 80,\n        improvement: 0.2,\n        target: 50,\n        status: 'passing' as const,\n        samples: [80],\n        timestamp: new Date()\n      }));\n      \n      // Directly set the history to test size limiting\n      (validator as any).benchmarkHistory = mockBenchmarks;\n      \n      // Run benchmarks to trigger history cleanup\n      await validator.runPerformanceBenchmarks();\n      \n      const history = validator.getBenchmarkHistory();\n      expect(history.length).toBeLessThanOrEqual(500); // Should be limited to 500\n    });\n  });\n\n  describe('benchmark categories', () => {\n    it('should benchmark all performance categories', async () => {\n      const benchmarks = await validator.runPerformanceBenchmarks();\n      \n      const categories = [...new Set(benchmarks.map(b => b.category))];\n      \n      expect(categories).toContain('algorithm');\n      expect(categories).toContain('cache');\n      expect(categories).toContain('database');\n      expect(categories).toContain('api');\n      expect(categories).toContain('ui');\n      \n      expect(categories.length).toBe(5);\n    });\n\n    it('should have realistic performance ranges for each category', async () => {\n      const benchmarks = await validator.runPerformanceBenchmarks();\n      \n      const algorithmBenchmarks = benchmarks.filter(b => b.category === 'algorithm');\n      const cacheBenchmarks = benchmarks.filter(b => b.category === 'cache');\n      const databaseBenchmarks = benchmarks.filter(b => b.category === 'database');\n      const apiBenchmarks = benchmarks.filter(b => b.category === 'api');\n      const uiBenchmarks = benchmarks.filter(b => b.category === 'ui');\n      \n      // Algorithm benchmarks should be in reasonable range (50-300ms)\n      algorithmBenchmarks.forEach(b => {\n        expect(b.current).toBeGreaterThan(10);\n        expect(b.current).toBeLessThan(500);\n      });\n      \n      // Cache benchmarks should be fast (1-20ms)\n      cacheBenchmarks.forEach(b => {\n        expect(b.current).toBeGreaterThan(0);\n        expect(b.current).toBeLessThan(50);\n      });\n      \n      // Database benchmarks should be slower (50-500ms)\n      databaseBenchmarks.forEach(b => {\n        expect(b.current).toBeGreaterThan(10);\n        expect(b.current).toBeLessThan(1000);\n      });\n      \n      // API benchmarks should be in network range (100-1000ms)\n      apiBenchmarks.forEach(b => {\n        expect(b.current).toBeGreaterThan(50);\n        expect(b.current).toBeLessThan(2000);\n      });\n      \n      // UI benchmarks should vary by operation type\n      uiBenchmarks.forEach(b => {\n        expect(b.current).toBeGreaterThan(1);\n        expect(b.current).toBeLessThan(3000);\n      });\n    });\n  });\n});"],"version":3}