9bf2718838a5347efef043e50793417a
"use strict";
/**
 * Import Cleanup System
 * Automated import detection, removal, and organization system
 * Part of the Kiro Optimization Campaign System
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_IMPORT_CLEANUP_CONFIG = exports.ImportCleanupSystem = void 0;
const child_process_1 = require("child_process");
const fs = __importStar(require("fs"));
const logger_1 = require("../../utils/logger");
class ImportCleanupSystem {
    config;
    processedFiles = new Set();
    constructor(config) {
        this.config = config;
    }
    /**
     * Execute comprehensive import cleanup
     */
    async executeCleanup(targetFiles) {
        const startTime = Date.now();
        logger_1.logger.info('Starting import cleanup system execution');
        try {
            // Get files to process
            const filesToProcess = targetFiles || await this.getTypeScriptFiles();
            const batchedFiles = this.batchFiles(filesToProcess);
            let totalResult = {
                filesProcessed: [],
                unusedImportsRemoved: 0,
                importsOrganized: 0,
                styleViolationsFixed: 0,
                buildValidationPassed: true,
                errors: [],
                warnings: []
            };
            // Process files in batches
            for (let i = 0; i < batchedFiles.length; i++) {
                const batch = batchedFiles[i];
                logger_1.logger.info(`Processing batch ${i + 1}/${batchedFiles.length} (${batch.length} files)`);
                const batchResult = await this.processBatch(batch);
                totalResult = this.mergeBatchResults(totalResult, batchResult);
                // Validate build after each batch if enabled
                if (this.config.safetyValidationEnabled &&
                    (i + 1) % this.config.buildValidationFrequency === 0) {
                    const buildValid = await this.validateBuild();
                    if (!buildValid) {
                        totalResult.buildValidationPassed = false;
                        totalResult.errors.push(`Build validation failed after batch ${i + 1}`);
                        break;
                    }
                }
            }
            const executionTime = Date.now() - startTime;
            logger_1.logger.info(`Import cleanup completed in ${executionTime}ms`, {
                filesProcessed: totalResult.filesProcessed.length,
                unusedImportsRemoved: totalResult.unusedImportsRemoved,
                importsOrganized: totalResult.importsOrganized
            });
            return totalResult;
        }
        catch (error) {
            logger_1.logger.error('Import cleanup system failed', error);
            return {
                filesProcessed: [],
                unusedImportsRemoved: 0,
                importsOrganized: 0,
                styleViolationsFixed: 0,
                buildValidationPassed: false,
                errors: [error.message],
                warnings: []
            };
        }
    }
    /**
     * Detect unused imports across the codebase
     */
    async detectUnusedImports(filePaths) {
        const files = filePaths || await this.getTypeScriptFiles();
        const unusedImports = [];
        for (const filePath of files) {
            try {
                const fileUnusedImports = await this.detectUnusedImportsInFile(filePath);
                unusedImports.push(...fileUnusedImports);
            }
            catch (error) {
                logger_1.logger.warn(`Failed to analyze imports in ${filePath}`, error);
            }
        }
        return unusedImports;
    }
    /**
     * Remove unused imports from files
     */
    async removeUnusedImports(filePaths) {
        let removedCount = 0;
        for (const filePath of filePaths) {
            try {
                const removed = await this.removeUnusedImportsFromFile(filePath);
                removedCount += removed;
                this.processedFiles.add(filePath);
            }
            catch (error) {
                logger_1.logger.error(`Failed to remove unused imports from ${filePath}`, error);
            }
        }
        return removedCount;
    }
    /**
     * Organize imports according to style rules
     */
    async organizeImports(filePaths) {
        let organizedCount = 0;
        for (const filePath of filePaths) {
            try {
                const organized = await this.organizeImportsInFile(filePath);
                if (organized) {
                    organizedCount++;
                    this.processedFiles.add(filePath);
                }
            }
            catch (error) {
                logger_1.logger.error(`Failed to organize imports in ${filePath}`, error);
            }
        }
        return organizedCount;
    }
    /**
     * Enforce import style consistency
     */
    async enforceImportStyle(filePaths) {
        let fixedCount = 0;
        for (const filePath of filePaths) {
            try {
                const fixed = await this.enforceImportStyleInFile(filePath);
                if (fixed) {
                    fixedCount++;
                    this.processedFiles.add(filePath);
                }
            }
            catch (error) {
                logger_1.logger.error(`Failed to enforce import style in ${filePath}`, error);
            }
        }
        return fixedCount;
    }
    // Private implementation methods
    async processBatch(filePaths) {
        const result = {
            filesProcessed: [],
            unusedImportsRemoved: 0,
            importsOrganized: 0,
            styleViolationsFixed: 0,
            buildValidationPassed: true,
            errors: [],
            warnings: []
        };
        // Step 1: Remove unused imports
        try {
            result.unusedImportsRemoved = await this.removeUnusedImports(filePaths);
        }
        catch (error) {
            result.errors.push(`Unused import removal failed: ${error.message}`);
        }
        // Step 2: Organize imports
        if (this.config.organizationRules.groupExternalImports ||
            this.config.organizationRules.groupInternalImports) {
            try {
                result.importsOrganized = await this.organizeImports(filePaths);
            }
            catch (error) {
                result.errors.push(`Import organization failed: ${error.message}`);
            }
        }
        // Step 3: Enforce style consistency
        if (this.config.importStyleEnforcement) {
            try {
                result.styleViolationsFixed = await this.enforceImportStyle(filePaths);
            }
            catch (error) {
                result.errors.push(`Import style enforcement failed: ${error.message}`);
            }
        }
        result.filesProcessed = Array.from(this.processedFiles);
        return result;
    }
    async detectUnusedImportsInFile(filePath) {
        const content = fs.readFileSync(filePath, 'utf8');
        const lines = content.split('\n');
        const unusedImports = [];
        // Parse import statements
        const importRegex = /^import\s+(?:type\s+)?(?:\{([^}]+)\}|\*\s+as\s+(\w+)|(\w+))\s+from\s+['"]([^'"]+)['"];?/;
        const typeImportRegex = /^import\s+type\s+/;
        for (let i = 0; i < lines.length; i++) {
            const line = lines[i].trim();
            const match = line.match(importRegex);
            if (match) {
                const isTypeImport = typeImportRegex.test(line);
                const importStatement = line;
                // Extract imported names
                let importedNames = [];
                if (match[1]) {
                    // Named imports: { name1, name2 }
                    importedNames = match[1].split(',').map(name => name.trim());
                }
                else if (match[2]) {
                    // Namespace import: * as name
                    importedNames = [match[2]];
                }
                else if (match[3]) {
                    // Default import: name
                    importedNames = [match[3]];
                }
                // Check if each imported name is used
                for (const importName of importedNames) {
                    if (!this.isImportUsed(content, importName, i)) {
                        unusedImports.push({
                            filePath,
                            importName,
                            importLine: i + 1,
                            importStatement,
                            isTypeImport
                        });
                    }
                }
            }
        }
        return unusedImports;
    }
    isImportUsed(content, importName, importLineIndex) {
        const lines = content.split('\n');
        // Remove the import line from consideration
        const contentWithoutImport = lines
            .filter((_, index) => index !== importLineIndex)
            .join('\n');
        // Check for usage patterns
        const usagePatterns = [
            new RegExp(`\\b${importName}\\b`, 'g'),
            new RegExp(`\\b${importName}\\.`, 'g'),
            new RegExp(`\\b${importName}\\(`, 'g'),
            new RegExp(`<${importName}\\b`, 'g'),
            new RegExp(`extends\\s+${importName}\\b`, 'g'),
            new RegExp(`implements\\s+${importName}\\b`, 'g'),
            new RegExp(`:\\s*${importName}\\b`, 'g'), // Type annotation
        ];
        return usagePatterns.some(pattern => pattern.test(contentWithoutImport));
    }
    async removeUnusedImportsFromFile(filePath) {
        const unusedImports = await this.detectUnusedImportsInFile(filePath);
        if (unusedImports.length === 0) {
            return 0;
        }
        const content = fs.readFileSync(filePath, 'utf8');
        const lines = content.split('\n');
        let removedCount = 0;
        // Group unused imports by line
        const unusedByLine = new Map();
        for (const unused of unusedImports) {
            const lineIndex = unused.importLine - 1;
            if (!unusedByLine.has(lineIndex)) {
                unusedByLine.set(lineIndex, []);
            }
            unusedByLine.get(lineIndex)?.push(unused);
        }
        // Process lines in reverse order to maintain line numbers
        const sortedLines = Array.from(unusedByLine.keys()).sort((a, b) => b - a);
        for (const lineIndex of sortedLines) {
            const lineUnused = unusedByLine.get(lineIndex);
            if (!lineUnused)
                continue;
            const originalLine = lines[lineIndex];
            // If all imports on this line are unused, remove the entire line
            const allImportsOnLine = this.extractAllImportsFromLine(originalLine);
            const allUnused = allImportsOnLine.every(imp => lineUnused.some(unused => unused.importName === imp));
            if (allUnused) {
                lines.splice(lineIndex, 1);
                removedCount += lineUnused.length;
            }
            else {
                // Remove only specific unused imports from the line
                let modifiedLine = originalLine;
                for (const unused of lineUnused) {
                    modifiedLine = this.removeImportFromLine(modifiedLine, unused.importName);
                    removedCount++;
                }
                lines[lineIndex] = modifiedLine;
            }
        }
        // Write the modified content back
        fs.writeFileSync(filePath, lines.join('\n'), 'utf8');
        return removedCount;
    }
    extractAllImportsFromLine(line) {
        const importRegex = /^import\s+(?:type\s+)?(?:\{([^}]+)\}|\*\s+as\s+(\w+)|(\w+))\s+from/;
        const match = line.match(importRegex);
        if (!match)
            return [];
        if (match[1]) {
            // Named imports
            return match[1].split(',').map(name => name.trim());
        }
        else if (match[2]) {
            // Namespace import
            return [match[2]];
        }
        else if (match[3]) {
            // Default import
            return [match[3]];
        }
        return [];
    }
    removeImportFromLine(line, importName) {
        // Handle different import patterns
        const patterns = [
            // Remove from named imports: { name1, name2, name3 } -> { name1, name3 }
            {
                regex: new RegExp(`\\{([^}]*?)\\b${importName}\\b,?([^}]*?)\\}`, 'g'),
                replacement: (match, before, after) => {
                    const cleanBefore = before.replace(/,\s*$/, '').trim();
                    const cleanAfter = after.replace(/^\s*,/, '').trim();
                    const combined = [cleanBefore, cleanAfter].filter(Boolean).join(', ');
                    return `{${combined}}`;
                }
            }
        ];
        let modifiedLine = line;
        for (const pattern of patterns) {
            modifiedLine = modifiedLine.replace(pattern.regex, pattern.replacement);
        }
        return modifiedLine;
    }
    async organizeImportsInFile(filePath) {
        const content = fs.readFileSync(filePath, 'utf8');
        const lines = content.split('\n');
        // Find import section
        const importLines = [];
        const importRegex = /^import\s+/;
        const typeImportRegex = /^import\s+type\s+/;
        const externalImportRegex = /from\s+['"](?![@./])/;
        for (let i = 0; i < lines.length; i++) {
            const line = lines[i].trim();
            if (importRegex.test(line)) {
                importLines.push({
                    line: lines[i],
                    index: i,
                    isExternal: externalImportRegex.test(line),
                    isType: typeImportRegex.test(line)
                });
            }
            else if (line && !line.startsWith('//') && !line.startsWith('/*')) {
                // Stop at first non-import, non-comment line
                break;
            }
        }
        if (importLines.length === 0) {
            return false;
        }
        // Organize imports according to rules
        const organizedImports = this.organizeImportLines(importLines);
        // Check if organization changed anything
        const originalImportSection = importLines.map(imp => imp.line).join('\n');
        const organizedImportSection = organizedImports.join('\n');
        if (originalImportSection === organizedImportSection) {
            return false;
        }
        // Replace import section
        const firstImportIndex = importLines[0].index;
        const lastImportIndex = importLines[importLines.length - 1].index;
        const newLines = [
            ...lines.slice(0, firstImportIndex),
            ...organizedImports,
            ...lines.slice(lastImportIndex + 1)
        ];
        fs.writeFileSync(filePath, newLines.join('\n'), 'utf8');
        return true;
    }
    organizeImportLines(importLines) {
        const { organizationRules } = this.config;
        const organized = [];
        // Separate imports by type
        const externalImports = importLines.filter(imp => imp.isExternal);
        const internalImports = importLines.filter(imp => !imp.isExternal);
        // Sort function
        const sortImports = (imports) => {
            if (organizationRules.sortAlphabetically) {
                return imports.sort((a, b) => a.line.localeCompare(b.line));
            }
            return imports;
        };
        // Separate type imports if configured
        if (organizationRules.separateTypeImports) {
            const externalTypeImports = sortImports(externalImports.filter(imp => imp.isType));
            const externalValueImports = sortImports(externalImports.filter(imp => !imp.isType));
            const internalTypeImports = sortImports(internalImports.filter(imp => imp.isType));
            const internalValueImports = sortImports(internalImports.filter(imp => !imp.isType));
            // Add external imports
            if (organizationRules.groupExternalImports) {
                organized.push(...externalTypeImports.map(imp => imp.line));
                if (externalTypeImports.length > 0 && externalValueImports.length > 0) {
                    organized.push(''); // Empty line between type and value imports
                }
                organized.push(...externalValueImports.map(imp => imp.line));
                if ((externalTypeImports.length > 0 || externalValueImports.length > 0) &&
                    (internalTypeImports.length > 0 || internalValueImports.length > 0)) {
                    organized.push(''); // Empty line between external and internal
                }
            }
            // Add internal imports
            if (organizationRules.groupInternalImports) {
                organized.push(...internalTypeImports.map(imp => imp.line));
                if (internalTypeImports.length > 0 && internalValueImports.length > 0) {
                    organized.push(''); // Empty line between type and value imports
                }
                organized.push(...internalValueImports.map(imp => imp.line));
            }
        }
        else {
            // Don't separate type imports
            if (organizationRules.groupExternalImports) {
                organized.push(...sortImports(externalImports).map(imp => imp.line));
                if (externalImports.length > 0 && internalImports.length > 0) {
                    organized.push(''); // Empty line between external and internal
                }
            }
            if (organizationRules.groupInternalImports) {
                organized.push(...sortImports(internalImports).map(imp => imp.line));
            }
        }
        return organized;
    }
    async enforceImportStyleInFile(filePath) {
        const content = fs.readFileSync(filePath, 'utf8');
        const lines = content.split('\n');
        let modified = false;
        for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            if (/^import\s+/.test(line.trim())) {
                const styledLine = this.applyImportStyle(line);
                if (styledLine !== line) {
                    lines[i] = styledLine;
                    modified = true;
                }
            }
        }
        if (modified) {
            fs.writeFileSync(filePath, lines.join('\n'), 'utf8');
        }
        return modified;
    }
    applyImportStyle(line) {
        const { organizationRules } = this.config;
        let styledLine = line;
        // Enforce trailing commas in multi-line imports
        if (organizationRules.enforceTrailingCommas) {
            styledLine = styledLine.replace(/\{\s*([^}]+[^,])\s*\}/g, (match, imports) => {
                if (imports.includes(',')) {
                    return `{ ${imports.trim()}, }`;
                }
                return match;
            });
        }
        // Enforce line length limits
        if (organizationRules.maxLineLength && styledLine.length > organizationRules.maxLineLength) {
            // Break long import lines
            const importMatch = styledLine.match(/^(\s*import\s+(?:type\s+)?\{)([^}]+)(\}\s+from\s+.+)$/);
            if (importMatch) {
                const [, prefix, imports, suffix] = importMatch;
                const importList = imports.split(',').map(imp => imp.trim());
                if (importList.length > 1) {
                    const formattedImports = importList.map(imp => `  ${imp}`).join(',\n');
                    styledLine = `${prefix}\n${formattedImports}\n${suffix}`;
                }
            }
        }
        return styledLine;
    }
    async getTypeScriptFiles() {
        try {
            const output = (0, child_process_1.execSync)('find src -name "*.ts" -o -name "*.tsx" | grep -v __tests__ | grep -v .test. | grep -v .spec.', { encoding: 'utf8', stdio: 'pipe' });
            return output.trim().split('\n').filter(Boolean);
        }
        catch (error) {
            logger_1.logger.error('Failed to get TypeScript files', error);
            return [];
        }
    }
    batchFiles(files) {
        const batches = [];
        for (let i = 0; i < files.length; i += this.config.maxFilesPerBatch) {
            batches.push(files.slice(i, i + this.config.maxFilesPerBatch));
        }
        return batches;
    }
    async validateBuild() {
        try {
            (0, child_process_1.execSync)('yarn tsc --noEmit --skipLibCheck', {
                encoding: 'utf8',
                stdio: 'pipe',
                timeout: 30000
            });
            return true;
        }
        catch (error) {
            logger_1.logger.warn('Build validation failed during import cleanup', error);
            return false;
        }
    }
    mergeBatchResults(total, batch) {
        return {
            filesProcessed: [...total.filesProcessed, ...batch.filesProcessed],
            unusedImportsRemoved: total.unusedImportsRemoved + batch.unusedImportsRemoved,
            importsOrganized: total.importsOrganized + batch.importsOrganized,
            styleViolationsFixed: total.styleViolationsFixed + batch.styleViolationsFixed,
            buildValidationPassed: total.buildValidationPassed && batch.buildValidationPassed,
            errors: [...total.errors, ...batch.errors],
            warnings: [...total.warnings, ...batch.warnings]
        };
    }
}
exports.ImportCleanupSystem = ImportCleanupSystem;
/**
 * Default configuration for import cleanup
 */
exports.DEFAULT_IMPORT_CLEANUP_CONFIG = {
    maxFilesPerBatch: 20,
    safetyValidationEnabled: true,
    buildValidationFrequency: 5,
    importStyleEnforcement: true,
    organizationRules: {
        groupExternalImports: true,
        groupInternalImports: true,
        sortAlphabetically: true,
        separateTypeImports: true,
        enforceTrailingCommas: true,
        maxLineLength: 100
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,