ba84a0154e0f2d39f4ca5d2bc051061e
"use strict";
/**
 * Enterprise Intelligence Panel Component
 * Main Page Restoration - Task 3.8 Implementation
 *
 * Displays enterprise intelligence insights, recommendations,
 * and system health information for cuisine recommendations.
 */
'use client';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const lucide_react_1 = require("lucide-react");
const useEnterpriseIntelligence_1 = require("@/hooks/useEnterpriseIntelligence");
// ========== COMPONENT ==========
function EnterpriseIntelligencePanel({ recipeData, ingredientData, astrologicalContext, className = '', showDetailedMetrics = false, autoAnalyze = true, onAnalysisComplete }) {
    // ========== STATE ==========
    const [isExpanded, setIsExpanded] = (0, react_1.useState)(false);
    const [activeTab, setActiveTab] = (0, react_1.useState)('overview');
    // ========== HOOKS ==========
    const { state, actions, systemHealth, isHealthy, needsAttention } = (0, useEnterpriseIntelligence_1.useEnterpriseIntelligence)({
        autoAnalyze,
        enableRecipeIntelligence: true,
        enableIngredientIntelligence: true,
        enableValidationIntelligence: true,
        enableSafetyIntelligence: true,
        enableOptimizationRecommendations: true,
        cacheResults: true,
        logLevel: 'info'
    });
    const { recommendations, hasRecommendations, highPriorityCount } = (0, useEnterpriseIntelligence_1.useEnterpriseIntelligenceRecommendations)();
    const performanceStatus = (0, useEnterpriseIntelligence_1.useEnterpriseIntelligencePerformance)();
    // ========== EFFECTS ==========
    react_1.default.useEffect(() => {
        if (autoAnalyze && recipeData && ingredientData && astrologicalContext && !state.isAnalyzing) {
            actions.performAnalysis(recipeData, ingredientData, astrologicalContext)
                .then(analysis => {
                if (analysis && onAnalysisComplete) {
                    onAnalysisComplete(analysis);
                }
            });
        }
    }, [recipeData, ingredientData, astrologicalContext, autoAnalyze, state.isAnalyzing, actions, onAnalysisComplete]);
    // ========== MEMOIZED VALUES ==========
    const statusIcon = (0, react_1.useMemo)(() => {
        if (state.isAnalyzing)
            return (0, jsx_runtime_1.jsx)(lucide_react_1.RefreshCw, { className: "animate-spin", size: 16 });
        if (state.error)
            return (0, jsx_runtime_1.jsx)(lucide_react_1.XCircle, { className: "text-red-500", size: 16 });
        if (needsAttention)
            return (0, jsx_runtime_1.jsx)(lucide_react_1.AlertTriangle, { className: "text-yellow-500", size: 16 });
        if (isHealthy)
            return (0, jsx_runtime_1.jsx)(lucide_react_1.CheckCircle, { className: "text-green-500", size: 16 });
        return (0, jsx_runtime_1.jsx)(lucide_react_1.Brain, { className: "text-blue-500", size: 16 });
    }, [state.isAnalyzing, state.error, needsAttention, isHealthy]);
    const statusText = (0, react_1.useMemo)(() => {
        if (state.isAnalyzing)
            return 'Analyzing...';
        if (state.error)
            return 'Analysis Error';
        if (needsAttention)
            return 'Needs Attention';
        if (isHealthy)
            return 'System Healthy';
        return 'Intelligence Ready';
    }, [state.isAnalyzing, state.error, needsAttention, isHealthy]);
    const statusColor = (0, react_1.useMemo)(() => {
        if (state.isAnalyzing)
            return 'text-blue-600';
        if (state.error)
            return 'text-red-600';
        if (needsAttention)
            return 'text-yellow-600';
        if (isHealthy)
            return 'text-green-600';
        return 'text-gray-600';
    }, [state.isAnalyzing, state.error, needsAttention, isHealthy]);
    // ========== EVENT HANDLERS ==========
    const handleManualAnalysis = async () => {
        if (recipeData && ingredientData && astrologicalContext) {
            const analysis = await actions.performAnalysis(recipeData, ingredientData, astrologicalContext);
            if (analysis && onAnalysisComplete) {
                onAnalysisComplete(analysis);
            }
        }
    };
    const handleToggleExpanded = () => {
        setIsExpanded(!isExpanded);
    };
    // ========== RENDER HELPERS ==========
    const renderOverviewTab = () => ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "bg-gray-50 rounded-lg p-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between mb-2", children: [(0, jsx_runtime_1.jsx)("h4", { className: "font-medium text-gray-900", children: "System Health" }), (0, jsx_runtime_1.jsxs)("div", { className: `flex items-center space-x-2 ${statusColor}`, children: [statusIcon, (0, jsx_runtime_1.jsx)("span", { className: "text-sm font-medium", children: statusText })] })] }), state.analysis && ((0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-2 gap-4 mt-3", children: [(0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsxs)("div", { className: "text-2xl font-bold text-blue-600", children: [Math.round(systemHealth.score * 100), "%"] }), (0, jsx_runtime_1.jsx)("div", { className: "text-xs text-gray-500", children: "Overall Score" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsx)("div", { className: "text-2xl font-bold text-green-600", children: systemHealth.overall.charAt(0).toUpperCase() + systemHealth.overall.slice(1) }), (0, jsx_runtime_1.jsx)("div", { className: "text-xs text-gray-500", children: "Health Status" })] })] }))] }), state.analysis && ((0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-2 gap-3", children: [(0, jsx_runtime_1.jsxs)("div", { className: "bg-blue-50 rounded-lg p-3", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Brain, { size: 16, className: "text-blue-600" }), (0, jsx_runtime_1.jsx)("span", { className: "text-sm font-medium text-blue-900", children: "Recipe Intelligence" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "mt-1 text-lg font-bold text-blue-600", children: [Math.round(state.analysis.recipeIntelligence.optimizationScore * 100), "%"] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "bg-green-50 rounded-lg p-3", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.TrendingUp, { size: 16, className: "text-green-600" }), (0, jsx_runtime_1.jsx)("span", { className: "text-sm font-medium text-green-900", children: "Ingredient Intelligence" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "mt-1 text-lg font-bold text-green-600", children: [Math.round(state.analysis.ingredientIntelligence.optimizationScore * 100), "%"] })] })] })), state.error && ((0, jsx_runtime_1.jsxs)("div", { className: "bg-red-50 border border-red-200 rounded-lg p-3", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2 text-red-800", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.XCircle, { size: 16 }), (0, jsx_runtime_1.jsx)("span", { className: "font-medium", children: "Analysis Error" })] }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-red-600 mt-1", children: state.error }), (0, jsx_runtime_1.jsx)("button", { onClick: handleManualAnalysis, className: "mt-2 text-sm text-red-700 hover:text-red-900 underline", children: "Retry Analysis" })] }))] }));
    const renderRecommendationsTab = () => ((0, jsx_runtime_1.jsx)("div", { className: "space-y-4", children: hasRecommendations ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [highPriorityCount > 0 && ((0, jsx_runtime_1.jsx)("div", { className: "bg-yellow-50 border border-yellow-200 rounded-lg p-3", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2 text-yellow-800", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.AlertTriangle, { size: 16 }), (0, jsx_runtime_1.jsxs)("span", { className: "font-medium", children: [highPriorityCount, " High Priority Recommendations"] })] }) })), (0, jsx_runtime_1.jsx)("div", { className: "space-y-3", children: recommendations.slice(0, 5).map((rec, index) => ((0, jsx_runtime_1.jsx)("div", { className: "bg-gray-50 rounded-lg p-3", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex items-start space-x-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Lightbulb, { size: 16, className: `mt-0.5 ${rec.priority === 'high' ? 'text-red-500' :
                                        rec.priority === 'medium' ? 'text-yellow-500' :
                                            'text-blue-500'}` }), (0, jsx_runtime_1.jsxs)("div", { className: "flex-1", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2", children: [(0, jsx_runtime_1.jsx)("span", { className: "text-xs font-medium text-gray-500 uppercase", children: rec.type }), (0, jsx_runtime_1.jsx)("span", { className: `text-xs px-2 py-0.5 rounded-full ${rec.priority === 'high' ? 'bg-red-100 text-red-700' :
                                                        rec.priority === 'medium' ? 'bg-yellow-100 text-yellow-700' :
                                                            'bg-blue-100 text-blue-700'}`, children: rec.priority })] }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-700 mt-1", children: rec.text })] })] }) }, index))) }), recommendations.length > 5 && ((0, jsx_runtime_1.jsx)("div", { className: "text-center", children: (0, jsx_runtime_1.jsxs)("span", { className: "text-sm text-gray-500", children: ["+", recommendations.length - 5, " more recommendations"] }) }))] })) : ((0, jsx_runtime_1.jsxs)("div", { className: "text-center py-6 text-gray-500", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Lightbulb, { size: 24, className: "mx-auto mb-2 opacity-50" }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm", children: "No recommendations available" }), (0, jsx_runtime_1.jsx)("p", { className: "text-xs", children: "Run analysis to generate recommendations" })] })) }));
    const renderHealthTab = () => ((0, jsx_runtime_1.jsx)("div", { className: "space-y-4", children: state.analysis ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)("div", { className: "bg-gray-50 rounded-lg p-4", children: [(0, jsx_runtime_1.jsx)("h4", { className: "font-medium text-gray-900 mb-3", children: "Validation Intelligence" }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-center", children: [(0, jsx_runtime_1.jsx)("span", { className: "text-sm text-gray-600", children: "Data Integrity" }), (0, jsx_runtime_1.jsxs)("span", { className: "text-sm font-medium", children: [Math.round(state.analysis.validationIntelligence.dataIntegrity.score * 100), "%"] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-center", children: [(0, jsx_runtime_1.jsx)("span", { className: "text-sm text-gray-600", children: "Astrological Consistency" }), (0, jsx_runtime_1.jsxs)("span", { className: "text-sm font-medium", children: [Math.round(state.analysis.validationIntelligence.astrologicalConsistency.score * 100), "%"] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-center", children: [(0, jsx_runtime_1.jsx)("span", { className: "text-sm text-gray-600", children: "Elemental Harmony" }), (0, jsx_runtime_1.jsxs)("span", { className: "text-sm font-medium", children: [Math.round(state.analysis.validationIntelligence.elementalHarmony.score * 100), "%"] })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "bg-gray-50 rounded-lg p-4", children: [(0, jsx_runtime_1.jsx)("h4", { className: "font-medium text-gray-900 mb-3", children: "Safety Intelligence" }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsx)("span", { className: "text-sm text-gray-600", children: "Risk Level" }), (0, jsx_runtime_1.jsx)("span", { className: `text-sm font-medium px-2 py-1 rounded-full ${state.analysis.safetyIntelligence.riskAssessment.level === 'low' ? 'bg-green-100 text-green-700' :
                                        state.analysis.safetyIntelligence.riskAssessment.level === 'medium' ? 'bg-yellow-100 text-yellow-700' :
                                            'bg-red-100 text-red-700'}`, children: state.analysis.safetyIntelligence.riskAssessment.level.toUpperCase() })] }), state.analysis.safetyIntelligence.riskAssessment.factors.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: "mt-2", children: [(0, jsx_runtime_1.jsx)("p", { className: "text-xs text-gray-500 mb-1", children: "Risk Factors:" }), (0, jsx_runtime_1.jsx)("ul", { className: "text-xs text-gray-600 space-y-1", children: state.analysis.safetyIntelligence.riskAssessment.factors.map((factor, index) => ((0, jsx_runtime_1.jsxs)("li", { children: ["\u2022 ", factor] }, index))) })] }))] }), (systemHealth.issues.length > 0 || systemHealth.warnings.length > 0) && ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [systemHealth.issues.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: "bg-red-50 border border-red-200 rounded-lg p-3", children: [(0, jsx_runtime_1.jsx)("h5", { className: "font-medium text-red-800 mb-2", children: "Issues" }), (0, jsx_runtime_1.jsx)("ul", { className: "text-sm text-red-600 space-y-1", children: systemHealth.issues.map((issue, index) => ((0, jsx_runtime_1.jsxs)("li", { children: ["\u2022 ", issue] }, index))) })] })), systemHealth.warnings.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: "bg-yellow-50 border border-yellow-200 rounded-lg p-3", children: [(0, jsx_runtime_1.jsx)("h5", { className: "font-medium text-yellow-800 mb-2", children: "Warnings" }), (0, jsx_runtime_1.jsx)("ul", { className: "text-sm text-yellow-600 space-y-1", children: systemHealth.warnings.map((warning, index) => ((0, jsx_runtime_1.jsxs)("li", { children: ["\u2022 ", warning] }, index))) })] }))] }))] })) : ((0, jsx_runtime_1.jsxs)("div", { className: "text-center py-6 text-gray-500", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Shield, { size: 24, className: "mx-auto mb-2 opacity-50" }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm", children: "No health data available" }), (0, jsx_runtime_1.jsx)("p", { className: "text-xs", children: "Run analysis to check system health" })] })) }));
    const renderPerformanceTab = () => ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-2 gap-4", children: [(0, jsx_runtime_1.jsx)("div", { className: "bg-gray-50 rounded-lg p-3", children: (0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsx)("div", { className: "text-lg font-bold text-blue-600", children: state.performanceMetrics.analysisCount }), (0, jsx_runtime_1.jsx)("div", { className: "text-xs text-gray-500", children: "Total Analyses" })] }) }), (0, jsx_runtime_1.jsx)("div", { className: "bg-gray-50 rounded-lg p-3", children: (0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsxs)("div", { className: "text-lg font-bold text-green-600", children: [Math.round(state.performanceMetrics.averageExecutionTime), "ms"] }), (0, jsx_runtime_1.jsx)("div", { className: "text-xs text-gray-500", children: "Avg Response Time" })] }) }), (0, jsx_runtime_1.jsx)("div", { className: "bg-gray-50 rounded-lg p-3", children: (0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsxs)("div", { className: "text-lg font-bold text-purple-600", children: [Math.round(state.performanceMetrics.cacheHitRate * 100), "%"] }), (0, jsx_runtime_1.jsx)("div", { className: "text-xs text-gray-500", children: "Cache Hit Rate" })] }) }), (0, jsx_runtime_1.jsx)("div", { className: "bg-gray-50 rounded-lg p-3", children: (0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsxs)("div", { className: "text-lg font-bold text-red-600", children: [Math.round(state.performanceMetrics.errorRate * 100), "%"] }), (0, jsx_runtime_1.jsx)("div", { className: "text-xs text-gray-500", children: "Error Rate" })] }) })] }), showDetailedMetrics && ((0, jsx_runtime_1.jsxs)("div", { className: "bg-gray-50 rounded-lg p-4", children: [(0, jsx_runtime_1.jsx)("h4", { className: "font-medium text-gray-900 mb-3", children: "Performance Status" }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-center", children: [(0, jsx_runtime_1.jsx)("span", { className: "text-sm text-gray-600", children: "System Performance" }), (0, jsx_runtime_1.jsx)("span", { className: `text-sm font-medium ${performanceStatus.isPerformant ? 'text-green-600' : 'text-red-600'}`, children: performanceStatus.isPerformant ? 'Good' : 'Needs Improvement' })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-center", children: [(0, jsx_runtime_1.jsx)("span", { className: "text-sm text-gray-600", children: "Cache Efficiency" }), (0, jsx_runtime_1.jsxs)("span", { className: "text-sm font-medium", children: [Math.round(performanceStatus.cacheEfficiency * 100), "%"] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-center", children: [(0, jsx_runtime_1.jsx)("span", { className: "text-sm text-gray-600", children: "Reliability" }), (0, jsx_runtime_1.jsxs)("span", { className: "text-sm font-medium", children: [Math.round(performanceStatus.reliability * 100), "%"] })] })] })] }))] }));
    // ========== RENDER ==========
    return ((0, jsx_runtime_1.jsxs)("div", { className: `bg-white border border-gray-200 rounded-lg shadow-sm ${className}`, children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between p-4 border-b border-gray-200", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-3", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Brain, { className: "text-blue-600", size: 20 }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h3", { className: "font-medium text-gray-900", children: "Enterprise Intelligence" }), (0, jsx_runtime_1.jsx)("p", { className: "text-xs text-gray-500", children: "Recipe & Ingredient Analysis" })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2", children: [state.lastAnalyzed && ((0, jsx_runtime_1.jsx)("span", { className: "text-xs text-gray-400", children: state.lastAnalyzed.toLocaleTimeString() })), (0, jsx_runtime_1.jsx)("button", { onClick: handleManualAnalysis, disabled: state.isAnalyzing, className: "p-1 text-gray-400 hover:text-gray-600 disabled:opacity-50", title: "Refresh Analysis", children: (0, jsx_runtime_1.jsx)(lucide_react_1.RefreshCw, { size: 16, className: state.isAnalyzing ? 'animate-spin' : '' }) }), (0, jsx_runtime_1.jsx)("button", { onClick: handleToggleExpanded, className: "p-1 text-gray-400 hover:text-gray-600", title: isExpanded ? 'Collapse' : 'Expand', children: isExpanded ? (0, jsx_runtime_1.jsx)(lucide_react_1.EyeOff, { size: 16 }) : (0, jsx_runtime_1.jsx)(lucide_react_1.Eye, { size: 16 }) })] })] }), isExpanded && ((0, jsx_runtime_1.jsxs)("div", { className: "p-4", children: [(0, jsx_runtime_1.jsx)("div", { className: "flex space-x-1 mb-4 bg-gray-100 rounded-lg p-1", children: [
                            { id: 'overview', label: 'Overview', icon: lucide_react_1.BarChart3 },
                            { id: 'recommendations', label: 'Recommendations', icon: lucide_react_1.Lightbulb },
                            { id: 'health', label: 'Health', icon: lucide_react_1.Shield },
                            { id: 'performance', label: 'Performance', icon: lucide_react_1.TrendingUp }
                        ].map(tab => ((0, jsx_runtime_1.jsxs)("button", { onClick: () => setActiveTab(tab.id), className: `flex items-center space-x-2 px-3 py-2 rounded-md text-sm font-medium transition-colors ${activeTab === tab.id
                                ? 'bg-white text-blue-600 shadow-sm'
                                : 'text-gray-600 hover:text-gray-900'}`, children: [(0, jsx_runtime_1.jsx)(tab.icon, { size: 16 }), (0, jsx_runtime_1.jsx)("span", { children: tab.label })] }, tab.id))) }), (0, jsx_runtime_1.jsxs)("div", { className: "min-h-[200px]", children: [activeTab === 'overview' && renderOverviewTab(), activeTab === 'recommendations' && renderRecommendationsTab(), activeTab === 'health' && renderHealthTab(), activeTab === 'performance' && renderPerformanceTab()] })] }))] }));
}
exports.default = EnterpriseIntelligencePanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,