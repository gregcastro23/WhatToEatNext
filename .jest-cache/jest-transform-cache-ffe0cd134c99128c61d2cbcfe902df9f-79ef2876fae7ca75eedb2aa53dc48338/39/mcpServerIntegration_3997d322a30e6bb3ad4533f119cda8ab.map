{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/mcpServerIntegration.ts","mappings":";AAAA;;;;;;;;GAQG;;;AAEH,2CAAwC;AAsCxC,oEAAoE;AACpE,MAAM,mBAAmB,GAAoC;IAC3D,eAAe,EAAE;QACf,IAAI,EAAE,eAAe;QACrB,OAAO,EAAE,KAAK;QACd,IAAI,EAAE,CAAC,iCAAiC,CAAC;QACzC,GAAG,EAAE;YACH,iBAAiB,EAAE,OAAO;YAC1B,YAAY,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,EAAE;SAC7C;QACD,QAAQ,EAAE,KAAK;QACf,WAAW,EAAE,CAAC,yBAAyB,EAAE,oBAAoB,CAAC;QAC9D,OAAO,EAAE,KAAK;QACd,aAAa,EAAE,CAAC;QAChB,eAAe,EAAE,IAAI;KACtB;IACD,gBAAgB,EAAE;QAChB,IAAI,EAAE,gBAAgB;QACtB,OAAO,EAAE,KAAK;QACd,IAAI,EAAE,CAAC,kCAAkC,CAAC;QAC1C,GAAG,EAAE;YACH,iBAAiB,EAAE,OAAO;YAC1B,YAAY,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,EAAE;SAC7C;QACD,QAAQ,EAAE,KAAK;QACf,WAAW,EAAE,CAAC,oBAAoB,EAAE,oBAAoB,CAAC;QACzD,OAAO,EAAE,IAAI;QACb,aAAa,EAAE,CAAC;QAChB,eAAe,EAAE,IAAI;KACtB;IACD,qBAAqB,EAAE;QACrB,IAAI,EAAE,qBAAqB;QAC3B,OAAO,EAAE,KAAK;QACd,IAAI,EAAE,CAAC,+BAA+B,CAAC;QACvC,GAAG,EAAE;YACH,iBAAiB,EAAE,OAAO;YAC1B,mBAAmB,EAAE,OAAO,CAAC,GAAG,CAAC,mBAAmB,IAAI,EAAE;SAC3D;QACD,QAAQ,EAAE,KAAK;QACf,WAAW,EAAE,CAAC,gBAAgB,EAAE,oBAAoB,CAAC;QACrD,OAAO,EAAE,IAAI;QACb,aAAa,EAAE,CAAC;QAChB,eAAe,EAAE,IAAI;KACtB;CACF,CAAC;AAEF,+BAA+B;AAC/B,MAAM,WAAW,GAAuC;IACtD,eAAe,EAAE;QACf,iBAAiB,EAAE,EAAE;QACrB,eAAe,EAAE,IAAI;QACrB,cAAc,EAAE,KAAK;QACrB,UAAU,EAAE,EAAE;KACf;IACD,gBAAgB,EAAE;QAChB,iBAAiB,EAAE,EAAE;QACrB,eAAe,EAAE,GAAG;QACpB,cAAc,EAAE,IAAI;QACpB,UAAU,EAAE,CAAC;KACd;IACD,qBAAqB,EAAE;QACrB,iBAAiB,EAAE,EAAE;QACrB,eAAe,EAAE,GAAG;QACpB,cAAc,EAAE,GAAG;QACnB,UAAU,EAAE,CAAC;KACd;CACF,CAAC;AAEF;;GAEG;AACH,MAAa,oBAAoB;IAO/B;QALQ,YAAO,GAAiC,IAAI,GAAG,EAAE,CAAC;QAClD,UAAK,GAA+B,IAAI,GAAG,EAAE,CAAC;QAC9C,iBAAY,GAA6B,IAAI,GAAG,EAAE,CAAC;QACnD,qBAAgB,GAAyB,IAAI,GAAG,EAAE,CAAC;QAGzD,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAC9B,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;IAEM,MAAM,CAAC,WAAW;QACvB,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE;YAClC,oBAAoB,CAAC,QAAQ,GAAG,IAAI,oBAAoB,EAAE,CAAC;SAC5D;QACD,OAAO,oBAAoB,CAAC,QAAQ,CAAC;IACvC,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,mBAAmB,CAAC,OAAa,IAAI,IAAI,EAAE;QACtD,MAAM,QAAQ,GAAG,gBAAgB,IAAI,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAEpE,oBAAoB;QACpB,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAC3C,IAAI,MAAM,EAAE;YACV,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE,MAAM,CAAC,IAAI;gBACjB,MAAM,EAAE,OAAO;gBACf,YAAY,EAAE,CAAC;gBACf,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;aACtB,CAAC;SACH;QAED,oCAAoC;QACpC,IAAI;YACF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,eAAe,EAAE,yBAAyB,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;YAC9F,IAAI,MAAM,CAAC,OAAO,EAAE;gBAClB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,cAAc;gBACxE,OAAO,EAAE,GAAG,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC;aACzC;SACF;QAAC,OAAO,KAAK,EAAE;YACd,eAAM,CAAC,IAAI,CAAC,kCAAkC,EAAE,KAAK,CAAC,CAAC;SACxD;QAED,kCAAkC;QAClC,IAAI;YACF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAClD,IAAI,MAAM,CAAC,OAAO,EAAE;gBAClB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;gBACzD,OAAO,EAAE,GAAG,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC;aAC3C;SACF;QAAC,OAAO,KAAK,EAAE;YACd,eAAM,CAAC,IAAI,CAAC,yBAAyB,EAAE,KAAK,CAAC,CAAC;SAC/C;QAED,iCAAiC;QACjC,IAAI;YACF,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,CAAC;YAClE,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE,YAAY;gBAClB,MAAM,EAAE,UAAU;gBAClB,YAAY,EAAE,CAAC;gBACf,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;aACtB,CAAC;SACH;QAAC,OAAO,KAAK,EAAE;YACd,eAAM,CAAC,KAAK,CAAC,uCAAuC,EAAE,KAAK,CAAC,CAAC;YAC7D,OAAO;gBACL,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,2CAA2C;gBAClD,MAAM,EAAE,UAAU;gBAClB,YAAY,EAAE,CAAC;gBACf,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;aACtB,CAAC;SACH;IACH,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,kBAAkB,CAAC,UAAkB;QAChD,MAAM,QAAQ,GAAG,aAAa,UAAU,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,EAAE,CAAC;QAE9E,oBAAoB;QACpB,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAC3C,IAAI,MAAM,EAAE;YACV,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE,MAAM,CAAC,IAAI;gBACjB,MAAM,EAAE,OAAO;gBACf,YAAY,EAAE,CAAC;gBACf,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;aACtB,CAAC;SACH;QAED,oBAAoB;QACpB,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,EAAE;YAC1C,eAAM,CAAC,IAAI,CAAC,wCAAwC,CAAC,CAAC;YACtD,OAAO,IAAI,CAAC,sBAAsB,EAAE,CAAC;SACtC;QAED,qCAAqC;QACrC,IAAI;YACF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,gBAAgB,EAAE,oBAAoB,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC;YAChG,IAAI,MAAM,CAAC,OAAO,EAAE;gBAClB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,IAAI,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,eAAe;gBAC1E,OAAO,EAAE,GAAG,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC;aACzC;SACF;QAAC,OAAO,KAAK,EAAE;YACd,eAAM,CAAC,IAAI,CAAC,mCAAmC,EAAE,KAAK,CAAC,CAAC;SACzD;QAED,kCAAkC;QAClC,IAAI;YACF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;YACxD,IAAI,MAAM,CAAC,OAAO,EAAE;gBAClB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,IAAI,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;gBAC1D,OAAO,EAAE,GAAG,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC;aAC3C;SACF;QAAC,OAAO,KAAK,EAAE;YACd,eAAM,CAAC,IAAI,CAAC,yBAAyB,EAAE,KAAK,CAAC,CAAC;SAC/C;QAED,qCAAqC;QACrC,IAAI;YACF,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;YACvE,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE,YAAY;gBAClB,MAAM,EAAE,UAAU;gBAClB,YAAY,EAAE,CAAC;gBACf,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;aACtB,CAAC;SACH;QAAC,OAAO,KAAK,EAAE;YACd,eAAM,CAAC,KAAK,CAAC,sCAAsC,EAAE,KAAK,CAAC,CAAC;YAC5D,OAAO;gBACL,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,8BAA8B;gBACrC,MAAM,EAAE,UAAU;gBAClB,YAAY,EAAE,CAAC;gBACf,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;aACtB,CAAC;SACH;IACH,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,aAAa,CAAC,KAAa,EAAE,UAItC,EAAE;QACJ,MAAM,QAAQ,GAAG,WAAW,KAAK,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC;QAElG,oBAAoB;QACpB,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAC3C,IAAI,MAAM,EAAE;YACV,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE,MAAM,CAAC,IAAI;gBACjB,MAAM,EAAE,OAAO;gBACf,YAAY,EAAE,CAAC;gBACf,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;aACtB,CAAC;SACH;QAED,0DAA0D;QAC1D,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,qBAAqB,CAAC,EAAE;YAC/C,eAAM,CAAC,IAAI,CAAC,4CAA4C,CAAC,CAAC;YAC1D,OAAO,IAAI,CAAC,sBAAsB,EAAE,CAAC;SACtC;QAED,kCAAkC;QAClC,IAAI;YACF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,qBAAqB,EAAE,gBAAgB,EAAE,EAAE,KAAK,EAAE,GAAG,OAAO,EAAE,CAAC,CAAC;YACxG,IAAI,MAAM,CAAC,OAAO,EAAE;gBAClB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,IAAI,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,eAAe;gBAC1E,OAAO,EAAE,GAAG,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC;aACzC;SACF;QAAC,OAAO,KAAK,EAAE;YACd,eAAM,CAAC,IAAI,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;SACtD;QAED,yCAAyC;QACzC,IAAI;YACF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YACnE,IAAI,MAAM,CAAC,OAAO,EAAE;gBAClB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,IAAI,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;gBAC1D,OAAO,EAAE,GAAG,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC;aAC3C;SACF;QAAC,OAAO,KAAK,EAAE;YACd,eAAM,CAAC,IAAI,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;SACtD;QAED,kCAAkC;QAClC,IAAI;YACF,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YACtE,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE,YAAY;gBAClB,MAAM,EAAE,UAAU;gBAClB,YAAY,EAAE,CAAC;gBACf,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;aACtB,CAAC;SACH;QAAC,OAAO,KAAK,EAAE;YACd,eAAM,CAAC,KAAK,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC;YACvD,OAAO;gBACL,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,yBAAyB;gBAChC,MAAM,EAAE,UAAU;gBAClB,YAAY,EAAE,CAAC;gBACf,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;aACtB,CAAC;SACH;IACH,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,oBAAoB;QAM/B,eAAM,CAAC,IAAI,CAAC,yCAAyC,CAAC,CAAC;QAEvD,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC;YACvC,IAAI,CAAC,mBAAmB,EAAE;YAC1B,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC;YAChC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC;SAC5B,CAAC,CAAC;QAEH,MAAM,YAAY,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,0BAA0B,CAAC,CAAC;QACjI,MAAM,WAAW,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,yBAAyB,CAAC,CAAC;QAC/H,MAAM,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,oBAAoB,CAAC,CAAC;QAEtH,MAAM,YAAY,GAAG,CAAC,YAAY,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC;QACxF,MAAM,kBAAkB,GAAG,YAAY,GAAG,CAAC,CAAC;QAE5C,eAAM,CAAC,IAAI,CAAC,kCAAkC,EAAE;YAC9C,YAAY,EAAE,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ;YACnE,WAAW,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ;YAChE,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ;YACpD,kBAAkB;SACnB,CAAC,CAAC;QAEH,OAAO,EAAE,YAAY,EAAE,WAAW,EAAE,OAAO,EAAE,kBAAkB,EAAE,CAAC;IACpE,CAAC;IAED;;OAEG;IACI,eAAe;QAMpB,MAAM,MAAM,GAAwB,EAAE,CAAC;QAEvC,KAAK,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE;YACzC,MAAM,CAAC,IAAI,CAAC,GAAG;gBACb,SAAS,EAAE,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,KAAK;gBACnD,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;gBACrB,YAAY,EAAE,CAAC;gBACf,UAAU,EAAE,CAAC,CAAC,0CAA0C;aACzD,CAAC;SACH;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,yBAAyB;IAEjB,iBAAiB;QACvB,MAAM,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YAClD,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;gBACpB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;gBACtC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;aAC/C;QACH,CAAC,CAAC,CAAC;QAEH,eAAM,CAAC,IAAI,CAAC,0BAA0B,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IAC3E,CAAC;IAEO,sBAAsB;QAC5B,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,UAAU,EAAE,MAAM,CAAC,EAAE,EAAE;YAC3D,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QAEH,eAAM,CAAC,IAAI,CAAC,2CAA2C,CAAC,CAAC;IAC3D,CAAC;IAEO,iBAAiB;QACvB,sCAAsC;QACtC,WAAW,CAAC,KAAK,IAAI,EAAE;YACrB,KAAK,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE;gBACzC,IAAI;oBACF,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;oBACrD,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;iBAC5C;gBAAC,OAAO,KAAK,EAAE;oBACd,eAAM,CAAC,IAAI,CAAC,sCAAsC,IAAI,GAAG,EAAE,KAAK,CAAC,CAAC;oBAClE,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;iBACxC;aACF;QACH,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;IACpB,CAAC;IAEO,KAAK,CAAC,aAAa,CAAC,UAAkB,EAAE,MAAc,EAAE,MAAW;QACzE,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAC5C,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,IAAI,KAAK,CAAC,cAAc,UAAU,iBAAiB,CAAC,CAAC;SAC5D;QAED,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;QAEpC,IAAI;YACF,mEAAmE;YACnE,2CAA2C;YAC3C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;YACtE,MAAM,YAAY,GAAG,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;YAEnD,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE,MAAM;gBACZ,MAAM,EAAE,SAAS;gBACjB,YAAY;gBACZ,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;aACtB,CAAC;SACH;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,YAAY,GAAG,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;YACnD,eAAM,CAAC,KAAK,CAAC,cAAc,UAAU,eAAe,EAAE,KAAK,CAAC,CAAC;YAE7D,OAAO;gBACL,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;gBAC/D,MAAM,EAAE,SAAS;gBACjB,YAAY;gBACZ,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;aACtB,CAAC;SACH;IACH,CAAC;IAEO,KAAK,CAAC,eAAe,CAAC,UAAkB,EAAE,MAAc,EAAE,MAAW;QAC3E,8CAA8C;QAC9C,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,mBAAmB;QAElG,QAAQ,UAAU,EAAE;YAClB,KAAK,eAAe;gBAClB,IAAI,MAAM,KAAK,yBAAyB,EAAE;oBACxC,OAAO,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;iBACpD;gBACD,MAAM;YACR,KAAK,gBAAgB;gBACnB,IAAI,MAAM,KAAK,oBAAoB,EAAE;oBACnC,OAAO,IAAI,CAAC,2BAA2B,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;iBAC5D;gBACD,MAAM;YACR,KAAK,qBAAqB;gBACxB,IAAI,MAAM,KAAK,gBAAgB,EAAE;oBAC/B,OAAO,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;iBAC1D;gBACD,MAAM;SACT;QAED,MAAM,IAAI,KAAK,CAAC,kBAAkB,MAAM,eAAe,UAAU,EAAE,CAAC,CAAC;IACvE,CAAC;IAEO,KAAK,CAAC,iBAAiB,CAAC,UAAkB;QAChD,IAAI;YACF,2DAA2D;YAC3D,iCAAiC;YACjC,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;YACvD,OAAO,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC,wBAAwB;SACrD;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,KAAK,CAAC;SACd;IACH,CAAC;IAEO,cAAc,CAAC,UAAkB;QACvC,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACtD,OAAO,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IACvD,CAAC;IAEO,YAAY,CAAI,GAAW;QACjC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAClC,IAAI,CAAC,KAAK;YAAE,OAAO,IAAI,CAAC;QAExB,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC,SAAS,GAAG,KAAK,CAAC,GAAG,EAAE;YAC5C,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACvB,OAAO,IAAI,CAAC;SACb;QAED,OAAO,KAAyB,CAAC;IACnC,CAAC;IAEO,QAAQ,CAAI,GAAW,EAAE,IAAO,EAAE,GAAW;QACnD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE;YAClB,IAAI;YACJ,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;YACrB,GAAG;YACH,MAAM,EAAE,OAAO;SAChB,CAAC,CAAC;IACL,CAAC;IAEO,sBAAsB;QAC5B,OAAO;YACL,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,qBAAqB;YAC5B,MAAM,EAAE,SAAS;YACjB,YAAY,EAAE,CAAC;YACf,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;SACtB,CAAC;IACJ,CAAC;IAEO,mBAAmB,CAAC,KAAa;QACvC,OAAO;YACL,OAAO,EAAE,KAAK;YACd,KAAK;YACL,MAAM,EAAE,UAAU;YAClB,YAAY,EAAE,CAAC;YACf,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;SACtB,CAAC;IACJ,CAAC;IAED,qDAAqD;IAC7C,KAAK,CAAC,iBAAiB,CAAC,IAAU;QACxC,gCAAgC;QAChC,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;QACxD,OAAO;YACL,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC;YAC1C,MAAM,EAAE,WAAW;YACnB,YAAY,EAAE,IAAI;YAClB,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;SACtB,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,iBAAiB,CAAC,UAAkB;QAChD,gCAAgC;QAChC,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;QACxD,OAAO;YACL,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,IAAI,CAAC,2BAA2B,CAAC,UAAU,CAAC;YAClD,MAAM,EAAE,WAAW;YACnB,YAAY,EAAE,IAAI;YAClB,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;SACtB,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,wBAAwB,CAAC,KAAa,EAAE,OAAY;QAChE,uCAAuC;QACvC,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;QACxD,OAAO;YACL,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,OAAO,CAAC;YACjD,MAAM,EAAE,WAAW;YACnB,YAAY,EAAE,IAAI;YAClB,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;SACtB,CAAC;IACJ,CAAC;IAED,wBAAwB;IAChB,KAAK,CAAC,2BAA2B,CAAC,IAAU;QAClD,sDAAsD;QACtD,OAAO;YACL,GAAG,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,EAAE,cAAc,EAAE,GAAG,EAAE,YAAY,EAAE,KAAK,EAAE;YAC7E,IAAI,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE;YAChF,OAAO,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE;YAClF,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,cAAc,EAAE,MAAM,EAAE,YAAY,EAAE,IAAI,EAAE;YACpF,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,cAAc,EAAE,MAAM,EAAE,YAAY,EAAE,KAAK,EAAE;YACpF,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,cAAc,EAAE,KAAK,EAAE,YAAY,EAAE,KAAK,EAAE;YACtF,MAAM,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,cAAc,EAAE,MAAM,EAAE,YAAY,EAAE,KAAK,EAAE;SACvF,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,0BAA0B,CAAC,UAAkB;QACzD,oDAAoD;QACpD,OAAO;YACL,IAAI,EAAE,UAAU;YAChB,QAAQ,EAAE,EAAE;YACZ,OAAO,EAAE,CAAC;YACV,KAAK,EAAE,EAAE;YACT,GAAG,EAAE,GAAG;YACR,KAAK,EAAE,CAAC;YACR,QAAQ,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;YACpB,QAAQ,EAAE,CAAC,WAAW,EAAE,QAAQ,CAAC;SAClC,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,qBAAqB,CAAC,KAAa,EAAE,OAAY;QAC7D,sDAAsD;QACtD,OAAO;YACL,OAAO,EAAE;gBACP;oBACE,EAAE,EAAE,CAAC;oBACL,KAAK,EAAE,UAAU,KAAK,EAAE;oBACxB,cAAc,EAAE,EAAE;oBAClB,QAAQ,EAAE,CAAC;oBACX,KAAK,EAAE,iBAAiB;oBACxB,OAAO,EAAE,0BAA0B,KAAK,UAAU;iBACnD;aACF;YACD,YAAY,EAAE,CAAC;SAChB,CAAC;IACJ,CAAC;IAED,sCAAsC;IAC9B,yBAAyB,CAAC,IAAU;QAC1C,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,WAAW,EAAE;YACxB,OAAO,EAAE;gBACP,GAAG,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,EAAE;gBACvD,IAAI,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,IAAI,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,EAAE;gBACzD,OAAO,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,IAAI,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,EAAE;aAC7D;SACF,CAAC;IACJ,CAAC;IAEO,2BAA2B,CAAC,UAAkB;QACpD,OAAO;YACL,IAAI,EAAE,UAAU;YAChB,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC;YACzC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,GAAG,EAAE;YAC9C,SAAS,EAAE;gBACT,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC;gBAC3C,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC;gBACzC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,GAAG;aAC1C;SACF,CAAC;IACJ,CAAC;IAEO,sBAAsB,CAAC,KAAa,EAAE,OAAY;QACxD,OAAO;YACL,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,OAAO,CAAC,UAAU,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;gBAClE,EAAE,EAAE,CAAC,GAAG,CAAC;gBACT,KAAK,EAAE,GAAG,KAAK,WAAW,CAAC,GAAG,CAAC,EAAE;gBACjC,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE;gBACnD,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC;gBAC3C,OAAO,EAAE,OAAO,CAAC,OAAO,IAAI,eAAe;aAC5C,CAAC,CAAC;YACH,YAAY,EAAE,OAAO,CAAC,UAAU,IAAI,CAAC;SACtC,CAAC;IACJ,CAAC;CACF;AAviBD,oDAuiBC;AAED;;GAEG;AACH,MAAM,WAAW;IAIf,YAAY,MAA0B;QAH9B,aAAQ,GAAa,EAAE,CAAC;QAI9B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED,UAAU;QACR,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAEvB,qBAAqB;QACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,mBAAmB;QAErF,qBAAqB;QACrB,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE;YACzD,OAAO,KAAK,CAAC;SACd;QAED,sBAAsB;QACtB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACxB,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAED;;GAEG;AACH,SAAgB,uBAAuB;IACrC,OAAO,oBAAoB,CAAC,WAAW,EAAE,CAAC;AAC5C,CAAC;AAFD,0DAEC;AAED;;GAEG;AACH,SAAgB,uBAAuB;IACrC,MAAM,GAAG,GAAG,uBAAuB,EAAE,CAAC;IAEtC,OAAO;QACL,mBAAmB,EAAE,CAAC,IAAW,EAAE,EAAE,CAAC,GAAG,CAAC,mBAAmB,CAAC,IAAI,CAAC;QACnE,kBAAkB,EAAE,CAAC,UAAkB,EAAE,EAAE,CAAC,GAAG,CAAC,kBAAkB,CAAC,UAAU,CAAC;QAC9E,aAAa,EAAE,CAAC,KAAa,EAAE,OAAa,EAAE,EAAE,CAAC,GAAG,CAAC,aAAa,CAAC,KAAK,EAAE,OAAO,CAAC;QAClF,oBAAoB,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,oBAAoB,EAAE;QACtD,eAAe,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,eAAe,EAAE;KAC7C,CAAC;AACJ,CAAC;AAVD,0DAUC","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/mcpServerIntegration.ts"],"sourcesContent":["/**\n * MCP Server Integration for Reliable External APIs\n * \n * This module implements Model Context Protocol (MCP) server integration for:\n * - Astrological API connections with NASA JPL Horizons fallback\n * - Nutritional database access with USDA API integration\n * - Recipe API connections with rate limiting and caching\n * - Multi-tier fallback strategy for API reliability\n */\n\nimport { logger } from '@/utils/logger';\n\n// MCP Server Configuration from steering files\nexport interface MCPServerConfig {\n  name: string;\n  command: string;\n  args: string[];\n  env?: Record<string, string>;\n  disabled: boolean;\n  autoApprove: string[];\n  timeout: number;\n  retryAttempts: number;\n  fallbackEnabled: boolean;\n}\n\nexport interface MCPApiResponse<T = any> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  source: 'primary' | 'secondary' | 'fallback' | 'cache';\n  responseTime: number;\n  timestamp: number;\n}\n\nexport interface MCPCacheEntry<T = any> {\n  data: T;\n  timestamp: number;\n  ttl: number;\n  source: string;\n}\n\nexport interface MCPRateLimitConfig {\n  requestsPerMinute: number;\n  requestsPerHour: number;\n  requestsPerDay: number;\n  burstLimit: number;\n}\n\n// Default MCP server configurations based on steering file examples\nconst DEFAULT_MCP_SERVERS: Record<string, MCPServerConfig> = {\n  'nasa-horizons': {\n    name: 'nasa-horizons',\n    command: 'uvx',\n    args: ['nasa-horizons-mcp-server@latest'],\n    env: {\n      FASTMCP_LOG_LEVEL: 'ERROR',\n      NASA_API_KEY: process.env.NASA_API_KEY || ''\n    },\n    disabled: false,\n    autoApprove: ['get_planetary_positions', 'get_ephemeris_data'],\n    timeout: 10000,\n    retryAttempts: 3,\n    fallbackEnabled: true\n  },\n  'usda-nutrition': {\n    name: 'usda-nutrition',\n    command: 'uvx',\n    args: ['usda-nutrition-mcp-server@latest'],\n    env: {\n      FASTMCP_LOG_LEVEL: 'ERROR',\n      USDA_API_KEY: process.env.USDA_API_KEY || ''\n    },\n    disabled: false,\n    autoApprove: ['get_nutrition_data', 'search_ingredients'],\n    timeout: 8000,\n    retryAttempts: 2,\n    fallbackEnabled: true\n  },\n  'spoonacular-recipes': {\n    name: 'spoonacular-recipes',\n    command: 'uvx',\n    args: ['spoonacular-mcp-server@latest'],\n    env: {\n      FASTMCP_LOG_LEVEL: 'ERROR',\n      SPOONACULAR_API_KEY: process.env.SPOONACULAR_API_KEY || ''\n    },\n    disabled: false,\n    autoApprove: ['search_recipes', 'get_recipe_details'],\n    timeout: 6000,\n    retryAttempts: 2,\n    fallbackEnabled: true\n  }\n};\n\n// Rate limiting configurations\nconst RATE_LIMITS: Record<string, MCPRateLimitConfig> = {\n  'nasa-horizons': {\n    requestsPerMinute: 60,\n    requestsPerHour: 1000,\n    requestsPerDay: 10000,\n    burstLimit: 10\n  },\n  'usda-nutrition': {\n    requestsPerMinute: 30,\n    requestsPerHour: 500,\n    requestsPerDay: 5000,\n    burstLimit: 5\n  },\n  'spoonacular-recipes': {\n    requestsPerMinute: 10,\n    requestsPerHour: 150,\n    requestsPerDay: 150, // Daily quota limit\n    burstLimit: 3\n  }\n};\n\n/**\n * MCP Server Integration Manager\n */\nexport class MCPServerIntegration {\n  private static instance: MCPServerIntegration;\n  private servers: Map<string, MCPServerConfig> = new Map();\n  private cache: Map<string, MCPCacheEntry> = new Map();\n  private rateLimiters: Map<string, RateLimiter> = new Map();\n  private connectionStatus: Map<string, boolean> = new Map();\n\n  private constructor() {\n    this.initializeServers();\n    this.initializeRateLimiters();\n    this.startHealthChecks();\n  }\n\n  public static getInstance(): MCPServerIntegration {\n    if (!MCPServerIntegration.instance) {\n      MCPServerIntegration.instance = new MCPServerIntegration();\n    }\n    return MCPServerIntegration.instance;\n  }\n\n  /**\n   * Astrological API connections with NASA JPL Horizons fallback\n   */\n  public async getAstrologicalData(date: Date = new Date()): Promise<MCPApiResponse> {\n    const cacheKey = `astrological_${date.toISOString().split('T')[0]}`;\n    \n    // Check cache first\n    const cached = this.getFromCache(cacheKey);\n    if (cached) {\n      return {\n        success: true,\n        data: cached.data,\n        source: 'cache',\n        responseTime: 0,\n        timestamp: Date.now()\n      };\n    }\n\n    // Primary: NASA Horizons MCP server\n    try {\n      const result = await this.callMCPServer('nasa-horizons', 'get_planetary_positions', { date });\n      if (result.success) {\n        this.setCache(cacheKey, result.data, 6 * 60 * 60 * 1000); // 6 hours TTL\n        return { ...result, source: 'primary' };\n      }\n    } catch (error) {\n      logger.warn('NASA Horizons MCP server failed:', error);\n    }\n\n    // Secondary: Direct NASA API call\n    try {\n      const result = await this.callDirectNASAAPI(date);\n      if (result.success) {\n        this.setCache(cacheKey, result.data, 6 * 60 * 60 * 1000);\n        return { ...result, source: 'secondary' };\n      }\n    } catch (error) {\n      logger.warn('Direct NASA API failed:', error);\n    }\n\n    // Fallback: Local ephemeris data\n    try {\n      const fallbackData = await this.getFallbackAstrologicalData(date);\n      return {\n        success: true,\n        data: fallbackData,\n        source: 'fallback',\n        responseTime: 0,\n        timestamp: Date.now()\n      };\n    } catch (error) {\n      logger.error('All astrological data sources failed:', error);\n      return {\n        success: false,\n        error: 'All astrological data sources unavailable',\n        source: 'fallback',\n        responseTime: 0,\n        timestamp: Date.now()\n      };\n    }\n  }\n\n  /**\n   * Nutritional database access with USDA API integration\n   */\n  public async getNutritionalData(ingredient: string): Promise<MCPApiResponse> {\n    const cacheKey = `nutrition_${ingredient.toLowerCase().replace(/\\s+/g, '_')}`;\n    \n    // Check cache first\n    const cached = this.getFromCache(cacheKey);\n    if (cached) {\n      return {\n        success: true,\n        data: cached.data,\n        source: 'cache',\n        responseTime: 0,\n        timestamp: Date.now()\n      };\n    }\n\n    // Check rate limits\n    if (!this.checkRateLimit('usda-nutrition')) {\n      logger.warn('USDA nutrition API rate limit exceeded');\n      return this.getRateLimitedResponse();\n    }\n\n    // Primary: USDA Nutrition MCP server\n    try {\n      const result = await this.callMCPServer('usda-nutrition', 'get_nutrition_data', { ingredient });\n      if (result.success) {\n        this.setCache(cacheKey, result.data, 24 * 60 * 60 * 1000); // 24 hours TTL\n        return { ...result, source: 'primary' };\n      }\n    } catch (error) {\n      logger.warn('USDA Nutrition MCP server failed:', error);\n    }\n\n    // Secondary: Direct USDA API call\n    try {\n      const result = await this.callDirectUSDAAPI(ingredient);\n      if (result.success) {\n        this.setCache(cacheKey, result.data, 24 * 60 * 60 * 1000);\n        return { ...result, source: 'secondary' };\n      }\n    } catch (error) {\n      logger.warn('Direct USDA API failed:', error);\n    }\n\n    // Fallback: Local nutrition database\n    try {\n      const fallbackData = await this.getFallbackNutritionalData(ingredient);\n      return {\n        success: true,\n        data: fallbackData,\n        source: 'fallback',\n        responseTime: 0,\n        timestamp: Date.now()\n      };\n    } catch (error) {\n      logger.error('All nutritional data sources failed:', error);\n      return {\n        success: false,\n        error: 'Nutritional data unavailable',\n        source: 'fallback',\n        responseTime: 0,\n        timestamp: Date.now()\n      };\n    }\n  }\n\n  /**\n   * Recipe API connections with rate limiting and caching\n   */\n  public async getRecipeData(query: string, options: {\n    cuisine?: string;\n    diet?: string;\n    maxResults?: number;\n  } = {}): Promise<MCPApiResponse> {\n    const cacheKey = `recipes_${query.toLowerCase().replace(/\\s+/g, '_')}_${JSON.stringify(options)}`;\n    \n    // Check cache first\n    const cached = this.getFromCache(cacheKey);\n    if (cached) {\n      return {\n        success: true,\n        data: cached.data,\n        source: 'cache',\n        responseTime: 0,\n        timestamp: Date.now()\n      };\n    }\n\n    // Check rate limits (Spoonacular has strict daily limits)\n    if (!this.checkRateLimit('spoonacular-recipes')) {\n      logger.warn('Spoonacular recipe API rate limit exceeded');\n      return this.getRateLimitedResponse();\n    }\n\n    // Primary: Spoonacular MCP server\n    try {\n      const result = await this.callMCPServer('spoonacular-recipes', 'search_recipes', { query, ...options });\n      if (result.success) {\n        this.setCache(cacheKey, result.data, 12 * 60 * 60 * 1000); // 12 hours TTL\n        return { ...result, source: 'primary' };\n      }\n    } catch (error) {\n      logger.warn('Spoonacular MCP server failed:', error);\n    }\n\n    // Secondary: Direct Spoonacular API call\n    try {\n      const result = await this.callDirectSpoonacularAPI(query, options);\n      if (result.success) {\n        this.setCache(cacheKey, result.data, 12 * 60 * 60 * 1000);\n        return { ...result, source: 'secondary' };\n      }\n    } catch (error) {\n      logger.warn('Direct Spoonacular API failed:', error);\n    }\n\n    // Fallback: Local recipe database\n    try {\n      const fallbackData = await this.getFallbackRecipeData(query, options);\n      return {\n        success: true,\n        data: fallbackData,\n        source: 'fallback',\n        responseTime: 0,\n        timestamp: Date.now()\n      };\n    } catch (error) {\n      logger.error('All recipe data sources failed:', error);\n      return {\n        success: false,\n        error: 'Recipe data unavailable',\n        source: 'fallback',\n        responseTime: 0,\n        timestamp: Date.now()\n      };\n    }\n  }\n\n  /**\n   * Test multi-tier fallback strategy\n   */\n  public async testFallbackStrategy(): Promise<{\n    astrological: MCPApiResponse;\n    nutritional: MCPApiResponse;\n    recipes: MCPApiResponse;\n    overallReliability: number;\n  }> {\n    logger.info('Testing MCP server fallback strategy...');\n\n    const results = await Promise.allSettled([\n      this.getAstrologicalData(),\n      this.getNutritionalData('apple'),\n      this.getRecipeData('pasta')\n    ]);\n\n    const astrological = results[0].status === 'fulfilled' ? results[0].value : this.createErrorResponse('Astrological test failed');\n    const nutritional = results[1].status === 'fulfilled' ? results[1].value : this.createErrorResponse('Nutritional test failed');\n    const recipes = results[2].status === 'fulfilled' ? results[2].value : this.createErrorResponse('Recipe test failed');\n\n    const successCount = [astrological, nutritional, recipes].filter(r => r.success).length;\n    const overallReliability = successCount / 3;\n\n    logger.info('Fallback strategy test completed', {\n      astrological: astrological.success ? astrological.source : 'failed',\n      nutritional: nutritional.success ? nutritional.source : 'failed',\n      recipes: recipes.success ? recipes.source : 'failed',\n      overallReliability\n    });\n\n    return { astrological, nutritional, recipes, overallReliability };\n  }\n\n  /**\n   * Get server connection status\n   */\n  public getServerStatus(): Record<string, {\n    connected: boolean;\n    lastCheck: number;\n    responseTime: number;\n    errorCount: number;\n  }> {\n    const status: Record<string, any> = {};\n    \n    for (const [name, config] of this.servers) {\n      status[name] = {\n        connected: this.connectionStatus.get(name) || false,\n        lastCheck: Date.now(),\n        responseTime: 0, // Would be tracked in real implementation\n        errorCount: 0 // Would be tracked in real implementation\n      };\n    }\n    \n    return status;\n  }\n\n  // Private helper methods\n\n  private initializeServers(): void {\n    Object.values(DEFAULT_MCP_SERVERS).forEach(config => {\n      if (!config.disabled) {\n        this.servers.set(config.name, config);\n        this.connectionStatus.set(config.name, false);\n      }\n    });\n    \n    logger.info('MCP servers initialized:', Array.from(this.servers.keys()));\n  }\n\n  private initializeRateLimiters(): void {\n    Object.entries(RATE_LIMITS).forEach(([serverName, config]) => {\n      this.rateLimiters.set(serverName, new RateLimiter(config));\n    });\n    \n    logger.info('Rate limiters initialized for MCP servers');\n  }\n\n  private startHealthChecks(): void {\n    // Check server health every 5 minutes\n    setInterval(async () => {\n      for (const [name, config] of this.servers) {\n        try {\n          const isHealthy = await this.checkServerHealth(name);\n          this.connectionStatus.set(name, isHealthy);\n        } catch (error) {\n          logger.warn(`Health check failed for MCP server ${name}:`, error);\n          this.connectionStatus.set(name, false);\n        }\n      }\n    }, 5 * 60 * 1000);\n  }\n\n  private async callMCPServer(serverName: string, method: string, params: any): Promise<MCPApiResponse> {\n    const config = this.servers.get(serverName);\n    if (!config) {\n      throw new Error(`MCP server ${serverName} not configured`);\n    }\n\n    const startTime = performance.now();\n    \n    try {\n      // In a real implementation, this would use the actual MCP protocol\n      // For now, we simulate the MCP server call\n      const result = await this.simulateMCPCall(serverName, method, params);\n      const responseTime = performance.now() - startTime;\n      \n      return {\n        success: true,\n        data: result,\n        source: 'primary',\n        responseTime,\n        timestamp: Date.now()\n      };\n    } catch (error) {\n      const responseTime = performance.now() - startTime;\n      logger.error(`MCP server ${serverName} call failed:`, error);\n      \n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        source: 'primary',\n        responseTime,\n        timestamp: Date.now()\n      };\n    }\n  }\n\n  private async simulateMCPCall(serverName: string, method: string, params: any): Promise<any> {\n    // Simulate MCP server calls for demonstration\n    await new Promise(resolve => setTimeout(resolve, Math.random() * 1000 + 500)); // 500-1500ms delay\n    \n    switch (serverName) {\n      case 'nasa-horizons':\n        if (method === 'get_planetary_positions') {\n          return this.generateMockPlanetaryData(params.date);\n        }\n        break;\n      case 'usda-nutrition':\n        if (method === 'get_nutrition_data') {\n          return this.generateMockNutritionalData(params.ingredient);\n        }\n        break;\n      case 'spoonacular-recipes':\n        if (method === 'search_recipes') {\n          return this.generateMockRecipeData(params.query, params);\n        }\n        break;\n    }\n    \n    throw new Error(`Unknown method ${method} for server ${serverName}`);\n  }\n\n  private async checkServerHealth(serverName: string): Promise<boolean> {\n    try {\n      // In a real implementation, this would ping the MCP server\n      // For now, simulate health check\n      await new Promise(resolve => setTimeout(resolve, 100));\n      return Math.random() > 0.1; // 90% uptime simulation\n    } catch (error) {\n      return false;\n    }\n  }\n\n  private checkRateLimit(serverName: string): boolean {\n    const rateLimiter = this.rateLimiters.get(serverName);\n    return rateLimiter ? rateLimiter.checkLimit() : true;\n  }\n\n  private getFromCache<T>(key: string): MCPCacheEntry<T> | null {\n    const entry = this.cache.get(key);\n    if (!entry) return null;\n    \n    if (Date.now() - entry.timestamp > entry.ttl) {\n      this.cache.delete(key);\n      return null;\n    }\n    \n    return entry as MCPCacheEntry<T>;\n  }\n\n  private setCache<T>(key: string, data: T, ttl: number): void {\n    this.cache.set(key, {\n      data,\n      timestamp: Date.now(),\n      ttl,\n      source: 'cache'\n    });\n  }\n\n  private getRateLimitedResponse(): MCPApiResponse {\n    return {\n      success: false,\n      error: 'Rate limit exceeded',\n      source: 'primary',\n      responseTime: 0,\n      timestamp: Date.now()\n    };\n  }\n\n  private createErrorResponse(error: string): MCPApiResponse {\n    return {\n      success: false,\n      error,\n      source: 'fallback',\n      responseTime: 0,\n      timestamp: Date.now()\n    };\n  }\n\n  // Direct API call methods (fallback implementations)\n  private async callDirectNASAAPI(date: Date): Promise<MCPApiResponse> {\n    // Simulate direct NASA API call\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    return {\n      success: true,\n      data: this.generateMockPlanetaryData(date),\n      source: 'secondary',\n      responseTime: 2000,\n      timestamp: Date.now()\n    };\n  }\n\n  private async callDirectUSDAAPI(ingredient: string): Promise<MCPApiResponse> {\n    // Simulate direct USDA API call\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    return {\n      success: true,\n      data: this.generateMockNutritionalData(ingredient),\n      source: 'secondary',\n      responseTime: 1500,\n      timestamp: Date.now()\n    };\n  }\n\n  private async callDirectSpoonacularAPI(query: string, options: any): Promise<MCPApiResponse> {\n    // Simulate direct Spoonacular API call\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    return {\n      success: true,\n      data: this.generateMockRecipeData(query, options),\n      source: 'secondary',\n      responseTime: 1000,\n      timestamp: Date.now()\n    };\n  }\n\n  // Fallback data methods\n  private async getFallbackAstrologicalData(date: Date): Promise<any> {\n    // Return hardcoded reliable positions from March 2025\n    return {\n      sun: { sign: 'aries', degree: 8.5, exactLongitude: 8.5, isRetrograde: false },\n      moon: { sign: 'aries', degree: 1.57, exactLongitude: 1.57, isRetrograde: false },\n      mercury: { sign: 'aries', degree: 0.85, exactLongitude: 0.85, isRetrograde: true },\n      venus: { sign: 'pisces', degree: 29.08, exactLongitude: 359.08, isRetrograde: true },\n      mars: { sign: 'cancer', degree: 22.63, exactLongitude: 112.63, isRetrograde: false },\n      jupiter: { sign: 'gemini', degree: 15.52, exactLongitude: 75.52, isRetrograde: false },\n      saturn: { sign: 'pisces', degree: 24.12, exactLongitude: 354.12, isRetrograde: false }\n    };\n  }\n\n  private async getFallbackNutritionalData(ingredient: string): Promise<any> {\n    // Return basic nutritional data from local database\n    return {\n      name: ingredient,\n      calories: 50,\n      protein: 1,\n      carbs: 12,\n      fat: 0.2,\n      fiber: 2,\n      vitamins: ['C', 'K'],\n      minerals: ['potassium', 'folate']\n    };\n  }\n\n  private async getFallbackRecipeData(query: string, options: any): Promise<any> {\n    // Return basic recipe suggestions from local database\n    return {\n      recipes: [\n        {\n          id: 1,\n          title: `Simple ${query}`,\n          readyInMinutes: 30,\n          servings: 4,\n          image: 'placeholder.jpg',\n          summary: `A simple and delicious ${query} recipe.`\n        }\n      ],\n      totalResults: 1\n    };\n  }\n\n  // Mock data generators for simulation\n  private generateMockPlanetaryData(date: Date): any {\n    return {\n      date: date.toISOString(),\n      planets: {\n        sun: { sign: 'aries', degree: 8.5 + Math.random() * 2 },\n        moon: { sign: 'aries', degree: 1.57 + Math.random() * 5 },\n        mercury: { sign: 'aries', degree: 0.85 + Math.random() * 3 }\n      }\n    };\n  }\n\n  private generateMockNutritionalData(ingredient: string): any {\n    return {\n      name: ingredient,\n      fdcId: Math.floor(Math.random() * 100000),\n      calories: Math.floor(Math.random() * 200) + 20,\n      nutrients: {\n        protein: Math.floor(Math.random() * 20) + 1,\n        carbs: Math.floor(Math.random() * 50) + 5,\n        fat: Math.floor(Math.random() * 15) + 0.1\n      }\n    };\n  }\n\n  private generateMockRecipeData(query: string, options: any): any {\n    return {\n      results: Array.from({ length: options.maxResults || 5 }, (_, i) => ({\n        id: i + 1,\n        title: `${query} Recipe ${i + 1}`,\n        readyInMinutes: Math.floor(Math.random() * 60) + 15,\n        servings: Math.floor(Math.random() * 6) + 2,\n        cuisine: options.cuisine || 'international'\n      })),\n      totalResults: options.maxResults || 5\n    };\n  }\n}\n\n/**\n * Simple rate limiter implementation\n */\nclass RateLimiter {\n  private requests: number[] = [];\n  private config: MCPRateLimitConfig;\n\n  constructor(config: MCPRateLimitConfig) {\n    this.config = config;\n  }\n\n  checkLimit(): boolean {\n    const now = Date.now();\n    \n    // Clean old requests\n    this.requests = this.requests.filter(time => now - time < 60000); // Keep last minute\n    \n    // Check minute limit\n    if (this.requests.length >= this.config.requestsPerMinute) {\n      return false;\n    }\n    \n    // Add current request\n    this.requests.push(now);\n    return true;\n  }\n}\n\n/**\n * Convenience function to get MCP server integration instance\n */\nexport function getMCPServerIntegration(): MCPServerIntegration {\n  return MCPServerIntegration.getInstance();\n}\n\n/**\n * Hook for components to use MCP server integration\n */\nexport function useMCPServerIntegration() {\n  const mcp = getMCPServerIntegration();\n  \n  return {\n    getAstrologicalData: (date?: Date) => mcp.getAstrologicalData(date),\n    getNutritionalData: (ingredient: string) => mcp.getNutritionalData(ingredient),\n    getRecipeData: (query: string, options?: any) => mcp.getRecipeData(query, options),\n    testFallbackStrategy: () => mcp.testFallbackStrategy(),\n    getServerStatus: () => mcp.getServerStatus()\n  };\n}"],"version":3}