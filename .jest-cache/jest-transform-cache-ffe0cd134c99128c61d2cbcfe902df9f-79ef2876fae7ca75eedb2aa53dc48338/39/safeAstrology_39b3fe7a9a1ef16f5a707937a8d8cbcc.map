{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/safeAstrology.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/safeAstrology.ts"],"sourcesContent":["/**\n * Safe Astrological Utilities\n * \n * This module provides reliable astronomy calculations using hardcoded\n * accurate planetary positions for March 2025, avoiding the need for\n * complex API calls and calculations that might fail.\n */\n\nimport { AstrologicalState, type LunarPhase } from '@/types/alchemy';\nimport { ZodiacSign, PlanetaryAspect, CelestialPosition, AspectType } from '@/types/celestial';\nimport { createLogger } from '@/utils/logger';\n\n// Create a component-specific logger\nconst logger = createLogger('SafeAstrology');\n\n// Cache system to avoid redundant calculations\ninterface StateCache<T> {\n  data: T;\n  timestamp: number;\n}\n\n// Ensure ZodiacSign type is properly capitalized\nconst ZODIAC_SIGNS: ZodiacSign[] = [\n  'aries', 'taurus', 'gemini', 'cancer',\n  'leo', 'virgo', 'libra', 'scorpio',\n  'sagittarius', 'capricorn', 'aquarius', 'pisces'\n];\n\nlet astrologyCache: StateCache<AstrologicalState> | null = null;\nconst CACHE_DURATION = 15 * 60 * 1000; // 15 minutes\n\n/**\n * Get the current reliable planetary positions\n * Uses hardcoded accurate values for March 2025\n * @returns Record of planetary positions with sign, degree, and other data\n */\nexport function getReliablePlanetaryPositions(): Record<string, CelestialPosition> {\n  const positions: Record<string, CelestialPosition> = {\n    Sun: { sign: 'aries', degree: 8.63, exactLongitude: 8.63, isRetrograde: false },\n    Moon: { sign: 'aries', degree: 3.48, exactLongitude: 3.48, isRetrograde: false },\n    Mercury: { sign: 'aries', degree: 0.75, exactLongitude: 0.75, isRetrograde: true },\n    Venus: { sign: 'pisces', degree: 29.0, exactLongitude: 359.0, isRetrograde: true },\n    Mars: { sign: 'cancer', degree: 22.67, exactLongitude: 112.67, isRetrograde: false },\n    Jupiter: { sign: 'gemini', degree: 15.53, exactLongitude: 75.53, isRetrograde: false },\n    Saturn: { sign: 'pisces', degree: 24.13, exactLongitude: 354.13, isRetrograde: false },\n    Uranus: { sign: 'taurus', degree: 24.62, exactLongitude: 54.62, isRetrograde: false },\n    Neptune: { sign: 'pisces', degree: 29.93, exactLongitude: 359.93, isRetrograde: false },\n    Pluto: { sign: 'aquarius', degree: 3.5, exactLongitude: 333.5, isRetrograde: false },\n    northNode: { sign: 'pisces', degree: 26.88, exactLongitude: 356.88, isRetrograde: true },\n    southNode: { sign: 'virgo', degree: 26.88, exactLongitude: 176.88, isRetrograde: true },\n    Ascendant: { sign: 'scorpio', degree: 13.88, exactLongitude: 223.88, isRetrograde: false }\n  };\n  \n  return positions;\n}\n\n/**\n * Get the current moon phase as a number from 0-29.5\n * @returns Lunar age in days (0-29.5)\n */\nexport function calculateLunarPhase(): number {\n  // Calculate approximate lunar age (0-29.5)\n  // Based on the fact that March 28, 2025 has a new moon at 1° aries\n  const daysSinceMarch28 = getDaysSinceDate(new Date('2025-03-28'));\n  const lunarAge = (daysSinceMarch28 % 29.5 + 29.5) % 29.5;\n  return lunarAge;\n}\n\n/**\n * Get the name of the lunar phase\n * @param phase Lunar age in days (0-29.5)\n * @returns Name of lunar phase\n */\nexport function getLunarPhaseName(phase: number): string {\n  if (phase < 1) return 'new moon';\n  if (phase < 7.4) return 'waxing crescent';\n  if (phase < 8.4) return 'first quarter';\n  if (phase < 14.8) return 'waxing gibbous';\n  if (phase < 15.8) return 'full moon';\n  if (phase < 22.1) return 'waning gibbous';\n  if (phase < 23.1) return 'last quarter';\n  return 'waning crescent';\n}\n\n/**\n * Get the moon illumination percentage\n * @returns Illumination as a decimal (0-1)\n */\nexport function getMoonIllumination(): number {\n  const phase = calculateLunarPhase();\n  \n  // Calculate illumination based on lunar age\n  if (phase <= 14.8) {\n    // Waxing from new to full (0% to 100%)\n    return phase / 14.8;\n  } else {\n    // Waning from full to new (100% to 0%)\n    return (29.5 - phase) / 14.8;\n  }\n}\n\n/**\n * Calculate sun sign for a given date\n * @param date Date to calculate sun sign for (defaults to current date)\n * @returns Zodiac sign as a string\n */\nexport function calculateSunSign(date: Date = new Date()): ZodiacSign {\n  // For simplicity, hardcode the sun sign based on the month\n  const month = date.getMonth();\n  const day = date.getDate();\n  \n  // Simple zodiac date ranges\n  if ((month === 2 && day >= 21) || (month === 3 && day <= 19)) return 'aries';\n  if ((month === 3 && day >= 20) || (month === 4 && day <= 20)) return 'taurus';\n  if ((month === 4 && day >= 21) || (month === 5 && day <= 20)) return 'gemini';\n  if ((month === 5 && day >= 21) || (month === 6 && day <= 22)) return 'cancer';\n  if ((month === 6 && day >= 23) || (month === 7 && day <= 22)) return 'leo';\n  if ((month === 7 && day >= 23) || (month === 8 && day <= 22)) return 'virgo';\n  if ((month === 8 && day >= 23) || (month === 9 && day <= 22)) return 'libra';\n  if ((month === 9 && day >= 23) || (month === 10 && day <= 21)) return 'scorpio';\n  if ((month === 10 && day >= 22) || (month === 11 && day <= 21)) return 'sagittarius';\n  if ((month === 11 && day >= 22) || (month === 0 && day <= 19)) return 'capricorn';\n  if ((month === 0 && day >= 20) || (month === 1 && day <= 18)) return 'aquarius';\n  return 'pisces';\n}\n\n/**\n * Get zodiac sign position in degrees (0-359)\n * @param sign Zodiac sign\n * @param degree Degree within the sign (0-29.99)\n * @returns Absolute position in degrees (0-359)\n */\nexport function getZodiacPositionInDegrees(sign: ZodiacSign, degree: number): number {\n  const signIndex = ZODIAC_SIGNS.indexOf(sign);\n  if (signIndex === -1) {\n    logger.warn(`Unknown sign: ${sign}, falling back to Aries`);\n    return degree; // Aries starts at 0 degrees\n  }\n  return (signIndex * 30) + degree;\n}\n\n/**\n * Calculate planetary aspects from positions\n * @param positions Record of planetary positions\n * @returns Array of planetary aspects\n */\nexport function calculatePlanetaryAspects(positions: Record<string, CelestialPosition>): PlanetaryAspect[] {\n  const aspects: PlanetaryAspect[] = [];\n  const planets = Object.keys(positions);\n  \n  // Calculate aspects between all planet pairs\n  for (let i = 0; i < planets.length; i++) {\n    for (let j = i + 1; j < planets.length; j++) {\n      const planet1 = planets[i];\n      const planet2 = planets[j];\n      \n      if (!positions[planet1] || !positions[planet2]) continue;\n      \n      // Convert lowercase sign strings to proper ZodiacSign type values\n      const pos1Sign = positions[planet1].sign;\n      const pos2Sign = positions[planet2].sign;\n      \n      // Calculate the angular difference between planets\n      const pos1 = getZodiacPositionInDegrees(pos1Sign as ZodiacSign, positions[planet1].degree || 0);\n      const pos2 = getZodiacPositionInDegrees(pos2Sign as ZodiacSign, positions[planet2].degree || 0);\n      \n      let diff = Math.abs(pos1 - pos2);\n      if (diff > 180) diff = 360 - diff;\n      \n      // Check for aspects with orbs\n      const aspect = identifyAspect(diff);\n      if (aspect) {\n        // Create aspect with proper typing - 'planets' array instead of 'type'\n        aspects.push({\n          planet1,\n          planet2,\n          orb: aspect.orb,\n          influence: calculateAspectStrength(aspect.type, aspect.orb),\n          planets: [planet1, planet2],\n          additionalInfo: { aspectType: aspect.type }\n        });\n      }\n    }\n  }\n  \n  logger.debug(`Found ${aspects.length} aspects`);\n  return aspects;\n}\n\n/**\n * Identify aspect type from angle\n * @param angleDiff Angular difference between planets\n * @returns Aspect type and orb if aspect exists, null otherwise\n */\nexport function identifyAspect(angleDiff: number): { type: AspectType, orb: number } | null {\n  const aspects = [\n    { type: 'conjunction' as AspectType, angle: 0, maxOrb: 10 },\n    { type: 'opposition' as AspectType, angle: 180, maxOrb: 10 },\n    { type: 'trine' as AspectType, angle: 120, maxOrb: 8 },\n    { type: 'square' as AspectType, angle: 90, maxOrb: 8 },\n    { type: 'sextile' as AspectType, angle: 60, maxOrb: 6 },\n    { type: 'quincunx' as AspectType, angle: 150, maxOrb: 5 },\n    { type: 'semisextile' as AspectType, angle: 30, maxOrb: 3 },\n    { type: 'semisquare' as AspectType, angle: 45, maxOrb: 3 },\n    { type: 'sesquisquare' as AspectType, angle: 135, maxOrb: 3 }\n  ];\n  \n  for (const aspect of aspects) {\n    const orb = Math.abs(angleDiff - aspect.angle);\n    if (orb <= aspect.maxOrb) {\n      return { type: aspect.type, orb };\n    }\n  }\n  \n  return null;\n}\n\n/**\n * Calculate aspect strength based on type and orb\n * @param type Aspect type\n * @param orb Orb (angle deviation from exact aspect)\n * @returns Strength value (0-10)\n */\nexport function calculateAspectStrength(type: AspectType, orb: number): number {\n  const baseStrengths = {\n    'conjunction': 10,\n    'opposition': 10,\n    'trine': 8,\n    'square': 8,\n    'sextile': 6,\n    'quincunx': 4,\n    'semisextile': 2,\n    'semisquare': 2,\n    'sesquisquare': 2,\n    'quintile': 1,\n    'biquintile': 1\n  } as Record<AspectType, number>;\n  \n  // Diminish strength based on orb\n  const baseStrength = baseStrengths[type] || 0;\n  const maxOrb = type === 'conjunction' || type === 'opposition' ? 10 : \n                 type === 'trine' || type === 'square' ? 8 : \n                 type === 'sextile' ? 6 : 5;\n  \n  return baseStrength * (1 - orb / maxOrb);\n}\n\n/**\n * Get the current astrological state\n * @returns Current astrological state with planetary positions, aspects, etc.\n */\nexport function getCurrentAstrologicalState(): AstrologicalState {\n  // Use cache if available and recent\n  if (astrologyCache && (Date.now() - astrologyCache.timestamp < CACHE_DURATION)) {\n    logger.debug(\"Using cached astrological state\");\n    return astrologyCache.data;\n  }\n  \n  logger.debug(\"Calculating fresh astrological state\");\n  \n  const now = new Date();\n  const positions = getReliablePlanetaryPositions();\n  const lunarPhase = calculateLunarPhase();\n  const phaseName = getLunarPhaseName(lunarPhase);\n  \n  // Determine dominant element based on positions\n  const elements = countElements(positions);\n  const dominantElement = getDominantElement(elements);\n  \n  // Calculate aspects\n  const aspects = calculatePlanetaryAspects(positions);\n  \n  // Determine if it's daytime (between 6 AM and 6 PM)\n  const hours = now.getHours();\n  const isDaytime = hours >= 6 && hours < 18;\n  \n  // Calculate active planets (sun, moon + any in major aspect)\n  const activePlanets = [\"Sun\", \"Moon\"];\n  aspects.forEach(aspect => {\n    // Check influence rather than strength\n    if (aspect.influence && aspect.influence > 5) {\n      const planet1 = aspect.planet1.charAt(0).toUpperCase() + aspect.planet1.slice(1);\n      const planet2 = aspect.planet2.charAt(0).toUpperCase() + aspect.planet2.slice(1);\n      \n      if (!activePlanets.includes(planet1)) activePlanets.push(planet1);\n      if (!activePlanets.includes(planet2)) activePlanets.push(planet2);\n    }\n  });\n  \n  // Convert string element to proper casing for Element type\n  const dominantElementCapitalized = dominantElement.charAt(0).toUpperCase() + dominantElement.slice(1) as 'Fire' | 'Water' | 'Earth' | 'Air';\n  \n  const state: AstrologicalState = {\n    sunSign: toZodiacSign(String(positions.sun.sign)),\n    moonSign: toZodiacSign(String(positions.moon.sign)),\n    lunarPhase: phaseName as LunarPhase,\n    activePlanets,\n    dominantElement: dominantElementCapitalized,\n    dominantPlanets: activePlanets \n  };\n  \n  // Update cache\n  astrologyCache = {\n    data: state,\n    timestamp: Date.now()\n  };\n  \n  return state;\n}\n\n/**\n * Count elements from planetary positions\n * @param positions Record of planetary positions\n * @returns Count of each element\n */\nfunction countElements(positions: Record<string, CelestialPosition>): Record<string, number> {\n  const elements: Record<string, number> = {\n    fire: 0,\n    earth: 0,\n    air: 0,\n    water: 0\n  };\n  \n  // Element mapping for signs\n  const signElements: Record<ZodiacSign, keyof typeof elements> = {\n    aries: 'Fire',\n    leo: 'Fire',\n    sagittarius: 'Fire',\n    taurus: 'Earth',\n    virgo: 'Earth',\n    capricorn: 'Earth',\n    gemini: 'Air',\n    libra: 'Air',\n    aquarius: 'Air',\n    cancer: 'Water',\n    scorpio: 'Water',\n    pisces: 'Water'\n  };\n  \n  // Extra weight for certain planets\n  const planetWeight: Record<string, number> = {\n    sun: 3,\n    moon: 2,\n    ascendant: 2,\n    mercury: 1.5,\n    venus: 1.5,\n    mars: 1.5,\n    jupiter: 1.5,\n    saturn: 1.5,\n    uranus: 1,\n    neptune: 1,\n    pluto: 1,\n    northNode: 0.5,\n    southNode: 0.5\n  };\n  \n  // Count elements\n  Object.entries(positions).forEach(([planet, position]) => {\n    const element = signElements[position.sign || 'aries'];\n    const weight = planetWeight[planet] || 1;\n    elements[element] += weight;\n  });\n  \n  return elements;\n}\n\n/**\n * Get the dominant element from element counts\n * @param elements Record of element counts\n * @returns Dominant element\n */\nfunction getDominantElement(elements: Record<string, number>): string {\n  let maxElement = 'balanced';\n  let maxCount = 0;\n  \n  Object.entries(elements).forEach(([element, count]) => {\n    if (count > maxCount) {\n      maxCount = count;\n      maxElement = element;\n    }\n  });\n  \n  return maxElement;\n}\n\n/**\n * Calculate days since a specific date\n * @param date Reference date\n * @returns Number of days since the reference date\n */\nfunction getDaysSinceDate(date: Date): number {\n  const now = new Date();\n  const timeDiff = now.getTime() - date.getTime();\n  return timeDiff / (1000 * 60 * 60 * 24);\n}\n\n// Helper function to convert any string to a valid ZodiacSign\nfunction toZodiacSign(sign: string): ZodiacSign {\n  // Convert first letter to uppercase and rest to lowercase\n  const formattedSign = sign.charAt(0).toUpperCase() + sign.slice(1).toLowerCase();\n  \n  // Check if it's a valid ZodiacSign\n  if (ZODIAC_SIGNS.includes(formattedSign as ZodiacSign)) {\n    return formattedSign as ZodiacSign;\n  }\n  \n  // Default to Aries if invalid\n  return 'aries';\n} "],"version":3}