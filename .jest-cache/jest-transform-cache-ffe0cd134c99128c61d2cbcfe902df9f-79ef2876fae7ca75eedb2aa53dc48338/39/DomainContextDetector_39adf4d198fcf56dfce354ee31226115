59fceb7769fce9929b0e8d6a571c54fe
"use strict";
/**
 * DomainContextDetector - Advanced domain context detection for specialized file handling
 *
 * This system detects domain-specific contexts (astrological calculations, campaign systems)
 * and provides specialized handling recommendations for linting issues.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DomainContextDetector = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
/**
 * Main DomainContextDetector class
 */
class DomainContextDetector {
    workspaceRoot;
    domainPatterns;
    contentAnalysisCache;
    constructor(workspaceRoot = process.cwd()) {
        this.workspaceRoot = workspaceRoot;
        this.contentAnalysisCache = new Map();
        this.initializeDomainPatterns();
    }
    /**
     * Analyze file and detect domain context
     */
    async analyzeFile(filePath) {
        const absolutePath = path.isAbsolute(filePath)
            ? filePath
            : path.join(this.workspaceRoot, filePath);
        const relativePath = path.relative(this.workspaceRoot, absolutePath);
        // Detect domain context
        const domainContext = await this.detectDomainContext(relativePath, absolutePath);
        // Analyze risk factors
        const riskFactors = this.analyzeRiskFactors(domainContext, relativePath);
        // Determine preservation requirements
        const preservationRequirements = await this.determinePreservationRequirements(domainContext, absolutePath);
        return {
            filePath: relativePath,
            domainContext,
            riskFactors,
            preservationRequirements,
        };
    }
    /**
     * Batch analyze multiple files
     */
    async analyzeFiles(filePaths) {
        const analyses = [];
        for (const filePath of filePaths) {
            try {
                const analysis = await this.analyzeFile(filePath);
                analyses.push(analysis);
            }
            catch (error) {
                console.warn(`Failed to analyze ${filePath}:`, error);
            }
        }
        return analyses;
    }
    /**
     * Get domain-specific linting recommendations
     */
    getDomainLintingRecommendations(domainContext) {
        const rulesToDisable = [];
        const rulesToModify = [];
        const additionalValidation = [];
        for (const specialRule of domainContext.specialRules) {
            switch (specialRule.action) {
                case 'disable':
                    rulesToDisable.push(specialRule.rule);
                    break;
                case 'modify':
                    rulesToModify.push({
                        rule: specialRule.rule,
                        modification: specialRule.reason,
                    });
                    break;
                case 'enhance':
                    additionalValidation.push(`Enhanced ${specialRule.rule}: ${specialRule.reason}`);
                    break;
                case 'monitor':
                    additionalValidation.push(`Monitor ${specialRule.rule}: ${specialRule.reason}`);
                    break;
            }
        }
        return { rulesToDisable, rulesToModify, additionalValidation };
    }
    /**
     * Detect domain context for a file
     */
    async detectDomainContext(relativePath, absolutePath) {
        const indicators = [];
        let confidence = 0;
        let primaryType = 'utility';
        let subtype;
        // Analyze path patterns
        for (const [domain, patterns] of this.domainPatterns.entries()) {
            for (const pattern of patterns) {
                if (pattern.type === 'path' && new RegExp(pattern.pattern).test(relativePath)) {
                    indicators.push(pattern);
                    confidence += pattern.weight;
                    if (pattern.weight > 0.7) {
                        primaryType = domain;
                    }
                }
                if (pattern.type === 'filename' &&
                    new RegExp(pattern.pattern).test(path.basename(relativePath))) {
                    indicators.push(pattern);
                    confidence += pattern.weight;
                }
            }
        }
        // Analyze file content if accessible
        try {
            if (fs.existsSync(absolutePath)) {
                const contentAnalysis = await this.analyzeFileContent(absolutePath);
                indicators.push(...contentAnalysis.indicators);
                confidence += contentAnalysis.confidenceBoost;
                if (contentAnalysis.detectedType && contentAnalysis.confidenceBoost > 0.5) {
                    primaryType = contentAnalysis.detectedType;
                    subtype = contentAnalysis.subtype;
                }
            }
        }
        catch (error) {
            // Content analysis failed, continue with path-based detection
        }
        // Normalize confidence
        confidence = Math.min(1, confidence);
        // Generate special rules and recommendations
        const specialRules = this.generateSpecialRules(primaryType, subtype, relativePath);
        const handlingRecommendations = this.generateHandlingRecommendations(primaryType, confidence);
        return {
            type: primaryType,
            subtype,
            confidence,
            indicators,
            specialRules,
            handlingRecommendations,
        };
    }
    /**
     * Analyze file content for domain indicators
     */
    async analyzeFileContent(absolutePath) {
        // Check cache first
        const cacheKey = `${absolutePath}:${fs.statSync(absolutePath).mtime.getTime()}`;
        if (this.contentAnalysisCache.has(cacheKey)) {
            return this.contentAnalysisCache.get(cacheKey);
        }
        const content = fs.readFileSync(absolutePath, 'utf8');
        const indicators = [];
        let confidenceBoost = 0;
        let detectedType;
        let subtype;
        // Astrological content patterns
        const astrologicalPatterns = [
            { pattern: /planetary|planet|astro|zodiac|sign|degree|longitude/i, weight: 0.3 },
            { pattern: /mercury|venus|mars|jupiter|saturn|uranus|neptune|pluto/i, weight: 0.4 },
            {
                pattern: /aries|taurus|gemini|cancer|leo|virgo|libra|scorpio|sagittarius|capricorn|aquarius|pisces/i,
                weight: 0.4,
            },
            { pattern: /elemental|fire|water|earth|air|element/i, weight: 0.3 },
            { pattern: /transit|retrograde|conjunction|opposition|trine|square/i, weight: 0.5 },
            { pattern: /alchemical|alchemy|transformation|pillar/i, weight: 0.4 },
            { pattern: /culinary.*astrology|astrological.*cooking/i, weight: 0.6 },
        ];
        for (const { pattern, weight } of astrologicalPatterns) {
            if (pattern.test(content)) {
                indicators.push({
                    type: 'content',
                    pattern: pattern.source,
                    weight,
                    description: 'Astrological content detected',
                });
                confidenceBoost += weight;
                detectedType = 'astrological';
            }
        }
        // Campaign system patterns
        const campaignPatterns = [
            { pattern: /campaign|Campaign/g, weight: 0.4 },
            { pattern: /progress.*track|track.*progress/i, weight: 0.3 },
            { pattern: /safety.*protocol|protocol.*safety/i, weight: 0.4 },
            { pattern: /typescript.*error|error.*typescript/i, weight: 0.3 },
            { pattern: /metrics|intelligence|enterprise/i, weight: 0.2 },
            { pattern: /rollback|stash|validation/i, weight: 0.3 },
        ];
        for (const { pattern, weight } of campaignPatterns) {
            const matches = content.match(pattern);
            if (matches && matches.length > 2) {
                // Multiple occurrences
                indicators.push({
                    type: 'content',
                    pattern: pattern.source,
                    weight,
                    description: 'Campaign system content detected',
                });
                confidenceBoost += weight;
                if (!detectedType || detectedType === 'utility') {
                    detectedType = 'campaign';
                }
            }
        }
        // Test file patterns
        if (/describe|it|test|expect|jest|beforeEach|afterEach/i.test(content)) {
            indicators.push({
                type: 'content',
                pattern: 'test-framework',
                weight: 0.8,
                description: 'Test framework usage detected',
            });
            confidenceBoost += 0.8;
            detectedType = 'test';
        }
        // React component patterns
        if (/jsx|tsx|React|useState|useEffect|component/i.test(content)) {
            indicators.push({
                type: 'content',
                pattern: 'react-component',
                weight: 0.6,
                description: 'React component detected',
            });
            if (!detectedType || detectedType === 'utility') {
                detectedType = 'component';
            }
        }
        // Service patterns
        if (/service|Service|api|Api|client|Client/i.test(content)) {
            indicators.push({
                type: 'content',
                pattern: 'service-layer',
                weight: 0.4,
                description: 'Service layer detected',
            });
            if (!detectedType || detectedType === 'utility') {
                detectedType = 'service';
            }
        }
        // Determine subtype based on specific patterns
        if (detectedType === 'astrological') {
            if (/calculation|compute|math/i.test(content)) {
                subtype = 'calculation';
            }
            else if (/data|constant|fallback/i.test(content)) {
                subtype = 'data';
            }
            else if (/service|api/i.test(content)) {
                subtype = 'service';
            }
        }
        else if (detectedType === 'campaign') {
            if (/controller|orchestrat/i.test(content)) {
                subtype = 'controller';
            }
            else if (/track|progress|metric/i.test(content)) {
                subtype = 'tracking';
            }
            else if (/safety|protocol/i.test(content)) {
                subtype = 'safety';
            }
        }
        const result = { indicators, confidenceBoost, detectedType, subtype };
        this.contentAnalysisCache.set(cacheKey, result);
        return result;
    }
    /**
     * Generate special rules for domain context
     */
    generateSpecialRules(type, subtype, filePath) {
        const rules = [];
        switch (type) {
            case 'astrological':
                rules.push({
                    rule: '@typescript-eslint/no-explicit-any',
                    action: 'disable',
                    reason: 'Astrological calculations may require flexible typing for astronomical data',
                }, {
                    rule: 'no-magic-numbers',
                    action: 'disable',
                    reason: 'Astronomical constants and degrees are meaningful magic numbers',
                }, {
                    rule: '@typescript-eslint/no-unused-vars',
                    action: 'modify',
                    reason: 'Preserve variables with astronomical significance (planet, position, degree, sign)',
                    conditions: ['varsIgnorePattern: "^(_|planet|position|degree|sign|FALLBACK|RELIABLE)"'],
                }, {
                    rule: 'no-console',
                    action: 'modify',
                    reason: 'Allow console.info for astronomical debugging',
                    conditions: ['allow: ["warn", "error", "info"]'],
                });
                if (subtype === 'calculation') {
                    rules.push({
                        rule: 'complexity',
                        action: 'disable',
                        reason: 'Astronomical calculations can be inherently complex',
                    }, {
                        rule: 'max-lines-per-function',
                        action: 'disable',
                        reason: 'Complex astronomical algorithms may require longer functions',
                    });
                }
                break;
            case 'campaign':
                rules.push({
                    rule: 'no-console',
                    action: 'disable',
                    reason: 'Campaign systems require extensive logging for monitoring',
                }, {
                    rule: 'complexity',
                    action: 'modify',
                    reason: 'Allow higher complexity for campaign orchestration',
                    conditions: ['max: 15'],
                }, {
                    rule: 'max-lines-per-function',
                    action: 'modify',
                    reason: 'Campaign functions may be longer due to safety protocols',
                    conditions: ['max: 100'],
                }, {
                    rule: '@typescript-eslint/no-unused-vars',
                    action: 'modify',
                    reason: 'Preserve campaign system variables',
                    conditions: ['varsIgnorePattern: "^(_|campaign|progress|metrics|safety|CAMPAIGN)"'],
                });
                if (subtype === 'safety') {
                    rules.push({
                        rule: 'no-process-exit',
                        action: 'disable',
                        reason: 'Safety protocols may need to exit process in emergency situations',
                    });
                }
                break;
            case 'test':
                rules.push({
                    rule: '@typescript-eslint/no-explicit-any',
                    action: 'disable',
                    reason: 'Test files often need flexible typing for mocks and stubs',
                }, {
                    rule: 'no-console',
                    action: 'disable',
                    reason: 'Console output is acceptable in test files',
                }, {
                    rule: 'max-lines',
                    action: 'disable',
                    reason: 'Test files can be long due to comprehensive test cases',
                }, {
                    rule: '@typescript-eslint/no-unused-vars',
                    action: 'modify',
                    reason: 'Allow unused variables in test setup',
                    conditions: ['varsIgnorePattern: "^(_|mock|stub|test)"'],
                });
                break;
            case 'script':
                rules.push({
                    rule: 'no-console',
                    action: 'disable',
                    reason: 'Scripts typically need console output',
                }, {
                    rule: '@typescript-eslint/no-explicit-any',
                    action: 'disable',
                    reason: 'Scripts may need flexible typing',
                }, {
                    rule: 'no-process-exit',
                    action: 'disable',
                    reason: 'Scripts may need to exit with specific codes',
                });
                break;
        }
        return rules;
    }
    /**
     * Generate handling recommendations
     */
    generateHandlingRecommendations(type, confidence) {
        const recommendations = [];
        if (confidence > 0.8) {
            recommendations.push({
                category: 'linting',
                recommendation: 'Apply domain-specific linting rules with high confidence',
                priority: 'high',
                rationale: `High confidence (${Math.round(confidence * 100)}%) domain detection`,
            });
        }
        else if (confidence > 0.5) {
            recommendations.push({
                category: 'linting',
                recommendation: 'Apply domain-specific rules with validation',
                priority: 'medium',
                rationale: `Medium confidence (${Math.round(confidence * 100)}%) domain detection`,
            });
        }
        switch (type) {
            case 'astrological':
                recommendations.push({
                    category: 'review',
                    recommendation: 'Require astrological domain expert review for any changes',
                    priority: 'high',
                    rationale: 'Astrological calculations require specialized knowledge',
                }, {
                    category: 'testing',
                    recommendation: 'Validate astronomical accuracy after any modifications',
                    priority: 'high',
                    rationale: 'Changes could affect calculation precision',
                });
                break;
            case 'campaign':
                recommendations.push({
                    category: 'testing',
                    recommendation: 'Test campaign system integration after changes',
                    priority: 'high',
                    rationale: 'Campaign system changes can affect automation workflows',
                }, {
                    category: 'deployment',
                    recommendation: 'Deploy campaign changes with rollback capability',
                    priority: 'medium',
                    rationale: 'Campaign system is critical for code quality automation',
                });
                break;
            case 'test':
                recommendations.push({
                    category: 'linting',
                    recommendation: 'Use relaxed linting rules appropriate for test files',
                    priority: 'medium',
                    rationale: 'Test files have different quality requirements',
                });
                break;
        }
        return recommendations;
    }
    /**
     * Analyze risk factors for domain context
     */
    analyzeRiskFactors(domainContext, filePath) {
        const riskFactors = [];
        switch (domainContext.type) {
            case 'astrological':
                riskFactors.push({
                    type: 'calculation-accuracy',
                    description: 'Changes may affect astronomical calculation precision',
                    severity: 'critical',
                    mitigation: 'Validate against known astronomical data and transit dates',
                }, {
                    type: 'data-integrity',
                    description: 'Planetary position data must remain accurate',
                    severity: 'high',
                    mitigation: 'Cross-reference with multiple astronomical sources',
                });
                if (filePath.includes('fallback') || filePath.includes('reliable')) {
                    riskFactors.push({
                        type: 'data-integrity',
                        description: 'Fallback data is critical for system reliability',
                        severity: 'critical',
                        mitigation: 'Never modify fallback astronomical data without expert validation',
                    });
                }
                break;
            case 'campaign':
                riskFactors.push({
                    type: 'performance',
                    description: 'Campaign system performance affects development workflow',
                    severity: 'medium',
                    mitigation: 'Monitor execution time and memory usage',
                });
                if (filePath.includes('safety') || filePath.includes('protocol')) {
                    riskFactors.push({
                        type: 'security',
                        description: 'Safety protocols protect against code corruption',
                        severity: 'high',
                        mitigation: 'Thoroughly test all safety mechanisms',
                    });
                }
                break;
        }
        return riskFactors;
    }
    /**
     * Determine preservation requirements
     */
    async determinePreservationRequirements(domainContext, absolutePath) {
        const requirements = [];
        switch (domainContext.type) {
            case 'astrological':
                requirements.push({
                    element: 'constants',
                    pattern: /RELIABLE_POSITIONS|FALLBACK|TRANSIT_DATES|PLANETARY_/,
                    reason: 'Astronomical constants must be preserved for calculation accuracy',
                    strictness: 'absolute',
                }, {
                    element: 'variables',
                    pattern: /planet|position|degree|longitude|sign|retrograde/i,
                    reason: 'Astronomical variables are critical for calculations',
                    strictness: 'high',
                }, {
                    element: 'functions',
                    pattern: /calculate|validate|getReliable|fallback/i,
                    reason: 'Core astronomical functions must be preserved',
                    strictness: 'high',
                });
                break;
            case 'campaign':
                requirements.push({
                    element: 'variables',
                    pattern: /CAMPAIGN|PROGRESS|METRICS|SAFETY|ERROR_THRESHOLD/,
                    reason: 'Campaign system constants control automation behavior',
                    strictness: 'high',
                }, {
                    element: 'functions',
                    pattern: /safety|rollback|validate|track/i,
                    reason: 'Safety and tracking functions are critical',
                    strictness: 'high',
                });
                break;
        }
        return requirements;
    }
    /**
     * Initialize domain pattern recognition
     */
    initializeDomainPatterns() {
        this.domainPatterns = new Map();
        // Astrological patterns
        this.domainPatterns.set('astrological', [
            {
                type: 'path',
                pattern: '/calculations/',
                weight: 0.8,
                description: 'Astrological calculations directory',
            },
            {
                type: 'path',
                pattern: '/data/planets/',
                weight: 0.9,
                description: 'Planetary data directory',
            },
            {
                type: 'filename',
                pattern: 'reliableAstronomy|planetaryConsistencyCheck|Astrological|Alchemical',
                weight: 0.9,
                description: 'Astrological utility files',
            },
            {
                type: 'path',
                pattern: '/services/.*Astrological|/services/.*Alchemical',
                weight: 0.8,
                description: 'Astrological service files',
            },
        ]);
        // Campaign system patterns
        this.domainPatterns.set('campaign', [
            {
                type: 'path',
                pattern: '/services/campaign/',
                weight: 0.9,
                description: 'Campaign system directory',
            },
            {
                type: 'filename',
                pattern: 'Campaign|Progress|Safety|Intelligence',
                weight: 0.8,
                description: 'Campaign system files',
            },
            {
                type: 'path',
                pattern: '/types/campaign',
                weight: 0.9,
                description: 'Campaign type definitions',
            },
        ]);
        // Test patterns
        this.domainPatterns.set('test', [
            {
                type: 'filename',
                pattern: '\\.test\\.|\\.spec\\.',
                weight: 0.9,
                description: 'Test files',
            },
            {
                type: 'path',
                pattern: '/__tests__/',
                weight: 0.9,
                description: 'Test directory',
            },
        ]);
        // Script patterns
        this.domainPatterns.set('script', [
            {
                type: 'path',
                pattern: '/scripts/',
                weight: 0.9,
                description: 'Scripts directory',
            },
            {
                type: 'filename',
                pattern: '\\.config\\.|setup\\.|install\\.',
                weight: 0.8,
                description: 'Configuration and setup files',
            },
        ]);
    }
}
exports.DomainContextDetector = DomainContextDetector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L2JhY2t1cHMvZmlyc3Qtd2F2ZS0yMDI1LTA4LTExVDA1LTE5LTI2LTgxM1ovc3JjL3NlcnZpY2VzL2xpbnRpbmcvRG9tYWluQ29udGV4dERldGVjdG9yLnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7R0FLRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFSCx1Q0FBeUI7QUFDekIsMkNBQTZCO0FBNkQ3Qjs7R0FFRztBQUNILE1BQWEscUJBQXFCO0lBQ3hCLGFBQWEsQ0FBUztJQUN0QixjQUFjLENBQWtDO0lBQ2hELG9CQUFvQixDQUFtQjtJQUUvQyxZQUFZLGdCQUF3QixPQUFPLENBQUMsR0FBRyxFQUFFO1FBQy9DLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO1FBQ25DLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ3RDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUssQ0FBQyxXQUFXLENBQUMsUUFBZ0I7UUFDaEMsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUM7WUFDNUMsQ0FBQyxDQUFDLFFBQVE7WUFDVixDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzVDLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUVyRSx3QkFBd0I7UUFDeEIsTUFBTSxhQUFhLEdBQUcsTUFBTSxJQUFJLENBQUMsbUJBQW1CLENBQUMsWUFBWSxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBRWpGLHVCQUF1QjtRQUN2QixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsYUFBYSxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBRXpFLHND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LE1BQU07Z0JBQ1osT0FBTyxFQUFFLGFBQWE7Z0JBQ3RCLE1BQU0sRUFBRSxHQUFHO2dCQUNYLFdBQVcsRUFBRSxnQkFBZ0I7YUFDOUI7U0FDRixDQUFDLENBQUM7UUFFSCxrQkFBa0I7UUFDbEIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFO1lBQ2hDO2dCQUNFLElBQUksRUFBRSxNQUFNO2dCQUNaLE9BQU8sRUFBRSxXQUFXO2dCQUNwQixNQUFNLEVBQUUsR0FBRztnQkFDWCxXQUFXLEVBQUUsbUJBQW1CO2FBQ2pDO1lBQ0Q7Z0JBQ0UsSUFBSSxFQUFFLFVBQVU7Z0JBQ2hCLE9BQU8sRUFBRSxrQ0FBa0M7Z0JBQzNDLE1BQU0sRUFBRSxHQUFHO2dCQUNYLFdBQVcsRUFBRSwrQkFBK0I7YUFDN0M7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUFyc0JELHNEQXFzQkMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L2JhY2t1cHMvZmlyc3Qtd2F2ZS0yMDI1LTA4LTExVDA1LTE5LTI2LTgxM1ovc3JjL3NlcnZpY2VzL2xpbnRpbmcvRG9tYWluQ29udGV4dERldGVjdG9yLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRG9tYWluQ29udGV4dERldGVjdG9yIC0gQWR2YW5jZWQgZG9tYWluIGNvbnRleHQgZGV0ZWN0aW9uIGZvciBzcGVjaWFsaXplZCBmaWxlIGhhbmRsaW5nXG4gKlxuICogVGhpcyBzeXN0ZW0gZGV0ZWN0cyBkb21haW4tc3BlY2lmaWMgY29udGV4dHMgKGFzdHJvbG9naWNhbCBjYWxjdWxhdGlvbnMsIGNhbXBhaWduIHN5c3RlbXMpXG4gKiBhbmQgcHJvdmlkZXMgc3BlY2lhbGl6ZWQgaGFuZGxpbmcgcmVjb21tZW5kYXRpb25zIGZvciBsaW50aW5nIGlzc3Vlcy5cbiAqL1xuXG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuXG5leHBvcnQgaW50ZXJmYWNlIERvbWFpbkNvbnRleHQge1xuICB0eXBlOlxuICAgIHwgJ2FzdHJvbG9naWNhbCdcbiAgICB8ICdjYW1wYWlnbidcbiAgICB8ICd0ZXN0J1xuICAgIHwgJ3NjcmlwdCdcbiAgICB8ICdjb21wb25lbnQnXG4gICAgfCAnc2VydmljZSdcbiAgICB8ICd1dGlsaXR5J1xuICAgIHwgJ2NvbmZpZyc7XG4gIHN1YnR5cGU/OiBzdHJpbmc7XG4gIGNvbmZpZGVuY2U6IG51bWJlcjsgLy8gMC0xXG4gIGluZGljYXRvcnM6IENvbnRleHRJbmRpY2F0b3JbXTtcbiAgc3BlY2lhbFJ1bGVzOiBTcGVjaWFsUnVsZVtdO1xuICBoYW5kbGluZ1JlY29tbWVuZGF0aW9uczogSGFuZGxpbmdSZWNvbW1lbmRhdGlvbltdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbnRleHRJbmRpY2F0b3Ige1xuICB0eXBlOiAnZmlsZW5hbWUnIHwgJ3BhdGgnIHwgJ2NvbnRlbnQnIHwgJ2ltcG9ydHMnIHwgJ2V4cG9ydHMnO1xuICBwYXR0ZXJuOiBzdHJpbmc7XG4gIHdlaWdodDogbnVtYmVyO1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNwZWNpYWxSdWxlIHtcbiAgcnVsZTogc3RyaW5nO1xuICBhY3Rpb246ICdkaXNhYmxlJyB8ICdtb2RpZnknIHwgJ2VuaGFuY2UnIHwgJ21vbml0b3InO1xuICByZWFzb246IHN0cmluZztcbiAgY29uZGl0aW9ucz86IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEhhbmRsaW5nUmVjb21tZW5kYXRpb24ge1xuICBjYXRlZ29yeTogJ2xpbnRpbmcnIHwgJ3Rlc3RpbmcnIHwgJ3JldmlldycgfCAnZGVwbG95bWVudCc7XG4gIHJlY29tbWVuZGF0aW9uOiBzdHJpbmc7XG4gIHByaW9yaXR5OiAnaGlnaCcgfCAnbWVkaXVtJyB8ICdsb3cnO1xuICByYXRpb25hbGU6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGaWxlQW5hbHlzaXMge1xuICBmaWxlUGF0aDogc3RyaW5nO1xuICBkb21haW5Db250ZXh0OiBEb21haW5Db250ZXh0O1xuICByaXNrRmFjdG9yczogUmlza0ZhY3RvcltdO1xuICBwcmVzZXJ2YXRpb25SZXF1aXJlbWVudHM6IFByZXNlcnZhdGlvblJlcXVpcmVtZW50W107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmlza0ZhY3RvciB7XG4gIHR5cGU6ICdjYWxjdWxhdGlvbi1hY2N1cmFjeScgfCAnZGF0YS1pbnRlZ3JpdHknIHwgJ3BlcmZvcm1hbmNlJyB8ICdzZWN1cml0eSc7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIHNldmVyaXR5OiAnY3JpdGljYWwnIHwgJ2hpZ2gnIHwgJ21lZGl1bScgfCAnbG93JztcbiAgbWl0aWdhdGlvbjogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByZXNlcnZhdGlvblJlcXVpcmVtZW50IHtcbiAgZWxlbWVudDogJ2NvbnN0YW50cycgfCAndmFyaWFibGVzJyB8ICdmdW5jdGlvbnMnIHwgJ2ltcG9ydHMnIHwgJ2NvbW1lbnRzJztcbiAgcGF0dGVybjogUmVnRXhwO1xuICByZWFzb246IHN0cmluZztcbiAgc3RyaWN0bmVzczogJ2Fic29sdXRlJyB8ICdoaWdoJyB8ICdtZWRpdW0nIHwgJ2xvdyc7XG59XG5cbi8qKlxuICogTWFpbiBEb21haW5Db250ZXh0RGV0ZWN0b3IgY2xhc3NcbiAqL1xuZXhwb3J0IGNsYXNzIERvbWFpbkNvbnRleHREZXRlY3RvciB7XG4gIHByaXZhdGUgd29ya3NwYWNlUm9vdDogc3RyaW5nO1xuICBwcml2YXRlIGRvbWFpblBhdHRlcm5zOiBNYXA8c3RyaW5nLCBDb250ZXh0SW5kaWNhdG9yW10+O1xuICBwcml2YXRlIGNvbnRlbnRBbmFseXNpc0NhY2hlOiBNYXA8c3RyaW5nLCBhbnk+O1xuXG4gIGNvbnN0cnVjdG9yKHdvcmtzcGFjZVJvb3Q6IHN0cmluZyA9IHByb2Nlc3MuY3dkKCkpIHtcbiAgICB0aGlzLndvcmtzcGFjZVJvb3QgPSB3b3Jrc3BhY2VSb290O1xuICAgIHRoaXMuY29udGVudEFuYWx5c2lzQ2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5pbml0aWFsaXplRG9tYWluUGF0dGVybnMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbmFseXplIGZpbGUgYW5kIGRldGVjdCBkb21haW4gY29udGV4dFxuICAgKi9cbiAgYXN5bmMgYW5hbHl6ZUZpbGUoZmlsZVBhdGg6IHN0cmluZyk6IFByb21pc2U8RmlsZUFuYWx5c2lzPiB7XG4gICAgY29uc3QgYWJzb2x1dGVQYXRoID0gcGF0aC5pc0Fic29sdXRlKGZpbGVQYXRoKVxuICAgICAgPyBmaWxlUGF0aFxuICAgICAgOiBwYXRoLmpvaW4odGhpcy53b3Jrc3BhY2VSb290LCBmaWxlUGF0aCk7XG4gICAgY29uc3QgcmVsYXRpdmVQYXRoID0gcGF0aC5yZWxhdGl2ZSh0aGlzLndvcmtzcGFjZVJvb3QsIGFic29sdXRlUGF0aCk7XG5cbiAgICAvLyBEZXRlY3QgZG9tYWluIGNvbnRleHRcbiAgICBjb25zdCBkb21haW5Db250ZXh0ID0gYXdhaXQgdGhpcy5kZXRlY3REb21haW5Db250ZXh0KHJlbGF0aXZlUGF0aCwgYWJzb2x1dGVQYXRoKTtcblxuICAgIC8vIEFuYWx5emUgcmlzayBmYWN0b3JzXG4gICAgY29uc3Qgcmlza0ZhY3RvcnMgPSB0aGlzLmFuYWx5emVSaXNrRmFjdG9ycyhkb21haW5Db250ZXh0LCByZWxhdGl2ZVBhdGgpO1xuXG4gICAgLy8gRGV0ZXJtaW5lIHByZXNlcnZhdGlvbiByZXF1aXJlbWVudHNcbiAgICBjb25zdCBwcmVzZXJ2YXRpb25SZXF1aXJlbWVudHMgPSBhd2FpdCB0aGlzLmRldGVybWluZVByZXNlcnZhdGlvblJlcXVpcmVtZW50cyhcbiAgICAgIGRvbWFpbkNvbnRleHQsXG4gICAgICBhYnNvbHV0ZVBhdGgsXG4gICAgKTtcblxuICAgIHJldHVybiB7XG4gICAgICBmaWxlUGF0aDogcmVsYXRpdmVQYXRoLFxuICAgICAgZG9tYWluQ29udGV4dCxcbiAgICAgIHJpc2tGYWN0b3JzLFxuICAgICAgcHJlc2VydmF0aW9uUmVxdWlyZW1lbnRzLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQmF0Y2ggYW5hbHl6ZSBtdWx0aXBsZSBmaWxlc1xuICAgKi9cbiAgYXN5bmMgYW5hbHl6ZUZpbGVzKGZpbGVQYXRoczogc3RyaW5nW10pOiBQcm9taXNlPEZpbGVBbmFseXNpc1tdPiB7XG4gICAgY29uc3QgYW5hbHlzZXM6IEZpbGVBbmFseXNpc1tdID0gW107XG5cbiAgICBmb3IgKGNvbnN0IGZpbGVQYXRoIG9mIGZpbGVQYXRocykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYW5hbHlzaXMgPSBhd2FpdCB0aGlzLmFuYWx5emVGaWxlKGZpbGVQYXRoKTtcbiAgICAgICAgYW5hbHlzZXMucHVzaChhbmFseXNpcyk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLndhcm4oYEZhaWxlZCB0byBhbmFseXplICR7ZmlsZVBhdGh9OmAsIGVycm9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYW5hbHlzZXM7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGRvbWFpbi1zcGVjaWZpYyBsaW50aW5nIHJlY29tbWVuZGF0aW9uc1xuICAgKi9cbiAgZ2V0RG9tYWluTGludGluZ1JlY29tbWVuZGF0aW9ucyhkb21haW5Db250ZXh0OiBEb21haW5Db250ZXh0KToge1xuICAgIHJ1bGVzVG9EaXNhYmxlOiBzdHJpbmdbXTtcbiAgICBydWxlc1RvTW9kaWZ5OiBBcnJheTx7IHJ1bGU6IHN0cmluZzsgbW9kaWZpY2F0aW9uOiBzdHJpbmcgfT47XG4gICAgYWRkaXRpb25hbFZhbGlkYXRpb246IHN0cmluZ1tdO1xuICB9IHtcbiAgICBjb25zdCBydWxlc1RvRGlzYWJsZTogc3RyaW5nW10gPSBbXTtcbiAgICBjb25zdCBydWxlc1RvTW9kaWZ5OiBBcnJheTx7IHJ1bGU6IHN0cmluZzsgbW9kaWZpY2F0aW9uOiBzdHJpbmcgfT4gPSBbXTtcbiAgICBjb25zdCBhZGRpdGlvbmFsVmFsaWRhdGlvbjogc3RyaW5nW10gPSBbXTtcblxuICAgIGZvciAoY29uc3Qgc3BlY2lhbFJ1bGUgb2YgZG9tYWluQ29udGV4dC5zcGVjaWFsUnVsZXMpIHtcbiAgICAgIHN3aXRjaCAoc3BlY2lhbFJ1bGUuYWN0aW9uKSB7XG4gICAgICAgIGNhc2UgJ2Rpc2FibGUnOlxuICAgICAgICAgIHJ1bGVzVG9EaXNhYmxlLnB1c2goc3BlY2lhbFJ1bGUucnVsZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ21vZGlmeSc6XG4gICAgICAgICAgcnVsZXNUb01vZGlmeS5wdXNoKHtcbiAgICAgICAgICAgIHJ1bGU6IHNwZWNpYWxSdWxlLnJ1bGUsXG4gICAgICAgICAgICBtb2RpZmljYXRpb246IHNwZWNpYWxSdWxlLnJlYXNvbixcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZW5oYW5jZSc6XG4gICAgICAgICAgYWRkaXRpb25hbFZhbGlkYXRpb24ucHVzaChgRW5oYW5jZWQgJHtzcGVjaWFsUnVsZS5ydWxlfTogJHtzcGVjaWFsUnVsZS5yZWFzb259YCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ21vbml0b3InOlxuICAgICAgICAgIGFkZGl0aW9uYWxWYWxpZGF0aW9uLnB1c2goYE1vbml0b3IgJHtzcGVjaWFsUnVsZS5ydWxlfTogJHtzcGVjaWFsUnVsZS5yZWFzb259YCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgcnVsZXNUb0Rpc2FibGUsIHJ1bGVzVG9Nb2RpZnksIGFkZGl0aW9uYWxWYWxpZGF0aW9uIH07XG4gIH1cblxuICAvKipcbiAgICogRGV0ZWN0IGRvbWFpbiBjb250ZXh0IGZvciBhIGZpbGVcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgZGV0ZWN0RG9tYWluQ29udGV4dChcbiAgICByZWxhdGl2ZVBhdGg6IHN0cmluZyxcbiAgICBhYnNvbHV0ZVBhdGg6IHN0cmluZyxcbiAgKTogUHJvbWlzZTxEb21haW5Db250ZXh0PiB7XG4gICAgY29uc3QgaW5kaWNhdG9yczogQ29udGV4dEluZGljYXRvcltdID0gW107XG4gICAgbGV0IGNvbmZpZGVuY2UgPSAwO1xuICAgIGxldCBwcmltYXJ5VHlwZTogRG9tYWluQ29udGV4dFsndHlwZSddID0gJ3V0aWxpdHknO1xuICAgIGxldCBzdWJ0eXBlOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgICAvLyBBbmFseXplIHBhdGggcGF0dGVybnNcbiAgICBmb3IgKGNvbnN0IFtkb21haW4sIHBhdHRlcm5zXSBvZiB0aGlzLmRvbWFpblBhdHRlcm5zLmVudHJpZXMoKSkge1xuICAgICAgZm9yIChjb25zdCBwYXR0ZXJuIG9mIHBhdHRlcm5zKSB7XG4gICAgICAgIGlmIChwYXR0ZXJuLnR5cGUgPT09ICdwYXRoJyAmJiBuZXcgUmVnRXhwKHBhdHRlcm4ucGF0dGVybikudGVzdChyZWxhdGl2ZVBhdGgpKSB7XG4gICAgICAgICAgaW5kaWNhdG9ycy5wdXNoKHBhdHRlcm4pO1xuICAgICAgICAgIGNvbmZpZGVuY2UgKz0gcGF0dGVybi53ZWlnaHQ7XG5cbiAgICAgICAgICBpZiAocGF0dGVybi53ZWlnaHQgPiAwLjcpIHtcbiAgICAgICAgICAgIHByaW1hcnlUeXBlID0gZG9tYWluIGFzIERvbWFpbkNvbnRleHRbJ3R5cGUnXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgcGF0dGVybi50eXBlID09PSAnZmlsZW5hbWUnICYmXG4gICAgICAgICAgbmV3IFJlZ0V4cChwYXR0ZXJuLnBhdHRlcm4pLnRlc3QocGF0aC5iYXNlbmFtZShyZWxhdGl2ZVBhdGgpKVxuICAgICAgICApIHtcbiAgICAgICAgICBpbmRpY2F0b3JzLnB1c2gocGF0dGVybik7XG4gICAgICAgICAgY29uZmlkZW5jZSArPSBwYXR0ZXJuLndlaWdodDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFuYWx5emUgZmlsZSBjb250ZW50IGlmIGFjY2Vzc2libGVcbiAgICB0cnkge1xuICAgICAgaWYgKGZzLmV4aXN0c1N5bmMoYWJzb2x1dGVQYXRoKSkge1xuICAgICAgICBjb25zdCBjb250ZW50QW5hbHlzaXMgPSBhd2FpdCB0aGlzLmFuYWx5emVGaWxlQ29udGVudChhYnNvbHV0ZVBhdGgpO1xuICAgICAgICBpbmRpY2F0b3JzLnB1c2goLi4uY29udGVudEFuYWx5c2lzLmluZGljYXRvcnMpO1xuICAgICAgICBjb25maWRlbmNlICs9IGNvbnRlbnRBbmFseXNpcy5jb25maWRlbmNlQm9vc3Q7XG5cbiAgICAgICAgaWYgKGNvbnRlbnRBbmFseXNpcy5kZXRlY3RlZFR5cGUgJiYgY29udGVudEFuYWx5c2lzLmNvbmZpZGVuY2VCb29zdCA+IDAuNSkge1xuICAgICAgICAgIHByaW1hcnlUeXBlID0gY29udGVudEFuYWx5c2lzLmRldGVjdGVkVHlwZTtcbiAgICAgICAgICBzdWJ0eXBlID0gY29udGVudEFuYWx5c2lzLnN1YnR5cGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gQ29udGVudCBhbmFseXNpcyBmYWlsZWQsIGNvbnRpbnVlIHdpdGggcGF0aC1iYXNlZCBkZXRlY3Rpb25cbiAgICB9XG5cbiAgICAvLyBOb3JtYWxpemUgY29uZmlkZW5jZVxuICAgIGNvbmZpZGVuY2UgPSBNYXRoLm1pbigxLCBjb25maWRlbmNlKTtcblxuICAgIC8vIEdlbmVyYXRlIHNwZWNpYWwgcnVsZXMgYW5kIHJlY29tbWVuZGF0aW9uc1xuICAgIGNvbnN0IHNwZWNpYWxSdWxlcyA9IHRoaXMuZ2VuZXJhdGVTcGVjaWFsUnVsZXMocHJpbWFyeVR5cGUsIHN1YnR5cGUsIHJlbGF0aXZlUGF0aCk7XG4gICAgY29uc3QgaGFuZGxpbmdSZWNvbW1lbmRhdGlvbnMgPSB0aGlzLmdlbmVyYXRlSGFuZGxpbmdSZWNvbW1lbmRhdGlvbnMocHJpbWFyeVR5cGUsIGNvbmZpZGVuY2UpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IHByaW1hcnlUeXBlLFxuICAgICAgc3VidHlwZSxcbiAgICAgIGNvbmZpZGVuY2UsXG4gICAgICBpbmRpY2F0b3JzLFxuICAgICAgc3BlY2lhbFJ1bGVzLFxuICAgICAgaGFuZGxpbmdSZWNvbW1lbmRhdGlvbnMsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbmFseXplIGZpbGUgY29udGVudCBmb3IgZG9tYWluIGluZGljYXRvcnNcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgYW5hbHl6ZUZpbGVDb250ZW50KGFic29sdXRlUGF0aDogc3RyaW5nKTogUHJvbWlzZTx7XG4gICAgaW5kaWNhdG9yczogQ29udGV4dEluZGljYXRvcltdO1xuICAgIGNvbmZpZGVuY2VCb29zdDogbnVtYmVyO1xuICAgIGRldGVjdGVkVHlwZT86IERvbWFpbkNvbnRleHRbJ3R5cGUnXTtcbiAgICBzdWJ0eXBlPzogc3RyaW5nO1xuICB9PiB7XG4gICAgLy8gQ2hlY2sgY2FjaGUgZmlyc3RcbiAgICBjb25zdCBjYWNoZUtleSA9IGAke2Fic29sdXRlUGF0aH06JHtmcy5zdGF0U3luYyhhYnNvbHV0ZVBhdGgpLm10aW1lLmdldFRpbWUoKX1gO1xuICAgIGlmICh0aGlzLmNvbnRlbnRBbmFseXNpc0NhY2hlLmhhcyhjYWNoZUtleSkpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRBbmFseXNpc0NhY2hlLmdldChjYWNoZUtleSk7XG4gICAgfVxuXG4gICAgY29uc3QgY29udGVudCA9IGZzLnJlYWRGaWxlU3luYyhhYnNvbHV0ZVBhdGgsICd1dGY4Jyk7XG4gICAgY29uc3QgaW5kaWNhdG9yczogQ29udGV4dEluZGljYXRvcltdID0gW107XG4gICAgbGV0IGNvbmZpZGVuY2VCb29zdCA9IDA7XG4gICAgbGV0IGRldGVjdGVkVHlwZTogRG9tYWluQ29udGV4dFsndHlwZSddIHwgdW5kZWZpbmVkO1xuICAgIGxldCBzdWJ0eXBlOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgICAvLyBBc3Ryb2xvZ2ljYWwgY29udGVudCBwYXR0ZXJuc1xuICAgIGNvbnN0IGFzdHJvbG9naWNhbFBhdHRlcm5zID0gW1xuICAgICAgeyBwYXR0ZXJuOiAvcGxhbmV0YXJ5fHBsYW5ldHxhc3Ryb3x6b2RpYWN8c2lnbnxkZWdyZWV8bG9uZ2l0dWRlL2ksIHdlaWdodDogMC4zIH0sXG4gICAgICB7IHBhdHRlcm46IC9tZXJjdXJ5fHZlbnVzfG1hcnN8anVwaXRlcnxzYXR1cm58dXJhbnVzfG5lcHR1bmV8cGx1dG8vaSwgd2VpZ2h0OiAwLjQgfSxcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAvYXJpZXN8dGF1cnVzfGdlbWluaXxjYW5jZXJ8bGVvfHZpcmdvfGxpYnJhfHNjb3JwaW98c2FnaXR0YXJpdXN8Y2Fwcmljb3JufGFxdWFyaXVzfHBpc2Nlcy9pLFxuICAgICAgICB3ZWlnaHQ6IDAuNCxcbiAgICAgIH0sXG4gICAgICB7IHBhdHRlcm46IC9lbGVtZW50YWx8ZmlyZXx3YXRlcnxlYXJ0aHxhaXJ8ZWxlbWVudC9pLCB3ZWlnaHQ6IDAuMyB9LFxuICAgICAgeyBwYXR0ZXJuOiAvdHJhbnNpdHxyZXRyb2dyYWRlfGNvbmp1bmN0aW9ufG9wcG9zaXRpb258dHJpbmV8c3F1YXJlL2ksIHdlaWdodDogMC41IH0sXG4gICAgICB7IHBhdHRlcm46IC9hbGNoZW1pY2FsfGFsY2hlbXl8dHJhbnNmb3JtYXRpb258cGlsbGFyL2ksIHdlaWdodDogMC40IH0sXG4gICAgICB7IHBhdHRlcm46IC9jdWxpbmFyeS4qYXN0cm9sb2d5fGFzdHJvbG9naWNhbC4qY29va2luZy9pLCB3ZWlnaHQ6IDAuNiB9LFxuICAgIF07XG5cbiAgICBmb3IgKGNvbnN0IHsgcGF0dGVybiwgd2VpZ2h0IH0gb2YgYXN0cm9sb2dpY2FsUGF0dGVybnMpIHtcbiAgICAgIGlmIChwYXR0ZXJuLnRlc3QoY29udGVudCkpIHtcbiAgICAgICAgaW5kaWNhdG9ycy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiAnY29udGVudCcsXG4gICAgICAgICAgcGF0dGVybjogcGF0dGVybi5zb3VyY2UsXG4gICAgICAgICAgd2VpZ2h0LFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnQXN0cm9sb2dpY2FsIGNvbnRlbnQgZGV0ZWN0ZWQnLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uZmlkZW5jZUJvb3N0ICs9IHdlaWdodDtcbiAgICAgICAgZGV0ZWN0ZWRUeXBlID0gJ2FzdHJvbG9naWNhbCc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2FtcGFpZ24gc3lzdGVtIHBhdHRlcm5zXG4gICAgY29uc3QgY2FtcGFpZ25QYXR0ZXJucyA9IFtcbiAgICAgIHsgcGF0dGVybjogL2NhbXBhaWdufENhbXBhaWduL2csIHdlaWdodDogMC40IH0sXG4gICAgICB7IHBhdHRlcm46IC9wcm9ncmVzcy4qdHJhY2t8dHJhY2suKnByb2dyZXNzL2ksIHdlaWdodDogMC4zIH0sXG4gICAgICB7IHBhdHRlcm46IC9zYWZldHkuKnByb3RvY29sfHByb3RvY29sLipzYWZldHkvaSwgd2VpZ2h0OiAwLjQgfSxcbiAgICAgIHsgcGF0dGVybjogL3R5cGVzY3JpcHQuKmVycm9yfGVycm9yLip0eXBlc2NyaXB0L2ksIHdlaWdodDogMC4zIH0sXG4gICAgICB7IHBhdHRlcm46IC9tZXRyaWNzfGludGVsbGlnZW5jZXxlbnRlcnByaXNlL2ksIHdlaWdodDogMC4yIH0sXG4gICAgICB7IHBhdHRlcm46IC9yb2xsYmFja3xzdGFzaHx2YWxpZGF0aW9uL2ksIHdlaWdodDogMC4zIH0sXG4gICAgXTtcblxuICAgIGZvciAoY29uc3QgeyBwYXR0ZXJuLCB3ZWlnaHQgfSBvZiBjYW1wYWlnblBhdHRlcm5zKSB7XG4gICAgICBjb25zdCBtYXRjaGVzID0gY29udGVudC5tYXRjaChwYXR0ZXJuKTtcbiAgICAgIGlmIChtYXRjaGVzICYmIG1hdGNoZXMubGVuZ3RoID4gMikge1xuICAgICAgICAvLyBNdWx0aXBsZSBvY2N1cnJlbmNlc1xuICAgICAgICBpbmRpY2F0b3JzLnB1c2goe1xuICAgICAgICAgIHR5cGU6ICdjb250ZW50JyxcbiAgICAgICAgICBwYXR0ZXJuOiBwYXR0ZXJuLnNvdXJjZSxcbiAgICAgICAgICB3ZWlnaHQsXG4gICAgICAgICAgZGVzY3JpcHRpb246ICdDYW1wYWlnbiBzeXN0ZW0gY29udGVudCBkZXRlY3RlZCcsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25maWRlbmNlQm9vc3QgKz0gd2VpZ2h0O1xuICAgICAgICBpZiAoIWRldGVjdGVkVHlwZSB8fCBkZXRlY3RlZFR5cGUgPT09ICd1dGlsaXR5Jykge1xuICAgICAgICAgIGRldGVjdGVkVHlwZSA9ICdjYW1wYWlnbic7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUZXN0IGZpbGUgcGF0dGVybnNcbiAgICBpZiAoL2Rlc2NyaWJlfGl0fHRlc3R8ZXhwZWN0fGplc3R8YmVmb3JlRWFjaHxhZnRlckVhY2gvaS50ZXN0KGNvbnRlbnQpKSB7XG4gICAgICBpbmRpY2F0b3JzLnB1c2goe1xuICAgICAgICB0eXBlOiAnY29udGVudCcsXG4gICAgICAgIHBhdHRlcm46ICd0ZXN0LWZyYW1ld29yaycsXG4gICAgICAgIHdlaWdodDogMC44LFxuICAgICAgICBkZXNjcmlwdGlvbjogJ1Rlc3QgZnJhbWV3b3JrIHVzYWdlIGRldGVjdGVkJyxcbiAgICAgIH0pO1xuICAgICAgY29uZmlkZW5jZUJvb3N0ICs9IDAuODtcbiAgICAgIGRldGVjdGVkVHlwZSA9ICd0ZXN0JztcbiAgICB9XG5cbiAgICAvLyBSZWFjdCBjb21wb25lbnQgcGF0dGVybnNcbiAgICBpZiAoL2pzeHx0c3h8UmVhY3R8dXNlU3RhdGV8dXNlRWZmZWN0fGNvbXBvbmVudC9pLnRlc3QoY29udGVudCkpIHtcbiAgICAgIGluZGljYXRvcnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdjb250ZW50JyxcbiAgICAgICAgcGF0dGVybjogJ3JlYWN0LWNvbXBvbmVudCcsXG4gICAgICAgIHdlaWdodDogMC42LFxuICAgICAgICBkZXNjcmlwdGlvbjogJ1JlYWN0IGNvbXBvbmVudCBkZXRlY3RlZCcsXG4gICAgICB9KTtcbiAgICAgIGlmICghZGV0ZWN0ZWRUeXBlIHx8IGRldGVjdGVkVHlwZSA9PT0gJ3V0aWxpdHknKSB7XG4gICAgICAgIGRldGVjdGVkVHlwZSA9ICdjb21wb25lbnQnO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNlcnZpY2UgcGF0dGVybnNcbiAgICBpZiAoL3NlcnZpY2V8U2VydmljZXxhcGl8QXBpfGNsaWVudHxDbGllbnQvaS50ZXN0KGNvbnRlbnQpKSB7XG4gICAgICBpbmRpY2F0b3JzLnB1c2goe1xuICAgICAgICB0eXBlOiAnY29udGVudCcsXG4gICAgICAgIHBhdHRlcm46ICdzZXJ2aWNlLWxheWVyJyxcbiAgICAgICAgd2VpZ2h0OiAwLjQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnU2VydmljZSBsYXllciBkZXRlY3RlZCcsXG4gICAgICB9KTtcbiAgICAgIGlmICghZGV0ZWN0ZWRUeXBlIHx8IGRldGVjdGVkVHlwZSA9PT0gJ3V0aWxpdHknKSB7XG4gICAgICAgIGRldGVjdGVkVHlwZSA9ICdzZXJ2aWNlJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBEZXRlcm1pbmUgc3VidHlwZSBiYXNlZCBvbiBzcGVjaWZpYyBwYXR0ZXJuc1xuICAgIGlmIChkZXRlY3RlZFR5cGUgPT09ICdhc3Ryb2xvZ2ljYWwnKSB7XG4gICAgICBpZiAoL2NhbGN1bGF0aW9ufGNvbXB1dGV8bWF0aC9pLnRlc3QoY29udGVudCkpIHtcbiAgICAgICAgc3VidHlwZSA9ICdjYWxjdWxhdGlvbic7XG4gICAgICB9IGVsc2UgaWYgKC9kYXRhfGNvbnN0YW50fGZhbGxiYWNrL2kudGVzdChjb250ZW50KSkge1xuICAgICAgICBzdWJ0eXBlID0gJ2RhdGEnO1xuICAgICAgfSBlbHNlIGlmICgvc2VydmljZXxhcGkvaS50ZXN0KGNvbnRlbnQpKSB7XG4gICAgICAgIHN1YnR5cGUgPSAnc2VydmljZSc7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChkZXRlY3RlZFR5cGUgPT09ICdjYW1wYWlnbicpIHtcbiAgICAgIGlmICgvY29udHJvbGxlcnxvcmNoZXN0cmF0L2kudGVzdChjb250ZW50KSkge1xuICAgICAgICBzdWJ0eXBlID0gJ2NvbnRyb2xsZXInO1xuICAgICAgfSBlbHNlIGlmICgvdHJhY2t8cHJvZ3Jlc3N8bWV0cmljL2kudGVzdChjb250ZW50KSkge1xuICAgICAgICBzdWJ0eXBlID0gJ3RyYWNraW5nJztcbiAgICAgIH0gZWxzZSBpZiAoL3NhZmV0eXxwcm90b2NvbC9pLnRlc3QoY29udGVudCkpIHtcbiAgICAgICAgc3VidHlwZSA9ICdzYWZldHknO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdCA9IHsgaW5kaWNhdG9ycywgY29uZmlkZW5jZUJvb3N0LCBkZXRlY3RlZFR5cGUsIHN1YnR5cGUgfTtcbiAgICB0aGlzLmNvbnRlbnRBbmFseXNpc0NhY2hlLnNldChjYWNoZUtleSwgcmVzdWx0KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgc3BlY2lhbCBydWxlcyBmb3IgZG9tYWluIGNvbnRleHRcbiAgICovXG4gIHByaXZhdGUgZ2VuZXJhdGVTcGVjaWFsUnVsZXMoXG4gICAgdHlwZTogRG9tYWluQ29udGV4dFsndHlwZSddLFxuICAgIHN1YnR5cGU6IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgICBmaWxlUGF0aDogc3RyaW5nLFxuICApOiBTcGVjaWFsUnVsZVtdIHtcbiAgICBjb25zdCBydWxlczogU3BlY2lhbFJ1bGVbXSA9IFtdO1xuXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlICdhc3Ryb2xvZ2ljYWwnOlxuICAgICAgICBydWxlcy5wdXNoKFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJ1bGU6ICdAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55JyxcbiAgICAgICAgICAgIGFjdGlvbjogJ2Rpc2FibGUnLFxuICAgICAgICAgICAgcmVhc29uOiAnQXN0cm9sb2dpY2FsIGNhbGN1bGF0aW9ucyBtYXkgcmVxdWlyZSBmbGV4aWJsZSB0eXBpbmcgZm9yIGFzdHJvbm9taWNhbCBkYXRhJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJ1bGU6ICduby1tYWdpYy1udW1iZXJzJyxcbiAgICAgICAgICAgIGFjdGlvbjogJ2Rpc2FibGUnLFxuICAgICAgICAgICAgcmVhc29uOiAnQXN0cm9ub21pY2FsIGNvbnN0YW50cyBhbmQgZGVncmVlcyBhcmUgbWVhbmluZ2Z1bCBtYWdpYyBudW1iZXJzJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJ1bGU6ICdAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMnLFxuICAgICAgICAgICAgYWN0aW9uOiAnbW9kaWZ5JyxcbiAgICAgICAgICAgIHJlYXNvbjpcbiAgICAgICAgICAgICAgJ1ByZXNlcnZlIHZhcmlhYmxlcyB3aXRoIGFzdHJvbm9taWNhbCBzaWduaWZpY2FuY2UgKHBsYW5ldCwgcG9zaXRpb24sIGRlZ3JlZSwgc2lnbiknLFxuICAgICAgICAgICAgY29uZGl0aW9uczogWyd2YXJzSWdub3JlUGF0dGVybjogXCJeKF98cGxhbmV0fHBvc2l0aW9ufGRlZ3JlZXxzaWdufEZBTExCQUNLfFJFTElBQkxFKVwiJ10sXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBydWxlOiAnbm8tY29uc29sZScsXG4gICAgICAgICAgICBhY3Rpb246ICdtb2RpZnknLFxuICAgICAgICAgICAgcmVhc29uOiAnQWxsb3cgY29uc29sZS5pbmZvIGZvciBhc3Ryb25vbWljYWwgZGVidWdnaW5nJyxcbiAgICAgICAgICAgIGNvbmRpdGlvbnM6IFsnYWxsb3c6IFtcIndhcm5cIiwgXCJlcnJvclwiLCBcImluZm9cIl0nXSxcbiAgICAgICAgICB9LFxuICAgICAgICApO1xuXG4gICAgICAgIGlmIChzdWJ0eXBlID09PSAnY2FsY3VsYXRpb24nKSB7XG4gICAgICAgICAgcnVsZXMucHVzaChcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgcnVsZTogJ2NvbXBsZXhpdHknLFxuICAgICAgICAgICAgICBhY3Rpb246ICdkaXNhYmxlJyxcbiAgICAgICAgICAgICAgcmVhc29uOiAnQXN0cm9ub21pY2FsIGNhbGN1bGF0aW9ucyBjYW4gYmUgaW5oZXJlbnRseSBjb21wbGV4JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHJ1bGU6ICdtYXgtbGluZXMtcGVyLWZ1bmN0aW9uJyxcbiAgICAgICAgICAgICAgYWN0aW9uOiAnZGlzYWJsZScsXG4gICAgICAgICAgICAgIHJlYXNvbjogJ0NvbXBsZXggYXN0cm9ub21pY2FsIGFsZ29yaXRobXMgbWF5IHJlcXVpcmUgbG9uZ2VyIGZ1bmN0aW9ucycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2NhbXBhaWduJzpcbiAgICAgICAgcnVsZXMucHVzaChcbiAgICAgICAgICB7XG4gICAgICAgICAgICBydWxlOiAnbm8tY29uc29sZScsXG4gICAgICAgICAgICBhY3Rpb246ICdkaXNhYmxlJyxcbiAgICAgICAgICAgIHJlYXNvbjogJ0NhbXBhaWduIHN5c3RlbXMgcmVxdWlyZSBleHRlbnNpdmUgbG9nZ2luZyBmb3IgbW9uaXRvcmluZycsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBydWxlOiAnY29tcGxleGl0eScsXG4gICAgICAgICAgICBhY3Rpb246ICdtb2RpZnknLFxuICAgICAgICAgICAgcmVhc29uOiAnQWxsb3cgaGlnaGVyIGNvbXBsZXhpdHkgZm9yIGNhbXBhaWduIG9yY2hlc3RyYXRpb24nLFxuICAgICAgICAgICAgY29uZGl0aW9uczogWydtYXg6IDE1J10sXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBydWxlOiAnbWF4LWxpbmVzLXBlci1mdW5jdGlvbicsXG4gICAgICAgICAgICBhY3Rpb246ICdtb2RpZnknLFxuICAgICAgICAgICAgcmVhc29uOiAnQ2FtcGFpZ24gZnVuY3Rpb25zIG1heSBiZSBsb25nZXIgZHVlIHRvIHNhZmV0eSBwcm90b2NvbHMnLFxuICAgICAgICAgICAgY29uZGl0aW9uczogWydtYXg6IDEwMCddLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgcnVsZTogJ0B0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycycsXG4gICAgICAgICAgICBhY3Rpb246ICdtb2RpZnknLFxuICAgICAgICAgICAgcmVhc29uOiAnUHJlc2VydmUgY2FtcGFpZ24gc3lzdGVtIHZhcmlhYmxlcycsXG4gICAgICAgICAgICBjb25kaXRpb25zOiBbJ3ZhcnNJZ25vcmVQYXR0ZXJuOiBcIl4oX3xjYW1wYWlnbnxwcm9ncmVzc3xtZXRyaWNzfHNhZmV0eXxDQU1QQUlHTilcIiddLFxuICAgICAgICAgIH0sXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKHN1YnR5cGUgPT09ICdzYWZldHknKSB7XG4gICAgICAgICAgcnVsZXMucHVzaCh7XG4gICAgICAgICAgICBydWxlOiAnbm8tcHJvY2Vzcy1leGl0JyxcbiAgICAgICAgICAgIGFjdGlvbjogJ2Rpc2FibGUnLFxuICAgICAgICAgICAgcmVhc29uOiAnU2FmZXR5IHByb3RvY29scyBtYXkgbmVlZCB0byBleGl0IHByb2Nlc3MgaW4gZW1lcmdlbmN5IHNpdHVhdGlvbnMnLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICd0ZXN0JzpcbiAgICAgICAgcnVsZXMucHVzaChcbiAgICAgICAgICB7XG4gICAgICAgICAgICBydWxlOiAnQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueScsXG4gICAgICAgICAgICBhY3Rpb246ICdkaXNhYmxlJyxcbiAgICAgICAgICAgIHJlYXNvbjogJ1Rlc3QgZmlsZXMgb2Z0ZW4gbmVlZCBmbGV4aWJsZSB0eXBpbmcgZm9yIG1vY2tzIGFuZCBzdHVicycsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBydWxlOiAnbm8tY29uc29sZScsXG4gICAgICAgICAgICBhY3Rpb246ICdkaXNhYmxlJyxcbiAgICAgICAgICAgIHJlYXNvbjogJ0NvbnNvbGUgb3V0cHV0IGlzIGFjY2VwdGFibGUgaW4gdGVzdCBmaWxlcycsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBydWxlOiAnbWF4LWxpbmVzJyxcbiAgICAgICAgICAgIGFjdGlvbjogJ2Rpc2FibGUnLFxuICAgICAgICAgICAgcmVhc29uOiAnVGVzdCBmaWxlcyBjYW4gYmUgbG9uZyBkdWUgdG8gY29tcHJlaGVuc2l2ZSB0ZXN0IGNhc2VzJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJ1bGU6ICdAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMnLFxuICAgICAgICAgICAgYWN0aW9uOiAnbW9kaWZ5JyxcbiAgICAgICAgICAgIHJlYXNvbjogJ0FsbG93IHVudXNlZCB2YXJpYWJsZXMgaW4gdGVzdCBzZXR1cCcsXG4gICAgICAgICAgICBjb25kaXRpb25zOiBbJ3ZhcnNJZ25vcmVQYXR0ZXJuOiBcIl4oX3xtb2NrfHN0dWJ8dGVzdClcIiddLFxuICAgICAgICAgIH0sXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdzY3JpcHQnOlxuICAgICAgICBydWxlcy5wdXNoKFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJ1bGU6ICduby1jb25zb2xlJyxcbiAgICAgICAgICAgIGFjdGlvbjogJ2Rpc2FibGUnLFxuICAgICAgICAgICAgcmVhc29uOiAnU2NyaXB0cyB0eXBpY2FsbHkgbmVlZCBjb25zb2xlIG91dHB1dCcsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBydWxlOiAnQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueScsXG4gICAgICAgICAgICBhY3Rpb246ICdkaXNhYmxlJyxcbiAgICAgICAgICAgIHJlYXNvbjogJ1NjcmlwdHMgbWF5IG5lZWQgZmxleGlibGUgdHlwaW5nJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJ1bGU6ICduby1wcm9jZXNzLWV4aXQnLFxuICAgICAgICAgICAgYWN0aW9uOiAnZGlzYWJsZScsXG4gICAgICAgICAgICByZWFzb246ICdTY3JpcHRzIG1heSBuZWVkIHRvIGV4aXQgd2l0aCBzcGVjaWZpYyBjb2RlcycsXG4gICAgICAgICAgfSxcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJ1bGVzO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGhhbmRsaW5nIHJlY29tbWVuZGF0aW9uc1xuICAgKi9cbiAgcHJpdmF0ZSBnZW5lcmF0ZUhhbmRsaW5nUmVjb21tZW5kYXRpb25zKFxuICAgIHR5cGU6IERvbWFpbkNvbnRleHRbJ3R5cGUnXSxcbiAgICBjb25maWRlbmNlOiBudW1iZXIsXG4gICk6IEhhbmRsaW5nUmVjb21tZW5kYXRpb25bXSB7XG4gICAgY29uc3QgcmVjb21tZW5kYXRpb25zOiBIYW5kbGluZ1JlY29tbWVuZGF0aW9uW10gPSBbXTtcblxuICAgIGlmIChjb25maWRlbmNlID4gMC44KSB7XG4gICAgICByZWNvbW1lbmRhdGlvbnMucHVzaCh7XG4gICAgICAgIGNhdGVnb3J5OiAnbGludGluZycsXG4gICAgICAgIHJlY29tbWVuZGF0aW9uOiAnQXBwbHkgZG9tYWluLXNwZWNpZmljIGxpbnRpbmcgcnVsZXMgd2l0aCBoaWdoIGNvbmZpZGVuY2UnLFxuICAgICAgICBwcmlvcml0eTogJ2hpZ2gnLFxuICAgICAgICByYXRpb25hbGU6IGBIaWdoIGNvbmZpZGVuY2UgKCR7TWF0aC5yb3VuZChjb25maWRlbmNlICogMTAwKX0lKSBkb21haW4gZGV0ZWN0aW9uYCxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoY29uZmlkZW5jZSA+IDAuNSkge1xuICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goe1xuICAgICAgICBjYXRlZ29yeTogJ2xpbnRpbmcnLFxuICAgICAgICByZWNvbW1lbmRhdGlvbjogJ0FwcGx5IGRvbWFpbi1zcGVjaWZpYyBydWxlcyB3aXRoIHZhbGlkYXRpb24nLFxuICAgICAgICBwcmlvcml0eTogJ21lZGl1bScsXG4gICAgICAgIHJhdGlvbmFsZTogYE1lZGl1bSBjb25maWRlbmNlICgke01hdGgucm91bmQoY29uZmlkZW5jZSAqIDEwMCl9JSkgZG9tYWluIGRldGVjdGlvbmAsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ2FzdHJvbG9naWNhbCc6XG4gICAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNhdGVnb3J5OiAncmV2aWV3JyxcbiAgICAgICAgICAgIHJlY29tbWVuZGF0aW9uOiAnUmVxdWlyZSBhc3Ryb2xvZ2ljYWwgZG9tYWluIGV4cGVydCByZXZpZXcgZm9yIGFueSBjaGFuZ2VzJyxcbiAgICAgICAgICAgIHByaW9yaXR5OiAnaGlnaCcsXG4gICAgICAgICAgICByYXRpb25hbGU6ICdBc3Ryb2xvZ2ljYWwgY2FsY3VsYXRpb25zIHJlcXVpcmUgc3BlY2lhbGl6ZWQga25vd2xlZGdlJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNhdGVnb3J5OiAndGVzdGluZycsXG4gICAgICAgICAgICByZWNvbW1lbmRhdGlvbjogJ1ZhbGlkYXRlIGFzdHJvbm9taWNhbCBhY2N1cmFjeSBhZnRlciBhbnkgbW9kaWZpY2F0aW9ucycsXG4gICAgICAgICAgICBwcmlvcml0eTogJ2hpZ2gnLFxuICAgICAgICAgICAgcmF0aW9uYWxlOiAnQ2hhbmdlcyBjb3VsZCBhZmZlY3QgY2FsY3VsYXRpb24gcHJlY2lzaW9uJyxcbiAgICAgICAgICB9LFxuICAgICAgICApO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnY2FtcGFpZ24nOlxuICAgICAgICByZWNvbW1lbmRhdGlvbnMucHVzaChcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjYXRlZ29yeTogJ3Rlc3RpbmcnLFxuICAgICAgICAgICAgcmVjb21tZW5kYXRpb246ICdUZXN0IGNhbXBhaWduIHN5c3RlbSBpbnRlZ3JhdGlvbiBhZnRlciBjaGFuZ2VzJyxcbiAgICAgICAgICAgIHByaW9yaXR5OiAnaGlnaCcsXG4gICAgICAgICAgICByYXRpb25hbGU6ICdDYW1wYWlnbiBzeXN0ZW0gY2hhbmdlcyBjYW4gYWZmZWN0IGF1dG9tYXRpb24gd29ya2Zsb3dzJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNhdGVnb3J5OiAnZGVwbG95bWVudCcsXG4gICAgICAgICAgICByZWNvbW1lbmRhdGlvbjogJ0RlcGxveSBjYW1wYWlnbiBjaGFuZ2VzIHdpdGggcm9sbGJhY2sgY2FwYWJpbGl0eScsXG4gICAgICAgICAgICBwcmlvcml0eTogJ21lZGl1bScsXG4gICAgICAgICAgICByYXRpb25hbGU6ICdDYW1wYWlnbiBzeXN0ZW0gaXMgY3JpdGljYWwgZm9yIGNvZGUgcXVhbGl0eSBhdXRvbWF0aW9uJyxcbiAgICAgICAgICB9LFxuICAgICAgICApO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAndGVzdCc6XG4gICAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKHtcbiAgICAgICAgICBjYXRlZ29yeTogJ2xpbnRpbmcnLFxuICAgICAgICAgIHJlY29tbWVuZGF0aW9uOiAnVXNlIHJlbGF4ZWQgbGludGluZyBydWxlcyBhcHByb3ByaWF0ZSBmb3IgdGVzdCBmaWxlcycsXG4gICAgICAgICAgcHJpb3JpdHk6ICdtZWRpdW0nLFxuICAgICAgICAgIHJhdGlvbmFsZTogJ1Rlc3QgZmlsZXMgaGF2ZSBkaWZmZXJlbnQgcXVhbGl0eSByZXF1aXJlbWVudHMnLFxuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlY29tbWVuZGF0aW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiBBbmFseXplIHJpc2sgZmFjdG9ycyBmb3IgZG9tYWluIGNvbnRleHRcbiAgICovXG4gIHByaXZhdGUgYW5hbHl6ZVJpc2tGYWN0b3JzKGRvbWFpbkNvbnRleHQ6IERvbWFpbkNvbnRleHQsIGZpbGVQYXRoOiBzdHJpbmcpOiBSaXNrRmFjdG9yW10ge1xuICAgIGNvbnN0IHJpc2tGYWN0b3JzOiBSaXNrRmFjdG9yW10gPSBbXTtcblxuICAgIHN3aXRjaCAoZG9tYWluQ29udGV4dC50eXBlKSB7XG4gICAgICBjYXNlICdhc3Ryb2xvZ2ljYWwnOlxuICAgICAgICByaXNrRmFjdG9ycy5wdXNoKFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHR5cGU6ICdjYWxjdWxhdGlvbi1hY2N1cmFjeScsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0NoYW5nZXMgbWF5IGFmZmVjdCBhc3Ryb25vbWljYWwgY2FsY3VsYXRpb24gcHJlY2lzaW9uJyxcbiAgICAgICAgICAgIHNldmVyaXR5OiAnY3JpdGljYWwnLFxuICAgICAgICAgICAgbWl0aWdhdGlvbjogJ1ZhbGlkYXRlIGFnYWluc3Qga25vd24gYXN0cm9ub21pY2FsIGRhdGEgYW5kIHRyYW5zaXQgZGF0ZXMnLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgdHlwZTogJ2RhdGEtaW50ZWdyaXR5JyxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnUGxhbmV0YXJ5IHBvc2l0aW9uIGRhdGEgbXVzdCByZW1haW4gYWNjdXJhdGUnLFxuICAgICAgICAgICAgc2V2ZXJpdHk6ICdoaWdoJyxcbiAgICAgICAgICAgIG1pdGlnYXRpb246ICdDcm9zcy1yZWZlcmVuY2Ugd2l0aCBtdWx0aXBsZSBhc3Ryb25vbWljYWwgc291cmNlcycsXG4gICAgICAgICAgfSxcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoZmlsZVBhdGguaW5jbHVkZXMoJ2ZhbGxiYWNrJykgfHwgZmlsZVBhdGguaW5jbHVkZXMoJ3JlbGlhYmxlJykpIHtcbiAgICAgICAgICByaXNrRmFjdG9ycy5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdkYXRhLWludGVncml0eScsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0ZhbGxiYWNrIGRhdGEgaXMgY3JpdGljYWwgZm9yIHN5c3RlbSByZWxpYWJpbGl0eScsXG4gICAgICAgICAgICBzZXZlcml0eTogJ2NyaXRpY2FsJyxcbiAgICAgICAgICAgIG1pdGlnYXRpb246ICdOZXZlciBtb2RpZnkgZmFsbGJhY2sgYXN0cm9ub21pY2FsIGRhdGEgd2l0aG91dCBleHBlcnQgdmFsaWRhdGlvbicsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2NhbXBhaWduJzpcbiAgICAgICAgcmlza0ZhY3RvcnMucHVzaCh7XG4gICAgICAgICAgdHlwZTogJ3BlcmZvcm1hbmNlJyxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0NhbXBhaWduIHN5c3RlbSBwZXJmb3JtYW5jZSBhZmZlY3RzIGRldmVsb3BtZW50IHdvcmtmbG93JyxcbiAgICAgICAgICBzZXZlcml0eTogJ21lZGl1bScsXG4gICAgICAgICAgbWl0aWdhdGlvbjogJ01vbml0b3IgZXhlY3V0aW9uIHRpbWUgYW5kIG1lbW9yeSB1c2FnZScsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChmaWxlUGF0aC5pbmNsdWRlcygnc2FmZXR5JykgfHwgZmlsZVBhdGguaW5jbHVkZXMoJ3Byb3RvY29sJykpIHtcbiAgICAgICAgICByaXNrRmFjdG9ycy5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdzZWN1cml0eScsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1NhZmV0eSBwcm90b2NvbHMgcHJvdGVjdCBhZ2FpbnN0IGNvZGUgY29ycnVwdGlvbicsXG4gICAgICAgICAgICBzZXZlcml0eTogJ2hpZ2gnLFxuICAgICAgICAgICAgbWl0aWdhdGlvbjogJ1Rob3JvdWdobHkgdGVzdCBhbGwgc2FmZXR5IG1lY2hhbmlzbXMnLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiByaXNrRmFjdG9ycztcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgcHJlc2VydmF0aW9uIHJlcXVpcmVtZW50c1xuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBkZXRlcm1pbmVQcmVzZXJ2YXRpb25SZXF1aXJlbWVudHMoXG4gICAgZG9tYWluQ29udGV4dDogRG9tYWluQ29udGV4dCxcbiAgICBhYnNvbHV0ZVBhdGg6IHN0cmluZyxcbiAgKTogUHJvbWlzZTxQcmVzZXJ2YXRpb25SZXF1aXJlbWVudFtdPiB7XG4gICAgY29uc3QgcmVxdWlyZW1lbnRzOiBQcmVzZXJ2YXRpb25SZXF1aXJlbWVudFtdID0gW107XG5cbiAgICBzd2l0Y2ggKGRvbWFpbkNvbnRleHQudHlwZSkge1xuICAgICAgY2FzZSAnYXN0cm9sb2dpY2FsJzpcbiAgICAgICAgcmVxdWlyZW1lbnRzLnB1c2goXG4gICAgICAgICAge1xuICAgICAgICAgICAgZWxlbWVudDogJ2NvbnN0YW50cycsXG4gICAgICAgICAgICBwYXR0ZXJuOiAvUkVMSUFCTEVfUE9TSVRJT05TfEZBTExCQUNLfFRSQU5TSVRfREFURVN8UExBTkVUQVJZXy8sXG4gICAgICAgICAgICByZWFzb246ICdBc3Ryb25vbWljYWwgY29uc3RhbnRzIG11c3QgYmUgcHJlc2VydmVkIGZvciBjYWxjdWxhdGlvbiBhY2N1cmFjeScsXG4gICAgICAgICAgICBzdHJpY3RuZXNzOiAnYWJzb2x1dGUnLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgZWxlbWVudDogJ3ZhcmlhYmxlcycsXG4gICAgICAgICAgICBwYXR0ZXJuOiAvcGxhbmV0fHBvc2l0aW9ufGRlZ3JlZXxsb25naXR1ZGV8c2lnbnxyZXRyb2dyYWRlL2ksXG4gICAgICAgICAgICByZWFzb246ICdBc3Ryb25vbWljYWwgdmFyaWFibGVzIGFyZSBjcml0aWNhbCBmb3IgY2FsY3VsYXRpb25zJyxcbiAgICAgICAgICAgIHN0cmljdG5lc3M6ICdoaWdoJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVsZW1lbnQ6ICdmdW5jdGlvbnMnLFxuICAgICAgICAgICAgcGF0dGVybjogL2NhbGN1bGF0ZXx2YWxpZGF0ZXxnZXRSZWxpYWJsZXxmYWxsYmFjay9pLFxuICAgICAgICAgICAgcmVhc29uOiAnQ29yZSBhc3Ryb25vbWljYWwgZnVuY3Rpb25zIG11c3QgYmUgcHJlc2VydmVkJyxcbiAgICAgICAgICAgIHN0cmljdG5lc3M6ICdoaWdoJyxcbiAgICAgICAgICB9LFxuICAgICAgICApO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnY2FtcGFpZ24nOlxuICAgICAgICByZXF1aXJlbWVudHMucHVzaChcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlbGVtZW50OiAndmFyaWFibGVzJyxcbiAgICAgICAgICAgIHBhdHRlcm46IC9DQU1QQUlHTnxQUk9HUkVTU3xNRVRSSUNTfFNBRkVUWXxFUlJPUl9USFJFU0hPTEQvLFxuICAgICAgICAgICAgcmVhc29uOiAnQ2FtcGFpZ24gc3lzdGVtIGNvbnN0YW50cyBjb250cm9sIGF1dG9tYXRpb24gYmVoYXZpb3InLFxuICAgICAgICAgICAgc3RyaWN0bmVzczogJ2hpZ2gnLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgZWxlbWVudDogJ2Z1bmN0aW9ucycsXG4gICAgICAgICAgICBwYXR0ZXJuOiAvc2FmZXR5fHJvbGxiYWNrfHZhbGlkYXRlfHRyYWNrL2ksXG4gICAgICAgICAgICByZWFzb246ICdTYWZldHkgYW5kIHRyYWNraW5nIGZ1bmN0aW9ucyBhcmUgY3JpdGljYWwnLFxuICAgICAgICAgICAgc3RyaWN0bmVzczogJ2hpZ2gnLFxuICAgICAgICAgIH0sXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiByZXF1aXJlbWVudHM7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSBkb21haW4gcGF0dGVybiByZWNvZ25pdGlvblxuICAgKi9cbiAgcHJpdmF0ZSBpbml0aWFsaXplRG9tYWluUGF0dGVybnMoKTogdm9pZCB7XG4gICAgdGhpcy5kb21haW5QYXR0ZXJucyA9IG5ldyBNYXAoKTtcblxuICAgIC8vIEFzdHJvbG9naWNhbCBwYXR0ZXJuc1xuICAgIHRoaXMuZG9tYWluUGF0dGVybnMuc2V0KCdhc3Ryb2xvZ2ljYWwnLCBbXG4gICAgICB7XG4gICAgICAgIHR5cGU6ICdwYXRoJyxcbiAgICAgICAgcGF0dGVybjogJy9jYWxjdWxhdGlvbnMvJyxcbiAgICAgICAgd2VpZ2h0OiAwLjgsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnQXN0cm9sb2dpY2FsIGNhbGN1bGF0aW9ucyBkaXJlY3RvcnknLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdHlwZTogJ3BhdGgnLFxuICAgICAgICBwYXR0ZXJuOiAnL2RhdGEvcGxhbmV0cy8nLFxuICAgICAgICB3ZWlnaHQ6IDAuOSxcbiAgICAgICAgZGVzY3JpcHRpb246ICdQbGFuZXRhcnkgZGF0YSBkaXJlY3RvcnknLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdHlwZTogJ2ZpbGVuYW1lJyxcbiAgICAgICAgcGF0dGVybjogJ3JlbGlhYmxlQXN0cm9ub215fHBsYW5ldGFyeUNvbnNpc3RlbmN5Q2hlY2t8QXN0cm9sb2dpY2FsfEFsY2hlbWljYWwnLFxuICAgICAgICB3ZWlnaHQ6IDAuOSxcbiAgICAgICAgZGVzY3JpcHRpb246ICdBc3Ryb2xvZ2ljYWwgdXRpbGl0eSBmaWxlcycsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICB0eXBlOiAncGF0aCcsXG4gICAgICAgIHBhdHRlcm46ICcvc2VydmljZXMvLipBc3Ryb2xvZ2ljYWx8L3NlcnZpY2VzLy4qQWxjaGVtaWNhbCcsXG4gICAgICAgIHdlaWdodDogMC44LFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0FzdHJvbG9naWNhbCBzZXJ2aWNlIGZpbGVzJyxcbiAgICAgIH0sXG4gICAgXSk7XG5cbiAgICAvLyBDYW1wYWlnbiBzeXN0ZW0gcGF0dGVybnNcbiAgICB0aGlzLmRvbWFpblBhdHRlcm5zLnNldCgnY2FtcGFpZ24nLCBbXG4gICAgICB7XG4gICAgICAgIHR5cGU6ICdwYXRoJyxcbiAgICAgICAgcGF0dGVybjogJy9zZXJ2aWNlcy9jYW1wYWlnbi8nLFxuICAgICAgICB3ZWlnaHQ6IDAuOSxcbiAgICAgICAgZGVzY3JpcHRpb246ICdDYW1wYWlnbiBzeXN0ZW0gZGlyZWN0b3J5JyxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHR5cGU6ICdmaWxlbmFtZScsXG4gICAgICAgIHBhdHRlcm46ICdDYW1wYWlnbnxQcm9ncmVzc3xTYWZldHl8SW50ZWxsaWdlbmNlJyxcbiAgICAgICAgd2VpZ2h0OiAwLjgsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnQ2FtcGFpZ24gc3lzdGVtIGZpbGVzJyxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHR5cGU6ICdwYXRoJyxcbiAgICAgICAgcGF0dGVybjogJy90eXBlcy9jYW1wYWlnbicsXG4gICAgICAgIHdlaWdodDogMC45LFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0NhbXBhaWduIHR5cGUgZGVmaW5pdGlvbnMnLFxuICAgICAgfSxcbiAgICBdKTtcblxuICAgIC8vIFRlc3QgcGF0dGVybnNcbiAgICB0aGlzLmRvbWFpblBhdHRlcm5zLnNldCgndGVzdCcsIFtcbiAgICAgIHtcbiAgICAgICAgdHlwZTogJ2ZpbGVuYW1lJyxcbiAgICAgICAgcGF0dGVybjogJ1xcXFwudGVzdFxcXFwufFxcXFwuc3BlY1xcXFwuJyxcbiAgICAgICAgd2VpZ2h0OiAwLjksXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnVGVzdCBmaWxlcycsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICB0eXBlOiAncGF0aCcsXG4gICAgICAgIHBhdHRlcm46ICcvX190ZXN0c19fLycsXG4gICAgICAgIHdlaWdodDogMC45LFxuICAgICAgICBkZXNjcmlwdGlvbjogJ1Rlc3QgZGlyZWN0b3J5JyxcbiAgICAgIH0sXG4gICAgXSk7XG5cbiAgICAvLyBTY3JpcHQgcGF0dGVybnNcbiAgICB0aGlzLmRvbWFpblBhdHRlcm5zLnNldCgnc2NyaXB0JywgW1xuICAgICAge1xuICAgICAgICB0eXBlOiAncGF0aCcsXG4gICAgICAgIHBhdHRlcm46ICcvc2NyaXB0cy8nLFxuICAgICAgICB3ZWlnaHQ6IDAuOSxcbiAgICAgICAgZGVzY3JpcHRpb246ICdTY3JpcHRzIGRpcmVjdG9yeScsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICB0eXBlOiAnZmlsZW5hbWUnLFxuICAgICAgICBwYXR0ZXJuOiAnXFxcXC5jb25maWdcXFxcLnxzZXR1cFxcXFwufGluc3RhbGxcXFxcLicsXG4gICAgICAgIHdlaWdodDogMC44LFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0NvbmZpZ3VyYXRpb24gYW5kIHNldHVwIGZpbGVzJyxcbiAgICAgIH0sXG4gICAgXSk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==