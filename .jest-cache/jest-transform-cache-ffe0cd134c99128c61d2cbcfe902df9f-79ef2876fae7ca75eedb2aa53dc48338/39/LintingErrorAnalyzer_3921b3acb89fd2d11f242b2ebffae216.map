{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/linting/LintingErrorAnalyzer.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/linting/LintingErrorAnalyzer.ts"],"sourcesContent":["/**\n * LintingErrorAnalyzer - Automated linting error analysis and categorization system\n *\n * This class implements comprehensive error analysis, categorization, and resolution\n * strategy generation for ESLint issues across the WhatToEatNext codebase.\n */\n\nimport { execSync } from 'child_process';\nimport * as path from 'path';\n\nimport { log } from '@/services/LoggingService';\n\n// Core interfaces for error analysis\nexport interface LintingIssue {\n  id: string;\n  file: string;\n  line: number;\n  column: number;\n  rule: string;\n  message: string;\n  severity: 'error' | 'warning';\n  category: IssueCategory;\n  autoFixable: boolean;\n  domainContext?: DomainContext;\n  resolutionStrategy: ResolutionStrategy;\n}\n\nexport interface IssueCategory {\n  primary: 'import' | 'typescript' | 'react' | 'style' | 'domain';\n  secondary: string;\n  priority: 1 | 2 | 3 | 4;\n}\n\nexport interface DomainContext {\n  isAstrologicalCalculation: boolean;\n  isCampaignSystem: boolean;\n  isTestFile: boolean;\n  isScriptFile: boolean;\n  requiresSpecialHandling: boolean;\n}\n\nexport interface ResolutionStrategy {\n  type: 'auto-fix' | 'manual-review' | 'rule-adjustment' | 'ignore';\n  confidence: number; // 0-1\n  riskLevel: 'low' | 'medium' | 'high';\n  requiredValidation: ValidationRequirement[];\n  estimatedEffort: number; // minutes\n  dependencies: string[]; // Other issues that must be resolved first\n}\n\nexport interface ValidationRequirement {\n  type: 'build' | 'test' | 'type-check' | 'manual-review';\n  description: string;\n  automated: boolean;\n}\n\nexport interface CategorizedErrors {\n  total: number;\n  errors: number;\n  warnings: number;\n  byCategory: Record<string, LintingIssue[]>;\n  byPriority: Record<number, LintingIssue[]>;\n  byFile: Record<string, LintingIssue[]>;\n  autoFixable: LintingIssue[];\n  requiresManualReview: LintingIssue[];\n}\n\nexport interface ResolutionPlan {\n  phases: ResolutionPhase[];\n  totalEstimatedTime: number;\n  riskAssessment: RiskAssessment;\n  successProbability: number;\n}\n\nexport interface ResolutionPhase {\n  id: string;\n  name: string;\n  issues: LintingIssue[];\n  estimatedTime: number;\n  riskLevel: 'low' | 'medium' | 'high';\n  dependencies: string[];\n}\n\nexport interface RiskAssessment {\n  overall: 'low' | 'medium' | 'high';\n  factors: string[];\n  mitigations: string[];\n}\n\n/**\n * Main LintingErrorAnalyzer class\n */\nexport class LintingErrorAnalyzer {\n  private workspaceRoot: string;\n  private eslintConfigPath: string;\n  private domainPatterns: Record<string, RegExp[]>;\n\n  constructor(workspaceRoot: string = process.cwd()) {\n    this.workspaceRoot = workspaceRoot;\n    this.eslintConfigPath = path.join(workspaceRoot, 'eslint.config.cjs');\n\n    // Define domain-specific file patterns\n    this.domainPatterns = {\n      astrological: [\n        /\\/calculations\\//,\n        /\\/data\\/planets\\//,\n        /reliableAstronomy/,\n        /planetaryConsistencyCheck/,\n        /Astrological/,\n        /Alchemical/,\n      ],\n      campaign: [/\\/services\\/campaign\\//, /\\/types\\/campaign/, /Campaign/, /Progress/],\n      test: [/\\.test\\./, /\\.spec\\./, /__tests__/],\n      script: [/\\/scripts\\//, /\\.config\\./, /\\.setup\\./],\n    };\n  }\n\n  /**\n   * Analyze all linting issues in the codebase\n   */\n  async analyzeAllIssues(): Promise<CategorizedErrors> {\n    void log.info('🔍 Starting comprehensive linting error analysis...');\n\n    try {\n      // Run ESLint to get all issues\n      const eslintOutput = await this.runESLint();\n      const rawIssues = this.parseESLintOutput(eslintOutput);\n\n      void log.info(`📊 Found ${rawIssues.length} total linting issues`);\n\n      // Categorize and analyze each issue\n      const analyzedIssues = rawIssues.map(issue => this.analyzeIssue(issue));\n\n      // Categorize issues\n      const categorized = this.categorizeIssues(analyzedIssues);\n\n      void log.info('✅ Linting error analysis complete');\n      void this.logAnalysisSummary(categorized);\n\n      return categorized;\n    } catch (error) {\n      console.error('❌ Error during linting analysis:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate resolution strategies for categorized errors\n   */\n  generateResolutionPlan(categorizedErrors: CategorizedErrors): ResolutionPlan {\n    void log.info('🎯 Generating resolution plan...');\n\n    const phases: ResolutionPhase[] = [];\n    let totalTime = 0;\n\n    // Phase 1: Auto-fixable issues (low risk)\n    if (categorizedErrors.autoFixable.length > 0) {\n      const autoFixPhase: ResolutionPhase = {\n        id: 'auto-fix',\n        name: 'Automated Fixes',\n        issues: categorizedErrors.autoFixable,\n        estimatedTime: Math.ceil(categorizedErrors.autoFixable.length * 0.1), // 0.1 min per issue\n        riskLevel: 'low',\n        dependencies: [],\n      };\n      void phases.push(autoFixPhase);\n      totalTime += autoFixPhase.estimatedTime;\n    }\n\n    // Phase 2: Import and style issues (medium risk)\n    const importStyleIssues = [\n      ...(categorizedErrors.byCategory['import'] || []),\n      ...(categorizedErrors.byCategory['style'] || []),\n    ].filter(issue => issue.resolutionStrategy.type !== 'auto-fix');\n\n    if (importStyleIssues.length > 0) {\n      const importStylePhase: ResolutionPhase = {\n        id: 'import-style',\n        name: 'Import and Style Fixes',\n        issues: importStyleIssues,\n        estimatedTime: Math.ceil(importStyleIssues.length * 0.5), // 0.5 min per issue\n        riskLevel: 'medium',\n        dependencies: ['auto-fix'],\n      };\n      void phases.push(importStylePhase);\n      totalTime += importStylePhase.estimatedTime;\n    }\n\n    // Phase 3: TypeScript issues (high risk)\n    const typescriptIssues = categorizedErrors.byCategory['typescript'] || [];\n    if (typescriptIssues.length > 0) {\n      const typescriptPhase: ResolutionPhase = {\n        id: 'typescript',\n        name: 'TypeScript Fixes',\n        issues: typescriptIssues,\n        estimatedTime: Math.ceil(typescriptIssues.length * 2), // 2 min per issue\n        riskLevel: 'high',\n        dependencies: ['auto-fix', 'import-style'],\n      };\n      void phases.push(typescriptPhase);\n      totalTime += typescriptPhase.estimatedTime;\n    }\n\n    // Phase 4: React issues (medium risk)\n    const reactIssues = categorizedErrors.byCategory['react'] || [];\n    if (reactIssues.length > 0) {\n      const reactPhase: ResolutionPhase = {\n        id: 'react',\n        name: 'React Fixes',\n        issues: reactIssues,\n        estimatedTime: Math.ceil(reactIssues.length * 1), // 1 min per issue\n        riskLevel: 'medium',\n        dependencies: ['typescript'],\n      };\n      void phases.push(reactPhase);\n      totalTime += reactPhase.estimatedTime;\n    }\n\n    // Phase 5: Domain-specific issues (varies by context)\n    const domainIssues = categorizedErrors.byCategory['domain'] || [];\n    if (domainIssues.length > 0) {\n      const domainPhase: ResolutionPhase = {\n        id: 'domain',\n        name: 'Domain-Specific Fixes',\n        issues: domainIssues,\n        estimatedTime: Math.ceil(domainIssues.length * 3), // 3 min per issue (requires domain knowledge)\n        riskLevel: 'high',\n        dependencies: ['typescript', 'react'],\n      };\n      void phases.push(domainPhase);\n      totalTime += domainPhase.estimatedTime;\n    }\n\n    // Calculate risk assessment\n    const riskAssessment = this.assessResolutionRisk(categorizedErrors, phases);\n\n    // Calculate success probability based on issue types and complexity\n    const successProbability = this.calculateSuccessProbability(categorizedErrors);\n\n    const plan: ResolutionPlan = {\n      phases,\n      totalEstimatedTime: totalTime,\n      riskAssessment,\n      successProbability,\n    };\n\n    void log.info(\n      `📋 Resolution plan generated: ${phases.length} phases, ${totalTime} minutes estimated`,\n    );\n\n    return plan;\n  }\n\n  /**\n   * Run ESLint and capture output\n   */\n  private async runESLint(): Promise<string> {\n    try {\n      const command = `npx eslint --config ${this.eslintConfigPath} src --format json --max-warnings=10000`;\n      const output = execSync(command, {\n        encoding: 'utf8',\n        cwd: this.workspaceRoot,\n        maxBuffer: 10 * 1024 * 1024, // 10MB buffer\n      });\n      return output;\n    } catch (error: unknown) {\n      // ESLint returns non-zero exit code when issues are found\n      const err = error as { stdout?: string };\n      if (err.stdout) {\n        return err.stdout;\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Parse ESLint JSON output into raw issues\n   */\n  private parseESLintOutput(output: string): Array<Record<string, unknown>> {\n    try {\n      const results = JSON.parse(output) as Array<{\n        filePath: string;\n        messages: Array<Record<string, unknown>>;\n      }>;\n      const issues: Array<Record<string, unknown>> = [];\n\n      for (const fileResult of results) {\n        for (const message of fileResult.messages) {\n          issues.push({\n            ...message,\n            filePath: fileResult.filePath,\n          });\n        }\n      }\n\n      return issues;\n    } catch (error) {\n      console.error('Failed to parse ESLint output:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Analyze individual issue and determine resolution strategy\n   */\n  private analyzeIssue(rawIssue: Record<string, unknown>): LintingIssue {\n    const file = String(rawIssue.filePath || '')\n      .replace(this.workspaceRoot, '')\n      .replace(/^\\//, '');\n    const domainContext = this.detectDomainContext(file);\n    const category = this.categorizeIssue(rawIssue, domainContext);\n    const resolutionStrategy = this.determineResolutionStrategy(rawIssue, category, domainContext);\n\n    const issue: LintingIssue = {\n      id: `${file}:${String(rawIssue.line)}:${String(rawIssue.column)}:${String(rawIssue.ruleId)}`,\n      file,\n      line: Number(rawIssue.line || 0),\n      column: Number(rawIssue.column || 0),\n      rule: String(rawIssue.ruleId || 'unknown'),\n      message: String(rawIssue.message || ''),\n      severity: Number(rawIssue.severity) === 2 ? 'error' : 'warning',\n      category,\n      autoFixable: Boolean((rawIssue as Record<string, unknown>).fix),\n      domainContext,\n      resolutionStrategy,\n    };\n\n    return issue;\n  }\n\n  /**\n   * Detect domain context for a file\n   */\n  private detectDomainContext(filePath: string): DomainContext {\n    const context: DomainContext = {\n      isAstrologicalCalculation: false,\n      isCampaignSystem: false,\n      isTestFile: false,\n      isScriptFile: false,\n      requiresSpecialHandling: false,\n    };\n\n    // Check astrological patterns\n    context.isAstrologicalCalculation = this.domainPatterns.astrological.some(pattern =>\n      pattern.test(filePath),\n    );\n\n    // Check campaign system patterns\n    context.isCampaignSystem = this.domainPatterns.campaign.some(pattern => pattern.test(filePath));\n\n    // Check test file patterns\n    context.isTestFile = this.domainPatterns.test.some(pattern => pattern.test(filePath));\n\n    // Check script file patterns\n    context.isScriptFile = this.domainPatterns.script.some(pattern => pattern.test(filePath));\n\n    // Determine if special handling is required\n    context.requiresSpecialHandling =\n      context.isAstrologicalCalculation ||\n      context.isCampaignSystem ||\n      context.isTestFile ||\n      context.isScriptFile;\n\n    return context;\n  }\n\n  /**\n   * Categorize individual issue\n   */\n  private categorizeIssue(\n    rawIssue: Record<string, unknown>,\n    domainContext: DomainContext,\n  ): IssueCategory {\n    const rule = String(rawIssue.ruleId || '');\n\n    // Import-related issues\n    if (rule.startsWith('import/')) {\n      return {\n        primary: 'import',\n        secondary: rule.replace('import/', ''),\n        priority: 2,\n      };\n    }\n\n    // TypeScript-related issues\n    if (rule.startsWith('@typescript-eslint/')) {\n      return {\n        primary: 'typescript',\n        secondary: rule.replace('@typescript-eslint/', ''),\n        priority: rule.includes('no-explicit-any') ? 3 : 1,\n      };\n    }\n\n    // React-related issues\n    if (rule.startsWith('react') || rule.startsWith('react-hooks')) {\n      return {\n        primary: 'react',\n        secondary: rule.replace(/^react(-hooks)?\\//, ''),\n        priority: rule.includes('exhaustive-deps') ? 2 : 1,\n      };\n    }\n\n    // Domain-specific issues\n    if (domainContext.requiresSpecialHandling) {\n      return {\n        primary: 'domain',\n        secondary: domainContext.isAstrologicalCalculation\n          ? 'astrological'\n          : domainContext.isCampaignSystem\n            ? 'campaign'\n            : domainContext.isTestFile\n              ? 'test'\n              : 'script',\n        priority: 4,\n      };\n    }\n\n    // Style and formatting issues\n    return {\n      primary: 'style',\n      secondary: rule,\n      priority: 4,\n    };\n  }\n\n  /**\n   * Determine resolution strategy for an issue\n   */\n  private determineResolutionStrategy(\n    rawIssue: Record<string, unknown>,\n    category: IssueCategory,\n    domainContext: DomainContext,\n  ): ResolutionStrategy {\n    const rule = String(rawIssue.ruleId || '');\n    const hasAutoFix = Boolean((rawIssue as Record<string, unknown>).fix);\n\n    // Auto-fixable issues with low risk\n    if (hasAutoFix && this.isLowRiskAutoFix(rule)) {\n      return {\n        type: 'auto-fix',\n        confidence: 0.9,\n        riskLevel: 'low',\n        requiredValidation: [\n          { type: 'build', description: 'Verify build still passes', automated: true },\n        ],\n        estimatedEffort: 0.1,\n        dependencies: [],\n      };\n    }\n\n    // Import issues - usually safe to auto-fix\n    if (category.primary === 'import') {\n      return {\n        type: hasAutoFix ? 'auto-fix' : 'manual-review',\n        confidence: hasAutoFix ? 0.8 : 0.6,\n        riskLevel: 'medium',\n        requiredValidation: [\n          { type: 'build', description: 'Verify imports resolve correctly', automated: true },\n          { type: 'type-check', description: 'Verify TypeScript compilation', automated: true },\n        ],\n        estimatedEffort: hasAutoFix ? 0.2 : 1.0,\n        dependencies: [],\n      };\n    }\n\n    // TypeScript issues - require careful handling\n    if (category.primary === 'typescript') {\n      const isExplicitAny = rule.includes('no-explicit-any');\n      return {\n        type: isExplicitAny ? 'manual-review' : 'auto-fix',\n        confidence: isExplicitAny ? 0.4 : 0.7,\n        riskLevel: isExplicitAny ? 'high' : 'medium',\n        requiredValidation: [\n          { type: 'type-check', description: 'Verify TypeScript compilation', automated: true },\n          { type: 'test', description: 'Run relevant tests', automated: true },\n        ],\n        estimatedEffort: isExplicitAny ? 5.0 : 1.0,\n        dependencies: [],\n      };\n    }\n\n    // React issues - moderate risk\n    if (category.primary === 'react') {\n      const isExhaustiveDeps = rule.includes('exhaustive-deps');\n      return {\n        type: isExhaustiveDeps ? 'manual-review' : 'auto-fix',\n        confidence: isExhaustiveDeps ? 0.5 : 0.8,\n        riskLevel: isExhaustiveDeps ? 'high' : 'medium',\n        requiredValidation: [\n          { type: 'build', description: 'Verify React components render', automated: true },\n          { type: 'test', description: 'Run component tests', automated: true },\n        ],\n        estimatedEffort: isExhaustiveDeps ? 3.0 : 0.5,\n        dependencies: [],\n      };\n    }\n\n    // Domain-specific issues - require special handling\n    if (domainContext.requiresSpecialHandling) {\n      return {\n        type: 'manual-review',\n        confidence: 0.3,\n        riskLevel: 'high',\n        requiredValidation: [\n          { type: 'manual-review', description: 'Domain expert review required', automated: false },\n          { type: 'test', description: 'Run domain-specific tests', automated: true },\n        ],\n        estimatedEffort: 10.0,\n        dependencies: [],\n      };\n    }\n\n    // Default strategy for other issues\n    return {\n      type: hasAutoFix ? 'auto-fix' : 'rule-adjustment',\n      confidence: 0.6,\n      riskLevel: 'low',\n      requiredValidation: [{ type: 'build', description: 'Verify build passes', automated: true }],\n      estimatedEffort: hasAutoFix ? 0.5 : 2.0,\n      dependencies: [],\n    };\n  }\n\n  /**\n   * Check if a rule is safe for auto-fixing\n   */\n  private isLowRiskAutoFix(rule: string): boolean {\n    const lowRiskRules = [\n      'import/order',\n      'import/newline-after-import',\n      'semi',\n      'quotes',\n      'comma-dangle',\n      'trailing-comma',\n      'indent',\n      'no-trailing-spaces',\n      'eol-last',\n    ];\n\n    return lowRiskRules.some(lowRiskRule => rule.includes(lowRiskRule));\n  }\n\n  /**\n   * Categorize all analyzed issues\n   */\n  private categorizeIssues(issues: LintingIssue[]): CategorizedErrors {\n    const categorized: CategorizedErrors = {\n      total: issues.length,\n      errors: issues.filter(i => i.severity === 'error').length,\n      warnings: issues.filter(i => i.severity === 'warning').length,\n      byCategory: {},\n      byPriority: {},\n      byFile: {},\n      autoFixable: issues.filter(i => i.autoFixable),\n      requiresManualReview: issues.filter(i => i.resolutionStrategy.type === 'manual-review'),\n    };\n\n    // Group by category\n    for (const issue of issues) {\n      const categoryKey = issue.category.primary;\n      if (!categorized.byCategory[categoryKey]) {\n        categorized.byCategory[categoryKey] = [];\n      }\n      categorized.byCategory[categoryKey].push(issue);\n    }\n\n    // Group by priority\n    for (const issue of issues) {\n      const priority = issue.category.priority;\n      if (!categorized.byPriority[priority]) {\n        categorized.byPriority[priority] = [];\n      }\n      categorized.byPriority[priority].push(issue);\n    }\n\n    // Group by file\n    for (const issue of issues) {\n      if (!categorized.byFile[issue.file]) {\n        categorized.byFile[issue.file] = [];\n      }\n      categorized.byFile[issue.file].push(issue);\n    }\n\n    return categorized;\n  }\n\n  /**\n   * Assess risk of resolution plan\n   */\n  private assessResolutionRisk(\n    categorized: CategorizedErrors,\n    phases: ResolutionPhase[],\n  ): RiskAssessment {\n    const factors: string[] = [];\n    const mitigations: string[] = [];\n\n    // Check for high-risk factors\n    if (categorized.byCategory['typescript'].length > 50) {\n      void factors.push('High number of TypeScript issues');\n      mitigations.push('Implement gradual TypeScript fixes with validation');\n    }\n\n    if (categorized.byCategory['domain'].length > 0) {\n      void factors.push('Domain-specific issues require expert knowledge');\n      mitigations.push('Manual review by domain experts required');\n    }\n\n    if (categorized.requiresManualReview.length > categorized.autoFixable.length) {\n      void factors.push('More manual fixes than automated fixes');\n      mitigations.push('Prioritize automated fixes first to reduce workload');\n    }\n\n    // Determine overall risk\n    const highRiskPhases = phases.filter(p => p.riskLevel === 'high').length;\n    const overall = highRiskPhases > 2 ? 'high' : highRiskPhases > 0 ? 'medium' : 'low';\n\n    return { overall, factors, mitigations };\n  }\n\n  /**\n   * Calculate success probability based on issue complexity\n   */\n  private calculateSuccessProbability(categorized: CategorizedErrors): number {\n    let baseScore = 0.8; // Start with 80% confidence\n\n    // Reduce confidence for complex issues\n    const complexIssues = categorized.requiresManualReview.length;\n    const totalIssues = categorized.total;\n\n    if (totalIssues > 0) {\n      const complexityRatio = complexIssues / totalIssues;\n      baseScore -= complexityRatio * 0.3; // Reduce up to 30% for complexity\n    }\n\n    // Increase confidence for auto-fixable issues\n    const autoFixRatio = categorized.autoFixable.length / totalIssues;\n    baseScore += autoFixRatio * 0.1; // Increase up to 10% for auto-fixes\n\n    return Math.max(0.3, Math.min(0.95, baseScore)); // Clamp between 30% and 95%\n  }\n\n  /**\n   * Log analysis summary\n   */\n  private logAnalysisSummary(categorized: CategorizedErrors): void {\n    void log.info('\\n📊 LINTING ANALYSIS SUMMARY');\n    log.info('============================');\n    void log.info(`Total Issues: ${categorized.total}`);\n    void log.info(`Errors: ${categorized.errors}`);\n    void log.info(`Warnings: ${categorized.warnings}`);\n    void log.info(`Auto-fixable: ${categorized.autoFixable.length}`);\n    void log.info(`Manual Review Required: ${categorized.requiresManualReview.length}`);\n\n    void log.info('\\n📋 BY CATEGORY:');\n    Object.entries(categorized.byCategory).forEach(([category, issues]) => {\n      void log.info(`  ${category}: ${issues.length} issues`);\n    });\n\n    void log.info('\\n🎯 BY PRIORITY:');\n    Object.entries(categorized.byPriority).forEach(([priority, issues]) => {\n      log.info(`  Priority ${priority}: ${issues.length} issues`);\n    });\n\n    log.info('============================\\n');\n  }\n}\n"],"version":3}