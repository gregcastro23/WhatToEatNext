4a0cff2581562634110712b46ebd7ad6
"use strict";
// src/data/culturalRules.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCulturalRecommendations = exports.culturalRules = void 0;
exports.culturalRules = {
    japanese: {
        cuisineId: 'japanese',
        principles: [
            "Balance of five flavors (sweet, salty, sour, bitter, umami)",
            "Color harmony (five colors: red, yellow, green, white, black)",
            "Multiple small dishes rather than one large serving",
            "Seasonal ingredients (shun) are preferred",
            "Temperature balance between hot and cold dishes"
        ],
        preferredCombinations: [
            {
                foods: ['rice', 'miso soup', 'grilled fish'],
                reason: 'Traditional ichiju-sansai (one soup, three sides) balance'
            },
            {
                foods: ['cold noodles', 'hot broth'],
                reason: 'Temperature contrast provides balance'
            },
            {
                foods: ['rich foods', 'pickled vegetables'],
                reason: 'Pickles aid digestion and provide contrast'
            }
        ],
        avoidCombinations: [
            {
                foods: ['green tea', 'oily foods'],
                reason: 'Can cause stomach discomfort'
            },
            {
                foods: ['raw fish', 'dairy'],
                reason: 'Conflicts with traditional flavor profiles'
            }
        ]
    },
    middleEastern: {
        cuisineId: 'middleEastern',
        principles: [
            "Balance of warm and cool ingredients",
            "Combination of protein with fresh herbs",
            "Use of yogurt to balance spicy dishes",
            "Incorporation of sweet and savory elements"
        ],
        preferredCombinations: [
            {
                foods: ['hummus', 'warm pita', 'olive oil'],
                reason: 'Traditional combination enhancing flavors and textures'
            },
            {
                foods: ['grilled meats', 'fresh herbs', 'yogurt sauce'],
                reason: 'Balanced protein with cooling elements'
            }
        ],
        avoidCombinations: [
            {
                foods: ['fish', 'dairy'],
                reason: 'Traditional dietary guideline'
            }
        ]
    },
    thai: {
        cuisineId: 'thai',
        principles: [
            "Balance of sweet, sour, salty, and spicy",
            "Contrast of textures in each meal",
            "Fresh herbs and aromatics in every dish",
            "Light to heavy dish progression"
        ],
        preferredCombinations: [
            {
                foods: ['spicy curry', 'plain rice', 'fresh vegetables'],
                reason: 'Balances heat and provides textural contrast'
            },
            {
                foods: ['papaya salad', 'grilled protein', 'sticky rice'],
                reason: 'Traditional Isaan combination'
            }
        ],
        avoidCombinations: [
            {
                foods: ['very spicy dishes', 'very sweet dishes'],
                reason: 'Overwhelms palate'
            }
        ]
    },
    chinese: {
        cuisineId: 'chinese',
        principles: [
            "Balance of yin and yang in ingredients",
            "Five flavors (sweet, sour, bitter, spicy, salty)",
            "Color harmony and presentation",
            "Combination of textures",
            "Medicinal properties of ingredients"
        ],
        preferredCombinations: [
            {
                foods: ['rice', 'stir-fried vegetables', 'protein'],
                reason: 'Traditional balanced meal structure'
            },
            {
                foods: ['soup', 'cold dishes'],
                reason: 'Temperature and texture contrast'
            },
            {
                foods: ['congee', 'pickled vegetables'],
                reason: 'Digestive harmony'
            }
        ],
        avoidCombinations: [
            {
                foods: ['cold drinks', 'spicy food'],
                reason: 'Disrupts digestive balance'
            },
            {
                foods: ['crab', 'persimmon'],
                reason: 'Traditional dietary restriction'
            }
        ]
    },
    indian: {
        cuisineId: 'indian',
        principles: [
            "Six tastes (sweet, sour, salty, bitter, pungent, astringent)",
            "Balance of warming and cooling foods",
            "Use of spices for digestive health",
            "Proper food combinations",
            "Seasonal eating practices"
        ],
        preferredCombinations: [
            {
                foods: ['dal', 'rice', 'ghee'],
                reason: 'Complete protein combination'
            },
            {
                foods: ['curry', 'yogurt', 'rice'],
                reason: 'Balanced meal with cooling element'
            },
            {
                foods: ['spicy dishes', 'raita'],
                reason: 'Temperature and flavor balance'
            }
        ],
        avoidCombinations: [
            {
                foods: ['milk', 'fish'],
                reason: 'Ayurvedic incompatibility'
            },
            {
                foods: ['honey', 'hot foods'],
                reason: 'Creates toxins according to Ayurveda'
            }
        ]
    },
    vietnamese: {
        cuisineId: 'vietnamese',
        principles: [
            "Balance of five elements",
            "Combination of fresh herbs and cooked ingredients",
            "Light to heavy progression",
            "Contrast in textures and temperatures",
            "Use of dipping sauces for personalization"
        ],
        preferredCombinations: [
            {
                foods: ['rice noodles', 'fresh herbs', 'protein'],
                reason: 'Traditional pho combination'
            },
            {
                foods: ['rice paper rolls', 'dipping sauce'],
                reason: 'Classic pairing for texture and flavor'
            }
        ],
        avoidCombinations: [
            {
                foods: ['durian', 'alcohol'],
                reason: 'Traditional belief of negative effects'
            }
        ]
    },
    korean: {
        cuisineId: 'korean',
        principles: [
            "Balance of colors (obangsaek)",
            "Fermented food with fresh ingredients",
            "Harmony of main and side dishes",
            "Temperature contrast in serving",
            "Medicinal food philosophy"
        ],
        preferredCombinations: [
            {
                foods: ['rice', 'kimchi', 'soup'],
                reason: 'Traditional Korean meal structure'
            },
            {
                foods: ['grilled meat', 'lettuce wraps', 'ssamjang'],
                reason: 'Classic Korean BBQ combination'
            }
        ],
        avoidCombinations: [
            {
                foods: ['kimchi', 'milk'],
                reason: 'Flavor clash and digestive concerns'
            }
        ]
    },
    mexican: {
        cuisineId: 'mexican',
        principles: [
            "Balance of heat levels",
            "Fresh and cooked ingredient combinations",
            "Use of acid to balance richness",
            "Layering of flavors",
            "Complementary textures"
        ],
        preferredCombinations: [
            {
                foods: ['beans', 'rice', 'corn tortillas'],
                reason: 'Complete protein combination'
            },
            {
                foods: ['spicy dishes', 'crema', 'lime'],
                reason: 'Heat balanced with cooling elements'
            }
        ],
        avoidCombinations: [
            {
                foods: ['fish', 'cheese'],
                reason: 'Traditional flavor conflict'
            }
        ]
    }
};
// Helper function to get cultural recommendations
function getCulturalRecommendations(cuisineId, currentDishes) {
    const rules = exports.culturalRules[cuisineId];
    if (!rules)
        return { recommended: [], avoid: [] };
    const recommended = rules.preferredCombinations
        .filter(combo => currentDishes.some(dish => combo.foods.includes(dish)))
        .map(combo => combo.foods.filter(food => !currentDishes.includes(food)))
        .flat();
    const avoid = rules.avoidCombinations
        .filter(combo => currentDishes.some(dish => combo.foods.includes(dish)))
        .map(combo => combo.foods.filter(food => !currentDishes.includes(food)))
        .flat();
    return { recommended, avoid };
}
exports.getCulturalRecommendations = getCulturalRecommendations;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9kYXRhL2N1bHR1cmFscnVsZXMudHMiLCJtYXBwaW5ncyI6IjtBQUFBLDRCQUE0Qjs7O0FBSWYsUUFBQSxhQUFhLEdBQW9DO0lBQzVELFFBQVEsRUFBRTtRQUNSLFNBQVMsRUFBRSxVQUFVO1FBQ3JCLFVBQVUsRUFBRTtZQUNWLDZEQUE2RDtZQUM3RCwrREFBK0Q7WUFDL0QscURBQXFEO1lBQ3JELDJDQUEyQztZQUMzQyxpREFBaUQ7U0FDbEQ7UUFDRCxxQkFBcUIsRUFBRTtZQUNyQjtnQkFDRSxLQUFLLEVBQUUsQ0FBQyxNQUFNLEVBQUUsV0FBVyxFQUFFLGNBQWMsQ0FBQztnQkFDNUMsTUFBTSxFQUFFLDJEQUEyRDthQUNwRTtZQUNEO2dCQUNFLEtBQUssRUFBRSxDQUFDLGNBQWMsRUFBRSxXQUFXLENBQUM7Z0JBQ3BDLE1BQU0sRUFBRSx1Q0FBdUM7YUFDaEQ7WUFDRDtnQkFDRSxLQUFLLEVBQUUsQ0FBQyxZQUFZLEVBQUUsb0JBQW9CLENBQUM7Z0JBQzNDLE1BQU0sRUFBRSw0Q0FBNEM7YUFDckQ7U0FDRjtRQUNELGlCQUFpQixFQUFFO1lBQ2pCO2dCQUNFLEtBQUssRUFBRSxDQUFDLFdBQVcsRUFBRSxZQUFZLENBQUM7Z0JBQ2xDLE1BQU0sRUFBRSw4QkFBOEI7YUFDdkM7WUFDRDtnQkFDRSxLQUFLLEVBQUUsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDO2dCQUM1QixNQUFNLEVBQUUsNENBQTRDO2FBQ3JEO1NBQ0Y7S0FDRjtJQUNELGFBQWEsRUFBRTtRQUNiLFNBQVMsRUFBRSxlQUFlO1FBQzFCLFVBQVUsRUFBRTtZQUNWLHNDQUFzQztZQUN0Qyx5Q0FBeUM7WUFDekMsdUNBQXVDO1lBQ3ZDLDRDQUE0QztTQUM3QztRQUNELHFCQUFxQixFQUFFO1lBQ3JCO2dCQUNFLEtBQUssRUFBRSxDQUFDLFFBQVEsRUFBRSxXQUFXLEVBQUUsV0FBVyxDQUFDO2dCQUMzQyxNQUFNLEVBQUUsd0RBQXdEO2FBQ2pF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Q0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQ3ZEO1NBQ0EsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUN2RSxJQUFJLEVBQUUsQ0FBQztJQUVWLE9BQU8sRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLENBQUM7QUFDaEMsQ0FBQztBQXRCRCxnRUFzQkMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9kYXRhL2N1bHR1cmFscnVsZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2RhdGEvY3VsdHVyYWxSdWxlcy50c1xuXG5pbXBvcnQgeyBDdWx0dXJhbEJhbGFuY2UgfSBmcm9tICcuL2Zvb2RUeXBlcyc7XG5cbmV4cG9ydCBjb25zdCBjdWx0dXJhbFJ1bGVzOiBSZWNvcmQ8c3RyaW5nLCBDdWx0dXJhbEJhbGFuY2U+ID0ge1xuICBqYXBhbmVzZToge1xuICAgIGN1aXNpbmVJZDogJ2phcGFuZXNlJyxcbiAgICBwcmluY2lwbGVzOiBbXG4gICAgICBcIkJhbGFuY2Ugb2YgZml2ZSBmbGF2b3JzIChzd2VldCwgc2FsdHksIHNvdXIsIGJpdHRlciwgdW1hbWkpXCIsXG4gICAgICBcIkNvbG9yIGhhcm1vbnkgKGZpdmUgY29sb3JzOiByZWQsIHllbGxvdywgZ3JlZW4sIHdoaXRlLCBibGFjaylcIixcbiAgICAgIFwiTXVsdGlwbGUgc21hbGwgZGlzaGVzIHJhdGhlciB0aGFuIG9uZSBsYXJnZSBzZXJ2aW5nXCIsXG4gICAgICBcIlNlYXNvbmFsIGluZ3JlZGllbnRzIChzaHVuKSBhcmUgcHJlZmVycmVkXCIsXG4gICAgICBcIlRlbXBlcmF0dXJlIGJhbGFuY2UgYmV0d2VlbiBob3QgYW5kIGNvbGQgZGlzaGVzXCJcbiAgICBdLFxuICAgIHByZWZlcnJlZENvbWJpbmF0aW9uczogW1xuICAgICAge1xuICAgICAgICBmb29kczogWydyaWNlJywgJ21pc28gc291cCcsICdncmlsbGVkIGZpc2gnXSxcbiAgICAgICAgcmVhc29uOiAnVHJhZGl0aW9uYWwgaWNoaWp1LXNhbnNhaSAob25lIHNvdXAsIHRocmVlIHNpZGVzKSBiYWxhbmNlJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgZm9vZHM6IFsnY29sZCBub29kbGVzJywgJ2hvdCBicm90aCddLFxuICAgICAgICByZWFzb246ICdUZW1wZXJhdHVyZSBjb250cmFzdCBwcm92aWRlcyBiYWxhbmNlJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgZm9vZHM6IFsncmljaCBmb29kcycsICdwaWNrbGVkIHZlZ2V0YWJsZXMnXSxcbiAgICAgICAgcmVhc29uOiAnUGlja2xlcyBhaWQgZGlnZXN0aW9uIGFuZCBwcm92aWRlIGNvbnRyYXN0J1xuICAgICAgfVxuICAgIF0sXG4gICAgYXZvaWRDb21iaW5hdGlvbnM6IFtcbiAgICAgIHtcbiAgICAgICAgZm9vZHM6IFsnZ3JlZW4gdGVhJywgJ29pbHkgZm9vZHMnXSxcbiAgICAgICAgcmVhc29uOiAnQ2FuIGNhdXNlIHN0b21hY2ggZGlzY29tZm9ydCdcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGZvb2RzOiBbJ3JhdyBmaXNoJywgJ2RhaXJ5J10sXG4gICAgICAgIHJlYXNvbjogJ0NvbmZsaWN0cyB3aXRoIHRyYWRpdGlvbmFsIGZsYXZvciBwcm9maWxlcydcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIG1pZGRsZUVhc3Rlcm46IHtcbiAgICBjdWlzaW5lSWQ6ICdtaWRkbGVFYXN0ZXJuJyxcbiAgICBwcmluY2lwbGVzOiBbXG4gICAgICBcIkJhbGFuY2Ugb2Ygd2FybSBhbmQgY29vbCBpbmdyZWRpZW50c1wiLFxuICAgICAgXCJDb21iaW5hdGlvbiBvZiBwcm90ZWluIHdpdGggZnJlc2ggaGVyYnNcIixcbiAgICAgIFwiVXNlIG9mIHlvZ3VydCB0byBiYWxhbmNlIHNwaWN5IGRpc2hlc1wiLFxuICAgICAgXCJJbmNvcnBvcmF0aW9uIG9mIHN3ZWV0IGFuZCBzYXZvcnkgZWxlbWVudHNcIlxuICAgIF0sXG4gICAgcHJlZmVycmVkQ29tYmluYXRpb25zOiBbXG4gICAgICB7XG4gICAgICAgIGZvb2RzOiBbJ2h1bW11cycsICd3YXJtIHBpdGEnLCAnb2xpdmUgb2lsJ10sXG4gICAgICAgIHJlYXNvbjogJ1RyYWRpdGlvbmFsIGNvbWJpbmF0aW9uIGVuaGFuY2luZyBmbGF2b3JzIGFuZCB0ZXh0dXJlcydcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGZvb2RzOiBbJ2dyaWxsZWQgbWVhdHMnLCAnZnJlc2ggaGVyYnMnLCAneW9ndXJ0IHNhdWNlJ10sXG4gICAgICAgIHJlYXNvbjogJ0JhbGFuY2VkIHByb3RlaW4gd2l0aCBjb29saW5nIGVsZW1lbnRzJ1xuICAgICAgfVxuICAgIF0sXG4gICAgYXZvaWRDb21iaW5hdGlvbnM6IFtcbiAgICAgIHtcbiAgICAgICAgZm9vZHM6IFsnZmlzaCcsICdkYWlyeSddLFxuICAgICAgICByZWFzb246ICdUcmFkaXRpb25hbCBkaWV0YXJ5IGd1aWRlbGluZSdcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHRoYWk6IHtcbiAgICBjdWlzaW5lSWQ6ICd0aGFpJyxcbiAgICBwcmluY2lwbGVzOiBbXG4gICAgICBcIkJhbGFuY2Ugb2Ygc3dlZXQsIHNvdXIsIHNhbHR5LCBhbmQgc3BpY3lcIixcbiAgICAgIFwiQ29udHJhc3Qgb2YgdGV4dHVyZXMgaW4gZWFjaCBtZWFsXCIsXG4gICAgICBcIkZyZXNoIGhlcmJzIGFuZCBhcm9tYXRpY3MgaW4gZXZlcnkgZGlzaFwiLFxuICAgICAgXCJMaWdodCB0byBoZWF2eSBkaXNoIHByb2dyZXNzaW9uXCJcbiAgICBdLFxuICAgIHByZWZlcnJlZENvbWJpbmF0aW9uczogW1xuICAgICAge1xuICAgICAgICBmb29kczogWydzcGljeSBjdXJyeScsICdwbGFpbiByaWNlJywgJ2ZyZXNoIHZlZ2V0YWJsZXMnXSxcbiAgICAgICAgcmVhc29uOiAnQmFsYW5jZXMgaGVhdCBhbmQgcHJvdmlkZXMgdGV4dHVyYWwgY29udHJhc3QnXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBmb29kczogWydwYXBheWEgc2FsYWQnLCAnZ3JpbGxlZCBwcm90ZWluJywgJ3N0aWNreSByaWNlJ10sXG4gICAgICAgIHJlYXNvbjogJ1RyYWRpdGlvbmFsIElzYWFuIGNvbWJpbmF0aW9uJ1xuICAgICAgfVxuICAgIF0sXG4gICAgYXZvaWRDb21iaW5hdGlvbnM6IFtcbiAgICAgIHtcbiAgICAgICAgZm9vZHM6IFsndmVyeSBzcGljeSBkaXNoZXMnLCAndmVyeSBzd2VldCBkaXNoZXMnXSxcbiAgICAgICAgcmVhc29uOiAnT3ZlcndoZWxtcyBwYWxhdGUnXG4gICAgICB9XG4gICAgXVxuICB9LFxuICBjaGluZXNlOiB7XG4gICAgY3Vpc2luZUlkOiAnY2hpbmVzZScsXG4gICAgcHJpbmNpcGxlczogW1xuICAgICAgXCJCYWxhbmNlIG9mIHlpbiBhbmQgeWFuZyBpbiBpbmdyZWRpZW50c1wiLFxuICAgICAgXCJGaXZlIGZsYXZvcnMgKHN3ZWV0LCBzb3VyLCBiaXR0ZXIsIHNwaWN5LCBzYWx0eSlcIixcbiAgICAgIFwiQ29sb3IgaGFybW9ueSBhbmQgcHJlc2VudGF0aW9uXCIsXG4gICAgICBcIkNvbWJpbmF0aW9uIG9mIHRleHR1cmVzXCIsXG4gICAgICBcIk1lZGljaW5hbCBwcm9wZXJ0aWVzIG9mIGluZ3JlZGllbnRzXCJcbiAgICBdLFxuICAgIHByZWZlcnJlZENvbWJpbmF0aW9uczogW1xuICAgICAge1xuICAgICAgICBmb29kczogWydyaWNlJywgJ3N0aXItZnJpZWQgdmVnZXRhYmxlcycsICdwcm90ZWluJ10sXG4gICAgICAgIHJlYXNvbjogJ1RyYWRpdGlvbmFsIGJhbGFuY2VkIG1lYWwgc3RydWN0dXJlJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgZm9vZHM6IFsnc291cCcsICdjb2xkIGRpc2hlcyddLFxuICAgICAgICByZWFzb246ICdUZW1wZXJhdHVyZSBhbmQgdGV4dHVyZSBjb250cmFzdCdcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGZvb2RzOiBbJ2NvbmdlZScsICdwaWNrbGVkIHZlZ2V0YWJsZXMnXSxcbiAgICAgICAgcmVhc29uOiAnRGlnZXN0aXZlIGhhcm1vbnknXG4gICAgICB9XG4gICAgXSxcbiAgICBhdm9pZENvbWJpbmF0aW9uczogW1xuICAgICAge1xuICAgICAgICBmb29kczogWydjb2xkIGRyaW5rcycsICdzcGljeSBmb29kJ10sXG4gICAgICAgIHJlYXNvbjogJ0Rpc3J1cHRzIGRpZ2VzdGl2ZSBiYWxhbmNlJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgZm9vZHM6IFsnY3JhYicsICdwZXJzaW1tb24nXSxcbiAgICAgICAgcmVhc29uOiAnVHJhZGl0aW9uYWwgZGlldGFyeSByZXN0cmljdGlvbidcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIGluZGlhbjoge1xuICAgIGN1aXNpbmVJZDogJ2luZGlhbicsXG4gICAgcHJpbmNpcGxlczogW1xuICAgICAgXCJTaXggdGFzdGVzIChzd2VldCwgc291ciwgc2FsdHksIGJpdHRlciwgcHVuZ2VudCwgYXN0cmluZ2VudClcIixcbiAgICAgIFwiQmFsYW5jZSBvZiB3YXJtaW5nIGFuZCBjb29saW5nIGZvb2RzXCIsXG4gICAgICBcIlVzZSBvZiBzcGljZXMgZm9yIGRpZ2VzdGl2ZSBoZWFsdGhcIixcbiAgICAgIFwiUHJvcGVyIGZvb2QgY29tYmluYXRpb25zXCIsXG4gICAgICBcIlNlYXNvbmFsIGVhdGluZyBwcmFjdGljZXNcIlxuICAgIF0sXG4gICAgcHJlZmVycmVkQ29tYmluYXRpb25zOiBbXG4gICAgICB7XG4gICAgICAgIGZvb2RzOiBbJ2RhbCcsICdyaWNlJywgJ2doZWUnXSxcbiAgICAgICAgcmVhc29uOiAnQ29tcGxldGUgcHJvdGVpbiBjb21iaW5hdGlvbidcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGZvb2RzOiBbJ2N1cnJ5JywgJ3lvZ3VydCcsICdyaWNlJ10sXG4gICAgICAgIHJlYXNvbjogJ0JhbGFuY2VkIG1lYWwgd2l0aCBjb29saW5nIGVsZW1lbnQnXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBmb29kczogWydzcGljeSBkaXNoZXMnLCAncmFpdGEnXSxcbiAgICAgICAgcmVhc29uOiAnVGVtcGVyYXR1cmUgYW5kIGZsYXZvciBiYWxhbmNlJ1xuICAgICAgfVxuICAgIF0sXG4gICAgYXZvaWRDb21iaW5hdGlvbnM6IFtcbiAgICAgIHtcbiAgICAgICAgZm9vZHM6IFsnbWlsaycsICdmaXNoJ10sXG4gICAgICAgIHJlYXNvbjogJ0F5dXJ2ZWRpYyBpbmNvbXBhdGliaWxpdHknXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBmb29kczogWydob25leScsICdob3QgZm9vZHMnXSxcbiAgICAgICAgcmVhc29uOiAnQ3JlYXRlcyB0b3hpbnMgYWNjb3JkaW5nIHRvIEF5dXJ2ZWRhJ1xuICAgICAgfVxuICAgIF1cbiAgfSxcbiAgdmlldG5hbWVzZToge1xuICAgIGN1aXNpbmVJZDogJ3ZpZXRuYW1lc2UnLFxuICAgIHByaW5jaXBsZXM6IFtcbiAgICAgIFwiQmFsYW5jZSBvZiBmaXZlIGVsZW1lbnRzXCIsXG4gICAgICBcIkNvbWJpbmF0aW9uIG9mIGZyZXNoIGhlcmJzIGFuZCBjb29rZWQgaW5ncmVkaWVudHNcIixcbiAgICAgIFwiTGlnaHQgdG8gaGVhdnkgcHJvZ3Jlc3Npb25cIixcbiAgICAgIFwiQ29udHJhc3QgaW4gdGV4dHVyZXMgYW5kIHRlbXBlcmF0dXJlc1wiLFxuICAgICAgXCJVc2Ugb2YgZGlwcGluZyBzYXVjZXMgZm9yIHBlcnNvbmFsaXphdGlvblwiXG4gICAgXSxcbiAgICBwcmVmZXJyZWRDb21iaW5hdGlvbnM6IFtcbiAgICAgIHtcbiAgICAgICAgZm9vZHM6IFsncmljZSBub29kbGVzJywgJ2ZyZXNoIGhlcmJzJywgJ3Byb3RlaW4nXSxcbiAgICAgICAgcmVhc29uOiAnVHJhZGl0aW9uYWwgcGhvIGNvbWJpbmF0aW9uJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgZm9vZHM6IFsncmljZSBwYXBlciByb2xscycsICdkaXBwaW5nIHNhdWNlJ10sXG4gICAgICAgIHJlYXNvbjogJ0NsYXNzaWMgcGFpcmluZyBmb3IgdGV4dHVyZSBhbmQgZmxhdm9yJ1xuICAgICAgfVxuICAgIF0sXG4gICAgYXZvaWRDb21iaW5hdGlvbnM6IFtcbiAgICAgIHtcbiAgICAgICAgZm9vZHM6IFsnZHVyaWFuJywgJ2FsY29ob2wnXSxcbiAgICAgICAgcmVhc29uOiAnVHJhZGl0aW9uYWwgYmVsaWVmIG9mIG5lZ2F0aXZlIGVmZmVjdHMnXG4gICAgICB9XG4gICAgXVxuICB9LFxuICBrb3JlYW46IHtcbiAgICBjdWlzaW5lSWQ6ICdrb3JlYW4nLFxuICAgIHByaW5jaXBsZXM6IFtcbiAgICAgIFwiQmFsYW5jZSBvZiBjb2xvcnMgKG9iYW5nc2FlaylcIixcbiAgICAgIFwiRmVybWVudGVkIGZvb2Qgd2l0aCBmcmVzaCBpbmdyZWRpZW50c1wiLFxuICAgICAgXCJIYXJtb255IG9mIG1haW4gYW5kIHNpZGUgZGlzaGVzXCIsXG4gICAgICBcIlRlbXBlcmF0dXJlIGNvbnRyYXN0IGluIHNlcnZpbmdcIixcbiAgICAgIFwiTWVkaWNpbmFsIGZvb2QgcGhpbG9zb3BoeVwiXG4gICAgXSxcbiAgICBwcmVmZXJyZWRDb21iaW5hdGlvbnM6IFtcbiAgICAgIHtcbiAgICAgICAgZm9vZHM6IFsncmljZScsICdraW1jaGknLCAnc291cCddLFxuICAgICAgICByZWFzb246ICdUcmFkaXRpb25hbCBLb3JlYW4gbWVhbCBzdHJ1Y3R1cmUnXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBmb29kczogWydncmlsbGVkIG1lYXQnLCAnbGV0dHVjZSB3cmFwcycsICdzc2FtamFuZyddLFxuICAgICAgICByZWFzb246ICdDbGFzc2ljIEtvcmVhbiBCQlEgY29tYmluYXRpb24nXG4gICAgICB9XG4gICAgXSxcbiAgICBhdm9pZENvbWJpbmF0aW9uczogW1xuICAgICAge1xuICAgICAgICBmb29kczogWydraW1jaGknLCAnbWlsayddLFxuICAgICAgICByZWFzb246ICdGbGF2b3IgY2xhc2ggYW5kIGRpZ2VzdGl2ZSBjb25jZXJucydcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIG1leGljYW46IHtcbiAgICBjdWlzaW5lSWQ6ICdtZXhpY2FuJyxcbiAgICBwcmluY2lwbGVzOiBbXG4gICAgICBcIkJhbGFuY2Ugb2YgaGVhdCBsZXZlbHNcIixcbiAgICAgIFwiRnJlc2ggYW5kIGNvb2tlZCBpbmdyZWRpZW50IGNvbWJpbmF0aW9uc1wiLFxuICAgICAgXCJVc2Ugb2YgYWNpZCB0byBiYWxhbmNlIHJpY2huZXNzXCIsXG4gICAgICBcIkxheWVyaW5nIG9mIGZsYXZvcnNcIixcbiAgICAgIFwiQ29tcGxlbWVudGFyeSB0ZXh0dXJlc1wiXG4gICAgXSxcbiAgICBwcmVmZXJyZWRDb21iaW5hdGlvbnM6IFtcbiAgICAgIHtcbiAgICAgICAgZm9vZHM6IFsnYmVhbnMnLCAncmljZScsICdjb3JuIHRvcnRpbGxhcyddLFxuICAgICAgICByZWFzb246ICdDb21wbGV0ZSBwcm90ZWluIGNvbWJpbmF0aW9uJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgZm9vZHM6IFsnc3BpY3kgZGlzaGVzJywgJ2NyZW1hJywgJ2xpbWUnXSxcbiAgICAgICAgcmVhc29uOiAnSGVhdCBiYWxhbmNlZCB3aXRoIGNvb2xpbmcgZWxlbWVudHMnXG4gICAgICB9XG4gICAgXSxcbiAgICBhdm9pZENvbWJpbmF0aW9uczogW1xuICAgICAge1xuICAgICAgICBmb29kczogWydmaXNoJywgJ2NoZWVzZSddLFxuICAgICAgICByZWFzb246ICdUcmFkaXRpb25hbCBmbGF2b3IgY29uZmxpY3QnXG4gICAgICB9XG4gICAgXVxuICB9XG59O1xuXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IGN1bHR1cmFsIHJlY29tbWVuZGF0aW9uc1xuZXhwb3J0IGZ1bmN0aW9uIGdldEN1bHR1cmFsUmVjb21tZW5kYXRpb25zKFxuICBjdWlzaW5lSWQ6IHN0cmluZyxcbiAgY3VycmVudERpc2hlczogc3RyaW5nW11cbik6IHsgcmVjb21tZW5kZWQ6IHN0cmluZ1tdOyBhdm9pZDogc3RyaW5nW10gfSB7XG4gIGNvbnN0IHJ1bGVzID0gY3VsdHVyYWxSdWxlc1tjdWlzaW5lSWRdO1xuICBpZiAoIXJ1bGVzKSByZXR1cm4geyByZWNvbW1lbmRlZDogW10sIGF2b2lkOiBbXSB9O1xuXG4gIGNvbnN0IHJlY29tbWVuZGVkID0gcnVsZXMucHJlZmVycmVkQ29tYmluYXRpb25zXG4gICAgLmZpbHRlcihjb21ibyA9PiBcbiAgICAgIGN1cnJlbnREaXNoZXMuc29tZShkaXNoID0+IGNvbWJvLmZvb2RzLmluY2x1ZGVzKGRpc2gpKVxuICAgIClcbiAgICAubWFwKGNvbWJvID0+IGNvbWJvLmZvb2RzLmZpbHRlcihmb29kID0+ICFjdXJyZW50RGlzaGVzLmluY2x1ZGVzKGZvb2QpKSlcbiAgICAuZmxhdCgpO1xuXG4gIGNvbnN0IGF2b2lkID0gcnVsZXMuYXZvaWRDb21iaW5hdGlvbnNcbiAgICAuZmlsdGVyKGNvbWJvID0+IFxuICAgICAgY3VycmVudERpc2hlcy5zb21lKGRpc2ggPT4gY29tYm8uZm9vZHMuaW5jbHVkZXMoZGlzaCkpXG4gICAgKVxuICAgIC5tYXAoY29tYm8gPT4gY29tYm8uZm9vZHMuZmlsdGVyKGZvb2QgPT4gIWN1cnJlbnREaXNoZXMuaW5jbHVkZXMoZm9vZCkpKVxuICAgIC5mbGF0KCk7XG5cbiAgcmV0dXJuIHsgcmVjb21tZW5kZWQsIGF2b2lkIH07XG59Il0sInZlcnNpb24iOjN9