{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/RecipeElementalService.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/RecipeElementalService.ts"],"sourcesContent":["import type { ElementalProperties } from '../types/alchemy';\nimport type { Recipe } from '../types/recipe';\nimport { elementalUtils } from '../utils/elementalUtils';\nimport { ElementalCalculator } from './ElementalCalculator';\nimport { logger } from '../utils/logger';\n\n/**\n * Service responsible for handling elemental properties of recipes\n */\nexport class RecipeElementalService {\n  private static instance: RecipeElementalService;\n\n  private constructor() {\n    // Private constructor to enforce singleton pattern\n  }\n\n  /**\n   * Get the singleton instance\n   */\n  public static getInstance(): RecipeElementalService {\n    if (!RecipeElementalService.instance) {\n      RecipeElementalService.instance = new RecipeElementalService();\n    }\n    return RecipeElementalService.instance;\n  }\n\n  /**\n   * Ensures a recipe has valid elemental properties\n   * @param recipe The recipe to standardize\n   * @returns Recipe with guaranteed elemental properties\n   */\n  public standardizeRecipe<T extends Partial<Recipe>>(recipe: T): T & { elementalProperties: ElementalProperties } {\n    try {\n      return elementalUtils.standardizeRecipeElements(recipe);\n    } catch (error) {\n      logger.error('Error standardizing recipe elements:', error);\n      // Return recipe with current elemental state if there's an error\n      return {\n        ...recipe,\n        elementalProperties: elementalUtils.getCurrentElementalState()\n      } as T & { elementalProperties: ElementalProperties };\n    }\n  }\n\n  /**\n   * Standardizes an array of recipes, ensuring they all have valid elemental properties\n   * @param recipes Array of recipes to standardize\n   * @returns Array of recipes with guaranteed elemental properties\n   */\n  public standardizeRecipes<T extends Partial<Recipe>>(recipes: T[]): Array<T & { elementalProperties: ElementalProperties }> {\n    return recipes.map(recipe => this.standardizeRecipe(recipe));\n  }\n\n  /**\n   * Calculates the dominant elemental property in a recipe\n   * @param recipe The recipe to analyze\n   * @returns The dominant element and its value\n   */\n  public getDominantElement(recipe: Recipe): { element: keyof ElementalProperties; value: number } {\n    const standardized = this.standardizeRecipe(recipe);\n    \n    let dominantElement: keyof ElementalProperties = 'Earth';\n    let highestValue = 0;\n    \n    Object.entries(standardized.elementalProperties).forEach(([element, value]) => {\n      if (value > highestValue) {\n        highestValue = value;\n        dominantElement = element as keyof ElementalProperties;\n      }\n    });\n    \n    return { element: dominantElement, value: highestValue };\n  }\n\n  /**\n   * Calculates similarity between two elemental property sets\n   * @param a First elemental property set\n   * @param b Second elemental property set\n   * @returns Similarity score (0-1)\n   */\n  public calculateSimilarity(a: ElementalProperties, b: ElementalProperties): number {\n    const elements = ['Fire', 'Water', 'Earth', 'Air'];\n    \n    // Calculate average difference across all elements\n    const totalDifference = elements.reduce((sum: number, element) => {\n      const aValue = a[element] || 0;\n      const bValue = b[element] || 0;\n      return sum + Math.abs(aValue - bValue);\n    }, 0);\n    \n    // Convert difference to similarity (1 - avg difference)\n    const avgDifference = totalDifference / elements.length;\n    \n    // Apply non-linear scaling to make smaller differences more significant\n    // This will boost low similarity scores to be more representative\n    const similarity = Math.pow(1 - avgDifference, 0.5);\n    \n    // Ensure the similarity is at least 0.05 (5%) to avoid showing extremely low percentages\n    return Math.max(similarity, 0.05);\n  }\n\n  /**\n   * Derives elemental properties based on recipe attributes if they're missing\n   * @param recipe Recipe to derive elemental properties for\n   * @returns Derived elemental properties\n   */\n  public deriveElementalProperties(recipe: Partial<Recipe>): ElementalProperties {\n    // Start with a balanced base\n    const elementalProps: ElementalProperties = {\n      Fire: 0.25,\n      Water: 0.25,\n      Earth: 0.25, \n      Air: 0.25\n    };\n    \n    try {\n      // Adjust based on cooking method - safe property access for string/string[]\n      if (recipe.cookingMethod) {\n        const methodValue = Array.isArray(recipe.cookingMethod) ? recipe.cookingMethod[0] : recipe.cookingMethod;\n        const method = (methodValue || '').toString().toLowerCase();\n        \n        if (method.includes('roast') || method.includes('grill') || method.includes('bake')) {\n          elementalProps.Fire += 0.2;\n          elementalProps.Earth += 0.05;\n          elementalProps.Water -= 0.15;\n          elementalProps.Air -= 0.1;\n        } else if (method.includes('steam') || method.includes('boil') || method.includes('poach')) {\n          elementalProps.Water += 0.2;\n          elementalProps.Fire -= 0.15;\n          elementalProps.Air += 0.05;\n          elementalProps.Earth -= 0.1;\n        } else if (method.includes('fry') || method.includes('sauté')) {\n          elementalProps.Fire += 0.15;\n          elementalProps.Air += 0.1;\n          elementalProps.Water -= 0.15;\n          elementalProps.Earth -= 0.1;\n        } else if (method.includes('raw') || method.includes('fresh')) {\n          elementalProps.Water += 0.1;\n          elementalProps.Earth += 0.1;\n          elementalProps.Fire -= 0.2;\n        }\n      }\n      \n      // Adjust based on cuisine\n      if (recipe.cuisine) {\n        const cuisine = recipe.cuisine.toLowerCase();\n        \n        if (['mexican', 'thai', 'indian', 'cajun', 'szechuan'].includes(cuisine)) {\n          // Spicy cuisines - more Fire\n          elementalProps.Fire += 0.1;\n          elementalProps.Air += 0.05;\n          elementalProps.Water -= 0.1;\n          elementalProps.Earth -= 0.05;\n        } else if (['japanese', 'korean', 'cantonese'].includes(cuisine)) {\n          // Balanced cuisines\n          elementalProps.Water += 0.1;\n          elementalProps.Air += 0.05;\n          elementalProps.Fire -= 0.1;\n          elementalProps.Earth -= 0.05;\n        } else if (['french', 'italian', 'spanish'].includes(cuisine)) {\n          // Mediterranean cuisines\n          elementalProps.Earth += 0.1;\n          elementalProps.Fire += 0.05;\n          elementalProps.Water -= 0.05;\n          elementalProps.Air -= 0.1;\n        } else if (['german', 'russian', 'english', 'scandinavian'].includes(cuisine)) {\n          // Northern cuisines\n          elementalProps.Earth += 0.15;\n          elementalProps.Water += 0.05;\n          elementalProps.Fire -= 0.1;\n          elementalProps.Air -= 0.1;\n        }\n      }\n\n      // Consider ingredients if available\n      if (recipe.ingredients && recipe.ingredients.length > 0) {\n        // Create a new object for ingredient properties\n        const ingredientProps: ElementalProperties = {\n          Fire: 0,\n          Water: 0,\n          Earth: 0,\n          Air: 0\n        };\n        \n        // Process ingredients with elemental properties\n        let ingredientCount = 0;\n        recipe.ingredients.forEach(ingredient => {\n          if (ingredient.elementalProperties) {\n            // Get values from each element, guarding against undefined values\n            ingredientProps.Fire += ingredient.elementalProperties.Fire || 0;\n            ingredientProps.Water += ingredient.elementalProperties.Water || 0;\n            ingredientProps.Earth += ingredient.elementalProperties.Earth || 0;\n            ingredientProps.Air += ingredient.elementalProperties.Air || 0;\n            ingredientCount++;\n          }\n        });\n        \n        // Average ingredient properties if we found any\n        if (ingredientCount > 0) {\n          ingredientProps.Fire /= ingredientCount;\n          ingredientProps.Water /= ingredientCount;\n          ingredientProps.Earth /= ingredientCount;\n          ingredientProps.Air /= ingredientCount;\n          \n          // Blend with method/cuisine derived properties\n          return elementalUtils.combineProperties(elementalProps, ingredientProps, 0.7);\n        }\n      }\n    } catch (error) {\n      logger.error('Error deriving elemental properties', error);\n    }\n    \n    // Normalize to ensure values sum to 1\n    return elementalUtils.normalizeProperties(elementalProps);\n  }\n}\n\n// Export singleton instance\nexport const recipeElementalService = RecipeElementalService.getInstance(); "],"version":3}