e2fa6b00ebeec49abbff5bd236125691
"use strict";
/**
 * Test-Safe Progress Tracker
 *
 * Memory-efficient progress tracking system designed specifically for test environments.
 * Prevents memory leaks and provides controlled progress simulation.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestSafeProgressTracker = void 0;
const campaign_1 = require("../../types/campaign");
const TestMemoryMonitor_1 = require("./TestMemoryMonitor");
/**
 * Test-safe progress tracker that prevents memory leaks and provides
 * controlled progress simulation for testing campaign systems.
 */
class TestSafeProgressTracker {
    config;
    memoryMonitor = null;
    progressHistory = [];
    currentMetrics;
    isTracking = false;
    trackingStartTime = 0;
    progressUpdateTimer = null;
    memoryCheckCounter = 0;
    constructor(config) {
        this.config = {
            maxHistorySize: 20,
            memoryCheckFrequency: 5,
            enableMemoryMonitoring: true,
            simulateRealProgress: false,
            progressUpdateInterval: 1000,
            ...config,
        };
        this.currentMetrics = this.createInitialMetrics();
        if (this.config.enableMemoryMonitoring) {
            this.memoryMonitor = new TestMemoryMonitor_1.TestMemoryMonitor({
                heapUsed: 50 * 1024 * 1024,
                heapTotal: 100 * 1024 * 1024,
                external: 25 * 1024 * 1024,
                rss: 150 * 1024 * 1024, // 150MB
            });
        }
    }
    /**
     * Start progress tracking with memory monitoring
     */
    startTracking(testName) {
        if (this.isTracking) {
            console.warn('Progress tracking already active');
            return;
        }
        this.isTracking = true;
        this.trackingStartTime = Date.now();
        if (this.memoryMonitor) {
            this.memoryMonitor.takeSnapshot(`tracking-start-${testName || 'unknown'}`);
        }
        // Take initial snapshot
        this.takeProgressSnapshot(`start-${testName || 'tracking'}`);
        // Start simulated progress updates if enabled
        if (this.config.simulateRealProgress) {
            this.startProgressSimulation();
        }
        console.log(`Test-safe progress tracking started${testName ? ` for ${testName}` : ''}`);
    }
    /**
     * Stop progress tracking and perform cleanup
     */
    stopTracking(testName) {
        if (!this.isTracking) {
            return;
        }
        this.isTracking = false;
        // Stop progress simulation
        if (this.progressUpdateTimer) {
            clearInterval(this.progressUpdateTimer);
            this.progressUpdateTimer = null;
        }
        // Take final snapshot
        this.takeProgressSnapshot(`stop-${testName || 'tracking'}`);
        // Perform memory cleanup
        this.performMemoryCleanup(testName);
        console.log(`Test-safe progress tracking stopped${testName ? ` for ${testName}` : ''}`);
    }
    /**
     * Get current progress metrics without running actual measurements
     */
    async getProgressMetrics() {
        this.checkMemoryPeriodically();
        return { ...this.currentMetrics };
    }
    /**
     * Update progress metrics for testing scenarios
     */
    updateMetrics(updates, testName) {
        // Deep merge the updates
        this.currentMetrics = this.deepMergeMetrics(this.currentMetrics, updates);
        // Take snapshot of the update
        this.takeProgressSnapshot(`update-${testName || 'manual'}`);
        this.checkMemoryPeriodically();
    }
    /**
     * Simulate progress over time for realistic testing
     */
    simulateProgress(targetMetrics, durationMs, testName) {
        return new Promise(resolve => {
            const UNUSED_startTime = Date.now();
            const startMetrics = { ...this.currentMetrics };
            const steps = Math.max(1, Math.floor(durationMs / 100)); // Update every 100ms
            let currentStep = 0;
            const progressInterval = setInterval(() => {
                currentStep++;
                const progress = Math.min(1, currentStep / steps);
                // Interpolate between start and target metrics
                const interpolatedMetrics = this.interpolateMetrics(startMetrics, targetMetrics, progress);
                this.currentMetrics = interpolatedMetrics;
                this.takeProgressSnapshot(`simulate-step-${currentStep}-${testName || 'auto'}`);
                if (currentStep >= steps) {
                    clearInterval(progressInterval);
                    resolve();
                }
            }, 100);
        });
    }
    /**
     * Generate test-safe progress report
     */
    async generateProgressReport(testName) {
        const currentMetrics = await this.getProgressMetrics();
        const targetMetrics = this.createTargetMetrics();
        // Calculate overall progress
        const overallProgress = this.calculateOverallProgress(currentMetrics, targetMetrics);
        // Generate mock phase reports
        const phases = [
            {
                phaseId: 'test-phase-1',
                phaseName: 'Test Phase 1',
                startTime: new Date(this.trackingStartTime),
                status: campaign_1.PhaseStatus.COMPLETED,
                metrics: currentMetrics,
                achievements: this.generateMockAchievements(currentMetrics),
                issues: this.generateMockIssues(currentMetrics),
                recommendations: this.generateMockRecommendations(currentMetrics),
            },
        ];
        const report = {
            campaignId: `test-campaign-${testName || 'default'}`,
            overallProgress,
            phases,
            currentMetrics,
            targetMetrics,
            estimatedCompletion: new Date(Date.now() + 3600000), // 1 hour from now
        };
        // Take snapshot for report generation
        this.takeProgressSnapshot(`report-${testName || 'generated'}`);
        return report;
    }
    /**
     * Get progress history with memory-safe access
     */
    getProgressHistory() {
        return [...this.progressHistory]; // Return copy to prevent external modification
    }
    /**
     * Get memory usage statistics
     */
    getMemoryStatistics() {
        if (!this.memoryMonitor) {
            return null;
        }
        const summary = this.memoryMonitor.getMemorySummary();
        return {
            currentUsage: `${summary.currentMemory.toFixed(2)}MB`,
            peakUsage: `${summary.peakMemory.toFixed(2)}MB`,
            snapshotCount: Math.floor(summary.testDuration / 1000),
            memoryEfficient: summary.totalIncrease < 25, // Less than 25MB increase is efficient
        };
    }
    /**
     * Validate progress tracking state
     */
    validateTrackingState() {
        const errors = [];
        const warnings = [];
        // Check memory usage
        if (this.memoryMonitor) {
            const memoryCheck = this.memoryMonitor.checkMemoryUsage('validation');
            errors.push(...memoryCheck.errors);
            warnings.push(...memoryCheck.warnings);
        }
        // Check history size
        if (this.progressHistory.length > this.config.maxHistorySize) {
            warnings.push(`Progress history size (${this.progressHistory.length}) exceeds maximum (${this.config.maxHistorySize})`);
        }
        // Check for tracking consistency
        if (this.isTracking && this.trackingStartTime === 0) {
            errors.push('Tracking is active but start time is not set');
        }
        return {
            success: errors.length === 0,
            errors,
            warnings,
        };
    }
    /**
     * Reset tracker state for clean test isolation
     */
    reset() {
        // Stop any active tracking
        if (this.isTracking) {
            this.stopTracking('reset');
        }
        // Clear history
        this.progressHistory = [];
        // Reset metrics
        this.currentMetrics = this.createInitialMetrics();
        // Reset counters
        this.memoryCheckCounter = 0;
        this.trackingStartTime = 0;
        // Reset memory monitor
        if (this.memoryMonitor) {
            this.memoryMonitor = new TestMemoryMonitor_1.TestMemoryMonitor({
                heapUsed: 50 * 1024 * 1024,
                heapTotal: 100 * 1024 * 1024,
                external: 25 * 1024 * 1024,
                rss: 150 * 1024 * 1024, // 150MB
            });
        }
        console.log('Test-safe progress tracker reset');
    }
    /**
     * Cleanup resources and prevent memory leaks
     */
    cleanup() {
        // Stop tracking if active
        if (this.isTracking) {
            this.stopTracking('cleanup');
        }
        // Clear all timers
        if (this.progressUpdateTimer) {
            clearInterval(this.progressUpdateTimer);
            this.progressUpdateTimer = null;
        }
        // Clear history
        this.progressHistory = [];
        // Cleanup memory monitor
        if (this.memoryMonitor) {
            this.memoryMonitor.cleanup('tracker-cleanup');
        }
        console.log('Test-safe progress tracker cleaned up');
    }
    // Private helper methods
    takeProgressSnapshot(testName) {
        const snapshot = {
            timestamp: Date.now(),
            metrics: { ...this.currentMetrics },
            testName,
            memoryUsage: this.memoryMonitor ? process.memoryUsage().heapUsed : undefined,
        };
        this.progressHistory.push(snapshot);
        // Maintain history size limit to prevent memory issues
        if (this.progressHistory.length > this.config.maxHistorySize) {
            const excessCount = this.progressHistory.length - this.config.maxHistorySize;
            this.progressHistory.splice(0, excessCount);
        }
    }
    checkMemoryPeriodically() {
        this.memoryCheckCounter++;
        if (this.memoryCheckCounter % this.config.memoryCheckFrequency === 0 && this.memoryMonitor) {
            const memoryCheck = this.memoryMonitor.checkMemoryUsage(`periodic-${this.memoryCheckCounter}`);
            if (!memoryCheck.isWithinLimits) {
                console.warn('Memory check failed in progress tracker:', memoryCheck.errors);
                this.performMemoryCleanup('periodic-check');
            }
        }
    }
    performMemoryCleanup(reason) {
        // Trim progress history
        if (this.progressHistory.length > this.config.maxHistorySize / 2) {
            const keepCount = Math.floor(this.config.maxHistorySize / 2);
            this.progressHistory = this.progressHistory.slice(-keepCount);
        }
        // Force memory cleanup if monitor is available
        if (this.memoryMonitor) {
            this.memoryMonitor.cleanup(reason || 'progress-tracker-cleanup');
        }
        // Force garbage collection if available
        if (global.gc) {
            try {
                global.gc();
            }
            catch (error) {
                console.warn('Failed to force garbage collection:', error);
            }
        }
    }
    startProgressSimulation() {
        if (this.progressUpdateTimer) {
            return;
        }
        this.progressUpdateTimer = setInterval(() => {
            // Simulate small progress increments
            const updates = {
                typeScriptErrors: {
                    ...this.currentMetrics.typeScriptErrors,
                    current: Math.max(0, this.currentMetrics.typeScriptErrors.current - 1),
                },
                lintingWarnings: {
                    ...this.currentMetrics.lintingWarnings,
                    current: Math.max(0, this.currentMetrics.lintingWarnings.current - 5),
                },
            };
            this.updateMetrics(updates, 'simulation');
        }, this.config.progressUpdateInterval);
    }
    createInitialMetrics() {
        return {
            typeScriptErrors: {
                current: 86,
                target: 0,
                reduction: 0,
                percentage: 0,
            },
            lintingWarnings: {
                current: 4506,
                target: 0,
                reduction: 0,
                percentage: 0,
            },
            buildPerformance: {
                currentTime: 12.5,
                targetTime: 10,
                cacheHitRate: 0.6,
                memoryUsage: 60,
            },
            enterpriseSystems: {
                current: 0,
                target: 200,
                transformedExports: 0,
            },
        };
    }
    createTargetMetrics() {
        return {
            typeScriptErrors: {
                current: 0,
                target: 0,
                reduction: 86,
                percentage: 100,
            },
            lintingWarnings: {
                current: 0,
                target: 0,
                reduction: 4506,
                percentage: 100,
            },
            buildPerformance: {
                currentTime: 8,
                targetTime: 10,
                cacheHitRate: 0.8,
                memoryUsage: 45,
            },
            enterpriseSystems: {
                current: 200,
                target: 200,
                transformedExports: 200,
            },
        };
    }
    deepMergeMetrics(current, updates) {
        const result = { ...current };
        Object.keys(updates).forEach(key => {
            const updateValue = updates[key];
            if (updateValue && typeof updateValue === 'object') {
                result[key] = {
                    ...current[key],
                    ...updateValue,
                };
            }
        });
        return result;
    }
    interpolateMetrics(start, target, progress) {
        const result = { ...start };
        // Interpolate TypeScript errors
        if (target.typeScriptErrors?.current !== undefined) {
            const startValue = start.typeScriptErrors.current;
            const targetValue = target.typeScriptErrors.current;
            result.typeScriptErrors.current = Math.round(startValue + (targetValue - startValue) * progress);
        }
        // Interpolate linting warnings
        if (target.lintingWarnings?.current !== undefined) {
            const startValue = start.lintingWarnings.current;
            const targetValue = target.lintingWarnings.current;
            result.lintingWarnings.current = Math.round(startValue + (targetValue - startValue) * progress);
        }
        return result;
    }
    calculateOverallProgress(current, target) {
        const tsProgress = target.typeScriptErrors.current === 0 ? (1 - current.typeScriptErrors.current / 86) * 100 : 0;
        const lintProgress = target.lintingWarnings.current === 0 ? (1 - current.lintingWarnings.current / 4506) * 100 : 0;
        const buildProgress = current.buildPerformance.currentTime <= target.buildPerformance.currentTime ? 100 : 0;
        const enterpriseProgress = (current.enterpriseSystems.current / target.enterpriseSystems.current) * 100;
        return Math.round((tsProgress + lintProgress + buildProgress + enterpriseProgress) / 4);
    }
    generateMockAchievements(metrics) {
        const achievements = [];
        if (metrics.typeScriptErrors.current === 0) {
            achievements.push('Zero TypeScript errors achieved');
        }
        if (metrics.lintingWarnings.current === 0) {
            achievements.push('Zero linting warnings achieved');
        }
        if (metrics.buildPerformance.currentTime <= 10) {
            achievements.push('Build time under 10 seconds');
        }
        return achievements;
    }
    generateMockIssues(metrics) {
        const issues = [];
        if (metrics.typeScriptErrors.current > 0) {
            issues.push(`${metrics.typeScriptErrors.current} TypeScript errors remaining`);
        }
        if (metrics.lintingWarnings.current > 1000) {
            issues.push(`High linting warning count: ${metrics.lintingWarnings.current}`);
        }
        return issues;
    }
    generateMockRecommendations(metrics) {
        const recommendations = [];
        if (metrics.typeScriptErrors.current > 0) {
            recommendations.push('Continue with TypeScript error elimination');
        }
        if (metrics.lintingWarnings.current > 0) {
            recommendations.push('Apply systematic linting fixes');
        }
        return recommendations;
    }
}
exports.TestSafeProgressTracker = TestSafeProgressTracker;
exports.default = TestSafeProgressTracker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,