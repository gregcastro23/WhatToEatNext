{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/naturalLanguageProcessor.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/naturalLanguageProcessor.ts"],"sourcesContent":["/**\n * Natural Language Processing utility for advanced search\n * Processes user queries and extracts search intent and filters\n */\n\nimport { SearchFilters } from '@/components/AdvancedSearchFilters';\n\n// ========== INTERFACES ==========\n\nexport interface SearchIntent {\n  query: string;\n  extractedFilters: Partial<SearchFilters>;\n  confidence: number;\n  suggestions: string[];\n}\n\nexport interface KeywordPattern {\n  keywords: string[];\n  category: keyof SearchFilters;\n  values: string[];\n  weight: number;\n}\n\n// ========== CONSTANTS ==========\n\nconst DIETARY_KEYWORDS: KeywordPattern[] = [\n  {\n    keywords: ['vegetarian', 'veggie', 'no meat'],\n    category: 'dietaryRestrictions',\n    values: ['vegetarian'],\n    weight: 0.9\n  },\n  {\n    keywords: ['vegan', 'plant based', 'no dairy', 'no animal products'],\n    category: 'dietaryRestrictions',\n    values: ['vegan'],\n    weight: 0.9\n  },\n  {\n    keywords: ['gluten free', 'no gluten', 'celiac'],\n    category: 'dietaryRestrictions',\n    values: ['gluten-free'],\n    weight: 0.9\n  },\n  {\n    keywords: ['dairy free', 'lactose free', 'no dairy'],\n    category: 'dietaryRestrictions',\n    values: ['dairy-free'],\n    weight: 0.9\n  },\n  {\n    keywords: ['nut free', 'no nuts', 'allergy'],\n    category: 'dietaryRestrictions',\n    values: ['nut-free'],\n    weight: 0.8\n  },\n  {\n    keywords: ['low carb', 'keto', 'ketogenic'],\n    category: 'dietaryRestrictions',\n    values: ['low-carb', 'keto'],\n    weight: 0.8\n  },\n  {\n    keywords: ['paleo', 'paleolithic'],\n    category: 'dietaryRestrictions',\n    values: ['paleo'],\n    weight: 0.8\n  },\n  {\n    keywords: ['halal'],\n    category: 'dietaryRestrictions',\n    values: ['halal'],\n    weight: 0.9\n  },\n  {\n    keywords: ['kosher'],\n    category: 'dietaryRestrictions',\n    values: ['kosher'],\n    weight: 0.9\n  }\n];\n\nconst DIFFICULTY_KEYWORDS: KeywordPattern[] = [\n  {\n    keywords: ['easy', 'simple', 'quick', 'beginner'],\n    category: 'difficultyLevel',\n    values: ['easy', 'beginner'],\n    weight: 0.8\n  },\n  {\n    keywords: ['hard', 'difficult', 'complex', 'advanced', 'expert'],\n    category: 'difficultyLevel',\n    values: ['hard', 'expert'],\n    weight: 0.8\n  },\n  {\n    keywords: ['medium', 'intermediate', 'moderate'],\n    category: 'difficultyLevel',\n    values: ['medium'],\n    weight: 0.7\n  }\n];\n\nconst TIME_KEYWORDS: KeywordPattern[] = [\n  {\n    keywords: ['quick', 'fast', 'under 30', 'less than 30', '30 minutes'],\n    category: 'cookingTime',\n    values: ['0-30'],\n    weight: 0.8\n  },\n  {\n    keywords: ['1 hour', 'one hour', '60 minutes'],\n    category: 'cookingTime',\n    values: ['30-60'],\n    weight: 0.8\n  },\n  {\n    keywords: ['long', 'slow', '2 hours', 'extended'],\n    category: 'cookingTime',\n    values: ['60-120'],\n    weight: 0.7\n  }\n];\n\nconst CUISINE_KEYWORDS: KeywordPattern[] = [\n  {\n    keywords: ['italian', 'pasta', 'pizza', 'mediterranean'],\n    category: 'cuisineTypes',\n    values: ['italian'],\n    weight: 0.9\n  },\n  {\n    keywords: ['chinese', 'asian', 'stir fry', 'wok'],\n    category: 'cuisineTypes',\n    values: ['chinese'],\n    weight: 0.9\n  },\n  {\n    keywords: ['japanese', 'sushi', 'ramen', 'miso'],\n    category: 'cuisineTypes',\n    values: ['japanese'],\n    weight: 0.9\n  },\n  {\n    keywords: ['indian', 'curry', 'spicy', 'masala'],\n    category: 'cuisineTypes',\n    values: ['indian'],\n    weight: 0.9\n  },\n  {\n    keywords: ['thai', 'pad thai', 'coconut'],\n    category: 'cuisineTypes',\n    values: ['thai'],\n    weight: 0.9\n  },\n  {\n    keywords: ['mexican', 'tacos', 'salsa', 'beans'],\n    category: 'cuisineTypes',\n    values: ['mexican'],\n    weight: 0.9\n  },\n  {\n    keywords: ['french', 'wine', 'butter', 'cream'],\n    category: 'cuisineTypes',\n    values: ['french'],\n    weight: 0.8\n  }\n];\n\nconst MEAL_KEYWORDS: KeywordPattern[] = [\n  {\n    keywords: ['breakfast', 'morning', 'brunch'],\n    category: 'mealTypes',\n    values: ['breakfast'],\n    weight: 0.9\n  },\n  {\n    keywords: ['lunch', 'midday', 'noon'],\n    category: 'mealTypes',\n    values: ['lunch'],\n    weight: 0.9\n  },\n  {\n    keywords: ['dinner', 'evening', 'supper'],\n    category: 'mealTypes',\n    values: ['dinner'],\n    weight: 0.9\n  },\n  {\n    keywords: ['snack', 'appetizer', 'starter'],\n    category: 'mealTypes',\n    values: ['snack', 'appetizer'],\n    weight: 0.8\n  },\n  {\n    keywords: ['dessert', 'sweet', 'cake', 'cookie'],\n    category: 'mealTypes',\n    values: ['dessert'],\n    weight: 0.8\n  }\n];\n\nconst SPICE_KEYWORDS: KeywordPattern[] = [\n  {\n    keywords: ['mild', 'not spicy', 'no heat'],\n    category: 'spiciness',\n    values: ['mild'],\n    weight: 0.8\n  },\n  {\n    keywords: ['spicy', 'hot', 'chili', 'pepper'],\n    category: 'spiciness',\n    values: ['hot'],\n    weight: 0.8\n  },\n  {\n    keywords: ['very hot', 'extremely spicy', 'fire'],\n    category: 'spiciness',\n    values: ['very-hot'],\n    weight: 0.9\n  }\n];\n\nconst ALL_PATTERNS = [\n  ...DIETARY_KEYWORDS,\n  ...DIFFICULTY_KEYWORDS,\n  ...TIME_KEYWORDS,\n  ...CUISINE_KEYWORDS,\n  ...MEAL_KEYWORDS,\n  ...SPICE_KEYWORDS\n];\n\n// ========== UTILITY FUNCTIONS ==========\n\n/**\n * Normalize text for better matching\n */\nfunction normalizeText(text: string): string {\n  return text\n    .toLowerCase()\n    .replace(/[^\\w\\s]/g, ' ')\n    .replace(/\\s+/g, ' ')\n    .trim();\n}\n\n/**\n * Calculate similarity between two strings using Levenshtein distance\n */\nfunction calculateSimilarity(str1: string, str2: string): number {\n  const len1 = str1.length;\n  const len2 = str2.length;\n  \n  if (len1 === 0) return len2;\n  if (len2 === 0) return len1;\n  \n  const matrix = Array(len2 + 1).fill(null).map(() => Array(len1 + 1).fill(null));\n  \n  for (let i = 0; i <= len1; i++) matrix[0][i] = i;\n  for (let j = 0; j <= len2; j++) matrix[j][0] = j;\n  \n  for (let j = 1; j <= len2; j++) {\n    for (let i = 1; i <= len1; i++) {\n      const cost = str1[i - 1] === str2[j - 1] ? 0 : 1;\n      matrix[j][i] = Math.min(\n        matrix[j][i - 1] + 1,\n        matrix[j - 1][i] + 1,\n        matrix[j - 1][i - 1] + cost\n      );\n    }\n  }\n  \n  const maxLen = Math.max(len1, len2);\n  return (maxLen - matrix[len2][len1]) / maxLen;\n}\n\n/**\n * Extract time range from query\n */\nfunction extractTimeRange(query: string): { min: number; max: number } | null {\n  const timePatterns = [\n    { pattern: /(\\d+)\\s*(?:minutes?|mins?)/i, multiplier: 1 },\n    { pattern: /(\\d+)\\s*(?:hours?|hrs?)/i, multiplier: 60 },\n    { pattern: /under\\s*(\\d+)/i, max: true },\n    { pattern: /less\\s*than\\s*(\\d+)/i, max: true },\n    { pattern: /more\\s*than\\s*(\\d+)/i, min: true },\n    { pattern: /over\\s*(\\d+)/i, min: true }\n  ];\n  \n  for (const { pattern, multiplier = 1, max, min } of timePatterns) {\n    const match = query.match(pattern);\n    if (match) {\n      const value = parseInt(match[1]) * multiplier;\n      if (max) return { min: 0, max: value };\n      if (min) return { min: value, max: 480 };\n      return { min: value - 15, max: value + 15 };\n    }\n  }\n  \n  return null;\n}\n\n/**\n * Generate search suggestions based on partial query\n */\nfunction generateSuggestions(query: string): string[] {\n  const normalizedQuery = normalizeText(query);\n  const suggestions: Array<{ text: string; score: number }> = [];\n  \n  // Common cuisine suggestions\n  const cuisineSuggestions = [\n    'Italian pasta dishes',\n    'Spicy Indian curry',\n    'Quick Chinese stir-fry',\n    'Healthy Mediterranean salad',\n    'Easy Japanese ramen',\n    'Mexican tacos and burritos',\n    'French comfort food',\n    'Thai coconut curry'\n  ];\n  \n  // Dietary suggestions\n  const dietarySuggestions = [\n    'Vegetarian dinner recipes',\n    'Vegan breakfast ideas',\n    'Gluten-free desserts',\n    'Keto-friendly meals',\n    'Dairy-free options'\n  ];\n  \n  // Time-based suggestions\n  const timeSuggestions = [\n    'Quick 30-minute meals',\n    'Easy weeknight dinners',\n    'Slow-cooked comfort food',\n    'Fast breakfast ideas'\n  ];\n  \n  const allSuggestions = [...cuisineSuggestions, ...dietarySuggestions, ...timeSuggestions];\n  \n  for (const suggestion of allSuggestions) {\n    const similarity = calculateSimilarity(normalizedQuery, normalizeText(suggestion));\n    if (similarity > 0.3 || suggestion.toLowerCase().includes(normalizedQuery)) {\n      suggestions.push({ text: suggestion, score: similarity });\n    }\n  }\n  \n  return suggestions\n    .sort((a, b) => b.score - a.score)\n    .slice(0, 5)\n    .map(s => s.text);\n}\n\n// ========== MAIN FUNCTIONS ==========\n\n/**\n * Process natural language query and extract search intent\n */\nexport function processNaturalLanguageQuery(query: string): SearchIntent {\n  const normalizedQuery = normalizeText(query);\n  const extractedFilters: Partial<SearchFilters> = {};\n  let totalConfidence = 0;\n  let matchCount = 0;\n  \n  // Process each pattern category\n  for (const pattern of ALL_PATTERNS) {\n    for (const keyword of pattern.keywords) {\n      const similarity = calculateSimilarity(normalizedQuery, keyword);\n      const containsKeyword = normalizedQuery.includes(keyword);\n      \n      if (similarity > 0.7 || containsKeyword) {\n        const confidence = containsKeyword ? pattern.weight : similarity * pattern.weight;\n        \n        if (!extractedFilters[pattern.category]) {\n          extractedFilters[pattern.category] = [] as any;\n        }\n        \n        // Add values to the appropriate filter category\n        if (pattern.category === 'cookingTime') {\n          const timeRange = extractTimeRange(query) || { min: 0, max: 30 };\n          extractedFilters[pattern.category] = timeRange as any;\n        } else if (Array.isArray(extractedFilters[pattern.category])) {\n          const currentArray = extractedFilters[pattern.category] as string[];\n          for (const value of pattern.values) {\n            if (!currentArray.includes(value)) {\n              currentArray.push(value);\n            }\n          }\n        }\n        \n        totalConfidence += confidence;\n        matchCount++;\n        break; // Move to next pattern after first match\n      }\n    }\n  }\n  \n  // Extract specific time ranges\n  const timeRange = extractTimeRange(query);\n  if (timeRange) {\n    extractedFilters.cookingTime = timeRange;\n    totalConfidence += 0.8;\n    matchCount++;\n  }\n  \n  // Calculate overall confidence\n  const overallConfidence = matchCount > 0 ? Math.min(totalConfidence / matchCount, 1) : 0;\n  \n  // Generate suggestions\n  const suggestions = generateSuggestions(query);\n  \n  // Clean query by removing matched keywords\n  let cleanedQuery = normalizedQuery;\n  for (const pattern of ALL_PATTERNS) {\n    for (const keyword of pattern.keywords) {\n      cleanedQuery = cleanedQuery.replace(new RegExp(keyword, 'gi'), '').trim();\n    }\n  }\n  cleanedQuery = cleanedQuery.replace(/\\s+/g, ' ').trim();\n  \n  return {\n    query: cleanedQuery || query,\n    extractedFilters,\n    confidence: overallConfidence,\n    suggestions\n  };\n}\n\n/**\n * Enhanced search with fuzzy matching\n */\nexport function enhancedSearch(\n  items: any[],\n  query: string,\n  searchFields: string[] = ['name', 'description']\n): any[] {\n  if (!query.trim()) return items;\n  \n  const normalizedQuery = normalizeText(query);\n  const queryWords = normalizedQuery.split(' ').filter(word => word.length > 0);\n  \n  return items\n    .map(item => {\n      let totalScore = 0;\n      let matchCount = 0;\n      \n      for (const field of searchFields) {\n        const fieldValue = item[field];\n        if (typeof fieldValue === 'string') {\n          const normalizedField = normalizeText(fieldValue);\n          \n          // Exact match bonus\n          if (normalizedField.includes(normalizedQuery)) {\n            totalScore += 1.0;\n            matchCount++;\n            continue;\n          }\n          \n          // Word-by-word matching\n          for (const word of queryWords) {\n            if (normalizedField.includes(word)) {\n              totalScore += 0.7;\n              matchCount++;\n            } else {\n              // Fuzzy matching for individual words\n              const words = normalizedField.split(' ');\n              for (const fieldWord of words) {\n                const similarity = calculateSimilarity(word, fieldWord);\n                if (similarity > 0.6) {\n                  totalScore += similarity * 0.5;\n                  matchCount++;\n                }\n              }\n            }\n          }\n        }\n      }\n      \n      const averageScore = matchCount > 0 ? totalScore / matchCount : 0;\n      return { ...item, searchScore: averageScore };\n    })\n    .filter(item => item.searchScore > 0.3)\n    .sort((a, b) => b.searchScore - a.searchScore);\n}\n\n/**\n * Apply filters to items\n */\nexport function applyFilters(items: any[], filters: SearchFilters): any[] {\n  return items.filter(item => {\n    // Dietary restrictions\n    if (filters.dietaryRestrictions.length > 0) {\n      const itemDietary = item.dietaryRestrictions || [];\n      const hasRequiredDietary = filters.dietaryRestrictions.every(restriction =>\n        itemDietary.includes(restriction) || \n        (item.tags && item.tags.includes(restriction))\n      );\n      if (!hasRequiredDietary) return false;\n    }\n    \n    // Difficulty level\n    if (filters.difficultyLevel.length > 0) {\n      const itemDifficulty = item.difficulty || item.difficultyLevel || 'medium';\n      if (!filters.difficultyLevel.includes(itemDifficulty.toLowerCase())) return false;\n    }\n    \n    // Cooking time\n    if (filters.cookingTime.min > 0 || filters.cookingTime.max < 480) {\n      const cookTime = parseInt(item.cookTime || item.cookingTime || '30');\n      if (cookTime < filters.cookingTime.min || cookTime > filters.cookingTime.max) return false;\n    }\n    \n    // Cuisine types\n    if (filters.cuisineTypes.length > 0) {\n      const itemCuisine = (item.cuisine || item.cuisineType || '').toLowerCase();\n      if (!filters.cuisineTypes.some(cuisine => itemCuisine.includes(cuisine))) return false;\n    }\n    \n    // Meal types\n    if (filters.mealTypes.length > 0) {\n      const itemMealType = (item.mealType || item.category || '').toLowerCase();\n      if (!filters.mealTypes.some(meal => itemMealType.includes(meal))) return false;\n    }\n    \n    // Spiciness\n    if (filters.spiciness.length > 0) {\n      const itemSpiciness = (item.spiciness || item.spiceLevel || 'mild').toLowerCase();\n      if (!filters.spiciness.includes(itemSpiciness)) return false;\n    }\n    \n    return true;\n  });\n}"],"version":3}