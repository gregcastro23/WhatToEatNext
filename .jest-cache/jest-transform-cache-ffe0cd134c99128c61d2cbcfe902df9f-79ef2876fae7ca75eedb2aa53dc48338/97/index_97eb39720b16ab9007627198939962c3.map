{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/data/recipes/index.ts","mappings":";;;;;;AAAA,2DAAkC;AAIzB,kBAJF,kBAAO,CAIE;AAFhB,wCAAkF;AA6BzC,qGA7BR,8BAA4B,OA6BA;AAzB7D,yDAAyD;AACzD,MAAM,qBAAqB,GAAG,CAAC,QAAa,EAAE,EAAE;IAC9C,MAAM,UAAU,GAAa,EAAE,CAAC;IAEhC,+BAA+B;IAC/B,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,OAAY,EAAE,EAAE;QAC/C,IAAI,OAAO,CAAC,MAAM,EAAE;YAClB,6BAA6B;YAC7B,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,QAAa,EAAE,EAAE;gBACtD,0BAA0B;gBAC1B,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,OAAY,EAAE,EAAE;oBAC/C,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;wBAC1B,UAAU,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,CAAC;qBAC7B;gBACH,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;SACJ;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,UAAU,CAAC;AACpB,CAAC,CAAC;AAEF,iCAAiC;AACpB,QAAA,UAAU,GAAG,qBAAqB,CAAC,kBAAO,CAAC,CAAC;AACzD,wDAAwD;AAA/C,6GAAA,aAAa,OAAA","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/data/recipes/index.ts"],"sourcesContent":["import Recipes from \"../cuisines\";\nimport { Recipe } from '@/types/recipe';\nimport { getBestRecipeMatches as getBestRecipeMatchesFromMain } from '../recipes';\n\nexport { Recipes };\n\n// Create flattened list of all recipes from all cuisines\nconst flattenCuisineRecipes = (cuisines: any) => {\n  const allRecipes: Recipe[] = [];\n  \n  // Iterate through all cuisines\n  Object.values(cuisines).forEach((cuisine: any) => {\n    if (cuisine.dishes) {\n      // Iterate through meal types\n      Object.values(cuisine.dishes).forEach((mealType: any) => {\n        // Iterate through seasons\n        Object.values(mealType).forEach((recipes: any) => {\n          if (Array.isArray(recipes)) {\n            allRecipes.push(...recipes);\n          }\n        });\n      });\n    }\n  });\n  \n  return allRecipes;\n};\n\n// Export alias for compatibility\nexport const allRecipes = flattenCuisineRecipes(Recipes);\nexport { getAllRecipes } from '@/services/RecipeFinder';\nexport { getBestRecipeMatchesFromMain as getBestRecipeMatches };\n"],"version":3}