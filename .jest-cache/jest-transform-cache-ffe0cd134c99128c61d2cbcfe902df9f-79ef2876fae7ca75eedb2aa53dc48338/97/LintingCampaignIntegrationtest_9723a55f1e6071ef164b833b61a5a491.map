{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/linting/__tests__/LintingCampaignIntegration.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/linting/__tests__/LintingCampaignIntegration.test.ts"],"sourcesContent":["/**\n * Integration test for the complete linting campaign system\n *\n * Tests the integration between progress tracking, campaign execution,\n * and quality gates to ensure the system works end-to-end.\n */\n\nimport { execSync } from 'child_process';\nimport { writeFileSync, readFileSync, existsSync } from 'fs';\n\nimport { LintingCampaignIntegration } from '../LintingCampaignIntegration';\nimport { LintingProgressTracker } from '../LintingProgressTracker';\nimport { LintingQualityGates } from '../LintingQualityGates';\n\n// Mock dependencies\njest.mock('child_process');\njest.mock('fs');\njest.mock('@/utils/logger', () => ({\n  logger: {\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n    debug: jest.fn(),\n  },\n}));\n\nconst mockExecSync = execSync as jest.MockedFunction<typeof execSync>;\nconst mockWriteFileSync = writeFileSync as jest.MockedFunction<typeof writeFileSync>;\nconst mockReadFileSync = readFileSync as jest.MockedFunction<typeof readFileSync>;\nconst mockExistsSync = existsSync as jest.MockedFunction<typeof existsSync>;\n\ndescribe('Linting Campaign System Integration', () => {\n  let progressTracker: LintingProgressTracker;\n  let campaignIntegration: LintingCampaignIntegration;\n  let qualityGates: LintingQualityGates;\n\n  beforeEach(() => {\n    progressTracker = new LintingProgressTracker();\n    campaignIntegration = new LintingCampaignIntegration();\n    qualityGates = new LintingQualityGates();\n    jest.clearAllMocks();\n  });\n\n  describe('End-to-End Campaign Execution', () => {\n    test('should execute complete campaign workflow successfully', async () => {\n      // Mock initial high error state\n      const initialLintOutput = JSON.stringify([\n        {\n          filePath: '/test/file1.ts',\n          messages: [\n            { ruleId: 'no-unused-vars', severity: 2, fix: null },\n            { ruleId: 'no-console', severity: 2, fix: { range: [0, 10], text: '' } },\n            { ruleId: 'prefer-const', severity: 1, fix: { range: [0, 5], text: 'const' } },\n          ],\n        },\n      ]);\n\n      // Mock improved state after campaign\n      const improvedLintOutput = JSON.stringify([\n        {\n          filePath: '/test/file1.ts',\n          messages: [{ ruleId: 'no-unused-vars', severity: 1, fix: null }],\n        },\n      ]);\n\n      // Setup mock sequence\n      mockExecSync\n        .mockReturnValueOnce(initialLintOutput) // Initial metrics\n        .mockReturnValueOnce('') // ESLint fix\n        .mockReturnValueOnce('') // Import organization\n        .mockReturnValueOnce(improvedLintOutput) // Final metrics\n        .mockReturnValueOnce('') // TypeScript check\n        .mockReturnValueOnce(improvedLintOutput); // Quality gates\n\n      mockExistsSync.mockReturnValue(false); // No previous metrics\n\n      // Create standard campaign\n      const campaigns = campaignIntegration.createStandardCampaigns();\n      const campaign = campaigns[0];\n\n      // Execute campaign\n      await campaignIntegration.startCampaign(campaign);\n\n      // Verify campaign execution\n      expect(mockExecSync).toHaveBeenCalledWith(expect.stringContaining('yarn lint'), expect.any(Object));\n\n      // Verify metrics were collected\n      expect(mockWriteFileSync).toHaveBeenCalledWith(\n        expect.stringContaining('linting-metrics.json'),\n        expect.any(String),\n      );\n\n      // Verify campaign progress was saved\n      expect(mockWriteFileSync).toHaveBeenCalledWith(\n        expect.stringContaining('active-linting-campaign.json'),\n        expect.any(String),\n      );\n    });\n\n    test('should handle campaign phase failures gracefully', async () => {\n      const mockError = new Error('Tool execution failed');\n      mockExecSync.mockImplementation(command => {\n        if (command.toString().includes('lint:fix')) {\n          throw mockError;\n        }\n        return JSON.stringify([]);\n      });\n\n      const campaigns = campaignIntegration.createStandardCampaigns();\n      const campaign = campaigns[0];\n\n      // Campaign should complete despite tool failures\n      await expect(campaignIntegration.startCampaign(campaign)).resolves.not.toThrow();\n\n      // Verify error handling\n      expect(mockWriteFileSync).toHaveBeenCalledWith(\n        expect.stringContaining('active-linting-campaign.json'),\n        expect.stringContaining('issues'),\n      );\n    });\n  });\n\n  describe('Quality Gates Integration', () => {\n    test('should integrate quality gates with campaign progress', async () => {\n      // Mock metrics for quality gate evaluation\n      const mockLintOutput = JSON.stringify([\n        {\n          filePath: '/test/file.ts',\n          messages: [{ ruleId: 'no-unused-vars', severity: 1, fix: null }],\n        },\n      ]);\n\n      mockExecSync.mockReturnValue(mockLintOutput);\n      mockExistsSync.mockReturnValue(false);\n\n      // Evaluate quality gates\n      const gateResult = await qualityGates.evaluateQualityGates();\n\n      // Verify quality gate evaluation\n      expect(gateResult.passed).toBe(true);\n      expect(gateResult.deploymentApproved).toBe(true);\n      expect(gateResult.riskLevel).toBe('low');\n      expect(gateResult.metrics.totalIssues).toBe(1);\n      expect(gateResult.metrics.errors).toBe(0);\n      expect(gateResult.metrics.warnings).toBe(1);\n    });\n\n    test('should fail quality gates with high error count', async () => {\n      // Mock high error state\n      const mockLintOutput = JSON.stringify([\n        {\n          filePath: '/test/file.ts',\n          messages: Array.from({ length: 50 }, (_, i) => ({\n            ruleId: 'no-unused-vars',\n            severity: 2,\n            fix: null,\n          })),\n        },\n      ]);\n\n      mockExecSync.mockReturnValue(mockLintOutput);\n      mockExistsSync.mockReturnValue(false);\n\n      const gateResult = await qualityGates.evaluateQualityGates();\n\n      expect(gateResult.passed).toBe(false);\n      expect(gateResult.deploymentApproved).toBe(false);\n      expect(gateResult.riskLevel).toBe('high');\n      expect(gateResult.violations.length).toBeGreaterThan(0);\n    });\n\n    test('should assess deployment readiness correctly', async () => {\n      // Mock clean state\n      const mockLintOutput = JSON.stringify([]);\n\n      mockExecSync.mockReturnValue(mockLintOutput);\n      mockExistsSync.mockReturnValue(false);\n\n      const readiness = await qualityGates.assessDeploymentReadiness();\n\n      expect(readiness.ready).toBe(true);\n      expect(readiness.confidence).toBeGreaterThan(80);\n      expect(readiness.qualityScore).toBeGreaterThan(90);\n      expect(readiness.blockers).toHaveLength(0);\n      expect(readiness.riskAssessment.level).toBe('low');\n    });\n  });\n\n  describe('Progress Tracking Integration', () => {\n    test('should track progress across multiple campaign phases', async () => {\n      // Mock progressive improvement\n      const phase1Output = JSON.stringify([\n        {\n          filePath: '/test/file.ts',\n          messages: Array.from({ length: 10 }, () => ({ ruleId: 'error', severity: 2, fix: null })),\n        },\n      ]);\n\n      const phase2Output = JSON.stringify([\n        {\n          filePath: '/test/file.ts',\n          messages: Array.from({ length: 5 }, () => ({ ruleId: 'error', severity: 2, fix: null })),\n        },\n      ]);\n\n      const phase3Output = JSON.stringify([\n        {\n          filePath: '/test/file.ts',\n          messages: Array.from({ length: 2 }, () => ({ ruleId: 'warning', severity: 1, fix: null })),\n        },\n      ]);\n\n      mockExecSync\n        .mockReturnValueOnce(phase1Output)\n        .mockReturnValueOnce(phase2Output)\n        .mockReturnValueOnce(phase3Output);\n\n      mockExistsSync.mockReturnValue(false);\n\n      // Collect metrics at different phases\n      const phase1Metrics = await progressTracker.collectMetrics();\n      const phase2Metrics = await progressTracker.collectMetrics();\n      const phase3Metrics = await progressTracker.collectMetrics();\n\n      // Verify progressive improvement\n      expect(phase1Metrics.errors).toBe(10);\n      expect(phase2Metrics.errors).toBe(5);\n      expect(phase3Metrics.errors).toBe(0);\n      expect(phase3Metrics.warnings).toBe(2);\n\n      // Verify metrics were saved\n      expect(mockWriteFileSync).toHaveBeenCalledTimes(6); // 3 metrics + 3 history saves\n    });\n\n    test('should generate comprehensive progress reports', async () => {\n      const currentOutput = JSON.stringify([\n        { filePath: '/test/file.ts', messages: [{ ruleId: 'warning', severity: 1, fix: null }] },\n      ]);\n\n      const previousMetrics = {\n        timestamp: new Date(),\n        totalIssues: 10,\n        errors: 5,\n        warnings: 5,\n        errorsByCategory: { 'no-unused-vars': 5 },\n        warningsByCategory: { 'prefer-const': 5 },\n        filesCovered: 10,\n        fixableIssues: 8,\n        performanceMetrics: { executionTime: 5000, memoryUsage: 256, cacheHitRate: 0.8 },\n      };\n\n      mockExecSync.mockReturnValue(currentOutput);\n      mockExistsSync.mockReturnValue(true);\n      mockReadFileSync.mockReturnValue(JSON.stringify(previousMetrics));\n\n      const report = await progressTracker.generateProgressReport();\n\n      expect(report.improvement.totalIssuesReduced).toBe(9);\n      expect(report.improvement.errorsReduced).toBe(5);\n      expect(report.improvement.warningsReduced).toBe(4);\n      expect(report.improvement.percentageImprovement).toBe(90);\n      expect(report.qualityGates.zeroErrors).toBe(true);\n    });\n  });\n\n  describe('Campaign Configuration', () => {\n    test('should create standard campaign configurations', () => {\n      const campaigns = campaignIntegration.createStandardCampaigns();\n\n      expect(campaigns).toHaveLength(1);\n\n      const standardCampaign = campaigns[0];\n      expect(standardCampaign.campaignId).toBe('linting-excellence-standard');\n      expect(standardCampaign.name).toBe('Standard Linting Excellence Campaign');\n      expect(standardCampaign.phases).toHaveLength(4);\n      expect(standardCampaign.targets.maxErrors).toBe(0);\n      expect(standardCampaign.targets.maxWarnings).toBe(100);\n      expect(standardCampaign.safetyProtocols).toContain('backup-before-changes');\n    });\n\n    test('should validate campaign phase configurations', () => {\n      const campaigns = campaignIntegration.createStandardCampaigns();\n      const campaign = campaigns[0];\n\n      // Verify phase structure\n      campaign.phases.forEach(phase => {\n        expect(phase.id).toBeDefined();\n        expect(phase.name).toBeDefined();\n        expect(phase.description).toBeDefined();\n        expect(phase.tools).toBeInstanceOf(Array);\n        expect(phase.tools.length).toBeGreaterThan(0);\n        expect(phase.successCriteria).toBeDefined();\n        expect(phase.estimatedDuration).toBeGreaterThan(0);\n      });\n\n      // Verify tool availability\n      const allTools = campaign.phases.flatMap(phase => phase.tools);\n      const expectedTools = [\n        'eslint-fix',\n        'unused-imports',\n        'import-organization',\n        'explicit-any-elimination',\n        'console-cleanup',\n      ];\n\n      expectedTools.forEach(tool => {\n        expect(allTools).toContain(tool);\n      });\n    });\n  });\n\n  describe('Error Handling and Recovery', () => {\n    test('should handle ESLint execution failures gracefully', async () => {\n      const mockError = new Error('ESLint failed') as any;\n      mockError.stdout = JSON.stringify([]);\n\n      mockExecSync.mockImplementation(() => {\n        throw mockError;\n      });\n\n      // Should not throw, but return empty metrics\n      const metrics = await progressTracker.collectMetrics();\n\n      expect(metrics.totalIssues).toBe(0);\n      expect(metrics.errors).toBe(0);\n      expect(metrics.warnings).toBe(0);\n    });\n\n    test('should handle missing configuration files', async () => {\n      mockExistsSync.mockReturnValue(false);\n      mockReadFileSync.mockImplementation(() => {\n        throw new Error('File not found');\n      });\n\n      // Should handle missing files gracefully\n      const report = await progressTracker.generateProgressReport();\n\n      expect(report.previousMetrics).toBeUndefined();\n      expect(report.improvement.percentageImprovement).toBe(0);\n    });\n\n    test('should validate quality gate configurations', async () => {\n      const mockLintOutput = JSON.stringify([]);\n      mockExecSync.mockReturnValue(mockLintOutput);\n      mockExistsSync.mockReturnValue(false);\n\n      // Test with custom configuration\n      const customConfig = {\n        name: 'Custom Gate',\n        description: 'Custom quality gate',\n        thresholds: {\n          maxErrors: 5,\n          maxWarnings: 50,\n          maxExecutionTime: 30000,\n          minCacheHitRate: 80,\n          maxMemoryUsage: 256,\n        },\n        blockers: {\n          parserErrors: true,\n          typeScriptErrors: true,\n          importErrors: false,\n          securityIssues: true,\n        },\n        exemptions: {\n          files: ['test/**/*.ts'],\n          rules: ['no-console'],\n        },\n      };\n\n      const result = await qualityGates.evaluateQualityGates(customConfig);\n\n      expect(result.gateName).toBe('Custom Gate');\n      expect(result.passed).toBe(true);\n    });\n  });\n\n  describe('Performance and Scalability', () => {\n    test('should handle large codebases efficiently', async () => {\n      // Mock large codebase with many files\n      const largeOutput = JSON.stringify(\n        Array.from({ length: 100 }, (_, i) => ({\n          filePath: `/test/file${i}.ts`,\n          messages: Array.from({ length: 5 }, () => ({\n            ruleId: 'no-unused-vars',\n            severity: 1,\n            fix: null,\n          })),\n        })),\n      );\n\n      mockExecSync.mockReturnValue(largeOutput);\n      mockExistsSync.mockReturnValue(false);\n\n      const startTime = Date.now();\n      const metrics = await progressTracker.collectMetrics();\n      const executionTime = Date.now() - startTime;\n\n      expect(metrics.totalIssues).toBe(500);\n      expect(metrics.filesCovered).toBe(100);\n      expect(executionTime).toBeLessThan(5000); // Should complete within 5 seconds\n    });\n\n    test('should cache results appropriately', async () => {\n      const mockOutput = JSON.stringify([]);\n      mockExecSync.mockReturnValue(mockOutput);\n      mockExistsSync.mockReturnValue(false);\n\n      // First call\n      await progressTracker.collectMetrics();\n\n      // Second call should use cached results if available\n      await progressTracker.collectMetrics();\n\n      // Verify caching behavior through file system calls\n      expect(mockWriteFileSync).toHaveBeenCalledWith(\n        expect.stringContaining('linting-metrics.json'),\n        expect.any(String),\n      );\n    });\n  });\n});\n"],"version":3}