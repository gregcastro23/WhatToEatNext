{"file":"/Users/GregCastro/Desktop/WhatToEatNext/backups/conservative-wave-2025-08-11T05-21-33-410Z/src/services/campaign/ProgressTracker.ts","mappings":";AAAA;;;GAGG;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,iDAAyC;AACzC,uCAAyB;AAGzB,mDAO8B;AAE9B,MAAa,eAAe;IAClB,cAAc,GAAsB,EAAE,CAAC;IACvC,iBAAiB,GAAS,IAAI,IAAI,EAAE,CAAC;IAE7C;;OAEG;IACH,KAAK,CAAC,uBAAuB;QAC3B,IAAI;YACF,8DAA8D;YAC9D,MAAM,MAAM,GAAG,IAAA,wBAAQ,EAAC,4DAA4D,EAAE;gBACpF,QAAQ,EAAE,MAAM;gBAChB,KAAK,EAAE,MAAM;aACd,CAAC,CAAC;YAEH,MAAM,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC;YAC3C,OAAO,KAAK,CAAC;SACd;QAAC,OAAO,KAAK,EAAE;YACd,4EAA4E;YAC5E,gEAAgE;YAChE,MAAM,SAAS,GAAG,KAAgC,CAAC;YACnD,IAAI,OAAO,SAAS,CAAC,MAAM,KAAK,QAAQ,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;gBAClE,OAAO,CAAC,CAAC;aACV;YAED,6DAA6D;YAC7D,MAAM,YAAY,GAChB,OAAO,SAAS,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC;YAC9E,OAAO,CAAC,IAAI,CAAC,kDAAkD,YAAY,EAAE,CAAC,CAAC;YAC/E,OAAO,CAAC,CAAC,CAAC,CAAC,gCAAgC;SAC5C;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,2BAA2B;QAC/B,IAAI;YACF,MAAM,MAAM,GAAG,IAAA,wBAAQ,EACrB,+HAA+H,EAC/H;gBACE,QAAQ,EAAE,MAAM;gBAChB,KAAK,EAAE,MAAM;aACd,CACF,CAAC;YAEF,MAAM,SAAS,GAA2B,EAAE,CAAC;YAC7C,MAAM,KAAK,GAAG,MAAM;iBACjB,IAAI,EAAE;iBACN,KAAK,CAAC,IAAI,CAAC;iBACX,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;YAE/B,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;gBACxB,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBACrD,IAAI,KAAK,EAAE;oBACT,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;oBACjC,MAAM,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;oBAClC,SAAS,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC;iBAC9B;aACF;YAED,OAAO,SAAS,CAAC;SAClB;QAAC,OAAO,KAAK,EAAE;YACd,6DAA6D;YAC7D,MAAM,SAAS,GAAG,KAAgC,CAAC;YACnD,MAAM,YAAY,GAChB,OAAO,SAAS,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC;YAC9E,OAAO,CAAC,IAAI,CAAC,sDAAsD,YAAY,EAAE,CAAC,CAAC;YACnF,OAAO,EAAE,CAAC;SACX;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,sBAAsB;QAC1B,IAAI;YACF,uCAAuC;YACvC,MAAM,MAAM,GAAG,IAAA,wBAAQ,EAAC,oCAAoC,EAAE;gBAC5D,QAAQ,EAAE,MAAM;gBAChB,KAAK,EAAE,MAAM;aACd,CAAC,CAAC;YAEH,MAAM,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC;YAC3C,OAAO,KAAK,CAAC;SACd;QAAC,OAAO,KAAK,EAAE;YACd,8EAA8E;YAC9E,gEAAgE;YAChE,MAAM,SAAS,GAAG,KAAgC,CAAC;YACnD,IAAI,OAAO,SAAS,CAAC,MAAM,KAAK,QAAQ,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;gBAClE,OAAO,CAAC,CAAC;aACV;YAED,6DAA6D;YAC7D,MAAM,YAAY,GAChB,OAAO,SAAS,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC;YAC9E,OAAO,CAAC,IAAI,CAAC,iDAAiD,YAAY,EAAE,CAAC,CAAC;YAC9E,OAAO,CAAC,CAAC,CAAC,CAAC,gCAAgC;SAC5C;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,0BAA0B;QAC9B,IAAI;YACF,MAAM,MAAM,GAAG,IAAA,wBAAQ,EAAC,gBAAgB,EAAE;gBACxC,QAAQ,EAAE,MAAM;gBAChB,KAAK,EAAE,MAAM;aACd,CAAC,CAAC;YAEH,MAAM,SAAS,GAA2B,EAAE,CAAC;YAC7C,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAEjC,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;gBACxB,mCAAmC;gBACnC,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,uDAAuD,CAAC,CAAC;gBACzF,IAAI,YAAY,EAAE;oBAChB,MAAM,QAAQ,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;oBACjC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;iBACtD;aACF;YAED,OAAO,SAAS,CAAC;SAClB;QAAC,OAAO,KAAK,EAAE;YACd,6DAA6D;YAC7D,MAAM,SAAS,GAAG,KAAgC,CAAC;YACnD,MAAM,YAAY,GAChB,OAAO,SAAS,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC;YAC9E,OAAO,CAAC,IAAI,CAAC,qDAAqD,YAAY,EAAE,CAAC,CAAC;YAClF,OAAO,EAAE,CAAC;SACX;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,YAAY;QAChB,IAAI;YACF,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAE7B,qCAAqC;YACrC,IAAA,wBAAQ,EAAC,YAAY,EAAE;gBACrB,QAAQ,EAAE,MAAM;gBAChB,KAAK,EAAE,MAAM;aACd,CAAC,CAAC;YAEH,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAC3B,MAAM,gBAAgB,GAAG,CAAC,OAAO,GAAG,SAAS,CAAC,GAAG,IAAI,CAAC;YAEtD,OAAO,gBAAgB,CAAC;SACzB;QAAC,OAAO,KAAK,EAAE;YACd,6DAA6D;YAC7D,MAAM,SAAS,GAAG,KAAgC,CAAC;YACnD,MAAM,YAAY,GAChB,OAAO,SAAS,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC;YAC9E,OAAO,CAAC,IAAI,CAAC,wCAAwC,YAAY,EAAE,CAAC,CAAC;YACrE,OAAO,CAAC,CAAC,CAAC,CAAC,0BAA0B;SACtC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,wBAAwB;QAC5B,IAAI;YACF,oDAAoD;YACpD,MAAM,MAAM,GAAG,IAAA,wBAAQ,EAAC,4CAA4C,EAAE;gBACpE,QAAQ,EAAE,MAAM;gBAChB,KAAK,EAAE,MAAM;aACd,CAAC,CAAC;YAEH,MAAM,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC;YAC3C,OAAO,KAAK,CAAC;SACd;QAAC,OAAO,KAAK,EAAE;YACd,6DAA6D;YAC7D,MAAM,SAAS,GAAG,KAAgC,CAAC;YACnD,MAAM,YAAY,GAChB,OAAO,SAAS,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC;YAC9E,OAAO,CAAC,IAAI,CAAC,gDAAgD,YAAY,EAAE,CAAC,CAAC;YAC7E,OAAO,CAAC,CAAC;SACV;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,eAAe;QACnB,IAAI;YACF,uEAAuE;YACvE,4DAA4D;YAC5D,OAAO,GAAG,CAAC,CAAC,qBAAqB;SAClC;QAAC,OAAO,KAAK,EAAE;YACd,6DAA6D;YAC7D,MAAM,SAAS,GAAG,KAAgC,CAAC;YACnD,MAAM,YAAY,GAChB,OAAO,SAAS,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC;YAC9E,OAAO,CAAC,IAAI,CAAC,8CAA8C,YAAY,EAAE,CAAC,CAAC;YAC3E,OAAO,CAAC,CAAC;SACV;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,cAAc;QAClB,IAAI;YACF,mCAAmC;YACnC,MAAM,QAAQ,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;YACvC,MAAM,QAAQ,GAAG,QAAQ,CAAC,QAAQ,GAAG,IAAI,GAAG,IAAI,CAAC;YAEjD,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;SAC7B;QAAC,OAAO,KAAK,EAAE;YACd,6DAA6D;YAC7D,MAAM,SAAS,GAAG,KAAgC,CAAC;YACnD,MAAM,YAAY,GAChB,OAAO,SAAS,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC;YAC9E,OAAO,CAAC,IAAI,CAAC,4CAA4C,YAAY,EAAE,CAAC,CAAC;YACzE,OAAO,CAAC,CAAC;SACV;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,aAAa;QACjB,IAAI;YACF,mCAAmC;YACnC,MAAM,SAAS,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;YAC7C,IAAI,SAAS,GAAG,CAAC,CAAC;YAElB,KAAK,MAAM,GAAG,IAAI,SAAS,EAAE;gBAC3B,IAAI,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;oBACtB,MAAM,MAAM,GAAG,IAAA,wBAAQ,EAAC,UAAU,GAAG,YAAY,EAAE;wBACjD,QAAQ,EAAE,MAAM;wBAChB,KAAK,EAAE,MAAM;qBACd,CAAC,CAAC;oBAEH,MAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC;oBAC5C,SAAS,IAAI,MAAM,CAAC;iBACrB;aACF;YAED,OAAO,SAAS,CAAC;SAClB;QAAC,OAAO,KAAK,EAAE;YACd,6DAA6D;YAC7D,MAAM,SAAS,GAAG,KAAgC,CAAC;YACnD,MAAM,YAAY,GAChB,OAAO,SAAS,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC;YAC9E,OAAO,CAAC,IAAI,CAAC,2CAA2C,YAAY,EAAE,CAAC,CAAC;YACxE,OAAO,CAAC,CAAC;SACV;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,kBAAkB;QACtB,MAAM,oBAAoB,GAAG,MAAM,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAClE,MAAM,mBAAmB,GAAG,MAAM,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAChE,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;QAC5C,MAAM,qBAAqB,GAAG,MAAM,IAAI,CAAC,wBAAwB,EAAE,CAAC;QACpE,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;QAClD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAEhD,MAAM,OAAO,GAAoB;YAC/B,gBAAgB,EAAE;gBAChB,OAAO,EAAE,oBAAoB;gBAC7B,MAAM,EAAE,CAAC;gBACT,SAAS,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,GAAG,oBAAoB,CAAC;gBACjD,UAAU,EACR,oBAAoB,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,oBAAoB,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;aACvF;YACD,eAAe,EAAE;gBACf,OAAO,EAAE,mBAAmB;gBAC5B,MAAM,EAAE,CAAC;gBACT,SAAS,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,GAAG,mBAAmB,CAAC;gBAClD,UAAU,EACR,mBAAmB,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,GAAG,mBAAmB,CAAC,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;aACzF;YACD,gBAAgB,EAAE;gBAChB,WAAW,EAAE,SAAS;gBACtB,UAAU,EAAE,EAAE;gBACd,YAAY,EAAE,YAAY;gBAC1B,WAAW,EAAE,WAAW;aACzB;YACD,iBAAiB,EAAE;gBACjB,OAAO,EAAE,qBAAqB;gBAC9B,MAAM,EAAE,GAAG;gBACX,kBAAkB,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,qBAAqB,GAAG,CAAC,CAAC,EAAE,2BAA2B;aACxF;SACF,CAAC;QAEF,2BAA2B;QAC3B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAClC,IAAI,CAAC,iBAAiB,GAAG,IAAI,IAAI,EAAE,CAAC;QAEpC,oDAAoD;QACpD,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,GAAG,EAAE;YACpC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;SACtD;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,iBAAiB,CAAC,SAAoB;QAC1C,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAEhD,QAAQ,SAAS,EAAE;YACjB,KAAK,wBAAwB;gBAC3B,OAAO,OAAO,CAAC,gBAAgB,CAAC,OAAO,KAAK,CAAC,CAAC;YAEhD,KAAK,uBAAuB;gBAC1B,OAAO,OAAO,CAAC,eAAe,CAAC,OAAO,KAAK,CAAC,CAAC;YAE/C,KAAK,sBAAsB;gBACzB,OAAO,OAAO,CAAC,gBAAgB,CAAC,WAAW,IAAI,EAAE,CAAC;YAEpD,KAAK,wBAAwB;gBAC3B,OAAO,OAAO,CAAC,iBAAiB,CAAC,OAAO,IAAI,GAAG,CAAC;YAElD,KAAK,kBAAkB;gBACrB,OAAO,OAAO,CAAC,gBAAgB,CAAC,OAAO,KAAK,CAAC,CAAC;YAEhD,KAAK,kBAAkB;gBACrB,OAAO,OAAO,CAAC,eAAe,CAAC,OAAO,KAAK,CAAC,CAAC;YAE/C,KAAK,kBAAkB;gBACrB,OAAO,OAAO,CAAC,iBAAiB,CAAC,OAAO,IAAI,GAAG,CAAC;YAElD,KAAK,kBAAkB;gBACrB,OAAO,CACL,OAAO,CAAC,gBAAgB,CAAC,WAAW,IAAI,EAAE;oBAC1C,OAAO,CAAC,gBAAgB,CAAC,YAAY,IAAI,GAAG;oBAC5C,OAAO,CAAC,gBAAgB,CAAC,WAAW,IAAI,EAAE,CAC3C,CAAC;YAEJ;gBACE,OAAO,CAAC,IAAI,CAAC,sBAAsB,SAAS,EAAE,CAAC,CAAC;gBAChD,OAAO,KAAK,CAAC;SAChB;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,sBAAsB;QAC1B,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;QACvD,MAAM,aAAa,GAAoB;YACrC,gBAAgB,EAAE;gBAChB,OAAO,EAAE,CAAC;gBACV,MAAM,EAAE,CAAC;gBACT,SAAS,EAAE,EAAE;gBACb,UAAU,EAAE,GAAG;aAChB;YACD,eAAe,EAAE;gBACf,OAAO,EAAE,CAAC;gBACV,MAAM,EAAE,CAAC;gBACT,SAAS,EAAE,IAAI;gBACf,UAAU,EAAE,GAAG;aAChB;YACD,gBAAgB,EAAE;gBAChB,WAAW,EAAE,CAAC;gBACd,UAAU,EAAE,EAAE;gBACd,YAAY,EAAE,GAAG;gBACjB,WAAW,EAAE,EAAE;aAChB;YACD,iBAAiB,EAAE;gBACjB,OAAO,EAAE,GAAG;gBACZ,MAAM,EAAE,GAAG;gBACX,kBAAkB,EAAE,GAAG;aACxB;SACF,CAAC;QAEF,6BAA6B;QAC7B,MAAM,kBAAkB,GAAG,cAAc,CAAC,gBAAgB,CAAC,UAAU,CAAC;QACtE,MAAM,eAAe,GAAG,cAAc,CAAC,eAAe,CAAC,UAAU,CAAC;QAClE,MAAM,aAAa,GAAG,cAAc,CAAC,gBAAgB,CAAC,WAAW,IAAI,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAClF,MAAM,kBAAkB,GAAG,CAAC,cAAc,CAAC,iBAAiB,CAAC,OAAO,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;QAElF,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAChC,CAAC,kBAAkB,GAAG,eAAe,GAAG,aAAa,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAChF,CAAC;QAEF,yBAAyB;QACzB,MAAM,MAAM,GAAkB;YAC5B;gBACE,OAAO,EAAE,QAAQ;gBACjB,SAAS,EAAE,8BAA8B;gBACzC,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,MAAM,EACJ,cAAc,CAAC,gBAAgB,CAAC,OAAO,KAAK,CAAC;oBAC3C,CAAC,CAAC,sBAAW,CAAC,SAAS;oBACvB,CAAC,CAAC,sBAAW,CAAC,WAAW;gBAC7B,OAAO,EAAE,cAAc;gBACvB,YAAY,EACV,cAAc,CAAC,gBAAgB,CAAC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,iCAAiC,CAAC,CAAC,CAAC,CAAC,EAAE;gBAC1F,MAAM,EACJ,cAAc,CAAC,gBAAgB,CAAC,OAAO,GAAG,CAAC;oBACzC,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC,gBAAgB,CAAC,OAAO,8BAA8B,CAAC;oBAC5E,CAAC,CAAC,EAAE;gBACR,eAAe,EACb,cAAc,CAAC,gBAAgB,CAAC,OAAO,GAAG,CAAC;oBACzC,CAAC,CAAC,CAAC,oDAAoD,CAAC;oBACxD,CAAC,CAAC,EAAE;aACT;YACD;gBACE,OAAO,EAAE,QAAQ;gBACjB,SAAS,EAAE,gCAAgC;gBAC3C,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,MAAM,EACJ,cAAc,CAAC,eAAe,CAAC,OAAO,KAAK,CAAC;oBAC1C,CAAC,CAAC,sBAAW,CAAC,SAAS;oBACvB,CAAC,CAAC,sBAAW,CAAC,WAAW;gBAC7B,OAAO,EAAE,cAAc;gBACvB,YAAY,EACV,cAAc,CAAC,eAAe,CAAC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,gCAAgC,CAAC,CAAC,CAAC,CAAC,EAAE;gBACxF,MAAM,EACJ,cAAc,CAAC,eAAe,CAAC,OAAO,GAAG,CAAC;oBACxC,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC,eAAe,CAAC,OAAO,6BAA6B,CAAC;oBAC1E,CAAC,CAAC,EAAE;gBACR,eAAe,EACb,cAAc,CAAC,eAAe,CAAC,OAAO,GAAG,CAAC;oBACxC,CAAC,CAAC,CAAC,wCAAwC,CAAC;oBAC5C,CAAC,CAAC,EAAE;aACT;SACF,CAAC;QAEF,0DAA0D;QAC1D,MAAM,mBAAmB,GAAG,IAAI,IAAI,EAAE,CAAC;QACvC,mBAAmB,CAAC,OAAO,CACzB,mBAAmB,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,GAAG,eAAe,CAAC,GAAG,EAAE,CAAC,CACxE,CAAC,CAAC,iBAAiB;QAEpB,OAAO;YACL,UAAU,EAAE,2BAA2B;YACvC,eAAe;YACf,MAAM;YACN,cAAc;YACd,aAAa;YACb,mBAAmB;SACpB,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,iBAAiB;QACf,OAAO,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC;IAClC,CAAC;IAED;;OAEG;IACH,qBAAqB;QAMnB,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;YAClC,OAAO;gBACL,uBAAuB,EAAE,CAAC;gBAC1B,sBAAsB,EAAE,CAAC;gBACzB,iBAAiB,EAAE,CAAC;gBACpB,sBAAsB,EAAE,CAAC;aAC1B,CAAC;SACH;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;QACrC,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAEnE,OAAO;YACL,uBAAuB,EAAE,KAAK,CAAC,gBAAgB,CAAC,OAAO,GAAG,MAAM,CAAC,gBAAgB,CAAC,OAAO;YACzF,sBAAsB,EAAE,KAAK,CAAC,eAAe,CAAC,OAAO,GAAG,MAAM,CAAC,eAAe,CAAC,OAAO;YACtF,iBAAiB,EAAE,KAAK,CAAC,gBAAgB,CAAC,WAAW,GAAG,MAAM,CAAC,gBAAgB,CAAC,WAAW;YAC3F,sBAAsB,EAAE,MAAM,CAAC,iBAAiB,CAAC,OAAO,GAAG,KAAK,CAAC,iBAAiB,CAAC,OAAO;SAC3F,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,aAAa,CAAC,QAAgB;QAClC,IAAI;YACF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,sBAAsB,EAAE,CAAC;YACnD,MAAM,UAAU,GAAG;gBACjB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,MAAM;gBACN,OAAO,EAAE,IAAI,CAAC,cAAc;gBAC5B,WAAW,EAAE,IAAI,CAAC,qBAAqB,EAAE;aAC1C,CAAC;YAEF,EAAE,CAAC,aAAa,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;YAChE,OAAO,CAAC,GAAG,CAAC,2BAA2B,QAAQ,EAAE,CAAC,CAAC;SACpD;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,6BAA8B,KAAe,CAAC,OAAO,EAAE,CAAC,CAAC;SAC1E;IACH,CAAC;IAED;;OAEG;IACH,mBAAmB;QACjB,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;QACzB,IAAI,CAAC,iBAAiB,GAAG,IAAI,IAAI,EAAE,CAAC;QACpC,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;IAC1C,CAAC;CACF;AA/fD,0CA+fC","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/backups/conservative-wave-2025-08-11T05-21-33-410Z/src/services/campaign/ProgressTracker.ts"],"sourcesContent":["/**\n * Progress Tracking Infrastructure\n * Perfect Codebase Campaign - Real-time Metrics Collection\n */\n\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport {\n  ProgressMetrics,\n  ValidationResult,\n  Milestone,\n  ProgressReport,\n  PhaseReport,\n  PhaseStatus,\n} from '../../types/campaign';\n\nexport class ProgressTracker {\n  private metricsHistory: ProgressMetrics[] = [];\n  private lastMetricsUpdate: Date = new Date();\n\n  /**\n   * Get current TypeScript error count using proven command pattern\n   */\n  async getTypeScriptErrorCount(): Promise<number> {\n    try {\n      // Using the proven pattern from existing scripts and Makefile\n      const output = execSync('yarn tsc --noEmit --skipLibCheck 2>&1 | grep -c \"error TS\"', {\n        encoding: 'utf8',\n        stdio: 'pipe',\n      });\n\n      const count = parseInt(output.trim()) || 0;\n      return count;\n    } catch (error) {\n      // If grep finds no matches, it returns exit code 1, but that means 0 errors\n      // Apply Pattern GG-6: Enhanced property access with type guards\n      const errorData = error as Record<string, unknown>;\n      if (typeof errorData.status === 'number' && errorData.status === 1) {\n        return 0;\n      }\n\n      // Apply Pattern GG-6: Safe property access for error message\n      const errorMessage =\n        typeof errorData.message === 'string' ? errorData.message : 'Unknown error';\n      console.warn(`Warning: Could not get TypeScript error count: ${errorMessage}`);\n      return -1; // Indicates measurement failure\n    }\n  }\n\n  /**\n   * Get detailed TypeScript error breakdown by type\n   */\n  async getTypeScriptErrorBreakdown(): Promise<Record<string, number>> {\n    try {\n      const output = execSync(\n        \"yarn tsc --noEmit --skipLibCheck 2>&1 | grep -E \\\"error TS\\\" | sed 's/.*error //' | cut -d':' -f1 | sort | uniq -c | sort -nr\",\n        {\n          encoding: 'utf8',\n          stdio: 'pipe',\n        },\n      );\n\n      const breakdown: Record<string, number> = {};\n      const lines = output\n        .trim()\n        .split('\\n')\n        .filter(line => line.trim());\n\n      for (const line of lines) {\n        const match = line.trim().match(/^\\s*(\\d+)\\s+(.+)$/);\n        if (match) {\n          const count = parseInt(match[1]);\n          const errorType = match[2].trim();\n          breakdown[errorType] = count;\n        }\n      }\n\n      return breakdown;\n    } catch (error) {\n      // Apply Pattern GG-6: Safe property access for error message\n      const errorData = error as Record<string, unknown>;\n      const errorMessage =\n        typeof errorData.message === 'string' ? errorData.message : 'Unknown error';\n      console.warn(`Warning: Could not get TypeScript error breakdown: ${errorMessage}`);\n      return {};\n    }\n  }\n\n  /**\n   * Get current linting warning count\n   */\n  async getLintingWarningCount(): Promise<number> {\n    try {\n      // Using yarn lint to get warning count\n      const output = execSync('yarn lint 2>&1 | grep -c \"warning\"', {\n        encoding: 'utf8',\n        stdio: 'pipe',\n      });\n\n      const count = parseInt(output.trim()) || 0;\n      return count;\n    } catch (error) {\n      // If grep finds no matches, it returns exit code 1, but that means 0 warnings\n      // Apply Pattern GG-6: Enhanced property access with type guards\n      const errorData = error as Record<string, unknown>;\n      if (typeof errorData.status === 'number' && errorData.status === 1) {\n        return 0;\n      }\n\n      // Apply Pattern GG-6: Safe property access for error message\n      const errorMessage =\n        typeof errorData.message === 'string' ? errorData.message : 'Unknown error';\n      console.warn(`Warning: Could not get linting warning count: ${errorMessage}`);\n      return -1; // Indicates measurement failure\n    }\n  }\n\n  /**\n   * Get detailed linting warning breakdown by type\n   */\n  async getLintingWarningBreakdown(): Promise<Record<string, number>> {\n    try {\n      const output = execSync('yarn lint 2>&1', {\n        encoding: 'utf8',\n        stdio: 'pipe',\n      });\n\n      const breakdown: Record<string, number> = {};\n      const lines = output.split('\\n');\n\n      for (const line of lines) {\n        // Look for ESLint warning patterns\n        const warningMatch = line.match(/warning\\s+(.+?)\\s+(@typescript-eslint\\/[\\w-]+|[\\w-]+)/);\n        if (warningMatch) {\n          const ruleType = warningMatch[2];\n          breakdown[ruleType] = (breakdown[ruleType] || 0) + 1;\n        }\n      }\n\n      return breakdown;\n    } catch (error) {\n      // Apply Pattern GG-6: Safe property access for error message\n      const errorData = error as Record<string, unknown>;\n      const errorMessage =\n        typeof errorData.message === 'string' ? errorData.message : 'Unknown error';\n      console.warn(`Warning: Could not get linting warning breakdown: ${errorMessage}`);\n      return {};\n    }\n  }\n\n  /**\n   * Measure build time using time command\n   */\n  async getBuildTime(): Promise<number> {\n    try {\n      const startTime = Date.now();\n\n      // Run build command and measure time\n      execSync('yarn build', {\n        encoding: 'utf8',\n        stdio: 'pipe',\n      });\n\n      const endTime = Date.now();\n      const buildTimeSeconds = (endTime - startTime) / 1000;\n\n      return buildTimeSeconds;\n    } catch (error) {\n      // Apply Pattern GG-6: Safe property access for error message\n      const errorData = error as Record<string, unknown>;\n      const errorMessage =\n        typeof errorData.message === 'string' ? errorData.message : 'Unknown error';\n      console.warn(`Warning: Build failed during timing: ${errorMessage}`);\n      return -1; // Indicates build failure\n    }\n  }\n\n  /**\n   * Get enterprise system count using intelligence system pattern\n   */\n  async getEnterpriseSystemCount(): Promise<number> {\n    try {\n      // Count INTELLIGENCE_SYSTEM patterns in source code\n      const output = execSync('grep -r \"INTELLIGENCE_SYSTEM\" src/ | wc -l', {\n        encoding: 'utf8',\n        stdio: 'pipe',\n      });\n\n      const count = parseInt(output.trim()) || 0;\n      return count;\n    } catch (error) {\n      // Apply Pattern GG-6: Safe property access for error message\n      const errorData = error as Record<string, unknown>;\n      const errorMessage =\n        typeof errorData.message === 'string' ? errorData.message : 'Unknown error';\n      console.warn(`Warning: Could not count enterprise systems: ${errorMessage}`);\n      return 0;\n    }\n  }\n\n  /**\n   * Get cache hit rate from build system\n   */\n  async getCacheHitRate(): Promise<number> {\n    try {\n      // This would need to be implemented based on the specific build system\n      // For now, return a mock value based on typical performance\n      return 0.8; // 80% cache hit rate\n    } catch (error) {\n      // Apply Pattern GG-6: Safe property access for error message\n      const errorData = error as Record<string, unknown>;\n      const errorMessage =\n        typeof errorData.message === 'string' ? errorData.message : 'Unknown error';\n      console.warn(`Warning: Could not measure cache hit rate: ${errorMessage}`);\n      return 0;\n    }\n  }\n\n  /**\n   * Get current memory usage during build\n   */\n  async getMemoryUsage(): Promise<number> {\n    try {\n      // Get Node.js process memory usage\n      const memUsage = process.memoryUsage();\n      const memoryMB = memUsage.heapUsed / 1024 / 1024;\n\n      return Math.round(memoryMB);\n    } catch (error) {\n      // Apply Pattern GG-6: Safe property access for error message\n      const errorData = error as Record<string, unknown>;\n      const errorMessage =\n        typeof errorData.message === 'string' ? errorData.message : 'Unknown error';\n      console.warn(`Warning: Could not measure memory usage: ${errorMessage}`);\n      return 0;\n    }\n  }\n\n  /**\n   * Get bundle size information\n   */\n  async getBundleSize(): Promise<number> {\n    try {\n      // Check for build output directory\n      const buildDirs = ['.next', 'dist', 'build'];\n      let totalSize = 0;\n\n      for (const dir of buildDirs) {\n        if (fs.existsSync(dir)) {\n          const output = execSync(`du -sk ${dir} | cut -f1`, {\n            encoding: 'utf8',\n            stdio: 'pipe',\n          });\n\n          const sizeKB = parseInt(output.trim()) || 0;\n          totalSize += sizeKB;\n        }\n      }\n\n      return totalSize;\n    } catch (error) {\n      // Apply Pattern GG-6: Safe property access for error message\n      const errorData = error as Record<string, unknown>;\n      const errorMessage =\n        typeof errorData.message === 'string' ? errorData.message : 'Unknown error';\n      console.warn(`Warning: Could not measure bundle size: ${errorMessage}`);\n      return 0;\n    }\n  }\n\n  /**\n   * Get comprehensive progress metrics\n   */\n  async getProgressMetrics(): Promise<ProgressMetrics> {\n    const typeScriptErrorCount = await this.getTypeScriptErrorCount();\n    const lintingWarningCount = await this.getLintingWarningCount();\n    const buildTime = await this.getBuildTime();\n    const enterpriseSystemCount = await this.getEnterpriseSystemCount();\n    const cacheHitRate = await this.getCacheHitRate();\n    const memoryUsage = await this.getMemoryUsage();\n\n    const metrics: ProgressMetrics = {\n      typeScriptErrors: {\n        current: typeScriptErrorCount,\n        target: 0,\n        reduction: Math.max(0, 86 - typeScriptErrorCount), // Based on initial 86 errors\n        percentage:\n          typeScriptErrorCount >= 0 ? Math.round(((86 - typeScriptErrorCount) / 86) * 100) : 0,\n      },\n      lintingWarnings: {\n        current: lintingWarningCount,\n        target: 0,\n        reduction: Math.max(0, 4506 - lintingWarningCount), // Based on initial 4506 warnings\n        percentage:\n          lintingWarningCount >= 0 ? Math.round(((4506 - lintingWarningCount) / 4506) * 100) : 0,\n      },\n      buildPerformance: {\n        currentTime: buildTime,\n        targetTime: 10,\n        cacheHitRate: cacheHitRate,\n        memoryUsage: memoryUsage,\n      },\n      enterpriseSystems: {\n        current: enterpriseSystemCount,\n        target: 200,\n        transformedExports: Math.max(0, enterpriseSystemCount - 0), // Assuming starting from 0\n      },\n    };\n\n    // Store metrics in history\n    this.metricsHistory.push(metrics);\n    this.lastMetricsUpdate = new Date();\n\n    // Keep only recent history to prevent memory issues\n    if (this.metricsHistory.length > 100) {\n      this.metricsHistory = this.metricsHistory.slice(-50);\n    }\n\n    return metrics;\n  }\n\n  /**\n   * Validate milestone achievement\n   */\n  async validateMilestone(milestone: Milestone): Promise<boolean> {\n    const metrics = await this.getProgressMetrics();\n\n    switch (milestone) {\n      case 'zero-typescript-errors':\n        return metrics.typeScriptErrors.current === 0;\n\n      case 'zero-linting-warnings':\n        return metrics.lintingWarnings.current === 0;\n\n      case 'build-time-under-10s':\n        return metrics.buildPerformance.currentTime <= 10;\n\n      case 'enterprise-systems-200':\n        return metrics.enterpriseSystems.current >= 200;\n\n      case 'phase-1-complete':\n        return metrics.typeScriptErrors.current === 0;\n\n      case 'phase-2-complete':\n        return metrics.lintingWarnings.current === 0;\n\n      case 'phase-3-complete':\n        return metrics.enterpriseSystems.current >= 200;\n\n      case 'phase-4-complete':\n        return (\n          metrics.buildPerformance.currentTime <= 10 &&\n          metrics.buildPerformance.cacheHitRate >= 0.8 &&\n          metrics.buildPerformance.memoryUsage <= 50\n        );\n\n      default:\n        console.warn(`Unknown milestone: ${milestone}`);\n        return false;\n    }\n  }\n\n  /**\n   * Generate comprehensive progress report\n   */\n  async generateProgressReport(): Promise<ProgressReport> {\n    const currentMetrics = await this.getProgressMetrics();\n    const targetMetrics: ProgressMetrics = {\n      typeScriptErrors: {\n        current: 0,\n        target: 0,\n        reduction: 86,\n        percentage: 100,\n      },\n      lintingWarnings: {\n        current: 0,\n        target: 0,\n        reduction: 4506,\n        percentage: 100,\n      },\n      buildPerformance: {\n        currentTime: 8,\n        targetTime: 10,\n        cacheHitRate: 0.8,\n        memoryUsage: 45,\n      },\n      enterpriseSystems: {\n        current: 200,\n        target: 200,\n        transformedExports: 200,\n      },\n    };\n\n    // Calculate overall progress\n    const typeScriptProgress = currentMetrics.typeScriptErrors.percentage;\n    const lintingProgress = currentMetrics.lintingWarnings.percentage;\n    const buildProgress = currentMetrics.buildPerformance.currentTime <= 10 ? 100 : 0;\n    const enterpriseProgress = (currentMetrics.enterpriseSystems.current / 200) * 100;\n\n    const overallProgress = Math.round(\n      (typeScriptProgress + lintingProgress + buildProgress + enterpriseProgress) / 4,\n    );\n\n    // Generate phase reports\n    const phases: PhaseReport[] = [\n      {\n        phaseId: 'phase1',\n        phaseName: 'TypeScript Error Elimination',\n        startTime: new Date(), // This should be tracked properly\n        status:\n          currentMetrics.typeScriptErrors.current === 0\n            ? PhaseStatus.COMPLETED\n            : PhaseStatus.IN_PROGRESS,\n        metrics: currentMetrics,\n        achievements:\n          currentMetrics.typeScriptErrors.current === 0 ? ['Zero TypeScript errors achieved'] : [],\n        issues:\n          currentMetrics.typeScriptErrors.current > 0\n            ? [`${currentMetrics.typeScriptErrors.current} TypeScript errors remaining`]\n            : [],\n        recommendations:\n          currentMetrics.typeScriptErrors.current > 0\n            ? ['Continue with Enhanced TypeScript Error Fixer v3.0']\n            : [],\n      },\n      {\n        phaseId: 'phase2',\n        phaseName: 'Linting Excellence Achievement',\n        startTime: new Date(),\n        status:\n          currentMetrics.lintingWarnings.current === 0\n            ? PhaseStatus.COMPLETED\n            : PhaseStatus.IN_PROGRESS,\n        metrics: currentMetrics,\n        achievements:\n          currentMetrics.lintingWarnings.current === 0 ? ['Zero linting warnings achieved'] : [],\n        issues:\n          currentMetrics.lintingWarnings.current > 0\n            ? [`${currentMetrics.lintingWarnings.current} linting warnings remaining`]\n            : [],\n        recommendations:\n          currentMetrics.lintingWarnings.current > 0\n            ? ['Continue with systematic linting fixes']\n            : [],\n      },\n    ];\n\n    // Estimate completion time based on current progress rate\n    const estimatedCompletion = new Date();\n    estimatedCompletion.setDate(\n      estimatedCompletion.getDate() + Math.ceil((100 - overallProgress) / 10),\n    ); // Rough estimate\n\n    return {\n      campaignId: 'perfect-codebase-campaign',\n      overallProgress,\n      phases,\n      currentMetrics,\n      targetMetrics,\n      estimatedCompletion,\n    };\n  }\n\n  /**\n   * Get metrics history for trend analysis\n   */\n  getMetricsHistory(): ProgressMetrics[] {\n    return [...this.metricsHistory];\n  }\n\n  /**\n   * Get metrics improvement over time\n   */\n  getMetricsImprovement(): {\n    typeScriptErrorsReduced: number;\n    lintingWarningsReduced: number;\n    buildTimeImproved: number;\n    enterpriseSystemsAdded: number;\n  } {\n    if (this.metricsHistory.length < 2) {\n      return {\n        typeScriptErrorsReduced: 0,\n        lintingWarningsReduced: 0,\n        buildTimeImproved: 0,\n        enterpriseSystemsAdded: 0,\n      };\n    }\n\n    const first = this.metricsHistory[0];\n    const latest = this.metricsHistory[this.metricsHistory.length - 1];\n\n    return {\n      typeScriptErrorsReduced: first.typeScriptErrors.current - latest.typeScriptErrors.current,\n      lintingWarningsReduced: first.lintingWarnings.current - latest.lintingWarnings.current,\n      buildTimeImproved: first.buildPerformance.currentTime - latest.buildPerformance.currentTime,\n      enterpriseSystemsAdded: latest.enterpriseSystems.current - first.enterpriseSystems.current,\n    };\n  }\n\n  /**\n   * Export metrics to JSON for external analysis\n   */\n  async exportMetrics(filePath: string): Promise<void> {\n    try {\n      const report = await this.generateProgressReport();\n      const exportData = {\n        timestamp: new Date().toISOString(),\n        report,\n        history: this.metricsHistory,\n        improvement: this.getMetricsImprovement(),\n      };\n\n      fs.writeFileSync(filePath, JSON.stringify(exportData, null, 2));\n      console.log(`📊 Metrics exported to: ${filePath}`);\n    } catch (error) {\n      throw new Error(`Failed to export metrics: ${(error as Error).message}`);\n    }\n  }\n\n  /**\n   * Reset metrics history (for testing or fresh start)\n   */\n  resetMetricsHistory(): void {\n    this.metricsHistory = [];\n    this.lastMetricsUpdate = new Date();\n    console.log('📊 Metrics history reset');\n  }\n}\n"],"version":3}