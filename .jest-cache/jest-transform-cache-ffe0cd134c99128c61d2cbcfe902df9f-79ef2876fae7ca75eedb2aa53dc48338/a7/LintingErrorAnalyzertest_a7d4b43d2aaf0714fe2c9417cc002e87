560f8af7dfe5da58b0f943fae24dd99b
"use strict";
/**
 * Simple tests for LintingErrorAnalyzer
 */
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('child_process', () => ({
    execSync: mockExecSync
}));
const LintingErrorAnalyzer_1 = require("../LintingErrorAnalyzer");
// Mock child_process to prevent actual ESLint execution
const mockExecSync = jest.fn();
describe('LintingErrorAnalyzer', () => {
    let analyzer;
    beforeEach(() => {
        analyzer = new LintingErrorAnalyzer_1.LintingErrorAnalyzer('/test');
        jest.clearAllMocks();
    });
    describe('Basic Functionality', () => {
        it('should create analyzer instance', () => {
            expect(analyzer).toBeDefined();
            expect(analyzer).toBeInstanceOf(LintingErrorAnalyzer_1.LintingErrorAnalyzer);
        });
        it('should handle empty ESLint output', async () => {
            mockExecSync.mockReturnValue('[]');
            const result = await analyzer.analyzeAllIssues();
            expect(result).toBeDefined();
            expect(result.total).toBe(0);
            expect(result.errors).toBe(0);
            expect(result.warnings).toBe(0);
            expect(result.autoFixable).toHaveLength(0);
        });
        it('should parse ESLint output correctly', async () => {
            const mockOutput = JSON.stringify([
                {
                    filePath: '/test/src/App.tsx',
                    messages: [
                        {
                            ruleId: 'import/order',
                            severity: 2,
                            message: 'Import order is incorrect',
                            line: 1,
                            column: 1,
                            fix: { range: [0, 10], text: 'fixed' }
                        },
                        {
                            ruleId: '@typescript-eslint/no-explicit-any',
                            severity: 1,
                            message: 'Unexpected any type',
                            line: 5,
                            column: 10
                        }
                    ]
                }
            ]);
            mockExecSync.mockReturnValue(mockOutput);
            const result = await analyzer.analyzeAllIssues();
            expect(result.total).toBe(2);
            expect(result.errors).toBe(1); // severity 2
            expect(result.warnings).toBe(1); // severity 1
            expect(result.autoFixable).toHaveLength(1); // import/order has fix
        });
        it('should categorize issues correctly', async () => {
            const mockOutput = JSON.stringify([
                {
                    filePath: '/test/src/App.tsx',
                    messages: [
                        {
                            ruleId: 'import/order',
                            severity: 2,
                            message: 'Import order is incorrect',
                            line: 1,
                            column: 1,
                            fix: { range: [0, 10], text: 'fixed' }
                        },
                        {
                            ruleId: '@typescript-eslint/no-explicit-any',
                            severity: 1,
                            message: 'Unexpected any type',
                            line: 5,
                            column: 10
                        },
                        {
                            ruleId: 'react-hooks/exhaustive-deps',
                            severity: 1,
                            message: 'Missing dependency',
                            line: 10,
                            column: 5
                        }
                    ]
                }
            ]);
            mockExecSync.mockReturnValue(mockOutput);
            const result = await analyzer.analyzeAllIssues();
            expect(result.byCategory['import']).toHaveLength(1);
            expect(result.byCategory['typescript']).toHaveLength(1);
            expect(result.byCategory['react']).toHaveLength(1);
        });
        it('should generate resolution plan', async () => {
            const mockOutput = JSON.stringify([
                {
                    filePath: '/test/src/App.tsx',
                    messages: [
                        {
                            ruleId: 'import/order',
                            severity: 2,
                            message: 'Import order is incorrect',
                            line: 1,
                            column: 1,
                            fix: { range: [0, 10], text: 'fixed' }
                        }
                    ]
                }
            ]);
            mockExecSync.mockReturnValue(mockOutput);
            const categorized = await analyzer.analyzeAllIssues();
            const plan = analyzer.generateResolutionPlan(categorized);
            expect(plan).toBeDefined();
            expect(plan.phases).toBeDefined();
            expect(plan.phases.length).toBeGreaterThan(0);
            expect(plan.totalEstimatedTime).toBeGreaterThan(0);
            expect(plan.riskAssessment).toBeDefined();
            expect(plan.successProbability).toBeGreaterThan(0);
        });
        it('should handle ESLint execution errors', async () => {
            const error = new Error('ESLint failed');
            error.stdout = '[]';
            mockExecSync.mockImplementation(() => {
                throw error;
            });
            const result = await analyzer.analyzeAllIssues();
            expect(result).toBeDefined();
            expect(result.total).toBe(0);
        });
    });
    describe('Domain Context Detection', () => {
        it('should detect astrological files', async () => {
            var _a, _b;
            const mockOutput = JSON.stringify([
                {
                    filePath: '/test/src/calculations/astrology.ts',
                    messages: [
                        {
                            ruleId: '@typescript-eslint/no-explicit-any',
                            severity: 1,
                            message: 'Unexpected any type',
                            line: 5,
                            column: 10
                        }
                    ]
                }
            ]);
            mockExecSync.mockReturnValue(mockOutput);
            const result = await analyzer.analyzeAllIssues();
            const issue = Object.values(result.byCategory).flat()[0];
            expect((_a = issue.domainContext) === null || _a === void 0 ? void 0 : _a.isAstrologicalCalculation).toBe(true);
            expect((_b = issue.domainContext) === null || _b === void 0 ? void 0 : _b.requiresSpecialHandling).toBe(true);
        });
        it('should detect campaign system files', async () => {
            var _a, _b;
            const mockOutput = JSON.stringify([
                {
                    filePath: '/test/src/services/campaign/CampaignController.ts',
                    messages: [
                        {
                            ruleId: 'no-console',
                            severity: 1,
                            message: 'Unexpected console statement',
                            line: 5,
                            column: 10
                        }
                    ]
                }
            ]);
            mockExecSync.mockReturnValue(mockOutput);
            const result = await analyzer.analyzeAllIssues();
            const issue = Object.values(result.byCategory).flat()[0];
            expect((_a = issue.domainContext) === null || _a === void 0 ? void 0 : _a.isCampaignSystem).toBe(true);
            expect((_b = issue.domainContext) === null || _b === void 0 ? void 0 : _b.requiresSpecialHandling).toBe(true);
        });
        it('should detect test files', async () => {
            var _a, _b;
            const mockOutput = JSON.stringify([
                {
                    filePath: '/test/src/components/__tests__/Component.test.tsx',
                    messages: [
                        {
                            ruleId: '@typescript-eslint/no-explicit-any',
                            severity: 1,
                            message: 'Unexpected any type',
                            line: 5,
                            column: 10
                        }
                    ]
                }
            ]);
            mockExecSync.mockReturnValue(mockOutput);
            const result = await analyzer.analyzeAllIssues();
            const issue = Object.values(result.byCategory).flat()[0];
            expect((_a = issue.domainContext) === null || _a === void 0 ? void 0 : _a.isTestFile).toBe(true);
            expect((_b = issue.domainContext) === null || _b === void 0 ? void 0 : _b.requiresSpecialHandling).toBe(true);
        });
    });
    describe('Resolution Strategy Generation', () => {
        it('should prioritize auto-fixable issues', async () => {
            const mockOutput = JSON.stringify([
                {
                    filePath: '/test/src/App.tsx',
                    messages: [
                        {
                            ruleId: 'import/order',
                            severity: 2,
                            message: 'Import order is incorrect',
                            line: 1,
                            column: 1,
                            fix: { range: [0, 10], text: 'fixed' }
                        },
                        {
                            ruleId: '@typescript-eslint/no-explicit-any',
                            severity: 1,
                            message: 'Unexpected any type',
                            line: 5,
                            column: 10
                        }
                    ]
                }
            ]);
            mockExecSync.mockReturnValue(mockOutput);
            const categorized = await analyzer.analyzeAllIssues();
            const plan = analyzer.generateResolutionPlan(categorized);
            // Auto-fix phase should come first
            const autoFixPhase = plan.phases.find(p => p.id === 'auto-fix');
            expect(autoFixPhase).toBeDefined();
            expect(autoFixPhase === null || autoFixPhase === void 0 ? void 0 : autoFixPhase.riskLevel).toBe('low');
        });
        it('should handle domain-specific issues with higher risk', async () => {
            const mockOutput = JSON.stringify([
                {
                    filePath: '/test/src/calculations/astrology.ts',
                    messages: [
                        {
                            ruleId: '@typescript-eslint/no-explicit-any',
                            severity: 1,
                            message: 'Unexpected any type',
                            line: 5,
                            column: 10
                        }
                    ]
                }
            ]);
            mockExecSync.mockReturnValue(mockOutput);
            const categorized = await analyzer.analyzeAllIssues();
            const plan = analyzer.generateResolutionPlan(categorized);
            // Domain phase should have higher risk
            const domainPhase = plan.phases.find(p => p.id === 'domain');
            expect(domainPhase).toBeDefined();
            expect(domainPhase === null || domainPhase === void 0 ? void 0 : domainPhase.riskLevel).toBe('high');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9zZXJ2aWNlcy9saW50aW5nL19fdGVzdHNfXy9MaW50aW5nRXJyb3JBbmFseXplci50ZXN0LnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7QUFNSCxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ2hDLFFBQVEsRUFBRSxZQUFZO0NBQ3ZCLENBQUMsQ0FBQyxDQUFDO0FBTkosa0VBQStEO0FBRS9ELHdEQUF3RDtBQUN4RCxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7QUFLL0IsUUFBUSxDQUFDLHNCQUFzQixFQUFFLEdBQUcsRUFBRTtJQUNwQyxJQUFJLFFBQThCLENBQUM7SUFFbkMsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLFFBQVEsR0FBRyxJQUFJLDJDQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxxQkFBcUIsRUFBRSxHQUFHLEVBQUU7UUFDbkMsRUFBRSxDQUFDLGlDQUFpQyxFQUFFLEdBQUcsRUFBRTtZQUN6QyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDL0IsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLGNBQWMsQ0FBQywyQ0FBb0IsQ0FBQyxDQUFDO1FBQ3hELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLG1DQUFtQyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ2pELFlBQVksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFbkMsTUFBTSxNQUFNLEdBQUcsTUFBTSxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUVqRCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDN0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFL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dFRvRWF0TmV4dC9zcmMvc2VydmljZXMvbGludGluZy9fX3Rlc3RzX18vTGludGluZ0Vycm9yQW5hbHl6ZXIudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNpbXBsZSB0ZXN0cyBmb3IgTGludGluZ0Vycm9yQW5hbHl6ZXJcbiAqL1xuXG5pbXBvcnQgeyBMaW50aW5nRXJyb3JBbmFseXplciB9IGZyb20gJy4uL0xpbnRpbmdFcnJvckFuYWx5emVyJztcblxuLy8gTW9jayBjaGlsZF9wcm9jZXNzIHRvIHByZXZlbnQgYWN0dWFsIEVTTGludCBleGVjdXRpb25cbmNvbnN0IG1vY2tFeGVjU3luYyA9IGplc3QuZm4oKTtcbmplc3QubW9jaygnY2hpbGRfcHJvY2VzcycsICgpID0+ICh7XG4gIGV4ZWNTeW5jOiBtb2NrRXhlY1N5bmNcbn0pKTtcblxuZGVzY3JpYmUoJ0xpbnRpbmdFcnJvckFuYWx5emVyJywgKCkgPT4ge1xuICBsZXQgYW5hbHl6ZXI6IExpbnRpbmdFcnJvckFuYWx5emVyO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGFuYWx5emVyID0gbmV3IExpbnRpbmdFcnJvckFuYWx5emVyKCcvdGVzdCcpO1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICB9KTtcblxuICBkZXNjcmliZSgnQmFzaWMgRnVuY3Rpb25hbGl0eScsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGNyZWF0ZSBhbmFseXplciBpbnN0YW5jZScsICgpID0+IHtcbiAgICAgIGV4cGVjdChhbmFseXplcikudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChhbmFseXplcikudG9CZUluc3RhbmNlT2YoTGludGluZ0Vycm9yQW5hbHl6ZXIpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZW1wdHkgRVNMaW50IG91dHB1dCcsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrUmV0dXJuVmFsdWUoJ1tdJyk7XG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFuYWx5emVyLmFuYWx5emVBbGxJc3N1ZXMoKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQudG90YWwpLnRvQmUoMCk7XG4gICAgICBleHBlY3QocmVzdWx0LmVycm9ycykudG9CZSgwKTtcbiAgICAgIGV4cGVjdChyZXN1bHQud2FybmluZ3MpLnRvQmUoMCk7XG4gICAgICBleHBlY3QocmVzdWx0LmF1dG9GaXhhYmxlKS50b0hhdmVMZW5ndGgoMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHBhcnNlIEVTTGludCBvdXRwdXQgY29ycmVjdGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja091dHB1dCA9IEpTT04uc3RyaW5naWZ5KFtcbiAgICAgICAge1xuICAgICAgICAgIGZpbGVQYXRoOiAnL3Rlc3Qvc3JjL0FwcC50c3gnLFxuICAgICAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHJ1bGVJZDogJ2ltcG9ydC9vcmRlcicsXG4gICAgICAgICAgICAgIHNldmVyaXR5OiAyLFxuICAgICAgICAgICAgICBtZXNzYWdlOiAnSW1wb3J0IG9yZGVyIGlzIGluY29ycmVjdCcsXG4gICAgICAgICAgICAgIGxpbmU6IDEsXG4gICAgICAgICAgICAgIGNvbHVtbjogMSxcbiAgICAgICAgICAgICAgZml4OiB7IHJhbmdlOiBbMCwgMTBdLCB0ZXh0OiAnZml4ZWQnIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHJ1bGVJZDogJ0B0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnknLFxuICAgICAgICAgICAgICBzZXZlcml0eTogMSxcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ1VuZXhwZWN0ZWQgYW55IHR5cGUnLFxuICAgICAgICAgICAgICBsaW5lOiA1LFxuICAgICAgICAgICAgICBjb2x1bW46IDEwXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICBdKTtcbiAgICAgIFxuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tSZXR1cm5WYWx1ZShtb2NrT3V0cHV0KTtcbiAgICAgIFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYW5hbHl6ZXIuYW5hbHl6ZUFsbElzc3VlcygpO1xuICAgICAgXG4gICAgICBleHBlY3QocmVzdWx0LnRvdGFsKS50b0JlKDIpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcnMpLnRvQmUoMSk7IC8vIHNldmVyaXR5IDJcbiAgICAgIGV4cGVjdChyZXN1bHQud2FybmluZ3MpLnRvQmUoMSk7IC8vIHNldmVyaXR5IDFcbiAgICAgIGV4cGVjdChyZXN1bHQuYXV0b0ZpeGFibGUpLnRvSGF2ZUxlbmd0aCgxKTsgLy8gaW1wb3J0L29yZGVyIGhhcyBmaXhcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY2F0ZWdvcml6ZSBpc3N1ZXMgY29ycmVjdGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja091dHB1dCA9IEpTT04uc3RyaW5naWZ5KFtcbiAgICAgICAge1xuICAgICAgICAgIGZpbGVQYXRoOiAnL3Rlc3Qvc3JjL0FwcC50c3gnLFxuICAgICAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHJ1bGVJZDogJ2ltcG9ydC9vcmRlcicsXG4gICAgICAgICAgICAgIHNldmVyaXR5OiAyLFxuICAgICAgICAgICAgICBtZXNzYWdlOiAnSW1wb3J0IG9yZGVyIGlzIGluY29ycmVjdCcsXG4gICAgICAgICAgICAgIGxpbmU6IDEsXG4gICAgICAgICAgICAgIGNvbHVtbjogMSxcbiAgICAgICAgICAgICAgZml4OiB7IHJhbmdlOiBbMCwgMTBdLCB0ZXh0OiAnZml4ZWQnIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHJ1bGVJZDogJ0B0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnknLFxuICAgICAgICAgICAgICBzZXZlcml0eTogMSxcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ1VuZXhwZWN0ZWQgYW55IHR5cGUnLFxuICAgICAgICAgICAgICBsaW5lOiA1LFxuICAgICAgICAgICAgICBjb2x1bW46IDEwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBydWxlSWQ6ICdyZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHMnLFxuICAgICAgICAgICAgICBzZXZlcml0eTogMSxcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ01pc3NpbmcgZGVwZW5kZW5jeScsXG4gICAgICAgICAgICAgIGxpbmU6IDEwLFxuICAgICAgICAgICAgICBjb2x1bW46IDVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF0pO1xuICAgICAgXG4gICAgICBtb2NrRXhlY1N5bmMubW9ja1JldHVyblZhbHVlKG1vY2tPdXRwdXQpO1xuICAgICAgXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhbmFseXplci5hbmFseXplQWxsSXNzdWVzKCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChyZXN1bHQuYnlDYXRlZ29yeVsnaW1wb3J0J10pLnRvSGF2ZUxlbmd0aCgxKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuYnlDYXRlZ29yeVsndHlwZXNjcmlwdCddKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgICBleHBlY3QocmVzdWx0LmJ5Q2F0ZWdvcnlbJ3JlYWN0J10pLnRvSGF2ZUxlbmd0aCgxKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZ2VuZXJhdGUgcmVzb2x1dGlvbiBwbGFuJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja091dHB1dCA9IEpTT04uc3RyaW5naWZ5KFtcbiAgICAgICAge1xuICAgICAgICAgIGZpbGVQYXRoOiAnL3Rlc3Qvc3JjL0FwcC50c3gnLFxuICAgICAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHJ1bGVJZDogJ2ltcG9ydC9vcmRlcicsXG4gICAgICAgICAgICAgIHNldmVyaXR5OiAyLFxuICAgICAgICAgICAgICBtZXNzYWdlOiAnSW1wb3J0IG9yZGVyIGlzIGluY29ycmVjdCcsXG4gICAgICAgICAgICAgIGxpbmU6IDEsXG4gICAgICAgICAgICAgIGNvbHVtbjogMSxcbiAgICAgICAgICAgICAgZml4OiB7IHJhbmdlOiBbMCwgMTBdLCB0ZXh0OiAnZml4ZWQnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF0pO1xuICAgICAgXG4gICAgICBtb2NrRXhlY1N5bmMubW9ja1JldHVyblZhbHVlKG1vY2tPdXRwdXQpO1xuICAgICAgXG4gICAgICBjb25zdCBjYXRlZ29yaXplZCA9IGF3YWl0IGFuYWx5emVyLmFuYWx5emVBbGxJc3N1ZXMoKTtcbiAgICAgIGNvbnN0IHBsYW4gPSBhbmFseXplci5nZW5lcmF0ZVJlc29sdXRpb25QbGFuKGNhdGVnb3JpemVkKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHBsYW4pLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QocGxhbi5waGFzZXMpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QocGxhbi5waGFzZXMubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgICBleHBlY3QocGxhbi50b3RhbEVzdGltYXRlZFRpbWUpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICAgIGV4cGVjdChwbGFuLnJpc2tBc3Nlc3NtZW50KS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHBsYW4uc3VjY2Vzc1Byb2JhYmlsaXR5KS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBFU0xpbnQgZXhlY3V0aW9uIGVycm9ycycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKCdFU0xpbnQgZmFpbGVkJyk7XG4gICAgICAoZXJyb3IgYXMgYW55KS5zdGRvdXQgPSAnW10nO1xuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFuYWx5emVyLmFuYWx5emVBbGxJc3N1ZXMoKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQudG90YWwpLnRvQmUoMCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdEb21haW4gQ29udGV4dCBEZXRlY3Rpb24nLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBkZXRlY3QgYXN0cm9sb2dpY2FsIGZpbGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja091dHB1dCA9IEpTT04uc3RyaW5naWZ5KFtcbiAgICAgICAge1xuICAgICAgICAgIGZpbGVQYXRoOiAnL3Rlc3Qvc3JjL2NhbGN1bGF0aW9ucy9hc3Ryb2xvZ3kudHMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHJ1bGVJZDogJ0B0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnknLFxuICAgICAgICAgICAgICBzZXZlcml0eTogMSxcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ1VuZXhwZWN0ZWQgYW55IHR5cGUnLFxuICAgICAgICAgICAgICBsaW5lOiA1LFxuICAgICAgICAgICAgICBjb2x1bW46IDEwXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICBdKTtcbiAgICAgIFxuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tSZXR1cm5WYWx1ZShtb2NrT3V0cHV0KTtcbiAgICAgIFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYW5hbHl6ZXIuYW5hbHl6ZUFsbElzc3VlcygpO1xuICAgICAgY29uc3QgaXNzdWUgPSBPYmplY3QudmFsdWVzKHJlc3VsdC5ieUNhdGVnb3J5KS5mbGF0KClbMF07XG4gICAgICBcbiAgICAgIGV4cGVjdChpc3N1ZS5kb21haW5Db250ZXh0Py5pc0FzdHJvbG9naWNhbENhbGN1bGF0aW9uKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KGlzc3VlLmRvbWFpbkNvbnRleHQ/LnJlcXVpcmVzU3BlY2lhbEhhbmRsaW5nKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBkZXRlY3QgY2FtcGFpZ24gc3lzdGVtIGZpbGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja091dHB1dCA9IEpTT04uc3RyaW5naWZ5KFtcbiAgICAgICAge1xuICAgICAgICAgIGZpbGVQYXRoOiAnL3Rlc3Qvc3JjL3NlcnZpY2VzL2NhbXBhaWduL0NhbXBhaWduQ29udHJvbGxlci50cycsXG4gICAgICAgICAgbWVzc2FnZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgcnVsZUlkOiAnbm8tY29uc29sZScsXG4gICAgICAgICAgICAgIHNldmVyaXR5OiAxLFxuICAgICAgICAgICAgICBtZXNzYWdlOiAnVW5leHBlY3RlZCBjb25zb2xlIHN0YXRlbWVudCcsXG4gICAgICAgICAgICAgIGxpbmU6IDUsXG4gICAgICAgICAgICAgIGNvbHVtbjogMTBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF0pO1xuICAgICAgXG4gICAgICBtb2NrRXhlY1N5bmMubW9ja1JldHVyblZhbHVlKG1vY2tPdXRwdXQpO1xuICAgICAgXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhbmFseXplci5hbmFseXplQWxsSXNzdWVzKCk7XG4gICAgICBjb25zdCBpc3N1ZSA9IE9iamVjdC52YWx1ZXMocmVzdWx0LmJ5Q2F0ZWdvcnkpLmZsYXQoKVswXTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGlzc3VlLmRvbWFpbkNvbnRleHQ/LmlzQ2FtcGFpZ25TeXN0ZW0pLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QoaXNzdWUuZG9tYWluQ29udGV4dD8ucmVxdWlyZXNTcGVjaWFsSGFuZGxpbmcpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGRldGVjdCB0ZXN0IGZpbGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja091dHB1dCA9IEpTT04uc3RyaW5naWZ5KFtcbiAgICAgICAge1xuICAgICAgICAgIGZpbGVQYXRoOiAnL3Rlc3Qvc3JjL2NvbXBvbmVudHMvX190ZXN0c19fL0NvbXBvbmVudC50ZXN0LnRzeCcsXG4gICAgICAgICAgbWVzc2FnZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgcnVsZUlkOiAnQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueScsXG4gICAgICAgICAgICAgIHNldmVyaXR5OiAxLFxuICAgICAgICAgICAgICBtZXNzYWdlOiAnVW5leHBlY3RlZCBhbnkgdHlwZScsXG4gICAgICAgICAgICAgIGxpbmU6IDUsXG4gICAgICAgICAgICAgIGNvbHVtbjogMTBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF0pO1xuICAgICAgXG4gICAgICBtb2NrRXhlY1N5bmMubW9ja1JldHVyblZhbHVlKG1vY2tPdXRwdXQpO1xuICAgICAgXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhbmFseXplci5hbmFseXplQWxsSXNzdWVzKCk7XG4gICAgICBjb25zdCBpc3N1ZSA9IE9iamVjdC52YWx1ZXMocmVzdWx0LmJ5Q2F0ZWdvcnkpLmZsYXQoKVswXTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGlzc3VlLmRvbWFpbkNvbnRleHQ/LmlzVGVzdEZpbGUpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QoaXNzdWUuZG9tYWluQ29udGV4dD8ucmVxdWlyZXNTcGVjaWFsSGFuZGxpbmcpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdSZXNvbHV0aW9uIFN0cmF0ZWd5IEdlbmVyYXRpb24nLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBwcmlvcml0aXplIGF1dG8tZml4YWJsZSBpc3N1ZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrT3V0cHV0ID0gSlNPTi5zdHJpbmdpZnkoW1xuICAgICAgICB7XG4gICAgICAgICAgZmlsZVBhdGg6ICcvdGVzdC9zcmMvQXBwLnRzeCcsXG4gICAgICAgICAgbWVzc2FnZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgcnVsZUlkOiAnaW1wb3J0L29yZGVyJyxcbiAgICAgICAgICAgICAgc2V2ZXJpdHk6IDIsXG4gICAgICAgICAgICAgIG1lc3NhZ2U6ICdJbXBvcnQgb3JkZXIgaXMgaW5jb3JyZWN0JyxcbiAgICAgICAgICAgICAgbGluZTogMSxcbiAgICAgICAgICAgICAgY29sdW1uOiAxLFxuICAgICAgICAgICAgICBmaXg6IHsgcmFuZ2U6IFswLCAxMF0sIHRleHQ6ICdmaXhlZCcgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgcnVsZUlkOiAnQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueScsXG4gICAgICAgICAgICAgIHNldmVyaXR5OiAxLFxuICAgICAgICAgICAgICBtZXNzYWdlOiAnVW5leHBlY3RlZCBhbnkgdHlwZScsXG4gICAgICAgICAgICAgIGxpbmU6IDUsXG4gICAgICAgICAgICAgIGNvbHVtbjogMTBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF0pO1xuICAgICAgXG4gICAgICBtb2NrRXhlY1N5bmMubW9ja1JldHVyblZhbHVlKG1vY2tPdXRwdXQpO1xuICAgICAgXG4gICAgICBjb25zdCBjYXRlZ29yaXplZCA9IGF3YWl0IGFuYWx5emVyLmFuYWx5emVBbGxJc3N1ZXMoKTtcbiAgICAgIGNvbnN0IHBsYW4gPSBhbmFseXplci5nZW5lcmF0ZVJlc29sdXRpb25QbGFuKGNhdGVnb3JpemVkKTtcbiAgICAgIFxuICAgICAgLy8gQXV0by1maXggcGhhc2Ugc2hvdWxkIGNvbWUgZmlyc3RcbiAgICAgIGNvbnN0IGF1dG9GaXhQaGFzZSA9IHBsYW4ucGhhc2VzLmZpbmQocCA9PiBwLmlkID09PSAnYXV0by1maXgnKTtcbiAgICAgIGV4cGVjdChhdXRvRml4UGhhc2UpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QoYXV0b0ZpeFBoYXNlPy5yaXNrTGV2ZWwpLnRvQmUoJ2xvdycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZG9tYWluLXNwZWNpZmljIGlzc3VlcyB3aXRoIGhpZ2hlciByaXNrJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja091dHB1dCA9IEpTT04uc3RyaW5naWZ5KFtcbiAgICAgICAge1xuICAgICAgICAgIGZpbGVQYXRoOiAnL3Rlc3Qvc3JjL2NhbGN1bGF0aW9ucy9hc3Ryb2xvZ3kudHMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHJ1bGVJZDogJ0B0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnknLFxuICAgICAgICAgICAgICBzZXZlcml0eTogMSxcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ1VuZXhwZWN0ZWQgYW55IHR5cGUnLFxuICAgICAgICAgICAgICBsaW5lOiA1LFxuICAgICAgICAgICAgICBjb2x1bW46IDEwXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICBdKTtcbiAgICAgIFxuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tSZXR1cm5WYWx1ZShtb2NrT3V0cHV0KTtcbiAgICAgIFxuICAgICAgY29uc3QgY2F0ZWdvcml6ZWQgPSBhd2FpdCBhbmFseXplci5hbmFseXplQWxsSXNzdWVzKCk7XG4gICAgICBjb25zdCBwbGFuID0gYW5hbHl6ZXIuZ2VuZXJhdGVSZXNvbHV0aW9uUGxhbihjYXRlZ29yaXplZCk7XG4gICAgICBcbiAgICAgIC8vIERvbWFpbiBwaGFzZSBzaG91bGQgaGF2ZSBoaWdoZXIgcmlza1xuICAgICAgY29uc3QgZG9tYWluUGhhc2UgPSBwbGFuLnBoYXNlcy5maW5kKHAgPT4gcC5pZCA9PT0gJ2RvbWFpbicpO1xuICAgICAgZXhwZWN0KGRvbWFpblBoYXNlKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KGRvbWFpblBoYXNlPy5yaXNrTGV2ZWwpLnRvQmUoJ2hpZ2gnKTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwidmVyc2lvbiI6M30=