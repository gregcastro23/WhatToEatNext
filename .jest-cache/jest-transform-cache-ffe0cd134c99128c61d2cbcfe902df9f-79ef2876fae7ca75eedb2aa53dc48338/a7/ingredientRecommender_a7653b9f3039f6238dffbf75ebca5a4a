98dd325f5472357185c7501c43163b5d
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.recommendIngredients = exports.getChakraBasedRecommendations = exports.calculateElementalInfluences = exports.getIngredientRecommendations = exports.getRecommendedIngredients = void 0;
// Import actual ingredient data
const vegetables_1 = require("@/data/ingredients/vegetables");
const fruits_1 = require("@/data/ingredients/fruits");
const herbs_1 = require("@/data/ingredients/herbs");
const spices_1 = require("@/data/ingredients/spices");
const proteins_1 = require("@/data/ingredients/proteins");
const grains_1 = require("@/data/ingredients/grains");
const seasonings_1 = require("@/data/ingredients/seasonings");
const oils_1 = require("@/data/ingredients/oils");
// Import planet data
const venus_1 = __importDefault(require("@/data/planets/venus"));
const mars_1 = __importDefault(require("@/data/planets/mars"));
const mercury_1 = __importDefault(require("@/data/planets/mercury"));
const chakraSymbols_1 = require("@/constants/chakraSymbols");
const ingredientCategories_1 = require("@/data/ingredientCategories");
// Import the getAllIngredients function if it exists, otherwise we'll create our own
const foodRecommender_1 = require("@/utils/foodRecommender");
// Combine all real ingredients data
const allIngredients = [
    ...Object.values(vegetables_1.vegetables || {}),
    ...Object.values(fruits_1.fruits || {}),
    ...Object.values(herbs_1.herbs || {}),
    ...Object.values(spices_1.spices || {}),
    ...Object.values(proteins_1.proteins || {}),
    ...Object.values(grains_1.grains || {}),
    ...Object.values(seasonings_1.seasonings || {}),
    ...Object.values(oils_1.oils || {})
].filter(Boolean);
// Fallback implementation of getAllIngredients that uses ingredientCategories
function getAllIngredients() {
    // If the imported function exists, use it
    if (typeof foodRecommender_1.getAllIngredients === 'function') {
        // Apply Pattern K: Safe unknown-first casting for type compatibility
        return (0, foodRecommender_1.getAllIngredients)();
    }
    // Otherwise, use our fallback implementation
    const allIngredients = [];
    // Process each category in ingredientCategories
    Object.entries(ingredientCategories_1.ingredientCategories).forEach(([category, ingredientsMap]) => {
        Object.entries(ingredientsMap).forEach(([name, data]) => {
            const ingredientData = data;
            allIngredients.push({
                name,
                type: category.endsWith('s') ? category.slice(0, -1) : category,
                category,
                elementalProperties: ingredientData.elementalProperties,
                astrologicalProfile: ingredientData.astrologicalProfile,
                ...ingredientData
            });
        });
    });
    return allIngredients;
}
/**
 * Returns a list of ingredients that match the current astrological state
 */
function getRecommendedIngredients(astroState) {
    var _a, _b, _c, _d, _e, _f;
    // Get the active planets from the astrological state
    const activePlanets = astroState.activePlanets || [];
    // If we don't have any active planets, use all planets by default
    const planetsToUse = activePlanets.length > 0
        ? activePlanets
        : ['Sun', 'Moon', 'Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune', 'Pluto'];
    // Filter ingredients based on matching planetary rulers
    // Apply Pattern K: Safe unknown-first casting for mixed ingredient array
    let filteredIngredients = allIngredients.filter(ingredient => {
        var _a, _b;
        // Check if any of the ingredient's ruling planets are active
        const baseIngredient = ingredient;
        return (_b = (_a = baseIngredient === null || baseIngredient === void 0 ? void 0 : baseIngredient.astrologicalProfile) === null || _a === void 0 ? void 0 : _a.rulingPlanets) === null || _b === void 0 ? void 0 : _b.some(planet => planetsToUse.includes(planet));
    });
    // If no matching ingredients, return a sample of all ingredients
    if (filteredIngredients.length === 0) {
        filteredIngredients = allIngredients.slice(0, 20);
    }
    // Special handling for Venus influence when present
    if (planetsToUse.includes('Venus')) {
        // Apply Pattern K: Safe array type casting for function parameter compatibility
        // Prioritize Venus-ruled ingredients with improved scoring based on detailed Venus data
        enhanceVenusIngredientBatch(filteredIngredients, astroState);
    }
    // Special handling for Mars influence when present
    if (planetsToUse.includes('Mars')) {
        // Apply Pattern K: Safe array type casting for function parameter compatibility
        // Prioritize Mars-ruled ingredients with improved scoring based on detailed Mars data
        enhanceMarsIngredientScoring(filteredIngredients, astroState);
    }
    // Special handling for Mercury influence when present
    if (planetsToUse.includes('Mercury')) {
        // Apply Pattern K: Safe array type casting for function parameter compatibility
        // Prioritize Mercury-ruled ingredients with improved scoring based on detailed Mercury data
        enhanceMercuryIngredientScoring(filteredIngredients, astroState);
    }
    // If we have a dominant element from the astro state, prioritize ingredients of that element
    if (astroState.dominantElement) {
        filteredIngredients.sort((a, b) => {
            var _a, _b;
            const ingredientA = a;
            const ingredientB = b;
            const aValue = ((_a = ingredientA === null || ingredientA === void 0 ? void 0 : ingredientA.elementalProperties) === null || _a === void 0 ? void 0 : _a[astroState.dominantElement]) || 0;
            const bValue = ((_b = ingredientB === null || ingredientB === void 0 ? void 0 : ingredientB.elementalProperties) === null || _b === void 0 ? void 0 : _b[astroState.dominantElement]) || 0;
            return bValue - aValue;
        });
    }
    // If we have a current zodiac sign, prioritize ingredients with that affinity
    if (astroState.zodiacSign) {
        const zodiacSign = astroState.zodiacSign.toLowerCase();
        // Apply Venus's zodiac transit data if Venus is active and in this sign
        const venusBoost = planetsToUse.includes('Venus') &&
            ((_b = (_a = venus_1.default.PlanetSpecific) === null || _a === void 0 ? void 0 : _a.ZodiacTransit) === null || _b === void 0 ? void 0 : _b[astroState.zodiacSign]) ? 2 : 0;
        // Apply Mars's zodiac transit data if Mars is active and in this sign
        const marsBoost = planetsToUse.includes('Mars') &&
            ((_d = (_c = mars_1.default.PlanetSpecific) === null || _c === void 0 ? void 0 : _c.ZodiacTransit) === null || _d === void 0 ? void 0 : _d[astroState.zodiacSign]) ? 2 : 0;
        // Apply Mercury's zodiac transit data if Mercury is active and in this sign
        const mercuryBoost = planetsToUse.includes('Mercury') &&
            ((_f = (_e = mercury_1.default.PlanetSpecific) === null || _e === void 0 ? void 0 : _e.ZodiacTransit) === null || _f === void 0 ? void 0 : _f[astroState.zodiacSign]) ? 2 : 0;
        filteredIngredients.sort((a, b) => {
            var _a, _b, _c, _d;
            const ingredientA = a;
            const ingredientB = b;
            let aHasAffinity = ((_b = (_a = ingredientA === null || ingredientA === void 0 ? void 0 : ingredientA.astrologicalProfile) === null || _a === void 0 ? void 0 : _a.signAffinities) === null || _b === void 0 ? void 0 : _b.includes(zodiacSign)) ? 1 : 0;
            let bHasAffinity = ((_d = (_c = ingredientB === null || ingredientB === void 0 ? void 0 : ingredientB.astrologicalProfile) === null || _c === void 0 ? void 0 : _c.signAffinities) === null || _d === void 0 ? void 0 : _d.includes(zodiacSign)) ? 1 : 0;
            // Boost ingredients with Venus associations when Venus is active
            if (planetsToUse.includes('Venus')) {
                if (isVenusAssociatedIngredient((ingredientA === null || ingredientA === void 0 ? void 0 : ingredientA.name) || ''))
                    aHasAffinity += venusBoost;
                if (isVenusAssociatedIngredient((ingredientB === null || ingredientB === void 0 ? void 0 : ingredientB.name) || ''))
                    bHasAffinity += venusBoost;
            }
            // Boost ingredients with Mars associations when Mars is active
            if (planetsToUse.includes('Mars')) {
                if (isMarsAssociatedIngredient((ingredientA === null || ingredientA === void 0 ? void 0 : ingredientA.name) || ''))
                    aHasAffinity += marsBoost;
                if (isMarsAssociatedIngredient((ingredientB === null || ingredientB === void 0 ? void 0 : ingredientB.name) || ''))
                    bHasAffinity += marsBoost;
            }
            // Boost ingredients with Mercury associations when Mercury is active
            if (planetsToUse.includes('Mercury')) {
                if (isMercuryAssociatedIngredient((ingredientA === null || ingredientA === void 0 ? void 0 : ingredientA.name) || ''))
                    aHasAffinity += mercuryBoost;
                if (isMercuryAssociatedIngredient((ingredientB === null || ingredientB === void 0 ? void 0 : ingredientB.name) || ''))
                    bHasAffinity += mercuryBoost;
            }
            return bHasAffinity - aHasAffinity;
        });
    }
    return filteredIngredients;
}
exports.getRecommendedIngredients = getRecommendedIngredients;
/**
 * Returns recommendations grouped by category based on elemental properties and options
 */
function getIngredientRecommendations(elementalProps, options) {
    var _a;
    // Get all ingredients
    const allIngredients = getAllIngredients();
    // Calculate ruling planet based on sun's position
    const sunSign = (_a = elementalProps.zodiacSign) === null || _a === void 0 ? void 0 : _a.toLowerCase();
    // Map of signs to their ruling planets
    const signRulers = {
        'aries': 'Mars',
        'taurus': 'Venus',
        'gemini': 'Mercury',
        'cancer': 'Moon',
        'leo': 'Sun',
        'virgo': 'Mercury',
        'libra': 'Venus',
        'scorpio': 'Mars',
        'sagittarius': 'Jupiter',
        'capricorn': 'Saturn',
        'aquarius': 'Saturn',
        'pisces': 'Jupiter' // Traditional ruler
    };
    const rulingPlanet = signRulers[sunSign] || 'Sun';
    // Get decan information for each planet position
    const planetDecans = {};
    Object.entries(elementalProps.planetaryAlignment || {}).forEach(([planet, position]) => {
        var _a, _b;
        if (!position || !position.sign)
            return;
        const sign = position.sign.toLowerCase();
        const degree = position.degree || 0;
        // Determine which decan the planet is in
        let decanNum = 1;
        if (degree >= 10 && degree < 20)
            decanNum = 2;
        else if (degree >= 20)
            decanNum = 3;
        // Reference data for decan rulers and tarot cards based on sign and decan
        const decanRulerMap = {
            'aries': { 1: 'Mars', 2: 'Sun', 3: 'Venus' },
            'taurus': { 1: 'Mercury', 2: 'Moon', 3: 'Saturn' },
            'gemini': { 1: 'Jupiter', 2: 'Mars', 3: 'Sun' },
            'cancer': { 1: 'Venus', 2: 'Mercury', 3: 'Moon' },
            'leo': { 1: 'Saturn', 2: 'Jupiter', 3: 'Mars' },
            'virgo': { 1: 'Sun', 2: 'Venus', 3: 'Mercury' },
            'libra': { 1: 'Moon', 2: 'Saturn', 3: 'Jupiter' },
            'scorpio': { 1: 'Mars', 2: 'Sun', 3: 'Venus' },
            'sagittarius': { 1: 'Mercury', 2: 'Moon', 3: 'Saturn' },
            'capricorn': { 1: 'Jupiter', 2: 'Mars', 3: 'Sun' },
            'aquarius': { 1: 'Venus', 2: 'Mercury', 3: 'Moon' },
            'pisces': { 1: 'Saturn', 2: 'Jupiter', 3: 'Mars' }
        };
        const tarotCardMap = {
            'aries': { 1: '2 of Wands', 2: '3 of Wands', 3: '4 of Wands' },
            'taurus': { 1: '5 of Pentacles', 2: '6 of Pentacles', 3: '7 of Pentacles' },
            'gemini': { 1: '8 of Swords', 2: '9 of Swords', 3: '10 of Swords' },
            'cancer': { 1: '2 of Cups', 2: '3 of Cups', 3: '4 of Cups' },
            'leo': { 1: '5 of Wands', 2: '6 of Wands', 3: '7 of Wands' },
            'virgo': { 1: '8 of Pentacles', 2: '9 of Pentacles', 3: '10 of Pentacles' },
            'libra': { 1: '2 of Swords', 2: '3 of Swords', 3: '4 of Swords' },
            'scorpio': { 1: '5 of Cups', 2: '6 of Cups', 3: '7 of Cups' },
            'sagittarius': { 1: '8 of Wands', 2: '9 of Wands', 3: '10 of Wands' },
            'capricorn': { 1: '2 of Pentacles', 2: '3 of Pentacles', 3: '4 of Pentacles' },
            'aquarius': { 1: '5 of Swords', 2: '6 of Swords', 3: '7 of Swords' },
            'pisces': { 1: '8 of Cups', 2: '9 of Cups', 3: '10 of Cups' }
        };
        const decanRuler = ((_a = decanRulerMap[sign]) === null || _a === void 0 ? void 0 : _a[decanNum]) || '';
        const tarotCard = ((_b = tarotCardMap[sign]) === null || _b === void 0 ? void 0 : _b[decanNum]) || '';
        planetDecans[planet] = { decanNum, decanRuler, tarotCard };
    });
    // Filter and score ingredients
    const scoredIngredients = allIngredients
        .filter(ingredient => {
        var _a;
        // Apply basic filters
        if ((_a = options.excludeIngredients) === null || _a === void 0 ? void 0 : _a.includes(ingredient === null || ingredient === void 0 ? void 0 : ingredient.name))
            return false;
        if (options.includeOnly && !options.includeOnly.includes(ingredient === null || ingredient === void 0 ? void 0 : ingredient.name))
            return false;
        if (options.category && ingredient.category !== options.category)
            return false;
        // Filter by dietary preference if specified
        if (options.dietaryPreferences && options.dietaryPreferences.length > 0) {
            const dietaryMatches = options.dietaryPreferences.some(pref => { var _a; return (_a = ingredient.dietary) === null || _a === void 0 ? void 0 : _a.includes(pref); });
            if (!dietaryMatches)
                return false;
        }
        // Filter by modality preference if specified
        if (options.modalityPreference) {
            const ingredientModality = ingredient.modality ||
                determineIngredientModality(ingredient.qualities, ingredient === null || ingredient === void 0 ? void 0 : ingredient.elementalProperties);
            if (ingredientModality !== options.modalityPreference)
                return false;
        }
        return true;
    })
        .map(ingredient => {
        // Calculate elemental score (30% of total)
        const elementalScore = calculateElementalScore(ingredient === null || ingredient === void 0 ? void 0 : ingredient.elementalProperties, elementalProps);
        // Calculate modality score (15% of total)
        const modalityScore = calculateModalityScore(ingredient.qualities || [], options.modalityPreference);
        // Calculate seasonal score (15% of total)
        const seasonalScore = calculateSeasonalScore(ingredient, elementalProps.timestamp);
        // Calculate planetary score (40% of total) - increased weight for planetary alignment
        const planetaryScore = calculateEnhancedPlanetaryScore(ingredient, elementalProps.planetaryAlignment, planetDecans, rulingPlanet);
        // Calculate total score with weighted components
        const totalScore = (elementalScore * 0.30 +
            modalityScore * 0.15 +
            seasonalScore * 0.15 +
            planetaryScore * 0.40);
        // Assign modality if not already present
        const modality = ingredient.modality ||
            determineIngredientModality(ingredient.qualities, ingredient === null || ingredient === void 0 ? void 0 : ingredient.elementalProperties);
        return {
            ...ingredient,
            score: totalScore,
            elementalScore,
            modalityScore,
            seasonalScore,
            planetaryScore,
            modality
        };
    })
        .sort((a, b) => b.score - a.score);
    // Group ingredients by category
    const groupedRecommendations = {};
    // Apply limit per category before grouping to ensure diversity
    const limit = options.limit || 24;
    const categoryCounts = {};
    const categoryMaxItems = Math.ceil(limit / 8); // Max items per category
    scoredIngredients.forEach(ingredient => {
        const category = ingredient.category || 'other';
        if (!groupedRecommendations[category]) {
            groupedRecommendations[category] = [];
            categoryCounts[category] = 0;
        }
        if (categoryCounts[category] < categoryMaxItems) {
            // Apply Pattern L: Interface property mapping for IngredientRecommendation compatibility
            const ingredientData = ingredient;
            const ingredientRecommendation = {
                name: ingredient.name || '',
                type: (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.type) || (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.category) || 'ingredient',
                category: ingredient.category,
                elementalProperties: ingredient.elementalProperties,
                qualities: ingredient.qualities,
                matchScore: ingredient.score || 0,
                modality: ingredient.modality,
                recommendations: (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.recommendations) || [],
                description: (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.description) || `Recommended ${ingredient.name}`,
                totalScore: (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.totalScore) || ingredient.score || 0,
                elementalScore: ingredient.elementalScore,
                astrologicalScore: (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.astrologicalScore) || 0,
                seasonalScore: ingredient.seasonalScore,
                dietary: (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.dietary) || []
            };
            groupedRecommendations[category].push(ingredientRecommendation);
            categoryCounts[category]++;
        }
    });
    return groupedRecommendations;
}
exports.getIngredientRecommendations = getIngredientRecommendations;
// Helper function to calculate modality score
function calculateModalityScore(qualities, preferredModality) {
    var _a;
    // Get the ingredient's modality based on qualities
    const ingredientModality = determineIngredientModality(qualities);
    // If no preferred modality, return neutral score
    if (!preferredModality)
        return 0.5;
    // Return 1.0 for exact match, 0.5 for partial match, 0.0 for mismatch
    if (ingredientModality === preferredModality)
        return 1.0;
    // Consider partial matches based on modality compatibility
    const compatibleModalities = {
        Cardinal: ['Mutable'],
        Fixed: ['Mutable'],
        Mutable: ['Cardinal', 'Fixed']
    };
    if ((_a = compatibleModalities[preferredModality]) === null || _a === void 0 ? void 0 : _a.includes(ingredientModality)) {
        return 0.7;
    }
    return 0.3;
}
/**
 * Calculate elemental score between ingredient and system elemental properties
 * Enhanced to give more weight to dominant elements and better similarity calculation
 */
function calculateElementalScore(ingredientProps, systemProps) {
    // Return neutral score if either properties are missing
    if (!ingredientProps || !systemProps)
        return 0.5;
    // Find dominant system element for extra weighting
    const dominantElement = Object.entries(systemProps)
        .sort((a, b) => b[1] - a[1])[0][0];
    // Calculate similarity based on overlap of elemental properties
    let similarityScore = 0;
    let totalWeight = 0;
    // Process each element
    for (const element of ['Fire', 'Water', 'Earth', 'Air']) {
        const ingredientValue = ingredientProps[element] || 0;
        const systemValue = systemProps[element] || 0;
        // Calculate similarity (1 - absolute difference)
        // This gives higher scores when values are closer together
        const similarity = 1 - Math.abs(ingredientValue - systemValue);
        // Enhanced weighting: dominant element gets extra emphasis
        // Base weight includes the system's value for this element
        const baseWeight = systemValue + 0.25; // Add 0.25 to ensure all elements have some weight
        // Apply 1.5x multiplier to the dominant element's weight
        const finalWeight = element === dominantElement ? baseWeight * 1.5 : baseWeight;
        similarityScore += similarity * finalWeight;
        totalWeight += finalWeight;
    }
    // Normalize to 0-1 range with explicit bounds
    return totalWeight > 0 ? Math.min(1, Math.max(0, similarityScore / totalWeight)) : 0.5;
}
/**
 * Calculate seasonal score for an ingredient based on current date
 * @param ingredient Ingredient to score
 * @param date Current date
 * @returns Seasonal score (0-1)
 */
function calculateSeasonalScore(ingredient, date) {
    // Default score if no seasonality data
    if (!(ingredient === null || ingredient === void 0 ? void 0 : ingredient.seasonality))
        return 0.5;
    // Get current month and convert to season
    const month = date.getMonth(); // 0-11
    let currentSeason;
    // Northern hemisphere seasons
    if (month >= 2 && month <= 4) {
        currentSeason = 'spring';
    }
    else if (month >= 5 && month <= 7) {
        currentSeason = 'summer';
    }
    else if (month >= 8 && month <= 10) {
        currentSeason = 'fall';
    }
    else {
        currentSeason = 'winter';
    }
    // Get seasonality score for current season
    const seasonScore = (ingredient === null || ingredient === void 0 ? void 0 : ingredient.seasonality[currentSeason]) || 0.5;
    return seasonScore;
}
/**
 * Enhanced planetary score calculation that considers decans and tarot associations,
 * with special weight for the ruling planet determined by sun position
 */
function calculateEnhancedPlanetaryScore(ingredient, planetaryAlignment, planetDecans, rulingPlanet) {
    var _a;
    if (!(ingredient === null || ingredient === void 0 ? void 0 : ingredient.astrologicalProfile))
        return 0.5; // Neutral score for ingredients without profile
    let score = 0;
    let totalFactors = 0;
    // Check ruling planet correspondence - this gets extra weight
    if ((_a = ingredient === null || ingredient === void 0 ? void 0 : ingredient.astrologicalProfile.rulingPlanets) === null || _a === void 0 ? void 0 : _a.includes(rulingPlanet)) {
        score += 1.5; // Significant boost for ruling planet correspondence
        totalFactors += 1.5;
    }
    // Check planetary positions against ingredient affinities
    Object.entries(planetaryAlignment).forEach(([planet, position]) => {
        var _a, _b, _c, _d;
        if (!position.sign)
            return;
        const planetName = planet.charAt(0).toUpperCase() + planet.slice(1);
        // Regular planetary ruler scoring
        if ((_a = ingredient === null || ingredient === void 0 ? void 0 : ingredient.astrologicalProfile.rulingPlanets) === null || _a === void 0 ? void 0 : _a.includes(planetName)) {
            score += 1;
            totalFactors += 1;
        }
        // Check sign affinities 
        if ((_b = ingredient === null || ingredient === void 0 ? void 0 : ingredient.astrologicalProfile.signAffinities) === null || _b === void 0 ? void 0 : _b.includes(position.sign.toLowerCase())) {
            score += 1;
            totalFactors += 1;
        }
        // Special handling for decan rulers
        const decanInfo = planetDecans[planet];
        if (decanInfo && ((_c = ingredient === null || ingredient === void 0 ? void 0 : ingredient.astrologicalProfile.rulingPlanets) === null || _c === void 0 ? void 0 : _c.includes(decanInfo.decanRuler))) {
            score += 0.8; // Good bonus for decan ruler match
            totalFactors += 0.8;
        }
        // Tarot card associations - add subtle influence
        if ((decanInfo === null || decanInfo === void 0 ? void 0 : decanInfo.tarotCard) && ((_d = ingredient === null || ingredient === void 0 ? void 0 : ingredient.astrologicalProfile.tarotAssociations) === null || _d === void 0 ? void 0 : _d.includes(decanInfo.tarotCard))) {
            score += 0.7;
            totalFactors += 0.7;
        }
    });
    // If there are no factors to consider, return neutral score
    if (totalFactors === 0)
        return 0.5;
    // Return normalized score (0-1 range)
    return Math.min(1, score / (totalFactors + 0.5));
}
/**
 * Calculate planetary influences based on planetary alignment
 * @param planetaryAlignment Current planetary positions
 * @returns Elemental influence values
 */
function calculateElementalInfluences(planetaryAlignment) {
    // Define elemental affinities for each zodiac sign
    const zodiacElements = {
        'aries': 'Fire',
        'taurus': 'Earth',
        'gemini': 'Air',
        'cancer': 'Water',
        'leo': 'Fire',
        'virgo': 'Earth',
        'libra': 'Air',
        'scorpio': 'Water',
        'sagittarius': 'Fire',
        'capricorn': 'Earth',
        'aquarius': 'Air',
        'pisces': 'Water'
    };
    // Define planet weights
    const planetWeights = {
        'sun': 5,
        'moon': 4,
        'mercury': 3,
        'venus': 3,
        'mars': 3,
        'jupiter': 2,
        'saturn': 2,
        'uranus': 1,
        'neptune': 1,
        'pluto': 1
    };
    // Initialize elemental influences
    const elementalInfluences = {
        Fire: 0,
        Earth: 0,
        Air: 0,
        Water: 0
    };
    // Process each planetary position
    Object.entries(planetaryAlignment).forEach(([planet, position]) => {
        const planetLower = planet.toLowerCase();
        const weight = planetWeights[planetLower] || 1;
        const sign = position.sign.toLowerCase();
        const element = zodiacElements[position.sign] || zodiacElements[sign];
        if (element) {
            elementalInfluences[element] += weight;
        }
    });
    // Normalize values to sum to 1
    const total = Object.values(elementalInfluences).reduce((sum, val) => sum + val, 0);
    if (total > 0) {
        Object.keys(elementalInfluences).forEach(element => {
            elementalInfluences[element] =
                elementalInfluences[element] / total;
        });
    }
    return elementalInfluences;
}
exports.calculateElementalInfluences = calculateElementalInfluences;
/**
 * Get ingredient recommendations based on chakra energies
 * @param chakraEnergies Current chakra energy levels
 * @param limit Maximum number of recommendations per chakra
 * @returns Grouped ingredient recommendations based on chakra influences
 */
function getChakraBasedRecommendations(chakraEnergies, limit = 3) {
    // Find the dominant chakras (highest energy levels)
    const chakraEntries = Object.entries(chakraEnergies);
    // Sort chakras by energy level (highest first)
    const sortedChakras = chakraEntries.sort(([, energyA], [, energyB]) => energyB - energyA);
    // Take only chakras with significant energy (> 0)
    const significantChakras = sortedChakras.filter(([, energy]) => energy > 0);
    // Prepare the result object
    const result = {};
    // For each significant chakra, add corresponding recommended ingredients
    significantChakras.forEach(([chakra, energy]) => {
        // Get nutritional correlations for this chakra
        const nutritionalCorrelations = chakraSymbols_1.CHAKRA_NUTRITIONAL_CORRELATIONS[chakra] || [];
        const herbRecommendations = chakraSymbols_1.CHAKRA_HERBS[chakra] || [];
        // Find ingredients that match these correlations
        const matchingIngredients = allIngredients.filter(ingredient => {
            // Check if ingredient name or type matches any nutritional correlation
            const matchesNutritional = nutritionalCorrelations.some(correlation => (ingredient === null || ingredient === void 0 ? void 0 : ingredient.name.toLowerCase().includes(correlation.toLowerCase())) ||
                ((ingredient === null || ingredient === void 0 ? void 0 : ingredient.type) ? ingredient.type.toLowerCase().includes(correlation.toLowerCase()) : false));
            // Check if ingredient name matches any herb recommendation
            const matchesHerb = herbRecommendations.some(herb => ingredient === null || ingredient === void 0 ? void 0 : ingredient.name.toLowerCase().includes(herb.toLowerCase()));
            return matchesNutritional || matchesHerb;
        });
        // Add matching ingredients to the result, with a score based on chakra energy
        matchingIngredients.forEach(ingredient => {
            var _a, _b;
            const recommendationKey = (ingredient === null || ingredient === void 0 ? void 0 : ingredient.type) ? `${ingredient.type.toLowerCase()}s` : 'others';
            if (!result[recommendationKey]) {
                result[recommendationKey] = [];
            }
            // Create recommendation with chakra-based score
            const recommendation = {
                ...ingredient,
                matchScore: energy / 10,
                recommendations: [
                    `Supports ${chakra} chakra energy`,
                    ...(nutritionalCorrelations.filter(corr => {
                        var _a;
                        return ((_a = ingredient === null || ingredient === void 0 ? void 0 : ingredient.name) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes(corr.toLowerCase())) ||
                            ((ingredient === null || ingredient === void 0 ? void 0 : ingredient.type) ? ingredient.type.toLowerCase().includes(corr.toLowerCase()) : false);
                    }) || [])
                ]
            };
            // Only add if not already present
            if (!((_a = result[recommendationKey]) === null || _a === void 0 ? void 0 : _a.some(rec => rec.name === (ingredient === null || ingredient === void 0 ? void 0 : ingredient.name)))) {
                (_b = result[recommendationKey]) === null || _b === void 0 ? void 0 : _b.push(recommendation);
            }
        });
    });
    // Apply limit to each category
    Object.keys(result).forEach(key => {
        var _a, _b;
        if (((_a = result[key]) === null || _a === void 0 ? void 0 : _a.length) > limit) {
            result[key] = (_b = result[key]) === null || _b === void 0 ? void 0 : _b.slice(0, limit);
        }
    });
    return result;
}
exports.getChakraBasedRecommendations = getChakraBasedRecommendations;
// Helper function to check if an ingredient is Venus-associated
function isVenusAssociatedIngredient(ingredientName) {
    var _a, _b, _c, _d;
    // Check if the ingredient appears in Venus's food associations
    if (venus_1.default.FoodAssociations) {
        for (const food of venus_1.default.FoodAssociations) {
            if (ingredientName.toLowerCase().includes(food.toLowerCase()) ||
                food.toLowerCase().includes(ingredientName.toLowerCase())) {
                return true;
            }
        }
    }
    // Check if the ingredient appears in Venus's herbal associations
    if ((_a = venus_1.default.HerbalAssociations) === null || _a === void 0 ? void 0 : _a.Herbs) {
        for (const herb of venus_1.default.HerbalAssociations.Herbs) {
            if (ingredientName.toLowerCase().includes(herb.toLowerCase()) ||
                herb.toLowerCase().includes(ingredientName.toLowerCase())) {
                return true;
            }
        }
    }
    // Check if the ingredient appears in Venus's herb associations
    // Note: HerbalAssociations only has Herbs, Flowers, Woods, Scents - Spices not available
    if ((_b = venus_1.default.HerbalAssociations) === null || _b === void 0 ? void 0 : _b.Herbs) {
        for (const herb of venus_1.default.HerbalAssociations.Herbs) {
            if (ingredientName.toLowerCase().includes(herb.toLowerCase()) ||
                herb.toLowerCase().includes(ingredientName.toLowerCase())) {
                return true;
            }
        }
    }
    // Check if the ingredient appears in Venus's flower associations
    if ((_c = venus_1.default.HerbalAssociations) === null || _c === void 0 ? void 0 : _c.Flowers) {
        for (const flower of venus_1.default.HerbalAssociations.Flowers) {
            if (ingredientName.toLowerCase().includes(flower.toLowerCase()) ||
                flower.toLowerCase().includes(ingredientName.toLowerCase())) {
                return true;
            }
        }
    }
    // Check against zodiac-specific Venus ingredients
    if (((_d = venus_1.default.PlanetSpecific) === null || _d === void 0 ? void 0 : _d.ZodiacTransit) && typeof venus_1.default.PlanetSpecific.ZodiacTransit === 'object') {
        for (const zodiac in venus_1.default.PlanetSpecific.ZodiacTransit) {
            const transitData = venus_1.default.PlanetSpecific.ZodiacTransit[zodiac];
            if (transitData.Ingredients) {
                for (const ingredient of transitData.Ingredients) {
                    if (ingredientName.toLowerCase().includes(ingredient.toLowerCase()) ||
                        ingredient.toLowerCase().includes(ingredientName.toLowerCase())) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}
/**
 * Determines if an ingredient is associated with Mars based on Mars data
 */
function isMarsAssociatedIngredient(ingredientName) {
    var _a, _b;
    // Normalize the ingredient name for comparison
    const normalizedName = ingredientName.toLowerCase();
    // Check if it's in Mars food associations
    if (mars_1.default.FoodAssociations) {
        for (const food of mars_1.default.FoodAssociations) {
            if (normalizedName.includes(food.toLowerCase()) || food.toLowerCase().includes(normalizedName)) {
                return true;
            }
        }
    }
    // Check if it's in Mars herbal associations
    if ((_a = mars_1.default.HerbalAssociations) === null || _a === void 0 ? void 0 : _a.Herbs) {
        for (const herb of mars_1.default.HerbalAssociations.Herbs) {
            if (normalizedName.includes(herb.toLowerCase()) || herb.toLowerCase().includes(normalizedName)) {
                return true;
            }
        }
    }
    // Check all zodiac transits for ingredients
    if (((_b = mars_1.default.PlanetSpecific) === null || _b === void 0 ? void 0 : _b.ZodiacTransit) && typeof mars_1.default.PlanetSpecific.ZodiacTransit === 'object') {
        for (const sign in mars_1.default.PlanetSpecific.ZodiacTransit) {
            const transit = mars_1.default.PlanetSpecific.ZodiacTransit[sign];
            if (transit.Ingredients) {
                for (const ingredient of transit.Ingredients) {
                    if (normalizedName.includes(ingredient.toLowerCase()) || ingredient.toLowerCase().includes(normalizedName)) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}
/**
 * Calculate Venus influence score for an ingredient
 * @param ingredient The ingredient to calculate Venus influence for
 * @param zodiacSign Current zodiac sign Venus is in
 * @param isVenusRetrograde Whether Venus is retrograde
 * @returns Score representing Venus influence (higher is stronger)
 */
function calculateVenusInfluence(ingredient, zodiacSign, isVenusRetrograde = false) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
    let score = 0;
    // Base score for Venus association
    if (isVenusAssociatedIngredient(ingredient === null || ingredient === void 0 ? void 0 : ingredient.name)) {
        score += 2.0;
    }
    // Check elemental properties alignment with Venus
    if (ingredient.elementalProperties) {
        // Venus favors Water and Earth elements
        score += (ingredient.elementalProperties.Water || 0) * 1.5;
        score += (ingredient.elementalProperties.Earth || 0) * 1.8;
        // Lesser affinities with Air and Fire
        score += (ingredient.elementalProperties.Air || 0) * 0.8;
        score += (ingredient.elementalProperties.Fire || 0) * 0.5;
    }
    // Check flavor profile alignment with Venus preferences
    const flavorProfile = ingredient === null || ingredient === void 0 ? void 0 : ingredient.flavorProfile;
    if (flavorProfile) {
        // Venus favors sweet, rich, creamy flavors
        if (flavorProfile.sweet) {
            score += flavorProfile.sweet * 2.0;
        }
        if (flavorProfile.umami) {
            score += flavorProfile.umami * 1.5;
        }
        if (flavorProfile.creamy || flavorProfile.rich) {
            score += ((flavorProfile.creamy || 0) + (flavorProfile.rich || 0)) * 1.7;
        }
        // Venus appreciates aromatic, fragrant qualities
        if (flavorProfile.aromatic || flavorProfile.fragrant) {
            score += ((flavorProfile.aromatic || 0) + (flavorProfile.fragrant || 0)) * 1.6;
        }
        // Venus is less interested in bitter or excessively spicy flavors
        if (flavorProfile.bitter) {
            score -= flavorProfile.bitter * 0.5;
        }
        if (flavorProfile.spicy && flavorProfile.spicy > 0.7) {
            score -= (flavorProfile.spicy - 0.7) * 0.8;
        }
    }
    // Check texture alignment with Venus preferences
    const texture = ingredient === null || ingredient === void 0 ? void 0 : ingredient.texture;
    if (texture) {
        // Venus favors smooth, creamy, luscious textures
        const venusTextures = ['smooth', 'creamy', 'velvety', 'soft', 'tender', 'juicy', 'buttery'];
        const textureMatch = venusTextures.filter(venusTexture => Array.isArray(texture) ? texture.includes(venusTexture) : texture.includes && texture.includes(venusTexture)).length;
        score += textureMatch * 0.5;
    }
    // Check culinary technique alignment
    const culinaryUses = ingredient === null || ingredient === void 0 ? void 0 : ingredient.culinaryUses;
    if (((_a = venus_1.default.PlanetSpecific) === null || _a === void 0 ? void 0 : _a.CulinaryTechniques) && culinaryUses) {
        // Check for aesthetic presentation techniques
        if (culinaryUses.includes('garnish') ||
            culinaryUses.includes('plating')) {
            score += 1.8;
        }
        // Check for balance and harmony in flavor pairings
        const harmonyPairings = ingredient === null || ingredient === void 0 ? void 0 : ingredient.harmonyPairings;
        if (harmonyPairings && harmonyPairings.length > 3) {
            score += 1.5;
        }
        // Sweet and indulgent preparation techniques
        if (culinaryUses.includes('dessert') ||
            culinaryUses.includes('baking') ||
            culinaryUses.includes('confection')) {
            score += 1.2;
        }
        // Check for fragrance and aroma enhancement
        const aromaticProperties = ingredient === null || ingredient === void 0 ? void 0 : ingredient.aromaticProperties;
        if (aromaticProperties ||
            ((flavorProfile === null || flavorProfile === void 0 ? void 0 : flavorProfile.aromatic) && flavorProfile.aromatic > 0.7)) {
            score += 1.6;
        }
        // Check for textural contrast techniques
        if (culinaryUses.includes('crispy') ||
            culinaryUses.includes('crunchy') ||
            (texture && ((Array.isArray(texture) && texture.includes('contrast')) || (texture.includes && texture.includes('contrast'))))) {
            score += 1.3;
        }
    }
    // Zodiac sign-specific preferences
    if (zodiacSign && ((_b = venus_1.default.PlanetSpecific) === null || _b === void 0 ? void 0 : _b.ZodiacTransit)) {
        const transitData = venus_1.default.PlanetSpecific.ZodiacTransit[zodiacSign];
        // Check food focus alignment
        // Extract transit data with safe property access
        const transitDataAny = transitData;
        const foodFocusProperty = transitDataAny === null || transitDataAny === void 0 ? void 0 : transitDataAny.FoodFocus;
        if (foodFocusProperty) {
            const foodFocus = foodFocusProperty.toLowerCase();
            const ingredientName = ingredient === null || ingredient === void 0 ? void 0 : ingredient.name.toLowerCase();
            // Direct keywords match
            const keywords = foodFocus.split(/[\s,;]+/).filter(k => k.length > 3);
            for (const keyword of keywords) {
                const description = ingredient === null || ingredient === void 0 ? void 0 : ingredient.description;
                const culinaryUses = ingredient === null || ingredient === void 0 ? void 0 : ingredient.culinaryUses;
                if (ingredientName.includes(keyword) ||
                    (description && description.toLowerCase().includes(keyword)) ||
                    (culinaryUses && culinaryUses.some((use) => use.toLowerCase().includes(keyword)))) {
                    score += 2.0;
                    break;
                }
            }
        }
        // Check Elements alignment
        // Extract transit data with safe property access for elements
        const transitElements = transitDataAny === null || transitDataAny === void 0 ? void 0 : transitDataAny.Elements;
        if (transitElements && ingredient.elementalProperties) {
            for (const element in transitElements) {
                if (ingredient.elementalProperties[element]) {
                    score += transitElements[element] * ingredient.elementalProperties[element] * 0.7;
                }
            }
        }
        // Check ingredient alignment with transit preferences
        if (transitData.Ingredients) {
            const transitIngredients = transitData.Ingredients.map(i => i.toLowerCase());
            // Direct ingredient match
            if (transitIngredients.some(i => (ingredient === null || ingredient === void 0 ? void 0 : ingredient.name.toLowerCase().includes(i)) || i.includes(ingredient === null || ingredient === void 0 ? void 0 : ingredient.name.toLowerCase()))) {
                score += 3.0;
            }
            // Category match
            if (ingredient.category && transitIngredients.includes(ingredient.category.toLowerCase())) {
                score += 2.0;
            }
            // Related ingredient match
            const relatedIngredients = ingredient === null || ingredient === void 0 ? void 0 : ingredient.relatedIngredients;
            if (relatedIngredients) {
                const relatedMatches = relatedIngredients.filter((related) => transitIngredients.some(i => related.toLowerCase().includes(i) || i.includes(related.toLowerCase()))).length;
                score += relatedMatches * 0.7;
            }
            // Complementary ingredients match
            const complementaryIngredients = ingredient === null || ingredient === void 0 ? void 0 : ingredient.complementaryIngredients;
            if (complementaryIngredients) {
                const complementaryMatches = complementaryIngredients.filter((complement) => transitIngredients.some(i => complement.toLowerCase().includes(i) || i.includes(complement.toLowerCase()))).length;
                score += complementaryMatches * 0.5;
            }
        }
    }
    // Venus temperament based on sign type
    if (zodiacSign) {
        const earthSigns = ['taurus', 'virgo', 'capricorn'];
        const airSigns = ['gemini', 'libra', 'aquarius'];
        const waterSigns = ['cancer', 'scorpio', 'pisces'];
        const fireSigns = ['aries', 'leo', 'sagittarius'];
        const lowerSign = zodiacSign.toLowerCase();
        // Earth Venus
        if (earthSigns.includes(lowerSign) && ((_d = (_c = venus_1.default.PlanetSpecific) === null || _c === void 0 ? void 0 : _c.CulinaryTemperament) === null || _d === void 0 ? void 0 : _d.EarthVenus)) {
            const earthVenus = venus_1.default.PlanetSpecific.CulinaryTemperament.EarthVenus;
            // Check for sensual, rich ingredients
            if ((flavorProfile === null || flavorProfile === void 0 ? void 0 : flavorProfile.rich) > 0.5 ||
                (flavorProfile === null || flavorProfile === void 0 ? void 0 : flavorProfile.umami) > 0.5 ||
                (culinaryUses === null || culinaryUses === void 0 ? void 0 : culinaryUses.includes('comfort food'))) {
                score += 2.0;
            }
            // Food focus alignment
            // Extract earth venus data with safe property access
            const earthVenusAny = earthVenus;
            const earthVenusFoodFocus = earthVenusAny === null || earthVenusAny === void 0 ? void 0 : earthVenusAny.FoodFocus;
            if (earthVenusFoodFocus) {
                const focusKeywords = earthVenusFoodFocus.toLowerCase().split(/[\s,;]+/).filter(k => k.length > 3);
                const description = ingredient === null || ingredient === void 0 ? void 0 : ingredient.description;
                if (focusKeywords.some(keyword => (ingredient === null || ingredient === void 0 ? void 0 : ingredient.name.toLowerCase().includes(keyword)) ||
                    (description && description.toLowerCase().includes(keyword)))) {
                    score += 1.5;
                }
            }
            // Elements alignment
            // Extract earth venus elements with safe property access
            const earthVenusElements = earthVenusAny === null || earthVenusAny === void 0 ? void 0 : earthVenusAny.Elements;
            if (earthVenusElements && ingredient.elementalProperties) {
                for (const element in earthVenusElements) {
                    if (ingredient.elementalProperties[element]) {
                        score += earthVenusElements[element] * ingredient.elementalProperties[element] * 1.0;
                    }
                }
            }
        }
        // Air Venus
        if (airSigns.includes(lowerSign) && ((_f = (_e = venus_1.default.PlanetSpecific) === null || _e === void 0 ? void 0 : _e.CulinaryTemperament) === null || _f === void 0 ? void 0 : _f.AirVenus)) {
            const airVenus = venus_1.default.PlanetSpecific.CulinaryTemperament.AirVenus;
            // Check for light, delicate ingredients
            if ((texture && ((Array.isArray(texture) && texture.includes('light')) || (texture.includes && texture.includes('light')))) ||
                (texture && ((Array.isArray(texture) && texture.includes('crisp')) || (texture.includes && texture.includes('crisp')))) ||
                (flavorProfile === null || flavorProfile === void 0 ? void 0 : flavorProfile.light) > 0.5) {
                score += 2.0;
            }
            // Food focus alignment
            // Extract air venus data with safe property access
            const airVenusAny = airVenus;
            const airVenusFoodFocus = airVenusAny === null || airVenusAny === void 0 ? void 0 : airVenusAny.FoodFocus;
            if (airVenusFoodFocus) {
                const focusKeywords = airVenusFoodFocus.toLowerCase().split(/[\s,;]+/).filter(k => k.length > 3);
                const description = ingredient === null || ingredient === void 0 ? void 0 : ingredient.description;
                if (focusKeywords.some(keyword => (ingredient === null || ingredient === void 0 ? void 0 : ingredient.name.toLowerCase().includes(keyword)) ||
                    (description && description.toLowerCase().includes(keyword)))) {
                    score += 1.5;
                }
            }
            // Elements alignment
            // Extract air venus elements with safe property access
            const airVenusElements = airVenusAny === null || airVenusAny === void 0 ? void 0 : airVenusAny.Elements;
            if (airVenusElements && ingredient.elementalProperties) {
                for (const element in airVenusElements) {
                    if (ingredient.elementalProperties[element]) {
                        score += airVenusElements[element] * ingredient.elementalProperties[element] * 1.0;
                    }
                }
            }
        }
        // Water Venus
        if (waterSigns.includes(lowerSign) && ((_h = (_g = venus_1.default.PlanetSpecific) === null || _g === void 0 ? void 0 : _g.CulinaryTemperament) === null || _h === void 0 ? void 0 : _h.WaterVenus)) {
            const waterVenus = venus_1.default.PlanetSpecific.CulinaryTemperament.WaterVenus;
            // Check for moist, juicy ingredients
            if ((texture && ((Array.isArray(texture) && texture.includes('juicy')) || (texture.includes && texture.includes('juicy')))) ||
                (texture && ((Array.isArray(texture) && texture.includes('tender')) || (texture.includes && texture.includes('tender')))) ||
                (flavorProfile === null || flavorProfile === void 0 ? void 0 : flavorProfile.juicy) > 0.5) {
                score += 2.0;
            }
            // Food focus alignment
            // Extract water venus data with safe property access
            const waterVenusAny = waterVenus;
            const waterVenusFoodFocus = waterVenusAny === null || waterVenusAny === void 0 ? void 0 : waterVenusAny.FoodFocus;
            if (waterVenusFoodFocus) {
                const focusKeywords = waterVenusFoodFocus.toLowerCase().split(/[\s,;]+/).filter(k => k.length > 3);
                // Extract ingredient data with safe property access
                const ingredientData = ingredient;
                const ingredientName = ((_j = ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.name) === null || _j === void 0 ? void 0 : _j.toLowerCase()) || '';
                const ingredientDescription = ((_k = ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.description) === null || _k === void 0 ? void 0 : _k.toLowerCase()) || '';
                if (focusKeywords.some(keyword => ingredientName.includes(keyword) ||
                    ingredientDescription.includes(keyword))) {
                    score += 1.5;
                }
            }
            // Elements alignment
            // Extract water venus elements with safe property access
            const waterVenusElements = waterVenusAny === null || waterVenusAny === void 0 ? void 0 : waterVenusAny.Elements;
            if (waterVenusElements && ingredient.elementalProperties) {
                for (const element in waterVenusElements) {
                    if (ingredient.elementalProperties[element]) {
                        score += waterVenusElements[element] * ingredient.elementalProperties[element] * 1.0;
                    }
                }
            }
        }
        // Fire Venus
        if (fireSigns.includes(lowerSign) && ((_m = (_l = venus_1.default.PlanetSpecific) === null || _l === void 0 ? void 0 : _l.CulinaryTemperament) === null || _m === void 0 ? void 0 : _m.FireVenus)) {
            const fireVenus = venus_1.default.PlanetSpecific.CulinaryTemperament.FireVenus;
            // Check for vibrant, spicy ingredients
            if ((flavorProfile === null || flavorProfile === void 0 ? void 0 : flavorProfile.spicy) > 0.3 ||
                (flavorProfile === null || flavorProfile === void 0 ? void 0 : flavorProfile.vibrant) > 0.5 ||
                (culinaryUses === null || culinaryUses === void 0 ? void 0 : culinaryUses.includes('stimulating'))) {
                score += 2.0;
            }
            // Food focus alignment
            // Extract fire venus data with safe property access
            const fireVenusAny = fireVenus;
            const fireVenusFoodFocus = fireVenusAny === null || fireVenusAny === void 0 ? void 0 : fireVenusAny.FoodFocus;
            if (fireVenusFoodFocus) {
                const focusKeywords = fireVenusFoodFocus.toLowerCase().split(/[\s,;]+/).filter(k => k.length > 3);
                // Extract ingredient data with safe property access
                const ingredientData = ingredient;
                const ingredientName = ((_o = ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.name) === null || _o === void 0 ? void 0 : _o.toLowerCase()) || '';
                const ingredientDescription = ((_p = ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.description) === null || _p === void 0 ? void 0 : _p.toLowerCase()) || '';
                if (focusKeywords.some(keyword => ingredientName.includes(keyword) ||
                    ingredientDescription.includes(keyword))) {
                    score += 1.5;
                }
            }
            // Elements alignment
            // Extract fire venus elements with safe property access
            const fireVenusElements = fireVenusAny === null || fireVenusAny === void 0 ? void 0 : fireVenusAny.Elements;
            if (fireVenusElements && ingredient.elementalProperties) {
                for (const element in fireVenusElements) {
                    if (ingredient.elementalProperties[element]) {
                        score += fireVenusElements[element] * ingredient.elementalProperties[element] * 1.0;
                    }
                }
            }
        }
    }
    // Retrograde modifiers
    if (isVenusRetrograde && ((_q = venus_1.default.PlanetSpecific) === null || _q === void 0 ? void 0 : _q.Retrograde)) {
        // Increase score for preserved or dried herbs during retrograde
        const preservationMethods = ingredient === null || ingredient === void 0 ? void 0 : ingredient.preservation_methods;
        const categories = ingredient === null || ingredient === void 0 ? void 0 : ingredient.categories;
        if ((preservationMethods && preservationMethods.includes('dried')) ||
            ingredient.category === 'herb' ||
            (categories && categories.includes('preserved'))) {
            score *= 1.5;
        }
        else {
            score *= 0.8; // Slightly reduce other ingredients
        }
        // Nostalgia foods get a boost during retrograde
        // Extract ingredient data with safe property access for cultural significance
        const ingredientData = ingredient;
        const culturalSignificance = ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.cultural_significance;
        const culturalSignificanceArray = Array.isArray(culturalSignificance) ? culturalSignificance :
            (typeof culturalSignificance === 'string' ? [culturalSignificance] : []);
        if (culturalSignificanceArray.includes('traditional') ||
            culturalSignificanceArray.includes('nostalgic')) {
            score += 1.8;
        }
        // Check retrograde food focus
        // Extract retrograde data with safe property access
        const retrogradeData = venus_1.default.PlanetSpecific.Retrograde;
        const retroFoodFocus = retrogradeData === null || retrogradeData === void 0 ? void 0 : retrogradeData.FoodFocus;
        if (retroFoodFocus) {
            const retroFocus = retroFoodFocus.toLowerCase();
            // Extract ingredient data with safe property access
            const ingredientData = ingredient;
            const ingredientName = ((_r = ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.name) === null || _r === void 0 ? void 0 : _r.toLowerCase()) || '';
            const ingredientDesc = ((_s = ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.description) === null || _s === void 0 ? void 0 : _s.toLowerCase()) || '';
            // Check for keyword matches
            const retroKeywords = retroFocus.split(/[\s,;]+/).filter(k => k.length > 3);
            for (const keyword of retroKeywords) {
                if (ingredientName.includes(keyword) || ingredientDesc.includes(keyword)) {
                    score += 1.7;
                    break;
                }
            }
        }
        // Check retrograde elements
        // Extract retrograde elements with safe property access
        const retrogradeElements = retrogradeData === null || retrogradeData === void 0 ? void 0 : retrogradeData.Elements;
        if (retrogradeElements && ingredient.elementalProperties) {
            for (const element in retrogradeElements) {
                if (ingredient.elementalProperties[element]) {
                    score += retrogradeElements[element] *
                        ingredient.elementalProperties[element] * 0.9;
                }
            }
        }
    }
    // Lunar phase connections with Venus
    // Extract planetary data with safe property access
    const venusDataAny = venus_1.default;
    const lunarConnection = venusDataAny === null || venusDataAny === void 0 ? void 0 : venusDataAny.LunarConnection;
    if (lunarConnection) {
        // This would be checked against the current lunar phase in a full implementation
    }
    return score;
}
// Enhance ingredient scoring with Venus influence
function _enhanceVenusIngredientScoring(ingredient, astroState, score) {
    var _a;
    // Only apply Venus scoring if Venus is active
    if (!((_a = astroState.activePlanets) === null || _a === void 0 ? void 0 : _a.includes('Venus'))) {
        return score;
    }
    // Get current zodiac sign
    const zodiacSign = astroState.zodiacSign;
    // Check if Venus is retrograde
    // Extract astrological state with safe property access
    const astroStateData = astroState;
    const retrogradeArray = Array.isArray(astroStateData === null || astroStateData === void 0 ? void 0 : astroStateData.retrograde) ? astroStateData.retrograde : [];
    const isVenusRetrograde = retrogradeArray.includes('Venus') || false;
    // Calculate Venus influence score
    const venusInfluence = calculateVenusInfluence(ingredient, zodiacSign, isVenusRetrograde);
    // Apply Venus influence to the base score (weight it appropriately)
    return score + (venusInfluence * 0.3);
}
// Enhanced function to boost Venus-ruled ingredients based on detailed Venus data
function enhanceVenusIngredientBatch(ingredients, astroState) {
    var _a;
    // Check if Venus is active
    const isVenusActive = (_a = astroState.activePlanets) === null || _a === void 0 ? void 0 : _a.includes('Venus');
    if (!isVenusActive) {
        return; // Skip Venus scoring if Venus is not active
    }
    // Get current zodiac sign
    const zodiacSign = astroState.zodiacSign;
    // Check if Venus is retrograde
    // Extract astrological state with safe property access for batch processing
    const astroStateData = astroState;
    const retrogradeArray = Array.isArray(astroStateData === null || astroStateData === void 0 ? void 0 : astroStateData.retrograde) ? astroStateData.retrograde : [];
    const isVenusRetrograde = retrogradeArray.includes('Venus') || false;
    // Add a "venusScore" property to each ingredient for sorting
    ingredients.forEach(ingredient => {
        // Use our comprehensive Venus influence calculation
        const venusScore = calculateVenusInfluence(ingredient, zodiacSign, isVenusRetrograde);
        // Store the Venus score with the ingredient
        ingredient.venusScore = venusScore;
    });
    // Sort ingredients by Venus score
    ingredients.sort((a, b) => {
        const aScore = a.venusScore || 0;
        const bScore = b.venusScore || 0;
        return bScore - aScore;
    });
}
/**
 * Calculates a Mars influence score for an ingredient
 */
function calculateMarsInfluence(ingredient, zodiacSign, isMarsRetrograde = false) {
    var _a, _b, _c, _d;
    let score = 0;
    // Get the name in lowercase for comparison
    const name = ingredient === null || ingredient === void 0 ? void 0 : ingredient.name.toLowerCase();
    // Match with Mars food associations
    if (mars_1.default.FoodAssociations) {
        for (const food of mars_1.default.FoodAssociations) {
            if (name.includes(food.toLowerCase()) || food.toLowerCase().includes(name)) {
                score += 1.5;
                break;
            }
        }
    }
    // Match with Mars herb associations (stronger affinity)
    if ((_a = mars_1.default.HerbalAssociations) === null || _a === void 0 ? void 0 : _a.Herbs) {
        for (const herb of mars_1.default.HerbalAssociations.Herbs) {
            if (name.includes(herb.toLowerCase()) || herb.toLowerCase().includes(name)) {
                score += 2.0;
                break;
            }
        }
    }
    // Flavor profile alignment
    // Extract ingredient data with safe property access for flavor profile
    const ingredientData = ingredient;
    const ingredientFlavorProfile = ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.flavorProfile;
    if (mars_1.default.FlavorProfiles && ingredientFlavorProfile) {
        for (const flavor in mars_1.default.FlavorProfiles) {
            if (ingredientFlavorProfile[flavor]) {
                // Higher score when both have high values for same flavor
                score += mars_1.default.FlavorProfiles[flavor] * ingredientFlavorProfile[flavor];
            }
        }
    }
    // Elemental alignment
    if (ingredient === null || ingredient === void 0 ? void 0 : ingredient.elementalProperties) {
        // Mars is primarily Fire, secondarily Water
        const fireScore = (ingredient === null || ingredient === void 0 ? void 0 : ingredient.elementalProperties.Fire) || 0;
        const waterScore = (ingredient === null || ingredient === void 0 ? void 0 : ingredient.elementalProperties.Water) || 0;
        score += fireScore * 1.5; // Primary element gets higher weight
        score += waterScore * 0.8; // Secondary element
    }
    // Zodiac sign specific boost
    if (zodiacSign && ((_b = mars_1.default.PlanetSpecific) === null || _b === void 0 ? void 0 : _b.ZodiacTransit)) {
        const transit = mars_1.default.PlanetSpecific.ZodiacTransit[zodiacSign];
        // Check if ingredient is in the transit's ingredient list
        if (transit && transit.Ingredients) {
            for (const transitIngredient of transit.Ingredients) {
                if (name.includes(transitIngredient.toLowerCase()) ||
                    transitIngredient.toLowerCase().includes(name)) {
                    score += 2.5; // Strong boost for exact ingredient match in current zodiac
                    break;
                }
            }
        }
        // Check element alignment with transit
        if (transit && transit.Elements && (ingredient === null || ingredient === void 0 ? void 0 : ingredient.elementalProperties)) {
            for (const element in transit.Elements) {
                const elemValue = element;
                if (ingredient === null || ingredient === void 0 ? void 0 : ingredient.elementalProperties[elemValue]) {
                    score += transit.Elements[element] * (ingredient === null || ingredient === void 0 ? void 0 : ingredient.elementalProperties[elemValue]) * 1.2;
                }
            }
        }
    }
    // Mars retrograde effects
    if (isMarsRetrograde && ((_c = mars_1.default.PlanetSpecific) === null || _c === void 0 ? void 0 : _c.Retrograde)) {
        // During retrograde, Mars emphasizes dried herbs and spices
        // Extract ingredient data with safe property access for type
        const ingredientData = ingredient;
        const ingredientType = (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.type) || (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.category) || '';
        if (ingredientType === 'spice' || ingredientType === 'herb' || ingredientType === 'seasoning') {
            score += 1.5;
        }
        // Focus shifts to traditional uses
        // Extract ingredient data with safe property access for traditional property
        const ingredientTraditional = ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.traditional;
        if (ingredientTraditional) {
            score += 1.2;
        }
    }
    // Adjust for Mars temperament based on dominant element
    if (ingredient === null || ingredient === void 0 ? void 0 : ingredient.elementalProperties) {
        const fireDominant = ((ingredient === null || ingredient === void 0 ? void 0 : ingredient.elementalProperties.Fire) || 0) > 0.6;
        const waterDominant = ((ingredient === null || ingredient === void 0 ? void 0 : ingredient.elementalProperties.Water) || 0) > 0.6;
        // Extract Mars temperament data with safe property access
        const marsTemperament = (_d = mars_1.default.PlanetSpecific) === null || _d === void 0 ? void 0 : _d.CulinaryTemperament;
        const fireMars = marsTemperament === null || marsTemperament === void 0 ? void 0 : marsTemperament.FireMars;
        const waterMars = marsTemperament === null || marsTemperament === void 0 ? void 0 : marsTemperament.WaterMars;
        if (fireDominant && fireMars) {
            score += 1.5;
        }
        else if (waterDominant && waterMars) {
            score += 1.3;
        }
    }
    return score;
}
/**
 * Apply Mars-specific scoring to a collection of ingredients
 */
function enhanceMarsIngredientScoring(ingredients, astroState) {
    // Get Mars status info from astro state
    // Extract astrological state with safe property access for Mars retrograde
    const astroStateData = astroState;
    const retrogradeArray = Array.isArray(astroStateData === null || astroStateData === void 0 ? void 0 : astroStateData.retrograde) ? astroStateData.retrograde : [];
    const isMarsRetrograde = retrogradeArray.includes('Mars') || false;
    const zodiacSign = astroState.zodiacSign;
    // Compute Mars influence for each ingredient
    for (let i = 0; i < ingredients.length; i++) {
        const ingredient = ingredients[i];
        // Only process if it has necessary data
        // Extract ingredient data with safe property access
        const ingredientData = ingredient;
        const ingredientName = ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.name;
        const ingredientMatchScore = ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.matchScore;
        if (!ingredientName || !ingredientMatchScore)
            continue;
        // Calculate Mars influence
        const marsInfluence = calculateMarsInfluence(ingredient, zodiacSign, isMarsRetrograde);
        // Apply Mars boost to match score
        if (marsInfluence > 0) {
            // Include the original score, add the Mars influence
            ingredientData.matchScore = (ingredientData.matchScore || 0) + (marsInfluence * 1.8);
            // Add a flag or data point to indicate Mars influence was applied
            if (!ingredientData.influences) {
                ingredientData.influences = {};
            }
            ingredientData.influences.mars = marsInfluence;
        }
    }
    // Re-sort the ingredients based on the updated scores
    ingredients.sort((a, b) => {
        const aData = a;
        const bData = b;
        return (bData.matchScore || 0) - (aData.matchScore || 0);
    });
}
// Add the new function for Mercury associated ingredients
function isMercuryAssociatedIngredient(ingredientName) {
    var _a, _b, _c, _d;
    if (!ingredientName)
        return false;
    const lowerIngredient = ingredientName.toLowerCase();
    // Check direct Mercury food associations
    if (mercury_1.default.FoodAssociations && mercury_1.default.FoodAssociations.some(food => food.toLowerCase() === lowerIngredient ||
        lowerIngredient.includes(food.toLowerCase()) ||
        food.toLowerCase().includes(lowerIngredient))) {
        return true;
    }
    // Check Mercury herb associations
    if (((_a = mercury_1.default.HerbalAssociations) === null || _a === void 0 ? void 0 : _a.Herbs) && mercury_1.default.HerbalAssociations.Herbs.some(herb => herb.toLowerCase() === lowerIngredient ||
        lowerIngredient.includes(herb.toLowerCase()) ||
        herb.toLowerCase().includes(lowerIngredient))) {
        return true;
    }
    // Check for Mercury elemental connection through flavor profile
    // Mercury emphasizes complexity, variety, multiple ingredients, and contrasting flavors
    const mercuryFlavorSignals = [
        'mixed', 'blend', 'infused', 'complex', 'layered', 'aromatic',
        'herb', 'mint', 'anise', 'fennel', 'dill', 'light', 'citrus',
        'varied', 'fusion', 'multi', 'fresh', 'stimulant', 'tea',
        'seeds', 'nuts', 'grain'
    ];
    if (mercuryFlavorSignals.some(signal => lowerIngredient.includes(signal))) {
        return true;
    }
    // Mercury is associated with Air and Earth elements
    // Lighter ingredients (Air) and grounding ingredients (Earth)
    if (lowerIngredient.includes('air') || lowerIngredient.includes('light') ||
        lowerIngredient.includes('puff') || lowerIngredient.includes('crisp') ||
        lowerIngredient.includes('earth') || lowerIngredient.includes('root') ||
        lowerIngredient.includes('tuber')) {
        return true;
    }
    // Check Mercury ZodiacTransit ingredient associations in current sign
    // This is a more dynamic way to check for transient associations
    const currentZodiacSign = 'aries'; // Use fallback or implement getCurrentZodiacSign function
    if (currentZodiacSign && ((_d = (_c = (_b = mercury_1.default.PlanetSpecific) === null || _b === void 0 ? void 0 : _b.ZodiacTransit) === null || _c === void 0 ? void 0 : _c[currentZodiacSign]) === null || _d === void 0 ? void 0 : _d.Ingredients)) {
        const transitIngredients = mercury_1.default.PlanetSpecific.ZodiacTransit[currentZodiacSign].Ingredients;
        if (transitIngredients.some(ingredient => ingredient.toLowerCase() === lowerIngredient ||
            lowerIngredient.includes(ingredient.toLowerCase()) ||
            ingredient.toLowerCase().includes(lowerIngredient))) {
            return true;
        }
    }
    return false;
}
// Add the function to calculate Mercury influence on ingredients
function calculateMercuryInfluence(ingredient, zodiacSign, isMercuryRetrograde = false) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
    let score = 0;
    // Base score for Mercury-ruled ingredients
    if ((_b = (_a = ingredient === null || ingredient === void 0 ? void 0 : ingredient.astrologicalProfile) === null || _a === void 0 ? void 0 : _a.rulingPlanets) === null || _b === void 0 ? void 0 : _b.includes('Mercury')) {
        score += 3.0; // Strong baseline for Mercury-ruled ingredients
    }
    // Mercury food associations
    if (mercury_1.default.FoodAssociations) {
        for (const food of mercury_1.default.FoodAssociations) {
            if ((ingredient === null || ingredient === void 0 ? void 0 : ingredient.name.toLowerCase().includes(food.toLowerCase())) ||
                food.toLowerCase().includes(ingredient === null || ingredient === void 0 ? void 0 : ingredient.name.toLowerCase())) {
                score += 2.0;
                break;
            }
        }
    }
    // Mercury herb associations
    // Extract ingredient data with safe property access for type
    const ingredientData = ingredient;
    const ingredientType = (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.type) || (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.category) || '';
    if (((_c = mercury_1.default.HerbalAssociations) === null || _c === void 0 ? void 0 : _c.Herbs) &&
        (ingredientType === 'herb' || ingredientType === 'spice')) {
        for (const herb of mercury_1.default.HerbalAssociations.Herbs) {
            if ((ingredient === null || ingredient === void 0 ? void 0 : ingredient.name.toLowerCase().includes(herb.toLowerCase())) ||
                herb.toLowerCase().includes(ingredient === null || ingredient === void 0 ? void 0 : ingredient.name.toLowerCase())) {
                score += 2.5; // Higher score for direct Mercury herb associations
                break;
            }
        }
    }
    // Elemental affinities based on Mercury's elements
    if (ingredient === null || ingredient === void 0 ? void 0 : ingredient.elementalProperties) {
        // Mercury's primary elements are Air and Earth
        score += ((ingredient === null || ingredient === void 0 ? void 0 : ingredient.elementalProperties.Air) || 0) * 2.0;
        score += ((ingredient === null || ingredient === void 0 ? void 0 : ingredient.elementalProperties.Earth) || 0) * 1.8;
    }
    // Add scores based on zodiac sign if provided
    if (zodiacSign) {
        const lowerSign = zodiacSign.toLowerCase();
        // Boost if ingredient has affinity with the current sign
        if ((_e = (_d = ingredient === null || ingredient === void 0 ? void 0 : ingredient.astrologicalProfile) === null || _d === void 0 ? void 0 : _d.signAffinities) === null || _e === void 0 ? void 0 : _e.includes(lowerSign)) {
            score += 1.5;
        }
        // Check Mercury's zodiac transit data for this sign
        const mercuryTransit = (_g = (_f = mercury_1.default.PlanetSpecific) === null || _f === void 0 ? void 0 : _f.ZodiacTransit) === null || _g === void 0 ? void 0 : _g[zodiacSign];
        if (mercuryTransit) {
            // Boost for ingredients matching transit ingredients
            if (mercuryTransit.Ingredients && mercuryTransit.Ingredients.some(transitIngredient => (ingredient === null || ingredient === void 0 ? void 0 : ingredient.name.toLowerCase().includes(transitIngredient.toLowerCase())) ||
                transitIngredient.toLowerCase().includes(ingredient === null || ingredient === void 0 ? void 0 : ingredient.name.toLowerCase()))) {
                score += 2.5;
            }
            // Element alignment with Mercury in this sign
            if (mercuryTransit.Elements && (ingredient === null || ingredient === void 0 ? void 0 : ingredient.elementalProperties)) {
                for (const element in mercuryTransit.Elements) {
                    const elemKey = element;
                    if (ingredient === null || ingredient === void 0 ? void 0 : ingredient.elementalProperties[elemKey]) {
                        score += mercuryTransit.Elements[element] * (ingredient === null || ingredient === void 0 ? void 0 : ingredient.elementalProperties[elemKey]) * 1.2;
                    }
                }
            }
        }
        // Special scoring for Mercury in its domicile signs
        if (lowerSign === 'gemini' || lowerSign === 'virgo') {
            if ((_j = (_h = ingredient === null || ingredient === void 0 ? void 0 : ingredient.astrologicalProfile) === null || _h === void 0 ? void 0 : _h.rulingPlanets) === null || _j === void 0 ? void 0 : _j.includes('Mercury')) {
                score += 2.0; // Extra boost for Mercury ruling when Mercury is in domicile
            }
            // Special handling for Gemini (Air) and Virgo (Earth)
            if (lowerSign === 'gemini' && ((_k = ingredient === null || ingredient === void 0 ? void 0 : ingredient.elementalProperties) === null || _k === void 0 ? void 0 : _k.Air)) {
                score += (ingredient === null || ingredient === void 0 ? void 0 : ingredient.elementalProperties.Air) * 1.8;
            }
            else if (lowerSign === 'virgo' && ((_l = ingredient === null || ingredient === void 0 ? void 0 : ingredient.elementalProperties) === null || _l === void 0 ? void 0 : _l.Earth)) {
                score += (ingredient === null || ingredient === void 0 ? void 0 : ingredient.elementalProperties.Earth) * 1.8;
            }
        }
        // Special handling for Mercury in its detriment signs
        if (lowerSign === 'sagittarius' || lowerSign === 'pisces') {
            score *= 0.8; // Reduce score slightly when Mercury is in detriment
        }
    }
    // Adjust score based on Mercury retrograde status
    if (isMercuryRetrograde) {
        // During retrograde, Mercury emphasizes familiar, traditional ingredients
        if (((_m = ingredient.qualities) === null || _m === void 0 ? void 0 : _m.includes('traditional')) ||
            ((_o = ingredient.qualities) === null || _o === void 0 ? void 0 : _o.includes('nostalgic')) ||
            ((_p = ingredient.qualities) === null || _p === void 0 ? void 0 : _p.includes('classic'))) {
            score *= 1.25; // Boost for traditional ingredients during retrograde
        }
        // During retrograde, Mercury de-emphasizes complex or exotic ingredients
        if (((_q = ingredient.qualities) === null || _q === void 0 ? void 0 : _q.includes('exotic')) ||
            ((_r = ingredient.qualities) === null || _r === void 0 ? void 0 : _r.includes('complex')) ||
            ((_s = ingredient.qualities) === null || _s === void 0 ? void 0 : _s.includes('novel'))) {
            score *= 0.8; // Reduce score for complex/exotic ingredients during retrograde
        }
        // Apply Mercury's retrograde elemental shift if available
        if (mercury_1.default.RetrogradeEffect && (ingredient === null || ingredient === void 0 ? void 0 : ingredient.elementalProperties)) {
            // Shift toward Matter and away from Spirit during retrograde
            if (ingredient === null || ingredient === void 0 ? void 0 : ingredient.elementalProperties.Earth) {
                score += (ingredient === null || ingredient === void 0 ? void 0 : ingredient.elementalProperties.Earth) * Math.abs(mercury_1.default.RetrogradeEffect.Matter);
            }
            if (ingredient === null || ingredient === void 0 ? void 0 : ingredient.elementalProperties.Air) {
                score -= (ingredient === null || ingredient === void 0 ? void 0 : ingredient.elementalProperties.Air) * Math.abs(mercury_1.default.RetrogradeEffect.Spirit);
            }
        }
    }
    // Adjust for Mercury's specific influence on certain ingredient qualities
    // Mercury emphasizes ingredients that involve mental stimulation and clarity
    if (ingredient.qualities) {
        const mercuryQualityBoosts = {
            'aromatic': 1.3,
            'complex': 1.4,
            'stimulating': 1.5,
            'adaptable': 1.3,
            'versatile': 1.4,
            'detailed': 1.2,
            'precise': 1.2
        };
        for (const quality of ingredient.qualities) {
            const lowerQuality = quality.toLowerCase();
            for (const [mercuryQuality, boost] of Object.entries(mercuryQualityBoosts)) {
                if (lowerQuality.includes(mercuryQuality)) {
                    score += boost;
                    break;
                }
            }
        }
    }
    return score;
}
// Add the function to enhance Mercury ingredient scoring
function enhanceMercuryIngredientScoring(ingredients, astroState) {
    // Check if Mercury is retrograde
    // Extract astrological state with safe property access for Mercury retrograde
    const astroStateData = astroState;
    const retrogradeArray = Array.isArray(astroStateData === null || astroStateData === void 0 ? void 0 : astroStateData.retrograde) ? astroStateData.retrograde : [];
    const isMercuryRetrograde = retrogradeArray.includes('Mercury') || false;
    // Get the current zodiac sign
    const zodiacSign = astroState.zodiacSign;
    // For each ingredient, calculate and apply Mercury influence score
    ingredients.forEach(ingredient => {
        const mercuryScore = calculateMercuryInfluence(ingredient, zodiacSign, isMercuryRetrograde);
        // Extract ingredient data with safe property access for score manipulation
        const ingredientData = ingredient;
        // Apply Mercury score as a multiplier to the ingredient's existing score
        if (ingredientData.matchScore !== undefined) {
            ingredientData.matchScore *= (1 + mercuryScore * 0.3);
        }
        else if ('score' in ingredientData) {
            ingredientData.score *= (1 + mercuryScore * 0.3);
        }
        // If the ingredient has a Mercury score field, update it
        if ('mercuryAffinity' in ingredient) {
            ingredient.mercuryAffinity = mercuryScore;
        }
        // If the ingredient has a detailed score breakdown, add Mercury score
        if ('scoreDetails' in ingredient) {
            ingredient.scoreDetails = {
                ...ingredient.scoreDetails,
                mercuryAffinity: mercuryScore
            };
        }
    });
}
/**
 * Determines the modality of an ingredient based on its qualities and elemental properties
 * Using the hierarchical affinities:
 * - Mutability: Air > Water > Fire > Earth
 * - Fixed: Earth > Water > Fire > Air
 * - Cardinal: Equal for all elements
 *
 * @param qualities Array of quality descriptors
 * @param elementalProperties Optional elemental properties for more accurate determination
 * @returns The modality (Cardinal, Fixed, or Mutable)
 */
function determineIngredientModality(qualities = [], elementalProperties) {
    // Ensure qualities is an array
    const qualitiesArray = Array.isArray(qualities) ? qualities : [];
    // Create normalized arrays of qualities for easier matching
    const normalizedQualities = qualitiesArray.map(q => q.toLowerCase());
    // Look for explicit quality indicators in the ingredients
    const cardinalKeywords = ['initiating', 'spicy', 'pungent', 'stimulating', 'invigorating', 'activating'];
    const fixedKeywords = ['grounding', 'stabilizing', 'nourishing', 'sustaining', 'foundational'];
    const mutableKeywords = ['adaptable', 'flexible', 'versatile', 'balancing', 'harmonizing'];
    const hasCardinalQuality = normalizedQualities.some(q => cardinalKeywords.includes(q));
    const hasFixedQuality = normalizedQualities.some(q => fixedKeywords.includes(q));
    const hasMutableQuality = normalizedQualities.some(q => mutableKeywords.includes(q));
    // If there's a clear quality indicator, use that
    if (hasCardinalQuality && !hasFixedQuality && !hasMutableQuality) {
        return 'Cardinal';
    }
    if (hasFixedQuality && !hasCardinalQuality && !hasMutableQuality) {
        return 'Fixed';
    }
    if (hasMutableQuality && !hasCardinalQuality && !hasFixedQuality) {
        return 'Mutable';
    }
    // If elemental properties are provided, use them to determine modality
    if (elementalProperties) {
        const { Fire, Water, Earth, Air } = elementalProperties;
        // Determine dominant element
        const dominantElement = getDominantElement(elementalProperties);
        // Use hierarchical element-modality affinities
        switch (dominantElement) {
            case 'Air':
                // Air has strongest affinity with Mutable, then Cardinal, then Fixed
                if (Air > 0.4) {
                    return 'Mutable';
                }
                break;
            case 'Earth':
                // Earth has strongest affinity with Fixed, then Cardinal, then Mutable
                if (Earth > 0.4) {
                    return 'Fixed';
                }
                break;
            case 'Fire':
                // Fire has balanced affinities but leans Cardinal
                if (Fire > 0.4) {
                    return 'Cardinal';
                }
                break;
            case 'Water':
                // Water is balanced between Fixed and Mutable
                if (Water > 0.4) {
                    // Slightly favor Mutable for Water, as per our hierarchy
                    return Water > 0.6 ? 'Mutable' : 'Fixed';
                }
                break;
        }
        // Calculate modality scores based on hierarchical affinities
        const mutableScore = (Air * 0.9) + (Water * 0.8) + (Fire * 0.7) + (Earth * 0.5);
        const fixedScore = (Earth * 0.9) + (Water * 0.8) + (Fire * 0.6) + (Air * 0.5);
        const cardinalScore = (Fire * 0.8) + (Earth * 0.8) + (Water * 0.8) + (Air * 0.8);
        // Return the modality with the highest score
        if (mutableScore > fixedScore && mutableScore > cardinalScore) {
            return 'Mutable';
        }
        else if (fixedScore > mutableScore && fixedScore > cardinalScore) {
            return 'Fixed';
        }
        else {
            return 'Cardinal';
        }
    }
    // Default to Mutable if no clear indicators are found
    return 'Mutable';
}
/**
 * Helper function to get the dominant element from elemental properties
 */
function getDominantElement(elementalProperties) {
    const elements = ['Fire', 'Water', 'Earth', 'Air'];
    let dominantElement = 'Earth'; // Default
    let highestValue = 0;
    // Find the element with the highest value
    elements.forEach(element => {
        const value = elementalProperties[element] || 0;
        if (value > highestValue) {
            highestValue = value;
            dominantElement = element;
        }
    });
    return dominantElement;
}
/**
 * Maps planets to their elemental influences (diurnal and nocturnal elements)
 */
const planetaryElements = {
    'Sun': { diurnal: 'Fire', nocturnal: 'Fire', dignityEffect: { 'leo': 1, 'aries': 2, 'aquarius': -1, 'libra': -2 } },
    'Moon': { diurnal: 'Water', nocturnal: 'Water', dignityEffect: { 'cancer': 1, 'taurus': 2, 'capricorn': -1, 'scorpio': -2 } },
    'Mercury': { diurnal: 'Air', nocturnal: 'Earth', dignityEffect: { 'gemini': 1, 'virgo': 3, 'sagittarius': 1, 'pisces': -3 } },
    'Venus': { diurnal: 'Water', nocturnal: 'Earth', dignityEffect: { 'libra': 1, 'taurus': 1, 'pisces': 2, 'aries': -1, 'scorpio': -1, 'virgo': -2 } },
    'Mars': { diurnal: 'Fire', nocturnal: 'Water', dignityEffect: { 'aries': 1, 'scorpio': 1, 'capricorn': 2, 'taurus': -1, 'libra': -1, 'cancer': -2 } },
    'Jupiter': { diurnal: 'Air', nocturnal: 'Fire', dignityEffect: { 'pisces': 1, 'sagittarius': 1, 'cancer': 2, 'gemini': -1, 'virgo': -1, 'capricorn': -2 } },
    'Saturn': { diurnal: 'Air', nocturnal: 'Earth', dignityEffect: { 'aquarius': 1, 'capricorn': 1, 'libra': 2, 'cancer': -1, 'leo': -1, 'aries': -2 } },
    'Uranus': { diurnal: 'Water', nocturnal: 'Air', dignityEffect: { 'aquarius': 1, 'scorpio': 2, 'taurus': -3 } },
    'Neptune': { diurnal: 'Water', nocturnal: 'Water', dignityEffect: { 'pisces': 1, 'cancer': 2, 'virgo': -1, 'capricorn': -2 } },
    'Pluto': { diurnal: 'Earth', nocturnal: 'Water', dignityEffect: { 'scorpio': 1, 'leo': 2, 'taurus': -1, 'aquarius': -2 } }
};
// Define sign info with decan effects and degree effects
const signInfo = {
    'aries': {
        element: 'Fire',
        decanEffects: { '1st Decan': ['Mars'], '2nd Decan': ['Sun'], '3rd Decan': ['Venus'] },
        degreeEffects: { 'Mercury': [15, 21], 'Venus': [7, 14], 'Mars': [22, 26], 'Jupiter': [1, 6], 'Saturn': [27, 30] }
    },
    'taurus': {
        element: 'Earth',
        decanEffects: { '1st Decan': ['Mercury'], '2nd Decan': ['Moon'], '3rd Decan': ['Saturn'] },
        degreeEffects: { 'Mercury': [9, 15], 'Venus': [1, 8], 'Mars': [27, 30], 'Jupiter': [16, 22], 'Saturn': [23, 26] }
    },
    'gemini': {
        element: 'Air',
        decanEffects: { '1st Decan': ['Jupiter'], '2nd Decan': ['Mars'], '3rd Decan': ['Uranus', 'Sun'] },
        degreeEffects: { 'Mercury': [1, 7], 'Venus': [15, 20], 'Mars': [26, 30], 'Jupiter': [8, 14], 'Saturn': [22, 25] }
    },
    'cancer': {
        element: 'Water',
        decanEffects: { '1st Decan': ['Venus'], '2nd Decan': ['Mercury', 'Pluto'], '3rd Decan': ['Neptune', 'Moon'] },
        degreeEffects: { 'Mercury': [14, 20], 'Venus': [21, 27], 'Mars': [1, 6], 'Jupiter': [7, 13], 'Saturn': [28, 30] }
    },
    'leo': {
        element: 'Fire',
        decanEffects: { '1st Decan': ['Saturn'], '2nd Decan': ['Jupiter'], '3rd Decan': ['Mars'] },
        degreeEffects: { 'Mercury': [7, 13], 'Venus': [14, 19], 'Mars': [26, 30], 'Jupiter': [20, 25], 'Saturn': [1, 6] }
    },
    'virgo': {
        element: 'Earth',
        decanEffects: { '1st Decan': ['Mars', 'Sun'], '2nd Decan': ['Venus'], '3rd Decan': ['Mercury'] },
        degreeEffects: { 'Mercury': [1, 7], 'Venus': [8, 13], 'Mars': [25, 30], 'Jupiter': [14, 18], 'Saturn': [19, 24] }
    },
    'libra': {
        element: 'Air',
        decanEffects: { '1st Decan': ['Moon'], '2nd Decan': ['Saturn', 'Uranus'], '3rd Decan': ['Jupiter'] },
        degreeEffects: { 'Mercury': [20, 24], 'Venus': [7, 11], 'Mars': [], 'Jupiter': [12, 19], 'Saturn': [1, 6] }
    },
    'scorpio': {
        element: 'Water',
        decanEffects: { '1st Decan': ['Pluto'], '2nd Decan': ['Neptune', 'Sun'], '3rd Decan': ['Venus'] },
        degreeEffects: { 'Mercury': [22, 27], 'Venus': [15, 21], 'Mars': [1, 6], 'Jupiter': [7, 14], 'Saturn': [28, 30] }
    },
    'sagittarius': {
        element: 'Fire',
        decanEffects: { '1st Decan': ['Mercury'], '2nd Decan': ['Moon'], '3rd Decan': ['Saturn'] },
        degreeEffects: { 'Mercury': [15, 20], 'Venus': [9, 14], 'Mars': [], 'Jupiter': [1, 8], 'Saturn': [21, 25] }
    },
    'capricorn': {
        element: 'Earth',
        decanEffects: { '1st Decan': ['Jupiter'], '2nd Decan': [], '3rd Decan': ['Sun'] },
        degreeEffects: { 'Mercury': [7, 12], 'Venus': [1, 6], 'Mars': [], 'Jupiter': [13, 19], 'Saturn': [26, 30] }
    },
    'aquarius': {
        element: 'Air',
        decanEffects: { '1st Decan': ['Uranus'], '2nd Decan': ['Mercury'], '3rd Decan': ['Moon'] },
        degreeEffects: { 'Mercury': [], 'Venus': [13, 20], 'Mars': [26, 30], 'Jupiter': [21, 25], 'Saturn': [1, 6] }
    },
    'pisces': {
        element: 'Water',
        decanEffects: { '1st Decan': ['Saturn', 'Neptune', 'Venus'], '2nd Decan': ['Jupiter'], '3rd Decan': ['Pisces', 'Mars'] },
        degreeEffects: { 'Mercury': [15, 20], 'Venus': [1, 8], 'Mars': [21, 26], 'Jupiter': [9, 14], 'Saturn': [27, 30] }
    }
};
/**
 * Calculate the planetary day influence on food ingredients
 * Now enhanced with dignity effects, decan effects, and degree effects
 */
function calculatePlanetaryDayInfluence(ingredient, planetaryDay, planetaryPositions) {
    var _a, _b;
    // Get the elements associated with the current planetary day
    const dayElements = planetaryElements[planetaryDay];
    if (!dayElements)
        return 0.5; // Unknown planet
    // For planetary day, BOTH diurnal and nocturnal elements influence all day
    const diurnalElement = dayElements.diurnal;
    const nocturnalElement = dayElements.nocturnal;
    // Calculate match based on food's element compared to planetary elements
    let diurnalMatch = 0;
    let nocturnalMatch = 0;
    // Check if ingredient has elemental properties
    if (ingredient === null || ingredient === void 0 ? void 0 : ingredient.elementalProperties) {
        diurnalMatch = (ingredient === null || ingredient === void 0 ? void 0 : ingredient.elementalProperties[diurnalElement]) || 0;
        nocturnalMatch = (ingredient === null || ingredient === void 0 ? void 0 : ingredient.elementalProperties[nocturnalElement]) || 0;
    }
    else {
        // Simple matching if no detailed elemental profile is available
        // Extract ingredient data with safe property access for element
        const ingredientData = ingredient;
        const ingredientElement = (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.element) || (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.category) || '';
        diurnalMatch = ingredientElement === diurnalElement ? 1.0 : 0.3;
        nocturnalMatch = ingredientElement === nocturnalElement ? 1.0 : 0.3;
    }
    // Calculate a weighted score - both elements are equally important for planetary day
    let elementalScore = (diurnalMatch + nocturnalMatch) / 2;
    // Apply dignity effects if we have planet positions
    if (planetaryPositions && planetaryPositions[planetaryDay]) {
        const planetSign = planetaryPositions[planetaryDay].sign;
        const planetDegree = planetaryPositions[planetaryDay].degree;
        // Dignity effect bonus/penalty
        if (dayElements.dignityEffect && dayElements.dignityEffect[planetSign]) {
            const dignityModifier = dayElements.dignityEffect[planetSign] * 0.1; // Scale to 0.1-0.3 effect
            elementalScore = Math.min(1.0, Math.max(0.0, elementalScore + dignityModifier));
        }
        // Calculate decan (1-10°: 1st decan, 11-20°: 2nd decan, 21-30°: 3rd decan)
        let decan = '1st Decan';
        if (planetDegree > 10 && planetDegree <= 20)
            decan = '2nd Decan';
        else if (planetDegree > 20)
            decan = '3rd Decan';
        // Apply decan effects if the planet is in its own decan
        if (signInfo[planetSign] &&
            signInfo[planetSign].decanEffects[decan] &&
            signInfo[planetSign].decanEffects[decan].includes(planetaryDay)) {
            elementalScore = Math.min(1.0, elementalScore + 0.15);
        }
        // Apply degree effects
        if (signInfo[planetSign] &&
            signInfo[planetSign].degreeEffects[planetaryDay] &&
            signInfo[planetSign].degreeEffects[planetaryDay].length === 2) {
            const [minDegree, maxDegree] = signInfo[planetSign].degreeEffects[planetaryDay];
            if (planetDegree >= minDegree && planetDegree <= maxDegree) {
                elementalScore = Math.min(1.0, elementalScore + 0.2);
            }
        }
    }
    // If the food has a direct planetary affinity, give bonus points
    if ((_b = (_a = ingredient === null || ingredient === void 0 ? void 0 : ingredient.astrologicalProfile) === null || _a === void 0 ? void 0 : _a.rulingPlanets) === null || _b === void 0 ? void 0 : _b.includes(planetaryDay)) {
        elementalScore = Math.min(1.0, elementalScore + 0.3);
    }
    return elementalScore;
}
/**
 * Calculate the planetary hour influence on food
 * Now enhanced with dignity effects and aspect considerations
 */
function calculatePlanetaryHourInfluence(ingredient, planetaryHour, isDaytime, planetaryPositions, aspects) {
    var _a, _b, _c, _d;
    // Get the elements associated with the current planetary hour
    const hourElements = planetaryElements[planetaryHour];
    if (!hourElements)
        return 0.5; // Unknown planet
    // For planetary hour, use diurnal element during day, nocturnal at night
    const relevantElement = isDaytime ? hourElements.diurnal : hourElements.nocturnal;
    // Calculate match based on food's element compared to the hour's relevant element
    let elementalMatch = 0;
    // Check if ingredient has elemental properties
    if (ingredient === null || ingredient === void 0 ? void 0 : ingredient.elementalProperties) {
        elementalMatch = (ingredient === null || ingredient === void 0 ? void 0 : ingredient.elementalProperties[relevantElement]) || 0;
    }
    else {
        // Simple matching if no detailed elemental profile is available
        // Extract ingredient data with safe property access for element
        const ingredientData = ingredient;
        const ingredientElement = (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.element) || (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.category) || '';
        elementalMatch = ingredientElement === relevantElement ? 1.0 : 0.3;
    }
    // Apply dignity effects if we have planet positions
    if (planetaryPositions && planetaryPositions[planetaryHour]) {
        const planetSign = planetaryPositions[planetaryHour].sign;
        // Dignity effect bonus/penalty
        if (hourElements.dignityEffect && hourElements.dignityEffect[planetSign]) {
            const dignityModifier = hourElements.dignityEffect[planetSign] * 0.1; // Scale to 0.1-0.3 effect
            elementalMatch = Math.min(1.0, Math.max(0.0, elementalMatch + dignityModifier));
        }
    }
    // Apply aspect effects if available
    if (aspects && aspects.length > 0) {
        // Find aspects involving the planetary hour ruler
        const hourAspects = aspects.filter(a => a.planet1 === planetaryHour || a.planet2 === planetaryHour);
        for (const aspect of hourAspects) {
            const otherPlanet = aspect.planet1 === planetaryHour ? aspect.planet2 : aspect.planet1;
            let aspectModifier = 0;
            // Apply different modifier based on aspect type
            switch (aspect.aspectType) {
                case 'Conjunction':
                    // Strong beneficial aspect
                    aspectModifier = 0.15;
                    break;
                case 'Trine':
                    // Beneficial aspect
                    aspectModifier = 0.1;
                    break;
                case 'Square':
                    // Challenging aspect
                    aspectModifier = -0.1;
                    break;
                case 'Opposition':
                    // Strong challenging aspect
                    aspectModifier = -0.15;
                    break;
                default:
                    aspectModifier = 0;
            }
            // Apply the aspect modifier if the ingredient is ruled by the other planet in the aspect
            if ((_b = (_a = ingredient === null || ingredient === void 0 ? void 0 : ingredient.astrologicalProfile) === null || _a === void 0 ? void 0 : _a.rulingPlanets) === null || _b === void 0 ? void 0 : _b.includes(otherPlanet)) {
                elementalMatch = Math.min(1.0, Math.max(0.0, elementalMatch + aspectModifier));
            }
        }
    }
    // If the food has a direct planetary affinity, give bonus points
    if ((_d = (_c = ingredient === null || ingredient === void 0 ? void 0 : ingredient.astrologicalProfile) === null || _c === void 0 ? void 0 : _c.rulingPlanets) === null || _d === void 0 ? void 0 : _d.includes(planetaryHour)) {
        elementalMatch = Math.min(1.0, elementalMatch + 0.3);
    }
    return elementalMatch;
}
/**
 * Helper function to determine if it's currently daytime (6am-6pm)
 */
function isDaytime(date = new Date()) {
    const hour = date.getHours();
    return hour >= 6 && hour < 18;
}
/**
 * Recommend ingredients with enhanced planetary, dignity and aspect effects
 */
function recommendIngredients(astroState, options = {}) {
    // Get all available ingredients
    const allIngredients = getAllIngredients();
    // Filter by category if specified
    let filteredIngredients = allIngredients;
    if (options.category) {
        filteredIngredients = allIngredients.filter(ing => {
            var _a;
            // Extract ingredient data with safe property access for type/category
            const ingredientData = ing;
            const ingredientType = (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.type) || (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.category) || '';
            return ingredientType.toLowerCase() === ((_a = options.category) === null || _a === void 0 ? void 0 : _a.toLowerCase());
        });
    }
    // Filter out excluded ingredients
    if (options.excludeIngredients && options.excludeIngredients.length > 0) {
        filteredIngredients = filteredIngredients.filter(ing => { var _a; return !((_a = options.excludeIngredients) === null || _a === void 0 ? void 0 : _a.includes(ing === null || ing === void 0 ? void 0 : ing.name)); });
    }
    // Filter to only include specific ingredients
    if (options.includeOnly && options.includeOnly.length > 0) {
        filteredIngredients = filteredIngredients.filter(ing => { var _a; return (_a = options.includeOnly) === null || _a === void 0 ? void 0 : _a.includes(ing === null || ing === void 0 ? void 0 : ing.name); });
    }
    // Extract key astrological information
    // Extract astrological state with safe property access
    const astroStateData = astroState;
    const timestamp = (astroStateData === null || astroStateData === void 0 ? void 0 : astroStateData.timestamp) || new Date();
    const Fire = (astroStateData === null || astroStateData === void 0 ? void 0 : astroStateData.Fire) || 0.5;
    const Water = (astroStateData === null || astroStateData === void 0 ? void 0 : astroStateData.Water) || 0.5;
    const Air = (astroStateData === null || astroStateData === void 0 ? void 0 : astroStateData.Air) || 0.5;
    const Earth = (astroStateData === null || astroStateData === void 0 ? void 0 : astroStateData.Earth) || 0.5;
    const zodiacSign = (astroStateData === null || astroStateData === void 0 ? void 0 : astroStateData.zodiacSign) || '';
    const planetaryAlignment = (astroStateData === null || astroStateData === void 0 ? void 0 : astroStateData.planetaryAlignment) || {};
    const aspects = (astroStateData === null || astroStateData === void 0 ? void 0 : astroStateData.aspects) || [];
    const lunarPhase = (astroStateData === null || astroStateData === void 0 ? void 0 : astroStateData.lunarPhase) || '';
    // Get planetary day and hour for current time
    const date = timestamp instanceof Date ? timestamp : new Date(timestamp);
    const planetaryCalculator = {
        calculatePlanetaryDay: (date) => {
            const days = ['Sun', 'Moon', 'Mars', 'Mercury', 'Jupiter', 'Venus', 'Saturn'];
            return days[date.getDay()];
        },
        calculatePlanetaryHour: (date) => {
            // This is a simplified calculation
            const hours = [
                'Sun', 'Venus', 'Mercury', 'Moon', 'Saturn', 'Jupiter', 'Mars',
                'Sun', 'Venus', 'Mercury', 'Moon', 'Saturn', 'Jupiter', 'Mars',
                'Sun', 'Venus', 'Mercury', 'Moon', 'Saturn', 'Jupiter', 'Mars',
                'Sun', 'Venus', 'Mercury', 'Moon'
            ];
            return hours[date.getHours()];
        },
        isDaytime: isDaytime
    };
    const planetaryDay = planetaryCalculator.calculatePlanetaryDay(date);
    const planetaryHour = planetaryCalculator.calculatePlanetaryHour(date);
    const isDaytimeNow = planetaryCalculator.isDaytime(date);
    // Create elemental properties object for the current system state
    const systemElementalProps = { Fire, Water, Air, Earth };
    const recommendations = [];
    // Calculate scores for each ingredient
    for (const ingredient of filteredIngredients) {
        // Calculate elemental match (45% weight)
        const elementalScore = calculateElementalScore(ingredient === null || ingredient === void 0 ? void 0 : ingredient.elementalProperties, systemElementalProps);
        // Calculate planetary day influence with enhanced dignity effects (35% weight)
        const planetaryDayScore = calculatePlanetaryDayInfluence(ingredient, planetaryDay, planetaryAlignment);
        // Calculate planetary hour influence with enhanced dignity and aspect effects (20% weight)
        const planetaryHourScore = calculatePlanetaryHourInfluence(ingredient, planetaryHour, isDaytimeNow, planetaryAlignment, aspects);
        // Apply standardized weighting
        const totalScore = (elementalScore * 0.45 +
            planetaryDayScore * 0.35 +
            planetaryHourScore * 0.20);
        // Generate ingredient-specific recommendations based on planetary influences
        const ingredientRecommendations = generateRecommendationsForIngredient(ingredient, planetaryDay, planetaryHour, isDaytimeNow, planetaryAlignment, aspects);
        // Add to recommendations list
        // Apply Pattern L: Interface property mapping for IngredientRecommendation compatibility
        const ingredientData = ingredient;
        const ingredientRecommendation = {
            name: (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.name) || '',
            type: (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.type) || '',
            category: ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.category,
            elementalProperties: ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.elementalProperties,
            qualities: ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.qualities,
            matchScore: totalScore,
            modality: ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.modality,
            recommendations: ingredientRecommendations,
            description: ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.description,
            totalScore,
            elementalScore: elementalScore * 0.45,
            astrologicalScore: (planetaryDayScore * 0.35) + (planetaryHourScore * 0.20),
            seasonalScore: ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.seasonalScore,
            dietary: ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.dietary
        };
        recommendations.push(ingredientRecommendation);
    }
    // Sort by match score (highest first)
    recommendations.sort((a, b) => b.matchScore - a.matchScore);
    // Apply limit if specified
    const limit = options.limit || 10;
    return recommendations.slice(0, limit);
}
exports.recommendIngredients = recommendIngredients;
/**
 * Generate enhanced recommendations for an ingredient based on planetary influences
 */
function generateRecommendationsForIngredient(ingredient, planetaryDay, planetaryHour, isDaytime, planetaryPositions, aspects) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
    const recs = [];
    // Basic recommendation based on planetary day
    if (planetaryElements[planetaryDay]) {
        const dayElements = planetaryElements[planetaryDay];
        recs.push(`${ingredient === null || ingredient === void 0 ? void 0 : ingredient.name} works well on ${planetaryDay}'s day with its ${dayElements.diurnal} and ${dayElements.nocturnal} influences.`);
    }
    // Time-specific recommendation based on planetary hour
    if (planetaryElements[planetaryHour]) {
        const hourElement = isDaytime
            ? planetaryElements[planetaryHour].diurnal
            : planetaryElements[planetaryHour].nocturnal;
        recs.push(`During the current hour of ${planetaryHour}, ${ingredient === null || ingredient === void 0 ? void 0 : ingredient.name}'s ${hourElement} properties are enhanced.`);
    }
    // Add dignity effect recommendations if planet is in dignified or debilitated sign
    if (planetaryPositions) {
        // Check day planet dignity
        if (((_a = planetaryElements[planetaryDay]) === null || _a === void 0 ? void 0 : _a.dignityEffect) &&
            planetaryPositions[planetaryDay]) {
            const daySign = planetaryPositions[planetaryDay].sign;
            const dayDignity = (_b = planetaryElements[planetaryDay].dignityEffect) === null || _b === void 0 ? void 0 : _b[daySign];
            if (dayDignity && dayDignity > 0 && ((_d = (_c = ingredient === null || ingredient === void 0 ? void 0 : ingredient.astrologicalProfile) === null || _c === void 0 ? void 0 : _c.rulingPlanets) === null || _d === void 0 ? void 0 : _d.includes(planetaryDay))) {
                recs.push(`${planetaryDay} is ${dayDignity > 1 ? 'exalted' : 'dignified'} in ${daySign}, strengthening ${ingredient === null || ingredient === void 0 ? void 0 : ingredient.name}'s properties.`);
            }
            else if (dayDignity && dayDignity < 0 && ((_f = (_e = ingredient === null || ingredient === void 0 ? void 0 : ingredient.astrologicalProfile) === null || _e === void 0 ? void 0 : _e.rulingPlanets) === null || _f === void 0 ? void 0 : _f.includes(planetaryDay))) {
                recs.push(`${planetaryDay} is ${dayDignity < -1 ? 'in fall' : 'in detriment'} in ${daySign}, requiring careful preparation of ${ingredient === null || ingredient === void 0 ? void 0 : ingredient.name}.`);
            }
        }
        // Check hour planet dignity
        if (((_g = planetaryElements[planetaryHour]) === null || _g === void 0 ? void 0 : _g.dignityEffect) &&
            planetaryPositions[planetaryHour]) {
            const hourSign = planetaryPositions[planetaryHour].sign;
            const hourDignity = (_h = planetaryElements[planetaryHour].dignityEffect) === null || _h === void 0 ? void 0 : _h[hourSign];
            if (hourDignity && hourDignity > 0 && ((_k = (_j = ingredient === null || ingredient === void 0 ? void 0 : ingredient.astrologicalProfile) === null || _j === void 0 ? void 0 : _j.rulingPlanets) === null || _k === void 0 ? void 0 : _k.includes(planetaryHour))) {
                recs.push(`During this hour, ${planetaryHour}'s dignity in ${hourSign} enhances ${ingredient === null || ingredient === void 0 ? void 0 : ingredient.name}'s flavor profile.`);
            }
        }
    }
    // Add aspect-based recommendations
    if (aspects && aspects.length > 0) {
        const relevantAspects = aspects.filter(aspect => (aspect.planet1 === planetaryDay || aspect.planet2 === planetaryDay) ||
            (aspect.planet1 === planetaryHour || aspect.planet2 === planetaryHour));
        for (const aspect of relevantAspects) {
            if (aspect.aspectType === 'Conjunction') {
                const planets = [aspect.planet1, aspect.planet2];
                if (planets.includes(planetaryDay) || planets.includes(planetaryHour)) {
                    const otherPlanet = planets.find(p => p !== planetaryDay && p !== planetaryHour);
                    if (otherPlanet && ((_m = (_l = ingredient === null || ingredient === void 0 ? void 0 : ingredient.astrologicalProfile) === null || _l === void 0 ? void 0 : _l.rulingPlanets) === null || _m === void 0 ? void 0 : _m.includes(otherPlanet))) {
                        recs.push(`The conjunction between ${aspect.planet1} and ${aspect.planet2} strongly enhances ${ingredient === null || ingredient === void 0 ? void 0 : ingredient.name}'s qualities.`);
                    }
                }
            }
            else if (aspect.aspectType === 'Trine') {
                const planets = [aspect.planet1, aspect.planet2];
                if (planets.includes(planetaryDay) || planets.includes(planetaryHour)) {
                    const otherPlanet = planets.find(p => p !== planetaryDay && p !== planetaryHour);
                    if (otherPlanet && ((_p = (_o = ingredient === null || ingredient === void 0 ? void 0 : ingredient.astrologicalProfile) === null || _o === void 0 ? void 0 : _o.rulingPlanets) === null || _p === void 0 ? void 0 : _p.includes(otherPlanet))) {
                        recs.push(`The harmonious trine between ${aspect.planet1} and ${aspect.planet2} creates a flowing energy for ${ingredient === null || ingredient === void 0 ? void 0 : ingredient.name}.`);
                    }
                }
            }
        }
    }
    // Direct planetary affinity recommendation
    if ((_q = ingredient === null || ingredient === void 0 ? void 0 : ingredient.astrologicalProfile) === null || _q === void 0 ? void 0 : _q.rulingPlanets) {
        const rulingPlanets = ingredient === null || ingredient === void 0 ? void 0 : ingredient.astrologicalProfile.rulingPlanets;
        if (rulingPlanets.includes(planetaryDay)) {
            recs.push(`${ingredient === null || ingredient === void 0 ? void 0 : ingredient.name} is especially potent today as it's ruled by ${planetaryDay}.`);
        }
        if (rulingPlanets.includes(planetaryHour)) {
            recs.push(`This is an optimal hour to work with ${ingredient === null || ingredient === void 0 ? void 0 : ingredient.name} due to ${planetaryHour}'s influence.`);
        }
    }
    return recs;
}
// ... existing code ...
// ... existing code ...
// ... existing code ...
//# sourceMappingURL=data:application/json;charset=utf-8;base64,