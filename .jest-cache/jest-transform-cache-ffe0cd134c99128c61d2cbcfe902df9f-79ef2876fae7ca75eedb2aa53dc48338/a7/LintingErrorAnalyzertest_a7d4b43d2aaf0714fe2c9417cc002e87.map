{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/linting/__tests__/LintingErrorAnalyzer.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/linting/__tests__/LintingErrorAnalyzer.test.ts"],"sourcesContent":["/**\n * Simple tests for LintingErrorAnalyzer\n */\n\nimport { LintingErrorAnalyzer } from '../LintingErrorAnalyzer';\n\n// Mock child_process to prevent actual ESLint execution\nconst mockExecSync = jest.fn();\njest.mock('child_process', () => ({\n  execSync: mockExecSync\n}));\n\ndescribe('LintingErrorAnalyzer', () => {\n  let analyzer: LintingErrorAnalyzer;\n\n  beforeEach(() => {\n    analyzer = new LintingErrorAnalyzer('/test');\n    jest.clearAllMocks();\n  });\n\n  describe('Basic Functionality', () => {\n    it('should create analyzer instance', () => {\n      expect(analyzer).toBeDefined();\n      expect(analyzer).toBeInstanceOf(LintingErrorAnalyzer);\n    });\n\n    it('should handle empty ESLint output', async () => {\n      mockExecSync.mockReturnValue('[]');\n      \n      const result = await analyzer.analyzeAllIssues();\n      \n      expect(result).toBeDefined();\n      expect(result.total).toBe(0);\n      expect(result.errors).toBe(0);\n      expect(result.warnings).toBe(0);\n      expect(result.autoFixable).toHaveLength(0);\n    });\n\n    it('should parse ESLint output correctly', async () => {\n      const mockOutput = JSON.stringify([\n        {\n          filePath: '/test/src/App.tsx',\n          messages: [\n            {\n              ruleId: 'import/order',\n              severity: 2,\n              message: 'Import order is incorrect',\n              line: 1,\n              column: 1,\n              fix: { range: [0, 10], text: 'fixed' }\n            },\n            {\n              ruleId: '@typescript-eslint/no-explicit-any',\n              severity: 1,\n              message: 'Unexpected any type',\n              line: 5,\n              column: 10\n            }\n          ]\n        }\n      ]);\n      \n      mockExecSync.mockReturnValue(mockOutput);\n      \n      const result = await analyzer.analyzeAllIssues();\n      \n      expect(result.total).toBe(2);\n      expect(result.errors).toBe(1); // severity 2\n      expect(result.warnings).toBe(1); // severity 1\n      expect(result.autoFixable).toHaveLength(1); // import/order has fix\n    });\n\n    it('should categorize issues correctly', async () => {\n      const mockOutput = JSON.stringify([\n        {\n          filePath: '/test/src/App.tsx',\n          messages: [\n            {\n              ruleId: 'import/order',\n              severity: 2,\n              message: 'Import order is incorrect',\n              line: 1,\n              column: 1,\n              fix: { range: [0, 10], text: 'fixed' }\n            },\n            {\n              ruleId: '@typescript-eslint/no-explicit-any',\n              severity: 1,\n              message: 'Unexpected any type',\n              line: 5,\n              column: 10\n            },\n            {\n              ruleId: 'react-hooks/exhaustive-deps',\n              severity: 1,\n              message: 'Missing dependency',\n              line: 10,\n              column: 5\n            }\n          ]\n        }\n      ]);\n      \n      mockExecSync.mockReturnValue(mockOutput);\n      \n      const result = await analyzer.analyzeAllIssues();\n      \n      expect(result.byCategory['import']).toHaveLength(1);\n      expect(result.byCategory['typescript']).toHaveLength(1);\n      expect(result.byCategory['react']).toHaveLength(1);\n    });\n\n    it('should generate resolution plan', async () => {\n      const mockOutput = JSON.stringify([\n        {\n          filePath: '/test/src/App.tsx',\n          messages: [\n            {\n              ruleId: 'import/order',\n              severity: 2,\n              message: 'Import order is incorrect',\n              line: 1,\n              column: 1,\n              fix: { range: [0, 10], text: 'fixed' }\n            }\n          ]\n        }\n      ]);\n      \n      mockExecSync.mockReturnValue(mockOutput);\n      \n      const categorized = await analyzer.analyzeAllIssues();\n      const plan = analyzer.generateResolutionPlan(categorized);\n      \n      expect(plan).toBeDefined();\n      expect(plan.phases).toBeDefined();\n      expect(plan.phases.length).toBeGreaterThan(0);\n      expect(plan.totalEstimatedTime).toBeGreaterThan(0);\n      expect(plan.riskAssessment).toBeDefined();\n      expect(plan.successProbability).toBeGreaterThan(0);\n    });\n\n    it('should handle ESLint execution errors', async () => {\n      const error = new Error('ESLint failed');\n      (error as any).stdout = '[]';\n      mockExecSync.mockImplementation(() => {\n        throw error;\n      });\n      \n      const result = await analyzer.analyzeAllIssues();\n      \n      expect(result).toBeDefined();\n      expect(result.total).toBe(0);\n    });\n  });\n\n  describe('Domain Context Detection', () => {\n    it('should detect astrological files', async () => {\n      const mockOutput = JSON.stringify([\n        {\n          filePath: '/test/src/calculations/astrology.ts',\n          messages: [\n            {\n              ruleId: '@typescript-eslint/no-explicit-any',\n              severity: 1,\n              message: 'Unexpected any type',\n              line: 5,\n              column: 10\n            }\n          ]\n        }\n      ]);\n      \n      mockExecSync.mockReturnValue(mockOutput);\n      \n      const result = await analyzer.analyzeAllIssues();\n      const issue = Object.values(result.byCategory).flat()[0];\n      \n      expect(issue.domainContext?.isAstrologicalCalculation).toBe(true);\n      expect(issue.domainContext?.requiresSpecialHandling).toBe(true);\n    });\n\n    it('should detect campaign system files', async () => {\n      const mockOutput = JSON.stringify([\n        {\n          filePath: '/test/src/services/campaign/CampaignController.ts',\n          messages: [\n            {\n              ruleId: 'no-console',\n              severity: 1,\n              message: 'Unexpected console statement',\n              line: 5,\n              column: 10\n            }\n          ]\n        }\n      ]);\n      \n      mockExecSync.mockReturnValue(mockOutput);\n      \n      const result = await analyzer.analyzeAllIssues();\n      const issue = Object.values(result.byCategory).flat()[0];\n      \n      expect(issue.domainContext?.isCampaignSystem).toBe(true);\n      expect(issue.domainContext?.requiresSpecialHandling).toBe(true);\n    });\n\n    it('should detect test files', async () => {\n      const mockOutput = JSON.stringify([\n        {\n          filePath: '/test/src/components/__tests__/Component.test.tsx',\n          messages: [\n            {\n              ruleId: '@typescript-eslint/no-explicit-any',\n              severity: 1,\n              message: 'Unexpected any type',\n              line: 5,\n              column: 10\n            }\n          ]\n        }\n      ]);\n      \n      mockExecSync.mockReturnValue(mockOutput);\n      \n      const result = await analyzer.analyzeAllIssues();\n      const issue = Object.values(result.byCategory).flat()[0];\n      \n      expect(issue.domainContext?.isTestFile).toBe(true);\n      expect(issue.domainContext?.requiresSpecialHandling).toBe(true);\n    });\n  });\n\n  describe('Resolution Strategy Generation', () => {\n    it('should prioritize auto-fixable issues', async () => {\n      const mockOutput = JSON.stringify([\n        {\n          filePath: '/test/src/App.tsx',\n          messages: [\n            {\n              ruleId: 'import/order',\n              severity: 2,\n              message: 'Import order is incorrect',\n              line: 1,\n              column: 1,\n              fix: { range: [0, 10], text: 'fixed' }\n            },\n            {\n              ruleId: '@typescript-eslint/no-explicit-any',\n              severity: 1,\n              message: 'Unexpected any type',\n              line: 5,\n              column: 10\n            }\n          ]\n        }\n      ]);\n      \n      mockExecSync.mockReturnValue(mockOutput);\n      \n      const categorized = await analyzer.analyzeAllIssues();\n      const plan = analyzer.generateResolutionPlan(categorized);\n      \n      // Auto-fix phase should come first\n      const autoFixPhase = plan.phases.find(p => p.id === 'auto-fix');\n      expect(autoFixPhase).toBeDefined();\n      expect(autoFixPhase?.riskLevel).toBe('low');\n    });\n\n    it('should handle domain-specific issues with higher risk', async () => {\n      const mockOutput = JSON.stringify([\n        {\n          filePath: '/test/src/calculations/astrology.ts',\n          messages: [\n            {\n              ruleId: '@typescript-eslint/no-explicit-any',\n              severity: 1,\n              message: 'Unexpected any type',\n              line: 5,\n              column: 10\n            }\n          ]\n        }\n      ]);\n      \n      mockExecSync.mockReturnValue(mockOutput);\n      \n      const categorized = await analyzer.analyzeAllIssues();\n      const plan = analyzer.generateResolutionPlan(categorized);\n      \n      // Domain phase should have higher risk\n      const domainPhase = plan.phases.find(p => p.id === 'domain');\n      expect(domainPhase).toBeDefined();\n      expect(domainPhase?.riskLevel).toBe('high');\n    });\n  });\n});"],"version":3}