c471e34f29688c232cd6f17d5cb9a920
"use strict";
/**
 * Documentation Quality Assurance System
 *
 * Implements comment quality checking, validation of documentation completeness,
 * and reporting system for undocumented intentional any types.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentationQualityAssurance = void 0;
const fs = __importStar(require("fs/promises"));
const path_1 = __importDefault(require("path"));
const types_1 = require("./types");
class DocumentationQualityAssurance {
    config;
    qualityCache = new Map();
    constructor(config) {
        this.config = {
            sourceDirectories: ['src'],
            excludePatterns: [
                'node_modules/**',
                'dist/**',
                'build/**',
                '**/*.test.ts',
                '**/*.test.tsx',
                '**/*.spec.ts',
                '**/*.spec.tsx'
            ],
            minimumCommentLength: 20,
            requiredKeywords: ['intentionally', 'deliberately', 'required', 'needed'],
            qualityThresholds: {
                excellent: 90,
                good: 70,
                fair: 50
            },
            ...config
        };
    }
    /**
     * Perform comprehensive quality assurance scan
     */
    async performQualityAssurance() {
        const files = await this.findTypeScriptFiles();
        const undocumentedTypes = [];
        const qualityBreakdown = {
            poor: 0,
            fair: 0,
            good: 0,
            excellent: 0
        };
        let totalAnyTypes = 0;
        let documentedTypes = 0;
        let totalQualityScore = 0;
        for (const filePath of files) {
            try {
                const anyTypes = await this.findAnyTypesInFile(filePath);
                totalAnyTypes += anyTypes.length;
                for (const anyType of anyTypes) {
                    const validation = await this.validateDocumentationQuality(anyType);
                    if (validation.hasComment) {
                        documentedTypes++;
                        qualityBreakdown[validation.commentQuality]++;
                        totalQualityScore += this.getQualityScore(validation.commentQuality);
                    }
                    else {
                        undocumentedTypes.push({
                            filePath: anyType.filePath,
                            lineNumber: anyType.lineNumber,
                            codeSnippet: anyType.codeSnippet,
                            category: this.categorizeAnyType(anyType.codeSnippet),
                            domain: this.determineDomain(anyType.filePath),
                            severity: this.assessSeverity(anyType)
                        });
                    }
                }
            }
            catch (error) {
                console.warn(`Error processing file ${filePath}:`, error);
            }
        }
        const averageQualityScore = totalAnyTypes > 0 ? totalQualityScore / documentedTypes : 0;
        const documentationCoverage = totalAnyTypes > 0 ? (documentedTypes / totalAnyTypes) * 100 : 100;
        return {
            totalIntentionalAnyTypes: totalAnyTypes,
            documentedTypes,
            undocumentedTypes: undocumentedTypes.length,
            documentationCoverage,
            qualityBreakdown,
            undocumentedFiles: [...new Set(undocumentedTypes.map(t => t.filePath))],
            recommendations: this.generateRecommendations(documentationCoverage, qualityBreakdown, undocumentedTypes)
        };
    }
    /**
     * Validate documentation quality for a specific context
     */
    async validateDocumentationQuality(context) {
        const cacheKey = `${context.filePath}:${context.lineNumber}`;
        if (this.qualityCache.has(cacheKey)) {
            return this.qualityCache.get(cacheKey);
        }
        const fileContent = await fs.readFile(context.filePath, 'utf-8');
        const lines = fileContent.split('\n');
        const lineIndex = context.lineNumber - 1;
        // Check for comments in surrounding lines
        const { comment, hasComment } = this.extractComment(lines, lineIndex);
        // Check for ESLint disable comment
        const hasEslintDisable = this.hasEslintDisableComment(lines, lineIndex);
        const eslintDisableHasExplanation = hasEslintDisable &&
            this.eslintDisableHasExplanation(lines, lineIndex);
        // Assess comment quality
        const commentQuality = this.assessCommentQuality(comment);
        // Check completeness
        const isComplete = hasComment &&
            commentQuality !== 'poor' &&
            hasEslintDisable &&
            eslintDisableHasExplanation;
        // Generate suggestions
        const suggestions = this.generateQualityImprovementSuggestions(comment, hasComment, commentQuality, hasEslintDisable, eslintDisableHasExplanation, context);
        const validation = {
            hasComment,
            commentQuality,
            hasEslintDisable,
            eslintDisableHasExplanation,
            isComplete,
            suggestions
        };
        this.qualityCache.set(cacheKey, validation);
        return validation;
    }
    /**
     * Generate detailed quality improvement report
     */
    async generateQualityReport() {
        const files = await this.findTypeScriptFiles();
        let totalFiles = 0;
        let filesWithAnyTypes = 0;
        let totalAnyTypes = 0;
        let documentedAnyTypes = 0;
        const qualityDistribution = {
            poor: 0,
            fair: 0,
            good: 0,
            excellent: 0
        };
        let totalQualityScore = 0;
        for (const filePath of files) {
            totalFiles++;
            try {
                const anyTypes = await this.findAnyTypesInFile(filePath);
                if (anyTypes.length > 0) {
                    filesWithAnyTypes++;
                    totalAnyTypes += anyTypes.length;
                    for (const anyType of anyTypes) {
                        const validation = await this.validateDocumentationQuality(anyType);
                        if (validation.hasComment) {
                            documentedAnyTypes++;
                            qualityDistribution[validation.commentQuality]++;
                            totalQualityScore += this.getQualityScore(validation.commentQuality);
                        }
                    }
                }
            }
            catch (error) {
                console.warn(`Error processing file ${filePath}:`, error);
            }
        }
        const averageQualityScore = documentedAnyTypes > 0 ? totalQualityScore / documentedAnyTypes : 0;
        const compliancePercentage = totalAnyTypes > 0 ? (documentedAnyTypes / totalAnyTypes) * 100 : 100;
        return {
            totalFiles,
            filesWithAnyTypes,
            totalAnyTypes,
            documentedAnyTypes,
            undocumentedAnyTypes: totalAnyTypes - documentedAnyTypes,
            qualityDistribution,
            averageQualityScore,
            compliancePercentage
        };
    }
    /**
     * Find all TypeScript files in source directories
     */
    async findTypeScriptFiles() {
        const files = [];
        for (const dir of this.config.sourceDirectories) {
            const dirFiles = await this.findFilesRecursively(dir, ['.ts', '.tsx']);
            files.push(...dirFiles);
        }
        // Filter out excluded patterns
        return files.filter(file => {
            return !this.config.excludePatterns.some(pattern => {
                const regex = new RegExp(pattern.replace(/\*\*/g, '.*').replace(/\*/g, '[^/]*'));
                return regex.test(file);
            });
        });
    }
    /**
     * Recursively find files with specific extensions
     */
    async findFilesRecursively(dir, extensions) {
        const files = [];
        try {
            const entries = await fs.readdir(dir, { withFileTypes: true });
            for (const entry of entries) {
                const fullPath = path_1.default.join(dir, entry.name);
                if (entry.isDirectory()) {
                    const subFiles = await this.findFilesRecursively(fullPath, extensions);
                    files.push(...subFiles);
                }
                else if (entry.isFile()) {
                    const ext = path_1.default.extname(entry.name);
                    if (extensions.includes(ext)) {
                        files.push(fullPath);
                    }
                }
            }
        }
        catch (error) {
            // Directory might not exist or be accessible
            console.warn(`Could not read directory ${dir}:`, error);
        }
        return files;
    }
    /**
     * Find any types in a specific file
     */
    async findAnyTypesInFile(filePath) {
        const content = await fs.readFile(filePath, 'utf-8');
        const lines = content.split('\n');
        const anyTypes = [];
        // Patterns to match any types
        const anyPatterns = [
            /:\s*any\b/g,
            /:\s*any\[\]/g,
            /:\s*Record<[^,]+,\s*any>/g,
            /\bas\s+any\b/g,
            /<any>/g,
            /Array<any>/g, // Array<any>
        ];
        lines.forEach((line, index) => {
            anyPatterns.forEach(pattern => {
                const matches = line.matchAll(pattern);
                for (const match of matches) {
                    if (match.index !== undefined) {
                        const context = {
                            filePath,
                            lineNumber: index + 1,
                            codeSnippet: line.trim(),
                            surroundingLines: this.getSurroundingLines(lines, index),
                            hasExistingComment: this.hasCommentNearLine(lines, index),
                            existingComment: this.extractComment(lines, index).comment,
                            isInTestFile: this.isTestFile(filePath),
                            domainContext: {
                                domain: this.determineDomain(filePath),
                                intentionalityHints: [],
                                suggestedTypes: [],
                                preservationReasons: []
                            }
                        };
                        anyTypes.push(context);
                    }
                }
            });
        });
        return anyTypes;
    }
    /**
     * Extract comment from surrounding lines
     */
    extractComment(lines, lineIndex) {
        // Check previous lines for comments
        for (let i = Math.max(0, lineIndex - 3); i < lineIndex; i++) {
            const line = lines[i]?.trim();
            if (line && line.startsWith('//')) {
                return {
                    comment: line.replace(/^\/\/\s*/, ''),
                    hasComment: true
                };
            }
            if (line && line.startsWith('/*')) {
                // Handle multi-line comments
                let comment = line.replace(/^\/\*\s*/, '');
                let j = i;
                while (j < lines.length && !lines[j].includes('*/')) {
                    j++;
                    if (j < lines.length) {
                        comment += ' ' + lines[j].trim();
                    }
                }
                comment = comment.replace(/\*\/.*$/, '');
                return {
                    comment: comment.trim(),
                    hasComment: true
                };
            }
        }
        return { comment: '', hasComment: false };
    }
    /**
     * Check if there's a comment near the line
     */
    hasCommentNearLine(lines, lineIndex) {
        for (let i = Math.max(0, lineIndex - 2); i <= Math.min(lines.length - 1, lineIndex + 1); i++) {
            const line = lines[i]?.trim();
            if (line && (line.startsWith('//') || line.startsWith('/*'))) {
                return true;
            }
        }
        return false;
    }
    /**
     * Get surrounding lines for context
     */
    getSurroundingLines(lines, lineIndex) {
        const start = Math.max(0, lineIndex - 2);
        const end = Math.min(lines.length, lineIndex + 3);
        return lines.slice(start, end);
    }
    /**
     * Check if ESLint disable comment exists
     */
    hasEslintDisableComment(lines, lineIndex) {
        for (let i = Math.max(0, lineIndex - 2); i <= lineIndex; i++) {
            if (lines[i] && lines[i].includes('eslint-disable') &&
                lines[i].includes('no-explicit-any')) {
                return true;
            }
        }
        return false;
    }
    /**
     * Check if ESLint disable comment has explanation
     */
    eslintDisableHasExplanation(lines, lineIndex) {
        for (let i = Math.max(0, lineIndex - 2); i <= lineIndex; i++) {
            const line = lines[i];
            if (line && line.includes('eslint-disable') && line.includes('no-explicit-any')) {
                const parts = line.split('eslint-disable-next-line');
                return parts.length > 1 && parts[1].trim().length > '@typescript-eslint/no-explicit-any'.length;
            }
        }
        return false;
    }
    /**
     * Assess comment quality
     */
    assessCommentQuality(comment) {
        if (!comment || comment.trim().length < this.config.minimumCommentLength) {
            return 'poor';
        }
        const lowerComment = comment.toLowerCase();
        let score = 0;
        // Check for required keywords
        const hasRequiredKeyword = this.config.requiredKeywords.some(keyword => lowerComment.includes(keyword.toLowerCase()));
        if (hasRequiredKeyword)
            score += 30;
        // Check for explanation
        if (lowerComment.includes('because') || lowerComment.includes('for') ||
            lowerComment.includes('due to') || lowerComment.includes('requires')) {
            score += 25;
        }
        // Check for domain-specific context
        if (lowerComment.includes('api') || lowerComment.includes('external') ||
            lowerComment.includes('dynamic') || lowerComment.includes('flexible') ||
            lowerComment.includes('legacy') || lowerComment.includes('compatibility')) {
            score += 20;
        }
        // Check length and detail
        if (comment.length > 50)
            score += 15;
        if (comment.length > 100)
            score += 10;
        if (score >= this.config.qualityThresholds.excellent)
            return 'excellent';
        if (score >= this.config.qualityThresholds.good)
            return 'good';
        if (score >= this.config.qualityThresholds.fair)
            return 'fair';
        return 'poor';
    }
    /**
     * Get numeric quality score
     */
    getQualityScore(quality) {
        const scores = { poor: 25, fair: 50, good: 75, excellent: 100 };
        return scores[quality];
    }
    /**
     * Categorize any type based on code snippet
     */
    categorizeAnyType(codeSnippet) {
        const lower = codeSnippet.toLowerCase();
        if (lower.includes('catch') || lower.includes('error')) {
            return types_1.AnyTypeCategory.ERROR_HANDLING;
        }
        if (lower.includes('api') || lower.includes('response') || lower.includes('fetch')) {
            return types_1.AnyTypeCategory.EXTERNAL_API;
        }
        if (lower.includes('mock') || lower.includes('jest') || lower.includes('test')) {
            return types_1.AnyTypeCategory.TEST_MOCK;
        }
        if (lower.includes('config') || lower.includes('options') || lower.includes('params')) {
            return types_1.AnyTypeCategory.DYNAMIC_CONFIG;
        }
        if (lower.includes('any[]')) {
            return types_1.AnyTypeCategory.ARRAY_TYPE;
        }
        if (lower.includes('record') || lower.includes('object')) {
            return types_1.AnyTypeCategory.RECORD_TYPE;
        }
        if (lower.includes('function') || lower.includes('=>') || lower.includes('param')) {
            return types_1.AnyTypeCategory.FUNCTION_PARAM;
        }
        if (lower.includes('return') || lower.includes(':')) {
            return types_1.AnyTypeCategory.RETURN_TYPE;
        }
        return types_1.AnyTypeCategory.LEGACY_COMPATIBILITY;
    }
    /**
     * Determine code domain from file path
     */
    determineDomain(filePath) {
        const lower = filePath.toLowerCase();
        // Check for test files first (they often contain other keywords)
        if (lower.includes('test') || lower.includes('spec')) {
            return types_1.CodeDomain.TEST;
        }
        if (lower.includes('astro') || lower.includes('planet') || lower.includes('lunar')) {
            return types_1.CodeDomain.ASTROLOGICAL;
        }
        if (lower.includes('recipe') || lower.includes('ingredient') || lower.includes('food')) {
            return types_1.CodeDomain.RECIPE;
        }
        if (lower.includes('campaign') || lower.includes('automation')) {
            return types_1.CodeDomain.CAMPAIGN;
        }
        if (lower.includes('intelligence') || lower.includes('ai') || lower.includes('ml')) {
            return types_1.CodeDomain.INTELLIGENCE;
        }
        if (lower.includes('service') || lower.includes('api')) {
            return types_1.CodeDomain.SERVICE;
        }
        if (lower.includes('component') || lower.includes('tsx')) {
            return types_1.CodeDomain.COMPONENT;
        }
        return types_1.CodeDomain.UTILITY;
    }
    /**
     * Assess severity of undocumented any type
     */
    assessSeverity(context) {
        const { codeSnippet, filePath, isInTestFile } = context;
        // Test files are lower priority
        if (isInTestFile)
            return 'low';
        // Critical files or patterns
        if (filePath.includes('service') || filePath.includes('api')) {
            return 'high';
        }
        // Function parameters and return types are medium priority
        if (codeSnippet.includes('function') || codeSnippet.includes('=>')) {
            return 'medium';
        }
        // Array and Record types are medium priority
        if (codeSnippet.includes('any[]') || codeSnippet.includes('Record')) {
            return 'medium';
        }
        return 'low';
    }
    /**
     * Check if file is a test file
     */
    isTestFile(filePath) {
        return /\.(test|spec)\.(ts|tsx)$/.test(filePath);
    }
    /**
     * Generate quality improvement suggestions
     */
    generateQualityImprovementSuggestions(comment, hasComment, commentQuality, hasEslintDisable, eslintDisableHasExplanation, context) {
        const suggestions = [];
        if (!hasComment) {
            suggestions.push('Add explanatory comment indicating intentional use of any type');
            suggestions.push(`Consider using template: "// Intentionally any: ${this.suggestCommentTemplate(context)}"`);
        }
        else {
            switch (commentQuality) {
                case 'poor':
                    suggestions.push('Improve comment quality with more detailed explanation');
                    suggestions.push('Include keywords like "intentionally", "deliberately", or "required"');
                    suggestions.push(`Minimum comment length should be ${this.config.minimumCommentLength} characters`);
                    break;
                case 'fair':
                    suggestions.push('Consider adding more context about why any type is necessary');
                    suggestions.push('Explain the specific use case or external dependency');
                    break;
                case 'good':
                    suggestions.push('Comment quality is good, consider adding domain-specific context');
                    break;
                case 'excellent':
                    // No suggestions needed
                    break;
            }
        }
        if (!hasEslintDisable) {
            suggestions.push('Add ESLint disable comment: // eslint-disable-next-line @typescript-eslint/no-explicit-any');
        }
        else if (!eslintDisableHasExplanation) {
            suggestions.push('Add explanation to ESLint disable comment');
        }
        if (suggestions.length === 0) {
            suggestions.push('Documentation is complete and meets quality standards');
        }
        return suggestions;
    }
    /**
     * Suggest comment template based on context
     */
    suggestCommentTemplate(context) {
        const { domainContext, codeSnippet } = context;
        switch (domainContext.domain) {
            case types_1.CodeDomain.ASTROLOGICAL:
                return 'External astrological API response with dynamic structure';
            case types_1.CodeDomain.RECIPE:
                return 'External recipe API with flexible ingredient data';
            case types_1.CodeDomain.CAMPAIGN:
                return 'Campaign system requires flexible configuration for dynamic behavior';
            case types_1.CodeDomain.SERVICE:
                return 'External API response with unknown structure';
            case types_1.CodeDomain.TEST:
                return 'Test mock requires flexible typing for comprehensive testing';
            default:
                if (codeSnippet.includes('catch') || codeSnippet.includes('error')) {
                    return 'Error handling requires flexible typing for unknown error structures';
                }
                return 'Requires flexible typing for specific use case';
        }
    }
    /**
     * Generate recommendations based on analysis results
     */
    generateRecommendations(coverage, qualityBreakdown, undocumentedTypes) {
        const recommendations = [];
        if (coverage < 50) {
            recommendations.push('CRITICAL: Less than 50% of any types are documented. Immediate action required.');
        }
        else if (coverage < 80) {
            recommendations.push('WARNING: Documentation coverage is below 80%. Consider systematic documentation effort.');
        }
        else if (coverage < 95) {
            recommendations.push('GOOD: Documentation coverage is above 80%. Focus on remaining undocumented types.');
        }
        else {
            recommendations.push('EXCELLENT: Documentation coverage is above 95%. Maintain current standards.');
        }
        // Quality-based recommendations
        const totalQuality = Object.values(qualityBreakdown).reduce((sum, count) => sum + count, 0);
        if (totalQuality > 0) {
            const poorPercentage = (qualityBreakdown.poor / totalQuality) * 100;
            if (poorPercentage > 20) {
                recommendations.push('Focus on improving comment quality - over 20% are rated as poor quality.');
            }
        }
        // File-specific recommendations
        const criticalFiles = undocumentedTypes
            .filter(t => t.severity === 'critical' || t.severity === 'high')
            .map(t => t.filePath);
        if (criticalFiles.length > 0) {
            recommendations.push(`Priority files needing documentation: ${[...new Set(criticalFiles)].slice(0, 5).join(', ')}`);
        }
        // General recommendations
        recommendations.push('Use domain-specific documentation templates for consistency');
        recommendations.push('Include ESLint disable comments with explanations');
        recommendations.push('Regular quality assurance scans to maintain documentation standards');
        return recommendations;
    }
}
exports.DocumentationQualityAssurance = DocumentationQualityAssurance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,