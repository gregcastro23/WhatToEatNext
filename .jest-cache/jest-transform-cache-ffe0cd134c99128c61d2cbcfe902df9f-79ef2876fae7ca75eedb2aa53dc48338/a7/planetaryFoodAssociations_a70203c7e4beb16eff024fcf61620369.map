{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/constants/planetaryFoodAssociations.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/constants/planetaryFoodAssociations.ts"],"sourcesContent":["import { LunarPhaseWithSpaces } from '../types/alchemy';\n\nimport { ElementalCharacter } from './planetaryElements';\nimport { ZodiacSign } from './zodiac';\n\n/**\n * Enhanced planet type incorporating multiple astrological traditions\n */\n/**\n * Extended Planet type for planetary food associations\n */\nexport type Planet = \n  | 'Sun' | 'Moon' | 'Mercury' | 'Venus' | 'Mars' \n  | 'Jupiter' | 'Saturn' | 'Uranus' | 'Neptune' | 'Pluto'\n  | 'Rahu' | 'Ketu';\n\n/**\n * Planetary dignity types for calculation\n */\nexport type PlanetaryDignity = \n  | 'Domicile'\n  | 'Exaltation'\n  | 'Triplicity'\n  | 'Term'\n  | 'Face'\n  | 'Mooltrikona'\n  | 'Nakshatra'\n  | 'Detriment'\n  | 'Fall'\n  | 'Neutral';\n\n/**\n * Interface for planetary dignity details\n */\nexport interface PlanetaryDignityDetails {\n  type: PlanetaryDignity;\n  strength: number;\n  favorableZodiacSigns?: string[];\n  unfavorableZodiacSigns?: string[];\n}\n\n/**\n * Lunar phase system\n */\nexport type LunarPhase = LunarPhaseWithSpaces;\n\n/**\n * Planetary food associations structure\n */\nexport interface FoodAssociation {\n  name: string;\n  elements: string[];\n  qualities: string[];\n  foodCategories: string[];\n  specificFoods: string[];\n  cuisines: string[];\n  cookingMethods?: string[];\n  boostValue?: number;\n  elementalBoost?: Record<string, number>;\n}\n\nexport const planetaryFoodAssociations: Record<Planet, FoodAssociation> = {\n  Sun: {\n    name: 'Sun',\n    elements: ['Fire'],\n    qualities: ['Hot', 'Dry'],\n    foodCategories: ['Fruits', 'Spices', 'Grains'],\n    specificFoods: ['Oranges', 'Lemons', 'Honey', 'Saffron', 'Cinnamon', 'Wheat'],\n    cuisines: ['Mediterranean', 'Indian', 'Middle Eastern'],\n    elementalBoost: { 'Fire': 0.3, 'Air': 0.1 }\n  },\n  Moon: {\n    name: 'Moon',\n    elements: ['Water'],\n    qualities: ['Cold', 'Moist'],\n    foodCategories: ['Vegetables', 'Dairy', 'Seafood'],\n    specificFoods: ['Cucumber', 'Lettuce', 'Milk', 'Yogurt', 'White fish', 'Rice'],\n    cuisines: ['Japanese', 'Nordic', 'Coastal'],\n    elementalBoost: { 'Water': 0.3, 'Earth': 0.1 }\n  },\n  Mercury: {\n    name: 'Mercury',\n    elements: ['Air', 'Earth'],\n    qualities: ['Mixed', 'Adaptable'],\n    foodCategories: ['Nuts', 'Seeds', 'Herbs'],\n    specificFoods: ['Almonds', 'Fennel', 'Mint', 'Celery', 'Mixed greens'],\n    cuisines: ['Fusion', 'Contemporary', 'Diverse'],\n    elementalBoost: { 'Air': 0.2, 'Earth': 0.2 }\n  },\n  Venus: {\n    name: 'Venus',\n    elements: ['Earth', 'Water'],\n    qualities: ['Cool', 'Moist'],\n    foodCategories: ['Fruits', 'Sweets', 'Dairy'],\n    specificFoods: ['Apples', 'Berries', 'Chocolate', 'Vanilla', 'Cream'],\n    cuisines: ['French', 'Italian', 'Dessert-focused'],\n    elementalBoost: { 'Earth': 0.2, 'Water': 0.2 }\n  },\n  Mars: {\n    name: 'Mars',\n    elements: ['Fire'],\n    qualities: ['Hot', 'Dry'],\n    foodCategories: ['Meats', 'Spices', 'Alcohol'],\n    specificFoods: ['Red meat', 'Chili', 'Garlic', 'Onions', 'Red wine'],\n    cuisines: ['Spicy', 'BBQ', 'Grilled'],\n    elementalBoost: { 'Fire': 0.4 }\n  },\n  Jupiter: {\n    name: 'Jupiter',\n    elements: ['Fire', 'Air'],\n    qualities: ['Warm', 'Moist'],\n    foodCategories: ['Rich foods', 'Fruits', 'Meats'],\n    specificFoods: ['Fig', 'Asparagus', 'Salmon', 'Sage', 'Nutmeg'],\n    cuisines: ['Abundant', 'Festive', 'Celebratory'],\n    elementalBoost: { 'Fire': 0.2, 'Air': 0.2 }\n  },\n  Saturn: {\n    name: 'Saturn',\n    elements: ['Earth'],\n    qualities: ['Cold', 'Dry'],\n    foodCategories: ['Root vegetables', 'Grains', 'Legumes'],\n    specificFoods: ['Potatoes', 'Beets', 'Rye', 'Lentils', 'Black tea'],\n    cuisines: ['Rustic', 'Traditional', 'Preserved'],\n    elementalBoost: { 'Earth': 0.4 }\n  },\n  Uranus: {\n    name: 'Uranus',\n    elements: ['Air'],\n    qualities: ['Cold', 'Dry'],\n    foodCategories: ['Unusual foods', 'Novel ingredients'],\n    specificFoods: ['Exotic fruits', 'Molecular gastronomy items', 'Fermented foods'],\n    cuisines: ['Experimental', 'Avant-garde', 'Futuristic'],\n    elementalBoost: { 'Air': 0.4 }\n  },\n  Neptune: {\n    name: 'Neptune',\n    elements: ['Water'],\n    qualities: ['Cold', 'Moist'],\n    foodCategories: ['Seafood', 'Alcohol', 'Elusive flavors'],\n    specificFoods: ['Seaweed', 'White wine', 'Delicate fish', 'Coconut'],\n    cuisines: ['Ethereal', 'Subtle', 'Inspired'],\n    elementalBoost: { 'Water': 0.4 }\n  },\n  Pluto: {\n    name: 'Pluto',\n    elements: ['Water', 'Fire'],\n    qualities: ['Transformative'],\n    foodCategories: ['Fermented foods', 'Strong flavors', 'Transformed ingredients'],\n    specificFoods: ['Dark chocolate', 'Coffee', 'Mushrooms', 'Aged cheese'],\n    cuisines: ['Intense', 'Complex', 'Deep'],\n    elementalBoost: { 'Water': 0.2, 'Fire': 0.2 }\n  },\n  Rahu: {\n    name: 'Rahu',\n    elements: ['Air', 'Fire'],\n    qualities: ['Expansive', 'Chaotic'],\n    foodCategories: ['Foreign foods', 'Unusual combinations', 'Addictive tastes'],\n    specificFoods: ['Exotic spices', 'Foreign delicacies', 'Smoky flavors', 'Powerful stimulants'],\n    cuisines: ['Fusion', 'Unexpected combinations', 'Foreign cuisines'],\n    elementalBoost: { 'Air': 0.2, 'Fire': 0.2 }\n  },\n  Ketu: {\n    name: 'Ketu',\n    elements: ['Fire', 'Water'],\n    qualities: ['Spiritual', 'Subtle'],\n    foodCategories: ['Simple foods', 'Healing herbs', 'Purifying ingredients'],\n    specificFoods: ['Healing teas', 'Cleansing herbs', 'Simple grains', 'Pure water'],\n    cuisines: ['Ascetic', 'Monastic', 'Purifying'],\n    elementalBoost: { 'Fire': 0.2, 'Water': 0.2 }\n  }\n};\n\n/**\n * Planetary cooking guide interface for recommendation algorithm\n */\nexport interface PlanetaryCookingGuide {\n  optimalCookingTemp: string;\n  flavorPairings: string[];\n  nutrientFocus: string[];\n  preservationMethods: string[];\n  traditionalRecipes: string[];\n}\n\n/**\n * Calculate planetary boost for an ingredient based on current astrological state\n */\nexport const calculatePlanetaryBoost = (\n  item: unknown, // ElementalItem type\n  planetPositions: Record<string, unknown>,\n  currentZodiac?: string | null,\n  lunarPhase?: LunarPhase | null\n) => {\n  let boost = 0;\n  const dominantPlanets: string[] = [];\n  const dignities: Record<string, PlanetaryDignityDetails> = {};\n\n  // Planetary position calculations\n  Object.entries(planetPositions).forEach(([_planet, _position]) => {\n    const planetInfo = planetaryFoodAssociations[_planet as Planet];\n    if (!planetInfo) return;\n\n    // Basic planetary boost\n    const baseBoost = planetInfo.boostValue || 0.1;\n    boost += baseBoost;\n\n    // Add planet to dominant list if significant\n    if (baseBoost > 0.2) {\n      dominantPlanets.push(_planet);\n      \n      // Add dignity information for dominant planets\n      dignities[_planet] = {\n        type: 'Neutral' as PlanetaryDignity,\n        strength: baseBoost,\n        favorableZodiacSigns: currentZodiac ? [currentZodiac] : [],\n      };\n    }\n  });\n\n  // Zodiac sign boost if available\n  if (currentZodiac) {\n    boost += getZodiacBoost(currentZodiac, item);\n  }\n\n  // Lunar phase boost if available\n  if (lunarPhase) {\n    boost += getLunarPhaseBoost(lunarPhase);\n  }\n\n  return {\n    boost: parseFloat(boost.toFixed(2)),\n    dominantPlanets: Array.from(new Set(dominantPlanets)), // Fix for Set iteration in older JS versions\n    dignities\n  };\n};\n\n// Helper functions for calculations\nconst _getTriplicityRulers = (_zodiacSign?: string | null): Planet[] => {\n  // Implementation depends on your zodiac mappings\n  return ['Sun', 'Mars', 'Jupiter'] as Planet[];\n};\n\nconst _getSeasonalMultiplier = (): number => {\n  // Implementation depends on your seasonal logic\n  return 1.0;\n};\n\n/**\n * Get dignity multiplier for calculations\n */\nexport const getDignityMultiplier = (dignity: PlanetaryDignity): number => {\n  const multipliers: Record<PlanetaryDignity, number> = {\n    'Domicile': 1.5,\n    'Exaltation': 1.3,\n    'Triplicity': 1.2,\n    'Term': 1.1,\n    'Face': 1.05,\n    'Mooltrikona': 1.4,\n    'Nakshatra': 1.25,\n    'Detriment': 0.7,\n    'Fall': 0.5,\n    'Neutral': 1.0\n  };\n  return multipliers[dignity] || 1.0;\n};\n\n/**\n * Get zodiac boost based on elemental properties\n */\nexport const getZodiacBoost = (zodiacSign: string, item: unknown): number => {\n  // Get zodiac sign element\n  const zodiacElements: Record<string, ElementalCharacter> = {\n    aries: 'Fire', leo: 'Fire', sagittarius: 'Fire',\n    taurus: 'Earth', virgo: 'Earth', capricorn: 'Earth',\n    gemini: 'Air', libra: 'Air', aquarius: 'Air',\n    cancer: 'Water', scorpio: 'Water', pisces: 'Water'\n  };\n\n  // Normalize zodiac sign to lowercase for lookup\n  const normalizedSign = zodiacSign.toLowerCase();\n  const zodiacElement = zodiacElements[normalizedSign ] || 'Fire';\n  \n  // Check if item has elemental properties\n  const itemData = item as unknown as { elementalProperties?: Record<string, number>; zodiacInfluences?: string[] };\n  if (!itemData.elementalProperties) {\n    return 0.1; // Minimum boost if no elemental data\n  }\n  \n  // Calculate boost based on elemental affinity\n  // Higher boost if the cuisine's dominant element matches the zodiac element\n  const elementValue = itemData.elementalProperties[zodiacElement] || 0;\n  const elementBoost = elementValue * 0.8; // Scale based on how strong the element is\n\n  // Check if cuisine explicitly lists this zodiac sign as favorable\n  const zodiacBoost = itemData.zodiacInfluences?.includes(normalizedSign) ? 0.3 : 0;\n\n  // Apply modality boost based on cardinal/fixed/mutable qualities\n  let modalityBoost = 0;\n  const cardinalSigns = ['aries', 'cancer', 'libra', 'capricorn'];\n  const fixedSigns = ['taurus', 'leo', 'scorpio', 'aquarius'];\n  // If not cardinal or fixed, it's mutable (gemini, virgo, sagittarius, pisces)\n  \n  if (cardinalSigns.includes(normalizedSign)) {\n    // Cardinal signs prefer bold, distinctive cuisines\n    modalityBoost = (itemData.elementalProperties['Fire'] || 0) * 0.2;\n  } else if (fixedSigns.includes(normalizedSign)) {\n    // Fixed signs prefer substantial, traditional cuisines\n    modalityBoost = (itemData.elementalProperties['Earth'] || 0) * 0.2;\n  } else {\n    // Mutable signs prefer adaptable, fusion cuisines\n    modalityBoost = (itemData.elementalProperties['Air'] || 0) * 0.2;\n  }\n\n  // Calculate seasonal alignment (certain cuisines are better aligned with seasons)\n  const seasonalBoost = calculateSeasonalAlignment(normalizedSign, item) * 0.15;\n  \n  // Combine all boost factors\n  const totalBoost = elementBoost + zodiacBoost + modalityBoost + seasonalBoost;\n  \n  // Return normalized boost value (0-1 range)\n  return Math.min(0.7, Math.max(0.1, totalBoost));\n};\n\n// Helper function to calculate seasonal alignment\nconst _calculateSeasonalAlignment = (zodiacSign: string, item: unknown): number => {\n  // Map zodiac signs to seasons\n  const seasonMap: Record<string, string> = {\n    'aries': 'spring', 'taurus': 'spring', 'gemini': 'spring',\n    'cancer': 'summer', 'leo': 'summer', 'virgo': 'summer',\n    'libra': 'autumn', 'scorpio': 'autumn', 'sagittarius': 'autumn',\n    'capricorn': 'winter', 'aquarius': 'winter', 'pisces': 'winter'\n  };\n  \n  const season = seasonMap[zodiacSign];\n  \n  // Seasonal elemental correspondences\n  const seasonalElements: Record<string, ElementalCharacter> = {\n    'spring': 'Air',\n    'summer': 'Fire',\n    'autumn': 'Earth',\n    'winter': 'Water'\n  };\n  \n  const seasonalElement = seasonalElements[season];\n  \n  // Calculate alignment based on the cuisine's elemental properties\n  // Higher value if the cuisine aligns with the season's element\n  const itemData = item as unknown as { elementalProperties?: Record<string, number> };\n  return itemData.elementalProperties?.[seasonalElement] || 0.1;\n};\n\n/**\n * Calculate boost based on lunar phase\n */\nexport const getLunarPhaseBoost = (lunarPhase: LunarPhase): number => {\n  // New calculation based on lunar phase energy patterns\n  // Different lunar phases enhance different elemental and alchemical properties\n  \n  // Map lunar phases to elemental and alchemical influences\n  const lunarInfluences: Record<LunarPhase, {\n    element: ElementalCharacter,\n    alchemical: string,\n    intensity: number\n  }> = {\n    'new moon': { element: 'Fire', alchemical: 'Spirit', intensity: 0.8 },\n    'waxing crescent': { element: 'Fire', alchemical: 'Spirit', intensity: 0.7 },\n    'first quarter': { element: 'Air', alchemical: 'Substance', intensity: 0.6 },\n    'waxing gibbous': { element: 'Air', alchemical: 'Substance', intensity: 0.7 },\n    'full moon': { element: 'Water', alchemical: 'Essence', intensity: 0.8 },\n    'waning gibbous': { element: 'Water', alchemical: 'Essence', intensity: 0.7 },\n    'last quarter': { element: 'Earth', alchemical: 'Matter', intensity: 0.6 },\n    'waning crescent': { element: 'Earth', alchemical: 'Matter', intensity: 0.7 }\n  };\n  \n  // Get lunar influence data or provide fallback\n  const influence = lunarInfluences[lunarPhase] || { \n    element: 'Water', \n    alchemical: 'Essence', \n    intensity: 0.5 \n  };\n  \n  // Calculate boost based on lunar phase intensity\n  // This will vary between 0.15 and 0.4 depending on the phase\n  return 0.15 + (influence.intensity * 0.25);\n};\n\n/**\n * Get flavor boost from planetary associations\n */\nexport const getFlavorBoost = (\n  _planet: Planet,\n  _ingredient: unknown\n): number => {\n  const ingredientData = _ingredient as unknown as { name?: string; planetaryRulers?: string[]; elementalCharacter?: string };\n  const elementBoost = planetaryFoodAssociations[_planet].elementalBoost || {};\n  return Object.entries(elementBoost).reduce((acc, [element, boost]) => {\n    return acc + (ingredientData.elementalProperties?.[element] || 0) * (boost  || 0);\n  }, 0);\n};\n\n/**\n * Get nutritional synergy between ingredient and planet\n */\nexport const getNutritionalSynergy = (\n  _planet: Planet,\n  _ingredient: unknown\n): string[] => {\n  // Implementation depends on your nutritional data\n  return [];\n};\n\n/**\n * Format elemental balance for display\n */\nexport const formatelementalState = (\n  elements: Partial<Record<string, number>>\n): string => {\n  const validEntries = Object.entries(elements)\n    .filter(([_, val]) => Number.isFinite(val))\n    .map(([elem, val]) => `${elem} ${Math.round((val || 0) * 100)}%`)\n    .join(\" · \");\n  \n  return validEntries;\n};\n\nexport default planetaryFoodAssociations;\n"],"version":3}