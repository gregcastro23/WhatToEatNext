{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/ingredientRecommender.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/ingredientRecommender.ts"],"sourcesContent":["// Base ingredient interface for safe type access\ninterface BaseIngredient {\n  name?: string;\n  type?: string;\n  category?: string;\n  elementalProperties?: ElementalProperties;\n  astrologicalProfile?: {\n    rulingPlanets?: string[];\n    signAffinities?: string[];\n  };\n  [key: string]: unknown; // For dynamic properties\n}\n\n// Enhanced Ingredient interface for Phase 11\ninterface EnhancedIngredient {\n  name: string;\n  type: string;\n  elementalProperties?: ElementalProperties;\n  astrologicalInfluences?: AstrologicalInfluences;\n  elementalState?: ElementalState;\n  season?: Season;\n  regionalCuisine?: string;\n  astrologicalProfile?: {\n    rulingPlanets?: string[];\n    signAffinities?: string[];\n  };\n  // Add commonly missing properties\n  flavorProfile?: Record<string, number>;\n  cuisine?: string;\n  description?: string;\n  category?: string;\n  qualities?: string[];\n  mealType?: string;\n  matchScore?: number;\n  timing?: unknown;\n  duration?: unknown;\n}\nimport { AstrologicalState } from '@/types';\nimport { ElementalProperties, ChakraEnergies, Season, ZodiacSign } from '@/types/alchemy';\nimport { ElementalState } from '@/types/elemental';\nimport type { Modality, Ingredient } from '@/data/ingredients/types';\n\n// AstrologicalInfluences interface\nexport interface AstrologicalInfluences {\n  rulingPlanets?: string[];\n  favorableZodiac?: string[];\n  elementalAffinity?: string;\n  lunarPhaseModifiers?: Record<string, unknown>;\n  aspectEnhancers?: string[];\n}\n\n// Import actual ingredient data\nimport { vegetables } from '@/data/ingredients/vegetables';\nimport { fruits } from '@/data/ingredients/fruits';\nimport { herbs } from '@/data/ingredients/herbs';\nimport { spices } from '@/data/ingredients/spices';\nimport { proteins } from '@/data/ingredients/proteins';\nimport { grains } from '@/data/ingredients/grains';\nimport { seasonings } from '@/data/ingredients/seasonings';\nimport { oils } from '@/data/ingredients/oils';\n\n// Import planet data\nimport venusData from '@/data/planets/venus';\nimport marsData from '@/data/planets/mars';\nimport mercuryData from '@/data/planets/mercury';\nimport jupiterData from '@/data/planets/jupiter';\nimport saturnData from '@/data/planets/saturn';\n\nimport { CHAKRA_NUTRITIONAL_CORRELATIONS, CHAKRA_HERBS } from '@/constants/chakraSymbols';\nimport { LUNAR_PHASES } from '@/constants/lunar';\nimport { ingredientCategories } from '@/data/ingredientCategories';\nimport { calculateLunarPhase, calculatePlanetaryPositions } from '@/utils/astrologyUtils';\n\n// Import the getAllIngredients function if it exists, otherwise we'll create our own\nimport { getAllIngredients as getIngredientsUtil } from '@/utils/foodRecommender';\n\n// Export the necessary types needed by IngredientRecommendations.ts\nexport interface IngredientRecommendation {\n  name: string;\n  type: string;\n  category?: string;\n  elementalProperties?: ElementalProperties;\n  qualities?: string[];\n  matchScore: number;\n  modality?: Modality;\n  recommendations?: string[];\n  description?: string;\n  totalScore?: number;\n  elementalScore?: number;\n  astrologicalScore?: number;\n  seasonalScore?: number;\n  dietary?: string[];\n  // Add commonly missing properties\n  flavorProfile?: Record<string, number>;\n  cuisine?: string;\n  regionalCuisine?: string;\n  astrologicalProfile?: any;\n  astrologicalInfluences?: any;\n  season?: any;\n  mealType?: string;\n  timing?: any;\n  duration?: any;\n  isRetrograde?: boolean;\n  sensoryProfile?: {\n    taste: Record<string, number>;\n    aroma: Record<string, number>;\n    texture: Record<string, number>;\n  };\n  recommendedCookingMethods?: Array<{\n    name: string;\n    description: string;\n    cookingTime: {\n      min: number;\n      max: number;\n      unit: string;\n    };\n    elementalEffect: Record<string, number>;\n  }>;\n  pairingRecommendations?: {\n    complementary: string[];\n    contrasting: string[];\n  };\n}\n\nexport interface GroupedIngredientRecommendations {\n  vegetables?: IngredientRecommendation[];\n  fruits?: IngredientRecommendation[];\n  proteins?: IngredientRecommendation[];\n  grains?: IngredientRecommendation[];\n  spices?: IngredientRecommendation[];\n  herbs?: IngredientRecommendation[];\n  [key: string]: IngredientRecommendation[] | undefined;\n}\n\nexport interface RecommendationOptions {\n  currentSeason?: string;\n  dietaryPreferences?: string[];\n  modalityPreference?: Modality;\n  currentZodiac?: string;\n  limit?: number;\n  excludeIngredients?: string[];\n  includeOnly?: string[];\n  category?: string;\n}\n\n// Combine all real ingredients data\nconst allIngredients = [\n  ...Object.values(vegetables || {}),\n  ...Object.values(fruits || {}),\n  ...Object.values(herbs || {}),\n  ...Object.values(spices || {}),\n  ...Object.values(proteins || {}),\n  ...Object.values(grains || {}),\n  ...Object.values(seasonings || {}),\n  ...Object.values(oils || {})\n].filter(Boolean);\n\n// Fallback implementation of getAllIngredients that uses ingredientCategories\nfunction getAllIngredients(): Ingredient[] {\n  // If the imported function exists, use it\n  if (typeof getIngredientsUtil === 'function') {\n    // Apply Pattern K: Safe unknown-first casting for type compatibility\n    return getIngredientsUtil() as unknown as Ingredient[];\n  }\n  \n  // Otherwise, use our fallback implementation\n  const allIngredients: Ingredient[] = [];\n  \n  // Process each category in ingredientCategories\n  Object.entries(ingredientCategories).forEach(([category, ingredientsMap]) => {\n    Object.entries(ingredientsMap).forEach(([name, data]) => {\n      const ingredientData = data as unknown as BaseIngredient;\n      allIngredients.push({\n        name,\n        type: category.endsWith('s') ? category.slice(0, -1) : category,\n        category,\n        elementalProperties: ingredientData.elementalProperties,\n        astrologicalProfile: ingredientData.astrologicalProfile,\n        ...ingredientData\n      } as unknown as Ingredient);\n    });\n  });\n  \n  return allIngredients;\n}\n\n/**\n * Returns a list of ingredients that match the current astrological state\n */\nexport function getRecommendedIngredients(astroState: AstrologicalState): EnhancedIngredient[] {\n  // Get the active planets from the astrological state\n  const activePlanets = astroState.activePlanets || [];\n  \n  // If we don't have any active planets, use all planets by default\n  const planetsToUse = activePlanets.length > 0 \n    ? activePlanets \n    : ['Sun', 'Moon', 'Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune', 'Pluto'];\n  \n  // Filter ingredients based on matching planetary rulers\n  // Apply Pattern K: Safe unknown-first casting for mixed ingredient array\n  let filteredIngredients = (allIngredients as unknown as EnhancedIngredient[]).filter(ingredient => {\n    // Check if any of the ingredient's ruling planets are active\n    const baseIngredient = ingredient as unknown as BaseIngredient;\n    return baseIngredient?.astrologicalProfile?.rulingPlanets?.some(\n      planet => planetsToUse.includes(planet)\n    );\n  });\n  \n  // If no matching ingredients, return a sample of all ingredients\n  if (filteredIngredients.length === 0) {\n    filteredIngredients = (allIngredients as unknown as EnhancedIngredient[]).slice(0, 20);\n  }\n  \n  // Special handling for Venus influence when present\n  if (planetsToUse.includes('Venus')) {\n    // Apply Pattern K: Safe array type casting for function parameter compatibility\n    // Prioritize Venus-ruled ingredients with improved scoring based on detailed Venus data\n    enhanceVenusIngredientBatch(filteredIngredients as unknown as Ingredient[], astroState);\n  }\n  \n  // Special handling for Mars influence when present\n  if (planetsToUse.includes('Mars')) {\n    // Apply Pattern K: Safe array type casting for function parameter compatibility\n    // Prioritize Mars-ruled ingredients with improved scoring based on detailed Mars data\n    enhanceMarsIngredientScoring(filteredIngredients as unknown as Ingredient[], astroState);\n  }\n  \n  // Special handling for Mercury influence when present\n  if (planetsToUse.includes('Mercury')) {\n    // Apply Pattern K: Safe array type casting for function parameter compatibility\n    // Prioritize Mercury-ruled ingredients with improved scoring based on detailed Mercury data\n    enhanceMercuryIngredientScoring(filteredIngredients as unknown as Ingredient[], astroState);\n  }\n  \n  // If we have a dominant element from the astro state, prioritize ingredients of that element\n  if (astroState.dominantElement) {\n    filteredIngredients.sort((a, b) => {\n      const ingredientA = a as unknown as BaseIngredient;\n      const ingredientB = b as unknown as BaseIngredient;\n      const aValue = ingredientA?.elementalProperties?.[astroState.dominantElement as keyof ElementalProperties] || 0;\n      const bValue = ingredientB?.elementalProperties?.[astroState.dominantElement as keyof ElementalProperties] || 0;\n      return bValue - aValue;\n    });\n  }\n  \n  // If we have a current zodiac sign, prioritize ingredients with that affinity\n  if (astroState.zodiacSign) {\n    const zodiacSign = astroState.zodiacSign.toLowerCase();\n    \n    // Apply Venus's zodiac transit data if Venus is active and in this sign\n    const venusBoost = planetsToUse.includes('Venus') && \n        venusData.PlanetSpecific?.ZodiacTransit?.[astroState.zodiacSign] ? 2 : 0;\n    \n    // Apply Mars's zodiac transit data if Mars is active and in this sign\n    const marsBoost = planetsToUse.includes('Mars') && \n        marsData.PlanetSpecific?.ZodiacTransit?.[astroState.zodiacSign] ? 2 : 0;\n    \n    // Apply Mercury's zodiac transit data if Mercury is active and in this sign\n    const mercuryBoost = planetsToUse.includes('Mercury') && \n        mercuryData.PlanetSpecific?.ZodiacTransit?.[astroState.zodiacSign] ? 2 : 0;\n    \n    filteredIngredients.sort((a, b) => {\n      const ingredientA = a as unknown as BaseIngredient;\n      const ingredientB = b as unknown as BaseIngredient;\n      \n      let aHasAffinity = ingredientA?.astrologicalProfile?.signAffinities?.includes(zodiacSign) ? 1 : 0;\n      let bHasAffinity = ingredientB?.astrologicalProfile?.signAffinities?.includes(zodiacSign) ? 1 : 0;\n      \n      // Boost ingredients with Venus associations when Venus is active\n      if (planetsToUse.includes('Venus')) {\n        if (isVenusAssociatedIngredient(ingredientA?.name || '')) aHasAffinity += venusBoost;\n        if (isVenusAssociatedIngredient(ingredientB?.name || '')) bHasAffinity += venusBoost;\n      }\n      \n      // Boost ingredients with Mars associations when Mars is active\n      if (planetsToUse.includes('Mars')) {\n        if (isMarsAssociatedIngredient(ingredientA?.name || '')) aHasAffinity += marsBoost;\n        if (isMarsAssociatedIngredient(ingredientB?.name || '')) bHasAffinity += marsBoost;\n      }\n      \n      // Boost ingredients with Mercury associations when Mercury is active\n      if (planetsToUse.includes('Mercury')) {\n        if (isMercuryAssociatedIngredient(ingredientA?.name || '')) aHasAffinity += mercuryBoost;\n        if (isMercuryAssociatedIngredient(ingredientB?.name || '')) bHasAffinity += mercuryBoost;\n      }\n      \n      return bHasAffinity - aHasAffinity;\n    });\n  }\n  \n  return filteredIngredients as EnhancedIngredient[];\n}\n\n/**\n * Returns recommendations grouped by category based on elemental properties and options\n */\nexport function getIngredientRecommendations(\n  elementalProps: ElementalProperties & { \n    timestamp: Date;\n    currentStability: number;\n    planetaryAlignment: Record<string, { sign: string; degree: number }>;\n    zodiacSign: string;\n    activePlanets: string[];\n    lunarPhase: string;\n    aspects: Array<{ aspectType: string; planet1: string; planet2: string; }>;\n  }, \n  options: RecommendationOptions\n): GroupedIngredientRecommendations {\n  // Get all ingredients\n  const allIngredients = getAllIngredients();\n  \n  // Calculate ruling planet based on sun's position\n  const sunSign = elementalProps.zodiacSign?.toLowerCase() as ZodiacSign;\n  \n  // Map of signs to their ruling planets\n  const signRulers: Record<string, string> = {\n    'aries': 'Mars',\n    'taurus': 'Venus',\n    'gemini': 'Mercury',\n    'cancer': 'Moon',\n    'leo': 'Sun',\n    'virgo': 'Mercury',\n    'libra': 'Venus',\n    'scorpio': 'Mars',\n    'sagittarius': 'Jupiter',\n    'capricorn': 'Saturn',\n    'aquarius': 'Saturn', // Traditional ruler\n    'pisces': 'Jupiter'  // Traditional ruler\n  };\n  \n  const rulingPlanet = signRulers[sunSign] || 'Sun';\n  \n  // Get decan information for each planet position\n  const planetDecans: Record<string, { decanNum: number, decanRuler: string, tarotCard: string }> = {};\n  \n  Object.entries(elementalProps.planetaryAlignment || {}).forEach(([planet, position]) => {\n    if (!position || !position.sign) return;\n    \n    const sign = position.sign.toLowerCase();\n    const degree = position.degree || 0;\n    \n    // Determine which decan the planet is in\n    let decanNum = 1;\n    if (degree >= 10 && degree < 20) decanNum = 2;\n    else if (degree >= 20) decanNum = 3;\n    \n    // Reference data for decan rulers and tarot cards based on sign and decan\n    const decanRulerMap: Record<string, Record<number, string>> = {\n      'aries': { 1: 'Mars', 2: 'Sun', 3: 'Venus' },\n      'taurus': { 1: 'Mercury', 2: 'Moon', 3: 'Saturn' },\n      'gemini': { 1: 'Jupiter', 2: 'Mars', 3: 'Sun' },\n      'cancer': { 1: 'Venus', 2: 'Mercury', 3: 'Moon' },\n      'leo': { 1: 'Saturn', 2: 'Jupiter', 3: 'Mars' },\n      'virgo': { 1: 'Sun', 2: 'Venus', 3: 'Mercury' },\n      'libra': { 1: 'Moon', 2: 'Saturn', 3: 'Jupiter' },\n      'scorpio': { 1: 'Mars', 2: 'Sun', 3: 'Venus' },\n      'sagittarius': { 1: 'Mercury', 2: 'Moon', 3: 'Saturn' },\n      'capricorn': { 1: 'Jupiter', 2: 'Mars', 3: 'Sun' },\n      'aquarius': { 1: 'Venus', 2: 'Mercury', 3: 'Moon' },\n      'pisces': { 1: 'Saturn', 2: 'Jupiter', 3: 'Mars' }\n    };\n    \n    const tarotCardMap: Record<string, Record<number, string>> = {\n      'aries': { 1: '2 of Wands', 2: '3 of Wands', 3: '4 of Wands' },\n      'taurus': { 1: '5 of Pentacles', 2: '6 of Pentacles', 3: '7 of Pentacles' },\n      'gemini': { 1: '8 of Swords', 2: '9 of Swords', 3: '10 of Swords' },\n      'cancer': { 1: '2 of Cups', 2: '3 of Cups', 3: '4 of Cups' },\n      'leo': { 1: '5 of Wands', 2: '6 of Wands', 3: '7 of Wands' },\n      'virgo': { 1: '8 of Pentacles', 2: '9 of Pentacles', 3: '10 of Pentacles' },\n      'libra': { 1: '2 of Swords', 2: '3 of Swords', 3: '4 of Swords' },\n      'scorpio': { 1: '5 of Cups', 2: '6 of Cups', 3: '7 of Cups' },\n      'sagittarius': { 1: '8 of Wands', 2: '9 of Wands', 3: '10 of Wands' },\n      'capricorn': { 1: '2 of Pentacles', 2: '3 of Pentacles', 3: '4 of Pentacles' },\n      'aquarius': { 1: '5 of Swords', 2: '6 of Swords', 3: '7 of Swords' },\n      'pisces': { 1: '8 of Cups', 2: '9 of Cups', 3: '10 of Cups' }\n    };\n    \n    const decanRuler = decanRulerMap[sign]?.[decanNum] || '';\n    const tarotCard = tarotCardMap[sign]?.[decanNum] || '';\n    \n    planetDecans[planet] = { decanNum, decanRuler, tarotCard };\n  });\n  \n  // Filter and score ingredients\n  const scoredIngredients = allIngredients\n    .filter(ingredient => {\n      // Apply basic filters\n      if (options.excludeIngredients?.includes((ingredient as string)?.name)) return false;\n      if (options.includeOnly && !options.includeOnly.includes((ingredient as string)?.name)) return false;\n      if (options.category && ingredient.category !== options.category) return false;\n      \n      // Filter by dietary preference if specified\n      if (options.dietaryPreferences && options.dietaryPreferences.length > 0) {\n        const dietaryMatches = options.dietaryPreferences.some(pref => \n          ingredient.dietary?.includes(pref)\n        );\n        if (!dietaryMatches) return false;\n      }\n      \n      // Filter by modality preference if specified\n      if (options.modalityPreference) {\n        const ingredientModality = ingredient.modality || \n          determineIngredientModality(ingredient.qualities, (ingredient as Record<string, unknown>)?.elementalProperties);\n        \n        if (ingredientModality !== options.modalityPreference) return false;\n      }\n      \n      return true;\n    })\n    .map(ingredient => {\n      // Calculate elemental score (30% of total)\n      const elementalScore = calculateElementalScore(\n        (ingredient as Record<string, unknown>)?.elementalProperties,\n        elementalProps\n      );\n      \n      // Calculate modality score (15% of total)\n      const modalityScore = calculateModalityScore(\n        ingredient.qualities || [],\n        options.modalityPreference\n      );\n      \n      // Calculate seasonal score (15% of total)\n      const seasonalScore = calculateSeasonalScore(\n        ingredient,\n        elementalProps.timestamp\n      );\n      \n      // Calculate planetary score (40% of total) - increased weight for planetary alignment\n      const planetaryScore = calculateEnhancedPlanetaryScore(\n        ingredient, \n        elementalProps.planetaryAlignment,\n        planetDecans,\n        rulingPlanet\n      );\n      \n      // Calculate total score with weighted components\n      const totalScore = (\n        elementalScore * 0.30 + \n        modalityScore * 0.15 + \n        seasonalScore * 0.15 + \n        planetaryScore * 0.40\n      );\n      \n      // Assign modality if not already present\n      const modality = ingredient.modality || \n        determineIngredientModality(ingredient.qualities, (ingredient as Record<string, unknown>)?.elementalProperties);\n      \n      return {\n        ...ingredient,\n        score: totalScore,\n        elementalScore,\n        modalityScore,\n        seasonalScore,\n        planetaryScore,\n        modality\n      };\n    })\n    .sort((a, b) => b.score - a.score);\n  \n  // Group ingredients by category\n  const groupedRecommendations: GroupedIngredientRecommendations = {};\n  \n  // Apply limit per category before grouping to ensure diversity\n  const limit = options.limit || 24;\n  const categoryCounts: Record<string, number> = {};\n  const categoryMaxItems = Math.ceil(limit / 8); // Max items per category\n  \n  scoredIngredients.forEach(ingredient => {\n    const category = ingredient.category || 'other';\n    \n    if (!groupedRecommendations[category]) {\n      groupedRecommendations[category] = [];\n      categoryCounts[category] = 0;\n    }\n    \n    if (categoryCounts[category] < categoryMaxItems) {\n      // Apply Pattern L: Interface property mapping for IngredientRecommendation compatibility\n      const ingredientData = ingredient as Record<string, unknown>;\n      const ingredientRecommendation: IngredientRecommendation = {\n        name: ingredient.name || '',\n        type: ingredientData?.type || ingredientData?.category || 'ingredient',\n        category: ingredient.category,\n        elementalProperties: ingredient.elementalProperties,\n        qualities: ingredient.qualities,\n        matchScore: ingredient.score || 0,\n        modality: ingredient.modality,\n        recommendations: ingredientData?.recommendations || [],\n        description: ingredientData?.description || `Recommended ${ingredient.name}`,\n        totalScore: ingredientData?.totalScore || ingredient.score || 0,\n        elementalScore: ingredient.elementalScore,\n        astrologicalScore: ingredientData?.astrologicalScore || 0,\n        seasonalScore: ingredient.seasonalScore,\n        dietary: ingredientData?.dietary || []\n      };\n      groupedRecommendations[category].push(ingredientRecommendation);\n      categoryCounts[category]++;\n    }\n  });\n  \n  return groupedRecommendations;\n}\n\n// Helper function to calculate modality score\nfunction calculateModalityScore(\n  qualities: string[],\n  preferredModality?: Modality\n): number {\n  // Get the ingredient's modality based on qualities\n  const ingredientModality = determineIngredientModality(qualities);\n  \n  // If no preferred modality, return neutral score\n  if (!preferredModality) return 0.5;\n  \n  // Return 1.0 for exact match, 0.5 for partial match, 0.0 for mismatch\n  if (ingredientModality === preferredModality) return 1.0;\n  \n  // Consider partial matches based on modality compatibility\n  const compatibleModalities = {\n    Cardinal: ['Mutable'],\n    Fixed: ['Mutable'],\n    Mutable: ['Cardinal', 'Fixed']\n  };\n  \n  if (compatibleModalities[preferredModality]?.includes(ingredientModality)) {\n    return 0.7;\n  }\n  \n  return 0.3;\n}\n\n/**\n * Calculate elemental score between ingredient and system elemental properties\n * Enhanced to give more weight to dominant elements and better similarity calculation\n */\nfunction calculateElementalScore(\n  ingredientProps?: ElementalProperties,\n  systemProps?: ElementalProperties\n): number {\n  // Return neutral score if either properties are missing\n  if (!ingredientProps || !systemProps) return 0.5;\n  \n  // Find dominant system element for extra weighting\n  const dominantElement = Object.entries(systemProps)\n    .sort((a, b) => b[1] - a[1])[0][0] as keyof ElementalProperties;\n  \n  // Calculate similarity based on overlap of elemental properties\n  let similarityScore = 0;\n  let totalWeight = 0;\n  \n  // Process each element\n  for (const element of ['Fire', 'Water', 'Earth', 'Air'] as const) {\n    const ingredientValue = ingredientProps[element] || 0;\n    const systemValue = systemProps[element] || 0;\n    \n    // Calculate similarity (1 - absolute difference)\n    // This gives higher scores when values are closer together\n    const similarity = 1 - Math.abs(ingredientValue - systemValue);\n    \n    // Enhanced weighting: dominant element gets extra emphasis\n    // Base weight includes the system's value for this element\n    const baseWeight = systemValue + 0.25; // Add 0.25 to ensure all elements have some weight\n    \n    // Apply 1.5x multiplier to the dominant element's weight\n    const finalWeight = element === dominantElement ? baseWeight * 1.5 : baseWeight;\n    \n    similarityScore += similarity * finalWeight;\n    totalWeight += finalWeight;\n  }\n  \n  // Normalize to 0-1 range with explicit bounds\n  return totalWeight > 0 ? Math.min(1, Math.max(0, similarityScore / totalWeight)) : 0.5;\n}\n\n/**\n * Calculate seasonal score for an ingredient based on current date\n * @param ingredient Ingredient to score\n * @param date Current date\n * @returns Seasonal score (0-1)\n */\nfunction calculateSeasonalScore(ingredient: Ingredient, date: Date): number {\n  // Default score if no seasonality data\n  if (!(ingredient as Record<string, unknown>)?.seasonality) return 0.5;\n  \n  // Get current month and convert to season\n  const month = date.getMonth(); // 0-11\n  let currentSeason: string;\n  \n  // Northern hemisphere seasons\n  if (month >= 2 && month <= 4) {\n    currentSeason = 'spring';\n  } else if (month >= 5 && month <= 7) {\n    currentSeason = 'summer';\n  } else if (month >= 8 && month <= 10) {\n    currentSeason = 'fall';\n  } else {\n    currentSeason = 'winter';\n  }\n  \n  // Get seasonality score for current season\n  const seasonScore = (ingredient as Record<string, unknown>)?.seasonality[currentSeason] || 0.5;\n  \n  return seasonScore;\n}\n\n/**\n * Enhanced planetary score calculation that considers decans and tarot associations,\n * with special weight for the ruling planet determined by sun position\n */\nfunction calculateEnhancedPlanetaryScore(\n  ingredient: Ingredient,\n  planetaryAlignment: Record<string, { sign: string; degree: number }>,\n  planetDecans: Record<string, { decanNum: number, decanRuler: string, tarotCard: string }>,\n  rulingPlanet: string\n): number {\n  if (!(ingredient as Record<string, unknown>)?.astrologicalProfile) return 0.5; // Neutral score for ingredients without profile\n  \n  let score = 0;\n  let totalFactors = 0;\n  \n  // Check ruling planet correspondence - this gets extra weight\n  if ((ingredient as string)?.astrologicalProfile.rulingPlanets?.includes(rulingPlanet)) {\n    score += 1.5; // Significant boost for ruling planet correspondence\n    totalFactors += 1.5;\n  }\n  \n  // Check planetary positions against ingredient affinities\n  Object.entries(planetaryAlignment).forEach(([planet, position]) => {\n    if (!position.sign) return;\n    \n    const planetName = planet.charAt(0).toUpperCase() + planet.slice(1);\n    \n    // Regular planetary ruler scoring\n    if ((ingredient as string)?.astrologicalProfile.rulingPlanets?.includes(planetName)) {\n      score += 1;\n      totalFactors += 1;\n    }\n    \n    // Check sign affinities \n    if ((ingredient as string)?.astrologicalProfile.signAffinities?.includes(position.sign.toLowerCase())) {\n      score += 1;\n      totalFactors += 1;\n    }\n    \n    // Special handling for decan rulers\n    const decanInfo = planetDecans[planet];\n    if (decanInfo && (ingredient as string)?.astrologicalProfile.rulingPlanets?.includes(decanInfo.decanRuler)) {\n      score += 0.8; // Good bonus for decan ruler match\n      totalFactors += 0.8;\n    }\n    \n    // Tarot card associations - add subtle influence\n    if (decanInfo?.tarotCard && (ingredient as string)?.astrologicalProfile.tarotAssociations?.includes(decanInfo.tarotCard)) {\n      score += 0.7;\n      totalFactors += 0.7;\n    }\n  });\n  \n  // If there are no factors to consider, return neutral score\n  if (totalFactors === 0) return 0.5;\n  \n  // Return normalized score (0-1 range)\n  return Math.min(1, score / (totalFactors + 0.5));\n}\n\n/**\n * Calculate planetary influences based on planetary alignment\n * @param planetaryAlignment Current planetary positions\n * @returns Elemental influence values\n */\nexport function calculateElementalInfluences(\n  planetaryAlignment: Record<string, { sign: string; degree: number }>\n): ElementalProperties {\n  // Define elemental affinities for each zodiac sign\n  const zodiacElements: Record<string, keyof ElementalProperties> = {\n    'aries': 'Fire',\n    'taurus': 'Earth',\n    'gemini': 'Air',\n    'cancer': 'Water',\n    'leo': 'Fire',\n    'virgo': 'Earth',\n    'libra': 'Air',\n    'scorpio': 'Water',\n    'sagittarius': 'Fire',\n    'capricorn': 'Earth',\n    'aquarius': 'Air',\n    'pisces': 'Water'\n  };\n\n  // Define planet weights\n  const planetWeights: Record<string, number> = {\n    'sun': 5,\n    'moon': 4,\n    'mercury': 3,\n    'venus': 3,\n    'mars': 3,\n    'jupiter': 2,\n    'saturn': 2,\n    'uranus': 1,\n    'neptune': 1,\n    'pluto': 1\n  };\n\n  // Initialize elemental influences\n  const elementalInfluences: ElementalProperties = {\n    Fire: 0,\n    Earth: 0,\n    Air: 0,\n    Water: 0\n  };\n\n  // Process each planetary position\n  Object.entries(planetaryAlignment).forEach(([planet, position]) => {\n    const planetLower = planet.toLowerCase();\n    const weight = planetWeights[planetLower] || 1;\n    const sign = position.sign.toLowerCase();\n    const element = zodiacElements[position.sign] || zodiacElements[sign];\n\n    if (element) {\n      elementalInfluences[element] += weight;\n    }\n  });\n\n  // Normalize values to sum to 1\n  const total = Object.values(elementalInfluences).reduce((sum, val) => sum + val, 0);\n  if (total > 0) {\n    Object.keys(elementalInfluences).forEach(element => {\n      elementalInfluences[element as keyof ElementalProperties] = \n        elementalInfluences[element as keyof ElementalProperties] / total;\n    });\n  }\n\n  return elementalInfluences;\n}\n\n/**\n * Get ingredient recommendations based on chakra energies\n * @param chakraEnergies Current chakra energy levels\n * @param limit Maximum number of recommendations per chakra\n * @returns Grouped ingredient recommendations based on chakra influences\n */\nexport function getChakraBasedRecommendations(\n  chakraEnergies: ChakraEnergies,\n  limit = 3\n): GroupedIngredientRecommendations {\n  // Find the dominant chakras (highest energy levels)\n  const chakraEntries = Object.entries(chakraEnergies);\n  \n  // Sort chakras by energy level (highest first)\n  const sortedChakras = chakraEntries.sort(([, energyA], [, energyB]) => energyB - energyA);\n  \n  // Take only chakras with significant energy (> 0)\n  const significantChakras = sortedChakras.filter(([, energy]) => energy > 0);\n  \n  // Prepare the result object\n  const result: GroupedIngredientRecommendations = {};\n  \n  // For each significant chakra, add corresponding recommended ingredients\n  significantChakras.forEach(([chakra, energy]) => {\n    // Get nutritional correlations for this chakra\n    const nutritionalCorrelations = CHAKRA_NUTRITIONAL_CORRELATIONS[chakra] || [];\n    const herbRecommendations = CHAKRA_HERBS[chakra] || [];\n    \n    // Find ingredients that match these correlations\n    const matchingIngredients = allIngredients.filter(ingredient => {\n      // Check if ingredient name or type matches any nutritional correlation\n      const matchesNutritional = nutritionalCorrelations.some(correlation => \n        (ingredient as string)?.name.toLowerCase().includes(correlation.toLowerCase()) || \n        ((ingredient as string)?.type ? (ingredient as string).type.toLowerCase().includes(correlation.toLowerCase()) : false)\n      );\n      \n      // Check if ingredient name matches any herb recommendation\n      const matchesHerb = herbRecommendations.some(herb => \n        (ingredient as string)?.name.toLowerCase().includes(herb.toLowerCase())\n      );\n      \n      return matchesNutritional || matchesHerb;\n    });\n    \n    // Add matching ingredients to the result, with a score based on chakra energy\n    matchingIngredients.forEach(ingredient => {\n      const recommendationKey = (ingredient as string)?.type ? `${(ingredient as string).type.toLowerCase()}s` : 'others';\n      \n      if (!result[recommendationKey]) {\n        result[recommendationKey] = [];\n      }\n      \n      // Create recommendation with chakra-based score\n      const recommendation: IngredientRecommendation = {\n        ...(ingredient as object),\n        matchScore: energy / 10, // Normalize to 0-1 range\n        recommendations: [\n          `Supports ${chakra} chakra energy`,\n          ...(nutritionalCorrelations.filter(corr => \n            (ingredient as string)?.name?.toLowerCase().includes(corr.toLowerCase()) ||\n            ((ingredient as string)?.type ? (ingredient as string).type.toLowerCase().includes(corr.toLowerCase()) : false)\n          ) || [])\n        ]\n      } as IngredientRecommendation;\n      \n      // Only add if not already present\n      if (!result[recommendationKey]?.some(rec => rec.name === (ingredient as Record<string, unknown>)?.name)) {\n        result[recommendationKey]?.push(recommendation);\n      }\n    });\n  });\n  \n  // Apply limit to each category\n  Object.keys(result).forEach(key => {\n    if (result[key]?.length > limit) {\n      result[key] = result[key]?.slice(0, limit);\n    }\n  });\n  \n  return result;\n}\n\n// Helper function to check if an ingredient is Venus-associated\nfunction isVenusAssociatedIngredient(ingredientName: string): boolean {\n  // Check if the ingredient appears in Venus's food associations\n  if (venusData.FoodAssociations) {\n    for (const food of venusData.FoodAssociations) {\n      if (ingredientName.toLowerCase().includes(food.toLowerCase()) || \n          food.toLowerCase().includes(ingredientName.toLowerCase())) {\n        return true;\n      }\n    }\n  }\n  \n  // Check if the ingredient appears in Venus's herbal associations\n  if (venusData.HerbalAssociations?.Herbs) {\n    for (const herb of venusData.HerbalAssociations.Herbs) {\n      if (ingredientName.toLowerCase().includes(herb.toLowerCase()) || \n          herb.toLowerCase().includes(ingredientName.toLowerCase())) {\n        return true;\n      }\n    }\n  }\n  \n  // Check if the ingredient appears in Venus's herb associations\n  // Note: HerbalAssociations only has Herbs, Flowers, Woods, Scents - Spices not available\n  if (venusData.HerbalAssociations?.Herbs) {\n    for (const herb of venusData.HerbalAssociations.Herbs) {\n      if (ingredientName.toLowerCase().includes(herb.toLowerCase()) || \n          herb.toLowerCase().includes(ingredientName.toLowerCase())) {\n        return true;\n      }\n    }\n  }\n  \n  // Check if the ingredient appears in Venus's flower associations\n  if (venusData.HerbalAssociations?.Flowers) {\n    for (const flower of venusData.HerbalAssociations.Flowers) {\n      if (ingredientName.toLowerCase().includes(flower.toLowerCase()) || \n          flower.toLowerCase().includes(ingredientName.toLowerCase())) {\n        return true;\n      }\n    }\n  }\n  \n  // Check against zodiac-specific Venus ingredients\n  if (venusData.PlanetSpecific?.ZodiacTransit && typeof venusData.PlanetSpecific.ZodiacTransit === 'object') {\n    for (const zodiac in venusData.PlanetSpecific.ZodiacTransit) {\n      const transitData = venusData.PlanetSpecific.ZodiacTransit[zodiac];\n      if (transitData.Ingredients) {\n        for (const ingredient of transitData.Ingredients) {\n          if (ingredientName.toLowerCase().includes(ingredient.toLowerCase()) || \n              ingredient.toLowerCase().includes(ingredientName.toLowerCase())) {\n            return true;\n          }\n        }\n      }\n    }\n  }\n  \n  return false;\n}\n\n/**\n * Determines if an ingredient is associated with Mars based on Mars data\n */\nfunction isMarsAssociatedIngredient(ingredientName: string): boolean {\n  // Normalize the ingredient name for comparison\n  const normalizedName = ingredientName.toLowerCase();\n  \n  // Check if it's in Mars food associations\n  if (marsData.FoodAssociations) {\n    for (const food of marsData.FoodAssociations) {\n      if (normalizedName.includes(food.toLowerCase()) || food.toLowerCase().includes(normalizedName)) {\n        return true;\n      }\n    }\n  }\n  \n  // Check if it's in Mars herbal associations\n  if (marsData.HerbalAssociations?.Herbs) {\n    for (const herb of marsData.HerbalAssociations.Herbs) {\n      if (normalizedName.includes(herb.toLowerCase()) || herb.toLowerCase().includes(normalizedName)) {\n        return true;\n      }\n    }\n  }\n  \n  // Check all zodiac transits for ingredients\n  if (marsData.PlanetSpecific?.ZodiacTransit && typeof marsData.PlanetSpecific.ZodiacTransit === 'object') {\n    for (const sign in marsData.PlanetSpecific.ZodiacTransit) {\n      const transit = marsData.PlanetSpecific.ZodiacTransit[sign];\n      if (transit.Ingredients) {\n        for (const ingredient of transit.Ingredients) {\n          if (normalizedName.includes(ingredient.toLowerCase()) || ingredient.toLowerCase().includes(normalizedName)) {\n            return true;\n          }\n        }\n      }\n    }\n  }\n  \n  return false;\n}\n\n/**\n * Calculate Venus influence score for an ingredient\n * @param ingredient The ingredient to calculate Venus influence for\n * @param zodiacSign Current zodiac sign Venus is in\n * @param isVenusRetrograde Whether Venus is retrograde\n * @returns Score representing Venus influence (higher is stronger)\n */\nfunction calculateVenusInfluence(\n  ingredient: Ingredient, \n  zodiacSign?: string,\n  isVenusRetrograde = false\n): number {\n  let score = 0;\n  \n  // Base score for Venus association\n  if (isVenusAssociatedIngredient((ingredient as Record<string, unknown>)?.name)) {\n    score += 2.0;\n  }\n  \n  // Check elemental properties alignment with Venus\n  if (ingredient.elementalProperties) {\n    // Venus favors Water and Earth elements\n    score += (ingredient.elementalProperties.Water || 0) * 1.5;\n    score += (ingredient.elementalProperties.Earth || 0) * 1.8;\n    // Lesser affinities with Air and Fire\n    score += (ingredient.elementalProperties.Air || 0) * 0.8;\n    score += (ingredient.elementalProperties.Fire || 0) * 0.5;\n  }\n  \n  // Check flavor profile alignment with Venus preferences\n  const flavorProfile = (ingredient as Record<string, unknown>)?.flavorProfile;\n  if (flavorProfile) {\n    // Venus favors sweet, rich, creamy flavors\n    if (flavorProfile.sweet) {\n      score += flavorProfile.sweet * 2.0;\n    }\n    \n    if (flavorProfile.umami) {\n      score += flavorProfile.umami * 1.5;\n    }\n    \n    if (flavorProfile.creamy || flavorProfile.rich) {\n      score += ((flavorProfile.creamy || 0) + (flavorProfile.rich || 0)) * 1.7;\n    }\n    \n    // Venus appreciates aromatic, fragrant qualities\n    if (flavorProfile.aromatic || flavorProfile.fragrant) {\n      score += ((flavorProfile.aromatic || 0) + (flavorProfile.fragrant || 0)) * 1.6;\n    }\n    \n    // Venus is less interested in bitter or excessively spicy flavors\n    if (flavorProfile.bitter) {\n      score -= flavorProfile.bitter * 0.5;\n    }\n    \n    if (flavorProfile.spicy && flavorProfile.spicy > 0.7) {\n      score -= (flavorProfile.spicy - 0.7) * 0.8;\n    }\n  }\n  \n  // Check texture alignment with Venus preferences\n  const texture = (ingredient as Record<string, unknown>)?.texture;\n  if (texture) {\n    // Venus favors smooth, creamy, luscious textures\n    const venusTextures = ['smooth', 'creamy', 'velvety', 'soft', 'tender', 'juicy', 'buttery'];\n    const textureMatch = venusTextures.filter(venusTexture => \n      Array.isArray(texture) ? texture.includes(venusTexture) : texture.includes && texture.includes(venusTexture)\n    ).length;\n    \n    score += textureMatch * 0.5;\n  }\n  \n  // Check culinary technique alignment\n  const culinaryUses = (ingredient as Record<string, unknown>)?.culinaryUses;\n  if (venusData.PlanetSpecific?.CulinaryTechniques && culinaryUses) {\n    // Check for aesthetic presentation techniques\n    if (\n      culinaryUses.includes('garnish') || \n      culinaryUses.includes('plating')\n    ) {\n      score += 1.8;\n    }\n    \n    // Check for balance and harmony in flavor pairings\n    const harmonyPairings = (ingredient as Record<string, unknown>)?.harmonyPairings;\n    if (harmonyPairings && harmonyPairings.length > 3) {\n      score += 1.5;\n    }\n    \n    // Sweet and indulgent preparation techniques\n    if (\n      culinaryUses.includes('dessert') || \n      culinaryUses.includes('baking') ||\n      culinaryUses.includes('confection')\n    ) {\n      score += 1.2;\n    }\n    \n    // Check for fragrance and aroma enhancement\n    const aromaticProperties = (ingredient as Record<string, unknown>)?.aromaticProperties;\n    if (\n      aromaticProperties || \n      (flavorProfile?.aromatic && flavorProfile.aromatic > 0.7)\n    ) {\n      score += 1.6;\n    }\n    \n    // Check for textural contrast techniques\n    if (\n      culinaryUses.includes('crispy') || \n      culinaryUses.includes('crunchy') || \n      (texture && ((Array.isArray(texture) && texture.includes('contrast')) || (texture.includes && texture.includes('contrast'))))\n    ) {\n      score += 1.3;\n    }\n  }\n  \n  // Zodiac sign-specific preferences\n  if (zodiacSign && venusData.PlanetSpecific?.ZodiacTransit) {\n    const transitData = venusData.PlanetSpecific.ZodiacTransit[zodiacSign];\n    \n    // Check food focus alignment\n    // Extract transit data with safe property access\n    const transitDataAny = transitData as Record<string, unknown>;\n    const foodFocusProperty = transitDataAny?.FoodFocus;\n    \n    if (foodFocusProperty) {\n      const foodFocus = foodFocusProperty.toLowerCase();\n      const ingredientName = (ingredient as string)?.name.toLowerCase();\n      \n      // Direct keywords match\n      const keywords = foodFocus.split(/[\\s,;]+/).filter(k => k.length > 3);\n      for (const keyword of keywords) {\n        const description = (ingredient as Record<string, unknown>)?.description;\n        const culinaryUses = (ingredient as Record<string, unknown>)?.culinaryUses;\n        if (ingredientName.includes(keyword) || \n            (description && description.toLowerCase().includes(keyword)) ||\n            (culinaryUses && culinaryUses.some((use: string) => use.toLowerCase().includes(keyword)))) {\n          score += 2.0;\n          break;\n        }\n      }\n    }\n    \n    // Check Elements alignment\n    // Extract transit data with safe property access for elements\n    const transitElements = transitDataAny?.Elements;\n    \n    if (transitElements && ingredient.elementalProperties) {\n      for (const element in transitElements) {\n        if (ingredient.elementalProperties[element]) {\n          score += transitElements[element] * ingredient.elementalProperties[element] * 0.7;\n        }\n      }\n    }\n    \n    // Check ingredient alignment with transit preferences\n    if (transitData.Ingredients) {\n      const transitIngredients = transitData.Ingredients.map(i => i.toLowerCase());\n      \n      // Direct ingredient match\n      if (transitIngredients.some(i => (ingredient as string)?.name.toLowerCase().includes(i) || i.includes((ingredient as string)?.name.toLowerCase()))) {\n        score += 3.0;\n      }\n      \n      // Category match\n      if (ingredient.category && transitIngredients.includes(ingredient.category.toLowerCase())) {\n        score += 2.0;\n      }\n      \n      // Related ingredient match\n      const relatedIngredients = (ingredient as Record<string, unknown>)?.relatedIngredients;\n      if (relatedIngredients) {\n        const relatedMatches = relatedIngredients.filter((related: string) => \n          transitIngredients.some(i => related.toLowerCase().includes(i) || i.includes(related.toLowerCase()))\n        ).length;\n        \n        score += relatedMatches * 0.7;\n      }\n      \n      // Complementary ingredients match\n      const complementaryIngredients = (ingredient as Record<string, unknown>)?.complementaryIngredients;\n      if (complementaryIngredients) {\n        const complementaryMatches = complementaryIngredients.filter((complement: string) => \n          transitIngredients.some(i => complement.toLowerCase().includes(i) || i.includes(complement.toLowerCase()))\n        ).length;\n        \n        score += complementaryMatches * 0.5;\n      }\n    }\n  }\n  \n  // Venus temperament based on sign type\n  if (zodiacSign) {\n    const earthSigns = ['taurus', 'virgo', 'capricorn'];\n    const airSigns = ['gemini', 'libra', 'aquarius'];\n    const waterSigns = ['cancer', 'scorpio', 'pisces'];\n    const fireSigns = ['aries', 'leo', 'sagittarius'];\n    const lowerSign = zodiacSign.toLowerCase();\n    \n    // Earth Venus\n    if (earthSigns.includes(lowerSign) && (venusData.PlanetSpecific?.CulinaryTemperament as string)?.EarthVenus) {\n      const earthVenus = (venusData.PlanetSpecific.CulinaryTemperament as Record<string, unknown>).EarthVenus;\n      \n      // Check for sensual, rich ingredients\n      if (flavorProfile?.rich > 0.5 || \n          flavorProfile?.umami > 0.5 ||\n          culinaryUses?.includes('comfort food')) {\n        score += 2.0;\n      }\n      \n      // Food focus alignment\n      // Extract earth venus data with safe property access\n      const earthVenusAny = earthVenus as Record<string, unknown>;\n      const earthVenusFoodFocus = earthVenusAny?.FoodFocus;\n      \n      if (earthVenusFoodFocus) {\n        const focusKeywords = earthVenusFoodFocus.toLowerCase().split(/[\\s,;]+/).filter(k => k.length > 3);\n        const description = (ingredient as Record<string, unknown>)?.description;\n        if (focusKeywords.some(keyword => \n            (ingredient as string)?.name.toLowerCase().includes(keyword) || \n            (description && description.toLowerCase().includes(keyword)))) {\n          score += 1.5;\n        }\n      }\n      \n      // Elements alignment\n      // Extract earth venus elements with safe property access\n      const earthVenusElements = earthVenusAny?.Elements;\n      \n      if (earthVenusElements && ingredient.elementalProperties) {\n        for (const element in earthVenusElements) {\n          if (ingredient.elementalProperties[element]) {\n            score += earthVenusElements[element] * ingredient.elementalProperties[element] * 1.0;\n          }\n        }\n      }\n    }\n    \n    // Air Venus\n    if (airSigns.includes(lowerSign) && (venusData.PlanetSpecific?.CulinaryTemperament as string)?.AirVenus) {\n      const airVenus = (venusData.PlanetSpecific.CulinaryTemperament as Record<string, unknown>).AirVenus;\n      \n      // Check for light, delicate ingredients\n      if ((texture && ((Array.isArray(texture) && texture.includes('light')) || (texture.includes && texture.includes('light')))) || \n          (texture && ((Array.isArray(texture) && texture.includes('crisp')) || (texture.includes && texture.includes('crisp')))) ||\n          flavorProfile?.light > 0.5) {\n        score += 2.0;\n      }\n      \n      // Food focus alignment\n      // Extract air venus data with safe property access\n      const airVenusAny = airVenus as Record<string, unknown>;\n      const airVenusFoodFocus = airVenusAny?.FoodFocus;\n      \n      if (airVenusFoodFocus) {\n        const focusKeywords = airVenusFoodFocus.toLowerCase().split(/[\\s,;]+/).filter(k => k.length > 3);\n        const description = (ingredient as Record<string, unknown>)?.description;\n        if (focusKeywords.some(keyword => \n            (ingredient as string)?.name.toLowerCase().includes(keyword) || \n            (description && description.toLowerCase().includes(keyword)))) {\n          score += 1.5;\n        }\n      }\n      \n      // Elements alignment\n      // Extract air venus elements with safe property access\n      const airVenusElements = airVenusAny?.Elements;\n      \n      if (airVenusElements && ingredient.elementalProperties) {\n        for (const element in airVenusElements) {\n          if (ingredient.elementalProperties[element]) {\n            score += airVenusElements[element] * ingredient.elementalProperties[element] * 1.0;\n          }\n        }\n      }\n    }\n    \n    // Water Venus\n    if (waterSigns.includes(lowerSign) && (venusData.PlanetSpecific?.CulinaryTemperament as string)?.WaterVenus) {\n      const waterVenus = (venusData.PlanetSpecific.CulinaryTemperament as Record<string, unknown>).WaterVenus;\n      \n      // Check for moist, juicy ingredients\n      if ((texture && ((Array.isArray(texture) && texture.includes('juicy')) || (texture.includes && texture.includes('juicy')))) || \n          (texture && ((Array.isArray(texture) && texture.includes('tender')) || (texture.includes && texture.includes('tender')))) ||\n          flavorProfile?.juicy > 0.5) {\n        score += 2.0;\n      }\n      \n      // Food focus alignment\n      // Extract water venus data with safe property access\n      const waterVenusAny = waterVenus as Record<string, unknown>;\n      const waterVenusFoodFocus = waterVenusAny?.FoodFocus;\n      \n      if (waterVenusFoodFocus) {\n        const focusKeywords = waterVenusFoodFocus.toLowerCase().split(/[\\s,;]+/).filter(k => k.length > 3);\n              // Extract ingredient data with safe property access\n      const ingredientData = ingredient as Record<string, unknown>;\n      const ingredientName = ingredientData?.name?.toLowerCase() || '';\n      const ingredientDescription = ingredientData?.description?.toLowerCase() || '';\n      \n      if (focusKeywords.some(keyword => \n          ingredientName.includes(keyword) || \n          ingredientDescription.includes(keyword))) {\n          score += 1.5;\n        }\n      }\n      \n      // Elements alignment\n      // Extract water venus elements with safe property access\n      const waterVenusElements = waterVenusAny?.Elements;\n      \n      if (waterVenusElements && ingredient.elementalProperties) {\n        for (const element in waterVenusElements) {\n          if (ingredient.elementalProperties[element]) {\n            score += waterVenusElements[element] * ingredient.elementalProperties[element] * 1.0;\n          }\n        }\n      }\n    }\n    \n    // Fire Venus\n    if (fireSigns.includes(lowerSign) && (venusData.PlanetSpecific?.CulinaryTemperament as string)?.FireVenus) {\n      const fireVenus = (venusData.PlanetSpecific.CulinaryTemperament as Record<string, unknown>).FireVenus;\n      \n      // Check for vibrant, spicy ingredients\n      if (flavorProfile?.spicy > 0.3 || \n          flavorProfile?.vibrant > 0.5 ||\n          culinaryUses?.includes('stimulating')) {\n        score += 2.0;\n      }\n      \n      // Food focus alignment\n      // Extract fire venus data with safe property access\n      const fireVenusAny = fireVenus as Record<string, unknown>;\n      const fireVenusFoodFocus = fireVenusAny?.FoodFocus;\n      \n      if (fireVenusFoodFocus) {\n        const focusKeywords = fireVenusFoodFocus.toLowerCase().split(/[\\s,;]+/).filter(k => k.length > 3);\n        // Extract ingredient data with safe property access\n        const ingredientData = ingredient as Record<string, unknown>;\n        const ingredientName = ingredientData?.name?.toLowerCase() || '';\n        const ingredientDescription = ingredientData?.description?.toLowerCase() || '';\n        \n        if (focusKeywords.some(keyword => \n            ingredientName.includes(keyword) || \n            ingredientDescription.includes(keyword))) {\n          score += 1.5;\n        }\n      }\n      \n      // Elements alignment\n      // Extract fire venus elements with safe property access\n      const fireVenusElements = fireVenusAny?.Elements;\n      \n      if (fireVenusElements && ingredient.elementalProperties) {\n        for (const element in fireVenusElements) {\n          if (ingredient.elementalProperties[element]) {\n            score += fireVenusElements[element] * ingredient.elementalProperties[element] * 1.0;\n          }\n        }\n      }\n    }\n  }\n\n  // Retrograde modifiers\n  if (isVenusRetrograde && venusData.PlanetSpecific?.Retrograde) {\n    // Increase score for preserved or dried herbs during retrograde\n    const preservationMethods = (ingredient as Record<string, unknown>)?.preservation_methods;\n    const categories = (ingredient as Record<string, unknown>)?.categories;\n    if (\n      (preservationMethods && preservationMethods.includes('dried')) || \n      (ingredient as Record<string, unknown>).category === 'herb' ||\n      (categories && categories.includes('preserved'))\n    ) {\n      score *= 1.5;\n    } else {\n      score *= 0.8; // Slightly reduce other ingredients\n    }\n    \n    // Nostalgia foods get a boost during retrograde\n    // Extract ingredient data with safe property access for cultural significance\n    const ingredientData = ingredient as Record<string, unknown>;\n    const culturalSignificance = ingredientData?.cultural_significance;\n    const culturalSignificanceArray = Array.isArray(culturalSignificance) ? culturalSignificance : \n                                     (typeof culturalSignificance === 'string' ? [culturalSignificance] : []);\n    \n    if (culturalSignificanceArray.includes('traditional') ||\n        culturalSignificanceArray.includes('nostalgic')) {\n      score += 1.8;\n    }\n    \n    // Check retrograde food focus\n    // Extract retrograde data with safe property access\n    const retrogradeData = venusData.PlanetSpecific.Retrograde as Record<string, unknown>;\n    const retroFoodFocus = retrogradeData?.FoodFocus;\n    \n    if (retroFoodFocus) {\n      const retroFocus = retroFoodFocus.toLowerCase();\n      // Extract ingredient data with safe property access\n      const ingredientData = ingredient as Record<string, unknown>;\n      const ingredientName = ingredientData?.name?.toLowerCase() || '';\n      const ingredientDesc = ingredientData?.description?.toLowerCase() || '';\n      \n      // Check for keyword matches\n      const retroKeywords = retroFocus.split(/[\\s,;]+/).filter(k => k.length > 3);\n      for (const keyword of retroKeywords) {\n        if (ingredientName.includes(keyword) || ingredientDesc.includes(keyword)) {\n          score += 1.7;\n          break;\n        }\n      }\n    }\n    \n          // Check retrograde elements\n      // Extract retrograde elements with safe property access\n      const retrogradeElements = retrogradeData?.Elements;\n      \n      if (retrogradeElements && ingredient.elementalProperties) {\n        \n        for (const element in retrogradeElements) {\n          if (ingredient.elementalProperties[element]) {\n            score += retrogradeElements[element] * \n                     ingredient.elementalProperties[element] * 0.9;\n          }\n        }\n      }\n  }\n  \n  // Lunar phase connections with Venus\n  // Extract planetary data with safe property access\n  const venusDataAny = venusData as LunarPhase;\n  const lunarConnection = venusDataAny?.LunarConnection;\n  \n  if (lunarConnection) {\n    // This would be checked against the current lunar phase in a full implementation\n  }\n\n  return score;\n}\n\n// Enhance ingredient scoring with Venus influence\nfunction _enhanceVenusIngredientScoring(\n  ingredient: Ingredient,\n  astroState: AstrologicalState,\n  score: number\n): number {\n  // Only apply Venus scoring if Venus is active\n  if (!astroState.activePlanets?.includes('Venus')) {\n    return score;\n  }\n  \n  // Get current zodiac sign\n  const zodiacSign = astroState.zodiacSign as string | undefined;\n  \n  // Check if Venus is retrograde\n  // Extract astrological state with safe property access\n  const astroStateData = astroState as Record<string, unknown>;\n  const retrogradeArray = Array.isArray(astroStateData?.retrograde) ? astroStateData.retrograde : [];\n  const isVenusRetrograde = retrogradeArray.includes('Venus') || false;\n  \n  // Calculate Venus influence score\n  const venusInfluence = calculateVenusInfluence(ingredient, zodiacSign, isVenusRetrograde);\n  \n  // Apply Venus influence to the base score (weight it appropriately)\n  return score + (venusInfluence * 0.3);\n}\n\n// Enhanced function to boost Venus-ruled ingredients based on detailed Venus data\nfunction enhanceVenusIngredientBatch(ingredients: Ingredient[], astroState: AstrologicalState): void {\n  // Check if Venus is active\n  const isVenusActive = astroState.activePlanets?.includes('Venus');\n  if (!isVenusActive) {\n    return; // Skip Venus scoring if Venus is not active\n  }\n  \n  // Get current zodiac sign\n  const zodiacSign = astroState.zodiacSign as string | undefined;\n  \n  // Check if Venus is retrograde\n  // Extract astrological state with safe property access for batch processing\n  const astroStateData = astroState as Record<string, unknown>;\n  const retrogradeArray = Array.isArray(astroStateData?.retrograde) ? astroStateData.retrograde : [];\n  const isVenusRetrograde = retrogradeArray.includes('Venus') || false;\n  \n  // Add a \"venusScore\" property to each ingredient for sorting\n  ingredients.forEach(ingredient => {\n    // Use our comprehensive Venus influence calculation\n    const venusScore = calculateVenusInfluence(ingredient, zodiacSign, isVenusRetrograde);\n    \n    // Store the Venus score with the ingredient\n    (ingredient as Record<string, unknown>).venusScore = venusScore;\n  });\n  \n  // Sort ingredients by Venus score\n  ingredients.sort((a, b) => {\n    const aScore = (a as Record<string, unknown>).venusScore || 0;\n    const bScore = (b as Record<string, unknown>).venusScore || 0;\n    return bScore - aScore;\n  });\n}\n\n/**\n * Calculates a Mars influence score for an ingredient\n */\nfunction calculateMarsInfluence(\n  ingredient: Ingredient, \n  zodiacSign?: string,\n  isMarsRetrograde = false\n): number {\n  let score = 0;\n  \n  // Get the name in lowercase for comparison\n  const name = (ingredient as string)?.name.toLowerCase();\n  \n  // Match with Mars food associations\n  if (marsData.FoodAssociations) {\n    for (const food of marsData.FoodAssociations) {\n      if (name.includes(food.toLowerCase()) || food.toLowerCase().includes(name)) {\n        score += 1.5;\n        break;\n      }\n    }\n  }\n  \n  // Match with Mars herb associations (stronger affinity)\n  if (marsData.HerbalAssociations?.Herbs) {\n    for (const herb of marsData.HerbalAssociations.Herbs) {\n      if (name.includes(herb.toLowerCase()) || herb.toLowerCase().includes(name)) {\n        score += 2.0;\n        break;\n      }\n    }\n  }\n  \n  // Flavor profile alignment\n  // Extract ingredient data with safe property access for flavor profile\n  const ingredientData = ingredient as Record<string, unknown>;\n  const ingredientFlavorProfile = ingredientData?.flavorProfile;\n  \n  if (marsData.FlavorProfiles && ingredientFlavorProfile) {\n    for (const flavor in marsData.FlavorProfiles) {\n      if (ingredientFlavorProfile[flavor]) {\n        // Higher score when both have high values for same flavor\n        score += marsData.FlavorProfiles[flavor] * ingredientFlavorProfile[flavor];\n      }\n    }\n  }\n  \n  // Elemental alignment\n  if ((ingredient as Record<string, unknown>)?.elementalProperties) {\n    // Mars is primarily Fire, secondarily Water\n    const fireScore = (ingredient as Record<string, unknown>)?.elementalProperties.Fire || 0;\n    const waterScore = (ingredient as Record<string, unknown>)?.elementalProperties.Water || 0;\n    \n    score += fireScore * 1.5; // Primary element gets higher weight\n    score += waterScore * 0.8; // Secondary element\n  }\n  \n  // Zodiac sign specific boost\n  if (zodiacSign && marsData.PlanetSpecific?.ZodiacTransit) {\n    const transit = marsData.PlanetSpecific.ZodiacTransit[zodiacSign];\n    \n    // Check if ingredient is in the transit's ingredient list\n    if (transit && transit.Ingredients) {\n      for (const transitIngredient of transit.Ingredients) {\n        if (name.includes(transitIngredient.toLowerCase()) || \n            transitIngredient.toLowerCase().includes(name)) {\n          score += 2.5; // Strong boost for exact ingredient match in current zodiac\n          break;\n        }\n      }\n    }\n    \n    // Check element alignment with transit\n    if (transit && transit.Elements && (ingredient as Record<string, unknown>)?.elementalProperties) {\n      for (const element in transit.Elements) {\n        const elemValue = element as keyof ElementalProperties;\n        if ((ingredient as Record<string, unknown>)?.elementalProperties[elemValue]) {\n          score += transit.Elements[element] * (ingredient as Record<string, unknown>)?.elementalProperties[elemValue] * 1.2;\n        }\n      }\n    }\n  }\n  \n  // Mars retrograde effects\n  if (isMarsRetrograde && marsData.PlanetSpecific?.Retrograde) {\n    // During retrograde, Mars emphasizes dried herbs and spices\n    // Extract ingredient data with safe property access for type\n    const ingredientData = ingredient as Record<string, unknown>;\n    const ingredientType = ingredientData?.type || ingredientData?.category || '';\n    \n    if (ingredientType === 'spice' || ingredientType === 'herb' || ingredientType === 'seasoning') {\n      score += 1.5;\n    }\n    \n    // Focus shifts to traditional uses\n    // Extract ingredient data with safe property access for traditional property\n    const ingredientTraditional = ingredientData?.traditional;\n    if (ingredientTraditional) {\n      score += 1.2;\n    }\n  }\n  \n  // Adjust for Mars temperament based on dominant element\n  if ((ingredient as Record<string, unknown>)?.elementalProperties) {\n    const fireDominant = ((ingredient as Record<string, unknown>)?.elementalProperties.Fire || 0) > 0.6;\n    const waterDominant = ((ingredient as Record<string, unknown>)?.elementalProperties.Water || 0) > 0.6;\n    \n    // Extract Mars temperament data with safe property access\n    const marsTemperament = marsData.PlanetSpecific?.CulinaryTemperament as Record<string, unknown>;\n    const fireMars = marsTemperament?.FireMars;\n    const waterMars = marsTemperament?.WaterMars;\n    \n    if (fireDominant && fireMars) {\n      score += 1.5;\n    } else if (waterDominant && waterMars) {\n      score += 1.3;\n    }\n  }\n  \n  return score;\n}\n\n/**\n * Apply Mars-specific scoring to a collection of ingredients\n */\nfunction enhanceMarsIngredientScoring(ingredients: Ingredient[], astroState: AstrologicalState): void {\n  // Get Mars status info from astro state\n  // Extract astrological state with safe property access for Mars retrograde\n  const astroStateData = astroState as Record<string, unknown>;\n  const retrogradeArray = Array.isArray(astroStateData?.retrograde) ? astroStateData.retrograde : [];\n  const isMarsRetrograde = retrogradeArray.includes('Mars') || false;\n  const zodiacSign = astroState.zodiacSign;\n  \n  // Compute Mars influence for each ingredient\n  for (let i = 0; i < ingredients.length; i++) {\n    const ingredient = ingredients[i];\n    \n    // Only process if it has necessary data\n    // Extract ingredient data with safe property access\n    const ingredientData = ingredient as Record<string, unknown>;\n    const ingredientName = ingredientData?.name;\n    const ingredientMatchScore = ingredientData?.matchScore;\n    \n    if (!ingredientName || !ingredientMatchScore) continue;\n    \n    // Calculate Mars influence\n    const marsInfluence = calculateMarsInfluence(\n      ingredient,\n      zodiacSign,\n      isMarsRetrograde\n    );\n    \n    // Apply Mars boost to match score\n    if (marsInfluence > 0) {\n      // Include the original score, add the Mars influence\n      ingredientData.matchScore = (ingredientData.matchScore || 0) + (marsInfluence * 1.8);\n      \n      // Add a flag or data point to indicate Mars influence was applied\n      if (!ingredientData.influences) {\n        ingredientData.influences = {};\n      }\n      ingredientData.influences.mars = marsInfluence;\n    }\n  }\n  \n  // Re-sort the ingredients based on the updated scores\n  ingredients.sort((a, b) => {\n    const aData = a as Record<string, unknown>;\n    const bData = b as Record<string, unknown>;\n    return (bData.matchScore || 0) - (aData.matchScore || 0);\n  });\n}\n\n// Add the new function for Mercury associated ingredients\nfunction isMercuryAssociatedIngredient(ingredientName: string): boolean {\n  if (!ingredientName) return false;\n  \n  const lowerIngredient = ingredientName.toLowerCase();\n  \n  // Check direct Mercury food associations\n  if (mercuryData.FoodAssociations && mercuryData.FoodAssociations.some(food => \n      food.toLowerCase() === lowerIngredient || \n      lowerIngredient.includes(food.toLowerCase()) ||\n      food.toLowerCase().includes(lowerIngredient)\n    )) {\n    return true;\n  }\n  \n  // Check Mercury herb associations\n  if (mercuryData.HerbalAssociations?.Herbs && mercuryData.HerbalAssociations.Herbs.some(herb => \n      herb.toLowerCase() === lowerIngredient || \n      lowerIngredient.includes(herb.toLowerCase()) ||\n      herb.toLowerCase().includes(lowerIngredient)\n    )) {\n    return true;\n  }\n  \n  // Check for Mercury elemental connection through flavor profile\n  // Mercury emphasizes complexity, variety, multiple ingredients, and contrasting flavors\n  const mercuryFlavorSignals = [\n    'mixed', 'blend', 'infused', 'complex', 'layered', 'aromatic', \n    'herb', 'mint', 'anise', 'fennel', 'dill', 'light', 'citrus',\n    'varied', 'fusion', 'multi', 'fresh', 'stimulant', 'tea',\n    'seeds', 'nuts', 'grain'\n  ];\n  \n  if (mercuryFlavorSignals.some(signal => lowerIngredient.includes(signal))) {\n    return true;\n  }\n  \n  // Mercury is associated with Air and Earth elements\n  // Lighter ingredients (Air) and grounding ingredients (Earth)\n  if (lowerIngredient.includes('air') || lowerIngredient.includes('light') || \n      lowerIngredient.includes('puff') || lowerIngredient.includes('crisp') ||\n      lowerIngredient.includes('earth') || lowerIngredient.includes('root') ||\n      lowerIngredient.includes('tuber')) {\n    return true;\n  }\n  \n  // Check Mercury ZodiacTransit ingredient associations in current sign\n  // This is a more dynamic way to check for transient associations\n  const currentZodiacSign = 'aries'; // Use fallback or implement getCurrentZodiacSign function\n  if (currentZodiacSign && mercuryData.PlanetSpecific?.ZodiacTransit?.[currentZodiacSign]?.Ingredients) {\n    const transitIngredients = mercuryData.PlanetSpecific.ZodiacTransit[currentZodiacSign].Ingredients;\n    if (transitIngredients.some(ingredient => \n        ingredient.toLowerCase() === lowerIngredient ||\n        lowerIngredient.includes(ingredient.toLowerCase()) ||\n        ingredient.toLowerCase().includes(lowerIngredient)\n      )) {\n      return true;\n    }\n  }\n  \n  return false;\n}\n\n// Add the function to calculate Mercury influence on ingredients\nfunction calculateMercuryInfluence(\n  ingredient: Ingredient, \n  zodiacSign?: string,\n  isMercuryRetrograde = false\n): number {\n  let score = 0;\n  \n  // Base score for Mercury-ruled ingredients\n  if ((ingredient as string)?.astrologicalProfile?.rulingPlanets?.includes('Mercury')) {\n    score += 3.0; // Strong baseline for Mercury-ruled ingredients\n  }\n  \n  // Mercury food associations\n  if (mercuryData.FoodAssociations) {\n    for (const food of mercuryData.FoodAssociations) {\n      if ((ingredient as string)?.name.toLowerCase().includes(food.toLowerCase()) ||\n          food.toLowerCase().includes((ingredient as string)?.name.toLowerCase())) {\n        score += 2.0;\n        break;\n      }\n    }\n  }\n  \n  // Mercury herb associations\n  // Extract ingredient data with safe property access for type\n  const ingredientData = ingredient as Record<string, unknown>;\n  const ingredientType = ingredientData?.type || ingredientData?.category || '';\n  \n  if (mercuryData.HerbalAssociations?.Herbs && \n      (ingredientType === 'herb' || ingredientType === 'spice')) {\n    for (const herb of mercuryData.HerbalAssociations.Herbs) {\n      if ((ingredient as string)?.name.toLowerCase().includes(herb.toLowerCase()) ||\n          herb.toLowerCase().includes((ingredient as string)?.name.toLowerCase())) {\n        score += 2.5; // Higher score for direct Mercury herb associations\n        break;\n      }\n    }\n  }\n  \n  // Elemental affinities based on Mercury's elements\n  if ((ingredient as Record<string, unknown>)?.elementalProperties) {\n    // Mercury's primary elements are Air and Earth\n    score += ((ingredient as Record<string, unknown>)?.elementalProperties.Air || 0) * 2.0;\n    score += ((ingredient as Record<string, unknown>)?.elementalProperties.Earth || 0) * 1.8;\n  }\n  \n  // Add scores based on zodiac sign if provided\n  if (zodiacSign) {\n    const lowerSign = zodiacSign.toLowerCase();\n    \n    // Boost if ingredient has affinity with the current sign\n    if ((ingredient as string)?.astrologicalProfile?.signAffinities?.includes(lowerSign)) {\n      score += 1.5;\n    }\n    \n    // Check Mercury's zodiac transit data for this sign\n    const mercuryTransit = mercuryData.PlanetSpecific?.ZodiacTransit?.[zodiacSign];\n    if (mercuryTransit) {\n      // Boost for ingredients matching transit ingredients\n      if (mercuryTransit.Ingredients && mercuryTransit.Ingredients.some(transitIngredient => \n          (ingredient as string)?.name.toLowerCase().includes(transitIngredient.toLowerCase()) ||\n          transitIngredient.toLowerCase().includes((ingredient as string)?.name.toLowerCase())\n        )) {\n        score += 2.5;\n      }\n      \n      // Element alignment with Mercury in this sign\n      if (mercuryTransit.Elements && (ingredient as Record<string, unknown>)?.elementalProperties) {\n        for (const element in mercuryTransit.Elements) {\n          const elemKey = element as keyof ElementalProperties;\n          if ((ingredient as Record<string, unknown>)?.elementalProperties[elemKey]) {\n            score += mercuryTransit.Elements[element] * (ingredient as Record<string, unknown>)?.elementalProperties[elemKey] * 1.2;\n          }\n        }\n      }\n    }\n    \n    // Special scoring for Mercury in its domicile signs\n    if (lowerSign === 'gemini' || lowerSign === 'virgo') {\n      if ((ingredient as string)?.astrologicalProfile?.rulingPlanets?.includes('Mercury')) {\n        score += 2.0; // Extra boost for Mercury ruling when Mercury is in domicile\n      }\n      \n      // Special handling for Gemini (Air) and Virgo (Earth)\n      if (lowerSign === 'gemini' && (ingredient as Record<string, unknown>)?.elementalProperties?.Air) {\n        score += (ingredient as Record<string, unknown>)?.elementalProperties.Air * 1.8;\n      } else if (lowerSign === 'virgo' && (ingredient as Record<string, unknown>)?.elementalProperties?.Earth) {\n        score += (ingredient as Record<string, unknown>)?.elementalProperties.Earth * 1.8;\n      }\n    }\n    \n    // Special handling for Mercury in its detriment signs\n    if (lowerSign === 'sagittarius' || lowerSign === 'pisces') {\n      score *= 0.8; // Reduce score slightly when Mercury is in detriment\n    }\n  }\n  \n  // Adjust score based on Mercury retrograde status\n  if (isMercuryRetrograde) {\n    // During retrograde, Mercury emphasizes familiar, traditional ingredients\n    if (ingredient.qualities?.includes('traditional') || \n        ingredient.qualities?.includes('nostalgic') ||\n        ingredient.qualities?.includes('classic')) {\n      score *= 1.25; // Boost for traditional ingredients during retrograde\n    }\n    \n    // During retrograde, Mercury de-emphasizes complex or exotic ingredients\n    if (ingredient.qualities?.includes('exotic') || \n        ingredient.qualities?.includes('complex') ||\n        ingredient.qualities?.includes('novel')) {\n      score *= 0.8; // Reduce score for complex/exotic ingredients during retrograde\n    }\n    \n    // Apply Mercury's retrograde elemental shift if available\n    if (mercuryData.RetrogradeEffect && (ingredient as Record<string, unknown>)?.elementalProperties) {\n      // Shift toward Matter and away from Spirit during retrograde\n      if ((ingredient as Record<string, unknown>)?.elementalProperties.Earth) {\n        score += (ingredient as Record<string, unknown>)?.elementalProperties.Earth * Math.abs(mercuryData.RetrogradeEffect.Matter);\n      }\n      if ((ingredient as Record<string, unknown>)?.elementalProperties.Air) {\n        score -= (ingredient as Record<string, unknown>)?.elementalProperties.Air * Math.abs(mercuryData.RetrogradeEffect.Spirit);\n      }\n    }\n  }\n  \n  // Adjust for Mercury's specific influence on certain ingredient qualities\n  // Mercury emphasizes ingredients that involve mental stimulation and clarity\n  if (ingredient.qualities) {\n    const mercuryQualityBoosts = {\n      'aromatic': 1.3,\n      'complex': 1.4,\n      'stimulating': 1.5,\n      'adaptable': 1.3,\n      'versatile': 1.4,\n      'detailed': 1.2,\n      'precise': 1.2\n    };\n    \n    for (const quality of ingredient.qualities) {\n      const lowerQuality = quality.toLowerCase();\n      for (const [mercuryQuality, boost] of Object.entries(mercuryQualityBoosts)) {\n        if (lowerQuality.includes(mercuryQuality)) {\n          score += boost;\n          break;\n        }\n      }\n    }\n  }\n  \n  return score;\n}\n\n// Add the function to enhance Mercury ingredient scoring\nfunction enhanceMercuryIngredientScoring(ingredients: Ingredient[], astroState: AstrologicalState): void {\n  // Check if Mercury is retrograde\n  // Extract astrological state with safe property access for Mercury retrograde\n  const astroStateData = astroState as Record<string, unknown>;\n  const retrogradeArray = Array.isArray(astroStateData?.retrograde) ? astroStateData.retrograde : [];\n  const isMercuryRetrograde = retrogradeArray.includes('Mercury') || false;\n  \n  // Get the current zodiac sign\n  const zodiacSign = astroState.zodiacSign;\n  \n  // For each ingredient, calculate and apply Mercury influence score\n  ingredients.forEach(ingredient => {\n    const mercuryScore = calculateMercuryInfluence(ingredient, zodiacSign, isMercuryRetrograde);\n    \n    // Extract ingredient data with safe property access for score manipulation\n    const ingredientData = ingredient as Record<string, unknown>;\n    \n    // Apply Mercury score as a multiplier to the ingredient's existing score\n    if (ingredientData.matchScore !== undefined) {\n      ingredientData.matchScore *= (1 + mercuryScore * 0.3);\n    } else if ('score' in ingredientData) {\n      ingredientData.score *= (1 + mercuryScore * 0.3);\n    }\n    \n    // If the ingredient has a Mercury score field, update it\n    if ('mercuryAffinity' in ingredient) {\n      (ingredient as Record<string, unknown>).mercuryAffinity = mercuryScore;\n    }\n    \n    // If the ingredient has a detailed score breakdown, add Mercury score\n    if ('scoreDetails' in ingredient) {\n      (ingredient as Record<string, unknown>).scoreDetails = {\n        ...(ingredient as Record<string, unknown>).scoreDetails,\n        mercuryAffinity: mercuryScore\n      };\n    }\n  });\n}\n\n/**\n * Determines the modality of an ingredient based on its qualities and elemental properties\n * Using the hierarchical affinities:\n * - Mutability: Air > Water > Fire > Earth\n * - Fixed: Earth > Water > Fire > Air\n * - Cardinal: Equal for all elements\n * \n * @param qualities Array of quality descriptors\n * @param elementalProperties Optional elemental properties for more accurate determination\n * @returns The modality (Cardinal, Fixed, or Mutable)\n */\nfunction determineIngredientModality(\n  qualities: string[] = [],\n  elementalProperties?: ElementalProperties\n): Modality {\n  // Ensure qualities is an array\n  const qualitiesArray = Array.isArray(qualities) ? qualities : [];\n  \n  // Create normalized arrays of qualities for easier matching\n  const normalizedQualities = qualitiesArray.map(q => q.toLowerCase());\n  \n  // Look for explicit quality indicators in the ingredients\n  const cardinalKeywords = ['initiating', 'spicy', 'pungent', 'stimulating', 'invigorating', 'activating'];\n  const fixedKeywords = ['grounding', 'stabilizing', 'nourishing', 'sustaining', 'foundational'];\n  const mutableKeywords = ['adaptable', 'flexible', 'versatile', 'balancing', 'harmonizing'];\n  \n  const hasCardinalQuality = normalizedQualities.some(q => cardinalKeywords.includes(q));\n  const hasFixedQuality = normalizedQualities.some(q => fixedKeywords.includes(q));\n  const hasMutableQuality = normalizedQualities.some(q => mutableKeywords.includes(q));\n  \n  // If there's a clear quality indicator, use that\n  if (hasCardinalQuality && !hasFixedQuality && !hasMutableQuality) {\n    return 'Cardinal';\n  }\n  if (hasFixedQuality && !hasCardinalQuality && !hasMutableQuality) {\n    return 'Fixed';\n  }\n  if (hasMutableQuality && !hasCardinalQuality && !hasFixedQuality) {\n    return 'Mutable';\n  }\n  \n  // If elemental properties are provided, use them to determine modality\n  if (elementalProperties) {\n    const { Fire, Water, Earth, Air } = elementalProperties;\n    \n    // Determine dominant element\n    const dominantElement = getDominantElement(elementalProperties);\n    \n    // Use hierarchical element-modality affinities\n    switch (dominantElement) {\n      case 'Air':\n        // Air has strongest affinity with Mutable, then Cardinal, then Fixed\n        if (Air > 0.4) {\n          return 'Mutable';\n        }\n        break;\n      case 'Earth':\n        // Earth has strongest affinity with Fixed, then Cardinal, then Mutable\n        if (Earth > 0.4) {\n          return 'Fixed';\n        }\n        break;\n      case 'Fire':\n        // Fire has balanced affinities but leans Cardinal\n        if (Fire > 0.4) {\n          return 'Cardinal';\n        }\n        break;\n      case 'Water':\n        // Water is balanced between Fixed and Mutable\n        if (Water > 0.4) {\n          // Slightly favor Mutable for Water, as per our hierarchy\n          return Water > 0.6 ? 'Mutable' : 'Fixed';\n        }\n        break;\n    }\n    \n    // Calculate modality scores based on hierarchical affinities\n    const mutableScore = (Air * 0.9) + (Water * 0.8) + (Fire * 0.7) + (Earth * 0.5);\n    const fixedScore = (Earth * 0.9) + (Water * 0.8) + (Fire * 0.6) + (Air * 0.5);\n    const cardinalScore = (Fire * 0.8) + (Earth * 0.8) + (Water * 0.8) + (Air * 0.8);\n    \n    // Return the modality with the highest score\n    if (mutableScore > fixedScore && mutableScore > cardinalScore) {\n      return 'Mutable';\n    } else if (fixedScore > mutableScore && fixedScore > cardinalScore) {\n      return 'Fixed';\n    } else {\n      return 'Cardinal';\n    }\n  }\n  \n  // Default to Mutable if no clear indicators are found\n  return 'Mutable';\n}\n\n/**\n * Helper function to get the dominant element from elemental properties\n */\nfunction getDominantElement(elementalProperties: ElementalProperties): keyof ElementalProperties {\n  const elements = ['Fire', 'Water', 'Earth', 'Air'] as const;\n  let dominantElement: keyof ElementalProperties = 'Earth'; // Default\n  let highestValue = 0;\n  \n  // Find the element with the highest value\n  elements.forEach(element => {\n    const value = elementalProperties[element] || 0;\n    if (value > highestValue) {\n      highestValue = value;\n      dominantElement = element;\n    }\n  });\n  \n  return dominantElement;\n}\n\n/**\n * Maps planets to their elemental influences (diurnal and nocturnal elements)\n */\nconst planetaryElements: Record<string, { diurnal: keyof ElementalProperties, nocturnal: keyof ElementalProperties, dignityEffect?: Record<string, number> }> = {\n  'Sun': { diurnal: 'Fire', nocturnal: 'Fire', dignityEffect: {'leo': 1, 'aries': 2, 'aquarius': -1, 'libra': -2} },\n  'Moon': { diurnal: 'Water', nocturnal: 'Water', dignityEffect: {'cancer': 1, 'taurus': 2, 'capricorn': -1, 'scorpio': -2} },\n  'Mercury': { diurnal: 'Air', nocturnal: 'Earth', dignityEffect: {'gemini': 1, 'virgo': 3, 'sagittarius': 1, 'pisces': -3} },\n  'Venus': { diurnal: 'Water', nocturnal: 'Earth', dignityEffect: {'libra': 1, 'taurus': 1, 'pisces': 2, 'aries': -1, 'scorpio': -1, 'virgo': -2} },\n  'Mars': { diurnal: 'Fire', nocturnal: 'Water', dignityEffect: {'aries': 1, 'scorpio': 1, 'capricorn': 2, 'taurus': -1, 'libra': -1, 'cancer': -2} },\n  'Jupiter': { diurnal: 'Air', nocturnal: 'Fire', dignityEffect: {'pisces': 1, 'sagittarius': 1, 'cancer': 2, 'gemini': -1, 'virgo': -1, 'capricorn': -2} },\n  'Saturn': { diurnal: 'Air', nocturnal: 'Earth', dignityEffect: {'aquarius': 1, 'capricorn': 1, 'libra': 2, 'cancer': -1, 'leo': -1, 'aries': -2} },\n  'Uranus': { diurnal: 'Water', nocturnal: 'Air', dignityEffect: {'aquarius': 1, 'scorpio': 2, 'taurus': -3} },\n  'Neptune': { diurnal: 'Water', nocturnal: 'Water', dignityEffect: {'pisces': 1, 'cancer': 2, 'virgo': -1, 'capricorn': -2} },\n  'Pluto': { diurnal: 'Earth', nocturnal: 'Water', dignityEffect: {'scorpio': 1, 'leo': 2, 'taurus': -1, 'aquarius': -2} }\n};\n\n// Define sign info with decan effects and degree effects\nconst signInfo: Record<string, { element: keyof ElementalProperties, decanEffects: Record<string, string[]>, degreeEffects: Record<string, number[]> }> = {\n  'aries': {\n    element: 'Fire',\n    decanEffects: { '1st Decan': ['Mars'], '2nd Decan': ['Sun'], '3rd Decan': ['Venus'] },\n    degreeEffects: { 'Mercury': [15, 21], 'Venus': [7, 14], 'Mars': [22, 26], 'Jupiter': [1, 6], 'Saturn': [27, 30] }\n  },\n  'taurus': {\n    element: 'Earth',\n    decanEffects: { '1st Decan': ['Mercury'], '2nd Decan': ['Moon'], '3rd Decan': ['Saturn'] },\n    degreeEffects: { 'Mercury': [9, 15], 'Venus': [1, 8], 'Mars': [27, 30], 'Jupiter': [16, 22], 'Saturn': [23, 26] }\n  },\n  'gemini': {\n    element: 'Air',\n    decanEffects: { '1st Decan': ['Jupiter'], '2nd Decan': ['Mars'], '3rd Decan': ['Uranus', 'Sun'] },\n    degreeEffects: { 'Mercury': [1, 7], 'Venus': [15, 20], 'Mars': [26, 30], 'Jupiter': [8, 14], 'Saturn': [22, 25] }\n  },\n  'cancer': {\n    element: 'Water',\n    decanEffects: { '1st Decan': ['Venus'], '2nd Decan': ['Mercury', 'Pluto'], '3rd Decan': ['Neptune', 'Moon'] },\n    degreeEffects: { 'Mercury': [14, 20], 'Venus': [21, 27], 'Mars': [1, 6], 'Jupiter': [7, 13], 'Saturn': [28, 30] }\n  },\n  'leo': {\n    element: 'Fire',\n    decanEffects: { '1st Decan': ['Saturn'], '2nd Decan': ['Jupiter'], '3rd Decan': ['Mars'] },\n    degreeEffects: { 'Mercury': [7, 13], 'Venus': [14, 19], 'Mars': [26, 30], 'Jupiter': [20, 25], 'Saturn': [1, 6] }\n  },\n  'virgo': {\n    element: 'Earth',\n    decanEffects: { '1st Decan': ['Mars', 'Sun'], '2nd Decan': ['Venus'], '3rd Decan': ['Mercury'] },\n    degreeEffects: { 'Mercury': [1, 7], 'Venus': [8, 13], 'Mars': [25, 30], 'Jupiter': [14, 18], 'Saturn': [19, 24] }\n  },\n  'libra': {\n    element: 'Air',\n    decanEffects: { '1st Decan': ['Moon'], '2nd Decan': ['Saturn', 'Uranus'], '3rd Decan': ['Jupiter'] },\n    degreeEffects: { 'Mercury': [20, 24], 'Venus': [7, 11], 'Mars': [], 'Jupiter': [12, 19], 'Saturn': [1, 6] }\n  },\n  'scorpio': {\n    element: 'Water',\n    decanEffects: { '1st Decan': ['Pluto'], '2nd Decan': ['Neptune', 'Sun'], '3rd Decan': ['Venus'] },\n    degreeEffects: { 'Mercury': [22, 27], 'Venus': [15, 21], 'Mars': [1, 6], 'Jupiter': [7, 14], 'Saturn': [28, 30] }\n  },\n  'sagittarius': {\n    element: 'Fire',\n    decanEffects: { '1st Decan': ['Mercury'], '2nd Decan': ['Moon'], '3rd Decan': ['Saturn'] },\n    degreeEffects: { 'Mercury': [15, 20], 'Venus': [9, 14], 'Mars': [], 'Jupiter': [1, 8], 'Saturn': [21, 25] }\n  },\n  'capricorn': {\n    element: 'Earth',\n    decanEffects: { '1st Decan': ['Jupiter'], '2nd Decan': [], '3rd Decan': ['Sun'] },\n    degreeEffects: { 'Mercury': [7, 12], 'Venus': [1, 6], 'Mars': [], 'Jupiter': [13, 19], 'Saturn': [26, 30] }\n  },\n  'aquarius': {\n    element: 'Air',\n    decanEffects: { '1st Decan': ['Uranus'], '2nd Decan': ['Mercury'], '3rd Decan': ['Moon'] },\n    degreeEffects: { 'Mercury': [], 'Venus': [13, 20], 'Mars': [26, 30], 'Jupiter': [21, 25], 'Saturn': [1, 6] }\n  },\n  'pisces': {\n    element: 'Water',\n    decanEffects: { '1st Decan': ['Saturn', 'Neptune', 'Venus'], '2nd Decan': ['Jupiter'], '3rd Decan': ['Pisces', 'Mars'] },\n    degreeEffects: { 'Mercury': [15, 20], 'Venus': [1, 8], 'Mars': [21, 26], 'Jupiter': [9, 14], 'Saturn': [27, 30] }\n  }\n};\n\n/**\n * Calculate the planetary day influence on food ingredients\n * Now enhanced with dignity effects, decan effects, and degree effects\n */\nfunction calculatePlanetaryDayInfluence(\n  ingredient: Ingredient,\n  planetaryDay: string,\n  planetaryPositions?: Record<string, { sign: string; degree: number }>\n): number {\n  // Get the elements associated with the current planetary day\n  const dayElements = planetaryElements[planetaryDay];\n  if (!dayElements) return 0.5; // Unknown planet\n  \n  // For planetary day, BOTH diurnal and nocturnal elements influence all day\n  const diurnalElement = dayElements.diurnal;\n  const nocturnalElement = dayElements.nocturnal;\n  \n  // Calculate match based on food's element compared to planetary elements\n  let diurnalMatch = 0;\n  let nocturnalMatch = 0;\n  \n  // Check if ingredient has elemental properties\n  if ((ingredient as Record<string, unknown>)?.elementalProperties) {\n    diurnalMatch = (ingredient as Record<string, unknown>)?.elementalProperties[diurnalElement] || 0;\n    nocturnalMatch = (ingredient as Record<string, unknown>)?.elementalProperties[nocturnalElement] || 0;\n  } else {\n    // Simple matching if no detailed elemental profile is available\n    // Extract ingredient data with safe property access for element\n    const ingredientData = ingredient as Record<string, unknown>;\n    const ingredientElement = ingredientData?.element || ingredientData?.category || '';\n    \n    diurnalMatch = ingredientElement === diurnalElement ? 1.0 : 0.3;\n    nocturnalMatch = ingredientElement === nocturnalElement ? 1.0 : 0.3;\n  }\n  \n  // Calculate a weighted score - both elements are equally important for planetary day\n  let elementalScore = (diurnalMatch + nocturnalMatch) / 2;\n  \n  // Apply dignity effects if we have planet positions\n  if (planetaryPositions && planetaryPositions[planetaryDay]) {\n    const planetSign = planetaryPositions[planetaryDay].sign;\n    const planetDegree = planetaryPositions[planetaryDay].degree;\n    \n    // Dignity effect bonus/penalty\n    if (dayElements.dignityEffect && dayElements.dignityEffect[planetSign]) {\n      const dignityModifier = dayElements.dignityEffect[planetSign] * 0.1; // Scale to 0.1-0.3 effect\n      elementalScore = Math.min(1.0, Math.max(0.0, elementalScore + dignityModifier));\n    }\n    \n    // Calculate decan (1-10°: 1st decan, 11-20°: 2nd decan, 21-30°: 3rd decan)\n    let decan = '1st Decan';\n    if (planetDegree > 10 && planetDegree <= 20) decan = '2nd Decan';\n    else if (planetDegree > 20) decan = '3rd Decan';\n    \n    // Apply decan effects if the planet is in its own decan\n    if (signInfo[planetSign] && \n        signInfo[planetSign].decanEffects[decan] && \n        signInfo[planetSign].decanEffects[decan].includes(planetaryDay)) {\n      elementalScore = Math.min(1.0, elementalScore + 0.15);\n    }\n    \n    // Apply degree effects\n    if (signInfo[planetSign] && \n        signInfo[planetSign].degreeEffects[planetaryDay] && \n        signInfo[planetSign].degreeEffects[planetaryDay].length === 2) {\n      const [minDegree, maxDegree] = signInfo[planetSign].degreeEffects[planetaryDay];\n      if (planetDegree >= minDegree && planetDegree <= maxDegree) {\n        elementalScore = Math.min(1.0, elementalScore + 0.2);\n      }\n    }\n  }\n  \n  // If the food has a direct planetary affinity, give bonus points\n  if ((ingredient as string)?.astrologicalProfile?.rulingPlanets?.includes(planetaryDay)) {\n    elementalScore = Math.min(1.0, elementalScore + 0.3);\n  }\n  \n  return elementalScore;\n}\n\n/**\n * Calculate the planetary hour influence on food\n * Now enhanced with dignity effects and aspect considerations\n */\nfunction calculatePlanetaryHourInfluence(\n  ingredient: Ingredient,\n  planetaryHour: string,\n  isDaytime: boolean,\n  planetaryPositions?: Record<string, { sign: string; degree: number }>,\n  aspects?: Array<{ aspectType: string; planet1: string; planet2: string; }>\n): number {\n  // Get the elements associated with the current planetary hour\n  const hourElements = planetaryElements[planetaryHour];\n  if (!hourElements) return 0.5; // Unknown planet\n  \n  // For planetary hour, use diurnal element during day, nocturnal at night\n  const relevantElement = isDaytime ? hourElements.diurnal : hourElements.nocturnal;\n  \n  // Calculate match based on food's element compared to the hour's relevant element\n  let elementalMatch = 0;\n  \n  // Check if ingredient has elemental properties\n  if ((ingredient as Record<string, unknown>)?.elementalProperties) {\n    elementalMatch = (ingredient as Record<string, unknown>)?.elementalProperties[relevantElement] || 0;\n  } else {\n    // Simple matching if no detailed elemental profile is available\n    // Extract ingredient data with safe property access for element\n    const ingredientData = ingredient as Record<string, unknown>;\n    const ingredientElement = ingredientData?.element || ingredientData?.category || '';\n    \n    elementalMatch = ingredientElement === relevantElement ? 1.0 : 0.3;\n  }\n  \n  // Apply dignity effects if we have planet positions\n  if (planetaryPositions && planetaryPositions[planetaryHour]) {\n    const planetSign = planetaryPositions[planetaryHour].sign;\n    \n    // Dignity effect bonus/penalty\n    if (hourElements.dignityEffect && hourElements.dignityEffect[planetSign]) {\n      const dignityModifier = hourElements.dignityEffect[planetSign] * 0.1; // Scale to 0.1-0.3 effect\n      elementalMatch = Math.min(1.0, Math.max(0.0, elementalMatch + dignityModifier));\n    }\n  }\n  \n  // Apply aspect effects if available\n  if (aspects && aspects.length > 0) {\n    // Find aspects involving the planetary hour ruler\n    const hourAspects = aspects.filter(a => \n      a.planet1 === planetaryHour || a.planet2 === planetaryHour);\n    \n    for (const aspect of hourAspects) {\n      const otherPlanet = aspect.planet1 === planetaryHour ? aspect.planet2 : aspect.planet1;\n      let aspectModifier = 0;\n      \n      // Apply different modifier based on aspect type\n      switch (aspect.aspectType) {\n        case 'Conjunction':\n          // Strong beneficial aspect\n          aspectModifier = 0.15;\n          break;\n        case 'Trine':\n          // Beneficial aspect\n          aspectModifier = 0.1;\n          break;\n        case 'Square':\n          // Challenging aspect\n          aspectModifier = -0.1;\n          break;\n        case 'Opposition':\n          // Strong challenging aspect\n          aspectModifier = -0.15;\n          break;\n        default:\n          aspectModifier = 0;\n      }\n      \n      // Apply the aspect modifier if the ingredient is ruled by the other planet in the aspect\n      if ((ingredient as string)?.astrologicalProfile?.rulingPlanets?.includes(otherPlanet)) {\n        elementalMatch = Math.min(1.0, Math.max(0.0, elementalMatch + aspectModifier));\n      }\n    }\n  }\n  \n  // If the food has a direct planetary affinity, give bonus points\n  if ((ingredient as string)?.astrologicalProfile?.rulingPlanets?.includes(planetaryHour)) {\n    elementalMatch = Math.min(1.0, elementalMatch + 0.3);\n  }\n  \n  return elementalMatch;\n}\n\n/**\n * Helper function to determine if it's currently daytime (6am-6pm)\n */\nfunction isDaytime(date: Date = new Date()): boolean {\n  const hour = date.getHours();\n  return hour >= 6 && hour < 18;\n}\n\n/**\n * Recommend ingredients with enhanced planetary, dignity and aspect effects\n */\nexport function recommendIngredients(\n  astroState: AstrologicalState,\n  options: RecommendationOptions = {}\n): IngredientRecommendation[] {\n  // Get all available ingredients\n  const allIngredients = getAllIngredients();\n  \n  // Filter by category if specified\n  let filteredIngredients = allIngredients;\n  if (options.category) {\n    filteredIngredients = allIngredients.filter(ing => {\n      // Extract ingredient data with safe property access for type/category\n      const ingredientData = ing as Record<string, unknown>;\n      const ingredientType = ingredientData?.type || ingredientData?.category || '';\n      return ingredientType.toLowerCase() === options.category?.toLowerCase();\n    });\n  }\n  \n  // Filter out excluded ingredients\n  if (options.excludeIngredients && options.excludeIngredients.length > 0) {\n    filteredIngredients = filteredIngredients.filter(ing => \n      !options.excludeIngredients?.includes((ing as string)?.name));\n  }\n  \n  // Filter to only include specific ingredients\n  if (options.includeOnly && options.includeOnly.length > 0) {\n    filteredIngredients = filteredIngredients.filter(ing => \n      options.includeOnly?.includes((ing as string)?.name));\n  }\n  \n  // Extract key astrological information\n  // Extract astrological state with safe property access\n  const astroStateData = astroState as Record<string, unknown>;\n  const timestamp = astroStateData?.timestamp || new Date();\n  const Fire = astroStateData?.Fire || 0.5;\n  const Water = astroStateData?.Water || 0.5;\n  const Air = astroStateData?.Air || 0.5;\n  const Earth = astroStateData?.Earth || 0.5;\n  const zodiacSign = astroStateData?.zodiacSign || '';\n  const planetaryAlignment = astroStateData?.planetaryAlignment || {};\n  const aspects = astroStateData?.aspects || [];\n  const lunarPhase = astroStateData?.lunarPhase || '';\n  \n  // Get planetary day and hour for current time\n  const date = timestamp instanceof Date ? timestamp : new Date(timestamp);\n  const planetaryCalculator = {\n    calculatePlanetaryDay: (date: Date) => {\n      const days = ['Sun', 'Moon', 'Mars', 'Mercury', 'Jupiter', 'Venus', 'Saturn'];\n      return days[date.getDay()];\n    },\n    calculatePlanetaryHour: (date: Date) => {\n      // This is a simplified calculation\n      const hours = [\n        'Sun', 'Venus', 'Mercury', 'Moon', 'Saturn', 'Jupiter', 'Mars',\n        'Sun', 'Venus', 'Mercury', 'Moon', 'Saturn', 'Jupiter', 'Mars',\n        'Sun', 'Venus', 'Mercury', 'Moon', 'Saturn', 'Jupiter', 'Mars',\n        'Sun', 'Venus', 'Mercury', 'Moon'\n      ];\n      return hours[date.getHours()];\n    },\n    isDaytime: isDaytime\n  };\n  \n  const planetaryDay = planetaryCalculator.calculatePlanetaryDay(date);\n  const planetaryHour = planetaryCalculator.calculatePlanetaryHour(date);\n  const isDaytimeNow = planetaryCalculator.isDaytime(date);\n  \n  // Create elemental properties object for the current system state\n  const systemElementalProps: ElementalProperties = { Fire, Water, Air, Earth };\n  \n  const recommendations: IngredientRecommendation[] = [];\n  \n  // Calculate scores for each ingredient\n  for (const ingredient of filteredIngredients) {\n    // Calculate elemental match (45% weight)\n    const elementalScore = calculateElementalScore((ingredient as Record<string, unknown>)?.elementalProperties, systemElementalProps);\n    \n    // Calculate planetary day influence with enhanced dignity effects (35% weight)\n    const planetaryDayScore = calculatePlanetaryDayInfluence(\n      ingredient, \n      planetaryDay, \n      planetaryAlignment\n    );\n    \n    // Calculate planetary hour influence with enhanced dignity and aspect effects (20% weight)\n    const planetaryHourScore = calculatePlanetaryHourInfluence(\n      ingredient, \n      planetaryHour, \n      isDaytimeNow,\n      planetaryAlignment,\n      aspects\n    );\n    \n    // Apply standardized weighting\n    const totalScore = (\n      elementalScore * 0.45 + \n      planetaryDayScore * 0.35 + \n      planetaryHourScore * 0.20\n    );\n    \n    // Generate ingredient-specific recommendations based on planetary influences\n    const ingredientRecommendations = generateRecommendationsForIngredient(\n      ingredient, \n      planetaryDay, \n      planetaryHour, \n      isDaytimeNow,\n      planetaryAlignment,\n      aspects\n    );\n    \n    // Add to recommendations list\n    // Apply Pattern L: Interface property mapping for IngredientRecommendation compatibility\n    const ingredientData = ingredient as Record<string, unknown>;\n    const ingredientRecommendation: IngredientRecommendation = {\n      name: ingredientData?.name || '',\n      type: ingredientData?.type || '',\n      category: ingredientData?.category,\n      elementalProperties: ingredientData?.elementalProperties,\n      qualities: ingredientData?.qualities,\n      matchScore: totalScore,\n      modality: ingredientData?.modality,\n      recommendations: ingredientRecommendations,\n      description: ingredientData?.description,\n      totalScore,\n      elementalScore: elementalScore * 0.45,\n      astrologicalScore: (planetaryDayScore * 0.35) + (planetaryHourScore * 0.20),\n      seasonalScore: ingredientData?.seasonalScore,\n      dietary: ingredientData?.dietary\n    };\n    \n    recommendations.push(ingredientRecommendation);\n  }\n  \n  // Sort by match score (highest first)\n  recommendations.sort((a, b) => b.matchScore - a.matchScore);\n  \n  // Apply limit if specified\n  const limit = options.limit || 10;\n  return recommendations.slice(0, limit);\n}\n\n/**\n * Generate enhanced recommendations for an ingredient based on planetary influences\n */\nfunction generateRecommendationsForIngredient(\n  ingredient: Ingredient,\n  planetaryDay: string,\n  planetaryHour: string,\n  isDaytime: boolean,\n  planetaryPositions?: Record<string, { sign: string; degree: number }>,\n  aspects?: Array<{ aspectType: string; planet1: string; planet2: string; }>\n): string[] {\n  const recs: string[] = [];\n  \n  // Basic recommendation based on planetary day\n  if (planetaryElements[planetaryDay]) {\n    const dayElements = planetaryElements[planetaryDay];\n    recs.push(`${(ingredient as Record<string, unknown>)?.name} works well on ${planetaryDay}'s day with its ${dayElements.diurnal} and ${dayElements.nocturnal} influences.`);\n  }\n  \n  // Time-specific recommendation based on planetary hour\n  if (planetaryElements[planetaryHour]) {\n    const hourElement = isDaytime \n      ? planetaryElements[planetaryHour].diurnal \n      : planetaryElements[planetaryHour].nocturnal;\n    \n    recs.push(`During the current hour of ${planetaryHour}, ${(ingredient as Record<string, unknown>)?.name}'s ${hourElement} properties are enhanced.`);\n  }\n  \n  // Add dignity effect recommendations if planet is in dignified or debilitated sign\n  if (planetaryPositions) {\n    // Check day planet dignity\n    if (planetaryElements[planetaryDay]?.dignityEffect && \n        planetaryPositions[planetaryDay]) {\n      const daySign = planetaryPositions[planetaryDay].sign;\n      const dayDignity = planetaryElements[planetaryDay].dignityEffect?.[daySign];\n      \n      if (dayDignity && dayDignity > 0 && (ingredient as string)?.astrologicalProfile?.rulingPlanets?.includes(planetaryDay)) {\n        recs.push(`${planetaryDay} is ${dayDignity > 1 ? 'exalted' : 'dignified'} in ${daySign}, strengthening ${(ingredient as Record<string, unknown>)?.name}'s properties.`);\n      } else if (dayDignity && dayDignity < 0 && (ingredient as string)?.astrologicalProfile?.rulingPlanets?.includes(planetaryDay)) {\n        recs.push(`${planetaryDay} is ${dayDignity < -1 ? 'in fall' : 'in detriment'} in ${daySign}, requiring careful preparation of ${(ingredient as Record<string, unknown>)?.name}.`);\n      }\n    }\n    \n    // Check hour planet dignity\n    if (planetaryElements[planetaryHour]?.dignityEffect && \n        planetaryPositions[planetaryHour]) {\n      const hourSign = planetaryPositions[planetaryHour].sign;\n      const hourDignity = planetaryElements[planetaryHour].dignityEffect?.[hourSign];\n      \n      if (hourDignity && hourDignity > 0 && (ingredient as string)?.astrologicalProfile?.rulingPlanets?.includes(planetaryHour)) {\n        recs.push(`During this hour, ${planetaryHour}'s dignity in ${hourSign} enhances ${(ingredient as Record<string, unknown>)?.name}'s flavor profile.`);\n      }\n    }\n  }\n  \n  // Add aspect-based recommendations\n  if (aspects && aspects.length > 0) {\n    const relevantAspects = aspects.filter(aspect => \n      (aspect.planet1 === planetaryDay || aspect.planet2 === planetaryDay) ||\n      (aspect.planet1 === planetaryHour || aspect.planet2 === planetaryHour));\n    \n    for (const aspect of relevantAspects) {\n      if (aspect.aspectType === 'Conjunction') {\n        const planets = [aspect.planet1, aspect.planet2];\n        if (planets.includes(planetaryDay) || planets.includes(planetaryHour)) {\n          const otherPlanet = planets.find(p => p !== planetaryDay && p !== planetaryHour);\n          if (otherPlanet && (ingredient as string)?.astrologicalProfile?.rulingPlanets?.includes(otherPlanet)) {\n            recs.push(`The conjunction between ${aspect.planet1} and ${aspect.planet2} strongly enhances ${(ingredient as Record<string, unknown>)?.name}'s qualities.`);\n          }\n        }\n      } else if (aspect.aspectType === 'Trine') {\n        const planets = [aspect.planet1, aspect.planet2];\n        if (planets.includes(planetaryDay) || planets.includes(planetaryHour)) {\n          const otherPlanet = planets.find(p => p !== planetaryDay && p !== planetaryHour);\n          if (otherPlanet && (ingredient as string)?.astrologicalProfile?.rulingPlanets?.includes(otherPlanet)) {\n            recs.push(`The harmonious trine between ${aspect.planet1} and ${aspect.planet2} creates a flowing energy for ${(ingredient as Record<string, unknown>)?.name}.`);\n          }\n        }\n      }\n    }\n  }\n  \n  // Direct planetary affinity recommendation\n  if ((ingredient as Record<string, unknown>)?.astrologicalProfile?.rulingPlanets) {\n    const rulingPlanets = (ingredient as Record<string, unknown>)?.astrologicalProfile.rulingPlanets;\n    if (rulingPlanets.includes(planetaryDay)) {\n      recs.push(`${(ingredient as Record<string, unknown>)?.name} is especially potent today as it's ruled by ${planetaryDay}.`);\n    }\n    if (rulingPlanets.includes(planetaryHour)) {\n      recs.push(`This is an optimal hour to work with ${(ingredient as Record<string, unknown>)?.name} due to ${planetaryHour}'s influence.`);\n    }\n  }\n  \n  return recs;\n}\n\n// ... existing code ...\n\n// At the top of the file, add the re-export\nexport type { EnhancedIngredientRecommendation } from './recommendation/ingredientRecommendation';\n\n// ... existing code ...\n\n// ... existing code ...\n// ... existing code ..."],"version":3}