{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/astrologizeApi.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/astrologizeApi.ts"],"sourcesContent":["import { PlanetPosition } from '@/utils/astrologyUtils';\nimport type { ZodiacSign } from '@/types/alchemy';\nimport { PlanetaryPosition } from '@/types/celestial';\nimport { astrologizeApiCircuitBreaker } from '@/utils/apiCircuitBreaker';\n\n// Use local API endpoint instead of external\nconst LOCAL_ASTROLOGIZE_API_URL = '/api/astrologize';\n\n// Interface for the local API request\ninterface LocalAstrologizeRequest {\n  year?: number;\n  month?: number; // 1-indexed for user input (January = 1, February = 2, etc.)\n  date?: number;\n  hour?: number;\n  minute?: number;\n  latitude?: number;\n  longitude?: number;\n  zodiacSystem?: 'tropical' | 'sidereal'; // Add zodiac system support\n}\n\n// Interface for planetary data from the API\ninterface AstrologizePlanetData {\n  key: string;\n  label: string;\n  Sign: {\n    key: string;\n    zodiac: string;\n    label: string;\n  };\n  ChartPosition: {\n    Ecliptic: {\n      DecimalDegrees: number;\n      ArcDegrees: {\n        degrees: number;\n        minutes: number;\n        seconds: number;\n      };\n    };\n  };\n  isRetrograde: boolean;\n}\n\n// Interface for the API response (updated to match actual astrologize API structure)\ninterface AstrologizeResponse {\n  _celestialBodies: {\n    all: AstrologizePlanetData[];\n    sun: AstrologizePlanetData;\n    moon: AstrologizePlanetData;\n    mercury: AstrologizePlanetData;\n    venus: AstrologizePlanetData;\n    mars: AstrologizePlanetData;\n    jupiter: AstrologizePlanetData;\n    saturn: AstrologizePlanetData;\n    uranus: AstrologizePlanetData;\n    neptune: AstrologizePlanetData;\n    pluto: AstrologizePlanetData;\n  };\n  birth_info: {\n    year: number;\n    month: number;\n    date: number;\n    hour: number;\n    minute: number;\n    latitude: number;\n    longitude: number;\n    ayanamsa: string;\n  };\n}\n\n// Default location (New York City)\nconst DEFAULT_LOCATION = {\n  latitude: 40.7498,\n  longitude: -73.7976,\n};\n\n/**\n * Get current date/time/location for astrology API\n */\nfunction getCurrentDateTimeLocation(customLocation?: {\n  latitude: number;\n  longitude: number;\n}) {\n  const now = new Date();\n  return {\n    year: now.getFullYear(),\n    month: now.getMonth() + 1, // Convert to 1-indexed for local API\n    date: now.getDate(),\n    hour: now.getHours(),\n    minute: now.getMinutes(),\n    latitude: customLocation?.latitude ?? DEFAULT_LOCATION.latitude,\n    longitude: customLocation?.longitude ?? DEFAULT_LOCATION.longitude,\n    zodiacSystem: 'tropical' as const, // Default to tropical zodiac\n  };\n}\n\n/**\n * Convert sign name from API to our format\n */\nfunction normalizeSignName(signName: string): ZodiacSign {\n  const signMap: { [key: string]: ZodiacSign } = {\n    aries: 'aries',\n    taurus: 'taurus',\n    gemini: 'gemini',\n    cancer: 'cancer',\n    leo: 'leo',\n    virgo: 'virgo',\n    libra: 'libra',\n    scorpio: 'scorpio',\n    sagittarius: 'sagittarius',\n    capricorn: 'capricorn',\n    aquarius: 'aquarius',\n    pisces: 'pisces',\n  };\n\n  const normalized = signName?.toLowerCase() as ZodiacSign;\n  return signMap[normalized] || 'aries';\n}\n\n/**\n * Calculate exact longitude from decimal degrees\n */\nfunction calculateExactLongitude(decimalDegrees: number): number {\n  // Normalize to 0-360 range\n  return ((decimalDegrees % 360) + 360) % 360;\n}\n\n/**\n * Call the local astrologize API to get planetary positions with circuit breaker\n */\nexport async function fetchPlanetaryPositions(\n  customDateTime?: Partial<LocalAstrologizeRequest>\n): Promise<Record<string, PlanetPosition>> {\n  const fallbackPositions = (): Record<string, PlanetPosition> => {\n    console.log('Using fallback planetary positions due to API failure');\n    return {\n      Sun: {\n        sign: 'gemini',\n        degree: 13,\n        minute: 54,\n        exactLongitude: 73.9,\n        isRetrograde: false,\n      },\n      moon: {\n        sign: 'virgo',\n        degree: 26,\n        minute: 31,\n        exactLongitude: 176.52,\n        isRetrograde: false,\n      },\n      Mercury: {\n        sign: 'gemini',\n        degree: 20,\n        minute: 11,\n        exactLongitude: 80.18,\n        isRetrograde: false,\n      },\n      Venus: {\n        sign: 'aries',\n        degree: 28,\n        minute: 6,\n        exactLongitude: 28.1,\n        isRetrograde: false,\n      },\n      Mars: {\n        sign: 'leo',\n        degree: 22,\n        minute: 48,\n        exactLongitude: 142.8,\n        isRetrograde: false,\n      },\n      Jupiter: {\n        sign: 'gemini',\n        degree: 28,\n        minute: 44,\n        exactLongitude: 88.73,\n        isRetrograde: false,\n      },\n      Saturn: {\n        sign: 'aries',\n        degree: 0,\n        minute: 41,\n        exactLongitude: 0.68,\n        isRetrograde: false,\n      },\n      Uranus: {\n        sign: 'taurus',\n        degree: 28,\n        minute: 17,\n        exactLongitude: 58.28,\n        isRetrograde: false,\n      },\n      Neptune: {\n        sign: 'aries',\n        degree: 1,\n        minute: 55,\n        exactLongitude: 1.92,\n        isRetrograde: false,\n      },\n      Pluto: {\n        sign: 'aquarius',\n        degree: 3,\n        minute: 36,\n        exactLongitude: 303.6,\n        isRetrograde: true,\n      },\n      Ascendant: {\n        sign: 'aries',\n        degree: 16,\n        minute: 16,\n        exactLongitude: 16.27,\n        isRetrograde: false,\n      },\n    };\n  };\n\n  return astrologizeApiCircuitBreaker.call(async () => {\n    // Get current date/time or use provided values\n    const defaultDateTime = getCurrentDateTimeLocation();\n    const requestData: LocalAstrologizeRequest = {\n      ...defaultDateTime,\n      ...customDateTime,\n    };\n\n    console.log('Calling local astrologize API with:', requestData);\n\n    // Determine if we should use GET or POST\n    const isCurrentTime =\n      !customDateTime || Object.keys(customDateTime).length === 0;\n\n    let response: Response;\n\n    if (isCurrentTime) {\n      // Use GET for current time with query parameters\n      const params = new URLSearchParams();\n      if (requestData.latitude)\n        params.append('latitude', requestData.latitude.toString());\n      if (requestData.longitude)\n        params.append('longitude', requestData.longitude.toString());\n      if (requestData.zodiacSystem)\n        params.append('zodiacSystem', requestData.zodiacSystem);\n\n      const url = `${LOCAL_ASTROLOGIZE_API_URL}?${params.toString()}`;\n      response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        signal: AbortSignal.timeout(5000), // 5 second timeout for faster fallback\n      });\n    } else {\n      // Use POST for custom date/time\n      response = await fetch(LOCAL_ASTROLOGIZE_API_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestData),\n        signal: AbortSignal.timeout(5000), // 5 second timeout for faster fallback\n      });\n    }\n\n    if (!response.ok) {\n      throw new Error(\n        `API request failed: ${response.status} ${response.statusText}`\n      );\n    }\n\n    const data: AstrologizeResponse = await response.json();\n\n    // Extract planetary positions from the new API structure\n    const celestialBodies = data?._celestialBodies;\n\n    if (!celestialBodies) {\n      throw new Error('Invalid API response structure');\n    }\n\n    const positions: { [key: string]: PlanetPosition } = {};\n\n    // Process each planet from the celestial bodies\n    const planetMap = {\n      sun: 'Sun',\n      moon: 'Moon',\n      mercury: 'Mercury',\n      venus: 'Venus',\n      mars: 'Mars',\n      jupiter: 'Jupiter',\n      saturn: 'Saturn',\n      uranus: 'Uranus',\n      neptune: 'Neptune',\n      pluto: 'Pluto',\n    };\n\n    Object.entries(planetMap).forEach(([apiKey, planetName]) => {\n      const planetData = celestialBodies[apiKey as keyof typeof planetMap];\n      if (planetData) {\n        const sign = normalizeSignName(planetData.Sign.key);\n        const decimalDegrees = planetData.ChartPosition.Ecliptic.DecimalDegrees;\n        const arcDegrees = planetData.ChartPosition.Ecliptic.ArcDegrees;\n\n        positions[planetName] = {\n          sign,\n          degree: arcDegrees.degrees,\n          minute: arcDegrees.minutes,\n          exactLongitude: calculateExactLongitude(decimalDegrees),\n          isRetrograde: planetData.isRetrograde || false,\n        };\n      }\n    });\n\n    // For now, calculate Ascendant from the response if available\n    // This should be extracted from the actual API response in future updates\n    positions['Ascendant'] = {\n      sign: 'aries',\n      degree: 16,\n      minute: 16,\n      exactLongitude: 16.27,\n      isRetrograde: false,\n    };\n\n    console.log(\n      'Successfully fetched planetary positions from local API:',\n      Object.keys(positions)\n    );\n    console.log(\n      '🌟 Using',\n      data.birth_info?.ayanamsa || 'TROPICAL',\n      'zodiac system'\n    );\n    return positions;\n  }, fallbackPositions);\n}\n\n/**\n * Get planetary positions for the current moment\n */\nexport async function getCurrentPlanetaryPositions(\n  location?: { latitude: number; longitude: number },\n  zodiacSystem: 'tropical' | 'sidereal' = 'tropical'\n): Promise<Record<string, PlanetPosition>> {\n  return await fetchPlanetaryPositions({\n    ...location,\n    zodiacSystem,\n  });\n}\n\n/**\n * Get planetary positions for a specific date/time\n */\nexport async function getPlanetaryPositionsForDateTime(\n  date: Date,\n  location?: { latitude: number; longitude: number },\n  zodiacSystem: 'tropical' | 'sidereal' = 'tropical'\n): Promise<Record<string, PlanetPosition>> {\n  return await fetchPlanetaryPositions({\n    year: date.getFullYear(),\n    month: date.getMonth() + 1, // Convert to 1-indexed for local API\n    date: date.getDate(),\n    hour: date.getHours(),\n    minute: date.getMinutes(),\n    zodiacSystem,\n    ...location,\n  });\n}\n\n/**\n * Test the astrologize API connection\n */\nexport async function testAstrologizeApi(): Promise<boolean> {\n  try {\n    const positions = await fetchPlanetaryPositions();\n    return Object.keys(positions || {}).length > 0;\n  } catch (error) {\n    console.error('Astrologize API test failed:', error);\n    return false;\n  }\n}\n\n/**\n * Get current chart data (alias for getCurrentPlanetaryPositions)\n */\nexport async function getCurrentChart(\n  location?: { latitude: number; longitude: number },\n  zodiacSystem: 'tropical' | 'sidereal' = 'tropical'\n): Promise<Record<string, PlanetPosition>> {\n  return await getCurrentPlanetaryPositions(location, zodiacSystem);\n}\n"],"version":3}