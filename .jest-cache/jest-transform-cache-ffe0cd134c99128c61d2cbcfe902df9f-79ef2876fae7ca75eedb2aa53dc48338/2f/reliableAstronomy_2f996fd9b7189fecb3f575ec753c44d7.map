{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/reliableAstronomy.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/reliableAstronomy.ts"],"sourcesContent":["/**\n * Reliable Astronomy Data Provider \n * \n * This module fetches accurate planetary positions from NASA JPL's Horizons API\n * with robust fallback mechanisms when API calls fail.\n */\n\nimport { CelestialPosition } from '@/types/celestial';\nimport { logger } from '@/utils/logger';\nimport { getMCPServerIntegration } from '@/utils/mcpServerIntegration';\n\n// Cache system to avoid frequent API calls\ninterface PositionsCache {\n  positions: Record<string, unknown>;\n  timestamp: number;\n  date: string;\n}\n\nlet positionsCache: PositionsCache | null = null;\nconst CACHE_DURATION = 6 * 60 * 60 * 1000; // 6 hours\n\n/**\n * Fetch accurate planetary positions from JPL Horizons API\n */\nexport async function getReliablePlanetaryPositions(date: Date = new Date()): Promise<Record<string, unknown>> {\n  try {\n    // Format date for cache key \n    const dateString = date.toISOString().split('T')[0];\n    \n    // Check cache first\n    if (positionsCache && \n        positionsCache.date === dateString && \n        (Date.now() - positionsCache.timestamp) < CACHE_DURATION) {\n      logger.debug('Using cached planetary positions');\n      return positionsCache.positions;\n    }\n    \n    // Primary: Try MCP server integration first\n    try {\n      logger.debug('Fetching planetary positions via MCP server integration');\n      const mcp = getMCPServerIntegration();\n      const mcpResult = await mcp.getAstrologicalData(date);\n      \n      if (mcpResult.success && mcpResult.data) {\n        // Cache the successful result\n        positionsCache = {\n          positions: mcpResult.data,\n          timestamp: Date.now(),\n          date: dateString\n        };\n        \n        logger.debug(`Planetary positions fetched via MCP (${mcpResult.source})`);\n        return mcpResult.data;\n      }\n    } catch (error) {\n      logger.warn('MCP server integration failed:', error);\n      // Continue to direct API calls\n    }\n\n    // Secondary: Call NASA JPL Horizons API directly\n    try {\n      logger.debug('Fetching planetary positions from NASA JPL Horizons API');\n      const positions = await fetchHorizonsData(date);\n      \n      if (positions && Object.keys(positions).length > 0) {\n        // Cache the successful result\n        positionsCache = {\n          positions,\n          timestamp: Date.now(),\n          date: dateString\n        };\n        \n        return positions;\n      }\n    } catch (error) {\n      logger.error('Error fetching from NASA JPL Horizons:', error);\n      // Continue to tertiary API\n    }\n    \n    // Secondary: Try public API\n    try {\n      logger.debug('Fetching planetary positions from public astronomy API');\n      const positions = await fetchPublicApiData(date);\n      \n      if (positions && Object.keys(positions).length > 0) {\n        // Cache the successful result\n        positionsCache = {\n          positions,\n          timestamp: Date.now(),\n          date: dateString\n        };\n        \n        return positions;\n      }\n    } catch (error) {\n      logger.error('Error fetching from public API:', error);\n      // Continue to third API\n    }\n    \n    // Tertiary: Try TimeAndDate.com API if credentials are available\n    if (process.env.TIMEANDDATE_API_KEY && process.env.TIMEANDDATE_API_SECRET) {\n      try {\n        logger.debug('Fetching planetary positions from TimeAndDate.com API');\n        const positions = await fetchTimeAndDateData(date);\n        \n        if (positions && Object.keys(positions).length > 0) {\n          // Cache the successful result\n          positionsCache = {\n            positions,\n            timestamp: Date.now(),\n            date: dateString\n          };\n          \n          return positions;\n        }\n      } catch (error) {\n        logger.error('Error fetching from TimeAndDate.com API:', error);\n        // Continue to fallback\n      }\n    }\n    \n    // All APIs failed, use fallback\n    throw new Error('All API sources failed');\n  } catch (error) {\n    logger.error('Error fetching planetary positions:', error);\n    \n    // Use the updated positions\n    logger.debug('Using hardcoded accurate planetary positions for March 2025');\n    return getMarch2025Positions(date);\n  }\n}\n\n/**\n * Fetch data from NASA JPL Horizons API\n */\nasync function fetchHorizonsData(date: Date): Promise<Record<string, unknown>> {\n  // Format the date for Horizons API (YYYY-MMM-DD)\n  const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  const horizonsDate = `${date.getFullYear()}-${months[date.getMonth()]}-${date.getDate().toString().padStart(2, '0')}`;\n\n  // Initialize positions object\n  const positions: Record<string, unknown> = {};\n  \n  // List of major planets with their Horizons object IDs\n  const planets = [\n    { name: 'Sun', id: '10' },\n    { name: 'Moon', id: '301' },\n    { name: 'Mercury', id: '199' },\n    { name: 'Venus', id: '299' },\n    { name: 'Mars', id: '499' },\n    { name: 'Jupiter', id: '599' },\n    { name: 'Saturn', id: '699' },\n    { name: 'Uranus', id: '799' },\n    { name: 'Neptune', id: '899' },\n    { name: 'Pluto', id: '999' }\n  ];\n\n  try {\n    // Batch approach with Promise.all for parallel requests\n    const planetRequests = planets.map(async (planet) => {\n      try {\n        // Construct request URL for each planet\n        const url = `https://ssd.jpl.nasa.gov/api/horizons.api?format=json&COMMAND='${planet.id}'&OBJ_DATA='YES'&MAKE_EPHEM='YES'&EPHEM_TYPE='OBSERVER'&CENTER='500@399'&START_TIME='${horizonsDate}'&STOP_TIME='${horizonsDate}'&STEP_SIZE='1d'&QUANTITIES='31'`;\n        \n        // Add a timeout to the fetch \n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), 5000);\n\n        const response = await fetch(url, { signal: controller.signal });\n        clearTimeout(timeoutId);\n\n        if (!response.ok) {\n          throw new Error(`HTTP error ${response.status}`);\n        }\n\n        const data = await response.json();\n        \n        // Process and extract the ecliptic longitude from the response\n        if (data && data.result) {\n          const result = processHorizonsResponse(data.result, planet.name);\n          if (result) {\n            positions[planet.name] = result;\n          }\n        }\n      } catch (error) {\n        logger.error(`Error fetching ${planet.name} position:`, error);\n        // Individual planet fetch failures don't fail the whole batch\n      }\n    });\n\n    // Wait for all requests to complete\n    await Promise.all(planetRequests);\n    \n    // If we didn't get any planets, throw an error\n    if (Object.keys(positions).length === 0) {\n      throw new Error('Failed to fetch any planetary positions');\n    }\n    \n    // Add lunar nodes\n    positions.northNode = calculateLunarNode(date, 'northNode');\n    positions.southNode = calculateLunarNode(date, 'southNode');\n    \n    return positions;\n  } catch (error) {\n    logger.error('Error in batch planet fetching:', error);\n    throw error;\n  }\n}\n\n/**\n * Extract planetary position from Horizons API response\n */\nfunction processHorizonsResponse(result: string, planetName: string): unknown {\n  try {\n    // Extract the ecliptic longitude from the result\n    // Horizons returns a text output that we need to parse\n    const lines = result.split('\\n');\n    \n    // Find the line with ecliptic longitude data\n    const eclipticLine = lines.find(line => line.includes('ecliptic'));\n    \n    if (!eclipticLine) {\n      throw new Error(`Could not find ecliptic longitude data for ${planetName}`);\n    }\n    \n    // Extract the longitude value\n    const longMatch = eclipticLine.match(/(\\d+\\.\\d+)/);\n    if (!longMatch) {\n      throw new Error(`Could not parse longitude for ${planetName}`);\n    }\n    \n    const exactLongitude = parseFloat(longMatch[1]);\n    \n    // Get zodiac sign based on longitude\n    const { sign, degree } = getLongitudeToZodiacSign(exactLongitude);\n    \n    // Check for retrograde motion\n    const retroLine = lines.find(line => line.includes('retrograde'));\n    const isRetrograde = !!retroLine && retroLine.includes('Yes');\n    \n    return {\n      sign,\n      degree,\n      exactLongitude,\n      isRetrograde\n    };\n  } catch (error) {\n    logger.error(`Error processing ${planetName} data:`, error);\n    return null;\n  }\n}\n\n/**\n * Convert longitude to zodiac sign\n */\nfunction getLongitudeToZodiacSign(longitude: number): { sign: string, degree: number } {\n  // Normalize longitude to 0-360 range\n  const normalized = ((longitude % 360) + 360) % 360;\n  \n  // Calculate sign index and degree\n  const signIndex = Math.floor(normalized / 30);\n  const degree = normalized % 30;\n  \n  // Get sign name\n  const signs = [\n    'aries', 'taurus', 'gemini', 'cancer', 'leo', 'virgo',\n    'libra', 'scorpio', 'sagittarius', 'capricorn', 'aquarius', 'pisces'\n  ];\n  \n  return {\n    sign: signs[signIndex],\n    degree: Math.round(degree * 100) / 100 // Round to 2 decimal places\n  };\n}\n\n/**\n * Calculate lunar nodes position\n */\nfunction calculateLunarNode(date: Date, nodeType: 'northNode' | 'southNode'): unknown {\n  try {\n    // Calculate lunar nodes using simplified Meeus formula\n    const jd = dateToJulian(date);\n    const T = (jd - 2451545.0) / 36525;\n    \n    // Mean longitude of ascending node (Meeus formula)\n    let Omega = 125.04452 - 1934.136261 * T + 0.0020708 * T*T + T*T*T/450000;\n    \n    // Normalize to 0-360 range\n    Omega = ((Omega % 360) + 360) % 360;\n    \n    // North node is opposite of Omega, South node is same as Omega\n    const longitude = nodeType === 'northNode' ? (Omega + 180) % 360 : Omega;\n    \n    // Get zodiac sign\n    const { sign, degree } = getLongitudeToZodiacSign(longitude);\n    \n    return {\n      sign,\n      degree,\n      exactLongitude: longitude,\n      isRetrograde: true // Both nodes are always retrograde\n    };\n  } catch (error) {\n    logger.error(`Error calculating ${nodeType}:`, error);\n    \n    // Return fixed values from March 2025\n    if (nodeType === 'northNode') {\n      return { sign: 'pisces', degree: 26.54, exactLongitude: 356.54, isRetrograde: true };\n    } else {\n      return { sign: 'virgo', degree: 26.54, exactLongitude: 176.54, isRetrograde: true };\n    }\n  }\n}\n\n/**\n * Convert Date to Julian date\n */\nfunction dateToJulian(date: Date): number {\n  const time = date.getTime();\n  return (time / 86400000) + 2440587.5;\n}\n\n/**\n * Return reliable planetary positions for March 2025\n * These values are accurate as of March 28, 2025\n */\nfunction getMarch2025Positions(date: Date | any = new Date()): Record<string, unknown> {\n  // Ensure date is a valid Date object\n  const validDate = date instanceof Date && !isNaN(date.getTime()) \n    ? date \n    : new Date();\n  \n  // Current accurate positions as of March 28, 2025\n  const positions: Record<string, unknown> = {\n    sun: { sign: 'aries', degree: 8.5, exactLongitude: 8.5, isRetrograde: false },\n    moon: { sign: 'aries', degree: 1.57, exactLongitude: 1.57, isRetrograde: false },\n    mercury: { sign: 'aries', degree: 0.85, exactLongitude: 0.85, isRetrograde: true },\n    venus: { sign: 'pisces', degree: 29.08, exactLongitude: 359.08, isRetrograde: true },\n    mars: { sign: 'cancer', degree: 22.63, exactLongitude: 112.63, isRetrograde: false },\n    jupiter: { sign: 'gemini', degree: 15.52, exactLongitude: 75.52, isRetrograde: false },\n    saturn: { sign: 'pisces', degree: 24.12, exactLongitude: 354.12, isRetrograde: false },\n    uranus: { sign: 'taurus', degree: 24.62, exactLongitude: 54.62, isRetrograde: false },\n    neptune: { sign: 'pisces', degree: 29.93, exactLongitude: 359.93, isRetrograde: false },\n    pluto: { sign: 'aquarius', degree: 3.5, exactLongitude: 333.5, isRetrograde: false },\n    northNode: { sign: 'pisces', degree: 26.88, exactLongitude: 356.88, isRetrograde: true },\n    southNode: { sign: 'virgo', degree: 26.88, exactLongitude: 176.88, isRetrograde: true },\n    ascendant: { sign: 'libra', degree: 7.82, exactLongitude: 187.82, isRetrograde: false }\n  };\n  \n  return positions;\n}\n\n/**\n * Fetch data from a public astronomy API\n * This API doesn't require authentication\n */\nasync function fetchPublicApiData(date: Date): Promise<Record<string, unknown>> {\n  try {\n    // Format date YYYY-MM-DD\n    const formattedDate = date.toISOString().split('T')[0];\n    \n    // Use the Swiss Ephemeris API wrapper by AstrologyAPI.com\n    const url = `https://json.astrologyapi.com/v1/planets/tropical/geo/${formattedDate}`;\n    \n    // Add a timeout to the fetch request\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout\n    \n    // Wrap the entire fetch operation in a try/catch\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: controller.signal\n      });\n      \n      // Clear the timeout\n      clearTimeout(timeoutId);\n      \n      if (!response.ok) {\n        throw new Error(`Public API error: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      \n      // Process the response\n      const positions: Record<string, unknown> = {};\n      \n      // Map of planet names to standardize\n      const planetNameMap: Record<string, string> = {\n        'sun': 'Sun',\n        'moon': 'Moon',\n        'mercury': 'Mercury',\n        'venus': 'Venus',\n        'mars': 'Mars',\n        'jupiter': 'Jupiter',\n        'saturn': 'Saturn',\n        'uranus': 'Uranus',\n        'neptune': 'Neptune',\n        'pluto': 'Pluto',\n        'rahu': 'northNode', // Rahu is North Node in Vedic astrology\n        'ketu': 'southNode'  // Ketu is South Node in Vedic astrology\n      };\n      \n      // Process each planet\n      if (data && Array.isArray(data)) {\n        data.forEach((planet: unknown) => {\n          const planetData = planet as any;\n          if (planetData?.name && planetData?.longitude !== undefined && planetNameMap[planetData.name.toLowerCase()]) {\n            const standardName = planetNameMap[planetData.name.toLowerCase()];\n            const exactLongitude = parseFloat(planetData.longitude);\n            const { sign, degree } = getLongitudeToZodiacSign(exactLongitude);\n            \n            positions[standardName] = {\n              sign,\n              degree,\n              exactLongitude,\n              isRetrograde: planetData?.isRetrograde === true\n            };\n          }\n        });\n      }\n      \n      // Ensure all planets are represented\n      const requiredPlanets = ['Sun', 'Moon', 'Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune', 'Pluto', 'northNode', 'southNode'];\n      let missingCount = 0;\n      \n      requiredPlanets.forEach(planet => {\n        if (!positions[planet]) {\n          missingCount++;\n          // For missing planets, add a placeholder with approximate positions from March 2025\n          const marchPositions = getMarch2025Positions();\n          if (marchPositions[planet]) {\n            positions[planet] = marchPositions[planet];\n          }\n        }\n      });\n      \n      // If too many planets are missing, the data might be unreliable\n      if (missingCount > 3) {\n        console.warn(`Too many planets missing (${missingCount}), using fallback data`);\n        return getMarch2025Positions(date);\n      }\n      \n      return positions;\n    } catch (fetchError) {\n      // Clear the timeout to avoid memory leaks\n      clearTimeout(timeoutId);\n      \n      logger.error('Fetch operation failed:', fetchError);\n      // Let the outer try/catch handle this\n      throw fetchError;\n    }\n  } catch (error) {\n    logger.error('Error in fetchPublicApiData:', error);\n    // Instead of propagating the error, return the fallback positions\n    return getMarch2025Positions(date);\n  }\n}\n\n/**\n * Alternative source: Time and Date Astronomy API\n */\nasync function fetchTimeAndDateData(date: Date): Promise<Record<string, unknown>> {\n  try {\n    // Ensure we have the API credentials\n    const apiKey = process.env.TIMEANDDATE_API_KEY;\n    const apiSecret = process.env.TIMEANDDATE_API_SECRET;\n    \n    if (!apiKey || !apiSecret) {\n      console.warn('TimeAndDate API credentials not found');\n      return getMarch2025Positions(date);\n    }\n    \n    // Format date YYYY-MM-DD\n    const formattedDate = date.toISOString().split('T')[0];\n    \n    // Base URL for TimeAndDate Astronomy API\n    const baseUrl = 'https://api.timeanddate.com/v3/astronomy';\n    \n    // Authorization token\n    const auth = Buffer.from(`${apiKey}:${apiSecret}`).toString('base64');\n    \n    // Add a timeout to the fetch request\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout\n    \n    try {\n      // Make the request with authorization\n      const response = await fetch(`${baseUrl}/positions?object=sun,moon,mercury,venus,mars,jupiter,saturn,uranus,neptune,pluto&date=${formattedDate}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Basic ${auth}`,\n          'Content-Type': 'application/json'\n        },\n        signal: controller.signal\n      });\n      \n      // Clear the timeout\n      clearTimeout(timeoutId);\n      \n      if (!response.ok) {\n        throw new Error(`TimeAndDate API error: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      \n      // Process the response\n      const positions: Record<string, unknown> = {};\n      \n      if (data && data.objects && Array.isArray(data.objects)) {\n        data.objects.forEach((obj: unknown) => {\n          const objData = obj as any;\n          if (objData?.name && objData?.position && typeof objData.position?.eclipticLongitude === 'number') {\n            const planetName = objData.name.charAt(0).toUpperCase() + objData.name.slice(1);\n            const { sign, degree } = getLongitudeToZodiacSign(objData.position.eclipticLongitude);\n            \n            positions[planetName] = {\n              sign,\n              degree,\n              exactLongitude: objData.position.eclipticLongitude,\n              isRetrograde: objData.position?.isRetrograde === true\n            };\n          }\n        });\n      }\n      \n      // Check if we received sufficient data\n      const requiredPlanets = ['Sun', 'Moon', 'Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune', 'Pluto'];\n      let missingCount = 0;\n      \n      requiredPlanets.forEach(planet => {\n        if (!positions[planet]) {\n          missingCount++;\n          // For missing planets, add a placeholder with approximate positions from March 2025\n          const marchPositions = getMarch2025Positions();\n          if (marchPositions[planet]) {\n            positions[planet] = marchPositions[planet];\n          }\n        }\n      });\n      \n      // If too many planets are missing, the data might be unreliable\n      if (missingCount > 3) {\n        console.warn(`Too many planets missing (${missingCount}), using fallback data`);\n        return getMarch2025Positions(date);\n      }\n      \n      // Add lunar nodes (TimeAndDate API doesn't provide these)\n      try {\n        positions.northNode = calculateLunarNode(date, 'northNode');\n        positions.southNode = calculateLunarNode(date, 'southNode');\n      } catch (nodeError) {\n        console.warn('Error calculating lunar nodes:', nodeError);\n        // Use fallback data for nodes\n        const fallback = getMarch2025Positions();\n        positions.northNode = fallback.northNode;\n        positions.southNode = fallback.southNode;\n      }\n      \n      return positions;\n    } catch (fetchError) {\n      // Clear the timeout to avoid memory leaks\n      clearTimeout(timeoutId);\n      \n      logger.error('Fetch operation failed:', fetchError);\n      // Let the outer try/catch handle this\n      throw fetchError;\n    }\n  } catch (error) {\n    logger.error('Error in TimeAndDate API:', error);\n    // Instead of propagating the error, return fallback positions\n    return getMarch2025Positions(date);\n  }\n} "],"version":3}