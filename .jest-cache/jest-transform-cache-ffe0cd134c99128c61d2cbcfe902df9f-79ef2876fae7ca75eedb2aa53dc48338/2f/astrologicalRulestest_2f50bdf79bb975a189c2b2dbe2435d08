33b37daee5c02748b5d0633dfde0d25c
"use strict";
/**
 * Test file for custom astrological ESLint rules
 *
 * This file tests the domain-specific linting rules to ensure they properly
 * validate astrological calculations, planetary positions, and elemental properties.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const elementalValidation_1 = require("../elementalValidation");
const astrologicalValidation_1 = require("../astrologicalValidation");
describe('Astrological ESLint Rules Integration', () => {
    describe('Elemental Properties Validation', () => {
        test('validates correct elemental properties structure', () => {
            const validProperties = {
                Fire: 0.4,
                Water: 0.3,
                Earth: 0.2,
                Air: 0.1
            };
            expect((0, elementalValidation_1.validateElementalProperties)(validProperties)).toBe(true);
        });
        test('rejects invalid elemental properties', () => {
            const invalidProperties = {
                Fire: 1.5,
                Water: -0.1,
                Earth: 0.2
                // Missing Air
            };
            expect((0, elementalValidation_1.validateElementalProperties)(invalidProperties)).toBe(false);
        });
        test('normalizes partial elemental properties', () => {
            const partialProperties = {
                Fire: 0.8,
                Water: 0.2
            };
            const normalized = (0, elementalValidation_1.normalizeElementalProperties)(partialProperties);
            expect(normalized).toHaveProperty('Fire', 0.8);
            expect(normalized).toHaveProperty('Water', 0.2);
            expect(normalized).toHaveProperty('Earth', 0.25); // Default
            expect(normalized).toHaveProperty('Air', 0.25); // Default
        });
    });
    describe('Planetary Position Validation', () => {
        test('validates correct planetary positions structure', () => {
            const validPositions = {
                sun: { sign: 'aries', degree: 15.5, exactLongitude: 15.5, isRetrograde: false },
                moon: { sign: 'taurus', degree: 22.3, exactLongitude: 52.3, isRetrograde: false },
                mercury: { sign: 'gemini', degree: 8.7, exactLongitude: 68.7, isRetrograde: true }
            };
            const result = (0, astrologicalValidation_1.validatePlanetaryPositions)(validPositions);
            expect(result.isValid).toBe(true);
            expect(result.errors).toHaveLength(0);
        });
        test('detects missing required properties', () => {
            const invalidPositions = {
                sun: { sign: 'aries', degree: 15.5 },
                moon: { degree: 22.3, exactLongitude: 52.3, isRetrograde: false } // Missing sign
            };
            const result = (0, astrologicalValidation_1.validatePlanetaryPositions)(invalidPositions);
            expect(result.isValid).toBe(false);
            expect(result.errors.length).toBeGreaterThan(0);
        });
        test('validates degree ranges', () => {
            const invalidPositions = {
                sun: { sign: 'aries', degree: 35.0, exactLongitude: 35.0, isRetrograde: false },
                moon: { sign: 'taurus', degree: -5.0, exactLongitude: 325.0, isRetrograde: false } // Invalid degree < 0
            };
            const result = (0, astrologicalValidation_1.validatePlanetaryPositions)(invalidPositions, { strictMode: false });
            expect(result.warnings.length).toBeGreaterThan(0);
        });
    });
    describe('Quick Validation Functions', () => {
        test('quick validate planetary positions', () => {
            const validPositions = {
                sun: { sign: 'aries', degree: 15.5, exactLongitude: 15.5, isRetrograde: false }
            };
            expect((0, astrologicalValidation_1.quickValidate)(validPositions, 'planetary')).toBe(true);
        });
        test('quick validate elemental properties', () => {
            const validProperties = {
                Fire: 0.4,
                Water: 0.3,
                Earth: 0.2,
                Air: 0.1
            };
            expect((0, astrologicalValidation_1.quickValidate)(validProperties, 'elemental')).toBe(true);
        });
        test('quick validate mathematical constants', () => {
            const validConstants = {
                DEGREES_PER_SIGN: 30,
                SIGNS_PER_CIRCLE: 12,
                MAX_LONGITUDE: 360
            };
            expect((0, astrologicalValidation_1.quickValidate)(validConstants, 'constants')).toBe(true);
        });
    });
    describe('Mathematical Constants Preservation', () => {
        // These constants should be preserved by the ESLint rules
        const DEGREES_PER_SIGN = 30;
        const SIGNS_PER_CIRCLE = 12;
        const MAX_LONGITUDE = 360;
        const FALLBACK_POSITIONS = {
            sun: { sign: 'aries', degree: 8.5, exactLongitude: 8.5, isRetrograde: false }
        };
        test('mathematical constants maintain correct values', () => {
            expect(DEGREES_PER_SIGN).toBe(30);
            expect(SIGNS_PER_CIRCLE).toBe(12);
            expect(MAX_LONGITUDE).toBe(360);
        });
        test('fallback positions structure is preserved', () => {
            expect(FALLBACK_POSITIONS.sun).toHaveProperty('sign');
            expect(FALLBACK_POSITIONS.sun).toHaveProperty('degree');
            expect(FALLBACK_POSITIONS.sun).toHaveProperty('exactLongitude');
            expect(FALLBACK_POSITIONS.sun).toHaveProperty('isRetrograde');
        });
    });
    describe('Domain-Specific Variable Patterns', () => {
        test('preserves astrological variable naming patterns', () => {
            // These variables should be allowed by the custom rules
            const planetPosition = { sign: 'aries', degree: 15.0, exactLongitude: 15.0, isRetrograde: false };
            const degreeValue = 15.5;
            const signName = 'aries';
            const longitudeCalculation = 45.7;
            expect(planetPosition).toBeDefined();
            expect(degreeValue).toBeDefined();
            expect(signName).toBeDefined();
            expect(longitudeCalculation).toBeDefined();
        });
        test('preserves fallback and reliability patterns', () => {
            // These variables should be allowed by the custom rules
            const FALLBACK_DATA = { sun: { sign: 'aries', degree: 0, exactLongitude: 0, isRetrograde: false } };
            const RELIABLE_POSITIONS = { moon: { sign: 'taurus', degree: 15, exactLongitude: 45, isRetrograde: false } };
            const TRANSIT_DATES = { aries: { Start: '2024-03-20', End: '2024-04-19' } };
            const DEFAULT_VALUES = { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 };
            expect(FALLBACK_DATA).toBeDefined();
            expect(RELIABLE_POSITIONS).toBeDefined();
            expect(TRANSIT_DATES).toBeDefined();
            expect(DEFAULT_VALUES).toBeDefined();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy91dGlscy9hc3Ryb2xvZ3kvX190ZXN0c19fL2FzdHJvbG9naWNhbFJ1bGVzLnRlc3QudHMiLCJtYXBwaW5ncyI6IjtBQUFBOzs7OztHQUtHOztBQUVILGdFQUFtRztBQUVuRyxzRUFBc0Y7QUFFdEYsUUFBUSxDQUFDLHVDQUF1QyxFQUFFLEdBQUcsRUFBRTtJQUNyRCxRQUFRLENBQUMsaUNBQWlDLEVBQUUsR0FBRyxFQUFFO1FBQy9DLElBQUksQ0FBQyxrREFBa0QsRUFBRSxHQUFHLEVBQUU7WUFDNUQsTUFBTSxlQUFlLEdBQUc7Z0JBQ3RCLElBQUksRUFBRSxHQUFHO2dCQUNULEtBQUssRUFBRSxHQUFHO2dCQUNWLEtBQUssRUFBRSxHQUFHO2dCQUNWLEdBQUcsRUFBRSxHQUFHO2FBQ1QsQ0FBQztZQUVGLE1BQU0sQ0FBQyxJQUFBLGlEQUEyQixFQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xFLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLHNDQUFzQyxFQUFFLEdBQUcsRUFBRTtZQUNoRCxNQUFNLGlCQUFpQixHQUFHO2dCQUN4QixJQUFJLEVBQUUsR0FBRztnQkFDVCxLQUFLLEVBQUUsQ0FBQyxHQUFHO2dCQUNYLEtBQUssRUFBRSxHQUFHO2dCQUNWLGNBQWM7YUFDZixDQUFDO1lBRUYsTUFBTSxDQUFDLElBQUEsaURBQTJCLEVBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyRSxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyx5Q0FBeUMsRUFBRSxHQUFHLEVBQUU7WUFDbkQsTUFBTSxpQkFBaUIsR0FBRztnQkFDeEIsSUFBSSxFQUFFLEdBQUc7Z0JBQ1QsS0FBSyxFQUFFLEdBQUc7YUFDWCxDQUFDO1lBRUYsTUFBTSxVQUFVLEdBQUcsSUFBQSxrREFBNEIsRUFBQyxpQkFBaUIsQ0FBQyxD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TUFBTSxjQUFjLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUM7WUFFM0UsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3BDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3pDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNwQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDdkMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9HcmVnQ2FzdHJvL0Rlc2t0b3AvV2hhdFRvRWF0TmV4dC9zcmMvdXRpbHMvYXN0cm9sb2d5L19fdGVzdHNfXy9hc3Ryb2xvZ2ljYWxSdWxlcy50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGVzdCBmaWxlIGZvciBjdXN0b20gYXN0cm9sb2dpY2FsIEVTTGludCBydWxlc1xuICogXG4gKiBUaGlzIGZpbGUgdGVzdHMgdGhlIGRvbWFpbi1zcGVjaWZpYyBsaW50aW5nIHJ1bGVzIHRvIGVuc3VyZSB0aGV5IHByb3Blcmx5XG4gKiB2YWxpZGF0ZSBhc3Ryb2xvZ2ljYWwgY2FsY3VsYXRpb25zLCBwbGFuZXRhcnkgcG9zaXRpb25zLCBhbmQgZWxlbWVudGFsIHByb3BlcnRpZXMuXG4gKi9cblxuaW1wb3J0IHsgdmFsaWRhdGVFbGVtZW50YWxQcm9wZXJ0aWVzLCBub3JtYWxpemVFbGVtZW50YWxQcm9wZXJ0aWVzIH0gZnJvbSAnLi4vZWxlbWVudGFsVmFsaWRhdGlvbic7XG5pbXBvcnQgeyB2YWxpZGF0ZVRyYW5zaXREYXRlLCBnZXRDdXJyZW50VHJhbnNpdFNpZ24gfSBmcm9tICcuLi90cmFuc2l0VmFsaWRhdGlvbic7XG5pbXBvcnQgeyB2YWxpZGF0ZVBsYW5ldGFyeVBvc2l0aW9ucywgcXVpY2tWYWxpZGF0ZSB9IGZyb20gJy4uL2FzdHJvbG9naWNhbFZhbGlkYXRpb24nO1xuXG5kZXNjcmliZSgnQXN0cm9sb2dpY2FsIEVTTGludCBSdWxlcyBJbnRlZ3JhdGlvbicsICgpID0+IHtcbiAgZGVzY3JpYmUoJ0VsZW1lbnRhbCBQcm9wZXJ0aWVzIFZhbGlkYXRpb24nLCAoKSA9PiB7XG4gICAgdGVzdCgndmFsaWRhdGVzIGNvcnJlY3QgZWxlbWVudGFsIHByb3BlcnRpZXMgc3RydWN0dXJlJywgKCkgPT4ge1xuICAgICAgY29uc3QgdmFsaWRQcm9wZXJ0aWVzID0ge1xuICAgICAgICBGaXJlOiAwLjQsXG4gICAgICAgIFdhdGVyOiAwLjMsXG4gICAgICAgIEVhcnRoOiAwLjIsXG4gICAgICAgIEFpcjogMC4xXG4gICAgICB9O1xuICAgICAgXG4gICAgICBleHBlY3QodmFsaWRhdGVFbGVtZW50YWxQcm9wZXJ0aWVzKHZhbGlkUHJvcGVydGllcykpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG4gICAgXG4gICAgdGVzdCgncmVqZWN0cyBpbnZhbGlkIGVsZW1lbnRhbCBwcm9wZXJ0aWVzJywgKCkgPT4ge1xuICAgICAgY29uc3QgaW52YWxpZFByb3BlcnRpZXMgPSB7XG4gICAgICAgIEZpcmU6IDEuNSwgLy8gSW52YWxpZDogPiAxXG4gICAgICAgIFdhdGVyOiAtMC4xLCAvLyBJbnZhbGlkOiA8IDBcbiAgICAgICAgRWFydGg6IDAuMlxuICAgICAgICAvLyBNaXNzaW5nIEFpclxuICAgICAgfTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHZhbGlkYXRlRWxlbWVudGFsUHJvcGVydGllcyhpbnZhbGlkUHJvcGVydGllcykpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuICAgIFxuICAgIHRlc3QoJ25vcm1hbGl6ZXMgcGFydGlhbCBlbGVtZW50YWwgcHJvcGVydGllcycsICgpID0+IHtcbiAgICAgIGNvbnN0IHBhcnRpYWxQcm9wZXJ0aWVzID0ge1xuICAgICAgICBGaXJlOiAwLjgsXG4gICAgICAgIFdhdGVyOiAwLjJcbiAgICAgIH07XG4gICAgICBcbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBub3JtYWxpemVFbGVtZW50YWxQcm9wZXJ0aWVzKHBhcnRpYWxQcm9wZXJ0aWVzKTtcbiAgICAgIGV4cGVjdChub3JtYWxpemVkKS50b0hhdmVQcm9wZXJ0eSgnRmlyZScsIDAuOCk7XG4gICAgICBleHBlY3Qobm9ybWFsaXplZCkudG9IYXZlUHJvcGVydHkoJ1dhdGVyJywgMC4yKTtcbiAgICAgIGV4cGVjdChub3JtYWxpemVkKS50b0hhdmVQcm9wZXJ0eSgnRWFydGgnLCAwLjI1KTsgLy8gRGVmYXVsdFxuICAgICAgZXhwZWN0KG5vcm1hbGl6ZWQpLnRvSGF2ZVByb3BlcnR5KCdBaXInLCAwLjI1KTsgLy8gRGVmYXVsdFxuICAgIH0pO1xuICB9KTtcbiAgXG4gIGRlc2NyaWJlKCdQbGFuZXRhcnkgUG9zaXRpb24gVmFsaWRhdGlvbicsICgpID0+IHtcbiAgICB0ZXN0KCd2YWxpZGF0ZXMgY29ycmVjdCBwbGFuZXRhcnkgcG9zaXRpb25zIHN0cnVjdHVyZScsICgpID0+IHtcbiAgICAgIGNvbnN0IHZhbGlkUG9zaXRpb25zID0ge1xuICAgICAgICBzdW46IHsgc2lnbjogJ2FyaWVzJywgZGVncmVlOiAxNS41LCBleGFjdExvbmdpdHVkZTogMTUuNSwgaXNSZXRyb2dyYWRlOiBmYWxzZSB9LFxuICAgICAgICBtb29uOiB7IHNpZ246ICd0YXVydXMnLCBkZWdyZWU6IDIyLjMsIGV4YWN0TG9uZ2l0dWRlOiA1Mi4zLCBpc1JldHJvZ3JhZGU6IGZhbHNlIH0sXG4gICAgICAgIG1lcmN1cnk6IHsgc2lnbjogJ2dlbWluaScsIGRlZ3JlZTogOC43LCBleGFjdExvbmdpdHVkZTogNjguNywgaXNSZXRyb2dyYWRlOiB0cnVlIH1cbiAgICAgIH07XG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbGlkYXRlUGxhbmV0YXJ5UG9zaXRpb25zKHZhbGlkUG9zaXRpb25zKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuaXNWYWxpZCkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3JzKS50b0hhdmVMZW5ndGgoMCk7XG4gICAgfSk7XG4gICAgXG4gICAgdGVzdCgnZGV0ZWN0cyBtaXNzaW5nIHJlcXVpcmVkIHByb3BlcnRpZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBpbnZhbGlkUG9zaXRpb25zID0ge1xuICAgICAgICBzdW46IHsgc2lnbjogJ2FyaWVzJywgZGVncmVlOiAxNS41IH0sIC8vIE1pc3NpbmcgZXhhY3RMb25naXR1ZGUgYW5kIGlzUmV0cm9ncmFkZVxuICAgICAgICBtb29uOiB7IGRlZ3JlZTogMjIuMywgZXhhY3RMb25naXR1ZGU6IDUyLjMsIGlzUmV0cm9ncmFkZTogZmFsc2UgfSAvLyBNaXNzaW5nIHNpZ25cbiAgICAgIH07XG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbGlkYXRlUGxhbmV0YXJ5UG9zaXRpb25zKGludmFsaWRQb3NpdGlvbnMpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5pc1ZhbGlkKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3JzLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgIH0pO1xuICAgIFxuICAgIHRlc3QoJ3ZhbGlkYXRlcyBkZWdyZWUgcmFuZ2VzJywgKCkgPT4ge1xuICAgICAgY29uc3QgaW52YWxpZFBvc2l0aW9ucyA9IHtcbiAgICAgICAgc3VuOiB7IHNpZ246ICdhcmllcycsIGRlZ3JlZTogMzUuMCwgZXhhY3RMb25naXR1ZGU6IDM1LjAsIGlzUmV0cm9ncmFkZTogZmFsc2UgfSwgLy8gSW52YWxpZCBkZWdyZWUgPiAzMFxuICAgICAgICBtb29uOiB7IHNpZ246ICd0YXVydXMnLCBkZWdyZWU6IC01LjAsIGV4YWN0TG9uZ2l0dWRlOiAzMjUuMCwgaXNSZXRyb2dyYWRlOiBmYWxzZSB9IC8vIEludmFsaWQgZGVncmVlIDwgMFxuICAgICAgfTtcbiAgICAgIFxuICAgICAgY29uc3QgcmVzdWx0ID0gdmFsaWRhdGVQbGFuZXRhcnlQb3NpdGlvbnMoaW52YWxpZFBvc2l0aW9ucywgeyBzdHJpY3RNb2RlOiBmYWxzZSB9KTtcbiAgICAgIGV4cGVjdChyZXN1bHQud2FybmluZ3MubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgfSk7XG4gIH0pO1xuICBcbiAgZGVzY3JpYmUoJ1F1aWNrIFZhbGlkYXRpb24gRnVuY3Rpb25zJywgKCkgPT4ge1xuICAgIHRlc3QoJ3F1aWNrIHZhbGlkYXRlIHBsYW5ldGFyeSBwb3NpdGlvbnMnLCAoKSA9PiB7XG4gICAgICBjb25zdCB2YWxpZFBvc2l0aW9ucyA9IHtcbiAgICAgICAgc3VuOiB7IHNpZ246ICdhcmllcycsIGRlZ3JlZTogMTUuNSwgZXhhY3RMb25naXR1ZGU6IDE1LjUsIGlzUmV0cm9ncmFkZTogZmFsc2UgfVxuICAgICAgfTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHF1aWNrVmFsaWRhdGUodmFsaWRQb3NpdGlvbnMsICdwbGFuZXRhcnknKSkudG9CZSh0cnVlKTtcbiAgICB9KTtcbiAgICBcbiAgICB0ZXN0KCdxdWljayB2YWxpZGF0ZSBlbGVtZW50YWwgcHJvcGVydGllcycsICgpID0+IHtcbiAgICAgIGNvbnN0IHZhbGlkUHJvcGVydGllcyA9IHtcbiAgICAgICAgRmlyZTogMC40LFxuICAgICAgICBXYXRlcjogMC4zLFxuICAgICAgICBFYXJ0aDogMC4yLFxuICAgICAgICBBaXI6IDAuMVxuICAgICAgfTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHF1aWNrVmFsaWRhdGUodmFsaWRQcm9wZXJ0aWVzLCAnZWxlbWVudGFsJykpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG4gICAgXG4gICAgdGVzdCgncXVpY2sgdmFsaWRhdGUgbWF0aGVtYXRpY2FsIGNvbnN0YW50cycsICgpID0+IHtcbiAgICAgIGNvbnN0IHZhbGlkQ29uc3RhbnRzID0ge1xuICAgICAgICBERUdSRUVTX1BFUl9TSUdOOiAzMCxcbiAgICAgICAgU0lHTlNfUEVSX0NJUkNMRTogMTIsXG4gICAgICAgIE1BWF9MT05HSVRVREU6IDM2MFxuICAgICAgfTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHF1aWNrVmFsaWRhdGUodmFsaWRDb25zdGFudHMsICdjb25zdGFudHMnKSkudG9CZSh0cnVlKTtcbiAgICB9KTtcbiAgfSk7XG4gIFxuICBkZXNjcmliZSgnTWF0aGVtYXRpY2FsIENvbnN0YW50cyBQcmVzZXJ2YXRpb24nLCAoKSA9PiB7XG4gICAgLy8gVGhlc2UgY29uc3RhbnRzIHNob3VsZCBiZSBwcmVzZXJ2ZWQgYnkgdGhlIEVTTGludCBydWxlc1xuICAgIGNvbnN0IERFR1JFRVNfUEVSX1NJR04gPSAzMDtcbiAgICBjb25zdCBTSUdOU19QRVJfQ0lSQ0xFID0gMTI7XG4gICAgY29uc3QgTUFYX0xPTkdJVFVERSA9IDM2MDtcbiAgICBjb25zdCBGQUxMQkFDS19QT1NJVElPTlMgPSB7XG4gICAgICBzdW46IHsgc2lnbjogJ2FyaWVzJywgZGVncmVlOiA4LjUsIGV4YWN0TG9uZ2l0dWRlOiA4LjUsIGlzUmV0cm9ncmFkZTogZmFsc2UgfVxuICAgIH07XG4gICAgXG4gICAgdGVzdCgnbWF0aGVtYXRpY2FsIGNvbnN0YW50cyBtYWludGFpbiBjb3JyZWN0IHZhbHVlcycsICgpID0+IHtcbiAgICAgIGV4cGVjdChERUdSRUVTX1BFUl9TSUdOKS50b0JlKDMwKTtcbiAgICAgIGV4cGVjdChTSUdOU19QRVJfQ0lSQ0xFKS50b0JlKDEyKTtcbiAgICAgIGV4cGVjdChNQVhfTE9OR0lUVURFKS50b0JlKDM2MCk7XG4gICAgfSk7XG4gICAgXG4gICAgdGVzdCgnZmFsbGJhY2sgcG9zaXRpb25zIHN0cnVjdHVyZSBpcyBwcmVzZXJ2ZWQnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoRkFMTEJBQ0tfUE9TSVRJT05TLnN1bikudG9IYXZlUHJvcGVydHkoJ3NpZ24nKTtcbiAgICAgIGV4cGVjdChGQUxMQkFDS19QT1NJVElPTlMuc3VuKS50b0hhdmVQcm9wZXJ0eSgnZGVncmVlJyk7XG4gICAgICBleHBlY3QoRkFMTEJBQ0tfUE9TSVRJT05TLnN1bikudG9IYXZlUHJvcGVydHkoJ2V4YWN0TG9uZ2l0dWRlJyk7XG4gICAgICBleHBlY3QoRkFMTEJBQ0tfUE9TSVRJT05TLnN1bikudG9IYXZlUHJvcGVydHkoJ2lzUmV0cm9ncmFkZScpO1xuICAgIH0pO1xuICB9KTtcbiAgXG4gIGRlc2NyaWJlKCdEb21haW4tU3BlY2lmaWMgVmFyaWFibGUgUGF0dGVybnMnLCAoKSA9PiB7XG4gICAgdGVzdCgncHJlc2VydmVzIGFzdHJvbG9naWNhbCB2YXJpYWJsZSBuYW1pbmcgcGF0dGVybnMnLCAoKSA9PiB7XG4gICAgICAvLyBUaGVzZSB2YXJpYWJsZXMgc2hvdWxkIGJlIGFsbG93ZWQgYnkgdGhlIGN1c3RvbSBydWxlc1xuICAgICAgY29uc3QgcGxhbmV0UG9zaXRpb24gPSB7IHNpZ246ICdhcmllcycsIGRlZ3JlZTogMTUuMCwgZXhhY3RMb25naXR1ZGU6IDE1LjAsIGlzUmV0cm9ncmFkZTogZmFsc2UgfTtcbiAgICAgIGNvbnN0IGRlZ3JlZVZhbHVlID0gMTUuNTtcbiAgICAgIGNvbnN0IHNpZ25OYW1lID0gJ2FyaWVzJztcbiAgICAgIGNvbnN0IGxvbmdpdHVkZUNhbGN1bGF0aW9uID0gNDUuNztcbiAgICAgIFxuICAgICAgZXhwZWN0KHBsYW5ldFBvc2l0aW9uKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KGRlZ3JlZVZhbHVlKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHNpZ25OYW1lKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KGxvbmdpdHVkZUNhbGN1bGF0aW9uKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuICAgIFxuICAgIHRlc3QoJ3ByZXNlcnZlcyBmYWxsYmFjayBhbmQgcmVsaWFiaWxpdHkgcGF0dGVybnMnLCAoKSA9PiB7XG4gICAgICAvLyBUaGVzZSB2YXJpYWJsZXMgc2hvdWxkIGJlIGFsbG93ZWQgYnkgdGhlIGN1c3RvbSBydWxlc1xuICAgICAgY29uc3QgRkFMTEJBQ0tfREFUQSA9IHsgc3VuOiB7IHNpZ246ICdhcmllcycsIGRlZ3JlZTogMCwgZXhhY3RMb25naXR1ZGU6IDAsIGlzUmV0cm9ncmFkZTogZmFsc2UgfSB9O1xuICAgICAgY29uc3QgUkVMSUFCTEVfUE9TSVRJT05TID0geyBtb29uOiB7IHNpZ246ICd0YXVydXMnLCBkZWdyZWU6IDE1LCBleGFjdExvbmdpdHVkZTogNDUsIGlzUmV0cm9ncmFkZTogZmFsc2UgfSB9O1xuICAgICAgY29uc3QgVFJBTlNJVF9EQVRFUyA9IHsgYXJpZXM6IHsgU3RhcnQ6ICcyMDI0LTAzLTIwJywgRW5kOiAnMjAyNC0wNC0xOScgfSB9O1xuICAgICAgY29uc3QgREVGQVVMVF9WQUxVRVMgPSB7IEZpcmU6IDAuMjUsIFdhdGVyOiAwLjI1LCBFYXJ0aDogMC4yNSwgQWlyOiAwLjI1IH07XG4gICAgICBcbiAgICAgIGV4cGVjdChGQUxMQkFDS19EQVRBKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KFJFTElBQkxFX1BPU0lUSU9OUykudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChUUkFOU0lUX0RBVEVTKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KERFRkFVTFRfVkFMVUVTKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJ2ZXJzaW9uIjozfQ==