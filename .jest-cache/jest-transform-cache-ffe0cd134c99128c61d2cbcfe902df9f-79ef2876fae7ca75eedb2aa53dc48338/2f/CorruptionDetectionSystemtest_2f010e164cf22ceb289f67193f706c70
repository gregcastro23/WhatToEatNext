da117bfba35cf4d27a27e4e1bc170685
"use strict";
/**
 * Corruption Detection System Tests
 * Perfect Codebase Campaign - Task 6.2 Implementation Tests
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock child_process for testing
jest.mock('child_process', () => ({
    execSync: jest.fn()
}));
// Mock fs for testing
jest.mock('fs', () => ({
    existsSync: jest.fn(),
    readFileSync: jest.fn(),
    writeFileSync: jest.fn(),
    mkdirSync: jest.fn()
}));
const SafetyProtocol_1 = require("./SafetyProtocol");
const campaign_1 = require("../../types/campaign");
const fs = __importStar(require("fs"));
const { execSync } = require('child_process');
const mockFs = fs;
describe('Corruption Detection System - Task 6.2', () => {
    let safetyProtocol;
    let mockSettings;
    beforeEach(() => {
        jest.clearAllMocks();
        mockSettings = {
            maxFilesPerBatch: 15,
            buildValidationFrequency: 5,
            testValidationFrequency: 10,
            corruptionDetectionEnabled: true,
            automaticRollbackEnabled: true,
            stashRetentionDays: 7
        };
        // Mock git repository existence
        mockFs.existsSync.mockImplementation((path) => {
            if (path === '.git')
                return true;
            if (path.toString().includes('.kiro'))
                return false;
            if (path.toString().includes('test-file'))
                return true;
            return false;
        });
        // Mock git commands
        execSync.mockImplementation((command) => {
            if (command.includes('git status --porcelain'))
                return '';
            if (command.includes('git branch --show-current'))
                return 'main';
            if (command.includes('git stash push'))
                return 'Saved working directory';
            if (command.includes('git stash list --oneline'))
                return 'stash@{0}: campaign-test-1-2024-01-15T10-30-00-000Z: Test stash';
            if (command.includes('yarn tsc --noEmit'))
                return 'No TypeScript errors';
            return '';
        });
        safetyProtocol = new SafetyProtocol_1.SafetyProtocol(mockSettings);
    });
    describe('File Corruption Detection using Syntax Validation Patterns', () => {
        test('should detect git merge conflict markers', async () => {
            const corruptedContent = `
        import React from 'react';
        
        <<<<<<< HEAD
        const Component = () => <div>Version A</div>;
        =======
        const Component = () => <div>Version B</div>;
        >>>>>>> feature-branch
        
        export default Component;
      `;
            mockFs.readFileSync.mockReturnValue(corruptedContent);
            const report = await safetyProtocol.detectCorruption(['test-file.tsx']);
            expect(report.detectedFiles).toContain('test-file.tsx');
            expect(report.severity).toBe(campaign_1.CorruptionSeverity.CRITICAL);
            expect(report.recommendedAction).toBe(campaign_1.RecoveryAction.EMERGENCY_RESTORE);
            expect(report.corruptionPatterns.some(p => p.description.includes('Git merge conflict markers'))).toBe(true);
        });
        test('should detect corrupted parameter names', async () => {
            const corruptedContent = `
        function testFunction(posit: anyi: anyo: anyn: anys: string) {
          return posit;
        }
      `;
            mockFs.readFileSync.mockReturnValue(corruptedContent);
            const report = await safetyProtocol.detectCorruption(['test-file.ts']);
            expect(report.detectedFiles).toContain('test-file.ts');
            expect(report.severity).toBe(campaign_1.CorruptionSeverity.MEDIUM);
            expect(report.corruptionPatterns.some(p => p.description.includes('Corrupted parameter names'))).toBe(true);
        });
        test('should detect syntax corruption with unbalanced brackets', async () => {
            const corruptedContent = `
        function testFunction() {
          if (true) {
            console.log('test');
          // Missing closing bracket
        }
      `;
            mockFs.readFileSync.mockReturnValue(corruptedContent);
            const report = await safetyProtocol.detectCorruption(['test-file.ts']);
            expect(report.detectedFiles).toContain('test-file.ts');
            expect(report.corruptionPatterns.some(p => p.description.includes('Syntax corruption detected'))).toBe(true);
        });
        test('should detect incomplete statements', async () => {
            const corruptedContent = `
        import
        export
        function
        const
      `;
            mockFs.readFileSync.mockReturnValue(corruptedContent);
            const report = await safetyProtocol.detectCorruption(['test-file.ts']);
            expect(report.detectedFiles).toContain('test-file.ts');
            expect(report.corruptionPatterns.some(p => p.description.includes('Syntax corruption detected'))).toBe(true);
        });
        test('should handle file read errors gracefully', async () => {
            mockFs.readFileSync.mockImplementation(() => {
                throw new Error('Permission denied');
            });
            const report = await safetyProtocol.detectCorruption(['test-file.ts']);
            expect(report.detectedFiles).toContain('test-file.ts');
            expect(report.severity).toBe(campaign_1.CorruptionSeverity.HIGH);
            expect(report.corruptionPatterns.some(p => p.pattern === 'FILE_READ_ERROR')).toBe(true);
        });
        test('should skip non-existent files', async () => {
            mockFs.existsSync.mockReturnValue(false);
            const report = await safetyProtocol.detectCorruption(['non-existent-file.ts']);
            expect(report.detectedFiles).toHaveLength(0);
            expect(report.severity).toBe(campaign_1.CorruptionSeverity.LOW);
        });
    });
    describe('Import/Export Corruption Detection based on Existing Script Knowledge', () => {
        test('should detect empty import statements', async () => {
            const corruptedContent = `
        import { } from 'react';
        import { } from './utils';
      `;
            mockFs.readFileSync.mockReturnValue(corruptedContent);
            const report = await safetyProtocol.detectImportExportCorruption(['test-file.ts']);
            expect(report.detectedFiles).toContain('test-file.ts');
            expect(report.severity).toBe(campaign_1.CorruptionSeverity.MEDIUM);
            expect(report.corruptionPatterns.some(p => p.description.includes('Empty import statement'))).toBe(true);
        });
        test('should detect import from undefined module', async () => {
            const corruptedContent = `
        import React from 'undefined';
        import { Component } from 'undefined';
      `;
            mockFs.readFileSync.mockReturnValue(corruptedContent);
            const report = await safetyProtocol.detectImportExportCorruption(['test-file.ts']);
            expect(report.detectedFiles).toContain('test-file.ts');
            expect(report.severity).toBe(campaign_1.CorruptionSeverity.HIGH);
            expect(report.corruptionPatterns.some(p => p.description.includes('Import from undefined module'))).toBe(true);
        });
        test('should detect duplicate from clause in import', async () => {
            const corruptedContent = `
        import React from 'react' from 'react';
      `;
            mockFs.readFileSync.mockReturnValue(corruptedContent);
            const report = await safetyProtocol.detectImportExportCorruption(['test-file.ts']);
            expect(report.detectedFiles).toContain('test-file.ts');
            expect(report.severity).toBe(campaign_1.CorruptionSeverity.HIGH);
            expect(report.corruptionPatterns.some(p => p.description.includes('Duplicate from clause in import'))).toBe(true);
        });
        test('should detect double comma in import destructuring', async () => {
            const corruptedContent = `
        import { useState,, useEffect } from 'react';
      `;
            mockFs.readFileSync.mockReturnValue(corruptedContent);
            const report = await safetyProtocol.detectImportExportCorruption(['test-file.ts']);
            expect(report.detectedFiles).toContain('test-file.ts');
            expect(report.severity).toBe(campaign_1.CorruptionSeverity.HIGH);
            expect(report.corruptionPatterns.some(p => p.description.includes('Double comma in import destructuring'))).toBe(true);
        });
        test('should detect duplicate destructuring braces (critical)', async () => {
            const corruptedContent = `
        import { useState } { useEffect } from 'react';
      `;
            mockFs.readFileSync.mockReturnValue(corruptedContent);
            const report = await safetyProtocol.detectImportExportCorruption(['test-file.ts']);
            expect(report.detectedFiles).toContain('test-file.ts');
            expect(report.severity).toBe(campaign_1.CorruptionSeverity.CRITICAL);
            expect(report.corruptionPatterns.some(p => p.description.includes('Duplicate destructuring braces in import'))).toBe(true);
        });
        test('should detect corrupted namespace import syntax (critical)', async () => {
            const corruptedContent = `
        import * as * as React from 'react';
      `;
            mockFs.readFileSync.mockReturnValue(corruptedContent);
            const report = await safetyProtocol.detectImportExportCorruption(['test-file.ts']);
            expect(report.detectedFiles).toContain('test-file.ts');
            expect(report.severity).toBe(campaign_1.CorruptionSeverity.CRITICAL);
            expect(report.corruptionPatterns.some(p => p.description.includes('Corrupted namespace import syntax'))).toBe(true);
        });
        test('should detect malformed import statements', async () => {
            const corruptedContent = `
        import React from react;
        import { useState } from react;
      `;
            mockFs.readFileSync.mockReturnValue(corruptedContent);
            const report = await safetyProtocol.detectImportExportCorruption(['test-file.ts']);
            expect(report.detectedFiles).toContain('test-file.ts');
            expect(report.severity).toBe(campaign_1.CorruptionSeverity.HIGH);
            expect(report.corruptionPatterns.some(p => p.description.includes('Malformed import/export statement syntax'))).toBe(true);
        });
        test('should skip non-JavaScript/TypeScript files', async () => {
            const report = await safetyProtocol.detectImportExportCorruption(['test-file.txt', 'test-file.md']);
            expect(report.detectedFiles).toHaveLength(0);
            expect(report.severity).toBe(campaign_1.CorruptionSeverity.LOW);
        });
    });
    describe('Real-time Monitoring during Script Execution', () => {
        test('should start real-time monitoring', async () => {
            const consoleSpy = jest.spyOn(console, 'log').mockImplementation();
            await safetyProtocol.startRealTimeMonitoring(['test-file.ts'], 100);
            expect(consoleSpy).toHaveBeenCalledWith(expect.stringContaining('Starting real-time corruption monitoring for 1 files'));
            // Clean up
            safetyProtocol.stopRealTimeMonitoring();
            consoleSpy.mockRestore();
        });
        test('should stop real-time monitoring', async () => {
            const consoleSpy = jest.spyOn(console, 'log').mockImplementation();
            await safetyProtocol.startRealTimeMonitoring(['test-file.ts'], 100);
            safetyProtocol.stopRealTimeMonitoring();
            expect(consoleSpy).toHaveBeenCalledWith(expect.stringContaining('Real-time corruption monitoring stopped'));
            consoleSpy.mockRestore();
        });
        test('should trigger emergency rollback on critical corruption', async () => {
            const corruptedContent = `
        <<<<<<< HEAD
        const test = 'conflict';
        =======
        const test = 'other';
        >>>>>>> branch
      `;
            mockFs.readFileSync.mockReturnValue(corruptedContent);
            // Mock emergency rollback
            const emergencyRollbackSpy = jest.spyOn(safetyProtocol, 'emergencyRollback').mockResolvedValue();
            await safetyProtocol.startRealTimeMonitoring(['test-file.ts'], 50);
            // Wait for monitoring to detect corruption
            await new Promise(resolve => setTimeout(resolve, 100));
            expect(emergencyRollbackSpy).toHaveBeenCalled();
            emergencyRollbackSpy.mockRestore();
        });
        test('should handle monitoring errors gracefully', async () => {
            const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();
            // Mock file read error during monitoring
            mockFs.readFileSync.mockImplementation(() => {
                throw new Error('Monitoring error');
            });
            await safetyProtocol.startRealTimeMonitoring(['test-file.ts'], 50);
            // Wait for monitoring to encounter error
            await new Promise(resolve => setTimeout(resolve, 100));
            safetyProtocol.stopRealTimeMonitoring();
            expect(consoleErrorSpy).toHaveBeenCalledWith(expect.stringContaining('Error during real-time monitoring'));
            consoleErrorSpy.mockRestore();
        });
    });
    describe('TypeScript Syntax Validation', () => {
        test('should validate syntax with TypeScript compiler', async () => {
            const report = await safetyProtocol.validateSyntaxWithTypeScript(['test-file.ts']);
            expect(execSync).toHaveBeenCalledWith('yarn tsc --noEmit --skipLibCheck 2>&1', expect.any(Object));
            expect(report.severity).toBe(campaign_1.CorruptionSeverity.LOW);
        });
        test('should detect TypeScript syntax errors', async () => {
            execSync.mockImplementation((command) => {
                if (command.includes('yarn tsc --noEmit')) {
                    return `
            test-file.ts(10,5): error TS1005: Unexpected token '{'
            test-file.ts(15,10): error TS1109: Expression expected
          `;
                }
                return '';
            });
            const report = await safetyProtocol.validateSyntaxWithTypeScript(['test-file.ts']);
            expect(report.detectedFiles).toContain('test-file.ts');
            expect(report.severity).toBe(campaign_1.CorruptionSeverity.HIGH);
            expect(report.corruptionPatterns.some(p => p.pattern === 'TYPESCRIPT_SYNTAX_ERROR')).toBe(true);
        });
        test('should handle TypeScript compilation errors', async () => {
            execSync.mockImplementation((command) => {
                if (command.includes('yarn tsc --noEmit')) {
                    const error = new Error('TypeScript compilation failed');
                    error.stdout = 'Unexpected token at line 5';
                    throw error;
                }
                return '';
            });
            const report = await safetyProtocol.validateSyntaxWithTypeScript(['test-file.ts']);
            expect(report.severity).toBe(campaign_1.CorruptionSeverity.HIGH);
            expect(report.corruptionPatterns.some(p => p.pattern === 'TYPESCRIPT_COMPILATION_ERROR')).toBe(true);
        });
        test('should skip validation for non-TypeScript files', async () => {
            const report = await safetyProtocol.validateSyntaxWithTypeScript(['test-file.js', 'test-file.txt']);
            expect(report.detectedFiles).toHaveLength(0);
            expect(report.severity).toBe(campaign_1.CorruptionSeverity.LOW);
        });
    });
    describe('Recovery Action Determination', () => {
        test('should recommend emergency restore for critical corruption', async () => {
            const criticalContent = `
        <<<<<<< HEAD
        import * as * as React from 'react';
        =======
        import React from 'react';
        >>>>>>> branch
      `;
            mockFs.readFileSync.mockReturnValue(criticalContent);
            const report = await safetyProtocol.detectCorruption(['test-file.ts']);
            expect(report.recommendedAction).toBe(campaign_1.RecoveryAction.EMERGENCY_RESTORE);
        });
        test('should recommend rollback for high severity corruption', async () => {
            const highSeverityContent = `
        import React from 'undefined';
        import { useState,, useEffect } from 'react';
      `;
            mockFs.readFileSync.mockReturnValue(highSeverityContent);
            const report = await safetyProtocol.detectCorruption(['test-file.ts']);
            expect(report.recommendedAction).toBe(campaign_1.RecoveryAction.ROLLBACK);
        });
        test('should recommend retry for medium severity corruption', async () => {
            const mediumSeverityContent = `
        import { } from 'react';
        export { };
      `;
            mockFs.readFileSync.mockReturnValue(mediumSeverityContent);
            const report = await safetyProtocol.detectCorruption(['test-file.ts']);
            expect(report.recommendedAction).toBe(campaign_1.RecoveryAction.RETRY);
        });
        test('should recommend continue for no corruption', async () => {
            const cleanContent = `
        import React from 'react';
        export default function Component() {
          return <div>Hello World</div>;
        }
      `;
            mockFs.readFileSync.mockReturnValue(cleanContent);
            const report = await safetyProtocol.detectCorruption(['test-file.tsx']);
            expect(report.recommendedAction).toBe(campaign_1.RecoveryAction.CONTINUE);
        });
    });
    describe('Safety Event Tracking', () => {
        test('should track corruption detection events', async () => {
            const corruptedContent = `
        import { } from 'react';
      `;
            mockFs.readFileSync.mockReturnValue(corruptedContent);
            await safetyProtocol.detectCorruption(['test-file.ts']);
            const events = safetyProtocol.getSafetyEvents();
            const corruptionEvent = events.find(e => e.action === 'CORRUPTION_DETECTED');
            expect(corruptionEvent).toBeDefined();
            expect(corruptionEvent === null || corruptionEvent === void 0 ? void 0 : corruptionEvent.description).toContain('Corruption detected in 1 files');
        });
        test('should track real-time corruption detection events', async () => {
            const corruptedContent = `
        import { } from 'react';
      `;
            mockFs.readFileSync.mockReturnValue(corruptedContent);
            await safetyProtocol.startRealTimeMonitoring(['test-file.ts'], 50);
            // Wait for monitoring to detect corruption
            await new Promise(resolve => setTimeout(resolve, 100));
            safetyProtocol.stopRealTimeMonitoring();
            const events = safetyProtocol.getSafetyEvents();
            const realtimeEvent = events.find(e => e.action === 'REALTIME_CORRUPTION_DETECTED');
            expect(realtimeEvent).toBeDefined();
        });
    });
    describe('Comprehensive Corruption Analysis', () => {
        test('should analyze multiple corruption types in single file', async () => {
            const multipleCorruptionContent = `
        <<<<<<< HEAD
        import { useState,, useEffect } from 'react';
        =======
        import React from 'undefined';
        >>>>>>> branch
        
        function test(posit: anyi: anyo: string) {
          if (true) {
            console.log('test');
          // Missing closing bracket
        }
      `;
            mockFs.readFileSync.mockReturnValue(multipleCorruptionContent);
            const report = await safetyProtocol.detectCorruption(['test-file.ts']);
            expect(report.detectedFiles).toContain('test-file.ts');
            expect(report.severity).toBe(campaign_1.CorruptionSeverity.CRITICAL);
            expect(report.corruptionPatterns.length).toBeGreaterThan(1);
            expect(report.recommendedAction).toBe(campaign_1.RecoveryAction.EMERGENCY_RESTORE);
        });
        test('should provide detailed corruption analysis', async () => {
            const consoleSpy = jest.spyOn(console, 'log').mockImplementation();
            const corruptedContent = `
        import { } from 'react';
      `;
            mockFs.readFileSync.mockReturnValue(corruptedContent);
            await safetyProtocol.detectCorruption(['test-file.ts']);
            expect(consoleSpy).toHaveBeenCalledWith(expect.stringContaining('Analyzing 1 files for corruption patterns'));
            expect(consoleSpy).toHaveBeenCalledWith(expect.stringContaining('Corruption analysis complete'));
            consoleSpy.mockRestore();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,