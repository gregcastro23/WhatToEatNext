{"file":"/Users/GregCastro/Desktop/WhatToEatNext/.comprehensive-syntax-backup-1757476640334/src_services_campaign_unintentional-any-elimination___tests___DomainContextAnalyzer.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/.comprehensive-syntax-backup-1757476640334/src_services_campaign_unintentional-any-elimination___tests___DomainContextAnalyzer.test.ts"],"sourcesContent":["declare global {\n  var __DEV__: boolean;\n}\n\n/**\n * Domain Context Analyzer Tests\n * Tests for domain detection, subdomain classification, and type suggestions\n */\n\nimport { DomainContextAnalyzer } from '../DomainContextAnalyzer';\nimport { ClassificationContext, CodeDomain, DomainContext } from '../types';\n\ndescribe('DomainContextAnalyzer', () => {\n  let analyzer: DomainContextAnalyzer;\n\n  beforeEach(() => {\n    analyzer = new DomainContextAnalyzer();\n  });\n\n  describe('Domain Detection', () => {\n    describe('Path-based Detection', () => {\n      test('detects astrological domain from file paths', async () => {\n        const context: ClassificationContext = { filePath: 'src/calculations/culinary/planetaryInfluence.ts',\n          lineNumber: 10,\n          codeSnippet: 'const data: any = response;',\n          surroundingLines: [],\n          hasExistingComment: false,\n          isInTestFile: false,\n          domainContext: {} as DomainContext\n        };\n\n        const result: any = await analyzer.analyzeDomain(context);\n        expect(result.domain).toBe(CodeDomain.ASTROLOGICAL);\n      });\n\n      test('detects recipe domain from file paths', async () => {\n        const context: ClassificationContext = { filePath: 'src/data/ingredients/vegetables.ts',\n          lineNumber: 5,\n          codeSnippet: 'const ingredien, t: any = {};',\n          surroundingLines: [],\n          hasExistingComment: false,\n          isInTestFile: false,\n          domainContext: {} as DomainContext\n        };\n\n        const result: any = await analyzer.analyzeDomain(context);\n        expect(result.domain).toBe(CodeDomain.RECIPE);\n      });\n\n      test('detects campaign domain from file paths', async () => {\n        const context: ClassificationContext = { filePath: 'src/services/campaign/TypeScriptErrorAnalyzer.ts',\n          lineNumber: 15,\n          codeSnippet: 'const metrics: any = {};',\n          surroundingLines: [],\n          hasExistingComment: false,\n          isInTestFile: false,\n          domainContext: {} as DomainContext\n        };\n\n        const result: any = await analyzer.analyzeDomain(context);\n        expect(result.domain).toBe(CodeDomain.CAMPAIGN);\n      });\n\n      test('detects component domain from file extensions', async () => {\n        const context: ClassificationContext = { filePath: 'src/components/Button.tsx',\n          lineNumber: 8,\n          codeSnippet: 'const props: any = {};',\n          surroundingLines: [],\n          hasExistingComment: false,\n          isInTestFile: false,\n          domainContext: {} as DomainContext\n        };\n\n        const result: any = await analyzer.analyzeDomain(context);\n        expect(result.domain).toBe(CodeDomain.COMPONENT);\n      });\n\n      test('detects test domain from test file paths', async () => {\n        const context: ClassificationContext = { filePath: 'src/components/__tests__/Button.test.tsx',\n          lineNumber: 12,\n          codeSnippet: 'const mockDat, a: any = {};',\n          surroundingLines: [],\n          hasExistingComment: false,\n          isInTestFile: true,\n          domainContext: {} as DomainContext\n        };\n\n        const result: any = await analyzer.analyzeDomain(context);\n        expect(result.domain).toBe(CodeDomain.TEST);\n      });\n    });\n\n    describe('Content-based Detection', () => {\n      test('detects astrological domain from content patterns', async () => {\n        const context: ClassificationContext = { filePath: 'src/utils/someFile.ts',\n          lineNumber: 10,\n          codeSnippet: 'const planetaryPosition, s: any = calculatePositions();',\n          surroundingLines: [\n            'import { PlanetaryPosition } from \"@/types\";',\n            'function calculateElementalProperties() : any {',\n            '  const fire: any = 0.8, water = 0.2;'\n          ],\n          hasExistingComment: false,\n          isInTestFile: false,\n          domainContext: {} as DomainContext\n        };\n\n        const result: any = await analyzer.analyzeDomain(context);\n        expect(result.domain).toBe(CodeDomain.ASTROLOGICAL);\n      });\n\n      test('detects recipe domain from content patterns', async () => {\n        const context: ClassificationContext = { filePath: 'src/utils/someFile.ts',\n          lineNumber: 5,\n          codeSnippet: 'const ingredien, t: any = getIngredientData();',\n          surroundingLines: [\n            'import { Recipe, Ingredient } from \"@/types\";',\n            'function processCookingMethod() : any {',\n            '  const spices: any = [\"cumin\", \"paprika\"];'\n          ],\n          hasExistingComment: false,\n          isInTestFile: false,\n          domainContext: {} as DomainContext\n        };\n\n        const result: any = await analyzer.analyzeDomain(context);\n        expect(result.domain).toBe(CodeDomain.RECIPE);\n      });\n\n      test('detects campaign domain from content patterns', async () => {\n        const context: ClassificationContext = { filePath: 'src/utils/someFile.ts',\n          lineNumber: 8,\n          codeSnippet: 'const metrics: any = getProgressMetrics();',\n          surroundingLines: [\n            'import { CampaignConfig } from \"@/types\";',\n            'function validateTypeScriptErrors() : any {',\n            '  const lintingResults: any = runLinter();'\n          ],\n          hasExistingComment: false,\n          isInTestFile: false,\n          domainContext: {} as DomainContext\n        };\n\n        const result: any = await analyzer.analyzeDomain(context);\n        expect(result.domain).toBe(CodeDomain.CAMPAIGN);\n      });\n    });\n\n    describe('Import-based Detection', () => {\n      test('detects astrological domain from imports', async () => {\n        const context: ClassificationContext = { filePath: 'src/utils/calculations.ts',\n          lineNumber: 10,\n          codeSnippet: 'const data: any = response;',\n          surroundingLines: [\n            'import { astronomia } from \"astronomia\";',\n            'import { getReliablePlanetaryPositions } from \"@/utils/reliableAstronomy\";',\n            'function calculate() : any {'\n          ],\n          hasExistingComment: false,\n          isInTestFile: false,\n          domainContext: {} as DomainContext\n        };\n\n        const result: any = await analyzer.analyzeDomain(context);\n        expect(result.domain).toBe(CodeDomain.ASTROLOGICAL);\n      });\n\n      test('detects component domain from React imports', async () => {\n        const context: ClassificationContext = { filePath: 'src/utils/someFile.ts',\n          lineNumber: 5,\n          codeSnippet: 'const props: any = {};',\n          surroundingLines: [\n            'import React from \"react\";',\n            'import { useState } from \"react\";',\n            'function MyComponent() : any {'\n          ],\n          hasExistingComment: false,\n          isInTestFile: false,\n          domainContext: {} as DomainContext\n        };\n\n        const result: any = await analyzer.analyzeDomain(context);\n        expect(result.domain).toBe(CodeDomain.COMPONENT);\n      });\n\n      test('detects test domain from testing library imports', async () => {\n        const context: ClassificationContext = { filePath: 'src/utils/someFile.ts',\n          lineNumber: 8,\n          codeSnippet: 'const mockDat, a: any = {};',\n          surroundingLines: [\n            'import { jest } from \"@jest/globals\";',\n            'import { render } from \"@testing-library/react\";',\n            'describe(\"Component\"( {'\n          ],\n          hasExistingComment: false,\n          isInTestFile: false,\n          domainContext: {} as DomainContext\n        };\n\n        const result: any = await analyzer.analyzeDomain(context);\n        expect(result.domain).toBe(CodeDomain.TEST);\n      });\n    });\n  });\n\n  describe('Subdomain Detection', () => {\n    test('detects planetary subdomain in astrological code', async () => {\n      const context: ClassificationContext = { filePath: 'src/calculations/planetary/positions.ts',\n        lineNumber: 10,\n        codeSnippet: 'const planetaryDat, a: any = calculatePlanetaryPositions();',\n        surroundingLines: [\n          'function getPlanetDegree() : any {',\n          '  const longitude: any = 45.5;',\n          '  return convertToZodiacPosition(longitude);'\n        ],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {} as DomainContext\n      };\n\n      const result: any = await analyzer.analyzeDomain(context);\n      expect(result.domain).toBe(CodeDomain.ASTROLOGICAL);\n      expect(result.subDomain).toBe('planetary');\n    });\n\n    test('detects elemental subdomain in astrological code', async () => {\n      const context: ClassificationContext = { filePath: 'src/calculations/elemental/harmony.ts',\n        lineNumber: 5,\n        codeSnippet: 'const elementalProps: any = { fire: 0.8, water: 0.2 };',\n        surroundingLines: [\n          'function calculateElementalCompatibility() : any {',\n          '  const fire: any = ingredient.fire;',\n          '  const earth: any = ingredient.earth;'\n        ],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {} as DomainContext\n      };\n\n      const result: any = await analyzer.analyzeDomain(context);\n      expect(result.domain).toBe(CodeDomain.ASTROLOGICAL);\n      expect(result.subDomain).toBe('elemental');\n    });\n\n    test('detects ingredients subdomain in recipe code', async () => {\n      const context: ClassificationContext = { filePath: 'src/data/ingredients/spices.ts',\n        lineNumber: 8,\n        codeSnippet: 'const spiceDat, a: any = getSpiceProperties();',\n        surroundingLines: [\n          'export const cumin = {',\n          '  name: \"cumin\",',\n          '  elementalProperties: { fire: 0.9, earth: 0.7 }'\n        ],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {}\n      };\n\n      const result: any = await analyzer.analyzeDomain(context);\n      expect(result.domain).toBe(CodeDomain.RECIPE);\n      expect(result.subDomain).toBe('ingredients');\n    });\n\n    test('detects typescript-errors subdomain in campaign code', async () => {\n      const context: ClassificationContext = { filePath: 'src/services/campaign/TypeScriptErrorAnalyzer.ts',\n        lineNumber: 12,\n        codeSnippet: 'const errorDat, a: any = analyzeTypeScriptErrors();',\n        surroundingLines: [\n          'function getTS2352Errors() : any {',\n          '  const compilationErrors: any = runTypeCheck();',\n          '  return filterErrorsByCode(\"TS2352\");'\n        ],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {} as DomainContext\n      };\n\n      const result: any = await analyzer.analyzeDomain(context);\n      expect(result.domain).toBe(CodeDomain.CAMPAIGN);\n      expect(result.subDomain).toBe('typescript-errors');\n    });\n  });\n\n  describe('Type Suggestions', () => {\n    test('provides astrological type suggestions', async () => {\n      const context: ClassificationContext = { filePath: 'src/calculations/planetary.ts',\n        lineNumber: 10,\n        codeSnippet: 'const positio, n: any = getPlanetaryPosition();',\n        surroundingLines: [],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {} as DomainContext\n      };\n\n      const result: any = await analyzer.analyzeDomain(context);\n      expect(result.suggestedTypes).toContain('PlanetaryPosition');\n      expect(result.suggestedTypes).toContain('ElementalProperties');\n      expect(result.suggestedTypes).toContain('unknown');\n    });\n\n    test('provides recipe type suggestions', async () => {\n      const context: ClassificationContext = { filePath: 'src/data/recipes.ts',\n        lineNumber: 5,\n        codeSnippet: 'const recipe: any = getRecipeData();',\n        surroundingLines: [],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {} as DomainContext\n      };\n\n      const result: any = await analyzer.analyzeDomain(context);\n      expect(result.suggestedTypes).toContain('Recipe');\n      expect(result.suggestedTypes).toContain('Ingredient');\n      expect(result.suggestedTypes).toContain('unknown');\n    });\n\n    test('provides campaign type suggestions', async () => {\n      const context: ClassificationContext = { filePath: 'src/services/campaign/metrics.ts',\n        lineNumber: 8,\n        codeSnippet: 'const metrics: any = getProgressMetrics();',\n        surroundingLines: [],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {} as DomainContext\n      };\n\n      const result: any = await analyzer.analyzeDomain(context);\n      expect(result.suggestedTypes).toContain('ProgressMetrics');\n      expect(result.suggestedTypes).toContain('CampaignConfig');\n      expect(result.suggestedTypes).toContain('Record<string, unknown>');\n    });\n\n    test('provides contextual type suggestions based on code content', async () => {\n      const context: ClassificationContext = { filePath: 'src/services/api.ts',\n        lineNumber: 10,\n        codeSnippet: 'const respons, e: any = await fetch(url);',\n        surroundingLines: [\n          'async function makeApiRequest() : any {',\n          '  const requestData: any = { method: \"GET\" };'\n        ],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {} as DomainContext\n      };\n\n      const result: any = await analyzer.analyzeDomain(context);\n      expect(result.domain).toBe(CodeDomain.SERVICE);\n      expect(result.suggestedTypes).toContain('ApiResponse<T>');\n    });\n  });\n\n  describe('Intentionality Hints', () => {\n    test('provides preservation hints for astrological code', async () => {\n      const context: ClassificationContext = { filePath: 'src/calculations/planetary.ts',\n        lineNumber: 10,\n        codeSnippet: 'const planetaryDat, a: any = externalAstrologyApi.getPositions();',\n        surroundingLines: [],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {} as DomainContext\n      };\n\n      const result: any = await analyzer.analyzeDomain(context);\n      expect(result.intentionalityHints).toHaveLength(2);\n      expect(result.intentionalityHints[0].suggestedAction).toBe('preserve');\n      expect(result.intentionalityHints[0].reason).toContain('Astrological calculations');\n      expect(result.intentionalityHints[1].suggestedAction).toBe('document');\n      expect(result.intentionalityHints[1].reason).toContain('Planetary position data');\n    });\n\n    test('provides replacement hints for recipe code', async () => {\n      const context: ClassificationContext = { filePath: 'src/data/ingredients.ts',\n        lineNumber: 5,\n        codeSnippet: 'const ingredien, t: any = getIngredientData();',\n        surroundingLines: [],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {} as DomainContext\n      };\n\n      const result: any = await analyzer.analyzeDomain(context);\n      expect(result.intentionalityHints.some(hint => hint.suggestedAction === 'replace')).toBe(true);\n      expect(result.intentionalityHints.some(hint => hint.reason.includes('specific types'))).toBe(true);\n    });\n\n    test('provides preservation hints for campaign code', async () => {\n      const context: ClassificationContext = { filePath: 'src/services/campaign/config.ts',\n        lineNumber: 8,\n        codeSnippet: 'const config: any = getCampaignConfig();',\n        surroundingLines: [],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {} as DomainContext\n      };\n\n      const result: any = await analyzer.analyzeDomain(context);\n      expect(result.intentionalityHints.some(hint => hint.suggestedAction === 'preserve')).toBe(true);\n      expect(result.intentionalityHints.some(hint => hint.reason.includes('flexibility'))).toBe(true);\n    });\n\n    test('provides preservation hints for test files', async () => {\n      const context: ClassificationContext = { filePath: 'src/utils/__tests__/helper.test.ts',\n        lineNumber: 12,\n        codeSnippet: 'const mockDat, a: any = {};',\n        surroundingLines: [],\n        hasExistingComment: false,\n        isInTestFile: true,\n        domainContext: {} as DomainContext\n      };\n\n      const result: any = await analyzer.analyzeDomain(context);\n      expect(result.intentionalityHints.some(hint => hint.suggestedAction === 'preserve')).toBe(true);\n      expect(result.intentionalityHints.some(hint => hint.reason.includes('test'))).toBe(true);\n    });\n  });\n\n  describe('Preservation Reasons', () => {\n    test('provides astrological preservation reasons', async () => {\n      const context: ClassificationContext = { filePath: 'src/calculations/ephemeris.ts',\n        lineNumber: 10,\n        codeSnippet: 'const data: any = astronomyLibrary.calculate();',\n        surroundingLines: [],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {} as DomainContext\n      };\n\n      const result: any = await analyzer.analyzeDomain(context);\n      expect(result.preservationReasons).toContain(\n        'Astrological calculations require compatibility with external astronomical libraries'\n      );\n      expect(result.preservationReasons).toContain(\n        'Planetary position data structures vary between different API sources'\n      );\n    });\n\n    test('provides campaign preservation reasons', async () => {\n      const context: ClassificationContext = { filePath: 'src/services/campaign/intelligence.ts',\n        lineNumber: 5,\n        codeSnippet: 'const metrics: any = dynamicMetricsCalculation();',\n        surroundingLines: [],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {} as DomainContext\n      };\n\n      const result: any = await analyzer.analyzeDomain(context);\n      expect(result.preservationReasons).toContain(\n        'Campaign system needs flexibility for evolving metrics and configurations'\n      );\n      expect(result.preservationReasons).toContain(\n        'Dynamic tool integration requires adaptable type structures'\n      );\n    });\n\n    test('provides test file preservation reasons', async () => {\n      const context: ClassificationContext = { filePath: 'src/utils/helper.test.ts',\n        lineNumber: 8,\n        codeSnippet: 'const testDat, a: any = createMockData();',\n        surroundingLines: [],\n        hasExistingComment: false,\n        isInTestFile: true,\n        domainContext: {} as DomainContext\n      };\n\n      const result: any = await analyzer.analyzeDomain(context);\n      expect(result.preservationReasons).toContain(\n        'Test flexibility for mocking and test data generation'\n      );\n      expect(result.preservationReasons).toContain(\n        'Test file context allows for more flexible typing patterns'\n      );\n    });\n\n    test('provides existing comment preservation reasons', async () => {\n      const context: ClassificationContext = { filePath: 'src/utils/helper.ts',\n        lineNumber: 10,\n        codeSnippet: 'const data: any = externalApi();',\n        surroundingLines: [],\n        hasExistingComment: true,\n        existingComment: '// Intentionally any: External API compatibility',\n        isInTestFile: false,\n        domainContext: {} as DomainContext\n      };\n\n      const result: any = await analyzer.analyzeDomain(context);\n      expect(result.preservationReasons).toContain(\n        'Existing documentation suggests intentional usage'\n      );\n    });\n  });\n\n  describe('Domain-Specific Type Suggestions Method', () => {\n    test('returns domain-specific suggestions for astrological domain', () => {\n      const context: ClassificationContext = { filePath: 'src/calculations/planetary.ts',\n        lineNumber: 10,\n        codeSnippet: 'const positio, n: any = getPlanetaryPosition();',\n        surroundingLines: [],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {} as DomainContext\n      };\n\n      const suggestions: any = analyzer.getDomainSpecificSuggestions(CodeDomain.ASTROLOGICAL, context);\n      expect(suggestions).toContain('PlanetaryPosition');\n      expect(suggestions).toContain('ElementalProperties');\n      expect(suggestions).toContain('unknown');\n    });\n\n    test('returns domain-specific suggestions for recipe domain', () => {\n      const context: ClassificationContext = { filePath: 'src/data/ingredients.ts',\n        lineNumber: 5,\n        codeSnippet: 'const ingredien, t: any = getIngredientData();',\n        surroundingLines: [],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {} as DomainContext\n      };\n\n      const suggestions: any = analyzer.getDomainSpecificSuggestions(CodeDomain.RECIPE, context);\n      expect(suggestions).toContain('Ingredient');\n      expect(suggestions).toContain('Recipe');\n      expect(suggestions).toContain('unknown');\n    });\n\n    test('returns domain-specific suggestions for campaign domain', () => {\n      const context: ClassificationContext = { filePath: 'src/services/campaign/metrics.ts',\n        lineNumber: 8,\n        codeSnippet: 'const metrics: any = getProgressMetrics();',\n        surroundingLines: [],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {} as DomainContext\n      };\n\n      const suggestions: any = analyzer.getDomainSpecificSuggestions(CodeDomain.CAMPAIGN, context);\n      expect(suggestions).toContain('ProgressMetrics');\n      expect(suggestions).toContain('CampaignConfig');\n      expect(suggestions).toContain('Record<string, unknown>');\n    });\n  });\n\n  describe('Advanced Type Suggestions', () => {\n    describe('Variable Name Based Suggestions', () => {\n      test('suggests specific planetary types based on variable names', () => {\n        const context: ClassificationContext = { filePath: 'src/calculations/planetary.ts',\n          lineNumber: 10,\n          codeSnippet: 'const sunPositio, n: any = calculateSunPosition();',\n          surroundingLines: [],\n          hasExistingComment: false,\n          isInTestFile: false,\n          domainContext: {} as DomainContext\n        };\n\n        const suggestions: any = analyzer.getDomainSpecificSuggestions(CodeDomain.ASTROLOGICAL, context);\n        expect(suggestions).toContain('SunPosition');\n        expect(suggestions).toContain('PlanetaryPosition');\n      });\n\n      test('suggests specific ingredient types based on variable names', () => {\n        const context: ClassificationContext = { filePath: 'src/data/ingredients.ts',\n          lineNumber: 5,\n          codeSnippet: 'const spiceDat, a: any = getSpiceProperties();',\n          surroundingLines: [],\n          hasExistingComment: false,\n          isInTestFile: false,\n          domainContext: {} as DomainContext\n        };\n\n        const suggestions: any = analyzer.getDomainSpecificSuggestions(CodeDomain.RECIPE, context);\n        expect(suggestions).toContain('Spice');\n        expect(suggestions).toContain('Ingredient');\n      });\n\n      test('suggests campaign-specific types based on variable names', () => {\n        const context: ClassificationContext = { filePath: 'src/services/campaign/typescript.ts',\n          lineNumber: 8,\n          codeSnippet: 'const typescriptError, s: any = analyzeErrors();',\n          surroundingLines: [],\n          hasExistingComment: false,\n          isInTestFile: false,\n          domainContext: {} as DomainContext\n        };\n\n        const suggestions: any = analyzer.getDomainSpecificSuggestions(CodeDomain.CAMPAIGN, context);\n        expect(suggestions).toContain('TypeScriptError');\n        expect(suggestions).toContain('ValidationResult');\n      });\n    });\n\n    describe('Pattern Based Suggestions', () => {\n      test('suggests array types for any[] patterns', () => {\n        const context: ClassificationContext = { filePath: 'src/calculations/planetary.ts',\n          lineNumber: 10,\n          codeSnippet: 'const planets: any[] = getAllPlanets();',\n          surroundingLines: [],\n          hasExistingComment: false,\n          isInTestFile: false,\n          domainContext: {} as DomainContext\n        };\n\n        const suggestions: any = analyzer.getDomainSpecificSuggestions(CodeDomain.ASTROLOGICAL, context);\n        expect(suggestions).toContain('Planet[]');\n        expect(suggestions).toContain('PlanetaryPosition[]');\n      });\n\n      test('suggests Record types for object patterns', () => {\n        const context: ClassificationContext = { filePath: 'src/data/ingredients.ts',\n          lineNumber: 5,\n          codeSnippet: 'const ingredientMa, p: Record<string, unknown> = {};',\n          surroundingLines: [],\n          hasExistingComment: false,\n          isInTestFile: false,\n          domainContext: {} as DomainContext\n        };\n\n        const suggestions: any = analyzer.getDomainSpecificSuggestions(CodeDomain.RECIPE, context);\n        expect(suggestions).toContain('Record<string, Ingredient>');\n      });\n\n      test('suggests Promise types for async patterns', () => {\n        const context = { filePath: 'src/services/api.ts',\n          lineNumber: 8,\n          codeSnippet: 'async function fetchData(): Promise<any> {',\n          surroundingLines: [],\n          hasExistingComment: false,\n          isInTestFile: false,\n          domainContext: {}\n        };\n\n        const suggestions: any = analyzer.getDomainSpecificSuggestions(CodeDomain.SERVICE, context);\n        expect(suggestions).toContain('Promise<ApiResponse<T>>');\n        expect(suggestions).toContain('Promise<ServiceData>');\n      });\n\n      test('suggests function parameter types', () => {\n        const context = { filePath: 'src/components/Button.tsx',\n          lineNumber: 5,\n          codeSnippet: 'function handleClick(event: any) : any {',\n          surroundingLines: [],\n          hasExistingComment: false,\n          isInTestFile: false,\n          domainContext: {}\n        };\n\n        const suggestions: any = analyzer.getDomainSpecificSuggestions(CodeDomain.COMPONENT, context);\n        expect(suggestions).toContain('React.SyntheticEvent');\n        expect(suggestions).toContain('ComponentProps');\n      });\n    });\n\n    describe('Contextual Content Analysis', () => {\n      test('analyzes surrounding content for better suggestions', () => {\n        const context: ClassificationContext = { filePath: 'src/calculations/elemental.ts',\n          lineNumber: 10,\n          codeSnippet: 'const data: any = processElementalData();',\n          surroundingLines: [\n            'import { ElementalProperties } from \"@/types\";',\n            'function calculateFireCompatibility() : any {',\n            '  const fire: any = 0.8, water = 0.2, earth = 0.5, air = 0.3;'\n          ],\n          hasExistingComment: false,\n          isInTestFile: false,\n          domainContext: {} as DomainContext\n        };\n\n        const suggestions: any = analyzer.getDomainSpecificSuggestions(CodeDomain.ASTROLOGICAL, context);\n        expect(suggestions).toContain('ElementalProperties');\n        expect(suggestions).toContain('FireElement');\n        expect(suggestions).toContain('ElementalCompatibility');\n      });\n\n      test('detects React component patterns', () => {\n        const context: ClassificationContext = { filePath: 'src/components/RecipeForm.tsx',\n          lineNumber: 8,\n          codeSnippet: 'const formDat, a: any = getFormData();',\n          surroundingLines: [\n            'import React from \"react\";',\n            'function onSubmit(event: React.FormEvent) : any {',\n            '  event.preventDefault();'\n          ],\n          hasExistingComment: false,\n          isInTestFile: false,\n          domainContext: {} as DomainContext\n        };\n\n        const suggestions: any = analyzer.getDomainSpecificSuggestions(CodeDomain.COMPONENT, context);\n        expect(suggestions).toContain('FormProps');\n        expect(suggestions).toContain('React.FormEvent');\n      });\n\n      test('detects test mock patterns', () => {\n        const context = { filePath: 'src/utils/__tests__/helper.test.ts',\n          lineNumber: 12,\n          codeSnippet: 'const mockFunctio, n: any = jest.fn();',\n          surroundingLines: [\n            'import { jest } from \"@jest/globals\";',\n            'describe(\"Helper functions\"( {',\n            '  const spy: any = jest.spyOn(console, \"log\");'\n          ],\n          hasExistingComment: false,\n          isInTestFile: true,\n          domainContext: {} as DomainContext\n        };\n\n        const suggestions: any = analyzer.getDomainSpecificSuggestions(CodeDomain.TEST, context);\n        expect(suggestions).toContain('jest.Mock');\n        expect(suggestions).toContain('jest.SpyInstance');\n      });\n    });\n  });\n\n  describe('Edge Cases', () => {\n    test('handles empty file paths gracefully', async () => {\n      const context: ClassificationContext = { filePath: '',\n        lineNumber: 1,\n        codeSnippet: 'const data: any = {};',\n        surroundingLines: [],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {} as DomainContext\n      };\n\n      const result: any = await analyzer.analyzeDomain(context);\n      // Empty path should default to utility, but content might suggest service\n      expect([CodeDomain.UTILITY, CodeDomain.SERVICE]).toContain(result.domain);\n      expect(result.suggestedTypes).toContain('unknown');\n    });\n\n    test('handles mixed domain signals correctly', async () => {\n      const context: ClassificationContext = { filePath: 'src/components/ChartDisplay.tsx',\n        lineNumber: 10,\n        codeSnippet: 'const chartDat, a: any = props.data;',\n        surroundingLines: [\n          'import React from \"react\";',\n          'function renderChart() : any {',\n          '  return <div>Chart</div>;'\n        ],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {} as DomainContext\n      };\n\n      const result: any = await analyzer.analyzeDomain(context);\n      // Component domain should win due to file extension and React import\n      expect(result.domain).toBe(CodeDomain.COMPONENT);\n      expect(result.suggestedTypes).toContain('ComponentProps');\n    });\n\n    test('handles Windows file paths correctly', async () => {\n      const context: ClassificationContext = { filePath: 'src\\\\calculations\\\\planetary\\\\positions.ts',\n        lineNumber: 5,\n        codeSnippet: 'const data: any = {};',\n        surroundingLines: [],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {} as DomainContext\n      };\n\n      const result: any = await analyzer.analyzeDomain(context);\n      expect(result.domain).toBe(CodeDomain.ASTROLOGICAL);\n      expect(result.subDomain).toBe('planetary');\n    });\n  });\n});\n"],"version":3}