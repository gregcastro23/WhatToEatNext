9de6d883cc4b2586ad614557dcaca1d0
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const globals_1 = require("@jest/globals");
// Mock external dependencies
globals_1.jest.mock('next/navigation', () => ({
    useRouter: () => ({
        push: globals_1.jest.fn(),
        replace: globals_1.jest.fn(),
        prefetch: globals_1.jest.fn(),
        back: globals_1.jest.fn(),
        forward: globals_1.jest.fn(),
        refresh: globals_1.jest.fn(),
        pathname: '/',
        query: {},
        asPath: '/'
    })
}));
globals_1.jest.mock('../../utils/logger', () => ({
    logger: {
        info: globals_1.jest.fn(),
        debug: globals_1.jest.fn(),
        warn: globals_1.jest.fn(),
        error: globals_1.jest.fn()
    },
    createLogger: globals_1.jest.fn(() => ({
        info: globals_1.jest.fn(),
        debug: globals_1.jest.fn(),
        warn: globals_1.jest.fn(),
        error: globals_1.jest.fn(),
        log: globals_1.jest.fn()
    }))
}));
globals_1.jest.mock('../../utils/reliableAstronomy', () => ({
    getReliablePlanetaryPositions: globals_1.jest.fn().mockResolvedValue({
        sun: { sign: 'aries', degree: 8.5, exactLongitude: 8.5, isRetrograde: false },
        moon: { sign: 'aries', degree: 1.57, exactLongitude: 1.57, isRetrograde: false },
        mercury: { sign: 'aries', degree: 0.85, exactLongitude: 0.85, isRetrograde: true }
    })
}));
// Mock hooks that might cause issues
globals_1.jest.mock('../../hooks/useAgentHooks', () => ({
    useAgentHooks: () => ({
        hookState: { isActive: false, lastRun: null, results: [] },
        startAgentHooks: globals_1.jest.fn(),
        stopAgentHooks: globals_1.jest.fn(),
        triggerValidation: globals_1.jest.fn()
    }),
    usePlanetaryDataValidationHook: () => ({ isValid: true }),
    useIngredientConsistencyHook: () => ({ isConsistent: true }),
    useTypeScriptCampaignHook: () => ({ campaignActive: false }),
    useBuildQualityMonitoringHook: () => ({ quality: 'good' }),
    useQualityMetricsHook: () => ({ metrics: {} })
}));
globals_1.jest.mock('../../utils/mcpServerIntegration', () => ({
    useMCPServerIntegration: () => ({
        isConnected: true,
        serverStatus: 'connected',
        availableTools: []
    })
}));
globals_1.jest.mock('../../utils/developmentExperienceOptimizations', () => ({
    useDevelopmentExperienceOptimizations: () => ({
        optimizationsActive: true,
        performanceMetrics: {}
    })
}));
/**
 * Comprehensive Main Page Validation Tests
 * Task 11.2: Validate all requirements and perform final testing
 */
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const App_1 = __importDefault(require("../../../App"));
const AlchemicalContext_1 = require("../../contexts/AlchemicalContext");
const MainPageLayout_1 = __importDefault(require("../../components/layout/MainPageLayout"));
describe('Main Page Validation - Task 11.2', () => {
    beforeEach(() => {
        // Clear all mocks before each test
        globals_1.jest.clearAllMocks();
        // Mock window.scrollTo
        Object.defineProperty(window, 'scrollTo', {
            value: globals_1.jest.fn(),
            writable: true
        });
        // Mock localStorage
        const localStorageMock = {
            getItem: globals_1.jest.fn(),
            setItem: globals_1.jest.fn(),
            removeItem: globals_1.jest.fn(),
            clear: globals_1.jest.fn()
        };
        Object.defineProperty(window, 'localStorage', {
            value: localStorageMock
        });
    });
    describe('1. Component Interactions and Data Flow', () => {
        test('App renders without crashing', async () => {
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(App_1.default, {}));
            });
            // Should render without throwing errors
            expect(react_2.screen.getByText(/Loading Astrological Data/i)).toBeInTheDocument();
        });
        test('MainPageLayout renders with AlchemicalProvider', async () => {
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(AlchemicalContext_1.AlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(MainPageLayout_1.default, { debugMode: false, loading: false }) }));
            });
            // Should render the main layout
            expect(document.body).toBeInTheDocument();
        });
        test('Error boundary handles errors gracefully', async () => {
            const ThrowError = () => {
                throw new Error('Test error');
            };
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(AlchemicalContext_1.AlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(MainPageLayout_1.default, { debugMode: false, loading: false, children: (0, jsx_runtime_1.jsx)(ThrowError, {}) }) }));
            });
            // Should handle error without crashing
            expect(document.body).toBeInTheDocument();
        });
    });
    describe('2. Navigation Functionality', () => {
        test('Navigation state is preserved', async () => {
            const mockOnSectionNavigate = globals_1.jest.fn();
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(AlchemicalContext_1.AlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(MainPageLayout_1.default, { debugMode: false, loading: false, onSectionNavigate: mockOnSectionNavigate }) }));
            });
            // Navigation should be functional
            expect(document.body).toBeInTheDocument();
        });
        test('Scroll position is preserved', async () => {
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(AlchemicalContext_1.AlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(MainPageLayout_1.default, { debugMode: false, loading: false }) }));
            });
            // Simulate scroll
            react_2.fireEvent.scroll(window, { target: { scrollY: 100 } });
            // Should handle scroll events
            expect(window.scrollTo).toBeDefined();
        });
    });
    describe('3. Debug Panel Functionality', () => {
        test('Debug panel renders in development mode', async () => {
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(AlchemicalContext_1.AlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(MainPageLayout_1.default, { debugMode: true, loading: false }) }));
            });
            // Should render without errors in debug mode
            expect(document.body).toBeInTheDocument();
        });
        test('Debug panel is hidden in production mode', async () => {
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(AlchemicalContext_1.AlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(MainPageLayout_1.default, { debugMode: false, loading: false }) }));
            });
            // Should render without errors in production mode
            expect(document.body).toBeInTheDocument();
        });
    });
    describe('4. Loading States', () => {
        test('Loading state displays correctly', async () => {
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(AlchemicalContext_1.AlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(MainPageLayout_1.default, { debugMode: false, loading: true }) }));
            });
            // Should handle loading state
            expect(document.body).toBeInTheDocument();
        });
        test('Connected state displays when not loading', async () => {
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(AlchemicalContext_1.AlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(MainPageLayout_1.default, { debugMode: false, loading: false }) }));
            });
            // Should handle connected state
            expect(document.body).toBeInTheDocument();
        });
    });
    describe('5. Context and State Management', () => {
        test('AlchemicalProvider provides context', async () => {
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(AlchemicalContext_1.AlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(MainPageLayout_1.default, { debugMode: false, loading: false }) }));
            });
            // Context should be provided
            expect(document.body).toBeInTheDocument();
        });
        test('State preservation works correctly', async () => {
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(AlchemicalContext_1.AlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(MainPageLayout_1.default, { debugMode: false, loading: false }) }));
            });
            // State preservation should work
            expect(localStorage.setItem).toBeDefined();
        });
    });
    describe('6. Error Handling', () => {
        test('Global error boundary catches errors', async () => {
            // Mock console.error to prevent test output noise
            const consoleSpy = globals_1.jest.spyOn(console, 'error').mockImplementation(() => { });
            const ErrorComponent = () => {
                throw new Error('Test error for error boundary');
            };
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(App_1.default, { children: (0, jsx_runtime_1.jsx)(ErrorComponent, {}) }));
            });
            // Should handle errors gracefully
            expect(document.body).toBeInTheDocument();
            consoleSpy.mockRestore();
        });
        test('Component-level error boundaries work', async () => {
            const consoleSpy = globals_1.jest.spyOn(console, 'error').mockImplementation(() => { });
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(AlchemicalContext_1.AlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(MainPageLayout_1.default, { debugMode: false, loading: false }) }));
            });
            // Should render without errors
            expect(document.body).toBeInTheDocument();
            consoleSpy.mockRestore();
        });
    });
    describe('7. Performance and Accessibility', () => {
        test('Components are memoized for performance', async () => {
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(AlchemicalContext_1.AlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(MainPageLayout_1.default, { debugMode: false, loading: false }) }));
            });
            // Should render efficiently
            expect(document.body).toBeInTheDocument();
        });
        test('Lazy loading works for non-critical components', async () => {
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(AlchemicalContext_1.AlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(MainPageLayout_1.default, { debugMode: true, loading: false }) }));
            });
            // Should handle lazy loading
            expect(document.body).toBeInTheDocument();
        });
    });
    describe('8. Integration with External Systems', () => {
        test('Astrological calculations integrate correctly', async () => {
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(AlchemicalContext_1.AlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(MainPageLayout_1.default, { debugMode: false, loading: false }) }));
            });
            // Should integrate with astrological systems
            expect(document.body).toBeInTheDocument();
        });
        test('Agent hooks integrate correctly', async () => {
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(AlchemicalContext_1.AlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(MainPageLayout_1.default, { debugMode: false, loading: false }) }));
            });
            // Should integrate with agent hooks
            expect(document.body).toBeInTheDocument();
        });
    });
    describe('9. Mobile Responsiveness', () => {
        test('Layout adapts to mobile viewport', async () => {
            // Mock mobile viewport
            Object.defineProperty(window, 'innerWidth', {
                writable: true,
                configurable: true,
                value: 375,
            });
            Object.defineProperty(window, 'innerHeight', {
                writable: true,
                configurable: true,
                value: 667,
            });
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(AlchemicalContext_1.AlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(MainPageLayout_1.default, { debugMode: false, loading: false }) }));
            });
            // Should handle mobile viewport
            expect(document.body).toBeInTheDocument();
        });
        test('Touch interactions work correctly', async () => {
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(AlchemicalContext_1.AlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(MainPageLayout_1.default, { debugMode: false, loading: false }) }));
            });
            // Should handle touch interactions
            expect(document.body).toBeInTheDocument();
        });
    });
    describe('10. System Integration Validation', () => {
        test('All required systems are integrated', async () => {
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(App_1.default, {}));
            });
            // Should integrate all systems
            expect(document.body).toBeInTheDocument();
        });
        test('Fallback mechanisms work correctly', async () => {
            // Mock API failure
            globals_1.jest.mocked(require('../../utils/reliableAstronomy').getReliablePlanetaryPositions)
                .mockRejectedValueOnce(new Error('API Error'));
            await (0, react_2.act)(async () => {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(AlchemicalContext_1.AlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(MainPageLayout_1.default, { debugMode: false, loading: false }) }));
            });
            // Should handle API failures gracefully
            expect(document.body).toBeInTheDocument();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,