{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/BundleSizeOptimizer.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/BundleSizeOptimizer.test.ts"],"sourcesContent":["/**\n * Bundle Size Optimizer Tests\n * Perfect Codebase Campaign - Phase 4 Implementation Tests\n */\n\nimport { BundleSizeOptimizer, BundleAnalysis, LazyLoadingValidation } from './BundleSizeOptimizer';\nimport * as fs from 'fs';\nimport { execSync } from 'child_process';\n\n// Mock external dependencies\njest.mock('child_process');\njest.mock('fs');\n\nconst mockExecSync = execSync as jest.MockedFunction<typeof execSync>;\nconst mockFs = fs as jest.Mocked<typeof fs>;\n\ndescribe('BundleSizeOptimizer', () => {\n  let bundleOptimizer: BundleSizeOptimizer;\n\n  beforeEach(() => {\n    bundleOptimizer = new BundleSizeOptimizer();\n    jest.clearAllMocks();\n  });\n\n  describe('analyzeBundleSize', () => {\n    it('should analyze Next.js bundle size', async () => {\n      mockFs.existsSync.mockImplementation((path: string) => {\n        return path === '.next' || path === '.next/static/chunks';\n      });\n      \n      mockFs.readFileSync.mockImplementation((path: string) => {\n        if (path === 'package.json') {\n          return JSON.stringify({\n            dependencies: {\n              'react': '^18.0.0',\n              '@next/bundle-analyzer': '^13.0.0'\n            }\n          });\n        }\n        return '';\n      });\n      \n      mockFs.readdirSync.mockReturnValue(['main.js', 'vendor.js', 'lazy-component.js'] as any);\n      mockFs.statSync.mockReturnValue({ size: 50 * 1024 } as any); // 50kB files\n      \n      mockExecSync.mockReturnValue('400\\n'); // 400kB total\n      \n      const analysis = await bundleOptimizer.analyzeBundleSize();\n      \n      expect(analysis.totalSize).toBe(400);\n      expect(analysis.compressedSize).toBe(280); // 70% compression\n      expect(analysis.chunks).toHaveLength(3);\n      expect(analysis.chunks[0].name).toBe('main.js');\n      expect(analysis.chunks[2].isLazyLoaded).toBe(true); // lazy-component.js\n    });\n\n    it('should analyze generic build directory', async () => {\n      mockFs.existsSync.mockImplementation((path: string) => {\n        return path === 'dist';\n      });\n      \n      mockExecSync.mockReturnValue('350\\n'); // 350kB total\n      \n      const analysis = await bundleOptimizer.analyzeBundleSize();\n      \n      expect(analysis.totalSize).toBe(350);\n      expect(analysis.compressedSize).toBe(245); // 70% compression\n    });\n\n    it('should estimate bundle size from source code', async () => {\n      mockFs.existsSync.mockReturnValue(false);\n      mockExecSync.mockReturnValue('200000\\n'); // 200kB source code\n      \n      const analysis = await bundleOptimizer.analyzeBundleSize();\n      \n      expect(analysis.totalSize).toBe(293); // Math.round(200000 / 1024 * 1.5) = 293\n    });\n\n    it('should handle bundle analysis errors gracefully', async () => {\n      mockFs.existsSync.mockReturnValue(false);\n      mockExecSync.mockImplementation(() => {\n        throw new Error('Analysis failed');\n      });\n      \n      const analysis = await bundleOptimizer.analyzeBundleSize();\n      \n      expect(analysis.totalSize).toBe(400); // Conservative estimate fallback\n      // The error is caught in estimateBundleSize, so recommendations will be generated normally\n      expect(analysis.recommendations).toBeInstanceOf(Array);\n    });\n  });\n\n  describe('validateLazyLoading', () => {\n    it('should validate lazy loading implementation', async () => {\n      mockExecSync\n        .mockReturnValueOnce('25\\n') // 25 components\n        .mockReturnValueOnce('10\\n') // 10 lazy loaded\n        .mockReturnValueOnce('src/components/LargeComponent.tsx\\nsrc/pages/HeavyPage.tsx\\n') // potential lazy components\n        .mockReturnValueOnce('15\\n') // useEffect count\n        .mockReturnValueOnce('5\\n'); // useSWR count\n      \n      const validation = await bundleOptimizer.validateLazyLoading();\n      \n      expect(validation.componentsAnalyzed).toBe(25);\n      expect(validation.lazyLoadedComponents).toBe(10);\n      expect(validation.score).toBe(40); // 10/25 * 100\n      expect(validation.potentialLazyComponents).toHaveLength(2);\n      expect(validation.dataFetchingOptimizations).toContain('Consider using SWR or React Query for data fetching optimization');\n    });\n\n    it('should handle lazy loading validation errors', async () => {\n      mockExecSync.mockImplementation(() => {\n        throw new Error('Validation failed');\n      });\n      \n      const validation = await bundleOptimizer.validateLazyLoading();\n      \n      expect(validation.componentsAnalyzed).toBe(0);\n      expect(validation.lazyLoadedComponents).toBe(0);\n      expect(validation.score).toBe(0);\n    });\n  });\n\n  describe('bundle size alerts', () => {\n    it('should generate alert when bundle size exceeds target', async () => {\n      mockFs.existsSync.mockReturnValue(false);\n      mockExecSync.mockReturnValue('500000\\n'); // Large source code resulting in 732kB bundle\n      \n      await bundleOptimizer.analyzeBundleSize();\n      \n      const alerts = bundleOptimizer.getCurrentAlerts();\n      expect(alerts.length).toBeGreaterThan(0);\n      \n      const sizeAlert = alerts.find(alert => alert.type === 'size_exceeded');\n      expect(sizeAlert).toBeDefined();\n      expect(sizeAlert?.severity).toBe('critical'); // > 420 * 1.2\n      expect(sizeAlert?.currentValue).toBe(732); // Math.round(500000 / 1024 * 1.5) = 732\n      expect(sizeAlert?.targetValue).toBe(420);\n    });\n\n    it('should generate alert for large chunks', async () => {\n      mockFs.existsSync.mockImplementation((path: string) => {\n        return path === '.next' || path === '.next/static/chunks';\n      });\n      \n      mockFs.readdirSync.mockReturnValue(['large-chunk.js'] as any);\n      mockFs.statSync.mockReturnValue({ size: 150 * 1024 } as any); // 150kB chunk\n      mockExecSync.mockReturnValue('400\\n');\n      \n      await bundleOptimizer.analyzeBundleSize();\n      \n      const alerts = bundleOptimizer.getCurrentAlerts();\n      const chunkAlert = alerts.find(alert => alert.type === 'chunk_too_large');\n      \n      expect(chunkAlert).toBeDefined();\n      expect(chunkAlert?.message).toContain('large-chunk.js');\n      expect(chunkAlert?.currentValue).toBe(150);\n      expect(chunkAlert?.targetValue).toBe(100);\n    });\n\n    it('should generate alert for unused dependencies', async () => {\n      mockFs.existsSync.mockImplementation((path: string) => {\n        return path === 'package.json';\n      });\n      mockFs.readFileSync.mockReturnValue(JSON.stringify({\n        dependencies: {\n          'lodash': '^4.0.0',\n          'moment': '^2.0.0'\n        }\n      }));\n      \n      mockExecSync.mockReturnValue('300000\\n'); // Source size\n      \n      await bundleOptimizer.analyzeBundleSize();\n      \n      const alerts = bundleOptimizer.getCurrentAlerts();\n      const depAlert = alerts.find(alert => alert.type === 'unused_dependency');\n      \n      expect(depAlert).toBeDefined();\n      expect(depAlert?.message).toContain('optional dependency');\n    });\n  });\n\n  describe('generateOptimizationReport', () => {\n    it('should generate comprehensive optimization report', async () => {\n      mockFs.existsSync.mockReturnValue(false);\n      mockExecSync\n        .mockReturnValueOnce('280000\\n') // Source size (410kB bundle)\n        .mockReturnValueOnce('20\\n') // Components\n        .mockReturnValueOnce('8\\n') // Lazy loaded\n        .mockReturnValueOnce('src/components/Heavy.tsx\\n') // Potential lazy\n        .mockReturnValueOnce('10\\n') // useEffect\n        .mockReturnValueOnce('3\\n'); // useSWR\n      \n      const report = await bundleOptimizer.generateOptimizationReport();\n      \n      expect(report.timestamp).toBeInstanceOf(Date);\n      expect(report.analysis.totalSize).toBe(410); // Math.round(280000 / 1024 * 1.5) = 410\n      expect(report.lazyLoadingValidation.score).toBe(40); // 8/20 * 100\n      expect(report.overallScore).toBe(70); // (100 + 40) / 2\n      expect(report.targetCompliance).toBe(true); // 410 <= 420\n      expect(report.recommendations).toBeInstanceOf(Array);\n    });\n\n    it('should indicate non-compliance when bundle exceeds target', async () => {\n      mockFs.existsSync.mockReturnValue(false);\n      mockExecSync\n        .mockReturnValueOnce('350000\\n') // Source size (513kB bundle)\n        .mockReturnValueOnce('15\\n') // Components\n        .mockReturnValueOnce('3\\n') // Lazy loaded\n        .mockReturnValueOnce('') // No potential lazy\n        .mockReturnValueOnce('5\\n') // useEffect\n        .mockReturnValueOnce('2\\n'); // useSWR\n      \n      const report = await bundleOptimizer.generateOptimizationReport();\n      \n      expect(report.analysis.totalSize).toBe(513); // Math.round(350000 / 1024 * 1.5) = 513\n      expect(report.targetCompliance).toBe(false);\n      expect(report.recommendations[0]).toContain('Reduce bundle size by 93kB'); // 513 - 420 = 93\n    });\n  });\n\n  describe('asset analysis', () => {\n    it('should analyze assets correctly', async () => {\n      mockFs.existsSync.mockImplementation((path: string) => {\n        return path === 'public';\n      });\n      \n      // Mock getAllFiles method behavior\n      const mockGetAllFiles = jest.fn().mockReturnValue([\n        'public/image.png',\n        'public/style.css',\n        'public/script.js',\n        'public/font.woff2'\n      ]);\n      \n      (bundleOptimizer as any).getAllFiles = mockGetAllFiles;\n      \n      mockFs.statSync.mockImplementation((path: string) => {\n        const sizes: Record<string, number> = {\n          'public/image.png': 100 * 1024, // 100kB\n          'public/style.css': 20 * 1024,  // 20kB\n          'public/script.js': 50 * 1024,  // 50kB\n          'public/font.woff2': 30 * 1024  // 30kB\n        };\n        return { size: sizes[path] || 1024 } as any;\n      });\n      \n      mockExecSync.mockReturnValue('300000\\n');\n      \n      const analysis = await bundleOptimizer.analyzeBundleSize();\n      \n      expect(analysis.assets).toHaveLength(4);\n      expect(analysis.assets[0].size).toBe(100); // Largest first\n      expect(analysis.assets[0].type).toBe('image');\n      expect(analysis.assets.find(a => a.type === 'css')).toBeDefined();\n      expect(analysis.assets.find(a => a.type === 'js')).toBeDefined();\n      expect(analysis.assets.find(a => a.type === 'font')).toBeDefined();\n    });\n  });\n\n  describe('dependency analysis', () => {\n    it('should analyze dependencies for bundle impact', async () => {\n      mockFs.existsSync.mockImplementation((path: string) => {\n        return path === 'package.json';\n      });\n      mockFs.readFileSync.mockReturnValue(JSON.stringify({\n        dependencies: {\n          'react': '^18.0.0',\n          'react-dom': '^18.0.0',\n          'lodash': '^4.0.0',\n          'chart.js': '^3.0.0'\n        }\n      }));\n      \n      mockExecSync.mockReturnValue('300000\\n');\n      \n      const analysis = await bundleOptimizer.analyzeBundleSize();\n      \n      expect(analysis.dependencies).toHaveLength(4);\n      expect(analysis.dependencies[0].name).toBe('react-dom'); // Largest first (130kB)\n      expect(analysis.dependencies.find(d => d.name === 'react')?.usage).toBe('critical');\n      expect(analysis.dependencies.find(d => d.name === 'lodash')?.alternatives).toContain('ramda (functional)');\n    });\n  });\n\n  describe('alert management', () => {\n    it('should manage alerts correctly', () => {\n      const initialAlerts = bundleOptimizer.getCurrentAlerts();\n      expect(initialAlerts).toHaveLength(0);\n      \n      // Trigger alert by analyzing large bundle\n      mockFs.existsSync.mockReturnValue(false);\n      mockExecSync.mockReturnValue('500000\\n'); // Large bundle\n      \n      return bundleOptimizer.analyzeBundleSize().then(() => {\n        const alertsAfterAnalysis = bundleOptimizer.getCurrentAlerts();\n        expect(alertsAfterAnalysis.length).toBeGreaterThan(0);\n        \n        bundleOptimizer.clearAlerts();\n        \n        const alertsAfterClear = bundleOptimizer.getCurrentAlerts();\n        expect(alertsAfterClear).toHaveLength(0);\n      });\n    });\n  });\n\n  describe('data export', () => {\n    it('should export bundle data to file', async () => {\n      mockFs.writeFileSync.mockImplementation(() => {});\n      mockFs.existsSync.mockReturnValue(false);\n      mockExecSync\n        .mockReturnValueOnce('300000\\n') // Bundle analysis\n        .mockReturnValueOnce('15\\n') // Components\n        .mockReturnValueOnce('5\\n') // Lazy loaded\n        .mockReturnValueOnce('') // Potential lazy\n        .mockReturnValueOnce('8\\n') // useEffect\n        .mockReturnValueOnce('3\\n'); // useSWR\n      \n      await bundleOptimizer.exportBundleData('./test-bundle-data.json');\n      \n      expect(mockFs.writeFileSync).toHaveBeenCalledWith(\n        './test-bundle-data.json',\n        expect.stringContaining('\"timestamp\"')\n      );\n    });\n\n    it('should handle export errors gracefully', async () => {\n      mockFs.writeFileSync.mockImplementation(() => {\n        throw new Error('Write failed');\n      });\n      \n      await expect(\n        bundleOptimizer.exportBundleData('./test-bundle-data.json')\n      ).rejects.toThrow('Failed to export bundle data');\n    });\n  });\n\n  describe('helper methods', () => {\n    it('should identify heavy dependencies correctly', () => {\n      const isHeavy = (bundleOptimizer as any).isLikelyHeavyDependency;\n      \n      expect(isHeavy('@chakra-ui/react')).toBe(true);\n      expect(isHeavy('react-table')).toBe(true);\n      expect(isHeavy('chart-library')).toBe(true);\n      expect(isHeavy('simple-util')).toBe(false);\n    });\n\n    it('should estimate dependency sizes correctly', async () => {\n      const estimateSize = (bundleOptimizer as any).estimateDependencySize;\n      \n      expect(await estimateSize('react')).toBe(45);\n      expect(await estimateSize('react-dom')).toBe(130);\n      expect(await estimateSize('unknown-package')).toBe(20); // Default\n    });\n\n    it('should analyze dependency usage correctly', () => {\n      const analyzeUsage = (bundleOptimizer as any).analyzeDependencyUsage;\n      \n      expect(analyzeUsage('react')).toBe('critical');\n      expect(analyzeUsage('@chakra-ui/react')).toBe('important');\n      expect(analyzeUsage('lodash')).toBe('optional');\n    });\n\n    it('should suggest alternatives correctly', () => {\n      const suggestAlternatives = (bundleOptimizer as any).suggestAlternatives;\n      \n      expect(suggestAlternatives('lodash')).toContain('ramda (functional)');\n      expect(suggestAlternatives('moment')).toContain('date-fns (smaller)');\n      expect(suggestAlternatives('unknown-package')).toEqual([]);\n    });\n  });\n});"],"version":3}