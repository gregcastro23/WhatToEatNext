808cb0478ff6f50a042339e745368867
"use strict";
'use client';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const logger_1 = require("@/utils/logger");
const RecipeBuilderSimple = (0, react_1.memo)(function RecipeBuilderSimple({ initialIngredients = [], initialMethods = [], onRecipeComplete, onSave }) {
    const [recipeName, setRecipeName] = (0, react_1.useState)('');
    const [ingredients, setIngredients] = (0, react_1.useState)([]);
    const [steps, setSteps] = (0, react_1.useState)([]);
    const [servings, setServings] = (0, react_1.useState)(4);
    const [prepTime, setPrepTime] = (0, react_1.useState)(15);
    const [cookTime, setCookTime] = (0, react_1.useState)(30);
    const addIngredient = (0, react_1.useCallback)(() => {
        setIngredients(prev => [...prev, { name: '', quantity: '', preparation: '' }]);
    }, []);
    const updateIngredient = (0, react_1.useCallback)((index, field, value) => {
        setIngredients(prev => prev.map((ing, i) => i === index ? { ...ing, [field]: value } : ing));
    }, []);
    const removeIngredient = (0, react_1.useCallback)((index) => {
        setIngredients(prev => prev.filter((_, i) => i !== index));
    }, []);
    const addStep = (0, react_1.useCallback)(() => {
        setSteps(prev => [...prev, { step: prev.length + 1, instruction: '', timing: '' }]);
    }, []);
    const updateStep = (0, react_1.useCallback)((index, field, value) => {
        setSteps(prev => prev.map((step, i) => i === index ? { ...step, [field]: value } : step));
    }, []);
    const removeStep = (0, react_1.useCallback)((index) => {
        setSteps(prev => prev.filter((_, i) => i !== index).map((step, i) => ({ ...step, step: i + 1 })));
    }, []);
    // Memoize expensive calculations
    const totalTime = (0, react_1.useMemo)(() => prepTime + cookTime, [prepTime, cookTime]);
    const isRecipeValid = (0, react_1.useMemo)(() => recipeName.trim() && ingredients.length > 0 && steps.length > 0, [recipeName, ingredients.length, steps.length]);
    const recipeSummary = (0, react_1.useMemo)(() => ({
        name: recipeName,
        servings,
        totalTime,
        ingredientCount: ingredients.length,
        stepCount: steps.length
    }), [recipeName, servings, totalTime, ingredients.length, steps.length]);
    const saveRecipe = (0, react_1.useCallback)(() => {
        const recipe = {
            id: `recipe_${Date.now()}`,
            name: recipeName || 'Untitled Recipe',
            ingredients,
            steps,
            servings,
            prepTime,
            cookTime,
            totalTime,
            createdAt: new Date().toISOString()
        };
        logger_1.logger.info('Saving recipe:', recipe);
        onSave === null || onSave === void 0 ? void 0 : onSave(recipe);
        onRecipeComplete === null || onRecipeComplete === void 0 ? void 0 : onRecipeComplete(recipe);
    }, [recipeName, ingredients, steps, servings, prepTime, cookTime, totalTime, onSave, onRecipeComplete]);
    return ((0, jsx_runtime_1.jsxs)("div", { className: "bg-white rounded-lg shadow-md p-6", children: [(0, jsx_runtime_1.jsxs)("div", { className: "mb-6", children: [(0, jsx_runtime_1.jsx)("h3", { className: "text-xl font-semibold mb-4 text-gray-800", children: "Create Your Recipe" }), (0, jsx_runtime_1.jsxs)("div", { className: "mb-4", children: [(0, jsx_runtime_1.jsx)("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Recipe Name" }), (0, jsx_runtime_1.jsx)("input", { type: "text", value: recipeName, onChange: (e) => setRecipeName(e.target.value), placeholder: "Enter recipe name...", className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4 mb-6", children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Servings" }), (0, jsx_runtime_1.jsx)("input", { type: "number", value: servings, onChange: (e) => setServings(parseInt(e.target.value) || 1), min: "1", max: "20", className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500" })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Prep Time (min)" }), (0, jsx_runtime_1.jsx)("input", { type: "number", value: prepTime, onChange: (e) => setPrepTime(parseInt(e.target.value) || 0), min: "0", className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500" })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Cook Time (min)" }), (0, jsx_runtime_1.jsx)("input", { type: "number", value: cookTime, onChange: (e) => setCookTime(parseInt(e.target.value) || 0), min: "0", className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500" })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "mb-6", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between mb-4", children: [(0, jsx_runtime_1.jsx)("h4", { className: "text-lg font-medium text-gray-800", children: "Ingredients" }), (0, jsx_runtime_1.jsx)("button", { onClick: addIngredient, className: "bg-indigo-600 text-white px-3 py-1 rounded text-sm hover:bg-indigo-700 transition-colors", children: "Add Ingredient" })] }), ingredients.length === 0 ? ((0, jsx_runtime_1.jsx)("p", { className: "text-gray-500 text-center py-4", children: "No ingredients added yet. Click \"Add Ingredient\" to start." })) : ((0, jsx_runtime_1.jsx)("div", { className: "space-y-3", children: ingredients.map((ingredient, index) => ((0, jsx_runtime_1.jsxs)("div", { className: "flex gap-3 items-center bg-gray-50 p-3 rounded", children: [(0, jsx_runtime_1.jsx)("input", { type: "text", value: ingredient.quantity, onChange: (e) => updateIngredient(index, 'quantity', e.target.value), placeholder: "1 cup", className: "w-24 px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-indigo-500" }), (0, jsx_runtime_1.jsx)("input", { type: "text", value: ingredient.name, onChange: (e) => updateIngredient(index, 'name', e.target.value), placeholder: "Ingredient name", className: "flex-1 px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-indigo-500" }), (0, jsx_runtime_1.jsx)("input", { type: "text", value: ingredient.preparation, onChange: (e) => updateIngredient(index, 'preparation', e.target.value), placeholder: "diced, chopped...", className: "w-32 px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-indigo-500" }), (0, jsx_runtime_1.jsx)("button", { onClick: () => removeIngredient(index), className: "text-red-600 hover:text-red-800 p-1", title: "Remove ingredient", children: "\u00D7" })] }, index))) }))] }), (0, jsx_runtime_1.jsxs)("div", { className: "mb-6", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between mb-4", children: [(0, jsx_runtime_1.jsx)("h4", { className: "text-lg font-medium text-gray-800", children: "Instructions" }), (0, jsx_runtime_1.jsx)("button", { onClick: addStep, className: "bg-indigo-600 text-white px-3 py-1 rounded text-sm hover:bg-indigo-700 transition-colors", children: "Add Step" })] }), steps.length === 0 ? ((0, jsx_runtime_1.jsx)("p", { className: "text-gray-500 text-center py-4", children: "No steps added yet. Click \"Add Step\" to start." })) : ((0, jsx_runtime_1.jsx)("div", { className: "space-y-3", children: steps.map((step, index) => ((0, jsx_runtime_1.jsxs)("div", { className: "flex gap-3 items-start bg-gray-50 p-3 rounded", children: [(0, jsx_runtime_1.jsx)("span", { className: "bg-indigo-600 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-medium mt-1", children: step.step }), (0, jsx_runtime_1.jsx)("textarea", { value: step.instruction, onChange: (e) => updateStep(index, 'instruction', e.target.value), placeholder: "Describe this step...", rows: 2, className: "flex-1 px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-indigo-500 resize-none" }), (0, jsx_runtime_1.jsx)("input", { type: "text", value: step.timing || '', onChange: (e) => updateStep(index, 'timing', e.target.value), placeholder: "5 min", className: "w-20 px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-indigo-500" }), (0, jsx_runtime_1.jsx)("button", { onClick: () => removeStep(index), className: "text-red-600 hover:text-red-800 p-1", title: "Remove step", children: "\u00D7" })] }, index))) }))] }), (0, jsx_runtime_1.jsx)("div", { className: "flex justify-end", children: (0, jsx_runtime_1.jsx)("button", { onClick: saveRecipe, disabled: !isRecipeValid, className: "bg-green-600 text-white px-6 py-2 rounded font-medium hover:bg-green-700 transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed", children: "Save Recipe" }) }), recipeSummary.name && recipeSummary.ingredientCount > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: "mt-6 p-4 bg-indigo-50 rounded-lg", children: [(0, jsx_runtime_1.jsx)("h5", { className: "font-medium text-indigo-800 mb-2", children: "Recipe Summary" }), (0, jsx_runtime_1.jsxs)("div", { className: "text-sm text-indigo-700", children: [(0, jsx_runtime_1.jsx)("p", { children: (0, jsx_runtime_1.jsx)("strong", { children: recipeSummary.name }) }), (0, jsx_runtime_1.jsxs)("p", { children: ["Serves ", recipeSummary.servings, " \u2022 Total time: ", recipeSummary.totalTime, " minutes"] }), (0, jsx_runtime_1.jsxs)("p", { children: [recipeSummary.ingredientCount, " ingredients \u2022 ", recipeSummary.stepCount, " steps"] })] })] }))] }));
});
exports.default = RecipeBuilderSimple;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,