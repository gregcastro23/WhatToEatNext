190d4f4d2cca8c25d0457433840a9f5e
"use strict";
/**
 * Tests for TestMemoryMonitor class
 *
 * These tests verify that the memory management system works correctly
 * and can detect memory issues, perform cleanup, and track usage.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const TestMemoryMonitor_1 = require("./TestMemoryMonitor");
describe('TestMemoryMonitor', () => {
    let monitor;
    beforeEach(() => {
        monitor = new TestMemoryMonitor_1.TestMemoryMonitor({
            warningThreshold: 10,
            errorThreshold: 50,
            leakThreshold: 5
        });
    });
    afterEach(() => {
        if (monitor) {
            monitor.cleanup('test-cleanup');
        }
    });
    describe('Memory Snapshot Management', () => {
        it('should take initial memory snapshot', () => {
            const snapshot = monitor.takeSnapshot('test-snapshot');
            expect(snapshot).toBeDefined();
            expect(snapshot.heapUsed).toBeGreaterThan(0);
            expect(snapshot.heapTotal).toBeGreaterThan(0);
            expect(snapshot.timestamp).toBeGreaterThan(0);
            expect(snapshot.testName).toBe('test-snapshot');
        });
        it('should track multiple snapshots', () => {
            monitor.takeSnapshot('snapshot-1');
            monitor.takeSnapshot('snapshot-2');
            monitor.takeSnapshot('snapshot-3');
            const summary = monitor.getMemorySummary();
            expect(summary.snapshotCount).toBeGreaterThanOrEqual(4); // Including initial snapshot
        });
    });
    describe('Memory Usage Checking', () => {
        it('should check memory usage against thresholds', () => {
            const result = monitor.checkMemoryUsage('threshold-test');
            expect(result).toBeDefined();
            expect(result.isWithinLimits).toBeDefined();
            expect(result.warnings).toBeInstanceOf(Array);
            expect(result.errors).toBeInstanceOf(Array);
            expect(result.currentUsage).toBeDefined();
        });
        it('should detect when memory usage is within limits', () => {
            // For normal test execution, memory should be within limits
            const result = monitor.checkMemoryUsage('normal-test');
            expect(result.isWithinLimits).toBe(true);
            expect(result.errors).toHaveLength(0);
        });
        it('should generate warnings for high memory usage', () => {
            // Create a monitor with very low thresholds to trigger warnings
            const strictMonitor = new TestMemoryMonitor_1.TestMemoryMonitor({
                warningThreshold: 1,
                errorThreshold: 1000,
                leakThreshold: 1
            });
            const result = strictMonitor.checkMemoryUsage('warning-test');
            // Should generate warnings due to low threshold
            expect(result.warnings.length).toBeGreaterThan(0);
            strictMonitor.cleanup('strict-cleanup');
        });
    });
    describe('Memory Leak Detection', () => {
        it('should detect potential memory leaks', () => {
            // Take initial snapshot
            monitor.takeSnapshot('leak-test-start');
            // Simulate memory allocation (create large array)
            const largeArray = new Array(100000).fill('test-data');
            // Take another snapshot
            monitor.takeSnapshot('leak-test-after-allocation');
            const leakAnalysis = monitor.detectMemoryLeaks();
            expect(leakAnalysis).toBeDefined();
            expect(leakAnalysis.hasLeaks).toBeDefined();
            expect(leakAnalysis.leakDetails).toBeInstanceOf(Array);
            // Clean up the large array
            largeArray.length = 0;
        });
        it('should not detect leaks for normal memory usage', () => {
            monitor.takeSnapshot('normal-1');
            monitor.takeSnapshot('normal-2');
            const leakAnalysis = monitor.detectMemoryLeaks();
            // Should not detect significant leaks for normal test operations
            expect(leakAnalysis.hasLeaks).toBe(false);
        });
    });
    describe('Garbage Collection', () => {
        it('should attempt garbage collection when available', () => {
            const gcResult = monitor.forceGarbageCollection();
            // Result depends on whether --expose-gc flag is set
            expect(typeof gcResult).toBe('boolean');
        });
        it('should perform cleanup operations', () => {
            const memoryBefore = process.memoryUsage().heapUsed;
            const cleanupResult = monitor.cleanup('cleanup-test');
            expect(cleanupResult).toBeDefined();
            expect(cleanupResult.memoryBefore).toBeGreaterThan(0);
            expect(cleanupResult.memoryAfter).toBeGreaterThan(0);
            expect(typeof cleanupResult.gcPerformed).toBe('boolean');
            expect(typeof cleanupResult.cleanupEffective).toBe('boolean');
        });
    });
    describe('Memory Summary and Reporting', () => {
        it('should generate memory summary', () => {
            // Take a few snapshots to have data
            monitor.takeSnapshot('summary-test-1');
            monitor.takeSnapshot('summary-test-2');
            const summary = monitor.getMemorySummary();
            expect(summary).toBeDefined();
            expect(summary.initialMemory).toBeGreaterThan(0);
            expect(summary.currentMemory).toBeGreaterThan(0);
            expect(summary.peakMemory).toBeGreaterThan(0);
            expect(summary.snapshotCount).toBeGreaterThan(0);
            expect(summary.testDuration).toBeGreaterThan(0);
        });
        it('should generate detailed memory report', () => {
            monitor.takeSnapshot('report-test');
            const report = monitor.generateReport();
            expect(typeof report).toBe('string');
            expect(report).toContain('Memory Usage Report');
            expect(report).toContain('Initial Memory:');
            expect(report).toContain('Current Memory:');
            expect(report).toContain('Peak Memory:');
        });
    });
    describe('Static Factory Methods', () => {
        it('should create default monitor', () => {
            const defaultMonitor = TestMemoryMonitor_1.TestMemoryMonitor.createDefault();
            expect(defaultMonitor).toBeInstanceOf(TestMemoryMonitor_1.TestMemoryMonitor);
            defaultMonitor.cleanup('default-cleanup');
        });
        it('should create CI monitor with stricter settings', () => {
            const ciMonitor = TestMemoryMonitor_1.TestMemoryMonitor.createForCI();
            expect(ciMonitor).toBeInstanceOf(TestMemoryMonitor_1.TestMemoryMonitor);
            ciMonitor.cleanup('ci-cleanup');
        });
    });
    describe('Integration with Global Test Utilities', () => {
        it('should work with global memory utilities', () => {
            // Test global memory checking utility
            const memoryUsage = global.testUtils.checkMemory();
            expect(memoryUsage).toBeDefined();
            expect(memoryUsage.heapUsed).toMatch(/\d+\.\d+MB/);
            expect(memoryUsage.heapTotal).toMatch(/\d+\.\d+MB/);
        });
        it('should work with global cleanup utility', () => {
            const cleanupResult = global.testUtils.cleanupMemory();
            // Should not throw and should return some result
            expect(cleanupResult).toBeDefined();
        });
        it('should work with global garbage collection utility', () => {
            if (global.forceGC) {
                const gcResult = global.forceGC();
                expect(typeof gcResult).toBe('boolean');
            }
        });
    });
    describe('Memory Thresholds and Limits', () => {
        it('should respect custom memory thresholds', () => {
            const customMonitor = new TestMemoryMonitor_1.TestMemoryMonitor({
                warningThreshold: 25,
                errorThreshold: 100,
                leakThreshold: 10
            });
            const result = customMonitor.checkMemoryUsage('custom-threshold-test');
            expect(result).toBeDefined();
            customMonitor.cleanup('custom-cleanup');
        });
        it('should handle edge cases in memory calculations', () => {
            // Test with zero or negative values (shouldn't happen in practice)
            const snapshot = monitor.takeSnapshot('edge-case-test');
            expect(snapshot.heapUsed).toBeGreaterThan(0);
            expect(snapshot.heapTotal).toBeGreaterThan(0);
        });
    });
    describe('Error Handling', () => {
        it('should handle errors gracefully during cleanup', () => {
            // This test ensures the monitor doesn't crash on cleanup errors
            expect(() => {
                monitor.cleanup('error-handling-test');
            }).not.toThrow();
        });
        it('should handle missing global.gc gracefully', () => {
            // Temporarily remove global.gc if it exists
            const originalGC = global.gc;
            delete global.gc;
            const gcResult = monitor.forceGarbageCollection();
            expect(gcResult).toBe(false);
            // Restore global.gc if it existed
            if (originalGC) {
                global.gc = originalGC;
            }
        });
    });
});
// Integration test for memory management setup
describe('Memory Management Integration', () => {
    it('should have memory management utilities available globally', () => {
        expect(global.testUtils).toBeDefined();
        expect(global.testUtils.checkMemory).toBeDefined();
        expect(global.testUtils.cleanupMemory).toBeDefined();
    });
    it('should track memory usage across test execution', () => {
        const initialMemory = global.testUtils.checkMemory();
        // Simulate some memory allocation
        const testData = new Array(1000).fill('test');
        const afterAllocationMemory = global.testUtils.checkMemory();
        // Clean up
        testData.length = 0;
        global.testUtils.cleanupMemory();
        expect(initialMemory).toBeDefined();
        expect(afterAllocationMemory).toBeDefined();
    });
    it('should handle memory cleanup without errors', () => {
        expect(() => {
            global.testUtils.cleanupMemory();
        }).not.toThrow();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,