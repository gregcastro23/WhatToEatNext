{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/linting/DomainSpecificRuleBehavior.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/linting/DomainSpecificRuleBehavior.test.ts"],"sourcesContent":["/**\n * Domain-Specific Rule Behavior Tests\n * \n * Tests the behavior of domain-specific linting rules for astrological calculations\n * by directly testing the rule logic and integration patterns.\n */\n\nimport { validateElementalProperties, normalizeElementalProperties } from '@/utils/astrology/elementalValidation';\nimport { validatePlanetaryPositions } from '@/utils/astrology/astrologicalValidation';\nimport { validateTransitDate } from '@/utils/astrology/transitValidation';\n\ndescribe('Domain-Specific Rule Behavior', () => {\n  describe('Planetary Constants Preservation', () => {\n    test('should identify protected planetary constants', () => {\n      const PROTECTED_CONSTANTS = [\n        'DEGREES_PER_SIGN',\n        'SIGNS_PER_CIRCLE',\n        'MAX_LONGITUDE',\n        'RELIABLE_POSITIONS',\n        'MARCH2025_POSITIONS',\n        'FALLBACK_POSITIONS',\n        'TRANSIT_DATES',\n        'RETROGRADE_PHASES',\n        'ELEMENTAL_COMPATIBILITY',\n        'SELF_REINFORCEMENT_THRESHOLD',\n        'HARMONY_THRESHOLD'\n      ];\n\n      // Test that these constants are recognized as protected\n      PROTECTED_CONSTANTS.forEach(constant => {\n        expect(constant).toMatch(/^[A-Z0-9_]+$/); // Should be uppercase with underscores and numbers\n        expect(constant.length).toBeGreaterThan(3); // Should be meaningful names\n      });\n    });\n\n    test('should preserve mathematical constants in calculations', () => {\n      const DEGREES_PER_SIGN = 30;\n      const SIGNS_PER_CIRCLE = 12;\n      const MAX_LONGITUDE = 360;\n\n      // These values should never change\n      expect(DEGREES_PER_SIGN).toBe(30);\n      expect(SIGNS_PER_CIRCLE).toBe(12);\n      expect(MAX_LONGITUDE).toBe(360);\n      expect(DEGREES_PER_SIGN * SIGNS_PER_CIRCLE).toBe(MAX_LONGITUDE);\n    });\n\n    test('should preserve fallback position structures', () => {\n      const RELIABLE_POSITIONS = {\n        sun: { sign: 'aries', degree: 8.5, exactLongitude: 8.5, isRetrograde: false },\n        moon: { sign: 'aries', degree: 1.57, exactLongitude: 1.57, isRetrograde: false },\n        mercury: { sign: 'aries', degree: 0.85, exactLongitude: 0.85, isRetrograde: true }\n      };\n\n      // Fallback positions should maintain structure\n      Object.values(RELIABLE_POSITIONS).forEach(position => {\n        expect(position).toHaveProperty('sign');\n        expect(position).toHaveProperty('degree');\n        expect(position).toHaveProperty('exactLongitude');\n        expect(position).toHaveProperty('isRetrograde');\n        expect(typeof position.degree).toBe('number');\n        expect(typeof position.isRetrograde).toBe('boolean');\n      });\n    });\n  });\n\n  describe('Planetary Position Structure Validation', () => {\n    test('should validate complete planetary position objects', () => {\n      const validPosition = {\n        sign: 'aries',\n        degree: 15.5,\n        exactLongitude: 15.5,\n        isRetrograde: false\n      };\n\n      const positions = { \n        sun: validPosition,\n        moon: validPosition,\n        mercury: validPosition,\n        venus: validPosition,\n        mars: validPosition,\n        jupiter: validPosition,\n        saturn: validPosition\n      };\n      const result = validatePlanetaryPositions(positions);\n      \n      expect(result.isValid).toBe(true);\n      expect(result.errors).toHaveLength(0);\n    });\n\n    test('should detect missing required properties', () => {\n      const incompletePosition = {\n        sign: 'aries',\n        degree: 15.5\n        // Missing exactLongitude and isRetrograde\n      };\n\n      const positions = { sun: incompletePosition };\n      const result = validatePlanetaryPositions(positions);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors.some(error => error.includes('exactLongitude'))).toBe(true);\n      expect(result.errors.some(error => error.includes('isRetrograde'))).toBe(true);\n    });\n\n    test('should validate planetary position value ranges', () => {\n      const invalidPosition = {\n        sign: 'aries',\n        degree: 35, // Too high (should be < 30)\n        exactLongitude: 35,\n        isRetrograde: false\n      };\n\n      const positions = { sun: invalidPosition };\n      const result = validatePlanetaryPositions(positions, { strictMode: true });\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors.some(error => error.includes('35'))).toBe(true);\n    });\n\n    test('should handle retrograde validation correctly', () => {\n      const sunRetrograde = {\n        sign: 'aries',\n        degree: 15,\n        exactLongitude: 15,\n        isRetrograde: true // Sun cannot be retrograde\n      };\n\n      const positions = { sun: sunRetrograde };\n      const result = validatePlanetaryPositions(positions);\n      \n      expect(result.warnings.some(warning => warning.includes('cannot be retrograde'))).toBe(true);\n    });\n  });\n\n  describe('Elemental Properties Validation', () => {\n    test('should validate four-element system structure', () => {\n      const validProperties = {\n        Fire: 0.7,\n        Water: 0.1,\n        Earth: 0.1,\n        Air: 0.1\n      };\n\n      expect(validateElementalProperties(validProperties)).toBe(true);\n    });\n\n    test('should reject missing elements', () => {\n      const incompleteProperties = {\n        Fire: 0.8,\n        Water: 0.2\n        // Missing Earth and Air\n      };\n\n      expect(validateElementalProperties(incompleteProperties)).toBe(false);\n    });\n\n    test('should validate element value ranges', () => {\n      const invalidProperties = {\n        Fire: 1.5, // Too high\n        Water: -0.1, // Too low\n        Earth: 0.3,\n        Air: 0.2\n      };\n\n      expect(validateElementalProperties(invalidProperties)).toBe(false);\n    });\n\n    test('should normalize elemental properties when needed', () => {\n      const partialProperties = {\n        Fire: 0.8,\n        Water: 0.2\n      };\n\n      const normalized = normalizeElementalProperties(partialProperties);\n      \n      expect(normalized.Fire).toBe(0.8);\n      expect(normalized.Water).toBe(0.2);\n      expect(normalized.Earth).toBe(0.25); // Default value\n      expect(normalized.Air).toBe(0.25); // Default value\n      expect(validateElementalProperties(normalized)).toBe(true);\n    });\n\n    test('should preserve self-reinforcement patterns', () => {\n      const fireProperties = {\n        Fire: 0.8, // Dominant element\n        Water: 0.1,\n        Earth: 0.05,\n        Air: 0.05\n      };\n\n      expect(validateElementalProperties(fireProperties)).toBe(true);\n      \n      // Fire should remain the dominant element\n      const maxElement = Object.entries(fireProperties).reduce((max, current) => \n        current[1] > max[1] ? current : max\n      );\n      expect(maxElement[0]).toBe('Fire');\n      expect(maxElement[1]).toBeGreaterThanOrEqual(0.7); // Strong self-reinforcement\n    });\n  });\n\n  describe('Transit Date Validation Patterns', () => {\n    test('should validate transit date structures', () => {\n      const mockTransitDates = {\n        aries: { Start: '2024-03-20', End: '2024-04-19' },\n        taurus: { Start: '2024-04-20', End: '2024-05-20' }\n      };\n\n      const validDate = new Date('2024-04-01');\n      const result = validateTransitDate('mars', validDate, 'aries', mockTransitDates);\n      \n      expect(result).toBe(true);\n    });\n\n    test('should detect invalid transit dates', () => {\n      const mockTransitDates = {\n        aries: { Start: '2024-03-20', End: '2024-04-19' }\n      };\n\n      const invalidDate = new Date('2024-05-01'); // Outside aries period\n      const result = validateTransitDate('mars', invalidDate, 'aries', mockTransitDates);\n      \n      expect(result).toBe(false);\n    });\n\n    test('should handle missing transit data gracefully', () => {\n      const emptyTransitDates = {};\n      const testDate = new Date('2024-04-01');\n      \n      const result = validateTransitDate('mars', testDate, 'aries', emptyTransitDates);\n      expect(result).toBe(false); // Should fail gracefully\n    });\n  });\n\n  describe('Fallback Value Preservation', () => {\n    test('should identify fallback variable patterns', () => {\n      const FALLBACK_PATTERNS = [\n        /FALLBACK/i,\n        /DEFAULT/i,\n        /RELIABLE/i,\n        /MARCH2025/i,\n        /BACKUP/i,\n        /CACHED/i\n      ];\n\n      const fallbackVariables = [\n        'FALLBACK_POSITIONS',\n        'DEFAULT_ELEMENTS',\n        'RELIABLE_DATA',\n        'MARCH2025_POSITIONS',\n        'BACKUP_CALCULATIONS',\n        'CACHED_RESULTS'\n      ];\n\n      fallbackVariables.forEach(variable => {\n        const matchesPattern = FALLBACK_PATTERNS.some(pattern => pattern.test(variable));\n        expect(matchesPattern).toBe(true);\n      });\n    });\n\n    test('should preserve fallback data integrity', () => {\n      const FALLBACK_POSITIONS = {\n        sun: { sign: 'aries', degree: 8.5, exactLongitude: 8.5, isRetrograde: false },\n        moon: { sign: 'aries', degree: 1.57, exactLongitude: 1.57, isRetrograde: false }\n      };\n\n      // Fallback data should never be null or undefined\n      expect(FALLBACK_POSITIONS).not.toBeNull();\n      expect(FALLBACK_POSITIONS).not.toBeUndefined();\n      expect(Object.keys(FALLBACK_POSITIONS).length).toBeGreaterThan(0);\n      \n      // Each fallback position should be valid\n      Object.values(FALLBACK_POSITIONS).forEach(position => {\n        expect(position).not.toBeNull();\n        expect(position).not.toBeUndefined();\n        expect(position.sign).toBeDefined();\n        expect(typeof position.degree).toBe('number');\n      });\n    });\n\n    test('should maintain fallback value types', () => {\n      const RELIABLE_CONSTANTS = {\n        DEGREES_PER_SIGN: 30,\n        SELF_REINFORCEMENT_THRESHOLD: 0.3,\n        HARMONY_THRESHOLD: 0.7\n      };\n\n      // Constants should maintain their types\n      expect(typeof RELIABLE_CONSTANTS.DEGREES_PER_SIGN).toBe('number');\n      expect(typeof RELIABLE_CONSTANTS.SELF_REINFORCEMENT_THRESHOLD).toBe('number');\n      expect(typeof RELIABLE_CONSTANTS.HARMONY_THRESHOLD).toBe('number');\n      \n      // Values should be within expected ranges\n      expect(RELIABLE_CONSTANTS.DEGREES_PER_SIGN).toBe(30);\n      expect(RELIABLE_CONSTANTS.SELF_REINFORCEMENT_THRESHOLD).toBeGreaterThan(0);\n      expect(RELIABLE_CONSTANTS.HARMONY_THRESHOLD).toBeGreaterThan(0.5);\n    });\n  });\n\n  describe('Domain-Specific Variable Patterns', () => {\n    test('should recognize astrological variable naming patterns', () => {\n      const astrologicalVariables = [\n        'planet',\n        'position',\n        'degree',\n        'sign',\n        'longitude',\n        'retrograde',\n        'planetaryPosition',\n        'transitDate',\n        'elementalProperties'\n      ];\n\n      astrologicalVariables.forEach(variable => {\n        // Should follow camelCase or contain astrological terms\n        expect(variable).toMatch(/^[a-z][a-zA-Z]*$/);\n        \n        // Should contain meaningful astrological terms\n        const astrologicalTerms = ['planet', 'position', 'degree', 'sign', 'longitude', 'retrograde', 'transit', 'elemental'];\n        const containsAstrologicalTerm = astrologicalTerms.some(term => \n          variable.toLowerCase().includes(term.toLowerCase())\n        );\n        expect(containsAstrologicalTerm).toBe(true);\n      });\n    });\n\n    test('should preserve calculation accuracy variables', () => {\n      const accuracyVariables = [\n        'exactLongitude',\n        'precisePosition',\n        'calculatedDegree',\n        'validatedTransit'\n      ];\n\n      accuracyVariables.forEach(variable => {\n        // Should indicate precision or validation\n        const precisionTerms = ['exact', 'precise', 'calculated', 'validated'];\n        const indicatesPrecision = precisionTerms.some(term => \n          variable.toLowerCase().includes(term.toLowerCase())\n        );\n        expect(indicatesPrecision).toBe(true);\n      });\n    });\n\n    test('should handle mathematical calculation variables', () => {\n      const mathVariables = [\n        'DEGREES_PER_SIGN',\n        'SIGNS_PER_CIRCLE',\n        'MAX_LONGITUDE',\n        'PI',\n        'RADIANS_TO_DEGREES'\n      ];\n\n      mathVariables.forEach(variable => {\n        // Mathematical constants should be uppercase\n        if (variable.includes('_')) {\n          expect(variable).toMatch(/^[A-Z_]+$/);\n        }\n        \n        // Should contain mathematical terms\n        const mathTerms = ['DEGREES', 'SIGNS', 'LONGITUDE', 'PI', 'RADIANS'];\n        const containsMathTerm = mathTerms.some(term => \n          variable.includes(term)\n        );\n        expect(containsMathTerm).toBe(true);\n      });\n    });\n  });\n\n  describe('Integration with Existing Linting Rules', () => {\n    test('should work with TypeScript strict mode', () => {\n      // Test that our domain-specific rules don't conflict with TypeScript\n      interface PlanetaryPosition {\n        sign: string;\n        degree: number;\n        exactLongitude: number;\n        isRetrograde: boolean;\n      }\n\n      const position: PlanetaryPosition = {\n        sign: 'aries',\n        degree: 15.5,\n        exactLongitude: 15.5,\n        isRetrograde: false\n      };\n\n      // Should validate correctly with TypeScript types\n      const positions = { \n        sun: position,\n        moon: position,\n        mercury: position,\n        venus: position,\n        mars: position,\n        jupiter: position,\n        saturn: position\n      };\n      const result = validatePlanetaryPositions(positions);\n      expect(result.isValid).toBe(true);\n    });\n\n    test('should preserve unused variable patterns for astrological context', () => {\n      // These variables should be preserved even if \"unused\"\n      const _planetaryCalculation = 'preserved for astrological accuracy';\n      const UNUSED_fallbackPosition = { sign: 'aries', degree: 0 };\n      const planet_mercury = 'domain-specific naming';\n      const degree_calculation = 15.5;\n\n      // These should be recognized as intentionally preserved\n      expect(_planetaryCalculation).toBeDefined();\n      expect(UNUSED_fallbackPosition).toBeDefined();\n      expect(planet_mercury).toBeDefined();\n      expect(degree_calculation).toBeDefined();\n    });\n\n    test('should allow console statements for astronomical debugging', () => {\n      const debugAstronomicalCalculation = (planet: string, position: any) => {\n        console.info(`Calculating position for ${planet}`); // Should be allowed\n        console.debug(`Position data:`, position); // Should be allowed\n        console.warn(`Validation warning for ${planet}`); // Should be allowed\n        \n        return position;\n      };\n\n      expect(debugAstronomicalCalculation).toBeDefined();\n      expect(() => debugAstronomicalCalculation('mars', { sign: 'aries' })).not.toThrow();\n    });\n\n    test('should handle complex astrological expressions', () => {\n      // Complex calculations should be allowed without complexity warnings\n      const calculatePlanetaryInfluence = (\n        planetPosition: any,\n        elementalProperties: any,\n        transitDates: any\n      ) => {\n        const baseInfluence = planetPosition.degree / 30;\n        const elementalModifier = elementalProperties.Fire * 0.8 + \n                                 elementalProperties.Water * 0.6 +\n                                 elementalProperties.Earth * 0.7 +\n                                 elementalProperties.Air * 0.9;\n        const transitModifier = transitDates ? 1.1 : 0.9;\n        \n        return Math.min(1.0, baseInfluence * elementalModifier * transitModifier);\n      };\n\n      const result = calculatePlanetaryInfluence(\n        { degree: 15 },\n        { Fire: 0.8, Water: 0.1, Earth: 0.05, Air: 0.05 },\n        true\n      );\n\n      expect(result).toBeGreaterThan(0);\n      expect(result).toBeLessThanOrEqual(1);\n    });\n  });\n\n  describe('Performance and Reliability', () => {\n    test('should handle large datasets efficiently', () => {\n      const largePlanetaryData: Record<string, any> = {};\n      \n      // Create 100 planetary positions\n      for (let i = 0; i < 100; i++) {\n        largePlanetaryData[`planet${i}`] = {\n          sign: 'aries',\n          degree: i % 30,\n          exactLongitude: i % 360,\n          isRetrograde: i % 2 === 0\n        };\n      }\n\n      const startTime = Date.now();\n      const result = validatePlanetaryPositions(largePlanetaryData);\n      const endTime = Date.now();\n\n      expect(endTime - startTime).toBeLessThan(1000); // Should complete within 1 second\n      expect(result).toBeDefined();\n    });\n\n    test('should maintain accuracy under edge conditions', () => {\n      // Test boundary conditions\n      const edgeCases = [\n        { degree: 0, exactLongitude: 0 }, // Minimum values\n        { degree: 29.99, exactLongitude: 359.99 }, // Maximum values\n        { degree: 15, exactLongitude: 180 }, // Middle values\n      ];\n\n      edgeCases.forEach(edgeCase => {\n        const position = {\n          sign: 'aries',\n          degree: edgeCase.degree,\n          exactLongitude: edgeCase.exactLongitude,\n          isRetrograde: false\n        };\n\n        const positions = { \n          sun: position,\n          moon: position,\n          mercury: position,\n          venus: position,\n          mars: position,\n          jupiter: position,\n          saturn: position\n        };\n        const result = validatePlanetaryPositions(positions);\n        expect(result.isValid).toBe(true);\n      });\n    });\n\n    test('should handle error conditions gracefully', () => {\n      // Test with malformed data\n      const malformedData = [\n        null,\n        undefined,\n        {},\n        { invalidStructure: true },\n        { sun: null },\n        { sun: { sign: null } }\n      ];\n\n      malformedData.forEach(data => {\n        expect(() => {\n          const result = validatePlanetaryPositions(data as any);\n          expect(result).toBeDefined();\n          expect(typeof result.isValid).toBe('boolean');\n        }).not.toThrow();\n      });\n    });\n  });\n});"],"version":3}