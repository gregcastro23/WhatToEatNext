{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/services/RecipeElementalService.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/services/RecipeElementalService.test.ts"],"sourcesContent":["import { recipeElementalService } from '../../services/RecipeElementalService';\nimport type { ElementalProperties } from '../../types/alchemy';\nimport type { Recipe } from '../../types/recipe';\n\ndescribe('RecipeElementalService', () => {\n  describe('standardizeRecipe', () => {\n    it('should add missing elemental properties', () => {\n      const recipe = {\n        id: 'test-recipe',\n        name: 'Test Recipe',\n        // No elemental properties provided\n      };\n\n      const result = recipeElementalService.standardizeRecipe(recipe);\n      \n      expect(result.elementalProperties).toBeDefined();\n      expect(result.elementalProperties.Fire).toBeDefined();\n      expect(result.elementalProperties.Water).toBeDefined();\n      expect(result.elementalProperties.Earth).toBeDefined();\n      expect(result.elementalProperties.Air).toBeDefined();\n      \n      // Values should be normalized to sum to 1\n      const sum = Object.values(result.elementalProperties).reduce((a, b) => a + b, 0);\n      expect(sum).toBeCloseTo(1, 6);\n    });\n\n    it('should standardize partial elemental properties', () => {\n      const recipe: Partial<Recipe> = {\n        id: 'test-recipe',\n        name: 'Test Recipe',\n        elementalProperties: {\n          Fire: 1,\n          Water: 0,\n          Earth: 0,\n          Air: 0\n        }\n      };\n\n      const result = recipeElementalService.standardizeRecipe(recipe);\n      \n      expect(result.elementalProperties.Fire).toBeDefined();\n      expect(result.elementalProperties.Water).toBeDefined();\n      expect(result.elementalProperties.Earth).toBeDefined();\n      expect(result.elementalProperties.Air).toBeDefined();\n      \n      // Values should be normalized\n      const sum = Object.values(result.elementalProperties).reduce((a, b) => a + b, 0);\n      expect(sum).toBeCloseTo(1, 6);\n    });\n  });\n\n  describe('standardizeRecipes', () => {\n    it('should standardize an array of recipes', () => {\n      const recipes: Partial<Recipe>[] = [\n        { id: 'recipe1', name: 'Recipe 1' },\n        { \n          id: 'recipe2', \n          name: 'Recipe 2',\n          elementalProperties: { \n            Fire: 0.8, \n            Water: 0.2,\n            Earth: 0,\n            Air: 0\n          }\n        }\n      ];\n\n      const results = recipeElementalService.standardizeRecipes(recipes);\n      \n      expect(results.length).toBe(2);\n      expect(results[0].elementalProperties).toBeDefined();\n      expect(results[1].elementalProperties).toBeDefined();\n      \n      // First recipe should have default properties\n      expect(results[0].elementalProperties.Fire).toBeCloseTo(0.25, 2);\n      \n      // Second recipe should have normalized properties\n      const sum = Object.values(results[1].elementalProperties).reduce((a, b) => a + b, 0);\n      expect(sum).toBeCloseTo(1, 6);\n    });\n  });\n\n  describe('getDominantElement', () => {\n    it('should return the dominant element', () => {\n      const recipe = {\n        id: 'test-recipe',\n        name: 'Test Recipe',\n        elementalProperties: {\n          Fire: 0.4,\n          Water: 0.3,\n          Earth: 0.2,\n          Air: 0.1\n        }\n      } as Recipe;\n\n      const result = recipeElementalService.getDominantElement(recipe);\n      \n      expect(result.element).toBe('Fire');\n      expect(result.value).toBeCloseTo(0.4, 2);\n    });\n  });\n\n  describe('calculateSimilarity', () => {\n    it('should calculate similarity between elemental property sets', () => {\n      const props1: ElementalProperties = {\n        Fire: 0.25,\n        Water: 0.25,\n        Earth: 0.25,\n        Air: 0.25\n      };\n\n      const props2: ElementalProperties = {\n        Fire: 0.25,\n        Water: 0.25,\n        Earth: 0.25,\n        Air: 0.25\n      };\n\n      // Identical properties should have 100% similarity\n      const similarity1 = recipeElementalService.calculateSimilarity(props1, props2);\n      expect(similarity1).toBeCloseTo(1, 6);\n\n      // Different properties should have lower similarity\n      const props3: ElementalProperties = {\n        Fire: 0.5,\n        Water: 0.2,\n        Earth: 0.2,\n        Air: 0.1\n      };\n\n      const similarity2 = recipeElementalService.calculateSimilarity(props1, props3);\n      expect(similarity2).toBeLessThan(1);\n      expect(similarity2).toBeGreaterThan(0);\n    });\n  });\n\n  describe('deriveElementalProperties', () => {\n    it('should derive properties based on recipe attributes', () => {\n      const recipe = {\n        cuisine: 'Mexican',\n        cookingMethod: ['grilling']\n      };\n\n      const result = recipeElementalService.deriveElementalProperties(recipe);\n      \n      // Mexican cuisine and grilling should result in higher Fire\n      expect(result.Fire).toBeGreaterThan(0.25);\n      \n      const sum = Object.values(result).reduce((a, b) => a + b, 0);\n      expect(sum).toBeCloseTo(1, 6);\n    });\n\n    it('should derive properties for a recipe with ingredients', () => {\n      const recipe = {\n        cuisine: 'Japanese',\n        cookingMethod: ['steaming'],\n        ingredients: [\n          {\n            name: 'Rice',\n            amount: 1,\n            unit: 'cup',\n            elementalProperties: {\n              Earth: 0.6,\n              Water: 0.3,\n              Fire: 0.05,\n              Air: 0.05\n            }\n          }\n        ]\n      };\n\n      const result = recipeElementalService.deriveElementalProperties(recipe);\n      \n      // Japanese cuisine, steaming, and rice should result in higher Water and Earth\n      expect(result.Water).toBeGreaterThan(0.2);\n      \n      const sum = Object.values(result).reduce((a, b) => a + b, 0);\n      expect(sum).toBeCloseTo(1, 6);\n    });\n  });\n}); "],"version":3}