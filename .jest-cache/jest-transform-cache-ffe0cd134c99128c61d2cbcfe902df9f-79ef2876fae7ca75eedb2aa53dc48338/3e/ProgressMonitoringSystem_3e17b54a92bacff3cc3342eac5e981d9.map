{"file":"/Users/GregCastro/Desktop/WhatToEatNext/backups/conservative-wave-2025-08-11T05-21-33-410Z/src/services/campaign/unintentional-any-elimination/ProgressMonitoringSystem.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iDAAyC;AACzC,mCAAsC;AACtC,uCAAyB;AACzB,2CAA6B;AAC7B,mDAAgD;AAOhD;;;GAGG;AACH,MAAa,wBAAyB,SAAQ,qBAAY;IAChD,aAAa,CAAgB;IAC7B,kBAAkB,GAA0B,IAAI,CAAC;IACjD,YAAY,GAAG,KAAK,CAAC;IACrB,aAAa,GAAyB,IAAI,CAAC;IAC3C,eAAe,CAAkB;IACjC,YAAY,GAAY,EAAE,CAAC;IAC3B,qBAAqB,GAA2B,EAAE,CAAC;IAE3D,YAAY,eAA0C;QACpD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,aAAa,GAAG,IAAI,6BAAa,EAAE,CAAC;QACzC,IAAI,CAAC,eAAe,GAAG;YACrB,oBAAoB,EAAE,EAAE;YACxB,qBAAqB,EAAE,CAAC;YACxB,+BAA+B,EAAE,EAAE;YACnC,oBAAoB,EAAE,CAAC;YACvB,sBAAsB,EAAE,EAAE;YAC1B,GAAG,eAAe;SACnB,CAAC;QAEF,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,yBAAyB,EAAE,CAAC;IACnC,CAAC;IAED;;OAEG;IACH,eAAe,CAAC,kBAA0B,CAAC;QACzC,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,OAAO,CAAC,GAAG,CAAC,wCAAwC,CAAC,CAAC;YACtD,OAAO;SACR;QAED,OAAO,CAAC,GAAG,CAAC,qCAAqC,eAAe,mBAAmB,CAAC,CAAC;QACrF,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QAEzB,iBAAiB;QACjB,IAAI,CAAC,eAAe,EAAE,CAAC;QAEvB,0BAA0B;QAC1B,IAAI,CAAC,kBAAkB,GAAG,WAAW,CAAC,KAAK,IAAI,EAAE;YAC/C,IAAI;gBACF,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;gBAC7B,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;gBAClC,MAAM,IAAI,CAAC,qBAAqB,EAAE,CAAC;aACpC;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,CAAC,KAAK,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC;gBACxD,IAAI,CAAC,SAAS,CAAC;oBACb,IAAI,EAAE,cAAc;oBACpB,QAAQ,EAAE,MAAM;oBAChB,OAAO,EAAE,4BAA4B,KAAK,CAAC,OAAO,EAAE;oBACpD,SAAS,EAAE,IAAI,IAAI,EAAE;oBACrB,IAAI,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE;iBAC/B,CAAC,CAAC;aACJ;QACH,CAAC,EAAE,eAAe,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;QAEhC,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE,EAAE,eAAe,EAAE,CAAC,CAAC;IACvD,CAAC;IAED;;OAEG;IACH,cAAc;QACZ,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,OAAO,CAAC,GAAG,CAAC,oCAAoC,CAAC,CAAC;YAClD,OAAO;SACR;QAED,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;QAC5C,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAE1B,IAAI,IAAI,CAAC,kBAAkB,EAAE;YAC3B,aAAa,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;YACvC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;SAChC;QAED,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;IAClC,CAAC;IAED;;OAEG;IACH,gBAAgB;QACd,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,kBAAkB;QACtB,OAAO,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAC;QAExD,IAAI;YACF,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,2BAA2B,EAAE,CAAC;YAC7E,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,wBAAwB,EAAE,CAAC;YAE7D,MAAM,QAAQ,GAA6B;gBACzC,aAAa,EAAE,aAAa,CAAC,kBAAkB,EAAE,aAAa,IAAI,CAAC;gBACnE,qBAAqB,EAAE,aAAa,CAAC,kBAAkB,EAAE,0BAA0B,EAAE,WAAW,EAAE,KAAK,IAAI,CAAC;gBAC5G,uBAAuB,EAAE,aAAa,CAAC,kBAAkB,EAAE,0BAA0B,EAAE,aAAa,EAAE,KAAK,IAAI,CAAC;gBAChH,sBAAsB,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,aAAa,CAAC,OAAO,EAAE,kBAAkB,IAAI,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,OAAO,EAAE,aAAa,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC;gBACxI,qBAAqB,EAAE,aAAa,CAAC,kBAAkB,EAAE,0BAA0B,EAAE,WAAW,EAAE,KAAK,IAAI,CAAC;gBAC5G,sBAAsB,EAAE,aAAa,CAAC,kBAAkB,EAAE,0BAA0B,EAAE,aAAa,EAAE,KAAK,IAAI,CAAC;gBAC/G,mBAAmB,EAAE,IAAI,CAAC,4BAA4B,CAAC,aAAa,CAAC;gBACrE,yBAAyB,EAAE,EAAE;gBAC7B,gBAAgB,EAAE,IAAI,CAAC,mBAAmB,EAAE;gBAC5C,kBAAkB,EAAE,aAAa,CAAC,OAAO,EAAE,kBAAkB,IAAI,CAAC;gBAElE,kCAAkC;gBAClC,WAAW,EAAE,CAAC;gBACd,aAAa,EAAE,CAAC;gBAChB,cAAc,EAAE,CAAC;gBACjB,WAAW,EAAE,cAAc,CAAC,QAAQ;gBACpC,UAAU,EAAE,IAAI,IAAI,EAAE;aACvB,CAAC;YAEF,OAAO,QAAQ,CAAC;SACjB;QAAC,OAAO,KAAK,EAAE;YACd,2CAA2C;YAC3C,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,wBAAwB,EAAE,CAAC;YAE7D,OAAO;gBACL,aAAa,EAAE,CAAC;gBAChB,qBAAqB,EAAE,CAAC;gBACxB,uBAAuB,EAAE,CAAC;gBAC1B,sBAAsB,EAAE,CAAC;gBACzB,qBAAqB,EAAE,CAAC;gBACxB,sBAAsB,EAAE,CAAC;gBACzB,mBAAmB,EAAE,CAAC;gBACtB,yBAAyB,EAAE,EAAE;gBAC7B,gBAAgB,EAAE,CAAC;gBACnB,kBAAkB,EAAE,CAAC;gBACrB,WAAW,EAAE,CAAC;gBACd,aAAa,EAAE,CAAC;gBAChB,cAAc,EAAE,CAAC;gBACjB,WAAW,EAAE,cAAc,CAAC,QAAQ;gBACpC,UAAU,EAAE,IAAI,IAAI,EAAE;aACvB,CAAC;SACH;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,qBAAqB;QACzB,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,wBAAwB,EAAE,CAAC;QAExD,iBAAiB;QACjB,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAE3C,6BAA6B;QAC7B,IAAI,IAAI,CAAC,qBAAqB,CAAC,MAAM,GAAG,GAAG,EAAE;YAC3C,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;SACrE;QAED,mCAAmC;QACnC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE;YACvB,IAAI,CAAC,SAAS,CAAC;gBACb,IAAI,EAAE,eAAe;gBACrB,QAAQ,EAAE,MAAM;gBAChB,OAAO,EAAE,2BAA2B,SAAS,CAAC,YAAY,EAAE;gBAC5D,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,IAAI,EAAE;oBACJ,SAAS,EAAE,SAAS,CAAC,SAAS;oBAC9B,UAAU,EAAE,SAAS,CAAC,UAAU;oBAChC,YAAY,EAAE,SAAS,CAAC,YAAY;iBACrC;aACF,CAAC,CAAC;SACJ;QAED,uCAAuC;QACvC,MAAM,cAAc,GAAG,IAAI,CAAC,qBAAqB;aAC9C,KAAK,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,qBAAqB,CAAC;aAClD,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAEtC,IAAI,cAAc,CAAC,MAAM,IAAI,IAAI,CAAC,eAAe,CAAC,qBAAqB,EAAE;YACvE,IAAI,CAAC,SAAS,CAAC;gBACb,IAAI,EAAE,4BAA4B;gBAClC,QAAQ,EAAE,UAAU;gBACpB,OAAO,EAAE,GAAG,cAAc,CAAC,MAAM,sCAAsC;gBACvE,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,IAAI,EAAE;oBACJ,YAAY,EAAE,cAAc,CAAC,MAAM;oBACnC,SAAS,EAAE,IAAI,CAAC,eAAe,CAAC,qBAAqB;iBACtD;aACF,CAAC,CAAC;SACJ;QAED,MAAM,IAAI,CAAC,yBAAyB,EAAE,CAAC;IACzC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,oBAAoB;QACxB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;QACjD,MAAM,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;QAE/B,+BAA+B;QAC/B,IAAI,QAAQ,CAAC,kBAAkB,GAAG,IAAI,CAAC,eAAe,CAAC,oBAAoB,EAAE;YAC3E,IAAI,CAAC,SAAS,CAAC;gBACb,IAAI,EAAE,kBAAkB;gBACxB,QAAQ,EAAE,QAAQ;gBAClB,OAAO,EAAE,iBAAiB,QAAQ,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC,uBAAuB,IAAI,CAAC,eAAe,CAAC,oBAAoB,IAAI;gBACpI,SAAS,EAAE,WAAW;gBACtB,IAAI,EAAE;oBACJ,WAAW,EAAE,QAAQ,CAAC,kBAAkB;oBACxC,SAAS,EAAE,IAAI,CAAC,eAAe,CAAC,oBAAoB;iBACrD;aACF,CAAC,CAAC;SACJ;QAED,gCAAgC;QAChC,IAAI,IAAI,CAAC,aAAa,EAAE,cAAc,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,+BAA+B,EAAE;YAC7G,IAAI,CAAC,SAAS,CAAC;gBACb,IAAI,EAAE,6BAA6B;gBACnC,QAAQ,EAAE,QAAQ;gBAClB,OAAO,EAAE,4BAA4B,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,uBAAuB,IAAI,CAAC,eAAe,CAAC,+BAA+B,IAAI;gBAChL,SAAS,EAAE,WAAW;gBACtB,IAAI,EAAE;oBACJ,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,eAAe;oBAClE,SAAS,EAAE,IAAI,CAAC,eAAe,CAAC,+BAA+B;iBAChE;aACF,CAAC,CAAC;SACJ;QAED,2BAA2B;QAC3B,MAAM,kBAAkB,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACxD,IAAI,kBAAkB,EAAE;YACtB,MAAM,gBAAgB,GAAG,CAAC,WAAW,CAAC,OAAO,EAAE,GAAG,kBAAkB,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;YACnG,IAAI,gBAAgB,GAAG,IAAI,CAAC,eAAe,CAAC,sBAAsB,EAAE;gBAClE,IAAI,CAAC,SAAS,CAAC;oBACb,IAAI,EAAE,gBAAgB;oBACtB,QAAQ,EAAE,QAAQ;oBAClB,OAAO,EAAE,4BAA4B,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ;oBACxE,SAAS,EAAE,WAAW;oBACtB,IAAI,EAAE;wBACJ,gBAAgB;wBAChB,SAAS,EAAE,IAAI,CAAC,eAAe,CAAC,sBAAsB;wBACtD,UAAU,EAAE,kBAAkB;qBAC/B;iBACF,CAAC,CAAC;aACJ;SACF;QAED,+BAA+B;QAC/B,MAAM,kBAAkB,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACxD,IAAI,kBAAkB,CAAC,MAAM,IAAI,IAAI,CAAC,eAAe,CAAC,oBAAoB,EAAE;YAC1E,IAAI,CAAC,SAAS,CAAC;gBACb,IAAI,EAAE,wBAAwB;gBAC9B,QAAQ,EAAE,MAAM;gBAChB,OAAO,EAAE,GAAG,kBAAkB,CAAC,MAAM,iCAAiC;gBACtE,SAAS,EAAE,WAAW;gBACtB,IAAI,EAAE;oBACJ,UAAU,EAAE,kBAAkB,CAAC,MAAM;oBACrC,SAAS,EAAE,IAAI,CAAC,eAAe,CAAC,oBAAoB;oBACpD,MAAM,EAAE,kBAAkB;iBAC3B;aACF,CAAC,CAAC;SACJ;IACH,CAAC;IAED;;OAEG;IACH,8BAA8B,CAAC,KAAkB;QAC/C,OAAO,CAAC,GAAG,CAAC,8BAA8B,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;QAExD,IAAI,CAAC,SAAS,CAAC;YACb,IAAI,EAAE,4BAA4B;YAClC,QAAQ,EAAE,KAAK,CAAC,QAAQ,KAAK,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM;YAC7D,OAAO,EAAE,8BAA8B,KAAK,CAAC,WAAW,EAAE;YAC1D,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,IAAI,EAAE;gBACJ,WAAW,EAAE,KAAK;gBAClB,MAAM,EAAE,KAAK,CAAC,MAAM;gBACpB,aAAa,EAAE,KAAK,CAAC,aAAa,IAAI,EAAE;aACzC;SACF,CAAC,CAAC;QAEH,4EAA4E;QAC5E,IAAI,KAAK,CAAC,QAAQ,KAAK,UAAU,EAAE;YACjC,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;SAC3C;IACH,CAAC;IAED;;OAEG;IACH,eAAe,CAAC,KAAc;QAC5B,MAAM,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,oBAAoB;QACrE,OAAO,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;IACjD,CAAC;IAED;;OAEG;IACH,wBAAwB,CAAC,KAAc;QACrC,MAAM,OAAO,GAAG,CAAC,GAAG,IAAI,CAAC,qBAAqB,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,oBAAoB;QAC/E,OAAO,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;IACnD,CAAC;IAED;;OAEG;IACH,iBAAiB;QACf,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;QACvB,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;IACrC,CAAC;IAED;;OAEG;IACH,qBAAqB,CAAC,aAAuC;QAC3D,IAAI,CAAC,eAAe,GAAG,EAAE,GAAG,IAAI,CAAC,eAAe,EAAE,GAAG,aAAa,EAAE,CAAC;QACrE,IAAI,CAAC,IAAI,CAAC,0BAA0B,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;IAC9D,CAAC;IAED;;OAEG;IACH,kBAAkB;QAChB,OAAO,EAAE,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;IACrC,CAAC;IAED,kBAAkB;IAEV,KAAK,CAAC,eAAe;QAC3B,IAAI;YACF,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;YAE1C,MAAM,CACJ,cAAc,EACd,eAAe,EACf,cAAc,CACf,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;gBACpB,IAAI,CAAC,aAAa,CAAC,2BAA2B,EAAE;gBAChD,IAAI,CAAC,kBAAkB,EAAE;gBACzB,IAAI,CAAC,wBAAwB,EAAE;aAChC,CAAC,CAAC;YAEH,IAAI,CAAC,aAAa,GAAG;gBACnB,UAAU,EAAE,IAAI,IAAI,EAAE;gBACtB,cAAc;gBACd,eAAe;gBACf,cAAc;gBACd,YAAY,EAAE;oBACZ,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM;oBACrC,cAAc,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,UAAU,CAAC,CAAC,MAAM;oBAC/E,UAAU,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,MAAM,CAAC,CAAC,MAAM;oBACvE,YAAY,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,MAAM;oBAC3E,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,KAAK,CAAC,CAAC,MAAM;oBACrE,YAAY,EAAE,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC,gBAAgB;iBACxD;gBACD,YAAY,EAAE,IAAI,CAAC,qBAAqB,EAAE;gBAC1C,YAAY,EAAE,IAAI,CAAC,qBAAqB,EAAE;aAC3C,CAAC;YAEF,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;SACpD;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;YAClD,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAEO,KAAK,CAAC,wBAAwB;QACpC,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAE7B,IAAI;YACF,mCAAmC;YACnC,IAAA,wBAAQ,EAAC,kCAAkC,EAAE;gBAC3C,KAAK,EAAE,MAAM;gBACb,OAAO,EAAE,KAAK,CAAC,oBAAoB;aACpC,CAAC,CAAC;YAEH,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;YAEzC,OAAO;gBACL,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,QAAQ,EAAE,IAAI;gBACd,SAAS;gBACT,UAAU,EAAE,CAAC;gBACb,YAAY,EAAE,IAAI;aACnB,CAAC;SACH;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;YACzC,MAAM,WAAW,GAAG,KAAK,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,KAAK,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,KAAK,CAAC,OAAO,CAAC;YAC1F,MAAM,UAAU,GAAG,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;YAE3D,OAAO;gBACL,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,QAAQ,EAAE,KAAK;gBACf,SAAS;gBACT,UAAU;gBACV,YAAY,EAAE,WAAW,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,6BAA6B;aAC1E,CAAC;SACH;IACH,CAAC;IAEO,qBAAqB,CAAC,MAAc;QAC1C,MAAM,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;QACnD,OAAO,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAChD,CAAC;IAEO,4BAA4B,CAAC,MAA6B;QAChE,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,kBAAkB;YAAE,OAAO,CAAC,CAAC;QAEpD,0EAA0E;QAC1E,gFAAgF;QAChF,MAAM,KAAK,GAAG,MAAM,CAAC,kBAAkB,CAAC,aAAa,CAAC;QACtD,MAAM,aAAa,GAAG,MAAM,CAAC,kBAAkB,CAAC,0BAA0B,EAAE,aAAa,EAAE,KAAK,IAAI,CAAC,CAAC;QAEtG,IAAI,KAAK,KAAK,CAAC;YAAE,OAAO,CAAC,CAAC;QAE1B,sEAAsE;QACtE,MAAM,8BAA8B,GAAG,CAAC,aAAa,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC;QACrE,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,GAAG,8BAA8B,CAAC,CAAC;IAC3D,CAAC;IAEO,mBAAmB;QACzB,iDAAiD;QACjD,oCAAoC;QACpC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;IAC7C,CAAC;IAEO,SAAS,CAAC,KAAY;QAC5B,kEAAkE;QAClE,MAAM,UAAU,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;QACzD,MAAM,mBAAmB,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAClD,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC,SAAS,GAAG,UAAU,CACvD,CAAC;QAEF,iDAAiD;QACjD,IAAI,mBAAmB,CAAC,MAAM,KAAK,CAAC,EAAE;YACpC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAE9B,6BAA6B;YAC7B,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,EAAE;gBACnC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC;aACpD;YAED,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;YAE1B,OAAO,CAAC,GAAG,CAAC,kBAAkB,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,QAAQ,OAAO,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;SACpF;IACH,CAAC;IAEO,qBAAqB;QAC3B,kEAAkE;QAClE,4CAA4C;QAC5C,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,kCAAkC;IACtG,CAAC;IAEO,qBAAqB;QAC3B,+DAA+D;QAC/D,8BAA8B;QAC9B,OAAO,EAAE,CAAC;IACZ,CAAC;IAEO,eAAe,CAAC,KAAa;QACnC,MAAM,UAAU,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;QACjE,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,GAAG,UAAU,CAAC,CAAC;IACzE,CAAC;IAEO,qBAAqB;QAC3B,oEAAoE;QACpE,0CAA0C;QAC1C,MAAM,MAAM,GAAmB,EAAE,CAAC;QAClC,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;QAEvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;YAC3B,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;YAC/D,MAAM,CAAC,IAAI,CAAC;gBACV,IAAI;gBACJ,WAAW,EAAE,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE;gBACpC,aAAa,EAAE,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE;gBACjD,kBAAkB,EAAE,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC;gBACrD,sBAAsB,EAAE,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,SAAS;aAC1D,CAAC,CAAC;SACJ;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,qBAAqB;QAC3B,MAAM,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;QAC9C,MAAM,cAAc,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,UAAU,CAAC,CAAC,MAAM,CAAC;QAClF,MAAM,UAAU,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,MAAM,CAAC,CAAC,MAAM,CAAC;QAE1E,IAAI,WAAW,GAAG,GAAG,CAAC;QACtB,WAAW,IAAI,cAAc,GAAG,EAAE,CAAC;QACnC,WAAW,IAAI,UAAU,GAAG,EAAE,CAAC;QAC/B,WAAW,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;QAEvC,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC,CAAC;QAEtD,IAAI,MAA0C,CAAC;QAC/C,IAAI,WAAW,IAAI,EAAE;YAAE,MAAM,GAAG,SAAS,CAAC;aACrC,IAAI,WAAW,IAAI,EAAE;YAAE,MAAM,GAAG,SAAS,CAAC;;YAC1C,MAAM,GAAG,UAAU,CAAC;QAEzB,OAAO;YACL,KAAK,EAAE,WAAW;YAClB,MAAM;YACN,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,MAAM,EAAE,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,UAAU,IAAI,CAAC,CAAC,QAAQ,KAAK,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;SACzG,CAAC;IACJ,CAAC;IAEO,gBAAgB;QACtB,IAAI;YACF,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,kBAAkB,EAAE,oBAAoB,CAAC,CAAC;YAChG,IAAI,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE;gBAC9B,MAAM,WAAW,GAAG,EAAE,CAAC,YAAY,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;gBACzD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC,KAAU,EAAE,EAAE,CAAC,CAAC;oBAC/D,GAAG,KAAK;oBACR,SAAS,EAAE,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;iBACrC,CAAC,CAAC,CAAC;aACL;SACF;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,IAAI,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAC;YACrD,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;SACxB;IACH,CAAC;IAEO,gBAAgB;QACtB,IAAI;YACF,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,kBAAkB,CAAC,CAAC;YACzE,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE;gBAC9B,EAAE,CAAC,SAAS,CAAC,UAAU,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;aAC/C;YAED,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,oBAAoB,CAAC,CAAC;YAChE,EAAE,CAAC,aAAa,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;SAC3E;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,IAAI,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAC;SACtD;IACH,CAAC;IAEO,yBAAyB;QAC/B,IAAI;YACF,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,kBAAkB,EAAE,8BAA8B,CAAC,CAAC;YAC1G,IAAI,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE;gBAC9B,MAAM,WAAW,GAAG,EAAE,CAAC,YAAY,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;gBACzD,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC,MAAW,EAAE,EAAE,CAAC,CAAC;oBACzE,GAAG,MAAM;oBACT,SAAS,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;iBACtC,CAAC,CAAC,CAAC;aACL;SACF;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,IAAI,CAAC,yCAAyC,EAAE,KAAK,CAAC,CAAC;YAC/D,IAAI,CAAC,qBAAqB,GAAG,EAAE,CAAC;SACjC;IACH,CAAC;IAEO,KAAK,CAAC,yBAAyB;QACrC,IAAI;YACF,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,kBAAkB,CAAC,CAAC;YACzE,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE;gBAC9B,EAAE,CAAC,SAAS,CAAC,UAAU,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;aAC/C;YAED,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,8BAA8B,CAAC,CAAC;YAC1E,EAAE,CAAC,aAAa,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,qBAAqB,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;SACpF;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,IAAI,CAAC,yCAAyC,EAAE,KAAK,CAAC,CAAC;SAChE;IACH,CAAC;CACF;AA5jBD,4DA4jBC","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/backups/conservative-wave-2025-08-11T05-21-33-410Z/src/services/campaign/unintentional-any-elimination/ProgressMonitoringSystem.ts"],"sourcesContent":["import { execSync } from 'child_process';\nimport { EventEmitter } from 'events';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { AnalysisTools } from './AnalysisTools';\nimport {\n    AnalysisReport,\n    TrendingData,\n    UnintentionalAnyProgress\n} from './types';\n\n/**\n * Real-time progress monitoring and alerting system\n * Provides dashboard functionality, safety protocol monitoring, and threshold-based alerts\n */\nexport class ProgressMonitoringSystem extends EventEmitter {\n  private analysisTools: AnalysisTools;\n  private monitoringInterval: NodeJS.Timeout | null = null;\n  private isMonitoring = false;\n  private dashboardData: DashboardData | null = null;\n  private alertThresholds: AlertThresholds;\n  private alertHistory: Alert[] = [];\n  private buildStabilityHistory: BuildStabilityRecord[] = [];\n\n  constructor(alertThresholds?: Partial<AlertThresholds>) {\n    super();\n    this.analysisTools = new AnalysisTools();\n    this.alertThresholds = {\n      successRateThreshold: 70,\n      buildFailureThreshold: 3,\n      classificationAccuracyThreshold: 80,\n      safetyEventThreshold: 5,\n      progressStallThreshold: 24, // hours\n      ...alertThresholds\n    };\n\n    this.loadAlertHistory();\n    this.loadBuildStabilityHistory();\n  }\n\n  /**\n   * Start real-time progress monitoring\n   */\n  startMonitoring(intervalMinutes: number = 5): void {\n    if (this.isMonitoring) {\n      console.log('Progress monitoring is already running');\n      return;\n    }\n\n    console.log(`Starting progress monitoring with ${intervalMinutes}-minute intervals`);\n    this.isMonitoring = true;\n\n    // Initial update\n    this.updateDashboard();\n\n    // Set up periodic updates\n    this.monitoringInterval = setInterval(async () => {\n      try {\n        await this.updateDashboard();\n        await this.checkAlertConditions();\n        await this.monitorBuildStability();\n      } catch (error) {\n        console.error('Error during monitoring update:', error);\n        this.emitAlert({\n          type: 'system_error',\n          severity: 'high',\n          message: `Monitoring system error: ${error.message}`,\n          timestamp: new Date(),\n          data: { error: error.message }\n        });\n      }\n    }, intervalMinutes * 60 * 1000);\n\n    this.emit('monitoring_started', { intervalMinutes });\n  }\n\n  /**\n   * Stop real-time progress monitoring\n   */\n  stopMonitoring(): void {\n    if (!this.isMonitoring) {\n      console.log('Progress monitoring is not running');\n      return;\n    }\n\n    console.log('Stopping progress monitoring');\n    this.isMonitoring = false;\n\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n      this.monitoringInterval = null;\n    }\n\n    this.emit('monitoring_stopped');\n  }\n\n  /**\n   * Get current dashboard data\n   */\n  getDashboardData(): DashboardData | null {\n    return this.dashboardData;\n  }\n\n  /**\n   * Get real-time progress metrics\n   */\n  async getProgressMetrics(): Promise<UnintentionalAnyProgress> {\n    console.log('Collecting real-time progress metrics...');\n\n    try {\n      const currentReport = await this.analysisTools.generateComprehensiveReport();\n      const buildStability = await this.getCurrentBuildStability();\n\n      const progress: UnintentionalAnyProgress = {\n        totalAnyTypes: currentReport.domainDistribution?.totalAnyTypes || 0,\n        classifiedIntentional: currentReport.domainDistribution?.intentionalVsUnintentional?.intentional?.count || 0,\n        classifiedUnintentional: currentReport.domainDistribution?.intentionalVsUnintentional?.unintentional?.count || 0,\n        successfulReplacements: Math.floor((currentReport.summary?.currentSuccessRate || 0) * (currentReport.summary?.totalAnyTypes || 0) / 100),\n        documentedIntentional: currentReport.domainDistribution?.intentionalVsUnintentional?.intentional?.count || 0,\n        remainingUnintentional: currentReport.domainDistribution?.intentionalVsUnintentional?.unintentional?.count || 0,\n        reductionPercentage: this.calculateReductionPercentage(currentReport),\n        targetReductionPercentage: 20, // Target 20% reduction\n        batchesCompleted: this.getBatchesCompleted(),\n        averageSuccessRate: currentReport.summary?.currentSuccessRate || 0,\n\n        // Base ProgressMetrics properties\n        errorsFixed: 0,\n        warningsFixed: 0,\n        filesProcessed: 0,\n        buildStable: buildStability.isStable,\n        lastUpdate: new Date()\n      };\n\n      return progress;\n    } catch (error) {\n      // Return default metrics if analysis fails\n      const buildStability = await this.getCurrentBuildStability();\n\n      return {\n        totalAnyTypes: 0,\n        classifiedIntentional: 0,\n        classifiedUnintentional: 0,\n        successfulReplacements: 0,\n        documentedIntentional: 0,\n        remainingUnintentional: 0,\n        reductionPercentage: 0,\n        targetReductionPercentage: 20,\n        batchesCompleted: 0,\n        averageSuccessRate: 0,\n        errorsFixed: 0,\n        warningsFixed: 0,\n        filesProcessed: 0,\n        buildStable: buildStability.isStable,\n        lastUpdate: new Date()\n      };\n    }\n  }\n\n  /**\n   * Monitor build stability\n   */\n  async monitorBuildStability(): Promise<void> {\n    const stability = await this.getCurrentBuildStability();\n\n    // Add to history\n    this.buildStabilityHistory.push(stability);\n\n    // Keep only last 100 records\n    if (this.buildStabilityHistory.length > 100) {\n      this.buildStabilityHistory = this.buildStabilityHistory.slice(-100);\n    }\n\n    // Check for build stability issues\n    if (!stability.isStable) {\n      this.emitAlert({\n        type: 'build_failure',\n        severity: 'high',\n        message: `Build failure detected: ${stability.errorMessage}`,\n        timestamp: new Date(),\n        data: {\n          buildTime: stability.buildTime,\n          errorCount: stability.errorCount,\n          errorMessage: stability.errorMessage\n        }\n      });\n    }\n\n    // Check for consecutive build failures\n    const recentFailures = this.buildStabilityHistory\n      .slice(-this.alertThresholds.buildFailureThreshold)\n      .filter(record => !record.isStable);\n\n    if (recentFailures.length >= this.alertThresholds.buildFailureThreshold) {\n      this.emitAlert({\n        type: 'consecutive_build_failures',\n        severity: 'critical',\n        message: `${recentFailures.length} consecutive build failures detected`,\n        timestamp: new Date(),\n        data: {\n          failureCount: recentFailures.length,\n          threshold: this.alertThresholds.buildFailureThreshold\n        }\n      });\n    }\n\n    await this.saveBuildStabilityHistory();\n  }\n\n  /**\n   * Check alert conditions and emit alerts\n   */\n  async checkAlertConditions(): Promise<void> {\n    const progress = await this.getProgressMetrics();\n    const currentTime = new Date();\n\n    // Check success rate threshold\n    if (progress.averageSuccessRate < this.alertThresholds.successRateThreshold) {\n      this.emitAlert({\n        type: 'low_success_rate',\n        severity: 'medium',\n        message: `Success rate (${progress.averageSuccessRate.toFixed(1)}%) below threshold (${this.alertThresholds.successRateThreshold}%)`,\n        timestamp: currentTime,\n        data: {\n          currentRate: progress.averageSuccessRate,\n          threshold: this.alertThresholds.successRateThreshold\n        }\n      });\n    }\n\n    // Check classification accuracy\n    if (this.dashboardData?.accuracyReport.overallAccuracy < this.alertThresholds.classificationAccuracyThreshold) {\n      this.emitAlert({\n        type: 'low_classification_accuracy',\n        severity: 'medium',\n        message: `Classification accuracy (${this.dashboardData.accuracyReport.overallAccuracy.toFixed(1)}%) below threshold (${this.alertThresholds.classificationAccuracyThreshold}%)`,\n        timestamp: currentTime,\n        data: {\n          currentAccuracy: this.dashboardData.accuracyReport.overallAccuracy,\n          threshold: this.alertThresholds.classificationAccuracyThreshold\n        }\n      });\n    }\n\n    // Check for progress stall\n    const lastProgressUpdate = this.getLastProgressUpdate();\n    if (lastProgressUpdate) {\n      const hoursSinceUpdate = (currentTime.getTime() - lastProgressUpdate.getTime()) / (1000 * 60 * 60);\n      if (hoursSinceUpdate > this.alertThresholds.progressStallThreshold) {\n        this.emitAlert({\n          type: 'progress_stall',\n          severity: 'medium',\n          message: `No progress detected for ${hoursSinceUpdate.toFixed(1)} hours`,\n          timestamp: currentTime,\n          data: {\n            hoursSinceUpdate,\n            threshold: this.alertThresholds.progressStallThreshold,\n            lastUpdate: lastProgressUpdate\n          }\n        });\n      }\n    }\n\n    // Check safety event frequency\n    const recentSafetyEvents = this.getRecentSafetyEvents();\n    if (recentSafetyEvents.length >= this.alertThresholds.safetyEventThreshold) {\n      this.emitAlert({\n        type: 'frequent_safety_events',\n        severity: 'high',\n        message: `${recentSafetyEvents.length} safety events in the last hour`,\n        timestamp: currentTime,\n        data: {\n          eventCount: recentSafetyEvents.length,\n          threshold: this.alertThresholds.safetyEventThreshold,\n          events: recentSafetyEvents\n        }\n      });\n    }\n  }\n\n  /**\n   * Handle safety protocol activation\n   */\n  handleSafetyProtocolActivation(event: SafetyEvent): void {\n    console.log(`Safety protocol activated: ${event.type}`);\n\n    this.emitAlert({\n      type: 'safety_protocol_activation',\n      severity: event.severity === 'critical' ? 'critical' : 'high',\n      message: `Safety protocol activated: ${event.description}`,\n      timestamp: new Date(),\n      data: {\n        safetyEvent: event,\n        action: event.action,\n        affectedFiles: event.affectedFiles || []\n      }\n    });\n\n    // If it's a critical safety event, consider stopping monitoring temporarily\n    if (event.severity === 'critical') {\n      this.emit('critical_safety_event', event);\n    }\n  }\n\n  /**\n   * Get alert history\n   */\n  getAlertHistory(limit?: number): Alert[] {\n    const alerts = [...this.alertHistory].reverse(); // Most recent first\n    return limit ? alerts.slice(0, limit) : alerts;\n  }\n\n  /**\n   * Get build stability history\n   */\n  getBuildStabilityHistory(limit?: number): BuildStabilityRecord[] {\n    const history = [...this.buildStabilityHistory].reverse(); // Most recent first\n    return limit ? history.slice(0, limit) : history;\n  }\n\n  /**\n   * Clear alert history\n   */\n  clearAlertHistory(): void {\n    this.alertHistory = [];\n    this.saveAlertHistory();\n    this.emit('alert_history_cleared');\n  }\n\n  /**\n   * Update alert thresholds\n   */\n  updateAlertThresholds(newThresholds: Partial<AlertThresholds>): void {\n    this.alertThresholds = { ...this.alertThresholds, ...newThresholds };\n    this.emit('alert_thresholds_updated', this.alertThresholds);\n  }\n\n  /**\n   * Get current alert thresholds\n   */\n  getAlertThresholds(): AlertThresholds {\n    return { ...this.alertThresholds };\n  }\n\n  // Private methods\n\n  private async updateDashboard(): Promise<void> {\n    try {\n      console.log('Updating dashboard data...');\n\n      const [\n        analysisReport,\n        progressMetrics,\n        buildStability\n      ] = await Promise.all([\n        this.analysisTools.generateComprehensiveReport(),\n        this.getProgressMetrics(),\n        this.getCurrentBuildStability()\n      ]);\n\n      this.dashboardData = {\n        lastUpdate: new Date(),\n        analysisReport,\n        progressMetrics,\n        buildStability,\n        alertSummary: {\n          totalAlerts: this.alertHistory.length,\n          criticalAlerts: this.alertHistory.filter(a => a.severity === 'critical').length,\n          highAlerts: this.alertHistory.filter(a => a.severity === 'high').length,\n          mediumAlerts: this.alertHistory.filter(a => a.severity === 'medium').length,\n          lowAlerts: this.alertHistory.filter(a => a.severity === 'low').length,\n          recentAlerts: this.getRecentAlerts(24) // Last 24 hours\n        },\n        trendingData: this.calculateTrendingData(),\n        systemHealth: this.calculateSystemHealth()\n      };\n\n      this.emit('dashboard_updated', this.dashboardData);\n    } catch (error) {\n      console.error('Error updating dashboard:', error);\n      throw error;\n    }\n  }\n\n  private async getCurrentBuildStability(): Promise<BuildStabilityRecord> {\n    const startTime = Date.now();\n\n    try {\n      // Run TypeScript compilation check\n      execSync('yarn tsc --noEmit --skipLibCheck', {\n        stdio: 'pipe',\n        timeout: 30000 // 30 second timeout\n      });\n\n      const buildTime = Date.now() - startTime;\n\n      return {\n        timestamp: new Date(),\n        isStable: true,\n        buildTime,\n        errorCount: 0,\n        errorMessage: null\n      };\n    } catch (error) {\n      const buildTime = Date.now() - startTime;\n      const errorOutput = error.stdout?.toString() || error.stderr?.toString() || error.message;\n      const errorCount = this.countTypeScriptErrors(errorOutput);\n\n      return {\n        timestamp: new Date(),\n        isStable: false,\n        buildTime,\n        errorCount,\n        errorMessage: errorOutput.substring(0, 500) // Limit error message length\n      };\n    }\n  }\n\n  private countTypeScriptErrors(output: string): number {\n    const errorMatches = output.match(/error TS\\d+:/g);\n    return errorMatches ? errorMatches.length : 0;\n  }\n\n  private calculateReductionPercentage(report: AnalysisReport | null): number {\n    if (!report || !report.domainDistribution) return 0;\n\n    // Calculate reduction from baseline (would need historical baseline data)\n    // For now, use a simple calculation based on intentional vs unintentional ratio\n    const total = report.domainDistribution.totalAnyTypes;\n    const unintentional = report.domainDistribution.intentionalVsUnintentional?.unintentional?.count || 0;\n\n    if (total === 0) return 0;\n\n    // Assume baseline was 100% unintentional, calculate current reduction\n    const currentUnintentionalPercentage = (unintentional / total) * 100;\n    return Math.max(0, 100 - currentUnintentionalPercentage);\n  }\n\n  private getBatchesCompleted(): number {\n    // This would be tracked in actual implementation\n    // For now, return a simulated value\n    return Math.floor(Math.random() * 50) + 10;\n  }\n\n  private emitAlert(alert: Alert): void {\n    // Check if this is a duplicate alert (same type within last hour)\n    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\n    const recentSimilarAlerts = this.alertHistory.filter(\n      a => a.type === alert.type && a.timestamp > oneHourAgo\n    );\n\n    // Only emit if no similar alert in the last hour\n    if (recentSimilarAlerts.length === 0) {\n      this.alertHistory.push(alert);\n\n      // Keep only last 1000 alerts\n      if (this.alertHistory.length > 1000) {\n        this.alertHistory = this.alertHistory.slice(-1000);\n      }\n\n      this.saveAlertHistory();\n      this.emit('alert', alert);\n\n      console.log(`Alert emitted: ${alert.type} (${alert.severity}) - ${alert.message}`);\n    }\n  }\n\n  private getLastProgressUpdate(): Date | null {\n    // This would track actual progress updates in real implementation\n    // For now, return a simulated recent update\n    return new Date(Date.now() - Math.random() * 2 * 60 * 60 * 1000); // Random time within last 2 hours\n  }\n\n  private getRecentSafetyEvents(): SafetyEvent[] {\n    // This would track actual safety events in real implementation\n    // For now, return empty array\n    return [];\n  }\n\n  private getRecentAlerts(hours: number): Alert[] {\n    const cutoffTime = new Date(Date.now() - hours * 60 * 60 * 1000);\n    return this.alertHistory.filter(alert => alert.timestamp > cutoffTime);\n  }\n\n  private calculateTrendingData(): TrendingData[] {\n    // This would calculate actual trending data from historical reports\n    // For now, return simulated trending data\n    const trends: TrendingData[] = [];\n    const now = new Date();\n\n    for (let i = 7; i >= 0; i--) {\n      const date = new Date(now.getTime() - i * 24 * 60 * 60 * 1000);\n      trends.push({\n        date,\n        successRate: 75 + Math.random() * 15, // 75-90%\n        totalAnyTypes: 1800 - i * 20 + Math.random() * 10,\n        unintentionalCount: 1200 - i * 15 + Math.random() * 8,\n        classificationAccuracy: 80 + Math.random() * 15 // 80-95%\n      });\n    }\n\n    return trends;\n  }\n\n  private calculateSystemHealth(): SystemHealth {\n    const recentAlerts = this.getRecentAlerts(24);\n    const criticalAlerts = recentAlerts.filter(a => a.severity === 'critical').length;\n    const highAlerts = recentAlerts.filter(a => a.severity === 'high').length;\n\n    let healthScore = 100;\n    healthScore -= criticalAlerts * 20;\n    healthScore -= highAlerts * 10;\n    healthScore -= recentAlerts.length * 2;\n\n    healthScore = Math.max(0, Math.min(100, healthScore));\n\n    let status: 'healthy' | 'warning' | 'critical';\n    if (healthScore >= 80) status = 'healthy';\n    else if (healthScore >= 60) status = 'warning';\n    else status = 'critical';\n\n    return {\n      score: healthScore,\n      status,\n      lastCheck: new Date(),\n      issues: recentAlerts.filter(a => a.severity === 'critical' || a.severity === 'high').map(a => a.message)\n    };\n  }\n\n  private loadAlertHistory(): void {\n    try {\n      const historyPath = path.join(process.cwd(), '.kiro', 'campaign-reports', 'alert-history.json');\n      if (fs.existsSync(historyPath)) {\n        const historyData = fs.readFileSync(historyPath, 'utf8');\n        this.alertHistory = JSON.parse(historyData).map((alert: any) => ({\n          ...alert,\n          timestamp: new Date(alert.timestamp)\n        }));\n      }\n    } catch (error) {\n      console.warn('Could not load alert history:', error);\n      this.alertHistory = [];\n    }\n  }\n\n  private saveAlertHistory(): void {\n    try {\n      const historyDir = path.join(process.cwd(), '.kiro', 'campaign-reports');\n      if (!fs.existsSync(historyDir)) {\n        fs.mkdirSync(historyDir, { recursive: true });\n      }\n\n      const historyPath = path.join(historyDir, 'alert-history.json');\n      fs.writeFileSync(historyPath, JSON.stringify(this.alertHistory, null, 2));\n    } catch (error) {\n      console.warn('Could not save alert history:', error);\n    }\n  }\n\n  private loadBuildStabilityHistory(): void {\n    try {\n      const historyPath = path.join(process.cwd(), '.kiro', 'campaign-reports', 'build-stability-history.json');\n      if (fs.existsSync(historyPath)) {\n        const historyData = fs.readFileSync(historyPath, 'utf8');\n        this.buildStabilityHistory = JSON.parse(historyData).map((record: any) => ({\n          ...record,\n          timestamp: new Date(record.timestamp)\n        }));\n      }\n    } catch (error) {\n      console.warn('Could not load build stability history:', error);\n      this.buildStabilityHistory = [];\n    }\n  }\n\n  private async saveBuildStabilityHistory(): Promise<void> {\n    try {\n      const historyDir = path.join(process.cwd(), '.kiro', 'campaign-reports');\n      if (!fs.existsSync(historyDir)) {\n        fs.mkdirSync(historyDir, { recursive: true });\n      }\n\n      const historyPath = path.join(historyDir, 'build-stability-history.json');\n      fs.writeFileSync(historyPath, JSON.stringify(this.buildStabilityHistory, null, 2));\n    } catch (error) {\n      console.warn('Could not save build stability history:', error);\n    }\n  }\n}\n\n// Supporting interfaces\n\nexport interface DashboardData {\n  lastUpdate: Date;\n  analysisReport: AnalysisReport;\n  progressMetrics: UnintentionalAnyProgress;\n  buildStability: BuildStabilityRecord;\n  alertSummary: AlertSummary;\n  trendingData: TrendingData[];\n  systemHealth: SystemHealth;\n}\n\nexport interface AlertThresholds {\n  successRateThreshold: number;\n  buildFailureThreshold: number;\n  classificationAccuracyThreshold: number;\n  safetyEventThreshold: number;\n  progressStallThreshold: number; // hours\n}\n\nexport interface Alert {\n  type: AlertType;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  message: string;\n  timestamp: Date;\n  data?: any;\n}\n\nexport type AlertType =\n  | 'low_success_rate'\n  | 'build_failure'\n  | 'consecutive_build_failures'\n  | 'low_classification_accuracy'\n  | 'progress_stall'\n  | 'frequent_safety_events'\n  | 'safety_protocol_activation'\n  | 'system_error';\n\nexport interface SafetyEvent {\n  type: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  description: string;\n  action: string;\n  timestamp: Date;\n  affectedFiles?: string[];\n}\n\nexport interface BuildStabilityRecord {\n  timestamp: Date;\n  isStable: boolean;\n  buildTime: number;\n  errorCount: number;\n  errorMessage: string | null;\n}\n\nexport interface AlertSummary {\n  totalAlerts: number;\n  criticalAlerts: number;\n  highAlerts: number;\n  mediumAlerts: number;\n  lowAlerts: number;\n  recentAlerts: Alert[];\n}\n\nexport interface SystemHealth {\n  score: number; // 0-100\n  status: 'healthy' | 'warning' | 'critical';\n  lastCheck: Date;\n  issues: string[];\n}\n"],"version":3}