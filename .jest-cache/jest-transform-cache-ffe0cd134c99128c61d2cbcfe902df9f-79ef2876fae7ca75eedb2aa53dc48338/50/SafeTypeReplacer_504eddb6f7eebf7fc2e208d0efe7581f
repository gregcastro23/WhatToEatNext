c36e88149b07c4b378fa0f45126a1558
"use strict";
/**
 * Safe Type Replacer
 * Performs safe replacements of unintentional `any` types with more specific types
 *
 * Core Features:
 * - Atomic replacement operations with automatic rollback
 * - TypeScript compilation validation after each replacement
 * - Comprehensive backup system for all modified files
 * - Safety scoring system for replacement confidence
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SafeTypeReplacer = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const SafetyValidator_1 = require("./SafetyValidator");
const types_1 = require("./types");
class SafeTypeReplacer {
    strategies;
    backupDirectory;
    safetyThreshold;
    validationTimeout;
    maxRetries;
    safetyValidator;
    constructor(backupDirectory = './.any-elimination-backups', safetyThreshold = 0.7, validationTimeout = 30000, maxRetries = 3) {
        this.backupDirectory = backupDirectory;
        this.safetyThreshold = safetyThreshold;
        this.validationTimeout = validationTimeout;
        this.maxRetries = maxRetries;
        this.strategies = this.initializeStrategies();
        this.safetyValidator = new SafetyValidator_1.SafetyValidator(validationTimeout, {
            minimumSafetyScore: safetyThreshold
        });
        this.ensureBackupDirectory();
    }
    /**
     * Apply a single type replacement with comprehensive safety validation
     * Implements atomic operations with automatic rollback on any failure
     */
    async applyReplacement(replacement, context) {
        // Enhanced pre-validation using SafetyValidator
        let safetyValidation;
        if (context) {
            safetyValidation = this.safetyValidator.calculateSafetyScore(replacement, context);
        }
        else {
            // Fallback to basic safety score calculation
            const basicSafetyScore = this.calculateSafetyScore(replacement);
            safetyValidation = {
                isValid: basicSafetyScore >= this.safetyThreshold,
                safetyScore: basicSafetyScore,
                validationErrors: basicSafetyScore < this.safetyThreshold
                    ? [`Safety score ${basicSafetyScore} below threshold ${this.safetyThreshold}`]
                    : [],
                warnings: [],
                recommendations: []
            };
        }
        if (!safetyValidation.isValid) {
            return {
                success: false,
                appliedReplacements: [],
                failedReplacements: [replacement],
                compilationErrors: safetyValidation.validationErrors,
                rollbackPerformed: false
            };
        }
        const backupPath = await this.createBackup(replacement.filePath);
        let retryCount = 0;
        while (retryCount < this.maxRetries) {
            try {
                // Atomic replacement operation
                const result = await this.performAtomicReplacement(replacement, backupPath);
                if (result.success) {
                    // Verify rollback capability before declaring success
                    const rollbackVerification = await this.verifyRollbackCapability(replacement.filePath, backupPath);
                    if (!rollbackVerification.success) {
                        await this.rollbackFromBackup(replacement.filePath, backupPath);
                        return {
                            success: false,
                            appliedReplacements: [],
                            failedReplacements: [replacement],
                            compilationErrors: [`Rollback verification failed: ${rollbackVerification.error}`],
                            rollbackPerformed: true,
                            backupPath
                        };
                    }
                    return result;
                }
                else {
                    // If replacement failed with specific errors, return immediately (don't retry)
                    return result;
                }
            }
            catch (error) {
                retryCount++;
                if (retryCount >= this.maxRetries) {
                    // Final rollback on exhausted retries
                    await this.rollbackFromBackup(replacement.filePath, backupPath);
                    return {
                        success: false,
                        appliedReplacements: [],
                        failedReplacements: [replacement],
                        compilationErrors: [error instanceof Error ? error.message : String(error)],
                        rollbackPerformed: true,
                        backupPath
                    };
                }
                // Wait briefly before retry
                await new Promise(resolve => setTimeout(resolve, 100 * retryCount));
            }
        }
        // Should not reach here, but handle edge case
        await this.rollbackFromBackup(replacement.filePath, backupPath);
        return {
            success: false,
            appliedReplacements: [],
            failedReplacements: [replacement],
            compilationErrors: ['Maximum retries exceeded'],
            rollbackPerformed: true,
            backupPath
        };
    }
    /**
     * Process multiple replacements in batch with atomic operations
     */
    async processBatch(replacements) {
        const backupPaths = new Map();
        const appliedReplacements = [];
        const failedReplacements = [];
        const compilationErrors = [];
        try {
            // Create backups for all files
            for (const replacement of replacements) {
                if (!backupPaths.has(replacement.filePath)) {
                    const backupPath = await this.createBackup(replacement.filePath);
                    backupPaths.set(replacement.filePath, backupPath);
                }
            }
            // Group replacements by file for efficient processing
            const replacementsByFile = this.groupReplacementsByFile(replacements);
            // Apply replacements file by file
            for (const [filePath, fileReplacements] of Array.from(replacementsByFile.entries())) {
                try {
                    const result = await this.applyReplacementsToFile(filePath, fileReplacements);
                    appliedReplacements.push(...result.applied);
                    failedReplacements.push(...result.failed);
                    if (result.failed.length > 0) {
                        compilationErrors.push(...result.errors);
                    }
                }
                catch (error) {
                    failedReplacements.push(...fileReplacements);
                    compilationErrors.push(error instanceof Error ? error.message : String(error));
                }
            }
            // Enhanced build validation after batch operations
            const modifiedFiles = Array.from(backupPaths.keys());
            const buildValidation = await this.safetyValidator.validateBuildAfterBatch(modifiedFiles, false);
            if (!buildValidation.buildSuccessful) {
                // Rollback all changes
                await this.rollbackAllFiles(backupPaths);
                return {
                    success: false,
                    appliedReplacements: [],
                    failedReplacements: replacements,
                    compilationErrors: buildValidation.compilationErrors,
                    rollbackPerformed: true
                };
            }
            // Validate rollback capability
            const rollbackValidation = await this.safetyValidator.validateRollbackCapability(new Map(modifiedFiles.map(file => [file, file])), backupPaths);
            if (!rollbackValidation.canRollback) {
                compilationErrors.push(...rollbackValidation.rollbackErrors);
                compilationErrors.push('Warning: Rollback capability compromised');
            }
            const success = failedReplacements.length === 0;
            return {
                success,
                appliedReplacements,
                failedReplacements,
                compilationErrors,
                rollbackPerformed: false
            };
        }
        catch (error) {
            // Emergency rollback
            await this.rollbackAllFiles(backupPaths);
            throw new types_1.SafetyProtocolError('Batch replacement failed with emergency rollback', Array.from(backupPaths.values())[0] || '', Array.from(backupPaths.keys()));
        }
    }
    initializeStrategies() {
        return [
            // Array type replacement strategy (any[] â†’ unknown[])
            {
                pattern: /:\s*any\[\]/g,
                replacement: (match, context) => {
                    // Check if we can infer a more specific array type
                    const inferredType = this.inferArrayElementType(context);
                    return match.replace('any[]', `${inferredType}[]`);
                },
                validator: (context) => context.codeSnippet.includes('any[]') &&
                    !this.isInErrorHandlingContext(context),
                priority: 1
            },
            // Record type replacement with validation (Record<string, any> â†’ Record<string, unknown>)
            {
                pattern: /:\s*Record<\s*string\s*,\s*any\s*>/g,
                replacement: (match, context) => {
                    // Check if we can infer a more specific value type
                    const inferredValueType = this.inferRecordValueType(context);
                    return match.replace(/Record<\s*string\s*,\s*any\s*>/, `Record<string, ${inferredValueType}>`);
                },
                validator: (context) => context.codeSnippet.includes('Record<string, any>') &&
                    !this.isInErrorHandlingContext(context) &&
                    !this.isDynamicConfigContext(context),
                priority: 2
            },
            // Generic Record replacement (Record<number, any> â†’ Record<number, unknown>)
            {
                pattern: /:\s*Record<\s*number\s*,\s*any\s*>/g,
                replacement: (match, context) => {
                    const inferredValueType = this.inferRecordValueType(context);
                    return match.replace(/Record<\s*number\s*,\s*any\s*>/, `Record<number, ${inferredValueType}>`);
                },
                validator: (context) => context.codeSnippet.includes('Record<number, any>') &&
                    !this.isInErrorHandlingContext(context),
                priority: 2
            },
            // Index signature replacement ([key: string]: any â†’ [key: string]: unknown)
            {
                pattern: /\[key:\s*string\]\s*:\s*any/g,
                replacement: (match, context) => {
                    const inferredValueType = this.inferIndexSignatureValueType(context);
                    return match.replace('any', inferredValueType);
                },
                validator: (context) => context.codeSnippet.includes('[key: string]: any') &&
                    !this.isInErrorHandlingContext(context),
                priority: 3
            },
            // Function parameter analysis and replacement
            {
                pattern: /\(\s*([^:)]+):\s*any\s*\)/g,
                replacement: (match, context) => {
                    const paramName = match.match(/\(\s*([^:)]+):/)?.[1]?.trim();
                    if (paramName) {
                        const inferredType = this.inferFunctionParameterType(context, paramName);
                        return match.replace('any', inferredType);
                    }
                    return match.replace('any', 'unknown');
                },
                validator: (context) => this.isFunctionParameterContext(context) &&
                    !this.isInErrorHandlingContext(context) &&
                    !this.isEventHandlerContext(context),
                priority: 4
            },
            // Function parameter in arrow functions
            {
                pattern: /\(\s*([^:)]+):\s*any\s*\)\s*=>/g,
                replacement: (match, context) => {
                    const paramName = match.match(/\(\s*([^:)]+):/)?.[1]?.trim();
                    if (paramName) {
                        const inferredType = this.inferFunctionParameterType(context, paramName);
                        return match.replace('any', inferredType);
                    }
                    return match.replace('any', 'unknown');
                },
                validator: (context) => context.codeSnippet.includes('=>') &&
                    !this.isInErrorHandlingContext(context),
                priority: 4
            },
            // Return type inference and replacement
            {
                pattern: /\):\s*any(?=\s*[{;])/g,
                replacement: (match, context) => {
                    const inferredReturnType = this.inferReturnType(context);
                    return match.replace('any', inferredReturnType);
                },
                validator: (context) => this.isFunctionReturnTypeContext(context) &&
                    !this.isInErrorHandlingContext(context) &&
                    !this.isExternalApiContext(context),
                priority: 5
            },
            // Generic type parameter replacement
            {
                pattern: /<\s*any\s*>/g,
                replacement: (match, context) => {
                    const inferredGenericType = this.inferGenericType(context);
                    return match.replace('any', inferredGenericType);
                },
                validator: (context) => context.codeSnippet.includes('<any>') &&
                    !this.isInErrorHandlingContext(context),
                priority: 6
            },
            // Object property type replacement
            {
                pattern: /(\w+):\s*any(?=\s*[,;}])/g,
                replacement: (match, context) => {
                    const propertyName = match.match(/(\w+):/)?.[1];
                    if (propertyName) {
                        const inferredType = this.inferObjectPropertyType(context, propertyName);
                        return match.replace('any', inferredType);
                    }
                    return match.replace('any', 'unknown');
                },
                validator: (context) => this.isObjectPropertyContext(context) &&
                    !this.isInErrorHandlingContext(context),
                priority: 7
            },
            // Simple variable type replacement (fallback)
            {
                pattern: /:\s*any(?=\s*[=;,\)])/g,
                replacement: (match, context) => {
                    // Try to infer from assignment or usage
                    const inferredType = this.inferVariableType(context);
                    return match.replace('any', inferredType);
                },
                validator: (context) => !this.isInErrorHandlingContext(context) &&
                    !this.isExternalApiContext(context) &&
                    !this.isDynamicConfigContext(context),
                priority: 8
            }
        ];
    }
    async createBackup(filePath) {
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const fileName = path.basename(filePath);
        const backupFileName = `${fileName}.${timestamp}.backup`;
        const backupPath = path.join(this.backupDirectory, backupFileName);
        const originalContent = fs.readFileSync(filePath, 'utf8');
        fs.writeFileSync(backupPath, originalContent, 'utf8');
        return backupPath;
    }
    async rollbackFromBackup(filePath, backupPath) {
        if (fs.existsSync(backupPath)) {
            const backupContent = fs.readFileSync(backupPath, 'utf8');
            fs.writeFileSync(filePath, backupContent, 'utf8');
        }
    }
    async rollbackAllFiles(backupPaths) {
        for (const [filePath, backupPath] of Array.from(backupPaths.entries())) {
            await this.rollbackFromBackup(filePath, backupPath);
        }
    }
    groupReplacementsByFile(replacements) {
        const grouped = new Map();
        for (const replacement of replacements) {
            if (!grouped.has(replacement.filePath)) {
                grouped.set(replacement.filePath, []);
            }
            grouped.get(replacement.filePath).push(replacement);
        }
        // Sort replacements within each file by line number (descending to avoid line number shifts)
        for (const fileReplacements of grouped.values()) {
            fileReplacements.sort((a, b) => b.lineNumber - a.lineNumber);
        }
        return grouped;
    }
    async applyReplacementsToFile(filePath, replacements) {
        const applied = [];
        const failed = [];
        const errors = [];
        try {
            let content = fs.readFileSync(filePath, 'utf8');
            let lines = content.split('\n');
            for (const replacement of replacements) {
                try {
                    const lineIndex = replacement.lineNumber - 1;
                    if (lineIndex < 0 || lineIndex >= lines.length) {
                        failed.push(replacement);
                        errors.push(`Invalid line number ${replacement.lineNumber} for file ${filePath}`);
                        continue;
                    }
                    const originalLine = lines[lineIndex];
                    const modifiedLine = originalLine.replace(replacement.original, replacement.replacement);
                    if (originalLine === modifiedLine) {
                        failed.push(replacement);
                        errors.push(`Pattern "${replacement.original}" not found in line: ${originalLine}`);
                        continue;
                    }
                    lines[lineIndex] = modifiedLine;
                    applied.push(replacement);
                }
                catch (error) {
                    failed.push(replacement);
                    errors.push(error instanceof Error ? error.message : String(error));
                }
            }
            // Write the modified content back to file
            const modifiedContent = lines.join('\n');
            fs.writeFileSync(filePath, modifiedContent, 'utf8');
        }
        catch (error) {
            // If file-level operation fails, mark all replacements as failed
            failed.push(...replacements);
            errors.push(error instanceof Error ? error.message : String(error));
        }
        return { applied, failed, errors };
    }
    async validateTypeScriptCompilation() {
        const buildResult = await this.safetyValidator.validateTypeScriptCompilation();
        return {
            success: buildResult.buildSuccessful,
            errors: buildResult.compilationErrors
        };
    }
    ensureBackupDirectory() {
        if (!fs.existsSync(this.backupDirectory)) {
            fs.mkdirSync(this.backupDirectory, { recursive: true });
        }
    }
    /**
     * Perform atomic replacement operation with comprehensive validation
     */
    async performAtomicReplacement(replacement, backupPath) {
        try {
            // Read original file content
            const originalContent = fs.readFileSync(replacement.filePath, 'utf8');
            const lines = originalContent.split('\n');
            // Validate line number
            const lineIndex = replacement.lineNumber - 1;
            if (lineIndex < 0 || lineIndex >= lines.length) {
                return {
                    success: false,
                    appliedReplacements: [],
                    failedReplacements: [replacement],
                    compilationErrors: [`Invalid line number ${replacement.lineNumber} for file ${replacement.filePath}`],
                    rollbackPerformed: false,
                    backupPath
                };
            }
            // Apply replacement
            const originalLine = lines[lineIndex];
            const modifiedLine = originalLine.replace(replacement.original, replacement.replacement);
            // Verify replacement was applied
            if (originalLine === modifiedLine) {
                return {
                    success: false,
                    appliedReplacements: [],
                    failedReplacements: [replacement],
                    compilationErrors: [`Pattern "${replacement.original}" not found in line: ${originalLine}`],
                    rollbackPerformed: false,
                    backupPath
                };
            }
            // Write modified content
            lines[lineIndex] = modifiedLine;
            const modifiedContent = lines.join('\n');
            fs.writeFileSync(replacement.filePath, modifiedContent, 'utf8');
            // Validate TypeScript compilation
            const compilationResult = await this.validateTypeScriptCompilation();
            if (!compilationResult.success) {
                // Rollback on compilation failure
                await this.rollbackFromBackup(replacement.filePath, backupPath);
                return {
                    success: false,
                    appliedReplacements: [],
                    failedReplacements: [replacement],
                    compilationErrors: compilationResult.errors,
                    rollbackPerformed: true,
                    backupPath
                };
            }
            return {
                success: true,
                appliedReplacements: [replacement],
                failedReplacements: [],
                compilationErrors: [],
                rollbackPerformed: false,
                backupPath
            };
        }
        catch (error) {
            // Don't rollback here - let the calling method handle it
            throw error;
        }
    }
    /**
     * Verify that rollback capability is working correctly
     */
    async verifyRollbackCapability(filePath, backupPath) {
        try {
            // Read backup content
            if (!fs.existsSync(backupPath)) {
                return { success: false, error: 'Backup file does not exist' };
            }
            const backupContent = fs.readFileSync(backupPath, 'utf8');
            // For testing purposes, we'll just verify the backup exists and is readable
            // In a real scenario, we might do a more comprehensive test
            if (backupContent.length === 0) {
                return { success: false, error: 'Backup file is empty' };
            }
            return { success: true };
        }
        catch (error) {
            return {
                success: false,
                error: error instanceof Error ? error.message : String(error)
            };
        }
    }
    /**
     * Calculate safety score for a replacement based on multiple factors
     */
    calculateSafetyScore(replacement) {
        let score = replacement.confidence; // Base score from classification confidence
        // Adjust based on replacement type
        if (replacement.replacement.includes('unknown')) {
            score += 0.1; // unknown is generally safer than any
        }
        // Adjust based on file type
        if (replacement.filePath.includes('.test.') || replacement.filePath.includes('__tests__')) {
            score += 0.05; // Test files are safer to modify
        }
        // Adjust based on replacement pattern complexity
        if (replacement.original === 'any[]') {
            score += 0.15; // Array replacements are very safe
        }
        else if (replacement.original.includes('Record<string, any>')) {
            score += 0.1; // Record replacements are generally safe
        }
        else if (replacement.original.includes('function') || replacement.original.includes('=>')) {
            score -= 0.1; // Function-related replacements are riskier
        }
        // Adjust based on line context (if available in the replacement)
        const lineContent = replacement.original;
        if (lineContent.includes('catch') || lineContent.includes('error')) {
            score -= 0.2; // Error handling contexts are riskier
        }
        if (lineContent.includes('interface') || lineContent.includes('type ')) {
            score += 0.05; // Type definitions are safer
        }
        // Ensure score stays within bounds
        return Math.max(0, Math.min(1, score));
    }
    /**
     * Get replacement strategies sorted by priority
     */
    getStrategies() {
        return [...this.strategies].sort((a, b) => a.priority - b.priority);
    }
    /**
     * Add a custom replacement strategy
     */
    addStrategy(strategy) {
        this.strategies.push(strategy);
        this.strategies.sort((a, b) => a.priority - b.priority);
    }
    /**
     * Get backup directory path
     */
    getBackupDirectory() {
        return this.backupDirectory;
    }
    /**
     * Clean up old backup files (older than specified days)
     */
    cleanupOldBackups(daysToKeep = 7) {
        try {
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);
            const files = fs.readdirSync(this.backupDirectory);
            for (const file of files) {
                if (file.endsWith('.backup')) {
                    const filePath = path.join(this.backupDirectory, file);
                    const stats = fs.statSync(filePath);
                    if (stats.mtime < cutoffDate) {
                        fs.unlinkSync(filePath);
                    }
                }
            }
        }
        catch (error) {
            // Log error but don't throw - cleanup is not critical
            console.warn('Failed to cleanup old backups:', error);
        }
    }
    // Type Inference Helper Methods
    /**
     * Infer array element type from context
     */
    inferArrayElementType(context) {
        const { codeSnippet, surroundingLines } = context;
        // Look for array initialization patterns
        if (codeSnippet.includes('= [')) {
            // Check if array has string literals
            if (codeSnippet.includes("'") || codeSnippet.includes('"')) {
                return 'string';
            }
            // Check if array has numbers
            if (/=\s*\[\s*\d/.test(codeSnippet)) {
                return 'number';
            }
            // Check if array has boolean values
            if (codeSnippet.includes('true') || codeSnippet.includes('false')) {
                return 'boolean';
            }
        }
        // Look for push operations in surrounding lines
        const allContext = [codeSnippet, ...surroundingLines].join(' ');
        if (allContext.includes('.push(')) {
            if (allContext.includes('.push("') || allContext.includes(".push('")) {
                return 'string';
            }
            if (/\.push\(\d/.test(allContext)) {
                return 'number';
            }
        }
        // Domain-specific inference
        if (context.domainContext.domain === types_1.CodeDomain.ASTROLOGICAL) {
            if (codeSnippet.includes('planet') || codeSnippet.includes('sign')) {
                return 'string';
            }
            if (codeSnippet.includes('position') || codeSnippet.includes('degree')) {
                return 'number';
            }
        }
        if (context.domainContext.domain === types_1.CodeDomain.RECIPE) {
            if (codeSnippet.includes('ingredient') || codeSnippet.includes('recipe')) {
                return 'string';
            }
        }
        // Default to unknown for safety
        return 'unknown';
    }
    /**
     * Infer Record value type from context
     */
    inferRecordValueType(context) {
        const { codeSnippet, surroundingLines } = context;
        // Look for object literal assignments
        if (codeSnippet.includes('= {')) {
            // Check for string values
            if (codeSnippet.includes(': "') || codeSnippet.includes(": '")) {
                return 'string';
            }
            // Check for number values
            if (/:\s*\d/.test(codeSnippet)) {
                return 'number';
            }
            // Check for boolean values
            if (codeSnippet.includes(': true') || codeSnippet.includes(': false')) {
                return 'boolean';
            }
        }
        // Look for property access patterns in surrounding lines
        const allContext = [codeSnippet, ...surroundingLines].join(' ');
        // Check for string operations
        if (allContext.includes('.toString()') || allContext.includes('.toLowerCase()') || allContext.includes('.toUpperCase()')) {
            return 'string';
        }
        // Check for number operations
        if (allContext.includes('parseInt(') || allContext.includes('parseFloat(') || allContext.includes('Number(')) {
            return 'number';
        }
        // Domain-specific inference
        if (context.domainContext.domain === types_1.CodeDomain.ASTROLOGICAL) {
            if (codeSnippet.includes('element') || codeSnippet.includes('Element')) {
                return 'number'; // Elemental properties are numeric
            }
            if (codeSnippet.includes('config') || codeSnippet.includes('Config')) {
                return 'unknown'; // Config objects can be complex
            }
        }
        return 'unknown';
    }
    /**
     * Infer index signature value type from context
     */
    inferIndexSignatureValueType(context) {
        // Similar logic to Record value type inference
        return this.inferRecordValueType(context);
    }
    /**
     * Infer function parameter type from context and parameter name
     */
    inferFunctionParameterType(context, paramName) {
        const { codeSnippet, surroundingLines } = context;
        // Common parameter name patterns
        const paramLower = paramName.toLowerCase();
        // Event handlers
        if (paramLower.includes('event') || paramLower === 'e') {
            if (context.codeSnippet.includes('onClick') || context.codeSnippet.includes('onSubmit')) {
                return 'React.MouseEvent | React.FormEvent';
            }
            return 'Event';
        }
        // Error parameters
        if (paramLower.includes('error') || paramLower === 'err') {
            return 'Error';
        }
        // ID parameters
        if (paramLower.includes('id') || paramLower === 'key') {
            return 'string | number';
        }
        // Index parameters
        if (paramLower.includes('index') || paramLower === 'i') {
            return 'number';
        }
        // Data parameters
        if (paramLower.includes('data') || paramLower.includes('item') || paramLower.includes('element')) {
            // Try to infer from usage in function body
            const allContext = [codeSnippet, ...surroundingLines].join(' ');
            if (allContext.includes(`${paramName}.`)) {
                return 'object'; // If accessing properties, likely an object
            }
            return 'unknown';
        }
        // Domain-specific inference
        if (context.domainContext.domain === types_1.CodeDomain.ASTROLOGICAL) {
            if (paramLower.includes('planet') || paramLower.includes('sign')) {
                return 'string';
            }
            if (paramLower.includes('position') || paramLower.includes('degree')) {
                return 'number';
            }
            if (paramLower.includes('properties') || paramLower.includes('element')) {
                return 'ElementalProperties';
            }
        }
        if (context.domainContext.domain === types_1.CodeDomain.RECIPE) {
            if (paramLower.includes('ingredient')) {
                return 'Ingredient';
            }
            if (paramLower.includes('recipe')) {
                return 'Recipe';
            }
        }
        return 'unknown';
    }
    /**
     * Infer return type from function context
     */
    inferReturnType(context) {
        const { codeSnippet, surroundingLines } = context;
        // Look for return statements in surrounding lines
        const allContext = [codeSnippet, ...surroundingLines].join(' ');
        // Check for explicit return statements
        if (allContext.includes('return ')) {
            // String returns
            if (allContext.includes('return "') || allContext.includes("return '")) {
                return 'string';
            }
            // Number returns
            if (/return\s+\d/.test(allContext)) {
                return 'number';
            }
            // Boolean returns
            if (allContext.includes('return true') || allContext.includes('return false')) {
                return 'boolean';
            }
            // Array returns
            if (allContext.includes('return [')) {
                return 'unknown[]';
            }
            // Object returns
            if (allContext.includes('return {')) {
                return 'object';
            }
            // Promise returns
            if (allContext.includes('return Promise') || allContext.includes('return new Promise')) {
                return 'Promise<unknown>';
            }
        }
        // Check for async functions
        if (codeSnippet.includes('async ')) {
            return 'Promise<unknown>';
        }
        // Function name inference
        if (codeSnippet.includes('get') && codeSnippet.includes('(')) {
            return 'unknown'; // Getter functions return something
        }
        if (codeSnippet.includes('is') || codeSnippet.includes('has') || codeSnippet.includes('can')) {
            return 'boolean'; // Predicate functions
        }
        if (codeSnippet.includes('calculate') || codeSnippet.includes('count')) {
            return 'number'; // Calculation functions
        }
        return 'unknown';
    }
    /**
     * Infer generic type from context
     */
    inferGenericType(context) {
        const { codeSnippet } = context;
        // Check for common generic patterns
        if (codeSnippet.includes('Array<any>')) {
            return 'unknown';
        }
        if (codeSnippet.includes('Promise<any>')) {
            return 'unknown';
        }
        if (codeSnippet.includes('Map<') || codeSnippet.includes('Set<')) {
            return 'unknown';
        }
        // Domain-specific generics
        if (context.domainContext.domain === types_1.CodeDomain.ASTROLOGICAL) {
            if (codeSnippet.includes('PlanetaryPosition') || codeSnippet.includes('ElementalProperties')) {
                return 'unknown'; // Keep generic for flexibility
            }
        }
        return 'unknown';
    }
    /**
     * Infer object property type from context and property name
     */
    inferObjectPropertyType(context, propertyName) {
        const { codeSnippet, surroundingLines } = context;
        const propLower = propertyName.toLowerCase();
        // Common property patterns
        if (propLower.includes('id') || propLower === 'key') {
            return 'string | number';
        }
        if (propLower.includes('name') || propLower.includes('title') || propLower.includes('description')) {
            return 'string';
        }
        if (propLower.includes('count') || propLower.includes('length') || propLower.includes('size')) {
            return 'number';
        }
        if (propLower.includes('enabled') || propLower.includes('active') || propLower.includes('visible')) {
            return 'boolean';
        }
        if (propLower.includes('date') || propLower.includes('time')) {
            return 'Date | string';
        }
        // Look for assignment patterns
        const allContext = [codeSnippet, ...surroundingLines].join(' ');
        if (allContext.includes(`${propertyName}: "`)) {
            return 'string';
        }
        if (allContext.includes(`${propertyName}: \d`)) {
            return 'number';
        }
        // Domain-specific inference
        if (context.domainContext.domain === types_1.CodeDomain.ASTROLOGICAL) {
            if (propLower.includes('element') || propLower.includes('fire') || propLower.includes('water') ||
                propLower.includes('earth') || propLower.includes('air')) {
                return 'number';
            }
            if (propLower.includes('sign') || propLower.includes('planet')) {
                return 'string';
            }
        }
        return 'unknown';
    }
    /**
     * Infer variable type from context
     */
    inferVariableType(context) {
        const { codeSnippet } = context;
        // Look for assignment patterns
        if (codeSnippet.includes('= "') || codeSnippet.includes("= '")) {
            return 'string';
        }
        if (/=\s*\d/.test(codeSnippet)) {
            return 'number';
        }
        if (codeSnippet.includes('= true') || codeSnippet.includes('= false')) {
            return 'boolean';
        }
        if (codeSnippet.includes('= [')) {
            return 'unknown[]';
        }
        if (codeSnippet.includes('= {')) {
            return 'object';
        }
        if (codeSnippet.includes('= new ')) {
            // Try to extract constructor name
            const constructorMatch = codeSnippet.match(/= new (\w+)/);
            if (constructorMatch) {
                return constructorMatch[1];
            }
            return 'object';
        }
        return 'unknown';
    }
    // Context Validation Helper Methods
    /**
     * Check if context is in error handling (catch blocks, error parameters)
     */
    isInErrorHandlingContext(context) {
        const { codeSnippet, surroundingLines } = context;
        const allContext = [codeSnippet, ...surroundingLines].join(' ').toLowerCase();
        return allContext.includes('catch') ||
            allContext.includes('error') ||
            allContext.includes('exception') ||
            codeSnippet.toLowerCase().includes('err');
    }
    /**
     * Check if context is for external API responses
     */
    isExternalApiContext(context) {
        const { codeSnippet, surroundingLines } = context;
        const allContext = [codeSnippet, ...surroundingLines].join(' ').toLowerCase();
        return allContext.includes('api') ||
            allContext.includes('response') ||
            allContext.includes('fetch') ||
            allContext.includes('axios') ||
            allContext.includes('request');
    }
    /**
     * Check if context is for dynamic configuration
     */
    isDynamicConfigContext(context) {
        const { codeSnippet, surroundingLines } = context;
        const allContext = [codeSnippet, ...surroundingLines].join(' ').toLowerCase();
        return allContext.includes('config') ||
            allContext.includes('settings') ||
            allContext.includes('options') ||
            context.domainContext.domain === types_1.CodeDomain.CAMPAIGN ||
            context.domainContext.domain === types_1.CodeDomain.INTELLIGENCE;
    }
    /**
     * Check if context is for event handlers
     */
    isEventHandlerContext(context) {
        const { codeSnippet } = context;
        return codeSnippet.includes('onClick') ||
            codeSnippet.includes('onChange') ||
            codeSnippet.includes('onSubmit') ||
            codeSnippet.includes('addEventListener') ||
            codeSnippet.includes('handler');
    }
    /**
     * Check if context is a function parameter
     */
    isFunctionParameterContext(context) {
        const { codeSnippet } = context;
        return codeSnippet.includes('(') &&
            codeSnippet.includes(':') &&
            (codeSnippet.includes(')') || codeSnippet.includes(','));
    }
    /**
     * Check if context is a function return type
     */
    isFunctionReturnTypeContext(context) {
        const { codeSnippet } = context;
        return codeSnippet.includes('):') &&
            (codeSnippet.includes('{') || codeSnippet.includes(';'));
    }
    /**
     * Check if context is an object property
     */
    isObjectPropertyContext(context) {
        const { codeSnippet } = context;
        return codeSnippet.includes(':') &&
            (codeSnippet.includes(',') || codeSnippet.includes('}') || codeSnippet.includes(';'));
    }
    // Enhanced Safety Validation Methods
    /**
     * Perform comprehensive safety validation for a replacement
     */
    async validateReplacementSafety(replacement, context) {
        return this.safetyValidator.calculateSafetyScore(replacement, context);
    }
    /**
     * Validate build after applying replacements
     */
    async validateBuildSafety(modifiedFiles, includeTests = false) {
        return this.safetyValidator.validateBuildAfterBatch(modifiedFiles, includeTests);
    }
    /**
     * Validate rollback capability for given files
     */
    async validateRollbackSafety(originalFiles, backupFiles) {
        return this.safetyValidator.validateRollbackCapability(originalFiles, backupFiles);
    }
    /**
     * Get current safety validator instance
     */
    getSafetyValidator() {
        return this.safetyValidator;
    }
    /**
     * Update safety thresholds
     */
    updateSafetyThresholds(thresholds) {
        if (thresholds.minimumSafetyScore !== undefined) {
            this.safetyThreshold = thresholds.minimumSafetyScore;
            this.safetyValidator.updateSafetyThresholds({
                minimumSafetyScore: thresholds.minimumSafetyScore
            });
        }
    }
}
exports.SafeTypeReplacer = SafeTypeReplacer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L2JhY2t1cHMvY29uc2VydmF0aXZlLXdhdmUtMjAyNS0wOC0xMVQwNS0yMS0zMy00MTBaL3NyYy9zZXJ2aWNlcy9jYW1wYWlnbi91bmludGVudGlvbmFsLWFueS1lbGltaW5hdGlvbi9TYWZlVHlwZVJlcGxhY2VyLnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7O0dBU0c7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUgsdUNBQXlCO0FBQ3pCLDJDQUE2QjtBQUc3Qix1REFBb0Q7QUFDcEQsbUNBT2lCO0FBRWpCLE1BQWEsZ0JBQWdCO0lBQ25CLFVBQVUsQ0FBd0I7SUFDbEMsZUFBZSxDQUFTO0lBQ3hCLGVBQWUsQ0FBUztJQUN4QixpQkFBaUIsQ0FBUztJQUMxQixVQUFVLENBQVM7SUFDbkIsZUFBZSxDQUFrQjtJQUV6QyxZQUNFLGVBQWUsR0FBRyw0QkFBNEIsRUFDOUMsZUFBZSxHQUFHLEdBQUcsRUFDckIsaUJBQWlCLEdBQUcsS0FBSyxFQUN6QixVQUFVLEdBQUcsQ0FBQztRQUVkLElBQUksQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQztRQUMzQyxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1FBQzlDLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxpQ0FBZSxDQUFDLGlCQUFpQixFQUFFO1lBQzVELGtCQUFrQixFQUFFLGVBQWU7U0FDcEMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7SUFDL0IsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxXQUE0QixFQUFFLE9BQStCO1FBQ2xGLGdEQUFnRDtRQUNoRCxJQUFJLGdCQUF3QyxDQUFDO1FBRTdDLElBQUksT0FBTyxFQUFFO1lBQ1gsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDcEY7YUFBTTtZQUNMLDZDQUE2QztZQUM3QyxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNoRSxnQkFBZ0IsR0FBRztnQkFDakIsT0FBTyxFQUFFLGdCQUFnQixJQUFJLElBQUksQ0FBQyxlQUFlO2dCQUNqRCxXQUFXLEVBQUUsZ0JBQWdCO2dCQUM3QixnQkFBZ0IsRUFBRSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsZUFBZTtvQkFDdkQsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLGdCQUFnQixvQkFBb0IsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO29CQUM5RSxDQUFDLENBQUMsRUFBRTtnQkFDTixRQUFRLEVBQUUsRUFBRTtnQkFDWixlQUFlLEVBQUUsRUFBRTthQUNwQixDQUFDO1NBQ0g7UUFFRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFO1lBQzdCLE9BQU87Z0JBQ0wsT0FBTyxFQUFFLEtBQUs7Z0JBQ2QsbUJBQW1CLEVBQUUsRUFBRTtnQkFDdkIsa0JBQWtCLEVBQUUsQ0FBQyxXQUFXLENBQUM7Z0JBQ2pDLGlCQUFpQixFQUFFLGdCQUFnQixDQUFDLGdCQUFnQjtnQkFDcEQsaUJBQWlCLEVBQUUsS0FBSzthQUN6QixDQUFDO1NBQ0g7UUFFRCxNQUFNLFVBQVUsR0FBRyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2pFLElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQztRQUVuQixPQUFPLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ25DLElBQUk7Z0JBQ0YsK0JBQStCO2dCQUMvQixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxXQUFXLEVBQUUsVUFBVSxDQUFDLENBQUM7Z0JBRTVFLElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRTtvQkFDbEIsc0RBQXNEO29CQUN0RCxNQUFNLG9CQUFvQixHQUFHLE1BQU0sSUFBSSxDQUFDLHdCQUF3QixDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7b0JBQ25HLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLEVBQUU7d0JBQ2pDLE1BQU0sSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7d0JBQ2hFLE9BQU87NEJBQ0wsT0FBTyxFQUFFLEtBQUs7NEJBQ2QsbUJBQW1CLEVBQUUsRUFBRTs0QkFDdkIsa0JBQWtCLEVBQUUsQ0FBQyxXQUFXLENBQUM7NEJBQ2pDLGlCQUFpQixFQUFFLENBQUMsaUNBQWlDLG9CQUFvQixDQUFDLEtBQUssRUFBRSxDQUFDOzRCQUNsRixpQkFBaUIsRUFBRSxJQUFJOzRCQUN2QixVQUFVO3lCQUNYLENBQUM7cUJBQ0g7b0JBRUQsT0FBTyxNQUFNLENBQUM7aUJBQ2Y7cUJBQU07b0JBQ0wsK0VBQStFO29CQUMvRSxPQUFPLE1BQU0sQ0FBQztpQkFDZjthQUVGO1lBQUMsT0FBTyxLQUFLLEVBQUU7Z0JBQ2QsVUFBVSxFQUFFLENBQUM7Z0JBQ2IsSUFBSSxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtvQkFDakMsc0NBQXNDO29CQUN0QyxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO29CQUNoRSxPQUFPO3dCQUNMLE9BQU8sRUFBRSxLQUFLO3dCQUNkLG1CQUFtQixFQUFFLEVBQUU7d0JBQ3ZCLGtCQUFrQixFQUFFLENBQUMsV0FBVyxDQUFDO3dCQUNqQyxpQkFBaUIsRUFBRSxDQUFDLEtBQUssWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQzt3QkFDM0UsaUJBQWlCLEVBQUUsSUFBSTt3QkFDdkIsVUFBVTtxQkFDWCxDQUFDO2lCQUNIO2dCQUVELDRCQUE0QjtnQkFDNUIsTUFBTSxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUM7YUFDckU7U0FDRjtRQUVELDhDQUE4QztRQUM5QyxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ2hFLE9BQU87WUFDTCxPQUFPLEVBQUUsS0FBSztZQUNkLG1CQUFtQixFQUFFLEVBQUU7WUFDdkIsa0JBQWtCLEVBQUUsQ0FBQyxXQUFXLENBQUM7WUFDakMsaUJBQWlCLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQztZQUMvQyxpQkFBaUIsRUFBRSxJQUFJO1lBQ3ZCLFVBQVU7U0FDWCxDQUFDO0lBQ0osQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLFlBQVksQ0FBQyxZQUErQjtRQUNoRCxNQUFNLFdBQVcsR0FBd0IsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUNuRCxNQUFNLG1CQUFtQixHQUFzQixFQUFFLENBQUM7UUFDbEQsTUFBTSxrQkFBa0IsR0FBc0IsRUFBRSxDQUFDO1FBQ2pELE1BQU0saUJBQWlCLEdBQWEsRUFBRSxDQUFDO1FBRXZDLElBQUk7WUFDRiwrQkFBK0I7WUFDL0IsS0FBSyxNQUFNLFdBQVcsSUFBSSxZQUFZLEVBQUU7Z0JBQ3RDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsRUFBRTtvQkFDMUMsTUFBTSxVQUFVLEdBQUcsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFDakUsV0FBVyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO2lCQUNuRDthQUNGO1lBRUQsc0RBQXNEO1lBQ3RELE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLFlBQVksQ0FBQyxDQUFDO1lBRXRFLGtDQUFrQztZQUNsQyxLQUFLLE1BQU0sQ0FBQyxRQUFRLEVBQUUsZ0JBQWdCLENBQUMsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUU7Z0JBQ25GLElBQUk7b0JBQ0YsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsdUJBQXVCLENBQUMsUUFBUSxFQUFFLGdCQUFnQixDQUFDLENBQUM7b0JBQzlFLG1CQUFtQixDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFDNUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUUxQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTt3QkFDNUIsaUJBQWlCLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO3FCQUMxQztpQkFDRjtnQkFBQyxPQUFPLEtBQUssRUFBRTtvQkFDZCxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDO29CQUM3QyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7aUJBQ2hGO2FBQ0Y7WUFFRCxtREFBbUQ7WUFDbkQsTUFBTSxhQUFhLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUNyRCxNQUFNLGVBQWUsR0FBRyxNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsdUJBQXVCLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBRWpHLElBQUksQ0FBQyxlQUFlLENBQUMsZUFBZSxFQUFFO2dCQUNwQyx1QkFBdUI7Z0JBQ3ZCLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUV6QyxPQUFPO29CQUNMLE9BQU8sRUFBRSxLQUFLO29CQUNkLG1CQUFtQixFQUFFLEVBQUU7b0JBQ3ZCLGtCQUFrQixFQUFFLFlBQVk7b0JBQ2hDLGlCQUFpQixFQUFFLGVBQWUsQ0FBQyxpQkFBaUI7b0JBQ3BELGlCQUFpQixFQUFFLElBQUk7aUJBQ3hCLENBQUM7YUFDSDtZQUVELCtCQUErQjtZQUMvQixNQUFNLGtCQUFrQixHQUFHLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQywwQkFBMEIsQ0FDOUUsSUFBSSxHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDaEQsV0FBVyxDQUNaLENBQUM7WUFFRixJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFO2dCQUNuQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsQ0FBQztnQkFDN0QsaUJBQWlCLENBQUMsSUFBSSxDQUFDLDBDQUEwQyxDQUFDLENBQUM7YUFDcEU7WUFFRCxNQUFNLE9BQU8sR0FBRyxrQkFBa0IsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDO1lBQ2hELE9BQU87Z0JBQ0wsT0FBTztnQkFDUCxtQkFBbUI7Z0JBQ25CLGtCQUFrQjtnQkFDbEIsaUJBQWlCO2dCQUNqQixpQkFBaUIsRUFBRSxLQUFLO2FBQ3pCLENBQUM7U0FFSDtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QscUJBQXFCO1lBQ3JCLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBRXpDLE1BQU0sSUFBSSwyQkFBbUIsQ0FDM0Isa0RBQWtELEVBQ2xELEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUN6QyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUMvQixDQUFDO1NBQ0g7SUFDSCxDQUFDO0lBRU8sb0JBQW9CO1FBQzFCLE9BQU87WUFDTCxzREFBc0Q7WUFDdEQ7Z0JBQ0UsT0FBTyxFQUFFLGNBQWM7Z0JBQ3ZCLFdBQVcsRUFBRSxDQUFDLEtBQWEsRUFBRSxPQUE4QixFQUFFLEVBQUU7b0JBQzdELG1EQUFtRDtvQkFDbkQsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxDQUFDO29CQUN6RCxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEdBQUcsWUFBWSxJQUFJLENBQUMsQ0FBQztnQkFDckQsQ0FBQztnQkFDRCxTQUFTLEVBQUUsQ0FBQyxPQUE4QixFQUFFLEVBQUUsQ0FDNUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO29CQUNyQyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxPQUFPLENBQUM7Z0JBQ3pDLFFBQVEsRUFBRSxDQUFDO2FBQ1o7WUFFRCwwRkFBMEY7WUFDMUY7Z0JBQ0UsT0FBTyxFQUFFLHFDQUFxQztnQkFDOUMsV0FBVyxFQUFFLENBQUMsS0FBYSxFQUFFLE9BQThCLEVBQUUsRUFBRTtvQkFDN0QsbURBQW1EO29CQUNuRCxNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFDN0QsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLGdDQUFnQyxFQUFFLGtCQUFrQixpQkFBaUIsR0FBRyxDQUFDLENBQUM7Z0JBQ2pHLENBQUM7Z0JBQ0QsU0FBUyxFQUFFLENBQUMsT0FBOEIsRUFBRSxFQUFFLENBQzVDLE9BQU8sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDO29CQUNuRCxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxPQUFPLENBQUM7b0JBQ3ZDLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLE9BQU8sQ0FBQztnQkFDdkMsUUFBUSxFQUFFLENBQUM7YUFDWjtZQUVELDZFQUE2RTtZQUM3RTtnQkFDRSxPQUFPLEVBQUUscUNBQXFDO2dCQUM5QyxXQUFXLEVBQUUsQ0FBQyxLQUFhLEVBQUUsT0FBOEIsRUFBRSxFQUFFO29CQUM3RCxNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFDN0QsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLGdDQUFnQyxFQUFFLGtCQUFrQixpQkFBaUIsR0FBRyxDQUFDLENBQUM7Z0JBQ2pHLENBQUM7Z0JBQ0QsU0FBUyxFQUFFLENBQUMsT0FBOEIsRUFBRSxFQUFFLENBQzVDLE9BQU8sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDO29CQUNuRCxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxPQUFPLENBQUM7Z0JBQ3pDLFFBQVEsRUFBRSxDQUFDO2FBQ1o7WUFFRCw0RUFBNEU7WUFDNUU7Z0JBQ0UsT0FBTyxFQUFFLDhCQUE4QjtnQkFDdkMsV0FBVyxFQUFFLENBQUMsS0FBYSxFQUFFLE9BQThCLEVBQUUsRUFBRTtvQkFDN0QsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsNEJBQTRCLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQ3JFLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztnQkFDakQsQ0FBQztnQkFDRCxTQUFTLEVBQUUsQ0FBQyxPQUE4QixFQUFFLEVBQUUsQ0FDNUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsb0JBQW9CLENBQUM7b0JBQ2xELENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLE9BQU8sQ0FBQztnQkFDekMsUUFBUSxFQUFFLENBQUM7YUFDWjtZQUVELDhDQUE4QztZQUM5QztnQkFDRSxPQUFPLEVBQUUsNEJBQTRCO2dCQUNyQyxXQUFXLEVBQUUsQ0FBQyxLQUFhLEVBQUUsT0FBOEIsRUFBRSxFQUFFO29CQUM3RCxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQztvQkFDN0QsSUFBSSxTQUFTLEVBQUU7d0JBQ2IsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLDBCQUEwQixDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQzt3QkFDekUsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQztxQkFDM0M7b0JBQ0QsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztnQkFDekMsQ0FBQztnQkFDRCxTQUFTLEVBQUUsQ0FBQyxPQUE4QixFQUFFLEVBQUUsQ0FDNUMsSUFBSSxDQUFDLDBCQUEwQixDQUFDLE9BQU8sQ0FBQztvQkFDeEMsQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsT0FBTyxDQUFDO29CQUN2QyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLENBQUM7Z0JBQ3RDLFFBQVEsRUFBRSxDQUFDO2FBQ1o7WUFFRCx3Q0FBd0M7WUFDeEM7Z0JBQ0UsT0FBTyxFQUFFLGlDQUFpQztnQkFDMUMsV0FBVyxFQUFFLENBQUMsS0FBYSxFQUFFLE9BQThCLEVBQUUsRUFBRTtvQkFDN0QsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUM7b0JBQzdELElBQUksU0FBUyxFQUFFO3dCQUNiLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7d0JBQ3pFLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUM7cUJBQzNDO29CQUNELE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7Z0JBQ3pDLENBQUM7Z0JBQ0QsU0FBUyxFQUFFLENBQUMsT0FBOEIsRUFBRSxFQUFFLENBQzVDLE9BQU8sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztvQkFDbEMsQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsT0FBTyxDQUFDO2dCQUN6QyxRQUFRLEVBQUUsQ0FBQzthQUNaO1lBRUQsd0NBQXdDO1lBQ3hDO2dCQUNFLE9BQU8sRUFBRSx1QkFBdUI7Z0JBQ2hDLFdBQVcsRUFBRSxDQUFDLEtBQWEsRUFBRSxPQUE4QixFQUFFLEVBQUU7b0JBQzdELE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFDekQsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO2dCQUNsRCxDQUFDO2dCQUNELFNBQVMsRUFBRSxDQUFDLE9BQThCLEVBQUUsRUFBRSxDQUM1QyxJQUFJLENBQUMsMkJBQTJCLENBQUMsT0FBTyxDQUFDO29CQUN6QyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxPQUFPLENBQUM7b0JBQ3ZDLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQztnQkFDckMsUUFBUSxFQUFFLENBQUM7YUFDWjtZQUVELHFDQUFxQztZQUNyQztnQkFDRSxPQUFPLEVBQUUsY0FBYztnQkFDdkIsV0FBVyxFQUFFLENBQUMsS0FBYSxFQUFFLE9BQThCLEVBQUUsRUFBRTtvQkFDN0QsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQzNELE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztnQkFDbkQsQ0FBQztnQkFDRCxTQUFTLEVBQUUsQ0FBQyxPQUE4QixFQUFFLEVBQUUsQ0FDNUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO29CQUNyQyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxPQUFPLENBQUM7Z0JBQ3pDLFFBQVEsRUFBRSxDQUFDO2FBQ1o7WUFFRCxtQ0FBbUM7WUFDbkM7Z0JBQ0UsT0FBTyxFQUFFLDJCQUEyQjtnQkFDcEMsV0FBVyxFQUFFLENBQUMsS0FBYSxFQUFFLE9BQThCLEVBQUUsRUFBRTtvQkFDN0QsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNoRCxJQUFJLFlBQVksRUFBRTt3QkFDaEIsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQzt3QkFDekUsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQztxQkFDM0M7b0JBQ0QsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztnQkFDekMsQ0FBQztnQkFDRCxTQUFTLEVBQUUsQ0FBQyxPQUE4QixFQUFFLEVBQUUsQ0FDNUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLE9BQU8sQ0FBQztvQkFDckMsQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsT0FBTyxDQUFDO2dCQUN6QyxRQUFRLEVBQUUsQ0FBQzthQUNaO1lBRUQsOENBQThDO1lBQzlDO2dCQUNFLE9BQU8sRUFBRSx3QkFBd0I7Z0JBQ2pDLFdBQVcsRUFBRSxDQUFDLEtBQWEsRUFBRSxPQUE4QixFQUFFLEVBQUU7b0JBQzdELHdDQUF3QztvQkFDeEMsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDO29CQUNyRCxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFDO2dCQUM1QyxDQUFDO2dCQUNELFNBQVMsRUFBRSxDQUFDLE9BQThCLEVBQUUsRUFBRSxDQUM1QyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxPQUFPLENBQUM7b0JBQ3ZDLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQztvQkFDbkMsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsT0FBTyxDQUFDO2dCQUN2QyxRQUFRLEVBQUUsQ0FBQzthQUNaO1NBQ0YsQ0FBQztJQUNKLENBQUM7SUFFTyxLQUFLLENBQUMsWUFBWSxDQUFDLFFBQWdCO1FBQ3pDLE1BQU0sU0FBUyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNqRSxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sY0FBYyxHQUFHLEdBQUcsUUFBUSxJQUFJLFNBQVMsU0FBUyxDQUFDO1FBQ3pELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUVuRSxNQUFNLGVBQWUsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMxRCxFQUFFLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxlQUFlLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFdEQsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQztJQUVPLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxRQUFnQixFQUFFLFVBQWtCO1FBQ25FLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUM3QixNQUFNLGFBQWEsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUMxRCxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDbkQ7SUFDSCxDQUFDO0lBRU8sS0FBSyxDQUFDLGdCQUFnQixDQUFDLFdBQWdDO1FBQzdELEtBQUssTUFBTSxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFO1lBQ3RFLE1BQU0sSUFBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztTQUNyRDtJQUNILENBQUM7SUFFTyx1QkFBdUIsQ0FBQyxZQUErQjtRQUM3RCxNQUFNLE9BQU8sR0FBRyxJQUFJLEdBQUcsRUFBNkIsQ0FBQztRQUVyRCxLQUFLLE1BQU0sV0FBVyxJQUFJLFlBQVksRUFBRTtZQUN0QyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQ3RDLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQzthQUN2QztZQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUN0RDtRQUVELDZGQUE2RjtRQUM3RixLQUFLLE1BQU0sZ0JBQWdCLElBQUksT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQy9DLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQzlEO1FBRUQsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUVPLEtBQUssQ0FBQyx1QkFBdUIsQ0FDbkMsUUFBZ0IsRUFDaEIsWUFBK0I7UUFFL0IsTUFBTSxPQUFPLEdBQXNCLEVBQUUsQ0FBQztRQUN0QyxNQUFNLE1BQU0sR0FBc0IsRUFBRSxDQUFDO1FBQ3JDLE1BQU0sTUFBTSxHQUFhLEVBQUUsQ0FBQztRQUU1QixJQUFJO1lBQ0YsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDaEQsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUVoQyxLQUFLLE1BQU0sV0FBVyxJQUFJLFlBQVksRUFBRTtnQkFDdEMsSUFBSTtvQkFDRixNQUFNLFNBQVMsR0FBRyxXQUFXLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztvQkFDN0MsSUFBSSxTQUFTLEdBQUcsQ0FBQyxJQUFJLFNBQVMsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO3dCQUM5QyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO3dCQUN6QixNQUFNLENBQUMsSUFBSSxDQUFDLHVCQUF1QixXQUFXLENBQUMsVUFBVSxhQUFhLFFBQVEsRUFBRSxDQUFDLENBQUM7d0JBQ2xGLFNBQVM7cUJBQ1Y7b0JBRUQsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO29CQUN0QyxNQUFNLFlBQVksR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO29CQUV6RixJQUFJLFlBQVksS0FBSyxZQUFZLEVBQUU7d0JBQ2pDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7d0JBQ3pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxXQUFXLENBQUMsUUFBUSx3QkFBd0IsWUFBWSxFQUFFLENBQUMsQ0FBQzt3QkFDcEYsU0FBUztxQkFDVjtvQkFFRCxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsWUFBWSxDQUFDO29CQUNoQyxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2lCQUUzQjtnQkFBQyxPQUFPLEtBQUssRUFBRTtvQkFDZCxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO29CQUN6QixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2lCQUNyRTthQUNGO1lBRUQsMENBQTBDO1lBQzFDLE1BQU0sZUFBZSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDekMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsZUFBZSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBRXJEO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxpRUFBaUU7WUFDakUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLFlBQVksQ0FBQyxDQUFDO1lBQzdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDckU7UUFFRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQztJQUNyQyxDQUFDO0lBRU8sS0FBSyxDQUFDLDZCQUE2QjtRQUN6QyxNQUFNLFdBQVcsR0FBRyxNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsNkJBQTZCLEVBQUUsQ0FBQztRQUMvRSxPQUFPO1lBQ0wsT0FBTyxFQUFFLFdBQVcsQ0FBQyxlQUFlO1lBQ3BDLE1BQU0sRUFBRSxXQUFXLENBQUMsaUJBQWlCO1NBQ3RDLENBQUM7SUFDSixDQUFDO0lBRU8scUJBQXFCO1FBQzNCLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRTtZQUN4QyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztTQUN6RDtJQUNILENBQUM7SUFFRDs7T0FFRztJQUNLLEtBQUssQ0FBQyx3QkFBd0IsQ0FDcEMsV0FBNEIsRUFDNUIsVUFBa0I7UUFFbEIsSUFBSTtZQUNGLDZCQUE2QjtZQUM3QixNQUFNLGVBQWUsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDdEUsTUFBTSxLQUFLLEdBQUcsZUFBZSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUUxQyx1QkFBdUI7WUFDdkIsTUFBTSxTQUFTLEdBQUcsV0FBVyxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUM7WUFDN0MsSUFBSSxTQUFTLEdBQUcsQ0FBQyxJQUFJLFNBQVMsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO2dCQUM5QyxPQUFPO29CQUNMLE9BQU8sRUFBRSxLQUFLO29CQUNkLG1CQUFtQixFQUFFLEVBQUU7b0JBQ3ZCLGtCQUFrQixFQUFFLENBQUMsV0FBVyxDQUFDO29CQUNqQyxpQkFBaUIsRUFBRSxDQUFDLHVCQUF1QixXQUFXLENBQUMsVUFBVSxhQUFhLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztvQkFDckcsaUJBQWlCLEVBQUUsS0FBSztvQkFDeEIsVUFBVTtpQkFDWCxDQUFDO2FBQ0g7WUFFRCxvQkFBb0I7WUFDcEIsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3RDLE1BQU0sWUFBWSxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7WUFFekYsaUNBQWlDO1lBQ2pDLElBQUksWUFBWSxLQUFLLFlBQVksRUFBRTtnQkFDakMsT0FBTztvQkFDTCxPQUFPLEVBQUUsS0FBSztvQkFDZCxtQkFBbUIsRUFBRSxFQUFFO29CQUN2QixrQkFBa0IsRUFBRSxDQUFDLFdBQVcsQ0FBQztvQkFDakMsaUJBQWlCLEVBQUUsQ0FBQyxZQUFZLFdBQVcsQ0FBQyxRQUFRLHdCQUF3QixZQUFZLEVBQUUsQ0FBQztvQkFDM0YsaUJBQWlCLEVBQUUsS0FBSztvQkFDeEIsVUFBVTtpQkFDWCxDQUFDO2FBQ0g7WUFFRCx5QkFBeUI7WUFDekIsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLFlBQVksQ0FBQztZQUNoQyxNQUFNLGVBQWUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3pDLEVBQUUsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxlQUFlLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFFaEUsa0NBQWtDO1lBQ2xDLE1BQU0saUJBQWlCLEdBQUcsTUFBTSxJQUFJLENBQUMsNkJBQTZCLEVBQUUsQ0FBQztZQUNyRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxFQUFFO2dCQUM5QixrQ0FBa0M7Z0JBQ2xDLE1BQU0sSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7Z0JBQ2hFLE9BQU87b0JBQ0wsT0FBTyxFQUFFLEtBQUs7b0JBQ2QsbUJBQW1CLEVBQUUsRUFBRTtvQkFDdkIsa0JBQWtCLEVBQUUsQ0FBQyxXQUFXLENBQUM7b0JBQ2pDLGlCQUFpQixFQUFFLGlCQUFpQixDQUFDLE1BQU07b0JBQzNDLGlCQUFpQixFQUFFLElBQUk7b0JBQ3ZCLFVBQVU7aUJBQ1gsQ0FBQzthQUNIO1lBRUQsT0FBTztnQkFDTCxPQUFPLEVBQUUsSUFBSTtnQkFDYixtQkFBbUIsRUFBRSxDQUFDLFdBQVcsQ0FBQztnQkFDbEMsa0JBQWtCLEVBQUUsRUFBRTtnQkFDdEIsaUJBQWlCLEVBQUUsRUFBRTtnQkFDckIsaUJBQWlCLEVBQUUsS0FBSztnQkFDeEIsVUFBVTthQUNYLENBQUM7U0FFSDtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QseURBQXlEO1lBQ3pELE1BQU0sS0FBSyxDQUFDO1NBQ2I7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSyxLQUFLLENBQUMsd0JBQXdCLENBQ3BDLFFBQWdCLEVBQ2hCLFVBQWtCO1FBRWxCLElBQUk7WUFDRixzQkFBc0I7WUFDdEIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLEVBQUU7Z0JBQzlCLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSw0QkFBNEIsRUFBRSxDQUFDO2FBQ2hFO1lBRUQsTUFBTSxhQUFhLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFFMUQsNEVBQTRFO1lBQzVFLDREQUE0RDtZQUM1RCxJQUFJLGFBQWEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUM5QixPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsc0JBQXNCLEVBQUUsQ0FBQzthQUMxRDtZQUVELE9BQU8sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUM7U0FFMUI7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLE9BQU87Z0JBQ0wsT0FBTyxFQUFFLEtBQUs7Z0JBQ2QsS0FBSyxFQUFFLEtBQUssWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7YUFDOUQsQ0FBQztTQUNIO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0ssb0JBQW9CLENBQUMsV0FBNEI7UUFDdkQsSUFBSSxLQUFLLEdBQUcsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDLDRDQUE0QztRQUVoRixtQ0FBbUM7UUFDbkMsSUFBSSxXQUFXLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUMvQyxLQUFLLElBQUksR0FBRyxDQUFDLENBQUMsc0NBQXNDO1NBQ3JEO1FBRUQsNEJBQTRCO1FBQzVCLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDekYsS0FBSyxJQUFJLElBQUksQ0FBQyxDQUFDLGlDQUFpQztTQUNqRDtRQUVELGlEQUFpRDtRQUNqRCxJQUFJLFdBQVcsQ0FBQyxRQUFRLEtBQUssT0FBTyxFQUFFO1lBQ3BDLEtBQUssSUFBSSxJQUFJLENBQUMsQ0FBQyxtQ0FBbUM7U0FDbkQ7YUFBTSxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDLEVBQUU7WUFDL0QsS0FBSyxJQUFJLEdBQUcsQ0FBQyxDQUFDLHlDQUF5QztTQUN4RDthQUFNLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDM0YsS0FBSyxJQUFJLEdBQUcsQ0FBQyxDQUFDLDRDQUE0QztTQUMzRDtRQUVELGlFQUFpRTtRQUNqRSxNQUFNLFdBQVcsR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDO1FBQ3pDLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ2xFLEtBQUssSUFBSSxHQUFHLENBQUMsQ0FBQyxzQ0FBc0M7U0FDckQ7UUFFRCxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUN0RSxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsNkJBQTZCO1NBQzdDO1FBRUQsbUNBQW1DO1FBQ25DLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxhQUFhO1FBQ1gsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFFRDs7T0FFRztJQUNILFdBQVcsQ0FBQyxRQUE2QjtRQUN2QyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRDs7T0FFRztJQUNILGtCQUFrQjtRQUNoQixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUM7SUFDOUIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsaUJBQWlCLENBQUMsVUFBVSxHQUFHLENBQUM7UUFDOUIsSUFBSTtZQUNGLE1BQU0sVUFBVSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7WUFDOUIsVUFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLEdBQUcsVUFBVSxDQUFDLENBQUM7WUFFdEQsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7WUFFbkQsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7Z0JBQ3hCLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtvQkFDNUIsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxDQUFDO29CQUN2RCxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO29CQUVwQyxJQUFJLEtBQUssQ0FBQyxLQUFLLEdBQUcsVUFBVSxFQUFFO3dCQUM1QixFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO3FCQUN6QjtpQkFDRjthQUNGO1NBQ0Y7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLHNEQUFzRDtZQUN0RCxPQUFPLENBQUMsSUFBSSxDQUFDLGdDQUFnQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ3ZEO0lBQ0gsQ0FBQztJQUVELGdDQUFnQztJQUVoQzs7T0FFRztJQUNLLHFCQUFxQixDQUFDLE9BQThCO1FBQzFELE1BQU0sRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFFbEQseUNBQXlDO1FBQ3pDLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMvQixxQ0FBcUM7WUFDckMsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQzFELE9BQU8sUUFBUSxDQUFDO2FBQ2pCO1lBQ0QsNkJBQTZCO1lBQzdCLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRTtnQkFDbkMsT0FBTyxRQUFRLENBQUM7YUFDakI7WUFDRCxvQ0FBb0M7WUFDcEMsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ2pFLE9BQU8sU0FBUyxDQUFDO2FBQ2xCO1NBQ0Y7UUFFRCxnREFBZ0Q7UUFDaEQsTUFBTSxVQUFVLEdBQUcsQ0FBQyxXQUFXLEVBQUUsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNoRSxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDakMsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUU7Z0JBQ3BFLE9BQU8sUUFBUSxDQUFDO2FBQ2pCO1lBQ0QsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO2dCQUNqQyxPQUFPLFFBQVEsQ0FBQzthQUNqQjtTQUNGO1FBRUQsNEJBQTRCO1FBQzVCLElBQUksT0FBTyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEtBQUssa0JBQVUsQ0FBQyxZQUFZLEVBQUU7WUFDNUQsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQ2xFLE9BQU8sUUFBUSxDQUFDO2FBQ2pCO1lBQ0QsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQ3RFLE9BQU8sUUFBUSxDQUFDO2FBQ2pCO1NBQ0Y7UUFFRCxJQUFJLE9BQU8sQ0FBQyxhQUFhLENBQUMsTUFBTSxLQUFLLGtCQUFVLENBQUMsTUFBTSxFQUFFO1lBQ3RELElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUN4RSxPQUFPLFFBQVEsQ0FBQzthQUNqQjtTQUNGO1FBRUQsZ0NBQWdDO1FBQ2hDLE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFRDs7T0FFRztJQUNLLG9CQUFvQixDQUFDLE9BQThCO1FBQ3pELE1BQU0sRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFFbEQsc0NBQXNDO1FBQ3RDLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMvQiwwQkFBMEI7WUFDMUIsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQzlELE9BQU8sUUFBUSxDQUFDO2FBQ2pCO1lBQ0QsMEJBQTBCO1lBQzFCLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRTtnQkFDOUIsT0FBTyxRQUFRLENBQUM7YUFDakI7WUFDRCwyQkFBMkI7WUFDM0IsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUU7Z0JBQ3JFLE9BQU8sU0FBUyxDQUFDO2FBQ2xCO1NBQ0Y7UUFFRCx5REFBeUQ7UUFDekQsTUFBTSxVQUFVLEdBQUcsQ0FBQyxXQUFXLEVBQUUsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVoRSw4QkFBOEI7UUFDOUIsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLEVBQUU7WUFDeEgsT0FBTyxRQUFRLENBQUM7U0FDakI7UUFFRCw4QkFBOEI7UUFDOUIsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUM1RyxPQUFPLFFBQVEsQ0FBQztTQUNqQjtRQUVELDRCQUE0QjtRQUM1QixJQUFJLE9BQU8sQ0FBQyxhQUFhLENBQUMsTUFBTSxLQUFLLGtCQUFVLENBQUMsWUFBWSxFQUFFO1lBQzVELElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFO2dCQUN0RSxPQUFPLFFBQVEsQ0FBQyxDQUFDLG1DQUFtQzthQUNyRDtZQUNELElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUNwRSxPQUFPLFNBQVMsQ0FBQyxDQUFDLGdDQUFnQzthQUNuRDtTQUNGO1FBRUQsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUVEOztPQUVHO0lBQ0ssNEJBQTRCLENBQUMsT0FBOEI7UUFDakUsK0NBQStDO1FBQy9DLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRDs7T0FFRztJQUNLLDBCQUEwQixDQUFDLE9BQThCLEVBQUUsU0FBaUI7UUFDbEYsTUFBTSxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxHQUFHLE9BQU8sQ0FBQztRQUVsRCxpQ0FBaUM7UUFDakMsTUFBTSxVQUFVLEdBQUcsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRTNDLGlCQUFpQjtRQUNqQixJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksVUFBVSxLQUFLLEdBQUcsRUFBRTtZQUN0RCxJQUFJLE9BQU8sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFFO2dCQUN2RixPQUFPLG9DQUFvQyxDQUFDO2FBQzdDO1lBQ0QsT0FBTyxPQUFPLENBQUM7U0FDaEI7UUFFRCxtQkFBbUI7UUFDbkIsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLFVBQVUsS0FBSyxLQUFLLEVBQUU7WUFDeEQsT0FBTyxPQUFPLENBQUM7U0FDaEI7UUFFRCxnQkFBZ0I7UUFDaEIsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLFVBQVUsS0FBSyxLQUFLLEVBQUU7WUFDckQsT0FBTyxpQkFBaUIsQ0FBQztTQUMxQjtRQUVELG1CQUFtQjtRQUNuQixJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksVUFBVSxLQUFLLEdBQUcsRUFBRTtZQUN0RCxPQUFPLFFBQVEsQ0FBQztTQUNqQjtRQUVELGtCQUFrQjtRQUNsQixJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ2hHLDJDQUEyQztZQUMzQyxNQUFNLFVBQVUsR0FBRyxDQUFDLFdBQVcsRUFBRSxHQUFHLGdCQUFnQixDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2hFLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxHQUFHLFNBQVMsR0FBRyxDQUFDLEVBQUU7Z0JBQ3hDLE9BQU8sUUFBUSxDQUFDLENBQUMsNENBQTRDO2FBQzlEO1lBQ0QsT0FBTyxTQUFTLENBQUM7U0FDbEI7UUFFRCw0QkFBNEI7UUFDNUIsSUFBSSxPQUFPLENBQUMsYUFBYSxDQUFDLE1BQU0sS0FBSyxrQkFBVSxDQUFDLFlBQVksRUFBRTtZQUM1RCxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDaEUsT0FBTyxRQUFRLENBQUM7YUFDakI7WUFDRCxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDcEUsT0FBTyxRQUFRLENBQUM7YUFDakI7WUFDRCxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtnQkFDdkUsT0FBTyxxQkFBcUIsQ0FBQzthQUM5QjtTQUNGO1FBRUQsSUFBSSxPQUFPLENBQUMsYUFBYSxDQUFDLE1BQU0sS0FBSyxrQkFBVSxDQUFDLE1BQU0sRUFBRTtZQUN0RCxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLEVBQUU7Z0JBQ3JDLE9BQU8sWUFBWSxDQUFDO2FBQ3JCO1lBQ0QsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUNqQyxPQUFPLFFBQVEsQ0FBQzthQUNqQjtTQUNGO1FBRUQsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUVEOztPQUVHO0lBQ0ssZUFBZSxDQUFDLE9BQThCO1FBQ3BELE1BQU0sRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFFbEQsa0RBQWtEO1FBQ2xELE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFaEUsdUNBQXVDO1FBQ3ZDLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUNsQyxpQkFBaUI7WUFDakIsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUU7Z0JBQ3RFLE9BQU8sUUFBUSxDQUFDO2FBQ2pCO1lBQ0QsaUJBQWlCO1lBQ2pCLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtnQkFDbEMsT0FBTyxRQUFRLENBQUM7YUFDakI7WUFDRCxrQkFBa0I7WUFDbEIsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLEVBQUU7Z0JBQzdFLE9BQU8sU0FBUyxDQUFDO2FBQ2xCO1lBQ0QsZ0JBQWdCO1lBQ2hCLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsRUFBRTtnQkFDbkMsT0FBTyxXQUFXLENBQUM7YUFDcEI7WUFDRCxpQkFBaUI7WUFDakIsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFFO2dCQUNuQyxPQUFPLFFBQVEsQ0FBQzthQUNqQjtZQUNELGtCQUFrQjtZQUNsQixJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLG9CQUFvQixDQUFDLEVBQUU7Z0JBQ3RGLE9BQU8sa0JBQWtCLENBQUM7YUFDM0I7U0FDRjtRQUVELDRCQUE0QjtRQUM1QixJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDbEMsT0FBTyxrQkFBa0IsQ0FBQztTQUMzQjtRQUVELDBCQUEwQjtRQUMxQixJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUM1RCxPQUFPLFNBQVMsQ0FBQyxDQUFDLG9DQUFvQztTQUN2RDtRQUVELElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDNUYsT0FBTyxTQUFTLENBQUMsQ0FBQyxzQkFBc0I7U0FDekM7UUFFRCxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUN0RSxPQUFPLFFBQVEsQ0FBQyxDQUFDLHdCQUF3QjtTQUMxQztRQUVELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFRDs7T0FFRztJQUNLLGdCQUFnQixDQUFDLE9BQThCO1FBQ3JELE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFFaEMsb0NBQW9DO1FBQ3BDLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUN0QyxPQUFPLFNBQVMsQ0FBQztTQUNsQjtRQUVELElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsRUFBRTtZQUN4QyxPQUFPLFNBQVMsQ0FBQztTQUNsQjtRQUVELElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ2hFLE9BQU8sU0FBUyxDQUFDO1NBQ2xCO1FBRUQsMkJBQTJCO1FBQzNCLElBQUksT0FBTyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEtBQUssa0JBQVUsQ0FBQyxZQUFZLEVBQUU7WUFDNUQsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFO2dCQUM1RixPQUFPLFNBQVMsQ0FBQyxDQUFDLCtCQUErQjthQUNsRDtTQUNGO1FBRUQsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUVEOztPQUVHO0lBQ0ssdUJBQXVCLENBQUMsT0FBOEIsRUFBRSxZQUFvQjtRQUNsRixNQUFNLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLEdBQUcsT0FBTyxDQUFDO1FBQ2xELE1BQU0sU0FBUyxHQUFHLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUU3QywyQkFBMkI7UUFDM0IsSUFBSSxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsS0FBSyxLQUFLLEVBQUU7WUFDbkQsT0FBTyxpQkFBaUIsQ0FBQztTQUMxQjtRQUVELElBQUksU0FBUyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxTQUFTLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFDbEcsT0FBTyxRQUFRLENBQUM7U0FDakI7UUFFRCxJQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksU0FBUyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxTQUFTLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQzdGLE9BQU8sUUFBUSxDQUFDO1NBQ2pCO1FBRUQsSUFBSSxTQUFTLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksU0FBUyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUNsRyxPQUFPLFNBQVMsQ0FBQztTQUNsQjtRQUVELElBQUksU0FBUyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxTQUFTLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQzVELE9BQU8sZUFBZSxDQUFDO1NBQ3hCO1FBRUQsK0JBQStCO1FBQy9CLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDaEUsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLEdBQUcsWUFBWSxLQUFLLENBQUMsRUFBRTtZQUM3QyxPQUFPLFFBQVEsQ0FBQztTQUNqQjtRQUNELElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxHQUFHLFlBQVksTUFBTSxDQUFDLEVBQUU7WUFDOUMsT0FBTyxRQUFRLENBQUM7U0FDakI7UUFFRCw0QkFBNEI7UUFDNUIsSUFBSSxPQUFPLENBQUMsYUFBYSxDQUFDLE1BQU0sS0FBSyxrQkFBVSxDQUFDLFlBQVksRUFBRTtZQUM1RCxJQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksU0FBUyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxTQUFTLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztnQkFDMUYsU0FBUyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUM1RCxPQUFPLFFBQVEsQ0FBQzthQUNqQjtZQUNELElBQUksU0FBUyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxTQUFTLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUM5RCxPQUFPLFFBQVEsQ0FBQzthQUNqQjtTQUNGO1FBRUQsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUVEOztPQUVHO0lBQ0ssaUJBQWlCLENBQUMsT0FBOEI7UUFDdEQsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLE9BQU8sQ0FBQztRQUVoQywrQkFBK0I7UUFDL0IsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDOUQsT0FBTyxRQUFRLENBQUM7U0FDakI7UUFFRCxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDOUIsT0FBTyxRQUFRLENBQUM7U0FDakI7UUFFRCxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUNyRSxPQUFPLFNBQVMsQ0FBQztTQUNsQjtRQUVELElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMvQixPQUFPLFdBQVcsQ0FBQztTQUNwQjtRQUVELElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMvQixPQUFPLFFBQVEsQ0FBQztTQUNqQjtRQUVELElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNsQyxrQ0FBa0M7WUFDbEMsTUFBTSxnQkFBZ0IsR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQzFELElBQUksZ0JBQWdCLEVBQUU7Z0JBQ3BCLE9BQU8sZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDNUI7WUFDRCxPQUFPLFFBQVEsQ0FBQztTQUNqQjtRQUVELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFRCxvQ0FBb0M7SUFFcEM7O09BRUc7SUFDSyx3QkFBd0IsQ0FBQyxPQUE4QjtRQUM3RCxNQUFNLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLEdBQUcsT0FBTyxDQUFDO1FBQ2xELE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFOUUsT0FBTyxVQUFVLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztZQUM1QixVQUFVLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztZQUM1QixVQUFVLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQztZQUNoQyxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRDs7T0FFRztJQUNLLG9CQUFvQixDQUFDLE9BQThCO1FBQ3pELE1BQU0sRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFDbEQsTUFBTSxVQUFVLEdBQUcsQ0FBQyxXQUFXLEVBQUUsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUU5RSxPQUFPLFVBQVUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO1lBQzFCLFVBQVUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDO1lBQy9CLFVBQVUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO1lBQzVCLFVBQVUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO1lBQzVCLFVBQVUsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVEOztPQUVHO0lBQ0ssc0JBQXNCLENBQUMsT0FBOEI7UUFDM0QsTUFBTSxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxHQUFHLE9BQU8sQ0FBQztRQUNsRCxNQUFNLFVBQVUsR0FBRyxDQUFDLFdBQVcsRUFBRSxHQUFHLGdCQUFnQixDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRTlFLE9BQU8sVUFBVSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7WUFDN0IsVUFBVSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUM7WUFDL0IsVUFBVSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7WUFDOUIsT0FBTyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEtBQUssa0JBQVUsQ0FBQyxRQUFRO1lBQ3BELE9BQU8sQ0FBQyxhQUFhLENBQUMsTUFBTSxLQUFLLGtCQUFVLENBQUMsWUFBWSxDQUFDO0lBQ2xFLENBQUM7SUFFRDs7T0FFRztJQUNLLHFCQUFxQixDQUFDLE9BQThCO1FBQzFELE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFFaEMsT0FBTyxXQUFXLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQztZQUMvQixXQUFXLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQztZQUNoQyxXQUFXLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQztZQUNoQyxXQUFXLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDO1lBQ3hDLFdBQVcsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVEOztPQUVHO0lBQ0ssMEJBQTBCLENBQUMsT0FBOEI7UUFDL0QsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLE9BQU8sQ0FBQztRQUVoQyxPQUFPLFdBQVcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDO1lBQ3pCLFdBQVcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDO1lBQ3pCLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUVEOztPQUVHO0lBQ0ssMkJBQTJCLENBQUMsT0FBOEI7UUFDaEUsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLE9BQU8sQ0FBQztRQUVoQyxPQUFPLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1lBQzFCLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUVEOztPQUVHO0lBQ0ssdUJBQXVCLENBQUMsT0FBOEI7UUFDNUQsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLE9BQU8sQ0FBQztRQUVoQyxPQUFPLFdBQVcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDO1lBQ3pCLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMvRixDQUFDO0lBRUQscUNBQXFDO0lBRXJDOztPQUVHO0lBQ0gsS0FBSyxDQUFDLHlCQUF5QixDQUM3QixXQUE0QixFQUM1QixPQUE4QjtRQUU5QixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsb0JBQW9CLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3pFLENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUssQ0FBQyxtQkFBbUIsQ0FDdkIsYUFBdUIsRUFDdkIsWUFBWSxHQUFHLEtBQUs7UUFFcEIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLHVCQUF1QixDQUFDLGFBQWEsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUNuRixDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsc0JBQXNCLENBQzFCLGFBQWtDLEVBQ2xDLFdBQWdDO1FBRWhDLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQywwQkFBMEIsQ0FBQyxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDckYsQ0FBQztJQUVEOztPQUVHO0lBQ0gsa0JBQWtCO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUM5QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxzQkFBc0IsQ0FBQyxVQUEyQztRQUNoRSxJQUFJLFVBQVUsQ0FBQyxrQkFBa0IsS0FBSyxTQUFTLEVBQUU7WUFDL0MsSUFBSSxDQUFDLGVBQWUsR0FBRyxVQUFVLENBQUMsa0JBQWtCLENBQUM7WUFDckQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxzQkFBc0IsQ0FBQztnQkFDMUMsa0JBQWtCLEVBQUUsVUFBVSxDQUFDLGtCQUFrQjthQUNsRCxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7Q0FDRjtBQWxvQ0QsNENBa29DQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvR3JlZ0Nhc3Ryby9EZXNrdG9wL1doYXRUb0VhdE5leHQvYmFja3Vwcy9jb25zZXJ2YXRpdmUtd2F2ZS0yMDI1LTA4LTExVDA1LTIxLTMzLTQxMFovc3JjL3NlcnZpY2VzL2NhbXBhaWduL3VuaW50ZW50aW9uYWwtYW55LWVsaW1pbmF0aW9uL1NhZmVUeXBlUmVwbGFjZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTYWZlIFR5cGUgUmVwbGFjZXJcbiAqIFBlcmZvcm1zIHNhZmUgcmVwbGFjZW1lbnRzIG9mIHVuaW50ZW50aW9uYWwgYGFueWAgdHlwZXMgd2l0aCBtb3JlIHNwZWNpZmljIHR5cGVzXG4gKlxuICogQ29yZSBGZWF0dXJlczpcbiAqIC0gQXRvbWljIHJlcGxhY2VtZW50IG9wZXJhdGlvbnMgd2l0aCBhdXRvbWF0aWMgcm9sbGJhY2tcbiAqIC0gVHlwZVNjcmlwdCBjb21waWxhdGlvbiB2YWxpZGF0aW9uIGFmdGVyIGVhY2ggcmVwbGFjZW1lbnRcbiAqIC0gQ29tcHJlaGVuc2l2ZSBiYWNrdXAgc3lzdGVtIGZvciBhbGwgbW9kaWZpZWQgZmlsZXNcbiAqIC0gU2FmZXR5IHNjb3Jpbmcgc3lzdGVtIGZvciByZXBsYWNlbWVudCBjb25maWRlbmNlXG4gKi9cblxuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcblxuaW1wb3J0IHsgQnVpbGRWYWxpZGF0aW9uUmVzdWx0IH0gZnJvbSAnQC91dGlscy9CdWlsZFZhbGlkYXRvcic7XG5pbXBvcnQgeyBTYWZldHlWYWxpZGF0b3IgfSBmcm9tICcuL1NhZmV0eVZhbGlkYXRvcic7XG5pbXBvcnQge1xuICAgIENsYXNzaWZpY2F0aW9uQ29udGV4dCxcbiAgICBDb2RlRG9tYWluLFxuICAgIFJlcGxhY2VtZW50UmVzdWx0LFxuICAgIFJlcGxhY2VtZW50U3RyYXRlZ3ksXG4gICAgU2FmZXR5UHJvdG9jb2xFcnJvcixcbiAgICBUeXBlUmVwbGFjZW1lbnRcbn0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBjbGFzcyBTYWZlVHlwZVJlcGxhY2VyIHtcbiAgcHJpdmF0ZSBzdHJhdGVnaWVzOiBSZXBsYWNlbWVudFN0cmF0ZWd5W107XG4gIHByaXZhdGUgYmFja3VwRGlyZWN0b3J5OiBzdHJpbmc7XG4gIHByaXZhdGUgc2FmZXR5VGhyZXNob2xkOiBudW1iZXI7XG4gIHByaXZhdGUgdmFsaWRhdGlvblRpbWVvdXQ6IG51bWJlcjtcbiAgcHJpdmF0ZSBtYXhSZXRyaWVzOiBudW1iZXI7XG4gIHByaXZhdGUgc2FmZXR5VmFsaWRhdG9yOiBTYWZldHlWYWxpZGF0b3I7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgYmFja3VwRGlyZWN0b3J5ID0gJy4vLmFueS1lbGltaW5hdGlvbi1iYWNrdXBzJyxcbiAgICBzYWZldHlUaHJlc2hvbGQgPSAwLjcsXG4gICAgdmFsaWRhdGlvblRpbWVvdXQgPSAzMDAwMCxcbiAgICBtYXhSZXRyaWVzID0gM1xuICApIHtcbiAgICB0aGlzLmJhY2t1cERpcmVjdG9yeSA9IGJhY2t1cERpcmVjdG9yeTtcbiAgICB0aGlzLnNhZmV0eVRocmVzaG9sZCA9IHNhZmV0eVRocmVzaG9sZDtcbiAgICB0aGlzLnZhbGlkYXRpb25UaW1lb3V0ID0gdmFsaWRhdGlvblRpbWVvdXQ7XG4gICAgdGhpcy5tYXhSZXRyaWVzID0gbWF4UmV0cmllcztcbiAgICB0aGlzLnN0cmF0ZWdpZXMgPSB0aGlzLmluaXRpYWxpemVTdHJhdGVnaWVzKCk7XG4gICAgdGhpcy5zYWZldHlWYWxpZGF0b3IgPSBuZXcgU2FmZXR5VmFsaWRhdG9yKHZhbGlkYXRpb25UaW1lb3V0LCB7XG4gICAgICBtaW5pbXVtU2FmZXR5U2NvcmU6IHNhZmV0eVRocmVzaG9sZFxuICAgIH0pO1xuICAgIHRoaXMuZW5zdXJlQmFja3VwRGlyZWN0b3J5KCk7XG4gIH1cblxuICAvKipcbiAgICogQXBwbHkgYSBzaW5nbGUgdHlwZSByZXBsYWNlbWVudCB3aXRoIGNvbXByZWhlbnNpdmUgc2FmZXR5IHZhbGlkYXRpb25cbiAgICogSW1wbGVtZW50cyBhdG9taWMgb3BlcmF0aW9ucyB3aXRoIGF1dG9tYXRpYyByb2xsYmFjayBvbiBhbnkgZmFpbHVyZVxuICAgKi9cbiAgYXN5bmMgYXBwbHlSZXBsYWNlbWVudChyZXBsYWNlbWVudDogVHlwZVJlcGxhY2VtZW50LCBjb250ZXh0PzogQ2xhc3NpZmljYXRpb25Db250ZXh0KTogUHJvbWlzZTxSZXBsYWNlbWVudFJlc3VsdD4ge1xuICAgIC8vIEVuaGFuY2VkIHByZS12YWxpZGF0aW9uIHVzaW5nIFNhZmV0eVZhbGlkYXRvclxuICAgIGxldCBzYWZldHlWYWxpZGF0aW9uOiBTYWZldHlWYWxpZGF0aW9uUmVzdWx0O1xuXG4gICAgaWYgKGNvbnRleHQpIHtcbiAgICAgIHNhZmV0eVZhbGlkYXRpb24gPSB0aGlzLnNhZmV0eVZhbGlkYXRvci5jYWxjdWxhdGVTYWZldHlTY29yZShyZXBsYWNlbWVudCwgY29udGV4dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEZhbGxiYWNrIHRvIGJhc2ljIHNhZmV0eSBzY29yZSBjYWxjdWxhdGlvblxuICAgICAgY29uc3QgYmFzaWNTYWZldHlTY29yZSA9IHRoaXMuY2FsY3VsYXRlU2FmZXR5U2NvcmUocmVwbGFjZW1lbnQpO1xuICAgICAgc2FmZXR5VmFsaWRhdGlvbiA9IHtcbiAgICAgICAgaXNWYWxpZDogYmFzaWNTYWZldHlTY29yZSA+PSB0aGlzLnNhZmV0eVRocmVzaG9sZCxcbiAgICAgICAgc2FmZXR5U2NvcmU6IGJhc2ljU2FmZXR5U2NvcmUsXG4gICAgICAgIHZhbGlkYXRpb25FcnJvcnM6IGJhc2ljU2FmZXR5U2NvcmUgPCB0aGlzLnNhZmV0eVRocmVzaG9sZFxuICAgICAgICAgID8gW2BTYWZldHkgc2NvcmUgJHtiYXNpY1NhZmV0eVNjb3JlfSBiZWxvdyB0aHJlc2hvbGQgJHt0aGlzLnNhZmV0eVRocmVzaG9sZH1gXVxuICAgICAgICAgIDogW10sXG4gICAgICAgIHdhcm5pbmdzOiBbXSxcbiAgICAgICAgcmVjb21tZW5kYXRpb25zOiBbXVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoIXNhZmV0eVZhbGlkYXRpb24uaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGFwcGxpZWRSZXBsYWNlbWVudHM6IFtdLFxuICAgICAgICBmYWlsZWRSZXBsYWNlbWVudHM6IFtyZXBsYWNlbWVudF0sXG4gICAgICAgIGNvbXBpbGF0aW9uRXJyb3JzOiBzYWZldHlWYWxpZGF0aW9uLnZhbGlkYXRpb25FcnJvcnMsXG4gICAgICAgIHJvbGxiYWNrUGVyZm9ybWVkOiBmYWxzZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdCBiYWNrdXBQYXRoID0gYXdhaXQgdGhpcy5jcmVhdGVCYWNrdXAocmVwbGFjZW1lbnQuZmlsZVBhdGgpO1xuICAgIGxldCByZXRyeUNvdW50ID0gMDtcblxuICAgIHdoaWxlIChyZXRyeUNvdW50IDwgdGhpcy5tYXhSZXRyaWVzKSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBBdG9taWMgcmVwbGFjZW1lbnQgb3BlcmF0aW9uXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMucGVyZm9ybUF0b21pY1JlcGxhY2VtZW50KHJlcGxhY2VtZW50LCBiYWNrdXBQYXRoKTtcblxuICAgICAgICBpZiAocmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICAgICAgICAvLyBWZXJpZnkgcm9sbGJhY2sgY2FwYWJpbGl0eSBiZWZvcmUgZGVjbGFyaW5nIHN1Y2Nlc3NcbiAgICAgICAgICBjb25zdCByb2xsYmFja1ZlcmlmaWNhdGlvbiA9IGF3YWl0IHRoaXMudmVyaWZ5Um9sbGJhY2tDYXBhYmlsaXR5KHJlcGxhY2VtZW50LmZpbGVQYXRoLCBiYWNrdXBQYXRoKTtcbiAgICAgICAgICBpZiAoIXJvbGxiYWNrVmVyaWZpY2F0aW9uLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucm9sbGJhY2tGcm9tQmFja3VwKHJlcGxhY2VtZW50LmZpbGVQYXRoLCBiYWNrdXBQYXRoKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICBhcHBsaWVkUmVwbGFjZW1lbnRzOiBbXSxcbiAgICAgICAgICAgICAgZmFpbGVkUmVwbGFjZW1lbnRzOiBbcmVwbGFjZW1lbnRdLFxuICAgICAgICAgICAgICBjb21waWxhdGlvbkVycm9yczogW2BSb2xsYmFjayB2ZXJpZmljYXRpb24gZmFpbGVkOiAke3JvbGxiYWNrVmVyaWZpY2F0aW9uLmVycm9yfWBdLFxuICAgICAgICAgICAgICByb2xsYmFja1BlcmZvcm1lZDogdHJ1ZSxcbiAgICAgICAgICAgICAgYmFja3VwUGF0aFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIElmIHJlcGxhY2VtZW50IGZhaWxlZCB3aXRoIHNwZWNpZmljIGVycm9ycywgcmV0dXJuIGltbWVkaWF0ZWx5IChkb24ndCByZXRyeSlcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHJ5Q291bnQrKztcbiAgICAgICAgaWYgKHJldHJ5Q291bnQgPj0gdGhpcy5tYXhSZXRyaWVzKSB7XG4gICAgICAgICAgLy8gRmluYWwgcm9sbGJhY2sgb24gZXhoYXVzdGVkIHJldHJpZXNcbiAgICAgICAgICBhd2FpdCB0aGlzLnJvbGxiYWNrRnJvbUJhY2t1cChyZXBsYWNlbWVudC5maWxlUGF0aCwgYmFja3VwUGF0aCk7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgYXBwbGllZFJlcGxhY2VtZW50czogW10sXG4gICAgICAgICAgICBmYWlsZWRSZXBsYWNlbWVudHM6IFtyZXBsYWNlbWVudF0sXG4gICAgICAgICAgICBjb21waWxhdGlvbkVycm9yczogW2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKV0sXG4gICAgICAgICAgICByb2xsYmFja1BlcmZvcm1lZDogdHJ1ZSxcbiAgICAgICAgICAgIGJhY2t1cFBhdGhcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gV2FpdCBicmllZmx5IGJlZm9yZSByZXRyeVxuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTAwICogcmV0cnlDb3VudCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNob3VsZCBub3QgcmVhY2ggaGVyZSwgYnV0IGhhbmRsZSBlZGdlIGNhc2VcbiAgICBhd2FpdCB0aGlzLnJvbGxiYWNrRnJvbUJhY2t1cChyZXBsYWNlbWVudC5maWxlUGF0aCwgYmFja3VwUGF0aCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgYXBwbGllZFJlcGxhY2VtZW50czogW10sXG4gICAgICBmYWlsZWRSZXBsYWNlbWVudHM6IFtyZXBsYWNlbWVudF0sXG4gICAgICBjb21waWxhdGlvbkVycm9yczogWydNYXhpbXVtIHJldHJpZXMgZXhjZWVkZWQnXSxcbiAgICAgIHJvbGxiYWNrUGVyZm9ybWVkOiB0cnVlLFxuICAgICAgYmFja3VwUGF0aFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogUHJvY2VzcyBtdWx0aXBsZSByZXBsYWNlbWVudHMgaW4gYmF0Y2ggd2l0aCBhdG9taWMgb3BlcmF0aW9uc1xuICAgKi9cbiAgYXN5bmMgcHJvY2Vzc0JhdGNoKHJlcGxhY2VtZW50czogVHlwZVJlcGxhY2VtZW50W10pOiBQcm9taXNlPFJlcGxhY2VtZW50UmVzdWx0PiB7XG4gICAgY29uc3QgYmFja3VwUGF0aHM6IE1hcDxzdHJpbmcsIHN0cmluZz4gPSBuZXcgTWFwKCk7XG4gICAgY29uc3QgYXBwbGllZFJlcGxhY2VtZW50czogVHlwZVJlcGxhY2VtZW50W10gPSBbXTtcbiAgICBjb25zdCBmYWlsZWRSZXBsYWNlbWVudHM6IFR5cGVSZXBsYWNlbWVudFtdID0gW107XG4gICAgY29uc3QgY29tcGlsYXRpb25FcnJvcnM6IHN0cmluZ1tdID0gW107XG5cbiAgICB0cnkge1xuICAgICAgLy8gQ3JlYXRlIGJhY2t1cHMgZm9yIGFsbCBmaWxlc1xuICAgICAgZm9yIChjb25zdCByZXBsYWNlbWVudCBvZiByZXBsYWNlbWVudHMpIHtcbiAgICAgICAgaWYgKCFiYWNrdXBQYXRocy5oYXMocmVwbGFjZW1lbnQuZmlsZVBhdGgpKSB7XG4gICAgICAgICAgY29uc3QgYmFja3VwUGF0aCA9IGF3YWl0IHRoaXMuY3JlYXRlQmFja3VwKHJlcGxhY2VtZW50LmZpbGVQYXRoKTtcbiAgICAgICAgICBiYWNrdXBQYXRocy5zZXQocmVwbGFjZW1lbnQuZmlsZVBhdGgsIGJhY2t1cFBhdGgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEdyb3VwIHJlcGxhY2VtZW50cyBieSBmaWxlIGZvciBlZmZpY2llbnQgcHJvY2Vzc2luZ1xuICAgICAgY29uc3QgcmVwbGFjZW1lbnRzQnlGaWxlID0gdGhpcy5ncm91cFJlcGxhY2VtZW50c0J5RmlsZShyZXBsYWNlbWVudHMpO1xuXG4gICAgICAvLyBBcHBseSByZXBsYWNlbWVudHMgZmlsZSBieSBmaWxlXG4gICAgICBmb3IgKGNvbnN0IFtmaWxlUGF0aCwgZmlsZVJlcGxhY2VtZW50c10gb2YgQXJyYXkuZnJvbShyZXBsYWNlbWVudHNCeUZpbGUuZW50cmllcygpKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuYXBwbHlSZXBsYWNlbWVudHNUb0ZpbGUoZmlsZVBhdGgsIGZpbGVSZXBsYWNlbWVudHMpO1xuICAgICAgICAgIGFwcGxpZWRSZXBsYWNlbWVudHMucHVzaCguLi5yZXN1bHQuYXBwbGllZCk7XG4gICAgICAgICAgZmFpbGVkUmVwbGFjZW1lbnRzLnB1c2goLi4ucmVzdWx0LmZhaWxlZCk7XG5cbiAgICAgICAgICBpZiAocmVzdWx0LmZhaWxlZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb21waWxhdGlvbkVycm9ycy5wdXNoKC4uLnJlc3VsdC5lcnJvcnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBmYWlsZWRSZXBsYWNlbWVudHMucHVzaCguLi5maWxlUmVwbGFjZW1lbnRzKTtcbiAgICAgICAgICBjb21waWxhdGlvbkVycm9ycy5wdXNoKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gRW5oYW5jZWQgYnVpbGQgdmFsaWRhdGlvbiBhZnRlciBiYXRjaCBvcGVyYXRpb25zXG4gICAgICBjb25zdCBtb2RpZmllZEZpbGVzID0gQXJyYXkuZnJvbShiYWNrdXBQYXRocy5rZXlzKCkpO1xuICAgICAgY29uc3QgYnVpbGRWYWxpZGF0aW9uID0gYXdhaXQgdGhpcy5zYWZldHlWYWxpZGF0b3IudmFsaWRhdGVCdWlsZEFmdGVyQmF0Y2gobW9kaWZpZWRGaWxlcywgZmFsc2UpO1xuXG4gICAgICBpZiAoIWJ1aWxkVmFsaWRhdGlvbi5idWlsZFN1Y2Nlc3NmdWwpIHtcbiAgICAgICAgLy8gUm9sbGJhY2sgYWxsIGNoYW5nZXNcbiAgICAgICAgYXdhaXQgdGhpcy5yb2xsYmFja0FsbEZpbGVzKGJhY2t1cFBhdGhzKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgIGFwcGxpZWRSZXBsYWNlbWVudHM6IFtdLFxuICAgICAgICAgIGZhaWxlZFJlcGxhY2VtZW50czogcmVwbGFjZW1lbnRzLFxuICAgICAgICAgIGNvbXBpbGF0aW9uRXJyb3JzOiBidWlsZFZhbGlkYXRpb24uY29tcGlsYXRpb25FcnJvcnMsXG4gICAgICAgICAgcm9sbGJhY2tQZXJmb3JtZWQ6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgLy8gVmFsaWRhdGUgcm9sbGJhY2sgY2FwYWJpbGl0eVxuICAgICAgY29uc3Qgcm9sbGJhY2tWYWxpZGF0aW9uID0gYXdhaXQgdGhpcy5zYWZldHlWYWxpZGF0b3IudmFsaWRhdGVSb2xsYmFja0NhcGFiaWxpdHkoXG4gICAgICAgIG5ldyBNYXAobW9kaWZpZWRGaWxlcy5tYXAoZmlsZSA9PiBbZmlsZSwgZmlsZV0pKSxcbiAgICAgICAgYmFja3VwUGF0aHNcbiAgICAgICk7XG5cbiAgICAgIGlmICghcm9sbGJhY2tWYWxpZGF0aW9uLmNhblJvbGxiYWNrKSB7XG4gICAgICAgIGNvbXBpbGF0aW9uRXJyb3JzLnB1c2goLi4ucm9sbGJhY2tWYWxpZGF0aW9uLnJvbGxiYWNrRXJyb3JzKTtcbiAgICAgICAgY29tcGlsYXRpb25FcnJvcnMucHVzaCgnV2FybmluZzogUm9sbGJhY2sgY2FwYWJpbGl0eSBjb21wcm9taXNlZCcpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBzdWNjZXNzID0gZmFpbGVkUmVwbGFjZW1lbnRzLmxlbmd0aCA9PT0gMDtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3MsXG4gICAgICAgIGFwcGxpZWRSZXBsYWNlbWVudHMsXG4gICAgICAgIGZhaWxlZFJlcGxhY2VtZW50cyxcbiAgICAgICAgY29tcGlsYXRpb25FcnJvcnMsXG4gICAgICAgIHJvbGxiYWNrUGVyZm9ybWVkOiBmYWxzZVxuICAgICAgfTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBFbWVyZ2VuY3kgcm9sbGJhY2tcbiAgICAgIGF3YWl0IHRoaXMucm9sbGJhY2tBbGxGaWxlcyhiYWNrdXBQYXRocyk7XG5cbiAgICAgIHRocm93IG5ldyBTYWZldHlQcm90b2NvbEVycm9yKFxuICAgICAgICAnQmF0Y2ggcmVwbGFjZW1lbnQgZmFpbGVkIHdpdGggZW1lcmdlbmN5IHJvbGxiYWNrJyxcbiAgICAgICAgQXJyYXkuZnJvbShiYWNrdXBQYXRocy52YWx1ZXMoKSlbMF0gfHwgJycsXG4gICAgICAgIEFycmF5LmZyb20oYmFja3VwUGF0aHMua2V5cygpKVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGluaXRpYWxpemVTdHJhdGVnaWVzKCk6IFJlcGxhY2VtZW50U3RyYXRlZ3lbXSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIC8vIEFycmF5IHR5cGUgcmVwbGFjZW1lbnQgc3RyYXRlZ3kgKGFueVtdIOKGkiB1bmtub3duW10pXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC86XFxzKmFueVxcW1xcXS9nLFxuICAgICAgICByZXBsYWNlbWVudDogKG1hdGNoOiBzdHJpbmcsIGNvbnRleHQ6IENsYXNzaWZpY2F0aW9uQ29udGV4dCkgPT4ge1xuICAgICAgICAgIC8vIENoZWNrIGlmIHdlIGNhbiBpbmZlciBhIG1vcmUgc3BlY2lmaWMgYXJyYXkgdHlwZVxuICAgICAgICAgIGNvbnN0IGluZmVycmVkVHlwZSA9IHRoaXMuaW5mZXJBcnJheUVsZW1lbnRUeXBlKGNvbnRleHQpO1xuICAgICAgICAgIHJldHVybiBtYXRjaC5yZXBsYWNlKCdhbnlbXScsIGAke2luZmVycmVkVHlwZX1bXWApO1xuICAgICAgICB9LFxuICAgICAgICB2YWxpZGF0b3I6IChjb250ZXh0OiBDbGFzc2lmaWNhdGlvbkNvbnRleHQpID0+XG4gICAgICAgICAgY29udGV4dC5jb2RlU25pcHBldC5pbmNsdWRlcygnYW55W10nKSAmJlxuICAgICAgICAgICF0aGlzLmlzSW5FcnJvckhhbmRsaW5nQ29udGV4dChjb250ZXh0KSxcbiAgICAgICAgcHJpb3JpdHk6IDFcbiAgICAgIH0sXG5cbiAgICAgIC8vIFJlY29yZCB0eXBlIHJlcGxhY2VtZW50IHdpdGggdmFsaWRhdGlvbiAoUmVjb3JkPHN0cmluZywgYW55PiDihpIgUmVjb3JkPHN0cmluZywgdW5rbm93bj4pXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC86XFxzKlJlY29yZDxcXHMqc3RyaW5nXFxzKixcXHMqYW55XFxzKj4vZyxcbiAgICAgICAgcmVwbGFjZW1lbnQ6IChtYXRjaDogc3RyaW5nLCBjb250ZXh0OiBDbGFzc2lmaWNhdGlvbkNvbnRleHQpID0+IHtcbiAgICAgICAgICAvLyBDaGVjayBpZiB3ZSBjYW4gaW5mZXIgYSBtb3JlIHNwZWNpZmljIHZhbHVlIHR5cGVcbiAgICAgICAgICBjb25zdCBpbmZlcnJlZFZhbHVlVHlwZSA9IHRoaXMuaW5mZXJSZWNvcmRWYWx1ZVR5cGUoY29udGV4dCk7XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLnJlcGxhY2UoL1JlY29yZDxcXHMqc3RyaW5nXFxzKixcXHMqYW55XFxzKj4vLCBgUmVjb3JkPHN0cmluZywgJHtpbmZlcnJlZFZhbHVlVHlwZX0+YCk7XG4gICAgICAgIH0sXG4gICAgICAgIHZhbGlkYXRvcjogKGNvbnRleHQ6IENsYXNzaWZpY2F0aW9uQ29udGV4dCkgPT5cbiAgICAgICAgICBjb250ZXh0LmNvZGVTbmlwcGV0LmluY2x1ZGVzKCdSZWNvcmQ8c3RyaW5nLCBhbnk+JykgJiZcbiAgICAgICAgICAhdGhpcy5pc0luRXJyb3JIYW5kbGluZ0NvbnRleHQoY29udGV4dCkgJiZcbiAgICAgICAgICAhdGhpcy5pc0R5bmFtaWNDb25maWdDb250ZXh0KGNvbnRleHQpLFxuICAgICAgICBwcmlvcml0eTogMlxuICAgICAgfSxcblxuICAgICAgLy8gR2VuZXJpYyBSZWNvcmQgcmVwbGFjZW1lbnQgKFJlY29yZDxudW1iZXIsIGFueT4g4oaSIFJlY29yZDxudW1iZXIsIHVua25vd24+KVxuICAgICAge1xuICAgICAgICBwYXR0ZXJuOiAvOlxccypSZWNvcmQ8XFxzKm51bWJlclxccyosXFxzKmFueVxccyo+L2csXG4gICAgICAgIHJlcGxhY2VtZW50OiAobWF0Y2g6IHN0cmluZywgY29udGV4dDogQ2xhc3NpZmljYXRpb25Db250ZXh0KSA9PiB7XG4gICAgICAgICAgY29uc3QgaW5mZXJyZWRWYWx1ZVR5cGUgPSB0aGlzLmluZmVyUmVjb3JkVmFsdWVUeXBlKGNvbnRleHQpO1xuICAgICAgICAgIHJldHVybiBtYXRjaC5yZXBsYWNlKC9SZWNvcmQ8XFxzKm51bWJlclxccyosXFxzKmFueVxccyo+LywgYFJlY29yZDxudW1iZXIsICR7aW5mZXJyZWRWYWx1ZVR5cGV9PmApO1xuICAgICAgICB9LFxuICAgICAgICB2YWxpZGF0b3I6IChjb250ZXh0OiBDbGFzc2lmaWNhdGlvbkNvbnRleHQpID0+XG4gICAgICAgICAgY29udGV4dC5jb2RlU25pcHBldC5pbmNsdWRlcygnUmVjb3JkPG51bWJlciwgYW55PicpICYmXG4gICAgICAgICAgIXRoaXMuaXNJbkVycm9ySGFuZGxpbmdDb250ZXh0KGNvbnRleHQpLFxuICAgICAgICBwcmlvcml0eTogMlxuICAgICAgfSxcblxuICAgICAgLy8gSW5kZXggc2lnbmF0dXJlIHJlcGxhY2VtZW50IChba2V5OiBzdHJpbmddOiBhbnkg4oaSIFtrZXk6IHN0cmluZ106IHVua25vd24pXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC9cXFtrZXk6XFxzKnN0cmluZ1xcXVxccyo6XFxzKmFueS9nLFxuICAgICAgICByZXBsYWNlbWVudDogKG1hdGNoOiBzdHJpbmcsIGNvbnRleHQ6IENsYXNzaWZpY2F0aW9uQ29udGV4dCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGluZmVycmVkVmFsdWVUeXBlID0gdGhpcy5pbmZlckluZGV4U2lnbmF0dXJlVmFsdWVUeXBlKGNvbnRleHQpO1xuICAgICAgICAgIHJldHVybiBtYXRjaC5yZXBsYWNlKCdhbnknLCBpbmZlcnJlZFZhbHVlVHlwZSk7XG4gICAgICAgIH0sXG4gICAgICAgIHZhbGlkYXRvcjogKGNvbnRleHQ6IENsYXNzaWZpY2F0aW9uQ29udGV4dCkgPT5cbiAgICAgICAgICBjb250ZXh0LmNvZGVTbmlwcGV0LmluY2x1ZGVzKCdba2V5OiBzdHJpbmddOiBhbnknKSAmJlxuICAgICAgICAgICF0aGlzLmlzSW5FcnJvckhhbmRsaW5nQ29udGV4dChjb250ZXh0KSxcbiAgICAgICAgcHJpb3JpdHk6IDNcbiAgICAgIH0sXG5cbiAgICAgIC8vIEZ1bmN0aW9uIHBhcmFtZXRlciBhbmFseXNpcyBhbmQgcmVwbGFjZW1lbnRcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjogL1xcKFxccyooW146KV0rKTpcXHMqYW55XFxzKlxcKS9nLFxuICAgICAgICByZXBsYWNlbWVudDogKG1hdGNoOiBzdHJpbmcsIGNvbnRleHQ6IENsYXNzaWZpY2F0aW9uQ29udGV4dCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHBhcmFtTmFtZSA9IG1hdGNoLm1hdGNoKC9cXChcXHMqKFteOildKyk6Lyk/LlsxXT8udHJpbSgpO1xuICAgICAgICAgIGlmIChwYXJhbU5hbWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGluZmVycmVkVHlwZSA9IHRoaXMuaW5mZXJGdW5jdGlvblBhcmFtZXRlclR5cGUoY29udGV4dCwgcGFyYW1OYW1lKTtcbiAgICAgICAgICAgIHJldHVybiBtYXRjaC5yZXBsYWNlKCdhbnknLCBpbmZlcnJlZFR5cGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbWF0Y2gucmVwbGFjZSgnYW55JywgJ3Vua25vd24nKTtcbiAgICAgICAgfSxcbiAgICAgICAgdmFsaWRhdG9yOiAoY29udGV4dDogQ2xhc3NpZmljYXRpb25Db250ZXh0KSA9PlxuICAgICAgICAgIHRoaXMuaXNGdW5jdGlvblBhcmFtZXRlckNvbnRleHQoY29udGV4dCkgJiZcbiAgICAgICAgICAhdGhpcy5pc0luRXJyb3JIYW5kbGluZ0NvbnRleHQoY29udGV4dCkgJiZcbiAgICAgICAgICAhdGhpcy5pc0V2ZW50SGFuZGxlckNvbnRleHQoY29udGV4dCksXG4gICAgICAgIHByaW9yaXR5OiA0XG4gICAgICB9LFxuXG4gICAgICAvLyBGdW5jdGlvbiBwYXJhbWV0ZXIgaW4gYXJyb3cgZnVuY3Rpb25zXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC9cXChcXHMqKFteOildKyk6XFxzKmFueVxccypcXClcXHMqPT4vZyxcbiAgICAgICAgcmVwbGFjZW1lbnQ6IChtYXRjaDogc3RyaW5nLCBjb250ZXh0OiBDbGFzc2lmaWNhdGlvbkNvbnRleHQpID0+IHtcbiAgICAgICAgICBjb25zdCBwYXJhbU5hbWUgPSBtYXRjaC5tYXRjaCgvXFwoXFxzKihbXjopXSspOi8pPy5bMV0/LnRyaW0oKTtcbiAgICAgICAgICBpZiAocGFyYW1OYW1lKSB7XG4gICAgICAgICAgICBjb25zdCBpbmZlcnJlZFR5cGUgPSB0aGlzLmluZmVyRnVuY3Rpb25QYXJhbWV0ZXJUeXBlKGNvbnRleHQsIHBhcmFtTmFtZSk7XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2gucmVwbGFjZSgnYW55JywgaW5mZXJyZWRUeXBlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLnJlcGxhY2UoJ2FueScsICd1bmtub3duJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHZhbGlkYXRvcjogKGNvbnRleHQ6IENsYXNzaWZpY2F0aW9uQ29udGV4dCkgPT5cbiAgICAgICAgICBjb250ZXh0LmNvZGVTbmlwcGV0LmluY2x1ZGVzKCc9PicpICYmXG4gICAgICAgICAgIXRoaXMuaXNJbkVycm9ySGFuZGxpbmdDb250ZXh0KGNvbnRleHQpLFxuICAgICAgICBwcmlvcml0eTogNFxuICAgICAgfSxcblxuICAgICAgLy8gUmV0dXJuIHR5cGUgaW5mZXJlbmNlIGFuZCByZXBsYWNlbWVudFxuICAgICAge1xuICAgICAgICBwYXR0ZXJuOiAvXFwpOlxccyphbnkoPz1cXHMqW3s7XSkvZyxcbiAgICAgICAgcmVwbGFjZW1lbnQ6IChtYXRjaDogc3RyaW5nLCBjb250ZXh0OiBDbGFzc2lmaWNhdGlvbkNvbnRleHQpID0+IHtcbiAgICAgICAgICBjb25zdCBpbmZlcnJlZFJldHVyblR5cGUgPSB0aGlzLmluZmVyUmV0dXJuVHlwZShjb250ZXh0KTtcbiAgICAgICAgICByZXR1cm4gbWF0Y2gucmVwbGFjZSgnYW55JywgaW5mZXJyZWRSZXR1cm5UeXBlKTtcbiAgICAgICAgfSxcbiAgICAgICAgdmFsaWRhdG9yOiAoY29udGV4dDogQ2xhc3NpZmljYXRpb25Db250ZXh0KSA9PlxuICAgICAgICAgIHRoaXMuaXNGdW5jdGlvblJldHVyblR5cGVDb250ZXh0KGNvbnRleHQpICYmXG4gICAgICAgICAgIXRoaXMuaXNJbkVycm9ySGFuZGxpbmdDb250ZXh0KGNvbnRleHQpICYmXG4gICAgICAgICAgIXRoaXMuaXNFeHRlcm5hbEFwaUNvbnRleHQoY29udGV4dCksXG4gICAgICAgIHByaW9yaXR5OiA1XG4gICAgICB9LFxuXG4gICAgICAvLyBHZW5lcmljIHR5cGUgcGFyYW1ldGVyIHJlcGxhY2VtZW50XG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC88XFxzKmFueVxccyo+L2csXG4gICAgICAgIHJlcGxhY2VtZW50OiAobWF0Y2g6IHN0cmluZywgY29udGV4dDogQ2xhc3NpZmljYXRpb25Db250ZXh0KSA9PiB7XG4gICAgICAgICAgY29uc3QgaW5mZXJyZWRHZW5lcmljVHlwZSA9IHRoaXMuaW5mZXJHZW5lcmljVHlwZShjb250ZXh0KTtcbiAgICAgICAgICByZXR1cm4gbWF0Y2gucmVwbGFjZSgnYW55JywgaW5mZXJyZWRHZW5lcmljVHlwZSk7XG4gICAgICAgIH0sXG4gICAgICAgIHZhbGlkYXRvcjogKGNvbnRleHQ6IENsYXNzaWZpY2F0aW9uQ29udGV4dCkgPT5cbiAgICAgICAgICBjb250ZXh0LmNvZGVTbmlwcGV0LmluY2x1ZGVzKCc8YW55PicpICYmXG4gICAgICAgICAgIXRoaXMuaXNJbkVycm9ySGFuZGxpbmdDb250ZXh0KGNvbnRleHQpLFxuICAgICAgICBwcmlvcml0eTogNlxuICAgICAgfSxcblxuICAgICAgLy8gT2JqZWN0IHByb3BlcnR5IHR5cGUgcmVwbGFjZW1lbnRcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjogLyhcXHcrKTpcXHMqYW55KD89XFxzKlssO31dKS9nLFxuICAgICAgICByZXBsYWNlbWVudDogKG1hdGNoOiBzdHJpbmcsIGNvbnRleHQ6IENsYXNzaWZpY2F0aW9uQ29udGV4dCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHByb3BlcnR5TmFtZSA9IG1hdGNoLm1hdGNoKC8oXFx3Kyk6Lyk/LlsxXTtcbiAgICAgICAgICBpZiAocHJvcGVydHlOYW1lKSB7XG4gICAgICAgICAgICBjb25zdCBpbmZlcnJlZFR5cGUgPSB0aGlzLmluZmVyT2JqZWN0UHJvcGVydHlUeXBlKGNvbnRleHQsIHByb3BlcnR5TmFtZSk7XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2gucmVwbGFjZSgnYW55JywgaW5mZXJyZWRUeXBlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLnJlcGxhY2UoJ2FueScsICd1bmtub3duJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHZhbGlkYXRvcjogKGNvbnRleHQ6IENsYXNzaWZpY2F0aW9uQ29udGV4dCkgPT5cbiAgICAgICAgICB0aGlzLmlzT2JqZWN0UHJvcGVydHlDb250ZXh0KGNvbnRleHQpICYmXG4gICAgICAgICAgIXRoaXMuaXNJbkVycm9ySGFuZGxpbmdDb250ZXh0KGNvbnRleHQpLFxuICAgICAgICBwcmlvcml0eTogN1xuICAgICAgfSxcblxuICAgICAgLy8gU2ltcGxlIHZhcmlhYmxlIHR5cGUgcmVwbGFjZW1lbnQgKGZhbGxiYWNrKVxuICAgICAge1xuICAgICAgICBwYXR0ZXJuOiAvOlxccyphbnkoPz1cXHMqWz07LFxcKV0pL2csXG4gICAgICAgIHJlcGxhY2VtZW50OiAobWF0Y2g6IHN0cmluZywgY29udGV4dDogQ2xhc3NpZmljYXRpb25Db250ZXh0KSA9PiB7XG4gICAgICAgICAgLy8gVHJ5IHRvIGluZmVyIGZyb20gYXNzaWdubWVudCBvciB1c2FnZVxuICAgICAgICAgIGNvbnN0IGluZmVycmVkVHlwZSA9IHRoaXMuaW5mZXJWYXJpYWJsZVR5cGUoY29udGV4dCk7XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLnJlcGxhY2UoJ2FueScsIGluZmVycmVkVHlwZSk7XG4gICAgICAgIH0sXG4gICAgICAgIHZhbGlkYXRvcjogKGNvbnRleHQ6IENsYXNzaWZpY2F0aW9uQ29udGV4dCkgPT5cbiAgICAgICAgICAhdGhpcy5pc0luRXJyb3JIYW5kbGluZ0NvbnRleHQoY29udGV4dCkgJiZcbiAgICAgICAgICAhdGhpcy5pc0V4dGVybmFsQXBpQ29udGV4dChjb250ZXh0KSAmJlxuICAgICAgICAgICF0aGlzLmlzRHluYW1pY0NvbmZpZ0NvbnRleHQoY29udGV4dCksXG4gICAgICAgIHByaW9yaXR5OiA4XG4gICAgICB9XG4gICAgXTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgY3JlYXRlQmFja3VwKGZpbGVQYXRoOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5yZXBsYWNlKC9bOi5dL2csICctJyk7XG4gICAgY29uc3QgZmlsZU5hbWUgPSBwYXRoLmJhc2VuYW1lKGZpbGVQYXRoKTtcbiAgICBjb25zdCBiYWNrdXBGaWxlTmFtZSA9IGAke2ZpbGVOYW1lfS4ke3RpbWVzdGFtcH0uYmFja3VwYDtcbiAgICBjb25zdCBiYWNrdXBQYXRoID0gcGF0aC5qb2luKHRoaXMuYmFja3VwRGlyZWN0b3J5LCBiYWNrdXBGaWxlTmFtZSk7XG5cbiAgICBjb25zdCBvcmlnaW5hbENvbnRlbnQgPSBmcy5yZWFkRmlsZVN5bmMoZmlsZVBhdGgsICd1dGY4Jyk7XG4gICAgZnMud3JpdGVGaWxlU3luYyhiYWNrdXBQYXRoLCBvcmlnaW5hbENvbnRlbnQsICd1dGY4Jyk7XG5cbiAgICByZXR1cm4gYmFja3VwUGF0aDtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgcm9sbGJhY2tGcm9tQmFja3VwKGZpbGVQYXRoOiBzdHJpbmcsIGJhY2t1cFBhdGg6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmIChmcy5leGlzdHNTeW5jKGJhY2t1cFBhdGgpKSB7XG4gICAgICBjb25zdCBiYWNrdXBDb250ZW50ID0gZnMucmVhZEZpbGVTeW5jKGJhY2t1cFBhdGgsICd1dGY4Jyk7XG4gICAgICBmcy53cml0ZUZpbGVTeW5jKGZpbGVQYXRoLCBiYWNrdXBDb250ZW50LCAndXRmOCcpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgcm9sbGJhY2tBbGxGaWxlcyhiYWNrdXBQYXRoczogTWFwPHN0cmluZywgc3RyaW5nPik6IFByb21pc2U8dm9pZD4ge1xuICAgIGZvciAoY29uc3QgW2ZpbGVQYXRoLCBiYWNrdXBQYXRoXSBvZiBBcnJheS5mcm9tKGJhY2t1cFBhdGhzLmVudHJpZXMoKSkpIHtcbiAgICAgIGF3YWl0IHRoaXMucm9sbGJhY2tGcm9tQmFja3VwKGZpbGVQYXRoLCBiYWNrdXBQYXRoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdyb3VwUmVwbGFjZW1lbnRzQnlGaWxlKHJlcGxhY2VtZW50czogVHlwZVJlcGxhY2VtZW50W10pOiBNYXA8c3RyaW5nLCBUeXBlUmVwbGFjZW1lbnRbXT4ge1xuICAgIGNvbnN0IGdyb3VwZWQgPSBuZXcgTWFwPHN0cmluZywgVHlwZVJlcGxhY2VtZW50W10+KCk7XG5cbiAgICBmb3IgKGNvbnN0IHJlcGxhY2VtZW50IG9mIHJlcGxhY2VtZW50cykge1xuICAgICAgaWYgKCFncm91cGVkLmhhcyhyZXBsYWNlbWVudC5maWxlUGF0aCkpIHtcbiAgICAgICAgZ3JvdXBlZC5zZXQocmVwbGFjZW1lbnQuZmlsZVBhdGgsIFtdKTtcbiAgICAgIH1cbiAgICAgIGdyb3VwZWQuZ2V0KHJlcGxhY2VtZW50LmZpbGVQYXRoKSEucHVzaChyZXBsYWNlbWVudCk7XG4gICAgfVxuXG4gICAgLy8gU29ydCByZXBsYWNlbWVudHMgd2l0aGluIGVhY2ggZmlsZSBieSBsaW5lIG51bWJlciAoZGVzY2VuZGluZyB0byBhdm9pZCBsaW5lIG51bWJlciBzaGlmdHMpXG4gICAgZm9yIChjb25zdCBmaWxlUmVwbGFjZW1lbnRzIG9mIGdyb3VwZWQudmFsdWVzKCkpIHtcbiAgICAgIGZpbGVSZXBsYWNlbWVudHMuc29ydCgoYSwgYikgPT4gYi5saW5lTnVtYmVyIC0gYS5saW5lTnVtYmVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ3JvdXBlZDtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgYXBwbHlSZXBsYWNlbWVudHNUb0ZpbGUoXG4gICAgZmlsZVBhdGg6IHN0cmluZyxcbiAgICByZXBsYWNlbWVudHM6IFR5cGVSZXBsYWNlbWVudFtdXG4gICk6IFByb21pc2U8eyBhcHBsaWVkOiBUeXBlUmVwbGFjZW1lbnRbXSwgZmFpbGVkOiBUeXBlUmVwbGFjZW1lbnRbXSwgZXJyb3JzOiBzdHJpbmdbXSB9PiB7XG4gICAgY29uc3QgYXBwbGllZDogVHlwZVJlcGxhY2VtZW50W10gPSBbXTtcbiAgICBjb25zdCBmYWlsZWQ6IFR5cGVSZXBsYWNlbWVudFtdID0gW107XG4gICAgY29uc3QgZXJyb3JzOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgdHJ5IHtcbiAgICAgIGxldCBjb250ZW50ID0gZnMucmVhZEZpbGVTeW5jKGZpbGVQYXRoLCAndXRmOCcpO1xuICAgICAgbGV0IGxpbmVzID0gY29udGVudC5zcGxpdCgnXFxuJyk7XG5cbiAgICAgIGZvciAoY29uc3QgcmVwbGFjZW1lbnQgb2YgcmVwbGFjZW1lbnRzKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgbGluZUluZGV4ID0gcmVwbGFjZW1lbnQubGluZU51bWJlciAtIDE7XG4gICAgICAgICAgaWYgKGxpbmVJbmRleCA8IDAgfHwgbGluZUluZGV4ID49IGxpbmVzLmxlbmd0aCkge1xuICAgICAgICAgICAgZmFpbGVkLnB1c2gocmVwbGFjZW1lbnQpO1xuICAgICAgICAgICAgZXJyb3JzLnB1c2goYEludmFsaWQgbGluZSBudW1iZXIgJHtyZXBsYWNlbWVudC5saW5lTnVtYmVyfSBmb3IgZmlsZSAke2ZpbGVQYXRofWApO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3Qgb3JpZ2luYWxMaW5lID0gbGluZXNbbGluZUluZGV4XTtcbiAgICAgICAgICBjb25zdCBtb2RpZmllZExpbmUgPSBvcmlnaW5hbExpbmUucmVwbGFjZShyZXBsYWNlbWVudC5vcmlnaW5hbCwgcmVwbGFjZW1lbnQucmVwbGFjZW1lbnQpO1xuXG4gICAgICAgICAgaWYgKG9yaWdpbmFsTGluZSA9PT0gbW9kaWZpZWRMaW5lKSB7XG4gICAgICAgICAgICBmYWlsZWQucHVzaChyZXBsYWNlbWVudCk7XG4gICAgICAgICAgICBlcnJvcnMucHVzaChgUGF0dGVybiBcIiR7cmVwbGFjZW1lbnQub3JpZ2luYWx9XCIgbm90IGZvdW5kIGluIGxpbmU6ICR7b3JpZ2luYWxMaW5lfWApO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGluZXNbbGluZUluZGV4XSA9IG1vZGlmaWVkTGluZTtcbiAgICAgICAgICBhcHBsaWVkLnB1c2gocmVwbGFjZW1lbnQpO1xuXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgZmFpbGVkLnB1c2gocmVwbGFjZW1lbnQpO1xuICAgICAgICAgIGVycm9ycy5wdXNoKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gV3JpdGUgdGhlIG1vZGlmaWVkIGNvbnRlbnQgYmFjayB0byBmaWxlXG4gICAgICBjb25zdCBtb2RpZmllZENvbnRlbnQgPSBsaW5lcy5qb2luKCdcXG4nKTtcbiAgICAgIGZzLndyaXRlRmlsZVN5bmMoZmlsZVBhdGgsIG1vZGlmaWVkQ29udGVudCwgJ3V0ZjgnKTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBJZiBmaWxlLWxldmVsIG9wZXJhdGlvbiBmYWlscywgbWFyayBhbGwgcmVwbGFjZW1lbnRzIGFzIGZhaWxlZFxuICAgICAgZmFpbGVkLnB1c2goLi4ucmVwbGFjZW1lbnRzKTtcbiAgICAgIGVycm9ycy5wdXNoKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgYXBwbGllZCwgZmFpbGVkLCBlcnJvcnMgfTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgdmFsaWRhdGVUeXBlU2NyaXB0Q29tcGlsYXRpb24oKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW4sIGVycm9yczogc3RyaW5nW10gfT4ge1xuICAgIGNvbnN0IGJ1aWxkUmVzdWx0ID0gYXdhaXQgdGhpcy5zYWZldHlWYWxpZGF0b3IudmFsaWRhdGVUeXBlU2NyaXB0Q29tcGlsYXRpb24oKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3VjY2VzczogYnVpbGRSZXN1bHQuYnVpbGRTdWNjZXNzZnVsLFxuICAgICAgZXJyb3JzOiBidWlsZFJlc3VsdC5jb21waWxhdGlvbkVycm9yc1xuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGVuc3VyZUJhY2t1cERpcmVjdG9yeSgpOiB2b2lkIHtcbiAgICBpZiAoIWZzLmV4aXN0c1N5bmModGhpcy5iYWNrdXBEaXJlY3RvcnkpKSB7XG4gICAgICBmcy5ta2RpclN5bmModGhpcy5iYWNrdXBEaXJlY3RvcnksIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIGF0b21pYyByZXBsYWNlbWVudCBvcGVyYXRpb24gd2l0aCBjb21wcmVoZW5zaXZlIHZhbGlkYXRpb25cbiAgICovXG4gIHByaXZhdGUgYXN5bmMgcGVyZm9ybUF0b21pY1JlcGxhY2VtZW50KFxuICAgIHJlcGxhY2VtZW50OiBUeXBlUmVwbGFjZW1lbnQsXG4gICAgYmFja3VwUGF0aDogc3RyaW5nXG4gICk6IFByb21pc2U8UmVwbGFjZW1lbnRSZXN1bHQ+IHtcbiAgICB0cnkge1xuICAgICAgLy8gUmVhZCBvcmlnaW5hbCBmaWxlIGNvbnRlbnRcbiAgICAgIGNvbnN0IG9yaWdpbmFsQ29udGVudCA9IGZzLnJlYWRGaWxlU3luYyhyZXBsYWNlbWVudC5maWxlUGF0aCwgJ3V0ZjgnKTtcbiAgICAgIGNvbnN0IGxpbmVzID0gb3JpZ2luYWxDb250ZW50LnNwbGl0KCdcXG4nKTtcblxuICAgICAgLy8gVmFsaWRhdGUgbGluZSBudW1iZXJcbiAgICAgIGNvbnN0IGxpbmVJbmRleCA9IHJlcGxhY2VtZW50LmxpbmVOdW1iZXIgLSAxO1xuICAgICAgaWYgKGxpbmVJbmRleCA8IDAgfHwgbGluZUluZGV4ID49IGxpbmVzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgIGFwcGxpZWRSZXBsYWNlbWVudHM6IFtdLFxuICAgICAgICAgIGZhaWxlZFJlcGxhY2VtZW50czogW3JlcGxhY2VtZW50XSxcbiAgICAgICAgICBjb21waWxhdGlvbkVycm9yczogW2BJbnZhbGlkIGxpbmUgbnVtYmVyICR7cmVwbGFjZW1lbnQubGluZU51bWJlcn0gZm9yIGZpbGUgJHtyZXBsYWNlbWVudC5maWxlUGF0aH1gXSxcbiAgICAgICAgICByb2xsYmFja1BlcmZvcm1lZDogZmFsc2UsXG4gICAgICAgICAgYmFja3VwUGF0aFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICAvLyBBcHBseSByZXBsYWNlbWVudFxuICAgICAgY29uc3Qgb3JpZ2luYWxMaW5lID0gbGluZXNbbGluZUluZGV4XTtcbiAgICAgIGNvbnN0IG1vZGlmaWVkTGluZSA9IG9yaWdpbmFsTGluZS5yZXBsYWNlKHJlcGxhY2VtZW50Lm9yaWdpbmFsLCByZXBsYWNlbWVudC5yZXBsYWNlbWVudCk7XG5cbiAgICAgIC8vIFZlcmlmeSByZXBsYWNlbWVudCB3YXMgYXBwbGllZFxuICAgICAgaWYgKG9yaWdpbmFsTGluZSA9PT0gbW9kaWZpZWRMaW5lKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgYXBwbGllZFJlcGxhY2VtZW50czogW10sXG4gICAgICAgICAgZmFpbGVkUmVwbGFjZW1lbnRzOiBbcmVwbGFjZW1lbnRdLFxuICAgICAgICAgIGNvbXBpbGF0aW9uRXJyb3JzOiBbYFBhdHRlcm4gXCIke3JlcGxhY2VtZW50Lm9yaWdpbmFsfVwiIG5vdCBmb3VuZCBpbiBsaW5lOiAke29yaWdpbmFsTGluZX1gXSxcbiAgICAgICAgICByb2xsYmFja1BlcmZvcm1lZDogZmFsc2UsXG4gICAgICAgICAgYmFja3VwUGF0aFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICAvLyBXcml0ZSBtb2RpZmllZCBjb250ZW50XG4gICAgICBsaW5lc1tsaW5lSW5kZXhdID0gbW9kaWZpZWRMaW5lO1xuICAgICAgY29uc3QgbW9kaWZpZWRDb250ZW50ID0gbGluZXMuam9pbignXFxuJyk7XG4gICAgICBmcy53cml0ZUZpbGVTeW5jKHJlcGxhY2VtZW50LmZpbGVQYXRoLCBtb2RpZmllZENvbnRlbnQsICd1dGY4Jyk7XG5cbiAgICAgIC8vIFZhbGlkYXRlIFR5cGVTY3JpcHQgY29tcGlsYXRpb25cbiAgICAgIGNvbnN0IGNvbXBpbGF0aW9uUmVzdWx0ID0gYXdhaXQgdGhpcy52YWxpZGF0ZVR5cGVTY3JpcHRDb21waWxhdGlvbigpO1xuICAgICAgaWYgKCFjb21waWxhdGlvblJlc3VsdC5zdWNjZXNzKSB7XG4gICAgICAgIC8vIFJvbGxiYWNrIG9uIGNvbXBpbGF0aW9uIGZhaWx1cmVcbiAgICAgICAgYXdhaXQgdGhpcy5yb2xsYmFja0Zyb21CYWNrdXAocmVwbGFjZW1lbnQuZmlsZVBhdGgsIGJhY2t1cFBhdGgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgIGFwcGxpZWRSZXBsYWNlbWVudHM6IFtdLFxuICAgICAgICAgIGZhaWxlZFJlcGxhY2VtZW50czogW3JlcGxhY2VtZW50XSxcbiAgICAgICAgICBjb21waWxhdGlvbkVycm9yczogY29tcGlsYXRpb25SZXN1bHQuZXJyb3JzLFxuICAgICAgICAgIHJvbGxiYWNrUGVyZm9ybWVkOiB0cnVlLFxuICAgICAgICAgIGJhY2t1cFBhdGhcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgYXBwbGllZFJlcGxhY2VtZW50czogW3JlcGxhY2VtZW50XSxcbiAgICAgICAgZmFpbGVkUmVwbGFjZW1lbnRzOiBbXSxcbiAgICAgICAgY29tcGlsYXRpb25FcnJvcnM6IFtdLFxuICAgICAgICByb2xsYmFja1BlcmZvcm1lZDogZmFsc2UsXG4gICAgICAgIGJhY2t1cFBhdGhcbiAgICAgIH07XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gRG9uJ3Qgcm9sbGJhY2sgaGVyZSAtIGxldCB0aGUgY2FsbGluZyBtZXRob2QgaGFuZGxlIGl0XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVmVyaWZ5IHRoYXQgcm9sbGJhY2sgY2FwYWJpbGl0eSBpcyB3b3JraW5nIGNvcnJlY3RseVxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyB2ZXJpZnlSb2xsYmFja0NhcGFiaWxpdHkoXG4gICAgZmlsZVBhdGg6IHN0cmluZyxcbiAgICBiYWNrdXBQYXRoOiBzdHJpbmdcbiAgKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW4sIGVycm9yPzogc3RyaW5nIH0+IHtcbiAgICB0cnkge1xuICAgICAgLy8gUmVhZCBiYWNrdXAgY29udGVudFxuICAgICAgaWYgKCFmcy5leGlzdHNTeW5jKGJhY2t1cFBhdGgpKSB7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJ0JhY2t1cCBmaWxlIGRvZXMgbm90IGV4aXN0JyB9O1xuICAgICAgfVxuXG4gICAgICBjb25zdCBiYWNrdXBDb250ZW50ID0gZnMucmVhZEZpbGVTeW5jKGJhY2t1cFBhdGgsICd1dGY4Jyk7XG5cbiAgICAgIC8vIEZvciB0ZXN0aW5nIHB1cnBvc2VzLCB3ZSdsbCBqdXN0IHZlcmlmeSB0aGUgYmFja3VwIGV4aXN0cyBhbmQgaXMgcmVhZGFibGVcbiAgICAgIC8vIEluIGEgcmVhbCBzY2VuYXJpbywgd2UgbWlnaHQgZG8gYSBtb3JlIGNvbXByZWhlbnNpdmUgdGVzdFxuICAgICAgaWYgKGJhY2t1cENvbnRlbnQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJ0JhY2t1cCBmaWxlIGlzIGVtcHR5JyB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlIH07XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcilcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBzYWZldHkgc2NvcmUgZm9yIGEgcmVwbGFjZW1lbnQgYmFzZWQgb24gbXVsdGlwbGUgZmFjdG9yc1xuICAgKi9cbiAgcHJpdmF0ZSBjYWxjdWxhdGVTYWZldHlTY29yZShyZXBsYWNlbWVudDogVHlwZVJlcGxhY2VtZW50KTogbnVtYmVyIHtcbiAgICBsZXQgc2NvcmUgPSByZXBsYWNlbWVudC5jb25maWRlbmNlOyAvLyBCYXNlIHNjb3JlIGZyb20gY2xhc3NpZmljYXRpb24gY29uZmlkZW5jZVxuXG4gICAgLy8gQWRqdXN0IGJhc2VkIG9uIHJlcGxhY2VtZW50IHR5cGVcbiAgICBpZiAocmVwbGFjZW1lbnQucmVwbGFjZW1lbnQuaW5jbHVkZXMoJ3Vua25vd24nKSkge1xuICAgICAgc2NvcmUgKz0gMC4xOyAvLyB1bmtub3duIGlzIGdlbmVyYWxseSBzYWZlciB0aGFuIGFueVxuICAgIH1cblxuICAgIC8vIEFkanVzdCBiYXNlZCBvbiBmaWxlIHR5cGVcbiAgICBpZiAocmVwbGFjZW1lbnQuZmlsZVBhdGguaW5jbHVkZXMoJy50ZXN0LicpIHx8IHJlcGxhY2VtZW50LmZpbGVQYXRoLmluY2x1ZGVzKCdfX3Rlc3RzX18nKSkge1xuICAgICAgc2NvcmUgKz0gMC4wNTsgLy8gVGVzdCBmaWxlcyBhcmUgc2FmZXIgdG8gbW9kaWZ5XG4gICAgfVxuXG4gICAgLy8gQWRqdXN0IGJhc2VkIG9uIHJlcGxhY2VtZW50IHBhdHRlcm4gY29tcGxleGl0eVxuICAgIGlmIChyZXBsYWNlbWVudC5vcmlnaW5hbCA9PT0gJ2FueVtdJykge1xuICAgICAgc2NvcmUgKz0gMC4xNTsgLy8gQXJyYXkgcmVwbGFjZW1lbnRzIGFyZSB2ZXJ5IHNhZmVcbiAgICB9IGVsc2UgaWYgKHJlcGxhY2VtZW50Lm9yaWdpbmFsLmluY2x1ZGVzKCdSZWNvcmQ8c3RyaW5nLCBhbnk+JykpIHtcbiAgICAgIHNjb3JlICs9IDAuMTsgLy8gUmVjb3JkIHJlcGxhY2VtZW50cyBhcmUgZ2VuZXJhbGx5IHNhZmVcbiAgICB9IGVsc2UgaWYgKHJlcGxhY2VtZW50Lm9yaWdpbmFsLmluY2x1ZGVzKCdmdW5jdGlvbicpIHx8IHJlcGxhY2VtZW50Lm9yaWdpbmFsLmluY2x1ZGVzKCc9PicpKSB7XG4gICAgICBzY29yZSAtPSAwLjE7IC8vIEZ1bmN0aW9uLXJlbGF0ZWQgcmVwbGFjZW1lbnRzIGFyZSByaXNraWVyXG4gICAgfVxuXG4gICAgLy8gQWRqdXN0IGJhc2VkIG9uIGxpbmUgY29udGV4dCAoaWYgYXZhaWxhYmxlIGluIHRoZSByZXBsYWNlbWVudClcbiAgICBjb25zdCBsaW5lQ29udGVudCA9IHJlcGxhY2VtZW50Lm9yaWdpbmFsO1xuICAgIGlmIChsaW5lQ29udGVudC5pbmNsdWRlcygnY2F0Y2gnKSB8fCBsaW5lQ29udGVudC5pbmNsdWRlcygnZXJyb3InKSkge1xuICAgICAgc2NvcmUgLT0gMC4yOyAvLyBFcnJvciBoYW5kbGluZyBjb250ZXh0cyBhcmUgcmlza2llclxuICAgIH1cblxuICAgIGlmIChsaW5lQ29udGVudC5pbmNsdWRlcygnaW50ZXJmYWNlJykgfHwgbGluZUNvbnRlbnQuaW5jbHVkZXMoJ3R5cGUgJykpIHtcbiAgICAgIHNjb3JlICs9IDAuMDU7IC8vIFR5cGUgZGVmaW5pdGlvbnMgYXJlIHNhZmVyXG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIHNjb3JlIHN0YXlzIHdpdGhpbiBib3VuZHNcbiAgICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgc2NvcmUpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgcmVwbGFjZW1lbnQgc3RyYXRlZ2llcyBzb3J0ZWQgYnkgcHJpb3JpdHlcbiAgICovXG4gIGdldFN0cmF0ZWdpZXMoKTogUmVwbGFjZW1lbnRTdHJhdGVneVtdIHtcbiAgICByZXR1cm4gWy4uLnRoaXMuc3RyYXRlZ2llc10uc29ydCgoYSwgYikgPT4gYS5wcmlvcml0eSAtIGIucHJpb3JpdHkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIGN1c3RvbSByZXBsYWNlbWVudCBzdHJhdGVneVxuICAgKi9cbiAgYWRkU3RyYXRlZ3koc3RyYXRlZ3k6IFJlcGxhY2VtZW50U3RyYXRlZ3kpOiB2b2lkIHtcbiAgICB0aGlzLnN0cmF0ZWdpZXMucHVzaChzdHJhdGVneSk7XG4gICAgdGhpcy5zdHJhdGVnaWVzLnNvcnQoKGEsIGIpID0+IGEucHJpb3JpdHkgLSBiLnByaW9yaXR5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYmFja3VwIGRpcmVjdG9yeSBwYXRoXG4gICAqL1xuICBnZXRCYWNrdXBEaXJlY3RvcnkoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5iYWNrdXBEaXJlY3Rvcnk7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYW4gdXAgb2xkIGJhY2t1cCBmaWxlcyAob2xkZXIgdGhhbiBzcGVjaWZpZWQgZGF5cylcbiAgICovXG4gIGNsZWFudXBPbGRCYWNrdXBzKGRheXNUb0tlZXAgPSA3KTogdm9pZCB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGN1dG9mZkRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgY3V0b2ZmRGF0ZS5zZXREYXRlKGN1dG9mZkRhdGUuZ2V0RGF0ZSgpIC0gZGF5c1RvS2VlcCk7XG5cbiAgICAgIGNvbnN0IGZpbGVzID0gZnMucmVhZGRpclN5bmModGhpcy5iYWNrdXBEaXJlY3RvcnkpO1xuXG4gICAgICBmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZXMpIHtcbiAgICAgICAgaWYgKGZpbGUuZW5kc1dpdGgoJy5iYWNrdXAnKSkge1xuICAgICAgICAgIGNvbnN0IGZpbGVQYXRoID0gcGF0aC5qb2luKHRoaXMuYmFja3VwRGlyZWN0b3J5LCBmaWxlKTtcbiAgICAgICAgICBjb25zdCBzdGF0cyA9IGZzLnN0YXRTeW5jKGZpbGVQYXRoKTtcblxuICAgICAgICAgIGlmIChzdGF0cy5tdGltZSA8IGN1dG9mZkRhdGUpIHtcbiAgICAgICAgICAgIGZzLnVubGlua1N5bmMoZmlsZVBhdGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBMb2cgZXJyb3IgYnV0IGRvbid0IHRocm93IC0gY2xlYW51cCBpcyBub3QgY3JpdGljYWxcbiAgICAgIGNvbnNvbGUud2FybignRmFpbGVkIHRvIGNsZWFudXAgb2xkIGJhY2t1cHM6JywgZXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFR5cGUgSW5mZXJlbmNlIEhlbHBlciBNZXRob2RzXG5cbiAgLyoqXG4gICAqIEluZmVyIGFycmF5IGVsZW1lbnQgdHlwZSBmcm9tIGNvbnRleHRcbiAgICovXG4gIHByaXZhdGUgaW5mZXJBcnJheUVsZW1lbnRUeXBlKGNvbnRleHQ6IENsYXNzaWZpY2F0aW9uQ29udGV4dCk6IHN0cmluZyB7XG4gICAgY29uc3QgeyBjb2RlU25pcHBldCwgc3Vycm91bmRpbmdMaW5lcyB9ID0gY29udGV4dDtcblxuICAgIC8vIExvb2sgZm9yIGFycmF5IGluaXRpYWxpemF0aW9uIHBhdHRlcm5zXG4gICAgaWYgKGNvZGVTbmlwcGV0LmluY2x1ZGVzKCc9IFsnKSkge1xuICAgICAgLy8gQ2hlY2sgaWYgYXJyYXkgaGFzIHN0cmluZyBsaXRlcmFsc1xuICAgICAgaWYgKGNvZGVTbmlwcGV0LmluY2x1ZGVzKFwiJ1wiKSB8fCBjb2RlU25pcHBldC5pbmNsdWRlcygnXCInKSkge1xuICAgICAgICByZXR1cm4gJ3N0cmluZyc7XG4gICAgICB9XG4gICAgICAvLyBDaGVjayBpZiBhcnJheSBoYXMgbnVtYmVyc1xuICAgICAgaWYgKC89XFxzKlxcW1xccypcXGQvLnRlc3QoY29kZVNuaXBwZXQpKSB7XG4gICAgICAgIHJldHVybiAnbnVtYmVyJztcbiAgICAgIH1cbiAgICAgIC8vIENoZWNrIGlmIGFycmF5IGhhcyBib29sZWFuIHZhbHVlc1xuICAgICAgaWYgKGNvZGVTbmlwcGV0LmluY2x1ZGVzKCd0cnVlJykgfHwgY29kZVNuaXBwZXQuaW5jbHVkZXMoJ2ZhbHNlJykpIHtcbiAgICAgICAgcmV0dXJuICdib29sZWFuJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBMb29rIGZvciBwdXNoIG9wZXJhdGlvbnMgaW4gc3Vycm91bmRpbmcgbGluZXNcbiAgICBjb25zdCBhbGxDb250ZXh0ID0gW2NvZGVTbmlwcGV0LCAuLi5zdXJyb3VuZGluZ0xpbmVzXS5qb2luKCcgJyk7XG4gICAgaWYgKGFsbENvbnRleHQuaW5jbHVkZXMoJy5wdXNoKCcpKSB7XG4gICAgICBpZiAoYWxsQ29udGV4dC5pbmNsdWRlcygnLnB1c2goXCInKSB8fCBhbGxDb250ZXh0LmluY2x1ZGVzKFwiLnB1c2goJ1wiKSkge1xuICAgICAgICByZXR1cm4gJ3N0cmluZyc7XG4gICAgICB9XG4gICAgICBpZiAoL1xcLnB1c2hcXChcXGQvLnRlc3QoYWxsQ29udGV4dCkpIHtcbiAgICAgICAgcmV0dXJuICdudW1iZXInO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIERvbWFpbi1zcGVjaWZpYyBpbmZlcmVuY2VcbiAgICBpZiAoY29udGV4dC5kb21haW5Db250ZXh0LmRvbWFpbiA9PT0gQ29kZURvbWFpbi5BU1RST0xPR0lDQUwpIHtcbiAgICAgIGlmIChjb2RlU25pcHBldC5pbmNsdWRlcygncGxhbmV0JykgfHwgY29kZVNuaXBwZXQuaW5jbHVkZXMoJ3NpZ24nKSkge1xuICAgICAgICByZXR1cm4gJ3N0cmluZyc7XG4gICAgICB9XG4gICAgICBpZiAoY29kZVNuaXBwZXQuaW5jbHVkZXMoJ3Bvc2l0aW9uJykgfHwgY29kZVNuaXBwZXQuaW5jbHVkZXMoJ2RlZ3JlZScpKSB7XG4gICAgICAgIHJldHVybiAnbnVtYmVyJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29udGV4dC5kb21haW5Db250ZXh0LmRvbWFpbiA9PT0gQ29kZURvbWFpbi5SRUNJUEUpIHtcbiAgICAgIGlmIChjb2RlU25pcHBldC5pbmNsdWRlcygnaW5ncmVkaWVudCcpIHx8IGNvZGVTbmlwcGV0LmluY2x1ZGVzKCdyZWNpcGUnKSkge1xuICAgICAgICByZXR1cm4gJ3N0cmluZyc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRGVmYXVsdCB0byB1bmtub3duIGZvciBzYWZldHlcbiAgICByZXR1cm4gJ3Vua25vd24nO1xuICB9XG5cbiAgLyoqXG4gICAqIEluZmVyIFJlY29yZCB2YWx1ZSB0eXBlIGZyb20gY29udGV4dFxuICAgKi9cbiAgcHJpdmF0ZSBpbmZlclJlY29yZFZhbHVlVHlwZShjb250ZXh0OiBDbGFzc2lmaWNhdGlvbkNvbnRleHQpOiBzdHJpbmcge1xuICAgIGNvbnN0IHsgY29kZVNuaXBwZXQsIHN1cnJvdW5kaW5nTGluZXMgfSA9IGNvbnRleHQ7XG5cbiAgICAvLyBMb29rIGZvciBvYmplY3QgbGl0ZXJhbCBhc3NpZ25tZW50c1xuICAgIGlmIChjb2RlU25pcHBldC5pbmNsdWRlcygnPSB7JykpIHtcbiAgICAgIC8vIENoZWNrIGZvciBzdHJpbmcgdmFsdWVzXG4gICAgICBpZiAoY29kZVNuaXBwZXQuaW5jbHVkZXMoJzogXCInKSB8fCBjb2RlU25pcHBldC5pbmNsdWRlcyhcIjogJ1wiKSkge1xuICAgICAgICByZXR1cm4gJ3N0cmluZyc7XG4gICAgICB9XG4gICAgICAvLyBDaGVjayBmb3IgbnVtYmVyIHZhbHVlc1xuICAgICAgaWYgKC86XFxzKlxcZC8udGVzdChjb2RlU25pcHBldCkpIHtcbiAgICAgICAgcmV0dXJuICdudW1iZXInO1xuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgZm9yIGJvb2xlYW4gdmFsdWVzXG4gICAgICBpZiAoY29kZVNuaXBwZXQuaW5jbHVkZXMoJzogdHJ1ZScpIHx8IGNvZGVTbmlwcGV0LmluY2x1ZGVzKCc6IGZhbHNlJykpIHtcbiAgICAgICAgcmV0dXJuICdib29sZWFuJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBMb29rIGZvciBwcm9wZXJ0eSBhY2Nlc3MgcGF0dGVybnMgaW4gc3Vycm91bmRpbmcgbGluZXNcbiAgICBjb25zdCBhbGxDb250ZXh0ID0gW2NvZGVTbmlwcGV0LCAuLi5zdXJyb3VuZGluZ0xpbmVzXS5qb2luKCcgJyk7XG5cbiAgICAvLyBDaGVjayBmb3Igc3RyaW5nIG9wZXJhdGlvbnNcbiAgICBpZiAoYWxsQ29udGV4dC5pbmNsdWRlcygnLnRvU3RyaW5nKCknKSB8fCBhbGxDb250ZXh0LmluY2x1ZGVzKCcudG9Mb3dlckNhc2UoKScpIHx8IGFsbENvbnRleHQuaW5jbHVkZXMoJy50b1VwcGVyQ2FzZSgpJykpIHtcbiAgICAgIHJldHVybiAnc3RyaW5nJztcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgbnVtYmVyIG9wZXJhdGlvbnNcbiAgICBpZiAoYWxsQ29udGV4dC5pbmNsdWRlcygncGFyc2VJbnQoJykgfHwgYWxsQ29udGV4dC5pbmNsdWRlcygncGFyc2VGbG9hdCgnKSB8fCBhbGxDb250ZXh0LmluY2x1ZGVzKCdOdW1iZXIoJykpIHtcbiAgICAgIHJldHVybiAnbnVtYmVyJztcbiAgICB9XG5cbiAgICAvLyBEb21haW4tc3BlY2lmaWMgaW5mZXJlbmNlXG4gICAgaWYgKGNvbnRleHQuZG9tYWluQ29udGV4dC5kb21haW4gPT09IENvZGVEb21haW4uQVNUUk9MT0dJQ0FMKSB7XG4gICAgICBpZiAoY29kZVNuaXBwZXQuaW5jbHVkZXMoJ2VsZW1lbnQnKSB8fCBjb2RlU25pcHBldC5pbmNsdWRlcygnRWxlbWVudCcpKSB7XG4gICAgICAgIHJldHVybiAnbnVtYmVyJzsgLy8gRWxlbWVudGFsIHByb3BlcnRpZXMgYXJlIG51bWVyaWNcbiAgICAgIH1cbiAgICAgIGlmIChjb2RlU25pcHBldC5pbmNsdWRlcygnY29uZmlnJykgfHwgY29kZVNuaXBwZXQuaW5jbHVkZXMoJ0NvbmZpZycpKSB7XG4gICAgICAgIHJldHVybiAndW5rbm93bic7IC8vIENvbmZpZyBvYmplY3RzIGNhbiBiZSBjb21wbGV4XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuICd1bmtub3duJztcbiAgfVxuXG4gIC8qKlxuICAgKiBJbmZlciBpbmRleCBzaWduYXR1cmUgdmFsdWUgdHlwZSBmcm9tIGNvbnRleHRcbiAgICovXG4gIHByaXZhdGUgaW5mZXJJbmRleFNpZ25hdHVyZVZhbHVlVHlwZShjb250ZXh0OiBDbGFzc2lmaWNhdGlvbkNvbnRleHQpOiBzdHJpbmcge1xuICAgIC8vIFNpbWlsYXIgbG9naWMgdG8gUmVjb3JkIHZhbHVlIHR5cGUgaW5mZXJlbmNlXG4gICAgcmV0dXJuIHRoaXMuaW5mZXJSZWNvcmRWYWx1ZVR5cGUoY29udGV4dCk7XG4gIH1cblxuICAvKipcbiAgICogSW5mZXIgZnVuY3Rpb24gcGFyYW1ldGVyIHR5cGUgZnJvbSBjb250ZXh0IGFuZCBwYXJhbWV0ZXIgbmFtZVxuICAgKi9cbiAgcHJpdmF0ZSBpbmZlckZ1bmN0aW9uUGFyYW1ldGVyVHlwZShjb250ZXh0OiBDbGFzc2lmaWNhdGlvbkNvbnRleHQsIHBhcmFtTmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCB7IGNvZGVTbmlwcGV0LCBzdXJyb3VuZGluZ0xpbmVzIH0gPSBjb250ZXh0O1xuXG4gICAgLy8gQ29tbW9uIHBhcmFtZXRlciBuYW1lIHBhdHRlcm5zXG4gICAgY29uc3QgcGFyYW1Mb3dlciA9IHBhcmFtTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgLy8gRXZlbnQgaGFuZGxlcnNcbiAgICBpZiAocGFyYW1Mb3dlci5pbmNsdWRlcygnZXZlbnQnKSB8fCBwYXJhbUxvd2VyID09PSAnZScpIHtcbiAgICAgIGlmIChjb250ZXh0LmNvZGVTbmlwcGV0LmluY2x1ZGVzKCdvbkNsaWNrJykgfHwgY29udGV4dC5jb2RlU25pcHBldC5pbmNsdWRlcygnb25TdWJtaXQnKSkge1xuICAgICAgICByZXR1cm4gJ1JlYWN0Lk1vdXNlRXZlbnQgfCBSZWFjdC5Gb3JtRXZlbnQnO1xuICAgICAgfVxuICAgICAgcmV0dXJuICdFdmVudCc7XG4gICAgfVxuXG4gICAgLy8gRXJyb3IgcGFyYW1ldGVyc1xuICAgIGlmIChwYXJhbUxvd2VyLmluY2x1ZGVzKCdlcnJvcicpIHx8IHBhcmFtTG93ZXIgPT09ICdlcnInKSB7XG4gICAgICByZXR1cm4gJ0Vycm9yJztcbiAgICB9XG5cbiAgICAvLyBJRCBwYXJhbWV0ZXJzXG4gICAgaWYgKHBhcmFtTG93ZXIuaW5jbHVkZXMoJ2lkJykgfHwgcGFyYW1Mb3dlciA9PT0gJ2tleScpIHtcbiAgICAgIHJldHVybiAnc3RyaW5nIHwgbnVtYmVyJztcbiAgICB9XG5cbiAgICAvLyBJbmRleCBwYXJhbWV0ZXJzXG4gICAgaWYgKHBhcmFtTG93ZXIuaW5jbHVkZXMoJ2luZGV4JykgfHwgcGFyYW1Mb3dlciA9PT0gJ2knKSB7XG4gICAgICByZXR1cm4gJ251bWJlcic7XG4gICAgfVxuXG4gICAgLy8gRGF0YSBwYXJhbWV0ZXJzXG4gICAgaWYgKHBhcmFtTG93ZXIuaW5jbHVkZXMoJ2RhdGEnKSB8fCBwYXJhbUxvd2VyLmluY2x1ZGVzKCdpdGVtJykgfHwgcGFyYW1Mb3dlci5pbmNsdWRlcygnZWxlbWVudCcpKSB7XG4gICAgICAvLyBUcnkgdG8gaW5mZXIgZnJvbSB1c2FnZSBpbiBmdW5jdGlvbiBib2R5XG4gICAgICBjb25zdCBhbGxDb250ZXh0ID0gW2NvZGVTbmlwcGV0LCAuLi5zdXJyb3VuZGluZ0xpbmVzXS5qb2luKCcgJyk7XG4gICAgICBpZiAoYWxsQ29udGV4dC5pbmNsdWRlcyhgJHtwYXJhbU5hbWV9LmApKSB7XG4gICAgICAgIHJldHVybiAnb2JqZWN0JzsgLy8gSWYgYWNjZXNzaW5nIHByb3BlcnRpZXMsIGxpa2VseSBhbiBvYmplY3RcbiAgICAgIH1cbiAgICAgIHJldHVybiAndW5rbm93bic7XG4gICAgfVxuXG4gICAgLy8gRG9tYWluLXNwZWNpZmljIGluZmVyZW5jZVxuICAgIGlmIChjb250ZXh0LmRvbWFpbkNvbnRleHQuZG9tYWluID09PSBDb2RlRG9tYWluLkFTVFJPTE9HSUNBTCkge1xuICAgICAgaWYgKHBhcmFtTG93ZXIuaW5jbHVkZXMoJ3BsYW5ldCcpIHx8IHBhcmFtTG93ZXIuaW5jbHVkZXMoJ3NpZ24nKSkge1xuICAgICAgICByZXR1cm4gJ3N0cmluZyc7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1Mb3dlci5pbmNsdWRlcygncG9zaXRpb24nKSB8fCBwYXJhbUxvd2VyLmluY2x1ZGVzKCdkZWdyZWUnKSkge1xuICAgICAgICByZXR1cm4gJ251bWJlcic7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1Mb3dlci5pbmNsdWRlcygncHJvcGVydGllcycpIHx8IHBhcmFtTG93ZXIuaW5jbHVkZXMoJ2VsZW1lbnQnKSkge1xuICAgICAgICByZXR1cm4gJ0VsZW1lbnRhbFByb3BlcnRpZXMnO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb250ZXh0LmRvbWFpbkNvbnRleHQuZG9tYWluID09PSBDb2RlRG9tYWluLlJFQ0lQRSkge1xuICAgICAgaWYgKHBhcmFtTG93ZXIuaW5jbHVkZXMoJ2luZ3JlZGllbnQnKSkge1xuICAgICAgICByZXR1cm4gJ0luZ3JlZGllbnQnO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtTG93ZXIuaW5jbHVkZXMoJ3JlY2lwZScpKSB7XG4gICAgICAgIHJldHVybiAnUmVjaXBlJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gJ3Vua25vd24nO1xuICB9XG5cbiAgLyoqXG4gICAqIEluZmVyIHJldHVybiB0eXBlIGZyb20gZnVuY3Rpb24gY29udGV4dFxuICAgKi9cbiAgcHJpdmF0ZSBpbmZlclJldHVyblR5cGUoY29udGV4dDogQ2xhc3NpZmljYXRpb25Db250ZXh0KTogc3RyaW5nIHtcbiAgICBjb25zdCB7IGNvZGVTbmlwcGV0LCBzdXJyb3VuZGluZ0xpbmVzIH0gPSBjb250ZXh0O1xuXG4gICAgLy8gTG9vayBmb3IgcmV0dXJuIHN0YXRlbWVudHMgaW4gc3Vycm91bmRpbmcgbGluZXNcbiAgICBjb25zdCBhbGxDb250ZXh0ID0gW2NvZGVTbmlwcGV0LCAuLi5zdXJyb3VuZGluZ0xpbmVzXS5qb2luKCcgJyk7XG5cbiAgICAvLyBDaGVjayBmb3IgZXhwbGljaXQgcmV0dXJuIHN0YXRlbWVudHNcbiAgICBpZiAoYWxsQ29udGV4dC5pbmNsdWRlcygncmV0dXJuICcpKSB7XG4gICAgICAvLyBTdHJpbmcgcmV0dXJuc1xuICAgICAgaWYgKGFsbENvbnRleHQuaW5jbHVkZXMoJ3JldHVybiBcIicpIHx8IGFsbENvbnRleHQuaW5jbHVkZXMoXCJyZXR1cm4gJ1wiKSkge1xuICAgICAgICByZXR1cm4gJ3N0cmluZyc7XG4gICAgICB9XG4gICAgICAvLyBOdW1iZXIgcmV0dXJuc1xuICAgICAgaWYgKC9yZXR1cm5cXHMrXFxkLy50ZXN0KGFsbENvbnRleHQpKSB7XG4gICAgICAgIHJldHVybiAnbnVtYmVyJztcbiAgICAgIH1cbiAgICAgIC8vIEJvb2xlYW4gcmV0dXJuc1xuICAgICAgaWYgKGFsbENvbnRleHQuaW5jbHVkZXMoJ3JldHVybiB0cnVlJykgfHwgYWxsQ29udGV4dC5pbmNsdWRlcygncmV0dXJuIGZhbHNlJykpIHtcbiAgICAgICAgcmV0dXJuICdib29sZWFuJztcbiAgICAgIH1cbiAgICAgIC8vIEFycmF5IHJldHVybnNcbiAgICAgIGlmIChhbGxDb250ZXh0LmluY2x1ZGVzKCdyZXR1cm4gWycpKSB7XG4gICAgICAgIHJldHVybiAndW5rbm93bltdJztcbiAgICAgIH1cbiAgICAgIC8vIE9iamVjdCByZXR1cm5zXG4gICAgICBpZiAoYWxsQ29udGV4dC5pbmNsdWRlcygncmV0dXJuIHsnKSkge1xuICAgICAgICByZXR1cm4gJ29iamVjdCc7XG4gICAgICB9XG4gICAgICAvLyBQcm9taXNlIHJldHVybnNcbiAgICAgIGlmIChhbGxDb250ZXh0LmluY2x1ZGVzKCdyZXR1cm4gUHJvbWlzZScpIHx8IGFsbENvbnRleHQuaW5jbHVkZXMoJ3JldHVybiBuZXcgUHJvbWlzZScpKSB7XG4gICAgICAgIHJldHVybiAnUHJvbWlzZTx1bmtub3duPic7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIGFzeW5jIGZ1bmN0aW9uc1xuICAgIGlmIChjb2RlU25pcHBldC5pbmNsdWRlcygnYXN5bmMgJykpIHtcbiAgICAgIHJldHVybiAnUHJvbWlzZTx1bmtub3duPic7XG4gICAgfVxuXG4gICAgLy8gRnVuY3Rpb24gbmFtZSBpbmZlcmVuY2VcbiAgICBpZiAoY29kZVNuaXBwZXQuaW5jbHVkZXMoJ2dldCcpICYmIGNvZGVTbmlwcGV0LmluY2x1ZGVzKCcoJykpIHtcbiAgICAgIHJldHVybiAndW5rbm93bic7IC8vIEdldHRlciBmdW5jdGlvbnMgcmV0dXJuIHNvbWV0aGluZ1xuICAgIH1cblxuICAgIGlmIChjb2RlU25pcHBldC5pbmNsdWRlcygnaXMnKSB8fCBjb2RlU25pcHBldC5pbmNsdWRlcygnaGFzJykgfHwgY29kZVNuaXBwZXQuaW5jbHVkZXMoJ2NhbicpKSB7XG4gICAgICByZXR1cm4gJ2Jvb2xlYW4nOyAvLyBQcmVkaWNhdGUgZnVuY3Rpb25zXG4gICAgfVxuXG4gICAgaWYgKGNvZGVTbmlwcGV0LmluY2x1ZGVzKCdjYWxjdWxhdGUnKSB8fCBjb2RlU25pcHBldC5pbmNsdWRlcygnY291bnQnKSkge1xuICAgICAgcmV0dXJuICdudW1iZXInOyAvLyBDYWxjdWxhdGlvbiBmdW5jdGlvbnNcbiAgICB9XG5cbiAgICByZXR1cm4gJ3Vua25vd24nO1xuICB9XG5cbiAgLyoqXG4gICAqIEluZmVyIGdlbmVyaWMgdHlwZSBmcm9tIGNvbnRleHRcbiAgICovXG4gIHByaXZhdGUgaW5mZXJHZW5lcmljVHlwZShjb250ZXh0OiBDbGFzc2lmaWNhdGlvbkNvbnRleHQpOiBzdHJpbmcge1xuICAgIGNvbnN0IHsgY29kZVNuaXBwZXQgfSA9IGNvbnRleHQ7XG5cbiAgICAvLyBDaGVjayBmb3IgY29tbW9uIGdlbmVyaWMgcGF0dGVybnNcbiAgICBpZiAoY29kZVNuaXBwZXQuaW5jbHVkZXMoJ0FycmF5PGFueT4nKSkge1xuICAgICAgcmV0dXJuICd1bmtub3duJztcbiAgICB9XG5cbiAgICBpZiAoY29kZVNuaXBwZXQuaW5jbHVkZXMoJ1Byb21pc2U8YW55PicpKSB7XG4gICAgICByZXR1cm4gJ3Vua25vd24nO1xuICAgIH1cblxuICAgIGlmIChjb2RlU25pcHBldC5pbmNsdWRlcygnTWFwPCcpIHx8IGNvZGVTbmlwcGV0LmluY2x1ZGVzKCdTZXQ8JykpIHtcbiAgICAgIHJldHVybiAndW5rbm93bic7XG4gICAgfVxuXG4gICAgLy8gRG9tYWluLXNwZWNpZmljIGdlbmVyaWNzXG4gICAgaWYgKGNvbnRleHQuZG9tYWluQ29udGV4dC5kb21haW4gPT09IENvZGVEb21haW4uQVNUUk9MT0dJQ0FMKSB7XG4gICAgICBpZiAoY29kZVNuaXBwZXQuaW5jbHVkZXMoJ1BsYW5ldGFyeVBvc2l0aW9uJykgfHwgY29kZVNuaXBwZXQuaW5jbHVkZXMoJ0VsZW1lbnRhbFByb3BlcnRpZXMnKSkge1xuICAgICAgICByZXR1cm4gJ3Vua25vd24nOyAvLyBLZWVwIGdlbmVyaWMgZm9yIGZsZXhpYmlsaXR5XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuICd1bmtub3duJztcbiAgfVxuXG4gIC8qKlxuICAgKiBJbmZlciBvYmplY3QgcHJvcGVydHkgdHlwZSBmcm9tIGNvbnRleHQgYW5kIHByb3BlcnR5IG5hbWVcbiAgICovXG4gIHByaXZhdGUgaW5mZXJPYmplY3RQcm9wZXJ0eVR5cGUoY29udGV4dDogQ2xhc3NpZmljYXRpb25Db250ZXh0LCBwcm9wZXJ0eU5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgeyBjb2RlU25pcHBldCwgc3Vycm91bmRpbmdMaW5lcyB9ID0gY29udGV4dDtcbiAgICBjb25zdCBwcm9wTG93ZXIgPSBwcm9wZXJ0eU5hbWUudG9Mb3dlckNhc2UoKTtcblxuICAgIC8vIENvbW1vbiBwcm9wZXJ0eSBwYXR0ZXJuc1xuICAgIGlmIChwcm9wTG93ZXIuaW5jbHVkZXMoJ2lkJykgfHwgcHJvcExvd2VyID09PSAna2V5Jykge1xuICAgICAgcmV0dXJuICdzdHJpbmcgfCBudW1iZXInO1xuICAgIH1cblxuICAgIGlmIChwcm9wTG93ZXIuaW5jbHVkZXMoJ25hbWUnKSB8fCBwcm9wTG93ZXIuaW5jbHVkZXMoJ3RpdGxlJykgfHwgcHJvcExvd2VyLmluY2x1ZGVzKCdkZXNjcmlwdGlvbicpKSB7XG4gICAgICByZXR1cm4gJ3N0cmluZyc7XG4gICAgfVxuXG4gICAgaWYgKHByb3BMb3dlci5pbmNsdWRlcygnY291bnQnKSB8fCBwcm9wTG93ZXIuaW5jbHVkZXMoJ2xlbmd0aCcpIHx8IHByb3BMb3dlci5pbmNsdWRlcygnc2l6ZScpKSB7XG4gICAgICByZXR1cm4gJ251bWJlcic7XG4gICAgfVxuXG4gICAgaWYgKHByb3BMb3dlci5pbmNsdWRlcygnZW5hYmxlZCcpIHx8IHByb3BMb3dlci5pbmNsdWRlcygnYWN0aXZlJykgfHwgcHJvcExvd2VyLmluY2x1ZGVzKCd2aXNpYmxlJykpIHtcbiAgICAgIHJldHVybiAnYm9vbGVhbic7XG4gICAgfVxuXG4gICAgaWYgKHByb3BMb3dlci5pbmNsdWRlcygnZGF0ZScpIHx8IHByb3BMb3dlci5pbmNsdWRlcygndGltZScpKSB7XG4gICAgICByZXR1cm4gJ0RhdGUgfCBzdHJpbmcnO1xuICAgIH1cblxuICAgIC8vIExvb2sgZm9yIGFzc2lnbm1lbnQgcGF0dGVybnNcbiAgICBjb25zdCBhbGxDb250ZXh0ID0gW2NvZGVTbmlwcGV0LCAuLi5zdXJyb3VuZGluZ0xpbmVzXS5qb2luKCcgJyk7XG4gICAgaWYgKGFsbENvbnRleHQuaW5jbHVkZXMoYCR7cHJvcGVydHlOYW1lfTogXCJgKSkge1xuICAgICAgcmV0dXJuICdzdHJpbmcnO1xuICAgIH1cbiAgICBpZiAoYWxsQ29udGV4dC5pbmNsdWRlcyhgJHtwcm9wZXJ0eU5hbWV9OiBcXGRgKSkge1xuICAgICAgcmV0dXJuICdudW1iZXInO1xuICAgIH1cblxuICAgIC8vIERvbWFpbi1zcGVjaWZpYyBpbmZlcmVuY2VcbiAgICBpZiAoY29udGV4dC5kb21haW5Db250ZXh0LmRvbWFpbiA9PT0gQ29kZURvbWFpbi5BU1RST0xPR0lDQUwpIHtcbiAgICAgIGlmIChwcm9wTG93ZXIuaW5jbHVkZXMoJ2VsZW1lbnQnKSB8fCBwcm9wTG93ZXIuaW5jbHVkZXMoJ2ZpcmUnKSB8fCBwcm9wTG93ZXIuaW5jbHVkZXMoJ3dhdGVyJykgfHxcbiAgICAgICAgICBwcm9wTG93ZXIuaW5jbHVkZXMoJ2VhcnRoJykgfHwgcHJvcExvd2VyLmluY2x1ZGVzKCdhaXInKSkge1xuICAgICAgICByZXR1cm4gJ251bWJlcic7XG4gICAgICB9XG4gICAgICBpZiAocHJvcExvd2VyLmluY2x1ZGVzKCdzaWduJykgfHwgcHJvcExvd2VyLmluY2x1ZGVzKCdwbGFuZXQnKSkge1xuICAgICAgICByZXR1cm4gJ3N0cmluZyc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuICd1bmtub3duJztcbiAgfVxuXG4gIC8qKlxuICAgKiBJbmZlciB2YXJpYWJsZSB0eXBlIGZyb20gY29udGV4dFxuICAgKi9cbiAgcHJpdmF0ZSBpbmZlclZhcmlhYmxlVHlwZShjb250ZXh0OiBDbGFzc2lmaWNhdGlvbkNvbnRleHQpOiBzdHJpbmcge1xuICAgIGNvbnN0IHsgY29kZVNuaXBwZXQgfSA9IGNvbnRleHQ7XG5cbiAgICAvLyBMb29rIGZvciBhc3NpZ25tZW50IHBhdHRlcm5zXG4gICAgaWYgKGNvZGVTbmlwcGV0LmluY2x1ZGVzKCc9IFwiJykgfHwgY29kZVNuaXBwZXQuaW5jbHVkZXMoXCI9ICdcIikpIHtcbiAgICAgIHJldHVybiAnc3RyaW5nJztcbiAgICB9XG5cbiAgICBpZiAoLz1cXHMqXFxkLy50ZXN0KGNvZGVTbmlwcGV0KSkge1xuICAgICAgcmV0dXJuICdudW1iZXInO1xuICAgIH1cblxuICAgIGlmIChjb2RlU25pcHBldC5pbmNsdWRlcygnPSB0cnVlJykgfHwgY29kZVNuaXBwZXQuaW5jbHVkZXMoJz0gZmFsc2UnKSkge1xuICAgICAgcmV0dXJuICdib29sZWFuJztcbiAgICB9XG5cbiAgICBpZiAoY29kZVNuaXBwZXQuaW5jbHVkZXMoJz0gWycpKSB7XG4gICAgICByZXR1cm4gJ3Vua25vd25bXSc7XG4gICAgfVxuXG4gICAgaWYgKGNvZGVTbmlwcGV0LmluY2x1ZGVzKCc9IHsnKSkge1xuICAgICAgcmV0dXJuICdvYmplY3QnO1xuICAgIH1cblxuICAgIGlmIChjb2RlU25pcHBldC5pbmNsdWRlcygnPSBuZXcgJykpIHtcbiAgICAgIC8vIFRyeSB0byBleHRyYWN0IGNvbnN0cnVjdG9yIG5hbWVcbiAgICAgIGNvbnN0IGNvbnN0cnVjdG9yTWF0Y2ggPSBjb2RlU25pcHBldC5tYXRjaCgvPSBuZXcgKFxcdyspLyk7XG4gICAgICBpZiAoY29uc3RydWN0b3JNYXRjaCkge1xuICAgICAgICByZXR1cm4gY29uc3RydWN0b3JNYXRjaFsxXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAnb2JqZWN0JztcbiAgICB9XG5cbiAgICByZXR1cm4gJ3Vua25vd24nO1xuICB9XG5cbiAgLy8gQ29udGV4dCBWYWxpZGF0aW9uIEhlbHBlciBNZXRob2RzXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGNvbnRleHQgaXMgaW4gZXJyb3IgaGFuZGxpbmcgKGNhdGNoIGJsb2NrcywgZXJyb3IgcGFyYW1ldGVycylcbiAgICovXG4gIHByaXZhdGUgaXNJbkVycm9ySGFuZGxpbmdDb250ZXh0KGNvbnRleHQ6IENsYXNzaWZpY2F0aW9uQ29udGV4dCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHsgY29kZVNuaXBwZXQsIHN1cnJvdW5kaW5nTGluZXMgfSA9IGNvbnRleHQ7XG4gICAgY29uc3QgYWxsQ29udGV4dCA9IFtjb2RlU25pcHBldCwgLi4uc3Vycm91bmRpbmdMaW5lc10uam9pbignICcpLnRvTG93ZXJDYXNlKCk7XG5cbiAgICByZXR1cm4gYWxsQ29udGV4dC5pbmNsdWRlcygnY2F0Y2gnKSB8fFxuICAgICAgICAgICBhbGxDb250ZXh0LmluY2x1ZGVzKCdlcnJvcicpIHx8XG4gICAgICAgICAgIGFsbENvbnRleHQuaW5jbHVkZXMoJ2V4Y2VwdGlvbicpIHx8XG4gICAgICAgICAgIGNvZGVTbmlwcGV0LnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2VycicpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGNvbnRleHQgaXMgZm9yIGV4dGVybmFsIEFQSSByZXNwb25zZXNcbiAgICovXG4gIHByaXZhdGUgaXNFeHRlcm5hbEFwaUNvbnRleHQoY29udGV4dDogQ2xhc3NpZmljYXRpb25Db250ZXh0KTogYm9vbGVhbiB7XG4gICAgY29uc3QgeyBjb2RlU25pcHBldCwgc3Vycm91bmRpbmdMaW5lcyB9ID0gY29udGV4dDtcbiAgICBjb25zdCBhbGxDb250ZXh0ID0gW2NvZGVTbmlwcGV0LCAuLi5zdXJyb3VuZGluZ0xpbmVzXS5qb2luKCcgJykudG9Mb3dlckNhc2UoKTtcblxuICAgIHJldHVybiBhbGxDb250ZXh0LmluY2x1ZGVzKCdhcGknKSB8fFxuICAgICAgICAgICBhbGxDb250ZXh0LmluY2x1ZGVzKCdyZXNwb25zZScpIHx8XG4gICAgICAgICAgIGFsbENvbnRleHQuaW5jbHVkZXMoJ2ZldGNoJykgfHxcbiAgICAgICAgICAgYWxsQ29udGV4dC5pbmNsdWRlcygnYXhpb3MnKSB8fFxuICAgICAgICAgICBhbGxDb250ZXh0LmluY2x1ZGVzKCdyZXF1ZXN0Jyk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgY29udGV4dCBpcyBmb3IgZHluYW1pYyBjb25maWd1cmF0aW9uXG4gICAqL1xuICBwcml2YXRlIGlzRHluYW1pY0NvbmZpZ0NvbnRleHQoY29udGV4dDogQ2xhc3NpZmljYXRpb25Db250ZXh0KTogYm9vbGVhbiB7XG4gICAgY29uc3QgeyBjb2RlU25pcHBldCwgc3Vycm91bmRpbmdMaW5lcyB9ID0gY29udGV4dDtcbiAgICBjb25zdCBhbGxDb250ZXh0ID0gW2NvZGVTbmlwcGV0LCAuLi5zdXJyb3VuZGluZ0xpbmVzXS5qb2luKCcgJykudG9Mb3dlckNhc2UoKTtcblxuICAgIHJldHVybiBhbGxDb250ZXh0LmluY2x1ZGVzKCdjb25maWcnKSB8fFxuICAgICAgICAgICBhbGxDb250ZXh0LmluY2x1ZGVzKCdzZXR0aW5ncycpIHx8XG4gICAgICAgICAgIGFsbENvbnRleHQuaW5jbHVkZXMoJ29wdGlvbnMnKSB8fFxuICAgICAgICAgICBjb250ZXh0LmRvbWFpbkNvbnRleHQuZG9tYWluID09PSBDb2RlRG9tYWluLkNBTVBBSUdOIHx8XG4gICAgICAgICAgIGNvbnRleHQuZG9tYWluQ29udGV4dC5kb21haW4gPT09IENvZGVEb21haW4uSU5URUxMSUdFTkNFO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGNvbnRleHQgaXMgZm9yIGV2ZW50IGhhbmRsZXJzXG4gICAqL1xuICBwcml2YXRlIGlzRXZlbnRIYW5kbGVyQ29udGV4dChjb250ZXh0OiBDbGFzc2lmaWNhdGlvbkNvbnRleHQpOiBib29sZWFuIHtcbiAgICBjb25zdCB7IGNvZGVTbmlwcGV0IH0gPSBjb250ZXh0O1xuXG4gICAgcmV0dXJuIGNvZGVTbmlwcGV0LmluY2x1ZGVzKCdvbkNsaWNrJykgfHxcbiAgICAgICAgICAgY29kZVNuaXBwZXQuaW5jbHVkZXMoJ29uQ2hhbmdlJykgfHxcbiAgICAgICAgICAgY29kZVNuaXBwZXQuaW5jbHVkZXMoJ29uU3VibWl0JykgfHxcbiAgICAgICAgICAgY29kZVNuaXBwZXQuaW5jbHVkZXMoJ2FkZEV2ZW50TGlzdGVuZXInKSB8fFxuICAgICAgICAgICBjb2RlU25pcHBldC5pbmNsdWRlcygnaGFuZGxlcicpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGNvbnRleHQgaXMgYSBmdW5jdGlvbiBwYXJhbWV0ZXJcbiAgICovXG4gIHByaXZhdGUgaXNGdW5jdGlvblBhcmFtZXRlckNvbnRleHQoY29udGV4dDogQ2xhc3NpZmljYXRpb25Db250ZXh0KTogYm9vbGVhbiB7XG4gICAgY29uc3QgeyBjb2RlU25pcHBldCB9ID0gY29udGV4dDtcblxuICAgIHJldHVybiBjb2RlU25pcHBldC5pbmNsdWRlcygnKCcpICYmXG4gICAgICAgICAgIGNvZGVTbmlwcGV0LmluY2x1ZGVzKCc6JykgJiZcbiAgICAgICAgICAgKGNvZGVTbmlwcGV0LmluY2x1ZGVzKCcpJykgfHwgY29kZVNuaXBwZXQuaW5jbHVkZXMoJywnKSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgY29udGV4dCBpcyBhIGZ1bmN0aW9uIHJldHVybiB0eXBlXG4gICAqL1xuICBwcml2YXRlIGlzRnVuY3Rpb25SZXR1cm5UeXBlQ29udGV4dChjb250ZXh0OiBDbGFzc2lmaWNhdGlvbkNvbnRleHQpOiBib29sZWFuIHtcbiAgICBjb25zdCB7IGNvZGVTbmlwcGV0IH0gPSBjb250ZXh0O1xuXG4gICAgcmV0dXJuIGNvZGVTbmlwcGV0LmluY2x1ZGVzKCcpOicpICYmXG4gICAgICAgICAgIChjb2RlU25pcHBldC5pbmNsdWRlcygneycpIHx8IGNvZGVTbmlwcGV0LmluY2x1ZGVzKCc7JykpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGNvbnRleHQgaXMgYW4gb2JqZWN0IHByb3BlcnR5XG4gICAqL1xuICBwcml2YXRlIGlzT2JqZWN0UHJvcGVydHlDb250ZXh0KGNvbnRleHQ6IENsYXNzaWZpY2F0aW9uQ29udGV4dCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHsgY29kZVNuaXBwZXQgfSA9IGNvbnRleHQ7XG5cbiAgICByZXR1cm4gY29kZVNuaXBwZXQuaW5jbHVkZXMoJzonKSAmJlxuICAgICAgICAgICAoY29kZVNuaXBwZXQuaW5jbHVkZXMoJywnKSB8fCBjb2RlU25pcHBldC5pbmNsdWRlcygnfScpIHx8IGNvZGVTbmlwcGV0LmluY2x1ZGVzKCc7JykpO1xuICB9XG5cbiAgLy8gRW5oYW5jZWQgU2FmZXR5IFZhbGlkYXRpb24gTWV0aG9kc1xuXG4gIC8qKlxuICAgKiBQZXJmb3JtIGNvbXByZWhlbnNpdmUgc2FmZXR5IHZhbGlkYXRpb24gZm9yIGEgcmVwbGFjZW1lbnRcbiAgICovXG4gIGFzeW5jIHZhbGlkYXRlUmVwbGFjZW1lbnRTYWZldHkoXG4gICAgcmVwbGFjZW1lbnQ6IFR5cGVSZXBsYWNlbWVudCxcbiAgICBjb250ZXh0OiBDbGFzc2lmaWNhdGlvbkNvbnRleHRcbiAgKTogUHJvbWlzZTxTYWZldHlWYWxpZGF0aW9uUmVzdWx0PiB7XG4gICAgcmV0dXJuIHRoaXMuc2FmZXR5VmFsaWRhdG9yLmNhbGN1bGF0ZVNhZmV0eVNjb3JlKHJlcGxhY2VtZW50LCBjb250ZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZSBidWlsZCBhZnRlciBhcHBseWluZyByZXBsYWNlbWVudHNcbiAgICovXG4gIGFzeW5jIHZhbGlkYXRlQnVpbGRTYWZldHkoXG4gICAgbW9kaWZpZWRGaWxlczogc3RyaW5nW10sXG4gICAgaW5jbHVkZVRlc3RzID0gZmFsc2VcbiAgKTogUHJvbWlzZTxCdWlsZFZhbGlkYXRpb25SZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5zYWZldHlWYWxpZGF0b3IudmFsaWRhdGVCdWlsZEFmdGVyQmF0Y2gobW9kaWZpZWRGaWxlcywgaW5jbHVkZVRlc3RzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZSByb2xsYmFjayBjYXBhYmlsaXR5IGZvciBnaXZlbiBmaWxlc1xuICAgKi9cbiAgYXN5bmMgdmFsaWRhdGVSb2xsYmFja1NhZmV0eShcbiAgICBvcmlnaW5hbEZpbGVzOiBNYXA8c3RyaW5nLCBzdHJpbmc+LFxuICAgIGJhY2t1cEZpbGVzOiBNYXA8c3RyaW5nLCBzdHJpbmc+XG4gICkge1xuICAgIHJldHVybiB0aGlzLnNhZmV0eVZhbGlkYXRvci52YWxpZGF0ZVJvbGxiYWNrQ2FwYWJpbGl0eShvcmlnaW5hbEZpbGVzLCBiYWNrdXBGaWxlcyk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGN1cnJlbnQgc2FmZXR5IHZhbGlkYXRvciBpbnN0YW5jZVxuICAgKi9cbiAgZ2V0U2FmZXR5VmFsaWRhdG9yKCk6IFNhZmV0eVZhbGlkYXRvciB7XG4gICAgcmV0dXJuIHRoaXMuc2FmZXR5VmFsaWRhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBzYWZldHkgdGhyZXNob2xkc1xuICAgKi9cbiAgdXBkYXRlU2FmZXR5VGhyZXNob2xkcyh0aHJlc2hvbGRzOiB7IG1pbmltdW1TYWZldHlTY29yZT86IG51bWJlciB9KSB7XG4gICAgaWYgKHRocmVzaG9sZHMubWluaW11bVNhZmV0eVNjb3JlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuc2FmZXR5VGhyZXNob2xkID0gdGhyZXNob2xkcy5taW5pbXVtU2FmZXR5U2NvcmU7XG4gICAgICB0aGlzLnNhZmV0eVZhbGlkYXRvci51cGRhdGVTYWZldHlUaHJlc2hvbGRzKHtcbiAgICAgICAgbWluaW11bVNhZmV0eVNjb3JlOiB0aHJlc2hvbGRzLm1pbmltdW1TYWZldHlTY29yZVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG4iXSwidmVyc2lvbiI6M30=