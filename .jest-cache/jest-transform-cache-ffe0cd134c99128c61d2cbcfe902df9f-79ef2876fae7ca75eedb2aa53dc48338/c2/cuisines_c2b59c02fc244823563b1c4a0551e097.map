{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/data/cuisines.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/data/cuisines.ts"],"sourcesContent":["// src/data/cuisines.ts\nimport { cuisinesMap as importedCuisinesMap, CUISINES } from './cuisines/index';\nimport { african } from './cuisines/african';\nimport { american } from './cuisines/american';\nimport { chinese } from './cuisines/chinese';\nimport { french } from './cuisines/french';\nimport { greek } from './cuisines/greek';\nimport { indian } from './cuisines/indian';\nimport { italian } from './cuisines/italian';\nimport { japanese } from './cuisines/japanese';\nimport { korean } from './cuisines/korean';\nimport { mexican } from './cuisines/mexican';\nimport { middleEastern } from './cuisines/middle-eastern';\nimport { thai } from './cuisines/thai';\nimport { vietnamese } from './cuisines/vietnamese';\nimport { russian } from './cuisines/russian';\n\n// Import types\nimport type { Recipe, ElementalProperties, CuisineType, Cuisine as AlchemyCuisine } from '@/types/alchemy';\n\n// Example recipe type for reference\nconst exampleRecipe: Recipe = {\n  id: \"example-recipe-001\",\n  name: \"Example Recipe\",\n  description: \"Template for recipe structure\",\n  cuisine: \"Any\",\n  ingredients: [\n    { name: \"ingredient\", amount: 100, unit: \"g\", category: \"category\", element: \"Earth\" }\n  ],\n  cookingMethod: \"baking\",\n  timeToMake: 30, // minutes\n  numberOfServings: 4,\n  elementalProperties: { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 }, // ← Pattern GG-4: Added missing elementalProperties\n  instructions: [\"Prepare ingredients\", \"Follow cooking method\"], // ← Pattern GG-4: Added missing instructions\n  nutrition: {\n    calories: 0,\n    protein: 0,\n    carbs: 0,\n    fat: 0,\n    vitamins: [],\n    minerals: []\n  },\n  season: [\"all\"],\n  mealType: [\"any\"]\n};\n\n// Helper function to adapt ElementalProperties from cuisine.ts to alchemy.ts format\nfunction adaptElementalProperties(props: unknown): ElementalProperties {\n  const propsData = props as any;\n  // If it already has the index signature, return as is\n  if (propsData && typeof propsData === 'object' && propsData.hasOwnProperty('Fire')) {\n    return propsData as ElementalProperties;\n  }\n  \n  // Convert to the format expected by alchemy.ts\n  return {\n    Fire: propsData?.Fire || 0,\n    Water: propsData?.Water || 0,\n    Earth: propsData?.Earth || 0,\n    Air: propsData?.Air || 0\n  };\n}\n\n// Helper function to adapt cuisines to the Cuisine interface format\nfunction adaptCuisine(cuisine: unknown): AlchemyCuisine {\n  const cuisineData = cuisine as any;\n  return {\n    ...cuisineData,\n    // Convert elementalProperties if present\n    elementalProperties: cuisineData.elementalProperties ? \n      adaptElementalProperties(cuisineData.elementalProperties) : undefined,\n    \n    // Convert elementalState if present\n    elementalState: cuisineData.elementalState ? \n      adaptElementalProperties(cuisineData.elementalState) : undefined\n  };\n}\n\n// Combine all cuisines\nexport const cuisines: Record<string, AlchemyCuisine> = {\n  american: adaptCuisine(american),\n  chinese: adaptCuisine(chinese),\n  french: adaptCuisine(french),\n  greek: adaptCuisine(greek),\n  indian: adaptCuisine(indian),\n  italian: adaptCuisine(italian),\n  japanese: adaptCuisine(japanese),\n  korean: adaptCuisine(korean),\n  mexican: adaptCuisine(mexican),\n  middleEastern: adaptCuisine(middleEastern),\n  thai: adaptCuisine(thai),\n  vietnamese: adaptCuisine(vietnamese),\n  african: adaptCuisine(african),\n  russian: adaptCuisine(russian)\n};\n\n// Type exports\nexport type { CuisineType };\nexport type Cuisine = typeof cuisines[keyof typeof cuisines];\n\n// Helper functions for accessing cuisine properties\nexport const getCuisineByName = (name: string): AlchemyCuisine | undefined => \n  cuisines[name.toLowerCase()];\n\nexport const getCuisinesByElement = (element: keyof ElementalProperties): AlchemyCuisine[] => \n  Object.values(cuisines).filter(cuisine => \n    (cuisine.elementalState?.[element] ?? 0) >= 0.3 || (cuisine.elementalProperties?.[element] ?? 0) >= 0.3\n  );\n\n// Re-export the cuisinesMap from the imported one\nexport const cuisinesMap = importedCuisinesMap;\n\n// Re-export CUISINES constant\nexport { CUISINES };\n\nexport default cuisines;\n  "],"version":3}