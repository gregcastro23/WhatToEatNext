{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/__tests__/integration/EndToEndCampaign.integration.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/__tests__/integration/EndToEndCampaign.integration.test.ts"],"sourcesContent":["/**\n * End-to-End Campaign Integration Tests\n * Perfect Codebase Campaign - Complete Campaign Workflow Testing\n */\n\nimport { CampaignController } from '../../CampaignController';\nimport { SafetyProtocol } from '../../SafetyProtocol';\nimport { ProgressTracker } from '../../ProgressTracker';\nimport {\n  CampaignConfig,\n  SafetySettings,\n  SafetyLevel,\n  PhaseStatus,\n  CorruptionSeverity,\n  RecoveryAction,\n  SafetyEventType,\n} from '../../../../types/campaign';\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\n\n// Mock dependencies\njest.mock('child_process');\njest.mock('fs');\n\nconst mockExecSync = execSync as jest.MockedFunction<typeof execSync>;\nconst mockFs = fs as jest.Mocked<typeof fs>;\n\ndescribe('End-to-End Campaign Integration Tests', () => {\n  let campaignController: CampaignController;\n  let safetyProtocol: SafetyProtocol;\n  let progressTracker: ProgressTracker;\n  let mockConfig: CampaignConfig;\n\n  beforeEach(() => {\n    // Setup comprehensive campaign configuration\n    const safetySettings: SafetySettings = {\n      maxFilesPerBatch: 25,\n      buildValidationFrequency: 5,\n      testValidationFrequency: 10,\n      corruptionDetectionEnabled: true,\n      automaticRollbackEnabled: true,\n      stashRetentionDays: 7,\n    };\n\n    mockConfig = {\n      phases: [\n        {\n          id: 'phase1',\n          name: 'TypeScript Error Elimination',\n          description: 'Eliminate all TypeScript compilation errors',\n          tools: [\n            {\n              scriptPath:\n                'scripts/typescript-fixes/fix-typescript-errors-enhanced-v3.js',\n              parameters: { maxFiles: 15, autoFix: true, validateSafety: true },\n              batchSize: 15,\n              safetyLevel: SafetyLevel.MAXIMUM,\n            },\n            {\n              scriptPath:\n                'scripts/typescript-fixes/fix-explicit-any-systematic.js',\n              parameters: { maxFiles: 25, autoFix: true },\n              batchSize: 25,\n              safetyLevel: SafetyLevel.HIGH,\n            },\n          ],\n          successCriteria: {\n            typeScriptErrors: 0,\n          },\n          safetyCheckpoints: [],\n        },\n        {\n          id: 'phase2',\n          name: 'Linting Excellence Achievement',\n          description: 'Eliminate all linting warnings',\n          tools: [\n            {\n              scriptPath:\n                'scripts/typescript-fixes/fix-unused-variables-enhanced.js',\n              parameters: { maxFiles: 20, autoFix: true },\n              batchSize: 20,\n              safetyLevel: SafetyLevel.HIGH,\n            },\n            {\n              scriptPath: 'scripts/lint-fixes/fix-console-statements-only.js',\n              parameters: { dryRun: false },\n              batchSize: 15,\n              safetyLevel: SafetyLevel.MEDIUM,\n            },\n          ],\n          successCriteria: {\n            lintingWarnings: 0,\n          },\n          safetyCheckpoints: [],\n        },\n        {\n          id: 'phase3',\n          name: 'Enterprise Intelligence Transformation',\n          description: 'Transform unused exports to enterprise systems',\n          tools: [\n            {\n              scriptPath: 'scripts/enterprise/transform-unused-exports.js',\n              parameters: { maxFiles: 30, generateIntelligence: true },\n              batchSize: 30,\n              safetyLevel: SafetyLevel.HIGH,\n            },\n          ],\n          successCriteria: {\n            enterpriseSystems: 200,\n          },\n          safetyCheckpoints: [],\n        },\n        {\n          id: 'phase4',\n          name: 'Performance Optimization',\n          description: 'Optimize build performance and maintain targets',\n          tools: [\n            {\n              scriptPath: 'scripts/performance/optimize-build.js',\n              parameters: { targetTime: 10, optimizeCache: true },\n              batchSize: 50,\n              safetyLevel: SafetyLevel.MEDIUM,\n            },\n          ],\n          successCriteria: {\n            buildTime: 10,\n          },\n          safetyCheckpoints: [],\n        },\n      ],\n      safetySettings,\n      progressTargets: {\n        typeScriptErrors: 0,\n        lintingWarnings: 0,\n        buildTime: 10,\n        enterpriseSystems: 200,\n      },\n      toolConfiguration: {\n        enhancedErrorFixer:\n          'scripts/typescript-fixes/fix-typescript-errors-enhanced-v3.js',\n        explicitAnyFixer:\n          'scripts/typescript-fixes/fix-explicit-any-systematic.js',\n        unusedVariablesFixer:\n          'scripts/typescript-fixes/fix-unused-variables-enhanced.js',\n        consoleStatementFixer:\n          'scripts/lint-fixes/fix-console-statements-only.js',\n      },\n    };\n\n    campaignController = new CampaignController(mockConfig);\n    safetyProtocol = new SafetyProtocol(safetySettings);\n    progressTracker = new ProgressTracker();\n\n    // Reset mocks\n    jest.clearAllMocks();\n    setupDefaultMocks();\n  });\n\n  function setupDefaultMocks() {\n    // Default successful git operations\n    mockExecSync.mockImplementation(command => {\n      const cmd = command.toString();\n\n      if (cmd.includes('git status --porcelain')) return '';\n      if (cmd.includes('git stash push')) return '';\n      if (cmd.includes('git stash list')) return 'stash@{0}: campaign-stash';\n      if (cmd.includes('git stash apply')) return '';\n      if (cmd.includes('git branch --show-current')) return 'main';\n      if (cmd.includes('yarn build')) return '';\n      if (cmd.includes('yarn test')) return 'Tests passed';\n\n      return '';\n    });\n\n    mockFs.existsSync.mockReturnValue(true);\n    mockFs.readFileSync.mockReturnValue('valid content');\n    mockFs.writeFileSync.mockImplementation(() => {});\n  }\n\n  describe('Complete Campaign Execution', () => {\n    it('should execute all phases in sequence successfully', async () => {\n      // Mock progressive improvement across phases\n      let tsErrors = 86;\n      let lintWarnings = 4506;\n      let enterpriseSystems = 0;\n      let buildTime = 12;\n\n      jest\n        .spyOn(progressTracker, 'getTypeScriptErrorCount')\n        .mockImplementation(async () => tsErrors);\n      jest\n        .spyOn(progressTracker, 'getLintingWarningCount')\n        .mockImplementation(async () => lintWarnings);\n      jest\n        .spyOn(progressTracker, 'getEnterpriseSystemCount')\n        .mockImplementation(async () => enterpriseSystems);\n      jest\n        .spyOn(progressTracker, 'getBuildTime')\n        .mockImplementation(async () => buildTime);\n\n      const phaseResults = [];\n\n      // Execute Phase 1: TypeScript Error Elimination\n      const phase1Result = await campaignController.executePhase(\n        mockConfig.phases[0]\n      );\n      tsErrors = 0; // Phase 1 eliminates TypeScript errors\n      phaseResults.push(phase1Result);\n\n      expect(phase1Result.success).toBe(true);\n      expect(phase1Result.phaseId).toBe('phase1');\n\n      // Execute Phase 2: Linting Excellence\n      const phase2Result = await campaignController.executePhase(\n        mockConfig.phases[1]\n      );\n      lintWarnings = 0; // Phase 2 eliminates linting warnings\n      phaseResults.push(phase2Result);\n\n      expect(phase2Result.success).toBe(true);\n      expect(phase2Result.phaseId).toBe('phase2');\n\n      // Execute Phase 3: Enterprise Intelligence\n      const phase3Result = await campaignController.executePhase(\n        mockConfig.phases[2]\n      );\n      enterpriseSystems = 200; // Phase 3 creates enterprise systems\n      phaseResults.push(phase3Result);\n\n      expect(phase3Result.success).toBe(true);\n      expect(phase3Result.phaseId).toBe('phase3');\n\n      // Execute Phase 4: Performance Optimization\n      const phase4Result = await campaignController.executePhase(\n        mockConfig.phases[3]\n      );\n      buildTime = 8.5; // Phase 4 optimizes build time\n      phaseResults.push(phase4Result);\n\n      expect(phase4Result.success).toBe(true);\n      expect(phase4Result.phaseId).toBe('phase4');\n\n      // Verify overall campaign success\n      expect(phaseResults.every(result => result.success)).toBe(true);\n      expect(phaseResults.length).toBe(4);\n    });\n\n    it('should maintain safety protocols throughout entire campaign', async () => {\n      const allSafetyEvents: any[] = [];\n\n      for (const phase of mockConfig.phases) {\n        const result = await campaignController.executePhase(phase);\n        allSafetyEvents.push(...result.safetyEvents);\n      }\n\n      // Verify safety events were recorded for each phase\n      expect(allSafetyEvents.length).toBeGreaterThan(0);\n\n      // Check that each phase has safety events\n      for (const phase of mockConfig.phases) {\n        expect(\n          allSafetyEvents.some(\n            event =>\n              event.description.includes(phase.name) ||\n              event.description.includes(phase.id)\n          )\n        ).toBe(true);\n      }\n    });\n\n    it('should track progress metrics throughout campaign', async () => {\n      // Mock progressive metrics improvement\n      const metricsHistory: any[] = [];\n\n      jest\n        .spyOn(progressTracker, 'getProgressMetrics')\n        .mockImplementation(async () => {\n          const metrics = {\n            typeScriptErrors: {\n              current: Math.max(0, 86 - metricsHistory.length * 20),\n              target: 0,\n              reduction: metricsHistory.length * 20,\n              percentage: Math.min(\n                100,\n                ((metricsHistory.length * 20) / 86) * 100\n              ),\n            },\n            lintingWarnings: {\n              current: Math.max(0, 4506 - metricsHistory.length * 1000),\n              target: 0,\n              reduction: metricsHistory.length * 1000,\n              percentage: Math.min(\n                100,\n                ((metricsHistory.length * 1000) / 4506) * 100\n              ),\n            },\n            buildPerformance: {\n              currentTime: Math.max(8, 12 - metricsHistory.length),\n              targetTime: 10,\n              cacheHitRate: 0.8,\n              memoryUsage: 45,\n            },\n            enterpriseSystems: {\n              current: metricsHistory.length * 50,\n              target: 200,\n              transformedExports: metricsHistory.length * 50,\n            },\n          };\n          metricsHistory.push(metrics);\n          return metrics;\n        });\n\n      // Execute all phases\n      for (const phase of mockConfig.phases) {\n        await campaignController.executePhase(phase);\n        await progressTracker.getProgressMetrics(); // Trigger metrics collection\n      }\n\n      expect(metricsHistory.length).toBeGreaterThan(0);\n\n      // Verify progressive improvement\n      const finalMetrics = metricsHistory[metricsHistory.length - 1];\n      expect(finalMetrics.typeScriptErrors.current).toBeLessThanOrEqual(86);\n      expect(finalMetrics.lintingWarnings.current).toBeLessThanOrEqual(4506);\n    });\n\n    it('should validate all milestones after campaign completion', async () => {\n      // Mock successful campaign completion\n      jest.spyOn(progressTracker, 'getProgressMetrics').mockResolvedValue({\n        typeScriptErrors: {\n          current: 0,\n          target: 0,\n          reduction: 86,\n          percentage: 100,\n        },\n        lintingWarnings: {\n          current: 0,\n          target: 0,\n          reduction: 4506,\n          percentage: 100,\n        },\n        buildPerformance: {\n          currentTime: 8.5,\n          targetTime: 10,\n          cacheHitRate: 0.85,\n          memoryUsage: 42,\n        },\n        enterpriseSystems: {\n          current: 200,\n          target: 200,\n          transformedExports: 200,\n        },\n      });\n\n      // Execute all phases\n      for (const phase of mockConfig.phases) {\n        await campaignController.executePhase(phase);\n      }\n\n      // Validate all milestones\n      const milestones = [\n        'zero-typescript-errors',\n        'zero-linting-warnings',\n        'build-time-under-10s',\n        'enterprise-systems-200',\n        'phase-1-complete',\n        'phase-2-complete',\n        'phase-3-complete',\n        'phase-4-complete',\n      ];\n\n      for (const milestone of milestones) {\n        const isValid = await progressTracker.validateMilestone(milestone);\n        expect(isValid).toBe(true);\n      }\n    });\n\n    it('should generate comprehensive final report', async () => {\n      // Mock successful campaign completion\n      jest.spyOn(progressTracker, 'getProgressMetrics').mockResolvedValue({\n        typeScriptErrors: {\n          current: 0,\n          target: 0,\n          reduction: 86,\n          percentage: 100,\n        },\n        lintingWarnings: {\n          current: 0,\n          target: 0,\n          reduction: 4506,\n          percentage: 100,\n        },\n        buildPerformance: {\n          currentTime: 8.5,\n          targetTime: 10,\n          cacheHitRate: 0.85,\n          memoryUsage: 42,\n        },\n        enterpriseSystems: {\n          current: 200,\n          target: 200,\n          transformedExports: 200,\n        },\n      });\n\n      // Execute all phases\n      for (const phase of mockConfig.phases) {\n        await campaignController.executePhase(phase);\n      }\n\n      const finalReport = await progressTracker.generateProgressReport();\n\n      expect(finalReport.campaignId).toBe('perfect-codebase-campaign');\n      expect(finalReport.overallProgress).toBe(100);\n      expect(finalReport.phases.length).toBe(2); // Default phases in progress tracker\n      expect(\n        finalReport.phases.every(\n          phase => phase.status === PhaseStatus.COMPLETED\n        )\n      ).toBe(true);\n    });\n  });\n\n  describe('Campaign Failure and Recovery Scenarios', () => {\n    it('should handle phase failure and trigger rollback', async () => {\n      const phase1 = mockConfig.phases[0];\n\n      // Mock tool execution failure\n      jest\n        .spyOn(campaignController as any, 'executeTool')\n        .mockRejectedValue(new Error('Critical tool failure'));\n\n      const result = await campaignController.executePhase(phase1);\n\n      expect(result.success).toBe(false);\n      expect(result.phaseId).toBe('phase1');\n      expect(\n        result.safetyEvents.some(\n          event => event.type === SafetyEventType.BUILD_FAILURE\n        )\n      ).toBe(true);\n    });\n\n    it('should handle corruption detection during campaign', async () => {\n      // Mock corruption detection\n      mockFs.readFileSync.mockReturnValue(`\n        function test() {\n        <<<<<<< HEAD\n          return 'conflict';\n        =======\n          return 'other';\n        >>>>>>> branch\n        }\n      `);\n\n      const corruptionReport = await safetyProtocol.detectCorruption([\n        'test-file.ts',\n      ]);\n\n      expect(corruptionReport.severity).toBe(CorruptionSeverity.CRITICAL);\n      expect(corruptionReport.recommendedAction).toBe(\n        RecoveryAction.EMERGENCY_RESTORE\n      );\n\n      // Verify emergency rollback would be triggered\n      if (corruptionReport.severity === CorruptionSeverity.CRITICAL) {\n        // Create a stash first for rollback\n        await safetyProtocol.createStash('Emergency stash');\n        await safetyProtocol.emergencyRollback();\n\n        expect(mockExecSync).toHaveBeenCalledWith(\n          expect.stringContaining('git stash apply'),\n          expect.any(Object)\n        );\n      }\n    });\n\n    it('should handle build failures during phase execution', async () => {\n      const phase1 = mockConfig.phases[0];\n\n      // Mock build failure\n      mockExecSync.mockImplementation(command => {\n        if (command.toString().includes('yarn build')) {\n          throw new Error('Build compilation failed');\n        }\n        return '';\n      });\n\n      jest.spyOn(progressTracker, 'getBuildTime').mockResolvedValue(-1);\n\n      const result = await campaignController.executePhase(phase1);\n\n      // Should handle gracefully\n      expect(result.phaseId).toBe('phase1');\n    });\n\n    it('should recover from partial phase failures', async () => {\n      const phase1 = mockConfig.phases[0];\n\n      // Mock partial failure - first tool fails, second succeeds\n      let toolCallCount = 0;\n      jest\n        .spyOn(campaignController as any, 'executeTool')\n        .mockImplementation(async () => {\n          toolCallCount++;\n          if (toolCallCount === 1) {\n            throw new Error('First tool failed');\n          }\n          return {\n            filesProcessed: ['file1.ts', 'file2.ts'],\n            changesApplied: 10,\n            success: true,\n          };\n        });\n\n      const result = await campaignController.executePhase(phase1);\n\n      // Should fail due to first tool failure\n      expect(result.success).toBe(false);\n      expect(result.phaseId).toBe('phase1');\n    });\n  });\n\n  describe('Performance and Scalability', () => {\n    it('should handle large file batches efficiently', async () => {\n      const phase1 = mockConfig.phases[0];\n\n      // Mock large file processing\n      const largeFileList = Array.from(\n        { length: 100 },\n        (_, i) => `file${i}.ts`\n      );\n\n      jest.spyOn(campaignController as any, 'executeTool').mockResolvedValue({\n        filesProcessed: largeFileList,\n        changesApplied: largeFileList.length * 2,\n        success: true,\n      });\n\n      const startTime = Date.now();\n      const result = await campaignController.executePhase(phase1);\n      const executionTime = Date.now() - startTime;\n\n      expect(result.success).toBe(true);\n      expect(result.filesProcessed).toBe(100);\n      expect(executionTime).toBeLessThan(10000); // Should complete within 10 seconds\n    });\n\n    it('should maintain memory usage within limits during campaign', async () => {\n      // Mock memory tracking\n      jest.spyOn(progressTracker, 'getMemoryUsage').mockResolvedValue(45); // 45MB\n\n      for (const phase of mockConfig.phases) {\n        await campaignController.executePhase(phase);\n\n        const memoryUsage = await progressTracker.getMemoryUsage();\n        expect(memoryUsage).toBeLessThan(50); // Should stay under 50MB\n      }\n    });\n\n    it('should handle concurrent safety operations', async () => {\n      // Create multiple stashes concurrently\n      const stashPromises = Array.from({ length: 5 }, (_, i) =>\n        safetyProtocol.createStash(`Concurrent stash ${i}`)\n      );\n\n      const stashIds = await Promise.all(stashPromises);\n\n      expect(stashIds.length).toBe(5);\n      expect(stashIds.every(id => typeof id === 'string')).toBe(true);\n\n      const stashes = await safetyProtocol.listStashes();\n      expect(stashes.length).toBe(5);\n    });\n  });\n\n  describe('Configuration and Customization', () => {\n    it('should support custom phase configurations', async () => {\n      const customPhase = {\n        id: 'custom-phase',\n        name: 'Custom Phase',\n        description: 'Custom phase for testing',\n        tools: [\n          {\n            scriptPath: 'scripts/custom/custom-script.js',\n            parameters: { customParam: true },\n            batchSize: 5,\n            safetyLevel: SafetyLevel.LOW,\n          },\n        ],\n        successCriteria: { typeScriptErrors: 10 },\n        safetyCheckpoints: [],\n      };\n\n      const result = await campaignController.executePhase(customPhase);\n\n      expect(result.phaseId).toBe('custom-phase');\n    });\n\n    it('should support custom safety settings', async () => {\n      const customSafetySettings: SafetySettings = {\n        maxFilesPerBatch: 50,\n        buildValidationFrequency: 10,\n        testValidationFrequency: 20,\n        corruptionDetectionEnabled: false,\n        automaticRollbackEnabled: false,\n        stashRetentionDays: 14,\n      };\n\n      const customSafetyProtocol = new SafetyProtocol(customSafetySettings);\n\n      // Verify custom settings are applied\n      expect((customSafetyProtocol as any).settings.maxFilesPerBatch).toBe(50);\n      expect((customSafetyProtocol as any).settings.stashRetentionDays).toBe(\n        14\n      );\n    });\n\n    it('should support custom success criteria', async () => {\n      const customPhase = {\n        ...mockConfig.phases[0],\n        successCriteria: {\n          typeScriptErrors: 5, // Allow 5 errors instead of 0\n          customValidation: async () => {\n            // Custom validation logic\n            return true;\n          },\n        },\n      };\n\n      // Mock 5 remaining TypeScript errors\n      jest.spyOn(progressTracker, 'getProgressMetrics').mockResolvedValue({\n        typeScriptErrors: {\n          current: 5,\n          target: 0,\n          reduction: 81,\n          percentage: 94,\n        },\n        lintingWarnings: {\n          current: 4506,\n          target: 0,\n          reduction: 0,\n          percentage: 0,\n        },\n        buildPerformance: {\n          currentTime: 8.5,\n          targetTime: 10,\n          cacheHitRate: 0.8,\n          memoryUsage: 45,\n        },\n        enterpriseSystems: { current: 0, target: 200, transformedExports: 0 },\n      });\n\n      const validation =\n        await campaignController.validatePhaseCompletion(customPhase);\n\n      expect(validation.success).toBe(true); // Should pass with 5 errors allowed\n    });\n  });\n\n  describe('Reporting and Analytics', () => {\n    it('should generate detailed execution analytics', async () => {\n      const executionMetrics: any[] = [];\n\n      for (const phase of mockConfig.phases) {\n        const startTime = Date.now();\n        const result = await campaignController.executePhase(phase);\n        const endTime = Date.now();\n\n        executionMetrics.push({\n          phaseId: phase.id,\n          phaseName: phase.name,\n          executionTime: endTime - startTime,\n          success: result.success,\n          filesProcessed: result.filesProcessed,\n          errorsFixed: result.errorsFixed,\n          safetyEventsCount: result.safetyEvents.length,\n        });\n      }\n\n      expect(executionMetrics.length).toBe(4);\n      expect(executionMetrics.every(metric => metric.executionTime > 0)).toBe(\n        true\n      );\n      expect(\n        executionMetrics.every(metric => typeof metric.success === 'boolean')\n      ).toBe(true);\n    });\n\n    it('should export comprehensive campaign metrics', async () => {\n      // Execute campaign\n      for (const phase of mockConfig.phases) {\n        await campaignController.executePhase(phase);\n      }\n\n      // Export metrics\n      const exportPath = 'test-campaign-metrics.json';\n      await progressTracker.exportMetrics(exportPath);\n\n      expect(mockFs.writeFileSync).toHaveBeenCalledWith(\n        exportPath,\n        expect.stringContaining('\"campaignId\": \"perfect-codebase-campaign\"'),\n        undefined\n      );\n    });\n\n    it('should track improvement trends over time', async () => {\n      // Mock progressive improvement\n      let improvementStep = 0;\n      jest\n        .spyOn(progressTracker, 'getProgressMetrics')\n        .mockImplementation(async () => {\n          improvementStep++;\n          return {\n            typeScriptErrors: {\n              current: Math.max(0, 86 - improvementStep * 20),\n              target: 0,\n              reduction: improvementStep * 20,\n              percentage: Math.min(100, ((improvementStep * 20) / 86) * 100),\n            },\n            lintingWarnings: {\n              current: Math.max(0, 4506 - improvementStep * 1000),\n              target: 0,\n              reduction: improvementStep * 1000,\n              percentage: Math.min(\n                100,\n                ((improvementStep * 1000) / 4506) * 100\n              ),\n            },\n            buildPerformance: {\n              currentTime: Math.max(8, 12 - improvementStep),\n              targetTime: 10,\n              cacheHitRate: 0.8,\n              memoryUsage: 45,\n            },\n            enterpriseSystems: {\n              current: improvementStep * 50,\n              target: 200,\n              transformedExports: improvementStep * 50,\n            },\n          };\n        });\n\n      // Execute phases and collect metrics\n      for (const phase of mockConfig.phases) {\n        await campaignController.executePhase(phase);\n        await progressTracker.getProgressMetrics();\n      }\n\n      const improvement = progressTracker.getMetricsImprovement();\n\n      expect(improvement.typeScriptErrorsReduced).toBeGreaterThan(0);\n      expect(improvement.lintingWarningsReduced).toBeGreaterThan(0);\n      expect(improvement.enterpriseSystemsAdded).toBeGreaterThan(0);\n    });\n  });\n});\n"],"version":3}