079ee8a3d58f6bd8283ac3542d44e201
"use strict";
/**
 * Campaign System Test Mocks
 *
 * Comprehensive mocking system for campaign operations during test execution.
 * Prevents actual build processes from running and provides test-safe alternatives.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.campaignTestIsolation = exports.CampaignTestIsolationManager = exports.MockSafetyProtocol = exports.MockProgressTracker = exports.MockCampaignController = void 0;
const campaign_1 = require("../../types/campaign");
/**
 * Mock Campaign Controller for test environments
 */
class MockCampaignController {
    config;
    currentPhase = null;
    safetyEvents = [];
    _isPaused = false;
    _isRunning = false;
    mockMetrics;
    mockStashes = new Map();
    constructor(config) {
        this.config = config;
        this.mockMetrics = this.createMockMetrics();
        this.initializeMockStashes();
    }
    /**
     * Mock phase execution - does not run actual scripts
     */
    async executePhase(phase) {
        if (this.isPaused()) {
            throw new Error('Campaign is paused');
        }
        this._isRunning = true;
        this.currentPhase = phase;
        const startTime = Date.now();
        // Add mock safety event
        this.addSafetyEvent({
            type: campaign_1.SafetyEventType.CHECKPOINT_CREATED,
            timestamp: new Date(),
            description: `Mock phase execution: ${phase.name}`,
            severity: campaign_1.SafetyEventSeverity.INFO,
            action: 'MOCK_PHASE_START'
        });
        // Simulate phase execution without running actual scripts
        const mockResult = await this.simulatePhaseExecution(phase);
        const executionTime = Date.now() - startTime;
        this._isRunning = false;
        return {
            phaseId: phase.id,
            success: mockResult.success,
            metricsImprovement: mockResult.metricsImprovement,
            filesProcessed: mockResult.filesProcessed,
            errorsFixed: mockResult.errorsFixed,
            warningsFixed: mockResult.warningsFixed,
            executionTime,
            safetyEvents: [...this.safetyEvents]
        };
    }
    /**
     * Mock phase validation - does not run actual validation
     */
    async validatePhaseCompletion(phase) {
        // Return mock validation result based on phase success criteria
        const mockErrors = [];
        const mockWarnings = [];
        // Simulate validation logic without actual checks
        if (phase.successCriteria.typeScriptErrors !== undefined) {
            if (this.mockMetrics.typeScriptErrors.current > phase.successCriteria.typeScriptErrors) {
                mockErrors.push(`Mock: TypeScript errors not met`);
            }
        }
        return {
            success: mockErrors.length === 0,
            errors: mockErrors,
            warnings: mockWarnings,
            metrics: this.mockMetrics
        };
    }
    /**
     * Mock safety checkpoint creation
     */
    async createSafetyCheckpoint(description) {
        const checkpointId = `mock_checkpoint_${Date.now()}`;
        // Create mock stash
        const mockStash = {
            id: checkpointId,
            description: `Mock stash: ${description}`,
            timestamp: new Date(),
            branch: 'mock-branch',
            ref: `stash@{${this.mockStashes.size}}`
        };
        this.mockStashes.set(checkpointId, mockStash);
        this.addSafetyEvent({
            type: campaign_1.SafetyEventType.CHECKPOINT_CREATED,
            timestamp: new Date(),
            description: `Mock checkpoint created: ${description}`,
            severity: campaign_1.SafetyEventSeverity.INFO,
            action: 'MOCK_CHECKPOINT_CREATE'
        });
        return checkpointId;
    }
    /**
     * Mock rollback to checkpoint
     */
    async rollbackToCheckpoint(checkpointId) {
        const stash = this.mockStashes.get(checkpointId);
        if (!stash) {
            throw new Error(`Mock stash not found: ${checkpointId}`);
        }
        this.addSafetyEvent({
            type: campaign_1.SafetyEventType.ROLLBACK_TRIGGERED,
            timestamp: new Date(),
            description: `Mock rollback to: ${checkpointId}`,
            severity: campaign_1.SafetyEventSeverity.WARNING,
            action: 'MOCK_ROLLBACK'
        });
        // Simulate rollback by resetting mock metrics
        this.mockMetrics = this.createMockMetrics();
    }
    /**
     * Get mock progress metrics without running actual measurements
     */
    async getProgressMetrics() {
        return { ...this.mockMetrics };
    }
    /**
     * Generate mock phase report
     */
    async generatePhaseReport(phase) {
        const validation = await this.validatePhaseCompletion(phase);
        return {
            phaseId: phase.id,
            phaseName: phase.name,
            startTime: new Date(),
            status: validation.success ? campaign_1.PhaseStatus.COMPLETED : campaign_1.PhaseStatus.IN_PROGRESS,
            metrics: this.mockMetrics,
            achievements: ['Mock achievement 1', 'Mock achievement 2'],
            issues: validation.errors,
            recommendations: ['Mock recommendation 1']
        };
    }
    /**
     * Pause campaign execution
     */
    pauseCampaign() {
        this._isPaused = true;
        this.addSafetyEvent({
            type: campaign_1.SafetyEventType.CHECKPOINT_CREATED,
            timestamp: new Date(),
            description: 'Campaign paused for test isolation',
            severity: campaign_1.SafetyEventSeverity.INFO,
            action: 'CAMPAIGN_PAUSED'
        });
    }
    /**
     * Resume campaign execution
     */
    resumeCampaign() {
        this._isPaused = false;
        this.addSafetyEvent({
            type: campaign_1.SafetyEventType.CHECKPOINT_CREATED,
            timestamp: new Date(),
            description: 'Campaign resumed after test isolation',
            severity: campaign_1.SafetyEventSeverity.INFO,
            action: 'CAMPAIGN_RESUMED'
        });
    }
    /**
     * Check if campaign is paused
     */
    isPaused() {
        return this._isPaused;
    }
    /**
     * Check if campaign is running
     */
    isRunning() {
        return this._isRunning;
    }
    /**
     * Get current phase
     */
    getCurrentPhase() {
        return this.currentPhase;
    }
    /**
     * Get safety events
     */
    getSafetyEvents() {
        return [...this.safetyEvents];
    }
    /**
     * Update mock metrics for testing
     */
    updateMockMetrics(updates) {
        this.mockMetrics = { ...this.mockMetrics, ...updates };
    }
    /**
     * Reset mock state
     */
    resetMockState() {
        this.safetyEvents = [];
        this._isPaused = false;
        this._isRunning = false;
        this.currentPhase = null;
        this.mockMetrics = this.createMockMetrics();
        this.mockStashes.clear();
        this.initializeMockStashes();
    }
    // Private helper methods
    async simulatePhaseExecution(_phase) {
        // Simulate processing without running actual scripts
        await new Promise(resolve => setTimeout(resolve, 100)); // Small delay for realism
        return {
            success: true,
            metricsImprovement: {
                typeScriptErrorsReduced: 5,
                lintingWarningsReduced: 10,
                buildTimeImproved: 0.5,
                enterpriseSystemsAdded: 2
            },
            filesProcessed: 15,
            errorsFixed: 5,
            warningsFixed: 10
        };
    }
    createMockMetrics() {
        return {
            typeScriptErrors: {
                current: 50,
                target: 0,
                reduction: 36,
                percentage: 42
            },
            lintingWarnings: {
                current: 2000,
                target: 0,
                reduction: 2506,
                percentage: 56
            },
            buildPerformance: {
                currentTime: 8.5,
                targetTime: 10,
                cacheHitRate: 0.8,
                memoryUsage: 45
            },
            enterpriseSystems: {
                current: 50,
                target: 200,
                transformedExports: 50
            }
        };
    }
    initializeMockStashes() {
        // Create some initial mock stashes
        const initialStashes = [
            {
                id: 'mock_stash_1',
                description: 'Initial mock stash',
                timestamp: new Date(Date.now() - 3600000),
                branch: 'mock-branch',
                ref: 'stash@{0}'
            },
            {
                id: 'mock_stash_2',
                description: 'Secondary mock stash',
                timestamp: new Date(Date.now() - 1800000),
                branch: 'mock-branch',
                ref: 'stash@{1}'
            }
        ];
        initialStashes.forEach(stash => {
            this.mockStashes.set(stash.id, stash);
        });
    }
    addSafetyEvent(event) {
        this.safetyEvents.push(event);
        // Keep only recent events to prevent memory issues
        if (this.safetyEvents.length > 100) {
            this.safetyEvents = this.safetyEvents.slice(-50);
        }
    }
}
exports.MockCampaignController = MockCampaignController;
/**
 * Mock Progress Tracker for test environments
 */
class MockProgressTracker {
    mockMetrics;
    metricsHistory = [];
    isTracking = false;
    constructor() {
        this.mockMetrics = this.createMockMetrics();
    }
    /**
     * Mock TypeScript error count - does not run actual tsc
     */
    async getTypeScriptErrorCount() {
        return this.mockMetrics.typeScriptErrors.current;
    }
    /**
     * Mock TypeScript error breakdown - does not run actual analysis
     */
    async getTypeScriptErrorBreakdown() {
        return {
            'TS2352': 15,
            'TS2339': 20,
            'TS2304': 10,
            'TS2345': 5
        };
    }
    /**
     * Mock linting warning count - does not run actual linting
     */
    async getLintingWarningCount() {
        return this.mockMetrics.lintingWarnings.current;
    }
    /**
     * Mock linting warning breakdown - does not run actual analysis
     */
    async getLintingWarningBreakdown() {
        return {
            '@typescript-eslint/no-explicit-any': 800,
            '@typescript-eslint/no-unused-vars': 600,
            'no-console': 400,
            'prefer-const': 200
        };
    }
    /**
     * Mock build time measurement - does not run actual build
     */
    async getBuildTime() {
        return this.mockMetrics.buildPerformance.currentTime;
    }
    /**
     * Mock enterprise system count - does not run actual analysis
     */
    async getEnterpriseSystemCount() {
        return this.mockMetrics.enterpriseSystems.current;
    }
    /**
     * Mock cache hit rate - returns simulated value
     */
    async getCacheHitRate() {
        return this.mockMetrics.buildPerformance.cacheHitRate;
    }
    /**
     * Mock memory usage - returns simulated value
     */
    async getMemoryUsage() {
        return this.mockMetrics.buildPerformance.memoryUsage;
    }
    /**
     * Get mock progress metrics without running actual measurements
     */
    async getProgressMetrics() {
        const metrics = { ...this.mockMetrics };
        // Add to history for tracking
        this.metricsHistory.push(metrics);
        // Keep only recent history to prevent memory issues
        if (this.metricsHistory.length > 50) {
            this.metricsHistory = this.metricsHistory.slice(-25);
        }
        return metrics;
    }
    /**
     * Generate mock progress report
     */
    async generateProgressReport() {
        const currentMetrics = await this.getProgressMetrics();
        const targetMetrics = this.createTargetMetrics();
        return {
            campaignId: 'mock-campaign',
            overallProgress: 65,
            phases: [
                {
                    phaseId: 'phase1',
                    phaseName: 'Mock Phase 1',
                    startTime: new Date(),
                    status: campaign_1.PhaseStatus.COMPLETED,
                    metrics: currentMetrics,
                    achievements: ['Mock achievement'],
                    issues: [],
                    recommendations: ['Mock recommendation']
                }
            ],
            currentMetrics,
            targetMetrics,
            estimatedCompletion: new Date(Date.now() + 3600000) // 1 hour from now
        };
    }
    /**
     * Start tracking (mock implementation)
     */
    startTracking() {
        this.isTracking = true;
    }
    /**
     * Stop tracking (mock implementation)
     */
    stopTracking() {
        this.isTracking = false;
    }
    /**
     * Check if tracking is active
     */
    isTrackingActive() {
        return this.isTracking;
    }
    /**
     * Update mock metrics for testing
     */
    updateMockMetrics(updates) {
        this.mockMetrics = { ...this.mockMetrics, ...updates };
    }
    /**
     * Reset mock state
     */
    resetMockState() {
        this.mockMetrics = this.createMockMetrics();
        this.metricsHistory = [];
        this.isTracking = false;
    }
    /**
     * Get metrics history
     */
    getMetricsHistory() {
        return [...this.metricsHistory];
    }
    // Private helper methods
    createMockMetrics() {
        return {
            typeScriptErrors: {
                current: 50,
                target: 0,
                reduction: 36,
                percentage: 42
            },
            lintingWarnings: {
                current: 2000,
                target: 0,
                reduction: 2506,
                percentage: 56
            },
            buildPerformance: {
                currentTime: 8.5,
                targetTime: 10,
                cacheHitRate: 0.8,
                memoryUsage: 45
            },
            enterpriseSystems: {
                current: 50,
                target: 200,
                transformedExports: 50
            }
        };
    }
    createTargetMetrics() {
        return {
            typeScriptErrors: {
                current: 0,
                target: 0,
                reduction: 86,
                percentage: 100
            },
            lintingWarnings: {
                current: 0,
                target: 0,
                reduction: 4506,
                percentage: 100
            },
            buildPerformance: {
                currentTime: 8,
                targetTime: 10,
                cacheHitRate: 0.8,
                memoryUsage: 45
            },
            enterpriseSystems: {
                current: 200,
                target: 200,
                transformedExports: 200
            }
        };
    }
}
exports.MockProgressTracker = MockProgressTracker;
/**
 * Mock Safety Protocol for test environments
 */
class MockSafetyProtocol {
    mockStashes = new Map();
    safetyEvents = [];
    stashCounter = 0;
    constructor() {
        this.initializeMockStashes();
    }
    /**
     * Mock stash creation - does not run actual git commands
     */
    async createStash(description, _phase) {
        this.stashCounter++;
        const stashId = `mock_stash_${this.stashCounter}_${Date.now()}`;
        const mockStash = {
            id: stashId,
            description: `Mock stash: ${description}`,
            timestamp: new Date(),
            branch: 'mock-branch',
            ref: `stash@{${this.stashCounter}}`
        };
        this.mockStashes.set(stashId, mockStash);
        this.addSafetyEvent({
            type: campaign_1.SafetyEventType.CHECKPOINT_CREATED,
            timestamp: new Date(),
            description: `Mock stash created: ${stashId}`,
            severity: campaign_1.SafetyEventSeverity.INFO,
            action: 'MOCK_STASH_CREATE'
        });
        return stashId;
    }
    /**
     * Mock stash application - does not run actual git commands
     */
    async applyStash(stashId, _validateAfter = true) {
        const stash = this.mockStashes.get(stashId);
        if (!stash) {
            throw new Error(`Mock stash not found: ${stashId}`);
        }
        this.addSafetyEvent({
            type: campaign_1.SafetyEventType.ROLLBACK_TRIGGERED,
            timestamp: new Date(),
            description: `Mock stash applied: ${stashId}`,
            severity: campaign_1.SafetyEventSeverity.WARNING,
            action: 'MOCK_STASH_APPLY'
        });
    }
    /**
     * Mock corruption detection - does not run actual file analysis
     */
    async detectCorruption(_files) {
        // Return mock corruption report
        return {
            detectedFiles: [],
            corruptionPatterns: [],
            severity: campaign_1.CorruptionSeverity.LOW,
            recommendedAction: campaign_1.RecoveryAction.CONTINUE
        };
    }
    /**
     * Mock git state validation - does not run actual git commands
     */
    async validateGitState() {
        return {
            success: true,
            errors: [],
            warnings: []
        };
    }
    /**
     * Mock emergency rollback - does not run actual git commands
     */
    async emergencyRollback() {
        this.addSafetyEvent({
            type: campaign_1.SafetyEventType.EMERGENCY_RECOVERY,
            timestamp: new Date(),
            description: 'Mock emergency rollback performed',
            severity: campaign_1.SafetyEventSeverity.WARNING,
            action: 'MOCK_EMERGENCY_ROLLBACK'
        });
    }
    /**
     * List mock stashes
     */
    async listStashes() {
        return Array.from(this.mockStashes.values());
    }
    /**
     * Get safety events
     */
    getSafetyEvents() {
        return [...this.safetyEvents];
    }
    /**
     * Reset mock state
     */
    resetMockState() {
        this.mockStashes.clear();
        this.safetyEvents = [];
        this.stashCounter = 0;
        this.initializeMockStashes();
    }
    // Private helper methods
    initializeMockStashes() {
        // Create some initial mock stashes
        const initialStashes = [
            {
                id: 'mock_initial_stash',
                description: 'Initial mock stash for testing',
                timestamp: new Date(Date.now() - 3600000),
                branch: 'mock-branch',
                ref: 'stash@{0}'
            }
        ];
        initialStashes.forEach(stash => {
            this.mockStashes.set(stash.id, stash);
        });
    }
    addSafetyEvent(event) {
        this.safetyEvents.push(event);
        // Keep only recent events to prevent memory issues
        if (this.safetyEvents.length > 100) {
            this.safetyEvents = this.safetyEvents.slice(-50);
        }
    }
}
exports.MockSafetyProtocol = MockSafetyProtocol;
/**
 * Campaign Test Isolation Manager
 *
 * Manages campaign system state during test execution to ensure
 * tests don't interfere with each other or trigger actual builds.
 */
class CampaignTestIsolationManager {
    static instance = null;
    mockController = null;
    mockTracker = null;
    mockSafety = null;
    originalProcessEnv = {};
    constructor() {
        this.setupTestEnvironment();
    }
    static getInstance() {
        if (!CampaignTestIsolationManager.instance) {
            CampaignTestIsolationManager.instance = new CampaignTestIsolationManager();
        }
        return CampaignTestIsolationManager.instance;
    }
    /**
     * Initialize mock campaign system for tests
     */
    initializeMockCampaignSystem(config) {
        const defaultConfig = {
            phases: [
                {
                    id: 'test-phase',
                    name: 'Test Phase',
                    description: 'Mock phase for testing',
                    tools: [],
                    successCriteria: { typeScriptErrors: 0 },
                    safetyCheckpoints: []
                }
            ],
            safetySettings: {
                maxFilesPerBatch: 10,
                buildValidationFrequency: 5,
                testValidationFrequency: 10,
                corruptionDetectionEnabled: true,
                automaticRollbackEnabled: true,
                stashRetentionDays: 7
            },
            progressTargets: {
                typeScriptErrors: 0,
                lintingWarnings: 0,
                buildTime: 10,
                enterpriseSystems: 200
            },
            toolConfiguration: {
                enhancedErrorFixer: 'mock-script',
                explicitAnyFixer: 'mock-script',
                unusedVariablesFixer: 'mock-script',
                consoleStatementFixer: 'mock-script'
            }
        };
        const fullConfig = { ...defaultConfig, ...config };
        this.mockController = new MockCampaignController(fullConfig);
        this.mockTracker = new MockProgressTracker();
        this.mockSafety = new MockSafetyProtocol();
        return {
            controller: this.mockController,
            tracker: this.mockTracker,
            safety: this.mockSafety
        };
    }
    /**
     * Pause all campaign operations for test isolation
     */
    pauseCampaignOperations() {
        if (this.mockController) {
            this.mockController.pauseCampaign();
        }
        if (this.mockTracker) {
            this.mockTracker.stopTracking();
        }
    }
    /**
     * Resume campaign operations after test isolation
     */
    resumeCampaignOperations() {
        if (this.mockController) {
            this.mockController.resumeCampaign();
        }
        if (this.mockTracker) {
            this.mockTracker.startTracking();
        }
    }
    /**
     * Reset all mock states for clean test isolation
     */
    resetAllMockStates() {
        if (this.mockController) {
            this.mockController.resetMockState();
        }
        if (this.mockTracker) {
            this.mockTracker.resetMockState();
        }
        if (this.mockSafety) {
            this.mockSafety.resetMockState();
        }
    }
    /**
     * Get current mock instances
     */
    getMockInstances() {
        return {
            controller: this.mockController,
            tracker: this.mockTracker,
            safety: this.mockSafety
        };
    }
    /**
     * Setup test environment to prevent actual campaign operations
     */
    setupTestEnvironment() {
        // Store original environment variables
        this.originalProcessEnv = { ...process.env };
        // Set test environment flags to prevent actual operations
        Object.defineProperty(process.env, 'NODE_ENV', { value: 'test', writable: true });
        process.env.CAMPAIGN_TEST_MODE = 'true';
        process.env.DISABLE_ACTUAL_BUILDS = 'true';
        process.env.DISABLE_GIT_OPERATIONS = 'true';
        process.env.MOCK_CAMPAIGN_SYSTEM = 'true';
    }
    /**
     * Restore original environment after tests
     */
    restoreEnvironment() {
        // Restore original environment variables
        Object.keys(process.env).forEach(key => {
            if (key.startsWith('CAMPAIGN_') || key.startsWith('DISABLE_') || key.startsWith('MOCK_')) {
                delete process.env[key];
            }
        });
        Object.entries(this.originalProcessEnv).forEach(([key, value]) => {
            if (value !== undefined) {
                process.env[key] = value;
            }
        });
    }
    /**
     * Cleanup and destroy singleton instance
     */
    static cleanup() {
        if (CampaignTestIsolationManager.instance) {
            CampaignTestIsolationManager.instance.restoreEnvironment();
            CampaignTestIsolationManager.instance = null;
        }
    }
}
exports.CampaignTestIsolationManager = CampaignTestIsolationManager;
// Export singleton instance for easy access
exports.campaignTestIsolation = CampaignTestIsolationManager.getInstance();
// Classes are already exported at their declarations above
//# sourceMappingURL=data:application/json;charset=utf-8;base64,