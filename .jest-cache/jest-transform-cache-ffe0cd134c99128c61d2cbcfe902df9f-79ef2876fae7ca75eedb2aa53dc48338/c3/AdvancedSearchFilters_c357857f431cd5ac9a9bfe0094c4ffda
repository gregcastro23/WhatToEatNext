022888695a6926bd56dbc227dc737ca9
"use strict";
'use client';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const lucide_react_1 = require("lucide-react");
// ========== CONSTANTS ==========
const DIETARY_RESTRICTIONS = [
    'vegetarian',
    'vegan',
    'gluten-free',
    'dairy-free',
    'nut-free',
    'low-carb',
    'keto',
    'paleo',
    'halal',
    'kosher'
];
const DIFFICULTY_LEVELS = [
    'beginner',
    'easy',
    'medium',
    'hard',
    'expert'
];
const COOKING_TIME_RANGES = [
    { label: 'Quick (< 30 min)', min: 0, max: 30 },
    { label: 'Medium (30-60 min)', min: 30, max: 60 },
    { label: 'Long (1-2 hours)', min: 60, max: 120 },
    { label: 'Extended (2+ hours)', min: 120, max: 480 }
];
const MEAL_TYPES = [
    'breakfast',
    'lunch',
    'dinner',
    'snack',
    'appetizer',
    'dessert',
    'beverage'
];
const SPICINESS_LEVELS = [
    'mild',
    'medium',
    'hot',
    'very-hot'
];
const DEFAULT_CUISINES = [
    'italian',
    'chinese',
    'japanese',
    'indian',
    'thai',
    'mexican',
    'french',
    'mediterranean',
    'middle-eastern',
    'korean',
    'vietnamese',
    'greek'
];
// ========== COMPONENT ==========
function AdvancedSearchFilters({ onFiltersChange, onSearch, availableCuisines = DEFAULT_CUISINES, className = '' }) {
    // ========== STATE ==========
    const [isExpanded, setIsExpanded] = (0, react_1.useState)(false);
    const [searchQuery, setSearchQuery] = (0, react_1.useState)('');
    const [filters, setFilters] = (0, react_1.useState)({
        query: '',
        dietaryRestrictions: [],
        difficultyLevel: [],
        cookingTime: { min: 0, max: 480 },
        cuisineTypes: [],
        mealTypes: [],
        spiciness: [],
        ingredients: []
    });
    // ========== MEMOIZED VALUES ==========
    const activeFilters = (0, react_1.useMemo)(() => {
        const chips = [];
        // Dietary restrictions
        filters.dietaryRestrictions.forEach(restriction => {
            chips.push({
                id: `dietary-${restriction}`,
                label: restriction.charAt(0).toUpperCase() + restriction.slice(1),
                category: 'Dietary',
                value: restriction,
                removable: true
            });
        });
        // Difficulty levels
        filters.difficultyLevel.forEach(level => {
            chips.push({
                id: `difficulty-${level}`,
                label: level.charAt(0).toUpperCase() + level.slice(1),
                category: 'Difficulty',
                value: level,
                removable: true
            });
        });
        // Cooking time
        if (filters.cookingTime.min > 0 || filters.cookingTime.max < 480) {
            chips.push({
                id: 'cooking-time',
                label: `${filters.cookingTime.min}-${filters.cookingTime.max} min`,
                category: 'Time',
                value: `${filters.cookingTime.min}-${filters.cookingTime.max}`,
                removable: true
            });
        }
        // Cuisine types
        filters.cuisineTypes.forEach(cuisine => {
            chips.push({
                id: `cuisine-${cuisine}`,
                label: cuisine.charAt(0).toUpperCase() + cuisine.slice(1),
                category: 'Cuisine',
                value: cuisine,
                removable: true
            });
        });
        // Meal types
        filters.mealTypes.forEach(meal => {
            chips.push({
                id: `meal-${meal}`,
                label: meal.charAt(0).toUpperCase() + meal.slice(1),
                category: 'Meal',
                value: meal,
                removable: true
            });
        });
        // Spiciness
        filters.spiciness.forEach(spice => {
            chips.push({
                id: `spice-${spice}`,
                label: spice.charAt(0).toUpperCase() + spice.slice(1),
                category: 'Spice',
                value: spice,
                removable: true
            });
        });
        return chips;
    }, [filters]);
    const hasActiveFilters = (0, react_1.useMemo)(() => {
        return activeFilters.length > 0 || searchQuery.trim().length > 0;
    }, [activeFilters, searchQuery]);
    // ========== EVENT HANDLERS ==========
    const handleSearchChange = (0, react_1.useCallback)((value) => {
        setSearchQuery(value);
        const updatedFilters = { ...filters, query: value };
        setFilters(updatedFilters);
        onFiltersChange(updatedFilters);
    }, [filters, onFiltersChange]);
    const handleSearchSubmit = (0, react_1.useCallback)((e) => {
        e.preventDefault();
        onSearch(searchQuery);
    }, [searchQuery, onSearch]);
    const handleFilterToggle = (0, react_1.useCallback)((category, value) => {
        const updatedFilters = { ...filters };
        if (Array.isArray(updatedFilters[category])) {
            const currentArray = updatedFilters[category];
            const index = currentArray.indexOf(value);
            if (index > -1) {
                currentArray.splice(index, 1);
            }
            else {
                currentArray.push(value);
            }
        }
        setFilters(updatedFilters);
        onFiltersChange(updatedFilters);
    }, [filters, onFiltersChange]);
    const handleTimeRangeChange = (0, react_1.useCallback)((min, max) => {
        const updatedFilters = {
            ...filters,
            cookingTime: { min, max }
        };
        setFilters(updatedFilters);
        onFiltersChange(updatedFilters);
    }, [filters, onFiltersChange]);
    const handleRemoveFilter = (0, react_1.useCallback)((chipId) => {
        const updatedFilters = { ...filters };
        if (chipId.startsWith('dietary-')) {
            const value = chipId.replace('dietary-', '');
            updatedFilters.dietaryRestrictions = updatedFilters.dietaryRestrictions.filter(r => r !== value);
        }
        else if (chipId.startsWith('difficulty-')) {
            const value = chipId.replace('difficulty-', '');
            updatedFilters.difficultyLevel = updatedFilters.difficultyLevel.filter(d => d !== value);
        }
        else if (chipId === 'cooking-time') {
            updatedFilters.cookingTime = { min: 0, max: 480 };
        }
        else if (chipId.startsWith('cuisine-')) {
            const value = chipId.replace('cuisine-', '');
            updatedFilters.cuisineTypes = updatedFilters.cuisineTypes.filter(c => c !== value);
        }
        else if (chipId.startsWith('meal-')) {
            const value = chipId.replace('meal-', '');
            updatedFilters.mealTypes = updatedFilters.mealTypes.filter(m => m !== value);
        }
        else if (chipId.startsWith('spice-')) {
            const value = chipId.replace('spice-', '');
            updatedFilters.spiciness = updatedFilters.spiciness.filter(s => s !== value);
        }
        setFilters(updatedFilters);
        onFiltersChange(updatedFilters);
    }, [filters, onFiltersChange]);
    const handleClearAllFilters = (0, react_1.useCallback)(() => {
        const clearedFilters = {
            query: '',
            dietaryRestrictions: [],
            difficultyLevel: [],
            cookingTime: { min: 0, max: 480 },
            cuisineTypes: [],
            mealTypes: [],
            spiciness: [],
            ingredients: []
        };
        setSearchQuery('');
        setFilters(clearedFilters);
        onFiltersChange(clearedFilters);
    }, [onFiltersChange]);
    // ========== RENDER HELPERS ==========
    const renderFilterSection = (title, icon, options, selectedValues, category) => ((0, jsx_runtime_1.jsxs)("div", { className: "mb-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2 mb-2", children: [icon, (0, jsx_runtime_1.jsx)("h4", { className: "text-sm font-medium text-gray-700", children: title })] }), (0, jsx_runtime_1.jsx)("div", { className: "flex flex-wrap gap-2", children: options.map(option => ((0, jsx_runtime_1.jsx)("button", { onClick: () => handleFilterToggle(category, option), className: `px-3 py-1 text-xs rounded-full border transition-colors ${selectedValues.includes(option)
                        ? 'bg-blue-100 border-blue-300 text-blue-700'
                        : 'bg-gray-50 border-gray-200 text-gray-600 hover:bg-gray-100'}`, children: option.charAt(0).toUpperCase() + option.slice(1) }, option))) })] }));
    const renderTimeRangeSection = () => ((0, jsx_runtime_1.jsxs)("div", { className: "mb-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2 mb-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Clock, { size: 16, className: "text-gray-500" }), (0, jsx_runtime_1.jsx)("h4", { className: "text-sm font-medium text-gray-700", children: "Cooking Time" })] }), (0, jsx_runtime_1.jsx)("div", { className: "flex flex-wrap gap-2", children: COOKING_TIME_RANGES.map(range => ((0, jsx_runtime_1.jsx)("button", { onClick: () => handleTimeRangeChange(range.min, range.max), className: `px-3 py-1 text-xs rounded-full border transition-colors ${filters.cookingTime.min === range.min && filters.cookingTime.max === range.max
                        ? 'bg-blue-100 border-blue-300 text-blue-700'
                        : 'bg-gray-50 border-gray-200 text-gray-600 hover:bg-gray-100'}`, children: range.label }, range.label))) })] }));
    // ========== RENDER ==========
    return ((0, jsx_runtime_1.jsxs)("div", { className: `bg-white rounded-lg border ${className}`, children: [(0, jsx_runtime_1.jsx)("form", { onSubmit: handleSearchSubmit, className: "p-4 border-b", children: (0, jsx_runtime_1.jsxs)("div", { className: "relative", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Search, { size: 20, className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" }), (0, jsx_runtime_1.jsx)("input", { type: "text", value: searchQuery, onChange: (e) => handleSearchChange(e.target.value), placeholder: "Search cuisines, recipes, or ingredients...", className: "w-full pl-10 pr-12 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" }), (0, jsx_runtime_1.jsx)("button", { type: "button", onClick: () => setIsExpanded(!isExpanded), className: `absolute right-3 top-1/2 transform -translate-y-1/2 p-1 rounded transition-colors ${isExpanded ? 'text-blue-600 bg-blue-50' : 'text-gray-400 hover:text-gray-600'}`, "aria-label": "Toggle filters", title: "Toggle filters", children: (0, jsx_runtime_1.jsx)(lucide_react_1.Filter, { size: 16 }) })] }) }), hasActiveFilters && ((0, jsx_runtime_1.jsxs)("div", { className: "p-4 border-b bg-gray-50", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between mb-2", children: [(0, jsx_runtime_1.jsx)("span", { className: "text-sm font-medium text-gray-700", children: "Active Filters" }), (0, jsx_runtime_1.jsx)("button", { onClick: handleClearAllFilters, className: "text-xs text-gray-500 hover:text-gray-700", children: "Clear All" })] }), (0, jsx_runtime_1.jsx)("div", { className: "flex flex-wrap gap-2", children: activeFilters.map(chip => ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-1 px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded-full", children: [(0, jsx_runtime_1.jsxs)("span", { className: "text-blue-500 text-xs", children: [chip.category, ":"] }), (0, jsx_runtime_1.jsx)("span", { children: chip.label }), chip.removable && ((0, jsx_runtime_1.jsx)("button", { onClick: () => handleRemoveFilter(chip.id), className: "ml-1 text-blue-500 hover:text-blue-700", children: (0, jsx_runtime_1.jsx)(lucide_react_1.X, { size: 12 }) }))] }, chip.id))) })] })), isExpanded && ((0, jsx_runtime_1.jsxs)("div", { className: "p-4 space-y-4", children: [renderFilterSection('Dietary Restrictions', (0, jsx_runtime_1.jsx)(lucide_react_1.Utensils, { size: 16, className: "text-green-500" }), DIETARY_RESTRICTIONS, filters.dietaryRestrictions, 'dietaryRestrictions'), renderFilterSection('Difficulty Level', (0, jsx_runtime_1.jsx)(lucide_react_1.ChefHat, { size: 16, className: "text-orange-500" }), DIFFICULTY_LEVELS, filters.difficultyLevel, 'difficultyLevel'), renderTimeRangeSection(), renderFilterSection('Cuisine Types', (0, jsx_runtime_1.jsx)(lucide_react_1.Globe, { size: 16, className: "text-purple-500" }), availableCuisines, filters.cuisineTypes, 'cuisineTypes'), renderFilterSection('Meal Types', (0, jsx_runtime_1.jsx)(lucide_react_1.Utensils, { size: 16, className: "text-blue-500" }), MEAL_TYPES, filters.mealTypes, 'mealTypes'), renderFilterSection('Spiciness Level', (0, jsx_runtime_1.jsx)("span", { className: "text-red-500", children: "\uD83C\uDF36\uFE0F" }), SPICINESS_LEVELS, filters.spiciness, 'spiciness')] }))] }));
}
exports.default = AdvancedSearchFilters;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,