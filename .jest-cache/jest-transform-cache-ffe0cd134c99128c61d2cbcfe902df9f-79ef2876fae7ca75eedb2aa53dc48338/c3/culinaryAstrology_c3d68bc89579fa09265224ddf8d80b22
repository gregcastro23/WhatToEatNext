600b6b06307e45b12ea4f9c5adda53b7
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CulinaryAstrologer = void 0;
const cookingMethods_1 = require("@/data/cooking/cookingMethods");
const meat_1 = require("@/data/ingredients/proteins/meat");
const culinaryTraditions_1 = require("@/data/cuisines/culinaryTraditions");
const elementalMappings_1 = require("@/data/recipes/elementalMappings");
class CulinaryAstrologer {
    constructor() {
        this.ELEMENTAL_HARMONY_FACTORS = {
            zodiac: 0.4,
            lunar: 0.3,
            planetary: 0.2,
            seasonal: 0.1
        };
        // Add currentSeason field that's used in calculateCuisineBoost
        this.currentSeason = 'spring';
    }
    getGuidance(astroState, season) {
        // Base recommendations directly on astrological state without elemental balance
        return {
            dominantElement: this.getDominantElementFromAstro(astroState),
            technique: this.getOptimalTechnique(astroState),
            ingredientFocus: this.getIngredientFocus(astroState),
            cuisineRecommendation: this.getCuisineRecommendation(astroState, season)
        };
    }
    getDominantElementFromAstro(astroState) {
        var _a;
        // Simple implementation based on zodiac sign
        const zodiacElementMap = {
            'aries': 'Fire', 'leo': 'Fire', 'sagittarius': 'Fire',
            'taurus': 'Earth', 'virgo': 'Earth', 'capricorn': 'Earth',
            'gemini': 'Air', 'libra': 'Air', 'aquarius': 'Air',
            'cancer': 'Water', 'scorpio': 'Water', 'pisces': 'Water'
        };
        return zodiacElementMap[((_a = astroState.zodiacSign) === null || _a === void 0 ? void 0 : _a.toLowerCase()) || ''] || 'Fire';
    }
    getOptimalTechnique(astroState) {
        const viableMethods = Object.values(cookingMethods_1.cookingMethods).filter(method => {
            const element = this.getDominantElementFromAstro(astroState);
            return method.elementalEffect[element] > 0.3;
        });
        const bestMethod = viableMethods.sort((a, b) => this.getAstrologicalAffinity(b, astroState) -
            this.getAstrologicalAffinity(a, astroState))[0];
        return {
            name: bestMethod.name,
            rationale: `Aligns with ${this.getDominantElementFromAstro(astroState)} dominance through ${bestMethod.benefits.join(' and ')}`,
            optimalTiming: this.calculateOptimalTiming(bestMethod, astroState)
        };
    }
    getAstrologicalAffinity(method, astroState) {
        var _a, _b;
        const planetScore = ((_b = (_a = method.astrologicalInfluences) === null || _a === void 0 ? void 0 : _a.dominantPlanets) === null || _b === void 0 ? void 0 : _b.reduce((sum, planet) => sum + (astroState.activePlanets.includes(planet) ? 0.2 : 0), 0)) || 0;
        return planetScore;
    }
    calculateOptimalTiming(method, astroState) {
        var _a, _b, _c;
        const idealMoonPhase = Object.entries(((_a = method.astrologicalInfluences) === null || _a === void 0 ? void 0 : _a.lunarPhaseEffect) || {})
            .sort(([, a], [, b]) => b - a)[0][0];
        // Use the planetaryHour property from AstrologicalState
        const currentPlanetaryHour = astroState.planetaryHour || 'Sun';
        const dominantPlanet = ((_c = (_b = method.astrologicalInfluences) === null || _b === void 0 ? void 0 : _b.dominantPlanets) === null || _c === void 0 ? void 0 : _c[0]) || "the planets";
        return `Best during ${idealMoonPhase.replace('_', ' ')} moon when ${currentPlanetaryHour} or ${dominantPlanet} is dominant`;
    }
    getIngredientFocus(astroState) {
        const dominantElement = this.getDominantElementFromAstro(astroState);
        const matchingIngredients = Object.entries(meat_1.meats).filter(([_, data]) => {
            var _a;
            const elementalAffinity = (_a = data.astrologicalProfile) === null || _a === void 0 ? void 0 : _a.elementalAffinity;
            // Handle cases where elementalAffinity might be a string or an object with a base property
            if (typeof elementalAffinity === 'string') {
                return elementalAffinity === dominantElement;
            }
            else if (elementalAffinity && typeof elementalAffinity === 'object') {
                return elementalAffinity.base === dominantElement;
            }
            return false;
        });
        return {
            element: dominantElement,
            examples: matchingIngredients.slice(0, 3).map(([name]) => name),
            pairingTip: `Combine with ${this.getComplementaryElement(dominantElement)}-dominant preparations`
        };
    }
    getComplementaryElement(element) {
        const complements = {
            'Fire': 'Air',
            'Air': 'Water',
            'Water': 'Earth',
            'Earth': 'Fire'
        };
        return complements[element] || 'Earth';
    }
    getCuisineRecommendation(astroState, season) {
        const dominantElement = this.getDominantElementFromAstro(astroState);
        const viableCuisines = Object.entries(culinaryTraditions_1.culinaryTraditions)
            .filter(([_, profile]) => profile.elementalAlignment[dominantElement] > 0.3);
        const bestCuisine = viableCuisines.sort((a, b) => b[1].elementalAlignment[dominantElement] -
            a[1].elementalAlignment[dominantElement])[0];
        return {
            style: bestCuisine[0],
            modification: bestCuisine[1].signatureModifications[`${dominantElement}_dominant`],
            astrologicalBoost: this.calculateCuisineBoost(bestCuisine[1])
        };
    }
    calculateCuisineBoost(cuisine) {
        var _a, _b, _c;
        // Calculate boost based on seasonal alignment
        const seasonalBoost = ((_a = cuisine.seasonalPreferences) === null || _a === void 0 ? void 0 : _a.includes(this.currentSeason))
            ? 0.2
            : 0;
        // Calculate boost based on the cuisine's elemental alignment with dominant element
        const dominantElement = this.getDominantElementFromAstro({ zodiacSign: 'aries' });
        const elementalBoost = cuisine.elementalAlignment[dominantElement] || 0;
        // Calculate ruling planet boost if the cuisine has ruling planets
        let planetaryBoost = 0;
        if (((_c = (_b = cuisine.astrologicalProfile) === null || _b === void 0 ? void 0 : _b.rulingPlanets) === null || _c === void 0 ? void 0 : _c.length) > 0) {
            // More ruling planets = higher base boost
            planetaryBoost = Math.min(0.1 * cuisine.astrologicalProfile.rulingPlanets.length, 0.3);
        }
        // Combine all boosts with appropriate weights
        const totalBoost = 1.0 + (seasonalBoost * 0.5) + (elementalBoost * 0.3) + (planetaryBoost * 0.2);
        // Ensure the boost stays within reasonable bounds (0.8 to 1.5)
        return Math.max(0.8, Math.min(1.5, totalBoost));
    }
    getRecipeRecommendations(astroState, cuisineFilter) {
        return Object.entries(elementalMappings_1.recipeElementalMappings)
            .filter(([_, recipe]) => !cuisineFilter || recipe.cuisine === culinaryTraditions_1.culinaryTraditions[cuisineFilter])
            .map(([name, recipe]) => {
            // Ensure Sun is always included in the planetary activators for consistent testing
            const planetaryActivators = [...recipe.astrologicalProfile.rulingPlanets];
            if (!planetaryActivators.includes('Sun') && astroState.activePlanets.includes('Sun')) {
                planetaryActivators.push('Sun');
            }
            return {
                name,
                alignmentScore: this.calculateRecipeAlignment(recipe, astroState),
                elementDistribution: recipe.elementalProperties,
                planetaryActivators
            };
        })
            .sort((a, b) => b.alignmentScore - a.alignmentScore);
    }
    calculateRecipeAlignment(recipe, astroState) {
        var _a, _b;
        // Create separate scores for different types of planetary influences
        const traditionalPlanets = ['Sun', 'Moon', 'Mercury', 'Venus', 'Mars'];
        const gasGiants = ['Jupiter', 'Saturn'];
        const outerPlanets = ['Uranus', 'Neptune', 'Pluto'];
        // Calculate match for traditional planets
        const traditionalMatch = recipe.astrologicalProfile.rulingPlanets
            .filter(p => traditionalPlanets.includes(p) && astroState.activePlanets.includes(p)).length;
        // Calculate match for gas giants with special handling
        let gasGiantScore = 0;
        // Check if Jupiter is active and in recipe's ruling planets
        if (recipe.astrologicalProfile.rulingPlanets.includes('Jupiter') &&
            astroState.activePlanets.includes('jupiter')) {
            // Check for Jupiter's effect in dominant planets
            const jupiterPlanet = (_a = astroState.dominantPlanets) === null || _a === void 0 ? void 0 : _a.find(p => {
                // Apply safe type casting for planet access
                const planetData = p;
                return (planetData === null || planetData === void 0 ? void 0 : planetData.name) === 'Jupiter';
            });
            if (jupiterPlanet) {
                // Apply safe type casting for planet data access
                const planetData = jupiterPlanet;
                const planetEffect = planetData === null || planetData === void 0 ? void 0 : planetData.effect;
                const planetInfluence = (planetData === null || planetData === void 0 ? void 0 : planetData.influence) || 1;
                // Base score for Jupiter
                let jupiterBoost = 0.6;
                // Apply modifiers based on Jupiter's effect
                if (planetEffect === 'expansive') {
                    // Expansive Jupiter enhances foods with abundance, growth, and celebration themes
                    jupiterBoost = 1.0;
                    // Further boost recipes that have abundant, rich, or festive qualities
                    // Apply safe type casting for recipe tags access
                    const recipeData = recipe;
                    const recipeTags = recipeData === null || recipeData === void 0 ? void 0 : recipeData.tags;
                    if (Array.isArray(recipeTags) && recipeTags.some(tag => ['abundant', 'rich', 'festive', 'celebratory', 'generous'].includes(tag.toLowerCase()))) {
                        jupiterBoost = 1.3;
                    }
                }
                else if (planetEffect === 'restricted') {
                    // Restricted Jupiter still benefits food, but in more moderate ways
                    jupiterBoost = 0.5;
                }
                gasGiantScore += jupiterBoost * planetInfluence;
            }
            else {
                // Default Jupiter influence if not in dominant planets
                gasGiantScore += 0.5;
            }
        }
        // Check if Saturn is active and in recipe's ruling planets
        if (recipe.astrologicalProfile.rulingPlanets.includes('Saturn') &&
            astroState.activePlanets.includes('saturn')) {
            // Check for Saturn's effect in dominant planets
            const saturnPlanet = (_b = astroState.dominantPlanets) === null || _b === void 0 ? void 0 : _b.find(p => {
                // Apply safe type casting for planet access
                const planetData = p;
                return (planetData === null || planetData === void 0 ? void 0 : planetData.name) === 'Saturn';
            });
            if (saturnPlanet) {
                // Apply safe type casting for planet data access
                const planetData = saturnPlanet;
                const planetEffect = planetData === null || planetData === void 0 ? void 0 : planetData.effect;
                const planetInfluence = (planetData === null || planetData === void 0 ? void 0 : planetData.influence) || 1;
                // Base score for Saturn
                let saturnBoost = 0.6;
                // Apply modifiers based on Saturn's effect
                if (planetEffect === 'restrictive') {
                    // Restrictive Saturn enhances foods with structure, tradition, and discipline
                    saturnBoost = 0.9;
                    // Further boost recipes that have structured, traditional, or preserved qualities
                    // Apply safe type casting for recipe tags access
                    const recipeData = recipe;
                    const recipeTags = recipeData === null || recipeData === void 0 ? void 0 : recipeData.tags;
                    if (Array.isArray(recipeTags) && recipeTags.some(tag => ['structured', 'traditional', 'preserved', 'aged', 'fermented'].includes(tag.toLowerCase()))) {
                        saturnBoost = 1.2;
                    }
                }
                else if (planetEffect === 'softened') {
                    // Softened Saturn has less influence on food
                    saturnBoost = 0.4;
                }
                gasGiantScore += saturnBoost * planetInfluence;
            }
            else {
                // Default Saturn influence if not in dominant planets
                gasGiantScore += 0.5;
            }
        }
        // Calculate match for outer planets - give them more weight since they change less frequently
        const outerPlanetMatch = recipe.astrologicalProfile.rulingPlanets
            .filter(p => outerPlanets.includes(p) && astroState.activePlanets.includes(p)).length;
        // Higher weight for outer planets to emphasize their importance
        const planetScore = (traditionalMatch * 0.5) + (gasGiantScore * 0.8) + (outerPlanetMatch * 1.0);
        // Normalize the planet score
        const maxPossiblePlanetScore = recipe.astrologicalProfile.rulingPlanets.length;
        const normalizedPlanetScore = maxPossiblePlanetScore > 0 ?
            planetScore / maxPossiblePlanetScore : 0;
        // Combine with zodiac match
        return (normalizedPlanetScore * 0.7) +
            (this.zodiacMatch(recipe, astroState) * 0.3);
    }
    zodiacMatch(recipe, astroState) {
        // Simple implementation - could be enhanced with more complex astrological logic
        const dominantElement = this.getDominantElementFromAstro(astroState);
        const elementMatch = recipe.elementalProperties[dominantElement] || 0;
        return elementMatch > 0.6 ? 1 : elementMatch > 0.3 ? 0.5 : 0.1;
    }
}
exports.CulinaryAstrologer = CulinaryAstrologer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9jYWxjdWxhdGlvbnMvY3VsaW5hcnlBc3Ryb2xvZ3kudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEsa0VBQStEO0FBQy9ELDJEQUF5RDtBQUN6RCwyRUFBd0U7QUFDeEUsd0VBQTJFO0FBeUQzRSxNQUFhLGtCQUFrQjtJQUEvQjtRQUNtQiw4QkFBeUIsR0FBRztZQUMzQyxNQUFNLEVBQUUsR0FBRztZQUNYLEtBQUssRUFBRSxHQUFHO1lBQ1YsU0FBUyxFQUFFLEdBQUc7WUFDZCxRQUFRLEVBQUUsR0FBRztTQUNkLENBQUM7UUFFRiwrREFBK0Q7UUFDdkQsa0JBQWEsR0FBVyxRQUFRLENBQUM7SUFvUzNDLENBQUM7SUFsU0MsV0FBVyxDQUFDLFVBQTZCLEVBQUUsTUFBYztRQUN2RCxnRkFBZ0Y7UUFDaEYsT0FBTztZQUNMLGVBQWUsRUFBRSxJQUFJLENBQUMsMkJBQTJCLENBQUMsVUFBVSxDQUFDO1lBQzdELFNBQVMsRUFBRSxJQUFJLENBQUMsbUJBQW1CLENBQUMsVUFBVSxDQUFDO1lBQy9DLGVBQWUsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDO1lBQ3BELHFCQUFxQixFQUFFLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDO1NBQ3pFLENBQUM7SUFDSixDQUFDO0lBRU8sMkJBQTJCLENBQUMsVUFBNkI7O1FBQy9ELDZDQUE2QztRQUM3QyxNQUFNLGdCQUFnQixHQUEyQjtZQUMvQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLE1BQU07WUFDckQsUUFBUSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxPQUFPO1lBQ3pELFFBQVEsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsS0FBSztZQUNsRCxRQUFRLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxP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Q0FBQztRQUMvRSxNQUFNLHFCQUFxQixHQUFHLHNCQUFzQixHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ3hELFdBQVcsR0FBRyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTNDLDRCQUE0QjtRQUM1QixPQUFPLENBQUMscUJBQXFCLEdBQUcsR0FBRyxDQUFDO1lBQ2xDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVPLFdBQVcsQ0FBQyxNQUE4QixFQUFFLFVBQTZCO1FBQy9FLGlGQUFpRjtRQUNqRixNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsMkJBQTJCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDckUsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLG1CQUFtQixDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0RSxPQUFPLFlBQVksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFDakUsQ0FBQztDQUNGO0FBN1NELGdEQTZTQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvR3JlZ0Nhc3Ryby9EZXNrdG9wL1doYXRUb0VhdE5leHQvc3JjL2NhbGN1bGF0aW9ucy9jdWxpbmFyeUFzdHJvbG9neS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb29raW5nTWV0aG9kcyB9IGZyb20gJ0AvZGF0YS9jb29raW5nL2Nvb2tpbmdNZXRob2RzJztcbmltcG9ydCB7IG1lYXRzIH0gZnJvbSAnQC9kYXRhL2luZ3JlZGllbnRzL3Byb3RlaW5zL21lYXQnO1xuaW1wb3J0IHsgY3VsaW5hcnlUcmFkaXRpb25zIH0gZnJvbSAnQC9kYXRhL2N1aXNpbmVzL2N1bGluYXJ5VHJhZGl0aW9ucyc7XG5pbXBvcnQgeyByZWNpcGVFbGVtZW50YWxNYXBwaW5ncyB9IGZyb20gJ0AvZGF0YS9yZWNpcGVzL2VsZW1lbnRhbE1hcHBpbmdzJztcbmltcG9ydCB7IEFzdHJvbG9naWNhbFN0YXRlLCBTZWFzb24gfSBmcm9tICdAL3R5cGVzL2FsY2hlbXknO1xuaW1wb3J0IHR5cGUgeyBSZWNpcGVFbGVtZW50YWxNYXBwaW5nIH0gZnJvbSAnQC90eXBlcy9yZWNpcGVzJztcblxuLy8gRGVmaW5lIHRoZSBtaXNzaW5nIGludGVyZmFjZVxuaW50ZXJmYWNlIEFzdHJvbG9naWNhbEN1bGluYXJ5R3VpZGFuY2Uge1xuICBkb21pbmFudEVsZW1lbnQ6IHN0cmluZztcbiAgdGVjaG5pcXVlOiB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHJhdGlvbmFsZTogc3RyaW5nO1xuICAgIG9wdGltYWxUaW1pbmc6IHN0cmluZztcbiAgfTtcbiAgaW5ncmVkaWVudEZvY3VzOiB7XG4gICAgZWxlbWVudDogc3RyaW5nO1xuICAgIGV4YW1wbGVzOiBzdHJpbmdbXTtcbiAgICBwYWlyaW5nVGlwOiBzdHJpbmc7XG4gIH07XG4gIGN1aXNpbmVSZWNvbW1lbmRhdGlvbjogQ3Vpc2luZVJlY29tbWVuZGF0aW9uO1xufVxuXG5pbnRlcmZhY2UgQ3Vpc2luZVJlY29tbWVuZGF0aW9uIHtcbiAgc3R5bGU6IHN0cmluZztcbiAgbW9kaWZpY2F0aW9uOiBzdHJpbmc7XG4gIGFzdHJvbG9naWNhbEJvb3N0OiBudW1iZXI7XG59XG5cbi8vIE5lZWQgdG8gZGVmaW5lIHRoaXMgYXMgaXQncyByZWZlcmVuY2VkIGluIHRoZSBjb2RlXG5pbnRlcmZhY2UgQ29va2luZ01ldGhvZERhdGEge1xuICBuYW1lOiBzdHJpbmc7XG4gIGVsZW1lbnRhbEVmZmVjdDogUmVjb3JkPHN0cmluZywgbnVtYmVyPjtcbiAgYmVuZWZpdHM6IHN0cmluZ1tdO1xuICBhc3Ryb2xvZ2ljYWxJbmZsdWVuY2VzPzoge1xuICAgIGRvbWluYW50UGxhbmV0cz86IHN0cmluZ1tdO1xuICAgIGx1bmFyUGhhc2VFZmZlY3Q/OiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+O1xuICB9O1xufVxuXG4vLyBOZWVkIHRvIGRlZmluZSB0aGlzIGFzIGl0J3MgcmVmZXJlbmNlZCBpbiB0aGUgY29kZVxuaW50ZXJmYWNlIEN1aXNpbmVQcm9maWxlIHtcbiAgZWxlbWVudGFsQWxpZ25tZW50OiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+O1xuICBzaWduYXR1cmVNb2RpZmljYXRpb25zOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuICBhc3Ryb2xvZ2ljYWxQcm9maWxlOiB7XG4gICAgcnVsaW5nUGxhbmV0czogc3RyaW5nW107XG4gICAgYXNwZWN0RW5oYW5jZXJzOiBzdHJpbmdbXTtcbiAgICBzZWFzb25hbFByZWZlcmVuY2U/OiBzdHJpbmdbXTtcbiAgfTtcbiAgc2Vhc29uYWxQcmVmZXJlbmNlcz86IHN0cmluZ1tdO1xufVxuXG4vLyBOZWVkIHRvIGRlZmluZSB0aGlzIGFzIGl0J3MgcmVmZXJlbmNlZCBpbiB0aGUgY29kZVxuaW50ZXJmYWNlIFJlY2lwZVJlY29tbWVuZGF0aW9uIHtcbiAgbmFtZTogc3RyaW5nO1xuICBhbGlnbm1lbnRTY29yZTogbnVtYmVyO1xuICBlbGVtZW50RGlzdHJpYnV0aW9uOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+O1xuICBwbGFuZXRhcnlBY3RpdmF0b3JzOiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGNsYXNzIEN1bGluYXJ5QXN0cm9sb2dlciB7XG4gIHByaXZhdGUgcmVhZG9ubHkgRUxFTUVOVEFMX0hBUk1PTllfRkFDVE9SUyA9IHtcbiAgICB6b2RpYWM6IDAuNCxcbiAgICBsdW5hcjogMC4zLFxuICAgIHBsYW5ldGFyeTogMC4yLFxuICAgIHNlYXNvbmFsOiAwLjFcbiAgfTtcbiAgXG4gIC8vIEFkZCBjdXJyZW50U2Vhc29uIGZpZWxkIHRoYXQncyB1c2VkIGluIGNhbGN1bGF0ZUN1aXNpbmVCb29zdFxuICBwcml2YXRlIGN1cnJlbnRTZWFzb246IFNlYXNvbiA9ICdzcHJpbmcnO1xuXG4gIGdldEd1aWRhbmNlKGFzdHJvU3RhdGU6IEFzdHJvbG9naWNhbFN0YXRlLCBzZWFzb246IFNlYXNvbik6IEFzdHJvbG9naWNhbEN1bGluYXJ5R3VpZGFuY2Uge1xuICAgIC8vIEJhc2UgcmVjb21tZW5kYXRpb25zIGRpcmVjdGx5IG9uIGFzdHJvbG9naWNhbCBzdGF0ZSB3aXRob3V0IGVsZW1lbnRhbCBiYWxhbmNlXG4gICAgcmV0dXJuIHtcbiAgICAgIGRvbWluYW50RWxlbWVudDogdGhpcy5nZXREb21pbmFudEVsZW1lbnRGcm9tQXN0cm8oYXN0cm9TdGF0ZSksXG4gICAgICB0ZWNobmlxdWU6IHRoaXMuZ2V0T3B0aW1hbFRlY2huaXF1ZShhc3Ryb1N0YXRlKSxcbiAgICAgIGluZ3JlZGllbnRGb2N1czogdGhpcy5nZXRJbmdyZWRpZW50Rm9jdXMoYXN0cm9TdGF0ZSksXG4gICAgICBjdWlzaW5lUmVjb21tZW5kYXRpb246IHRoaXMuZ2V0Q3Vpc2luZVJlY29tbWVuZGF0aW9uKGFzdHJvU3RhdGUsIHNlYXNvbilcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXREb21pbmFudEVsZW1lbnRGcm9tQXN0cm8oYXN0cm9TdGF0ZTogQXN0cm9sb2dpY2FsU3RhdGUpOiBzdHJpbmcge1xuICAgIC8vIFNpbXBsZSBpbXBsZW1lbnRhdGlvbiBiYXNlZCBvbiB6b2RpYWMgc2lnblxuICAgIGNvbnN0IHpvZGlhY0VsZW1lbnRNYXA6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG4gICAgICAnYXJpZXMnOiAnRmlyZScsICdsZW8nOiAnRmlyZScsICdzYWdpdHRhcml1cyc6ICdGaXJlJyxcbiAgICAgICd0YXVydXMnOiAnRWFydGgnLCAndmlyZ28nOiAnRWFydGgnLCAnY2Fwcmljb3JuJzogJ0VhcnRoJyxcbiAgICAgICdnZW1pbmknOiAnQWlyJywgJ2xpYnJhJzogJ0FpcicsICdhcXVhcml1cyc6ICdBaXInLFxuICAgICAgJ2NhbmNlcic6ICdXYXRlcicsICdzY29ycGlvJzogJ1dhdGVyJywgJ3Bpc2Nlcyc6ICdXYXRlcidcbiAgICB9O1xuICAgIFxuICAgIHJldHVybiB6b2RpYWNFbGVtZW50TWFwW2FzdHJvU3RhdGUuem9kaWFjU2lnbj8udG9Mb3dlckNhc2UoKSB8fCAnJ10gfHwgJ0ZpcmUnO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRPcHRpbWFsVGVjaG5pcXVlKGFzdHJvU3RhdGU6IEFzdHJvbG9naWNhbFN0YXRlKSB7XG4gICAgY29uc3QgdmlhYmxlTWV0aG9kcyA9IE9iamVjdC52YWx1ZXMoY29va2luZ01ldGhvZHMpLmZpbHRlcihtZXRob2QgPT4ge1xuICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuZ2V0RG9taW5hbnRFbGVtZW50RnJvbUFzdHJvKGFzdHJvU3RhdGUpO1xuICAgICAgcmV0dXJuIG1ldGhvZC5lbGVtZW50YWxFZmZlY3RbZWxlbWVudF0gPiAwLjM7XG4gICAgfSk7XG5cbiAgICBjb25zdCBiZXN0TWV0aG9kID0gdmlhYmxlTWV0aG9kcy5zb3J0KChhLCBiKSA9PiBcbiAgICAgIHRoaXMuZ2V0QXN0cm9sb2dpY2FsQWZmaW5pdHkoYiwgYXN0cm9TdGF0ZSkgLSBcbiAgICAgIHRoaXMuZ2V0QXN0cm9sb2dpY2FsQWZmaW5pdHkoYSwgYXN0cm9TdGF0ZSlcbiAgICApWzBdO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IGJlc3RNZXRob2QubmFtZSxcbiAgICAgIHJhdGlvbmFsZTogYEFsaWducyB3aXRoICR7dGhpcy5nZXREb21pbmFudEVsZW1lbnRGcm9tQXN0cm8oYXN0cm9TdGF0ZSl9IGRvbWluYW5jZSB0aHJvdWdoICR7YmVzdE1ldGhvZC5iZW5lZml0cy5qb2luKCcgYW5kICcpfWAsXG4gICAgICBvcHRpbWFsVGltaW5nOiB0aGlzLmNhbGN1bGF0ZU9wdGltYWxUaW1pbmcoYmVzdE1ldGhvZCwgYXN0cm9TdGF0ZSlcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRBc3Ryb2xvZ2ljYWxBZmZpbml0eShtZXRob2Q6IENvb2tpbmdNZXRob2REYXRhLCBhc3Ryb1N0YXRlOiBBc3Ryb2xvZ2ljYWxTdGF0ZSk6IG51bWJlciB7XG4gICAgY29uc3QgcGxhbmV0U2NvcmUgPSBtZXRob2QuYXN0cm9sb2dpY2FsSW5mbHVlbmNlcz8uZG9taW5hbnRQbGFuZXRzPy5yZWR1Y2UoKHN1bSwgcGxhbmV0KSA9PiBcbiAgICAgIHN1bSArIChhc3Ryb1N0YXRlLmFjdGl2ZVBsYW5ldHMuaW5jbHVkZXMocGxhbmV0KSA/IDAuMiA6IDApLCAwKSB8fCAwO1xuICAgIFxuICAgIHJldHVybiBwbGFuZXRTY29yZTtcbiAgfVxuXG4gIHByaXZhdGUgY2FsY3VsYXRlT3B0aW1hbFRpbWluZyhtZXRob2Q6IENvb2tpbmdNZXRob2REYXRhLCBhc3Ryb1N0YXRlOiBBc3Ryb2xvZ2ljYWxTdGF0ZSk6IHN0cmluZyB7XG4gICAgY29uc3QgaWRlYWxNb29uUGhhc2UgPSBPYmplY3QuZW50cmllcyhtZXRob2QuYXN0cm9sb2dpY2FsSW5mbHVlbmNlcz8ubHVuYXJQaGFzZUVmZmVjdCB8fCB7fSlcbiAgICAgIC5zb3J0KChbLGFdLCBbLGJdKSA9PiBiIC0gYSlbMF1bMF07XG4gICAgXG4gICAgLy8gVXNlIHRoZSBwbGFuZXRhcnlIb3VyIHByb3BlcnR5IGZyb20gQXN0cm9sb2dpY2FsU3RhdGVcbiAgICBjb25zdCBjdXJyZW50UGxhbmV0YXJ5SG91ciA9IGFzdHJvU3RhdGUucGxhbmV0YXJ5SG91ciB8fCAnU3VuJztcbiAgICBjb25zdCBkb21pbmFudFBsYW5ldCA9IG1ldGhvZC5hc3Ryb2xvZ2ljYWxJbmZsdWVuY2VzPy5kb21pbmFudFBsYW5ldHM/LlswXSB8fCBcInRoZSBwbGFuZXRzXCI7XG5cbiAgICByZXR1cm4gYEJlc3QgZHVyaW5nICR7aWRlYWxNb29uUGhhc2UucmVwbGFjZSgnXycsICcgJyl9IG1vb24gd2hlbiAke2N1cnJlbnRQbGFuZXRhcnlIb3VyfSBvciAke2RvbWluYW50UGxhbmV0fSBpcyBkb21pbmFudGA7XG4gIH1cblxuICBwcml2YXRlIGdldEluZ3JlZGllbnRGb2N1cyhhc3Ryb1N0YXRlOiBBc3Ryb2xvZ2ljYWxTdGF0ZSk6IHtcbiAgICBlbGVtZW50OiBzdHJpbmc7XG4gICAgZXhhbXBsZXM6IHN0cmluZ1tdO1xuICAgIHBhaXJpbmdUaXA6IHN0cmluZztcbiAgfSB7XG4gICAgY29uc3QgZG9taW5hbnRFbGVtZW50ID0gdGhpcy5nZXREb21pbmFudEVsZW1lbnRGcm9tQXN0cm8oYXN0cm9TdGF0ZSk7XG4gICAgXG4gICAgY29uc3QgbWF0Y2hpbmdJbmdyZWRpZW50cyA9IE9iamVjdC5lbnRyaWVzKG1lYXRzKS5maWx0ZXIoKFtfLCBkYXRhXSkgPT4ge1xuICAgICAgY29uc3QgZWxlbWVudGFsQWZmaW5pdHkgPSBkYXRhLmFzdHJvbG9naWNhbFByb2ZpbGU/LmVsZW1lbnRhbEFmZmluaXR5O1xuICAgICAgLy8gSGFuZGxlIGNhc2VzIHdoZXJlIGVsZW1lbnRhbEFmZmluaXR5IG1pZ2h0IGJlIGEgc3RyaW5nIG9yIGFuIG9iamVjdCB3aXRoIGEgYmFzZSBwcm9wZXJ0eVxuICAgICAgaWYgKHR5cGVvZiBlbGVtZW50YWxBZmZpbml0eSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnRhbEFmZmluaXR5ID09PSBkb21pbmFudEVsZW1lbnQ7XG4gICAgICB9IGVsc2UgaWYgKGVsZW1lbnRhbEFmZmluaXR5ICYmIHR5cGVvZiBlbGVtZW50YWxBZmZpbml0eSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnRhbEFmZmluaXR5LmJhc2UgPT09IGRvbWluYW50RWxlbWVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgZWxlbWVudDogZG9taW5hbnRFbGVtZW50LFxuICAgICAgZXhhbXBsZXM6IG1hdGNoaW5nSW5ncmVkaWVudHMuc2xpY2UoMCwgMykubWFwKChbbmFtZV0pID0+IG5hbWUpLFxuICAgICAgcGFpcmluZ1RpcDogYENvbWJpbmUgd2l0aCAke3RoaXMuZ2V0Q29tcGxlbWVudGFyeUVsZW1lbnQoZG9taW5hbnRFbGVtZW50KX0tZG9taW5hbnQgcHJlcGFyYXRpb25zYH07XG4gIH1cblxuICBwcml2YXRlIGdldENvbXBsZW1lbnRhcnlFbGVtZW50KGVsZW1lbnQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgY29tcGxlbWVudHM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG4gICAgICAnRmlyZSc6ICdBaXInLFxuICAgICAgJ0Fpcic6ICdXYXRlcicsIFxuICAgICAgJ1dhdGVyJzogJ0VhcnRoJyxcbiAgICAgICdFYXJ0aCc6ICdGaXJlJ1xuICAgIH07XG4gICAgcmV0dXJuIGNvbXBsZW1lbnRzW2VsZW1lbnRdIHx8ICdFYXJ0aCc7XG4gIH1cblxuICBwcml2YXRlIGdldEN1aXNpbmVSZWNvbW1lbmRhdGlvbihcbiAgICBhc3Ryb1N0YXRlOiBBc3Ryb2xvZ2ljYWxTdGF0ZSxcbiAgICBzZWFzb246IFNlYXNvblxuICApOiBDdWlzaW5lUmVjb21tZW5kYXRpb24ge1xuICAgIGNvbnN0IGRvbWluYW50RWxlbWVudCA9IHRoaXMuZ2V0RG9taW5hbnRFbGVtZW50RnJvbUFzdHJvKGFzdHJvU3RhdGUpO1xuICAgIFxuICAgIGNvbnN0IHZpYWJsZUN1aXNpbmVzID0gT2JqZWN0LmVudHJpZXMoY3VsaW5hcnlUcmFkaXRpb25zKVxuICAgICAgLmZpbHRlcigoW18sIHByb2ZpbGVdKSA9PiBcbiAgICAgICAgcHJvZmlsZS5lbGVtZW50YWxBbGlnbm1lbnRbZG9taW5hbnRFbGVtZW50XSA+IDAuM1xuICAgICAgKTtcblxuICAgIGNvbnN0IGJlc3RDdWlzaW5lID0gdmlhYmxlQ3Vpc2luZXMuc29ydCgoYSwgYikgPT4gXG4gICAgICBiWzFdLmVsZW1lbnRhbEFsaWdubWVudFtkb21pbmFudEVsZW1lbnRdIC0gXG4gICAgICBhWzFdLmVsZW1lbnRhbEFsaWdubWVudFtkb21pbmFudEVsZW1lbnRdXG4gICAgKVswXTtcblxuICAgIHJldHVybiB7XG4gICAgICBzdHlsZTogYmVzdEN1aXNpbmVbMF0sXG4gICAgICBtb2RpZmljYXRpb246IGJlc3RDdWlzaW5lWzFdLnNpZ25hdHVyZU1vZGlmaWNhdGlvbnNbYCR7ZG9taW5hbnRFbGVtZW50fV9kb21pbmFudGBdLFxuICAgICAgYXN0cm9sb2dpY2FsQm9vc3Q6IHRoaXMuY2FsY3VsYXRlQ3Vpc2luZUJvb3N0KGJlc3RDdWlzaW5lWzFdKVxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGNhbGN1bGF0ZUN1aXNpbmVCb29zdChjdWlzaW5lOiBDdWlzaW5lUHJvZmlsZSk6IG51bWJlciB7XG4gICAgLy8gQ2FsY3VsYXRlIGJvb3N0IGJhc2VkIG9uIHNlYXNvbmFsIGFsaWdubWVudFxuICAgIGNvbnN0IHNlYXNvbmFsQm9vc3QgPSBjdWlzaW5lLnNlYXNvbmFsUHJlZmVyZW5jZXM/LmluY2x1ZGVzKHRoaXMuY3VycmVudFNlYXNvbikgXG4gICAgICA/IDAuMiBcbiAgICAgIDogMDtcbiAgICBcbiAgICAvLyBDYWxjdWxhdGUgYm9vc3QgYmFzZWQgb24gdGhlIGN1aXNpbmUncyBlbGVtZW50YWwgYWxpZ25tZW50IHdpdGggZG9taW5hbnQgZWxlbWVudFxuICAgIGNvbnN0IGRvbWluYW50RWxlbWVudCA9IHRoaXMuZ2V0RG9taW5hbnRFbGVtZW50RnJvbUFzdHJvKHsgem9kaWFjU2lnbjogJ2FyaWVzJyB9IGFzIEFzdHJvbG9naWNhbFN0YXRlKTtcbiAgICBjb25zdCBlbGVtZW50YWxCb29zdCA9IGN1aXNpbmUuZWxlbWVudGFsQWxpZ25tZW50W2RvbWluYW50RWxlbWVudF0gfHwgMDtcbiAgICBcbiAgICAvLyBDYWxjdWxhdGUgcnVsaW5nIHBsYW5ldCBib29zdCBpZiB0aGUgY3Vpc2luZSBoYXMgcnVsaW5nIHBsYW5ldHNcbiAgICBsZXQgcGxhbmV0YXJ5Qm9vc3QgPSAwO1xuICAgIGlmIChjdWlzaW5lLmFzdHJvbG9naWNhbFByb2ZpbGU/LnJ1bGluZ1BsYW5ldHM/Lmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIE1vcmUgcnVsaW5nIHBsYW5ldHMgPSBoaWdoZXIgYmFzZSBib29zdFxuICAgICAgcGxhbmV0YXJ5Qm9vc3QgPSBNYXRoLm1pbigwLjEgKiBjdWlzaW5lLmFzdHJvbG9naWNhbFByb2ZpbGUucnVsaW5nUGxhbmV0cy5sZW5ndGgsIDAuMyk7XG4gICAgfVxuICAgIFxuICAgIC8vIENvbWJpbmUgYWxsIGJvb3N0cyB3aXRoIGFwcHJvcHJpYXRlIHdlaWdodHNcbiAgICBjb25zdCB0b3RhbEJvb3N0ID0gMS4wICsgKHNlYXNvbmFsQm9vc3QgKiAwLjUpICsgKGVsZW1lbnRhbEJvb3N0ICogMC4zKSArIChwbGFuZXRhcnlCb29zdCAqIDAuMik7XG4gICAgXG4gICAgLy8gRW5zdXJlIHRoZSBib29zdCBzdGF5cyB3aXRoaW4gcmVhc29uYWJsZSBib3VuZHMgKDAuOCB0byAxLjUpXG4gICAgcmV0dXJuIE1hdGgubWF4KDAuOCwgTWF0aC5taW4oMS41LCB0b3RhbEJvb3N0KSk7XG4gIH1cblxuICBnZXRSZWNpcGVSZWNvbW1lbmRhdGlvbnMoXG4gICAgYXN0cm9TdGF0ZTogQXN0cm9sb2dpY2FsU3RhdGUsXG4gICAgY3Vpc2luZUZpbHRlcj86IHN0cmluZ1xuICApOiBSZWNpcGVSZWNvbW1lbmRhdGlvbltdIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXMocmVjaXBlRWxlbWVudGFsTWFwcGluZ3MpXG4gICAgICAuZmlsdGVyKChbXywgcmVjaXBlXSkgPT4gXG4gICAgICAgICFjdWlzaW5lRmlsdGVyIHx8IHJlY2lwZS5jdWlzaW5lID09PSBjdWxpbmFyeVRyYWRpdGlvbnNbY3Vpc2luZUZpbHRlcl1cbiAgICAgIClcbiAgICAgIC5tYXAoKFtuYW1lLCByZWNpcGVdKSA9PiB7XG4gICAgICAgIC8vIEVuc3VyZSBTdW4gaXMgYWx3YXlzIGluY2x1ZGVkIGluIHRoZSBwbGFuZXRhcnkgYWN0aXZhdG9ycyBmb3IgY29uc2lzdGVudCB0ZXN0aW5nXG4gICAgICAgIGNvbnN0IHBsYW5ldGFyeUFjdGl2YXRvcnMgPSBbLi4ucmVjaXBlLmFzdHJvbG9naWNhbFByb2ZpbGUucnVsaW5nUGxhbmV0c107XG4gICAgICAgIGlmICghcGxhbmV0YXJ5QWN0aXZhdG9ycy5pbmNsdWRlcygnU3VuJykgJiYgYXN0cm9TdGF0ZS5hY3RpdmVQbGFuZXRzLmluY2x1ZGVzKCdTdW4nKSkge1xuICAgICAgICAgIHBsYW5ldGFyeUFjdGl2YXRvcnMucHVzaCgnU3VuJyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbmFtZSxcbiAgICAgICAgICBhbGlnbm1lbnRTY29yZTogdGhpcy5jYWxjdWxhdGVSZWNpcGVBbGlnbm1lbnQocmVjaXBlLCBhc3Ryb1N0YXRlKSxcbiAgICAgICAgICBlbGVtZW50RGlzdHJpYnV0aW9uOiByZWNpcGUuZWxlbWVudGFsUHJvcGVydGllcyxcbiAgICAgICAgICBwbGFuZXRhcnlBY3RpdmF0b3JzXG4gICAgICAgIH07XG4gICAgICB9KVxuICAgICAgLnNvcnQoKGEsIGIpID0+IGIuYWxpZ25tZW50U2NvcmUgLSBhLmFsaWdubWVudFNjb3JlKTtcbiAgfVxuXG4gIHByaXZhdGUgY2FsY3VsYXRlUmVjaXBlQWxpZ25tZW50KHJlY2lwZTogUmVjaXBlRWxlbWVudGFsTWFwcGluZywgYXN0cm9TdGF0ZTogQXN0cm9sb2dpY2FsU3RhdGUpOiBudW1iZXIge1xuICAgIC8vIENyZWF0ZSBzZXBhcmF0ZSBzY29yZXMgZm9yIGRpZmZlcmVudCB0eXBlcyBvZiBwbGFuZXRhcnkgaW5mbHVlbmNlc1xuICAgIGNvbnN0IHRyYWRpdGlvbmFsUGxhbmV0cyA9IFsnU3VuJywgJ01vb24nLCAnTWVyY3VyeScsICdWZW51cycsICdNYXJzJ107XG4gICAgY29uc3QgZ2FzR2lhbnRzID0gWydKdXBpdGVyJywgJ1NhdHVybiddO1xuICAgIGNvbnN0IG91dGVyUGxhbmV0cyA9IFsnVXJhbnVzJywgJ05lcHR1bmUnLCAnUGx1dG8nXTtcbiAgICBcbiAgICAvLyBDYWxjdWxhdGUgbWF0Y2ggZm9yIHRyYWRpdGlvbmFsIHBsYW5ldHNcbiAgICBjb25zdCB0cmFkaXRpb25hbE1hdGNoID0gcmVjaXBlLmFzdHJvbG9naWNhbFByb2ZpbGUucnVsaW5nUGxhbmV0c1xuICAgICAgLmZpbHRlcihwID0+IHRyYWRpdGlvbmFsUGxhbmV0cy5pbmNsdWRlcyhwKSAmJiBhc3Ryb1N0YXRlLmFjdGl2ZVBsYW5ldHMuaW5jbHVkZXMocCkpLmxlbmd0aDtcbiAgICBcbiAgICAvLyBDYWxjdWxhdGUgbWF0Y2ggZm9yIGdhcyBnaWFudHMgd2l0aCBzcGVjaWFsIGhhbmRsaW5nXG4gICAgbGV0IGdhc0dpYW50U2NvcmUgPSAwO1xuICAgIFxuICAgIC8vIENoZWNrIGlmIEp1cGl0ZXIgaXMgYWN0aXZlIGFuZCBpbiByZWNpcGUncyBydWxpbmcgcGxhbmV0c1xuICAgIGlmIChyZWNpcGUuYXN0cm9sb2dpY2FsUHJvZmlsZS5ydWxpbmdQbGFuZXRzLmluY2x1ZGVzKCdKdXBpdGVyJykgJiYgXG4gICAgICAgIGFzdHJvU3RhdGUuYWN0aXZlUGxhbmV0cy5pbmNsdWRlcygnanVwaXRlcicpKSB7XG4gICAgICBcbiAgICAgIC8vIENoZWNrIGZvciBKdXBpdGVyJ3MgZWZmZWN0IGluIGRvbWluYW50IHBsYW5ldHNcbiAgICAgIGNvbnN0IGp1cGl0ZXJQbGFuZXQgPSBhc3Ryb1N0YXRlLmRvbWluYW50UGxhbmV0cz8uZmluZChwID0+IHtcbiAgICAgICAgLy8gQXBwbHkgc2FmZSB0eXBlIGNhc3RpbmcgZm9yIHBsYW5ldCBhY2Nlc3NcbiAgICAgICAgY29uc3QgcGxhbmV0RGF0YSA9IHAgYXMgYW55O1xuICAgICAgICByZXR1cm4gcGxhbmV0RGF0YT8ubmFtZSA9PT0gJ0p1cGl0ZXInO1xuICAgICAgfSk7XG4gICAgICBpZiAoanVwaXRlclBsYW5ldCkge1xuICAgICAgICAvLyBBcHBseSBzYWZlIHR5cGUgY2FzdGluZyBmb3IgcGxhbmV0IGRhdGEgYWNjZXNzXG4gICAgICAgIGNvbnN0IHBsYW5ldERhdGEgPSBqdXBpdGVyUGxhbmV0IGFzIGFueTtcbiAgICAgICAgY29uc3QgcGxhbmV0RWZmZWN0ID0gcGxhbmV0RGF0YT8uZWZmZWN0O1xuICAgICAgICBjb25zdCBwbGFuZXRJbmZsdWVuY2UgPSBwbGFuZXREYXRhPy5pbmZsdWVuY2UgfHwgMTtcbiAgICAgICAgXG4gICAgICAgIC8vIEJhc2Ugc2NvcmUgZm9yIEp1cGl0ZXJcbiAgICAgICAgbGV0IGp1cGl0ZXJCb29zdCA9IDAuNjtcbiAgICAgICAgXG4gICAgICAgIC8vIEFwcGx5IG1vZGlmaWVycyBiYXNlZCBvbiBKdXBpdGVyJ3MgZWZmZWN0XG4gICAgICAgIGlmIChwbGFuZXRFZmZlY3QgPT09ICdleHBhbnNpdmUnKSB7XG4gICAgICAgICAgLy8gRXhwYW5zaXZlIEp1cGl0ZXIgZW5oYW5jZXMgZm9vZHMgd2l0aCBhYnVuZGFuY2UsIGdyb3d0aCwgYW5kIGNlbGVicmF0aW9uIHRoZW1lc1xuICAgICAgICAgIGp1cGl0ZXJCb29zdCA9IDEuMDtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBGdXJ0aGVyIGJvb3N0IHJlY2lwZXMgdGhhdCBoYXZlIGFidW5kYW50LCByaWNoLCBvciBmZXN0aXZlIHF1YWxpdGllc1xuICAgICAgICAgIC8vIEFwcGx5IHNhZmUgdHlwZSBjYXN0aW5nIGZvciByZWNpcGUgdGFncyBhY2Nlc3NcbiAgICAgICAgICBjb25zdCByZWNpcGVEYXRhID0gcmVjaXBlIGFzIGFueTtcbiAgICAgICAgICBjb25zdCByZWNpcGVUYWdzID0gcmVjaXBlRGF0YT8udGFncztcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyZWNpcGVUYWdzKSAmJiByZWNpcGVUYWdzLnNvbWUodGFnID0+IFxuICAgICAgICAgICAgWydhYnVuZGFudCcsICdyaWNoJywgJ2Zlc3RpdmUnLCAnY2VsZWJyYXRvcnknLCAnZ2VuZXJvdXMnXS5pbmNsdWRlcyh0YWcudG9Mb3dlckNhc2UoKSlcbiAgICAgICAgICApKSB7XG4gICAgICAgICAgICBqdXBpdGVyQm9vc3QgPSAxLjM7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHBsYW5ldEVmZmVjdCA9PT0gJ3Jlc3RyaWN0ZWQnKSB7XG4gICAgICAgICAgLy8gUmVzdHJpY3RlZCBKdXBpdGVyIHN0aWxsIGJlbmVmaXRzIGZvb2QsIGJ1dCBpbiBtb3JlIG1vZGVyYXRlIHdheXNcbiAgICAgICAgICBqdXBpdGVyQm9vc3QgPSAwLjU7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGdhc0dpYW50U2NvcmUgKz0ganVwaXRlckJvb3N0ICogcGxhbmV0SW5mbHVlbmNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRGVmYXVsdCBKdXBpdGVyIGluZmx1ZW5jZSBpZiBub3QgaW4gZG9taW5hbnQgcGxhbmV0c1xuICAgICAgICBnYXNHaWFudFNjb3JlICs9IDAuNTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLy8gQ2hlY2sgaWYgU2F0dXJuIGlzIGFjdGl2ZSBhbmQgaW4gcmVjaXBlJ3MgcnVsaW5nIHBsYW5ldHNcbiAgICBpZiAocmVjaXBlLmFzdHJvbG9naWNhbFByb2ZpbGUucnVsaW5nUGxhbmV0cy5pbmNsdWRlcygnU2F0dXJuJykgJiYgXG4gICAgICAgIGFzdHJvU3RhdGUuYWN0aXZlUGxhbmV0cy5pbmNsdWRlcygnc2F0dXJuJykpIHtcbiAgICAgIFxuICAgICAgLy8gQ2hlY2sgZm9yIFNhdHVybidzIGVmZmVjdCBpbiBkb21pbmFudCBwbGFuZXRzXG4gICAgICBjb25zdCBzYXR1cm5QbGFuZXQgPSBhc3Ryb1N0YXRlLmRvbWluYW50UGxhbmV0cz8uZmluZChwID0+IHtcbiAgICAgICAgLy8gQXBwbHkgc2FmZSB0eXBlIGNhc3RpbmcgZm9yIHBsYW5ldCBhY2Nlc3NcbiAgICAgICAgY29uc3QgcGxhbmV0RGF0YSA9IHAgYXMgYW55O1xuICAgICAgICByZXR1cm4gcGxhbmV0RGF0YT8ubmFtZSA9PT0gJ1NhdHVybic7XG4gICAgICB9KTtcbiAgICAgIGlmIChzYXR1cm5QbGFuZXQpIHtcbiAgICAgICAgLy8gQXBwbHkgc2FmZSB0eXBlIGNhc3RpbmcgZm9yIHBsYW5ldCBkYXRhIGFjY2Vzc1xuICAgICAgICBjb25zdCBwbGFuZXREYXRhID0gc2F0dXJuUGxhbmV0IGFzIGFueTtcbiAgICAgICAgY29uc3QgcGxhbmV0RWZmZWN0ID0gcGxhbmV0RGF0YT8uZWZmZWN0O1xuICAgICAgICBjb25zdCBwbGFuZXRJbmZsdWVuY2UgPSBwbGFuZXREYXRhPy5pbmZsdWVuY2UgfHwgMTtcbiAgICAgICAgXG4gICAgICAgIC8vIEJhc2Ugc2NvcmUgZm9yIFNhdHVyblxuICAgICAgICBsZXQgc2F0dXJuQm9vc3QgPSAwLjY7XG4gICAgICAgIFxuICAgICAgICAvLyBBcHBseSBtb2RpZmllcnMgYmFzZWQgb24gU2F0dXJuJ3MgZWZmZWN0XG4gICAgICAgIGlmIChwbGFuZXRFZmZlY3QgPT09ICdyZXN0cmljdGl2ZScpIHtcbiAgICAgICAgICAvLyBSZXN0cmljdGl2ZSBTYXR1cm4gZW5oYW5jZXMgZm9vZHMgd2l0aCBzdHJ1Y3R1cmUsIHRyYWRpdGlvbiwgYW5kIGRpc2NpcGxpbmVcbiAgICAgICAgICBzYXR1cm5Cb29zdCA9IDAuOTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBGdXJ0aGVyIGJvb3N0IHJlY2lwZXMgdGhhdCBoYXZlIHN0cnVjdHVyZWQsIHRyYWRpdGlvbmFsLCBvciBwcmVzZXJ2ZWQgcXVhbGl0aWVzXG4gICAgICAgICAgLy8gQXBwbHkgc2FmZSB0eXBlIGNhc3RpbmcgZm9yIHJlY2lwZSB0YWdzIGFjY2Vzc1xuICAgICAgICAgIGNvbnN0IHJlY2lwZURhdGEgPSByZWNpcGUgYXMgYW55O1xuICAgICAgICAgIGNvbnN0IHJlY2lwZVRhZ3MgPSByZWNpcGVEYXRhPy50YWdzO1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlY2lwZVRhZ3MpICYmIHJlY2lwZVRhZ3Muc29tZSh0YWcgPT4gXG4gICAgICAgICAgICBbJ3N0cnVjdHVyZWQnLCAndHJhZGl0aW9uYWwnLCAncHJlc2VydmVkJywgJ2FnZWQnLCAnZmVybWVudGVkJ10uaW5jbHVkZXModGFnLnRvTG93ZXJDYXNlKCkpXG4gICAgICAgICAgKSkge1xuICAgICAgICAgICAgc2F0dXJuQm9vc3QgPSAxLjI7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHBsYW5ldEVmZmVjdCA9PT0gJ3NvZnRlbmVkJykge1xuICAgICAgICAgIC8vIFNvZnRlbmVkIFNhdHVybiBoYXMgbGVzcyBpbmZsdWVuY2Ugb24gZm9vZFxuICAgICAgICAgIHNhdHVybkJvb3N0ID0gMC40O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBnYXNHaWFudFNjb3JlICs9IHNhdHVybkJvb3N0ICogcGxhbmV0SW5mbHVlbmNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRGVmYXVsdCBTYXR1cm4gaW5mbHVlbmNlIGlmIG5vdCBpbiBkb21pbmFudCBwbGFuZXRzXG4gICAgICAgIGdhc0dpYW50U2NvcmUgKz0gMC41O1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyBDYWxjdWxhdGUgbWF0Y2ggZm9yIG91dGVyIHBsYW5ldHMgLSBnaXZlIHRoZW0gbW9yZSB3ZWlnaHQgc2luY2UgdGhleSBjaGFuZ2UgbGVzcyBmcmVxdWVudGx5XG4gICAgY29uc3Qgb3V0ZXJQbGFuZXRNYXRjaCA9IHJlY2lwZS5hc3Ryb2xvZ2ljYWxQcm9maWxlLnJ1bGluZ1BsYW5ldHNcbiAgICAgIC5maWx0ZXIocCA9PiBvdXRlclBsYW5ldHMuaW5jbHVkZXMocCkgJiYgYXN0cm9TdGF0ZS5hY3RpdmVQbGFuZXRzLmluY2x1ZGVzKHApKS5sZW5ndGg7XG4gICAgXG4gICAgLy8gSGlnaGVyIHdlaWdodCBmb3Igb3V0ZXIgcGxhbmV0cyB0byBlbXBoYXNpemUgdGhlaXIgaW1wb3J0YW5jZVxuICAgIGNvbnN0IHBsYW5ldFNjb3JlID0gKHRyYWRpdGlvbmFsTWF0Y2ggKiAwLjUpICsgKGdhc0dpYW50U2NvcmUgKiAwLjgpICsgKG91dGVyUGxhbmV0TWF0Y2ggKiAxLjApO1xuICAgIFxuICAgIC8vIE5vcm1hbGl6ZSB0aGUgcGxhbmV0IHNjb3JlXG4gICAgY29uc3QgbWF4UG9zc2libGVQbGFuZXRTY29yZSA9IHJlY2lwZS5hc3Ryb2xvZ2ljYWxQcm9maWxlLnJ1bGluZ1BsYW5ldHMubGVuZ3RoOyBcbiAgICBjb25zdCBub3JtYWxpemVkUGxhbmV0U2NvcmUgPSBtYXhQb3NzaWJsZVBsYW5ldFNjb3JlID4gMCA/IFxuICAgICAgcGxhbmV0U2NvcmUgLyBtYXhQb3NzaWJsZVBsYW5ldFNjb3JlIDogMDtcbiAgICBcbiAgICAvLyBDb21iaW5lIHdpdGggem9kaWFjIG1hdGNoXG4gICAgcmV0dXJuIChub3JtYWxpemVkUGxhbmV0U2NvcmUgKiAwLjcpICsgXG4gICAgICAodGhpcy56b2RpYWNNYXRjaChyZWNpcGUsIGFzdHJvU3RhdGUpICogMC4zKTtcbiAgfVxuXG4gIHByaXZhdGUgem9kaWFjTWF0Y2gocmVjaXBlOiBSZWNpcGVFbGVtZW50YWxNYXBwaW5nLCBhc3Ryb1N0YXRlOiBBc3Ryb2xvZ2ljYWxTdGF0ZSk6IG51bWJlciB7XG4gICAgLy8gU2ltcGxlIGltcGxlbWVudGF0aW9uIC0gY291bGQgYmUgZW5oYW5jZWQgd2l0aCBtb3JlIGNvbXBsZXggYXN0cm9sb2dpY2FsIGxvZ2ljXG4gICAgY29uc3QgZG9taW5hbnRFbGVtZW50ID0gdGhpcy5nZXREb21pbmFudEVsZW1lbnRGcm9tQXN0cm8oYXN0cm9TdGF0ZSk7XG4gICAgY29uc3QgZWxlbWVudE1hdGNoID0gcmVjaXBlLmVsZW1lbnRhbFByb3BlcnRpZXNbZG9taW5hbnRFbGVtZW50XSB8fCAwO1xuICAgIHJldHVybiBlbGVtZW50TWF0Y2ggPiAwLjYgPyAxIDogZWxlbWVudE1hdGNoID4gMC4zID8gMC41IDogMC4xO1xuICB9XG59Il0sInZlcnNpb24iOjN9