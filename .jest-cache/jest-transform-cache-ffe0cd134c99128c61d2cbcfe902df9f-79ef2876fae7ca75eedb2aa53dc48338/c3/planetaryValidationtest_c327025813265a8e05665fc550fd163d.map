{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/__tests__/planetaryValidation.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/__tests__/planetaryValidation.test.ts"],"sourcesContent":["/**\n * Tests for Planetary Data Validation\n */\n\nimport { \n  validatePlanetaryData, \n  shouldRollback,\n  ValidationResult,\n  ValidationError \n} from '../planetaryValidation';\n\n// Mock the reliable astronomy module\njest.mock('../reliableAstronomy', () => ({\n  getReliablePlanetaryPositions: jest.fn()\n}));\n\n// Mock the logger\njest.mock('../logger', () => ({\n  logger: {\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n    debug: jest.fn()\n  }\n}));\n\nimport { getReliablePlanetaryPositions } from '../reliableAstronomy';\n\nconst mockGetReliablePlanetaryPositions = getReliablePlanetaryPositions as jest.MockedFunction<typeof getReliablePlanetaryPositions>;\n\ndescribe('Planetary Data Validation', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('validatePlanetaryData', () => {\n    it('should pass validation with valid planetary data', async () => {\n      // Mock valid planetary positions\n      mockGetReliablePlanetaryPositions.mockResolvedValue({\n        sun: { sign: 'aries', degree: 8.5, exactLongitude: 8.5, isRetrograde: false },\n        moon: { sign: 'aries', degree: 1.57, exactLongitude: 1.57, isRetrograde: false },\n        mercury: { sign: 'aries', degree: 0.85, exactLongitude: 0.85, isRetrograde: true },\n        venus: { sign: 'pisces', degree: 29.08, exactLongitude: 359.08, isRetrograde: true },\n        mars: { sign: 'cancer', degree: 22.63, exactLongitude: 112.63, isRetrograde: false },\n        jupiter: { sign: 'gemini', degree: 15.52, exactLongitude: 75.52, isRetrograde: false },\n        saturn: { sign: 'pisces', degree: 24.12, exactLongitude: 354.12, isRetrograde: false },\n        uranus: { sign: 'taurus', degree: 24.62, exactLongitude: 54.62, isRetrograde: false },\n        neptune: { sign: 'pisces', degree: 29.93, exactLongitude: 359.93, isRetrograde: false },\n        pluto: { sign: 'aquarius', degree: 3.5, exactLongitude: 333.5, isRetrograde: false },\n        northNode: { sign: 'pisces', degree: 26.88, exactLongitude: 356.88, isRetrograde: true },\n        southNode: { sign: 'virgo', degree: 26.88, exactLongitude: 176.88, isRetrograde: true }\n      });\n\n      const result = await validatePlanetaryData();\n\n      // The main requirement is no critical or high-severity errors\n      expect(result.errors.filter(e => e.severity === 'CRITICAL' || e.severity === 'HIGH')).toHaveLength(0);\n      expect(result.timestamp).toBeInstanceOf(Date);\n      \n      // Log the result for debugging\n      if (!result.isValid) {\n        console.log('Validation failed with errors:', result.errors);\n        console.log('Warnings:', result.warnings);\n      }\n      \n      // Should be valid if no critical/high errors\n      expect(result.isValid).toBe(true);\n    });\n\n    it('should fail validation with invalid planetary positions', async () => {\n      // Mock invalid planetary positions (invalid degree values)\n      mockGetReliablePlanetaryPositions.mockResolvedValue({\n        sun: { sign: 'aries', degree: 35, exactLongitude: 8.5, isRetrograde: false }, // Invalid degree > 30\n        moon: { sign: 'aries', degree: -5, exactLongitude: 1.57, isRetrograde: false }, // Invalid degree < 0\n        mercury: { sign: 'aries', degree: 0.85, exactLongitude: 400, isRetrograde: true }, // Invalid longitude > 360\n      });\n\n      const result = await validatePlanetaryData();\n\n      expect(result.isValid).toBe(false);\n      expect(result.errors.length).toBeGreaterThan(0);\n      expect(result.errors.some(e => e.type === 'POSITION_DRIFT')).toBe(true);\n      expect(result.summary).toContain('FAILED');\n    });\n\n    it('should handle API failures gracefully', async () => {\n      // Mock API failure\n      mockGetReliablePlanetaryPositions.mockRejectedValue(new Error('API timeout'));\n\n      const result = await validatePlanetaryData();\n\n      // Should still complete validation even with API failure\n      expect(result).toBeDefined();\n      expect(result.timestamp).toBeInstanceOf(Date);\n      expect(result.errors.some(e => e.type === 'API_TIMEOUT')).toBe(true);\n    });\n\n    it('should validate retrograde status correctly', async () => {\n      // Mock positions with retrograde data\n      mockGetReliablePlanetaryPositions.mockResolvedValue({\n        mercury: { sign: 'aries', degree: 0.85, exactLongitude: 0.85, isRetrograde: true },\n        venus: { sign: 'pisces', degree: 29.08, exactLongitude: 359.08, isRetrograde: true },\n        mars: { sign: 'cancer', degree: 22.63, exactLongitude: 112.63, isRetrograde: false },\n        jupiter: { sign: 'gemini', degree: 15.52, exactLongitude: 75.52, isRetrograde: false },\n        saturn: { sign: 'pisces', degree: 24.12, exactLongitude: 354.12, isRetrograde: false },\n        uranus: { sign: 'taurus', degree: 24.62, exactLongitude: 54.62, isRetrograde: false },\n        neptune: { sign: 'pisces', degree: 29.93, exactLongitude: 359.93, isRetrograde: false },\n        pluto: { sign: 'aquarius', degree: 3.5, exactLongitude: 333.5, isRetrograde: false },\n        northNode: { sign: 'pisces', degree: 26.88, exactLongitude: 356.88, isRetrograde: true },\n        southNode: { sign: 'virgo', degree: 26.88, exactLongitude: 176.88, isRetrograde: true }\n      });\n\n      const result = await validatePlanetaryData();\n\n      // Should pass validation with proper retrograde data\n      expect(result.errors.filter(e => e.message.includes('retrograde')).length).toBe(0);\n    });\n\n    it('should validate lunar nodes are opposite', async () => {\n      // Mock positions with incorrect lunar nodes (not opposite)\n      mockGetReliablePlanetaryPositions.mockResolvedValue({\n        sun: { sign: 'aries', degree: 8.5, exactLongitude: 8.5, isRetrograde: false },\n        moon: { sign: 'aries', degree: 1.57, exactLongitude: 1.57, isRetrograde: false },\n        mercury: { sign: 'aries', degree: 0.85, exactLongitude: 0.85, isRetrograde: true },\n        venus: { sign: 'pisces', degree: 29.08, exactLongitude: 359.08, isRetrograde: true },\n        mars: { sign: 'cancer', degree: 22.63, exactLongitude: 112.63, isRetrograde: false },\n        jupiter: { sign: 'gemini', degree: 15.52, exactLongitude: 75.52, isRetrograde: false },\n        saturn: { sign: 'pisces', degree: 24.12, exactLongitude: 354.12, isRetrograde: false },\n        uranus: { sign: 'taurus', degree: 24.62, exactLongitude: 54.62, isRetrograde: false },\n        neptune: { sign: 'pisces', degree: 29.93, exactLongitude: 359.93, isRetrograde: false },\n        pluto: { sign: 'aquarius', degree: 3.5, exactLongitude: 333.5, isRetrograde: false },\n        northNode: { sign: 'pisces', degree: 26.88, exactLongitude: 356.88, isRetrograde: true },\n        southNode: { sign: 'pisces', degree: 26.88, exactLongitude: 356.88, isRetrograde: true } // Same position as north node - should fail\n      });\n\n      const result = await validatePlanetaryData();\n\n      // Should detect that nodes are not opposite (either in errors or test failures)\n      const hasOppositeError = result.errors.some(e => \n        e.message.includes('opposite') || \n        e.message.includes('Lunar Node') || \n        e.message.includes('opposition')\n      );\n      expect(hasOppositeError).toBe(true);\n    });\n  });\n\n  describe('shouldRollback', () => {\n    it('should recommend rollback for critical errors', () => {\n      const validationResult: ValidationResult = {\n        isValid: false,\n        errors: [{\n          type: 'DATA_CORRUPTION',\n          severity: 'CRITICAL',\n          message: 'Critical data corruption detected',\n          timestamp: new Date()\n        }],\n        warnings: [],\n        summary: 'Critical failure',\n        timestamp: new Date()\n      };\n\n      expect(shouldRollback(validationResult)).toBe(true);\n    });\n\n    it('should recommend rollback for multiple high-severity errors', () => {\n      const validationResult: ValidationResult = {\n        isValid: false,\n        errors: [\n          {\n            type: 'POSITION_DRIFT',\n            severity: 'HIGH',\n            message: 'Position drift detected',\n            timestamp: new Date()\n          },\n          {\n            type: 'TRANSIT_MISMATCH',\n            severity: 'HIGH',\n            message: 'Transit mismatch detected',\n            timestamp: new Date()\n          },\n          {\n            type: 'TEST_FAILURE',\n            severity: 'HIGH',\n            message: 'Test failure detected',\n            timestamp: new Date()\n          }\n        ],\n        warnings: [],\n        summary: 'Multiple high-severity errors',\n        timestamp: new Date()\n      };\n\n      expect(shouldRollback(validationResult)).toBe(true);\n    });\n\n    it('should not recommend rollback for minor issues', () => {\n      const validationResult: ValidationResult = {\n        isValid: true,\n        errors: [{\n          type: 'POSITION_DRIFT',\n          severity: 'LOW',\n          message: 'Minor position drift',\n          timestamp: new Date()\n        }],\n        warnings: [{\n          type: 'MINOR_DRIFT',\n          message: 'Minor warning',\n          timestamp: new Date()\n        }],\n        summary: 'Minor issues only',\n        timestamp: new Date()\n      };\n\n      expect(shouldRollback(validationResult)).toBe(false);\n    });\n\n    it('should not recommend rollback for single high-severity error', () => {\n      const validationResult: ValidationResult = {\n        isValid: false,\n        errors: [{\n          type: 'POSITION_DRIFT',\n          severity: 'HIGH',\n          message: 'Single high-severity error',\n          timestamp: new Date()\n        }],\n        warnings: [],\n        summary: 'Single high error',\n        timestamp: new Date()\n      };\n\n      expect(shouldRollback(validationResult)).toBe(false);\n    });\n  });\n\n  describe('Performance', () => {\n    it('should complete validation within reasonable time', async () => {\n      mockGetReliablePlanetaryPositions.mockResolvedValue({\n        sun: { sign: 'aries', degree: 8.5, exactLongitude: 8.5, isRetrograde: false },\n        moon: { sign: 'aries', degree: 1.57, exactLongitude: 1.57, isRetrograde: false }\n      });\n\n      const startTime = Date.now();\n      const result = await validatePlanetaryData();\n      const duration = Date.now() - startTime;\n\n      expect(duration).toBeLessThan(30000); // Should complete within 30 seconds\n      expect(result).toBeDefined();\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle missing planet data gracefully', async () => {\n      // Mock empty planetary positions\n      mockGetReliablePlanetaryPositions.mockResolvedValue({});\n\n      const result = await validatePlanetaryData();\n\n      expect(result).toBeDefined();\n      expect(result.errors.length).toBeGreaterThan(0);\n      expect(result.summary).toContain('FAILED');\n    });\n\n    it('should handle malformed planetary data', async () => {\n      // Mock malformed planetary positions\n      mockGetReliablePlanetaryPositions.mockResolvedValue({\n        sun: null,\n        moon: undefined,\n        mercury: 'invalid',\n        venus: { invalidStructure: true }\n      });\n\n      const result = await validatePlanetaryData();\n\n      expect(result).toBeDefined();\n      expect(result.errors.length).toBeGreaterThan(0);\n    });\n  });\n});"],"version":3}