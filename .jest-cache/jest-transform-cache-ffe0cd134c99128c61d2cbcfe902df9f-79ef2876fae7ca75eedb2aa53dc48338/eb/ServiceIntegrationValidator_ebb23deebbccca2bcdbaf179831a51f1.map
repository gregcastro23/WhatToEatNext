{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/scripts/validation/ServiceIntegrationValidator.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/scripts/validation/ServiceIntegrationValidator.ts"],"sourcesContent":["/**\n * Service Integration Validator\n *\n * This module implements comprehensive service integration validation to ensure\n * API endpoints and service methods remain functional after unused variable elimination.\n *\n * Features:\n * - API endpoint functionality verification\n * - Service method integrity validation\n * - Configuration dependency checking\n * - Integration test execution\n * - Quality assurance reporting with 90% reduction target\n */\n\nimport { execSync } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\n\nexport interface ServiceIntegrationConfig {\n  enableApiEndpointValidation: boolean;\n  enableServiceMethodValidation: boolean;\n  enableConfigurationValidation: boolean;\n  enableIntegrationTests: boolean;\n  apiTimeout: number;\n  testTimeout: number;\n  qualityTarget: number; // 90% unused variable reduction target\n  buildStabilityTarget: number; // 100% build stability target\n  logLevel: 'debug' | 'info' | 'warn' | 'error';\n}\n\nexport interface ApiEndpointInfo {\n  endpoint: string;\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n  filePath: string;\n  lineNumber: number;\n  isActive: boolean;\n  dependencies: string[];\n}\n\nexport interface ServiceMethodInfo {\n  methodName: string;\n  className?: string;\n  filePath: string;\n  lineNumber: number;\n  isExported: boolean;\n  parameters: string[];\n  returnType?: string;\n  dependencies: string[];\n}\n\nexport interface ConfigurationDependency {\n  key: string;\n  filePath: string;\n  lineNumber: number;\n  isRequired: boolean;\n  defaultValue?: string;\n  usageContext: string;\n}\n\nexport interface ServiceIntegrationResult {\n  passed: boolean;\n  servicePath: string;\n  validationType: 'api-endpoint' | 'service-method' | 'configuration' | 'integration-test';\n  errors: string[];\n  warnings: string[];\n  recommendations: string[];\n  executionTime: number;\n  details: {\n    apiEndpoints?: ApiEndpointInfo[];\n    serviceMethods?: ServiceMethodInfo[];\n    configDependencies?: ConfigurationDependency[];\n    testResults?: any;\n    qualityMetrics?: QualityMetrics;\n  };\n}\n\nexport interface QualityMetrics {\n  unusedVariableReduction: number; // Percentage reduction achieved\n  buildStabilityScore: number; // 0-100 score for build stability\n  apiIntegrityScore: number; // 0-100 score for API integrity\n  serviceIntegrityScore: number; // 0-100 score for service integrity\n  overallQualityScore: number; // Combined quality score\n  targetAchievement: {\n    reductionTarget: number; // 90%\n    stabilityTarget: number; // 100%\n    reductionAchieved: boolean;\n    stabilityAchieved: boolean;\n  };\n}\n\nexport interface ComprehensiveQualityReport {\n  timestamp: Date;\n  batchId: string;\n  processedServices: string[];\n  qualityMetrics: QualityMetrics;\n  serviceResults: ServiceIntegrationResult[];\n  overallAssessment: 'excellent' | 'good' | 'acceptable' | 'needs-improvement' | 'critical';\n  actionItems: string[];\n  recommendations: string[];\n  targetStatus: {\n    reductionTargetMet: boolean;\n    stabilityTargetMet: boolean;\n    readyForProduction: boolean;\n  };\n}\n\nexport class ServiceIntegrationValidator {\n  private config: ServiceIntegrationConfig;\n  private qualityReports: Map<string, ComprehensiveQualityReport> = new Map();\n\n  constructor(config: Partial<ServiceIntegrationConfig> = {}) {\n    this.config = {\n      enableApiEndpointValidation: true,\n      enableServiceMethodValidation: true,\n      enableConfigurationValidation: true,\n      enableIntegrationTests: true,\n      apiTimeout: 10000,\n      testTimeout: 30000,\n      qualityTarget: 90, // 90% unused variable reduction target\n      buildStabilityTarget: 100, // 100% build stability target\n      logLevel: 'info',\n      ...config\n    };\n  }\n\n  /**\n   * Validate service integration for a batch of processed files\n   */\n  async validateServiceIntegration(\n    processedFiles: string[],\n    batchId: string,\n    baselineMetrics?: { unusedVariables: number; buildErrors: number }\n  ): Promise<ComprehensiveQualityReport> {\n    const startTime = Date.now();\n    this.log('info', `🔍 Starting service integration validation for batch ${batchId}`);\n\n    // Filter for service files\n    const serviceFiles = this.identifyServiceFiles(processedFiles);\n    this.log('info', `📋 Found ${serviceFiles.length} service files to validate`);\n\n    const serviceResults: ServiceIntegrationResult[] = [];\n\n    // Validate each service file\n    for (const serviceFile of serviceFiles) {\n      this.log('debug', `🔍 Validating service: ${path.relative(process.cwd(), serviceFile)}`);\n\n      const results = await this.validateSingleService(serviceFile, batchId);\n      serviceResults.push(...results);\n    }\n\n    // Calculate quality metrics\n    const qualityMetrics = await this.calculateQualityMetrics(\n      serviceResults,\n      baselineMetrics,\n      batchId\n    );\n\n    // Generate comprehensive quality report\n    const report = this.generateComprehensiveQualityReport(\n      batchId,\n      serviceFiles,\n      serviceResults,\n      qualityMetrics\n    );\n\n    // Store report\n    this.qualityReports.set(batchId, report);\n\n    this.log('info', `✅ Service integration validation completed for batch ${batchId}`);\n    this.log('info', `📊 Quality Score: ${qualityMetrics.overallQualityScore}/100`);\n    this.log('info', `🎯 Reduction Target: ${qualityMetrics.targetAchievement.reductionAchieved ? 'MET' : 'NOT MET'}`);\n    this.log('info', `🏗️ Stability Target: ${qualityMetrics.targetAchievement.stabilityAchieved ? 'MET' : 'NOT MET'}`);\n\n    return report;\n  }\n\n  /**\n   * Validate a single service file\n   */\n  private async validateSingleService(servicePath: string, batchId: string): Promise<ServiceIntegrationResult[]> {\n    const results: ServiceIntegrationResult[] = [];\n\n    try {\n      // 1. API Endpoint Validation\n      if (this.config.enableApiEndpointValidation) {\n        const apiResult = await this.validateApiEndpoints(servicePath, batchId);\n        results.push(apiResult);\n      }\n\n      // 2. Service Method Validation\n      if (this.config.enableServiceMethodValidation) {\n        const methodResult = await this.validateServiceMethods(servicePath, batchId);\n        results.push(methodResult);\n      }\n\n      // 3. Configuration Validation\n      if (this.config.enableConfigurationValidation) {\n        const configResult = await this.validateConfigurationDependencies(servicePath, batchId);\n        results.push(configResult);\n      }\n\n      // 4. Integration Test Validation\n      if (this.config.enableIntegrationTests) {\n        const testResult = await this.validateIntegrationTests(servicePath, batchId);\n        results.push(testResult);\n      }\n\n    } catch (error) {\n      this.log('error', `❌ Service validation failed for ${servicePath}: ${error}`);\n\n      results.push({\n        passed: false,\n        servicePath,\n        validationType: 'service-method',\n        errors: [`Service validation failed: ${error}`],\n        warnings: [],\n        recommendations: ['Review service file for syntax or import errors'],\n        executionTime: 0,\n        details: {}\n      });\n    }\n\n    return results;\n  }\n\n  /**\n   * Validate API endpoints functionality\n   */\n  private async validateApiEndpoints(servicePath: string, batchId: string): Promise<ServiceIntegrationResult> {\n    const startTime = Date.now();\n    const result: ServiceIntegrationResult = {\n      passed: true,\n      servicePath,\n      validationType: 'api-endpoint',\n      errors: [],\n      warnings: [],\n      recommendations: [],\n      executionTime: 0,\n      details: {}\n    };\n\n    try {\n      const apiEndpoints = await this.analyzeApiEndpoints(servicePath);\n      result.details.apiEndpoints = apiEndpoints;\n\n      if (apiEndpoints.length === 0) {\n        result.warnings.push('No API endpoints found in service file');\n        result.recommendations.push('Verify if this service should contain API endpoints');\n      } else {\n        // Validate each endpoint\n        for (const endpoint of apiEndpoints) {\n          const endpointValidation = await this.validateSingleEndpoint(endpoint);\n\n          if (!endpointValidation.isValid) {\n            result.passed = false;\n            result.errors.push(`API endpoint ${endpoint.endpoint} validation failed: ${endpointValidation.error}`);\n          }\n\n          if (endpointValidation.warnings.length > 0) {\n            result.warnings.push(...endpointValidation.warnings);\n          }\n        }\n\n        if (result.passed) {\n          this.log('debug', `✅ All ${apiEndpoints.length} API endpoints validated successfully`);\n        } else {\n          this.log('error', `❌ API endpoint validation failed for ${path.relative(process.cwd(), servicePath)}`);\n        }\n      }\n\n    } catch (error) {\n      result.passed = false;\n      result.errors.push(`API endpoint analysis failed: ${error}`);\n      this.log('error', `❌ API endpoint validation failed: ${error}`);\n    }\n\n    result.executionTime = Date.now() - startTime;\n    return result;\n  }\n\n  /**\n   * Validate service methods integrity\n   */\n  private async validateServiceMethods(servicePath: string, batchId: string): Promise<ServiceIntegrationResult> {\n    const startTime = Date.now();\n    const result: ServiceIntegrationResult = {\n      passed: true,\n      servicePath,\n      validationType: 'service-method',\n      errors: [],\n      warnings: [],\n      recommendations: [],\n      executionTime: 0,\n      details: {}\n    };\n\n    try {\n      const serviceMethods = await this.analyzeServiceMethods(servicePath);\n      result.details.serviceMethods = serviceMethods;\n\n      if (serviceMethods.length === 0) {\n        result.warnings.push('No exported service methods found');\n        result.recommendations.push('Verify if this service should export methods');\n      } else {\n        // Validate each method\n        for (const method of serviceMethods) {\n          const methodValidation = await this.validateSingleMethod(method);\n\n          if (!methodValidation.isValid) {\n            result.passed = false;\n            result.errors.push(`Service method ${method.methodName} validation failed: ${methodValidation.error}`);\n          }\n\n          if (methodValidation.warnings.length > 0) {\n            result.warnings.push(...methodValidation.warnings);\n          }\n        }\n\n        if (result.passed) {\n          this.log('debug', `✅ All ${serviceMethods.length} service methods validated successfully`);\n        } else {\n          this.log('error', `❌ Service method validation failed for ${path.relative(process.cwd(), servicePath)}`);\n        }\n      }\n\n    } catch (error) {\n      result.passed = false;\n      result.errors.push(`Service method analysis failed: ${error}`);\n      this.log('error', `❌ Service method validation failed: ${error}`);\n    }\n\n    result.executionTime = Date.now() - startTime;\n    return result;\n  }\n\n  /**\n   * Validate configuration dependencies\n   */\n  private async validateConfigurationDependencies(servicePath: string, batchId: string): Promise<ServiceIntegrationResult> {\n    const startTime = Date.now();\n    const result: ServiceIntegrationResult = {\n      passed: true,\n      servicePath,\n      validationType: 'configuration',\n      errors: [],\n      warnings: [],\n      recommendations: [],\n      executionTime: 0,\n      details: {}\n    };\n\n    try {\n      const configDependencies = await this.analyzeConfigurationDependencies(servicePath);\n      result.details.configDependencies = configDependencies;\n\n      // Validate configuration dependencies\n      for (const config of configDependencies) {\n        const configValidation = await this.validateSingleConfiguration(config);\n\n        if (!configValidation.isValid) {\n          if (config.isRequired) {\n            result.passed = false;\n            result.errors.push(`Required configuration ${config.key} validation failed: ${configValidation.error}`);\n          } else {\n            result.warnings.push(`Optional configuration ${config.key} issue: ${configValidation.error}`);\n          }\n        }\n      }\n\n      if (result.passed) {\n        this.log('debug', `✅ All ${configDependencies.length} configuration dependencies validated`);\n      } else {\n        this.log('error', `❌ Configuration validation failed for ${path.relative(process.cwd(), servicePath)}`);\n      }\n\n    } catch (error) {\n      result.passed = false;\n      result.errors.push(`Configuration analysis failed: ${error}`);\n      this.log('error', `❌ Configuration validation failed: ${error}`);\n    }\n\n    result.executionTime = Date.now() - startTime;\n    return result;\n  }\n\n  /**\n   * Validate integration tests\n   */\n  private async validateIntegrationTests(servicePath: string, batchId: string): Promise<ServiceIntegrationResult> {\n    const startTime = Date.now();\n    const result: ServiceIntegrationResult = {\n      passed: true,\n      servicePath,\n      validationType: 'integration-test',\n      errors: [],\n      warnings: [],\n      recommendations: [],\n      executionTime: 0,\n      details: {}\n    };\n\n    try {\n      // Find related integration test files\n      const testFiles = this.findIntegrationTestFiles(servicePath);\n\n      if (testFiles.length === 0) {\n        result.warnings.push('No integration test files found for service');\n        result.recommendations.push('Consider adding integration tests for this service');\n      } else {\n        // Run integration tests\n        const testResults = await this.runIntegrationTests(testFiles);\n        result.details.testResults = testResults;\n\n        if (testResults.failed > 0) {\n          result.passed = false;\n          result.errors.push(`${testResults.failed} integration tests failed`);\n          result.recommendations.push('Review and fix failing integration tests');\n        } else {\n          this.log('debug', `✅ All ${testResults.passed} integration tests passed`);\n        }\n      }\n\n    } catch (error) {\n      result.passed = false;\n      result.errors.push(`Integration test validation failed: ${error}`);\n      this.log('error', `❌ Integration test validation failed: ${error}`);\n    }\n\n    result.executionTime = Date.now() - startTime;\n    return result;\n  }\n\n  /**\n   * Calculate comprehensive quality metrics\n   */\n  private async calculateQualityMetrics(\n    serviceResults: ServiceIntegrationResult[],\n    baselineMetrics?: { unusedVariables: number; buildErrors: number },\n    batchId?: string\n  ): Promise<QualityMetrics> {\n    // Calculate unused variable reduction\n    const currentUnusedVariables = await this.getCurrentUnusedVariableCount();\n    const baselineUnusedVariables = baselineMetrics?.unusedVariables || currentUnusedVariables;\n    const unusedVariableReduction = baselineUnusedVariables > 0\n      ? ((baselineUnusedVariables - currentUnusedVariables) / baselineUnusedVariables) * 100\n      : 0;\n\n    // Calculate build stability score\n    const currentBuildErrors = await this.getCurrentBuildErrorCount();\n    const buildStabilityScore = currentBuildErrors === 0 ? 100 : Math.max(0, 100 - (currentBuildErrors * 10));\n\n    // Calculate API integrity score\n    const apiResults = serviceResults.filter(r => r.validationType === 'api-endpoint');\n    const apiIntegrityScore = this.calculateIntegrityScore(apiResults);\n\n    // Calculate service integrity score\n    const serviceMethodResults = serviceResults.filter(r => r.validationType === 'service-method');\n    const serviceIntegrityScore = this.calculateIntegrityScore(serviceMethodResults);\n\n    // Calculate overall quality score\n    const overallQualityScore = Math.round(\n      (unusedVariableReduction * 0.4) + // 40% weight for reduction\n      (buildStabilityScore * 0.3) + // 30% weight for build stability\n      (apiIntegrityScore * 0.15) + // 15% weight for API integrity\n      (serviceIntegrityScore * 0.15) // 15% weight for service integrity\n    );\n\n    // Check target achievement\n    const reductionAchieved = unusedVariableReduction >= this.config.qualityTarget;\n    const stabilityAchieved = buildStabilityScore >= this.config.buildStabilityTarget;\n\n    return {\n      unusedVariableReduction,\n      buildStabilityScore,\n      apiIntegrityScore,\n      serviceIntegrityScore,\n      overallQualityScore,\n      targetAchievement: {\n        reductionTarget: this.config.qualityTarget,\n        stabilityTarget: this.config.buildStabilityTarget,\n        reductionAchieved,\n        stabilityAchieved\n      }\n    };\n  }\n\n  /**\n   * Generate comprehensive quality assurance report\n   */\n  private generateComprehensiveQualityReport(\n    batchId: string,\n    processedServices: string[],\n    serviceResults: ServiceIntegrationResult[],\n    qualityMetrics: QualityMetrics\n  ): ComprehensiveQualityReport {\n    const overallAssessment = this.calculateOverallAssessment(qualityMetrics);\n    const actionItems = this.generateActionItems(serviceResults, qualityMetrics);\n    const recommendations = this.generateRecommendations(serviceResults, qualityMetrics);\n\n    const targetStatus = {\n      reductionTargetMet: qualityMetrics.targetAchievement.reductionAchieved,\n      stabilityTargetMet: qualityMetrics.targetAchievement.stabilityAchieved,\n      readyForProduction: qualityMetrics.targetAchievement.reductionAchieved &&\n                         qualityMetrics.targetAchievement.stabilityAchieved &&\n                         qualityMetrics.overallQualityScore >= 85\n    };\n\n    return {\n      timestamp: new Date(),\n      batchId,\n      processedServices,\n      qualityMetrics,\n      serviceResults,\n      overallAssessment,\n      actionItems,\n      recommendations,\n      targetStatus\n    };\n  }\n\n  // Helper methods for analysis\n\n  private identifyServiceFiles(files: string[]): string[] {\n    return files.filter(file =>\n      /\\/services\\//.test(file) ||\n      /Service\\.ts$/.test(file) ||\n      /Client\\.ts$/.test(file) ||\n      /\\/api\\//.test(file)\n    );\n  }\n\n  private async analyzeApiEndpoints(servicePath: string): Promise<ApiEndpointInfo[]> {\n    const content = fs.readFileSync(servicePath, 'utf8');\n    const endpoints: ApiEndpointInfo[] = [];\n\n    // Extract API endpoints (simplified pattern matching)\n    const apiPatterns = [\n      /['\"`](\\/api\\/[^'\"`]+)['\"`]/g,\n      /fetch\\s*\\(\\s*['\"`]([^'\"`]+)['\"`]/g,\n      /axios\\.[get|post|put|delete|patch]+\\s*\\(\\s*['\"`]([^'\"`]+)['\"`]/g\n    ];\n\n    let lineNumber = 1;\n    const lines = content.split('\\n');\n\n    for (const line of lines) {\n      for (const pattern of apiPatterns) {\n        let match;\n        while ((match = pattern.exec(line)) !== null) {\n          const endpoint = match[1];\n          if (endpoint.startsWith('/api/') || endpoint.startsWith('http')) {\n            endpoints.push({\n              endpoint,\n              method: this.extractHttpMethod(line) || 'GET',\n              filePath: servicePath,\n              lineNumber,\n              isActive: true,\n              dependencies: this.extractDependencies(line)\n            });\n          }\n        }\n      }\n      lineNumber++;\n    }\n\n    return endpoints;\n  }\n\n  private async analyzeServiceMethods(servicePath: string): Promise<ServiceMethodInfo[]> {\n    const content = fs.readFileSync(servicePath, 'utf8');\n    const methods: ServiceMethodInfo[] = [];\n\n    // Extract exported methods (simplified)\n    const methodPatterns = [\n      /export\\s+(?:const|function)\\s+(\\w+)/g,\n      /export\\s+class\\s+(\\w+)/g,\n      /(\\w+)\\s*:\\s*\\([^)]*\\)\\s*=>/g\n    ];\n\n    let lineNumber = 1;\n    const lines = content.split('\\n');\n\n    for (const line of lines) {\n      for (const pattern of methodPatterns) {\n        let match;\n        while ((match = pattern.exec(line)) !== null) {\n          const methodName = match[1];\n          methods.push({\n            methodName,\n            filePath: servicePath,\n            lineNumber,\n            isExported: line.includes('export'),\n            parameters: this.extractParameters(line),\n            dependencies: this.extractDependencies(line)\n          });\n        }\n      }\n      lineNumber++;\n    }\n\n    return methods;\n  }\n\n  private async analyzeConfigurationDependencies(servicePath: string): Promise<ConfigurationDependency[]> {\n    const content = fs.readFileSync(servicePath, 'utf8');\n    const dependencies: ConfigurationDependency[] = [];\n\n    // Extract environment variables and configuration\n    const configPatterns = [\n      /process\\.env\\.(\\w+)/g,\n      /config\\.(\\w+)/g,\n      /getConfig\\(['\"`](\\w+)['\"`]\\)/g\n    ];\n\n    let lineNumber = 1;\n    const lines = content.split('\\n');\n\n    for (const line of lines) {\n      for (const pattern of configPatterns) {\n        let match;\n        while ((match = pattern.exec(line)) !== null) {\n          const key = match[1];\n          dependencies.push({\n            key,\n            filePath: servicePath,\n            lineNumber,\n            isRequired: !line.includes('||') && !line.includes('??'),\n            usageContext: line.trim()\n          });\n        }\n      }\n      lineNumber++;\n    }\n\n    return dependencies;\n  }\n\n  private async validateSingleEndpoint(endpoint: ApiEndpointInfo): Promise<{ isValid: boolean; error?: string; warnings: string[] }> {\n    const warnings: string[] = [];\n\n    // Basic endpoint validation\n    if (!endpoint.endpoint.startsWith('/api/') && !endpoint.endpoint.startsWith('http')) {\n      return { isValid: false, error: 'Invalid endpoint format', warnings };\n    }\n\n    // Check for common issues\n    if (endpoint.endpoint.includes('undefined') || endpoint.endpoint.includes('null')) {\n      warnings.push('Endpoint contains undefined or null values');\n    }\n\n    return { isValid: true, warnings };\n  }\n\n  private async validateSingleMethod(method: ServiceMethodInfo): Promise<{ isValid: boolean; error?: string; warnings: string[] }> {\n    const warnings: string[] = [];\n\n    // Basic method validation\n    if (!method.methodName || method.methodName.length === 0) {\n      return { isValid: false, error: 'Invalid method name', warnings };\n    }\n\n    // Check for common issues\n    if (method.methodName.includes('undefined') || method.methodName.includes('null')) {\n      warnings.push('Method name contains undefined or null values');\n    }\n\n    return { isValid: true, warnings };\n  }\n\n  private async validateSingleConfiguration(config: ConfigurationDependency): Promise<{ isValid: boolean; error?: string; warnings: string[] }> {\n    const warnings: string[] = [];\n\n    // Check if required configuration is available\n    if (config.isRequired && config.key.startsWith('REQUIRED_')) {\n      // In a real implementation, you might check actual environment variables\n      warnings.push(`Required configuration ${config.key} should be verified`);\n    }\n\n    return { isValid: true, warnings };\n  }\n\n  private findIntegrationTestFiles(servicePath: string): string[] {\n    const testFiles: string[] = [];\n    const serviceDir = path.dirname(servicePath);\n    const serviceName = path.basename(servicePath, path.extname(servicePath));\n\n    // Common test file patterns\n    const testPatterns = [\n      path.join(serviceDir, `${serviceName}.integration.test.ts`),\n      path.join(serviceDir, `${serviceName}.integration.spec.ts`),\n      path.join(serviceDir, '__tests__', `${serviceName}.integration.test.ts`),\n      path.join(serviceDir, '__tests__', `${serviceName}.test.ts`)\n    ];\n\n    for (const testPattern of testPatterns) {\n      if (fs.existsSync(testPattern)) {\n        testFiles.push(testPattern);\n      }\n    }\n\n    return testFiles;\n  }\n\n  private async runIntegrationTests(testFiles: string[]): Promise<{ passed: number; failed: number; total: number }> {\n    try {\n      const testCommand = `NODE_OPTIONS='--expose-gc --max-old-space-size=2048' yarn test --testPathPattern=\"${testFiles.join('|')}\" --passWithNoTests`;\n\n      const output = execSync(testCommand, {\n        encoding: 'utf8',\n        timeout: this.config.testTimeout,\n        stdio: 'pipe'\n      });\n\n      return this.parseTestResults(output);\n    } catch (error: any) {\n      // Parse error output for test results\n      const errorOutput = error.stdout || error.stderr || '';\n      return this.parseTestResults(errorOutput);\n    }\n  }\n\n  private parseTestResults(output: string): { passed: number; failed: number; total: number } {\n    const outputStr = typeof output === 'string' ? output : output.toString();\n\n    const passedMatch = outputStr.match(/(\\d+) passed/);\n    const failedMatch = outputStr.match(/(\\d+) failed/);\n\n    const passed = passedMatch ? parseInt(passedMatch[1]) : 0;\n    const failed = failedMatch ? parseInt(failedMatch[1]) : 0;\n    const total = passed + failed;\n\n    return { passed, failed, total };\n  }\n\n  private async getCurrentUnusedVariableCount(): Promise<number> {\n    try {\n      const output = execSync('yarn lint --format=json', {\n        encoding: 'utf8',\n        stdio: 'pipe'\n      });\n\n      const lintResults = JSON.parse(output);\n      let unusedVarCount = 0;\n\n      for (const result of lintResults) {\n        for (const message of result.messages) {\n          if (message.ruleId === '@typescript-eslint/no-unused-vars') {\n            unusedVarCount++;\n          }\n        }\n      }\n\n      return unusedVarCount;\n    } catch (error) {\n      this.log('warn', `Failed to get unused variable count: ${error}`);\n      return 0;\n    }\n  }\n\n  private async getCurrentBuildErrorCount(): Promise<number> {\n    try {\n      execSync('yarn tsc --noEmit --skipLibCheck', {\n        stdio: 'pipe',\n        timeout: 30000\n      });\n      return 0; // No errors\n    } catch (error: any) {\n      const errorOutput = error.stdout || error.stderr || '';\n      const errorMatches = errorOutput.match(/error TS\\d+:/g) || [];\n      return errorMatches.length;\n    }\n  }\n\n  private calculateIntegrityScore(results: ServiceIntegrationResult[]): number {\n    if (results.length === 0) return 100;\n\n    const passedResults = results.filter(r => r.passed).length;\n    return Math.round((passedResults / results.length) * 100);\n  }\n\n  private calculateOverallAssessment(qualityMetrics: QualityMetrics): ComprehensiveQualityReport['overallAssessment'] {\n    const score = qualityMetrics.overallQualityScore;\n\n    if (score >= 95) return 'excellent';\n    if (score >= 85) return 'good';\n    if (score >= 70) return 'acceptable';\n    if (score >= 50) return 'needs-improvement';\n    return 'critical';\n  }\n\n  private generateActionItems(serviceResults: ServiceIntegrationResult[], qualityMetrics: QualityMetrics): string[] {\n    const actionItems: string[] = [];\n\n    // Target-based action items\n    if (!qualityMetrics.targetAchievement.reductionAchieved) {\n      actionItems.push(`Achieve ${qualityMetrics.targetAchievement.reductionTarget}% unused variable reduction target`);\n    }\n\n    if (!qualityMetrics.targetAchievement.stabilityAchieved) {\n      actionItems.push('Resolve all build errors to achieve 100% build stability');\n    }\n\n    // Service-specific action items\n    const failedResults = serviceResults.filter(r => !r.passed);\n    if (failedResults.length > 0) {\n      actionItems.push(`Fix ${failedResults.length} failed service validations`);\n    }\n\n    // Quality-based action items\n    if (qualityMetrics.overallQualityScore < 85) {\n      actionItems.push('Improve overall quality score to production-ready level (85+)');\n    }\n\n    return actionItems;\n  }\n\n  private generateRecommendations(serviceResults: ServiceIntegrationResult[], qualityMetrics: QualityMetrics): string[] {\n    const recommendations: string[] = [];\n\n    // Collect all recommendations from service results\n    for (const result of serviceResults) {\n      recommendations.push(...result.recommendations);\n    }\n\n    // Add quality-based recommendations\n    if (qualityMetrics.apiIntegrityScore < 90) {\n      recommendations.push('Review API endpoint implementations for potential issues');\n    }\n\n    if (qualityMetrics.serviceIntegrityScore < 90) {\n      recommendations.push('Verify service method exports and functionality');\n    }\n\n    // Remove duplicates\n    return [...new Set(recommendations)];\n  }\n\n  // Utility methods\n\n  private extractHttpMethod(line: string): 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | undefined {\n    const methodMatch = line.match(/\\.(get|post|put|delete|patch)\\s*\\(/i);\n    return methodMatch ? methodMatch[1].toUpperCase() as any : undefined;\n  }\n\n  private extractParameters(line: string): string[] {\n    const paramMatch = line.match(/\\(([^)]*)\\)/);\n    if (!paramMatch) return [];\n\n    return paramMatch[1]\n      .split(',')\n      .map(param => param.trim().split(':')[0].trim())\n      .filter(param => param.length > 0);\n  }\n\n  private extractDependencies(line: string): string[] {\n    const dependencies: string[] = [];\n\n    // Extract import dependencies\n    const importMatch = line.match(/from\\s+['\"]([^'\"]+)['\"]/);\n    if (importMatch) {\n      dependencies.push(importMatch[1]);\n    }\n\n    return dependencies;\n  }\n\n  /**\n   * Get quality report for a specific batch\n   */\n  getQualityReport(batchId: string): ComprehensiveQualityReport | undefined {\n    return this.qualityReports.get(batchId);\n  }\n\n  /**\n   * Get all quality reports\n   */\n  getAllQualityReports(): ComprehensiveQualityReport[] {\n    return Array.from(this.qualityReports.values());\n  }\n\n  /**\n   * Export quality reports to file system\n   */\n  async exportQualityReports(outputPath: string = './quality-reports'): Promise<void> {\n    try {\n      if (!fs.existsSync(outputPath)) {\n        fs.mkdirSync(outputPath, { recursive: true });\n      }\n\n      for (const report of this.getAllQualityReports()) {\n        const reportPath = path.join(outputPath, `service-integration-${report.batchId}.json`);\n        fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));\n      }\n\n      this.log('info', `📊 Quality reports exported to ${outputPath}`);\n    } catch (error) {\n      this.log('error', `❌ Failed to export quality reports: ${error}`);\n    }\n  }\n\n  private log(level: 'debug' | 'info' | 'warn' | 'error', message: string): void {\n    const levels = { debug: 0, info: 1, warn: 2, error: 3 };\n    const configLevel = levels[this.config.logLevel];\n    const messageLevel = levels[level];\n\n    if (messageLevel >= configLevel) {\n      const timestamp = new Date().toISOString();\n      const prefix = level.toUpperCase().padEnd(5);\n      console.log(`[${timestamp}] ${prefix} ${message}`);\n    }\n  }\n}\n"],"version":3}