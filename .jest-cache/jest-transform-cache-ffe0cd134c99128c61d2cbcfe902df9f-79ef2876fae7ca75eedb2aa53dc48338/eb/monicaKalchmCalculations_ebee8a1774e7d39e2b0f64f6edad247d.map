{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/monicaKalchmCalculations.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/monicaKalchmCalculations.ts"],"sourcesContent":["/**\n * Monica/Kalchm Constant Calculation System\n * \n * This module implements the core alchemical calculations for the Kalchm and Monica Constant system,\n * demonstrating the fundamental thermodynamic metrics used in astrological food recommendations.\n * \n * Based on: docs/notebooks/Kalchm_Monica_Constant_Calculations.ipynb\n */\n\nimport { ElementalProperties } from '@/types/alchemy';\n\n// ========== INTERFACES ==========\n\nexport interface AlchemicalProperties {\n  Spirit: number;\n  Essence: number;\n  Matter: number;\n  Substance: number;\n}\n\nexport interface ThermodynamicMetrics {\n  heat: number;\n  entropy: number;\n  reactivity: number;\n  gregsEnergy: number;\n  kalchm: number;\n  monica: number;\n}\n\nexport interface EnhancedAlchemicalResult {\n  alchemicalProperties: AlchemicalProperties;\n  elementalProperties: ElementalProperties;\n  thermodynamicMetrics: ThermodynamicMetrics;\n  compatibilityScore: number;\n  confidence: number;\n}\n\n// ========== CORE CALCULATION FUNCTIONS ==========\n\n/**\n * Calculate Heat: Measures active energy (Spirit & Fire vs all other properties)\n * Formula: Heat = (Spirit² + Fire²) / (Substance + Essence + Matter + Water + Air + Earth)²\n */\nexport function calculateHeat(\n  spirit: number,\n  fire: number,\n  substance: number,\n  essence: number,\n  matter: number,\n  water: number,\n  air: number,\n  earth: number\n): number {\n  const numerator = Math.pow(spirit, 2) + Math.pow(fire, 2);\n  const denominator = Math.pow(substance + essence + matter + water + air + earth, 2);\n  return denominator > 0 ? numerator / denominator : 0;\n}\n\n/**\n * Calculate Entropy: Measures disorder (active properties vs passive properties)\n * Formula: Entropy = (Spirit² + Substance² + Fire² + Air²) / (Essence + Matter + Earth + Water)²\n */\nexport function calculateEntropy(\n  spirit: number,\n  substance: number,\n  fire: number,\n  air: number,\n  essence: number,\n  matter: number,\n  earth: number,\n  water: number\n): number {\n  const numerator = Math.pow(spirit, 2) + Math.pow(substance, 2) + Math.pow(fire, 2) + Math.pow(air, 2);\n  const denominator = Math.pow(essence + matter + earth + water, 2);\n  return denominator > 0 ? numerator / denominator : 0;\n}\n\n/**\n * Calculate Reactivity: Measures potential for change (volatile properties vs stable properties)\n * Formula: Reactivity = (Spirit² + Substance² + Essence² + Fire² + Air² + Water²) / (Matter + Earth)²\n */\nexport function calculateReactivity(\n  spirit: number,\n  substance: number,\n  essence: number,\n  fire: number,\n  air: number,\n  water: number,\n  matter: number,\n  earth: number\n): number {\n  const numerator = Math.pow(spirit, 2) + Math.pow(substance, 2) + Math.pow(essence, 2) + \n                   Math.pow(fire, 2) + Math.pow(air, 2) + Math.pow(water, 2);\n  const denominator = Math.pow(matter + earth, 2);\n  return denominator > 0 ? numerator / denominator : 0;\n}\n\n/**\n * Calculate Greg's Energy: Overall energy balance\n * Formula: Greg's Energy = Heat - (Entropy × Reactivity)\n */\nexport function calculateGregsEnergy(heat: number, entropy: number, reactivity: number): number {\n  return heat - (entropy * reactivity);\n}\n\n/**\n * Calculate Kalchm (K_alchm): Alchemical equilibrium constant\n * Formula: K_alchm = (Spirit^Spirit × Essence^Essence) / (Matter^Matter × Substance^Substance)\n */\nexport function calculateKAlchm(spirit: number, essence: number, matter: number, substance: number): number {\n  // Ensure positive values and handle edge cases\n  const safeSpirit = Math.max(0.01, spirit);\n  const safeEssence = Math.max(0.01, essence);\n  const safeMatter = Math.max(0.01, matter);\n  const safeSubstance = Math.max(0.01, substance);\n  \n  const numerator = Math.pow(safeSpirit, safeSpirit) * Math.pow(safeEssence, safeEssence);\n  const denominator = Math.pow(safeMatter, safeMatter) * Math.pow(safeSubstance, safeSubstance);\n  \n  return denominator > 0 ? numerator / denominator : 1;\n}\n\n/**\n * Calculate Monica Constant: Dynamic system constant relating energy to equilibrium\n * Formula: M = -Greg's Energy / (Reactivity × ln(K_alchm))\n */\nexport function calculateMonicaConstant(gregsEnergy: number, reactivity: number, K_alchm: number): number {\n  const ln_K = Math.log(K_alchm);\n  \n  if (K_alchm > 0 && ln_K !== 0 && reactivity !== 0) {\n    return -gregsEnergy / (reactivity * ln_K);\n  } else {\n    return 1.0; // Default neutral value\n  }\n}\n\n// ========== HELPER FUNCTIONS ==========\n\n/**\n * Convert elemental properties to default alchemical properties\n * This provides a reasonable mapping when alchemical properties aren't available\n */\nexport function elementalToAlchemical(elemental: ElementalProperties): AlchemicalProperties {\n  return {\n    Spirit: elemental.Fire + (elemental.Air * 0.5), // Active, transformative\n    Essence: elemental.Water + (elemental.Air * 0.5), // Core nature, flowing\n    Matter: elemental.Earth + (elemental.Water * 0.3), // Physical, stable\n    Substance: elemental.Earth + (elemental.Fire * 0.2) // Foundation, structure\n  };\n}\n\n/**\n * Calculate complete thermodynamic metrics from properties\n */\nexport function calculateThermodynamicMetrics(\n  alchemical: AlchemicalProperties,\n  elemental: ElementalProperties\n): ThermodynamicMetrics {\n  const { Spirit, Essence, Matter, Substance } = alchemical;\n  const { Fire, Water, Air, Earth } = elemental;\n  \n  const heat = calculateHeat(Spirit, Fire, Substance, Essence, Matter, Water, Air, Earth);\n  const entropy = calculateEntropy(Spirit, Substance, Fire, Air, Essence, Matter, Earth, Water);\n  const reactivity = calculateReactivity(Spirit, Substance, Essence, Fire, Air, Water, Matter, Earth);\n  const gregsEnergy = calculateGregsEnergy(heat, entropy, reactivity);\n  const kalchm = calculateKAlchm(Spirit, Essence, Matter, Substance);\n  const monica = calculateMonicaConstant(gregsEnergy, reactivity, kalchm);\n  \n  return {\n    heat,\n    entropy,\n    reactivity,\n    gregsEnergy,\n    kalchm,\n    monica\n  };\n}\n\n/**\n * Calculate compatibility between two sets of properties using Monica/Kalchm metrics\n */\nexport function calculateMonicaKalchmCompatibility(\n  properties1: { alchemical?: AlchemicalProperties; elemental: ElementalProperties },\n  properties2: { alchemical?: AlchemicalProperties; elemental: ElementalProperties }\n): number {\n  // Convert elemental to alchemical if needed\n  const alchemical1 = properties1.alchemical || elementalToAlchemical(properties1.elemental);\n  const alchemical2 = properties2.alchemical || elementalToAlchemical(properties2.elemental);\n  \n  // Calculate thermodynamic metrics for both\n  const metrics1 = calculateThermodynamicMetrics(alchemical1, properties1.elemental);\n  const metrics2 = calculateThermodynamicMetrics(alchemical2, properties2.elemental);\n  \n  // Calculate compatibility based on Monica constant similarity\n  const monicaDiff = Math.abs(metrics1.monica - metrics2.monica);\n  const kalchmRatio = Math.min(metrics1.kalchm, metrics2.kalchm) / Math.max(metrics1.kalchm, metrics2.kalchm);\n  const energyHarmony = 1 - Math.abs(metrics1.gregsEnergy - metrics2.gregsEnergy) / 10; // Normalize to 0-1\n  \n  // Weighted compatibility score\n  const compatibility = (\n    (1 - Math.min(monicaDiff / 5, 1)) * 0.4 + // Monica similarity (40%)\n    kalchmRatio * 0.3 + // Kalchm harmony (30%)\n    Math.max(0, energyHarmony) * 0.3 // Energy harmony (30%)\n  );\n  \n  return Math.max(0, Math.min(1, compatibility));\n}\n\n/**\n * Calculate moment Monica constant from current elemental state\n * Used for real-time compatibility calculations\n */\nexport function calculateMomentMonicaConstant(elementalProfile: ElementalProperties): number {\n  const alchemical = elementalToAlchemical(elementalProfile);\n  const metrics = calculateThermodynamicMetrics(alchemical, elementalProfile);\n  return metrics.monica;\n}\n\n/**\n * Calculate Kalchm harmony for multiple items (e.g., cuisine combinations)\n */\nexport function calculateKalchmHarmony(items: Array<{ elemental: ElementalProperties; alchemical?: AlchemicalProperties }>): number {\n  if (items.length === 0) return 0.5;\n  if (items.length === 1) return 0.8;\n  \n  let totalHarmony = 0;\n  let comparisons = 0;\n  \n  // Compare each item with every other item\n  for (let i = 0; i < items.length; i++) {\n    for (let j = i + 1; j < items.length; j++) {\n      const compatibility = calculateMonicaKalchmCompatibility(items[i], items[j]);\n      totalHarmony += compatibility;\n      comparisons++;\n    }\n  }\n  \n  return comparisons > 0 ? totalHarmony / comparisons : 0.5;\n}\n\n/**\n * Enhanced analysis with confidence scoring\n */\nexport function performEnhancedAnalysis(\n  item: { elemental: ElementalProperties; alchemical?: AlchemicalProperties },\n  referenceProfile: ElementalProperties\n): EnhancedAlchemicalResult {\n  const alchemical = item.alchemical || elementalToAlchemical(item.elemental);\n  const thermodynamicMetrics = calculateThermodynamicMetrics(alchemical, item.elemental);\n  \n  const compatibilityScore = calculateMonicaKalchmCompatibility(\n    { alchemical, elemental: item.elemental },\n    { elemental: referenceProfile }\n  );\n  \n  // Calculate confidence based on metric stability\n  const confidence = Math.min(1, Math.max(0.3, \n    1 - (Math.abs(thermodynamicMetrics.monica - 1) / 5) // Higher confidence when Monica is closer to 1\n  ));\n  \n  return {\n    alchemicalProperties: alchemical,\n    elementalProperties: item.elemental,\n    thermodynamicMetrics,\n    compatibilityScore,\n    confidence\n  };\n}\n\n// ========== EXPORT DEFAULT CALCULATION SUITE ==========\n\nexport const MonicaKalchmCalculations = {\n  calculateHeat,\n  calculateEntropy,\n  calculateReactivity,\n  calculateGregsEnergy,\n  calculateKAlchm,\n  calculateMonicaConstant,\n  calculateThermodynamicMetrics,\n  calculateMonicaKalchmCompatibility,\n  calculateMomentMonicaConstant,\n  calculateKalchmHarmony,\n  performEnhancedAnalysis,\n  elementalToAlchemical\n};\n\nexport default MonicaKalchmCalculations;"],"version":3}