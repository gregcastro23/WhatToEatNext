{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/calculations/culinary/recipeMatching.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/calculations/culinary/recipeMatching.ts"],"sourcesContent":["/**\n * Recipe Matching Module\n * \n * Handles recipe compatibility calculations based on alchemical and elemental properties\n */\n\n\nimport type { ElementalProperties} from '@/types/alchemy';\nimport { \n  KalchmResult, \n  ThermodynamicResults, \n  toElementalProperties \n} from '../core/kalchmEngine';\n\n\n/**\n * Recipe compatibility result\n */\nexport interface RecipeCompatibilityResult {\n  compatibilityScore: number;\n  elementalAlignment: number;\n  alchemicalAlignment: number;\n  thermodynamicAlignment: number;\n  kalchmAlignment: number;\n  monicaAlignment: number;\n  recommendations: string[];\n  absoluteElementalMatch: number;\n  relativeElementalMatch: number;\n  dominantElementMatch: number;\n  energeticResonance: number;\n}\n\n/**\n * Calculate recipe compatibility with current moment's alchemical profile\n */\nexport function calculateRecipeCompatibility(\n  recipeElementalProperties: ElementalProperties,\n  currentMomentKalchmResult: KalchmResult\n): RecipeCompatibilityResult {\n  \n  // Convert ElementalValues to ElementalProperties for compatibility\n  const currentMomentElementalProperties = toElementalProperties(currentMomentKalchmResult);\n  \n  // Calculate comprehensive elemental alignments\n  const absoluteElementalMatch = calculateAbsoluteElementalAlignment(\n    recipeElementalProperties,\n    currentMomentElementalProperties\n  );\n\n  const relativeElementalMatch = calculateRelativeElementalAlignment(\n    recipeElementalProperties,\n    currentMomentElementalProperties\n  );\n\n  const dominantElementMatch = calculateDominantElementAlignment(\n    recipeElementalProperties,\n    currentMomentElementalProperties\n  );\n\n  // Calculate alchemical alignment using kalchm\n  const kalchmAlignment = calculateKalchmAlignment(\n    recipeElementalProperties,\n    currentMomentKalchmResult\n  );\n\n  // Calculate monica constant alignment for cooking method compatibility\n  const monicaAlignment = calculateMonicaAlignment(\n    recipeElementalProperties,\n    currentMomentKalchmResult\n  );\n\n  // Calculate thermodynamic alignment\n  const thermodynamicAlignment = calculateEnhancedThermodynamicAlignment(\n    recipeElementalProperties,\n    currentMomentKalchmResult.thermodynamics\n  );\n\n  // Calculate energetic resonance (how well the energies harmonize)\n  const energeticResonance = calculateEnergeticResonance(\n    recipeElementalProperties,\n    currentMomentKalchmResult\n  );\n\n  // Enhanced weighted compatibility score\n  const compatibilityScore = calculateWeightedCompatibilityScore({\n    absoluteElementalMatch,\n    relativeElementalMatch,\n    dominantElementMatch,\n    kalchmAlignment,\n    monicaAlignment,\n    thermodynamicAlignment,\n    energeticResonance\n  });\n\n  // Combined elemental alignment for backward compatibility\n  const elementalAlignment = (\n    absoluteElementalMatch * 0.4 +\n    relativeElementalMatch * 0.35 +\n    dominantElementMatch * 0.25\n  );\n\n  // Generate enhanced recommendations\n  const recommendations = generateEnhancedRecipeRecommendations(\n    compatibilityScore,\n    {\n      absoluteElementalMatch,\n      relativeElementalMatch,\n      dominantElementMatch,\n      kalchmAlignment,\n      monicaAlignment,\n      thermodynamicAlignment,\n      energeticResonance\n    }\n  );\n\n  return {\n    compatibilityScore,\n    elementalAlignment,\n    alchemicalAlignment: kalchmAlignment,\n    thermodynamicAlignment,\n    kalchmAlignment,\n    monicaAlignment,\n    recommendations,\n    absoluteElementalMatch,\n    relativeElementalMatch,\n    dominantElementMatch,\n    energeticResonance\n  };\n}\n\n/**\n * Calculate absolute elemental alignment (direct element-to-element comparison)\n */\nfunction calculateAbsoluteElementalAlignment(\n  recipeElements: ElementalProperties,\n  currentMomentElements: ElementalProperties\n): number {\n  const elements = ['Fire', 'Water', 'Earth', 'Air'] as const;\n  let totalSimilarity = 0;\n  let totalWeight = 0;\n\n  for (const element of elements) {\n    const recipeValue = recipeElements[element] || 0;\n    const currentMomentValue = currentMomentElements[element] || 0;\n    \n    // Weight by the importance of this element (higher values get more weight)\n    const weight = Math.max(recipeValue, currentMomentValue);\n    \n    // Calculate similarity (1 = identical, 0 = completely different)\n    const similarity = 1 - Math.abs(recipeValue - currentMomentValue);\n    \n    totalSimilarity += similarity * weight;\n    totalWeight += weight;\n  }\n\n  return totalWeight > 0 ? totalSimilarity / totalWeight : 0.5;\n}\n\n/**\n * Calculate relative elemental alignment using ratios\n * Example: Fire/(Water+Earth+Air) vs Fire/(Water+Earth+Air)\n */\nfunction calculateRelativeElementalAlignment(\n  recipeElements: ElementalProperties,\n  currentMomentElements: ElementalProperties\n): number {\n  const elements = ['Fire', 'Water', 'Earth', 'Air'] as const;\n  let totalSimilarity = 0;\n  let count = 0;\n\n  for (const element of elements) {\n    // Calculate relative values for both recipe and current moment\n    const otherElements = elements.filter(e => e !== element);\n    \n    const recipeTotal = otherElements.reduce((sum, e) => sum + (recipeElements[e] || 0), 0);\n    const currentMomentTotal = otherElements.reduce((sum, e) => sum + (currentMomentElements[e] || 0), 0);\n    \n    const recipeRelative = recipeTotal > 0 ? (recipeElements[element] || 0) / recipeTotal : 0;\n    const currentMomentRelative = currentMomentTotal > 0 ? (currentMomentElements[element] || 0) / currentMomentTotal : 0;\n    \n    // Calculate similarity between relative values\n    const similarity = 1 - Math.abs(recipeRelative - currentMomentRelative);\n    \n    totalSimilarity += similarity;\n    count++;\n  }\n\n  return count > 0 ? totalSimilarity / count : 0.5;\n}\n\n/**\n * Calculate dominant element alignment\n */\nfunction calculateDominantElementAlignment(\n  recipeElements: ElementalProperties,\n  currentMomentElements: ElementalProperties\n): number {\n  // Get dominant elements for both\n  const recipeDominant = getDominantElement(recipeElements);\n  const currentMomentDominant = getDominantElement(currentMomentElements);\n  \n  // Perfect match if same dominant element\n  if (recipeDominant === currentMomentDominant) {\n    return 1.0;\n  }\n  \n  // Check elemental harmony (some elements work well together)\n  const elementalHarmony = {\n    'Fire': ['Air', 'Fire'], // Fire works with Air and itself\n    'Water': ['Earth', 'Water'], // Water works with Earth and itself\n    'Earth': ['Water', 'Earth'], // Earth works with Water and itself\n    'Air': ['Fire', 'Air'] // Air works with Fire and itself\n  };\n  \n  const isHarmonious = elementalHarmony[recipeDominant]?.includes(currentMomentDominant) || false;\n  return isHarmonious ? 0.8 : 0.4;\n}\n\n/**\n * Calculate kalchm alignment between recipe and current moment\n */\nfunction calculateKalchmAlignment(\n  recipeElements: ElementalProperties,\n  currentMomentKalchmResult: KalchmResult\n): number {\n  // Calculate kalchm for the recipe\n  const recipeKalchm = calculateRecipeKalchm(recipeElements);\n  const currentMomentKalchm = currentMomentKalchmResult.thermodynamics.kalchm;\n  \n  // Both high kalchm values indicate good alchemical potential\n  if (recipeKalchm > 5 && currentMomentKalchm > 5) {\n    return 0.9; // Both are alchemically potent\n  }\n  \n  // Calculate similarity between kalchm values (with logarithmic scaling)\n  const logRecipe = Math.log10(Math.max(0.1, recipeKalchm));\n  const logCurrentMoment = Math.log10(Math.max(0.1, currentMomentKalchm));\n  \n  const similarity = 1 - Math.abs(logRecipe - logCurrentMoment) / 4; // Normalize by reasonable range\n  return Math.max(0.1, Math.min(1.0, similarity));\n}\n\n/**\n * Calculate monica constant alignment for cooking method compatibility\n */\nfunction calculateMonicaAlignment(\n  recipeElements: ElementalProperties,\n  currentMomentKalchmResult: KalchmResult\n): number {\n  // Monica constant indicates how well the alchemical transformation will proceed\n  const currentMomentMonica = currentMomentKalchmResult.thermodynamics.monicaConstant;\n  \n  if (isNaN(currentMomentMonica) || !isFinite(currentMomentMonica)) {\n    return 0.5; // Neutral if monica can't be calculated\n  }\n  \n  // Higher monica values generally indicate better transformation potential\n  // Scale monica value to 0-1 range\n  const scaledMonica = Math.tanh(Math.abs(currentMomentMonica) / 10); // tanh provides nice 0-1 scaling\n  \n  return Math.max(0.2, Math.min(1.0, scaledMonica));\n}\n\n/**\n * Enhanced thermodynamic alignment calculation\n */\nfunction calculateEnhancedThermodynamicAlignment(\n  recipeElements: ElementalProperties,\n  userThermodynamics: ThermodynamicResults\n): number {\n  // Estimate recipe thermodynamics from elemental properties\n  const recipeThermodynamics = estimateRecipeThermodynamics(recipeElements);\n  \n  // Calculate alignment for each thermodynamic property\n  const heatAlignment = 1 - Math.abs(recipeThermodynamics.heat - userThermodynamics.heat);\n  const entropyAlignment = 1 - Math.abs(recipeThermodynamics.entropy - userThermodynamics.entropy);\n  const reactivityAlignment = 1 - Math.abs(recipeThermodynamics.reactivity - userThermodynamics.reactivity);\n  const energyAlignment = calculateEnergyAlignment(recipeThermodynamics.gregsEnergy, userThermodynamics.gregsEnergy);\n  \n  // Weighted average (heat and reactivity are most important for cooking)\n  return (\n    heatAlignment * 0.3 +\n    entropyAlignment * 0.2 +\n    reactivityAlignment * 0.3 +\n    energyAlignment * 0.2\n  );\n}\n\n/**\n * Calculate energetic resonance between recipe and current moment\n */\nfunction calculateEnergeticResonance(\n  recipeElements: ElementalProperties,\n  currentMomentKalchmResult: KalchmResult\n): number {\n  // Resonance occurs when the energetic patterns harmonize\n  const recipeGregsEnergy = calculateRecipeGregsEnergy(recipeElements);\n  const currentMomentGregsEnergy = currentMomentKalchmResult.thermodynamics.gregsEnergy || 0;\n  \n  // Calculate frequency-like resonance\n  const energyRatio = recipeGregsEnergy !== 0 ? currentMomentGregsEnergy / recipeGregsEnergy : 1;\n  \n  // Resonance occurs at simple ratios (1:1, 2:1, 1:2, 3:2, etc.)\n  const simpleRatios = [1, 0.5, 2, 0.67, 1.5, 0.75, 1.33];\n  const resonanceScore = Math.max(...simpleRatios.map(ratio => \n    1 - Math.abs(energyRatio - ratio) / ratio\n  ));\n  \n  return Math.max(0.1, Math.min(1.0, resonanceScore));\n}\n\n/**\n * Calculate weighted compatibility score using all factors\n */\nfunction calculateWeightedCompatibilityScore(scores: {\n  absoluteElementalMatch: number;\n  relativeElementalMatch: number;\n  dominantElementMatch: number;\n  kalchmAlignment: number;\n  monicaAlignment: number;\n  thermodynamicAlignment: number;\n  energeticResonance: number;\n}): number {\n  // Enhanced weighting system\n  const weights = {\n    absoluteElementalMatch: 0.20,    // 20% - Direct elemental similarity\n    relativeElementalMatch: 0.18,    // 18% - Proportional elemental similarity\n    dominantElementMatch: 0.15,      // 15% - Dominant element compatibility\n    kalchmAlignment: 0.20,           // 20% - Alchemical potential alignment\n    monicaAlignment: 0.10,           // 10% - Cooking transformation potential\n    thermodynamicAlignment: 0.12,    // 12% - Energy state compatibility\n    energeticResonance: 0.05         // 5% - Harmonic resonance bonus\n  };\n\n  let totalScore = 0;\n  let totalWeight = 0;\n\n  for (const [factor, weight] of Object.entries(weights)) {\n    const score = scores[factor as keyof typeof scores];\n    if (typeof score === 'number' && !isNaN(score)) {\n      totalScore += score * weight;\n      totalWeight += weight;\n    }\n  }\n\n  return totalWeight > 0 ? totalScore / totalWeight : 0.5;\n}\n\n/**\n * Helper functions\n */\nfunction getDominantElement(elements: ElementalProperties): keyof ElementalProperties {\n  const entries = Object.entries(elements) as [keyof ElementalProperties, number][];\n  return entries.reduce((dominant, [element, value]) => \n    value > elements[dominant] ? element : dominant\n  , 'Fire');\n}\n\nfunction calculateRecipeKalchm(elements: ElementalProperties): number {\n  const { Fire, Water, Earth, Air } = elements;\n  \n  // Map to alchemical principles\n  const Spirit = Fire || 0.001;\n  const Essence = Water || 0.001;\n  const Matter = Earth || 0.001;\n  const Substance = Air || 0.001;\n  \n  const kalchm = (Math.pow(Spirit, Spirit) * Math.pow(Essence, Essence)) / \n                 (Math.pow(Matter, Matter) * Math.pow(Substance, Substance));\n  \n  return isFinite(kalchm) ? kalchm : 1.0;\n}\n\nfunction estimateRecipeThermodynamics(elements: ElementalProperties) {\n  const { Fire, Water, Earth, Air } = elements;\n  \n  return {\n    heat: (Fire + Air * 0.5) / 1.5, // Fire and Air contribute to heat\n    entropy: (Water + Air) / 2,      // Water and Air contribute to entropy\n    reactivity: (Fire + Water) / 2,  // Fire and Water are reactive\n    gregsEnergy: (Fire + Water + Earth + Air) / 4 // Overall energy\n  };\n}\n\nfunction calculateRecipeGregsEnergy(elements: ElementalProperties): number {\n  const thermodynamics = estimateRecipeThermodynamics(elements);\n  return thermodynamics.heat - (thermodynamics.entropy * thermodynamics.reactivity);\n}\n\nfunction calculateEnergyAlignment(recipeEnergy: number, userEnergy: number): number {\n  if (Math.abs(recipeEnergy) < 0.001 && Math.abs(userEnergy) < 0.001) {\n    return 1.0; // Both are near zero\n  }\n  \n  const maxEnergy = Math.max(Math.abs(recipeEnergy), Math.abs(userEnergy));\n  const energyDiff = Math.abs(recipeEnergy - userEnergy);\n  \n  return 1 - (energyDiff / (maxEnergy + 1)); // +1 to prevent division issues\n}\n\n/**\n * Generate enhanced recommendations based on all scoring factors\n */\nfunction generateEnhancedRecipeRecommendations(\n  overallScore: number,\n  scores: {\n    absoluteElementalMatch: number;\n    relativeElementalMatch: number;\n    dominantElementMatch: number;\n    kalchmAlignment: number;\n    monicaAlignment: number;\n    thermodynamicAlignment: number;\n    energeticResonance: number;\n  }\n): string[] {\n  const recommendations: string[] = [];\n\n  // Overall compatibility\n  if (overallScore >= 0.9) {\n    recommendations.push(\"Exceptional alchemical compatibility - perfect for transformation\");\n  } else if (overallScore >= 0.8) {\n    recommendations.push(\"Excellent elemental harmony - highly recommended\");\n  } else if (overallScore >= 0.7) {\n    recommendations.push(\"Good energetic alignment - suitable for your current state\");\n  } else if (overallScore >= 0.6) {\n    recommendations.push(\"Moderate compatibility - may provide gentle shift\");\n  } else {\n    recommendations.push(\"Lower compatibility - consider timing or preparation adjustments\");\n  }\n\n  // Specific factor recommendations\n  if (scores.kalchmAlignment > 0.8) {\n    recommendations.push(\"High alchemical potential - excellent for spiritual nourishment\");\n  }\n  \n  if (scores.monicaAlignment > 0.8) {\n    recommendations.push(\"Optimal for transformation cooking methods\");\n  }\n  \n  if (scores.energeticResonance > 0.7) {\n    recommendations.push(\"Strong energetic resonance - will enhance your natural rhythms\");\n  }\n  \n  if (scores.dominantElementMatch > 0.8) {\n    recommendations.push(\"Perfect elemental match - will reinforce your dominant energy\");\n  }\n\n  // Specific guidance based on weak areas\n  if (scores.thermodynamicAlignment < 0.4) {\n    recommendations.push(\"Consider adjusting cooking method to improve energetic compatibility\");\n  }\n\n  return recommendations;\n}\n\nexport default {\n  calculateRecipeCompatibility,\n  // Helper functions for direct access if needed\n  calculateAbsoluteElementalAlignment,\n  calculateRelativeElementalAlignment,\n  calculateDominantElementAlignment,\n  calculateKalchmAlignment,\n  calculateMonicaAlignment,\n  calculateEnhancedThermodynamicAlignment,\n  calculateEnergeticResonance\n}; "],"version":3}