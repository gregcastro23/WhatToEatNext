9f58c90337d84bc85efbadabdf485c57
"use strict";
/**
 * Monica/Kalchm Constant Calculation System
 *
 * This module implements the core alchemical calculations for the Kalchm and Monica Constant system,
 * demonstrating the fundamental thermodynamic metrics used in astrological food recommendations.
 *
 * Based on: docs/notebooks/Kalchm_Monica_Constant_Calculations.ipynb
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonicaKalchmCalculations = exports.performEnhancedAnalysis = exports.calculateKalchmHarmony = exports.calculateMomentMonicaConstant = exports.calculateMonicaKalchmCompatibility = exports.calculateThermodynamicMetrics = exports.elementalToAlchemical = exports.calculateMonicaConstant = exports.calculateKAlchm = exports.calculateGregsEnergy = exports.calculateReactivity = exports.calculateEntropy = exports.calculateHeat = void 0;
// ========== CORE CALCULATION FUNCTIONS ==========
/**
 * Calculate Heat: Measures active energy (Spirit & Fire vs all other properties)
 * Formula: Heat = (Spirit² + Fire²) / (Substance + Essence + Matter + Water + Air + Earth)²
 */
function calculateHeat(spirit, fire, substance, essence, matter, water, air, earth) {
    const numerator = Math.pow(spirit, 2) + Math.pow(fire, 2);
    const denominator = Math.pow(substance + essence + matter + water + air + earth, 2);
    return denominator > 0 ? numerator / denominator : 0;
}
exports.calculateHeat = calculateHeat;
/**
 * Calculate Entropy: Measures disorder (active properties vs passive properties)
 * Formula: Entropy = (Spirit² + Substance² + Fire² + Air²) / (Essence + Matter + Earth + Water)²
 */
function calculateEntropy(spirit, substance, fire, air, essence, matter, earth, water) {
    const numerator = Math.pow(spirit, 2) + Math.pow(substance, 2) + Math.pow(fire, 2) + Math.pow(air, 2);
    const denominator = Math.pow(essence + matter + earth + water, 2);
    return denominator > 0 ? numerator / denominator : 0;
}
exports.calculateEntropy = calculateEntropy;
/**
 * Calculate Reactivity: Measures potential for change (volatile properties vs stable properties)
 * Formula: Reactivity = (Spirit² + Substance² + Essence² + Fire² + Air² + Water²) / (Matter + Earth)²
 */
function calculateReactivity(spirit, substance, essence, fire, air, water, matter, earth) {
    const numerator = Math.pow(spirit, 2) + Math.pow(substance, 2) + Math.pow(essence, 2) +
        Math.pow(fire, 2) + Math.pow(air, 2) + Math.pow(water, 2);
    const denominator = Math.pow(matter + earth, 2);
    return denominator > 0 ? numerator / denominator : 0;
}
exports.calculateReactivity = calculateReactivity;
/**
 * Calculate Greg's Energy: Overall energy balance
 * Formula: Greg's Energy = Heat - (Entropy × Reactivity)
 */
function calculateGregsEnergy(heat, entropy, reactivity) {
    return heat - (entropy * reactivity);
}
exports.calculateGregsEnergy = calculateGregsEnergy;
/**
 * Calculate Kalchm (K_alchm): Alchemical equilibrium constant
 * Formula: K_alchm = (Spirit^Spirit × Essence^Essence) / (Matter^Matter × Substance^Substance)
 */
function calculateKAlchm(spirit, essence, matter, substance) {
    // Ensure positive values and handle edge cases
    const safeSpirit = Math.max(0.01, spirit);
    const safeEssence = Math.max(0.01, essence);
    const safeMatter = Math.max(0.01, matter);
    const safeSubstance = Math.max(0.01, substance);
    const numerator = Math.pow(safeSpirit, safeSpirit) * Math.pow(safeEssence, safeEssence);
    const denominator = Math.pow(safeMatter, safeMatter) * Math.pow(safeSubstance, safeSubstance);
    return denominator > 0 ? numerator / denominator : 1;
}
exports.calculateKAlchm = calculateKAlchm;
/**
 * Calculate Monica Constant: Dynamic system constant relating energy to equilibrium
 * Formula: M = -Greg's Energy / (Reactivity × ln(K_alchm))
 */
function calculateMonicaConstant(gregsEnergy, reactivity, K_alchm) {
    const ln_K = Math.log(K_alchm);
    if (K_alchm > 0 && ln_K !== 0 && reactivity !== 0) {
        return -gregsEnergy / (reactivity * ln_K);
    }
    else {
        return 1.0; // Default neutral value
    }
}
exports.calculateMonicaConstant = calculateMonicaConstant;
// ========== HELPER FUNCTIONS ==========
/**
 * Convert elemental properties to default alchemical properties
 * This provides a reasonable mapping when alchemical properties aren't available
 */
function elementalToAlchemical(elemental) {
    return {
        Spirit: elemental.Fire + (elemental.Air * 0.5),
        Essence: elemental.Water + (elemental.Air * 0.5),
        Matter: elemental.Earth + (elemental.Water * 0.3),
        Substance: elemental.Earth + (elemental.Fire * 0.2) // Foundation, structure
    };
}
exports.elementalToAlchemical = elementalToAlchemical;
/**
 * Calculate complete thermodynamic metrics from properties
 */
function calculateThermodynamicMetrics(alchemical, elemental) {
    const { Spirit, Essence, Matter, Substance } = alchemical;
    const { Fire, Water, Air, Earth } = elemental;
    const heat = calculateHeat(Spirit, Fire, Substance, Essence, Matter, Water, Air, Earth);
    const entropy = calculateEntropy(Spirit, Substance, Fire, Air, Essence, Matter, Earth, Water);
    const reactivity = calculateReactivity(Spirit, Substance, Essence, Fire, Air, Water, Matter, Earth);
    const gregsEnergy = calculateGregsEnergy(heat, entropy, reactivity);
    const kalchm = calculateKAlchm(Spirit, Essence, Matter, Substance);
    const monica = calculateMonicaConstant(gregsEnergy, reactivity, kalchm);
    return {
        heat,
        entropy,
        reactivity,
        gregsEnergy,
        kalchm,
        monica
    };
}
exports.calculateThermodynamicMetrics = calculateThermodynamicMetrics;
/**
 * Calculate compatibility between two sets of properties using Monica/Kalchm metrics
 */
function calculateMonicaKalchmCompatibility(properties1, properties2) {
    // Convert elemental to alchemical if needed
    const alchemical1 = properties1.alchemical || elementalToAlchemical(properties1.elemental);
    const alchemical2 = properties2.alchemical || elementalToAlchemical(properties2.elemental);
    // Calculate thermodynamic metrics for both
    const metrics1 = calculateThermodynamicMetrics(alchemical1, properties1.elemental);
    const metrics2 = calculateThermodynamicMetrics(alchemical2, properties2.elemental);
    // Calculate compatibility based on Monica constant similarity
    const monicaDiff = Math.abs(metrics1.monica - metrics2.monica);
    const kalchmRatio = Math.min(metrics1.kalchm, metrics2.kalchm) / Math.max(metrics1.kalchm, metrics2.kalchm);
    const energyHarmony = 1 - Math.abs(metrics1.gregsEnergy - metrics2.gregsEnergy) / 10; // Normalize to 0-1
    // Weighted compatibility score
    const compatibility = ((1 - Math.min(monicaDiff / 5, 1)) * 0.4 + // Monica similarity (40%)
        kalchmRatio * 0.3 + // Kalchm harmony (30%)
        Math.max(0, energyHarmony) * 0.3 // Energy harmony (30%)
    );
    return Math.max(0, Math.min(1, compatibility));
}
exports.calculateMonicaKalchmCompatibility = calculateMonicaKalchmCompatibility;
/**
 * Calculate moment Monica constant from current elemental state
 * Used for real-time compatibility calculations
 */
function calculateMomentMonicaConstant(elementalProfile) {
    const alchemical = elementalToAlchemical(elementalProfile);
    const metrics = calculateThermodynamicMetrics(alchemical, elementalProfile);
    return metrics.monica;
}
exports.calculateMomentMonicaConstant = calculateMomentMonicaConstant;
/**
 * Calculate Kalchm harmony for multiple items (e.g., cuisine combinations)
 */
function calculateKalchmHarmony(items) {
    if (items.length === 0)
        return 0.5;
    if (items.length === 1)
        return 0.8;
    let totalHarmony = 0;
    let comparisons = 0;
    // Compare each item with every other item
    for (let i = 0; i < items.length; i++) {
        for (let j = i + 1; j < items.length; j++) {
            const compatibility = calculateMonicaKalchmCompatibility(items[i], items[j]);
            totalHarmony += compatibility;
            comparisons++;
        }
    }
    return comparisons > 0 ? totalHarmony / comparisons : 0.5;
}
exports.calculateKalchmHarmony = calculateKalchmHarmony;
/**
 * Enhanced analysis with confidence scoring
 */
function performEnhancedAnalysis(item, referenceProfile) {
    const alchemical = item.alchemical || elementalToAlchemical(item.elemental);
    const thermodynamicMetrics = calculateThermodynamicMetrics(alchemical, item.elemental);
    const compatibilityScore = calculateMonicaKalchmCompatibility({ alchemical, elemental: item.elemental }, { elemental: referenceProfile });
    // Calculate confidence based on metric stability
    const confidence = Math.min(1, Math.max(0.3, 1 - (Math.abs(thermodynamicMetrics.monica - 1) / 5) // Higher confidence when Monica is closer to 1
    ));
    return {
        alchemicalProperties: alchemical,
        elementalProperties: item.elemental,
        thermodynamicMetrics,
        compatibilityScore,
        confidence
    };
}
exports.performEnhancedAnalysis = performEnhancedAnalysis;
// ========== EXPORT DEFAULT CALCULATION SUITE ==========
exports.MonicaKalchmCalculations = {
    calculateHeat,
    calculateEntropy,
    calculateReactivity,
    calculateGregsEnergy,
    calculateKAlchm,
    calculateMonicaConstant,
    calculateThermodynamicMetrics,
    calculateMonicaKalchmCompatibility,
    calculateMomentMonicaConstant,
    calculateKalchmHarmony,
    performEnhancedAnalysis,
    elementalToAlchemical
};
exports.default = exports.MonicaKalchmCalculations;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,