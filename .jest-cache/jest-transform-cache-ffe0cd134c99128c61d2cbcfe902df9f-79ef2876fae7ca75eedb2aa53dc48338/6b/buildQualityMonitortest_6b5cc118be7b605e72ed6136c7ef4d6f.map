{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/__tests__/buildQualityMonitor.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/__tests__/buildQualityMonitor.test.ts"],"sourcesContent":["/**\n * Tests for Build Quality Monitor\n */\n\nimport { \n  monitorBuildQuality,\n  getBuildQualityScore,\n  AlertType,\n  AlertSeverity\n} from '../buildQualityMonitor';\n\n// Mock child_process\njest.mock('child_process', () => ({\n  execSync: jest.fn()\n}));\n\n// Mock fs\njest.mock('fs', () => ({\n  existsSync: jest.fn(),\n  readdirSync: jest.fn(),\n  statSync: jest.fn()\n}));\n\n// Mock the logger\njest.mock('../logger', () => ({\n  logger: {\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n    debug: jest.fn()\n  }\n}));\n\nimport { execSync } from 'child_process';\nimport fs from 'fs';\n\nconst mockExecSync = execSync as jest.MockedFunction<typeof execSync>;\nconst mockExistsSync = fs.existsSync as jest.MockedFunction<typeof fs.existsSync>;\nconst mockReaddirSync = fs.readdirSync as jest.MockedFunction<typeof fs.readdirSync>;\nconst mockStatSync = fs.statSync as jest.MockedFunction<typeof fs.statSync>;\n\ndescribe('Build Quality Monitor', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Mock default file system responses\n    mockExistsSync.mockReturnValue(false);\n    mockReaddirSync.mockReturnValue([]);\n    mockStatSync.mockReturnValue({\n      isDirectory: () => false,\n      size: 1024\n    } as any);\n  });\n\n  describe('monitorBuildQuality', () => {\n    it('should generate comprehensive build quality report', async () => {\n      // Mock successful TypeScript compilation\n      mockExecSync.mockReturnValue('');\n\n      const report = await monitorBuildQuality();\n\n      expect(report).toBeDefined();\n      expect(report.buildMetrics).toBeDefined();\n      expect(report.performanceAnalysis).toBeDefined();\n      expect(report.memoryAnalysis).toBeDefined();\n      expect(report.qualityMetrics).toBeDefined();\n      expect(report.alerts).toBeDefined();\n      expect(report.recommendations).toBeDefined();\n      expect(report.timestamp).toBeInstanceOf(Date);\n    });\n\n    it('should detect build performance issues', async () => {\n      // Mock TypeScript compilation\n      mockExecSync.mockReturnValue('');\n\n      const report = await monitorBuildQuality();\n\n      expect(report.buildMetrics.duration).toBeGreaterThan(0);\n      expect(report.performanceAnalysis.currentBuildTime).toBeGreaterThan(0);\n    });\n\n    it('should detect TypeScript errors', async () => {\n      // Mock TypeScript output with errors\n      const mockTscOutput = [\n        'src/test1.ts(10,5): error TS2304: Cannot find name \\'test1\\'.',\n        'src/test2.ts(15,10): error TS2352: Conversion error.',\n        'src/test3.ts(20,15): error TS2345: Argument error.'\n      ].join('\\n');\n      \n      const error = new Error('TypeScript compilation failed') as any;\n      error.stdout = mockTscOutput;\n      mockExecSync.mockImplementation(() => {\n        throw error;\n      });\n\n      const report = await monitorBuildQuality();\n\n      expect(report.buildMetrics.errorCount).toBe(3);\n      expect(report.buildMetrics.success).toBe(false);\n    });\n\n    it('should generate performance alerts for slow builds', async () => {\n      // Mock TypeScript compilation\n      mockExecSync.mockReturnValue('');\n\n      const report = await monitorBuildQuality();\n\n      // Check if performance alerts are generated for slow builds\n      const performanceAlerts = report.alerts.filter(alert => \n        alert.type === AlertType.BUILD_PERFORMANCE\n      );\n      \n      // May or may not have alerts depending on actual timing\n      expect(performanceAlerts.length).toBeGreaterThanOrEqual(0);\n    });\n\n    it('should analyze bundle size when .next directory exists', async () => {\n      // Mock .next directory existence\n      mockExistsSync.mockImplementation((path: any) => {\n        return path.includes('.next');\n      });\n      \n      mockReaddirSync.mockReturnValue(['static', 'server', 'cache'] as any);\n      mockStatSync.mockReturnValue({\n        isDirectory: () => true,\n        size: 0\n      } as any);\n\n      const report = await monitorBuildQuality();\n\n      expect(report.buildMetrics.bundleSize).toBeDefined();\n      expect(report.buildMetrics.bundleSize.total).toBeGreaterThanOrEqual(0);\n    });\n\n    it('should estimate cache hit rate', async () => {\n      // Mock cache directory\n      mockExistsSync.mockImplementation((path: any) => {\n        return path.includes('cache');\n      });\n\n      const report = await monitorBuildQuality();\n\n      expect(report.buildMetrics.cacheHitRate).toBeGreaterThan(0);\n      expect(report.buildMetrics.cacheHitRate).toBeLessThanOrEqual(1);\n    });\n\n    it('should detect memory usage patterns', async () => {\n      const report = await monitorBuildQuality();\n\n      expect(report.memoryAnalysis.peakMemoryUsage).toBeGreaterThanOrEqual(0);\n      expect(report.memoryAnalysis.averageMemoryUsage).toBeGreaterThanOrEqual(0);\n      expect(report.memoryAnalysis.memoryOptimizationSuggestions).toBeDefined();\n      expect(Array.isArray(report.memoryAnalysis.memoryOptimizationSuggestions)).toBe(true);\n    });\n\n    it('should generate optimization recommendations', async () => {\n      const report = await monitorBuildQuality();\n\n      expect(Array.isArray(report.recommendations)).toBe(true);\n      \n      if (report.recommendations.length > 0) {\n        const recommendation = report.recommendations[0];\n        expect(recommendation.category).toBeDefined();\n        expect(recommendation.priority).toBeDefined();\n        expect(recommendation.impact).toBeDefined();\n        expect(recommendation.effort).toBeDefined();\n        expect(recommendation.description).toBeDefined();\n        expect(Array.isArray(recommendation.implementation)).toBe(true);\n      }\n    });\n\n    it('should calculate quality metrics', async () => {\n      mockExecSync.mockReturnValue('');\n\n      const report = await monitorBuildQuality();\n\n      expect(report.qualityMetrics.overallScore).toBeGreaterThanOrEqual(0);\n      expect(report.qualityMetrics.overallScore).toBeLessThanOrEqual(100);\n      expect(report.qualityMetrics.codeQuality).toBeDefined();\n      expect(report.qualityMetrics.buildQuality).toBeDefined();\n      expect(report.qualityMetrics.performanceQuality).toBeDefined();\n      expect(report.qualityMetrics.technicalDebt).toBeDefined();\n    });\n\n    it('should handle build failures gracefully', async () => {\n      // Mock complete build failure\n      mockExecSync.mockImplementation(() => {\n        throw new Error('Complete build failure');\n      });\n\n      const report = await monitorBuildQuality();\n\n      expect(report.buildMetrics.success).toBe(false);\n      expect(report.buildMetrics.errorCount).toBeGreaterThanOrEqual(0);\n    });\n\n    it('should analyze parallelization efficiency', async () => {\n      const report = await monitorBuildQuality();\n\n      expect(report.buildMetrics.parallelization.workers).toBeGreaterThan(0);\n      expect(report.buildMetrics.parallelization.efficiency).toBeGreaterThan(0);\n      expect(report.buildMetrics.parallelization.efficiency).toBeLessThanOrEqual(1);\n    });\n  });\n\n  describe('getBuildQualityScore', () => {\n    it('should return quality score between 0 and 100', async () => {\n      mockExecSync.mockReturnValue('');\n\n      const score = await getBuildQualityScore();\n\n      expect(score).toBeGreaterThanOrEqual(0);\n      expect(score).toBeLessThanOrEqual(100);\n    });\n\n    it('should return 0 on error', async () => {\n      mockExecSync.mockImplementation(() => {\n        throw new Error('Complete failure');\n      });\n\n      const score = await getBuildQualityScore();\n\n      expect(score).toBe(0);\n    });\n  });\n\n  describe('Performance Analysis', () => {\n    it('should identify build bottlenecks', async () => {\n      // Mock build with TypeScript errors (smaller number to avoid memory issues)\n      const mockTscOutput = [\n        'src/test1.ts(10,5): error TS2304: Cannot find name \\'test1\\'.',\n        'src/test2.ts(15,10): error TS2352: Conversion error.',\n        'src/test3.ts(20,15): error TS2345: Argument error.',\n        'src/test4.ts(25,20): error TS2698: Spread error.',\n        'src/test5.ts(30,25): error TS2362: Arithmetic error.'\n      ].join('\\n');\n      \n      const error = new Error('TypeScript compilation failed') as any;\n      error.stdout = mockTscOutput;\n      mockExecSync.mockImplementation(() => {\n        throw error;\n      });\n\n      const report = await monitorBuildQuality();\n\n      expect(report.performanceAnalysis.bottleneckAnalysis.length).toBeGreaterThan(0);\n      \n      const tsBottleneck = report.performanceAnalysis.bottleneckAnalysis.find(\n        b => b.phase === 'TypeScript Compilation'\n      );\n      expect(tsBottleneck).toBeDefined();\n    });\n\n    it('should analyze performance trends', async () => {\n      mockExecSync.mockReturnValue('');\n\n      const report = await monitorBuildQuality();\n\n      expect(['improving', 'stable', 'degrading']).toContain(report.performanceAnalysis.performanceTrend);\n    });\n\n    it('should calculate build time percentiles', async () => {\n      mockExecSync.mockReturnValue('');\n\n      const report = await monitorBuildQuality();\n\n      expect(report.performanceAnalysis.buildTimePercentile).toBeGreaterThanOrEqual(0);\n      expect(report.performanceAnalysis.buildTimePercentile).toBeLessThanOrEqual(100);\n    });\n  });\n\n  describe('Alert Generation', () => {\n    it('should generate alerts for high error counts', async () => {\n      // Mock TypeScript errors (smaller number to avoid memory issues)\n      const mockTscOutput = [\n        'src/test1.ts(10,5): error TS2304: Cannot find name \\'test1\\'.',\n        'src/test2.ts(15,10): error TS2352: Conversion error.',\n        'src/test3.ts(20,15): error TS2345: Argument error.'\n      ].join('\\n');\n      \n      const error = new Error('TypeScript compilation failed') as any;\n      error.stdout = mockTscOutput;\n      mockExecSync.mockImplementation(() => {\n        throw error;\n      });\n\n      const report = await monitorBuildQuality();\n\n      expect(report.buildMetrics.errorCount).toBe(3);\n      // Alerts may be generated based on various thresholds\n      expect(Array.isArray(report.alerts)).toBe(true);\n    });\n\n    it('should include alert metadata', async () => {\n      mockExecSync.mockReturnValue('');\n\n      const report = await monitorBuildQuality();\n\n      report.alerts.forEach(alert => {\n        expect(alert.type).toBeDefined();\n        expect(alert.severity).toBeDefined();\n        expect(alert.message).toBeDefined();\n        expect(Array.isArray(alert.recommendations)).toBe(true);\n        expect(alert.autoResponse).toBeDefined();\n        expect(alert.timestamp).toBeInstanceOf(Date);\n      });\n    });\n  });\n\n  describe('Memory Analysis', () => {\n    it('should detect potential memory leaks', async () => {\n      mockExecSync.mockReturnValue('');\n\n      const report = await monitorBuildQuality();\n\n      expect(Array.isArray(report.memoryAnalysis.memoryLeakDetection)).toBe(true);\n      expect(report.memoryAnalysis.garbageCollectionStats).toBeDefined();\n    });\n\n    it('should provide memory optimization suggestions', async () => {\n      mockExecSync.mockReturnValue('');\n\n      const report = await monitorBuildQuality();\n\n      expect(Array.isArray(report.memoryAnalysis.memoryOptimizationSuggestions)).toBe(true);\n      expect(report.memoryAnalysis.memoryOptimizationSuggestions.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle file system errors gracefully', async () => {\n      mockExistsSync.mockImplementation(() => {\n        throw new Error('File system error');\n      });\n\n      const report = await monitorBuildQuality();\n\n      expect(report).toBeDefined();\n      expect(report.buildMetrics.bundleSize.total).toBe(0);\n    });\n\n    it('should handle ESLint configuration errors', async () => {\n      mockExecSync.mockImplementation((command: string) => {\n        if (command.includes('lint')) {\n          throw new Error('ESLint not configured');\n        }\n        return '';\n      });\n\n      const report = await monitorBuildQuality();\n\n      expect(report.buildMetrics.warningCount).toBe(0);\n    });\n  });\n\n  describe('Performance', () => {\n    it('should complete monitoring within reasonable time', async () => {\n      mockExecSync.mockReturnValue('');\n\n      const startTime = Date.now();\n      const report = await monitorBuildQuality();\n      const duration = Date.now() - startTime;\n\n      expect(duration).toBeLessThan(10000); // Should complete within 10 seconds\n      expect(report).toBeDefined();\n    });\n  });\n});"],"version":3}