{"file":"/Users/GregCastro/Desktop/WhatToEatNext/backups/conservative-wave-2025-08-11T05-21-33-410Z/src/services/campaign/__tests__/SafetyProtocol.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/backups/conservative-wave-2025-08-11T05-21-33-410Z/src/services/campaign/__tests__/SafetyProtocol.test.ts"],"sourcesContent":["/**\n * Unit Tests for SafetyProtocol\n * Perfect Codebase Campaign - Safety Protocol Testing\n */\n\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\n\nimport {\n  CorruptionSeverity,\n  GitStash,\n  RecoveryAction,\n  SafetyEventSeverity,\n  SafetyEventType,\n  SafetySettings,\n} from '../../../types/campaign';\nimport { SafetyProtocol } from '../SafetyProtocol';\n\n// Mock dependencies\njest.mock('child_process');\njest.mock('fs');\n\nconst mockExecSync = execSync as jest.MockedFunction<typeof execSync>;\nconst mockFs = fs as jest.Mocked<typeof fs>;\n\ndescribe('SafetyProtocol', () => {\n  let safetyProtocol: SafetyProtocol;\n  let mockSettings: SafetySettings;\n\n  beforeEach(() => {\n    mockSettings = {\n      maxFilesPerBatch: 25,\n      buildValidationFrequency: 5,\n      testValidationFrequency: 10,\n      corruptionDetectionEnabled: true,\n      automaticRollbackEnabled: true,\n      stashRetentionDays: 7,\n    };\n\n    safetyProtocol = new SafetyProtocol(mockSettings);\n\n    // Reset mocks\n    jest.clearAllMocks();\n\n    // Default mock implementations\n    mockExecSync.mockReturnValue('');\n    mockFs.existsSync.mockReturnValue(true);\n    mockFs.readFileSync.mockReturnValue('valid content');\n  });\n\n  describe('Constructor', () => {\n    it('should initialize with provided settings', () => {\n      expect(safetyProtocol).toBeInstanceOf(SafetyProtocol);\n    });\n\n    it('should initialize empty stashes map', () => {\n      const stashes = (safetyProtocol as unknown as { stashes: Map<string, GitStash> }).stashes;\n      expect(stashes.size).toBe(0);\n    });\n\n    it('should initialize empty safety events array', () => {\n      const events = (safetyProtocol as unknown as { safetyEvents: unknown[] }).safetyEvents;\n      expect(events).toEqual([]);\n    });\n  });\n\n  describe('createStash', () => {\n    beforeEach(() => {\n      // Mock git commands\n      mockExecSync\n        .mockReturnValueOnce('') // git status validation\n        .mockReturnValueOnce('') // git stash push\n        .mockReturnValueOnce('stash@{0}: campaign-1-2023-01-01T00-00-00-000Z: Test stash') // git stash list\n        .mockReturnValueOnce('main'); // git branch --show-current\n    });\n\n    it('should create git stash with descriptive name', async () => {\n      const stashId = await safetyProtocol.createStash('Test stash', 'phase1');\n\n      expect(stashId).toMatch(/^campaign-phase1-\\d+-/);\n      expect(mockExecSync).toHaveBeenCalledWith(expect.stringContaining('git stash push -u -m'), expect.any(Object));\n    });\n\n    it('should store stash information', async () => {\n      const stashId = await safetyProtocol.createStash('Test stash');\n\n      const stashes = (safetyProtocol as unknown as { stashes: Map<string, GitStash> }).stashes;\n      expect(stashes.has(stashId)).toBe(true);\n\n      const stash = stashes.get(stashId);\n      expect(stash.description).toContain('Test stash');\n      expect(stash.ref).toBe('stash@{0}');\n    });\n\n    it('should record safety event for stash creation', async () => {\n      await safetyProtocol.createStash('Test stash');\n\n      const events = (safetyProtocol as unknown as { safetyEvents: unknown[] }).safetyEvents;\n      expect(events.length).toBe(1);\n      expect((events as Record<string, unknown>)[0].type).toBe(SafetyEventType.CHECKPOINT_CREATED);\n      expect((events as Record<string, unknown>)[0].description).toContain('Git stash created');\n    });\n\n    it('should handle git validation failure', async () => {\n      // Mock git validation failure\n      jest\n        .spyOn(\n          safetyProtocol as unknown as { validateGitState: () => Promise<{ success: boolean }> },\n          'validateGitState',\n        )\n        .mockResolvedValue({\n          success: false,\n          errors: ['Not a git repository'],\n          warnings: [],\n        });\n\n      await expect(safetyProtocol.createStash('Test stash')).rejects.toThrow(\n        'Git validation failed: Not a git repository',\n      );\n    });\n\n    it('should handle git stash creation failure', async () => {\n      mockExecSync.mockImplementation(command => {\n        if (command.toString().includes('git stash push')) {\n          throw new Error('Git stash failed');\n        }\n        return '';\n      });\n\n      await expect(safetyProtocol.createStash('Test stash')).rejects.toThrow(\n        'Failed to create git stash: Git stash failed',\n      );\n    });\n  });\n\n  describe('applyStash', () => {\n    let mockStash: GitStash;\n\n    beforeEach(() => {\n      mockStash = {\n        id: 'test-stash-1',\n        description: 'Test stash description',\n        timestamp: new Date(),\n        branch: 'main',\n        ref: 'stash@{0}',\n      };\n\n      // Add stash to internal map\n      (safetyProtocol as unknown as { stashes: Map<string, GitStash> }).stashes.set('test-stash-1', mockStash);\n\n      // Mock git validation\n      jest\n        .spyOn(\n          safetyProtocol as unknown as { validateGitState: () => Promise<{ success: boolean }> },\n          'validateGitState',\n        )\n        .mockResolvedValue({\n          success: true,\n          errors: [],\n          warnings: [],\n        });\n    });\n\n    it('should apply stash successfully', async () => {\n      await safetyProtocol.applyStash('test-stash-1');\n\n      expect(mockExecSync).toHaveBeenCalledWith('git stash apply stash@{0}', expect.any(Object));\n    });\n\n    it('should record safety event for stash application', async () => {\n      await safetyProtocol.applyStash('test-stash-1');\n\n      const events = (safetyProtocol as unknown as { safetyEvents: unknown[] }).safetyEvents;\n      expect(events.length).toBe(1);\n      expect((events as Record<string, unknown>)[0].type).toBe(SafetyEventType.ROLLBACK_TRIGGERED);\n      expect((events as Record<string, unknown>)[0].description).toContain('Git stash applied: test-stash-1');\n    });\n\n    it('should validate git state after application when requested', async () => {\n      await safetyProtocol.applyStash('test-stash-1', true);\n\n      expect(safetyProtocol['validateGitState']).toHaveBeenCalled();\n    });\n\n    it('should handle non-existent stash', async () => {\n      await expect(safetyProtocol.applyStash('non-existent')).rejects.toThrow('Stash not found: non-existent');\n    });\n\n    it('should handle git stash apply failure', async () => {\n      mockExecSync.mockImplementation(command => {\n        if (command.toString().includes('git stash apply')) {\n          throw new Error('Git stash apply failed');\n        }\n        return '';\n      });\n\n      await expect(safetyProtocol.applyStash('test-stash-1')).rejects.toThrow(\n        'Failed to apply git stash test-stash-1: Git stash apply failed',\n      );\n    });\n  });\n\n  describe('autoApplyLatestStash', () => {\n    beforeEach(() => {\n      // Add multiple stashes with different timestamps\n      const stash1 = {\n        id: 'stash-1',\n        description: 'First stash',\n        timestamp: new Date('2023-01-01'),\n        branch: 'main',\n        ref: 'stash@{1}',\n      };\n      const stash2 = {\n        id: 'stash-2',\n        description: 'Latest stash',\n        timestamp: new Date('2023-01-02'),\n        branch: 'main',\n        ref: 'stash@{0}',\n      };\n\n      const stashMap = (safetyProtocol as unknown as { stashes: Map<string, GitStash> }).stashes;\n      stashMap.set('stash-1', stash1);\n      stashMap.set('stash-2', stash2);\n\n      jest.spyOn(safetyProtocol, 'applyStash').mockResolvedValue();\n    });\n\n    it('should apply the most recent stash', async () => {\n      const appliedStashId = await safetyProtocol.autoApplyLatestStash();\n\n      expect(appliedStashId).toBe('stash-2');\n      expect(safetyProtocol.applyStash).toHaveBeenCalledWith('stash-2');\n    });\n\n    it('should handle no available stashes', async () => {\n      (safetyProtocol as unknown as { stashes: Map<string, GitStash> }).stashes.clear();\n\n      await expect(safetyProtocol.autoApplyLatestStash()).rejects.toThrow(\n        'No stashes available for automatic rollback',\n      );\n    });\n  });\n\n  describe('detectCorruption', () => {\n    const mockFiles = ['file1.ts', 'file2.ts', 'file3.ts'];\n\n    beforeEach(() => {\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readFileSync.mockReturnValue('valid content');\n    });\n\n    it('should detect no corruption in valid files', async () => {\n      const report = await safetyProtocol.detectCorruption(mockFiles);\n\n      expect(report.detectedFiles).toEqual([]);\n      expect(report.corruptionPatterns).toEqual([]);\n      expect(report.severity).toBe(CorruptionSeverity.LOW);\n      expect(report.recommendedAction).toBe(RecoveryAction.CONTINUE);\n    });\n\n    it('should detect git merge conflict markers', async () => {\n      mockFs.readFileSync.mockReturnValue(`\n        function test() {\n        <<<<<<< HEAD\n          return 'version 1';\n        =======\n          return 'version 2';\n        >>>>>>> branch\n        }\n      `);\n\n      const report = await safetyProtocol.detectCorruption(['file1.ts']);\n\n      expect(report.detectedFiles).toContain('file1.ts');\n      expect(report.severity).toBe(CorruptionSeverity.CRITICAL);\n      expect(report.recommendedAction).toBe(RecoveryAction.EMERGENCY_RESTORE);\n    });\n\n    it('should detect corrupted import statements', async () => {\n      mockFs.readFileSync.mockReturnValue(`\n        import @/types from './types';\n        import @/services from './services';\n      `);\n\n      const report = await safetyProtocol.detectCorruption(['file1.ts']);\n\n      expect(report.detectedFiles).toContain('file1.ts');\n      expect(report.severity).toBe(CorruptionSeverity.HIGH);\n      expect(report.corruptionPatterns.some(p => p.description.includes('Corrupted type import'))).toBe(true);\n    });\n\n    it('should detect syntax corruption', async () => {\n      mockFs.readFileSync.mockReturnValue(`\n        function test() {\n          return 'missing closing brace';\n      `);\n\n      const report = await safetyProtocol.detectCorruption(['file1.ts']);\n\n      expect(report.detectedFiles).toContain('file1.ts');\n      expect(report.severity).toBe(CorruptionSeverity.HIGH);\n    });\n\n    it('should handle file read errors', async () => {\n      mockFs.readFileSync.mockImplementation(() => {\n        throw new Error('Permission denied');\n      });\n\n      const report = await safetyProtocol.detectCorruption(['file1.ts']);\n\n      expect(report.detectedFiles).toContain('file1.ts');\n      expect(report.severity).toBe(CorruptionSeverity.HIGH);\n      expect(report.corruptionPatterns.some(p => p.pattern === 'FILE_READ_ERROR')).toBe(true);\n    });\n\n    it('should skip non-existent files', async () => {\n      mockFs.existsSync.mockReturnValue(false);\n\n      const report = await safetyProtocol.detectCorruption(['non-existent.ts']);\n\n      expect(report.detectedFiles).toEqual([]);\n      expect(report.severity).toBe(CorruptionSeverity.LOW);\n    });\n\n    it('should record safety event when corruption is detected', async () => {\n      mockFs.readFileSync.mockReturnValue('<<<<<<< HEAD\\nconflict\\n>>>>>>> branch');\n\n      await safetyProtocol.detectCorruption(['file1.ts']);\n\n      const events = (safetyProtocol as unknown as { safetyEvents: unknown[] }).safetyEvents;\n      expect(events.length).toBe(1);\n      expect((events as Record<string, unknown>)[0].type).toBe(SafetyEventType.CORRUPTION_DETECTED);\n    });\n  });\n\n  describe('detectImportExportCorruption', () => {\n    beforeEach(() => {\n      mockFs.existsSync.mockReturnValue(true);\n    });\n\n    it('should detect empty import statements', async () => {\n      mockFs.readFileSync.mockReturnValue(`\nimport something, { a, b } from './module';\n        export { };\n      `);\n\n      const report = await safetyProtocol.detectImportExportCorruption(['file1.ts']);\n\n      expect(report.detectedFiles).toContain('file1.ts');\n      expect(report.corruptionPatterns.some(p => p.description.includes('Empty import'))).toBe(true);\n      expect(report.corruptionPatterns.some(p => p.description.includes('Empty export'))).toBe(true);\n    });\n\n    it('should detect import from undefined module', async () => {\n      mockFs.readFileSync.mockReturnValue(`\n        import something from \"undefined\";\n      `);\n\n      const report = await safetyProtocol.detectImportExportCorruption(['file1.ts']);\n\n      expect(report.detectedFiles).toContain('file1.ts');\n      expect(report.severity).toBe(CorruptionSeverity.HIGH);\n      expect(report.corruptionPatterns.some(p => p.description.includes('Import from undefined'))).toBe(true);\n    });\n\n    it('should detect duplicate from clauses', async () => {\n      mockFs.readFileSync.mockReturnValue(`\n      `);\n\n      const report = await safetyProtocol.detectImportExportCorruption(['file1.ts']);\n\n      expect(report.detectedFiles).toContain('file1.ts');\n      expect(report.severity).toBe(CorruptionSeverity.HIGH);\n    });\n\n    it('should detect double commas in destructuring', async () => {\n      mockFs.readFileSync.mockReturnValue(`\n        export { x,, y };\n      `);\n\n      const report = await safetyProtocol.detectImportExportCorruption(['file1.ts']);\n\n      expect(report.detectedFiles).toContain('file1.ts');\n      expect(report.severity).toBe(CorruptionSeverity.HIGH);\n    });\n\n    it('should skip non-JavaScript/TypeScript files', async () => {\n      const report = await safetyProtocol.detectImportExportCorruption(['file1.txt', 'file2.md']);\n\n      expect(report.detectedFiles).toEqual([]);\n      expect(report.severity).toBe(CorruptionSeverity.LOW);\n    });\n  });\n\n  describe('validateSyntaxWithTypeScript', () => {\n    it('should validate syntax using TypeScript compiler', async () => {\n      mockExecSync.mockReturnValue('No errors found');\n\n      const report = await safetyProtocol.validateSyntaxWithTypeScript(['file1.ts', 'file2.ts']);\n\n      expect(mockExecSync).toHaveBeenCalledWith('yarn tsc --noEmit --skipLibCheck 2>&1', expect.any(Object));\n      expect(report.detectedFiles).toEqual([]);\n      expect(report.severity).toBe(CorruptionSeverity.LOW);\n    });\n\n    it('should detect TypeScript syntax errors', async () => {\n      mockExecSync.mockReturnValue(`\n        file1.ts(10,5): error TS1005: Unexpected token 'function'\n        file2.ts(15,10): error TS1109: Expression expected\n      `);\n\n      const report = await safetyProtocol.validateSyntaxWithTypeScript(['file1.ts', 'file2.ts']);\n\n      expect(report.detectedFiles).toContain('file1.ts');\n      expect(report.detectedFiles).toContain('file2.ts');\n      expect(report.severity).toBe(CorruptionSeverity.HIGH);\n    });\n\n    it('should handle TypeScript compilation errors', async () => {\n      mockExecSync.mockImplementation(() => {\n        const error = new Error('TypeScript compilation failed') as Error & { stdout?: string };\n        error.stdout = 'Unexpected token at line 5';\n        throw error;\n      });\n\n      const report = await safetyProtocol.validateSyntaxWithTypeScript(['file1.ts']);\n\n      expect(report.severity).toBe(CorruptionSeverity.HIGH);\n      expect(report.corruptionPatterns.some(p => p.pattern === 'TYPESCRIPT_COMPILATION_ERROR')).toBe(true);\n    });\n\n    it('should skip non-TypeScript files', async () => {\n      const report = await safetyProtocol.validateSyntaxWithTypeScript(['file1.js', 'file2.txt']);\n\n      expect(report.detectedFiles).toEqual([]);\n      expect(report.severity).toBe(CorruptionSeverity.LOW);\n    });\n  });\n\n  describe('emergencyRollback', () => {\n    beforeEach(() => {\n      const stash = {\n        id: 'emergency-stash',\n        description: 'Emergency stash',\n        timestamp: new Date(),\n        branch: 'main',\n        ref: 'stash@{0}',\n      };\n\n      (safetyProtocol as unknown as { stashes: Map<string, GitStash> }).stashes.set('emergency-stash', stash);\n      jest.spyOn(safetyProtocol, 'applyStash').mockResolvedValue();\n    });\n\n    it('should apply the most recent stash for emergency rollback', async () => {\n      await safetyProtocol.emergencyRollback();\n\n      expect(safetyProtocol.applyStash).toHaveBeenCalledWith('emergency-stash');\n    });\n\n    it('should record safety event for emergency rollback', async () => {\n      await safetyProtocol.emergencyRollback();\n\n      const events = (safetyProtocol as unknown as { safetyEvents: unknown[] }).safetyEvents;\n      expect(events.length).toBe(1);\n      expect((events as Record<string, unknown>)[0].type).toBe(SafetyEventType.EMERGENCY_RECOVERY);\n      expect((events as Record<string, unknown>)[0].description).toContain('Emergency rollback completed');\n    });\n\n    it('should handle no available stashes', async () => {\n      (safetyProtocol as unknown as { stashes: Map<string, GitStash> }).stashes.clear();\n\n      await expect(safetyProtocol.emergencyRollback()).rejects.toThrow('No stashes available for emergency rollback');\n    });\n\n    it('should handle rollback failure', async () => {\n      jest.spyOn(safetyProtocol, 'applyStash').mockRejectedValue(new Error('Rollback failed'));\n\n      await expect(safetyProtocol.emergencyRollback()).rejects.toThrow('Emergency rollback failed: Rollback failed');\n\n      const events = (safetyProtocol as unknown as { safetyEvents: unknown[] }).safetyEvents;\n      expect(\n        events.some(e => e.type === SafetyEventType.EMERGENCY_RECOVERY && e.severity === SafetyEventSeverity.CRITICAL),\n      ).toBe(true);\n    });\n  });\n\n  describe('validateGitState', () => {\n    it('should validate successful git state', async () => {\n      mockFs.existsSync.mockReturnValue(true);\n      mockExecSync.mockReturnValue(''); // No uncommitted changes\n\n      const result = await safetyProtocol.validateGitState();\n\n      expect(result.success).toBe(true);\n      expect(result.errors).toEqual([]);\n    });\n\n    it('should detect non-git repository', async () => {\n      mockFs.existsSync.mockReturnValue(false);\n\n      const result = await safetyProtocol.validateGitState();\n\n      expect(result.success).toBe(false);\n      expect(result.errors).toContain('Not a git repository');\n    });\n\n    it('should warn about uncommitted changes when automatic rollback is disabled', async () => {\n      mockFs.existsSync.mockReturnValue(true);\n      mockExecSync.mockReturnValue('M file1.ts\\nA file2.ts'); // Uncommitted changes\n\n      const settingsWithoutAutoRollback = { ...mockSettings, automaticRollbackEnabled: false };\n      const protocol = new SafetyProtocol(settingsWithoutAutoRollback);\n\n      const result = await protocol.validateGitState();\n\n      expect(result.success).toBe(true);\n      expect(result.warnings).toContain('Uncommitted changes detected - consider creating a stash');\n    });\n\n    it('should handle git command failure', async () => {\n      mockFs.existsSync.mockReturnValue(true);\n      mockExecSync.mockImplementation(() => {\n        throw new Error('Git command failed');\n      });\n\n      const result = await safetyProtocol.validateGitState();\n\n      expect(result.success).toBe(false);\n      expect(result.errors).toContain('Git validation failed: Git command failed');\n    });\n  });\n\n  describe('cleanupOldStashes', () => {\n    beforeEach(() => {\n      const oldDate = new Date();\n      oldDate.setDate(oldDate.getDate() - 10); // 10 days old\n\n      const recentDate = new Date();\n      recentDate.setDate(recentDate.getDate() - 3); // 3 days old\n\n      const oldStash = {\n        id: 'old-stash',\n        description: 'Old stash',\n        timestamp: oldDate,\n        branch: 'main',\n        ref: 'stash@{1}',\n      };\n\n      const recentStash = {\n        id: 'recent-stash',\n        description: 'Recent stash',\n        timestamp: recentDate,\n        branch: 'main',\n        ref: 'stash@{0}',\n      };\n\n      const stashMap = (safetyProtocol as unknown as { stashes: Map<string, GitStash> }).stashes;\n      stashMap.set('old-stash', oldStash);\n      stashMap.set('recent-stash', recentStash);\n    });\n\n    it('should cleanup stashes older than retention period', async () => {\n      await safetyProtocol.cleanupOldStashes();\n\n      const stashes = (safetyProtocol as unknown as { stashes: Map<string, GitStash> }).stashes;\n      expect(stashes.has('old-stash')).toBe(false);\n      expect(stashes.has('recent-stash')).toBe(true);\n    });\n\n    it('should attempt to drop git stashes', async () => {\n      await safetyProtocol.cleanupOldStashes();\n\n      expect(mockExecSync).toHaveBeenCalledWith('git stash drop stash@{1}', expect.any(Object));\n    });\n\n    it('should handle git stash drop failures gracefully', async () => {\n      mockExecSync.mockImplementation(command => {\n        if (command.toString().includes('git stash drop')) {\n          throw new Error('Stash not found');\n        }\n        return '';\n      });\n\n      // Should not throw error\n      await expect(safetyProtocol.cleanupOldStashes()).resolves.not.toThrow();\n\n      // Should still remove from tracking\n      const stashes = (safetyProtocol as unknown as { stashes: Map<string, GitStash> }).stashes;\n      expect(stashes.has('old-stash')).toBe(false);\n    });\n\n    it('should record safety event for cleanup', async () => {\n      await safetyProtocol.cleanupOldStashes();\n\n      const events = (safetyProtocol as unknown as { safetyEvents: unknown[] }).safetyEvents;\n      expect(events.some(e => e.description.includes('Cleaned up 1 old stashes'))).toBe(true);\n    });\n  });\n\n  describe('getStashStatistics', () => {\n    beforeEach(() => {\n      const stash1 = {\n        id: 'campaign-phase1-1-timestamp',\n        description: 'Phase 1 stash',\n        timestamp: new Date('2023-01-01'),\n        branch: 'main',\n      };\n\n      const stash2 = {\n        id: 'campaign-phase2-2-timestamp',\n        description: 'Phase 2 stash',\n        timestamp: new Date('2023-01-02'),\n        branch: 'main',\n      };\n\n      const stash3 = {\n        id: 'campaign-phase1-3-timestamp',\n        description: 'Another Phase 1 stash',\n        timestamp: new Date('2023-01-03'),\n        branch: 'main',\n      };\n\n      const stashMap = (safetyProtocol as unknown as { stashes: Map<string, GitStash> }).stashes;\n      stashMap.set('stash1', stash1);\n      stashMap.set('stash2', stash2);\n      stashMap.set('stash3', stash3);\n    });\n\n    it('should return comprehensive stash statistics', () => {\n      const stats = safetyProtocol.getStashStatistics();\n\n      expect(stats.total).toBe(3);\n      expect(stats.byPhase.phase1).toBe(2);\n      expect(stats.byPhase.phase2).toBe(1);\n      expect(stats.oldestStash).toEqual(new Date('2023-01-01'));\n      expect(stats.newestStash).toEqual(new Date('2023-01-03'));\n    });\n\n    it('should handle empty stashes', () => {\n      (safetyProtocol as unknown as { stashes: Map<string, GitStash> }).stashes.clear();\n\n      const stats = safetyProtocol.getStashStatistics();\n\n      expect(stats.total).toBe(0);\n      expect(stats.byPhase).toEqual({});\n      expect(stats.oldestStash).toBeUndefined();\n      expect(stats.newestStash).toBeUndefined();\n    });\n  });\n\n  describe('Real-time Monitoring', () => {\n    beforeEach(() => {\n      jest.useFakeTimers();\n      jest.spyOn(safetyProtocol, 'detectCorruption').mockResolvedValue({\n        detectedFiles: [],\n        corruptionPatterns: [],\n        severity: CorruptionSeverity.LOW,\n        recommendedAction: RecoveryAction.CONTINUE,\n      });\n    });\n\n    afterEach(() => {\n      jest.useRealTimers();\n      // Cleanup any active monitoring\n      try {\n        safetyProtocol.stopRealTimeMonitoring();\n      } catch (error) {\n        // Ignore cleanup errors\n      }\n    });\n\n    it('should start real-time monitoring', () => {\n      const files = ['file1.ts', 'file2.ts'];\n\n      // Start monitoring\n      safetyProtocol.startRealTimeMonitoring(files, 1000);\n\n      // Fast-forward time to trigger monitoring\n      jest.advanceTimersByTime(1000);\n\n      // Verify that detectCorruption was called\n      expect(safetyProtocol.detectCorruption).toHaveBeenCalledWith(files);\n    }, 3000); // 3 second timeout\n\n    it('should trigger emergency rollback on critical corruption', () => {\n      jest.spyOn(safetyProtocol, 'detectCorruption').mockResolvedValue({\n        detectedFiles: ['file1.ts'],\n        corruptionPatterns: [],\n        severity: CorruptionSeverity.CRITICAL,\n        recommendedAction: RecoveryAction.EMERGENCY_RESTORE,\n      });\n      jest.spyOn(safetyProtocol, 'emergencyRollback').mockResolvedValue();\n\n      const files = ['file1.ts'];\n      safetyProtocol.startRealTimeMonitoring(files, 1000);\n\n      // Fast-forward time to trigger monitoring\n      jest.advanceTimersByTime(1000);\n\n      // The emergency rollback should be triggered (async operation will complete)\n      expect(safetyProtocol.detectCorruption).toHaveBeenCalledWith(files);\n    }, 3000); // 3 second timeout\n\n    it('should stop real-time monitoring', () => {\n      const files = ['file1.ts'];\n      safetyProtocol.startRealTimeMonitoring(files, 1000);\n\n      safetyProtocol.stopRealTimeMonitoring();\n\n      // Fast-forward time - monitoring should not trigger\n      jest.advanceTimersByTime(1000);\n\n      expect(safetyProtocol.detectCorruption).not.toHaveBeenCalled();\n    }, 2000); // 2 second timeout\n\n    it('should handle monitoring errors gracefully', () => {\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n      jest.spyOn(safetyProtocol, 'detectCorruption').mockRejectedValue(new Error('Monitoring error'));\n\n      const files = ['file1.ts'];\n      safetyProtocol.startRealTimeMonitoring(files, 1000);\n\n      // Fast-forward time to trigger monitoring\n      jest.advanceTimersByTime(1000);\n\n      // The error handling should be triggered (async operation will complete)\n      expect(safetyProtocol.detectCorruption).toHaveBeenCalledWith(files);\n\n      consoleSpy.mockRestore();\n    }, 3000); // 3 second timeout\n  });\n\n  describe('Safety Event Management', () => {\n    it('should limit safety events to prevent memory issues', () => {\n      // Add many safety events\n      for (let i = 0; i < 1100; i++) {\n        (safetyProtocol as unknown as { addSafetyEvent: (event: Record<string, unknown>) => void }).addSafetyEvent({\n          type: SafetyEventType.CHECKPOINT_CREATED,\n          timestamp: new Date(),\n          description: `Event ${i}`,\n          severity: SafetyEventSeverity.INFO,\n          action: 'TEST',\n        });\n      }\n\n      const events = (safetyProtocol as unknown as { safetyEvents: unknown[] }).safetyEvents;\n      expect(events.length).toBe(500); // Should be trimmed to 500\n    });\n\n    it('should preserve most recent events when trimming', () => {\n      // Add many safety events\n      for (let i = 0; i < 1100; i++) {\n        (safetyProtocol as unknown as { addSafetyEvent: (event: Record<string, unknown>) => void }).addSafetyEvent({\n          type: SafetyEventType.CHECKPOINT_CREATED,\n          timestamp: new Date(),\n          description: `Event ${i}`,\n          severity: SafetyEventSeverity.INFO,\n          action: 'TEST',\n        });\n      }\n\n      const events = (safetyProtocol as unknown as { safetyEvents: unknown[] }).safetyEvents;\n      expect((events as Record<string, unknown>)[(events as Record<string, unknown>).length - 1].description).toBe(\n        'Event 1099',\n      );\n    });\n  });\n});\n"],"version":3}