{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/linting/ResolutionStrategyGenerator.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/linting/ResolutionStrategyGenerator.ts"],"sourcesContent":["/**\n * ResolutionStrategyGenerator - Intelligent resolution strategy generation for different error types\n * \n * This system generates comprehensive resolution strategies based on error types,\n * domain context, and risk assessment to provide actionable fixing approaches.\n */\n\nimport { DomainContext, FileAnalysis } from './DomainContextDetector';\nimport { ErrorClassification } from './ErrorClassificationSystem';\n\nexport interface ResolutionStrategy {\n  id: string;\n  type: 'automated' | 'semi-automated' | 'manual' | 'configuration';\n  priority: 'critical' | 'high' | 'medium' | 'low';\n  confidence: number; // 0-1\n  estimatedTime: number; // minutes\n  complexity: 'trivial' | 'simple' | 'moderate' | 'complex' | 'expert-required';\n  steps: ResolutionStep[];\n  prerequisites: Prerequisite[];\n  validationRequirements: ValidationRequirement[];\n  riskAssessment: StrategyRiskAssessment;\n  alternatives: AlternativeStrategy[];\n}\n\nexport interface ResolutionStep {\n  id: string;\n  description: string;\n  action: 'execute-command' | 'modify-file' | 'review-code' | 'run-test' | 'validate-build';\n  details: StepDetails;\n  automatable: boolean;\n  estimatedTime: number;\n  dependencies: string[];\n}\n\nexport interface StepDetails {\n  command?: string;\n  filePath?: string;\n  changes?: string;\n  reviewCriteria?: string[];\n  testScope?: string;\n  validationChecks?: string[];\n}\n\nexport interface Prerequisite {\n  type: 'tool' | 'knowledge' | 'access' | 'dependency';\n  description: string;\n  required: boolean;\n  alternatives?: string[];\n}\n\nexport interface ValidationRequirement {\n  type: 'build' | 'test' | 'lint' | 'type-check' | 'manual-review' | 'domain-expert';\n  description: string;\n  automated: boolean;\n  criticalPath: boolean;\n}\n\nexport interface StrategyRiskAssessment {\n  overall: 'low' | 'medium' | 'high' | 'critical';\n  breakingChangeProbability: number; // 0-1\n  dataLossProbability: number; // 0-1\n  performanceImpactProbability: number; // 0-1\n  mitigationStrategies: string[];\n  rollbackPlan: string;\n}\n\nexport interface AlternativeStrategy {\n  name: string;\n  description: string;\n  tradeoffs: string[];\n  whenToUse: string;\n}\n\nexport interface StrategyGenerationContext {\n  errorClassification: ErrorClassification;\n  domainContext: DomainContext;\n  fileAnalysis: FileAnalysis;\n  projectContext: ProjectContext;\n}\n\nexport interface ProjectContext {\n  hasTests: boolean;\n  hasCICD: boolean;\n  teamSize: 'solo' | 'small' | 'medium' | 'large';\n  riskTolerance: 'conservative' | 'moderate' | 'aggressive';\n  timeConstraints: 'tight' | 'moderate' | 'flexible';\n}\n\n/**\n * Main ResolutionStrategyGenerator class\n */\nexport class ResolutionStrategyGenerator {\n  private strategyTemplates: Map<string, Partial<ResolutionStrategy>>;\n  private domainSpecificStrategies: Map<string, Partial<ResolutionStrategy>>;\n\n  constructor() {\n    this.strategyTemplates = new Map();\n    this.domainSpecificStrategies = new Map();\n    this.initializeStrategyTemplates();\n    this.initializeDomainSpecificStrategies();\n  }\n\n  /**\n   * Generate comprehensive resolution strategy for an error\n   */\n  generateStrategy(context: StrategyGenerationContext): ResolutionStrategy {\n    const { errorClassification, domainContext, fileAnalysis, projectContext } = context;\n    \n    // Get base strategy template\n    const baseStrategy = this.getBaseStrategy(errorClassification.ruleId);\n    \n    // Enhance with domain-specific considerations\n    const domainEnhancedStrategy = this.enhanceWithDomainContext(baseStrategy, domainContext, fileAnalysis);\n    \n    // Adjust for project context\n    const projectAdjustedStrategy = this.adjustForProjectContext(domainEnhancedStrategy, projectContext);\n    \n    // Generate final strategy with all components\n    const strategy = this.finalizeStrategy(\n      projectAdjustedStrategy,\n      errorClassification,\n      domainContext,\n      fileAnalysis\n    );\n    \n    return strategy;\n  }\n\n  /**\n   * Generate strategies for multiple errors with optimization\n   */\n  generateBatchStrategies(contexts: StrategyGenerationContext[]): {\n    strategies: ResolutionStrategy[];\n    optimizedPlan: OptimizedResolutionPlan;\n  } {\n    const strategies = contexts.map(context => this.generateStrategy(context));\n    const optimizedPlan = this.optimizeResolutionPlan(strategies);\n    \n    return { strategies, optimizedPlan };\n  }\n\n  /**\n   * Get base strategy template for a rule\n   */\n  private getBaseStrategy(ruleId: string): Partial<ResolutionStrategy> {\n    return this.strategyTemplates.get(ruleId) || this.strategyTemplates.get('default')!;\n  }\n\n  /**\n   * Enhance strategy with domain context\n   */\n  private enhanceWithDomainContext(\n    baseStrategy: Partial<ResolutionStrategy>,\n    domainContext: DomainContext,\n    fileAnalysis: FileAnalysis\n  ): Partial<ResolutionStrategy> {\n    const enhanced = { ...baseStrategy };\n    \n    // Get domain-specific enhancements\n    const domainStrategy = this.domainSpecificStrategies.get(domainContext.type);\n    if (domainStrategy) {\n      // Merge domain-specific steps\n      enhanced.steps = [...(enhanced.steps || []), ...(domainStrategy.steps || [])];\n      \n      // Merge prerequisites\n      enhanced.prerequisites = [...(enhanced.prerequisites || []), ...(domainStrategy.prerequisites || [])];\n      \n      // Merge validation requirements\n      enhanced.validationRequirements = [\n        ...(enhanced.validationRequirements || []),\n        ...(domainStrategy.validationRequirements || [])\n      ];\n      \n      // Adjust complexity and time based on domain\n      if (domainContext.type === 'astrological' || domainContext.type === 'campaign') {\n        enhanced.complexity = 'expert-required';\n        enhanced.estimatedTime = (enhanced.estimatedTime || 0) * 2; // Double time for domain expertise\n      }\n    }\n    \n    // Add preservation requirements as validation steps\n    for (const requirement of fileAnalysis.preservationRequirements) {\n      enhanced.validationRequirements = enhanced.validationRequirements || [];\n      enhanced.validationRequirements.push({\n        type: 'manual-review',\n        description: `Verify preservation of ${requirement.element}: ${requirement.reason}`,\n        automated: false,\n        criticalPath: requirement.strictness === 'absolute'\n      });\n    }\n    \n    return enhanced;\n  }\n\n  /**\n   * Adjust strategy for project context\n   */\n  private adjustForProjectContext(\n    strategy: Partial<ResolutionStrategy>,\n    projectContext: ProjectContext\n  ): Partial<ResolutionStrategy> {\n    const adjusted = { ...strategy };\n    \n    // Adjust based on risk tolerance\n    if (projectContext.riskTolerance === 'conservative') {\n      adjusted.type = 'manual'; // Force manual review for conservative projects\n      adjusted.validationRequirements = adjusted.validationRequirements || [];\n      adjusted.validationRequirements.push({\n        type: 'manual-review',\n        description: 'Conservative project requires manual review of all changes',\n        automated: false,\n        criticalPath: true\n      });\n    } else if (projectContext.riskTolerance === 'aggressive') {\n      // Allow more automation for aggressive projects\n      if (adjusted.confidence && adjusted.confidence > 0.7) {\n        adjusted.type = 'automated';\n      }\n    }\n    \n    // Adjust based on team size\n    if (projectContext.teamSize === 'solo') {\n      // Solo developers need more automation\n      adjusted.steps = (adjusted.steps || []).map(step => ({\n        ...step,\n        automatable: step.automatable || step.action === 'execute-command'\n      }));\n    } else if (projectContext.teamSize === 'large') {\n      // Large teams can handle more manual processes\n      adjusted.validationRequirements = adjusted.validationRequirements || [];\n      adjusted.validationRequirements.push({\n        type: 'manual-review',\n        description: 'Large team code review process',\n        automated: false,\n        criticalPath: false\n      });\n    }\n    \n    // Adjust based on time constraints\n    if (projectContext.timeConstraints === 'tight') {\n      adjusted.priority = adjusted.priority === 'low' ? 'medium' : adjusted.priority;\n      adjusted.type = adjusted.confidence && adjusted.confidence > 0.6 ? 'automated' : 'semi-automated';\n    }\n    \n    return adjusted;\n  }\n\n  /**\n   * Finalize strategy with all components\n   */\n  private finalizeStrategy(\n    strategy: Partial<ResolutionStrategy>,\n    errorClassification: ErrorClassification,\n    domainContext: DomainContext,\n    fileAnalysis: FileAnalysis\n  ): ResolutionStrategy {\n    const id = `${errorClassification.ruleId}-${fileAnalysis.filePath}-${Date.now()}`;\n    \n    return {\n      id,\n      type: strategy.type || 'manual',\n      priority: strategy.priority || this.determinePriority(errorClassification),\n      confidence: strategy.confidence || errorClassification.autoFixCapability.confidence,\n      estimatedTime: strategy.estimatedTime || this.estimateTime(errorClassification, domainContext),\n      complexity: strategy.complexity || this.determineComplexity(errorClassification, domainContext),\n      steps: strategy.steps || this.generateDefaultSteps(errorClassification),\n      prerequisites: strategy.prerequisites || [],\n      validationRequirements: strategy.validationRequirements || this.generateDefaultValidation(errorClassification),\n      riskAssessment: strategy.riskAssessment || this.assessStrategyRisk(errorClassification, domainContext),\n      alternatives: strategy.alternatives || this.generateAlternatives(errorClassification)\n    };\n  }\n\n  /**\n   * Determine priority based on error classification\n   */\n  private determinePriority(errorClassification: ErrorClassification): ResolutionStrategy['priority'] {\n    switch (errorClassification.severity.level) {\n      case 'critical': return 'critical';\n      case 'high': return 'high';\n      case 'medium': return 'medium';\n      default: return 'low';\n    }\n  }\n\n  /**\n   * Estimate time based on error and domain context\n   */\n  private estimateTime(errorClassification: ErrorClassification, domainContext: DomainContext): number {\n    let baseTime = 5; // 5 minutes base\n    \n    // Adjust for complexity\n    switch (errorClassification.autoFixCapability.complexity) {\n      case 'trivial': baseTime = 1; break;\n      case 'simple': baseTime = 3; break;\n      case 'moderate': baseTime = 10; break;\n      case 'complex': baseTime = 30; break;\n      case 'manual-only': baseTime = 60; break;\n    }\n    \n    // Adjust for domain context\n    if (domainContext.type === 'astrological' || domainContext.type === 'campaign') {\n      baseTime *= 2; // Domain expertise required\n    }\n    \n    return baseTime;\n  }\n\n  /**\n   * Determine complexity based on error and domain\n   */\n  private determineComplexity(\n    errorClassification: ErrorClassification, \n    domainContext: DomainContext\n  ): ResolutionStrategy['complexity'] {\n    if (domainContext.type === 'astrological' || domainContext.type === 'campaign') {\n      return 'expert-required';\n    }\n    \n    return errorClassification.autoFixCapability.complexity;\n  }\n\n  /**\n   * Generate default resolution steps\n   */\n  private generateDefaultSteps(errorClassification: ErrorClassification): ResolutionStep[] {\n    const steps: ResolutionStep[] = [];\n    \n    if (errorClassification.autoFixCapability.canAutoFix) {\n      steps.push({\n        id: 'auto-fix',\n        description: 'Apply automatic fix',\n        action: 'execute-command',\n        details: {\n          command: `npx eslint --fix --rule ${errorClassification.ruleId}`\n        },\n        automatable: true,\n        estimatedTime: 1,\n        dependencies: []\n      });\n    } else {\n      steps.push({\n        id: 'manual-fix',\n        description: 'Manually resolve the issue',\n        action: 'review-code',\n        details: {\n          reviewCriteria: [\n            'Understand the root cause of the issue',\n            'Implement appropriate fix',\n            'Ensure fix aligns with project standards'\n          ]\n        },\n        automatable: false,\n        estimatedTime: 10,\n        dependencies: []\n      });\n    }\n    \n    // Add validation step\n    steps.push({\n      id: 'validate',\n      description: 'Validate the fix',\n      action: 'validate-build',\n      details: {\n        validationChecks: ['Build passes', 'Tests pass', 'Linting passes']\n      },\n      automatable: true,\n      estimatedTime: 2,\n      dependencies: [steps[0].id]\n    });\n    \n    return steps;\n  }\n\n  /**\n   * Generate default validation requirements\n   */\n  private generateDefaultValidation(errorClassification: ErrorClassification): ValidationRequirement[] {\n    const requirements: ValidationRequirement[] = [\n      {\n        type: 'build',\n        description: 'Verify build still passes',\n        automated: true,\n        criticalPath: true\n      }\n    ];\n    \n    if (errorClassification.severity.level === 'high' || errorClassification.severity.level === 'critical') {\n      requirements.push({\n        type: 'test',\n        description: 'Run relevant tests',\n        automated: true,\n        criticalPath: true\n      });\n    }\n    \n    if (errorClassification.ruleId.includes('typescript')) {\n      requirements.push({\n        type: 'type-check',\n        description: 'Verify TypeScript compilation',\n        automated: true,\n        criticalPath: true\n      });\n    }\n    \n    return requirements;\n  }\n\n  /**\n   * Assess strategy risk\n   */\n  private assessStrategyRisk(\n    errorClassification: ErrorClassification,\n    domainContext: DomainContext\n  ): StrategyRiskAssessment {\n    let overall: StrategyRiskAssessment['overall'] = 'low';\n    let breakingChangeProbability = 0.1;\n    let dataLossProbability = 0.0;\n    let performanceImpactProbability = 0.1;\n    \n    // Adjust based on error classification\n    if (errorClassification.severity.level === 'critical') {\n      overall = 'high';\n      breakingChangeProbability = 0.3;\n    } else if (errorClassification.severity.level === 'high') {\n      overall = 'medium';\n      breakingChangeProbability = 0.2;\n    }\n    \n    // Adjust based on domain context\n    if (domainContext.type === 'astrological') {\n      overall = 'high';\n      dataLossProbability = 0.2; // Risk of affecting calculation accuracy\n      performanceImpactProbability = 0.1;\n    } else if (domainContext.type === 'campaign') {\n      overall = 'medium';\n      performanceImpactProbability = 0.2; // Risk of affecting automation performance\n    }\n    \n    const mitigationStrategies = [\n      'Create backup before making changes',\n      'Test thoroughly in development environment',\n      'Monitor system behavior after deployment'\n    ];\n    \n    if (domainContext.type === 'astrological') {\n      mitigationStrategies.push('Validate astronomical calculations against known data');\n    }\n    \n    return {\n      overall,\n      breakingChangeProbability,\n      dataLossProbability,\n      performanceImpactProbability,\n      mitigationStrategies,\n      rollbackPlan: 'Git revert to previous commit if issues detected'\n    };\n  }\n\n  /**\n   * Generate alternative strategies\n   */\n  private generateAlternatives(errorClassification: ErrorClassification): AlternativeStrategy[] {\n    const alternatives: AlternativeStrategy[] = [];\n    \n    if (errorClassification.autoFixCapability.canAutoFix) {\n      alternatives.push({\n        name: 'Manual Fix',\n        description: 'Fix the issue manually instead of using auto-fix',\n        tradeoffs: ['More time-consuming', 'Better understanding of the fix', 'Lower risk of unintended changes'],\n        whenToUse: 'When auto-fix confidence is low or domain expertise is required'\n      });\n    }\n    \n    alternatives.push({\n      name: 'Rule Suppression',\n      description: 'Suppress the rule for this specific case',\n      tradeoffs: ['Quick solution', 'Technical debt accumulation', 'May hide real issues'],\n      whenToUse: 'When the rule is not applicable or fixing would require significant refactoring'\n    });\n    \n    if (errorClassification.severity.level === 'low') {\n      alternatives.push({\n        name: 'Defer Fix',\n        description: 'Add to technical debt backlog for later resolution',\n        tradeoffs: ['Immediate progress', 'Accumulating technical debt', 'May become harder to fix later'],\n        whenToUse: 'When under time pressure and issue is not critical'\n      });\n    }\n    \n    return alternatives;\n  }\n\n  /**\n   * Optimize resolution plan for batch processing\n   */\n  private optimizeResolutionPlan(strategies: ResolutionStrategy[]): OptimizedResolutionPlan {\n    // Group strategies by type and priority\n    const grouped = this.groupStrategies(strategies);\n    \n    // Identify dependencies and create execution order\n    const executionOrder = this.determineExecutionOrder(strategies);\n    \n    // Calculate total time and effort\n    const totalTime = strategies.reduce((sum, s) => sum + s.estimatedTime, 0);\n    const totalSteps = strategies.reduce((sum, s) => sum + s.steps.length, 0);\n    \n    // Identify parallelizable work\n    const parallelizable = strategies.filter(s => \n      s.type === 'automated' && \n      s.riskAssessment.overall === 'low'\n    );\n    \n    return {\n      totalStrategies: strategies.length,\n      totalEstimatedTime: totalTime,\n      totalSteps,\n      executionOrder,\n      parallelizableWork: parallelizable.length,\n      riskDistribution: this.calculateRiskDistribution(strategies),\n      recommendations: this.generatePlanRecommendations(strategies, grouped)\n    };\n  }\n\n  /**\n   * Group strategies by characteristics\n   */\n  private groupStrategies(strategies: ResolutionStrategy[]): Record<string, ResolutionStrategy[]> {\n    const grouped: Record<string, ResolutionStrategy[]> = {\n      automated: [],\n      manual: [],\n      critical: [],\n      lowRisk: [],\n      domainSpecific: []\n    };\n    \n    for (const strategy of strategies) {\n      if (strategy.type === 'automated') grouped.automated.push(strategy);\n      if (strategy.type === 'manual') grouped.manual.push(strategy);\n      if (strategy.priority === 'critical') grouped.critical.push(strategy);\n      if (strategy.riskAssessment.overall === 'low') grouped.lowRisk.push(strategy);\n      if (strategy.complexity === 'expert-required') grouped.domainSpecific.push(strategy);\n    }\n    \n    return grouped;\n  }\n\n  /**\n   * Determine optimal execution order\n   */\n  private determineExecutionOrder(strategies: ResolutionStrategy[]): string[] {\n    // Sort by priority first, then by risk level, then by estimated time\n    const sorted = [...strategies].sort((a, b) => {\n      const priorityOrder = { critical: 0, high: 1, medium: 2, low: 3 };\n      const riskOrder = { low: 0, medium: 1, high: 2, critical: 3 };\n      \n      if (a.priority !== b.priority) {\n        return priorityOrder[a.priority] - priorityOrder[b.priority];\n      }\n      \n      if (a.riskAssessment.overall !== b.riskAssessment.overall) {\n        return riskOrder[a.riskAssessment.overall] - riskOrder[b.riskAssessment.overall];\n      }\n      \n      return a.estimatedTime - b.estimatedTime;\n    });\n    \n    return sorted.map(s => s.id);\n  }\n\n  /**\n   * Calculate risk distribution\n   */\n  private calculateRiskDistribution(strategies: ResolutionStrategy[]): Record<string, number> {\n    const distribution = { low: 0, medium: 0, high: 0, critical: 0 };\n    \n    for (const strategy of strategies) {\n      distribution[strategy.riskAssessment.overall]++;\n    }\n    \n    return distribution;\n  }\n\n  /**\n   * Generate plan recommendations\n   */\n  private generatePlanRecommendations(\n    strategies: ResolutionStrategy[],\n    grouped: Record<string, ResolutionStrategy[]>\n  ): string[] {\n    const recommendations: string[] = [];\n    \n    if (grouped.critical.length > 0) {\n      recommendations.push(`Address ${grouped.critical.length} critical issues first`);\n    }\n    \n    if (grouped.automated.length > 0) {\n      recommendations.push(`${grouped.automated.length} issues can be automated - consider batch processing`);\n    }\n    \n    if (grouped.domainSpecific.length > 0) {\n      recommendations.push(`${grouped.domainSpecific.length} issues require domain expertise - schedule expert review`);\n    }\n    \n    if (grouped.lowRisk.length > grouped.lowRisk.length * 0.7) {\n      recommendations.push('Most issues are low risk - consider aggressive automation');\n    }\n    \n    return recommendations;\n  }\n\n  /**\n   * Initialize strategy templates\n   */\n  private initializeStrategyTemplates(): void {\n    // Import order strategy\n    this.strategyTemplates.set('import/order', {\n      type: 'automated',\n      priority: 'low',\n      confidence: 0.95,\n      complexity: 'trivial',\n      estimatedTime: 1,\n      steps: [\n        {\n          id: 'auto-fix-imports',\n          description: 'Automatically reorder imports',\n          action: 'execute-command',\n          details: { command: 'npx eslint --fix --rule import/order' },\n          automatable: true,\n          estimatedTime: 1,\n          dependencies: []\n        }\n      ]\n    });\n    \n    // No explicit any strategy\n    this.strategyTemplates.set('@typescript-eslint/no-explicit-any', {\n      type: 'manual',\n      priority: 'medium',\n      confidence: 0.3,\n      complexity: 'complex',\n      estimatedTime: 15,\n      steps: [\n        {\n          id: 'analyze-any-usage',\n          description: 'Analyze why any type is used',\n          action: 'review-code',\n          details: {\n            reviewCriteria: [\n              'Understand the data structure',\n              'Identify proper type definition',\n              'Consider union types or generics'\n            ]\n          },\n          automatable: false,\n          estimatedTime: 10,\n          dependencies: []\n        },\n        {\n          id: 'implement-proper-typing',\n          description: 'Replace any with proper types',\n          action: 'modify-file',\n          details: { changes: 'Replace any with specific type definitions' },\n          automatable: false,\n          estimatedTime: 5,\n          dependencies: ['analyze-any-usage']\n        }\n      ]\n    });\n    \n    // Default strategy\n    this.strategyTemplates.set('default', {\n      type: 'manual',\n      priority: 'medium',\n      confidence: 0.5,\n      complexity: 'moderate',\n      estimatedTime: 10\n    });\n  }\n\n  /**\n   * Initialize domain-specific strategies\n   */\n  private initializeDomainSpecificStrategies(): void {\n    // Astrological domain strategy\n    this.domainSpecificStrategies.set('astrological', {\n      prerequisites: [\n        {\n          type: 'knowledge',\n          description: 'Understanding of astronomical calculations',\n          required: true\n        },\n        {\n          type: 'access',\n          description: 'Access to astronomical validation data',\n          required: true\n        }\n      ],\n      validationRequirements: [\n        {\n          type: 'domain-expert',\n          description: 'Astrological domain expert review',\n          automated: false,\n          criticalPath: true\n        },\n        {\n          type: 'manual-review',\n          description: 'Validate against known astronomical data',\n          automated: false,\n          criticalPath: true\n        }\n      ]\n    });\n    \n    // Campaign system domain strategy\n    this.domainSpecificStrategies.set('campaign', {\n      prerequisites: [\n        {\n          type: 'knowledge',\n          description: 'Understanding of campaign system architecture',\n          required: true\n        }\n      ],\n      validationRequirements: [\n        {\n          type: 'test',\n          description: 'Run campaign system integration tests',\n          automated: true,\n          criticalPath: true\n        }\n      ]\n    });\n  }\n}\n\nexport interface OptimizedResolutionPlan {\n  totalStrategies: number;\n  totalEstimatedTime: number;\n  totalSteps: number;\n  executionOrder: string[];\n  parallelizableWork: number;\n  riskDistribution: Record<string, number>;\n  recommendations: string[];\n}"],"version":3}