c3021b2b09f8186b01044b8e9dae95dc
"use strict";
/**
 * Domain Context Analyzer
 * Provides domain-specific analysis for astrological, recipe, campaign, and service code
 *
 * Features:
 * - File path analysis to determine code domain
 * - Content analysis for domain-specific patterns
 * - Subdomain classification for specialized areas
 * - Domain-specific type suggestions and preservation reasons
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DomainContextAnalyzer = void 0;
const types_1 = require("./types");
class DomainContextAnalyzer {
    domainPatterns;
    typeMapping;
    pathPatterns;
    contentPatterns;
    subDomainPatterns;
    constructor() {
        this.domainPatterns = this.initializeDomainPatterns();
        this.typeMapping = this.initializeTypeMapping();
        this.pathPatterns = this.initializePathPatterns();
        this.contentPatterns = this.initializeContentPatterns();
        this.subDomainPatterns = this.initializeSubDomainPatterns();
    }
    /**
     * Analyze the domain context for a given classification context
     */
    async analyzeDomain(context) {
        const domain = this.detectDomain(context);
        const subDomain = this.detectSubDomain(context, domain);
        const intentionalityHints = this.generateIntentionalityHints(context, domain);
        const suggestedTypes = this.getDomainSpecificSuggestions(domain, context);
        const preservationReasons = this.getPreservationReasons(context, domain);
        return {
            domain,
            subDomain,
            intentionalityHints,
            suggestedTypes,
            preservationReasons
        };
    }
    /**
     * Get domain-specific type suggestions
     */
    getDomainSpecificSuggestions(domain, context) {
        const baseSuggestions = this.typeMapping.get(domain) || ['unknown'];
        const contextualSuggestions = this.getContextualSuggestions(context, domain);
        return [...new Set([...baseSuggestions, ...contextualSuggestions])];
    }
    /**
     * Detect the primary domain based on file path and content analysis
     */
    detectDomain(context) {
        // First, try path-based detection (most reliable)
        const pathDomain = this.detectDomainByPath(context.filePath);
        if (pathDomain !== types_1.CodeDomain.UTILITY) {
            return pathDomain;
        }
        // Then try content-based detection
        const contentDomain = this.detectDomainByContent(context);
        if (contentDomain !== types_1.CodeDomain.UTILITY) {
            return contentDomain;
        }
        // Finally, try import/dependency analysis
        const importDomain = this.detectDomainByImports(context);
        return importDomain;
    }
    /**
     * Detect domain based on file path patterns
     */
    detectDomainByPath(filePath) {
        const normalizedPath = filePath.toLowerCase().replace(/\\/g, '/');
        for (const [domain, patterns] of this.pathPatterns.entries()) {
            if (patterns.some(pattern => pattern.test(normalizedPath))) {
                return domain;
            }
        }
        return types_1.CodeDomain.UTILITY;
    }
    /**
     * Detect domain based on code content patterns
     */
    detectDomainByContent(context) {
        const codeContent = [context.codeSnippet, ...context.surroundingLines]
            .join('\n')
            .toLowerCase();
        // Score each domain based on pattern matches
        const domainScores = new Map();
        for (const [domain, patterns] of this.contentPatterns.entries()) {
            let score = 0;
            for (const pattern of patterns) {
                const matches = codeContent.match(pattern);
                if (matches) {
                    score += matches.length;
                }
            }
            if (score > 0) {
                domainScores.set(domain, score);
            }
        }
        // Return the domain with the highest score
        if (domainScores.size > 0) {
            const sortedDomains = Array.from(domainScores.entries())
                .sort(([, a], [, b]) => b - a);
            return sortedDomains[0][0];
        }
        return types_1.CodeDomain.UTILITY;
    }
    /**
     * Detect domain based on import statements and dependencies
     */
    detectDomainByImports(context) {
        const codeContent = [context.codeSnippet, ...context.surroundingLines].join('\n');
        // Look for import patterns
        const importMatches = codeContent.match(/import.*from\s+['"`]([^'"`]+)['"`]/g) || [];
        const requireMatches = codeContent.match(/require\(['"`]([^'"`]+)['"`]\)/g) || [];
        const allImports = [...importMatches, ...requireMatches].join(' ').toLowerCase();
        if (allImports.includes('astronomia') ||
            allImports.includes('astronomy-engine') ||
            allImports.includes('suncalc') ||
            allImports.includes('/calculations/') ||
            allImports.includes('/astro')) {
            return types_1.CodeDomain.ASTROLOGICAL;
        }
        if (allImports.includes('react') ||
            allImports.includes('@/components') ||
            allImports.includes('next/') ||
            allImports.includes('jsx') ||
            allImports.includes('tsx')) {
            return types_1.CodeDomain.COMPONENT;
        }
        if (allImports.includes('/campaign') ||
            allImports.includes('metrics') ||
            allImports.includes('intelligence')) {
            return types_1.CodeDomain.CAMPAIGN;
        }
        if (allImports.includes('/recipe') ||
            allImports.includes('/ingredient') ||
            allImports.includes('/food')) {
            return types_1.CodeDomain.RECIPE;
        }
        if (allImports.includes('/service') ||
            allImports.includes('/api') ||
            allImports.includes('axios') ||
            allImports.includes('fetch')) {
            return types_1.CodeDomain.SERVICE;
        }
        if (allImports.includes('jest') ||
            allImports.includes('@testing-library') ||
            allImports.includes('vitest')) {
            return types_1.CodeDomain.TEST;
        }
        return types_1.CodeDomain.UTILITY;
    }
    /**
     * Detect specialized subdomain within the primary domain
     */
    detectSubDomain(context, domain) {
        const filePath = context.filePath.toLowerCase().replace(/\\/g, '/');
        const codeContent = [context.codeSnippet, ...context.surroundingLines]
            .join('\n')
            .toLowerCase();
        const subDomainPatterns = this.subDomainPatterns.get(domain);
        if (!subDomainPatterns) {
            return undefined;
        }
        // Score each subdomain based on pattern matches
        const subDomainScores = new Map();
        for (const [subDomain, patterns] of subDomainPatterns.entries()) {
            let score = 0;
            // Check file path patterns
            for (const pattern of patterns) {
                if (pattern.test(filePath)) {
                    score += 2; // Path matches are weighted higher
                }
            }
            if (score > 0) {
                subDomainScores.set(subDomain, score);
            }
        }
        // Return the subdomain with the highest score
        if (subDomainScores.size > 0) {
            const sortedSubDomains = Array.from(subDomainScores.entries())
                .sort(([, a], [, b]) => b - a);
            return sortedSubDomains[0][0];
        }
        return undefined;
    }
    generateIntentionalityHints(context, domain) {
        const hints = [];
        switch (domain) {
            case types_1.CodeDomain.ASTROLOGICAL:
                hints.push({
                    reason: 'Astrological calculations often require flexible typing for external astronomical data',
                    confidence: 0.8,
                    suggestedAction: 'preserve'
                });
                if (context.codeSnippet.includes('position') || context.codeSnippet.includes('planetary')) {
                    hints.push({
                        reason: 'Planetary position data from external APIs may need any type for compatibility',
                        confidence: 0.9,
                        suggestedAction: 'document'
                    });
                }
                break;
            case types_1.CodeDomain.RECIPE:
                if (context.codeSnippet.includes('ingredient') || context.codeSnippet.includes('recipe')) {
                    hints.push({
                        reason: 'Recipe and ingredient data can often use specific types',
                        confidence: 0.7,
                        suggestedAction: 'replace'
                    });
                }
                break;
            case types_1.CodeDomain.CAMPAIGN:
                hints.push({
                    reason: 'Campaign system requires flexibility for dynamic configurations and metrics',
                    confidence: 0.85,
                    suggestedAction: 'preserve'
                });
                if (context.codeSnippet.includes('metrics') || context.codeSnippet.includes('config')) {
                    hints.push({
                        reason: 'Dynamic campaign configurations benefit from flexible typing',
                        confidence: 0.9,
                        suggestedAction: 'document'
                    });
                }
                break;
            case types_1.CodeDomain.TEST:
                hints.push({
                    reason: 'Test files often need flexible typing for mocks and test data',
                    confidence: 0.8,
                    suggestedAction: 'preserve'
                });
                break;
            case types_1.CodeDomain.SERVICE:
                if (context.codeSnippet.includes('api') || context.codeSnippet.includes('response')) {
                    hints.push({
                        reason: 'API responses may require any type for external service compatibility',
                        confidence: 0.8,
                        suggestedAction: 'document'
                    });
                }
                else {
                    hints.push({
                        reason: 'Service layer can often use more specific types',
                        confidence: 0.6,
                        suggestedAction: 'review'
                    });
                }
                break;
            default:
                hints.push({
                    reason: 'No domain-specific patterns detected, consider replacement',
                    confidence: 0.5,
                    suggestedAction: 'review'
                });
        }
        return hints;
    }
    getContextualSuggestions(context, domain) {
        const suggestions = [];
        const codeContent = context.codeSnippet.toLowerCase();
        switch (domain) {
            case types_1.CodeDomain.ASTROLOGICAL:
                if (codeContent.includes('position'))
                    suggestions.push('PlanetaryPosition');
                if (codeContent.includes('element'))
                    suggestions.push('ElementalProperties');
                if (codeContent.includes('sign'))
                    suggestions.push('ZodiacSign');
                if (codeContent.includes('planet'))
                    suggestions.push('Planet');
                break;
            case types_1.CodeDomain.RECIPE:
                if (codeContent.includes('ingredient'))
                    suggestions.push('Ingredient');
                if (codeContent.includes('recipe'))
                    suggestions.push('Recipe');
                if (codeContent.includes('nutrition'))
                    suggestions.push('NutritionalInfo');
                if (codeContent.includes('cooking'))
                    suggestions.push('CookingMethod');
                break;
            case types_1.CodeDomain.CAMPAIGN:
                if (codeContent.includes('metrics'))
                    suggestions.push('ProgressMetrics');
                if (codeContent.includes('config'))
                    suggestions.push('CampaignConfig');
                if (codeContent.includes('result'))
                    suggestions.push('CampaignResult');
                if (codeContent.includes('error'))
                    suggestions.push('ValidationResult');
                break;
            case types_1.CodeDomain.SERVICE:
                if (codeContent.includes('response'))
                    suggestions.push('ApiResponse<T>');
                if (codeContent.includes('request'))
                    suggestions.push('ApiRequest');
                if (codeContent.includes('data'))
                    suggestions.push('ServiceData');
                break;
            case types_1.CodeDomain.COMPONENT:
                if (codeContent.includes('props'))
                    suggestions.push('ComponentProps');
                if (codeContent.includes('state'))
                    suggestions.push('ComponentState');
                if (codeContent.includes('event'))
                    suggestions.push('React.SyntheticEvent');
                break;
        }
        return suggestions;
    }
    getPreservationReasons(context, domain) {
        const reasons = [];
        if (domain === types_1.CodeDomain.ASTROLOGICAL) {
            reasons.push('Astrological calculations require compatibility with external astronomical libraries');
            reasons.push('Planetary position data structures vary between different API sources');
        }
        if (domain === types_1.CodeDomain.CAMPAIGN) {
            reasons.push('Campaign system needs flexibility for evolving metrics and configurations');
            reasons.push('Dynamic tool integration requires adaptable type structures');
        }
        if (domain === types_1.CodeDomain.TEST) {
            reasons.push('Test flexibility for mocking and test data generation');
            reasons.push('Jest and testing library compatibility requirements');
        }
        if (context.isInTestFile) {
            reasons.push('Test file context allows for more flexible typing patterns');
        }
        if (context.hasExistingComment) {
            reasons.push('Existing documentation suggests intentional usage');
        }
        return reasons;
    }
    /**
     * Initialize path-based domain detection patterns
     */
    initializePathPatterns() {
        return new Map([
            [types_1.CodeDomain.ASTROLOGICAL, [
                    /\/calculations\//i,
                    /\/astro/i,
                    /planetary/i,
                    /elemental/i,
                    /lunar/i,
                    /solar/i,
                    /zodiac/i,
                    /ephemeris/i
                ]],
            [types_1.CodeDomain.RECIPE, [
                    /\/recipe/i,
                    /\/ingredient/i,
                    /\/food/i,
                    /\/culinary/i,
                    /\/cooking/i,
                    /\/nutrition/i,
                    /\/data\/.*ingredient/i,
                    /\/data\/.*recipe/i
                ]],
            [types_1.CodeDomain.CAMPAIGN, [
                    /\/campaign/i,
                    /\/intelligence/i,
                    /metrics/i,
                    /progress/i,
                    /typescript.*error/i,
                    /linting/i,
                    /validation/i
                ]],
            [types_1.CodeDomain.SERVICE, [
                    /\/service/i,
                    /\/api/i,
                    /\/client/i,
                    /\/adapter/i,
                    /recommendation.*service/i
                ]],
            [types_1.CodeDomain.COMPONENT, [
                    /\/component/i,
                    /\.tsx$/i,
                    /\.jsx$/i,
                    /\/ui\//i,
                    /\/pages\//i,
                    /\/app\//i
                ]],
            [types_1.CodeDomain.TEST, [
                    /test/i,
                    /spec/i,
                    /__tests__/i,
                    /\.test\./i,
                    /\.spec\./i
                ]],
            [types_1.CodeDomain.UTILITY, [
                    /\/utils/i,
                    /\/helper/i,
                    /\/common/i,
                    /\/shared/i,
                    /\/lib/i
                ]]
        ]);
    }
    /**
     * Initialize content-based domain detection patterns
     */
    initializeContentPatterns() {
        return new Map([
            [types_1.CodeDomain.ASTROLOGICAL, [
                    /planetary|planet|astro|zodiac|sign|element|lunar|solar/gi,
                    /position|degree|longitude|latitude|ephemeris/gi,
                    /fire|water|earth|air|elemental/gi,
                    /astronomia|astronomy-engine|suncalc/gi,
                    /PlanetaryPosition|ElementalProperties|ZodiacSign/gi
                ]],
            [types_1.CodeDomain.RECIPE, [
                    /recipe|ingredient|food|culinary|cooking|nutrition/gi,
                    /flavor|taste|spice|herb|vegetable|fruit/gi,
                    /meal|dish|cuisine|dietary/gi,
                    /Ingredient|Recipe|NutritionalInfo|CookingMethod/gi
                ]],
            [types_1.CodeDomain.CAMPAIGN, [
                    /campaign|metrics|progress|typescript|linting|error/gi,
                    /validation|safety|rollback|checkpoint/gi,
                    /intelligence|enterprise|automation/gi,
                    /CampaignConfig|ProgressMetrics|ValidationResult/gi
                ]],
            [types_1.CodeDomain.SERVICE, [
                    /service|api|request|response|client|server/gi,
                    /endpoint|http|fetch|axios|data/gi,
                    /ApiResponse|ServiceData|RequestConfig/gi
                ]],
            [types_1.CodeDomain.COMPONENT, [
                    /component|props|state|render|jsx|tsx/gi,
                    /react|hook|context|provider/gi,
                    /ComponentProps|React\.Component|JSX\.Element/gi
                ]],
            [types_1.CodeDomain.UTILITY, [
                    /util|helper|common|shared|lib/gi,
                    /function|method|tool|format/gi
                ]],
            [types_1.CodeDomain.TEST, [
                    /test|spec|mock|jest|describe|it|expect/gi,
                    /fixture|stub|spy|beforeEach|afterEach/gi,
                    /jest\.Mock|MockedFunction|TestData/gi
                ]]
        ]);
    }
    /**
     * Initialize subdomain detection patterns
     */
    initializeSubDomainPatterns() {
        return new Map([
            [types_1.CodeDomain.ASTROLOGICAL, new Map([
                    ['planetary', [/planetary|planet/gi, /position|degree|longitude/gi]],
                    ['elemental', [/elemental|element/gi, /fire|water|earth|air/gi]],
                    ['lunar', [/lunar|moon/gi, /phase|cycle/gi]],
                    ['solar', [/solar|sun/gi, /sunrise|sunset/gi]],
                    ['zodiac', [/zodiac|sign/gi, /aries|taurus|gemini|cancer|leo|virgo|libra|scorpio|sagittarius|capricorn|aquarius|pisces/gi]],
                    ['calculations', [/calculation|compute|algorithm/gi, /ephemeris|transit/gi]]
                ])],
            [types_1.CodeDomain.RECIPE, new Map([
                    ['ingredients', [/ingredient/gi, /spice|herb|vegetable|fruit/gi]],
                    ['cooking-methods', [/cooking|method/gi, /bake|boil|fry|steam|grill/gi]],
                    ['nutrition', [/nutrition|nutrient/gi, /calorie|vitamin|mineral/gi]],
                    ['cuisines', [/cuisine|cultural/gi, /italian|chinese|mexican|indian/gi]],
                    ['recipes', [/recipe|dish|meal/gi, /preparation|instruction/gi]]
                ])],
            [types_1.CodeDomain.CAMPAIGN, new Map([
                    ['typescript-errors', [/typescript|ts\d+/gi, /error|compilation/gi]],
                    ['linting', [/lint|eslint/gi, /warning|rule/gi]],
                    ['performance', [/performance|optimization/gi, /memory|speed|bundle/gi]],
                    ['metrics', [/metrics|progress/gi, /tracking|measurement/gi]],
                    ['intelligence', [/intelligence|enterprise/gi, /analytics|insights/gi]],
                    ['safety', [/safety|validation/gi, /rollback|checkpoint/gi]]
                ])],
            [types_1.CodeDomain.SERVICE, new Map([
                    ['recommendation', [/recommendation|suggest/gi, /algorithm|matching/gi]],
                    ['api-integration', [/api|integration/gi, /request|response|endpoint/gi]],
                    ['data-processing', [/data|processing/gi, /transform|parse|validate/gi]],
                    ['caching', [/cache|storage/gi, /redis|memory/gi]]
                ])],
            [types_1.CodeDomain.COMPONENT, new Map([
                    ['ui-components', [/component|ui/gi, /button|input|modal/gi]],
                    ['pages', [/page|route/gi, /navigation|layout/gi]],
                    ['hooks', [/hook|use[A-Z]/gi, /state|effect|context/gi]],
                    ['forms', [/form|input/gi, /validation|submit/gi]]
                ])],
            [types_1.CodeDomain.TEST, new Map([
                    ['unit-tests', [/unit|test/gi, /describe|it|expect/gi]],
                    ['integration-tests', [/integration|e2e/gi, /workflow|scenario/gi]],
                    ['mocks', [/mock|stub|spy/gi, /jest\.mock|mockImplementation/gi]]
                ])],
            [types_1.CodeDomain.UTILITY, new Map([
                    ['validation', [/validation|validate/gi, /schema|rule/gi]],
                    ['formatting', [/format|transform/gi, /string|date|number/gi]],
                    ['helpers', [/helper|utility/gi, /common|shared/gi]]
                ])]
        ]);
    }
    /**
     * Legacy method for backward compatibility
     */
    initializeDomainPatterns() {
        // This method is kept for backward compatibility
        // The actual patterns are now in initializeContentPatterns
        return this.initializeContentPatterns();
    }
    initializeTypeMapping() {
        return new Map([
            [types_1.CodeDomain.ASTROLOGICAL, [
                    'PlanetaryPosition',
                    'ElementalProperties',
                    'ZodiacSign',
                    'Planet',
                    'AstrologicalData',
                    'unknown'
                ]],
            [types_1.CodeDomain.RECIPE, [
                    'Ingredient',
                    'Recipe',
                    'NutritionalInfo',
                    'CookingMethod',
                    'CulinaryData',
                    'unknown'
                ]],
            [types_1.CodeDomain.CAMPAIGN, [
                    'ProgressMetrics',
                    'CampaignConfig',
                    'CampaignResult',
                    'ValidationResult',
                    'SafetyEvent',
                    'Record<string, unknown>'
                ]],
            [types_1.CodeDomain.SERVICE, [
                    'ApiResponse<T>',
                    'ServiceData',
                    'RequestConfig',
                    'ResponseData',
                    'unknown'
                ]],
            [types_1.CodeDomain.COMPONENT, [
                    'ComponentProps',
                    'React.ComponentProps<T>',
                    'React.ReactNode',
                    'JSX.Element',
                    'unknown'
                ]],
            [types_1.CodeDomain.UTILITY, [
                    'unknown',
                    'Record<string, unknown>',
                    'object'
                ]],
            [types_1.CodeDomain.TEST, [
                    'jest.Mock',
                    'MockedFunction<T>',
                    'TestData',
                    'unknown'
                ]]
        ]);
    }
}
exports.DomainContextAnalyzer = DomainContextAnalyzer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,