{"file":"/Users/GregCastro/Desktop/WhatToEatNext/.consolidation-backups-2025-08-23T17-54-10-092Z/src/services/campaign/unintentional-any-elimination/SafeTypeReplacer.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/.consolidation-backups-2025-08-23T17-54-10-092Z/src/services/campaign/unintentional-any-elimination/SafeTypeReplacer.ts"],"sourcesContent":["/**\n * Safe Type Replacer\n * Performs safe replacements of unintentional `any` types with more specific types\n *\n * Core Features:\n * - Atomic replacement operations with automatic rollback\n * - TypeScript compilation validation after each replacement\n * - Comprehensive backup system for all modified files\n * - Safety scoring system for replacement confidence\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport { BuildValidationResult } from '@/utils/BuildValidator';\nimport { SafetyValidator } from './SafetyValidator';\nimport {\n    ClassificationContext,\n    CodeDomain,\n    ReplacementResult,\n    ReplacementStrategy,\n    SafetyProtocolError,\n    TypeReplacement\n} from './types';\n\nexport class SafeTypeReplacer {\n  private strategies: ReplacementStrategy[];\n  private backupDirectory: string;\n  private safetyThreshold: number;\n  private validationTimeout: number;\n  private maxRetries: number;\n  private safetyValidator: SafetyValidator;\n\n  constructor(\n    backupDirectory = './.any-elimination-backups',\n    safetyThreshold = 0.7,\n    validationTimeout = 30000,\n    maxRetries = 3\n  ) {\n    this.backupDirectory = backupDirectory;\n    this.safetyThreshold = safetyThreshold;\n    this.validationTimeout = validationTimeout;\n    this.maxRetries = maxRetries;\n    this.strategies = this.initializeStrategies();\n    this.safetyValidator = new SafetyValidator(validationTimeout, {\n      minimumSafetyScore: safetyThreshold\n    });\n    this.ensureBackupDirectory();\n  }\n\n  /**\n   * Apply a single type replacement with comprehensive safety validation\n   * Implements atomic operations with automatic rollback on any failure\n   */\n  async applyReplacement(replacement: TypeReplacement, context?: ClassificationContext): Promise<ReplacementResult> {\n    // Enhanced pre-validation using SafetyValidator\n    let safetyValidation: SafetyValidationResult;\n\n    if (context) {\n      safetyValidation = this.safetyValidator.calculateSafetyScore(replacement, context);\n    } else {\n      // Fallback to basic safety score calculation\n      const basicSafetyScore = this.calculateSafetyScore(replacement);\n      safetyValidation = {\n        isValid: basicSafetyScore >= this.safetyThreshold,\n        safetyScore: basicSafetyScore,\n        validationErrors: basicSafetyScore < this.safetyThreshold\n          ? [`Safety score ${basicSafetyScore} below threshold ${this.safetyThreshold}`]\n          : [],\n        warnings: [],\n        recommendations: []\n      };\n    }\n\n    if (!safetyValidation.isValid) {\n      return {\n        success: false,\n        appliedReplacements: [],\n        failedReplacements: [replacement],\n        compilationErrors: safetyValidation.validationErrors,\n        rollbackPerformed: false\n      };\n    }\n\n    const backupPath = await this.createBackup(replacement.filePath);\n    let retryCount = 0;\n\n    while (retryCount < this.maxRetries) {\n      try {\n        // Atomic replacement operation\n        const result = await this.performAtomicReplacement(replacement, backupPath);\n\n        if (result.success) {\n          // Verify rollback capability before declaring success\n          const rollbackVerification = await this.verifyRollbackCapability(replacement.filePath, backupPath);\n          if (!rollbackVerification.success) {\n            await this.rollbackFromBackup(replacement.filePath, backupPath);\n            return {\n              success: false,\n              appliedReplacements: [],\n              failedReplacements: [replacement],\n              compilationErrors: [`Rollback verification failed: ${rollbackVerification.error}`],\n              rollbackPerformed: true,\n              backupPath\n            };\n          }\n\n          return result;\n        } else {\n          // If replacement failed with specific errors, return immediately (don't retry)\n          return result;\n        }\n\n      } catch (error) {\n        retryCount++;\n        if (retryCount >= this.maxRetries) {\n          // Final rollback on exhausted retries\n          await this.rollbackFromBackup(replacement.filePath, backupPath);\n          return {\n            success: false,\n            appliedReplacements: [],\n            failedReplacements: [replacement],\n            compilationErrors: [error instanceof Error ? error.message : String(error)],\n            rollbackPerformed: true,\n            backupPath\n          };\n        }\n\n        // Wait briefly before retry\n        await new Promise(resolve => setTimeout(resolve, 100 * retryCount));\n      }\n    }\n\n    // Should not reach here, but handle edge case\n    await this.rollbackFromBackup(replacement.filePath, backupPath);\n    return {\n      success: false,\n      appliedReplacements: [],\n      failedReplacements: [replacement],\n      compilationErrors: ['Maximum retries exceeded'],\n      rollbackPerformed: true,\n      backupPath\n    };\n  }\n\n  /**\n   * Process multiple replacements in batch with atomic operations\n   */\n  async processBatch(replacements: TypeReplacement[]): Promise<ReplacementResult> {\n    const backupPaths: Map<string, string> = new Map();\n    const appliedReplacements: TypeReplacement[] = [];\n    const failedReplacements: TypeReplacement[] = [];\n    const compilationErrors: string[] = [];\n\n    try {\n      // Create backups for all files\n      for (const replacement of replacements) {\n        if (!backupPaths.has(replacement.filePath)) {\n          const backupPath = await this.createBackup(replacement.filePath);\n          backupPaths.set(replacement.filePath, backupPath);\n        }\n      }\n\n      // Group replacements by file for efficient processing\n      const replacementsByFile = this.groupReplacementsByFile(replacements);\n\n      // Apply replacements file by file\n      for (const [filePath, fileReplacements] of Array.from(replacementsByFile.entries())) {\n        try {\n          const result = await this.applyReplacementsToFile(filePath, fileReplacements);\n          appliedReplacements.push(...result.applied);\n          failedReplacements.push(...result.failed);\n\n          if (result.failed.length > 0) {\n            compilationErrors.push(...result.errors);\n          }\n        } catch (error) {\n          failedReplacements.push(...fileReplacements);\n          compilationErrors.push(error instanceof Error ? error.message : String(error));\n        }\n      }\n\n      // Enhanced build validation after batch operations\n      const modifiedFiles = Array.from(backupPaths.keys());\n      const buildValidation = await this.safetyValidator.validateBuildAfterBatch(modifiedFiles, false);\n\n      if (!buildValidation.buildSuccessful) {\n        // Rollback all changes\n        await this.rollbackAllFiles(backupPaths);\n\n        return {\n          success: false,\n          appliedReplacements: [],\n          failedReplacements: replacements,\n          compilationErrors: buildValidation.compilationErrors,\n          rollbackPerformed: true\n        };\n      }\n\n      // Validate rollback capability\n      const rollbackValidation = await this.safetyValidator.validateRollbackCapability(\n        new Map(modifiedFiles.map(file => [file, file])),\n        backupPaths\n      );\n\n      if (!rollbackValidation.canRollback) {\n        compilationErrors.push(...rollbackValidation.rollbackErrors);\n        compilationErrors.push('Warning: Rollback capability compromised');\n      }\n\n      const success = failedReplacements.length === 0;\n      return {\n        success,\n        appliedReplacements,\n        failedReplacements,\n        compilationErrors,\n        rollbackPerformed: false\n      };\n\n    } catch (error) {\n      // Emergency rollback\n      await this.rollbackAllFiles(backupPaths);\n\n      throw new SafetyProtocolError(\n        'Batch replacement failed with emergency rollback',\n        Array.from(backupPaths.values())[0] || '',\n        Array.from(backupPaths.keys())\n      );\n    }\n  }\n\n  private initializeStrategies(): ReplacementStrategy[] {\n    return [\n      // Array type replacement strategy (any[] → unknown[])\n      {\n        pattern: /:\\s*any\\[\\]/g,\n        replacement: (match: string, context: ClassificationContext) => {\n          // Check if we can infer a more specific array type\n          const inferredType = this.inferArrayElementType(context);\n          return match.replace('any[]', `${inferredType}[]`);\n        },\n        validator: (context: ClassificationContext) =>\n          context.codeSnippet.includes('any[]') &&\n          !this.isInErrorHandlingContext(context),\n        priority: 1\n      },\n\n      // Record type replacement with validation (Record<string, any> → Record<string, unknown>)\n      {\n        pattern: /:\\s*Record<\\s*string\\s*,\\s*any\\s*>/g,\n        replacement: (match: string, context: ClassificationContext) => {\n          // Check if we can infer a more specific value type\n          const inferredValueType = this.inferRecordValueType(context);\n          return match.replace(/Record<\\s*string\\s*,\\s*any\\s*>/, `Record<string, ${inferredValueType}>`);\n        },\n        validator: (context: ClassificationContext) =>\n          context.codeSnippet.includes('Record<string, any>') &&\n          !this.isInErrorHandlingContext(context) &&\n          !this.isDynamicConfigContext(context),\n        priority: 2\n      },\n\n      // Generic Record replacement (Record<number, any> → Record<number, unknown>)\n      {\n        pattern: /:\\s*Record<\\s*number\\s*,\\s*any\\s*>/g,\n        replacement: (match: string, context: ClassificationContext) => {\n          const inferredValueType = this.inferRecordValueType(context);\n          return match.replace(/Record<\\s*number\\s*,\\s*any\\s*>/, `Record<number, ${inferredValueType}>`);\n        },\n        validator: (context: ClassificationContext) =>\n          context.codeSnippet.includes('Record<number, any>') &&\n          !this.isInErrorHandlingContext(context),\n        priority: 2\n      },\n\n      // Index signature replacement ([key: string]: any → [key: string]: unknown)\n      {\n        pattern: /\\[key:\\s*string\\]\\s*:\\s*any/g,\n        replacement: (match: string, context: ClassificationContext) => {\n          const inferredValueType = this.inferIndexSignatureValueType(context);\n          return match.replace('any', inferredValueType);\n        },\n        validator: (context: ClassificationContext) =>\n          context.codeSnippet.includes('[key: string]: any') &&\n          !this.isInErrorHandlingContext(context),\n        priority: 3\n      },\n\n      // Function parameter analysis and replacement\n      {\n        pattern: /\\(\\s*([^:)]+):\\s*any\\s*\\)/g,\n        replacement: (match: string, context: ClassificationContext) => {\n          const paramName = match.match(/\\(\\s*([^:)]+):/)?.[1]?.trim();\n          if (paramName) {\n            const inferredType = this.inferFunctionParameterType(context, paramName);\n            return match.replace('any', inferredType);\n          }\n          return match.replace('any', 'unknown');\n        },\n        validator: (context: ClassificationContext) =>\n          this.isFunctionParameterContext(context) &&\n          !this.isInErrorHandlingContext(context) &&\n          !this.isEventHandlerContext(context),\n        priority: 4\n      },\n\n      // Function parameter in arrow functions\n      {\n        pattern: /\\(\\s*([^:)]+):\\s*any\\s*\\)\\s*=>/g,\n        replacement: (match: string, context: ClassificationContext) => {\n          const paramName = match.match(/\\(\\s*([^:)]+):/)?.[1]?.trim();\n          if (paramName) {\n            const inferredType = this.inferFunctionParameterType(context, paramName);\n            return match.replace('any', inferredType);\n          }\n          return match.replace('any', 'unknown');\n        },\n        validator: (context: ClassificationContext) =>\n          context.codeSnippet.includes('=>') &&\n          !this.isInErrorHandlingContext(context),\n        priority: 4\n      },\n\n      // Return type inference and replacement\n      {\n        pattern: /\\):\\s*any(?=\\s*[{;])/g,\n        replacement: (match: string, context: ClassificationContext) => {\n          const inferredReturnType = this.inferReturnType(context);\n          return match.replace('any', inferredReturnType);\n        },\n        validator: (context: ClassificationContext) =>\n          this.isFunctionReturnTypeContext(context) &&\n          !this.isInErrorHandlingContext(context) &&\n          !this.isExternalApiContext(context),\n        priority: 5\n      },\n\n      // Generic type parameter replacement\n      {\n        pattern: /<\\s*any\\s*>/g,\n        replacement: (match: string, context: ClassificationContext) => {\n          const inferredGenericType = this.inferGenericType(context);\n          return match.replace('any', inferredGenericType);\n        },\n        validator: (context: ClassificationContext) =>\n          context.codeSnippet.includes('<any>') &&\n          !this.isInErrorHandlingContext(context),\n        priority: 6\n      },\n\n      // Object property type replacement\n      {\n        pattern: /(\\w+):\\s*any(?=\\s*[,;}])/g,\n        replacement: (match: string, context: ClassificationContext) => {\n          const propertyName = match.match(/(\\w+):/)?.[1];\n          if (propertyName) {\n            const inferredType = this.inferObjectPropertyType(context, propertyName);\n            return match.replace('any', inferredType);\n          }\n          return match.replace('any', 'unknown');\n        },\n        validator: (context: ClassificationContext) =>\n          this.isObjectPropertyContext(context) &&\n          !this.isInErrorHandlingContext(context),\n        priority: 7\n      },\n\n      // Simple variable type replacement (fallback)\n      {\n        pattern: /:\\s*any(?=\\s*[=;,\\)])/g,\n        replacement: (match: string, context: ClassificationContext) => {\n          // Try to infer from assignment or usage\n          const inferredType = this.inferVariableType(context);\n          return match.replace('any', inferredType);\n        },\n        validator: (context: ClassificationContext) =>\n          !this.isInErrorHandlingContext(context) &&\n          !this.isExternalApiContext(context) &&\n          !this.isDynamicConfigContext(context),\n        priority: 8\n      }\n    ];\n  }\n\n  private async createBackup(filePath: string): Promise<string> {\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const fileName = path.basename(filePath);\n    const backupFileName = `${fileName}.${timestamp}.backup`;\n    const backupPath = path.join(this.backupDirectory, backupFileName);\n\n    const originalContent = fs.readFileSync(filePath, 'utf8');\n    fs.writeFileSync(backupPath, originalContent, 'utf8');\n\n    return backupPath;\n  }\n\n  private async rollbackFromBackup(filePath: string, backupPath: string): Promise<void> {\n    if (fs.existsSync(backupPath)) {\n      const backupContent = fs.readFileSync(backupPath, 'utf8');\n      fs.writeFileSync(filePath, backupContent, 'utf8');\n    }\n  }\n\n  private async rollbackAllFiles(backupPaths: Map<string, string>): Promise<void> {\n    for (const [filePath, backupPath] of Array.from(backupPaths.entries())) {\n      await this.rollbackFromBackup(filePath, backupPath);\n    }\n  }\n\n  private groupReplacementsByFile(replacements: TypeReplacement[]): Map<string, TypeReplacement[]> {\n    const grouped = new Map<string, TypeReplacement[]>();\n\n    for (const replacement of replacements) {\n      const existing = grouped.get(replacement.filePath);\n      if (existing) {\n        existing.push(replacement);\n      } else {\n        grouped.set(replacement.filePath, [replacement]);\n      }\n    }\n\n    // Sort replacements within each file by line number (descending to avoid line number shifts)\n    for (const fileReplacements of grouped.values()) {\n      fileReplacements.sort((a, b) => b.lineNumber - a.lineNumber);\n    }\n\n    return grouped;\n  }\n\n  private async applyReplacementsToFile(\n    filePath: string,\n    replacements: TypeReplacement[]\n  ): Promise<{ applied: TypeReplacement[], failed: TypeReplacement[], errors: string[] }> {\n    const applied: TypeReplacement[] = [];\n    const failed: TypeReplacement[] = [];\n    const errors: string[] = [];\n\n    try {\n      let content = fs.readFileSync(filePath, 'utf8');\n      let lines = content.split('\\n');\n\n      for (const replacement of replacements) {\n        try {\n          const lineIndex = replacement.lineNumber - 1;\n          if (lineIndex < 0 || lineIndex >= lines.length) {\n            failed.push(replacement);\n            errors.push(`Invalid line number ${replacement.lineNumber} for file ${filePath}`);\n            continue;\n          }\n\n          const originalLine = lines[lineIndex];\n          const modifiedLine = originalLine.replace(replacement.original, replacement.replacement);\n\n          if (originalLine === modifiedLine) {\n            failed.push(replacement);\n            errors.push(`Pattern \"${replacement.original}\" not found in line: ${originalLine}`);\n            continue;\n          }\n\n          lines[lineIndex] = modifiedLine;\n          applied.push(replacement);\n\n        } catch (error) {\n          failed.push(replacement);\n          errors.push(error instanceof Error ? error.message : String(error));\n        }\n      }\n\n      // Write the modified content back to file\n      const modifiedContent = lines.join('\\n');\n      fs.writeFileSync(filePath, modifiedContent, 'utf8');\n\n    } catch (error) {\n      // If file-level operation fails, mark all replacements as failed\n      failed.push(...replacements);\n      errors.push(error instanceof Error ? error.message : String(error));\n    }\n\n    return { applied, failed, errors };\n  }\n\n  private async validateTypeScriptCompilation(): Promise<{ success: boolean, errors: string[] }> {\n    const buildResult = await this.safetyValidator.validateTypeScriptCompilation();\n    return {\n      success: buildResult.buildSuccessful,\n      errors: buildResult.compilationErrors\n    };\n  }\n\n  private ensureBackupDirectory(): void {\n    if (!fs.existsSync(this.backupDirectory)) {\n      fs.mkdirSync(this.backupDirectory, { recursive: true });\n    }\n  }\n\n  /**\n   * Perform atomic replacement operation with comprehensive validation\n   */\n  private async performAtomicReplacement(\n    replacement: TypeReplacement,\n    backupPath: string\n  ): Promise<ReplacementResult> {\n    try {\n      // Read original file content\n      const originalContent = fs.readFileSync(replacement.filePath, 'utf8');\n      const lines = originalContent.split('\\n');\n\n      // Validate line number\n      const lineIndex = replacement.lineNumber - 1;\n      if (lineIndex < 0 || lineIndex >= lines.length) {\n        return {\n          success: false,\n          appliedReplacements: [],\n          failedReplacements: [replacement],\n          compilationErrors: [`Invalid line number ${replacement.lineNumber} for file ${replacement.filePath}`],\n          rollbackPerformed: false,\n          backupPath\n        };\n      }\n\n      // Apply replacement\n      const originalLine = lines[lineIndex];\n      const modifiedLine = originalLine.replace(replacement.original, replacement.replacement);\n\n      // Verify replacement was applied\n      if (originalLine === modifiedLine) {\n        return {\n          success: false,\n          appliedReplacements: [],\n          failedReplacements: [replacement],\n          compilationErrors: [`Pattern \"${replacement.original}\" not found in line: ${originalLine}`],\n          rollbackPerformed: false,\n          backupPath\n        };\n      }\n\n      // Write modified content\n      lines[lineIndex] = modifiedLine;\n      const modifiedContent = lines.join('\\n');\n      fs.writeFileSync(replacement.filePath, modifiedContent, 'utf8');\n\n      // Validate TypeScript compilation\n      const compilationResult = await this.validateTypeScriptCompilation();\n      if (!compilationResult.success) {\n        // Rollback on compilation failure\n        await this.rollbackFromBackup(replacement.filePath, backupPath);\n        return {\n          success: false,\n          appliedReplacements: [],\n          failedReplacements: [replacement],\n          compilationErrors: compilationResult.errors,\n          rollbackPerformed: true,\n          backupPath\n        };\n      }\n\n      return {\n        success: true,\n        appliedReplacements: [replacement],\n        failedReplacements: [],\n        compilationErrors: [],\n        rollbackPerformed: false,\n        backupPath\n      };\n\n    } catch (error) {\n      // Don't rollback here - let the calling method handle it\n      throw error;\n    }\n  }\n\n  /**\n   * Verify that rollback capability is working correctly\n   */\n  private async verifyRollbackCapability(\n    filePath: string,\n    backupPath: string\n  ): Promise<{ success: boolean, error?: string }> {\n    try {\n      // Read backup content\n      if (!fs.existsSync(backupPath)) {\n        return { success: false, error: 'Backup file does not exist' };\n      }\n\n      const backupContent = fs.readFileSync(backupPath, 'utf8');\n\n      // For testing purposes, we'll just verify the backup exists and is readable\n      // In a real scenario, we might do a more comprehensive test\n      if (backupContent.length === 0) {\n        return { success: false, error: 'Backup file is empty' };\n      }\n\n      return { success: true };\n\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : String(error)\n      };\n    }\n  }\n\n  /**\n   * Calculate safety score for a replacement based on multiple factors\n   */\n  private calculateSafetyScore(replacement: TypeReplacement): number {\n    let score = replacement.confidence; // Base score from classification confidence\n\n    // Adjust based on replacement type\n    if (replacement.replacement.includes('unknown')) {\n      score += 0.1; // unknown is generally safer than any\n    }\n\n    // Adjust based on file type\n    if (replacement.filePath.includes('.test.') || replacement.filePath.includes('__tests__')) {\n      score += 0.05; // Test files are safer to modify\n    }\n\n    // Adjust based on replacement pattern complexity\n    if (replacement.original === 'any[]') {\n      score += 0.15; // Array replacements are very safe\n    } else if (replacement.original.includes('Record<string, any>')) {\n      score += 0.1; // Record replacements are generally safe\n    } else if (replacement.original.includes('function') || replacement.original.includes('=>')) {\n      score -= 0.1; // Function-related replacements are riskier\n    }\n\n    // Adjust based on line context (if available in the replacement)\n    const lineContent = replacement.original;\n    if (lineContent.includes('catch') || lineContent.includes('error')) {\n      score -= 0.2; // Error handling contexts are riskier\n    }\n\n    if (lineContent.includes('interface') || lineContent.includes('type ')) {\n      score += 0.05; // Type definitions are safer\n    }\n\n    // Ensure score stays within bounds\n    return Math.max(0, Math.min(1, score));\n  }\n\n  /**\n   * Get replacement strategies sorted by priority\n   */\n  getStrategies(): ReplacementStrategy[] {\n    return [...this.strategies].sort((a, b) => a.priority - b.priority);\n  }\n\n  /**\n   * Add a custom replacement strategy\n   */\n  addStrategy(strategy: ReplacementStrategy): void {\n    this.strategies.push(strategy);\n    this.strategies.sort((a, b) => a.priority - b.priority);\n  }\n\n  /**\n   * Get backup directory path\n   */\n  getBackupDirectory(): string {\n    return this.backupDirectory;\n  }\n\n  /**\n   * Clean up old backup files (older than specified days)\n   */\n  cleanupOldBackups(daysToKeep = 7): void {\n    try {\n      const cutoffDate = new Date();\n      cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);\n\n      const files = fs.readdirSync(this.backupDirectory);\n\n      for (const file of files) {\n        if (file.endsWith('.backup')) {\n          const filePath = path.join(this.backupDirectory, file);\n          const stats = fs.statSync(filePath);\n\n          if (stats.mtime < cutoffDate) {\n            fs.unlinkSync(filePath);\n          }\n        }\n      }\n    } catch (error) {\n      // Log error but don't throw - cleanup is not critical\n      console.warn('Failed to cleanup old backups:', error);\n    }\n  }\n\n  // Type Inference Helper Methods\n\n  /**\n   * Infer array element type from context\n   */\n  private inferArrayElementType(context: ClassificationContext): string {\n    const { codeSnippet, surroundingLines } = context;\n\n    // Look for array initialization patterns\n    if (codeSnippet.includes('= [')) {\n      // Check if array has string literals\n      if (codeSnippet.includes(\"'\") || codeSnippet.includes('\"')) {\n        return 'string';\n      }\n      // Check if array has numbers\n      if (/=\\s*\\[\\s*\\d/.test(codeSnippet)) {\n        return 'number';\n      }\n      // Check if array has boolean values\n      if (codeSnippet.includes('true') || codeSnippet.includes('false')) {\n        return 'boolean';\n      }\n    }\n\n    // Look for push operations in surrounding lines\n    const allContext = [codeSnippet, ...surroundingLines].join(' ');\n    if (allContext.includes('.push(')) {\n      if (allContext.includes('.push(\"') || allContext.includes(\".push('\")) {\n        return 'string';\n      }\n      if (/\\.push\\(\\d/.test(allContext)) {\n        return 'number';\n      }\n    }\n\n    // Domain-specific inference\n    if (context.domainContext.domain === CodeDomain.ASTROLOGICAL) {\n      if (codeSnippet.includes('planet') || codeSnippet.includes('sign')) {\n        return 'string';\n      }\n      if (codeSnippet.includes('position') || codeSnippet.includes('degree')) {\n        return 'number';\n      }\n    }\n\n    if (context.domainContext.domain === CodeDomain.RECIPE) {\n      if (codeSnippet.includes('ingredient') || codeSnippet.includes('recipe')) {\n        return 'string';\n      }\n    }\n\n    // Default to unknown for safety\n    return 'unknown';\n  }\n\n  /**\n   * Infer Record value type from context\n   */\n  private inferRecordValueType(context: ClassificationContext): string {\n    const { codeSnippet, surroundingLines } = context;\n\n    // Look for object literal assignments\n    if (codeSnippet.includes('= {')) {\n      // Check for string values\n      if (codeSnippet.includes(': \"') || codeSnippet.includes(\": '\")) {\n        return 'string';\n      }\n      // Check for number values\n      if (/:\\s*\\d/.test(codeSnippet)) {\n        return 'number';\n      }\n      // Check for boolean values\n      if (codeSnippet.includes(': true') || codeSnippet.includes(': false')) {\n        return 'boolean';\n      }\n    }\n\n    // Look for property access patterns in surrounding lines\n    const allContext = [codeSnippet, ...surroundingLines].join(' ');\n\n    // Check for string operations\n    if (allContext.includes('.toString()') || allContext.includes('.toLowerCase()') || allContext.includes('.toUpperCase()')) {\n      return 'string';\n    }\n\n    // Check for number operations\n    if (allContext.includes('parseInt(') || allContext.includes('parseFloat(') || allContext.includes('Number(')) {\n      return 'number';\n    }\n\n    // Domain-specific inference\n    if (context.domainContext.domain === CodeDomain.ASTROLOGICAL) {\n      if (codeSnippet.includes('element') || codeSnippet.includes('Element')) {\n        return 'number'; // Elemental properties are numeric\n      }\n      if (codeSnippet.includes('config') || codeSnippet.includes('Config')) {\n        return 'unknown'; // Config objects can be complex\n      }\n    }\n\n    return 'unknown';\n  }\n\n  /**\n   * Infer index signature value type from context\n   */\n  private inferIndexSignatureValueType(context: ClassificationContext): string {\n    // Similar logic to Record value type inference\n    return this.inferRecordValueType(context);\n  }\n\n  /**\n   * Infer function parameter type from context and parameter name\n   */\n  private inferFunctionParameterType(context: ClassificationContext, paramName: string): string {\n    const { codeSnippet, surroundingLines } = context;\n\n    // Common parameter name patterns\n    const paramLower = paramName.toLowerCase();\n\n    // Event handlers\n    if (paramLower.includes('event') || paramLower === 'e') {\n      if (context.codeSnippet.includes('onClick') || context.codeSnippet.includes('onSubmit')) {\n        return 'React.MouseEvent | React.FormEvent';\n      }\n      return 'Event';\n    }\n\n    // Error parameters\n    if (paramLower.includes('error') || paramLower === 'err') {\n      return 'Error';\n    }\n\n    // ID parameters\n    if (paramLower.includes('id') || paramLower === 'key') {\n      return 'string | number';\n    }\n\n    // Index parameters\n    if (paramLower.includes('index') || paramLower === 'i') {\n      return 'number';\n    }\n\n    // Data parameters\n    if (paramLower.includes('data') || paramLower.includes('item') || paramLower.includes('element')) {\n      // Try to infer from usage in function body\n      const allContext = [codeSnippet, ...surroundingLines].join(' ');\n      if (allContext.includes(`${paramName}.`)) {\n        return 'object'; // If accessing properties, likely an object\n      }\n      return 'unknown';\n    }\n\n    // Domain-specific inference\n    if (context.domainContext.domain === CodeDomain.ASTROLOGICAL) {\n      if (paramLower.includes('planet') || paramLower.includes('sign')) {\n        return 'string';\n      }\n      if (paramLower.includes('position') || paramLower.includes('degree')) {\n        return 'number';\n      }\n      if (paramLower.includes('properties') || paramLower.includes('element')) {\n        return 'ElementalProperties';\n      }\n    }\n\n    if (context.domainContext.domain === CodeDomain.RECIPE) {\n      if (paramLower.includes('ingredient')) {\n        return 'Ingredient';\n      }\n      if (paramLower.includes('recipe')) {\n        return 'Recipe';\n      }\n    }\n\n    return 'unknown';\n  }\n\n  /**\n   * Infer return type from function context\n   */\n  private inferReturnType(context: ClassificationContext): string {\n    const { codeSnippet, surroundingLines } = context;\n\n    // Look for return statements in surrounding lines\n    const allContext = [codeSnippet, ...surroundingLines].join(' ');\n\n    // Check for explicit return statements\n    if (allContext.includes('return ')) {\n      // String returns\n      if (allContext.includes('return \"') || allContext.includes(\"return '\")) {\n        return 'string';\n      }\n      // Number returns\n      if (/return\\s+\\d/.test(allContext)) {\n        return 'number';\n      }\n      // Boolean returns\n      if (allContext.includes('return true') || allContext.includes('return false')) {\n        return 'boolean';\n      }\n      // Array returns\n      if (allContext.includes('return [')) {\n        return 'unknown[]';\n      }\n      // Object returns\n      if (allContext.includes('return {')) {\n        return 'object';\n      }\n      // Promise returns\n      if (allContext.includes('return Promise') || allContext.includes('return new Promise')) {\n        return 'Promise<unknown>';\n      }\n    }\n\n    // Check for async functions\n    if (codeSnippet.includes('async ')) {\n      return 'Promise<unknown>';\n    }\n\n    // Function name inference\n    if (codeSnippet.includes('get') && codeSnippet.includes('(')) {\n      return 'unknown'; // Getter functions return something\n    }\n\n    if (codeSnippet.includes('is') || codeSnippet.includes('has') || codeSnippet.includes('can')) {\n      return 'boolean'; // Predicate functions\n    }\n\n    if (codeSnippet.includes('calculate') || codeSnippet.includes('count')) {\n      return 'number'; // Calculation functions\n    }\n\n    return 'unknown';\n  }\n\n  /**\n   * Infer generic type from context\n   */\n  private inferGenericType(context: ClassificationContext): string {\n    const { codeSnippet } = context;\n\n    // Check for common generic patterns\n    if (codeSnippet.includes('Array<unknown>')) {\n      return 'unknown';\n    }\n\n    if (codeSnippet.includes('Promise<any>')) {\n      return 'unknown';\n    }\n\n    if (codeSnippet.includes('Map<') || codeSnippet.includes('Set<')) {\n      return 'unknown';\n    }\n\n    // Domain-specific generics\n    if (context.domainContext.domain === CodeDomain.ASTROLOGICAL) {\n      if (codeSnippet.includes('PlanetaryPosition') || codeSnippet.includes('ElementalProperties')) {\n        return 'unknown'; // Keep generic for flexibility\n      }\n    }\n\n    return 'unknown';\n  }\n\n  /**\n   * Infer object property type from context and property name\n   */\n  private inferObjectPropertyType(context: ClassificationContext, propertyName: string): string {\n    const { codeSnippet, surroundingLines } = context;\n    const propLower = propertyName.toLowerCase();\n\n    // Common property patterns\n    if (propLower.includes('id') || propLower === 'key') {\n      return 'string | number';\n    }\n\n    if (propLower.includes('name') || propLower.includes('title') || propLower.includes('description')) {\n      return 'string';\n    }\n\n    if (propLower.includes('count') || propLower.includes('length') || propLower.includes('size')) {\n      return 'number';\n    }\n\n    if (propLower.includes('enabled') || propLower.includes('active') || propLower.includes('visible')) {\n      return 'boolean';\n    }\n\n    if (propLower.includes('date') || propLower.includes('time')) {\n      return 'Date | string';\n    }\n\n    // Look for assignment patterns\n    const allContext = [codeSnippet, ...surroundingLines].join(' ');\n    if (allContext.includes(`${propertyName}: \"`)) {\n      return 'string';\n    }\n    if (allContext.includes(`${propertyName}: \\d`)) {\n      return 'number';\n    }\n\n    // Domain-specific inference\n    if (context.domainContext.domain === CodeDomain.ASTROLOGICAL) {\n      if (propLower.includes('element') || propLower.includes('fire') || propLower.includes('water') ||\n          propLower.includes('earth') || propLower.includes('air')) {\n        return 'number';\n      }\n      if (propLower.includes('sign') || propLower.includes('planet')) {\n        return 'string';\n      }\n    }\n\n    return 'unknown';\n  }\n\n  /**\n   * Infer variable type from context\n   */\n  private inferVariableType(context: ClassificationContext): string {\n    const { codeSnippet } = context;\n\n    // Look for assignment patterns\n    if (codeSnippet.includes('= \"') || codeSnippet.includes(\"= '\")) {\n      return 'string';\n    }\n\n    if (/=\\s*\\d/.test(codeSnippet)) {\n      return 'number';\n    }\n\n    if (codeSnippet.includes('= true') || codeSnippet.includes('= false')) {\n      return 'boolean';\n    }\n\n    if (codeSnippet.includes('= [')) {\n      return 'unknown[]';\n    }\n\n    if (codeSnippet.includes('= {')) {\n      return 'object';\n    }\n\n    if (codeSnippet.includes('= new ')) {\n      // Try to extract constructor name\n      const constructorMatch = codeSnippet.match(/= new (\\w+)/);\n      if (constructorMatch) {\n        return constructorMatch[1];\n      }\n      return 'object';\n    }\n\n    return 'unknown';\n  }\n\n  // Context Validation Helper Methods\n\n  /**\n   * Check if context is in error handling (catch blocks, error parameters)\n   */\n  private isInErrorHandlingContext(context: ClassificationContext): boolean {\n    const { codeSnippet, surroundingLines } = context;\n    const allContext = [codeSnippet, ...surroundingLines].join(' ').toLowerCase();\n\n    return allContext.includes('catch') ||\n           allContext.includes('error') ||\n           allContext.includes('exception') ||\n           codeSnippet.toLowerCase().includes('err');\n  }\n\n  /**\n   * Check if context is for external API responses\n   */\n  private isExternalApiContext(context: ClassificationContext): boolean {\n    const { codeSnippet, surroundingLines } = context;\n    const allContext = [codeSnippet, ...surroundingLines].join(' ').toLowerCase();\n\n    return allContext.includes('api') ||\n           allContext.includes('response') ||\n           allContext.includes('fetch') ||\n           allContext.includes('axios') ||\n           allContext.includes('request');\n  }\n\n  /**\n   * Check if context is for dynamic configuration\n   */\n  private isDynamicConfigContext(context: ClassificationContext): boolean {\n    const { codeSnippet, surroundingLines } = context;\n    const allContext = [codeSnippet, ...surroundingLines].join(' ').toLowerCase();\n\n    return allContext.includes('config') ||\n           allContext.includes('settings') ||\n           allContext.includes('options') ||\n           context.domainContext.domain === CodeDomain.CAMPAIGN ||\n           context.domainContext.domain === CodeDomain.INTELLIGENCE;\n  }\n\n  /**\n   * Check if context is for event handlers\n   */\n  private isEventHandlerContext(context: ClassificationContext): boolean {\n    const { codeSnippet } = context;\n\n    return codeSnippet.includes('onClick') ||\n           codeSnippet.includes('onChange') ||\n           codeSnippet.includes('onSubmit') ||\n           codeSnippet.includes('addEventListener') ||\n           codeSnippet.includes('handler');\n  }\n\n  /**\n   * Check if context is a function parameter\n   */\n  private isFunctionParameterContext(context: ClassificationContext): boolean {\n    const { codeSnippet } = context;\n\n    return codeSnippet.includes('(') &&\n           codeSnippet.includes(':') &&\n           (codeSnippet.includes(')') || codeSnippet.includes(','));\n  }\n\n  /**\n   * Check if context is a function return type\n   */\n  private isFunctionReturnTypeContext(context: ClassificationContext): boolean {\n    const { codeSnippet } = context;\n\n    return codeSnippet.includes('):') &&\n           (codeSnippet.includes('{') || codeSnippet.includes(';'));\n  }\n\n  /**\n   * Check if context is an object property\n   */\n  private isObjectPropertyContext(context: ClassificationContext): boolean {\n    const { codeSnippet } = context;\n\n    return codeSnippet.includes(':') &&\n           (codeSnippet.includes(',') || codeSnippet.includes('}') || codeSnippet.includes(';'));\n  }\n\n  // Enhanced Safety Validation Methods\n\n  /**\n   * Perform comprehensive safety validation for a replacement\n   */\n  async validateReplacementSafety(\n    replacement: TypeReplacement,\n    context: ClassificationContext\n  ): Promise<SafetyValidationResult> {\n    return this.safetyValidator.calculateSafetyScore(replacement, context);\n  }\n\n  /**\n   * Validate build after applying replacements\n   */\n  async validateBuildSafety(\n    modifiedFiles: string[],\n    includeTests = false\n  ): Promise<BuildValidationResult> {\n    return this.safetyValidator.validateBuildAfterBatch(modifiedFiles, includeTests);\n  }\n\n  /**\n   * Validate rollback capability for given files\n   */\n  async validateRollbackSafety(\n    originalFiles: Map<string, string>,\n    backupFiles: Map<string, string>\n  ) {\n    return this.safetyValidator.validateRollbackCapability(originalFiles, backupFiles);\n  }\n\n  /**\n   * Get current safety validator instance\n   */\n  getSafetyValidator(): SafetyValidator {\n    return this.safetyValidator;\n  }\n\n  /**\n   * Update safety thresholds\n   */\n  updateSafetyThresholds(thresholds: { minimumSafetyScore?: number }) {\n    if (thresholds.minimumSafetyScore !== undefined) {\n      this.safetyThreshold = thresholds.minimumSafetyScore;\n      this.safetyValidator.updateSafetyThresholds({\n        minimumSafetyScore: thresholds.minimumSafetyScore\n      });\n    }\n  }\n}\n"],"version":3}