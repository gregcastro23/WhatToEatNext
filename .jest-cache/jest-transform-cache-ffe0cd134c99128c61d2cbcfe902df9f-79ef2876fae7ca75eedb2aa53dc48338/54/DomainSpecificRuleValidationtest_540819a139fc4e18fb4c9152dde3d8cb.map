{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/linting/DomainSpecificRuleValidation.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/linting/DomainSpecificRuleValidation.test.ts"],"sourcesContent":["/**\n * Domain-Specific Rule Validation Test Suite\n *\n * Tests the validation and optimization of domain-specific ESLint rules for:\n * - Astrological calculation files\n * - Campaign system files\n * - Test files\n * - Configuration files\n *\n * Requirements: 4.1, 4.2, 4.3, 4.4\n */\n\nimport { execSync } from 'child_process';\nimport { existsSync, readFileSync, writeFileSync } from 'fs';\nimport { join } from 'path';\n\nconst { DomainSpecificRuleValidator } = require('../../scripts/validateDomainSpecificRules.cjs');\n\ndescribe('Domain-Specific Rule Validation', () => {\n  let validator: typeof DomainSpecificRuleValidator;\n  const projectRoot = process.cwd();\n\n  beforeEach(() => {\n    validator = new DomainSpecificRuleValidator();\n  });\n\n  afterEach(() => {\n    // Clean up any temporary test files\n    const tempFiles = [\n      'temp-planetary-test.ts',\n      'temp-elemental-test.ts',\n      'temp-fallback-test.ts',\n      'src/services/campaign/temp-logging-test.ts',\n      'src/services/campaign/temp-variable-test.ts',\n      'temp-mock-test.test.ts',\n      'temp-relaxation-test.test.ts',\n      'temp-globals-test.test.ts',\n      'temp-require-test.config.js',\n      'temp-config-relaxation.config.ts',\n    ];\n\n    tempFiles.forEach(file => {\n      try {\n        execSync(`rm -f \"${join(projectRoot, file)}\"`);\n      } catch {}\n    });\n  });\n\n  describe('Overall Validation', () => {\n    test('should validate all domain-specific rules', async () => {\n      const results = validator.validateDomainSpecificRules();\n\n      expect(results).toBeDefined();\n      expect(results.overall).toBeDefined();\n      expect(results.overall.score).toBeGreaterThanOrEqual(0);\n      expect(results.overall.score).toBeLessThanOrEqual(100);\n\n      // Check that all categories are present\n      expect(results.astrologicalFiles).toBeDefined();\n      expect(results.campaignSystemFiles).toBeDefined();\n      expect(results.testFiles).toBeDefined();\n      expect(results.configurationFiles).toBeDefined();\n    });\n\n    test('should generate validation report', async () => {\n      const _results = validator.validateDomainSpecificRules();\n\n      // Check that report file is created\n      const reportPath = join(projectRoot, 'domain-specific-rule-validation-report.json');\n      expect(existsSync(reportPath)).toBe(true);\n\n      // Verify report content\n      const reportContent = JSON.parse(readFileSync(reportPath, 'utf8'));\n      expect(reportContent.overall).toBeDefined();\n      expect(reportContent.astrologicalFiles).toBeDefined();\n      expect(reportContent.campaignSystemFiles).toBeDefined();\n      expect(reportContent.testFiles).toBeDefined();\n      expect(reportContent.configurationFiles).toBeDefined();\n    });\n  });\n\n  describe('Astrological File Rules', () => {\n    test('should preserve mathematical constants', async () => {\n      // Create test file with protected constants\n      const testContent = `\n        const UNUSED_DEGREES_PER_SIGN = 30;\n        const RELIABLE_POSITIONS = { sun: { sign: 'aries', degree: 8.5 } };\n\n        // This should be flagged\n        // UNUSED_DEGREES_PER_SIGN = 25;\n      `;\n\n      const testFile = join(projectRoot, 'src/calculations/temp-constants-test.ts');\n      writeFileSync(testFile, testContent);\n\n      try {\n        // Run ESLint to check for violations\n        execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs`, {\n          stdio: 'pipe',\n          cwd: projectRoot,\n        });\n\n        // If no error, constants are properly preserved\n        expect(true).toBe(true);\n      } catch (error) {\n        // Check if it's a legitimate constant preservation error\n        const output = (error as any).stderr?.toString() || '';\n        if (output.includes('preserve-planetary-constants')) {\n          fail('Mathematical constants should be preserved');\n        }\n      } finally {\n        // Clean up\n        try {\n          execSync(`rm -f \"${testFile}\"`);\n        } catch {}\n      }\n    });\n\n    test('should recognize planetary variable patterns', async () => {\n      const testContent = `\n        const planet = 'mars';\n        const position = { sign: 'cancer', degree: 22.63 };\n        const longitude = 112.63;\n        const UNUSED_retrograde = false;\n        const UNUSED_planet = 'unused';\n      `;\n\n      const testFile = join(projectRoot, 'src/calculations/temp-planetary-vars.ts');\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n\n          cwd: projectRoot,\n        });\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const unusedVarErrors = result[0].messages.filter(\n            (msg: unknown) =>\n              msg.ruleId === '@typescript-eslint/no-unused-vars' &&\n              (msg.message.includes('planet') || msg.message.includes('position') || msg.message.includes('longitude')),\n          );\n\n          expect(unusedVarErrors.length).toBe(0);\n        }\n      } catch (error) {\n        // ESLint errors are expected, check if they're the right kind\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const unusedVarErrors = result[0].messages.filter(\n              (msg: unknown) =>\n                msg.ruleId === '@typescript-eslint/no-unused-vars' &&\n                (msg.message.includes('planet') ||\n                  msg.message.includes('position') ||\n                  msg.message.includes('longitude')),\n            );\n\n            expect(unusedVarErrors.length).toBe(0);\n          }\n        }\n      } finally {\n        try {\n          execSync(`rm -f \"${testFile}\"`);\n        } catch {}\n      }\n    });\n\n    test('should validate elemental properties structure', async () => {\n      const validElementalContent = `\n        const UNUSED_elementalProps = {\n          Fire: 0.8,\n          Water: 0.2,\n          Earth: 0.1,\n          Air: 0.3\n        };\n      `;\n\n      const testFile = join(projectRoot, 'src/calculations/temp-elemental-valid.ts');\n      writeFileSync(testFile, validElementalContent);\n\n      try {\n        execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs`, {\n          stdio: 'pipe',\n          cwd: projectRoot,\n        });\n\n        // Valid elemental properties should not cause errors\n        expect(true).toBe(true);\n      } catch (error) {\n        const output = (error as any).stderr?.toString() || '';\n        if (output.includes('validate-elemental-properties')) {\n          fail('Valid elemental properties should not be flagged');\n        }\n      } finally {\n        try {\n          execSync(`rm -f \"${testFile}\"`);\n        } catch {}\n      }\n    });\n\n    test('should detect invalid elemental properties', async () => {\n      const invalidElementalContent = `\n        const badElementalProps = {\n          Fire: 0.8,\n          Water: 0.2,\n          // Missing Earth and Air - should be flagged\n        };\n      `;\n\n      const testFile = join(projectRoot, 'src/calculations/temp-elemental-invalid.ts');\n      writeFileSync(testFile, invalidElementalContent);\n\n      try {\n        execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs`, {\n          stdio: 'pipe',\n          cwd: projectRoot,\n        });\n\n        // Should have caught the invalid properties\n        // If we reach here without error, the rule didn't work\n        console.warn('Invalid elemental properties not caught by validation rule');\n      } catch (error) {\n        const output = (error as any).stderr?.toString() || '';\n        // We expect this to fail with our custom rule\n        expect(output.includes('validate-elemental-properties') || output.length > 0).toBe(true);\n      } finally {\n        try {\n          execSync(`rm -f \"${testFile}\"`);\n        } catch {}\n      }\n    });\n\n    test('should preserve fallback values', async () => {\n      const testContent = `\n        const FALLBACK_POSITIONS = { sun: { sign: 'aries', degree: 8.5 } };\n        const RELIABLE_DATA = { mars: { sign: 'cancer', degree: 22.63 } };\n        const MARCH2025_BACKUP = { moon: { sign: 'aries', degree: 1.57 } };\n      `;\n\n      const testFile = join(projectRoot, 'src/calculations/temp-fallback-valid.ts');\n      writeFileSync(testFile, testContent);\n\n      try {\n        execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs`, {\n          stdio: 'pipe',\n          cwd: projectRoot,\n        });\n\n        // Valid fallback values should not cause errors\n        expect(true).toBe(true);\n      } catch (error) {\n        const output = (error as any).stderr?.toString() || '';\n        if (output.includes('preserve-fallback-values')) {\n          fail('Valid fallback values should not be flagged');\n        }\n      } finally {\n        try {\n          execSync(`rm -f \"${testFile}\"`);\n        } catch {}\n      }\n    });\n  });\n\n  describe('Campaign System File Rules', () => {\n    test('should allow enterprise patterns', async () => {\n      const testContent = `\n        class CampaignController {\n          private complexMethod() {\n            // Complex enterprise logic with high complexity\n            let result = 0;\n            for (let i = 0; i < 10; i++) {\n              for (let j = 0; j < 10; j++) {\n                if (i > 5) {\n                  if (j > 5) {\n                    result += i * j;\n                  } else {\n                    result += i + j;\n                  }\n                } else {\n                  result += i - j;\n                }\n              }\n            }\n            return result;\n          }\n        }\n      `;\n\n      const testFile = join(projectRoot, 'src/services/campaign/temp-enterprise-test.ts');\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n          cwd: projectRoot,\n        });\n\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const complexityErrors = result[0].messages.filter(\n            (msg: unknown) => (msg as any).ruleId === 'complexity' && msg.severity === 2, // error level\n          );\n\n          // Campaign files should allow higher complexity\n          expect(complexityErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const complexityErrors = result[0].messages.filter(\n              (msg: unknown) => (msg as any).ruleId === 'complexity' && msg.severity === 2,\n            );\n\n            expect(complexityErrors.length).toBe(0);\n          }\n        }\n      } finally {\n        try {\n          execSync(`rm -f \"${testFile}\"`);\n        } catch {}\n      }\n    });\n\n    test('should allow extensive logging', async () => {\n      const testContent = `\n        console.log('Campaign progress update');\n        console.warn('Safety protocol activated');\n        console.error('Campaign failure detected');\n        console.info('Metrics collected');\n        console.debug('Detailed debugging info');\n      `;\n\n      const testFile = join(projectRoot, 'src/services/campaign/temp-logging-test.ts');\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n\n          cwd: projectRoot,\n        });\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const consoleErrors = result[0].messages.filter(\n            (msg: unknown) => (msg as any).ruleId === 'no-console' && msg.severity === 2, // error level\n          );\n\n          // Campaign files should allow console logging\n          expect(consoleErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const consoleErrors = result[0].messages.filter(\n              (msg: unknown) => (msg as any).ruleId === 'no-console' && msg.severity === 2,\n            );\n\n            expect(consoleErrors.length).toBe(0);\n          }\n        }\n      } finally {\n        try {\n          execSync(`rm -f \"${testFile}\"`);\n        } catch {}\n      }\n    });\n\n    test('should recognize campaign variable patterns', async () => {\n      const testContent = `\n        const campaign = 'typescript-elimination';\n        const progress = 0.75;\n        const metrics = { errors: 100 };\n        const safety = true;\n        const UNUSED_campaign = 'unused';\n      `;\n\n      const testFile = join(projectRoot, 'src/services/campaign/temp-campaign-vars.ts');\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n\n          cwd: projectRoot,\n        });\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const unusedVarErrors = result[0].messages.filter(\n            (msg: unknown) =>\n              msg.ruleId === '@typescript-eslint/no-unused-vars' &&\n              (msg.message.includes('campaign') ||\n                msg.message.includes('progress') ||\n                msg.message.includes('metrics') ||\n                msg.message.includes('safety')),\n          );\n\n          expect(unusedVarErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const unusedVarErrors = result[0].messages.filter(\n              (msg: unknown) =>\n                msg.ruleId === '@typescript-eslint/no-unused-vars' &&\n                (msg.message.includes('campaign') ||\n                  msg.message.includes('progress') ||\n                  msg.message.includes('metrics') ||\n                  msg.message.includes('safety')),\n            );\n\n            expect(unusedVarErrors.length).toBe(0);\n          }\n        }\n      } finally {\n        try {\n          execSync(`rm -f \"${testFile}\"`);\n        } catch {}\n      }\n    });\n  });\n\n  describe('Test File Rules', () => {\n    test('should allow mock variable patterns', async () => {\n      const testContent = `\n        const mockFunction = jest.fn();\n        const stubValue = 'test-stub';\n        const testData = { id: 1 };\n        const UNUSED_mock = 'unused';\n      `;\n\n      const testFile = join(projectRoot, 'temp-mock-patterns.test.ts');\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n\n          cwd: projectRoot,\n        });\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const unusedVarErrors = result[0].messages.filter(\n            (msg: unknown) =>\n              msg.ruleId === '@typescript-eslint/no-unused-vars' &&\n              (msg.message.includes('mockFunction') ||\n                msg.message.includes('stubValue') ||\n                msg.message.includes('testData')),\n          );\n\n          expect(unusedVarErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const unusedVarErrors = result[0].messages.filter(\n              (msg: unknown) =>\n                msg.ruleId === '@typescript-eslint/no-unused-vars' &&\n                (msg.message.includes('mockFunction') ||\n                  msg.message.includes('stubValue') ||\n                  msg.message.includes('testData')),\n            );\n\n            expect(unusedVarErrors.length).toBe(0);\n          }\n        }\n      } finally {\n        try {\n          execSync(`rm -f \"${testFile}\"`);\n        } catch {}\n      }\n    });\n\n    test('should have relaxed rules for testing patterns', async () => {\n      const testContent = `\n        const anyValue: any = 'test-any';\n        console.log('Test output');\n        const value = someObject?.property ?? null; // Using safe optional chaining instead of non-null\n        const magicNumber = 42; // magic number\n      `;\n\n      const testFile = join(projectRoot, 'temp-test-relaxations.test.ts');\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n\n          cwd: projectRoot,\n        });\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const restrictiveErrors = result[0].messages.filter(\n            (msg: unknown) =>\n              (msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2) ||\n              (msg.ruleId === 'no-console' && msg.severity === 2) ||\n              (msg.ruleId === '@typescript-eslint/no-non-null-assertion' && msg.severity === 2) ||\n              (msg.ruleId === 'no-magic-numbers' && msg.severity === 2),\n          );\n\n          expect(restrictiveErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const restrictiveErrors = result[0].messages.filter(\n              (msg: unknown) =>\n                (msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2) ||\n                (msg.ruleId === 'no-console' && msg.severity === 2) ||\n                (msg.ruleId === '@typescript-eslint/no-non-null-assertion' && msg.severity === 2) ||\n                (msg.ruleId === 'no-magic-numbers' && msg.severity === 2),\n            );\n\n            expect(restrictiveErrors.length).toBe(0);\n          }\n        }\n      } finally {\n        try {\n          execSync(`rm -f \"${testFile}\"`);\n        } catch {}\n      }\n    });\n\n    test('should have Jest globals available', async () => {\n      const testContent = `\n        describe('Test suite', () => {\n          it('should work', () => {\n            expect(true).toBe(true);\n          });\n\n          beforeEach(() => {\n            jest.clearAllMocks();\n          });\n        });\n      `;\n\n      const testFile = join(projectRoot, 'temp-jest-globals.test.ts');\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n\n          cwd: projectRoot,\n        });\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const undefErrors = result[0].messages.filter(\n            (msg: unknown) =>\n              msg.ruleId === 'no-undef' &&\n              (msg.message.includes('describe') ||\n                msg.message.includes('it') ||\n                msg.message.includes('expect') ||\n                msg.message.includes('jest')),\n          );\n\n          expect(undefErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const undefErrors = result[0].messages.filter(\n              (msg: unknown) =>\n                msg.ruleId === 'no-undef' &&\n                (msg.message.includes('describe') ||\n                  msg.message.includes('it') ||\n                  msg.message.includes('expect') ||\n                  msg.message.includes('jest')),\n            );\n\n            expect(undefErrors.length).toBe(0);\n          }\n        }\n      } finally {\n        try {\n          execSync(`rm -f \"${testFile}\"`);\n        } catch {}\n      }\n    });\n  });\n\n  describe('Configuration File Rules', () => {\n    test('should allow dynamic requires', async () => {\n      const testContent = `\n        const config = require('./some-config');\n        const dynamicModule = require(process.env.MODULE_NAME);\n        module.exports = { ...config };\n      `;\n\n      const testFile = join(projectRoot, 'temp-dynamic-require.config.js');\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n\n          cwd: projectRoot,\n        });\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const requireErrors = result[0].messages.filter(\n            (msg: unknown) => (msg as any).ruleId === 'import/no-dynamic-require' && msg.severity === 2,\n          );\n\n          expect(requireErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const requireErrors = result[0].messages.filter(\n              (msg: unknown) => (msg as any).ruleId === 'import/no-dynamic-require' && msg.severity === 2,\n            );\n\n            expect(requireErrors.length).toBe(0);\n          }\n        }\n      } finally {\n        try {\n          execSync(`rm -f \"${testFile}\"`);\n        } catch {}\n      }\n    });\n\n    test('should have relaxed rules for build patterns', async () => {\n      const testContent = `\n        const anyConfig: any = process.env.CONFIG;\n        console.log('Configuration loaded');\n        const dynamicRequire = require(process.env.MODULE);\n      `;\n\n      const testFile = join(projectRoot, 'temp-build-patterns.config.ts');\n      writeFileSync(testFile, testContent);\n\n      try {\n        const output = execSync(`npx eslint \"${testFile}\" --config eslint.config.cjs --format json`, {\n          encoding: 'utf8',\n\n          cwd: projectRoot,\n        });\n        const result = JSON.parse(output);\n\n        if (result.length > 0 && result[0].messages) {\n          const restrictiveErrors = result[0].messages.filter(\n            (msg: unknown) =>\n              (msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2) ||\n              (msg.ruleId === 'no-console' && msg.severity === 2) ||\n              (msg.ruleId === 'import/no-dynamic-require' && msg.severity === 2),\n          );\n\n          expect(restrictiveErrors.length).toBe(0);\n        }\n      } catch (error) {\n        const output = (error as any).stdout?.toString() || '';\n        if (output) {\n          const result = JSON.parse(output);\n          if (result.length > 0 && result[0].messages) {\n            const restrictiveErrors = result[0].messages.filter(\n              (msg: unknown) =>\n                (msg.ruleId === '@typescript-eslint/no-explicit-any' && msg.severity === 2) ||\n                (msg.ruleId === 'no-console' && msg.severity === 2) ||\n                (msg.ruleId === 'import/no-dynamic-require' && msg.severity === 2),\n            );\n\n            expect(restrictiveErrors.length).toBe(0);\n          }\n        }\n      } finally {\n        try {\n          execSync(`rm -f \"${testFile}\"`);\n        } catch {}\n      }\n    });\n  });\n\n  describe('ESLint Configuration Integration', () => {\n    test('should have proper file pattern matching', () => {\n      // Test that ESLint config has the right file patterns\n      const eslintConfigPath = join(projectRoot, 'eslint.config.cjs');\n      expect(existsSync(eslintConfigPath)).toBe(true);\n\n      const configContent = readFileSync(eslintConfigPath, 'utf8');\n\n      // Check for astrological file patterns\n      expect(configContent).toContain('**/calculations/**/*.ts');\n      expect(configContent).toContain('**/data/planets/**/*.ts');\n      expect(configContent).toContain('**/utils/reliableAstronomy.ts');\n\n      // Check for campaign system patterns\n      expect(configContent).toContain('**/services/campaign/**/*.ts');\n\n      // Check for test file patterns\n      expect(configContent).toContain('**/*.test.ts');\n      expect(configContent).toContain('**/*.spec.ts');\n      expect(configContent).toContain('**/__tests__/**/*.ts');\n\n      // Check for config file patterns\n      expect(configContent).toContain('*.config.js');\n      expect(configContent).toContain('*.config.ts');\n    });\n\n    test('should have custom astrological rules plugin', () => {\n      const pluginPath = join(projectRoot, 'src/eslint-plugins/astrological-rules.cjs');\n      expect(existsSync(pluginPath)).toBe(true);\n\n      const pluginContent = readFileSync(pluginPath, 'utf8');\n\n      // Check for custom rules\n      expect(pluginContent).toContain('preserve-planetary-constants');\n      expect(pluginContent).toContain('validate-planetary-position-structure');\n      expect(pluginContent).toContain('validate-elemental-properties');\n      expect(pluginContent).toContain('require-transit-date-validation');\n      expect(pluginContent).toContain('preserve-fallback-values');\n    });\n  });\n});\n"],"version":3}