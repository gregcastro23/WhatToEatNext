{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/EnterpriseIntelligenceIntegration.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/EnterpriseIntelligenceIntegration.ts"],"sourcesContent":["/**\n * Enterprise Intelligence Integration Service\n * Main Page Restoration - Task 3.8 Implementation\n * \n * Integrates Recipe Intelligence Systems from Phase 28 and \n * Ingredient Intelligence Systems from Phase 27 with validation,\n * safety intelligence, and optimization recommendations.\n */\n\nimport { logger } from '@/utils/logger';\nimport { RECIPE_COMPATIBILITY_INTELLIGENCE } from '@/calculations/index';\n// Import fruit intelligence systems safely\n// Note: These represent the broader ingredient intelligence systems from Phase 27\n// Note: Alchemy Type Intelligence System integration simplified to avoid import issues\nimport type { ElementalProperties, ZodiacSign, LunarPhase } from '@/types/alchemy';\n\n// ========== INTERFACES ==========\n\nexport interface EnterpriseIntelligenceConfig {\n  enableRecipeIntelligence: boolean;\n  enableIngredientIntelligence: boolean;\n  enableValidationIntelligence: boolean;\n  enableSafetyIntelligence: boolean;\n  enableOptimizationRecommendations: boolean;\n  cacheResults: boolean;\n  logLevel: 'debug' | 'info' | 'warn' | 'error';\n}\n\nexport interface RecipeIntelligenceResult {\n  compatibilityAnalysis: any;\n  optimizationScore: number;\n  safetyScore: number;\n  recommendations: string[];\n  confidence: number;\n  timestamp: string;\n}\n\nexport interface IngredientIntelligenceResult {\n  categorizationAnalysis: any;\n  seasonalAnalysis: any;\n  compatibilityAnalysis: any;\n  astrologicalAnalysis: any;\n  validationResults: any;\n  optimizationScore: number;\n  safetyScore: number;\n  recommendations: string[];\n  confidence: number;\n  timestamp: string;\n}\n\nexport interface ValidationIntelligenceResult {\n  dataIntegrity: {\n    score: number;\n    issues: string[];\n    warnings: string[];\n  };\n  astrologicalConsistency: {\n    score: number;\n    issues: string[];\n    warnings: string[];\n  };\n  elementalHarmony: {\n    score: number;\n    issues: string[];\n    warnings: string[];\n  };\n  overallValidation: {\n    score: number;\n    status: 'excellent' | 'good' | 'fair' | 'poor';\n    criticalIssues: string[];\n  };\n}\n\nexport interface SafetyIntelligenceResult {\n  riskAssessment: {\n    level: 'low' | 'medium' | 'high' | 'critical';\n    score: number;\n    factors: string[];\n  };\n  fallbackStrategies: string[];\n  errorRecovery: {\n    enabled: boolean;\n    strategies: string[];\n  };\n  monitoringAlerts: string[];\n}\n\nexport interface OptimizationRecommendations {\n  performance: {\n    score: number;\n    recommendations: string[];\n    estimatedImpact: number;\n  };\n  accuracy: {\n    score: number;\n    recommendations: string[];\n    estimatedImpact: number;\n  };\n  userExperience: {\n    score: number;\n    recommendations: string[];\n    estimatedImpact: number;\n  };\n  systemIntegration: {\n    score: number;\n    recommendations: string[];\n    estimatedImpact: number;\n  };\n  overallOptimization: {\n    score: number;\n    priority: 'low' | 'medium' | 'high' | 'critical';\n    estimatedValue: number;\n  };\n}\n\nexport interface EnterpriseIntelligenceAnalysis {\n  recipeIntelligence: RecipeIntelligenceResult;\n  ingredientIntelligence: IngredientIntelligenceResult;\n  validationIntelligence: ValidationIntelligenceResult;\n  safetyIntelligence: SafetyIntelligenceResult;\n  optimizationRecommendations: OptimizationRecommendations;\n  overallScore: number;\n  systemHealth: 'excellent' | 'good' | 'fair' | 'poor';\n  timestamp: string;\n}\n\n// ========== ENTERPRISE INTELLIGENCE SERVICE ==========\n\nexport class EnterpriseIntelligenceIntegration {\n  private config: EnterpriseIntelligenceConfig;\n  private cache: Map<string, any>;\n  private performanceMetrics: {\n    analysisCount: number;\n    averageExecutionTime: number;\n    cacheHitRate: number;\n    errorRate: number;\n  };\n\n  constructor(config: Partial<EnterpriseIntelligenceConfig> = {}) {\n    this.config = {\n      enableRecipeIntelligence: true,\n      enableIngredientIntelligence: true,\n      enableValidationIntelligence: true,\n      enableSafetyIntelligence: true,\n      enableOptimizationRecommendations: true,\n      cacheResults: true,\n      logLevel: 'info',\n      ...config\n    };\n\n    this.cache = new Map();\n    this.performanceMetrics = {\n      analysisCount: 0,\n      averageExecutionTime: 0,\n      cacheHitRate: 0,\n      errorRate: 0\n    };\n\n    this.log('info', 'Enterprise Intelligence Integration initialized');\n  }\n\n  /**\n   * Perform comprehensive enterprise intelligence analysis\n   */\n  async performEnterpriseAnalysis(\n    recipeData: any,\n    ingredientData: any,\n    astrologicalContext: {\n      zodiacSign: ZodiacSign;\n      lunarPhase: LunarPhase;\n      elementalProperties: ElementalProperties;\n      planetaryPositions?: any;\n    }\n  ): Promise<EnterpriseIntelligenceAnalysis> {\n    const startTime = performance.now();\n    \n    try {\n      this.performanceMetrics.analysisCount++;\n      \n      // Check cache first\n      const cacheKey = this.generateCacheKey(recipeData, ingredientData, astrologicalContext);\n      if (this.config.cacheResults && this.cache.has(cacheKey)) {\n        this.performanceMetrics.cacheHitRate = \n          (this.performanceMetrics.cacheHitRate * (this.performanceMetrics.analysisCount - 1) + 1) / \n          this.performanceMetrics.analysisCount;\n        \n        this.log('debug', 'Using cached enterprise intelligence analysis');\n        return this.cache.get(cacheKey);\n      }\n\n      // Perform comprehensive analysis\n      const analysis: EnterpriseIntelligenceAnalysis = {\n        recipeIntelligence: await this.analyzeRecipeIntelligence(recipeData, astrologicalContext),\n        ingredientIntelligence: await this.analyzeIngredientIntelligence(ingredientData, astrologicalContext),\n        validationIntelligence: await this.performValidationIntelligence(recipeData, ingredientData, astrologicalContext),\n        safetyIntelligence: await this.performSafetyIntelligence(recipeData, ingredientData, astrologicalContext),\n        optimizationRecommendations: await this.generateOptimizationRecommendations(recipeData, ingredientData, astrologicalContext),\n        overallScore: 0, // Will be calculated\n        systemHealth: 'good', // Will be determined\n        timestamp: new Date().toISOString()\n      };\n\n      // Calculate overall score and system health\n      analysis.overallScore = this.calculateOverallScore(analysis);\n      analysis.systemHealth = this.determineSystemHealth(analysis);\n\n      // Cache the results\n      if (this.config.cacheResults) {\n        this.cache.set(cacheKey, analysis);\n      }\n\n      // Update performance metrics\n      this.updatePerformanceMetrics(startTime);\n\n      this.log('info', `Enterprise intelligence analysis completed with score: ${analysis.overallScore.toFixed(2)}`);\n      \n      return analysis;\n    } catch (error) {\n      this.handleError('performEnterpriseAnalysis', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Analyze Recipe Intelligence Systems (Phase 28)\n   */\n  private async analyzeRecipeIntelligence(\n    recipeData: any,\n    astrologicalContext: any\n  ): Promise<RecipeIntelligenceResult> {\n    if (!this.config.enableRecipeIntelligence) {\n      return this.getDefaultRecipeIntelligence();\n    }\n\n    try {\n      // Use the existing Recipe Compatibility Intelligence system\n      const compatibilityAnalysis = RECIPE_COMPATIBILITY_INTELLIGENCE.analyzeRecipeCompatibility(\n        recipeData.elementalProperties || astrologicalContext.elementalProperties,\n        astrologicalContext\n      );\n\n      // Calculate optimization score based on compatibility metrics\n      const optimizationScore = this.calculateRecipeOptimizationScore(compatibilityAnalysis);\n      \n      // Calculate safety score based on analysis reliability\n      const safetyScore = this.calculateRecipeSafetyScore(compatibilityAnalysis);\n      \n      // Generate intelligent recommendations\n      const recommendations = [\n        ...compatibilityAnalysis.recommendations || [],\n        ...this.generateRecipeIntelligenceRecommendations(compatibilityAnalysis)\n      ];\n\n      // Calculate confidence based on analysis quality\n      const confidence = this.calculateRecipeConfidence(compatibilityAnalysis);\n\n      return {\n        compatibilityAnalysis,\n        optimizationScore,\n        safetyScore,\n        recommendations,\n        confidence,\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      this.log('error', 'Recipe intelligence analysis failed', error);\n      return this.getDefaultRecipeIntelligence();\n    }\n  }\n\n  /**\n   * Analyze Ingredient Intelligence Systems (Phase 27)\n   */\n  private async analyzeIngredientIntelligence(\n    ingredientData: any,\n    astrologicalContext: any\n  ): Promise<IngredientIntelligenceResult> {\n    if (!this.config.enableIngredientIntelligence) {\n      return this.getDefaultIngredientIntelligence();\n    }\n\n    try {\n      // Implement ingredient intelligence analysis using simplified approach\n      // This represents the broader ingredient intelligence systems from Phase 27\n      \n      const categorizationAnalysis = this.analyzeIngredientCategorization(ingredientData);\n      const seasonalAnalysis = this.analyzeIngredientSeasonality(ingredientData, astrologicalContext);\n      const compatibilityAnalysis = this.analyzeIngredientCompatibility(ingredientData);\n      const astrologicalAnalysis = this.analyzeIngredientAstrology(ingredientData, astrologicalContext);\n      const validationResults = this.validateIngredientData(ingredientData);\n\n      // Calculate optimization and safety scores\n      const optimizationScore = this.calculateIngredientOptimizationScore({\n        categorizationAnalysis,\n        seasonalAnalysis,\n        compatibilityAnalysis,\n        astrologicalAnalysis,\n        validationResults\n      });\n\n      const safetyScore = this.calculateIngredientSafetyScore({\n        categorizationAnalysis,\n        seasonalAnalysis,\n        compatibilityAnalysis,\n        astrologicalAnalysis,\n        validationResults\n      });\n\n      // Generate intelligent recommendations\n      const recommendations = this.generateIngredientIntelligenceRecommendations({\n        categorizationAnalysis,\n        seasonalAnalysis,\n        compatibilityAnalysis,\n        astrologicalAnalysis,\n        validationResults\n      });\n\n      // Calculate confidence\n      const confidence = this.calculateIngredientConfidence({\n        categorizationAnalysis,\n        seasonalAnalysis,\n        compatibilityAnalysis,\n        astrologicalAnalysis,\n        validationResults\n      });\n\n      return {\n        categorizationAnalysis,\n        seasonalAnalysis,\n        compatibilityAnalysis,\n        astrologicalAnalysis,\n        validationResults,\n        optimizationScore,\n        safetyScore,\n        recommendations,\n        confidence,\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      this.log('error', 'Ingredient intelligence analysis failed', error);\n      return this.getDefaultIngredientIntelligence();\n    }\n  }\n\n  /**\n   * Perform Validation Intelligence\n   */\n  private async performValidationIntelligence(\n    recipeData: any,\n    ingredientData: any,\n    astrologicalContext: any\n  ): Promise<ValidationIntelligenceResult> {\n    if (!this.config.enableValidationIntelligence) {\n      return this.getDefaultValidationIntelligence();\n    }\n\n    try {\n      // Perform validation intelligence using simplified approach\n      // (Avoiding direct import of problematic alchemy type intelligence system)\n\n      // Data integrity validation\n      const dataIntegrity = this.validateDataIntegrity(recipeData, ingredientData);\n      \n      // Astrological consistency validation\n      const astrologicalConsistency = this.validateAstrologicalConsistency(astrologicalContext);\n      \n      // Elemental harmony validation\n      const elementalHarmony = this.validateElementalHarmony(\n        recipeData.elementalProperties || astrologicalContext.elementalProperties\n      );\n\n      // Overall validation assessment\n      const overallScore = (dataIntegrity.score + astrologicalConsistency.score + elementalHarmony.score) / 3;\n      const criticalIssues = [\n        ...dataIntegrity.issues.filter(issue => issue.includes('critical')),\n        ...astrologicalConsistency.issues.filter(issue => issue.includes('critical')),\n        ...elementalHarmony.issues.filter(issue => issue.includes('critical'))\n      ];\n\n      const status = overallScore >= 0.9 ? 'excellent' : \n                    overallScore >= 0.75 ? 'good' : \n                    overallScore >= 0.6 ? 'fair' : 'poor';\n\n      return {\n        dataIntegrity,\n        astrologicalConsistency,\n        elementalHarmony,\n        overallValidation: {\n          score: overallScore,\n          status,\n          criticalIssues\n        }\n      };\n    } catch (error) {\n      this.log('error', 'Validation intelligence failed', error);\n      return this.getDefaultValidationIntelligence();\n    }\n  }\n\n  /**\n   * Perform Safety Intelligence\n   */\n  private async performSafetyIntelligence(\n    recipeData: any,\n    ingredientData: any,\n    astrologicalContext: any\n  ): Promise<SafetyIntelligenceResult> {\n    if (!this.config.enableSafetyIntelligence) {\n      return this.getDefaultSafetyIntelligence();\n    }\n\n    try {\n      // Risk assessment based on data quality and system reliability\n      const riskFactors = this.assessRiskFactors(recipeData, ingredientData, astrologicalContext);\n      const riskLevel = this.determineRiskLevel(riskFactors);\n      const riskScore = this.calculateRiskScore(riskFactors);\n\n      // Fallback strategies for different failure scenarios\n      const fallbackStrategies = this.generateFallbackStrategies(riskFactors);\n\n      // Error recovery mechanisms\n      const errorRecovery = {\n        enabled: true,\n        strategies: [\n          'Graceful degradation to cached data',\n          'Fallback to default recommendations',\n          'User notification with alternative options',\n          'Automatic retry with exponential backoff',\n          'Emergency safe mode activation'\n        ]\n      };\n\n      // Monitoring alerts for proactive issue detection\n      const monitoringAlerts = this.generateMonitoringAlerts(riskFactors);\n\n      return {\n        riskAssessment: {\n          level: riskLevel,\n          score: riskScore,\n          factors: riskFactors\n        },\n        fallbackStrategies,\n        errorRecovery,\n        monitoringAlerts\n      };\n    } catch (error) {\n      this.log('error', 'Safety intelligence failed', error);\n      return this.getDefaultSafetyIntelligence();\n    }\n  }\n\n  /**\n   * Generate Optimization Recommendations\n   */\n  private async generateOptimizationRecommendations(\n    recipeData: any,\n    ingredientData: any,\n    astrologicalContext: any\n  ): Promise<OptimizationRecommendations> {\n    if (!this.config.enableOptimizationRecommendations) {\n      return this.getDefaultOptimizationRecommendations();\n    }\n\n    try {\n      // Performance optimization analysis\n      const performance = this.analyzePerformanceOptimization();\n      \n      // Accuracy optimization analysis\n      const accuracy = this.analyzeAccuracyOptimization(recipeData, ingredientData, astrologicalContext);\n      \n      // User experience optimization analysis\n      const userExperience = this.analyzeUserExperienceOptimization();\n      \n      // System integration optimization analysis\n      const systemIntegration = this.analyzeSystemIntegrationOptimization();\n\n      // Overall optimization assessment\n      const overallScore = (performance.score + accuracy.score + userExperience.score + systemIntegration.score) / 4;\n      const priority = overallScore < 0.6 ? 'critical' : \n                      overallScore < 0.75 ? 'high' : \n                      overallScore < 0.9 ? 'medium' : 'low';\n      const estimatedValue = overallScore * 100;\n\n      return {\n        performance,\n        accuracy,\n        userExperience,\n        systemIntegration,\n        overallOptimization: {\n          score: overallScore,\n          priority,\n          estimatedValue\n        }\n      };\n    } catch (error) {\n      this.log('error', 'Optimization recommendations failed', error);\n      return this.getDefaultOptimizationRecommendations();\n    }\n  }\n\n  // ========== HELPER METHODS ==========\n\n  private generateCacheKey(recipeData: any, ingredientData: any, astrologicalContext: any): string {\n    const keyData = {\n      recipe: recipeData?.id || 'unknown',\n      ingredient: ingredientData?.id || 'unknown',\n      zodiac: astrologicalContext.zodiacSign,\n      lunar: astrologicalContext.lunarPhase,\n      timestamp: Math.floor(Date.now() / (1000 * 60 * 30)) // 30-minute cache buckets\n    };\n    return `enterprise_intelligence_${JSON.stringify(keyData)}`;\n  }\n\n  private calculateOverallScore(analysis: EnterpriseIntelligenceAnalysis): number {\n    const weights = {\n      recipe: 0.25,\n      ingredient: 0.25,\n      validation: 0.2,\n      safety: 0.15,\n      optimization: 0.15\n    };\n\n    return (\n      analysis.recipeIntelligence.optimizationScore * weights.recipe +\n      analysis.ingredientIntelligence.optimizationScore * weights.ingredient +\n      analysis.validationIntelligence.overallValidation.score * weights.validation +\n      (1 - this.riskLevelToScore(analysis.safetyIntelligence.riskAssessment.level)) * weights.safety +\n      analysis.optimizationRecommendations.overallOptimization.score * weights.optimization\n    );\n  }\n\n  private determineSystemHealth(analysis: EnterpriseIntelligenceAnalysis): 'excellent' | 'good' | 'fair' | 'poor' {\n    const score = analysis.overallScore;\n    if (score >= 0.9) return 'excellent';\n    if (score >= 0.75) return 'good';\n    if (score >= 0.6) return 'fair';\n    return 'poor';\n  }\n\n  private riskLevelToScore(level: string): number {\n    switch (level) {\n      case 'low': return 0.1;\n      case 'medium': return 0.3;\n      case 'high': return 0.6;\n      case 'critical': return 0.9;\n      default: return 0.5;\n    }\n  }\n\n  private updatePerformanceMetrics(startTime: number): void {\n    const executionTime = performance.now() - startTime;\n    const currentAvg = this.performanceMetrics.averageExecutionTime;\n    const count = this.performanceMetrics.analysisCount;\n    \n    this.performanceMetrics.averageExecutionTime = \n      (currentAvg * (count - 1) + executionTime) / count;\n  }\n\n  private handleError(method: string, error: any): void {\n    this.log('error', `${method} failed`, error);\n    \n    this.performanceMetrics.errorRate = \n      (this.performanceMetrics.errorRate * (this.performanceMetrics.analysisCount - 1) + 1) / \n      this.performanceMetrics.analysisCount;\n  }\n\n  private log(level: string, message: string, data?: any): void {\n    if (this.shouldLog(level)) {\n      const logMethod = level === 'error' ? logger.error : \n                       level === 'warn' ? logger.warn : \n                       level === 'debug' ? logger.debug : logger.info;\n      \n      if (data) {\n        logMethod(`[EnterpriseIntelligence] ${message}`, data);\n      } else {\n        logMethod(`[EnterpriseIntelligence] ${message}`);\n      }\n    }\n  }\n\n  private shouldLog(level: string): boolean {\n    const levels = ['debug', 'info', 'warn', 'error'];\n    const configLevel = levels.indexOf(this.config.logLevel);\n    const messageLevel = levels.indexOf(level);\n    return messageLevel >= configLevel;\n  }\n\n  // ========== DEFAULT IMPLEMENTATIONS ==========\n\n  private getDefaultRecipeIntelligence(): RecipeIntelligenceResult {\n    return {\n      compatibilityAnalysis: { coreMetrics: { overallCompatibility: 0.8 } },\n      optimizationScore: 0.8,\n      safetyScore: 0.9,\n      recommendations: ['Recipe intelligence disabled'],\n      confidence: 0.7,\n      timestamp: new Date().toISOString()\n    };\n  }\n\n  private getDefaultIngredientIntelligence(): IngredientIntelligenceResult {\n    return {\n      categorizationAnalysis: {},\n      seasonalAnalysis: {},\n      compatibilityAnalysis: {},\n      astrologicalAnalysis: {},\n      validationResults: {},\n      optimizationScore: 0.8,\n      safetyScore: 0.9,\n      recommendations: ['Ingredient intelligence disabled'],\n      confidence: 0.7,\n      timestamp: new Date().toISOString()\n    };\n  }\n\n  private getDefaultValidationIntelligence(): ValidationIntelligenceResult {\n    return {\n      dataIntegrity: { score: 0.8, issues: [], warnings: [] },\n      astrologicalConsistency: { score: 0.8, issues: [], warnings: [] },\n      elementalHarmony: { score: 0.8, issues: [], warnings: [] },\n      overallValidation: { score: 0.8, status: 'good', criticalIssues: [] }\n    };\n  }\n\n  private getDefaultSafetyIntelligence(): SafetyIntelligenceResult {\n    return {\n      riskAssessment: { level: 'low', score: 0.9, factors: [] },\n      fallbackStrategies: ['Default fallback strategies available'],\n      errorRecovery: { enabled: true, strategies: ['Basic error recovery'] },\n      monitoringAlerts: []\n    };\n  }\n\n  private getDefaultOptimizationRecommendations(): OptimizationRecommendations {\n    return {\n      performance: { score: 0.8, recommendations: [], estimatedImpact: 0.1 },\n      accuracy: { score: 0.8, recommendations: [], estimatedImpact: 0.1 },\n      userExperience: { score: 0.8, recommendations: [], estimatedImpact: 0.1 },\n      systemIntegration: { score: 0.8, recommendations: [], estimatedImpact: 0.1 },\n      overallOptimization: { score: 0.8, priority: 'low', estimatedValue: 80 }\n    };\n  }\n\n  // ========== CALCULATION METHODS ==========\n  // (Simplified implementations for the scope of this task)\n\n  private calculateRecipeOptimizationScore(analysis: any): number {\n    return analysis.coreMetrics?.overallCompatibility || 0.8;\n  }\n\n  private calculateRecipeSafetyScore(analysis: any): number {\n    return analysis.predictiveInsights?.shortTerm?.reliability || 0.9;\n  }\n\n  private calculateRecipeConfidence(analysis: any): number {\n    return analysis.predictiveInsights?.shortTerm?.confidence || 0.8;\n  }\n\n  private generateRecipeIntelligenceRecommendations(analysis: any): string[] {\n    const recommendations = [];\n    if (analysis.coreMetrics?.overallCompatibility < 0.9) {\n      recommendations.push('Consider ingredient substitutions for better compatibility');\n    }\n    if (analysis.advancedAnalysis?.temporalFactors?.seasonalRelevance < 0.8) {\n      recommendations.push('Adjust timing for better seasonal alignment');\n    }\n    return recommendations;\n  }\n\n  private calculateIngredientCompatibility(ing1: any, ing2: any): number {\n    // Simplified compatibility calculation\n    return Math.random() * 0.3 + 0.7; // 70-100% compatibility\n  }\n\n  private validateAstrologicalProfile(profile: any): boolean {\n    return profile && typeof profile === 'object';\n  }\n\n  private validateIngredient(ingredient: any): boolean {\n    return ingredient && ingredient.name && ingredient.elementalProperties;\n  }\n\n  private calculateIngredientOptimizationScore(analyses: any): number {\n    // Average of all analysis harmony scores\n    const scores = Object.values(analyses).map((analysis: any) => \n      analysis.categoryHarmony?.overallHarmony || \n      analysis.seasonalHarmony?.overallHarmony || \n      analysis.compatibilityHarmony?.overallHarmony || \n      analysis.astrologicalHarmony?.overallHarmony || \n      analysis.validationHarmony?.overallHarmony || 0.8\n    );\n    return scores.reduce((sum, score) => sum + score, 0) / scores.length;\n  }\n\n  private calculateIngredientSafetyScore(analyses: any): number {\n    // Safety based on validation results\n    return analyses.validationResults?.validationHarmony?.overallHarmony || 0.9;\n  }\n\n  private calculateIngredientConfidence(analyses: any): number {\n    // Confidence based on consistency across analyses\n    const scores = Object.values(analyses).map((analysis: any) => \n      analysis.categoryHarmony?.overallHarmony || \n      analysis.seasonalHarmony?.overallHarmony || 0.8\n    );\n    const variance = scores.reduce((sum, score) => sum + Math.pow(score - 0.8, 2), 0) / scores.length;\n    return Math.max(0.5, 1 - variance); // Lower variance = higher confidence\n  }\n\n  private generateIngredientIntelligenceRecommendations(analyses: any): string[] {\n    const recommendations = [];\n    \n    if (analyses.categorizationAnalysis?.categoryOptimization?.length > 0) {\n      recommendations.push('Optimize ingredient categorization for better organization');\n    }\n    \n    if (analyses.seasonalAnalysis?.seasonalOptimization?.length > 0) {\n      recommendations.push('Enhance seasonal ingredient selection for better timing');\n    }\n    \n    if (analyses.compatibilityAnalysis?.compatibilityOptimization?.length > 0) {\n      recommendations.push('Improve ingredient compatibility matching');\n    }\n    \n    return recommendations;\n  }\n\n  private validateDataIntegrity(recipeData: any, ingredientData: any): { score: number; issues: string[]; warnings: string[] } {\n    const issues = [];\n    const warnings = [];\n    let score = 1.0;\n\n    if (!recipeData) {\n      issues.push('Missing recipe data');\n      score -= 0.3;\n    }\n\n    if (!ingredientData) {\n      issues.push('Missing ingredient data');\n      score -= 0.3;\n    }\n\n    if (recipeData && !recipeData.elementalProperties) {\n      warnings.push('Recipe missing elemental properties');\n      score -= 0.1;\n    }\n\n    return { score: Math.max(0, score), issues, warnings };\n  }\n\n  private validateAstrologicalConsistency(astrologicalContext: any): { score: number; issues: string[]; warnings: string[] } {\n    const issues = [];\n    const warnings = [];\n    let score = 1.0;\n\n    if (!astrologicalContext.zodiacSign) {\n      issues.push('Missing zodiac sign');\n      score -= 0.3;\n    }\n\n    if (!astrologicalContext.lunarPhase) {\n      warnings.push('Missing lunar phase');\n      score -= 0.1;\n    }\n\n    if (!astrologicalContext.elementalProperties) {\n      issues.push('Missing elemental properties');\n      score -= 0.4;\n    }\n\n    return { score: Math.max(0, score), issues, warnings };\n  }\n\n  private validateElementalHarmony(elementalProperties: ElementalProperties): { score: number; issues: string[]; warnings: string[] } {\n    const issues = [];\n    const warnings = [];\n    let score = 1.0;\n\n    if (!elementalProperties) {\n      issues.push('Missing elemental properties');\n      return { score: 0, issues, warnings };\n    }\n\n    const { Fire, Water, Earth, Air } = elementalProperties;\n    const total = Fire + Water + Earth + Air;\n\n    if (total === 0) {\n      issues.push('All elemental values are zero');\n      score -= 0.5;\n    }\n\n    if (total > 4) {\n      warnings.push('Elemental values sum exceeds expected range');\n      score -= 0.1;\n    }\n\n    // Check for negative values\n    if (Fire < 0 || Water < 0 || Earth < 0 || Air < 0) {\n      issues.push('Negative elemental values detected');\n      score -= 0.3;\n    }\n\n    return { score: Math.max(0, score), issues, warnings };\n  }\n\n  private assessRiskFactors(recipeData: any, ingredientData: any, astrologicalContext: any): string[] {\n    const factors = [];\n\n    if (!recipeData || !ingredientData) {\n      factors.push('Missing critical data');\n    }\n\n    if (!astrologicalContext.elementalProperties) {\n      factors.push('Missing astrological context');\n    }\n\n    if (this.performanceMetrics.errorRate > 0.1) {\n      factors.push('High error rate detected');\n    }\n\n    if (this.performanceMetrics.averageExecutionTime > 5000) {\n      factors.push('Performance degradation detected');\n    }\n\n    return factors;\n  }\n\n  private determineRiskLevel(factors: string[]): 'low' | 'medium' | 'high' | 'critical' {\n    if (factors.length === 0) return 'low';\n    if (factors.length <= 2) return 'medium';\n    if (factors.length <= 4) return 'high';\n    return 'critical';\n  }\n\n  private calculateRiskScore(factors: string[]): number {\n    return Math.min(1, factors.length * 0.2);\n  }\n\n  private generateFallbackStrategies(factors: string[]): string[] {\n    const strategies = [\n      'Use cached recommendations when available',\n      'Provide default cuisine suggestions',\n      'Graceful degradation to basic functionality'\n    ];\n\n    if (factors.includes('Missing critical data')) {\n      strategies.push('Request user to provide missing information');\n    }\n\n    if (factors.includes('High error rate detected')) {\n      strategies.push('Implement circuit breaker pattern');\n    }\n\n    return strategies;\n  }\n\n  private generateMonitoringAlerts(factors: string[]): string[] {\n    const alerts = [];\n\n    if (factors.includes('Performance degradation detected')) {\n      alerts.push('Performance monitoring alert: Execution time exceeded threshold');\n    }\n\n    if (factors.includes('High error rate detected')) {\n      alerts.push('Error rate monitoring alert: Error threshold exceeded');\n    }\n\n    return alerts;\n  }\n\n  private analyzePerformanceOptimization(): { score: number; recommendations: string[]; estimatedImpact: number } {\n    const score = this.performanceMetrics.averageExecutionTime < 2000 ? 0.9 : 0.6;\n    const recommendations = [];\n    \n    if (this.performanceMetrics.averageExecutionTime > 2000) {\n      recommendations.push('Optimize calculation algorithms for faster execution');\n    }\n    \n    if (this.performanceMetrics.cacheHitRate < 0.5) {\n      recommendations.push('Improve caching strategy for better performance');\n    }\n\n    return { score, recommendations, estimatedImpact: 0.3 };\n  }\n\n  private analyzeAccuracyOptimization(recipeData: any, ingredientData: any, astrologicalContext: any): { score: number; recommendations: string[]; estimatedImpact: number } {\n    const score = 0.85; // Based on intelligence system accuracy\n    const recommendations = [\n      'Enhance astrological calculation precision',\n      'Improve ingredient compatibility algorithms',\n      'Strengthen recipe recommendation logic'\n    ];\n\n    return { score, recommendations, estimatedImpact: 0.25 };\n  }\n\n  private analyzeUserExperienceOptimization(): { score: number; recommendations: string[]; estimatedImpact: number } {\n    const score = 0.8;\n    const recommendations = [\n      'Improve loading states and user feedback',\n      'Enhance error messages and recovery options',\n      'Optimize mobile responsiveness'\n    ];\n\n    return { score, recommendations, estimatedImpact: 0.2 };\n  }\n\n  private analyzeSystemIntegrationOptimization(): { score: number; recommendations: string[]; estimatedImpact: number } {\n    const score = 0.9; // High integration with existing intelligence systems\n    const recommendations = [\n      'Enhance cross-system data sharing',\n      'Improve API integration reliability',\n      'Strengthen monitoring and alerting'\n    ];\n\n    return { score, recommendations, estimatedImpact: 0.15 };\n  }\n\n  // ========== INGREDIENT INTELLIGENCE ANALYSIS METHODS ==========\n\n  /**\n   * Analyze ingredient categorization (Phase 27 Intelligence System)\n   */\n  private analyzeIngredientCategorization(ingredientData: any): any {\n    const ingredients = ingredientData?.ingredients || [];\n    const categories = new Set(ingredients.map((ing: any) => ing.category).filter(Boolean));\n    \n    return {\n      categoryHarmony: {\n        overallHarmony: categories.size > 0 ? 0.85 : 0.5,\n        categoryCount: categories.size,\n        ingredientDistribution: Array.from(categories).map(cat => ({\n          category: cat,\n          count: ingredients.filter((ing: any) => ing.category === cat).length\n        }))\n      },\n      categoryOptimization: categories.size < 3 ? ['Expand ingredient categories for better variety'] : []\n    };\n  }\n\n  /**\n   * Analyze ingredient seasonality (Phase 27 Intelligence System)\n   */\n  private analyzeIngredientSeasonality(ingredientData: any, astrologicalContext: any): any {\n    const ingredients = ingredientData?.ingredients || [];\n    const currentSeason = this.getCurrentSeason();\n    \n    return {\n      seasonalHarmony: {\n        overallHarmony: 0.8,\n        currentSeason,\n        seasonalAlignment: ingredients.length > 0 ? 0.75 : 0.5\n      },\n      seasonalOptimization: ['Consider seasonal ingredient variations for optimal timing']\n    };\n  }\n\n  /**\n   * Analyze ingredient compatibility (Phase 27 Intelligence System)\n   */\n  private analyzeIngredientCompatibility(ingredientData: any): any {\n    const ingredients = ingredientData?.ingredients || [];\n    \n    return {\n      compatibilityHarmony: {\n        overallHarmony: ingredients.length > 1 ? 0.8 : 0.6,\n        pairwiseCompatibility: ingredients.length > 1 ? 0.85 : 0.5\n      },\n      compatibilityOptimization: ingredients.length < 2 ? ['Add more ingredients for compatibility analysis'] : []\n    };\n  }\n\n  /**\n   * Analyze ingredient astrology (Phase 27 Intelligence System)\n   */\n  private analyzeIngredientAstrology(ingredientData: any, astrologicalContext: any): any {\n    const ingredients = ingredientData?.ingredients || [];\n    \n    return {\n      astrologicalHarmony: {\n        overallHarmony: 0.82,\n        elementalAlignment: this.calculateElementalAlignment(ingredients, astrologicalContext.elementalProperties),\n        planetaryCorrespondence: 0.78\n      },\n      astrologicalOptimization: ['Enhance astrological correspondence data for ingredients']\n    };\n  }\n\n  /**\n   * Validate ingredient data (Phase 27 Intelligence System)\n   */\n  private validateIngredientData(ingredientData: any): any {\n    const ingredients = ingredientData?.ingredients || [];\n    const validIngredients = ingredients.filter((ing: any) => ing.name && ing.elementalProperties);\n    \n    return {\n      validationHarmony: {\n        overallHarmony: ingredients.length > 0 ? (validIngredients.length / ingredients.length) : 0.5,\n        validationRate: ingredients.length > 0 ? (validIngredients.length / ingredients.length) : 0,\n        dataCompleteness: validIngredients.length / Math.max(1, ingredients.length)\n      },\n      validationOptimization: validIngredients.length < ingredients.length ? \n        ['Complete missing ingredient data for better analysis'] : []\n    };\n  }\n\n  /**\n   * Calculate elemental alignment between ingredients and context\n   */\n  private calculateElementalAlignment(ingredients: any[], contextElemental: ElementalProperties): number {\n    if (!ingredients.length || !contextElemental) return 0.5;\n    \n    const avgAlignment = ingredients.reduce((sum, ing) => {\n      if (!ing.elementalProperties) return sum;\n      \n      const alignment = (\n        Math.abs(ing.elementalProperties.Fire - contextElemental.Fire) +\n        Math.abs(ing.elementalProperties.Water - contextElemental.Water) +\n        Math.abs(ing.elementalProperties.Earth - contextElemental.Earth) +\n        Math.abs(ing.elementalProperties.Air - contextElemental.Air)\n      ) / 4;\n      \n      return sum + (1 - alignment); // Convert difference to alignment score\n    }, 0);\n    \n    return avgAlignment / ingredients.length;\n  }\n\n  /**\n   * Get current season for seasonal analysis\n   */\n  private getCurrentSeason(): string {\n    const now = new Date();\n    const month = now.getMonth(); // 0 = January, 11 = December\n    \n    if (month >= 2 && month <= 4) return 'spring';\n    if (month >= 5 && month <= 7) return 'summer';\n    if (month >= 8 && month <= 10) return 'autumn';\n    return 'winter';\n  }\n\n  // ========== PUBLIC API METHODS ==========\n\n  /**\n   * Get current performance metrics\n   */\n  getPerformanceMetrics() {\n    return { ...this.performanceMetrics };\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(newConfig: Partial<EnterpriseIntelligenceConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    this.log('info', 'Configuration updated');\n  }\n\n  /**\n   * Clear cache\n   */\n  clearCache(): void {\n    this.cache.clear();\n    this.log('info', 'Cache cleared');\n  }\n\n  /**\n   * Reset performance metrics\n   */\n  resetMetrics(): void {\n    this.performanceMetrics = {\n      analysisCount: 0,\n      averageExecutionTime: 0,\n      cacheHitRate: 0,\n      errorRate: 0\n    };\n    this.log('info', 'Performance metrics reset');\n  }\n}\n\n// Export singleton instance for easy usage\nexport const enterpriseIntelligenceIntegration = new EnterpriseIntelligenceIntegration();\n\n// Export factory function for custom configurations\nexport const createEnterpriseIntelligenceIntegration = (config?: Partial<EnterpriseIntelligenceConfig>) => \n  new EnterpriseIntelligenceIntegration(config);"],"version":3}