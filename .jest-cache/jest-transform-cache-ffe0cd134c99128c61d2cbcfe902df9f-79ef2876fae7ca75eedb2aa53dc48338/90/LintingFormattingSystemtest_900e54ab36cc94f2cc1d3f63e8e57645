0cce15ece04e60dae42061ff3810a25e
"use strict";
/**
 * Linting and Formatting System Tests
 * Comprehensive test suite for automated linting and formatting functionality
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock dependencies
jest.mock('fs');
jest.mock('child_process');
jest.mock('../../utils/logger');
const LintingFormattingSystem_1 = require("./LintingFormattingSystem");
const fs = __importStar(require("fs"));
const child_process_1 = require("child_process");
const mockFs = fs;
const mockExecSync = child_process_1.execSync;
describe('LintingFormattingSystem', () => {
    let lintingFormattingSystem;
    let testConfig;
    beforeEach(() => {
        testConfig = {
            ...LintingFormattingSystem_1.DEFAULT_LINTING_FORMATTING_CONFIG,
            maxFilesPerBatch: 5,
            safetyValidationEnabled: true,
        };
        lintingFormattingSystem = new LintingFormattingSystem_1.LintingFormattingSystem(testConfig);
        // Reset mocks
        jest.clearAllMocks();
    });
    describe('detectLintingViolations', () => {
        test('detects TypeScript linting violations', async () => {
            const eslintOutput = JSON.stringify([
                {
                    filePath: '/test/file.ts',
                    messages: [
                        {
                            line: 1,
                            column: 10,
                            ruleId: '@typescript-eslint/no-unused-vars',
                            message: 'Variable is defined but never used',
                            severity: 1,
                            fix: { range: [0, 10], text: '' },
                        },
                        {
                            line: 5,
                            column: 15,
                            ruleId: '@typescript-eslint/no-explicit-any',
                            message: 'Unexpected any. Specify a different type.',
                            severity: 1,
                        },
                    ],
                },
            ]);
            mockExecSync.mockReturnValue(eslintOutput);
            const violations = await lintingFormattingSystem.detectLintingViolations([
                'test-file.ts',
            ]);
            expect(violations).toHaveLength(2);
            expect(violations[0].ruleId).toBe('@typescript-eslint/no-unused-vars');
            expect(violations[0].fixable).toBe(true);
            expect(violations[1].ruleId).toBe('@typescript-eslint/no-explicit-any');
            expect(violations[1].fixable).toBe(false);
        });
        test('detects React linting violations', async () => {
            const eslintOutput = JSON.stringify([
                {
                    filePath: '/test/component.tsx',
                    messages: [
                        {
                            line: 10,
                            column: 5,
                            ruleId: 'react-hooks/exhaustive-deps',
                            message: 'React Hook useEffect has a missing dependency',
                            severity: 1,
                        },
                        {
                            line: 15,
                            column: 20,
                            ruleId: 'react/jsx-uses-vars',
                            message: 'Variable is used in JSX but not defined',
                            severity: 2,
                        },
                    ],
                },
            ]);
            mockExecSync.mockReturnValue(eslintOutput);
            const violations = await lintingFormattingSystem.detectLintingViolations([
                'component.tsx',
            ]);
            expect(violations).toHaveLength(2);
            expect(violations[0].ruleId).toBe('react-hooks/exhaustive-deps');
            expect(violations[0].severity).toBe('warning');
            expect(violations[1].ruleId).toBe('react/jsx-uses-vars');
            expect(violations[1].severity).toBe('error');
        });
        test('handles ESLint parsing errors gracefully', async () => {
            mockExecSync.mockReturnValue('invalid json output');
            const violations = await lintingFormattingSystem.detectLintingViolations([
                'test-file.ts',
            ]);
            expect(violations).toHaveLength(0);
        });
    });
    describe('fixLintingViolations', () => {
        test('fixes auto-fixable linting violations', async () => {
            const beforeOutput = JSON.stringify([
                {
                    filePath: '/test/file.ts',
                    messages: [
                        {
                            line: 1,
                            column: 10,
                            ruleId: '@typescript-eslint/no-unused-vars',
                            severity: 1,
                            fix: {},
                        },
                        {
                            line: 5,
                            column: 15,
                            ruleId: '@typescript-eslint/no-explicit-any',
                            severity: 1,
                        },
                    ],
                },
            ]);
            const afterOutput = JSON.stringify([
                {
                    filePath: '/test/file.ts',
                    messages: [
                        {
                            line: 5,
                            column: 15,
                            ruleId: '@typescript-eslint/no-explicit-any',
                            severity: 1,
                        },
                    ],
                },
            ]);
            mockExecSync
                .mockReturnValueOnce(beforeOutput) // Initial detection
                .mockReturnValueOnce('') // Fix command
                .mockReturnValueOnce(afterOutput); // After detection
            const fixedCount = await lintingFormattingSystem.fixLintingViolations([
                'test-file.ts',
            ]);
            expect(fixedCount).toBe(1);
            expect(mockExecSync).toHaveBeenCalledWith(expect.stringContaining('--fix'), expect.any(Object));
        });
        test('respects auto-fix disabled configuration', async () => {
            const config = { ...testConfig, autoFixEnabled: false };
            const system = new LintingFormattingSystem_1.LintingFormattingSystem(config);
            const fixedCount = await system.fixLintingViolations(['test-file.ts']);
            expect(fixedCount).toBe(0);
            expect(mockExecSync).not.toHaveBeenCalledWith(expect.stringContaining('--fix'), expect.any(Object));
        });
    });
    describe('formatCode', () => {
        test('formats code using Prettier', async () => {
            const originalContent = 'const x={a:1,b:2}';
            const formattedContent = 'const x = { a: 1, b: 2 };';
            mockFs.readFileSync
                .mockReturnValueOnce(originalContent) // Before formatting
                .mockReturnValueOnce(formattedContent); // After formatting
            mockExecSync.mockReturnValue('');
            const formattedCount = await lintingFormattingSystem.formatCode([
                'test-file.ts',
            ]);
            expect(formattedCount).toBe(1);
            expect(mockExecSync).toHaveBeenCalledWith(expect.stringContaining('prettier --write'), expect.any(Object));
        });
        test('skips formatting when content unchanged', async () => {
            const content = 'const x = { a: 1, b: 2 };';
            mockFs.readFileSync
                .mockReturnValueOnce(content) // Before formatting
                .mockReturnValueOnce(content); // After formatting (unchanged)
            mockExecSync.mockReturnValue('');
            const formattedCount = await lintingFormattingSystem.formatCode([
                'test-file.ts',
            ]);
            expect(formattedCount).toBe(0);
        });
        test('respects formatting disabled configuration', async () => {
            const config = { ...testConfig, formattingEnabled: false };
            const system = new LintingFormattingSystem_1.LintingFormattingSystem(config);
            const formattedCount = await system.formatCode(['test-file.ts']);
            expect(formattedCount).toBe(0);
            expect(mockExecSync).not.toHaveBeenCalledWith(expect.stringContaining('prettier'), expect.any(Object));
        });
    });
    describe('applyPatternBasedFixes', () => {
        test('applies enabled pattern-based fixes', async () => {
            const originalContent = `
console.log('debug message');
const x = 1;;
const y = 2;   
`;
            const expectedContent = `

const x = 1;
const y = 2;
`;
            mockFs.readFileSync.mockReturnValue(originalContent);
            let writtenContent = '';
            mockFs.writeFileSync.mockImplementation((path, content) => {
                writtenContent = content;
            });
            const fixesApplied = await lintingFormattingSystem.applyPatternBasedFixes(['test-file.ts']);
            expect(fixesApplied).toBeGreaterThan(0);
            expect(writtenContent).not.toContain('console.log'); // Should be removed if enabled
            expect(writtenContent).not.toContain(';;'); // Double semicolons should be fixed
            expect(writtenContent).not.toMatch(/[ \t]+$/m); // Trailing whitespace should be removed
        });
        test('respects file extension filters', async () => {
            const config = {
                ...testConfig,
                patternBasedFixes: [
                    {
                        name: 'Test fix',
                        description: 'Test pattern fix',
                        pattern: /test/g,
                        replacement: 'fixed',
                        fileExtensions: ['.js'],
                        enabled: true,
                    },
                ],
            };
            const system = new LintingFormattingSystem_1.LintingFormattingSystem(config);
            mockFs.readFileSync.mockReturnValue('test content');
            mockFs.writeFileSync.mockImplementation(() => { });
            // Should not apply to .ts file
            const fixesApplied = await system.applyPatternBasedFixes([
                'test-file.ts',
            ]);
            expect(fixesApplied).toBe(0);
        });
        test('skips disabled pattern fixes', async () => {
            const config = {
                ...testConfig,
                patternBasedFixes: [
                    {
                        name: 'Disabled fix',
                        description: 'This fix is disabled',
                        pattern: /test/g,
                        replacement: 'fixed',
                        fileExtensions: ['.ts'],
                        enabled: false,
                    },
                ],
            };
            const system = new LintingFormattingSystem_1.LintingFormattingSystem(config);
            mockFs.readFileSync.mockReturnValue('test content');
            const fixesApplied = await system.applyPatternBasedFixes([
                'test-file.ts',
            ]);
            expect(fixesApplied).toBe(0);
            expect(mockFs.writeFileSync).not.toHaveBeenCalled();
        });
    });
    describe('enforceStyleGuideCompliance', () => {
        test('enforces consistent indentation', async () => {
            const originalContent = `
\tfunction test() {
\t\treturn true;
\t}
`;
            const expectedContent = `
  function test() {
    return true;
  }
`;
            mockFs.readFileSync.mockReturnValue(originalContent);
            let writtenContent = '';
            mockFs.writeFileSync.mockImplementation((path, content) => {
                writtenContent = content;
            });
            const fixesApplied = await lintingFormattingSystem.enforceStyleGuideCompliance([
                'test-file.ts',
            ]);
            expect(fixesApplied).toBeGreaterThan(0);
            expect(writtenContent).not.toContain('\t');
            expect(writtenContent).toContain('  '); // Should use spaces
        });
        test('enforces trailing commas', async () => {
            const originalContent = `
const obj = {
  a: 1,
  b: 2
};
`;
            mockFs.readFileSync.mockReturnValue(originalContent);
            let writtenContent = '';
            mockFs.writeFileSync.mockImplementation((path, content) => {
                writtenContent = content;
            });
            const fixesApplied = await lintingFormattingSystem.enforceStyleGuideCompliance([
                'test-file.ts',
            ]);
            expect(fixesApplied).toBeGreaterThan(0);
            expect(writtenContent).toContain('b: 2,'); // Should add trailing comma
        });
        test('enforces semicolons', async () => {
            const originalContent = `
const x = 1
const y = 2
return x + y
`;
            mockFs.readFileSync.mockReturnValue(originalContent);
            let writtenContent = '';
            mockFs.writeFileSync.mockImplementation((path, content) => {
                writtenContent = content;
            });
            const fixesApplied = await lintingFormattingSystem.enforceStyleGuideCompliance([
                'test-file.ts',
            ]);
            expect(fixesApplied).toBeGreaterThan(0);
            expect(writtenContent).toContain('const x = 1;');
            expect(writtenContent).toContain('const y = 2;');
            expect(writtenContent).toContain('return x + y;');
        });
        test('enforces quote style', async () => {
            const config = {
                ...testConfig,
                formattingRules: {
                    ...testConfig.formattingRules,
                    enforceQuoteStyle: 'single',
                },
            };
            const system = new LintingFormattingSystem_1.LintingFormattingSystem(config);
            const originalContent = `
const message = "Hello world";
const greeting = "Hi there";
`;
            mockFs.readFileSync.mockReturnValue(originalContent);
            let writtenContent = '';
            mockFs.writeFileSync.mockImplementation((path, content) => {
                writtenContent = content;
            });
            const fixesApplied = await system.enforceStyleGuideCompliance([
                'test-file.ts',
            ]);
            expect(fixesApplied).toBeGreaterThan(0);
            expect(writtenContent).toContain("'Hello world'");
            expect(writtenContent).toContain("'Hi there'");
            expect(writtenContent).not.toContain('"Hello world"');
        });
    });
    describe('executeLintingAndFormatting', () => {
        test('executes complete linting and formatting workflow', async () => {
            const testFiles = ['file1.ts', 'file2.ts'];
            // Mock ESLint output
            const eslintOutput = JSON.stringify([
                {
                    filePath: '/test/file1.ts',
                    messages: [
                        {
                            line: 1,
                            column: 10,
                            ruleId: '@typescript-eslint/no-unused-vars',
                            severity: 1,
                            fix: {},
                        },
                    ],
                },
            ]);
            mockExecSync
                .mockReturnValueOnce(testFiles.join('\n')) // File listing
                .mockReturnValueOnce(eslintOutput) // Initial violation detection
                .mockReturnValueOnce('') // ESLint fix
                .mockReturnValueOnce('[]') // After fix detection
                .mockReturnValueOnce('') // Prettier formatting
                .mockReturnValueOnce('') // Build validation
                .mockReturnValueOnce('') // Build validation
                .mockReturnValueOnce(''); // Build validation
            mockFs.readFileSync
                .mockReturnValue('const x = 1;') // File content for formatting
                .mockReturnValue('const x = 1;'); // File content after formatting
            mockFs.writeFileSync.mockImplementation(() => { });
            const result = await lintingFormattingSystem.executeLintingAndFormatting(testFiles);
            expect(result.filesProcessed.length).toBeGreaterThan(0);
            expect(result.buildValidationPassed).toBe(true);
            expect(result.errors).toHaveLength(0);
        });
        test('handles build validation failures', async () => {
            const testFiles = ['file1.ts'];
            mockExecSync
                .mockReturnValueOnce(testFiles.join('\n')) // File listing
                .mockReturnValueOnce('[]') // ESLint output
                .mockReturnValueOnce('') // Prettier
                .mockImplementationOnce(() => {
                // Build validation failure
                throw new Error('Build failed');
            });
            mockFs.readFileSync.mockReturnValue('const x = 1;');
            mockFs.writeFileSync.mockImplementation(() => { });
            const result = await lintingFormattingSystem.executeLintingAndFormatting(testFiles);
            expect(result.buildValidationPassed).toBe(false);
            expect(result.errors.length).toBeGreaterThan(0);
        });
        test('processes files in batches', async () => {
            const testFiles = Array.from({ length: 12 }, (_, i) => `file${i}.ts`);
            const batchSize = 5;
            const config = { ...testConfig, maxFilesPerBatch: batchSize };
            const system = new LintingFormattingSystem_1.LintingFormattingSystem(config);
            mockExecSync.mockReturnValue('[]'); // ESLint output
            mockFs.readFileSync.mockReturnValue('const x = 1;');
            mockFs.writeFileSync.mockImplementation(() => { });
            const result = await system.executeLintingAndFormatting(testFiles);
            expect(result.filesProcessed.length).toBeLessThanOrEqual(testFiles.length);
            expect(result.buildValidationPassed).toBe(true);
        });
    });
    describe('violation breakdown', () => {
        test('categorizes violations correctly', async () => {
            const eslintOutput = JSON.stringify([
                {
                    filePath: '/test/file.ts',
                    messages: [
                        {
                            line: 1,
                            column: 10,
                            ruleId: '@typescript-eslint/no-unused-vars',
                            severity: 1,
                        },
                        {
                            line: 2,
                            column: 5,
                            ruleId: 'react-hooks/exhaustive-deps',
                            severity: 1,
                        },
                        {
                            line: 3,
                            column: 15,
                            ruleId: 'import/no-unresolved',
                            severity: 1,
                        },
                        { line: 4, column: 20, ruleId: 'no-console', severity: 1 },
                    ],
                },
            ]);
            mockExecSync.mockReturnValue(eslintOutput);
            mockFs.readFileSync.mockReturnValue('test content');
            mockFs.writeFileSync.mockImplementation(() => { });
            const result = await lintingFormattingSystem.executeLintingAndFormatting([
                'test-file.ts',
            ]);
            expect(result.violationBreakdown.typeScriptErrors).toBe(1);
            expect(result.violationBreakdown.reactViolations).toBe(1);
            expect(result.violationBreakdown.importViolations).toBe(1);
            expect(result.violationBreakdown.formattingIssues).toBe(1);
        });
    });
    describe('error handling', () => {
        test('handles file read errors gracefully', async () => {
            mockFs.readFileSync.mockImplementation(() => {
                throw new Error('File not found');
            });
            const fixesApplied = await lintingFormattingSystem.applyPatternBasedFixes(['nonexistent.ts']);
            expect(fixesApplied).toBe(0);
        });
        test('handles ESLint execution errors gracefully', async () => {
            mockExecSync.mockImplementation(() => {
                throw new Error('ESLint failed');
            });
            const violations = await lintingFormattingSystem.detectLintingViolations([
                'test-file.ts',
            ]);
            expect(violations).toHaveLength(0);
        });
        test('continues processing other files when one fails', async () => {
            const testFiles = ['good.ts', 'bad.ts', 'good2.ts'];
            mockFs.readFileSync
                .mockReturnValueOnce('const x = 1;') // good.ts
                .mockImplementationOnce(() => {
                throw new Error('Bad file');
            }) // bad.ts
                .mockReturnValueOnce('const y = 2;'); // good2.ts
            const fixesApplied = await lintingFormattingSystem.applyPatternBasedFixes(testFiles);
            // Should still process the good files
            expect(fixesApplied).toBeGreaterThanOrEqual(0);
        });
    });
    describe('configuration validation', () => {
        test('uses default configuration when not provided', () => {
            const system = new LintingFormattingSystem_1.LintingFormattingSystem(LintingFormattingSystem_1.DEFAULT_LINTING_FORMATTING_CONFIG);
            expect(system).toBeDefined();
        });
        test('respects custom configuration', () => {
            const customConfig = {
                maxFilesPerBatch: 10,
                safetyValidationEnabled: false,
                buildValidationFrequency: 3,
                autoFixEnabled: false,
                formattingEnabled: false,
                lintingRules: {
                    enforceTypeScriptRules: false,
                    enforceReactRules: false,
                    enforceImportRules: false,
                    maxWarningsThreshold: 500,
                    customRuleOverrides: { 'no-console': 'off' },
                },
                formattingRules: {
                    enforceConsistentIndentation: false,
                    enforceTrailingCommas: false,
                    enforceSemicolons: false,
                    enforceQuoteStyle: 'double',
                    enforceLineLength: 120,
                    enforceSpacing: false,
                },
                patternBasedFixes: [],
            };
            const system = new LintingFormattingSystem_1.LintingFormattingSystem(customConfig);
            expect(system).toBeDefined();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9zZXJ2aWNlcy9jYW1wYWlnbi9MaW50aW5nRm9ybWF0dGluZ1N5c3RlbS50ZXN0LnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFXSCxvQkFBb0I7QUFDcEIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQzNCLElBQUksQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQVpoQyx1RUFJbUM7QUFDbkMsdUNBQXlCO0FBRXpCLGlEQUF5QztBQU96QyxNQUFNLE1BQU0sR0FBRyxFQUE0QixDQUFDO0FBQzVDLE1BQU0sWUFBWSxHQUFHLHdCQUFnRCxDQUFDO0FBRXRFLFFBQVEsQ0FBQyx5QkFBeUIsRUFBRSxHQUFHLEVBQUU7SUFDdkMsSUFBSSx1QkFBZ0QsQ0FBQztJQUNyRCxJQUFJLFVBQW1DLENBQUM7SUFFeEMsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLFVBQVUsR0FBRztZQUNYLEdBQUcsMkRBQWlDO1lBQ3BDLGdCQUFnQixFQUFFLENBQUM7WUFDbkIsdUJBQXVCLEVBQUUsSUFBSTtTQUM5QixDQUFDO1FBQ0YsdUJBQXVCLEdBQUcsSUFBSSxpREFBdUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUVsRSxjQUFjO1FBQ2QsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLHlCQUF5QixFQUFFLEdBQUcsRUFBRTtRQUN2QyxJQUFJLENBQUMsdUNBQXVDLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDdkQsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztnQkFDbEM7b0JBQ0UsUUFBUSxFQUFFLGVBQWU7b0JBQ3pCLFFBQVEsRUFBRTt3QkFDUjs0QkFDRSxJQUFJLEVBQUUsQ0FBQzs0QkFD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ZXNrdG9wL1doYXRUb0VhdE5leHQvc3JjL3NlcnZpY2VzL2NhbXBhaWduL0xpbnRpbmdGb3JtYXR0aW5nU3lzdGVtLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBMaW50aW5nIGFuZCBGb3JtYXR0aW5nIFN5c3RlbSBUZXN0c1xuICogQ29tcHJlaGVuc2l2ZSB0ZXN0IHN1aXRlIGZvciBhdXRvbWF0ZWQgbGludGluZyBhbmQgZm9ybWF0dGluZyBmdW5jdGlvbmFsaXR5XG4gKi9cblxuaW1wb3J0IHtcbiAgTGludGluZ0Zvcm1hdHRpbmdTeXN0ZW0sXG4gIERFRkFVTFRfTElOVElOR19GT1JNQVRUSU5HX0NPTkZJRyxcbiAgTGludGluZ0Zvcm1hdHRpbmdDb25maWcsXG59IGZyb20gJy4vTGludGluZ0Zvcm1hdHRpbmdTeXN0ZW0nO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IGV4ZWNTeW5jIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5cbi8vIE1vY2sgZGVwZW5kZW5jaWVzXG5qZXN0Lm1vY2soJ2ZzJyk7XG5qZXN0Lm1vY2soJ2NoaWxkX3Byb2Nlc3MnKTtcbmplc3QubW9jaygnLi4vLi4vdXRpbHMvbG9nZ2VyJyk7XG5cbmNvbnN0IG1vY2tGcyA9IGZzIGFzIGplc3QuTW9ja2VkPHR5cGVvZiBmcz47XG5jb25zdCBtb2NrRXhlY1N5bmMgPSBleGVjU3luYyBhcyBqZXN0Lk1vY2tlZEZ1bmN0aW9uPHR5cGVvZiBleGVjU3luYz47XG5cbmRlc2NyaWJlKCdMaW50aW5nRm9ybWF0dGluZ1N5c3RlbScsICgpID0+IHtcbiAgbGV0IGxpbnRpbmdGb3JtYXR0aW5nU3lzdGVtOiBMaW50aW5nRm9ybWF0dGluZ1N5c3RlbTtcbiAgbGV0IHRlc3RDb25maWc6IExpbnRpbmdGb3JtYXR0aW5nQ29uZmlnO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIHRlc3RDb25maWcgPSB7XG4gICAgICAuLi5ERUZBVUxUX0xJTlRJTkdfRk9STUFUVElOR19DT05GSUcsXG4gICAgICBtYXhGaWxlc1BlckJhdGNoOiA1LFxuICAgICAgc2FmZXR5VmFsaWRhdGlvbkVuYWJsZWQ6IHRydWUsXG4gICAgfTtcbiAgICBsaW50aW5nRm9ybWF0dGluZ1N5c3RlbSA9IG5ldyBMaW50aW5nRm9ybWF0dGluZ1N5c3RlbSh0ZXN0Q29uZmlnKTtcblxuICAgIC8vIFJlc2V0IG1vY2tzXG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdkZXRlY3RMaW50aW5nVmlvbGF0aW9ucycsICgpID0+IHtcbiAgICB0ZXN0KCdkZXRlY3RzIFR5cGVTY3JpcHQgbGludGluZyB2aW9sYXRpb25zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZXNsaW50T3V0cHV0ID0gSlNPTi5zdHJpbmdpZnkoW1xuICAgICAgICB7XG4gICAgICAgICAgZmlsZVBhdGg6ICcvdGVzdC9maWxlLnRzJyxcbiAgICAgICAgICBtZXNzYWdlczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBsaW5lOiAxLFxuICAgICAgICAgICAgICBjb2x1bW46IDEwLFxuICAgICAgICAgICAgICBydWxlSWQ6ICdAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMnLFxuICAgICAgICAgICAgICBtZXNzYWdlOiAnVmFyaWFibGUgaXMgZGVmaW5lZCBidXQgbmV2ZXIgdXNlZCcsXG4gICAgICAgICAgICAgIHNldmVyaXR5OiAxLFxuICAgICAgICAgICAgICBmaXg6IHsgcmFuZ2U6IFswLCAxMF0sIHRleHQ6ICcnIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBsaW5lOiA1LFxuICAgICAgICAgICAgICBjb2x1bW46IDE1LFxuICAgICAgICAgICAgICBydWxlSWQ6ICdAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55JyxcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ1VuZXhwZWN0ZWQgYW55LiBTcGVjaWZ5IGEgZGlmZmVyZW50IHR5cGUuJyxcbiAgICAgICAgICAgICAgc2V2ZXJpdHk6IDEsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICBdKTtcblxuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tSZXR1cm5WYWx1ZShlc2xpbnRPdXRwdXQpO1xuXG4gICAgICBjb25zdCB2aW9sYXRpb25zID0gYXdhaXQgbGludGluZ0Zvcm1hdHRpbmdTeXN0ZW0uZGV0ZWN0TGludGluZ1Zpb2xhdGlvbnMoW1xuICAgICAgICAndGVzdC1maWxlLnRzJyxcbiAgICAgIF0pO1xuXG4gICAgICBleHBlY3QodmlvbGF0aW9ucykudG9IYXZlTGVuZ3RoKDIpO1xuICAgICAgZXhwZWN0KHZpb2xhdGlvbnNbMF0ucnVsZUlkKS50b0JlKCdAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMnKTtcbiAgICAgIGV4cGVjdCh2aW9sYXRpb25zWzBdLmZpeGFibGUpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QodmlvbGF0aW9uc1sxXS5ydWxlSWQpLnRvQmUoJ0B0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnknKTtcbiAgICAgIGV4cGVjdCh2aW9sYXRpb25zWzFdLmZpeGFibGUpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnZGV0ZWN0cyBSZWFjdCBsaW50aW5nIHZpb2xhdGlvbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBlc2xpbnRPdXRwdXQgPSBKU09OLnN0cmluZ2lmeShbXG4gICAgICAgIHtcbiAgICAgICAgICBmaWxlUGF0aDogJy90ZXN0L2NvbXBvbmVudC50c3gnLFxuICAgICAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGxpbmU6IDEwLFxuICAgICAgICAgICAgICBjb2x1bW46IDUsXG4gICAgICAgICAgICAgIHJ1bGVJZDogJ3JlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwcycsXG4gICAgICAgICAgICAgIG1lc3NhZ2U6ICdSZWFjdCBIb29rIHVzZUVmZmVjdCBoYXMgYSBtaXNzaW5nIGRlcGVuZGVuY3knLFxuICAgICAgICAgICAgICBzZXZlcml0eTogMSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGxpbmU6IDE1LFxuICAgICAgICAgICAgICBjb2x1bW46IDIwLFxuICAgICAgICAgICAgICBydWxlSWQ6ICdyZWFjdC9qc3gtdXNlcy12YXJzJyxcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ1ZhcmlhYmxlIGlzIHVzZWQgaW4gSlNYIGJ1dCBub3QgZGVmaW5lZCcsXG4gICAgICAgICAgICAgIHNldmVyaXR5OiAyLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgXSk7XG5cbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrUmV0dXJuVmFsdWUoZXNsaW50T3V0cHV0KTtcblxuICAgICAgY29uc3QgdmlvbGF0aW9ucyA9IGF3YWl0IGxpbnRpbmdGb3JtYXR0aW5nU3lzdGVtLmRldGVjdExpbnRpbmdWaW9sYXRpb25zKFtcbiAgICAgICAgJ2NvbXBvbmVudC50c3gnLFxuICAgICAgXSk7XG5cbiAgICAgIGV4cGVjdCh2aW9sYXRpb25zKS50b0hhdmVMZW5ndGgoMik7XG4gICAgICBleHBlY3QodmlvbGF0aW9uc1swXS5ydWxlSWQpLnRvQmUoJ3JlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwcycpO1xuICAgICAgZXhwZWN0KHZpb2xhdGlvbnNbMF0uc2V2ZXJpdHkpLnRvQmUoJ3dhcm5pbmcnKTtcbiAgICAgIGV4cGVjdCh2aW9sYXRpb25zWzFdLnJ1bGVJZCkudG9CZSgncmVhY3QvanN4LXVzZXMtdmFycycpO1xuICAgICAgZXhwZWN0KHZpb2xhdGlvbnNbMV0uc2V2ZXJpdHkpLnRvQmUoJ2Vycm9yJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdoYW5kbGVzIEVTTGludCBwYXJzaW5nIGVycm9ycyBncmFjZWZ1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0V4ZWNTeW5jLm1vY2tSZXR1cm5WYWx1ZSgnaW52YWxpZCBqc29uIG91dHB1dCcpO1xuXG4gICAgICBjb25zdCB2aW9sYXRpb25zID0gYXdhaXQgbGludGluZ0Zvcm1hdHRpbmdTeXN0ZW0uZGV0ZWN0TGludGluZ1Zpb2xhdGlvbnMoW1xuICAgICAgICAndGVzdC1maWxlLnRzJyxcbiAgICAgIF0pO1xuXG4gICAgICBleHBlY3QodmlvbGF0aW9ucykudG9IYXZlTGVuZ3RoKDApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZml4TGludGluZ1Zpb2xhdGlvbnMnLCAoKSA9PiB7XG4gICAgdGVzdCgnZml4ZXMgYXV0by1maXhhYmxlIGxpbnRpbmcgdmlvbGF0aW9ucycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGJlZm9yZU91dHB1dCA9IEpTT04uc3RyaW5naWZ5KFtcbiAgICAgICAge1xuICAgICAgICAgIGZpbGVQYXRoOiAnL3Rlc3QvZmlsZS50cycsXG4gICAgICAgICAgbWVzc2FnZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbGluZTogMSxcbiAgICAgICAgICAgICAgY29sdW1uOiAxMCxcbiAgICAgICAgICAgICAgcnVsZUlkOiAnQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzJyxcbiAgICAgICAgICAgICAgc2V2ZXJpdHk6IDEsXG4gICAgICAgICAgICAgIGZpeDoge30sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBsaW5lOiA1LFxuICAgICAgICAgICAgICBjb2x1bW46IDE1LFxuICAgICAgICAgICAgICBydWxlSWQ6ICdAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55JyxcbiAgICAgICAgICAgICAgc2V2ZXJpdHk6IDEsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICBdKTtcblxuICAgICAgY29uc3QgYWZ0ZXJPdXRwdXQgPSBKU09OLnN0cmluZ2lmeShbXG4gICAgICAgIHtcbiAgICAgICAgICBmaWxlUGF0aDogJy90ZXN0L2ZpbGUudHMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGxpbmU6IDUsXG4gICAgICAgICAgICAgIGNvbHVtbjogMTUsXG4gICAgICAgICAgICAgIHJ1bGVJZDogJ0B0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnknLFxuICAgICAgICAgICAgICBzZXZlcml0eTogMSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIF0pO1xuXG4gICAgICBtb2NrRXhlY1N5bmNcbiAgICAgICAgLm1vY2tSZXR1cm5WYWx1ZU9uY2UoYmVmb3JlT3V0cHV0KSAvLyBJbml0aWFsIGRldGVjdGlvblxuICAgICAgICAubW9ja1JldHVyblZhbHVlT25jZSgnJykgLy8gRml4IGNvbW1hbmRcbiAgICAgICAgLm1vY2tSZXR1cm5WYWx1ZU9uY2UoYWZ0ZXJPdXRwdXQpOyAvLyBBZnRlciBkZXRlY3Rpb25cblxuICAgICAgY29uc3QgZml4ZWRDb3VudCA9IGF3YWl0IGxpbnRpbmdGb3JtYXR0aW5nU3lzdGVtLmZpeExpbnRpbmdWaW9sYXRpb25zKFtcbiAgICAgICAgJ3Rlc3QtZmlsZS50cycsXG4gICAgICBdKTtcblxuICAgICAgZXhwZWN0KGZpeGVkQ291bnQpLnRvQmUoMSk7XG4gICAgICBleHBlY3QobW9ja0V4ZWNTeW5jKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgZXhwZWN0LnN0cmluZ0NvbnRhaW5pbmcoJy0tZml4JyksXG4gICAgICAgIGV4cGVjdC5hbnkoT2JqZWN0KVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Jlc3BlY3RzIGF1dG8tZml4IGRpc2FibGVkIGNvbmZpZ3VyYXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb25maWcgPSB7IC4uLnRlc3RDb25maWcsIGF1dG9GaXhFbmFibGVkOiBmYWxzZSB9O1xuICAgICAgY29uc3Qgc3lzdGVtID0gbmV3IExpbnRpbmdGb3JtYXR0aW5nU3lzdGVtKGNvbmZpZyk7XG5cbiAgICAgIGNvbnN0IGZpeGVkQ291bnQgPSBhd2FpdCBzeXN0ZW0uZml4TGludGluZ1Zpb2xhdGlvbnMoWyd0ZXN0LWZpbGUudHMnXSk7XG5cbiAgICAgIGV4cGVjdChmaXhlZENvdW50KS50b0JlKDApO1xuICAgICAgZXhwZWN0KG1vY2tFeGVjU3luYykubm90LnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICBleHBlY3Quc3RyaW5nQ29udGFpbmluZygnLS1maXgnKSxcbiAgICAgICAgZXhwZWN0LmFueShPYmplY3QpXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZm9ybWF0Q29kZScsICgpID0+IHtcbiAgICB0ZXN0KCdmb3JtYXRzIGNvZGUgdXNpbmcgUHJldHRpZXInLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBvcmlnaW5hbENvbnRlbnQgPSAnY29uc3QgeD17YToxLGI6Mn0nO1xuICAgICAgY29uc3QgZm9ybWF0dGVkQ29udGVudCA9ICdjb25zdCB4ID0geyBhOiAxLCBiOiAyIH07JztcblxuICAgICAgbW9ja0ZzLnJlYWRGaWxlU3luY1xuICAgICAgICAubW9ja1JldHVyblZhbHVlT25jZShvcmlnaW5hbENvbnRlbnQpIC8vIEJlZm9yZSBmb3JtYXR0aW5nXG4gICAgICAgIC5tb2NrUmV0dXJuVmFsdWVPbmNlKGZvcm1hdHRlZENvbnRlbnQpOyAvLyBBZnRlciBmb3JtYXR0aW5nXG5cbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrUmV0dXJuVmFsdWUoJycpO1xuXG4gICAgICBjb25zdCBmb3JtYXR0ZWRDb3VudCA9IGF3YWl0IGxpbnRpbmdGb3JtYXR0aW5nU3lzdGVtLmZvcm1hdENvZGUoW1xuICAgICAgICAndGVzdC1maWxlLnRzJyxcbiAgICAgIF0pO1xuXG4gICAgICBleHBlY3QoZm9ybWF0dGVkQ291bnQpLnRvQmUoMSk7XG4gICAgICBleHBlY3QobW9ja0V4ZWNTeW5jKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgZXhwZWN0LnN0cmluZ0NvbnRhaW5pbmcoJ3ByZXR0aWVyIC0td3JpdGUnKSxcbiAgICAgICAgZXhwZWN0LmFueShPYmplY3QpXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2tpcHMgZm9ybWF0dGluZyB3aGVuIGNvbnRlbnQgdW5jaGFuZ2VkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29udGVudCA9ICdjb25zdCB4ID0geyBhOiAxLCBiOiAyIH07JztcblxuICAgICAgbW9ja0ZzLnJlYWRGaWxlU3luY1xuICAgICAgICAubW9ja1JldHVyblZhbHVlT25jZShjb250ZW50KSAvLyBCZWZvcmUgZm9ybWF0dGluZ1xuICAgICAgICAubW9ja1JldHVyblZhbHVlT25jZShjb250ZW50KTsgLy8gQWZ0ZXIgZm9ybWF0dGluZyAodW5jaGFuZ2VkKVxuXG4gICAgICBtb2NrRXhlY1N5bmMubW9ja1JldHVyblZhbHVlKCcnKTtcblxuICAgICAgY29uc3QgZm9ybWF0dGVkQ291bnQgPSBhd2FpdCBsaW50aW5nRm9ybWF0dGluZ1N5c3RlbS5mb3JtYXRDb2RlKFtcbiAgICAgICAgJ3Rlc3QtZmlsZS50cycsXG4gICAgICBdKTtcblxuICAgICAgZXhwZWN0KGZvcm1hdHRlZENvdW50KS50b0JlKDApO1xuICAgIH0pO1xuXG4gICAgdGVzdCgncmVzcGVjdHMgZm9ybWF0dGluZyBkaXNhYmxlZCBjb25maWd1cmF0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29uZmlnID0geyAuLi50ZXN0Q29uZmlnLCBmb3JtYXR0aW5nRW5hYmxlZDogZmFsc2UgfTtcbiAgICAgIGNvbnN0IHN5c3RlbSA9IG5ldyBMaW50aW5nRm9ybWF0dGluZ1N5c3RlbShjb25maWcpO1xuXG4gICAgICBjb25zdCBmb3JtYXR0ZWRDb3VudCA9IGF3YWl0IHN5c3RlbS5mb3JtYXRDb2RlKFsndGVzdC1maWxlLnRzJ10pO1xuXG4gICAgICBleHBlY3QoZm9ybWF0dGVkQ291bnQpLnRvQmUoMCk7XG4gICAgICBleHBlY3QobW9ja0V4ZWNTeW5jKS5ub3QudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIGV4cGVjdC5zdHJpbmdDb250YWluaW5nKCdwcmV0dGllcicpLFxuICAgICAgICBleHBlY3QuYW55KE9iamVjdClcbiAgICAgICk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdhcHBseVBhdHRlcm5CYXNlZEZpeGVzJywgKCkgPT4ge1xuICAgIHRlc3QoJ2FwcGxpZXMgZW5hYmxlZCBwYXR0ZXJuLWJhc2VkIGZpeGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgb3JpZ2luYWxDb250ZW50ID0gYFxuY29uc29sZS5sb2coJ2RlYnVnIG1lc3NhZ2UnKTtcbmNvbnN0IHggPSAxOztcbmNvbnN0IHkgPSAyOyAgIFxuYDtcblxuICAgICAgY29uc3QgZXhwZWN0ZWRDb250ZW50ID0gYFxuXG5jb25zdCB4ID0gMTtcbmNvbnN0IHkgPSAyO1xuYDtcblxuICAgICAgbW9ja0ZzLnJlYWRGaWxlU3luYy5tb2NrUmV0dXJuVmFsdWUob3JpZ2luYWxDb250ZW50KTtcbiAgICAgIGxldCB3cml0dGVuQ29udGVudCA9ICcnO1xuICAgICAgbW9ja0ZzLndyaXRlRmlsZVN5bmMubW9ja0ltcGxlbWVudGF0aW9uKChwYXRoLCBjb250ZW50KSA9PiB7XG4gICAgICAgIHdyaXR0ZW5Db250ZW50ID0gY29udGVudCBhcyBzdHJpbmc7XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgZml4ZXNBcHBsaWVkID0gYXdhaXQgbGludGluZ0Zvcm1hdHRpbmdTeXN0ZW0uYXBwbHlQYXR0ZXJuQmFzZWRGaXhlcyhcbiAgICAgICAgWyd0ZXN0LWZpbGUudHMnXVxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KGZpeGVzQXBwbGllZCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgICAgZXhwZWN0KHdyaXR0ZW5Db250ZW50KS5ub3QudG9Db250YWluKCdjb25zb2xlLmxvZycpOyAvLyBTaG91bGQgYmUgcmVtb3ZlZCBpZiBlbmFibGVkXG4gICAgICBleHBlY3Qod3JpdHRlbkNvbnRlbnQpLm5vdC50b0NvbnRhaW4oJzs7Jyk7IC8vIERvdWJsZSBzZW1pY29sb25zIHNob3VsZCBiZSBmaXhlZFxuICAgICAgZXhwZWN0KHdyaXR0ZW5Db250ZW50KS5ub3QudG9NYXRjaCgvWyBcXHRdKyQvbSk7IC8vIFRyYWlsaW5nIHdoaXRlc3BhY2Ugc2hvdWxkIGJlIHJlbW92ZWRcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Jlc3BlY3RzIGZpbGUgZXh0ZW5zaW9uIGZpbHRlcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICAgIC4uLnRlc3RDb25maWcsXG4gICAgICAgIHBhdHRlcm5CYXNlZEZpeGVzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ1Rlc3QgZml4JyxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnVGVzdCBwYXR0ZXJuIGZpeCcsXG4gICAgICAgICAgICBwYXR0ZXJuOiAvdGVzdC9nLFxuICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICdmaXhlZCcsXG4gICAgICAgICAgICBmaWxlRXh0ZW5zaW9uczogWycuanMnXSwgLy8gT25seSAuanMgZmlsZXNcbiAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH07XG4gICAgICBjb25zdCBzeXN0ZW0gPSBuZXcgTGludGluZ0Zvcm1hdHRpbmdTeXN0ZW0oY29uZmlnKTtcblxuICAgICAgbW9ja0ZzLnJlYWRGaWxlU3luYy5tb2NrUmV0dXJuVmFsdWUoJ3Rlc3QgY29udGVudCcpO1xuICAgICAgbW9ja0ZzLndyaXRlRmlsZVN5bmMubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHt9KTtcblxuICAgICAgLy8gU2hvdWxkIG5vdCBhcHBseSB0byAudHMgZmlsZVxuICAgICAgY29uc3QgZml4ZXNBcHBsaWVkID0gYXdhaXQgc3lzdGVtLmFwcGx5UGF0dGVybkJhc2VkRml4ZXMoW1xuICAgICAgICAndGVzdC1maWxlLnRzJyxcbiAgICAgIF0pO1xuICAgICAgZXhwZWN0KGZpeGVzQXBwbGllZCkudG9CZSgwKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3NraXBzIGRpc2FibGVkIHBhdHRlcm4gZml4ZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICAgIC4uLnRlc3RDb25maWcsXG4gICAgICAgIHBhdHRlcm5CYXNlZEZpeGVzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ0Rpc2FibGVkIGZpeCcsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1RoaXMgZml4IGlzIGRpc2FibGVkJyxcbiAgICAgICAgICAgIHBhdHRlcm46IC90ZXN0L2csXG4gICAgICAgICAgICByZXBsYWNlbWVudDogJ2ZpeGVkJyxcbiAgICAgICAgICAgIGZpbGVFeHRlbnNpb25zOiBbJy50cyddLFxuICAgICAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH07XG4gICAgICBjb25zdCBzeXN0ZW0gPSBuZXcgTGludGluZ0Zvcm1hdHRpbmdTeXN0ZW0oY29uZmlnKTtcblxuICAgICAgbW9ja0ZzLnJlYWRGaWxlU3luYy5tb2NrUmV0dXJuVmFsdWUoJ3Rlc3QgY29udGVudCcpO1xuXG4gICAgICBjb25zdCBmaXhlc0FwcGxpZWQgPSBhd2FpdCBzeXN0ZW0uYXBwbHlQYXR0ZXJuQmFzZWRGaXhlcyhbXG4gICAgICAgICd0ZXN0LWZpbGUudHMnLFxuICAgICAgXSk7XG4gICAgICBleHBlY3QoZml4ZXNBcHBsaWVkKS50b0JlKDApO1xuICAgICAgZXhwZWN0KG1vY2tGcy53cml0ZUZpbGVTeW5jKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZW5mb3JjZVN0eWxlR3VpZGVDb21wbGlhbmNlJywgKCkgPT4ge1xuICAgIHRlc3QoJ2VuZm9yY2VzIGNvbnNpc3RlbnQgaW5kZW50YXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBvcmlnaW5hbENvbnRlbnQgPSBgXG5cXHRmdW5jdGlvbiB0ZXN0KCkge1xuXFx0XFx0cmV0dXJuIHRydWU7XG5cXHR9XG5gO1xuXG4gICAgICBjb25zdCBleHBlY3RlZENvbnRlbnQgPSBgXG4gIGZ1bmN0aW9uIHRlc3QoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbmA7XG5cbiAgICAgIG1vY2tGcy5yZWFkRmlsZVN5bmMubW9ja1JldHVyblZhbHVlKG9yaWdpbmFsQ29udGVudCk7XG4gICAgICBsZXQgd3JpdHRlbkNvbnRlbnQgPSAnJztcbiAgICAgIG1vY2tGcy53cml0ZUZpbGVTeW5jLm1vY2tJbXBsZW1lbnRhdGlvbigocGF0aCwgY29udGVudCkgPT4ge1xuICAgICAgICB3cml0dGVuQ29udGVudCA9IGNvbnRlbnQgYXMgc3RyaW5nO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGZpeGVzQXBwbGllZCA9XG4gICAgICAgIGF3YWl0IGxpbnRpbmdGb3JtYXR0aW5nU3lzdGVtLmVuZm9yY2VTdHlsZUd1aWRlQ29tcGxpYW5jZShbXG4gICAgICAgICAgJ3Rlc3QtZmlsZS50cycsXG4gICAgICAgIF0pO1xuXG4gICAgICBleHBlY3QoZml4ZXNBcHBsaWVkKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgICBleHBlY3Qod3JpdHRlbkNvbnRlbnQpLm5vdC50b0NvbnRhaW4oJ1xcdCcpO1xuICAgICAgZXhwZWN0KHdyaXR0ZW5Db250ZW50KS50b0NvbnRhaW4oJyAgJyk7IC8vIFNob3VsZCB1c2Ugc3BhY2VzXG4gICAgfSk7XG5cbiAgICB0ZXN0KCdlbmZvcmNlcyB0cmFpbGluZyBjb21tYXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBvcmlnaW5hbENvbnRlbnQgPSBgXG5jb25zdCBvYmogPSB7XG4gIGE6IDEsXG4gIGI6IDJcbn07XG5gO1xuXG4gICAgICBtb2NrRnMucmVhZEZpbGVTeW5jLm1vY2tSZXR1cm5WYWx1ZShvcmlnaW5hbENvbnRlbnQpO1xuICAgICAgbGV0IHdyaXR0ZW5Db250ZW50ID0gJyc7XG4gICAgICBtb2NrRnMud3JpdGVGaWxlU3luYy5tb2NrSW1wbGVtZW50YXRpb24oKHBhdGgsIGNvbnRlbnQpID0+IHtcbiAgICAgICAgd3JpdHRlbkNvbnRlbnQgPSBjb250ZW50IGFzIHN0cmluZztcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBmaXhlc0FwcGxpZWQgPVxuICAgICAgICBhd2FpdCBsaW50aW5nRm9ybWF0dGluZ1N5c3RlbS5lbmZvcmNlU3R5bGVHdWlkZUNvbXBsaWFuY2UoW1xuICAgICAgICAgICd0ZXN0LWZpbGUudHMnLFxuICAgICAgICBdKTtcblxuICAgICAgZXhwZWN0KGZpeGVzQXBwbGllZCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgICAgZXhwZWN0KHdyaXR0ZW5Db250ZW50KS50b0NvbnRhaW4oJ2I6IDIsJyk7IC8vIFNob3VsZCBhZGQgdHJhaWxpbmcgY29tbWFcbiAgICB9KTtcblxuICAgIHRlc3QoJ2VuZm9yY2VzIHNlbWljb2xvbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBvcmlnaW5hbENvbnRlbnQgPSBgXG5jb25zdCB4ID0gMVxuY29uc3QgeSA9IDJcbnJldHVybiB4ICsgeVxuYDtcblxuICAgICAgbW9ja0ZzLnJlYWRGaWxlU3luYy5tb2NrUmV0dXJuVmFsdWUob3JpZ2luYWxDb250ZW50KTtcbiAgICAgIGxldCB3cml0dGVuQ29udGVudCA9ICcnO1xuICAgICAgbW9ja0ZzLndyaXRlRmlsZVN5bmMubW9ja0ltcGxlbWVudGF0aW9uKChwYXRoLCBjb250ZW50KSA9PiB7XG4gICAgICAgIHdyaXR0ZW5Db250ZW50ID0gY29udGVudCBhcyBzdHJpbmc7XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgZml4ZXNBcHBsaWVkID1cbiAgICAgICAgYXdhaXQgbGludGluZ0Zvcm1hdHRpbmdTeXN0ZW0uZW5mb3JjZVN0eWxlR3VpZGVDb21wbGlhbmNlKFtcbiAgICAgICAgICAndGVzdC1maWxlLnRzJyxcbiAgICAgICAgXSk7XG5cbiAgICAgIGV4cGVjdChmaXhlc0FwcGxpZWQpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICAgIGV4cGVjdCh3cml0dGVuQ29udGVudCkudG9Db250YWluKCdjb25zdCB4ID0gMTsnKTtcbiAgICAgIGV4cGVjdCh3cml0dGVuQ29udGVudCkudG9Db250YWluKCdjb25zdCB5ID0gMjsnKTtcbiAgICAgIGV4cGVjdCh3cml0dGVuQ29udGVudCkudG9Db250YWluKCdyZXR1cm4geCArIHk7Jyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdlbmZvcmNlcyBxdW90ZSBzdHlsZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgICAgLi4udGVzdENvbmZpZyxcbiAgICAgICAgZm9ybWF0dGluZ1J1bGVzOiB7XG4gICAgICAgICAgLi4udGVzdENvbmZpZy5mb3JtYXR0aW5nUnVsZXMsXG4gICAgICAgICAgZW5mb3JjZVF1b3RlU3R5bGU6ICdzaW5nbGUnIGFzIGNvbnN0LFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICAgIGNvbnN0IHN5c3RlbSA9IG5ldyBMaW50aW5nRm9ybWF0dGluZ1N5c3RlbShjb25maWcpO1xuXG4gICAgICBjb25zdCBvcmlnaW5hbENvbnRlbnQgPSBgXG5jb25zdCBtZXNzYWdlID0gXCJIZWxsbyB3b3JsZFwiO1xuY29uc3QgZ3JlZXRpbmcgPSBcIkhpIHRoZXJlXCI7XG5gO1xuXG4gICAgICBtb2NrRnMucmVhZEZpbGVTeW5jLm1vY2tSZXR1cm5WYWx1ZShvcmlnaW5hbENvbnRlbnQpO1xuICAgICAgbGV0IHdyaXR0ZW5Db250ZW50ID0gJyc7XG4gICAgICBtb2NrRnMud3JpdGVGaWxlU3luYy5tb2NrSW1wbGVtZW50YXRpb24oKHBhdGgsIGNvbnRlbnQpID0+IHtcbiAgICAgICAgd3JpdHRlbkNvbnRlbnQgPSBjb250ZW50IGFzIHN0cmluZztcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBmaXhlc0FwcGxpZWQgPSBhd2FpdCBzeXN0ZW0uZW5mb3JjZVN0eWxlR3VpZGVDb21wbGlhbmNlKFtcbiAgICAgICAgJ3Rlc3QtZmlsZS50cycsXG4gICAgICBdKTtcblxuICAgICAgZXhwZWN0KGZpeGVzQXBwbGllZCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgICAgZXhwZWN0KHdyaXR0ZW5Db250ZW50KS50b0NvbnRhaW4oXCInSGVsbG8gd29ybGQnXCIpO1xuICAgICAgZXhwZWN0KHdyaXR0ZW5Db250ZW50KS50b0NvbnRhaW4oXCInSGkgdGhlcmUnXCIpO1xuICAgICAgZXhwZWN0KHdyaXR0ZW5Db250ZW50KS5ub3QudG9Db250YWluKCdcIkhlbGxvIHdvcmxkXCInKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2V4ZWN1dGVMaW50aW5nQW5kRm9ybWF0dGluZycsICgpID0+IHtcbiAgICB0ZXN0KCdleGVjdXRlcyBjb21wbGV0ZSBsaW50aW5nIGFuZCBmb3JtYXR0aW5nIHdvcmtmbG93JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdGVzdEZpbGVzID0gWydmaWxlMS50cycsICdmaWxlMi50cyddO1xuXG4gICAgICAvLyBNb2NrIEVTTGludCBvdXRwdXRcbiAgICAgIGNvbnN0IGVzbGludE91dHB1dCA9IEpTT04uc3RyaW5naWZ5KFtcbiAgICAgICAge1xuICAgICAgICAgIGZpbGVQYXRoOiAnL3Rlc3QvZmlsZTEudHMnLFxuICAgICAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGxpbmU6IDEsXG4gICAgICAgICAgICAgIGNvbHVtbjogMTAsXG4gICAgICAgICAgICAgIHJ1bGVJZDogJ0B0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycycsXG4gICAgICAgICAgICAgIHNldmVyaXR5OiAxLFxuICAgICAgICAgICAgICBmaXg6IHt9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgXSk7XG5cbiAgICAgIG1vY2tFeGVjU3luY1xuICAgICAgICAubW9ja1JldHVyblZhbHVlT25jZSh0ZXN0RmlsZXMuam9pbignXFxuJykpIC8vIEZpbGUgbGlzdGluZ1xuICAgICAgICAubW9ja1JldHVyblZhbHVlT25jZShlc2xpbnRPdXRwdXQpIC8vIEluaXRpYWwgdmlvbGF0aW9uIGRldGVjdGlvblxuICAgICAgICAubW9ja1JldHVyblZhbHVlT25jZSgnJykgLy8gRVNMaW50IGZpeFxuICAgICAgICAubW9ja1JldHVyblZhbHVlT25jZSgnW10nKSAvLyBBZnRlciBmaXggZGV0ZWN0aW9uXG4gICAgICAgIC5tb2NrUmV0dXJuVmFsdWVPbmNlKCcnKSAvLyBQcmV0dGllciBmb3JtYXR0aW5nXG4gICAgICAgIC5tb2NrUmV0dXJuVmFsdWVPbmNlKCcnKSAvLyBCdWlsZCB2YWxpZGF0aW9uXG4gICAgICAgIC5tb2NrUmV0dXJuVmFsdWVPbmNlKCcnKSAvLyBCdWlsZCB2YWxpZGF0aW9uXG4gICAgICAgIC5tb2NrUmV0dXJuVmFsdWVPbmNlKCcnKTsgLy8gQnVpbGQgdmFsaWRhdGlvblxuXG4gICAgICBtb2NrRnMucmVhZEZpbGVTeW5jXG4gICAgICAgIC5tb2NrUmV0dXJuVmFsdWUoJ2NvbnN0IHggPSAxOycpIC8vIEZpbGUgY29udGVudCBmb3IgZm9ybWF0dGluZ1xuICAgICAgICAubW9ja1JldHVyblZhbHVlKCdjb25zdCB4ID0gMTsnKTsgLy8gRmlsZSBjb250ZW50IGFmdGVyIGZvcm1hdHRpbmdcblxuICAgICAgbW9ja0ZzLndyaXRlRmlsZVN5bmMubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHt9KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID1cbiAgICAgICAgYXdhaXQgbGludGluZ0Zvcm1hdHRpbmdTeXN0ZW0uZXhlY3V0ZUxpbnRpbmdBbmRGb3JtYXR0aW5nKHRlc3RGaWxlcyk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuZmlsZXNQcm9jZXNzZWQubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgICBleHBlY3QocmVzdWx0LmJ1aWxkVmFsaWRhdGlvblBhc3NlZCkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3JzKS50b0hhdmVMZW5ndGgoMCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdoYW5kbGVzIGJ1aWxkIHZhbGlkYXRpb24gZmFpbHVyZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB0ZXN0RmlsZXMgPSBbJ2ZpbGUxLnRzJ107XG5cbiAgICAgIG1vY2tFeGVjU3luY1xuICAgICAgICAubW9ja1JldHVyblZhbHVlT25jZSh0ZXN0RmlsZXMuam9pbignXFxuJykpIC8vIEZpbGUgbGlzdGluZ1xuICAgICAgICAubW9ja1JldHVyblZhbHVlT25jZSgnW10nKSAvLyBFU0xpbnQgb3V0cHV0XG4gICAgICAgIC5tb2NrUmV0dXJuVmFsdWVPbmNlKCcnKSAvLyBQcmV0dGllclxuICAgICAgICAubW9ja0ltcGxlbWVudGF0aW9uT25jZSgoKSA9PiB7XG4gICAgICAgICAgLy8gQnVpbGQgdmFsaWRhdGlvbiBmYWlsdXJlXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdCdWlsZCBmYWlsZWQnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIG1vY2tGcy5yZWFkRmlsZVN5bmMubW9ja1JldHVyblZhbHVlKCdjb25zdCB4ID0gMTsnKTtcbiAgICAgIG1vY2tGcy53cml0ZUZpbGVTeW5jLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7fSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9XG4gICAgICAgIGF3YWl0IGxpbnRpbmdGb3JtYXR0aW5nU3lzdGVtLmV4ZWN1dGVMaW50aW5nQW5kRm9ybWF0dGluZyh0ZXN0RmlsZXMpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmJ1aWxkVmFsaWRhdGlvblBhc3NlZCkudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzdWx0LmVycm9ycy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Byb2Nlc3NlcyBmaWxlcyBpbiBiYXRjaGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdGVzdEZpbGVzID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogMTIgfSwgKF8sIGkpID0+IGBmaWxlJHtpfS50c2ApO1xuICAgICAgY29uc3QgYmF0Y2hTaXplID0gNTtcblxuICAgICAgY29uc3QgY29uZmlnID0geyAuLi50ZXN0Q29uZmlnLCBtYXhGaWxlc1BlckJhdGNoOiBiYXRjaFNpemUgfTtcbiAgICAgIGNvbnN0IHN5c3RlbSA9IG5ldyBMaW50aW5nRm9ybWF0dGluZ1N5c3RlbShjb25maWcpO1xuXG4gICAgICBtb2NrRXhlY1N5bmMubW9ja1JldHVyblZhbHVlKCdbXScpOyAvLyBFU0xpbnQgb3V0cHV0XG4gICAgICBtb2NrRnMucmVhZEZpbGVTeW5jLm1vY2tSZXR1cm5WYWx1ZSgnY29uc3QgeCA9IDE7Jyk7XG4gICAgICBtb2NrRnMud3JpdGVGaWxlU3luYy5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge30pO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzeXN0ZW0uZXhlY3V0ZUxpbnRpbmdBbmRGb3JtYXR0aW5nKHRlc3RGaWxlcyk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuZmlsZXNQcm9jZXNzZWQubGVuZ3RoKS50b0JlTGVzc1RoYW5PckVxdWFsKFxuICAgICAgICB0ZXN0RmlsZXMubGVuZ3RoXG4gICAgICApO1xuICAgICAgZXhwZWN0KHJlc3VsdC5idWlsZFZhbGlkYXRpb25QYXNzZWQpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCd2aW9sYXRpb24gYnJlYWtkb3duJywgKCkgPT4ge1xuICAgIHRlc3QoJ2NhdGVnb3JpemVzIHZpb2xhdGlvbnMgY29ycmVjdGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZXNsaW50T3V0cHV0ID0gSlNPTi5zdHJpbmdpZnkoW1xuICAgICAgICB7XG4gICAgICAgICAgZmlsZVBhdGg6ICcvdGVzdC9maWxlLnRzJyxcbiAgICAgICAgICBtZXNzYWdlczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBsaW5lOiAxLFxuICAgICAgICAgICAgICBjb2x1bW46IDEwLFxuICAgICAgICAgICAgICBydWxlSWQ6ICdAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMnLFxuICAgICAgICAgICAgICBzZXZlcml0eTogMSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGxpbmU6IDIsXG4gICAgICAgICAgICAgIGNvbHVtbjogNSxcbiAgICAgICAgICAgICAgcnVsZUlkOiAncmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzJyxcbiAgICAgICAgICAgICAgc2V2ZXJpdHk6IDEsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBsaW5lOiAzLFxuICAgICAgICAgICAgICBjb2x1bW46IDE1LFxuICAgICAgICAgICAgICBydWxlSWQ6ICdpbXBvcnQvbm8tdW5yZXNvbHZlZCcsXG4gICAgICAgICAgICAgIHNldmVyaXR5OiAxLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHsgbGluZTogNCwgY29sdW1uOiAyMCwgcnVsZUlkOiAnbm8tY29uc29sZScsIHNldmVyaXR5OiAxIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIF0pO1xuXG4gICAgICBtb2NrRXhlY1N5bmMubW9ja1JldHVyblZhbHVlKGVzbGludE91dHB1dCk7XG4gICAgICBtb2NrRnMucmVhZEZpbGVTeW5jLm1vY2tSZXR1cm5WYWx1ZSgndGVzdCBjb250ZW50Jyk7XG4gICAgICBtb2NrRnMud3JpdGVGaWxlU3luYy5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge30pO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBsaW50aW5nRm9ybWF0dGluZ1N5c3RlbS5leGVjdXRlTGludGluZ0FuZEZvcm1hdHRpbmcoW1xuICAgICAgICAndGVzdC1maWxlLnRzJyxcbiAgICAgIF0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnZpb2xhdGlvbkJyZWFrZG93bi50eXBlU2NyaXB0RXJyb3JzKS50b0JlKDEpO1xuICAgICAgZXhwZWN0KHJlc3VsdC52aW9sYXRpb25CcmVha2Rvd24ucmVhY3RWaW9sYXRpb25zKS50b0JlKDEpO1xuICAgICAgZXhwZWN0KHJlc3VsdC52aW9sYXRpb25CcmVha2Rvd24uaW1wb3J0VmlvbGF0aW9ucykudG9CZSgxKTtcbiAgICAgIGV4cGVjdChyZXN1bHQudmlvbGF0aW9uQnJlYWtkb3duLmZvcm1hdHRpbmdJc3N1ZXMpLnRvQmUoMSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdlcnJvciBoYW5kbGluZycsICgpID0+IHtcbiAgICB0ZXN0KCdoYW5kbGVzIGZpbGUgcmVhZCBlcnJvcnMgZ3JhY2VmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tGcy5yZWFkRmlsZVN5bmMubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGaWxlIG5vdCBmb3VuZCcpO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGZpeGVzQXBwbGllZCA9IGF3YWl0IGxpbnRpbmdGb3JtYXR0aW5nU3lzdGVtLmFwcGx5UGF0dGVybkJhc2VkRml4ZXMoXG4gICAgICAgIFsnbm9uZXhpc3RlbnQudHMnXVxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KGZpeGVzQXBwbGllZCkudG9CZSgwKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ2hhbmRsZXMgRVNMaW50IGV4ZWN1dGlvbiBlcnJvcnMgZ3JhY2VmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tFeGVjU3luYy5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0VTTGludCBmYWlsZWQnKTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCB2aW9sYXRpb25zID0gYXdhaXQgbGludGluZ0Zvcm1hdHRpbmdTeXN0ZW0uZGV0ZWN0TGludGluZ1Zpb2xhdGlvbnMoW1xuICAgICAgICAndGVzdC1maWxlLnRzJyxcbiAgICAgIF0pO1xuXG4gICAgICBleHBlY3QodmlvbGF0aW9ucykudG9IYXZlTGVuZ3RoKDApO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnY29udGludWVzIHByb2Nlc3Npbmcgb3RoZXIgZmlsZXMgd2hlbiBvbmUgZmFpbHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB0ZXN0RmlsZXMgPSBbJ2dvb2QudHMnLCAnYmFkLnRzJywgJ2dvb2QyLnRzJ107XG5cbiAgICAgIG1vY2tGcy5yZWFkRmlsZVN5bmNcbiAgICAgICAgLm1vY2tSZXR1cm5WYWx1ZU9uY2UoJ2NvbnN0IHggPSAxOycpIC8vIGdvb2QudHNcbiAgICAgICAgLm1vY2tJbXBsZW1lbnRhdGlvbk9uY2UoKCkgPT4ge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQmFkIGZpbGUnKTtcbiAgICAgICAgfSkgLy8gYmFkLnRzXG4gICAgICAgIC5tb2NrUmV0dXJuVmFsdWVPbmNlKCdjb25zdCB5ID0gMjsnKTsgLy8gZ29vZDIudHNcblxuICAgICAgY29uc3QgZml4ZXNBcHBsaWVkID1cbiAgICAgICAgYXdhaXQgbGludGluZ0Zvcm1hdHRpbmdTeXN0ZW0uYXBwbHlQYXR0ZXJuQmFzZWRGaXhlcyh0ZXN0RmlsZXMpO1xuXG4gICAgICAvLyBTaG91bGQgc3RpbGwgcHJvY2VzcyB0aGUgZ29vZCBmaWxlc1xuICAgICAgZXhwZWN0KGZpeGVzQXBwbGllZCkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgwKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2NvbmZpZ3VyYXRpb24gdmFsaWRhdGlvbicsICgpID0+IHtcbiAgICB0ZXN0KCd1c2VzIGRlZmF1bHQgY29uZmlndXJhdGlvbiB3aGVuIG5vdCBwcm92aWRlZCcsICgpID0+IHtcbiAgICAgIGNvbnN0IHN5c3RlbSA9IG5ldyBMaW50aW5nRm9ybWF0dGluZ1N5c3RlbShcbiAgICAgICAgREVGQVVMVF9MSU5USU5HX0ZPUk1BVFRJTkdfQ09ORklHXG4gICAgICApO1xuICAgICAgZXhwZWN0KHN5c3RlbSkudG9CZURlZmluZWQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Jlc3BlY3RzIGN1c3RvbSBjb25maWd1cmF0aW9uJywgKCkgPT4ge1xuICAgICAgY29uc3QgY3VzdG9tQ29uZmlnOiBMaW50aW5nRm9ybWF0dGluZ0NvbmZpZyA9IHtcbiAgICAgICAgbWF4RmlsZXNQZXJCYXRjaDogMTAsXG4gICAgICAgIHNhZmV0eVZhbGlkYXRpb25FbmFibGVkOiBmYWxzZSxcbiAgICAgICAgYnVpbGRWYWxpZGF0aW9uRnJlcXVlbmN5OiAzLFxuICAgICAgICBhdXRvRml4RW5hYmxlZDogZmFsc2UsXG4gICAgICAgIGZvcm1hdHRpbmdFbmFibGVkOiBmYWxzZSxcbiAgICAgICAgbGludGluZ1J1bGVzOiB7XG4gICAgICAgICAgZW5mb3JjZVR5cGVTY3JpcHRSdWxlczogZmFsc2UsXG4gICAgICAgICAgZW5mb3JjZVJlYWN0UnVsZXM6IGZhbHNlLFxuICAgICAgICAgIGVuZm9yY2VJbXBvcnRSdWxlczogZmFsc2UsXG4gICAgICAgICAgbWF4V2FybmluZ3NUaHJlc2hvbGQ6IDUwMCxcbiAgICAgICAgICBjdXN0b21SdWxlT3ZlcnJpZGVzOiB7ICduby1jb25zb2xlJzogJ29mZicgfSxcbiAgICAgICAgfSxcbiAgICAgICAgZm9ybWF0dGluZ1J1bGVzOiB7XG4gICAgICAgICAgZW5mb3JjZUNvbnNpc3RlbnRJbmRlbnRhdGlvbjogZmFsc2UsXG4gICAgICAgICAgZW5mb3JjZVRyYWlsaW5nQ29tbWFzOiBmYWxzZSxcbiAgICAgICAgICBlbmZvcmNlU2VtaWNvbG9uczogZmFsc2UsXG4gICAgICAgICAgZW5mb3JjZVF1b3RlU3R5bGU6ICdkb3VibGUnLFxuICAgICAgICAgIGVuZm9yY2VMaW5lTGVuZ3RoOiAxMjAsXG4gICAgICAgICAgZW5mb3JjZVNwYWNpbmc6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgICBwYXR0ZXJuQmFzZWRGaXhlczogW10sXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBzeXN0ZW0gPSBuZXcgTGludGluZ0Zvcm1hdHRpbmdTeXN0ZW0oY3VzdG9tQ29uZmlnKTtcbiAgICAgIGV4cGVjdChzeXN0ZW0pLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=