{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/LintingFormattingSystem.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/LintingFormattingSystem.test.ts"],"sourcesContent":["/**\n * Linting and Formatting System Tests\n * Comprehensive test suite for automated linting and formatting functionality\n */\n\nimport {\n  LintingFormattingSystem,\n  DEFAULT_LINTING_FORMATTING_CONFIG,\n  LintingFormattingConfig,\n} from './LintingFormattingSystem';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { execSync } from 'child_process';\n\n// Mock dependencies\njest.mock('fs');\njest.mock('child_process');\njest.mock('../../utils/logger');\n\nconst mockFs = fs as jest.Mocked<typeof fs>;\nconst mockExecSync = execSync as jest.MockedFunction<typeof execSync>;\n\ndescribe('LintingFormattingSystem', () => {\n  let lintingFormattingSystem: LintingFormattingSystem;\n  let testConfig: LintingFormattingConfig;\n\n  beforeEach(() => {\n    testConfig = {\n      ...DEFAULT_LINTING_FORMATTING_CONFIG,\n      maxFilesPerBatch: 5,\n      safetyValidationEnabled: true,\n    };\n    lintingFormattingSystem = new LintingFormattingSystem(testConfig);\n\n    // Reset mocks\n    jest.clearAllMocks();\n  });\n\n  describe('detectLintingViolations', () => {\n    test('detects TypeScript linting violations', async () => {\n      const eslintOutput = JSON.stringify([\n        {\n          filePath: '/test/file.ts',\n          messages: [\n            {\n              line: 1,\n              column: 10,\n              ruleId: '@typescript-eslint/no-unused-vars',\n              message: 'Variable is defined but never used',\n              severity: 1,\n              fix: { range: [0, 10], text: '' },\n            },\n            {\n              line: 5,\n              column: 15,\n              ruleId: '@typescript-eslint/no-explicit-any',\n              message: 'Unexpected any. Specify a different type.',\n              severity: 1,\n            },\n          ],\n        },\n      ]);\n\n      mockExecSync.mockReturnValue(eslintOutput);\n\n      const violations = await lintingFormattingSystem.detectLintingViolations([\n        'test-file.ts',\n      ]);\n\n      expect(violations).toHaveLength(2);\n      expect(violations[0].ruleId).toBe('@typescript-eslint/no-unused-vars');\n      expect(violations[0].fixable).toBe(true);\n      expect(violations[1].ruleId).toBe('@typescript-eslint/no-explicit-any');\n      expect(violations[1].fixable).toBe(false);\n    });\n\n    test('detects React linting violations', async () => {\n      const eslintOutput = JSON.stringify([\n        {\n          filePath: '/test/component.tsx',\n          messages: [\n            {\n              line: 10,\n              column: 5,\n              ruleId: 'react-hooks/exhaustive-deps',\n              message: 'React Hook useEffect has a missing dependency',\n              severity: 1,\n            },\n            {\n              line: 15,\n              column: 20,\n              ruleId: 'react/jsx-uses-vars',\n              message: 'Variable is used in JSX but not defined',\n              severity: 2,\n            },\n          ],\n        },\n      ]);\n\n      mockExecSync.mockReturnValue(eslintOutput);\n\n      const violations = await lintingFormattingSystem.detectLintingViolations([\n        'component.tsx',\n      ]);\n\n      expect(violations).toHaveLength(2);\n      expect(violations[0].ruleId).toBe('react-hooks/exhaustive-deps');\n      expect(violations[0].severity).toBe('warning');\n      expect(violations[1].ruleId).toBe('react/jsx-uses-vars');\n      expect(violations[1].severity).toBe('error');\n    });\n\n    test('handles ESLint parsing errors gracefully', async () => {\n      mockExecSync.mockReturnValue('invalid json output');\n\n      const violations = await lintingFormattingSystem.detectLintingViolations([\n        'test-file.ts',\n      ]);\n\n      expect(violations).toHaveLength(0);\n    });\n  });\n\n  describe('fixLintingViolations', () => {\n    test('fixes auto-fixable linting violations', async () => {\n      const beforeOutput = JSON.stringify([\n        {\n          filePath: '/test/file.ts',\n          messages: [\n            {\n              line: 1,\n              column: 10,\n              ruleId: '@typescript-eslint/no-unused-vars',\n              severity: 1,\n              fix: {},\n            },\n            {\n              line: 5,\n              column: 15,\n              ruleId: '@typescript-eslint/no-explicit-any',\n              severity: 1,\n            },\n          ],\n        },\n      ]);\n\n      const afterOutput = JSON.stringify([\n        {\n          filePath: '/test/file.ts',\n          messages: [\n            {\n              line: 5,\n              column: 15,\n              ruleId: '@typescript-eslint/no-explicit-any',\n              severity: 1,\n            },\n          ],\n        },\n      ]);\n\n      mockExecSync\n        .mockReturnValueOnce(beforeOutput) // Initial detection\n        .mockReturnValueOnce('') // Fix command\n        .mockReturnValueOnce(afterOutput); // After detection\n\n      const fixedCount = await lintingFormattingSystem.fixLintingViolations([\n        'test-file.ts',\n      ]);\n\n      expect(fixedCount).toBe(1);\n      expect(mockExecSync).toHaveBeenCalledWith(\n        expect.stringContaining('--fix'),\n        expect.any(Object)\n      );\n    });\n\n    test('respects auto-fix disabled configuration', async () => {\n      const config = { ...testConfig, autoFixEnabled: false };\n      const system = new LintingFormattingSystem(config);\n\n      const fixedCount = await system.fixLintingViolations(['test-file.ts']);\n\n      expect(fixedCount).toBe(0);\n      expect(mockExecSync).not.toHaveBeenCalledWith(\n        expect.stringContaining('--fix'),\n        expect.any(Object)\n      );\n    });\n  });\n\n  describe('formatCode', () => {\n    test('formats code using Prettier', async () => {\n      const originalContent = 'const x={a:1,b:2}';\n      const formattedContent = 'const x = { a: 1, b: 2 };';\n\n      mockFs.readFileSync\n        .mockReturnValueOnce(originalContent) // Before formatting\n        .mockReturnValueOnce(formattedContent); // After formatting\n\n      mockExecSync.mockReturnValue('');\n\n      const formattedCount = await lintingFormattingSystem.formatCode([\n        'test-file.ts',\n      ]);\n\n      expect(formattedCount).toBe(1);\n      expect(mockExecSync).toHaveBeenCalledWith(\n        expect.stringContaining('prettier --write'),\n        expect.any(Object)\n      );\n    });\n\n    test('skips formatting when content unchanged', async () => {\n      const content = 'const x = { a: 1, b: 2 };';\n\n      mockFs.readFileSync\n        .mockReturnValueOnce(content) // Before formatting\n        .mockReturnValueOnce(content); // After formatting (unchanged)\n\n      mockExecSync.mockReturnValue('');\n\n      const formattedCount = await lintingFormattingSystem.formatCode([\n        'test-file.ts',\n      ]);\n\n      expect(formattedCount).toBe(0);\n    });\n\n    test('respects formatting disabled configuration', async () => {\n      const config = { ...testConfig, formattingEnabled: false };\n      const system = new LintingFormattingSystem(config);\n\n      const formattedCount = await system.formatCode(['test-file.ts']);\n\n      expect(formattedCount).toBe(0);\n      expect(mockExecSync).not.toHaveBeenCalledWith(\n        expect.stringContaining('prettier'),\n        expect.any(Object)\n      );\n    });\n  });\n\n  describe('applyPatternBasedFixes', () => {\n    test('applies enabled pattern-based fixes', async () => {\n      const originalContent = `\nconsole.log('debug message');\nconst x = 1;;\nconst y = 2;   \n`;\n\n      const expectedContent = `\n\nconst x = 1;\nconst y = 2;\n`;\n\n      mockFs.readFileSync.mockReturnValue(originalContent);\n      let writtenContent = '';\n      mockFs.writeFileSync.mockImplementation((path, content) => {\n        writtenContent = content as string;\n      });\n\n      const fixesApplied = await lintingFormattingSystem.applyPatternBasedFixes(\n        ['test-file.ts']\n      );\n\n      expect(fixesApplied).toBeGreaterThan(0);\n      expect(writtenContent).not.toContain('console.log'); // Should be removed if enabled\n      expect(writtenContent).not.toContain(';;'); // Double semicolons should be fixed\n      expect(writtenContent).not.toMatch(/[ \\t]+$/m); // Trailing whitespace should be removed\n    });\n\n    test('respects file extension filters', async () => {\n      const config = {\n        ...testConfig,\n        patternBasedFixes: [\n          {\n            name: 'Test fix',\n            description: 'Test pattern fix',\n            pattern: /test/g,\n            replacement: 'fixed',\n            fileExtensions: ['.js'], // Only .js files\n            enabled: true,\n          },\n        ],\n      };\n      const system = new LintingFormattingSystem(config);\n\n      mockFs.readFileSync.mockReturnValue('test content');\n      mockFs.writeFileSync.mockImplementation(() => {});\n\n      // Should not apply to .ts file\n      const fixesApplied = await system.applyPatternBasedFixes([\n        'test-file.ts',\n      ]);\n      expect(fixesApplied).toBe(0);\n    });\n\n    test('skips disabled pattern fixes', async () => {\n      const config = {\n        ...testConfig,\n        patternBasedFixes: [\n          {\n            name: 'Disabled fix',\n            description: 'This fix is disabled',\n            pattern: /test/g,\n            replacement: 'fixed',\n            fileExtensions: ['.ts'],\n            enabled: false,\n          },\n        ],\n      };\n      const system = new LintingFormattingSystem(config);\n\n      mockFs.readFileSync.mockReturnValue('test content');\n\n      const fixesApplied = await system.applyPatternBasedFixes([\n        'test-file.ts',\n      ]);\n      expect(fixesApplied).toBe(0);\n      expect(mockFs.writeFileSync).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('enforceStyleGuideCompliance', () => {\n    test('enforces consistent indentation', async () => {\n      const originalContent = `\n\\tfunction test() {\n\\t\\treturn true;\n\\t}\n`;\n\n      const expectedContent = `\n  function test() {\n    return true;\n  }\n`;\n\n      mockFs.readFileSync.mockReturnValue(originalContent);\n      let writtenContent = '';\n      mockFs.writeFileSync.mockImplementation((path, content) => {\n        writtenContent = content as string;\n      });\n\n      const fixesApplied =\n        await lintingFormattingSystem.enforceStyleGuideCompliance([\n          'test-file.ts',\n        ]);\n\n      expect(fixesApplied).toBeGreaterThan(0);\n      expect(writtenContent).not.toContain('\\t');\n      expect(writtenContent).toContain('  '); // Should use spaces\n    });\n\n    test('enforces trailing commas', async () => {\n      const originalContent = `\nconst obj = {\n  a: 1,\n  b: 2\n};\n`;\n\n      mockFs.readFileSync.mockReturnValue(originalContent);\n      let writtenContent = '';\n      mockFs.writeFileSync.mockImplementation((path, content) => {\n        writtenContent = content as string;\n      });\n\n      const fixesApplied =\n        await lintingFormattingSystem.enforceStyleGuideCompliance([\n          'test-file.ts',\n        ]);\n\n      expect(fixesApplied).toBeGreaterThan(0);\n      expect(writtenContent).toContain('b: 2,'); // Should add trailing comma\n    });\n\n    test('enforces semicolons', async () => {\n      const originalContent = `\nconst x = 1\nconst y = 2\nreturn x + y\n`;\n\n      mockFs.readFileSync.mockReturnValue(originalContent);\n      let writtenContent = '';\n      mockFs.writeFileSync.mockImplementation((path, content) => {\n        writtenContent = content as string;\n      });\n\n      const fixesApplied =\n        await lintingFormattingSystem.enforceStyleGuideCompliance([\n          'test-file.ts',\n        ]);\n\n      expect(fixesApplied).toBeGreaterThan(0);\n      expect(writtenContent).toContain('const x = 1;');\n      expect(writtenContent).toContain('const y = 2;');\n      expect(writtenContent).toContain('return x + y;');\n    });\n\n    test('enforces quote style', async () => {\n      const config = {\n        ...testConfig,\n        formattingRules: {\n          ...testConfig.formattingRules,\n          enforceQuoteStyle: 'single' as const,\n        },\n      };\n      const system = new LintingFormattingSystem(config);\n\n      const originalContent = `\nconst message = \"Hello world\";\nconst greeting = \"Hi there\";\n`;\n\n      mockFs.readFileSync.mockReturnValue(originalContent);\n      let writtenContent = '';\n      mockFs.writeFileSync.mockImplementation((path, content) => {\n        writtenContent = content as string;\n      });\n\n      const fixesApplied = await system.enforceStyleGuideCompliance([\n        'test-file.ts',\n      ]);\n\n      expect(fixesApplied).toBeGreaterThan(0);\n      expect(writtenContent).toContain(\"'Hello world'\");\n      expect(writtenContent).toContain(\"'Hi there'\");\n      expect(writtenContent).not.toContain('\"Hello world\"');\n    });\n  });\n\n  describe('executeLintingAndFormatting', () => {\n    test('executes complete linting and formatting workflow', async () => {\n      const testFiles = ['file1.ts', 'file2.ts'];\n\n      // Mock ESLint output\n      const eslintOutput = JSON.stringify([\n        {\n          filePath: '/test/file1.ts',\n          messages: [\n            {\n              line: 1,\n              column: 10,\n              ruleId: '@typescript-eslint/no-unused-vars',\n              severity: 1,\n              fix: {},\n            },\n          ],\n        },\n      ]);\n\n      mockExecSync\n        .mockReturnValueOnce(testFiles.join('\\n')) // File listing\n        .mockReturnValueOnce(eslintOutput) // Initial violation detection\n        .mockReturnValueOnce('') // ESLint fix\n        .mockReturnValueOnce('[]') // After fix detection\n        .mockReturnValueOnce('') // Prettier formatting\n        .mockReturnValueOnce('') // Build validation\n        .mockReturnValueOnce('') // Build validation\n        .mockReturnValueOnce(''); // Build validation\n\n      mockFs.readFileSync\n        .mockReturnValue('const x = 1;') // File content for formatting\n        .mockReturnValue('const x = 1;'); // File content after formatting\n\n      mockFs.writeFileSync.mockImplementation(() => {});\n\n      const result =\n        await lintingFormattingSystem.executeLintingAndFormatting(testFiles);\n\n      expect(result.filesProcessed.length).toBeGreaterThan(0);\n      expect(result.buildValidationPassed).toBe(true);\n      expect(result.errors).toHaveLength(0);\n    });\n\n    test('handles build validation failures', async () => {\n      const testFiles = ['file1.ts'];\n\n      mockExecSync\n        .mockReturnValueOnce(testFiles.join('\\n')) // File listing\n        .mockReturnValueOnce('[]') // ESLint output\n        .mockReturnValueOnce('') // Prettier\n        .mockImplementationOnce(() => {\n          // Build validation failure\n          throw new Error('Build failed');\n        });\n\n      mockFs.readFileSync.mockReturnValue('const x = 1;');\n      mockFs.writeFileSync.mockImplementation(() => {});\n\n      const result =\n        await lintingFormattingSystem.executeLintingAndFormatting(testFiles);\n\n      expect(result.buildValidationPassed).toBe(false);\n      expect(result.errors.length).toBeGreaterThan(0);\n    });\n\n    test('processes files in batches', async () => {\n      const testFiles = Array.from({ length: 12 }, (_, i) => `file${i}.ts`);\n      const batchSize = 5;\n\n      const config = { ...testConfig, maxFilesPerBatch: batchSize };\n      const system = new LintingFormattingSystem(config);\n\n      mockExecSync.mockReturnValue('[]'); // ESLint output\n      mockFs.readFileSync.mockReturnValue('const x = 1;');\n      mockFs.writeFileSync.mockImplementation(() => {});\n\n      const result = await system.executeLintingAndFormatting(testFiles);\n\n      expect(result.filesProcessed.length).toBeLessThanOrEqual(\n        testFiles.length\n      );\n      expect(result.buildValidationPassed).toBe(true);\n    });\n  });\n\n  describe('violation breakdown', () => {\n    test('categorizes violations correctly', async () => {\n      const eslintOutput = JSON.stringify([\n        {\n          filePath: '/test/file.ts',\n          messages: [\n            {\n              line: 1,\n              column: 10,\n              ruleId: '@typescript-eslint/no-unused-vars',\n              severity: 1,\n            },\n            {\n              line: 2,\n              column: 5,\n              ruleId: 'react-hooks/exhaustive-deps',\n              severity: 1,\n            },\n            {\n              line: 3,\n              column: 15,\n              ruleId: 'import/no-unresolved',\n              severity: 1,\n            },\n            { line: 4, column: 20, ruleId: 'no-console', severity: 1 },\n          ],\n        },\n      ]);\n\n      mockExecSync.mockReturnValue(eslintOutput);\n      mockFs.readFileSync.mockReturnValue('test content');\n      mockFs.writeFileSync.mockImplementation(() => {});\n\n      const result = await lintingFormattingSystem.executeLintingAndFormatting([\n        'test-file.ts',\n      ]);\n\n      expect(result.violationBreakdown.typeScriptErrors).toBe(1);\n      expect(result.violationBreakdown.reactViolations).toBe(1);\n      expect(result.violationBreakdown.importViolations).toBe(1);\n      expect(result.violationBreakdown.formattingIssues).toBe(1);\n    });\n  });\n\n  describe('error handling', () => {\n    test('handles file read errors gracefully', async () => {\n      mockFs.readFileSync.mockImplementation(() => {\n        throw new Error('File not found');\n      });\n\n      const fixesApplied = await lintingFormattingSystem.applyPatternBasedFixes(\n        ['nonexistent.ts']\n      );\n\n      expect(fixesApplied).toBe(0);\n    });\n\n    test('handles ESLint execution errors gracefully', async () => {\n      mockExecSync.mockImplementation(() => {\n        throw new Error('ESLint failed');\n      });\n\n      const violations = await lintingFormattingSystem.detectLintingViolations([\n        'test-file.ts',\n      ]);\n\n      expect(violations).toHaveLength(0);\n    });\n\n    test('continues processing other files when one fails', async () => {\n      const testFiles = ['good.ts', 'bad.ts', 'good2.ts'];\n\n      mockFs.readFileSync\n        .mockReturnValueOnce('const x = 1;') // good.ts\n        .mockImplementationOnce(() => {\n          throw new Error('Bad file');\n        }) // bad.ts\n        .mockReturnValueOnce('const y = 2;'); // good2.ts\n\n      const fixesApplied =\n        await lintingFormattingSystem.applyPatternBasedFixes(testFiles);\n\n      // Should still process the good files\n      expect(fixesApplied).toBeGreaterThanOrEqual(0);\n    });\n  });\n\n  describe('configuration validation', () => {\n    test('uses default configuration when not provided', () => {\n      const system = new LintingFormattingSystem(\n        DEFAULT_LINTING_FORMATTING_CONFIG\n      );\n      expect(system).toBeDefined();\n    });\n\n    test('respects custom configuration', () => {\n      const customConfig: LintingFormattingConfig = {\n        maxFilesPerBatch: 10,\n        safetyValidationEnabled: false,\n        buildValidationFrequency: 3,\n        autoFixEnabled: false,\n        formattingEnabled: false,\n        lintingRules: {\n          enforceTypeScriptRules: false,\n          enforceReactRules: false,\n          enforceImportRules: false,\n          maxWarningsThreshold: 500,\n          customRuleOverrides: { 'no-console': 'off' },\n        },\n        formattingRules: {\n          enforceConsistentIndentation: false,\n          enforceTrailingCommas: false,\n          enforceSemicolons: false,\n          enforceQuoteStyle: 'double',\n          enforceLineLength: 120,\n          enforceSpacing: false,\n        },\n        patternBasedFixes: [],\n      };\n\n      const system = new LintingFormattingSystem(customConfig);\n      expect(system).toBeDefined();\n    });\n  });\n});\n"],"version":3}