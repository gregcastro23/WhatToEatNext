bd14ad80bd297f0aaea4ab48a8add9ce
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateOrDefault = exports.logUnexpectedValue = exports.isElementalPropertyKey = exports.isElementalProperties = exports.validateRecipe = exports.recipeSchema = void 0;
const zod_1 = require("zod");
exports.recipeSchema = zod_1.z.object({
    name: zod_1.z.string().min(1),
    description: zod_1.z.string().optional(),
    cuisine: zod_1.z.string().optional(),
    regionalCuisine: zod_1.z.string().optional(),
    ingredients: zod_1.z.array(zod_1.z.object({
        name: zod_1.z.string(),
        amount: zod_1.z.string(),
        unit: zod_1.z.string(),
        category: zod_1.z.string(),
    })),
    mealType: zod_1.z.array(zod_1.z.string()),
    season: zod_1.z.array(zod_1.z.string()).optional(),
    timeToMake: zod_1.z.string(),
    elementalProperties: zod_1.z.object({
        Fire: zod_1.z.number(),
        Earth: zod_1.z.number(),
        Air: zod_1.z.number(),
        Water: zod_1.z.number(),
    }).optional(),
    properties: zod_1.z.object({
        light: zod_1.z.boolean().optional(),
        festive: zod_1.z.boolean().optional(),
        grounding: zod_1.z.boolean().optional(),
        comforting: zod_1.z.boolean().optional(),
        luxurious: zod_1.z.boolean().optional(),
        transformative: zod_1.z.boolean().optional(),
    }).optional(),
    nutrition: zod_1.z.object({
        calories: zod_1.z.number().optional(),
        protein: zod_1.z.number().optional(),
        balanced: zod_1.z.boolean().optional(),
    }).optional(),
    traditional: zod_1.z.number().optional(),
    popularity: zod_1.z.number().optional(),
});
function validateRecipe(recipe) {
    return exports.recipeSchema.safeParse(recipe);
}
exports.validateRecipe = validateRecipe;
// Re-export validation functions from elemental utilities
var elementalUtils_1 = require("./elemental/elementalUtils");
Object.defineProperty(exports, "isElementalProperties", { enumerable: true, get: function () { return elementalUtils_1.isElementalProperties; } });
// Type guard to check if a string is a valid elemental property key
function isElementalPropertyKey(key) {
    return typeof key === 'string' && ['Fire', 'Water', 'Earth', 'Air'].includes(key);
}
exports.isElementalPropertyKey = isElementalPropertyKey;
// Logs unexpected values for debugging purposes
function logUnexpectedValue(context, details) {
    console.warn(`Unexpected value in ${context}:`, details);
}
exports.logUnexpectedValue = logUnexpectedValue;
/**
 * Validates and provides default values for any type
 * @param value The value to validate
 * @param defaultValue The default value to use if validation fails
 * @param validator Optional validation function
 * @returns The validated value or default
 */
function validateOrDefault(value, defaultValue, validator) {
    try {
        // If no validator provided, just check if value is not null/undefined
        if (!validator) {
            return value !== null && value !== undefined ? value : defaultValue;
        }
        // Use the provided validator
        return validator(value) ? value : defaultValue;
    }
    catch (error) {
        logUnexpectedValue('validateOrDefault', { value, error });
        return defaultValue;
    }
}
exports.validateOrDefault = validateOrDefault;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy91dGlscy92YWxpZGF0aW9uLnRzIiwibWFwcGluZ3MiOiI7OztBQUFBLDZCQUF3QjtBQUlYLFFBQUEsWUFBWSxHQUFHLE9BQUMsQ0FBQyxNQUFNLENBQUM7SUFDbkMsSUFBSSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3ZCLFdBQVcsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQ2xDLE9BQU8sRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQzlCLGVBQWUsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQ3RDLFdBQVcsRUFBRSxPQUFDLENBQUMsS0FBSyxDQUFDLE9BQUMsQ0FBQyxNQUFNLENBQUM7UUFDNUIsSUFBSSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUU7UUFDaEIsTUFBTSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUU7UUFDbEIsSUFBSSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUU7UUFDaEIsUUFBUSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUU7S0FDckIsQ0FBQyxDQUFDO0lBQ0gsUUFBUSxFQUFFLE9BQUMsQ0FBQyxLQUFLLENBQUMsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzdCLE1BQU0sRUFBRSxPQUFDLENBQUMsS0FBSyxDQUFDLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRTtJQUN0QyxVQUFVLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRTtJQUN0QixtQkFBbUIsRUFBRSxPQUFDLENBQUMsTUFBTSxDQUFDO1FBQzVCLElBQUksRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFO1FBQ2hCLEtBQUssRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFO1FBQ2pCLEdBQUcsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFO1FBQ2YsS0FBSyxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUU7S0FDbEIsQ0FBQyxDQUFDLFFBQVEsRUFBRTtJQUNiLFVBQVUsRUFBRSxPQUFDLENBQUMsTUFBTSxDQUFDO1FBQ25CLEtBQUssRUFBRSxPQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFO1FBQzdCLE9BQU8sRUFBRSxPQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFO1FBQy9CLFNBQVMsRUFBRSxPQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFO1FBQ2pDLFVBQVUsRUFBRSxPQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFO1FBQ2xDLFNBQVMsRUFBRSxPQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFO1FBQ2pDLGNBQWMsRUFBRSxPQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFO0tBQ3ZDLENBQUMsQ0FBQyxRQUFRLEVBQUU7SUFDYixTQUFTLEVBQUUsT0FBQyxDQUFDLE1BQU0sQ0FBQztRQUNsQixRQUFRLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtRQUMvQixPQUFPLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtRQUM5QixRQUFRLEVBQUUsT0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsRUFBRTtLQUNqQyxDQUFDLENBQUMsUUFBUSxFQUFFO0lBQ2IsV0FBVyxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7SUFDbEMsVUFBVSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7Q0FDbEMsQ0FBQyxDQUFDO0FBRUgsU0FBZ0IsY0FBYyxDQUFDLE1BQWM7SUFDM0MsT0FBTyxvQkFBWSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4QyxDQUFDO0FBRkQsd0NBRUM7QUFFRCwwREFBMEQ7QUFDMUQsNkRBQW1FO0FBQTFELHVIQUFBLHFCQUFxQixPQUFBO0FBRTlCLG9FQUFvRTtBQUNwRSxTQUFnQixzQkFBc0IsQ0FBQyxHQUFZO0lBQ2pELE9BQU8sT0FBTyxHQUFHLEtBQUssUUFBUSxJQUFJLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3BGLENBQUM7QUFGRCx3REFFQztBQUVELGdEQUFnRDtBQUNoRCxTQUFnQixrQkFBa0IsQ0FBQyxPQUFlLEVBQUUsT0FBZ0I7SUFDbEUsT0FBTyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsT0FBTyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDM0QsQ0FBQztBQUZELGdEQUVDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsU0FBZ0IsaUJBQWlCLENBQy9CLEtBQWMsRUFDZCxZQUFlLEVBQ2YsU0FBc0M7SUFFdEMsSUFBSTtRQUNGLHNFQUFzRTtRQUN0RSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2QsT0FBTyxLQUFLLEtBQUssSUFBSSxJQUFJLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFFLEtBQVcsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO1NBQzVFO1FBRUQsNkJBQTZCO1FBQzdCLE9BQU8sU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQztLQUNoRDtJQUFDLE9BQU8sS0FBSyxFQUFFO1FBQ2Qsa0JBQWtCLENBQUMsbUJBQW1CLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUMxRCxPQUFPLFlBQVksQ0FBQztLQUNyQjtBQUNILENBQUM7QUFqQkQsOENBaUJDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9HcmVnQ2FzdHJvL0Rlc2t0b3AvV2hhdFRvRWF0TmV4dC9zcmMvdXRpbHMvdmFsaWRhdGlvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB6IH0gZnJvbSAnem9kJztcblxuaW1wb3J0IHR5cGUgeyBSZWNpcGUgfSBmcm9tICdAL3R5cGVzL3JlY2lwZSc7XG5cbmV4cG9ydCBjb25zdCByZWNpcGVTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIG5hbWU6IHouc3RyaW5nKCkubWluKDEpLFxuICBkZXNjcmlwdGlvbjogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICBjdWlzaW5lOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIHJlZ2lvbmFsQ3Vpc2luZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICBpbmdyZWRpZW50czogei5hcnJheSh6Lm9iamVjdCh7XG4gICAgbmFtZTogei5zdHJpbmcoKSxcbiAgICBhbW91bnQ6IHouc3RyaW5nKCksXG4gICAgdW5pdDogei5zdHJpbmcoKSxcbiAgICBjYXRlZ29yeTogei5zdHJpbmcoKSxcbiAgfSkpLFxuICBtZWFsVHlwZTogei5hcnJheSh6LnN0cmluZygpKSxcbiAgc2Vhc29uOiB6LmFycmF5KHouc3RyaW5nKCkpLm9wdGlvbmFsKCksXG4gIHRpbWVUb01ha2U6IHouc3RyaW5nKCksXG4gIGVsZW1lbnRhbFByb3BlcnRpZXM6IHoub2JqZWN0KHtcbiAgICBGaXJlOiB6Lm51bWJlcigpLFxuICAgIEVhcnRoOiB6Lm51bWJlcigpLFxuICAgIEFpcjogei5udW1iZXIoKSxcbiAgICBXYXRlcjogei5udW1iZXIoKSxcbiAgfSkub3B0aW9uYWwoKSxcbiAgcHJvcGVydGllczogei5vYmplY3Qoe1xuICAgIGxpZ2h0OiB6LmJvb2xlYW4oKS5vcHRpb25hbCgpLFxuICAgIGZlc3RpdmU6IHouYm9vbGVhbigpLm9wdGlvbmFsKCksXG4gICAgZ3JvdW5kaW5nOiB6LmJvb2xlYW4oKS5vcHRpb25hbCgpLFxuICAgIGNvbWZvcnRpbmc6IHouYm9vbGVhbigpLm9wdGlvbmFsKCksXG4gICAgbHV4dXJpb3VzOiB6LmJvb2xlYW4oKS5vcHRpb25hbCgpLFxuICAgIHRyYW5zZm9ybWF0aXZlOiB6LmJvb2xlYW4oKS5vcHRpb25hbCgpLFxuICB9KS5vcHRpb25hbCgpLFxuICBudXRyaXRpb246IHoub2JqZWN0KHtcbiAgICBjYWxvcmllczogei5udW1iZXIoKS5vcHRpb25hbCgpLFxuICAgIHByb3RlaW46IHoubnVtYmVyKCkub3B0aW9uYWwoKSxcbiAgICBiYWxhbmNlZDogei5ib29sZWFuKCkub3B0aW9uYWwoKSxcbiAgfSkub3B0aW9uYWwoKSxcbiAgdHJhZGl0aW9uYWw6IHoubnVtYmVyKCkub3B0aW9uYWwoKSxcbiAgcG9wdWxhcml0eTogei5udW1iZXIoKS5vcHRpb25hbCgpLFxufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVJlY2lwZShyZWNpcGU6IFJlY2lwZSkge1xuICByZXR1cm4gcmVjaXBlU2NoZW1hLnNhZmVQYXJzZShyZWNpcGUpO1xufVxuXG4vLyBSZS1leHBvcnQgdmFsaWRhdGlvbiBmdW5jdGlvbnMgZnJvbSBlbGVtZW50YWwgdXRpbGl0aWVzXG5leHBvcnQgeyBpc0VsZW1lbnRhbFByb3BlcnRpZXMgfSBmcm9tICcuL2VsZW1lbnRhbC9lbGVtZW50YWxVdGlscyc7XG5cbi8vIFR5cGUgZ3VhcmQgdG8gY2hlY2sgaWYgYSBzdHJpbmcgaXMgYSB2YWxpZCBlbGVtZW50YWwgcHJvcGVydHkga2V5XG5leHBvcnQgZnVuY3Rpb24gaXNFbGVtZW50YWxQcm9wZXJ0eUtleShrZXk6IHVua25vd24pOiBrZXkgaXMga2V5b2YgaW1wb3J0KCdAL3R5cGVzL2FsY2hlbXknKS5FbGVtZW50YWxQcm9wZXJ0aWVzIHtcbiAgcmV0dXJuIHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIFsnRmlyZScsICdXYXRlcicsICdFYXJ0aCcsICdBaXInXS5pbmNsdWRlcyhrZXkpO1xufVxuXG4vLyBMb2dzIHVuZXhwZWN0ZWQgdmFsdWVzIGZvciBkZWJ1Z2dpbmcgcHVycG9zZXNcbmV4cG9ydCBmdW5jdGlvbiBsb2dVbmV4cGVjdGVkVmFsdWUoY29udGV4dDogc3RyaW5nLCBkZXRhaWxzOiB1bmtub3duKTogdm9pZCB7XG4gIGNvbnNvbGUud2FybihgVW5leHBlY3RlZCB2YWx1ZSBpbiAke2NvbnRleHR9OmAsIGRldGFpbHMpO1xufVxuXG4vKipcbiAqIFZhbGlkYXRlcyBhbmQgcHJvdmlkZXMgZGVmYXVsdCB2YWx1ZXMgZm9yIGFueSB0eXBlXG4gKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIHZhbGlkYXRlXG4gKiBAcGFyYW0gZGVmYXVsdFZhbHVlIFRoZSBkZWZhdWx0IHZhbHVlIHRvIHVzZSBpZiB2YWxpZGF0aW9uIGZhaWxzXG4gKiBAcGFyYW0gdmFsaWRhdG9yIE9wdGlvbmFsIHZhbGlkYXRpb24gZnVuY3Rpb25cbiAqIEByZXR1cm5zIFRoZSB2YWxpZGF0ZWQgdmFsdWUgb3IgZGVmYXVsdFxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVPckRlZmF1bHQ8VD4oXG4gIHZhbHVlOiB1bmtub3duLFxuICBkZWZhdWx0VmFsdWU6IFQsXG4gIHZhbGlkYXRvcj86ICh2YWw6IHVua25vd24pID0+IHZhbCBpcyBUXG4pOiBUIHtcbiAgdHJ5IHtcbiAgICAvLyBJZiBubyB2YWxpZGF0b3IgcHJvdmlkZWQsIGp1c3QgY2hlY2sgaWYgdmFsdWUgaXMgbm90IG51bGwvdW5kZWZpbmVkXG4gICAgaWYgKCF2YWxpZGF0b3IpIHtcbiAgICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gKHZhbHVlIGFzIFQpIDogZGVmYXVsdFZhbHVlO1xuICAgIH1cbiAgICBcbiAgICAvLyBVc2UgdGhlIHByb3ZpZGVkIHZhbGlkYXRvclxuICAgIHJldHVybiB2YWxpZGF0b3IodmFsdWUpID8gdmFsdWUgOiBkZWZhdWx0VmFsdWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgbG9nVW5leHBlY3RlZFZhbHVlKCd2YWxpZGF0ZU9yRGVmYXVsdCcsIHsgdmFsdWUsIGVycm9yIH0pO1xuICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gIH1cbn0gIl0sInZlcnNpb24iOjN9