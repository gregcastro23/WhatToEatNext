7378c78f72449b1a65f1eb9fa97f3ae1
"use strict";
/**
 * Tests for DocumentationQualityAssurance
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock dependencies
jest.mock('fs/promises');
jest.mock('glob');
const fs = __importStar(require("fs/promises"));
const glob_1 = require("glob");
const DocumentationQualityAssurance_1 = require("../DocumentationQualityAssurance");
const types_1 = require("../types");
const mockFs = fs;
const mockGlob = glob_1.glob;
describe('DocumentationQualityAssurance', () => {
    let qas;
    let mockConfig;
    beforeEach(() => {
        mockConfig = {
            sourceDirectories: ['src'],
            excludePatterns: ['**/*.test.ts'],
            minimumCommentLength: 20,
            requiredKeywords: ['intentionally', 'deliberately'],
            qualityThresholds: {
                excellent: 90,
                good: 70,
                fair: 50
            }
        };
        qas = new DocumentationQualityAssurance_1.DocumentationQualityAssurance(mockConfig);
        // Reset mocks
        jest.clearAllMocks();
    });
    describe('performQualityAssurance', () => {
        it('should perform comprehensive quality assurance scan', async () => {
            const mockFiles = ['src/service.ts', 'src/component.tsx'];
            mockGlob.mockResolvedValue(mockFiles);
            const fileContent = [
                'export class Service {',
                '  // Intentionally any: External API response with dynamic structure',
                '  // eslint-disable-next-line @typescript-eslint/no-explicit-any',
                '  processData(data: any): void {',
                '    console.log(data);',
                '  }',
                '',
                '  // Poor comment',
                '  handleError(error: any): void {',
                '    console.error(error);',
                '  }',
                '',
                '  transform(input: any): any {',
                '    return input;',
                '  }',
                '}'
            ].join('\n');
            mockFs.readFile.mockResolvedValue(fileContent);
            const report = await qas.performQualityAssurance();
            expect(report.totalIntentionalAnyTypes).toBeGreaterThan(0);
            expect(report.documentationCoverage).toBeLessThan(100);
            expect(report.qualityBreakdown).toHaveProperty('poor');
            expect(report.qualityBreakdown).toHaveProperty('excellent');
            expect(Array.isArray(report.recommendations)).toBe(true);
        });
        it('should handle files with no any types', async () => {
            const mockFiles = ['src/clean.ts'];
            mockGlob.mockResolvedValue(mockFiles);
            const cleanFileContent = [
                'export class CleanService {',
                '  processData(data: string): void {',
                '    console.log(data);',
                '  }',
                '}'
            ].join('\n');
            mockFs.readFile.mockResolvedValue(cleanFileContent);
            const report = await qas.performQualityAssurance();
            expect(report.totalIntentionalAnyTypes).toBe(0);
            expect(report.documentationCoverage).toBe(100);
        });
        it('should handle file read errors gracefully', async () => {
            const mockFiles = ['src/error.ts'];
            mockGlob.mockResolvedValue(mockFiles);
            mockFs.readFile.mockRejectedValue(new Error('File not found'));
            const report = await qas.performQualityAssurance();
            expect(report).toBeDefined();
            expect(report.totalIntentionalAnyTypes).toBe(0);
        });
    });
    describe('validateDocumentationQuality', () => {
        it('should validate high-quality documentation', async () => {
            const fileContent = [
                'export class Service {',
                '  // Intentionally any: External API response requires flexible typing because structure varies',
                '  // eslint-disable-next-line @typescript-eslint/no-explicit-any -- External API compatibility',
                '  processData(data: any): void {',
                '    console.log(data);',
                '  }',
                '}'
            ].join('\n');
            mockFs.readFile.mockResolvedValue(fileContent);
            const context = {
                filePath: 'src/service.ts',
                lineNumber: 4,
                codeSnippet: 'processData(data: any): void {',
                surroundingLines: [],
                hasExistingComment: true,
                existingComment: 'Intentionally any: External API response requires flexible typing because structure varies',
                isInTestFile: false,
                domainContext: {
                    domain: types_1.CodeDomain.SERVICE,
                    intentionalityHints: [],
                    suggestedTypes: [],
                    preservationReasons: []
                }
            };
            const validation = await qas.validateDocumentationQuality(context);
            expect(validation.hasComment).toBe(true);
            expect(validation.commentQuality).toBe('excellent');
            expect(validation.hasEslintDisable).toBe(true);
            expect(validation.eslintDisableHasExplanation).toBe(true);
            expect(validation.isComplete).toBe(true);
            expect(validation.suggestions).toContain('Documentation is complete and meets quality standards');
        });
        it('should identify poor quality documentation', async () => {
            const fileContent = [
                'export class Service {',
                '  // any',
                '  processData(data: any): void {',
                '    console.log(data);',
                '  }',
                '}'
            ].join('\n');
            mockFs.readFile.mockResolvedValue(fileContent);
            const context = {
                filePath: 'src/service.ts',
                lineNumber: 3,
                codeSnippet: 'processData(data: any): void {',
                surroundingLines: [],
                hasExistingComment: true,
                existingComment: 'any',
                isInTestFile: false,
                domainContext: {
                    domain: types_1.CodeDomain.SERVICE,
                    intentionalityHints: [],
                    suggestedTypes: [],
                    preservationReasons: []
                }
            };
            const validation = await qas.validateDocumentationQuality(context);
            expect(validation.hasComment).toBe(true);
            expect(validation.commentQuality).toBe('poor');
            expect(validation.hasEslintDisable).toBe(false);
            expect(validation.isComplete).toBe(false);
            expect(validation.suggestions).toContain('Improve comment quality with more detailed explanation');
        });
        it('should identify missing documentation', async () => {
            const fileContent = [
                'export class Service {',
                '  processData(data: any): void {',
                '    console.log(data);',
                '  }',
                '}'
            ].join('\n');
            mockFs.readFile.mockResolvedValue(fileContent);
            const context = {
                filePath: 'src/service.ts',
                lineNumber: 2,
                codeSnippet: 'processData(data: any): void {',
                surroundingLines: [],
                hasExistingComment: false,
                isInTestFile: false,
                domainContext: {
                    domain: types_1.CodeDomain.SERVICE,
                    intentionalityHints: [],
                    suggestedTypes: [],
                    preservationReasons: []
                }
            };
            const validation = await qas.validateDocumentationQuality(context);
            expect(validation.hasComment).toBe(false);
            expect(validation.commentQuality).toBe('poor');
            expect(validation.hasEslintDisable).toBe(false);
            expect(validation.isComplete).toBe(false);
            expect(validation.suggestions).toContain('Add explanatory comment indicating intentional use of any type');
        });
        it('should cache validation results', async () => {
            const fileContent = 'processData(data: any): void {}';
            mockFs.readFile.mockResolvedValue(fileContent);
            const context = {
                filePath: 'src/service.ts',
                lineNumber: 1,
                codeSnippet: 'processData(data: any): void {',
                surroundingLines: [],
                hasExistingComment: false,
                isInTestFile: false,
                domainContext: {
                    domain: types_1.CodeDomain.SERVICE,
                    intentionalityHints: [],
                    suggestedTypes: [],
                    preservationReasons: []
                }
            };
            // First call
            await qas.validateDocumentationQuality(context);
            expect(mockFs.readFile).toHaveBeenCalledTimes(1);
            // Second call should use cache
            await qas.validateDocumentationQuality(context);
            expect(mockFs.readFile).toHaveBeenCalledTimes(1);
        });
    });
    describe('generateQualityReport', () => {
        it('should generate comprehensive quality metrics', async () => {
            const mockFiles = ['src/service.ts', 'src/component.tsx'];
            mockGlob.mockResolvedValue(mockFiles);
            const fileContent = [
                'export class Service {',
                '  // Intentionally any: External API response',
                '  processData(data: any): void {',
                '    console.log(data);',
                '  }',
                '',
                '  handleError(error: any): void {',
                '    console.error(error);',
                '  }',
                '}'
            ].join('\n');
            mockFs.readFile.mockResolvedValue(fileContent);
            const metrics = await qas.generateQualityReport();
            expect(metrics.totalFiles).toBe(2);
            expect(metrics.filesWithAnyTypes).toBeGreaterThan(0);
            expect(metrics.totalAnyTypes).toBeGreaterThan(0);
            expect(metrics.qualityDistribution).toHaveProperty('poor');
            expect(metrics.qualityDistribution).toHaveProperty('excellent');
            expect(typeof metrics.averageQualityScore).toBe('number');
            expect(typeof metrics.compliancePercentage).toBe('number');
        });
    });
    describe('findAnyTypesInFile', () => {
        it('should find various any type patterns', async () => {
            const fileContent = [
                'const data: any = response;',
                'const items: any[] = [];',
                'const config: Record<string, any> = {};',
                'const result = data as any;',
                'function process<T = any>(input: T): T { return input; }',
                'const array: Array<any> = [];',
                'catch (error: any) {',
                '  console.error(error);',
                '}'
            ].join('\n');
            mockFs.readFile.mockResolvedValue(fileContent);
            // Use reflection to access private method for testing
            const anyTypes = await qas.findAnyTypesInFile('test.ts');
            expect(anyTypes.length).toBeGreaterThan(0);
            expect(anyTypes.some((t) => t.codeSnippet.includes(': any'))).toBe(true);
            expect(anyTypes.some((t) => t.codeSnippet.includes(': any[]'))).toBe(true);
            expect(anyTypes.some((t) => t.codeSnippet.includes('Record<string, any>'))).toBe(true);
            expect(anyTypes.some((t) => t.codeSnippet.includes('as any'))).toBe(true);
        });
        it('should categorize any types correctly', async () => {
            const testCases = [
                { code: 'catch (error: any) {', expectedCategory: types_1.AnyTypeCategory.ERROR_HANDLING },
                { code: 'const response: any = await api.fetch();', expectedCategory: types_1.AnyTypeCategory.EXTERNAL_API },
                { code: 'const mockData: any = jest.fn();', expectedCategory: types_1.AnyTypeCategory.TEST_MOCK },
                { code: 'const config: any = options;', expectedCategory: types_1.AnyTypeCategory.DYNAMIC_CONFIG },
                { code: 'const items: any[] = [];', expectedCategory: types_1.AnyTypeCategory.ARRAY_TYPE },
                { code: 'const data: Record<string, any> = {};', expectedCategory: types_1.AnyTypeCategory.RECORD_TYPE }
            ];
            for (const testCase of testCases) {
                const category = qas.categorizeAnyType(testCase.code);
                expect(category).toBe(testCase.expectedCategory);
            }
        });
        it('should determine domain correctly', async () => {
            const testCases = [
                { path: 'src/services/astrology/planetary.ts', expectedDomain: types_1.CodeDomain.ASTROLOGICAL },
                { path: 'src/components/recipe/RecipeCard.tsx', expectedDomain: types_1.CodeDomain.RECIPE },
                { path: 'src/services/campaign/CampaignController.ts', expectedDomain: types_1.CodeDomain.CAMPAIGN },
                { path: 'src/services/intelligence/AIService.ts', expectedDomain: types_1.CodeDomain.INTELLIGENCE },
                { path: 'src/services/api/ApiService.ts', expectedDomain: types_1.CodeDomain.SERVICE },
                { path: 'src/components/ui/Button.tsx', expectedDomain: types_1.CodeDomain.COMPONENT },
                { path: 'src/utils/helpers.ts', expectedDomain: types_1.CodeDomain.UTILITY },
                { path: 'src/__tests__/service.test.ts', expectedDomain: types_1.CodeDomain.TEST }
            ];
            for (const testCase of testCases) {
                const domain = qas.determineDomain(testCase.path);
                expect(domain).toBe(testCase.expectedDomain);
            }
        });
    });
    describe('comment quality assessment', () => {
        const qualityTestCases = [
            {
                comment: '',
                expectedQuality: 'poor',
                description: 'empty comment'
            },
            {
                comment: 'any',
                expectedQuality: 'poor',
                description: 'minimal comment'
            },
            {
                comment: 'Intentionally any for API',
                expectedQuality: 'good',
                description: 'basic intentional comment'
            },
            {
                comment: 'Intentionally any: External API response requires flexible typing',
                expectedQuality: 'excellent',
                description: 'good quality comment with explanation'
            },
            {
                comment: 'Intentionally any: External API response requires flexible typing because the structure varies between different endpoints and versions, and we need to maintain compatibility with legacy systems',
                expectedQuality: 'excellent',
                description: 'excellent quality comment with detailed explanation'
            }
        ];
        qualityTestCases.forEach(({ comment, expectedQuality, description }) => {
            it(`should assess ${description} as ${expectedQuality}`, () => {
                const quality = qas.assessCommentQuality(comment);
                expect(quality).toBe(expectedQuality);
            });
        });
    });
    describe('ESLint disable comment detection', () => {
        it('should detect ESLint disable comments', () => {
            const lines = [
                'function test() {',
                '  // eslint-disable-next-line @typescript-eslint/no-explicit-any',
                '  const data: any = response;',
                '}'
            ];
            const hasDisable = qas.hasEslintDisableComment(lines, 2);
            expect(hasDisable).toBe(true);
        });
        it('should detect ESLint disable comments with explanations', () => {
            const lines = [
                'function test() {',
                '  // eslint-disable-next-line @typescript-eslint/no-explicit-any -- External API compatibility',
                '  const data: any = response;',
                '}'
            ];
            const hasExplanation = qas.eslintDisableHasExplanation(lines, 2);
            expect(hasExplanation).toBe(true);
        });
        it('should not detect explanation in basic disable comment', () => {
            const lines = [
                'function test() {',
                '  // eslint-disable-next-line @typescript-eslint/no-explicit-any',
                '  const data: any = response;',
                '}'
            ];
            const hasExplanation = qas.eslintDisableHasExplanation(lines, 2);
            expect(hasExplanation).toBe(false);
        });
    });
    describe('severity assessment', () => {
        it('should assess severity correctly', () => {
            const testCases = [
                {
                    context: {
                        filePath: 'src/service.ts',
                        codeSnippet: 'processData(data: any): void',
                        isInTestFile: false
                    },
                    expectedSeverity: 'high'
                },
                {
                    context: {
                        filePath: 'src/component.tsx',
                        codeSnippet: 'const props: any = {}',
                        isInTestFile: false
                    },
                    expectedSeverity: 'low'
                },
                {
                    context: {
                        filePath: 'src/test.test.ts',
                        codeSnippet: 'const mock: any = {}',
                        isInTestFile: true
                    },
                    expectedSeverity: 'low'
                },
                {
                    context: {
                        filePath: 'src/utils.ts',
                        codeSnippet: 'function process(data: any[]): any',
                        isInTestFile: false
                    },
                    expectedSeverity: 'medium'
                }
            ];
            testCases.forEach(({ context, expectedSeverity }) => {
                const severity = qas.assessSeverity(context);
                expect(severity).toBe(expectedSeverity);
            });
        });
    });
    describe('recommendation generation', () => {
        it('should generate appropriate recommendations for low coverage', () => {
            const recommendations = qas.generateRecommendations(30, // 30% coverage
            { poor: 5, fair: 2, good: 1, excellent: 0 }, []);
            expect(recommendations.some((r) => r.includes('CRITICAL'))).toBe(true);
            expect(recommendations.some((r) => r.includes('poor quality'))).toBe(true);
        });
        it('should generate appropriate recommendations for good coverage', () => {
            const recommendations = qas.generateRecommendations(85, // 85% coverage
            { poor: 1, fair: 2, good: 5, excellent: 3 }, []);
            expect(recommendations.some((r) => r.includes('GOOD'))).toBe(true);
            expect(recommendations.some((r) => r.includes('remaining'))).toBe(true);
        });
        it('should generate appropriate recommendations for excellent coverage', () => {
            const recommendations = qas.generateRecommendations(98, // 98% coverage
            { poor: 0, fair: 1, good: 3, excellent: 8 }, []);
            expect(recommendations.some((r) => r.includes('EXCELLENT'))).toBe(true);
            expect(recommendations.some((r) => r.includes('Maintain'))).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9zZXJ2aWNlcy9jYW1wYWlnbi91bmludGVudGlvbmFsLWFueS1lbGltaW5hdGlvbi9fX3Rlc3RzX18vRG9jdW1lbnRhdGlvblF1YWxpdHlBc3N1cmFuY2UudGVzdC50cyIsIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFPSCxvQkFBb0I7QUFDcEIsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBUGxCLGdEQUFrQztBQUNsQywrQkFBNEI7QUFDNUIsb0ZBQXlHO0FBQ3pHLG9DQUE4RTtBQU05RSxNQUFNLE1BQU0sR0FBRyxFQUE0QixDQUFDO0FBQzVDLE1BQU0sUUFBUSxHQUFHLFdBQXdDLENBQUM7QUFFMUQsUUFBUSxDQUFDLCtCQUErQixFQUFFLEdBQUcsRUFBRTtJQUM3QyxJQUFJLEdBQWtDLENBQUM7SUFDdkMsSUFBSSxVQUEyQyxDQUFDO0lBRWhELFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxVQUFVLEdBQUc7WUFDWCxpQkFBaUIsRUFBRSxDQUFDLEtBQUssQ0FBQztZQUMxQixlQUFlLEVBQUUsQ0FBQyxjQUFjLENBQUM7WUFDakMsb0JBQW9CLEVBQUUsRUFBRTtZQUN4QixnQkFBZ0IsRUFBRSxDQUFDLGVBQWUsRUFBRSxjQUFjLENBQUM7WUFDbkQsaUJBQWlCLEVBQUU7Z0JBQ2pCLFNBQVMsRUFBRSxFQUFFO2dCQUNiLElBQUksRUFBRSxFQUFFO2dCQUNSLElBQUksRUFBRSxFQUFFO2FBQ1Q7U0FDRixDQUFDO1FBRUYsR0FBRyxHQUFHLElBQUksNkRBQTZCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFcEQsY0FBYztRQUNkLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyx5QkFBeUIsRUFBRSxHQUFHLEVB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VyxDQUFDLHVCQUF1QixDQUMxRCxFQUFFLEVBQUUsZUFBZTtZQUNuQixFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLEVBQUUsRUFDM0MsRUFBRSxDQUNILENBQUM7WUFFRixNQUFNLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2hGLE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakYsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9HcmVnQ2FzdHJvL0Rlc2t0b3AvV2hhdFRvRWF0TmV4dC9zcmMvc2VydmljZXMvY2FtcGFpZ24vdW5pbnRlbnRpb25hbC1hbnktZWxpbWluYXRpb24vX190ZXN0c19fL0RvY3VtZW50YXRpb25RdWFsaXR5QXNzdXJhbmNlLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUZXN0cyBmb3IgRG9jdW1lbnRhdGlvblF1YWxpdHlBc3N1cmFuY2VcbiAqL1xuXG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcy9wcm9taXNlcyc7XG5pbXBvcnQgeyBnbG9iIH0gZnJvbSAnZ2xvYic7XG5pbXBvcnQgeyBEb2N1bWVudGF0aW9uUXVhbGl0eUFzc3VyYW5jZSwgUXVhbGl0eUFzc3VyYW5jZUNvbmZpZyB9IGZyb20gJy4uL0RvY3VtZW50YXRpb25RdWFsaXR5QXNzdXJhbmNlJztcbmltcG9ydCB7IEFueVR5cGVDYXRlZ29yeSwgQ2xhc3NpZmljYXRpb25Db250ZXh0LCBDb2RlRG9tYWluIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG4vLyBNb2NrIGRlcGVuZGVuY2llc1xuamVzdC5tb2NrKCdmcy9wcm9taXNlcycpO1xuamVzdC5tb2NrKCdnbG9iJyk7XG5cbmNvbnN0IG1vY2tGcyA9IGZzIGFzIGplc3QuTW9ja2VkPHR5cGVvZiBmcz47XG5jb25zdCBtb2NrR2xvYiA9IGdsb2IgYXMgamVzdC5Nb2NrZWRGdW5jdGlvbjx0eXBlb2YgZ2xvYj47XG5cbmRlc2NyaWJlKCdEb2N1bWVudGF0aW9uUXVhbGl0eUFzc3VyYW5jZScsICgpID0+IHtcbiAgbGV0IHFhczogRG9jdW1lbnRhdGlvblF1YWxpdHlBc3N1cmFuY2U7XG4gIGxldCBtb2NrQ29uZmlnOiBQYXJ0aWFsPFF1YWxpdHlBc3N1cmFuY2VDb25maWc+O1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIG1vY2tDb25maWcgPSB7XG4gICAgICBzb3VyY2VEaXJlY3RvcmllczogWydzcmMnXSxcbiAgICAgIGV4Y2x1ZGVQYXR0ZXJuczogWycqKi8qLnRlc3QudHMnXSxcbiAgICAgIG1pbmltdW1Db21tZW50TGVuZ3RoOiAyMCxcbiAgICAgIHJlcXVpcmVkS2V5d29yZHM6IFsnaW50ZW50aW9uYWxseScsICdkZWxpYmVyYXRlbHknXSxcbiAgICAgIHF1YWxpdHlUaHJlc2hvbGRzOiB7XG4gICAgICAgIGV4Y2VsbGVudDogOTAsXG4gICAgICAgIGdvb2Q6IDcwLFxuICAgICAgICBmYWlyOiA1MFxuICAgICAgfVxuICAgIH07XG5cbiAgICBxYXMgPSBuZXcgRG9jdW1lbnRhdGlvblF1YWxpdHlBc3N1cmFuY2UobW9ja0NvbmZpZyk7XG5cbiAgICAvLyBSZXNldCBtb2Nrc1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICB9KTtcblxuICBkZXNjcmliZSgncGVyZm9ybVF1YWxpdHlBc3N1cmFuY2UnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBwZXJmb3JtIGNvbXByZWhlbnNpdmUgcXVhbGl0eSBhc3N1cmFuY2Ugc2NhbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tGaWxlcyA9IFsnc3JjL3NlcnZpY2UudHMnLCAnc3JjL2NvbXBvbmVudC50c3gnXTtcbiAgICAgIG1vY2tHbG9iLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tGaWxlcyk7XG5cbiAgICAgIGNvbnN0IGZpbGVDb250ZW50ID0gW1xuICAgICAgICAnZXhwb3J0IGNsYXNzIFNlcnZpY2UgeycsXG4gICAgICAgICcgIC8vIEludGVudGlvbmFsbHkgYW55OiBFeHRlcm5hbCBBUEkgcmVzcG9uc2Ugd2l0aCBkeW5hbWljIHN0cnVjdHVyZScsXG4gICAgICAgICcgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55JyxcbiAgICAgICAgJyAgcHJvY2Vzc0RhdGEoZGF0YTogYW55KTogdm9pZCB7JyxcbiAgICAgICAgJyAgICBjb25zb2xlLmxvZyhkYXRhKTsnLFxuICAgICAgICAnICB9JyxcbiAgICAgICAgJycsXG4gICAgICAgICcgIC8vIFBvb3IgY29tbWVudCcsXG4gICAgICAgICcgIGhhbmRsZUVycm9yKGVycm9yOiBhbnkpOiB2b2lkIHsnLFxuICAgICAgICAnICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpOycsXG4gICAgICAgICcgIH0nLFxuICAgICAgICAnJyxcbiAgICAgICAgJyAgdHJhbnNmb3JtKGlucHV0OiBhbnkpOiBhbnkgeycsXG4gICAgICAgICcgICAgcmV0dXJuIGlucHV0OycsXG4gICAgICAgICcgIH0nLFxuICAgICAgICAnfSdcbiAgICAgIF0uam9pbignXFxuJyk7XG5cbiAgICAgIG1vY2tGcy5yZWFkRmlsZS5tb2NrUmVzb2x2ZWRWYWx1ZShmaWxlQ29udGVudCk7XG5cbiAgICAgIGNvbnN0IHJlcG9ydCA9IGF3YWl0IHFhcy5wZXJmb3JtUXVhbGl0eUFzc3VyYW5jZSgpO1xuXG4gICAgICBleHBlY3QocmVwb3J0LnRvdGFsSW50ZW50aW9uYWxBbnlUeXBlcykudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgICAgZXhwZWN0KHJlcG9ydC5kb2N1bWVudGF0aW9uQ292ZXJhZ2UpLnRvQmVMZXNzVGhhbigxMDApO1xuICAgICAgZXhwZWN0KHJlcG9ydC5xdWFsaXR5QnJlYWtkb3duKS50b0hhdmVQcm9wZXJ0eSgncG9vcicpO1xuICAgICAgZXhwZWN0KHJlcG9ydC5xdWFsaXR5QnJlYWtkb3duKS50b0hhdmVQcm9wZXJ0eSgnZXhjZWxsZW50Jyk7XG4gICAgICBleHBlY3QoQXJyYXkuaXNBcnJheShyZXBvcnQucmVjb21tZW5kYXRpb25zKSkudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGZpbGVzIHdpdGggbm8gYW55IHR5cGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja0ZpbGVzID0gWydzcmMvY2xlYW4udHMnXTtcbiAgICAgIG1vY2tHbG9iLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tGaWxlcyk7XG5cbiAgICAgIGNvbnN0IGNsZWFuRmlsZUNvbnRlbnQgPSBbXG4gICAgICAgICdleHBvcnQgY2xhc3MgQ2xlYW5TZXJ2aWNlIHsnLFxuICAgICAgICAnICBwcm9jZXNzRGF0YShkYXRhOiBzdHJpbmcpOiB2b2lkIHsnLFxuICAgICAgICAnICAgIGNvbnNvbGUubG9nKGRhdGEpOycsXG4gICAgICAgICcgIH0nLFxuICAgICAgICAnfSdcbiAgICAgIF0uam9pbignXFxuJyk7XG5cbiAgICAgIG1vY2tGcy5yZWFkRmlsZS5tb2NrUmVzb2x2ZWRWYWx1ZShjbGVhbkZpbGVDb250ZW50KTtcblxuICAgICAgY29uc3QgcmVwb3J0ID0gYXdhaXQgcWFzLnBlcmZvcm1RdWFsaXR5QXNzdXJhbmNlKCk7XG5cbiAgICAgIGV4cGVjdChyZXBvcnQudG90YWxJbnRlbnRpb25hbEFueVR5cGVzKS50b0JlKDApO1xuICAgICAgZXhwZWN0KHJlcG9ydC5kb2N1bWVudGF0aW9uQ292ZXJhZ2UpLnRvQmUoMTAwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGZpbGUgcmVhZCBlcnJvcnMgZ3JhY2VmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tGaWxlcyA9IFsnc3JjL2Vycm9yLnRzJ107XG4gICAgICBtb2NrR2xvYi5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrRmlsZXMpO1xuICAgICAgbW9ja0ZzLnJlYWRGaWxlLm1vY2tSZWplY3RlZFZhbHVlKG5ldyBFcnJvcignRmlsZSBub3QgZm91bmQnKSk7XG5cbiAgICAgIGNvbnN0IHJlcG9ydCA9IGF3YWl0IHFhcy5wZXJmb3JtUXVhbGl0eUFzc3VyYW5jZSgpO1xuXG4gICAgICBleHBlY3QocmVwb3J0KS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHJlcG9ydC50b3RhbEludGVudGlvbmFsQW55VHlwZXMpLnRvQmUoMCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCd2YWxpZGF0ZURvY3VtZW50YXRpb25RdWFsaXR5JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgdmFsaWRhdGUgaGlnaC1xdWFsaXR5IGRvY3VtZW50YXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBmaWxlQ29udGVudCA9IFtcbiAgICAgICAgJ2V4cG9ydCBjbGFzcyBTZXJ2aWNlIHsnLFxuICAgICAgICAnICAvLyBJbnRlbnRpb25hbGx5IGFueTogRXh0ZXJuYWwgQVBJIHJlc3BvbnNlIHJlcXVpcmVzIGZsZXhpYmxlIHR5cGluZyBiZWNhdXNlIHN0cnVjdHVyZSB2YXJpZXMnLFxuICAgICAgICAnICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAtLSBFeHRlcm5hbCBBUEkgY29tcGF0aWJpbGl0eScsXG4gICAgICAgICcgIHByb2Nlc3NEYXRhKGRhdGE6IGFueSk6IHZvaWQgeycsXG4gICAgICAgICcgICAgY29uc29sZS5sb2coZGF0YSk7JyxcbiAgICAgICAgJyAgfScsXG4gICAgICAgICd9J1xuICAgICAgXS5qb2luKCdcXG4nKTtcblxuICAgICAgbW9ja0ZzLnJlYWRGaWxlLm1vY2tSZXNvbHZlZFZhbHVlKGZpbGVDb250ZW50KTtcblxuICAgICAgY29uc3QgY29udGV4dDogQ2xhc3NpZmljYXRpb25Db250ZXh0ID0ge1xuICAgICAgICBmaWxlUGF0aDogJ3NyYy9zZXJ2aWNlLnRzJyxcbiAgICAgICAgbGluZU51bWJlcjogNCxcbiAgICAgICAgY29kZVNuaXBwZXQ6ICdwcm9jZXNzRGF0YShkYXRhOiBhbnkpOiB2b2lkIHsnLFxuICAgICAgICBzdXJyb3VuZGluZ0xpbmVzOiBbXSxcbiAgICAgICAgaGFzRXhpc3RpbmdDb21tZW50OiB0cnVlLFxuICAgICAgICBleGlzdGluZ0NvbW1lbnQ6ICdJbnRlbnRpb25hbGx5IGFueTogRXh0ZXJuYWwgQVBJIHJlc3BvbnNlIHJlcXVpcmVzIGZsZXhpYmxlIHR5cGluZyBiZWNhdXNlIHN0cnVjdHVyZSB2YXJpZXMnLFxuICAgICAgICBpc0luVGVzdEZpbGU6IGZhbHNlLFxuICAgICAgICBkb21haW5Db250ZXh0OiB7XG4gICAgICAgICAgZG9tYWluOiBDb2RlRG9tYWluLlNFUlZJQ0UsXG4gICAgICAgICAgaW50ZW50aW9uYWxpdHlIaW50czogW10sXG4gICAgICAgICAgc3VnZ2VzdGVkVHlwZXM6IFtdLFxuICAgICAgICAgIHByZXNlcnZhdGlvblJlYXNvbnM6IFtdXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHZhbGlkYXRpb24gPSBhd2FpdCBxYXMudmFsaWRhdGVEb2N1bWVudGF0aW9uUXVhbGl0eShjb250ZXh0KTtcblxuICAgICAgZXhwZWN0KHZhbGlkYXRpb24uaGFzQ29tbWVudCkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdCh2YWxpZGF0aW9uLmNvbW1lbnRRdWFsaXR5KS50b0JlKCdleGNlbGxlbnQnKTtcbiAgICAgIGV4cGVjdCh2YWxpZGF0aW9uLmhhc0VzbGludERpc2FibGUpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QodmFsaWRhdGlvbi5lc2xpbnREaXNhYmxlSGFzRXhwbGFuYXRpb24pLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QodmFsaWRhdGlvbi5pc0NvbXBsZXRlKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHZhbGlkYXRpb24uc3VnZ2VzdGlvbnMpLnRvQ29udGFpbignRG9jdW1lbnRhdGlvbiBpcyBjb21wbGV0ZSBhbmQgbWVldHMgcXVhbGl0eSBzdGFuZGFyZHMnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaWRlbnRpZnkgcG9vciBxdWFsaXR5IGRvY3VtZW50YXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBmaWxlQ29udGVudCA9IFtcbiAgICAgICAgJ2V4cG9ydCBjbGFzcyBTZXJ2aWNlIHsnLFxuICAgICAgICAnICAvLyBhbnknLFxuICAgICAgICAnICBwcm9jZXNzRGF0YShkYXRhOiBhbnkpOiB2b2lkIHsnLFxuICAgICAgICAnICAgIGNvbnNvbGUubG9nKGRhdGEpOycsXG4gICAgICAgICcgIH0nLFxuICAgICAgICAnfSdcbiAgICAgIF0uam9pbignXFxuJyk7XG5cbiAgICAgIG1vY2tGcy5yZWFkRmlsZS5tb2NrUmVzb2x2ZWRWYWx1ZShmaWxlQ29udGVudCk7XG5cbiAgICAgIGNvbnN0IGNvbnRleHQ6IENsYXNzaWZpY2F0aW9uQ29udGV4dCA9IHtcbiAgICAgICAgZmlsZVBhdGg6ICdzcmMvc2VydmljZS50cycsXG4gICAgICAgIGxpbmVOdW1iZXI6IDMsXG4gICAgICAgIGNvZGVTbmlwcGV0OiAncHJvY2Vzc0RhdGEoZGF0YTogYW55KTogdm9pZCB7JyxcbiAgICAgICAgc3Vycm91bmRpbmdMaW5lczogW10sXG4gICAgICAgIGhhc0V4aXN0aW5nQ29tbWVudDogdHJ1ZSxcbiAgICAgICAgZXhpc3RpbmdDb21tZW50OiAnYW55JyxcbiAgICAgICAgaXNJblRlc3RGaWxlOiBmYWxzZSxcbiAgICAgICAgZG9tYWluQ29udGV4dDoge1xuICAgICAgICAgIGRvbWFpbjogQ29kZURvbWFpbi5TRVJWSUNFLFxuICAgICAgICAgIGludGVudGlvbmFsaXR5SGludHM6IFtdLFxuICAgICAgICAgIHN1Z2dlc3RlZFR5cGVzOiBbXSxcbiAgICAgICAgICBwcmVzZXJ2YXRpb25SZWFzb25zOiBbXVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBjb25zdCB2YWxpZGF0aW9uID0gYXdhaXQgcWFzLnZhbGlkYXRlRG9jdW1lbnRhdGlvblF1YWxpdHkoY29udGV4dCk7XG5cbiAgICAgIGV4cGVjdCh2YWxpZGF0aW9uLmhhc0NvbW1lbnQpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QodmFsaWRhdGlvbi5jb21tZW50UXVhbGl0eSkudG9CZSgncG9vcicpO1xuICAgICAgZXhwZWN0KHZhbGlkYXRpb24uaGFzRXNsaW50RGlzYWJsZSkudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QodmFsaWRhdGlvbi5pc0NvbXBsZXRlKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdCh2YWxpZGF0aW9uLnN1Z2dlc3Rpb25zKS50b0NvbnRhaW4oJ0ltcHJvdmUgY29tbWVudCBxdWFsaXR5IHdpdGggbW9yZSBkZXRhaWxlZCBleHBsYW5hdGlvbicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBpZGVudGlmeSBtaXNzaW5nIGRvY3VtZW50YXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBmaWxlQ29udGVudCA9IFtcbiAgICAgICAgJ2V4cG9ydCBjbGFzcyBTZXJ2aWNlIHsnLFxuICAgICAgICAnICBwcm9jZXNzRGF0YShkYXRhOiBhbnkpOiB2b2lkIHsnLFxuICAgICAgICAnICAgIGNvbnNvbGUubG9nKGRhdGEpOycsXG4gICAgICAgICcgIH0nLFxuICAgICAgICAnfSdcbiAgICAgIF0uam9pbignXFxuJyk7XG5cbiAgICAgIG1vY2tGcy5yZWFkRmlsZS5tb2NrUmVzb2x2ZWRWYWx1ZShmaWxlQ29udGVudCk7XG5cbiAgICAgIGNvbnN0IGNvbnRleHQ6IENsYXNzaWZpY2F0aW9uQ29udGV4dCA9IHtcbiAgICAgICAgZmlsZVBhdGg6ICdzcmMvc2VydmljZS50cycsXG4gICAgICAgIGxpbmVOdW1iZXI6IDIsXG4gICAgICAgIGNvZGVTbmlwcGV0OiAncHJvY2Vzc0RhdGEoZGF0YTogYW55KTogdm9pZCB7JyxcbiAgICAgICAgc3Vycm91bmRpbmdMaW5lczogW10sXG4gICAgICAgIGhhc0V4aXN0aW5nQ29tbWVudDogZmFsc2UsXG4gICAgICAgIGlzSW5UZXN0RmlsZTogZmFsc2UsXG4gICAgICAgIGRvbWFpbkNvbnRleHQ6IHtcbiAgICAgICAgICBkb21haW46IENvZGVEb21haW4uU0VSVklDRSxcbiAgICAgICAgICBpbnRlbnRpb25hbGl0eUhpbnRzOiBbXSxcbiAgICAgICAgICBzdWdnZXN0ZWRUeXBlczogW10sXG4gICAgICAgICAgcHJlc2VydmF0aW9uUmVhc29uczogW11cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgY29uc3QgdmFsaWRhdGlvbiA9IGF3YWl0IHFhcy52YWxpZGF0ZURvY3VtZW50YXRpb25RdWFsaXR5KGNvbnRleHQpO1xuXG4gICAgICBleHBlY3QodmFsaWRhdGlvbi5oYXNDb21tZW50KS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdCh2YWxpZGF0aW9uLmNvbW1lbnRRdWFsaXR5KS50b0JlKCdwb29yJyk7XG4gICAgICBleHBlY3QodmFsaWRhdGlvbi5oYXNFc2xpbnREaXNhYmxlKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdCh2YWxpZGF0aW9uLmlzQ29tcGxldGUpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHZhbGlkYXRpb24uc3VnZ2VzdGlvbnMpLnRvQ29udGFpbignQWRkIGV4cGxhbmF0b3J5IGNvbW1lbnQgaW5kaWNhdGluZyBpbnRlbnRpb25hbCB1c2Ugb2YgYW55IHR5cGUnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY2FjaGUgdmFsaWRhdGlvbiByZXN1bHRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZmlsZUNvbnRlbnQgPSAncHJvY2Vzc0RhdGEoZGF0YTogYW55KTogdm9pZCB7fSc7XG4gICAgICBtb2NrRnMucmVhZEZpbGUubW9ja1Jlc29sdmVkVmFsdWUoZmlsZUNvbnRlbnQpO1xuXG4gICAgICBjb25zdCBjb250ZXh0OiBDbGFzc2lmaWNhdGlvbkNvbnRleHQgPSB7XG4gICAgICAgIGZpbGVQYXRoOiAnc3JjL3NlcnZpY2UudHMnLFxuICAgICAgICBsaW5lTnVtYmVyOiAxLFxuICAgICAgICBjb2RlU25pcHBldDogJ3Byb2Nlc3NEYXRhKGRhdGE6IGFueSk6IHZvaWQgeycsXG4gICAgICAgIHN1cnJvdW5kaW5nTGluZXM6IFtdLFxuICAgICAgICBoYXNFeGlzdGluZ0NvbW1lbnQ6IGZhbHNlLFxuICAgICAgICBpc0luVGVzdEZpbGU6IGZhbHNlLFxuICAgICAgICBkb21haW5Db250ZXh0OiB7XG4gICAgICAgICAgZG9tYWluOiBDb2RlRG9tYWluLlNFUlZJQ0UsXG4gICAgICAgICAgaW50ZW50aW9uYWxpdHlIaW50czogW10sXG4gICAgICAgICAgc3VnZ2VzdGVkVHlwZXM6IFtdLFxuICAgICAgICAgIHByZXNlcnZhdGlvblJlYXNvbnM6IFtdXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIC8vIEZpcnN0IGNhbGxcbiAgICAgIGF3YWl0IHFhcy52YWxpZGF0ZURvY3VtZW50YXRpb25RdWFsaXR5KGNvbnRleHQpO1xuICAgICAgZXhwZWN0KG1vY2tGcy5yZWFkRmlsZSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuXG4gICAgICAvLyBTZWNvbmQgY2FsbCBzaG91bGQgdXNlIGNhY2hlXG4gICAgICBhd2FpdCBxYXMudmFsaWRhdGVEb2N1bWVudGF0aW9uUXVhbGl0eShjb250ZXh0KTtcbiAgICAgIGV4cGVjdChtb2NrRnMucmVhZEZpbGUpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2dlbmVyYXRlUXVhbGl0eVJlcG9ydCcsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGdlbmVyYXRlIGNvbXByZWhlbnNpdmUgcXVhbGl0eSBtZXRyaWNzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja0ZpbGVzID0gWydzcmMvc2VydmljZS50cycsICdzcmMvY29tcG9uZW50LnRzeCddO1xuICAgICAgbW9ja0dsb2IubW9ja1Jlc29sdmVkVmFsdWUobW9ja0ZpbGVzKTtcblxuICAgICAgY29uc3QgZmlsZUNvbnRlbnQgPSBbXG4gICAgICAgICdleHBvcnQgY2xhc3MgU2VydmljZSB7JyxcbiAgICAgICAgJyAgLy8gSW50ZW50aW9uYWxseSBhbnk6IEV4dGVybmFsIEFQSSByZXNwb25zZScsXG4gICAgICAgICcgIHByb2Nlc3NEYXRhKGRhdGE6IGFueSk6IHZvaWQgeycsXG4gICAgICAgICcgICAgY29uc29sZS5sb2coZGF0YSk7JyxcbiAgICAgICAgJyAgfScsXG4gICAgICAgICcnLFxuICAgICAgICAnICBoYW5kbGVFcnJvcihlcnJvcjogYW55KTogdm9pZCB7JyxcbiAgICAgICAgJyAgICBjb25zb2xlLmVycm9yKGVycm9yKTsnLFxuICAgICAgICAnICB9JyxcbiAgICAgICAgJ30nXG4gICAgICBdLmpvaW4oJ1xcbicpO1xuXG4gICAgICBtb2NrRnMucmVhZEZpbGUubW9ja1Jlc29sdmVkVmFsdWUoZmlsZUNvbnRlbnQpO1xuXG4gICAgICBjb25zdCBtZXRyaWNzID0gYXdhaXQgcWFzLmdlbmVyYXRlUXVhbGl0eVJlcG9ydCgpO1xuXG4gICAgICBleHBlY3QobWV0cmljcy50b3RhbEZpbGVzKS50b0JlKDIpO1xuICAgICAgZXhwZWN0KG1ldHJpY3MuZmlsZXNXaXRoQW55VHlwZXMpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICAgIGV4cGVjdChtZXRyaWNzLnRvdGFsQW55VHlwZXMpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICAgIGV4cGVjdChtZXRyaWNzLnF1YWxpdHlEaXN0cmlidXRpb24pLnRvSGF2ZVByb3BlcnR5KCdwb29yJyk7XG4gICAgICBleHBlY3QobWV0cmljcy5xdWFsaXR5RGlzdHJpYnV0aW9uKS50b0hhdmVQcm9wZXJ0eSgnZXhjZWxsZW50Jyk7XG4gICAgICBleHBlY3QodHlwZW9mIG1ldHJpY3MuYXZlcmFnZVF1YWxpdHlTY29yZSkudG9CZSgnbnVtYmVyJyk7XG4gICAgICBleHBlY3QodHlwZW9mIG1ldHJpY3MuY29tcGxpYW5jZVBlcmNlbnRhZ2UpLnRvQmUoJ251bWJlcicpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZmluZEFueVR5cGVzSW5GaWxlJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgZmluZCB2YXJpb3VzIGFueSB0eXBlIHBhdHRlcm5zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZmlsZUNvbnRlbnQgPSBbXG4gICAgICAgICdjb25zdCBkYXRhOiBhbnkgPSByZXNwb25zZTsnLFxuICAgICAgICAnY29uc3QgaXRlbXM6IGFueVtdID0gW107JyxcbiAgICAgICAgJ2NvbnN0IGNvbmZpZzogUmVjb3JkPHN0cmluZywgYW55PiA9IHt9OycsXG4gICAgICAgICdjb25zdCByZXN1bHQgPSBkYXRhIGFzIGFueTsnLFxuICAgICAgICAnZnVuY3Rpb24gcHJvY2VzczxUID0gYW55PihpbnB1dDogVCk6IFQgeyByZXR1cm4gaW5wdXQ7IH0nLFxuICAgICAgICAnY29uc3QgYXJyYXk6IEFycmF5PGFueT4gPSBbXTsnLFxuICAgICAgICAnY2F0Y2ggKGVycm9yOiBhbnkpIHsnLFxuICAgICAgICAnICBjb25zb2xlLmVycm9yKGVycm9yKTsnLFxuICAgICAgICAnfSdcbiAgICAgIF0uam9pbignXFxuJyk7XG5cbiAgICAgIG1vY2tGcy5yZWFkRmlsZS5tb2NrUmVzb2x2ZWRWYWx1ZShmaWxlQ29udGVudCk7XG5cbiAgICAgIC8vIFVzZSByZWZsZWN0aW9uIHRvIGFjY2VzcyBwcml2YXRlIG1ldGhvZCBmb3IgdGVzdGluZ1xuICAgICAgY29uc3QgYW55VHlwZXMgPSBhd2FpdCAocWFzIGFzIGFueSkuZmluZEFueVR5cGVzSW5GaWxlKCd0ZXN0LnRzJyk7XG5cbiAgICAgIGV4cGVjdChhbnlUeXBlcy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICAgIGV4cGVjdChhbnlUeXBlcy5zb21lKCh0OiBhbnkpID0+IHQuY29kZVNuaXBwZXQuaW5jbHVkZXMoJzogYW55JykpKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KGFueVR5cGVzLnNvbWUoKHQ6IGFueSkgPT4gdC5jb2RlU25pcHBldC5pbmNsdWRlcygnOiBhbnlbXScpKSkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChhbnlUeXBlcy5zb21lKCh0OiBhbnkpID0+IHQuY29kZVNuaXBwZXQuaW5jbHVkZXMoJ1JlY29yZDxzdHJpbmcsIGFueT4nKSkpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QoYW55VHlwZXMuc29tZSgodDogYW55KSA9PiB0LmNvZGVTbmlwcGV0LmluY2x1ZGVzKCdhcyBhbnknKSkpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGNhdGVnb3JpemUgYW55IHR5cGVzIGNvcnJlY3RseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3RDYXNlcyA9IFtcbiAgICAgICAgeyBjb2RlOiAnY2F0Y2ggKGVycm9yOiBhbnkpIHsnLCBleHBlY3RlZENhdGVnb3J5OiBBbnlUeXBlQ2F0ZWdvcnkuRVJST1JfSEFORExJTkcgfSxcbiAgICAgICAgeyBjb2RlOiAnY29uc3QgcmVzcG9uc2U6IGFueSA9IGF3YWl0IGFwaS5mZXRjaCgpOycsIGV4cGVjdGVkQ2F0ZWdvcnk6IEFueVR5cGVDYXRlZ29yeS5FWFRFUk5BTF9BUEkgfSxcbiAgICAgICAgeyBjb2RlOiAnY29uc3QgbW9ja0RhdGE6IGFueSA9IGplc3QuZm4oKTsnLCBleHBlY3RlZENhdGVnb3J5OiBBbnlUeXBlQ2F0ZWdvcnkuVEVTVF9NT0NLIH0sXG4gICAgICAgIHsgY29kZTogJ2NvbnN0IGNvbmZpZzogYW55ID0gb3B0aW9uczsnLCBleHBlY3RlZENhdGVnb3J5OiBBbnlUeXBlQ2F0ZWdvcnkuRFlOQU1JQ19DT05GSUcgfSxcbiAgICAgICAgeyBjb2RlOiAnY29uc3QgaXRlbXM6IGFueVtdID0gW107JywgZXhwZWN0ZWRDYXRlZ29yeTogQW55VHlwZUNhdGVnb3J5LkFSUkFZX1RZUEUgfSxcbiAgICAgICAgeyBjb2RlOiAnY29uc3QgZGF0YTogUmVjb3JkPHN0cmluZywgYW55PiA9IHt9OycsIGV4cGVjdGVkQ2F0ZWdvcnk6IEFueVR5cGVDYXRlZ29yeS5SRUNPUkRfVFlQRSB9XG4gICAgICBdO1xuXG4gICAgICBmb3IgKGNvbnN0IHRlc3RDYXNlIG9mIHRlc3RDYXNlcykge1xuICAgICAgICBjb25zdCBjYXRlZ29yeSA9IChxYXMgYXMgYW55KS5jYXRlZ29yaXplQW55VHlwZSh0ZXN0Q2FzZS5jb2RlKTtcbiAgICAgICAgZXhwZWN0KGNhdGVnb3J5KS50b0JlKHRlc3RDYXNlLmV4cGVjdGVkQ2F0ZWdvcnkpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBkZXRlcm1pbmUgZG9tYWluIGNvcnJlY3RseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3RDYXNlcyA9IFtcbiAgICAgICAgeyBwYXRoOiAnc3JjL3NlcnZpY2VzL2FzdHJvbG9neS9wbGFuZXRhcnkudHMnLCBleHBlY3RlZERvbWFpbjogQ29kZURvbWFpbi5BU1RST0xPR0lDQUwgfSxcbiAgICAgICAgeyBwYXRoOiAnc3JjL2NvbXBvbmVudHMvcmVjaXBlL1JlY2lwZUNhcmQudHN4JywgZXhwZWN0ZWREb21haW46IENvZGVEb21haW4uUkVDSVBFIH0sXG4gICAgICAgIHsgcGF0aDogJ3NyYy9zZXJ2aWNlcy9jYW1wYWlnbi9DYW1wYWlnbkNvbnRyb2xsZXIudHMnLCBleHBlY3RlZERvbWFpbjogQ29kZURvbWFpbi5DQU1QQUlHTiB9LFxuICAgICAgICB7IHBhdGg6ICdzcmMvc2VydmljZXMvaW50ZWxsaWdlbmNlL0FJU2VydmljZS50cycsIGV4cGVjdGVkRG9tYWluOiBDb2RlRG9tYWluLklOVEVMTElHRU5DRSB9LFxuICAgICAgICB7IHBhdGg6ICdzcmMvc2VydmljZXMvYXBpL0FwaVNlcnZpY2UudHMnLCBleHBlY3RlZERvbWFpbjogQ29kZURvbWFpbi5TRVJWSUNFIH0sXG4gICAgICAgIHsgcGF0aDogJ3NyYy9jb21wb25lbnRzL3VpL0J1dHRvbi50c3gnLCBleHBlY3RlZERvbWFpbjogQ29kZURvbWFpbi5DT01QT05FTlQgfSxcbiAgICAgICAgeyBwYXRoOiAnc3JjL3V0aWxzL2hlbHBlcnMudHMnLCBleHBlY3RlZERvbWFpbjogQ29kZURvbWFpbi5VVElMSVRZIH0sXG4gICAgICAgIHsgcGF0aDogJ3NyYy9fX3Rlc3RzX18vc2VydmljZS50ZXN0LnRzJywgZXhwZWN0ZWREb21haW46IENvZGVEb21haW4uVEVTVCB9XG4gICAgICBdO1xuXG4gICAgICBmb3IgKGNvbnN0IHRlc3RDYXNlIG9mIHRlc3RDYXNlcykge1xuICAgICAgICBjb25zdCBkb21haW4gPSAocWFzIGFzIGFueSkuZGV0ZXJtaW5lRG9tYWluKHRlc3RDYXNlLnBhdGgpO1xuICAgICAgICBleHBlY3QoZG9tYWluKS50b0JlKHRlc3RDYXNlLmV4cGVjdGVkRG9tYWluKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2NvbW1lbnQgcXVhbGl0eSBhc3Nlc3NtZW50JywgKCkgPT4ge1xuICAgIGNvbnN0IHF1YWxpdHlUZXN0Q2FzZXMgPSBbXG4gICAgICB7XG4gICAgICAgIGNvbW1lbnQ6ICcnLFxuICAgICAgICBleHBlY3RlZFF1YWxpdHk6ICdwb29yJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdlbXB0eSBjb21tZW50J1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY29tbWVudDogJ2FueScsXG4gICAgICAgIGV4cGVjdGVkUXVhbGl0eTogJ3Bvb3InLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ21pbmltYWwgY29tbWVudCdcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbW1lbnQ6ICdJbnRlbnRpb25hbGx5IGFueSBmb3IgQVBJJyxcbiAgICAgICAgZXhwZWN0ZWRRdWFsaXR5OiAnZ29vZCcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnYmFzaWMgaW50ZW50aW9uYWwgY29tbWVudCdcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbW1lbnQ6ICdJbnRlbnRpb25hbGx5IGFueTogRXh0ZXJuYWwgQVBJIHJlc3BvbnNlIHJlcXVpcmVzIGZsZXhpYmxlIHR5cGluZycsXG4gICAgICAgIGV4cGVjdGVkUXVhbGl0eTogJ2V4Y2VsbGVudCcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnZ29vZCBxdWFsaXR5IGNvbW1lbnQgd2l0aCBleHBsYW5hdGlvbidcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNvbW1lbnQ6ICdJbnRlbnRpb25hbGx5IGFueTogRXh0ZXJuYWwgQVBJIHJlc3BvbnNlIHJlcXVpcmVzIGZsZXhpYmxlIHR5cGluZyBiZWNhdXNlIHRoZSBzdHJ1Y3R1cmUgdmFyaWVzIGJldHdlZW4gZGlmZmVyZW50IGVuZHBvaW50cyBhbmQgdmVyc2lvbnMsIGFuZCB3ZSBuZWVkIHRvIG1haW50YWluIGNvbXBhdGliaWxpdHkgd2l0aCBsZWdhY3kgc3lzdGVtcycsXG4gICAgICAgIGV4cGVjdGVkUXVhbGl0eTogJ2V4Y2VsbGVudCcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnZXhjZWxsZW50IHF1YWxpdHkgY29tbWVudCB3aXRoIGRldGFpbGVkIGV4cGxhbmF0aW9uJ1xuICAgICAgfVxuICAgIF07XG5cbiAgICBxdWFsaXR5VGVzdENhc2VzLmZvckVhY2goKHsgY29tbWVudCwgZXhwZWN0ZWRRdWFsaXR5LCBkZXNjcmlwdGlvbiB9KSA9PiB7XG4gICAgICBpdChgc2hvdWxkIGFzc2VzcyAke2Rlc2NyaXB0aW9ufSBhcyAke2V4cGVjdGVkUXVhbGl0eX1gLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHF1YWxpdHkgPSAocWFzIGFzIGFueSkuYXNzZXNzQ29tbWVudFF1YWxpdHkoY29tbWVudCk7XG4gICAgICAgIGV4cGVjdChxdWFsaXR5KS50b0JlKGV4cGVjdGVkUXVhbGl0eSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0VTTGludCBkaXNhYmxlIGNvbW1lbnQgZGV0ZWN0aW9uJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgZGV0ZWN0IEVTTGludCBkaXNhYmxlIGNvbW1lbnRzJywgKCkgPT4ge1xuICAgICAgY29uc3QgbGluZXMgPSBbXG4gICAgICAgICdmdW5jdGlvbiB0ZXN0KCkgeycsXG4gICAgICAgICcgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55JyxcbiAgICAgICAgJyAgY29uc3QgZGF0YTogYW55ID0gcmVzcG9uc2U7JyxcbiAgICAgICAgJ30nXG4gICAgICBdO1xuXG4gICAgICBjb25zdCBoYXNEaXNhYmxlID0gKHFhcyBhcyBhbnkpLmhhc0VzbGludERpc2FibGVDb21tZW50KGxpbmVzLCAyKTtcbiAgICAgIGV4cGVjdChoYXNEaXNhYmxlKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBkZXRlY3QgRVNMaW50IGRpc2FibGUgY29tbWVudHMgd2l0aCBleHBsYW5hdGlvbnMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBsaW5lcyA9IFtcbiAgICAgICAgJ2Z1bmN0aW9uIHRlc3QoKSB7JyxcbiAgICAgICAgJyAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgLS0gRXh0ZXJuYWwgQVBJIGNvbXBhdGliaWxpdHknLFxuICAgICAgICAnICBjb25zdCBkYXRhOiBhbnkgPSByZXNwb25zZTsnLFxuICAgICAgICAnfSdcbiAgICAgIF07XG5cbiAgICAgIGNvbnN0IGhhc0V4cGxhbmF0aW9uID0gKHFhcyBhcyBhbnkpLmVzbGludERpc2FibGVIYXNFeHBsYW5hdGlvbihsaW5lcywgMik7XG4gICAgICBleHBlY3QoaGFzRXhwbGFuYXRpb24pLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIG5vdCBkZXRlY3QgZXhwbGFuYXRpb24gaW4gYmFzaWMgZGlzYWJsZSBjb21tZW50JywgKCkgPT4ge1xuICAgICAgY29uc3QgbGluZXMgPSBbXG4gICAgICAgICdmdW5jdGlvbiB0ZXN0KCkgeycsXG4gICAgICAgICcgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55JyxcbiAgICAgICAgJyAgY29uc3QgZGF0YTogYW55ID0gcmVzcG9uc2U7JyxcbiAgICAgICAgJ30nXG4gICAgICBdO1xuXG4gICAgICBjb25zdCBoYXNFeHBsYW5hdGlvbiA9IChxYXMgYXMgYW55KS5lc2xpbnREaXNhYmxlSGFzRXhwbGFuYXRpb24obGluZXMsIDIpO1xuICAgICAgZXhwZWN0KGhhc0V4cGxhbmF0aW9uKS50b0JlKGZhbHNlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3NldmVyaXR5IGFzc2Vzc21lbnQnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBhc3Nlc3Mgc2V2ZXJpdHkgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgICAgY29uc3QgdGVzdENhc2VzID0gW1xuICAgICAgICB7XG4gICAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgZmlsZVBhdGg6ICdzcmMvc2VydmljZS50cycsXG4gICAgICAgICAgICBjb2RlU25pcHBldDogJ3Byb2Nlc3NEYXRhKGRhdGE6IGFueSk6IHZvaWQnLFxuICAgICAgICAgICAgaXNJblRlc3RGaWxlOiBmYWxzZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZXhwZWN0ZWRTZXZlcml0eTogJ2hpZ2gnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICBmaWxlUGF0aDogJ3NyYy9jb21wb25lbnQudHN4JyxcbiAgICAgICAgICAgIGNvZGVTbmlwcGV0OiAnY29uc3QgcHJvcHM6IGFueSA9IHt9JyxcbiAgICAgICAgICAgIGlzSW5UZXN0RmlsZTogZmFsc2VcbiAgICAgICAgICB9LFxuICAgICAgICAgIGV4cGVjdGVkU2V2ZXJpdHk6ICdsb3cnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICBmaWxlUGF0aDogJ3NyYy90ZXN0LnRlc3QudHMnLFxuICAgICAgICAgICAgY29kZVNuaXBwZXQ6ICdjb25zdCBtb2NrOiBhbnkgPSB7fScsXG4gICAgICAgICAgICBpc0luVGVzdEZpbGU6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIGV4cGVjdGVkU2V2ZXJpdHk6ICdsb3cnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICBmaWxlUGF0aDogJ3NyYy91dGlscy50cycsXG4gICAgICAgICAgICBjb2RlU25pcHBldDogJ2Z1bmN0aW9uIHByb2Nlc3MoZGF0YTogYW55W10pOiBhbnknLFxuICAgICAgICAgICAgaXNJblRlc3RGaWxlOiBmYWxzZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZXhwZWN0ZWRTZXZlcml0eTogJ21lZGl1bSdcbiAgICAgICAgfVxuICAgICAgXTtcblxuICAgICAgdGVzdENhc2VzLmZvckVhY2goKHsgY29udGV4dCwgZXhwZWN0ZWRTZXZlcml0eSB9KSA9PiB7XG4gICAgICAgIGNvbnN0IHNldmVyaXR5ID0gKHFhcyBhcyBhbnkpLmFzc2Vzc1NldmVyaXR5KGNvbnRleHQpO1xuICAgICAgICBleHBlY3Qoc2V2ZXJpdHkpLnRvQmUoZXhwZWN0ZWRTZXZlcml0eSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3JlY29tbWVuZGF0aW9uIGdlbmVyYXRpb24nLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBnZW5lcmF0ZSBhcHByb3ByaWF0ZSByZWNvbW1lbmRhdGlvbnMgZm9yIGxvdyBjb3ZlcmFnZScsICgpID0+IHtcbiAgICAgIGNvbnN0IHJlY29tbWVuZGF0aW9ucyA9IChxYXMgYXMgYW55KS5nZW5lcmF0ZVJlY29tbWVuZGF0aW9ucyhcbiAgICAgICAgMzAsIC8vIDMwJSBjb3ZlcmFnZVxuICAgICAgICB7IHBvb3I6IDUsIGZhaXI6IDIsIGdvb2Q6IDEsIGV4Y2VsbGVudDogMCB9LFxuICAgICAgICBbXVxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KHJlY29tbWVuZGF0aW9ucy5zb21lKChyOiBzdHJpbmcpID0+IHIuaW5jbHVkZXMoJ0NSSVRJQ0FMJykpKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlY29tbWVuZGF0aW9ucy5zb21lKChyOiBzdHJpbmcpID0+IHIuaW5jbHVkZXMoJ3Bvb3IgcXVhbGl0eScpKSkudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZ2VuZXJhdGUgYXBwcm9wcmlhdGUgcmVjb21tZW5kYXRpb25zIGZvciBnb29kIGNvdmVyYWdlJywgKCkgPT4ge1xuICAgICAgY29uc3QgcmVjb21tZW5kYXRpb25zID0gKHFhcyBhcyBhbnkpLmdlbmVyYXRlUmVjb21tZW5kYXRpb25zKFxuICAgICAgICA4NSwgLy8gODUlIGNvdmVyYWdlXG4gICAgICAgIHsgcG9vcjogMSwgZmFpcjogMiwgZ29vZDogNSwgZXhjZWxsZW50OiAzIH0sXG4gICAgICAgIFtdXG4gICAgICApO1xuXG4gICAgICBleHBlY3QocmVjb21tZW5kYXRpb25zLnNvbWUoKHI6IHN0cmluZykgPT4gci5pbmNsdWRlcygnR09PRCcpKSkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChyZWNvbW1lbmRhdGlvbnMuc29tZSgocjogc3RyaW5nKSA9PiByLmluY2x1ZGVzKCdyZW1haW5pbmcnKSkpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGdlbmVyYXRlIGFwcHJvcHJpYXRlIHJlY29tbWVuZGF0aW9ucyBmb3IgZXhjZWxsZW50IGNvdmVyYWdlJywgKCkgPT4ge1xuICAgICAgY29uc3QgcmVjb21tZW5kYXRpb25zID0gKHFhcyBhcyBhbnkpLmdlbmVyYXRlUmVjb21tZW5kYXRpb25zKFxuICAgICAgICA5OCwgLy8gOTglIGNvdmVyYWdlXG4gICAgICAgIHsgcG9vcjogMCwgZmFpcjogMSwgZ29vZDogMywgZXhjZWxsZW50OiA4IH0sXG4gICAgICAgIFtdXG4gICAgICApO1xuXG4gICAgICBleHBlY3QocmVjb21tZW5kYXRpb25zLnNvbWUoKHI6IHN0cmluZykgPT4gci5pbmNsdWRlcygnRVhDRUxMRU5UJykpKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlY29tbWVuZGF0aW9ucy5zb21lKChyOiBzdHJpbmcpID0+IHIuaW5jbHVkZXMoJ01haW50YWluJykpKS50b0JlKHRydWUpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9