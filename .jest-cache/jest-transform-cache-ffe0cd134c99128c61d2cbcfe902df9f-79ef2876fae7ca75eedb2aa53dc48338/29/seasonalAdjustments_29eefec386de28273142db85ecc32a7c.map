{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/calculations/culinary/seasonalAdjustments.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/calculations/culinary/seasonalAdjustments.ts"],"sourcesContent":["/**\n * Seasonal Adjustments Module\n * \n * Handles seasonal modifications to alchemical and elemental calculations\n * Repurposed from existing seasonalCalculations.ts\n */\n\nimport { ElementalProperties } from '@/types/alchemy';\n\n/**\n * Seasonal modifiers for elemental properties\n */\nconst SEASONAL_MODIFIERS: { [key: string]: ElementalProperties } = {\n  spring: { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25  },\n  summer: { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25  },\n  autumn: { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25  },\n  winter: { Fire: 0.15, Water: 0.35, Air: 0.2, Earth: 0.3  }\n};\n\n/**\n * Lunar phase modifiers\n */\nconst LUNAR_PHASE_MODIFIERS: { [key: string]: ElementalProperties } = {\n  'new moon': { Fire: 0.1, Water: 0.4, Air: 0.2, Earth: 0.3 },\n  'waxing crescent': { Fire: 0.2, Water: 0.3, Air: 0.3, Earth: 0.2 },\n  'first quarter': { Fire: 0.3, Water: 0.2, Air: 0.3, Earth: 0.2 },\n  'waxing gibbous': { Fire: 0.35, Water: 0.15, Air: 0.35, Earth: 0.15 },\n  'full moon': { Fire: 0.4, Water: 0.1, Air: 0.4, Earth: 0.1 },\n  'waning gibbous': { Fire: 0.3, Water: 0.2, Air: 0.3, Earth: 0.2 },\n  'third quarter': { Fire: 0.2, Water: 0.3, Air: 0.2, Earth: 0.3 },\n  'waning crescent': { Fire: 0.15, Water: 0.25, Air: 0.25, Earth: 0.35 }\n};\n\n/**\n * Apply seasonal adjustments to elemental properties\n */\nexport function applySeasonalAdjustments(\n  baseProperties: ElementalProperties,\n  season: string = 'spring'\n): ElementalProperties {\n  const seasonKey = season?.toLowerCase();\n  const modifier = SEASONAL_MODIFIERS[seasonKey] || SEASONAL_MODIFIERS.spring;\n  \n  return { Fire: (baseProperties.Fire * 0.7) + (modifier.Fire * 0.3), Water: (baseProperties.Water * 0.7) + (modifier.Water * 0.3), Air: (baseProperties.Air * 0.7) + (modifier.Air * 0.3), Earth: (baseProperties.Earth * 0.7) + (modifier.Earth * 0.3)\n   };\n}\n\n/**\n * Apply lunar phase adjustments to elemental properties\n */\nexport function applyLunarPhaseAdjustments(\n  baseProperties: ElementalProperties,\n  lunarPhase: string = 'full moon'\n): ElementalProperties {\n  const phaseKey = lunarPhase?.toLowerCase();\n  const modifier = LUNAR_PHASE_MODIFIERS[phaseKey] || LUNAR_PHASE_MODIFIERS['full moon'];\n  \n  return { Fire: (baseProperties.Fire * 0.8) + (modifier.Fire * 0.2), Water: (baseProperties.Water * 0.8) + (modifier.Water * 0.2), Air: (baseProperties.Air * 0.8) + (modifier.Air * 0.2), Earth: (baseProperties.Earth * 0.8) + (modifier.Earth * 0.2)\n   };\n}\n\n/**\n * Calculate time-of-day adjustments\n */\nexport function applyTimeOfDayAdjustments(\n  baseProperties: ElementalProperties,\n  isDaytime: boolean = true\n): ElementalProperties {\n  if (isDaytime) {\n    return { Fire: baseProperties.Fire * 1.2, Water: baseProperties.Water * 0.9, Air: baseProperties.Air * 1.1, Earth: baseProperties.Earth * 0.95\n     };\n  } else {\n    return { Fire: baseProperties.Fire * 0.8, Water: baseProperties.Water * 1.2, Air: baseProperties.Air * 0.9, Earth: baseProperties.Earth * 1.1\n     };\n  }\n}\n\n/**\n * Get seasonal cooking recommendations\n */\nexport function getSeasonalCookingRecommendations(season: string): {\n  cookingMethods: string[];\n  ingredients: string[];\n  flavors: string[];\n  timing: string[];\n} {\n  const seasonKey = season?.toLowerCase();\n  \n  const recommendations = {\n    spring: {\n      cookingMethods: ['Steaming', 'Light sautéing', 'Raw preparations', 'Quick grilling'],\n      ingredients: ['Fresh greens', 'Young vegetables', 'Herbs', 'Light proteins'],\n      flavors: ['Fresh', 'Green', 'Mild', 'Cleansing'],\n      timing: ['Morning', 'Early afternoon', 'Light meals']\n    },\n    summer: {\n      cookingMethods: ['Grilling', 'Cold preparations', 'Minimal cooking', 'Smoking'],\n      ingredients: ['Fruits', 'Light vegetables', 'Cooling herbs', 'Lean proteins'],\n      flavors: ['Cooling', 'Refreshing', 'Bright', 'Citrusy'],\n      timing: ['Early morning', 'Evening', 'Cold dishes']\n    },\n    autumn: {\n      cookingMethods: ['Roasting', 'Braising', 'Slow cooking', 'Baking'],\n      ingredients: ['Root vegetables', 'Squashes', 'Warming spices', 'Hearty proteins'],\n      flavors: ['Warming', 'Rich', 'Spiced', 'Comforting'],\n      timing: ['Afternoon', 'Evening', 'Longer cooking times']\n    },\n    winter: {\n      cookingMethods: ['Slow braising', 'Stewing', 'Deep roasting', 'Pressure cooking'],\n      ingredients: ['Stored vegetables', 'Preserved foods', 'Warming herbs', 'Rich proteins'],\n      flavors: ['Warming', 'Deep', 'Nourishing', 'Grounding'],\n      timing: ['All day cooking', 'Evening meals', 'Warming preparations']\n    }\n  };\n  \n  return recommendations[seasonKey] || recommendations.spring;\n}\n\n/**\n * Calculate seasonal effectiveness score for a recipe\n */\nexport function calculateSeasonalEffectiveness(\n  recipeElements: ElementalProperties,\n  season: string,\n  lunarPhase?: string\n): {\n  score: number;\n  breakdown: {\n    seasonalAlignment: number;\n    lunarAlignment: number;\n    overallHarmony: number;\n  };\n  recommendations: string[];\n} {\n  const seasonKey = season?.toLowerCase();\n  const seasonalModifier = SEASONAL_MODIFIERS[seasonKey] || SEASONAL_MODIFIERS.spring;\n  \n  // Calculate seasonal alignment\n  const seasonalAlignment = calculateElementalAlignment(recipeElements, seasonalModifier);\n  \n  // Calculate lunar alignment if phase provided\n  let lunarAlignment = 0.5; // neutral if no phase\n  if (lunarPhase) {\n    const phaseKey = lunarPhase?.toLowerCase();\n    const lunarModifier = LUNAR_PHASE_MODIFIERS[phaseKey] || LUNAR_PHASE_MODIFIERS['full moon'];\n    lunarAlignment = calculateElementalAlignment(recipeElements, lunarModifier);\n  }\n  \n  // Calculate overall harmony\n  const overallHarmony = calculateElementalHarmony(recipeElements);\n  \n  // Overall score (weighted average)\n  const score = (seasonalAlignment * 0.5) + (lunarAlignment * 0.3) + (overallHarmony * 0.2);\n  \n  // Generate recommendations\n  const recommendations = generateSeasonalRecommendations(score, seasonalAlignment, lunarAlignment);\n  \n  return {\n    score,\n    breakdown: {\n      seasonalAlignment,\n      lunarAlignment,\n      overallHarmony\n    },\n    recommendations\n  };\n}\n\n/**\n * Calculate alignment between two elemental property sets\n */\nfunction calculateElementalAlignment(\n  properties1: ElementalProperties,\n  properties2: ElementalProperties\n): number {\n  const differences = [\n    Math.abs(properties1.Fire - properties2.Fire),\n    Math.abs(properties1.Water - properties2.Water),\n    Math.abs(properties1.Air - properties2.Air),\n    Math.abs(properties1.Earth - properties2.Earth)\n  ];\n  \n  const averageDifference = differences.reduce((sum, diff) => sum + diff, 0) / 4;\n  return Math.max(0, 1 - averageDifference);\n}\n\n/**\n * Calculate elemental harmony (how balanced the elements are)\n */\nfunction calculateElementalHarmony(properties: ElementalProperties): number {\n  const values = [properties.Fire, properties.Water, properties.Air, properties.Earth];\n  const average = values.reduce((sum, val) => sum + val, 0) / 4;\n  const variance = values.reduce((sum, val) => sum + Math.pow(val - average, 2), 0) / 4;\n  \n  // Lower variance = higher harmony\n  return Math.max(0, 1 - (variance * 4));\n}\n\n/**\n * Generate seasonal recommendations based on scores\n */\nfunction generateSeasonalRecommendations(\n  overallScore: number,\n  seasonalAlignment: number,\n  lunarAlignment: number\n): string[] {\n  const recommendations: string[] = [];\n  \n  if (overallScore >= 0.8) {\n    recommendations?.push('Excellent seasonal alignment - perfect timing for this recipe');\n  } else if (overallScore >= 0.6) {\n    recommendations?.push('Good seasonal match - recipe works well for this time');\n  } else if (overallScore >= 0.4) {\n    recommendations?.push('Moderate seasonal fit - consider minor adjustments');\n  } else {\n    recommendations?.push('Low seasonal alignment - significant modifications recommended');\n  }\n  \n  if (seasonalAlignment < 0.5) {\n    recommendations?.push('Adjust cooking method to better match seasonal energy');\n  }\n  \n  if (lunarAlignment < 0.5) {\n    recommendations?.push('Consider timing preparation with a more favorable lunar phase');\n  }\n  \n  return recommendations;\n}\n\nexport default {\n  applySeasonalAdjustments,\n  applyLunarPhaseAdjustments,\n  applyTimeOfDayAdjustments,\n  getSeasonalCookingRecommendations,\n  calculateSeasonalEffectiveness\n}; "],"version":3}