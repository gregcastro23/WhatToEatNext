{"file":"/Users/GregCastro/Desktop/WhatToEatNext/backups/first-wave-2025-08-11T05-19-26-813Z/src/services/campaign/unintentional-any-elimination/__tests__/IntegrationWorkflows.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/backups/first-wave-2025-08-11T05-19-26-813Z/src/services/campaign/unintentional-any-elimination/__tests__/IntegrationWorkflows.test.ts"],"sourcesContent":["/**\n * Integration Tests for End-to-End Workflows\n * Tests complete classification and replacement workflows, campaign system integration,\n * safety protocol activation, and realistic batch processing scenarios\n */\n\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\nimport { AnyTypeClassifier } from '../AnyTypeClassifier';\nimport { DomainContextAnalyzer } from '../DomainContextAnalyzer';\nimport { ProgressiveImprovementEngine } from '../ProgressiveImprovementEngine';\nimport { SafeTypeReplacer } from '../SafeTypeReplacer';\nimport { UnintentionalAnyEliminationCampaign } from '../UnintentionalAnyEliminationCampaign';\nimport {\n    AnyTypeCategory,\n    ClassificationContext,\n    CodeDomain,\n    UnintentionalAnyConfig\n} from '../types';\n\n// Mock dependencies\njest.mock('fs');\njest.mock('child_process');\n\nconst mockFs = fs as jest.Mocked<typeof fs>;\nconst mockExecSync = execSync as jest.MockedFunction<typeof execSync>;\n\ndescribe('Integration Workflows', () => {\n  let classifier: AnyTypeClassifier;\n  let replacer: SafeTypeReplacer;\n  let analyzer: DomainContextAnalyzer;\n  let engine: ProgressiveImprovementEngine;\n  let campaign: UnintentionalAnyEliminationCampaign;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    classifier = new AnyTypeClassifier();\n    replacer = new SafeTypeReplacer('./.test-backups', 0.7, 30000, 3);\n    analyzer = new DomainContextAnalyzer();\n    engine = new ProgressiveImprovementEngine();\n    campaign = new UnintentionalAnyEliminationCampaign();\n\n    // Mock file system defaults\n    mockFs.existsSync.mockReturnValue(true);\n    mockFs.mkdirSync.mockImplementation(() => undefined as any);\n    mockFs.readFileSync.mockReturnValue('const data: any = {};');\n    mockFs.writeFileSync.mockImplementation(() => undefined);\n    mockFs.readdirSync.mockReturnValue([]);\n    mockFs.statSync.mockReturnValue({ mtime: new Date() } as any);\n\n    // Mock successful TypeScript compilation by default\n    mockExecSync.mockImplementation((command) => {\n      if (command.includes('grep -c \"error TS\"')) {\n        const error = new Error('No matches') as any;\n        error.status = 1;\n        throw error;\n      }\n      if (command.includes('grep -r -l')) {\n        return 'src/test1.ts\\nsrc/test2.ts\\n';\n      }\n      return '';\n    });\n  });\n\n  describe('Complete Classification and Replacement Workflows', () => {\n    test('should execute complete workflow from classification to replacement', async () => {\n      // Setup test scenario with various any types\n      const testFiles = {\n        'src/arrays.ts': 'const items: any[] = []; const data: Array<any> = [];',\n        'src/records.ts': 'const config: Record<string, any> = {}; const map: { [key: string]: any } = {};',\n        'src/functions.ts': 'function process(param: any): any { return param; }',\n        'src/errors.ts': '} catch (error: any) { console.log(error); }',\n        'src/api.ts': 'const response: any = await fetch(\"/api/data\");'\n      };\n\n      mockFs.readFileSync.mockImplementation((path: any) => {\n        const fileName = path.toString();\n        for (const [file, content] of Object.entries(testFiles)) {\n          if (fileName.includes(file.split('/').pop()?.replace('.ts', ''))) {\n            return content;\n          }\n        }\n        return 'backup content';\n      });\n\n      // Step 1: Analyze domain context for each file\n      const contexts: ClassificationContext[] = [];\n      for (const [filePath, content] of Object.entries(testFiles)) {\n        const lines = content.split('\\n');\n        for (let i = 0; i < lines.length; i++) {\n          if (lines[i].includes(': any')) {\n            const context: ClassificationContext = {\n              filePath,\n              lineNumber: i + 1,\n              codeSnippet: lines[i],\n              surroundingLines: [],\n              hasExistingComment: false,\n              isInTestFile: false,\n              domainContext: await analyzer.analyzeDomain({\n                filePath,\n                lineNumber: i + 1,\n                codeSnippet: lines[i],\n                surroundingLines: [],\n                hasExistingComment: false,\n                isInTestFile: false,\n                domainContext: { domain: CodeDomain.UTILITY, intentionalityHints: [], suggestedTypes: [], preservationReasons: [] }\n              })\n            };\n            contexts.push(context);\n          }\n        }\n      }\n\n      expect(contexts.length).toBeGreaterThan(0);\n\n      // Step 2: Classify all any types\n      const classifications = await classifier.classifyBatch(contexts);\n      expect(classifications).toHaveLength(contexts.length);\n\n      // Verify classification results\n      const arrayClassifications = classifications.filter(c => c.category === AnyTypeCategory.ARRAY_TYPE);\n      const recordClassifications = classifications.filter(c => c.category === AnyTypeCategory.RECORD_TYPE);\n      const errorClassifications = classifications.filter(c => c.category === AnyTypeCategory.ERROR_HANDLING);\n      const apiClassifications = classifications.filter(c => c.category === AnyTypeCategory.EXTERNAL_API);\n\n      expect(arrayClassifications.length).toBeGreaterThan(0);\n      expect(recordClassifications.length).toBeGreaterThan(0);\n      expect(errorClassifications.length).toBeGreaterThan(0);\n      expect(apiClassifications.length).toBeGreaterThan(0);\n\n      // Step 3: Create replacements for unintentional types\n      const replacements = classifications\n        .filter(c => !c.isIntentional && c.suggestedReplacement)\n        .map((c, i) => ({\n          original: 'any',\n          replacement: c.suggestedReplacement!,\n          filePath: contexts[i].filePath,\n          lineNumber: contexts[i].lineNumber,\n          confidence: c.confidence,\n          validationRequired: true\n        }));\n\n      expect(replacements.length).toBeGreaterThan(0);\n\n      // Step 4: Apply replacements with safety validation\n      const replacementResult = await replacer.processBatch(replacements);\n\n      expect(replacementResult.success).toBe(true);\n      expect(replacementResult.appliedReplacements.length).toBeGreaterThan(0);\n      expect(replacementResult.rollbackPerformed).toBe(false);\n\n      // Verify that intentional types (errors, API responses) were preserved\n      const intentionalTypes = classifications.filter(c => c.isIntentional);\n      expect(intentionalTypes.length).toBeGreaterThan(0);\n      expect(intentionalTypes.some(c => c.category === AnyTypeCategory.ERROR_HANDLING)).toBe(true);\n      expect(intentionalTypes.some(c => c.category === AnyTypeCategory.EXTERNAL_API)).toBe(true);\n    });\n\n    test('should handle mixed success and failure scenarios', async () => {\n      const mixedScenarios = {\n        'src/safe.ts': 'const items: any[] = []; const data: Record<string, any> = {};',\n        'src/risky.ts': 'const complex: any = getComplexObject(); function dangerous(param: any): any { return param; }',\n        'src/intentional.ts': '} catch (error: any) { /* Intentionally any: error handling */ }'\n      };\n\n      mockFs.readFileSync.mockImplementation((path: any) => {\n        const fileName = path.toString();\n        for (const [file, content] of Object.entries(mixedScenarios)) {\n          if (fileName.includes(file.split('/').pop()?.replace('.ts', ''))) {\n            return content;\n          }\n        }\n        return 'backup content';\n      });\n\n      // Mock compilation to fail for risky replacements\n      let compilationAttempts = 0;\n      mockExecSync.mockImplementation((command) => {\n        if (command.includes('tsc')) {\n          compilationAttempts++;\n          if (compilationAttempts > 2) { // Fail after a few attempts\n            const error = new Error('Compilation failed') as any;\n            error.stdout = 'error TS2322: Type mismatch in dangerous function';\n            throw error;\n          }\n        }\n        if (command.includes('grep -c \"error TS\"')) {\n          const error = new Error('No matches') as any;\n          error.status = 1;\n          throw error;\n        }\n        return '';\n      });\n\n      const config: UnintentionalAnyConfig = {\n        maxFilesPerBatch: 3,\n        targetReductionPercentage: 15,\n        confidenceThreshold: 0.8,\n        enableDomainAnalysis: true,\n        enableDocumentation: true,\n        safetyLevel: 'MODERATE',\n        validationFrequency: 1\n      };\n\n      const batchResult = await engine.executeBatch(config);\n\n      expect(batchResult.filesProcessed).toBeGreaterThan(0);\n      expect(batchResult.replacementsAttempted).toBeGreaterThan(0);\n      // Some replacements should succeed, others may fail due to compilation issues\n      expect(batchResult.replacementsSuccessful).toBeGreaterThanOrEqual(0);\n\n      if (batchResult.rollbacksPerformed > 0) {\n        expect(batchResult.safetyScore).toBeLessThan(1.0);\n      }\n    });\n\n    test('should preserve domain-specific intentional any types', async () => {\n      const domainSpecificFiles = {\n        'src/calculations/planetary/positions.ts': `\n          const planetaryData: any = await getReliablePlanetaryPositions();\n          const transitDates: any = validateTransitDate(planet, date, sign);\n        `,\n        'src/data/ingredients/spices.ts': `\n          const spiceData: any = await fetchSpiceInfo();\n          const ingredient: any = processIngredientData();\n        `,\n        'src/services/campaign/metrics.ts': `\n          const campaignConfig: any = getDynamicConfig();\n          const metrics: any = calculateProgressMetrics();\n        `\n      };\n\n      mockFs.readFileSync.mockImplementation((path: any) => {\n        const fileName = path.toString();\n        for (const [file, content] of Object.entries(domainSpecificFiles)) {\n          if (fileName.includes(file.split('/').slice(-1)[0].replace('.ts', ''))) {\n            return content;\n          }\n        }\n        return 'backup content';\n      });\n\n      // Process each domain-specific file\n      const results = [];\n      for (const [filePath, content] of Object.entries(domainSpecificFiles)) {\n        const lines = content.trim().split('\\n').filter(line => line.trim());\n\n        for (let i = 0; i < lines.length; i++) {\n          if (lines[i].includes(': any')) {\n            const context: ClassificationContext = {\n              filePath,\n              lineNumber: i + 1,\n              codeSnippet: lines[i].trim(),\n              surroundingLines: lines.slice(Math.max(0, i-1), i+2),\n              hasExistingComment: false,\n              isInTestFile: false,\n              domainContext: await analyzer.analyzeDomain({\n                filePath,\n                lineNumber: i + 1,\n                codeSnippet: lines[i].trim(),\n                surroundingLines: [],\n                hasExistingComment: false,\n                isInTestFile: false,\n                domainContext: { domain: CodeDomain.UTILITY, intentionalityHints: [], suggestedTypes: [], preservationReasons: [] }\n              })\n            };\n\n            const classification = await classifier.classify(context);\n            results.push({ context, classification });\n          }\n        }\n      }\n\n      // Verify domain-specific preservation\n      const astrologicalResults = results.filter(r =>\n        r.context.filePath.includes('planetary') || r.context.filePath.includes('calculations')\n      );\n      const recipeResults = results.filter(r =>\n        r.context.filePath.includes('ingredients') || r.context.filePath.includes('spices')\n      );\n      const campaignResults = results.filter(r =>\n        r.context.filePath.includes('campaign') || r.context.filePath.includes('metrics')\n      );\n\n      // Astrological domain should preserve most any types\n      expect(astrologicalResults.some(r => r.classification.isIntentional)).toBe(true);\n\n      // Recipe domain should suggest specific types for some cases\n      expect(recipeResults.some(r => !r.classification.isIntentional && r.classification.suggestedReplacement)).toBe(true);\n\n      // Campaign domain should preserve flexible configurations\n      expect(campaignResults.some(r => r.classification.isIntentional)).toBe(true);\n    });\n  });\n\n  describe('Campaign System Integration', () => {\n    test('should integrate with existing campaign infrastructure', async () => {\n      const campaignConfig: UnintentionalAnyConfig = {\n        maxFilesPerBatch: 5,\n        targetReductionPercentage: 20,\n        confidenceThreshold: 0.85,\n        enableDomainAnalysis: true,\n        enableDocumentation: true,\n        safetyLevel: 'HIGH',\n        validationFrequency: 3\n      };\n\n      // Mock campaign execution\n      mockFs.readFileSync.mockImplementation((path: any) => {\n        if (path.includes('test')) {\n          return 'const items: any[] = []; const data: Record<string, any> = {};';\n        }\n        return 'backup content';\n      });\n\n      const campaignResult = await campaign.execute(campaignConfig);\n\n      expect(campaignResult).toBeDefined();\n      expect(campaignResult.totalAnyTypesAnalyzed).toBeGreaterThanOrEqual(0);\n      expect(campaignResult.reductionAchieved).toBeGreaterThanOrEqual(0);\n      expect(campaignResult.safetyEvents).toBeInstanceOf(Array);\n      expect(campaignResult.validationResults).toBeInstanceOf(Array);\n    });\n\n    test('should follow campaign safety protocols', async () => {\n      // Mock scenario that triggers safety protocols\n      let errorCount = 0;\n      mockExecSync.mockImplementation((command) => {\n        if (command.includes('grep -c \"error TS\"')) {\n          errorCount++;\n          if (errorCount > 2) {\n            return '15'; // Return increasing error count\n          }\n          const error = new Error('No matches') as any;\n          error.status = 1;\n          throw error;\n        }\n        if (command.includes('grep -r -l')) {\n          return 'src/problematic.ts\\n';\n        }\n        return '';\n      });\n\n      mockFs.readFileSync.mockReturnValue('const dangerous: any = performRiskyOperation();');\n\n      const campaignConfig: UnintentionalAnyConfig = {\n        maxFilesPerBatch: 1,\n        targetReductionPercentage: 10,\n        confidenceThreshold: 0.7,\n        enableDomainAnalysis: true,\n        enableDocumentation: true,\n        safetyLevel: 'MAXIMUM',\n        validationFrequency: 1\n      };\n\n      const campaignResult = await campaign.execute(campaignConfig);\n\n      expect(campaignResult.safetyEvents.length).toBeGreaterThan(0);\n      expect(campaignResult.safetyEvents.some(event =>\n        event.type === 'LOW_SAFETY_SCORE' || event.type === 'BATCH_FAILURE'\n      )).toBe(true);\n    });\n\n    test('should integrate with progress tracking and metrics', async () => {\n      mockFs.readFileSync.mockImplementation((path: any) => {\n        if (path.includes('metrics')) {\n          return 'const progressData: any = getMetrics(); const config: Record<string, any> = {};';\n        }\n        return 'const items: any[] = [];';\n      });\n\n      const initialProgress = await engine.getProgressMetrics();\n      expect(initialProgress).toBeDefined();\n      expect(initialProgress.totalAnyTypes).toBeGreaterThanOrEqual(0);\n\n      const batchResult = await engine.executeBatch({\n        maxFilesPerBatch: 2,\n        targetReductionPercentage: 15,\n        confidenceThreshold: 0.8,\n        enableDomainAnalysis: true,\n        enableDocumentation: true,\n        safetyLevel: 'MODERATE',\n        validationFrequency: 5\n      });\n\n      const finalProgress = await engine.getProgressMetrics();\n      expect(finalProgress).toBeDefined();\n\n      const batchHistory = engine.getBatchHistory();\n      expect(batchHistory).toContain(batchResult);\n      expect(batchHistory.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Safety Protocol Activation and Rollback Scenarios', () => {\n    test('should activate rollback on compilation failures', async () => {\n      mockFs.readFileSync.mockReturnValue('const data: any = getValue();');\n\n      // Mock compilation failure\n      mockExecSync.mockImplementation((command) => {\n        if (command.includes('tsc')) {\n          const error = new Error('Compilation failed') as any;\n          error.stdout = 'error TS2322: Type \"unknown\" is not assignable to type \"string\"';\n          throw error;\n        }\n        return '';\n      });\n\n      const replacement = {\n        original: 'any',\n        replacement: 'unknown',\n        filePath: 'src/test.ts',\n        lineNumber: 1,\n        confidence: 0.9,\n        validationRequired: true\n      };\n\n      const result = await replacer.applyReplacement(replacement);\n\n      expect(result.success).toBe(false);\n      expect(result.rollbackPerformed).toBe(true);\n      expect(result.compilationErrors).toContain('error TS2322');\n    });\n\n    test('should handle emergency rollback scenarios', async () => {\n      const multipleReplacements = [\n        {\n          original: 'any[]',\n          replacement: 'unknown[]',\n          filePath: 'src/test1.ts',\n          lineNumber: 1,\n          confidence: 0.9,\n          validationRequired: true\n        },\n        {\n          original: 'any',\n          replacement: 'string',\n          filePath: 'src/test2.ts',\n          lineNumber: 1,\n          confidence: 0.8,\n          validationRequired: true\n        }\n      ];\n\n      mockFs.readFileSync.mockImplementation((path: any) => {\n        if (path.includes('test1')) return 'const items: any[] = [];';\n        if (path.includes('test2')) return 'const data: any = getValue();';\n        return 'backup content';\n      });\n\n      // Mock overall build failure after individual replacements succeed\n      let buildCheckCount = 0;\n      mockExecSync.mockImplementation((command) => {\n        if (command.includes('tsc') && command.includes('--noEmit')) {\n          buildCheckCount++;\n          if (buildCheckCount > 1) { // Fail on overall build check\n            const error = new Error('Overall build failed') as any;\n            error.stdout = 'error TS2322: Multiple type conflicts detected';\n            throw error;\n          }\n        }\n        return '';\n      });\n\n      const result = await replacer.processBatch(multipleReplacements);\n\n      expect(result.success).toBe(false);\n      expect(result.rollbackPerformed).toBe(true);\n      expect(result.compilationErrors).toContain('Multiple type conflicts detected');\n    });\n\n    test('should validate rollback integrity', async () => {\n      const replacement = {\n        original: 'any[]',\n        replacement: 'unknown[]',\n        filePath: 'src/test.ts',\n        lineNumber: 1,\n        confidence: 0.9,\n        validationRequired: true\n      };\n\n      const originalContent = 'const items: any[] = [];';\n      mockFs.readFileSync.mockImplementation((path: any) => {\n        if (path.includes('.backup')) {\n          return originalContent;\n        }\n        return originalContent;\n      });\n\n      // Mock compilation failure to trigger rollback\n      mockExecSync.mockImplementation(() => {\n        const error = new Error('Compilation failed') as any;\n        error.stdout = 'error TS2322: Type error';\n        throw error;\n      });\n\n      const result = await replacer.applyReplacement(replacement);\n\n      expect(result.success).toBe(false);\n      expect(result.rollbackPerformed).toBe(true);\n      expect(result.backupPath).toBeDefined();\n\n      // Verify backup was created and used for rollback\n      expect(mockFs.writeFileSync).toHaveBeenCalledWith(\n        expect.stringContaining('.backup'),\n        originalContent,\n        'utf8'\n      );\n    });\n  });\n\n  describe('Realistic Batch Processing with Actual Codebase Samples', () => {\n    test('should process realistic TypeScript codebase patterns', async () => {\n      const realisticCodeSamples = {\n        'src/components/RecipeCard.tsx': `\n          import React from 'react';\n          interface Props {\n            recipe: any;\n            onSelect: (recipe: any) => void;\n          }\n          export const RecipeCard: React.FC<Props> = ({ recipe, onSelect }) => {\n            const handleClick = (event: any) => {\n              event.preventDefault();\n              onSelect(recipe);\n            };\n            return <div onClick={handleClick}>{recipe.name}</div>;\n          };\n        `,\n        'src/services/ApiService.ts': `\n          class ApiService {\n            async fetchData(endpoint: string): Promise<any> {\n              try {\n                const response = await fetch(endpoint);\n                const data: any = await response.json();\n                return this.transformData(data);\n              } catch (error: any) {\n                console.error('API Error:', error);\n                throw error;\n              }\n            }\n\n            private transformData(data: any): any {\n              return { ...data, processed: true };\n            }\n          }\n        `,\n        'src/utils/helpers.ts': `\n          export const processItems = (items: any[]): any[] => {\n            return items.map((item: any) => ({\n              ...item,\n              id: item.id || generateId()\n            }));\n          };\n\n          export const createConfig = (): Record<string, any> => {\n            return {\n              apiUrl: process.env.API_URL,\n              timeout: 5000,\n              retries: 3\n            };\n          };\n        `,\n        'src/__tests__/helpers.test.ts': `\n          import { processItems } from '../utils/helpers';\n\n          describe('helpers', () => {\n            test('processItems', () => {\n              const mockItems: any[] = [{ name: 'test' }];\n              const result = processItems(mockItems);\n              expect(result).toBeDefined();\n            });\n\n            test('with mock data', () => {\n              const mockFn = jest.fn() as any;\n              mockFn.mockReturnValue({ data: 'test' });\n              expect(mockFn()).toEqual({ data: 'test' });\n            });\n          });\n        `\n      };\n\n      mockFs.readFileSync.mockImplementation((path: any) => {\n        const fileName = path.toString();\n        for (const [file, content] of Object.entries(realisticCodeSamples)) {\n          if (fileName.includes(file.split('/').pop()?.replace('.tsx', '').replace('.ts', ''))) {\n            return content;\n          }\n        }\n        return 'backup content';\n      });\n\n      mockExecSync.mockImplementation((command) => {\n        if (command.includes('grep -r -l')) {\n          return Object.keys(realisticCodeSamples).join('\\n');\n        }\n        if (command.includes('grep -c \"error TS\"')) {\n          const error = new Error('No matches') as any;\n          error.status = 1;\n          throw error;\n        }\n        return '';\n      });\n\n      const config: UnintentionalAnyConfig = {\n        maxFilesPerBatch: 4,\n        targetReductionPercentage: 15,\n        confidenceThreshold: 0.8,\n        enableDomainAnalysis: true,\n        enableDocumentation: true,\n        safetyLevel: 'MODERATE',\n        validationFrequency: 2\n      };\n\n      const batchResult = await engine.executeBatch(config);\n\n      expect(batchResult.filesProcessed).toBe(4);\n      expect(batchResult.anyTypesAnalyzed).toBeGreaterThan(10); // Multiple any types in samples\n      expect(batchResult.replacementsAttempted).toBeGreaterThan(0);\n\n      // Some replacements should be successful (arrays, records)\n      // Some should be preserved (error handling, test mocks, API responses)\n      expect(batchResult.replacementsSuccessful).toBeGreaterThanOrEqual(0);\n      expect(batchResult.safetyScore).toBeGreaterThan(0.5);\n    });\n\n    test('should handle large-scale batch processing', async () => {\n      // Generate a large number of files with various any type patterns\n      const generateFileContent = (index: number) => {\n        const patterns = [\n          `const items${index}: any[] = [];`,\n          `const config${index}: Record<string, any> = {};`,\n          `function process${index}(data: any): any { return data; }`,\n          `const response${index}: any = await fetch(\"/api/${index}\");`,\n          `} catch (error${index}: any) { console.log(error${index}); }`\n        ];\n        return patterns[index % patterns.length];\n      };\n\n      const fileCount = 50;\n      mockExecSync.mockImplementation((command) => {\n        if (command.includes('grep -r -l')) {\n          return Array(fileCount).fill(null).map((_, i) => `src/file${i}.ts`).join('\\n');\n        }\n        if (command.includes('grep -c \"error TS\"')) {\n          const error = new Error('No matches') as any;\n          error.status = 1;\n          throw error;\n        }\n        return '';\n      });\n\n      mockFs.readFileSync.mockImplementation((path: any) => {\n        const match = path.toString().match(/file(\\d+)\\.ts/);\n        if (match) {\n          const index = parseInt(match[1]);\n          return generateFileContent(index);\n        }\n        return 'backup content';\n      });\n\n      const config: UnintentionalAnyConfig = {\n        maxFilesPerBatch: 10,\n        targetReductionPercentage: 20,\n        confidenceThreshold: 0.8,\n        enableDomainAnalysis: true,\n        enableDocumentation: true,\n        safetyLevel: 'MODERATE',\n        validationFrequency: 5\n      };\n\n      const startTime = Date.now();\n      const campaignResult = await campaign.execute(config);\n      const endTime = Date.now();\n\n      expect(campaignResult.totalAnyTypesAnalyzed).toBeGreaterThan(0);\n      expect(campaignResult.reductionAchieved).toBeGreaterThanOrEqual(0);\n      expect(endTime - startTime).toBeLessThan(30000); // Should complete within 30 seconds\n\n      // Verify performance characteristics\n      expect(campaignResult.safetyEvents.length).toBeLessThan(10); // Should have minimal safety issues\n    });\n\n    test('should adapt to different codebase characteristics', async () => {\n      // Test with different codebase profiles\n      const codebases = {\n        'test-heavy': {\n          files: {\n            'src/test1.test.ts': 'const mockData: any = {}; const spy: any = jest.fn();',\n            'src/test2.spec.ts': 'const fixture: any = createFixture();'\n          },\n          expectedBehavior: 'preserve most any types due to test context'\n        },\n        'api-heavy': {\n          files: {\n            'src/api1.ts': 'const response: any = await fetch(\"/api\"); const data: any = response.json();',\n            'src/api2.ts': 'const result: any = await apiCall();'\n          },\n          expectedBehavior: 'preserve API-related any types'\n        },\n        'utility-heavy': {\n          files: {\n            'src/util1.ts': 'const items: any[] = []; const map: Record<string, any> = {};',\n            'src/util2.ts': 'function transform(data: any[]): any[] { return data; }'\n          },\n          expectedBehavior: 'replace many utility any types'\n        }\n      };\n\n      for (const [codebaseType, { files, expectedBehavior }] of Object.entries(codebases)) {\n        mockFs.readFileSync.mockImplementation((path: any) => {\n          const fileName = path.toString();\n          for (const [file, content] of Object.entries(files)) {\n            if (fileName.includes(file.split('/').pop()?.replace(/\\.(test|spec)\\.ts$/, '').replace('.ts', ''))) {\n              return content;\n            }\n          }\n          return 'backup content';\n        });\n\n        mockExecSync.mockImplementation((command) => {\n          if (command.includes('grep -r -l')) {\n            return Object.keys(files).join('\\n');\n          }\n          if (command.includes('grep -c \"error TS\"')) {\n            const error = new Error('No matches') as any;\n            error.status = 1;\n            throw error;\n          }\n          return '';\n        });\n\n        const config: UnintentionalAnyConfig = {\n          maxFilesPerBatch: Object.keys(files).length,\n          targetReductionPercentage: 15,\n          confidenceThreshold: 0.8,\n          enableDomainAnalysis: true,\n          enableDocumentation: true,\n          safetyLevel: 'MODERATE',\n          validationFrequency: 2\n        };\n\n        const batchResult = await engine.executeBatch(config);\n\n        expect(batchResult.filesProcessed).toBe(Object.keys(files).length);\n        expect(batchResult.anyTypesAnalyzed).toBeGreaterThan(0);\n\n        // Verify behavior matches expectations\n        if (codebaseType === 'test-heavy') {\n          // Test files should have lower replacement rates\n          expect(batchResult.replacementsSuccessful / Math.max(1, batchResult.replacementsAttempted)).toBeLessThan(0.5);\n        } else if (codebaseType === 'utility-heavy') {\n          // Utility files should have higher replacement rates\n          expect(batchResult.replacementsSuccessful / Math.max(1, batchResult.replacementsAttempted)).toBeGreaterThan(0.3);\n        }\n\n        console.log(`${codebaseType}: ${expectedBehavior} - Success rate: ${(batchResult.replacementsSuccessful / Math.max(1, batchResult.replacementsAttempted) * 100).toFixed(1)}%`);\n      }\n    });\n  });\n\n  describe('Error Recovery and Resilience', () => {\n    test('should recover from transient failures', async () => {\n      let failureCount = 0;\n      mockExecSync.mockImplementation((command) => {\n        if (command.includes('tsc')) {\n          failureCount++;\n          if (failureCount <= 2) {\n            // Fail first two attempts, then succeed\n            const error = new Error('Transient failure') as any;\n            error.stdout = 'error TS2322: Temporary type conflict';\n            throw error;\n          }\n        }\n        if (command.includes('grep -r -l')) {\n          return 'src/test.ts\\n';\n        }\n        return '';\n      });\n\n      mockFs.readFileSync.mockReturnValue('const items: any[] = [];');\n\n      const replacement = {\n        original: 'any[]',\n        replacement: 'unknown[]',\n        filePath: 'src/test.ts',\n        lineNumber: 1,\n        confidence: 0.9,\n        validationRequired: true\n      };\n\n      const result = await replacer.applyReplacement(replacement);\n\n      // Should eventually succeed after retries\n      expect(result.success).toBe(true);\n      expect(failureCount).toBeGreaterThan(2);\n    });\n\n    test('should maintain data integrity during failures', async () => {\n      const originalContent = 'const items: any[] = []; const data: Record<string, any> = {};';\n      let backupContent = '';\n\n      mockFs.readFileSync.mockImplementation((path: any) => {\n        if (path.includes('.backup')) {\n          return backupContent;\n        }\n        return originalContent;\n      });\n\n      mockFs.writeFileSync.mockImplementation((path: any, content: any) => {\n        if (path.includes('.backup')) {\n          backupContent = content;\n        }\n      });\n\n      // Mock failure scenario\n      mockExecSync.mockImplementation(() => {\n        const error = new Error('Compilation failed') as any;\n        error.stdout = 'error TS2322: Type error';\n        throw error;\n      });\n\n      const replacements = [\n        {\n          original: 'any[]',\n          replacement: 'unknown[]',\n          filePath: 'src/test.ts',\n          lineNumber: 1,\n          confidence: 0.9,\n          validationRequired: true\n        },\n        {\n          original: 'Record<string, any>',\n          replacement: 'Record<string, unknown>',\n          filePath: 'src/test.ts',\n          lineNumber: 1,\n          confidence: 0.8,\n          validationRequired: true\n        }\n      ];\n\n      const result = await replacer.processBatch(replacements);\n\n      expect(result.success).toBe(false);\n      expect(result.rollbackPerformed).toBe(true);\n\n      // Verify backup was created with original content\n      expect(backupContent).toBe(originalContent);\n    });\n  });\n});\n"],"version":3}