b47f0d9acab3d10c7e254df30accbcc1
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
// Mock logger
jest.mock('@/utils/logger', () => ({
    logger: {
        info: jest.fn(),
        debug: jest.fn(),
        warn: jest.fn(),
        error: jest.fn()
    }
}));
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const user_event_1 = __importDefault(require("@testing-library/user-event"));
const RecipeBuilderSimple_1 = __importDefault(require("../RecipeBuilderSimple"));
describe('RecipeBuilderSimple', () => {
    const mockOnRecipeComplete = jest.fn();
    const mockOnSave = jest.fn();
    beforeEach(() => {
        jest.clearAllMocks();
    });
    it('renders without crashing', () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RecipeBuilderSimple_1.default, {}));
        expect(react_2.screen.getByText('Create Your Recipe')).toBeInTheDocument();
        expect(react_2.screen.getByLabelText('Recipe Name')).toBeInTheDocument();
        expect(react_2.screen.getByText('Ingredients')).toBeInTheDocument();
        expect(react_2.screen.getByText('Instructions')).toBeInTheDocument();
    });
    it('renders with initial props', () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RecipeBuilderSimple_1.default, { initialIngredients: ['tomato', 'basil'], initialMethods: ['sautÃ©'], onRecipeComplete: mockOnRecipeComplete, onSave: mockOnSave }));
        expect(react_2.screen.getByDisplayValue('')).toBeInTheDocument(); // Recipe name input
    });
    it('updates recipe name', async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RecipeBuilderSimple_1.default, {}));
        const nameInput = react_2.screen.getByLabelText('Recipe Name');
        await user.type(nameInput, 'My Test Recipe');
        expect(nameInput).toHaveValue('My Test Recipe');
    });
    it('updates servings, prep time, and cook time', async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RecipeBuilderSimple_1.default, {}));
        const servingsInput = react_2.screen.getByLabelText('Servings');
        const prepTimeInput = react_2.screen.getByLabelText('Prep Time (min)');
        const cookTimeInput = react_2.screen.getByLabelText('Cook Time (min)');
        await user.clear(servingsInput);
        await user.type(servingsInput, '6');
        await user.clear(prepTimeInput);
        await user.type(prepTimeInput, '20');
        await user.clear(cookTimeInput);
        await user.type(cookTimeInput, '45');
        expect(servingsInput).toHaveValue(6);
        expect(prepTimeInput).toHaveValue(20);
        expect(cookTimeInput).toHaveValue(45);
    });
    it('adds and removes ingredients', async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RecipeBuilderSimple_1.default, {}));
        // Initially no ingredients
        expect(react_2.screen.getByText('No ingredients added yet. Click "Add Ingredient" to start.')).toBeInTheDocument();
        // Add ingredient
        const addIngredientButton = react_2.screen.getByText('Add Ingredient');
        await user.click(addIngredientButton);
        // Should now have one ingredient row
        const quantityInputs = react_2.screen.getAllByPlaceholderText('1 cup');
        const nameInputs = react_2.screen.getAllByPlaceholderText('Ingredient name');
        const prepInputs = react_2.screen.getAllByPlaceholderText('diced, chopped...');
        expect(quantityInputs).toHaveLength(1);
        expect(nameInputs).toHaveLength(1);
        expect(prepInputs).toHaveLength(1);
        // Fill in ingredient details
        await user.type(quantityInputs[0], '2 cups');
        await user.type(nameInputs[0], 'Tomatoes');
        await user.type(prepInputs[0], 'diced');
        expect(quantityInputs[0]).toHaveValue('2 cups');
        expect(nameInputs[0]).toHaveValue('Tomatoes');
        expect(prepInputs[0]).toHaveValue('diced');
        // Remove ingredient
        const removeButton = react_2.screen.getByTitle('Remove ingredient');
        await user.click(removeButton);
        // Should be back to no ingredients
        expect(react_2.screen.getByText('No ingredients added yet. Click "Add Ingredient" to start.')).toBeInTheDocument();
    });
    it('adds and removes instruction steps', async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RecipeBuilderSimple_1.default, {}));
        // Initially no steps
        expect(react_2.screen.getByText('No steps added yet. Click "Add Step" to start.')).toBeInTheDocument();
        // Add step
        const addStepButton = react_2.screen.getByText('Add Step');
        await user.click(addStepButton);
        // Should now have one step
        const stepTextareas = react_2.screen.getAllByPlaceholderText('Describe this step...');
        const timingInputs = react_2.screen.getAllByPlaceholderText('5 min');
        expect(stepTextareas).toHaveLength(1);
        expect(timingInputs).toHaveLength(1);
        expect(react_2.screen.getByText('1')).toBeInTheDocument(); // Step number
        // Fill in step details
        await user.type(stepTextareas[0], 'Heat oil in a large pan');
        await user.type(timingInputs[0], '2 min');
        expect(stepTextareas[0]).toHaveValue('Heat oil in a large pan');
        expect(timingInputs[0]).toHaveValue('2 min');
        // Add another step
        await user.click(addStepButton);
        // Should now have two steps with correct numbering
        expect(react_2.screen.getByText('1')).toBeInTheDocument();
        expect(react_2.screen.getByText('2')).toBeInTheDocument();
        // Remove first step
        const removeButtons = react_2.screen.getAllByTitle('Remove step');
        await user.click(removeButtons[0]);
        // Should have one step, renumbered to 1
        const remainingSteps = react_2.screen.getAllByPlaceholderText('Describe this step...');
        expect(remainingSteps).toHaveLength(1);
        expect(react_2.screen.getByText('1')).toBeInTheDocument();
        expect(react_2.screen.queryByText('2')).not.toBeInTheDocument();
    });
    it('disables save button when recipe is invalid', async () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RecipeBuilderSimple_1.default, {}));
        const saveButton = react_2.screen.getByText('Save Recipe');
        expect(saveButton).toBeDisabled();
    });
    it('enables save button when recipe is valid', async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RecipeBuilderSimple_1.default, {}));
        // Add recipe name
        const nameInput = react_2.screen.getByLabelText('Recipe Name');
        await user.type(nameInput, 'Test Recipe');
        // Add ingredient
        const addIngredientButton = react_2.screen.getByText('Add Ingredient');
        await user.click(addIngredientButton);
        const nameInputs = react_2.screen.getAllByPlaceholderText('Ingredient name');
        await user.type(nameInputs[0], 'Tomatoes');
        // Add step
        const addStepButton = react_2.screen.getByText('Add Step');
        await user.click(addStepButton);
        const stepTextareas = react_2.screen.getAllByPlaceholderText('Describe this step...');
        await user.type(stepTextareas[0], 'Cook the tomatoes');
        // Save button should now be enabled
        const saveButton = react_2.screen.getByText('Save Recipe');
        expect(saveButton).toBeEnabled();
    });
    it('calls onSave and onRecipeComplete when recipe is saved', async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RecipeBuilderSimple_1.default, { onSave: mockOnSave, onRecipeComplete: mockOnRecipeComplete }));
        // Create a valid recipe
        const nameInput = react_2.screen.getByLabelText('Recipe Name');
        await user.type(nameInput, 'Test Recipe');
        const addIngredientButton = react_2.screen.getByText('Add Ingredient');
        await user.click(addIngredientButton);
        const nameInputs = react_2.screen.getAllByPlaceholderText('Ingredient name');
        await user.type(nameInputs[0], 'Tomatoes');
        const addStepButton = react_2.screen.getByText('Add Step');
        await user.click(addStepButton);
        const stepTextareas = react_2.screen.getAllByPlaceholderText('Describe this step...');
        await user.type(stepTextareas[0], 'Cook the tomatoes');
        // Save the recipe
        const saveButton = react_2.screen.getByText('Save Recipe');
        await user.click(saveButton);
        expect(mockOnSave).toHaveBeenCalledWith(expect.objectContaining({
            name: 'Test Recipe',
            ingredients: expect.arrayContaining([
                expect.objectContaining({
                    name: 'Tomatoes'
                })
            ]),
            steps: expect.arrayContaining([
                expect.objectContaining({
                    instruction: 'Cook the tomatoes'
                })
            ])
        }));
        expect(mockOnRecipeComplete).toHaveBeenCalledWith(expect.objectContaining({
            name: 'Test Recipe'
        }));
    });
    it('displays recipe summary when recipe has content', async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RecipeBuilderSimple_1.default, {}));
        // Add recipe name
        const nameInput = react_2.screen.getByLabelText('Recipe Name');
        await user.type(nameInput, 'Test Recipe');
        // Add ingredient
        const addIngredientButton = react_2.screen.getByText('Add Ingredient');
        await user.click(addIngredientButton);
        const nameInputs = react_2.screen.getAllByPlaceholderText('Ingredient name');
        await user.type(nameInputs[0], 'Tomatoes');
        // Should show recipe summary
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByText('Recipe Summary')).toBeInTheDocument();
            expect(react_2.screen.getByText('Test Recipe')).toBeInTheDocument();
            expect(react_2.screen.getByText(/Serves 4/)).toBeInTheDocument();
            expect(react_2.screen.getByText(/1 ingredients/)).toBeInTheDocument();
        });
    });
    it('calculates total time correctly', async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RecipeBuilderSimple_1.default, {}));
        // Set prep and cook times
        const prepTimeInput = react_2.screen.getByLabelText('Prep Time (min)');
        const cookTimeInput = react_2.screen.getByLabelText('Cook Time (min)');
        await user.clear(prepTimeInput);
        await user.type(prepTimeInput, '15');
        await user.clear(cookTimeInput);
        await user.type(cookTimeInput, '30');
        // Add minimum required fields for summary
        const nameInput = react_2.screen.getByLabelText('Recipe Name');
        await user.type(nameInput, 'Test Recipe');
        const addIngredientButton = react_2.screen.getByText('Add Ingredient');
        await user.click(addIngredientButton);
        const nameInputs = react_2.screen.getAllByPlaceholderText('Ingredient name');
        await user.type(nameInputs[0], 'Tomatoes');
        // Should show correct total time in summary
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByText(/Total time: 45 minutes/)).toBeInTheDocument();
        });
    });
    it('handles ingredient updates correctly', async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RecipeBuilderSimple_1.default, {}));
        // Add ingredient
        const addIngredientButton = react_2.screen.getByText('Add Ingredient');
        await user.click(addIngredientButton);
        const quantityInputs = react_2.screen.getAllByPlaceholderText('1 cup');
        const nameInputs = react_2.screen.getAllByPlaceholderText('Ingredient name');
        const prepInputs = react_2.screen.getAllByPlaceholderText('diced, chopped...');
        // Update all fields
        await user.type(quantityInputs[0], '2 cups');
        await user.type(nameInputs[0], 'Fresh Tomatoes');
        await user.type(prepInputs[0], 'finely diced');
        expect(quantityInputs[0]).toHaveValue('2 cups');
        expect(nameInputs[0]).toHaveValue('Fresh Tomatoes');
        expect(prepInputs[0]).toHaveValue('finely diced');
    });
    it('handles step updates correctly', async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RecipeBuilderSimple_1.default, {}));
        // Add step
        const addStepButton = react_2.screen.getByText('Add Step');
        await user.click(addStepButton);
        const stepTextareas = react_2.screen.getAllByPlaceholderText('Describe this step...');
        const timingInputs = react_2.screen.getAllByPlaceholderText('5 min');
        // Update step details
        await user.type(stepTextareas[0], 'Heat olive oil in a large skillet over medium heat');
        await user.type(timingInputs[0], '3 min');
        expect(stepTextareas[0]).toHaveValue('Heat olive oil in a large skillet over medium heat');
        expect(timingInputs[0]).toHaveValue('3 min');
    });
    it('maintains step numbering when steps are removed', async () => {
        const user = user_event_1.default.setup();
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RecipeBuilderSimple_1.default, {}));
        // Add three steps
        const addStepButton = react_2.screen.getByText('Add Step');
        await user.click(addStepButton);
        await user.click(addStepButton);
        await user.click(addStepButton);
        // Should have steps 1, 2, 3
        expect(react_2.screen.getByText('1')).toBeInTheDocument();
        expect(react_2.screen.getByText('2')).toBeInTheDocument();
        expect(react_2.screen.getByText('3')).toBeInTheDocument();
        // Remove middle step (step 2)
        const removeButtons = react_2.screen.getAllByTitle('Remove step');
        await user.click(removeButtons[1]);
        // Should now have steps 1, 2 (renumbered)
        expect(react_2.screen.getByText('1')).toBeInTheDocument();
        expect(react_2.screen.getByText('2')).toBeInTheDocument();
        expect(react_2.screen.queryByText('3')).not.toBeInTheDocument();
        // Should have 2 steps total
        const remainingSteps = react_2.screen.getAllByPlaceholderText('Describe this step...');
        expect(remainingSteps).toHaveLength(2);
    });
});
describe('RecipeBuilderSimple Performance', () => {
    it('memoizes expensive calculations', async () => {
        const user = user_event_1.default.setup();
        // Mock performance.now to track calculation calls
        const mockPerformanceNow = jest.spyOn(performance, 'now');
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RecipeBuilderSimple_1.default, {}));
        // Add recipe details
        const nameInput = react_2.screen.getByLabelText('Recipe Name');
        await user.type(nameInput, 'Performance Test Recipe');
        const prepTimeInput = react_2.screen.getByLabelText('Prep Time (min)');
        const cookTimeInput = react_2.screen.getByLabelText('Cook Time (min)');
        await user.clear(prepTimeInput);
        await user.type(prepTimeInput, '10');
        await user.clear(cookTimeInput);
        await user.type(cookTimeInput, '20');
        // Add ingredient to trigger summary
        const addIngredientButton = react_2.screen.getByText('Add Ingredient');
        await user.click(addIngredientButton);
        const nameInputs = react_2.screen.getAllByPlaceholderText('Ingredient name');
        await user.type(nameInputs[0], 'Test Ingredient');
        // Verify total time is calculated correctly
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByText(/Total time: 30 minutes/)).toBeInTheDocument();
        });
        mockPerformanceNow.mockRestore();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,