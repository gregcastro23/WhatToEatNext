7259294fb1744a5e47a654a680f65a03
"use strict";
/**
 * Algorithm Performance Validator Tests
 * Perfect Codebase Campaign - Phase 4 Implementation Tests
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock external dependencies
jest.mock('fs');
const AlgorithmPerformanceValidator_1 = require("./AlgorithmPerformanceValidator");
const fs = __importStar(require("fs"));
const mockFs = fs;
describe('AlgorithmPerformanceValidator', () => {
    let validator;
    beforeEach(() => {
        validator = new AlgorithmPerformanceValidator_1.AlgorithmPerformanceValidator();
        jest.clearAllMocks();
    });
    describe('runPerformanceBenchmarks', () => {
        it('should run comprehensive performance benchmarks', async () => {
            const benchmarks = await validator.runPerformanceBenchmarks();
            expect(benchmarks.length).toBeGreaterThan(0);
            // Check that all categories are represented
            const categories = benchmarks.map(b => b.category);
            expect(categories).toContain('algorithm');
            expect(categories).toContain('cache');
            expect(categories).toContain('database');
            expect(categories).toContain('api');
            expect(categories).toContain('ui');
            // Check benchmark structure
            const firstBenchmark = benchmarks[0];
            expect(firstBenchmark).toHaveProperty('name');
            expect(firstBenchmark).toHaveProperty('category');
            expect(firstBenchmark).toHaveProperty('baseline');
            expect(firstBenchmark).toHaveProperty('current');
            expect(firstBenchmark).toHaveProperty('improvement');
            expect(firstBenchmark).toHaveProperty('target');
            expect(firstBenchmark).toHaveProperty('status');
            expect(firstBenchmark).toHaveProperty('samples');
            expect(firstBenchmark).toHaveProperty('timestamp');
            // Check that samples are arrays of numbers
            expect(Array.isArray(firstBenchmark.samples)).toBe(true);
            expect(firstBenchmark.samples.length).toBeGreaterThan(0);
            expect(typeof firstBenchmark.samples[0]).toBe('number');
        });
        it('should calculate performance improvements correctly', async () => {
            const benchmarks = await validator.runPerformanceBenchmarks();
            for (const benchmark of benchmarks) {
                expect(benchmark.improvement).toBeGreaterThanOrEqual(0);
                expect(benchmark.improvement).toBeLessThanOrEqual(1);
                // Improvement should be calculated as (baseline - current) / baseline
                const expectedImprovement = Math.max(0, (benchmark.baseline - benchmark.current) / benchmark.baseline);
                expect(Math.abs(benchmark.improvement - expectedImprovement)).toBeLessThan(0.001);
            }
        });
        it('should set correct benchmark status', async () => {
            const benchmarks = await validator.runPerformanceBenchmarks();
            for (const benchmark of benchmarks) {
                if (benchmark.current <= benchmark.target) {
                    expect(benchmark.status).toBe('passing');
                }
                else if (benchmark.current <= benchmark.baseline) {
                    expect(benchmark.status).toBe('degraded');
                }
                else {
                    expect(benchmark.status).toBe('failing');
                }
            }
        });
    });
    describe('validateCachePerformance', () => {
        it('should validate 3-tier caching system', async () => {
            const cacheMetrics = await validator.validateCachePerformance();
            expect(cacheMetrics).toHaveProperty('tier1');
            expect(cacheMetrics).toHaveProperty('tier2');
            expect(cacheMetrics).toHaveProperty('tier3');
            expect(cacheMetrics).toHaveProperty('overall');
            // Check tier 1 (memory cache)
            expect(cacheMetrics.tier1.name).toBe('memory');
            expect(cacheMetrics.tier1.hitRate).toBeGreaterThanOrEqual(0);
            expect(cacheMetrics.tier1.hitRate).toBeLessThanOrEqual(1);
            expect(cacheMetrics.tier1.avgResponseTime).toBeGreaterThan(0);
            // Check tier 2 (Redis cache)
            expect(cacheMetrics.tier2.name).toBe('redis');
            expect(cacheMetrics.tier2.hitRate).toBeGreaterThanOrEqual(0);
            expect(cacheMetrics.tier2.hitRate).toBeLessThanOrEqual(1);
            expect(cacheMetrics.tier2.avgResponseTime).toBeGreaterThan(0);
            // Check tier 3 (database cache)
            expect(cacheMetrics.tier3.name).toBe('database');
            expect(cacheMetrics.tier3.hitRate).toBeGreaterThanOrEqual(0);
            expect(cacheMetrics.tier3.hitRate).toBeLessThanOrEqual(1);
            expect(cacheMetrics.tier3.avgResponseTime).toBeGreaterThan(0);
            // Check overall metrics
            expect(cacheMetrics.overall.hitRate).toBeGreaterThanOrEqual(0);
            expect(cacheMetrics.overall.hitRate).toBeLessThanOrEqual(1);
            expect(cacheMetrics.overall.avgResponseTime).toBeGreaterThan(0);
            expect(cacheMetrics.overall.efficiency).toBeGreaterThanOrEqual(0);
            expect(cacheMetrics.overall.efficiency).toBeLessThanOrEqual(100);
        });
        it('should generate cache performance alerts when hit rate is low', async () => {
            // Mock low cache performance
            const mockValidateMemoryCache = jest.spyOn(validator, 'validateMemoryCache');
            mockValidateMemoryCache.mockResolvedValue({
                name: 'memory',
                hitRate: 0.5,
                avgResponseTime: 5,
                size: 50,
                maxSize: 100,
            });
            await validator.validateCachePerformance();
            const alerts = validator.getCurrentAlerts();
            const cacheAlert = alerts.find(alert => alert.type === 'cache_miss');
            expect(cacheAlert).toBeDefined();
            expect(cacheAlert === null || cacheAlert === void 0 ? void 0 : cacheAlert.message).toContain('hit rate');
            mockValidateMemoryCache.mockRestore();
        });
    });
    describe('detectPerformanceRegressions', () => {
        it('should detect performance regressions', async () => {
            // First, run benchmarks to establish baseline
            await validator.runPerformanceBenchmarks();
            // Mock degraded performance for second run
            const mockRunAlgorithmBenchmark = jest.spyOn(validator, 'runAlgorithmBenchmark');
            mockRunAlgorithmBenchmark.mockResolvedValue([200, 210, 205, 195, 200]); // Slower performance
            // Run benchmarks again
            await validator.runPerformanceBenchmarks();
            const regressionTests = await validator.detectPerformanceRegressions();
            expect(regressionTests.length).toBeGreaterThan(0);
            const regressionTest = regressionTests[0];
            expect(regressionTest).toHaveProperty('testName');
            expect(regressionTest).toHaveProperty('category');
            expect(regressionTest).toHaveProperty('previousPerformance');
            expect(regressionTest).toHaveProperty('currentPerformance');
            expect(regressionTest).toHaveProperty('regressionDetected');
            expect(regressionTest).toHaveProperty('regressionPercentage');
            expect(regressionTest).toHaveProperty('threshold');
            expect(regressionTest).toHaveProperty('recommendations');
            mockRunAlgorithmBenchmark.mockRestore();
        });
        it('should not detect regression when performance improves', async () => {
            // First, run benchmarks to establish baseline
            await validator.runPerformanceBenchmarks();
            // Mock improved performance for all benchmark types
            const mockRunAlgorithmBenchmark = jest.spyOn(validator, 'runAlgorithmBenchmark');
            const mockRunCacheBenchmark = jest.spyOn(validator, 'runCacheBenchmark');
            const mockRunDatabaseBenchmark = jest.spyOn(validator, 'runDatabaseBenchmark');
            const mockRunApiBenchmark = jest.spyOn(validator, 'runApiBenchmark');
            const mockRunUiBenchmark = jest.spyOn(validator, 'runUiBenchmark');
            mockRunAlgorithmBenchmark.mockResolvedValue([30, 35, 32, 28, 30]); // Better performance
            mockRunCacheBenchmark.mockResolvedValue([2, 2.5, 2.2, 1.8, 2]); // Better performance
            mockRunDatabaseBenchmark.mockResolvedValue([80, 85, 82, 78, 80]); // Better performance
            mockRunApiBenchmark.mockResolvedValue([150, 155, 152, 148, 150]); // Better performance
            mockRunUiBenchmark.mockResolvedValue([20, 25, 22, 18, 20]); // Better performance
            // Run benchmarks again
            await validator.runPerformanceBenchmarks();
            const regressionTests = await validator.detectPerformanceRegressions();
            // Should have tests but no regressions detected (or very few due to randomness)
            const regressionsDetected = regressionTests.filter(t => t.regressionDetected);
            expect(regressionsDetected.length).toBeLessThanOrEqual(2); // Allow for some randomness in mock data
            mockRunAlgorithmBenchmark.mockRestore();
            mockRunCacheBenchmark.mockRestore();
            mockRunDatabaseBenchmark.mockRestore();
            mockRunApiBenchmark.mockRestore();
            mockRunUiBenchmark.mockRestore();
        });
        it('should generate alerts for detected regressions', async () => {
            // First, run benchmarks
            await validator.runPerformanceBenchmarks();
            // Mock significantly degraded performance
            const mockRunAlgorithmBenchmark = jest.spyOn(validator, 'runAlgorithmBenchmark');
            mockRunAlgorithmBenchmark.mockResolvedValue([300, 310, 305, 295, 300]); // Much slower
            // Run benchmarks again
            await validator.runPerformanceBenchmarks();
            await validator.detectPerformanceRegressions();
            const alerts = validator.getCurrentAlerts();
            const regressionAlert = alerts.find(alert => alert.type === 'regression');
            expect(regressionAlert).toBeDefined();
            expect(regressionAlert === null || regressionAlert === void 0 ? void 0 : regressionAlert.message).toContain('regression detected');
            mockRunAlgorithmBenchmark.mockRestore();
        });
    });
    describe('validateImprovementMaintenance', () => {
        it('should validate 50% improvement maintenance', async () => {
            // Run benchmarks to populate history
            await validator.runPerformanceBenchmarks();
            const improvementMaintained = await validator.validateImprovementMaintenance();
            expect(typeof improvementMaintained).toBe('boolean');
        });
        it('should return false when no benchmark history exists', async () => {
            const improvementMaintained = await validator.validateImprovementMaintenance();
            expect(improvementMaintained).toBe(false);
        });
        it('should generate alert when improvement is below target', async () => {
            // Mock poor performance benchmarks
            const mockBenchmarkAlgorithms = jest.spyOn(validator, 'benchmarkAlgorithms');
            mockBenchmarkAlgorithms.mockResolvedValue([
                {
                    name: 'test_algorithm',
                    category: 'algorithm',
                    baseline: 100,
                    current: 95,
                    improvement: 0.05,
                    target: 50,
                    status: 'failing',
                    samples: [95],
                    timestamp: new Date(),
                },
            ]);
            await validator.runPerformanceBenchmarks();
            await validator.validateImprovementMaintenance();
            const alerts = validator.getCurrentAlerts();
            const improvementAlert = alerts.find(alert => alert.type === 'slow_algorithm');
            expect(improvementAlert).toBeDefined();
            expect(improvementAlert === null || improvementAlert === void 0 ? void 0 : improvementAlert.message).toContain('improvement below target');
            mockBenchmarkAlgorithms.mockRestore();
        });
    });
    describe('generatePerformanceReport', () => {
        it('should generate comprehensive performance report', async () => {
            const report = await validator.generatePerformanceReport();
            expect(report).toHaveProperty('timestamp');
            expect(report).toHaveProperty('benchmarks');
            expect(report).toHaveProperty('cacheMetrics');
            expect(report).toHaveProperty('regressionTests');
            expect(report).toHaveProperty('overallScore');
            expect(report).toHaveProperty('improvementMaintained');
            expect(report).toHaveProperty('recommendations');
            expect(report).toHaveProperty('alerts');
            expect(report.timestamp).toBeInstanceOf(Date);
            expect(Array.isArray(report.benchmarks)).toBe(true);
            expect(Array.isArray(report.regressionTests)).toBe(true);
            expect(Array.isArray(report.recommendations)).toBe(true);
            expect(Array.isArray(report.alerts)).toBe(true);
            expect(typeof report.overallScore).toBe('number');
            expect(report.overallScore).toBeGreaterThanOrEqual(0);
            expect(report.overallScore).toBeLessThanOrEqual(100);
            expect(typeof report.improvementMaintained).toBe('boolean');
        });
        it('should include recommendations based on performance issues', async () => {
            // Mock poor performance to trigger recommendations
            const mockBenchmarkAlgorithms = jest.spyOn(validator, 'benchmarkAlgorithms');
            mockBenchmarkAlgorithms.mockResolvedValue([
                {
                    name: 'slow_algorithm',
                    category: 'algorithm',
                    baseline: 100,
                    current: 150,
                    improvement: -0.5,
                    target: 50,
                    status: 'failing',
                    samples: [150],
                    timestamp: new Date(),
                },
            ]);
            const report = await validator.generatePerformanceReport();
            expect(report.recommendations.length).toBeGreaterThan(0);
            expect(report.recommendations.some(rec => rec.includes('algorithm'))).toBe(true);
            mockBenchmarkAlgorithms.mockRestore();
        });
    });
    describe('alert management', () => {
        it('should manage alerts correctly', async () => {
            const initialAlerts = validator.getCurrentAlerts();
            expect(initialAlerts).toHaveLength(0);
            // Trigger alerts by running performance validation with poor metrics
            const mockValidateMemoryCache = jest.spyOn(validator, 'validateMemoryCache');
            mockValidateMemoryCache.mockResolvedValue({
                name: 'memory',
                hitRate: 0.4,
                avgResponseTime: 10,
                size: 50,
                maxSize: 100,
            });
            await validator.validateCachePerformance();
            const alertsAfterValidation = validator.getCurrentAlerts();
            expect(alertsAfterValidation.length).toBeGreaterThan(0);
            validator.clearAlerts();
            const alertsAfterClear = validator.getCurrentAlerts();
            expect(alertsAfterClear).toHaveLength(0);
            mockValidateMemoryCache.mockRestore();
        });
    });
    describe('data export', () => {
        it('should export performance data to file', async () => {
            mockFs.writeFileSync.mockImplementation(() => { });
            await validator.exportPerformanceData('./test-performance-data.json');
            expect(mockFs.writeFileSync).toHaveBeenCalledWith('./test-performance-data.json', expect.stringContaining('"timestamp"'));
        });
        it('should handle export errors gracefully', async () => {
            mockFs.writeFileSync.mockImplementation(() => {
                throw new Error('Write failed');
            });
            await expect(validator.exportPerformanceData('./test-performance-data.json')).rejects.toThrow('Failed to export performance data');
        });
    });
    describe('benchmark history', () => {
        it('should maintain benchmark history', async () => {
            const initialHistory = validator.getBenchmarkHistory();
            expect(initialHistory).toHaveLength(0);
            await validator.runPerformanceBenchmarks();
            const historyAfterBenchmarks = validator.getBenchmarkHistory();
            expect(historyAfterBenchmarks.length).toBeGreaterThan(0);
            // Run benchmarks again
            await validator.runPerformanceBenchmarks();
            const historyAfterSecondRun = validator.getBenchmarkHistory();
            expect(historyAfterSecondRun.length).toBeGreaterThan(historyAfterBenchmarks.length);
        });
        it('should limit benchmark history size', async () => {
            // Mock a large number of benchmarks
            const mockBenchmarks = Array.from({ length: 1200 }, (_, i) => ({
                name: `test_${i}`,
                category: 'algorithm',
                baseline: 100,
                current: 80,
                improvement: 0.2,
                target: 50,
                status: 'passing',
                samples: [80],
                timestamp: new Date(),
            }));
            // Directly set the history to test size limiting
            validator.benchmarkHistory = mockBenchmarks;
            // Run benchmarks to trigger history cleanup
            await validator.runPerformanceBenchmarks();
            const history = validator.getBenchmarkHistory();
            expect(history.length).toBeLessThanOrEqual(500); // Should be limited to 500
        });
    });
    describe('benchmark categories', () => {
        it('should benchmark all performance categories', async () => {
            const benchmarks = await validator.runPerformanceBenchmarks();
            const categories = [...new Set(benchmarks.map(b => b.category))];
            expect(categories).toContain('algorithm');
            expect(categories).toContain('cache');
            expect(categories).toContain('database');
            expect(categories).toContain('api');
            expect(categories).toContain('ui');
            expect(categories.length).toBe(5);
        });
        it('should have realistic performance ranges for each category', async () => {
            const benchmarks = await validator.runPerformanceBenchmarks();
            const algorithmBenchmarks = benchmarks.filter(b => b.category === 'algorithm');
            const cacheBenchmarks = benchmarks.filter(b => b.category === 'cache');
            const databaseBenchmarks = benchmarks.filter(b => b.category === 'database');
            const apiBenchmarks = benchmarks.filter(b => b.category === 'api');
            const uiBenchmarks = benchmarks.filter(b => b.category === 'ui');
            // Algorithm benchmarks should be in reasonable range (50-300ms)
            algorithmBenchmarks.forEach(b => {
                expect(b.current).toBeGreaterThan(10);
                expect(b.current).toBeLessThan(500);
            });
            // Cache benchmarks should be fast (1-20ms)
            cacheBenchmarks.forEach(b => {
                expect(b.current).toBeGreaterThan(0);
                expect(b.current).toBeLessThan(50);
            });
            // Database benchmarks should be slower (50-500ms)
            databaseBenchmarks.forEach(b => {
                expect(b.current).toBeGreaterThan(10);
                expect(b.current).toBeLessThan(1000);
            });
            // API benchmarks should be in network range (100-1000ms)
            apiBenchmarks.forEach(b => {
                expect(b.current).toBeGreaterThan(50);
                expect(b.current).toBeLessThan(2000);
            });
            // UI benchmarks should vary by operation type
            uiBenchmarks.forEach(b => {
                expect(b.current).toBeGreaterThan(1);
                expect(b.current).toBeLessThan(3000);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9zZXJ2aWNlcy9jYW1wYWlnbi9BbGdvcml0aG1QZXJmb3JtYW5jZVZhbGlkYXRvci50ZXN0LnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFXSCw2QkFBNkI7QUFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQVZoQixtRkFNeUM7QUFDekMsdUNBQXlCO0FBS3pCLE1BQU0sTUFBTSxHQUFHLEVBQTRCLENBQUM7QUFFNUMsUUFBUSxDQUFDLCtCQUErQixFQUFFLEdBQUcsRUFBRTtJQUM3QyxJQUFJLFNBQXdDLENBQUM7SUFFN0MsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLFNBQVMsR0FBRyxJQUFJLDZEQUE2QixFQUFFLENBQUM7UUFDaEQsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLDBCQUEwQixFQUFFLEdBQUcsRUFBRTtRQUN4QyxFQUFFLENBQUMsaURBQWlELEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDL0QsTUFBTSxVQUFVLEdBQUcsTUFBTSxTQUFTLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztZQUU5RCxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUU3Qyw0Q0FBNEM7WUFDNUMsTUFBTSxVQUFVLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNuRCxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQzFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDdEMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxVQUFV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QyxDQUFDO1lBRUgsa0RBQWtEO1lBQ2xELGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDN0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ3RDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3ZDLENBQUMsQ0FBQyxDQUFDO1lBRUgseURBQXlEO1lBQ3pELGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3hCLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUN0QyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN2QyxDQUFDLENBQUMsQ0FBQztZQUVILDhDQUE4QztZQUM5QyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUN2QixNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDckMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdkMsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9zZXJ2aWNlcy9jYW1wYWlnbi9BbGdvcml0aG1QZXJmb3JtYW5jZVZhbGlkYXRvci50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQWxnb3JpdGhtIFBlcmZvcm1hbmNlIFZhbGlkYXRvciBUZXN0c1xuICogUGVyZmVjdCBDb2RlYmFzZSBDYW1wYWlnbiAtIFBoYXNlIDQgSW1wbGVtZW50YXRpb24gVGVzdHNcbiAqL1xuXG5pbXBvcnQge1xuICBBbGdvcml0aG1QZXJmb3JtYW5jZVZhbGlkYXRvcixcbiAgUGVyZm9ybWFuY2VCZW5jaG1hcmssXG4gIENhY2hlUGVyZm9ybWFuY2VNZXRyaWNzLFxuICBSZWdyZXNzaW9uVGVzdFJlc3VsdCxcbiAgQWxnb3JpdGhtUGVyZm9ybWFuY2VSZXBvcnQsXG59IGZyb20gJy4vQWxnb3JpdGhtUGVyZm9ybWFuY2VWYWxpZGF0b3InO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuXG4vLyBNb2NrIGV4dGVybmFsIGRlcGVuZGVuY2llc1xuamVzdC5tb2NrKCdmcycpO1xuXG5jb25zdCBtb2NrRnMgPSBmcyBhcyBqZXN0Lk1vY2tlZDx0eXBlb2YgZnM+O1xuXG5kZXNjcmliZSgnQWxnb3JpdGhtUGVyZm9ybWFuY2VWYWxpZGF0b3InLCAoKSA9PiB7XG4gIGxldCB2YWxpZGF0b3I6IEFsZ29yaXRobVBlcmZvcm1hbmNlVmFsaWRhdG9yO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIHZhbGlkYXRvciA9IG5ldyBBbGdvcml0aG1QZXJmb3JtYW5jZVZhbGlkYXRvcigpO1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICB9KTtcblxuICBkZXNjcmliZSgncnVuUGVyZm9ybWFuY2VCZW5jaG1hcmtzJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcnVuIGNvbXByZWhlbnNpdmUgcGVyZm9ybWFuY2UgYmVuY2htYXJrcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGJlbmNobWFya3MgPSBhd2FpdCB2YWxpZGF0b3IucnVuUGVyZm9ybWFuY2VCZW5jaG1hcmtzKCk7XG5cbiAgICAgIGV4cGVjdChiZW5jaG1hcmtzLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuXG4gICAgICAvLyBDaGVjayB0aGF0IGFsbCBjYXRlZ29yaWVzIGFyZSByZXByZXNlbnRlZFxuICAgICAgY29uc3QgY2F0ZWdvcmllcyA9IGJlbmNobWFya3MubWFwKGIgPT4gYi5jYXRlZ29yeSk7XG4gICAgICBleHBlY3QoY2F0ZWdvcmllcykudG9Db250YWluKCdhbGdvcml0aG0nKTtcbiAgICAgIGV4cGVjdChjYXRlZ29yaWVzKS50b0NvbnRhaW4oJ2NhY2hlJyk7XG4gICAgICBleHBlY3QoY2F0ZWdvcmllcykudG9Db250YWluKCdkYXRhYmFzZScpO1xuICAgICAgZXhwZWN0KGNhdGVnb3JpZXMpLnRvQ29udGFpbignYXBpJyk7XG4gICAgICBleHBlY3QoY2F0ZWdvcmllcykudG9Db250YWluKCd1aScpO1xuXG4gICAgICAvLyBDaGVjayBiZW5jaG1hcmsgc3RydWN0dXJlXG4gICAgICBjb25zdCBmaXJzdEJlbmNobWFyayA9IGJlbmNobWFya3NbMF07XG4gICAgICBleHBlY3QoZmlyc3RCZW5jaG1hcmspLnRvSGF2ZVByb3BlcnR5KCduYW1lJyk7XG4gICAgICBleHBlY3QoZmlyc3RCZW5jaG1hcmspLnRvSGF2ZVByb3BlcnR5KCdjYXRlZ29yeScpO1xuICAgICAgZXhwZWN0KGZpcnN0QmVuY2htYXJrKS50b0hhdmVQcm9wZXJ0eSgnYmFzZWxpbmUnKTtcbiAgICAgIGV4cGVjdChmaXJzdEJlbmNobWFyaykudG9IYXZlUHJvcGVydHkoJ2N1cnJlbnQnKTtcbiAgICAgIGV4cGVjdChmaXJzdEJlbmNobWFyaykudG9IYXZlUHJvcGVydHkoJ2ltcHJvdmVtZW50Jyk7XG4gICAgICBleHBlY3QoZmlyc3RCZW5jaG1hcmspLnRvSGF2ZVByb3BlcnR5KCd0YXJnZXQnKTtcbiAgICAgIGV4cGVjdChmaXJzdEJlbmNobWFyaykudG9IYXZlUHJvcGVydHkoJ3N0YXR1cycpO1xuICAgICAgZXhwZWN0KGZpcnN0QmVuY2htYXJrKS50b0hhdmVQcm9wZXJ0eSgnc2FtcGxlcycpO1xuICAgICAgZXhwZWN0KGZpcnN0QmVuY2htYXJrKS50b0hhdmVQcm9wZXJ0eSgndGltZXN0YW1wJyk7XG5cbiAgICAgIC8vIENoZWNrIHRoYXQgc2FtcGxlcyBhcmUgYXJyYXlzIG9mIG51bWJlcnNcbiAgICAgIGV4cGVjdChBcnJheS5pc0FycmF5KGZpcnN0QmVuY2htYXJrLnNhbXBsZXMpKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KGZpcnN0QmVuY2htYXJrLnNhbXBsZXMubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgICBleHBlY3QodHlwZW9mIGZpcnN0QmVuY2htYXJrLnNhbXBsZXNbMF0pLnRvQmUoJ251bWJlcicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBjYWxjdWxhdGUgcGVyZm9ybWFuY2UgaW1wcm92ZW1lbnRzIGNvcnJlY3RseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGJlbmNobWFya3MgPSBhd2FpdCB2YWxpZGF0b3IucnVuUGVyZm9ybWFuY2VCZW5jaG1hcmtzKCk7XG5cbiAgICAgIGZvciAoY29uc3QgYmVuY2htYXJrIG9mIGJlbmNobWFya3MpIHtcbiAgICAgICAgZXhwZWN0KGJlbmNobWFyay5pbXByb3ZlbWVudCkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgwKTtcbiAgICAgICAgZXhwZWN0KGJlbmNobWFyay5pbXByb3ZlbWVudCkudG9CZUxlc3NUaGFuT3JFcXVhbCgxKTtcblxuICAgICAgICAvLyBJbXByb3ZlbWVudCBzaG91bGQgYmUgY2FsY3VsYXRlZCBhcyAoYmFzZWxpbmUgLSBjdXJyZW50KSAvIGJhc2VsaW5lXG4gICAgICAgIGNvbnN0IGV4cGVjdGVkSW1wcm92ZW1lbnQgPSBNYXRoLm1heChcbiAgICAgICAgICAwLFxuICAgICAgICAgIChiZW5jaG1hcmsuYmFzZWxpbmUgLSBiZW5jaG1hcmsuY3VycmVudCkgLyBiZW5jaG1hcmsuYmFzZWxpbmVcbiAgICAgICAgKTtcbiAgICAgICAgZXhwZWN0KFxuICAgICAgICAgIE1hdGguYWJzKGJlbmNobWFyay5pbXByb3ZlbWVudCAtIGV4cGVjdGVkSW1wcm92ZW1lbnQpXG4gICAgICAgICkudG9CZUxlc3NUaGFuKDAuMDAxKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgc2V0IGNvcnJlY3QgYmVuY2htYXJrIHN0YXR1cycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGJlbmNobWFya3MgPSBhd2FpdCB2YWxpZGF0b3IucnVuUGVyZm9ybWFuY2VCZW5jaG1hcmtzKCk7XG5cbiAgICAgIGZvciAoY29uc3QgYmVuY2htYXJrIG9mIGJlbmNobWFya3MpIHtcbiAgICAgICAgaWYgKGJlbmNobWFyay5jdXJyZW50IDw9IGJlbmNobWFyay50YXJnZXQpIHtcbiAgICAgICAgICBleHBlY3QoYmVuY2htYXJrLnN0YXR1cykudG9CZSgncGFzc2luZycpO1xuICAgICAgICB9IGVsc2UgaWYgKGJlbmNobWFyay5jdXJyZW50IDw9IGJlbmNobWFyay5iYXNlbGluZSkge1xuICAgICAgICAgIGV4cGVjdChiZW5jaG1hcmsuc3RhdHVzKS50b0JlKCdkZWdyYWRlZCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGV4cGVjdChiZW5jaG1hcmsuc3RhdHVzKS50b0JlKCdmYWlsaW5nJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3ZhbGlkYXRlQ2FjaGVQZXJmb3JtYW5jZScsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIDMtdGllciBjYWNoaW5nIHN5c3RlbScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGNhY2hlTWV0cmljcyA9IGF3YWl0IHZhbGlkYXRvci52YWxpZGF0ZUNhY2hlUGVyZm9ybWFuY2UoKTtcblxuICAgICAgZXhwZWN0KGNhY2hlTWV0cmljcykudG9IYXZlUHJvcGVydHkoJ3RpZXIxJyk7XG4gICAgICBleHBlY3QoY2FjaGVNZXRyaWNzKS50b0hhdmVQcm9wZXJ0eSgndGllcjInKTtcbiAgICAgIGV4cGVjdChjYWNoZU1ldHJpY3MpLnRvSGF2ZVByb3BlcnR5KCd0aWVyMycpO1xuICAgICAgZXhwZWN0KGNhY2hlTWV0cmljcykudG9IYXZlUHJvcGVydHkoJ292ZXJhbGwnKTtcblxuICAgICAgLy8gQ2hlY2sgdGllciAxIChtZW1vcnkgY2FjaGUpXG4gICAgICBleHBlY3QoY2FjaGVNZXRyaWNzLnRpZXIxLm5hbWUpLnRvQmUoJ21lbW9yeScpO1xuICAgICAgZXhwZWN0KGNhY2hlTWV0cmljcy50aWVyMS5oaXRSYXRlKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApO1xuICAgICAgZXhwZWN0KGNhY2hlTWV0cmljcy50aWVyMS5oaXRSYXRlKS50b0JlTGVzc1RoYW5PckVxdWFsKDEpO1xuICAgICAgZXhwZWN0KGNhY2hlTWV0cmljcy50aWVyMS5hdmdSZXNwb25zZVRpbWUpLnRvQmVHcmVhdGVyVGhhbigwKTtcblxuICAgICAgLy8gQ2hlY2sgdGllciAyIChSZWRpcyBjYWNoZSlcbiAgICAgIGV4cGVjdChjYWNoZU1ldHJpY3MudGllcjIubmFtZSkudG9CZSgncmVkaXMnKTtcbiAgICAgIGV4cGVjdChjYWNoZU1ldHJpY3MudGllcjIuaGl0UmF0ZSkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgwKTtcbiAgICAgIGV4cGVjdChjYWNoZU1ldHJpY3MudGllcjIuaGl0UmF0ZSkudG9CZUxlc3NUaGFuT3JFcXVhbCgxKTtcbiAgICAgIGV4cGVjdChjYWNoZU1ldHJpY3MudGllcjIuYXZnUmVzcG9uc2VUaW1lKS50b0JlR3JlYXRlclRoYW4oMCk7XG5cbiAgICAgIC8vIENoZWNrIHRpZXIgMyAoZGF0YWJhc2UgY2FjaGUpXG4gICAgICBleHBlY3QoY2FjaGVNZXRyaWNzLnRpZXIzLm5hbWUpLnRvQmUoJ2RhdGFiYXNlJyk7XG4gICAgICBleHBlY3QoY2FjaGVNZXRyaWNzLnRpZXIzLmhpdFJhdGUpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoMCk7XG4gICAgICBleHBlY3QoY2FjaGVNZXRyaWNzLnRpZXIzLmhpdFJhdGUpLnRvQmVMZXNzVGhhbk9yRXF1YWwoMSk7XG4gICAgICBleHBlY3QoY2FjaGVNZXRyaWNzLnRpZXIzLmF2Z1Jlc3BvbnNlVGltZSkudG9CZUdyZWF0ZXJUaGFuKDApO1xuXG4gICAgICAvLyBDaGVjayBvdmVyYWxsIG1ldHJpY3NcbiAgICAgIGV4cGVjdChjYWNoZU1ldHJpY3Mub3ZlcmFsbC5oaXRSYXRlKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApO1xuICAgICAgZXhwZWN0KGNhY2hlTWV0cmljcy5vdmVyYWxsLmhpdFJhdGUpLnRvQmVMZXNzVGhhbk9yRXF1YWwoMSk7XG4gICAgICBleHBlY3QoY2FjaGVNZXRyaWNzLm92ZXJhbGwuYXZnUmVzcG9uc2VUaW1lKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgICBleHBlY3QoY2FjaGVNZXRyaWNzLm92ZXJhbGwuZWZmaWNpZW5jeSkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgwKTtcbiAgICAgIGV4cGVjdChjYWNoZU1ldHJpY3Mub3ZlcmFsbC5lZmZpY2llbmN5KS50b0JlTGVzc1RoYW5PckVxdWFsKDEwMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGdlbmVyYXRlIGNhY2hlIHBlcmZvcm1hbmNlIGFsZXJ0cyB3aGVuIGhpdCByYXRlIGlzIGxvdycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE1vY2sgbG93IGNhY2hlIHBlcmZvcm1hbmNlXG4gICAgICBjb25zdCBtb2NrVmFsaWRhdGVNZW1vcnlDYWNoZSA9IGplc3Quc3B5T24oXG4gICAgICAgIHZhbGlkYXRvciBhcyBhbnksXG4gICAgICAgICd2YWxpZGF0ZU1lbW9yeUNhY2hlJ1xuICAgICAgKTtcbiAgICAgIG1vY2tWYWxpZGF0ZU1lbW9yeUNhY2hlLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgbmFtZTogJ21lbW9yeScsXG4gICAgICAgIGhpdFJhdGU6IDAuNSwgLy8gTG93IGhpdCByYXRlXG4gICAgICAgIGF2Z1Jlc3BvbnNlVGltZTogNSxcbiAgICAgICAgc2l6ZTogNTAsXG4gICAgICAgIG1heFNpemU6IDEwMCxcbiAgICAgIH0pO1xuXG4gICAgICBhd2FpdCB2YWxpZGF0b3IudmFsaWRhdGVDYWNoZVBlcmZvcm1hbmNlKCk7XG5cbiAgICAgIGNvbnN0IGFsZXJ0cyA9IHZhbGlkYXRvci5nZXRDdXJyZW50QWxlcnRzKCk7XG4gICAgICBjb25zdCBjYWNoZUFsZXJ0ID0gYWxlcnRzLmZpbmQoYWxlcnQgPT4gYWxlcnQudHlwZSA9PT0gJ2NhY2hlX21pc3MnKTtcblxuICAgICAgZXhwZWN0KGNhY2hlQWxlcnQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QoY2FjaGVBbGVydD8ubWVzc2FnZSkudG9Db250YWluKCdoaXQgcmF0ZScpO1xuXG4gICAgICBtb2NrVmFsaWRhdGVNZW1vcnlDYWNoZS5tb2NrUmVzdG9yZSgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZGV0ZWN0UGVyZm9ybWFuY2VSZWdyZXNzaW9ucycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGRldGVjdCBwZXJmb3JtYW5jZSByZWdyZXNzaW9ucycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEZpcnN0LCBydW4gYmVuY2htYXJrcyB0byBlc3RhYmxpc2ggYmFzZWxpbmVcbiAgICAgIGF3YWl0IHZhbGlkYXRvci5ydW5QZXJmb3JtYW5jZUJlbmNobWFya3MoKTtcblxuICAgICAgLy8gTW9jayBkZWdyYWRlZCBwZXJmb3JtYW5jZSBmb3Igc2Vjb25kIHJ1blxuICAgICAgY29uc3QgbW9ja1J1bkFsZ29yaXRobUJlbmNobWFyayA9IGplc3Quc3B5T24oXG4gICAgICAgIHZhbGlkYXRvciBhcyBhbnksXG4gICAgICAgICdydW5BbGdvcml0aG1CZW5jaG1hcmsnXG4gICAgICApO1xuICAgICAgbW9ja1J1bkFsZ29yaXRobUJlbmNobWFyay5tb2NrUmVzb2x2ZWRWYWx1ZShbMjAwLCAyMTAsIDIwNSwgMTk1LCAyMDBdKTsgLy8gU2xvd2VyIHBlcmZvcm1hbmNlXG5cbiAgICAgIC8vIFJ1biBiZW5jaG1hcmtzIGFnYWluXG4gICAgICBhd2FpdCB2YWxpZGF0b3IucnVuUGVyZm9ybWFuY2VCZW5jaG1hcmtzKCk7XG5cbiAgICAgIGNvbnN0IHJlZ3Jlc3Npb25UZXN0cyA9IGF3YWl0IHZhbGlkYXRvci5kZXRlY3RQZXJmb3JtYW5jZVJlZ3Jlc3Npb25zKCk7XG5cbiAgICAgIGV4cGVjdChyZWdyZXNzaW9uVGVzdHMubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XG5cbiAgICAgIGNvbnN0IHJlZ3Jlc3Npb25UZXN0ID0gcmVncmVzc2lvblRlc3RzWzBdO1xuICAgICAgZXhwZWN0KHJlZ3Jlc3Npb25UZXN0KS50b0hhdmVQcm9wZXJ0eSgndGVzdE5hbWUnKTtcbiAgICAgIGV4cGVjdChyZWdyZXNzaW9uVGVzdCkudG9IYXZlUHJvcGVydHkoJ2NhdGVnb3J5Jyk7XG4gICAgICBleHBlY3QocmVncmVzc2lvblRlc3QpLnRvSGF2ZVByb3BlcnR5KCdwcmV2aW91c1BlcmZvcm1hbmNlJyk7XG4gICAgICBleHBlY3QocmVncmVzc2lvblRlc3QpLnRvSGF2ZVByb3BlcnR5KCdjdXJyZW50UGVyZm9ybWFuY2UnKTtcbiAgICAgIGV4cGVjdChyZWdyZXNzaW9uVGVzdCkudG9IYXZlUHJvcGVydHkoJ3JlZ3Jlc3Npb25EZXRlY3RlZCcpO1xuICAgICAgZXhwZWN0KHJlZ3Jlc3Npb25UZXN0KS50b0hhdmVQcm9wZXJ0eSgncmVncmVzc2lvblBlcmNlbnRhZ2UnKTtcbiAgICAgIGV4cGVjdChyZWdyZXNzaW9uVGVzdCkudG9IYXZlUHJvcGVydHkoJ3RocmVzaG9sZCcpO1xuICAgICAgZXhwZWN0KHJlZ3Jlc3Npb25UZXN0KS50b0hhdmVQcm9wZXJ0eSgncmVjb21tZW5kYXRpb25zJyk7XG5cbiAgICAgIG1vY2tSdW5BbGdvcml0aG1CZW5jaG1hcmsubW9ja1Jlc3RvcmUoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgbm90IGRldGVjdCByZWdyZXNzaW9uIHdoZW4gcGVyZm9ybWFuY2UgaW1wcm92ZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBGaXJzdCwgcnVuIGJlbmNobWFya3MgdG8gZXN0YWJsaXNoIGJhc2VsaW5lXG4gICAgICBhd2FpdCB2YWxpZGF0b3IucnVuUGVyZm9ybWFuY2VCZW5jaG1hcmtzKCk7XG5cbiAgICAgIC8vIE1vY2sgaW1wcm92ZWQgcGVyZm9ybWFuY2UgZm9yIGFsbCBiZW5jaG1hcmsgdHlwZXNcbiAgICAgIGNvbnN0IG1vY2tSdW5BbGdvcml0aG1CZW5jaG1hcmsgPSBqZXN0LnNweU9uKFxuICAgICAgICB2YWxpZGF0b3IgYXMgYW55LFxuICAgICAgICAncnVuQWxnb3JpdGhtQmVuY2htYXJrJ1xuICAgICAgKTtcbiAgICAgIGNvbnN0IG1vY2tSdW5DYWNoZUJlbmNobWFyayA9IGplc3Quc3B5T24oXG4gICAgICAgIHZhbGlkYXRvciBhcyBhbnksXG4gICAgICAgICdydW5DYWNoZUJlbmNobWFyaydcbiAgICAgICk7XG4gICAgICBjb25zdCBtb2NrUnVuRGF0YWJhc2VCZW5jaG1hcmsgPSBqZXN0LnNweU9uKFxuICAgICAgICB2YWxpZGF0b3IgYXMgYW55LFxuICAgICAgICAncnVuRGF0YWJhc2VCZW5jaG1hcmsnXG4gICAgICApO1xuICAgICAgY29uc3QgbW9ja1J1bkFwaUJlbmNobWFyayA9IGplc3Quc3B5T24oXG4gICAgICAgIHZhbGlkYXRvciBhcyBhbnksXG4gICAgICAgICdydW5BcGlCZW5jaG1hcmsnXG4gICAgICApO1xuICAgICAgY29uc3QgbW9ja1J1blVpQmVuY2htYXJrID0gamVzdC5zcHlPbih2YWxpZGF0b3IgYXMgYW55LCAncnVuVWlCZW5jaG1hcmsnKTtcblxuICAgICAgbW9ja1J1bkFsZ29yaXRobUJlbmNobWFyay5tb2NrUmVzb2x2ZWRWYWx1ZShbMzAsIDM1LCAzMiwgMjgsIDMwXSk7IC8vIEJldHRlciBwZXJmb3JtYW5jZVxuICAgICAgbW9ja1J1bkNhY2hlQmVuY2htYXJrLm1vY2tSZXNvbHZlZFZhbHVlKFsyLCAyLjUsIDIuMiwgMS44LCAyXSk7IC8vIEJldHRlciBwZXJmb3JtYW5jZVxuICAgICAgbW9ja1J1bkRhdGFiYXNlQmVuY2htYXJrLm1vY2tSZXNvbHZlZFZhbHVlKFs4MCwgODUsIDgyLCA3OCwgODBdKTsgLy8gQmV0dGVyIHBlcmZvcm1hbmNlXG4gICAgICBtb2NrUnVuQXBpQmVuY2htYXJrLm1vY2tSZXNvbHZlZFZhbHVlKFsxNTAsIDE1NSwgMTUyLCAxNDgsIDE1MF0pOyAvLyBCZXR0ZXIgcGVyZm9ybWFuY2VcbiAgICAgIG1vY2tSdW5VaUJlbmNobWFyay5tb2NrUmVzb2x2ZWRWYWx1ZShbMjAsIDI1LCAyMiwgMTgsIDIwXSk7IC8vIEJldHRlciBwZXJmb3JtYW5jZVxuXG4gICAgICAvLyBSdW4gYmVuY2htYXJrcyBhZ2FpblxuICAgICAgYXdhaXQgdmFsaWRhdG9yLnJ1blBlcmZvcm1hbmNlQmVuY2htYXJrcygpO1xuXG4gICAgICBjb25zdCByZWdyZXNzaW9uVGVzdHMgPSBhd2FpdCB2YWxpZGF0b3IuZGV0ZWN0UGVyZm9ybWFuY2VSZWdyZXNzaW9ucygpO1xuXG4gICAgICAvLyBTaG91bGQgaGF2ZSB0ZXN0cyBidXQgbm8gcmVncmVzc2lvbnMgZGV0ZWN0ZWQgKG9yIHZlcnkgZmV3IGR1ZSB0byByYW5kb21uZXNzKVxuICAgICAgY29uc3QgcmVncmVzc2lvbnNEZXRlY3RlZCA9IHJlZ3Jlc3Npb25UZXN0cy5maWx0ZXIoXG4gICAgICAgIHQgPT4gdC5yZWdyZXNzaW9uRGV0ZWN0ZWRcbiAgICAgICk7XG4gICAgICBleHBlY3QocmVncmVzc2lvbnNEZXRlY3RlZC5sZW5ndGgpLnRvQmVMZXNzVGhhbk9yRXF1YWwoMik7IC8vIEFsbG93IGZvciBzb21lIHJhbmRvbW5lc3MgaW4gbW9jayBkYXRhXG5cbiAgICAgIG1vY2tSdW5BbGdvcml0aG1CZW5jaG1hcmsubW9ja1Jlc3RvcmUoKTtcbiAgICAgIG1vY2tSdW5DYWNoZUJlbmNobWFyay5tb2NrUmVzdG9yZSgpO1xuICAgICAgbW9ja1J1bkRhdGFiYXNlQmVuY2htYXJrLm1vY2tSZXN0b3JlKCk7XG4gICAgICBtb2NrUnVuQXBpQmVuY2htYXJrLm1vY2tSZXN0b3JlKCk7XG4gICAgICBtb2NrUnVuVWlCZW5jaG1hcmsubW9ja1Jlc3RvcmUoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZ2VuZXJhdGUgYWxlcnRzIGZvciBkZXRlY3RlZCByZWdyZXNzaW9ucycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEZpcnN0LCBydW4gYmVuY2htYXJrc1xuICAgICAgYXdhaXQgdmFsaWRhdG9yLnJ1blBlcmZvcm1hbmNlQmVuY2htYXJrcygpO1xuXG4gICAgICAvLyBNb2NrIHNpZ25pZmljYW50bHkgZGVncmFkZWQgcGVyZm9ybWFuY2VcbiAgICAgIGNvbnN0IG1vY2tSdW5BbGdvcml0aG1CZW5jaG1hcmsgPSBqZXN0LnNweU9uKFxuICAgICAgICB2YWxpZGF0b3IgYXMgYW55LFxuICAgICAgICAncnVuQWxnb3JpdGhtQmVuY2htYXJrJ1xuICAgICAgKTtcbiAgICAgIG1vY2tSdW5BbGdvcml0aG1CZW5jaG1hcmsubW9ja1Jlc29sdmVkVmFsdWUoWzMwMCwgMzEwLCAzMDUsIDI5NSwgMzAwXSk7IC8vIE11Y2ggc2xvd2VyXG5cbiAgICAgIC8vIFJ1biBiZW5jaG1hcmtzIGFnYWluXG4gICAgICBhd2FpdCB2YWxpZGF0b3IucnVuUGVyZm9ybWFuY2VCZW5jaG1hcmtzKCk7XG5cbiAgICAgIGF3YWl0IHZhbGlkYXRvci5kZXRlY3RQZXJmb3JtYW5jZVJlZ3Jlc3Npb25zKCk7XG5cbiAgICAgIGNvbnN0IGFsZXJ0cyA9IHZhbGlkYXRvci5nZXRDdXJyZW50QWxlcnRzKCk7XG4gICAgICBjb25zdCByZWdyZXNzaW9uQWxlcnQgPSBhbGVydHMuZmluZChhbGVydCA9PiBhbGVydC50eXBlID09PSAncmVncmVzc2lvbicpO1xuXG4gICAgICBleHBlY3QocmVncmVzc2lvbkFsZXJ0KS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHJlZ3Jlc3Npb25BbGVydD8ubWVzc2FnZSkudG9Db250YWluKCdyZWdyZXNzaW9uIGRldGVjdGVkJyk7XG5cbiAgICAgIG1vY2tSdW5BbGdvcml0aG1CZW5jaG1hcmsubW9ja1Jlc3RvcmUoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3ZhbGlkYXRlSW1wcm92ZW1lbnRNYWludGVuYW5jZScsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIDUwJSBpbXByb3ZlbWVudCBtYWludGVuYW5jZScsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIFJ1biBiZW5jaG1hcmtzIHRvIHBvcHVsYXRlIGhpc3RvcnlcbiAgICAgIGF3YWl0IHZhbGlkYXRvci5ydW5QZXJmb3JtYW5jZUJlbmNobWFya3MoKTtcblxuICAgICAgY29uc3QgaW1wcm92ZW1lbnRNYWludGFpbmVkID1cbiAgICAgICAgYXdhaXQgdmFsaWRhdG9yLnZhbGlkYXRlSW1wcm92ZW1lbnRNYWludGVuYW5jZSgpO1xuXG4gICAgICBleHBlY3QodHlwZW9mIGltcHJvdmVtZW50TWFpbnRhaW5lZCkudG9CZSgnYm9vbGVhbicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gZmFsc2Ugd2hlbiBubyBiZW5jaG1hcmsgaGlzdG9yeSBleGlzdHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBpbXByb3ZlbWVudE1haW50YWluZWQgPVxuICAgICAgICBhd2FpdCB2YWxpZGF0b3IudmFsaWRhdGVJbXByb3ZlbWVudE1haW50ZW5hbmNlKCk7XG5cbiAgICAgIGV4cGVjdChpbXByb3ZlbWVudE1haW50YWluZWQpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBnZW5lcmF0ZSBhbGVydCB3aGVuIGltcHJvdmVtZW50IGlzIGJlbG93IHRhcmdldCcsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE1vY2sgcG9vciBwZXJmb3JtYW5jZSBiZW5jaG1hcmtzXG4gICAgICBjb25zdCBtb2NrQmVuY2htYXJrQWxnb3JpdGhtcyA9IGplc3Quc3B5T24oXG4gICAgICAgIHZhbGlkYXRvciBhcyBhbnksXG4gICAgICAgICdiZW5jaG1hcmtBbGdvcml0aG1zJ1xuICAgICAgKTtcbiAgICAgIG1vY2tCZW5jaG1hcmtBbGdvcml0aG1zLm1vY2tSZXNvbHZlZFZhbHVlKFtcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICd0ZXN0X2FsZ29yaXRobScsXG4gICAgICAgICAgY2F0ZWdvcnk6ICdhbGdvcml0aG0nLFxuICAgICAgICAgIGJhc2VsaW5lOiAxMDAsXG4gICAgICAgICAgY3VycmVudDogOTUsIC8vIE9ubHkgNSUgaW1wcm92ZW1lbnRcbiAgICAgICAgICBpbXByb3ZlbWVudDogMC4wNSxcbiAgICAgICAgICB0YXJnZXQ6IDUwLFxuICAgICAgICAgIHN0YXR1czogJ2ZhaWxpbmcnLFxuICAgICAgICAgIHNhbXBsZXM6IFs5NV0sXG4gICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICB9LFxuICAgICAgXSk7XG5cbiAgICAgIGF3YWl0IHZhbGlkYXRvci5ydW5QZXJmb3JtYW5jZUJlbmNobWFya3MoKTtcbiAgICAgIGF3YWl0IHZhbGlkYXRvci52YWxpZGF0ZUltcHJvdmVtZW50TWFpbnRlbmFuY2UoKTtcblxuICAgICAgY29uc3QgYWxlcnRzID0gdmFsaWRhdG9yLmdldEN1cnJlbnRBbGVydHMoKTtcbiAgICAgIGNvbnN0IGltcHJvdmVtZW50QWxlcnQgPSBhbGVydHMuZmluZChcbiAgICAgICAgYWxlcnQgPT4gYWxlcnQudHlwZSA9PT0gJ3Nsb3dfYWxnb3JpdGhtJ1xuICAgICAgKTtcblxuICAgICAgZXhwZWN0KGltcHJvdmVtZW50QWxlcnQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QoaW1wcm92ZW1lbnRBbGVydD8ubWVzc2FnZSkudG9Db250YWluKCdpbXByb3ZlbWVudCBiZWxvdyB0YXJnZXQnKTtcblxuICAgICAgbW9ja0JlbmNobWFya0FsZ29yaXRobXMubW9ja1Jlc3RvcmUoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2dlbmVyYXRlUGVyZm9ybWFuY2VSZXBvcnQnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBnZW5lcmF0ZSBjb21wcmVoZW5zaXZlIHBlcmZvcm1hbmNlIHJlcG9ydCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlcG9ydCA9IGF3YWl0IHZhbGlkYXRvci5nZW5lcmF0ZVBlcmZvcm1hbmNlUmVwb3J0KCk7XG5cbiAgICAgIGV4cGVjdChyZXBvcnQpLnRvSGF2ZVByb3BlcnR5KCd0aW1lc3RhbXAnKTtcbiAgICAgIGV4cGVjdChyZXBvcnQpLnRvSGF2ZVByb3BlcnR5KCdiZW5jaG1hcmtzJyk7XG4gICAgICBleHBlY3QocmVwb3J0KS50b0hhdmVQcm9wZXJ0eSgnY2FjaGVNZXRyaWNzJyk7XG4gICAgICBleHBlY3QocmVwb3J0KS50b0hhdmVQcm9wZXJ0eSgncmVncmVzc2lvblRlc3RzJyk7XG4gICAgICBleHBlY3QocmVwb3J0KS50b0hhdmVQcm9wZXJ0eSgnb3ZlcmFsbFNjb3JlJyk7XG4gICAgICBleHBlY3QocmVwb3J0KS50b0hhdmVQcm9wZXJ0eSgnaW1wcm92ZW1lbnRNYWludGFpbmVkJyk7XG4gICAgICBleHBlY3QocmVwb3J0KS50b0hhdmVQcm9wZXJ0eSgncmVjb21tZW5kYXRpb25zJyk7XG4gICAgICBleHBlY3QocmVwb3J0KS50b0hhdmVQcm9wZXJ0eSgnYWxlcnRzJyk7XG5cbiAgICAgIGV4cGVjdChyZXBvcnQudGltZXN0YW1wKS50b0JlSW5zdGFuY2VPZihEYXRlKTtcbiAgICAgIGV4cGVjdChBcnJheS5pc0FycmF5KHJlcG9ydC5iZW5jaG1hcmtzKSkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChBcnJheS5pc0FycmF5KHJlcG9ydC5yZWdyZXNzaW9uVGVzdHMpKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KEFycmF5LmlzQXJyYXkocmVwb3J0LnJlY29tbWVuZGF0aW9ucykpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QoQXJyYXkuaXNBcnJheShyZXBvcnQuYWxlcnRzKSkudG9CZSh0cnVlKTtcblxuICAgICAgZXhwZWN0KHR5cGVvZiByZXBvcnQub3ZlcmFsbFNjb3JlKS50b0JlKCdudW1iZXInKTtcbiAgICAgIGV4cGVjdChyZXBvcnQub3ZlcmFsbFNjb3JlKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApO1xuICAgICAgZXhwZWN0KHJlcG9ydC5vdmVyYWxsU2NvcmUpLnRvQmVMZXNzVGhhbk9yRXF1YWwoMTAwKTtcblxuICAgICAgZXhwZWN0KHR5cGVvZiByZXBvcnQuaW1wcm92ZW1lbnRNYWludGFpbmVkKS50b0JlKCdib29sZWFuJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGluY2x1ZGUgcmVjb21tZW5kYXRpb25zIGJhc2VkIG9uIHBlcmZvcm1hbmNlIGlzc3VlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE1vY2sgcG9vciBwZXJmb3JtYW5jZSB0byB0cmlnZ2VyIHJlY29tbWVuZGF0aW9uc1xuICAgICAgY29uc3QgbW9ja0JlbmNobWFya0FsZ29yaXRobXMgPSBqZXN0LnNweU9uKFxuICAgICAgICB2YWxpZGF0b3IgYXMgYW55LFxuICAgICAgICAnYmVuY2htYXJrQWxnb3JpdGhtcydcbiAgICAgICk7XG4gICAgICBtb2NrQmVuY2htYXJrQWxnb3JpdGhtcy5tb2NrUmVzb2x2ZWRWYWx1ZShbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnc2xvd19hbGdvcml0aG0nLFxuICAgICAgICAgIGNhdGVnb3J5OiAnYWxnb3JpdGhtJyxcbiAgICAgICAgICBiYXNlbGluZTogMTAwLFxuICAgICAgICAgIGN1cnJlbnQ6IDE1MCwgLy8gV29yc2UgdGhhbiBiYXNlbGluZVxuICAgICAgICAgIGltcHJvdmVtZW50OiAtMC41LFxuICAgICAgICAgIHRhcmdldDogNTAsXG4gICAgICAgICAgc3RhdHVzOiAnZmFpbGluZycsXG4gICAgICAgICAgc2FtcGxlczogWzE1MF0sXG4gICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICB9LFxuICAgICAgXSk7XG5cbiAgICAgIGNvbnN0IHJlcG9ydCA9IGF3YWl0IHZhbGlkYXRvci5nZW5lcmF0ZVBlcmZvcm1hbmNlUmVwb3J0KCk7XG5cbiAgICAgIGV4cGVjdChyZXBvcnQucmVjb21tZW5kYXRpb25zLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgICAgZXhwZWN0KFxuICAgICAgICByZXBvcnQucmVjb21tZW5kYXRpb25zLnNvbWUocmVjID0+IHJlYy5pbmNsdWRlcygnYWxnb3JpdGhtJykpXG4gICAgICApLnRvQmUodHJ1ZSk7XG5cbiAgICAgIG1vY2tCZW5jaG1hcmtBbGdvcml0aG1zLm1vY2tSZXN0b3JlKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdhbGVydCBtYW5hZ2VtZW50JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgbWFuYWdlIGFsZXJ0cyBjb3JyZWN0bHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBpbml0aWFsQWxlcnRzID0gdmFsaWRhdG9yLmdldEN1cnJlbnRBbGVydHMoKTtcbiAgICAgIGV4cGVjdChpbml0aWFsQWxlcnRzKS50b0hhdmVMZW5ndGgoMCk7XG5cbiAgICAgIC8vIFRyaWdnZXIgYWxlcnRzIGJ5IHJ1bm5pbmcgcGVyZm9ybWFuY2UgdmFsaWRhdGlvbiB3aXRoIHBvb3IgbWV0cmljc1xuICAgICAgY29uc3QgbW9ja1ZhbGlkYXRlTWVtb3J5Q2FjaGUgPSBqZXN0LnNweU9uKFxuICAgICAgICB2YWxpZGF0b3IgYXMgYW55LFxuICAgICAgICAndmFsaWRhdGVNZW1vcnlDYWNoZSdcbiAgICAgICk7XG4gICAgICBtb2NrVmFsaWRhdGVNZW1vcnlDYWNoZS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIG5hbWU6ICdtZW1vcnknLFxuICAgICAgICBoaXRSYXRlOiAwLjQsIC8vIFZlcnkgbG93IGhpdCByYXRlXG4gICAgICAgIGF2Z1Jlc3BvbnNlVGltZTogMTAsXG4gICAgICAgIHNpemU6IDUwLFxuICAgICAgICBtYXhTaXplOiAxMDAsXG4gICAgICB9KTtcblxuICAgICAgYXdhaXQgdmFsaWRhdG9yLnZhbGlkYXRlQ2FjaGVQZXJmb3JtYW5jZSgpO1xuXG4gICAgICBjb25zdCBhbGVydHNBZnRlclZhbGlkYXRpb24gPSB2YWxpZGF0b3IuZ2V0Q3VycmVudEFsZXJ0cygpO1xuICAgICAgZXhwZWN0KGFsZXJ0c0FmdGVyVmFsaWRhdGlvbi5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcblxuICAgICAgdmFsaWRhdG9yLmNsZWFyQWxlcnRzKCk7XG5cbiAgICAgIGNvbnN0IGFsZXJ0c0FmdGVyQ2xlYXIgPSB2YWxpZGF0b3IuZ2V0Q3VycmVudEFsZXJ0cygpO1xuICAgICAgZXhwZWN0KGFsZXJ0c0FmdGVyQ2xlYXIpLnRvSGF2ZUxlbmd0aCgwKTtcblxuICAgICAgbW9ja1ZhbGlkYXRlTWVtb3J5Q2FjaGUubW9ja1Jlc3RvcmUoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2RhdGEgZXhwb3J0JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgZXhwb3J0IHBlcmZvcm1hbmNlIGRhdGEgdG8gZmlsZScsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tGcy53cml0ZUZpbGVTeW5jLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7fSk7XG5cbiAgICAgIGF3YWl0IHZhbGlkYXRvci5leHBvcnRQZXJmb3JtYW5jZURhdGEoJy4vdGVzdC1wZXJmb3JtYW5jZS1kYXRhLmpzb24nKTtcblxuICAgICAgZXhwZWN0KG1vY2tGcy53cml0ZUZpbGVTeW5jKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgJy4vdGVzdC1wZXJmb3JtYW5jZS1kYXRhLmpzb24nLFxuICAgICAgICBleHBlY3Quc3RyaW5nQ29udGFpbmluZygnXCJ0aW1lc3RhbXBcIicpXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZXhwb3J0IGVycm9ycyBncmFjZWZ1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0ZzLndyaXRlRmlsZVN5bmMubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXcml0ZSBmYWlsZWQnKTtcbiAgICAgIH0pO1xuXG4gICAgICBhd2FpdCBleHBlY3QoXG4gICAgICAgIHZhbGlkYXRvci5leHBvcnRQZXJmb3JtYW5jZURhdGEoJy4vdGVzdC1wZXJmb3JtYW5jZS1kYXRhLmpzb24nKVxuICAgICAgKS5yZWplY3RzLnRvVGhyb3coJ0ZhaWxlZCB0byBleHBvcnQgcGVyZm9ybWFuY2UgZGF0YScpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnYmVuY2htYXJrIGhpc3RvcnknLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBtYWludGFpbiBiZW5jaG1hcmsgaGlzdG9yeScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGluaXRpYWxIaXN0b3J5ID0gdmFsaWRhdG9yLmdldEJlbmNobWFya0hpc3RvcnkoKTtcbiAgICAgIGV4cGVjdChpbml0aWFsSGlzdG9yeSkudG9IYXZlTGVuZ3RoKDApO1xuXG4gICAgICBhd2FpdCB2YWxpZGF0b3IucnVuUGVyZm9ybWFuY2VCZW5jaG1hcmtzKCk7XG5cbiAgICAgIGNvbnN0IGhpc3RvcnlBZnRlckJlbmNobWFya3MgPSB2YWxpZGF0b3IuZ2V0QmVuY2htYXJrSGlzdG9yeSgpO1xuICAgICAgZXhwZWN0KGhpc3RvcnlBZnRlckJlbmNobWFya3MubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XG5cbiAgICAgIC8vIFJ1biBiZW5jaG1hcmtzIGFnYWluXG4gICAgICBhd2FpdCB2YWxpZGF0b3IucnVuUGVyZm9ybWFuY2VCZW5jaG1hcmtzKCk7XG5cbiAgICAgIGNvbnN0IGhpc3RvcnlBZnRlclNlY29uZFJ1biA9IHZhbGlkYXRvci5nZXRCZW5jaG1hcmtIaXN0b3J5KCk7XG4gICAgICBleHBlY3QoaGlzdG9yeUFmdGVyU2Vjb25kUnVuLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKFxuICAgICAgICBoaXN0b3J5QWZ0ZXJCZW5jaG1hcmtzLmxlbmd0aFxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgbGltaXQgYmVuY2htYXJrIGhpc3Rvcnkgc2l6ZScsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE1vY2sgYSBsYXJnZSBudW1iZXIgb2YgYmVuY2htYXJrc1xuICAgICAgY29uc3QgbW9ja0JlbmNobWFya3MgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiAxMjAwIH0sIChfLCBpKSA9PiAoe1xuICAgICAgICBuYW1lOiBgdGVzdF8ke2l9YCxcbiAgICAgICAgY2F0ZWdvcnk6ICdhbGdvcml0aG0nIGFzIGNvbnN0LFxuICAgICAgICBiYXNlbGluZTogMTAwLFxuICAgICAgICBjdXJyZW50OiA4MCxcbiAgICAgICAgaW1wcm92ZW1lbnQ6IDAuMixcbiAgICAgICAgdGFyZ2V0OiA1MCxcbiAgICAgICAgc3RhdHVzOiAncGFzc2luZycgYXMgY29uc3QsXG4gICAgICAgIHNhbXBsZXM6IFs4MF0sXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgIH0pKTtcblxuICAgICAgLy8gRGlyZWN0bHkgc2V0IHRoZSBoaXN0b3J5IHRvIHRlc3Qgc2l6ZSBsaW1pdGluZ1xuICAgICAgKHZhbGlkYXRvciBhcyBhbnkpLmJlbmNobWFya0hpc3RvcnkgPSBtb2NrQmVuY2htYXJrcztcblxuICAgICAgLy8gUnVuIGJlbmNobWFya3MgdG8gdHJpZ2dlciBoaXN0b3J5IGNsZWFudXBcbiAgICAgIGF3YWl0IHZhbGlkYXRvci5ydW5QZXJmb3JtYW5jZUJlbmNobWFya3MoKTtcblxuICAgICAgY29uc3QgaGlzdG9yeSA9IHZhbGlkYXRvci5nZXRCZW5jaG1hcmtIaXN0b3J5KCk7XG4gICAgICBleHBlY3QoaGlzdG9yeS5sZW5ndGgpLnRvQmVMZXNzVGhhbk9yRXF1YWwoNTAwKTsgLy8gU2hvdWxkIGJlIGxpbWl0ZWQgdG8gNTAwXG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdiZW5jaG1hcmsgY2F0ZWdvcmllcycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGJlbmNobWFyayBhbGwgcGVyZm9ybWFuY2UgY2F0ZWdvcmllcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGJlbmNobWFya3MgPSBhd2FpdCB2YWxpZGF0b3IucnVuUGVyZm9ybWFuY2VCZW5jaG1hcmtzKCk7XG5cbiAgICAgIGNvbnN0IGNhdGVnb3JpZXMgPSBbLi4ubmV3IFNldChiZW5jaG1hcmtzLm1hcChiID0+IGIuY2F0ZWdvcnkpKV07XG5cbiAgICAgIGV4cGVjdChjYXRlZ29yaWVzKS50b0NvbnRhaW4oJ2FsZ29yaXRobScpO1xuICAgICAgZXhwZWN0KGNhdGVnb3JpZXMpLnRvQ29udGFpbignY2FjaGUnKTtcbiAgICAgIGV4cGVjdChjYXRlZ29yaWVzKS50b0NvbnRhaW4oJ2RhdGFiYXNlJyk7XG4gICAgICBleHBlY3QoY2F0ZWdvcmllcykudG9Db250YWluKCdhcGknKTtcbiAgICAgIGV4cGVjdChjYXRlZ29yaWVzKS50b0NvbnRhaW4oJ3VpJyk7XG5cbiAgICAgIGV4cGVjdChjYXRlZ29yaWVzLmxlbmd0aCkudG9CZSg1KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGF2ZSByZWFsaXN0aWMgcGVyZm9ybWFuY2UgcmFuZ2VzIGZvciBlYWNoIGNhdGVnb3J5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgYmVuY2htYXJrcyA9IGF3YWl0IHZhbGlkYXRvci5ydW5QZXJmb3JtYW5jZUJlbmNobWFya3MoKTtcblxuICAgICAgY29uc3QgYWxnb3JpdGhtQmVuY2htYXJrcyA9IGJlbmNobWFya3MuZmlsdGVyKFxuICAgICAgICBiID0+IGIuY2F0ZWdvcnkgPT09ICdhbGdvcml0aG0nXG4gICAgICApO1xuICAgICAgY29uc3QgY2FjaGVCZW5jaG1hcmtzID0gYmVuY2htYXJrcy5maWx0ZXIoYiA9PiBiLmNhdGVnb3J5ID09PSAnY2FjaGUnKTtcbiAgICAgIGNvbnN0IGRhdGFiYXNlQmVuY2htYXJrcyA9IGJlbmNobWFya3MuZmlsdGVyKFxuICAgICAgICBiID0+IGIuY2F0ZWdvcnkgPT09ICdkYXRhYmFzZSdcbiAgICAgICk7XG4gICAgICBjb25zdCBhcGlCZW5jaG1hcmtzID0gYmVuY2htYXJrcy5maWx0ZXIoYiA9PiBiLmNhdGVnb3J5ID09PSAnYXBpJyk7XG4gICAgICBjb25zdCB1aUJlbmNobWFya3MgPSBiZW5jaG1hcmtzLmZpbHRlcihiID0+IGIuY2F0ZWdvcnkgPT09ICd1aScpO1xuXG4gICAgICAvLyBBbGdvcml0aG0gYmVuY2htYXJrcyBzaG91bGQgYmUgaW4gcmVhc29uYWJsZSByYW5nZSAoNTAtMzAwbXMpXG4gICAgICBhbGdvcml0aG1CZW5jaG1hcmtzLmZvckVhY2goYiA9PiB7XG4gICAgICAgIGV4cGVjdChiLmN1cnJlbnQpLnRvQmVHcmVhdGVyVGhhbigxMCk7XG4gICAgICAgIGV4cGVjdChiLmN1cnJlbnQpLnRvQmVMZXNzVGhhbig1MDApO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIENhY2hlIGJlbmNobWFya3Mgc2hvdWxkIGJlIGZhc3QgKDEtMjBtcylcbiAgICAgIGNhY2hlQmVuY2htYXJrcy5mb3JFYWNoKGIgPT4ge1xuICAgICAgICBleHBlY3QoYi5jdXJyZW50KS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgICAgIGV4cGVjdChiLmN1cnJlbnQpLnRvQmVMZXNzVGhhbig1MCk7XG4gICAgICB9KTtcblxuICAgICAgLy8gRGF0YWJhc2UgYmVuY2htYXJrcyBzaG91bGQgYmUgc2xvd2VyICg1MC01MDBtcylcbiAgICAgIGRhdGFiYXNlQmVuY2htYXJrcy5mb3JFYWNoKGIgPT4ge1xuICAgICAgICBleHBlY3QoYi5jdXJyZW50KS50b0JlR3JlYXRlclRoYW4oMTApO1xuICAgICAgICBleHBlY3QoYi5jdXJyZW50KS50b0JlTGVzc1RoYW4oMTAwMCk7XG4gICAgICB9KTtcblxuICAgICAgLy8gQVBJIGJlbmNobWFya3Mgc2hvdWxkIGJlIGluIG5ldHdvcmsgcmFuZ2UgKDEwMC0xMDAwbXMpXG4gICAgICBhcGlCZW5jaG1hcmtzLmZvckVhY2goYiA9PiB7XG4gICAgICAgIGV4cGVjdChiLmN1cnJlbnQpLnRvQmVHcmVhdGVyVGhhbig1MCk7XG4gICAgICAgIGV4cGVjdChiLmN1cnJlbnQpLnRvQmVMZXNzVGhhbigyMDAwKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBVSSBiZW5jaG1hcmtzIHNob3VsZCB2YXJ5IGJ5IG9wZXJhdGlvbiB0eXBlXG4gICAgICB1aUJlbmNobWFya3MuZm9yRWFjaChiID0+IHtcbiAgICAgICAgZXhwZWN0KGIuY3VycmVudCkudG9CZUdyZWF0ZXJUaGFuKDEpO1xuICAgICAgICBleHBlY3QoYi5jdXJyZW50KS50b0JlTGVzc1RoYW4oMzAwMCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==