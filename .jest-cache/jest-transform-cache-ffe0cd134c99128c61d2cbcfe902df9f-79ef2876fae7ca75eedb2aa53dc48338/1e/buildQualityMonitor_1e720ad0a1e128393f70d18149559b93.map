{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/buildQualityMonitor.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/buildQualityMonitor.ts"],"sourcesContent":["/**\n * Build Quality Monitoring Utilities\n * \n * This module provides comprehensive build performance monitoring, error tracking,\n * and quality metrics analysis for development workflow optimization.\n */\n\nimport { execSync } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\nimport { logger } from './logger';\n\n// Build monitoring interfaces\nexport interface BuildQualityReport {\n  buildMetrics: BuildMetrics;\n  performanceAnalysis: BuildPerformanceAnalysis;\n  memoryAnalysis: MemoryUsageAnalysis;\n  qualityMetrics: QualityMetricsReport;\n  alerts: AlertResponse[];\n  recommendations: OptimizationRecommendation[];\n  timestamp: Date;\n}\n\nexport interface BuildMetrics {\n  buildId: string;\n  startTime: Date;\n  endTime: Date;\n  duration: number; // milliseconds\n  success: boolean;\n  errorCount: number;\n  warningCount: number;\n  memoryUsage: {\n    peak: number;\n    average: number;\n    gcCount: number;\n    gcTime: number;\n  };\n  bundleSize: {\n    total: number;\n    javascript: number;\n    css: number;\n    assets: number;\n  };\n  cacheHitRate: number;\n  parallelization: {\n    workers: number;\n    efficiency: number;\n  };\n}\n\nexport interface BuildPerformanceAnalysis {\n  currentBuildTime: number;\n  averageBuildTime: number;\n  buildTimePercentile: number;\n  performanceTrend: 'improving' | 'stable' | 'degrading';\n  bottleneckAnalysis: BottleneckAnalysis[];\n  optimizationRecommendations: string[];\n}\n\nexport interface MemoryUsageAnalysis {\n  peakMemoryUsage: number;\n  averageMemoryUsage: number;\n  memoryLeakDetection: MemoryLeakInfo[];\n  garbageCollectionStats: GCStats;\n  memoryOptimizationSuggestions: string[];\n}\n\nexport interface QualityMetricsReport {\n  overallScore: number; // 0-100\n  codeQuality: {\n    typeScriptErrors: number;\n    lintingWarnings: number;\n    testCoverage: number;\n    codeComplexity: number;\n  };\n  buildQuality: {\n    successRate: number;\n    averageBuildTime: number;\n    failureRate: number;\n    recoveryTime: number;\n  };\n  performanceQuality: {\n    bundleSize: number;\n    loadTime: number;\n    memoryEfficiency: number;\n    cacheEfficiency: number;\n  };\n  technicalDebt: {\n    debtRatio: number;\n    maintainabilityIndex: number;\n    duplicateCodePercentage: number;\n    outdatedDependencies: number;\n  };\n}\n\nexport interface AlertResponse {\n  type: AlertType;\n  severity: AlertSeverity;\n  message: string;\n  recommendations: string[];\n  autoResponse: string;\n  timestamp: Date;\n}\n\nexport interface OptimizationRecommendation {\n  category: 'build' | 'memory' | 'bundle' | 'cache';\n  priority: 'high' | 'medium' | 'low';\n  impact: 'high' | 'medium' | 'low';\n  effort: 'high' | 'medium' | 'low';\n  description: string;\n  implementation: string[];\n  expectedImprovement: string;\n}\n\nexport interface BottleneckAnalysis {\n  phase: string;\n  duration: number;\n  percentage: number;\n  suggestions: string[];\n}\n\nexport interface MemoryLeakInfo {\n  component: string;\n  leakSize: number;\n  growthRate: number;\n  suggestions: string[];\n}\n\nexport interface GCStats {\n  totalCollections: number;\n  totalTime: number;\n  averageTime: number;\n  efficiency: number;\n}\n\nexport enum AlertType {\n  BUILD_PERFORMANCE = 'BUILD_PERFORMANCE',\n  MEMORY_USAGE = 'MEMORY_USAGE',\n  BUNDLE_SIZE = 'BUNDLE_SIZE',\n  ERROR_RATE = 'ERROR_RATE',\n  QUALITY_GATE = 'QUALITY_GATE'\n}\n\nexport enum AlertSeverity {\n  LOW = 'LOW',\n  MEDIUM = 'MEDIUM',\n  HIGH = 'HIGH',\n  CRITICAL = 'CRITICAL'\n}\n\n// Configuration constants\nconst PERFORMANCE_THRESHOLDS = {\n  BUILD_TIME: {\n    DEVELOPMENT: 60000,    // 60 seconds\n    PRODUCTION: 300000,    // 5 minutes\n    CRITICAL: 600000       // 10 minutes\n  },\n  MEMORY_USAGE: {\n    WARNING: 2048,         // 2GB\n    CRITICAL: 4096,        // 4GB\n    EMERGENCY: 8192        // 8GB\n  },\n  BUNDLE_SIZE: {\n    WARNING_INCREASE: 10,  // 10% increase\n    CRITICAL_INCREASE: 20, // 20% increase\n    MAX_SIZE: 10240       // 10MB\n  },\n  SUCCESS_RATE: {\n    MINIMUM: 90           // 90% minimum success rate\n  }\n};\n\n/**\n * Main function to monitor build quality and generate comprehensive report\n */\nexport async function monitorBuildQuality(): Promise<BuildQualityReport> {\n  const startTime = Date.now();\n  \n  try {\n    logger.info('Starting comprehensive build quality monitoring');\n    \n    // 1. Collect build metrics\n    const buildMetrics = await collectBuildMetrics();\n    \n    // 2. Analyze build performance\n    const performanceAnalysis = await analyzeBuildPerformance(buildMetrics);\n    \n    // 3. Analyze memory usage\n    const memoryAnalysis = await analyzeMemoryUsage(buildMetrics);\n    \n    // 4. Generate quality metrics report\n    const qualityMetrics = await generateQualityMetricsReport();\n    \n    // 5. Process performance alerts\n    const alerts = await processPerformanceAlerts(buildMetrics);\n    \n    // 6. Generate optimization recommendations\n    const recommendations = generateOptimizationRecommendations(\n      buildMetrics, \n      performanceAnalysis, \n      memoryAnalysis\n    );\n    \n    const duration = Date.now() - startTime;\n    logger.info(`Build quality monitoring completed in ${duration}ms`);\n    \n    return {\n      buildMetrics,\n      performanceAnalysis,\n      memoryAnalysis,\n      qualityMetrics,\n      alerts,\n      recommendations,\n      timestamp: new Date()\n    };\n    \n  } catch (error) {\n    logger.error('Build quality monitoring failed:', error);\n    throw error;\n  }\n}\n\n/**\n * Collect comprehensive build metrics\n */\nasync function collectBuildMetrics(): Promise<BuildMetrics> {\n  try {\n    // Generate unique build ID\n    const buildId = `build_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    // Get build timing information\n    const buildTiming = await getBuildTiming();\n    \n    // Get error and warning counts\n    const errorCounts = await getErrorAndWarningCounts();\n    \n    // Get memory usage information\n    const memoryUsage = await getMemoryUsage();\n    \n    // Get bundle size information\n    const bundleSize = await getBundleSize();\n    \n    // Get cache performance\n    const cacheHitRate = await getCacheHitRate();\n    \n    // Get parallelization info\n    const parallelization = await getParallelizationInfo();\n    \n    return {\n      buildId,\n      startTime: buildTiming.startTime,\n      endTime: buildTiming.endTime,\n      duration: buildTiming.duration,\n      success: buildTiming.success,\n      errorCount: errorCounts.errors,\n      warningCount: errorCounts.warnings,\n      memoryUsage,\n      bundleSize,\n      cacheHitRate,\n      parallelization\n    };\n    \n  } catch (error) {\n    logger.error('Error collecting build metrics:', error);\n    throw error;\n  }\n}\n\n/**\n * Get build timing information\n */\nasync function getBuildTiming(): Promise<{\n  startTime: Date;\n  endTime: Date;\n  duration: number;\n  success: boolean;\n}> {\n  try {\n    const startTime = new Date();\n    \n    // Run a quick build check to get timing\n    const buildStart = Date.now();\n    \n    try {\n      // Check if build is successful by running type check\n      execSync('yarn tsc --noEmit --skipLibCheck', {\n        stdio: 'pipe',\n        timeout: 30000 // 30 second timeout\n      });\n      \n      const buildEnd = Date.now();\n      const endTime = new Date();\n      \n      return {\n        startTime,\n        endTime,\n        duration: buildEnd - buildStart,\n        success: true\n      };\n      \n    } catch (error) {\n      const buildEnd = Date.now();\n      const endTime = new Date();\n      \n      return {\n        startTime,\n        endTime,\n        duration: buildEnd - buildStart,\n        success: false\n      };\n    }\n    \n  } catch (error) {\n    logger.error('Error getting build timing:', error);\n    \n    // Return default values\n    const now = new Date();\n    return {\n      startTime: now,\n      endTime: now,\n      duration: 0,\n      success: false\n    };\n  }\n}\n\n/**\n * Get error and warning counts\n */\nasync function getErrorAndWarningCounts(): Promise<{ errors: number; warnings: number }> {\n  try {\n    let errors = 0;\n    let warnings = 0;\n    \n    // Get TypeScript errors\n    try {\n      const tscOutput = execSync('yarn tsc --noEmit --skipLibCheck 2>&1', {\n        encoding: 'utf8',\n        stdio: 'pipe'\n      });\n      \n      // Count errors in output\n      const errorMatches = tscOutput.match(/error TS\\d+:/g);\n      errors = errorMatches ? errorMatches.length : 0;\n      \n    } catch (error: any) {\n      // tsc returns non-zero exit code when there are errors\n      if (error.stdout) {\n        const errorMatches = error.stdout.match(/error TS\\d+:/g);\n        errors = errorMatches ? errorMatches.length : 0;\n      }\n    }\n    \n    // Get ESLint warnings\n    try {\n      const eslintOutput = execSync('yarn lint --format=json 2>/dev/null', {\n        encoding: 'utf8',\n        stdio: 'pipe'\n      });\n      \n      const eslintResults = JSON.parse(eslintOutput);\n      warnings = eslintResults.reduce((total: number, result: any) => {\n        return total + (result.warningCount || 0);\n      }, 0);\n      \n    } catch (error) {\n      // ESLint might not be configured or might fail\n      warnings = 0;\n    }\n    \n    return { errors, warnings };\n    \n  } catch (error) {\n    logger.error('Error getting error and warning counts:', error);\n    return { errors: 0, warnings: 0 };\n  }\n}\n\n/**\n * Get memory usage information\n */\nasync function getMemoryUsage(): Promise<{\n  peak: number;\n  average: number;\n  gcCount: number;\n  gcTime: number;\n}> {\n  try {\n    // Get current memory usage\n    const memUsage = process.memoryUsage();\n    \n    // Estimate peak and average (simplified for this implementation)\n    const peak = Math.round(memUsage.heapUsed / 1024 / 1024); // MB\n    const average = Math.round(memUsage.heapTotal / 1024 / 1024); // MB\n    \n    // GC stats would require more sophisticated monitoring\n    // For now, provide estimated values\n    const gcCount = 0;\n    const gcTime = 0;\n    \n    return {\n      peak,\n      average,\n      gcCount,\n      gcTime\n    };\n    \n  } catch (error) {\n    logger.error('Error getting memory usage:', error);\n    return {\n      peak: 0,\n      average: 0,\n      gcCount: 0,\n      gcTime: 0\n    };\n  }\n}\n\n/**\n * Get bundle size information\n */\nasync function getBundleSize(): Promise<{\n  total: number;\n  javascript: number;\n  css: number;\n  assets: number;\n}> {\n  try {\n    // Check if .next directory exists (Next.js build output)\n    const nextDir = path.join(process.cwd(), '.next');\n    \n    if (fs.existsSync(nextDir)) {\n      // Get bundle sizes from .next directory\n      const bundleInfo = await analyzeBundleDirectory(nextDir);\n      return bundleInfo;\n    }\n    \n    // Fallback: estimate based on src directory\n    const srcDir = path.join(process.cwd(), 'src');\n    if (fs.existsSync(srcDir)) {\n      const srcSize = await getDirectorySize(srcDir);\n      return {\n        total: srcSize,\n        javascript: Math.round(srcSize * 0.7),\n        css: Math.round(srcSize * 0.2),\n        assets: Math.round(srcSize * 0.1)\n      };\n    }\n    \n    return {\n      total: 0,\n      javascript: 0,\n      css: 0,\n      assets: 0\n    };\n    \n  } catch (error) {\n    logger.error('Error getting bundle size:', error);\n    return {\n      total: 0,\n      javascript: 0,\n      css: 0,\n      assets: 0\n    };\n  }\n}\n\n/**\n * Analyze bundle directory for size information\n */\nasync function analyzeBundleDirectory(bundleDir: string): Promise<{\n  total: number;\n  javascript: number;\n  css: number;\n  assets: number;\n}> {\n  try {\n    let total = 0;\n    let javascript = 0;\n    let css = 0;\n    let assets = 0;\n    \n    const analyzeDirectory = (dir: string) => {\n      const files = fs.readdirSync(dir);\n      \n      for (const file of files) {\n        const filePath = path.join(dir, file);\n        const stat = fs.statSync(filePath);\n        \n        if (stat.isDirectory()) {\n          analyzeDirectory(filePath);\n        } else {\n          const size = stat.size;\n          total += size;\n          \n          const ext = path.extname(file).toLowerCase();\n          if (ext === '.js' || ext === '.jsx' || ext === '.ts' || ext === '.tsx') {\n            javascript += size;\n          } else if (ext === '.css' || ext === '.scss' || ext === '.sass') {\n            css += size;\n          } else {\n            assets += size;\n          }\n        }\n      }\n    };\n    \n    analyzeDirectory(bundleDir);\n    \n    // Convert to KB\n    return {\n      total: Math.round(total / 1024),\n      javascript: Math.round(javascript / 1024),\n      css: Math.round(css / 1024),\n      assets: Math.round(assets / 1024)\n    };\n    \n  } catch (error) {\n    logger.error('Error analyzing bundle directory:', error);\n    return {\n      total: 0,\n      javascript: 0,\n      css: 0,\n      assets: 0\n    };\n  }\n}\n\n/**\n * Get directory size in bytes\n */\nasync function getDirectorySize(dir: string): Promise<number> {\n  try {\n    let size = 0;\n    \n    const files = fs.readdirSync(dir);\n    for (const file of files) {\n      const filePath = path.join(dir, file);\n      const stat = fs.statSync(filePath);\n      \n      if (stat.isDirectory()) {\n        size += await getDirectorySize(filePath);\n      } else {\n        size += stat.size;\n      }\n    }\n    \n    return Math.round(size / 1024); // Convert to KB\n    \n  } catch (error) {\n    return 0;\n  }\n}\n\n/**\n * Get cache hit rate\n */\nasync function getCacheHitRate(): Promise<number> {\n  try {\n    // This would require integration with build system cache\n    // For now, return estimated value based on .next cache\n    const nextCacheDir = path.join(process.cwd(), '.next', 'cache');\n    \n    if (fs.existsSync(nextCacheDir)) {\n      // Estimate cache efficiency based on cache directory size\n      const cacheSize = await getDirectorySize(nextCacheDir);\n      \n      // Simple heuristic: larger cache = better hit rate\n      if (cacheSize > 1000) { // > 1MB cache\n        return 0.8; // 80% hit rate\n      } else if (cacheSize > 100) { // > 100KB cache\n        return 0.6; // 60% hit rate\n      } else {\n        return 0.3; // 30% hit rate\n      }\n    }\n    \n    return 0.5; // Default 50% hit rate\n    \n  } catch (error) {\n    logger.error('Error getting cache hit rate:', error);\n    return 0.5;\n  }\n}\n\n/**\n * Get parallelization information\n */\nasync function getParallelizationInfo(): Promise<{\n  workers: number;\n  efficiency: number;\n}> {\n  try {\n    // Get CPU count for worker estimation\n    const cpuCount = require('os').cpus().length;\n    \n    // Estimate workers based on CPU count and build system\n    const workers = Math.max(1, Math.floor(cpuCount * 0.75));\n    \n    // Estimate efficiency based on workers vs CPU count\n    const efficiency = Math.min(1.0, workers / cpuCount);\n    \n    return {\n      workers,\n      efficiency\n    };\n    \n  } catch (error) {\n    logger.error('Error getting parallelization info:', error);\n    return {\n      workers: 1,\n      efficiency: 0.5\n    };\n  }\n}\n\n/**\n * Analyze build performance\n */\nasync function analyzeBuildPerformance(metrics: BuildMetrics): Promise<BuildPerformanceAnalysis> {\n  try {\n    // Calculate performance metrics\n    const currentBuildTime = metrics.duration;\n    const averageBuildTime = await getAverageBuildTime();\n    const buildTimePercentile = calculateBuildTimePercentile(currentBuildTime);\n    const performanceTrend = analyzePerformanceTrend(currentBuildTime, averageBuildTime);\n    \n    // Identify bottlenecks\n    const bottleneckAnalysis = identifyBuildBottlenecks(metrics);\n    \n    // Generate optimization recommendations\n    const optimizationRecommendations = generateBuildOptimizationRecommendations(metrics);\n    \n    return {\n      currentBuildTime,\n      averageBuildTime,\n      buildTimePercentile,\n      performanceTrend,\n      bottleneckAnalysis,\n      optimizationRecommendations\n    };\n    \n  } catch (error) {\n    logger.error('Error analyzing build performance:', error);\n    throw error;\n  }\n}\n\n/**\n * Get average build time (simplified implementation)\n */\nasync function getAverageBuildTime(): Promise<number> {\n  // In a real implementation, this would query historical build data\n  // For now, return a reasonable estimate\n  return 45000; // 45 seconds\n}\n\n/**\n * Calculate build time percentile\n */\nfunction calculateBuildTimePercentile(buildTime: number): number {\n  // Simplified percentile calculation\n  // In reality, this would use historical data\n  const benchmarkTimes = [30000, 45000, 60000, 90000, 120000]; // 30s, 45s, 1m, 1.5m, 2m\n  \n  let percentile = 0;\n  for (let i = 0; i < benchmarkTimes.length; i++) {\n    if (buildTime <= benchmarkTimes[i]) {\n      percentile = ((i + 1) / benchmarkTimes.length) * 100;\n      break;\n    }\n  }\n  \n  return percentile || 100; // If slower than all benchmarks\n}\n\n/**\n * Analyze performance trend\n */\nfunction analyzePerformanceTrend(currentTime: number, averageTime: number): 'improving' | 'stable' | 'degrading' {\n  const difference = currentTime - averageTime;\n  const percentageDifference = (difference / averageTime) * 100;\n  \n  if (percentageDifference < -10) {\n    return 'improving';\n  } else if (percentageDifference > 10) {\n    return 'degrading';\n  } else {\n    return 'stable';\n  }\n}\n\n/**\n * Identify build bottlenecks\n */\nfunction identifyBuildBottlenecks(metrics: BuildMetrics): BottleneckAnalysis[] {\n  const bottlenecks: BottleneckAnalysis[] = [];\n  \n  // Analyze TypeScript compilation\n  if (metrics.errorCount > 0) {\n    bottlenecks.push({\n      phase: 'TypeScript Compilation',\n      duration: Math.round(metrics.duration * 0.4), // Estimate 40% of build time\n      percentage: 40,\n      suggestions: [\n        'Fix TypeScript errors to improve compilation speed',\n        'Enable incremental compilation',\n        'Use project references for large codebases'\n      ]\n    });\n  }\n  \n  // Analyze bundle size impact\n  if (metrics.bundleSize.total > PERFORMANCE_THRESHOLDS.BUNDLE_SIZE.MAX_SIZE) {\n    bottlenecks.push({\n      phase: 'Bundle Generation',\n      duration: Math.round(metrics.duration * 0.3), // Estimate 30% of build time\n      percentage: 30,\n      suggestions: [\n        'Implement code splitting to reduce bundle size',\n        'Enable tree shaking to remove unused code',\n        'Optimize asset loading and compression'\n      ]\n    });\n  }\n  \n  // Analyze cache efficiency\n  if (metrics.cacheHitRate < 0.7) {\n    bottlenecks.push({\n      phase: 'Cache Management',\n      duration: Math.round(metrics.duration * 0.2), // Estimate 20% of build time\n      percentage: 20,\n      suggestions: [\n        'Optimize cache configuration',\n        'Implement better cache invalidation strategy',\n        'Use persistent cache for dependencies'\n      ]\n    });\n  }\n  \n  return bottlenecks;\n}\n\n/**\n * Generate build optimization recommendations\n */\nfunction generateBuildOptimizationRecommendations(metrics: BuildMetrics): string[] {\n  const recommendations: string[] = [];\n  \n  if (metrics.duration > PERFORMANCE_THRESHOLDS.BUILD_TIME.DEVELOPMENT) {\n    recommendations.push('Consider enabling incremental builds to reduce compilation time');\n  }\n  \n  if (metrics.errorCount > 10) {\n    recommendations.push('Reduce TypeScript errors to improve build performance');\n  }\n  \n  if (metrics.cacheHitRate < 0.6) {\n    recommendations.push('Optimize build cache configuration for better performance');\n  }\n  \n  if (metrics.bundleSize.total > PERFORMANCE_THRESHOLDS.BUNDLE_SIZE.MAX_SIZE) {\n    recommendations.push('Implement code splitting and tree shaking to reduce bundle size');\n  }\n  \n  if (metrics.parallelization.efficiency < 0.7) {\n    recommendations.push('Optimize build parallelization to utilize available CPU cores');\n  }\n  \n  return recommendations;\n}\n\n/**\n * Analyze memory usage\n */\nasync function analyzeMemoryUsage(metrics: BuildMetrics): Promise<MemoryUsageAnalysis> {\n  try {\n    const peakMemoryUsage = metrics.memoryUsage.peak;\n    const averageMemoryUsage = metrics.memoryUsage.average;\n    \n    // Simplified memory leak detection\n    const memoryLeakDetection = detectMemoryLeaks(metrics);\n    \n    // Simplified GC stats\n    const garbageCollectionStats = analyzeGCStats(metrics);\n    \n    // Generate memory optimization suggestions\n    const memoryOptimizationSuggestions = generateMemoryOptimizationSuggestions(metrics);\n    \n    return {\n      peakMemoryUsage,\n      averageMemoryUsage,\n      memoryLeakDetection,\n      garbageCollectionStats,\n      memoryOptimizationSuggestions\n    };\n    \n  } catch (error) {\n    logger.error('Error analyzing memory usage:', error);\n    throw error;\n  }\n}\n\n/**\n * Detect memory leaks (simplified implementation)\n */\nfunction detectMemoryLeaks(metrics: BuildMetrics): MemoryLeakInfo[] {\n  const leaks: MemoryLeakInfo[] = [];\n  \n  // Simple heuristic: if peak memory is much higher than average\n  if (metrics.memoryUsage.peak > metrics.memoryUsage.average * 2) {\n    leaks.push({\n      component: 'Build Process',\n      leakSize: metrics.memoryUsage.peak - metrics.memoryUsage.average,\n      growthRate: 0.1, // Estimated\n      suggestions: [\n        'Monitor memory usage during build process',\n        'Implement memory profiling to identify leaks',\n        'Consider reducing batch sizes for large operations'\n      ]\n    });\n  }\n  \n  return leaks;\n}\n\n/**\n * Analyze garbage collection stats (simplified implementation)\n */\nfunction analyzeGCStats(metrics: BuildMetrics): GCStats {\n  return {\n    totalCollections: metrics.memoryUsage.gcCount,\n    totalTime: metrics.memoryUsage.gcTime,\n    averageTime: metrics.memoryUsage.gcCount > 0 ? metrics.memoryUsage.gcTime / metrics.memoryUsage.gcCount : 0,\n    efficiency: 0.8 // Estimated efficiency\n  };\n}\n\n/**\n * Generate memory optimization suggestions\n */\nfunction generateMemoryOptimizationSuggestions(metrics: BuildMetrics): string[] {\n  const suggestions: string[] = [];\n  \n  if (metrics.memoryUsage.peak > PERFORMANCE_THRESHOLDS.MEMORY_USAGE.WARNING) {\n    suggestions.push('Consider increasing Node.js heap size for large builds');\n  }\n  \n  if (metrics.memoryUsage.peak > metrics.memoryUsage.average * 1.5) {\n    suggestions.push('Implement memory profiling to identify memory usage spikes');\n  }\n  \n  suggestions.push('Use streaming and chunked processing for large file operations');\n  suggestions.push('Implement proper cleanup of temporary objects and references');\n  \n  return suggestions;\n}\n\n/**\n * Generate quality metrics report\n */\nasync function generateQualityMetricsReport(): Promise<QualityMetricsReport> {\n  try {\n    // This would integrate with various quality tools\n    // For now, provide estimated values\n    \n    const codeQuality = {\n      typeScriptErrors: await getTypeScriptErrorCount(),\n      lintingWarnings: await getLintingWarningCount(),\n      testCoverage: 75, // Estimated\n      codeComplexity: 6.5 // Estimated\n    };\n    \n    const buildQuality = {\n      successRate: 92, // Estimated\n      averageBuildTime: 45000, // 45 seconds\n      failureRate: 8, // Estimated\n      recoveryTime: 120 // 2 minutes\n    };\n    \n    const performanceQuality = {\n      bundleSize: 8500, // KB\n      loadTime: 2.5, // seconds\n      memoryEfficiency: 0.8,\n      cacheEfficiency: 0.7\n    };\n    \n    const technicalDebt = {\n      debtRatio: 0.15, // 15%\n      maintainabilityIndex: 75,\n      duplicateCodePercentage: 5,\n      outdatedDependencies: 3\n    };\n    \n    // Calculate overall score\n    const overallScore = calculateOverallQualityScore(codeQuality, buildQuality, performanceQuality, technicalDebt);\n    \n    return {\n      overallScore,\n      codeQuality,\n      buildQuality,\n      performanceQuality,\n      technicalDebt\n    };\n    \n  } catch (error) {\n    logger.error('Error generating quality metrics report:', error);\n    throw error;\n  }\n}\n\n/**\n * Get TypeScript error count\n */\nasync function getTypeScriptErrorCount(): Promise<number> {\n  try {\n    const output = execSync('yarn tsc --noEmit --skipLibCheck 2>&1', {\n      encoding: 'utf8',\n      stdio: 'pipe'\n    });\n    \n    const errorMatches = output.match(/error TS\\d+:/g);\n    return errorMatches ? errorMatches.length : 0;\n    \n  } catch (error: any) {\n    if (error.stdout) {\n      const errorMatches = error.stdout.match(/error TS\\d+:/g);\n      return errorMatches ? errorMatches.length : 0;\n    }\n    return 0;\n  }\n}\n\n/**\n * Get linting warning count\n */\nasync function getLintingWarningCount(): Promise<number> {\n  try {\n    const output = execSync('yarn lint --format=json 2>/dev/null', {\n      encoding: 'utf8',\n      stdio: 'pipe'\n    });\n    \n    const results = JSON.parse(output);\n    return results.reduce((total: number, result: any) => {\n      return total + (result.warningCount || 0);\n    }, 0);\n    \n  } catch (error) {\n    return 0;\n  }\n}\n\n/**\n * Calculate overall quality score\n */\nfunction calculateOverallQualityScore(\n  codeQuality: any,\n  buildQuality: any,\n  performanceQuality: any,\n  technicalDebt: any\n): number {\n  // Weighted scoring system\n  const codeScore = Math.max(0, 100 - codeQuality.typeScriptErrors - codeQuality.lintingWarnings * 0.1);\n  const buildScore = buildQuality.successRate;\n  const performanceScore = Math.min(100, performanceQuality.cacheEfficiency * 100);\n  const debtScore = Math.max(0, 100 - technicalDebt.debtRatio * 100);\n  \n  // Weighted average\n  const overallScore = (codeScore * 0.3 + buildScore * 0.3 + performanceScore * 0.2 + debtScore * 0.2);\n  \n  return Math.round(overallScore);\n}\n\n/**\n * Process performance alerts\n */\nasync function processPerformanceAlerts(metrics: BuildMetrics): Promise<AlertResponse[]> {\n  const alerts: AlertResponse[] = [];\n  \n  // Build time alerts\n  if (metrics.duration > PERFORMANCE_THRESHOLDS.BUILD_TIME.CRITICAL) {\n    alerts.push({\n      type: AlertType.BUILD_PERFORMANCE,\n      severity: AlertSeverity.CRITICAL,\n      message: `Build time ${Math.round(metrics.duration / 1000)}s exceeds critical threshold ${PERFORMANCE_THRESHOLDS.BUILD_TIME.CRITICAL / 1000}s`,\n      recommendations: [\n        'Implement incremental builds',\n        'Optimize TypeScript configuration',\n        'Enable build caching'\n      ],\n      autoResponse: 'ANALYZE_BUILD_BOTTLENECKS',\n      timestamp: new Date()\n    });\n  } else if (metrics.duration > PERFORMANCE_THRESHOLDS.BUILD_TIME.DEVELOPMENT) {\n    alerts.push({\n      type: AlertType.BUILD_PERFORMANCE,\n      severity: AlertSeverity.HIGH,\n      message: `Build time ${Math.round(metrics.duration / 1000)}s exceeds development threshold ${PERFORMANCE_THRESHOLDS.BUILD_TIME.DEVELOPMENT / 1000}s`,\n      recommendations: [\n        'Review build configuration',\n        'Consider code splitting',\n        'Optimize dependencies'\n      ],\n      autoResponse: 'MONITOR_BUILD_PERFORMANCE',\n      timestamp: new Date()\n    });\n  }\n  \n  // Memory usage alerts\n  if (metrics.memoryUsage.peak > PERFORMANCE_THRESHOLDS.MEMORY_USAGE.CRITICAL) {\n    alerts.push({\n      type: AlertType.MEMORY_USAGE,\n      severity: AlertSeverity.CRITICAL,\n      message: `Memory usage ${metrics.memoryUsage.peak}MB exceeds critical threshold ${PERFORMANCE_THRESHOLDS.MEMORY_USAGE.CRITICAL}MB`,\n      recommendations: [\n        'Increase Node.js heap size',\n        'Implement memory profiling',\n        'Optimize memory-intensive operations'\n      ],\n      autoResponse: 'ANALYZE_MEMORY_USAGE',\n      timestamp: new Date()\n    });\n  }\n  \n  // Bundle size alerts\n  if (metrics.bundleSize.total > PERFORMANCE_THRESHOLDS.BUNDLE_SIZE.MAX_SIZE) {\n    alerts.push({\n      type: AlertType.BUNDLE_SIZE,\n      severity: AlertSeverity.HIGH,\n      message: `Bundle size ${metrics.bundleSize.total}KB exceeds maximum threshold ${PERFORMANCE_THRESHOLDS.BUNDLE_SIZE.MAX_SIZE}KB`,\n      recommendations: [\n        'Implement code splitting',\n        'Enable tree shaking',\n        'Optimize asset loading'\n      ],\n      autoResponse: 'ANALYZE_BUNDLE_SIZE',\n      timestamp: new Date()\n    });\n  }\n  \n  return alerts;\n}\n\n/**\n * Generate optimization recommendations\n */\nfunction generateOptimizationRecommendations(\n  buildMetrics: BuildMetrics,\n  performanceAnalysis: BuildPerformanceAnalysis,\n  memoryAnalysis: MemoryUsageAnalysis\n): OptimizationRecommendation[] {\n  const recommendations: OptimizationRecommendation[] = [];\n  \n  // Build performance recommendations\n  if (buildMetrics.duration > PERFORMANCE_THRESHOLDS.BUILD_TIME.DEVELOPMENT) {\n    recommendations.push({\n      category: 'build',\n      priority: 'high',\n      impact: 'high',\n      effort: 'medium',\n      description: 'Optimize build performance to reduce compilation time',\n      implementation: [\n        'Enable incremental TypeScript compilation',\n        'Implement build caching strategy',\n        'Optimize webpack configuration'\n      ],\n      expectedImprovement: '30-50% reduction in build time'\n    });\n  }\n  \n  // Memory optimization recommendations\n  if (buildMetrics.memoryUsage.peak > PERFORMANCE_THRESHOLDS.MEMORY_USAGE.WARNING) {\n    recommendations.push({\n      category: 'memory',\n      priority: 'medium',\n      impact: 'medium',\n      effort: 'low',\n      description: 'Optimize memory usage during build process',\n      implementation: [\n        'Implement streaming for large file operations',\n        'Add memory monitoring and profiling',\n        'Optimize garbage collection settings'\n      ],\n      expectedImprovement: '20-30% reduction in memory usage'\n    });\n  }\n  \n  // Bundle size recommendations\n  if (buildMetrics.bundleSize.total > PERFORMANCE_THRESHOLDS.BUNDLE_SIZE.MAX_SIZE * 0.8) {\n    recommendations.push({\n      category: 'bundle',\n      priority: 'medium',\n      impact: 'high',\n      effort: 'medium',\n      description: 'Reduce bundle size to improve load performance',\n      implementation: [\n        'Implement dynamic imports and code splitting',\n        'Enable tree shaking for unused code removal',\n        'Optimize asset compression and loading'\n      ],\n      expectedImprovement: '15-25% reduction in bundle size'\n    });\n  }\n  \n  // Cache optimization recommendations\n  if (buildMetrics.cacheHitRate < 0.7) {\n    recommendations.push({\n      category: 'cache',\n      priority: 'low',\n      impact: 'medium',\n      effort: 'low',\n      description: 'Improve build cache efficiency',\n      implementation: [\n        'Optimize cache configuration',\n        'Implement better cache invalidation',\n        'Use persistent cache for dependencies'\n      ],\n      expectedImprovement: '10-20% improvement in cache hit rate'\n    });\n  }\n  \n  return recommendations;\n}\n\n/**\n * Get simple build quality score\n */\nexport async function getBuildQualityScore(): Promise<number> {\n  try {\n    const report = await monitorBuildQuality();\n    return report.qualityMetrics.overallScore;\n  } catch (error) {\n    logger.error('Failed to get build quality score:', error);\n    return 0;\n  }\n}"],"version":3}