cf1d0b6e94f670bceb44f48bd7d56812
"use strict";
/**
 * Main cooking data entry point
 *
 * This file exports cooking methods from the new modular structure
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCookingMethodsBySustainability = exports.getCookingMethodsByTemperature = exports.getCookingMethodsByCategory = exports.getAllCookingMethodNames = exports.getCookingMethods = exports.getCookingMethod = exports.rawCookingMethods = exports.traditionalCookingMethods = exports.molecularCookingMethods = exports.wetCookingMethods = exports.dryCookingMethods = exports.allCookingMethods = exports.calculateModifiedElementalEffect = exports.getAstrologicalEffect = exports.cookingMethods = void 0;
// Export everything from the new methods system
__exportStar(require("./methods"), exports);
// Re-export methods from the methods module for backward compatibility
const methods_1 = require("./methods");
Object.defineProperty(exports, "allCookingMethods", { enumerable: true, get: function () { return methods_1.allCookingMethods; } });
// For backwards compatibility - provide cookingMethods export from the new allCookingMethods
exports.cookingMethods = methods_1.allCookingMethods;
/**
 * Get astrological effect for a cooking method (simplified version for backwards compatibility)
 */
const getAstrologicalEffect = (method, astroState) => {
    var _a, _b, _c;
    const methodData = methods_1.allCookingMethods[method];
    if (!methodData || !methodData.astrologicalInfluences)
        return 0.5;
    let effectScore = 0.5; // Neutral score as default
    // Check zodiac sign
    if (astroState.sunSign &&
        ((_a = methodData.astrologicalInfluences.favorableZodiac) === null || _a === void 0 ? void 0 : _a.includes(astroState.sunSign))) {
        effectScore += 0.2;
    }
    else if (astroState.sunSign &&
        ((_b = methodData.astrologicalInfluences.unfavorableZodiac) === null || _b === void 0 ? void 0 : _b.includes(astroState.sunSign))) {
        effectScore -= 0.2;
    }
    // Check lunar phase if available
    if (astroState.lunarPhase &&
        ((_c = methodData.astrologicalInfluences.lunarPhaseEffect) === null || _c === void 0 ? void 0 : _c[astroState.lunarPhase])) {
        effectScore *=
            methodData.astrologicalInfluences.lunarPhaseEffect[astroState.lunarPhase];
    }
    // Keep score within 0.0-1.0 range
    return Math.max(0.0, Math.min(1.0, effectScore));
};
exports.getAstrologicalEffect = getAstrologicalEffect;
/**
 * Calculate modified elemental effect for a cooking method (simplified version for backwards compatibility)
 */
const calculateModifiedElementalEffect = (method, astroState, duration, _temperature, _currentSeason) => {
    const methodData = methods_1.allCookingMethods[method];
    if (!methodData || !methodData.elementalEffect) {
        return { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 };
    }
    // Start with base elemental effect
    const baseEffect = { ...methodData.elementalEffect };
    // Apply duration modifier (simplified)
    const normalizedDuration = Math.min(1.0, duration / (methodData.duration.max || 60));
    if (normalizedDuration > 0.7) {
        // Longer cooking enhances Fire and reduces Water
        baseEffect.Fire = Math.min(1.0, (baseEffect.Fire || 0) * 1.2);
        baseEffect.Water = Math.max(0.0, (baseEffect.Water || 0) * 0.8);
    }
    // Return the modified effect
    return baseEffect;
};
exports.calculateModifiedElementalEffect = calculateModifiedElementalEffect;
const methods_2 = require("./methods");
Object.defineProperty(exports, "dryCookingMethods", { enumerable: true, get: function () { return methods_2.dryCookingMethods; } });
Object.defineProperty(exports, "wetCookingMethods", { enumerable: true, get: function () { return methods_2.wetCookingMethods; } });
Object.defineProperty(exports, "molecularCookingMethods", { enumerable: true, get: function () { return methods_2.molecularCookingMethods; } });
Object.defineProperty(exports, "traditionalCookingMethods", { enumerable: true, get: function () { return methods_2.traditionalCookingMethods; } });
Object.defineProperty(exports, "rawCookingMethods", { enumerable: true, get: function () { return methods_2.rawCookingMethods; } });
/**
 * Get a specific cooking method by name
 * @param name The name of the cooking method to retrieve
 * @returns The cooking method data or undefined if not found
 */
function getCookingMethod(name) {
    return methods_1.allCookingMethods[name] || methods_1.allCookingMethods[name.toLowerCase()];
}
exports.getCookingMethod = getCookingMethod;
/**
 * Get multiple cooking methods by name
 * @param names Array of cooking method names to retrieve
 * @returns Object containing the requested cooking methods (key: name, value: data)
 */
function getCookingMethods(names) {
    return names.reduce((methods, name) => {
        const method = getCookingMethod(name);
        if (method) {
            methods[name] = method;
        }
        return methods;
    }, {});
}
exports.getCookingMethods = getCookingMethods;
/**
 * Get all available cooking method names
 * @returns Array of all cooking method names
 */
function getAllCookingMethodNames() {
    return Object.keys(methods_1.allCookingMethods);
}
exports.getAllCookingMethodNames = getAllCookingMethodNames;
/**
 * Get cooking methods by category
 * @param category The category name: 'dry', 'wet', 'molecular', 'traditional', 'raw'
 * @returns Record of cooking methods in that category or empty object if category not found
 */
function getCookingMethodsByCategory(category) {
    switch (category.toLowerCase()) {
        case 'dry':
            return methods_2.dryCookingMethods;
        case 'wet':
            return methods_2.wetCookingMethods;
        case 'molecular':
            return methods_2.molecularCookingMethods;
        case 'traditional':
            return methods_2.traditionalCookingMethods;
        case 'raw':
            return methods_2.rawCookingMethods;
        default:
            return {};
    }
}
exports.getCookingMethodsByCategory = getCookingMethodsByCategory;
/**
 * Filter cooking methods by temperature range
 * @param minTemp Minimum temperature in Fahrenheit
 * @param maxTemp Maximum temperature in Fahrenheit
 * @returns Cooking methods that operate within the specified temperature range
 */
function getCookingMethodsByTemperature(minTemp, maxTemp) {
    return Object.entries(methods_1.allCookingMethods)
        .filter(([_, method]) => {
        // Apply safe type casting for method property access
        const methodData = method;
        // Check if the method has optimal temperatures and at least one falls within range
        if (!(methodData === null || methodData === void 0 ? void 0 : methodData.optimalTemperatures))
            return false;
        return Object.values(methodData.optimalTemperatures).some((temp) => {
            // Pattern KK-10: Final Arithmetic Elimination for data layer operations
            const numericTemp = Number(temp) || 0;
            const numericMinTemp = Number(minTemp) || 0;
            const numericMaxTemp = Number(maxTemp) || 999;
            return numericTemp >= numericMinTemp && numericTemp <= numericMaxTemp;
        });
    })
        .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});
}
exports.getCookingMethodsByTemperature = getCookingMethodsByTemperature;
/**
 * Get cooking methods sorted by sustainability rating
 * @param descending Whether to sort in descending order (most sustainable first)
 * @returns Array of cooking methods sorted by sustainability rating
 */
function getCookingMethodsBySustainability(descending = true) {
    return Object.values(methods_1.allCookingMethods)
        .filter((method) => {
        // Apply safe type casting for method property access
        const methodData = method;
        return (methodData === null || methodData === void 0 ? void 0 : methodData.sustainabilityRating) !== undefined;
    })
        .sort((a, b) => {
        // Apply safe type casting for method property access
        const aData = a;
        const bData = b;
        const aRating = (aData === null || aData === void 0 ? void 0 : aData.sustainabilityRating) || 0;
        const bRating = (bData === null || bData === void 0 ? void 0 : bData.sustainabilityRating) || 0;
        return descending ? bRating - aRating : aRating - bRating;
    });
}
exports.getCookingMethodsBySustainability = getCookingMethodsBySustainability;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,