{"file":"/Users/GregCastro/Desktop/WhatToEatNext/backups/conservative-wave-2025-08-11T05-21-33-410Z/src/__tests__/mocks/CampaignSystemMocks.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/backups/conservative-wave-2025-08-11T05-21-33-410Z/src/__tests__/mocks/CampaignSystemMocks.ts"],"sourcesContent":["/**\n * Campaign System Test Mocks\n *\n * Comprehensive mocking system for campaign operations during test execution.\n * Prevents actual build processes from running and provides test-safe alternatives.\n */\n\nimport {\n  CampaignConfig,\n  CampaignPhase,\n  CorruptionReport,\n  CorruptionSeverity,\n  GitStash,\n  MetricsImprovement,\n  PhaseReport,\n  PhaseResult,\n  PhaseStatus,\n  ProgressMetrics,\n  ProgressReport,\n  RecoveryAction,\n  SafetyEvent,\n  SafetyEventSeverity,\n  SafetyEventType,\n  ValidationResult,\n} from '../../types/campaign';\n\n/**\n * Mock Campaign Controller for test environments\n */\nexport class MockCampaignController {\n  private config: CampaignConfig;\n  private currentPhase: CampaignPhase | null = null;\n  private safetyEvents: SafetyEvent[] = [];\n  private _isPaused: boolean = false;\n  private _isRunning: boolean = false;\n  private mockMetrics: ProgressMetrics;\n  private mockStashes: Map<string, GitStash> = new Map();\n\n  constructor(config: CampaignConfig) {\n    this.config = config;\n    this.mockMetrics = this.createMockMetrics();\n    this.initializeMockStashes();\n  }\n\n  /**\n   * Mock phase execution - does not run actual scripts\n   */\n  async executePhase(phase: CampaignPhase): Promise<PhaseResult> {\n    if (this.isPaused()) {\n      throw new Error('Campaign is paused');\n    }\n\n    this._isRunning = true;\n    this.currentPhase = phase;\n\n    const startTime = Date.now();\n\n    // Add mock safety event\n    this.addSafetyEvent({\n      type: SafetyEventType.CHECKPOINT_CREATED,\n      timestamp: new Date(),\n      description: `Mock phase execution: ${phase.name}`,\n      severity: SafetyEventSeverity.INFO,\n      action: 'MOCK_PHASE_START',\n    });\n\n    // Simulate phase execution without running actual scripts\n    const mockResult = await this.simulatePhaseExecution(phase);\n\n    const executionTime = Date.now() - startTime;\n    this._isRunning = false;\n\n    return {\n      phaseId: phase.id,\n      success: mockResult.success,\n      metricsImprovement: mockResult.metricsImprovement,\n      filesProcessed: mockResult.filesProcessed,\n      errorsFixed: mockResult.errorsFixed,\n      warningsFixed: mockResult.warningsFixed,\n      executionTime,\n      safetyEvents: [...this.safetyEvents],\n    };\n  }\n\n  /**\n   * Mock phase validation - does not run actual validation\n   */\n  async validatePhaseCompletion(phase: CampaignPhase): Promise<ValidationResult> {\n    // Return mock validation result based on phase success criteria\n    const mockErrors: string[] = [];\n    const mockWarnings: string[] = [];\n\n    // Simulate validation logic without actual checks\n    if (phase.successCriteria.typeScriptErrors !== undefined) {\n      if (this.mockMetrics.typeScriptErrors.current > phase.successCriteria.typeScriptErrors) {\n        mockErrors.push(`Mock: TypeScript errors not met`);\n      }\n    }\n\n    return {\n      success: mockErrors.length === 0,\n      errors: mockErrors,\n      warnings: mockWarnings,\n      metrics: this.mockMetrics,\n    };\n  }\n\n  /**\n   * Mock safety checkpoint creation\n   */\n  async createSafetyCheckpoint(description: string): Promise<string> {\n    const checkpointId = `mock_checkpoint_${Date.now()}`;\n\n    // Create mock stash\n    const mockStash: GitStash = {\n      id: checkpointId,\n      description: `Mock stash: ${description}`,\n      timestamp: new Date(),\n      branch: 'mock-branch',\n      ref: `stash@{${this.mockStashes.size}}`,\n    };\n\n    this.mockStashes.set(checkpointId, mockStash);\n\n    this.addSafetyEvent({\n      type: SafetyEventType.CHECKPOINT_CREATED,\n      timestamp: new Date(),\n      description: `Mock checkpoint created: ${description}`,\n      severity: SafetyEventSeverity.INFO,\n      action: 'MOCK_CHECKPOINT_CREATE',\n    });\n\n    return checkpointId;\n  }\n\n  /**\n   * Mock rollback to checkpoint\n   */\n  async rollbackToCheckpoint(checkpointId: string): Promise<void> {\n    const stash = this.mockStashes.get(checkpointId);\n    if (!stash) {\n      throw new Error(`Mock stash not found: ${checkpointId}`);\n    }\n\n    this.addSafetyEvent({\n      type: SafetyEventType.ROLLBACK_TRIGGERED,\n      timestamp: new Date(),\n      description: `Mock rollback to: ${checkpointId}`,\n      severity: SafetyEventSeverity.WARNING,\n      action: 'MOCK_ROLLBACK',\n    });\n\n    // Simulate rollback by resetting mock metrics\n    this.mockMetrics = this.createMockMetrics();\n  }\n\n  /**\n   * Get mock progress metrics without running actual measurements\n   */\n  async getProgressMetrics(): Promise<ProgressMetrics> {\n    return { ...this.mockMetrics };\n  }\n\n  /**\n   * Generate mock phase report\n   */\n  async generatePhaseReport(phase: CampaignPhase): Promise<PhaseReport> {\n    const validation = await this.validatePhaseCompletion(phase);\n\n    return {\n      phaseId: phase.id,\n      phaseName: phase.name,\n      startTime: new Date(),\n      status: validation.success ? PhaseStatus.COMPLETED : PhaseStatus.IN_PROGRESS,\n      metrics: this.mockMetrics,\n      achievements: ['Mock achievement 1', 'Mock achievement 2'],\n      issues: validation.errors,\n      recommendations: ['Mock recommendation 1'],\n    };\n  }\n\n  /**\n   * Pause campaign execution\n   */\n  pauseCampaign(): void {\n    this._isPaused = true;\n    this.addSafetyEvent({\n      type: SafetyEventType.CHECKPOINT_CREATED,\n      timestamp: new Date(),\n      description: 'Campaign paused for test isolation',\n      severity: SafetyEventSeverity.INFO,\n      action: 'CAMPAIGN_PAUSED',\n    });\n  }\n\n  /**\n   * Resume campaign execution\n   */\n  resumeCampaign(): void {\n    this._isPaused = false;\n    this.addSafetyEvent({\n      type: SafetyEventType.CHECKPOINT_CREATED,\n      timestamp: new Date(),\n      description: 'Campaign resumed after test isolation',\n      severity: SafetyEventSeverity.INFO,\n      action: 'CAMPAIGN_RESUMED',\n    });\n  }\n\n  /**\n   * Check if campaign is paused\n   */\n  isPaused(): boolean {\n    return this._isPaused;\n  }\n\n  /**\n   * Check if campaign is running\n   */\n  isRunning(): boolean {\n    return this._isRunning;\n  }\n\n  /**\n   * Get current phase\n   */\n  getCurrentPhase(): CampaignPhase | null {\n    return this.currentPhase;\n  }\n\n  /**\n   * Get safety events\n   */\n  getSafetyEvents(): SafetyEvent[] {\n    return [...this.safetyEvents];\n  }\n\n  /**\n   * Update mock metrics for testing\n   */\n  updateMockMetrics(updates: Partial<ProgressMetrics>): void {\n    this.mockMetrics = { ...this.mockMetrics, ...updates };\n  }\n\n  /**\n   * Reset mock state\n   */\n  resetMockState(): void {\n    this.safetyEvents = [];\n    this._isPaused = false;\n    this._isRunning = false;\n    this.currentPhase = null;\n    this.mockMetrics = this.createMockMetrics();\n    this.mockStashes.clear();\n    this.initializeMockStashes();\n  }\n\n  // Private helper methods\n\n  private async simulatePhaseExecution(_phase: CampaignPhase): Promise<{\n    success: boolean;\n    metricsImprovement: MetricsImprovement;\n    filesProcessed: number;\n    errorsFixed: number;\n    warningsFixed: number;\n  }> {\n    // Simulate processing without running actual scripts\n    await new Promise(resolve => setTimeout(resolve, 100)); // Small delay for realism\n\n    return {\n      success: true,\n      metricsImprovement: {\n        typeScriptErrorsReduced: 5,\n        lintingWarningsReduced: 10,\n        buildTimeImproved: 0.5,\n        enterpriseSystemsAdded: 2,\n      },\n      filesProcessed: 15,\n      errorsFixed: 5,\n      warningsFixed: 10,\n    };\n  }\n\n  private createMockMetrics(): ProgressMetrics {\n    return {\n      typeScriptErrors: {\n        current: 50,\n        target: 0,\n        reduction: 36,\n        percentage: 42,\n      },\n      lintingWarnings: {\n        current: 2000,\n        target: 0,\n        reduction: 2506,\n        percentage: 56,\n      },\n      buildPerformance: {\n        currentTime: 8.5,\n        targetTime: 10,\n        cacheHitRate: 0.8,\n        memoryUsage: 45,\n      },\n      enterpriseSystems: {\n        current: 50,\n        target: 200,\n        transformedExports: 50,\n      },\n    };\n  }\n\n  private initializeMockStashes(): void {\n    // Create some initial mock stashes\n    const initialStashes = [\n      {\n        id: 'mock_stash_1',\n        description: 'Initial mock stash',\n        timestamp: new Date(Date.now() - 3600000), // 1 hour ago\n        branch: 'mock-branch',\n        ref: 'stash@{0}',\n      },\n      {\n        id: 'mock_stash_2',\n        description: 'Secondary mock stash',\n        timestamp: new Date(Date.now() - 1800000), // 30 minutes ago\n        branch: 'mock-branch',\n        ref: 'stash@{1}',\n      },\n    ];\n\n    initialStashes.forEach(stash => {\n      this.mockStashes.set(stash.id, stash);\n    });\n  }\n\n  private addSafetyEvent(event: SafetyEvent): void {\n    this.safetyEvents.push(event);\n\n    // Keep only recent events to prevent memory issues\n    if (this.safetyEvents.length > 100) {\n      this.safetyEvents = this.safetyEvents.slice(-50);\n    }\n  }\n}\n\n/**\n * Mock Progress Tracker for test environments\n */\nexport class MockProgressTracker {\n  private mockMetrics: ProgressMetrics;\n  private metricsHistory: ProgressMetrics[] = [];\n  private isTracking: boolean = false;\n\n  constructor() {\n    this.mockMetrics = this.createMockMetrics();\n  }\n\n  /**\n   * Mock TypeScript error count - does not run actual tsc\n   */\n  async getTypeScriptErrorCount(): Promise<number> {\n    return this.mockMetrics.typeScriptErrors.current;\n  }\n\n  /**\n   * Mock TypeScript error breakdown - does not run actual analysis\n   */\n  async getTypeScriptErrorBreakdown(): Promise<Record<string, number>> {\n    return {\n      TS2352: 15,\n      TS2339: 20,\n      TS2304: 10,\n      TS2345: 5,\n    };\n  }\n\n  /**\n   * Mock linting warning count - does not run actual linting\n   */\n  async getLintingWarningCount(): Promise<number> {\n    return this.mockMetrics.lintingWarnings.current;\n  }\n\n  /**\n   * Mock linting warning breakdown - does not run actual analysis\n   */\n  async getLintingWarningBreakdown(): Promise<Record<string, number>> {\n    return {\n      '@typescript-eslint/no-explicit-any': 800,\n      '@typescript-eslint/no-unused-vars': 600,\n      'no-console': 400,\n      'prefer-const': 200,\n    };\n  }\n\n  /**\n   * Mock build time measurement - does not run actual build\n   */\n  async getBuildTime(): Promise<number> {\n    return this.mockMetrics.buildPerformance.currentTime;\n  }\n\n  /**\n   * Mock enterprise system count - does not run actual analysis\n   */\n  async getEnterpriseSystemCount(): Promise<number> {\n    return this.mockMetrics.enterpriseSystems.current;\n  }\n\n  /**\n   * Mock cache hit rate - returns simulated value\n   */\n  async getCacheHitRate(): Promise<number> {\n    return this.mockMetrics.buildPerformance.cacheHitRate;\n  }\n\n  /**\n   * Mock memory usage - returns simulated value\n   */\n  async getMemoryUsage(): Promise<number> {\n    return this.mockMetrics.buildPerformance.memoryUsage;\n  }\n\n  /**\n   * Get mock progress metrics without running actual measurements\n   */\n  async getProgressMetrics(): Promise<ProgressMetrics> {\n    const metrics = { ...this.mockMetrics };\n\n    // Add to history for tracking\n    this.metricsHistory.push(metrics);\n\n    // Keep only recent history to prevent memory issues\n    if (this.metricsHistory.length > 50) {\n      this.metricsHistory = this.metricsHistory.slice(-25);\n    }\n\n    return metrics;\n  }\n\n  /**\n   * Generate mock progress report\n   */\n  async generateProgressReport(): Promise<ProgressReport> {\n    const currentMetrics = await this.getProgressMetrics();\n    const targetMetrics = this.createTargetMetrics();\n\n    return {\n      campaignId: 'mock-campaign',\n      overallProgress: 65,\n      phases: [\n        {\n          phaseId: 'phase1',\n          phaseName: 'Mock Phase 1',\n          startTime: new Date(),\n          status: PhaseStatus.COMPLETED,\n          metrics: currentMetrics,\n          achievements: ['Mock achievement'],\n          issues: [],\n          recommendations: ['Mock recommendation'],\n        },\n      ],\n      currentMetrics,\n      targetMetrics,\n      estimatedCompletion: new Date(Date.now() + 3600000), // 1 hour from now\n    };\n  }\n\n  /**\n   * Start tracking (mock implementation)\n   */\n  startTracking(): void {\n    this.isTracking = true;\n  }\n\n  /**\n   * Stop tracking (mock implementation)\n   */\n  stopTracking(): void {\n    this.isTracking = false;\n  }\n\n  /**\n   * Check if tracking is active\n   */\n  isTrackingActive(): boolean {\n    return this.isTracking;\n  }\n\n  /**\n   * Update mock metrics for testing\n   */\n  updateMockMetrics(updates: Partial<ProgressMetrics>): void {\n    this.mockMetrics = { ...this.mockMetrics, ...updates };\n  }\n\n  /**\n   * Reset mock state\n   */\n  resetMockState(): void {\n    this.mockMetrics = this.createMockMetrics();\n    this.metricsHistory = [];\n    this.isTracking = false;\n  }\n\n  /**\n   * Get metrics history\n   */\n  getMetricsHistory(): ProgressMetrics[] {\n    return [...this.metricsHistory];\n  }\n\n  // Private helper methods\n\n  private createMockMetrics(): ProgressMetrics {\n    return {\n      typeScriptErrors: {\n        current: 50,\n        target: 0,\n        reduction: 36,\n        percentage: 42,\n      },\n      lintingWarnings: {\n        current: 2000,\n        target: 0,\n        reduction: 2506,\n        percentage: 56,\n      },\n      buildPerformance: {\n        currentTime: 8.5,\n        targetTime: 10,\n        cacheHitRate: 0.8,\n        memoryUsage: 45,\n      },\n      enterpriseSystems: {\n        current: 50,\n        target: 200,\n        transformedExports: 50,\n      },\n    };\n  }\n\n  private createTargetMetrics(): ProgressMetrics {\n    return {\n      typeScriptErrors: {\n        current: 0,\n        target: 0,\n        reduction: 86,\n        percentage: 100,\n      },\n      lintingWarnings: {\n        current: 0,\n        target: 0,\n        reduction: 4506,\n        percentage: 100,\n      },\n      buildPerformance: {\n        currentTime: 8,\n        targetTime: 10,\n        cacheHitRate: 0.8,\n        memoryUsage: 45,\n      },\n      enterpriseSystems: {\n        current: 200,\n        target: 200,\n        transformedExports: 200,\n      },\n    };\n  }\n}\n\n/**\n * Mock Safety Protocol for test environments\n */\nexport class MockSafetyProtocol {\n  private mockStashes: Map<string, GitStash> = new Map();\n  private safetyEvents: SafetyEvent[] = [];\n  private stashCounter: number = 0;\n\n  constructor() {\n    this.initializeMockStashes();\n  }\n\n  /**\n   * Mock stash creation - does not run actual git commands\n   */\n  async createStash(description: string, _phase?: string): Promise<string> {\n    this.stashCounter++;\n    const stashId = `mock_stash_${this.stashCounter}_${Date.now()}`;\n\n    const mockStash: GitStash = {\n      id: stashId,\n      description: `Mock stash: ${description}`,\n      timestamp: new Date(),\n      branch: 'mock-branch',\n      ref: `stash@{${this.stashCounter}}`,\n    };\n\n    this.mockStashes.set(stashId, mockStash);\n\n    this.addSafetyEvent({\n      type: SafetyEventType.CHECKPOINT_CREATED,\n      timestamp: new Date(),\n      description: `Mock stash created: ${stashId}`,\n      severity: SafetyEventSeverity.INFO,\n      action: 'MOCK_STASH_CREATE',\n    });\n\n    return stashId;\n  }\n\n  /**\n   * Mock stash application - does not run actual git commands\n   */\n  async applyStash(stashId: string, _validateAfter: boolean = true): Promise<void> {\n    const stash = this.mockStashes.get(stashId);\n    if (!stash) {\n      throw new Error(`Mock stash not found: ${stashId}`);\n    }\n\n    this.addSafetyEvent({\n      type: SafetyEventType.ROLLBACK_TRIGGERED,\n      timestamp: new Date(),\n      description: `Mock stash applied: ${stashId}`,\n      severity: SafetyEventSeverity.WARNING,\n      action: 'MOCK_STASH_APPLY',\n    });\n  }\n\n  /**\n   * Mock corruption detection - does not run actual file analysis\n   */\n  async detectCorruption(_files: string[]): Promise<CorruptionReport> {\n    // Return mock corruption report\n    return {\n      detectedFiles: [],\n      corruptionPatterns: [],\n      severity: CorruptionSeverity.LOW,\n      recommendedAction: RecoveryAction.CONTINUE,\n    };\n  }\n\n  /**\n   * Mock git state validation - does not run actual git commands\n   */\n  async validateGitState(): Promise<ValidationResult> {\n    return {\n      success: true,\n      errors: [],\n      warnings: [],\n    };\n  }\n\n  /**\n   * Mock emergency rollback - does not run actual git commands\n   */\n  async emergencyRollback(): Promise<void> {\n    this.addSafetyEvent({\n      type: SafetyEventType.EMERGENCY_RECOVERY,\n      timestamp: new Date(),\n      description: 'Mock emergency rollback performed',\n      severity: SafetyEventSeverity.WARNING,\n      action: 'MOCK_EMERGENCY_ROLLBACK',\n    });\n  }\n\n  /**\n   * List mock stashes\n   */\n  async listStashes(): Promise<GitStash[]> {\n    return Array.from(this.mockStashes.values());\n  }\n\n  /**\n   * Get safety events\n   */\n  getSafetyEvents(): SafetyEvent[] {\n    return [...this.safetyEvents];\n  }\n\n  /**\n   * Reset mock state\n   */\n  resetMockState(): void {\n    this.mockStashes.clear();\n    this.safetyEvents = [];\n    this.stashCounter = 0;\n    this.initializeMockStashes();\n  }\n\n  // Private helper methods\n\n  private initializeMockStashes(): void {\n    // Create some initial mock stashes\n    const initialStashes = [\n      {\n        id: 'mock_initial_stash',\n        description: 'Initial mock stash for testing',\n        timestamp: new Date(Date.now() - 3600000), // 1 hour ago\n        branch: 'mock-branch',\n        ref: 'stash@{0}',\n      },\n    ];\n\n    initialStashes.forEach(stash => {\n      this.mockStashes.set(stash.id, stash);\n    });\n  }\n\n  private addSafetyEvent(event: SafetyEvent): void {\n    this.safetyEvents.push(event);\n\n    // Keep only recent events to prevent memory issues\n    if (this.safetyEvents.length > 100) {\n      this.safetyEvents = this.safetyEvents.slice(-50);\n    }\n  }\n}\n\n/**\n * Campaign Test Isolation Manager\n *\n * Manages campaign system state during test execution to ensure\n * tests don't interfere with each other or trigger actual builds.\n */\nexport class CampaignTestIsolationManager {\n  private static instance: CampaignTestIsolationManager | null = null;\n  private mockController: MockCampaignController | null = null;\n  private mockTracker: MockProgressTracker | null = null;\n  private mockSafety: MockSafetyProtocol | null = null;\n  private originalProcessEnv: Record<string, string | undefined> = {};\n\n  private constructor() {\n    this.setupTestEnvironment();\n  }\n\n  static getInstance(): CampaignTestIsolationManager {\n    if (!CampaignTestIsolationManager.instance) {\n      CampaignTestIsolationManager.instance = new CampaignTestIsolationManager();\n    }\n    return CampaignTestIsolationManager.instance;\n  }\n\n  /**\n   * Initialize mock campaign system for tests\n   */\n  initializeMockCampaignSystem(config?: Partial<CampaignConfig>): {\n    controller: MockCampaignController;\n    tracker: MockProgressTracker;\n    safety: MockSafetyProtocol;\n  } {\n    const defaultConfig: CampaignConfig = {\n      phases: [\n        {\n          id: 'test-phase',\n          name: 'Test Phase',\n          description: 'Mock phase for testing',\n          tools: [],\n          successCriteria: { typeScriptErrors: 0 },\n          safetyCheckpoints: [],\n        },\n      ],\n      safetySettings: {\n        maxFilesPerBatch: 10,\n        buildValidationFrequency: 5,\n        testValidationFrequency: 10,\n        corruptionDetectionEnabled: true,\n        automaticRollbackEnabled: true,\n        stashRetentionDays: 7,\n      },\n      progressTargets: {\n        typeScriptErrors: 0,\n        lintingWarnings: 0,\n        buildTime: 10,\n        enterpriseSystems: 200,\n      },\n      toolConfiguration: {\n        enhancedErrorFixer: 'mock-script',\n        explicitAnyFixer: 'mock-script',\n        unusedVariablesFixer: 'mock-script',\n        consoleStatementFixer: 'mock-script',\n      },\n    };\n\n    const fullConfig = { ...defaultConfig, ...config };\n\n    this.mockController = new MockCampaignController(fullConfig);\n    this.mockTracker = new MockProgressTracker();\n    this.mockSafety = new MockSafetyProtocol();\n\n    return {\n      controller: this.mockController,\n      tracker: this.mockTracker,\n      safety: this.mockSafety,\n    };\n  }\n\n  /**\n   * Pause all campaign operations for test isolation\n   */\n  pauseCampaignOperations(): void {\n    if (this.mockController) {\n      this.mockController.pauseCampaign();\n    }\n    if (this.mockTracker) {\n      this.mockTracker.stopTracking();\n    }\n  }\n\n  /**\n   * Resume campaign operations after test isolation\n   */\n  resumeCampaignOperations(): void {\n    if (this.mockController) {\n      this.mockController.resumeCampaign();\n    }\n    if (this.mockTracker) {\n      this.mockTracker.startTracking();\n    }\n  }\n\n  /**\n   * Reset all mock states for clean test isolation\n   */\n  resetAllMockStates(): void {\n    if (this.mockController) {\n      this.mockController.resetMockState();\n    }\n    if (this.mockTracker) {\n      this.mockTracker.resetMockState();\n    }\n    if (this.mockSafety) {\n      this.mockSafety.resetMockState();\n    }\n  }\n\n  /**\n   * Get current mock instances\n   */\n  getMockInstances(): {\n    controller: MockCampaignController | null;\n    tracker: MockProgressTracker | null;\n    safety: MockSafetyProtocol | null;\n  } {\n    return {\n      controller: this.mockController,\n      tracker: this.mockTracker,\n      safety: this.mockSafety,\n    };\n  }\n\n  /**\n   * Setup test environment to prevent actual campaign operations\n   */\n  private setupTestEnvironment(): void {\n    // Store original environment variables\n    this.originalProcessEnv = { ...process.env };\n\n    // Set test environment flags to prevent actual operations\n    Object.defineProperty(process.env, 'NODE_ENV', { value: 'test', writable: true });\n    process.env.CAMPAIGN_TEST_MODE = 'true';\n    process.env.DISABLE_ACTUAL_BUILDS = 'true';\n    process.env.DISABLE_GIT_OPERATIONS = 'true';\n    process.env.MOCK_CAMPAIGN_SYSTEM = 'true';\n  }\n\n  /**\n   * Restore original environment after tests\n   */\n  restoreEnvironment(): void {\n    // Restore original environment variables\n    Object.keys(process.env).forEach(key => {\n      if (key.startsWith('CAMPAIGN_') || key.startsWith('DISABLE_') || key.startsWith('MOCK_')) {\n        delete process.env[key];\n      }\n    });\n\n    Object.entries(this.originalProcessEnv).forEach(([key, value]) => {\n      if (value !== undefined) {\n        process.env[key] = value;\n      }\n    });\n  }\n\n  /**\n   * Cleanup and destroy singleton instance\n   */\n  static cleanup(): void {\n    if (CampaignTestIsolationManager.instance) {\n      CampaignTestIsolationManager.instance.restoreEnvironment();\n      CampaignTestIsolationManager.instance = null;\n    }\n  }\n}\n\n// Export singleton instance for easy access\nexport const campaignTestIsolation = CampaignTestIsolationManager.getInstance();\n\n// Classes are already exported at their declarations above\n"],"version":3}