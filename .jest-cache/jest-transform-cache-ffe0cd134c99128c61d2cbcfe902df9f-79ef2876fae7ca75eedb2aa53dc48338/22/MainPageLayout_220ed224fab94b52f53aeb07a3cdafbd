906afce3f1e511f5721f51cca2f48664
"use strict";
'use client';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useMainPageContext = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const navigation_1 = require("next/navigation");
const logger_1 = require("@/utils/logger");
const hooks_1 = require("@/contexts/AlchemicalContext/hooks");
const ErrorBoundary_1 = __importDefault(require("@/components/error-boundaries/ErrorBoundary"));
const useStatePreservation_1 = require("@/hooks/useStatePreservation");
const ComponentFallbacks_1 = require("@/components/fallbacks/ComponentFallbacks");
const steeringFileIntelligence_1 = require("@/utils/steeringFileIntelligence");
const useAgentHooks_1 = require("@/hooks/useAgentHooks");
const mcpServerIntegration_1 = require("@/utils/mcpServerIntegration");
const developmentExperienceOptimizations_1 = require("@/utils/developmentExperienceOptimizations");
// Lazy load non-critical components for better performance
const ConsolidatedDebugInfo = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('@/components/debug/ConsolidatedDebugInfo'))));
const CuisineRecommender = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('@/components/CuisineRecommender'))));
const IngredientRecommender = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('@/components/IngredientRecommender'))));
const CookingMethodsSection = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('@/components/CookingMethodsSection'))));
const RecipeBuilderSimple = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('@/components/recipes/RecipeBuilderSimple'))));
const MainPageContext = (0, react_1.createContext)(null);
const useMainPageContext = () => {
    const context = (0, react_1.useContext)(MainPageContext);
    if (!context) {
        throw new Error('useMainPageContext must be used within MainPageLayout');
    }
    return context;
};
exports.useMainPageContext = useMainPageContext;
// Memoized loading fallback component for better performance
const ComponentLoadingFallback = (0, react_1.memo)(function ComponentLoadingFallback({ componentName }) {
    return ((0, jsx_runtime_1.jsx)("div", { className: "flex items-center justify-center p-8 bg-gray-50 rounded-lg", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-3", children: [(0, jsx_runtime_1.jsx)("div", { className: "animate-spin rounded-full h-6 w-6 border-b-2 border-indigo-600" }), (0, jsx_runtime_1.jsxs)("span", { className: "text-gray-600", children: ["Loading ", componentName, "..."] })] }) }));
});
const MainPageLayout = (0, react_1.memo)(function MainPageLayout({ children, debugMode = process.env.NODE_ENV === 'development', loading = false, onSectionNavigate }) {
    var _a;
    const router = (0, navigation_1.useRouter)();
    const { state, planetaryPositions, isDaytime } = (0, hooks_1.useAlchemical)();
    // Use new state preservation hooks
    const { saveState: saveNavState, getState: getNavState } = (0, useStatePreservation_1.useNavigationState)();
    const { restoreScrollPosition } = (0, useStatePreservation_1.useScrollPreservation)('main-page');
    (0, useStatePreservation_1.useAutoStateCleanup)();
    // Enhanced hooks with steering file intelligence
    const steeringIntelligence = (0, steeringFileIntelligence_1.useSteeringFileIntelligence)();
    // Temporarily disabled for testing
    // const { 
    //   saveAstrologicalState, 
    //   restoreAstrologicalState,
    //   validateElementalCompatibility,
    //   getArchitecturalGuidance,
    //   getTechnologyStackGuidance
    // } = useAstrologicalStatePreservation('main-page-layout');
    // Temporarily disabled for testing
    // const { validateCulturalContent, getInclusiveLanguageGuidelines } = useCulturalSensitivityGuidance();
    // const { getOptimizationRecommendations, validatePerformanceMetrics } = usePerformanceOptimizationGuidance();
    // Agent hooks for automated quality assurance - temporarily disabled for testing
    // const { hookState: agentHookState, startAgentHooks, stopAgentHooks, triggerValidation } = useAgentHooks({
    //   enablePlanetaryValidation: true,
    //   enableIngredientValidation: true,
    //   enableCampaignTriggers: true,
    //   enablePerformanceMonitoring: true,
    //   validationInterval: 5 // 5 minutes
    // });
    // const { validationResult: planetaryValidation, validatePlanetaryData } = usePlanetaryDataValidationHook(true);
    // Temporary placeholders for disabled hooks
    const agentHookState = null;
    const planetaryValidation = null;
    const { validationResult: ingredientValidation, validateIngredients } = (0, useAgentHooks_1.useIngredientConsistencyHook)();
    const { campaignTrigger: typescriptTrigger, checkErrorThreshold } = (0, useAgentHooks_1.useTypeScriptCampaignHook)(true);
    const { qualityResult: buildQuality, monitorBuildQuality } = (0, useAgentHooks_1.useBuildQualityMonitoringHook)();
    const { metrics: qualityMetrics, updateMetrics } = (0, useAgentHooks_1.useQualityMetricsHook)(30000); // 30 seconds
    // MCP server integration for reliable external APIs
    const { getAstrologicalData, getNutritionalData, getRecipeData, testFallbackStrategy, getServerStatus } = (0, mcpServerIntegration_1.useMCPServerIntegration)();
    // Development experience optimizations
    const { updatePerformanceMetrics: updateDevMetrics, getDevelopmentMetrics, getPerformanceOptimizationRecommendations: getDevOptimizationRecommendations, applyAutomaticOptimizations } = (0, developmentExperienceOptimizations_1.useDevelopmentExperienceOptimizations)();
    const [sectionStates, setSectionStates] = (0, react_1.useState)({
        cuisine: { loading: false, error: null },
        ingredients: { loading: false, error: null },
        cooking: { loading: false, error: null },
        recipe: { loading: false, error: null }
    });
    // Main Page Context State - Initialize from preserved state
    const [selectedIngredients, setSelectedIngredients] = (0, react_1.useState)([]);
    const [selectedCuisine, setSelectedCuisine] = (0, react_1.useState)(null);
    const [selectedCookingMethods, setSelectedCookingMethods] = (0, react_1.useState)([]);
    const [currentRecipe, setCurrentRecipe] = (0, react_1.useState)(null);
    const [activeSection, setActiveSection] = (0, react_1.useState)(null);
    const [navigationHistory, setNavigationHistory] = (0, react_1.useState)([]);
    // Component update subscribers
    const [updateSubscribers, setUpdateSubscribers] = (0, react_1.useState)({});
    // Steering file intelligence state
    const [astrologicalGuidance, setAstrologicalGuidance] = (0, react_1.useState)(null);
    const [performanceMetrics, setPerformanceMetrics] = (0, react_1.useState)({});
    const [culturalValidation, setCulturalValidation] = (0, react_1.useState)(null);
    // Initialize state from preserved navigation state
    (0, react_1.useEffect)(() => {
        var _a, _b, _c;
        const restoredState = getNavState();
        if (restoredState) {
            if (((_a = restoredState.selectedIngredients) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                setSelectedIngredients(restoredState.selectedIngredients);
            }
            if (restoredState.selectedCuisine) {
                setSelectedCuisine(restoredState.selectedCuisine);
            }
            if (((_b = restoredState.selectedCookingMethods) === null || _b === void 0 ? void 0 : _b.length) > 0) {
                setSelectedCookingMethods(restoredState.selectedCookingMethods);
            }
            if (restoredState.currentRecipe) {
                setCurrentRecipe(restoredState.currentRecipe);
            }
            if (restoredState.activeSection) {
                setActiveSection(restoredState.activeSection);
            }
            if (((_c = restoredState.navigationHistory) === null || _c === void 0 ? void 0 : _c.length) > 0) {
                setNavigationHistory(restoredState.navigationHistory);
            }
            logger_1.logger.debug('Restored main page context from enhanced state preservation');
        }
        // Restore scroll position after a short delay to ensure DOM is ready
        setTimeout(() => {
            restoreScrollPosition();
        }, 100);
    }, [getNavState, restoreScrollPosition]);
    // Initialize steering file intelligence guidance
    (0, react_1.useEffect)(() => {
        const initializeGuidance = async () => {
            try {
                const guidance = await steeringIntelligence.getGuidance();
                setAstrologicalGuidance(guidance);
                // Apply architectural guidance for component optimization - temporarily disabled
                // const archGuidance = getArchitecturalGuidance();
                // logger.debug('Applied architectural guidance from steering files:', archGuidance);
                // Validate cultural content if we have any - temporarily disabled
                // if (selectedCuisine || selectedIngredients.length > 0) {
                //   const validation = validateCulturalContent({
                //     ingredientNames: selectedIngredients,
                //     cuisineDescriptions: selectedCuisine ? [selectedCuisine] : []
                //   });
                //   setCulturalValidation(validation);
                //   
                //   if (!validation.isCompliant) {
                //     logger.warn('Cultural sensitivity issues detected:', validation.issues);
                //   }
                // }
                // Get performance optimization recommendations - temporarily disabled
                // const perfRecommendations = getOptimizationRecommendations('main-page-layout');
                // logger.debug('Performance optimization recommendations:', perfRecommendations);
            }
            catch (error) {
                logger_1.logger.error('Error initializing steering file intelligence:', error);
            }
        };
        initializeGuidance();
    }, [steeringIntelligence, selectedCuisine, selectedIngredients]);
    // Monitor performance metrics using steering file guidance
    (0, react_1.useEffect)(() => {
        const startTime = performance.now();
        const measurePerformance = () => {
            var _a;
            const renderTime = performance.now() - startTime;
            const memoryUsage = ((_a = performance.memory) === null || _a === void 0 ? void 0 : _a.usedJSHeapSize) / 1024 / 1024 || 0;
            const metrics = {
                renderTime,
                memoryUsage,
                componentCount: Object.keys(sectionStates).length,
                activeSubscribers: Object.values(updateSubscribers).reduce((sum, subs) => sum + subs.length, 0)
            };
            setPerformanceMetrics(metrics);
            // Validate performance against steering file thresholds - temporarily disabled
            // const validation = validatePerformanceMetrics({
            //   renderTime,
            //   memoryUsage
            // });
            // 
            // if (!validation.isOptimal) {
            //   logger.warn('Performance issues detected:', validation.issues);
            //   logger.info('Performance recommendations:', validation.recommendations);
            // }
        };
        // Measure performance after component mounts and updates
        const timeoutId = setTimeout(measurePerformance, 100);
        return () => clearTimeout(timeoutId);
    }, [sectionStates, updateSubscribers]);
    // Enhanced state preservation with astrological context
    (0, react_1.useEffect)(() => {
        const saveEnhancedState = async () => {
            try {
                // Calculate elemental properties from current selections
                const elementalProps = {
                    Fire: selectedCookingMethods.filter(method => method.includes('grill') || method.includes('sauté')).length * 0.3,
                    Water: selectedIngredients.filter(ing => ing.includes('soup') || ing.includes('steam')).length * 0.3,
                    Earth: selectedIngredients.filter(ing => ing.includes('root') || ing.includes('grain')).length * 0.3,
                    Air: selectedIngredients.filter(ing => ing.includes('herb') || ing.includes('spice')).length * 0.3
                };
                // Save astrological state with steering file intelligence
                // Temporarily disabled for testing
                // await saveAstrologicalState({
                //   elementalProperties: elementalProps,
                //   selectedIngredients,
                //   astrologicalContext: {
                //     selectedCuisine,
                //     selectedCookingMethods,
                //     currentRecipe,
                //     activeSection,
                //     navigationHistory
                //   }
                // });
            }
            catch (error) {
                logger_1.logger.error('Error saving enhanced astrological state:', error);
            }
        };
        if (selectedIngredients.length > 0 || selectedCuisine || selectedCookingMethods.length > 0) {
            saveEnhancedState();
        }
    }, [selectedIngredients, selectedCuisine, selectedCookingMethods, currentRecipe, activeSection, navigationHistory]);
    // Initialize agent hooks for automated quality assurance - temporarily disabled for testing
    // useEffect(() => {
    //   startAgentHooks();
    //   logger.info('Agent hooks started for automated quality assurance');
    //   
    //   return () => {
    //     stopAgentHooks();
    //     logger.info('Agent hooks stopped');
    //   };
    // }, [startAgentHooks, stopAgentHooks]);
    // Monitor ingredient consistency when ingredients change
    (0, react_1.useEffect)(() => {
        if (selectedIngredients.length > 0) {
            const ingredientsWithElementalProps = selectedIngredients.map(ingredient => ({
                name: ingredient,
                elementalProperties: {
                    Fire: ingredient.includes('spice') || ingredient.includes('pepper') ? 0.8 : 0.2,
                    Water: ingredient.includes('soup') || ingredient.includes('broth') ? 0.8 : 0.2,
                    Earth: ingredient.includes('root') || ingredient.includes('grain') ? 0.8 : 0.2,
                    Air: ingredient.includes('herb') || ingredient.includes('leaf') ? 0.8 : 0.2
                },
                category: ingredient.includes('spice') ? 'spices' :
                    ingredient.includes('herb') ? 'herbs' :
                        ingredient.includes('grain') ? 'grains' : 'other'
            }));
            validateIngredients(ingredientsWithElementalProps).then(result => {
                if (result && !result.isValid) {
                    logger_1.logger.warn('Ingredient consistency validation failed:', result.issues);
                }
            }).catch(error => {
                logger_1.logger.error('Error validating ingredient consistency:', error);
            });
        }
    }, [selectedIngredients]);
    // Monitor build quality and performance metrics
    (0, react_1.useEffect)(() => {
        const monitorQuality = async () => {
            try {
                const buildMetrics = {
                    buildTime: performanceMetrics.renderTime || 0,
                    memoryUsage: performanceMetrics.memoryUsage || 0,
                    bundleSize: 150 * 1024,
                    errorCount: 0 // No build errors in this context
                };
                const qualityResult = await monitorBuildQuality(buildMetrics);
                if (qualityResult && !qualityResult.isValid) {
                    logger_1.logger.warn('Build quality issues detected:', qualityResult.issues);
                }
            }
            catch (error) {
                logger_1.logger.error('Error monitoring build quality:', error);
            }
        };
        // Monitor quality every 30 seconds
        const qualityInterval = setInterval(monitorQuality, 30000);
        // Initial quality check
        monitorQuality();
        return () => clearInterval(qualityInterval);
    }, [performanceMetrics, monitorBuildQuality]);
    // Test MCP server integration and fallback strategy
    (0, react_1.useEffect)(() => {
        const testMCPIntegration = async () => {
            try {
                // Test fallback strategy on component mount
                const fallbackTest = await testFallbackStrategy();
                logger_1.logger.info('MCP server fallback strategy test completed:', {
                    overallReliability: fallbackTest.overallReliability,
                    astrological: fallbackTest.astrological.source,
                    nutritional: fallbackTest.nutritional.source,
                    recipes: fallbackTest.recipes.source
                });
                // Monitor server status
                const serverStatus = getServerStatus();
                logger_1.logger.debug('MCP server status:', serverStatus);
                // Test individual API integrations if needed
                if (selectedIngredients.length > 0) {
                    const nutritionalData = await getNutritionalData(selectedIngredients[0]);
                    if (nutritionalData.success) {
                        logger_1.logger.debug(`Nutritional data fetched via ${nutritionalData.source} for ${selectedIngredients[0]}`);
                    }
                }
            }
            catch (error) {
                logger_1.logger.error('Error testing MCP server integration:', error);
            }
        };
        // Test MCP integration on mount and when ingredients change
        testMCPIntegration();
        // Set up periodic server status monitoring
        const statusInterval = setInterval(() => {
            const serverStatus = getServerStatus();
            logger_1.logger.debug('MCP server status check:', serverStatus);
        }, 5 * 60 * 1000); // Every 5 minutes
        return () => clearInterval(statusInterval);
    }, [testFallbackStrategy, getServerStatus, getNutritionalData, selectedIngredients]);
    // Apply development experience optimizations
    (0, react_1.useEffect)(() => {
        const applyDevOptimizations = async () => {
            try {
                // Update development metrics with current performance data
                const devMetrics = {
                    compilationTime: performanceMetrics.renderTime || 0,
                    memoryUsage: performanceMetrics.memoryUsage || 0,
                    bundleSize: 150 * 1024,
                    errorCount: 0,
                    warningCount: 0,
                    hotReloadTime: 0
                };
                updateDevMetrics(devMetrics);
                // Get development optimization recommendations
                const devRecommendations = getDevOptimizationRecommendations();
                if (debugMode) {
                    logger_1.logger.debug('Development optimization recommendations:', devRecommendations);
                }
                // Apply automatic optimizations in development mode
                if (debugMode && process.env.NODE_ENV === 'development') {
                    const optimizationResults = applyAutomaticOptimizations();
                    if (optimizationResults.applied.length > 0) {
                        logger_1.logger.info('Applied automatic development optimizations:', optimizationResults.applied);
                    }
                    if (optimizationResults.errors.length > 0) {
                        logger_1.logger.warn('Development optimization errors:', optimizationResults.errors);
                    }
                }
                // Monitor development metrics
                const currentDevMetrics = getDevelopmentMetrics();
                if (debugMode) {
                    logger_1.logger.debug('Current development metrics:', currentDevMetrics);
                }
            }
            catch (error) {
                logger_1.logger.error('Error applying development experience optimizations:', error);
            }
        };
        // Apply optimizations on mount and when performance metrics change
        applyDevOptimizations();
        // Set up periodic optimization monitoring
        const devOptimizationInterval = setInterval(applyDevOptimizations, 60000); // Every minute
        return () => clearInterval(devOptimizationInterval);
    }, [performanceMetrics, updateDevMetrics, getDevOptimizationRecommendations, applyAutomaticOptimizations, getDevelopmentMetrics, debugMode]);
    // Log quality metrics and campaign triggers for debugging
    (0, react_1.useEffect)(() => {
        if (debugMode) {
            logger_1.logger.debug('Quality Metrics:', qualityMetrics);
            logger_1.logger.debug('Agent Hook State:', agentHookState);
            if (planetaryValidation && !planetaryValidation.isValid) {
                logger_1.logger.warn('Planetary validation issues:', planetaryValidation.issues);
            }
            if (typescriptTrigger === null || typescriptTrigger === void 0 ? void 0 : typescriptTrigger.triggered) {
                logger_1.logger.warn('TypeScript campaign trigger active:', typescriptTrigger);
            }
            if (buildQuality && !buildQuality.isValid) {
                logger_1.logger.warn('Build quality issues:', buildQuality.issues);
            }
            // Log MCP server status in debug mode
            const serverStatus = getServerStatus();
            logger_1.logger.debug('MCP Server Status:', serverStatus);
            // Log development metrics in debug mode
            const devMetrics = getDevelopmentMetrics();
            logger_1.logger.debug('Development Experience Metrics:', devMetrics);
        }
    }, [debugMode, qualityMetrics, agentHookState, planetaryValidation, typescriptTrigger, buildQuality, getServerStatus, getDevelopmentMetrics]);
    // Save state changes using enhanced state preservation
    (0, react_1.useEffect)(() => {
        saveNavState({
            selectedIngredients,
            selectedCuisine,
            selectedCookingMethods,
            currentRecipe,
            activeSection,
            navigationHistory,
            scrollPosition: window.scrollY
        });
    }, [selectedIngredients, selectedCuisine, selectedCookingMethods, currentRecipe, activeSection, navigationHistory, saveNavState]);
    // Context update functions
    const updateSelectedIngredients = (0, react_1.useCallback)((ingredients) => {
        setSelectedIngredients(ingredients);
        notifyComponentUpdate('ingredients', { selectedIngredients: ingredients });
        logger_1.logger.debug('Updated selected ingredients:', ingredients);
    }, []);
    const updateSelectedCuisine = (0, react_1.useCallback)((cuisine) => {
        setSelectedCuisine(cuisine);
        notifyComponentUpdate('cuisine', { selectedCuisine: cuisine });
        logger_1.logger.debug('Updated selected cuisine:', cuisine);
    }, []);
    const updateSelectedCookingMethods = (0, react_1.useCallback)((methods) => {
        setSelectedCookingMethods(methods);
        notifyComponentUpdate('cooking', { selectedCookingMethods: methods });
        logger_1.logger.debug('Updated selected cooking methods:', methods);
    }, []);
    const updateCurrentRecipe = (0, react_1.useCallback)((recipe) => {
        setCurrentRecipe(recipe);
        notifyComponentUpdate('recipe', { currentRecipe: recipe });
        logger_1.logger.debug('Updated current recipe:', recipe);
    }, []);
    const handleSetActiveSection = (0, react_1.useCallback)((section) => {
        setActiveSection(section);
        if (section) {
            setNavigationHistory(prev => [...prev.slice(-9), section]); // Keep last 10 sections
        }
    }, []);
    // Cross-component communication
    const notifyComponentUpdate = (0, react_1.useCallback)((componentId, data) => {
        const subscribers = updateSubscribers[componentId] || [];
        subscribers.forEach(callback => {
            try {
                callback(data);
            }
            catch (error) {
                logger_1.logger.error(`Error in component update callback for ${componentId}:`, error);
            }
        });
    }, [updateSubscribers]);
    const subscribeToUpdates = (0, react_1.useCallback)((componentId, callback) => {
        setUpdateSubscribers(prev => ({
            ...prev,
            [componentId]: [...(prev[componentId] || []), callback]
        }));
        // Return unsubscribe function
        return () => {
            setUpdateSubscribers(prev => ({
                ...prev,
                [componentId]: (prev[componentId] || []).filter(cb => cb !== callback)
            }));
        };
    }, []);
    // Memoized context value to prevent unnecessary re-renders
    const contextValue = (0, react_1.useMemo)(() => ({
        // Shared state
        selectedIngredients,
        selectedCuisine,
        selectedCookingMethods,
        currentRecipe,
        activeSection,
        navigationHistory,
        // Update functions
        updateSelectedIngredients,
        updateSelectedCuisine,
        updateSelectedCookingMethods,
        updateCurrentRecipe,
        setActiveSection: handleSetActiveSection,
        // Cross-component communication
        notifyComponentUpdate,
        subscribeToUpdates
    }), [
        selectedIngredients,
        selectedCuisine,
        selectedCookingMethods,
        currentRecipe,
        activeSection,
        navigationHistory,
        updateSelectedIngredients,
        updateSelectedCuisine,
        updateSelectedCookingMethods,
        updateCurrentRecipe,
        handleSetActiveSection,
        notifyComponentUpdate,
        subscribeToUpdates
    ]);
    // Handle section navigation with enhanced context preservation and smooth transitions
    const handleSectionNavigate = (0, react_1.useCallback)((sectionId) => {
        const element = document.getElementById(sectionId);
        if (element) {
            // Add smooth transition effect
            element.style.transition = 'all 0.3s ease-in-out';
            element.scrollIntoView({ behavior: 'smooth', block: 'start' });
            // Update active section and navigation history
            handleSetActiveSection(sectionId);
            onSectionNavigate === null || onSectionNavigate === void 0 ? void 0 : onSectionNavigate(sectionId);
            // Save navigation state using enhanced preservation system
            saveNavState({
                selectedIngredients,
                selectedCuisine,
                selectedCookingMethods,
                currentRecipe,
                activeSection: sectionId,
                navigationHistory: [...navigationHistory, sectionId].slice(-10),
                scrollPosition: window.scrollY
            });
            // Add visual feedback for navigation
            element.classList.add('highlight-section');
            setTimeout(() => {
                element.classList.remove('highlight-section');
                element.style.transition = '';
            }, 1000);
        }
    }, [onSectionNavigate, handleSetActiveSection, navigationHistory, saveNavState, selectedIngredients, selectedCuisine, selectedCookingMethods, currentRecipe]);
    // Update section loading state
    const updateSectionState = (0, react_1.useCallback)((sectionId, updates) => {
        setSectionStates(prev => ({
            ...prev,
            [sectionId]: { ...prev[sectionId], ...updates }
        }));
    }, []);
    // Section error boundary fallback
    const SectionErrorFallback = ({ error, sectionId, onRetry }) => ((0, jsx_runtime_1.jsxs)("div", { className: "bg-red-50 border border-red-200 rounded-lg p-6 text-center", children: [(0, jsx_runtime_1.jsxs)("h3", { className: "text-lg font-semibold text-red-800 mb-2", children: ["Section Error: ", sectionId] }), (0, jsx_runtime_1.jsx)("p", { className: "text-red-600 mb-4", children: error.message || 'An unexpected error occurred in this section.' }), (0, jsx_runtime_1.jsx)("button", { onClick: onRetry, className: "bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700 transition-colors", children: "Retry Section" })] }));
    // Section wrapper with error boundary
    const SectionWrapper = ({ id, title, children, className = '' }) => {
        var _a;
        const [retryKey, setRetryKey] = (0, react_1.useState)(0);
        const handleRetry = (0, react_1.useCallback)(() => {
            setRetryKey(prev => prev + 1);
            updateSectionState(id, { loading: false, error: null });
        }, [id]);
        return ((0, jsx_runtime_1.jsxs)("section", { id: id, className: `bg-white rounded-lg shadow-md p-6 scroll-mt-20 ${className}`, children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between mb-4", children: [(0, jsx_runtime_1.jsx)("h2", { className: "text-2xl font-semibold text-gray-800", children: title }), ((_a = sectionStates[id]) === null || _a === void 0 ? void 0 : _a.loading) && ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center text-blue-600", children: [(0, jsx_runtime_1.jsx)("div", { className: "animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2" }), (0, jsx_runtime_1.jsx)("span", { className: "text-sm", children: "Loading..." })] }))] }), (0, jsx_runtime_1.jsx)(ErrorBoundary_1.default, { fallback: (error) => ((0, jsx_runtime_1.jsx)(SectionErrorFallback, { error: error, sectionId: id, onRetry: handleRetry })), children: children }, retryKey)] }));
    };
    return ((0, jsx_runtime_1.jsx)(MainPageContext.Provider, { value: contextValue, children: (0, jsx_runtime_1.jsxs)("div", { className: "min-h-screen bg-gradient-to-b from-indigo-50 via-blue-50 to-gray-100 text-gray-800", children: [(0, jsx_runtime_1.jsxs)("div", { className: "container mx-auto px-4 py-8", children: [(0, jsx_runtime_1.jsxs)("header", { className: "mb-8 text-center", children: [(0, jsx_runtime_1.jsx)("h1", { className: "text-3xl md:text-4xl font-bold mb-2 text-indigo-900", children: "What to Eat Next" }), (0, jsx_runtime_1.jsx)("p", { className: "text-indigo-600 mb-4", children: "Food recommendations based on the current celestial energies" }), (0, jsx_runtime_1.jsx)("div", { className: "inline-block bg-white px-4 py-2 rounded-lg shadow-sm", children: loading ? ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center", children: [(0, jsx_runtime_1.jsx)("div", { className: "animate-spin rounded-full h-4 w-4 border-b-2 border-indigo-600 mr-2" }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-600", children: "Loading astrological data..." })] })) : ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center", children: [(0, jsx_runtime_1.jsx)("div", { className: "w-2 h-2 bg-green-500 rounded-full mr-2" }), (0, jsx_runtime_1.jsxs)("p", { className: "text-sm text-gray-600", children: ["Connected \u2022 ", isDaytime ? 'Day' : 'Night', " \u2022 ", ((_a = state.astrologicalState) === null || _a === void 0 ? void 0 : _a.sunSign) || 'Loading...'] })] })) })] }), (0, jsx_runtime_1.jsxs)("nav", { className: "flex flex-wrap justify-center gap-4 mb-8 bg-white rounded-lg shadow-md p-4 sticky top-2 z-10", children: [(0, jsx_runtime_1.jsx)("button", { onClick: () => handleSectionNavigate('cuisine'), className: "text-indigo-600 hover:text-indigo-800 font-medium px-3 py-1 rounded hover:bg-indigo-50 transition-colors", children: "Cuisine Recommendations" }), (0, jsx_runtime_1.jsx)("button", { onClick: () => handleSectionNavigate('ingredients'), className: "text-indigo-600 hover:text-indigo-800 font-medium px-3 py-1 rounded hover:bg-indigo-50 transition-colors", children: "Ingredient Recommendations" }), (0, jsx_runtime_1.jsx)("button", { onClick: () => handleSectionNavigate('cooking'), className: "text-indigo-600 hover:text-indigo-800 font-medium px-3 py-1 rounded hover:bg-indigo-50 transition-colors", children: "Cooking Methods" }), (0, jsx_runtime_1.jsx)("button", { onClick: () => handleSectionNavigate('recipe'), className: "text-indigo-600 hover:text-indigo-800 font-medium px-3 py-1 rounded hover:bg-indigo-50 transition-colors", children: "Recipe Builder" })] }), (0, jsx_runtime_1.jsxs)("main", { className: "flex flex-col gap-8 max-w-6xl mx-auto", children: [(0, jsx_runtime_1.jsx)(SectionWrapper, { id: "cuisine", title: "Cuisine Recommendations", children: (0, jsx_runtime_1.jsx)(ErrorBoundary_1.default, { fallback: (error) => ((0, jsx_runtime_1.jsx)(ComponentFallbacks_1.ComponentFallbacks.CuisineRecommender, { onRetry: () => window.location.reload(), error: error })), children: (0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)(ComponentFallbacks_1.ComponentFallbacks.Loading, { componentName: "Cuisine Recommender" }), children: (0, jsx_runtime_1.jsx)(CuisineRecommender, {}) }) }) }), (0, jsx_runtime_1.jsx)(SectionWrapper, { id: "ingredients", title: "Ingredient Recommendations", children: (0, jsx_runtime_1.jsx)(ErrorBoundary_1.default, { fallback: (error) => ((0, jsx_runtime_1.jsx)(ComponentFallbacks_1.ComponentFallbacks.IngredientRecommender, { onRetry: () => window.location.reload(), error: error })), children: (0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)(ComponentFallbacks_1.ComponentFallbacks.Loading, { componentName: "Ingredient Recommender" }), children: (0, jsx_runtime_1.jsx)(IngredientRecommender, { isFullPageVersion: false, maxDisplayed: 8 }) }) }) }), (0, jsx_runtime_1.jsx)(SectionWrapper, { id: "cooking", title: "Cooking Methods", children: (0, jsx_runtime_1.jsx)(ErrorBoundary_1.default, { fallback: (error) => ((0, jsx_runtime_1.jsx)(ComponentFallbacks_1.ComponentFallbacks.CookingMethods, { onRetry: () => window.location.reload(), error: error })), children: (0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)(ComponentFallbacks_1.ComponentFallbacks.Loading, { componentName: "Cooking Methods" }), children: (0, jsx_runtime_1.jsx)(CookingMethodsSection, { isMainPageVersion: true, maxDisplayed: 6, onViewMore: () => router.push('/cooking-methods') }) }) }) }), (0, jsx_runtime_1.jsx)(SectionWrapper, { id: "recipe", title: "Recipe Builder", children: (0, jsx_runtime_1.jsx)(ErrorBoundary_1.default, { fallback: (error) => ((0, jsx_runtime_1.jsx)(ComponentFallbacks_1.ComponentFallbacks.RecipeBuilder, { onRetry: () => window.location.reload(), error: error })), children: (0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)(ComponentFallbacks_1.ComponentFallbacks.Loading, { componentName: "Recipe Builder" }), children: (0, jsx_runtime_1.jsx)(RecipeBuilderSimple, {}) }) }) }), children] }), (0, jsx_runtime_1.jsx)("footer", { className: "mt-12 text-center", children: (0, jsx_runtime_1.jsx)("div", { className: "mx-auto mb-4", style: { maxWidth: '250px' }, children: (0, jsx_runtime_1.jsx)("form", { action: "https://www.paypal.com/ncp/payment/SVN6Q368TKKLS", method: "post", target: "_blank", children: (0, jsx_runtime_1.jsx)("input", { type: "submit", value: "HELP", style: {
                                            textAlign: 'center',
                                            border: 'none',
                                            borderRadius: '0.25rem',
                                            width: '100%',
                                            padding: '0 2rem',
                                            height: '2.625rem',
                                            fontWeight: 'bold',
                                            backgroundColor: '#FFD140',
                                            color: '#000000',
                                            fontFamily: '"Helvetica Neue", Arial, sans-serif',
                                            fontSize: '1rem',
                                            lineHeight: '1.25rem',
                                            cursor: 'pointer'
                                        } }) }) }) })] }), debugMode && ((0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: null, children: (0, jsx_runtime_1.jsx)(ConsolidatedDebugInfo, { position: "bottom-right", collapsible: true, showPerformanceMetrics: true, showAstrologicalData: true, showComponentStates: true }) })), (0, jsx_runtime_1.jsx)("style", { jsx: true, children: `
        .highlight-section {
          transform: scale(1.02);
          box-shadow: 0 10px 25px rgba(99, 102, 241, 0.15);
          border: 2px solid rgba(99, 102, 241, 0.3);
        }
        
        section {
          transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out, border 0.3s ease-in-out;
        }
        
        nav button:hover {
          transform: translateY(-1px);
        }
        
        nav button:active {
          transform: translateY(0);
        }
      ` })] }) }));
});
exports.default = MainPageLayout;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,