be6d198304b186fe531a4bcbb7272f12
"use strict";
/**
 * Recommendation Analytics Service
 *
 * Provides comprehensive analytics for recommendation systems including:
 * - Performance metrics tracking (load time, API response time)
 * - Recommendation confidence scoring
 * - User interaction analytics
 * - Intelligent caching for recommendations
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.recommendationAnalytics = void 0;
const PerformanceCache_1 = require("./PerformanceCache");
const logger_1 = require("@/utils/logger");
// ========== RECOMMENDATION ANALYTICS SERVICE ==========
class RecommendationAnalyticsService {
    constructor() {
        this.metricsHistory = [];
        this.userInteractions = [];
        this.maxHistorySize = 100;
        this.maxInteractionHistory = 500;
        this.performanceMonitor = new PerformanceCache_1.PerformanceMonitor();
        this.recommendationCache = new PerformanceCache_1.PerformanceCache(1000, 600000); // 10 minutes TTL
        this.confidenceCache = new PerformanceCache_1.PerformanceCache(500, 300000); // 5 minutes TTL
        this.sessionId = this.generateSessionId();
    }
    // ========== PERFORMANCE TRACKING ==========
    /**
     * Start timing a recommendation operation
     */
    startTiming(operation) {
        const startTime = performance.now();
        return () => {
            const endTime = performance.now();
            const duration = endTime - startTime;
            this.performanceMonitor.recordMetric('calculationTime', duration);
            return duration;
        };
    }
    /**
     * Record API response time
     */
    recordApiResponseTime(duration) {
        this.performanceMonitor.recordMetric('averageResponseTime', duration);
    }
    /**
     * Record recommendation load time
     */
    recordLoadTime(duration) {
        this.performanceMonitor.recordMetric('calculationTime', duration);
    }
    // ========== INTELLIGENT CACHING ==========
    /**
     * Get cached recommendation with performance tracking
     */
    getCachedRecommendation(key) {
        const startTime = performance.now();
        const result = this.recommendationCache.get(key);
        const duration = performance.now() - startTime;
        // Update cache hit rate
        const stats = this.recommendationCache.getStats();
        this.performanceMonitor.recordMetric('cacheHitRate', stats.hitRate);
        logger_1.logger.debug(`Cache ${result ? 'hit' : 'miss'} for key: ${key} (${duration.toFixed(2)}ms)`);
        return result;
    }
    /**
     * Cache recommendation with intelligent TTL
     */
    cacheRecommendation(key, data, confidenceScore) {
        // Adjust TTL based on confidence score
        let ttl = 600000; // Default 10 minutes
        if (confidenceScore) {
            if (confidenceScore >= 0.9) {
                ttl = 1800000; // 30 minutes for high confidence
            }
            else if (confidenceScore >= 0.7) {
                ttl = 900000; // 15 minutes for medium confidence
            }
            else {
                ttl = 300000; // 5 minutes for low confidence
            }
        }
        this.recommendationCache.set(key, data, ttl);
        logger_1.logger.debug(`Cached recommendation with key: ${key} (TTL: ${ttl}ms, confidence: ${confidenceScore})`);
    }
    // ========== CONFIDENCE SCORING ==========
    /**
     * Calculate recommendation confidence score
     */
    calculateConfidenceScore(factors) {
        var _a, _b, _c, _d, _e, _f;
        const cacheKey = `confidence_${JSON.stringify(factors)}`;
        const cached = this.confidenceCache.get(cacheKey);
        if (cached) {
            return cached;
        }
        // Default factor values
        const completedFactors = {
            astrologicalAlignment: (_a = factors.astrologicalAlignment) !== null && _a !== void 0 ? _a : 0.8,
            elementalHarmony: (_b = factors.elementalHarmony) !== null && _b !== void 0 ? _b : 0.8,
            culturalRelevance: (_c = factors.culturalRelevance) !== null && _c !== void 0 ? _c : 0.7,
            seasonalOptimization: (_d = factors.seasonalOptimization) !== null && _d !== void 0 ? _d : 0.8,
            userPreferenceMatch: (_e = factors.userPreferenceMatch) !== null && _e !== void 0 ? _e : 0.7,
            dataQuality: (_f = factors.dataQuality) !== null && _f !== void 0 ? _f : 0.9
        };
        // Weighted confidence calculation
        const weights = {
            astrologicalAlignment: 0.25,
            elementalHarmony: 0.20,
            culturalRelevance: 0.15,
            seasonalOptimization: 0.15,
            userPreferenceMatch: 0.15,
            dataQuality: 0.10
        };
        const overallScore = Object.entries(completedFactors).reduce((sum, [key, value]) => {
            const weight = weights[key];
            return sum + (value * weight);
        }, 0);
        // Generate reasoning based on factors
        const reasoning = [];
        if (completedFactors.astrologicalAlignment >= 0.9) {
            reasoning.push('Strong astrological alignment with current planetary positions');
        }
        else if (completedFactors.astrologicalAlignment < 0.6) {
            reasoning.push('Limited astrological alignment - consider alternative timing');
        }
        if (completedFactors.elementalHarmony >= 0.9) {
            reasoning.push('Excellent elemental harmony with user profile');
        }
        else if (completedFactors.elementalHarmony < 0.6) {
            reasoning.push('Moderate elemental compatibility');
        }
        if (completedFactors.culturalRelevance >= 0.8) {
            reasoning.push('High cultural relevance and authenticity');
        }
        if (completedFactors.seasonalOptimization >= 0.8) {
            reasoning.push('Well-optimized for current season');
        }
        // Determine reliability level
        let reliability;
        if (overallScore >= 0.85) {
            reliability = 'high';
        }
        else if (overallScore >= 0.65) {
            reliability = 'medium';
        }
        else {
            reliability = 'low';
        }
        const confidence = {
            overallScore,
            factors: completedFactors,
            reasoning,
            reliability
        };
        // Cache the confidence calculation
        this.confidenceCache.set(cacheKey, confidence);
        return confidence;
    }
    // ========== USER INTERACTION ANALYTICS ==========
    /**
     * Track user interaction
     */
    trackInteraction(interaction) {
        const fullInteraction = {
            ...interaction,
            timestamp: Date.now()
        };
        this.userInteractions.push(fullInteraction);
        // Keep only recent interactions
        if (this.userInteractions.length > this.maxInteractionHistory) {
            this.userInteractions = this.userInteractions.slice(-this.maxInteractionHistory);
        }
        logger_1.logger.debug(`Tracked interaction: ${interaction.type} on ${interaction.target}`);
    }
    /**
     * Get user interaction analytics
     */
    getInteractionAnalytics(timeWindow) {
        var _a, _b;
        const now = Date.now();
        const windowStart = timeWindow ? now - timeWindow : 0;
        const relevantInteractions = this.userInteractions.filter(interaction => interaction.timestamp >= windowStart);
        // Count interactions by type
        const interactionsByType = {};
        const targetCounts = {};
        relevantInteractions.forEach(interaction => {
            interactionsByType[interaction.type] = (interactionsByType[interaction.type] || 0) + 1;
            targetCounts[interaction.target] = (targetCounts[interaction.target] || 0) + 1;
        });
        // Get most interacted targets
        const mostInteractedTargets = Object.entries(targetCounts)
            .map(([target, count]) => ({ target, count }))
            .sort((a, b) => b.count - a.count)
            .slice(0, 5);
        // Calculate interaction rate (interactions per minute)
        const timeSpan = timeWindow || (now - (((_a = this.userInteractions[0]) === null || _a === void 0 ? void 0 : _a.timestamp) || now));
        const interactionRate = relevantInteractions.length / (timeSpan / 60000);
        // Calculate average session duration
        const sessionStart = ((_b = this.userInteractions[0]) === null || _b === void 0 ? void 0 : _b.timestamp) || now;
        const averageSessionDuration = (now - sessionStart) / 60000; // in minutes
        return {
            totalInteractions: relevantInteractions.length,
            interactionsByType,
            interactionRate,
            mostInteractedTargets,
            averageSessionDuration
        };
    }
    // ========== METRICS AND REPORTING ==========
    /**
     * Record comprehensive metrics snapshot
     */
    recordMetricsSnapshot() {
        const performanceStats = this.performanceMonitor.getStats();
        const cacheStats = this.recommendationCache.getStats();
        const interactionAnalytics = this.getInteractionAnalytics(300000); // Last 5 minutes
        const metrics = {
            loadTime: performanceStats.current.calculationTime,
            apiResponseTime: performanceStats.current.averageResponseTime,
            cacheHitRate: cacheStats.hitRate,
            recommendationCount: performanceStats.current.recommendationCount,
            averageConfidenceScore: 0.8,
            userInteractionRate: interactionAnalytics.interactionRate,
            timestamp: Date.now()
        };
        this.metricsHistory.push(metrics);
        // Keep only recent metrics
        if (this.metricsHistory.length > this.maxHistorySize) {
            this.metricsHistory = this.metricsHistory.slice(-this.maxHistorySize);
        }
        return metrics;
    }
    /**
     * Get analytics snapshot
     */
    getAnalyticsSnapshot() {
        const metrics = this.recordMetricsSnapshot();
        const cacheStats = this.recommendationCache.getStats();
        const recentInteractions = this.userInteractions.slice(-20); // Last 20 interactions
        return {
            sessionId: this.sessionId,
            timestamp: Date.now(),
            metrics,
            interactions: recentInteractions,
            cacheStats: {
                hitRate: cacheStats.hitRate,
                totalEntries: cacheStats.totalEntries,
                memoryUsage: cacheStats.memoryUsage
            }
        };
    }
    /**
     * Get performance trends
     */
    getPerformanceTrends(timeWindow) {
        const now = Date.now();
        const windowStart = timeWindow ? now - timeWindow : 0;
        const relevantMetrics = this.metricsHistory.filter(metric => metric.timestamp >= windowStart);
        if (relevantMetrics.length === 0) {
            return {
                loadTimeTrend: [],
                cacheHitRateTrend: [],
                interactionRateTrend: [],
                averageLoadTime: 0,
                averageCacheHitRate: 0,
                performanceScore: 0
            };
        }
        const loadTimeTrend = relevantMetrics.map(m => m.loadTime);
        const cacheHitRateTrend = relevantMetrics.map(m => m.cacheHitRate);
        const interactionRateTrend = relevantMetrics.map(m => m.userInteractionRate);
        const averageLoadTime = loadTimeTrend.reduce((sum, val) => sum + val, 0) / loadTimeTrend.length;
        const averageCacheHitRate = cacheHitRateTrend.reduce((sum, val) => sum + val, 0) / cacheHitRateTrend.length;
        // Calculate performance score (0-100)
        const loadTimeScore = Math.max(0, 100 - (averageLoadTime / 10)); // Penalize load times > 1000ms
        const cacheScore = averageCacheHitRate * 100;
        const performanceScore = (loadTimeScore * 0.6) + (cacheScore * 0.4);
        return {
            loadTimeTrend,
            cacheHitRateTrend,
            interactionRateTrend,
            averageLoadTime,
            averageCacheHitRate,
            performanceScore
        };
    }
    // ========== UTILITY METHODS ==========
    /**
     * Generate unique session ID
     */
    generateSessionId() {
        return `session_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;
    }
    /**
     * Clear all analytics data
     */
    clearAnalytics() {
        this.metricsHistory = [];
        this.userInteractions = [];
        this.recommendationCache.clear();
        this.confidenceCache.clear();
        this.performanceMonitor.clear();
        this.sessionId = this.generateSessionId();
        logger_1.logger.info('Analytics data cleared');
    }
    /**
     * Get cache statistics
     */
    getCacheStats() {
        return {
            recommendation: this.recommendationCache.getStats(),
            confidence: this.confidenceCache.getStats()
        };
    }
    /**
     * Destroy service and cleanup
     */
    destroy() {
        this.recommendationCache.destroy();
        this.confidenceCache.destroy();
        this.clearAnalytics();
    }
}
// ========== SINGLETON EXPORT ==========
exports.recommendationAnalytics = new RecommendationAnalyticsService();
exports.default = RecommendationAnalyticsService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,