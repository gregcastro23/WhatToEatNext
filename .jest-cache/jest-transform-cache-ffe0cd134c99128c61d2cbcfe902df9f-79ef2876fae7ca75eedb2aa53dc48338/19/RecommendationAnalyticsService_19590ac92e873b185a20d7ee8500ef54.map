{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/RecommendationAnalyticsService.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/RecommendationAnalyticsService.ts"],"sourcesContent":["/**\n * Recommendation Analytics Service\n * \n * Provides comprehensive analytics for recommendation systems including:\n * - Performance metrics tracking (load time, API response time)\n * - Recommendation confidence scoring\n * - User interaction analytics\n * - Intelligent caching for recommendations\n */\n\nimport { PerformanceCache, PerformanceMonitor } from './PerformanceCache';\nimport { logger } from '@/utils/logger';\n\n// ========== INTERFACES ==========\n\nexport interface RecommendationMetrics {\n  loadTime: number;\n  apiResponseTime: number;\n  cacheHitRate: number;\n  recommendationCount: number;\n  averageConfidenceScore: number;\n  userInteractionRate: number;\n  timestamp: number;\n}\n\nexport interface ConfidenceFactors {\n  astrologicalAlignment: number;\n  elementalHarmony: number;\n  culturalRelevance: number;\n  seasonalOptimization: number;\n  userPreferenceMatch: number;\n  dataQuality: number;\n}\n\nexport interface RecommendationConfidence {\n  overallScore: number;\n  factors: ConfidenceFactors;\n  reasoning: string[];\n  reliability: 'high' | 'medium' | 'low';\n}\n\nexport interface UserInteraction {\n  type: 'view' | 'select' | 'expand' | 'filter' | 'search' | 'retry';\n  target: string;\n  timestamp: number;\n  metadata?: Record<string, unknown>;\n}\n\nexport interface AnalyticsSnapshot {\n  sessionId: string;\n  timestamp: number;\n  metrics: RecommendationMetrics;\n  interactions: UserInteraction[];\n  cacheStats: {\n    hitRate: number;\n    totalEntries: number;\n    memoryUsage: number;\n  };\n}\n\n// ========== RECOMMENDATION ANALYTICS SERVICE ==========\n\nclass RecommendationAnalyticsService {\n  private performanceMonitor: PerformanceMonitor;\n  private recommendationCache: PerformanceCache<unknown>;\n  private confidenceCache: PerformanceCache<RecommendationConfidence>;\n  private metricsHistory: RecommendationMetrics[] = [];\n  private userInteractions: UserInteraction[] = [];\n  private sessionId: string;\n  private maxHistorySize: number = 100;\n  private maxInteractionHistory: number = 500;\n\n  constructor() {\n    this.performanceMonitor = new PerformanceMonitor();\n    this.recommendationCache = new PerformanceCache<unknown>(1000, 600000); // 10 minutes TTL\n    this.confidenceCache = new PerformanceCache<RecommendationConfidence>(500, 300000); // 5 minutes TTL\n    this.sessionId = this.generateSessionId();\n  }\n\n  // ========== PERFORMANCE TRACKING ==========\n\n  /**\n   * Start timing a recommendation operation\n   */\n  startTiming(operation: string): () => number {\n    const startTime = performance.now();\n    \n    return () => {\n      const endTime = performance.now();\n      const duration = endTime - startTime;\n      \n      this.performanceMonitor.recordMetric('calculationTime', duration);\n      \n      return duration;\n    };\n  }\n\n  /**\n   * Record API response time\n   */\n  recordApiResponseTime(duration: number): void {\n    this.performanceMonitor.recordMetric('averageResponseTime', duration);\n  }\n\n  /**\n   * Record recommendation load time\n   */\n  recordLoadTime(duration: number): void {\n    this.performanceMonitor.recordMetric('calculationTime', duration);\n  }\n\n  // ========== INTELLIGENT CACHING ==========\n\n  /**\n   * Get cached recommendation with performance tracking\n   */\n  getCachedRecommendation<T>(key: string): T | null {\n    const startTime = performance.now();\n    const result = this.recommendationCache.get(key) as T | null;\n    const duration = performance.now() - startTime;\n    \n    // Update cache hit rate\n    const stats = this.recommendationCache.getStats();\n    this.performanceMonitor.recordMetric('cacheHitRate', stats.hitRate);\n    \n    logger.debug(`Cache ${result ? 'hit' : 'miss'} for key: ${key} (${duration.toFixed(2)}ms)`);\n    \n    return result;\n  }\n\n  /**\n   * Cache recommendation with intelligent TTL\n   */\n  cacheRecommendation<T>(key: string, data: T, confidenceScore?: number): void {\n    // Adjust TTL based on confidence score\n    let ttl = 600000; // Default 10 minutes\n    \n    if (confidenceScore) {\n      if (confidenceScore >= 0.9) {\n        ttl = 1800000; // 30 minutes for high confidence\n      } else if (confidenceScore >= 0.7) {\n        ttl = 900000; // 15 minutes for medium confidence\n      } else {\n        ttl = 300000; // 5 minutes for low confidence\n      }\n    }\n    \n    this.recommendationCache.set(key, data, ttl);\n    \n    logger.debug(`Cached recommendation with key: ${key} (TTL: ${ttl}ms, confidence: ${confidenceScore})`);\n  }\n\n  // ========== CONFIDENCE SCORING ==========\n\n  /**\n   * Calculate recommendation confidence score\n   */\n  calculateConfidenceScore(factors: Partial<ConfidenceFactors>): RecommendationConfidence {\n    const cacheKey = `confidence_${JSON.stringify(factors)}`;\n    const cached = this.confidenceCache.get(cacheKey);\n    \n    if (cached) {\n      return cached;\n    }\n\n    // Default factor values\n    const completedFactors: ConfidenceFactors = {\n      astrologicalAlignment: factors.astrologicalAlignment ?? 0.8,\n      elementalHarmony: factors.elementalHarmony ?? 0.8,\n      culturalRelevance: factors.culturalRelevance ?? 0.7,\n      seasonalOptimization: factors.seasonalOptimization ?? 0.8,\n      userPreferenceMatch: factors.userPreferenceMatch ?? 0.7,\n      dataQuality: factors.dataQuality ?? 0.9\n    };\n\n    // Weighted confidence calculation\n    const weights = {\n      astrologicalAlignment: 0.25,\n      elementalHarmony: 0.20,\n      culturalRelevance: 0.15,\n      seasonalOptimization: 0.15,\n      userPreferenceMatch: 0.15,\n      dataQuality: 0.10\n    };\n\n    const overallScore = Object.entries(completedFactors).reduce((sum, [key, value]) => {\n      const weight = weights[key as keyof ConfidenceFactors];\n      return sum + (value * weight);\n    }, 0);\n\n    // Generate reasoning based on factors\n    const reasoning: string[] = [];\n    \n    if (completedFactors.astrologicalAlignment >= 0.9) {\n      reasoning.push('Strong astrological alignment with current planetary positions');\n    } else if (completedFactors.astrologicalAlignment < 0.6) {\n      reasoning.push('Limited astrological alignment - consider alternative timing');\n    }\n\n    if (completedFactors.elementalHarmony >= 0.9) {\n      reasoning.push('Excellent elemental harmony with user profile');\n    } else if (completedFactors.elementalHarmony < 0.6) {\n      reasoning.push('Moderate elemental compatibility');\n    }\n\n    if (completedFactors.culturalRelevance >= 0.8) {\n      reasoning.push('High cultural relevance and authenticity');\n    }\n\n    if (completedFactors.seasonalOptimization >= 0.8) {\n      reasoning.push('Well-optimized for current season');\n    }\n\n    // Determine reliability level\n    let reliability: 'high' | 'medium' | 'low';\n    if (overallScore >= 0.85) {\n      reliability = 'high';\n    } else if (overallScore >= 0.65) {\n      reliability = 'medium';\n    } else {\n      reliability = 'low';\n    }\n\n    const confidence: RecommendationConfidence = {\n      overallScore,\n      factors: completedFactors,\n      reasoning,\n      reliability\n    };\n\n    // Cache the confidence calculation\n    this.confidenceCache.set(cacheKey, confidence);\n\n    return confidence;\n  }\n\n  // ========== USER INTERACTION ANALYTICS ==========\n\n  /**\n   * Track user interaction\n   */\n  trackInteraction(interaction: Omit<UserInteraction, 'timestamp'>): void {\n    const fullInteraction: UserInteraction = {\n      ...interaction,\n      timestamp: Date.now()\n    };\n\n    this.userInteractions.push(fullInteraction);\n\n    // Keep only recent interactions\n    if (this.userInteractions.length > this.maxInteractionHistory) {\n      this.userInteractions = this.userInteractions.slice(-this.maxInteractionHistory);\n    }\n\n    logger.debug(`Tracked interaction: ${interaction.type} on ${interaction.target}`);\n  }\n\n  /**\n   * Get user interaction analytics\n   */\n  getInteractionAnalytics(timeWindow?: number): {\n    totalInteractions: number;\n    interactionsByType: Record<string, number>;\n    interactionRate: number;\n    mostInteractedTargets: Array<{ target: string; count: number }>;\n    averageSessionDuration: number;\n  } {\n    const now = Date.now();\n    const windowStart = timeWindow ? now - timeWindow : 0;\n    \n    const relevantInteractions = this.userInteractions.filter(\n      interaction => interaction.timestamp >= windowStart\n    );\n\n    // Count interactions by type\n    const interactionsByType: Record<string, number> = {};\n    const targetCounts: Record<string, number> = {};\n\n    relevantInteractions.forEach(interaction => {\n      interactionsByType[interaction.type] = (interactionsByType[interaction.type] || 0) + 1;\n      targetCounts[interaction.target] = (targetCounts[interaction.target] || 0) + 1;\n    });\n\n    // Get most interacted targets\n    const mostInteractedTargets = Object.entries(targetCounts)\n      .map(([target, count]) => ({ target, count }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 5);\n\n    // Calculate interaction rate (interactions per minute)\n    const timeSpan = timeWindow || (now - (this.userInteractions[0]?.timestamp || now));\n    const interactionRate = relevantInteractions.length / (timeSpan / 60000);\n\n    // Calculate average session duration\n    const sessionStart = this.userInteractions[0]?.timestamp || now;\n    const averageSessionDuration = (now - sessionStart) / 60000; // in minutes\n\n    return {\n      totalInteractions: relevantInteractions.length,\n      interactionsByType,\n      interactionRate,\n      mostInteractedTargets,\n      averageSessionDuration\n    };\n  }\n\n  // ========== METRICS AND REPORTING ==========\n\n  /**\n   * Record comprehensive metrics snapshot\n   */\n  recordMetricsSnapshot(): RecommendationMetrics {\n    const performanceStats = this.performanceMonitor.getStats();\n    const cacheStats = this.recommendationCache.getStats();\n    const interactionAnalytics = this.getInteractionAnalytics(300000); // Last 5 minutes\n\n    const metrics: RecommendationMetrics = {\n      loadTime: performanceStats.current.calculationTime,\n      apiResponseTime: performanceStats.current.averageResponseTime,\n      cacheHitRate: cacheStats.hitRate,\n      recommendationCount: performanceStats.current.recommendationCount,\n      averageConfidenceScore: 0.8, // This would be calculated from actual confidence scores\n      userInteractionRate: interactionAnalytics.interactionRate,\n      timestamp: Date.now()\n    };\n\n    this.metricsHistory.push(metrics);\n\n    // Keep only recent metrics\n    if (this.metricsHistory.length > this.maxHistorySize) {\n      this.metricsHistory = this.metricsHistory.slice(-this.maxHistorySize);\n    }\n\n    return metrics;\n  }\n\n  /**\n   * Get analytics snapshot\n   */\n  getAnalyticsSnapshot(): AnalyticsSnapshot {\n    const metrics = this.recordMetricsSnapshot();\n    const cacheStats = this.recommendationCache.getStats();\n    const recentInteractions = this.userInteractions.slice(-20); // Last 20 interactions\n\n    return {\n      sessionId: this.sessionId,\n      timestamp: Date.now(),\n      metrics,\n      interactions: recentInteractions,\n      cacheStats: {\n        hitRate: cacheStats.hitRate,\n        totalEntries: cacheStats.totalEntries,\n        memoryUsage: cacheStats.memoryUsage\n      }\n    };\n  }\n\n  /**\n   * Get performance trends\n   */\n  getPerformanceTrends(timeWindow?: number): {\n    loadTimeTrend: number[];\n    cacheHitRateTrend: number[];\n    interactionRateTrend: number[];\n    averageLoadTime: number;\n    averageCacheHitRate: number;\n    performanceScore: number;\n  } {\n    const now = Date.now();\n    const windowStart = timeWindow ? now - timeWindow : 0;\n    \n    const relevantMetrics = this.metricsHistory.filter(\n      metric => metric.timestamp >= windowStart\n    );\n\n    if (relevantMetrics.length === 0) {\n      return {\n        loadTimeTrend: [],\n        cacheHitRateTrend: [],\n        interactionRateTrend: [],\n        averageLoadTime: 0,\n        averageCacheHitRate: 0,\n        performanceScore: 0\n      };\n    }\n\n    const loadTimeTrend = relevantMetrics.map(m => m.loadTime);\n    const cacheHitRateTrend = relevantMetrics.map(m => m.cacheHitRate);\n    const interactionRateTrend = relevantMetrics.map(m => m.userInteractionRate);\n\n    const averageLoadTime = loadTimeTrend.reduce((sum, val) => sum + val, 0) / loadTimeTrend.length;\n    const averageCacheHitRate = cacheHitRateTrend.reduce((sum, val) => sum + val, 0) / cacheHitRateTrend.length;\n\n    // Calculate performance score (0-100)\n    const loadTimeScore = Math.max(0, 100 - (averageLoadTime / 10)); // Penalize load times > 1000ms\n    const cacheScore = averageCacheHitRate * 100;\n    const performanceScore = (loadTimeScore * 0.6) + (cacheScore * 0.4);\n\n    return {\n      loadTimeTrend,\n      cacheHitRateTrend,\n      interactionRateTrend,\n      averageLoadTime,\n      averageCacheHitRate,\n      performanceScore\n    };\n  }\n\n  // ========== UTILITY METHODS ==========\n\n  /**\n   * Generate unique session ID\n   */\n  private generateSessionId(): string {\n    return `session_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n  }\n\n  /**\n   * Clear all analytics data\n   */\n  clearAnalytics(): void {\n    this.metricsHistory = [];\n    this.userInteractions = [];\n    this.recommendationCache.clear();\n    this.confidenceCache.clear();\n    this.performanceMonitor.clear();\n    this.sessionId = this.generateSessionId();\n    \n    logger.info('Analytics data cleared');\n  }\n\n  /**\n   * Get cache statistics\n   */\n  getCacheStats() {\n    return {\n      recommendation: this.recommendationCache.getStats(),\n      confidence: this.confidenceCache.getStats()\n    };\n  }\n\n  /**\n   * Destroy service and cleanup\n   */\n  destroy(): void {\n    this.recommendationCache.destroy();\n    this.confidenceCache.destroy();\n    this.clearAnalytics();\n  }\n}\n\n// ========== SINGLETON EXPORT ==========\n\nexport const recommendationAnalytics = new RecommendationAnalyticsService();\nexport default RecommendationAnalyticsService;"],"version":3}