{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/unintentional-any-elimination/__tests__/AutoDocumentationGenerator.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/unintentional-any-elimination/__tests__/AutoDocumentationGenerator.test.ts"],"sourcesContent":["/**\n * Tests for AutoDocumentationGenerator\n */\n\nimport * as fs from 'fs/promises';\nimport { AutoDocumentationGeneratorImpl } from '../AutoDocumentationGenerator';\nimport {\n    AnyTypeCategory,\n    AnyTypeClassification,\n    ClassificationContext,\n    CodeDomain\n} from '../types';\n\n// Mock fs module\njest.mock('fs/promises');\nconst mockFs = fs as jest.Mocked<typeof fs>;\n\ndescribe('AutoDocumentationGenerator', () => {\n  let generator: AutoDocumentationGeneratorImpl;\n  let mockContext: ClassificationContext;\n  let mockClassification: AnyTypeClassification;\n\n  beforeEach(() => {\n    generator = new AutoDocumentationGeneratorImpl();\n\n    mockContext = {\n      filePath: '/test/file.ts',\n      lineNumber: 10,\n      codeSnippet: 'const data: any = response;',\n      surroundingLines: [\n        'function processResponse() {',\n        '  try {',\n        '    const data: any = response;',\n        '    return data.result;',\n        '  } catch (error) {'\n      ],\n      hasExistingComment: false,\n      isInTestFile: false,\n      domainContext: {\n        domain: CodeDomain.SERVICE,\n        intentionalityHints: [],\n        suggestedTypes: [],\n        preservationReasons: ['External API response structure unknown']\n      }\n    };\n\n    mockClassification = {\n      isIntentional: true,\n      confidence: 0.9,\n      reasoning: 'External API response with unknown structure',\n      requiresDocumentation: true,\n      category: AnyTypeCategory.EXTERNAL_API\n    };\n\n    // Reset mocks\n    jest.clearAllMocks();\n  });\n\n  describe('generateDocumentation', () => {\n    it('should generate documentation for intentional any type', async () => {\n      const fileContent = [\n        'function processResponse() {',\n        '  try {',\n        '    const data: any = response;',\n        '    return data.result;',\n        '  } catch (error) {',\n        '    console.error(error);',\n        '  }',\n        '}'\n      ].join('\\n');\n\n      mockFs.readFile.mockResolvedValue(fileContent);\n      mockFs.writeFile.mockResolvedValue();\n\n      const result = await generator.generateDocumentation(mockClassification, mockContext);\n\n      expect(result.success).toBe(true);\n      expect(result.commentAdded).toContain('Intentionally any');\n      expect(result.commentAdded).toContain('External API');\n      expect(mockFs.writeFile).toHaveBeenCalled();\n    });\n\n    it('should not generate documentation for unintentional any type', async () => {\n      const unintentionalClassification = {\n        ...mockClassification,\n        isIntentional: false,\n        requiresDocumentation: false\n      };\n\n      const result = await generator.generateDocumentation(unintentionalClassification, mockContext);\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('not intentional');\n      expect(mockFs.writeFile).not.toHaveBeenCalled();\n    });\n\n    it('should skip documentation if adequate comment exists', async () => {\n      const contextWithComment = {\n        ...mockContext,\n        hasExistingComment: true,\n        existingComment: 'Intentionally any: External API response'\n      };\n\n      const result = await generator.generateDocumentation(mockClassification, contextWithComment);\n\n      expect(result.success).toBe(true);\n      expect(result.commentAdded).toBe('Intentionally any: External API response');\n      expect(mockFs.writeFile).not.toHaveBeenCalled();\n    });\n\n    it('should handle different domain contexts', async () => {\n      const astrologicalContext = {\n        ...mockContext,\n        domainContext: {\n          ...mockContext.domainContext,\n          domain: CodeDomain.ASTROLOGICAL\n        }\n      };\n\n      const astrologicalClassification = {\n        ...mockClassification,\n        category: AnyTypeCategory.EXTERNAL_API\n      };\n\n      const fileContent = 'const positions: any = apiResponse;';\n      mockFs.readFile.mockResolvedValue(fileContent);\n      mockFs.writeFile.mockResolvedValue();\n\n      const result = await generator.generateDocumentation(astrologicalClassification, astrologicalContext);\n\n      expect(result.success).toBe(true);\n      expect(result.commentAdded).toContain('astrological API');\n    });\n\n    it('should add ESLint disable comment', async () => {\n      const fileContent = 'const data: any = response;';\n      mockFs.readFile.mockResolvedValue(fileContent);\n      mockFs.writeFile.mockResolvedValue();\n\n      const result = await generator.generateDocumentation(mockClassification, mockContext);\n\n      expect(result.success).toBe(true);\n      expect(result.eslintDisableAdded).toContain('eslint-disable-next-line');\n      expect(result.eslintDisableAdded).toContain('no-explicit-any');\n    });\n\n    it('should handle file read errors gracefully', async () => {\n      mockFs.readFile.mockRejectedValue(new Error('File not found'));\n\n      const result = await generator.generateDocumentation(mockClassification, mockContext);\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('File not found');\n    });\n\n    it('should preserve indentation when adding comments', async () => {\n      const fileContent = [\n        'class TestClass {',\n        '  processData() {',\n        '    const data: any = response;',\n        '  }',\n        '}'\n      ].join('\\n');\n\n      mockFs.readFile.mockResolvedValue(fileContent);\n      mockFs.writeFile.mockResolvedValue();\n\n      const indentedContext = {\n        ...mockContext,\n        lineNumber: 3\n      };\n\n      const result = await generator.generateDocumentation(mockClassification, indentedContext);\n\n      expect(result.success).toBe(true);\n\n      // Check that writeFile was called with properly indented content\n      const writtenContent = mockFs.writeFile.mock.calls[0][1] as string;\n      const lines = writtenContent.split('\\n');\n\n      // Find the comment line (should be before the data line)\n      const commentLine = lines.find(line => line.includes('Intentionally any'));\n      expect(commentLine).toMatch(/^\\s{4}\\/\\//); // Should have 4 spaces indentation\n    });\n  });\n\n  describe('validateDocumentation', () => {\n    it('should validate existing documentation', async () => {\n      const fileContent = [\n        'function test() {',\n        '  // Intentionally any: External API response',\n        '  // eslint-disable-next-line @typescript-eslint/no-explicit-any',\n        '  const data: any = response;',\n        '}'\n      ].join('\\n');\n\n      mockFs.readFile.mockResolvedValue(fileContent);\n\n      const contextWithComment = {\n        ...mockContext,\n        lineNumber: 4,\n        hasExistingComment: true,\n        existingComment: 'Intentionally any: External API response'\n      };\n\n      const validation = await generator.validateDocumentation(contextWithComment);\n\n      expect(validation.hasComment).toBe(true);\n      expect(validation.commentQuality).toBe('excellent');\n      expect(validation.hasEslintDisable).toBe(true);\n      expect(validation.eslintDisableHasExplanation).toBe(false); // Basic disable comment\n      expect(validation.isComplete).toBe(false); // Missing explanation in ESLint disable\n    });\n\n    it('should detect poor quality comments', async () => {\n      const fileContent = [\n        'function test() {',\n        '  // any',\n        '  const data: any = response;',\n        '}'\n      ].join('\\n');\n\n      mockFs.readFile.mockResolvedValue(fileContent);\n\n      const contextWithPoorComment = {\n        ...mockContext,\n        lineNumber: 3,\n        hasExistingComment: true,\n        existingComment: 'any'\n      };\n\n      const validation = await generator.validateDocumentation(contextWithPoorComment);\n\n      expect(validation.hasComment).toBe(true);\n      expect(validation.commentQuality).toBe('poor');\n      expect(validation.isComplete).toBe(false);\n      expect(validation.suggestions).toContain('Improve comment quality');\n    });\n\n    it('should provide suggestions for improvement', async () => {\n      const fileContent = 'const data: any = response;';\n      mockFs.readFile.mockResolvedValue(fileContent);\n\n      const validation = await generator.validateDocumentation(mockContext);\n\n      expect(validation.hasComment).toBe(false);\n      expect(validation.suggestions).toContain('Add explanatory comment');\n      expect(validation.suggestions).toContain('Add ESLint disable comment');\n    });\n  });\n\n  describe('generateReport', () => {\n    it('should generate basic documentation report', async () => {\n      const report = await generator.generateReport();\n\n      expect(report).toHaveProperty('totalIntentionalAnyTypes');\n      expect(report).toHaveProperty('documentedTypes');\n      expect(report).toHaveProperty('undocumentedTypes');\n      expect(report).toHaveProperty('documentationCoverage');\n      expect(report).toHaveProperty('qualityBreakdown');\n      expect(report).toHaveProperty('recommendations');\n      expect(Array.isArray(report.recommendations)).toBe(true);\n    });\n  });\n\n  describe('template selection', () => {\n    it('should select appropriate template for error handling', async () => {\n      const errorContext = {\n        ...mockContext,\n        codeSnippet: 'catch (error: any) {',\n        domainContext: {\n          ...mockContext.domainContext,\n          domain: CodeDomain.UTILITY\n        }\n      };\n\n      const errorClassification = {\n        ...mockClassification,\n        category: AnyTypeCategory.ERROR_HANDLING\n      };\n\n      const fileContent = 'catch (error: any) {';\n      mockFs.readFile.mockResolvedValue(fileContent);\n      mockFs.writeFile.mockResolvedValue();\n\n      const result = await generator.generateDocumentation(errorClassification, errorContext);\n\n      expect(result.success).toBe(true);\n      expect(result.commentAdded).toContain('Error handling');\n      expect(result.commentAdded).toContain('flexible typing');\n    });\n\n    it('should select appropriate template for test mocks', async () => {\n      const testContext = {\n        ...mockContext,\n        isInTestFile: true,\n        domainContext: {\n          ...mockContext.domainContext,\n          domain: CodeDomain.TEST\n        }\n      };\n\n      const testClassification = {\n        ...mockClassification,\n        category: AnyTypeCategory.TEST_MOCK\n      };\n\n      const fileContent = 'const mockData: any = {};';\n      mockFs.readFile.mockResolvedValue(fileContent);\n      mockFs.writeFile.mockResolvedValue();\n\n      const result = await generator.generateDocumentation(testClassification, testContext);\n\n      expect(result.success).toBe(true);\n      expect(result.commentAdded).toContain('Test mock');\n      expect(result.commentAdded).toContain('comprehensive testing');\n    });\n\n    it('should use fallback template for unknown combinations', async () => {\n      const unknownContext = {\n        ...mockContext,\n        domainContext: {\n          ...mockContext.domainContext,\n          domain: CodeDomain.UTILITY\n        }\n      };\n\n      const unknownClassification = {\n        ...mockClassification,\n        category: AnyTypeCategory.LEGACY_COMPATIBILITY\n      };\n\n      const fileContent = 'const data: any = legacy;';\n      mockFs.readFile.mockResolvedValue(fileContent);\n      mockFs.writeFile.mockResolvedValue();\n\n      const result = await generator.generateDocumentation(unknownClassification, unknownContext);\n\n      expect(result.success).toBe(true);\n      expect(result.commentAdded).toContain('flexible typing');\n    });\n  });\n\n  describe('comment quality assessment', () => {\n    const testCases = [\n      {\n        comment: '',\n        expectedQuality: 'poor'\n      },\n      {\n        comment: 'any',\n        expectedQuality: 'poor'\n      },\n      {\n        comment: 'Intentionally any for API',\n        expectedQuality: 'fair'\n      },\n      {\n        comment: 'Intentionally any: External API response requires flexible typing',\n        expectedQuality: 'good'\n      },\n      {\n        comment: 'Intentionally any: External API response requires flexible typing because the structure varies between different endpoints and versions',\n        expectedQuality: 'excellent'\n      }\n    ];\n\n    testCases.forEach(({ comment, expectedQuality }) => {\n      it(`should assess \"${comment}\" as ${expectedQuality} quality`, async () => {\n        const fileContent = `// ${comment}\\nconst data: any = response;`;\n        mockFs.readFile.mockResolvedValue(fileContent);\n\n        const contextWithComment = {\n          ...mockContext,\n          hasExistingComment: comment.length > 0,\n          existingComment: comment\n        };\n\n        const validation = await generator.validateDocumentation(contextWithComment);\n\n        expect(validation.commentQuality).toBe(expectedQuality);\n      });\n    });\n  });\n});\n"],"version":3}