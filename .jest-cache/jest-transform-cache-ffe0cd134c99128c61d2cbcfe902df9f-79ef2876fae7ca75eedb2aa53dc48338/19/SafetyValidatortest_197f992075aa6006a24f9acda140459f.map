{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/unintentional-any-elimination/__tests__/SafetyValidator.test.ts","mappings":";AAAA;;;GAGG;;;;;;;;;;;;;;;;;;;;;;;;;AAOH,4CAA4C;AAC5C,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;AAG3B,gCAAgC;AAChC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAVhB,iDAAyC;AACzC,uCAAyB;AACzB,wDAAqD;AACrD,oCAA8E;AAI9E,MAAM,YAAY,GAAG,wBAAgD,CAAC;AAItE,MAAM,MAAM,GAAG,EAA4B,CAAC;AAE5C,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,IAAI,SAA0B,CAAC;IAE/B,UAAU,CAAC,GAAG,EAAE;QACd,SAAS,GAAG,IAAI,iCAAe,EAAE,CAAC;QAClC,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mCAAmC,EAAE,GAAG,EAAE;QACjD,IAAI,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAChD,YAAY,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;YAEjC,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,6BAA6B,EAAE,CAAC;YAE/D,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC1C,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACjD,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,WAAW,EAAE,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;YAC5C,MAAM,WAAW,GAAG;;;;OAInB,CAAC;YAEF,YAAY,CAAC,kBAAkB,CAAC,GAAG,EAAE;gBACnC,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,oBAAoB,CAAQ,CAAC;gBACrD,KAAK,CAAC,MAAM,GAAG,WAAW,CAAC;gBAC3B,MAAM,KAAK,CAAC;YACd,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,6BAA6B,EAAE,CAAC;YAE/D,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC3C,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACjD,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YAC9D,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;YAC7C,YAAY,CAAC,kBAAkB,CAAC,GAAG,EAAE;gBACnC,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,SAAS,CAAQ,CAAC;gBAC1C,KAAK,CAAC,IAAI,GAAG,SAAS,CAAC;gBACvB,MAAM,KAAK,CAAC;YACd,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,6BAA6B,EAAE,CAAC;YAE/D,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC3C,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;QAC5C,IAAI,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;YAC9C,YAAY,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;YAEjC,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,uBAAuB,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YAEpE,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC1C,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,WAAW,EAAE,CAAC;YAChD,MAAM,CAAC,MAAM,CAAC,kBAAmB,CAAC,SAAS,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;QACzE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACzD,YAAY,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;YAEjC,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,uBAAuB,CAAC,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,CAAC;YAE1E,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC1C,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAC;YACzC,MAAM,CAAC,MAAM,CAAC,WAAY,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YAC1D,kBAAkB;YAClB,YAAY,CAAC,kBAAkB,CAAC,GAAG,EAAE;gBACnC,0BAA0B;gBAC1B,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBACzB,OAAO,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,GAAG,GAAG,EAAE;oBAC/B,mCAAmC;iBACpC;gBACD,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;YAEH,MAAM,aAAa,GAAG,IAAI,iCAAe,CAAC,KAAK,EAAE;gBAC/C,gBAAgB,EAAE,EAAE,CAAC,qBAAqB;aAC3C,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,uBAAuB,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YAExE,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC3C,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAC3C,KAAK,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CACpE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,IAAI,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC5D,MAAM,aAAa,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;YACxD,MAAM,WAAW,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC,CAAC,CAAC;YAE7D,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YACxC,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;YACtD,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;YAC5C,MAAM,CAAC,aAAa,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;YAChD,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;YAEzC,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,0BAA0B,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;YAEtF,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtC,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC1C,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;YAC9C,MAAM,aAAa,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;YACxD,MAAM,WAAW,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC,CAAC,CAAC;YAE7D,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YAEzC,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,0BAA0B,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;YAEtF,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACvC,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC3C,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,qCAAqC,CAAC,CAAC;QACjF,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;YAC5C,MAAM,aAAa,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;YACxD,MAAM,WAAW,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC;YAE3D,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YACxC,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC,eAAe;YAExD,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,0BAA0B,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;YAEtF,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC3C,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,oCAAoC,CAAC,CAAC;QAChF,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;QACxC,IAAI,CAAC,+CAA+C,EAAE,GAAG,EAAE;YACzD,MAAM,WAAW,GAAoB;gBACnC,QAAQ,EAAE,OAAO;gBACjB,WAAW,EAAE,WAAW;gBACxB,QAAQ,EAAE,SAAS;gBACnB,UAAU,EAAE,CAAC;gBACb,UAAU,EAAE,GAAG;gBACf,kBAAkB,EAAE,IAAI;aACzB,CAAC;YAEF,MAAM,OAAO,GAA0B;gBACrC,QAAQ,EAAE,SAAS;gBACnB,UAAU,EAAE,CAAC;gBACb,WAAW,EAAE,0BAA0B;gBACvC,gBAAgB,EAAE,EAAE;gBACpB,kBAAkB,EAAE,KAAK;gBACzB,YAAY,EAAE,KAAK;gBACnB,aAAa,EAAE;oBACb,MAAM,EAAE,kBAAU,CAAC,OAAO;oBAC1B,mBAAmB,EAAE,EAAE;oBACvB,cAAc,EAAE,EAAE;oBAClB,mBAAmB,EAAE,EAAE;iBACxB;aACF,CAAC;YAEF,MAAM,MAAM,GAAG,SAAS,CAAC,oBAAoB,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;YAEpE,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClC,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;YAChD,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kDAAkD,EAAE,GAAG,EAAE;YAC5D,MAAM,WAAW,GAAoB;gBACnC,QAAQ,EAAE,KAAK;gBACf,WAAW,EAAE,SAAS;gBACtB,QAAQ,EAAE,SAAS;gBACnB,UAAU,EAAE,CAAC;gBACb,UAAU,EAAE,GAAG;gBACf,kBAAkB,EAAE,IAAI;aACzB,CAAC;YAEF,MAAM,YAAY,GAA0B;gBAC1C,QAAQ,EAAE,SAAS;gBACnB,UAAU,EAAE,CAAC;gBACb,WAAW,EAAE,sBAAsB;gBACnC,gBAAgB,EAAE,EAAE;gBACpB,kBAAkB,EAAE,KAAK;gBACzB,YAAY,EAAE,KAAK;gBACnB,aAAa,EAAE;oBACb,MAAM,EAAE,kBAAU,CAAC,OAAO;oBAC1B,mBAAmB,EAAE,EAAE;oBACvB,cAAc,EAAE,EAAE;oBAClB,mBAAmB,EAAE,EAAE;iBACxB;aACF,CAAC;YAEF,MAAM,MAAM,GAAG,SAAS,CAAC,oBAAoB,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;YAEzE,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;YAC7C,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,wBAAwB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrF,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oCAAoC,EAAE,GAAG,EAAE;YAC9C,MAAM,WAAW,GAAoB;gBACnC,QAAQ,EAAE,OAAO;gBACjB,WAAW,EAAE,WAAW;gBACxB,QAAQ,EAAE,cAAc;gBACxB,UAAU,EAAE,CAAC;gBACb,UAAU,EAAE,GAAG;gBACf,kBAAkB,EAAE,IAAI;aACzB,CAAC;YAEF,MAAM,WAAW,GAA0B;gBACzC,QAAQ,EAAE,cAAc;gBACxB,UAAU,EAAE,CAAC;gBACb,WAAW,EAAE,6BAA6B;gBAC1C,gBAAgB,EAAE,EAAE;gBACpB,kBAAkB,EAAE,KAAK;gBACzB,YAAY,EAAE,IAAI;gBAClB,aAAa,EAAE;oBACb,MAAM,EAAE,kBAAU,CAAC,IAAI;oBACvB,mBAAmB,EAAE,EAAE;oBACvB,cAAc,EAAE,EAAE;oBAClB,mBAAmB,EAAE,EAAE;iBACxB;aACF,CAAC;YAEF,MAAM,MAAM,GAAG,SAAS,CAAC,oBAAoB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;YAExE,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,mCAAmC,EAAE,GAAG,EAAE;YAC7C,MAAM,WAAW,GAAoB;gBACnC,QAAQ,EAAE,KAAK;gBACf,WAAW,EAAE,SAAS;gBACtB,QAAQ,EAAE,QAAQ;gBAClB,UAAU,EAAE,CAAC;gBACb,UAAU,EAAE,GAAG;gBACf,kBAAkB,EAAE,IAAI;aACzB,CAAC;YAEF,MAAM,UAAU,GAA0B;gBACxC,QAAQ,EAAE,QAAQ;gBAClB,UAAU,EAAE,CAAC;gBACb,WAAW,EAAE,iDAAiD;gBAC9D,gBAAgB,EAAE,EAAE;gBACpB,kBAAkB,EAAE,KAAK;gBACzB,YAAY,EAAE,KAAK;gBACnB,aAAa,EAAE;oBACb,MAAM,EAAE,kBAAU,CAAC,OAAO;oBAC1B,mBAAmB,EAAE,EAAE;oBACvB,cAAc,EAAE,EAAE;oBAClB,mBAAmB,EAAE,EAAE;iBACxB;aACF,CAAC;YAEF,MAAM,MAAM,GAAG,SAAS,CAAC,oBAAoB,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YAEvE,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACjF,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,2BAA2B,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/F,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,sDAAsD,EAAE,GAAG,EAAE;YAChE,MAAM,WAAW,GAAoB;gBACnC,QAAQ,EAAE,KAAK;gBACf,WAAW,EAAE,SAAS;gBACtB,QAAQ,EAAE,aAAa;gBACvB,UAAU,EAAE,CAAC;gBACb,UAAU,EAAE,GAAG;gBACf,kBAAkB,EAAE,IAAI;aACzB,CAAC;YAEF,MAAM,eAAe,GAA0B;gBAC7C,QAAQ,EAAE,aAAa;gBACvB,UAAU,EAAE,CAAC;gBACb,WAAW,EAAE,+BAA+B;gBAC5C,gBAAgB,EAAE,EAAE;gBACpB,kBAAkB,EAAE,KAAK;gBACzB,YAAY,EAAE,KAAK;gBACnB,aAAa,EAAE;oBACb,MAAM,EAAE,kBAAU,CAAC,OAAO;oBAC1B,mBAAmB,EAAE,EAAE;oBACvB,cAAc,EAAE,EAAE;oBAClB,mBAAmB,EAAE,EAAE;iBACxB;aACF,CAAC;YAEF,MAAM,MAAM,GAAG,SAAS,CAAC,oBAAoB,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC;YAE5E,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,kCAAkC;QAClF,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;QAC5C,IAAI,CAAC,gCAAgC,EAAE,GAAG,EAAE;YAC1C,MAAM,UAAU,GAAG,SAAS,CAAC,mBAAmB,EAAE,CAAC;YAEnD,MAAM,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC,WAAW,EAAE,CAAC;YACpD,MAAM,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC,WAAW,EAAE,CAAC;YACnD,MAAM,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC,WAAW,EAAE,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,2BAA2B,EAAE,GAAG,EAAE;YACrC,MAAM,aAAa,GAAG;gBACpB,kBAAkB,EAAE,GAAG;gBACvB,gBAAgB,EAAE,KAAK;aACxB,CAAC;YAEF,SAAS,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC;YAChD,MAAM,iBAAiB,GAAG,SAAS,CAAC,mBAAmB,EAAE,CAAC;YAE1D,MAAM,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACvD,MAAM,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gCAAgC,EAAE,GAAG,EAAE;QAC9C,IAAI,CAAC,0CAA0C,EAAE,GAAG,EAAE;YACpD,MAAM,aAAa,GAAG,IAAI,iCAAe,CAAC,KAAK,EAAE;gBAC/C,gBAAgB,EAAE,KAAK;aACxB,CAAC,CAAC;YAEH,MAAM,eAAe,GAAoB;gBACvC,QAAQ,EAAE,OAAO;gBACjB,WAAW,EAAE,WAAW;gBACxB,QAAQ,EAAE,SAAS;gBACnB,UAAU,EAAE,CAAC;gBACb,UAAU,EAAE,GAAG;gBACf,kBAAkB,EAAE,IAAI;aACzB,CAAC;YAEF,MAAM,WAAW,GAA0B;gBACzC,QAAQ,EAAE,SAAS;gBACnB,UAAU,EAAE,CAAC;gBACb,WAAW,EAAE,0BAA0B;gBACvC,gBAAgB,EAAE,EAAE;gBACpB,kBAAkB,EAAE,KAAK;gBACzB,YAAY,EAAE,KAAK;gBACnB,aAAa,EAAE;oBACb,MAAM,EAAE,kBAAU,CAAC,OAAO;oBAC1B,mBAAmB,EAAE,EAAE;oBACvB,cAAc,EAAE,EAAE;oBAClB,mBAAmB,EAAE,EAAE;iBACxB;aACF,CAAC;YAEF,MAAM,MAAM,GAAG,aAAa,CAAC,oBAAoB,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;YAChF,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;QACpC,IAAI,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YACpD,MAAM,kBAAkB,GAAG;;;;;OAK1B,CAAC;YAEF,YAAY,CAAC,kBAAkB,CAAC,GAAG,EAAE;gBACnC,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,oBAAoB,CAAQ,CAAC;gBACrD,KAAK,CAAC,MAAM,GAAG,kBAAkB,CAAC;gBAClC,MAAM,KAAK,CAAC;YACd,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,6BAA6B,EAAE,CAAC;YAE/D,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC3C,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACjD,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YACxD,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YACxD,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,gBAAgB,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAC3D,WAAW,CAAC,OAAO,CAAC,iCAAiC,CAAC,GAAG,CAC1D,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEb,YAAY,CAAC,kBAAkB,CAAC,GAAG,EAAE;gBACnC,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,aAAa,CAAQ,CAAC;gBAC9C,KAAK,CAAC,MAAM,GAAG,gBAAgB,CAAC;gBAChC,MAAM,KAAK,CAAC;YACd,CAAC,CAAC,CAAC;YAEH,MAAM,gBAAgB,GAAG,IAAI,iCAAe,CAAC,KAAK,EAAE;gBAClD,iBAAiB,EAAE,CAAC;aACrB,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,6BAA6B,EAAE,CAAC;YAEtE,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/unintentional-any-elimination/__tests__/SafetyValidator.test.ts"],"sourcesContent":["/**\n * SafetyValidator Tests\n * Comprehensive test suite for the Safety Validation System\n */\n\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\nimport { SafetyValidator } from '../SafetyValidator';\nimport { ClassificationContext, CodeDomain, TypeReplacement } from '../types';\n\n// Mock execSync for command execution tests\njest.mock('child_process');\nconst mockExecSync = execSync as jest.MockedFunction<typeof execSync>;\n\n// Mock fs for file system tests\njest.mock('fs');\nconst mockFs = fs as jest.Mocked<typeof fs>;\n\ndescribe('SafetyValidator', () => {\n  let validator: SafetyValidator;\n\n  beforeEach(() => {\n    validator = new SafetyValidator();\n    jest.clearAllMocks();\n  });\n\n  describe('TypeScript Compilation Validation', () => {\n    test('handles successful compilation', async () => {\n      mockExecSync.mockReturnValue('');\n\n      const result = await validator.validateTypeScriptCompilation();\n\n      expect(result.buildSuccessful).toBe(true);\n      expect(result.compilationErrors).toHaveLength(0);\n      expect(result.performanceMetrics).toBeDefined();\n    });\n\n    test('handles compilation errors', async () => {\n      const errorOutput = `\n        src/test.ts(10,5): error TS2322: Type 'string' is not assignable to type 'number'.\n        src/test.ts(15,10): error TS2304: Cannot find name 'unknownVariable'.\n        Found 2 errors.\n      `;\n\n      mockExecSync.mockImplementation(() => {\n        const error = new Error('Compilation failed') as any;\n        error.stdout = errorOutput;\n        throw error;\n      });\n\n      const result = await validator.validateTypeScriptCompilation();\n\n      expect(result.buildSuccessful).toBe(false);\n      expect(result.compilationErrors).toHaveLength(2);\n      expect(result.compilationErrors[0]).toContain('error TS2322');\n      expect(result.compilationErrors[1]).toContain('error TS2304');\n    });\n\n    test('handles compilation timeout', async () => {\n      mockExecSync.mockImplementation(() => {\n        const error = new Error('Timeout') as any;\n        error.code = 'TIMEOUT';\n        throw error;\n      });\n\n      const result = await validator.validateTypeScriptCompilation();\n\n      expect(result.buildSuccessful).toBe(false);\n      expect(result.compilationErrors.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Build Validation After Batch', () => {\n    test('validates build successfully', async () => {\n      mockExecSync.mockReturnValue('');\n\n      const result = await validator.validateBuildAfterBatch(['test.ts']);\n\n      expect(result.buildSuccessful).toBe(true);\n      expect(result.performanceMetrics).toBeDefined();\n      expect(result.performanceMetrics!.buildTime).toBeGreaterThanOrEqual(0);\n    });\n\n    test('includes test validation when requested', async () => {\n      mockExecSync.mockReturnValue('');\n\n      const result = await validator.validateBuildAfterBatch(['test.ts'], true);\n\n      expect(result.buildSuccessful).toBe(true);\n      expect(result.testResults).toBeDefined();\n      expect(result.testResults!.testsPass).toBe(true);\n    });\n\n    test('handles performance threshold violations', async () => {\n      // Mock slow build\n      mockExecSync.mockImplementation(() => {\n        // Simulate slow execution\n        const start = Date.now();\n        while (Date.now() - start < 100) {\n          // Busy wait to simulate slow build\n        }\n        return '';\n      });\n\n      const slowValidator = new SafetyValidator(60000, {\n        maximumBuildTime: 50 // Very low threshold\n      });\n\n      const result = await slowValidator.validateBuildAfterBatch(['test.ts']);\n\n      expect(result.buildSuccessful).toBe(false);\n      expect(result.compilationErrors.some(error =>\n        error.includes('Build time') && error.includes('exceeds threshold')\n      )).toBe(true);\n    });\n  });\n\n  describe('Rollback Validation', () => {\n    test('validates rollback capability successfully', async () => {\n      const originalFiles = new Map([['test.ts', 'test.ts']]);\n      const backupFiles = new Map([['test.ts', 'test.ts.backup']]);\n\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readFileSync.mockReturnValue('backup content');\n      mockFs.mkdirSync.mockReturnValue(undefined);\n      mockFs.writeFileSync.mockReturnValue(undefined);\n      mockFs.rmSync.mockReturnValue(undefined);\n\n      const result = await validator.validateRollbackCapability(originalFiles, backupFiles);\n\n      expect(result.canRollback).toBe(true);\n      expect(result.backupIntegrity).toBe(true);\n      expect(result.rollbackErrors).toHaveLength(0);\n    });\n\n    test('detects missing backup files', async () => {\n      const originalFiles = new Map([['test.ts', 'test.ts']]);\n      const backupFiles = new Map([['test.ts', 'missing.backup']]);\n\n      mockFs.existsSync.mockReturnValue(false);\n\n      const result = await validator.validateRollbackCapability(originalFiles, backupFiles);\n\n      expect(result.canRollback).toBe(false);\n      expect(result.backupIntegrity).toBe(false);\n      expect(result.rollbackErrors).toContain('Backup file missing: missing.backup');\n    });\n\n    test('detects empty backup files', async () => {\n      const originalFiles = new Map([['test.ts', 'test.ts']]);\n      const backupFiles = new Map([['test.ts', 'empty.backup']]);\n\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readFileSync.mockReturnValue(''); // Empty backup\n\n      const result = await validator.validateRollbackCapability(originalFiles, backupFiles);\n\n      expect(result.backupIntegrity).toBe(false);\n      expect(result.rollbackErrors).toContain('Backup file is empty: empty.backup');\n    });\n  });\n\n  describe('Safety Score Calculation', () => {\n    test('calculates safety score for array replacement', () => {\n      const replacement: TypeReplacement = {\n        original: 'any[]',\n        replacement: 'unknown[]',\n        filePath: 'test.ts',\n        lineNumber: 1,\n        confidence: 0.9,\n        validationRequired: true\n      };\n\n      const context: ClassificationContext = {\n        filePath: 'test.ts',\n        lineNumber: 1,\n        codeSnippet: 'const items: any[] = [];',\n        surroundingLines: [],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {\n          domain: CodeDomain.UTILITY,\n          intentionalityHints: [],\n          suggestedTypes: [],\n          preservationReasons: []\n        }\n      };\n\n      const result = validator.calculateSafetyScore(replacement, context);\n\n      expect(result.isValid).toBe(true);\n      expect(result.safetyScore).toBeGreaterThan(0.8);\n      expect(result.validationErrors).toHaveLength(0);\n    });\n\n    test('reduces safety score for error handling contexts', () => {\n      const replacement: TypeReplacement = {\n        original: 'any',\n        replacement: 'unknown',\n        filePath: 'test.ts',\n        lineNumber: 1,\n        confidence: 0.8,\n        validationRequired: true\n      };\n\n      const errorContext: ClassificationContext = {\n        filePath: 'test.ts',\n        lineNumber: 1,\n        codeSnippet: 'catch (error: any) {',\n        surroundingLines: [],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {\n          domain: CodeDomain.UTILITY,\n          intentionalityHints: [],\n          suggestedTypes: [],\n          preservationReasons: []\n        }\n      };\n\n      const result = validator.calculateSafetyScore(replacement, errorContext);\n\n      expect(result.safetyScore).toBeLessThan(0.8);\n      expect(result.warnings.some(w => w.includes('Error handling context'))).toBe(true);\n    });\n\n    test('boosts safety score for test files', () => {\n      const replacement: TypeReplacement = {\n        original: 'any[]',\n        replacement: 'unknown[]',\n        filePath: 'test.test.ts',\n        lineNumber: 1,\n        confidence: 0.8,\n        validationRequired: true\n      };\n\n      const testContext: ClassificationContext = {\n        filePath: 'test.test.ts',\n        lineNumber: 1,\n        codeSnippet: 'const mockData: any[] = [];',\n        surroundingLines: [],\n        hasExistingComment: false,\n        isInTestFile: true,\n        domainContext: {\n          domain: CodeDomain.TEST,\n          intentionalityHints: [],\n          suggestedTypes: [],\n          preservationReasons: []\n        }\n      };\n\n      const result = validator.calculateSafetyScore(replacement, testContext);\n\n      expect(result.safetyScore).toBeGreaterThan(0.8);\n    });\n\n    test('warns about external API contexts', () => {\n      const replacement: TypeReplacement = {\n        original: 'any',\n        replacement: 'unknown',\n        filePath: 'api.ts',\n        lineNumber: 1,\n        confidence: 0.8,\n        validationRequired: true\n      };\n\n      const apiContext: ClassificationContext = {\n        filePath: 'api.ts',\n        lineNumber: 1,\n        codeSnippet: 'const response: any = await fetch(\"/api/data\");',\n        surroundingLines: [],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {\n          domain: CodeDomain.SERVICE,\n          intentionalityHints: [],\n          suggestedTypes: [],\n          preservationReasons: []\n        }\n      };\n\n      const result = validator.calculateSafetyScore(replacement, apiContext);\n\n      expect(result.warnings.some(w => w.includes('External API context'))).toBe(true);\n      expect(result.recommendations.some(r => r.includes('Verify API response types'))).toBe(true);\n    });\n\n    test('handles function parameter replacements with caution', () => {\n      const replacement: TypeReplacement = {\n        original: 'any',\n        replacement: 'unknown',\n        filePath: 'function.ts',\n        lineNumber: 1,\n        confidence: 0.8,\n        validationRequired: true\n      };\n\n      const functionContext: ClassificationContext = {\n        filePath: 'function.ts',\n        lineNumber: 1,\n        codeSnippet: 'function process(data: any) {',\n        surroundingLines: [],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {\n          domain: CodeDomain.UTILITY,\n          intentionalityHints: [],\n          suggestedTypes: [],\n          preservationReasons: []\n        }\n      };\n\n      const result = validator.calculateSafetyScore(replacement, functionContext);\n\n      expect(result.safetyScore).toBeLessThan(0.8); // Function parameters are riskier\n    });\n  });\n\n  describe('Safety Thresholds Management', () => {\n    test('gets current safety thresholds', () => {\n      const thresholds = validator.getSafetyThresholds();\n\n      expect(thresholds.minimumSafetyScore).toBeDefined();\n      expect(thresholds.maximumErrorCount).toBeDefined();\n      expect(thresholds.maximumBuildTime).toBeDefined();\n    });\n\n    test('updates safety thresholds', () => {\n      const newThresholds = {\n        minimumSafetyScore: 0.9,\n        maximumBuildTime: 60000\n      };\n\n      validator.updateSafetyThresholds(newThresholds);\n      const updatedThresholds = validator.getSafetyThresholds();\n\n      expect(updatedThresholds.minimumSafetyScore).toBe(0.9);\n      expect(updatedThresholds.maximumBuildTime).toBe(60000);\n    });\n  });\n\n  describe('Performance Metrics Validation', () => {\n    test('validates acceptable performance metrics', () => {\n      const fastValidator = new SafetyValidator(60000, {\n        maximumBuildTime: 30000\n      });\n\n      const mockReplacement: TypeReplacement = {\n        original: 'any[]',\n        replacement: 'unknown[]',\n        filePath: 'test.ts',\n        lineNumber: 1,\n        confidence: 0.9,\n        validationRequired: true\n      };\n\n      const mockContext: ClassificationContext = {\n        filePath: 'test.ts',\n        lineNumber: 1,\n        codeSnippet: 'const items: any[] = [];',\n        surroundingLines: [],\n        hasExistingComment: false,\n        isInTestFile: false,\n        domainContext: {\n          domain: CodeDomain.UTILITY,\n          intentionalityHints: [],\n          suggestedTypes: [],\n          preservationReasons: []\n        }\n      };\n\n      const result = fastValidator.calculateSafetyScore(mockReplacement, mockContext);\n      expect(result.isValid).toBe(true);\n    });\n  });\n\n  describe('Error Output Parsing', () => {\n    test('parses TypeScript errors correctly', async () => {\n      const complexErrorOutput = `\n        src/file1.ts(10,5): error TS2322: Type 'string' is not assignable to type 'number'.\n        src/file2.ts(15,10): error TS2304: Cannot find name 'unknownVariable'.\n        src/file3.ts(20,15): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n        Found 3 errors.\n      `;\n\n      mockExecSync.mockImplementation(() => {\n        const error = new Error('Compilation failed') as any;\n        error.stdout = complexErrorOutput;\n        throw error;\n      });\n\n      const result = await validator.validateTypeScriptCompilation();\n\n      expect(result.buildSuccessful).toBe(false);\n      expect(result.compilationErrors).toHaveLength(3);\n      expect(result.compilationErrors[0]).toContain('TS2322');\n      expect(result.compilationErrors[1]).toContain('TS2304');\n      expect(result.compilationErrors[2]).toContain('TS2345');\n    });\n\n    test('limits error count to maximum threshold', async () => {\n      const manyErrorsOutput = Array.from({ length: 20 }, (_, i) =>\n        `src/file${i}.ts(${i},5): error TS2322: Type error ${i}.`\n      ).join('\\n');\n\n      mockExecSync.mockImplementation(() => {\n        const error = new Error('Many errors') as any;\n        error.stdout = manyErrorsOutput;\n        throw error;\n      });\n\n      const limitedValidator = new SafetyValidator(60000, {\n        maximumErrorCount: 5\n      });\n\n      const result = await limitedValidator.validateTypeScriptCompilation();\n\n      expect(result.compilationErrors.length).toBeLessThanOrEqual(5);\n    });\n  });\n});\n"],"version":3}