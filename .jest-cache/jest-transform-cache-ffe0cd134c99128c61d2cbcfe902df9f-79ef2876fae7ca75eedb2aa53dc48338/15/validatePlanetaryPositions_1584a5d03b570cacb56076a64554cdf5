5df5796071e8a648d103d7fb810e4a50
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCurrentTransitPositions = exports.validatePlanetaryPositions = exports.getCurrentTransitSign = void 0;
const sun_1 = __importDefault(require("@/data/planets/sun"));
const moon_1 = __importDefault(require("@/data/planets/moon"));
const mercury_1 = __importDefault(require("@/data/planets/mercury"));
const venus_1 = __importDefault(require("@/data/planets/venus"));
const mars_1 = __importDefault(require("@/data/planets/mars"));
const jupiter_1 = __importDefault(require("@/data/planets/jupiter"));
const saturn_1 = __importDefault(require("@/data/planets/saturn"));
const uranus_1 = __importDefault(require("@/data/planets/uranus"));
const neptune_1 = __importDefault(require("@/data/planets/neptune"));
const pluto_1 = __importDefault(require("@/data/planets/pluto"));
// Map planets to their data files
const planetDataMap = {
    Sun: sun_1.default,
    Moon: moon_1.default,
    Mercury: mercury_1.default,
    Venus: venus_1.default,
    Mars: mars_1.default,
    Jupiter: jupiter_1.default,
    Saturn: saturn_1.default,
    Uranus: uranus_1.default,
    Neptune: neptune_1.default,
    Pluto: pluto_1.default,
};
/**
 * Converts a string like "Taurus" to lowercase "taurus" to match ZodiacSign type
 */
const normalizeZodiacSign = (sign) => {
    return sign.toLowerCase();
};
/**
 * Gets current zodiac sign for a planet based on transit dates
 * @param planet Planet name
 * @param date Current date (defaults to now)
 * @returns Zodiac sign or null if no match found
 */
function getCurrentTransitSign(planet, date = new Date()) {
    const planetData = planetDataMap[planet];
    if (!planetData || !planetData.PlanetSpecific)
        return null;
    const { TransitDates } = planetData.PlanetSpecific;
    if (!TransitDates)
        return null;
    const currentDateString = date.toISOString().split('T')[0]; // YYYY-MM-DD format
    for (const [sign, transit] of Object.entries(TransitDates)) {
        if (!transit.Start || !transit.End)
            continue;
        if (currentDateString >= transit.Start && currentDateString <= transit.End) {
            return normalizeZodiacSign(sign);
        }
    }
    return null;
}
exports.getCurrentTransitSign = getCurrentTransitSign;
/**
 * Validates planetary positions against transit dates
 * @param positions Calculated positions
 * @param date Date to validate against
 * @returns Updated positions with corrected values if needed
 */
function validatePlanetaryPositions(positions, date = new Date()) {
    // Clone the positions to avoid mutating the original
    const validatedPositions = { ...positions };
    // Check each planet against its transit dates
    for (const [planet, position] of Object.entries(validatedPositions)) {
        if (!planetDataMap[planet])
            continue;
        const transitSign = getCurrentTransitSign(planet, date);
        if (!transitSign)
            continue;
        // If the calculated sign doesn't match the transit sign, update it
        if (position.sign !== transitSign) {
            console.log(`Correcting ${planet} sign from ${position.sign} to ${transitSign}`);
            // Keep the original degree but update the sign and recalculate longitude
            validatedPositions[planet] = {
                ...position,
                sign: transitSign,
                // Recalculate exact longitude based on new sign
                exactLongitude: getBaseSignLongitude(transitSign) + position.degree + (position.minute / 60 || 0)
            };
        }
    }
    return validatedPositions;
}
exports.validatePlanetaryPositions = validatePlanetaryPositions;
/**
 * Gets the base longitude value for a sign (0 for Aries, 30 for Taurus, etc.)
 */
function getBaseSignLongitude(sign) {
    const signs = [
        'aries', 'taurus', 'gemini', 'cancer', 'leo', 'virgo',
        'libra', 'scorpio', 'sagittarius', 'capricorn', 'aquarius', 'pisces'
    ];
    const index = signs.indexOf(sign);
    return index * 30;
}
/**
 * Gets the current planetary positions based on the transit dates in planet data files
 * This is a more reliable fallback than fixed positions when astronomy calculations fail
 */
function getCurrentTransitPositions() {
    const _currentDate = new Date();
    const positions = {};
    // Current planetary positions (May 16, 2024) from user input
    const hardcodedPositions = {
        Sun: { sign: 'taurus', degree: 27, minute: 12 },
        Moon: { sign: 'capricorn', degree: 25, minute: 36 },
        Mercury: { sign: 'taurus', degree: 13, minute: 17 },
        Venus: { sign: 'aries', degree: 12, minute: 10 },
        Mars: { sign: 'leo', degree: 13, minute: 44 },
        Jupiter: { sign: 'gemini', degree: 24, minute: 53 },
        Saturn: { sign: 'pisces', degree: 29, minute: 25 },
        Uranus: { sign: 'taurus', degree: 27, minute: 17 },
        Neptune: { sign: 'aries', degree: 1, minute: 33 },
        Pluto: { sign: 'aquarius', degree: 3, minute: 46 },
        Ascendant: { sign: 'libra', degree: 23, minute: 47 },
    };
    // Use the hardcoded positions from May 16, 2024
    for (const [planet, data] of Object.entries(hardcodedPositions)) {
        const { sign, degree, minute } = data;
        // Calculate exact longitude
        const exactLongitude = getBaseSignLongitude(sign) + degree + (minute / 60);
        positions[planet] = {
            sign,
            degree,
            minute,
            exactLongitude,
            isRetrograde: planet === 'Pluto', // Only Pluto is retrograde currently
        };
    }
    return positions;
}
exports.getCurrentTransitPositions = getCurrentTransitPositions;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,