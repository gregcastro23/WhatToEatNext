{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/validatePlanetaryPositions.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/validatePlanetaryPositions.ts"],"sourcesContent":["import { ZodiacSign } from '@/types';\nimport sunData from '@/data/planets/sun';\nimport moonData from '@/data/planets/moon';\nimport mercuryData from '@/data/planets/mercury';\nimport venusData from '@/data/planets/venus';\nimport marsData from '@/data/planets/mars';\nimport jupiterData from '@/data/planets/jupiter';\nimport saturnData from '@/data/planets/saturn';\nimport uranusData from '@/data/planets/uranus';\nimport neptuneData from '@/data/planets/neptune';\nimport plutoData from '@/data/planets/pluto';\nimport { PlanetPosition } from './astrologyUtils';\n\ninterface TransitDate {\n  Start: string;\n  End: string;\n}\n\ninterface PlanetDataWithTransits {\n  PlanetSpecific?: {\n    ZodiacTransit?: Record<string, any>;\n    TransitDates?: Record<string, TransitDate>;\n  };\n}\n\n// Map planets to their data files\nconst planetDataMap: Record<string, PlanetDataWithTransits> = {\n  Sun: sunData,\n  Moon: moonData,\n  Mercury: mercuryData,\n  Venus: venusData,\n  Mars: marsData,\n  Jupiter: jupiterData,\n  Saturn: saturnData,\n  Uranus: uranusData,\n  Neptune: neptuneData,\n  Pluto: plutoData,\n};\n\n/**\n * Converts a string like \"Taurus\" to lowercase \"taurus\" to match ZodiacSign type\n */\nconst normalizeZodiacSign = (sign: string): ZodiacSign => {\n  return sign.toLowerCase() as ZodiacSign;\n};\n\n/**\n * Gets current zodiac sign for a planet based on transit dates\n * @param planet Planet name\n * @param date Current date (defaults to now)\n * @returns Zodiac sign or null if no match found\n */\nexport function getCurrentTransitSign(planet: string, date: Date = new Date()): ZodiacSign | null {\n  const planetData = planetDataMap[planet];\n  if (!planetData || !planetData.PlanetSpecific) return null;\n\n  const { TransitDates } = planetData.PlanetSpecific;\n  if (!TransitDates) return null;\n\n  const currentDateString = date.toISOString().split('T')[0]; // YYYY-MM-DD format\n\n  for (const [sign, transit] of Object.entries(TransitDates)) {\n    if (!transit.Start || !transit.End) continue;\n\n    if (currentDateString >= transit.Start && currentDateString <= transit.End) {\n      return normalizeZodiacSign(sign);\n    }\n  }\n\n  return null;\n}\n\n/**\n * Validates planetary positions against transit dates\n * @param positions Calculated positions\n * @param date Date to validate against\n * @returns Updated positions with corrected values if needed\n */\nexport function validatePlanetaryPositions(\n  positions: Record<string, PlanetPosition>,\n  date: Date = new Date()\n): Record<string, PlanetPosition> {\n  // Clone the positions to avoid mutating the original\n  const validatedPositions = { ...positions };\n\n  // Check each planet against its transit dates\n  for (const [planet, position] of Object.entries(validatedPositions)) {\n    if (!planetDataMap[planet]) continue;\n\n    const transitSign = getCurrentTransitSign(planet, date);\n    if (!transitSign) continue;\n\n    // If the calculated sign doesn't match the transit sign, update it\n    if (position.sign !== transitSign) {\n      console.log(`Correcting ${planet} sign from ${position.sign} to ${transitSign}`);\n      \n      // Keep the original degree but update the sign and recalculate longitude\n      validatedPositions[planet] = {\n        ...position,\n        sign: transitSign,\n        // Recalculate exact longitude based on new sign\n        exactLongitude: getBaseSignLongitude(transitSign) + position.degree + (position.minute / 60 || 0)\n      };\n    }\n  }\n\n  return validatedPositions;\n}\n\n/**\n * Gets the base longitude value for a sign (0 for Aries, 30 for Taurus, etc.)\n */\nfunction getBaseSignLongitude(sign: ZodiacSign): number {\n  const signs: ZodiacSign[] = [\n    'aries', 'taurus', 'gemini', 'cancer', 'leo', 'virgo',\n    'libra', 'scorpio', 'sagittarius', 'capricorn', 'aquarius', 'pisces'\n  ];\n  \n  const index = signs.indexOf(sign);\n  return index * 30;\n}\n\n/**\n * Gets the current planetary positions based on the transit dates in planet data files\n * This is a more reliable fallback than fixed positions when astronomy calculations fail\n */\nexport function getCurrentTransitPositions(): Record<string, PlanetPosition> {\n  const _currentDate = new Date();\n  const positions: Record<string, PlanetPosition> = {};\n\n  // Current planetary positions (May 16, 2024) from user input\n  const hardcodedPositions: Record<string, {sign: ZodiacSign, degree: number, minute: number}> = {\n    Sun: { sign: 'taurus', degree: 27, minute: 12 },\n    Moon: { sign: 'capricorn', degree: 25, minute: 36 },\n    Mercury: { sign: 'taurus', degree: 13, minute: 17 },\n    Venus: { sign: 'aries', degree: 12, minute: 10 },\n    Mars: { sign: 'leo', degree: 13, minute: 44 },\n    Jupiter: { sign: 'gemini', degree: 24, minute: 53 },\n    Saturn: { sign: 'pisces', degree: 29, minute: 25 },\n    Uranus: { sign: 'taurus', degree: 27, minute: 17 },\n    Neptune: { sign: 'aries', degree: 1, minute: 33 },\n    Pluto: { sign: 'aquarius', degree: 3, minute: 46 },\n    Ascendant: { sign: 'libra', degree: 23, minute: 47 },\n  };\n\n  // Use the hardcoded positions from May 16, 2024\n  for (const [planet, data] of Object.entries(hardcodedPositions)) {\n    const { sign, degree, minute } = data;\n    \n    // Calculate exact longitude\n    const exactLongitude = getBaseSignLongitude(sign) + degree + (minute / 60);\n    \n    positions[planet] = {\n      sign,\n      degree,\n      minute,\n      exactLongitude,\n      isRetrograde: planet === 'Pluto', // Only Pluto is retrograde currently\n    };\n  }\n\n  return positions;\n} "],"version":3}