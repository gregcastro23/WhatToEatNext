{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/contexts/AlchemicalContext/types.ts","mappings":";AAAA,YAAY,CAAC","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/contexts/AlchemicalContext/types.ts"],"sourcesContent":["'use client';\n\nimport { \n  ElementalProperties,\n  AlchemicalProperties,\n  CelestialPosition,\n  ZodiacSign,\n  LunarPhase,\n  Planet,\n  PlanetaryAlignment\n} from '@/types/celestial';\n\n// Import types directly from alchemical types\nimport { \n  AlchemicalState as BaseAlchemicalState, \n  AstrologicalState as BaseAstrologicalState \n} from '@/types/alchemical';\n\n// Type for planetary positions\nexport type PlanetaryPositionsType = Record<string, CelestialPosition>;\n\n// Re-export the types with proper names\nexport type AlchemicalState = BaseAlchemicalState;\nexport type AstrologicalState = BaseAstrologicalState;\n\n// AlchemicalContextType interface\nexport interface AlchemicalContextType {\n  state: AlchemicalState;\n  dispatch: (action: unknown) => void;\n  planetaryPositions: Record<string, unknown>;\n  isDaytime: boolean;\n  updatePlanetaryPositions: (positions: Record<string, unknown>) => void;\n  refreshPlanetaryPositions: () => Promise<Record<string, unknown>>;\n  setDaytime: (isDaytime: boolean) => void;\n  updateState: (state: Partial<AlchemicalState>) => void;\n} "],"version":3}