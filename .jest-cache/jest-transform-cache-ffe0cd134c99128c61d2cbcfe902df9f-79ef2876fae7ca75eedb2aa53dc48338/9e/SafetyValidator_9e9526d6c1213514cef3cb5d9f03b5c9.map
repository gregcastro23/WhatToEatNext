{"file":"/Users/GregCastro/Desktop/WhatToEatNext/backups/conservative-wave-2025-08-11T05-21-33-410Z/src/services/campaign/unintentional-any-elimination/SafetyValidator.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/backups/conservative-wave-2025-08-11T05-21-33-410Z/src/services/campaign/unintentional-any-elimination/SafetyValidator.ts"],"sourcesContent":["/**\n * Safety Validation System\n * Comprehensive safety validation for type replacements\n *\n * Features:\n * - TypeScript compilation checking\n * - Build validation after batch operations\n * - Rollback verification to ensure exact restoration\n * - Safety scoring system for replacement confidence\n */\n\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport {\n    ClassificationContext,\n    TypeReplacement\n} from './types';\n\nexport interface SafetyValidationResult {\n    isValid: boolean;\n    safetyScore: number;\n    validationErrors: string[];\n    warnings: string[];\n    recommendations: string[];\n}\n\nexport interface BuildValidationResult {\n    buildSuccessful: boolean;\n    compilationErrors: string[];\n    lintingWarnings: string[];\n    testResults?: TestValidationResult;\n    performanceMetrics?: PerformanceMetrics;\n}\n\nexport interface TestValidationResult {\n    testsPass: boolean;\n    failedTests: string[];\n    testCoverage?: number;\n}\n\nexport interface PerformanceMetrics {\n    buildTime: number;\n    memoryUsage: number;\n    bundleSize?: number;\n}\n\nexport interface RollbackValidationResult {\n    canRollback: boolean;\n    backupIntegrity: boolean;\n    rollbackErrors: string[];\n    restorationVerified: boolean;\n}\n\nexport class SafetyValidator {\n    private validationTimeout: number;\n    private safetyThresholds: SafetyThresholds;\n    private buildCommand: string;\n    private testCommand: string;\n\n    constructor(\n        validationTimeout = 60000, // 1 minute default\n        safetyThresholds: Partial<SafetyThresholds> = {},\n        buildCommand = 'yarn tsc --noEmit --skipLibCheck',\n        testCommand = 'yarn test --passWithNoTests --silent'\n    ) {\n        this.validationTimeout = validationTimeout;\n        this.safetyThresholds = {\n            minimumSafetyScore: 0.7,\n            maximumErrorCount: 10,\n            maximumBuildTime: 30000, // 30 seconds\n            minimumTestCoverage: 0.8,\n            ...safetyThresholds\n        };\n        this.buildCommand = buildCommand;\n        this.testCommand = testCommand;\n    }\n\n    /**\n     * Comprehensive TypeScript compilation checking\n     */\n    async validateTypeScriptCompilation(): Promise<BuildValidationResult> {\n        const startTime = Date.now();\n\n        try {\n            const output = execSync(this.buildCommand, {\n                encoding: 'utf8',\n                stdio: 'pipe',\n                timeout: this.validationTimeout\n            });\n\n            const buildTime = Date.now() - startTime;\n\n            return {\n                buildSuccessful: true,\n                compilationErrors: [],\n                lintingWarnings: [],\n                performanceMetrics: {\n                    buildTime,\n                    memoryUsage: process.memoryUsage().heapUsed\n                }\n            };\n\n        } catch (error) {\n            const buildTime = Date.now() - startTime;\n            const errorOutput = this.extractErrorOutput(error);\n            const compilationErrors = this.parseTypeScriptErrors(errorOutput);\n\n            return {\n                buildSuccessful: false,\n                compilationErrors,\n                lintingWarnings: [],\n                performanceMetrics: {\n                    buildTime,\n                    memoryUsage: process.memoryUsage().heapUsed\n                }\n            };\n        }\n    }\n\n    /**\n     * Build validation after batch operations\n     */\n    async validateBuildAfterBatch(\n        modifiedFiles: string[],\n        includeTests = false\n    ): Promise<BuildValidationResult> {\n        // First, validate TypeScript compilation\n        const compilationResult = await this.validateTypeScriptCompilation();\n\n        if (!compilationResult.buildSuccessful) {\n            return compilationResult;\n        }\n\n        // If compilation passes and tests are requested, run tests\n        if (includeTests) {\n            const testResult = await this.validateTests(modifiedFiles);\n            compilationResult.testResults = testResult;\n        }\n\n        // Validate performance metrics\n        const performanceValid = this.validatePerformanceMetrics(\n            compilationResult.performanceMetrics!\n        );\n\n        if (!performanceValid.isValid) {\n            compilationResult.buildSuccessful = false;\n            compilationResult.compilationErrors.push(...performanceValid.validationErrors);\n        }\n\n        return compilationResult;\n    }\n\n    /**\n     * Rollback verification to ensure exact restoration\n     */\n    async validateRollbackCapability(\n        originalFiles: Map<string, string>,\n        backupFiles: Map<string, string>\n    ): Promise<RollbackValidationResult> {\n        const rollbackErrors: string[] = [];\n        let backupIntegrity = true;\n        let canRollback = true;\n\n        try {\n            // Verify all backup files exist and are readable\n            for (const [filePath, backupPath] of backupFiles.entries()) {\n                if (!fs.existsSync(backupPath)) {\n                    rollbackErrors.push(`Backup file missing: ${backupPath}`);\n                    backupIntegrity = false;\n                    canRollback = false;\n                    continue;\n                }\n\n                try {\n                    const backupContent = fs.readFileSync(backupPath, 'utf8');\n                    if (backupContent.length === 0) {\n                        rollbackErrors.push(`Backup file is empty: ${backupPath}`);\n                        backupIntegrity = false;\n                    }\n                } catch (error) {\n                    rollbackErrors.push(`Cannot read backup file: ${backupPath} - ${error}`);\n                    backupIntegrity = false;\n                    canRollback = false;\n                }\n            }\n\n            // Test rollback operation on a temporary copy\n            const restorationVerified = await this.testRollbackOperation(\n                originalFiles,\n                backupFiles\n            );\n\n            return {\n                canRollback,\n                backupIntegrity,\n                rollbackErrors,\n                restorationVerified\n            };\n\n        } catch (error) {\n            rollbackErrors.push(`Rollback validation failed: ${error}`);\n            return {\n                canRollback: false,\n                backupIntegrity: false,\n                rollbackErrors,\n                restorationVerified: false\n            };\n        }\n    }\n\n    /**\n     * Safety scoring system for replacement confidence\n     */\n    calculateSafetyScore(\n        replacement: TypeReplacement,\n        context: ClassificationContext\n    ): SafetyValidationResult {\n        let safetyScore = replacement.confidence; // Base score from classification\n        const validationErrors: string[] = [];\n        const warnings: string[] = [];\n        const recommendations: string[] = [];\n\n        // Context-based safety adjustments\n        const contextScore = this.evaluateContextSafety(context);\n        safetyScore = (safetyScore + contextScore.score) / 2;\n        warnings.push(...contextScore.warnings);\n        recommendations.push(...contextScore.recommendations);\n\n        // Replacement pattern safety\n        const patternScore = this.evaluateReplacementPatternSafety(replacement);\n        safetyScore = (safetyScore + patternScore.score) / 2;\n        warnings.push(...patternScore.warnings);\n\n        // File type safety\n        const fileScore = this.evaluateFileTypeSafety(replacement.filePath);\n        safetyScore = (safetyScore + fileScore.score) / 2;\n        warnings.push(...fileScore.warnings);\n\n        // Validation requirements\n        if (replacement.validationRequired && safetyScore < this.safetyThresholds.minimumSafetyScore) {\n            validationErrors.push(\n                `Safety score ${safetyScore.toFixed(2)} below required threshold ${this.safetyThresholds.minimumSafetyScore}`\n            );\n        }\n\n        // Final safety assessment\n        const isValid = validationErrors.length === 0 &&\n                        safetyScore >= this.safetyThresholds.minimumSafetyScore;\n\n        if (!isValid) {\n            recommendations.push('Consider manual review for this replacement');\n            recommendations.push('Add explanatory comments if replacement is intentional');\n        }\n\n        return {\n            isValid,\n            safetyScore: Math.max(0, Math.min(1, safetyScore)),\n            validationErrors,\n            warnings,\n            recommendations\n        };\n    }\n\n    /**\n     * Validate performance metrics against thresholds\n     */\n    private validatePerformanceMetrics(metrics: PerformanceMetrics): SafetyValidationResult {\n        const validationErrors: string[] = [];\n        const warnings: string[] = [];\n        const recommendations: string[] = [];\n\n        // Build time validation\n        if (metrics.buildTime > this.safetyThresholds.maximumBuildTime) {\n            validationErrors.push(\n                `Build time ${metrics.buildTime}ms exceeds threshold ${this.safetyThresholds.maximumBuildTime}ms`\n            );\n            recommendations.push('Consider reducing batch size to improve build performance');\n        } else if (metrics.buildTime > this.safetyThresholds.maximumBuildTime * 0.8) {\n            warnings.push('Build time approaching threshold, monitor performance');\n        }\n\n        // Memory usage validation\n        const memoryMB = metrics.memoryUsage / (1024 * 1024);\n        if (memoryMB > 512) { // 512MB threshold\n            warnings.push(`High memory usage: ${memoryMB.toFixed(1)}MB`);\n            recommendations.push('Consider running garbage collection between batches');\n        }\n\n        return {\n            isValid: validationErrors.length === 0,\n            safetyScore: validationErrors.length === 0 ? 1.0 : 0.5,\n            validationErrors,\n            warnings,\n            recommendations\n        };\n    }\n\n    /**\n     * Validate tests for modified files\n     */\n    private async validateTests(modifiedFiles: string[]): Promise<TestValidationResult> {\n        try {\n            // Run tests for modified files\n            const testPattern = modifiedFiles\n                .filter(file => !file.includes('.test.') && !file.includes('__tests__'))\n                .map(file => file.replace(/\\.ts$/, '.test.ts'))\n                .join('|');\n\n            if (!testPattern) {\n                return {\n                    testsPass: true,\n                    failedTests: []\n                };\n            }\n\n            const output = execSync(`${this.testCommand} --testPathPattern=\"${testPattern}\"`, {\n                encoding: 'utf8',\n                stdio: 'pipe',\n                timeout: this.validationTimeout\n            });\n\n            return {\n                testsPass: true,\n                failedTests: []\n            };\n\n        } catch (error) {\n            const errorOutput = this.extractErrorOutput(error);\n            const failedTests = this.parseTestFailures(errorOutput);\n\n            return {\n                testsPass: false,\n                failedTests\n            };\n        }\n    }\n\n    /**\n     * Test rollback operation without actually modifying files\n     */\n    private async testRollbackOperation(\n        originalFiles: Map<string, string>,\n        backupFiles: Map<string, string>\n    ): Promise<boolean> {\n        try {\n            // Create temporary copies to test rollback\n            const tempDir = path.join(process.cwd(), '.temp-rollback-test');\n\n            if (!fs.existsSync(tempDir)) {\n                fs.mkdirSync(tempDir, { recursive: true });\n            }\n\n            let allRestored = true;\n\n            for (const [originalPath, backupPath] of backupFiles.entries()) {\n                try {\n                    const backupContent = fs.readFileSync(backupPath, 'utf8');\n                    const tempFilePath = path.join(tempDir, path.basename(originalPath));\n\n                    // Write backup content to temp file\n                    fs.writeFileSync(tempFilePath, backupContent, 'utf8');\n\n                    // Verify content matches\n                    const restoredContent = fs.readFileSync(tempFilePath, 'utf8');\n                    if (restoredContent !== backupContent) {\n                        allRestored = false;\n                        break;\n                    }\n                } catch (error) {\n                    allRestored = false;\n                    break;\n                }\n            }\n\n            // Cleanup temp directory\n            try {\n                fs.rmSync(tempDir, { recursive: true, force: true });\n            } catch (error) {\n                // Ignore cleanup errors\n            }\n\n            return allRestored;\n\n        } catch (error) {\n            return false;\n        }\n    }\n\n    /**\n     * Evaluate context safety factors\n     */\n    private evaluateContextSafety(context: ClassificationContext): {\n        score: number;\n        warnings: string[];\n        recommendations: string[];\n    } {\n        let score = 0.8; // Base context score\n        const warnings: string[] = [];\n        const recommendations: string[] = [];\n\n        // Error handling contexts are riskier\n        if (context.codeSnippet.toLowerCase().includes('catch') ||\n            context.codeSnippet.toLowerCase().includes('error')) {\n            score -= 0.3;\n            warnings.push('Error handling context detected - higher risk');\n            recommendations.push('Consider preserving any types in error handling');\n        }\n\n        // External API contexts are riskier\n        if (context.codeSnippet.toLowerCase().includes('api') ||\n            context.codeSnippet.toLowerCase().includes('fetch') ||\n            context.codeSnippet.toLowerCase().includes('response')) {\n            score -= 0.2;\n            warnings.push('External API context detected');\n            recommendations.push('Verify API response types before replacement');\n        }\n\n        // Test files are safer\n        if (context.isInTestFile) {\n            score += 0.1;\n        }\n\n        // Existing comments indicate intentional usage\n        if (context.hasExistingComment) {\n            score -= 0.2;\n            warnings.push('Existing comment detected - may be intentional');\n            recommendations.push('Review existing comment before replacement');\n        }\n\n        return {\n            score: Math.max(0, Math.min(1, score)),\n            warnings,\n            recommendations\n        };\n    }\n\n    /**\n     * Evaluate replacement pattern safety\n     */\n    private evaluateReplacementPatternSafety(replacement: TypeReplacement): {\n        score: number;\n        warnings: string[];\n    } {\n        let score = 0.8; // Base pattern score\n        const warnings: string[] = [];\n\n        // Array replacements are very safe\n        if (replacement.original === 'any[]' && replacement.replacement === 'unknown[]') {\n            score = 0.95;\n        }\n\n        // Record replacements are generally safe\n        else if (replacement.original.includes('Record<string, any>') &&\n                 replacement.replacement.includes('Record<string, unknown>')) {\n            score = 0.9;\n        }\n\n        // Function parameter replacements are riskier\n        else if (replacement.original.includes('(') && replacement.original.includes(': any')) {\n            score = 0.6;\n            warnings.push('Function parameter replacement - verify usage patterns');\n        }\n\n        // Return type replacements are moderately risky\n        else if (replacement.original.includes('): any')) {\n            score = 0.7;\n            warnings.push('Return type replacement - verify return statements');\n        }\n\n        // Generic replacements need careful consideration\n        else if (replacement.original.includes('<any>')) {\n            score = 0.65;\n            warnings.push('Generic type replacement - verify type constraints');\n        }\n\n        return { score, warnings };\n    }\n\n    /**\n     * Evaluate file type safety\n     */\n    private evaluateFileTypeSafety(filePath: string): {\n        score: number;\n        warnings: string[];\n    } {\n        let score = 0.8; // Base file score\n        const warnings: string[] = [];\n\n        // Test files are safer to modify\n        if (filePath.includes('.test.') || filePath.includes('__tests__')) {\n            score = 0.9;\n        }\n\n        // Type definition files are riskier\n        else if (filePath.endsWith('.d.ts')) {\n            score = 0.6;\n            warnings.push('Type definition file - changes may affect multiple files');\n        }\n\n        // Configuration files are riskier\n        else if (filePath.includes('config') || filePath.includes('Config')) {\n            score = 0.65;\n            warnings.push('Configuration file - verify dynamic property access');\n        }\n\n        // Core library files are riskier\n        else if (filePath.includes('node_modules') || filePath.includes('lib/')) {\n            score = 0.5;\n            warnings.push('Library file - avoid modifications');\n        }\n\n        return { score, warnings };\n    }\n\n    /**\n     * Extract error output from command execution\n     */\n    private extractErrorOutput(error: any): string {\n        if (error && typeof error === 'object') {\n            return error.stdout || error.stderr || error.message || String(error);\n        }\n        return String(error);\n    }\n\n    /**\n     * Parse TypeScript errors from compiler output\n     */\n    private parseTypeScriptErrors(output: string): string[] {\n        const lines = output.split('\\n');\n        const errors = lines\n            .filter(line => line.includes('error TS'))\n            .map(line => line.trim())\n            .filter(line => line.length > 0);\n\n        return errors.slice(0, this.safetyThresholds.maximumErrorCount);\n    }\n\n    /**\n     * Parse test failures from test runner output\n     */\n    private parseTestFailures(output: string): string[] {\n        const lines = output.split('\\n');\n        const failures = lines\n            .filter(line =>\n                line.includes('FAIL') ||\n                line.includes('✕') ||\n                line.includes('failed')\n            )\n            .map(line => line.trim())\n            .filter(line => line.length > 0);\n\n        return failures.slice(0, 10); // Limit to 10 failures\n    }\n\n    /**\n     * Get current safety thresholds\n     */\n    getSafetyThresholds(): SafetyThresholds {\n        return { ...this.safetyThresholds };\n    }\n\n    /**\n     * Update safety thresholds\n     */\n    updateSafetyThresholds(newThresholds: Partial<SafetyThresholds>): void {\n        this.safetyThresholds = { ...this.safetyThresholds, ...newThresholds };\n    }\n}\n\nexport interface SafetyThresholds {\n    minimumSafetyScore: number;\n    maximumErrorCount: number;\n    maximumBuildTime: number;\n    minimumTestCoverage: number;\n}\n\nexport default SafetyValidator;\n"],"version":3}