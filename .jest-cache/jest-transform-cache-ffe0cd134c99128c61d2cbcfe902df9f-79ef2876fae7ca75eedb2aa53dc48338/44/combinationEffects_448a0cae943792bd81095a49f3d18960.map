{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/calculations/combinationEffects.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/calculations/combinationEffects.ts"],"sourcesContent":["import type { \n  ElementalProperties, \n  CombinationEffect, \n  EffectType, \n  LunarPhase\n} from '@/types/alchemy';\nimport type { Element } from '@/types/celestial';\nimport { ingredientMappings } from '@/utils/elementalMappings/ingredients';\nimport { ELEMENT_COMBINATIONS } from '@/utils/constants/elements';\n\ntype CookingMethod = 'simmered' | 'infused' | 'raw' | 'baked' | 'fried' | 'grilled';\ntype Season = 'spring' | 'summer' | 'fall' | 'winter' | 'all';\ntype Temperature = 'hot' | 'cold' | 'neutral';\n\ninterface CombinationRule {\n  ingredients: string[];\n  effect: EffectType;\n  modifier: number;\n  elements?: Partial<ElementalProperties>;\n  conditions?: {\n    cookingMethod?: CookingMethod[];\n    season?: Season[];\n    temperature?: Temperature;\n  };\n  notes?: string;\n}\n\ninterface CalculateEffectsParams {\n  ingredients: string[];\n  elementalProperties: ElementalProperties;\n  cookingMethod?: CookingMethod;\n  season?: Season;\n  temperature?: Temperature;\n  lunarPhase?: LunarPhase;\n}\n\n// Classic flavor combinations and their effects\nconst COMBINATION_RULES: CombinationRule[] = [\n  {\n    ingredients: ['ginger', 'garlic'],\n    effect: 'amplify' as EffectType,\n    modifier: 1.3,\n    elements: { Fire: 0.2 },\n    notes: 'Classic warming combination'\n  },\n  {\n    ingredients: ['cinnamon', 'cardamom', 'clove'],\n    effect: 'amplify' as EffectType,\n    modifier: 1.4,\n    elements: { Fire: 0.3, Air: 0.1 },\n    notes: 'Warming spice blend'\n  },\n  // ... other rules remain the same\n];\n\n// Create a normalization function at the top of the file\nconst normalizeLunarPhase = (phase: LunarPhase): string => {\n  // Convert spaces to underscores for consistent lookup\n  return phase.replace(/\\s+/g, '_');\n};\n\nexport function calculateCombinationEffects({\n  ingredients,\n  elementalProperties,\n  cookingMethod,\n  season,\n  temperature,\n  lunarPhase\n}: CalculateEffectsParams): CombinationEffect[] {\n  const effects: CombinationEffect[] = [];\n\n  try {\n    // Apply lunar phase influences\n    if (lunarPhase) {\n      const lunarEffect = calculateLunarEffect(ingredients, lunarPhase);\n      if (lunarEffect) {\n        effects.push(lunarEffect);\n      }\n    }\n\n    // Check for known combinations\n    COMBINATION_RULES.forEach(rule => {\n      if (hasIngredientCombination(ingredients, rule.ingredients)) {\n        // Verify conditions if they exist\n        if (rule.conditions) {\n          const meetsConditions = (\n            (!rule.conditions.cookingMethod || !cookingMethod || rule.conditions.cookingMethod.includes(cookingMethod)) &&\n            (!rule.conditions.season || !season || rule.conditions.season.includes(season)) &&\n            (!rule.conditions.temperature || !temperature || rule.conditions.temperature === temperature)\n          );\n\n          if (!meetsConditions) return;\n        }\n\n        const effect: CombinationEffect = {\n          type: rule.effect,\n          strength: rule.modifier,\n          description: rule.notes || '',\n          elements: rule.elements ? Object.keys(rule.elements) as Element[] : []\n        };\n\n        effects.push(effect);\n      }\n    });\n\n    // Check elemental interactions\n    effects.push(...calculateElementalInteractions(ingredients));\n\n    return effects.sort((a, b) => ((b as Record<string, unknown>)?.modifier || (b as Record<string, unknown>)?.strength || 0) - ((a as Record<string, unknown>)?.modifier || (a as Record<string, unknown>)?.strength || 0));\n  } catch (error) {\n    console.error('Error calculating combination effects:', error);\n    return [];\n  }\n}\n\nconst hasIngredientCombination = (\n  recipeIngredients: string[],\n  combinationIngredients: string[]\n): boolean => {\n  return combinationIngredients.every(ingredient =>\n    recipeIngredients.some(recipeIng =>\n      recipeIng.toLowerCase().includes(ingredient.toLowerCase())\n    )\n  );\n};\n\nconst calculateElementalInteractions = (\n  ingredients: string[]\n): CombinationEffect[] => {\n  const effects: CombinationEffect[] = [];\n  const ingredientPairs = getPairs(ingredients);\n\n  ingredientPairs.forEach(([ing1, ing2]) => {\n    const elem1 = ingredientMappings[ing1]?.elementalProperties;\n    const elem2 = ingredientMappings[ing2]?.elementalProperties;\n\n    if (!elem1 || !elem2) return;\n\n    if (isHarmoniousCombination(elem1, elem2)) {\n      effects.push({\n        ingredients: [ing1, ing2],\n        type: 'synergy' as EffectType,\n        strength: 1.2,\n        elements: ['Fire'] as Element[],\n        description: 'Harmonious elemental combination'\n      } as any);\n    }\n\n    if (isAntagonisticCombination(elem1, elem2)) {\n      effects.push({\n        ingredients: [ing1, ing2],\n        type: 'conflict' as EffectType,\n        strength: 0.8,\n        elements: ['Water'] as Element[],\n        description: 'Conflicting elemental combination'\n      } as any);\n    }\n  });\n\n  return effects;\n};\n\nconst getPairs = <T>(array: T[]): [T, T][] => {\n  const pairs: [T, T][] = [];\n  for (let i = 0; i < array.length; i++) {\n    for (let j = i + 1; j < array.length; j++) {\n      pairs.push([array[i], array[j]]);\n    }\n  }\n  return pairs;\n};\n\nconst isHarmoniousCombination = (\n  elem1: ElementalProperties,\n  elem2: ElementalProperties\n): boolean => {\n  return ELEMENT_COMBINATIONS.harmonious.some(([e1, e2]) =>\n    (getDominantElement(elem1) === e1 && getDominantElement(elem2) === e2) ||\n    (getDominantElement(elem1) === e2 && getDominantElement(elem2) === e1)\n  );\n};\n\nconst isAntagonisticCombination = (\n  elem1: ElementalProperties,\n  elem2: ElementalProperties\n): boolean => {\n  const antagonistic = (ELEMENT_COMBINATIONS as Record<string, unknown>)?.antagonistic || [];\n  return antagonistic.some(([e1, e2]: [any, any]) =>\n    (getDominantElement(elem1) === e1 && getDominantElement(elem2) === e2) ||\n    (getDominantElement(elem1) === e2 && getDominantElement(elem2) === e1)\n  );\n};\n\nconst getDominantElement = (elements: ElementalProperties): Element => {\n  return Object.entries(elements)\n    .sort(([, a], [, b]) => b - a)[0][0] as Element;\n};\n\nexport const suggestComplementaryIngredients = (\n  currentIngredients: string[],\n  season?: Season\n): string[] => {\n  const suggestions: string[] = [];\n  const currentElements = calculateCombinedElements(currentIngredients);\n  const dominantElement = getDominantElement(currentElements);\n\n  Object.entries(ingredientMappings).forEach(([ingredient, mapping]) => {\n    if (currentIngredients.includes(ingredient)) return;\n\n    const ingElements = mapping.elementalProperties;\n    const ingDominant = getDominantElement(ingElements);\n\n    if (isHarmoniousWith(dominantElement, ingDominant)) {\n      const seasonData = mapping.season;\n      if (!season || (Array.isArray(seasonData) && seasonData.includes(season))) {\n        suggestions.push(ingredient);\n      }\n    }\n  });\n\n  return suggestions.slice(0, 5);\n};\n\nconst calculateCombinedElements = (\n  ingredients: string[]\n): ElementalProperties => {\n  const combined: ElementalProperties = {\n    Fire: 0,\n    Water: 0,\n    Air: 0,\n    Earth: 0\n  };\n\n  ingredients.forEach(ing => {\n    const elements = ingredientMappings[ing]?.elementalProperties;\n    if (elements) {\n      Object.entries(elements).forEach(([element, value]) => {\n        // Pattern KK-1: Safe arithmetic with type validation\n        const numericValue = typeof value === 'number' ? value : 0;\n        combined[element as keyof ElementalProperties] += numericValue;\n      });\n    }\n  });\n\n  // Normalize\n  const total = Object.values(combined).reduce((a, b) => a + b, 0);\n  if (total > 0) {\n    Object.keys(combined).forEach(key => {\n      combined[key as keyof ElementalProperties] /= total;\n    });\n  }\n\n  return combined;\n};\n\nconst isHarmoniousWith = (element1: Element, element2: Element): boolean => {\n  return ELEMENT_COMBINATIONS.harmonious.some(([e1, e2]) =>\n    (element1 === e1 && element2 === e2) ||\n    (element1 === e2 && element2 === e1)\n  );\n};\n\nconst calculateLunarEffect = (\n  ingredients: string[],\n  lunarPhase: LunarPhase\n): CombinationEffect | null => {\n  const lunarModifiers = {\n    new_moon: { modifier: 0.9, effect: 'neutralize' as EffectType },\n    full_moon: { modifier: 1.2, effect: 'amplify' as EffectType },\n    first_quarter: { modifier: 1.1, effect: 'synergy' as EffectType },\n    last_quarter: { modifier: 1.1, effect: 'synergy' as EffectType },\n    waxing_crescent: { modifier: 1.05, effect: 'amplify' as EffectType },\n    waning_crescent: { modifier: 0.95, effect: 'neutralize' as EffectType },\n    waxing_gibbous: { modifier: 1.15, effect: 'amplify' as EffectType },\n    waning_gibbous: { modifier: 1.05, effect: 'synergy' as EffectType }\n  };\n\n  // Use the normalized lunar phase for lookup\n  const normalizedPhase = normalizeLunarPhase(lunarPhase);\n  const modifier = lunarModifiers[normalizedPhase as keyof typeof lunarModifiers];\n  \n  if (!modifier) return null;\n\n  return {\n    type: 'amplify' as EffectType,\n    strength: modifier.modifier,\n    description: `Lunar phase (${lunarPhase}) influence`,\n    elements: ['Water'] as Element[]\n  };\n};"],"version":3}