17404f59b0a7416e424888d8d2ed8834
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorLog = exports.warnLog = exports.infoLog = exports.debugLog = exports.createLogger = exports.logger = void 0;
const LoggingService_1 = require("@/services/LoggingService");
// Get environment
const isDev = process.env.NODE_ENV !== 'production';
const _isBrowser = typeof window !== 'undefined';
/**
 * Logger class providing centralized logging capabilities
 */
class Logger {
    logLevel = isDev ? 'debug' : 'info';
    recentErrors = [];
    MAX_ERRORS = 20;
    // Track components that have created loggers
    componentLoggers = new Set();
    /**
     * Set the minimum log level
     */
    setLevel(level) {
        this.logLevel = level;
    }
    /**
     * Create a component-specific logger
     * @param component The name of the component or module
     * @returns An object with logging methods specific to the component
     */
    createLogger(component) {
        this.componentLoggers.add(component);
        return {
            debug: (message, ...args) => {
                try {
                    this.debug(message, { component, args });
                }
                catch (e) {
                    // Silent failure - logging errors should not break application
                    console.warn(`[LOGGER-ERROR] Failed to log debug message for ${component}:`, e);
                }
            },
            log: (message, ...args) => {
                try {
                    this.info(message, { component, args });
                }
                catch (e) {
                    console.warn(`[LOGGER-ERROR] Failed to log message for ${component}:`, e);
                }
            },
            info: (message, ...args) => {
                try {
                    this.info(message, { component, args });
                }
                catch (e) {
                    console.warn(`[LOGGER-ERROR] Failed to log info message for ${component}:`, e);
                }
            },
            warn: (message, ...args) => {
                try {
                    this.warn(message, { component, args });
                }
                catch (e) {
                    console.warn(`[LOGGER-ERROR] Failed to log warning for ${component}:`, e);
                }
            },
            error: (message, ...args) => {
                try {
                    this.error(message, { component, args });
                }
                catch (e) {
                    console.error(`[LOGGER-ERROR] Failed to log error for ${component}:`, e);
                }
            },
        };
    }
    /**
     * Log debug information (only in development)
     */
    debug(message, ...args) {
        if (this.shouldLog('debug')) {
            const options = this.extractOptions(args);
            const component = options.component ? `[${options.component}]` : '';
            LoggingService_1.log.debug(`[DEBUG]${component} ${message}`, ...options.rest);
        }
    }
    /**
     * Log general information
     */
    info(message, ...args) {
        if (this.shouldLog('info')) {
            const options = this.extractOptions(args);
            const component = options.component ? `[${options.component}]` : '';
            LoggingService_1.log.info(`[INFO]${component} ${message}`, ...options.rest);
        }
    }
    /**
     * Log warnings
     */
    warn(message, ...args) {
        if (this.shouldLog('warn')) {
            const options = this.extractOptions(args);
            const component = options.component ? `[${options.component}]` : '';
            console.warn(`[WARN]${component} ${message}`, ...options.rest);
        }
    }
    /**
     * Log errors
     */
    error(message, ...args) {
        if (this.shouldLog('error')) {
            const options = this.extractOptions(args);
            const component = options.component ? `[${options.component}]` : '';
            console.error(`[ERROR]${component} ${message}`, ...options.rest);
            // Store error for summary
            this.storeError(message, options.component);
        }
    }
    /**
     * Extract options from args, if last arg is an object with component property
     */
    extractOptions(args) {
        const last = args[args.length - 1];
        if (last && typeof last === 'object' && !Array.isArray(last) && 'component' in last) {
            return {
                component: last.component,
                rest: args.slice(0, args.length - 1),
            };
        }
        return { rest: args };
    }
    /**
     * Store error in recent errors list
     */
    storeError(message, component) {
        this.recentErrors.unshift({
            message,
            timestamp: Date.now(),
            component,
        });
        // Keep list at max length
        if (this.recentErrors.length > this.MAX_ERRORS) {
            this.recentErrors.pop();
        }
    }
    /**
     * Get a summary of recent errors
     */
    getErrorSummary() {
        if (this.recentErrors.length === 0) {
            return 'No recent errors';
        }
        return this.recentErrors
            .map(err => {
            const date = new Date(err.timestamp).toLocaleTimeString();
            const component = err.component ? `[${err.component}]` : '';
            return `[${date}]${component} ${err.message}`;
        })
            .join('\n');
    }
    /**
     * Get a list of all registered components
     */
    getComponents() {
        return [...this.componentLoggers];
    }
    /**
     * Check if we should log at this level
     */
    shouldLog(level) {
        // Ensure the method exists and is accessible
        if (!this.logLevel) {
            return true; // Default to allowing all logs if level is undefined
        }
        const levels = ['debug', 'info', 'warn', 'error'];
        const currentLevelIndex = levels.indexOf(this.logLevel);
        const targetLevelIndex = levels.indexOf(level);
        return targetLevelIndex >= currentLevelIndex;
    }
}
// Singleton instance of the logger with safe initialization
let loggerInstance;
exports.logger = (() => {
    if (!loggerInstance) {
        loggerInstance = new Logger();
    }
    return loggerInstance;
})();
// Helper functions for creating component-specific loggers
const createLogger = (component) => exports.logger.createLogger(component);
exports.createLogger = createLogger;
// Utility functions for direct use (for backwards compatibility)
const debugLog = (message, ...args) => exports.logger.debug(message, ...args);
exports.debugLog = debugLog;
const infoLog = (message, ...args) => exports.logger.info(message, ...args);
exports.infoLog = infoLog;
const warnLog = (message, ...args) => exports.logger.warn(message, ...args);
exports.warnLog = warnLog;
const errorLog = (message, ...args) => exports.logger.error(message, ...args);
exports.errorLog = errorLog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,