3194c36688a026a87df90859c3c42ea3
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.suggestComplementaryIngredients = exports.calculateCombinationEffects = void 0;
const ingredients_1 = require("@/utils/elementalMappings/ingredients");
const elements_1 = require("@/utils/constants/elements");
// Classic flavor combinations and their effects
const COMBINATION_RULES = [
    {
        ingredients: ['ginger', 'garlic'],
        effect: 'amplify',
        modifier: 1.3,
        elements: { Fire: 0.2 },
        notes: 'Classic warming combination'
    },
    {
        ingredients: ['cinnamon', 'cardamom', 'clove'],
        effect: 'amplify',
        modifier: 1.4,
        elements: { Fire: 0.3, Air: 0.1 },
        notes: 'Warming spice blend'
    },
    // ... other rules remain the same
];
// Create a normalization function at the top of the file
const normalizeLunarPhase = (phase) => {
    // Convert spaces to underscores for consistent lookup
    return phase.replace(/\s+/g, '_');
};
function calculateCombinationEffects({ ingredients, elementalProperties, cookingMethod, season, temperature, lunarPhase }) {
    const effects = [];
    try {
        // Apply lunar phase influences
        if (lunarPhase) {
            const lunarEffect = calculateLunarEffect(ingredients, lunarPhase);
            if (lunarEffect) {
                effects.push(lunarEffect);
            }
        }
        // Check for known combinations
        COMBINATION_RULES.forEach(rule => {
            if (hasIngredientCombination(ingredients, rule.ingredients)) {
                // Verify conditions if they exist
                if (rule.conditions) {
                    const meetsConditions = ((!rule.conditions.cookingMethod || !cookingMethod || rule.conditions.cookingMethod.includes(cookingMethod)) &&
                        (!rule.conditions.season || !season || rule.conditions.season.includes(season)) &&
                        (!rule.conditions.temperature || !temperature || rule.conditions.temperature === temperature));
                    if (!meetsConditions)
                        return;
                }
                const effect = {
                    type: rule.effect,
                    strength: rule.modifier,
                    description: rule.notes || '',
                    elements: rule.elements ? Object.keys(rule.elements) : []
                };
                effects.push(effect);
            }
        });
        // Check elemental interactions
        effects.push(...calculateElementalInteractions(ingredients));
        return effects.sort((a, b) => ((b === null || b === void 0 ? void 0 : b.modifier) || (b === null || b === void 0 ? void 0 : b.strength) || 0) - ((a === null || a === void 0 ? void 0 : a.modifier) || (a === null || a === void 0 ? void 0 : a.strength) || 0));
    }
    catch (error) {
        console.error('Error calculating combination effects:', error);
        return [];
    }
}
exports.calculateCombinationEffects = calculateCombinationEffects;
const hasIngredientCombination = (recipeIngredients, combinationIngredients) => {
    return combinationIngredients.every(ingredient => recipeIngredients.some(recipeIng => recipeIng.toLowerCase().includes(ingredient.toLowerCase())));
};
const calculateElementalInteractions = (ingredients) => {
    const effects = [];
    const ingredientPairs = getPairs(ingredients);
    ingredientPairs.forEach(([ing1, ing2]) => {
        var _a, _b;
        const elem1 = (_a = ingredients_1.ingredientMappings[ing1]) === null || _a === void 0 ? void 0 : _a.elementalProperties;
        const elem2 = (_b = ingredients_1.ingredientMappings[ing2]) === null || _b === void 0 ? void 0 : _b.elementalProperties;
        if (!elem1 || !elem2)
            return;
        if (isHarmoniousCombination(elem1, elem2)) {
            effects.push({
                ingredients: [ing1, ing2],
                type: 'synergy',
                strength: 1.2,
                elements: ['Fire'],
                description: 'Harmonious elemental combination'
            });
        }
        if (isAntagonisticCombination(elem1, elem2)) {
            effects.push({
                ingredients: [ing1, ing2],
                type: 'conflict',
                strength: 0.8,
                elements: ['Water'],
                description: 'Conflicting elemental combination'
            });
        }
    });
    return effects;
};
const getPairs = (array) => {
    const pairs = [];
    for (let i = 0; i < array.length; i++) {
        for (let j = i + 1; j < array.length; j++) {
            pairs.push([array[i], array[j]]);
        }
    }
    return pairs;
};
const isHarmoniousCombination = (elem1, elem2) => {
    return elements_1.ELEMENT_COMBINATIONS.harmonious.some(([e1, e2]) => (getDominantElement(elem1) === e1 && getDominantElement(elem2) === e2) ||
        (getDominantElement(elem1) === e2 && getDominantElement(elem2) === e1));
};
const isAntagonisticCombination = (elem1, elem2) => {
    const antagonistic = (elements_1.ELEMENT_COMBINATIONS === null || elements_1.ELEMENT_COMBINATIONS === void 0 ? void 0 : elements_1.ELEMENT_COMBINATIONS.antagonistic) || [];
    return antagonistic.some(([e1, e2]) => (getDominantElement(elem1) === e1 && getDominantElement(elem2) === e2) ||
        (getDominantElement(elem1) === e2 && getDominantElement(elem2) === e1));
};
const getDominantElement = (elements) => {
    return Object.entries(elements)
        .sort(([, a], [, b]) => b - a)[0][0];
};
const suggestComplementaryIngredients = (currentIngredients, season) => {
    const suggestions = [];
    const currentElements = calculateCombinedElements(currentIngredients);
    const dominantElement = getDominantElement(currentElements);
    Object.entries(ingredients_1.ingredientMappings).forEach(([ingredient, mapping]) => {
        if (currentIngredients.includes(ingredient))
            return;
        const ingElements = mapping.elementalProperties;
        const ingDominant = getDominantElement(ingElements);
        if (isHarmoniousWith(dominantElement, ingDominant)) {
            const seasonData = mapping.season;
            if (!season || (Array.isArray(seasonData) && seasonData.includes(season))) {
                suggestions.push(ingredient);
            }
        }
    });
    return suggestions.slice(0, 5);
};
exports.suggestComplementaryIngredients = suggestComplementaryIngredients;
const calculateCombinedElements = (ingredients) => {
    const combined = {
        Fire: 0,
        Water: 0,
        Air: 0,
        Earth: 0
    };
    ingredients.forEach(ing => {
        var _a;
        const elements = (_a = ingredients_1.ingredientMappings[ing]) === null || _a === void 0 ? void 0 : _a.elementalProperties;
        if (elements) {
            Object.entries(elements).forEach(([element, value]) => {
                // Pattern KK-1: Safe arithmetic with type validation
                const numericValue = typeof value === 'number' ? value : 0;
                combined[element] += numericValue;
            });
        }
    });
    // Normalize
    const total = Object.values(combined).reduce((a, b) => a + b, 0);
    if (total > 0) {
        Object.keys(combined).forEach(key => {
            combined[key] /= total;
        });
    }
    return combined;
};
const isHarmoniousWith = (element1, element2) => {
    return elements_1.ELEMENT_COMBINATIONS.harmonious.some(([e1, e2]) => (element1 === e1 && element2 === e2) ||
        (element1 === e2 && element2 === e1));
};
const calculateLunarEffect = (ingredients, lunarPhase) => {
    const lunarModifiers = {
        new_moon: { modifier: 0.9, effect: 'neutralize' },
        full_moon: { modifier: 1.2, effect: 'amplify' },
        first_quarter: { modifier: 1.1, effect: 'synergy' },
        last_quarter: { modifier: 1.1, effect: 'synergy' },
        waxing_crescent: { modifier: 1.05, effect: 'amplify' },
        waning_crescent: { modifier: 0.95, effect: 'neutralize' },
        waxing_gibbous: { modifier: 1.15, effect: 'amplify' },
        waning_gibbous: { modifier: 1.05, effect: 'synergy' }
    };
    // Use the normalized lunar phase for lookup
    const normalizedPhase = normalizeLunarPhase(lunarPhase);
    const modifier = lunarModifiers[normalizedPhase];
    if (!modifier)
        return null;
    return {
        type: 'amplify',
        strength: modifier.modifier,
        description: `Lunar phase (${lunarPhase}) influence`,
        elements: ['Water']
    };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,