18f0ab095169d1ae570d97743b4509f2
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateOrDefault = exports.logUnexpectedValue = exports.isElementalPropertyKey = exports.isElementalProperties = exports.validateRecipe = exports.recipeSchema = void 0;
const zod_1 = require("zod");
exports.recipeSchema = zod_1.z.object({
    name: zod_1.z.string().min(1),
    description: zod_1.z.string().optional(),
    cuisine: zod_1.z.string().optional(),
    regionalCuisine: zod_1.z.string().optional(),
    ingredients: zod_1.z.array(zod_1.z.object({
        name: zod_1.z.string(),
        amount: zod_1.z.string(),
        unit: zod_1.z.string(),
        category: zod_1.z.string(),
    })),
    mealType: zod_1.z.array(zod_1.z.string()),
    season: zod_1.z.array(zod_1.z.string()).optional(),
    timeToMake: zod_1.z.string(),
    elementalProperties: zod_1.z.object({
        Fire: zod_1.z.number(),
        Earth: zod_1.z.number(),
        Air: zod_1.z.number(),
        Water: zod_1.z.number(),
    }).optional(),
    properties: zod_1.z.object({
        light: zod_1.z.boolean().optional(),
        festive: zod_1.z.boolean().optional(),
        grounding: zod_1.z.boolean().optional(),
        comforting: zod_1.z.boolean().optional(),
        luxurious: zod_1.z.boolean().optional(),
        transformative: zod_1.z.boolean().optional(),
    }).optional(),
    nutrition: zod_1.z.object({
        calories: zod_1.z.number().optional(),
        protein: zod_1.z.number().optional(),
        balanced: zod_1.z.boolean().optional(),
    }).optional(),
    traditional: zod_1.z.number().optional(),
    popularity: zod_1.z.number().optional(),
});
function validateRecipe(recipe) {
    return exports.recipeSchema.safeParse(recipe);
}
exports.validateRecipe = validateRecipe;
// Re-export validation functions from elemental utilities
var elementalUtils_1 = require("./elemental/elementalUtils");
Object.defineProperty(exports, "isElementalProperties", { enumerable: true, get: function () { return elementalUtils_1.isElementalProperties; } });
// Type guard to check if a string is a valid elemental property key
function isElementalPropertyKey(key) {
    return typeof key === 'string' && ['Fire', 'Water', 'Earth', 'Air'].includes(key);
}
exports.isElementalPropertyKey = isElementalPropertyKey;
// Logs unexpected values for debugging purposes
function logUnexpectedValue(context, details) {
    console.warn(`Unexpected value in ${context}:`, details);
}
exports.logUnexpectedValue = logUnexpectedValue;
/**
 * Validates and provides default values for any type
 * @param value The value to validate
 * @param defaultValue The default value to use if validation fails
 * @param validator Optional validation function
 * @returns The validated value or default
 */
function validateOrDefault(value, defaultValue, validator) {
    try {
        // If no validator provided, just check if value is not null/undefined
        if (!validator) {
            return value !== null && value !== undefined ? value : defaultValue;
        }
        // Use the provided validator
        return validator(value) ? value : defaultValue;
    }
    catch (error) {
        logUnexpectedValue('validateOrDefault', { value, error });
        return defaultValue;
    }
}
exports.validateOrDefault = validateOrDefault;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy91dGlscy92YWxpZGF0aW9uLnRzIiwibWFwcGluZ3MiOiI7OztBQUFBLDZCQUF3QjtBQUdYLFFBQUEsWUFBWSxHQUFHLE9BQUMsQ0FBQyxNQUFNLENBQUM7SUFDbkMsSUFBSSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3ZCLFdBQVcsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQ2xDLE9BQU8sRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQzlCLGVBQWUsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQ3RDLFdBQVcsRUFBRSxPQUFDLENBQUMsS0FBSyxDQUFDLE9BQUMsQ0FBQyxNQUFNLENBQUM7UUFDNUIsSUFBSSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUU7UUFDaEIsTUFBTSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUU7UUFDbEIsSUFBSSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUU7UUFDaEIsUUFBUSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUU7S0FDckIsQ0FBQyxDQUFDO0lBQ0gsUUFBUSxFQUFFLE9BQUMsQ0FBQyxLQUFLLENBQUMsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzdCLE1BQU0sRUFBRSxPQUFDLENBQUMsS0FBSyxDQUFDLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRTtJQUN0QyxVQUFVLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRTtJQUN0QixtQkFBbUIsRUFBRSxPQUFDLENBQUMsTUFBTSxDQUFDO1FBQzVCLElBQUksRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFO1FBQ2hCLEtBQUssRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFO1FBQ2pCLEdBQUcsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFO1FBQ2YsS0FBSyxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUU7S0FDbEIsQ0FBQyxDQUFDLFFBQVEsRUFBRTtJQUNiLFVBQVUsRUFBRSxPQUFDLENBQUMsTUFBTSxDQUFDO1FBQ25CLEtBQUssRUFBRSxPQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFO1FBQzdCLE9BQU8sRUFBRSxPQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFO1FBQy9CLFNBQVMsRUFBRSxPQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFO1FBQ2pDLFVBQVUsRUFBRSxPQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFO1FBQ2xDLFNBQVMsRUFBRSxPQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFO1FBQ2pDLGNBQWMsRUFBRSxPQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFO0tBQ3ZDLENBQUMsQ0FBQyxRQUFRLEVBQUU7SUFDYixTQUFTLEVBQUUsT0FBQyxDQUFDLE1BQU0sQ0FBQztRQUNsQixRQUFRLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtRQUMvQixPQUFPLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtRQUM5QixRQUFRLEVBQUUsT0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsRUFBRTtLQUNqQyxDQUFDLENBQUMsUUFBUSxFQUFFO0lBQ2IsV0FBVyxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7SUFDbEMsVUFBVSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7Q0FDbEMsQ0FBQyxDQUFDO0FBRUgsU0FBZ0IsY0FBYyxDQUFDLE1BQWM7SUFDM0MsT0FBTyxvQkFBWSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4QyxDQUFDO0FBRkQsd0NBRUM7QUFFRCwwREFBMEQ7QUFDMUQsNkRBQW1FO0FBQTFELHVIQUFBLHFCQUFxQixPQUFBO0FBRTlCLG9FQUFvRTtBQUNwRSxTQUFnQixzQkFBc0IsQ0FBQyxHQUFZO0lBQ2pELE9BQU8sT0FBTyxHQUFHLEtBQUssUUFBUSxJQUFJLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3BGLENBQUM7QUFGRCx3REFFQztBQUVELGdEQUFnRDtBQUNoRCxTQUFnQixrQkFBa0IsQ0FBQyxPQUFlLEVBQUUsT0FBZ0I7SUFDbEUsT0FBTyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsT0FBTyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDM0QsQ0FBQztBQUZELGdEQUVDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsU0FBZ0IsaUJBQWlCLENBQy9CLEtBQWMsRUFDZCxZQUFlLEVBQ2YsU0FBc0M7SUFFdEMsSUFBSTtRQUNGLHNFQUFzRTtRQUN0RSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2QsT0FBTyxLQUFLLEtBQUssSUFBSSxJQUFJLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFFLEtBQVcsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO1NBQzVFO1FBRUQsNkJBQTZCO1FBQzdCLE9BQU8sU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQztLQUNoRDtJQUFDLE9BQU8sS0FBSyxFQUFFO1FBQ2Qsa0JBQWtCLENBQUMsbUJBQW1CLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUMxRCxPQUFPLFlBQVksQ0FBQztLQUNyQjtBQUNILENBQUM7QUFqQkQsOENBaUJDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9HcmVnQ2FzdHJvL0Rlc2t0b3AvV2hhdFRvRWF0TmV4dC9zcmMvdXRpbHMvdmFsaWRhdGlvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB6IH0gZnJvbSAnem9kJztcbmltcG9ydCB0eXBlIHsgUmVjaXBlIH0gZnJvbSAnQC90eXBlcy9yZWNpcGUnO1xuXG5leHBvcnQgY29uc3QgcmVjaXBlU2NoZW1hID0gei5vYmplY3Qoe1xuICBuYW1lOiB6LnN0cmluZygpLm1pbigxKSxcbiAgZGVzY3JpcHRpb246IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgY3Vpc2luZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICByZWdpb25hbEN1aXNpbmU6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgaW5ncmVkaWVudHM6IHouYXJyYXkoei5vYmplY3Qoe1xuICAgIG5hbWU6IHouc3RyaW5nKCksXG4gICAgYW1vdW50OiB6LnN0cmluZygpLFxuICAgIHVuaXQ6IHouc3RyaW5nKCksXG4gICAgY2F0ZWdvcnk6IHouc3RyaW5nKCksXG4gIH0pKSxcbiAgbWVhbFR5cGU6IHouYXJyYXkoei5zdHJpbmcoKSksXG4gIHNlYXNvbjogei5hcnJheSh6LnN0cmluZygpKS5vcHRpb25hbCgpLFxuICB0aW1lVG9NYWtlOiB6LnN0cmluZygpLFxuICBlbGVtZW50YWxQcm9wZXJ0aWVzOiB6Lm9iamVjdCh7XG4gICAgRmlyZTogei5udW1iZXIoKSxcbiAgICBFYXJ0aDogei5udW1iZXIoKSxcbiAgICBBaXI6IHoubnVtYmVyKCksXG4gICAgV2F0ZXI6IHoubnVtYmVyKCksXG4gIH0pLm9wdGlvbmFsKCksXG4gIHByb3BlcnRpZXM6IHoub2JqZWN0KHtcbiAgICBsaWdodDogei5ib29sZWFuKCkub3B0aW9uYWwoKSxcbiAgICBmZXN0aXZlOiB6LmJvb2xlYW4oKS5vcHRpb25hbCgpLFxuICAgIGdyb3VuZGluZzogei5ib29sZWFuKCkub3B0aW9uYWwoKSxcbiAgICBjb21mb3J0aW5nOiB6LmJvb2xlYW4oKS5vcHRpb25hbCgpLFxuICAgIGx1eHVyaW91czogei5ib29sZWFuKCkub3B0aW9uYWwoKSxcbiAgICB0cmFuc2Zvcm1hdGl2ZTogei5ib29sZWFuKCkub3B0aW9uYWwoKSxcbiAgfSkub3B0aW9uYWwoKSxcbiAgbnV0cml0aW9uOiB6Lm9iamVjdCh7XG4gICAgY2Fsb3JpZXM6IHoubnVtYmVyKCkub3B0aW9uYWwoKSxcbiAgICBwcm90ZWluOiB6Lm51bWJlcigpLm9wdGlvbmFsKCksXG4gICAgYmFsYW5jZWQ6IHouYm9vbGVhbigpLm9wdGlvbmFsKCksXG4gIH0pLm9wdGlvbmFsKCksXG4gIHRyYWRpdGlvbmFsOiB6Lm51bWJlcigpLm9wdGlvbmFsKCksXG4gIHBvcHVsYXJpdHk6IHoubnVtYmVyKCkub3B0aW9uYWwoKSxcbn0pO1xuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVSZWNpcGUocmVjaXBlOiBSZWNpcGUpIHtcbiAgcmV0dXJuIHJlY2lwZVNjaGVtYS5zYWZlUGFyc2UocmVjaXBlKTtcbn1cblxuLy8gUmUtZXhwb3J0IHZhbGlkYXRpb24gZnVuY3Rpb25zIGZyb20gZWxlbWVudGFsIHV0aWxpdGllc1xuZXhwb3J0IHsgaXNFbGVtZW50YWxQcm9wZXJ0aWVzIH0gZnJvbSAnLi9lbGVtZW50YWwvZWxlbWVudGFsVXRpbHMnO1xuXG4vLyBUeXBlIGd1YXJkIHRvIGNoZWNrIGlmIGEgc3RyaW5nIGlzIGEgdmFsaWQgZWxlbWVudGFsIHByb3BlcnR5IGtleVxuZXhwb3J0IGZ1bmN0aW9uIGlzRWxlbWVudGFsUHJvcGVydHlLZXkoa2V5OiB1bmtub3duKToga2V5IGlzIGtleW9mIGltcG9ydCgnQC90eXBlcy9hbGNoZW15JykuRWxlbWVudGFsUHJvcGVydGllcyB7XG4gIHJldHVybiB0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBbJ0ZpcmUnLCAnV2F0ZXInLCAnRWFydGgnLCAnQWlyJ10uaW5jbHVkZXMoa2V5KTtcbn1cblxuLy8gTG9ncyB1bmV4cGVjdGVkIHZhbHVlcyBmb3IgZGVidWdnaW5nIHB1cnBvc2VzXG5leHBvcnQgZnVuY3Rpb24gbG9nVW5leHBlY3RlZFZhbHVlKGNvbnRleHQ6IHN0cmluZywgZGV0YWlsczogdW5rbm93bik6IHZvaWQge1xuICBjb25zb2xlLndhcm4oYFVuZXhwZWN0ZWQgdmFsdWUgaW4gJHtjb250ZXh0fTpgLCBkZXRhaWxzKTtcbn1cblxuLyoqXG4gKiBWYWxpZGF0ZXMgYW5kIHByb3ZpZGVzIGRlZmF1bHQgdmFsdWVzIGZvciBhbnkgdHlwZVxuICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byB2YWxpZGF0ZVxuICogQHBhcmFtIGRlZmF1bHRWYWx1ZSBUaGUgZGVmYXVsdCB2YWx1ZSB0byB1c2UgaWYgdmFsaWRhdGlvbiBmYWlsc1xuICogQHBhcmFtIHZhbGlkYXRvciBPcHRpb25hbCB2YWxpZGF0aW9uIGZ1bmN0aW9uXG4gKiBAcmV0dXJucyBUaGUgdmFsaWRhdGVkIHZhbHVlIG9yIGRlZmF1bHRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlT3JEZWZhdWx0PFQ+KFxuICB2YWx1ZTogdW5rbm93bixcbiAgZGVmYXVsdFZhbHVlOiBULFxuICB2YWxpZGF0b3I/OiAodmFsOiB1bmtub3duKSA9PiB2YWwgaXMgVFxuKTogVCB7XG4gIHRyeSB7XG4gICAgLy8gSWYgbm8gdmFsaWRhdG9yIHByb3ZpZGVkLCBqdXN0IGNoZWNrIGlmIHZhbHVlIGlzIG5vdCBudWxsL3VuZGVmaW5lZFxuICAgIGlmICghdmFsaWRhdG9yKSB7XG4gICAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCA/ICh2YWx1ZSBhcyBUKSA6IGRlZmF1bHRWYWx1ZTtcbiAgICB9XG4gICAgXG4gICAgLy8gVXNlIHRoZSBwcm92aWRlZCB2YWxpZGF0b3JcbiAgICByZXR1cm4gdmFsaWRhdG9yKHZhbHVlKSA/IHZhbHVlIDogZGVmYXVsdFZhbHVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGxvZ1VuZXhwZWN0ZWRWYWx1ZSgndmFsaWRhdGVPckRlZmF1bHQnLCB7IHZhbHVlLCBlcnJvciB9KTtcbiAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICB9XG59ICJdLCJ2ZXJzaW9uIjozfQ==