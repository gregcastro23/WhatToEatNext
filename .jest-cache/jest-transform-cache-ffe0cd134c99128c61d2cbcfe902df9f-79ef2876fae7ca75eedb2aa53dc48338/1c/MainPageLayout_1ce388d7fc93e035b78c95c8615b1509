6f5cd465fda810ec748bc26cea170d7a
"use strict";
'use client';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useMainPageContext = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const navigation_1 = require("next/navigation");
const react_1 = __importStar(require("react"));
const ErrorBoundary_1 = __importDefault(require("@/components/error-boundaries/ErrorBoundary"));
const ComponentFallbacks_1 = require("@/components/fallbacks/ComponentFallbacks");
const hooks_1 = require("@/contexts/AlchemicalContext/hooks");
const useAgentHooks_1 = require("@/hooks/useAgentHooks");
const useStatePreservation_1 = require("@/hooks/useStatePreservation");
const developmentExperienceOptimizations_1 = require("@/utils/developmentExperienceOptimizations");
const logger_1 = require("@/utils/logger");
// useMCPServerIntegration removed with MCP cleanup
const steeringFileIntelligence_1 = require("@/utils/steeringFileIntelligence");
// Lazy load non-critical components for better performance
const ConsolidatedDebugInfo = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('@/components/debug/ConsolidatedDebugInfo'))));
const CuisineRecommender = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('@/components/CuisineRecommender'))));
const IngredientRecommender = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('@/components/IngredientRecommender'))));
const CookingMethodsSection = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('@/components/CookingMethodsSection'))));
const RecipeBuilderSimple = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('@/components/recipes/RecipeBuilderSimple'))));
const MainPageContext = (0, react_1.createContext)(null);
const useMainPageContext = () => {
    const context = (0, react_1.useContext)(MainPageContext);
    if (!context) {
        throw new Error('useMainPageContext must be used within MainPageLayout');
    }
    return context;
};
exports.useMainPageContext = useMainPageContext;
// Memoized loading fallback component for better performance
const _ComponentLoadingFallback = (0, react_1.memo)(function ComponentLoadingFallback({ componentName }) {
    return ((0, jsx_runtime_1.jsx)("div", { className: "flex items-center justify-center p-8 bg-gray-50 rounded-lg", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-3", children: [(0, jsx_runtime_1.jsx)("div", { className: "animate-spin rounded-full h-6 w-6 border-b-2 border-indigo-600" }), (0, jsx_runtime_1.jsxs)("span", { className: "text-gray-600", children: ["Loading ", componentName, "..."] })] }) }));
});
const MainPageLayout = (0, react_1.memo)(function MainPageLayout({ children, debugMode = process.env.NODE_ENV === 'development', loading = false, onSectionNavigate }) {
    const router = (0, navigation_1.useRouter)();
    const { state, planetaryPositions, isDaytime } = (0, hooks_1.useAlchemical)();
    // Use new state preservation hooks
    const { saveState: saveNavState, getState: getNavState } = (0, useStatePreservation_1.useNavigationState)();
    const { restoreScrollPosition } = (0, useStatePreservation_1.useScrollPreservation)('main-page');
    (0, useStatePreservation_1.useAutoStateCleanup)();
    // Enhanced hooks with steering file intelligence
    const steeringIntelligence = (0, steeringFileIntelligence_1.useSteeringFileIntelligence)();
    // Temporarily disabled for testing
    // const { 
    //   saveAstrologicalState, 
    //   restoreAstrologicalState,
    //   validateElementalCompatibility,
    //   getArchitecturalGuidance,
    //   getTechnologyStackGuidance
    // } = useAstrologicalStatePreservation('main-page-layout');
    // Temporarily disabled for testing
    // const { validateCulturalContent, getInclusiveLanguageGuidelines } = useCulturalSensitivityGuidance();
    // const { getOptimizationRecommendations, validatePerformanceMetrics } = usePerformanceOptimizationGuidance();
    // Agent hooks for automated quality assurance - temporarily disabled for testing
    // const { hookState: agentHookState, startAgentHooks, stopAgentHooks, triggerValidation } = useAgentHooks({
    //   enablePlanetaryValidation: true,
    //   enableIngredientValidation: true,
    //   enableCampaignTriggers: true,
    //   enablePerformanceMonitoring: true,
    //   validationInterval: 5 // 5 minutes
    // });
    // const { validationResult: planetaryValidation, validatePlanetaryData } = usePlanetaryDataValidationHook(true);
    // Temporary placeholders for disabled hooks
    const agentHookState = null;
    const planetaryValidation = null;
    const { validationResult: ingredientValidation, validateIngredients } = (0, useAgentHooks_1.useIngredientConsistencyHook)();
    const { campaignTrigger: typescriptTrigger, checkErrorThreshold } = (0, useAgentHooks_1.useTypeScriptCampaignHook)(true);
    const { qualityResult: buildQuality, monitorBuildQuality } = (0, useAgentHooks_1.useBuildQualityMonitoringHook)();
    const { metrics: qualityMetrics, updateMetrics } = (0, useAgentHooks_1.useQualityMetricsHook)(30000); // 30 seconds
    // MCP server integration for reliable external APIs
    // MCP Server Integration removed - functionality handled by core services
    // Development experience optimizations
    const { updatePerformanceMetrics: updateDevMetrics, getDevelopmentMetrics, getPerformanceOptimizationRecommendations: getDevOptimizationRecommendations, applyAutomaticOptimizations } = (0, developmentExperienceOptimizations_1.useDevelopmentExperienceOptimizations)();
    const [sectionStates, setSectionStates] = (0, react_1.useState)({
        cuisine: { loading: false, error: null },
        ingredients: { loading: false, error: null },
        cooking: { loading: false, error: null },
        recipe: { loading: false, error: null }
    });
    // Main Page Context State - Initialize from preserved state
    const [selectedIngredients, setSelectedIngredients] = (0, react_1.useState)([]);
    const [selectedCuisine, setSelectedCuisine] = (0, react_1.useState)(null);
    const [selectedCookingMethods, setSelectedCookingMethods] = (0, react_1.useState)([]);
    const [currentRecipe, setCurrentRecipe] = (0, react_1.useState)(null);
    const [activeSection, setActiveSection] = (0, react_1.useState)(null);
    const [navigationHistory, setNavigationHistory] = (0, react_1.useState)([]);
    // Component update subscribers
    const [updateSubscribers, setUpdateSubscribers] = (0, react_1.useState)({});
    // Steering file intelligence state
    const [astrologicalGuidance, setAstrologicalGuidance] = (0, react_1.useState)(null);
    const [performanceMetrics, setPerformanceMetrics] = (0, react_1.useState)({});
    const [culturalValidation, setCulturalValidation] = (0, react_1.useState)(null);
    // Initialize state from preserved navigation state
    (0, react_1.useEffect)(() => {
        const restoredState = getNavState();
        if (restoredState) {
            if (restoredState.selectedIngredients.length > 0) {
                setSelectedIngredients(restoredState.selectedIngredients);
            }
            if (restoredState.selectedCuisine) {
                setSelectedCuisine(restoredState.selectedCuisine);
            }
            if (restoredState.selectedCookingMethods.length > 0) {
                setSelectedCookingMethods(restoredState.selectedCookingMethods);
            }
            if (restoredState.currentRecipe) {
                setCurrentRecipe(restoredState.currentRecipe);
            }
            if (restoredState.activeSection) {
                setActiveSection(restoredState.activeSection);
            }
            if (restoredState.navigationHistory.length > 0) {
                setNavigationHistory(restoredState.navigationHistory);
            }
            logger_1.logger.debug('Restored main page context from enhanced state preservation');
        }
        // Restore scroll position after a short delay to ensure DOM is ready
        setTimeout(() => {
            restoreScrollPosition();
        }, 100);
    }, [getNavState, restoreScrollPosition]);
    // Initialize steering file intelligence guidance
    (0, react_1.useEffect)(() => {
        const initializeGuidance = async () => {
            try {
                const guidance = await steeringIntelligence.getGuidance();
                setAstrologicalGuidance(guidance);
                // Apply architectural guidance for component optimization - temporarily disabled
                // const archGuidance = getArchitecturalGuidance();
                // logger.debug('Applied architectural guidance from steering files:', archGuidance);
                // Validate cultural content if we have any - temporarily disabled
                // if (selectedCuisine || selectedIngredients.length > 0) {
                //   const validation = validateCulturalContent({
                //     ingredientNames: selectedIngredients,
                //     cuisineDescriptions: selectedCuisine ? [selectedCuisine] : []
                //   });
                //   setCulturalValidation(validation);
                //   
                //   if (!validation.isCompliant) {
                //     logger.warn('Cultural sensitivity issues detected:', validation.issues);
                //   }
                // }
                // Get performance optimization recommendations - temporarily disabled
                // const perfRecommendations = getOptimizationRecommendations('main-page-layout');
                // logger.debug('Performance optimization recommendations:', perfRecommendations);
            }
            catch (error) {
                logger_1.logger.error('Error initializing steering file intelligence:', error);
            }
        };
        void initializeGuidance();
    }, [steeringIntelligence, selectedCuisine, selectedIngredients]);
    // Monitor performance metrics using steering file guidance
    (0, react_1.useEffect)(() => {
        const startTime = performance.now();
        const measurePerformance = () => {
            const renderTime = performance.now() - startTime;
            const memoryUsage = performance.memory?.usedJSHeapSize / 1024 / 1024 || 0;
            const metrics = {
                renderTime,
                memoryUsage,
                componentCount: Object.keys(sectionStates).length,
                activeSubscribers: Object.values(updateSubscribers).reduce((sum, subs) => sum + subs.length, 0)
            };
            setPerformanceMetrics(metrics);
            // Validate performance against steering file thresholds - temporarily disabled
            // const validation = validatePerformanceMetrics({
            //   renderTime,
            //   memoryUsage
            // });
            // 
            // if (!validation.isOptimal) {
            //   logger.warn('Performance issues detected:', validation.issues);
            //   logger.info('Performance recommendations:', validation.recommendations);
            // }
        };
        // Measure performance after component mounts and updates
        const timeoutId = setTimeout(measurePerformance, 100);
        return () => clearTimeout(timeoutId);
    }, [sectionStates, updateSubscribers]);
    // Enhanced state preservation with astrological context
    (0, react_1.useEffect)(() => {
        const saveEnhancedState = async () => {
            try {
                // Calculate elemental properties from current selections
                const elementalProps = {
                    Fire: selectedCookingMethods.filter(method => method.includes('grill') || method.includes('sauté')).length * 0.3,
                    Water: selectedIngredients.filter(ing => ing.includes('soup') || ing.includes('steam')).length * 0.3,
                    Earth: selectedIngredients.filter(ing => ing.includes('root') || ing.includes('grain')).length * 0.3,
                    Air: selectedIngredients.filter(ing => ing.includes('herb') || ing.includes('spice')).length * 0.3
                };
                // Save astrological state with steering file intelligence
                // Temporarily disabled for testing
                // await saveAstrologicalState({
                //   elementalProperties: elementalProps,
                //   selectedIngredients,
                //   astrologicalContext: {
                //     selectedCuisine,
                //     selectedCookingMethods,
                //     currentRecipe,
                //     activeSection,
                //     navigationHistory
                //   }
                // });
            }
            catch (error) {
                logger_1.logger.error('Error saving enhanced astrological state:', error);
            }
        };
        if (selectedIngredients.length > 0 || selectedCuisine || selectedCookingMethods.length > 0) {
            saveEnhancedState();
        }
    }, [selectedIngredients, selectedCuisine, selectedCookingMethods, currentRecipe, activeSection, navigationHistory]);
    // Initialize agent hooks for automated quality assurance - temporarily disabled for testing
    // useEffect(() => {
    //   startAgentHooks();
    //   logger.info('Agent hooks started for automated quality assurance');
    //   
    //   return () => {
    //     stopAgentHooks();
    //     logger.info('Agent hooks stopped');
    //   };
    // }, [startAgentHooks, stopAgentHooks]);
    // Monitor ingredient consistency when ingredients change
    (0, react_1.useEffect)(() => {
        if (selectedIngredients.length > 0) {
            const ingredientsWithElementalProps = selectedIngredients.map(ingredient => ({
                name: ingredient,
                elementalProperties: {
                    Fire: ingredient.includes('spice') || ingredient.includes('pepper') ? 0.8 : 0.2,
                    Water: ingredient.includes('soup') || ingredient.includes('broth') ? 0.8 : 0.2,
                    Earth: ingredient.includes('root') || ingredient.includes('grain') ? 0.8 : 0.2,
                    Air: ingredient.includes('herb') || ingredient.includes('leaf') ? 0.8 : 0.2
                },
                category: ingredient.includes('spice') ? 'spices' :
                    ingredient.includes('herb') ? 'herbs' :
                        ingredient.includes('grain') ? 'grains' : 'other'
            }));
            validateIngredients(ingredientsWithElementalProps).then(result => {
                if (result && !result.isValid) {
                    logger_1.logger.warn('Ingredient consistency validation failed:', result.issues);
                }
            }).catch(error => {
                logger_1.logger.error('Error validating ingredient consistency:', error);
            });
        }
    }, [selectedIngredients]);
    // Monitor build quality and performance metrics
    (0, react_1.useEffect)(() => {
        const monitorQuality = async () => {
            try {
                const buildMetrics = {
                    buildTime: performanceMetrics.renderTime || 0,
                    memoryUsage: performanceMetrics.memoryUsage || 0,
                    bundleSize: 150 * 1024,
                    errorCount: 0 // No build errors in this context
                };
                const qualityResult = await monitorBuildQuality(buildMetrics);
                if (qualityResult && !qualityResult.isValid) {
                    logger_1.logger.warn('Build quality issues detected:', qualityResult.issues);
                }
            }
            catch (error) {
                logger_1.logger.error('Error monitoring build quality:', error);
            }
        };
        // Monitor quality every 30 seconds
        const qualityInterval = setInterval(() => void monitorQuality(), 30000);
        // Initial quality check
        monitorQuality();
        return () => clearInterval(qualityInterval);
    }, [performanceMetrics, monitorBuildQuality]);
    // Test MCP server integration and fallback strategy
    (0, react_1.useEffect)(() => {
        const testMCPIntegration = async () => {
            try {
                // MCP server integration removed - core services handle API fallbacks
                logger_1.logger.info('Using core astrological and alchemical services (MCP integration removed)');
                // Test core service functionality if needed
                if (selectedIngredients.length > 0) {
                    logger_1.logger.debug(`Testing core nutritional services for ${selectedIngredients[0]}`);
                }
            }
            catch (error) {
                logger_1.logger.error('Error testing MCP server integration:', error);
            }
        };
        // Test MCP integration on mount and when ingredients change
        testMCPIntegration();
        // Core services are always available (no periodic monitoring needed)
        logger_1.logger.debug('Core services initialized successfully');
    }, [selectedIngredients]);
    // Apply development experience optimizations
    (0, react_1.useEffect)(() => {
        const applyDevOptimizations = async () => {
            try {
                // Update development metrics with current performance data
                const devMetrics = {
                    compilationTime: performanceMetrics.renderTime || 0,
                    memoryUsage: performanceMetrics.memoryUsage || 0,
                    bundleSize: 150 * 1024,
                    errorCount: 0,
                    warningCount: 0,
                    hotReloadTime: 0
                };
                updateDevMetrics(devMetrics);
                // Get development optimization recommendations
                const devRecommendations = getDevOptimizationRecommendations();
                if (debugMode) {
                    logger_1.logger.debug('Development optimization recommendations:', devRecommendations);
                }
                // Apply automatic optimizations in development mode
                if (debugMode && process.env.NODE_ENV === 'development') {
                    const optimizationResults = applyAutomaticOptimizations();
                    if (optimizationResults.applied.length > 0) {
                        logger_1.logger.info('Applied automatic development optimizations:', optimizationResults.applied);
                    }
                    if (optimizationResults.errors.length > 0) {
                        logger_1.logger.warn('Development optimization errors:', optimizationResults.errors);
                    }
                }
                // Monitor development metrics
                const currentDevMetrics = getDevelopmentMetrics();
                if (debugMode) {
                    logger_1.logger.debug('Current development metrics:', currentDevMetrics);
                }
            }
            catch (error) {
                logger_1.logger.error('Error applying development experience optimizations:', error);
            }
        };
        // Apply optimizations on mount and when performance metrics change
        applyDevOptimizations();
        // Set up periodic optimization monitoring
        const devOptimizationInterval = setInterval(() => void applyDevOptimizations(), 60000); // Every minute
        return () => clearInterval(devOptimizationInterval);
    }, [performanceMetrics, updateDevMetrics, getDevOptimizationRecommendations, applyAutomaticOptimizations, getDevelopmentMetrics, debugMode]);
    // Log quality metrics and campaign triggers for debugging
    (0, react_1.useEffect)(() => {
        if (debugMode) {
            logger_1.logger.debug('Quality Metrics:', qualityMetrics);
            logger_1.logger.debug('Agent Hook State:', agentHookState);
            if (planetaryValidation && !planetaryValidation.isValid) {
                logger_1.logger.warn('Planetary validation issues:', planetaryValidation.issues);
            }
            if (typescriptTrigger?.triggered) {
                logger_1.logger.warn('TypeScript campaign trigger active:', typescriptTrigger);
            }
            if (buildQuality && !buildQuality.isValid) {
                logger_1.logger.warn('Build quality issues:', buildQuality.issues);
            }
            // Core services are always available (MCP integration removed)
            logger_1.logger.debug('Core Services Status: Active');
            // Log development metrics in debug mode
            const devMetrics = getDevelopmentMetrics();
            logger_1.logger.debug('Development Experience Metrics:', devMetrics);
        }
    }, [debugMode, qualityMetrics, agentHookState, planetaryValidation, typescriptTrigger, buildQuality, getDevelopmentMetrics]);
    // Save state changes using enhanced state preservation
    (0, react_1.useEffect)(() => {
        saveNavState({
            selectedIngredients,
            selectedCuisine,
            selectedCookingMethods,
            currentRecipe,
            activeSection,
            navigationHistory,
            scrollPosition: window.scrollY
        });
    }, [selectedIngredients, selectedCuisine, selectedCookingMethods, currentRecipe, activeSection, navigationHistory, saveNavState]);
    // Context update functions
    const updateSelectedIngredients = (0, react_1.useCallback)((ingredients) => {
        setSelectedIngredients(ingredients);
        notifyComponentUpdate('ingredients', { selectedIngredients: ingredients });
        logger_1.logger.debug('Updated selected ingredients:', ingredients);
    }, []);
    const updateSelectedCuisine = (0, react_1.useCallback)((cuisine) => {
        setSelectedCuisine(cuisine);
        notifyComponentUpdate('cuisine', { selectedCuisine: cuisine });
        logger_1.logger.debug('Updated selected cuisine:', cuisine);
    }, []);
    const updateSelectedCookingMethods = (0, react_1.useCallback)((methods) => {
        setSelectedCookingMethods(methods);
        notifyComponentUpdate('cooking', { selectedCookingMethods: methods });
        logger_1.logger.debug('Updated selected cooking methods:', methods);
    }, []);
    const updateCurrentRecipe = (0, react_1.useCallback)((recipe) => {
        setCurrentRecipe(recipe);
        notifyComponentUpdate('recipe', { currentRecipe: recipe });
        logger_1.logger.debug('Updated current recipe:', recipe);
    }, []);
    const handleSetActiveSection = (0, react_1.useCallback)((section) => {
        setActiveSection(section);
        if (section) {
            setNavigationHistory(prev => [...prev.slice(-9), section]); // Keep last 10 sections
        }
    }, []);
    // Cross-component communication
    const notifyComponentUpdate = (0, react_1.useCallback)((componentId, data) => {
        const subscribers = updateSubscribers[componentId] || [];
        subscribers.forEach(callback => {
            try {
                callback(data);
            }
            catch (error) {
                logger_1.logger.error(`Error in component update callback for ${componentId}:`, error);
            }
        });
    }, [updateSubscribers]);
    const subscribeToUpdates = (0, react_1.useCallback)((componentId, callback) => {
        setUpdateSubscribers(prev => ({
            ...prev,
            [componentId]: [...(prev[componentId] || []), callback]
        }));
        // Return unsubscribe function
        return () => {
            setUpdateSubscribers(prev => ({
                ...prev,
                [componentId]: (prev[componentId] || []).filter(cb => cb !== callback)
            }));
        };
    }, []);
    // Memoized context value to prevent unnecessary re-renders
    const contextValue = (0, react_1.useMemo)(() => ({
        // Shared state
        selectedIngredients,
        selectedCuisine,
        selectedCookingMethods,
        currentRecipe,
        activeSection,
        navigationHistory,
        // Update functions
        updateSelectedIngredients,
        updateSelectedCuisine,
        updateSelectedCookingMethods,
        updateCurrentRecipe,
        setActiveSection: handleSetActiveSection,
        // Cross-component communication
        notifyComponentUpdate,
        subscribeToUpdates
    }), [
        selectedIngredients,
        selectedCuisine,
        selectedCookingMethods,
        currentRecipe,
        activeSection,
        navigationHistory,
        updateSelectedIngredients,
        updateSelectedCuisine,
        updateSelectedCookingMethods,
        updateCurrentRecipe,
        handleSetActiveSection,
        notifyComponentUpdate,
        subscribeToUpdates
    ]);
    // Handle section navigation with enhanced context preservation and smooth transitions
    const handleSectionNavigate = (0, react_1.useCallback)((sectionId) => {
        const element = document.getElementById(sectionId);
        if (element) {
            // Add smooth transition effect
            element.style.transition = 'all 0.3s ease-in-out';
            element.scrollIntoView({ behavior: 'smooth', block: 'start' });
            // Update active section and navigation history
            handleSetActiveSection(sectionId);
            onSectionNavigate?.(sectionId);
            // Save navigation state using enhanced preservation system
            saveNavState({
                selectedIngredients,
                selectedCuisine,
                selectedCookingMethods,
                currentRecipe,
                activeSection: sectionId,
                navigationHistory: [...navigationHistory, sectionId].slice(-10),
                scrollPosition: window.scrollY
            });
            // Add visual feedback for navigation
            element.classList.add('highlight-section');
            setTimeout(() => {
                element.classList.remove('highlight-section');
                element.style.transition = '';
            }, 1000);
        }
    }, [onSectionNavigate, handleSetActiveSection, navigationHistory, saveNavState, selectedIngredients, selectedCuisine, selectedCookingMethods, currentRecipe]);
    // Update section loading state
    const updateSectionState = (0, react_1.useCallback)((sectionId, updates) => {
        setSectionStates(prev => ({
            ...prev,
            [sectionId]: { ...prev[sectionId], ...updates }
        }));
    }, []);
    // Section error boundary fallback
    const SectionErrorFallback = ({ error, sectionId, onRetry }) => ((0, jsx_runtime_1.jsxs)("div", { className: "bg-red-50 border border-red-200 rounded-lg p-6 text-center", children: [(0, jsx_runtime_1.jsxs)("h3", { className: "text-lg font-semibold text-red-800 mb-2", children: ["Section Error: ", sectionId] }), (0, jsx_runtime_1.jsx)("p", { className: "text-red-600 mb-4", children: error.message || 'An unexpected error occurred in this section.' }), (0, jsx_runtime_1.jsx)("button", { onClick: onRetry, className: "bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700 transition-colors", children: "Retry Section" })] }));
    // Section wrapper with error boundary
    const SectionWrapper = ({ id, title, children, className = '' }) => {
        const [retryKey, setRetryKey] = (0, react_1.useState)(0);
        const handleRetry = (0, react_1.useCallback)(() => {
            setRetryKey(prev => prev + 1);
            updateSectionState(id, { loading: false, error: null });
        }, [id]);
        return ((0, jsx_runtime_1.jsxs)("section", { id: id, className: `bg-white rounded-lg shadow-md p-6 scroll-mt-20 ${className}`, children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between mb-4", children: [(0, jsx_runtime_1.jsx)("h2", { className: "text-2xl font-semibold text-gray-800", children: title }), sectionStates[id].loading && ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center text-blue-600", children: [(0, jsx_runtime_1.jsx)("div", { className: "animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2" }), (0, jsx_runtime_1.jsx)("span", { className: "text-sm", children: "Loading..." })] }))] }), (0, jsx_runtime_1.jsx)(ErrorBoundary_1.default, { fallback: (error) => ((0, jsx_runtime_1.jsx)(SectionErrorFallback, { error: error, sectionId: id, onRetry: handleRetry })), children: children }, retryKey)] }));
    };
    return ((0, jsx_runtime_1.jsx)(MainPageContext.Provider, { value: contextValue, children: (0, jsx_runtime_1.jsxs)("div", { className: "min-h-screen bg-gradient-to-b from-indigo-50 via-blue-50 to-gray-100 text-gray-800", children: [(0, jsx_runtime_1.jsxs)("div", { className: "container mx-auto px-4 py-8", children: [(0, jsx_runtime_1.jsxs)("header", { className: "mb-8 text-center", children: [(0, jsx_runtime_1.jsx)("h1", { className: "text-3xl md:text-4xl font-bold mb-2 text-indigo-900", children: "What to Eat Next" }), (0, jsx_runtime_1.jsx)("p", { className: "text-indigo-600 mb-4", children: "Food recommendations based on the current celestial energies" }), (0, jsx_runtime_1.jsx)("div", { className: "inline-block bg-white px-4 py-2 rounded-lg shadow-sm", children: loading ? ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center", children: [(0, jsx_runtime_1.jsx)("div", { className: "animate-spin rounded-full h-4 w-4 border-b-2 border-indigo-600 mr-2" }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-600", children: "Loading astrological data..." })] })) : ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center", children: [(0, jsx_runtime_1.jsx)("div", { className: "w-2 h-2 bg-green-500 rounded-full mr-2" }), (0, jsx_runtime_1.jsxs)("p", { className: "text-sm text-gray-600", children: ["Connected \u2022 ", isDaytime ? 'Day' : 'Night', " \u2022 ", state.astrologicalState.sunSign || 'Loading...'] })] })) })] }), (0, jsx_runtime_1.jsxs)("nav", { className: "flex flex-wrap justify-center gap-4 mb-8 bg-white rounded-lg shadow-md p-4 sticky top-2 z-10", children: [(0, jsx_runtime_1.jsx)("button", { onClick: () => handleSectionNavigate('cuisine'), className: "text-indigo-600 hover:text-indigo-800 font-medium px-3 py-1 rounded hover:bg-indigo-50 transition-colors", children: "Cuisine Recommendations" }), (0, jsx_runtime_1.jsx)("button", { onClick: () => handleSectionNavigate('ingredients'), className: "text-indigo-600 hover:text-indigo-800 font-medium px-3 py-1 rounded hover:bg-indigo-50 transition-colors", children: "Ingredient Recommendations" }), (0, jsx_runtime_1.jsx)("button", { onClick: () => handleSectionNavigate('cooking'), className: "text-indigo-600 hover:text-indigo-800 font-medium px-3 py-1 rounded hover:bg-indigo-50 transition-colors", children: "Cooking Methods" }), (0, jsx_runtime_1.jsx)("button", { onClick: () => handleSectionNavigate('recipe'), className: "text-indigo-600 hover:text-indigo-800 font-medium px-3 py-1 rounded hover:bg-indigo-50 transition-colors", children: "Recipe Builder" })] }), (0, jsx_runtime_1.jsxs)("main", { className: "flex flex-col gap-8 max-w-6xl mx-auto", children: [(0, jsx_runtime_1.jsx)(SectionWrapper, { id: "cuisine", title: "Cuisine Recommendations", children: (0, jsx_runtime_1.jsx)(ErrorBoundary_1.default, { fallback: (error) => ((0, jsx_runtime_1.jsx)(ComponentFallbacks_1.ComponentFallbacks.CuisineRecommender, { onRetry: () => window.location.reload(), error: error })), children: (0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)(ComponentFallbacks_1.ComponentFallbacks.Loading, { componentName: "Cuisine Recommender" }), children: (0, jsx_runtime_1.jsx)(CuisineRecommender, {}) }) }) }), (0, jsx_runtime_1.jsx)(SectionWrapper, { id: "ingredients", title: "Ingredient Recommendations", children: (0, jsx_runtime_1.jsx)(ErrorBoundary_1.default, { fallback: (error) => ((0, jsx_runtime_1.jsx)(ComponentFallbacks_1.ComponentFallbacks.IngredientRecommender, { onRetry: () => window.location.reload(), error: error })), children: (0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)(ComponentFallbacks_1.ComponentFallbacks.Loading, { componentName: "Ingredient Recommender" }), children: (0, jsx_runtime_1.jsx)(IngredientRecommender, { isFullPageVersion: false, maxDisplayed: 8 }) }) }) }), (0, jsx_runtime_1.jsx)(SectionWrapper, { id: "cooking", title: "Cooking Methods", children: (0, jsx_runtime_1.jsx)(ErrorBoundary_1.default, { fallback: (error) => ((0, jsx_runtime_1.jsx)(ComponentFallbacks_1.ComponentFallbacks.CookingMethods, { onRetry: () => window.location.reload(), error: error })), children: (0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)(ComponentFallbacks_1.ComponentFallbacks.Loading, { componentName: "Cooking Methods" }), children: (0, jsx_runtime_1.jsx)(CookingMethodsSection, { isMainPageVersion: true, maxDisplayed: 6, onViewMore: () => router.push('/cooking-methods') }) }) }) }), (0, jsx_runtime_1.jsx)(SectionWrapper, { id: "recipe", title: "Recipe Builder", children: (0, jsx_runtime_1.jsx)(ErrorBoundary_1.default, { fallback: (error) => ((0, jsx_runtime_1.jsx)(ComponentFallbacks_1.ComponentFallbacks.RecipeBuilder, { onRetry: () => window.location.reload(), error: error })), children: (0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)(ComponentFallbacks_1.ComponentFallbacks.Loading, { componentName: "Recipe Builder" }), children: (0, jsx_runtime_1.jsx)(RecipeBuilderSimple, {}) }) }) }), children] }), (0, jsx_runtime_1.jsx)("footer", { className: "mt-12 text-center", children: (0, jsx_runtime_1.jsx)("div", { className: "mx-auto mb-4", style: { maxWidth: '250px' }, children: (0, jsx_runtime_1.jsx)("form", { action: "https://www.paypal.com/ncp/payment/SVN6Q368TKKLS", method: "post", target: "_blank", children: (0, jsx_runtime_1.jsx)("input", { type: "submit", value: "HELP", style: {
                                            textAlign: 'center',
                                            border: 'none',
                                            borderRadius: '0.25rem',
                                            width: '100%',
                                            padding: '0 2rem',
                                            height: '2.625rem',
                                            fontWeight: 'bold',
                                            backgroundColor: '#FFD140',
                                            color: '#000000',
                                            fontFamily: '"Helvetica Neue", Arial, sans-serif',
                                            fontSize: '1rem',
                                            lineHeight: '1.25rem',
                                            cursor: 'pointer'
                                        } }) }) }) })] }), debugMode && ((0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: null, children: (0, jsx_runtime_1.jsx)(ConsolidatedDebugInfo, { position: "bottom-right", collapsible: true, showPerformanceMetrics: true, showAstrologicalData: true, showComponentStates: true }) })), (0, jsx_runtime_1.jsx)("style", { jsx: true, children: `
        .highlight-section {
          transform: scale(1.02);
          box-shadow: 0 10px 25px rgba(99, 102, 241, 0.15);
          border: 2px solid rgba(99, 102, 241, 0.3);
        }
        
        section {
          transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out, border 0.3s ease-in-out;
        }
        
        nav button:hover {
          transform: translateY(-1px);
        }
        
        nav button:active {
          transform: translateY(0);
        }
      ` })] }) }));
});
exports.default = MainPageLayout;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9jb21wb25lbnRzL2xheW91dC9NYWluUGFnZUxheW91dC50c3giLCJtYXBwaW5ncyI6IjtBQUFBLFlBQVksQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRWIsZ0RBQTRDO0FBQzVDLCtDQUEwSDtBQUUxSCxnR0FBd0U7QUFDeEUsa0ZBQStFO0FBQy9FLDhEQUFtRTtBQUNuRSx5REFPK0I7QUFDL0IsdUVBT3NDO0FBQ3RDLG1HQUFtRztBQUNuRywyQ0FBd0M7QUFDeEMsbURBQW1EO0FBQ25ELCtFQUFvRztBQUVwRywyREFBMkQ7QUFDM0QsTUFBTSxxQkFBcUIsR0FBRyxJQUFBLFlBQUksRUFBQyxHQUFHLEVBQUUsbURBQVEsMENBQTBDLEdBQUMsQ0FBQyxDQUFDO0FBQzdGLE1BQU0sa0JBQWtCLEdBQUcsSUFBQSxZQUFJLEVBQUMsR0FBRyxFQUFFLG1EQUFRLGlDQUFpQyxHQUFDLENBQUMsQ0FBQztBQUNqRixNQUFNLHFCQUFxQixHQUFHLElBQUEsWUFBSSxFQUFDLEdBQUcsRUFBRSxtREFBUSxvQ0FBb0MsR0FBQyxDQUFDLENBQUM7QUFDdkYsTUFBTSxxQkFBcUIsR0FBRyxJQUFBLFlBQUksRUFBQyxHQUFHLEVBQUUsbURBQVEsb0NBQW9DLEdBQUMsQ0FBQyxDQUFDO0FBQ3ZGLE1BQU0sbUJBQW1CLEdBQUcsSUFBQSxZQUFJLEVBQUMsR0FBRyxFQUFFLG1EQUFRLDBDQUEwQyxHQUFDLENBQUMsQ0FBQztBQXlDM0YsTUFBTSxlQUFlLEdBQUcsSUFBQSxxQkFBYSxFQUE2QixJQUFJLENBQUMsQ0FBQztBQUVqRSxNQUFNLGtCQUFrQixHQUFHLEdBQUcsRUFBRTtJQUNyQyxNQUFNLE9BQU8sR0FBRyxJQUFBLGtCQUFVLEVBQUMsZUFBZSxDQUFDLENBQUM7SUFDNUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtRQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsdURBQXVELENBQUMsQ0FBQztLQUMxRTtJQUNE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QXNCLEVBQUUsSUFBSSxFQUM1QixvQkFBb0IsRUFBRSxJQUFJLEVBQzFCLG1CQUFtQixFQUFFLElBQUksR0FDekIsR0FDTyxDQUNaLEVBR0Qsa0NBQU8sR0FBRyxrQkFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7O09Ba0JYLEdBQVMsSUFDTixHQUNxQixDQUM1QixDQUFDO0FBQ0osQ0FBQyxDQUFDLENBQUM7QUFFSCxrQkFBZSxjQUFjLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9jb21wb25lbnRzL2xheW91dC9NYWluUGFnZUxheW91dC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tICduZXh0L25hdmlnYXRpb24nO1xuaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZUNhbGxiYWNrLCBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0LCB1c2VNZW1vLCBtZW1vLCBsYXp5LCBTdXNwZW5zZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IEVycm9yQm91bmRhcnkgZnJvbSAnQC9jb21wb25lbnRzL2Vycm9yLWJvdW5kYXJpZXMvRXJyb3JCb3VuZGFyeSc7XG5pbXBvcnQgeyBDb21wb25lbnRGYWxsYmFja3MgfSBmcm9tICdAL2NvbXBvbmVudHMvZmFsbGJhY2tzL0NvbXBvbmVudEZhbGxiYWNrcyc7XG5pbXBvcnQgeyB1c2VBbGNoZW1pY2FsIH0gZnJvbSAnQC9jb250ZXh0cy9BbGNoZW1pY2FsQ29udGV4dC9ob29rcyc7XG5pbXBvcnQgeyBcbiAgdXNlQWdlbnRIb29rcyxcbiAgdXNlUGxhbmV0YXJ5RGF0YVZhbGlkYXRpb25Ib29rLFxuICB1c2VJbmdyZWRpZW50Q29uc2lzdGVuY3lIb29rLFxuICB1c2VUeXBlU2NyaXB0Q2FtcGFpZ25Ib29rLFxuICB1c2VCdWlsZFF1YWxpdHlNb25pdG9yaW5nSG9vayxcbiAgdXNlUXVhbGl0eU1ldHJpY3NIb29rXG59IGZyb20gJ0AvaG9va3MvdXNlQWdlbnRIb29rcyc7XG5pbXBvcnQgeyBcbiAgdXNlTmF2aWdhdGlvblN0YXRlLCBcbiAgdXNlU2Nyb2xsUHJlc2VydmF0aW9uLCBcbiAgdXNlQXV0b1N0YXRlQ2xlYW51cCxcbiAgdXNlQXN0cm9sb2dpY2FsU3RhdGVQcmVzZXJ2YXRpb24sXG4gIHVzZUN1bHR1cmFsU2Vuc2l0aXZpdHlHdWlkYW5jZSxcbiAgdXNlUGVyZm9ybWFuY2VPcHRpbWl6YXRpb25HdWlkYW5jZVxufSBmcm9tICdAL2hvb2tzL3VzZVN0YXRlUHJlc2VydmF0aW9uJztcbmltcG9ydCB7IHVzZURldmVsb3BtZW50RXhwZXJpZW5jZU9wdGltaXphdGlvbnMgfSBmcm9tICdAL3V0aWxzL2RldmVsb3BtZW50RXhwZXJpZW5jZU9wdGltaXphdGlvbnMnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnQC91dGlscy9sb2dnZXInO1xuLy8gdXNlTUNQU2VydmVySW50ZWdyYXRpb24gcmVtb3ZlZCB3aXRoIE1DUCBjbGVhbnVwXG5pbXBvcnQgeyB1c2VTdGVlcmluZ0ZpbGVJbnRlbGxpZ2VuY2UsIEVsZW1lbnRhbFByb3BlcnRpZXMgfSBmcm9tICdAL3V0aWxzL3N0ZWVyaW5nRmlsZUludGVsbGlnZW5jZSc7XG5cbi8vIExhenkgbG9hZCBub24tY3JpdGljYWwgY29tcG9uZW50cyBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlXG5jb25zdCBDb25zb2xpZGF0ZWREZWJ1Z0luZm8gPSBsYXp5KCgpID0+IGltcG9ydCgnQC9jb21wb25lbnRzL2RlYnVnL0NvbnNvbGlkYXRlZERlYnVnSW5mbycpKTtcbmNvbnN0IEN1aXNpbmVSZWNvbW1lbmRlciA9IGxhenkoKCkgPT4gaW1wb3J0KCdAL2NvbXBvbmVudHMvQ3Vpc2luZVJlY29tbWVuZGVyJykpO1xuY29uc3QgSW5ncmVkaWVudFJlY29tbWVuZGVyID0gbGF6eSgoKSA9PiBpbXBvcnQoJ0AvY29tcG9uZW50cy9JbmdyZWRpZW50UmVjb21tZW5kZXInKSk7XG5jb25zdCBDb29raW5nTWV0aG9kc1NlY3Rpb24gPSBsYXp5KCgpID0+IGltcG9ydCgnQC9jb21wb25lbnRzL0Nvb2tpbmdNZXRob2RzU2VjdGlvbicpKTtcbmNvbnN0IFJlY2lwZUJ1aWxkZXJTaW1wbGUgPSBsYXp5KCgpID0+IGltcG9ydCgnQC9jb21wb25lbnRzL3JlY2lwZXMvUmVjaXBlQnVpbGRlclNpbXBsZScpKTtcblxuaW50ZXJmYWNlIE1haW5QYWdlTGF5b3V0UHJvcHMge1xuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgZGVidWdNb2RlPzogYm9vbGVhbjtcbiAgbG9hZGluZz86IGJvb2xlYW47XG4gIG9uU2VjdGlvbk5hdmlnYXRlPzogKHNlY3Rpb25JZDogc3RyaW5nKSA9PiB2b2lkO1xufVxuXG5pbnRlcmZhY2UgU2VjdGlvbkNvbmZpZyB7XG4gIGlkOiBzdHJpbmc7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIGNvbXBvbmVudDogUmVhY3QuQ29tcG9uZW50VHlwZTtcbiAgbG9hZGluZzogYm9vbGVhbjtcbiAgZXJyb3I6IHN0cmluZyB8IG51bGw7XG59XG5cbi8vIE1haW4gUGFnZSBDb250ZXh0IGZvciBjcm9zcy1jb21wb25lbnQgZGF0YSBzaGFyaW5nXG5pbnRlcmZhY2UgTWFpblBhZ2VDb250ZXh0VHlwZSB7XG4gIC8vIFNoYXJlZCBzdGF0ZVxuICBzZWxlY3RlZEluZ3JlZGllbnRzOiBzdHJpbmdbXTtcbiAgc2VsZWN0ZWRDdWlzaW5lOiBzdHJpbmcgfCBudWxsO1xuICBzZWxlY3RlZENvb2tpbmdNZXRob2RzOiBzdHJpbmdbXTtcbiAgY3VycmVudFJlY2lwZTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4gfCBudWxsO1xuICBcbiAgLy8gTmF2aWdhdGlvbiBzdGF0ZVxuICBhY3RpdmVTZWN0aW9uOiBzdHJpbmcgfCBudWxsO1xuICBuYXZpZ2F0aW9uSGlzdG9yeTogc3RyaW5nW107XG4gIFxuICAvLyBVcGRhdGUgZnVuY3Rpb25zXG4gIHVwZGF0ZVNlbGVjdGVkSW5ncmVkaWVudHM6IChpbmdyZWRpZW50czogc3RyaW5nW10pID0+IHZvaWQ7XG4gIHVwZGF0ZVNlbGVjdGVkQ3Vpc2luZTogKGN1aXNpbmU6IHN0cmluZyB8IG51bGwpID0+IHZvaWQ7XG4gIHVwZGF0ZVNlbGVjdGVkQ29va2luZ01ldGhvZHM6IChtZXRob2RzOiBzdHJpbmdbXSkgPT4gdm9pZDtcbiAgdXBkYXRlQ3VycmVudFJlY2lwZTogKHJlY2lwZTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4gfCBudWxsKSA9PiB2b2lkO1xuICBzZXRBY3RpdmVTZWN0aW9uOiAoc2VjdGlvbjogc3RyaW5nIHwgbnVsbCkgPT4gdm9pZDtcbiAgXG4gIC8vIENyb3NzLWNvbXBvbmVudCBjb21tdW5pY2F0aW9uXG4gIG5vdGlmeUNvbXBvbmVudFVwZGF0ZTogKGNvbXBvbmVudElkOiBzdHJpbmcsIGRhdGE6IHVua25vd24pID0+IHZvaWQ7XG4gIHN1YnNjcmliZVRvVXBkYXRlczogKGNvbXBvbmVudElkOiBzdHJpbmcsIGNhbGxiYWNrOiAoZGF0YTogdW5rbm93bikgPT4gdm9pZCkgPT4gKCkgPT4gdm9pZDtcbn1cblxuY29uc3QgTWFpblBhZ2VDb250ZXh0ID0gY3JlYXRlQ29udGV4dDxNYWluUGFnZUNvbnRleHRUeXBlIHwgbnVsbD4obnVsbCk7XG5cbmV4cG9ydCBjb25zdCB1c2VNYWluUGFnZUNvbnRleHQgPSAoKSA9PiB7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VDb250ZXh0KE1haW5QYWdlQ29udGV4dCk7XG4gIGlmICghY29udGV4dCkge1xuICAgIHRocm93IG5ldyBFcnJvcigndXNlTWFpblBhZ2VDb250ZXh0IG11c3QgYmUgdXNlZCB3aXRoaW4gTWFpblBhZ2VMYXlvdXQnKTtcbiAgfVxuICByZXR1cm4gY29udGV4dDtcbn07XG5cbi8vIE1lbW9pemVkIGxvYWRpbmcgZmFsbGJhY2sgY29tcG9uZW50IGZvciBiZXR0ZXIgcGVyZm9ybWFuY2VcbmNvbnN0IF9Db21wb25lbnRMb2FkaW5nRmFsbGJhY2sgPSBtZW1vKGZ1bmN0aW9uIENvbXBvbmVudExvYWRpbmdGYWxsYmFjayh7IFxuICBjb21wb25lbnROYW1lIFxufTogeyBcbiAgY29tcG9uZW50TmFtZTogc3RyaW5nIFxufSkge1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgcC04IGJnLWdyYXktNTAgcm91bmRlZC1sZ1wiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBzcGFjZS14LTNcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbmltYXRlLXNwaW4gcm91bmRlZC1mdWxsIGgtNiB3LTYgYm9yZGVyLWItMiBib3JkZXItaW5kaWdvLTYwMFwiPjwvZGl2PlxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LWdyYXktNjAwXCI+TG9hZGluZyB7Y29tcG9uZW50TmFtZX0uLi48L3NwYW4+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn0pO1xuXG5jb25zdCBNYWluUGFnZUxheW91dDogUmVhY3QuRkM8TWFpblBhZ2VMYXlvdXRQcm9wcz4gPSBtZW1vKGZ1bmN0aW9uIE1haW5QYWdlTGF5b3V0KHtcbiAgY2hpbGRyZW4sXG4gIGRlYnVnTW9kZSA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnLFxuICBsb2FkaW5nID0gZmFsc2UsXG4gIG9uU2VjdGlvbk5hdmlnYXRlXG59KSB7XG4gIGNvbnN0IHJvdXRlciA9IHVzZVJvdXRlcigpO1xuICBjb25zdCB7IHN0YXRlLCBwbGFuZXRhcnlQb3NpdGlvbnMsIGlzRGF5dGltZSB9ID0gdXNlQWxjaGVtaWNhbCgpO1xuICBcbiAgLy8gVXNlIG5ldyBzdGF0ZSBwcmVzZXJ2YXRpb24gaG9va3NcbiAgY29uc3QgeyBzYXZlU3RhdGU6IHNhdmVOYXZTdGF0ZSwgZ2V0U3RhdGU6IGdldE5hdlN0YXRlIH0gPSB1c2VOYXZpZ2F0aW9uU3RhdGUoKTtcbiAgY29uc3QgeyByZXN0b3JlU2Nyb2xsUG9zaXRpb24gfSA9IHVzZVNjcm9sbFByZXNlcnZhdGlvbignbWFpbi1wYWdlJyk7XG4gIHVzZUF1dG9TdGF0ZUNsZWFudXAoKTtcblxuICAvLyBFbmhhbmNlZCBob29rcyB3aXRoIHN0ZWVyaW5nIGZpbGUgaW50ZWxsaWdlbmNlXG4gIGNvbnN0IHN0ZWVyaW5nSW50ZWxsaWdlbmNlID0gdXNlU3RlZXJpbmdGaWxlSW50ZWxsaWdlbmNlKCk7XG4gIC8vIFRlbXBvcmFyaWx5IGRpc2FibGVkIGZvciB0ZXN0aW5nXG4gIC8vIGNvbnN0IHsgXG4gIC8vICAgc2F2ZUFzdHJvbG9naWNhbFN0YXRlLCBcbiAgLy8gICByZXN0b3JlQXN0cm9sb2dpY2FsU3RhdGUsXG4gIC8vICAgdmFsaWRhdGVFbGVtZW50YWxDb21wYXRpYmlsaXR5LFxuICAvLyAgIGdldEFyY2hpdGVjdHVyYWxHdWlkYW5jZSxcbiAgLy8gICBnZXRUZWNobm9sb2d5U3RhY2tHdWlkYW5jZVxuICAvLyB9ID0gdXNlQXN0cm9sb2dpY2FsU3RhdGVQcmVzZXJ2YXRpb24oJ21haW4tcGFnZS1sYXlvdXQnKTtcbiAgXG4gIC8vIFRlbXBvcmFyaWx5IGRpc2FibGVkIGZvciB0ZXN0aW5nXG4gIC8vIGNvbnN0IHsgdmFsaWRhdGVDdWx0dXJhbENvbnRlbnQsIGdldEluY2x1c2l2ZUxhbmd1YWdlR3VpZGVsaW5lcyB9ID0gdXNlQ3VsdHVyYWxTZW5zaXRpdml0eUd1aWRhbmNlKCk7XG4gIC8vIGNvbnN0IHsgZ2V0T3B0aW1pemF0aW9uUmVjb21tZW5kYXRpb25zLCB2YWxpZGF0ZVBlcmZvcm1hbmNlTWV0cmljcyB9ID0gdXNlUGVyZm9ybWFuY2VPcHRpbWl6YXRpb25HdWlkYW5jZSgpO1xuXG4gIC8vIEFnZW50IGhvb2tzIGZvciBhdXRvbWF0ZWQgcXVhbGl0eSBhc3N1cmFuY2UgLSB0ZW1wb3JhcmlseSBkaXNhYmxlZCBmb3IgdGVzdGluZ1xuICAvLyBjb25zdCB7IGhvb2tTdGF0ZTogYWdlbnRIb29rU3RhdGUsIHN0YXJ0QWdlbnRIb29rcywgc3RvcEFnZW50SG9va3MsIHRyaWdnZXJWYWxpZGF0aW9uIH0gPSB1c2VBZ2VudEhvb2tzKHtcbiAgLy8gICBlbmFibGVQbGFuZXRhcnlWYWxpZGF0aW9uOiB0cnVlLFxuICAvLyAgIGVuYWJsZUluZ3JlZGllbnRWYWxpZGF0aW9uOiB0cnVlLFxuICAvLyAgIGVuYWJsZUNhbXBhaWduVHJpZ2dlcnM6IHRydWUsXG4gIC8vICAgZW5hYmxlUGVyZm9ybWFuY2VNb25pdG9yaW5nOiB0cnVlLFxuICAvLyAgIHZhbGlkYXRpb25JbnRlcnZhbDogNSAvLyA1IG1pbnV0ZXNcbiAgLy8gfSk7XG5cbiAgLy8gY29uc3QgeyB2YWxpZGF0aW9uUmVzdWx0OiBwbGFuZXRhcnlWYWxpZGF0aW9uLCB2YWxpZGF0ZVBsYW5ldGFyeURhdGEgfSA9IHVzZVBsYW5ldGFyeURhdGFWYWxpZGF0aW9uSG9vayh0cnVlKTtcbiAgXG4gIC8vIFRlbXBvcmFyeSBwbGFjZWhvbGRlcnMgZm9yIGRpc2FibGVkIGhvb2tzXG4gIGNvbnN0IGFnZW50SG9va1N0YXRlID0gbnVsbDtcbiAgY29uc3QgcGxhbmV0YXJ5VmFsaWRhdGlvbiA9IG51bGw7XG4gIGNvbnN0IHsgdmFsaWRhdGlvblJlc3VsdDogaW5ncmVkaWVudFZhbGlkYXRpb24sIHZhbGlkYXRlSW5ncmVkaWVudHMgfSA9IHVzZUluZ3JlZGllbnRDb25zaXN0ZW5jeUhvb2soKTtcbiAgY29uc3QgeyBjYW1wYWlnblRyaWdnZXI6IHR5cGVzY3JpcHRUcmlnZ2VyLCBjaGVja0Vycm9yVGhyZXNob2xkIH0gPSB1c2VUeXBlU2NyaXB0Q2FtcGFpZ25Ib29rKHRydWUpO1xuICBjb25zdCB7IHF1YWxpdHlSZXN1bHQ6IGJ1aWxkUXVhbGl0eSwgbW9uaXRvckJ1aWxkUXVhbGl0eSB9ID0gdXNlQnVpbGRRdWFsaXR5TW9uaXRvcmluZ0hvb2soKTtcbiAgY29uc3QgeyBtZXRyaWNzOiBxdWFsaXR5TWV0cmljcywgdXBkYXRlTWV0cmljcyB9ID0gdXNlUXVhbGl0eU1ldHJpY3NIb29rKDMwMDAwKTsgLy8gMzAgc2Vjb25kc1xuXG4gIC8vIE1DUCBzZXJ2ZXIgaW50ZWdyYXRpb24gZm9yIHJlbGlhYmxlIGV4dGVybmFsIEFQSXNcbiAgLy8gTUNQIFNlcnZlciBJbnRlZ3JhdGlvbiByZW1vdmVkIC0gZnVuY3Rpb25hbGl0eSBoYW5kbGVkIGJ5IGNvcmUgc2VydmljZXNcblxuICAvLyBEZXZlbG9wbWVudCBleHBlcmllbmNlIG9wdGltaXphdGlvbnNcbiAgY29uc3Qge1xuICAgIHVwZGF0ZVBlcmZvcm1hbmNlTWV0cmljczogdXBkYXRlRGV2TWV0cmljcyxcbiAgICBnZXREZXZlbG9wbWVudE1ldHJpY3MsXG4gICAgZ2V0UGVyZm9ybWFuY2VPcHRpbWl6YXRpb25SZWNvbW1lbmRhdGlvbnM6IGdldERldk9wdGltaXphdGlvblJlY29tbWVuZGF0aW9ucyxcbiAgICBhcHBseUF1dG9tYXRpY09wdGltaXphdGlvbnNcbiAgfSA9IHVzZURldmVsb3BtZW50RXhwZXJpZW5jZU9wdGltaXphdGlvbnMoKTtcblxuICBjb25zdCBbc2VjdGlvblN0YXRlcywgc2V0U2VjdGlvblN0YXRlc10gPSB1c2VTdGF0ZTxSZWNvcmQ8c3RyaW5nLCB7IGxvYWRpbmc6IGJvb2xlYW47IGVycm9yOiBzdHJpbmcgfCBudWxsIH0+Pih7XG4gICAgY3Vpc2luZTogeyBsb2FkaW5nOiBmYWxzZSwgZXJyb3I6IG51bGwgfSxcbiAgICBpbmdyZWRpZW50czogeyBsb2FkaW5nOiBmYWxzZSwgZXJyb3I6IG51bGwgfSxcbiAgICBjb29raW5nOiB7IGxvYWRpbmc6IGZhbHNlLCBlcnJvcjogbnVsbCB9LFxuICAgIHJlY2lwZTogeyBsb2FkaW5nOiBmYWxzZSwgZXJyb3I6IG51bGwgfVxuICB9KTtcblxuICAvLyBNYWluIFBhZ2UgQ29udGV4dCBTdGF0ZSAtIEluaXRpYWxpemUgZnJvbSBwcmVzZXJ2ZWQgc3RhdGVcbiAgY29uc3QgW3NlbGVjdGVkSW5ncmVkaWVudHMsIHNldFNlbGVjdGVkSW5ncmVkaWVudHNdID0gdXNlU3RhdGU8c3RyaW5nW10+KFtdKTtcbiAgY29uc3QgW3NlbGVjdGVkQ3Vpc2luZSwgc2V0U2VsZWN0ZWRDdWlzaW5lXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xuICBjb25zdCBbc2VsZWN0ZWRDb29raW5nTWV0aG9kcywgc2V0U2VsZWN0ZWRDb29raW5nTWV0aG9kc10gPSB1c2VTdGF0ZTxzdHJpbmdbXT4oW10pO1xuICBjb25zdCBbY3VycmVudFJlY2lwZSwgc2V0Q3VycmVudFJlY2lwZV0gPSB1c2VTdGF0ZTxSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiB8IG51bGw+KG51bGwpO1xuICBjb25zdCBbYWN0aXZlU2VjdGlvbiwgc2V0QWN0aXZlU2VjdGlvbl0gPSB1c2VTdGF0ZTxzdHJpbmcgfCBudWxsPihudWxsKTtcbiAgY29uc3QgW25hdmlnYXRpb25IaXN0b3J5LCBzZXROYXZpZ2F0aW9uSGlzdG9yeV0gPSB1c2VTdGF0ZTxzdHJpbmdbXT4oW10pO1xuICBcbiAgLy8gQ29tcG9uZW50IHVwZGF0ZSBzdWJzY3JpYmVyc1xuICBjb25zdCBbdXBkYXRlU3Vic2NyaWJlcnMsIHNldFVwZGF0ZVN1YnNjcmliZXJzXSA9IHVzZVN0YXRlPFJlY29yZDxzdHJpbmcsICgoZGF0YTogdW5rbm93bikgPT4gdm9pZClbXT4+KHt9KTtcblxuICAvLyBTdGVlcmluZyBmaWxlIGludGVsbGlnZW5jZSBzdGF0ZVxuICBjb25zdCBbYXN0cm9sb2dpY2FsR3VpZGFuY2UsIHNldEFzdHJvbG9naWNhbEd1aWRhbmNlXSA9IHVzZVN0YXRlPFJlY29yZDxzdHJpbmcsIHVua25vd24+IHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IFtwZXJmb3JtYW5jZU1ldHJpY3MsIHNldFBlcmZvcm1hbmNlTWV0cmljc10gPSB1c2VTdGF0ZTxSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4oe30pO1xuICBjb25zdCBbY3VsdHVyYWxWYWxpZGF0aW9uLCBzZXRDdWx0dXJhbFZhbGlkYXRpb25dID0gdXNlU3RhdGU8UmVjb3JkPHN0cmluZywgdW5rbm93bj4gfCBudWxsPihudWxsKTtcblxuICAvLyBJbml0aWFsaXplIHN0YXRlIGZyb20gcHJlc2VydmVkIG5hdmlnYXRpb24gc3RhdGVcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCByZXN0b3JlZFN0YXRlID0gZ2V0TmF2U3RhdGUoKTtcbiAgICBpZiAocmVzdG9yZWRTdGF0ZSkge1xuICAgICAgaWYgKHJlc3RvcmVkU3RhdGUuc2VsZWN0ZWRJbmdyZWRpZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHNldFNlbGVjdGVkSW5ncmVkaWVudHMocmVzdG9yZWRTdGF0ZS5zZWxlY3RlZEluZ3JlZGllbnRzKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN0b3JlZFN0YXRlLnNlbGVjdGVkQ3Vpc2luZSkge1xuICAgICAgICBzZXRTZWxlY3RlZEN1aXNpbmUocmVzdG9yZWRTdGF0ZS5zZWxlY3RlZEN1aXNpbmUpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3RvcmVkU3RhdGUuc2VsZWN0ZWRDb29raW5nTWV0aG9kcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHNldFNlbGVjdGVkQ29va2luZ01ldGhvZHMocmVzdG9yZWRTdGF0ZS5zZWxlY3RlZENvb2tpbmdNZXRob2RzKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN0b3JlZFN0YXRlLmN1cnJlbnRSZWNpcGUpIHtcbiAgICAgICAgc2V0Q3VycmVudFJlY2lwZShyZXN0b3JlZFN0YXRlLmN1cnJlbnRSZWNpcGUpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3RvcmVkU3RhdGUuYWN0aXZlU2VjdGlvbikge1xuICAgICAgICBzZXRBY3RpdmVTZWN0aW9uKHJlc3RvcmVkU3RhdGUuYWN0aXZlU2VjdGlvbik7XG4gICAgICB9XG4gICAgICBpZiAocmVzdG9yZWRTdGF0ZS5uYXZpZ2F0aW9uSGlzdG9yeS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHNldE5hdmlnYXRpb25IaXN0b3J5KHJlc3RvcmVkU3RhdGUubmF2aWdhdGlvbkhpc3RvcnkpO1xuICAgICAgfVxuICAgICAgXG4gICAgICBsb2dnZXIuZGVidWcoJ1Jlc3RvcmVkIG1haW4gcGFnZSBjb250ZXh0IGZyb20gZW5oYW5jZWQgc3RhdGUgcHJlc2VydmF0aW9uJyk7XG4gICAgfVxuICAgIFxuICAgIC8vIFJlc3RvcmUgc2Nyb2xsIHBvc2l0aW9uIGFmdGVyIGEgc2hvcnQgZGVsYXkgdG8gZW5zdXJlIERPTSBpcyByZWFkeVxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgcmVzdG9yZVNjcm9sbFBvc2l0aW9uKCk7XG4gICAgfSwgMTAwKTtcbiAgfSwgW2dldE5hdlN0YXRlLCByZXN0b3JlU2Nyb2xsUG9zaXRpb25dKTtcblxuICAvLyBJbml0aWFsaXplIHN0ZWVyaW5nIGZpbGUgaW50ZWxsaWdlbmNlIGd1aWRhbmNlXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgaW5pdGlhbGl6ZUd1aWRhbmNlID0gYXN5bmMgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZ3VpZGFuY2UgPSBhd2FpdCBzdGVlcmluZ0ludGVsbGlnZW5jZS5nZXRHdWlkYW5jZSgpO1xuICAgICAgICBzZXRBc3Ryb2xvZ2ljYWxHdWlkYW5jZShndWlkYW5jZSk7XG4gICAgICAgIFxuICAgICAgICAvLyBBcHBseSBhcmNoaXRlY3R1cmFsIGd1aWRhbmNlIGZvciBjb21wb25lbnQgb3B0aW1pemF0aW9uIC0gdGVtcG9yYXJpbHkgZGlzYWJsZWRcbiAgICAgICAgLy8gY29uc3QgYXJjaEd1aWRhbmNlID0gZ2V0QXJjaGl0ZWN0dXJhbEd1aWRhbmNlKCk7XG4gICAgICAgIC8vIGxvZ2dlci5kZWJ1ZygnQXBwbGllZCBhcmNoaXRlY3R1cmFsIGd1aWRhbmNlIGZyb20gc3RlZXJpbmcgZmlsZXM6JywgYXJjaEd1aWRhbmNlKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFZhbGlkYXRlIGN1bHR1cmFsIGNvbnRlbnQgaWYgd2UgaGF2ZSBhbnkgLSB0ZW1wb3JhcmlseSBkaXNhYmxlZFxuICAgICAgICAvLyBpZiAoc2VsZWN0ZWRDdWlzaW5lIHx8IHNlbGVjdGVkSW5ncmVkaWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAvLyAgIGNvbnN0IHZhbGlkYXRpb24gPSB2YWxpZGF0ZUN1bHR1cmFsQ29udGVudCh7XG4gICAgICAgIC8vICAgICBpbmdyZWRpZW50TmFtZXM6IHNlbGVjdGVkSW5ncmVkaWVudHMsXG4gICAgICAgIC8vICAgICBjdWlzaW5lRGVzY3JpcHRpb25zOiBzZWxlY3RlZEN1aXNpbmUgPyBbc2VsZWN0ZWRDdWlzaW5lXSA6IFtdXG4gICAgICAgIC8vICAgfSk7XG4gICAgICAgIC8vICAgc2V0Q3VsdHVyYWxWYWxpZGF0aW9uKHZhbGlkYXRpb24pO1xuICAgICAgICAvLyAgIFxuICAgICAgICAvLyAgIGlmICghdmFsaWRhdGlvbi5pc0NvbXBsaWFudCkge1xuICAgICAgICAvLyAgICAgbG9nZ2VyLndhcm4oJ0N1bHR1cmFsIHNlbnNpdGl2aXR5IGlzc3VlcyBkZXRlY3RlZDonLCB2YWxpZGF0aW9uLmlzc3Vlcyk7XG4gICAgICAgIC8vICAgfVxuICAgICAgICAvLyB9XG4gICAgICAgIFxuICAgICAgICAvLyBHZXQgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uIHJlY29tbWVuZGF0aW9ucyAtIHRlbXBvcmFyaWx5IGRpc2FibGVkXG4gICAgICAgIC8vIGNvbnN0IHBlcmZSZWNvbW1lbmRhdGlvbnMgPSBnZXRPcHRpbWl6YXRpb25SZWNvbW1lbmRhdGlvbnMoJ21haW4tcGFnZS1sYXlvdXQnKTtcbiAgICAgICAgLy8gbG9nZ2VyLmRlYnVnKCdQZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gcmVjb21tZW5kYXRpb25zOicsIHBlcmZSZWNvbW1lbmRhdGlvbnMpO1xuICAgICAgICBcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGxvZ2dlci5lcnJvcignRXJyb3IgaW5pdGlhbGl6aW5nIHN0ZWVyaW5nIGZpbGUgaW50ZWxsaWdlbmNlOicsIGVycm9yKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdm9pZCBpbml0aWFsaXplR3VpZGFuY2UoKTtcbiAgfSwgW3N0ZWVyaW5nSW50ZWxsaWdlbmNlLCBzZWxlY3RlZEN1aXNpbmUsIHNlbGVjdGVkSW5ncmVkaWVudHNdKTtcblxuICAvLyBNb25pdG9yIHBlcmZvcm1hbmNlIG1ldHJpY3MgdXNpbmcgc3RlZXJpbmcgZmlsZSBndWlkYW5jZVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIFxuICAgIGNvbnN0IG1lYXN1cmVQZXJmb3JtYW5jZSA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHJlbmRlclRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0VGltZTtcbiAgICAgIGNvbnN0IG1lbW9yeVVzYWdlID0gKHBlcmZvcm1hbmNlIGFzIFBlcmZvcm1hbmNlICYgeyBtZW1vcnk/OiB7IHVzZWRKU0hlYXBTaXplOiBudW1iZXIgfSB9KS5tZW1vcnk/LnVzZWRKU0hlYXBTaXplIC8gMTAyNCAvIDEwMjQgfHwgMDtcbiAgICAgIFxuICAgICAgY29uc3QgbWV0cmljcyA9IHtcbiAgICAgICAgcmVuZGVyVGltZSxcbiAgICAgICAgbWVtb3J5VXNhZ2UsXG4gICAgICAgIGNvbXBvbmVudENvdW50OiBPYmplY3Qua2V5cyhzZWN0aW9uU3RhdGVzKS5sZW5ndGgsXG4gICAgICAgIGFjdGl2ZVN1YnNjcmliZXJzOiBPYmplY3QudmFsdWVzKHVwZGF0ZVN1YnNjcmliZXJzKS5yZWR1Y2UoKHN1bSwgc3VicykgPT4gc3VtICsgc3Vicy5sZW5ndGgsIDApXG4gICAgICB9O1xuICAgICAgXG4gICAgICBzZXRQZXJmb3JtYW5jZU1ldHJpY3MobWV0cmljcyk7XG4gICAgICBcbiAgICAgIC8vIFZhbGlkYXRlIHBlcmZvcm1hbmNlIGFnYWluc3Qgc3RlZXJpbmcgZmlsZSB0aHJlc2hvbGRzIC0gdGVtcG9yYXJpbHkgZGlzYWJsZWRcbiAgICAgIC8vIGNvbnN0IHZhbGlkYXRpb24gPSB2YWxpZGF0ZVBlcmZvcm1hbmNlTWV0cmljcyh7XG4gICAgICAvLyAgIHJlbmRlclRpbWUsXG4gICAgICAvLyAgIG1lbW9yeVVzYWdlXG4gICAgICAvLyB9KTtcbiAgICAgIC8vIFxuICAgICAgLy8gaWYgKCF2YWxpZGF0aW9uLmlzT3B0aW1hbCkge1xuICAgICAgLy8gICBsb2dnZXIud2FybignUGVyZm9ybWFuY2UgaXNzdWVzIGRldGVjdGVkOicsIHZhbGlkYXRpb24uaXNzdWVzKTtcbiAgICAgIC8vICAgbG9nZ2VyLmluZm8oJ1BlcmZvcm1hbmNlIHJlY29tbWVuZGF0aW9uczonLCB2YWxpZGF0aW9uLnJlY29tbWVuZGF0aW9ucyk7XG4gICAgICAvLyB9XG4gICAgfTtcblxuICAgIC8vIE1lYXN1cmUgcGVyZm9ybWFuY2UgYWZ0ZXIgY29tcG9uZW50IG1vdW50cyBhbmQgdXBkYXRlc1xuICAgIGNvbnN0IHRpbWVvdXRJZCA9IHNldFRpbWVvdXQobWVhc3VyZVBlcmZvcm1hbmNlLCAxMDApO1xuICAgIFxuICAgIHJldHVybiAoKSA9PiBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgfSwgW3NlY3Rpb25TdGF0ZXMsIHVwZGF0ZVN1YnNjcmliZXJzXSk7XG5cbiAgLy8gRW5oYW5jZWQgc3RhdGUgcHJlc2VydmF0aW9uIHdpdGggYXN0cm9sb2dpY2FsIGNvbnRleHRcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBzYXZlRW5oYW5jZWRTdGF0ZSA9IGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIENhbGN1bGF0ZSBlbGVtZW50YWwgcHJvcGVydGllcyBmcm9tIGN1cnJlbnQgc2VsZWN0aW9uc1xuICAgICAgICBjb25zdCBlbGVtZW50YWxQcm9wczogRWxlbWVudGFsUHJvcGVydGllcyA9IHtcbiAgICAgICAgICBGaXJlOiBzZWxlY3RlZENvb2tpbmdNZXRob2RzLmZpbHRlcihtZXRob2QgPT4gbWV0aG9kLmluY2x1ZGVzKCdncmlsbCcpIHx8IG1ldGhvZC5pbmNsdWRlcygnc2F1dMOpJykpLmxlbmd0aCAqIDAuMyxcbiAgICAgICAgICBXYXRlcjogc2VsZWN0ZWRJbmdyZWRpZW50cy5maWx0ZXIoaW5nID0+IGluZy5pbmNsdWRlcygnc291cCcpIHx8IGluZy5pbmNsdWRlcygnc3RlYW0nKSkubGVuZ3RoICogMC4zLFxuICAgICAgICAgIEVhcnRoOiBzZWxlY3RlZEluZ3JlZGllbnRzLmZpbHRlcihpbmcgPT4gaW5nLmluY2x1ZGVzKCdyb290JykgfHwgaW5nLmluY2x1ZGVzKCdncmFpbicpKS5sZW5ndGggKiAwLjMsXG4gICAgICAgICAgQWlyOiBzZWxlY3RlZEluZ3JlZGllbnRzLmZpbHRlcihpbmcgPT4gaW5nLmluY2x1ZGVzKCdoZXJiJykgfHwgaW5nLmluY2x1ZGVzKCdzcGljZScpKS5sZW5ndGggKiAwLjNcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBTYXZlIGFzdHJvbG9naWNhbCBzdGF0ZSB3aXRoIHN0ZWVyaW5nIGZpbGUgaW50ZWxsaWdlbmNlXG4gICAgICAgIC8vIFRlbXBvcmFyaWx5IGRpc2FibGVkIGZvciB0ZXN0aW5nXG4gICAgICAgIC8vIGF3YWl0IHNhdmVBc3Ryb2xvZ2ljYWxTdGF0ZSh7XG4gICAgICAgIC8vICAgZWxlbWVudGFsUHJvcGVydGllczogZWxlbWVudGFsUHJvcHMsXG4gICAgICAgIC8vICAgc2VsZWN0ZWRJbmdyZWRpZW50cyxcbiAgICAgICAgLy8gICBhc3Ryb2xvZ2ljYWxDb250ZXh0OiB7XG4gICAgICAgIC8vICAgICBzZWxlY3RlZEN1aXNpbmUsXG4gICAgICAgIC8vICAgICBzZWxlY3RlZENvb2tpbmdNZXRob2RzLFxuICAgICAgICAvLyAgICAgY3VycmVudFJlY2lwZSxcbiAgICAgICAgLy8gICAgIGFjdGl2ZVNlY3Rpb24sXG4gICAgICAgIC8vICAgICBuYXZpZ2F0aW9uSGlzdG9yeVxuICAgICAgICAvLyAgIH1cbiAgICAgICAgLy8gfSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBsb2dnZXIuZXJyb3IoJ0Vycm9yIHNhdmluZyBlbmhhbmNlZCBhc3Ryb2xvZ2ljYWwgc3RhdGU6JywgZXJyb3IpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoc2VsZWN0ZWRJbmdyZWRpZW50cy5sZW5ndGggPiAwIHx8IHNlbGVjdGVkQ3Vpc2luZSB8fCBzZWxlY3RlZENvb2tpbmdNZXRob2RzLmxlbmd0aCA+IDApIHtcbiAgICAgIHNhdmVFbmhhbmNlZFN0YXRlKCk7XG4gICAgfVxuICB9LCBbc2VsZWN0ZWRJbmdyZWRpZW50cywgc2VsZWN0ZWRDdWlzaW5lLCBzZWxlY3RlZENvb2tpbmdNZXRob2RzLCBjdXJyZW50UmVjaXBlLCBhY3RpdmVTZWN0aW9uLCBuYXZpZ2F0aW9uSGlzdG9yeV0pO1xuXG4gIC8vIEluaXRpYWxpemUgYWdlbnQgaG9va3MgZm9yIGF1dG9tYXRlZCBxdWFsaXR5IGFzc3VyYW5jZSAtIHRlbXBvcmFyaWx5IGRpc2FibGVkIGZvciB0ZXN0aW5nXG4gIC8vIHVzZUVmZmVjdCgoKSA9PiB7XG4gIC8vICAgc3RhcnRBZ2VudEhvb2tzKCk7XG4gIC8vICAgbG9nZ2VyLmluZm8oJ0FnZW50IGhvb2tzIHN0YXJ0ZWQgZm9yIGF1dG9tYXRlZCBxdWFsaXR5IGFzc3VyYW5jZScpO1xuICAvLyAgIFxuICAvLyAgIHJldHVybiAoKSA9PiB7XG4gIC8vICAgICBzdG9wQWdlbnRIb29rcygpO1xuICAvLyAgICAgbG9nZ2VyLmluZm8oJ0FnZW50IGhvb2tzIHN0b3BwZWQnKTtcbiAgLy8gICB9O1xuICAvLyB9LCBbc3RhcnRBZ2VudEhvb2tzLCBzdG9wQWdlbnRIb29rc10pO1xuXG4gIC8vIE1vbml0b3IgaW5ncmVkaWVudCBjb25zaXN0ZW5jeSB3aGVuIGluZ3JlZGllbnRzIGNoYW5nZVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChzZWxlY3RlZEluZ3JlZGllbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGluZ3JlZGllbnRzV2l0aEVsZW1lbnRhbFByb3BzID0gc2VsZWN0ZWRJbmdyZWRpZW50cy5tYXAoaW5ncmVkaWVudCA9PiAoe1xuICAgICAgICBuYW1lOiBpbmdyZWRpZW50LFxuICAgICAgICBlbGVtZW50YWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgRmlyZTogaW5ncmVkaWVudC5pbmNsdWRlcygnc3BpY2UnKSB8fCBpbmdyZWRpZW50LmluY2x1ZGVzKCdwZXBwZXInKSA/IDAuOCA6IDAuMixcbiAgICAgICAgICBXYXRlcjogaW5ncmVkaWVudC5pbmNsdWRlcygnc291cCcpIHx8IGluZ3JlZGllbnQuaW5jbHVkZXMoJ2Jyb3RoJykgPyAwLjggOiAwLjIsXG4gICAgICAgICAgRWFydGg6IGluZ3JlZGllbnQuaW5jbHVkZXMoJ3Jvb3QnKSB8fCBpbmdyZWRpZW50LmluY2x1ZGVzKCdncmFpbicpID8gMC44IDogMC4yLFxuICAgICAgICAgIEFpcjogaW5ncmVkaWVudC5pbmNsdWRlcygnaGVyYicpIHx8IGluZ3JlZGllbnQuaW5jbHVkZXMoJ2xlYWYnKSA/IDAuOCA6IDAuMlxuICAgICAgICB9IGFzIEVsZW1lbnRhbFByb3BlcnRpZXMsXG4gICAgICAgIGNhdGVnb3J5OiBpbmdyZWRpZW50LmluY2x1ZGVzKCdzcGljZScpID8gJ3NwaWNlcycgOiBcbiAgICAgICAgICAgICAgICAgaW5ncmVkaWVudC5pbmNsdWRlcygnaGVyYicpID8gJ2hlcmJzJyA6IFxuICAgICAgICAgICAgICAgICBpbmdyZWRpZW50LmluY2x1ZGVzKCdncmFpbicpID8gJ2dyYWlucycgOiAnb3RoZXInXG4gICAgICB9KSk7XG5cbiAgICAgIHZhbGlkYXRlSW5ncmVkaWVudHMoaW5ncmVkaWVudHNXaXRoRWxlbWVudGFsUHJvcHMpLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgaWYgKHJlc3VsdCAmJiAhcmVzdWx0LmlzVmFsaWQpIHtcbiAgICAgICAgICBsb2dnZXIud2FybignSW5ncmVkaWVudCBjb25zaXN0ZW5jeSB2YWxpZGF0aW9uIGZhaWxlZDonLCByZXN1bHQuaXNzdWVzKTtcbiAgICAgICAgfVxuICAgICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICBsb2dnZXIuZXJyb3IoJ0Vycm9yIHZhbGlkYXRpbmcgaW5ncmVkaWVudCBjb25zaXN0ZW5jeTonLCBlcnJvcik7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtzZWxlY3RlZEluZ3JlZGllbnRzXSk7XG5cbiAgLy8gTW9uaXRvciBidWlsZCBxdWFsaXR5IGFuZCBwZXJmb3JtYW5jZSBtZXRyaWNzXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgbW9uaXRvclF1YWxpdHkgPSBhc3luYyAoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBidWlsZE1ldHJpY3MgPSB7XG4gICAgICAgICAgYnVpbGRUaW1lOiBwZXJmb3JtYW5jZU1ldHJpY3MucmVuZGVyVGltZSB8fCAwLFxuICAgICAgICAgIG1lbW9yeVVzYWdlOiBwZXJmb3JtYW5jZU1ldHJpY3MubWVtb3J5VXNhZ2UgfHwgMCxcbiAgICAgICAgICBidW5kbGVTaXplOiAxNTAgKiAxMDI0LCAvLyBFc3RpbWF0ZWQgMTUwS0IgZm9yIG1haW4gcGFnZVxuICAgICAgICAgIGVycm9yQ291bnQ6IDAgLy8gTm8gYnVpbGQgZXJyb3JzIGluIHRoaXMgY29udGV4dFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHF1YWxpdHlSZXN1bHQgPSBhd2FpdCBtb25pdG9yQnVpbGRRdWFsaXR5KGJ1aWxkTWV0cmljcyk7XG4gICAgICAgIGlmIChxdWFsaXR5UmVzdWx0ICYmICFxdWFsaXR5UmVzdWx0LmlzVmFsaWQpIHtcbiAgICAgICAgICBsb2dnZXIud2FybignQnVpbGQgcXVhbGl0eSBpc3N1ZXMgZGV0ZWN0ZWQ6JywgcXVhbGl0eVJlc3VsdC5pc3N1ZXMpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBsb2dnZXIuZXJyb3IoJ0Vycm9yIG1vbml0b3JpbmcgYnVpbGQgcXVhbGl0eTonLCBlcnJvcik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIE1vbml0b3IgcXVhbGl0eSBldmVyeSAzMCBzZWNvbmRzXG4gICAgY29uc3QgcXVhbGl0eUludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4gdm9pZCBtb25pdG9yUXVhbGl0eSgpLCAzMDAwMCk7XG4gICAgXG4gICAgLy8gSW5pdGlhbCBxdWFsaXR5IGNoZWNrXG4gICAgbW9uaXRvclF1YWxpdHkoKTtcbiAgICBcbiAgICByZXR1cm4gKCkgPT4gY2xlYXJJbnRlcnZhbChxdWFsaXR5SW50ZXJ2YWwpO1xuICB9LCBbcGVyZm9ybWFuY2VNZXRyaWNzLCBtb25pdG9yQnVpbGRRdWFsaXR5XSk7XG5cbiAgLy8gVGVzdCBNQ1Agc2VydmVyIGludGVncmF0aW9uIGFuZCBmYWxsYmFjayBzdHJhdGVneVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHRlc3RNQ1BJbnRlZ3JhdGlvbiA9IGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIE1DUCBzZXJ2ZXIgaW50ZWdyYXRpb24gcmVtb3ZlZCAtIGNvcmUgc2VydmljZXMgaGFuZGxlIEFQSSBmYWxsYmFja3NcbiAgICAgICAgbG9nZ2VyLmluZm8oJ1VzaW5nIGNvcmUgYXN0cm9sb2dpY2FsIGFuZCBhbGNoZW1pY2FsIHNlcnZpY2VzIChNQ1AgaW50ZWdyYXRpb24gcmVtb3ZlZCknKTtcblxuICAgICAgICAvLyBUZXN0IGNvcmUgc2VydmljZSBmdW5jdGlvbmFsaXR5IGlmIG5lZWRlZFxuICAgICAgICBpZiAoc2VsZWN0ZWRJbmdyZWRpZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgbG9nZ2VyLmRlYnVnKGBUZXN0aW5nIGNvcmUgbnV0cml0aW9uYWwgc2VydmljZXMgZm9yICR7c2VsZWN0ZWRJbmdyZWRpZW50c1swXX1gKTtcbiAgICAgICAgfVxuXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBsb2dnZXIuZXJyb3IoJ0Vycm9yIHRlc3RpbmcgTUNQIHNlcnZlciBpbnRlZ3JhdGlvbjonLCBlcnJvcik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIFRlc3QgTUNQIGludGVncmF0aW9uIG9uIG1vdW50IGFuZCB3aGVuIGluZ3JlZGllbnRzIGNoYW5nZVxuICAgIHRlc3RNQ1BJbnRlZ3JhdGlvbigpO1xuXG4gICAgLy8gQ29yZSBzZXJ2aWNlcyBhcmUgYWx3YXlzIGF2YWlsYWJsZSAobm8gcGVyaW9kaWMgbW9uaXRvcmluZyBuZWVkZWQpXG4gICAgbG9nZ2VyLmRlYnVnKCdDb3JlIHNlcnZpY2VzIGluaXRpYWxpemVkIHN1Y2Nlc3NmdWxseScpO1xuICB9LCBbc2VsZWN0ZWRJbmdyZWRpZW50c10pO1xuXG4gIC8vIEFwcGx5IGRldmVsb3BtZW50IGV4cGVyaWVuY2Ugb3B0aW1pemF0aW9uc1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGFwcGx5RGV2T3B0aW1pemF0aW9ucyA9IGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFVwZGF0ZSBkZXZlbG9wbWVudCBtZXRyaWNzIHdpdGggY3VycmVudCBwZXJmb3JtYW5jZSBkYXRhXG4gICAgICAgIGNvbnN0IGRldk1ldHJpY3MgPSB7XG4gICAgICAgICAgY29tcGlsYXRpb25UaW1lOiBwZXJmb3JtYW5jZU1ldHJpY3MucmVuZGVyVGltZSB8fCAwLFxuICAgICAgICAgIG1lbW9yeVVzYWdlOiBwZXJmb3JtYW5jZU1ldHJpY3MubWVtb3J5VXNhZ2UgfHwgMCxcbiAgICAgICAgICBidW5kbGVTaXplOiAxNTAgKiAxMDI0LCAvLyBFc3RpbWF0ZWQgYnVuZGxlIHNpemVcbiAgICAgICAgICBlcnJvckNvdW50OiAwLCAvLyBObyBjb21waWxhdGlvbiBlcnJvcnMgaW4gcnVudGltZVxuICAgICAgICAgIHdhcm5pbmdDb3VudDogMCxcbiAgICAgICAgICBob3RSZWxvYWRUaW1lOiAwXG4gICAgICAgIH07XG5cbiAgICAgICAgdXBkYXRlRGV2TWV0cmljcyhkZXZNZXRyaWNzKTtcblxuICAgICAgICAvLyBHZXQgZGV2ZWxvcG1lbnQgb3B0aW1pemF0aW9uIHJlY29tbWVuZGF0aW9uc1xuICAgICAgICBjb25zdCBkZXZSZWNvbW1lbmRhdGlvbnMgPSBnZXREZXZPcHRpbWl6YXRpb25SZWNvbW1lbmRhdGlvbnMoKTtcbiAgICAgICAgaWYgKGRlYnVnTW9kZSkge1xuICAgICAgICAgIGxvZ2dlci5kZWJ1ZygnRGV2ZWxvcG1lbnQgb3B0aW1pemF0aW9uIHJlY29tbWVuZGF0aW9uczonLCBkZXZSZWNvbW1lbmRhdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQXBwbHkgYXV0b21hdGljIG9wdGltaXphdGlvbnMgaW4gZGV2ZWxvcG1lbnQgbW9kZVxuICAgICAgICBpZiAoZGVidWdNb2RlICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgICAgICAgY29uc3Qgb3B0aW1pemF0aW9uUmVzdWx0cyA9IGFwcGx5QXV0b21hdGljT3B0aW1pemF0aW9ucygpO1xuICAgICAgICAgIGlmIChvcHRpbWl6YXRpb25SZXN1bHRzLmFwcGxpZWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbG9nZ2VyLmluZm8oJ0FwcGxpZWQgYXV0b21hdGljIGRldmVsb3BtZW50IG9wdGltaXphdGlvbnM6Jywgb3B0aW1pemF0aW9uUmVzdWx0cy5hcHBsaWVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG9wdGltaXphdGlvblJlc3VsdHMuZXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKCdEZXZlbG9wbWVudCBvcHRpbWl6YXRpb24gZXJyb3JzOicsIG9wdGltaXphdGlvblJlc3VsdHMuZXJyb3JzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBNb25pdG9yIGRldmVsb3BtZW50IG1ldHJpY3NcbiAgICAgICAgY29uc3QgY3VycmVudERldk1ldHJpY3MgPSBnZXREZXZlbG9wbWVudE1ldHJpY3MoKTtcbiAgICAgICAgaWYgKGRlYnVnTW9kZSkge1xuICAgICAgICAgIGxvZ2dlci5kZWJ1ZygnQ3VycmVudCBkZXZlbG9wbWVudCBtZXRyaWNzOicsIGN1cnJlbnREZXZNZXRyaWNzKTtcbiAgICAgICAgfVxuXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBsb2dnZXIuZXJyb3IoJ0Vycm9yIGFwcGx5aW5nIGRldmVsb3BtZW50IGV4cGVyaWVuY2Ugb3B0aW1pemF0aW9uczonLCBlcnJvcik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIEFwcGx5IG9wdGltaXphdGlvbnMgb24gbW91bnQgYW5kIHdoZW4gcGVyZm9ybWFuY2UgbWV0cmljcyBjaGFuZ2VcbiAgICBhcHBseURldk9wdGltaXphdGlvbnMoKTtcblxuICAgIC8vIFNldCB1cCBwZXJpb2RpYyBvcHRpbWl6YXRpb24gbW9uaXRvcmluZ1xuICAgIGNvbnN0IGRldk9wdGltaXphdGlvbkludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4gdm9pZCBhcHBseURldk9wdGltaXphdGlvbnMoKSwgNjAwMDApOyAvLyBFdmVyeSBtaW51dGVcblxuICAgIHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKGRldk9wdGltaXphdGlvbkludGVydmFsKTtcbiAgfSwgW3BlcmZvcm1hbmNlTWV0cmljcywgdXBkYXRlRGV2TWV0cmljcywgZ2V0RGV2T3B0aW1pemF0aW9uUmVjb21tZW5kYXRpb25zLCBhcHBseUF1dG9tYXRpY09wdGltaXphdGlvbnMsIGdldERldmVsb3BtZW50TWV0cmljcywgZGVidWdNb2RlXSk7XG5cbiAgLy8gTG9nIHF1YWxpdHkgbWV0cmljcyBhbmQgY2FtcGFpZ24gdHJpZ2dlcnMgZm9yIGRlYnVnZ2luZ1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChkZWJ1Z01vZGUpIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZygnUXVhbGl0eSBNZXRyaWNzOicsIHF1YWxpdHlNZXRyaWNzKTtcbiAgICAgIGxvZ2dlci5kZWJ1ZygnQWdlbnQgSG9vayBTdGF0ZTonLCBhZ2VudEhvb2tTdGF0ZSk7XG4gICAgICBcbiAgICAgIGlmIChwbGFuZXRhcnlWYWxpZGF0aW9uICYmICEocGxhbmV0YXJ5VmFsaWRhdGlvbiBhcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPikuaXNWYWxpZCkge1xuICAgICAgICBsb2dnZXIud2FybignUGxhbmV0YXJ5IHZhbGlkYXRpb24gaXNzdWVzOicsIChwbGFuZXRhcnlWYWxpZGF0aW9uIGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+KS5pc3N1ZXMpO1xuICAgICAgfVxuICAgICAgXG4gICAgICBpZiAodHlwZXNjcmlwdFRyaWdnZXI/LnRyaWdnZXJlZCkge1xuICAgICAgICBsb2dnZXIud2FybignVHlwZVNjcmlwdCBjYW1wYWlnbiB0cmlnZ2VyIGFjdGl2ZTonLCB0eXBlc2NyaXB0VHJpZ2dlcik7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGlmIChidWlsZFF1YWxpdHkgJiYgIWJ1aWxkUXVhbGl0eS5pc1ZhbGlkKSB7XG4gICAgICAgIGxvZ2dlci53YXJuKCdCdWlsZCBxdWFsaXR5IGlzc3VlczonLCBidWlsZFF1YWxpdHkuaXNzdWVzKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ29yZSBzZXJ2aWNlcyBhcmUgYWx3YXlzIGF2YWlsYWJsZSAoTUNQIGludGVncmF0aW9uIHJlbW92ZWQpXG4gICAgICBsb2dnZXIuZGVidWcoJ0NvcmUgU2VydmljZXMgU3RhdHVzOiBBY3RpdmUnKTtcblxuICAgICAgLy8gTG9nIGRldmVsb3BtZW50IG1ldHJpY3MgaW4gZGVidWcgbW9kZVxuICAgICAgY29uc3QgZGV2TWV0cmljcyA9IGdldERldmVsb3BtZW50TWV0cmljcygpO1xuICAgICAgbG9nZ2VyLmRlYnVnKCdEZXZlbG9wbWVudCBFeHBlcmllbmNlIE1ldHJpY3M6JywgZGV2TWV0cmljcyk7XG4gICAgfVxuICB9LCBbZGVidWdNb2RlLCBxdWFsaXR5TWV0cmljcywgYWdlbnRIb29rU3RhdGUsIHBsYW5ldGFyeVZhbGlkYXRpb24sIHR5cGVzY3JpcHRUcmlnZ2VyLCBidWlsZFF1YWxpdHksIGdldERldmVsb3BtZW50TWV0cmljc10pO1xuXG5cblxuICAvLyBTYXZlIHN0YXRlIGNoYW5nZXMgdXNpbmcgZW5oYW5jZWQgc3RhdGUgcHJlc2VydmF0aW9uXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2F2ZU5hdlN0YXRlKHtcbiAgICAgIHNlbGVjdGVkSW5ncmVkaWVudHMsXG4gICAgICBzZWxlY3RlZEN1aXNpbmUsXG4gICAgICBzZWxlY3RlZENvb2tpbmdNZXRob2RzLFxuICAgICAgY3VycmVudFJlY2lwZSxcbiAgICAgIGFjdGl2ZVNlY3Rpb24sXG4gICAgICBuYXZpZ2F0aW9uSGlzdG9yeSxcbiAgICAgIHNjcm9sbFBvc2l0aW9uOiB3aW5kb3cuc2Nyb2xsWVxuICAgIH0pO1xuICB9LCBbc2VsZWN0ZWRJbmdyZWRpZW50cywgc2VsZWN0ZWRDdWlzaW5lLCBzZWxlY3RlZENvb2tpbmdNZXRob2RzLCBjdXJyZW50UmVjaXBlLCBhY3RpdmVTZWN0aW9uLCBuYXZpZ2F0aW9uSGlzdG9yeSwgc2F2ZU5hdlN0YXRlXSk7XG5cbiAgLy8gQ29udGV4dCB1cGRhdGUgZnVuY3Rpb25zXG4gIGNvbnN0IHVwZGF0ZVNlbGVjdGVkSW5ncmVkaWVudHMgPSB1c2VDYWxsYmFjaygoaW5ncmVkaWVudHM6IHN0cmluZ1tdKSA9PiB7XG4gICAgc2V0U2VsZWN0ZWRJbmdyZWRpZW50cyhpbmdyZWRpZW50cyk7XG4gICAgbm90aWZ5Q29tcG9uZW50VXBkYXRlKCdpbmdyZWRpZW50cycsIHsgc2VsZWN0ZWRJbmdyZWRpZW50czogaW5ncmVkaWVudHMgfSk7XG4gICAgbG9nZ2VyLmRlYnVnKCdVcGRhdGVkIHNlbGVjdGVkIGluZ3JlZGllbnRzOicsIGluZ3JlZGllbnRzKTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IHVwZGF0ZVNlbGVjdGVkQ3Vpc2luZSA9IHVzZUNhbGxiYWNrKChjdWlzaW5lOiBzdHJpbmcgfCBudWxsKSA9PiB7XG4gICAgc2V0U2VsZWN0ZWRDdWlzaW5lKGN1aXNpbmUpO1xuICAgIG5vdGlmeUNvbXBvbmVudFVwZGF0ZSgnY3Vpc2luZScsIHsgc2VsZWN0ZWRDdWlzaW5lOiBjdWlzaW5lIH0pO1xuICAgIGxvZ2dlci5kZWJ1ZygnVXBkYXRlZCBzZWxlY3RlZCBjdWlzaW5lOicsIGN1aXNpbmUpO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgdXBkYXRlU2VsZWN0ZWRDb29raW5nTWV0aG9kcyA9IHVzZUNhbGxiYWNrKChtZXRob2RzOiBzdHJpbmdbXSkgPT4ge1xuICAgIHNldFNlbGVjdGVkQ29va2luZ01ldGhvZHMobWV0aG9kcyk7XG4gICAgbm90aWZ5Q29tcG9uZW50VXBkYXRlKCdjb29raW5nJywgeyBzZWxlY3RlZENvb2tpbmdNZXRob2RzOiBtZXRob2RzIH0pO1xuICAgIGxvZ2dlci5kZWJ1ZygnVXBkYXRlZCBzZWxlY3RlZCBjb29raW5nIG1ldGhvZHM6JywgbWV0aG9kcyk7XG4gIH0sIFtdKTtcblxuICBjb25zdCB1cGRhdGVDdXJyZW50UmVjaXBlID0gdXNlQ2FsbGJhY2soKHJlY2lwZTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4gfCBudWxsKSA9PiB7XG4gICAgc2V0Q3VycmVudFJlY2lwZShyZWNpcGUpO1xuICAgIG5vdGlmeUNvbXBvbmVudFVwZGF0ZSgncmVjaXBlJywgeyBjdXJyZW50UmVjaXBlOiByZWNpcGUgfSk7XG4gICAgbG9nZ2VyLmRlYnVnKCdVcGRhdGVkIGN1cnJlbnQgcmVjaXBlOicsIHJlY2lwZSk7XG4gIH0sIFtdKTtcblxuICBjb25zdCBoYW5kbGVTZXRBY3RpdmVTZWN0aW9uID0gdXNlQ2FsbGJhY2soKHNlY3Rpb246IHN0cmluZyB8IG51bGwpID0+IHtcbiAgICBzZXRBY3RpdmVTZWN0aW9uKHNlY3Rpb24pO1xuICAgIGlmIChzZWN0aW9uKSB7XG4gICAgICBzZXROYXZpZ2F0aW9uSGlzdG9yeShwcmV2ID0+IFsuLi5wcmV2LnNsaWNlKC05KSwgc2VjdGlvbl0pOyAvLyBLZWVwIGxhc3QgMTAgc2VjdGlvbnNcbiAgICB9XG4gIH0sIFtdKTtcblxuICAvLyBDcm9zcy1jb21wb25lbnQgY29tbXVuaWNhdGlvblxuICBjb25zdCBub3RpZnlDb21wb25lbnRVcGRhdGUgPSB1c2VDYWxsYmFjaygoY29tcG9uZW50SWQ6IHN0cmluZywgZGF0YTogdW5rbm93bikgPT4ge1xuICAgIGNvbnN0IHN1YnNjcmliZXJzID0gdXBkYXRlU3Vic2NyaWJlcnNbY29tcG9uZW50SWRdIHx8IFtdO1xuICAgIHN1YnNjcmliZXJzLmZvckVhY2goY2FsbGJhY2sgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2FsbGJhY2soZGF0YSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBsb2dnZXIuZXJyb3IoYEVycm9yIGluIGNvbXBvbmVudCB1cGRhdGUgY2FsbGJhY2sgZm9yICR7Y29tcG9uZW50SWR9OmAsIGVycm9yKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSwgW3VwZGF0ZVN1YnNjcmliZXJzXSk7XG5cbiAgY29uc3Qgc3Vic2NyaWJlVG9VcGRhdGVzID0gdXNlQ2FsbGJhY2soKGNvbXBvbmVudElkOiBzdHJpbmcsIGNhbGxiYWNrOiAoZGF0YTogdW5rbm93bikgPT4gdm9pZCkgPT4ge1xuICAgIHNldFVwZGF0ZVN1YnNjcmliZXJzKHByZXYgPT4gKHtcbiAgICAgIC4uLnByZXYsXG4gICAgICBbY29tcG9uZW50SWRdOiBbLi4uKHByZXZbY29tcG9uZW50SWRdIHx8IFtdKSwgY2FsbGJhY2tdXG4gICAgfSkpO1xuXG4gICAgLy8gUmV0dXJuIHVuc3Vic2NyaWJlIGZ1bmN0aW9uXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHNldFVwZGF0ZVN1YnNjcmliZXJzKHByZXYgPT4gKHtcbiAgICAgICAgLi4ucHJldixcbiAgICAgICAgW2NvbXBvbmVudElkXTogKHByZXZbY29tcG9uZW50SWRdIHx8IFtdKS5maWx0ZXIoY2IgPT4gY2IgIT09IGNhbGxiYWNrKVxuICAgICAgfSkpO1xuICAgIH07XG4gIH0sIFtdKTtcblxuICAvLyBNZW1vaXplZCBjb250ZXh0IHZhbHVlIHRvIHByZXZlbnQgdW5uZWNlc3NhcnkgcmUtcmVuZGVyc1xuICBjb25zdCBjb250ZXh0VmFsdWU6IE1haW5QYWdlQ29udGV4dFR5cGUgPSB1c2VNZW1vKCgpID0+ICh7XG4gICAgLy8gU2hhcmVkIHN0YXRlXG4gICAgc2VsZWN0ZWRJbmdyZWRpZW50cyxcbiAgICBzZWxlY3RlZEN1aXNpbmUsXG4gICAgc2VsZWN0ZWRDb29raW5nTWV0aG9kcyxcbiAgICBjdXJyZW50UmVjaXBlLFxuICAgIGFjdGl2ZVNlY3Rpb24sXG4gICAgbmF2aWdhdGlvbkhpc3RvcnksXG4gICAgXG4gICAgLy8gVXBkYXRlIGZ1bmN0aW9uc1xuICAgIHVwZGF0ZVNlbGVjdGVkSW5ncmVkaWVudHMsXG4gICAgdXBkYXRlU2VsZWN0ZWRDdWlzaW5lLFxuICAgIHVwZGF0ZVNlbGVjdGVkQ29va2luZ01ldGhvZHMsXG4gICAgdXBkYXRlQ3VycmVudFJlY2lwZSxcbiAgICBzZXRBY3RpdmVTZWN0aW9uOiBoYW5kbGVTZXRBY3RpdmVTZWN0aW9uLFxuICAgIFxuICAgIC8vIENyb3NzLWNvbXBvbmVudCBjb21tdW5pY2F0aW9uXG4gICAgbm90aWZ5Q29tcG9uZW50VXBkYXRlLFxuICAgIHN1YnNjcmliZVRvVXBkYXRlc1xuICB9KSwgW1xuICAgIHNlbGVjdGVkSW5ncmVkaWVudHMsXG4gICAgc2VsZWN0ZWRDdWlzaW5lLFxuICAgIHNlbGVjdGVkQ29va2luZ01ldGhvZHMsXG4gICAgY3VycmVudFJlY2lwZSxcbiAgICBhY3RpdmVTZWN0aW9uLFxuICAgIG5hdmlnYXRpb25IaXN0b3J5LFxuICAgIHVwZGF0ZVNlbGVjdGVkSW5ncmVkaWVudHMsXG4gICAgdXBkYXRlU2VsZWN0ZWRDdWlzaW5lLFxuICAgIHVwZGF0ZVNlbGVjdGVkQ29va2luZ01ldGhvZHMsXG4gICAgdXBkYXRlQ3VycmVudFJlY2lwZSxcbiAgICBoYW5kbGVTZXRBY3RpdmVTZWN0aW9uLFxuICAgIG5vdGlmeUNvbXBvbmVudFVwZGF0ZSxcbiAgICBzdWJzY3JpYmVUb1VwZGF0ZXNcbiAgXSk7XG5cbiAgLy8gSGFuZGxlIHNlY3Rpb24gbmF2aWdhdGlvbiB3aXRoIGVuaGFuY2VkIGNvbnRleHQgcHJlc2VydmF0aW9uIGFuZCBzbW9vdGggdHJhbnNpdGlvbnNcbiAgY29uc3QgaGFuZGxlU2VjdGlvbk5hdmlnYXRlID0gdXNlQ2FsbGJhY2soKHNlY3Rpb25JZDogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHNlY3Rpb25JZCk7XG4gICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgIC8vIEFkZCBzbW9vdGggdHJhbnNpdGlvbiBlZmZlY3RcbiAgICAgIGVsZW1lbnQuc3R5bGUudHJhbnNpdGlvbiA9ICdhbGwgMC4zcyBlYXNlLWluLW91dCc7XG4gICAgICBlbGVtZW50LnNjcm9sbEludG9WaWV3KHsgYmVoYXZpb3I6ICdzbW9vdGgnLCBibG9jazogJ3N0YXJ0JyB9KTtcbiAgICAgIFxuICAgICAgLy8gVXBkYXRlIGFjdGl2ZSBzZWN0aW9uIGFuZCBuYXZpZ2F0aW9uIGhpc3RvcnlcbiAgICAgIGhhbmRsZVNldEFjdGl2ZVNlY3Rpb24oc2VjdGlvbklkKTtcbiAgICAgIG9uU2VjdGlvbk5hdmlnYXRlPy4oc2VjdGlvbklkKTtcbiAgICAgIFxuICAgICAgLy8gU2F2ZSBuYXZpZ2F0aW9uIHN0YXRlIHVzaW5nIGVuaGFuY2VkIHByZXNlcnZhdGlvbiBzeXN0ZW1cbiAgICAgIHNhdmVOYXZTdGF0ZSh7XG4gICAgICAgIHNlbGVjdGVkSW5ncmVkaWVudHMsXG4gICAgICAgIHNlbGVjdGVkQ3Vpc2luZSxcbiAgICAgICAgc2VsZWN0ZWRDb29raW5nTWV0aG9kcyxcbiAgICAgICAgY3VycmVudFJlY2lwZSxcbiAgICAgICAgYWN0aXZlU2VjdGlvbjogc2VjdGlvbklkLFxuICAgICAgICBuYXZpZ2F0aW9uSGlzdG9yeTogWy4uLm5hdmlnYXRpb25IaXN0b3J5LCBzZWN0aW9uSWRdLnNsaWNlKC0xMCksIC8vIEtlZXAgbGFzdCAxMFxuICAgICAgICBzY3JvbGxQb3NpdGlvbjogd2luZG93LnNjcm9sbFlcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICAvLyBBZGQgdmlzdWFsIGZlZWRiYWNrIGZvciBuYXZpZ2F0aW9uXG4gICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2hpZ2hsaWdodC1zZWN0aW9uJyk7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdoaWdobGlnaHQtc2VjdGlvbicpO1xuICAgICAgICBlbGVtZW50LnN0eWxlLnRyYW5zaXRpb24gPSAnJztcbiAgICAgIH0sIDEwMDApO1xuICAgIH1cbiAgfSwgW29uU2VjdGlvbk5hdmlnYXRlLCBoYW5kbGVTZXRBY3RpdmVTZWN0aW9uLCBuYXZpZ2F0aW9uSGlzdG9yeSwgc2F2ZU5hdlN0YXRlLCBzZWxlY3RlZEluZ3JlZGllbnRzLCBzZWxlY3RlZEN1aXNpbmUsIHNlbGVjdGVkQ29va2luZ01ldGhvZHMsIGN1cnJlbnRSZWNpcGVdKTtcblxuICAvLyBVcGRhdGUgc2VjdGlvbiBsb2FkaW5nIHN0YXRlXG4gIGNvbnN0IHVwZGF0ZVNlY3Rpb25TdGF0ZSA9IHVzZUNhbGxiYWNrKChzZWN0aW9uSWQ6IHN0cmluZywgdXBkYXRlczogUGFydGlhbDx7IGxvYWRpbmc6IGJvb2xlYW47IGVycm9yOiBzdHJpbmcgfCBudWxsIH0+KSA9PiB7XG4gICAgc2V0U2VjdGlvblN0YXRlcyhwcmV2ID0+ICh7XG4gICAgICAuLi5wcmV2LFxuICAgICAgW3NlY3Rpb25JZF06IHsgLi4ucHJldltzZWN0aW9uSWRdLCAuLi51cGRhdGVzIH1cbiAgICB9KSk7XG4gIH0sIFtdKTtcblxuICAvLyBTZWN0aW9uIGVycm9yIGJvdW5kYXJ5IGZhbGxiYWNrXG4gIGNvbnN0IFNlY3Rpb25FcnJvckZhbGxiYWNrOiBSZWFjdC5GQzx7IGVycm9yOiBFcnJvcjsgc2VjdGlvbklkOiBzdHJpbmc7IG9uUmV0cnk6ICgpID0+IHZvaWQgfT4gPSAoeyBcbiAgICBlcnJvciwgXG4gICAgc2VjdGlvbklkLCBcbiAgICBvblJldHJ5IFxuICB9KSA9PiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJiZy1yZWQtNTAgYm9yZGVyIGJvcmRlci1yZWQtMjAwIHJvdW5kZWQtbGcgcC02IHRleHQtY2VudGVyXCI+XG4gICAgICA8aDMgY2xhc3NOYW1lPVwidGV4dC1sZyBmb250LXNlbWlib2xkIHRleHQtcmVkLTgwMCBtYi0yXCI+XG4gICAgICAgIFNlY3Rpb24gRXJyb3I6IHtzZWN0aW9uSWR9XG4gICAgICA8L2gzPlxuICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1yZWQtNjAwIG1iLTRcIj5cbiAgICAgICAge2Vycm9yLm1lc3NhZ2UgfHwgJ0FuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQgaW4gdGhpcyBzZWN0aW9uLid9XG4gICAgICA8L3A+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIG9uQ2xpY2s9e29uUmV0cnl9XG4gICAgICAgIGNsYXNzTmFtZT1cImJnLXJlZC02MDAgdGV4dC13aGl0ZSBweC00IHB5LTIgcm91bmRlZCBob3ZlcjpiZy1yZWQtNzAwIHRyYW5zaXRpb24tY29sb3JzXCJcbiAgICAgID5cbiAgICAgICAgUmV0cnkgU2VjdGlvblxuICAgICAgPC9idXR0b24+XG4gICAgPC9kaXY+XG4gICk7XG5cbiAgLy8gU2VjdGlvbiB3cmFwcGVyIHdpdGggZXJyb3IgYm91bmRhcnlcbiAgY29uc3QgU2VjdGlvbldyYXBwZXI6IFJlYWN0LkZDPHtcbiAgICBpZDogc3RyaW5nO1xuICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZTtcbiAgICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIH0+ID0gKHsgaWQsIHRpdGxlLCBjaGlsZHJlbiwgY2xhc3NOYW1lID0gJycgfSkgPT4ge1xuICAgIGNvbnN0IFtyZXRyeUtleSwgc2V0UmV0cnlLZXldID0gdXNlU3RhdGUoMCk7XG4gICAgXG4gICAgY29uc3QgaGFuZGxlUmV0cnkgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICBzZXRSZXRyeUtleShwcmV2ID0+IHByZXYgKyAxKTtcbiAgICAgIHVwZGF0ZVNlY3Rpb25TdGF0ZShpZCwgeyBsb2FkaW5nOiBmYWxzZSwgZXJyb3I6IG51bGwgfSk7XG4gICAgfSwgW2lkXSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPHNlY3Rpb24gXG4gICAgICAgIGlkPXtpZH0gXG4gICAgICAgIGNsYXNzTmFtZT17YGJnLXdoaXRlIHJvdW5kZWQtbGcgc2hhZG93LW1kIHAtNiBzY3JvbGwtbXQtMjAgJHtjbGFzc05hbWV9YH1cbiAgICAgID5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWJldHdlZW4gbWItNFwiPlxuICAgICAgICAgIDxoMiBjbGFzc05hbWU9XCJ0ZXh0LTJ4bCBmb250LXNlbWlib2xkIHRleHQtZ3JheS04MDBcIj57dGl0bGV9PC9oMj5cbiAgICAgICAgICB7c2VjdGlvblN0YXRlc1tpZF0ubG9hZGluZyAmJiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIHRleHQtYmx1ZS02MDBcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbmltYXRlLXNwaW4gcm91bmRlZC1mdWxsIGgtNCB3LTQgYm9yZGVyLWItMiBib3JkZXItYmx1ZS02MDAgbXItMlwiPjwvZGl2PlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LXNtXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICBcbiAgICAgICAgPEVycm9yQm91bmRhcnlcbiAgICAgICAgICBrZXk9e3JldHJ5S2V5fVxuICAgICAgICAgIGZhbGxiYWNrPXsoZXJyb3IpID0+IChcbiAgICAgICAgICAgIDxTZWN0aW9uRXJyb3JGYWxsYmFjayBcbiAgICAgICAgICAgICAgZXJyb3I9e2Vycm9yfSBcbiAgICAgICAgICAgICAgc2VjdGlvbklkPXtpZH0gXG4gICAgICAgICAgICAgIG9uUmV0cnk9e2hhbmRsZVJldHJ5fSBcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgPlxuICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgPC9FcnJvckJvdW5kYXJ5PlxuICAgICAgPC9zZWN0aW9uPlxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8TWFpblBhZ2VDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtjb250ZXh0VmFsdWV9PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJtaW4taC1zY3JlZW4gYmctZ3JhZGllbnQtdG8tYiBmcm9tLWluZGlnby01MCB2aWEtYmx1ZS01MCB0by1ncmF5LTEwMCB0ZXh0LWdyYXktODAwXCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lciBteC1hdXRvIHB4LTQgcHktOFwiPlxuICAgICAgICB7LyogSGVhZGVyIFNlY3Rpb24gKi99XG4gICAgICAgIDxoZWFkZXIgY2xhc3NOYW1lPVwibWItOCB0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgIDxoMSBjbGFzc05hbWU9XCJ0ZXh0LTN4bCBtZDp0ZXh0LTR4bCBmb250LWJvbGQgbWItMiB0ZXh0LWluZGlnby05MDBcIj5cbiAgICAgICAgICAgIFdoYXQgdG8gRWF0IE5leHRcbiAgICAgICAgICA8L2gxPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtaW5kaWdvLTYwMCBtYi00XCI+XG4gICAgICAgICAgICBGb29kIHJlY29tbWVuZGF0aW9ucyBiYXNlZCBvbiB0aGUgY3VycmVudCBjZWxlc3RpYWwgZW5lcmdpZXNcbiAgICAgICAgICA8L3A+XG4gICAgICAgICAgXG4gICAgICAgICAgey8qIExvYWRpbmcgU3RhdHVzIEluZGljYXRvciAqL31cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlubGluZS1ibG9jayBiZy13aGl0ZSBweC00IHB5LTIgcm91bmRlZC1sZyBzaGFkb3ctc21cIj5cbiAgICAgICAgICAgIHtsb2FkaW5nID8gKFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbmltYXRlLXNwaW4gcm91bmRlZC1mdWxsIGgtNCB3LTQgYm9yZGVyLWItMiBib3JkZXItaW5kaWdvLTYwMCBtci0yXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1zbSB0ZXh0LWdyYXktNjAwXCI+TG9hZGluZyBhc3Ryb2xvZ2ljYWwgZGF0YS4uLjwvcD5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3LTIgaC0yIGJnLWdyZWVuLTUwMCByb3VuZGVkLWZ1bGwgbXItMlwiPjwvZGl2PlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtc20gdGV4dC1ncmF5LTYwMFwiPlxuICAgICAgICAgICAgICAgICAgQ29ubmVjdGVkIOKAoiB7aXNEYXl0aW1lID8gJ0RheScgOiAnTmlnaHQnfSDigKIge3N0YXRlLmFzdHJvbG9naWNhbFN0YXRlLnN1blNpZ24gfHwgJ0xvYWRpbmcuLi4nfVxuICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2hlYWRlcj5cbiAgICAgICAgXG4gICAgICAgIHsvKiBTdGlja3kgTmF2aWdhdGlvbiB3aXRoIEp1bXAgTGlua3MgKi99XG4gICAgICAgIDxuYXYgY2xhc3NOYW1lPVwiZmxleCBmbGV4LXdyYXAganVzdGlmeS1jZW50ZXIgZ2FwLTQgbWItOCBiZy13aGl0ZSByb3VuZGVkLWxnIHNoYWRvdy1tZCBwLTQgc3RpY2t5IHRvcC0yIHotMTBcIj5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBoYW5kbGVTZWN0aW9uTmF2aWdhdGUoJ2N1aXNpbmUnKX1cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cInRleHQtaW5kaWdvLTYwMCBob3Zlcjp0ZXh0LWluZGlnby04MDAgZm9udC1tZWRpdW0gcHgtMyBweS0xIHJvdW5kZWQgaG92ZXI6YmctaW5kaWdvLTUwIHRyYW5zaXRpb24tY29sb3JzXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICBDdWlzaW5lIFJlY29tbWVuZGF0aW9uc1xuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZVNlY3Rpb25OYXZpZ2F0ZSgnaW5ncmVkaWVudHMnKX1cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cInRleHQtaW5kaWdvLTYwMCBob3Zlcjp0ZXh0LWluZGlnby04MDAgZm9udC1tZWRpdW0gcHgtMyBweS0xIHJvdW5kZWQgaG92ZXI6YmctaW5kaWdvLTUwIHRyYW5zaXRpb24tY29sb3JzXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICBJbmdyZWRpZW50IFJlY29tbWVuZGF0aW9uc1xuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZVNlY3Rpb25OYXZpZ2F0ZSgnY29va2luZycpfVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwidGV4dC1pbmRpZ28tNjAwIGhvdmVyOnRleHQtaW5kaWdvLTgwMCBmb250LW1lZGl1bSBweC0zIHB5LTEgcm91bmRlZCBob3ZlcjpiZy1pbmRpZ28tNTAgdHJhbnNpdGlvbi1jb2xvcnNcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIENvb2tpbmcgTWV0aG9kc1xuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZVNlY3Rpb25OYXZpZ2F0ZSgncmVjaXBlJyl9XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJ0ZXh0LWluZGlnby02MDAgaG92ZXI6dGV4dC1pbmRpZ28tODAwIGZvbnQtbWVkaXVtIHB4LTMgcHktMSByb3VuZGVkIGhvdmVyOmJnLWluZGlnby01MCB0cmFuc2l0aW9uLWNvbG9yc1wiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgUmVjaXBlIEJ1aWxkZXJcbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9uYXY+XG4gICAgICAgIFxuICAgICAgICB7LyogTWFpbiBDb250ZW50IC0gU2luZ2xlIENvbHVtbiBTdGFja2VkIExheW91dCAqL31cbiAgICAgICAgPG1haW4gY2xhc3NOYW1lPVwiZmxleCBmbGV4LWNvbCBnYXAtOCBtYXgtdy02eGwgbXgtYXV0b1wiPlxuICAgICAgICAgIHsvKiBDdWlzaW5lIFJlY29tbWVuZGVyIFNlY3Rpb24gKi99XG4gICAgICAgICAgPFNlY3Rpb25XcmFwcGVyIGlkPVwiY3Vpc2luZVwiIHRpdGxlPVwiQ3Vpc2luZSBSZWNvbW1lbmRhdGlvbnNcIj5cbiAgICAgICAgICAgIDxFcnJvckJvdW5kYXJ5XG4gICAgICAgICAgICAgIGZhbGxiYWNrPXsoZXJyb3IpID0+IChcbiAgICAgICAgICAgICAgICA8Q29tcG9uZW50RmFsbGJhY2tzLkN1aXNpbmVSZWNvbW1lbmRlciBcbiAgICAgICAgICAgICAgICAgIG9uUmV0cnk9eygpID0+IHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKX1cbiAgICAgICAgICAgICAgICAgIGVycm9yPXtlcnJvcn1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8U3VzcGVuc2UgZmFsbGJhY2s9ezxDb21wb25lbnRGYWxsYmFja3MuTG9hZGluZyBjb21wb25lbnROYW1lPVwiQ3Vpc2luZSBSZWNvbW1lbmRlclwiIC8+fT5cbiAgICAgICAgICAgICAgICA8Q3Vpc2luZVJlY29tbWVuZGVyIC8+XG4gICAgICAgICAgICAgIDwvU3VzcGVuc2U+XG4gICAgICAgICAgICA8L0Vycm9yQm91bmRhcnk+XG4gICAgICAgICAgPC9TZWN0aW9uV3JhcHBlcj5cbiAgICAgICAgICBcbiAgICAgICAgICB7LyogSW5ncmVkaWVudCBSZWNvbW1lbmRlciBTZWN0aW9uICovfVxuICAgICAgICAgIDxTZWN0aW9uV3JhcHBlciBpZD1cImluZ3JlZGllbnRzXCIgdGl0bGU9XCJJbmdyZWRpZW50IFJlY29tbWVuZGF0aW9uc1wiPlxuICAgICAgICAgICAgPEVycm9yQm91bmRhcnlcbiAgICAgICAgICAgICAgZmFsbGJhY2s9eyhlcnJvcikgPT4gKFxuICAgICAgICAgICAgICAgIDxDb21wb25lbnRGYWxsYmFja3MuSW5ncmVkaWVudFJlY29tbWVuZGVyIFxuICAgICAgICAgICAgICAgICAgb25SZXRyeT17KCkgPT4gd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpfVxuICAgICAgICAgICAgICAgICAgZXJyb3I9e2Vycm9yfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxTdXNwZW5zZSBmYWxsYmFjaz17PENvbXBvbmVudEZhbGxiYWNrcy5Mb2FkaW5nIGNvbXBvbmVudE5hbWU9XCJJbmdyZWRpZW50IFJlY29tbWVuZGVyXCIgLz59PlxuICAgICAgICAgICAgICAgIDxJbmdyZWRpZW50UmVjb21tZW5kZXIgXG4gICAgICAgICAgICAgICAgICBpc0Z1bGxQYWdlVmVyc2lvbj17ZmFsc2V9XG4gICAgICAgICAgICAgICAgICBtYXhEaXNwbGF5ZWQ9ezh9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9TdXNwZW5zZT5cbiAgICAgICAgICAgIDwvRXJyb3JCb3VuZGFyeT5cbiAgICAgICAgICA8L1NlY3Rpb25XcmFwcGVyPlxuICAgICAgICAgIFxuICAgICAgICAgIHsvKiBDb29raW5nIE1ldGhvZHMgU2VjdGlvbiAqL31cbiAgICAgICAgICA8U2VjdGlvbldyYXBwZXIgaWQ9XCJjb29raW5nXCIgdGl0bGU9XCJDb29raW5nIE1ldGhvZHNcIj5cbiAgICAgICAgICAgIDxFcnJvckJvdW5kYXJ5XG4gICAgICAgICAgICAgIGZhbGxiYWNrPXsoZXJyb3IpID0+IChcbiAgICAgICAgICAgICAgICA8Q29tcG9uZW50RmFsbGJhY2tzLkNvb2tpbmdNZXRob2RzIFxuICAgICAgICAgICAgICAgICAgb25SZXRyeT17KCkgPT4gd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpfVxuICAgICAgICAgICAgICAgICAgZXJyb3I9e2Vycm9yfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxTdXNwZW5zZSBmYWxsYmFjaz17PENvbXBvbmVudEZhbGxiYWNrcy5Mb2FkaW5nIGNvbXBvbmVudE5hbWU9XCJDb29raW5nIE1ldGhvZHNcIiAvPn0+XG4gICAgICAgICAgICAgICAgPENvb2tpbmdNZXRob2RzU2VjdGlvbiBcbiAgICAgICAgICAgICAgICAgIGlzTWFpblBhZ2VWZXJzaW9uPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgbWF4RGlzcGxheWVkPXs2fVxuICAgICAgICAgICAgICAgICAgb25WaWV3TW9yZT17KCkgPT4gcm91dGVyLnB1c2goJy9jb29raW5nLW1ldGhvZHMnKX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L1N1c3BlbnNlPlxuICAgICAgICAgICAgPC9FcnJvckJvdW5kYXJ5PlxuICAgICAgICAgIDwvU2VjdGlvbldyYXBwZXI+XG4gICAgICAgICAgXG4gICAgICAgICAgey8qIFJlY2lwZSBCdWlsZGVyIFNlY3Rpb24gKi99XG4gICAgICAgICAgPFNlY3Rpb25XcmFwcGVyIGlkPVwicmVjaXBlXCIgdGl0bGU9XCJSZWNpcGUgQnVpbGRlclwiPlxuICAgICAgICAgICAgPEVycm9yQm91bmRhcnlcbiAgICAgICAgICAgICAgZmFsbGJhY2s9eyhlcnJvcikgPT4gKFxuICAgICAgICAgICAgICAgIDxDb21wb25lbnRGYWxsYmFja3MuUmVjaXBlQnVpbGRlciBcbiAgICAgICAgICAgICAgICAgIG9uUmV0cnk9eygpID0+IHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKX1cbiAgICAgICAgICAgICAgICAgIGVycm9yPXtlcnJvcn1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8U3VzcGVuc2UgZmFsbGJhY2s9ezxDb21wb25lbnRGYWxsYmFja3MuTG9hZGluZyBjb21wb25lbnROYW1lPVwiUmVjaXBlIEJ1aWxkZXJcIiAvPn0+XG4gICAgICAgICAgICAgICAgPFJlY2lwZUJ1aWxkZXJTaW1wbGUgLz5cbiAgICAgICAgICAgICAgPC9TdXNwZW5zZT5cbiAgICAgICAgICAgIDwvRXJyb3JCb3VuZGFyeT5cbiAgICAgICAgICA8L1NlY3Rpb25XcmFwcGVyPlxuICAgICAgICAgIFxuICAgICAgICAgIHsvKiBBZGRpdGlvbmFsIGNoaWxkcmVuIGlmIHByb3ZpZGVkICovfVxuICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgPC9tYWluPlxuICAgICAgICBcbiAgICAgICAgey8qIEZvb3RlciAqL31cbiAgICAgICAgPGZvb3RlciBjbGFzc05hbWU9XCJtdC0xMiB0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXgtYXV0byBtYi00XCIgc3R5bGU9e3sgbWF4V2lkdGg6ICcyNTBweCcgfX0+XG4gICAgICAgICAgICA8Zm9ybSBhY3Rpb249XCJodHRwczovL3d3dy5wYXlwYWwuY29tL25jcC9wYXltZW50L1NWTjZRMzY4VEtLTFNcIiBtZXRob2Q9XCJwb3N0XCIgdGFyZ2V0PVwiX2JsYW5rXCI+XG4gICAgICAgICAgICAgIDxpbnB1dCBcbiAgICAgICAgICAgICAgICB0eXBlPVwic3VibWl0XCIgXG4gICAgICAgICAgICAgICAgdmFsdWU9XCJIRUxQXCIgXG4gICAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgICBib3JkZXI6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogJzAuMjVyZW0nLFxuICAgICAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICAgIHBhZGRpbmc6ICcwIDJyZW0nLFxuICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnMi42MjVyZW0nLFxuICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogJ2JvbGQnLFxuICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI0ZGRDE0MCcsXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJyMwMDAwMDAnLFxuICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogJ1wiSGVsdmV0aWNhIE5ldWVcIiwgQXJpYWwsIHNhbnMtc2VyaWYnLFxuICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxcmVtJyxcbiAgICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQ6ICcxLjI1cmVtJyxcbiAgICAgICAgICAgICAgICAgIGN1cnNvcjogJ3BvaW50ZXInXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9mb290ZXI+XG4gICAgICA8L2Rpdj5cbiAgICAgIFxuICAgICAgey8qIERlYnVnIFBhbmVsIC0gRml4ZWQgQm90dG9tIFJpZ2h0ICovfVxuICAgICAge2RlYnVnTW9kZSAmJiAoXG4gICAgICAgIDxTdXNwZW5zZSBmYWxsYmFjaz17bnVsbH0+XG4gICAgICAgICAgPENvbnNvbGlkYXRlZERlYnVnSW5mbyBcbiAgICAgICAgICAgIHBvc2l0aW9uPVwiYm90dG9tLXJpZ2h0XCJcbiAgICAgICAgICAgIGNvbGxhcHNpYmxlPXt0cnVlfVxuICAgICAgICAgICAgc2hvd1BlcmZvcm1hbmNlTWV0cmljcz17dHJ1ZX1cbiAgICAgICAgICAgIHNob3dBc3Ryb2xvZ2ljYWxEYXRhPXt0cnVlfVxuICAgICAgICAgICAgc2hvd0NvbXBvbmVudFN0YXRlcz17dHJ1ZX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L1N1c3BlbnNlPlxuICAgICAgKX1cbiAgICAgIFxuICAgICAgey8qIENTUyBmb3Igc21vb3RoIG5hdmlnYXRpb24gdHJhbnNpdGlvbnMgKi99XG4gICAgICA8c3R5bGUganN4PntgXG4gICAgICAgIC5oaWdobGlnaHQtc2VjdGlvbiB7XG4gICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxLjAyKTtcbiAgICAgICAgICBib3gtc2hhZG93OiAwIDEwcHggMjVweCByZ2JhKDk5LCAxMDIsIDI0MSwgMC4xNSk7XG4gICAgICAgICAgYm9yZGVyOiAycHggc29saWQgcmdiYSg5OSwgMTAyLCAyNDEsIDAuMyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHNlY3Rpb24ge1xuICAgICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjNzIGVhc2UtaW4tb3V0LCBib3gtc2hhZG93IDAuM3MgZWFzZS1pbi1vdXQsIGJvcmRlciAwLjNzIGVhc2UtaW4tb3V0O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBuYXYgYnV0dG9uOmhvdmVyIHtcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTFweCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIG5hdiBidXR0b246YWN0aXZlIHtcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7XG4gICAgICAgIH1cbiAgICAgIGB9PC9zdHlsZT5cbiAgICA8L2Rpdj5cbiAgICA8L01haW5QYWdlQ29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBNYWluUGFnZUxheW91dDsiXSwidmVyc2lvbiI6M30=