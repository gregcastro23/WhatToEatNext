{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/contexts/AlchemicalContext/provider.tsx","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/contexts/AlchemicalContext/provider.tsx"],"sourcesContent":["'use client';\n\nimport React, { useReducer, useState, useCallback, useEffect } from 'react';\n\nimport { createLogger } from '@/utils/logger';\nimport * as safeAstrology from '@/utils/safeAstrology';\n\nimport { AlchemicalContext, defaultState } from './context';\nimport { alchemicalReducer } from './reducer';\nimport { PlanetaryPositionsType, AstrologicalState, AlchemicalState } from './types';\n\n// Phase 5: Type-safe conversion interfaces for alchemical calculations\ninterface CalculationCompatiblePosition {\n  sign?: string;\n  degree?: number;\n  isRetrograde?: boolean;\n  [key: string]: unknown;\n}\n\ninterface CalculationCompatiblePositions {\n  [key: string]: CalculationCompatiblePosition;\n}\n\n// Create a component-specific logger\nconst logger = createLogger('AlchemicalProvider');\n\n// Function to do a deep equality check\nfunction deepEqual<T>(obj1: T, obj2: T): boolean {\n  if (obj1 === obj2) return true;\n  if (obj1 == null || obj2 == null) return false;\n  if (typeof obj1 !== 'object' || typeof obj2 !== 'object') return false;\n  \n  const keys1 = Object.keys(obj1 as object);\n  const keys2 = Object.keys(obj2 as object);\n  \n  if (keys1.length !== keys2.length) return false;\n  \n  for (const key of keys1) {\n    if (!keys2.includes(key)) return false;\n    if (!deepEqual((obj1 as Record<string, unknown>)[key], (obj2 as Record<string, unknown>)[key])) return false;\n  }\n  \n  return true;\n}\n\n// Calculate active planets based on dignity and other factors\nconst calculateActivePlanets = (positions: PlanetaryPositionsType): string[] => {\n  if (!positions) return [];\n  \n  // Basic implementation just returns the major planets\n  const activePlanets: string[] = [];\n  \n  try {\n    // Add main planets (using capitalized names to match proven working implementation)\n    const mainPlanets = ['Sun', 'Moon', 'Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn'];\n    mainPlanets.forEach(planet => {\n      if (positions[planet]) {\n        activePlanets.push(planet);\n      }\n    });\n    \n    // Always include luminaries (Sun and Moon) as they're constantly active\n    if (!activePlanets.includes('Sun')) activePlanets.push('Sun');\n    if (!activePlanets.includes('Moon')) activePlanets.push('Moon');\n  } catch (error) {\n    logger.error('Error calculating active planets:', error);\n    // Return at least the sun and moon as fallback (capitalized)\n    return ['Sun', 'Moon'];\n  }\n  \n  return activePlanets;\n};\n\n// Safe type conversion function to replace 'as any' casts\nconst convertToCalculationFormat = (positions: PlanetaryPositionsType): CalculationCompatiblePositions => {\n  const converted: CalculationCompatiblePositions = {};\n  \n  Object.entries(positions).forEach(([planet, position]) => {\n    if (position && typeof position === 'object') {\n      converted[planet] = {\n        sign: position.sign,\n        degree: position.degree,\n        isRetrograde: position.isRetrograde,\n        // Preserve any additional properties safely\n        ...position\n      };\n    }\n  });\n  \n  return converted;\n};\n\n// Export the provider component\nexport const AlchemicalProvider: React.FC<{children: React.ReactNode}> = ({ children }) => {\n  const [state, dispatch] = useReducer(alchemicalReducer, defaultState);\n  const [planetaryPositions, setPlanetaryPositions] = useState<PlanetaryPositionsType>({});\n  const [isDaytime, setIsDaytime] = useState(true);\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  // Initialize data once on mount\n  useEffect(() => {\n    if (!isInitialized) {\n      logger.debug(`AlchemicalProvider initializing`);\n      setIsInitialized(true);\n      refreshPlanetaryPositions(); // Initial fetch of planetary positions\n    }\n  }, [isInitialized]);\n\n  // Synchronize alchemical values between state and astrologicalState\n  useEffect(() => {\n    // Check if astrologicalState exists and has alchemicalValues\n    if (state.astrologicalState.alchemicalValues) {\n      // If the values differ, update the main state alchemicalValues\n      if (!deepEqual(state.alchemicalValues, state.astrologicalState.alchemicalValues)) {\n        logger.debug('Synchronizing alchemical values from astrologicalState to root state');\n        dispatch({\n          type: 'SET_ALCHEMICAL_VALUES',\n          payload: (state.astrologicalState.alchemicalValues && Object.keys(state.astrologicalState.alchemicalValues).length === 4)\n            ? state.astrologicalState.alchemicalValues as { Spirit: number; Essence: number; Matter: number; Substance: number }\n            : { Spirit: 0.25, Essence: 0.25, Matter: 0.25, Substance: 0.25 }\n        });\n      }\n    } else if (state.astrologicalState) {\n      // If astrologicalState exists but doesn't have alchemicalValues, add them from root state\n      const updatedAstroState = {\n        ...state.astrologicalState,\n        alchemicalValues: (state.alchemicalValues && Object.keys(state.alchemicalValues).length === 4)\n          ? state.alchemicalValues\n          : { Spirit: 0.25, Essence: 0.25, Matter: 0.25, Substance: 0.25 }\n      };\n      \n      dispatch({\n        type: 'SET_ASTROLOGICAL_STATE',\n        payload: updatedAstroState\n      });\n    }\n  }, [state.astrologicalState]);\n\n  const updatePlanetaryPositions = useCallback((positions: PlanetaryPositionsType) => {\n    // Only update if positions are different using deep equality\n    setPlanetaryPositions(prev => {\n      // Skip update if positions are identical to prevent re-renders\n      if (deepEqual(prev, positions)) {\n        logger.debug('Skipping identical planetary positions update');\n        return prev;\n      }\n      \n      logger.info('Updating planetary positions', {\n        sun: positions.Sun.sign,\n        moon: positions.Moon.sign,\n        timestamp: new Date().toISOString()\n      });\n      return positions;\n    });\n  }, []);\n\n  const refreshPlanetaryPositions = useCallback(async () => {\n    try {\n      logger.debug('Refreshing planetary positions...');\n      \n      // Use reliable hardcoded positions\n      const positions = safeAstrology.getReliablePlanetaryPositions();\n      \n      // Normalize keys to capitalized format for consistency with proven working implementation\n      const normalizedPositions: PlanetaryPositionsType = {};\n      Object.entries(positions).forEach(([key, data]) => {\n        if (!data || typeof data !== 'object') return;\n        \n        const planet = key.charAt(0).toUpperCase() + key.slice(1).toLowerCase();\n        normalizedPositions[planet] = {\n          sign: data.sign?.toLowerCase() || 'unknown',\n          degree: typeof data.degree === 'number' ? data.degree : 0,\n          exactLongitude: typeof data.exactLongitude === 'number' ? data.exactLongitude : 0,\n          isRetrograde: !!data.isRetrograde\n        };\n      });\n\n      updatePlanetaryPositions(normalizedPositions);\n      \n      // Import calculation utilities\n      const { \n        calculateElementalValues, \n        calculatePlanetaryAlchemicalValues, \n        calculateElementalBalance \n      } = await import('@/utils/alchemicalCalculations');\n      \n      // Calculate elemental and alchemical values using type-safe conversion\n      const compatiblePositions = convertToCalculationFormat(normalizedPositions);\n      const elementalValues = calculateElementalValues(compatiblePositions);\n      const planetaryValues = calculatePlanetaryAlchemicalValues(compatiblePositions);\n      const elementalBalance = calculateElementalBalance(compatiblePositions);\n      \n      // Combine elemental and planetary influences (weighted average)\n      const combinedAlchemicalValues = {\n        Spirit: (elementalValues.Spirit * 0.5) + (planetaryValues.Spirit * 0.5),\n        Essence: (elementalValues.Essence * 0.5) + (planetaryValues.Essence * 0.5),\n        Matter: (elementalValues.Matter * 0.5) + (planetaryValues.Matter * 0.5),\n        Substance: (elementalValues.Substance * 0.5) + (planetaryValues.Substance * 0.5)\n      };\n      \n      // Normalize alchemical values to ensure they sum to approximately 1\n      const total = combinedAlchemicalValues.Spirit + combinedAlchemicalValues.Essence + \n                    combinedAlchemicalValues.Matter + combinedAlchemicalValues.Substance;\n      \n      const normalizedAlchemicalValues = {\n        Spirit: combinedAlchemicalValues.Spirit / total,\n        Essence: combinedAlchemicalValues.Essence / total,\n        Matter: combinedAlchemicalValues.Matter / total,\n        Substance: combinedAlchemicalValues.Substance / total\n      };\n      \n      logger.debug('Calculated alchemical values:', normalizedAlchemicalValues);\n      \n      // Update state with calculated values\n      const activePlanets = calculateActivePlanets(normalizedPositions);\n      const sunSign = normalizedPositions.Sun.sign || 'aries';\n      const moonSign = normalizedPositions.Moon.sign || 'taurus';\n      \n      // First update the alchemical values at the root of the state\n      dispatch({\n        type: 'SET_ALCHEMICAL_VALUES',\n        payload: normalizedAlchemicalValues\n      });\n      \n      // Update elemental state\n      dispatch({\n        type: 'SET_ELEMENTAL_STATE',\n        payload: elementalBalance\n      });\n      \n      // Sync with ElementalCalculator\n      try {\n        const { ElementalCalculator } = await import('@/services/ElementalCalculator');\n        ElementalCalculator.updateElementalState(elementalBalance);\n      } catch (error) {\n        logger.error('Error syncing ElementalCalculator state:', error);\n      }\n      \n      // Then update the astrological state with the same values\n      const astrologicalState: AstrologicalState = {\n        sunSign,\n        moonSign,\n        lunarPhase: safeAstrology.getLunarPhaseName(safeAstrology.calculateLunarPhase()), // Calculate actual lunar phase\n        timeOfDay: getTimeOfDay(),\n        isDaytime,\n        planetaryHour: 'sun', // This would be calculated\n        zodiacSign: sunSign,\n        activePlanets,\n        activeAspects: [],\n        dominantElement: 'Fire',\n        calculationError: false,\n        alchemicalValues: normalizedAlchemicalValues,\n        currentZodiac: sunSign,\n        moonPhase: safeAstrology.getLunarPhaseName(safeAstrology.calculateLunarPhase())\n      };\n      \n      dispatch({\n        type: 'SET_ASTROLOGICAL_STATE',\n        payload: astrologicalState\n      });\n      \n      return normalizedPositions;\n    } catch (error) {\n      logger.error('Error refreshing planetary positions:', error);\n      dispatch({\n        type: 'SET_ERROR',\n        payload: { message: 'Failed to refresh planetary positions' }\n      });\n      // Pattern JJ-2: AlchemicalState Interface Completion - Return proper structure instead of empty object\n      return {\n        Sun: { sign: 'aries', degree: 0, exactLongitude: 0, isRetrograde: false },\n        Moon: { sign: 'taurus', degree: 0, exactLongitude: 0, isRetrograde: false }\n      };\n    }\n  }, [isDaytime, updatePlanetaryPositions]);\n\n  const getTimeOfDay = () => {\n    const hour = new Date().getHours();\n    if (hour >= 5 && hour < 12) return 'morning';\n    if (hour >= 12 && hour < 17) return 'afternoon';\n    if (hour >= 17 && hour < 21) return 'evening';\n    return 'night';\n  };\n\n  const setDaytime = useCallback((value: boolean) => {\n    setIsDaytime(value);\n    logger.debug(`Setting isDaytime to ${value}`);\n    // Refresh planetary positions on daytime change\n    if (isInitialized) {\n      refreshPlanetaryPositions();\n    }\n  }, [isInitialized, refreshPlanetaryPositions]);\n\n  const updateState = useCallback((updatedState: Partial<AlchemicalState>) => {\n    dispatch({\n      type: 'UPDATE_STATE',\n      payload: updatedState\n    });\n  }, []);\n\n  return (\n    <AlchemicalContext.Provider \n      value={{ \n        state, \n        dispatch, \n        planetaryPositions: planetaryPositions as Record<string, unknown>,\n        isDaytime, \n        updatePlanetaryPositions: updatePlanetaryPositions as (positions: Record<string, unknown>) => void,\n        refreshPlanetaryPositions: refreshPlanetaryPositions as () => Promise<Record<string, unknown>>,\n        setDaytime,\n        updateState\n      }}\n    >\n      {children}\n    </AlchemicalContext.Provider>\n  );\n}; "],"version":3}