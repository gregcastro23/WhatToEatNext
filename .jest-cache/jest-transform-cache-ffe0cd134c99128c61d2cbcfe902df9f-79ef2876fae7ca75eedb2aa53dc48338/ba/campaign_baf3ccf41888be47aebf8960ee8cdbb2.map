{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/types/campaign.ts","mappings":";AAAA;;;GAGG;;;AAsNH,QAAQ;AACR,IAAY,WAKX;AALD,WAAY,WAAW;IACrB,0BAAW,CAAA;IACX,gCAAiB,CAAA;IACjB,4BAAa,CAAA;IACb,kCAAmB,CAAA;AACrB,CAAC,EALW,WAAW,2BAAX,WAAW,QAKtB;AAED,IAAY,eAOX;AAPD,WAAY,eAAe;IACzB,4DAAyC,CAAA;IACzC,4DAAyC,CAAA;IACzC,8DAA2C,CAAA;IAC3C,kDAA+B,CAAA;IAC/B,gDAA6B,CAAA;IAC7B,4DAAyC,CAAA;AAC3C,CAAC,EAPW,eAAe,+BAAf,eAAe,QAO1B;AAED,IAAY,mBAKX;AALD,WAAY,mBAAmB;IAC7B,oCAAa,CAAA;IACb,0CAAmB,CAAA;IACnB,sCAAe,CAAA;IACf,4CAAqB,CAAA;AACvB,CAAC,EALW,mBAAmB,mCAAnB,mBAAmB,QAK9B;AAED,IAAY,kBAKX;AALD,WAAY,kBAAkB;IAC5B,iCAAW,CAAA;IACX,uCAAiB,CAAA;IACjB,mCAAa,CAAA;IACb,2CAAqB,CAAA;AACvB,CAAC,EALW,kBAAkB,kCAAlB,kBAAkB,QAK7B;AAED,IAAY,cAKX;AALD,WAAY,cAAc;IACxB,uCAAqB,CAAA;IACrB,iCAAe,CAAA;IACf,uCAAqB,CAAA;IACrB,yDAAuC,CAAA;AACzC,CAAC,EALW,cAAc,8BAAd,cAAc,QAKzB;AAED,IAAY,WAMX;AAND,WAAY,WAAW;IACrB,0CAA2B,CAAA;IAC3B,0CAA2B,CAAA;IAC3B,sCAAuB,CAAA;IACvB,gCAAiB,CAAA;IACjB,0CAA2B,CAAA;AAC7B,CAAC,EANW,WAAW,2BAAX,WAAW,QAMtB;AAED,IAAY,aAiBX;AAjBD,WAAY,aAAa;IACvB,kCAAkC;IAClC,kDAAiC,CAAA;IACjC,oDAAmC,CAAA;IACnC,8CAA6B,CAAA;IAC7B,mDAAkC,CAAA;IAClC,uDAAsC,CAAA;IAEtC,qBAAqB;IACrB,sDAAqC,CAAA;IACrC,iDAAgC,CAAA;IAChC,kDAAiC,CAAA;IAEjC,oBAAoB;IACpB,mDAAkC,CAAA;IAClC,6CAA4B,CAAA;IAC5B,2CAA0B,CAAA;AAC5B,CAAC,EAjBW,aAAa,6BAAb,aAAa,QAiBxB","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/types/campaign.ts"],"sourcesContent":["/**\n * Campaign Infrastructure Types\n * Perfect Codebase Campaign - Type Definitions\n */\n\nexport interface CampaignConfig {\n  phases: CampaignPhase[];\n  safetySettings: SafetySettings;\n  progressTargets: ProgressTargets;\n  toolConfiguration: ToolConfiguration;\n}\n\nexport interface CampaignPhase {\n  id: string;\n  name: string;\n  description: string;\n  tools: ScriptTool[];\n  successCriteria: SuccessCriteria;\n  safetyCheckpoints: SafetyCheckpoint[];\n}\n\nexport interface ScriptTool {\n  scriptPath: string;\n  parameters: ScriptParameters;\n  batchSize: number;\n  safetyLevel: SafetyLevel;\n}\n\nexport interface ScriptParameters {\n  maxFiles?: number;\n  autoFix?: boolean;\n  validateSafety?: boolean;\n  resetMetrics?: boolean;\n  dryRun?: boolean;\n  [key: string]: unknown; // Enterprise intelligence: allow additional configuration options\n}\n\nexport interface SuccessCriteria {\n  typeScriptErrors?: number;\n  lintingWarnings?: number;\n  buildTime?: number;\n  enterpriseSystems?: number;\n  customValidation?: () => Promise<boolean>;\n}\n\nexport interface SafetyCheckpoint {\n  id: string;\n  timestamp: Date;\n  stashId: string;\n  metrics: ProgressMetrics;\n  description: string;\n}\n\nexport interface ProgressMetrics {\n  typeScriptErrors: {\n    current: number;\n    target: number;\n    reduction: number;\n    percentage: number;\n  };\n  lintingWarnings: {\n    current: number;\n    target: number;\n    reduction: number;\n    percentage: number;\n  };\n  buildPerformance: {\n    currentTime: number;\n    targetTime: number;\n    cacheHitRate: number;\n    memoryUsage: number;\n  };\n  enterpriseSystems: {\n    current: number;\n    target: number;\n    transformedExports: number;\n  };\n}\n\nexport interface PhaseResult {\n  phaseId: string;\n  success: boolean;\n  metricsImprovement: MetricsImprovement;\n  filesProcessed: number;\n  errorsFixed: number;\n  warningsFixed: number;\n  executionTime: number;\n  safetyEvents: SafetyEvent[];\n}\n\nexport interface MetricsImprovement {\n  typeScriptErrorsReduced: number;\n  lintingWarningsReduced: number;\n  buildTimeImproved: number;\n  enterpriseSystemsAdded: number;\n}\n\nexport interface SafetyEvent {\n  type: SafetyEventType;\n  timestamp: Date;\n  description: string;\n  severity: SafetyEventSeverity;\n  action: string;\n}\n\nexport interface SafetySettings {\n  maxFilesPerBatch: number;\n  buildValidationFrequency: number;\n  testValidationFrequency: number;\n  corruptionDetectionEnabled: boolean;\n  automaticRollbackEnabled: boolean;\n  stashRetentionDays: number;\n}\n\nexport interface ProgressTargets {\n  typeScriptErrors: number;\n  lintingWarnings: number;\n  buildTime: number;\n  enterpriseSystems: number;\n}\n\nexport interface ToolConfiguration {\n  enhancedErrorFixer: string;\n  explicitAnyFixer: string;\n  unusedVariablesFixer: string;\n  consoleStatementFixer: string;\n}\n\nexport interface CorruptionReport {\n  detectedFiles: string[];\n  corruptionPatterns: CorruptionPattern[];\n  severity: CorruptionSeverity;\n  recommendedAction: RecoveryAction;\n}\n\nexport interface CorruptionPattern {\n  pattern: string;\n  description: string;\n  files: string[];\n}\n\nexport interface ValidationResult {\n  success: boolean;\n  errors: string[];\n  warnings: string[];\n  metrics?: ProgressMetrics;\n}\n\nexport interface BuildValidation {\n  success: boolean;\n  buildTime: number;\n  errors: string[];\n  warnings: string[];\n}\n\nexport interface TestValidation {\n  success: boolean;\n  testsRun: number;\n  testsPassed: number;\n  testsFailed: number;\n  errors: string[];\n}\n\nexport interface DryRunResult {\n  wouldProcess: string[];\n  estimatedChanges: number;\n  potentialIssues: string[];\n  safetyScore: number;\n}\n\nexport interface ExecutionResult {\n  success: boolean;\n  filesProcessed: string[];\n  changesApplied: number;\n  errors: string[];\n  warnings: string[];\n  executionTime: number;\n}\n\nexport interface BatchResult {\n  batchId: string;\n  filesProcessed: string[];\n  success: boolean;\n  errors: string[];\n  warnings: string[];\n  metricsChange: Partial<ProgressMetrics>;\n}\n\nexport interface GitStash {\n  id: string;\n  description: string;\n  timestamp: Date;\n  branch: string;\n  ref?: string; // Git stash reference (e.g., stash@{0})\n}\n\nexport interface PhaseReport {\n  phaseId: string;\n  phaseName: string;\n  startTime: Date;\n  endTime?: Date;\n  status: PhaseStatus;\n  metrics: ProgressMetrics;\n  achievements: string[];\n  issues: string[];\n  recommendations: string[];\n}\n\nexport interface ProgressReport {\n  campaignId: string;\n  overallProgress: number;\n  phases: PhaseReport[];\n  currentMetrics: ProgressMetrics;\n  targetMetrics: ProgressMetrics;\n  estimatedCompletion: Date;\n}\n\n// Enums\nexport enum SafetyLevel {\n  LOW = 'LOW',\n  MEDIUM = 'MEDIUM',\n  HIGH = 'HIGH',\n  MAXIMUM = 'MAXIMUM'\n}\n\nexport enum SafetyEventType {\n  CHECKPOINT_CREATED = 'CHECKPOINT_CREATED',\n  ROLLBACK_TRIGGERED = 'ROLLBACK_TRIGGERED',\n  CORRUPTION_DETECTED = 'CORRUPTION_DETECTED',\n  BUILD_FAILURE = 'BUILD_FAILURE',\n  TEST_FAILURE = 'TEST_FAILURE',\n  EMERGENCY_RECOVERY = 'EMERGENCY_RECOVERY'\n}\n\nexport enum SafetyEventSeverity {\n  INFO = 'INFO',\n  WARNING = 'WARNING',\n  ERROR = 'ERROR',\n  CRITICAL = 'CRITICAL'\n}\n\nexport enum CorruptionSeverity {\n  LOW = 'LOW',\n  MEDIUM = 'MEDIUM',\n  HIGH = 'HIGH',\n  CRITICAL = 'CRITICAL'\n}\n\nexport enum RecoveryAction {\n  CONTINUE = 'CONTINUE',\n  RETRY = 'RETRY',\n  ROLLBACK = 'ROLLBACK',\n  EMERGENCY_RESTORE = 'EMERGENCY_RESTORE'\n}\n\nexport enum PhaseStatus {\n  NOT_STARTED = 'NOT_STARTED',\n  IN_PROGRESS = 'IN_PROGRESS',\n  COMPLETED = 'COMPLETED',\n  FAILED = 'FAILED',\n  ROLLED_BACK = 'ROLLED_BACK'\n}\n\nexport enum ErrorCategory {\n  // High-priority TypeScript errors\n  TS2352_TYPE_CONVERSION = 'TS2352',\n  TS2345_ARGUMENT_MISMATCH = 'TS2345',\n  TS2698_SPREAD_TYPE = 'TS2698',\n  TS2304_CANNOT_FIND_NAME = 'TS2304',\n  TS2362_ARITHMETIC_OPERATION = 'TS2362',\n  \n  // Linting categories\n  EXPLICIT_ANY_WARNING = 'explicit-any',\n  UNUSED_VARIABLES = 'unused-vars',\n  CONSOLE_STATEMENTS = 'no-console',\n  \n  // Safety categories\n  CORRUPTION_DETECTED = 'corruption',\n  BUILD_FAILURE = 'build-fail',\n  TEST_FAILURE = 'test-fail'\n}\n\nexport type CheckpointId = string;\nexport type StashId = string;\nexport type Milestone = string;"],"version":3}