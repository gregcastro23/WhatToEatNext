{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/ExplicitAnyEliminationSystem.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/ExplicitAnyEliminationSystem.test.ts"],"sourcesContent":["/**\n * Tests for Explicit-Any Elimination System\n *\n * Verifies batch processing, campaign progress tracking, and 75.5% reduction target\n */\n\nimport {\n  ExplicitAnyEliminationSystem,\n  ExplicitAnyOptions,\n} from './ExplicitAnyEliminationSystem';\nimport { execSync, spawn } from 'child_process';\nimport fs from 'fs';\n\n// Mock child_process and fs\njest.mock('child_process');\njest.mock('fs');\n\nconst mockExecSync = execSync as jest.MockedFunction<typeof execSync>;\nconst mockSpawn = spawn as jest.MockedFunction<typeof spawn>;\nconst mockFs = fs as jest.Mocked<typeof fs>;\n\ndescribe('ExplicitAnyEliminationSystem', () => {\n  let system: ExplicitAnyEliminationSystem;\n\n  beforeEach(() => {\n    system = new ExplicitAnyEliminationSystem();\n    jest.clearAllMocks();\n  });\n\n  describe('buildFixerArguments', () => {\n    it('should build correct arguments for explicit-any options', () => {\n      const options: ExplicitAnyOptions = {\n        maxFiles: 25,\n        autoFix: true,\n        aggressive: true,\n        validateSafety: true,\n      };\n\n      // Use reflection to access private method\n      const buildMethod = (system as any).buildFixerArguments.bind(system);\n      const args = buildMethod(options);\n\n      expect(args).toContain('--max-files=25');\n      expect(args).toContain('--auto-fix');\n      expect(args).toContain('--aggressive');\n      expect(args).toContain('--validate-safety');\n    });\n\n    it('should build correct arguments for dry run', () => {\n      const options: ExplicitAnyOptions = {\n        dryRun: true,\n        silent: true,\n        json: true,\n      };\n\n      const buildMethod = (system as any).buildFixerArguments.bind(system);\n      const args = buildMethod(options);\n\n      expect(args).toContain('--dry-run');\n      expect(args).toContain('--silent');\n      expect(args).toContain('--json');\n    });\n  });\n\n  describe('getCurrentExplicitAnyCount', () => {\n    it('should return current explicit-any count', async () => {\n      mockExecSync.mockReturnValue('624\\n');\n\n      const count = await system.getCurrentExplicitAnyCount();\n\n      expect(count).toBe(624);\n      expect(mockExecSync).toHaveBeenCalledWith(\n        'yarn lint 2>&1 | grep -c \"@typescript-eslint/no-explicit-any\"',\n        { encoding: 'utf8', stdio: 'pipe' }\n      );\n    });\n\n    it('should return 0 when no explicit-any warnings found', async () => {\n      mockExecSync.mockImplementation(() => {\n        throw new Error('No matches found');\n      });\n\n      const count = await system.getCurrentExplicitAnyCount();\n\n      expect(count).toBe(0);\n    });\n  });\n\n  describe('parseFixerOutput', () => {\n    it('should parse successful fixer output correctly', () => {\n      const mockOutput = `\n🎯 Starting Explicit-Any Elimination System...\n📊 Processed 25 files\n✅ Fixed 50 explicit-any warnings\n🎯 Safety Score: 0.92\n✅ Build validation passed\n      `.trim();\n\n      const parseMethod = (system as any).parseFixerOutput.bind(system);\n      const result = parseMethod(mockOutput, true);\n\n      expect(result.success).toBe(true);\n      expect(result.filesProcessed).toBe(25);\n      expect(result.safetyScore).toBe(0.92);\n    });\n\n    it('should extract warnings and errors from output', () => {\n      const mockOutput = `\n⚠️ Warning: Conservative mode enabled\n❌ Error: Some files could not be processed\n⚠️ Warning: Build validation recommended\n      `.trim();\n\n      const parseMethod = (system as any).parseFixerOutput.bind(system);\n      const result = parseMethod(mockOutput, false);\n\n      expect(result.warnings).toHaveLength(2);\n      expect(result.errors).toHaveLength(1);\n      expect(result.warnings[0]).toContain('Conservative mode enabled');\n      expect(result.errors[0]).toContain('Some files could not be processed');\n    });\n  });\n\n  describe('loadCampaignProgress', () => {\n    it('should load existing campaign progress', async () => {\n      const mockProgress = {\n        totalExplicitAnyStart: 1000,\n        totalExplicitAnyRemaining: 500,\n        reductionAchieved: 500,\n        reductionPercentage: 50,\n        campaignTarget: 75.5,\n        isTargetMet: false,\n      };\n\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.promises.readFile = jest\n        .fn()\n        .mockResolvedValue(JSON.stringify(mockProgress));\n      mockExecSync.mockReturnValue('400\\n'); // Current count\n\n      const loadMethod = (system as any).loadCampaignProgress.bind(system);\n      const progress = await loadMethod();\n\n      expect(progress.totalExplicitAnyStart).toBe(1000);\n      expect(progress.totalExplicitAnyRemaining).toBe(400); // Updated from current count\n      expect(progress.campaignTarget).toBe(75.5);\n    });\n\n    it('should initialize new campaign progress when file does not exist', async () => {\n      mockFs.existsSync.mockReturnValue(false);\n      mockExecSync.mockReturnValue('800\\n'); // Current count\n\n      const loadMethod = (system as any).loadCampaignProgress.bind(system);\n      const progress = await loadMethod();\n\n      expect(progress.totalExplicitAnyStart).toBe(800);\n      expect(progress.totalExplicitAnyRemaining).toBe(800);\n      expect(progress.reductionAchieved).toBe(0);\n      expect(progress.reductionPercentage).toBe(0);\n      expect(progress.campaignTarget).toBe(75.5);\n      expect(progress.isTargetMet).toBe(false);\n    });\n  });\n\n  describe('updateCampaignProgress', () => {\n    it('should update campaign progress correctly', async () => {\n      const mockProgress = {\n        totalExplicitAnyStart: 1000,\n        totalExplicitAnyRemaining: 600,\n        reductionAchieved: 400,\n        reductionPercentage: 40,\n        campaignTarget: 75.5,\n        isTargetMet: false,\n      };\n\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.promises.readFile = jest\n        .fn()\n        .mockResolvedValue(JSON.stringify(mockProgress));\n      mockFs.promises.writeFile = jest.fn().mockResolvedValue(undefined);\n      mockExecSync.mockReturnValue('500\\n'); // New current count\n\n      const updateMethod = (system as any).updateCampaignProgress.bind(system);\n      await updateMethod(100);\n\n      expect(mockFs.promises.writeFile).toHaveBeenCalled();\n      const writeCall = (mockFs.promises.writeFile as jest.Mock).mock.calls[0];\n      const updatedProgress = JSON.parse(writeCall[1]);\n\n      expect(updatedProgress.totalExplicitAnyRemaining).toBe(500);\n      expect(updatedProgress.reductionAchieved).toBe(500); // 1000 - 500\n      expect(updatedProgress.reductionPercentage).toBe(50);\n    });\n  });\n\n  describe('executeExplicitAnyFixer', () => {\n    it('should execute fixer with correct options and calculate reduction', async () => {\n      // Mock spawn to simulate successful execution\n      const mockChild = {\n        stdout: { on: jest.fn() },\n        stderr: { on: jest.fn() },\n        on: jest.fn((event, callback) => {\n          if (event === 'close') {\n            callback(0); // Success exit code\n          }\n        }),\n      };\n\n      mockSpawn.mockReturnValue(mockChild as any);\n      mockExecSync\n        .mockReturnValueOnce('100\\n') // Initial count\n        .mockReturnValueOnce('Build successful') // Build validation\n        .mockReturnValueOnce('80\\n'); // Final count\n\n      const options: ExplicitAnyOptions = {\n        maxFiles: 20,\n        autoFix: true,\n        validateSafety: true,\n      };\n\n      const result = await system.executeExplicitAnyFixer(options);\n\n      expect(mockSpawn).toHaveBeenCalledWith(\n        'node',\n        [\n          'scripts/typescript-fixes/fix-explicit-any-systematic.js',\n          '--max-files=20',\n          '--auto-fix',\n          '--validate-safety',\n        ],\n        { stdio: ['pipe', 'pipe', 'pipe'], cwd: process.cwd() }\n      );\n\n      expect(result.success).toBe(true);\n      expect(result.explicitAnyFixed).toBe(20); // 100 - 80\n      expect(result.explicitAnyRemaining).toBe(80);\n      expect(result.reductionPercentage).toBe(20); // 20/100 * 100\n      expect(result.buildValidationPassed).toBe(true);\n    });\n  });\n\n  describe('executeBatchProcessing', () => {\n    it('should process multiple batches until target is met', async () => {\n      // Mock successful executions\n      const mockChild = {\n        stdout: { on: jest.fn() },\n        stderr: { on: jest.fn() },\n        on: jest.fn((event, callback) => {\n          if (event === 'close') {\n            callback(0);\n          }\n        }),\n      };\n\n      mockSpawn.mockReturnValue(mockChild as any);\n\n      // Mock campaign progress\n      const mockProgress = {\n        totalExplicitAnyStart: 1000,\n        totalExplicitAnyRemaining: 200,\n        reductionAchieved: 800,\n        reductionPercentage: 80,\n        campaignTarget: 75.5,\n        isTargetMet: true,\n      };\n\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.promises.readFile = jest\n        .fn()\n        .mockResolvedValue(JSON.stringify(mockProgress));\n      mockFs.promises.writeFile = jest.fn().mockResolvedValue(undefined);\n\n      mockExecSync\n        .mockReturnValueOnce('200\\n') // Current count\n        .mockReturnValueOnce('Build successful') // Build validation\n        .mockReturnValueOnce('150\\n') // After first batch\n        .mockReturnValueOnce('150\\n'); // Load progress\n\n      const results = await system.executeBatchProcessing(2);\n\n      expect(results.length).toBeGreaterThan(0);\n      expect(mockSpawn).toHaveBeenCalled();\n    });\n\n    it('should stop when no progress is made', async () => {\n      const mockChild = {\n        stdout: { on: jest.fn() },\n        stderr: { on: jest.fn() },\n        on: jest.fn((event, callback) => {\n          if (event === 'close') {\n            callback(0);\n          }\n        }),\n      };\n\n      mockSpawn.mockReturnValue(mockChild as any);\n\n      // Mock no progress scenario\n      mockFs.existsSync.mockReturnValue(false);\n      mockExecSync.mockReturnValue('100\\n'); // Same count every time\n\n      const results = await system.executeBatchProcessing(5);\n\n      // Should stop after first batch with no progress\n      expect(results.length).toBe(1);\n    });\n  });\n\n  describe('showCampaignProgress', () => {\n    it('should display campaign progress correctly', async () => {\n      const mockProgress = {\n        totalExplicitAnyStart: 1000,\n        totalExplicitAnyRemaining: 245,\n        reductionAchieved: 755,\n        reductionPercentage: 75.5,\n        campaignTarget: 75.5,\n        isTargetMet: true,\n      };\n\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.promises.readFile = jest\n        .fn()\n        .mockResolvedValue(JSON.stringify(mockProgress));\n      mockExecSync.mockReturnValue('245\\n');\n\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n\n      const progress = await system.showCampaignProgress();\n\n      expect(progress.isTargetMet).toBe(true);\n      expect(progress.reductionPercentage).toBe(75.5);\n      expect(consoleSpy).toHaveBeenCalledWith(\n        expect.stringContaining('Target Met: Yes')\n      );\n\n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('executeCampaignContinuation', () => {\n    it('should continue campaign when target not met', async () => {\n      const mockProgress = {\n        totalExplicitAnyStart: 1000,\n        totalExplicitAnyRemaining: 400,\n        reductionAchieved: 600,\n        reductionPercentage: 60,\n        campaignTarget: 75.5,\n        isTargetMet: false,\n      };\n\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.promises.readFile = jest\n        .fn()\n        .mockResolvedValue(JSON.stringify(mockProgress));\n      mockFs.promises.writeFile = jest.fn().mockResolvedValue(undefined);\n      mockExecSync.mockReturnValue('400\\n');\n\n      const mockChild = {\n        stdout: { on: jest.fn() },\n        stderr: { on: jest.fn() },\n        on: jest.fn((event, callback) => {\n          if (event === 'close') {\n            callback(0);\n          }\n        }),\n      };\n\n      mockSpawn.mockReturnValue(mockChild as any);\n\n      const results = await system.executeCampaignContinuation();\n\n      expect(results).toBeDefined();\n      // Should attempt to continue the campaign\n    });\n\n    it('should return empty array when target already met', async () => {\n      const mockProgress = {\n        totalExplicitAnyStart: 1000,\n        totalExplicitAnyRemaining: 200,\n        reductionAchieved: 800,\n        reductionPercentage: 80,\n        campaignTarget: 75.5,\n        isTargetMet: true,\n      };\n\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.promises.readFile = jest\n        .fn()\n        .mockResolvedValue(JSON.stringify(mockProgress));\n      mockExecSync.mockReturnValue('200\\n');\n\n      const results = await system.executeCampaignContinuation();\n\n      expect(results).toEqual([]);\n    });\n  });\n\n  describe('resetCampaignProgress', () => {\n    it('should reset campaign progress file', async () => {\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.promises.unlink = jest.fn().mockResolvedValue(undefined);\n\n      await system.resetCampaignProgress();\n\n      expect(mockFs.promises.unlink).toHaveBeenCalledWith(\n        '.explicit-any-campaign-progress.json'\n      );\n    });\n\n    it('should handle case when progress file does not exist', async () => {\n      mockFs.existsSync.mockReturnValue(false);\n\n      await system.resetCampaignProgress();\n\n      expect(mockFs.promises.unlink).not.toHaveBeenCalled();\n    });\n  });\n});\n"],"version":3}