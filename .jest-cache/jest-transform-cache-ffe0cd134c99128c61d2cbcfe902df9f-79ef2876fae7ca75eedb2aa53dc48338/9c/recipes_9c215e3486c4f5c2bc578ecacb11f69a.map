{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/data/recipes.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/data/recipes.ts"],"sourcesContent":["import cuisinesMap from '@/data/cuisines/index';\nimport { logger } from '@/utils/logger';\nimport type { ZodiacSign, LunarPhase, Season, ElementalProperties } from '@/types/alchemy';\nimport { \n  planetaryFlavorProfiles, \n  calculateFlavorProfile, \n  getResonantCuisines, \n  getDominantFlavor, \n  calculatePlanetaryFlavorMatch \n} from '@/data/planetaryFlavorProfiles';\nimport { \n  cuisineFlavorProfiles, \n  calculateCuisineFlavorMatch, \n  getCuisineProfile,\n  getRelatedCuisines \n} from '@/data/cuisineFlavorProfiles';\nimport type { Recipe } from '@/types/recipe';\n\n// Log what was imported\nlogger.debug(\"cuisinesMap keys:\", Object.keys(cuisinesMap));\n\nexport interface Ingredient {\n  name: string;\n  amount: number;\n  unit: string;\n  optional?: boolean;\n  preparation?: string;\n  category?: string;\n}\n\n// Interface for dish data from cuisine files\ninterface DishData {\n  name?: string;\n  description?: string;\n  ingredients?: unknown[];\n  preparationSteps?: string[];\n  instructions?: string[];\n  planetary?: string[];\n  flavorProfile?: Record<string, number>;\n  substitutions?: Record<string, any>;\n  zodiac?: string[];\n  lunar?: string[];\n  tags?: string[];\n  timeToMake?: number;\n  cookTime?: number;\n  servingSize?: number;\n  numberOfServings?: number;\n  tools?: string[];\n  spiceLevel?: number | string;\n  nutrition?: any;\n  preparationNotes?: string;\n  culturalNotes?: string;\n  technicalTips?: string[];\n  dietaryInfo?: string[];\n  regionalCuisine?: string;\n}\n\nexport interface Nutrition {\n  calories?: number;\n  protein?: number;\n  carbs?: number;\n  fat?: number;\n  vitamins?: string[];\n  minerals?: string[];\n}\n\nexport interface RecipeData {\n  id: string;\n  name: string;\n  description: string;\n  ingredients: Ingredient[];\n  instructions: string[];\n  cuisine?: string;\n  energyProfile: {\n    zodiac?: ZodiacSign[];\n    lunar?: LunarPhase[];\n    planetary?: string[];\n    season?: Season[];\n  };\n  tags?: string[];\n  timeToMake?: number;\n  flavorProfile?: {\n    spicy: number;\n    sweet: number;\n    sour: number;\n    bitter: number;\n    salty: number;\n    umami: number;\n  };\n  planetaryInfluences?: Record<string, number>;\n  regionalCuisine?: string; // Store specific regional variation if applicable\n  matchScore?: number; // Used for sorting and displaying compatibility\n  \n  // Standardized fields\n  servingSize?: number; // Number of servings\n  substitutions?: { original: string; alternatives: string[] }[];\n  tools?: string[]; // Required cooking tools/equipment\n  spiceLevel?: number | 'mild' | 'medium' | 'hot' | 'very hot'; // Indicator of spiciness\n  nutrition?: Nutrition; // Nutritional information\n  preparationNotes?: string; // Special notes about preparation\n  technicalTips?: string[]; // Technical cooking tips\n  \n  // Additional properties accessed in the code\n  elementalProperties?: any;\n  season?: Season | Season[] | string; // For backward compatibility\n  mealType?: string | string[]; // For meal type classification\n  cookingMethod?: string; // Primary cooking method\n  cookingMethods?: string[]; // Multiple cooking methods\n  matchPercentage?: number; // For display purposes\n}\n\nconst transformCuisineData = async (): Promise<RecipeData[]> => {\n  const recipes: RecipeData[] = [];\n  \n  logger.debug(\"Starting transformCuisineData\");\n  logger.debug(\"Available cuisines:\", Object.keys(cuisinesMap));\n  \n  const cuisineDataPromises = Object.entries(cuisinesMap).map(async ([cuisineName, cuisineData]) => {\n    try {\n      logger.debug(`Processing cuisine: ${cuisineName}`);\n      \n      const primaryPlanetaryInfluences: Record<string, number> = {};\n      \n      // Get the cuisine flavor profile\n      const cuisineProfile = getCuisineProfile(cuisineName);\n      \n      // Map planetary influences based on cuisine's flavor profile\n      Object.entries(planetaryFlavorProfiles).forEach(([planet, profile]) => {\n        const profileData = profile as Record<string, unknown>;\n        const culinaryAffinity = profileData?.culinaryAffinity || [];\n        \n        if (culinaryAffinity.includes(cuisineName.toLowerCase())) {\n          primaryPlanetaryInfluences[planet] = 0.8;\n        } else {\n          const partialMatch = culinaryAffinity.some((affinity: string) => \n            affinity.includes(cuisineName.toLowerCase()) || cuisineName.toLowerCase().includes(affinity)\n          );\n          if (partialMatch) {\n            primaryPlanetaryInfluences[planet] = 0.5;\n          }\n        }\n      });\n      \n      // Get flavor profile from cuisine definitions or calculate from planetary influences\n      const cuisineProfileData = cuisineProfile as Record<string, unknown>;\n      const cuisineFlavorProfile = cuisineProfileData?.flavorProfiles;\n      const defaultFlavorProfile = cuisineFlavorProfile || calculateFlavorProfile(primaryPlanetaryInfluences);\n      \n      // Handle dishes\n      const cuisineDataObj = cuisineData as Record<string, unknown>;\n      if (cuisineDataObj && cuisineDataObj.dishes && typeof cuisineDataObj.dishes === 'object') {\n        // Log the dishes structure to debug\n        logger.debug(`${cuisineName} dishes:`, Object.keys(cuisineDataObj.dishes));\n        \n        // Process meal types (breakfast, lunch, dinner, etc.)\n        Object.entries(cuisineDataObj.dishes).forEach(([mealType, mealData]) => {\n          if (!mealData) {\n            logger.debug(`No meal data for ${cuisineName} - ${mealType}`);\n            return;\n          }\n          \n          if (typeof mealData === 'object') {\n            // Log meal data structure\n            logger.debug(`${cuisineName} - ${mealType} data:`, Object.keys(mealData as Record<string, unknown>));\n            \n            // Process season data (spring, summer, autumn, winter, all)\n            Object.entries(mealData as Record<string, unknown>).forEach(([season, dishes]) => {\n              if (!dishes) {\n                logger.debug(`No dishes for ${cuisineName} - ${mealType} - ${season}`);\n                return;\n              }\n              \n              // Ensure dishes is an array\n              if (Array.isArray(dishes)) {\n                logger.debug(`Found ${dishes.length} dishes for ${cuisineName} - ${mealType} - ${season}`);\n                \n                // Process individual dishes\n                dishes.forEach((dish: unknown) => {\n                  const dishData = dish as DishData;\n                  \n                  if (!dishData || !dishData?.name) {\n                    logger.debug('Skipping invalid dish:', dish);\n                    return;\n                  }\n                  \n                  // Build dish-specific planetary influences\n                  const dishPlanetaryInfluences = { ...primaryPlanetaryInfluences };\n                  \n                  const dishPlanetary = dishData?.planetary;\n                  if (dishPlanetary && Array.isArray(dishPlanetary)) {\n                    dishPlanetary.forEach((planet: string) => {\n                      dishPlanetaryInfluences[planet] = dishPlanetaryInfluences[planet] ? \n                        Math.min(dishPlanetaryInfluences[planet] + 0.3, 1.0) : 0.7;\n                    });\n                  }\n                  \n                  // Use dish-specific flavor profile if available, otherwise use cuisine default\n                  const flavorProfile = dishData?.flavorProfile || defaultFlavorProfile;\n                  \n                  // Transform substitutions from object to array format if they exist\n                  const dishSubstitutions = dishData?.substitutions;\n                  const substitutions = dishSubstitutions ? \n                    Object.entries(dishSubstitutions).map(([original, alternatives]) => ({\n                      original,\n                      alternatives: Array.isArray(alternatives) ? alternatives : [alternatives]\n                    })) : undefined;\n                  \n                  // Create the recipe entry\n                  const recipeData: RecipeData = {\n                    id: `${cuisineName}-${mealType}-${dishData?.name}`.replace(/\\s+/g, '-').toLowerCase(),\n                    name: dishData?.name || '',\n                    description: dishData?.description || `A traditional ${cuisineName} dish`,\n                    ingredients: Array.isArray(dishData?.ingredients) ? \n                      dishData.ingredients.map((ingredient: Ingredient | UnifiedIngredient) => {\n                        const ingredientData = ingredient as Record<string, unknown>;\n                        return {\n                          name: ingredientData?.name || ingredientData?.ingredient || 'Unknown ingredient',\n                          amount: ingredientData?.amount || ingredientData?.quantity || 1,\n                          unit: ingredientData?.unit || 'piece',\n                          optional: ingredientData?.optional || false,\n                          preparation: ingredientData?.preparation || '',\n                          category: ingredientData?.category || ''\n                        };\n                      }) : [],\n                    instructions: Array.isArray(dishData?.instructions) ? dishData.instructions :\n                                 Array.isArray(dishData?.preparationSteps) ? dishData.preparationSteps :\n                                 ['Prepare according to traditional methods'],\n                    cuisine: cuisineName,\n                    energyProfile: {\n                      zodiac: Array.isArray(dishData?.zodiac) ? dishData.zodiac as ZodiacSign[] : undefined,\n                      lunar: Array.isArray(dishData?.lunar) ? dishData.lunar as LunarPhase[] : undefined,\n                      planetary: Array.isArray(dishData?.planetary) ? dishData.planetary : undefined,\n                      season: season !== 'all' ? [season as Season] : ['spring', 'summer', 'autumn', 'winter'] as Season[]\n                    },\n                    tags: Array.isArray(dishData?.tags) ? dishData.tags : [],\n                    timeToMake: dishData?.timeToMake || dishData?.cookTime || 30,\n                    flavorProfile: flavorProfile ? {\n                      spicy: flavorProfile.spicy || 0,\n                      sweet: flavorProfile.sweet || 0,\n                      sour: flavorProfile.sour || 0,\n                      bitter: flavorProfile.bitter || 0,\n                      salty: flavorProfile.salty || 0,\n                      umami: flavorProfile.umami || 0\n                    } : undefined,\n                    planetaryInfluences: dishPlanetaryInfluences,\n                    regionalCuisine: dishData?.regionalCuisine || cuisineName,\n                    \n                    // Standardized fields\n                    servingSize: dishData?.servingSize || dishData?.numberOfServings || 4,\n                    substitutions,\n                    tools: Array.isArray(dishData?.tools) ? dishData.tools : [],\n                    spiceLevel: (typeof dishData?.spiceLevel === 'string' && \n                      ['mild', 'medium', 'hot', 'very hot'].includes(dishData.spiceLevel)) \n                      ? dishData.spiceLevel as 'mild' | 'medium' | 'hot' | 'very hot'\n                      : (typeof dishData?.spiceLevel === 'number' ? dishData.spiceLevel : 1),\n                    nutrition: dishData?.nutrition,\n                    preparationNotes: dishData?.preparationNotes,\n                    technicalTips: Array.isArray(dishData?.technicalTips) ? dishData.technicalTips : [],\n                    \n                    // Additional properties for compatibility\n                    elementalProperties: undefined, // To be calculated later if needed\n                    season: season !== 'all' ? season as Season : undefined,\n                    mealType: mealType,\n                    cookingMethod: undefined, // Could be derived from instructions\n                    cookingMethods: undefined,\n                    matchPercentage: 0\n                  };\n                  \n                  recipes.push(recipeData);\n                });\n              }\n            });\n          }\n        });\n      }\n    } catch (error) {\n      console.error(`Error processing cuisine ${cuisineName}:`, error);\n    }\n  });\n  \n  await Promise.all(cuisineDataPromises);\n  \n  logger.debug(`Transformed ${recipes.length} recipes`);\n  return recipes;\n};\n\n// Cache recipes to avoid re-processing\nlet cachedRecipes: RecipeData[] | null = null;\n\nexport const getRecipes = async (): Promise<RecipeData[]> => {\n  if (!cachedRecipes) {\n    cachedRecipes = await transformCuisineData();\n  }\n  return cachedRecipes;\n};\n\nexport const getRecipesForZodiac = async (zodiac: ZodiacSign): Promise<RecipeData[]> => {\n  const recipes = await getRecipes();\n  return recipes.filter(recipe => {\n    const recipeData = recipe as Record<string, unknown>;\n    const energyProfile = recipeData?.energyProfile;\n    return energyProfile?.zodiac?.includes(zodiac);\n  });\n};\n\nexport const getRecipesForSeason = async (season: Season): Promise<RecipeData[]> => {\n  const recipes = await getRecipes();\n  return recipes.filter(recipe => {\n    const recipeData = recipe as Record<string, unknown>;\n    const energyProfile = recipeData?.energyProfile;\n    return energyProfile?.season?.includes(season) || recipeData?.season === season;\n  });\n};\n\nexport const getRecipesForLunarPhase = async (lunarPhase: LunarPhase): Promise<RecipeData[]> => {\n  const recipes = await getRecipes();\n  return recipes.filter(recipe => {\n    const recipeData = recipe as LunarPhase;\n    const energyProfile = recipeData?.energyProfile;\n    return energyProfile?.lunar?.includes(lunarPhase);\n  });\n};\n\nexport const getRecipesForCuisine = async (cuisine: string): Promise<RecipeData[]> => {\n  const recipes = await getRecipes();\n  return recipes.filter(recipe => {\n    const recipeData = recipe as Record<string, unknown>;\n    return recipeData?.cuisine?.toLowerCase() === cuisine.toLowerCase() ||\n           recipeData?.regionalCuisine?.toLowerCase() === cuisine.toLowerCase();\n  });\n};\n\n/**\n * Get recipes compatible with certain planetary alignments\n */\nexport const getRecipesForPlanetaryAlignment = async (\n  planetaryInfluences: Record<string, number>,\n  minMatchScore = 0.6\n): Promise<RecipeData[]> => {\n  const recipes = await getRecipes();\n  return recipes\n    .filter(recipe => recipe.flavorProfile)\n    .map(recipe => ({\n      ...recipe,\n      matchScore: recipe.flavorProfile \n        ? calculatePlanetaryFlavorMatch(recipe.flavorProfile, planetaryInfluences)\n        : 0\n    }))\n    .filter(recipe => (recipe.matchScore || 0) >= minMatchScore)\n    .sort((a, b) => (b.matchScore || 0) - (a.matchScore || 0));\n};\n\n/**\n * Get the dominant planetary influence for a recipe\n */\nexport const getDominantPlanetaryInfluence = (recipe: RecipeData): string | null => {\n  if (!recipe.planetaryInfluences) return null;\n  \n  const entries = Object.entries(recipe.planetaryInfluences);\n  if (!entries.length) return null;\n  \n  return entries.sort(([, valueA], [, valueB]) => (valueB as number) - (valueA as number))[0][0];\n};\n\n/**\n * Get cooking techniques that complement the recipe\n */\nexport const getRecommendedCookingTechniques = (recipe: RecipeData): string[] => {\n  // First try to get techniques from cuisine profile\n  const cuisineProfile = recipe.cuisine ? getCuisineProfile(recipe.cuisine) : null;\n  if (cuisineProfile && cuisineProfile.signatureTechniques) {\n    return [...cuisineProfile.signatureTechniques];\n  }\n\n  // Fallback to planetary-based techniques\n  if (!recipe.planetaryInfluences) return [];\n  \n  const techniques: Record<string, number> = {};\n  \n  Object.entries(recipe.planetaryInfluences).forEach(([planet, weight]) => {\n    if (planetaryFlavorProfiles[planet]) {\n      planetaryFlavorProfiles[planet].cookingTechniques.forEach(technique => {\n        if (!techniques[technique]) techniques[technique] = 0;\n        techniques[technique] += weight as number;\n      });\n    }\n  });\n  \n  return Object.entries(techniques)\n    .sort(([, scoreA], [, scoreB]) => (scoreB as number) - (scoreA as number))\n    .slice(0, 3)\n    .map(([technique]) => technique);\n};\n\nexport {\n  calculateFlavorProfile,\n  getResonantCuisines,\n  getDominantFlavor,\n  calculatePlanetaryFlavorMatch\n};\n\n/**\n * Get recipes that match a given flavor profile, sorted by match score\n */\nexport const getRecipesForFlavorProfile = async (\n  flavorProfile: Record<string, number>,\n  minMatchScore = 0.7\n): Promise<RecipeData[]> => {\n  const recipes = await getRecipes();\n  return recipes\n    .filter(recipe => recipe.flavorProfile)\n    .map(recipe => {\n      // Calculate similarity between flavor profiles\n      let similarity = 0;\n      let totalWeight = 0;\n      \n      Object.entries(flavorProfile).forEach(([flavor, value]) => {\n        const recipeValue = recipe.flavorProfile?.[flavor as keyof typeof recipe.flavorProfile] || 0;\n        const flavorSimilarity = 1 - Math.abs(value - recipeValue);\n        \n        // Weight by the importance of the flavor in input profile\n        const weight = value > 0.5 ? 2 : 1;\n        similarity += flavorSimilarity * weight;\n        totalWeight += weight;\n      });\n      \n      const matchScore = totalWeight > 0 ? similarity / totalWeight : 0;\n      \n      return {\n        ...recipe,\n        matchScore\n      };\n    })\n    .filter(recipe => (recipe.matchScore || 0) >= minMatchScore)\n    .sort((a, b) => (b.matchScore || 0) - (a.matchScore || 0));\n};\n\n/**\n * Get recipes that match a specific cuisine's flavor profile\n */\nexport const getRecipesForCuisineMatch = async (\n  cuisineName: string,\n  minMatchScore = 0.7\n): Promise<RecipeData[]> => {\n  const recipes = await getRecipes();\n  // Get the cuisine's flavor profile\n  const cuisineProfile = getCuisineProfile(cuisineName);\n  if (!cuisineProfile) return [];\n  \n  // Get related cuisines\n  const relatedCuisines = [cuisineName, ...getRelatedCuisines(cuisineName)];\n  \n  return recipes\n    .map(recipe => {\n      // Direct cuisine match gets a boost\n      const directMatch = relatedCuisines.includes(recipe.cuisine?.toLowerCase() || '');\n      const regionMatch = relatedCuisines.includes(recipe.regionalCuisine?.toLowerCase() || '');\n      \n      // Calculate match score\n      let matchScore = 0;\n      \n      if (recipe.flavorProfile) {\n        // Calculate flavor profile match\n        matchScore = calculateCuisineFlavorMatch(\n          recipe.flavorProfile, \n          cuisineName\n        );\n        \n        // Boost for direct cuisine matches\n        if (directMatch) matchScore = Math.min(1.0, matchScore + 0.15);\n        if (regionMatch) matchScore = Math.min(1.0, matchScore + 0.1);\n      } else if (directMatch) {\n        // If no flavor profile but direct cuisine match, assign a default score\n        matchScore = 0.8;\n      } else if (regionMatch) {\n        // If regional match, assign a slightly lower score\n        matchScore = 0.75;\n      }\n      \n      return {\n        ...recipe,\n        matchScore\n      };\n    })\n    .filter(recipe => (recipe.matchScore || 0) >= minMatchScore)\n    .sort((a, b) => (b.matchScore || 0) - (a.matchScore || 0));\n};\n\n/**\n * Get best matched recipes based on multiple criteria\n */\nexport const getBestRecipeMatches = async (\n  criteria: MatchCriteria,\n  limit = 10\n): Promise<RecipeData[]> => {\n  logger.debug(\"getBestRecipeMatches called with criteria:\", criteria);\n  \n  // Start with all recipes\n  let candidateRecipes = [...await getRecipes()];\n  logger.debug(`Starting with ${candidateRecipes.length} total recipes`);\n  \n  // Apply cuisine filter if specified\n  if (criteria.cuisine) {\n    logger.debug(`Filtering by cuisine: ${criteria.cuisine}`);\n    \n    // First try to use getRecipesForCuisineMatch from cuisineFlavorProfiles\n    // which has enhanced functionality including LocalRecipeService integration\n    try {\n      const { getRecipesForCuisineMatch } = await import('./cuisineFlavorProfiles');\n      const matchedCuisineRecipes = getRecipesForCuisineMatch(\n        criteria.cuisine,\n        [], // Empty array triggers direct LocalRecipeService use\n        Math.max(limit * 2, 20) // Get more recipes for better filtering\n      );\n      \n      logger.debug(`getRecipesForCuisineMatch returned ${matchedCuisineRecipes.length} recipes`);\n      \n      if (matchedCuisineRecipes && matchedCuisineRecipes.length > 0) {\n        // Convert the recipes to ensure they match RecipeData format\n        const formattedRecipes = matchedCuisineRecipes.map(recipe => {\n          const recipeData = recipe as Record<string, unknown>;\n          const name = recipeData?.name || '';\n          const description = recipeData?.description || `A ${criteria.cuisine} recipe`;\n          const ingredients = Array.isArray(recipeData?.ingredients) ? recipeData.ingredients : [];\n          const instructions = Array.isArray(recipeData?.instructions) ? recipeData.instructions : \n            typeof recipeData?.instructions === 'string' ? [recipeData.instructions] : [];\n          const cuisine = recipeData?.cuisine || criteria.cuisine;\n          const regionalCuisine = recipeData?.regionalCuisine;\n          const cookingMethod = recipeData?.cookingMethod || recipeData?.cookingMethods?.[0];\n          const flavorProfile = recipeData?.flavorProfile || {\n            spicy: 0.5,\n            sweet: 0.5,\n            sour: 0.5,\n            bitter: 0.5,\n            salty: 0.5,\n            umami: 0.5\n          };\n          \n          return {\n          id: recipeData?.id || `${name.toLowerCase().replace(/\\s+/g, '-')}`,\n          name,\n          description,\n          ingredients: ingredients.map((ing: unknown) => ({\n              name: ing?.name || '',\n              amount: typeof ing?.amount === 'number' ? ing.amount : parseFloat(ing?.amount) || 1,\n              unit: ing?.unit || '',\n              optional: ing?.optional || false\n            })),\n          instructions,\n          cuisine,\n          regionalCuisine,\n          cookingMethod,\n          flavorProfile,\n          elementalProperties: recipeData?.elementalProperties,\n          energyProfile: {\n            season: Array.isArray(recipeData?.season) ? recipeData.season as Season[] : \n              typeof recipeData?.season === 'string' ? [recipeData.season as Season] : ['spring'],\n            zodiac: [],\n            lunar: [],\n            planetary: []\n          },\n          tags: [\n            ...(Array.isArray(recipeData?.mealType) ? recipeData.mealType : (typeof recipeData?.mealType === 'string' ? [recipeData.mealType] : [])).map(type => type.toLowerCase()),\n            ...(Array.isArray(recipeData?.season) ? recipeData.season : (typeof recipeData?.season === 'string' ? [recipeData.season] : [])).map(s => s.toLowerCase())\n          ],\n          timeToMake: recipeData?.timeToMake,\n          // Use the matchScore or matchPercentage if provided, otherwise use a default score\n          matchScore: recipeData?.matchScore || (recipeData?.matchPercentage ? recipeData.matchPercentage / 100 : 0.85)\n        } as RecipeData;\n        });\n        \n        candidateRecipes = formattedRecipes;\n        \n        // If we got recipes directly and they already have match scores,\n        // we can just return them after additional filtering\n        if (formattedRecipes.length > 0 && formattedRecipes[0].matchScore !== undefined) {\n          // Apply additional filters if needed\n          return applyAdditionalFilters(formattedRecipes, criteria, limit);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error using enhanced getRecipesForCuisineMatch:\", error);\n    }\n    \n    // Fallback to LocalRecipeService if getRecipesForCuisineMatch failed\n    const allRecipes = await getRecipes();\n    if (candidateRecipes.length === 0 || candidateRecipes === allRecipes) {\n      try {\n        // Import and use LocalRecipeService directly\n        const { LocalRecipeService } = await import('../services/LocalRecipeService');\n        \n        // Get local recipes directly\n        const localRecipeResults = LocalRecipeService.getRecipesByCuisine(criteria.cuisine || '');\n        const localRecipes = await Promise.resolve(localRecipeResults);\n        logger.debug(`Found ${localRecipes.length} recipes from LocalRecipeService for ${criteria.cuisine}`);\n        \n        if (localRecipes.length > 0) {\n          // Convert the recipes to RecipeData format\n          candidateRecipes = localRecipes.map(recipe => {\n            const recipeData = recipe as Record<string, unknown>;\n            const name = recipeData?.name || '';\n            const description = recipeData?.description || '';\n            const ingredients = Array.isArray(recipeData?.ingredients) ? recipeData.ingredients : [];\n            const instructions = Array.isArray(recipeData?.instructions) ? recipeData.instructions : [];\n            const cuisine = recipeData?.cuisine || '';\n            const season = recipeData?.season;\n            const mealType = recipeData?.mealType;\n            const timeToMake = recipeData?.timeToMake;\n            \n            return {\n            id: recipeData?.id || `${name.toLowerCase().replace(/\\s+/g, '-')}`,\n            name,\n            description,\n            ingredients: ingredients.map((ing: unknown) => ({\n              name: ing?.name || '',\n              amount: typeof ing?.amount === 'number' ? ing.amount : parseFloat(ing?.amount) || 1,\n              unit: ing?.unit || '',\n              optional: ing?.optional || false\n            })),\n            instructions,\n            cuisine,\n            energyProfile: {\n              season: Array.isArray(season) ? season as Season[] : \n                typeof season === 'string' ? [season as Season] : ['spring'],\n              zodiac: [],\n              lunar: [],\n              planetary: []\n            },\n            tags: [\n              ...(Array.isArray(mealType) ? mealType : (typeof mealType === 'string' ? [mealType] : [])).map(type => type.toLowerCase()),\n              ...(Array.isArray(season) ? season : (typeof season === 'string' ? [season] : [])).map(s => s.toLowerCase())\n            ],\n            timeToMake,\n            matchScore: 0.85, // Default high score for local recipes\n            matchPercentage: 85 // For display purposes\n          } as RecipeData;\n          });\n          \n          // Apply additional filters if needed\n          return applyAdditionalFilters(candidateRecipes, criteria, limit);\n        }\n      } catch (error) {\n        console.error(\"Error using LocalRecipeService directly:\", error);\n      }\n    }\n  }\n  \n  logger.debug(`After cuisine filtering: ${candidateRecipes.length} recipes`);\n  \n  // Apply additional filters and scoring\n  return applyAdditionalFilters(candidateRecipes, criteria, limit);\n};\n\n// Define the criteria interface\ninterface MatchCriteria {\n  cuisine?: string;\n  flavorProfile?: Record<string, number>;\n  season?: Season;\n  mealType?: string;\n  ingredients?: string[];\n  dietaryPreferences?: string[];\n}\n\n// Helper function to apply additional filters and calculate scores\nasync function applyAdditionalFilters(\n  candidateRecipes: RecipeData[], \n  criteria: MatchCriteria,\n  limit: number\n): Promise<RecipeData[]> {\n  // Preload modules we'll need\n  let cuisineModule;\n  if (criteria.cuisine) {\n    try {\n      cuisineModule = await import('./cuisineFlavorProfiles');\n    } catch (error) {\n      console.error(\"Error importing cuisineFlavorProfiles:\", error);\n    }\n  }\n  \n  // Apply season filter if specified\n  if (criteria.season) {\n    logger.debug(`Filtering by season: ${criteria.season}`);\n    const seasonRecipes = candidateRecipes.filter(recipe => \n      recipe.energyProfile?.season?.includes(criteria.season!) ||\n      (Array.isArray(recipe.season) && recipe.season.includes(criteria.season)) ||\n      (typeof recipe.season === 'string' && recipe.season === criteria.season)\n    );\n    \n    logger.debug(`Found ${seasonRecipes.length} recipes for season ${criteria.season}`);\n    \n    // If we have enough seasonal recipes, use only those\n    if (seasonRecipes.length >= limit) {\n      candidateRecipes = seasonRecipes;\n    }\n  }\n  \n  // Apply meal type filter if specified\n  if (criteria.mealType) {\n    logger.debug(`Filtering by meal type: ${criteria.mealType}`);\n    const normalizedMealType = criteria.mealType.toLowerCase();\n    \n    const mealTypeRecipes = candidateRecipes.filter(recipe => {\n      // Check if recipe has a mealType tag\n      if (recipe.tags?.some(tag => tag.toLowerCase() === normalizedMealType)) {\n        return true;\n      }\n      \n      // Also check mealType field directly\n      if (Array.isArray(recipe.mealType) && \n          recipe.mealType.some(mt => mt.toLowerCase() === normalizedMealType)) {\n        return true;\n      }\n      \n      if (typeof recipe.mealType === 'string' && \n          recipe.mealType.toLowerCase() === normalizedMealType) {\n        return true;\n      }\n      \n      return false;\n    });\n    \n    logger.debug(`Found ${mealTypeRecipes.length} recipes for meal type ${criteria.mealType}`);\n    \n    // If we have enough meal type specific recipes, use only those\n    if (mealTypeRecipes.length >= limit) {\n      candidateRecipes = mealTypeRecipes;\n    }\n  }\n  \n  if (candidateRecipes.length === 0) {\n    logger.debug(\"No matching recipes found after all filtering\");\n    // Return empty array as fallback when no recipes match\n    return [];\n  }\n  \n  // Calculate match scores for all candidate recipes if they don't already have scores\n  const scoredRecipes = candidateRecipes.map(recipe => {\n    // If recipe already has a matchScore, use it\n    if (recipe.matchScore !== undefined) {\n      return {\n        ...recipe,\n        // Add matchPercentage if it doesn't exist\n        matchPercentage: recipe.matchPercentage || Math.round(recipe.matchScore * 100)\n      };\n    }\n    \n    // Otherwise calculate a new score\n    let totalScore = 0;\n    let factorsConsidered = 0;\n    \n    // Base score from cuisine match\n    if (criteria.cuisine && cuisineModule) {\n      try {\n        const { getCuisineProfile, calculateCuisineFlavorMatch } = cuisineModule;\n        const cuisineProfile = getCuisineProfile(criteria.cuisine);\n        if (cuisineProfile && recipe.flavorProfile) {\n          // Validate flavor profile properties\n          const validFlavorProfile: Record<string, number> = {};\n          for (const [flavor, value] of Object.entries(recipe.flavorProfile)) {\n            if (typeof value === 'number' && !isNaN(value)) {\n              validFlavorProfile[flavor] = value;\n            } else {\n              console.warn(`Invalid ${flavor} value in recipe ${recipe.name}: ${value}`);\n              validFlavorProfile[flavor] = 0; // Default to none\n            }\n          }\n          \n          const cuisineScore = calculateCuisineFlavorMatch(\n            validFlavorProfile, \n            criteria.cuisine\n          );\n          totalScore += cuisineScore * 6.0;\n          factorsConsidered += 6.0;\n          \n          // Direct cuisine match bonus\n          if (recipe.cuisine?.toLowerCase() === criteria.cuisine.toLowerCase()) {\n            totalScore += 4.0;\n            factorsConsidered += 4.0;\n          }\n          \n          // Regional match bonus\n          if (recipe.regionalCuisine?.toLowerCase() === criteria.cuisine.toLowerCase()) {\n            totalScore += 3.0;\n            factorsConsidered += 3.0;\n          }\n        }\n      } catch (error) {\n        console.error(\"Error calculating cuisine match score:\", error);\n      }\n    }\n    \n    // Season match - enhanced with better scoring\n    if (criteria.season) {\n      const seasonMatch = (\n        (recipe.energyProfile?.season && recipe.energyProfile.season.includes(criteria.season)) ||\n        (Array.isArray(recipe.season) && recipe.season.includes(criteria.season)) ||\n        (typeof recipe.season === 'string' && recipe.season === criteria.season)\n      );\n      \n      if (seasonMatch) {\n        totalScore += 3.0;\n        factorsConsidered += 3.0;\n      } else {\n        // More significant penalty for incorrect season\n        totalScore -= 1.0;\n        factorsConsidered += 2.0;\n      }\n    }\n    \n    // Meal type match - enhanced with better scoring\n    if (criteria.mealType) {\n      const normalizedMealType = criteria.mealType.toLowerCase();\n      \n      const mealTypeMatch = (\n        (recipe.tags && recipe.tags.some(tag => tag.toLowerCase() === normalizedMealType)) ||\n        (Array.isArray(recipe.mealType) && recipe.mealType.some(mt => mt.toLowerCase() === normalizedMealType)) ||\n        (typeof recipe.mealType === 'string' && recipe.mealType.toLowerCase() === normalizedMealType)\n      );\n      \n      if (mealTypeMatch) {\n        totalScore += 3.0;\n        factorsConsidered += 3.0;\n      } else {\n        // More significant penalty for incorrect meal type\n        totalScore -= 1.0;\n        factorsConsidered += 2.0;\n      }\n    }\n    \n    // Calculate final score with normalization\n    const matchScore = factorsConsidered > 0 \n      ? Math.min(1, Math.max(0, totalScore / factorsConsidered))\n      : 0.5; // Default score if no factors were considered\n    \n    // Apply non-linear scaling to create more distinctions between recipes\n    let adjustedScore;\n    if (matchScore < 0.4) {\n      adjustedScore = matchScore * 0.7; // Lower scores get reduced further\n    } else if (matchScore < 0.7) {\n      adjustedScore = 0.28 + (matchScore - 0.4) * 1.4; // Mid-range scores get a balanced adjustment\n    } else {\n      adjustedScore = 0.7 + (matchScore - 0.7) * 1.5; // High scores get boosted\n    }\n    \n    // Add a small random variation for natural-feeling results\n    const jitter = (Math.random() * 0.04) - 0.02;\n    const finalScore = Math.min(Math.max(adjustedScore + jitter, 0.1), 1.0);\n    const percentage = Math.round(finalScore * 100);\n    \n    return {\n      ...recipe,\n      matchScore: finalScore,\n      matchPercentage: percentage\n    };\n  });\n  \n  logger.debug(`Returning ${Math.min(scoredRecipes.length, limit)} recipes after scoring`);\n  \n  // Sort by match score and return top results\n  return scoredRecipes\n    .sort((a, b) => (b.matchScore || 0) - (a.matchScore || 0))\n    .slice(0, limit);\n}\n\n// Export additional utility functions\nexport { calculateCuisineFlavorMatch } from '@/data/cuisineFlavorProfiles';\n\n// Profile interface for cuisine recommendations\ninterface CuisineRecommendationProfile {\n  flavorProfile?: Record<string, number>;\n  season?: string;\n  dietaryPreference?: string;\n}\n\n// Re-export these functions with proper implementations\nexport const getRecommendedCuisines = (profile: CuisineRecommendationProfile) => {\n  // Implementation based on cuisine flavor profiles\n  if (!profile || typeof profile !== 'object') return [];\n  \n  return Object.entries(cuisineFlavorProfiles)\n    .map(([cuisineName, cuisineProfile]) => {\n      // Skip regional variants with a parent cuisine\n      if (cuisineProfile.parentCuisine) return null;\n      \n      // Calculate match score based on flavor profile\n      let matchScore = 0;\n      let totalFactors = 0;\n      \n      // Flavor profile matching\n      if (profile.flavorProfile) {\n        const flavorMatch = calculateCuisineFlavorMatch(\n          profile.flavorProfile, \n          cuisineName\n        );\n        matchScore += flavorMatch * 2;\n        totalFactors += 2;\n      }\n      \n      // Season matching\n      if (profile.season && (cuisineProfile as Record<string, unknown>)?.seasonalPreference) {\n        const seasonMatch = (cuisineProfile as string)?.seasonalPreference.includes(profile.season);\n        if (seasonMatch) {\n          matchScore += 1;\n          totalFactors += 1;\n        }\n      }\n      \n      // Dietary preference matching\n      if (profile.dietaryPreference && cuisineProfile.dietarySuitability) {\n        const dietaryScore = cuisineProfile.dietarySuitability[profile.dietaryPreference] || 0;\n        matchScore += dietaryScore;\n        totalFactors += 1;\n      }\n      \n      // Calculate final score\n      const finalScore = totalFactors > 0 ? matchScore / totalFactors : 0;\n      \n      return {\n        id: cuisineName,\n        name: (cuisineProfile as Record<string, unknown>)?.name,\n        score: finalScore\n      };\n    })\n    .filter(result => result !== null && result.score > 0.6)\n    .sort((a, b) => (b?.score || 0) - (a?.score || 0)) as { id: string, name: string, score: number }[];\n};\n\nexport const getFusionSuggestions = (cuisine1: string, cuisine2: string) => {\n  // Get cuisine profiles\n  const profile1 = getCuisineProfile(cuisine1);\n  const profile2 = getCuisineProfile(cuisine2);\n  \n  if (!profile1 || !profile2) {\n    return { compatibility: 0, techniques: [], ingredients: [] };\n  }\n  \n  // Calculate flavor profile compatibility\n  let flavorSimilarity = 0;\n  Object.entries(profile1.flavorProfiles).forEach(([flavor, value1]) => {\n    const value2 = profile2.flavorProfiles[flavor as keyof typeof profile2.flavorProfiles];\n    flavorSimilarity += 1 - Math.abs(value1 - value2);\n  });\n  flavorSimilarity /= 6; // Normalize\n  \n  // Calculate overall compatibility\n  const compatibility = flavorSimilarity;\n  \n  // Fusion suggestions\n  const techniques = [...new Set([\n    ...profile1.signatureTechniques.slice(0, 2),\n    ...profile2.signatureTechniques.slice(0, 2)\n  ])];\n  \n  const ingredients = [...new Set([\n    ...profile1.signatureIngredients.slice(0, 3),\n    ...profile2.signatureIngredients.slice(0, 3)\n  ])];\n  \n  return {\n    compatibility,\n    techniques,\n    ingredients\n  };\n};\n\n// Create a mapped array of recipes with proper Recipe type\nexport const getAllRecipes = async (): Promise<Recipe[]> => {\n  try {\n    const recipeData = await transformCuisineData();\n    \n    // Transform RecipeData to Recipe format with interface compliance\n    return recipeData.map(recipe => ({\n      id: recipe.id,\n      name: recipe.name,\n      description: recipe.description,\n      ingredients: recipe.ingredients || [],\n      instructions: recipe.instructions || [],\n      cuisine: recipe.cuisine || 'unknown',\n      elementalProperties: recipe.elementalProperties || { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 },\n      season: Array.isArray(recipe.season) ? recipe.season : [recipe.season as Season] || ['all'],\n      mealType: Array.isArray(recipe.mealType) ? recipe.mealType : [recipe.mealType] || ['dinner'],\n      matchPercentage: recipe.matchPercentage || 0,\n      timeToMake: recipe.timeToMake || 30,\n      nutrition: recipe.nutrition,\n      flavorProfile: recipe.flavorProfile,\n      currentSeason: recipe.season,\n      regionalCuisine: recipe.regionalCuisine\n    } as unknown as Recipe));\n  } catch (error) {\n    console.error('Error in getAllRecipes:', error);\n    return [];\n  }\n};\n\n// Export recipes array for backward compatibility\nexport const recipes = transformCuisineData() as Promise<RecipeData[]>;\n\n// At the end of the file, add the re-exports\nexport { allRecipes } from './recipes/index';"],"version":3}