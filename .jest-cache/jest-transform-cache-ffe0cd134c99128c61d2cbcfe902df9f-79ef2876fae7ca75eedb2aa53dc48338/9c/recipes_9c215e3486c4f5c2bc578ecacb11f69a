78e5f5a195cfdcefc2700f196104c328
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.allRecipes = exports.recipes = exports.getAllRecipes = exports.getFusionSuggestions = exports.getRecommendedCuisines = exports.calculateCuisineFlavorMatch = exports.getBestRecipeMatches = exports.getRecipesForCuisineMatch = exports.getRecipesForFlavorProfile = exports.calculatePlanetaryFlavorMatch = exports.getDominantFlavor = exports.getResonantCuisines = exports.calculateFlavorProfile = exports.getRecommendedCookingTechniques = exports.getDominantPlanetaryInfluence = exports.getRecipesForPlanetaryAlignment = exports.getRecipesForCuisine = exports.getRecipesForLunarPhase = exports.getRecipesForSeason = exports.getRecipesForZodiac = exports.getRecipes = void 0;
const index_1 = __importDefault(require("@/data/cuisines/index"));
const logger_1 = require("@/utils/logger");
const planetaryFlavorProfiles_1 = require("@/data/planetaryFlavorProfiles");
Object.defineProperty(exports, "calculateFlavorProfile", { enumerable: true, get: function () { return planetaryFlavorProfiles_1.calculateFlavorProfile; } });
Object.defineProperty(exports, "getResonantCuisines", { enumerable: true, get: function () { return planetaryFlavorProfiles_1.getResonantCuisines; } });
Object.defineProperty(exports, "getDominantFlavor", { enumerable: true, get: function () { return planetaryFlavorProfiles_1.getDominantFlavor; } });
Object.defineProperty(exports, "calculatePlanetaryFlavorMatch", { enumerable: true, get: function () { return planetaryFlavorProfiles_1.calculatePlanetaryFlavorMatch; } });
const cuisineFlavorProfiles_1 = require("@/data/cuisineFlavorProfiles");
// Log what was imported
logger_1.logger.debug("cuisinesMap keys:", Object.keys(index_1.default));
const transformCuisineData = async () => {
    const recipes = [];
    logger_1.logger.debug("Starting transformCuisineData");
    logger_1.logger.debug("Available cuisines:", Object.keys(index_1.default));
    const cuisineDataPromises = Object.entries(index_1.default).map(async ([cuisineName, cuisineData]) => {
        try {
            logger_1.logger.debug(`Processing cuisine: ${cuisineName}`);
            const primaryPlanetaryInfluences = {};
            // Get the cuisine flavor profile
            const cuisineProfile = (0, cuisineFlavorProfiles_1.getCuisineProfile)(cuisineName);
            // Map planetary influences based on cuisine's flavor profile
            Object.entries(planetaryFlavorProfiles_1.planetaryFlavorProfiles).forEach(([planet, profile]) => {
                const profileData = profile;
                const culinaryAffinity = (profileData === null || profileData === void 0 ? void 0 : profileData.culinaryAffinity) || [];
                if (culinaryAffinity.includes(cuisineName.toLowerCase())) {
                    primaryPlanetaryInfluences[planet] = 0.8;
                }
                else {
                    const partialMatch = culinaryAffinity.some((affinity) => affinity.includes(cuisineName.toLowerCase()) || cuisineName.toLowerCase().includes(affinity));
                    if (partialMatch) {
                        primaryPlanetaryInfluences[planet] = 0.5;
                    }
                }
            });
            // Get flavor profile from cuisine definitions or calculate from planetary influences
            const cuisineProfileData = cuisineProfile;
            const cuisineFlavorProfile = cuisineProfileData === null || cuisineProfileData === void 0 ? void 0 : cuisineProfileData.flavorProfiles;
            const defaultFlavorProfile = cuisineFlavorProfile || (0, planetaryFlavorProfiles_1.calculateFlavorProfile)(primaryPlanetaryInfluences);
            // Handle dishes
            const cuisineDataObj = cuisineData;
            if (cuisineDataObj && cuisineDataObj.dishes && typeof cuisineDataObj.dishes === 'object') {
                // Log the dishes structure to debug
                logger_1.logger.debug(`${cuisineName} dishes:`, Object.keys(cuisineDataObj.dishes));
                // Process meal types (breakfast, lunch, dinner, etc.)
                Object.entries(cuisineDataObj.dishes).forEach(([mealType, mealData]) => {
                    if (!mealData) {
                        logger_1.logger.debug(`No meal data for ${cuisineName} - ${mealType}`);
                        return;
                    }
                    if (typeof mealData === 'object') {
                        // Log meal data structure
                        logger_1.logger.debug(`${cuisineName} - ${mealType} data:`, Object.keys(mealData));
                        // Process season data (spring, summer, autumn, winter, all)
                        Object.entries(mealData).forEach(([season, dishes]) => {
                            if (!dishes) {
                                logger_1.logger.debug(`No dishes for ${cuisineName} - ${mealType} - ${season}`);
                                return;
                            }
                            // Ensure dishes is an array
                            if (Array.isArray(dishes)) {
                                logger_1.logger.debug(`Found ${dishes.length} dishes for ${cuisineName} - ${mealType} - ${season}`);
                                // Process individual dishes
                                dishes.forEach((dish) => {
                                    const dishData = dish;
                                    if (!dishData || !(dishData === null || dishData === void 0 ? void 0 : dishData.name)) {
                                        logger_1.logger.debug('Skipping invalid dish:', dish);
                                        return;
                                    }
                                    // Build dish-specific planetary influences
                                    const dishPlanetaryInfluences = { ...primaryPlanetaryInfluences };
                                    const dishPlanetary = dishData === null || dishData === void 0 ? void 0 : dishData.planetary;
                                    if (dishPlanetary && Array.isArray(dishPlanetary)) {
                                        dishPlanetary.forEach((planet) => {
                                            dishPlanetaryInfluences[planet] = dishPlanetaryInfluences[planet] ?
                                                Math.min(dishPlanetaryInfluences[planet] + 0.3, 1.0) : 0.7;
                                        });
                                    }
                                    // Use dish-specific flavor profile if available, otherwise use cuisine default
                                    const flavorProfile = (dishData === null || dishData === void 0 ? void 0 : dishData.flavorProfile) || defaultFlavorProfile;
                                    // Transform substitutions from object to array format if they exist
                                    const dishSubstitutions = dishData === null || dishData === void 0 ? void 0 : dishData.substitutions;
                                    const substitutions = dishSubstitutions ?
                                        Object.entries(dishSubstitutions).map(([original, alternatives]) => ({
                                            original,
                                            alternatives: Array.isArray(alternatives) ? alternatives : [alternatives]
                                        })) : undefined;
                                    // Create the recipe entry
                                    const recipeData = {
                                        id: `${cuisineName}-${mealType}-${dishData === null || dishData === void 0 ? void 0 : dishData.name}`.replace(/\s+/g, '-').toLowerCase(),
                                        name: (dishData === null || dishData === void 0 ? void 0 : dishData.name) || '',
                                        description: (dishData === null || dishData === void 0 ? void 0 : dishData.description) || `A traditional ${cuisineName} dish`,
                                        ingredients: Array.isArray(dishData === null || dishData === void 0 ? void 0 : dishData.ingredients) ?
                                            dishData.ingredients.map((ingredient) => {
                                                const ingredientData = ingredient;
                                                return {
                                                    name: (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.name) || (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.ingredient) || 'Unknown ingredient',
                                                    amount: (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.amount) || (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.quantity) || 1,
                                                    unit: (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.unit) || 'piece',
                                                    optional: (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.optional) || false,
                                                    preparation: (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.preparation) || '',
                                                    category: (ingredientData === null || ingredientData === void 0 ? void 0 : ingredientData.category) || ''
                                                };
                                            }) : [],
                                        instructions: Array.isArray(dishData === null || dishData === void 0 ? void 0 : dishData.instructions) ? dishData.instructions :
                                            Array.isArray(dishData === null || dishData === void 0 ? void 0 : dishData.preparationSteps) ? dishData.preparationSteps :
                                                ['Prepare according to traditional methods'],
                                        cuisine: cuisineName,
                                        energyProfile: {
                                            zodiac: Array.isArray(dishData === null || dishData === void 0 ? void 0 : dishData.zodiac) ? dishData.zodiac : undefined,
                                            lunar: Array.isArray(dishData === null || dishData === void 0 ? void 0 : dishData.lunar) ? dishData.lunar : undefined,
                                            planetary: Array.isArray(dishData === null || dishData === void 0 ? void 0 : dishData.planetary) ? dishData.planetary : undefined,
                                            season: season !== 'all' ? [season] : ['spring', 'summer', 'autumn', 'winter']
                                        },
                                        tags: Array.isArray(dishData === null || dishData === void 0 ? void 0 : dishData.tags) ? dishData.tags : [],
                                        timeToMake: (dishData === null || dishData === void 0 ? void 0 : dishData.timeToMake) || (dishData === null || dishData === void 0 ? void 0 : dishData.cookTime) || 30,
                                        flavorProfile: flavorProfile ? {
                                            spicy: flavorProfile.spicy || 0,
                                            sweet: flavorProfile.sweet || 0,
                                            sour: flavorProfile.sour || 0,
                                            bitter: flavorProfile.bitter || 0,
                                            salty: flavorProfile.salty || 0,
                                            umami: flavorProfile.umami || 0
                                        } : undefined,
                                        planetaryInfluences: dishPlanetaryInfluences,
                                        regionalCuisine: (dishData === null || dishData === void 0 ? void 0 : dishData.regionalCuisine) || cuisineName,
                                        // Standardized fields
                                        servingSize: (dishData === null || dishData === void 0 ? void 0 : dishData.servingSize) || (dishData === null || dishData === void 0 ? void 0 : dishData.numberOfServings) || 4,
                                        substitutions,
                                        tools: Array.isArray(dishData === null || dishData === void 0 ? void 0 : dishData.tools) ? dishData.tools : [],
                                        spiceLevel: (typeof (dishData === null || dishData === void 0 ? void 0 : dishData.spiceLevel) === 'string' &&
                                            ['mild', 'medium', 'hot', 'very hot'].includes(dishData.spiceLevel))
                                            ? dishData.spiceLevel
                                            : (typeof (dishData === null || dishData === void 0 ? void 0 : dishData.spiceLevel) === 'number' ? dishData.spiceLevel : 1),
                                        nutrition: dishData === null || dishData === void 0 ? void 0 : dishData.nutrition,
                                        preparationNotes: dishData === null || dishData === void 0 ? void 0 : dishData.preparationNotes,
                                        technicalTips: Array.isArray(dishData === null || dishData === void 0 ? void 0 : dishData.technicalTips) ? dishData.technicalTips : [],
                                        // Additional properties for compatibility
                                        elementalProperties: undefined,
                                        season: season !== 'all' ? season : undefined,
                                        mealType: mealType,
                                        cookingMethod: undefined,
                                        cookingMethods: undefined,
                                        matchPercentage: 0
                                    };
                                    recipes.push(recipeData);
                                });
                            }
                        });
                    }
                });
            }
        }
        catch (error) {
            console.error(`Error processing cuisine ${cuisineName}:`, error);
        }
    });
    await Promise.all(cuisineDataPromises);
    logger_1.logger.debug(`Transformed ${recipes.length} recipes`);
    return recipes;
};
// Cache recipes to avoid re-processing
let cachedRecipes = null;
const getRecipes = async () => {
    if (!cachedRecipes) {
        cachedRecipes = await transformCuisineData();
    }
    return cachedRecipes;
};
exports.getRecipes = getRecipes;
const getRecipesForZodiac = async (zodiac) => {
    const recipes = await (0, exports.getRecipes)();
    return recipes.filter(recipe => {
        var _a;
        const recipeData = recipe;
        const energyProfile = recipeData === null || recipeData === void 0 ? void 0 : recipeData.energyProfile;
        return (_a = energyProfile === null || energyProfile === void 0 ? void 0 : energyProfile.zodiac) === null || _a === void 0 ? void 0 : _a.includes(zodiac);
    });
};
exports.getRecipesForZodiac = getRecipesForZodiac;
const getRecipesForSeason = async (season) => {
    const recipes = await (0, exports.getRecipes)();
    return recipes.filter(recipe => {
        var _a;
        const recipeData = recipe;
        const energyProfile = recipeData === null || recipeData === void 0 ? void 0 : recipeData.energyProfile;
        return ((_a = energyProfile === null || energyProfile === void 0 ? void 0 : energyProfile.season) === null || _a === void 0 ? void 0 : _a.includes(season)) || (recipeData === null || recipeData === void 0 ? void 0 : recipeData.season) === season;
    });
};
exports.getRecipesForSeason = getRecipesForSeason;
const getRecipesForLunarPhase = async (lunarPhase) => {
    const recipes = await (0, exports.getRecipes)();
    return recipes.filter(recipe => {
        var _a;
        const recipeData = recipe;
        const energyProfile = recipeData === null || recipeData === void 0 ? void 0 : recipeData.energyProfile;
        return (_a = energyProfile === null || energyProfile === void 0 ? void 0 : energyProfile.lunar) === null || _a === void 0 ? void 0 : _a.includes(lunarPhase);
    });
};
exports.getRecipesForLunarPhase = getRecipesForLunarPhase;
const getRecipesForCuisine = async (cuisine) => {
    const recipes = await (0, exports.getRecipes)();
    return recipes.filter(recipe => {
        var _a, _b;
        const recipeData = recipe;
        return ((_a = recipeData === null || recipeData === void 0 ? void 0 : recipeData.cuisine) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === cuisine.toLowerCase() ||
            ((_b = recipeData === null || recipeData === void 0 ? void 0 : recipeData.regionalCuisine) === null || _b === void 0 ? void 0 : _b.toLowerCase()) === cuisine.toLowerCase();
    });
};
exports.getRecipesForCuisine = getRecipesForCuisine;
/**
 * Get recipes compatible with certain planetary alignments
 */
const getRecipesForPlanetaryAlignment = async (planetaryInfluences, minMatchScore = 0.6) => {
    const recipes = await (0, exports.getRecipes)();
    return recipes
        .filter(recipe => recipe.flavorProfile)
        .map(recipe => ({
        ...recipe,
        matchScore: recipe.flavorProfile
            ? (0, planetaryFlavorProfiles_1.calculatePlanetaryFlavorMatch)(recipe.flavorProfile, planetaryInfluences)
            : 0
    }))
        .filter(recipe => (recipe.matchScore || 0) >= minMatchScore)
        .sort((a, b) => (b.matchScore || 0) - (a.matchScore || 0));
};
exports.getRecipesForPlanetaryAlignment = getRecipesForPlanetaryAlignment;
/**
 * Get the dominant planetary influence for a recipe
 */
const getDominantPlanetaryInfluence = (recipe) => {
    if (!recipe.planetaryInfluences)
        return null;
    const entries = Object.entries(recipe.planetaryInfluences);
    if (!entries.length)
        return null;
    return entries.sort(([, valueA], [, valueB]) => valueB - valueA)[0][0];
};
exports.getDominantPlanetaryInfluence = getDominantPlanetaryInfluence;
/**
 * Get cooking techniques that complement the recipe
 */
const getRecommendedCookingTechniques = (recipe) => {
    // First try to get techniques from cuisine profile
    const cuisineProfile = recipe.cuisine ? (0, cuisineFlavorProfiles_1.getCuisineProfile)(recipe.cuisine) : null;
    if (cuisineProfile && cuisineProfile.signatureTechniques) {
        return [...cuisineProfile.signatureTechniques];
    }
    // Fallback to planetary-based techniques
    if (!recipe.planetaryInfluences)
        return [];
    const techniques = {};
    Object.entries(recipe.planetaryInfluences).forEach(([planet, weight]) => {
        if (planetaryFlavorProfiles_1.planetaryFlavorProfiles[planet]) {
            planetaryFlavorProfiles_1.planetaryFlavorProfiles[planet].cookingTechniques.forEach(technique => {
                if (!techniques[technique])
                    techniques[technique] = 0;
                techniques[technique] += weight;
            });
        }
    });
    return Object.entries(techniques)
        .sort(([, scoreA], [, scoreB]) => scoreB - scoreA)
        .slice(0, 3)
        .map(([technique]) => technique);
};
exports.getRecommendedCookingTechniques = getRecommendedCookingTechniques;
/**
 * Get recipes that match a given flavor profile, sorted by match score
 */
const getRecipesForFlavorProfile = async (flavorProfile, minMatchScore = 0.7) => {
    const recipes = await (0, exports.getRecipes)();
    return recipes
        .filter(recipe => recipe.flavorProfile)
        .map(recipe => {
        // Calculate similarity between flavor profiles
        let similarity = 0;
        let totalWeight = 0;
        Object.entries(flavorProfile).forEach(([flavor, value]) => {
            var _a;
            const recipeValue = ((_a = recipe.flavorProfile) === null || _a === void 0 ? void 0 : _a[flavor]) || 0;
            const flavorSimilarity = 1 - Math.abs(value - recipeValue);
            // Weight by the importance of the flavor in input profile
            const weight = value > 0.5 ? 2 : 1;
            similarity += flavorSimilarity * weight;
            totalWeight += weight;
        });
        const matchScore = totalWeight > 0 ? similarity / totalWeight : 0;
        return {
            ...recipe,
            matchScore
        };
    })
        .filter(recipe => (recipe.matchScore || 0) >= minMatchScore)
        .sort((a, b) => (b.matchScore || 0) - (a.matchScore || 0));
};
exports.getRecipesForFlavorProfile = getRecipesForFlavorProfile;
/**
 * Get recipes that match a specific cuisine's flavor profile
 */
const getRecipesForCuisineMatch = async (cuisineName, minMatchScore = 0.7) => {
    const recipes = await (0, exports.getRecipes)();
    // Get the cuisine's flavor profile
    const cuisineProfile = (0, cuisineFlavorProfiles_1.getCuisineProfile)(cuisineName);
    if (!cuisineProfile)
        return [];
    // Get related cuisines
    const relatedCuisines = [cuisineName, ...(0, cuisineFlavorProfiles_1.getRelatedCuisines)(cuisineName)];
    return recipes
        .map(recipe => {
        var _a, _b;
        // Direct cuisine match gets a boost
        const directMatch = relatedCuisines.includes(((_a = recipe.cuisine) === null || _a === void 0 ? void 0 : _a.toLowerCase()) || '');
        const regionMatch = relatedCuisines.includes(((_b = recipe.regionalCuisine) === null || _b === void 0 ? void 0 : _b.toLowerCase()) || '');
        // Calculate match score
        let matchScore = 0;
        if (recipe.flavorProfile) {
            // Calculate flavor profile match
            matchScore = (0, cuisineFlavorProfiles_1.calculateCuisineFlavorMatch)(recipe.flavorProfile, cuisineName);
            // Boost for direct cuisine matches
            if (directMatch)
                matchScore = Math.min(1.0, matchScore + 0.15);
            if (regionMatch)
                matchScore = Math.min(1.0, matchScore + 0.1);
        }
        else if (directMatch) {
            // If no flavor profile but direct cuisine match, assign a default score
            matchScore = 0.8;
        }
        else if (regionMatch) {
            // If regional match, assign a slightly lower score
            matchScore = 0.75;
        }
        return {
            ...recipe,
            matchScore
        };
    })
        .filter(recipe => (recipe.matchScore || 0) >= minMatchScore)
        .sort((a, b) => (b.matchScore || 0) - (a.matchScore || 0));
};
exports.getRecipesForCuisineMatch = getRecipesForCuisineMatch;
/**
 * Get best matched recipes based on multiple criteria
 */
const getBestRecipeMatches = async (criteria, limit = 10) => {
    logger_1.logger.debug("getBestRecipeMatches called with criteria:", criteria);
    // Start with all recipes
    let candidateRecipes = [...await (0, exports.getRecipes)()];
    logger_1.logger.debug(`Starting with ${candidateRecipes.length} total recipes`);
    // Apply cuisine filter if specified
    if (criteria.cuisine) {
        logger_1.logger.debug(`Filtering by cuisine: ${criteria.cuisine}`);
        // First try to use getRecipesForCuisineMatch from cuisineFlavorProfiles
        // which has enhanced functionality including LocalRecipeService integration
        try {
            const { getRecipesForCuisineMatch } = await Promise.resolve().then(() => __importStar(require('./cuisineFlavorProfiles')));
            const matchedCuisineRecipes = getRecipesForCuisineMatch(criteria.cuisine, [], // Empty array triggers direct LocalRecipeService use
            Math.max(limit * 2, 20) // Get more recipes for better filtering
            );
            logger_1.logger.debug(`getRecipesForCuisineMatch returned ${matchedCuisineRecipes.length} recipes`);
            if (matchedCuisineRecipes && matchedCuisineRecipes.length > 0) {
                // Convert the recipes to ensure they match RecipeData format
                const formattedRecipes = matchedCuisineRecipes.map(recipe => {
                    var _a;
                    const recipeData = recipe;
                    const name = (recipeData === null || recipeData === void 0 ? void 0 : recipeData.name) || '';
                    const description = (recipeData === null || recipeData === void 0 ? void 0 : recipeData.description) || `A ${criteria.cuisine} recipe`;
                    const ingredients = Array.isArray(recipeData === null || recipeData === void 0 ? void 0 : recipeData.ingredients) ? recipeData.ingredients : [];
                    const instructions = Array.isArray(recipeData === null || recipeData === void 0 ? void 0 : recipeData.instructions) ? recipeData.instructions :
                        typeof (recipeData === null || recipeData === void 0 ? void 0 : recipeData.instructions) === 'string' ? [recipeData.instructions] : [];
                    const cuisine = (recipeData === null || recipeData === void 0 ? void 0 : recipeData.cuisine) || criteria.cuisine;
                    const regionalCuisine = recipeData === null || recipeData === void 0 ? void 0 : recipeData.regionalCuisine;
                    const cookingMethod = (recipeData === null || recipeData === void 0 ? void 0 : recipeData.cookingMethod) || ((_a = recipeData === null || recipeData === void 0 ? void 0 : recipeData.cookingMethods) === null || _a === void 0 ? void 0 : _a[0]);
                    const flavorProfile = (recipeData === null || recipeData === void 0 ? void 0 : recipeData.flavorProfile) || {
                        spicy: 0.5,
                        sweet: 0.5,
                        sour: 0.5,
                        bitter: 0.5,
                        salty: 0.5,
                        umami: 0.5
                    };
                    return {
                        id: (recipeData === null || recipeData === void 0 ? void 0 : recipeData.id) || `${name.toLowerCase().replace(/\s+/g, '-')}`,
                        name,
                        description,
                        ingredients: ingredients.map((ing) => ({
                            name: (ing === null || ing === void 0 ? void 0 : ing.name) || '',
                            amount: typeof (ing === null || ing === void 0 ? void 0 : ing.amount) === 'number' ? ing.amount : parseFloat(ing === null || ing === void 0 ? void 0 : ing.amount) || 1,
                            unit: (ing === null || ing === void 0 ? void 0 : ing.unit) || '',
                            optional: (ing === null || ing === void 0 ? void 0 : ing.optional) || false
                        })),
                        instructions,
                        cuisine,
                        regionalCuisine,
                        cookingMethod,
                        flavorProfile,
                        elementalProperties: recipeData === null || recipeData === void 0 ? void 0 : recipeData.elementalProperties,
                        energyProfile: {
                            season: Array.isArray(recipeData === null || recipeData === void 0 ? void 0 : recipeData.season) ? recipeData.season :
                                typeof (recipeData === null || recipeData === void 0 ? void 0 : recipeData.season) === 'string' ? [recipeData.season] : ['spring'],
                            zodiac: [],
                            lunar: [],
                            planetary: []
                        },
                        tags: [
                            ...(Array.isArray(recipeData === null || recipeData === void 0 ? void 0 : recipeData.mealType) ? recipeData.mealType : (typeof (recipeData === null || recipeData === void 0 ? void 0 : recipeData.mealType) === 'string' ? [recipeData.mealType] : [])).map(type => type.toLowerCase()),
                            ...(Array.isArray(recipeData === null || recipeData === void 0 ? void 0 : recipeData.season) ? recipeData.season : (typeof (recipeData === null || recipeData === void 0 ? void 0 : recipeData.season) === 'string' ? [recipeData.season] : [])).map(s => s.toLowerCase())
                        ],
                        timeToMake: recipeData === null || recipeData === void 0 ? void 0 : recipeData.timeToMake,
                        // Use the matchScore or matchPercentage if provided, otherwise use a default score
                        matchScore: (recipeData === null || recipeData === void 0 ? void 0 : recipeData.matchScore) || ((recipeData === null || recipeData === void 0 ? void 0 : recipeData.matchPercentage) ? recipeData.matchPercentage / 100 : 0.85)
                    };
                });
                candidateRecipes = formattedRecipes;
                // If we got recipes directly and they already have match scores,
                // we can just return them after additional filtering
                if (formattedRecipes.length > 0 && formattedRecipes[0].matchScore !== undefined) {
                    // Apply additional filters if needed
                    return applyAdditionalFilters(formattedRecipes, criteria, limit);
                }
            }
        }
        catch (error) {
            console.error("Error using enhanced getRecipesForCuisineMatch:", error);
        }
        // Fallback to LocalRecipeService if getRecipesForCuisineMatch failed
        const allRecipes = await (0, exports.getRecipes)();
        if (candidateRecipes.length === 0 || candidateRecipes === allRecipes) {
            try {
                // Import and use LocalRecipeService directly
                const { LocalRecipeService } = await Promise.resolve().then(() => __importStar(require('../services/LocalRecipeService')));
                // Get local recipes directly
                const localRecipeResults = LocalRecipeService.getRecipesByCuisine(criteria.cuisine || '');
                const localRecipes = await Promise.resolve(localRecipeResults);
                logger_1.logger.debug(`Found ${localRecipes.length} recipes from LocalRecipeService for ${criteria.cuisine}`);
                if (localRecipes.length > 0) {
                    // Convert the recipes to RecipeData format
                    candidateRecipes = localRecipes.map(recipe => {
                        const recipeData = recipe;
                        const name = (recipeData === null || recipeData === void 0 ? void 0 : recipeData.name) || '';
                        const description = (recipeData === null || recipeData === void 0 ? void 0 : recipeData.description) || '';
                        const ingredients = Array.isArray(recipeData === null || recipeData === void 0 ? void 0 : recipeData.ingredients) ? recipeData.ingredients : [];
                        const instructions = Array.isArray(recipeData === null || recipeData === void 0 ? void 0 : recipeData.instructions) ? recipeData.instructions : [];
                        const cuisine = (recipeData === null || recipeData === void 0 ? void 0 : recipeData.cuisine) || '';
                        const season = recipeData === null || recipeData === void 0 ? void 0 : recipeData.season;
                        const mealType = recipeData === null || recipeData === void 0 ? void 0 : recipeData.mealType;
                        const timeToMake = recipeData === null || recipeData === void 0 ? void 0 : recipeData.timeToMake;
                        return {
                            id: (recipeData === null || recipeData === void 0 ? void 0 : recipeData.id) || `${name.toLowerCase().replace(/\s+/g, '-')}`,
                            name,
                            description,
                            ingredients: ingredients.map((ing) => ({
                                name: (ing === null || ing === void 0 ? void 0 : ing.name) || '',
                                amount: typeof (ing === null || ing === void 0 ? void 0 : ing.amount) === 'number' ? ing.amount : parseFloat(ing === null || ing === void 0 ? void 0 : ing.amount) || 1,
                                unit: (ing === null || ing === void 0 ? void 0 : ing.unit) || '',
                                optional: (ing === null || ing === void 0 ? void 0 : ing.optional) || false
                            })),
                            instructions,
                            cuisine,
                            energyProfile: {
                                season: Array.isArray(season) ? season :
                                    typeof season === 'string' ? [season] : ['spring'],
                                zodiac: [],
                                lunar: [],
                                planetary: []
                            },
                            tags: [
                                ...(Array.isArray(mealType) ? mealType : (typeof mealType === 'string' ? [mealType] : [])).map(type => type.toLowerCase()),
                                ...(Array.isArray(season) ? season : (typeof season === 'string' ? [season] : [])).map(s => s.toLowerCase())
                            ],
                            timeToMake,
                            matchScore: 0.85,
                            matchPercentage: 85 // For display purposes
                        };
                    });
                    // Apply additional filters if needed
                    return applyAdditionalFilters(candidateRecipes, criteria, limit);
                }
            }
            catch (error) {
                console.error("Error using LocalRecipeService directly:", error);
            }
        }
    }
    logger_1.logger.debug(`After cuisine filtering: ${candidateRecipes.length} recipes`);
    // Apply additional filters and scoring
    return applyAdditionalFilters(candidateRecipes, criteria, limit);
};
exports.getBestRecipeMatches = getBestRecipeMatches;
// Helper function to apply additional filters and calculate scores
async function applyAdditionalFilters(candidateRecipes, criteria, limit) {
    // Preload modules we'll need
    let cuisineModule;
    if (criteria.cuisine) {
        try {
            cuisineModule = await Promise.resolve().then(() => __importStar(require('./cuisineFlavorProfiles')));
        }
        catch (error) {
            console.error("Error importing cuisineFlavorProfiles:", error);
        }
    }
    // Apply season filter if specified
    if (criteria.season) {
        logger_1.logger.debug(`Filtering by season: ${criteria.season}`);
        const seasonRecipes = candidateRecipes.filter(recipe => {
            var _a, _b;
            return ((_b = (_a = recipe.energyProfile) === null || _a === void 0 ? void 0 : _a.season) === null || _b === void 0 ? void 0 : _b.includes(criteria.season)) ||
                (Array.isArray(recipe.season) && recipe.season.includes(criteria.season)) ||
                (typeof recipe.season === 'string' && recipe.season === criteria.season);
        });
        logger_1.logger.debug(`Found ${seasonRecipes.length} recipes for season ${criteria.season}`);
        // If we have enough seasonal recipes, use only those
        if (seasonRecipes.length >= limit) {
            candidateRecipes = seasonRecipes;
        }
    }
    // Apply meal type filter if specified
    if (criteria.mealType) {
        logger_1.logger.debug(`Filtering by meal type: ${criteria.mealType}`);
        const normalizedMealType = criteria.mealType.toLowerCase();
        const mealTypeRecipes = candidateRecipes.filter(recipe => {
            var _a;
            // Check if recipe has a mealType tag
            if ((_a = recipe.tags) === null || _a === void 0 ? void 0 : _a.some(tag => tag.toLowerCase() === normalizedMealType)) {
                return true;
            }
            // Also check mealType field directly
            if (Array.isArray(recipe.mealType) &&
                recipe.mealType.some(mt => mt.toLowerCase() === normalizedMealType)) {
                return true;
            }
            if (typeof recipe.mealType === 'string' &&
                recipe.mealType.toLowerCase() === normalizedMealType) {
                return true;
            }
            return false;
        });
        logger_1.logger.debug(`Found ${mealTypeRecipes.length} recipes for meal type ${criteria.mealType}`);
        // If we have enough meal type specific recipes, use only those
        if (mealTypeRecipes.length >= limit) {
            candidateRecipes = mealTypeRecipes;
        }
    }
    if (candidateRecipes.length === 0) {
        logger_1.logger.debug("No matching recipes found after all filtering");
        // Return empty array as fallback when no recipes match
        return [];
    }
    // Calculate match scores for all candidate recipes if they don't already have scores
    const scoredRecipes = candidateRecipes.map(recipe => {
        var _a, _b, _c;
        // If recipe already has a matchScore, use it
        if (recipe.matchScore !== undefined) {
            return {
                ...recipe,
                // Add matchPercentage if it doesn't exist
                matchPercentage: recipe.matchPercentage || Math.round(recipe.matchScore * 100)
            };
        }
        // Otherwise calculate a new score
        let totalScore = 0;
        let factorsConsidered = 0;
        // Base score from cuisine match
        if (criteria.cuisine && cuisineModule) {
            try {
                const { getCuisineProfile, calculateCuisineFlavorMatch } = cuisineModule;
                const cuisineProfile = getCuisineProfile(criteria.cuisine);
                if (cuisineProfile && recipe.flavorProfile) {
                    // Validate flavor profile properties
                    const validFlavorProfile = {};
                    for (const [flavor, value] of Object.entries(recipe.flavorProfile)) {
                        if (typeof value === 'number' && !isNaN(value)) {
                            validFlavorProfile[flavor] = value;
                        }
                        else {
                            console.warn(`Invalid ${flavor} value in recipe ${recipe.name}: ${value}`);
                            validFlavorProfile[flavor] = 0; // Default to none
                        }
                    }
                    const cuisineScore = calculateCuisineFlavorMatch(validFlavorProfile, criteria.cuisine);
                    totalScore += cuisineScore * 6.0;
                    factorsConsidered += 6.0;
                    // Direct cuisine match bonus
                    if (((_a = recipe.cuisine) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === criteria.cuisine.toLowerCase()) {
                        totalScore += 4.0;
                        factorsConsidered += 4.0;
                    }
                    // Regional match bonus
                    if (((_b = recipe.regionalCuisine) === null || _b === void 0 ? void 0 : _b.toLowerCase()) === criteria.cuisine.toLowerCase()) {
                        totalScore += 3.0;
                        factorsConsidered += 3.0;
                    }
                }
            }
            catch (error) {
                console.error("Error calculating cuisine match score:", error);
            }
        }
        // Season match - enhanced with better scoring
        if (criteria.season) {
            const seasonMatch = ((((_c = recipe.energyProfile) === null || _c === void 0 ? void 0 : _c.season) && recipe.energyProfile.season.includes(criteria.season)) ||
                (Array.isArray(recipe.season) && recipe.season.includes(criteria.season)) ||
                (typeof recipe.season === 'string' && recipe.season === criteria.season));
            if (seasonMatch) {
                totalScore += 3.0;
                factorsConsidered += 3.0;
            }
            else {
                // More significant penalty for incorrect season
                totalScore -= 1.0;
                factorsConsidered += 2.0;
            }
        }
        // Meal type match - enhanced with better scoring
        if (criteria.mealType) {
            const normalizedMealType = criteria.mealType.toLowerCase();
            const mealTypeMatch = ((recipe.tags && recipe.tags.some(tag => tag.toLowerCase() === normalizedMealType)) ||
                (Array.isArray(recipe.mealType) && recipe.mealType.some(mt => mt.toLowerCase() === normalizedMealType)) ||
                (typeof recipe.mealType === 'string' && recipe.mealType.toLowerCase() === normalizedMealType));
            if (mealTypeMatch) {
                totalScore += 3.0;
                factorsConsidered += 3.0;
            }
            else {
                // More significant penalty for incorrect meal type
                totalScore -= 1.0;
                factorsConsidered += 2.0;
            }
        }
        // Calculate final score with normalization
        const matchScore = factorsConsidered > 0
            ? Math.min(1, Math.max(0, totalScore / factorsConsidered))
            : 0.5; // Default score if no factors were considered
        // Apply non-linear scaling to create more distinctions between recipes
        let adjustedScore;
        if (matchScore < 0.4) {
            adjustedScore = matchScore * 0.7; // Lower scores get reduced further
        }
        else if (matchScore < 0.7) {
            adjustedScore = 0.28 + (matchScore - 0.4) * 1.4; // Mid-range scores get a balanced adjustment
        }
        else {
            adjustedScore = 0.7 + (matchScore - 0.7) * 1.5; // High scores get boosted
        }
        // Add a small random variation for natural-feeling results
        const jitter = (Math.random() * 0.04) - 0.02;
        const finalScore = Math.min(Math.max(adjustedScore + jitter, 0.1), 1.0);
        const percentage = Math.round(finalScore * 100);
        return {
            ...recipe,
            matchScore: finalScore,
            matchPercentage: percentage
        };
    });
    logger_1.logger.debug(`Returning ${Math.min(scoredRecipes.length, limit)} recipes after scoring`);
    // Sort by match score and return top results
    return scoredRecipes
        .sort((a, b) => (b.matchScore || 0) - (a.matchScore || 0))
        .slice(0, limit);
}
// Export additional utility functions
var cuisineFlavorProfiles_2 = require("@/data/cuisineFlavorProfiles");
Object.defineProperty(exports, "calculateCuisineFlavorMatch", { enumerable: true, get: function () { return cuisineFlavorProfiles_2.calculateCuisineFlavorMatch; } });
// Re-export these functions with proper implementations
const getRecommendedCuisines = (profile) => {
    // Implementation based on cuisine flavor profiles
    if (!profile || typeof profile !== 'object')
        return [];
    return Object.entries(cuisineFlavorProfiles_1.cuisineFlavorProfiles)
        .map(([cuisineName, cuisineProfile]) => {
        // Skip regional variants with a parent cuisine
        if (cuisineProfile.parentCuisine)
            return null;
        // Calculate match score based on flavor profile
        let matchScore = 0;
        let totalFactors = 0;
        // Flavor profile matching
        if (profile.flavorProfile) {
            const flavorMatch = (0, cuisineFlavorProfiles_1.calculateCuisineFlavorMatch)(profile.flavorProfile, cuisineName);
            matchScore += flavorMatch * 2;
            totalFactors += 2;
        }
        // Season matching
        if (profile.season && (cuisineProfile === null || cuisineProfile === void 0 ? void 0 : cuisineProfile.seasonalPreference)) {
            const seasonMatch = cuisineProfile === null || cuisineProfile === void 0 ? void 0 : cuisineProfile.seasonalPreference.includes(profile.season);
            if (seasonMatch) {
                matchScore += 1;
                totalFactors += 1;
            }
        }
        // Dietary preference matching
        if (profile.dietaryPreference && cuisineProfile.dietarySuitability) {
            const dietaryScore = cuisineProfile.dietarySuitability[profile.dietaryPreference] || 0;
            matchScore += dietaryScore;
            totalFactors += 1;
        }
        // Calculate final score
        const finalScore = totalFactors > 0 ? matchScore / totalFactors : 0;
        return {
            id: cuisineName,
            name: cuisineProfile === null || cuisineProfile === void 0 ? void 0 : cuisineProfile.name,
            score: finalScore
        };
    })
        .filter(result => result !== null && result.score > 0.6)
        .sort((a, b) => ((b === null || b === void 0 ? void 0 : b.score) || 0) - ((a === null || a === void 0 ? void 0 : a.score) || 0));
};
exports.getRecommendedCuisines = getRecommendedCuisines;
const getFusionSuggestions = (cuisine1, cuisine2) => {
    // Get cuisine profiles
    const profile1 = (0, cuisineFlavorProfiles_1.getCuisineProfile)(cuisine1);
    const profile2 = (0, cuisineFlavorProfiles_1.getCuisineProfile)(cuisine2);
    if (!profile1 || !profile2) {
        return { compatibility: 0, techniques: [], ingredients: [] };
    }
    // Calculate flavor profile compatibility
    let flavorSimilarity = 0;
    Object.entries(profile1.flavorProfiles).forEach(([flavor, value1]) => {
        const value2 = profile2.flavorProfiles[flavor];
        flavorSimilarity += 1 - Math.abs(value1 - value2);
    });
    flavorSimilarity /= 6; // Normalize
    // Calculate overall compatibility
    const compatibility = flavorSimilarity;
    // Fusion suggestions
    const techniques = [...new Set([
            ...profile1.signatureTechniques.slice(0, 2),
            ...profile2.signatureTechniques.slice(0, 2)
        ])];
    const ingredients = [...new Set([
            ...profile1.signatureIngredients.slice(0, 3),
            ...profile2.signatureIngredients.slice(0, 3)
        ])];
    return {
        compatibility,
        techniques,
        ingredients
    };
};
exports.getFusionSuggestions = getFusionSuggestions;
// Create a mapped array of recipes with proper Recipe type
const getAllRecipes = async () => {
    try {
        const recipeData = await transformCuisineData();
        // Transform RecipeData to Recipe format with interface compliance
        return recipeData.map(recipe => ({
            id: recipe.id,
            name: recipe.name,
            description: recipe.description,
            ingredients: recipe.ingredients || [],
            instructions: recipe.instructions || [],
            cuisine: recipe.cuisine || 'unknown',
            elementalProperties: recipe.elementalProperties || { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 },
            season: Array.isArray(recipe.season) ? recipe.season : [recipe.season] || ['all'],
            mealType: Array.isArray(recipe.mealType) ? recipe.mealType : [recipe.mealType] || ['dinner'],
            matchPercentage: recipe.matchPercentage || 0,
            timeToMake: recipe.timeToMake || 30,
            nutrition: recipe.nutrition,
            flavorProfile: recipe.flavorProfile,
            currentSeason: recipe.season,
            regionalCuisine: recipe.regionalCuisine
        }));
    }
    catch (error) {
        console.error('Error in getAllRecipes:', error);
        return [];
    }
};
exports.getAllRecipes = getAllRecipes;
// Export recipes array for backward compatibility
exports.recipes = transformCuisineData();
// At the end of the file, add the re-exports
var index_2 = require("./recipes/index");
Object.defineProperty(exports, "allRecipes", { enumerable: true, get: function () { return index_2.allRecipes; } });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,