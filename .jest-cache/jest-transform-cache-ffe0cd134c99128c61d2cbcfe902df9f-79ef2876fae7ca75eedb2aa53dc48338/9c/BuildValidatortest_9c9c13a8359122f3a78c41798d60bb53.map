{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/utils/BuildValidator.test.ts","mappings":";;;;;AAIA,iBAAiB;AACjB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAGhB,qBAAqB;AACrB,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;AAT3B,+DAAmF;AACnF,4CAAoB;AAKpB,MAAM,MAAM,GAAG,YAA4B,CAAC;AAK5C,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,IAAI,cAA8B,CAAC;IACnC,IAAI,UAAqB,CAAC;IAE1B,UAAU,CAAC,GAAG,EAAE;QACd,UAAU,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QACvB,cAAc,GAAG,IAAI,+BAAc,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;QACzD,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAC/D,gCAAgC;YAChC,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YACxC,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAE1C,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,aAAa,EAAE,CAAC;YAEpD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC5C,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YAEzC,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,aAAa,EAAE,CAAC;YAEpD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YAC/C,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,OAAO,CAClC,MAAM,CAAC,eAAe,CAAC;gBACrB,MAAM,CAAC,gBAAgB,CAAC;oBACtB,IAAI,EAAE,QAAQ;oBACd,MAAM,EAAE,OAAO;oBACf,WAAW,EAAE,wBAAwB;iBACtC,CAAC;aACH,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACpD,kDAAkD;YAClD,MAAM,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC,IAAY,EAAE,EAAE;gBACpD,OAAO,IAAI,KAAK,OAAO,IAAI,IAAI,KAAK,cAAc,CAAC;YACrD,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,aAAa,EAAE,CAAC;YAEpD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACtD,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YAClD,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YACxC,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;YAEpD,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,aAAa,EAAE,CAAC;YAEpD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YAClD,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YACxC,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;YAExC,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,aAAa,EAAE,CAAC;YAEpD,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACxD,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,OAAO,CAClC,MAAM,CAAC,eAAe,CAAC;gBACrB,MAAM,CAAC,gBAAgB,CAAC;oBACtB,IAAI,EAAE,KAAK;iBACZ,CAAC;aACH,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QAC3B,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC3D,8DAA8D;YAC9D,MAAM,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC,IAAY,EAAE,EAAE;gBACpD,OAAO,KAAK,CAAC,CAAC,oBAAoB;YACpC,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,SAAS,CAAC,kBAAkB,EAAE,CAAC;YACtC,MAAM,CAAC,aAAa,CAAC,kBAAkB,EAAE,CAAC;YAE1C,MAAM,cAAc,CAAC,WAAW,EAAE,CAAC;YAEnC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,oBAAoB,CAAC,OAAO,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;YAC5E,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,oBAAoB,CAAC,cAAc,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;YACnF,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACrD,mBAAmB;YACnB,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YACxC,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAE1C,MAAM,cAAc,CAAC,WAAW,EAAE,CAAC;YAEnC,MAAM,CAAC,UAAU,CAAC,CAAC,oBAAoB,CAAC,mCAAmC,CAAC,CAAC;QAC/E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAClC,EAAE,CAAC,mCAAmC,EAAE,GAAG,EAAE;YAC3C,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YAEzC,MAAM,MAAM,GAAG,cAAc,CAAC,kBAAkB,EAAE,CAAC;YAEnD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,qCAAqC,CAAC,CAAC;QACzE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;YACzC,MAAM,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC,IAAY,EAAE,EAAE,CAAC,IAAI,KAAK,gBAAgB,CAAC,CAAC;YAClF,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC;;;;;;OAMnC,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,cAAc,CAAC,kBAAkB,EAAE,CAAC;YAEnD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAClC,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;YAC3C,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YACxC,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAC1C,MAAM,CAAC,WAAW,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;YACvC,MAAM,CAAC,QAAQ,CAAC,eAAe,CAAC;gBAC9B,KAAK,EAAE,IAAI,IAAI,EAAE;gBACjB,IAAI,EAAE,IAAI;gBACV,WAAW,EAAE,GAAG,EAAE,CAAC,KAAK;aAClB,CAAC,CAAC;YAEV,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,kBAAkB,EAAE,CAAC;YAEzD,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACzC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;YAC3C,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YAEzC,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,kBAAkB,EAAE,CAAC;YAEzD,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACvC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,gCAAgC,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;YAC/C,wBAAwB;YACxB,MAAM,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;YAC9C,QAAQ,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,kBAAkB,CAAC,CAAC;YAEtD,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YACxC,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAE1C,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;YAE3D,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC1B,MAAM,CAAC,UAAU,CAAC,CAAC,oBAAoB,CAAC,+BAA+B,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;YACvC,MAAM,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;YAC9C,QAAQ;iBACL,sBAAsB,CAAC,GAAG,EAAE,GAAG,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;iBAClE,sBAAsB,CAAC,GAAG,EAAE,GAAG,OAAO,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC;YAEhE,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YACxC,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAC1C,MAAM,CAAC,MAAM,CAAC,kBAAkB,EAAE,CAAC;YAEnC,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;YAE3D,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC1B,MAAM,CAAC,QAAQ,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;YAC7C,MAAM,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;YAC9C,QAAQ,CAAC,kBAAkB,CAAC,GAAG,EAAE,GAAG,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAExE,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;YAE3D,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC3B,MAAM,CAAC,UAAU,CAAC,CAAC,oBAAoB,CAAC,+BAA+B,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/utils/BuildValidator.test.ts"],"sourcesContent":["import { BuildValidator, BuildValidationResult } from '../../utils/BuildValidator';\nimport fs from 'fs';\nimport path from 'path';\n\n// Mock fs module\njest.mock('fs');\nconst mockFs = fs as jest.Mocked<typeof fs>;\n\n// Mock child_process\njest.mock('child_process');\n\ndescribe('BuildValidator', () => {\n  let buildValidator: BuildValidator;\n  let mockLogger: jest.Mock;\n\n  beforeEach(() => {\n    mockLogger = jest.fn();\n    buildValidator = new BuildValidator('.next', mockLogger);\n    jest.clearAllMocks();\n  });\n\n  describe('validateBuild', () => {\n    it('should return valid result when all files exist', async () => {\n      // Mock all required files exist\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readFileSync.mockReturnValue('{}');\n\n      const result = await buildValidator.validateBuild();\n\n      expect(result.isValid).toBe(true);\n      expect(result.missingFiles).toHaveLength(0);\n      expect(result.corruptedFiles).toHaveLength(0);\n    });\n\n    it('should detect missing build directory', async () => {\n      mockFs.existsSync.mockReturnValue(false);\n\n      const result = await buildValidator.validateBuild();\n\n      expect(result.isValid).toBe(false);\n      expect(result.missingFiles).toContain('.next');\n      expect(result.repairActions).toEqual(\n        expect.arrayContaining([\n          expect.objectContaining({\n            type: 'create',\n            target: '.next',\n            description: 'Create build directory'\n          })\n        ])\n      );\n    });\n\n    it('should detect missing manifest files', async () => {\n      // Build directory exists but manifest files don't\n      mockFs.existsSync.mockImplementation((path: string) => {\n        return path === '.next' || path === '.next/server';\n      });\n\n      const result = await buildValidator.validateBuild();\n\n      expect(result.isValid).toBe(false);\n      expect(result.missingFiles.length).toBeGreaterThan(0);\n      expect(result.repairActions.length).toBeGreaterThan(0);\n    });\n\n    it('should detect corrupted JSON files', async () => {\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readFileSync.mockReturnValue('invalid json');\n\n      const result = await buildValidator.validateBuild();\n\n      expect(result.isValid).toBe(false);\n      expect(result.corruptedFiles.length).toBeGreaterThan(0);\n    });\n\n    it('should detect empty manifest files', async () => {\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readFileSync.mockReturnValue('');\n\n      const result = await buildValidator.validateBuild();\n\n      expect(result.corruptedFiles.length).toBeGreaterThan(0);\n      expect(result.repairActions).toEqual(\n        expect.arrayContaining([\n          expect.objectContaining({\n            type: 'fix'\n          })\n        ])\n      );\n    });\n  });\n\n  describe('repairBuild', () => {\n    it('should create missing directories and files', async () => {\n      // Mock missing files scenario - build directory doesn't exist\n      mockFs.existsSync.mockImplementation((path: string) => {\n        return false; // All files missing\n      });\n      mockFs.mkdirSync.mockImplementation();\n      mockFs.writeFileSync.mockImplementation();\n\n      await buildValidator.repairBuild();\n\n      expect(mockFs.mkdirSync).toHaveBeenCalledWith('.next', { recursive: true });\n      expect(mockFs.mkdirSync).toHaveBeenCalledWith('.next/server', { recursive: true });\n      expect(mockFs.writeFileSync).toHaveBeenCalled();\n    });\n\n    it('should not repair when build is valid', async () => {\n      // Mock valid build\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readFileSync.mockReturnValue('{}');\n\n      await buildValidator.repairBuild();\n\n      expect(mockLogger).toHaveBeenCalledWith('Build is valid, no repairs needed');\n    });\n  });\n\n  describe('validateNextConfig', () => {\n    it('should detect missing config file', () => {\n      mockFs.existsSync.mockReturnValue(false);\n\n      const result = buildValidator.validateNextConfig();\n\n      expect(result.isValid).toBe(false);\n      expect(result.issues).toContain('No Next.js configuration file found');\n    });\n\n    it('should validate existing config', () => {\n      mockFs.existsSync.mockImplementation((path: string) => path === 'next.config.js');\n      mockFs.readFileSync.mockReturnValue(`\n        module.exports = {\n          output: 'standalone',\n          typescript: { ignoreBuildErrors: false },\n          eslint: { ignoreDuringBuilds: false }\n        }\n      `);\n\n      const result = buildValidator.validateNextConfig();\n\n      expect(result.isValid).toBe(true);\n    });\n  });\n\n  describe('monitorBuildHealth', () => {\n    it('should report healthy build', async () => {\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readFileSync.mockReturnValue('{}');\n      mockFs.readdirSync.mockReturnValue([]);\n      mockFs.statSync.mockReturnValue({ \n        mtime: new Date(),\n        size: 1024,\n        isDirectory: () => false \n      } as any);\n\n      const report = await buildValidator.monitorBuildHealth();\n\n      expect(report.buildExists).toBe(true);\n      expect(report.manifestsValid).toBe(true);\n      expect(report.issues).toHaveLength(0);\n    });\n\n    it('should report missing build', async () => {\n      mockFs.existsSync.mockReturnValue(false);\n\n      const report = await buildValidator.monitorBuildHealth();\n\n      expect(report.buildExists).toBe(false);\n      expect(report.issues).toContain('Build directory does not exist');\n    });\n  });\n\n  describe('rebuildWithRecovery', () => {\n    it('should succeed on first attempt', async () => {\n      // Mock successful build\n      const { execSync } = require('child_process');\n      execSync.mockImplementation(() => 'Build successful');\n      \n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readFileSync.mockReturnValue('{}');\n\n      const result = await buildValidator.rebuildWithRecovery(3);\n\n      expect(result).toBe(true);\n      expect(mockLogger).toHaveBeenCalledWith('Build successful on attempt 1');\n    });\n\n    it('should retry on failure', async () => {\n      const { execSync } = require('child_process');\n      execSync\n        .mockImplementationOnce(() => { throw new Error('Build failed'); })\n        .mockImplementationOnce(() => { return 'Build successful'; });\n      \n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readFileSync.mockReturnValue('{}');\n      mockFs.rmSync.mockImplementation();\n\n      const result = await buildValidator.rebuildWithRecovery(3);\n\n      expect(result).toBe(true);\n      expect(execSync).toHaveBeenCalledTimes(2);\n    });\n\n    it('should fail after max retries', async () => {\n      const { execSync } = require('child_process');\n      execSync.mockImplementation(() => { throw new Error('Build failed'); });\n\n      const result = await buildValidator.rebuildWithRecovery(2);\n\n      expect(result).toBe(false);\n      expect(mockLogger).toHaveBeenCalledWith('Build failed after 2 attempts');\n    });\n  });\n});"],"version":3}