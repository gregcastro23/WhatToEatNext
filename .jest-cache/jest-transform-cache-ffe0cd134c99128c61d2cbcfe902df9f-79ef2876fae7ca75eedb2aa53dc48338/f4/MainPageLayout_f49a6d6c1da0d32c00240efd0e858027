ef4c807c40914f5b1c901caebf466181
"use strict";
'use client';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useMainPageContext = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const navigation_1 = require("next/navigation");
const react_1 = __importStar(require("react"));
const ErrorBoundary_1 = __importDefault(require("@/components/error-boundaries/ErrorBoundary"));
const ComponentFallbacks_1 = require("@/components/fallbacks/ComponentFallbacks");
const hooks_1 = require("@/contexts/AlchemicalContext/hooks");
const useAgentHooks_1 = require("@/hooks/useAgentHooks");
const useStatePreservation_1 = require("@/hooks/useStatePreservation");
const developmentExperienceOptimizations_1 = require("@/utils/developmentExperienceOptimizations");
const logger_1 = require("@/utils/logger");
const mcpServerIntegration_1 = require("@/utils/mcpServerIntegration");
const steeringFileIntelligence_1 = require("@/utils/steeringFileIntelligence");
// Lazy load non-critical components for better performance
const ConsolidatedDebugInfo = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('@/components/debug/ConsolidatedDebugInfo'))));
const CuisineRecommender = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('@/components/CuisineRecommender'))));
const IngredientRecommender = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('@/components/IngredientRecommender'))));
const CookingMethodsSection = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('@/components/CookingMethodsSection'))));
const RecipeBuilderSimple = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('@/components/recipes/RecipeBuilderSimple'))));
const MainPageContext = (0, react_1.createContext)(null);
const useMainPageContext = () => {
    const context = (0, react_1.useContext)(MainPageContext);
    if (!context) {
        throw new Error('useMainPageContext must be used within MainPageLayout');
    }
    return context;
};
exports.useMainPageContext = useMainPageContext;
// Memoized loading fallback component for better performance
const ComponentLoadingFallback = (0, react_1.memo)(function ComponentLoadingFallback({ componentName }) {
    return ((0, jsx_runtime_1.jsx)("div", { className: "flex items-center justify-center p-8 bg-gray-50 rounded-lg", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-3", children: [(0, jsx_runtime_1.jsx)("div", { className: "animate-spin rounded-full h-6 w-6 border-b-2 border-indigo-600" }), (0, jsx_runtime_1.jsxs)("span", { className: "text-gray-600", children: ["Loading ", componentName, "..."] })] }) }));
});
const MainPageLayout = (0, react_1.memo)(function MainPageLayout({ children, debugMode = process.env.NODE_ENV === 'development', loading = false, onSectionNavigate }) {
    const router = (0, navigation_1.useRouter)();
    const { state, planetaryPositions, isDaytime } = (0, hooks_1.useAlchemical)();
    // Use new state preservation hooks
    const { saveState: saveNavState, getState: getNavState } = (0, useStatePreservation_1.useNavigationState)();
    const { restoreScrollPosition } = (0, useStatePreservation_1.useScrollPreservation)('main-page');
    (0, useStatePreservation_1.useAutoStateCleanup)();
    // Enhanced hooks with steering file intelligence
    const steeringIntelligence = (0, steeringFileIntelligence_1.useSteeringFileIntelligence)();
    // Temporarily disabled for testing
    // const { 
    //   saveAstrologicalState, 
    //   restoreAstrologicalState,
    //   validateElementalCompatibility,
    //   getArchitecturalGuidance,
    //   getTechnologyStackGuidance
    // } = useAstrologicalStatePreservation('main-page-layout');
    // Temporarily disabled for testing
    // const { validateCulturalContent, getInclusiveLanguageGuidelines } = useCulturalSensitivityGuidance();
    // const { getOptimizationRecommendations, validatePerformanceMetrics } = usePerformanceOptimizationGuidance();
    // Agent hooks for automated quality assurance - temporarily disabled for testing
    // const { hookState: agentHookState, startAgentHooks, stopAgentHooks, triggerValidation } = useAgentHooks({
    //   enablePlanetaryValidation: true,
    //   enableIngredientValidation: true,
    //   enableCampaignTriggers: true,
    //   enablePerformanceMonitoring: true,
    //   validationInterval: 5 // 5 minutes
    // });
    // const { validationResult: planetaryValidation, validatePlanetaryData } = usePlanetaryDataValidationHook(true);
    // Temporary placeholders for disabled hooks
    const agentHookState = null;
    const planetaryValidation = null;
    const { validationResult: ingredientValidation, validateIngredients } = (0, useAgentHooks_1.useIngredientConsistencyHook)();
    const { campaignTrigger: typescriptTrigger, checkErrorThreshold } = (0, useAgentHooks_1.useTypeScriptCampaignHook)(true);
    const { qualityResult: buildQuality, monitorBuildQuality } = (0, useAgentHooks_1.useBuildQualityMonitoringHook)();
    const { metrics: qualityMetrics, updateMetrics } = (0, useAgentHooks_1.useQualityMetricsHook)(30000); // 30 seconds
    // MCP server integration for reliable external APIs
    const { getAstrologicalData, getNutritionalData, getRecipeData, testFallbackStrategy, getServerStatus } = (0, mcpServerIntegration_1.useMCPServerIntegration)();
    // Development experience optimizations
    const { updatePerformanceMetrics: updateDevMetrics, getDevelopmentMetrics, getPerformanceOptimizationRecommendations: getDevOptimizationRecommendations, applyAutomaticOptimizations } = (0, developmentExperienceOptimizations_1.useDevelopmentExperienceOptimizations)();
    const [sectionStates, setSectionStates] = (0, react_1.useState)({
        cuisine: { loading: false, error: null },
        ingredients: { loading: false, error: null },
        cooking: { loading: false, error: null },
        recipe: { loading: false, error: null }
    });
    // Main Page Context State - Initialize from preserved state
    const [selectedIngredients, setSelectedIngredients] = (0, react_1.useState)([]);
    const [selectedCuisine, setSelectedCuisine] = (0, react_1.useState)(null);
    const [selectedCookingMethods, setSelectedCookingMethods] = (0, react_1.useState)([]);
    const [currentRecipe, setCurrentRecipe] = (0, react_1.useState)(null);
    const [activeSection, setActiveSection] = (0, react_1.useState)(null);
    const [navigationHistory, setNavigationHistory] = (0, react_1.useState)([]);
    // Component update subscribers
    const [updateSubscribers, setUpdateSubscribers] = (0, react_1.useState)({});
    // Steering file intelligence state
    const [astrologicalGuidance, setAstrologicalGuidance] = (0, react_1.useState)(null);
    const [performanceMetrics, setPerformanceMetrics] = (0, react_1.useState)({});
    const [culturalValidation, setCulturalValidation] = (0, react_1.useState)(null);
    // Initialize state from preserved navigation state
    (0, react_1.useEffect)(() => {
        const restoredState = getNavState();
        if (restoredState) {
            if (restoredState.selectedIngredients.length > 0) {
                setSelectedIngredients(restoredState.selectedIngredients);
            }
            if (restoredState.selectedCuisine) {
                setSelectedCuisine(restoredState.selectedCuisine);
            }
            if (restoredState.selectedCookingMethods.length > 0) {
                setSelectedCookingMethods(restoredState.selectedCookingMethods);
            }
            if (restoredState.currentRecipe) {
                setCurrentRecipe(restoredState.currentRecipe);
            }
            if (restoredState.activeSection) {
                setActiveSection(restoredState.activeSection);
            }
            if (restoredState.navigationHistory.length > 0) {
                setNavigationHistory(restoredState.navigationHistory);
            }
            logger_1.logger.debug('Restored main page context from enhanced state preservation');
        }
        // Restore scroll position after a short delay to ensure DOM is ready
        setTimeout(() => {
            restoreScrollPosition();
        }, 100);
    }, [getNavState, restoreScrollPosition]);
    // Initialize steering file intelligence guidance
    (0, react_1.useEffect)(() => {
        const initializeGuidance = async () => {
            try {
                const guidance = await steeringIntelligence.getGuidance();
                setAstrologicalGuidance(guidance);
                // Apply architectural guidance for component optimization - temporarily disabled
                // const archGuidance = getArchitecturalGuidance();
                // logger.debug('Applied architectural guidance from steering files:', archGuidance);
                // Validate cultural content if we have any - temporarily disabled
                // if (selectedCuisine || selectedIngredients.length > 0) {
                //   const validation = validateCulturalContent({
                //     ingredientNames: selectedIngredients,
                //     cuisineDescriptions: selectedCuisine ? [selectedCuisine] : []
                //   });
                //   setCulturalValidation(validation);
                //   
                //   if (!validation.isCompliant) {
                //     logger.warn('Cultural sensitivity issues detected:', validation.issues);
                //   }
                // }
                // Get performance optimization recommendations - temporarily disabled
                // const perfRecommendations = getOptimizationRecommendations('main-page-layout');
                // logger.debug('Performance optimization recommendations:', perfRecommendations);
            }
            catch (error) {
                logger_1.logger.error('Error initializing steering file intelligence:', error);
            }
        };
        initializeGuidance();
    }, [steeringIntelligence, selectedCuisine, selectedIngredients]);
    // Monitor performance metrics using steering file guidance
    (0, react_1.useEffect)(() => {
        const startTime = performance.now();
        const measurePerformance = () => {
            const renderTime = performance.now() - startTime;
            const memoryUsage = performance.memory?.usedJSHeapSize / 1024 / 1024 || 0;
            const metrics = {
                renderTime,
                memoryUsage,
                componentCount: Object.keys(sectionStates).length,
                activeSubscribers: Object.values(updateSubscribers).reduce((sum, subs) => sum + subs.length, 0)
            };
            setPerformanceMetrics(metrics);
            // Validate performance against steering file thresholds - temporarily disabled
            // const validation = validatePerformanceMetrics({
            //   renderTime,
            //   memoryUsage
            // });
            // 
            // if (!validation.isOptimal) {
            //   logger.warn('Performance issues detected:', validation.issues);
            //   logger.info('Performance recommendations:', validation.recommendations);
            // }
        };
        // Measure performance after component mounts and updates
        const timeoutId = setTimeout(measurePerformance, 100);
        return () => clearTimeout(timeoutId);
    }, [sectionStates, updateSubscribers]);
    // Enhanced state preservation with astrological context
    (0, react_1.useEffect)(() => {
        const saveEnhancedState = async () => {
            try {
                // Calculate elemental properties from current selections
                const elementalProps = {
                    Fire: selectedCookingMethods.filter(method => method.includes('grill') || method.includes('sauté')).length * 0.3,
                    Water: selectedIngredients.filter(ing => ing.includes('soup') || ing.includes('steam')).length * 0.3,
                    Earth: selectedIngredients.filter(ing => ing.includes('root') || ing.includes('grain')).length * 0.3,
                    Air: selectedIngredients.filter(ing => ing.includes('herb') || ing.includes('spice')).length * 0.3
                };
                // Save astrological state with steering file intelligence
                // Temporarily disabled for testing
                // await saveAstrologicalState({
                //   elementalProperties: elementalProps,
                //   selectedIngredients,
                //   astrologicalContext: {
                //     selectedCuisine,
                //     selectedCookingMethods,
                //     currentRecipe,
                //     activeSection,
                //     navigationHistory
                //   }
                // });
            }
            catch (error) {
                logger_1.logger.error('Error saving enhanced astrological state:', error);
            }
        };
        if (selectedIngredients.length > 0 || selectedCuisine || selectedCookingMethods.length > 0) {
            saveEnhancedState();
        }
    }, [selectedIngredients, selectedCuisine, selectedCookingMethods, currentRecipe, activeSection, navigationHistory]);
    // Initialize agent hooks for automated quality assurance - temporarily disabled for testing
    // useEffect(() => {
    //   startAgentHooks();
    //   logger.info('Agent hooks started for automated quality assurance');
    //   
    //   return () => {
    //     stopAgentHooks();
    //     logger.info('Agent hooks stopped');
    //   };
    // }, [startAgentHooks, stopAgentHooks]);
    // Monitor ingredient consistency when ingredients change
    (0, react_1.useEffect)(() => {
        if (selectedIngredients.length > 0) {
            const ingredientsWithElementalProps = selectedIngredients.map(ingredient => ({
                name: ingredient,
                elementalProperties: {
                    Fire: ingredient.includes('spice') || ingredient.includes('pepper') ? 0.8 : 0.2,
                    Water: ingredient.includes('soup') || ingredient.includes('broth') ? 0.8 : 0.2,
                    Earth: ingredient.includes('root') || ingredient.includes('grain') ? 0.8 : 0.2,
                    Air: ingredient.includes('herb') || ingredient.includes('leaf') ? 0.8 : 0.2
                },
                category: ingredient.includes('spice') ? 'spices' :
                    ingredient.includes('herb') ? 'herbs' :
                        ingredient.includes('grain') ? 'grains' : 'other'
            }));
            validateIngredients(ingredientsWithElementalProps).then(result => {
                if (result && !result.isValid) {
                    logger_1.logger.warn('Ingredient consistency validation failed:', result.issues);
                }
            }).catch(error => {
                logger_1.logger.error('Error validating ingredient consistency:', error);
            });
        }
    }, [selectedIngredients]);
    // Monitor build quality and performance metrics
    (0, react_1.useEffect)(() => {
        const monitorQuality = async () => {
            try {
                const buildMetrics = {
                    buildTime: performanceMetrics.renderTime || 0,
                    memoryUsage: performanceMetrics.memoryUsage || 0,
                    bundleSize: 150 * 1024,
                    errorCount: 0 // No build errors in this context
                };
                const qualityResult = await monitorBuildQuality(buildMetrics);
                if (qualityResult && !qualityResult.isValid) {
                    logger_1.logger.warn('Build quality issues detected:', qualityResult.issues);
                }
            }
            catch (error) {
                logger_1.logger.error('Error monitoring build quality:', error);
            }
        };
        // Monitor quality every 30 seconds
        const qualityInterval = setInterval(monitorQuality, 30000);
        // Initial quality check
        monitorQuality();
        return () => clearInterval(qualityInterval);
    }, [performanceMetrics, monitorBuildQuality]);
    // Test MCP server integration and fallback strategy
    (0, react_1.useEffect)(() => {
        const testMCPIntegration = async () => {
            try {
                // Test fallback strategy on component mount
                const fallbackTest = await testFallbackStrategy();
                logger_1.logger.info('MCP server fallback strategy test completed:', {
                    overallReliability: fallbackTest.overallReliability,
                    astrological: fallbackTest.astrological.source,
                    nutritional: fallbackTest.nutritional.source,
                    recipes: fallbackTest.recipes.source
                });
                // Monitor server status
                const serverStatus = getServerStatus();
                logger_1.logger.debug('MCP server status:', serverStatus);
                // Test individual API integrations if needed
                if (selectedIngredients.length > 0) {
                    const nutritionalData = await getNutritionalData(selectedIngredients[0]);
                    if (nutritionalData.success) {
                        logger_1.logger.debug(`Nutritional data fetched via ${nutritionalData.source} for ${selectedIngredients[0]}`);
                    }
                }
            }
            catch (error) {
                logger_1.logger.error('Error testing MCP server integration:', error);
            }
        };
        // Test MCP integration on mount and when ingredients change
        testMCPIntegration();
        // Set up periodic server status monitoring
        const statusInterval = setInterval(() => {
            const serverStatus = getServerStatus();
            logger_1.logger.debug('MCP server status check:', serverStatus);
        }, 5 * 60 * 1000); // Every 5 minutes
        return () => clearInterval(statusInterval);
    }, [testFallbackStrategy, getServerStatus, getNutritionalData, selectedIngredients]);
    // Apply development experience optimizations
    (0, react_1.useEffect)(() => {
        const applyDevOptimizations = async () => {
            try {
                // Update development metrics with current performance data
                const devMetrics = {
                    compilationTime: performanceMetrics.renderTime || 0,
                    memoryUsage: performanceMetrics.memoryUsage || 0,
                    bundleSize: 150 * 1024,
                    errorCount: 0,
                    warningCount: 0,
                    hotReloadTime: 0
                };
                updateDevMetrics(devMetrics);
                // Get development optimization recommendations
                const devRecommendations = getDevOptimizationRecommendations();
                if (debugMode) {
                    logger_1.logger.debug('Development optimization recommendations:', devRecommendations);
                }
                // Apply automatic optimizations in development mode
                if (debugMode && process.env.NODE_ENV === 'development') {
                    const optimizationResults = applyAutomaticOptimizations();
                    if (optimizationResults.applied.length > 0) {
                        logger_1.logger.info('Applied automatic development optimizations:', optimizationResults.applied);
                    }
                    if (optimizationResults.errors.length > 0) {
                        logger_1.logger.warn('Development optimization errors:', optimizationResults.errors);
                    }
                }
                // Monitor development metrics
                const currentDevMetrics = getDevelopmentMetrics();
                if (debugMode) {
                    logger_1.logger.debug('Current development metrics:', currentDevMetrics);
                }
            }
            catch (error) {
                logger_1.logger.error('Error applying development experience optimizations:', error);
            }
        };
        // Apply optimizations on mount and when performance metrics change
        applyDevOptimizations();
        // Set up periodic optimization monitoring
        const devOptimizationInterval = setInterval(applyDevOptimizations, 60000); // Every minute
        return () => clearInterval(devOptimizationInterval);
    }, [performanceMetrics, updateDevMetrics, getDevOptimizationRecommendations, applyAutomaticOptimizations, getDevelopmentMetrics, debugMode]);
    // Log quality metrics and campaign triggers for debugging
    (0, react_1.useEffect)(() => {
        if (debugMode) {
            logger_1.logger.debug('Quality Metrics:', qualityMetrics);
            logger_1.logger.debug('Agent Hook State:', agentHookState);
            if (planetaryValidation && !planetaryValidation.isValid) {
                logger_1.logger.warn('Planetary validation issues:', planetaryValidation.issues);
            }
            if (typescriptTrigger?.triggered) {
                logger_1.logger.warn('TypeScript campaign trigger active:', typescriptTrigger);
            }
            if (buildQuality && !buildQuality.isValid) {
                logger_1.logger.warn('Build quality issues:', buildQuality.issues);
            }
            // Log MCP server status in debug mode
            const serverStatus = getServerStatus();
            logger_1.logger.debug('MCP Server Status:', serverStatus);
            // Log development metrics in debug mode
            const devMetrics = getDevelopmentMetrics();
            logger_1.logger.debug('Development Experience Metrics:', devMetrics);
        }
    }, [debugMode, qualityMetrics, agentHookState, planetaryValidation, typescriptTrigger, buildQuality, getServerStatus, getDevelopmentMetrics]);
    // Save state changes using enhanced state preservation
    (0, react_1.useEffect)(() => {
        saveNavState({
            selectedIngredients,
            selectedCuisine,
            selectedCookingMethods,
            currentRecipe,
            activeSection,
            navigationHistory,
            scrollPosition: window.scrollY
        });
    }, [selectedIngredients, selectedCuisine, selectedCookingMethods, currentRecipe, activeSection, navigationHistory, saveNavState]);
    // Context update functions
    const updateSelectedIngredients = (0, react_1.useCallback)((ingredients) => {
        setSelectedIngredients(ingredients);
        notifyComponentUpdate('ingredients', { selectedIngredients: ingredients });
        logger_1.logger.debug('Updated selected ingredients:', ingredients);
    }, []);
    const updateSelectedCuisine = (0, react_1.useCallback)((cuisine) => {
        setSelectedCuisine(cuisine);
        notifyComponentUpdate('cuisine', { selectedCuisine: cuisine });
        logger_1.logger.debug('Updated selected cuisine:', cuisine);
    }, []);
    const updateSelectedCookingMethods = (0, react_1.useCallback)((methods) => {
        setSelectedCookingMethods(methods);
        notifyComponentUpdate('cooking', { selectedCookingMethods: methods });
        logger_1.logger.debug('Updated selected cooking methods:', methods);
    }, []);
    const updateCurrentRecipe = (0, react_1.useCallback)((recipe) => {
        setCurrentRecipe(recipe);
        notifyComponentUpdate('recipe', { currentRecipe: recipe });
        logger_1.logger.debug('Updated current recipe:', recipe);
    }, []);
    const handleSetActiveSection = (0, react_1.useCallback)((section) => {
        setActiveSection(section);
        if (section) {
            setNavigationHistory(prev => [...prev.slice(-9), section]); // Keep last 10 sections
        }
    }, []);
    // Cross-component communication
    const notifyComponentUpdate = (0, react_1.useCallback)((componentId, data) => {
        const subscribers = updateSubscribers[componentId] || [];
        subscribers.forEach(callback => {
            try {
                callback(data);
            }
            catch (error) {
                logger_1.logger.error(`Error in component update callback for ${componentId}:`, error);
            }
        });
    }, [updateSubscribers]);
    const subscribeToUpdates = (0, react_1.useCallback)((componentId, callback) => {
        setUpdateSubscribers(prev => ({
            ...prev,
            [componentId]: [...(prev[componentId] || []), callback]
        }));
        // Return unsubscribe function
        return () => {
            setUpdateSubscribers(prev => ({
                ...prev,
                [componentId]: (prev[componentId] || []).filter(cb => cb !== callback)
            }));
        };
    }, []);
    // Memoized context value to prevent unnecessary re-renders
    const contextValue = (0, react_1.useMemo)(() => ({
        // Shared state
        selectedIngredients,
        selectedCuisine,
        selectedCookingMethods,
        currentRecipe,
        activeSection,
        navigationHistory,
        // Update functions
        updateSelectedIngredients,
        updateSelectedCuisine,
        updateSelectedCookingMethods,
        updateCurrentRecipe,
        setActiveSection: handleSetActiveSection,
        // Cross-component communication
        notifyComponentUpdate,
        subscribeToUpdates
    }), [
        selectedIngredients,
        selectedCuisine,
        selectedCookingMethods,
        currentRecipe,
        activeSection,
        navigationHistory,
        updateSelectedIngredients,
        updateSelectedCuisine,
        updateSelectedCookingMethods,
        updateCurrentRecipe,
        handleSetActiveSection,
        notifyComponentUpdate,
        subscribeToUpdates
    ]);
    // Handle section navigation with enhanced context preservation and smooth transitions
    const handleSectionNavigate = (0, react_1.useCallback)((sectionId) => {
        const element = document.getElementById(sectionId);
        if (element) {
            // Add smooth transition effect
            element.style.transition = 'all 0.3s ease-in-out';
            element.scrollIntoView({ behavior: 'smooth', block: 'start' });
            // Update active section and navigation history
            handleSetActiveSection(sectionId);
            onSectionNavigate?.(sectionId);
            // Save navigation state using enhanced preservation system
            saveNavState({
                selectedIngredients,
                selectedCuisine,
                selectedCookingMethods,
                currentRecipe,
                activeSection: sectionId,
                navigationHistory: [...navigationHistory, sectionId].slice(-10),
                scrollPosition: window.scrollY
            });
            // Add visual feedback for navigation
            element.classList.add('highlight-section');
            setTimeout(() => {
                element.classList.remove('highlight-section');
                element.style.transition = '';
            }, 1000);
        }
    }, [onSectionNavigate, handleSetActiveSection, navigationHistory, saveNavState, selectedIngredients, selectedCuisine, selectedCookingMethods, currentRecipe]);
    // Update section loading state
    const updateSectionState = (0, react_1.useCallback)((sectionId, updates) => {
        setSectionStates(prev => ({
            ...prev,
            [sectionId]: { ...prev[sectionId], ...updates }
        }));
    }, []);
    // Section error boundary fallback
    const SectionErrorFallback = ({ error, sectionId, onRetry }) => ((0, jsx_runtime_1.jsxs)("div", { className: "bg-red-50 border border-red-200 rounded-lg p-6 text-center", children: [(0, jsx_runtime_1.jsxs)("h3", { className: "text-lg font-semibold text-red-800 mb-2", children: ["Section Error: ", sectionId] }), (0, jsx_runtime_1.jsx)("p", { className: "text-red-600 mb-4", children: error.message || 'An unexpected error occurred in this section.' }), (0, jsx_runtime_1.jsx)("button", { onClick: onRetry, className: "bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700 transition-colors", children: "Retry Section" })] }));
    // Section wrapper with error boundary
    const SectionWrapper = ({ id, title, children, className = '' }) => {
        const [retryKey, setRetryKey] = (0, react_1.useState)(0);
        const handleRetry = (0, react_1.useCallback)(() => {
            setRetryKey(prev => prev + 1);
            updateSectionState(id, { loading: false, error: null });
        }, [id]);
        return ((0, jsx_runtime_1.jsxs)("section", { id: id, className: `bg-white rounded-lg shadow-md p-6 scroll-mt-20 ${className}`, children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between mb-4", children: [(0, jsx_runtime_1.jsx)("h2", { className: "text-2xl font-semibold text-gray-800", children: title }), sectionStates[id].loading && ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center text-blue-600", children: [(0, jsx_runtime_1.jsx)("div", { className: "animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2" }), (0, jsx_runtime_1.jsx)("span", { className: "text-sm", children: "Loading..." })] }))] }), (0, jsx_runtime_1.jsx)(ErrorBoundary_1.default, { fallback: (error) => ((0, jsx_runtime_1.jsx)(SectionErrorFallback, { error: error, sectionId: id, onRetry: handleRetry })), children: children }, retryKey)] }));
    };
    return ((0, jsx_runtime_1.jsx)(MainPageContext.Provider, { value: contextValue, children: (0, jsx_runtime_1.jsxs)("div", { className: "min-h-screen bg-gradient-to-b from-indigo-50 via-blue-50 to-gray-100 text-gray-800", children: [(0, jsx_runtime_1.jsxs)("div", { className: "container mx-auto px-4 py-8", children: [(0, jsx_runtime_1.jsxs)("header", { className: "mb-8 text-center", children: [(0, jsx_runtime_1.jsx)("h1", { className: "text-3xl md:text-4xl font-bold mb-2 text-indigo-900", children: "What to Eat Next" }), (0, jsx_runtime_1.jsx)("p", { className: "text-indigo-600 mb-4", children: "Food recommendations based on the current celestial energies" }), (0, jsx_runtime_1.jsx)("div", { className: "inline-block bg-white px-4 py-2 rounded-lg shadow-sm", children: loading ? ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center", children: [(0, jsx_runtime_1.jsx)("div", { className: "animate-spin rounded-full h-4 w-4 border-b-2 border-indigo-600 mr-2" }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-600", children: "Loading astrological data..." })] })) : ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center", children: [(0, jsx_runtime_1.jsx)("div", { className: "w-2 h-2 bg-green-500 rounded-full mr-2" }), (0, jsx_runtime_1.jsxs)("p", { className: "text-sm text-gray-600", children: ["Connected \u2022 ", isDaytime ? 'Day' : 'Night', " \u2022 ", state.astrologicalState.sunSign || 'Loading...'] })] })) })] }), (0, jsx_runtime_1.jsxs)("nav", { className: "flex flex-wrap justify-center gap-4 mb-8 bg-white rounded-lg shadow-md p-4 sticky top-2 z-10", children: [(0, jsx_runtime_1.jsx)("button", { onClick: () => handleSectionNavigate('cuisine'), className: "text-indigo-600 hover:text-indigo-800 font-medium px-3 py-1 rounded hover:bg-indigo-50 transition-colors", children: "Cuisine Recommendations" }), (0, jsx_runtime_1.jsx)("button", { onClick: () => handleSectionNavigate('ingredients'), className: "text-indigo-600 hover:text-indigo-800 font-medium px-3 py-1 rounded hover:bg-indigo-50 transition-colors", children: "Ingredient Recommendations" }), (0, jsx_runtime_1.jsx)("button", { onClick: () => handleSectionNavigate('cooking'), className: "text-indigo-600 hover:text-indigo-800 font-medium px-3 py-1 rounded hover:bg-indigo-50 transition-colors", children: "Cooking Methods" }), (0, jsx_runtime_1.jsx)("button", { onClick: () => handleSectionNavigate('recipe'), className: "text-indigo-600 hover:text-indigo-800 font-medium px-3 py-1 rounded hover:bg-indigo-50 transition-colors", children: "Recipe Builder" })] }), (0, jsx_runtime_1.jsxs)("main", { className: "flex flex-col gap-8 max-w-6xl mx-auto", children: [(0, jsx_runtime_1.jsx)(SectionWrapper, { id: "cuisine", title: "Cuisine Recommendations", children: (0, jsx_runtime_1.jsx)(ErrorBoundary_1.default, { fallback: (error) => ((0, jsx_runtime_1.jsx)(ComponentFallbacks_1.ComponentFallbacks.CuisineRecommender, { onRetry: () => window.location.reload(), error: error })), children: (0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)(ComponentFallbacks_1.ComponentFallbacks.Loading, { componentName: "Cuisine Recommender" }), children: (0, jsx_runtime_1.jsx)(CuisineRecommender, {}) }) }) }), (0, jsx_runtime_1.jsx)(SectionWrapper, { id: "ingredients", title: "Ingredient Recommendations", children: (0, jsx_runtime_1.jsx)(ErrorBoundary_1.default, { fallback: (error) => ((0, jsx_runtime_1.jsx)(ComponentFallbacks_1.ComponentFallbacks.IngredientRecommender, { onRetry: () => window.location.reload(), error: error })), children: (0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)(ComponentFallbacks_1.ComponentFallbacks.Loading, { componentName: "Ingredient Recommender" }), children: (0, jsx_runtime_1.jsx)(IngredientRecommender, { isFullPageVersion: false, maxDisplayed: 8 }) }) }) }), (0, jsx_runtime_1.jsx)(SectionWrapper, { id: "cooking", title: "Cooking Methods", children: (0, jsx_runtime_1.jsx)(ErrorBoundary_1.default, { fallback: (error) => ((0, jsx_runtime_1.jsx)(ComponentFallbacks_1.ComponentFallbacks.CookingMethods, { onRetry: () => window.location.reload(), error: error })), children: (0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)(ComponentFallbacks_1.ComponentFallbacks.Loading, { componentName: "Cooking Methods" }), children: (0, jsx_runtime_1.jsx)(CookingMethodsSection, { isMainPageVersion: true, maxDisplayed: 6, onViewMore: () => router.push('/cooking-methods') }) }) }) }), (0, jsx_runtime_1.jsx)(SectionWrapper, { id: "recipe", title: "Recipe Builder", children: (0, jsx_runtime_1.jsx)(ErrorBoundary_1.default, { fallback: (error) => ((0, jsx_runtime_1.jsx)(ComponentFallbacks_1.ComponentFallbacks.RecipeBuilder, { onRetry: () => window.location.reload(), error: error })), children: (0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)(ComponentFallbacks_1.ComponentFallbacks.Loading, { componentName: "Recipe Builder" }), children: (0, jsx_runtime_1.jsx)(RecipeBuilderSimple, {}) }) }) }), children] }), (0, jsx_runtime_1.jsx)("footer", { className: "mt-12 text-center", children: (0, jsx_runtime_1.jsx)("div", { className: "mx-auto mb-4", style: { maxWidth: '250px' }, children: (0, jsx_runtime_1.jsx)("form", { action: "https://www.paypal.com/ncp/payment/SVN6Q368TKKLS", method: "post", target: "_blank", children: (0, jsx_runtime_1.jsx)("input", { type: "submit", value: "HELP", style: {
                                            textAlign: 'center',
                                            border: 'none',
                                            borderRadius: '0.25rem',
                                            width: '100%',
                                            padding: '0 2rem',
                                            height: '2.625rem',
                                            fontWeight: 'bold',
                                            backgroundColor: '#FFD140',
                                            color: '#000000',
                                            fontFamily: '"Helvetica Neue", Arial, sans-serif',
                                            fontSize: '1rem',
                                            lineHeight: '1.25rem',
                                            cursor: 'pointer'
                                        } }) }) }) })] }), debugMode && ((0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: null, children: (0, jsx_runtime_1.jsx)(ConsolidatedDebugInfo, { position: "bottom-right", collapsible: true, showPerformanceMetrics: true, showAstrologicalData: true, showComponentStates: true }) })), (0, jsx_runtime_1.jsx)("style", { jsx: true, children: `
        .highlight-section {
          transform: scale(1.02);
          box-shadow: 0 10px 25px rgba(99, 102, 241, 0.15);
          border: 2px solid rgba(99, 102, 241, 0.3);
        }
        
        section {
          transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out, border 0.3s ease-in-out;
        }
        
        nav button:hover {
          transform: translateY(-1px);
        }
        
        nav button:active {
          transform: translateY(0);
        }
      ` })] }) }));
});
exports.default = MainPageLayout;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L3NyYy9jb21wb25lbnRzL2xheW91dC9NYWluUGFnZUxheW91dC50c3giLCJtYXBwaW5ncyI6IjtBQUFBLFlBQVksQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRWIsZ0RBQTRDO0FBQzVDLCtDQUEwSDtBQUUxSCxnR0FBd0U7QUFDeEUsa0ZBQStFO0FBQy9FLDhEQUFtRTtBQUNuRSx5REFPK0I7QUFDL0IsdUVBT3NDO0FBQ3RDLG1HQUFtRztBQUVuRywyQ0FBd0M7QUFDeEMsdUVBQXVFO0FBQ3ZFLCtFQUFvRztBQUVwRywyREFBMkQ7QUFDM0QsTUFBTSxxQkFBcUIsR0FBRyxJQUFBLFlBQUksRUFBQyxHQUFHLEVBQUUsbURBQVEsMENBQTBDLEdBQUMsQ0FBQyxDQUFDO0FBQzdGLE1BQU0sa0JBQWtCLEdBQUcsSUFBQSxZQUFJLEVBQUMsR0FBRyxFQUFFLG1EQUFRLGlDQUFpQyxHQUFDLENBQUMsQ0FBQztBQUNqRixNQUFNLHFCQUFxQixHQUFHLElBQUEsWUFBSSxFQUFDLEdBQUcsRUFBRSxtREFBUSxvQ0FBb0MsR0FBQyxDQUFDLENBQUM7QUFDdkYsTUFBTSxxQkFBcUIsR0FBRyxJQUFBLFlBQUksRUFBQyxHQUFHLEVBQUUsbURBQVEsb0NBQW9DLEdBQUMsQ0FBQyxDQUFDO0FBQ3ZGLE1BQU0sbUJBQW1CLEdBQUcsSUFBQSxZQUFJLEVBQUMsR0FBRyxFQUFFLG1EQUFRLDBDQUEwQyxHQUFDLENBQUMsQ0FBQztBQXlDM0YsTUFBTSxlQUFlLEdBQUcsSUFBQSxxQkFBYSxFQUE2QixJQUFJLENBQUMsQ0FBQztBQUVqRSxNQUFNLGtCQUFrQixHQUFHLEdBQUcsRUFBRTtJQUNyQyxNQUFNLE9BQU8sR0FBRyxJQUFBLGtCQUFVLEVBQUMsZUFBZSxDQUFDLENBQUM7SUFDNUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtRQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsdURBQXVELENBQUMsQ0FBQztLQUMxRTtJQUNE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QUNOLEdBQ3FCLENBQzVCLENBQUM7QUFDSixDQUFDLENBQUMsQ0FBQztBQUVILGtCQUFlLGNBQWMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvR3JlZ0Nhc3Ryby9EZXNrdG9wL1doYXRUb0VhdE5leHQvc3JjL2NvbXBvbmVudHMvbGF5b3V0L01haW5QYWdlTGF5b3V0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCc7XG5cbmltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gJ25leHQvbmF2aWdhdGlvbic7XG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2ssIGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQsIHVzZU1lbW8sIG1lbW8sIGxhenksIFN1c3BlbnNlIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgRXJyb3JCb3VuZGFyeSBmcm9tICdAL2NvbXBvbmVudHMvZXJyb3ItYm91bmRhcmllcy9FcnJvckJvdW5kYXJ5JztcbmltcG9ydCB7IENvbXBvbmVudEZhbGxiYWNrcyB9IGZyb20gJ0AvY29tcG9uZW50cy9mYWxsYmFja3MvQ29tcG9uZW50RmFsbGJhY2tzJztcbmltcG9ydCB7IHVzZUFsY2hlbWljYWwgfSBmcm9tICdAL2NvbnRleHRzL0FsY2hlbWljYWxDb250ZXh0L2hvb2tzJztcbmltcG9ydCB7IFxuICB1c2VBZ2VudEhvb2tzLFxuICB1c2VQbGFuZXRhcnlEYXRhVmFsaWRhdGlvbkhvb2ssXG4gIHVzZUluZ3JlZGllbnRDb25zaXN0ZW5jeUhvb2ssXG4gIHVzZVR5cGVTY3JpcHRDYW1wYWlnbkhvb2ssXG4gIHVzZUJ1aWxkUXVhbGl0eU1vbml0b3JpbmdIb29rLFxuICB1c2VRdWFsaXR5TWV0cmljc0hvb2tcbn0gZnJvbSAnQC9ob29rcy91c2VBZ2VudEhvb2tzJztcbmltcG9ydCB7IFxuICB1c2VOYXZpZ2F0aW9uU3RhdGUsIFxuICB1c2VTY3JvbGxQcmVzZXJ2YXRpb24sIFxuICB1c2VBdXRvU3RhdGVDbGVhbnVwLFxuICB1c2VBc3Ryb2xvZ2ljYWxTdGF0ZVByZXNlcnZhdGlvbixcbiAgdXNlQ3VsdHVyYWxTZW5zaXRpdml0eUd1aWRhbmNlLFxuICB1c2VQZXJmb3JtYW5jZU9wdGltaXphdGlvbkd1aWRhbmNlXG59IGZyb20gJ0AvaG9va3MvdXNlU3RhdGVQcmVzZXJ2YXRpb24nO1xuaW1wb3J0IHsgdXNlRGV2ZWxvcG1lbnRFeHBlcmllbmNlT3B0aW1pemF0aW9ucyB9IGZyb20gJ0AvdXRpbHMvZGV2ZWxvcG1lbnRFeHBlcmllbmNlT3B0aW1pemF0aW9ucyc7XG5pbXBvcnQgeyB1c2VFcnJvckhhbmRsZXIgfSBmcm9tICdAL3V0aWxzL2Vycm9ySGFuZGxpbmcnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnQC91dGlscy9sb2dnZXInO1xuaW1wb3J0IHsgdXNlTUNQU2VydmVySW50ZWdyYXRpb24gfSBmcm9tICdAL3V0aWxzL21jcFNlcnZlckludGVncmF0aW9uJztcbmltcG9ydCB7IHVzZVN0ZWVyaW5nRmlsZUludGVsbGlnZW5jZSwgRWxlbWVudGFsUHJvcGVydGllcyB9IGZyb20gJ0AvdXRpbHMvc3RlZXJpbmdGaWxlSW50ZWxsaWdlbmNlJztcblxuLy8gTGF6eSBsb2FkIG5vbi1jcml0aWNhbCBjb21wb25lbnRzIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2VcbmNvbnN0IENvbnNvbGlkYXRlZERlYnVnSW5mbyA9IGxhenkoKCkgPT4gaW1wb3J0KCdAL2NvbXBvbmVudHMvZGVidWcvQ29uc29saWRhdGVkRGVidWdJbmZvJykpO1xuY29uc3QgQ3Vpc2luZVJlY29tbWVuZGVyID0gbGF6eSgoKSA9PiBpbXBvcnQoJ0AvY29tcG9uZW50cy9DdWlzaW5lUmVjb21tZW5kZXInKSk7XG5jb25zdCBJbmdyZWRpZW50UmVjb21tZW5kZXIgPSBsYXp5KCgpID0+IGltcG9ydCgnQC9jb21wb25lbnRzL0luZ3JlZGllbnRSZWNvbW1lbmRlcicpKTtcbmNvbnN0IENvb2tpbmdNZXRob2RzU2VjdGlvbiA9IGxhenkoKCkgPT4gaW1wb3J0KCdAL2NvbXBvbmVudHMvQ29va2luZ01ldGhvZHNTZWN0aW9uJykpO1xuY29uc3QgUmVjaXBlQnVpbGRlclNpbXBsZSA9IGxhenkoKCkgPT4gaW1wb3J0KCdAL2NvbXBvbmVudHMvcmVjaXBlcy9SZWNpcGVCdWlsZGVyU2ltcGxlJykpO1xuXG5pbnRlcmZhY2UgTWFpblBhZ2VMYXlvdXRQcm9wcyB7XG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlO1xuICBkZWJ1Z01vZGU/OiBib29sZWFuO1xuICBsb2FkaW5nPzogYm9vbGVhbjtcbiAgb25TZWN0aW9uTmF2aWdhdGU/OiAoc2VjdGlvbklkOiBzdHJpbmcpID0+IHZvaWQ7XG59XG5cbmludGVyZmFjZSBTZWN0aW9uQ29uZmlnIHtcbiAgaWQ6IHN0cmluZztcbiAgdGl0bGU6IHN0cmluZztcbiAgY29tcG9uZW50OiBSZWFjdC5Db21wb25lbnRUeXBlO1xuICBsb2FkaW5nOiBib29sZWFuO1xuICBlcnJvcjogc3RyaW5nIHwgbnVsbDtcbn1cblxuLy8gTWFpbiBQYWdlIENvbnRleHQgZm9yIGNyb3NzLWNvbXBvbmVudCBkYXRhIHNoYXJpbmdcbmludGVyZmFjZSBNYWluUGFnZUNvbnRleHRUeXBlIHtcbiAgLy8gU2hhcmVkIHN0YXRlXG4gIHNlbGVjdGVkSW5ncmVkaWVudHM6IHN0cmluZ1tdO1xuICBzZWxlY3RlZEN1aXNpbmU6IHN0cmluZyB8IG51bGw7XG4gIHNlbGVjdGVkQ29va2luZ01ldGhvZHM6IHN0cmluZ1tdO1xuICBjdXJyZW50UmVjaXBlOiBhbnkgfCBudWxsO1xuICBcbiAgLy8gTmF2aWdhdGlvbiBzdGF0ZVxuICBhY3RpdmVTZWN0aW9uOiBzdHJpbmcgfCBudWxsO1xuICBuYXZpZ2F0aW9uSGlzdG9yeTogc3RyaW5nW107XG4gIFxuICAvLyBVcGRhdGUgZnVuY3Rpb25zXG4gIHVwZGF0ZVNlbGVjdGVkSW5ncmVkaWVudHM6IChpbmdyZWRpZW50czogc3RyaW5nW10pID0+IHZvaWQ7XG4gIHVwZGF0ZVNlbGVjdGVkQ3Vpc2luZTogKGN1aXNpbmU6IHN0cmluZyB8IG51bGwpID0+IHZvaWQ7XG4gIHVwZGF0ZVNlbGVjdGVkQ29va2luZ01ldGhvZHM6IChtZXRob2RzOiBzdHJpbmdbXSkgPT4gdm9pZDtcbiAgdXBkYXRlQ3VycmVudFJlY2lwZTogKHJlY2lwZTogYW55IHwgbnVsbCkgPT4gdm9pZDtcbiAgc2V0QWN0aXZlU2VjdGlvbjogKHNlY3Rpb246IHN0cmluZyB8IG51bGwpID0+IHZvaWQ7XG4gIFxuICAvLyBDcm9zcy1jb21wb25lbnQgY29tbXVuaWNhdGlvblxuICBub3RpZnlDb21wb25lbnRVcGRhdGU6IChjb21wb25lbnRJZDogc3RyaW5nLCBkYXRhOiBhbnkpID0+IHZvaWQ7XG4gIHN1YnNjcmliZVRvVXBkYXRlczogKGNvbXBvbmVudElkOiBzdHJpbmcsIGNhbGxiYWNrOiAoZGF0YTogYW55KSA9PiB2b2lkKSA9PiAoKSA9PiB2b2lkO1xufVxuXG5jb25zdCBNYWluUGFnZUNvbnRleHQgPSBjcmVhdGVDb250ZXh0PE1haW5QYWdlQ29udGV4dFR5cGUgfCBudWxsPihudWxsKTtcblxuZXhwb3J0IGNvbnN0IHVzZU1haW5QYWdlQ29udGV4dCA9ICgpID0+IHtcbiAgY29uc3QgY29udGV4dCA9IHVzZUNvbnRleHQoTWFpblBhZ2VDb250ZXh0KTtcbiAgaWYgKCFjb250ZXh0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1c2VNYWluUGFnZUNvbnRleHQgbXVzdCBiZSB1c2VkIHdpdGhpbiBNYWluUGFnZUxheW91dCcpO1xuICB9XG4gIHJldHVybiBjb250ZXh0O1xufTtcblxuLy8gTWVtb2l6ZWQgbG9hZGluZyBmYWxsYmFjayBjb21wb25lbnQgZm9yIGJldHRlciBwZXJmb3JtYW5jZVxuY29uc3QgQ29tcG9uZW50TG9hZGluZ0ZhbGxiYWNrID0gbWVtbyhmdW5jdGlvbiBDb21wb25lbnRMb2FkaW5nRmFsbGJhY2soeyBcbiAgY29tcG9uZW50TmFtZSBcbn06IHsgXG4gIGNvbXBvbmVudE5hbWU6IHN0cmluZyBcbn0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHAtOCBiZy1ncmF5LTUwIHJvdW5kZWQtbGdcIj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgc3BhY2UteC0zXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYW5pbWF0ZS1zcGluIHJvdW5kZWQtZnVsbCBoLTYgdy02IGJvcmRlci1iLTIgYm9yZGVyLWluZGlnby02MDBcIj48L2Rpdj5cbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGV4dC1ncmF5LTYwMFwiPkxvYWRpbmcge2NvbXBvbmVudE5hbWV9Li4uPC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59KTtcblxuY29uc3QgTWFpblBhZ2VMYXlvdXQ6IFJlYWN0LkZDPE1haW5QYWdlTGF5b3V0UHJvcHM+ID0gbWVtbyhmdW5jdGlvbiBNYWluUGFnZUxheW91dCh7XG4gIGNoaWxkcmVuLFxuICBkZWJ1Z01vZGUgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyxcbiAgbG9hZGluZyA9IGZhbHNlLFxuICBvblNlY3Rpb25OYXZpZ2F0ZVxufSkge1xuICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKTtcbiAgY29uc3QgeyBzdGF0ZSwgcGxhbmV0YXJ5UG9zaXRpb25zLCBpc0RheXRpbWUgfSA9IHVzZUFsY2hlbWljYWwoKTtcbiAgXG4gIC8vIFVzZSBuZXcgc3RhdGUgcHJlc2VydmF0aW9uIGhvb2tzXG4gIGNvbnN0IHsgc2F2ZVN0YXRlOiBzYXZlTmF2U3RhdGUsIGdldFN0YXRlOiBnZXROYXZTdGF0ZSB9ID0gdXNlTmF2aWdhdGlvblN0YXRlKCk7XG4gIGNvbnN0IHsgcmVzdG9yZVNjcm9sbFBvc2l0aW9uIH0gPSB1c2VTY3JvbGxQcmVzZXJ2YXRpb24oJ21haW4tcGFnZScpO1xuICB1c2VBdXRvU3RhdGVDbGVhbnVwKCk7XG5cbiAgLy8gRW5oYW5jZWQgaG9va3Mgd2l0aCBzdGVlcmluZyBmaWxlIGludGVsbGlnZW5jZVxuICBjb25zdCBzdGVlcmluZ0ludGVsbGlnZW5jZSA9IHVzZVN0ZWVyaW5nRmlsZUludGVsbGlnZW5jZSgpO1xuICAvLyBUZW1wb3JhcmlseSBkaXNhYmxlZCBmb3IgdGVzdGluZ1xuICAvLyBjb25zdCB7IFxuICAvLyAgIHNhdmVBc3Ryb2xvZ2ljYWxTdGF0ZSwgXG4gIC8vICAgcmVzdG9yZUFzdHJvbG9naWNhbFN0YXRlLFxuICAvLyAgIHZhbGlkYXRlRWxlbWVudGFsQ29tcGF0aWJpbGl0eSxcbiAgLy8gICBnZXRBcmNoaXRlY3R1cmFsR3VpZGFuY2UsXG4gIC8vICAgZ2V0VGVjaG5vbG9neVN0YWNrR3VpZGFuY2VcbiAgLy8gfSA9IHVzZUFzdHJvbG9naWNhbFN0YXRlUHJlc2VydmF0aW9uKCdtYWluLXBhZ2UtbGF5b3V0Jyk7XG4gIFxuICAvLyBUZW1wb3JhcmlseSBkaXNhYmxlZCBmb3IgdGVzdGluZ1xuICAvLyBjb25zdCB7IHZhbGlkYXRlQ3VsdHVyYWxDb250ZW50LCBnZXRJbmNsdXNpdmVMYW5ndWFnZUd1aWRlbGluZXMgfSA9IHVzZUN1bHR1cmFsU2Vuc2l0aXZpdHlHdWlkYW5jZSgpO1xuICAvLyBjb25zdCB7IGdldE9wdGltaXphdGlvblJlY29tbWVuZGF0aW9ucywgdmFsaWRhdGVQZXJmb3JtYW5jZU1ldHJpY3MgfSA9IHVzZVBlcmZvcm1hbmNlT3B0aW1pemF0aW9uR3VpZGFuY2UoKTtcblxuICAvLyBBZ2VudCBob29rcyBmb3IgYXV0b21hdGVkIHF1YWxpdHkgYXNzdXJhbmNlIC0gdGVtcG9yYXJpbHkgZGlzYWJsZWQgZm9yIHRlc3RpbmdcbiAgLy8gY29uc3QgeyBob29rU3RhdGU6IGFnZW50SG9va1N0YXRlLCBzdGFydEFnZW50SG9va3MsIHN0b3BBZ2VudEhvb2tzLCB0cmlnZ2VyVmFsaWRhdGlvbiB9ID0gdXNlQWdlbnRIb29rcyh7XG4gIC8vICAgZW5hYmxlUGxhbmV0YXJ5VmFsaWRhdGlvbjogdHJ1ZSxcbiAgLy8gICBlbmFibGVJbmdyZWRpZW50VmFsaWRhdGlvbjogdHJ1ZSxcbiAgLy8gICBlbmFibGVDYW1wYWlnblRyaWdnZXJzOiB0cnVlLFxuICAvLyAgIGVuYWJsZVBlcmZvcm1hbmNlTW9uaXRvcmluZzogdHJ1ZSxcbiAgLy8gICB2YWxpZGF0aW9uSW50ZXJ2YWw6IDUgLy8gNSBtaW51dGVzXG4gIC8vIH0pO1xuXG4gIC8vIGNvbnN0IHsgdmFsaWRhdGlvblJlc3VsdDogcGxhbmV0YXJ5VmFsaWRhdGlvbiwgdmFsaWRhdGVQbGFuZXRhcnlEYXRhIH0gPSB1c2VQbGFuZXRhcnlEYXRhVmFsaWRhdGlvbkhvb2sodHJ1ZSk7XG4gIFxuICAvLyBUZW1wb3JhcnkgcGxhY2Vob2xkZXJzIGZvciBkaXNhYmxlZCBob29rc1xuICBjb25zdCBhZ2VudEhvb2tTdGF0ZSA9IG51bGw7XG4gIGNvbnN0IHBsYW5ldGFyeVZhbGlkYXRpb24gPSBudWxsO1xuICBjb25zdCB7IHZhbGlkYXRpb25SZXN1bHQ6IGluZ3JlZGllbnRWYWxpZGF0aW9uLCB2YWxpZGF0ZUluZ3JlZGllbnRzIH0gPSB1c2VJbmdyZWRpZW50Q29uc2lzdGVuY3lIb29rKCk7XG4gIGNvbnN0IHsgY2FtcGFpZ25UcmlnZ2VyOiB0eXBlc2NyaXB0VHJpZ2dlciwgY2hlY2tFcnJvclRocmVzaG9sZCB9ID0gdXNlVHlwZVNjcmlwdENhbXBhaWduSG9vayh0cnVlKTtcbiAgY29uc3QgeyBxdWFsaXR5UmVzdWx0OiBidWlsZFF1YWxpdHksIG1vbml0b3JCdWlsZFF1YWxpdHkgfSA9IHVzZUJ1aWxkUXVhbGl0eU1vbml0b3JpbmdIb29rKCk7XG4gIGNvbnN0IHsgbWV0cmljczogcXVhbGl0eU1ldHJpY3MsIHVwZGF0ZU1ldHJpY3MgfSA9IHVzZVF1YWxpdHlNZXRyaWNzSG9vaygzMDAwMCk7IC8vIDMwIHNlY29uZHNcblxuICAvLyBNQ1Agc2VydmVyIGludGVncmF0aW9uIGZvciByZWxpYWJsZSBleHRlcm5hbCBBUElzXG4gIGNvbnN0IHsgXG4gICAgZ2V0QXN0cm9sb2dpY2FsRGF0YSwgXG4gICAgZ2V0TnV0cml0aW9uYWxEYXRhLCBcbiAgICBnZXRSZWNpcGVEYXRhLCBcbiAgICB0ZXN0RmFsbGJhY2tTdHJhdGVneSwgXG4gICAgZ2V0U2VydmVyU3RhdHVzIFxuICB9ID0gdXNlTUNQU2VydmVySW50ZWdyYXRpb24oKTtcblxuICAvLyBEZXZlbG9wbWVudCBleHBlcmllbmNlIG9wdGltaXphdGlvbnNcbiAgY29uc3Qge1xuICAgIHVwZGF0ZVBlcmZvcm1hbmNlTWV0cmljczogdXBkYXRlRGV2TWV0cmljcyxcbiAgICBnZXREZXZlbG9wbWVudE1ldHJpY3MsXG4gICAgZ2V0UGVyZm9ybWFuY2VPcHRpbWl6YXRpb25SZWNvbW1lbmRhdGlvbnM6IGdldERldk9wdGltaXphdGlvblJlY29tbWVuZGF0aW9ucyxcbiAgICBhcHBseUF1dG9tYXRpY09wdGltaXphdGlvbnNcbiAgfSA9IHVzZURldmVsb3BtZW50RXhwZXJpZW5jZU9wdGltaXphdGlvbnMoKTtcblxuICBjb25zdCBbc2VjdGlvblN0YXRlcywgc2V0U2VjdGlvblN0YXRlc10gPSB1c2VTdGF0ZTxSZWNvcmQ8c3RyaW5nLCB7IGxvYWRpbmc6IGJvb2xlYW47IGVycm9yOiBzdHJpbmcgfCBudWxsIH0+Pih7XG4gICAgY3Vpc2luZTogeyBsb2FkaW5nOiBmYWxzZSwgZXJyb3I6IG51bGwgfSxcbiAgICBpbmdyZWRpZW50czogeyBsb2FkaW5nOiBmYWxzZSwgZXJyb3I6IG51bGwgfSxcbiAgICBjb29raW5nOiB7IGxvYWRpbmc6IGZhbHNlLCBlcnJvcjogbnVsbCB9LFxuICAgIHJlY2lwZTogeyBsb2FkaW5nOiBmYWxzZSwgZXJyb3I6IG51bGwgfVxuICB9KTtcblxuICAvLyBNYWluIFBhZ2UgQ29udGV4dCBTdGF0ZSAtIEluaXRpYWxpemUgZnJvbSBwcmVzZXJ2ZWQgc3RhdGVcbiAgY29uc3QgW3NlbGVjdGVkSW5ncmVkaWVudHMsIHNldFNlbGVjdGVkSW5ncmVkaWVudHNdID0gdXNlU3RhdGU8c3RyaW5nW10+KFtdKTtcbiAgY29uc3QgW3NlbGVjdGVkQ3Vpc2luZSwgc2V0U2VsZWN0ZWRDdWlzaW5lXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xuICBjb25zdCBbc2VsZWN0ZWRDb29raW5nTWV0aG9kcywgc2V0U2VsZWN0ZWRDb29raW5nTWV0aG9kc10gPSB1c2VTdGF0ZTxzdHJpbmdbXT4oW10pO1xuICBjb25zdCBbY3VycmVudFJlY2lwZSwgc2V0Q3VycmVudFJlY2lwZV0gPSB1c2VTdGF0ZTxhbnkgfCBudWxsPihudWxsKTtcbiAgY29uc3QgW2FjdGl2ZVNlY3Rpb24sIHNldEFjdGl2ZVNlY3Rpb25dID0gdXNlU3RhdGU8c3RyaW5nIHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IFtuYXZpZ2F0aW9uSGlzdG9yeSwgc2V0TmF2aWdhdGlvbkhpc3RvcnldID0gdXNlU3RhdGU8c3RyaW5nW10+KFtdKTtcbiAgXG4gIC8vIENvbXBvbmVudCB1cGRhdGUgc3Vic2NyaWJlcnNcbiAgY29uc3QgW3VwZGF0ZVN1YnNjcmliZXJzLCBzZXRVcGRhdGVTdWJzY3JpYmVyc10gPSB1c2VTdGF0ZTxSZWNvcmQ8c3RyaW5nLCAoKGRhdGE6IGFueSkgPT4gdm9pZClbXT4+KHt9KTtcblxuICAvLyBTdGVlcmluZyBmaWxlIGludGVsbGlnZW5jZSBzdGF0ZVxuICBjb25zdCBbYXN0cm9sb2dpY2FsR3VpZGFuY2UsIHNldEFzdHJvbG9naWNhbEd1aWRhbmNlXSA9IHVzZVN0YXRlPGFueT4obnVsbCk7XG4gIGNvbnN0IFtwZXJmb3JtYW5jZU1ldHJpY3MsIHNldFBlcmZvcm1hbmNlTWV0cmljc10gPSB1c2VTdGF0ZTxhbnk+KHt9KTtcbiAgY29uc3QgW2N1bHR1cmFsVmFsaWRhdGlvbiwgc2V0Q3VsdHVyYWxWYWxpZGF0aW9uXSA9IHVzZVN0YXRlPGFueT4obnVsbCk7XG5cbiAgLy8gSW5pdGlhbGl6ZSBzdGF0ZSBmcm9tIHByZXNlcnZlZCBuYXZpZ2F0aW9uIHN0YXRlXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgcmVzdG9yZWRTdGF0ZSA9IGdldE5hdlN0YXRlKCk7XG4gICAgaWYgKHJlc3RvcmVkU3RhdGUpIHtcbiAgICAgIGlmIChyZXN0b3JlZFN0YXRlLnNlbGVjdGVkSW5ncmVkaWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICBzZXRTZWxlY3RlZEluZ3JlZGllbnRzKHJlc3RvcmVkU3RhdGUuc2VsZWN0ZWRJbmdyZWRpZW50cyk7XG4gICAgICB9XG4gICAgICBpZiAocmVzdG9yZWRTdGF0ZS5zZWxlY3RlZEN1aXNpbmUpIHtcbiAgICAgICAgc2V0U2VsZWN0ZWRDdWlzaW5lKHJlc3RvcmVkU3RhdGUuc2VsZWN0ZWRDdWlzaW5lKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN0b3JlZFN0YXRlLnNlbGVjdGVkQ29va2luZ01ldGhvZHMubGVuZ3RoID4gMCkge1xuICAgICAgICBzZXRTZWxlY3RlZENvb2tpbmdNZXRob2RzKHJlc3RvcmVkU3RhdGUuc2VsZWN0ZWRDb29raW5nTWV0aG9kcyk7XG4gICAgICB9XG4gICAgICBpZiAocmVzdG9yZWRTdGF0ZS5jdXJyZW50UmVjaXBlKSB7XG4gICAgICAgIHNldEN1cnJlbnRSZWNpcGUocmVzdG9yZWRTdGF0ZS5jdXJyZW50UmVjaXBlKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN0b3JlZFN0YXRlLmFjdGl2ZVNlY3Rpb24pIHtcbiAgICAgICAgc2V0QWN0aXZlU2VjdGlvbihyZXN0b3JlZFN0YXRlLmFjdGl2ZVNlY3Rpb24pO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3RvcmVkU3RhdGUubmF2aWdhdGlvbkhpc3RvcnkubGVuZ3RoID4gMCkge1xuICAgICAgICBzZXROYXZpZ2F0aW9uSGlzdG9yeShyZXN0b3JlZFN0YXRlLm5hdmlnYXRpb25IaXN0b3J5KTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgbG9nZ2VyLmRlYnVnKCdSZXN0b3JlZCBtYWluIHBhZ2UgY29udGV4dCBmcm9tIGVuaGFuY2VkIHN0YXRlIHByZXNlcnZhdGlvbicpO1xuICAgIH1cbiAgICBcbiAgICAvLyBSZXN0b3JlIHNjcm9sbCBwb3NpdGlvbiBhZnRlciBhIHNob3J0IGRlbGF5IHRvIGVuc3VyZSBET00gaXMgcmVhZHlcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbigpO1xuICAgIH0sIDEwMCk7XG4gIH0sIFtnZXROYXZTdGF0ZSwgcmVzdG9yZVNjcm9sbFBvc2l0aW9uXSk7XG5cbiAgLy8gSW5pdGlhbGl6ZSBzdGVlcmluZyBmaWxlIGludGVsbGlnZW5jZSBndWlkYW5jZVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGluaXRpYWxpemVHdWlkYW5jZSA9IGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGd1aWRhbmNlID0gYXdhaXQgc3RlZXJpbmdJbnRlbGxpZ2VuY2UuZ2V0R3VpZGFuY2UoKTtcbiAgICAgICAgc2V0QXN0cm9sb2dpY2FsR3VpZGFuY2UoZ3VpZGFuY2UpO1xuICAgICAgICBcbiAgICAgICAgLy8gQXBwbHkgYXJjaGl0ZWN0dXJhbCBndWlkYW5jZSBmb3IgY29tcG9uZW50IG9wdGltaXphdGlvbiAtIHRlbXBvcmFyaWx5IGRpc2FibGVkXG4gICAgICAgIC8vIGNvbnN0IGFyY2hHdWlkYW5jZSA9IGdldEFyY2hpdGVjdHVyYWxHdWlkYW5jZSgpO1xuICAgICAgICAvLyBsb2dnZXIuZGVidWcoJ0FwcGxpZWQgYXJjaGl0ZWN0dXJhbCBndWlkYW5jZSBmcm9tIHN0ZWVyaW5nIGZpbGVzOicsIGFyY2hHdWlkYW5jZSk7XG4gICAgICAgIFxuICAgICAgICAvLyBWYWxpZGF0ZSBjdWx0dXJhbCBjb250ZW50IGlmIHdlIGhhdmUgYW55IC0gdGVtcG9yYXJpbHkgZGlzYWJsZWRcbiAgICAgICAgLy8gaWYgKHNlbGVjdGVkQ3Vpc2luZSB8fCBzZWxlY3RlZEluZ3JlZGllbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gICBjb25zdCB2YWxpZGF0aW9uID0gdmFsaWRhdGVDdWx0dXJhbENvbnRlbnQoe1xuICAgICAgICAvLyAgICAgaW5ncmVkaWVudE5hbWVzOiBzZWxlY3RlZEluZ3JlZGllbnRzLFxuICAgICAgICAvLyAgICAgY3Vpc2luZURlc2NyaXB0aW9uczogc2VsZWN0ZWRDdWlzaW5lID8gW3NlbGVjdGVkQ3Vpc2luZV0gOiBbXVxuICAgICAgICAvLyAgIH0pO1xuICAgICAgICAvLyAgIHNldEN1bHR1cmFsVmFsaWRhdGlvbih2YWxpZGF0aW9uKTtcbiAgICAgICAgLy8gICBcbiAgICAgICAgLy8gICBpZiAoIXZhbGlkYXRpb24uaXNDb21wbGlhbnQpIHtcbiAgICAgICAgLy8gICAgIGxvZ2dlci53YXJuKCdDdWx0dXJhbCBzZW5zaXRpdml0eSBpc3N1ZXMgZGV0ZWN0ZWQ6JywgdmFsaWRhdGlvbi5pc3N1ZXMpO1xuICAgICAgICAvLyAgIH1cbiAgICAgICAgLy8gfVxuICAgICAgICBcbiAgICAgICAgLy8gR2V0IHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbiByZWNvbW1lbmRhdGlvbnMgLSB0ZW1wb3JhcmlseSBkaXNhYmxlZFxuICAgICAgICAvLyBjb25zdCBwZXJmUmVjb21tZW5kYXRpb25zID0gZ2V0T3B0aW1pemF0aW9uUmVjb21tZW5kYXRpb25zKCdtYWluLXBhZ2UtbGF5b3V0Jyk7XG4gICAgICAgIC8vIGxvZ2dlci5kZWJ1ZygnUGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uIHJlY29tbWVuZGF0aW9uczonLCBwZXJmUmVjb21tZW5kYXRpb25zKTtcbiAgICAgICAgXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBsb2dnZXIuZXJyb3IoJ0Vycm9yIGluaXRpYWxpemluZyBzdGVlcmluZyBmaWxlIGludGVsbGlnZW5jZTonLCBlcnJvcik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGluaXRpYWxpemVHdWlkYW5jZSgpO1xuICB9LCBbc3RlZXJpbmdJbnRlbGxpZ2VuY2UsIHNlbGVjdGVkQ3Vpc2luZSwgc2VsZWN0ZWRJbmdyZWRpZW50c10pO1xuXG4gIC8vIE1vbml0b3IgcGVyZm9ybWFuY2UgbWV0cmljcyB1c2luZyBzdGVlcmluZyBmaWxlIGd1aWRhbmNlXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3Qgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgXG4gICAgY29uc3QgbWVhc3VyZVBlcmZvcm1hbmNlID0gKCkgPT4ge1xuICAgICAgY29uc3QgcmVuZGVyVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpIC0gc3RhcnRUaW1lO1xuICAgICAgY29uc3QgbWVtb3J5VXNhZ2UgPSAocGVyZm9ybWFuY2UgYXMgYW55KS5tZW1vcnk/LnVzZWRKU0hlYXBTaXplIC8gMTAyNCAvIDEwMjQgfHwgMDtcbiAgICAgIFxuICAgICAgY29uc3QgbWV0cmljcyA9IHtcbiAgICAgICAgcmVuZGVyVGltZSxcbiAgICAgICAgbWVtb3J5VXNhZ2UsXG4gICAgICAgIGNvbXBvbmVudENvdW50OiBPYmplY3Qua2V5cyhzZWN0aW9uU3RhdGVzKS5sZW5ndGgsXG4gICAgICAgIGFjdGl2ZVN1YnNjcmliZXJzOiBPYmplY3QudmFsdWVzKHVwZGF0ZVN1YnNjcmliZXJzKS5yZWR1Y2UoKHN1bSwgc3VicykgPT4gc3VtICsgc3Vicy5sZW5ndGgsIDApXG4gICAgICB9O1xuICAgICAgXG4gICAgICBzZXRQZXJmb3JtYW5jZU1ldHJpY3MobWV0cmljcyk7XG4gICAgICBcbiAgICAgIC8vIFZhbGlkYXRlIHBlcmZvcm1hbmNlIGFnYWluc3Qgc3RlZXJpbmcgZmlsZSB0aHJlc2hvbGRzIC0gdGVtcG9yYXJpbHkgZGlzYWJsZWRcbiAgICAgIC8vIGNvbnN0IHZhbGlkYXRpb24gPSB2YWxpZGF0ZVBlcmZvcm1hbmNlTWV0cmljcyh7XG4gICAgICAvLyAgIHJlbmRlclRpbWUsXG4gICAgICAvLyAgIG1lbW9yeVVzYWdlXG4gICAgICAvLyB9KTtcbiAgICAgIC8vIFxuICAgICAgLy8gaWYgKCF2YWxpZGF0aW9uLmlzT3B0aW1hbCkge1xuICAgICAgLy8gICBsb2dnZXIud2FybignUGVyZm9ybWFuY2UgaXNzdWVzIGRldGVjdGVkOicsIHZhbGlkYXRpb24uaXNzdWVzKTtcbiAgICAgIC8vICAgbG9nZ2VyLmluZm8oJ1BlcmZvcm1hbmNlIHJlY29tbWVuZGF0aW9uczonLCB2YWxpZGF0aW9uLnJlY29tbWVuZGF0aW9ucyk7XG4gICAgICAvLyB9XG4gICAgfTtcblxuICAgIC8vIE1lYXN1cmUgcGVyZm9ybWFuY2UgYWZ0ZXIgY29tcG9uZW50IG1vdW50cyBhbmQgdXBkYXRlc1xuICAgIGNvbnN0IHRpbWVvdXRJZCA9IHNldFRpbWVvdXQobWVhc3VyZVBlcmZvcm1hbmNlLCAxMDApO1xuICAgIFxuICAgIHJldHVybiAoKSA9PiBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgfSwgW3NlY3Rpb25TdGF0ZXMsIHVwZGF0ZVN1YnNjcmliZXJzXSk7XG5cbiAgLy8gRW5oYW5jZWQgc3RhdGUgcHJlc2VydmF0aW9uIHdpdGggYXN0cm9sb2dpY2FsIGNvbnRleHRcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBzYXZlRW5oYW5jZWRTdGF0ZSA9IGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIENhbGN1bGF0ZSBlbGVtZW50YWwgcHJvcGVydGllcyBmcm9tIGN1cnJlbnQgc2VsZWN0aW9uc1xuICAgICAgICBjb25zdCBlbGVtZW50YWxQcm9wczogRWxlbWVudGFsUHJvcGVydGllcyA9IHtcbiAgICAgICAgICBGaXJlOiBzZWxlY3RlZENvb2tpbmdNZXRob2RzLmZpbHRlcihtZXRob2QgPT4gbWV0aG9kLmluY2x1ZGVzKCdncmlsbCcpIHx8IG1ldGhvZC5pbmNsdWRlcygnc2F1dMOpJykpLmxlbmd0aCAqIDAuMyxcbiAgICAgICAgICBXYXRlcjogc2VsZWN0ZWRJbmdyZWRpZW50cy5maWx0ZXIoaW5nID0+IGluZy5pbmNsdWRlcygnc291cCcpIHx8IGluZy5pbmNsdWRlcygnc3RlYW0nKSkubGVuZ3RoICogMC4zLFxuICAgICAgICAgIEVhcnRoOiBzZWxlY3RlZEluZ3JlZGllbnRzLmZpbHRlcihpbmcgPT4gaW5nLmluY2x1ZGVzKCdyb290JykgfHwgaW5nLmluY2x1ZGVzKCdncmFpbicpKS5sZW5ndGggKiAwLjMsXG4gICAgICAgICAgQWlyOiBzZWxlY3RlZEluZ3JlZGllbnRzLmZpbHRlcihpbmcgPT4gaW5nLmluY2x1ZGVzKCdoZXJiJykgfHwgaW5nLmluY2x1ZGVzKCdzcGljZScpKS5sZW5ndGggKiAwLjNcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBTYXZlIGFzdHJvbG9naWNhbCBzdGF0ZSB3aXRoIHN0ZWVyaW5nIGZpbGUgaW50ZWxsaWdlbmNlXG4gICAgICAgIC8vIFRlbXBvcmFyaWx5IGRpc2FibGVkIGZvciB0ZXN0aW5nXG4gICAgICAgIC8vIGF3YWl0IHNhdmVBc3Ryb2xvZ2ljYWxTdGF0ZSh7XG4gICAgICAgIC8vICAgZWxlbWVudGFsUHJvcGVydGllczogZWxlbWVudGFsUHJvcHMsXG4gICAgICAgIC8vICAgc2VsZWN0ZWRJbmdyZWRpZW50cyxcbiAgICAgICAgLy8gICBhc3Ryb2xvZ2ljYWxDb250ZXh0OiB7XG4gICAgICAgIC8vICAgICBzZWxlY3RlZEN1aXNpbmUsXG4gICAgICAgIC8vICAgICBzZWxlY3RlZENvb2tpbmdNZXRob2RzLFxuICAgICAgICAvLyAgICAgY3VycmVudFJlY2lwZSxcbiAgICAgICAgLy8gICAgIGFjdGl2ZVNlY3Rpb24sXG4gICAgICAgIC8vICAgICBuYXZpZ2F0aW9uSGlzdG9yeVxuICAgICAgICAvLyAgIH1cbiAgICAgICAgLy8gfSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBsb2dnZXIuZXJyb3IoJ0Vycm9yIHNhdmluZyBlbmhhbmNlZCBhc3Ryb2xvZ2ljYWwgc3RhdGU6JywgZXJyb3IpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoc2VsZWN0ZWRJbmdyZWRpZW50cy5sZW5ndGggPiAwIHx8IHNlbGVjdGVkQ3Vpc2luZSB8fCBzZWxlY3RlZENvb2tpbmdNZXRob2RzLmxlbmd0aCA+IDApIHtcbiAgICAgIHNhdmVFbmhhbmNlZFN0YXRlKCk7XG4gICAgfVxuICB9LCBbc2VsZWN0ZWRJbmdyZWRpZW50cywgc2VsZWN0ZWRDdWlzaW5lLCBzZWxlY3RlZENvb2tpbmdNZXRob2RzLCBjdXJyZW50UmVjaXBlLCBhY3RpdmVTZWN0aW9uLCBuYXZpZ2F0aW9uSGlzdG9yeV0pO1xuXG4gIC8vIEluaXRpYWxpemUgYWdlbnQgaG9va3MgZm9yIGF1dG9tYXRlZCBxdWFsaXR5IGFzc3VyYW5jZSAtIHRlbXBvcmFyaWx5IGRpc2FibGVkIGZvciB0ZXN0aW5nXG4gIC8vIHVzZUVmZmVjdCgoKSA9PiB7XG4gIC8vICAgc3RhcnRBZ2VudEhvb2tzKCk7XG4gIC8vICAgbG9nZ2VyLmluZm8oJ0FnZW50IGhvb2tzIHN0YXJ0ZWQgZm9yIGF1dG9tYXRlZCBxdWFsaXR5IGFzc3VyYW5jZScpO1xuICAvLyAgIFxuICAvLyAgIHJldHVybiAoKSA9PiB7XG4gIC8vICAgICBzdG9wQWdlbnRIb29rcygpO1xuICAvLyAgICAgbG9nZ2VyLmluZm8oJ0FnZW50IGhvb2tzIHN0b3BwZWQnKTtcbiAgLy8gICB9O1xuICAvLyB9LCBbc3RhcnRBZ2VudEhvb2tzLCBzdG9wQWdlbnRIb29rc10pO1xuXG4gIC8vIE1vbml0b3IgaW5ncmVkaWVudCBjb25zaXN0ZW5jeSB3aGVuIGluZ3JlZGllbnRzIGNoYW5nZVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChzZWxlY3RlZEluZ3JlZGllbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGluZ3JlZGllbnRzV2l0aEVsZW1lbnRhbFByb3BzID0gc2VsZWN0ZWRJbmdyZWRpZW50cy5tYXAoaW5ncmVkaWVudCA9PiAoe1xuICAgICAgICBuYW1lOiBpbmdyZWRpZW50LFxuICAgICAgICBlbGVtZW50YWxQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgRmlyZTogaW5ncmVkaWVudC5pbmNsdWRlcygnc3BpY2UnKSB8fCBpbmdyZWRpZW50LmluY2x1ZGVzKCdwZXBwZXInKSA/IDAuOCA6IDAuMixcbiAgICAgICAgICBXYXRlcjogaW5ncmVkaWVudC5pbmNsdWRlcygnc291cCcpIHx8IGluZ3JlZGllbnQuaW5jbHVkZXMoJ2Jyb3RoJykgPyAwLjggOiAwLjIsXG4gICAgICAgICAgRWFydGg6IGluZ3JlZGllbnQuaW5jbHVkZXMoJ3Jvb3QnKSB8fCBpbmdyZWRpZW50LmluY2x1ZGVzKCdncmFpbicpID8gMC44IDogMC4yLFxuICAgICAgICAgIEFpcjogaW5ncmVkaWVudC5pbmNsdWRlcygnaGVyYicpIHx8IGluZ3JlZGllbnQuaW5jbHVkZXMoJ2xlYWYnKSA/IDAuOCA6IDAuMlxuICAgICAgICB9IGFzIEVsZW1lbnRhbFByb3BlcnRpZXMsXG4gICAgICAgIGNhdGVnb3J5OiBpbmdyZWRpZW50LmluY2x1ZGVzKCdzcGljZScpID8gJ3NwaWNlcycgOiBcbiAgICAgICAgICAgICAgICAgaW5ncmVkaWVudC5pbmNsdWRlcygnaGVyYicpID8gJ2hlcmJzJyA6IFxuICAgICAgICAgICAgICAgICBpbmdyZWRpZW50LmluY2x1ZGVzKCdncmFpbicpID8gJ2dyYWlucycgOiAnb3RoZXInXG4gICAgICB9KSk7XG5cbiAgICAgIHZhbGlkYXRlSW5ncmVkaWVudHMoaW5ncmVkaWVudHNXaXRoRWxlbWVudGFsUHJvcHMpLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgaWYgKHJlc3VsdCAmJiAhcmVzdWx0LmlzVmFsaWQpIHtcbiAgICAgICAgICBsb2dnZXIud2FybignSW5ncmVkaWVudCBjb25zaXN0ZW5jeSB2YWxpZGF0aW9uIGZhaWxlZDonLCByZXN1bHQuaXNzdWVzKTtcbiAgICAgICAgfVxuICAgICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICBsb2dnZXIuZXJyb3IoJ0Vycm9yIHZhbGlkYXRpbmcgaW5ncmVkaWVudCBjb25zaXN0ZW5jeTonLCBlcnJvcik7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtzZWxlY3RlZEluZ3JlZGllbnRzXSk7XG5cbiAgLy8gTW9uaXRvciBidWlsZCBxdWFsaXR5IGFuZCBwZXJmb3JtYW5jZSBtZXRyaWNzXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgbW9uaXRvclF1YWxpdHkgPSBhc3luYyAoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBidWlsZE1ldHJpY3MgPSB7XG4gICAgICAgICAgYnVpbGRUaW1lOiBwZXJmb3JtYW5jZU1ldHJpY3MucmVuZGVyVGltZSB8fCAwLFxuICAgICAgICAgIG1lbW9yeVVzYWdlOiBwZXJmb3JtYW5jZU1ldHJpY3MubWVtb3J5VXNhZ2UgfHwgMCxcbiAgICAgICAgICBidW5kbGVTaXplOiAxNTAgKiAxMDI0LCAvLyBFc3RpbWF0ZWQgMTUwS0IgZm9yIG1haW4gcGFnZVxuICAgICAgICAgIGVycm9yQ291bnQ6IDAgLy8gTm8gYnVpbGQgZXJyb3JzIGluIHRoaXMgY29udGV4dFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHF1YWxpdHlSZXN1bHQgPSBhd2FpdCBtb25pdG9yQnVpbGRRdWFsaXR5KGJ1aWxkTWV0cmljcyk7XG4gICAgICAgIGlmIChxdWFsaXR5UmVzdWx0ICYmICFxdWFsaXR5UmVzdWx0LmlzVmFsaWQpIHtcbiAgICAgICAgICBsb2dnZXIud2FybignQnVpbGQgcXVhbGl0eSBpc3N1ZXMgZGV0ZWN0ZWQ6JywgcXVhbGl0eVJlc3VsdC5pc3N1ZXMpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBsb2dnZXIuZXJyb3IoJ0Vycm9yIG1vbml0b3JpbmcgYnVpbGQgcXVhbGl0eTonLCBlcnJvcik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIE1vbml0b3IgcXVhbGl0eSBldmVyeSAzMCBzZWNvbmRzXG4gICAgY29uc3QgcXVhbGl0eUludGVydmFsID0gc2V0SW50ZXJ2YWwobW9uaXRvclF1YWxpdHksIDMwMDAwKTtcbiAgICBcbiAgICAvLyBJbml0aWFsIHF1YWxpdHkgY2hlY2tcbiAgICBtb25pdG9yUXVhbGl0eSgpO1xuICAgIFxuICAgIHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKHF1YWxpdHlJbnRlcnZhbCk7XG4gIH0sIFtwZXJmb3JtYW5jZU1ldHJpY3MsIG1vbml0b3JCdWlsZFF1YWxpdHldKTtcblxuICAvLyBUZXN0IE1DUCBzZXJ2ZXIgaW50ZWdyYXRpb24gYW5kIGZhbGxiYWNrIHN0cmF0ZWd5XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgdGVzdE1DUEludGVncmF0aW9uID0gYXN5bmMgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGVzdCBmYWxsYmFjayBzdHJhdGVneSBvbiBjb21wb25lbnQgbW91bnRcbiAgICAgICAgY29uc3QgZmFsbGJhY2tUZXN0ID0gYXdhaXQgdGVzdEZhbGxiYWNrU3RyYXRlZ3koKTtcbiAgICAgICAgbG9nZ2VyLmluZm8oJ01DUCBzZXJ2ZXIgZmFsbGJhY2sgc3RyYXRlZ3kgdGVzdCBjb21wbGV0ZWQ6Jywge1xuICAgICAgICAgIG92ZXJhbGxSZWxpYWJpbGl0eTogZmFsbGJhY2tUZXN0Lm92ZXJhbGxSZWxpYWJpbGl0eSxcbiAgICAgICAgICBhc3Ryb2xvZ2ljYWw6IGZhbGxiYWNrVGVzdC5hc3Ryb2xvZ2ljYWwuc291cmNlLFxuICAgICAgICAgIG51dHJpdGlvbmFsOiBmYWxsYmFja1Rlc3QubnV0cml0aW9uYWwuc291cmNlLFxuICAgICAgICAgIHJlY2lwZXM6IGZhbGxiYWNrVGVzdC5yZWNpcGVzLnNvdXJjZVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBNb25pdG9yIHNlcnZlciBzdGF0dXNcbiAgICAgICAgY29uc3Qgc2VydmVyU3RhdHVzID0gZ2V0U2VydmVyU3RhdHVzKCk7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnTUNQIHNlcnZlciBzdGF0dXM6Jywgc2VydmVyU3RhdHVzKTtcblxuICAgICAgICAvLyBUZXN0IGluZGl2aWR1YWwgQVBJIGludGVncmF0aW9ucyBpZiBuZWVkZWRcbiAgICAgICAgaWYgKHNlbGVjdGVkSW5ncmVkaWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnN0IG51dHJpdGlvbmFsRGF0YSA9IGF3YWl0IGdldE51dHJpdGlvbmFsRGF0YShzZWxlY3RlZEluZ3JlZGllbnRzWzBdKTtcbiAgICAgICAgICBpZiAobnV0cml0aW9uYWxEYXRhLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhgTnV0cml0aW9uYWwgZGF0YSBmZXRjaGVkIHZpYSAke251dHJpdGlvbmFsRGF0YS5zb3VyY2V9IGZvciAke3NlbGVjdGVkSW5ncmVkaWVudHNbMF19YCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGxvZ2dlci5lcnJvcignRXJyb3IgdGVzdGluZyBNQ1Agc2VydmVyIGludGVncmF0aW9uOicsIGVycm9yKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gVGVzdCBNQ1AgaW50ZWdyYXRpb24gb24gbW91bnQgYW5kIHdoZW4gaW5ncmVkaWVudHMgY2hhbmdlXG4gICAgdGVzdE1DUEludGVncmF0aW9uKCk7XG5cbiAgICAvLyBTZXQgdXAgcGVyaW9kaWMgc2VydmVyIHN0YXR1cyBtb25pdG9yaW5nXG4gICAgY29uc3Qgc3RhdHVzSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBjb25zdCBzZXJ2ZXJTdGF0dXMgPSBnZXRTZXJ2ZXJTdGF0dXMoKTtcbiAgICAgIGxvZ2dlci5kZWJ1ZygnTUNQIHNlcnZlciBzdGF0dXMgY2hlY2s6Jywgc2VydmVyU3RhdHVzKTtcbiAgICB9LCA1ICogNjAgKiAxMDAwKTsgLy8gRXZlcnkgNSBtaW51dGVzXG5cbiAgICByZXR1cm4gKCkgPT4gY2xlYXJJbnRlcnZhbChzdGF0dXNJbnRlcnZhbCk7XG4gIH0sIFt0ZXN0RmFsbGJhY2tTdHJhdGVneSwgZ2V0U2VydmVyU3RhdHVzLCBnZXROdXRyaXRpb25hbERhdGEsIHNlbGVjdGVkSW5ncmVkaWVudHNdKTtcblxuICAvLyBBcHBseSBkZXZlbG9wbWVudCBleHBlcmllbmNlIG9wdGltaXphdGlvbnNcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBhcHBseURldk9wdGltaXphdGlvbnMgPSBhc3luYyAoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBVcGRhdGUgZGV2ZWxvcG1lbnQgbWV0cmljcyB3aXRoIGN1cnJlbnQgcGVyZm9ybWFuY2UgZGF0YVxuICAgICAgICBjb25zdCBkZXZNZXRyaWNzID0ge1xuICAgICAgICAgIGNvbXBpbGF0aW9uVGltZTogcGVyZm9ybWFuY2VNZXRyaWNzLnJlbmRlclRpbWUgfHwgMCxcbiAgICAgICAgICBtZW1vcnlVc2FnZTogcGVyZm9ybWFuY2VNZXRyaWNzLm1lbW9yeVVzYWdlIHx8IDAsXG4gICAgICAgICAgYnVuZGxlU2l6ZTogMTUwICogMTAyNCwgLy8gRXN0aW1hdGVkIGJ1bmRsZSBzaXplXG4gICAgICAgICAgZXJyb3JDb3VudDogMCwgLy8gTm8gY29tcGlsYXRpb24gZXJyb3JzIGluIHJ1bnRpbWVcbiAgICAgICAgICB3YXJuaW5nQ291bnQ6IDAsXG4gICAgICAgICAgaG90UmVsb2FkVGltZTogMFxuICAgICAgICB9O1xuXG4gICAgICAgIHVwZGF0ZURldk1ldHJpY3MoZGV2TWV0cmljcyk7XG5cbiAgICAgICAgLy8gR2V0IGRldmVsb3BtZW50IG9wdGltaXphdGlvbiByZWNvbW1lbmRhdGlvbnNcbiAgICAgICAgY29uc3QgZGV2UmVjb21tZW5kYXRpb25zID0gZ2V0RGV2T3B0aW1pemF0aW9uUmVjb21tZW5kYXRpb25zKCk7XG4gICAgICAgIGlmIChkZWJ1Z01vZGUpIHtcbiAgICAgICAgICBsb2dnZXIuZGVidWcoJ0RldmVsb3BtZW50IG9wdGltaXphdGlvbiByZWNvbW1lbmRhdGlvbnM6JywgZGV2UmVjb21tZW5kYXRpb25zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFwcGx5IGF1dG9tYXRpYyBvcHRpbWl6YXRpb25zIGluIGRldmVsb3BtZW50IG1vZGVcbiAgICAgICAgaWYgKGRlYnVnTW9kZSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgICAgIGNvbnN0IG9wdGltaXphdGlvblJlc3VsdHMgPSBhcHBseUF1dG9tYXRpY09wdGltaXphdGlvbnMoKTtcbiAgICAgICAgICBpZiAob3B0aW1pemF0aW9uUmVzdWx0cy5hcHBsaWVkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxvZ2dlci5pbmZvKCdBcHBsaWVkIGF1dG9tYXRpYyBkZXZlbG9wbWVudCBvcHRpbWl6YXRpb25zOicsIG9wdGltaXphdGlvblJlc3VsdHMuYXBwbGllZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChvcHRpbWl6YXRpb25SZXN1bHRzLmVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBsb2dnZXIud2FybignRGV2ZWxvcG1lbnQgb3B0aW1pemF0aW9uIGVycm9yczonLCBvcHRpbWl6YXRpb25SZXN1bHRzLmVycm9ycyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gTW9uaXRvciBkZXZlbG9wbWVudCBtZXRyaWNzXG4gICAgICAgIGNvbnN0IGN1cnJlbnREZXZNZXRyaWNzID0gZ2V0RGV2ZWxvcG1lbnRNZXRyaWNzKCk7XG4gICAgICAgIGlmIChkZWJ1Z01vZGUpIHtcbiAgICAgICAgICBsb2dnZXIuZGVidWcoJ0N1cnJlbnQgZGV2ZWxvcG1lbnQgbWV0cmljczonLCBjdXJyZW50RGV2TWV0cmljcyk7XG4gICAgICAgIH1cblxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgbG9nZ2VyLmVycm9yKCdFcnJvciBhcHBseWluZyBkZXZlbG9wbWVudCBleHBlcmllbmNlIG9wdGltaXphdGlvbnM6JywgZXJyb3IpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBBcHBseSBvcHRpbWl6YXRpb25zIG9uIG1vdW50IGFuZCB3aGVuIHBlcmZvcm1hbmNlIG1ldHJpY3MgY2hhbmdlXG4gICAgYXBwbHlEZXZPcHRpbWl6YXRpb25zKCk7XG5cbiAgICAvLyBTZXQgdXAgcGVyaW9kaWMgb3B0aW1pemF0aW9uIG1vbml0b3JpbmdcbiAgICBjb25zdCBkZXZPcHRpbWl6YXRpb25JbnRlcnZhbCA9IHNldEludGVydmFsKGFwcGx5RGV2T3B0aW1pemF0aW9ucywgNjAwMDApOyAvLyBFdmVyeSBtaW51dGVcblxuICAgIHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKGRldk9wdGltaXphdGlvbkludGVydmFsKTtcbiAgfSwgW3BlcmZvcm1hbmNlTWV0cmljcywgdXBkYXRlRGV2TWV0cmljcywgZ2V0RGV2T3B0aW1pemF0aW9uUmVjb21tZW5kYXRpb25zLCBhcHBseUF1dG9tYXRpY09wdGltaXphdGlvbnMsIGdldERldmVsb3BtZW50TWV0cmljcywgZGVidWdNb2RlXSk7XG5cbiAgLy8gTG9nIHF1YWxpdHkgbWV0cmljcyBhbmQgY2FtcGFpZ24gdHJpZ2dlcnMgZm9yIGRlYnVnZ2luZ1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChkZWJ1Z01vZGUpIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZygnUXVhbGl0eSBNZXRyaWNzOicsIHF1YWxpdHlNZXRyaWNzKTtcbiAgICAgIGxvZ2dlci5kZWJ1ZygnQWdlbnQgSG9vayBTdGF0ZTonLCBhZ2VudEhvb2tTdGF0ZSk7XG4gICAgICBcbiAgICAgIGlmIChwbGFuZXRhcnlWYWxpZGF0aW9uICYmICFwbGFuZXRhcnlWYWxpZGF0aW9uLmlzVmFsaWQpIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oJ1BsYW5ldGFyeSB2YWxpZGF0aW9uIGlzc3VlczonLCBwbGFuZXRhcnlWYWxpZGF0aW9uLmlzc3Vlcyk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGlmICh0eXBlc2NyaXB0VHJpZ2dlcj8udHJpZ2dlcmVkKSB7XG4gICAgICAgIGxvZ2dlci53YXJuKCdUeXBlU2NyaXB0IGNhbXBhaWduIHRyaWdnZXIgYWN0aXZlOicsIHR5cGVzY3JpcHRUcmlnZ2VyKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgaWYgKGJ1aWxkUXVhbGl0eSAmJiAhYnVpbGRRdWFsaXR5LmlzVmFsaWQpIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oJ0J1aWxkIHF1YWxpdHkgaXNzdWVzOicsIGJ1aWxkUXVhbGl0eS5pc3N1ZXMpO1xuICAgICAgfVxuXG4gICAgICAvLyBMb2cgTUNQIHNlcnZlciBzdGF0dXMgaW4gZGVidWcgbW9kZVxuICAgICAgY29uc3Qgc2VydmVyU3RhdHVzID0gZ2V0U2VydmVyU3RhdHVzKCk7XG4gICAgICBsb2dnZXIuZGVidWcoJ01DUCBTZXJ2ZXIgU3RhdHVzOicsIHNlcnZlclN0YXR1cyk7XG5cbiAgICAgIC8vIExvZyBkZXZlbG9wbWVudCBtZXRyaWNzIGluIGRlYnVnIG1vZGVcbiAgICAgIGNvbnN0IGRldk1ldHJpY3MgPSBnZXREZXZlbG9wbWVudE1ldHJpY3MoKTtcbiAgICAgIGxvZ2dlci5kZWJ1ZygnRGV2ZWxvcG1lbnQgRXhwZXJpZW5jZSBNZXRyaWNzOicsIGRldk1ldHJpY3MpO1xuICAgIH1cbiAgfSwgW2RlYnVnTW9kZSwgcXVhbGl0eU1ldHJpY3MsIGFnZW50SG9va1N0YXRlLCBwbGFuZXRhcnlWYWxpZGF0aW9uLCB0eXBlc2NyaXB0VHJpZ2dlciwgYnVpbGRRdWFsaXR5LCBnZXRTZXJ2ZXJTdGF0dXMsIGdldERldmVsb3BtZW50TWV0cmljc10pO1xuXG5cblxuICAvLyBTYXZlIHN0YXRlIGNoYW5nZXMgdXNpbmcgZW5oYW5jZWQgc3RhdGUgcHJlc2VydmF0aW9uXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2F2ZU5hdlN0YXRlKHtcbiAgICAgIHNlbGVjdGVkSW5ncmVkaWVudHMsXG4gICAgICBzZWxlY3RlZEN1aXNpbmUsXG4gICAgICBzZWxlY3RlZENvb2tpbmdNZXRob2RzLFxuICAgICAgY3VycmVudFJlY2lwZSxcbiAgICAgIGFjdGl2ZVNlY3Rpb24sXG4gICAgICBuYXZpZ2F0aW9uSGlzdG9yeSxcbiAgICAgIHNjcm9sbFBvc2l0aW9uOiB3aW5kb3cuc2Nyb2xsWVxuICAgIH0pO1xuICB9LCBbc2VsZWN0ZWRJbmdyZWRpZW50cywgc2VsZWN0ZWRDdWlzaW5lLCBzZWxlY3RlZENvb2tpbmdNZXRob2RzLCBjdXJyZW50UmVjaXBlLCBhY3RpdmVTZWN0aW9uLCBuYXZpZ2F0aW9uSGlzdG9yeSwgc2F2ZU5hdlN0YXRlXSk7XG5cbiAgLy8gQ29udGV4dCB1cGRhdGUgZnVuY3Rpb25zXG4gIGNvbnN0IHVwZGF0ZVNlbGVjdGVkSW5ncmVkaWVudHMgPSB1c2VDYWxsYmFjaygoaW5ncmVkaWVudHM6IHN0cmluZ1tdKSA9PiB7XG4gICAgc2V0U2VsZWN0ZWRJbmdyZWRpZW50cyhpbmdyZWRpZW50cyk7XG4gICAgbm90aWZ5Q29tcG9uZW50VXBkYXRlKCdpbmdyZWRpZW50cycsIHsgc2VsZWN0ZWRJbmdyZWRpZW50czogaW5ncmVkaWVudHMgfSk7XG4gICAgbG9nZ2VyLmRlYnVnKCdVcGRhdGVkIHNlbGVjdGVkIGluZ3JlZGllbnRzOicsIGluZ3JlZGllbnRzKTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IHVwZGF0ZVNlbGVjdGVkQ3Vpc2luZSA9IHVzZUNhbGxiYWNrKChjdWlzaW5lOiBzdHJpbmcgfCBudWxsKSA9PiB7XG4gICAgc2V0U2VsZWN0ZWRDdWlzaW5lKGN1aXNpbmUpO1xuICAgIG5vdGlmeUNvbXBvbmVudFVwZGF0ZSgnY3Vpc2luZScsIHsgc2VsZWN0ZWRDdWlzaW5lOiBjdWlzaW5lIH0pO1xuICAgIGxvZ2dlci5kZWJ1ZygnVXBkYXRlZCBzZWxlY3RlZCBjdWlzaW5lOicsIGN1aXNpbmUpO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgdXBkYXRlU2VsZWN0ZWRDb29raW5nTWV0aG9kcyA9IHVzZUNhbGxiYWNrKChtZXRob2RzOiBzdHJpbmdbXSkgPT4ge1xuICAgIHNldFNlbGVjdGVkQ29va2luZ01ldGhvZHMobWV0aG9kcyk7XG4gICAgbm90aWZ5Q29tcG9uZW50VXBkYXRlKCdjb29raW5nJywgeyBzZWxlY3RlZENvb2tpbmdNZXRob2RzOiBtZXRob2RzIH0pO1xuICAgIGxvZ2dlci5kZWJ1ZygnVXBkYXRlZCBzZWxlY3RlZCBjb29raW5nIG1ldGhvZHM6JywgbWV0aG9kcyk7XG4gIH0sIFtdKTtcblxuICBjb25zdCB1cGRhdGVDdXJyZW50UmVjaXBlID0gdXNlQ2FsbGJhY2soKHJlY2lwZTogYW55IHwgbnVsbCkgPT4ge1xuICAgIHNldEN1cnJlbnRSZWNpcGUocmVjaXBlKTtcbiAgICBub3RpZnlDb21wb25lbnRVcGRhdGUoJ3JlY2lwZScsIHsgY3VycmVudFJlY2lwZTogcmVjaXBlIH0pO1xuICAgIGxvZ2dlci5kZWJ1ZygnVXBkYXRlZCBjdXJyZW50IHJlY2lwZTonLCByZWNpcGUpO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgaGFuZGxlU2V0QWN0aXZlU2VjdGlvbiA9IHVzZUNhbGxiYWNrKChzZWN0aW9uOiBzdHJpbmcgfCBudWxsKSA9PiB7XG4gICAgc2V0QWN0aXZlU2VjdGlvbihzZWN0aW9uKTtcbiAgICBpZiAoc2VjdGlvbikge1xuICAgICAgc2V0TmF2aWdhdGlvbkhpc3RvcnkocHJldiA9PiBbLi4ucHJldi5zbGljZSgtOSksIHNlY3Rpb25dKTsgLy8gS2VlcCBsYXN0IDEwIHNlY3Rpb25zXG4gICAgfVxuICB9LCBbXSk7XG5cbiAgLy8gQ3Jvc3MtY29tcG9uZW50IGNvbW11bmljYXRpb25cbiAgY29uc3Qgbm90aWZ5Q29tcG9uZW50VXBkYXRlID0gdXNlQ2FsbGJhY2soKGNvbXBvbmVudElkOiBzdHJpbmcsIGRhdGE6IGFueSkgPT4ge1xuICAgIGNvbnN0IHN1YnNjcmliZXJzID0gdXBkYXRlU3Vic2NyaWJlcnNbY29tcG9uZW50SWRdIHx8IFtdO1xuICAgIHN1YnNjcmliZXJzLmZvckVhY2goY2FsbGJhY2sgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2FsbGJhY2soZGF0YSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBsb2dnZXIuZXJyb3IoYEVycm9yIGluIGNvbXBvbmVudCB1cGRhdGUgY2FsbGJhY2sgZm9yICR7Y29tcG9uZW50SWR9OmAsIGVycm9yKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSwgW3VwZGF0ZVN1YnNjcmliZXJzXSk7XG5cbiAgY29uc3Qgc3Vic2NyaWJlVG9VcGRhdGVzID0gdXNlQ2FsbGJhY2soKGNvbXBvbmVudElkOiBzdHJpbmcsIGNhbGxiYWNrOiAoZGF0YTogYW55KSA9PiB2b2lkKSA9PiB7XG4gICAgc2V0VXBkYXRlU3Vic2NyaWJlcnMocHJldiA9PiAoe1xuICAgICAgLi4ucHJldixcbiAgICAgIFtjb21wb25lbnRJZF06IFsuLi4ocHJldltjb21wb25lbnRJZF0gfHwgW10pLCBjYWxsYmFja11cbiAgICB9KSk7XG5cbiAgICAvLyBSZXR1cm4gdW5zdWJzY3JpYmUgZnVuY3Rpb25cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgc2V0VXBkYXRlU3Vic2NyaWJlcnMocHJldiA9PiAoe1xuICAgICAgICAuLi5wcmV2LFxuICAgICAgICBbY29tcG9uZW50SWRdOiAocHJldltjb21wb25lbnRJZF0gfHwgW10pLmZpbHRlcihjYiA9PiBjYiAhPT0gY2FsbGJhY2spXG4gICAgICB9KSk7XG4gICAgfTtcbiAgfSwgW10pO1xuXG4gIC8vIE1lbW9pemVkIGNvbnRleHQgdmFsdWUgdG8gcHJldmVudCB1bm5lY2Vzc2FyeSByZS1yZW5kZXJzXG4gIGNvbnN0IGNvbnRleHRWYWx1ZTogTWFpblBhZ2VDb250ZXh0VHlwZSA9IHVzZU1lbW8oKCkgPT4gKHtcbiAgICAvLyBTaGFyZWQgc3RhdGVcbiAgICBzZWxlY3RlZEluZ3JlZGllbnRzLFxuICAgIHNlbGVjdGVkQ3Vpc2luZSxcbiAgICBzZWxlY3RlZENvb2tpbmdNZXRob2RzLFxuICAgIGN1cnJlbnRSZWNpcGUsXG4gICAgYWN0aXZlU2VjdGlvbixcbiAgICBuYXZpZ2F0aW9uSGlzdG9yeSxcbiAgICBcbiAgICAvLyBVcGRhdGUgZnVuY3Rpb25zXG4gICAgdXBkYXRlU2VsZWN0ZWRJbmdyZWRpZW50cyxcbiAgICB1cGRhdGVTZWxlY3RlZEN1aXNpbmUsXG4gICAgdXBkYXRlU2VsZWN0ZWRDb29raW5nTWV0aG9kcyxcbiAgICB1cGRhdGVDdXJyZW50UmVjaXBlLFxuICAgIHNldEFjdGl2ZVNlY3Rpb246IGhhbmRsZVNldEFjdGl2ZVNlY3Rpb24sXG4gICAgXG4gICAgLy8gQ3Jvc3MtY29tcG9uZW50IGNvbW11bmljYXRpb25cbiAgICBub3RpZnlDb21wb25lbnRVcGRhdGUsXG4gICAgc3Vic2NyaWJlVG9VcGRhdGVzXG4gIH0pLCBbXG4gICAgc2VsZWN0ZWRJbmdyZWRpZW50cyxcbiAgICBzZWxlY3RlZEN1aXNpbmUsXG4gICAgc2VsZWN0ZWRDb29raW5nTWV0aG9kcyxcbiAgICBjdXJyZW50UmVjaXBlLFxuICAgIGFjdGl2ZVNlY3Rpb24sXG4gICAgbmF2aWdhdGlvbkhpc3RvcnksXG4gICAgdXBkYXRlU2VsZWN0ZWRJbmdyZWRpZW50cyxcbiAgICB1cGRhdGVTZWxlY3RlZEN1aXNpbmUsXG4gICAgdXBkYXRlU2VsZWN0ZWRDb29raW5nTWV0aG9kcyxcbiAgICB1cGRhdGVDdXJyZW50UmVjaXBlLFxuICAgIGhhbmRsZVNldEFjdGl2ZVNlY3Rpb24sXG4gICAgbm90aWZ5Q29tcG9uZW50VXBkYXRlLFxuICAgIHN1YnNjcmliZVRvVXBkYXRlc1xuICBdKTtcblxuICAvLyBIYW5kbGUgc2VjdGlvbiBuYXZpZ2F0aW9uIHdpdGggZW5oYW5jZWQgY29udGV4dCBwcmVzZXJ2YXRpb24gYW5kIHNtb290aCB0cmFuc2l0aW9uc1xuICBjb25zdCBoYW5kbGVTZWN0aW9uTmF2aWdhdGUgPSB1c2VDYWxsYmFjaygoc2VjdGlvbklkOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc2VjdGlvbklkKTtcbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgLy8gQWRkIHNtb290aCB0cmFuc2l0aW9uIGVmZmVjdFxuICAgICAgZWxlbWVudC5zdHlsZS50cmFuc2l0aW9uID0gJ2FsbCAwLjNzIGVhc2UtaW4tb3V0JztcbiAgICAgIGVsZW1lbnQuc2Nyb2xsSW50b1ZpZXcoeyBiZWhhdmlvcjogJ3Ntb290aCcsIGJsb2NrOiAnc3RhcnQnIH0pO1xuICAgICAgXG4gICAgICAvLyBVcGRhdGUgYWN0aXZlIHNlY3Rpb24gYW5kIG5hdmlnYXRpb24gaGlzdG9yeVxuICAgICAgaGFuZGxlU2V0QWN0aXZlU2VjdGlvbihzZWN0aW9uSWQpO1xuICAgICAgb25TZWN0aW9uTmF2aWdhdGU/LihzZWN0aW9uSWQpO1xuICAgICAgXG4gICAgICAvLyBTYXZlIG5hdmlnYXRpb24gc3RhdGUgdXNpbmcgZW5oYW5jZWQgcHJlc2VydmF0aW9uIHN5c3RlbVxuICAgICAgc2F2ZU5hdlN0YXRlKHtcbiAgICAgICAgc2VsZWN0ZWRJbmdyZWRpZW50cyxcbiAgICAgICAgc2VsZWN0ZWRDdWlzaW5lLFxuICAgICAgICBzZWxlY3RlZENvb2tpbmdNZXRob2RzLFxuICAgICAgICBjdXJyZW50UmVjaXBlLFxuICAgICAgICBhY3RpdmVTZWN0aW9uOiBzZWN0aW9uSWQsXG4gICAgICAgIG5hdmlnYXRpb25IaXN0b3J5OiBbLi4ubmF2aWdhdGlvbkhpc3RvcnksIHNlY3Rpb25JZF0uc2xpY2UoLTEwKSwgLy8gS2VlcCBsYXN0IDEwXG4gICAgICAgIHNjcm9sbFBvc2l0aW9uOiB3aW5kb3cuc2Nyb2xsWVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIC8vIEFkZCB2aXN1YWwgZmVlZGJhY2sgZm9yIG5hdmlnYXRpb25cbiAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaGlnaGxpZ2h0LXNlY3Rpb24nKTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2hpZ2hsaWdodC1zZWN0aW9uJyk7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUudHJhbnNpdGlvbiA9ICcnO1xuICAgICAgfSwgMTAwMCk7XG4gICAgfVxuICB9LCBbb25TZWN0aW9uTmF2aWdhdGUsIGhhbmRsZVNldEFjdGl2ZVNlY3Rpb24sIG5hdmlnYXRpb25IaXN0b3J5LCBzYXZlTmF2U3RhdGUsIHNlbGVjdGVkSW5ncmVkaWVudHMsIHNlbGVjdGVkQ3Vpc2luZSwgc2VsZWN0ZWRDb29raW5nTWV0aG9kcywgY3VycmVudFJlY2lwZV0pO1xuXG4gIC8vIFVwZGF0ZSBzZWN0aW9uIGxvYWRpbmcgc3RhdGVcbiAgY29uc3QgdXBkYXRlU2VjdGlvblN0YXRlID0gdXNlQ2FsbGJhY2soKHNlY3Rpb25JZDogc3RyaW5nLCB1cGRhdGVzOiBQYXJ0aWFsPHsgbG9hZGluZzogYm9vbGVhbjsgZXJyb3I6IHN0cmluZyB8IG51bGwgfT4pID0+IHtcbiAgICBzZXRTZWN0aW9uU3RhdGVzKHByZXYgPT4gKHtcbiAgICAgIC4uLnByZXYsXG4gICAgICBbc2VjdGlvbklkXTogeyAuLi5wcmV2W3NlY3Rpb25JZF0sIC4uLnVwZGF0ZXMgfVxuICAgIH0pKTtcbiAgfSwgW10pO1xuXG4gIC8vIFNlY3Rpb24gZXJyb3IgYm91bmRhcnkgZmFsbGJhY2tcbiAgY29uc3QgU2VjdGlvbkVycm9yRmFsbGJhY2s6IFJlYWN0LkZDPHsgZXJyb3I6IEVycm9yOyBzZWN0aW9uSWQ6IHN0cmluZzsgb25SZXRyeTogKCkgPT4gdm9pZCB9PiA9ICh7IFxuICAgIGVycm9yLCBcbiAgICBzZWN0aW9uSWQsIFxuICAgIG9uUmV0cnkgXG4gIH0pID0+IChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImJnLXJlZC01MCBib3JkZXIgYm9yZGVyLXJlZC0yMDAgcm91bmRlZC1sZyBwLTYgdGV4dC1jZW50ZXJcIj5cbiAgICAgIDxoMyBjbGFzc05hbWU9XCJ0ZXh0LWxnIGZvbnQtc2VtaWJvbGQgdGV4dC1yZWQtODAwIG1iLTJcIj5cbiAgICAgICAgU2VjdGlvbiBFcnJvcjoge3NlY3Rpb25JZH1cbiAgICAgIDwvaDM+XG4gICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXJlZC02MDAgbWItNFwiPlxuICAgICAgICB7ZXJyb3IubWVzc2FnZSB8fCAnQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZCBpbiB0aGlzIHNlY3Rpb24uJ31cbiAgICAgIDwvcD5cbiAgICAgIDxidXR0b25cbiAgICAgICAgb25DbGljaz17b25SZXRyeX1cbiAgICAgICAgY2xhc3NOYW1lPVwiYmctcmVkLTYwMCB0ZXh0LXdoaXRlIHB4LTQgcHktMiByb3VuZGVkIGhvdmVyOmJnLXJlZC03MDAgdHJhbnNpdGlvbi1jb2xvcnNcIlxuICAgICAgPlxuICAgICAgICBSZXRyeSBTZWN0aW9uXG4gICAgICA8L2J1dHRvbj5cbiAgICA8L2Rpdj5cbiAgKTtcblxuICAvLyBTZWN0aW9uIHdyYXBwZXIgd2l0aCBlcnJvciBib3VuZGFyeVxuICBjb25zdCBTZWN0aW9uV3JhcHBlcjogUmVhY3QuRkM8e1xuICAgIGlkOiBzdHJpbmc7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlO1xuICAgIGNsYXNzTmFtZT86IHN0cmluZztcbiAgfT4gPSAoeyBpZCwgdGl0bGUsIGNoaWxkcmVuLCBjbGFzc05hbWUgPSAnJyB9KSA9PiB7XG4gICAgY29uc3QgW3JldHJ5S2V5LCBzZXRSZXRyeUtleV0gPSB1c2VTdGF0ZSgwKTtcbiAgICBcbiAgICBjb25zdCBoYW5kbGVSZXRyeSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgIHNldFJldHJ5S2V5KHByZXYgPT4gcHJldiArIDEpO1xuICAgICAgdXBkYXRlU2VjdGlvblN0YXRlKGlkLCB7IGxvYWRpbmc6IGZhbHNlLCBlcnJvcjogbnVsbCB9KTtcbiAgICB9LCBbaWRdKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8c2VjdGlvbiBcbiAgICAgICAgaWQ9e2lkfSBcbiAgICAgICAgY2xhc3NOYW1lPXtgYmctd2hpdGUgcm91bmRlZC1sZyBzaGFkb3ctbWQgcC02IHNjcm9sbC1tdC0yMCAke2NsYXNzTmFtZX1gfVxuICAgICAgPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktYmV0d2VlbiBtYi00XCI+XG4gICAgICAgICAgPGgyIGNsYXNzTmFtZT1cInRleHQtMnhsIGZvbnQtc2VtaWJvbGQgdGV4dC1ncmF5LTgwMFwiPnt0aXRsZX08L2gyPlxuICAgICAgICAgIHtzZWN0aW9uU3RhdGVzW2lkXS5sb2FkaW5nICYmIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgdGV4dC1ibHVlLTYwMFwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFuaW1hdGUtc3BpbiByb3VuZGVkLWZ1bGwgaC00IHctNCBib3JkZXItYi0yIGJvcmRlci1ibHVlLTYwMCBtci0yXCI+PC9kaXY+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQtc21cIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIFxuICAgICAgICA8RXJyb3JCb3VuZGFyeVxuICAgICAgICAgIGtleT17cmV0cnlLZXl9XG4gICAgICAgICAgZmFsbGJhY2s9eyhlcnJvcikgPT4gKFxuICAgICAgICAgICAgPFNlY3Rpb25FcnJvckZhbGxiYWNrIFxuICAgICAgICAgICAgICBlcnJvcj17ZXJyb3J9IFxuICAgICAgICAgICAgICBzZWN0aW9uSWQ9e2lkfSBcbiAgICAgICAgICAgICAgb25SZXRyeT17aGFuZGxlUmV0cnl9IFxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICA+XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L0Vycm9yQm91bmRhcnk+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxNYWluUGFnZUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2NvbnRleHRWYWx1ZX0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1pbi1oLXNjcmVlbiBiZy1ncmFkaWVudC10by1iIGZyb20taW5kaWdvLTUwIHZpYS1ibHVlLTUwIHRvLWdyYXktMTAwIHRleHQtZ3JheS04MDBcIj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyIG14LWF1dG8gcHgtNCBweS04XCI+XG4gICAgICAgIHsvKiBIZWFkZXIgU2VjdGlvbiAqL31cbiAgICAgICAgPGhlYWRlciBjbGFzc05hbWU9XCJtYi04IHRleHQtY2VudGVyXCI+XG4gICAgICAgICAgPGgxIGNsYXNzTmFtZT1cInRleHQtM3hsIG1kOnRleHQtNHhsIGZvbnQtYm9sZCBtYi0yIHRleHQtaW5kaWdvLTkwMFwiPlxuICAgICAgICAgICAgV2hhdCB0byBFYXQgTmV4dFxuICAgICAgICAgIDwvaDE+XG4gICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1pbmRpZ28tNjAwIG1iLTRcIj5cbiAgICAgICAgICAgIEZvb2QgcmVjb21tZW5kYXRpb25zIGJhc2VkIG9uIHRoZSBjdXJyZW50IGNlbGVzdGlhbCBlbmVyZ2llc1xuICAgICAgICAgIDwvcD5cbiAgICAgICAgICBcbiAgICAgICAgICB7LyogTG9hZGluZyBTdGF0dXMgSW5kaWNhdG9yICovfVxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5saW5lLWJsb2NrIGJnLXdoaXRlIHB4LTQgcHktMiByb3VuZGVkLWxnIHNoYWRvdy1zbVwiPlxuICAgICAgICAgICAge2xvYWRpbmcgPyAoXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFuaW1hdGUtc3BpbiByb3VuZGVkLWZ1bGwgaC00IHctNCBib3JkZXItYi0yIGJvcmRlci1pbmRpZ28tNjAwIG1yLTJcIj48L2Rpdj5cbiAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXNtIHRleHQtZ3JheS02MDBcIj5Mb2FkaW5nIGFzdHJvbG9naWNhbCBkYXRhLi4uPC9wPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInctMiBoLTIgYmctZ3JlZW4tNTAwIHJvdW5kZWQtZnVsbCBtci0yXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1zbSB0ZXh0LWdyYXktNjAwXCI+XG4gICAgICAgICAgICAgICAgICBDb25uZWN0ZWQg4oCiIHtpc0RheXRpbWUgPyAnRGF5JyA6ICdOaWdodCd9IOKAoiB7c3RhdGUuYXN0cm9sb2dpY2FsU3RhdGUuc3VuU2lnbiB8fCAnTG9hZGluZy4uLid9XG4gICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvaGVhZGVyPlxuICAgICAgICBcbiAgICAgICAgey8qIFN0aWNreSBOYXZpZ2F0aW9uIHdpdGggSnVtcCBMaW5rcyAqL31cbiAgICAgICAgPG5hdiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtd3JhcCBqdXN0aWZ5LWNlbnRlciBnYXAtNCBtYi04IGJnLXdoaXRlIHJvdW5kZWQtbGcgc2hhZG93LW1kIHAtNCBzdGlja3kgdG9wLTIgei0xMFwiPlxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZVNlY3Rpb25OYXZpZ2F0ZSgnY3Vpc2luZScpfVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwidGV4dC1pbmRpZ28tNjAwIGhvdmVyOnRleHQtaW5kaWdvLTgwMCBmb250LW1lZGl1bSBweC0zIHB5LTEgcm91bmRlZCBob3ZlcjpiZy1pbmRpZ28tNTAgdHJhbnNpdGlvbi1jb2xvcnNcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIEN1aXNpbmUgUmVjb21tZW5kYXRpb25zXG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gaGFuZGxlU2VjdGlvbk5hdmlnYXRlKCdpbmdyZWRpZW50cycpfVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwidGV4dC1pbmRpZ28tNjAwIGhvdmVyOnRleHQtaW5kaWdvLTgwMCBmb250LW1lZGl1bSBweC0zIHB5LTEgcm91bmRlZCBob3ZlcjpiZy1pbmRpZ28tNTAgdHJhbnNpdGlvbi1jb2xvcnNcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIEluZ3JlZGllbnQgUmVjb21tZW5kYXRpb25zXG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gaGFuZGxlU2VjdGlvbk5hdmlnYXRlKCdjb29raW5nJyl9XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJ0ZXh0LWluZGlnby02MDAgaG92ZXI6dGV4dC1pbmRpZ28tODAwIGZvbnQtbWVkaXVtIHB4LTMgcHktMSByb3VuZGVkIGhvdmVyOmJnLWluZGlnby01MCB0cmFuc2l0aW9uLWNvbG9yc1wiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgQ29va2luZyBNZXRob2RzXG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gaGFuZGxlU2VjdGlvbk5hdmlnYXRlKCdyZWNpcGUnKX1cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cInRleHQtaW5kaWdvLTYwMCBob3Zlcjp0ZXh0LWluZGlnby04MDAgZm9udC1tZWRpdW0gcHgtMyBweS0xIHJvdW5kZWQgaG92ZXI6YmctaW5kaWdvLTUwIHRyYW5zaXRpb24tY29sb3JzXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICBSZWNpcGUgQnVpbGRlclxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L25hdj5cbiAgICAgICAgXG4gICAgICAgIHsvKiBNYWluIENvbnRlbnQgLSBTaW5nbGUgQ29sdW1uIFN0YWNrZWQgTGF5b3V0ICovfVxuICAgICAgICA8bWFpbiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtY29sIGdhcC04IG1heC13LTZ4bCBteC1hdXRvXCI+XG4gICAgICAgICAgey8qIEN1aXNpbmUgUmVjb21tZW5kZXIgU2VjdGlvbiAqL31cbiAgICAgICAgICA8U2VjdGlvbldyYXBwZXIgaWQ9XCJjdWlzaW5lXCIgdGl0bGU9XCJDdWlzaW5lIFJlY29tbWVuZGF0aW9uc1wiPlxuICAgICAgICAgICAgPEVycm9yQm91bmRhcnlcbiAgICAgICAgICAgICAgZmFsbGJhY2s9eyhlcnJvcikgPT4gKFxuICAgICAgICAgICAgICAgIDxDb21wb25lbnRGYWxsYmFja3MuQ3Vpc2luZVJlY29tbWVuZGVyIFxuICAgICAgICAgICAgICAgICAgb25SZXRyeT17KCkgPT4gd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpfVxuICAgICAgICAgICAgICAgICAgZXJyb3I9e2Vycm9yfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxTdXNwZW5zZSBmYWxsYmFjaz17PENvbXBvbmVudEZhbGxiYWNrcy5Mb2FkaW5nIGNvbXBvbmVudE5hbWU9XCJDdWlzaW5lIFJlY29tbWVuZGVyXCIgLz59PlxuICAgICAgICAgICAgICAgIDxDdWlzaW5lUmVjb21tZW5kZXIgLz5cbiAgICAgICAgICAgICAgPC9TdXNwZW5zZT5cbiAgICAgICAgICAgIDwvRXJyb3JCb3VuZGFyeT5cbiAgICAgICAgICA8L1NlY3Rpb25XcmFwcGVyPlxuICAgICAgICAgIFxuICAgICAgICAgIHsvKiBJbmdyZWRpZW50IFJlY29tbWVuZGVyIFNlY3Rpb24gKi99XG4gICAgICAgICAgPFNlY3Rpb25XcmFwcGVyIGlkPVwiaW5ncmVkaWVudHNcIiB0aXRsZT1cIkluZ3JlZGllbnQgUmVjb21tZW5kYXRpb25zXCI+XG4gICAgICAgICAgICA8RXJyb3JCb3VuZGFyeVxuICAgICAgICAgICAgICBmYWxsYmFjaz17KGVycm9yKSA9PiAoXG4gICAgICAgICAgICAgICAgPENvbXBvbmVudEZhbGxiYWNrcy5JbmdyZWRpZW50UmVjb21tZW5kZXIgXG4gICAgICAgICAgICAgICAgICBvblJldHJ5PXsoKSA9PiB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCl9XG4gICAgICAgICAgICAgICAgICBlcnJvcj17ZXJyb3J9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPFN1c3BlbnNlIGZhbGxiYWNrPXs8Q29tcG9uZW50RmFsbGJhY2tzLkxvYWRpbmcgY29tcG9uZW50TmFtZT1cIkluZ3JlZGllbnQgUmVjb21tZW5kZXJcIiAvPn0+XG4gICAgICAgICAgICAgICAgPEluZ3JlZGllbnRSZWNvbW1lbmRlciBcbiAgICAgICAgICAgICAgICAgIGlzRnVsbFBhZ2VWZXJzaW9uPXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgIG1heERpc3BsYXllZD17OH1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L1N1c3BlbnNlPlxuICAgICAgICAgICAgPC9FcnJvckJvdW5kYXJ5PlxuICAgICAgICAgIDwvU2VjdGlvbldyYXBwZXI+XG4gICAgICAgICAgXG4gICAgICAgICAgey8qIENvb2tpbmcgTWV0aG9kcyBTZWN0aW9uICovfVxuICAgICAgICAgIDxTZWN0aW9uV3JhcHBlciBpZD1cImNvb2tpbmdcIiB0aXRsZT1cIkNvb2tpbmcgTWV0aG9kc1wiPlxuICAgICAgICAgICAgPEVycm9yQm91bmRhcnlcbiAgICAgICAgICAgICAgZmFsbGJhY2s9eyhlcnJvcikgPT4gKFxuICAgICAgICAgICAgICAgIDxDb21wb25lbnRGYWxsYmFja3MuQ29va2luZ01ldGhvZHMgXG4gICAgICAgICAgICAgICAgICBvblJldHJ5PXsoKSA9PiB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCl9XG4gICAgICAgICAgICAgICAgICBlcnJvcj17ZXJyb3J9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPFN1c3BlbnNlIGZhbGxiYWNrPXs8Q29tcG9uZW50RmFsbGJhY2tzLkxvYWRpbmcgY29tcG9uZW50TmFtZT1cIkNvb2tpbmcgTWV0aG9kc1wiIC8+fT5cbiAgICAgICAgICAgICAgICA8Q29va2luZ01ldGhvZHNTZWN0aW9uIFxuICAgICAgICAgICAgICAgICAgaXNNYWluUGFnZVZlcnNpb249e3RydWV9XG4gICAgICAgICAgICAgICAgICBtYXhEaXNwbGF5ZWQ9ezZ9XG4gICAgICAgICAgICAgICAgICBvblZpZXdNb3JlPXsoKSA9PiByb3V0ZXIucHVzaCgnL2Nvb2tpbmctbWV0aG9kcycpfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvU3VzcGVuc2U+XG4gICAgICAgICAgICA8L0Vycm9yQm91bmRhcnk+XG4gICAgICAgICAgPC9TZWN0aW9uV3JhcHBlcj5cbiAgICAgICAgICBcbiAgICAgICAgICB7LyogUmVjaXBlIEJ1aWxkZXIgU2VjdGlvbiAqL31cbiAgICAgICAgICA8U2VjdGlvbldyYXBwZXIgaWQ9XCJyZWNpcGVcIiB0aXRsZT1cIlJlY2lwZSBCdWlsZGVyXCI+XG4gICAgICAgICAgICA8RXJyb3JCb3VuZGFyeVxuICAgICAgICAgICAgICBmYWxsYmFjaz17KGVycm9yKSA9PiAoXG4gICAgICAgICAgICAgICAgPENvbXBvbmVudEZhbGxiYWNrcy5SZWNpcGVCdWlsZGVyIFxuICAgICAgICAgICAgICAgICAgb25SZXRyeT17KCkgPT4gd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpfVxuICAgICAgICAgICAgICAgICAgZXJyb3I9e2Vycm9yfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxTdXNwZW5zZSBmYWxsYmFjaz17PENvbXBvbmVudEZhbGxiYWNrcy5Mb2FkaW5nIGNvbXBvbmVudE5hbWU9XCJSZWNpcGUgQnVpbGRlclwiIC8+fT5cbiAgICAgICAgICAgICAgICA8UmVjaXBlQnVpbGRlclNpbXBsZSAvPlxuICAgICAgICAgICAgICA8L1N1c3BlbnNlPlxuICAgICAgICAgICAgPC9FcnJvckJvdW5kYXJ5PlxuICAgICAgICAgIDwvU2VjdGlvbldyYXBwZXI+XG4gICAgICAgICAgXG4gICAgICAgICAgey8qIEFkZGl0aW9uYWwgY2hpbGRyZW4gaWYgcHJvdmlkZWQgKi99XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L21haW4+XG4gICAgICAgIFxuICAgICAgICB7LyogRm9vdGVyICovfVxuICAgICAgICA8Zm9vdGVyIGNsYXNzTmFtZT1cIm10LTEyIHRleHQtY2VudGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJteC1hdXRvIG1iLTRcIiBzdHlsZT17eyBtYXhXaWR0aDogJzI1MHB4JyB9fT5cbiAgICAgICAgICAgIDxmb3JtIGFjdGlvbj1cImh0dHBzOi8vd3d3LnBheXBhbC5jb20vbmNwL3BheW1lbnQvU1ZONlEzNjhUS0tMU1wiIG1ldGhvZD1cInBvc3RcIiB0YXJnZXQ9XCJfYmxhbmtcIj5cbiAgICAgICAgICAgICAgPGlucHV0IFxuICAgICAgICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIiBcbiAgICAgICAgICAgICAgICB2YWx1ZT1cIkhFTFBcIiBcbiAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICAgIGJvcmRlcjogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAnMC4yNXJlbScsXG4gICAgICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgcGFkZGluZzogJzAgMnJlbScsXG4gICAgICAgICAgICAgICAgICBoZWlnaHQ6ICcyLjYyNXJlbScsXG4gICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiAnYm9sZCcsXG4gICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjRkZEMTQwJyxcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiAnXCJIZWx2ZXRpY2EgTmV1ZVwiLCBBcmlhbCwgc2Fucy1zZXJpZicsXG4gICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzFyZW0nLFxuICAgICAgICAgICAgICAgICAgbGluZUhlaWdodDogJzEuMjVyZW0nLFxuICAgICAgICAgICAgICAgICAgY3Vyc29yOiAncG9pbnRlcidcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Zvb3Rlcj5cbiAgICAgIDwvZGl2PlxuICAgICAgXG4gICAgICB7LyogRGVidWcgUGFuZWwgLSBGaXhlZCBCb3R0b20gUmlnaHQgKi99XG4gICAgICB7ZGVidWdNb2RlICYmIChcbiAgICAgICAgPFN1c3BlbnNlIGZhbGxiYWNrPXtudWxsfT5cbiAgICAgICAgICA8Q29uc29saWRhdGVkRGVidWdJbmZvIFxuICAgICAgICAgICAgcG9zaXRpb249XCJib3R0b20tcmlnaHRcIlxuICAgICAgICAgICAgY29sbGFwc2libGU9e3RydWV9XG4gICAgICAgICAgICBzaG93UGVyZm9ybWFuY2VNZXRyaWNzPXt0cnVlfVxuICAgICAgICAgICAgc2hvd0FzdHJvbG9naWNhbERhdGE9e3RydWV9XG4gICAgICAgICAgICBzaG93Q29tcG9uZW50U3RhdGVzPXt0cnVlfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvU3VzcGVuc2U+XG4gICAgICApfVxuICAgICAgXG4gICAgICB7LyogQ1NTIGZvciBzbW9vdGggbmF2aWdhdGlvbiB0cmFuc2l0aW9ucyAqL31cbiAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgLmhpZ2hsaWdodC1zZWN0aW9uIHtcbiAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEuMDIpO1xuICAgICAgICAgIGJveC1zaGFkb3c6IDAgMTBweCAyNXB4IHJnYmEoOTksIDEwMiwgMjQxLCAwLjE1KTtcbiAgICAgICAgICBib3JkZXI6IDJweCBzb2xpZCByZ2JhKDk5LCAxMDIsIDI0MSwgMC4zKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgc2VjdGlvbiB7XG4gICAgICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuM3MgZWFzZS1pbi1vdXQsIGJveC1zaGFkb3cgMC4zcyBlYXNlLWluLW91dCwgYm9yZGVyIDAuM3MgZWFzZS1pbi1vdXQ7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIG5hdiBidXR0b246aG92ZXIge1xuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMXB4KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgbmF2IGJ1dHRvbjphY3RpdmUge1xuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKTtcbiAgICAgICAgfVxuICAgICAgYH08L3N0eWxlPlxuICAgIDwvZGl2PlxuICAgIDwvTWFpblBhZ2VDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IE1haW5QYWdlTGF5b3V0OyJdLCJ2ZXJzaW9uIjozfQ==