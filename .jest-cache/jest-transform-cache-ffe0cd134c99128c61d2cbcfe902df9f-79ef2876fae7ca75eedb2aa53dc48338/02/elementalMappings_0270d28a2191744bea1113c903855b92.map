{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/elementalMappings.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/elementalMappings.ts"],"sourcesContent":["import { Element } from '@/types/celestial';\n\nexport interface ElementalProperties {\n  [key: string]: number;  // Element: strength (0-1)\n}\n\nexport const elements: Record<Element, ElementalProperties> = {\n  'Fire': {\n    heat: 1.0,\n    dryness: 0.8,\n    transformation: 0.7,\n    expansion: 0.6\n  },\n  'Water': {\n    cold: 0.9,\n    moisture: 1.0,\n    fluidity: 0.8,\n    dissolution: 0.7\n  },\n  'Air': {\n    movement: 0.9,\n    lightness: 1.0,\n    dispersion: 0.8,\n    communication: 0.7\n  },\n  'Earth': {\n    stability: 1.0,\n    density: 0.9,\n    nourishment: 0.8,\n    structure: 0.7\n  }\n};\n\nexport const elementalInteractions: Record<Element, Record<Element, number>> = {\n  'Fire': {\n    'Water': 0.7,  // good compatibility\n    'Earth': 0.7,  // good compatibility\n    'Air': 0.8,    // strengthens\n    'Fire': 1.0    // self - highest compatibility\n  },\n  'Water': {\n    'Fire': 0.7,   // good compatibility\n    'Earth': 0.8,  // strengthens\n    'Air': 0.7,    // good compatibility\n    'Water': 1.0   // self - highest compatibility\n  },\n  'Earth': {\n    'Fire': 0.7,   // good compatibility\n    'Water': 0.8,  // strengthens\n    'Air': 0.7,    // good compatibility\n    'Earth': 1.0   // self - highest compatibility\n  },\n  'Air': {\n    'Fire': 0.8,   // strengthens\n    'Water': 0.7,  // good compatibility\n    'Earth': 0.7,  // good compatibility\n    'Air': 1.0     // self - highest compatibility\n  }\n};\n\nexport const elementalFunctions = {\n  /**\n   * Calculate the elemental affinity between two sets of properties\n   */\n  calculateAffinity: (props1: ElementalProperties, props2: ElementalProperties): number => {\n    let affinity = 0;\n    let count = 0;\n\n    for (const [element1, value1] of Object.entries(props1)) {\n      for (const [element2, value2] of Object.entries(props2)) {\n        if (elementalInteractions[element1 as Element][element2 as Element]) {\n          affinity += value1 * value2 * elementalInteractions[element1 as Element][element2 as Element];\n          count++;\n        }\n      }\n    }\n\n    return count > 0 ? affinity / count : 0;\n  },\n\n  /**\n   * Get dominant element from properties\n   */\n  getDominantElement: (props: ElementalProperties): Element => {\n    return Object.entries(props).reduce((a, b) => \n      b[1] > a[1] ? b : a\n    )[0] as Element;\n  },\n\n  /**\n   * Check if elements are complementary\n   */\n  areComplementary: (element1: Element, element2: Element): boolean => {\n    return elementalInteractions[element1][element2] > 0.5;\n  },\n\n  /**\n   * Get element balance score\n   */\n  getBalanceScore: (props: ElementalProperties): number => {\n    const values = Object.values(props);\n    const average = values.reduce((a, b) => a + b, 0) / values.length;\n    const variance = values.reduce((a, b) => a + Math.pow(b - average, 2), 0) / values.length;\n    return 1 - Math.sqrt(variance);  // 1 is perfect balance, 0 is complete imbalance\n  },\n\n  /**\n   * Suggest complementary elements\n   */\n  suggestComplementaryElements: (props: ElementalProperties): Element[] => {\n    const dominant = elementalFunctions.getDominantElement(props);\n    return Object.keys(elementalInteractions).filter(element => \n      elementalInteractions[element as Element][dominant] > 0.5 &&\n      !(element in props)\n    ) as Element[];\n  }\n};\n\nexport const ELEMENT_COMBINATIONS = {\n  harmonious: [\n    ['Fire', 'Fire'],\n    ['Water', 'Water'],\n    ['Air', 'Air'],\n    ['Earth', 'Earth'],\n    ['Fire', 'Air'],\n    ['Water', 'Earth']\n  ]\n} as const;\n\nexport const ELEMENT_AFFINITIES = {\n  Fire: ['Fire', 'Air'],\n  Water: ['Water', 'Earth'],\n  Air: ['Air', 'Fire'],\n  Earth: ['Earth', 'Water']\n} as const;\n\nconst elementalMappings = {\n  elements,\n  elementalInteractions,\n  elementalFunctions\n};\n\nexport default elementalMappings;\n"],"version":3}