{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/utils/TestUtils.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/utils/TestUtils.ts"],"sourcesContent":["/**\n * Test Utilities for Enhanced Error Handling and Timeout Management\n *\n * Provides utilities for test suite optimization and stabilization\n * including proper error handling, timeout management, and result validation.\n */\n\nimport { execSync } from 'child_process';\n\nexport interface TestExecutionOptions {\n  timeout?: number;\n  retries?: number;\n  expectedErrors?: string[];\n  memoryLimit?: number;\n}\n\nexport interface TestResult {\n  success: boolean;\n  output?: string;\n  error?: Error;\n  executionTime: number;\n  memoryUsed: number;\n  retryCount: number;\n}\n\nexport class TestUtils {\n  private static readonly DEFAULT_TIMEOUT = 30000; // 30 seconds\n  private static readonly DEFAULT_RETRIES = 2;\n  private static readonly MEMORY_CHECK_INTERVAL = 100; // ms\n\n  /**\n   * Execute a command with enhanced error handling and timeout management\n   */\n  static async executeWithRetry(\n    command: string,\n    options: TestExecutionOptions = {}\n  ): Promise<TestResult> {\n    const {\n      timeout = this.DEFAULT_TIMEOUT,\n      retries = this.DEFAULT_RETRIES,\n      expectedErrors = [],\n      memoryLimit = 4096 * 1024 * 1024 // 4GB in bytes\n    } = options;\n\n    let lastError: Error | undefined;\n    let retryCount = 0;\n    const startTime = Date.now();\n    let peakMemoryUsage = 0;\n\n    // Start memory monitoring\n    const memoryMonitor = setInterval(() => {\n      const currentMemory = process.memoryUsage().heapUsed;\n      peakMemoryUsage = Math.max(peakMemoryUsage, currentMemory);\n\n      if (currentMemory > memoryLimit) {\n        console.warn(`Memory usage exceeded limit: ${currentMemory / 1024 / 1024}MB`);\n      }\n    }, this.MEMORY_CHECK_INTERVAL);\n\n    try {\n      for (let attempt = 0; attempt <= retries; attempt++) {\n        retryCount = attempt;\n\n        try {\n          const output = execSync(command, {\n            stdio: 'pipe',\n            timeout,\n            encoding: 'utf8',\n            env: { ...process.env, NODE_OPTIONS: '--max-old-space-size=4096' }\n          });\n\n          return {\n            success: true,\n            output,\n            executionTime: Date.now() - startTime,\n            memoryUsed: peakMemoryUsage,\n            retryCount\n          };\n        } catch (error) {\n          lastError = error as Error;\n\n          // Check if this is an expected error\n          const isExpectedError = expectedErrors.some(expectedError =>\n            lastError?.message.includes(expectedError)\n          );\n\n          if (isExpectedError) {\n            return {\n              success: true,\n              error: lastError,\n              executionTime: Date.now() - startTime,\n              memoryUsed: peakMemoryUsage,\n              retryCount\n            };\n          }\n\n          // If not the last attempt, wait before retrying\n          if (attempt < retries) {\n            await this.delay(1000 * (attempt + 1)); // Exponential backoff\n          }\n        }\n      }\n\n      return {\n        success: false,\n        error: lastError,\n        executionTime: Date.now() - startTime,\n        memoryUsed: peakMemoryUsage,\n        retryCount\n      };\n    } finally {\n      clearInterval(memoryMonitor);\n    }\n  }\n\n  /**\n   * Validate test results with comprehensive checking\n   */\n  static validateTestResult(\n    result: TestResult,\n    expectations: {\n      maxExecutionTime?: number;\n      maxMemoryUsage?: number;\n      shouldSucceed?: boolean;\n      expectedOutput?: string[];\n    }\n  ): { isValid: boolean; issues: string[] } {\n    const issues: string[] = [];\n\n    // Check execution time\n    if (expectations.maxExecutionTime && result.executionTime > expectations.maxExecutionTime) {\n      issues.push(`Execution time ${result.executionTime}ms exceeded limit ${expectations.maxExecutionTime}ms`);\n    }\n\n    // Check memory usage\n    if (expectations.maxMemoryUsage && result.memoryUsed > expectations.maxMemoryUsage) {\n      issues.push(`Memory usage ${result.memoryUsed / 1024 / 1024}MB exceeded limit ${expectations.maxMemoryUsage / 1024 / 1024}MB`);\n    }\n\n    // Check success expectation\n    if (expectations.shouldSucceed !== undefined && result.success !== expectations.shouldSucceed) {\n      issues.push(`Expected success: ${expectations.shouldSucceed}, got: ${result.success}`);\n    }\n\n    // Check expected output\n    if (expectations.expectedOutput && result.output) {\n      const missingOutput = expectations.expectedOutput.filter(expected =>\n        !result.output?.includes(expected)\n      );\n      if (missingOutput.length > 0) {\n        issues.push(`Missing expected output: ${missingOutput.join(', ')}`);\n      }\n    }\n\n    return {\n      isValid: issues.length === 0,\n      issues\n    };\n  }\n\n  /**\n   * Create a timeout-safe test wrapper\n   */\n  static withTimeout<T>(\n    testFunction: () => Promise<T>,\n    timeoutMs: number,\n    testName: string\n  ): Promise<T> {\n    return new Promise((resolve, reject) => {\n      const timeoutId = setTimeout(() => {\n        reject(new Error(`Test \"${testName}\" timed out after ${timeoutMs}ms`));\n      }, timeoutMs);\n\n      testFunction()\n        .then(result => {\n          clearTimeout(timeoutId);\n          resolve(result);\n        })\n        .catch(error => {\n          clearTimeout(timeoutId);\n          reject(error);\n        });\n    });\n  }\n\n  /**\n   * Monitor real-time test execution with proper cleanup\n   */\n  static async monitorRealTimeTest(\n    testFunction: () => Promise<void>,\n    options: {\n      maxDuration?: number;\n      memoryThreshold?: number;\n      cleanupFunction?: () => void;\n    } = {}\n  ): Promise<{ success: boolean; metrics: any; issues: string[] }> {\n    const {\n      maxDuration = 60000, // 1 minute\n      memoryThreshold = 2048 * 1024 * 1024, // 2GB\n      cleanupFunction\n    } = options;\n\n    const startTime = Date.now();\n    const metrics = {\n      startTime,\n      endTime: 0,\n      duration: 0,\n      peakMemory: 0,\n      averageMemory: 0,\n      memoryReadings: [] as number[]\n    };\n    const issues: string[] = [];\n\n    // Memory monitoring\n    const memoryMonitor = setInterval(() => {\n      const currentMemory = process.memoryUsage().heapUsed;\n      metrics.memoryReadings.push(currentMemory);\n      metrics.peakMemory = Math.max(metrics.peakMemory, currentMemory);\n\n      if (currentMemory > memoryThreshold) {\n        issues.push(`Memory threshold exceeded: ${currentMemory / 1024 / 1024}MB`);\n      }\n    }, 100);\n\n    // Duration monitoring\n    const durationMonitor = setTimeout(() => {\n      issues.push(`Test exceeded maximum duration: ${maxDuration}ms`);\n    }, maxDuration);\n\n    try {\n      await testFunction();\n\n      metrics.endTime = Date.now();\n      metrics.duration = metrics.endTime - metrics.startTime;\n      metrics.averageMemory = metrics.memoryReadings.reduce((a, b) => a + b, 0) / metrics.memoryReadings.length;\n\n      return {\n        success: issues.length === 0,\n        metrics,\n        issues\n      };\n    } catch (error) {\n      issues.push(`Test execution failed: ${error}`);\n      return {\n        success: false,\n        metrics,\n        issues\n      };\n    } finally {\n      clearInterval(memoryMonitor);\n      clearTimeout(durationMonitor);\n\n      if (cleanupFunction) {\n        try {\n          cleanupFunction();\n        } catch (cleanupError) {\n          issues.push(`Cleanup failed: ${cleanupError}`);\n        }\n      }\n    }\n  }\n\n  /**\n   * Validate test consistency across multiple runs\n   */\n  static async validateConsistency(\n    testFunction: () => Promise<any>,\n    runs: number = 3,\n    tolerancePercent: number = 20\n  ): Promise<{ isConsistent: boolean; results: any[]; variance: number }> {\n    const results: any[] = [];\n\n    for (let i = 0; i < runs; i++) {\n      try {\n        const result = await testFunction();\n        results.push(result);\n      } catch (error) {\n        results.push({ error: error.message });\n      }\n    }\n\n    // Calculate variance for numeric results\n    const numericResults = results.filter(r => typeof r === 'number');\n    let variance = 0;\n\n    if (numericResults.length > 1) {\n      const mean = numericResults.reduce((a, b) => a + b, 0) / numericResults.length;\n      const squaredDiffs = numericResults.map(x => Math.pow(x - mean, 2));\n      variance = Math.sqrt(squaredDiffs.reduce((a, b) => a + b, 0) / squaredDiffs.length);\n      variance = (variance / mean) * 100; // Convert to percentage\n    }\n\n    return {\n      isConsistent: variance <= tolerancePercent,\n      results,\n      variance\n    };\n  }\n\n  /**\n   * Utility function for delays\n   */\n  private static delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Clean up test resources and force garbage collection\n   */\n  static cleanupTestResources(): void {\n    // Force garbage collection if available\n    if (global.gc) {\n      global.gc();\n    }\n\n    // Clear any global test caches\n    if ((global as any).__TEST_CACHE__) {\n      (global as any).__TEST_CACHE__.clear();\n    }\n\n    // Reset process memory warnings\n    process.removeAllListeners('warning');\n  }\n\n  /**\n   * Create a test isolation wrapper\n   */\n  static isolateTest<T>(\n    testFunction: () => Promise<T>,\n    testName: string\n  ): () => Promise<T> {\n    return async () => {\n      const initialMemory = process.memoryUsage().heapUsed;\n\n      try {\n        const result = await testFunction();\n        return result;\n      } finally {\n        // Cleanup after test\n        this.cleanupTestResources();\n\n        const finalMemory = process.memoryUsage().heapUsed;\n        const memoryDiff = finalMemory - initialMemory;\n\n        if (memoryDiff > 100 * 1024 * 1024) { // 100MB threshold\n          console.warn(`Test \"${testName}\" used ${memoryDiff / 1024 / 1024}MB of memory`);\n        }\n      }\n    };\n  }\n}\n\n/**\n * Test timeout constants for different test types\n */\nexport const TEST_TIMEOUTS = {\n  unit: 5000,        // 5 seconds for unit tests\n  integration: 15000, // 15 seconds for integration tests (reduced from 30s)\n  performance: 30000, // 30 seconds for performance tests\n  memory: 20000,     // 20 seconds for memory tests\n  realtime: 10000    // 10 seconds for real-time monitoring tests\n};\n\n/**\n * Memory limits for different test scenarios\n */\nexport const MEMORY_LIMITS = {\n  unit: 256 * 1024 * 1024,      // 256MB for unit tests\n  integration: 512 * 1024 * 1024, // 512MB for integration tests\n  performance: 1024 * 1024 * 1024, // 1GB for performance tests\n  stress: 2048 * 1024 * 1024     // 2GB for stress tests\n};\n"],"version":3}