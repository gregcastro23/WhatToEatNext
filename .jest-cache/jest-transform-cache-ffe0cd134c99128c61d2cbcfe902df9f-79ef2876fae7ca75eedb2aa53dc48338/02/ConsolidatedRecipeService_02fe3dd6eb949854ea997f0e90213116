048fc15b10056f3eae2ec3230fb4a179
"use strict";
// Removed local type and logger definitions to avoid conflicts with imports
/**
 * ConsolidatedRecipeService.ts
 *
 * A consolidated implementation of the RecipeServiceInterface that combines
 * functionality from LocalRecipeService, UnifiedRecipeService, and RecipeElementalService.
 *
 * This service serves as the primary entry point for all recipe-related operations
 * in the WhatToEatNext application.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.consolidatedRecipeService = exports.ConsolidatedRecipeService = void 0;
const recipes_1 = require("../data/recipes");
const logger_1 = require("../utils/logger");
const LocalRecipeService_1 = require("./LocalRecipeService");
const UnifiedRecipeService_1 = require("./UnifiedRecipeService");
const errorHandler_1 = require("@/utils/errorHandler");
const RecipeElementalService_1 = require("./RecipeElementalService");
// Missing unified system imports
const recipes_2 = require("@/data/recipes");
/**
 * Implementation of the RecipeServiceInterface that delegates to specialized services
 * and consolidates their functionality into a single, consistent API.
 */
class ConsolidatedRecipeService {
    /**
     * Private constructor to enforce singleton pattern
     */
    constructor() {
        this.recipeCache = new Map();
        // Private constructor
    }
    /**
     * Get singleton instance
     */
    static getInstance() {
        if (!ConsolidatedRecipeService.instance) {
            ConsolidatedRecipeService.instance = new ConsolidatedRecipeService();
        }
        return ConsolidatedRecipeService.instance;
    }
    /**
     * Get all available recipes
     */
    async getAllRecipes() {
        try {
            return await LocalRecipeService_1.LocalRecipeService.getAllRecipes();
        }
        catch (error) {
            errorHandler_1.ErrorHandler.log(error, {
                component: 'ConsolidatedRecipeService',
                context: { action: 'getAllRecipes' }
            });
            return [];
        }
    }
    /**
     * Search for recipes based on criteria
     */
    async searchRecipes(criteria, options = {}) {
        try {
            // Convert our criteria to UnifiedRecipeService format
            const unifiedResults = await UnifiedRecipeService_1.unifiedRecipeService.searchRecipes(criteria);
            // Extract just the Recipe objects from the results
            return (unifiedResults || []).map((result) => result.recipe || result);
        }
        catch (error) {
            errorHandler_1.ErrorHandler.log(error, {
                component: 'ConsolidatedRecipeService',
                context: { action: 'searchRecipes', criteria }
            });
            return [];
        }
    }
    /**
     * Get recipes by cuisine
     */
    async getRecipesByCuisine(cuisine) {
        try {
            return await LocalRecipeService_1.LocalRecipeService.getRecipesByCuisine(cuisine);
        }
        catch (error) {
            errorHandler_1.ErrorHandler.log(error, {
                component: 'ConsolidatedRecipeService',
                context: { action: 'getRecipesByCuisine', cuisine }
            });
            return [];
        }
    }
    /**
     * Get recipes by zodiac sign
     */
    async getRecipesByZodiac(currentZodiacSign) {
        try {
            const recipeData = await (0, recipes_2.getRecipesForZodiac)(currentZodiacSign);
            return recipeData;
        }
        catch (error) {
            errorHandler_1.ErrorHandler.log(error, {
                component: 'ConsolidatedRecipeService',
                context: { action: 'getRecipesByZodiac', currentZodiacSign }
            });
            return [];
        }
    }
    /**
     * Get recipes by season
     */
    async getRecipesBySeason(season) {
        try {
            const recipeData = await (0, recipes_2.getRecipesForSeason)(season);
            return recipeData;
        }
        catch (error) {
            errorHandler_1.ErrorHandler.log(error, {
                component: 'ConsolidatedRecipeService',
                context: { action: 'getRecipesBySeason', season }
            });
            return [];
        }
    }
    /**
     * Get recipes by lunar phase
     */
    async getRecipesByLunarPhase(lunarPhase) {
        try {
            const recipeData = await (0, recipes_2.getRecipesForLunarPhase)(lunarPhase);
            return recipeData;
        }
        catch (error) {
            errorHandler_1.ErrorHandler.log(error, {
                component: 'ConsolidatedRecipeService',
                context: { action: 'getRecipesByLunarPhase', lunarPhase }
            });
            return [];
        }
    }
    /**
     * Get recipes by meal type
     */
    async getRecipesByMealType(mealType) {
        try {
            return await LocalRecipeService_1.LocalRecipeService.getRecipesByMealType(mealType);
        }
        catch (error) {
            errorHandler_1.ErrorHandler.log(error, {
                component: 'ConsolidatedRecipeService',
                context: { action: 'getRecipesByMealType', mealType }
            });
            return [];
        }
    }
    /**
     * Get recipes that match current planetary alignments
     */
    async getRecipesForPlanetaryAlignment(planetaryInfluences, minMatchScore = 0.6) {
        try {
            return await (0, recipes_1.getRecipesForPlanetaryAlignment)(planetaryInfluences, minMatchScore);
        }
        catch (error) {
            errorHandler_1.ErrorHandler.log(error, {
                component: 'ConsolidatedRecipeService',
                context: { action: 'getRecipesForPlanetaryAlignment' }
            });
            return [];
        }
    }
    /**
     * Get recipes that match a given flavor profile
     */
    async getRecipesForFlavorProfile(flavorProfile, minMatchScore = 0.7) {
        try {
            return await (0, recipes_1.getRecipesForFlavorProfile)(flavorProfile, minMatchScore);
        }
        catch (error) {
            errorHandler_1.ErrorHandler.log(error, {
                component: 'ConsolidatedRecipeService',
                context: { action: 'getRecipesForFlavorProfile' }
            });
            return [];
        }
    }
    /**
     * Get best recipe matches based on multiple criteria
     */
    async getBestRecipeMatches(criteria, limit = 10) {
        try {
            return await (0, recipes_1.getBestRecipeMatches)(criteria, limit);
        }
        catch (error) {
            errorHandler_1.ErrorHandler.log(error, {
                component: 'ConsolidatedRecipeService',
                context: { action: 'getBestRecipeMatches', criteria }
            });
            return [];
        }
    }
    /**
     * Generate a recipe based on criteria
     */
    async generateRecipe(criteria) {
        try {
            // Apply surgical type casting with variable extraction
            const serviceData = UnifiedRecipeService_1.unifiedRecipeService;
            const generateRecipeMethod = serviceData === null || serviceData === void 0 ? void 0 : serviceData.generateRecipe;
            const unifiedResult = generateRecipeMethod ? await generateRecipeMethod(criteria) : null;
            return (unifiedResult === null || unifiedResult === void 0 ? void 0 : unifiedResult.recipe) || null;
        }
        catch (error) {
            errorHandler_1.ErrorHandler.log(error, {
                component: 'ConsolidatedRecipeService',
                context: { action: 'generateRecipe', criteria }
            });
            throw error;
        }
    }
    /**
     * Generate a fusion recipe combining multiple cuisines
     */
    async generateFusionRecipe(cuisines, criteria) {
        try {
            // Apply surgical type casting with variable extraction
            const serviceData = UnifiedRecipeService_1.unifiedRecipeService;
            const generateFusionRecipeMethod = serviceData === null || serviceData === void 0 ? void 0 : serviceData.generateFusionRecipe;
            const unifiedResult = generateFusionRecipeMethod ? await generateFusionRecipeMethod(cuisines, criteria) : null;
            return (unifiedResult === null || unifiedResult === void 0 ? void 0 : unifiedResult.recipe) || null;
        }
        catch (error) {
            errorHandler_1.ErrorHandler.log(error, {
                component: 'ConsolidatedRecipeService',
                context: { action: 'generateFusionRecipe', cuisines, criteria }
            });
            throw error;
        }
    }
    /**
     * Adapt a recipe for the current season
     */
    async adaptRecipeForSeason(recipe, season) {
        try {
            // Apply surgical type casting with variable extraction
            const serviceData = UnifiedRecipeService_1.unifiedRecipeService;
            const adaptRecipeMethod = serviceData === null || serviceData === void 0 ? void 0 : serviceData.adaptRecipeForCurrentSeason;
            const unifiedResult = adaptRecipeMethod ? await adaptRecipeMethod(recipe) : null;
            return (unifiedResult === null || unifiedResult === void 0 ? void 0 : unifiedResult.recipe) || recipe;
        }
        catch (error) {
            errorHandler_1.ErrorHandler.log(error, {
                component: 'ConsolidatedRecipeService',
                context: { action: 'adaptRecipeForSeason', recipe, season }
            });
            return recipe; // Return original recipe on error
        }
    }
    /**
     * Calculate the elemental properties of a recipe
     */
    calculateElementalProperties(recipe) {
        try {
            return RecipeElementalService_1.recipeElementalService.deriveElementalProperties(recipe);
        }
        catch (error) {
            logger_1.logger.error('Error calculating elemental properties', error);
            // Return balanced properties on error
            return { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25
            };
        }
    }
    /**
     * Get the dominant element of a recipe
     */
    getDominantElement(recipe) {
        try {
            return RecipeElementalService_1.recipeElementalService.getDominantElement(recipe);
        }
        catch (error) {
            logger_1.logger.error('Error getting dominant element', error);
            // Return Earth as default
            return { element: 'Earth', value: 0.25 };
        }
    }
    /**
     * Calculate the similarity between two recipes based on their elemental properties
     */
    calculateSimilarity(recipe1, recipe2) {
        var _a, _b;
        try {
            const elementalProps1 = (_a = RecipeElementalService_1.recipeElementalService.standardizeRecipe(recipe1)) === null || _a === void 0 ? void 0 : _a.elementalState;
            const elementalProps2 = (_b = RecipeElementalService_1.recipeElementalService.standardizeRecipe(recipe2)) === null || _b === void 0 ? void 0 : _b.elementalState;
            return RecipeElementalService_1.recipeElementalService.calculateSimilarity(elementalProps1, elementalProps2);
        }
        catch (error) {
            logger_1.logger.error('Error calculating recipe similarity', error);
            return 0.5; // Return neutral similarity on error
        }
    }
    /**
     * Clear the recipe cache
     */
    clearCache() {
        this.recipeCache.clear();
        LocalRecipeService_1.LocalRecipeService.clearCache();
    }
}
exports.ConsolidatedRecipeService = ConsolidatedRecipeService;
// Export singleton instance
exports.consolidatedRecipeService = ConsolidatedRecipeService.getInstance();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,