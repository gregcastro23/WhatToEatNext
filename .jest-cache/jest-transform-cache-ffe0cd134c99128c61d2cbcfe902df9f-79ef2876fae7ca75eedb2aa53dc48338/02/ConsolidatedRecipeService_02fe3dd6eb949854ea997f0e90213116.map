{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/ConsolidatedRecipeService.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/ConsolidatedRecipeService.ts"],"sourcesContent":["// Removed local type and logger definitions to avoid conflicts with imports\n/**\n * ConsolidatedRecipeService.ts\n * \n * A consolidated implementation of the RecipeServiceInterface that combines\n * functionality from LocalRecipeService, UnifiedRecipeService, and RecipeElementalService.\n * \n * This service serves as the primary entry point for all recipe-related operations\n * in the WhatToEatNext application.\n */\n\n\nimport {\n         getRecipesForPlanetaryAlignment, \n         getRecipesForFlavorProfile, \n         getBestRecipeMatches \n} from '../data/recipes';\nimport { logger } from '../utils/logger';\n\n\nimport type { \n  Element, \n  Season, \n  ZodiacSign, \n  LunarPhase, \n  PlanetName \n, ElementalProperties } from '@/types/alchemy';\n\n// Missing service and interface imports\nimport type { Recipe } from '@/types/recipe';\nimport type { RecipeServiceInterface ,\n  RecipeSearchCriteria, \n  RecipeRecommendationOptions \n} from './interfaces/RecipeServiceInterface';\nimport { LocalRecipeService } from './LocalRecipeService';\nimport { UnifiedRecipeService , unifiedRecipeService } from './UnifiedRecipeService';\nimport { ErrorHandler } from '@/utils/errorHandler';\nimport { recipeElementalService } from './RecipeElementalService';\n\n// Missing unified system imports\nimport { \n  getRecipesForZodiac,\n  getRecipesForSeason, \n  getRecipesForLunarPhase,\n  getAllRecipes\n} from '@/data/recipes';\n\n\n\n/**\n * Implementation of the RecipeServiceInterface that delegates to specialized services\n * and consolidates their functionality into a single, consistent API.\n */\nexport class ConsolidatedRecipeService {\n  private static instance: ConsolidatedRecipeService;\n  private recipeCache: Map<string, Recipe[]> = new Map();\n  \n  /**\n   * Private constructor to enforce singleton pattern\n   */\n  private constructor() {\n    // Private constructor\n  }\n  \n  /**\n   * Get singleton instance\n   */\n  public static getInstance(): ConsolidatedRecipeService {\n    if (!ConsolidatedRecipeService.instance) {\n      ConsolidatedRecipeService.instance = new ConsolidatedRecipeService();\n    }\n    return ConsolidatedRecipeService.instance;\n  }\n  \n  /**\n   * Get all available recipes\n   */\n  async getAllRecipes(): Promise<Recipe[]> {\n    try {\n      return await LocalRecipeService.getAllRecipes();\n    } catch (error) {\n      ErrorHandler.log((error as unknown as Error), {\n        component: 'ConsolidatedRecipeService',\n        context: { action: 'getAllRecipes' }\n      });\n      return [];\n    }\n  }\n  \n  /**\n   * Search for recipes based on criteria\n   */\n  async searchRecipes(\n    criteria: RecipeSearchCriteria, \n    options: RecipeRecommendationOptions = {}\n  ): Promise<Recipe[]> {\n    try {\n      // Convert our criteria to UnifiedRecipeService format\n      const unifiedResults = await (unifiedRecipeService as Record<string, unknown>).searchRecipes(criteria as Record<string, unknown>);\n      \n      // Extract just the Recipe objects from the results\n      return (unifiedResults || []).map((result: unknown) => result.recipe || result) as unknown as Recipe[];\n    } catch (error) {\n      ErrorHandler.log((error as unknown as Error), {\n        component: 'ConsolidatedRecipeService',\n        context: { action: 'searchRecipes', criteria }\n      });\n      return [];\n    }\n  }\n  \n  /**\n   * Get recipes by cuisine\n   */\n  async getRecipesByCuisine(cuisine: string): Promise<Recipe[]> {\n    try {\n      return await LocalRecipeService.getRecipesByCuisine(cuisine);\n    } catch (error) {\n      ErrorHandler.log((error as unknown as Error), {\n        component: 'ConsolidatedRecipeService',\n        context: { action: 'getRecipesByCuisine', cuisine }\n      });\n      return [];\n    }\n  }\n  \n  /**\n   * Get recipes by zodiac sign\n   */\n  async getRecipesByZodiac(currentZodiacSign: ZodiacSign): Promise<Recipe[]> {\n    try {\n      const recipeData = await getRecipesForZodiac(currentZodiacSign);\n      return recipeData as Recipe[];\n    } catch (error) {\n      ErrorHandler.log((error as unknown as Error), {\n        component: 'ConsolidatedRecipeService',\n        context: { action: 'getRecipesByZodiac', currentZodiacSign }\n      });\n      return [];\n    }\n  }\n  \n  /**\n   * Get recipes by season\n   */\n  async getRecipesBySeason(season: Season): Promise<Recipe[]> {\n    try {\n      const recipeData = await getRecipesForSeason(season);\n      return recipeData as Recipe[];\n    } catch (error) {\n      ErrorHandler.log((error as unknown as Error), {\n        component: 'ConsolidatedRecipeService',\n        context: { action: 'getRecipesBySeason', season }\n      });\n      return [];\n    }\n  }\n  \n  /**\n   * Get recipes by lunar phase\n   */\n  async getRecipesByLunarPhase(lunarPhase: LunarPhase): Promise<Recipe[]> {\n    try {\n      const recipeData = await getRecipesForLunarPhase(lunarPhase);\n      return recipeData as Recipe[];\n    } catch (error) {\n      ErrorHandler.log((error as unknown as Error), {\n        component: 'ConsolidatedRecipeService',\n        context: { action: 'getRecipesByLunarPhase', lunarPhase }\n      });\n      return [];\n    }\n  }\n  \n  /**\n   * Get recipes by meal type\n   */\n  async getRecipesByMealType(mealType: string): Promise<Recipe[]> {\n    try {\n      return await LocalRecipeService.getRecipesByMealType(mealType);\n    } catch (error) {\n      ErrorHandler.log((error as unknown as Error), {\n        component: 'ConsolidatedRecipeService',\n        context: { action: 'getRecipesByMealType', mealType }\n      });\n      return [];\n    }\n  }\n  \n  /**\n   * Get recipes that match current planetary alignments\n   */\n  async getRecipesForPlanetaryAlignment(\n    planetaryInfluences: { [key: string]: number },\n    minMatchScore: number = 0.6,\n  ): Promise<Recipe[]> {\n    try {\n      return await getRecipesForPlanetaryAlignment(planetaryInfluences, minMatchScore) as unknown as Recipe[];\n    } catch (error) {\n      ErrorHandler.log((error as unknown as Error), {\n        component: 'ConsolidatedRecipeService',\n        context: { action: 'getRecipesForPlanetaryAlignment' }\n      });\n      return [];\n    }\n  }\n  \n  /**\n   * Get recipes that match a given flavor profile\n   */\n  async getRecipesForFlavorProfile(\n    flavorProfile: { [key: string]: number },\n    minMatchScore: number = 0.7,\n  ): Promise<Recipe[]> {\n    try {\n      return await getRecipesForFlavorProfile(flavorProfile, minMatchScore) as unknown as Recipe[];\n    } catch (error) {\n      ErrorHandler.log((error as unknown as Error), {\n        component: 'ConsolidatedRecipeService',\n        context: { action: 'getRecipesForFlavorProfile' }\n      });\n      return [];\n    }\n  }\n  \n  /**\n   * Get best recipe matches based on multiple criteria\n   */\n  async getBestRecipeMatches(\n    criteria: {\n      cuisine?: string;\n      flavorProfile?: { [key: string]: number };\n      season?: Season;\n      zodiacSign?: ZodiacSign;\n      lunarPhase?: LunarPhase;\n      planetName?: PlanetName;\n      elementalFocus?: Element;\n      maxResults?: number;\n    },\n    limit: number = 10\n  ): Promise<Recipe[]> {\n    try {\n      return await getBestRecipeMatches(criteria, limit) as unknown as Recipe[];\n    } catch (error) {\n      ErrorHandler.log((error as unknown as Error), {\n        component: 'ConsolidatedRecipeService',\n        context: { action: 'getBestRecipeMatches', criteria }\n      });\n      return [];\n    }\n  }\n  \n  /**\n   * Generate a recipe based on criteria\n   */\n  async generateRecipe(criteria: RecipeSearchCriteria): Promise<Recipe> {\n    try {\n      // Apply surgical type casting with variable extraction\n      const serviceData = unifiedRecipeService as Record<string, unknown>;\n      const generateRecipeMethod = serviceData?.generateRecipe;\n      const unifiedResult = generateRecipeMethod ? await generateRecipeMethod(criteria) : null;\n      return unifiedResult?.recipe || null;\n    } catch (error) {\n      ErrorHandler.log((error as unknown as Error), {\n        component: 'ConsolidatedRecipeService',\n        context: { action: 'generateRecipe', criteria }\n      });\n      throw error;\n    }\n  }\n  \n  /**\n   * Generate a fusion recipe combining multiple cuisines\n   */\n  async generateFusionRecipe(\n    cuisines: string[],\n    criteria: RecipeSearchCriteria,\n  ): Promise<Recipe> {\n    try {\n      // Apply surgical type casting with variable extraction\n      const serviceData = unifiedRecipeService as Record<string, unknown>;\n      const generateFusionRecipeMethod = serviceData?.generateFusionRecipe;\n      const unifiedResult = generateFusionRecipeMethod ? await generateFusionRecipeMethod(cuisines, criteria) : null;\n      return unifiedResult?.recipe || null;\n    } catch (error) {\n      ErrorHandler.log((error as unknown as Error), {\n        component: 'ConsolidatedRecipeService',\n        context: { action: 'generateFusionRecipe', cuisines, criteria }\n      });\n      throw error;\n    }\n  }\n  \n  /**\n   * Adapt a recipe for the current season\n   */\n  async adaptRecipeForSeason(\n    recipe: Recipe,\n    season?: Season\n  ): Promise<Recipe> {\n    try {\n      // Apply surgical type casting with variable extraction\n      const serviceData = unifiedRecipeService as Record<string, unknown>;\n      const adaptRecipeMethod = serviceData?.adaptRecipeForCurrentSeason;\n      const unifiedResult = adaptRecipeMethod ? await adaptRecipeMethod(recipe) : null;\n      return unifiedResult?.recipe || recipe;\n    } catch (error) {\n      ErrorHandler.log((error as unknown as Error), {\n        component: 'ConsolidatedRecipeService',\n        context: { action: 'adaptRecipeForSeason', recipe, season }\n      });\n      return recipe; // Return original recipe on error\n    }\n  }\n  \n  /**\n   * Calculate the elemental properties of a recipe\n   */\n  calculateElementalProperties(recipe: Partial<Recipe>): ElementalProperties {\n    try {\n      return recipeElementalService.deriveElementalProperties(recipe);\n    } catch (error) {\n      logger.error('Error calculating elemental properties', error);\n      // Return balanced properties on error\n      return { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25\n      };\n    }\n  }\n  \n  /**\n   * Get the dominant element of a recipe\n   */\n  getDominantElement(recipe: Recipe): { element: keyof ElementalProperties; value: number } {\n    try {\n      return recipeElementalService.getDominantElement(recipe);\n    } catch (error) {\n      logger.error('Error getting dominant element', error);\n      // Return Earth as default\n      return { element: 'Earth', value: 0.25 };\n    }\n  }\n  \n  /**\n   * Calculate the similarity between two recipes based on their elemental properties\n   */\n  calculateSimilarity(recipe1: Recipe, recipe2: Recipe): number {\n    try {\n      const elementalProps1 = recipeElementalService.standardizeRecipe(recipe1)?.elementalState;\n      const elementalProps2 = recipeElementalService.standardizeRecipe(recipe2)?.elementalState;\n      \n      return recipeElementalService.calculateSimilarity(\n        elementalProps1 as unknown as ElementalProperties, \n        elementalProps2 as unknown as ElementalProperties\n      );\n    } catch (error) {\n      logger.error('Error calculating recipe similarity', error);\n      return 0.5; // Return neutral similarity on error\n    }\n  }\n  \n  /**\n   * Clear the recipe cache\n   */\n  clearCache(): void {\n    this.recipeCache.clear();\n    LocalRecipeService.clearCache();\n  }\n}\n\n// Export singleton instance\n\nexport const consolidatedRecipeService = ConsolidatedRecipeService.getInstance();\n"],"version":3}