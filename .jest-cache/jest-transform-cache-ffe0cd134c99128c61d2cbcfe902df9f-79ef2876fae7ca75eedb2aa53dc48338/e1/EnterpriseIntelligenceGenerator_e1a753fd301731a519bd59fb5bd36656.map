{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/EnterpriseIntelligenceGenerator.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/EnterpriseIntelligenceGenerator.ts"],"sourcesContent":["/**\n * Enterprise Intelligence Generator\n * Perfect Codebase Campaign - Phase 3 Implementation\n *\n * Generates enterprise intelligence systems from unused exports,\n * transforming technical debt into active analytical capabilities.\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport {\n  UnusedExport,\n  TransformationCandidate,\n  FileAnalysis,\n} from './UnusedExportAnalyzer';\n\nexport interface IntelligenceSystemTemplate {\n  name: string;\n  description: string;\n  template: string;\n  capabilities: IntelligenceCapability[];\n  integrationPoints: IntegrationPoint[];\n}\n\nexport interface IntelligenceCapability {\n  name: string;\n  description: string;\n  implementation: string;\n  complexity: CapabilityComplexity;\n}\n\nexport interface IntegrationPoint {\n  target: string;\n  method: IntegrationMethod;\n  code: string;\n  priority: IntegrationPriority;\n}\n\nexport interface GenerationResult {\n  systemName: string;\n  filePath: string;\n  originalExport: UnusedExport;\n  generatedCode: string;\n  capabilities: IntelligenceCapability[];\n  integrationPoints: IntegrationPoint[];\n  estimatedValue: number;\n  complexity: GenerationComplexity;\n}\n\nexport interface GenerationSummary {\n  totalSystemsGenerated: number;\n  totalCapabilitiesAdded: number;\n  totalIntegrationPoints: number;\n  averageComplexity: number;\n  estimatedTotalValue: number;\n  generationsByCategory: Record<string, number>;\n}\n\nexport enum CapabilityComplexity {\n  BASIC = 'BASIC',\n  INTERMEDIATE = 'INTERMEDIATE',\n  ADVANCED = 'ADVANCED',\n  EXPERT = 'EXPERT',\n}\n\nexport enum IntegrationMethod {\n  DIRECT_IMPORT = 'DIRECT_IMPORT',\n  DEPENDENCY_INJECTION = 'DEPENDENCY_INJECTION',\n  EVENT_DRIVEN = 'EVENT_DRIVEN',\n  API_ENDPOINT = 'API_ENDPOINT',\n}\n\nexport enum IntegrationPriority {\n  IMMEDIATE = 'IMMEDIATE',\n  HIGH = 'HIGH',\n  MEDIUM = 'MEDIUM',\n  LOW = 'LOW',\n}\n\nexport enum GenerationComplexity {\n  SIMPLE = 'SIMPLE',\n  MODERATE = 'MODERATE',\n  COMPLEX = 'COMPLEX',\n  VERY_COMPLEX = 'VERY_COMPLEX',\n}\n\nexport class EnterpriseIntelligenceGenerator {\n  private readonly templates: Map<string, IntelligenceSystemTemplate>;\n  private readonly outputDirectory: string;\n\n  constructor(outputDirectory: string = 'src/intelligence') {\n    this.outputDirectory = outputDirectory;\n    this.templates = new Map();\n    this.initializeTemplates();\n  }\n\n  /**\n   * Generate intelligence systems from transformation candidates\n   */\n  async generateIntelligenceSystems(\n    fileAnalyses: FileAnalysis[]\n  ): Promise<GenerationResult[]> {\n    console.log('🧠 Starting enterprise intelligence generation...');\n\n    const results: GenerationResult[] = [];\n\n    for (const fileAnalysis of fileAnalyses) {\n      for (const candidate of fileAnalysis.transformationCandidates) {\n        try {\n          const result = await this.generateIntelligenceSystem(\n            candidate,\n            fileAnalysis.filePath\n          );\n          results.push(result);\n          console.log(`✅ Generated: ${result.systemName}`);\n        } catch (error) {\n          console.warn(\n            `⚠️  Failed to generate intelligence system for ${candidate.export.exportName}:`,\n            error\n          );\n        }\n      }\n    }\n\n    console.log(`🎉 Generated ${results.length} intelligence systems!`);\n    return results;\n  }\n\n  /**\n   * Generate a single intelligence system\n   */\n  private async generateIntelligenceSystem(\n    candidate: TransformationCandidate,\n    originalFilePath: string\n  ): Promise<GenerationResult> {\n    const template = this.selectTemplate(candidate);\n    const systemName = candidate.intelligenceSystemName;\n    const capabilities = this.generateCapabilities(candidate, template);\n    const integrationPoints = this.generateIntegrationPoints(\n      candidate,\n      originalFilePath\n    );\n    const generatedCode = this.generateCode(candidate, template, capabilities);\n    const estimatedValue = this.calculateEstimatedValue(\n      candidate,\n      capabilities\n    );\n    const complexity = this.assessGenerationComplexity(candidate, capabilities);\n\n    // Ensure output directory exists\n    await this.ensureOutputDirectory();\n\n    // Write the generated intelligence system\n    const outputPath = path.join(this.outputDirectory, `${systemName}.ts`);\n    await fs.promises.writeFile(outputPath, generatedCode);\n\n    return {\n      systemName,\n      filePath: outputPath,\n      originalExport: candidate.export,\n      generatedCode,\n      capabilities,\n      integrationPoints,\n      estimatedValue,\n      complexity,\n    };\n  }\n\n  /**\n   * Select appropriate template for the candidate\n   */\n  private selectTemplate(\n    candidate: TransformationCandidate\n  ): IntelligenceSystemTemplate {\n    const exportType = candidate.export.exportType;\n\n    switch (exportType) {\n      case 'function':\n        return (\n          this.templates.get('FUNCTION_INTELLIGENCE') ||\n          this.templates.get('DEFAULT')!\n        );\n      case 'class':\n        return (\n          this.templates.get('CLASS_INTELLIGENCE') ||\n          this.templates.get('DEFAULT')!\n        );\n      case 'interface':\n      case 'type':\n        return (\n          this.templates.get('TYPE_INTELLIGENCE') ||\n          this.templates.get('DEFAULT')!\n        );\n      case 'const':\n      case 'variable':\n        return (\n          this.templates.get('DATA_INTELLIGENCE') ||\n          this.templates.get('DEFAULT')!\n        );\n      default:\n        return this.templates.get('DEFAULT')!;\n    }\n  }\n\n  /**\n   * Generate capabilities for the intelligence system\n   */\n  private generateCapabilities(\n    candidate: TransformationCandidate,\n    template: IntelligenceSystemTemplate\n  ): IntelligenceCapability[] {\n    const baseCapabilities = [...template.capabilities];\n    const exportType = candidate.export.exportType;\n    const complexity = candidate.transformationComplexity;\n\n    // Add type-specific capabilities\n    switch (exportType) {\n      case 'function':\n        baseCapabilities.push({\n          name: 'analyzeFunction',\n          description: `Analyze the behavior and patterns of ${candidate.export.exportName}`,\n          implementation: this.generateFunctionAnalysisCode(candidate),\n          complexity: CapabilityComplexity.INTERMEDIATE,\n        });\n        break;\n\n      case 'class':\n        baseCapabilities.push({\n          name: 'analyzeClassStructure',\n          description: `Analyze the structure and methods of ${candidate.export.exportName}`,\n          implementation: this.generateClassAnalysisCode(candidate),\n          complexity: CapabilityComplexity.ADVANCED,\n        });\n        break;\n\n      case 'interface':\n      case 'type':\n        baseCapabilities.push({\n          name: 'analyzeTypeStructure',\n          description: `Analyze the type structure and relationships of ${candidate.export.exportName}`,\n          implementation: this.generateTypeAnalysisCode(candidate),\n          complexity: CapabilityComplexity.BASIC,\n        });\n        break;\n\n      case 'const':\n      case 'variable':\n        baseCapabilities.push({\n          name: 'analyzeDataPatterns',\n          description: `Analyze data patterns and usage of ${candidate.export.exportName}`,\n          implementation: this.generateDataAnalysisCode(candidate),\n          complexity: CapabilityComplexity.INTERMEDIATE,\n        });\n        break;\n    }\n\n    // Add complexity-based capabilities\n    if (complexity === 'COMPLEX' || complexity === 'VERY_COMPLEX') {\n      baseCapabilities.push({\n        name: 'generateAdvancedInsights',\n        description: 'Generate advanced insights and recommendations',\n        implementation: this.generateAdvancedInsightsCode(candidate),\n        complexity: CapabilityComplexity.EXPERT,\n      });\n    }\n\n    return baseCapabilities;\n  }\n\n  /**\n   * Generate integration points for the intelligence system\n   */\n  private generateIntegrationPoints(\n    candidate: TransformationCandidate,\n    originalFilePath: string\n  ): IntegrationPoint[] {\n    const integrationPoints: IntegrationPoint[] = [];\n    const systemName = candidate.intelligenceSystemName;\n\n    // Main application integration\n    integrationPoints.push({\n      target: 'src/app/intelligence/index.ts',\n      method: IntegrationMethod.DIRECT_IMPORT,\n      code: `import { ${systemName} } from '../intelligence/${systemName}';`,\n      priority: IntegrationPriority.HIGH,\n    });\n\n    // Dashboard integration\n    integrationPoints.push({\n      target: 'src/components/dashboard/IntelligenceDashboard.tsx',\n      method: IntegrationMethod.DEPENDENCY_INJECTION,\n      code: this.generateDashboardIntegrationCode(systemName),\n      priority: IntegrationPriority.MEDIUM,\n    });\n\n    // API integration\n    integrationPoints.push({\n      target: 'src/api/intelligence/route.ts',\n      method: IntegrationMethod.API_ENDPOINT,\n      code: this.generateAPIIntegrationCode(systemName),\n      priority: IntegrationPriority.LOW,\n    });\n\n    // Original file integration (if safe)\n    if (candidate.safetyScore > 80) {\n      integrationPoints.push({\n        target: originalFilePath,\n        method: IntegrationMethod.DIRECT_IMPORT,\n        code: `// Intelligence system available: ${systemName}`,\n        priority: IntegrationPriority.LOW,\n      });\n    }\n\n    return integrationPoints;\n  }\n\n  /**\n   * Generate the complete code for the intelligence system\n   */\n  private generateCode(\n    candidate: TransformationCandidate,\n    template: IntelligenceSystemTemplate,\n    capabilities: IntelligenceCapability[]\n  ): string {\n    const systemName = candidate.intelligenceSystemName;\n    const originalName = candidate.export.exportName;\n    const exportType = candidate.export.exportType;\n\n    const code = `/**\n * ${systemName}\n * Generated Enterprise Intelligence System\n * \n * Original Export: ${originalName} (${exportType})\n * Transformation Date: ${new Date().toISOString()}\n * Estimated Value: ${candidate.estimatedBenefit}/100\n */\n\nexport interface ${systemName}Config {\n  enableAnalytics: boolean;\n  enableRecommendations: boolean;\n  enableDemonstrations: boolean;\n  cacheResults: boolean;\n  logLevel: 'debug' | 'info' | 'warn' | 'error';\n}\n\nexport interface ${systemName}Analytics {\n  usageCount: number;\n  performanceMetrics: PerformanceMetrics;\n  patternAnalysis: PatternAnalysis;\n  recommendations: Recommendation[];\n}\n\nexport interface PerformanceMetrics {\n  averageExecutionTime: number;\n  memoryUsage: number;\n  cacheHitRate: number;\n  errorRate: number;\n}\n\nexport interface PatternAnalysis {\n  commonPatterns: string[];\n  anomalies: string[];\n  trends: TrendData[];\n  insights: string[];\n}\n\nexport interface Recommendation {\n  id: string;\n  type: 'optimization' | 'enhancement' | 'integration' | 'maintenance';\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  description: string;\n  implementation: string;\n  estimatedImpact: number;\n}\n\nexport interface TrendData {\n  metric: string;\n  values: number[];\n  timestamps: Date[];\n  trend: 'increasing' | 'decreasing' | 'stable' | 'volatile';\n}\n\nexport class ${systemName} {\n  private config: ${systemName}Config;\n  private analytics: ${systemName}Analytics;\n  private cache: Map<string, any>;\n\n  constructor(config: Partial<${systemName}Config> = {}) {\n    this.config = {\n      enableAnalytics: true,\n      enableRecommendations: true,\n      enableDemonstrations: true,\n      cacheResults: true,\n      logLevel: 'info',\n      ...config\n    };\n\n    this.analytics = {\n      usageCount: 0,\n      performanceMetrics: {\n        averageExecutionTime: 0,\n        memoryUsage: 0,\n        cacheHitRate: 0,\n        errorRate: 0\n      },\n      patternAnalysis: {\n        commonPatterns: [],\n        anomalies: [],\n        trends: [],\n        insights: []\n      },\n      recommendations: []\n    };\n\n    this.cache = new Map();\n  }\n\n  /**\n   * Analyze patterns and generate insights\n   */\n  async analyzePatterns(data?: any): Promise<PatternAnalysis> {\n    const startTime = performance.now();\n    \n    try {\n      this.analytics.usageCount++;\n      \n      const analysis: PatternAnalysis = {\n        commonPatterns: this.identifyCommonPatterns(data),\n        anomalies: this.detectAnomalies(data),\n        trends: this.analyzeTrends(data),\n        insights: this.generateInsights(data)\n      };\n\n      if (this.config.cacheResults) {\n        this.cache.set('lastAnalysis', analysis);\n      }\n\n      this.updatePerformanceMetrics(startTime);\n      return analysis;\n    } catch (error) {\n      this.handleError('analyzePatterns', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate recommendations based on analysis\n   */\n  async generateRecommendations(context?: any): Promise<Recommendation[]> {\n    if (!this.config.enableRecommendations) {\n      return [];\n    }\n\n    const startTime = performance.now();\n    \n    try {\n      const recommendations: Recommendation[] = [\n        {\n          id: \\`rec-\\${Date.now()}-1\\`,\n          type: 'optimization',\n          priority: 'medium',\n          description: \\`Optimize \\${originalName} usage patterns\\`,\n          implementation: 'Consider implementing caching or memoization',\n          estimatedImpact: 75\n        },\n        {\n          id: \\`rec-\\${Date.now()}-2\\`,\n          type: 'integration',\n          priority: 'high',\n          description: \\`Integrate \\${originalName} with monitoring systems\\`,\n          implementation: 'Add performance tracking and alerting',\n          estimatedImpact: 85\n        },\n        {\n          id: \\`rec-\\${Date.now()}-3\\`,\n          type: 'enhancement',\n          priority: 'low',\n          description: \\`Enhance \\${originalName} with additional features\\`,\n          implementation: 'Add validation, error handling, and logging',\n          estimatedImpact: 60\n        }\n      ];\n\n      this.analytics.recommendations = recommendations;\n      this.updatePerformanceMetrics(startTime);\n      \n      return recommendations;\n    } catch (error) {\n      this.handleError('generateRecommendations', error);\n      return [];\n    }\n  }\n\n  /**\n   * Demonstrate system capabilities\n   */\n  async demonstrateCapabilities(): Promise<Record<string, any>> {\n    if (!this.config.enableDemonstrations) {\n      return {};\n    }\n\n    const startTime = performance.now();\n    \n    try {\n      const demonstration = {\n        systemName: '${systemName}',\n        originalExport: '${originalName}',\n        capabilities: [\n${capabilities.map(cap => `          '${cap.name}': '${cap.description}'`).join(',\\n')}\n        ],\n        sampleAnalysis: await this.analyzePatterns({ sample: true }),\n        sampleRecommendations: await this.generateRecommendations({ sample: true }),\n        performanceMetrics: this.analytics.performanceMetrics,\n        configuration: this.config\n      };\n\n      this.updatePerformanceMetrics(startTime);\n      return demonstration;\n    } catch (error) {\n      this.handleError('demonstrateCapabilities', error);\n      return {};\n    }\n  }\n\n${capabilities\n  .map(\n    cap => `  /**\n   * ${cap.description}\n   */\n  private ${cap.name}(data?: any): any {\n    ${cap.implementation}\n  }`\n  )\n  .join('\\n\\n')}\n\n  /**\n   * Get current analytics\n   */\n  getAnalytics(): ${systemName}Analytics {\n    return { ...this.analytics };\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(newConfig: Partial<${systemName}Config>): void {\n    this.config = { ...this.config, ...newConfig };\n  }\n\n  /**\n   * Clear cache\n   */\n  clearCache(): void {\n    this.cache.clear();\n  }\n\n  /**\n   * Reset analytics\n   */\n  resetAnalytics(): void {\n    this.analytics = {\n      usageCount: 0,\n      performanceMetrics: {\n        averageExecutionTime: 0,\n        memoryUsage: 0,\n        cacheHitRate: 0,\n        errorRate: 0\n      },\n      patternAnalysis: {\n        commonPatterns: [],\n        anomalies: [],\n        trends: [],\n        insights: []\n      },\n      recommendations: []\n    };\n  }\n\n  private identifyCommonPatterns(data?: any): string[] {\n    // Implementation would analyze data for common patterns\n    return [\n      'Pattern A: High frequency usage during peak hours',\n      'Pattern B: Consistent error rates in specific scenarios',\n      'Pattern C: Performance degradation with large datasets'\n    ];\n  }\n\n  private detectAnomalies(data?: any): string[] {\n    // Implementation would detect anomalies in the data\n    return [\n      'Anomaly: Unusual spike in memory usage',\n      'Anomaly: Unexpected error pattern detected'\n    ];\n  }\n\n  private analyzeTrends(data?: any): TrendData[] {\n    // Implementation would analyze trends over time\n    return [\n      {\n        metric: 'usage',\n        values: [10, 15, 12, 18, 20],\n        timestamps: [new Date(), new Date(), new Date(), new Date(), new Date()],\n        trend: 'increasing'\n      }\n    ];\n  }\n\n  private generateInsights(data?: any): string[] {\n    // Implementation would generate actionable insights\n    return [\n      \\`\\${originalName} shows potential for optimization\\`,\n      'Consider implementing caching for better performance',\n      'Monitor usage patterns for capacity planning'\n    ];\n  }\n\n  private updatePerformanceMetrics(startTime: number): void {\n    const executionTime = performance.now() - startTime;\n    const currentAvg = this.analytics.performanceMetrics.averageExecutionTime;\n    const count = this.analytics.usageCount;\n    \n    this.analytics.performanceMetrics.averageExecutionTime = \n      (currentAvg * (count - 1) + executionTime) / count;\n  }\n\n  private handleError(method: string, error: any): void {\n    if (this.config.logLevel === 'debug' || this.config.logLevel === 'error') {\n      console.error(\\`\\${systemName}.\\${method} error:\\`, error);\n    }\n    \n    this.analytics.performanceMetrics.errorRate = \n      (this.analytics.performanceMetrics.errorRate * (this.analytics.usageCount - 1) + 1) / \n      this.analytics.usageCount;\n  }\n}\n\n// Export singleton instance for easy usage\nexport const ${systemName.toLowerCase()} = new ${systemName}();\n\n// Export factory function for custom configurations\nexport const create${systemName} = (config?: Partial<${systemName}Config>) => \n  new ${systemName}(config);\n`;\n\n    return code;\n  }\n\n  /**\n   * Initialize intelligence system templates\n   */\n  private initializeTemplates(): void {\n    // Default template\n    this.templates.set('DEFAULT', {\n      name: 'Default Intelligence System',\n      description:\n        'Basic intelligence system with analytics and recommendations',\n      template: 'default',\n      capabilities: [\n        {\n          name: 'collectMetrics',\n          description: 'Collect and analyze usage metrics',\n          implementation: 'return { timestamp: new Date(), metrics: {} };',\n          complexity: CapabilityComplexity.BASIC,\n        },\n        {\n          name: 'generateBasicInsights',\n          description: 'Generate basic insights from collected data',\n          implementation: 'return [\"Basic insight 1\", \"Basic insight 2\"];',\n          complexity: CapabilityComplexity.BASIC,\n        },\n      ],\n      integrationPoints: [],\n    });\n\n    // Function-specific template\n    this.templates.set('FUNCTION_INTELLIGENCE', {\n      name: 'Function Intelligence System',\n      description: 'Intelligence system specialized for function analysis',\n      template: 'function',\n      capabilities: [\n        {\n          name: 'analyzeFunctionCalls',\n          description: 'Analyze function call patterns and performance',\n          implementation:\n            'return { callCount: 0, averageTime: 0, parameters: [] };',\n          complexity: CapabilityComplexity.INTERMEDIATE,\n        },\n        {\n          name: 'optimizeFunctionUsage',\n          description: 'Suggest optimizations for function usage',\n          implementation:\n            'return [\"Consider memoization\", \"Add input validation\"];',\n          complexity: CapabilityComplexity.ADVANCED,\n        },\n      ],\n      integrationPoints: [],\n    });\n\n    // Class-specific template\n    this.templates.set('CLASS_INTELLIGENCE', {\n      name: 'Class Intelligence System',\n      description: 'Intelligence system specialized for class analysis',\n      template: 'class',\n      capabilities: [\n        {\n          name: 'analyzeClassUsage',\n          description: 'Analyze class instantiation and method usage patterns',\n          implementation:\n            'return { instances: 0, methodCalls: {}, inheritance: [] };',\n          complexity: CapabilityComplexity.ADVANCED,\n        },\n        {\n          name: 'suggestClassImprovements',\n          description: 'Suggest improvements to class design',\n          implementation:\n            'return [\"Consider composition over inheritance\", \"Add interface segregation\"];',\n          complexity: CapabilityComplexity.EXPERT,\n        },\n      ],\n      integrationPoints: [],\n    });\n\n    // Type-specific template\n    this.templates.set('TYPE_INTELLIGENCE', {\n      name: 'Type Intelligence System',\n      description: 'Intelligence system specialized for type analysis',\n      template: 'type',\n      capabilities: [\n        {\n          name: 'analyzeTypeUsage',\n          description: 'Analyze type usage patterns and relationships',\n          implementation:\n            'return { usageCount: 0, relationships: [], violations: [] };',\n          complexity: CapabilityComplexity.BASIC,\n        },\n        {\n          name: 'validateTypeConsistency',\n          description: 'Validate type consistency across the codebase',\n          implementation: 'return { consistent: true, issues: [] };',\n          complexity: CapabilityComplexity.INTERMEDIATE,\n        },\n      ],\n      integrationPoints: [],\n    });\n\n    // Data-specific template\n    this.templates.set('DATA_INTELLIGENCE', {\n      name: 'Data Intelligence System',\n      description: 'Intelligence system specialized for data analysis',\n      template: 'data',\n      capabilities: [\n        {\n          name: 'analyzeDataPatterns',\n          description: 'Analyze data structure and usage patterns',\n          implementation:\n            'return { structure: {}, patterns: [], anomalies: [] };',\n          complexity: CapabilityComplexity.INTERMEDIATE,\n        },\n        {\n          name: 'validateDataIntegrity',\n          description: 'Validate data integrity and consistency',\n          implementation: 'return { valid: true, errors: [], warnings: [] };',\n          complexity: CapabilityComplexity.ADVANCED,\n        },\n      ],\n      integrationPoints: [],\n    });\n  }\n\n  /**\n   * Generate function analysis code\n   */\n  private generateFunctionAnalysisCode(\n    candidate: TransformationCandidate\n  ): string {\n    return `\n    // Analyze function behavior and patterns\n    const analysis = {\n      functionName: '${candidate.export.exportName}',\n      complexity: ${candidate.export.complexity},\n      callPatterns: this.trackCallPatterns(data),\n      performance: this.measurePerformance(data),\n      recommendations: this.generateFunctionRecommendations(data)\n    };\n    return analysis;\n    `;\n  }\n\n  /**\n   * Generate class analysis code\n   */\n  private generateClassAnalysisCode(\n    candidate: TransformationCandidate\n  ): string {\n    return `\n    // Analyze class structure and usage\n    const analysis = {\n      className: '${candidate.export.exportName}',\n      methods: this.analyzeClassMethods(data),\n      properties: this.analyzeClassProperties(data),\n      inheritance: this.analyzeInheritance(data),\n      instantiation: this.trackInstantiation(data)\n    };\n    return analysis;\n    `;\n  }\n\n  /**\n   * Generate type analysis code\n   */\n  private generateTypeAnalysisCode(candidate: TransformationCandidate): string {\n    return `\n    // Analyze type structure and relationships\n    const analysis = {\n      typeName: '${candidate.export.exportName}',\n      structure: this.analyzeTypeStructure(data),\n      relationships: this.findTypeRelationships(data),\n      usage: this.trackTypeUsage(data),\n      compatibility: this.checkTypeCompatibility(data)\n    };\n    return analysis;\n    `;\n  }\n\n  /**\n   * Generate data analysis code\n   */\n  private generateDataAnalysisCode(candidate: TransformationCandidate): string {\n    return `\n    // Analyze data patterns and usage\n    const analysis = {\n      dataName: '${candidate.export.exportName}',\n      patterns: this.identifyDataPatterns(data),\n      usage: this.trackDataUsage(data),\n      validation: this.validateDataStructure(data),\n      optimization: this.suggestDataOptimizations(data)\n    };\n    return analysis;\n    `;\n  }\n\n  /**\n   * Generate advanced insights code\n   */\n  private generateAdvancedInsightsCode(\n    candidate: TransformationCandidate\n  ): string {\n    return `\n    // Generate advanced insights and recommendations\n    const insights = {\n      predictiveAnalysis: this.performPredictiveAnalysis(data),\n      optimizationOpportunities: this.identifyOptimizations(data),\n      riskAssessment: this.assessRisks(data),\n      strategicRecommendations: this.generateStrategicRecommendations(data)\n    };\n    return insights;\n    `;\n  }\n\n  /**\n   * Generate dashboard integration code\n   */\n  private generateDashboardIntegrationCode(systemName: string): string {\n    return `\n// Dashboard integration for ${systemName}\nconst ${systemName.toLowerCase()}Widget = {\n  title: '${systemName}',\n  component: () => <IntelligenceWidget system={${systemName.toLowerCase()}} />,\n  priority: 'medium',\n  refreshInterval: 30000\n};\n`;\n  }\n\n  /**\n   * Generate API integration code\n   */\n  private generateAPIIntegrationCode(systemName: string): string {\n    return `\n// API endpoint for ${systemName}\napp.get('/api/intelligence/${systemName.toLowerCase()}', async (req, res) => {\n  try {\n    const analytics = await ${systemName.toLowerCase()}.analyzePatterns(req.query);\n    const recommendations = await ${systemName.toLowerCase()}.generateRecommendations(req.query);\n    res.json({ analytics, recommendations });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n`;\n  }\n\n  /**\n   * Calculate estimated value of the intelligence system\n   */\n  private calculateEstimatedValue(\n    candidate: TransformationCandidate,\n    capabilities: IntelligenceCapability[]\n  ): number {\n    let value = candidate.estimatedBenefit;\n\n    // Add value based on capabilities\n    capabilities.forEach(capability => {\n      switch (capability.complexity) {\n        case CapabilityComplexity.BASIC:\n          value += 10;\n          break;\n        case CapabilityComplexity.INTERMEDIATE:\n          value += 20;\n          break;\n        case CapabilityComplexity.ADVANCED:\n          value += 35;\n          break;\n        case CapabilityComplexity.EXPERT:\n          value += 50;\n          break;\n      }\n    });\n\n    return Math.min(100, value);\n  }\n\n  /**\n   * Assess generation complexity\n   */\n  private assessGenerationComplexity(\n    candidate: TransformationCandidate,\n    capabilities: IntelligenceCapability[]\n  ): GenerationComplexity {\n    const baseComplexity = candidate.transformationComplexity;\n    const capabilityComplexity = capabilities.reduce((max, cap) => {\n      const complexityValue = {\n        [CapabilityComplexity.BASIC]: 1,\n        [CapabilityComplexity.INTERMEDIATE]: 2,\n        [CapabilityComplexity.ADVANCED]: 3,\n        [CapabilityComplexity.EXPERT]: 4,\n      }[cap.complexity];\n      return Math.max(max, complexityValue);\n    }, 0);\n\n    const totalComplexity =\n      {\n        SIMPLE: 1,\n        MODERATE: 2,\n        COMPLEX: 3,\n        VERY_COMPLEX: 4,\n      }[baseComplexity] + capabilityComplexity;\n\n    if (totalComplexity <= 3) return GenerationComplexity.SIMPLE;\n    if (totalComplexity <= 5) return GenerationComplexity.MODERATE;\n    if (totalComplexity <= 7) return GenerationComplexity.COMPLEX;\n    return GenerationComplexity.VERY_COMPLEX;\n  }\n\n  /**\n   * Ensure output directory exists\n   */\n  private async ensureOutputDirectory(): Promise<void> {\n    try {\n      await fs.promises.access(this.outputDirectory);\n    } catch {\n      await fs.promises.mkdir(this.outputDirectory, { recursive: true });\n    }\n  }\n\n  /**\n   * Generate summary of all generated systems\n   */\n  generateSummary(results: GenerationResult[]): GenerationSummary {\n    const totalSystemsGenerated = results.length;\n    const totalCapabilitiesAdded = results.reduce(\n      (sum, r) => sum + r.capabilities.length,\n      0\n    );\n    const totalIntegrationPoints = results.reduce(\n      (sum, r) => sum + r.integrationPoints.length,\n      0\n    );\n    const averageComplexity =\n      results.reduce((sum, r) => {\n        const complexityValue = {\n          [GenerationComplexity.SIMPLE]: 1,\n          [GenerationComplexity.MODERATE]: 2,\n          [GenerationComplexity.COMPLEX]: 3,\n          [GenerationComplexity.VERY_COMPLEX]: 4,\n        }[r.complexity];\n        return sum + complexityValue;\n      }, 0) / results.length;\n    const estimatedTotalValue = results.reduce(\n      (sum, r) => sum + r.estimatedValue,\n      0\n    );\n\n    const generationsByCategory: Record<string, number> = {};\n    results.forEach(r => {\n      const category = r.originalExport.exportType;\n      generationsByCategory[category] =\n        (generationsByCategory[category] || 0) + 1;\n    });\n\n    return {\n      totalSystemsGenerated,\n      totalCapabilitiesAdded,\n      totalIntegrationPoints,\n      averageComplexity,\n      estimatedTotalValue,\n      generationsByCategory,\n    };\n  }\n\n  /**\n   * Generate integration guide\n   */\n  generateIntegrationGuide(results: GenerationResult[]): string {\n    const guide = [\n      '# Enterprise Intelligence Systems Integration Guide',\n      '',\n      '## Overview',\n      `Generated ${results.length} intelligence systems from unused exports.`,\n      '',\n      '## Integration Steps',\n      '',\n      '### 1. Import Intelligence Systems',\n      '```typescript',\n      '// Add to your main application',\n      ...results\n        .slice(0, 5)\n        .map(\n          r =>\n            `import { ${r.systemName.toLowerCase()} } from './intelligence/${r.systemName}';`\n        ),\n      '```',\n      '',\n      '### 2. Initialize Systems',\n      '```typescript',\n      'const intelligenceSystems = [',\n      ...results.slice(0, 5).map(r => `  ${r.systemName.toLowerCase()},`),\n      '];',\n      '```',\n      '',\n      '### 3. Dashboard Integration',\n      'Add intelligence widgets to your dashboard:',\n      '```typescript',\n      ...results\n        .slice(0, 3)\n        .map(\n          r =>\n            r.integrationPoints.find(ip => ip.target.includes('Dashboard'))\n              ?.code || ''\n        )\n        .filter(Boolean),\n      '```',\n      '',\n      '### 4. API Integration',\n      'Expose intelligence systems via API:',\n      '```typescript',\n      ...results\n        .slice(0, 3)\n        .map(\n          r =>\n            r.integrationPoints.find(ip => ip.target.includes('api'))?.code ||\n            ''\n        )\n        .filter(Boolean),\n      '```',\n      '',\n      '## System Capabilities',\n      '',\n      ...results\n        .slice(0, 10)\n        .map(r => [\n          `### ${r.systemName}`,\n          `- Original Export: ${r.originalExport.exportName}`,\n          `- Estimated Value: ${r.estimatedValue}/100`,\n          `- Capabilities: ${r.capabilities.length}`,\n          `- Integration Points: ${r.integrationPoints.length}`,\n          '',\n        ])\n        .flat(),\n      '',\n      '## Next Steps',\n      '1. Review generated intelligence systems',\n      '2. Customize configurations as needed',\n      '3. Integrate with existing monitoring',\n      '4. Set up automated testing',\n      '5. Deploy to production environment',\n    ];\n\n    return guide.join('\\n');\n  }\n}\n"],"version":3}