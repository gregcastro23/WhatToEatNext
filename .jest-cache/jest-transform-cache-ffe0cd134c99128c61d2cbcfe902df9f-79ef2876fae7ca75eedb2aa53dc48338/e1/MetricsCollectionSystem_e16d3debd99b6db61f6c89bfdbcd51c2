cd137329973b38b7ae5fd260380800d7
"use strict";
/**
 * Enhanced Metrics Collection System
 * Perfect Codebase Campaign - Real-time Comprehensive Metrics
 * Requirements: 6.1, 6.2, 6.3
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricsCollectionSystem = void 0;
const child_process_1 = require("child_process");
const fs = __importStar(require("fs"));
class MetricsCollectionSystem {
    snapshots = [];
    collectionInterval = null;
    isCollecting = false;
    /**
     * Start real-time metrics collection
     */
    startRealTimeCollection(intervalMs = 30000) {
        if (this.isCollecting) {
            console.log('📊 Metrics collection already running');
            return;
        }
        this.isCollecting = true;
        console.log(`📊 Starting real-time metrics collection (interval: ${intervalMs}ms)`);
        this.collectionInterval = setInterval(async () => {
            try {
                await this.collectSnapshot();
            }
            catch (error) {
                console.error('❌ Error during metrics collection:', error.message || 'Unknown error');
            }
        }, intervalMs);
        // Collect initial snapshot
        this.collectSnapshot();
    }
    /**
     * Stop real-time metrics collection
     */
    stopRealTimeCollection() {
        if (this.collectionInterval) {
            clearInterval(this.collectionInterval);
            this.collectionInterval = null;
        }
        this.isCollecting = false;
        console.log('📊 Stopped real-time metrics collection');
    }
    /**
     * Collect comprehensive metrics snapshot
     */
    async collectSnapshot(phase, milestone, notes) {
        const timestamp = new Date();
        const id = `snapshot_${timestamp.getTime()}`;
        console.log('📊 Collecting metrics snapshot...');
        const metrics = await this.collectDetailedMetrics();
        const snapshot = {
            id,
            timestamp,
            metrics,
            phase: phase || 'unknown',
            milestone,
            notes
        };
        this.snapshots.push(snapshot);
        // Keep only recent snapshots to prevent memory issues
        if (this.snapshots.length > 1000) {
            this.snapshots = this.snapshots.slice(-500);
        }
        console.log(`📊 Snapshot collected: ${id}`);
        return snapshot;
    }
    /**
     * Collect detailed metrics with comprehensive analysis
     */
    async collectDetailedMetrics() {
        const [typeScriptMetrics, lintingMetrics, buildMetrics, resourceMetrics, enterpriseSystemCount] = await Promise.all([
            this.collectTypeScriptMetrics(),
            this.collectLintingMetrics(),
            this.collectBuildMetrics(),
            this.collectResourceMetrics(),
            this.getEnterpriseSystemCount()
        ]);
        const trendData = this.calculateTrendData();
        const detailedMetrics = {
            timestamp: new Date(),
            typeScriptErrors: {
                current: typeScriptMetrics.count,
                target: 0,
                reduction: Math.max(0, 86 - typeScriptMetrics.count),
                percentage: typeScriptMetrics.count >= 0 ? Math.round(((86 - typeScriptMetrics.count) / 86) * 100) : 0
            },
            lintingWarnings: {
                current: lintingMetrics.count,
                target: 0,
                reduction: Math.max(0, 4506 - lintingMetrics.count),
                percentage: lintingMetrics.count >= 0 ? Math.round(((4506 - lintingMetrics.count) / 4506) * 100) : 0
            },
            buildPerformance: {
                currentTime: buildMetrics.buildTime,
                targetTime: 10,
                cacheHitRate: buildMetrics.cacheHitRate,
                memoryUsage: buildMetrics.memoryUsage
            },
            enterpriseSystems: {
                current: enterpriseSystemCount,
                target: 200,
                transformedExports: Math.max(0, enterpriseSystemCount - 0)
            },
            errorBreakdown: typeScriptMetrics.breakdown,
            warningBreakdown: lintingMetrics.breakdown,
            buildMetrics,
            resourceMetrics,
            trendData
        };
        return detailedMetrics;
    }
    /**
     * Collect TypeScript error metrics with detailed breakdown
     */
    async collectTypeScriptMetrics() {
        try {
            // Get total error count
            const countOutput = (0, child_process_1.execSync)('yarn tsc --noEmit --skipLibCheck 2>&1 | grep -c "error TS" || echo "0"', {
                encoding: 'utf8',
                stdio: 'pipe'
            });
            const count = parseInt(countOutput.trim()) || 0;
            // Get detailed breakdown by error type
            const breakdown = {};
            if (count > 0) {
                try {
                    const breakdownOutput = (0, child_process_1.execSync)('yarn tsc --noEmit --skipLibCheck 2>&1 | grep -E "error TS" | sed \'s/.*error //\' | cut -d\':\' -f1 | sort | uniq -c | sort -nr', {
                        encoding: 'utf8',
                        stdio: 'pipe'
                    });
                    const lines = breakdownOutput.trim().split('\n').filter(line => line.trim());
                    for (const line of lines) {
                        const match = line.trim().match(/^\s*(\d+)\s+(.+)$/);
                        if (match) {
                            const errorCount = parseInt(match[1]);
                            const errorType = match[2].trim();
                            breakdown[errorType] = errorCount;
                        }
                    }
                }
                catch (error) {
                    console.warn('Could not get TypeScript error breakdown:', error.message || 'Unknown error');
                }
            }
            return { count, breakdown };
        }
        catch (error) {
            console.warn('Could not collect TypeScript metrics:', error.message || 'Unknown error');
            return { count: -1, breakdown: {} };
        }
    }
    /**
     * Collect linting warning metrics with categorized breakdown
     */
    async collectLintingMetrics() {
        try {
            // Get total warning count
            const countOutput = (0, child_process_1.execSync)('yarn lint 2>&1 | grep -c "warning" || echo "0"', {
                encoding: 'utf8',
                stdio: 'pipe'
            });
            const count = parseInt(countOutput.trim()) || 0;
            // Get detailed breakdown by warning type
            const breakdown = {};
            if (count > 0) {
                try {
                    const lintOutput = (0, child_process_1.execSync)('yarn lint 2>&1', {
                        encoding: 'utf8',
                        stdio: 'pipe'
                    });
                    const lines = lintOutput.split('\n');
                    for (const line of lines) {
                        // Look for ESLint warning patterns
                        const warningMatch = line.match(/warning\s+(.+?)\s+(@typescript-eslint\/[\w-]+|[\w-]+)/);
                        if (warningMatch) {
                            const ruleType = warningMatch[2];
                            breakdown[ruleType] = (breakdown[ruleType] || 0) + 1;
                        }
                    }
                }
                catch (error) {
                    console.warn('Could not get linting warning breakdown:', error.message || 'Unknown error');
                }
            }
            return { count, breakdown };
        }
        catch (error) {
            console.warn('Could not collect linting metrics:', error.message || 'Unknown error');
            return { count: -1, breakdown: {} };
        }
    }
    /**
     * Collect comprehensive build performance metrics
     */
    async collectBuildMetrics() {
        const startTime = Date.now();
        let buildTime = -1;
        let bundleSize = 0;
        let compilationSpeed = 0;
        try {
            // Measure build time
            const buildStart = Date.now();
            (0, child_process_1.execSync)('yarn build', {
                encoding: 'utf8',
                stdio: 'pipe'
            });
            buildTime = (Date.now() - buildStart) / 1000;
            // Calculate compilation speed (rough estimate)
            const sourceFiles = this.countSourceFiles();
            compilationSpeed = sourceFiles / buildTime;
        }
        catch (error) {
            console.warn('Build failed during metrics collection:', error.message || 'Unknown error');
        }
        try {
            // Get bundle size
            bundleSize = await this.getBundleSize();
        }
        catch (error) {
            console.warn('Could not measure bundle size:', error.message || 'Unknown error');
        }
        return {
            buildTime,
            bundleSize,
            cacheHitRate: await this.estimateCacheHitRate(),
            memoryUsage: this.getMemoryUsage(),
            cpuUsage: await this.getCpuUsage(),
            diskUsage: await this.getDiskUsage(),
            compilationSpeed
        };
    }
    /**
     * Collect system resource metrics
     */
    async collectResourceMetrics() {
        const nodeMemoryUsage = process.memoryUsage();
        return {
            nodeMemoryUsage,
            systemMemory: await this.getSystemMemory(),
            diskSpace: await this.getDiskSpace()
        };
    }
    /**
     * Calculate trend data based on historical snapshots
     */
    calculateTrendData() {
        if (this.snapshots.length < 2) {
            return {
                errorReductionRate: 0,
                warningReductionRate: 0,
                buildTimeImprovement: 0,
                systemGrowthRate: 0
            };
        }
        const recent = this.snapshots.slice(-10); // Last 10 snapshots
        const timeSpanHours = (recent[recent.length - 1].timestamp.getTime() - recent[0].timestamp.getTime()) / (1000 * 60 * 60);
        if (timeSpanHours === 0) {
            return {
                errorReductionRate: 0,
                warningReductionRate: 0,
                buildTimeImprovement: 0,
                systemGrowthRate: 0
            };
        }
        const errorReduction = recent[0].metrics.typeScriptErrors.current - recent[recent.length - 1].metrics.typeScriptErrors.current;
        const warningReduction = recent[0].metrics.lintingWarnings.current - recent[recent.length - 1].metrics.lintingWarnings.current;
        const buildTimeImprovement = recent[0].metrics.buildPerformance.currentTime - recent[recent.length - 1].metrics.buildPerformance.currentTime;
        const systemGrowth = recent[recent.length - 1].metrics.enterpriseSystems.current - recent[0].metrics.enterpriseSystems.current;
        return {
            errorReductionRate: errorReduction / timeSpanHours,
            warningReductionRate: warningReduction / timeSpanHours,
            buildTimeImprovement: buildTimeImprovement / timeSpanHours,
            systemGrowthRate: systemGrowth / timeSpanHours
        };
    }
    /**
     * Helper methods for metrics collection
     */
    async getEnterpriseSystemCount() {
        try {
            const output = (0, child_process_1.execSync)('grep -r "INTELLIGENCE_SYSTEM" src/ | wc -l', {
                encoding: 'utf8',
                stdio: 'pipe'
            });
            return parseInt(output.trim()) || 0;
        }
        catch (error) {
            return 0;
        }
    }
    async getBundleSize() {
        try {
            const buildDirs = ['.next', 'dist', 'build'];
            let totalSize = 0;
            for (const dir of buildDirs) {
                if (fs.existsSync(dir)) {
                    const output = (0, child_process_1.execSync)(`du -sk ${dir} | cut -f1`, {
                        encoding: 'utf8',
                        stdio: 'pipe'
                    });
                    totalSize += parseInt(output.trim()) || 0;
                }
            }
            return totalSize;
        }
        catch (error) {
            return 0;
        }
    }
    async estimateCacheHitRate() {
        // This is a simplified estimation - in a real implementation,
        // you'd integrate with the actual build system's cache metrics
        return 0.8; // 80% default estimate
    }
    getMemoryUsage() {
        const memUsage = process.memoryUsage();
        return Math.round(memUsage.heapUsed / 1024 / 1024);
    }
    async getCpuUsage() {
        try {
            const output = (0, child_process_1.execSync)('ps -o %cpu -p $$ | tail -1', {
                encoding: 'utf8',
                stdio: 'pipe'
            });
            return parseFloat(output.trim()) || 0;
        }
        catch (error) {
            return 0;
        }
    }
    async getDiskUsage() {
        try {
            const output = (0, child_process_1.execSync)('du -sh . | cut -f1', {
                encoding: 'utf8',
                stdio: 'pipe'
            });
            // Convert to MB (rough estimation)
            const sizeStr = output.trim();
            if (sizeStr.includes('G')) {
                return parseFloat(sizeStr) * 1024;
            }
            else if (sizeStr.includes('M')) {
                return parseFloat(sizeStr);
            }
            return 0;
        }
        catch (error) {
            return 0;
        }
    }
    countSourceFiles() {
        try {
            const output = (0, child_process_1.execSync)('find src -name "*.ts" -o -name "*.tsx" | wc -l', {
                encoding: 'utf8',
                stdio: 'pipe'
            });
            return parseInt(output.trim()) || 0;
        }
        catch (error) {
            return 0;
        }
    }
    async getSystemMemory() {
        try {
            const output = (0, child_process_1.execSync)('free -m | grep Mem', {
                encoding: 'utf8',
                stdio: 'pipe'
            });
            const match = output.match(/Mem:\s+(\d+)\s+(\d+)\s+(\d+)/);
            if (match) {
                const total = parseInt(match[1]);
                const used = parseInt(match[2]);
                const free = parseInt(match[3]);
                return {
                    total,
                    used,
                    free,
                    percentage: Math.round((used / total) * 100)
                };
            }
        }
        catch (error) {
            // Fallback for non-Linux systems
        }
        return {
            total: 0,
            used: 0,
            free: 0,
            percentage: 0
        };
    }
    async getDiskSpace() {
        try {
            const output = (0, child_process_1.execSync)('df -h . | tail -1', {
                encoding: 'utf8',
                stdio: 'pipe'
            });
            const parts = output.trim().split(/\s+/);
            if (parts.length >= 4) {
                const total = this.parseSize(parts[1]);
                const used = this.parseSize(parts[2]);
                const free = this.parseSize(parts[3]);
                return {
                    total,
                    used,
                    free,
                    percentage: Math.round((used / total) * 100)
                };
            }
        }
        catch (error) {
            // Handle error
        }
        return {
            total: 0,
            used: 0,
            free: 0,
            percentage: 0
        };
    }
    parseSize(sizeStr) {
        const num = parseFloat(sizeStr);
        if (sizeStr.includes('G'))
            return num * 1024;
        if (sizeStr.includes('M'))
            return num;
        if (sizeStr.includes('K'))
            return num / 1024;
        return num;
    }
    /**
     * Export methods for external access
     */
    getSnapshots() {
        return [...this.snapshots];
    }
    getLatestSnapshot() {
        return this.snapshots.length > 0 ? this.snapshots[this.snapshots.length - 1] : null;
    }
    async exportSnapshots(filePath) {
        const exportData = {
            timestamp: new Date().toISOString(),
            totalSnapshots: this.snapshots.length,
            snapshots: this.snapshots,
            summary: {
                collectionPeriod: this.snapshots.length > 0 ? {
                    start: this.snapshots[0].timestamp,
                    end: this.snapshots[this.snapshots.length - 1].timestamp
                } : null,
                trends: this.calculateTrendData()
            }
        };
        fs.writeFileSync(filePath, JSON.stringify(exportData, null, 2));
        console.log(`📊 Metrics snapshots exported to: ${filePath}`);
    }
    clearSnapshots() {
        this.snapshots = [];
        console.log('📊 Metrics snapshots cleared');
    }
}
exports.MetricsCollectionSystem = MetricsCollectionSystem;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,