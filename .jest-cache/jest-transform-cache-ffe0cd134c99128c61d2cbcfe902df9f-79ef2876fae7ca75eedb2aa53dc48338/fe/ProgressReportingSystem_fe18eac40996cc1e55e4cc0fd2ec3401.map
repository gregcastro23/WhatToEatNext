{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/ProgressReportingSystem.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/ProgressReportingSystem.ts"],"sourcesContent":["/**\n * Progress Reporting System\n * Perfect Codebase Campaign - Comprehensive Progress Reports\n * Requirements: 6.4, 6.8\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport {\n  ProgressMetrics,\n  PhaseReport,\n  ProgressReport,\n  PhaseStatus\n} from '../../types/campaign';\nimport { MetricsCollectionSystem, DetailedMetrics, MetricsSnapshot } from './MetricsCollectionSystem';\nimport { MilestoneValidationSystem, PhaseValidationResult } from './MilestoneValidationSystem';\n\nexport interface CampaignSummaryReport {\n  campaignId: string;\n  generatedAt: Date;\n  overallStatus: CampaignStatus;\n  overallProgress: number;\n  phases: PhaseProgressSummary[];\n  keyAchievements: Achievement[];\n  criticalIssues: Issue[];\n  performanceMetrics: PerformanceSnapshot;\n  recommendations: Recommendation[];\n  estimatedCompletion: Date;\n  executiveSummary: string;\n}\n\nexport interface PhaseProgressSummary {\n  phaseId: string;\n  phaseName: string;\n  status: PhaseStatus;\n  progress: number;\n  startDate?: Date;\n  completionDate?: Date;\n  duration?: number; // in hours\n  keyMetrics: Record<string, number>;\n  milestones: MilestoneSummary[];\n  blockers: string[];\n}\n\nexport interface MilestoneSummary {\n  name: string;\n  completed: boolean;\n  completionDate?: Date;\n  criticalPath: boolean;\n}\n\nexport interface Achievement {\n  title: string;\n  description: string;\n  phase: string;\n  achievedAt: Date;\n  impact: AchievementImpact;\n  metrics: Record<string, number>;\n}\n\nexport interface Issue {\n  title: string;\n  description: string;\n  phase: string;\n  severity: IssueSeverity;\n  detectedAt: Date;\n  resolution?: string;\n  estimatedResolutionTime?: number; // in hours\n}\n\nexport interface PerformanceSnapshot {\n  typeScriptErrors: {\n    initial: number;\n    current: number;\n    reduction: number;\n    reductionRate: number; // per hour\n  };\n  lintingWarnings: {\n    initial: number;\n    current: number;\n    reduction: number;\n    reductionRate: number; // per hour\n  };\n  buildPerformance: {\n    currentTime: number;\n    targetTime: number;\n    improvement: number;\n    cacheEfficiency: number;\n  };\n  enterpriseSystems: {\n    initial: number;\n    current: number;\n    target: number;\n    growthRate: number; // per hour\n  };\n}\n\nexport interface Recommendation {\n  title: string;\n  description: string;\n  priority: RecommendationPriority;\n  phase: string;\n  estimatedImpact: string;\n  actionItems: string[];\n}\n\nexport interface VisualizationData {\n  timeSeriesData: TimeSeriesPoint[];\n  phaseProgressChart: PhaseProgressPoint[];\n  errorDistributionChart: ErrorDistributionPoint[];\n  performanceTrendChart: PerformanceTrendPoint[];\n}\n\nexport interface TimeSeriesPoint {\n  timestamp: Date;\n  typeScriptErrors: number;\n  lintingWarnings: number;\n  buildTime: number;\n  enterpriseSystems: number;\n}\n\nexport interface PhaseProgressPoint {\n  phase: string;\n  progress: number;\n  target: number;\n  status: PhaseStatus;\n}\n\nexport interface ErrorDistributionPoint {\n  errorType: string;\n  count: number;\n  percentage: number;\n}\n\nexport interface PerformanceTrendPoint {\n  timestamp: Date;\n  buildTime: number;\n  memoryUsage: number;\n  cacheHitRate: number;\n}\n\nexport enum CampaignStatus {\n  NOT_STARTED = 'NOT_STARTED',\n  IN_PROGRESS = 'IN_PROGRESS',\n  COMPLETED = 'COMPLETED',\n  BLOCKED = 'BLOCKED',\n  FAILED = 'FAILED'\n}\n\nexport enum AchievementImpact {\n  LOW = 'LOW',\n  MEDIUM = 'MEDIUM',\n  HIGH = 'HIGH',\n  CRITICAL = 'CRITICAL'\n}\n\nexport enum IssueSeverity {\n  LOW = 'LOW',\n  MEDIUM = 'MEDIUM',\n  HIGH = 'HIGH',\n  CRITICAL = 'CRITICAL',\n  BLOCKER = 'BLOCKER'\n}\n\nexport enum RecommendationPriority {\n  LOW = 'LOW',\n  MEDIUM = 'MEDIUM',\n  HIGH = 'HIGH',\n  URGENT = 'URGENT'\n}\n\nexport class ProgressReportingSystem {\n  private metricsCollector: MetricsCollectionSystem;\n  private validationSystem: MilestoneValidationSystem;\n  private reportHistory: CampaignSummaryReport[] = [];\n\n  constructor() {\n    this.metricsCollector = new MetricsCollectionSystem();\n    this.validationSystem = new MilestoneValidationSystem();\n  }\n\n  /**\n   * Generate comprehensive campaign summary report\n   */\n  async generateCampaignSummaryReport(): Promise<CampaignSummaryReport> {\n    console.log('📊 Generating comprehensive campaign summary report...');\n\n    const [currentMetrics, phaseValidations] = await Promise.all([\n      this.metricsCollector.collectDetailedMetrics(),\n      this.validationSystem.validateAllPhases()\n    ]);\n\n    const overallStatus = this.determineOverallStatus(phaseValidations);\n    const overallProgress = this.calculateOverallProgress(phaseValidations);\n    const phases = this.generatePhaseProgressSummaries(phaseValidations);\n    const keyAchievements = this.identifyKeyAchievements(currentMetrics, phaseValidations);\n    const criticalIssues = this.identifyCriticalIssues(phaseValidations);\n    const performanceMetrics = this.createPerformanceSnapshot(currentMetrics);\n    const recommendations = this.generateRecommendations(phaseValidations, currentMetrics);\n    const estimatedCompletion = this.estimateCompletionDate(overallProgress, currentMetrics);\n    const executiveSummary = this.generateExecutiveSummary(\n      overallStatus,\n      overallProgress,\n      keyAchievements,\n      criticalIssues\n    );\n\n    const report: CampaignSummaryReport = {\n      campaignId: 'perfect-codebase-campaign',\n      generatedAt: new Date(),\n      overallStatus,\n      overallProgress,\n      phases,\n      keyAchievements,\n      criticalIssues,\n      performanceMetrics,\n      recommendations,\n      estimatedCompletion,\n      executiveSummary\n    };\n\n    this.reportHistory.push(report);\n    console.log(`✅ Campaign summary report generated: ${overallProgress}% complete`);\n\n    return report;\n  }\n\n  /**\n   * Generate detailed phase completion report\n   */\n  async generatePhaseCompletionReport(phaseId: string): Promise<PhaseReport> {\n    console.log(`📊 Generating phase completion report for ${phaseId}...`);\n\n    const currentMetrics = await this.metricsCollector.collectDetailedMetrics();\n    let phaseValidation: PhaseValidationResult;\n\n    switch (phaseId) {\n      case 'phase1':\n        phaseValidation = await this.validationSystem.validatePhase1();\n        break;\n      case 'phase2':\n        phaseValidation = await this.validationSystem.validatePhase2();\n        break;\n      case 'phase3':\n        phaseValidation = await this.validationSystem.validatePhase3();\n        break;\n      case 'phase4':\n        phaseValidation = await this.validationSystem.validatePhase4();\n        break;\n      default:\n        throw new Error(`Unknown phase: ${phaseId}`);\n    }\n\n    const achievements = this.generatePhaseAchievements(phaseValidation, currentMetrics);\n    const issues = this.generatePhaseIssues(phaseValidation);\n    const recommendations = this.generatePhaseRecommendations(phaseValidation);\n\n    const report: PhaseReport = {\n      phaseId: phaseValidation.phaseId,\n      phaseName: phaseValidation.phaseName,\n      startTime: new Date(), // This should be tracked properly in a real implementation\n      endTime: phaseValidation.overallSuccess ? new Date() : undefined,\n      status: phaseValidation.overallSuccess ? PhaseStatus.COMPLETED : PhaseStatus.IN_PROGRESS,\n      metrics: currentMetrics,\n      achievements,\n      issues,\n      recommendations\n    };\n\n    console.log(`✅ Phase ${phaseId} report generated: ${phaseValidation.overallSuccess ? 'COMPLETED' : 'IN PROGRESS'}`);\n    return report;\n  }\n\n  /**\n   * Generate visualization data for charts and graphs\n   */\n  async generateVisualizationData(): Promise<VisualizationData> {\n    console.log('📊 Generating visualization data...');\n\n    const snapshots = this.metricsCollector.getSnapshots();\n    const phaseValidations = await this.validationSystem.validateAllPhases();\n    const currentMetrics = await this.metricsCollector.collectDetailedMetrics();\n\n    const timeSeriesData = this.generateTimeSeriesData(snapshots);\n    const phaseProgressChart = this.generatePhaseProgressChart(phaseValidations);\n    const errorDistributionChart = this.generateErrorDistributionChart(currentMetrics);\n    const performanceTrendChart = this.generatePerformanceTrendChart(snapshots);\n\n    return {\n      timeSeriesData,\n      phaseProgressChart,\n      errorDistributionChart,\n      performanceTrendChart\n    };\n  }\n\n  /**\n   * Export comprehensive report to multiple formats\n   */\n  async exportReport(\n    report: CampaignSummaryReport,\n    formats: ('json' | 'html' | 'markdown' | 'csv')[] = ['json']\n  ): Promise<string[]> {\n    const exportedFiles: string[] = [];\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const baseFileName = `campaign-report-${timestamp}`;\n\n    for (const format of formats) {\n      let filePath: string;\n      let content: string;\n\n      switch (format) {\n        case 'json':\n          filePath = `${baseFileName}.json`;\n          content = JSON.stringify(report, null, 2);\n          break;\n\n        case 'html':\n          filePath = `${baseFileName}.html`;\n          content = this.generateHTMLReport(report);\n          break;\n\n        case 'markdown':\n          filePath = `${baseFileName}.md`;\n          content = this.generateMarkdownReport(report);\n          break;\n\n        case 'csv':\n          filePath = `${baseFileName}.csv`;\n          content = this.generateCSVReport(report);\n          break;\n\n        default:\n          continue;\n      }\n\n      fs.writeFileSync(filePath, content);\n      exportedFiles.push(filePath);\n      console.log(`📄 Report exported to: ${filePath}`);\n    }\n\n    return exportedFiles;\n  }\n\n  /**\n   * Generate real-time dashboard data\n   */\n  async generateDashboardData(): Promise<{\n    summary: CampaignSummaryReport;\n    visualization: VisualizationData;\n    recentActivity: ActivityItem[];\n  }> {\n    const [summary, visualization] = await Promise.all([\n      this.generateCampaignSummaryReport(),\n      this.generateVisualizationData()\n    ]);\n\n    const recentActivity = this.generateRecentActivity();\n\n    return {\n      summary,\n      visualization,\n      recentActivity\n    };\n  }\n\n  /**\n   * Private helper methods\n   */\n  private determineOverallStatus(phaseValidations: PhaseValidationResult[]): CampaignStatus {\n    const completedPhases = phaseValidations.filter(p => p.overallSuccess).length;\n    const totalPhases = phaseValidations.length;\n    const hasBlockers = phaseValidations.some(p => p.criticalFailures.length > 0);\n\n    if (completedPhases === totalPhases) {\n      return CampaignStatus.COMPLETED;\n    } else if (hasBlockers) {\n      return CampaignStatus.BLOCKED;\n    } else if (completedPhases > 0) {\n      return CampaignStatus.IN_PROGRESS;\n    } else {\n      return CampaignStatus.NOT_STARTED;\n    }\n  }\n\n  private calculateOverallProgress(phaseValidations: PhaseValidationResult[]): number {\n    if (phaseValidations.length === 0) return 0;\n    \n    const totalProgress = phaseValidations.reduce((sum, phase) => sum + phase.completionPercentage, 0);\n    return Math.round(totalProgress / phaseValidations.length);\n  }\n\n  private generatePhaseProgressSummaries(phaseValidations: PhaseValidationResult[]): PhaseProgressSummary[] {\n    return phaseValidations.map(validation => ({\n      phaseId: validation.phaseId,\n      phaseName: validation.phaseName,\n      status: validation.overallSuccess ? PhaseStatus.COMPLETED : PhaseStatus.IN_PROGRESS,\n      progress: validation.completionPercentage,\n      keyMetrics: this.extractKeyMetrics(validation),\n      milestones: validation.milestones.map(m => ({\n        name: m.milestone,\n        completed: m.success,\n        completionDate: m.success ? m.timestamp : undefined,\n        criticalPath: true // All milestones are critical in this campaign\n      })),\n      blockers: validation.criticalFailures\n    }));\n  }\n\n  private identifyKeyAchievements(\n    metrics: DetailedMetrics,\n    phaseValidations: PhaseValidationResult[]\n  ): Achievement[] {\n    const achievements: Achievement[] = [];\n\n    // TypeScript error achievements\n    if (metrics.typeScriptErrors.current === 0) {\n      achievements.push({\n        title: 'Zero TypeScript Errors Achieved',\n        description: 'Successfully eliminated all 86 TypeScript compilation errors',\n        phase: 'phase1',\n        achievedAt: new Date(),\n        impact: AchievementImpact.CRITICAL,\n        metrics: {\n          errorsEliminated: 86,\n          reductionPercentage: 100\n        }\n      });\n    }\n\n    // Linting warning achievements\n    if (metrics.lintingWarnings.current === 0) {\n      achievements.push({\n        title: 'Zero Linting Warnings Achieved',\n        description: 'Successfully eliminated all 4,506 linting warnings',\n        phase: 'phase2',\n        achievedAt: new Date(),\n        impact: AchievementImpact.CRITICAL,\n        metrics: {\n          warningsEliminated: 4506,\n          reductionPercentage: 100\n        }\n      });\n    }\n\n    // Enterprise system achievements\n    if (metrics.enterpriseSystems.current >= 200) {\n      achievements.push({\n        title: 'Enterprise Intelligence Target Achieved',\n        description: `Successfully created ${metrics.enterpriseSystems.current} enterprise intelligence systems`,\n        phase: 'phase3',\n        achievedAt: new Date(),\n        impact: AchievementImpact.HIGH,\n        metrics: {\n          systemsCreated: metrics.enterpriseSystems.current,\n          targetAchievement: (metrics.enterpriseSystems.current / 200) * 100\n        }\n      });\n    }\n\n    // Performance achievements\n    if (metrics.buildPerformance.currentTime <= 10) {\n      achievements.push({\n        title: 'Build Performance Target Achieved',\n        description: `Build time optimized to ${metrics.buildPerformance.currentTime}s (target: 10s)`,\n        phase: 'phase4',\n        achievedAt: new Date(),\n        impact: AchievementImpact.HIGH,\n        metrics: {\n          buildTime: metrics.buildPerformance.currentTime,\n          targetTime: 10,\n          improvement: 10 - metrics.buildPerformance.currentTime\n        }\n      });\n    }\n\n    return achievements;\n  }\n\n  private identifyCriticalIssues(phaseValidations: PhaseValidationResult[]): Issue[] {\n    const issues: Issue[] = [];\n\n    phaseValidations.forEach(phase => {\n      phase.criticalFailures.forEach(failure => {\n        issues.push({\n          title: `${phase.phaseName} Critical Failure`,\n          description: failure,\n          phase: phase.phaseId,\n          severity: IssueSeverity.CRITICAL,\n          detectedAt: new Date(),\n          estimatedResolutionTime: this.estimateResolutionTime(failure)\n        });\n      });\n    });\n\n    return issues;\n  }\n\n  private createPerformanceSnapshot(metrics: DetailedMetrics): PerformanceSnapshot {\n    return {\n      typeScriptErrors: {\n        initial: 86,\n        current: metrics.typeScriptErrors.current,\n        reduction: metrics.typeScriptErrors.reduction,\n        reductionRate: metrics.trendData.errorReductionRate\n      },\n      lintingWarnings: {\n        initial: 4506,\n        current: metrics.lintingWarnings.current,\n        reduction: metrics.lintingWarnings.reduction,\n        reductionRate: metrics.trendData.warningReductionRate\n      },\n      buildPerformance: {\n        currentTime: metrics.buildPerformance.currentTime,\n        targetTime: 10,\n        improvement: metrics.trendData.buildTimeImprovement,\n        cacheEfficiency: metrics.buildPerformance.cacheHitRate\n      },\n      enterpriseSystems: {\n        initial: 0,\n        current: metrics.enterpriseSystems.current,\n        target: 200,\n        growthRate: metrics.trendData.systemGrowthRate\n      }\n    };\n  }\n\n  private generateRecommendations(\n    phaseValidations: PhaseValidationResult[],\n    metrics: DetailedMetrics\n  ): Recommendation[] {\n    const recommendations: Recommendation[] = [];\n\n    phaseValidations.forEach(phase => {\n      if (!phase.overallSuccess) {\n        phase.nextSteps.forEach(step => {\n          recommendations.push({\n            title: `${phase.phaseName} Improvement`,\n            description: step,\n            priority: this.determinePriority(step),\n            phase: phase.phaseId,\n            estimatedImpact: this.estimateImpact(step),\n            actionItems: this.generateActionItems(step)\n          });\n        });\n      }\n    });\n\n    return recommendations;\n  }\n\n  private estimateCompletionDate(overallProgress: number, metrics: DetailedMetrics): Date {\n    const completionDate = new Date();\n    \n    if (overallProgress >= 100) {\n      return completionDate; // Already complete\n    }\n\n    // Estimate based on current progress rate\n    const remainingProgress = 100 - overallProgress;\n    const averageRate = (\n      metrics.trendData.errorReductionRate +\n      metrics.trendData.warningReductionRate +\n      metrics.trendData.systemGrowthRate\n    ) / 3;\n\n    const estimatedHours = averageRate > 0 ? remainingProgress / averageRate : 168; // Default to 1 week\n    completionDate.setHours(completionDate.getHours() + estimatedHours);\n\n    return completionDate;\n  }\n\n  private generateExecutiveSummary(\n    status: CampaignStatus,\n    progress: number,\n    achievements: Achievement[],\n    issues: Issue[]\n  ): string {\n    const statusText = status === CampaignStatus.COMPLETED ? 'completed successfully' :\n                     status === CampaignStatus.IN_PROGRESS ? 'in progress' :\n                     status === CampaignStatus.BLOCKED ? 'currently blocked' : 'not started';\n\n    const achievementText = achievements.length > 0 ? \n      `Key achievements include: ${achievements.map(a => a.title).join(', ')}.` : '';\n\n    const issueText = issues.length > 0 ? \n      `Critical issues requiring attention: ${issues.length} items identified.` : \n      'No critical issues identified.';\n\n    return `The Perfect Codebase Campaign is ${statusText} with ${progress}% overall completion. ${achievementText} ${issueText}`;\n  }\n\n  private generateTimeSeriesData(snapshots: MetricsSnapshot[]): TimeSeriesPoint[] {\n    return snapshots.map(snapshot => ({\n      timestamp: snapshot.timestamp,\n      typeScriptErrors: snapshot.metrics.typeScriptErrors.current,\n      lintingWarnings: snapshot.metrics.lintingWarnings.current,\n      buildTime: snapshot.metrics.buildPerformance.currentTime,\n      enterpriseSystems: snapshot.metrics.enterpriseSystems.current\n    }));\n  }\n\n  private generatePhaseProgressChart(phaseValidations: PhaseValidationResult[]): PhaseProgressPoint[] {\n    return phaseValidations.map(phase => ({\n      phase: phase.phaseName,\n      progress: phase.completionPercentage,\n      target: 100,\n      status: phase.overallSuccess ? PhaseStatus.COMPLETED : PhaseStatus.IN_PROGRESS\n    }));\n  }\n\n  private generateErrorDistributionChart(metrics: DetailedMetrics): ErrorDistributionPoint[] {\n    const errorBreakdown = metrics.errorBreakdown || {};\n    const totalErrors = Object.values(errorBreakdown).reduce((sum, count) => sum + count, 0);\n\n    return Object.entries(errorBreakdown).map(([errorType, count]) => ({\n      errorType,\n      count,\n      percentage: totalErrors > 0 ? Math.round((count / totalErrors) * 100) : 0\n    }));\n  }\n\n  private generatePerformanceTrendChart(snapshots: MetricsSnapshot[]): PerformanceTrendPoint[] {\n    return snapshots.map(snapshot => ({\n      timestamp: snapshot.timestamp,\n      buildTime: snapshot.metrics.buildPerformance.currentTime,\n      memoryUsage: snapshot.metrics.buildPerformance.memoryUsage,\n      cacheHitRate: snapshot.metrics.buildPerformance.cacheHitRate\n    }));\n  }\n\n  private generateHTMLReport(report: CampaignSummaryReport): string {\n    return `\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Perfect Codebase Campaign Report</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 40px; }\n        .header { background: #f5f5f5; padding: 20px; border-radius: 8px; }\n        .status-${report.overallStatus.toLowerCase()} { color: ${this.getStatusColor(report.overallStatus)}; }\n        .progress-bar { background: #e0e0e0; height: 20px; border-radius: 10px; overflow: hidden; }\n        .progress-fill { background: #4caf50; height: 100%; transition: width 0.3s; }\n        .phase { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }\n        .achievement { background: #e8f5e8; padding: 10px; margin: 5px 0; border-radius: 5px; }\n        .issue { background: #ffe8e8; padding: 10px; margin: 5px 0; border-radius: 5px; }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h1>Perfect Codebase Campaign Report</h1>\n        <p>Generated: ${report.generatedAt.toLocaleString()}</p>\n        <p class=\"status-${report.overallStatus.toLowerCase()}\">Status: ${report.overallStatus}</p>\n        <div class=\"progress-bar\">\n            <div class=\"progress-fill\" style=\"width: ${report.overallProgress}%\"></div>\n        </div>\n        <p>Progress: ${report.overallProgress}%</p>\n    </div>\n\n    <h2>Executive Summary</h2>\n    <p>${report.executiveSummary}</p>\n\n    <h2>Phase Progress</h2>\n    ${report.phases.map(phase => `\n        <div class=\"phase\">\n            <h3>${phase.phaseName}</h3>\n            <p>Status: ${phase.status}</p>\n            <p>Progress: ${phase.progress}%</p>\n            <p>Blockers: ${phase.blockers.length > 0 ? phase.blockers.join(', ') : 'None'}</p>\n        </div>\n    `).join('')}\n\n    <h2>Key Achievements</h2>\n    ${report.keyAchievements.map(achievement => `\n        <div class=\"achievement\">\n            <h4>${achievement.title}</h4>\n            <p>${achievement.description}</p>\n            <p>Impact: ${achievement.impact}</p>\n        </div>\n    `).join('')}\n\n    <h2>Critical Issues</h2>\n    ${report.criticalIssues.map(issue => `\n        <div class=\"issue\">\n            <h4>${issue.title}</h4>\n            <p>${issue.description}</p>\n            <p>Severity: ${issue.severity}</p>\n        </div>\n    `).join('')}\n</body>\n</html>`;\n  }\n\n  private generateMarkdownReport(report: CampaignSummaryReport): string {\n    return `# Perfect Codebase Campaign Report\n\n**Generated:** ${report.generatedAt.toISOString()}\n**Status:** ${report.overallStatus}\n**Progress:** ${report.overallProgress}%\n\n## Executive Summary\n\n${report.executiveSummary}\n\n## Phase Progress\n\n${report.phases.map(phase => `\n### ${phase.phaseName}\n- **Status:** ${phase.status}\n- **Progress:** ${phase.progress}%\n- **Blockers:** ${phase.blockers.length > 0 ? phase.blockers.join(', ') : 'None'}\n`).join('')}\n\n## Key Achievements\n\n${report.keyAchievements.map(achievement => `\n### ${achievement.title}\n${achievement.description}\n- **Impact:** ${achievement.impact}\n- **Phase:** ${achievement.phase}\n`).join('')}\n\n## Critical Issues\n\n${report.criticalIssues.map(issue => `\n### ${issue.title}\n${issue.description}\n- **Severity:** ${issue.severity}\n- **Phase:** ${issue.phase}\n`).join('')}\n\n## Performance Metrics\n\n- **TypeScript Errors:** ${report.performanceMetrics.typeScriptErrors.current} (${report.performanceMetrics.typeScriptErrors.reduction} reduced)\n- **Linting Warnings:** ${report.performanceMetrics.lintingWarnings.current} (${report.performanceMetrics.lintingWarnings.reduction} reduced)\n- **Build Time:** ${report.performanceMetrics.buildPerformance.currentTime}s (target: ${report.performanceMetrics.buildPerformance.targetTime}s)\n- **Enterprise Systems:** ${report.performanceMetrics.enterpriseSystems.current} (target: ${report.performanceMetrics.enterpriseSystems.target})\n`;\n  }\n\n  private generateCSVReport(report: CampaignSummaryReport): string {\n    const headers = ['Phase', 'Status', 'Progress', 'Blockers'];\n    const rows = report.phases.map(phase => [\n      phase.phaseName,\n      phase.status,\n      phase.progress.toString(),\n      phase.blockers.join('; ')\n    ]);\n\n    return [headers, ...rows].map(row => row.join(',')).join('\\n');\n  }\n\n  private generateRecentActivity(): ActivityItem[] {\n    // This would be implemented with actual activity tracking\n    return [\n      {\n        timestamp: new Date(),\n        type: 'milestone',\n        description: 'Phase validation completed',\n        phase: 'phase1'\n      }\n    ];\n  }\n\n  // Helper methods\n  private extractKeyMetrics(validation: PhaseValidationResult): Record<string, number> {\n    return {\n      completionPercentage: validation.completionPercentage,\n      milestonesCompleted: validation.milestones.filter(m => m.success).length,\n      totalMilestones: validation.milestones.length,\n      criticalFailures: validation.criticalFailures.length\n    };\n  }\n\n  private generatePhaseAchievements(validation: PhaseValidationResult, metrics: DetailedMetrics): string[] {\n    return validation.milestones\n      .filter(m => m.success)\n      .map(m => `${m.milestone} completed successfully`);\n  }\n\n  private generatePhaseIssues(validation: PhaseValidationResult): string[] {\n    return validation.criticalFailures;\n  }\n\n  private generatePhaseRecommendations(validation: PhaseValidationResult): string[] {\n    return validation.nextSteps;\n  }\n\n  private estimateResolutionTime(failure: string): number {\n    // Simple heuristic based on failure type\n    if (failure.includes('TypeScript')) return 4;\n    if (failure.includes('linting')) return 2;\n    if (failure.includes('build')) return 6;\n    return 3;\n  }\n\n  private determinePriority(step: string): RecommendationPriority {\n    if (step.includes('critical') || step.includes('blocker')) return RecommendationPriority.URGENT;\n    if (step.includes('error') || step.includes('failure')) return RecommendationPriority.HIGH;\n    return RecommendationPriority.MEDIUM;\n  }\n\n  private estimateImpact(step: string): string {\n    if (step.includes('zero') || step.includes('complete')) return 'High - Milestone completion';\n    if (step.includes('reduce') || step.includes('improve')) return 'Medium - Incremental improvement';\n    return 'Low - Maintenance task';\n  }\n\n  private generateActionItems(step: string): string[] {\n    // Generate specific action items based on the step\n    return [\n      `Execute: ${step}`,\n      'Validate results',\n      'Update progress tracking'\n    ];\n  }\n\n  private getStatusColor(status: CampaignStatus): string {\n    switch (status) {\n      case CampaignStatus.COMPLETED: return '#4caf50';\n      case CampaignStatus.IN_PROGRESS: return '#2196f3';\n      case CampaignStatus.BLOCKED: return '#ff9800';\n      case CampaignStatus.FAILED: return '#f44336';\n      default: return '#757575';\n    }\n  }\n\n  /**\n   * Get report history\n   */\n  getReportHistory(): CampaignSummaryReport[] {\n    return [...this.reportHistory];\n  }\n\n  /**\n   * Clear report history\n   */\n  clearReportHistory(): void {\n    this.reportHistory = [];\n    console.log('📊 Report history cleared');\n  }\n}\n\ninterface ActivityItem {\n  timestamp: Date;\n  type: string;\n  description: string;\n  phase: string;\n}"],"version":3}