{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/CodeQualityAutomationSystem.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/CodeQualityAutomationSystem.ts"],"sourcesContent":["/**\n * Code Quality Automation System\n * Unified system integrating import cleanup, linting/formatting, and dependency security\n * Part of the Kiro Optimization Campaign System\n */\n\nimport { ImportCleanupSystem, ImportCleanupConfig, DEFAULT_IMPORT_CLEANUP_CONFIG } from './ImportCleanupSystem';\nimport { LintingFormattingSystem, LintingFormattingConfig, DEFAULT_LINTING_FORMATTING_CONFIG } from './LintingFormattingSystem';\nimport { DependencySecurityMonitor, DependencySecurityConfig, DEFAULT_DEPENDENCY_SECURITY_CONFIG } from './DependencySecurityMonitor';\nimport { logger } from '../../utils/logger';\n\nexport interface CodeQualityAutomationConfig {\n  importCleanup: ImportCleanupConfig;\n  lintingFormatting: LintingFormattingConfig;\n  dependencySecurity: DependencySecurityConfig;\n  executionOrder: AutomationPhase[];\n  globalSettings: GlobalAutomationSettings;\n}\n\nexport interface GlobalAutomationSettings {\n  maxConcurrentOperations: number;\n  safetyValidationEnabled: boolean;\n  buildValidationFrequency: number;\n  rollbackOnFailure: boolean;\n  continueOnError: boolean;\n  reportingEnabled: boolean;\n}\n\nexport interface AutomationPhase {\n  name: string;\n  description: string;\n  system: 'importCleanup' | 'lintingFormatting' | 'dependencySecurity';\n  enabled: boolean;\n  dependencies: string[];\n  criticalFailure: boolean;\n}\n\nexport interface CodeQualityAutomationResult {\n  overallSuccess: boolean;\n  phasesExecuted: number;\n  phasesSucceeded: number;\n  phasesFailed: number;\n  totalExecutionTime: number;\n  phaseResults: PhaseExecutionResult[];\n  globalMetrics: GlobalQualityMetrics;\n  errors: string[];\n  warnings: string[];\n  recommendations: string[];\n}\n\nexport interface PhaseExecutionResult {\n  phaseName: string;\n  system: string;\n  success: boolean;\n  executionTime: number;\n  result: any;\n  errors: string[];\n  warnings: string[];\n}\n\nexport interface GlobalQualityMetrics {\n  filesProcessed: number;\n  importIssuesFixed: number;\n  lintingViolationsFixed: number;\n  formattingIssuesFixed: number;\n  securityVulnerabilitiesFixed: number;\n  dependencyUpdatesApplied: number;\n  buildValidationsPassed: number;\n  buildValidationsFailed: number;\n}\n\nexport class CodeQualityAutomationSystem {\n  private config: CodeQualityAutomationConfig;\n  private importCleanupSystem: ImportCleanupSystem;\n  private lintingFormattingSystem: LintingFormattingSystem;\n  private dependencySecurityMonitor: DependencySecurityMonitor;\n\n  constructor(config: CodeQualityAutomationConfig) {\n    this.config = config;\n    this.importCleanupSystem = new ImportCleanupSystem(config.importCleanup);\n    this.lintingFormattingSystem = new LintingFormattingSystem(config.lintingFormatting);\n    this.dependencySecurityMonitor = new DependencySecurityMonitor(config.dependencySecurity);\n  }\n\n  /**\n   * Execute the complete code quality automation workflow\n   */\n  async executeAutomation(targetFiles?: string[]): Promise<CodeQualityAutomationResult> {\n    const startTime = Date.now();\n    logger.info('Starting code quality automation system');\n\n    const result: CodeQualityAutomationResult = {\n      overallSuccess: true,\n      phasesExecuted: 0,\n      phasesSucceeded: 0,\n      phasesFailed: 0,\n      totalExecutionTime: 0,\n      phaseResults: [],\n      globalMetrics: {\n        filesProcessed: 0,\n        importIssuesFixed: 0,\n        lintingViolationsFixed: 0,\n        formattingIssuesFixed: 0,\n        securityVulnerabilitiesFixed: 0,\n        dependencyUpdatesApplied: 0,\n        buildValidationsPassed: 0,\n        buildValidationsFailed: 0\n      },\n      errors: [],\n      warnings: [],\n      recommendations: []\n    };\n\n    try {\n      // Execute phases in configured order\n      const enabledPhases = this.config.executionOrder.filter(phase => phase.enabled);\n      \n      for (const phase of enabledPhases) {\n        // Check dependencies\n        const dependenciesMet = await this.checkPhaseDependencies(phase, result.phaseResults);\n        if (!dependenciesMet) {\n          result.warnings.push(`Skipping phase ${phase.name} - dependencies not met`);\n          continue;\n        }\n\n        logger.info(`Executing phase: ${phase.name}`);\n        const phaseResult = await this.executePhase(phase, targetFiles);\n        \n        result.phaseResults.push(phaseResult);\n        result.phasesExecuted++;\n\n        if (phaseResult.success) {\n          result.phasesSucceeded++;\n          this.updateGlobalMetrics(result.globalMetrics, phaseResult);\n        } else {\n          result.phasesFailed++;\n          result.errors.push(...phaseResult.errors);\n          \n          if (phase.criticalFailure) {\n            result.overallSuccess = false;\n            if (!this.config.globalSettings.continueOnError) {\n              logger.error(`Critical phase ${phase.name} failed, stopping execution`);\n              break;\n            }\n          }\n        }\n\n        // Validate build after critical phases\n        if (this.config.globalSettings.safetyValidationEnabled && \n            (phase.criticalFailure || result.phasesExecuted % this.config.globalSettings.buildValidationFrequency === 0)) {\n          const buildValid = await this.validateBuild();\n          if (buildValid) {\n            result.globalMetrics.buildValidationsPassed++;\n          } else {\n            result.globalMetrics.buildValidationsFailed++;\n            result.errors.push(`Build validation failed after phase ${phase.name}`);\n            \n            if (this.config.globalSettings.rollbackOnFailure) {\n              logger.warn(`Rolling back changes due to build failure`);\n              // Rollback logic would be implemented here\n            }\n          }\n        }\n      }\n\n      // Generate final recommendations\n      result.recommendations = this.generateRecommendations(result);\n      \n      result.totalExecutionTime = Date.now() - startTime;\n      result.overallSuccess = result.overallSuccess && result.phasesFailed === 0;\n\n      logger.info(`Code quality automation completed in ${result.totalExecutionTime}ms`, {\n        phasesExecuted: result.phasesExecuted,\n        phasesSucceeded: result.phasesSucceeded,\n        phasesFailed: result.phasesFailed,\n        overallSuccess: result.overallSuccess\n      });\n\n      return result;\n\n    } catch (error) {\n      logger.error('Code quality automation system failed', error);\n      result.overallSuccess = false;\n      result.errors.push(`System failure: ${error.message}`);\n      result.totalExecutionTime = Date.now() - startTime;\n      return result;\n    }\n  }\n\n  /**\n   * Execute a specific automation phase\n   */\n  async executePhase(phase: AutomationPhase, targetFiles?: string[]): Promise<PhaseExecutionResult> {\n    const startTime = Date.now();\n    \n    const phaseResult: PhaseExecutionResult = {\n      phaseName: phase.name,\n      system: phase.system,\n      success: false,\n      executionTime: 0,\n      result: null,\n      errors: [],\n      warnings: []\n    };\n\n    try {\n      switch (phase.system) {\n        case 'importCleanup':\n          phaseResult.result = await this.importCleanupSystem.executeCleanup(targetFiles);\n          phaseResult.success = phaseResult.result.buildValidationPassed && phaseResult.result.errors.length === 0;\n          phaseResult.errors = phaseResult.result.errors;\n          phaseResult.warnings = phaseResult.result.warnings;\n          break;\n\n        case 'lintingFormatting':\n          phaseResult.result = await this.lintingFormattingSystem.executeLintingAndFormatting(targetFiles);\n          phaseResult.success = phaseResult.result.buildValidationPassed && phaseResult.result.errors.length === 0;\n          phaseResult.errors = phaseResult.result.errors;\n          phaseResult.warnings = phaseResult.result.warnings;\n          break;\n\n        case 'dependencySecurity':\n          phaseResult.result = await this.dependencySecurityMonitor.executeDependencySecurityMonitoring();\n          phaseResult.success = phaseResult.result.compatibilityTestsPassed && phaseResult.result.errors.length === 0;\n          phaseResult.errors = phaseResult.result.errors;\n          phaseResult.warnings = phaseResult.result.warnings;\n          break;\n\n        default:\n          throw new Error(`Unknown system: ${phase.system}`);\n      }\n\n      phaseResult.executionTime = Date.now() - startTime;\n      return phaseResult;\n\n    } catch (error) {\n      phaseResult.success = false;\n      phaseResult.errors.push(`Phase execution failed: ${error.message}`);\n      phaseResult.executionTime = Date.now() - startTime;\n      return phaseResult;\n    }\n  }\n\n  /**\n   * Generate comprehensive automation report\n   */\n  generateReport(result: CodeQualityAutomationResult): string {\n    const report = [];\n    \n    report.push('# Code Quality Automation Report');\n    report.push('');\n    report.push(`**Execution Date:** ${new Date().toISOString()}`);\n    report.push(`**Total Execution Time:** ${result.totalExecutionTime}ms`);\n    report.push(`**Overall Success:** ${result.overallSuccess ? '✅' : '❌'}`);\n    report.push('');\n\n    // Executive Summary\n    report.push('## Executive Summary');\n    report.push('');\n    report.push(`- Phases Executed: ${result.phasesExecuted}`);\n    report.push(`- Phases Succeeded: ${result.phasesSucceeded}`);\n    report.push(`- Phases Failed: ${result.phasesFailed}`);\n    report.push(`- Files Processed: ${result.globalMetrics.filesProcessed}`);\n    report.push('');\n\n    // Global Metrics\n    report.push('## Quality Improvements');\n    report.push('');\n    report.push(`- Import Issues Fixed: ${result.globalMetrics.importIssuesFixed}`);\n    report.push(`- Linting Violations Fixed: ${result.globalMetrics.lintingViolationsFixed}`);\n    report.push(`- Formatting Issues Fixed: ${result.globalMetrics.formattingIssuesFixed}`);\n    report.push(`- Security Vulnerabilities Fixed: ${result.globalMetrics.securityVulnerabilitiesFixed}`);\n    report.push(`- Dependency Updates Applied: ${result.globalMetrics.dependencyUpdatesApplied}`);\n    report.push('');\n\n    // Phase Results\n    report.push('## Phase Execution Details');\n    report.push('');\n    \n    for (const phaseResult of result.phaseResults) {\n      const statusIcon = phaseResult.success ? '✅' : '❌';\n      report.push(`### ${statusIcon} ${phaseResult.phaseName}`);\n      report.push('');\n      report.push(`- System: ${phaseResult.system}`);\n      report.push(`- Execution Time: ${phaseResult.executionTime}ms`);\n      report.push(`- Success: ${phaseResult.success}`);\n      \n      if (phaseResult.errors.length > 0) {\n        report.push('- Errors:');\n        phaseResult.errors.forEach(error => report.push(`  - ${error}`));\n      }\n      \n      if (phaseResult.warnings.length > 0) {\n        report.push('- Warnings:');\n        phaseResult.warnings.forEach(warning => report.push(`  - ${warning}`));\n      }\n      \n      report.push('');\n    }\n\n    // Recommendations\n    if (result.recommendations.length > 0) {\n      report.push('## Recommendations');\n      report.push('');\n      result.recommendations.forEach(rec => report.push(`- ${rec}`));\n      report.push('');\n    }\n\n    // Errors and Warnings\n    if (result.errors.length > 0) {\n      report.push('## Errors');\n      report.push('');\n      result.errors.forEach(error => report.push(`- ❌ ${error}`));\n      report.push('');\n    }\n\n    if (result.warnings.length > 0) {\n      report.push('## Warnings');\n      report.push('');\n      result.warnings.forEach(warning => report.push(`- ⚠️ ${warning}`));\n      report.push('');\n    }\n\n    return report.join('\\n');\n  }\n\n  // Private helper methods\n\n  private async checkPhaseDependencies(phase: AutomationPhase, completedPhases: PhaseExecutionResult[]): Promise<boolean> {\n    if (phase.dependencies.length === 0) {\n      return true;\n    }\n\n    const completedPhaseNames = completedPhases\n      .filter(p => p.success)\n      .map(p => p.phaseName);\n\n    return phase.dependencies.every(dep => completedPhaseNames.includes(dep));\n  }\n\n  private updateGlobalMetrics(metrics: GlobalQualityMetrics, phaseResult: PhaseExecutionResult): void {\n    const { result } = phaseResult;\n\n    switch (phaseResult.system) {\n      case 'importCleanup':\n        metrics.filesProcessed += result.filesProcessed?.length || 0;\n        metrics.importIssuesFixed += (result.unusedImportsRemoved || 0) + (result.importsOrganized || 0);\n        break;\n\n      case 'lintingFormatting':\n        metrics.filesProcessed += result.filesProcessed?.length || 0;\n        metrics.lintingViolationsFixed += result.lintingViolationsFixed || 0;\n        metrics.formattingIssuesFixed += result.formattingIssuesFixed || 0;\n        break;\n\n      case 'dependencySecurity':\n        metrics.securityVulnerabilitiesFixed += result.securityPatchesApplied || 0;\n        metrics.dependencyUpdatesApplied += result.updatesApplied || 0;\n        break;\n    }\n  }\n\n  private async validateBuild(): Promise<boolean> {\n    try {\n      const { execSync } = require('child_process');\n      execSync('yarn build', {\n        encoding: 'utf8',\n        stdio: 'pipe',\n        timeout: 120000\n      });\n      return true;\n    } catch (error) {\n      logger.warn('Build validation failed', error);\n      return false;\n    }\n  }\n\n  private generateRecommendations(result: CodeQualityAutomationResult): string[] {\n    const recommendations: string[] = [];\n\n    // Success recommendations\n    if (result.overallSuccess) {\n      recommendations.push('✅ All automation phases completed successfully');\n      \n      if (result.globalMetrics.importIssuesFixed > 0) {\n        recommendations.push(`🧹 Cleaned up ${result.globalMetrics.importIssuesFixed} import issues`);\n      }\n      \n      if (result.globalMetrics.lintingViolationsFixed > 0) {\n        recommendations.push(`🔧 Fixed ${result.globalMetrics.lintingViolationsFixed} linting violations`);\n      }\n      \n      if (result.globalMetrics.securityVulnerabilitiesFixed > 0) {\n        recommendations.push(`🔒 Applied ${result.globalMetrics.securityVulnerabilitiesFixed} security patches`);\n      }\n    }\n\n    // Failure recommendations\n    if (result.phasesFailed > 0) {\n      recommendations.push(`⚠️ ${result.phasesFailed} phases failed - review errors and re-run`);\n    }\n\n    // Build validation recommendations\n    if (result.globalMetrics.buildValidationsFailed > 0) {\n      recommendations.push('🚨 Build validations failed - check for breaking changes');\n    }\n\n    // Performance recommendations\n    if (result.totalExecutionTime > 300000) { // 5 minutes\n      recommendations.push('⏱️ Automation took longer than expected - consider optimizing batch sizes');\n    }\n\n    // Maintenance recommendations\n    const totalImprovements = result.globalMetrics.importIssuesFixed + \n                             result.globalMetrics.lintingViolationsFixed + \n                             result.globalMetrics.formattingIssuesFixed;\n    \n    if (totalImprovements > 100) {\n      recommendations.push('📈 High number of issues fixed - consider running automation more frequently');\n    }\n\n    return recommendations;\n  }\n}\n\n/**\n * Default configuration for code quality automation\n */\nexport const DEFAULT_CODE_QUALITY_AUTOMATION_CONFIG: CodeQualityAutomationConfig = {\n  importCleanup: DEFAULT_IMPORT_CLEANUP_CONFIG,\n  lintingFormatting: DEFAULT_LINTING_FORMATTING_CONFIG,\n  dependencySecurity: DEFAULT_DEPENDENCY_SECURITY_CONFIG,\n  executionOrder: [\n    {\n      name: 'Import Cleanup',\n      description: 'Clean up unused imports and organize import statements',\n      system: 'importCleanup',\n      enabled: true,\n      dependencies: [],\n      criticalFailure: false\n    },\n    {\n      name: 'Linting and Formatting',\n      description: 'Fix linting violations and format code consistently',\n      system: 'lintingFormatting',\n      enabled: true,\n      dependencies: ['Import Cleanup'],\n      criticalFailure: false\n    },\n    {\n      name: 'Dependency Security',\n      description: 'Scan for vulnerabilities and update dependencies',\n      system: 'dependencySecurity',\n      enabled: true,\n      dependencies: [],\n      criticalFailure: true\n    }\n  ],\n  globalSettings: {\n    maxConcurrentOperations: 1,\n    safetyValidationEnabled: true,\n    buildValidationFrequency: 2,\n    rollbackOnFailure: false,\n    continueOnError: true,\n    reportingEnabled: true\n  }\n};"],"version":3}