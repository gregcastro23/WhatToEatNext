{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/ExportTransformationEngine.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/ExportTransformationEngine.ts"],"sourcesContent":["/**\n * Export Transformation Engine\n * Perfect Codebase Campaign - Phase 3 Implementation\n *\n * Orchestrates the complete transformation of unused exports into\n * enterprise intelligence systems with comprehensive safety protocols.\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { execSync } from 'child_process';\nimport {\n  UnusedExportAnalyzer,\n  FileAnalysis,\n  AnalysisResult,\n} from './UnusedExportAnalyzer';\nimport {\n  EnterpriseIntelligenceGenerator,\n  GenerationResult,\n  GenerationSummary,\n} from './EnterpriseIntelligenceGenerator';\nimport { SafetyProtocol } from './SafetyProtocol';\nimport { ProgressTracker } from './ProgressTracker';\n\nexport interface TransformationConfig {\n  batchSize: number;\n  safetyThreshold: number;\n  buildValidationEnabled: boolean;\n  testValidationEnabled: boolean;\n  rollbackOnFailure: boolean;\n  outputDirectory: string;\n  backupDirectory: string;\n  maxRetries: number;\n  dryRun: boolean;\n}\n\nexport interface TransformationBatch {\n  id: string;\n  files: FileAnalysis[];\n  priority: BatchPriority;\n  estimatedDuration: number;\n  safetyScore: number;\n  transformationCandidates: number;\n}\n\nexport interface TransformationResult {\n  batchId: string;\n  success: boolean;\n  filesProcessed: number;\n  systemsGenerated: number;\n  errors: TransformationError[];\n  warnings: string[];\n  duration: number;\n  rollbackPerformed: boolean;\n  generationResults: GenerationResult[];\n}\n\nexport interface TransformationSummary {\n  totalBatches: number;\n  successfulBatches: number;\n  failedBatches: number;\n  totalFilesProcessed: number;\n  totalSystemsGenerated: number;\n  totalErrors: number;\n  totalWarnings: number;\n  totalDuration: number;\n  averageBatchDuration: number;\n  successRate: number;\n  generationSummary: GenerationSummary;\n}\n\nexport interface TransformationError {\n  type: TransformationErrorType;\n  message: string;\n  filePath?: string;\n  exportName?: string;\n  severity: ErrorSeverity;\n  recoverable: boolean;\n  timestamp: Date;\n}\n\nexport interface ValidationResult {\n  buildSuccess: boolean;\n  testSuccess: boolean;\n  lintSuccess: boolean;\n  errors: string[];\n  warnings: string[];\n  duration: number;\n}\n\nexport enum BatchPriority {\n  HIGH = 'HIGH',\n  MEDIUM = 'MEDIUM',\n  LOW = 'LOW',\n}\n\nexport enum TransformationErrorType {\n  ANALYSIS_FAILED = 'ANALYSIS_FAILED',\n  GENERATION_FAILED = 'GENERATION_FAILED',\n  BUILD_FAILED = 'BUILD_FAILED',\n  TEST_FAILED = 'TEST_FAILED',\n  FILE_WRITE_FAILED = 'FILE_WRITE_FAILED',\n  ROLLBACK_FAILED = 'ROLLBACK_FAILED',\n  VALIDATION_FAILED = 'VALIDATION_FAILED',\n}\n\nexport enum ErrorSeverity {\n  LOW = 'LOW',\n  MEDIUM = 'MEDIUM',\n  HIGH = 'HIGH',\n  CRITICAL = 'CRITICAL',\n}\n\nexport class ExportTransformationEngine {\n  private readonly config: TransformationConfig;\n  private readonly analyzer: UnusedExportAnalyzer;\n  private readonly generator: EnterpriseIntelligenceGenerator;\n  private readonly safetyProtocol: SafetyProtocol;\n  private readonly progressTracker: ProgressTracker;\n  private readonly transformationLog: TransformationError[];\n\n  constructor(config: Partial<TransformationConfig> = {}) {\n    this.config = {\n      batchSize: 10,\n      safetyThreshold: 80,\n      buildValidationEnabled: true,\n      testValidationEnabled: true,\n      rollbackOnFailure: true,\n      outputDirectory: 'src/intelligence',\n      backupDirectory: '.transformation-backups',\n      maxRetries: 3,\n      dryRun: false,\n      ...config,\n    };\n\n    this.analyzer = new UnusedExportAnalyzer();\n    // ✅ Pattern MM-1: Safe constructor call with proper arguments\n    this.generator = new EnterpriseIntelligenceGenerator(\n      this.config.outputDirectory\n    );\n    this.safetyProtocol = new SafetyProtocol();\n    this.progressTracker = new ProgressTracker();\n    this.transformationLog = [];\n  }\n\n  /**\n   * Execute complete transformation campaign\n   */\n  async executeTransformation(): Promise<TransformationSummary> {\n    console.log('🚀 Starting Export Transformation Campaign...\\n');\n\n    const startTime = Date.now();\n\n    try {\n      // Phase 1: Analysis\n      console.log('📊 Phase 1: Analyzing unused exports...');\n      const analysisResult = await this.performAnalysis();\n\n      // Phase 2: Batch Planning\n      console.log('📋 Phase 2: Planning transformation batches...');\n      const batches = await this.planTransformationBatches(analysisResult);\n\n      // Phase 3: Safety Preparation\n      console.log('🛡️  Phase 3: Preparing safety protocols...');\n      await this.prepareSafetyProtocols();\n\n      // Phase 4: Batch Execution\n      console.log('⚡ Phase 4: Executing transformation batches...');\n      const results = await this.executeBatches(batches);\n\n      // Phase 5: Final Validation\n      console.log('✅ Phase 5: Final validation and cleanup...');\n      await this.performFinalValidation();\n\n      const endTime = Date.now();\n      const totalDuration = (endTime - startTime) / 1000;\n\n      const summary = this.generateTransformationSummary(\n        results,\n        totalDuration\n      );\n\n      console.log('\\n🎉 Export Transformation Campaign completed!');\n      this.displaySummary(summary);\n\n      return summary;\n    } catch (error) {\n      console.error('❌ Transformation campaign failed:', error);\n      await this.handleCriticalFailure(error);\n      throw error;\n    }\n  }\n\n  /**\n   * Perform unused export analysis\n   */\n  private async performAnalysis(): Promise<AnalysisResult> {\n    try {\n      const result = await this.analyzer.analyzeUnusedExports();\n\n      console.log(`✅ Analysis completed:`);\n      console.log(`   - Files analyzed: ${result.totalFiles}`);\n      console.log(`   - Unused exports found: ${result.totalUnusedExports}`);\n      console.log(\n        `   - High priority files: ${result.highPriorityFiles.length}`\n      );\n      console.log(\n        `   - Medium priority files: ${result.mediumPriorityFiles.length}`\n      );\n      console.log(`   - Low priority files: ${result.lowPriorityFiles.length}`);\n\n      return result;\n    } catch (error) {\n      // ✅ Pattern MM-1: Safe type assertion for error handling\n      this.logError({\n        type: TransformationErrorType.ANALYSIS_FAILED,\n        message: `Analysis failed: ${String((error as Error)?.message || 'Unknown error')}`,\n        severity: ErrorSeverity.CRITICAL,\n        recoverable: false,\n        timestamp: new Date(),\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Plan transformation batches based on analysis results\n   */\n  private async planTransformationBatches(\n    analysisResult: AnalysisResult\n  ): Promise<TransformationBatch[]> {\n    const batches: TransformationBatch[] = [];\n\n    // Create batches for high priority files\n    const highPriorityBatches = this.createBatchesFromFiles(\n      analysisResult.highPriorityFiles,\n      BatchPriority.HIGH,\n      'high'\n    );\n    batches.push(...highPriorityBatches);\n\n    // Create batches for medium priority files\n    const mediumPriorityBatches = this.createBatchesFromFiles(\n      analysisResult.mediumPriorityFiles,\n      BatchPriority.MEDIUM,\n      'medium'\n    );\n    batches.push(...mediumPriorityBatches);\n\n    // Create batches for low priority files\n    const lowPriorityBatches = this.createBatchesFromFiles(\n      analysisResult.lowPriorityFiles,\n      BatchPriority.LOW,\n      'low'\n    );\n    batches.push(...lowPriorityBatches);\n\n    console.log(`✅ Planned ${batches.length} transformation batches:`);\n    console.log(`   - High priority: ${highPriorityBatches.length} batches`);\n    console.log(\n      `   - Medium priority: ${mediumPriorityBatches.length} batches`\n    );\n    console.log(`   - Low priority: ${lowPriorityBatches.length} batches`);\n\n    return batches;\n  }\n\n  /**\n   * Create batches from files\n   */\n  private createBatchesFromFiles(\n    files: FileAnalysis[],\n    priority: BatchPriority,\n    priorityLabel: string\n  ): TransformationBatch[] {\n    const batches: TransformationBatch[] = [];\n    const batchSize = this.config.batchSize;\n\n    for (let i = 0; i < files.length; i += batchSize) {\n      const batchFiles = files.slice(i, i + batchSize);\n      const batchNumber = Math.floor(i / batchSize) + 1;\n\n      const batch: TransformationBatch = {\n        id: `${priorityLabel}-batch-${batchNumber}`,\n        files: batchFiles,\n        priority,\n        estimatedDuration: this.estimateBatchDuration(batchFiles),\n        safetyScore: this.calculateBatchSafetyScore(batchFiles),\n        transformationCandidates: batchFiles.reduce(\n          (sum, f) => sum + f.transformationCandidates.length,\n          0\n        ),\n      };\n\n      batches.push(batch);\n    }\n\n    return batches;\n  }\n\n  /**\n   * Estimate batch processing duration\n   */\n  private estimateBatchDuration(files: FileAnalysis[]): number {\n    // Base time per file + complexity factor\n    const baseTimePerFile = 2; // seconds\n    // ✅ Pattern KK-9: Safe arithmetic operations for complexity calculation\n    const complexityFactor = files.reduce((sum, f) => {\n      return (\n        Number(sum || 0) +\n        f.transformationCandidates.reduce((candidateSum, c) => {\n          const complexityMultiplier =\n            {\n              SIMPLE: 1,\n              MODERATE: 1.5,\n              COMPLEX: 2,\n              VERY_COMPLEX: 3,\n            }[c.transformationComplexity] || 1;\n          return Number(candidateSum || 0) + Number(complexityMultiplier || 1);\n        }, 0)\n      );\n    }, 0);\n\n    return Math.ceil(\n      Number(files.length || 0) * Number(baseTimePerFile || 2) +\n        Number(complexityFactor || 0)\n    );\n  }\n\n  /**\n   * Calculate batch safety score\n   */\n  private calculateBatchSafetyScore(files: FileAnalysis[]): number {\n    if (files.length === 0) return 100;\n\n    // ✅ Pattern KK-9: Safe arithmetic operations for safety score calculation\n    const averageSafetyScore =\n      files.reduce(\n        (sum, f) => Number(sum || 0) + Number(f.safetyScore || 0),\n        0\n      ) / Number(files.length || 1);\n    const complexityPenalty = files.reduce((penalty, f) => {\n      const highComplexityCandidates = f.transformationCandidates.filter(\n        c =>\n          c.transformationComplexity === 'COMPLEX' ||\n          c.transformationComplexity === 'VERY_COMPLEX'\n      ).length;\n      return Number(penalty || 0) + Number(highComplexityCandidates || 0) * 2;\n    }, 0);\n\n    return Math.max(\n      0,\n      Math.min(\n        100,\n        Number(averageSafetyScore || 0) - Number(complexityPenalty || 0)\n      )\n    );\n  }\n\n  /**\n   * Prepare safety protocols\n   */\n  private async prepareSafetyProtocols(): Promise<void> {\n    try {\n      // Create backup directory\n      await this.ensureDirectory(this.config.backupDirectory);\n\n      // ✅ Pattern MM-1: Safe method call for safety protocol\n      const checkpointId = await (\n        this.safetyProtocol as any\n      ).createSafetyCheckpoint('transformation-start');\n      console.log(`✅ Safety checkpoint created: ${checkpointId}`);\n\n      // Validate build before starting\n      if (this.config.buildValidationEnabled) {\n        const buildValid = await this.validateBuild();\n        if (!buildValid.buildSuccess) {\n          throw new Error('Build validation failed before transformation');\n        }\n        console.log('✅ Pre-transformation build validation passed');\n      }\n    } catch (error) {\n      this.logError({\n        type: TransformationErrorType.VALIDATION_FAILED,\n        message: `Safety preparation failed: ${String((error as Error)?.message || 'Unknown error')}`,\n        severity: ErrorSeverity.CRITICAL,\n        recoverable: false,\n        timestamp: new Date(),\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Execute transformation batches\n   */\n  private async executeBatches(\n    batches: TransformationBatch[]\n  ): Promise<TransformationResult[]> {\n    const results: TransformationResult[] = [];\n\n    for (let i = 0; i < batches.length; i++) {\n      const batch = batches[i];\n      console.log(\n        `\\n🔄 Processing batch ${i + 1}/${batches.length}: ${batch.id}`\n      );\n      console.log(`   Priority: ${batch.priority}`);\n      console.log(`   Files: ${batch.files.length}`);\n      console.log(`   Candidates: ${batch.transformationCandidates}`);\n      console.log(`   Safety Score: ${batch.safetyScore}`);\n      console.log(`   Estimated Duration: ${batch.estimatedDuration}s`);\n\n      const result = await this.executeBatch(batch);\n      results.push(result);\n\n      if (!result.success && this.config.rollbackOnFailure) {\n        console.log('⚠️  Batch failed, stopping transformation campaign');\n        break;\n      }\n\n      // Progress update\n      // ✅ Pattern KK-9: Safe arithmetic operations for progress calculation\n      const progress =\n        ((Number(i || 0) + 1) / Number(batches.length || 1)) * 100;\n      console.log(`📊 Campaign progress: ${Number(progress || 0).toFixed(1)}%`);\n    }\n\n    return results;\n  }\n\n  /**\n   * Execute a single transformation batch\n   */\n  private async executeBatch(\n    batch: TransformationBatch\n  ): Promise<TransformationResult> {\n    const startTime = Date.now();\n    const result: TransformationResult = {\n      batchId: batch.id,\n      success: false,\n      filesProcessed: 0,\n      systemsGenerated: 0,\n      errors: [],\n      warnings: [],\n      duration: 0,\n      rollbackPerformed: false,\n      generationResults: [],\n    };\n\n    let checkpointId: string | null = null;\n\n    try {\n      // ✅ Pattern MM-1: Safe method call for safety protocol\n      checkpointId = await (this.safetyProtocol as any).createSafetyCheckpoint(\n        `batch-${batch.id}`\n      );\n\n      // Check safety threshold\n      if (batch.safetyScore < this.config.safetyThreshold) {\n        result.warnings.push(\n          `Batch safety score (${batch.safetyScore}) below threshold (${this.config.safetyThreshold})`\n        );\n\n        if (!this.config.dryRun) {\n          throw new Error(`Batch safety score too low: ${batch.safetyScore}`);\n        }\n      }\n\n      // Generate intelligence systems\n      if (this.config.dryRun) {\n        console.log('🔍 DRY RUN: Simulating intelligence system generation...');\n        result.systemsGenerated = batch.transformationCandidates;\n        result.filesProcessed = batch.files.length;\n      } else {\n        console.log('⚡ Generating intelligence systems...');\n        const generationResults =\n          await this.generator.generateIntelligenceSystems(batch.files);\n        result.generationResults = generationResults;\n        result.systemsGenerated = generationResults.length;\n        result.filesProcessed = batch.files.length;\n      }\n\n      // Validate after generation\n      if (this.config.buildValidationEnabled && !this.config.dryRun) {\n        console.log('🔍 Validating build after generation...');\n        const validation = await this.validateBuild();\n        if (!validation.buildSuccess) {\n          throw new Error('Build validation failed after generation');\n        }\n      }\n\n      result.success = true;\n      console.log(`✅ Batch ${batch.id} completed successfully`);\n      console.log(`   Systems generated: ${result.systemsGenerated}`);\n      console.log(`   Files processed: ${result.filesProcessed}`);\n    } catch (error) {\n      // ✅ Pattern MM-1: Safe type assertion for batch error handling\n      console.error(\n        `❌ Batch ${batch.id} failed:`,\n        String((error as Error)?.message || 'Unknown error')\n      );\n\n      const transformationError: TransformationError = {\n        type: TransformationErrorType.GENERATION_FAILED,\n        message: String((error as Error)?.message || 'Unknown error'),\n        severity: ErrorSeverity.HIGH,\n        recoverable: true,\n        timestamp: new Date(),\n      };\n\n      result.errors.push(transformationError);\n      this.logError(transformationError);\n\n      // Attempt rollback\n      if (\n        this.config.rollbackOnFailure &&\n        checkpointId &&\n        !this.config.dryRun\n      ) {\n        try {\n          console.log('🔄 Attempting rollback...');\n          // ✅ Pattern MM-1: Safe method call for rollback\n          await (this.safetyProtocol as any).rollbackToCheckpoint(checkpointId);\n          result.rollbackPerformed = true;\n          console.log('✅ Rollback completed successfully');\n        } catch (rollbackError) {\n          // ✅ Pattern MM-1: Safe type assertion for rollback error\n          console.error(\n            '❌ Rollback failed:',\n            String(\n              (rollbackError as Error)?.message || 'Unknown rollback error'\n            )\n          );\n          result.errors.push({\n            type: TransformationErrorType.ROLLBACK_FAILED,\n            message: String(\n              (rollbackError as Error)?.message || 'Unknown rollback error'\n            ),\n            severity: ErrorSeverity.CRITICAL,\n            recoverable: false,\n            timestamp: new Date(),\n          });\n        }\n      }\n    }\n\n    const endTime = Date.now();\n    result.duration = (endTime - startTime) / 1000;\n\n    return result;\n  }\n\n  /**\n   * Perform final validation\n   */\n  private async performFinalValidation(): Promise<void> {\n    try {\n      if (this.config.dryRun) {\n        console.log('🔍 DRY RUN: Skipping final validation');\n        return;\n      }\n\n      console.log('🔍 Performing final build validation...');\n      const buildValidation = await this.validateBuild();\n\n      if (!buildValidation.buildSuccess) {\n        throw new Error('Final build validation failed');\n      }\n\n      if (this.config.testValidationEnabled) {\n        console.log('🧪 Performing final test validation...');\n        const testValidation = await this.validateTests();\n\n        if (!testValidation.testSuccess) {\n          console.warn('⚠️  Some tests failed, but transformation completed');\n        }\n      }\n\n      console.log('✅ Final validation completed');\n    } catch (error) {\n      this.logError({\n        type: TransformationErrorType.VALIDATION_FAILED,\n        message: `Final validation failed: ${String((error as Error)?.message || 'Unknown error')}`,\n        severity: ErrorSeverity.HIGH,\n        recoverable: true,\n        timestamp: new Date(),\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Validate build\n   */\n  private async validateBuild(): Promise<ValidationResult> {\n    const startTime = Date.now();\n\n    try {\n      const output = execSync('yarn build', {\n        encoding: 'utf-8',\n        timeout: 60000,\n        stdio: 'pipe',\n      });\n\n      const endTime = Date.now();\n\n      return {\n        buildSuccess: true,\n        testSuccess: true,\n        lintSuccess: true,\n        errors: [],\n        warnings: [],\n        duration: (endTime - startTime) / 1000,\n      };\n    } catch (error) {\n      const endTime = Date.now();\n\n      return {\n        buildSuccess: false,\n        testSuccess: false,\n        lintSuccess: false,\n        errors: [String((error as Error)?.message || 'Unknown build error')],\n        warnings: [],\n        duration: (endTime - startTime) / 1000,\n      };\n    }\n  }\n\n  /**\n   * Validate tests\n   */\n  private async validateTests(): Promise<ValidationResult> {\n    const startTime = Date.now();\n\n    try {\n      const output = execSync('yarn test --passWithNoTests', {\n        encoding: 'utf-8',\n        timeout: 120000,\n        stdio: 'pipe',\n      });\n\n      const endTime = Date.now();\n\n      return {\n        buildSuccess: true,\n        testSuccess: true,\n        lintSuccess: true,\n        errors: [],\n        warnings: [],\n        duration: (endTime - startTime) / 1000,\n      };\n    } catch (error) {\n      const endTime = Date.now();\n\n      return {\n        buildSuccess: false,\n        testSuccess: false,\n        lintSuccess: false,\n        errors: [String((error as Error)?.message || 'Unknown test error')],\n        warnings: [],\n        duration: (endTime - startTime) / 1000,\n      };\n    }\n  }\n\n  /**\n   * Handle critical failure\n   */\n  private async handleCriticalFailure(error: any): Promise<void> {\n    console.error(\n      '💥 Critical failure detected, initiating emergency procedures...'\n    );\n\n    try {\n      if (!this.config.dryRun) {\n        await this.safetyProtocol.emergencyRollback();\n        console.log('✅ Emergency rollback completed');\n      }\n    } catch (rollbackError) {\n      console.error(\n        '❌ Emergency rollback failed:',\n        String((rollbackError as Error)?.message || 'Unknown rollback error')\n      );\n    }\n\n    // Save error log\n    const errorLogPath = path.join(\n      this.config.backupDirectory,\n      `error-log-${Date.now()}.json`\n    );\n    await fs.promises.writeFile(\n      errorLogPath,\n      JSON.stringify(\n        {\n          timestamp: new Date().toISOString(),\n          // ✅ Pattern MM-1: Safe type assertion for error logging\n          error: String(\n            (error as Error)?.message || 'Unknown critical failure'\n          ),\n          stack: String((error as Error)?.stack || ''),\n          transformationLog: this.transformationLog,\n        },\n        null,\n        2\n      )\n    );\n\n    console.log(`📝 Error log saved to: ${errorLogPath}`);\n  }\n\n  /**\n   * Generate transformation summary\n   */\n  private generateTransformationSummary(\n    results: TransformationResult[],\n    totalDuration: number\n  ): TransformationSummary {\n    const successfulBatches = results.filter(r => r.success).length;\n    const failedBatches = results.length - successfulBatches;\n    // ✅ Pattern KK-9: Safe arithmetic operations for summary calculations\n    const totalFilesProcessed = results.reduce(\n      (sum, r) => Number(sum || 0) + Number(r.filesProcessed || 0),\n      0\n    );\n    const totalSystemsGenerated = results.reduce(\n      (sum, r) => Number(sum || 0) + Number(r.systemsGenerated || 0),\n      0\n    );\n    const totalErrors = results.reduce(\n      (sum, r) => Number(sum || 0) + Number(r.errors?.length || 0),\n      0\n    );\n    const totalWarnings = results.reduce(\n      (sum, r) => Number(sum || 0) + Number(r.warnings?.length || 0),\n      0\n    );\n    const averageBatchDuration =\n      Number(results.length || 0) > 0\n        ? results.reduce(\n            (sum, r) => Number(sum || 0) + Number(r.duration || 0),\n            0\n          ) / Number(results.length || 1)\n        : 0;\n    const successRate =\n      Number(results.length || 0) > 0\n        ? (Number(successfulBatches || 0) / Number(results.length || 1)) * 100\n        : 0;\n\n    // Generate generation summary from all results\n    const allGenerationResults = results.flatMap(r => r.generationResults);\n    const generationSummary =\n      allGenerationResults.length > 0\n        ? this.generator.generateSummary(allGenerationResults)\n        : {\n            totalSystemsGenerated: 0,\n            totalCapabilitiesAdded: 0,\n            totalIntegrationPoints: 0,\n            averageComplexity: 0,\n            estimatedTotalValue: 0,\n            generationsByCategory: {},\n          };\n\n    return {\n      totalBatches: results.length,\n      successfulBatches,\n      failedBatches,\n      totalFilesProcessed,\n      totalSystemsGenerated,\n      totalErrors,\n      totalWarnings,\n      totalDuration,\n      averageBatchDuration,\n      successRate,\n      generationSummary,\n    };\n  }\n\n  /**\n   * Display transformation summary\n   */\n  private displaySummary(summary: TransformationSummary): void {\n    console.log('\\n📊 TRANSFORMATION CAMPAIGN SUMMARY');\n    console.log('==================================');\n    console.log(`Total batches: ${summary.totalBatches}`);\n    console.log(`Successful batches: ${summary.successfulBatches}`);\n    console.log(`Failed batches: ${summary.failedBatches}`);\n    console.log(`Success rate: ${summary.successRate.toFixed(1)}%`);\n    console.log(`Total files processed: ${summary.totalFilesProcessed}`);\n    console.log(`Total systems generated: ${summary.totalSystemsGenerated}`);\n    console.log(`Total errors: ${summary.totalErrors}`);\n    console.log(`Total warnings: ${summary.totalWarnings}`);\n    console.log(`Total duration: ${summary.totalDuration.toFixed(2)}s`);\n    console.log(\n      `Average batch duration: ${summary.averageBatchDuration.toFixed(2)}s`\n    );\n\n    console.log('\\n🧠 INTELLIGENCE GENERATION SUMMARY');\n    console.log('==================================');\n    console.log(\n      `Total capabilities added: ${summary.generationSummary.totalCapabilitiesAdded}`\n    );\n    console.log(\n      `Total integration points: ${summary.generationSummary.totalIntegrationPoints}`\n    );\n    console.log(\n      `Average complexity: ${summary.generationSummary.averageComplexity.toFixed(1)}`\n    );\n    console.log(\n      `Estimated total value: ${summary.generationSummary.estimatedTotalValue}`\n    );\n\n    if (\n      Object.keys(summary.generationSummary.generationsByCategory).length > 0\n    ) {\n      console.log('\\nGeneration by category:');\n      Object.entries(summary.generationSummary.generationsByCategory).forEach(\n        ([category, count]) => {\n          console.log(`  ${category}: ${count}`);\n        }\n      );\n    }\n  }\n\n  /**\n   * Log transformation error\n   */\n  private logError(error: TransformationError): void {\n    this.transformationLog.push(error);\n\n    const severityEmoji = {\n      [ErrorSeverity.LOW]: '🟡',\n      [ErrorSeverity.MEDIUM]: '🟠',\n      [ErrorSeverity.HIGH]: '🔴',\n      [ErrorSeverity.CRITICAL]: '💥',\n    }[error.severity];\n\n    console.error(`${severityEmoji} [${error.type}] ${error.message}`);\n  }\n\n  /**\n   * Ensure directory exists\n   */\n  private async ensureDirectory(dirPath: string): Promise<void> {\n    try {\n      await fs.promises.access(dirPath);\n    } catch {\n      await fs.promises.mkdir(dirPath, { recursive: true });\n    }\n  }\n\n  /**\n   * Get transformation configuration\n   */\n  getConfig(): TransformationConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Get transformation log\n   */\n  getTransformationLog(): TransformationError[] {\n    return [...this.transformationLog];\n  }\n\n  /**\n   * Clear transformation log\n   */\n  clearTransformationLog(): void {\n    this.transformationLog.length = 0;\n  }\n}\n"],"version":3}