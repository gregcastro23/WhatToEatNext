d386b11b2bec2abcedfb4e58e1750f02
"use strict";
/**
 * Calculation Cache Utility
 *
 * A utility for caching expensive calculations with precise TypeScript typing
 * and performance monitoring.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCacheStats = exports.clearCalculationCache = exports.getCachedCalculation = void 0;
// Global cache store
const calculationCache = {};
// Default TTL is 60 seconds - adjust based on how quickly data changes
const DEFAULT_CACHE_TTL = 60 * 1000;
/**
 * Get a cached calculation result or compute and cache it if not found
 *
 * @param cacheKey - Unique identifier for this calculation
 * @param inputObj - Object representing the calculation inputs (for comparison)
 * @param calculationFn - Function that performs the actual calculation
 * @param ttl - Optional TTL in milliseconds (defaults to 60s)
 * @returns The calculation result (either from cache or freshly computed)
 */
function getCachedCalculation(cacheKey, inputObj, calculationFn, ttl = DEFAULT_CACHE_TTL) {
    // Create a hash of the input for comparison
    const inputHash = JSON.stringify(inputObj);
    const now = Date.now();
    const cached = calculationCache[cacheKey];
    // Check if we have a valid cached result
    if (cached &&
        cached.input === inputHash &&
        (now - cached.timestamp) < ttl) {
        console.log(`ðŸ”„ Cache hit for ${cacheKey} (age: ${Math.round((now - cached.timestamp) / 1000)}s)`);
        return cached.value;
    }
    // Log cache miss
    console.log(`âš¡ Cache miss for ${cacheKey}, calculating...`);
    try {
        // Perform the calculation
        const resultOrPromise = calculationFn();
        // Handle both synchronous and asynchronous calculations
        if (resultOrPromise instanceof Promise) {
            // For async functions, return a promise that caches when resolved
            return resultOrPromise.then(asyncResult => {
                calculationCache[cacheKey] = {
                    value: asyncResult,
                    timestamp: Date.now(),
                    input: inputHash
                };
                return asyncResult;
            });
        }
        else {
            // For synchronous functions, cache immediately
            calculationCache[cacheKey] = {
                value: resultOrPromise,
                timestamp: now,
                input: inputHash
            };
            return resultOrPromise;
        }
    }
    catch (error) {
        console.error(`Error in cached calculation ${cacheKey}:`, error);
        throw error; // Re-throw to let caller handle errors
    }
}
exports.getCachedCalculation = getCachedCalculation;
/**
 * Clear all cached calculations or a specific cache entry
 * @param cacheKey - Optional specific cache key to clear
 */
function clearCalculationCache(cacheKey) {
    if (cacheKey) {
        delete calculationCache[cacheKey];
        console.log(`Cache cleared for: ${cacheKey}`);
    }
    else {
        // Clear all cache entries
        Object.keys(calculationCache).forEach(key => {
            delete calculationCache[key];
        });
        console.log('All calculation cache entries cleared');
    }
}
exports.clearCalculationCache = clearCalculationCache;
/**
 * Get cache statistics for debugging
 */
function getCacheStats() {
    const keys = Object.keys(calculationCache);
    const timestamps = keys.map(key => calculationCache[key].timestamp);
    return {
        totalEntries: keys.length,
        keys,
        oldestEntry: timestamps.length ? Math.min(...timestamps) : 0,
        newestEntry: timestamps.length ? Math.max(...timestamps) : 0
    };
}
exports.getCacheStats = getCacheStats;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,