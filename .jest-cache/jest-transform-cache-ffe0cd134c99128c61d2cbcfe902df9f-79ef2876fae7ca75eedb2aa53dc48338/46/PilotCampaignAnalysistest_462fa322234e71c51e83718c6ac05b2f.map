{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/unintentional-any-elimination/__tests__/PilotCampaignAnalysis.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/unintentional-any-elimination/__tests__/PilotCampaignAnalysis.test.ts"],"sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport { PilotCampaignAnalysis } from '../PilotCampaignAnalysis';\nimport { PilotAnalysisConfig } from '../types';\n\n// Mock dependencies\njest.mock('child_process');\njest.mock('fs');\njest.mock('../AnalysisTools');\njest.mock('../AnyTypeClassifier');\njest.mock('../DomainContextAnalyzer');\njest.mock('../ProgressMonitoringSystem');\n\nconst mockFs = fs as jest.Mocked<typeof fs>;\n\ndescribe('PilotCampaignAnalysis', () => {\n  let pilotAnalysis: PilotCampaignAnalysis;\n  let mockConfig: PilotAnalysisConfig;\n\n  beforeEach(() => {\n    mockConfig = {\n      maxFilesToAnalyze: 100,\n      sampleSizeForAccuracy: 50,\n      confidenceThreshold: 0.7,\n      enableTuning: true,\n      generateDetailedReports: true,\n      outputDirectory: '.kiro/test-reports'\n    };\n\n    pilotAnalysis = new PilotCampaignAnalysis(mockConfig);\n\n    // Reset mocks\n    jest.clearAllMocks();\n\n    // Mock fs operations\n    mockFs.existsSync.mockReturnValue(false);\n    mockFs.mkdirSync.mockImplementation(() => '');\n    mockFs.writeFileSync.mockImplementation(() => {});\n  });\n\n  describe('Constructor', () => {\n    it('should initialize with default configuration', () => {\n      const defaultPilot = new PilotCampaignAnalysis();\n      expect(defaultPilot).toBeDefined();\n    });\n\n    it('should merge provided configuration with defaults', () => {\n      const customConfig = { maxFilesToAnalyze: 200 };\n      const customPilot = new PilotCampaignAnalysis(customConfig);\n      expect(customPilot).toBeDefined();\n    });\n  });\n\n  describe('executePilotAnalysis', () => {\n    it('should execute complete pilot analysis successfully', async () => {\n      // Mock successful execution\n      const mockAnalysisTools = require('../AnalysisTools').AnalysisTools;\n      mockAnalysisTools.prototype.generateComprehensiveReport.mockResolvedValue({\n        id: 'test-analysis',\n        timestamp: new Date(),\n        domainDistribution: {\n          totalAnyTypes: 150,\n          byDomain: [],\n          byCategory: [],\n          intentionalVsUnintentional: {\n            intentional: { count: 45, percentage: 30 },\n            unintentional: { count: 105, percentage: 70 }\n          },\n          analysisDate: new Date()\n        },\n        accuracyReport: {\n          overallAccuracy: 85.5,\n          averageConfidence: 0.82,\n          sampleSize: 50,\n          categoryAccuracy: [],\n          confidenceDistribution: [],\n          reportDate: new Date()\n        },\n        successRateAnalysis: {\n          currentSuccessRate: 78.5,\n          targetSuccessRate: 85,\n          improvementNeeded: 6.5,\n          categorySuccessRates: [],\n          trendingData: {\n            date: new Date(),\n            successRate: 78.5,\n            totalAnyTypes: 150,\n            unintentionalCount: 105,\n            classificationAccuracy: 85.5\n          },\n          projectedCompletion: new Date(),\n          recommendations: [],\n          analysisDate: new Date()\n        },\n        manualReviewRecommendations: [],\n        summary: {\n          totalAnyTypes: 150,\n          unintentionalCount: 105,\n          classificationAccuracy: 85.5,\n          currentSuccessRate: 78.5,\n          manualReviewCases: 12,\n          topDomain: 'SERVICE',\n          topCategory: 'FUNCTION_PARAM'\n        }\n      });\n\n      mockAnalysisTools.prototype.generateClassificationAccuracyReport.mockResolvedValue({\n        overallAccuracy: 85.5,\n        averageConfidence: 0.82,\n        sampleSize: 50,\n        categoryAccuracy: [],\n        confidenceDistribution: [],\n        reportDate: new Date()\n      });\n\n      mockAnalysisTools.prototype.generateSuccessRateAnalysis.mockResolvedValue({\n        currentSuccessRate: 78.5,\n        targetSuccessRate: 85,\n        improvementNeeded: 6.5,\n        categorySuccessRates: [\n          { category: 'ARRAY_TYPE', successRate: 95.2, sampleSize: 20 },\n          { category: 'FUNCTION_PARAM', successRate: 65.8, sampleSize: 30 }\n        ],\n        trendingData: {\n          date: new Date(),\n          successRate: 78.5,\n          totalAnyTypes: 150,\n          unintentionalCount: 105,\n          classificationAccuracy: 85.5\n        },\n        projectedCompletion: new Date(),\n        recommendations: [],\n        analysisDate: new Date()\n      });\n\n      const results = await pilotAnalysis.executePilotAnalysis();\n\n      expect(results.success).toBe(true);\n      expect(results.executionTime).toBeGreaterThan(0);\n      expect(results.codebaseAnalysis).toBeDefined();\n      expect(results.accuracyValidation).toBeDefined();\n      expect(results.baselineMetrics).toBeDefined();\n      expect(results.tuningResults).toBeDefined();\n      expect(results.pilotReport).toBeDefined();\n      expect(results.recommendations).toBeInstanceOf(Array);\n      expect(results.nextSteps).toBeInstanceOf(Array);\n    });\n\n    it('should handle analysis failures gracefully', async () => {\n      // Mock analysis failure\n      const mockAnalysisTools = require('../AnalysisTools').AnalysisTools;\n      mockAnalysisTools.prototype.generateComprehensiveReport.mockRejectedValue(\n        new Error('Analysis failed')\n      );\n\n      const results = await pilotAnalysis.executePilotAnalysis();\n\n      expect(results.success).toBe(false);\n      expect(results.error).toBe('Analysis failed');\n      expect(results.recommendations).toContain('Review error logs and retry with adjusted configuration');\n      expect(results.nextSteps).toContain('Fix configuration issues');\n    });\n\n    it('should save results to configured output directory', async () => {\n      // Mock successful execution\n      const mockAnalysisTools = require('../AnalysisTools').AnalysisTools;\n      mockAnalysisTools.prototype.generateComprehensiveReport.mockResolvedValue({\n        id: 'test-analysis',\n        timestamp: new Date(),\n        domainDistribution: { totalAnyTypes: 100, byDomain: [], byCategory: [], intentionalVsUnintentional: { intentional: { count: 30, percentage: 30 }, unintentional: { count: 70, percentage: 70 } }, analysisDate: new Date() },\n        accuracyReport: { overallAccuracy: 80, averageConfidence: 0.8, sampleSize: 50, categoryAccuracy: [], confidenceDistribution: [], reportDate: new Date() },\n        successRateAnalysis: { currentSuccessRate: 75, targetSuccessRate: 85, improvementNeeded: 10, categorySuccessRates: [], trendingData: { date: new Date(), successRate: 75, totalAnyTypes: 100, unintentionalCount: 70, classificationAccuracy: 80 }, projectedCompletion: new Date(), recommendations: [], analysisDate: new Date() },\n        manualReviewRecommendations: [],\n        summary: { totalAnyTypes: 100, unintentionalCount: 70, classificationAccuracy: 80, currentSuccessRate: 75, manualReviewCases: 5, topDomain: 'SERVICE', topCategory: 'FUNCTION_PARAM' }\n      });\n\n      mockAnalysisTools.prototype.generateClassificationAccuracyReport.mockResolvedValue({\n        overallAccuracy: 80,\n        averageConfidence: 0.8,\n        sampleSize: 50,\n        categoryAccuracy: [],\n        confidenceDistribution: [],\n        reportDate: new Date()\n      });\n\n      mockAnalysisTools.prototype.generateSuccessRateAnalysis.mockResolvedValue({\n        currentSuccessRate: 75,\n        targetSuccessRate: 85,\n        improvementNeeded: 10,\n        categorySuccessRates: [],\n        trendingData: { date: new Date(), successRate: 75, totalAnyTypes: 100, unintentionalCount: 70, classificationAccuracy: 80 },\n        projectedCompletion: new Date(),\n        recommendations: [],\n        analysisDate: new Date()\n      });\n\n      await pilotAnalysis.executePilotAnalysis();\n\n      expect(mockFs.mkdirSync).toHaveBeenCalledWith(mockConfig.outputDirectory, { recursive: true });\n      expect(mockFs.writeFileSync).toHaveBeenCalledWith(\n        path.join(mockConfig.outputDirectory, 'pilot-analysis-results.json'),\n        expect.any(String)\n      );\n      expect(mockFs.writeFileSync).toHaveBeenCalledWith(\n        path.join(mockConfig.outputDirectory, 'pilot-summary.md'),\n        expect.any(String)\n      );\n    });\n  });\n\n  describe('Configuration Handling', () => {\n    it('should respect maxFilesToAnalyze configuration', () => {\n      const config = { maxFilesToAnalyze: 50 };\n      const pilot = new PilotCampaignAnalysis(config);\n      expect(pilot).toBeDefined();\n    });\n\n    it('should respect enableTuning configuration', () => {\n      const config = { enableTuning: false };\n      const pilot = new PilotCampaignAnalysis(config);\n      expect(pilot).toBeDefined();\n    });\n\n    it('should respect generateDetailedReports configuration', () => {\n      const config = { generateDetailedReports: false };\n      const pilot = new PilotCampaignAnalysis(config);\n      expect(pilot).toBeDefined();\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle file system errors gracefully', async () => {\n      mockFs.mkdirSync.mockImplementation(() => {\n        throw new Error('Permission denied');\n      });\n\n      const mockAnalysisTools = require('../AnalysisTools').AnalysisTools;\n      mockAnalysisTools.prototype.generateComprehensiveReport.mockResolvedValue({\n        id: 'test-analysis',\n        timestamp: new Date(),\n        domainDistribution: { totalAnyTypes: 50, byDomain: [], byCategory: [], intentionalVsUnintentional: { intentional: { count: 15, percentage: 30 }, unintentional: { count: 35, percentage: 70 } }, analysisDate: new Date() },\n        accuracyReport: { overallAccuracy: 75, averageConfidence: 0.75, sampleSize: 25, categoryAccuracy: [], confidenceDistribution: [], reportDate: new Date() },\n        successRateAnalysis: { currentSuccessRate: 70, targetSuccessRate: 85, improvementNeeded: 15, categorySuccessRates: [], trendingData: { date: new Date(), successRate: 70, totalAnyTypes: 50, unintentionalCount: 35, classificationAccuracy: 75 }, projectedCompletion: new Date(), recommendations: [], analysisDate: new Date() },\n        manualReviewRecommendations: [],\n        summary: { totalAnyTypes: 50, unintentionalCount: 35, classificationAccuracy: 75, currentSuccessRate: 70, manualReviewCases: 3, topDomain: 'UTILITY', topCategory: 'ARRAY_TYPE' }\n      });\n\n      mockAnalysisTools.prototype.generateClassificationAccuracyReport.mockResolvedValue({\n        overallAccuracy: 75,\n        averageConfidence: 0.75,\n        sampleSize: 25,\n        categoryAccuracy: [],\n        confidenceDistribution: [],\n        reportDate: new Date()\n      });\n\n      mockAnalysisTools.prototype.generateSuccessRateAnalysis.mockResolvedValue({\n        currentSuccessRate: 70,\n        targetSuccessRate: 85,\n        improvementNeeded: 15,\n        categorySuccessRates: [],\n        trendingData: { date: new Date(), successRate: 70, totalAnyTypes: 50, unintentionalCount: 35, classificationAccuracy: 75 },\n        projectedCompletion: new Date(),\n        recommendations: [],\n        analysisDate: new Date()\n      });\n\n      const results = await pilotAnalysis.executePilotAnalysis();\n\n      // Should still succeed even if file saving fails\n      expect(results.success).toBe(true);\n    });\n\n    it('should handle classification errors', async () => {\n      const mockAnalysisTools = require('../AnalysisTools').AnalysisTools;\n      mockAnalysisTools.prototype.generateClassificationAccuracyReport.mockRejectedValue(\n        new Error('Classification failed')\n      );\n\n      const results = await pilotAnalysis.executePilotAnalysis();\n\n      expect(results.success).toBe(false);\n      expect(results.error).toBe('Classification failed');\n    });\n  });\n\n  describe('Tuning System', () => {\n    it('should perform tuning when enabled', async () => {\n      const tuningConfig = { ...mockConfig, enableTuning: true };\n      const tuningPilot = new PilotCampaignAnalysis(tuningConfig);\n\n      const mockAnalysisTools = require('../AnalysisTools').AnalysisTools;\n      mockAnalysisTools.prototype.generateComprehensiveReport.mockResolvedValue({\n        id: 'test-analysis',\n        timestamp: new Date(),\n        domainDistribution: { totalAnyTypes: 100, byDomain: [], byCategory: [], intentionalVsUnintentional: { intentional: { count: 30, percentage: 30 }, unintentional: { count: 70, percentage: 70 } }, analysisDate: new Date() },\n        accuracyReport: { overallAccuracy: 70, averageConfidence: 0.7, sampleSize: 50, categoryAccuracy: [{ category: 'FUNCTION_PARAM', accuracy: 60, sampleCount: 20 }], confidenceDistribution: [], reportDate: new Date() },\n        successRateAnalysis: { currentSuccessRate: 65, targetSuccessRate: 85, improvementNeeded: 20, categorySuccessRates: [], trendingData: { date: new Date(), successRate: 65, totalAnyTypes: 100, unintentionalCount: 70, classificationAccuracy: 70 }, projectedCompletion: new Date(), recommendations: [], analysisDate: new Date() },\n        manualReviewRecommendations: [],\n        summary: { totalAnyTypes: 100, unintentionalCount: 70, classificationAccuracy: 70, currentSuccessRate: 65, manualReviewCases: 10, topDomain: 'SERVICE', topCategory: 'FUNCTION_PARAM' }\n      });\n\n      mockAnalysisTools.prototype.generateClassificationAccuracyReport.mockResolvedValue({\n        overallAccuracy: 70,\n        averageConfidence: 0.7,\n        sampleSize: 50,\n        categoryAccuracy: [{ category: 'FUNCTION_PARAM', accuracy: 60, sampleCount: 20 }],\n        confidenceDistribution: [],\n        reportDate: new Date()\n      });\n\n      mockAnalysisTools.prototype.generateSuccessRateAnalysis.mockResolvedValue({\n        currentSuccessRate: 65,\n        targetSuccessRate: 85,\n        improvementNeeded: 20,\n        categorySuccessRates: [],\n        trendingData: { date: new Date(), successRate: 65, totalAnyTypes: 100, unintentionalCount: 70, classificationAccuracy: 70 },\n        projectedCompletion: new Date(),\n        recommendations: [],\n        analysisDate: new Date()\n      });\n\n      const results = await tuningPilot.executePilotAnalysis();\n\n      expect(results.success).toBe(true);\n      expect(results.tuningResults?.tuningPerformed).toBe(true);\n    });\n\n    it('should skip tuning when disabled', async () => {\n      const noTuningConfig = { ...mockConfig, enableTuning: false };\n      const noTuningPilot = new PilotCampaignAnalysis(noTuningConfig);\n\n      const mockAnalysisTools = require('../AnalysisTools').AnalysisTools;\n      mockAnalysisTools.prototype.generateComprehensiveReport.mockResolvedValue({\n        id: 'test-analysis',\n        timestamp: new Date(),\n        domainDistribution: { totalAnyTypes: 100, byDomain: [], byCategory: [], intentionalVsUnintentional: { intentional: { count: 30, percentage: 30 }, unintentional: { count: 70, percentage: 70 } }, analysisDate: new Date() },\n        accuracyReport: { overallAccuracy: 85, averageConfidence: 0.85, sampleSize: 50, categoryAccuracy: [], confidenceDistribution: [], reportDate: new Date() },\n        successRateAnalysis: { currentSuccessRate: 80, targetSuccessRate: 85, improvementNeeded: 5, categorySuccessRates: [], trendingData: { date: new Date(), successRate: 80, totalAnyTypes: 100, unintentionalCount: 70, classificationAccuracy: 85 }, projectedCompletion: new Date(), recommendations: [], analysisDate: new Date() },\n        manualReviewRecommendations: [],\n        summary: { totalAnyTypes: 100, unintentionalCount: 70, classificationAccuracy: 85, currentSuccessRate: 80, manualReviewCases: 5, topDomain: 'SERVICE', topCategory: 'ARRAY_TYPE' }\n      });\n\n      mockAnalysisTools.prototype.generateClassificationAccuracyReport.mockResolvedValue({\n        overallAccuracy: 85,\n        averageConfidence: 0.85,\n        sampleSize: 50,\n        categoryAccuracy: [],\n        confidenceDistribution: [],\n        reportDate: new Date()\n      });\n\n      mockAnalysisTools.prototype.generateSuccessRateAnalysis.mockResolvedValue({\n        currentSuccessRate: 80,\n        targetSuccessRate: 85,\n        improvementNeeded: 5,\n        categorySuccessRates: [],\n        trendingData: { date: new Date(), successRate: 80, totalAnyTypes: 100, unintentionalCount: 70, classificationAccuracy: 85 },\n        projectedCompletion: new Date(),\n        recommendations: [],\n        analysisDate: new Date()\n      });\n\n      const results = await noTuningPilot.executePilotAnalysis();\n\n      expect(results.success).toBe(true);\n      expect(results.tuningResults?.tuningPerformed).toBe(false);\n      expect(results.tuningResults?.reason).toBe('Tuning disabled in configuration');\n    });\n  });\n\n  describe('Report Generation', () => {\n    it('should generate markdown summary for successful analysis', async () => {\n      const mockAnalysisTools = require('../AnalysisTools').AnalysisTools;\n      mockAnalysisTools.prototype.generateComprehensiveReport.mockResolvedValue({\n        id: 'test-analysis',\n        timestamp: new Date(),\n        domainDistribution: { totalAnyTypes: 100, byDomain: [], byCategory: [], intentionalVsUnintentional: { intentional: { count: 30, percentage: 30 }, unintentional: { count: 70, percentage: 70 } }, analysisDate: new Date() },\n        accuracyReport: { overallAccuracy: 85, averageConfidence: 0.85, sampleSize: 50, categoryAccuracy: [], confidenceDistribution: [], reportDate: new Date() },\n        successRateAnalysis: { currentSuccessRate: 80, targetSuccessRate: 85, improvementNeeded: 5, categorySuccessRates: [], trendingData: { date: new Date(), successRate: 80, totalAnyTypes: 100, unintentionalCount: 70, classificationAccuracy: 85 }, projectedCompletion: new Date(), recommendations: [], analysisDate: new Date() },\n        manualReviewRecommendations: [],\n        summary: { totalAnyTypes: 100, unintentionalCount: 70, classificationAccuracy: 85, currentSuccessRate: 80, manualReviewCases: 5, topDomain: 'SERVICE', topCategory: 'ARRAY_TYPE' }\n      });\n\n      mockAnalysisTools.prototype.generateClassificationAccuracyReport.mockResolvedValue({\n        overallAccuracy: 85,\n        averageConfidence: 0.85,\n        sampleSize: 50,\n        categoryAccuracy: [],\n        confidenceDistribution: [],\n        reportDate: new Date()\n      });\n\n      mockAnalysisTools.prototype.generateSuccessRateAnalysis.mockResolvedValue({\n        currentSuccessRate: 80,\n        targetSuccessRate: 85,\n        improvementNeeded: 5,\n        categorySuccessRates: [],\n        trendingData: { date: new Date(), successRate: 80, totalAnyTypes: 100, unintentionalCount: 70, classificationAccuracy: 85 },\n        projectedCompletion: new Date(),\n        recommendations: [],\n        analysisDate: new Date()\n      });\n\n      const results = await pilotAnalysis.executePilotAnalysis();\n\n      expect(results.success).toBe(true);\n      expect(mockFs.writeFileSync).toHaveBeenCalledWith(\n        expect.stringContaining('pilot-summary.md'),\n        expect.stringContaining('# Pilot Campaign Analysis Results')\n      );\n    });\n\n    it('should generate markdown summary for failed analysis', async () => {\n      const mockAnalysisTools = require('../AnalysisTools').AnalysisTools;\n      mockAnalysisTools.prototype.generateComprehensiveReport.mockRejectedValue(\n        new Error('Test failure')\n      );\n\n      const results = await pilotAnalysis.executePilotAnalysis();\n\n      expect(results.success).toBe(false);\n      expect(mockFs.writeFileSync).toHaveBeenCalledWith(\n        expect.stringContaining('pilot-summary.md'),\n        expect.stringContaining('# Pilot Campaign Analysis - Failed')\n      );\n    });\n  });\n});\n"],"version":3}