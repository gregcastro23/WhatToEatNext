f1cad1eb9514c3f2c09091f77a594ec5
"use strict";
/**
 * Progress Tracking Infrastructure
 * Perfect Codebase Campaign - Real-time Metrics Collection
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProgressTracker = void 0;
const child_process_1 = require("child_process");
const fs = __importStar(require("fs"));
const campaign_1 = require("../../types/campaign");
class ProgressTracker {
    constructor() {
        this.metricsHistory = [];
        this.lastMetricsUpdate = new Date();
    }
    /**
     * Get current TypeScript error count using proven command pattern
     */
    async getTypeScriptErrorCount() {
        try {
            // Using the proven pattern from existing scripts and Makefile
            const output = (0, child_process_1.execSync)('yarn tsc --noEmit --skipLibCheck 2>&1 | grep -c "error TS"', {
                encoding: 'utf8',
                stdio: 'pipe',
            });
            const count = parseInt(output.trim()) || 0;
            return count;
        }
        catch (error) {
            // If grep finds no matches, it returns exit code 1, but that means 0 errors
            if (error.status === 1) {
                return 0;
            }
            console.warn(`Warning: Could not get TypeScript error count: ${error.message}`);
            return -1; // Indicates measurement failure
        }
    }
    /**
     * Get detailed TypeScript error breakdown by type
     */
    async getTypeScriptErrorBreakdown() {
        try {
            const output = (0, child_process_1.execSync)("yarn tsc --noEmit --skipLibCheck 2>&1 | grep -E \"error TS\" | sed 's/.*error //' | cut -d':' -f1 | sort | uniq -c | sort -nr", {
                encoding: 'utf8',
                stdio: 'pipe',
            });
            const breakdown = {};
            const lines = output
                .trim()
                .split('\n')
                .filter(line => line.trim());
            for (const line of lines) {
                const match = line.trim().match(/^\s*(\d+)\s+(.+)$/);
                if (match) {
                    const count = parseInt(match[1]);
                    const errorType = match[2].trim();
                    breakdown[errorType] = count;
                }
            }
            return breakdown;
        }
        catch (error) {
            console.warn(`Warning: Could not get TypeScript error breakdown: ${error.message}`);
            return {};
        }
    }
    /**
     * Get current linting warning count
     */
    async getLintingWarningCount() {
        try {
            // Using yarn lint to get warning count
            const output = (0, child_process_1.execSync)('yarn lint 2>&1 | grep -c "warning"', {
                encoding: 'utf8',
                stdio: 'pipe',
            });
            const count = parseInt(output.trim()) || 0;
            return count;
        }
        catch (error) {
            // If grep finds no matches, it returns exit code 1, but that means 0 warnings
            if (error.status === 1) {
                return 0;
            }
            console.warn(`Warning: Could not get linting warning count: ${error.message}`);
            return -1; // Indicates measurement failure
        }
    }
    /**
     * Get detailed linting warning breakdown by type
     */
    async getLintingWarningBreakdown() {
        try {
            const output = (0, child_process_1.execSync)('yarn lint 2>&1', {
                encoding: 'utf8',
                stdio: 'pipe',
            });
            const breakdown = {};
            const lines = output.split('\n');
            for (const line of lines) {
                // Look for ESLint warning patterns
                const warningMatch = line.match(/warning\s+(.+?)\s+(@typescript-eslint\/[\w-]+|[\w-]+)/);
                if (warningMatch) {
                    const ruleType = warningMatch[2];
                    breakdown[ruleType] = (breakdown[ruleType] || 0) + 1;
                }
            }
            return breakdown;
        }
        catch (error) {
            console.warn(`Warning: Could not get linting warning breakdown: ${error.message}`);
            return {};
        }
    }
    /**
     * Measure build time using time command
     */
    async getBuildTime() {
        try {
            const startTime = Date.now();
            // Run build command and measure time
            (0, child_process_1.execSync)('yarn build', {
                encoding: 'utf8',
                stdio: 'pipe',
            });
            const endTime = Date.now();
            const buildTimeSeconds = (endTime - startTime) / 1000;
            return buildTimeSeconds;
        }
        catch (error) {
            console.warn(`Warning: Build failed during timing: ${error.message}`);
            return -1; // Indicates build failure
        }
    }
    /**
     * Get enterprise system count using intelligence system pattern
     */
    async getEnterpriseSystemCount() {
        try {
            // Count INTELLIGENCE_SYSTEM patterns in source code
            const output = (0, child_process_1.execSync)('grep -r "INTELLIGENCE_SYSTEM" src/ | wc -l', {
                encoding: 'utf8',
                stdio: 'pipe',
            });
            const count = parseInt(output.trim()) || 0;
            return count;
        }
        catch (error) {
            console.warn(`Warning: Could not count enterprise systems: ${error.message}`);
            return 0;
        }
    }
    /**
     * Get cache hit rate from build system
     */
    async getCacheHitRate() {
        try {
            // This would need to be implemented based on the specific build system
            // For now, return a mock value based on typical performance
            return 0.8; // 80% cache hit rate
        }
        catch (error) {
            console.warn(`Warning: Could not measure cache hit rate: ${error.message}`);
            return 0;
        }
    }
    /**
     * Get current memory usage during build
     */
    async getMemoryUsage() {
        try {
            // Get Node.js process memory usage
            const memUsage = process.memoryUsage();
            const memoryMB = memUsage.heapUsed / 1024 / 1024;
            return Math.round(memoryMB);
        }
        catch (error) {
            console.warn(`Warning: Could not measure memory usage: ${error.message}`);
            return 0;
        }
    }
    /**
     * Get bundle size information
     */
    async getBundleSize() {
        try {
            // Check for build output directory
            const buildDirs = ['.next', 'dist', 'build'];
            let totalSize = 0;
            for (const dir of buildDirs) {
                if (fs.existsSync(dir)) {
                    const output = (0, child_process_1.execSync)(`du -sk ${dir} | cut -f1`, {
                        encoding: 'utf8',
                        stdio: 'pipe',
                    });
                    const sizeKB = parseInt(output.trim()) || 0;
                    totalSize += sizeKB;
                }
            }
            return totalSize;
        }
        catch (error) {
            console.warn(`Warning: Could not measure bundle size: ${error.message}`);
            return 0;
        }
    }
    /**
     * Get comprehensive progress metrics
     */
    async getProgressMetrics() {
        const typeScriptErrorCount = await this.getTypeScriptErrorCount();
        const lintingWarningCount = await this.getLintingWarningCount();
        const buildTime = await this.getBuildTime();
        const enterpriseSystemCount = await this.getEnterpriseSystemCount();
        const cacheHitRate = await this.getCacheHitRate();
        const memoryUsage = await this.getMemoryUsage();
        const metrics = {
            typeScriptErrors: {
                current: typeScriptErrorCount,
                target: 0,
                reduction: Math.max(0, 86 - typeScriptErrorCount),
                percentage: typeScriptErrorCount >= 0
                    ? Math.round(((86 - typeScriptErrorCount) / 86) * 100)
                    : 0,
            },
            lintingWarnings: {
                current: lintingWarningCount,
                target: 0,
                reduction: Math.max(0, 4506 - lintingWarningCount),
                percentage: lintingWarningCount >= 0
                    ? Math.round(((4506 - lintingWarningCount) / 4506) * 100)
                    : 0,
            },
            buildPerformance: {
                currentTime: buildTime,
                targetTime: 10,
                cacheHitRate: cacheHitRate,
                memoryUsage: memoryUsage,
            },
            enterpriseSystems: {
                current: enterpriseSystemCount,
                target: 200,
                transformedExports: Math.max(0, enterpriseSystemCount - 0), // Assuming starting from 0
            },
        };
        // Store metrics in history
        this.metricsHistory.push(metrics);
        this.lastMetricsUpdate = new Date();
        // Keep only recent history to prevent memory issues
        if (this.metricsHistory.length > 100) {
            this.metricsHistory = this.metricsHistory.slice(-50);
        }
        return metrics;
    }
    /**
     * Validate milestone achievement
     */
    async validateMilestone(milestone) {
        const metrics = await this.getProgressMetrics();
        switch (milestone) {
            case 'zero-typescript-errors':
                return metrics.typeScriptErrors.current === 0;
            case 'zero-linting-warnings':
                return metrics.lintingWarnings.current === 0;
            case 'build-time-under-10s':
                return metrics.buildPerformance.currentTime <= 10;
            case 'enterprise-systems-200':
                return metrics.enterpriseSystems.current >= 200;
            case 'phase-1-complete':
                return metrics.typeScriptErrors.current === 0;
            case 'phase-2-complete':
                return metrics.lintingWarnings.current === 0;
            case 'phase-3-complete':
                return metrics.enterpriseSystems.current >= 200;
            case 'phase-4-complete':
                return (metrics.buildPerformance.currentTime <= 10 &&
                    metrics.buildPerformance.cacheHitRate >= 0.8 &&
                    metrics.buildPerformance.memoryUsage <= 50);
            default:
                console.warn(`Unknown milestone: ${milestone}`);
                return false;
        }
    }
    /**
     * Generate comprehensive progress report
     */
    async generateProgressReport() {
        const currentMetrics = await this.getProgressMetrics();
        const targetMetrics = {
            typeScriptErrors: {
                current: 0,
                target: 0,
                reduction: 86,
                percentage: 100,
            },
            lintingWarnings: {
                current: 0,
                target: 0,
                reduction: 4506,
                percentage: 100,
            },
            buildPerformance: {
                currentTime: 8,
                targetTime: 10,
                cacheHitRate: 0.8,
                memoryUsage: 45,
            },
            enterpriseSystems: {
                current: 200,
                target: 200,
                transformedExports: 200,
            },
        };
        // Calculate overall progress
        const typeScriptProgress = currentMetrics.typeScriptErrors.percentage;
        const lintingProgress = currentMetrics.lintingWarnings.percentage;
        const buildProgress = currentMetrics.buildPerformance.currentTime <= 10 ? 100 : 0;
        const enterpriseProgress = (currentMetrics.enterpriseSystems.current / 200) * 100;
        const overallProgress = Math.round((typeScriptProgress +
            lintingProgress +
            buildProgress +
            enterpriseProgress) /
            4);
        // Generate phase reports
        const phases = [
            {
                phaseId: 'phase1',
                phaseName: 'TypeScript Error Elimination',
                startTime: new Date(),
                status: currentMetrics.typeScriptErrors.current === 0
                    ? campaign_1.PhaseStatus.COMPLETED
                    : campaign_1.PhaseStatus.IN_PROGRESS,
                metrics: currentMetrics,
                achievements: currentMetrics.typeScriptErrors.current === 0
                    ? ['Zero TypeScript errors achieved']
                    : [],
                issues: currentMetrics.typeScriptErrors.current > 0
                    ? [
                        `${currentMetrics.typeScriptErrors.current} TypeScript errors remaining`,
                    ]
                    : [],
                recommendations: currentMetrics.typeScriptErrors.current > 0
                    ? ['Continue with Enhanced TypeScript Error Fixer v3.0']
                    : [],
            },
            {
                phaseId: 'phase2',
                phaseName: 'Linting Excellence Achievement',
                startTime: new Date(),
                status: currentMetrics.lintingWarnings.current === 0
                    ? campaign_1.PhaseStatus.COMPLETED
                    : campaign_1.PhaseStatus.IN_PROGRESS,
                metrics: currentMetrics,
                achievements: currentMetrics.lintingWarnings.current === 0
                    ? ['Zero linting warnings achieved']
                    : [],
                issues: currentMetrics.lintingWarnings.current > 0
                    ? [
                        `${currentMetrics.lintingWarnings.current} linting warnings remaining`,
                    ]
                    : [],
                recommendations: currentMetrics.lintingWarnings.current > 0
                    ? ['Continue with systematic linting fixes']
                    : [],
            },
        ];
        // Estimate completion time based on current progress rate
        const estimatedCompletion = new Date();
        estimatedCompletion.setDate(estimatedCompletion.getDate() + Math.ceil((100 - overallProgress) / 10)); // Rough estimate
        return {
            campaignId: 'perfect-codebase-campaign',
            overallProgress,
            phases,
            currentMetrics,
            targetMetrics,
            estimatedCompletion,
        };
    }
    /**
     * Get metrics history for trend analysis
     */
    getMetricsHistory() {
        return [...this.metricsHistory];
    }
    /**
     * Get metrics improvement over time
     */
    getMetricsImprovement() {
        if (this.metricsHistory.length < 2) {
            return {
                typeScriptErrorsReduced: 0,
                lintingWarningsReduced: 0,
                buildTimeImproved: 0,
                enterpriseSystemsAdded: 0,
            };
        }
        const first = this.metricsHistory[0];
        const latest = this.metricsHistory[this.metricsHistory.length - 1];
        return {
            typeScriptErrorsReduced: first.typeScriptErrors.current - latest.typeScriptErrors.current,
            lintingWarningsReduced: first.lintingWarnings.current - latest.lintingWarnings.current,
            buildTimeImproved: first.buildPerformance.currentTime -
                latest.buildPerformance.currentTime,
            enterpriseSystemsAdded: latest.enterpriseSystems.current - first.enterpriseSystems.current,
        };
    }
    /**
     * Export metrics to JSON for external analysis
     */
    async exportMetrics(filePath) {
        try {
            const report = await this.generateProgressReport();
            const exportData = {
                timestamp: new Date().toISOString(),
                report,
                history: this.metricsHistory,
                improvement: this.getMetricsImprovement(),
            };
            fs.writeFileSync(filePath, JSON.stringify(exportData, null, 2));
            console.log(`📊 Metrics exported to: ${filePath}`);
        }
        catch (error) {
            throw new Error(`Failed to export metrics: ${error.message}`);
        }
    }
    /**
     * Reset metrics history (for testing or fresh start)
     */
    resetMetricsHistory() {
        this.metricsHistory = [];
        this.lastMetricsUpdate = new Date();
        console.log('📊 Metrics history reset');
    }
}
exports.ProgressTracker = ProgressTracker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,