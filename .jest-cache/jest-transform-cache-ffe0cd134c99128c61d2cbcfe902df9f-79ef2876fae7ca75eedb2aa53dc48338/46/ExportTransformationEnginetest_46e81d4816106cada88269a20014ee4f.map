{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/ExportTransformationEngine.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/ExportTransformationEngine.test.ts"],"sourcesContent":["/**\n * Export Transformation Engine Tests\n * Perfect Codebase Campaign - Phase 3 Implementation\n */\n\nimport { \n  ExportTransformationEngine, \n  BatchPriority, \n  TransformationErrorType, \n  ErrorSeverity \n} from './ExportTransformationEngine';\nimport { UnusedExportAnalyzer } from './UnusedExportAnalyzer';\nimport { EnterpriseIntelligenceGenerator } from './EnterpriseIntelligenceGenerator';\nimport { SafetyProtocol } from './SafetyProtocol';\nimport { ProgressTracker } from './ProgressTracker';\n\n// Mock dependencies\njest.mock('./UnusedExportAnalyzer');\njest.mock('./EnterpriseIntelligenceGenerator');\njest.mock('./SafetyProtocol');\njest.mock('./ProgressTracker');\njest.mock('child_process');\n\nconst mockAnalyzer = UnusedExportAnalyzer as jest.MockedClass<typeof UnusedExportAnalyzer>;\nconst mockGenerator = EnterpriseIntelligenceGenerator as jest.MockedClass<typeof EnterpriseIntelligenceGenerator>;\nconst mockSafetyProtocol = SafetyProtocol as jest.MockedClass<typeof SafetyProtocol>;\nconst mockProgressTracker = ProgressTracker as jest.MockedClass<typeof ProgressTracker>;\n\ndescribe('ExportTransformationEngine', () => {\n  let engine: ExportTransformationEngine;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Mock analyzer\n    mockAnalyzer.prototype.analyzeUnusedExports = jest.fn().mockResolvedValue({\n      totalFiles: 10,\n      totalUnusedExports: 25,\n      highPriorityFiles: [\n        {\n          filePath: '/test/high1.ts',\n          priority: 'HIGH',\n          unusedExports: [],\n          safetyScore: 90,\n          transformationCandidates: [\n            {\n              export: { exportName: 'testExport1', exportType: 'function', complexity: 5 },\n              intelligenceSystemName: 'TEST_EXPORT_1_INTELLIGENCE_SYSTEM',\n              transformationComplexity: 'MODERATE',\n              safetyScore: 85,\n              estimatedBenefit: 75\n            }\n          ],\n          category: 'CORE'\n        }\n      ],\n      mediumPriorityFiles: [\n        {\n          filePath: '/test/medium1.ts',\n          priority: 'MEDIUM',\n          unusedExports: [],\n          safetyScore: 85,\n          transformationCandidates: [\n            {\n              export: { exportName: 'testExport2', exportType: 'class', complexity: 8 },\n              intelligenceSystemName: 'TEST_EXPORT_2_INTELLIGENCE_SYSTEM',\n              transformationComplexity: 'COMPLEX',\n              safetyScore: 80,\n              estimatedBenefit: 80\n            }\n          ],\n          category: 'CORE'\n        }\n      ],\n      lowPriorityFiles: [],\n      summary: {\n        recipeFiles: 2,\n        coreFiles: 8,\n        externalFiles: 0,\n        totalTransformationCandidates: 2,\n        averageSafetyScore: 87.5,\n        estimatedIntelligenceSystems: 2\n      }\n    });\n\n    // Mock generator\n    mockGenerator.prototype.generateIntelligenceSystems = jest.fn().mockResolvedValue([\n      {\n        systemName: 'TEST_SYSTEM_1',\n        filePath: '/output/TEST_SYSTEM_1.ts',\n        originalExport: { exportName: 'testExport1', exportType: 'function' },\n        generatedCode: 'generated code',\n        capabilities: [],\n        integrationPoints: [],\n        estimatedValue: 75,\n        complexity: 'MODERATE'\n      }\n    ]);\n\n    mockGenerator.prototype.generateSummary = jest.fn().mockReturnValue({\n      totalSystemsGenerated: 1,\n      totalCapabilitiesAdded: 3,\n      totalIntegrationPoints: 2,\n      averageComplexity: 2.5,\n      estimatedTotalValue: 75,\n      generationsByCategory: { function: 1 }\n    });\n\n    // Mock safety protocol\n    mockSafetyProtocol.prototype.createSafetyCheckpoint = jest.fn().mockResolvedValue('checkpoint-123');\n    mockSafetyProtocol.prototype.rollbackToCheckpoint = jest.fn().mockResolvedValue(undefined);\n    mockSafetyProtocol.prototype.emergencyRollback = jest.fn().mockResolvedValue(undefined);\n\n    // Mock progress tracker\n    mockProgressTracker.prototype.updateProgress = jest.fn().mockResolvedValue(undefined);\n\n    engine = new ExportTransformationEngine({\n      batchSize: 5,\n      safetyThreshold: 80,\n      dryRun: true // Use dry run for tests\n    });\n  });\n\n  describe('constructor', () => {\n    it('should initialize with default configuration', () => {\n      const defaultEngine = new ExportTransformationEngine();\n      const config = defaultEngine.getConfig();\n      \n      expect(config.batchSize).toBe(10);\n      expect(config.safetyThreshold).toBe(80);\n      expect(config.buildValidationEnabled).toBe(true);\n      expect(config.testValidationEnabled).toBe(true);\n      expect(config.rollbackOnFailure).toBe(true);\n    });\n\n    it('should initialize with custom configuration', () => {\n      const customEngine = new ExportTransformationEngine({\n        batchSize: 15,\n        safetyThreshold: 90,\n        dryRun: true\n      });\n      \n      const config = customEngine.getConfig();\n      expect(config.batchSize).toBe(15);\n      expect(config.safetyThreshold).toBe(90);\n      expect(config.dryRun).toBe(true);\n    });\n  });\n\n  describe('executeTransformation', () => {\n    it('should execute complete transformation campaign', async () => {\n      const summary = await engine.executeTransformation();\n\n      expect(summary).toHaveProperty('totalBatches');\n      expect(summary).toHaveProperty('successfulBatches');\n      expect(summary).toHaveProperty('totalFilesProcessed');\n      expect(summary).toHaveProperty('totalSystemsGenerated');\n      expect(summary).toHaveProperty('successRate');\n      expect(summary).toHaveProperty('generationSummary');\n    });\n\n    it('should perform analysis phase', async () => {\n      await engine.executeTransformation();\n\n      expect(mockAnalyzer.prototype.analyzeUnusedExports).toHaveBeenCalledTimes(1);\n    });\n\n    it('should create safety checkpoints', async () => {\n      await engine.executeTransformation();\n\n      expect(mockSafetyProtocol.prototype.createSafetyCheckpoint).toHaveBeenCalledWith('transformation-start');\n    });\n\n    it('should handle critical failures', async () => {\n      mockAnalyzer.prototype.analyzeUnusedExports.mockRejectedValueOnce(new Error('Analysis failed'));\n\n      await expect(engine.executeTransformation()).rejects.toThrow('Analysis failed');\n      expect(mockSafetyProtocol.prototype.emergencyRollback).toHaveBeenCalled();\n    });\n  });\n\n  describe('batch planning', () => {\n    it('should create batches based on priority', async () => {\n      const summary = await engine.executeTransformation();\n\n      // Should have created batches for high and medium priority files\n      expect(summary.totalBatches).toBeGreaterThan(0);\n    });\n\n    it('should respect batch size configuration', async () => {\n      const smallBatchEngine = new ExportTransformationEngine({\n        batchSize: 1,\n        dryRun: true\n      });\n\n      const summary = await smallBatchEngine.executeTransformation();\n\n      // With batch size 1 and 2 files, should create 2 batches\n      expect(summary.totalBatches).toBe(2);\n    });\n  });\n\n  describe('batch execution', () => {\n    it('should execute batches in priority order', async () => {\n      const summary = await engine.executeTransformation();\n\n      expect(summary.successfulBatches).toBeGreaterThan(0);\n      expect(summary.successRate).toBe(100); // Dry run should always succeed\n    });\n\n    it('should handle batch failures with rollback', async () => {\n      const failingEngine = new ExportTransformationEngine({\n        dryRun: false,\n        rollbackOnFailure: true\n      });\n\n      mockGenerator.prototype.generateIntelligenceSystems.mockRejectedValueOnce(new Error('Generation failed'));\n\n      const summary = await failingEngine.executeTransformation();\n\n      expect(summary.failedBatches).toBeGreaterThan(0);\n      expect(mockSafetyProtocol.prototype.rollbackToCheckpoint).toHaveBeenCalled();\n    });\n\n    it('should skip rollback when disabled', async () => {\n      const noRollbackEngine = new ExportTransformationEngine({\n        dryRun: false,\n        rollbackOnFailure: false\n      });\n\n      mockGenerator.prototype.generateIntelligenceSystems.mockRejectedValueOnce(new Error('Generation failed'));\n\n      await noRollbackEngine.executeTransformation();\n\n      expect(mockSafetyProtocol.prototype.rollbackToCheckpoint).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('safety validation', () => {\n    it('should enforce safety threshold', async () => {\n      const strictEngine = new ExportTransformationEngine({\n        safetyThreshold: 95, // Higher than mock data\n        dryRun: false\n      });\n\n      const summary = await strictEngine.executeTransformation();\n\n      // Should have warnings about safety threshold\n      expect(summary.totalWarnings).toBeGreaterThan(0);\n    });\n\n    it('should create checkpoints for each batch', async () => {\n      await engine.executeTransformation();\n\n      // Should create transformation-start checkpoint plus batch checkpoints\n      expect(mockSafetyProtocol.prototype.createSafetyCheckpoint).toHaveBeenCalledTimes(3); // start + 2 batches\n    });\n  });\n\n  describe('error handling', () => {\n    it('should log transformation errors', async () => {\n      const errorEngine = new ExportTransformationEngine({\n        dryRun: false\n      });\n\n      mockGenerator.prototype.generateIntelligenceSystems.mockRejectedValueOnce(new Error('Test error'));\n\n      await errorEngine.executeTransformation();\n\n      const log = errorEngine.getTransformationLog();\n      expect(log.length).toBeGreaterThan(0);\n      expect(log[0]).toHaveProperty('type', TransformationErrorType.GENERATION_FAILED);\n      expect(log[0]).toHaveProperty('severity', ErrorSeverity.HIGH);\n    });\n\n    it('should clear transformation log', () => {\n      const log = engine.getTransformationLog();\n      engine.clearTransformationLog();\n      \n      expect(engine.getTransformationLog()).toHaveLength(0);\n    });\n  });\n\n  describe('batch safety scoring', () => {\n    it('should calculate batch safety scores correctly', () => {\n      const mockFiles = [\n        { safetyScore: 90, transformationCandidates: [{ transformationComplexity: 'SIMPLE' }] },\n        { safetyScore: 80, transformationCandidates: [{ transformationComplexity: 'COMPLEX' }] }\n      ];\n\n      const score = (engine as any).calculateBatchSafetyScore(mockFiles);\n      \n      expect(score).toBeLessThan(85); // Should be penalized for complex candidate\n      expect(score).toBeGreaterThan(0);\n    });\n\n    it('should return 100 for empty batch', () => {\n      const score = (engine as any).calculateBatchSafetyScore([]);\n      expect(score).toBe(100);\n    });\n  });\n\n  describe('duration estimation', () => {\n    it('should estimate batch duration based on complexity', () => {\n      const mockFiles = [\n        { \n          transformationCandidates: [\n            { transformationComplexity: 'SIMPLE' },\n            { transformationComplexity: 'COMPLEX' }\n          ] \n        }\n      ];\n\n      const duration = (engine as any).estimateBatchDuration(mockFiles);\n      \n      expect(duration).toBeGreaterThan(2); // Base time + complexity\n      expect(typeof duration).toBe('number');\n    });\n\n    it('should handle empty files array', () => {\n      const duration = (engine as any).estimateBatchDuration([]);\n      expect(duration).toBe(0);\n    });\n  });\n\n  describe('configuration management', () => {\n    it('should return configuration copy', () => {\n      const config1 = engine.getConfig();\n      const config2 = engine.getConfig();\n      \n      expect(config1).toEqual(config2);\n      expect(config1).not.toBe(config2); // Should be different objects\n    });\n\n    it('should not allow external modification of config', () => {\n      const config = engine.getConfig();\n      config.batchSize = 999;\n      \n      const newConfig = engine.getConfig();\n      expect(newConfig.batchSize).not.toBe(999);\n    });\n  });\n\n  describe('summary generation', () => {\n    it('should generate comprehensive summary', async () => {\n      const summary = await engine.executeTransformation();\n\n      expect(summary.totalBatches).toBeGreaterThan(0);\n      expect(summary.successRate).toBe(100); // Dry run\n      expect(summary.totalDuration).toBeGreaterThan(0);\n      expect(summary.generationSummary).toHaveProperty('totalSystemsGenerated');\n      expect(summary.generationSummary).toHaveProperty('totalCapabilitiesAdded');\n      expect(summary.generationSummary).toHaveProperty('estimatedTotalValue');\n    });\n\n    it('should handle empty results', () => {\n      const summary = (engine as any).generateTransformationSummary([], 10);\n\n      expect(summary.totalBatches).toBe(0);\n      expect(summary.successfulBatches).toBe(0);\n      expect(summary.successRate).toBe(0);\n      expect(summary.totalDuration).toBe(10);\n    });\n  });\n});"],"version":3}