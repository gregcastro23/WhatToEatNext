{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/__tests__/performance/MemoryUsage.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/__tests__/performance/MemoryUsage.test.ts"],"sourcesContent":["/**\n * Performance Tests for Memory Usage Validation\n * Perfect Codebase Campaign - Memory Performance Testing\n */\n\nimport { ProgressTracker } from '../../ProgressTracker';\nimport { CampaignController } from '../../CampaignController';\nimport { SafetyProtocol } from '../../SafetyProtocol';\nimport {\n  CampaignConfig,\n  SafetySettings,\n  SafetyLevel,\n  ProgressMetrics,\n} from '../../../../types/campaign';\n\ndescribe('Memory Usage Performance Tests', () => {\n  let progressTracker: ProgressTracker;\n  let campaignController: CampaignController;\n  let safetyProtocol: SafetyProtocol;\n  let mockConfig: CampaignConfig;\n\n  beforeEach(() => {\n    const safetySettings: SafetySettings = {\n      maxFilesPerBatch: 25,\n      buildValidationFrequency: 5,\n      testValidationFrequency: 10,\n      corruptionDetectionEnabled: true,\n      automaticRollbackEnabled: true,\n      stashRetentionDays: 7,\n    };\n\n    mockConfig = {\n      phases: [\n        {\n          id: 'memory-test-phase',\n          name: 'Memory Test Phase',\n          description: 'Phase for memory testing',\n          tools: [\n            {\n              scriptPath: 'scripts/memory/test-script.js',\n              parameters: { maxFiles: 100 },\n              batchSize: 100,\n              safetyLevel: SafetyLevel.MEDIUM,\n            },\n          ],\n          successCriteria: { buildTime: 10 },\n          safetyCheckpoints: [],\n        },\n      ],\n      safetySettings,\n      progressTargets: {\n        typeScriptErrors: 0,\n        lintingWarnings: 0,\n        buildTime: 10,\n        enterpriseSystems: 200,\n      },\n      toolConfiguration: {\n        enhancedErrorFixer:\n          'scripts/typescript-fixes/fix-typescript-errors-enhanced-v3.js',\n        explicitAnyFixer:\n          'scripts/typescript-fixes/fix-explicit-any-systematic.js',\n        unusedVariablesFixer:\n          'scripts/typescript-fixes/fix-unused-variables-enhanced.js',\n        consoleStatementFixer:\n          'scripts/lint-fixes/fix-console-statements-only.js',\n      },\n    };\n\n    progressTracker = new ProgressTracker();\n    campaignController = new CampaignController(mockConfig);\n    safetyProtocol = new SafetyProtocol(safetySettings);\n\n    // Reset mocks\n    jest.clearAllMocks();\n  });\n\n  describe('Memory Usage Monitoring', () => {\n    it('should track memory usage under 50MB target', async () => {\n      const originalMemoryUsage = process.memoryUsage;\n      process.memoryUsage = jest.fn().mockReturnValue({\n        heapUsed: 40 * 1024 * 1024, // 40MB\n        heapTotal: 80 * 1024 * 1024,\n        external: 5 * 1024 * 1024,\n        rss: 100 * 1024 * 1024,\n        arrayBuffers: 2 * 1024 * 1024,\n      });\n\n      const memoryUsage = await progressTracker.getMemoryUsage();\n\n      expect(memoryUsage).toBe(40);\n      expect(memoryUsage).toBeLessThan(50); // Under target\n\n      process.memoryUsage = originalMemoryUsage;\n    });\n\n    it('should detect memory usage spikes', async () => {\n      const originalMemoryUsage = process.memoryUsage;\n      process.memoryUsage = jest.fn().mockReturnValue({\n        heapUsed: 75 * 1024 * 1024, // 75MB - exceeds target\n        heapTotal: 150 * 1024 * 1024,\n        external: 10 * 1024 * 1024,\n        rss: 200 * 1024 * 1024,\n        arrayBuffers: 5 * 1024 * 1024,\n      });\n\n      const memoryUsage = await progressTracker.getMemoryUsage();\n\n      expect(memoryUsage).toBe(75);\n      expect(memoryUsage).toBeGreaterThan(50); // Exceeds target\n\n      process.memoryUsage = originalMemoryUsage;\n    });\n\n    it('should handle memory measurement errors gracefully', async () => {\n      const originalMemoryUsage = process.memoryUsage;\n      process.memoryUsage = jest.fn().mockImplementation(() => {\n        throw new Error('Memory measurement failed');\n      });\n\n      const memoryUsage = await progressTracker.getMemoryUsage();\n\n      expect(memoryUsage).toBe(0); // Error handling returns 0\n\n      process.memoryUsage = originalMemoryUsage;\n    });\n\n    it('should track memory usage trends over time', async () => {\n      const originalMemoryUsage = process.memoryUsage;\n      const memoryReadings: number[] = [];\n      let callCount = 0;\n\n      process.memoryUsage = jest.fn().mockImplementation(() => {\n        callCount++;\n        // Simulate memory usage that increases then decreases (garbage collection)\n        const baseMemory = 30;\n        const variation = Math.sin(callCount * 0.5) * 10; // ±10MB variation\n        const heapUsed = (baseMemory + variation) * 1024 * 1024;\n\n        return {\n          heapUsed,\n          heapTotal: heapUsed * 2,\n          external: 5 * 1024 * 1024,\n          rss: heapUsed * 1.5,\n          arrayBuffers: 2 * 1024 * 1024,\n        };\n      });\n\n      // Collect multiple memory readings\n      for (let i = 0; i < 10; i++) {\n        const memoryUsage = await progressTracker.getMemoryUsage();\n        memoryReadings.push(memoryUsage);\n      }\n\n      expect(memoryReadings.length).toBe(10);\n      expect(memoryReadings.every(reading => reading > 0)).toBe(true);\n\n      // Memory should vary but stay within reasonable bounds\n      const maxMemory = Math.max(...memoryReadings);\n      const minMemory = Math.min(...memoryReadings);\n      expect(maxMemory).toBeLessThan(50); // Should stay under target\n      expect(minMemory).toBeGreaterThan(15); // Should have reasonable minimum\n\n      process.memoryUsage = originalMemoryUsage;\n    });\n  });\n\n  describe('Memory Leak Detection', () => {\n    it('should detect potential memory leaks in progress tracking', async () => {\n      const originalMemoryUsage = process.memoryUsage;\n      let simulatedMemoryLeak = 30; // Start at 30MB\n\n      process.memoryUsage = jest.fn().mockImplementation(() => {\n        // Simulate memory leak - memory increases with each call\n        simulatedMemoryLeak += 2; // 2MB increase per call\n        return {\n          heapUsed: simulatedMemoryLeak * 1024 * 1024,\n          heapTotal: simulatedMemoryLeak * 2 * 1024 * 1024,\n          external: 5 * 1024 * 1024,\n          rss: simulatedMemoryLeak * 1.5 * 1024 * 1024,\n          arrayBuffers: 2 * 1024 * 1024,\n        };\n      });\n\n      const memoryReadings: number[] = [];\n\n      // Simulate multiple operations that could cause memory leaks\n      for (let i = 0; i < 15; i++) {\n        const memoryUsage = await progressTracker.getMemoryUsage();\n        memoryReadings.push(memoryUsage);\n      }\n\n      // Should detect increasing memory usage pattern\n      const firstReading = memoryReadings[0];\n      const lastReading = memoryReadings[memoryReadings.length - 1];\n\n      expect(lastReading).toBeGreaterThan(firstReading);\n      expect(lastReading).toBeGreaterThan(50); // Should exceed target, indicating leak\n\n      process.memoryUsage = originalMemoryUsage;\n    });\n\n    it('should validate memory cleanup in safety protocol', async () => {\n      const originalMemoryUsage = process.memoryUsage;\n      const memoryUsage = 35; // Start at 35MB\n\n      process.memoryUsage = jest.fn().mockImplementation(() => {\n        return {\n          heapUsed: memoryUsage * 1024 * 1024,\n          heapTotal: memoryUsage * 2 * 1024 * 1024,\n          external: 5 * 1024 * 1024,\n          rss: memoryUsage * 1.5 * 1024 * 1024,\n          arrayBuffers: 2 * 1024 * 1024,\n        };\n      });\n\n      // Create many safety events to test memory management\n      for (let i = 0; i < 1100; i++) {\n        (safetyProtocol as any).addSafetyEvent({\n          type: 'CHECKPOINT_CREATED',\n          timestamp: new Date(),\n          description: `Event ${i}`,\n          severity: 'INFO',\n          action: 'TEST',\n        });\n      }\n\n      const events = safetyProtocol.getSafetyEvents();\n\n      // Should limit events to prevent memory issues\n      expect(events.length).toBe(500); // Should be trimmed\n\n      // Memory should remain stable\n      const finalMemoryUsage = await progressTracker.getMemoryUsage();\n      expect(finalMemoryUsage).toBeLessThan(50);\n\n      process.memoryUsage = originalMemoryUsage;\n    });\n\n    it('should validate memory cleanup in progress tracker', async () => {\n      const originalMemoryUsage = process.memoryUsage;\n      const memoryUsage = 30; // Start at 30MB\n\n      process.memoryUsage = jest.fn().mockImplementation(() => {\n        return {\n          heapUsed: memoryUsage * 1024 * 1024,\n          heapTotal: memoryUsage * 2 * 1024 * 1024,\n          external: 5 * 1024 * 1024,\n          rss: memoryUsage * 1.5 * 1024 * 1024,\n          arrayBuffers: 2 * 1024 * 1024,\n        };\n      });\n\n      // Mock progress metrics to create history\n      jest\n        .spyOn(progressTracker, 'getProgressMetrics')\n        .mockImplementation(async () => {\n          return {\n            typeScriptErrors: {\n              current: 86,\n              target: 0,\n              reduction: 0,\n              percentage: 0,\n            },\n            lintingWarnings: {\n              current: 4506,\n              target: 0,\n              reduction: 0,\n              percentage: 0,\n            },\n            buildPerformance: {\n              currentTime: 8.5,\n              targetTime: 10,\n              cacheHitRate: 0.8,\n              memoryUsage: memoryUsage,\n            },\n            enterpriseSystems: {\n              current: 0,\n              target: 200,\n              transformedExports: 0,\n            },\n          };\n        });\n\n      // Generate large metrics history\n      for (let i = 0; i < 110; i++) {\n        await progressTracker.getProgressMetrics();\n      }\n\n      const history = progressTracker.getMetricsHistory();\n\n      // Should limit history to prevent memory issues\n      expect(history.length).toBe(50); // Should be trimmed\n\n      // Memory should remain stable\n      const finalMemoryUsage = await progressTracker.getMemoryUsage();\n      expect(finalMemoryUsage).toBeLessThan(50);\n\n      process.memoryUsage = originalMemoryUsage;\n    });\n  });\n\n  describe('Memory Efficiency Testing', () => {\n    it('should efficiently handle large file processing', async () => {\n      const originalMemoryUsage = process.memoryUsage;\n      const baseMemory = 35;\n\n      process.memoryUsage = jest.fn().mockImplementation(() => {\n        // Memory should not increase significantly with large file counts\n        const memoryIncrease = Math.min(10, Math.random() * 5); // Max 10MB increase\n        return {\n          heapUsed: (baseMemory + memoryIncrease) * 1024 * 1024,\n          heapTotal: (baseMemory + memoryIncrease) * 2 * 1024 * 1024,\n          external: 5 * 1024 * 1024,\n          rss: (baseMemory + memoryIncrease) * 1.5 * 1024 * 1024,\n          arrayBuffers: 2 * 1024 * 1024,\n        };\n      });\n\n      // Simulate processing large number of files\n      const largeFileList = Array.from(\n        { length: 1000 },\n        (_, i) => `file${i}.ts`\n      );\n\n      // Mock campaign execution with large file processing\n      jest.spyOn(campaignController as any, 'executeTool').mockResolvedValue({\n        filesProcessed: largeFileList,\n        changesApplied: largeFileList.length,\n        success: true,\n      });\n\n      const phase = mockConfig.phases[0];\n      const result = await campaignController.executePhase(phase);\n\n      expect(result.success).toBe(true);\n      expect(result.filesProcessed).toBe(1000);\n\n      // Memory should remain efficient even with large file processing\n      const memoryUsage = await progressTracker.getMemoryUsage();\n      expect(memoryUsage).toBeLessThan(50);\n\n      process.memoryUsage = originalMemoryUsage;\n    });\n\n    it('should efficiently manage concurrent operations', async () => {\n      const originalMemoryUsage = process.memoryUsage;\n      const baseMemory = 30;\n\n      process.memoryUsage = jest.fn().mockImplementation(() => {\n        // Memory should remain stable during concurrent operations\n        const variation = Math.random() * 5; // ±5MB variation\n        return {\n          heapUsed: (baseMemory + variation) * 1024 * 1024,\n          heapTotal: (baseMemory + variation) * 2 * 1024 * 1024,\n          external: 5 * 1024 * 1024,\n          rss: (baseMemory + variation) * 1.5 * 1024 * 1024,\n          arrayBuffers: 2 * 1024 * 1024,\n        };\n      });\n\n      // Run multiple concurrent operations\n      const promises = Array.from({ length: 10 }, async () => {\n        return Promise.all([\n          progressTracker.getMemoryUsage(),\n          progressTracker.getProgressMetrics(),\n          safetyProtocol.validateGitState(),\n        ]);\n      });\n\n      const results = await Promise.all(promises);\n\n      expect(results.length).toBe(10);\n      expect(results.every(result => result.length === 3)).toBe(true);\n\n      // Memory should remain stable\n      const finalMemoryUsage = await progressTracker.getMemoryUsage();\n      expect(finalMemoryUsage).toBeLessThan(50);\n\n      process.memoryUsage = originalMemoryUsage;\n    });\n\n    it('should handle memory pressure gracefully', async () => {\n      const originalMemoryUsage = process.memoryUsage;\n      let memoryPressure = false;\n\n      process.memoryUsage = jest.fn().mockImplementation(() => {\n        // Simulate memory pressure scenario\n        const baseMemory = memoryPressure ? 48 : 35; // High memory when under pressure\n        return {\n          heapUsed: baseMemory * 1024 * 1024,\n          heapTotal: baseMemory * 2 * 1024 * 1024,\n          external: 5 * 1024 * 1024,\n          rss: baseMemory * 1.5 * 1024 * 1024,\n          arrayBuffers: 2 * 1024 * 1024,\n        };\n      });\n\n      // Normal operation\n      let memoryUsage = await progressTracker.getMemoryUsage();\n      expect(memoryUsage).toBe(35);\n\n      // Simulate memory pressure\n      memoryPressure = true;\n      memoryUsage = await progressTracker.getMemoryUsage();\n      expect(memoryUsage).toBe(48);\n      expect(memoryUsage).toBeLessThan(50); // Still under target\n\n      // System should handle pressure gracefully\n      const metrics = await progressTracker.getProgressMetrics();\n      expect(metrics).toBeDefined();\n      expect(metrics.buildPerformance.memoryUsage).toBe(48);\n\n      process.memoryUsage = originalMemoryUsage;\n    });\n  });\n\n  describe('Memory Performance Benchmarks', () => {\n    it('should benchmark memory allocation patterns', async () => {\n      const originalMemoryUsage = process.memoryUsage;\n      const memorySnapshots: number[] = [];\n      let allocationCount = 0;\n\n      process.memoryUsage = jest.fn().mockImplementation(() => {\n        allocationCount++;\n        // Simulate realistic memory allocation pattern\n        const baseMemory = 30;\n        const cyclicPattern = Math.sin(allocationCount * 0.3) * 8; // ±8MB cyclic pattern\n        const growthTrend = allocationCount * 0.1; // Slight growth trend\n        const totalMemory = baseMemory + cyclicPattern + growthTrend;\n\n        return {\n          heapUsed: totalMemory * 1024 * 1024,\n          heapTotal: totalMemory * 2 * 1024 * 1024,\n          external: 5 * 1024 * 1024,\n          rss: totalMemory * 1.5 * 1024 * 1024,\n          arrayBuffers: 2 * 1024 * 1024,\n        };\n      });\n\n      // Collect memory snapshots during various operations\n      for (let i = 0; i < 20; i++) {\n        const memoryUsage = await progressTracker.getMemoryUsage();\n        memorySnapshots.push(memoryUsage);\n\n        // Perform some operations to trigger memory allocation\n        await progressTracker.getProgressMetrics();\n      }\n\n      expect(memorySnapshots.length).toBe(20);\n\n      // Analyze memory allocation patterns\n      const maxMemory = Math.max(...memorySnapshots);\n      const minMemory = Math.min(...memorySnapshots);\n      const avgMemory =\n        memorySnapshots.reduce((sum, mem) => sum + mem, 0) /\n        memorySnapshots.length;\n\n      expect(maxMemory).toBeLessThan(50); // Should stay under target\n      expect(minMemory).toBeGreaterThan(20); // Should have reasonable minimum\n      expect(avgMemory).toBeLessThan(45); // Average should be well under target\n\n      // Memory variance should be reasonable\n      const variance =\n        memorySnapshots.reduce(\n          (sum, mem) => sum + Math.pow(mem - avgMemory, 2),\n          0\n        ) / memorySnapshots.length;\n      const standardDeviation = Math.sqrt(variance);\n      expect(standardDeviation).toBeLessThan(10); // Should have reasonable variance\n\n      process.memoryUsage = originalMemoryUsage;\n    });\n\n    it('should validate memory efficiency across different operations', async () => {\n      const originalMemoryUsage = process.memoryUsage;\n      const operationMemoryUsage: Record<string, number[]> = {\n        typeScriptCheck: [],\n        lintingCheck: [],\n        enterpriseCount: [],\n        buildTime: [],\n        progressMetrics: [],\n      };\n\n      let operationType = 'default';\n      process.memoryUsage = jest.fn().mockImplementation(() => {\n        // Different memory usage patterns for different operations\n        let baseMemory = 30;\n        switch (operationType) {\n          case 'typeScriptCheck':\n            baseMemory = 35; // TypeScript checking uses more memory\n            break;\n          case 'lintingCheck':\n            baseMemory = 32; // Linting uses moderate memory\n            break;\n          case 'enterpriseCount':\n            baseMemory = 28; // Simple grep uses less memory\n            break;\n          case 'buildTime':\n            baseMemory = 40; // Build process uses more memory\n            break;\n          case 'progressMetrics':\n            baseMemory = 33; // Metrics collection uses moderate memory\n            break;\n        }\n\n        return {\n          heapUsed: baseMemory * 1024 * 1024,\n          heapTotal: baseMemory * 2 * 1024 * 1024,\n          external: 5 * 1024 * 1024,\n          rss: baseMemory * 1.5 * 1024 * 1024,\n          arrayBuffers: 2 * 1024 * 1024,\n        };\n      });\n\n      // Test different operations and their memory usage\n      const operations = [\n        {\n          name: 'typeScriptCheck',\n          fn: () => progressTracker.getTypeScriptErrorCount(),\n        },\n        {\n          name: 'lintingCheck',\n          fn: () => progressTracker.getLintingWarningCount(),\n        },\n        {\n          name: 'enterpriseCount',\n          fn: () => progressTracker.getEnterpriseSystemCount(),\n        },\n        { name: 'buildTime', fn: () => progressTracker.getBuildTime() },\n        {\n          name: 'progressMetrics',\n          fn: () => progressTracker.getProgressMetrics(),\n        },\n      ];\n\n      for (const operation of operations) {\n        operationType = operation.name;\n\n        // Run operation multiple times to get average memory usage\n        for (let i = 0; i < 5; i++) {\n          await operation.fn();\n          const memoryUsage = await progressTracker.getMemoryUsage();\n          operationMemoryUsage[operation.name].push(memoryUsage);\n        }\n      }\n\n      // Validate memory usage for each operation type\n      for (const [opName, memoryReadings] of Object.entries(\n        operationMemoryUsage\n      )) {\n        expect(memoryReadings.length).toBe(5);\n\n        const avgMemory =\n          memoryReadings.reduce((sum, mem) => sum + mem, 0) /\n          memoryReadings.length;\n        expect(avgMemory).toBeLessThan(50); // All operations should stay under target\n\n        // Memory usage should be consistent for the same operation\n        const maxMemory = Math.max(...memoryReadings);\n        const minMemory = Math.min(...memoryReadings);\n        expect(maxMemory - minMemory).toBeLessThan(5); // Should have low variance\n      }\n\n      process.memoryUsage = originalMemoryUsage;\n    });\n  });\n});\n"],"version":3}