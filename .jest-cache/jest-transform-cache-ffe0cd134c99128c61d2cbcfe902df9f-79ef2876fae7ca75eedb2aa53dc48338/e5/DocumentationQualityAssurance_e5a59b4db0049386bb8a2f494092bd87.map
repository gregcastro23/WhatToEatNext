{"file":"/Users/GregCastro/Desktop/WhatToEatNext/.consolidation-backups-2025-08-23T17-54-10-092Z/src/services/campaign/unintentional-any-elimination/DocumentationQualityAssurance.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/.consolidation-backups-2025-08-23T17-54-10-092Z/src/services/campaign/unintentional-any-elimination/DocumentationQualityAssurance.ts"],"sourcesContent":["/**\n * Documentation Quality Assurance System\n *\n * Implements comment quality checking, validation of documentation completeness,\n * and reporting system for undocumented intentional any types.\n */\n\nimport * as fs from 'fs/promises';\nimport path from 'path';\nimport {\n    AnyTypeCategory,\n    ClassificationContext,\n    CodeDomain,\n    DocumentationReport,\n    DocumentationValidation\n} from './types';\n\nexport interface QualityAssuranceConfig {\n  sourceDirectories: string[];\n  excludePatterns: string[];\n  minimumCommentLength: number;\n  requiredKeywords: string[];\n  qualityThresholds: {\n    excellent: number;\n    good: number;\n    fair: number;\n  };\n}\n\nexport interface UndocumentedAnyType {\n  filePath: string;\n  lineNumber: number;\n  codeSnippet: string;\n  category: AnyTypeCategory;\n  domain: CodeDomain;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n}\n\nexport interface QualityMetrics {\n  totalFiles: number;\n  filesWithAnyTypes: number;\n  totalAnyTypes: number;\n  documentedAnyTypes: number;\n  undocumentedAnyTypes: number;\n  qualityDistribution: Record<string, number>;\n  averageQualityScore: number;\n  compliancePercentage: number;\n}\n\nexport class DocumentationQualityAssurance {\n  private config: QualityAssuranceConfig;\n  private qualityCache: Map<string, DocumentationValidation> = new Map();\n\n  constructor(config?: Partial<QualityAssuranceConfig>) {\n    this.config = {\n      sourceDirectories: ['src'],\n      excludePatterns: [\n        'node_modules/**',\n        'dist/**',\n        'build/**',\n        '**/*.test.ts',\n        '**/*.test.tsx',\n        '**/*.spec.ts',\n        '**/*.spec.tsx'\n      ],\n      minimumCommentLength: 20,\n      requiredKeywords: ['intentionally', 'deliberately', 'required', 'needed'],\n      qualityThresholds: {\n        excellent: 90,\n        good: 70,\n        fair: 50\n      },\n      ...config\n    };\n  }\n\n  /**\n   * Perform comprehensive quality assurance scan\n   */\n  async performQualityAssurance(): Promise<DocumentationReport> {\n    const files = await this.findTypeScriptFiles();\n    const undocumentedTypes: UndocumentedAnyType[] = [];\n    const qualityBreakdown: Record<string, number> = {\n      poor: 0,\n      fair: 0,\n      good: 0,\n      excellent: 0\n    };\n\n    let totalAnyTypes = 0;\n    let documentedTypes = 0;\n    let totalQualityScore = 0;\n\n    for (const filePath of files) {\n      try {\n        const anyTypes = await this.findAnyTypesInFile(filePath);\n        totalAnyTypes += anyTypes.length;\n\n        for (const anyType of anyTypes) {\n          const validation = await this.validateDocumentationQuality(anyType);\n\n          if (validation.hasComment) {\n            documentedTypes++;\n            qualityBreakdown[validation.commentQuality]++;\n            totalQualityScore += this.getQualityScore(validation.commentQuality);\n          } else {\n            undocumentedTypes.push({\n              filePath: anyType.filePath,\n              lineNumber: anyType.lineNumber,\n              codeSnippet: anyType.codeSnippet,\n              category: this.categorizeAnyType(anyType.codeSnippet),\n              domain: this.determineDomain(anyType.filePath),\n              severity: this.assessSeverity(anyType)\n            });\n          }\n        }\n      } catch (error) {\n        console.warn(`Error processing file ${filePath}:`, error);\n      }\n    }\n\n    const averageQualityScore = totalAnyTypes > 0 ? totalQualityScore / documentedTypes : 0;\n    const documentationCoverage = totalAnyTypes > 0 ? (documentedTypes / totalAnyTypes) * 100 : 100;\n\n    return {\n      totalIntentionalAnyTypes: totalAnyTypes,\n      documentedTypes,\n      undocumentedTypes: undocumentedTypes.length,\n      documentationCoverage,\n      qualityBreakdown,\n      undocumentedFiles: [...new Set(undocumentedTypes.map(t => t.filePath))],\n      recommendations: this.generateRecommendations(\n        documentationCoverage,\n        qualityBreakdown,\n        undocumentedTypes\n      )\n    };\n  }\n\n  /**\n   * Validate documentation quality for a specific context\n   */\n  async validateDocumentationQuality(context: ClassificationContext): Promise<DocumentationValidation> {\n    const cacheKey = `${context.filePath}:${context.lineNumber}`;\n\n    if (this.qualityCache.has(cacheKey)) {\n      return this.qualityCache.get(cacheKey)!;\n    }\n\n    const fileContent = await fs.readFile(context.filePath, 'utf-8');\n    const lines = fileContent.split('\\n');\n    const lineIndex = context.lineNumber - 1;\n\n    // Check for comments in surrounding lines\n    const { comment, hasComment } = this.extractComment(lines, lineIndex);\n\n    // Check for ESLint disable comment\n    const hasEslintDisable = this.hasEslintDisableComment(lines, lineIndex);\n    const eslintDisableHasExplanation = hasEslintDisable &&\n      this.eslintDisableHasExplanation(lines, lineIndex);\n\n    // Assess comment quality\n    const commentQuality = this.assessCommentQuality(comment);\n\n    // Check completeness\n    const isComplete = hasComment &&\n      commentQuality !== 'poor' &&\n      hasEslintDisable &&\n      eslintDisableHasExplanation;\n\n    // Generate suggestions\n    const suggestions = this.generateQualityImprovementSuggestions(\n      comment,\n      hasComment,\n      commentQuality,\n      hasEslintDisable,\n      eslintDisableHasExplanation,\n      context\n    );\n\n    const validation: DocumentationValidation = {\n      hasComment,\n      commentQuality,\n      hasEslintDisable,\n      eslintDisableHasExplanation,\n      isComplete,\n      suggestions\n    };\n\n    this.qualityCache.set(cacheKey, validation);\n    return validation;\n  }\n\n  /**\n   * Generate detailed quality improvement report\n   */\n  async generateQualityReport(): Promise<QualityMetrics> {\n    const files = await this.findTypeScriptFiles();\n    let totalFiles = 0;\n    let filesWithAnyTypes = 0;\n    let totalAnyTypes = 0;\n    let documentedAnyTypes = 0;\n    const qualityDistribution: Record<string, number> = {\n      poor: 0,\n      fair: 0,\n      good: 0,\n      excellent: 0\n    };\n    let totalQualityScore = 0;\n\n    for (const filePath of files) {\n      totalFiles++;\n\n      try {\n        const anyTypes = await this.findAnyTypesInFile(filePath);\n\n        if (anyTypes.length > 0) {\n          filesWithAnyTypes++;\n          totalAnyTypes += anyTypes.length;\n\n          for (const anyType of anyTypes) {\n            const validation = await this.validateDocumentationQuality(anyType);\n\n            if (validation.hasComment) {\n              documentedAnyTypes++;\n              qualityDistribution[validation.commentQuality]++;\n              totalQualityScore += this.getQualityScore(validation.commentQuality);\n            }\n          }\n        }\n      } catch (error) {\n        console.warn(`Error processing file ${filePath}:`, error);\n      }\n    }\n\n    const averageQualityScore = documentedAnyTypes > 0 ? totalQualityScore / documentedAnyTypes : 0;\n    const compliancePercentage = totalAnyTypes > 0 ? (documentedAnyTypes / totalAnyTypes) * 100 : 100;\n\n    return {\n      totalFiles,\n      filesWithAnyTypes,\n      totalAnyTypes,\n      documentedAnyTypes,\n      undocumentedAnyTypes: totalAnyTypes - documentedAnyTypes,\n      qualityDistribution,\n      averageQualityScore,\n      compliancePercentage\n    };\n  }\n\n  /**\n   * Find all TypeScript files in source directories\n   */\n  private async findTypeScriptFiles(): Promise<string[]> {\n    const files: string[] = [];\n\n    for (const dir of this.config.sourceDirectories) {\n      const dirFiles = await this.findFilesRecursively(dir, ['.ts', '.tsx']);\n      files.push(...dirFiles);\n    }\n\n    // Filter out excluded patterns\n    return files.filter(file => {\n      return !this.config.excludePatterns.some(pattern => {\n        const regex = new RegExp(pattern.replace(/\\*\\*/g, '.*').replace(/\\*/g, '[^/]*'));\n        return regex.test(file);\n      });\n    });\n  }\n\n  /**\n   * Recursively find files with specific extensions\n   */\n  private async findFilesRecursively(dir: string, extensions: string[]): Promise<string[]> {\n    const files: string[] = [];\n\n    try {\n      const entries = await fs.readdir(dir, { withFileTypes: true });\n\n      for (const entry of entries) {\n        const fullPath = path.join(dir, entry.name);\n\n        if (entry.isDirectory()) {\n          const subFiles = await this.findFilesRecursively(fullPath, extensions);\n          files.push(...subFiles);\n        } else if (entry.isFile()) {\n          const ext = path.extname(entry.name);\n          if (extensions.includes(ext)) {\n            files.push(fullPath);\n          }\n        }\n      }\n    } catch (error) {\n      // Directory might not exist or be accessible\n      console.warn(`Could not read directory ${dir}:`, error);\n    }\n\n    return files;\n  }\n\n  /**\n   * Find any types in a specific file\n   */\n  private async findAnyTypesInFile(filePath: string): Promise<ClassificationContext[]> {\n    const content = await fs.readFile(filePath, 'utf-8');\n    const lines = content.split('\\n');\n    const anyTypes: ClassificationContext[] = [];\n\n    // Patterns to match any types\n    const anyPatterns = [\n      /:\\s*any\\b/g,           // : any\n      /:\\s*any\\[\\]/g,         // : unknown[]\n      /:\\s*Record<[^,]+,\\s*any>/g,  // : Record<string, unknown>\n      /\\bas\\s+any\\b/g,        // as any\n      /<any>/g,               // <any>\n      /Array<unknown>/g,          // Array<unknown>\n    ];\n\n    lines.forEach((line, index) => {\n      anyPatterns.forEach(pattern => {\n        const matches = line.matchAll(pattern);\n        for (const match of matches) {\n          if (match.index !== undefined) {\n            const context: ClassificationContext = {\n              filePath,\n              lineNumber: index + 1,\n              codeSnippet: line.trim(),\n              surroundingLines: this.getSurroundingLines(lines, index),\n              hasExistingComment: this.hasCommentNearLine(lines, index),\n              existingComment: this.extractComment(lines, index).comment,\n              isInTestFile: this.isTestFile(filePath),\n              domainContext: {\n                domain: this.determineDomain(filePath),\n                intentionalityHints: [],\n                suggestedTypes: [],\n                preservationReasons: []\n              }\n            };\n            anyTypes.push(context);\n          }\n        }\n      });\n    });\n\n    return anyTypes;\n  }\n\n  /**\n   * Extract comment from surrounding lines\n   */\n  private extractComment(lines: string[], lineIndex: number): { comment: string; hasComment: boolean } {\n    // Check previous lines for comments\n    for (let i = Math.max(0, lineIndex - 3); i < lineIndex; i++) {\n      const line = lines[i]?.trim();\n      if (line && line.startsWith('//')) {\n        return {\n          comment: line.replace(/^\\/\\/\\s*/, ''),\n          hasComment: true\n        };\n      }\n      if (line && line.startsWith('/*')) {\n        // Handle multi-line comments\n        let comment = line.replace(/^\\/\\*\\s*/, '');\n        let j = i;\n        while (j < lines.length && !lines[j].includes('*/')) {\n          j++;\n          if (j < lines.length) {\n            comment += ' ' + lines[j].trim();\n          }\n        }\n        comment = comment.replace(/\\*\\/.*$/, '');\n        return {\n          comment: comment.trim(),\n          hasComment: true\n        };\n      }\n    }\n\n    return { comment: '', hasComment: false };\n  }\n\n  /**\n   * Check if there's a comment near the line\n   */\n  private hasCommentNearLine(lines: string[], lineIndex: number): boolean {\n    for (let i = Math.max(0, lineIndex - 2); i <= Math.min(lines.length - 1, lineIndex + 1); i++) {\n      const line = lines[i]?.trim();\n      if (line && (line.startsWith('//') || line.startsWith('/*'))) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Get surrounding lines for context\n   */\n  private getSurroundingLines(lines: string[], lineIndex: number): string[] {\n    const start = Math.max(0, lineIndex - 2);\n    const end = Math.min(lines.length, lineIndex + 3);\n    return lines.slice(start, end);\n  }\n\n  /**\n   * Check if ESLint disable comment exists\n   */\n  private hasEslintDisableComment(lines: string[], lineIndex: number): boolean {\n    for (let i = Math.max(0, lineIndex - 2); i <= lineIndex; i++) {\n      if (lines[i] && lines[i].includes('eslint-disable') &&\n          lines[i].includes('no-explicit-any')) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if ESLint disable comment has explanation\n   */\n  private eslintDisableHasExplanation(lines: string[], lineIndex: number): boolean {\n    for (let i = Math.max(0, lineIndex - 2); i <= lineIndex; i++) {\n      const line = lines[i];\n      if (line && line.includes('eslint-disable') && line.includes('no-explicit-any')) {\n        const parts = line.split('eslint-disable-next-line');\n        return parts.length > 1 && parts[1].trim().length > '@typescript-eslint/no-explicit-any'.length;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Assess comment quality\n   */\n  private assessCommentQuality(comment: string): 'poor' | 'fair' | 'good' | 'excellent' {\n    if (!comment || comment.trim().length < this.config.minimumCommentLength) {\n      return 'poor';\n    }\n\n    const lowerComment = comment.toLowerCase();\n    let score = 0;\n\n    // Check for required keywords\n    const hasRequiredKeyword = this.config.requiredKeywords.some(keyword =>\n      lowerComment.includes(keyword.toLowerCase())\n    );\n    if (hasRequiredKeyword) score += 30;\n\n    // Check for explanation\n    if (lowerComment.includes('because') || lowerComment.includes('for') ||\n        lowerComment.includes('due to') || lowerComment.includes('requires')) {\n      score += 25;\n    }\n\n    // Check for domain-specific context\n    if (lowerComment.includes('api') || lowerComment.includes('external') ||\n        lowerComment.includes('dynamic') || lowerComment.includes('flexible') ||\n        lowerComment.includes('legacy') || lowerComment.includes('compatibility')) {\n      score += 20;\n    }\n\n    // Check length and detail\n    if (comment.length > 50) score += 15;\n    if (comment.length > 100) score += 10;\n\n    if (score >= this.config.qualityThresholds.excellent) return 'excellent';\n    if (score >= this.config.qualityThresholds.good) return 'good';\n    if (score >= this.config.qualityThresholds.fair) return 'fair';\n    return 'poor';\n  }\n\n  /**\n   * Get numeric quality score\n   */\n  private getQualityScore(quality: 'poor' | 'fair' | 'good' | 'excellent'): number {\n    const scores = { poor: 25, fair: 50, good: 75, excellent: 100 };\n    return scores[quality];\n  }\n\n  /**\n   * Categorize any type based on code snippet\n   */\n  private categorizeAnyType(codeSnippet: string): AnyTypeCategory {\n    const lower = codeSnippet.toLowerCase();\n\n    if (lower.includes('catch') || lower.includes('error')) {\n      return AnyTypeCategory.ERROR_HANDLING;\n    }\n    if (lower.includes('api') || lower.includes('response') || lower.includes('fetch')) {\n      return AnyTypeCategory.EXTERNAL_API;\n    }\n    if (lower.includes('mock') || lower.includes('jest') || lower.includes('test')) {\n      return AnyTypeCategory.TEST_MOCK;\n    }\n    if (lower.includes('config') || lower.includes('options') || lower.includes('params')) {\n      return AnyTypeCategory.DYNAMIC_CONFIG;\n    }\n    if (lower.includes('any[]')) {\n      return AnyTypeCategory.ARRAY_TYPE;\n    }\n    if (lower.includes('record') || lower.includes('object')) {\n      return AnyTypeCategory.RECORD_TYPE;\n    }\n    if (lower.includes('function') || lower.includes('=>') || lower.includes('param')) {\n      return AnyTypeCategory.FUNCTION_PARAM;\n    }\n    if (lower.includes('return') || lower.includes(':')) {\n      return AnyTypeCategory.RETURN_TYPE;\n    }\n\n    return AnyTypeCategory.LEGACY_COMPATIBILITY;\n  }\n\n  /**\n   * Determine code domain from file path\n   */\n  private determineDomain(filePath: string): CodeDomain {\n    const lower = filePath.toLowerCase();\n\n    // Check for test files first (they often contain other keywords)\n    if (lower.includes('test') || lower.includes('spec')) {\n      return CodeDomain.TEST;\n    }\n    if (lower.includes('astro') || lower.includes('planet') || lower.includes('lunar')) {\n      return CodeDomain.ASTROLOGICAL;\n    }\n    if (lower.includes('recipe') || lower.includes('ingredient') || lower.includes('food')) {\n      return CodeDomain.RECIPE;\n    }\n    if (lower.includes('campaign') || lower.includes('automation')) {\n      return CodeDomain.CAMPAIGN;\n    }\n    if (lower.includes('intelligence') || lower.includes('ai') || lower.includes('ml')) {\n      return CodeDomain.INTELLIGENCE;\n    }\n    if (lower.includes('service') || lower.includes('api')) {\n      return CodeDomain.SERVICE;\n    }\n    if (lower.includes('component') || lower.includes('tsx')) {\n      return CodeDomain.COMPONENT;\n    }\n\n    return CodeDomain.UTILITY;\n  }\n\n  /**\n   * Assess severity of undocumented any type\n   */\n  private assessSeverity(context: ClassificationContext): 'low' | 'medium' | 'high' | 'critical' {\n    const { codeSnippet, filePath, isInTestFile } = context;\n\n    // Test files are lower priority\n    if (isInTestFile) return 'low';\n\n    // Critical files or patterns\n    if (filePath.includes('service') || filePath.includes('api')) {\n      return 'high';\n    }\n\n    // Function parameters and return types are medium priority\n    if (codeSnippet.includes('function') || codeSnippet.includes('=>')) {\n      return 'medium';\n    }\n\n    // Array and Record types are medium priority\n    if (codeSnippet.includes('any[]') || codeSnippet.includes('Record')) {\n      return 'medium';\n    }\n\n    return 'low';\n  }\n\n  /**\n   * Check if file is a test file\n   */\n  private isTestFile(filePath: string): boolean {\n    return /\\.(test|spec)\\.(ts|tsx)$/.test(filePath);\n  }\n\n  /**\n   * Generate quality improvement suggestions\n   */\n  private generateQualityImprovementSuggestions(\n    comment: string,\n    hasComment: boolean,\n    commentQuality: 'poor' | 'fair' | 'good' | 'excellent',\n    hasEslintDisable: boolean,\n    eslintDisableHasExplanation: boolean,\n    context: ClassificationContext\n  ): string[] {\n    const suggestions: string[] = [];\n\n    if (!hasComment) {\n      suggestions.push('Add explanatory comment indicating intentional use of any type');\n      suggestions.push(`Consider using template: \"// Intentionally any: ${this.suggestCommentTemplate(context)}\"`);\n    } else {\n      switch (commentQuality) {\n        case 'poor':\n          suggestions.push('Improve comment quality with more detailed explanation');\n          suggestions.push('Include keywords like \"intentionally\", \"deliberately\", or \"required\"');\n          suggestions.push(`Minimum comment length should be ${this.config.minimumCommentLength} characters`);\n          break;\n        case 'fair':\n          suggestions.push('Consider adding more context about why any type is necessary');\n          suggestions.push('Explain the specific use case or external dependency');\n          break;\n        case 'good':\n          suggestions.push('Comment quality is good, consider adding domain-specific context');\n          break;\n        case 'excellent':\n          // No suggestions needed\n          break;\n      }\n    }\n\n    if (!hasEslintDisable) {\n      suggestions.push('Add ESLint disable comment: // eslint-disable-next-line @typescript-eslint/no-explicit-any');\n    } else if (!eslintDisableHasExplanation) {\n      suggestions.push('Add explanation to ESLint disable comment');\n    }\n\n    if (suggestions.length === 0) {\n      suggestions.push('Documentation is complete and meets quality standards');\n    }\n\n    return suggestions;\n  }\n\n  /**\n   * Suggest comment template based on context\n   */\n  private suggestCommentTemplate(context: ClassificationContext): string {\n    const { domainContext, codeSnippet } = context;\n\n    switch (domainContext.domain) {\n      case CodeDomain.ASTROLOGICAL:\n        return 'External astrological API response with dynamic structure';\n      case CodeDomain.RECIPE:\n        return 'External recipe API with flexible ingredient data';\n      case CodeDomain.CAMPAIGN:\n        return 'Campaign system requires flexible configuration for dynamic behavior';\n      case CodeDomain.SERVICE:\n        return 'External API response with unknown structure';\n      case CodeDomain.TEST:\n        return 'Test mock requires flexible typing for comprehensive testing';\n      default:\n        if (codeSnippet.includes('catch') || codeSnippet.includes('error')) {\n          return 'Error handling requires flexible typing for unknown error structures';\n        }\n        return 'Requires flexible typing for specific use case';\n    }\n  }\n\n  /**\n   * Generate recommendations based on analysis results\n   */\n  private generateRecommendations(\n    coverage: number,\n    qualityBreakdown: Record<string, number>,\n    undocumentedTypes: UndocumentedAnyType[]\n  ): string[] {\n    const recommendations: string[] = [];\n\n    if (coverage < 50) {\n      recommendations.push('CRITICAL: Less than 50% of any types are documented. Immediate action required.');\n    } else if (coverage < 80) {\n      recommendations.push('WARNING: Documentation coverage is below 80%. Consider systematic documentation effort.');\n    } else if (coverage < 95) {\n      recommendations.push('GOOD: Documentation coverage is above 80%. Focus on remaining undocumented types.');\n    } else {\n      recommendations.push('EXCELLENT: Documentation coverage is above 95%. Maintain current standards.');\n    }\n\n    // Quality-based recommendations\n    const totalQuality = Object.values(qualityBreakdown).reduce((sum, count) => sum + count, 0);\n    if (totalQuality > 0) {\n      const poorPercentage = (qualityBreakdown.poor / totalQuality) * 100;\n      if (poorPercentage > 20) {\n        recommendations.push('Focus on improving comment quality - over 20% are rated as poor quality.');\n      }\n    }\n\n    // File-specific recommendations\n    const criticalFiles = undocumentedTypes\n      .filter(t => t.severity === 'critical' || t.severity === 'high')\n      .map(t => t.filePath);\n\n    if (criticalFiles.length > 0) {\n      recommendations.push(`Priority files needing documentation: ${[...new Set(criticalFiles)].slice(0, 5).join(', ')}`);\n    }\n\n    // General recommendations\n    recommendations.push('Use domain-specific documentation templates for consistency');\n    recommendations.push('Include ESLint disable comments with explanations');\n    recommendations.push('Regular quality assurance scans to maintain documentation standards');\n\n    return recommendations;\n  }\n}\n"],"version":3}