{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/typescriptCampaignTrigger.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/typescriptCampaignTrigger.ts"],"sourcesContent":["/**\n * TypeScript Campaign Trigger Utilities\n * \n * This module provides comprehensive TypeScript error monitoring and campaign\n * system integration for automated error reduction and code quality improvement.\n */\n\nimport { execSync } from 'child_process';\nimport { logger } from './logger';\n\n// Campaign trigger interfaces\nexport interface CampaignTriggerResult {\n  shouldTrigger: boolean;\n  campaignMode: CampaignMode;\n  errorAnalysis: ErrorAnalysisResult;\n  recommendations: FixRecommendation[];\n  batchSchedule: BatchSchedule;\n  estimatedDuration: number;\n  safetyLevel: SafetyLevel;\n}\n\nexport interface ErrorAnalysisResult {\n  totalErrors: number;\n  errorsByCategory: Record<string, TypeScriptError[]>;\n  errorsByFile: Record<string, TypeScriptError[]>;\n  highImpactFiles: HighImpactFile[];\n  priorityRanking: TypeScriptError[];\n  campaignRecommendations: CampaignRecommendation[];\n}\n\nexport interface TypeScriptError {\n  filePath: string;\n  line: number;\n  column: number;\n  code: string;\n  message: string;\n  category: ErrorCategory;\n  priority: number;\n  severity: ErrorSeverity;\n}\n\nexport interface HighImpactFile {\n  filePath: string;\n  errorCount: number;\n  categories: ErrorCategory[];\n  averagePriority: number;\n}\n\nexport interface FixRecommendation {\n  category: ErrorCategory;\n  errorCount: number;\n  fixStrategy: string;\n  estimatedEffort: number; // minutes\n  batchSize: number;\n  priority: number;\n  successRate: number;\n}\n\nexport interface CampaignRecommendation {\n  mode: CampaignMode;\n  phases: string[];\n  estimatedDuration: number;\n  safetyLevel: SafetyLevel;\n  description: string;\n}\n\nexport interface BatchSchedule {\n  batches: ProcessingBatch[];\n  totalEstimatedTime: number;\n  safetyProtocols: SafetyProtocol[];\n}\n\nexport interface ProcessingBatch {\n  id: string;\n  category: ErrorCategory;\n  files: string[];\n  batchSize: number;\n  estimatedDuration: number;\n  safetyLevel: SafetyLevel;\n  scheduledTime: Date;\n}\n\nexport interface SafetyProtocol {\n  name: string;\n  description: string;\n  triggers: string[];\n  actions: string[];\n}\n\nexport enum CampaignMode {\n  EMERGENCY = 'EMERGENCY',\n  AGGRESSIVE = 'AGGRESSIVE',\n  STANDARD = 'STANDARD',\n  MONITORING = 'MONITORING'\n}\n\nexport enum ErrorCategory {\n  TS2352 = 'TS2352', // Type conversion errors\n  TS2304 = 'TS2304', // Cannot find name errors\n  TS2345 = 'TS2345', // Argument type mismatch\n  TS2698 = 'TS2698', // Spread syntax errors\n  TS2362 = 'TS2362', // Arithmetic operation errors\n  OTHER = 'OTHER'\n}\n\nexport enum ErrorSeverity {\n  HIGH = 'HIGH',\n  MEDIUM = 'MEDIUM',\n  LOW = 'LOW'\n}\n\nexport enum SafetyLevel {\n  MAXIMUM = 'MAXIMUM',\n  HIGH = 'HIGH',\n  MEDIUM = 'MEDIUM'\n}\n\n// Configuration constants\nconst ERROR_THRESHOLDS = {\n  CRITICAL: 500,    // Emergency campaign mode\n  HIGH: 200,        // Aggressive campaign mode\n  MEDIUM: 100,      // Standard campaign mode\n  MONITORING: 50    // Proactive monitoring only\n};\n\nconst CATEGORY_SUCCESS_RATES = {\n  [ErrorCategory.TS2352]: 0.92,\n  [ErrorCategory.TS2304]: 0.95,\n  [ErrorCategory.TS2345]: 0.88,\n  [ErrorCategory.TS2698]: 0.85,\n  [ErrorCategory.TS2362]: 0.90,\n  [ErrorCategory.OTHER]: 0.70\n};\n\nconst CATEGORY_PRIORITY_WEIGHTS = {\n  [ErrorCategory.TS2352]: 0.95,\n  [ErrorCategory.TS2304]: 0.95,\n  [ErrorCategory.TS2345]: 0.88,\n  [ErrorCategory.TS2698]: 0.85,\n  [ErrorCategory.TS2362]: 0.90,\n  [ErrorCategory.OTHER]: 0.70\n};\n\n/**\n * Main function to analyze TypeScript errors and determine campaign trigger\n */\nexport async function analyzeTypeScriptErrors(): Promise<CampaignTriggerResult> {\n  const startTime = Date.now();\n  \n  try {\n    logger.info('Starting TypeScript error analysis for campaign trigger evaluation');\n    \n    // 1. Get current TypeScript error count and details\n    const errorAnalysis = await getTypeScriptErrorAnalysis();\n    \n    // 2. Determine if campaign should be triggered\n    const shouldTrigger = shouldTriggerCampaign(errorAnalysis.totalErrors);\n    \n    // 3. Determine campaign mode based on error count\n    const campaignMode = determineCampaignMode(errorAnalysis.totalErrors);\n    \n    // 4. Generate fix recommendations\n    const recommendations = generateFixRecommendations(errorAnalysis);\n    \n    // 5. Create batch processing schedule\n    const batchSchedule = createBatchSchedule(recommendations, campaignMode);\n    \n    // 6. Calculate estimated duration\n    const estimatedDuration = calculateTotalEstimatedDuration(batchSchedule);\n    \n    // 7. Determine safety level\n    const safetyLevel = determineSafetyLevel(campaignMode);\n    \n    const duration = Date.now() - startTime;\n    logger.info(`TypeScript error analysis completed in ${duration}ms: ${errorAnalysis.totalErrors} errors found`);\n    \n    return {\n      shouldTrigger,\n      campaignMode,\n      errorAnalysis,\n      recommendations,\n      batchSchedule,\n      estimatedDuration,\n      safetyLevel\n    };\n    \n  } catch (error) {\n    logger.error('TypeScript error analysis failed:', error);\n    \n    // Return safe defaults\n    return {\n      shouldTrigger: false,\n      campaignMode: CampaignMode.MONITORING,\n      errorAnalysis: {\n        totalErrors: -1,\n        errorsByCategory: {},\n        errorsByFile: {},\n        highImpactFiles: [],\n        priorityRanking: [],\n        campaignRecommendations: []\n      },\n      recommendations: [],\n      batchSchedule: { batches: [], totalEstimatedTime: 0, safetyProtocols: [] },\n      estimatedDuration: 0,\n      safetyLevel: SafetyLevel.MAXIMUM\n    };\n  }\n}\n\n/**\n * Get comprehensive TypeScript error analysis\n */\nasync function getTypeScriptErrorAnalysis(): Promise<ErrorAnalysisResult> {\n  try {\n    // Get TypeScript errors using tsc command\n    const errorOutput = await getTypeScriptErrors();\n    \n    // Parse errors into structured format\n    const errors = parseTypeScriptErrors(errorOutput);\n    \n    // Categorize errors\n    const errorsByCategory = categorizeErrors(errors);\n    \n    // Group errors by file\n    const errorsByFile = groupErrorsByFile(errors);\n    \n    // Identify high-impact files\n    const highImpactFiles = identifyHighImpactFiles(errorsByFile);\n    \n    // Create priority ranking\n    const priorityRanking = createPriorityRanking(errors);\n    \n    // Generate campaign recommendations\n    const campaignRecommendations = generateCampaignRecommendations(errors.length, errorsByCategory);\n    \n    return {\n      totalErrors: errors.length,\n      errorsByCategory,\n      errorsByFile,\n      highImpactFiles,\n      priorityRanking,\n      campaignRecommendations\n    };\n    \n  } catch (error) {\n    logger.error('Error getting TypeScript error analysis:', error);\n    throw error;\n  }\n}\n\n/**\n * Get TypeScript errors from compilation\n */\nasync function getTypeScriptErrors(): Promise<string> {\n  try {\n    // Run TypeScript compiler to get errors\n    const output = execSync('yarn tsc --noEmit --skipLibCheck 2>&1', {\n      encoding: 'utf8',\n      stdio: 'pipe'\n    });\n    \n    return output;\n    \n  } catch (error: any) {\n    // tsc returns non-zero exit code when there are errors, which is expected\n    if (error.stdout) {\n      return error.stdout;\n    }\n    \n    // If there's no stdout, this might be a real failure\n    if (error.stderr || error.message) {\n      throw new Error(`TypeScript compilation failed: ${error.stderr || error.message}`);\n    }\n    \n    // If there's no stdout or stderr, assume no errors\n    return '';\n  }\n}\n\n/**\n * Parse TypeScript error output into structured format\n */\nfunction parseTypeScriptErrors(errorOutput: string): TypeScriptError[] {\n  const errors: TypeScriptError[] = [];\n  \n  if (!errorOutput.trim()) {\n    return errors;\n  }\n  \n  const lines = errorOutput.split('\\n');\n  \n  for (const line of lines) {\n    // Match TypeScript error format: file(line,col): error TSxxxx: message\n    const match = line.match(/^(.+?)\\((\\d+),(\\d+)\\):\\s*error\\s+(TS\\d+):\\s*(.+)$/);\n    \n    if (match) {\n      const [, filePath, lineStr, colStr, code, message] = match;\n      const lineNum = parseInt(lineStr, 10);\n      const colNum = parseInt(colStr, 10);\n      \n      const category = categorizeErrorCode(code);\n      const severity = determineSeverity(category);\n      const priority = calculatePriority(category, severity);\n      \n      errors.push({\n        filePath: filePath.trim(),\n        line: lineNum,\n        column: colNum,\n        code,\n        message: message.trim(),\n        category,\n        priority,\n        severity\n      });\n    }\n  }\n  \n  return errors;\n}\n\n/**\n * Categorize error by TypeScript error code\n */\nfunction categorizeErrorCode(code: string): ErrorCategory {\n  switch (code) {\n    case 'TS2352':\n      return ErrorCategory.TS2352;\n    case 'TS2304':\n      return ErrorCategory.TS2304;\n    case 'TS2345':\n      return ErrorCategory.TS2345;\n    case 'TS2698':\n      return ErrorCategory.TS2698;\n    case 'TS2362':\n      return ErrorCategory.TS2362;\n    default:\n      return ErrorCategory.OTHER;\n  }\n}\n\n/**\n * Determine error severity based on category\n */\nfunction determineSeverity(category: ErrorCategory): ErrorSeverity {\n  switch (category) {\n    case ErrorCategory.TS2352:\n    case ErrorCategory.TS2304:\n      return ErrorSeverity.HIGH;\n    case ErrorCategory.TS2345:\n    case ErrorCategory.TS2698:\n    case ErrorCategory.TS2362:\n      return ErrorSeverity.MEDIUM;\n    default:\n      return ErrorSeverity.LOW;\n  }\n}\n\n/**\n * Calculate priority score for error\n */\nfunction calculatePriority(category: ErrorCategory, severity: ErrorSeverity): number {\n  const categoryWeight = CATEGORY_PRIORITY_WEIGHTS[category] || 0.5;\n  const severityWeight = severity === ErrorSeverity.HIGH ? 1.0 : \n                        severity === ErrorSeverity.MEDIUM ? 0.7 : 0.4;\n  \n  return categoryWeight * severityWeight;\n}\n\n/**\n * Categorize errors by type\n */\nfunction categorizeErrors(errors: TypeScriptError[]): Record<string, TypeScriptError[]> {\n  const categorized: Record<string, TypeScriptError[]> = {};\n  \n  for (const error of errors) {\n    const category = error.category;\n    if (!categorized[category]) {\n      categorized[category] = [];\n    }\n    categorized[category].push(error);\n  }\n  \n  return categorized;\n}\n\n/**\n * Group errors by file path\n */\nfunction groupErrorsByFile(errors: TypeScriptError[]): Record<string, TypeScriptError[]> {\n  const grouped: Record<string, TypeScriptError[]> = {};\n  \n  for (const error of errors) {\n    const filePath = error.filePath;\n    if (!grouped[filePath]) {\n      grouped[filePath] = [];\n    }\n    grouped[filePath].push(error);\n  }\n  \n  return grouped;\n}\n\n/**\n * Identify high-impact files with many errors\n */\nfunction identifyHighImpactFiles(errorsByFile: Record<string, TypeScriptError[]>): HighImpactFile[] {\n  const highImpactFiles: HighImpactFile[] = [];\n  \n  for (const [filePath, errors] of Object.entries(errorsByFile)) {\n    if (errors.length >= 5) { // Files with 5+ errors are high impact\n      const categories = [...new Set(errors.map(e => e.category))];\n      const averagePriority = errors.reduce((sum, e) => sum + e.priority, 0) / errors.length;\n      \n      highImpactFiles.push({\n        filePath,\n        errorCount: errors.length,\n        categories,\n        averagePriority\n      });\n    }\n  }\n  \n  // Sort by error count descending\n  return highImpactFiles.sort((a, b) => b.errorCount - a.errorCount);\n}\n\n/**\n * Create priority ranking of errors\n */\nfunction createPriorityRanking(errors: TypeScriptError[]): TypeScriptError[] {\n  return [...errors].sort((a, b) => b.priority - a.priority);\n}\n\n/**\n * Generate campaign recommendations based on error analysis\n */\nfunction generateCampaignRecommendations(\n  totalErrors: number, \n  errorsByCategory: Record<string, TypeScriptError[]>\n): CampaignRecommendation[] {\n  const recommendations: CampaignRecommendation[] = [];\n  \n  if (totalErrors >= ERROR_THRESHOLDS.CRITICAL) {\n    recommendations.push({\n      mode: CampaignMode.EMERGENCY,\n      phases: ['typescript-error-elimination', 'build-stabilization', 'safety-validation'],\n      estimatedDuration: Math.ceil(totalErrors * 0.5), // 30 seconds per error\n      safetyLevel: SafetyLevel.MAXIMUM,\n      description: `Emergency campaign for ${totalErrors} critical errors`\n    });\n  } else if (totalErrors >= ERROR_THRESHOLDS.HIGH) {\n    recommendations.push({\n      mode: CampaignMode.AGGRESSIVE,\n      phases: ['typescript-error-elimination', 'targeted-fixes'],\n      estimatedDuration: Math.ceil(totalErrors * 0.3), // 18 seconds per error\n      safetyLevel: SafetyLevel.HIGH,\n      description: `Aggressive campaign for ${totalErrors} high-priority errors`\n    });\n  } else if (totalErrors >= ERROR_THRESHOLDS.MEDIUM) {\n    recommendations.push({\n      mode: CampaignMode.STANDARD,\n      phases: ['targeted-error-reduction'],\n      estimatedDuration: Math.ceil(totalErrors * 0.2), // 12 seconds per error\n      safetyLevel: SafetyLevel.MEDIUM,\n      description: `Standard campaign for ${totalErrors} errors`\n    });\n  }\n  \n  return recommendations;\n}\n\n/**\n * Determine if campaign should be triggered\n */\nfunction shouldTriggerCampaign(errorCount: number): boolean {\n  return errorCount >= ERROR_THRESHOLDS.MEDIUM;\n}\n\n/**\n * Determine campaign mode based on error count\n */\nfunction determineCampaignMode(errorCount: number): CampaignMode {\n  if (errorCount >= ERROR_THRESHOLDS.CRITICAL) {\n    return CampaignMode.EMERGENCY;\n  } else if (errorCount >= ERROR_THRESHOLDS.HIGH) {\n    return CampaignMode.AGGRESSIVE;\n  } else if (errorCount >= ERROR_THRESHOLDS.MEDIUM) {\n    return CampaignMode.STANDARD;\n  } else {\n    return CampaignMode.MONITORING;\n  }\n}\n\n/**\n * Generate fix recommendations for each error category\n */\nfunction generateFixRecommendations(analysis: ErrorAnalysisResult): FixRecommendation[] {\n  const recommendations: FixRecommendation[] = [];\n  \n  for (const [category, errors] of Object.entries(analysis.errorsByCategory)) {\n    if (errors.length > 0) {\n      const errorCategory = category as ErrorCategory;\n      const successRate = CATEGORY_SUCCESS_RATES[errorCategory] || 0.7;\n      const estimatedEffort = calculateEstimatedEffort(errors);\n      const batchSize = determineBatchSize(errors.length, errorCategory);\n      const priority = calculateCategoryPriority(errorCategory, errors.length);\n      \n      recommendations.push({\n        category: errorCategory,\n        errorCount: errors.length,\n        fixStrategy: getFixStrategy(errorCategory),\n        estimatedEffort,\n        batchSize,\n        priority,\n        successRate\n      });\n    }\n  }\n  \n  return recommendations.sort((a, b) => b.priority - a.priority);\n}\n\n/**\n * Calculate estimated effort for fixing errors\n */\nfunction calculateEstimatedEffort(errors: TypeScriptError[]): number {\n  // Base time per error in minutes\n  const baseTimePerError = 0.5; // 30 seconds\n  \n  // Adjust based on complexity\n  let totalTime = 0;\n  for (const error of errors) {\n    let multiplier = 1.0;\n    \n    switch (error.category) {\n      case ErrorCategory.TS2352:\n      case ErrorCategory.TS2304:\n        multiplier = 0.8; // Easier to fix\n        break;\n      case ErrorCategory.TS2345:\n      case ErrorCategory.TS2698:\n        multiplier = 1.2; // Moderate complexity\n        break;\n      case ErrorCategory.TS2362:\n        multiplier = 1.0; // Standard complexity\n        break;\n      default:\n        multiplier = 1.5; // More complex\n        break;\n    }\n    \n    totalTime += baseTimePerError * multiplier;\n  }\n  \n  return Math.ceil(totalTime);\n}\n\n/**\n * Determine optimal batch size for error category\n */\nfunction determineBatchSize(errorCount: number, category: ErrorCategory): number {\n  // Base batch sizes by category\n  const baseBatchSizes = {\n    [ErrorCategory.TS2352]: 25,\n    [ErrorCategory.TS2304]: 20,\n    [ErrorCategory.TS2345]: 15,\n    [ErrorCategory.TS2698]: 15,\n    [ErrorCategory.TS2362]: 20,\n    [ErrorCategory.OTHER]: 10\n  };\n  \n  const baseBatchSize = baseBatchSizes[category] || 10;\n  \n  // Adjust based on total error count\n  if (errorCount < 10) {\n    return Math.min(baseBatchSize, errorCount);\n  } else if (errorCount > 100) {\n    return Math.max(5, Math.floor(baseBatchSize * 0.5)); // Smaller batches for large counts\n  }\n  \n  return baseBatchSize;\n}\n\n/**\n * Calculate priority for error category\n */\nfunction calculateCategoryPriority(category: ErrorCategory, errorCount: number): number {\n  const categoryWeight = CATEGORY_PRIORITY_WEIGHTS[category] || 0.5;\n  const countWeight = Math.min(1.0, errorCount / 50); // Normalize count impact\n  \n  return categoryWeight * 0.7 + countWeight * 0.3;\n}\n\n/**\n * Get fix strategy description for error category\n */\nfunction getFixStrategy(category: ErrorCategory): string {\n  const strategies = {\n    [ErrorCategory.TS2352]: 'Enhanced Error Fixer patterns for type conversion',\n    [ErrorCategory.TS2304]: 'Import resolution and declaration fixes',\n    [ErrorCategory.TS2345]: 'Parameter type alignment and interface updates',\n    [ErrorCategory.TS2698]: 'Object and array spread syntax corrections',\n    [ErrorCategory.TS2362]: 'Type assertion and arithmetic operation fixes',\n    [ErrorCategory.OTHER]: 'Manual review and custom solution development'\n  };\n  \n  return strategies[category] || 'Custom fix strategy required';\n}\n\n/**\n * Create batch processing schedule\n */\nfunction createBatchSchedule(recommendations: FixRecommendation[], mode: CampaignMode): BatchSchedule {\n  const batches: ProcessingBatch[] = [];\n  const safetyProtocols: SafetyProtocol[] = [];\n  let totalEstimatedTime = 0;\n  let currentTime = new Date();\n  \n  // Add safety protocols based on campaign mode\n  safetyProtocols.push(...getSafetyProtocols(mode));\n  \n  for (const recommendation of recommendations) {\n    const batch: ProcessingBatch = {\n      id: generateBatchId(),\n      category: recommendation.category,\n      files: [], // Would be populated with actual file paths\n      batchSize: recommendation.batchSize,\n      estimatedDuration: recommendation.estimatedEffort,\n      safetyLevel: determineSafetyLevel(mode),\n      scheduledTime: new Date(currentTime)\n    };\n    \n    batches.push(batch);\n    totalEstimatedTime += batch.estimatedDuration;\n    \n    // Schedule next batch with buffer time\n    currentTime = new Date(currentTime.getTime() + (batch.estimatedDuration * 60 * 1000) + (2 * 60 * 1000)); // Add 2 minute buffer\n  }\n  \n  return {\n    batches,\n    totalEstimatedTime,\n    safetyProtocols\n  };\n}\n\n/**\n * Get safety protocols for campaign mode\n */\nfunction getSafetyProtocols(mode: CampaignMode): SafetyProtocol[] {\n  const protocols: SafetyProtocol[] = [];\n  \n  switch (mode) {\n    case CampaignMode.EMERGENCY:\n      protocols.push({\n        name: 'Emergency Safety Protocol',\n        description: 'Maximum safety with validation after every file',\n        triggers: ['BUILD_FAILURE', 'ERROR_INCREASE', 'CORRUPTION_DETECTED'],\n        actions: ['IMMEDIATE_ROLLBACK', 'ALERT_TEAM', 'PAUSE_CAMPAIGN']\n      });\n      break;\n      \n    case CampaignMode.AGGRESSIVE:\n      protocols.push({\n        name: 'Aggressive Safety Protocol',\n        description: 'High safety with frequent validation checkpoints',\n        triggers: ['BUILD_FAILURE', 'MAJOR_ERROR_INCREASE'],\n        actions: ['AUTOMATIC_ROLLBACK', 'REDUCE_BATCH_SIZE']\n      });\n      break;\n      \n    case CampaignMode.STANDARD:\n      protocols.push({\n        name: 'Standard Safety Protocol',\n        description: 'Standard safety with build validation',\n        triggers: ['BUILD_FAILURE'],\n        actions: ['ROLLBACK_BATCH', 'NOTIFY_DEVELOPER']\n      });\n      break;\n  }\n  \n  return protocols;\n}\n\n/**\n * Calculate total estimated duration\n */\nfunction calculateTotalEstimatedDuration(schedule: BatchSchedule): number {\n  return schedule.totalEstimatedTime;\n}\n\n/**\n * Determine safety level based on campaign mode\n */\nfunction determineSafetyLevel(mode: CampaignMode): SafetyLevel {\n  switch (mode) {\n    case CampaignMode.EMERGENCY:\n      return SafetyLevel.MAXIMUM;\n    case CampaignMode.AGGRESSIVE:\n      return SafetyLevel.HIGH;\n    default:\n      return SafetyLevel.MEDIUM;\n  }\n}\n\n/**\n * Generate unique batch ID\n */\nfunction generateBatchId(): string {\n  return `batch_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n}\n\n/**\n * Get current TypeScript error count (simple version)\n */\nexport async function getCurrentTypeScriptErrorCount(): Promise<number> {\n  try {\n    const errorOutput = await getTypeScriptErrors();\n    const errors = parseTypeScriptErrors(errorOutput);\n    return errors.length;\n  } catch (error) {\n    logger.error('Failed to get TypeScript error count:', error);\n    return -1;\n  }\n}\n\n/**\n * Check if campaign trigger conditions are met\n */\nexport async function checkCampaignTriggerConditions(): Promise<boolean> {\n  try {\n    const errorCount = await getCurrentTypeScriptErrorCount();\n    return shouldTriggerCampaign(errorCount);\n  } catch (error) {\n    logger.error('Failed to check campaign trigger conditions:', error);\n    return false;\n  }\n}"],"version":3}