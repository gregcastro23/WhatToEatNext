ca5f0173c76b446ff5c62eaac96fe01f
"use strict";
/**
 * TypeScript Campaign Trigger Utilities
 *
 * This module provides comprehensive TypeScript error monitoring and campaign
 * system integration for automated error reduction and code quality improvement.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkCampaignTriggerConditions = exports.getCurrentTypeScriptErrorCount = exports.analyzeTypeScriptErrors = exports.SafetyLevel = exports.ErrorSeverity = exports.ErrorCategory = exports.CampaignMode = void 0;
const child_process_1 = require("child_process");
const logger_1 = require("./logger");
var CampaignMode;
(function (CampaignMode) {
    CampaignMode["EMERGENCY"] = "EMERGENCY";
    CampaignMode["AGGRESSIVE"] = "AGGRESSIVE";
    CampaignMode["STANDARD"] = "STANDARD";
    CampaignMode["MONITORING"] = "MONITORING";
})(CampaignMode || (exports.CampaignMode = CampaignMode = {}));
var ErrorCategory;
(function (ErrorCategory) {
    ErrorCategory["TS2352"] = "TS2352";
    ErrorCategory["TS2304"] = "TS2304";
    ErrorCategory["TS2345"] = "TS2345";
    ErrorCategory["TS2698"] = "TS2698";
    ErrorCategory["TS2362"] = "TS2362";
    ErrorCategory["OTHER"] = "OTHER";
})(ErrorCategory || (exports.ErrorCategory = ErrorCategory = {}));
var ErrorSeverity;
(function (ErrorSeverity) {
    ErrorSeverity["HIGH"] = "HIGH";
    ErrorSeverity["MEDIUM"] = "MEDIUM";
    ErrorSeverity["LOW"] = "LOW";
})(ErrorSeverity || (exports.ErrorSeverity = ErrorSeverity = {}));
var SafetyLevel;
(function (SafetyLevel) {
    SafetyLevel["MAXIMUM"] = "MAXIMUM";
    SafetyLevel["HIGH"] = "HIGH";
    SafetyLevel["MEDIUM"] = "MEDIUM";
})(SafetyLevel || (exports.SafetyLevel = SafetyLevel = {}));
// Configuration constants
const ERROR_THRESHOLDS = {
    CRITICAL: 500,
    HIGH: 200,
    MEDIUM: 100,
    MONITORING: 50 // Proactive monitoring only
};
const CATEGORY_SUCCESS_RATES = {
    [ErrorCategory.TS2352]: 0.92,
    [ErrorCategory.TS2304]: 0.95,
    [ErrorCategory.TS2345]: 0.88,
    [ErrorCategory.TS2698]: 0.85,
    [ErrorCategory.TS2362]: 0.90,
    [ErrorCategory.OTHER]: 0.70
};
const CATEGORY_PRIORITY_WEIGHTS = {
    [ErrorCategory.TS2352]: 0.95,
    [ErrorCategory.TS2304]: 0.95,
    [ErrorCategory.TS2345]: 0.88,
    [ErrorCategory.TS2698]: 0.85,
    [ErrorCategory.TS2362]: 0.90,
    [ErrorCategory.OTHER]: 0.70
};
/**
 * Main function to analyze TypeScript errors and determine campaign trigger
 */
async function analyzeTypeScriptErrors() {
    const startTime = Date.now();
    try {
        logger_1.logger.info('Starting TypeScript error analysis for campaign trigger evaluation');
        // 1. Get current TypeScript error count and details
        const errorAnalysis = await getTypeScriptErrorAnalysis();
        // 2. Determine if campaign should be triggered
        const shouldTrigger = shouldTriggerCampaign(errorAnalysis.totalErrors);
        // 3. Determine campaign mode based on error count
        const campaignMode = determineCampaignMode(errorAnalysis.totalErrors);
        // 4. Generate fix recommendations
        const recommendations = generateFixRecommendations(errorAnalysis);
        // 5. Create batch processing schedule
        const batchSchedule = createBatchSchedule(recommendations, campaignMode);
        // 6. Calculate estimated duration
        const estimatedDuration = calculateTotalEstimatedDuration(batchSchedule);
        // 7. Determine safety level
        const safetyLevel = determineSafetyLevel(campaignMode);
        const duration = Date.now() - startTime;
        logger_1.logger.info(`TypeScript error analysis completed in ${duration}ms: ${errorAnalysis.totalErrors} errors found`);
        return {
            shouldTrigger,
            campaignMode,
            errorAnalysis,
            recommendations,
            batchSchedule,
            estimatedDuration,
            safetyLevel
        };
    }
    catch (error) {
        logger_1.logger.error('TypeScript error analysis failed:', error);
        // Return safe defaults
        return {
            shouldTrigger: false,
            campaignMode: CampaignMode.MONITORING,
            errorAnalysis: {
                totalErrors: -1,
                errorsByCategory: {},
                errorsByFile: {},
                highImpactFiles: [],
                priorityRanking: [],
                campaignRecommendations: []
            },
            recommendations: [],
            batchSchedule: { batches: [], totalEstimatedTime: 0, safetyProtocols: [] },
            estimatedDuration: 0,
            safetyLevel: SafetyLevel.MAXIMUM
        };
    }
}
exports.analyzeTypeScriptErrors = analyzeTypeScriptErrors;
/**
 * Get comprehensive TypeScript error analysis
 */
async function getTypeScriptErrorAnalysis() {
    try {
        // Get TypeScript errors using tsc command
        const errorOutput = await getTypeScriptErrors();
        // Parse errors into structured format
        const errors = parseTypeScriptErrors(errorOutput);
        // Categorize errors
        const errorsByCategory = categorizeErrors(errors);
        // Group errors by file
        const errorsByFile = groupErrorsByFile(errors);
        // Identify high-impact files
        const highImpactFiles = identifyHighImpactFiles(errorsByFile);
        // Create priority ranking
        const priorityRanking = createPriorityRanking(errors);
        // Generate campaign recommendations
        const campaignRecommendations = generateCampaignRecommendations(errors.length, errorsByCategory);
        return {
            totalErrors: errors.length,
            errorsByCategory,
            errorsByFile,
            highImpactFiles,
            priorityRanking,
            campaignRecommendations
        };
    }
    catch (error) {
        logger_1.logger.error('Error getting TypeScript error analysis:', error);
        throw error;
    }
}
/**
 * Get TypeScript errors from compilation
 */
async function getTypeScriptErrors() {
    try {
        // Run TypeScript compiler to get errors
        const output = (0, child_process_1.execSync)('yarn tsc --noEmit --skipLibCheck 2>&1', {
            encoding: 'utf8',
            stdio: 'pipe'
        });
        return output;
    }
    catch (error) {
        // tsc returns non-zero exit code when there are errors, which is expected
        if (error.stdout) {
            return error.stdout;
        }
        // If there's no stdout, this might be a real failure
        if (error.stderr || error.message) {
            throw new Error(`TypeScript compilation failed: ${error.stderr || error.message}`);
        }
        // If there's no stdout or stderr, assume no errors
        return '';
    }
}
/**
 * Parse TypeScript error output into structured format
 */
function parseTypeScriptErrors(errorOutput) {
    const errors = [];
    if (!errorOutput.trim()) {
        return errors;
    }
    const lines = errorOutput.split('\n');
    for (const line of lines) {
        // Match TypeScript error format: file(line,col): error TSxxxx: message
        const match = line.match(/^(.+?)\((\d+),(\d+)\):\s*error\s+(TS\d+):\s*(.+)$/);
        if (match) {
            const [, filePath, lineStr, colStr, code, message] = match;
            const lineNum = parseInt(lineStr, 10);
            const colNum = parseInt(colStr, 10);
            const category = categorizeErrorCode(code);
            const severity = determineSeverity(category);
            const priority = calculatePriority(category, severity);
            errors.push({
                filePath: filePath.trim(),
                line: lineNum,
                column: colNum,
                code,
                message: message.trim(),
                category,
                priority,
                severity
            });
        }
    }
    return errors;
}
/**
 * Categorize error by TypeScript error code
 */
function categorizeErrorCode(code) {
    switch (code) {
        case 'TS2352':
            return ErrorCategory.TS2352;
        case 'TS2304':
            return ErrorCategory.TS2304;
        case 'TS2345':
            return ErrorCategory.TS2345;
        case 'TS2698':
            return ErrorCategory.TS2698;
        case 'TS2362':
            return ErrorCategory.TS2362;
        default:
            return ErrorCategory.OTHER;
    }
}
/**
 * Determine error severity based on category
 */
function determineSeverity(category) {
    switch (category) {
        case ErrorCategory.TS2352:
        case ErrorCategory.TS2304:
            return ErrorSeverity.HIGH;
        case ErrorCategory.TS2345:
        case ErrorCategory.TS2698:
        case ErrorCategory.TS2362:
            return ErrorSeverity.MEDIUM;
        default:
            return ErrorSeverity.LOW;
    }
}
/**
 * Calculate priority score for error
 */
function calculatePriority(category, severity) {
    const categoryWeight = CATEGORY_PRIORITY_WEIGHTS[category] || 0.5;
    const severityWeight = severity === ErrorSeverity.HIGH ? 1.0 :
        severity === ErrorSeverity.MEDIUM ? 0.7 : 0.4;
    return categoryWeight * severityWeight;
}
/**
 * Categorize errors by type
 */
function categorizeErrors(errors) {
    const categorized = {};
    for (const error of errors) {
        const category = error.category;
        if (!categorized[category]) {
            categorized[category] = [];
        }
        categorized[category].push(error);
    }
    return categorized;
}
/**
 * Group errors by file path
 */
function groupErrorsByFile(errors) {
    const grouped = {};
    for (const error of errors) {
        const filePath = error.filePath;
        if (!grouped[filePath]) {
            grouped[filePath] = [];
        }
        grouped[filePath].push(error);
    }
    return grouped;
}
/**
 * Identify high-impact files with many errors
 */
function identifyHighImpactFiles(errorsByFile) {
    const highImpactFiles = [];
    for (const [filePath, errors] of Object.entries(errorsByFile)) {
        if (errors.length >= 5) { // Files with 5+ errors are high impact
            const categories = [...new Set(errors.map(e => e.category))];
            const averagePriority = errors.reduce((sum, e) => sum + e.priority, 0) / errors.length;
            highImpactFiles.push({
                filePath,
                errorCount: errors.length,
                categories,
                averagePriority
            });
        }
    }
    // Sort by error count descending
    return highImpactFiles.sort((a, b) => b.errorCount - a.errorCount);
}
/**
 * Create priority ranking of errors
 */
function createPriorityRanking(errors) {
    return [...errors].sort((a, b) => b.priority - a.priority);
}
/**
 * Generate campaign recommendations based on error analysis
 */
function generateCampaignRecommendations(totalErrors, errorsByCategory) {
    const recommendations = [];
    if (totalErrors >= ERROR_THRESHOLDS.CRITICAL) {
        recommendations.push({
            mode: CampaignMode.EMERGENCY,
            phases: ['typescript-error-elimination', 'build-stabilization', 'safety-validation'],
            estimatedDuration: Math.ceil(totalErrors * 0.5),
            safetyLevel: SafetyLevel.MAXIMUM,
            description: `Emergency campaign for ${totalErrors} critical errors`
        });
    }
    else if (totalErrors >= ERROR_THRESHOLDS.HIGH) {
        recommendations.push({
            mode: CampaignMode.AGGRESSIVE,
            phases: ['typescript-error-elimination', 'targeted-fixes'],
            estimatedDuration: Math.ceil(totalErrors * 0.3),
            safetyLevel: SafetyLevel.HIGH,
            description: `Aggressive campaign for ${totalErrors} high-priority errors`
        });
    }
    else if (totalErrors >= ERROR_THRESHOLDS.MEDIUM) {
        recommendations.push({
            mode: CampaignMode.STANDARD,
            phases: ['targeted-error-reduction'],
            estimatedDuration: Math.ceil(totalErrors * 0.2),
            safetyLevel: SafetyLevel.MEDIUM,
            description: `Standard campaign for ${totalErrors} errors`
        });
    }
    return recommendations;
}
/**
 * Determine if campaign should be triggered
 */
function shouldTriggerCampaign(errorCount) {
    return errorCount >= ERROR_THRESHOLDS.MEDIUM;
}
/**
 * Determine campaign mode based on error count
 */
function determineCampaignMode(errorCount) {
    if (errorCount >= ERROR_THRESHOLDS.CRITICAL) {
        return CampaignMode.EMERGENCY;
    }
    else if (errorCount >= ERROR_THRESHOLDS.HIGH) {
        return CampaignMode.AGGRESSIVE;
    }
    else if (errorCount >= ERROR_THRESHOLDS.MEDIUM) {
        return CampaignMode.STANDARD;
    }
    else {
        return CampaignMode.MONITORING;
    }
}
/**
 * Generate fix recommendations for each error category
 */
function generateFixRecommendations(analysis) {
    const recommendations = [];
    for (const [category, errors] of Object.entries(analysis.errorsByCategory)) {
        if (errors.length > 0) {
            const errorCategory = category;
            const successRate = CATEGORY_SUCCESS_RATES[errorCategory] || 0.7;
            const estimatedEffort = calculateEstimatedEffort(errors);
            const batchSize = determineBatchSize(errors.length, errorCategory);
            const priority = calculateCategoryPriority(errorCategory, errors.length);
            recommendations.push({
                category: errorCategory,
                errorCount: errors.length,
                fixStrategy: getFixStrategy(errorCategory),
                estimatedEffort,
                batchSize,
                priority,
                successRate
            });
        }
    }
    return recommendations.sort((a, b) => b.priority - a.priority);
}
/**
 * Calculate estimated effort for fixing errors
 */
function calculateEstimatedEffort(errors) {
    // Base time per error in minutes
    const baseTimePerError = 0.5; // 30 seconds
    // Adjust based on complexity
    let totalTime = 0;
    for (const error of errors) {
        let multiplier = 1.0;
        switch (error.category) {
            case ErrorCategory.TS2352:
            case ErrorCategory.TS2304:
                multiplier = 0.8; // Easier to fix
                break;
            case ErrorCategory.TS2345:
            case ErrorCategory.TS2698:
                multiplier = 1.2; // Moderate complexity
                break;
            case ErrorCategory.TS2362:
                multiplier = 1.0; // Standard complexity
                break;
            default:
                multiplier = 1.5; // More complex
                break;
        }
        totalTime += baseTimePerError * multiplier;
    }
    return Math.ceil(totalTime);
}
/**
 * Determine optimal batch size for error category
 */
function determineBatchSize(errorCount, category) {
    // Base batch sizes by category
    const baseBatchSizes = {
        [ErrorCategory.TS2352]: 25,
        [ErrorCategory.TS2304]: 20,
        [ErrorCategory.TS2345]: 15,
        [ErrorCategory.TS2698]: 15,
        [ErrorCategory.TS2362]: 20,
        [ErrorCategory.OTHER]: 10
    };
    const baseBatchSize = baseBatchSizes[category] || 10;
    // Adjust based on total error count
    if (errorCount < 10) {
        return Math.min(baseBatchSize, errorCount);
    }
    else if (errorCount > 100) {
        return Math.max(5, Math.floor(baseBatchSize * 0.5)); // Smaller batches for large counts
    }
    return baseBatchSize;
}
/**
 * Calculate priority for error category
 */
function calculateCategoryPriority(category, errorCount) {
    const categoryWeight = CATEGORY_PRIORITY_WEIGHTS[category] || 0.5;
    const countWeight = Math.min(1.0, errorCount / 50); // Normalize count impact
    return categoryWeight * 0.7 + countWeight * 0.3;
}
/**
 * Get fix strategy description for error category
 */
function getFixStrategy(category) {
    const strategies = {
        [ErrorCategory.TS2352]: 'Enhanced Error Fixer patterns for type conversion',
        [ErrorCategory.TS2304]: 'Import resolution and declaration fixes',
        [ErrorCategory.TS2345]: 'Parameter type alignment and interface updates',
        [ErrorCategory.TS2698]: 'Object and array spread syntax corrections',
        [ErrorCategory.TS2362]: 'Type assertion and arithmetic operation fixes',
        [ErrorCategory.OTHER]: 'Manual review and custom solution development'
    };
    return strategies[category] || 'Custom fix strategy required';
}
/**
 * Create batch processing schedule
 */
function createBatchSchedule(recommendations, mode) {
    const batches = [];
    const safetyProtocols = [];
    let totalEstimatedTime = 0;
    let currentTime = new Date();
    // Add safety protocols based on campaign mode
    safetyProtocols.push(...getSafetyProtocols(mode));
    for (const recommendation of recommendations) {
        const batch = {
            id: generateBatchId(),
            category: recommendation.category,
            files: [],
            batchSize: recommendation.batchSize,
            estimatedDuration: recommendation.estimatedEffort,
            safetyLevel: determineSafetyLevel(mode),
            scheduledTime: new Date(currentTime)
        };
        batches.push(batch);
        totalEstimatedTime += batch.estimatedDuration;
        // Schedule next batch with buffer time
        currentTime = new Date(currentTime.getTime() + (batch.estimatedDuration * 60 * 1000) + (2 * 60 * 1000)); // Add 2 minute buffer
    }
    return {
        batches,
        totalEstimatedTime,
        safetyProtocols
    };
}
/**
 * Get safety protocols for campaign mode
 */
function getSafetyProtocols(mode) {
    const protocols = [];
    switch (mode) {
        case CampaignMode.EMERGENCY:
            protocols.push({
                name: 'Emergency Safety Protocol',
                description: 'Maximum safety with validation after every file',
                triggers: ['BUILD_FAILURE', 'ERROR_INCREASE', 'CORRUPTION_DETECTED'],
                actions: ['IMMEDIATE_ROLLBACK', 'ALERT_TEAM', 'PAUSE_CAMPAIGN']
            });
            break;
        case CampaignMode.AGGRESSIVE:
            protocols.push({
                name: 'Aggressive Safety Protocol',
                description: 'High safety with frequent validation checkpoints',
                triggers: ['BUILD_FAILURE', 'MAJOR_ERROR_INCREASE'],
                actions: ['AUTOMATIC_ROLLBACK', 'REDUCE_BATCH_SIZE']
            });
            break;
        case CampaignMode.STANDARD:
            protocols.push({
                name: 'Standard Safety Protocol',
                description: 'Standard safety with build validation',
                triggers: ['BUILD_FAILURE'],
                actions: ['ROLLBACK_BATCH', 'NOTIFY_DEVELOPER']
            });
            break;
    }
    return protocols;
}
/**
 * Calculate total estimated duration
 */
function calculateTotalEstimatedDuration(schedule) {
    return schedule.totalEstimatedTime;
}
/**
 * Determine safety level based on campaign mode
 */
function determineSafetyLevel(mode) {
    switch (mode) {
        case CampaignMode.EMERGENCY:
            return SafetyLevel.MAXIMUM;
        case CampaignMode.AGGRESSIVE:
            return SafetyLevel.HIGH;
        default:
            return SafetyLevel.MEDIUM;
    }
}
/**
 * Generate unique batch ID
 */
function generateBatchId() {
    return `batch_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
}
/**
 * Get current TypeScript error count (simple version)
 */
async function getCurrentTypeScriptErrorCount() {
    try {
        const errorOutput = await getTypeScriptErrors();
        const errors = parseTypeScriptErrors(errorOutput);
        return errors.length;
    }
    catch (error) {
        logger_1.logger.error('Failed to get TypeScript error count:', error);
        return -1;
    }
}
exports.getCurrentTypeScriptErrorCount = getCurrentTypeScriptErrorCount;
/**
 * Check if campaign trigger conditions are met
 */
async function checkCampaignTriggerConditions() {
    try {
        const errorCount = await getCurrentTypeScriptErrorCount();
        return shouldTriggerCampaign(errorCount);
    }
    catch (error) {
        logger_1.logger.error('Failed to check campaign trigger conditions:', error);
        return false;
    }
}
exports.checkCampaignTriggerConditions = checkCampaignTriggerConditions;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,