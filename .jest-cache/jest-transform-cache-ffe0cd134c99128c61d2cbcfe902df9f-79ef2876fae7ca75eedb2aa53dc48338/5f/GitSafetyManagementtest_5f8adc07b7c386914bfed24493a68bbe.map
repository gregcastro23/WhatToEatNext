{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/GitSafetyManagement.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/GitSafetyManagement.test.ts"],"sourcesContent":["/**\n * Git Safety Management Tests\n * Perfect Codebase Campaign - Task 6.1 Implementation Tests\n */\n\nimport { SafetyProtocol } from './SafetyProtocol';\nimport { SafetySettings } from '../../types/campaign';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n// Mock child_process for testing\njest.mock('child_process', () => ({\n  execSync: jest.fn(),\n}));\n\n// Mock fs for testing\njest.mock('fs', () => ({\n  existsSync: jest.fn(),\n  readFileSync: jest.fn(),\n  writeFileSync: jest.fn(),\n  mkdirSync: jest.fn(),\n}));\n\nconst { execSync } = require('child_process');\nconst mockFs = fs as jest.Mocked<typeof fs>;\n\ndescribe('Git Safety Management - Task 6.1', () => {\n  let safetyProtocol: SafetyProtocol;\n  let mockSettings: SafetySettings;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    mockSettings = {\n      maxFilesPerBatch: 15,\n      buildValidationFrequency: 5,\n      testValidationFrequency: 10,\n      corruptionDetectionEnabled: true,\n      automaticRollbackEnabled: true,\n      stashRetentionDays: 7,\n    };\n\n    // Mock git repository existence\n    mockFs.existsSync.mockImplementation((path: string) => {\n      if (path === '.git') return true;\n      if (path.toString().includes('.kiro')) return false; // Don't load existing stash data\n      return false;\n    });\n\n    // Mock git commands\n    execSync.mockImplementation((command: string) => {\n      if (command.includes('git status --porcelain')) return '';\n      if (command.includes('git branch --show-current')) return 'main';\n      if (command.includes('git stash push')) return 'Saved working directory';\n      if (command.includes('git stash list --oneline'))\n        return 'stash@{0}: campaign-test-1-2024-01-15T10-30-00-000Z: Test stash';\n      if (command.includes('git stash list'))\n        return 'stash@{0}: On main: campaign-test-1-2024-01-15T10-30-00-000Z: Test stash';\n      if (command.includes('git stash apply')) return 'Applied stash';\n      if (command.includes('git stash drop')) return 'Dropped stash';\n      return '';\n    });\n\n    safetyProtocol = new SafetyProtocol(mockSettings);\n  });\n\n  describe('Git Stash Creation with Descriptive Naming', () => {\n    test('should create stash with descriptive naming conventions', async () => {\n      const description = 'Before TypeScript error fixes';\n      const phase = 'phase1';\n\n      const stashId = await safetyProtocol.createStash(description, phase);\n\n      expect(stashId).toMatch(\n        /^campaign-phase1-\\d+-\\d{4}-\\d{2}-\\d{2}T\\d{2}-\\d{2}-\\d{2}-\\d{3}Z$/\n      );\n      expect(execSync).toHaveBeenCalledWith(\n        expect.stringMatching(\n          /git stash push -u -m \"campaign-phase1-\\d+-.*: Before TypeScript error fixes\"/\n        ),\n        expect.any(Object)\n      );\n    });\n\n    test('should create checkpoint stash with operation context', async () => {\n      const operation = 'Enhanced Error Fixer v3.0';\n      const phase = 'phase1';\n\n      const stashId = await safetyProtocol.createCheckpointStash(\n        operation,\n        phase\n      );\n\n      expect(stashId).toMatch(/^campaign-phase1-\\d+-/);\n      expect(execSync).toHaveBeenCalledWith(\n        expect.stringMatching(\n          /git stash push -u -m \".*Checkpoint before Enhanced Error Fixer v3.0 in phase1\"/\n        ),\n        expect.any(Object)\n      );\n    });\n\n    test('should validate git state before creating stash', async () => {\n      // Mock git validation failure\n      mockFs.existsSync.mockImplementation((path: string) => {\n        if (path === '.git') return false;\n        return true;\n      });\n\n      await expect(safetyProtocol.createStash('test')).rejects.toThrow(\n        'Git validation failed'\n      );\n    });\n\n    test('should handle stash creation failures gracefully', async () => {\n      execSync.mockImplementation((command: string) => {\n        if (command.includes('git stash push')) {\n          throw new Error('Git stash failed');\n        }\n        return '';\n      });\n\n      await expect(safetyProtocol.createStash('test')).rejects.toThrow(\n        'Failed to create git stash: Git stash failed'\n      );\n    });\n  });\n\n  describe('Automatic Stash Application for Rollback Scenarios', () => {\n    test('should apply specific stash by ID', async () => {\n      // First create a stash\n      const stashId = await safetyProtocol.createStash('test stash');\n\n      // Then apply it\n      await safetyProtocol.applyStash(stashId);\n\n      expect(execSync).toHaveBeenCalledWith(\n        'git stash apply stash@{0}',\n        expect.any(Object)\n      );\n    });\n\n    test('should automatically apply latest stash for rollback', async () => {\n      // Create multiple stashes\n      await safetyProtocol.createStash('first stash');\n      await safetyProtocol.createStash('second stash');\n\n      const appliedStashId = await safetyProtocol.autoApplyLatestStash();\n\n      expect(appliedStashId).toMatch(/^campaign-\\d+-/);\n      expect(execSync).toHaveBeenCalledWith(\n        expect.stringMatching(/git stash apply stash@\\{\\d+\\}/),\n        expect.any(Object)\n      );\n    });\n\n    test('should apply stash by phase for targeted rollbacks', async () => {\n      // Create stashes for different phases\n      await safetyProtocol.createStash('phase1 work', 'phase1');\n      await safetyProtocol.createStash('phase2 work', 'phase2');\n\n      const appliedStashId = await safetyProtocol.applyStashByPhase('phase1');\n\n      expect(appliedStashId).toMatch(/^campaign-phase1-/);\n    });\n\n    test('should handle missing stash gracefully', async () => {\n      await expect(\n        safetyProtocol.applyStash('nonexistent-stash')\n      ).rejects.toThrow('Stash not found');\n    });\n\n    test('should handle no stashes available for auto-apply', async () => {\n      await expect(safetyProtocol.autoApplyLatestStash()).rejects.toThrow(\n        'No stashes available for automatic rollback'\n      );\n    });\n  });\n\n  describe('Stash Cleanup with Configurable Retention Policies', () => {\n    test('should clean up old stashes based on retention policy', async () => {\n      // Mock old stash data\n      const oldDate = new Date();\n      oldDate.setDate(oldDate.getDate() - 10); // 10 days old\n\n      // Mock file existence for this specific test\n      mockFs.existsSync.mockImplementation((path: string) => {\n        if (path === '.git') return true;\n        if (path.toString().includes('campaign-stashes.json')) return true;\n        return false;\n      });\n\n      mockFs.readFileSync.mockReturnValue(\n        JSON.stringify({\n          counter: 2,\n          stashes: {\n            'old-stash-1': {\n              id: 'old-stash-1',\n              description: 'Old stash',\n              timestamp: oldDate.toISOString(),\n              branch: 'main',\n              ref: 'stash@{1}',\n            },\n          },\n        })\n      );\n\n      // Create new safety protocol to load the old stash\n      const newSafetyProtocol = new SafetyProtocol(mockSettings);\n\n      await newSafetyProtocol.cleanupOldStashes();\n\n      expect(execSync).toHaveBeenCalledWith(\n        'git stash drop stash@{1}',\n        expect.any(Object)\n      );\n    });\n\n    test('should get stashes by phase', async () => {\n      await safetyProtocol.createStash('phase1 work', 'phase1');\n      await safetyProtocol.createStash('phase2 work', 'phase2');\n      await safetyProtocol.createStash('more phase1 work', 'phase1');\n\n      const phase1Stashes = await safetyProtocol.getStashesByPhase('phase1');\n\n      expect(phase1Stashes).toHaveLength(2);\n      expect(phase1Stashes.every(stash => stash.id.includes('-phase1-'))).toBe(\n        true\n      );\n    });\n\n    test('should provide stash statistics', async () => {\n      // Create a fresh safety protocol to avoid interference from other tests\n      const freshProtocol = new SafetyProtocol(mockSettings);\n\n      await freshProtocol.createStash('phase1 work', 'phase1');\n      await freshProtocol.createStash('phase2 work', 'phase2');\n      await freshProtocol.createStash('more phase1 work', 'phase1');\n\n      const stats = freshProtocol.getStashStatistics();\n\n      expect(stats.total).toBe(3);\n      expect(stats.byPhase.phase1).toBe(2);\n      expect(stats.byPhase.phase2).toBe(1);\n      expect(stats.oldestStash).toBeInstanceOf(Date);\n      expect(stats.newestStash).toBeInstanceOf(Date);\n    });\n  });\n\n  describe('Stash Tracking Persistence', () => {\n    test('should save stash tracking to persistent storage', async () => {\n      await safetyProtocol.createStash('test stash');\n\n      expect(mockFs.writeFileSync).toHaveBeenCalledWith(\n        expect.stringMatching(/\\.kiro[\\/\\\\]campaign-stashes\\.json$/),\n        expect.stringContaining('\"counter\":')\n      );\n    });\n\n    test('should load stash tracking from persistent storage', async () => {\n      const mockStashData = {\n        counter: 5,\n        stashes: {\n          'test-stash': {\n            id: 'test-stash',\n            description: 'Test stash',\n            timestamp: new Date().toISOString(),\n            branch: 'main',\n            ref: 'stash@{0}',\n          },\n        },\n      };\n\n      // Mock file existence for this specific test\n      mockFs.existsSync.mockImplementation((path: string) => {\n        if (path === '.git') return true;\n        if (path.toString().includes('campaign-stashes.json')) return true;\n        return false;\n      });\n\n      mockFs.readFileSync.mockReturnValue(JSON.stringify(mockStashData));\n\n      const newSafetyProtocol = new SafetyProtocol(mockSettings);\n      const stashes = await newSafetyProtocol.listStashes();\n\n      expect(stashes).toHaveLength(1);\n      expect(stashes[0].id).toBe('test-stash');\n    });\n\n    test('should handle corrupted stash tracking file gracefully', async () => {\n      mockFs.readFileSync.mockImplementation(() => {\n        throw new Error('File corrupted');\n      });\n\n      // Should not throw, just log warning\n      expect(() => new SafetyProtocol(mockSettings)).not.toThrow();\n    });\n  });\n\n  describe('Git State Validation', () => {\n    test('should validate git repository state', async () => {\n      const validation = await safetyProtocol.validateGitState();\n\n      expect(validation.success).toBe(true);\n      expect(validation.errors).toHaveLength(0);\n    });\n\n    test('should detect non-git repository', async () => {\n      mockFs.existsSync.mockImplementation((path: string) => {\n        if (path === '.git') return false;\n        return true;\n      });\n\n      const validation = await safetyProtocol.validateGitState();\n\n      expect(validation.success).toBe(false);\n      expect(validation.errors).toContain('Not a git repository');\n    });\n\n    test('should warn about uncommitted changes when auto-rollback disabled', async () => {\n      execSync.mockImplementation((command: string) => {\n        if (command.includes('git status --porcelain'))\n          return 'M modified-file.ts';\n        return '';\n      });\n\n      const settingsWithoutAutoRollback = {\n        ...mockSettings,\n        automaticRollbackEnabled: false,\n      };\n\n      const protocol = new SafetyProtocol(settingsWithoutAutoRollback);\n      const validation = await protocol.validateGitState();\n\n      expect(validation.success).toBe(true);\n      expect(validation.warnings).toContain(\n        'Uncommitted changes detected - consider creating a stash'\n      );\n    });\n  });\n\n  describe('Safety Event Tracking', () => {\n    test('should track stash creation events', async () => {\n      await safetyProtocol.createStash('test stash');\n\n      const events = safetyProtocol.getSafetyEvents();\n      const stashEvent = events.find(e => e.action === 'STASH_CREATE');\n\n      expect(stashEvent).toBeDefined();\n      expect(stashEvent?.description).toContain('Git stash created');\n    });\n\n    test('should track stash application events', async () => {\n      const stashId = await safetyProtocol.createStash('test stash');\n      await safetyProtocol.applyStash(stashId);\n\n      const events = safetyProtocol.getSafetyEvents();\n      const applyEvent = events.find(e => e.action === 'STASH_APPLY');\n\n      expect(applyEvent).toBeDefined();\n      expect(applyEvent?.description).toContain('Git stash applied');\n    });\n\n    test('should track cleanup events', async () => {\n      // Mock file existence for this specific test\n      mockFs.existsSync.mockImplementation((path: string) => {\n        if (path === '.git') return true;\n        if (path.toString().includes('campaign-stashes.json')) return true;\n        return false;\n      });\n\n      // Mock old stash\n      mockFs.readFileSync.mockReturnValue(\n        JSON.stringify({\n          counter: 1,\n          stashes: {\n            'old-stash': {\n              id: 'old-stash',\n              description: 'Old stash',\n              timestamp: new Date(\n                Date.now() - 10 * 24 * 60 * 60 * 1000\n              ).toISOString(), // 10 days old\n              branch: 'main',\n              ref: 'stash@{0}',\n            },\n          },\n        })\n      );\n\n      const newProtocol = new SafetyProtocol(mockSettings);\n      await newProtocol.cleanupOldStashes();\n\n      const events = newProtocol.getSafetyEvents();\n      const cleanupEvent = events.find(e => e.action === 'STASH_CLEANUP');\n\n      expect(cleanupEvent).toBeDefined();\n    });\n  });\n});\n"],"version":3}