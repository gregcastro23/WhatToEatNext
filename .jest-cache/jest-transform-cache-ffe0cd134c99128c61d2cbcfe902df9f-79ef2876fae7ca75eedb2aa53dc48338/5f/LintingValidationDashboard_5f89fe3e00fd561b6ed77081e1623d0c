c912e039a40eb4ee476b3ebb454e3bc4
"use strict";
/**
 * Comprehensive Linting Validation and Monitoring Dashboard
 *
 * This service provides real-time monitoring, validation, and alerting
 * for the enhanced ESLint configuration with domain-specific tracking.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LintingValidationDashboard = void 0;
const child_process_1 = require("child_process");
const fs_1 = require("fs");
class LintingValidationDashboard {
    metricsHistoryFile = '.kiro/metrics/linting-metrics-history.json';
    alertsFile = '.kiro/metrics/linting-alerts.json';
    configFile = '.kiro/metrics/linting-dashboard-config.json';
    defaultThresholds = [
        {
            metric: 'parserErrors',
            threshold: 0,
            severity: 'critical',
            message: 'Parser errors detected - blocking accurate linting analysis',
        },
        {
            metric: 'explicitAnyErrors',
            threshold: 100,
            severity: 'error',
            message: 'Explicit any errors exceed acceptable threshold',
        },
        {
            metric: 'totalIssues',
            threshold: 2000,
            severity: 'warning',
            message: 'Total linting issues exceed warning threshold',
        },
        {
            metric: 'qualityScore',
            threshold: 80,
            severity: 'warning',
            message: 'Code quality score below target',
        },
        {
            metric: 'performanceMetrics.lintingDuration',
            threshold: 30000,
            severity: 'warning',
            message: 'Linting performance degraded - exceeds 30 seconds',
        },
    ];
    constructor() {
        this.ensureDirectoriesExist();
        this.initializeConfiguration();
    }
    /**
     * Run comprehensive linting validation across entire codebase
     */
    async runComprehensiveValidation() {
        console.log('🔍 Starting comprehensive linting validation...');
        const startTime = Date.now();
        const metrics = await this.collectMetrics();
        const alerts = this.evaluateAlerts(metrics);
        const regressionAnalysis = await this.analyzeRegression(metrics);
        const recommendations = this.generateRecommendations(metrics, alerts);
        const result = {
            passed: alerts.filter(a => a.severity === 'error' || a.severity === 'critical').length === 0,
            metrics,
            alerts,
            recommendations,
            regressionAnalysis,
        };
        // Store metrics and alerts
        await this.storeMetrics(metrics);
        await this.storeAlerts(alerts);
        // Generate dashboard report
        await this.generateDashboardReport(result);
        console.log(`✅ Validation completed in ${Date.now() - startTime}ms`);
        return result;
    }
    /**
     * Collect comprehensive linting metrics
     */
    async collectMetrics() {
        const startTime = Date.now();
        try {
            // Run ESLint with enhanced configuration
            const lintOutput = (0, child_process_1.execSync)('yarn lint --format json --max-warnings 10000', {
                encoding: 'utf8',
                stdio: 'pipe',
                timeout: 60000, // 60 second timeout
            });
            const lintResults = JSON.parse(lintOutput);
            const metrics = this.parseLintResults(lintResults);
            // Add performance metrics
            metrics.performanceMetrics = {
                lintingDuration: Date.now() - startTime,
                cacheHitRate: await this.calculateCacheHitRate(),
                memoryUsage: process.memoryUsage().heapUsed / 1024 / 1024,
                filesProcessed: lintResults.length,
            };
            // Calculate quality score
            metrics.qualityScore = this.calculateQualityScore(metrics);
            return metrics;
        }
        catch (error) {
            console.error('Error collecting linting metrics:', error);
            // Return fallback metrics
            return {
                timestamp: new Date(),
                totalIssues: -1,
                errors: -1,
                warnings: -1,
                parserErrors: -1,
                explicitAnyErrors: -1,
                importOrderIssues: -1,
                unusedVariables: -1,
                reactHooksIssues: -1,
                consoleStatements: -1,
                domainSpecificIssues: {
                    astrologicalCalculations: -1,
                    campaignSystem: -1,
                    testFiles: -1,
                },
                performanceMetrics: {
                    lintingDuration: Date.now() - startTime,
                    cacheHitRate: 0,
                    memoryUsage: process.memoryUsage().heapUsed / 1024 / 1024,
                    filesProcessed: 0,
                },
                qualityScore: 0,
                regressionDetected: false,
            };
        }
    }
    /**
     * Parse ESLint results into structured metrics
     */
    parseLintResults(lintResults) {
        let totalIssues = 0;
        let errors = 0;
        let warnings = 0;
        let parserErrors = 0;
        let explicitAnyErrors = 0;
        let importOrderIssues = 0;
        let unusedVariables = 0;
        let reactHooksIssues = 0;
        let consoleStatements = 0;
        const domainSpecificIssues = {
            astrologicalCalculations: 0,
            campaignSystem: 0,
            testFiles: 0,
        };
        for (const result of lintResults) {
            const filePath = result.filePath;
            for (const message of result.messages) {
                totalIssues++;
                if (message.severity === 2) {
                    errors++;
                }
                else {
                    warnings++;
                }
                // Categorize by rule type
                const ruleId = message.ruleId;
                if (message.fatal || ruleId === 'parseForESLint') {
                    parserErrors++;
                }
                else if (ruleId === '@typescript-eslint/no-explicit-any') {
                    explicitAnyErrors++;
                }
                else if (ruleId === 'import/order') {
                    importOrderIssues++;
                }
                else if (ruleId === '@typescript-eslint/no-unused-vars') {
                    unusedVariables++;
                }
                else if (ruleId?.startsWith('react-hooks/')) {
                    reactHooksIssues++;
                }
                else if (ruleId === 'no-console') {
                    consoleStatements++;
                }
                // Domain-specific categorization
                if (this.isAstrologicalFile(filePath)) {
                    domainSpecificIssues.astrologicalCalculations++;
                }
                else if (this.isCampaignFile(filePath)) {
                    domainSpecificIssues.campaignSystem++;
                }
                else if (this.isTestFile(filePath)) {
                    domainSpecificIssues.testFiles++;
                }
            }
        }
        return {
            timestamp: new Date(),
            totalIssues,
            errors,
            warnings,
            parserErrors,
            explicitAnyErrors,
            importOrderIssues,
            unusedVariables,
            reactHooksIssues,
            consoleStatements,
            domainSpecificIssues,
            performanceMetrics: {
                lintingDuration: 0,
                cacheHitRate: 0,
                memoryUsage: 0,
                filesProcessed: lintResults.length,
            },
            qualityScore: 0,
            regressionDetected: false,
        };
    }
    /**
     * Calculate overall quality score (0-100)
     */
    calculateQualityScore(metrics) {
        if (metrics.totalIssues === -1)
            return 0; // Error state
        // Base score starts at 100
        let score = 100;
        // Deduct points for different issue types
        score -= Math.min(50, metrics.parserErrors * 10); // Parser errors are critical
        score -= Math.min(30, metrics.explicitAnyErrors * 0.1); // Explicit any errors
        score -= Math.min(20, metrics.errors * 0.5); // General errors
        score -= Math.min(15, metrics.warnings * 0.01); // Warnings (less impact)
        // Performance penalty
        if (metrics.performanceMetrics.lintingDuration > 30000) {
            score -= 10; // Performance penalty
        }
        // Bonus for zero critical issues
        if (metrics.parserErrors === 0 && metrics.explicitAnyErrors < 10) {
            score += 5;
        }
        return Math.max(0, Math.min(100, Math.round(score)));
    }
    /**
     * Evaluate alerts based on current metrics
     */
    evaluateAlerts(metrics) {
        const alerts = [];
        const thresholds = this.loadThresholds();
        for (const threshold of thresholds) {
            const currentValue = this.getMetricValue(metrics, threshold.metric);
            if (this.shouldTriggerAlert(currentValue, threshold)) {
                alerts.push({
                    id: `${threshold.metric}-${Date.now()}`,
                    timestamp: new Date(),
                    severity: threshold.severity,
                    metric: threshold.metric,
                    currentValue,
                    threshold: threshold.threshold,
                    message: threshold.message,
                    resolved: false,
                });
            }
        }
        return alerts;
    }
    /**
     * Analyze regression compared to historical data
     */
    async analyzeRegression(currentMetrics) {
        const history = this.loadMetricsHistory();
        if (history.length < 2) {
            return {
                detected: false,
                affectedMetrics: [],
                severity: 'minor',
                recommendations: ['Insufficient historical data for regression analysis'],
                historicalComparison: {
                    current: currentMetrics.totalIssues,
                    previous: 0,
                    change: 0,
                    changePercentage: 0,
                },
            };
        }
        const previousMetrics = history[history.length - 2];
        const affectedMetrics = [];
        // Check for regressions in key metrics
        const keyMetrics = [
            'totalIssues',
            'errors',
            'parserErrors',
            'explicitAnyErrors',
            'qualityScore',
        ];
        for (const metric of keyMetrics) {
            const current = this.getMetricValue(currentMetrics, metric);
            const previous = this.getMetricValue(previousMetrics, metric);
            // Detect regression (increase in issues or decrease in quality score)
            const isRegression = metric === 'qualityScore'
                ? current < previous - 5 // Quality score decreased by more than 5 points
                : current > previous * 1.1; // Other metrics increased by more than 10%
            if (isRegression) {
                affectedMetrics.push(metric);
            }
        }
        const severity = this.calculateRegressionSeverity(affectedMetrics, currentMetrics, previousMetrics);
        return {
            detected: affectedMetrics.length > 0,
            affectedMetrics,
            severity,
            recommendations: this.generateRegressionRecommendations(affectedMetrics),
            historicalComparison: {
                current: currentMetrics.totalIssues,
                previous: previousMetrics.totalIssues,
                change: currentMetrics.totalIssues - previousMetrics.totalIssues,
                changePercentage: previousMetrics.totalIssues > 0
                    ? ((currentMetrics.totalIssues - previousMetrics.totalIssues) /
                        previousMetrics.totalIssues) *
                        100
                    : 0,
            },
        };
    }
    /**
     * Generate recommendations based on metrics and alerts
     */
    generateRecommendations(metrics, alerts) {
        const recommendations = [];
        // Parser error recommendations
        if (metrics.parserErrors > 0) {
            recommendations.push('🚨 URGENT: Fix parser errors immediately - they block accurate linting analysis', 'Check src/utils/recommendationEngine.ts and other files with syntax errors', 'Run `yarn tsc --noEmit` to identify TypeScript compilation issues');
        }
        // Explicit any recommendations
        if (metrics.explicitAnyErrors > 100) {
            recommendations.push('⚡ HIGH PRIORITY: Reduce explicit any types using systematic type inference', 'Focus on React components, service layers, and utility functions first', 'Use domain-specific exceptions for astrological calculations where needed');
        }
        // Import organization recommendations
        if (metrics.importOrderIssues > 50) {
            recommendations.push('🚀 READY: Deploy enhanced import organization with alphabetical sorting', 'Run `yarn lint:fix` to automatically organize imports', 'Use batch processing for systematic completion of remaining issues');
        }
        // Performance recommendations
        if (metrics.performanceMetrics.lintingDuration > 30000) {
            recommendations.push('⚡ PERFORMANCE: Linting duration exceeds 30 seconds', 'Enable ESLint caching with `yarn lint:fast` for incremental changes', 'Consider using `yarn lint:changed` for git-aware changed-files-only processing');
        }
        // Quality score recommendations
        if (metrics.qualityScore < 80) {
            recommendations.push('📊 QUALITY: Code quality score below target (80%)', 'Focus on eliminating critical errors first, then warnings', 'Use domain-specific linting commands for targeted improvements');
        }
        // Domain-specific recommendations
        if (metrics.domainSpecificIssues.astrologicalCalculations > 20) {
            recommendations.push('🌟 DOMAIN: Review astrological calculation files for rule compliance', 'Ensure mathematical constants and planetary variables are preserved', 'Use `yarn lint:domain-astro` for specialized astrological file linting');
        }
        return recommendations;
    }
    /**
     * Generate comprehensive dashboard report
     */
    async generateDashboardReport(result) {
        const reportPath = '.kiro/metrics/linting-dashboard-report.md';
        const report = `# Linting Excellence Dashboard Report

Generated: ${new Date().toISOString()}

## 📊 Overall Status

- **Validation Status**: ${result.passed ? '✅ PASSED' : '❌ FAILED'}
- **Quality Score**: ${result.metrics.qualityScore}/100
- **Total Issues**: ${result.metrics.totalIssues}
- **Regression Detected**: ${result.regressionAnalysis.detected ? '⚠️ YES' : '✅ NO'}

## 🔍 Detailed Metrics

### Error Breakdown
- **Parser Errors**: ${result.metrics.parserErrors} ${result.metrics.parserErrors === 0 ? '✅' : '🚨'}
- **TypeScript Errors**: ${result.metrics.errors}
- **Explicit Any Errors**: ${result.metrics.explicitAnyErrors} ${result.metrics.explicitAnyErrors < 100 ? '✅' : '⚡'}
- **Warnings**: ${result.metrics.warnings}

### Code Quality Issues
- **Import Order Issues**: ${result.metrics.importOrderIssues}
- **Unused Variables**: ${result.metrics.unusedVariables}
- **React Hooks Issues**: ${result.metrics.reactHooksIssues}
- **Console Statements**: ${result.metrics.consoleStatements}

### Domain-Specific Issues
- **Astrological Calculations**: ${result.metrics.domainSpecificIssues.astrologicalCalculations}
- **Campaign System**: ${result.metrics.domainSpecificIssues.campaignSystem}
- **Test Files**: ${result.metrics.domainSpecificIssues.testFiles}

### Performance Metrics
- **Linting Duration**: ${result.metrics.performanceMetrics.lintingDuration}ms
- **Cache Hit Rate**: ${(result.metrics.performanceMetrics.cacheHitRate * 100).toFixed(1)}%
- **Memory Usage**: ${result.metrics.performanceMetrics.memoryUsage.toFixed(1)}MB
- **Files Processed**: ${result.metrics.performanceMetrics.filesProcessed}

## 🚨 Active Alerts

${result.alerts.length === 0
            ? 'No active alerts ✅'
            : result.alerts
                .map(alert => `- **${alert.severity.toUpperCase()}**: ${alert.message} (${alert.currentValue} > ${alert.threshold})`)
                .join('\n')}

## 📈 Regression Analysis

${result.regressionAnalysis.detected
            ? `
**Regression Detected**: ${result.regressionAnalysis.severity.toUpperCase()}
- **Affected Metrics**: ${result.regressionAnalysis.affectedMetrics.join(', ')}
- **Change**: ${result.regressionAnalysis.historicalComparison.change} issues (${result.regressionAnalysis.historicalComparison.changePercentage.toFixed(1)}%)
`
            : '**No Regression Detected** ✅'}

## 💡 Recommendations

${result.recommendations.map(rec => `- ${rec}`).join('\n')}

## 🎯 Next Actions

### Immediate (Next 30 Minutes)
1. ${result.metrics.parserErrors > 0 ? '🚨 **URGENT**: Fix parser errors in recommendationEngine.ts' : '✅ No parser errors'}
2. ${result.metrics.explicitAnyErrors > 100 ? '⚡ **Deploy Explicit Any Campaign**: Address error-level explicit any types' : '✅ Explicit any errors under control'}
3. ${result.metrics.importOrderIssues > 50 ? '🚀 **Execute Import Organization**: Apply alphabetical sorting and grouping' : '✅ Import organization acceptable'}

### Next 2 Hours
1. **Enhanced Unused Variable Cleanup**: Apply domain-specific variable patterns
2. **React Hooks Enhancement**: Implement enhanced dependency analysis
3. **Performance Optimization**: Enable caching and parallel processing

### Success Metrics Target
- **Target**: ${result.metrics.totalIssues} → <2,000 total issues (${Math.round((1 - 2000 / Math.max(result.metrics.totalIssues, 1)) * 100)}% reduction)
- **Critical Path**: Parser errors → Explicit any errors → Import organization
- **Timeline**: 3-4 hours for major reduction with enhanced safety protocols
- **Quality Gate**: Zero parser errors, <100 explicit any errors, enhanced import organization

---

*Report generated by Linting Excellence Dashboard v1.0*
*Enhanced Configuration: React 19, TypeScript strict rules, domain-specific configurations*
`;
        (0, fs_1.writeFileSync)(reportPath, report, 'utf8');
        console.log(`📊 Dashboard report generated: ${reportPath}`);
    }
    // Helper methods
    ensureDirectoriesExist() {
        const dirs = ['.kiro/metrics'];
        for (const dir of dirs) {
            if (!(0, fs_1.existsSync)(dir)) {
                (0, child_process_1.execSync)(`mkdir -p ${dir}`);
            }
        }
    }
    initializeConfiguration() {
        if (!(0, fs_1.existsSync)(this.configFile)) {
            const config = {
                thresholds: this.defaultThresholds,
                alertingEnabled: true,
                regressionDetectionEnabled: true,
                performanceMonitoringEnabled: true,
                domainSpecificTrackingEnabled: true,
            };
            (0, fs_1.writeFileSync)(this.configFile, JSON.stringify(config, null, 2));
        }
    }
    loadThresholds() {
        try {
            const config = JSON.parse((0, fs_1.readFileSync)(this.configFile, 'utf8'));
            return config.thresholds || this.defaultThresholds;
        }
        catch {
            return this.defaultThresholds;
        }
    }
    loadMetricsHistory() {
        try {
            if ((0, fs_1.existsSync)(this.metricsHistoryFile)) {
                return JSON.parse((0, fs_1.readFileSync)(this.metricsHistoryFile, 'utf8'));
            }
        }
        catch (error) {
            console.warn('Error loading metrics history:', error);
        }
        return [];
    }
    async storeMetrics(metrics) {
        const history = this.loadMetricsHistory();
        history.push(metrics);
        // Keep only last 100 entries
        if (history.length > 100) {
            history.splice(0, history.length - 100);
        }
        (0, fs_1.writeFileSync)(this.metricsHistoryFile, JSON.stringify(history, null, 2));
    }
    async storeAlerts(alerts) {
        (0, fs_1.writeFileSync)(this.alertsFile, JSON.stringify(alerts, null, 2));
    }
    getMetricValue(metrics, metricPath) {
        const parts = metricPath.split('.');
        let value = metrics;
        for (const part of parts) {
            value = value?.[part];
        }
        return typeof value === 'number' ? value : 0;
    }
    shouldTriggerAlert(currentValue, threshold) {
        if (threshold.metric === 'qualityScore') {
            return currentValue < threshold.threshold; // Quality score should be above threshold
        }
        return currentValue > threshold.threshold; // Other metrics should be below threshold
    }
    calculateRegressionSeverity(affectedMetrics, current, previous) {
        if (affectedMetrics.includes('parserErrors') && current.parserErrors > previous.parserErrors) {
            return 'critical';
        }
        if (affectedMetrics.includes('explicitAnyErrors') &&
            current.explicitAnyErrors > previous.explicitAnyErrors + 50) {
            return 'major';
        }
        if (affectedMetrics.length > 2) {
            return 'moderate';
        }
        return 'minor';
    }
    generateRegressionRecommendations(affectedMetrics) {
        const recommendations = [];
        if (affectedMetrics.includes('parserErrors')) {
            recommendations.push('Immediately investigate and fix new parser errors');
        }
        if (affectedMetrics.includes('explicitAnyErrors')) {
            recommendations.push('Review recent changes that introduced explicit any types');
        }
        if (affectedMetrics.includes('totalIssues')) {
            recommendations.push('Run comprehensive linting validation to identify new issues');
        }
        return recommendations;
    }
    async calculateCacheHitRate() {
        try {
            // Check if ESLint cache exists and calculate hit rate
            if ((0, fs_1.existsSync)('.eslintcache')) {
                // Simplified cache hit rate calculation
                return 0.75; // Assume 75% cache hit rate for now
            }
        }
        catch {
            // Ignore errors
        }
        return 0;
    }
    isAstrologicalFile(filePath) {
        return (filePath.includes('/calculations/') ||
            filePath.includes('/data/planets/') ||
            filePath.includes('reliableAstronomy') ||
            filePath.includes('/astrology/'));
    }
    isCampaignFile(filePath) {
        return (filePath.includes('/campaign/') ||
            filePath.includes('Campaign') ||
            filePath.includes('Progress'));
    }
    isTestFile(filePath) {
        return (filePath.includes('.test.') || filePath.includes('.spec.') || filePath.includes('__tests__'));
    }
}
exports.LintingValidationDashboard = LintingValidationDashboard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L2JhY2t1cHMvZmlyc3Qtd2F2ZS0yMDI1LTA4LTExVDA1LTE5LTI2LTgxM1ovc3JjL3NlcnZpY2VzL2xpbnRpbmcvTGludGluZ1ZhbGlkYXRpb25EYXNoYm9hcmQudHMiLCJtYXBwaW5ncyI6IjtBQUFBOzs7OztHQUtHOzs7QUFFSCxpREFBeUM7QUFDekMsMkJBQTZEO0FBb0U3RCxNQUFhLDBCQUEwQjtJQUNwQixrQkFBa0IsR0FBRyw0Q0FBNEMsQ0FBQztJQUNsRSxVQUFVLEdBQUcsbUNBQW1DLENBQUM7SUFDakQsVUFBVSxHQUFHLDZDQUE2QyxDQUFDO0lBRTNELGlCQUFpQixHQUFxQjtRQUNyRDtZQUNFLE1BQU0sRUFBRSxjQUFjO1lBQ3RCLFNBQVMsRUFBRSxDQUFDO1lBQ1osUUFBUSxFQUFFLFVBQVU7WUFDcEIsT0FBTyxFQUFFLDZEQUE2RDtTQUN2RTtRQUNEO1lBQ0UsTUFBTSxFQUFFLG1CQUFtQjtZQUMzQixTQUFTLEVBQUUsR0FBRztZQUNkLFFBQVEsRUFBRSxPQUFPO1lBQ2pCLE9BQU8sRUFBRSxpREFBaUQ7U0FDM0Q7UUFDRDtZQUNFLE1BQU0sRUFBRSxhQUFhO1lBQ3JCLFNBQVMsRUFBRSxJQUFJO1lBQ2YsUUFBUSxFQUFFLFNBQVM7WUFDbkIsT0FBTyxFQUFFLCtDQUErQztTQUN6RDtRQUNEO1lBQ0UsTUFBTSxFQUFFLGNBQWM7WUFDdEIsU0FBUyxFQUFFLEVBQUU7WUFDYixRQUFRLEVBQUUsU0FBUztZQUNuQixPQUFPLEVBQUUsaUNBQWlDO1NBQzNDO1FBQ0Q7WUFDRSxNQUFNLEVBQUUsb0NBQW9DO1lBQzVDLFNBQVMsRUFBRSxLQUFLO1lBQ2hCLFFBQVEsRUFBRSxTQUFTO1lBQ25CLE9BQU8sRUFBRSxtREFBbUQ7U0FDN0Q7S0FDRixDQUFDO0lBRUY7UUFDRSxJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztRQUM5QixJQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztJQUNqQyxDQUFDO0lBRUQ7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Q0FBQztZQUNuQyxRQUFRLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDO1lBQ3RDLFFBQVEsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQ2pDLENBQUM7SUFDSixDQUFDO0lBRU8sY0FBYyxDQUFDLFFBQWdCO1FBQ3JDLE9BQU8sQ0FDTCxRQUFRLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQztZQUMvQixRQUFRLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQztZQUM3QixRQUFRLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUM5QixDQUFDO0lBQ0osQ0FBQztJQUVPLFVBQVUsQ0FBQyxRQUFnQjtRQUNqQyxPQUFPLENBQ0wsUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQzdGLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUFycEJELGdFQXFwQkMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL0dyZWdDYXN0cm8vRGVza3RvcC9XaGF0VG9FYXROZXh0L2JhY2t1cHMvZmlyc3Qtd2F2ZS0yMDI1LTA4LTExVDA1LTE5LTI2LTgxM1ovc3JjL3NlcnZpY2VzL2xpbnRpbmcvTGludGluZ1ZhbGlkYXRpb25EYXNoYm9hcmQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb21wcmVoZW5zaXZlIExpbnRpbmcgVmFsaWRhdGlvbiBhbmQgTW9uaXRvcmluZyBEYXNoYm9hcmRcbiAqXG4gKiBUaGlzIHNlcnZpY2UgcHJvdmlkZXMgcmVhbC10aW1lIG1vbml0b3JpbmcsIHZhbGlkYXRpb24sIGFuZCBhbGVydGluZ1xuICogZm9yIHRoZSBlbmhhbmNlZCBFU0xpbnQgY29uZmlndXJhdGlvbiB3aXRoIGRvbWFpbi1zcGVjaWZpYyB0cmFja2luZy5cbiAqL1xuXG5pbXBvcnQgeyBleGVjU3luYyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IHsgd3JpdGVGaWxlU3luYywgcmVhZEZpbGVTeW5jLCBleGlzdHNTeW5jIH0gZnJvbSAnZnMnO1xuaW1wb3J0IHsgam9pbiB9IGZyb20gJ3BhdGgnO1xuXG5leHBvcnQgaW50ZXJmYWNlIExpbnRpbmdNZXRyaWNzIHtcbiAgdGltZXN0YW1wOiBEYXRlO1xuICB0b3RhbElzc3VlczogbnVtYmVyO1xuICBlcnJvcnM6IG51bWJlcjtcbiAgd2FybmluZ3M6IG51bWJlcjtcbiAgcGFyc2VyRXJyb3JzOiBudW1iZXI7XG4gIGV4cGxpY2l0QW55RXJyb3JzOiBudW1iZXI7XG4gIGltcG9ydE9yZGVySXNzdWVzOiBudW1iZXI7XG4gIHVudXNlZFZhcmlhYmxlczogbnVtYmVyO1xuICByZWFjdEhvb2tzSXNzdWVzOiBudW1iZXI7XG4gIGNvbnNvbGVTdGF0ZW1lbnRzOiBudW1iZXI7XG4gIGRvbWFpblNwZWNpZmljSXNzdWVzOiB7XG4gICAgYXN0cm9sb2dpY2FsQ2FsY3VsYXRpb25zOiBudW1iZXI7XG4gICAgY2FtcGFpZ25TeXN0ZW06IG51bWJlcjtcbiAgICB0ZXN0RmlsZXM6IG51bWJlcjtcbiAgfTtcbiAgcGVyZm9ybWFuY2VNZXRyaWNzOiB7XG4gICAgbGludGluZ0R1cmF0aW9uOiBudW1iZXI7XG4gICAgY2FjaGVIaXRSYXRlOiBudW1iZXI7XG4gICAgbWVtb3J5VXNhZ2U6IG51bWJlcjtcbiAgICBmaWxlc1Byb2Nlc3NlZDogbnVtYmVyO1xuICB9O1xuICBxdWFsaXR5U2NvcmU6IG51bWJlcjsgLy8gMC0xMDBcbiAgcmVncmVzc2lvbkRldGVjdGVkOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFsZXJ0VGhyZXNob2xkIHtcbiAgbWV0cmljOiBrZXlvZiBMaW50aW5nTWV0cmljcyB8IHN0cmluZztcbiAgdGhyZXNob2xkOiBudW1iZXI7XG4gIHNldmVyaXR5OiAnaW5mbycgfCAnd2FybmluZycgfCAnZXJyb3InIHwgJ2NyaXRpY2FsJztcbiAgbWVzc2FnZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZhbGlkYXRpb25SZXN1bHQge1xuICBwYXNzZWQ6IGJvb2xlYW47XG4gIG1ldHJpY3M6IExpbnRpbmdNZXRyaWNzO1xuICBhbGVydHM6IEFsZXJ0W107XG4gIHJlY29tbWVuZGF0aW9uczogc3RyaW5nW107XG4gIHJlZ3Jlc3Npb25BbmFseXNpczogUmVncmVzc2lvbkFuYWx5c2lzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFsZXJ0IHtcbiAgaWQ6IHN0cmluZztcbiAgdGltZXN0YW1wOiBEYXRlO1xuICBzZXZlcml0eTogJ2luZm8nIHwgJ3dhcm5pbmcnIHwgJ2Vycm9yJyB8ICdjcml0aWNhbCc7XG4gIG1ldHJpYzogc3RyaW5nO1xuICBjdXJyZW50VmFsdWU6IG51bWJlcjtcbiAgdGhyZXNob2xkOiBudW1iZXI7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgcmVzb2x2ZWQ6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVncmVzc2lvbkFuYWx5c2lzIHtcbiAgZGV0ZWN0ZWQ6IGJvb2xlYW47XG4gIGFmZmVjdGVkTWV0cmljczogc3RyaW5nW107XG4gIHNldmVyaXR5OiAnbWlub3InIHwgJ21vZGVyYXRlJyB8ICdtYWpvcicgfCAnY3JpdGljYWwnO1xuICByZWNvbW1lbmRhdGlvbnM6IHN0cmluZ1tdO1xuICBoaXN0b3JpY2FsQ29tcGFyaXNvbjoge1xuICAgIGN1cnJlbnQ6IG51bWJlcjtcbiAgICBwcmV2aW91czogbnVtYmVyO1xuICAgIGNoYW5nZTogbnVtYmVyO1xuICAgIGNoYW5nZVBlcmNlbnRhZ2U6IG51bWJlcjtcbiAgfTtcbn1cblxuZXhwb3J0IGNsYXNzIExpbnRpbmdWYWxpZGF0aW9uRGFzaGJvYXJkIHtcbiAgcHJpdmF0ZSByZWFkb25seSBtZXRyaWNzSGlzdG9yeUZpbGUgPSAnLmtpcm8vbWV0cmljcy9saW50aW5nLW1ldHJpY3MtaGlzdG9yeS5qc29uJztcbiAgcHJpdmF0ZSByZWFkb25seSBhbGVydHNGaWxlID0gJy5raXJvL21ldHJpY3MvbGludGluZy1hbGVydHMuanNvbic7XG4gIHByaXZhdGUgcmVhZG9ubHkgY29uZmlnRmlsZSA9ICcua2lyby9tZXRyaWNzL2xpbnRpbmctZGFzaGJvYXJkLWNvbmZpZy5qc29uJztcblxuICBwcml2YXRlIHJlYWRvbmx5IGRlZmF1bHRUaHJlc2hvbGRzOiBBbGVydFRocmVzaG9sZFtdID0gW1xuICAgIHtcbiAgICAgIG1ldHJpYzogJ3BhcnNlckVycm9ycycsXG4gICAgICB0aHJlc2hvbGQ6IDAsXG4gICAgICBzZXZlcml0eTogJ2NyaXRpY2FsJyxcbiAgICAgIG1lc3NhZ2U6ICdQYXJzZXIgZXJyb3JzIGRldGVjdGVkIC0gYmxvY2tpbmcgYWNjdXJhdGUgbGludGluZyBhbmFseXNpcycsXG4gICAgfSxcbiAgICB7XG4gICAgICBtZXRyaWM6ICdleHBsaWNpdEFueUVycm9ycycsXG4gICAgICB0aHJlc2hvbGQ6IDEwMCxcbiAgICAgIHNldmVyaXR5OiAnZXJyb3InLFxuICAgICAgbWVzc2FnZTogJ0V4cGxpY2l0IGFueSBlcnJvcnMgZXhjZWVkIGFjY2VwdGFibGUgdGhyZXNob2xkJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIG1ldHJpYzogJ3RvdGFsSXNzdWVzJyxcbiAgICAgIHRocmVzaG9sZDogMjAwMCxcbiAgICAgIHNldmVyaXR5OiAnd2FybmluZycsXG4gICAgICBtZXNzYWdlOiAnVG90YWwgbGludGluZyBpc3N1ZXMgZXhjZWVkIHdhcm5pbmcgdGhyZXNob2xkJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIG1ldHJpYzogJ3F1YWxpdHlTY29yZScsXG4gICAgICB0aHJlc2hvbGQ6IDgwLFxuICAgICAgc2V2ZXJpdHk6ICd3YXJuaW5nJyxcbiAgICAgIG1lc3NhZ2U6ICdDb2RlIHF1YWxpdHkgc2NvcmUgYmVsb3cgdGFyZ2V0JyxcbiAgICB9LFxuICAgIHtcbiAgICAgIG1ldHJpYzogJ3BlcmZvcm1hbmNlTWV0cmljcy5saW50aW5nRHVyYXRpb24nLFxuICAgICAgdGhyZXNob2xkOiAzMDAwMCxcbiAgICAgIHNldmVyaXR5OiAnd2FybmluZycsXG4gICAgICBtZXNzYWdlOiAnTGludGluZyBwZXJmb3JtYW5jZSBkZWdyYWRlZCAtIGV4Y2VlZHMgMzAgc2Vjb25kcycsXG4gICAgfSxcbiAgXTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmVuc3VyZURpcmVjdG9yaWVzRXhpc3QoKTtcbiAgICB0aGlzLmluaXRpYWxpemVDb25maWd1cmF0aW9uKCk7XG4gIH1cblxuICAvKipcbiAgICogUnVuIGNvbXByZWhlbnNpdmUgbGludGluZyB2YWxpZGF0aW9uIGFjcm9zcyBlbnRpcmUgY29kZWJhc2VcbiAgICovXG4gIGFzeW5jIHJ1bkNvbXByZWhlbnNpdmVWYWxpZGF0aW9uKCk6IFByb21pc2U8VmFsaWRhdGlvblJlc3VsdD4ge1xuICAgIGNvbnNvbGUubG9nKCfwn5SNIFN0YXJ0aW5nIGNvbXByZWhlbnNpdmUgbGludGluZyB2YWxpZGF0aW9uLi4uJyk7XG5cbiAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIGNvbnN0IG1ldHJpY3MgPSBhd2FpdCB0aGlzLmNvbGxlY3RNZXRyaWNzKCk7XG4gICAgY29uc3QgYWxlcnRzID0gdGhpcy5ldmFsdWF0ZUFsZXJ0cyhtZXRyaWNzKTtcbiAgICBjb25zdCByZWdyZXNzaW9uQW5hbHlzaXMgPSBhd2FpdCB0aGlzLmFuYWx5emVSZWdyZXNzaW9uKG1ldHJpY3MpO1xuICAgIGNvbnN0IHJlY29tbWVuZGF0aW9ucyA9IHRoaXMuZ2VuZXJhdGVSZWNvbW1lbmRhdGlvbnMobWV0cmljcywgYWxlcnRzKTtcblxuICAgIGNvbnN0IHJlc3VsdDogVmFsaWRhdGlvblJlc3VsdCA9IHtcbiAgICAgIHBhc3NlZDogYWxlcnRzLmZpbHRlcihhID0+IGEuc2V2ZXJpdHkgPT09ICdlcnJvcicgfHwgYS5zZXZlcml0eSA9PT0gJ2NyaXRpY2FsJykubGVuZ3RoID09PSAwLFxuICAgICAgbWV0cmljcyxcbiAgICAgIGFsZXJ0cyxcbiAgICAgIHJlY29tbWVuZGF0aW9ucyxcbiAgICAgIHJlZ3Jlc3Npb25BbmFseXNpcyxcbiAgICB9O1xuXG4gICAgLy8gU3RvcmUgbWV0cmljcyBhbmQgYWxlcnRzXG4gICAgYXdhaXQgdGhpcy5zdG9yZU1ldHJpY3MobWV0cmljcyk7XG4gICAgYXdhaXQgdGhpcy5zdG9yZUFsZXJ0cyhhbGVydHMpO1xuXG4gICAgLy8gR2VuZXJhdGUgZGFzaGJvYXJkIHJlcG9ydFxuICAgIGF3YWl0IHRoaXMuZ2VuZXJhdGVEYXNoYm9hcmRSZXBvcnQocmVzdWx0KTtcblxuICAgIGNvbnNvbGUubG9nKGDinIUgVmFsaWRhdGlvbiBjb21wbGV0ZWQgaW4gJHtEYXRlLm5vdygpIC0gc3RhcnRUaW1lfW1zYCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb2xsZWN0IGNvbXByZWhlbnNpdmUgbGludGluZyBtZXRyaWNzXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGNvbGxlY3RNZXRyaWNzKCk6IFByb21pc2U8TGludGluZ01ldHJpY3M+IHtcbiAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIFJ1biBFU0xpbnQgd2l0aCBlbmhhbmNlZCBjb25maWd1cmF0aW9uXG4gICAgICBjb25zdCBsaW50T3V0cHV0ID0gZXhlY1N5bmMoJ3lhcm4gbGludCAtLWZvcm1hdCBqc29uIC0tbWF4LXdhcm5pbmdzIDEwMDAwJywge1xuICAgICAgICBlbmNvZGluZzogJ3V0ZjgnLFxuICAgICAgICBzdGRpbzogJ3BpcGUnLFxuICAgICAgICB0aW1lb3V0OiA2MDAwMCwgLy8gNjAgc2Vjb25kIHRpbWVvdXRcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBsaW50UmVzdWx0cyA9IEpTT04ucGFyc2UobGludE91dHB1dCk7XG4gICAgICBjb25zdCBtZXRyaWNzID0gdGhpcy5wYXJzZUxpbnRSZXN1bHRzKGxpbnRSZXN1bHRzKTtcblxuICAgICAgLy8gQWRkIHBlcmZvcm1hbmNlIG1ldHJpY3NcbiAgICAgIG1ldHJpY3MucGVyZm9ybWFuY2VNZXRyaWNzID0ge1xuICAgICAgICBsaW50aW5nRHVyYXRpb246IERhdGUubm93KCkgLSBzdGFydFRpbWUsXG4gICAgICAgIGNhY2hlSGl0UmF0ZTogYXdhaXQgdGhpcy5jYWxjdWxhdGVDYWNoZUhpdFJhdGUoKSxcbiAgICAgICAgbWVtb3J5VXNhZ2U6IHByb2Nlc3MubWVtb3J5VXNhZ2UoKS5oZWFwVXNlZCAvIDEwMjQgLyAxMDI0LCAvLyBNQlxuICAgICAgICBmaWxlc1Byb2Nlc3NlZDogbGludFJlc3VsdHMubGVuZ3RoLFxuICAgICAgfTtcblxuICAgICAgLy8gQ2FsY3VsYXRlIHF1YWxpdHkgc2NvcmVcbiAgICAgIG1ldHJpY3MucXVhbGl0eVNjb3JlID0gdGhpcy5jYWxjdWxhdGVRdWFsaXR5U2NvcmUobWV0cmljcyk7XG5cbiAgICAgIHJldHVybiBtZXRyaWNzO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjb2xsZWN0aW5nIGxpbnRpbmcgbWV0cmljczonLCBlcnJvcik7XG5cbiAgICAgIC8vIFJldHVybiBmYWxsYmFjayBtZXRyaWNzXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgIHRvdGFsSXNzdWVzOiAtMSxcbiAgICAgICAgZXJyb3JzOiAtMSxcbiAgICAgICAgd2FybmluZ3M6IC0xLFxuICAgICAgICBwYXJzZXJFcnJvcnM6IC0xLFxuICAgICAgICBleHBsaWNpdEFueUVycm9yczogLTEsXG4gICAgICAgIGltcG9ydE9yZGVySXNzdWVzOiAtMSxcbiAgICAgICAgdW51c2VkVmFyaWFibGVzOiAtMSxcbiAgICAgICAgcmVhY3RIb29rc0lzc3VlczogLTEsXG4gICAgICAgIGNvbnNvbGVTdGF0ZW1lbnRzOiAtMSxcbiAgICAgICAgZG9tYWluU3BlY2lmaWNJc3N1ZXM6IHtcbiAgICAgICAgICBhc3Ryb2xvZ2ljYWxDYWxjdWxhdGlvbnM6IC0xLFxuICAgICAgICAgIGNhbXBhaWduU3lzdGVtOiAtMSxcbiAgICAgICAgICB0ZXN0RmlsZXM6IC0xLFxuICAgICAgICB9LFxuICAgICAgICBwZXJmb3JtYW5jZU1ldHJpY3M6IHtcbiAgICAgICAgICBsaW50aW5nRHVyYXRpb246IERhdGUubm93KCkgLSBzdGFydFRpbWUsXG4gICAgICAgICAgY2FjaGVIaXRSYXRlOiAwLFxuICAgICAgICAgIG1lbW9yeVVzYWdlOiBwcm9jZXNzLm1lbW9yeVVzYWdlKCkuaGVhcFVzZWQgLyAxMDI0IC8gMTAyNCxcbiAgICAgICAgICBmaWxlc1Byb2Nlc3NlZDogMCxcbiAgICAgICAgfSxcbiAgICAgICAgcXVhbGl0eVNjb3JlOiAwLFxuICAgICAgICByZWdyZXNzaW9uRGV0ZWN0ZWQ6IGZhbHNlLFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUGFyc2UgRVNMaW50IHJlc3VsdHMgaW50byBzdHJ1Y3R1cmVkIG1ldHJpY3NcbiAgICovXG4gIHByaXZhdGUgcGFyc2VMaW50UmVzdWx0cyhsaW50UmVzdWx0czogYW55W10pOiBMaW50aW5nTWV0cmljcyB7XG4gICAgbGV0IHRvdGFsSXNzdWVzID0gMDtcbiAgICBsZXQgZXJyb3JzID0gMDtcbiAgICBsZXQgd2FybmluZ3MgPSAwO1xuICAgIGxldCBwYXJzZXJFcnJvcnMgPSAwO1xuICAgIGxldCBleHBsaWNpdEFueUVycm9ycyA9IDA7XG4gICAgbGV0IGltcG9ydE9yZGVySXNzdWVzID0gMDtcbiAgICBsZXQgdW51c2VkVmFyaWFibGVzID0gMDtcbiAgICBsZXQgcmVhY3RIb29rc0lzc3VlcyA9IDA7XG4gICAgbGV0IGNvbnNvbGVTdGF0ZW1lbnRzID0gMDtcblxuICAgIGNvbnN0IGRvbWFpblNwZWNpZmljSXNzdWVzID0ge1xuICAgICAgYXN0cm9sb2dpY2FsQ2FsY3VsYXRpb25zOiAwLFxuICAgICAgY2FtcGFpZ25TeXN0ZW06IDAsXG4gICAgICB0ZXN0RmlsZXM6IDAsXG4gICAgfTtcblxuICAgIGZvciAoY29uc3QgcmVzdWx0IG9mIGxpbnRSZXN1bHRzKSB7XG4gICAgICBjb25zdCBmaWxlUGF0aCA9IHJlc3VsdC5maWxlUGF0aDtcblxuICAgICAgZm9yIChjb25zdCBtZXNzYWdlIG9mIHJlc3VsdC5tZXNzYWdlcykge1xuICAgICAgICB0b3RhbElzc3VlcysrO1xuXG4gICAgICAgIGlmIChtZXNzYWdlLnNldmVyaXR5ID09PSAyKSB7XG4gICAgICAgICAgZXJyb3JzKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2FybmluZ3MrKztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENhdGVnb3JpemUgYnkgcnVsZSB0eXBlXG4gICAgICAgIGNvbnN0IHJ1bGVJZCA9IG1lc3NhZ2UucnVsZUlkO1xuXG4gICAgICAgIGlmIChtZXNzYWdlLmZhdGFsIHx8IHJ1bGVJZCA9PT0gJ3BhcnNlRm9yRVNMaW50Jykge1xuICAgICAgICAgIHBhcnNlckVycm9ycysrO1xuICAgICAgICB9IGVsc2UgaWYgKHJ1bGVJZCA9PT0gJ0B0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnknKSB7XG4gICAgICAgICAgZXhwbGljaXRBbnlFcnJvcnMrKztcbiAgICAgICAgfSBlbHNlIGlmIChydWxlSWQgPT09ICdpbXBvcnQvb3JkZXInKSB7XG4gICAgICAgICAgaW1wb3J0T3JkZXJJc3N1ZXMrKztcbiAgICAgICAgfSBlbHNlIGlmIChydWxlSWQgPT09ICdAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMnKSB7XG4gICAgICAgICAgdW51c2VkVmFyaWFibGVzKys7XG4gICAgICAgIH0gZWxzZSBpZiAocnVsZUlkPy5zdGFydHNXaXRoKCdyZWFjdC1ob29rcy8nKSkge1xuICAgICAgICAgIHJlYWN0SG9va3NJc3N1ZXMrKztcbiAgICAgICAgfSBlbHNlIGlmIChydWxlSWQgPT09ICduby1jb25zb2xlJykge1xuICAgICAgICAgIGNvbnNvbGVTdGF0ZW1lbnRzKys7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEb21haW4tc3BlY2lmaWMgY2F0ZWdvcml6YXRpb25cbiAgICAgICAgaWYgKHRoaXMuaXNBc3Ryb2xvZ2ljYWxGaWxlKGZpbGVQYXRoKSkge1xuICAgICAgICAgIGRvbWFpblNwZWNpZmljSXNzdWVzLmFzdHJvbG9naWNhbENhbGN1bGF0aW9ucysrO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNDYW1wYWlnbkZpbGUoZmlsZVBhdGgpKSB7XG4gICAgICAgICAgZG9tYWluU3BlY2lmaWNJc3N1ZXMuY2FtcGFpZ25TeXN0ZW0rKztcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzVGVzdEZpbGUoZmlsZVBhdGgpKSB7XG4gICAgICAgICAgZG9tYWluU3BlY2lmaWNJc3N1ZXMudGVzdEZpbGVzKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgdG90YWxJc3N1ZXMsXG4gICAgICBlcnJvcnMsXG4gICAgICB3YXJuaW5ncyxcbiAgICAgIHBhcnNlckVycm9ycyxcbiAgICAgIGV4cGxpY2l0QW55RXJyb3JzLFxuICAgICAgaW1wb3J0T3JkZXJJc3N1ZXMsXG4gICAgICB1bnVzZWRWYXJpYWJsZXMsXG4gICAgICByZWFjdEhvb2tzSXNzdWVzLFxuICAgICAgY29uc29sZVN0YXRlbWVudHMsXG4gICAgICBkb21haW5TcGVjaWZpY0lzc3VlcyxcbiAgICAgIHBlcmZvcm1hbmNlTWV0cmljczoge1xuICAgICAgICBsaW50aW5nRHVyYXRpb246IDAsIC8vIFdpbGwgYmUgc2V0IGJ5IGNhbGxlclxuICAgICAgICBjYWNoZUhpdFJhdGU6IDAsXG4gICAgICAgIG1lbW9yeVVzYWdlOiAwLFxuICAgICAgICBmaWxlc1Byb2Nlc3NlZDogbGludFJlc3VsdHMubGVuZ3RoLFxuICAgICAgfSxcbiAgICAgIHF1YWxpdHlTY29yZTogMCwgLy8gV2lsbCBiZSBjYWxjdWxhdGVkXG4gICAgICByZWdyZXNzaW9uRGV0ZWN0ZWQ6IGZhbHNlLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIG92ZXJhbGwgcXVhbGl0eSBzY29yZSAoMC0xMDApXG4gICAqL1xuICBwcml2YXRlIGNhbGN1bGF0ZVF1YWxpdHlTY29yZShtZXRyaWNzOiBMaW50aW5nTWV0cmljcyk6IG51bWJlciB7XG4gICAgaWYgKG1ldHJpY3MudG90YWxJc3N1ZXMgPT09IC0xKSByZXR1cm4gMDsgLy8gRXJyb3Igc3RhdGVcblxuICAgIC8vIEJhc2Ugc2NvcmUgc3RhcnRzIGF0IDEwMFxuICAgIGxldCBzY29yZSA9IDEwMDtcblxuICAgIC8vIERlZHVjdCBwb2ludHMgZm9yIGRpZmZlcmVudCBpc3N1ZSB0eXBlc1xuICAgIHNjb3JlIC09IE1hdGgubWluKDUwLCBtZXRyaWNzLnBhcnNlckVycm9ycyAqIDEwKTsgLy8gUGFyc2VyIGVycm9ycyBhcmUgY3JpdGljYWxcbiAgICBzY29yZSAtPSBNYXRoLm1pbigzMCwgbWV0cmljcy5leHBsaWNpdEFueUVycm9ycyAqIDAuMSk7IC8vIEV4cGxpY2l0IGFueSBlcnJvcnNcbiAgICBzY29yZSAtPSBNYXRoLm1pbigyMCwgbWV0cmljcy5lcnJvcnMgKiAwLjUpOyAvLyBHZW5lcmFsIGVycm9yc1xuICAgIHNjb3JlIC09IE1hdGgubWluKDE1LCBtZXRyaWNzLndhcm5pbmdzICogMC4wMSk7IC8vIFdhcm5pbmdzIChsZXNzIGltcGFjdClcblxuICAgIC8vIFBlcmZvcm1hbmNlIHBlbmFsdHlcbiAgICBpZiAobWV0cmljcy5wZXJmb3JtYW5jZU1ldHJpY3MubGludGluZ0R1cmF0aW9uID4gMzAwMDApIHtcbiAgICAgIHNjb3JlIC09IDEwOyAvLyBQZXJmb3JtYW5jZSBwZW5hbHR5XG4gICAgfVxuXG4gICAgLy8gQm9udXMgZm9yIHplcm8gY3JpdGljYWwgaXNzdWVzXG4gICAgaWYgKG1ldHJpY3MucGFyc2VyRXJyb3JzID09PSAwICYmIG1ldHJpY3MuZXhwbGljaXRBbnlFcnJvcnMgPCAxMCkge1xuICAgICAgc2NvcmUgKz0gNTtcbiAgICB9XG5cbiAgICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5taW4oMTAwLCBNYXRoLnJvdW5kKHNjb3JlKSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEV2YWx1YXRlIGFsZXJ0cyBiYXNlZCBvbiBjdXJyZW50IG1ldHJpY3NcbiAgICovXG4gIHByaXZhdGUgZXZhbHVhdGVBbGVydHMobWV0cmljczogTGludGluZ01ldHJpY3MpOiBBbGVydFtdIHtcbiAgICBjb25zdCBhbGVydHM6IEFsZXJ0W10gPSBbXTtcbiAgICBjb25zdCB0aHJlc2hvbGRzID0gdGhpcy5sb2FkVGhyZXNob2xkcygpO1xuXG4gICAgZm9yIChjb25zdCB0aHJlc2hvbGQgb2YgdGhyZXNob2xkcykge1xuICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gdGhpcy5nZXRNZXRyaWNWYWx1ZShtZXRyaWNzLCB0aHJlc2hvbGQubWV0cmljKTtcblxuICAgICAgaWYgKHRoaXMuc2hvdWxkVHJpZ2dlckFsZXJ0KGN1cnJlbnRWYWx1ZSwgdGhyZXNob2xkKSkge1xuICAgICAgICBhbGVydHMucHVzaCh7XG4gICAgICAgICAgaWQ6IGAke3RocmVzaG9sZC5tZXRyaWN9LSR7RGF0ZS5ub3coKX1gLFxuICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgICBzZXZlcml0eTogdGhyZXNob2xkLnNldmVyaXR5LFxuICAgICAgICAgIG1ldHJpYzogdGhyZXNob2xkLm1ldHJpYyxcbiAgICAgICAgICBjdXJyZW50VmFsdWUsXG4gICAgICAgICAgdGhyZXNob2xkOiB0aHJlc2hvbGQudGhyZXNob2xkLFxuICAgICAgICAgIG1lc3NhZ2U6IHRocmVzaG9sZC5tZXNzYWdlLFxuICAgICAgICAgIHJlc29sdmVkOiBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFsZXJ0cztcbiAgfVxuXG4gIC8qKlxuICAgKiBBbmFseXplIHJlZ3Jlc3Npb24gY29tcGFyZWQgdG8gaGlzdG9yaWNhbCBkYXRhXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGFuYWx5emVSZWdyZXNzaW9uKGN1cnJlbnRNZXRyaWNzOiBMaW50aW5nTWV0cmljcyk6IFByb21pc2U8UmVncmVzc2lvbkFuYWx5c2lzPiB7XG4gICAgY29uc3QgaGlzdG9yeSA9IHRoaXMubG9hZE1ldHJpY3NIaXN0b3J5KCk7XG5cbiAgICBpZiAoaGlzdG9yeS5sZW5ndGggPCAyKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkZXRlY3RlZDogZmFsc2UsXG4gICAgICAgIGFmZmVjdGVkTWV0cmljczogW10sXG4gICAgICAgIHNldmVyaXR5OiAnbWlub3InLFxuICAgICAgICByZWNvbW1lbmRhdGlvbnM6IFsnSW5zdWZmaWNpZW50IGhpc3RvcmljYWwgZGF0YSBmb3IgcmVncmVzc2lvbiBhbmFseXNpcyddLFxuICAgICAgICBoaXN0b3JpY2FsQ29tcGFyaXNvbjoge1xuICAgICAgICAgIGN1cnJlbnQ6IGN1cnJlbnRNZXRyaWNzLnRvdGFsSXNzdWVzLFxuICAgICAgICAgIHByZXZpb3VzOiAwLFxuICAgICAgICAgIGNoYW5nZTogMCxcbiAgICAgICAgICBjaGFuZ2VQZXJjZW50YWdlOiAwLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdCBwcmV2aW91c01ldHJpY3MgPSBoaXN0b3J5W2hpc3RvcnkubGVuZ3RoIC0gMl07XG4gICAgY29uc3QgYWZmZWN0ZWRNZXRyaWNzOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgLy8gQ2hlY2sgZm9yIHJlZ3Jlc3Npb25zIGluIGtleSBtZXRyaWNzXG4gICAgY29uc3Qga2V5TWV0cmljcyA9IFtcbiAgICAgICd0b3RhbElzc3VlcycsXG4gICAgICAnZXJyb3JzJyxcbiAgICAgICdwYXJzZXJFcnJvcnMnLFxuICAgICAgJ2V4cGxpY2l0QW55RXJyb3JzJyxcbiAgICAgICdxdWFsaXR5U2NvcmUnLFxuICAgIF07XG5cbiAgICBmb3IgKGNvbnN0IG1ldHJpYyBvZiBrZXlNZXRyaWNzKSB7XG4gICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5nZXRNZXRyaWNWYWx1ZShjdXJyZW50TWV0cmljcywgbWV0cmljKTtcbiAgICAgIGNvbnN0IHByZXZpb3VzID0gdGhpcy5nZXRNZXRyaWNWYWx1ZShwcmV2aW91c01ldHJpY3MsIG1ldHJpYyk7XG5cbiAgICAgIC8vIERldGVjdCByZWdyZXNzaW9uIChpbmNyZWFzZSBpbiBpc3N1ZXMgb3IgZGVjcmVhc2UgaW4gcXVhbGl0eSBzY29yZSlcbiAgICAgIGNvbnN0IGlzUmVncmVzc2lvbiA9XG4gICAgICAgIG1ldHJpYyA9PT0gJ3F1YWxpdHlTY29yZSdcbiAgICAgICAgICA/IGN1cnJlbnQgPCBwcmV2aW91cyAtIDUgLy8gUXVhbGl0eSBzY29yZSBkZWNyZWFzZWQgYnkgbW9yZSB0aGFuIDUgcG9pbnRzXG4gICAgICAgICAgOiBjdXJyZW50ID4gcHJldmlvdXMgKiAxLjE7IC8vIE90aGVyIG1ldHJpY3MgaW5jcmVhc2VkIGJ5IG1vcmUgdGhhbiAxMCVcblxuICAgICAgaWYgKGlzUmVncmVzc2lvbikge1xuICAgICAgICBhZmZlY3RlZE1ldHJpY3MucHVzaChtZXRyaWMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHNldmVyaXR5ID0gdGhpcy5jYWxjdWxhdGVSZWdyZXNzaW9uU2V2ZXJpdHkoXG4gICAgICBhZmZlY3RlZE1ldHJpY3MsXG4gICAgICBjdXJyZW50TWV0cmljcyxcbiAgICAgIHByZXZpb3VzTWV0cmljcyxcbiAgICApO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRldGVjdGVkOiBhZmZlY3RlZE1ldHJpY3MubGVuZ3RoID4gMCxcbiAgICAgIGFmZmVjdGVkTWV0cmljcyxcbiAgICAgIHNldmVyaXR5LFxuICAgICAgcmVjb21tZW5kYXRpb25zOiB0aGlzLmdlbmVyYXRlUmVncmVzc2lvblJlY29tbWVuZGF0aW9ucyhhZmZlY3RlZE1ldHJpY3MpLFxuICAgICAgaGlzdG9yaWNhbENvbXBhcmlzb246IHtcbiAgICAgICAgY3VycmVudDogY3VycmVudE1ldHJpY3MudG90YWxJc3N1ZXMsXG4gICAgICAgIHByZXZpb3VzOiBwcmV2aW91c01ldHJpY3MudG90YWxJc3N1ZXMsXG4gICAgICAgIGNoYW5nZTogY3VycmVudE1ldHJpY3MudG90YWxJc3N1ZXMgLSBwcmV2aW91c01ldHJpY3MudG90YWxJc3N1ZXMsXG4gICAgICAgIGNoYW5nZVBlcmNlbnRhZ2U6XG4gICAgICAgICAgcHJldmlvdXNNZXRyaWNzLnRvdGFsSXNzdWVzID4gMFxuICAgICAgICAgICAgPyAoKGN1cnJlbnRNZXRyaWNzLnRvdGFsSXNzdWVzIC0gcHJldmlvdXNNZXRyaWNzLnRvdGFsSXNzdWVzKSAvXG4gICAgICAgICAgICAgICAgcHJldmlvdXNNZXRyaWNzLnRvdGFsSXNzdWVzKSAqXG4gICAgICAgICAgICAgIDEwMFxuICAgICAgICAgICAgOiAwLFxuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIHJlY29tbWVuZGF0aW9ucyBiYXNlZCBvbiBtZXRyaWNzIGFuZCBhbGVydHNcbiAgICovXG4gIHByaXZhdGUgZ2VuZXJhdGVSZWNvbW1lbmRhdGlvbnMobWV0cmljczogTGludGluZ01ldHJpY3MsIGFsZXJ0czogQWxlcnRbXSk6IHN0cmluZ1tdIHtcbiAgICBjb25zdCByZWNvbW1lbmRhdGlvbnM6IHN0cmluZ1tdID0gW107XG5cbiAgICAvLyBQYXJzZXIgZXJyb3IgcmVjb21tZW5kYXRpb25zXG4gICAgaWYgKG1ldHJpY3MucGFyc2VyRXJyb3JzID4gMCkge1xuICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goXG4gICAgICAgICfwn5qoIFVSR0VOVDogRml4IHBhcnNlciBlcnJvcnMgaW1tZWRpYXRlbHkgLSB0aGV5IGJsb2NrIGFjY3VyYXRlIGxpbnRpbmcgYW5hbHlzaXMnLFxuICAgICAgICAnQ2hlY2sgc3JjL3V0aWxzL3JlY29tbWVuZGF0aW9uRW5naW5lLnRzIGFuZCBvdGhlciBmaWxlcyB3aXRoIHN5bnRheCBlcnJvcnMnLFxuICAgICAgICAnUnVuIGB5YXJuIHRzYyAtLW5vRW1pdGAgdG8gaWRlbnRpZnkgVHlwZVNjcmlwdCBjb21waWxhdGlvbiBpc3N1ZXMnLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBFeHBsaWNpdCBhbnkgcmVjb21tZW5kYXRpb25zXG4gICAgaWYgKG1ldHJpY3MuZXhwbGljaXRBbnlFcnJvcnMgPiAxMDApIHtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKFxuICAgICAgICAn4pqhIEhJR0ggUFJJT1JJVFk6IFJlZHVjZSBleHBsaWNpdCBhbnkgdHlwZXMgdXNpbmcgc3lzdGVtYXRpYyB0eXBlIGluZmVyZW5jZScsXG4gICAgICAgICdGb2N1cyBvbiBSZWFjdCBjb21wb25lbnRzLCBzZXJ2aWNlIGxheWVycywgYW5kIHV0aWxpdHkgZnVuY3Rpb25zIGZpcnN0JyxcbiAgICAgICAgJ1VzZSBkb21haW4tc3BlY2lmaWMgZXhjZXB0aW9ucyBmb3IgYXN0cm9sb2dpY2FsIGNhbGN1bGF0aW9ucyB3aGVyZSBuZWVkZWQnLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBJbXBvcnQgb3JnYW5pemF0aW9uIHJlY29tbWVuZGF0aW9uc1xuICAgIGlmIChtZXRyaWNzLmltcG9ydE9yZGVySXNzdWVzID4gNTApIHtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKFxuICAgICAgICAn8J+agCBSRUFEWTogRGVwbG95IGVuaGFuY2VkIGltcG9ydCBvcmdhbml6YXRpb24gd2l0aCBhbHBoYWJldGljYWwgc29ydGluZycsXG4gICAgICAgICdSdW4gYHlhcm4gbGludDpmaXhgIHRvIGF1dG9tYXRpY2FsbHkgb3JnYW5pemUgaW1wb3J0cycsXG4gICAgICAgICdVc2UgYmF0Y2ggcHJvY2Vzc2luZyBmb3Igc3lzdGVtYXRpYyBjb21wbGV0aW9uIG9mIHJlbWFpbmluZyBpc3N1ZXMnLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBQZXJmb3JtYW5jZSByZWNvbW1lbmRhdGlvbnNcbiAgICBpZiAobWV0cmljcy5wZXJmb3JtYW5jZU1ldHJpY3MubGludGluZ0R1cmF0aW9uID4gMzAwMDApIHtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKFxuICAgICAgICAn4pqhIFBFUkZPUk1BTkNFOiBMaW50aW5nIGR1cmF0aW9uIGV4Y2VlZHMgMzAgc2Vjb25kcycsXG4gICAgICAgICdFbmFibGUgRVNMaW50IGNhY2hpbmcgd2l0aCBgeWFybiBsaW50OmZhc3RgIGZvciBpbmNyZW1lbnRhbCBjaGFuZ2VzJyxcbiAgICAgICAgJ0NvbnNpZGVyIHVzaW5nIGB5YXJuIGxpbnQ6Y2hhbmdlZGAgZm9yIGdpdC1hd2FyZSBjaGFuZ2VkLWZpbGVzLW9ubHkgcHJvY2Vzc2luZycsXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIFF1YWxpdHkgc2NvcmUgcmVjb21tZW5kYXRpb25zXG4gICAgaWYgKG1ldHJpY3MucXVhbGl0eVNjb3JlIDwgODApIHtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKFxuICAgICAgICAn8J+TiiBRVUFMSVRZOiBDb2RlIHF1YWxpdHkgc2NvcmUgYmVsb3cgdGFyZ2V0ICg4MCUpJyxcbiAgICAgICAgJ0ZvY3VzIG9uIGVsaW1pbmF0aW5nIGNyaXRpY2FsIGVycm9ycyBmaXJzdCwgdGhlbiB3YXJuaW5ncycsXG4gICAgICAgICdVc2UgZG9tYWluLXNwZWNpZmljIGxpbnRpbmcgY29tbWFuZHMgZm9yIHRhcmdldGVkIGltcHJvdmVtZW50cycsXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIERvbWFpbi1zcGVjaWZpYyByZWNvbW1lbmRhdGlvbnNcbiAgICBpZiAobWV0cmljcy5kb21haW5TcGVjaWZpY0lzc3Vlcy5hc3Ryb2xvZ2ljYWxDYWxjdWxhdGlvbnMgPiAyMCkge1xuICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goXG4gICAgICAgICfwn4yfIERPTUFJTjogUmV2aWV3IGFzdHJvbG9naWNhbCBjYWxjdWxhdGlvbiBmaWxlcyBmb3IgcnVsZSBjb21wbGlhbmNlJyxcbiAgICAgICAgJ0Vuc3VyZSBtYXRoZW1hdGljYWwgY29uc3RhbnRzIGFuZCBwbGFuZXRhcnkgdmFyaWFibGVzIGFyZSBwcmVzZXJ2ZWQnLFxuICAgICAgICAnVXNlIGB5YXJuIGxpbnQ6ZG9tYWluLWFzdHJvYCBmb3Igc3BlY2lhbGl6ZWQgYXN0cm9sb2dpY2FsIGZpbGUgbGludGluZycsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiByZWNvbW1lbmRhdGlvbnM7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgY29tcHJlaGVuc2l2ZSBkYXNoYm9hcmQgcmVwb3J0XG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGdlbmVyYXRlRGFzaGJvYXJkUmVwb3J0KHJlc3VsdDogVmFsaWRhdGlvblJlc3VsdCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHJlcG9ydFBhdGggPSAnLmtpcm8vbWV0cmljcy9saW50aW5nLWRhc2hib2FyZC1yZXBvcnQubWQnO1xuXG4gICAgY29uc3QgcmVwb3J0ID0gYCMgTGludGluZyBFeGNlbGxlbmNlIERhc2hib2FyZCBSZXBvcnRcblxuR2VuZXJhdGVkOiAke25ldyBEYXRlKCkudG9JU09TdHJpbmcoKX1cblxuIyMg8J+TiiBPdmVyYWxsIFN0YXR1c1xuXG4tICoqVmFsaWRhdGlvbiBTdGF0dXMqKjogJHtyZXN1bHQucGFzc2VkID8gJ+KchSBQQVNTRUQnIDogJ+KdjCBGQUlMRUQnfVxuLSAqKlF1YWxpdHkgU2NvcmUqKjogJHtyZXN1bHQubWV0cmljcy5xdWFsaXR5U2NvcmV9LzEwMFxuLSAqKlRvdGFsIElzc3VlcyoqOiAke3Jlc3VsdC5tZXRyaWNzLnRvdGFsSXNzdWVzfVxuLSAqKlJlZ3Jlc3Npb24gRGV0ZWN0ZWQqKjogJHtyZXN1bHQucmVncmVzc2lvbkFuYWx5c2lzLmRldGVjdGVkID8gJ+KaoO+4jyBZRVMnIDogJ+KchSBOTyd9XG5cbiMjIPCflI0gRGV0YWlsZWQgTWV0cmljc1xuXG4jIyMgRXJyb3IgQnJlYWtkb3duXG4tICoqUGFyc2VyIEVycm9ycyoqOiAke3Jlc3VsdC5tZXRyaWNzLnBhcnNlckVycm9yc30gJHtyZXN1bHQubWV0cmljcy5wYXJzZXJFcnJvcnMgPT09IDAgPyAn4pyFJyA6ICfwn5qoJ31cbi0gKipUeXBlU2NyaXB0IEVycm9ycyoqOiAke3Jlc3VsdC5tZXRyaWNzLmVycm9yc31cbi0gKipFeHBsaWNpdCBBbnkgRXJyb3JzKio6ICR7cmVzdWx0Lm1ldHJpY3MuZXhwbGljaXRBbnlFcnJvcnN9ICR7cmVzdWx0Lm1ldHJpY3MuZXhwbGljaXRBbnlFcnJvcnMgPCAxMDAgPyAn4pyFJyA6ICfimqEnfVxuLSAqKldhcm5pbmdzKio6ICR7cmVzdWx0Lm1ldHJpY3Mud2FybmluZ3N9XG5cbiMjIyBDb2RlIFF1YWxpdHkgSXNzdWVzXG4tICoqSW1wb3J0IE9yZGVyIElzc3VlcyoqOiAke3Jlc3VsdC5tZXRyaWNzLmltcG9ydE9yZGVySXNzdWVzfVxuLSAqKlVudXNlZCBWYXJpYWJsZXMqKjogJHtyZXN1bHQubWV0cmljcy51bnVzZWRWYXJpYWJsZXN9XG4tICoqUmVhY3QgSG9va3MgSXNzdWVzKio6ICR7cmVzdWx0Lm1ldHJpY3MucmVhY3RIb29rc0lzc3Vlc31cbi0gKipDb25zb2xlIFN0YXRlbWVudHMqKjogJHtyZXN1bHQubWV0cmljcy5jb25zb2xlU3RhdGVtZW50c31cblxuIyMjIERvbWFpbi1TcGVjaWZpYyBJc3N1ZXNcbi0gKipBc3Ryb2xvZ2ljYWwgQ2FsY3VsYXRpb25zKio6ICR7cmVzdWx0Lm1ldHJpY3MuZG9tYWluU3BlY2lmaWNJc3N1ZXMuYXN0cm9sb2dpY2FsQ2FsY3VsYXRpb25zfVxuLSAqKkNhbXBhaWduIFN5c3RlbSoqOiAke3Jlc3VsdC5tZXRyaWNzLmRvbWFpblNwZWNpZmljSXNzdWVzLmNhbXBhaWduU3lzdGVtfVxuLSAqKlRlc3QgRmlsZXMqKjogJHtyZXN1bHQubWV0cmljcy5kb21haW5TcGVjaWZpY0lzc3Vlcy50ZXN0RmlsZXN9XG5cbiMjIyBQZXJmb3JtYW5jZSBNZXRyaWNzXG4tICoqTGludGluZyBEdXJhdGlvbioqOiAke3Jlc3VsdC5tZXRyaWNzLnBlcmZvcm1hbmNlTWV0cmljcy5saW50aW5nRHVyYXRpb259bXNcbi0gKipDYWNoZSBIaXQgUmF0ZSoqOiAkeyhyZXN1bHQubWV0cmljcy5wZXJmb3JtYW5jZU1ldHJpY3MuY2FjaGVIaXRSYXRlICogMTAwKS50b0ZpeGVkKDEpfSVcbi0gKipNZW1vcnkgVXNhZ2UqKjogJHtyZXN1bHQubWV0cmljcy5wZXJmb3JtYW5jZU1ldHJpY3MubWVtb3J5VXNhZ2UudG9GaXhlZCgxKX1NQlxuLSAqKkZpbGVzIFByb2Nlc3NlZCoqOiAke3Jlc3VsdC5tZXRyaWNzLnBlcmZvcm1hbmNlTWV0cmljcy5maWxlc1Byb2Nlc3NlZH1cblxuIyMg8J+aqCBBY3RpdmUgQWxlcnRzXG5cbiR7XG4gIHJlc3VsdC5hbGVydHMubGVuZ3RoID09PSAwXG4gICAgPyAnTm8gYWN0aXZlIGFsZXJ0cyDinIUnXG4gICAgOiByZXN1bHQuYWxlcnRzXG4gICAgICAgIC5tYXAoXG4gICAgICAgICAgYWxlcnQgPT5cbiAgICAgICAgICAgIGAtICoqJHthbGVydC5zZXZlcml0eS50b1VwcGVyQ2FzZSgpfSoqOiAke2FsZXJ0Lm1lc3NhZ2V9ICgke2FsZXJ0LmN1cnJlbnRWYWx1ZX0gPiAke2FsZXJ0LnRocmVzaG9sZH0pYCxcbiAgICAgICAgKVxuICAgICAgICAuam9pbignXFxuJylcbn1cblxuIyMg8J+TiCBSZWdyZXNzaW9uIEFuYWx5c2lzXG5cbiR7XG4gIHJlc3VsdC5yZWdyZXNzaW9uQW5hbHlzaXMuZGV0ZWN0ZWRcbiAgICA/IGBcbioqUmVncmVzc2lvbiBEZXRlY3RlZCoqOiAke3Jlc3VsdC5yZWdyZXNzaW9uQW5hbHlzaXMuc2V2ZXJpdHkudG9VcHBlckNhc2UoKX1cbi0gKipBZmZlY3RlZCBNZXRyaWNzKio6ICR7cmVzdWx0LnJlZ3Jlc3Npb25BbmFseXNpcy5hZmZlY3RlZE1ldHJpY3Muam9pbignLCAnKX1cbi0gKipDaGFuZ2UqKjogJHtyZXN1bHQucmVncmVzc2lvbkFuYWx5c2lzLmhpc3RvcmljYWxDb21wYXJpc29uLmNoYW5nZX0gaXNzdWVzICgke3Jlc3VsdC5yZWdyZXNzaW9uQW5hbHlzaXMuaGlzdG9yaWNhbENvbXBhcmlzb24uY2hhbmdlUGVyY2VudGFnZS50b0ZpeGVkKDEpfSUpXG5gXG4gICAgOiAnKipObyBSZWdyZXNzaW9uIERldGVjdGVkKiog4pyFJ1xufVxuXG4jIyDwn5KhIFJlY29tbWVuZGF0aW9uc1xuXG4ke3Jlc3VsdC5yZWNvbW1lbmRhdGlvbnMubWFwKHJlYyA9PiBgLSAke3JlY31gKS5qb2luKCdcXG4nKX1cblxuIyMg8J+OryBOZXh0IEFjdGlvbnNcblxuIyMjIEltbWVkaWF0ZSAoTmV4dCAzMCBNaW51dGVzKVxuMS4gJHtyZXN1bHQubWV0cmljcy5wYXJzZXJFcnJvcnMgPiAwID8gJ/CfmqggKipVUkdFTlQqKjogRml4IHBhcnNlciBlcnJvcnMgaW4gcmVjb21tZW5kYXRpb25FbmdpbmUudHMnIDogJ+KchSBObyBwYXJzZXIgZXJyb3JzJ31cbjIuICR7cmVzdWx0Lm1ldHJpY3MuZXhwbGljaXRBbnlFcnJvcnMgPiAxMDAgPyAn4pqhICoqRGVwbG95IEV4cGxpY2l0IEFueSBDYW1wYWlnbioqOiBBZGRyZXNzIGVycm9yLWxldmVsIGV4cGxpY2l0IGFueSB0eXBlcycgOiAn4pyFIEV4cGxpY2l0IGFueSBlcnJvcnMgdW5kZXIgY29udHJvbCd9XG4zLiAke3Jlc3VsdC5tZXRyaWNzLmltcG9ydE9yZGVySXNzdWVzID4gNTAgPyAn8J+agCAqKkV4ZWN1dGUgSW1wb3J0IE9yZ2FuaXphdGlvbioqOiBBcHBseSBhbHBoYWJldGljYWwgc29ydGluZyBhbmQgZ3JvdXBpbmcnIDogJ+KchSBJbXBvcnQgb3JnYW5pemF0aW9uIGFjY2VwdGFibGUnfVxuXG4jIyMgTmV4dCAyIEhvdXJzXG4xLiAqKkVuaGFuY2VkIFVudXNlZCBWYXJpYWJsZSBDbGVhbnVwKio6IEFwcGx5IGRvbWFpbi1zcGVjaWZpYyB2YXJpYWJsZSBwYXR0ZXJuc1xuMi4gKipSZWFjdCBIb29rcyBFbmhhbmNlbWVudCoqOiBJbXBsZW1lbnQgZW5oYW5jZWQgZGVwZW5kZW5jeSBhbmFseXNpc1xuMy4gKipQZXJmb3JtYW5jZSBPcHRpbWl6YXRpb24qKjogRW5hYmxlIGNhY2hpbmcgYW5kIHBhcmFsbGVsIHByb2Nlc3NpbmdcblxuIyMjIFN1Y2Nlc3MgTWV0cmljcyBUYXJnZXRcbi0gKipUYXJnZXQqKjogJHtyZXN1bHQubWV0cmljcy50b3RhbElzc3Vlc30g4oaSIDwyLDAwMCB0b3RhbCBpc3N1ZXMgKCR7TWF0aC5yb3VuZCgoMSAtIDIwMDAgLyBNYXRoLm1heChyZXN1bHQubWV0cmljcy50b3RhbElzc3VlcywgMSkpICogMTAwKX0lIHJlZHVjdGlvbilcbi0gKipDcml0aWNhbCBQYXRoKio6IFBhcnNlciBlcnJvcnMg4oaSIEV4cGxpY2l0IGFueSBlcnJvcnMg4oaSIEltcG9ydCBvcmdhbml6YXRpb25cbi0gKipUaW1lbGluZSoqOiAzLTQgaG91cnMgZm9yIG1ham9yIHJlZHVjdGlvbiB3aXRoIGVuaGFuY2VkIHNhZmV0eSBwcm90b2NvbHNcbi0gKipRdWFsaXR5IEdhdGUqKjogWmVybyBwYXJzZXIgZXJyb3JzLCA8MTAwIGV4cGxpY2l0IGFueSBlcnJvcnMsIGVuaGFuY2VkIGltcG9ydCBvcmdhbml6YXRpb25cblxuLS0tXG5cbipSZXBvcnQgZ2VuZXJhdGVkIGJ5IExpbnRpbmcgRXhjZWxsZW5jZSBEYXNoYm9hcmQgdjEuMCpcbipFbmhhbmNlZCBDb25maWd1cmF0aW9uOiBSZWFjdCAxOSwgVHlwZVNjcmlwdCBzdHJpY3QgcnVsZXMsIGRvbWFpbi1zcGVjaWZpYyBjb25maWd1cmF0aW9ucypcbmA7XG5cbiAgICB3cml0ZUZpbGVTeW5jKHJlcG9ydFBhdGgsIHJlcG9ydCwgJ3V0ZjgnKTtcbiAgICBjb25zb2xlLmxvZyhg8J+TiiBEYXNoYm9hcmQgcmVwb3J0IGdlbmVyYXRlZDogJHtyZXBvcnRQYXRofWApO1xuICB9XG5cbiAgLy8gSGVscGVyIG1ldGhvZHNcbiAgcHJpdmF0ZSBlbnN1cmVEaXJlY3Rvcmllc0V4aXN0KCk6IHZvaWQge1xuICAgIGNvbnN0IGRpcnMgPSBbJy5raXJvL21ldHJpY3MnXTtcbiAgICBmb3IgKGNvbnN0IGRpciBvZiBkaXJzKSB7XG4gICAgICBpZiAoIWV4aXN0c1N5bmMoZGlyKSkge1xuICAgICAgICBleGVjU3luYyhgbWtkaXIgLXAgJHtkaXJ9YCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBpbml0aWFsaXplQ29uZmlndXJhdGlvbigpOiB2b2lkIHtcbiAgICBpZiAoIWV4aXN0c1N5bmModGhpcy5jb25maWdGaWxlKSkge1xuICAgICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgICB0aHJlc2hvbGRzOiB0aGlzLmRlZmF1bHRUaHJlc2hvbGRzLFxuICAgICAgICBhbGVydGluZ0VuYWJsZWQ6IHRydWUsXG4gICAgICAgIHJlZ3Jlc3Npb25EZXRlY3Rpb25FbmFibGVkOiB0cnVlLFxuICAgICAgICBwZXJmb3JtYW5jZU1vbml0b3JpbmdFbmFibGVkOiB0cnVlLFxuICAgICAgICBkb21haW5TcGVjaWZpY1RyYWNraW5nRW5hYmxlZDogdHJ1ZSxcbiAgICAgIH07XG4gICAgICB3cml0ZUZpbGVTeW5jKHRoaXMuY29uZmlnRmlsZSwgSlNPTi5zdHJpbmdpZnkoY29uZmlnLCBudWxsLCAyKSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBsb2FkVGhyZXNob2xkcygpOiBBbGVydFRocmVzaG9sZFtdIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgY29uZmlnID0gSlNPTi5wYXJzZShyZWFkRmlsZVN5bmModGhpcy5jb25maWdGaWxlLCAndXRmOCcpKTtcbiAgICAgIHJldHVybiBjb25maWcudGhyZXNob2xkcyB8fCB0aGlzLmRlZmF1bHRUaHJlc2hvbGRzO1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdFRocmVzaG9sZHM7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBsb2FkTWV0cmljc0hpc3RvcnkoKTogTGludGluZ01ldHJpY3NbXSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChleGlzdHNTeW5jKHRoaXMubWV0cmljc0hpc3RvcnlGaWxlKSkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShyZWFkRmlsZVN5bmModGhpcy5tZXRyaWNzSGlzdG9yeUZpbGUsICd1dGY4JykpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0Vycm9yIGxvYWRpbmcgbWV0cmljcyBoaXN0b3J5OicsIGVycm9yKTtcbiAgICB9XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzdG9yZU1ldHJpY3MobWV0cmljczogTGludGluZ01ldHJpY3MpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBoaXN0b3J5ID0gdGhpcy5sb2FkTWV0cmljc0hpc3RvcnkoKTtcbiAgICBoaXN0b3J5LnB1c2gobWV0cmljcyk7XG5cbiAgICAvLyBLZWVwIG9ubHkgbGFzdCAxMDAgZW50cmllc1xuICAgIGlmIChoaXN0b3J5Lmxlbmd0aCA+IDEwMCkge1xuICAgICAgaGlzdG9yeS5zcGxpY2UoMCwgaGlzdG9yeS5sZW5ndGggLSAxMDApO1xuICAgIH1cblxuICAgIHdyaXRlRmlsZVN5bmModGhpcy5tZXRyaWNzSGlzdG9yeUZpbGUsIEpTT04uc3RyaW5naWZ5KGhpc3RvcnksIG51bGwsIDIpKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc3RvcmVBbGVydHMoYWxlcnRzOiBBbGVydFtdKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgd3JpdGVGaWxlU3luYyh0aGlzLmFsZXJ0c0ZpbGUsIEpTT04uc3RyaW5naWZ5KGFsZXJ0cywgbnVsbCwgMikpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRNZXRyaWNWYWx1ZShtZXRyaWNzOiBMaW50aW5nTWV0cmljcywgbWV0cmljUGF0aDogc3RyaW5nKTogbnVtYmVyIHtcbiAgICBjb25zdCBwYXJ0cyA9IG1ldHJpY1BhdGguc3BsaXQoJy4nKTtcbiAgICBsZXQgdmFsdWU6IGFueSA9IG1ldHJpY3M7XG5cbiAgICBmb3IgKGNvbnN0IHBhcnQgb2YgcGFydHMpIHtcbiAgICAgIHZhbHVlID0gdmFsdWU/LltwYXJ0XTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyA/IHZhbHVlIDogMDtcbiAgfVxuXG4gIHByaXZhdGUgc2hvdWxkVHJpZ2dlckFsZXJ0KGN1cnJlbnRWYWx1ZTogbnVtYmVyLCB0aHJlc2hvbGQ6IEFsZXJ0VGhyZXNob2xkKTogYm9vbGVhbiB7XG4gICAgaWYgKHRocmVzaG9sZC5tZXRyaWMgPT09ICdxdWFsaXR5U2NvcmUnKSB7XG4gICAgICByZXR1cm4gY3VycmVudFZhbHVlIDwgdGhyZXNob2xkLnRocmVzaG9sZDsgLy8gUXVhbGl0eSBzY29yZSBzaG91bGQgYmUgYWJvdmUgdGhyZXNob2xkXG4gICAgfVxuICAgIHJldHVybiBjdXJyZW50VmFsdWUgPiB0aHJlc2hvbGQudGhyZXNob2xkOyAvLyBPdGhlciBtZXRyaWNzIHNob3VsZCBiZSBiZWxvdyB0aHJlc2hvbGRcbiAgfVxuXG4gIHByaXZhdGUgY2FsY3VsYXRlUmVncmVzc2lvblNldmVyaXR5KFxuICAgIGFmZmVjdGVkTWV0cmljczogc3RyaW5nW10sXG4gICAgY3VycmVudDogTGludGluZ01ldHJpY3MsXG4gICAgcHJldmlvdXM6IExpbnRpbmdNZXRyaWNzLFxuICApOiAnbWlub3InIHwgJ21vZGVyYXRlJyB8ICdtYWpvcicgfCAnY3JpdGljYWwnIHtcbiAgICBpZiAoYWZmZWN0ZWRNZXRyaWNzLmluY2x1ZGVzKCdwYXJzZXJFcnJvcnMnKSAmJiBjdXJyZW50LnBhcnNlckVycm9ycyA+IHByZXZpb3VzLnBhcnNlckVycm9ycykge1xuICAgICAgcmV0dXJuICdjcml0aWNhbCc7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgYWZmZWN0ZWRNZXRyaWNzLmluY2x1ZGVzKCdleHBsaWNpdEFueUVycm9ycycpICYmXG4gICAgICBjdXJyZW50LmV4cGxpY2l0QW55RXJyb3JzID4gcHJldmlvdXMuZXhwbGljaXRBbnlFcnJvcnMgKyA1MFxuICAgICkge1xuICAgICAgcmV0dXJuICdtYWpvcic7XG4gICAgfVxuXG4gICAgaWYgKGFmZmVjdGVkTWV0cmljcy5sZW5ndGggPiAyKSB7XG4gICAgICByZXR1cm4gJ21vZGVyYXRlJztcbiAgICB9XG5cbiAgICByZXR1cm4gJ21pbm9yJztcbiAgfVxuXG4gIHByaXZhdGUgZ2VuZXJhdGVSZWdyZXNzaW9uUmVjb21tZW5kYXRpb25zKGFmZmVjdGVkTWV0cmljczogc3RyaW5nW10pOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgcmVjb21tZW5kYXRpb25zOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgaWYgKGFmZmVjdGVkTWV0cmljcy5pbmNsdWRlcygncGFyc2VyRXJyb3JzJykpIHtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKCdJbW1lZGlhdGVseSBpbnZlc3RpZ2F0ZSBhbmQgZml4IG5ldyBwYXJzZXIgZXJyb3JzJyk7XG4gICAgfVxuXG4gICAgaWYgKGFmZmVjdGVkTWV0cmljcy5pbmNsdWRlcygnZXhwbGljaXRBbnlFcnJvcnMnKSkge1xuICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goJ1JldmlldyByZWNlbnQgY2hhbmdlcyB0aGF0IGludHJvZHVjZWQgZXhwbGljaXQgYW55IHR5cGVzJyk7XG4gICAgfVxuXG4gICAgaWYgKGFmZmVjdGVkTWV0cmljcy5pbmNsdWRlcygndG90YWxJc3N1ZXMnKSkge1xuICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goJ1J1biBjb21wcmVoZW5zaXZlIGxpbnRpbmcgdmFsaWRhdGlvbiB0byBpZGVudGlmeSBuZXcgaXNzdWVzJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlY29tbWVuZGF0aW9ucztcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgY2FsY3VsYXRlQ2FjaGVIaXRSYXRlKCk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIENoZWNrIGlmIEVTTGludCBjYWNoZSBleGlzdHMgYW5kIGNhbGN1bGF0ZSBoaXQgcmF0ZVxuICAgICAgaWYgKGV4aXN0c1N5bmMoJy5lc2xpbnRjYWNoZScpKSB7XG4gICAgICAgIC8vIFNpbXBsaWZpZWQgY2FjaGUgaGl0IHJhdGUgY2FsY3VsYXRpb25cbiAgICAgICAgcmV0dXJuIDAuNzU7IC8vIEFzc3VtZSA3NSUgY2FjaGUgaGl0IHJhdGUgZm9yIG5vd1xuICAgICAgfVxuICAgIH0gY2F0Y2gge1xuICAgICAgLy8gSWdub3JlIGVycm9yc1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHByaXZhdGUgaXNBc3Ryb2xvZ2ljYWxGaWxlKGZpbGVQYXRoOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKFxuICAgICAgZmlsZVBhdGguaW5jbHVkZXMoJy9jYWxjdWxhdGlvbnMvJykgfHxcbiAgICAgIGZpbGVQYXRoLmluY2x1ZGVzKCcvZGF0YS9wbGFuZXRzLycpIHx8XG4gICAgICBmaWxlUGF0aC5pbmNsdWRlcygncmVsaWFibGVBc3Ryb25vbXknKSB8fFxuICAgICAgZmlsZVBhdGguaW5jbHVkZXMoJy9hc3Ryb2xvZ3kvJylcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBpc0NhbXBhaWduRmlsZShmaWxlUGF0aDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgIGZpbGVQYXRoLmluY2x1ZGVzKCcvY2FtcGFpZ24vJykgfHxcbiAgICAgIGZpbGVQYXRoLmluY2x1ZGVzKCdDYW1wYWlnbicpIHx8XG4gICAgICBmaWxlUGF0aC5pbmNsdWRlcygnUHJvZ3Jlc3MnKVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGlzVGVzdEZpbGUoZmlsZVBhdGg6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoXG4gICAgICBmaWxlUGF0aC5pbmNsdWRlcygnLnRlc3QuJykgfHwgZmlsZVBhdGguaW5jbHVkZXMoJy5zcGVjLicpIHx8IGZpbGVQYXRoLmluY2x1ZGVzKCdfX3Rlc3RzX18nKVxuICAgICk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==