{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/unintentional-any-elimination/__tests__/ProgressMonitoringSystem.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/unintentional-any-elimination/__tests__/ProgressMonitoringSystem.test.ts"],"sourcesContent":["import { execSync } from 'child_process';\nimport * as fs from 'fs';\nimport { AnalysisTools } from '../AnalysisTools';\nimport { Alert, DashboardData, ProgressMonitoringSystem } from '../ProgressMonitoringSystem';\n\n// Mock dependencies\njest.mock('../AnalysisTools');\njest.mock('child_process');\njest.mock('fs');\n\nconst mockAnalysisTools = AnalysisTools as jest.MockedClass<typeof AnalysisTools>;\nconst mockExecSync = execSync as jest.MockedFunction<typeof execSync>;\nconst mockFs = fs as jest.Mocked<typeof fs>;\n\ndescribe('ProgressMonitoringSystem', () => {\n  let monitoringSystem: ProgressMonitoringSystem;\n  let mockAnalysisToolsInstance: jest.Mocked<AnalysisTools>;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Mock file system operations\n    mockFs.existsSync.mockReturnValue(false);\n    mockFs.readFileSync.mockReturnValue('[]');\n    mockFs.writeFileSync.mockImplementation(() => {});\n    mockFs.mkdirSync.mockImplementation(() => '');\n\n    // Mock AnalysisTools\n    mockAnalysisToolsInstance = {\n      generateComprehensiveReport: jest.fn(),\n      analyzeDomainDistribution: jest.fn(),\n      generateClassificationAccuracyReport: jest.fn(),\n      generateSuccessRateAnalysis: jest.fn(),\n      generateManualReviewRecommendations: jest.fn()\n    } as any;\n\n    mockAnalysisTools.mockImplementation(() => mockAnalysisToolsInstance);\n\n    // Mock successful TypeScript compilation by default\n    mockExecSync.mockReturnValue('');\n\n    monitoringSystem = new ProgressMonitoringSystem();\n  });\n\n  afterEach(() => {\n    monitoringSystem.stopMonitoring();\n  });\n\n  describe('constructor', () => {\n    it('should initialize with default alert thresholds', () => {\n      const thresholds = monitoringSystem.getAlertThresholds();\n\n      expect(thresholds.successRateThreshold).toBe(70);\n      expect(thresholds.buildFailureThreshold).toBe(3);\n      expect(thresholds.classificationAccuracyThreshold).toBe(80);\n      expect(thresholds.safetyEventThreshold).toBe(5);\n      expect(thresholds.progressStallThreshold).toBe(24);\n    });\n\n    it('should initialize with custom alert thresholds', () => {\n      const customThresholds = {\n        successRateThreshold: 80,\n        buildFailureThreshold: 2\n      };\n\n      const customMonitoringSystem = new ProgressMonitoringSystem(customThresholds);\n      const thresholds = customMonitoringSystem.getAlertThresholds();\n\n      expect(thresholds.successRateThreshold).toBe(80);\n      expect(thresholds.buildFailureThreshold).toBe(2);\n      expect(thresholds.classificationAccuracyThreshold).toBe(80); // Default\n    });\n  });\n\n  describe('monitoring lifecycle', () => {\n    it('should start monitoring with specified interval', (done) => {\n      const intervalMinutes = 1;\n\n      monitoringSystem.on('monitoring_started', (data) => {\n        expect(data.intervalMinutes).toBe(intervalMinutes);\n        done();\n      });\n\n      monitoringSystem.startMonitoring(intervalMinutes);\n      expect(monitoringSystem['isMonitoring']).toBe(true);\n    });\n\n    it('should not start monitoring if already running', () => {\n      monitoringSystem.startMonitoring();\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n\n      monitoringSystem.startMonitoring();\n\n      expect(consoleSpy).toHaveBeenCalledWith('Progress monitoring is already running');\n      consoleSpy.mockRestore();\n    });\n\n    it('should stop monitoring', (done) => {\n      monitoringSystem.on('monitoring_stopped', () => {\n        expect(monitoringSystem['isMonitoring']).toBe(false);\n        done();\n      });\n\n      monitoringSystem.startMonitoring();\n      monitoringSystem.stopMonitoring();\n    });\n\n    it('should not stop monitoring if not running', () => {\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n\n      monitoringSystem.stopMonitoring();\n\n      expect(consoleSpy).toHaveBeenCalledWith('Progress monitoring is not running');\n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('progress metrics', () => {\n    beforeEach(() => {\n      // Mock comprehensive report\n      mockAnalysisToolsInstance.generateComprehensiveReport.mockResolvedValue({\n        id: 'test-report',\n        timestamp: new Date(),\n        domainDistribution: {\n          totalAnyTypes: 1000,\n          intentionalVsUnintentional: {\n            intentional: { count: 300, percentage: 30 },\n            unintentional: { count: 700, percentage: 70 }\n          },\n          byDomain: [],\n          byCategory: [],\n          analysisDate: new Date()\n        },\n        accuracyReport: {\n          overallAccuracy: 85,\n          averageConfidence: 0.8,\n          sampleSize: 100,\n          categoryAccuracy: [],\n          confidenceDistribution: [],\n          reportDate: new Date()\n        },\n        successRateAnalysis: {\n          currentSuccessRate: 75,\n          targetSuccessRate: 85,\n          improvementNeeded: 10,\n          categorySuccessRates: [],\n          trendingData: {\n            date: new Date(),\n            successRate: 75,\n            totalAnyTypes: 1000,\n            unintentionalCount: 700,\n            classificationAccuracy: 85\n          },\n          projectedCompletion: new Date(),\n          recommendations: [],\n          analysisDate: new Date()\n        },\n        manualReviewRecommendations: [],\n        summary: {\n          totalAnyTypes: 1000,\n          unintentionalCount: 700,\n          classificationAccuracy: 85,\n          currentSuccessRate: 75,\n          manualReviewCases: 50,\n          topDomain: 'utility' as any,\n          topCategory: 'function_param' as any\n        }\n      } as any);\n    });\n\n    it('should get current progress metrics', async () => {\n      const progress = await monitoringSystem.getProgressMetrics();\n\n      expect(progress.totalAnyTypes).toBe(1000);\n      expect(progress.classifiedIntentional).toBe(300);\n      expect(progress.classifiedUnintentional).toBe(700);\n      expect(progress.averageSuccessRate).toBe(75);\n      expect(progress.targetReductionPercentage).toBe(20);\n      expect(progress.buildStable).toBe(true); // Default mock\n      expect(progress.lastUpdate).toBeInstanceOf(Date);\n    });\n\n    it('should handle build failures in progress metrics', async () => {\n      // Mock TypeScript compilation failure\n      mockExecSync.mockImplementation(() => {\n        throw new Error('Compilation failed');\n      });\n\n      const progress = await monitoringSystem.getProgressMetrics();\n\n      expect(progress.buildStable).toBe(false);\n    });\n  });\n\n  describe('build stability monitoring', () => {\n    it('should detect stable builds', async () => {\n      mockExecSync.mockReturnValue(''); // Successful compilation\n\n      await monitoringSystem.monitorBuildStability();\n\n      const history = monitoringSystem.getBuildStabilityHistory(1);\n      expect(history[0].isStable).toBe(true);\n      expect(history[0].errorCount).toBe(0);\n      expect(history[0].buildTime).toBeGreaterThanOrEqual(0);\n    });\n\n    it('should detect build failures', async () => {\n      const errorOutput = 'error TS2304: Cannot find name\\nerror TS2345: Argument type';\n      mockExecSync.mockImplementation(() => {\n        const error = new Error('Compilation failed');\n        (error as any).stdout = errorOutput;\n        throw error;\n      });\n\n      await monitoringSystem.monitorBuildStability();\n\n      const history = monitoringSystem.getBuildStabilityHistory(1);\n      expect(history[0].isStable).toBe(false);\n      expect(history[0].errorCount).toBe(2); // Two TS errors\n      expect(history[0].errorMessage).toContain('error TS2304');\n    });\n\n    it('should emit alert for build failures', (done) => {\n      mockExecSync.mockImplementation(() => {\n        throw new Error('Build failed');\n      });\n\n      monitoringSystem.on('alert', (alert: Alert) => {\n        if (alert.type === 'build_failure') {\n          expect(alert.severity).toBe('high');\n          expect(alert.message).toContain('Build failure detected');\n          done();\n        }\n      });\n\n      monitoringSystem.monitorBuildStability();\n    });\n\n    it('should emit alert for consecutive build failures', async () => {\n      mockExecSync.mockImplementation(() => {\n        throw new Error('Build failed');\n      });\n\n      const alertPromise = new Promise<Alert>((resolve) => {\n        monitoringSystem.on('alert', (alert: Alert) => {\n          if (alert.type === 'consecutive_build_failures') {\n            resolve(alert);\n          }\n        });\n      });\n\n      // Trigger multiple build failures\n      for (let i = 0; i < 3; i++) {\n        await monitoringSystem.monitorBuildStability();\n      }\n\n      const alert = await alertPromise;\n      expect(alert.severity).toBe('critical');\n      expect(alert.message).toContain('consecutive build failures');\n    });\n  });\n\n  describe('alert system', () => {\n    beforeEach(() => {\n      // Mock analysis report for alert checking\n      mockAnalysisToolsInstance.generateComprehensiveReport.mockResolvedValue({\n        domainDistribution: {\n          totalAnyTypes: 1000,\n          intentionalVsUnintentional: {\n            intentional: { count: 300, percentage: 30 },\n            unintentional: { count: 700, percentage: 70 }\n          }\n        },\n        summary: { currentSuccessRate: 60 }, // Below threshold\n        accuracyReport: { overallAccuracy: 70 } // Below threshold\n      } as any);\n    });\n\n    it('should emit low success rate alert', async () => {\n      const alertPromise = new Promise<Alert>((resolve) => {\n        monitoringSystem.on('alert', (alert: Alert) => {\n          if (alert.type === 'low_success_rate') {\n            resolve(alert);\n          }\n        });\n      });\n\n      await monitoringSystem.checkAlertConditions();\n\n      const alert = await alertPromise;\n      expect(alert.severity).toBe('medium');\n      expect(alert.message).toContain('Success rate');\n      expect(alert.data.currentRate).toBe(60);\n      expect(alert.data.threshold).toBe(70);\n    });\n\n    it('should not emit duplicate alerts within one hour', async () => {\n      let alertCount = 0;\n\n      monitoringSystem.on('alert', (alert: Alert) => {\n        if (alert.type === 'low_success_rate') {\n          alertCount++;\n        }\n      });\n\n      // Check conditions twice\n      await monitoringSystem.checkAlertConditions();\n      await monitoringSystem.checkAlertConditions();\n\n      expect(alertCount).toBe(1); // Should only emit once\n    });\n\n    it('should handle safety protocol activation', () => {\n      const safetyEvent = {\n        type: 'corruption_detected',\n        severity: 'critical' as const,\n        description: 'File corruption detected',\n        action: 'rollback_initiated',\n        timestamp: new Date(),\n        affectedFiles: ['test.ts']\n      };\n\n      const alertPromise = new Promise<Alert>((resolve) => {\n        monitoringSystem.on('alert', (alert: Alert) => {\n          if (alert.type === 'safety_protocol_activation') {\n            resolve(alert);\n          }\n        });\n      });\n\n      const criticalEventPromise = new Promise((resolve) => {\n        monitoringSystem.on('critical_safety_event', resolve);\n      });\n\n      monitoringSystem.handleSafetyProtocolActivation(safetyEvent);\n\n      return Promise.all([alertPromise, criticalEventPromise]).then(([alert]) => {\n        expect(alert.severity).toBe('critical');\n        expect(alert.message).toContain('Safety protocol activated');\n        expect(alert.data.safetyEvent).toEqual(safetyEvent);\n      });\n    });\n\n    it('should update alert thresholds', () => {\n      const newThresholds = {\n        successRateThreshold: 80,\n        buildFailureThreshold: 2\n      };\n\n      const updatePromise = new Promise((resolve) => {\n        monitoringSystem.on('alert_thresholds_updated', resolve);\n      });\n\n      monitoringSystem.updateAlertThresholds(newThresholds);\n\n      const thresholds = monitoringSystem.getAlertThresholds();\n      expect(thresholds.successRateThreshold).toBe(80);\n      expect(thresholds.buildFailureThreshold).toBe(2);\n\n      return updatePromise;\n    });\n  });\n\n  describe('dashboard data', () => {\n    beforeEach(() => {\n      mockAnalysisToolsInstance.generateComprehensiveReport.mockResolvedValue({\n        id: 'test-report',\n        timestamp: new Date(),\n        domainDistribution: {\n          totalAnyTypes: 1000,\n          intentionalVsUnintentional: {\n            intentional: { count: 300, percentage: 30 },\n            unintentional: { count: 700, percentage: 70 }\n          }\n        },\n        accuracyReport: { overallAccuracy: 85 },\n        summary: { currentSuccessRate: 75 }\n      } as any);\n    });\n\n    it('should update dashboard data', async () => {\n      const updatePromise = new Promise<DashboardData>((resolve) => {\n        monitoringSystem.on('dashboard_updated', resolve);\n      });\n\n      await monitoringSystem['updateDashboard']();\n\n      const dashboardData = await updatePromise;\n      expect(dashboardData.lastUpdate).toBeInstanceOf(Date);\n      expect(dashboardData.analysisReport).toBeDefined();\n      expect(dashboardData.progressMetrics).toBeDefined();\n      expect(dashboardData.buildStability).toBeDefined();\n      expect(dashboardData.alertSummary).toBeDefined();\n      expect(dashboardData.trendingData).toBeInstanceOf(Array);\n      expect(dashboardData.systemHealth).toBeDefined();\n    });\n\n    it('should get current dashboard data', async () => {\n      await monitoringSystem['updateDashboard']();\n\n      const dashboardData = monitoringSystem.getDashboardData();\n      expect(dashboardData).toBeDefined();\n      expect(dashboardData!.lastUpdate).toBeInstanceOf(Date);\n    });\n\n    it('should calculate system health', async () => {\n      await monitoringSystem['updateDashboard']();\n\n      const dashboardData = monitoringSystem.getDashboardData();\n      const systemHealth = dashboardData!.systemHealth;\n\n      expect(systemHealth.score).toBeGreaterThanOrEqual(0);\n      expect(systemHealth.score).toBeLessThanOrEqual(100);\n      expect(['healthy', 'warning', 'critical']).toContain(systemHealth.status);\n      expect(systemHealth.lastCheck).toBeInstanceOf(Date);\n      expect(systemHealth.issues).toBeInstanceOf(Array);\n    });\n  });\n\n  describe('alert history management', () => {\n    it('should maintain alert history', async () => {\n      // Trigger an alert\n      mockAnalysisToolsInstance.generateComprehensiveReport.mockResolvedValue({\n        domainDistribution: {\n          totalAnyTypes: 1000,\n          intentionalVsUnintentional: {\n            intentional: { count: 300, percentage: 30 },\n            unintentional: { count: 700, percentage: 70 }\n          }\n        },\n        summary: { currentSuccessRate: 60 }\n      } as any);\n\n      await monitoringSystem.checkAlertConditions();\n\n      const history = monitoringSystem.getAlertHistory();\n      expect(history.length).toBeGreaterThan(0);\n      expect(history[0].type).toBe('low_success_rate');\n    });\n\n    it('should limit alert history', () => {\n      const history = monitoringSystem.getAlertHistory(5);\n      expect(history.length).toBeLessThanOrEqual(5);\n    });\n\n    it('should clear alert history', () => {\n      const clearPromise = new Promise((resolve) => {\n        monitoringSystem.on('alert_history_cleared', resolve);\n      });\n\n      monitoringSystem.clearAlertHistory();\n\n      const history = monitoringSystem.getAlertHistory();\n      expect(history.length).toBe(0);\n\n      return clearPromise;\n    });\n  });\n\n  describe('error handling', () => {\n    it('should handle dashboard update errors', async () => {\n      mockAnalysisToolsInstance.generateComprehensiveReport.mockRejectedValue(\n        new Error('Analysis failed')\n      );\n\n      await expect(monitoringSystem['updateDashboard']()).rejects.toThrow('Analysis failed');\n    });\n\n    it('should handle monitoring errors gracefully', async () => {\n      mockAnalysisToolsInstance.generateComprehensiveReport.mockRejectedValue(\n        new Error('Monitoring error')\n      );\n\n      // The system should handle errors gracefully and return default metrics\n      const progress = await monitoringSystem.getProgressMetrics();\n\n      expect(progress.totalAnyTypes).toBe(0);\n      expect(progress.averageSuccessRate).toBe(0);\n      expect(progress.buildStable).toBe(true); // Default mock\n    });\n\n    it('should handle file system errors gracefully', () => {\n      mockFs.writeFileSync.mockImplementation(() => {\n        throw new Error('File system error');\n      });\n\n      // Should not throw error\n      expect(() => monitoringSystem['saveAlertHistory']()).not.toThrow();\n    });\n  });\n\n  describe('integration', () => {\n    it('should integrate with analysis tools', async () => {\n      // Mock the comprehensive report properly\n      mockAnalysisToolsInstance.generateComprehensiveReport.mockResolvedValue({\n        domainDistribution: {\n          totalAnyTypes: 1000,\n          intentionalVsUnintentional: {\n            intentional: { count: 300, percentage: 30 },\n            unintentional: { count: 700, percentage: 70 }\n          }\n        },\n        summary: { currentSuccessRate: 75, totalAnyTypes: 1000 }\n      } as any);\n\n      const progress = await monitoringSystem.getProgressMetrics();\n\n      expect(mockAnalysisToolsInstance.generateComprehensiveReport).toHaveBeenCalled();\n      expect(progress).toBeDefined();\n    });\n\n    it('should persist data across restarts', () => {\n      // Mock existing history file\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readFileSync.mockReturnValue(JSON.stringify([\n        {\n          type: 'low_success_rate',\n          severity: 'medium',\n          message: 'Test alert',\n          timestamp: new Date().toISOString()\n        }\n      ]));\n\n      const newMonitoringSystem = new ProgressMonitoringSystem();\n      const history = newMonitoringSystem.getAlertHistory();\n\n      expect(history.length).toBe(1);\n      expect(history[0].type).toBe('low_success_rate');\n    });\n  });\n});\n"],"version":3}