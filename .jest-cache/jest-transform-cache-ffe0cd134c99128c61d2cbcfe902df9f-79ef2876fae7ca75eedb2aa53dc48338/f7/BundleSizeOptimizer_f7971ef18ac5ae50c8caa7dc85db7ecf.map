{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/BundleSizeOptimizer.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/BundleSizeOptimizer.ts"],"sourcesContent":["/**\n * Bundle Size Optimization System\n * Perfect Codebase Campaign - Phase 4 Implementation\n * \n * Implements comprehensive bundle size optimization with:\n * - Bundle analysis system maintaining 420kB target\n * - Lazy loading validation for selective data fetching\n * - Bundle optimization alerts when size exceeds targets\n */\n\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nexport interface BundleAnalysis {\n  totalSize: number;\n  compressedSize: number;\n  chunks: BundleChunk[];\n  assets: BundleAsset[];\n  dependencies: DependencyAnalysis[];\n  recommendations: string[];\n}\n\nexport interface BundleChunk {\n  name: string;\n  size: number;\n  compressedSize: number;\n  modules: string[];\n  isLazyLoaded: boolean;\n}\n\nexport interface BundleAsset {\n  name: string;\n  size: number;\n  type: 'js' | 'css' | 'image' | 'font' | 'other';\n  optimized: boolean;\n}\n\nexport interface DependencyAnalysis {\n  name: string;\n  size: number;\n  version: string;\n  usage: 'critical' | 'important' | 'optional';\n  alternatives: string[];\n}\n\nexport interface LazyLoadingValidation {\n  componentsAnalyzed: number;\n  lazyLoadedComponents: number;\n  potentialLazyComponents: string[];\n  dataFetchingOptimizations: string[];\n  score: number;\n}\n\nexport interface BundleOptimizationAlert {\n  type: 'size_exceeded' | 'chunk_too_large' | 'unused_dependency' | 'lazy_loading_opportunity';\n  severity: 'warning' | 'critical';\n  message: string;\n  currentValue: number;\n  targetValue: number;\n  recommendations: string[];\n  timestamp: Date;\n}\n\nexport interface BundleOptimizationReport {\n  timestamp: Date;\n  analysis: BundleAnalysis;\n  lazyLoadingValidation: LazyLoadingValidation;\n  alerts: BundleOptimizationAlert[];\n  overallScore: number;\n  targetCompliance: boolean;\n  recommendations: string[];\n}\n\nexport class BundleSizeOptimizer {\n  private readonly TARGET_BUNDLE_SIZE = 420; // kB\n  private readonly TARGET_CHUNK_SIZE = 100; // kB\n  private readonly COMPRESSION_RATIO = 0.7; // Typical gzip compression\n  private alerts: BundleOptimizationAlert[] = [];\n  private analysisHistory: BundleAnalysis[] = [];\n\n  constructor() {}\n\n  /**\n   * Analyze bundle size and composition\n   */\n  async analyzeBundleSize(): Promise<BundleAnalysis> {\n    try {\n      console.log('📦 Analyzing bundle size...');\n      \n      // Get bundle information from build output\n      const bundleInfo = await this.getBundleInformation();\n      const chunks = await this.analyzeChunks();\n      const assets = await this.analyzeAssets();\n      const dependencies = await this.analyzeDependencies();\n      \n      const totalSize = bundleInfo.totalSize;\n      const compressedSize = Math.round(totalSize * this.COMPRESSION_RATIO);\n      \n      // Generate recommendations based on analysis\n      const recommendations = this.generateBundleRecommendations(\n        totalSize,\n        chunks,\n        assets,\n        dependencies\n      );\n      \n      const analysis: BundleAnalysis = {\n        totalSize,\n        compressedSize,\n        chunks,\n        assets,\n        dependencies,\n        recommendations\n      };\n      \n      // Store in history\n      this.analysisHistory.push(analysis);\n      if (this.analysisHistory.length > 20) {\n        this.analysisHistory = this.analysisHistory.slice(-10);\n      }\n      \n      // Check for alerts\n      await this.checkBundleSizeAlerts(analysis);\n      \n      console.log(`📦 Bundle analysis complete: ${totalSize}kB total, ${compressedSize}kB compressed`);\n      return analysis;\n\n    } catch (error) {\n      console.warn(`⚠️  Bundle analysis failed: ${error.message}`);\n      \n      // Return fallback analysis\n      return {\n        totalSize: 0,\n        compressedSize: 0,\n        chunks: [],\n        assets: [],\n        dependencies: [],\n        recommendations: ['Bundle analysis failed - check build configuration']\n      };\n    }\n  }\n\n  /**\n   * Get bundle information from build system\n   */\n  private async getBundleInformation(): Promise<{ totalSize: number }> {\n    try {\n      // Check for Next.js build output\n      if (fs.existsSync('.next')) {\n        return await this.getNextJsBundleInfo();\n      }\n      \n      // Check for other build outputs\n      const buildDirs = ['dist', 'build', 'out'];\n      for (const dir of buildDirs) {\n        if (fs.existsSync(dir)) {\n          return await this.getGenericBundleInfo(dir);\n        }\n      }\n      \n      // Fallback: estimate from source code\n      return await this.estimateBundleSize();\n\n    } catch (error) {\n      throw new Error(`Failed to get bundle information: ${error.message}`);\n    }\n  }\n\n  /**\n   * Get Next.js specific bundle information\n   */\n  private async getNextJsBundleInfo(): Promise<{ totalSize: number }> {\n    try {\n      // Run Next.js build analyzer if available\n      if (fs.existsSync('package.json')) {\n        const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));\n        if (packageJson.dependencies?.['@next/bundle-analyzer']) {\n          // Use bundle analyzer\n          const output = execSync('yarn analyze 2>/dev/null || echo \"analyzer not available\"', {\n            encoding: 'utf8',\n            stdio: 'pipe'\n          });\n          \n          if (!output.includes('analyzer not available')) {\n            // Parse analyzer output (simplified)\n            const sizeMatch = output.match(/Total bundle size: (\\d+(?:\\.\\d+)?)\\s*kB/);\n            if (sizeMatch) {\n              return { totalSize: parseFloat(sizeMatch[1]) };\n            }\n          }\n        }\n      }\n      \n      // Fallback: calculate from .next directory\n      const output = execSync('du -sk .next/static | cut -f1', {\n        encoding: 'utf8',\n        stdio: 'pipe'\n      });\n      \n      const sizeKB = parseInt(output.trim()) || 0;\n      return { totalSize: sizeKB };\n\n    } catch (error) {\n      throw new Error(`Failed to get Next.js bundle info: ${error.message}`);\n    }\n  }\n\n  /**\n   * Get generic bundle information from build directory\n   */\n  private async getGenericBundleInfo(buildDir: string): Promise<{ totalSize: number }> {\n    try {\n      const output = execSync(`du -sk ${buildDir} | cut -f1`, {\n        encoding: 'utf8',\n        stdio: 'pipe'\n      });\n      \n      const sizeKB = parseInt(output.trim()) || 0;\n      return { totalSize: sizeKB };\n\n    } catch (error) {\n      throw new Error(`Failed to get bundle info from ${buildDir}: ${error.message}`);\n    }\n  }\n\n  /**\n   * Estimate bundle size from source code\n   */\n  private async estimateBundleSize(): Promise<{ totalSize: number }> {\n    try {\n      // Calculate source code size as rough estimate\n      const output = execSync('find src -name \"*.ts\" -o -name \"*.tsx\" -o -name \"*.js\" -o -name \"*.jsx\" | xargs wc -c | tail -1 | awk \\'{print $1}\\'', {\n        encoding: 'utf8',\n        stdio: 'pipe'\n      });\n      \n      const sourceBytes = parseInt(output.trim()) || 0;\n      const estimatedKB = Math.round(sourceBytes / 1024 * 1.5); // Rough estimate with bundling overhead\n      \n      console.log(`📦 Estimated bundle size from source: ${estimatedKB}kB`);\n      return { totalSize: estimatedKB };\n\n    } catch (error) {\n      console.warn(`⚠️  Bundle size estimation failed: ${error.message}`);\n      return { totalSize: 400 }; // Conservative estimate\n    }\n  }\n\n  /**\n   * Analyze bundle chunks\n   */\n  private async analyzeChunks(): Promise<BundleChunk[]> {\n    try {\n      const chunks: BundleChunk[] = [];\n      \n      // Check for Next.js chunks\n      if (fs.existsSync('.next/static/chunks')) {\n        const chunkFiles = fs.readdirSync('.next/static/chunks');\n        \n        for (const file of chunkFiles) {\n          if (file.endsWith('.js')) {\n            const filePath = path.join('.next/static/chunks', file);\n            const stats = fs.statSync(filePath);\n            const sizeKB = Math.round(stats.size / 1024);\n            \n            chunks.push({\n              name: file,\n              size: sizeKB,\n              compressedSize: Math.round(sizeKB * this.COMPRESSION_RATIO),\n              modules: [], // Would need webpack stats for detailed module info\n              isLazyLoaded: file.includes('lazy') || file.includes('dynamic')\n            });\n          }\n        }\n      }\n      \n      return chunks;\n\n    } catch (error) {\n      console.warn(`⚠️  Chunk analysis failed: ${error.message}`);\n      return [];\n    }\n  }\n\n  /**\n   * Analyze bundle assets\n   */\n  private async analyzeAssets(): Promise<BundleAsset[]> {\n    try {\n      const assets: BundleAsset[] = [];\n      \n      // Check for static assets\n      const assetDirs = ['.next/static', 'public', 'dist/assets', 'build/static'];\n      \n      for (const dir of assetDirs) {\n        if (fs.existsSync(dir)) {\n          const files = this.getAllFiles(dir);\n          \n          for (const file of files) {\n            const stats = fs.statSync(file);\n            const sizeKB = Math.round(stats.size / 1024);\n            const ext = path.extname(file).toLowerCase();\n            \n            let type: BundleAsset['type'] = 'other';\n            if (['.js', '.mjs'].includes(ext)) type = 'js';\n            else if (ext === '.css') type = 'css';\n            else if (['.png', '.jpg', '.jpeg', '.gif', '.svg', '.webp'].includes(ext)) type = 'image';\n            else if (['.woff', '.woff2', '.ttf', '.otf'].includes(ext)) type = 'font';\n            \n            assets.push({\n              name: path.relative(process.cwd(), file),\n              size: sizeKB,\n              type,\n              optimized: this.isAssetOptimized(file, type)\n            });\n          }\n        }\n      }\n      \n      return assets.sort((a, b) => b.size - a.size); // Sort by size descending\n\n    } catch (error) {\n      console.warn(`⚠️  Asset analysis failed: ${error.message}`);\n      return [];\n    }\n  }\n\n  /**\n   * Analyze dependencies for bundle impact\n   */\n  private async analyzeDependencies(): Promise<DependencyAnalysis[]> {\n    try {\n      const dependencies: DependencyAnalysis[] = [];\n      \n      if (!fs.existsSync('package.json')) {\n        return dependencies;\n      }\n      \n      const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));\n      const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };\n      \n      // Analyze major dependencies that impact bundle size\n      const heavyDependencies = [\n        'react', 'react-dom', 'next', '@chakra-ui/react', 'framer-motion',\n        'lodash', 'moment', 'axios', 'three', 'chart.js'\n      ];\n      \n      for (const [name, version] of Object.entries(deps)) {\n        if (heavyDependencies.includes(name) || this.isLikelyHeavyDependency(name)) {\n          const size = await this.estimateDependencySize(name);\n          const usage = this.analyzeDependencyUsage(name);\n          const alternatives = this.suggestAlternatives(name);\n          \n          dependencies.push({\n            name,\n            size,\n            version: version as string,\n            usage,\n            alternatives\n          });\n        }\n      }\n      \n      return dependencies.sort((a, b) => b.size - a.size);\n\n    } catch (error) {\n      console.warn(`⚠️  Dependency analysis failed: ${error.message}`);\n      return [];\n    }\n  }\n\n  /**\n   * Validate lazy loading implementation\n   */\n  async validateLazyLoading(): Promise<LazyLoadingValidation> {\n    try {\n      console.log('🔄 Validating lazy loading implementation...');\n      \n      const componentsAnalyzed = await this.countComponents();\n      const lazyLoadedComponents = await this.countLazyLoadedComponents();\n      const potentialLazyComponents = await this.identifyPotentialLazyComponents();\n      const dataFetchingOptimizations = await this.identifyDataFetchingOptimizations();\n      \n      const score = Math.round((lazyLoadedComponents / Math.max(componentsAnalyzed, 1)) * 100);\n      \n      console.log(`🔄 Lazy loading validation complete: ${lazyLoadedComponents}/${componentsAnalyzed} components lazy loaded (${score}%)`);\n      \n      return {\n        componentsAnalyzed,\n        lazyLoadedComponents,\n        potentialLazyComponents,\n        dataFetchingOptimizations,\n        score\n      };\n\n    } catch (error) {\n      console.warn(`⚠️  Lazy loading validation failed: ${error.message}`);\n      \n      return {\n        componentsAnalyzed: 0,\n        lazyLoadedComponents: 0,\n        potentialLazyComponents: [],\n        dataFetchingOptimizations: [],\n        score: 0\n      };\n    }\n  }\n\n  /**\n   * Check for bundle size alerts\n   */\n  private async checkBundleSizeAlerts(analysis: BundleAnalysis): Promise<void> {\n    // Check total bundle size\n    if (analysis.totalSize > this.TARGET_BUNDLE_SIZE) {\n      this.addAlert({\n        type: 'size_exceeded',\n        severity: analysis.totalSize > this.TARGET_BUNDLE_SIZE * 1.2 ? 'critical' : 'warning',\n        message: `Bundle size (${analysis.totalSize}kB) exceeds target (${this.TARGET_BUNDLE_SIZE}kB)`,\n        currentValue: analysis.totalSize,\n        targetValue: this.TARGET_BUNDLE_SIZE,\n        recommendations: [\n          'Enable code splitting for large components',\n          'Implement lazy loading for non-critical features',\n          'Review and optimize large dependencies',\n          'Enable tree shaking for unused code elimination'\n        ],\n        timestamp: new Date()\n      });\n    }\n    \n    // Check individual chunks\n    for (const chunk of analysis.chunks) {\n      if (chunk.size > this.TARGET_CHUNK_SIZE) {\n        this.addAlert({\n          type: 'chunk_too_large',\n          severity: 'warning',\n          message: `Chunk ${chunk.name} (${chunk.size}kB) exceeds recommended size (${this.TARGET_CHUNK_SIZE}kB)`,\n          currentValue: chunk.size,\n          targetValue: this.TARGET_CHUNK_SIZE,\n          recommendations: [\n            'Split large chunk into smaller modules',\n            'Implement dynamic imports for heavy components',\n            'Review chunk splitting configuration'\n          ],\n          timestamp: new Date()\n        });\n      }\n    }\n    \n    // Check for unused dependencies\n    for (const dep of analysis.dependencies) {\n      if (dep.usage === 'optional' && dep.size > 50) {\n        this.addAlert({\n          type: 'unused_dependency',\n          severity: 'warning',\n          message: `Large optional dependency ${dep.name} (${dep.size}kB) may be removable`,\n          currentValue: dep.size,\n          targetValue: 0,\n          recommendations: [\n            `Consider removing ${dep.name} if not essential`,\n            ...dep.alternatives.map(alt => `Consider lighter alternative: ${alt}`)\n          ],\n          timestamp: new Date()\n        });\n      }\n    }\n  }\n\n  /**\n   * Generate comprehensive bundle optimization report\n   */\n  async generateOptimizationReport(): Promise<BundleOptimizationReport> {\n    const analysis = await this.analyzeBundleSize();\n    const lazyLoadingValidation = await this.validateLazyLoading();\n    \n    // Calculate overall score (0-100)\n    const sizeScore = Math.max(0, Math.min(100, (this.TARGET_BUNDLE_SIZE / Math.max(analysis.totalSize, 1)) * 100));\n    const lazyLoadingScore = lazyLoadingValidation.score;\n    const overallScore = Math.round((sizeScore + lazyLoadingScore) / 2);\n    \n    const targetCompliance = analysis.totalSize <= this.TARGET_BUNDLE_SIZE;\n    \n    // Generate comprehensive recommendations\n    const recommendations: string[] = [];\n    \n    if (!targetCompliance) {\n      recommendations.push(`Reduce bundle size by ${analysis.totalSize - this.TARGET_BUNDLE_SIZE}kB to meet target`);\n    }\n    \n    if (lazyLoadingScore < 50) {\n      recommendations.push('Implement lazy loading for more components to improve initial load time');\n    }\n    \n    recommendations.push(...analysis.recommendations);\n    \n    return {\n      timestamp: new Date(),\n      analysis,\n      lazyLoadingValidation,\n      alerts: [...this.alerts],\n      overallScore,\n      targetCompliance,\n      recommendations\n    };\n  }\n\n  // Helper methods\n\n  private getAllFiles(dir: string): string[] {\n    const files: string[] = [];\n    \n    try {\n      const items = fs.readdirSync(dir);\n      \n      for (const item of items) {\n        const fullPath = path.join(dir, item);\n        const stat = fs.statSync(fullPath);\n        \n        if (stat.isDirectory()) {\n          files.push(...this.getAllFiles(fullPath));\n        } else {\n          files.push(fullPath);\n        }\n      }\n    } catch (error) {\n      // Ignore directory read errors\n    }\n    \n    return files;\n  }\n\n  private isAssetOptimized(filePath: string, type: BundleAsset['type']): boolean {\n    const fileName = path.basename(filePath);\n    \n    switch (type) {\n      case 'image':\n        return fileName.includes('.webp') || fileName.includes('optimized');\n      case 'js':\n        return fileName.includes('.min.') || !fileName.includes('dev');\n      case 'css':\n        return fileName.includes('.min.') || !fileName.includes('dev');\n      default:\n        return true;\n    }\n  }\n\n  private isLikelyHeavyDependency(name: string): boolean {\n    const heavyPatterns = ['ui', 'chart', 'graph', 'editor', 'calendar', 'table', 'grid'];\n    return heavyPatterns.some(pattern => name.toLowerCase().includes(pattern));\n  }\n\n  private async estimateDependencySize(name: string): Promise<number> {\n    // Simplified size estimation based on common dependencies\n    const knownSizes: Record<string, number> = {\n      'react': 45,\n      'react-dom': 130,\n      'next': 200,\n      '@chakra-ui/react': 150,\n      'framer-motion': 100,\n      'lodash': 70,\n      'moment': 65,\n      'axios': 15,\n      'three': 600,\n      'chart.js': 80\n    };\n    \n    return knownSizes[name] || 20; // Default estimate\n  }\n\n  private analyzeDependencyUsage(name: string): DependencyAnalysis['usage'] {\n    // Simplified usage analysis\n    const critical = ['react', 'react-dom', 'next'];\n    const important = ['@chakra-ui/react', 'framer-motion'];\n    \n    if (critical.includes(name)) return 'critical';\n    if (important.includes(name)) return 'important';\n    return 'optional';\n  }\n\n  private suggestAlternatives(name: string): string[] {\n    const alternatives: Record<string, string[]> = {\n      'lodash': ['ramda (functional)', 'native ES6 methods'],\n      'moment': ['date-fns (smaller)', 'dayjs (2kB)'],\n      'axios': ['fetch API (native)', 'ky (smaller)'],\n      'chart.js': ['recharts (React-specific)', 'victory (modular)']\n    };\n    \n    return alternatives[name] || [];\n  }\n\n  private async countComponents(): Promise<number> {\n    try {\n      const output = execSync('find src -name \"*.tsx\" -o -name \"*.jsx\" | wc -l', {\n        encoding: 'utf8',\n        stdio: 'pipe'\n      });\n      \n      return parseInt(output.trim()) || 0;\n    } catch (error) {\n      return 0;\n    }\n  }\n\n  private async countLazyLoadedComponents(): Promise<number> {\n    try {\n      const output = execSync('grep -r \"lazy\\\\|dynamic\" src --include=\"*.tsx\" --include=\"*.jsx\" | wc -l', {\n        encoding: 'utf8',\n        stdio: 'pipe'\n      });\n      \n      return parseInt(output.trim()) || 0;\n    } catch (error) {\n      return 0;\n    }\n  }\n\n  private async identifyPotentialLazyComponents(): Promise<string[]> {\n    try {\n      // Find large components that could benefit from lazy loading\n      const output = execSync('find src -name \"*.tsx\" -exec wc -l {} + | sort -nr | head -10 | awk \\'{print $2}\\'', {\n        encoding: 'utf8',\n        stdio: 'pipe'\n      });\n      \n      return output.trim().split('\\n').filter(line => line.trim());\n    } catch (error) {\n      return [];\n    }\n  }\n\n  private async identifyDataFetchingOptimizations(): Promise<string[]> {\n    const optimizations: string[] = [];\n    \n    try {\n      // Check for potential data fetching optimizations\n      const hasUseEffect = execSync('grep -r \"useEffect\" src --include=\"*.tsx\" --include=\"*.jsx\" | wc -l', {\n        encoding: 'utf8',\n        stdio: 'pipe'\n      });\n      \n      const hasUseSWR = execSync('grep -r \"useSWR\\\\|useQuery\" src --include=\"*.tsx\" --include=\"*.jsx\" | wc -l', {\n        encoding: 'utf8',\n        stdio: 'pipe'\n      });\n      \n      const effectCount = parseInt(hasUseEffect.trim()) || 0;\n      const swr = parseInt(hasUseSWR.trim()) || 0;\n      \n      if (effectCount > swr * 2) {\n        optimizations.push('Consider using SWR or React Query for data fetching optimization');\n      }\n      \n      if (effectCount > 20) {\n        optimizations.push('Implement data prefetching for frequently accessed data');\n        optimizations.push('Consider implementing virtual scrolling for large lists');\n      }\n      \n    } catch (error) {\n      // Ignore errors in optimization detection\n    }\n    \n    return optimizations;\n  }\n\n  private generateBundleRecommendations(\n    totalSize: number,\n    chunks: BundleChunk[],\n    assets: BundleAsset[],\n    dependencies: DependencyAnalysis[]\n  ): string[] {\n    const recommendations: string[] = [];\n    \n    if (totalSize > this.TARGET_BUNDLE_SIZE) {\n      recommendations.push(`Bundle size exceeds target by ${totalSize - this.TARGET_BUNDLE_SIZE}kB`);\n    }\n    \n    const largeChunks = chunks.filter(chunk => chunk.size > this.TARGET_CHUNK_SIZE);\n    if (largeChunks.length > 0) {\n      recommendations.push(`${largeChunks.length} chunks exceed recommended size - consider code splitting`);\n    }\n    \n    const unoptimizedAssets = assets.filter(asset => !asset.optimized && asset.size > 10);\n    if (unoptimizedAssets.length > 0) {\n      recommendations.push(`${unoptimizedAssets.length} assets could be optimized for better compression`);\n    }\n    \n    const heavyDependencies = dependencies.filter(dep => dep.size > 100);\n    if (heavyDependencies.length > 0) {\n      recommendations.push(`Consider alternatives for ${heavyDependencies.length} heavy dependencies`);\n    }\n    \n    return recommendations;\n  }\n\n  private addAlert(alert: BundleOptimizationAlert): void {\n    this.alerts.push(alert);\n    \n    // Keep only recent alerts\n    if (this.alerts.length > 50) {\n      this.alerts = this.alerts.slice(-25);\n    }\n    \n    // Log alert\n    const severityIcon = alert.severity === 'critical' ? '🚨' : '⚠️';\n    console.log(`${severityIcon} Bundle Alert: ${alert.message}`);\n  }\n\n  /**\n   * Get current alerts\n   */\n  getCurrentAlerts(): BundleOptimizationAlert[] {\n    return [...this.alerts];\n  }\n\n  /**\n   * Clear all alerts\n   */\n  clearAlerts(): void {\n    this.alerts = [];\n    console.log('📦 Bundle optimization alerts cleared');\n  }\n\n  /**\n   * Export bundle analysis data\n   */\n  async exportBundleData(filePath: string): Promise<void> {\n    try {\n      const report = await this.generateOptimizationReport();\n      const exportData = {\n        timestamp: new Date().toISOString(),\n        report,\n        history: this.analysisHistory,\n        alerts: this.alerts\n      };\n\n      fs.writeFileSync(filePath, JSON.stringify(exportData, null, 2));\n      console.log(`📦 Bundle analysis data exported to: ${filePath}`);\n\n    } catch (error) {\n      throw new Error(`Failed to export bundle data: ${error.message}`);\n    }\n  }\n}"],"version":3}