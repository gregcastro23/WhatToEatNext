746784723b5788936f335cdbcf8ab8c2
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCurrentChart = exports.testAstrologizeApi = exports.getPlanetaryPositionsForDateTime = exports.getCurrentPlanetaryPositions = exports.fetchPlanetaryPositions = void 0;
const apiCircuitBreaker_1 = require("@/utils/apiCircuitBreaker");
// Use local API endpoint instead of external
const LOCAL_ASTROLOGIZE_API_URL = '/api/astrologize';
// Default location (New York City)
const DEFAULT_LOCATION = {
    latitude: 40.7498,
    longitude: -73.7976
};
/**
 * Get current date/time/location for astrology API
 */
function getCurrentDateTimeLocation(customLocation) {
    var _a, _b;
    const now = new Date();
    return {
        year: now.getFullYear(),
        month: now.getMonth() + 1,
        date: now.getDate(),
        hour: now.getHours(),
        minute: now.getMinutes(),
        latitude: (_a = customLocation === null || customLocation === void 0 ? void 0 : customLocation.latitude) !== null && _a !== void 0 ? _a : DEFAULT_LOCATION.latitude,
        longitude: (_b = customLocation === null || customLocation === void 0 ? void 0 : customLocation.longitude) !== null && _b !== void 0 ? _b : DEFAULT_LOCATION.longitude,
        zodiacSystem: 'tropical' // Default to tropical zodiac
    };
}
/**
 * Convert sign name from API to our format
 */
function normalizeSignName(signName) {
    const signMap = {
        'aries': 'aries',
        'taurus': 'taurus',
        'gemini': 'gemini',
        'cancer': 'cancer',
        'leo': 'leo',
        'virgo': 'virgo',
        'libra': 'libra',
        'scorpio': 'scorpio',
        'sagittarius': 'sagittarius',
        'capricorn': 'capricorn',
        'aquarius': 'aquarius',
        'pisces': 'pisces'
    };
    const normalized = signName === null || signName === void 0 ? void 0 : signName.toLowerCase();
    return signMap[normalized] || 'aries';
}
/**
 * Calculate exact longitude from decimal degrees
 */
function calculateExactLongitude(decimalDegrees) {
    // Normalize to 0-360 range
    return ((decimalDegrees % 360) + 360) % 360;
}
/**
 * Call the local astrologize API to get planetary positions with circuit breaker
 */
async function fetchPlanetaryPositions(customDateTime) {
    const fallbackPositions = () => {
        console.log('Using fallback planetary positions due to API failure');
        return {
            Sun: { sign: 'gemini', degree: 13, minute: 54, exactLongitude: 73.9, isRetrograde: false },
            moon: { sign: 'virgo', degree: 26, minute: 31, exactLongitude: 176.52, isRetrograde: false },
            Mercury: { sign: 'gemini', degree: 20, minute: 11, exactLongitude: 80.18, isRetrograde: false },
            Venus: { sign: 'aries', degree: 28, minute: 6, exactLongitude: 28.1, isRetrograde: false },
            Mars: { sign: 'leo', degree: 22, minute: 48, exactLongitude: 142.8, isRetrograde: false },
            Jupiter: { sign: 'gemini', degree: 28, minute: 44, exactLongitude: 88.73, isRetrograde: false },
            Saturn: { sign: 'aries', degree: 0, minute: 41, exactLongitude: 0.68, isRetrograde: false },
            Uranus: { sign: 'taurus', degree: 28, minute: 17, exactLongitude: 58.28, isRetrograde: false },
            Neptune: { sign: 'aries', degree: 1, minute: 55, exactLongitude: 1.92, isRetrograde: false },
            Pluto: { sign: 'aquarius', degree: 3, minute: 36, exactLongitude: 303.6, isRetrograde: true },
            Ascendant: { sign: 'aries', degree: 16, minute: 16, exactLongitude: 16.27, isRetrograde: false }
        };
    };
    return apiCircuitBreaker_1.astrologizeApiCircuitBreaker.call(async () => {
        var _a;
        // Get current date/time or use provided values
        const defaultDateTime = getCurrentDateTimeLocation();
        const requestData = {
            ...defaultDateTime,
            ...customDateTime
        };
        console.log('Calling local astrologize API with:', requestData);
        // Determine if we should use GET or POST
        const isCurrentTime = !customDateTime || Object.keys(customDateTime).length === 0;
        let response;
        if (isCurrentTime) {
            // Use GET for current time with query parameters
            const params = new URLSearchParams();
            if (requestData.latitude)
                params.append('latitude', requestData.latitude.toString());
            if (requestData.longitude)
                params.append('longitude', requestData.longitude.toString());
            if (requestData.zodiacSystem)
                params.append('zodiacSystem', requestData.zodiacSystem);
            const url = `${LOCAL_ASTROLOGIZE_API_URL}?${params.toString()}`;
            response = await fetch(url, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                },
                signal: AbortSignal.timeout(5000) // 5 second timeout for faster fallback
            });
        }
        else {
            // Use POST for custom date/time
            response = await fetch(LOCAL_ASTROLOGIZE_API_URL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestData),
                signal: AbortSignal.timeout(5000) // 5 second timeout for faster fallback
            });
        }
        if (!response.ok) {
            throw new Error(`API request failed: ${response.status} ${response.statusText}`);
        }
        const data = await response.json();
        // Extract planetary positions from the new API structure
        const celestialBodies = data === null || data === void 0 ? void 0 : data._celestialBodies;
        if (!celestialBodies) {
            throw new Error('Invalid API response structure');
        }
        const positions = {};
        // Process each planet from the celestial bodies
        const planetMap = {
            sun: 'Sun',
            moon: 'Moon',
            mercury: 'Mercury',
            venus: 'Venus',
            mars: 'Mars',
            jupiter: 'Jupiter',
            saturn: 'Saturn',
            uranus: 'Uranus',
            neptune: 'Neptune',
            pluto: 'Pluto'
        };
        Object.entries(planetMap).forEach(([apiKey, planetName]) => {
            const planetData = celestialBodies[apiKey];
            if (planetData) {
                const sign = normalizeSignName(planetData.Sign.key);
                const decimalDegrees = planetData.ChartPosition.Ecliptic.DecimalDegrees;
                const arcDegrees = planetData.ChartPosition.Ecliptic.ArcDegrees;
                positions[planetName] = {
                    sign,
                    degree: arcDegrees.degrees,
                    minute: arcDegrees.minutes,
                    exactLongitude: calculateExactLongitude(decimalDegrees),
                    isRetrograde: planetData.isRetrograde || false
                };
            }
        });
        // For now, calculate Ascendant from the response if available
        // This should be extracted from the actual API response in future updates
        positions['Ascendant'] = {
            sign: 'aries',
            degree: 16,
            minute: 16,
            exactLongitude: 16.27,
            isRetrograde: false
        };
        console.log('Successfully fetched planetary positions from local API:', Object.keys(positions));
        console.log('ðŸŒŸ Using', ((_a = data.birth_info) === null || _a === void 0 ? void 0 : _a.ayanamsa) || 'TROPICAL', 'zodiac system');
        return positions;
    }, fallbackPositions);
}
exports.fetchPlanetaryPositions = fetchPlanetaryPositions;
/**
 * Get planetary positions for the current moment
 */
async function getCurrentPlanetaryPositions(location, zodiacSystem = 'tropical') {
    return await fetchPlanetaryPositions({
        ...location,
        zodiacSystem
    });
}
exports.getCurrentPlanetaryPositions = getCurrentPlanetaryPositions;
/**
 * Get planetary positions for a specific date/time
 */
async function getPlanetaryPositionsForDateTime(date, location, zodiacSystem = 'tropical') {
    return await fetchPlanetaryPositions({
        year: date.getFullYear(),
        month: date.getMonth() + 1,
        date: date.getDate(),
        hour: date.getHours(),
        minute: date.getMinutes(),
        zodiacSystem,
        ...location
    });
}
exports.getPlanetaryPositionsForDateTime = getPlanetaryPositionsForDateTime;
/**
 * Test the astrologize API connection
 */
async function testAstrologizeApi() {
    try {
        const positions = await fetchPlanetaryPositions();
        return Object.keys(positions || {}).length > 0;
    }
    catch (error) {
        console.error('Astrologize API test failed:', error);
        return false;
    }
}
exports.testAstrologizeApi = testAstrologizeApi;
/**
 * Get current chart data (alias for getCurrentPlanetaryPositions)
 */
async function getCurrentChart(location, zodiacSystem = 'tropical') {
    return await getCurrentPlanetaryPositions(location, zodiacSystem);
}
exports.getCurrentChart = getCurrentChart;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,