3820905dd8f1eb255b4b916f90bcabbe
"use strict";
/**
 * Build Quality Monitoring Utilities
 *
 * This module provides comprehensive build performance monitoring, error tracking,
 * and quality metrics analysis for development workflow optimization.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBuildQualityScore = exports.monitorBuildQuality = exports.AlertSeverity = exports.AlertType = void 0;
const child_process_1 = require("child_process");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const logger_1 = require("./logger");
var AlertType;
(function (AlertType) {
    AlertType["BUILD_PERFORMANCE"] = "BUILD_PERFORMANCE";
    AlertType["MEMORY_USAGE"] = "MEMORY_USAGE";
    AlertType["BUNDLE_SIZE"] = "BUNDLE_SIZE";
    AlertType["ERROR_RATE"] = "ERROR_RATE";
    AlertType["QUALITY_GATE"] = "QUALITY_GATE";
})(AlertType || (exports.AlertType = AlertType = {}));
var AlertSeverity;
(function (AlertSeverity) {
    AlertSeverity["LOW"] = "LOW";
    AlertSeverity["MEDIUM"] = "MEDIUM";
    AlertSeverity["HIGH"] = "HIGH";
    AlertSeverity["CRITICAL"] = "CRITICAL";
})(AlertSeverity || (exports.AlertSeverity = AlertSeverity = {}));
// Configuration constants
const PERFORMANCE_THRESHOLDS = {
    BUILD_TIME: {
        DEVELOPMENT: 60000,
        PRODUCTION: 300000,
        CRITICAL: 600000, // 10 minutes
    },
    MEMORY_USAGE: {
        WARNING: 2048,
        CRITICAL: 4096,
        EMERGENCY: 8192, // 8GB
    },
    BUNDLE_SIZE: {
        WARNING_INCREASE: 10,
        CRITICAL_INCREASE: 20,
        MAX_SIZE: 10240, // 10MB
    },
    SUCCESS_RATE: {
        MINIMUM: 90, // 90% minimum success rate
    },
};
/**
 * Main function to monitor build quality and generate comprehensive report
 */
async function monitorBuildQuality() {
    const startTime = Date.now();
    try {
        logger_1.logger.info('Starting comprehensive build quality monitoring');
        // 1. Collect build metrics
        const buildMetrics = await collectBuildMetrics();
        // 2. Analyze build performance
        const performanceAnalysis = await analyzeBuildPerformance(buildMetrics);
        // 3. Analyze memory usage
        const memoryAnalysis = await analyzeMemoryUsage(buildMetrics);
        // 4. Generate quality metrics report
        const qualityMetrics = await generateQualityMetricsReport();
        // 5. Process performance alerts
        const alerts = await processPerformanceAlerts(buildMetrics);
        // 6. Generate optimization recommendations
        const recommendations = generateOptimizationRecommendations(buildMetrics, performanceAnalysis, memoryAnalysis);
        const duration = Date.now() - startTime;
        logger_1.logger.info(`Build quality monitoring completed in ${duration}ms`);
        return {
            buildMetrics,
            performanceAnalysis,
            memoryAnalysis,
            qualityMetrics,
            alerts,
            recommendations,
            timestamp: new Date(),
        };
    }
    catch (error) {
        logger_1.logger.error('Build quality monitoring failed:', error);
        throw error;
    }
}
exports.monitorBuildQuality = monitorBuildQuality;
/**
 * Collect comprehensive build metrics
 */
async function collectBuildMetrics() {
    try {
        // Generate unique build ID
        const buildId = `build_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        // Get build timing information
        const buildTiming = await getBuildTiming();
        // Get error and warning counts
        const errorCounts = await getErrorAndWarningCounts();
        // Get memory usage information
        const memoryUsage = await getMemoryUsage();
        // Get bundle size information
        const bundleSize = await getBundleSize();
        // Get cache performance
        const cacheHitRate = await getCacheHitRate();
        // Get parallelization info
        const parallelization = await getParallelizationInfo();
        return {
            buildId,
            startTime: buildTiming.startTime,
            endTime: buildTiming.endTime,
            duration: buildTiming.duration,
            success: buildTiming.success,
            errorCount: errorCounts.errors,
            warningCount: errorCounts.warnings,
            memoryUsage,
            bundleSize,
            cacheHitRate,
            parallelization,
        };
    }
    catch (error) {
        logger_1.logger.error('Error collecting build metrics:', error);
        throw error;
    }
}
/**
 * Get build timing information
 */
async function getBuildTiming() {
    try {
        const startTime = new Date();
        // Run a quick build check to get timing
        const buildStart = Date.now();
        try {
            // Check if build is successful by running type check
            (0, child_process_1.execSync)('yarn tsc --noEmit --skipLibCheck', {
                stdio: 'pipe',
                timeout: 30000, // 30 second timeout
            });
            const buildEnd = Date.now();
            const endTime = new Date();
            return {
                startTime,
                endTime,
                duration: buildEnd - buildStart,
                success: true,
            };
        }
        catch (error) {
            const buildEnd = Date.now();
            const endTime = new Date();
            return {
                startTime,
                endTime,
                duration: buildEnd - buildStart,
                success: false,
            };
        }
    }
    catch (error) {
        logger_1.logger.error('Error getting build timing:', error);
        // Return default values
        const now = new Date();
        return {
            startTime: now,
            endTime: now,
            duration: 0,
            success: false,
        };
    }
}
/**
 * Get error and warning counts
 */
async function getErrorAndWarningCounts() {
    try {
        let errors = 0;
        let warnings = 0;
        // Get TypeScript errors
        try {
            const tscOutput = (0, child_process_1.execSync)('yarn tsc --noEmit --skipLibCheck 2>&1', {
                encoding: 'utf8',
                stdio: 'pipe',
            });
            // Count errors in output
            const errorMatches = tscOutput.match(/error TS\d+:/g);
            errors = errorMatches ? errorMatches.length : 0;
        }
        catch (error) {
            // tsc returns non-zero exit code when there are errors
            if (error.stdout) {
                const errorMatches = error.stdout.match(/error TS\d+:/g);
                errors = errorMatches ? errorMatches.length : 0;
            }
        }
        // Get ESLint warnings
        try {
            const eslintOutput = (0, child_process_1.execSync)('yarn lint --format=json 2>/dev/null', {
                encoding: 'utf8',
                stdio: 'pipe',
            });
            const eslintResults = JSON.parse(eslintOutput);
            warnings = eslintResults.reduce((total, result) => {
                return total + (result.warningCount || 0);
            }, 0);
        }
        catch (error) {
            // ESLint might not be configured or might fail
            warnings = 0;
        }
        return { errors, warnings };
    }
    catch (error) {
        logger_1.logger.error('Error getting error and warning counts:', error);
        return { errors: 0, warnings: 0 };
    }
}
/**
 * Get memory usage information
 */
async function getMemoryUsage() {
    try {
        // Get current memory usage
        const memUsage = process.memoryUsage();
        // Estimate peak and average (simplified for this implementation)
        const peak = Math.round(memUsage.heapUsed / 1024 / 1024); // MB
        const average = Math.round(memUsage.heapTotal / 1024 / 1024); // MB
        // GC stats would require more sophisticated monitoring
        // For now, provide estimated values
        const gcCount = 0;
        const gcTime = 0;
        return {
            peak,
            average,
            gcCount,
            gcTime,
        };
    }
    catch (error) {
        logger_1.logger.error('Error getting memory usage:', error);
        return {
            peak: 0,
            average: 0,
            gcCount: 0,
            gcTime: 0,
        };
    }
}
/**
 * Get bundle size information
 */
async function getBundleSize() {
    try {
        // Check if .next directory exists (Next.js build output)
        const nextDir = path_1.default.join(process.cwd(), '.next');
        if (fs_1.default.existsSync(nextDir)) {
            // Get bundle sizes from .next directory
            const bundleInfo = await analyzeBundleDirectory(nextDir);
            return bundleInfo;
        }
        // Fallback: estimate based on src directory
        const srcDir = path_1.default.join(process.cwd(), 'src');
        if (fs_1.default.existsSync(srcDir)) {
            const srcSize = await getDirectorySize(srcDir);
            return {
                total: srcSize,
                javascript: Math.round(srcSize * 0.7),
                css: Math.round(srcSize * 0.2),
                assets: Math.round(srcSize * 0.1),
            };
        }
        return {
            total: 0,
            javascript: 0,
            css: 0,
            assets: 0,
        };
    }
    catch (error) {
        logger_1.logger.error('Error getting bundle size:', error);
        return {
            total: 0,
            javascript: 0,
            css: 0,
            assets: 0,
        };
    }
}
/**
 * Analyze bundle directory for size information
 */
async function analyzeBundleDirectory(bundleDir) {
    try {
        let total = 0;
        let javascript = 0;
        let css = 0;
        let assets = 0;
        const analyzeDirectory = (dir) => {
            const files = fs_1.default.readdirSync(dir);
            for (const file of files) {
                const filePath = path_1.default.join(dir, file);
                const stat = fs_1.default.statSync(filePath);
                if (stat.isDirectory()) {
                    analyzeDirectory(filePath);
                }
                else {
                    const size = stat.size;
                    total += size;
                    const ext = path_1.default.extname(file).toLowerCase();
                    if (ext === '.js' ||
                        ext === '.jsx' ||
                        ext === '.ts' ||
                        ext === '.tsx') {
                        javascript += size;
                    }
                    else if (ext === '.css' || ext === '.scss' || ext === '.sass') {
                        css += size;
                    }
                    else {
                        assets += size;
                    }
                }
            }
        };
        analyzeDirectory(bundleDir);
        // Convert to KB
        return {
            total: Math.round(total / 1024),
            javascript: Math.round(javascript / 1024),
            css: Math.round(css / 1024),
            assets: Math.round(assets / 1024),
        };
    }
    catch (error) {
        logger_1.logger.error('Error analyzing bundle directory:', error);
        return {
            total: 0,
            javascript: 0,
            css: 0,
            assets: 0,
        };
    }
}
/**
 * Get directory size in bytes
 */
async function getDirectorySize(dir) {
    try {
        let size = 0;
        const files = fs_1.default.readdirSync(dir);
        for (const file of files) {
            const filePath = path_1.default.join(dir, file);
            const stat = fs_1.default.statSync(filePath);
            if (stat.isDirectory()) {
                size += await getDirectorySize(filePath);
            }
            else {
                size += stat.size;
            }
        }
        return Math.round(size / 1024); // Convert to KB
    }
    catch (error) {
        return 0;
    }
}
/**
 * Get cache hit rate
 */
async function getCacheHitRate() {
    try {
        // This would require integration with build system cache
        // For now, return estimated value based on .next cache
        const nextCacheDir = path_1.default.join(process.cwd(), '.next', 'cache');
        if (fs_1.default.existsSync(nextCacheDir)) {
            // Estimate cache efficiency based on cache directory size
            const cacheSize = await getDirectorySize(nextCacheDir);
            // Simple heuristic: larger cache = better hit rate
            if (cacheSize > 1000) {
                // > 1MB cache
                return 0.8; // 80% hit rate
            }
            else if (cacheSize > 100) {
                // > 100KB cache
                return 0.6; // 60% hit rate
            }
            else {
                return 0.3; // 30% hit rate
            }
        }
        return 0.5; // Default 50% hit rate
    }
    catch (error) {
        logger_1.logger.error('Error getting cache hit rate:', error);
        return 0.5;
    }
}
/**
 * Get parallelization information
 */
async function getParallelizationInfo() {
    try {
        // Get CPU count for worker estimation
        const cpuCount = require('os').cpus().length;
        // Estimate workers based on CPU count and build system
        const workers = Math.max(1, Math.floor(cpuCount * 0.75));
        // Estimate efficiency based on workers vs CPU count
        const efficiency = Math.min(1.0, workers / cpuCount);
        return {
            workers,
            efficiency,
        };
    }
    catch (error) {
        logger_1.logger.error('Error getting parallelization info:', error);
        return {
            workers: 1,
            efficiency: 0.5,
        };
    }
}
/**
 * Analyze build performance
 */
async function analyzeBuildPerformance(metrics) {
    try {
        // Calculate performance metrics
        const currentBuildTime = metrics.duration;
        const averageBuildTime = await getAverageBuildTime();
        const buildTimePercentile = calculateBuildTimePercentile(currentBuildTime);
        const performanceTrend = analyzePerformanceTrend(currentBuildTime, averageBuildTime);
        // Identify bottlenecks
        const bottleneckAnalysis = identifyBuildBottlenecks(metrics);
        // Generate optimization recommendations
        const optimizationRecommendations = generateBuildOptimizationRecommendations(metrics);
        return {
            currentBuildTime,
            averageBuildTime,
            buildTimePercentile,
            performanceTrend,
            bottleneckAnalysis,
            optimizationRecommendations,
        };
    }
    catch (error) {
        logger_1.logger.error('Error analyzing build performance:', error);
        throw error;
    }
}
/**
 * Get average build time (simplified implementation)
 */
async function getAverageBuildTime() {
    // In a real implementation, this would query historical build data
    // For now, return a reasonable estimate
    return 45000; // 45 seconds
}
/**
 * Calculate build time percentile
 */
function calculateBuildTimePercentile(buildTime) {
    // Simplified percentile calculation
    // In reality, this would use historical data
    const benchmarkTimes = [30000, 45000, 60000, 90000, 120000]; // 30s, 45s, 1m, 1.5m, 2m
    let percentile = 0;
    for (let i = 0; i < benchmarkTimes.length; i++) {
        if (buildTime <= benchmarkTimes[i]) {
            percentile = ((i + 1) / benchmarkTimes.length) * 100;
            break;
        }
    }
    return percentile || 100; // If slower than all benchmarks
}
/**
 * Analyze performance trend
 */
function analyzePerformanceTrend(currentTime, averageTime) {
    const difference = currentTime - averageTime;
    const percentageDifference = (difference / averageTime) * 100;
    if (percentageDifference < -10) {
        return 'improving';
    }
    else if (percentageDifference > 10) {
        return 'degrading';
    }
    else {
        return 'stable';
    }
}
/**
 * Identify build bottlenecks
 */
function identifyBuildBottlenecks(metrics) {
    const bottlenecks = [];
    // Analyze TypeScript compilation
    if (metrics.errorCount > 0) {
        bottlenecks.push({
            phase: 'TypeScript Compilation',
            duration: Math.round(metrics.duration * 0.4),
            percentage: 40,
            suggestions: [
                'Fix TypeScript errors to improve compilation speed',
                'Enable incremental compilation',
                'Use project references for large codebases',
            ],
        });
    }
    // Analyze bundle size impact
    if (metrics.bundleSize.total > PERFORMANCE_THRESHOLDS.BUNDLE_SIZE.MAX_SIZE) {
        bottlenecks.push({
            phase: 'Bundle Generation',
            duration: Math.round(metrics.duration * 0.3),
            percentage: 30,
            suggestions: [
                'Implement code splitting to reduce bundle size',
                'Enable tree shaking to remove unused code',
                'Optimize asset loading and compression',
            ],
        });
    }
    // Analyze cache efficiency
    if (metrics.cacheHitRate < 0.7) {
        bottlenecks.push({
            phase: 'Cache Management',
            duration: Math.round(metrics.duration * 0.2),
            percentage: 20,
            suggestions: [
                'Optimize cache configuration',
                'Implement better cache invalidation strategy',
                'Use persistent cache for dependencies',
            ],
        });
    }
    return bottlenecks;
}
/**
 * Generate build optimization recommendations
 */
function generateBuildOptimizationRecommendations(metrics) {
    const recommendations = [];
    if (metrics.duration > PERFORMANCE_THRESHOLDS.BUILD_TIME.DEVELOPMENT) {
        recommendations.push('Consider enabling incremental builds to reduce compilation time');
    }
    if (metrics.errorCount > 10) {
        recommendations.push('Reduce TypeScript errors to improve build performance');
    }
    if (metrics.cacheHitRate < 0.6) {
        recommendations.push('Optimize build cache configuration for better performance');
    }
    if (metrics.bundleSize.total > PERFORMANCE_THRESHOLDS.BUNDLE_SIZE.MAX_SIZE) {
        recommendations.push('Implement code splitting and tree shaking to reduce bundle size');
    }
    if (metrics.parallelization.efficiency < 0.7) {
        recommendations.push('Optimize build parallelization to utilize available CPU cores');
    }
    return recommendations;
}
/**
 * Analyze memory usage
 */
async function analyzeMemoryUsage(metrics) {
    try {
        const peakMemoryUsage = metrics.memoryUsage.peak;
        const averageMemoryUsage = metrics.memoryUsage.average;
        // Simplified memory leak detection
        const memoryLeakDetection = detectMemoryLeaks(metrics);
        // Simplified GC stats
        const garbageCollectionStats = analyzeGCStats(metrics);
        // Generate memory optimization suggestions
        const memoryOptimizationSuggestions = generateMemoryOptimizationSuggestions(metrics);
        return {
            peakMemoryUsage,
            averageMemoryUsage,
            memoryLeakDetection,
            garbageCollectionStats,
            memoryOptimizationSuggestions,
        };
    }
    catch (error) {
        logger_1.logger.error('Error analyzing memory usage:', error);
        throw error;
    }
}
/**
 * Detect memory leaks (simplified implementation)
 */
function detectMemoryLeaks(metrics) {
    const leaks = [];
    // Simple heuristic: if peak memory is much higher than average
    if (metrics.memoryUsage.peak > metrics.memoryUsage.average * 2) {
        leaks.push({
            component: 'Build Process',
            leakSize: metrics.memoryUsage.peak - metrics.memoryUsage.average,
            growthRate: 0.1,
            suggestions: [
                'Monitor memory usage during build process',
                'Implement memory profiling to identify leaks',
                'Consider reducing batch sizes for large operations',
            ],
        });
    }
    return leaks;
}
/**
 * Analyze garbage collection stats (simplified implementation)
 */
function analyzeGCStats(metrics) {
    return {
        totalCollections: metrics.memoryUsage.gcCount,
        totalTime: metrics.memoryUsage.gcTime,
        averageTime: metrics.memoryUsage.gcCount > 0
            ? metrics.memoryUsage.gcTime / metrics.memoryUsage.gcCount
            : 0,
        efficiency: 0.8, // Estimated efficiency
    };
}
/**
 * Generate memory optimization suggestions
 */
function generateMemoryOptimizationSuggestions(metrics) {
    const suggestions = [];
    if (metrics.memoryUsage.peak > PERFORMANCE_THRESHOLDS.MEMORY_USAGE.WARNING) {
        suggestions.push('Consider increasing Node.js heap size for large builds');
    }
    if (metrics.memoryUsage.peak > metrics.memoryUsage.average * 1.5) {
        suggestions.push('Implement memory profiling to identify memory usage spikes');
    }
    suggestions.push('Use streaming and chunked processing for large file operations');
    suggestions.push('Implement proper cleanup of temporary objects and references');
    return suggestions;
}
/**
 * Generate quality metrics report
 */
async function generateQualityMetricsReport() {
    try {
        // This would integrate with various quality tools
        // For now, provide estimated values
        const codeQuality = {
            typeScriptErrors: await getTypeScriptErrorCount(),
            lintingWarnings: await getLintingWarningCount(),
            testCoverage: 75,
            codeComplexity: 6.5, // Estimated
        };
        const buildQuality = {
            successRate: 92,
            averageBuildTime: 45000,
            failureRate: 8,
            recoveryTime: 120, // 2 minutes
        };
        const performanceQuality = {
            bundleSize: 8500,
            loadTime: 2.5,
            memoryEfficiency: 0.8,
            cacheEfficiency: 0.7,
        };
        const technicalDebt = {
            debtRatio: 0.15,
            maintainabilityIndex: 75,
            duplicateCodePercentage: 5,
            outdatedDependencies: 3,
        };
        // Calculate overall score
        const overallScore = calculateOverallQualityScore(codeQuality, buildQuality, performanceQuality, technicalDebt);
        return {
            overallScore,
            codeQuality,
            buildQuality,
            performanceQuality,
            technicalDebt,
        };
    }
    catch (error) {
        logger_1.logger.error('Error generating quality metrics report:', error);
        throw error;
    }
}
/**
 * Get TypeScript error count
 */
async function getTypeScriptErrorCount() {
    try {
        const output = (0, child_process_1.execSync)('yarn tsc --noEmit --skipLibCheck 2>&1', {
            encoding: 'utf8',
            stdio: 'pipe',
        });
        const errorMatches = output.match(/error TS\d+:/g);
        return errorMatches ? errorMatches.length : 0;
    }
    catch (error) {
        if (error.stdout) {
            const errorMatches = error.stdout.match(/error TS\d+:/g);
            return errorMatches ? errorMatches.length : 0;
        }
        return 0;
    }
}
/**
 * Get linting warning count
 */
async function getLintingWarningCount() {
    try {
        const output = (0, child_process_1.execSync)('yarn lint --format=json 2>/dev/null', {
            encoding: 'utf8',
            stdio: 'pipe',
        });
        const results = JSON.parse(output);
        return results.reduce((total, result) => {
            return total + (result.warningCount || 0);
        }, 0);
    }
    catch (error) {
        return 0;
    }
}
/**
 * Calculate overall quality score
 */
function calculateOverallQualityScore(codeQuality, buildQuality, performanceQuality, technicalDebt) {
    // Weighted scoring system
    const codeScore = Math.max(0, 100 - codeQuality.typeScriptErrors - codeQuality.lintingWarnings * 0.1);
    const buildScore = buildQuality.successRate;
    const performanceScore = Math.min(100, performanceQuality.cacheEfficiency * 100);
    const debtScore = Math.max(0, 100 - technicalDebt.debtRatio * 100);
    // Weighted average
    const overallScore = codeScore * 0.3 +
        buildScore * 0.3 +
        performanceScore * 0.2 +
        debtScore * 0.2;
    return Math.round(overallScore);
}
/**
 * Process performance alerts
 */
async function processPerformanceAlerts(metrics) {
    const alerts = [];
    // Build time alerts
    if (metrics.duration > PERFORMANCE_THRESHOLDS.BUILD_TIME.CRITICAL) {
        alerts.push({
            type: AlertType.BUILD_PERFORMANCE,
            severity: AlertSeverity.CRITICAL,
            message: `Build time ${Math.round(metrics.duration / 1000)}s exceeds critical threshold ${PERFORMANCE_THRESHOLDS.BUILD_TIME.CRITICAL / 1000}s`,
            recommendations: [
                'Implement incremental builds',
                'Optimize TypeScript configuration',
                'Enable build caching',
            ],
            autoResponse: 'ANALYZE_BUILD_BOTTLENECKS',
            timestamp: new Date(),
        });
    }
    else if (metrics.duration > PERFORMANCE_THRESHOLDS.BUILD_TIME.DEVELOPMENT) {
        alerts.push({
            type: AlertType.BUILD_PERFORMANCE,
            severity: AlertSeverity.HIGH,
            message: `Build time ${Math.round(metrics.duration / 1000)}s exceeds development threshold ${PERFORMANCE_THRESHOLDS.BUILD_TIME.DEVELOPMENT / 1000}s`,
            recommendations: [
                'Review build configuration',
                'Consider code splitting',
                'Optimize dependencies',
            ],
            autoResponse: 'MONITOR_BUILD_PERFORMANCE',
            timestamp: new Date(),
        });
    }
    // Memory usage alerts
    if (metrics.memoryUsage.peak > PERFORMANCE_THRESHOLDS.MEMORY_USAGE.CRITICAL) {
        alerts.push({
            type: AlertType.MEMORY_USAGE,
            severity: AlertSeverity.CRITICAL,
            message: `Memory usage ${metrics.memoryUsage.peak}MB exceeds critical threshold ${PERFORMANCE_THRESHOLDS.MEMORY_USAGE.CRITICAL}MB`,
            recommendations: [
                'Increase Node.js heap size',
                'Implement memory profiling',
                'Optimize memory-intensive operations',
            ],
            autoResponse: 'ANALYZE_MEMORY_USAGE',
            timestamp: new Date(),
        });
    }
    // Bundle size alerts
    if (metrics.bundleSize.total > PERFORMANCE_THRESHOLDS.BUNDLE_SIZE.MAX_SIZE) {
        alerts.push({
            type: AlertType.BUNDLE_SIZE,
            severity: AlertSeverity.HIGH,
            message: `Bundle size ${metrics.bundleSize.total}KB exceeds maximum threshold ${PERFORMANCE_THRESHOLDS.BUNDLE_SIZE.MAX_SIZE}KB`,
            recommendations: [
                'Implement code splitting',
                'Enable tree shaking',
                'Optimize asset loading',
            ],
            autoResponse: 'ANALYZE_BUNDLE_SIZE',
            timestamp: new Date(),
        });
    }
    return alerts;
}
/**
 * Generate optimization recommendations
 */
function generateOptimizationRecommendations(buildMetrics, performanceAnalysis, memoryAnalysis) {
    const recommendations = [];
    // Build performance recommendations
    if (buildMetrics.duration > PERFORMANCE_THRESHOLDS.BUILD_TIME.DEVELOPMENT) {
        recommendations.push({
            category: 'build',
            priority: 'high',
            impact: 'high',
            effort: 'medium',
            description: 'Optimize build performance to reduce compilation time',
            implementation: [
                'Enable incremental TypeScript compilation',
                'Implement build caching strategy',
                'Optimize webpack configuration',
            ],
            expectedImprovement: '30-50% reduction in build time',
        });
    }
    // Memory optimization recommendations
    if (buildMetrics.memoryUsage.peak > PERFORMANCE_THRESHOLDS.MEMORY_USAGE.WARNING) {
        recommendations.push({
            category: 'memory',
            priority: 'medium',
            impact: 'medium',
            effort: 'low',
            description: 'Optimize memory usage during build process',
            implementation: [
                'Implement streaming for large file operations',
                'Add memory monitoring and profiling',
                'Optimize garbage collection settings',
            ],
            expectedImprovement: '20-30% reduction in memory usage',
        });
    }
    // Bundle size recommendations
    if (buildMetrics.bundleSize.total >
        PERFORMANCE_THRESHOLDS.BUNDLE_SIZE.MAX_SIZE * 0.8) {
        recommendations.push({
            category: 'bundle',
            priority: 'medium',
            impact: 'high',
            effort: 'medium',
            description: 'Reduce bundle size to improve load performance',
            implementation: [
                'Implement dynamic imports and code splitting',
                'Enable tree shaking for unused code removal',
                'Optimize asset compression and loading',
            ],
            expectedImprovement: '15-25% reduction in bundle size',
        });
    }
    // Cache optimization recommendations
    if (buildMetrics.cacheHitRate < 0.7) {
        recommendations.push({
            category: 'cache',
            priority: 'low',
            impact: 'medium',
            effort: 'low',
            description: 'Improve build cache efficiency',
            implementation: [
                'Optimize cache configuration',
                'Implement better cache invalidation',
                'Use persistent cache for dependencies',
            ],
            expectedImprovement: '10-20% improvement in cache hit rate',
        });
    }
    return recommendations;
}
/**
 * Get simple build quality score
 */
async function getBuildQualityScore() {
    try {
        const report = await monitorBuildQuality();
        return report.qualityMetrics.overallScore;
    }
    catch (error) {
        logger_1.logger.error('Failed to get build quality score:', error);
        return 0;
    }
}
exports.getBuildQualityScore = getBuildQualityScore;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,