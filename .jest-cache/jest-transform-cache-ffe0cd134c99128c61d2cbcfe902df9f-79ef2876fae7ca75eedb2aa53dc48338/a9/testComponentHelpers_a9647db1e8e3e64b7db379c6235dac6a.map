{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/utils/testComponentHelpers.tsx","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/__tests__/utils/testComponentHelpers.tsx"],"sourcesContent":["/**\n * Test Component Helpers\n * \n * Utilities for creating type-safe test components and mocks\n */\n\nimport React from 'react';\nimport type { AlchemicalProviderProps, MainPageLayoutProps } from '../types/testUtils.d';\n\n// Mock AlchemicalProvider that accepts children\nexport const MockAlchemicalProvider: React.FC<AlchemicalProviderProps> = ({ children }) => {\n  return (\n    <div data-testid=\"mock-alchemical-provider\">\n      {children}\n    </div>\n  );\n};\n\n// Mock MainPageLayout with proper props\nexport const MockMainPageLayout: React.FC<MainPageLayoutProps> = ({ \n  children, \n  debugMode = false, \n  loading = false, \n  onSectionNavigate \n}) => {\n  return (\n    <div data-testid=\"mock-main-page-layout\">\n      <div data-testid=\"debug-mode\">{debugMode ? 'debug' : 'production'}</div>\n      <div data-testid=\"loading-state\">{loading ? 'loading' : 'loaded'}</div>\n      {children}\n    </div>\n  );\n};\n\n// Type-safe component wrapper for testing\nexport const createTestWrapper = <P extends object>(\n  Component: React.ComponentType<P>\n) => {\n  return (props: P) => <Component {...props} />;\n};\n\n// Safe render helper that handles async components\nexport const renderWithProviders = (\n  component: React.ReactElement,\n  options?: {\n    withAlchemicalProvider?: boolean;\n    debugMode?: boolean;\n    loading?: boolean;\n  }\n) => {\n  const { withAlchemicalProvider = true, debugMode = false, loading = false } = options || {};\n  \n  if (withAlchemicalProvider) {\n    return (\n      <MockAlchemicalProvider>\n        <MockMainPageLayout debugMode={debugMode} loading={loading}>\n          {component}\n        </MockMainPageLayout>\n      </MockAlchemicalProvider>\n    );\n  }\n  \n  return component;\n};\n\n// Mock component factory with proper typing\nexport const createMockComponent = <P extends object>(\n  name: string,\n  defaultProps?: Partial<P>\n) => {\n  const MockComponent: React.FC<P> = (props) => {\n    const mergedProps = { ...defaultProps, ...props };\n    return (\n      <div data-testid={`mock-${name.toLowerCase()}`}>\n        Mock {name}\n        <pre data-testid={`${name.toLowerCase()}-props`}>\n          {JSON.stringify(mergedProps, null, 2)}\n        </pre>\n      </div>\n    );\n  };\n  \n  MockComponent.displayName = `Mock${name}`;\n  return MockComponent;\n};\n\n// Error boundary for testing\nexport class TestErrorBoundary extends React.Component<\n  { children: React.ReactNode; onError?: (error: Error) => void },\n  { hasError: boolean; error?: Error }\n> {\n  constructor(props: { children: React.ReactNode; onError?: (error: Error) => void }) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    this.props.onError?.(error);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div data-testid=\"test-error-boundary\">\n          <h2>Test Error Boundary</h2>\n          <p>Error: {this.state.error?.message}</p>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\n// Async component wrapper for testing\nexport const AsyncTestWrapper: React.FC<{ \n  children: React.ReactNode;\n  fallback?: React.ReactNode;\n}> = ({ children, fallback = <div>Loading...</div> }) => {\n  return (\n    <React.Suspense fallback={fallback}>\n      <TestErrorBoundary>\n        {children}\n      </TestErrorBoundary>\n    </React.Suspense>\n  );\n};"],"version":3}