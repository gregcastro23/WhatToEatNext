ae2a2cdc5cc61f175cf7b22ab4fcd7e5
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AsyncTestWrapper = exports.TestErrorBoundary = exports.createMockComponent = exports.renderWithProviders = exports.createTestWrapper = exports.MockMainPageLayout = exports.MockAlchemicalProvider = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
/**
 * Test Component Helpers
 *
 * Utilities for creating type-safe test components and mocks
 */
const react_1 = __importDefault(require("react"));
// Mock AlchemicalProvider that accepts children
const MockAlchemicalProvider = ({ children }) => {
    return ((0, jsx_runtime_1.jsx)("div", { "data-testid": "mock-alchemical-provider", children: children }));
};
exports.MockAlchemicalProvider = MockAlchemicalProvider;
// Mock MainPageLayout with proper props
const MockMainPageLayout = ({ children, debugMode = false, loading = false, onSectionNavigate }) => {
    return ((0, jsx_runtime_1.jsxs)("div", { "data-testid": "mock-main-page-layout", children: [(0, jsx_runtime_1.jsx)("div", { "data-testid": "debug-mode", children: debugMode ? 'debug' : 'production' }), (0, jsx_runtime_1.jsx)("div", { "data-testid": "loading-state", children: loading ? 'loading' : 'loaded' }), children] }));
};
exports.MockMainPageLayout = MockMainPageLayout;
// Type-safe component wrapper for testing
const createTestWrapper = (Component) => {
    return (props) => (0, jsx_runtime_1.jsx)(Component, { ...props });
};
exports.createTestWrapper = createTestWrapper;
// Safe render helper that handles async components
const renderWithProviders = (component, options) => {
    const { withAlchemicalProvider = true, debugMode = false, loading = false } = options || {};
    if (withAlchemicalProvider) {
        return ((0, jsx_runtime_1.jsx)(exports.MockAlchemicalProvider, { children: (0, jsx_runtime_1.jsx)(exports.MockMainPageLayout, { debugMode: debugMode, loading: loading, children: component }) }));
    }
    return component;
};
exports.renderWithProviders = renderWithProviders;
// Mock component factory with proper typing
const createMockComponent = (name, defaultProps) => {
    const MockComponent = (props) => {
        const mergedProps = { ...defaultProps, ...props };
        return ((0, jsx_runtime_1.jsxs)("div", { "data-testid": `mock-${name.toLowerCase()}`, children: ["Mock ", name, (0, jsx_runtime_1.jsx)("pre", { "data-testid": `${name.toLowerCase()}-props`, children: JSON.stringify(mergedProps, null, 2) })] }));
    };
    MockComponent.displayName = `Mock${name}`;
    return MockComponent;
};
exports.createMockComponent = createMockComponent;
// Error boundary for testing
class TestErrorBoundary extends react_1.default.Component {
    constructor(props) {
        super(props);
        this.state = { hasError: false };
    }
    static getDerivedStateFromError(error) {
        return { hasError: true, error };
    }
    componentDidCatch(error, errorInfo) {
        var _a, _b;
        (_b = (_a = this.props).onError) === null || _b === void 0 ? void 0 : _b.call(_a, error);
    }
    render() {
        var _a;
        if (this.state.hasError) {
            return ((0, jsx_runtime_1.jsxs)("div", { "data-testid": "test-error-boundary", children: [(0, jsx_runtime_1.jsx)("h2", { children: "Test Error Boundary" }), (0, jsx_runtime_1.jsxs)("p", { children: ["Error: ", (_a = this.state.error) === null || _a === void 0 ? void 0 : _a.message] })] }));
        }
        return this.props.children;
    }
}
exports.TestErrorBoundary = TestErrorBoundary;
// Async component wrapper for testing
const AsyncTestWrapper = ({ children, fallback = (0, jsx_runtime_1.jsx)("div", { children: "Loading..." }) }) => {
    return ((0, jsx_runtime_1.jsx)(react_1.default.Suspense, { fallback: fallback, children: (0, jsx_runtime_1.jsx)(TestErrorBoundary, { children: children }) }));
};
exports.AsyncTestWrapper = AsyncTestWrapper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,