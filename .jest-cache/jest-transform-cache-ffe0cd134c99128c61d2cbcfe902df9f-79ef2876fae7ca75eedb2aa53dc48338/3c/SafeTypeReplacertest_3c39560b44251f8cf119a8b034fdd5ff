91b3bcc67b3408cc13c28225de6b4463
"use strict";
/**
 * SafeTypeReplacer Tests
 * Comprehensive test suite for the Safe Type Replacer system
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock execSync for TypeScript compilation tests
jest.mock('child_process');
// Mock fs for file operations
jest.mock('fs');
// Mock SafetyValidator
jest.mock('../SafetyValidator', () => ({
    SafetyValidator: jest.fn().mockImplementation(() => ({
        calculateSafetyScore: jest.fn().mockReturnValue({
            isValid: true,
            safetyScore: 0.9,
            validationErrors: [],
            warnings: [],
            recommendations: []
        }),
        validateTypeScriptCompilation: jest.fn().mockResolvedValue({
            buildSuccessful: true,
            compilationErrors: [],
            lintingWarnings: [],
            performanceMetrics: { buildTime: 100, memoryUsage: 1000000 }
        }),
        validateBuildAfterBatch: jest.fn().mockResolvedValue({
            buildSuccessful: true,
            compilationErrors: [],
            lintingWarnings: [],
            performanceMetrics: { buildTime: 100, memoryUsage: 1000000 }
        }),
        validateRollbackCapability: jest.fn().mockResolvedValue({
            canRollback: true,
            backupIntegrity: true,
            rollbackErrors: [],
            restorationVerified: true
        }),
        updateSafetyThresholds: jest.fn()
    }))
}));
const child_process_1 = require("child_process");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const SafeTypeReplacer_1 = require("../SafeTypeReplacer");
const types_1 = require("../types");
const mockExecSync = child_process_1.execSync;
const mockFs = fs;
describe('SafeTypeReplacer', () => {
    let replacer;
    let testBackupDir;
    beforeEach(() => {
        jest.clearAllMocks();
        testBackupDir = './.test-backups';
        replacer = new SafeTypeReplacer_1.SafeTypeReplacer(testBackupDir, 0.7, 30000, 3);
        // Mock fs.existsSync to return false for backup directory initially
        mockFs.existsSync.mockImplementation((path) => {
            if (path === testBackupDir)
                return false;
            return true; // Assume other files exist
        });
        // Mock fs.mkdirSync
        mockFs.mkdirSync.mockImplementation(() => undefined);
        // Mock fs.readFileSync and writeFileSync
        mockFs.readFileSync.mockImplementation(() => 'const items: unknown[] = [];');
        mockFs.writeFileSync.mockImplementation(() => undefined);
        // Mock successful TypeScript compilation by default
        mockExecSync.mockImplementation(() => '');
    });
    describe('Constructor and Initialization', () => {
        test('creates backup directory if it does not exist', () => {
            expect(mockFs.mkdirSync).toHaveBeenCalledWith(testBackupDir, { recursive: true });
        });
        test('initializes with default strategies', () => {
            const strategies = replacer.getStrategies();
            expect(strategies).toHaveLength(10);
            expect(strategies[0].priority).toBe(1); // Array type strategy should be first
        });
        test('allows custom configuration', () => {
            const customReplacer = new SafeTypeReplacer_1.SafeTypeReplacer('.custom-backup', 0.8, 60000, 5);
            expect(customReplacer.getBackupDirectory()).toBe('.custom-backup');
        });
    });
    describe('Single Replacement Operations', () => {
        test('successfully replaces array types', async () => {
            const replacement = {
                original: 'unknown[]',
                replacement: 'unknown[]',
                filePath: 'test.ts',
                lineNumber: 1,
                confidence: 0.9,
                validationRequired: true
            };
            mockFs.readFileSync.mockReturnValue('const items: unknown[] = [];');
            const result = await replacer.applyReplacement(replacement);
            expect(result.success).toBe(true);
            expect(result.appliedReplacements).toHaveLength(1);
            expect(result.failedReplacements).toHaveLength(0);
            expect(result.rollbackPerformed).toBe(false);
        });
        test('handles low safety score rejection', async () => {
            const replacement = {
                original: 'any',
                replacement: 'string',
                filePath: 'test.ts',
                lineNumber: 1,
                confidence: 0.3,
                validationRequired: true
            };
            const result = await replacer.applyReplacement(replacement);
            expect(result.success).toBe(false);
            expect(result.failedReplacements).toHaveLength(1);
            expect(result.compilationErrors[0]).toContain('Safety score');
        });
        test('rolls back on TypeScript compilation failure', async () => {
            const replacement = {
                original: 'unknown[]',
                replacement: 'unknown[]',
                filePath: 'test.ts',
                lineNumber: 1,
                confidence: 0.9,
                validationRequired: true
            };
            // Mock compilation failure
            mockExecSync.mockImplementation(() => {
                const error = new Error('Compilation failed');
                error.stdout = 'error TS2322: Type mismatch';
                throw error;
            });
            const result = await replacer.applyReplacement(replacement);
            expect(result.success).toBe(false);
            expect(result.rollbackPerformed).toBe(true);
            expect(result.compilationErrors).toContain('error TS2322: Type mismatch');
        });
        test('handles invalid line numbers', async () => {
            const replacement = {
                original: 'unknown[]',
                replacement: 'unknown[]',
                filePath: 'test.ts',
                lineNumber: 999,
                confidence: 0.9,
                validationRequired: true
            };
            mockFs.readFileSync.mockReturnValue('const items: unknown[] = [];'); // Only 1 line
            const result = await replacer.applyReplacement(replacement);
            expect(result.success).toBe(false);
            expect(result.compilationErrors[0]).toContain('Invalid line number');
        });
        test('handles pattern not found in line', async () => {
            const replacement = {
                original: 'string[]',
                replacement: 'unknown[]',
                filePath: 'test.ts',
                lineNumber: 1,
                confidence: 0.9,
                validationRequired: true
            };
            mockFs.readFileSync.mockReturnValue('const items: unknown[] = [];'); // Pattern doesn't match
            const result = await replacer.applyReplacement(replacement);
            expect(result.success).toBe(false);
            expect(result.compilationErrors[0]).toContain('Pattern "string[]" not found');
        });
    });
    describe('Batch Processing', () => {
        test('processes multiple replacements successfully', async () => {
            const replacements = [
                {
                    original: 'unknown[]',
                    replacement: 'unknown[]',
                    filePath: 'test1.ts',
                    lineNumber: 1,
                    confidence: 0.9,
                    validationRequired: true
                },
                {
                    original: 'Record<string, unknown>',
                    replacement: 'Record<string, unknown>',
                    filePath: 'test2.ts',
                    lineNumber: 1,
                    confidence: 0.8,
                    validationRequired: true
                }
            ];
            mockFs.readFileSync.mockImplementation((filePath) => {
                if (filePath.includes('test1.ts'))
                    return 'const items: unknown[] = [];';
                if (filePath.includes('test2.ts'))
                    return 'const data: Record<string, unknown> = {};';
                return 'backup content';
            });
            const result = await replacer.processBatch(replacements);
            expect(result.success).toBe(true);
            expect(result.appliedReplacements).toHaveLength(2);
            expect(result.failedReplacements).toHaveLength(0);
        });
        test('rolls back all changes on overall compilation failure', async () => {
            const replacements = [
                {
                    original: 'unknown[]',
                    replacement: 'unknown[]',
                    filePath: 'test1.ts',
                    lineNumber: 1,
                    confidence: 0.9,
                    validationRequired: true
                }
            ];
            // Mock overall compilation to fail
            mockExecSync.mockImplementation(() => {
                const error = new Error('Overall compilation failed');
                error.stdout = 'error TS2322: Overall type error';
                throw error;
            });
            const result = await replacer.processBatch(replacements);
            expect(result.success).toBe(false);
            expect(result.rollbackPerformed).toBe(true);
            expect(result.compilationErrors).toContain('error TS2322: Overall type error');
        });
        test('groups replacements by file correctly', async () => {
            const replacements = [
                {
                    original: 'unknown[]',
                    replacement: 'unknown[]',
                    filePath: 'test.ts',
                    lineNumber: 2,
                    confidence: 0.9,
                    validationRequired: true
                },
                {
                    original: 'any',
                    replacement: 'unknown',
                    filePath: 'test.ts',
                    lineNumber: 1,
                    confidence: 0.8,
                    validationRequired: true
                }
            ];
            mockFs.readFileSync.mockReturnValue('const x: unknown = 1;\nconst items: unknown[] = [];');
            const result = await replacer.processBatch(replacements);
            expect(result.success).toBe(true);
            expect(result.appliedReplacements).toHaveLength(2);
        });
    });
    describe('Safety Score Calculation', () => {
        test('calculates higher scores for array replacements', () => {
            const replacement = {
                original: 'unknown[]',
                replacement: 'unknown[]',
                filePath: 'test.ts',
                lineNumber: 1,
                confidence: 0.7,
                validationRequired: true
            };
            // Access private method through any cast for testing
            const score = replacer.calculateSafetyScore(replacement);
            expect(score).toBeGreaterThan(0.7); // Should be boosted for array replacement
        });
        test('calculates lower scores for error handling contexts', () => {
            const replacement = {
                original: 'catch (error: unknown)',
                replacement: 'catch (error: unknown)',
                filePath: 'test.ts',
                lineNumber: 1,
                confidence: 0.8,
                validationRequired: true
            };
            const score = replacer.calculateSafetyScore(replacement);
            expect(score).toBeLessThan(0.8); // Should be reduced for error context
        });
        test('boosts scores for test files', () => {
            const replacement = {
                original: 'any',
                replacement: 'unknown',
                filePath: 'test.test.ts',
                lineNumber: 1,
                confidence: 0.7,
                validationRequired: true
            };
            const score = replacer.calculateSafetyScore(replacement);
            expect(score).toBeGreaterThan(0.7); // Should be boosted for test files
        });
    });
    describe('Rollback Verification', () => {
        test('verifies rollback capability successfully', async () => {
            const filePath = 'test.ts';
            const backupPath = 'backup.ts';
            mockFs.readFileSync.mockImplementation((path) => {
                if (path === filePath)
                    return 'modified content';
                if (path === backupPath)
                    return 'original content';
                return '';
            });
            const result = await replacer.verifyRollbackCapability(filePath, backupPath);
            expect(result.success).toBe(true);
        });
        test('detects missing backup file', async () => {
            const filePath = 'test.ts';
            const backupPath = 'missing-backup.ts';
            mockFs.existsSync.mockImplementation((path) => {
                return path !== backupPath; // Backup doesn't exist
            });
            const result = await replacer.verifyRollbackCapability(filePath, backupPath);
            expect(result.success).toBe(false);
            expect(result.error).toContain('Backup file does not exist');
        });
    });
    describe('Strategy Management', () => {
        test('allows adding custom strategies', () => {
            const customStrategy = {
                pattern: /custom_pattern/g,
                replacement: () => 'custom_replacement',
                validator: () => true,
                priority: 0
            };
            replacer.addStrategy(customStrategy);
            const strategies = replacer.getStrategies();
            expect(strategies[0]).toBe(customStrategy); // Should be first due to priority 0
        });
        test('maintains strategy priority order', () => {
            const strategies = replacer.getStrategies();
            for (let i = 1; i < strategies.length; i++) {
                expect(strategies[i].priority).toBeGreaterThanOrEqual(strategies[i - 1].priority);
            }
        });
    });
    describe('Backup Management', () => {
        test('creates backups with timestamp', async () => {
            const filePath = 'test.ts';
            mockFs.readFileSync.mockReturnValue('original content');
            const backupPath = await replacer.createBackup(filePath);
            expect(backupPath).toContain('.test-backups');
            expect(backupPath).toContain('test.ts');
            expect(backupPath).toContain('.backup');
            expect(mockFs.writeFileSync).toHaveBeenCalledWith(backupPath, 'original content', 'utf8');
        });
        test('cleans up old backup files', () => {
            const oldDate = new Date();
            oldDate.setDate(oldDate.getDate() - 10); // 10 days old
            mockFs.readdirSync.mockReturnValue(['old.backup', 'recent.backup', 'other.txt']);
            mockFs.statSync.mockImplementation((filePath) => {
                if (filePath.includes('old.backup')) {
                    return { mtime: oldDate };
                }
                return { mtime: new Date() }; // Recent file
            });
            replacer.cleanupOldBackups(7); // Keep 7 days
            expect(mockFs.unlinkSync).toHaveBeenCalledWith(path.join(testBackupDir, 'old.backup'));
            expect(mockFs.unlinkSync).not.toHaveBeenCalledWith(path.join(testBackupDir, 'recent.backup'));
        });
    });
    describe('Error Handling and Retries', () => {
        test('handles file system errors gracefully', async () => {
            const replacement = {
                original: 'unknown[]',
                replacement: 'unknown[]',
                filePath: 'test.ts',
                lineNumber: 1,
                confidence: 0.9,
                validationRequired: true
            };
            // Mock backup creation to fail
            mockFs.writeFileSync.mockImplementation((filePath) => {
                if (filePath.includes('.backup')) {
                    throw new Error('Backup creation failed');
                }
            });
            // Expect the error to be thrown since backup creation is critical
            await expect(replacer.applyReplacement(replacement)).rejects.toThrow('Backup creation failed');
        });
        test('handles compilation errors with rollback', async () => {
            const replacement = {
                original: 'unknown[]',
                replacement: 'unknown[]',
                filePath: 'test.ts',
                lineNumber: 1,
                confidence: 0.9,
                validationRequired: true
            };
            // Mock compilation to fail
            mockExecSync.mockImplementation(() => {
                const error = new Error('Compilation failed');
                error.stdout = 'error TS2322: Type error';
                throw error;
            });
            const result = await replacer.applyReplacement(replacement);
            expect(result.success).toBe(false);
            expect(result.rollbackPerformed).toBe(true);
            expect(result.compilationErrors).toContain('error TS2322: Type error');
        });
    });
    describe('TypeScript Compilation Validation', () => {
        test('handles successful compilation', async () => {
            mockExecSync.mockReturnValue('');
            const result = await replacer.validateTypeScriptCompilation();
            expect(result.success).toBe(true);
            expect(result.errors).toHaveLength(0);
        });
        test('extracts TypeScript errors from output', async () => {
            const errorOutput = `
        src/test.ts(10,5): error TS2322: Type 'string' is not assignable to type 'number'.
        src/test.ts(15,10): error TS2304: Cannot find name 'unknownVariable'.
        Found 2 errors.
      `;
            mockExecSync.mockImplementation(() => {
                const error = new Error('Compilation failed');
                error.stdout = errorOutput;
                throw error;
            });
            const result = await replacer.validateTypeScriptCompilation();
            expect(result.success).toBe(false);
            expect(result.errors).toHaveLength(2);
            expect(result.errors[0]).toContain('error TS2322');
            expect(result.errors[1]).toContain('error TS2304');
        });
        test('handles compilation timeout', async () => {
            mockExecSync.mockImplementation(() => {
                const error = new Error('Timeout');
                error.code = 'TIMEOUT';
                throw error;
            });
            const result = await replacer.validateTypeScriptCompilation();
            expect(result.success).toBe(false);
            expect(result.errors).toHaveLength(1);
            expect(result.errors[0]).toContain('Timeout');
        });
    });
    describe('Advanced Replacement Strategy Patterns', () => {
        test('infers array element types from context', () => {
            const context = {
                filePath: 'test.ts',
                lineNumber: 1,
                codeSnippet: 'const items: unknown[] = ["hello", "world"];',
                surroundingLines: [],
                hasExistingComment: false,
                isInTestFile: false,
                domainContext: {
                    domain: types_1.CodeDomain.UTILITY,
                    intentionalityHints: [],
                    suggestedTypes: [],
                    preservationReasons: []
                }
            };
            // eslint-disable-next-line @typescript-eslint/no-explicit-any -- High-risk domain requiring flexibility
            const inferredType = replacer.inferArrayElementType(context);
            expect(inferredType).toBe('string');
        });
        test('handles complex nested type inference', () => {
            const complexContext = {
                filePath: 'test.ts',
                lineNumber: 1,
                codeSnippet: 'const nested: Record<string, unknown[]> = { items: [1, 2, 3] };',
                surroundingLines: [],
                hasExistingComment: false,
                isInTestFile: false,
                domainContext: {
                    domain: types_1.CodeDomain.UTILITY,
                    intentionalityHints: [],
                    suggestedTypes: [],
                    preservationReasons: []
                }
            };
            // eslint-disable-next-line @typescript-eslint/no-explicit-any -- High-risk domain requiring flexibility
            const arrayType = replacer.inferArrayElementType(complexContext);
            const recordType = replacer.inferRecordValueType(complexContext);
            expect(arrayType).toBe('number');
            expect(recordType).toBe('number[]');
        });
        test('infers types from usage patterns in surrounding code', () => {
            const usageContext = {
                filePath: 'test.ts',
                lineNumber: 2,
                codeSnippet: 'const data: unknown = getValue();',
                surroundingLines: [
                    'function getValue() { return "test"; }',
                    'console.log(data.toUpperCase());',
                    'const length = data.length;'
                ],
                hasExistingComment: false,
                isInTestFile: false,
                domainContext: {
                    domain: types_1.CodeDomain.UTILITY,
                    intentionalityHints: [],
                    suggestedTypes: [],
                    preservationReasons: []
                }
            };
            const inferredType = replacer.inferVariableType(usageContext);
            expect(inferredType).toBe('string');
        });
        test('infers Record value types from object literals', () => {
            const context = {
                filePath: 'test.ts',
                lineNumber: 1,
                codeSnippet: 'const config: Record<string, unknown> = { name: "test", count: 42 };',
                surroundingLines: [],
                hasExistingComment: false,
                isInTestFile: false,
                domainContext: {
                    domain: types_1.CodeDomain.UTILITY,
                    intentionalityHints: [],
                    suggestedTypes: [],
                    preservationReasons: []
                }
            };
            const inferredType = replacer.inferRecordValueType(context);
            expect(['string', 'number', 'unknown']).toContain(inferredType);
        });
        test('infers function parameter types from parameter names', () => {
            const context = {
                filePath: 'test.ts',
                lineNumber: 1,
                codeSnippet: 'function handleClick(event: unknown) { }',
                surroundingLines: [],
                hasExistingComment: false,
                isInTestFile: false,
                domainContext: {
                    domain: types_1.CodeDomain.COMPONENT,
                    intentionalityHints: [],
                    suggestedTypes: [],
                    preservationReasons: []
                }
            };
            const inferredType = replacer.inferFunctionParameterType(context, 'event');
            expect(inferredType).toBe('Event');
        });
        test('infers return types from function context', () => {
            const context = {
                filePath: 'test.ts',
                lineNumber: 1,
                codeSnippet: 'function isValid(): any {',
                surroundingLines: ['  return true;'],
                hasExistingComment: false,
                isInTestFile: false,
                domainContext: {
                    domain: types_1.CodeDomain.UTILITY,
                    intentionalityHints: [],
                    suggestedTypes: [],
                    preservationReasons: []
                }
            };
            const inferredType = replacer.inferReturnType(context);
            expect(inferredType).toBe('boolean');
        });
        test('detects error handling contexts correctly', () => {
            const errorContext = {
                filePath: 'test.ts',
                lineNumber: 1,
                codeSnippet: 'catch (error: unknown) {',
                surroundingLines: [],
                hasExistingComment: false,
                isInTestFile: false,
                domainContext: {
                    domain: types_1.CodeDomain.UTILITY,
                    intentionalityHints: [],
                    suggestedTypes: [],
                    preservationReasons: []
                }
            };
            const isErrorContext = replacer.isInErrorHandlingContext(errorContext);
            expect(isErrorContext).toBe(true);
        });
        test('detects external API contexts correctly', () => {
            const apiContext = {
                filePath: 'test.ts',
                lineNumber: 1,
                codeSnippet: 'const response: unknown = await fetch("/api/data");',
                surroundingLines: [],
                hasExistingComment: false,
                isInTestFile: false,
                domainContext: {
                    domain: types_1.CodeDomain.SERVICE,
                    intentionalityHints: [],
                    suggestedTypes: [],
                    preservationReasons: []
                }
            };
            const isApiContext = replacer.isExternalApiContext(apiContext);
            expect(isApiContext).toBe(true);
        });
        test('applies domain-specific type inference for astrological context', () => {
            const astroContext = {
                filePath: 'astrology.ts',
                lineNumber: 1,
                codeSnippet: 'const planetaryPositions: unknown[] = [];',
                surroundingLines: ['positions.push("mars");'],
                hasExistingComment: false,
                isInTestFile: false,
                domainContext: {
                    domain: types_1.CodeDomain.ASTROLOGICAL,
                    intentionalityHints: [],
                    suggestedTypes: [],
                    preservationReasons: []
                }
            };
            // eslint-disable-next-line @typescript-eslint/no-explicit-any -- High-risk domain requiring flexibility
            const inferredType = replacer.inferArrayElementType(astroContext);
            expect(inferredType).toBe('string');
        });
        test('applies domain-specific type inference for recipe context', () => {
            const recipeContext = {
                filePath: 'recipe.ts',
                lineNumber: 1,
                codeSnippet: 'function processIngredient(ingredient: unknown) {',
                surroundingLines: [],
                hasExistingComment: false,
                isInTestFile: false,
                domainContext: {
                    domain: types_1.CodeDomain.RECIPE,
                    intentionalityHints: [],
                    suggestedTypes: [],
                    preservationReasons: []
                }
            };
            const inferredType = replacer.inferFunctionParameterType(recipeContext, 'ingredient');
            expect(inferredType).toBe('Ingredient');
        });
        test('handles complex replacement patterns with validation', async () => {
            const mockContext = {
                filePath: 'test.ts',
                lineNumber: 1,
                codeSnippet: 'function process(data: unknown): any { return data; }',
                surroundingLines: [],
                hasExistingComment: false,
                isInTestFile: false,
                domainContext: {
                    domain: types_1.CodeDomain.UTILITY,
                    intentionalityHints: [],
                    suggestedTypes: [],
                    preservationReasons: []
                }
            };
            const strategies = replacer.getStrategies();
            // Test function parameter strategy
            const paramStrategy = strategies.find(s => s.priority === 4);
            expect(paramStrategy).toBeDefined();
            expect(paramStrategy?.validator(mockContext)).toBe(true);
            // Test return type strategy
            const returnStrategy = strategies.find(s => s.priority === 5);
            expect(returnStrategy).toBeDefined();
            expect(returnStrategy?.validator(mockContext)).toBe(true);
        });
    });
    describe('Comprehensive Error Recovery', () => {
        test('handles partial batch failures with selective rollback', async () => {
            const replacements = [
                {
                    original: 'unknown[]',
                    replacement: 'string[]',
                    filePath: 'test1.ts',
                    lineNumber: 1,
                    confidence: 0.9,
                    validationRequired: true
                },
                {
                    original: 'any',
                    replacement: 'InvalidType',
                    filePath: 'test2.ts',
                    lineNumber: 1,
                    confidence: 0.8,
                    validationRequired: true
                }
            ];
            mockFs.readFileSync.mockImplementation((filePath) => {
                if (filePath.includes('test1.ts'))
                    return 'const items: unknown[] = [];';
                if (filePath.includes('test2.ts'))
                    return 'const data: unknown = value;';
                return 'backup content';
            });
            // Mock compilation to fail for the second replacement
            let compilationCallCount = 0;
            mockExecSync.mockImplementation(() => {
                compilationCallCount++;
                if (compilationCallCount > 1) {
                    const error = new Error('Compilation failed');
                    error.stdout = 'error TS2304: Cannot find name "InvalidType"';
                    throw error;
                }
                return '';
            });
            const result = await replacer.processBatch(replacements);
            expect(result.success).toBe(false);
            expect(result.rollbackPerformed).toBe(true);
            expect(result.compilationErrors).toContain('error TS2304: Cannot find name "InvalidType"');
        });
        test('handles file system permission errors', async () => {
            const replacement = {
                original: 'unknown[]',
                replacement: 'unknown[]',
                filePath: 'readonly.ts',
                lineNumber: 1,
                confidence: 0.9,
                validationRequired: true
            };
            mockFs.readFileSync.mockReturnValue('const items: unknown[] = [];');
            mockFs.writeFileSync.mockImplementation(() => {
                throw new Error('EACCES: permission denied');
            });
            await expect(replacer.applyReplacement(replacement)).rejects.toThrow('EACCES: permission denied');
        });
        test('handles corrupted backup files', async () => {
            const replacement = {
                original: 'unknown[]',
                replacement: 'unknown[]',
                filePath: 'test.ts',
                lineNumber: 1,
                confidence: 0.9,
                validationRequired: true
            };
            mockFs.readFileSync.mockImplementation((path) => {
                if (path.includes('.backup')) {
                    throw new Error('Backup file corrupted');
                }
                return 'const items: unknown[] = [];';
            });
            const result = await replacer.applyReplacement(replacement);
            expect(result.success).toBe(false);
        });
        test('handles network timeouts during validation', async () => {
            const replacement = {
                original: 'unknown[]',
                replacement: 'unknown[]',
                filePath: 'test.ts',
                lineNumber: 1,
                confidence: 0.9,
                validationRequired: true
            };
            mockFs.readFileSync.mockReturnValue('const items: unknown[] = [];');
            // Mock timeout error
            mockExecSync.mockImplementation(() => {
                const error = new Error('Command timed out');
                error.code = 'TIMEOUT';
                throw error;
            });
            const result = await replacer.applyReplacement(replacement);
            expect(result.success).toBe(false);
            expect(result.compilationErrors).toContain('Command timed out');
        });
    });
    describe('Performance and Memory Management', () => {
        test('handles large file processing efficiently', async () => {
            const largeContent = 'const items: unknown[] = [];\n'.repeat(10000);
            const replacement = {
                original: 'unknown[]',
                replacement: 'unknown[]',
                filePath: 'large.ts',
                lineNumber: 5000,
                confidence: 0.9,
                validationRequired: true
            };
            mockFs.readFileSync.mockReturnValue(largeContent);
            const startTime = Date.now();
            const result = await replacer.applyReplacement(replacement);
            const endTime = Date.now();
            expect(result.success).toBe(true);
            expect(endTime - startTime).toBeLessThan(2000); // Should complete within 2 seconds
        });
        test('manages memory during batch processing', async () => {
            const largeBatch = Array(1000).fill(null).map((_, i) => ({
                original: 'unknown[]',
                replacement: 'unknown[]',
                filePath: `test${i}.ts`,
                lineNumber: 1,
                confidence: 0.9,
                validationRequired: true
            }));
            mockFs.readFileSync.mockReturnValue('const items: unknown[] = [];');
            const initialMemory = process.memoryUsage().heapUsed;
            const result = await replacer.processBatch(largeBatch);
            const finalMemory = process.memoryUsage().heapUsed;
            expect(result).toBeDefined();
            // Memory usage shouldn't grow excessively (allow 100MB increase)
            expect(finalMemory - initialMemory).toBeLessThan(100 * 1024 * 1024);
        });
        test('cleans up resources after processing', async () => {
            const replacement = {
                original: 'unknown[]',
                replacement: 'unknown[]',
                filePath: 'test.ts',
                lineNumber: 1,
                confidence: 0.9,
                validationRequired: true
            };
            mockFs.readFileSync.mockReturnValue('const items: unknown[] = [];');
            await replacer.applyReplacement(replacement);
            // Verify cleanup was called
            expect(mockFs.writeFileSync).toHaveBeenCalled();
            // Test backup cleanup
            replacer.cleanupOldBackups(0); // Clean all backups
            expect(mockFs.unlinkSync).toHaveBeenCalled();
        });
    });
    describe('Integration with Safety Validator', () => {
        test('integrates with safety validator for comprehensive validation', async () => {
            const replacement = {
                original: 'unknown[]',
                replacement: 'unknown[]',
                filePath: 'test.ts',
                lineNumber: 1,
                confidence: 0.9,
                validationRequired: true
            };
            const context = {
                filePath: 'test.ts',
                lineNumber: 1,
                codeSnippet: 'const items: unknown[] = [];',
                surroundingLines: [],
                hasExistingComment: false,
                isInTestFile: false,
                domainContext: {
                    domain: types_1.CodeDomain.UTILITY,
                    intentionalityHints: [],
                    suggestedTypes: [],
                    preservationReasons: []
                }
            };
            mockFs.readFileSync.mockReturnValue('const items: unknown[] = [];');
            const result = await replacer.applyReplacement(replacement, context);
            expect(result.success).toBe(true);
        });
        test('respects safety validator recommendations', async () => {
            const lowConfidenceReplacement = {
                original: 'any',
                replacement: 'string',
                filePath: 'test.ts',
                lineNumber: 1,
                confidence: 0.3,
                validationRequired: true
            };
            const result = await replacer.applyReplacement(lowConfidenceReplacement);
            expect(result.success).toBe(false);
            expect(result.compilationErrors[0]).toContain('Safety score');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,