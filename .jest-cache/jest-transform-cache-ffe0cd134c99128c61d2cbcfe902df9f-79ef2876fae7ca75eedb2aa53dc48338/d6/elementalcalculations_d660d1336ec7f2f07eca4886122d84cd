1d4887d5b01c6327783979c8c1afc14e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateElementalEnergies = exports.ElementalCalculator = void 0;
const elements_1 = require("@/types/elements");
const elementalConstants_1 = require("@/constants/elementalConstants");
/**
 * ElementalCalculator class for managing and calculating elemental state
 */
class ElementalCalculator {
    constructor() {
        this.currentBalance = elementalConstants_1.DEFAULT_ELEMENTAL_PROPERTIES;
        this.initialized = false;
    }
    static getInstance() {
        if (!ElementalCalculator.instance) {
            ElementalCalculator.instance = new ElementalCalculator();
        }
        return ElementalCalculator.instance;
    }
    static initialize() {
        const instance = ElementalCalculator.getInstance();
        instance.currentBalance = { ...elementalConstants_1.DEFAULT_ELEMENTAL_PROPERTIES };
        instance.initialized = true;
    }
    static getCurrentElementalState() {
        const instance = ElementalCalculator.getInstance();
        if (!instance.initialized) {
            ElementalCalculator.initialize();
        }
        return instance.currentBalance;
    }
    /**
     * Calculate the seasonal effectiveness of a recipe
     * @param recipe The recipe to evaluate
     * @param season The current season
     * @returns A score from 0-100 representing the effectiveness
     */
    static calculateSeasonalEffectiveness(recipe, season) {
        const recipeData = recipe;
        if (!(recipeData === null || recipeData === void 0 ? void 0 : recipeData.elementalProperties))
            return 0;
        const seasonalModifiers = this.getSeasonalModifiers(season);
        let score = 0;
        // Calculate base seasonal alignment
        Object.entries(recipeData.elementalProperties).forEach(([element, value]) => {
            const modifier = seasonalModifiers[element] || 0;
            score += value * modifier * 100;
        });
        // Apply seasonal bonuses/penalties
        if (recipeData.season) {
            const seasons = Array.isArray(recipeData.season)
                ? recipeData.season
                : [recipeData.season];
            if (seasons
                .map((s) => s.toLowerCase())
                .includes(season.toLowerCase())) {
                score += 20;
            }
        }
        return Math.max(0, Math.min(100, Math.round(score)));
    }
    /**
     * Get elemental modifiers for a specific season
     */
    static getSeasonalModifiers(season) {
        const baseModifiers = { ...elementalConstants_1.DEFAULT_ELEMENTAL_PROPERTIES };
        // Normalize season to lowercase for consistency with type definition
        const seasonLower = season.toLowerCase();
        switch (seasonLower) {
            case 'spring':
                baseModifiers.Air = 0.4;
                baseModifiers.Fire = 0.3;
                baseModifiers.Water = 0.2;
                baseModifiers.Earth = 0.1;
                break;
            case 'summer':
                baseModifiers.Fire = 0.4;
                baseModifiers.Air = 0.3;
                baseModifiers.Earth = 0.2;
                baseModifiers.Water = 0.1;
                break;
            case 'autumn':
            case 'fall':
                baseModifiers.Earth = 0.4;
                baseModifiers.Air = 0.3;
                baseModifiers.Water = 0.2;
                baseModifiers.Fire = 0.1;
                break;
            case 'winter':
                baseModifiers.Water = 0.4;
                baseModifiers.Earth = 0.3;
                baseModifiers.Fire = 0.2;
                baseModifiers.Air = 0.1;
                break;
            case 'all':
                // Balanced for 'all' season
                baseModifiers.Fire = 0.25;
                baseModifiers.Water = 0.25;
                baseModifiers.Earth = 0.25;
                baseModifiers.Air = 0.25;
                break;
            default:
                // Balanced for unknown seasons
                baseModifiers.Fire = 0.25;
                baseModifiers.Water = 0.25;
                baseModifiers.Earth = 0.25;
                baseModifiers.Air = 0.25;
        }
        return baseModifiers;
    }
    /**
     * Calculate harmony score for given elemental properties
     * @param properties Elemental properties to evaluate
     * @returns Harmony score between 0 and 1
     */
    static calculateHarmony(properties) {
        if (!properties)
            return 0;
        // Check if properties are balanced
        const values = Object.values(properties);
        const average = values.reduce((sum, val) => sum + val, 0) / values.length;
        // Calculate variance from the ideal (perfect balance would be 0 variance)
        const variance = values.reduce((sum, val) => sum + Math.pow(val - average, 2), 0) /
            values.length;
        // Convert variance to harmony score (0-1)
        return Math.max(0, Math.min(1, 1 - Math.sqrt(variance)));
    }
    /**
     * Calculate elemental state based on provided properties and conditions
     * @param baseProperties Base elemental properties
     * @param phase Optional phase/condition
     * @param time Optional time factor
     * @returns Enhanced elemental properties with additional information
     */
    calculateElementalState(baseProperties, phase = 'default', time = 'neutral') {
        // Start with the base properties
        const properties = { ...baseProperties };
        // Create default seasonal influence
        const seasonalInfluence = {
            Fire: 0.25,
            Water: 0.25,
            Earth: 0.25,
            Air: 0.25
        };
        // Apply time-based modifiers
        if (time === 'day') {
            properties.Fire = properties.Fire * 1.1;
            properties.Air = properties.Air * 1.05;
        }
        else if (time === 'night') {
            properties.Water = properties.Water * 1.1;
            properties.Earth = properties.Earth * 1.05;
        }
        // Normalize the properties to ensure they still sum to 1
        const total = Object.values(properties).reduce((sum, val) => sum + val, 0);
        if (total > 0) {
            Object.keys(properties).forEach((key) => {
                properties[key] = properties[key] / total;
                // Update seasonal influence based on the normalized properties
                seasonalInfluence[key] = properties[key] * 1.5;
            });
        }
        return {
            properties,
            seasonalInfluence
        };
    }
}
exports.ElementalCalculator = ElementalCalculator;
/**
 * Gets the planetary influencers for a specific element
 * @param planetaryPositions The current planetary positions
 * @param elementType The element type to get influencers for
 * @returns Array of planetary influencers
 */
function getPlanetaryInfluencers(planetaryPositions, elementType) {
    // Define which planets influence which elements - Pattern JJ-1: ElementType System Unification
    const elementInfluencers = {
        Fire: ['sun', 'mars', 'jupiter'],
        Water: ['moon', 'venus', 'neptune'],
        Earth: ['venus', 'saturn', 'pluto'],
        Air: ['mercury', 'uranus', 'jupiter'],
        // Added extended elements mapped to core planetary influences
        Metal: ['venus', 'saturn', 'mercury'],
        Wood: ['sun', 'mars', 'jupiter'],
        Void: ['mercury', 'uranus', 'neptune'] // Space, potential, emptiness - maps to Air/Water qualities
    };
    // Get the potential influencers for this element
    const potentialInfluencers = elementInfluencers[elementType] || [];
    // Return only the planets that are actually present in the positions data
    return potentialInfluencers.filter((planet) => planetaryPositions[planet] &&
        typeof planetaryPositions[planet] === 'object');
}
/**
 * Calculates the elemental energies based on planetary positions
 *
 * @param planetaryPositions The current positions of planets
 * @param isDaytime Whether it's daytime or nighttime
 * @returns Array of elemental energies
 */
function calculateElementalEnergies(planetaryPositions, isDaytime = true) {
    if (!planetaryPositions || Object.keys(planetaryPositions).length === 0) {
        // console.warn('No planetary positions provided for elemental calculation');
        return getDefaultElementalEnergies();
    }
    // Initialize energy values for each element
    const energyValues = {
        Fire: 0,
        Water: 0,
        Earth: 0,
        Air: 0,
        // Pattern JJ-1: ElementType System Unification - Add extended elements with base element mapping
        Metal: 0,
        Wood: 0,
        Void: 0 // Maps to Air-like properties
    };
    // Define planetary influences (weights)
    const planetWeights = {
        sun: 0.25,
        moon: 0.2,
        mercury: 0.1,
        venus: 0.1,
        mars: 0.1,
        jupiter: 0.1,
        saturn: 0.1,
        uranus: 0.05,
        neptune: 0.05,
        pluto: 0.05
    };
    // Calculate element values based on planetary positions
    let totalWeight = 0;
    for (const [planet, position] of Object.entries(planetaryPositions)) {
        const weight = planetWeights[planet.toLowerCase()] || 0.05;
        // Skip if position doesn't have a sign
        const positionData = position;
        if (!(positionData === null || positionData === void 0 ? void 0 : positionData.sign))
            continue;
        // Convert the sign to lowercase to ensure matching
        const sign = positionData.sign.toLowerCase();
        const element = elements_1.signElementMap[sign];
        if (element) {
            energyValues[element] += weight;
            totalWeight += weight;
        }
    }
    // Apply day/night modifiers
    if (isDaytime) {
        energyValues.Fire *= 1.2;
        energyValues.Air *= 1.1;
    }
    else {
        energyValues.Water *= 1.2;
        energyValues.Earth *= 1.1;
    }
    // Normalize values to ensure they sum to 1
    if (totalWeight > 0) {
        const sum = Object.values(energyValues).reduce((acc, value) => acc + value, 0);
        for (const element of Object.keys(energyValues)) {
            energyValues[element] = sum > 0 ? energyValues[element] / sum : 0;
        }
    }
    // Create ElementalEnergy objects
    const energies = Object.entries(energyValues)
        .filter(([_, strength]) => strength > 0)
        .map(([type, strength]) => ({
        type: type,
        strength,
        influence: getPlanetaryInfluencers(planetaryPositions, type)
    }));
    return energies;
}
exports.calculateElementalEnergies = calculateElementalEnergies;
/**
 * Returns default elemental energies when no data is available
 */
function getDefaultElementalEnergies() {
    return [
        { type: 'Fire', strength: 0.25, influence: [] },
        { type: 'Water', strength: 0.25, influence: [] },
        { type: 'Earth', strength: 0.25, influence: [] },
        { type: 'Air', strength: 0.25, influence: [] },
    ];
}
// Process a zodiac sign and its relevant position to update energy values
function _processZodiacInfluence(sign, weight, energyValues) {
    const element = elements_1.signElementMap[sign];
    if (element) {
        energyValues[element] += weight;
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,