{"file":"/Users/GregCastro/Desktop/WhatToEatNext/backups/first-wave-2025-08-11T05-19-26-813Z/src/services/campaign/unintentional-any-elimination/CampaignIntegration.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/backups/first-wave-2025-08-11T05-19-26-813Z/src/services/campaign/unintentional-any-elimination/CampaignIntegration.ts"],"sourcesContent":["/**\n * Campaign System Integration Layer\n * Extends existing CampaignController to support unintentional any elimination\n */\n\nimport {\n    CampaignConfig,\n    CampaignPhase,\n    PhaseResult,\n    SafetyEventSeverity,\n    SafetyEventType,\n    SafetySettings,\n    ValidationResult\n} from '../../../types/campaign';\n\nimport { CampaignController } from '../CampaignController';\nimport { UnintentionalAnyEliminationCampaign } from './UnintentionalAnyEliminationCampaign';\nimport {\n    UnintentionalAnyConfig,\n    UnintentionalAnyMetrics,\n    UnintentionalAnyProgressMetrics\n} from './types';\n\n/**\n * Extended Campaign Controller with Unintentional Any Elimination support\n */\nexport class UnintentionalAnyCampaignController extends CampaignController {\n  private unintentionalAnyCampaign: UnintentionalAnyEliminationCampaign;\n  private unintentionalAnyConfig: UnintentionalAnyConfig;\n\n  constructor(config: CampaignConfig, unintentionalAnyConfig?: Partial<UnintentionalAnyConfig>) {\n    super(config);\n\n    // Default configuration for unintentional any elimination\n    this.unintentionalAnyConfig = {\n      maxFilesPerBatch: 15,\n      targetReductionPercentage: 15,\n      confidenceThreshold: 0.8,\n      enableDomainAnalysis: true,\n      enableDocumentation: true,\n      safetyLevel: 'CONSERVATIVE',\n      validationFrequency: 5,\n      ...unintentionalAnyConfig\n    };\n\n    this.unintentionalAnyCampaign = new UnintentionalAnyEliminationCampaign(this.unintentionalAnyConfig);\n  }\n\n  /**\n   * Execute unintentional any elimination phase with full campaign integration\n   */\n  async executeUnintentionalAnyPhase(phase: CampaignPhase): Promise<PhaseResult> {\n    console.log(`🎯 Executing Unintentional Any Elimination Phase: ${phase.name}`);\n\n    const startTime = Date.now();\n\n    // Create safety checkpoint before phase execution\n    const checkpointId = await this.createSafetyCheckpoint(`Pre-phase checkpoint: ${phase.name}`);\n\n    try {\n      // Get initial metrics for comparison\n      const initialMetrics = await this.getCurrentMetrics();\n      const initialUnintentionalAnyMetrics = await this.getUnintentionalAnyMetrics();\n\n      // Execute the phase using the unintentional any campaign\n      const campaignResult = await this.unintentionalAnyCampaign.executePhase(phase);\n\n      // Get final metrics and calculate improvement\n      const finalMetrics = await this.getCurrentMetrics();\n      const finalUnintentionalAnyMetrics = await this.getUnintentionalAnyMetrics();\n\n      const metricsImprovement = this.calculateUnintentionalAnyImprovement(\n        initialUnintentionalAnyMetrics,\n        finalUnintentionalAnyMetrics\n      );\n\n      // Validate phase completion\n      const validation = await this.validateUnintentionalAnyPhaseCompletion(phase, finalUnintentionalAnyMetrics);\n\n      if (!validation.success && this.config.safetySettings.automaticRollbackEnabled) {\n        console.warn(`⚠️ Phase validation failed, rolling back to checkpoint: ${checkpointId}`);\n        await this.rollbackToCheckpoint(checkpointId);\n        throw new Error(`Phase validation failed: ${validation.errors.join(', ')}`);\n      }\n\n      const executionTime = Date.now() - startTime;\n\n      const result: PhaseResult = {\n        phaseId: phase.id,\n        success: campaignResult.success,\n        metricsImprovement: {\n          typeScriptErrorsReduced: metricsImprovement.explicitAnyWarningsReduced,\n          lintingWarningsReduced: metricsImprovement.explicitAnyWarningsReduced,\n          buildTimeImproved: 0, // Not directly impacted by any elimination\n          enterpriseSystemsAdded: 0\n        },\n        filesProcessed: campaignResult.filesProcessed,\n        errorsFixed: campaignResult.errorsFixed,\n        warningsFixed: campaignResult.warningsFixed,\n        executionTime,\n        safetyEvents: campaignResult.safetyEvents\n      };\n\n      console.log(`✅ Unintentional Any Elimination Phase completed successfully`);\n      console.log(`   Files processed: ${result.filesProcessed}`);\n      console.log(`   Warnings fixed: ${result.warningsFixed}`);\n      console.log(`   Execution time: ${(result.executionTime / 1000).toFixed(2)}s`);\n\n      return result;\n\n    } catch (error) {\n      console.error(`❌ Unintentional Any Elimination Phase failed:`, error);\n\n      const executionTime = Date.now() - startTime;\n\n      return {\n        phaseId: phase.id,\n        success: false,\n        metricsImprovement: {\n          typeScriptErrorsReduced: 0,\n          lintingWarningsReduced: 0,\n          buildTimeImproved: 0,\n          enterpriseSystemsAdded: 0\n        },\n        filesProcessed: 0,\n        errorsFixed: 0,\n        warningsFixed: 0,\n        executionTime,\n        safetyEvents: [\n          {\n            type: SafetyEventType.EMERGENCY_RECOVERY,\n            timestamp: new Date(),\n            description: `Unintentional Any Elimination Phase failed: ${error instanceof Error ? error.message : String(error)}`,\n            severity: SafetyEventSeverity.ERROR,\n            action: 'PHASE_FAILURE'\n          }\n        ]\n      };\n    }\n  }\n\n  /**\n   * Create campaign configuration that includes unintentional any elimination phases\n   */\n  static createUnintentionalAnyEliminationConfig(\n    baseConfig?: Partial<CampaignConfig>,\n    unintentionalAnyConfig?: Partial<UnintentionalAnyConfig>\n  ): CampaignConfig {\n    const unintentionalAnyCampaign = new UnintentionalAnyEliminationCampaign(unintentionalAnyConfig);\n    const unintentionalAnyPhases = unintentionalAnyCampaign.createCampaignPhases();\n\n    const defaultConfig: CampaignConfig = {\n      phases: [\n        // Include existing phases if provided\n        ...(baseConfig?.phases || []),\n        // Add unintentional any elimination phases\n        ...unintentionalAnyPhases\n      ],\n      safetySettings: {\n        maxFilesPerBatch: unintentionalAnyConfig?.maxFilesPerBatch || 15,\n        buildValidationFrequency: unintentionalAnyConfig?.validationFrequency || 5,\n        testValidationFrequency: 10,\n        corruptionDetectionEnabled: true,\n        automaticRollbackEnabled: true,\n        stashRetentionDays: 7,\n        ...baseConfig?.safetySettings\n      },\n      progressTargets: {\n        typeScriptErrors: 0,\n        lintingWarnings: 0,\n        buildTime: 10,\n        enterpriseSystems: 200,\n        ...baseConfig?.progressTargets\n      },\n      toolConfiguration: {\n        enhancedErrorFixer: 'scripts/typescript-fixes/fix-typescript-errors-enhanced-v3.js',\n        explicitAnyFixer: 'src/services/campaign/unintentional-any-elimination/ProgressiveImprovementEngine.ts',\n        unusedVariablesFixer: 'scripts/typescript-fixes/fix-unused-variables-enhanced.js',\n        consoleStatementFixer: 'scripts/lint-fixes/fix-console-statements-only.js',\n        ...baseConfig?.toolConfiguration\n      }\n    };\n\n    return defaultConfig;\n  }\n\n  /**\n   * Get unintentional any specific metrics\n   */\n  async getUnintentionalAnyMetrics(): Promise<UnintentionalAnyMetrics> {\n    try {\n      // Get current explicit-any warning count\n      const lintingOutput = await this.getLintingOutput();\n      const explicitAnyWarnings = this.countExplicitAnyWarnings(lintingOutput);\n\n      // Get documentation coverage\n      const documentationReport = await this.unintentionalAnyCampaign.getDocumentationReport();\n\n      return {\n        totalAnyTypes: explicitAnyWarnings,\n        intentionalAnyTypes: documentationReport.totalIntentionalAnyTypes,\n        unintentionalAnyTypes: explicitAnyWarnings - documentationReport.totalIntentionalAnyTypes,\n        documentedAnyTypes: Math.round(documentationReport.totalIntentionalAnyTypes * documentationReport.documentationCoverage / 100),\n        documentationCoverage: documentationReport.documentationCoverage,\n        reductionFromBaseline: 0, // Would be calculated from initial baseline\n        targetReduction: this.unintentionalAnyConfig.targetReductionPercentage\n      };\n    } catch (error) {\n      console.warn(`Warning: Could not get unintentional any metrics: ${error instanceof Error ? error.message : String(error)}`);\n\n      return {\n        totalAnyTypes: 0,\n        intentionalAnyTypes: 0,\n        unintentionalAnyTypes: 0,\n        documentedAnyTypes: 0,\n        documentationCoverage: 0,\n        reductionFromBaseline: 0,\n        targetReduction: this.unintentionalAnyConfig.targetReductionPercentage\n      };\n    }\n  }\n\n  /**\n   * Get enhanced progress metrics that include unintentional any metrics\n   */\n  async getUnintentionalAnyProgressMetrics(): Promise<UnintentionalAnyProgressMetrics> {\n    const baseMetrics = await this.getCurrentMetrics();\n    const unintentionalAnyMetrics = await this.getUnintentionalAnyMetrics();\n\n    return {\n      ...baseMetrics,\n      unintentionalAnyMetrics\n    };\n  }\n\n  /**\n   * Validate unintentional any phase completion\n   */\n  async validateUnintentionalAnyPhaseCompletion(\n    phase: CampaignPhase,\n    metrics: UnintentionalAnyMetrics\n  ): Promise<ValidationResult> {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    try {\n      // Validate based on phase type\n      switch (phase.id) {\n        case 'unintentional-any-analysis':\n          // Analysis phase should complete without increasing any types\n          if (metrics.totalAnyTypes < 0) {\n            errors.push('Analysis phase failed to count any types');\n          }\n          break;\n\n        case 'unintentional-any-replacement':\n          // Replacement phase should reduce unintentional any types\n          if (metrics.reductionFromBaseline < this.unintentionalAnyConfig.targetReductionPercentage * 0.5) {\n            warnings.push(`Reduction ${metrics.reductionFromBaseline}% is below target ${this.unintentionalAnyConfig.targetReductionPercentage}%`);\n          }\n          break;\n\n        case 'intentional-any-documentation':\n          // Documentation phase should improve documentation coverage\n          if (metrics.documentationCoverage < 80) {\n            warnings.push(`Documentation coverage ${metrics.documentationCoverage}% is below 80%`);\n          }\n          break;\n      }\n\n      // Validate build still works\n      const buildValidation = await this.validateBuild();\n      if (!buildValidation.success) {\n        errors.push('Build validation failed after unintentional any elimination');\n        errors.push(...buildValidation.errors);\n      }\n\n      return {\n        success: errors.length === 0,\n        errors,\n        warnings,\n        metrics: await this.getCurrentMetrics()\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        errors: [`Validation error: ${error instanceof Error ? error.message : String(error)}`],\n        warnings: []\n      };\n    }\n  }\n\n  /**\n   * Calculate metrics improvement for unintentional any elimination\n   */\n  private calculateUnintentionalAnyImprovement(\n    initial: UnintentionalAnyMetrics,\n    final: UnintentionalAnyMetrics\n  ): { explicitAnyWarningsReduced: number; documentationImproved: number } {\n    return {\n      explicitAnyWarningsReduced: initial.unintentionalAnyTypes - final.unintentionalAnyTypes,\n      documentationImproved: final.documentationCoverage - initial.documentationCoverage\n    };\n  }\n\n  /**\n   * Get linting output for analysis\n   */\n  private async getLintingOutput(): Promise<string> {\n    try {\n      const { execSync } = require('child_process');\n      return execSync('yarn lint 2>&1', { encoding: 'utf8', stdio: 'pipe' });\n    } catch (error: any) {\n      // ESLint returns non-zero exit code when warnings/errors are found\n      return error.stdout || error.message || '';\n    }\n  }\n\n  /**\n   * Count explicit-any warnings in linting output\n   */\n  private countExplicitAnyWarnings(lintingOutput: string): number {\n    const explicitAnyMatches = lintingOutput.match(/@typescript-eslint\\/no-explicit-any/g);\n    return explicitAnyMatches ? explicitAnyMatches.length : 0;\n  }\n\n  /**\n   * Validate build after changes\n   */\n  private async validateBuild(): Promise<{ success: boolean; errors: string[] }> {\n    try {\n      const { execSync } = require('child_process');\n      execSync('yarn build', { encoding: 'utf8', stdio: 'pipe' });\n      return { success: true, errors: [] };\n    } catch (error: any) {\n      return {\n        success: false,\n        errors: [error.message || 'Build failed']\n      };\n    }\n  }\n\n  /**\n   * Get the unintentional any campaign instance\n   */\n  getUnintentionalAnyCampaign(): UnintentionalAnyEliminationCampaign {\n    return this.unintentionalAnyCampaign;\n  }\n\n  /**\n   * Update unintentional any configuration\n   */\n  updateUnintentionalAnyConfig(newConfig: Partial<UnintentionalAnyConfig>): void {\n    this.unintentionalAnyConfig = { ...this.unintentionalAnyConfig, ...newConfig };\n    this.unintentionalAnyCampaign.updateConfig(newConfig);\n  }\n\n  /**\n   * Get current unintentional any configuration\n   */\n  getUnintentionalAnyConfig(): UnintentionalAnyConfig {\n    return { ...this.unintentionalAnyConfig };\n  }\n}\n\n/**\n * Factory function to create a campaign controller with unintentional any elimination support\n */\nexport function createUnintentionalAnyCampaignController(\n  baseConfig?: Partial<CampaignConfig>,\n  unintentionalAnyConfig?: Partial<UnintentionalAnyConfig>\n): UnintentionalAnyCampaignController {\n  const config = UnintentionalAnyCampaignController.createUnintentionalAnyEliminationConfig(\n    baseConfig,\n    unintentionalAnyConfig\n  );\n\n  return new UnintentionalAnyCampaignController(config, unintentionalAnyConfig);\n}\n\n/**\n * Integration helper to add unintentional any elimination to existing campaigns\n */\nexport class UnintentionalAnyIntegrationHelper {\n  /**\n   * Add unintentional any elimination phases to existing campaign configuration\n   */\n  static addUnintentionalAnyPhases(\n    existingConfig: CampaignConfig,\n    unintentionalAnyConfig?: Partial<UnintentionalAnyConfig>\n  ): CampaignConfig {\n    const unintentionalAnyCampaign = new UnintentionalAnyEliminationCampaign(unintentionalAnyConfig);\n    const unintentionalAnyPhases = unintentionalAnyCampaign.createCampaignPhases();\n\n    return {\n      ...existingConfig,\n      phases: [\n        ...existingConfig.phases,\n        ...unintentionalAnyPhases\n      ]\n    };\n  }\n\n  /**\n   * Create compatibility layer with existing automation scripts\n   */\n  static createAutomationScriptCompatibility(): {\n    explicitAnyFixer: string;\n    unintentionalAnyAnalyzer: string;\n    documentationGenerator: string;\n  } {\n    return {\n      explicitAnyFixer: 'src/services/campaign/unintentional-any-elimination/ProgressiveImprovementEngine.ts',\n      unintentionalAnyAnalyzer: 'src/services/campaign/unintentional-any-elimination/AnyTypeClassifier.ts',\n      documentationGenerator: 'src/services/campaign/unintentional-any-elimination/AutoDocumentationGenerator.ts'\n    };\n  }\n\n  /**\n   * Resolve conflicts with other campaign priorities\n   */\n  static resolveCampaignPriorityConflicts(\n    campaigns: CampaignConfig[],\n    priorityOrder: string[]\n  ): CampaignConfig {\n    // Sort campaigns by priority order\n    const sortedCampaigns = campaigns.sort((a, b) => {\n      const aIndex = priorityOrder.findIndex(p => a.phases.some(phase => phase.id.includes(p)));\n      const bIndex = priorityOrder.findIndex(p => b.phases.some(phase => phase.id.includes(p)));\n      return aIndex - bIndex;\n    });\n\n    // Merge campaigns with priority-based phase ordering\n    const mergedPhases: CampaignPhase[] = [];\n    const mergedSafetySettings: SafetySettings = {\n      maxFilesPerBatch: Math.min(...campaigns.map(c => c.safetySettings.maxFilesPerBatch)),\n      buildValidationFrequency: Math.min(...campaigns.map(c => c.safetySettings.buildValidationFrequency)),\n      testValidationFrequency: Math.min(...campaigns.map(c => c.safetySettings.testValidationFrequency)),\n      corruptionDetectionEnabled: campaigns.every(c => c.safetySettings.corruptionDetectionEnabled),\n      automaticRollbackEnabled: campaigns.every(c => c.safetySettings.automaticRollbackEnabled),\n      stashRetentionDays: Math.max(...campaigns.map(c => c.safetySettings.stashRetentionDays))\n    };\n\n    // Add phases in priority order\n    for (const priority of priorityOrder) {\n      for (const campaign of sortedCampaigns) {\n        const priorityPhases = campaign.phases.filter(phase => phase.id.includes(priority));\n        mergedPhases.push(...priorityPhases);\n      }\n    }\n\n    return {\n      phases: mergedPhases,\n      safetySettings: mergedSafetySettings,\n      progressTargets: sortedCampaigns[0].progressTargets,\n      toolConfiguration: {\n        ...sortedCampaigns[0].toolConfiguration,\n        ...UnintentionalAnyIntegrationHelper.createAutomationScriptCompatibility()\n      }\n    };\n  }\n}\n"],"version":3}