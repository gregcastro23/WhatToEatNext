9af81487a7694b7ce546ef60c6643bce
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createErrorBoundaryForType = exports.useErrorHandler = exports.handleSyncError = exports.handleAsyncError = exports.globalErrorHandler = exports.ErrorHandler = exports.classifyError = exports.createEnhancedError = exports.ErrorSeverity = exports.ErrorType = void 0;
const react_1 = __importDefault(require("react"));
const logger_1 = require("@/utils/logger");
const ErrorBoundary_1 = __importDefault(require("@/components/error-boundaries/ErrorBoundary"));
// Error types for better categorization
var ErrorType;
(function (ErrorType) {
    ErrorType["NETWORK"] = "NETWORK";
    ErrorType["VALIDATION"] = "VALIDATION";
    ErrorType["AUTHENTICATION"] = "AUTHENTICATION";
    ErrorType["AUTHORIZATION"] = "AUTHORIZATION";
    ErrorType["NOT_FOUND"] = "NOT_FOUND";
    ErrorType["SERVER_ERROR"] = "SERVER_ERROR";
    ErrorType["CLIENT_ERROR"] = "CLIENT_ERROR";
    ErrorType["ASTROLOGICAL_CALCULATION"] = "ASTROLOGICAL_CALCULATION";
    ErrorType["DATA_PROCESSING"] = "DATA_PROCESSING";
    ErrorType["COMPONENT_ERROR"] = "COMPONENT_ERROR";
    ErrorType["UNKNOWN"] = "UNKNOWN";
})(ErrorType || (exports.ErrorType = ErrorType = {}));
// Error severity levels
var ErrorSeverity;
(function (ErrorSeverity) {
    ErrorSeverity["LOW"] = "LOW";
    ErrorSeverity["MEDIUM"] = "MEDIUM";
    ErrorSeverity["HIGH"] = "HIGH";
    ErrorSeverity["CRITICAL"] = "CRITICAL";
})(ErrorSeverity || (exports.ErrorSeverity = ErrorSeverity = {}));
// User-friendly error messages
const USER_FRIENDLY_MESSAGES = {
    [ErrorType.NETWORK]: 'Unable to connect to the server. Please check your internet connection and try again.',
    [ErrorType.VALIDATION]: 'Please check your input and try again.',
    [ErrorType.AUTHENTICATION]: 'Please log in to continue.',
    [ErrorType.AUTHORIZATION]: 'You don\'t have permission to access this resource.',
    [ErrorType.NOT_FOUND]: 'The requested information could not be found.',
    [ErrorType.SERVER_ERROR]: 'A server error occurred. Please try again later.',
    [ErrorType.CLIENT_ERROR]: 'An error occurred while processing your request.',
    [ErrorType.ASTROLOGICAL_CALCULATION]: 'Unable to calculate astrological data. Using cached information.',
    [ErrorType.DATA_PROCESSING]: 'Error processing data. Please try again.',
    [ErrorType.COMPONENT_ERROR]: 'A component failed to load. Please refresh the page.',
    [ErrorType.UNKNOWN]: 'An unexpected error occurred. Please try again.'
};
// Create enhanced error
function createEnhancedError(message, type = ErrorType.UNKNOWN, severity = ErrorSeverity.MEDIUM, context, originalError) {
    const error = new Error(message);
    error.type = type;
    error.severity = severity;
    error.context = context;
    error.userMessage = USER_FRIENDLY_MESSAGES[type];
    error.recoverable = isRecoverable(type);
    error.retryable = isRetryable(type);
    error.timestamp = new Date();
    error.errorId = `error_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    // Preserve original error stack if available
    if (originalError) {
        error.stack = originalError.stack;
        error.cause = originalError;
    }
    return error;
}
exports.createEnhancedError = createEnhancedError;
// Determine if error is recoverable
function isRecoverable(type) {
    return [
        ErrorType.NETWORK,
        ErrorType.ASTROLOGICAL_CALCULATION,
        ErrorType.DATA_PROCESSING,
        ErrorType.COMPONENT_ERROR
    ].includes(type);
}
// Determine if error is retryable
function isRetryable(type) {
    return [
        ErrorType.NETWORK,
        ErrorType.SERVER_ERROR,
        ErrorType.ASTROLOGICAL_CALCULATION,
        ErrorType.DATA_PROCESSING
    ].includes(type);
}
// Error classification based on error message or type
function classifyError(error) {
    const message = typeof error === 'string' ? error : error.message;
    const lowerMessage = message.toLowerCase();
    if (lowerMessage.includes('network') || lowerMessage.includes('fetch') || lowerMessage.includes('connection')) {
        return ErrorType.NETWORK;
    }
    if (lowerMessage.includes('validation') || lowerMessage.includes('invalid')) {
        return ErrorType.VALIDATION;
    }
    if (lowerMessage.includes('unauthorized') || lowerMessage.includes('authentication')) {
        return ErrorType.AUTHENTICATION;
    }
    if (lowerMessage.includes('forbidden') || lowerMessage.includes('permission')) {
        return ErrorType.AUTHORIZATION;
    }
    if (lowerMessage.includes('not found') || lowerMessage.includes('404')) {
        return ErrorType.NOT_FOUND;
    }
    if (lowerMessage.includes('server') || lowerMessage.includes('500') || lowerMessage.includes('503')) {
        return ErrorType.SERVER_ERROR;
    }
    if (lowerMessage.includes('planetary') || lowerMessage.includes('astrological') || lowerMessage.includes('zodiac')) {
        return ErrorType.ASTROLOGICAL_CALCULATION;
    }
    if (lowerMessage.includes('component') || lowerMessage.includes('render')) {
        return ErrorType.COMPONENT_ERROR;
    }
    return ErrorType.UNKNOWN;
}
exports.classifyError = classifyError;
// Error handler class
class ErrorHandler {
    constructor() {
        this.recoveryStrategies = [];
        this.errorQueue = [];
        this.maxQueueSize = 50;
    }
    // Add recovery strategy
    addRecoveryStrategy(strategy) {
        this.recoveryStrategies.push(strategy);
    }
    // Handle error with recovery attempts
    async handleError(error, context) {
        let enhancedError;
        if ('type' in error && 'severity' in error) {
            enhancedError = error;
        }
        else {
            const type = classifyError(error);
            const severity = this.determineSeverity(type);
            enhancedError = createEnhancedError(error.message, type, severity, context, error);
        }
        // Log the error
        this.logError(enhancedError);
        // Add to error queue
        this.addToQueue(enhancedError);
        // Attempt recovery
        const recoveryResult = await this.attemptRecovery(enhancedError);
        if (recoveryResult.success) {
            logger_1.logger.info(`Error recovered successfully: ${enhancedError.errorId}`);
            return recoveryResult.data;
        }
        // If recovery failed, throw the enhanced error
        throw enhancedError;
    }
    // Attempt error recovery
    async attemptRecovery(error) {
        for (const strategy of this.recoveryStrategies) {
            if (strategy.canRecover(error)) {
                try {
                    const result = await strategy.recover(error);
                    return { success: true, data: result };
                }
                catch (recoveryError) {
                    logger_1.logger.warn(`Recovery strategy failed for error ${error.errorId}:`, recoveryError);
                    // Try fallback if available
                    if (strategy.fallback) {
                        try {
                            const fallbackResult = strategy.fallback();
                            return { success: true, data: fallbackResult };
                        }
                        catch (fallbackError) {
                            logger_1.logger.warn(`Fallback strategy failed for error ${error.errorId}:`, fallbackError);
                        }
                    }
                }
            }
        }
        return { success: false };
    }
    // Determine error severity
    determineSeverity(type) {
        switch (type) {
            case ErrorType.AUTHENTICATION:
            case ErrorType.AUTHORIZATION:
                return ErrorSeverity.HIGH;
            case ErrorType.SERVER_ERROR:
                return ErrorSeverity.HIGH;
            case ErrorType.NETWORK:
            case ErrorType.ASTROLOGICAL_CALCULATION:
                return ErrorSeverity.MEDIUM;
            case ErrorType.VALIDATION:
            case ErrorType.NOT_FOUND:
                return ErrorSeverity.LOW;
            default:
                return ErrorSeverity.MEDIUM;
        }
    }
    // Log error with appropriate level
    logError(error) {
        const logData = {
            errorId: error.errorId,
            type: error.type,
            severity: error.severity,
            message: error.message,
            userMessage: error.userMessage,
            context: error.context,
            timestamp: error.timestamp,
            stack: error.stack
        };
        switch (error.severity) {
            case ErrorSeverity.CRITICAL:
            case ErrorSeverity.HIGH:
                logger_1.logger.error('High severity error:', logData);
                break;
            case ErrorSeverity.MEDIUM:
                logger_1.logger.warn('Medium severity error:', logData);
                break;
            case ErrorSeverity.LOW:
                logger_1.logger.info('Low severity error:', logData);
                break;
        }
    }
    // Add error to queue for analysis
    addToQueue(error) {
        this.errorQueue.push(error);
        // Maintain queue size
        if (this.errorQueue.length > this.maxQueueSize) {
            this.errorQueue.shift();
        }
    }
    // Get error statistics
    getErrorStats() {
        const byType = {};
        const bySeverity = {};
        this.errorQueue.forEach(error => {
            byType[error.type] = (byType[error.type] || 0) + 1;
            bySeverity[error.severity] = (bySeverity[error.severity] || 0) + 1;
        });
        return {
            total: this.errorQueue.length,
            byType,
            bySeverity,
            recent: this.errorQueue.slice(-10) // Last 10 errors
        };
    }
    // Clear error queue
    clearErrorQueue() {
        this.errorQueue = [];
    }
}
exports.ErrorHandler = ErrorHandler;
// Global error handler instance
exports.globalErrorHandler = new ErrorHandler();
// Default recovery strategies
exports.globalErrorHandler.addRecoveryStrategy({
    canRecover: (error) => error.type === ErrorType.ASTROLOGICAL_CALCULATION,
    recover: async (error) => {
        logger_1.logger.info(`Attempting to recover from astrological calculation error: ${error.errorId}`);
        // Return cached astrological data
        const cachedData = localStorage.getItem('cachedAstrologicalData');
        if (cachedData) {
            return JSON.parse(cachedData);
        }
        throw new Error('No cached astrological data available');
    },
    fallback: () => {
        // Return default astrological state
        return {
            zodiacSign: 'aries',
            lunarPhase: 'new moon',
            elementalState: { Fire: 0.25, Water: 0.25, Earth: 0.25, Air: 0.25 }
        };
    }
});
exports.globalErrorHandler.addRecoveryStrategy({
    canRecover: (error) => error.type === ErrorType.NETWORK,
    recover: async (error) => {
        var _a;
        logger_1.logger.info(`Attempting to recover from network error: ${error.errorId}`);
        // Try to use cached data
        const cacheKey = (_a = error.context) === null || _a === void 0 ? void 0 : _a.cacheKey;
        if (cacheKey) {
            const cachedData = localStorage.getItem(cacheKey);
            if (cachedData) {
                return JSON.parse(cachedData);
            }
        }
        throw new Error('No cached data available for network recovery');
    }
});
// Utility functions for common error scenarios
function handleAsyncError(promise, context) {
    return promise.catch(error => {
        return exports.globalErrorHandler.handleError(error, context);
    });
}
exports.handleAsyncError = handleAsyncError;
function handleSyncError(fn, context) {
    try {
        return fn();
    }
    catch (error) {
        throw exports.globalErrorHandler.handleError(error, context);
    }
}
exports.handleSyncError = handleSyncError;
// React hook for error handling
function useErrorHandler() {
    const handleError = react_1.default.useCallback(async (error, context) => {
        try {
            return await exports.globalErrorHandler.handleError(error, context);
        }
        catch (enhancedError) {
            // Re-throw enhanced error for component error boundaries to catch
            throw enhancedError;
        }
    }, []);
    const getErrorStats = react_1.default.useCallback(() => {
        return exports.globalErrorHandler.getErrorStats();
    }, []);
    return { handleError, getErrorStats };
}
exports.useErrorHandler = useErrorHandler;
// Error boundary helper for specific error types
function createErrorBoundaryForType(errorType) {
    return function ErrorBoundaryForType({ children }) {
        return react_1.default.createElement(ErrorBoundary_1.default, {
            fallback: (error, errorInfo) => {
                const enhancedError = createEnhancedError(error.message, errorType, ErrorSeverity.MEDIUM, { componentStack: errorInfo.componentStack });
                return react_1.default.createElement('div', {
                    className: "bg-yellow-50 border border-yellow-200 rounded-lg p-4 m-2"
                }, [
                    react_1.default.createElement('h4', {
                        key: 'title',
                        className: "text-yellow-800 font-medium mb-2"
                    }, `${errorType} Error`),
                    react_1.default.createElement('p', {
                        key: 'message',
                        className: "text-yellow-700 text-sm mb-3"
                    }, enhancedError.userMessage),
                    react_1.default.createElement('button', {
                        key: 'button',
                        onClick: () => window.location.reload(),
                        className: "bg-yellow-600 text-white px-3 py-1 rounded text-sm hover:bg-yellow-700 transition-colors"
                    }, 'Reload Page')
                ]);
            }
        }, children);
    };
}
exports.createErrorBoundaryForType = createErrorBoundaryForType;
exports.default = ErrorHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,