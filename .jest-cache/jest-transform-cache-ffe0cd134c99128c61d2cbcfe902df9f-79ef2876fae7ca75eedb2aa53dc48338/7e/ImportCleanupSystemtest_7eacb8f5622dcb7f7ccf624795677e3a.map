{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/ImportCleanupSystem.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/ImportCleanupSystem.test.ts"],"sourcesContent":["/**\n * Import Cleanup System Tests\n * Comprehensive test suite for automated import cleanup functionality\n */\n\nimport { ImportCleanupSystem, DEFAULT_IMPORT_CLEANUP_CONFIG, ImportCleanupConfig } from './ImportCleanupSystem';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { execSync } from 'child_process';\n\n// Mock dependencies\njest.mock('fs');\njest.mock('child_process');\njest.mock('../../utils/logger');\n\nconst mockFs = fs as jest.Mocked<typeof fs>;\nconst mockExecSync = execSync as jest.MockedFunction<typeof execSync>;\n\ndescribe('ImportCleanupSystem', () => {\n  let importCleanupSystem: ImportCleanupSystem;\n  let testConfig: ImportCleanupConfig;\n\n  beforeEach(() => {\n    testConfig = {\n      ...DEFAULT_IMPORT_CLEANUP_CONFIG,\n      maxFilesPerBatch: 5,\n      safetyValidationEnabled: true\n    };\n    importCleanupSystem = new ImportCleanupSystem(testConfig);\n    \n    // Reset mocks\n    jest.clearAllMocks();\n  });\n\n  describe('detectUnusedImports', () => {\n    test('detects unused named imports', async () => {\n      const testFileContent = `\nimport { usedFunction, unusedFunction } from './utils';\nimport { AnotherUnused } from './other';\n\nfunction component() {\n  return usedFunction();\n}\n`;\n\n      mockFs.readFileSync.mockReturnValue(testFileContent);\n      mockExecSync.mockReturnValue('test-file.ts\\n');\n\n      const unusedImports = await importCleanupSystem.detectUnusedImports(['test-file.ts']);\n\n      expect(unusedImports).toHaveLength(2);\n      expect(unusedImports[0].importName).toBe('unusedFunction');\n      expect(unusedImports[1].importName).toBe('AnotherUnused');\n    });\n\n    test('detects unused default imports', async () => {\n      const testFileContent = `\nimport UnusedDefault from './utils';\nimport UsedDefault from './other';\n\nfunction component() {\n  return UsedDefault();\n}\n`;\n\n      mockFs.readFileSync.mockReturnValue(testFileContent);\n      mockExecSync.mockReturnValue('test-file.ts\\n');\n\n      const unusedImports = await importCleanupSystem.detectUnusedImports(['test-file.ts']);\n\n      expect(unusedImports).toHaveLength(1);\n      expect(unusedImports[0].importName).toBe('UnusedDefault');\n    });\n\n    test('detects unused namespace imports', async () => {\n      const testFileContent = `\nimport * as UnusedNamespace from './utils';\nimport * as UsedNamespace from './other';\n\nfunction component() {\n  return UsedNamespace.someFunction();\n}\n`;\n\n      mockFs.readFileSync.mockReturnValue(testFileContent);\n      mockExecSync.mockReturnValue('test-file.ts\\n');\n\n      const unusedImports = await importCleanupSystem.detectUnusedImports(['test-file.ts']);\n\n      expect(unusedImports).toHaveLength(1);\n      expect(unusedImports[0].importName).toBe('UnusedNamespace');\n    });\n\n    test('correctly identifies used imports in JSX', async () => {\n      const testFileContent = `\nimport React from 'react';\nimport { Button, UnusedComponent } from './components';\n\nfunction App() {\n  return <Button>Click me</Button>;\n}\n`;\n\n      mockFs.readFileSync.mockReturnValue(testFileContent);\n      mockExecSync.mockReturnValue('test-file.tsx\\n');\n\n      const unusedImports = await importCleanupSystem.detectUnusedImports(['test-file.tsx']);\n\n      expect(unusedImports).toHaveLength(1);\n      expect(unusedImports[0].importName).toBe('UnusedComponent');\n    });\n\n    test('correctly identifies used type imports', async () => {\n      const testFileContent = `\nimport type { UsedType, UnusedType } from './types';\n\nfunction component(): UsedType {\n  return {} as UsedType;\n}\n`;\n\n      mockFs.readFileSync.mockReturnValue(testFileContent);\n      mockExecSync.mockReturnValue('test-file.ts\\n');\n\n      const unusedImports = await importCleanupSystem.detectUnusedImports(['test-file.ts']);\n\n      expect(unusedImports).toHaveLength(1);\n      expect(unusedImports[0].importName).toBe('UnusedType');\n      expect(unusedImports[0].isTypeImport).toBe(true);\n    });\n  });\n\n  describe('removeUnusedImports', () => {\n    test('removes unused imports from file', async () => {\n      const originalContent = `\nimport { usedFunction, unusedFunction } from './utils';\nimport { AnotherUnused } from './other';\n\nfunction component() {\n  return usedFunction();\n}\n`;\n\n      const expectedContent = `\nimport { usedFunction } from './utils';\n\nfunction component() {\n  return usedFunction();\n}\n`;\n\n      mockFs.readFileSync.mockReturnValue(originalContent);\n      let writtenContent = '';\n      mockFs.writeFileSync.mockImplementation((path, content) => {\n        writtenContent = content as string;\n      });\n\n      const removedCount = await importCleanupSystem.removeUnusedImports(['test-file.ts']);\n\n      expect(removedCount).toBe(2);\n      expect(writtenContent.trim()).toBe(expectedContent.trim());\n    });\n\n    test('removes entire import line when all imports are unused', async () => {\n      const originalContent = `\nimport { unusedFunction1, unusedFunction2 } from './utils';\nimport { usedFunction } from './other';\n\nfunction component() {\n  return usedFunction();\n}\n`;\n\n      const expectedContent = `\nimport { usedFunction } from './other';\n\nfunction component() {\n  return usedFunction();\n}\n`;\n\n      mockFs.readFileSync.mockReturnValue(originalContent);\n      let writtenContent = '';\n      mockFs.writeFileSync.mockImplementation((path, content) => {\n        writtenContent = content as string;\n      });\n\n      const removedCount = await importCleanupSystem.removeUnusedImports(['test-file.ts']);\n\n      expect(removedCount).toBe(2);\n      expect(writtenContent.trim()).toBe(expectedContent.trim());\n    });\n  });\n\n  describe('organizeImports', () => {\n    test('groups external and internal imports', async () => {\n      const originalContent = `\nimport { internalFunction } from './utils';\nimport React from 'react';\nimport { externalFunction } from 'lodash';\nimport { anotherInternal } from '../other';\n\nfunction component() {\n  return null;\n}\n`;\n\n      const expectedContent = `\nimport React from 'react';\nimport { externalFunction } from 'lodash';\n\nimport { anotherInternal } from '../other';\nimport { internalFunction } from './utils';\n\nfunction component() {\n  return null;\n}\n`;\n\n      mockFs.readFileSync.mockReturnValue(originalContent);\n      let writtenContent = '';\n      mockFs.writeFileSync.mockImplementation((path, content) => {\n        writtenContent = content as string;\n      });\n\n      const organizedCount = await importCleanupSystem.organizeImports(['test-file.ts']);\n\n      expect(organizedCount).toBe(1);\n      expect(writtenContent.trim()).toBe(expectedContent.trim());\n    });\n\n    test('separates type imports when configured', async () => {\n      const originalContent = `\nimport { Component } from 'react';\nimport type { ReactNode } from 'react';\nimport { internalFunction } from './utils';\nimport type { InternalType } from './types';\n\nfunction component() {\n  return null;\n}\n`;\n\n      mockFs.readFileSync.mockReturnValue(originalContent);\n      let writtenContent = '';\n      mockFs.writeFileSync.mockImplementation((path, content) => {\n        writtenContent = content as string;\n      });\n\n      const organizedCount = await importCleanupSystem.organizeImports(['test-file.ts']);\n\n      expect(organizedCount).toBe(1);\n      expect(writtenContent).toContain('import type { ReactNode }');\n      expect(writtenContent).toContain('import { Component }');\n      expect(writtenContent).toContain('import type { InternalType }');\n      expect(writtenContent).toContain('import { internalFunction }');\n    });\n\n    test('sorts imports alphabetically when configured', async () => {\n      const originalContent = `\nimport { zebra } from 'zoo';\nimport { apple } from 'fruits';\nimport { banana } from 'fruits';\n\nfunction component() {\n  return null;\n}\n`;\n\n      mockFs.readFileSync.mockReturnValue(originalContent);\n      let writtenContent = '';\n      mockFs.writeFileSync.mockImplementation((path, content) => {\n        writtenContent = content as string;\n      });\n\n      const organizedCount = await importCleanupSystem.organizeImports(['test-file.ts']);\n\n      expect(organizedCount).toBe(1);\n      const lines = writtenContent.split('\\n').filter(line => line.startsWith('import'));\n      expect(lines[0]).toContain('apple');\n      expect(lines[1]).toContain('banana');\n      expect(lines[2]).toContain('zebra');\n    });\n  });\n\n  describe('enforceImportStyle', () => {\n    test('adds trailing commas to multi-line imports', async () => {\n      const originalContent = `\nimport {\n  functionA,\n  functionB\n} from './utils';\n\nfunction component() {\n  return null;\n}\n`;\n\n      const expectedContent = `\nimport {\n  functionA,\n  functionB,\n} from './utils';\n\nfunction component() {\n  return null;\n}\n`;\n\n      mockFs.readFileSync.mockReturnValue(originalContent);\n      let writtenContent = '';\n      mockFs.writeFileSync.mockImplementation((path, content) => {\n        writtenContent = content as string;\n      });\n\n      const fixedCount = await importCleanupSystem.enforceImportStyle(['test-file.ts']);\n\n      expect(fixedCount).toBe(1);\n      expect(writtenContent.trim()).toBe(expectedContent.trim());\n    });\n\n    test('breaks long import lines when over max length', async () => {\n      const config = {\n        ...testConfig,\n        organizationRules: {\n          ...testConfig.organizationRules,\n          maxLineLength: 50\n        }\n      };\n      const system = new ImportCleanupSystem(config);\n\n      const originalContent = `\nimport { veryLongFunctionName, anotherVeryLongFunctionName, yetAnotherLongName } from './utils';\n\nfunction component() {\n  return null;\n}\n`;\n\n      mockFs.readFileSync.mockReturnValue(originalContent);\n      let writtenContent = '';\n      mockFs.writeFileSync.mockImplementation((path, content) => {\n        writtenContent = content as string;\n      });\n\n      const fixedCount = await system.enforceImportStyle(['test-file.ts']);\n\n      expect(fixedCount).toBe(1);\n      expect(writtenContent).toContain('{\\n  veryLongFunctionName');\n      expect(writtenContent).toContain('  anotherVeryLongFunctionName');\n      expect(writtenContent).toContain('  yetAnotherLongName\\n}');\n    });\n  });\n\n  describe('executeCleanup', () => {\n    test('executes complete cleanup workflow', async () => {\n      const testFiles = ['file1.ts', 'file2.ts'];\n      const testContent = `\nimport { usedFunction, unusedFunction } from './utils';\nimport React from 'react';\n\nfunction component() {\n  return usedFunction();\n}\n`;\n\n      mockExecSync.mockReturnValue(testFiles.join('\\n'));\n      mockFs.readFileSync.mockReturnValue(testContent);\n      mockFs.writeFileSync.mockImplementation(() => {});\n\n      const result = await importCleanupSystem.executeCleanup(testFiles);\n\n      expect(result.filesProcessed.length).toBeGreaterThan(0);\n      expect(result.unusedImportsRemoved).toBeGreaterThan(0);\n      expect(result.buildValidationPassed).toBe(true);\n      expect(result.errors).toHaveLength(0);\n    });\n\n    test('handles build validation failures', async () => {\n      const testFiles = ['file1.ts'];\n      \n      mockExecSync\n        .mockReturnValueOnce(testFiles.join('\\n')) // File listing\n        .mockImplementationOnce(() => { // Build validation\n          throw new Error('Build failed');\n        });\n      \n      mockFs.readFileSync.mockReturnValue('import { unused } from \"./utils\";');\n      mockFs.writeFileSync.mockImplementation(() => {});\n\n      const result = await importCleanupSystem.executeCleanup(testFiles);\n\n      expect(result.buildValidationPassed).toBe(false);\n      expect(result.errors.length).toBeGreaterThan(0);\n    });\n\n    test('processes files in batches', async () => {\n      const testFiles = Array.from({ length: 12 }, (_, i) => `file${i}.ts`);\n      const batchSize = 5;\n      \n      const config = { ...testConfig, maxFilesPerBatch: batchSize };\n      const system = new ImportCleanupSystem(config);\n\n      mockExecSync.mockReturnValue(''); // Build validation passes\n      mockFs.readFileSync.mockReturnValue('import { used } from \"./utils\"; used();');\n      mockFs.writeFileSync.mockImplementation(() => {});\n\n      const result = await system.executeCleanup(testFiles);\n\n      // Should process all files despite batching\n      expect(result.filesProcessed.length).toBeLessThanOrEqual(testFiles.length);\n      expect(result.buildValidationPassed).toBe(true);\n    });\n  });\n\n  describe('error handling', () => {\n    test('handles file read errors gracefully', async () => {\n      mockFs.readFileSync.mockImplementation(() => {\n        throw new Error('File not found');\n      });\n\n      const unusedImports = await importCleanupSystem.detectUnusedImports(['nonexistent.ts']);\n\n      expect(unusedImports).toHaveLength(0);\n    });\n\n    test('handles file write errors gracefully', async () => {\n      mockFs.readFileSync.mockReturnValue('import { unused } from \"./utils\";');\n      mockFs.writeFileSync.mockImplementation(() => {\n        throw new Error('Permission denied');\n      });\n\n      const removedCount = await importCleanupSystem.removeUnusedImports(['readonly.ts']);\n\n      expect(removedCount).toBe(0);\n    });\n\n    test('continues processing other files when one fails', async () => {\n      const testFiles = ['good.ts', 'bad.ts', 'good2.ts'];\n      \n      mockFs.readFileSync\n        .mockReturnValueOnce('import { used } from \"./utils\"; used();') // good.ts\n        .mockImplementationOnce(() => { throw new Error('Bad file'); }) // bad.ts\n        .mockReturnValueOnce('import { used } from \"./utils\"; used();'); // good2.ts\n\n      const unusedImports = await importCleanupSystem.detectUnusedImports(testFiles);\n\n      // Should still process the good files\n      expect(unusedImports).toBeDefined();\n    });\n  });\n\n  describe('configuration validation', () => {\n    test('uses default configuration when not provided', () => {\n      const system = new ImportCleanupSystem(DEFAULT_IMPORT_CLEANUP_CONFIG);\n      expect(system).toBeDefined();\n    });\n\n    test('respects custom configuration', () => {\n      const customConfig: ImportCleanupConfig = {\n        maxFilesPerBatch: 10,\n        safetyValidationEnabled: false,\n        buildValidationFrequency: 3,\n        importStyleEnforcement: false,\n        organizationRules: {\n          groupExternalImports: false,\n          groupInternalImports: false,\n          sortAlphabetically: false,\n          separateTypeImports: false,\n          enforceTrailingCommas: false,\n          maxLineLength: 120\n        }\n      };\n\n      const system = new ImportCleanupSystem(customConfig);\n      expect(system).toBeDefined();\n    });\n  });\n});"],"version":3}