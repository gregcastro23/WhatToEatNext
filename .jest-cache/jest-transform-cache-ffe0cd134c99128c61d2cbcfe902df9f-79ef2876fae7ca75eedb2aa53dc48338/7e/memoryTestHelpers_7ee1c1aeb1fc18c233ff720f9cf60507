5ee230549cc9932937dd7ec3f666fa04
"use strict";
/**
 * Memory-Safe Test Helpers
 *
 * Utility functions and patterns for writing memory-efficient tests
 * that integrate with the TestMemoryMonitor system.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MEMORY_TEST_CONFIGS = exports.TEST_TIMEOUTS = exports.memoryAssertions = exports.processBatchWithMemoryManagement = exports.withMemoryTracking = exports.createTestDataset = exports.itMemoryIntensive = exports.itWithMemoryCleanup = exports.describeWithMemoryManagement = exports.withMemoryManagement = void 0;
const TestMemoryMonitor_1 = require("./TestMemoryMonitor");
/**
 * Wrapper for memory-safe test execution
 */
function withMemoryManagement(testFn, config = {}) {
    return async () => {
        const monitor = config.enableMonitoring
            ? new TestMemoryMonitor_1.TestMemoryMonitor(config.memoryThresholds)
            : null;
        try {
            // Take initial snapshot
            if (monitor) {
                monitor.takeSnapshot('test-start');
            }
            // Execute the test
            const result = await testFn();
            // Check memory usage after test
            if (monitor) {
                const memoryCheck = monitor.checkMemoryUsage('test-end');
                if (!memoryCheck.isWithinLimits) {
                    console.warn('Memory limits exceeded during test:', memoryCheck.errors);
                }
                if (memoryCheck.warnings.length > 0) {
                    console.warn('Memory warnings during test:', memoryCheck.warnings);
                }
            }
            return result;
        }
        finally {
            // Cleanup
            if (config.cleanupAfterEach && monitor) {
                monitor.cleanup('test-cleanup');
            }
        }
    };
}
exports.withMemoryManagement = withMemoryManagement;
/**
 * Memory-safe describe block wrapper
 */
function describeWithMemoryManagement(description, testSuite, config = {}) {
    describe(description, () => {
        let suiteMonitor = null;
        beforeAll(() => {
            if (config.enableMonitoring) {
                suiteMonitor = new TestMemoryMonitor_1.TestMemoryMonitor(config.memoryThresholds);
                suiteMonitor.takeSnapshot('suite-start');
            }
        });
        afterAll(() => {
            if (suiteMonitor) {
                suiteMonitor.takeSnapshot('suite-end');
                const summary = suiteMonitor.getMemorySummary();
                if (summary.totalIncrease > 25) { // 25MB threshold for suite reporting
                    console.log(`Memory summary for "${description}":`, {
                        totalIncrease: `${summary.totalIncrease.toFixed(2)}MB`,
                        peakMemory: `${summary.peakMemory.toFixed(2)}MB`,
                        duration: `${(summary.testDuration / 1000).toFixed(2)}s`
                    });
                }
                suiteMonitor.cleanup('suite-cleanup');
            }
        });
        beforeEach(() => {
            var _a;
            if (config.cleanupAfterEach) {
                (_a = global.testUtils) === null || _a === void 0 ? void 0 : _a.cleanupMemory();
            }
        });
        afterEach(() => {
            var _a;
            if (config.cleanupAfterEach) {
                (_a = global.testUtils) === null || _a === void 0 ? void 0 : _a.cleanupMemory();
            }
        });
        // Execute the test suite
        testSuite();
    });
}
exports.describeWithMemoryManagement = describeWithMemoryManagement;
/**
 * Memory-safe test wrapper with automatic cleanup
 */
function itWithMemoryCleanup(description, testFn, timeout) {
    it(description, withMemoryManagement(testFn, {
        enableMonitoring: true,
        cleanupAfterEach: true
    }), timeout || 15000); // Default to 15s timeout
}
exports.itWithMemoryCleanup = itWithMemoryCleanup;
/**
 * Memory-intensive test wrapper with strict monitoring
 */
function itMemoryIntensive(description, testFn, timeout) {
    it(description, withMemoryManagement(testFn, {
        enableMonitoring: true,
        cleanupAfterEach: true,
        memoryThresholds: {
            warningThreshold: 50,
            errorThreshold: 200,
            leakThreshold: 25
        }
    }), timeout || 30000); // Longer timeout for memory-intensive tests
}
exports.itMemoryIntensive = itMemoryIntensive;
/**
 * Create a large test dataset with automatic cleanup
 */
function createTestDataset(generator, size, cleanup) {
    const data = [];
    for (let i = 0; i < size; i++) {
        data.push(generator());
    }
    const cleanupFn = () => {
        if (cleanup) {
            cleanup(data);
        }
        data.length = 0;
        // Force garbage collection if available
        if (global.forceGC) {
            global.forceGC();
        }
    };
    return { data, cleanup: cleanupFn };
}
exports.createTestDataset = createTestDataset;
/**
 * Memory-safe async operation wrapper
 */
async function withMemoryTracking(operation, operationName = 'async-operation') {
    const initialMemory = process.memoryUsage().heapUsed;
    try {
        const result = await operation();
        const finalMemory = process.memoryUsage().heapUsed;
        const memoryDiff = (finalMemory - initialMemory) / (1024 * 1024);
        if (memoryDiff > 10) { // 10MB threshold for logging
            console.log(`Memory usage for ${operationName}: +${memoryDiff.toFixed(2)}MB`);
        }
        return result;
    }
    catch (error) {
        // Log memory usage even on error
        const finalMemory = process.memoryUsage().heapUsed;
        const memoryDiff = (finalMemory - initialMemory) / (1024 * 1024);
        if (memoryDiff > 5) { // Lower threshold for error cases
            console.warn(`Memory usage for failed ${operationName}: +${memoryDiff.toFixed(2)}MB`);
        }
        throw error;
    }
}
exports.withMemoryTracking = withMemoryTracking;
/**
 * Batch process large datasets with memory management
 */
async function processBatchWithMemoryManagement(items, processor, batchSize = 10, cleanupBetweenBatches = true) {
    var _a;
    const results = [];
    for (let i = 0; i < items.length; i += batchSize) {
        const batch = items.slice(i, i + batchSize);
        // Process batch
        const batchResults = await Promise.all(batch.map(item => processor(item)));
        results.push(...batchResults);
        // Cleanup between batches if requested
        if (cleanupBetweenBatches && i + batchSize < items.length) {
            if ((_a = global.testUtils) === null || _a === void 0 ? void 0 : _a.cleanupMemory) {
                global.testUtils.cleanupMemory();
            }
            // Small delay to allow garbage collection
            await new Promise(resolve => setTimeout(resolve, 10));
        }
    }
    return results;
}
exports.processBatchWithMemoryManagement = processBatchWithMemoryManagement;
/**
 * Memory usage assertion helpers
 */
exports.memoryAssertions = {
    /**
     * Assert that memory usage is within expected bounds
     */
    expectMemoryWithinBounds: (maxIncreaseMB = 50) => {
        const currentMemory = process.memoryUsage().heapUsed / (1024 * 1024);
        // This is a soft assertion - we log warnings rather than failing tests
        if (currentMemory > maxIncreaseMB) {
            console.warn(`Memory usage (${currentMemory.toFixed(2)}MB) exceeds expected bounds (${maxIncreaseMB}MB)`);
        }
    },
    /**
     * Assert that no significant memory leaks occurred
     */
    expectNoMemoryLeaks: (beforeMemory, tolerance = 25) => {
        const afterMemory = process.memoryUsage().heapUsed;
        const increaseMB = (afterMemory - beforeMemory) / (1024 * 1024);
        if (increaseMB > tolerance) {
            console.warn(`Potential memory leak detected: +${increaseMB.toFixed(2)}MB (tolerance: ${tolerance}MB)`);
        }
    },
    /**
     * Get current memory usage for comparison
     */
    getMemoryBaseline: () => {
        return process.memoryUsage().heapUsed;
    }
};
/**
 * Test timeout configurations based on test type
 */
exports.TEST_TIMEOUTS = {
    unit: 5000,
    integration: 15000,
    memory: 20000,
    performance: 30000 // 30 seconds for performance tests
};
/**
 * Memory-safe test configuration presets
 */
exports.MEMORY_TEST_CONFIGS = {
    strict: {
        enableMonitoring: true,
        cleanupAfterEach: true,
        memoryThresholds: {
            warningThreshold: 25,
            errorThreshold: 100,
            leakThreshold: 10
        }
    },
    moderate: {
        enableMonitoring: true,
        cleanupAfterEach: true,
        memoryThresholds: {
            warningThreshold: 50,
            errorThreshold: 200,
            leakThreshold: 25
        }
    },
    relaxed: {
        enableMonitoring: true,
        cleanupAfterEach: false,
        memoryThresholds: {
            warningThreshold: 100,
            errorThreshold: 500,
            leakThreshold: 50
        }
    }
};
exports.default = {
    withMemoryManagement,
    describeWithMemoryManagement,
    itWithMemoryCleanup,
    itMemoryIntensive,
    createTestDataset,
    withMemoryTracking,
    processBatchWithMemoryManagement,
    memoryAssertions: exports.memoryAssertions,
    TEST_TIMEOUTS: exports.TEST_TIMEOUTS,
    MEMORY_TEST_CONFIGS: exports.MEMORY_TEST_CONFIGS
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,