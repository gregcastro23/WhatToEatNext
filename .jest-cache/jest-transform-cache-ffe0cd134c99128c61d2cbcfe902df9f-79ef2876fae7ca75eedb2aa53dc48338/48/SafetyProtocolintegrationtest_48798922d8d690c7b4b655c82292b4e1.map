{"file":"/Users/GregCastro/Desktop/WhatToEatNext/backups/first-wave-2025-08-11T05-19-26-813Z/src/services/campaign/__tests__/integration/SafetyProtocol.integration.test.ts","mappings":";AAAA;;;GAGG;;;;;;;;;;;;;;;;;;;;;;;;;AAkBH,oBAAoB;AACpB,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;AAC3B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAlBhB,iDAAyC;AACzC,uCAAyB;AAEzB,yDAQoC;AACpC,iEAA8D;AAC9D,2DAAwD;AACxD,yDAAsD;AAMtD,MAAM,YAAY,GAAG,wBAAgD,CAAC;AACtE,MAAM,MAAM,GAAG,EAA4B,CAAC;AAE5C,QAAQ,CAAC,mCAAmC,EAAE,GAAG,EAAE;IACjD,IAAI,cAA8B,CAAC;IACnC,IAAI,kBAAsC,CAAC;IAC3C,IAAI,eAAgC,CAAC;IACrC,IAAI,kBAAkC,CAAC;IACvC,IAAI,UAA0B,CAAC;IAE/B,UAAU,CAAC,GAAG,EAAE;QACd,kBAAkB,GAAG;YACnB,gBAAgB,EAAE,EAAE;YACpB,wBAAwB,EAAE,CAAC;YAC3B,uBAAuB,EAAE,EAAE;YAC3B,0BAA0B,EAAE,IAAI;YAChC,wBAAwB,EAAE,IAAI;YAC9B,kBAAkB,EAAE,CAAC;SACtB,CAAC;QAEF,UAAU,GAAG;YACX,MAAM,EAAE;gBACN;oBACE,EAAE,EAAE,YAAY;oBAChB,IAAI,EAAE,YAAY;oBAClB,WAAW,EAAE,4CAA4C;oBACzD,KAAK,EAAE;wBACL;4BACE,UAAU,EAAE,wBAAwB;4BACpC,UAAU,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE;4BAC3C,SAAS,EAAE,EAAE;4BACb,WAAW,EAAE,sBAAW,CAAC,IAAI;yBAC9B;qBACF;oBACD,eAAe,EAAE,EAAE,gBAAgB,EAAE,CAAC,EAAE;oBACxC,iBAAiB,EAAE,EAAE;iBACtB;aACF;YACD,cAAc,EAAE,kBAAkB;YAClC,eAAe,EAAE,EAAE,gBAAgB,EAAE,CAAC,EAAE,eAAe,EAAE,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,iBAAiB,EAAE,GAAG,EAAE;YACnG,iBAAiB,EAAE;gBACjB,kBAAkB,EAAE,+DAA+D;gBACnF,gBAAgB,EAAE,yDAAyD;gBAC3E,oBAAoB,EAAE,2DAA2D;gBACjF,qBAAqB,EAAE,mDAAmD;aAC3E;SACF,CAAC;QAEF,cAAc,GAAG,IAAI,+BAAc,CAAC,kBAAkB,CAAC,CAAC;QACxD,kBAAkB,GAAG,IAAI,uCAAkB,CAAC,UAAU,CAAC,CAAC;QACxD,eAAe,GAAG,IAAI,iCAAe,EAAE,CAAC;QAExC,cAAc;QACd,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,+BAA+B;QAC/B,YAAY,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;QACjC,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QACxC,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC;QACrD,MAAM,CAAC,aAAa,CAAC,kBAAkB,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mCAAmC,EAAE,GAAG,EAAE;QACjD,QAAQ,CAAC,+BAA+B,EAAE,GAAG,EAAE;YAC7C,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;gBAC5D,MAAM,gBAAgB,GAAG;;;;;;;;SAQxB,CAAC;gBAEF,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;gBAEtD,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,gBAAgB,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;gBAEvE,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;gBACvD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,6BAAkB,CAAC,QAAQ,CAAC,CAAC;gBAC1D,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,yBAAc,CAAC,iBAAiB,CAAC,CAAC;gBACxE,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACvG,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,2DAA2D,EAAE,KAAK,IAAI,EAAE;gBACzE,MAAM,gBAAgB,GAAG,wDAAwD,CAAC;gBAClF,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;gBAEtD,uBAAuB;gBACvB,YAAY,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE;oBACxC,MAAM,GAAG,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;oBAC/B,IAAI,GAAG,CAAC,QAAQ,CAAC,gBAAgB,CAAC;wBAAE,OAAO,EAAE,CAAC;oBAC9C,IAAI,GAAG,CAAC,QAAQ,CAAC,gBAAgB,CAAC;wBAAE,OAAO,4BAA4B,CAAC;oBACxE,IAAI,GAAG,CAAC,QAAQ,CAAC,iBAAiB,CAAC;wBAAE,OAAO,EAAE,CAAC;oBAC/C,IAAI,GAAG,CAAC,QAAQ,CAAC,wBAAwB,CAAC;wBAAE,OAAO,EAAE,CAAC;oBACtD,IAAI,GAAG,CAAC,QAAQ,CAAC,2BAA2B,CAAC;wBAAE,OAAO,MAAM,CAAC;oBAC7D,OAAO,EAAE,CAAC;gBACZ,CAAC,CAAC,CAAC;gBAEH,MAAM,OAAO,GAAG,MAAM,cAAc,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;gBAEpE,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,gBAAgB,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;gBAEvE,IAAI,MAAM,CAAC,QAAQ,KAAK,6BAAkB,CAAC,QAAQ,EAAE;oBACnD,MAAM,cAAc,CAAC,iBAAiB,EAAE,CAAC;iBAC1C;gBAED,MAAM,CAAC,YAAY,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;YAC5G,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,qCAAqC,EAAE,GAAG,EAAE;YACnD,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;gBACzD,MAAM,gBAAgB,GAAG;;;;;SAKxB,CAAC;gBAEF,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;gBAEtD,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,4BAA4B,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;gBAEnF,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;gBACvD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,6BAAkB,CAAC,IAAI,CAAC,CAAC;gBACtD,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;gBAC5D,MAAM,gBAAgB,GAAG;;;SAGxB,CAAC;gBAEF,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;gBAEtD,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,4BAA4B,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;gBAEnF,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;gBACvD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,6BAAkB,CAAC,IAAI,CAAC,CAAC;gBACtD,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACjG,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;gBAC3D,MAAM,gBAAgB,GAAG;;SAExB,CAAC;gBAEF,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;gBAEtD,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,4BAA4B,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;gBAEnF,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;gBACvD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,6BAAkB,CAAC,IAAI,CAAC,CAAC;YACxD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;YAC5C,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;gBACjD,MAAM,gBAAgB,GAAG;;;;SAIxB,CAAC;gBAEF,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;gBAEtD,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,gBAAgB,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;gBAEvE,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;gBACvD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,6BAAkB,CAAC,IAAI,CAAC,CAAC;YACxD,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;gBACnD,MAAM,gBAAgB,GAAG;;;;;SAKxB,CAAC;gBAEF,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;gBAEtD,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,gBAAgB,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;gBAEvE,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;gBACvD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,6BAAkB,CAAC,IAAI,CAAC,CAAC;YACxD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;YAC5C,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;gBAChE,YAAY,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC;gBAEhD,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,4BAA4B,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;gBAEnF,MAAM,CAAC,YAAY,CAAC,CAAC,oBAAoB,CAAC,uCAAuC,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;gBACvG,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,6BAAkB,CAAC,GAAG,CAAC,CAAC;YACvD,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;gBACtD,YAAY,CAAC,eAAe,CAAC;;;SAG5B,CAAC,CAAC;gBAEH,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,4BAA4B,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;gBAEnF,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;gBACvD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,6BAAkB,CAAC,IAAI,CAAC,CAAC;gBACtD,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,KAAK,yBAAyB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClG,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;gBAC7D,YAAY,CAAC,kBAAkB,CAAC,GAAG,EAAE;oBACnC,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,+BAA+B,CAAQ,CAAC;oBAChE,KAAK,CAAC,MAAM,GAAG,4BAA4B,CAAC;oBAC5C,MAAM,KAAK,CAAC;gBACd,CAAC,CAAC,CAAC;gBAEH,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,4BAA4B,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;gBAEnF,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,6BAAkB,CAAC,IAAI,CAAC,CAAC;gBACtD,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,KAAK,8BAA8B,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACvG,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAChD,UAAU,CAAC,GAAG,EAAE;YACd,IAAI,CAAC,aAAa,EAAE,CAAC;QACvB,CAAC,CAAC,CAAC;QAEH,SAAS,CAAC,GAAG,EAAE;YACb,IAAI,CAAC,aAAa,EAAE,CAAC;QACvB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2DAA2D,EAAE,KAAK,IAAI,EAAE;YACzE,MAAM,SAAS,GAAG,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;YAE3C,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC,iBAAiB,CAAC;gBAC/D,aAAa,EAAE,EAAE;gBACjB,kBAAkB,EAAE,EAAE;gBACtB,QAAQ,EAAE,6BAAkB,CAAC,GAAG;gBAChC,iBAAiB,EAAE,yBAAc,CAAC,QAAQ;aAC3C,CAAC,CAAC;YAEH,cAAc,CAAC,uBAAuB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YAExD,0CAA0C;YAC1C,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;YAE/B,MAAM,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC;YAExE,cAAc,CAAC,sBAAsB,EAAE,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4EAA4E,EAAE,KAAK,IAAI,EAAE;YAC1F,MAAM,SAAS,GAAG,CAAC,UAAU,CAAC,CAAC;YAE/B,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC,iBAAiB,CAAC;gBAC/D,aAAa,EAAE,CAAC,UAAU,CAAC;gBAC3B,kBAAkB,EAAE;oBAClB;wBACE,OAAO,EAAE,qBAAqB;wBAC9B,WAAW,EAAE,8BAA8B;wBAC3C,KAAK,EAAE,CAAC,UAAU,CAAC;qBACpB;iBACF;gBACD,QAAQ,EAAE,6BAAkB,CAAC,QAAQ;gBACrC,iBAAiB,EAAE,yBAAc,CAAC,iBAAiB;aACpD,CAAC,CAAC;YAEH,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,mBAAmB,CAAC,CAAC,iBAAiB,EAAE,CAAC;YAEpE,cAAc,CAAC,uBAAuB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YAExD,0CAA0C;YAC1C,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;YAE/B,4BAA4B;YAC5B,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;YAErD,MAAM,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACvE,MAAM,SAAS,GAAG,CAAC,UAAU,CAAC,CAAC;YAE/B,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC,iBAAiB,CAAC;gBAC/D,aAAa,EAAE,CAAC,UAAU,CAAC;gBAC3B,kBAAkB,EAAE,EAAE;gBACtB,QAAQ,EAAE,6BAAkB,CAAC,MAAM;gBACnC,iBAAiB,EAAE,yBAAc,CAAC,KAAK;aACxC,CAAC,CAAC;YAEH,cAAc,CAAC,uBAAuB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YAExD,0CAA0C;YAC1C,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;YAE/B,4BAA4B;YAC5B,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;YAErD,MAAM,MAAM,GAAG,cAAc,CAAC,eAAe,EAAE,CAAC;YAChD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,0BAAe,CAAC,mBAAmB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEpF,cAAc,CAAC,sBAAsB,EAAE,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;QAC1C,UAAU,CAAC,GAAG,EAAE;YACd,YAAY,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE;gBACxC,MAAM,GAAG,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;gBAC/B,IAAI,GAAG,CAAC,QAAQ,CAAC,wBAAwB,CAAC;oBAAE,OAAO,EAAE,CAAC;gBACtD,IAAI,GAAG,CAAC,QAAQ,CAAC,gBAAgB,CAAC;oBAAE,OAAO,EAAE,CAAC;gBAC9C,IAAI,GAAG,CAAC,QAAQ,CAAC,gBAAgB,CAAC;oBAAE,OAAO,uBAAuB,CAAC;gBACnE,IAAI,GAAG,CAAC,QAAQ,CAAC,iBAAiB,CAAC;oBAAE,OAAO,EAAE,CAAC;gBAC/C,IAAI,GAAG,CAAC,QAAQ,CAAC,2BAA2B,CAAC;oBAAE,OAAO,MAAM,CAAC;gBAC7D,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;YACxE,+CAA+C;YAC/C,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,WAAW,CAAC,oBAAoB,EAAE,QAAQ,CAAC,CAAC;YAChF,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,WAAW,CAAC,oBAAoB,EAAE,QAAQ,CAAC,CAAC;YAEhF,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC;YAChD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC;YAEhD,MAAM,OAAO,GAAG,MAAM,cAAc,CAAC,WAAW,EAAE,CAAC;YACnD,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;YACpE,sCAAsC;YACtC,MAAM,cAAc,CAAC,WAAW,CAAC,oBAAoB,EAAE,QAAQ,CAAC,CAAC;YACjE,MAAM,cAAc,CAAC,WAAW,CAAC,oBAAoB,EAAE,QAAQ,CAAC,CAAC;YACjE,MAAM,cAAc,CAAC,WAAW,CAAC,4BAA4B,EAAE,QAAQ,CAAC,CAAC;YAEzE,6BAA6B;YAC7B,MAAM,cAAc,GAAG,MAAM,cAAc,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;YAExE,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC;YACxD,MAAM,CAAC,YAAY,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;QAC5G,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC3D,MAAM,UAAU,GAAG,MAAM,cAAc,CAAC,gBAAgB,EAAE,CAAC;YAE3D,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtC,MAAM,CAAC,YAAY,CAAC,CAAC,oBAAoB,CAAC,wBAAwB,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;QAC1F,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAC/D,YAAY,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE;gBACxC,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,gBAAgB,CAAC,EAAE;oBACjD,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;iBACrC;gBACD,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CACpE,8CAA8C,CAC/C,CAAC;YAEF,MAAM,MAAM,GAAG,cAAc,CAAC,eAAe,EAAE,CAAC;YAChD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,0BAAe,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrF,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;QAC5C,UAAU,CAAC,GAAG,EAAE;YACd,YAAY,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE;gBACxC,MAAM,GAAG,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;gBAC/B,IAAI,GAAG,CAAC,QAAQ,CAAC,wBAAwB,CAAC;oBAAE,OAAO,EAAE,CAAC;gBACtD,IAAI,GAAG,CAAC,QAAQ,CAAC,gBAAgB,CAAC;oBAAE,OAAO,EAAE,CAAC;gBAC9C,IAAI,GAAG,CAAC,QAAQ,CAAC,gBAAgB,CAAC;oBAAE,OAAO,uBAAuB,CAAC;gBACnE,IAAI,GAAG,CAAC,QAAQ,CAAC,gBAAgB,CAAC;oBAAE,OAAO,EAAE,CAAC;gBAC9C,IAAI,GAAG,CAAC,QAAQ,CAAC,2BAA2B,CAAC;oBAAE,OAAO,MAAM,CAAC;gBAC7D,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;YACpE,qBAAqB;YACrB,MAAM,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC;YAC3B,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,cAAc;YAEvD,MAAM,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC;YAC9B,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,aAAa;YAE3D,uCAAuC;YACvC,MAAM,QAAQ,GAAG;gBACf,EAAE,EAAE,WAAW;gBACf,WAAW,EAAE,WAAW;gBACxB,SAAS,EAAE,OAAO;gBAClB,MAAM,EAAE,MAAM;gBACd,GAAG,EAAE,WAAW;aACjB,CAAC;YAEF,MAAM,WAAW,GAAG;gBAClB,EAAE,EAAE,cAAc;gBAClB,WAAW,EAAE,cAAc;gBAC3B,SAAS,EAAE,UAAU;gBACrB,MAAM,EAAE,MAAM;gBACd,GAAG,EAAE,WAAW;aACjB,CAAC;YAED,cAAsB,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;YAC1D,cAAsB,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;YAEjE,MAAM,cAAc,CAAC,iBAAiB,EAAE,CAAC;YAEzC,MAAM,OAAO,GAAG,MAAM,cAAc,CAAC,WAAW,EAAE,CAAC;YACnD,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC5D,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;YAC9D,sCAAsC;YACtC,MAAM,cAAc,CAAC,WAAW,CAAC,oBAAoB,EAAE,QAAQ,CAAC,CAAC;YACjE,MAAM,cAAc,CAAC,WAAW,CAAC,oBAAoB,EAAE,QAAQ,CAAC,CAAC;YACjE,MAAM,cAAc,CAAC,WAAW,CAAC,4BAA4B,EAAE,QAAQ,CAAC,CAAC;YAEzE,MAAM,KAAK,GAAG,cAAc,CAAC,kBAAkB,EAAE,CAAC;YAElD,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;YAC/C,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,sCAAsC,EAAE,GAAG,EAAE;QACpD,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;YACtE,MAAM,KAAK,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAEnC,kDAAkD;YAClD,IAAI,CAAC,KAAK,CAAC,kBAAyB,EAAE,wBAAwB,CAAC,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC;YAClG,IAAI,CAAC,KAAK,CAAC,kBAAyB,EAAE,mBAAmB,CAAC,CAAC,iBAAiB,CAAC;gBAC3E,gBAAgB,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,UAAU,EAAE,GAAG,EAAE;gBAC3E,eAAe,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,EAAE;gBAC1E,gBAAgB,EAAE,EAAE,WAAW,EAAE,GAAG,EAAE,UAAU,EAAE,EAAE,EAAE,YAAY,EAAE,GAAG,EAAE,WAAW,EAAE,EAAE,EAAE;gBAC1F,iBAAiB,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,kBAAkB,EAAE,CAAC,EAAE;aACtE,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,kBAAkB,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YAE5D,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACtD,MAAM,CAAC,kBAAkB,CAAC,wBAAwB,CAAC,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC1E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACvE,MAAM,KAAK,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAEnC,iDAAiD;YACjD,IAAI,CAAC,KAAK,CAAC,kBAAyB,EAAE,uBAAuB,CAAC,CAAC,iBAAiB,CAAC;gBAC/E,OAAO,EAAE,KAAK;gBACd,MAAM,EAAE,CAAC,qBAAqB,CAAC;gBAC/B,QAAQ,EAAE,EAAE;aACb,CAAC,CAAC;YAEH,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE,sBAAsB,CAAC,CAAC,iBAAiB,EAAE,CAAC;YAE3E,MAAM,MAAM,CAAC,kBAAkB,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAClE,4CAA4C,CAC7C,CAAC;YAEF,MAAM,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACrE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACvC,EAAE,CAAC,4DAA4D,EAAE,KAAK,IAAI,EAAE;YAC1E,MAAM,CAAC,YAAY,CAAC,kBAAkB,CAAC,GAAG,EAAE;gBAC1C,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,gBAAgB,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;YAE5E,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;YAC5D,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,6BAAkB,CAAC,IAAI,CAAC,CAAC;YACtD,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,KAAK,iBAAiB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1F,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YAEzC,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,gBAAgB,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAE1E,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACzC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,6BAAkB,CAAC,GAAG,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,MAAM,KAAK,GAAG,CAAC,WAAW,EAAE,WAAW,EAAE,aAAa,EAAE,WAAW,CAAC,CAAC;YAErE,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YACxC,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC;YAErD,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,4BAA4B,CAAC,KAAK,CAAC,CAAC;YAExE,kDAAkD;YAClD,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACzC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,6BAAkB,CAAC,GAAG,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,EAAE,CAAC,6DAA6D,EAAE,KAAK,IAAI,EAAE;YAC3E,eAAe;YACf,MAAM,cAAc,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;YAE/C,oBAAoB;YACpB,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,wCAAwC,CAAC,CAAC;YAC9E,MAAM,cAAc,CAAC,gBAAgB,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YAExD,cAAc;YACd,MAAM,cAAc,CAAC,UAAU,CAAC,CAAC,MAAM,cAAc,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAE5E,MAAM,MAAM,GAAG,cAAc,CAAC,eAAe,EAAE,CAAC;YAEhD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,0BAAe,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACnF,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,0BAAe,CAAC,mBAAmB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpF,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,0BAAe,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2DAA2D,EAAE,KAAK,IAAI,EAAE;YACzE,0CAA0C;YAC1C,MAAM,cAAc,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC,OAAO;YAEvD,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,wCAAwC,CAAC,CAAC;YAC9E,MAAM,cAAc,CAAC,gBAAgB,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,WAAW;YAEpE,MAAM,MAAM,GAAG,cAAc,CAAC,eAAe,EAAE,CAAC;YAChD,MAAM,UAAU,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;YAE/C,MAAM,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,8BAAmB,CAAC,IAAI,CAAC,CAAC;YACvD,MAAM,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,8BAAmB,CAAC,QAAQ,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/backups/first-wave-2025-08-11T05-19-26-813Z/src/services/campaign/__tests__/integration/SafetyProtocol.integration.test.ts"],"sourcesContent":["/**\n * Integration Tests for Safety Protocol with Corruption Simulation\n * Perfect Codebase Campaign - Safety Protocol Integration Testing\n */\n\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\n\nimport {\n  SafetySettings,\n  CorruptionSeverity,\n  RecoveryAction,\n  SafetyEventType,\n  SafetyEventSeverity,\n  CampaignConfig,\n  SafetyLevel,\n} from '../../../../types/campaign';\nimport { CampaignController } from '../../CampaignController';\nimport { ProgressTracker } from '../../ProgressTracker';\nimport { SafetyProtocol } from '../../SafetyProtocol';\n\n// Mock dependencies\njest.mock('child_process');\njest.mock('fs');\n\nconst mockExecSync = execSync as jest.MockedFunction<typeof execSync>;\nconst mockFs = fs as jest.Mocked<typeof fs>;\n\ndescribe('Safety Protocol Integration Tests', () => {\n  let safetyProtocol: SafetyProtocol;\n  let campaignController: CampaignController;\n  let progressTracker: ProgressTracker;\n  let mockSafetySettings: SafetySettings;\n  let mockConfig: CampaignConfig;\n\n  beforeEach(() => {\n    mockSafetySettings = {\n      maxFilesPerBatch: 25,\n      buildValidationFrequency: 5,\n      testValidationFrequency: 10,\n      corruptionDetectionEnabled: true,\n      automaticRollbackEnabled: true,\n      stashRetentionDays: 7,\n    };\n\n    mockConfig = {\n      phases: [\n        {\n          id: 'test-phase',\n          name: 'Test Phase',\n          description: 'Test phase for safety protocol integration',\n          tools: [\n            {\n              scriptPath: 'scripts/test-script.js',\n              parameters: { maxFiles: 10, autoFix: true },\n              batchSize: 10,\n              safetyLevel: SafetyLevel.HIGH,\n            },\n          ],\n          successCriteria: { typeScriptErrors: 0 },\n          safetyCheckpoints: [],\n        },\n      ],\n      safetySettings: mockSafetySettings,\n      progressTargets: { typeScriptErrors: 0, lintingWarnings: 0, buildTime: 10, enterpriseSystems: 200 },\n      toolConfiguration: {\n        enhancedErrorFixer: 'scripts/typescript-fixes/fix-typescript-errors-enhanced-v3.js',\n        explicitAnyFixer: 'scripts/typescript-fixes/fix-explicit-any-systematic.js',\n        unusedVariablesFixer: 'scripts/typescript-fixes/fix-unused-variables-enhanced.js',\n        consoleStatementFixer: 'scripts/lint-fixes/fix-console-statements-only.js',\n      },\n    };\n\n    safetyProtocol = new SafetyProtocol(mockSafetySettings);\n    campaignController = new CampaignController(mockConfig);\n    progressTracker = new ProgressTracker();\n\n    // Reset mocks\n    jest.clearAllMocks();\n\n    // Default mock implementations\n    mockExecSync.mockReturnValue('');\n    mockFs.existsSync.mockReturnValue(true);\n    mockFs.readFileSync.mockReturnValue('valid content');\n    mockFs.writeFileSync.mockImplementation(() => {});\n  });\n\n  describe('Corruption Detection and Recovery', () => {\n    describe('Git Merge Conflict Simulation', () => {\n      it('should detect and handle git merge conflicts', async () => {\n        const corruptedContent = `\n          function test() {\n          <<<<<<< HEAD\n            return 'version 1';\n          =======\n            return 'version 2';\n          >>>>>>> branch\n          }\n        `;\n\n        mockFs.readFileSync.mockReturnValue(corruptedContent);\n\n        const report = await safetyProtocol.detectCorruption(['test-file.ts']);\n\n        expect(report.detectedFiles).toContain('test-file.ts');\n        expect(report.severity).toBe(CorruptionSeverity.CRITICAL);\n        expect(report.recommendedAction).toBe(RecoveryAction.EMERGENCY_RESTORE);\n        expect(report.corruptionPatterns.some(p => p.description.includes('Git merge conflict'))).toBe(true);\n      });\n\n      it('should trigger emergency rollback for critical corruption', async () => {\n        const corruptedContent = '<<<<<<< HEAD\\nconflict\\n=======\\nother\\n>>>>>>> branch';\n        mockFs.readFileSync.mockReturnValue(corruptedContent);\n\n        // Create a stash first\n        mockExecSync.mockImplementation(command => {\n          const cmd = command.toString();\n          if (cmd.includes('git stash push')) return '';\n          if (cmd.includes('git stash list')) return 'stash@{0}: emergency-stash';\n          if (cmd.includes('git stash apply')) return '';\n          if (cmd.includes('git status --porcelain')) return '';\n          if (cmd.includes('git branch --show-current')) return 'main';\n          return '';\n        });\n\n        const stashId = await safetyProtocol.createStash('Emergency stash');\n\n        const report = await safetyProtocol.detectCorruption(['test-file.ts']);\n\n        if (report.severity === CorruptionSeverity.CRITICAL) {\n          await safetyProtocol.emergencyRollback();\n        }\n\n        expect(mockExecSync).toHaveBeenCalledWith(expect.stringContaining('git stash apply'), expect.any(Object));\n      });\n    });\n\n    describe('Import/Export Corruption Simulation', () => {\n      it('should detect corrupted import statements', async () => {\n        const corruptedContent = `\n          import @/types from './types';\n          import @/services from './services';\n          import { } from './empty';\n          import something from \"undefined\";\n        `;\n\n        mockFs.readFileSync.mockReturnValue(corruptedContent);\n\n        const report = await safetyProtocol.detectImportExportCorruption(['test-file.ts']);\n\n        expect(report.detectedFiles).toContain('test-file.ts');\n        expect(report.severity).toBe(CorruptionSeverity.HIGH);\n        expect(report.corruptionPatterns.length).toBeGreaterThan(0);\n      });\n\n      it('should detect double commas in destructuring', async () => {\n        const corruptedContent = `\nimport type type Something, { a, b } from './module';\n          export { x,, y };\n        `;\n\n        mockFs.readFileSync.mockReturnValue(corruptedContent);\n\n        const report = await safetyProtocol.detectImportExportCorruption(['test-file.ts']);\n\n        expect(report.detectedFiles).toContain('test-file.ts');\n        expect(report.severity).toBe(CorruptionSeverity.HIGH);\n        expect(report.corruptionPatterns.some(p => p.description.includes('Double comma'))).toBe(true);\n      });\n\n      it('should detect duplicate keywords in imports', async () => {\n        const corruptedContent = `\n          export default default value;\n        `;\n\n        mockFs.readFileSync.mockReturnValue(corruptedContent);\n\n        const report = await safetyProtocol.detectImportExportCorruption(['test-file.ts']);\n\n        expect(report.detectedFiles).toContain('test-file.ts');\n        expect(report.severity).toBe(CorruptionSeverity.HIGH);\n      });\n    });\n\n    describe('Syntax Corruption Simulation', () => {\n      it('should detect unbalanced brackets', async () => {\n        const corruptedContent = `\n          function test() {\n            if (condition) {\n              return 'missing closing brace';\n        `;\n\n        mockFs.readFileSync.mockReturnValue(corruptedContent);\n\n        const report = await safetyProtocol.detectCorruption(['test-file.ts']);\n\n        expect(report.detectedFiles).toContain('test-file.ts');\n        expect(report.severity).toBe(CorruptionSeverity.HIGH);\n      });\n\n      it('should detect incomplete statements', async () => {\n        const corruptedContent = `\n          export\n          import\n          function\n          const\n        `;\n\n        mockFs.readFileSync.mockReturnValue(corruptedContent);\n\n        const report = await safetyProtocol.detectCorruption(['test-file.ts']);\n\n        expect(report.detectedFiles).toContain('test-file.ts');\n        expect(report.severity).toBe(CorruptionSeverity.HIGH);\n      });\n    });\n\n    describe('TypeScript Syntax Validation', () => {\n      it('should validate syntax using TypeScript compiler', async () => {\n        mockExecSync.mockReturnValue('No errors found');\n\n        const report = await safetyProtocol.validateSyntaxWithTypeScript(['test-file.ts']);\n\n        expect(mockExecSync).toHaveBeenCalledWith('yarn tsc --noEmit --skipLibCheck 2>&1', expect.any(Object));\n        expect(report.severity).toBe(CorruptionSeverity.LOW);\n      });\n\n      it('should detect TypeScript syntax errors', async () => {\n        mockExecSync.mockReturnValue(`\n          test-file.ts(10,5): error TS1005: Unexpected token 'function'\n          test-file.ts(15,10): error TS1109: Expression expected\n        `);\n\n        const report = await safetyProtocol.validateSyntaxWithTypeScript(['test-file.ts']);\n\n        expect(report.detectedFiles).toContain('test-file.ts');\n        expect(report.severity).toBe(CorruptionSeverity.HIGH);\n        expect(report.corruptionPatterns.some(p => p.pattern === 'TYPESCRIPT_SYNTAX_ERROR')).toBe(true);\n      });\n\n      it('should handle TypeScript compilation failures', async () => {\n        mockExecSync.mockImplementation(() => {\n          const error = new Error('TypeScript compilation failed') as any;\n          error.stdout = 'Unexpected token at line 5';\n          throw error;\n        });\n\n        const report = await safetyProtocol.validateSyntaxWithTypeScript(['test-file.ts']);\n\n        expect(report.severity).toBe(CorruptionSeverity.HIGH);\n        expect(report.corruptionPatterns.some(p => p.pattern === 'TYPESCRIPT_COMPILATION_ERROR')).toBe(true);\n      });\n    });\n  });\n\n  describe('Real-time Monitoring Integration', () => {\n    beforeEach(() => {\n      jest.useFakeTimers();\n    });\n\n    afterEach(() => {\n      jest.useRealTimers();\n    });\n\n    it('should monitor files in real-time during script execution', async () => {\n      const testFiles = ['file1.ts', 'file2.ts'];\n\n      jest.spyOn(safetyProtocol, 'detectCorruption').mockResolvedValue({\n        detectedFiles: [],\n        corruptionPatterns: [],\n        severity: CorruptionSeverity.LOW,\n        recommendedAction: RecoveryAction.CONTINUE,\n      });\n\n      safetyProtocol.startRealTimeMonitoring(testFiles, 1000);\n\n      // Fast-forward time to trigger monitoring\n      jest.advanceTimersByTime(1000);\n\n      expect(safetyProtocol.detectCorruption).toHaveBeenCalledWith(testFiles);\n\n      safetyProtocol.stopRealTimeMonitoring();\n    });\n\n    it('should trigger emergency rollback on critical corruption during monitoring', async () => {\n      const testFiles = ['file1.ts'];\n\n      jest.spyOn(safetyProtocol, 'detectCorruption').mockResolvedValue({\n        detectedFiles: ['file1.ts'],\n        corruptionPatterns: [\n          {\n            pattern: 'CRITICAL_CORRUPTION',\n            description: 'Critical corruption detected',\n            files: ['file1.ts'],\n          },\n        ],\n        severity: CorruptionSeverity.CRITICAL,\n        recommendedAction: RecoveryAction.EMERGENCY_RESTORE,\n      });\n\n      jest.spyOn(safetyProtocol, 'emergencyRollback').mockResolvedValue();\n\n      safetyProtocol.startRealTimeMonitoring(testFiles, 1000);\n\n      // Fast-forward time to trigger monitoring\n      jest.advanceTimersByTime(1000);\n\n      // Wait for async operations\n      await new Promise(resolve => setTimeout(resolve, 0));\n\n      expect(safetyProtocol.emergencyRollback).toHaveBeenCalled();\n    });\n\n    it('should record safety events during real-time monitoring', async () => {\n      const testFiles = ['file1.ts'];\n\n      jest.spyOn(safetyProtocol, 'detectCorruption').mockResolvedValue({\n        detectedFiles: ['file1.ts'],\n        corruptionPatterns: [],\n        severity: CorruptionSeverity.MEDIUM,\n        recommendedAction: RecoveryAction.RETRY,\n      });\n\n      safetyProtocol.startRealTimeMonitoring(testFiles, 1000);\n\n      // Fast-forward time to trigger monitoring\n      jest.advanceTimersByTime(1000);\n\n      // Wait for async operations\n      await new Promise(resolve => setTimeout(resolve, 0));\n\n      const events = safetyProtocol.getSafetyEvents();\n      expect(events.some(e => e.type === SafetyEventType.CORRUPTION_DETECTED)).toBe(true);\n\n      safetyProtocol.stopRealTimeMonitoring();\n    });\n  });\n\n  describe('Git Operations Integration', () => {\n    beforeEach(() => {\n      mockExecSync.mockImplementation(command => {\n        const cmd = command.toString();\n        if (cmd.includes('git status --porcelain')) return '';\n        if (cmd.includes('git stash push')) return '';\n        if (cmd.includes('git stash list')) return 'stash@{0}: test-stash';\n        if (cmd.includes('git stash apply')) return '';\n        if (cmd.includes('git branch --show-current')) return 'main';\n        return '';\n      });\n    });\n\n    it('should create and manage git stashes throughout campaign', async () => {\n      // Create multiple stashes for different phases\n      const stash1 = await safetyProtocol.createStash('Phase 1 checkpoint', 'phase1');\n      const stash2 = await safetyProtocol.createStash('Phase 2 checkpoint', 'phase2');\n\n      expect(stash1).toMatch(/^campaign-phase1-\\d+-/);\n      expect(stash2).toMatch(/^campaign-phase2-\\d+-/);\n\n      const stashes = await safetyProtocol.listStashes();\n      expect(stashes.length).toBe(2);\n    });\n\n    it('should apply stashes by phase for targeted rollbacks', async () => {\n      // Create stashes for different phases\n      await safetyProtocol.createStash('Phase 1 checkpoint', 'phase1');\n      await safetyProtocol.createStash('Phase 2 checkpoint', 'phase2');\n      await safetyProtocol.createStash('Another Phase 1 checkpoint', 'phase1');\n\n      // Apply latest Phase 1 stash\n      const appliedStashId = await safetyProtocol.applyStashByPhase('phase1');\n\n      expect(appliedStashId).toMatch(/^campaign-phase1-\\d+-/);\n      expect(mockExecSync).toHaveBeenCalledWith(expect.stringContaining('git stash apply'), expect.any(Object));\n    });\n\n    it('should validate git state before operations', async () => {\n      const validation = await safetyProtocol.validateGitState();\n\n      expect(validation.success).toBe(true);\n      expect(mockExecSync).toHaveBeenCalledWith('git status --porcelain', expect.any(Object));\n    });\n\n    it('should handle git operation failures gracefully', async () => {\n      mockExecSync.mockImplementation(command => {\n        if (command.toString().includes('git stash push')) {\n          throw new Error('Git stash failed');\n        }\n        return '';\n      });\n\n      await expect(safetyProtocol.createStash('Test stash')).rejects.toThrow(\n        'Failed to create git stash: Git stash failed',\n      );\n\n      const events = safetyProtocol.getSafetyEvents();\n      expect(events.some(e => e.type === SafetyEventType.EMERGENCY_RECOVERY)).toBe(true);\n    });\n  });\n\n  describe('Stash Management and Cleanup', () => {\n    beforeEach(() => {\n      mockExecSync.mockImplementation(command => {\n        const cmd = command.toString();\n        if (cmd.includes('git status --porcelain')) return '';\n        if (cmd.includes('git stash push')) return '';\n        if (cmd.includes('git stash list')) return 'stash@{0}: test-stash';\n        if (cmd.includes('git stash drop')) return '';\n        if (cmd.includes('git branch --show-current')) return 'main';\n        return '';\n      });\n    });\n\n    it('should cleanup old stashes based on retention policy', async () => {\n      // Create old stashes\n      const oldDate = new Date();\n      oldDate.setDate(oldDate.getDate() - 10); // 10 days old\n\n      const recentDate = new Date();\n      recentDate.setDate(recentDate.getDate() - 3); // 3 days old\n\n      // Manually add stashes to simulate age\n      const oldStash = {\n        id: 'old-stash',\n        description: 'Old stash',\n        timestamp: oldDate,\n        branch: 'main',\n        ref: 'stash@{1}',\n      };\n\n      const recentStash = {\n        id: 'recent-stash',\n        description: 'Recent stash',\n        timestamp: recentDate,\n        branch: 'main',\n        ref: 'stash@{0}',\n      };\n\n      (safetyProtocol as any).stashes.set('old-stash', oldStash);\n      (safetyProtocol as any).stashes.set('recent-stash', recentStash);\n\n      await safetyProtocol.cleanupOldStashes();\n\n      const stashes = await safetyProtocol.listStashes();\n      expect(stashes.some(s => s.id === 'old-stash')).toBe(false);\n      expect(stashes.some(s => s.id === 'recent-stash')).toBe(true);\n    });\n\n    it('should generate stash statistics for reporting', async () => {\n      // Create stashes for different phases\n      await safetyProtocol.createStash('Phase 1 checkpoint', 'phase1');\n      await safetyProtocol.createStash('Phase 2 checkpoint', 'phase2');\n      await safetyProtocol.createStash('Another Phase 1 checkpoint', 'phase1');\n\n      const stats = safetyProtocol.getStashStatistics();\n\n      expect(stats.total).toBe(3);\n      expect(stats.byPhase.phase1).toBe(2);\n      expect(stats.byPhase.phase2).toBe(1);\n      expect(stats.oldestStash).toBeInstanceOf(Date);\n      expect(stats.newestStash).toBeInstanceOf(Date);\n    });\n  });\n\n  describe('Integration with Campaign Controller', () => {\n    it('should integrate safety protocols with phase execution', async () => {\n      const phase = mockConfig.phases[0];\n\n      // Mock successful execution with safety protocols\n      jest.spyOn(campaignController as any, 'createSafetyCheckpoint').mockResolvedValue('checkpoint-1');\n      jest.spyOn(campaignController as any, 'getCurrentMetrics').mockResolvedValue({\n        typeScriptErrors: { current: 0, target: 0, reduction: 86, percentage: 100 },\n        lintingWarnings: { current: 4506, target: 0, reduction: 0, percentage: 0 },\n        buildPerformance: { currentTime: 8.5, targetTime: 10, cacheHitRate: 0.8, memoryUsage: 45 },\n        enterpriseSystems: { current: 0, target: 200, transformedExports: 0 },\n      });\n\n      const result = await campaignController.executePhase(phase);\n\n      expect(result.success).toBe(true);\n      expect(result.safetyEvents.length).toBeGreaterThan(0);\n      expect(campaignController['createSafetyCheckpoint']).toHaveBeenCalled();\n    });\n\n    it('should handle rollback scenarios during phase execution', async () => {\n      const phase = mockConfig.phases[0];\n\n      // Mock validation failure that triggers rollback\n      jest.spyOn(campaignController as any, 'validatePhaseProgress').mockResolvedValue({\n        success: false,\n        errors: ['Corruption detected'],\n        warnings: [],\n      });\n\n      jest.spyOn(campaignController, 'rollbackToCheckpoint').mockResolvedValue();\n\n      await expect(campaignController.executePhase(phase)).rejects.toThrow(\n        'Tool execution failed: Corruption detected',\n      );\n\n      expect(campaignController.rollbackToCheckpoint).toHaveBeenCalled();\n    });\n  });\n\n  describe('File System Integration', () => {\n    it('should handle file read errors during corruption detection', async () => {\n      mockFs.readFileSync.mockImplementation(() => {\n        throw new Error('Permission denied');\n      });\n\n      const report = await safetyProtocol.detectCorruption(['protected-file.ts']);\n\n      expect(report.detectedFiles).toContain('protected-file.ts');\n      expect(report.severity).toBe(CorruptionSeverity.HIGH);\n      expect(report.corruptionPatterns.some(p => p.pattern === 'FILE_READ_ERROR')).toBe(true);\n    });\n\n    it('should skip non-existent files gracefully', async () => {\n      mockFs.existsSync.mockReturnValue(false);\n\n      const report = await safetyProtocol.detectCorruption(['non-existent.ts']);\n\n      expect(report.detectedFiles).toEqual([]);\n      expect(report.severity).toBe(CorruptionSeverity.LOW);\n    });\n\n    it('should handle mixed file types appropriately', async () => {\n      const files = ['script.ts', 'style.css', 'config.json', 'readme.md'];\n\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readFileSync.mockReturnValue('valid content');\n\n      const report = await safetyProtocol.detectImportExportCorruption(files);\n\n      // Should only process TypeScript/JavaScript files\n      expect(report.detectedFiles).toEqual([]);\n      expect(report.severity).toBe(CorruptionSeverity.LOW);\n    });\n  });\n\n  describe('Safety Event Tracking', () => {\n    it('should track safety events throughout integration scenarios', async () => {\n      // Create stash\n      await safetyProtocol.createStash('Test stash');\n\n      // Detect corruption\n      mockFs.readFileSync.mockReturnValue('<<<<<<< HEAD\\nconflict\\n>>>>>>> branch');\n      await safetyProtocol.detectCorruption(['test-file.ts']);\n\n      // Apply stash\n      await safetyProtocol.applyStash((await safetyProtocol.listStashes())[0].id);\n\n      const events = safetyProtocol.getSafetyEvents();\n\n      expect(events.some(e => e.type === SafetyEventType.CHECKPOINT_CREATED)).toBe(true);\n      expect(events.some(e => e.type === SafetyEventType.CORRUPTION_DETECTED)).toBe(true);\n      expect(events.some(e => e.type === SafetyEventType.ROLLBACK_TRIGGERED)).toBe(true);\n    });\n\n    it('should maintain event history with proper severity levels', async () => {\n      // Generate events of different severities\n      await safetyProtocol.createStash('Info event'); // INFO\n\n      mockFs.readFileSync.mockReturnValue('<<<<<<< HEAD\\nconflict\\n>>>>>>> branch');\n      await safetyProtocol.detectCorruption(['test-file.ts']); // CRITICAL\n\n      const events = safetyProtocol.getSafetyEvents();\n      const severities = events.map(e => e.severity);\n\n      expect(severities).toContain(SafetyEventSeverity.INFO);\n      expect(severities).toContain(SafetyEventSeverity.CRITICAL);\n    });\n  });\n});\n"],"version":3}