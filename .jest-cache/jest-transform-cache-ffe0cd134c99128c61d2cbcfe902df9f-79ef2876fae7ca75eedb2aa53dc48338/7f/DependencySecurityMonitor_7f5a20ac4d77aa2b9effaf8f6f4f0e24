a31b75918d09dca8b62cabd56508df51
"use strict";
/**
 * Dependency and Security Monitoring System
 * Automated dependency update monitoring and security vulnerability scanning
 * Part of the Kiro Optimization Campaign System
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_DEPENDENCY_SECURITY_CONFIG = exports.DependencySecurityMonitor = void 0;
const child_process_1 = require("child_process");
const fs = __importStar(require("fs"));
const logger_1 = require("../../utils/logger");
class DependencySecurityMonitor {
    config;
    packageJsonPath;
    constructor(config, packageJsonPath = 'package.json') {
        this.config = config;
        this.packageJsonPath = packageJsonPath;
    }
    /**
     * Execute comprehensive dependency and security monitoring
     */
    async executeDependencySecurityMonitoring() {
        const startTime = Date.now();
        logger_1.logger.info('Starting dependency and security monitoring');
        try {
            const result = {
                dependenciesScanned: 0,
                vulnerabilitiesFound: 0,
                updatesAvailable: 0,
                updatesApplied: 0,
                securityPatchesApplied: 0,
                compatibilityTestsPassed: true,
                errors: [],
                warnings: [],
                securityReport: {
                    vulnerabilities: [],
                    summary: { critical: 0, high: 0, moderate: 0, low: 0, total: 0 },
                    recommendations: []
                },
                updateReport: {
                    availableUpdates: [],
                    appliedUpdates: [],
                    failedUpdates: [],
                    summary: { major: 0, minor: 0, patch: 0, security: 0, total: 0 }
                }
            };
            // Step 1: Scan for security vulnerabilities
            if (this.config.securityScanEnabled) {
                try {
                    result.securityReport = await this.scanSecurityVulnerabilities();
                    result.vulnerabilitiesFound = result.securityReport.summary.total;
                }
                catch (error) {
                    result.errors.push(`Security scan failed: ${error.message || 'Unknown error'}`);
                }
            }
            // Step 2: Check for dependency updates
            try {
                result.updateReport = await this.checkDependencyUpdates();
                result.updatesAvailable = result.updateReport.summary.total;
                result.dependenciesScanned = await this.getDependencyCount();
            }
            catch (error) {
                result.errors.push(`Dependency update check failed: ${error.message || 'Unknown error'}`);
            }
            // Step 3: Apply security patches automatically if enabled
            if (this.config.autoUpdateEnabled) {
                try {
                    const securityUpdates = await this.applySecurityPatches(result.securityReport.vulnerabilities);
                    result.securityPatchesApplied = securityUpdates.length;
                    result.updateReport.appliedUpdates.push(...securityUpdates);
                }
                catch (error) {
                    result.errors.push(`Security patch application failed: ${error.message || 'Unknown error'}`);
                }
            }
            // Step 4: Apply safe dependency updates
            if (this.config.autoUpdateEnabled) {
                try {
                    const safeUpdates = await this.applySafeUpdates(result.updateReport.availableUpdates);
                    result.updatesApplied = safeUpdates.length;
                    result.updateReport.appliedUpdates.push(...safeUpdates);
                }
                catch (error) {
                    result.errors.push(`Safe update application failed: ${error.message || 'Unknown error'}`);
                }
            }
            // Step 5: Run compatibility tests if enabled
            if (this.config.compatibilityTestingEnabled && result.updatesApplied > 0) {
                try {
                    result.compatibilityTestsPassed = await this.runCompatibilityTests();
                }
                catch (error) {
                    result.errors.push(`Compatibility testing failed: ${error.message || 'Unknown error'}`);
                    result.compatibilityTestsPassed = false;
                }
            }
            const executionTime = Date.now() - startTime;
            logger_1.logger.info(`Dependency and security monitoring completed in ${executionTime}ms`, {
                dependenciesScanned: result.dependenciesScanned,
                vulnerabilitiesFound: result.vulnerabilitiesFound,
                updatesApplied: result.updatesApplied
            });
            return result;
        }
        catch (error) {
            logger_1.logger.error('Dependency and security monitoring failed', error);
            return {
                dependenciesScanned: 0,
                vulnerabilitiesFound: 0,
                updatesAvailable: 0,
                updatesApplied: 0,
                securityPatchesApplied: 0,
                compatibilityTestsPassed: false,
                errors: [String(error.message || 'Unknown error')],
                warnings: [],
                securityReport: {
                    vulnerabilities: [],
                    summary: { critical: 0, high: 0, moderate: 0, low: 0, total: 0 },
                    recommendations: []
                },
                updateReport: {
                    availableUpdates: [],
                    appliedUpdates: [],
                    failedUpdates: [],
                    summary: { major: 0, minor: 0, patch: 0, security: 0, total: 0 }
                }
            };
        }
    }
    /**
     * Scan for security vulnerabilities using yarn audit
     */
    async scanSecurityVulnerabilities() {
        try {
            const auditOutput = (0, child_process_1.execSync)('yarn audit --json', {
                encoding: 'utf8',
                stdio: 'pipe',
                timeout: 60000
            });
            const auditData = JSON.parse(auditOutput);
            const vulnerabilities = [];
            const summary = { critical: 0, high: 0, moderate: 0, low: 0, total: 0 };
            // Parse npm audit output
            if (auditData.vulnerabilities) {
                for (const [packageName, vulnData] of Object.entries(auditData.vulnerabilities)) {
                    const vuln = vulnData;
                    const vulnerability = {
                        packageName,
                        currentVersion: vuln.via?.[0]?.range || 'unknown',
                        vulnerableVersions: vuln.range || 'unknown',
                        severity: vuln.severity,
                        cve: vuln.via?.[0]?.source || 'N/A',
                        description: vuln.via?.[0]?.title || 'No description available',
                        fixedVersion: vuln.fixAvailable?.version,
                        patchAvailable: !!vuln.fixAvailable
                    };
                    vulnerabilities.push(vulnerability);
                    summary[vuln.severity]++;
                    summary.total++;
                }
            }
            const recommendations = this.generateSecurityRecommendations(vulnerabilities, summary);
            return {
                vulnerabilities,
                summary,
                recommendations
            };
        }
        catch (error) {
            logger_1.logger.error('Security vulnerability scan failed', error);
            return {
                vulnerabilities: [],
                summary: { critical: 0, high: 0, moderate: 0, low: 0, total: 0 },
                recommendations: ['Failed to scan for vulnerabilities. Please run yarn audit manually.']
            };
        }
    }
    /**
     * Check for available dependency updates
     */
    async checkDependencyUpdates() {
        try {
            const outdatedOutput = (0, child_process_1.execSync)('yarn outdated --json', {
                encoding: 'utf8',
                stdio: 'pipe',
                timeout: 60000
            });
            const outdatedData = JSON.parse(outdatedOutput || '{}');
            const availableUpdates = [];
            const summary = { major: 0, minor: 0, patch: 0, security: 0, total: 0 };
            for (const [packageName, updateInfo] of Object.entries(outdatedData)) {
                const info = updateInfo;
                const updateType = this.determineUpdateType(info.current, info.latest);
                const breakingChanges = updateType === 'major';
                const update = {
                    packageName,
                    currentVersion: info.current,
                    latestVersion: info.latest,
                    updateType,
                    changelogUrl: await this.getChangelogUrl(packageName),
                    breakingChanges,
                    securityFix: false,
                    testingRequired: breakingChanges || this.requiresTesting(packageName)
                };
                availableUpdates.push(update);
                summary[updateType]++;
                summary.total++;
            }
            return {
                availableUpdates,
                appliedUpdates: [],
                failedUpdates: [],
                summary
            };
        }
        catch (error) {
            // yarn outdated returns non-zero exit code when updates are available
            if (error.stdout) {
                try {
                    const outdatedData = JSON.parse(error.stdout || '{}');
                    // Process the data as above
                    return this.processOutdatedData(outdatedData);
                }
                catch (parseError) {
                    logger_1.logger.error('Failed to parse yarn outdated output', parseError);
                }
            }
            return {
                availableUpdates: [],
                appliedUpdates: [],
                failedUpdates: [],
                summary: { major: 0, minor: 0, patch: 0, security: 0, total: 0 }
            };
        }
    }
    /**
     * Apply security patches automatically
     */
    async applySecurityPatches(vulnerabilities) {
        const appliedUpdates = [];
        for (const vuln of vulnerabilities) {
            if (!vuln.patchAvailable)
                continue;
            const shouldAutoFix = this.shouldAutoFixVulnerability(vuln.severity);
            if (!shouldAutoFix)
                continue;
            if (this.config.excludedPackages.includes(vuln.packageName)) {
                logger_1.logger.info(`Skipping excluded package: ${vuln.packageName}`);
                continue;
            }
            try {
                // Apply the security fix
                const updateCommand = vuln.fixedVersion
                    ? `yarn add ${vuln.packageName}@${vuln.fixedVersion}`
                    : `yarn audit --fix`;
                (0, child_process_1.execSync)(updateCommand, {
                    encoding: 'utf8',
                    stdio: 'pipe',
                    timeout: 120000
                });
                const update = {
                    packageName: vuln.packageName,
                    currentVersion: vuln.currentVersion,
                    latestVersion: vuln.fixedVersion || 'patched',
                    updateType: 'patch',
                    breakingChanges: false,
                    securityFix: true,
                    testingRequired: false
                };
                appliedUpdates.push(update);
                logger_1.logger.info(`Applied security patch for ${vuln.packageName}`);
            }
            catch (error) {
                logger_1.logger.error(`Failed to apply security patch for ${vuln.packageName}`, error);
            }
        }
        return appliedUpdates;
    }
    /**
     * Apply safe dependency updates
     */
    async applySafeUpdates(availableUpdates) {
        const appliedUpdates = [];
        for (const update of availableUpdates) {
            if (this.config.excludedPackages.includes(update.packageName)) {
                logger_1.logger.info(`Skipping excluded package: ${update.packageName}`);
                continue;
            }
            const strategy = this.getUpdateStrategy(update);
            if (!strategy || strategy.updateType === 'none')
                continue;
            if (strategy.requiresManualApproval && update.updateType === 'major') {
                logger_1.logger.info(`Skipping major update requiring manual approval: ${update.packageName}`);
                continue;
            }
            try {
                // Apply the update
                const updateCommand = `yarn add ${update.packageName}@${update.latestVersion}`;
                (0, child_process_1.execSync)(updateCommand, {
                    encoding: 'utf8',
                    stdio: 'pipe',
                    timeout: 120000
                });
                appliedUpdates.push(update);
                logger_1.logger.info(`Applied update for ${update.packageName}: ${update.currentVersion} → ${update.latestVersion}`);
                // Run tests if required
                if (strategy.testingRequired && this.config.compatibilityTestingEnabled) {
                    const testsPass = await this.runPackageTests(update.packageName);
                    if (!testsPass) {
                        logger_1.logger.warn(`Tests failed after updating ${update.packageName}, consider rollback`);
                    }
                }
            }
            catch (error) {
                logger_1.logger.error(`Failed to apply update for ${update.packageName}`, error);
            }
        }
        return appliedUpdates;
    }
    /**
     * Run compatibility tests
     */
    async runCompatibilityTests() {
        try {
            // Run TypeScript compilation check
            (0, child_process_1.execSync)('yarn build', {
                encoding: 'utf8',
                stdio: 'pipe',
                timeout: 300000
            });
            // Run test suite
            (0, child_process_1.execSync)('yarn test', {
                encoding: 'utf8',
                stdio: 'pipe',
                timeout: 300000
            });
            return true;
        }
        catch (error) {
            logger_1.logger.error('Compatibility tests failed', error);
            return false;
        }
    }
    // Private helper methods
    processOutdatedData(outdatedData) {
        const availableUpdates = [];
        const summary = { major: 0, minor: 0, patch: 0, security: 0, total: 0 };
        for (const [packageName, updateInfo] of Object.entries(outdatedData)) {
            const info = updateInfo;
            const updateType = this.determineUpdateType(info.current, info.latest);
            const update = {
                packageName,
                currentVersion: info.current,
                latestVersion: info.latest,
                updateType,
                breakingChanges: updateType === 'major',
                securityFix: false,
                testingRequired: updateType === 'major' || this.requiresTesting(packageName)
            };
            availableUpdates.push(update);
            summary[updateType]++;
            summary.total++;
        }
        return {
            availableUpdates,
            appliedUpdates: [],
            failedUpdates: [],
            summary
        };
    }
    determineUpdateType(current, latest) {
        const currentParts = current.replace(/[^0-9.]/g, '').split('.').map(Number);
        const latestParts = latest.replace(/[^0-9.]/g, '').split('.').map(Number);
        if (latestParts[0] > currentParts[0])
            return 'major';
        if (latestParts[1] > currentParts[1])
            return 'minor';
        return 'patch';
    }
    shouldAutoFixVulnerability(severity) {
        const { securityThresholds } = this.config;
        switch (severity) {
            case 'critical':
                return securityThresholds.autoFixCritical;
            case 'high':
                return securityThresholds.autoFixHigh;
            default:
                return false;
        }
    }
    getUpdateStrategy(update) {
        for (const strategy of this.config.updateStrategies) {
            if (strategy.pattern.test(update.packageName)) {
                return strategy;
            }
        }
        return null;
    }
    requiresTesting(packageName) {
        // Packages that typically require testing after updates
        const testingRequiredPatterns = [
            /^react/,
            /^next/,
            /^typescript/,
            /^@types\//,
            /^eslint/,
            /^jest/,
            /^babel/
        ];
        return testingRequiredPatterns.some(pattern => pattern.test(packageName));
    }
    async getChangelogUrl(packageName) {
        try {
            const packageInfo = (0, child_process_1.execSync)(`yarn info ${packageName} --json`, {
                encoding: 'utf8',
                stdio: 'pipe',
                timeout: 10000
            });
            const info = JSON.parse(packageInfo);
            return info.repository?.url || info.homepage;
        }
        catch (error) {
            return undefined;
        }
    }
    async runPackageTests(packageName) {
        try {
            // Run a subset of tests related to the updated package
            (0, child_process_1.execSync)('yarn test --testNamePattern=".*" --bail', {
                encoding: 'utf8',
                stdio: 'pipe',
                timeout: 60000
            });
            return true;
        }
        catch (error) {
            return false;
        }
    }
    async getDependencyCount() {
        try {
            const packageJson = JSON.parse(fs.readFileSync(this.packageJsonPath, 'utf8'));
            const deps = Object.keys(packageJson.dependencies || {});
            const devDeps = Object.keys(packageJson.devDependencies || {});
            return deps.length + devDeps.length;
        }
        catch (error) {
            return 0;
        }
    }
    generateSecurityRecommendations(vulnerabilities, summary) {
        const recommendations = [];
        if (summary.critical > 0) {
            recommendations.push(`🚨 ${summary.critical} critical vulnerabilities found - immediate action required`);
        }
        if (summary.high > 0) {
            recommendations.push(`⚠️ ${summary.high} high severity vulnerabilities found - update as soon as possible`);
        }
        if (summary.moderate > 0) {
            recommendations.push(`📋 ${summary.moderate} moderate vulnerabilities found - plan updates`);
        }
        const patchableVulns = vulnerabilities.filter(v => v.patchAvailable);
        if (patchableVulns.length > 0) {
            recommendations.push(`✅ ${patchableVulns.length} vulnerabilities have patches available`);
        }
        if (summary.total === 0) {
            recommendations.push('✅ No security vulnerabilities found');
        }
        return recommendations;
    }
}
exports.DependencySecurityMonitor = DependencySecurityMonitor;
/**
 * Default configuration for dependency and security monitoring
 */
exports.DEFAULT_DEPENDENCY_SECURITY_CONFIG = {
    maxDependenciesPerBatch: 10,
    safetyValidationEnabled: true,
    autoUpdateEnabled: false,
    securityScanEnabled: true,
    compatibilityTestingEnabled: true,
    updateStrategies: [
        {
            name: 'Security patches',
            description: 'Automatically apply security patches',
            pattern: /.*/,
            updateType: 'patch',
            requiresManualApproval: false,
            testingRequired: false
        },
        {
            name: 'TypeScript ecosystem',
            description: 'Careful updates for TypeScript-related packages',
            pattern: /^(@types\/|typescript|ts-)/,
            updateType: 'minor',
            requiresManualApproval: true,
            testingRequired: true
        },
        {
            name: 'React ecosystem',
            description: 'Careful updates for React-related packages',
            pattern: /^(react|@react|next)/,
            updateType: 'minor',
            requiresManualApproval: true,
            testingRequired: true
        },
        {
            name: 'Development tools',
            description: 'Safe updates for development tools',
            pattern: /^(eslint|prettier|jest|babel)/,
            updateType: 'minor',
            requiresManualApproval: false,
            testingRequired: true
        }
    ],
    securityThresholds: {
        critical: 0,
        high: 5,
        moderate: 10,
        low: 20,
        autoFixCritical: true,
        autoFixHigh: false
    },
    excludedPackages: [
        // Packages to never auto-update
        'react',
        'react-dom',
        'next',
        'typescript'
    ]
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,