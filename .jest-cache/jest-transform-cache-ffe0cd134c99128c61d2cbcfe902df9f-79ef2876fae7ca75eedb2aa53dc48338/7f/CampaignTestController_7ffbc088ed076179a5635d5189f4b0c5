b268a56b602386e330f5df9b5f942ae8
"use strict";
/**
 * Campaign Test Controller
 *
 * Provides campaign pause/resume functionality specifically designed for test isolation.
 * Ensures that campaign operations don't interfere with test execution.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.campaignTestController = exports.CampaignTestController = void 0;
const campaign_1 = require("../../types/campaign");
const CampaignSystemMocks_1 = require("../mocks/CampaignSystemMocks");
const TestSafeProgressTracker_1 = require("./TestSafeProgressTracker");
/**
 * Campaign Test Controller manages campaign system state during test execution
 * to ensure proper isolation and prevent interference between tests.
 */
class CampaignTestController {
    static instance = null;
    testState;
    isolationConfig;
    testSafeTracker = null;
    mockInstances;
    originalEnvVars = {};
    activeTestName = null;
    constructor() {
        this.testState = {
            isPaused: false,
            isIsolated: false,
            pausedAt: null,
            resumedAt: null,
            testName: null,
            originalState: null
        };
        this.isolationConfig = {
            pauseProgressTracking: true,
            preventBuildExecution: true,
            preventGitOperations: true,
            enableMemoryMonitoring: true,
            isolateFileSystem: false,
            mockExternalAPIs: true
        };
        this.mockInstances = {
            controller: null,
            tracker: null,
            safety: null
        };
        this.setupTestEnvironment();
    }
    static getInstance() {
        if (!CampaignTestController.instance) {
            CampaignTestController.instance = new CampaignTestController();
        }
        return CampaignTestController.instance;
    }
    /**
     * Initialize campaign test environment for a specific test
     */
    async initializeForTest(testName, config) {
        this.activeTestName = testName;
        this.isolationConfig = { ...this.isolationConfig, ...config };
        // Store original state
        this.testState.originalState = this.captureOriginalState();
        // Initialize mock campaign system
        const mockSystem = CampaignSystemMocks_1.campaignTestIsolation.initializeMockCampaignSystem();
        this.mockInstances = mockSystem;
        // Initialize test-safe progress tracker
        if (this.isolationConfig.pauseProgressTracking) {
            this.testSafeTracker = new TestSafeProgressTracker_1.TestSafeProgressTracker({
                maxHistorySize: 10,
                memoryCheckFrequency: 3,
                enableMemoryMonitoring: this.isolationConfig.enableMemoryMonitoring,
                simulateRealProgress: false
            });
        }
        // Apply test isolation
        await this.applyTestIsolation(testName);
        console.log(`Campaign test environment initialized for: ${testName}`);
    }
    /**
     * Pause all campaign operations for test isolation
     */
    async pauseCampaignForTest(testName) {
        if (this.testState.isPaused) {
            console.warn(`Campaign already paused for test: ${this.testState.testName}`);
            return;
        }
        this.testState.isPaused = true;
        this.testState.pausedAt = new Date();
        this.testState.testName = testName;
        // Pause mock campaign controller
        if (this.mockInstances.controller) {
            this.mockInstances.controller.pauseCampaign();
        }
        // Stop test-safe progress tracking
        if (this.testSafeTracker) {
            this.testSafeTracker.stopTracking(testName);
        }
        // Pause campaign isolation manager
        CampaignSystemMocks_1.campaignTestIsolation.pauseCampaignOperations();
        // Set environment variables to prevent actual operations
        this.setTestEnvironmentVars();
        console.log(`Campaign operations paused for test: ${testName}`);
    }
    /**
     * Resume campaign operations after test completion
     */
    async resumeCampaignAfterTest(testName) {
        if (!this.testState.isPaused) {
            console.warn('Campaign is not paused, nothing to resume');
            return;
        }
        if (this.testState.testName !== testName) {
            console.warn(`Resume test name (${testName}) doesn't match pause test name (${this.testState.testName})`);
        }
        this.testState.isPaused = false;
        this.testState.resumedAt = new Date();
        // Resume mock campaign controller
        if (this.mockInstances.controller) {
            this.mockInstances.controller.resumeCampaign();
        }
        // Resume campaign isolation manager
        CampaignSystemMocks_1.campaignTestIsolation.resumeCampaignOperations();
        // Restore environment variables
        this.restoreEnvironmentVars();
        console.log(`Campaign operations resumed after test: ${testName}`);
    }
    /**
     * Get test-safe progress tracker instance
     */
    getTestSafeTracker() {
        return this.testSafeTracker;
    }
    /**
     * Get mock campaign instances for testing
     */
    getMockInstances() {
        return { ...this.mockInstances };
    }
    /**
     * Check if campaign is currently paused
     */
    isPaused() {
        return this.testState.isPaused;
    }
    /**
     * Check if test isolation is active
     */
    isIsolated() {
        return this.testState.isIsolated;
    }
    /**
     * Get current test state
     */
    getTestState() {
        return { ...this.testState };
    }
    /**
     * Simulate campaign progress for testing
     */
    async simulateProgress(targetMetrics, durationMs = 1000, testName) {
        if (!this.testSafeTracker) {
            throw new Error('Test-safe tracker not initialized');
        }
        await this.testSafeTracker.simulateProgress(targetMetrics, durationMs, testName || this.activeTestName || 'unknown');
    }
    /**
     * Update mock metrics for testing scenarios
     */
    updateMockMetrics(updates, testName) {
        // Update test-safe tracker
        if (this.testSafeTracker) {
            this.testSafeTracker.updateMetrics(updates, testName);
        }
        // Update mock tracker
        if (this.mockInstances.tracker) {
            this.mockInstances.tracker.updateMockMetrics(updates);
        }
        // Update mock controller
        if (this.mockInstances.controller) {
            this.mockInstances.controller.updateMockMetrics(updates);
        }
    }
    /**
     * Create mock safety event for testing
     */
    createMockSafetyEvent(type, description, severity = campaign_1.SafetyEventSeverity.INFO) {
        return {
            type,
            timestamp: new Date(),
            description: `Mock: ${description}`,
            severity,
            action: 'MOCK_TEST_EVENT'
        };
    }
    /**
     * Validate test isolation state
     */
    validateTestIsolation() {
        const issues = [];
        const warnings = [];
        // Check environment variables
        if (process.env.NODE_ENV !== 'test') {
            issues.push('NODE_ENV is not set to "test"');
        }
        if (!process.env.CAMPAIGN_TEST_MODE) {
            warnings.push('CAMPAIGN_TEST_MODE not set');
        }
        if (!process.env.DISABLE_ACTUAL_BUILDS) {
            issues.push('DISABLE_ACTUAL_BUILDS not set - actual builds may run');
        }
        // Check mock instances
        if (!this.mockInstances.controller) {
            warnings.push('Mock campaign controller not initialized');
        }
        if (!this.mockInstances.tracker) {
            warnings.push('Mock progress tracker not initialized');
        }
        // Check test-safe tracker
        if (this.isolationConfig.pauseProgressTracking && !this.testSafeTracker) {
            warnings.push('Test-safe progress tracker not initialized');
        }
        // Validate test-safe tracker state
        if (this.testSafeTracker) {
            const trackerValidation = this.testSafeTracker.validateTrackingState();
            issues.push(...trackerValidation.errors);
            warnings.push(...trackerValidation.warnings);
        }
        return {
            isValid: issues.length === 0,
            issues,
            warnings
        };
    }
    /**
     * Cleanup test environment and reset state
     */
    async cleanupAfterTest(testName) {
        // Resume if paused
        if (this.testState.isPaused) {
            await this.resumeCampaignAfterTest(testName);
        }
        // Cleanup test-safe tracker
        if (this.testSafeTracker) {
            this.testSafeTracker.cleanup();
            this.testSafeTracker = null;
        }
        // Reset mock instances
        CampaignSystemMocks_1.campaignTestIsolation.resetAllMockStates();
        this.mockInstances = {
            controller: null,
            tracker: null,
            safety: null
        };
        // Restore original state
        if (this.testState.originalState) {
            this.restoreOriginalState(this.testState.originalState);
        }
        // Reset test state
        this.testState = {
            isPaused: false,
            isIsolated: false,
            pausedAt: null,
            resumedAt: null,
            testName: null,
            originalState: null
        };
        this.activeTestName = null;
        console.log(`Campaign test environment cleaned up for: ${testName}`);
    }
    /**
     * Force cleanup and reset everything
     */
    static async forceCleanup() {
        if (CampaignTestController.instance) {
            const instance = CampaignTestController.instance;
            // Cleanup current test if any
            if (instance.activeTestName) {
                await instance.cleanupAfterTest(instance.activeTestName);
            }
            // Cleanup campaign isolation
            CampaignSystemMocks_1.campaignTestIsolation.restoreEnvironment();
            // Reset singleton
            CampaignTestController.instance = null;
        }
    }
    // Private helper methods
    setupTestEnvironment() {
        // Store original environment variables
        this.originalEnvVars = {
            NODE_ENV: process.env.NODE_ENV,
            CAMPAIGN_TEST_MODE: process.env.CAMPAIGN_TEST_MODE,
            DISABLE_ACTUAL_BUILDS: process.env.DISABLE_ACTUAL_BUILDS,
            DISABLE_GIT_OPERATIONS: process.env.DISABLE_GIT_OPERATIONS,
            MOCK_CAMPAIGN_SYSTEM: process.env.MOCK_CAMPAIGN_SYSTEM
        };
        // Set basic test environment
        process.env.NODE_ENV = 'test';
        process.env.CAMPAIGN_TEST_MODE = 'true';
    }
    async applyTestIsolation(testName) {
        this.testState.isIsolated = true;
        // Set environment variables for test isolation
        this.setTestEnvironmentVars();
        // Mock external dependencies if configured
        if (this.isolationConfig.mockExternalAPIs) {
            this.mockExternalAPIs();
        }
        // Start test-safe tracking if configured
        if (this.testSafeTracker && this.isolationConfig.pauseProgressTracking) {
            this.testSafeTracker.startTracking(testName);
        }
    }
    setTestEnvironmentVars() {
        if (this.isolationConfig.preventBuildExecution) {
            process.env.DISABLE_ACTUAL_BUILDS = 'true';
        }
        if (this.isolationConfig.preventGitOperations) {
            process.env.DISABLE_GIT_OPERATIONS = 'true';
        }
        if (this.isolationConfig.mockExternalAPIs) {
            process.env.MOCK_CAMPAIGN_SYSTEM = 'true';
        }
    }
    restoreEnvironmentVars() {
        Object.entries(this.originalEnvVars).forEach(([key, value]) => {
            if (value !== undefined) {
                process.env[key] = value;
            }
            else {
                delete process.env[key];
            }
        });
    }
    mockExternalAPIs() {
        // Mock child_process.execSync to prevent actual command execution
        const UNUSED_originalExecSync = require('child_process').execSync;
        jest.spyOn(require('child_process'), 'execSync').mockImplementation((command) => {
            // Return mock outputs for common commands
            if (command.includes('tsc --noEmit')) {
                return ''; // No TypeScript errors
            }
            if (command.includes('yarn lint')) {
                return ''; // No linting warnings
            }
            if (command.includes('yarn build')) {
                return 'Build completed successfully';
            }
            if (command.includes('git stash')) {
                return 'Saved working directory and index state';
            }
            return 'Mock command output';
        });
        // Mock fs operations for file system isolation if configured
        if (this.isolationConfig.isolateFileSystem) {
            this.mockFileSystemOperations();
        }
    }
    mockFileSystemOperations() {
        const fs = require('fs');
        // Mock file existence checks
        jest.spyOn(fs, 'existsSync').mockImplementation((path) => {
            // Return true for common paths to prevent errors
            if (path.includes('.git') || path.includes('package.json') || path.includes('tsconfig.json')) {
                return true;
            }
            return false;
        });
        // Mock file reading
        jest.spyOn(fs, 'readFileSync').mockImplementation((_path) => {
            return 'Mock file content';
        });
        // Mock file writing
        jest.spyOn(fs, 'writeFileSync').mockImplementation(() => {
            // Do nothing - prevent actual file writes
        });
    }
    captureOriginalState() {
        return {
            envVars: { ...process.env },
            mockStates: this.mockInstances
        };
    }
    restoreOriginalState(originalState) {
        // Restore environment variables
        if (originalState.envVars) {
            Object.keys(process.env).forEach(key => {
                if (!(key in originalState.envVars)) {
                    delete process.env[key];
                }
            });
            Object.entries(originalState.envVars).forEach(([key, value]) => {
                if (typeof value === 'string') {
                    process.env[key] = value;
                }
            });
        }
    }
}
exports.CampaignTestController = CampaignTestController;
// Export singleton instance for easy access
exports.campaignTestController = CampaignTestController.getInstance();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,