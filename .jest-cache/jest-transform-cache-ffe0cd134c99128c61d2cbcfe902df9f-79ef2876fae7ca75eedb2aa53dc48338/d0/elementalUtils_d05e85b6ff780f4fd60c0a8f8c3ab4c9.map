{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/utils/elementalUtils.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/utils/elementalUtils.ts"],"sourcesContent":["// src/utils/elementalUtils.ts\n\nimport { DEFAULT_ELEMENTAL_PROPERTIES } from '@/constants/elementalConstants';\nimport type {\n  ElementalProperties,\n  Recipe,\n  ElementalAffinity,\n  ElementalCharacteristics,\n  Element,\n  ElementalProfile,\n} from '@/types/alchemy';\nimport type { IngredientMapping } from '@/data/ingredients/types';\nimport { ElementalCalculator } from '@/services/ElementalCalculator';\nimport {\n  elements,\n  elementalInteractions,\n  elementalFunctions,\n} from './elementalMappings';\nimport {\n  ElementalItem,\n} from '@/types/alchemy';\nimport { AlchemicalItem } from '@/calculations/alchemicalTransformation';\nimport { ElementalCharacter, AlchemicalProperty } from '@/constants/planetaryElements';\nimport {\n  LunarPhase,\n  calculatePlanetaryBoost,\n} from '@/constants/planetaryFoodAssociations';\nimport { \n  isElementalProperties, \n  isElementalPropertyKey, \n  logUnexpectedValue \n} from '@/utils/validation';\nimport { ErrorHandler } from '@/services/errorHandler';\nimport { getLatestAstrologicalState } from '@/services/AstrologicalService';\n\n// Missing ELEMENTAL_CHARACTERISTICS constant\nconst ELEMENTAL_CHARACTERISTICS = {\n  Fire: {\n    cookingTechniques: ['grilling', 'roasting', 'searing', 'flambéing'],\n    timeOfDay: ['morning', 'noon'],\n    qualities: ['energetic', 'transformative', 'intense'],\n    temperature: 'hot'\n  },\n  Water: {\n    cookingTechniques: ['boiling', 'steaming', 'poaching', 'braising'],\n    timeOfDay: ['evening', 'night'],\n    qualities: ['flowing', 'cooling', 'nurturing'],\n    temperature: 'cool'\n  },\n  Earth: {\n    cookingTechniques: ['baking', 'slow-cooking', 'roasting', 'smoking'],\n    timeOfDay: ['afternoon', 'evening'],\n    qualities: ['grounding', 'stable', 'nourishing'],\n    temperature: 'moderate'\n  },\n  Air: {\n    cookingTechniques: ['whipping', 'frying', 'sautéing', 'dehydrating'],\n    timeOfDay: ['morning', 'midday'],\n    qualities: ['light', 'airy', 'quick'],\n    temperature: 'variable'\n  }\n};\n\n// AlchemicalProperty type imported from @/constants/planetaryElements\n\n/**\n * Validates that elemental properties contain valid values\n * @param properties The elemental properties to validate\n * @returns True if properties are valid, false otherwise\n */\nexport const validateElementalProperties = (\n  properties: ElementalProperties\n): boolean => {\n  // If properties is null or undefined, return false immediately\n  if (!properties) {\n    console.warn('Warning: properties is null or undefined in validateElementalProperties');\n    return false;\n  }\n\n  // Check if all required elements exist\n  const requiredElements = ['Fire', 'Water', 'Earth', 'Air'];\n  for (const element of requiredElements) {\n    if (typeof properties[element] !== 'number') {\n      console.warn(`Warning: properties.${element} is not a number in validateElementalProperties`);\n      return false;\n    }\n\n    // Check if values are between 0 and 1\n    if (properties[element] < 0 || properties[element] > 1) {\n      logUnexpectedValue('validateElementalProperties', {\n        message: `Element value out of range: ${element} = ${properties[element]}`,\n        element,\n        value: properties[element],\n      });\n      return false;\n    }\n  }\n\n  // Optionally check if properties sum to 1 (or close to it due to floating point)\n  const sum = Object.values(properties).reduce((acc, val) => acc + val, 0);\n  const isCloseToOne = Math.abs(sum - 1) < 0.01;\n\n  if (!isCloseToOne) {\n    logUnexpectedValue('validateElementalProperties', {\n      message: `Elemental properties do not sum to 1: ${sum}`,\n      sum,\n      properties,\n    });\n  }\n\n  return true;\n};\n\n/**\n * Normalizes elemental properties to ensure they sum to 1\n * @param properties The elemental properties to normalize\n * @returns Normalized elemental properties\n */\nexport const normalizeProperties = (\n  properties: Partial<ElementalProperties>\n): ElementalProperties => {\n  // Handle null or undefined\n  if (!properties) {\n    console.warn('Warning: properties is null or undefined in normalizeProperties');\n    return { ...DEFAULT_ELEMENTAL_PROPERTIES };\n  }\n\n  // Fill in any missing properties with defaults\n  const completeProperties: ElementalProperties = {\n    Fire: properties.Fire ?? DEFAULT_ELEMENTAL_PROPERTIES.Fire,\n    Water: properties.Water ?? DEFAULT_ELEMENTAL_PROPERTIES.Water,\n    Earth: properties.Earth ?? DEFAULT_ELEMENTAL_PROPERTIES.Earth,\n    Air: properties.Air ?? DEFAULT_ELEMENTAL_PROPERTIES.Air,\n  };\n\n  const sum = Object.values(completeProperties).reduce((acc, val) => acc + val, 0);\n\n  if (sum === 0) {\n    // If sum is 0, return balanced default\n    console.warn('Warning: properties sum is 0 in normalizeProperties');\n    return { ...DEFAULT_ELEMENTAL_PROPERTIES };\n  }\n\n  // Normalize each value\n  return Object.entries(completeProperties).reduce((acc, [key, value]) => {\n    if (isElementalPropertyKey(key)) {\n      acc[key] = value /sum;\n    } else {\n      // This shouldn't happen with the type-safety above, but just in case\n      console.warn(`Warning: invalid key ${key} in normalizeProperties`);\n    }\n    return acc;\n  }, { ...DEFAULT_ELEMENTAL_PROPERTIES });\n};\n\n/**\n * Standardizes elemental properties for recipes, ensuring all recipes have\n * properly normalized elemental values\n * @param recipe The recipe to standardize\n * @returns Recipe with standardized elemental properties\n */\nexport const standardizeRecipeElements = <\n  T extends { elementalProperties?: Partial<ElementalProperties> }\n>(\n  recipe: T | null | undefined\n): T & { elementalProperties: ElementalProperties } => {\n  // Handle null /undefined recipe\n  if (!recipe) {\n    console.warn('Warning: recipe is null or undefined in standardizeRecipeElements');\n    return {\n      elementalProperties: { ...DEFAULT_ELEMENTAL_PROPERTIES }\n    } as T & { elementalProperties: ElementalProperties };\n  }\n\n  // If recipe doesn't have elemental properties, use current elemental state\n  if (!recipe.elementalProperties) {\n    const currentState = ElementalCalculator.getCurrentElementalState();\n    return {\n      ...recipe,\n      elementalProperties: currentState,\n    };\n  }\n\n  // Normalize properties to ensure they sum to 1\n  return {\n    ...recipe,\n    elementalProperties: normalizeProperties(recipe.elementalProperties),\n  };\n};\n\nexport const validateElementalRequirements = (\n  properties: unknown\n): properties is ElementalProperties => {\n  return isElementalProperties(properties);\n};\n\n/**\n * Gets the elements that are missing or significantly lower than ideal balance in the provided properties\n * @param properties The elemental properties to check\n * @returns Array of elements that are missing or low\n */\nexport function getMissingElements(\n  properties: Partial<ElementalProperties> | null | undefined\n): Element[] {\n  if (!properties) {\n    return ['Fire', 'Water', 'Earth', 'Air'];\n  }\n\n  const missing: Element[] = [];\n  const idealBalance = 0.25; // Each element should ideally be 25%\n  const threshold = 0.15; // Consider missing if below 15%\n\n  for (const element of ['Fire', 'Water', 'Earth', 'Air'] as Element[]) {\n    const value = properties[element] || 0;\n    if (value < threshold) {\n      missing.push(element);\n    }\n  }\n\n  return missing;\n}\n\nexport const elementalUtils = {\n  validateProperties: validateElementalRequirements,\n  normalizeProperties: normalizeProperties,\n  standardizeRecipeElements: standardizeRecipeElements,\n  getMissingElements,\n\n  calculateelementalState(recipe: Recipe | null | undefined): ElementalProperties {\n    if (!recipe?.ingredients?.length) {\n      return ElementalCalculator.getCurrentElementalState();\n    }\n\n    // Create a safe default balance to start\n    const balance: ElementalProperties = { ...DEFAULT_ELEMENTAL_PROPERTIES };\n    \n    // Get total amount for percentage calculations\n    const totalAmount = recipe.ingredients.reduce((sum, ing) => {\n      const amount = ing.amount ?? 1; // Default to 1 if amount is missing\n      return sum + amount;\n    }, 0);\n\n    // Handle the special case where there are no ingredients with amount\n    if (totalAmount === 0) {\n      return balance;\n    }\n\n    // Initialize balance with 0 values\n    Object.keys(balance).forEach(el => {\n      if (isElementalPropertyKey(el)) {\n        balance[el] = 0;\n      }\n    });\n\n    // Process each ingredient\n    recipe.ingredients.forEach(ing => {\n      const amount = ing.amount ?? 1; // Default to 1 if amount is missing\n      \n      if (ing.elementalProperties) {\n        // For each element in the ingredient\n        Object.entries(ing.elementalProperties).forEach(([element, value]) => {\n          if (isElementalPropertyKey(element)) {\n            balance[element] += (value * amount) /totalAmount;\n          }\n        });\n      }\n    });\n\n    // Normalize to ensure they sum to 1\n    return normalizeProperties(balance);\n  },\n\n  combineProperties(\n    a: ElementalProperties,\n    b: ElementalProperties,\n    bWeight = 0.5\n  ): ElementalProperties {\n    const combinedProps = {} as ElementalProperties;\n    const aWeight = 1 - bWeight;\n\n    Object.keys(a).forEach((key) => {\n      const element = key as keyof ElementalProperties;\n      combinedProps[element] =\n        a[element] * aWeight + (b[element] || 0) * bWeight;\n    });\n\n    return combinedProps;\n  },\n\n  getelementalState(recipe: Recipe): ElementalProperties {\n    if (!recipe.ingredients?.length) {\n      return ElementalCalculator.getCurrentElementalState();\n    }\n\n    const combinedProperties = recipe.ingredients.reduce(\n      (acc, ingredient) => {\n        const props =\n          ingredient.elementalProperties ||\n          ElementalCalculator.getCurrentElementalState();\n        return {\n          Fire: acc.Fire + props.Fire,\n          Water: acc.Water + props.Water,\n          Earth: acc.Earth + props.Earth,\n          Air: acc.Air + props.Air,\n        };\n      },\n      { Fire: 0, Water: 0, Earth: 0, Air: 0 }\n    );\n\n    return normalizeProperties(combinedProperties);\n  },\n\n  /**\n   * Gets a complementary element that works well with the given element\n   * All elements work well together in their own way\n   * @param element The element to find a complement for\n   * @returns The complementary element\n   */\n  getComplementaryElement(\n    element: keyof ElementalProperties\n  ): keyof ElementalProperties {\n    // Each element complements all others, but we return one suggestion\n    // based on traditional culinary pairings\n    const complementary: Record<\n      keyof ElementalProperties,\n      keyof ElementalProperties\n    > = {\n      Fire: 'Fire', // Fire reinforces itself\n      Water: 'Water', // Water reinforces itself\n      Earth: 'Earth', // Earth reinforces itself\n      Air: 'Air', // Air reinforces itself\n    };\n    return complementary[element];\n  },\n\n  /**\n   * Gets the elemental characteristics for a specific element\n   * @param element The element to get characteristics for\n   * @returns The elemental characteristics\n   */\n  getElementalCharacteristics(element: Element): ElementalCharacteristics {\n    return ELEMENTAL_CHARACTERISTICS[element] as unknown as ElementalCharacteristics;\n  },\n\n  /**\n   * Gets a complete elemental profile that includes properties and characteristics\n   * @param properties The elemental properties\n   * @returns A complete elemental profile\n   */\n  getElementalProfile(\n    properties: ElementalProperties\n  ): Partial<ElementalProfile> {\n    // Find the dominant element\n    const entries = Object.entries(properties) as [Element, number][];\n    let dominantElement: Element = 'Fire';\n    let maxValue = 0;\n\n    for (const [element, value] of entries) {\n      if (value > maxValue) {\n        dominantElement = element;\n        maxValue = value;\n      }\n    }\n\n    return {\n      dominant: dominantElement as 'Fire' | 'Water' | 'Earth' | 'Air',\n      balance: properties,\n      characteristics: [this.getElementalCharacteristics(dominantElement as Element)],\n    };\n  },\n\n  /**\n   * Gets the suggested cooking techniques based on elemental properties\n   * @param properties The elemental properties\n   * @returns Array of recommended cooking techniques\n   */\n  getSuggestedCookingTechniques(properties: ElementalProperties): string[] {\n    const techniques: string[] = [];\n    const threshold = 0.3; // Only consider elements above this threshold for recommendations\n\n    if (properties.Fire > threshold) {\n      techniques.push(\n        ...ELEMENTAL_CHARACTERISTICS.Fire.cookingTechniques.slice(0, 2)\n      );\n    }\n\n    if (properties.Water > threshold) {\n      techniques.push(\n        ...ELEMENTAL_CHARACTERISTICS.Water.cookingTechniques.slice(0, 2)\n      );\n    }\n\n    if (properties.Earth > threshold) {\n      techniques.push(\n        ...ELEMENTAL_CHARACTERISTICS.Earth.cookingTechniques.slice(0, 2)\n      );\n    }\n\n    if (properties.Air > threshold) {\n      techniques.push(\n        ...ELEMENTAL_CHARACTERISTICS.Air.cookingTechniques.slice(0, 2)\n      );\n    }\n\n    // Return unique techniques or a default if none meet the threshold\n    return techniques.length > 0\n      ? Array.from(new Set(techniques))\n      : ['Balanced cooking'];\n  },\n\n  /**\n   * Gets the complementary ingredients based on elemental properties\n   * @param properties The elemental properties\n   * @returns Array of recommended complementary ingredients\n   */\n  getRecommendedTimeOfDay(properties: ElementalProperties): string[] {\n    const times: string[] = [];\n    const threshold = 0.3; // Only consider elements above this threshold for recommendations\n    const weightedTimes: string[] = [];\n\n    // Add times based on the elemental balance, weighted by their values\n    if (properties.Fire > threshold) {\n      for (let i = 0; i < Math.ceil(properties.Fire * 10); i++) {\n        weightedTimes.push(...ELEMENTAL_CHARACTERISTICS.Fire.timeOfDay);\n      }\n    }\n\n    if (properties.Water > threshold) {\n      for (let i = 0; i < Math.ceil(properties.Water * 10); i++) {\n        weightedTimes.push(...ELEMENTAL_CHARACTERISTICS.Water.timeOfDay);\n      }\n    }\n\n    if (properties.Earth > threshold) {\n      for (let i = 0; i < Math.ceil(properties.Earth * 10); i++) {\n        weightedTimes.push(...ELEMENTAL_CHARACTERISTICS.Earth.timeOfDay);\n      }\n    }\n\n    if (properties.Air > threshold) {\n      for (let i = 0; i < Math.ceil(properties.Air * 10); i++) {\n        weightedTimes.push(...ELEMENTAL_CHARACTERISTICS.Air.timeOfDay);\n      }\n    }\n\n    // Return unique times or a default if none meet the threshold\n    return weightedTimes.length > 0\n      ? Array.from(new Set(weightedTimes))\n      : ['Any time'];\n  },\n\n  // Get the default elemental properties\n  getDefaultElementalProperties(): ElementalProperties {\n    return DEFAULT_ELEMENTAL_PROPERTIES;\n  },\n\n  // Export the default elemental properties constant for direct access\n  DEFAULT_ELEMENTAL_PROPERTIES,\n\n  /**\n   * Gets the current elemental state from the ElementalCalculator service\n   * Pattern OO-3: Utility Import Alignment - Standalone export for TS2614 compatibility\n   */\n  getCurrentElementalState(): ElementalProperties {\n    return ElementalCalculator.getCurrentElementalState();\n  },\n\n  /**\n   * Pattern OO-3: Utility Import Alignment - Format consistency helper\n   * Ensures elemental property keys are in lowercase format\n   */\n  ensureLowercaseFormat(properties: unknown): any {\n    if (!properties || typeof properties !== 'object') {\n      return properties;\n    }\n    \n    const lowercaseProps: Record<string, unknown> = {};\n    for (const [key, value] of Object.entries(properties)) {\n      // Convert capitalized element names to lowercase\n      const lowerKey = key.toLowerCase();\n      lowercaseProps[lowerKey] = value;\n    }\n    \n    return lowercaseProps;\n  },\n};\n\nexport default elementalUtils;\n\nexport { elements, elementalInteractions, elementalFunctions };\n\n/**\n * Transform a list of elemental items based on planetary positions\n *\n * @param items Items to transform\n * @param planetaryPositions Current planetary positions\n * @param isDaytime Whether it is currently day\n * @param currentZodiac Current zodiac sign\n * @param lunarPhase Current lunar phase\n * @param elementalBoosts Optional elemental boosts to apply\n * @param planetaryBoosts Optional planetary boosts to apply\n * @returns Transformed alchemical items\n */\nconst ELEMENT_WEIGHTS = {\n  Fire: 1.8,\n  Water: 1.2,\n  Earth: 0.9,\n  Air: 1.5,\n};\n\n// Add this function if uniqueness score is needed\nfunction _calculateUniqueness(\n  elements: Record<ElementalCharacter, number>,\n  planetaryInfluence: number\n): number {\n  // Calculate variance of elemental properties\n  const values = Object.values(elements);\n  const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n  const variance =\n    values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) /\n    values.length;\n\n  // Combine with planetary influence\n  return Math.min(1, variance * (1 + planetaryInfluence));\n}\n\n// Or modify the transformation to remove uniqueness score if not needed\nexport function transformItemsWithPlanetaryPositions(\n  items: ElementalItem[],\n  planetaryPositions: Record<string, unknown>,\n  isDaytime = true,\n  currentZodiac?: string,\n  lunarPhase?: LunarPhase,\n  tarotElementBoosts?: Record<ElementalCharacter, number>,\n  tarotPlanetaryBoosts?: Record<string, number>\n): AlchemicalItem[] {\n  return items.map((item) => {\n    const { boost: planetaryInfluence } = calculatePlanetaryBoost(\n      item,\n      planetaryPositions,\n      currentZodiac,\n      lunarPhase\n    );\n\n    // Scale elemental properties\n    const scaledElements = Object.fromEntries(\n      Object.entries(item.elementalProperties).map(([element, value]) => [\n        element,\n        value * (1 + (planetaryInfluence || 0)),\n      ])\n    ) as Record<ElementalCharacter, number>;\n\n    // Calculate alchemical properties from elemental properties\n    // This follows the same relationships as in the alchemical system:\n    // - Spirit is related to Fire (transformation) and Air (connection)\n    // - Essence is related to Water (fluidity) and Fire (vitality)\n    // - Matter is related to Earth (stability) and Water (cohesion)\n    // - Substance is related to Air (structure) and Earth (form)\n    const spirit = scaledElements.Fire * 0.6 + scaledElements.Air * 0.4;\n    const essence = scaledElements.Water * 0.6 + scaledElements.Fire * 0.4;\n    const matter = scaledElements.Earth * 0.7 + scaledElements.Water * 0.3;\n    const substance = scaledElements.Air * 0.6 + scaledElements.Earth * 0.4;\n\n    // Apply tarot boosts if available\n    const boostedSpirit = spirit * (tarotPlanetaryBoosts?.Spirit || 1.0);\n    const boostedEssence = essence * (tarotPlanetaryBoosts?.Essence || 1.0);\n    const boostedMatter = matter * (tarotPlanetaryBoosts?.Matter || 1.0);\n    const boostedSubstance =\n      substance * (tarotPlanetaryBoosts?.Substance || 1.0);\n\n    // Calculate energy metrics using the formulas from alchemicalCalculations.ts\n    const fire = scaledElements.Fire;\n    const water = scaledElements.Water;\n    const air = scaledElements.Air;\n    const earth = scaledElements.Earth;\n\n    // Ensure we have non-zero values for denominator\n    const safeValue = (val: number) => Math.max(val, 0.01);\n\n    // Heat formula: (spirit^2 + fire^2) / ((substance || 1) + essence + matter + water + air + earth)^2\n    const heat =\n      (Math.pow(safeValue(boostedSpirit), 2) + Math.pow(safeValue(fire), 2)) / \n      Math.pow(safeValue(boostedSubstance + boostedEssence + boostedMatter + water + air + earth), 2);\n\n    // Entropy formula: (spirit^2 + substance^2 + fire^2 + air^2) / ((essence || 1) + matter + earth + water)^2\n    const entropy =\n      (Math.pow(safeValue(boostedSpirit), 2) + Math.pow(safeValue(boostedSubstance), 2) + \n      Math.pow(safeValue(fire), 2) + Math.pow(safeValue(air), 2)) / \n      Math.pow(safeValue(boostedEssence + boostedMatter + earth + water), 2);\n\n    // Reactivity formula: (spirit^2 + substance^2 + essence^2 + fire^2 + air^2 + water^2) / ((matter || 1) + earth)^2\n    const reactivity =\n      (Math.pow(safeValue(boostedSpirit), 2) + Math.pow(safeValue(boostedSubstance), 2) + \n      Math.pow(safeValue(boostedEssence), 2) + Math.pow(safeValue(fire), 2) + \n      Math.pow(safeValue(air), 2) + Math.pow(safeValue(water), 2)) / \n      Math.pow(safeValue(boostedMatter + earth), 2);\n\n    // Greg's Energy formula with consistent scaling\n    const rawGregsEnergy = heat - reactivity * entropy;\n    const scaledGregsEnergy = (rawGregsEnergy + 1) / 2; // Convert from range (-1,1) to (0,1)\n    const gregsEnergy = Math.max(0.1, Math.min(1.0, scaledGregsEnergy));\n\n    // Normalize all energy values to ensure they're in the 0-1 range\n    const normalizedHeat = Math.max(0.1, Math.min(1.0, heat));\n    const normalizedEntropy = Math.max(0.1, Math.min(1.0, entropy));\n    const normalizedReactivity = Math.max(0.1, Math.min(1.0, reactivity));\n\n    // Calculate dominant element based on scaled elements\n    const dominantElement = Object.entries(scaledElements).sort(\n      ([_keyA, valueA], [_keyB, valueB]) => valueB - valueA\n    )[0][0] as ElementalCharacter;\n\n    // Calculate dominant alchemical property\n    const alchemicalProperties = {\n      Spirit: boostedSpirit,\n      Essence: boostedEssence,\n      Matter: boostedMatter,\n      Substance: boostedSubstance,\n    };\n    const dominantAlchemicalProperty = Object.entries(\n      alchemicalProperties\n    ).sort(\n      ([_keyA, valueA], [_keyB, valueB]) => valueB - valueA\n    )[0][0] as AlchemicalProperty;\n\n    // Extract dominant planets based on planetary positions if available\n    let dominantPlanets: string[] = [];\n    if (planetaryPositions) {\n      // Get top 3 planets with highest values or dignity\n      const planetEntries = Object.entries(planetaryPositions).filter(\n        ([planet, _]) => planet !== 'isDaytime' && planet !== 'currentZodiac'\n      );\n\n      // Handle different position data formats\n      dominantPlanets = planetEntries\n        .sort(([_, valA], [__, valB]) => {\n          // Sort by strength /dignity if available\n          if (typeof valA === 'object' && typeof valB === 'object') {\n            const dataA = valA as Record<string, unknown>;\n            const dataB = valB as Record<string, unknown>;\n            const strengthA = dataA?.strength || 0;\n            const strengthB = dataB?.strength || 0;\n            return strengthB - strengthA;\n          }\n          // Default sort for simple numeric values\n          return Number(valB) - Number(valA);\n        })\n        .slice(0, 3)\n        .map(([planet, _]) => planet);\n    }\n\n    // Ensure we have planetary dignities data\n    const planetaryDignities = {};\n\n    // Handle NaN values or infinity for all properties\n    const ensureSafeNumber = (val: number): number => {\n      if (isNaN(val) || !isFinite(val)) return 0.2;\n      return val;\n    };\n\n    return {\n      id: item.id,\n      name: item.name,\n      elementalProperties: item.elementalProperties,\n      transformedElementalProperties: scaledElements,\n      alchemicalProperties: {\n        Spirit: boostedSpirit,\n        Essence: boostedEssence,\n        Matter: boostedMatter,\n        Substance: boostedSubstance,\n      },\n      heat: normalizedHeat,\n      entropy: normalizedEntropy,\n      reactivity: normalizedReactivity,\n      gregsEnergy: gregsEnergy,\n      dominantElement,\n      dominantAlchemicalProperty,\n      planetaryBoost: planetaryInfluence,\n      dominantPlanets,\n      planetaryDignities,\n    } as unknown as AlchemicalItem;\n  });\n}\n\n// New differentiation functions\nconst applyNonLinearScaling = (\n  props: ElementalProperties\n): ElementalProperties => ({\n  Fire: Math.tanh(props.Fire * 2),\n  Water: 1 - Math.exp(-props.Water * 3),\n  Earth: props.Earth ** 1.5,\n  Air: Math.sin((props.Air * Math.PI) / 2),\n});\n\nconst calculateUniquenessScore = (item: ElementalItem): number => {\n  const variance = Object.values(item.elementalProperties).reduce(\n    (acc: number, val: number) => acc + Math.abs(val - 0.5),\n    0\n  );\n  return Math.min(1, variance * 2);\n};\n\n// Add or update the normalizeElementalValues function\nexport function normalizeElementalValues(\n  values: Record<ElementalCharacter, number>\n): Record<ElementalCharacter, number> {\n  const total = Object.values(values).reduce((sum, val) => sum + val, 0);\n\n  // If total is zero or close to zero, return default distribution\n  if (total < 0.01) {\n    return {\n      Fire: 0.25,\n      Water: 0.25,\n      Earth: 0.25,\n      Air: 0.25,\n    };\n  }\n\n  // Normalize values to sum to 1.0\n  return {\n    Fire: values.Fire /total,\n    Water: values.Water /total,\n    Earth: values.Earth /total,\n    Air: values.Air /total,\n  };\n}\n\n// Get the primary element regardless of format\nexport function getPrimaryElement(\n  elementalAffinity: ElementalAffinity\n): string {\n  const affinityData = elementalAffinity as Record<string, unknown>;\n  return (\n    affinityData?.base || affinityData?.element || 'Fire'\n  );\n}\n\n// Get element strength if available\nexport function getElementStrength(\n  elementalAffinity: ElementalAffinity\n): number {\n  const affinityData = elementalAffinity as Record<string, unknown>;\n  return affinityData?.strength || 1;\n}\n\n/**\n * Ensures all required elemental properties are present\n * @param properties The elemental properties to validate and complete\n * @returns Complete elemental properties\n */\nexport const ensureCompleteElementalProperties = (\n  properties: Partial<ElementalProperties>\n): ElementalProperties => {\n  return {\n    Fire: properties.Fire ?? 0.25,\n    Water: properties.Water ?? 0.25,\n    Earth: properties.Earth ?? 0.25,\n    Air: properties.Air ?? 0.25,\n  };\n};\n\n/**\n * WARNING: getBalancingElement is legacy and does not comply with current elemental logic principles (no opposing/balancing elements). Review usage and refactor/remove if not needed.\n */\nexport function getBalancingElement(element) {\n  // Elements work best with themselves - reinforcing the current energy\n  return element;\n}\n\n/**\n * WARNING: getElementalRelationship is legacy and may not comply with current elemental logic principles.\n * All element combinations are harmonious; avoid using \"opposing\" or \"controlling\" logic.\n */\nexport function getElementalRelationship(\n  element1: Element,\n  element2: Element\n): ElementalRelationship {\n  if (element1 === element2) {\n    return 'same';\n  }\n\n  // The generating cycle for 4-element system: Fire → Earth → Water → Air → Fire\n  const generatingCycle: { [key in Element]: Element } = {\n    Fire: 'Earth',\n    Earth: 'Water', \n    Water: 'Air',\n    Air: 'Fire',\n  };\n\n  // The controlling cycle for 4-element system: Fire → Air → Earth → Water → Fire\n  const controllingCycle: { [key in Element]: Element } = {\n    Fire: 'Air',\n    Air: 'Earth', \n    Earth: 'Water',\n    Water: 'Fire',\n  };\n\n  if (generatingCycle[element1] === element2) {\n    return 'generating'; // element1 generates element2\n  } else if (generatingCycle[element2] === element1) {\n    return 'weakened-by'; // element2 generates element1\n  } else if (controllingCycle[element1] === element2) {\n    return 'controlling'; // element1 controls element2\n  } else if (controllingCycle[element2] === element1) {\n    return 'controlled-by'; // element2 controls element1\n  } else {\n    return 'neutral';\n  }\n}\n\n/**\n * Gets the element that strengthens the provided element\n */\nexport function getStrengtheningElement(element: Element): Element {\n  // The element that generates the provided element will strengthen it\n  const strengthMap: { [key in Element]: Element } = {\n    Fire: 'Air', // Air strengthens Fire\n    Earth: 'Fire', // Fire strengthens Earth\n    Water: 'Earth', // Earth strengthens Water\n    Air: 'Water', // Water strengthens Air\n  };\n\n  return strengthMap[element];\n}\n\n/**\n * Enhance vegetable transformations by adding thermodynamic effects to different cooking methods\n * @param vegetables The collection of vegetables to enhance\n * @returns Enhanced vegetables with complete transformation properties\n */\nexport function enhanceVegetableTransformations(\n  vegetables: Record<string, Record<string, string>>\n): Record<string, Record<string, string>> {\n  return Object.entries(vegetables).reduce((acc, [key, vegetable]) => {\n    // Skip if not an object\n    if (typeof vegetable !== 'object' || vegetable === null) {\n      acc[key] = vegetable;\n      return acc;\n    }\n\n    const enhanced = { ...vegetable };\n\n    // Create transformation if it doesn't exist\n    if (!enhanced.elementalTransformation) {\n      // Get the dominant element\n      const elementalProps = enhanced.elementalProperties || {\n        Earth: 0.3,\n        Water: 0.3,\n        Air: 0.2,\n        Fire: 0.2,\n      };\n      let dominantElement = 'Earth';\n      let highestValue = 0;\n\n      for (const [element, value] of Object.entries(elementalProps)) {\n        if (typeof value === 'number' && value > highestValue) {\n          dominantElement = element;\n          highestValue = value;\n        }\n      }\n\n      // Set default transformations based on dominant element\n      enhanced.elementalTransformation = {\n        whenCooked: { [dominantElement]: 0.1, Fire: 0.05 },\n        whenDried: { Earth: 0.1, Air: 0.05 },\n        whenFermented: { Water: 0.1, Air: 0.05 },\n      };\n    }\n\n    // Add thermodynamic changes if they don't exist\n    if (\n      enhanced.elementalTransformation &&\n      !enhanced.elementalTransformation.thermodynamicChanges\n    ) {\n      enhanced.elementalTransformation.thermodynamicChanges = {\n        cooked: {\n          heat: 0.1,\n          entropy: 0.05,\n          reactivity: 0.05,\n        },\n        dried: {\n          heat: -0.05,\n          entropy: -0.1,\n          reactivity: -0.05,\n        },\n        fermented: {\n          entropy: 0.2,\n          reactivity: 0.15,\n          stabilityIndex: -0.1,\n        },\n        roasted: {\n          heat: 0.2,\n          entropy: 0.1,\n          energy: 0.15,\n        },\n        steamed: {\n          heat: 0.05,\n          moisture: 0.2,\n          reactivity: 0.05,\n        },\n      };\n    }\n\n    // Add elementalSignature if it doesn't exist\n    if (!enhanced.elementalSignature && enhanced.elementalProperties) {\n      enhanced.elementalSignature = Object.entries(enhanced.elementalProperties)\n        .sort((a, b) => {\n          // Apply Pattern KK-1: Explicit Type Assertion for arithmetic operations\n          const valueA = Number(a[1]) || 0;\n          const valueB = Number(b[1]) || 0;\n          return valueB - valueA;\n        })\n        .map(([element, value]) => [element, Number(value)]);\n    }\n\n    // Add sensory profiles if they don't exist\n    if (!enhanced.sensoryProfile) {\n      // Default sensory profile based on vegetable subCategory\n      const subCategory = enhanced.subCategory || 'vegetable';\n\n      const profiles = {\n        'leafy green': {\n          taste: {\n            bitter: 0.6,\n            sweet: 0.2,\n            umami: 0.1,\n            salty: 0.05,\n            sour: 0.05,\n            spicy: 0,\n          },\n          aroma: {\n            herbal: 0.5,\n            earthy: 0.3,\n            floral: 0.1,\n            fruity: 0.05,\n            woody: 0.05,\n            spicy: 0,\n          },\n          texture: {\n            crisp: 0.7,\n            tender: 0.2,\n            silky: 0.1,\n            chewy: 0,\n            creamy: 0,\n            crunchy: 0,\n          },\n        },\n        root: {\n          taste: {\n            sweet: 0.5,\n            earthy: 0.3,\n            bitter: 0.1,\n            umami: 0.1,\n            salty: 0,\n            spicy: 0,\n          },\n          aroma: {\n            earthy: 0.6,\n            woody: 0.2,\n            herbal: 0.1,\n            fruity: 0.1,\n            floral: 0,\n            spicy: 0,\n          },\n          texture: {\n            crunchy: 0.6,\n            chewy: 0.2,\n            tender: 0.2,\n            crisp: 0,\n            silky: 0,\n            creamy: 0,\n          },\n        },\n        allium: {\n          taste: {\n            pungent: 0.6,\n            sweet: 0.2,\n            umami: 0.2,\n            bitter: 0,\n            salty: 0,\n            sour: 0,\n          },\n          aroma: {\n            spicy: 0.7,\n            earthy: 0.2,\n            herbal: 0.1,\n            floral: 0,\n            fruity: 0,\n            woody: 0,\n          },\n          texture: {\n            crunchy: 0.5,\n            chewy: 0.3,\n            tender: 0.2,\n            crisp: 0,\n            silky: 0,\n            creamy: 0,\n          },\n        },\n        cruciferous: {\n          taste: {\n            bitter: 0.5,\n            sweet: 0.2,\n            spicy: 0.2,\n            umami: 0.1,\n            salty: 0,\n            sour: 0,\n          },\n          aroma: {\n            earthy: 0.4,\n            sulfurous: 0.3,\n            woody: 0.2,\n            herbal: 0.1,\n            floral: 0,\n            fruity: 0,\n          },\n          texture: {\n            crunchy: 0.7,\n            crisp: 0.2,\n            tender: 0.1,\n            chewy: 0,\n            silky: 0,\n            creamy: 0,\n          },\n        },\n        nightshade: {\n          taste: {\n            umami: 0.5,\n            sweet: 0.3,\n            sour: 0.1,\n            bitter: 0.1,\n            salty: 0,\n            spicy: 0,\n          },\n          aroma: {\n            fruity: 0.5,\n            earthy: 0.3,\n            herbal: 0.2,\n            floral: 0,\n            woody: 0,\n            spicy: 0,\n          },\n          texture: {\n            tender: 0.5,\n            juicy: 0.3,\n            chewy: 0.2,\n            crisp: 0,\n            crunchy: 0,\n            silky: 0,\n          },\n        },\n        squash: {\n          taste: {\n            sweet: 0.6,\n            earthy: 0.2,\n            nutty: 0.2,\n            bitter: 0,\n            salty: 0,\n            sour: 0,\n          },\n          aroma: {\n            earthy: 0.4,\n            sweet: 0.4,\n            woody: 0.1,\n            herbal: 0.1,\n            floral: 0,\n            spicy: 0,\n          },\n          texture: {\n            tender: 0.4,\n            creamy: 0.3,\n            chewy: 0.2,\n            crisp: 0.1,\n            crunchy: 0,\n            silky: 0,\n          },\n        },\n        legume: {\n          taste: {\n            earthy: 0.5,\n            sweet: 0.3,\n            umami: 0.2,\n            bitter: 0,\n            salty: 0,\n            sour: 0,\n          },\n          aroma: {\n            earthy: 0.6,\n            nutty: 0.3,\n            herbal: 0.1,\n            floral: 0,\n            fruity: 0,\n            spicy: 0,\n          },\n          texture: {\n            tender: 0.4,\n            creamy: 0.3,\n            chewy: 0.3,\n            crisp: 0,\n            crunchy: 0,\n            silky: 0,\n          },\n        },\n        starchy: {\n          taste: {\n            sweet: 0.5,\n            earthy: 0.3,\n            umami: 0.2,\n            bitter: 0,\n            salty: 0,\n            sour: 0,\n          },\n          aroma: {\n            earthy: 0.7,\n            nutty: 0.2,\n            herbal: 0.1,\n            floral: 0,\n            fruity: 0,\n            spicy: 0,\n          },\n          texture: {\n            starchy: 0.6,\n            tender: 0.2,\n            creamy: 0.2,\n            crisp: 0,\n            crunchy: 0,\n            silky: 0,\n          },\n        },\n      };\n\n      // Select appropriate profile or use default\n      const profile = profiles[subCategory] || {\n        taste: {\n          sweet: 0.25,\n          bitter: 0.25,\n          umami: 0.25,\n          salty: 0.15,\n          sour: 0.1,\n          spicy: 0,\n        },\n        aroma: {\n          earthy: 0.3,\n          herbal: 0.3,\n          woody: 0.2,\n          fruity: 0.1,\n          floral: 0.1,\n          spicy: 0,\n        },\n        texture: {\n          tender: 0.3,\n          crunchy: 0.3,\n          crisp: 0.2,\n          chewy: 0.1,\n          creamy: 0.1,\n          silky: 0,\n        },\n      };\n\n      enhanced.sensoryProfile = profile;\n    }\n\n    acc[key] = enhanced;\n    return acc;\n  }, {});\n}\n\n/**\n * Enhances oil properties with additional culinary, sensory, and transformation details\n * @param oils Record of oil ingredients\n * @returns Enhanced oil ingredients with complete properties\n */\nexport function enhanceOilProperties(\n  oils: Record<string, Record<string, string>>\n): Record<string, Record<string, string>> {\n  return Object.entries(oils).reduce((acc, [key, oil]) => {\n    // Start with the original oil\n    const enhancedOil = { ...oil };\n\n    // Ensure basic properties exist\n    enhancedOil.category = enhancedOil.category || 'oil';\n    enhancedOil.elementalProperties = enhancedOil.elementalProperties || {\n      Fire: 0.3,\n      Water: 0.2,\n      Earth: 0.3,\n      Air: 0.2,\n    };\n    enhancedOil.qualities = Array.isArray(enhancedOil.qualities)\n      ? enhancedOil.qualities\n      : [];\n\n    // Create default sensory profile if none exists\n    if (!enhancedOil.sensoryProfile) {\n      const oilType = key.toLowerCase();\n      const isFruity = oilType.includes('olive') || oilType.includes('avocado');\n      const isNutty =\n        oilType.includes('nut') ||\n        oilType.includes('sesame') ||\n        oilType.includes('walnut') ||\n        oilType.includes('almond') ||\n        oilType.includes('peanut');\n      const isFloral =\n        oilType.includes('sunflower') || oilType.includes('safflower');\n      const isNeutral =\n        oilType.includes('vegetable') ||\n        oilType.includes('canola') ||\n        oilType.includes('grapeseed');\n      const isTropical =\n        oilType.includes('coconut') || oilType.includes('palm');\n\n      enhancedOil.sensoryProfile = {\n        taste: {\n          sweet: isFruity || isTropical ? 0.6 : 0.2,\n          bitter: isNutty ? 0.4 : 0.1,\n          umami: isNutty ? 0.5 : 0.2,\n          rich: isNutty || isFruity ? 0.7 : 0.4,\n        },\n        aroma: {\n          fruity: isFruity ? 0.8 : 0.1,\n          nutty: isNutty ? 0.8 : 0.1,\n          floral: isFloral ? 0.7 : 0.1,\n          neutral: isNeutral ? 0.9 : 0.2,\n          tropical: isTropical ? 0.8 : 0.1,\n        },\n        texture: {\n          viscosity: isTropical || oilType.includes('olive') ? 0.7 : 0.5,\n          mouthfeel: isFruity || isNutty ? 0.8 : 0.5,\n          richness: isFruity || isNutty || isTropical ? 0.7 : 0.4,\n        },\n      };\n    }\n\n    // Enhance culinary applications if present\n    if (enhancedOil.culinaryApplications) {\n      // Ensure all application types are properly structured\n      Object.entries(enhancedOil.culinaryApplications).forEach(\n        ([appType, application]) => {\n          if (application && typeof application === 'object') {\n            const appData = application as Record<string, unknown>;\n            enhancedOil.culinaryApplications[appType] = {\n              ...application,\n              elementalEffect: appData?.elementalEffect || {\n                Fire:\n                  appType === 'frying' ||\n                  appType === 'cooking' ||\n                  appType === 'highHeat'\n                    ? 0.2\n                    : 0.1,\n                Water:\n                  appType === 'dressing' || appType === 'marinade' ? 0.2 : 0.1,\n                Earth:\n                  appType === 'baking' || appType === 'roasting' ? 0.2 : 0.1,\n                Air:\n                  appType === 'emulsion' || appType === 'whipping' ? 0.2 : 0.1,\n              },\n              alchemicalEffect: appData?.alchemicalEffect || {\n                spirit:\n                  appType === 'finishing' || appType === 'infusion' ? 0.2 : 0.1,\n                essence:\n                  appType === 'dressing' || appType === 'marinade' ? 0.2 : 0.1,\n                matter:\n                  appType === 'baking' || appType === 'cooking' ? 0.2 : 0.1,\n                substance:\n                  appType === 'frying' || appType === 'highHeat' ? 0.2 : 0.1,\n              },\n            };\n          }\n        }\n      );\n    } else {\n      // Create default culinary applications based on smoke point and oil type\n      const smokePoint = enhancedOil.smokePoint?.fahrenheit || 0;\n      const isHighHeat = smokePoint > 400;\n      const isMediumHeat = smokePoint > 325 && smokePoint <= 400;\n      const isLowHeat = smokePoint <= 325;\n      const isFinishing =\n        key.toLowerCase().includes('olive') ||\n        key.toLowerCase().includes('walnut') ||\n        key.toLowerCase().includes('sesame') ||\n        key.toLowerCase().includes('pumpkin');\n\n      enhancedOil.culinaryApplications = {\n        ...(isHighHeat\n          ? {\n              frying: {\n                notes: ['Excellent for high-heat cooking'],\n                techniques: ['Deep frying', 'Stir-frying', 'Sautéing'],\n                elementalEffect: { Fire: 0.3, Earth: 0.1 },\n                alchemicalEffect: { substance: 0.3, matter: 0.2 },\n              },\n            }\n          : {}),\n        ...(isMediumHeat\n          ? {\n              cooking: {\n                notes: ['Good for medium-heat cooking'],\n                techniques: ['Sautéing', 'Pan frying', 'Roasting'],\n                elementalEffect: { Fire: 0.2, Earth: 0.2 },\n                alchemicalEffect: { matter: 0.3, essence: 0.1 },\n              },\n            }\n          : {}),\n        ...(isLowHeat || isFinishing\n          ? {\n              finishing: {\n                notes: ['Best used unheated or low heat'],\n                techniques: ['Drizzling', 'Dressings', 'Dips'],\n                elementalEffect: { Water: 0.3, Air: 0.2 },\n                alchemicalEffect: { spirit: 0.3, essence: 0.2 },\n              },\n            }\n          : {}),\n        ...(enhancedOil.subCategory === 'baking' ||\n        key.toLowerCase().includes('coconut')\n          ? {\n              baking: {\n                notes: ['Suitable for baked goods'],\n                techniques: ['Cakes', 'Cookies', 'Breads'],\n                elementalEffect: { Earth: 0.3, Fire: 0.1 },\n                alchemicalEffect: { matter: 0.3, substance: 0.1 },\n              },\n            }\n          : {}),\n      };\n    }\n\n    // Add cooking transformations if they don't exist\n    if (!enhancedOil.elementalTransformation) {\n      enhancedOil.elementalTransformation = {\n        whenHeated: {\n          Fire: 0.2,\n          Air: 0.1,\n          Water: -0.1,\n          Earth: -0.05,\n        },\n        whenCooled: {\n          Water: 0.1,\n          Earth: 0.2,\n          Fire: -0.1,\n          Air: -0.05,\n        },\n        whenMixed: {\n          Air: 0.15,\n          Water: 0.1,\n          Fire: -0.05,\n          Earth: -0.05,\n        },\n        whenInfused: {\n          Air: 0.2,\n          Fire: 0.1,\n          Earth: -0.05,\n          Water: -0.05,\n        },\n      };\n    }\n\n    // Add thermodynamic properties if they don't exist\n    if (!enhancedOil.thermodynamicProperties) {\n      // Base on smoke point if available\n      const smokePoint = enhancedOil.smokePoint?.fahrenheit || 350;\n      const normalizedSmokePoint = (smokePoint - 300) / 250; // Normalize between 300-550°F\n      const heatValue = 0.5 + normalizedSmokePoint * 0.4; // Scale 0.5-0.9\n\n      enhancedOil.thermodynamicProperties = {\n        heat: Math.min(Math.max(heatValue, 0.3), 0.9),\n        entropy: 0.4,\n        reactivity: 0.6,\n        energy: 0.7,\n      };\n    }\n\n    // Add recommended cooking methods if they don't exist\n    if (!enhancedOil.recommendedCookingMethods) {\n      const smokePoint = enhancedOil.smokePoint?.fahrenheit || 0;\n      const methods = [];\n\n      if (smokePoint > 400) {\n        methods.push({ name: 'deepFrying', potency: 0.9 });\n        methods.push({ name: 'stirFrying', potency: 0.9 });\n        methods.push({ name: 'sautéing', potency: 0.8 });\n      }\n\n      if (smokePoint > 350) {\n        methods.push({ name: 'roasting', potency: 0.7 });\n        methods.push({ name: 'baking', potency: 0.7 });\n      }\n\n      if (enhancedOil.subCategory === 'finishing' || smokePoint < 350) {\n        methods.push({ name: 'dressing', potency: 0.9 });\n        methods.push({ name: 'marinating', potency: 0.8 });\n        methods.push({ name: 'drizzling', potency: 1.0 });\n      }\n\n      enhancedOil.recommendedCookingMethods = methods;\n    }\n\n    acc[key] = enhancedOil;\n    return acc;\n  }, {});\n}\n\n/**\n * Pattern OO-3: Utility Import Alignment - Standalone exports for TS2614 compatibility\n */\nexport function getCurrentElementalState(): ElementalProperties {\n  return ElementalCalculator.getCurrentElementalState();\n}\n\nexport function getDefaultElementalProperties(): ElementalProperties {\n  return DEFAULT_ELEMENTAL_PROPERTIES;\n}\n\nexport function ensureLowercaseFormat(properties: unknown): any {\n  if (!properties || typeof properties !== 'object') {\n    return properties;\n  }\n  \n  const lowercaseProps: Record<string, unknown> = {};\n  for (const [key, value] of Object.entries(properties)) {\n    // Convert capitalized element names to lowercase\n    const lowerKey = key.toLowerCase();\n    lowercaseProps[lowerKey] = value;\n  }\n  \n  return lowercaseProps;\n}\n\n/**\n * Ensures the returned object always matches the IngredientMapping interface at runtime.\n */\nexport const fixIngredientMapping = (\n  mapping: Partial<IngredientMapping>,\n  key: string\n): IngredientMapping => {\n  // Format key into a readable name if no name is provided\n  const formattedName = key\n    .split('_')\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n\n  // Ensure all required elements exist in elementalProperties\n  const elementalProperties = mapping.elementalProperties\n    ? ensureCompleteElementalProperties(mapping.elementalProperties)\n    : DEFAULT_ELEMENTAL_PROPERTIES;\n\n  // Add runtime type guard (minimal, since normalization is already enforced)\n  const requiredKeys = ['name', 'category', 'elementalProperties'];\n  for (const k of requiredKeys) {\n    if (!(k in mapping)) {\n      throw new Error(`fixIngredientMapping: Missing required key '${k}' for ingredient '${key}'`);\n    }\n  }\n  \n  // Ensure astrologicalProfile has minimal structure if present but empty\n  if (mapping.astrologicalProfile && typeof mapping.astrologicalProfile === 'object' && Object.keys(mapping.astrologicalProfile).length === 0) {\n    mapping.astrologicalProfile = {\n      rulingPlanets: [],\n      favorableZodiac: []\n    };\n  }\n  return {\n    ...mapping,\n    name: mapping.name || formattedName,\n    elementalProperties,\n  } as IngredientMapping;\n};\n\n/**\n * Normalizes all ingredient mappings and guarantees type safety for downstream usage.\n */\nexport const fixIngredientMappings = <\n  T extends Record<string, Partial<IngredientMapping>>\n>(\n  ingredients: T\n): Record<string, IngredientMapping> => {\n  const result: Record<string, IngredientMapping> = {};\n\n  Object.entries(ingredients).forEach(([key, mapping]) => {\n    result[key] = fixIngredientMapping(mapping, key);\n  });\n\n  return result;\n};\n\n/**\n * Fixes ingredient mappings by ensuring all required properties are present\n * @param ingredients Raw ingredient mappings\n * @returns Fixed ingredient mappings\n */\nexport function fixRawIngredientMappings(\n  ingredients: Record<string, unknown>\n): Record<string, unknown> {\n  return Object.entries(ingredients).reduce((acc, [key, value]) => {\n    // Skip null or undefined values\n    if (!value) return acc;\n\n    const valueData = value as Record<string, unknown>;\n    // Ensure elemental properties are normalized\n    const elementalProperties = normalizeProperties(\n      valueData?.elementalProperties || {}\n    );\n\n    // Create a standardized astrological profile if one doesn't exist\n    const astroProfile = valueData?.astrologicalProfile || {};\n\n    // Determine base elemental affinity if not provided\n    if (!astroProfile.elementalAffinity) {\n      const strongestElement = Object.entries(elementalProperties)\n        .sort(([, a], [, b]) => b - a)[0][0]\n        .toLowerCase();\n\n      astroProfile.elementalAffinity = {\n        base: strongestElement,\n      };\n    }\n\n    acc[key] = {\n      ...(value as Record<string, unknown>),\n      name: valueData?.name || key.replace(/_/g, ' '),\n      category: valueData?.category || 'ingredient',\n      elementalProperties,\n      astrologicalProfile: astroProfile,\n    };\n\n    return acc;\n  }, {});\n}\n\ntype ElementalRelationship =\n  | 'generating'\n  | 'controlling'\n  | 'same'\n  | 'controlled-by'\n  | 'weakened-by'\n  | 'neutral';\n\n/**\n * Calculate the affinity between two elements based on the Five Elements theory\n * Returns a value between 0 and 1, where:\n * - 1.0: Same element (perfect affinity)\n * - 0.8: Element is generated by (child of) the other\n * - 0.6: Element generates (parent of) the other\n * - 0.4: Neutral relationship\n * - 0.2: Element is controlled by the other\n * - 0.0: Element controls the other (weakest affinity)\n */\nexport function calculateElementalAffinity(\n  element1: Element,\n  element2: Element\n): number {\n  const relationship = getElementalRelationship(element1, element2);\n\n  switch (relationship) {\n    case 'same':\n      return 1.0;\n    case 'generating':\n      return 0.8;\n    case 'controlled-by':\n      return 0.6;\n    case 'neutral':\n      return 0.4;\n    case 'weakened-by':\n      return 0.2;\n    case 'controlling':\n      return 0.0;\n    default:\n      return 0.4;\n  }\n}\n"],"version":3}