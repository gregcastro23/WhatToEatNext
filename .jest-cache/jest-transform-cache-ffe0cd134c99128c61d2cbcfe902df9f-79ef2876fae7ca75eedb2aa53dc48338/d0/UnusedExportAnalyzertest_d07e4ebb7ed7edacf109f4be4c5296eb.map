{"file":"/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/UnusedExportAnalyzer.test.ts","mappings":"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","names":[],"sources":["/Users/GregCastro/Desktop/WhatToEatNext/src/services/campaign/UnusedExportAnalyzer.test.ts"],"sourcesContent":["/**\n * Unused Export Analyzer Tests\n * Perfect Codebase Campaign - Phase 3 Implementation\n */\n\nimport { UnusedExportAnalyzer, FilePriority, FileCategory, TransformationComplexity } from './UnusedExportAnalyzer';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n// Mock fs and glob\njest.mock('fs');\njest.mock('glob');\n\nconst mockFs = fs as jest.Mocked<typeof fs>;\nconst mockGlob = require('glob') as { glob: jest.MockedFunction<any> };\n\ndescribe('UnusedExportAnalyzer', () => {\n  let analyzer: UnusedExportAnalyzer;\n\n  beforeEach(() => {\n    analyzer = new UnusedExportAnalyzer('src');\n    jest.clearAllMocks();\n  });\n\n  describe('constructor', () => {\n    it('should initialize with default src path', () => {\n      const defaultAnalyzer = new UnusedExportAnalyzer();\n      expect(defaultAnalyzer).toBeInstanceOf(UnusedExportAnalyzer);\n    });\n\n    it('should initialize with custom src path', () => {\n      const customAnalyzer = new UnusedExportAnalyzer('custom/src');\n      expect(customAnalyzer).toBeInstanceOf(UnusedExportAnalyzer);\n    });\n  });\n\n  describe('analyzeUnusedExports', () => {\n    beforeEach(() => {\n      // Mock glob to return test files\n      mockGlob.glob.mockResolvedValue([\n        '/project/src/components/TestComponent.tsx',\n        '/project/src/services/TestService.ts',\n        '/project/src/data/recipes/TestRecipe.ts'\n      ]);\n\n      // Mock file reading\n      mockFs.promises = {\n        readFile: jest.fn().mockImplementation((filePath: string) => {\n          if (filePath.includes('TestComponent.tsx')) {\n            return Promise.resolve(`\nexport const UnusedComponent = () => <div>Test</div>;\nexport function UsedFunction() { return 'used'; }\nexport interface UnusedInterface { id: string; }\n            `);\n          }\n          if (filePath.includes('TestService.ts')) {\n            return Promise.resolve(`\nexport class UnusedService {\n  method() { return 'test'; }\n}\nexport const USED_CONSTANT = 'used';\n            `);\n          }\n          if (filePath.includes('TestRecipe.ts')) {\n            return Promise.resolve(`\nexport const unusedRecipeData = { name: 'test' };\nexport default function UnusedRecipeFunction() { return {}; }\n            `);\n          }\n          return Promise.resolve('');\n        })\n      } as any;\n    });\n\n    it('should analyze unused exports across files', async () => {\n      const result = await analyzer.analyzeUnusedExports();\n\n      expect(result).toHaveProperty('totalFiles');\n      expect(result).toHaveProperty('totalUnusedExports');\n      expect(result).toHaveProperty('highPriorityFiles');\n      expect(result).toHaveProperty('mediumPriorityFiles');\n      expect(result).toHaveProperty('lowPriorityFiles');\n      expect(result).toHaveProperty('summary');\n    });\n\n    it('should categorize files by priority', async () => {\n      const result = await analyzer.analyzeUnusedExports();\n\n      // Recipe files should be high priority\n      const recipeFile = result.highPriorityFiles.find(f => f.filePath.includes('recipes'));\n      expect(recipeFile).toBeDefined();\n      expect(recipeFile?.priority).toBe(FilePriority.HIGH);\n\n      // Component files should be medium priority\n      const componentFile = result.mediumPriorityFiles.find(f => f.filePath.includes('components'));\n      expect(componentFile).toBeDefined();\n      expect(componentFile?.priority).toBe(FilePriority.MEDIUM);\n    });\n\n    it('should identify transformation candidates', async () => {\n      const result = await analyzer.analyzeUnusedExports();\n\n      const fileWithCandidates = [...result.highPriorityFiles, ...result.mediumPriorityFiles, ...result.lowPriorityFiles]\n        .find(f => f.transformationCandidates.length > 0);\n\n      expect(fileWithCandidates).toBeDefined();\n      expect(fileWithCandidates?.transformationCandidates[0]).toHaveProperty('intelligenceSystemName');\n      expect(fileWithCandidates?.transformationCandidates[0]).toHaveProperty('transformationComplexity');\n      expect(fileWithCandidates?.transformationCandidates[0]).toHaveProperty('safetyScore');\n      expect(fileWithCandidates?.transformationCandidates[0]).toHaveProperty('estimatedBenefit');\n    });\n  });\n\n  describe('extractExports', () => {\n    it('should extract named exports', () => {\n      const content = `\nexport const testConst = 'value';\nexport function testFunction() {}\nexport class TestClass {}\nexport interface TestInterface {}\nexport type TestType = string;\n      `;\n\n      const exports = (analyzer as any).extractExports(content);\n      \n      expect(exports).toHaveLength(5);\n      expect(exports.find((e: any) => e.exportName === 'testConst')).toBeDefined();\n      expect(exports.find((e: any) => e.exportName === 'testFunction')).toBeDefined();\n      expect(exports.find((e: any) => e.exportName === 'TestClass')).toBeDefined();\n      expect(exports.find((e: any) => e.exportName === 'TestInterface')).toBeDefined();\n      expect(exports.find((e: any) => e.exportName === 'TestType')).toBeDefined();\n    });\n\n    it('should extract default exports', () => {\n      const content = `\nexport default function DefaultFunction() {}\nexport default class DefaultClass {}\nexport default TestComponent;\n      `;\n\n      const exports = (analyzer as any).extractExports(content);\n      \n      expect(exports.length).toBeGreaterThan(0);\n      expect(exports.some((e: any) => e.isDefault)).toBe(true);\n    });\n\n    it('should extract destructured exports', () => {\n      const content = `\nexport { testA, testB, testC as aliasC };\n      `;\n\n      const exports = (analyzer as any).extractExports(content);\n      \n      expect(exports).toHaveLength(3);\n      expect(exports.find((e: any) => e.exportName === 'testA')).toBeDefined();\n      expect(exports.find((e: any) => e.exportName === 'testB')).toBeDefined();\n      expect(exports.find((e: any) => e.exportName === 'testC')).toBeDefined();\n    });\n  });\n\n  describe('determinePriority', () => {\n    it('should assign HIGH priority to recipe files', () => {\n      const priority = (analyzer as any).determinePriority('/project/src/data/recipes/TestRecipe.ts');\n      expect(priority).toBe(FilePriority.HIGH);\n    });\n\n    it('should assign MEDIUM priority to component files', () => {\n      const priority = (analyzer as any).determinePriority('/project/src/components/TestComponent.tsx');\n      expect(priority).toBe(FilePriority.MEDIUM);\n    });\n\n    it('should assign LOW priority to type files', () => {\n      const priority = (analyzer as any).determinePriority('/project/src/types/TestTypes.ts');\n      expect(priority).toBe(FilePriority.LOW);\n    });\n  });\n\n  describe('determineCategory', () => {\n    it('should categorize recipe files correctly', () => {\n      const category = (analyzer as any).determineCategory('/project/src/data/recipes/TestRecipe.ts');\n      expect(category).toBe(FileCategory.RECIPE);\n    });\n\n    it('should categorize core files correctly', () => {\n      const category = (analyzer as any).determineCategory('/project/src/components/TestComponent.tsx');\n      expect(category).toBe(FileCategory.CORE);\n    });\n\n    it('should categorize external files correctly', () => {\n      const category = (analyzer as any).determineCategory('/project/src/types/TestTypes.ts');\n      expect(category).toBe(FileCategory.EXTERNAL);\n    });\n\n    it('should categorize test files correctly', () => {\n      const category = (analyzer as any).determineCategory('/project/src/components/TestComponent.test.tsx');\n      expect(category).toBe(FileCategory.TEST);\n    });\n  });\n\n  describe('calculateSafetyScore', () => {\n    it('should return high score for simple files', () => {\n      const content = 'export const simple = \"test\";';\n      const unusedExports = [{ exportName: 'simple', exportType: 'const' as const, lineNumber: 1, isDefault: false, complexity: 1, usageCount: 0, filePath: '' }];\n      \n      const score = (analyzer as any).calculateSafetyScore('/project/src/simple.ts', content, unusedExports);\n      expect(score).toBeGreaterThan(80);\n    });\n\n    it('should return lower score for complex files', () => {\n      const content = 'export const complex = \"test\";\\n'.repeat(600); // Large file\n      const unusedExports = Array(15).fill({ exportName: 'test', exportType: 'const' as const, lineNumber: 1, isDefault: false, complexity: 1, usageCount: 0, filePath: '' });\n      \n      const score = (analyzer as any).calculateSafetyScore('/project/src/complex.ts', content, unusedExports);\n      expect(score).toBeLessThan(70);\n    });\n\n    it('should increase score for test files', () => {\n      const content = 'export const testExport = \"test\";\\n'.repeat(300); // Medium complexity file\n      const unusedExports = Array(8).fill({ exportName: 'testExport', exportType: 'const' as const, lineNumber: 1, isDefault: false, complexity: 1, usageCount: 0, filePath: '' });\n      \n      const testScore = (analyzer as any).calculateSafetyScore('/project/src/test.test.ts', content, unusedExports);\n      const normalScore = (analyzer as any).calculateSafetyScore('/project/src/normal.ts', content, unusedExports);\n      \n      expect(testScore).toBeGreaterThan(normalScore);\n    });\n  });\n\n  describe('generateIntelligenceSystemName', () => {\n    it('should generate proper intelligence system names', () => {\n      const exportInfo = { exportName: 'TestComponent', exportType: 'function' as const, lineNumber: 1, isDefault: false, complexity: 1, usageCount: 0, filePath: '' };\n      \n      const name = (analyzer as any).generateIntelligenceSystemName(exportInfo);\n      expect(name).toBe('_TEST_COMPONENT_INTELLIGENCE_SYSTEM');\n    });\n\n    it('should handle camelCase names', () => {\n      const exportInfo = { exportName: 'camelCaseFunction', exportType: 'function' as const, lineNumber: 1, isDefault: false, complexity: 1, usageCount: 0, filePath: '' };\n      \n      const name = (analyzer as any).generateIntelligenceSystemName(exportInfo);\n      expect(name).toBe('CAMEL_CASE_FUNCTION_INTELLIGENCE_SYSTEM');\n    });\n  });\n\n  describe('assessTransformationComplexity', () => {\n    it('should assess SIMPLE complexity for low complexity exports', () => {\n      const exportInfo = { exportName: 'simple', exportType: 'const' as const, lineNumber: 1, isDefault: false, complexity: 3, usageCount: 0, filePath: '' };\n      \n      const complexity = (analyzer as any).assessTransformationComplexity(exportInfo);\n      expect(complexity).toBe(TransformationComplexity.SIMPLE);\n    });\n\n    it('should assess MODERATE complexity for medium complexity exports', () => {\n      const exportInfo = { exportName: 'moderate', exportType: 'function' as const, lineNumber: 1, isDefault: false, complexity: 10, usageCount: 0, filePath: '' };\n      \n      const complexity = (analyzer as any).assessTransformationComplexity(exportInfo);\n      expect(complexity).toBe(TransformationComplexity.MODERATE);\n    });\n\n    it('should assess COMPLEX complexity for high complexity exports', () => {\n      const exportInfo = { exportName: 'complex', exportType: 'class' as const, lineNumber: 1, isDefault: false, complexity: 25, usageCount: 0, filePath: '' };\n      \n      const complexity = (analyzer as any).assessTransformationComplexity(exportInfo);\n      expect(complexity).toBe(TransformationComplexity.COMPLEX);\n    });\n\n    it('should assess VERY_COMPLEX complexity for very high complexity exports', () => {\n      const exportInfo = { exportName: 'veryComplex', exportType: 'class' as const, lineNumber: 1, isDefault: false, complexity: 50, usageCount: 0, filePath: '' };\n      \n      const complexity = (analyzer as any).assessTransformationComplexity(exportInfo);\n      expect(complexity).toBe(TransformationComplexity.VERY_COMPLEX);\n    });\n  });\n\n  describe('generateReport', () => {\n    it('should generate a comprehensive report', () => {\n      const mockAnalysis = {\n        totalFiles: 10,\n        totalUnusedExports: 25,\n        highPriorityFiles: [],\n        mediumPriorityFiles: [],\n        lowPriorityFiles: [],\n        summary: {\n          recipeFiles: 3,\n          coreFiles: 5,\n          externalFiles: 2,\n          totalTransformationCandidates: 20,\n          averageSafetyScore: 85.5,\n          estimatedIntelligenceSystems: 20\n        }\n      };\n\n      const report = analyzer.generateReport(mockAnalysis);\n      \n      expect(report).toContain('# Unused Export Analysis Report');\n      expect(report).toContain('Total files analyzed: 10');\n      expect(report).toContain('Total unused exports: 25');\n      expect(report).toContain('Recipe files: 3');\n      expect(report).toContain('Core files: 5');\n      expect(report).toContain('External files: 2');\n      expect(report).toContain('Average safety score: 85.5');\n    });\n  });\n});"],"version":3}